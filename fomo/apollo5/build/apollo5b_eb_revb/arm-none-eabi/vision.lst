
build/apollo5b_eb_revb/arm-none-eabi/vision.axf:     file format elf32-littlearm


Disassembly of section .text:

00410000 <__Vectors>:
  410000:	00 10 00 20 7d 0c 41 00 71 0c 41 00 75 0c 41 00     ... }.A.q.A.u.A.
  410010:	75 0c 41 00 75 0c 41 00 75 0c 41 00 79 0c 41 00     u.A.u.A.u.A.y.A.
	...
  41002c:	11 3b 43 00 79 0c 41 00 00 00 00 00 a1 3a 43 00     .;C.y.A......:C.
  41003c:	f1 3d 43 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     .=C.y.A.y.A.y.A.
  41004c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41005c:	05 3a 43 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     .:C.y.A.y.A.y.A.
  41006c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41007c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41008c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41009c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4100ac:	c9 84 42 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     ..B.y.A.y.A.y.A.
  4100bc:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4100cc:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4100dc:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4100ec:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4100fc:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41010c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41011c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41012c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41013c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41014c:	79 0c 41 00 15 5d 42 00 3d 5d 42 00 65 5d 42 00     y.A..]B.=]B.e]B.
  41015c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41016c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41017c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41018c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41019c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4101ac:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4101bc:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4101cc:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4101dc:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4101ec:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  4101fc:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41020c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41021c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41022c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41023c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.
  41024c:	79 0c 41 00 79 0c 41 00 79 0c 41 00 79 0c 41 00     y.A.y.A.y.A.y.A.

0041025c <__Patchable>:
	...

00410400 <strcmp>:
  410400:	ea80 0c01 	eor.w	ip, r0, r1
  410404:	f01c 0f03 	tst.w	ip, #3
  410408:	d137      	bne.n	41047a <strcmp+0x7a>
  41040a:	f010 0c03 	ands.w	ip, r0, #3
  41040e:	f020 0003 	bic.w	r0, r0, #3
  410412:	f021 0103 	bic.w	r1, r1, #3
  410416:	f850 2b04 	ldr.w	r2, [r0], #4
  41041a:	bf08      	it	eq
  41041c:	f851 3b04 	ldreq.w	r3, [r1], #4
  410420:	d00e      	beq.n	410440 <strcmp+0x40>
  410422:	f08c 0c03 	eor.w	ip, ip, #3
  410426:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
  41042a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  41042e:	fa23 fc0c 	lsr.w	ip, r3, ip
  410432:	f851 3b04 	ldr.w	r3, [r1], #4
  410436:	ea42 020c 	orr.w	r2, r2, ip
  41043a:	ea43 030c 	orr.w	r3, r3, ip
  41043e:	bf00      	nop
  410440:	f1a2 3c01 	sub.w	ip, r2, #16843009	@ 0x1010101
  410444:	429a      	cmp	r2, r3
  410446:	bf01      	itttt	eq
  410448:	ea2c 0c02 	biceq.w	ip, ip, r2
  41044c:	f01c 3f80 	tsteq.w	ip, #2155905152	@ 0x80808080
  410450:	f850 2b04 	ldreq.w	r2, [r0], #4
  410454:	f851 3b04 	ldreq.w	r3, [r1], #4
  410458:	d0f2      	beq.n	410440 <strcmp+0x40>
  41045a:	ea4f 6002 	mov.w	r0, r2, lsl #24
  41045e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  410462:	2801      	cmp	r0, #1
  410464:	bf28      	it	cs
  410466:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
  41046a:	bf08      	it	eq
  41046c:	0a1b      	lsreq	r3, r3, #8
  41046e:	d0f4      	beq.n	41045a <strcmp+0x5a>
  410470:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
  410474:	0e00      	lsrs	r0, r0, #24
  410476:	1ac0      	subs	r0, r0, r3
  410478:	4770      	bx	lr
  41047a:	f010 0f03 	tst.w	r0, #3
  41047e:	d00a      	beq.n	410496 <strcmp+0x96>
  410480:	f810 2b01 	ldrb.w	r2, [r0], #1
  410484:	f811 3b01 	ldrb.w	r3, [r1], #1
  410488:	2a01      	cmp	r2, #1
  41048a:	bf28      	it	cs
  41048c:	429a      	cmpcs	r2, r3
  41048e:	d0f4      	beq.n	41047a <strcmp+0x7a>
  410490:	eba2 0003 	sub.w	r0, r2, r3
  410494:	4770      	bx	lr
  410496:	f84d 5d04 	str.w	r5, [sp, #-4]!
  41049a:	f850 2b04 	ldr.w	r2, [r0], #4
  41049e:	f001 0503 	and.w	r5, r1, #3
  4104a2:	f021 0103 	bic.w	r1, r1, #3
  4104a6:	f851 3b04 	ldr.w	r3, [r1], #4
  4104aa:	2d02      	cmp	r5, #2
  4104ac:	d026      	beq.n	4104fc <strcmp+0xfc>
  4104ae:	d84d      	bhi.n	41054c <strcmp+0x14c>
  4104b0:	f022 457f 	bic.w	r5, r2, #4278190080	@ 0xff000000
  4104b4:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
  4104b8:	f1a2 3c01 	sub.w	ip, r2, #16843009	@ 0x1010101
  4104bc:	ea2c 0c02 	bic.w	ip, ip, r2
  4104c0:	d10d      	bne.n	4104de <strcmp+0xde>
  4104c2:	f01c 3c80 	ands.w	ip, ip, #2155905152	@ 0x80808080
  4104c6:	bf08      	it	eq
  4104c8:	f851 3b04 	ldreq.w	r3, [r1], #4
  4104cc:	d10a      	bne.n	4104e4 <strcmp+0xe4>
  4104ce:	ea85 0502 	eor.w	r5, r5, r2
  4104d2:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
  4104d6:	d10c      	bne.n	4104f2 <strcmp+0xf2>
  4104d8:	f850 2b04 	ldr.w	r2, [r0], #4
  4104dc:	e7e8      	b.n	4104b0 <strcmp+0xb0>
  4104de:	ea4f 2313 	mov.w	r3, r3, lsr #8
  4104e2:	e05b      	b.n	41059c <strcmp+0x19c>
  4104e4:	f03c 4c7f 	bics.w	ip, ip, #4278190080	@ 0xff000000
  4104e8:	d154      	bne.n	410594 <strcmp+0x194>
  4104ea:	780b      	ldrb	r3, [r1, #0]
  4104ec:	ea4f 6512 	mov.w	r5, r2, lsr #24
  4104f0:	e054      	b.n	41059c <strcmp+0x19c>
  4104f2:	ea4f 6512 	mov.w	r5, r2, lsr #24
  4104f6:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
  4104fa:	e04f      	b.n	41059c <strcmp+0x19c>
  4104fc:	ea4f 4502 	mov.w	r5, r2, lsl #16
  410500:	f1a2 3c01 	sub.w	ip, r2, #16843009	@ 0x1010101
  410504:	ea4f 4515 	mov.w	r5, r5, lsr #16
  410508:	ea2c 0c02 	bic.w	ip, ip, r2
  41050c:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
  410510:	d118      	bne.n	410544 <strcmp+0x144>
  410512:	f01c 3c80 	ands.w	ip, ip, #2155905152	@ 0x80808080
  410516:	bf08      	it	eq
  410518:	f851 3b04 	ldreq.w	r3, [r1], #4
  41051c:	d107      	bne.n	41052e <strcmp+0x12e>
  41051e:	ea85 0502 	eor.w	r5, r5, r2
  410522:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
  410526:	d109      	bne.n	41053c <strcmp+0x13c>
  410528:	f850 2b04 	ldr.w	r2, [r0], #4
  41052c:	e7e6      	b.n	4104fc <strcmp+0xfc>
  41052e:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
  410532:	d12f      	bne.n	410594 <strcmp+0x194>
  410534:	880b      	ldrh	r3, [r1, #0]
  410536:	ea4f 4512 	mov.w	r5, r2, lsr #16
  41053a:	e02f      	b.n	41059c <strcmp+0x19c>
  41053c:	ea4f 4303 	mov.w	r3, r3, lsl #16
  410540:	ea4f 4512 	mov.w	r5, r2, lsr #16
  410544:	ea4f 4313 	mov.w	r3, r3, lsr #16
  410548:	e028      	b.n	41059c <strcmp+0x19c>
  41054a:	bf00      	nop
  41054c:	f002 05ff 	and.w	r5, r2, #255	@ 0xff
  410550:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
  410554:	f1a2 3c01 	sub.w	ip, r2, #16843009	@ 0x1010101
  410558:	ea2c 0c02 	bic.w	ip, ip, r2
  41055c:	d10d      	bne.n	41057a <strcmp+0x17a>
  41055e:	f01c 3c80 	ands.w	ip, ip, #2155905152	@ 0x80808080
  410562:	bf08      	it	eq
  410564:	f851 3b04 	ldreq.w	r3, [r1], #4
  410568:	d10a      	bne.n	410580 <strcmp+0x180>
  41056a:	ea85 0502 	eor.w	r5, r5, r2
  41056e:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
  410572:	d10a      	bne.n	41058a <strcmp+0x18a>
  410574:	f850 2b04 	ldr.w	r2, [r0], #4
  410578:	e7e8      	b.n	41054c <strcmp+0x14c>
  41057a:	ea4f 6313 	mov.w	r3, r3, lsr #24
  41057e:	e00d      	b.n	41059c <strcmp+0x19c>
  410580:	f012 0fff 	tst.w	r2, #255	@ 0xff
  410584:	d006      	beq.n	410594 <strcmp+0x194>
  410586:	f851 3b04 	ldr.w	r3, [r1], #4
  41058a:	ea4f 2512 	mov.w	r5, r2, lsr #8
  41058e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
  410592:	e003      	b.n	41059c <strcmp+0x19c>
  410594:	f04f 0000 	mov.w	r0, #0
  410598:	bc20      	pop	{r5}
  41059a:	4770      	bx	lr
  41059c:	f005 02ff 	and.w	r2, r5, #255	@ 0xff
  4105a0:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  4105a4:	2801      	cmp	r0, #1
  4105a6:	bf28      	it	cs
  4105a8:	4290      	cmpcs	r0, r2
  4105aa:	bf04      	itt	eq
  4105ac:	0a2d      	lsreq	r5, r5, #8
  4105ae:	0a1b      	lsreq	r3, r3, #8
  4105b0:	d0f4      	beq.n	41059c <strcmp+0x19c>
  4105b2:	eba2 0000 	sub.w	r0, r2, r0
  4105b6:	bc20      	pop	{r5}
  4105b8:	4770      	bx	lr
  4105ba:	bf00      	nop

004105bc <memcpy>:
  4105bc:	4684      	mov	ip, r0
  4105be:	ea41 0300 	orr.w	r3, r1, r0
  4105c2:	f013 0303 	ands.w	r3, r3, #3
  4105c6:	d149      	bne.n	41065c <memcpy+0xa0>
  4105c8:	3a40      	subs	r2, #64	@ 0x40
  4105ca:	d323      	bcc.n	410614 <memcpy+0x58>
  4105cc:	680b      	ldr	r3, [r1, #0]
  4105ce:	6003      	str	r3, [r0, #0]
  4105d0:	684b      	ldr	r3, [r1, #4]
  4105d2:	6043      	str	r3, [r0, #4]
  4105d4:	688b      	ldr	r3, [r1, #8]
  4105d6:	6083      	str	r3, [r0, #8]
  4105d8:	68cb      	ldr	r3, [r1, #12]
  4105da:	60c3      	str	r3, [r0, #12]
  4105dc:	690b      	ldr	r3, [r1, #16]
  4105de:	6103      	str	r3, [r0, #16]
  4105e0:	694b      	ldr	r3, [r1, #20]
  4105e2:	6143      	str	r3, [r0, #20]
  4105e4:	698b      	ldr	r3, [r1, #24]
  4105e6:	6183      	str	r3, [r0, #24]
  4105e8:	69cb      	ldr	r3, [r1, #28]
  4105ea:	61c3      	str	r3, [r0, #28]
  4105ec:	6a0b      	ldr	r3, [r1, #32]
  4105ee:	6203      	str	r3, [r0, #32]
  4105f0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
  4105f2:	6243      	str	r3, [r0, #36]	@ 0x24
  4105f4:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  4105f6:	6283      	str	r3, [r0, #40]	@ 0x28
  4105f8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  4105fa:	62c3      	str	r3, [r0, #44]	@ 0x2c
  4105fc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
  4105fe:	6303      	str	r3, [r0, #48]	@ 0x30
  410600:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
  410602:	6343      	str	r3, [r0, #52]	@ 0x34
  410604:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
  410606:	6383      	str	r3, [r0, #56]	@ 0x38
  410608:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
  41060a:	63c3      	str	r3, [r0, #60]	@ 0x3c
  41060c:	3040      	adds	r0, #64	@ 0x40
  41060e:	3140      	adds	r1, #64	@ 0x40
  410610:	3a40      	subs	r2, #64	@ 0x40
  410612:	d2db      	bcs.n	4105cc <memcpy+0x10>
  410614:	3230      	adds	r2, #48	@ 0x30
  410616:	d30b      	bcc.n	410630 <memcpy+0x74>
  410618:	680b      	ldr	r3, [r1, #0]
  41061a:	6003      	str	r3, [r0, #0]
  41061c:	684b      	ldr	r3, [r1, #4]
  41061e:	6043      	str	r3, [r0, #4]
  410620:	688b      	ldr	r3, [r1, #8]
  410622:	6083      	str	r3, [r0, #8]
  410624:	68cb      	ldr	r3, [r1, #12]
  410626:	60c3      	str	r3, [r0, #12]
  410628:	3010      	adds	r0, #16
  41062a:	3110      	adds	r1, #16
  41062c:	3a10      	subs	r2, #16
  41062e:	d2f3      	bcs.n	410618 <memcpy+0x5c>
  410630:	320c      	adds	r2, #12
  410632:	d305      	bcc.n	410640 <memcpy+0x84>
  410634:	f851 3b04 	ldr.w	r3, [r1], #4
  410638:	f840 3b04 	str.w	r3, [r0], #4
  41063c:	3a04      	subs	r2, #4
  41063e:	d2f9      	bcs.n	410634 <memcpy+0x78>
  410640:	3204      	adds	r2, #4
  410642:	d008      	beq.n	410656 <memcpy+0x9a>
  410644:	07d2      	lsls	r2, r2, #31
  410646:	bf1c      	itt	ne
  410648:	f811 3b01 	ldrbne.w	r3, [r1], #1
  41064c:	f800 3b01 	strbne.w	r3, [r0], #1
  410650:	d301      	bcc.n	410656 <memcpy+0x9a>
  410652:	880b      	ldrh	r3, [r1, #0]
  410654:	8003      	strh	r3, [r0, #0]
  410656:	4660      	mov	r0, ip
  410658:	4770      	bx	lr
  41065a:	bf00      	nop
  41065c:	2a08      	cmp	r2, #8
  41065e:	d313      	bcc.n	410688 <memcpy+0xcc>
  410660:	078b      	lsls	r3, r1, #30
  410662:	d0b1      	beq.n	4105c8 <memcpy+0xc>
  410664:	f010 0303 	ands.w	r3, r0, #3
  410668:	d0ae      	beq.n	4105c8 <memcpy+0xc>
  41066a:	f1c3 0304 	rsb	r3, r3, #4
  41066e:	1ad2      	subs	r2, r2, r3
  410670:	07db      	lsls	r3, r3, #31
  410672:	bf1c      	itt	ne
  410674:	f811 3b01 	ldrbne.w	r3, [r1], #1
  410678:	f800 3b01 	strbne.w	r3, [r0], #1
  41067c:	d3a4      	bcc.n	4105c8 <memcpy+0xc>
  41067e:	f831 3b02 	ldrh.w	r3, [r1], #2
  410682:	f820 3b02 	strh.w	r3, [r0], #2
  410686:	e79f      	b.n	4105c8 <memcpy+0xc>
  410688:	3a04      	subs	r2, #4
  41068a:	d3d9      	bcc.n	410640 <memcpy+0x84>
  41068c:	3a01      	subs	r2, #1
  41068e:	f811 3b01 	ldrb.w	r3, [r1], #1
  410692:	f800 3b01 	strb.w	r3, [r0], #1
  410696:	d2f9      	bcs.n	41068c <memcpy+0xd0>
  410698:	780b      	ldrb	r3, [r1, #0]
  41069a:	7003      	strb	r3, [r0, #0]
  41069c:	784b      	ldrb	r3, [r1, #1]
  41069e:	7043      	strb	r3, [r0, #1]
  4106a0:	788b      	ldrb	r3, [r1, #2]
  4106a2:	7083      	strb	r3, [r0, #2]
  4106a4:	4660      	mov	r0, ip
  4106a6:	4770      	bx	lr

004106a8 <__aeabi_drsub>:
  4106a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
  4106ac:	e002      	b.n	4106b4 <__adddf3>
  4106ae:	bf00      	nop

004106b0 <__aeabi_dsub>:
  4106b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

004106b4 <__adddf3>:
  4106b4:	b530      	push	{r4, r5, lr}
  4106b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4106ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4106be:	ea94 0f05 	teq	r4, r5
  4106c2:	bf08      	it	eq
  4106c4:	ea90 0f02 	teqeq	r0, r2
  4106c8:	bf1f      	itttt	ne
  4106ca:	ea54 0c00 	orrsne.w	ip, r4, r0
  4106ce:	ea55 0c02 	orrsne.w	ip, r5, r2
  4106d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4106d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4106da:	f000 80e2 	beq.w	4108a2 <__adddf3+0x1ee>
  4106de:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4106e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4106e6:	bfb8      	it	lt
  4106e8:	426d      	neglt	r5, r5
  4106ea:	dd0c      	ble.n	410706 <__adddf3+0x52>
  4106ec:	442c      	add	r4, r5
  4106ee:	ea80 0202 	eor.w	r2, r0, r2
  4106f2:	ea81 0303 	eor.w	r3, r1, r3
  4106f6:	ea82 0000 	eor.w	r0, r2, r0
  4106fa:	ea83 0101 	eor.w	r1, r3, r1
  4106fe:	ea80 0202 	eor.w	r2, r0, r2
  410702:	ea81 0303 	eor.w	r3, r1, r3
  410706:	2d36      	cmp	r5, #54	@ 0x36
  410708:	bf88      	it	hi
  41070a:	bd30      	pophi	{r4, r5, pc}
  41070c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
  410710:	ea4f 3101 	mov.w	r1, r1, lsl #12
  410714:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
  410718:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  41071c:	d002      	beq.n	410724 <__adddf3+0x70>
  41071e:	4240      	negs	r0, r0
  410720:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  410724:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
  410728:	ea4f 3303 	mov.w	r3, r3, lsl #12
  41072c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  410730:	d002      	beq.n	410738 <__adddf3+0x84>
  410732:	4252      	negs	r2, r2
  410734:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  410738:	ea94 0f05 	teq	r4, r5
  41073c:	f000 80a7 	beq.w	41088e <__adddf3+0x1da>
  410740:	f1a4 0401 	sub.w	r4, r4, #1
  410744:	f1d5 0e20 	rsbs	lr, r5, #32
  410748:	db0d      	blt.n	410766 <__adddf3+0xb2>
  41074a:	fa02 fc0e 	lsl.w	ip, r2, lr
  41074e:	fa22 f205 	lsr.w	r2, r2, r5
  410752:	1880      	adds	r0, r0, r2
  410754:	f141 0100 	adc.w	r1, r1, #0
  410758:	fa03 f20e 	lsl.w	r2, r3, lr
  41075c:	1880      	adds	r0, r0, r2
  41075e:	fa43 f305 	asr.w	r3, r3, r5
  410762:	4159      	adcs	r1, r3
  410764:	e00e      	b.n	410784 <__adddf3+0xd0>
  410766:	f1a5 0520 	sub.w	r5, r5, #32
  41076a:	f10e 0e20 	add.w	lr, lr, #32
  41076e:	2a01      	cmp	r2, #1
  410770:	fa03 fc0e 	lsl.w	ip, r3, lr
  410774:	bf28      	it	cs
  410776:	f04c 0c02 	orrcs.w	ip, ip, #2
  41077a:	fa43 f305 	asr.w	r3, r3, r5
  41077e:	18c0      	adds	r0, r0, r3
  410780:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  410784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
  410788:	d507      	bpl.n	41079a <__adddf3+0xe6>
  41078a:	f04f 0e00 	mov.w	lr, #0
  41078e:	f1dc 0c00 	rsbs	ip, ip, #0
  410792:	eb7e 0000 	sbcs.w	r0, lr, r0
  410796:	eb6e 0101 	sbc.w	r1, lr, r1
  41079a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
  41079e:	d31b      	bcc.n	4107d8 <__adddf3+0x124>
  4107a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
  4107a4:	d30c      	bcc.n	4107c0 <__adddf3+0x10c>
  4107a6:	0849      	lsrs	r1, r1, #1
  4107a8:	ea5f 0030 	movs.w	r0, r0, rrx
  4107ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4107b0:	f104 0401 	add.w	r4, r4, #1
  4107b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4107b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
  4107bc:	f080 809a 	bcs.w	4108f4 <__adddf3+0x240>
  4107c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
  4107c4:	bf08      	it	eq
  4107c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4107ca:	f150 0000 	adcs.w	r0, r0, #0
  4107ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4107d2:	ea41 0105 	orr.w	r1, r1, r5
  4107d6:	bd30      	pop	{r4, r5, pc}
  4107d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4107dc:	4140      	adcs	r0, r0
  4107de:	eb41 0101 	adc.w	r1, r1, r1
  4107e2:	3c01      	subs	r4, #1
  4107e4:	bf28      	it	cs
  4107e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
  4107ea:	d2e9      	bcs.n	4107c0 <__adddf3+0x10c>
  4107ec:	f091 0f00 	teq	r1, #0
  4107f0:	bf04      	itt	eq
  4107f2:	4601      	moveq	r1, r0
  4107f4:	2000      	moveq	r0, #0
  4107f6:	fab1 f381 	clz	r3, r1
  4107fa:	bf08      	it	eq
  4107fc:	3320      	addeq	r3, #32
  4107fe:	f1a3 030b 	sub.w	r3, r3, #11
  410802:	f1b3 0220 	subs.w	r2, r3, #32
  410806:	da0c      	bge.n	410822 <__adddf3+0x16e>
  410808:	320c      	adds	r2, #12
  41080a:	dd08      	ble.n	41081e <__adddf3+0x16a>
  41080c:	f102 0c14 	add.w	ip, r2, #20
  410810:	f1c2 020c 	rsb	r2, r2, #12
  410814:	fa01 f00c 	lsl.w	r0, r1, ip
  410818:	fa21 f102 	lsr.w	r1, r1, r2
  41081c:	e00c      	b.n	410838 <__adddf3+0x184>
  41081e:	f102 0214 	add.w	r2, r2, #20
  410822:	bfd8      	it	le
  410824:	f1c2 0c20 	rsble	ip, r2, #32
  410828:	fa01 f102 	lsl.w	r1, r1, r2
  41082c:	fa20 fc0c 	lsr.w	ip, r0, ip
  410830:	bfdc      	itt	le
  410832:	ea41 010c 	orrle.w	r1, r1, ip
  410836:	4090      	lslle	r0, r2
  410838:	1ae4      	subs	r4, r4, r3
  41083a:	bfa2      	ittt	ge
  41083c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  410840:	4329      	orrge	r1, r5
  410842:	bd30      	popge	{r4, r5, pc}
  410844:	ea6f 0404 	mvn.w	r4, r4
  410848:	3c1f      	subs	r4, #31
  41084a:	da1c      	bge.n	410886 <__adddf3+0x1d2>
  41084c:	340c      	adds	r4, #12
  41084e:	dc0e      	bgt.n	41086e <__adddf3+0x1ba>
  410850:	f104 0414 	add.w	r4, r4, #20
  410854:	f1c4 0220 	rsb	r2, r4, #32
  410858:	fa20 f004 	lsr.w	r0, r0, r4
  41085c:	fa01 f302 	lsl.w	r3, r1, r2
  410860:	ea40 0003 	orr.w	r0, r0, r3
  410864:	fa21 f304 	lsr.w	r3, r1, r4
  410868:	ea45 0103 	orr.w	r1, r5, r3
  41086c:	bd30      	pop	{r4, r5, pc}
  41086e:	f1c4 040c 	rsb	r4, r4, #12
  410872:	f1c4 0220 	rsb	r2, r4, #32
  410876:	fa20 f002 	lsr.w	r0, r0, r2
  41087a:	fa01 f304 	lsl.w	r3, r1, r4
  41087e:	ea40 0003 	orr.w	r0, r0, r3
  410882:	4629      	mov	r1, r5
  410884:	bd30      	pop	{r4, r5, pc}
  410886:	fa21 f004 	lsr.w	r0, r1, r4
  41088a:	4629      	mov	r1, r5
  41088c:	bd30      	pop	{r4, r5, pc}
  41088e:	f094 0f00 	teq	r4, #0
  410892:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
  410896:	bf06      	itte	eq
  410898:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
  41089c:	3401      	addeq	r4, #1
  41089e:	3d01      	subne	r5, #1
  4108a0:	e74e      	b.n	410740 <__adddf3+0x8c>
  4108a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4108a6:	bf18      	it	ne
  4108a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4108ac:	d029      	beq.n	410902 <__adddf3+0x24e>
  4108ae:	ea94 0f05 	teq	r4, r5
  4108b2:	bf08      	it	eq
  4108b4:	ea90 0f02 	teqeq	r0, r2
  4108b8:	d005      	beq.n	4108c6 <__adddf3+0x212>
  4108ba:	ea54 0c00 	orrs.w	ip, r4, r0
  4108be:	bf04      	itt	eq
  4108c0:	4619      	moveq	r1, r3
  4108c2:	4610      	moveq	r0, r2
  4108c4:	bd30      	pop	{r4, r5, pc}
  4108c6:	ea91 0f03 	teq	r1, r3
  4108ca:	bf1e      	ittt	ne
  4108cc:	2100      	movne	r1, #0
  4108ce:	2000      	movne	r0, #0
  4108d0:	bd30      	popne	{r4, r5, pc}
  4108d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4108d6:	d105      	bne.n	4108e4 <__adddf3+0x230>
  4108d8:	0040      	lsls	r0, r0, #1
  4108da:	4149      	adcs	r1, r1
  4108dc:	bf28      	it	cs
  4108de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
  4108e2:	bd30      	pop	{r4, r5, pc}
  4108e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
  4108e8:	bf3c      	itt	cc
  4108ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
  4108ee:	bd30      	popcc	{r4, r5, pc}
  4108f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
  4108f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
  4108f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
  4108fc:	f04f 0000 	mov.w	r0, #0
  410900:	bd30      	pop	{r4, r5, pc}
  410902:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  410906:	bf1a      	itte	ne
  410908:	4619      	movne	r1, r3
  41090a:	4610      	movne	r0, r2
  41090c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  410910:	bf1c      	itt	ne
  410912:	460b      	movne	r3, r1
  410914:	4602      	movne	r2, r0
  410916:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41091a:	bf06      	itte	eq
  41091c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  410920:	ea91 0f03 	teqeq	r1, r3
  410924:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
  410928:	bd30      	pop	{r4, r5, pc}
  41092a:	bf00      	nop

0041092c <__aeabi_ui2d>:
  41092c:	f090 0f00 	teq	r0, #0
  410930:	bf04      	itt	eq
  410932:	2100      	moveq	r1, #0
  410934:	4770      	bxeq	lr
  410936:	b530      	push	{r4, r5, lr}
  410938:	f44f 6480 	mov.w	r4, #1024	@ 0x400
  41093c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
  410940:	f04f 0500 	mov.w	r5, #0
  410944:	f04f 0100 	mov.w	r1, #0
  410948:	e750      	b.n	4107ec <__adddf3+0x138>
  41094a:	bf00      	nop

0041094c <__aeabi_i2d>:
  41094c:	f090 0f00 	teq	r0, #0
  410950:	bf04      	itt	eq
  410952:	2100      	moveq	r1, #0
  410954:	4770      	bxeq	lr
  410956:	b530      	push	{r4, r5, lr}
  410958:	f44f 6480 	mov.w	r4, #1024	@ 0x400
  41095c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
  410960:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
  410964:	bf48      	it	mi
  410966:	4240      	negmi	r0, r0
  410968:	f04f 0100 	mov.w	r1, #0
  41096c:	e73e      	b.n	4107ec <__adddf3+0x138>
  41096e:	bf00      	nop

00410970 <__aeabi_f2d>:
  410970:	0042      	lsls	r2, r0, #1
  410972:	ea4f 01e2 	mov.w	r1, r2, asr #3
  410976:	ea4f 0131 	mov.w	r1, r1, rrx
  41097a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  41097e:	bf1f      	itttt	ne
  410980:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
  410984:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
  410988:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
  41098c:	4770      	bxne	lr
  41098e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
  410992:	bf08      	it	eq
  410994:	4770      	bxeq	lr
  410996:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
  41099a:	bf04      	itt	eq
  41099c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
  4109a0:	4770      	bxeq	lr
  4109a2:	b530      	push	{r4, r5, lr}
  4109a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
  4109a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
  4109ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
  4109b0:	e71c      	b.n	4107ec <__adddf3+0x138>
  4109b2:	bf00      	nop

004109b4 <__aeabi_ul2d>:
  4109b4:	ea50 0201 	orrs.w	r2, r0, r1
  4109b8:	bf08      	it	eq
  4109ba:	4770      	bxeq	lr
  4109bc:	b530      	push	{r4, r5, lr}
  4109be:	f04f 0500 	mov.w	r5, #0
  4109c2:	e00a      	b.n	4109da <__aeabi_l2d+0x16>

004109c4 <__aeabi_l2d>:
  4109c4:	ea50 0201 	orrs.w	r2, r0, r1
  4109c8:	bf08      	it	eq
  4109ca:	4770      	bxeq	lr
  4109cc:	b530      	push	{r4, r5, lr}
  4109ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
  4109d2:	d502      	bpl.n	4109da <__aeabi_l2d+0x16>
  4109d4:	4240      	negs	r0, r0
  4109d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4109da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
  4109de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
  4109e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4109e6:	f43f aed8 	beq.w	41079a <__adddf3+0xe6>
  4109ea:	f04f 0203 	mov.w	r2, #3
  4109ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4109f2:	bf18      	it	ne
  4109f4:	3203      	addne	r2, #3
  4109f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4109fa:	bf18      	it	ne
  4109fc:	3203      	addne	r2, #3
  4109fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  410a02:	f1c2 0320 	rsb	r3, r2, #32
  410a06:	fa00 fc03 	lsl.w	ip, r0, r3
  410a0a:	fa20 f002 	lsr.w	r0, r0, r2
  410a0e:	fa01 fe03 	lsl.w	lr, r1, r3
  410a12:	ea40 000e 	orr.w	r0, r0, lr
  410a16:	fa21 f102 	lsr.w	r1, r1, r2
  410a1a:	4414      	add	r4, r2
  410a1c:	e6bd      	b.n	41079a <__adddf3+0xe6>
  410a1e:	bf00      	nop

00410a20 <__aeabi_ldivmod>:
  410a20:	b97b      	cbnz	r3, 410a42 <__aeabi_ldivmod+0x22>
  410a22:	b972      	cbnz	r2, 410a42 <__aeabi_ldivmod+0x22>
  410a24:	2900      	cmp	r1, #0
  410a26:	bfbe      	ittt	lt
  410a28:	2000      	movlt	r0, #0
  410a2a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
  410a2e:	e006      	blt.n	410a3e <__aeabi_ldivmod+0x1e>
  410a30:	bf08      	it	eq
  410a32:	2800      	cmpeq	r0, #0
  410a34:	bf1c      	itt	ne
  410a36:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
  410a3a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
  410a3e:	f000 b83f 	b.w	410ac0 <__aeabi_idiv0>
  410a42:	f1ad 0c08 	sub.w	ip, sp, #8
  410a46:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  410a4a:	2900      	cmp	r1, #0
  410a4c:	db09      	blt.n	410a62 <__aeabi_ldivmod+0x42>
  410a4e:	2b00      	cmp	r3, #0
  410a50:	db1a      	blt.n	410a88 <__aeabi_ldivmod+0x68>
  410a52:	f014 fe15 	bl	425680 <__udivmoddi4>
  410a56:	f8dd e004 	ldr.w	lr, [sp, #4]
  410a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  410a5e:	b004      	add	sp, #16
  410a60:	4770      	bx	lr
  410a62:	4240      	negs	r0, r0
  410a64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  410a68:	2b00      	cmp	r3, #0
  410a6a:	db1b      	blt.n	410aa4 <__aeabi_ldivmod+0x84>
  410a6c:	f014 fe08 	bl	425680 <__udivmoddi4>
  410a70:	f8dd e004 	ldr.w	lr, [sp, #4]
  410a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  410a78:	b004      	add	sp, #16
  410a7a:	4240      	negs	r0, r0
  410a7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  410a80:	4252      	negs	r2, r2
  410a82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  410a86:	4770      	bx	lr
  410a88:	4252      	negs	r2, r2
  410a8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  410a8e:	f014 fdf7 	bl	425680 <__udivmoddi4>
  410a92:	f8dd e004 	ldr.w	lr, [sp, #4]
  410a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  410a9a:	b004      	add	sp, #16
  410a9c:	4240      	negs	r0, r0
  410a9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  410aa2:	4770      	bx	lr
  410aa4:	4252      	negs	r2, r2
  410aa6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  410aaa:	f014 fde9 	bl	425680 <__udivmoddi4>
  410aae:	f8dd e004 	ldr.w	lr, [sp, #4]
  410ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  410ab6:	b004      	add	sp, #16
  410ab8:	4252      	negs	r2, r2
  410aba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  410abe:	4770      	bx	lr

00410ac0 <__aeabi_idiv0>:
  410ac0:	4770      	bx	lr
  410ac2:	bf00      	nop

00410ac4 <__restore_core_regs>:
  410ac4:	f100 0134 	add.w	r1, r0, #52	@ 0x34
  410ac8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
  410acc:	469c      	mov	ip, r3
  410ace:	46a6      	mov	lr, r4
  410ad0:	f84c 5d04 	str.w	r5, [ip, #-4]!
  410ad4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
  410ad8:	46e5      	mov	sp, ip
  410ada:	bd00      	pop	{pc}

00410adc <__gnu_Unwind_Restore_VFP>:
  410adc:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
  410ae0:	4770      	bx	lr
  410ae2:	bf00      	nop

00410ae4 <__gnu_Unwind_Save_VFP>:
  410ae4:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
  410ae8:	4770      	bx	lr
  410aea:	bf00      	nop

00410aec <__gnu_Unwind_Restore_VFP_D>:
  410aec:	ec90 0b20 	vldmia	r0, {d0-d15}
  410af0:	4770      	bx	lr
  410af2:	bf00      	nop

00410af4 <__gnu_Unwind_Save_VFP_D>:
  410af4:	ec80 0b20 	vstmia	r0, {d0-d15}
  410af8:	4770      	bx	lr
  410afa:	bf00      	nop

00410afc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
  410afc:	ecd0 0b20 	vldmia	r0, {d16-d31}
  410b00:	4770      	bx	lr
  410b02:	bf00      	nop

00410b04 <__gnu_Unwind_Save_VFP_D_16_to_31>:
  410b04:	ecc0 0b20 	vstmia	r0, {d16-d31}
  410b08:	4770      	bx	lr
  410b0a:	bf00      	nop

00410b0c <__gnu_Unwind_Restore_WMMXD>:
  410b0c:	ecf0 0102 	ldfe	f0, [r0], #8
  410b10:	ecf0 1102 	ldfe	f1, [r0], #8
  410b14:	ecf0 2102 	ldfe	f2, [r0], #8
  410b18:	ecf0 3102 	ldfe	f3, [r0], #8
  410b1c:	ecf0 4102 	ldfe	f4, [r0], #8
  410b20:	ecf0 5102 	ldfe	f5, [r0], #8
  410b24:	ecf0 6102 	ldfe	f6, [r0], #8
  410b28:	ecf0 7102 	ldfe	f7, [r0], #8
  410b2c:	ecf0 8102 	ldfp	f0, [r0], #8
  410b30:	ecf0 9102 	ldfp	f1, [r0], #8
  410b34:	ecf0 a102 	ldfp	f2, [r0], #8
  410b38:	ecf0 b102 	ldfp	f3, [r0], #8
  410b3c:	ecf0 c102 	ldfp	f4, [r0], #8
  410b40:	ecf0 d102 	ldfp	f5, [r0], #8
  410b44:	ecf0 e102 	ldfp	f6, [r0], #8
  410b48:	ecf0 f102 	ldfp	f7, [r0], #8
  410b4c:	4770      	bx	lr
  410b4e:	bf00      	nop

00410b50 <__gnu_Unwind_Save_WMMXD>:
  410b50:	ece0 0102 	stfe	f0, [r0], #8
  410b54:	ece0 1102 	stfe	f1, [r0], #8
  410b58:	ece0 2102 	stfe	f2, [r0], #8
  410b5c:	ece0 3102 	stfe	f3, [r0], #8
  410b60:	ece0 4102 	stfe	f4, [r0], #8
  410b64:	ece0 5102 	stfe	f5, [r0], #8
  410b68:	ece0 6102 	stfe	f6, [r0], #8
  410b6c:	ece0 7102 	stfe	f7, [r0], #8
  410b70:	ece0 8102 	stfp	f0, [r0], #8
  410b74:	ece0 9102 	stfp	f1, [r0], #8
  410b78:	ece0 a102 	stfp	f2, [r0], #8
  410b7c:	ece0 b102 	stfp	f3, [r0], #8
  410b80:	ece0 c102 	stfp	f4, [r0], #8
  410b84:	ece0 d102 	stfp	f5, [r0], #8
  410b88:	ece0 e102 	stfp	f6, [r0], #8
  410b8c:	ece0 f102 	stfp	f7, [r0], #8
  410b90:	4770      	bx	lr
  410b92:	bf00      	nop

00410b94 <__gnu_Unwind_Restore_WMMXC>:
  410b94:	fcb0 8101 	ldc2	1, cr8, [r0], #4
  410b98:	fcb0 9101 	ldc2	1, cr9, [r0], #4
  410b9c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
  410ba0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
  410ba4:	4770      	bx	lr
  410ba6:	bf00      	nop

00410ba8 <__gnu_Unwind_Save_WMMXC>:
  410ba8:	fca0 8101 	stc2	1, cr8, [r0], #4
  410bac:	fca0 9101 	stc2	1, cr9, [r0], #4
  410bb0:	fca0 a101 	stc2	1, cr10, [r0], #4
  410bb4:	fca0 b101 	stc2	1, cr11, [r0], #4
  410bb8:	4770      	bx	lr
  410bba:	bf00      	nop

00410bbc <_Unwind_RaiseException>:
  410bbc:	46ec      	mov	ip, sp
  410bbe:	b500      	push	{lr}
  410bc0:	e92d 5000 	stmdb	sp!, {ip, lr}
  410bc4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  410bc8:	f04f 0300 	mov.w	r3, #0
  410bcc:	e92d 000c 	stmdb	sp!, {r2, r3}
  410bd0:	a901      	add	r1, sp, #4
  410bd2:	f022 f877 	bl	432cc4 <__gnu_Unwind_RaiseException>
  410bd6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
  410bda:	b012      	add	sp, #72	@ 0x48
  410bdc:	4770      	bx	lr
  410bde:	bf00      	nop

00410be0 <_Unwind_Resume>:
  410be0:	46ec      	mov	ip, sp
  410be2:	b500      	push	{lr}
  410be4:	e92d 5000 	stmdb	sp!, {ip, lr}
  410be8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  410bec:	f04f 0300 	mov.w	r3, #0
  410bf0:	e92d 000c 	stmdb	sp!, {r2, r3}
  410bf4:	a901      	add	r1, sp, #4
  410bf6:	f022 f8a3 	bl	432d40 <__gnu_Unwind_Resume>
  410bfa:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
  410bfe:	b012      	add	sp, #72	@ 0x48
  410c00:	4770      	bx	lr
  410c02:	bf00      	nop

00410c04 <_Unwind_Resume_or_Rethrow>:
  410c04:	46ec      	mov	ip, sp
  410c06:	b500      	push	{lr}
  410c08:	e92d 5000 	stmdb	sp!, {ip, lr}
  410c0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  410c10:	f04f 0300 	mov.w	r3, #0
  410c14:	e92d 000c 	stmdb	sp!, {r2, r3}
  410c18:	a901      	add	r1, sp, #4
  410c1a:	f022 f8b3 	bl	432d84 <__gnu_Unwind_Resume_or_Rethrow>
  410c1e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
  410c22:	b012      	add	sp, #72	@ 0x48
  410c24:	4770      	bx	lr
  410c26:	bf00      	nop

00410c28 <_Unwind_ForcedUnwind>:
  410c28:	46ec      	mov	ip, sp
  410c2a:	b500      	push	{lr}
  410c2c:	e92d 5000 	stmdb	sp!, {ip, lr}
  410c30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  410c34:	f04f 0300 	mov.w	r3, #0
  410c38:	e92d 000c 	stmdb	sp!, {r2, r3}
  410c3c:	ab01      	add	r3, sp, #4
  410c3e:	f022 f875 	bl	432d2c <__gnu_Unwind_ForcedUnwind>
  410c42:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
  410c46:	b012      	add	sp, #72	@ 0x48
  410c48:	4770      	bx	lr
  410c4a:	bf00      	nop

00410c4c <_Unwind_Backtrace>:
  410c4c:	46ec      	mov	ip, sp
  410c4e:	b500      	push	{lr}
  410c50:	e92d 5000 	stmdb	sp!, {ip, lr}
  410c54:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  410c58:	f04f 0300 	mov.w	r3, #0
  410c5c:	e92d 000c 	stmdb	sp!, {r2, r3}
  410c60:	aa01      	add	r2, sp, #4
  410c62:	f022 f8ef 	bl	432e44 <__gnu_Unwind_Backtrace>
  410c66:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
  410c6a:	b012      	add	sp, #72	@ 0x48
  410c6c:	4770      	bx	lr
  410c6e:	bf00      	nop

00410c70 <NMI_Handler>:
NMI_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
  410c70:	e7fe      	b.n	410c70 <NMI_Handler>
  410c72:	bf00      	nop

00410c74 <BusFault_Handler>:
HardFault_Handler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
  410c74:	e7fe      	b.n	410c74 <BusFault_Handler>
  410c76:	bf00      	nop

00410c78 <DebugMon_Handler>:
am_default_isr(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
  410c78:	e7fe      	b.n	410c78 <DebugMon_Handler>
  410c7a:	bf00      	nop

00410c7c <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
  410c7c:	481b      	ldr	r0, [pc, #108]	@ (410cec <zero_loop+0x1e>)
  410c7e:	491c      	ldr	r1, [pc, #112]	@ (410cf0 <zero_loop+0x22>)
  410c80:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
  410c82:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
  410c86:	481b      	ldr	r0, [pc, #108]	@ (410cf4 <zero_loop+0x26>)
  410c88:	6801      	ldr	r1, [r0, #0]
  410c8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
  410c8e:	6001      	str	r1, [r0, #0]
  410c90:	f3bf 8f4f 	dsb	sy
  410c94:	f3bf 8f6f 	isb	sy
    __set_MSPLIM(AM_STACK_LIMIT);
  410c98:	4b13      	ldr	r3, [pc, #76]	@ (410ce8 <zero_loop+0x1a>)
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
  410c9a:	f383 880a 	msr	MSPLIM, r3
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
  410c9e:	f383 880b 	msr	PSPLIM, r3
    __asm("    ldr     r0, =_init_data\n"
  410ca2:	4815      	ldr	r0, [pc, #84]	@ (410cf8 <zero_loop+0x2a>)
  410ca4:	4915      	ldr	r1, [pc, #84]	@ (410cfc <zero_loop+0x2e>)
  410ca6:	4a16      	ldr	r2, [pc, #88]	@ (410d00 <zero_loop+0x32>)

00410ca8 <copy_loop>:
  410ca8:	f850 3b04 	ldr.w	r3, [r0], #4
  410cac:	f841 3b04 	str.w	r3, [r1], #4
  410cb0:	4291      	cmp	r1, r2
  410cb2:	dbf9      	blt.n	410ca8 <copy_loop>
    __asm("    ldr     r0, =_init_itcm_text\n"
  410cb4:	4813      	ldr	r0, [pc, #76]	@ (410d04 <zero_loop+0x36>)
  410cb6:	4914      	ldr	r1, [pc, #80]	@ (410d08 <zero_loop+0x3a>)
  410cb8:	4a14      	ldr	r2, [pc, #80]	@ (410d0c <zero_loop+0x3e>)

00410cba <copy_loop_itcm>:
  410cba:	f850 3b04 	ldr.w	r3, [r0], #4
  410cbe:	f841 3b04 	str.w	r3, [r1], #4
  410cc2:	4291      	cmp	r1, r2
  410cc4:	dbf9      	blt.n	410cba <copy_loop_itcm>
    __asm("    ldr     r0, =_sbss\n"
  410cc6:	4812      	ldr	r0, [pc, #72]	@ (410d10 <zero_loop+0x42>)
  410cc8:	4912      	ldr	r1, [pc, #72]	@ (410d14 <zero_loop+0x46>)
  410cca:	f04f 0200 	mov.w	r2, #0

00410cce <zero_loop>:
  410cce:	4288      	cmp	r0, r1
  410cd0:	bfb8      	it	lt
  410cd2:	f840 2b04 	strlt.w	r2, [r0], #4
  410cd6:	dbfa      	blt.n	410cce <zero_loop>
    SystemInit();
  410cd8:	f017 fbce 	bl	428478 <SystemInit>
    __libc_init_array();
  410cdc:	f010 f8fa 	bl	420ed4 <__libc_init_array>
    main();
  410ce0:	f006 f9a6 	bl	417030 <main>
    __asm("    bkpt     ");
  410ce4:	be00      	bkpt	0x0000
}
  410ce6:	bf00      	nop
  410ce8:	20000000 	.word	0x20000000
  410cec:	e000ed08 	.word	0xe000ed08
  410cf0:	00410000 	.word	0x00410000
  410cf4:	e000ed88 	.word	0xe000ed88
  410cf8:	0043d974 	.word	0x0043d974
  410cfc:	20001000 	.word	0x20001000
  410d00:	2000aa4c 	.word	0x2000aa4c
  410d04:	0043d958 	.word	0x0043d958
  410d08:	00000000 	.word	0x00000000
  410d0c:	0000001c 	.word	0x0000001c
  410d10:	2000aa50 	.word	0x2000aa50
  410d14:	2004ea10 	.word	0x2004ea10

00410d18 <_init>:
extern void _init(void) { ; }
  410d18:	4770      	bx	lr
  410d1a:	bf00      	nop

00410d1c <_fini>:
extern void _fini(void) { ; }
  410d1c:	4770      	bx	lr
  410d1e:	bf00      	nop

00410d20 <arm_elementwise_add_s16>:
                                            const int32_t out_mult,
                                            const int32_t out_shift,
                                            const int32_t out_activation_min,
                                            const int32_t out_activation_max,
                                            const int32_t block_size)
{
  410d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410d24:	b09d      	sub	sp, #116	@ 0x74
  410d26:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
  410d28:	4605      	mov	r5, r0
  410d2a:	e9dd ba2d 	ldrd	fp, sl, [sp, #180]	@ 0xb4
    int32_t sum;
    int32_t two_halfword_1, two_halfword_2;
    int16_t sum_1, sum_2;
    int32_t loop_count = block_size / 2;

    while (loop_count > 0)
  410d2e:	2e01      	cmp	r6, #1
{
  410d30:	460c      	mov	r4, r1
  410d32:	f8dd 8098 	ldr.w	r8, [sp, #152]	@ 0x98
  410d36:	f8dd 90a4 	ldr.w	r9, [sp, #164]	@ 0xa4
  410d3a:	f8dd c0a8 	ldr.w	ip, [sp, #168]	@ 0xa8
    int32_t loop_count = block_size / 2;
  410d3e:	eb06 72d6 	add.w	r2, r6, r6, lsr #31
{
  410d42:	9314      	str	r3, [sp, #80]	@ 0x50
    while (loop_count > 0)
  410d44:	f340 81a6 	ble.w	411094 <arm_elementwise_add_s16+0x374>
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent)
{
    q31_t result = 0;
    const q31_t remainder_mask = (1 << exponent) - 1;
  410d48:	2301      	movs	r3, #1
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410d4a:	f1c8 0100 	rsb	r1, r8, #0
  410d4e:	1052      	asrs	r2, r2, #1
  410d50:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  410d54:	9109      	str	r1, [sp, #36]	@ 0x24
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  410d56:	0091      	lsls	r1, r2, #2
  410d58:	3904      	subs	r1, #4
  410d5a:	0889      	lsrs	r1, r1, #2
  410d5c:	18cf      	adds	r7, r1, r3
  410d5e:	9713      	str	r7, [sp, #76]	@ 0x4c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410d60:	ea29 77e9 	bic.w	r7, r9, r9, asr #31
  410d64:	9716      	str	r7, [sp, #88]	@ 0x58
  410d66:	ea28 77e8 	bic.w	r7, r8, r8, asr #31
  410d6a:	9717      	str	r7, [sp, #92]	@ 0x5c
  410d6c:	ea2a 77ea 	bic.w	r7, sl, sl, asr #31
  410d70:	9712      	str	r7, [sp, #72]	@ 0x48
  410d72:	0097      	lsls	r7, r2, #2
  410d74:	9719      	str	r7, [sp, #100]	@ 0x64
  410d76:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
  410d78:	f1c9 0000 	rsb	r0, r9, #0
  410d7c:	eb07 0782 	add.w	r7, r7, r2, lsl #2
    const q31_t remainder_mask = (1 << exponent) - 1;
  410d80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410d82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  410d86:	fa03 f202 	lsl.w	r2, r3, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410d8a:	9008      	str	r0, [sp, #32]
    const q31_t remainder_mask = (1 << exponent) - 1;
  410d8c:	3a01      	subs	r2, #1
  410d8e:	920a      	str	r2, [sp, #40]	@ 0x28
  410d90:	9a08      	ldr	r2, [sp, #32]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410d92:	f1ca 0e00 	rsb	lr, sl, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
  410d96:	fa03 f202 	lsl.w	r2, r3, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410d9a:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
  410d9e:	9718      	str	r7, [sp, #96]	@ 0x60
    const q31_t remainder_mask = (1 << exponent) - 1;
  410da0:	1e57      	subs	r7, r2, #1
    q31_t threshold = remainder_mask >> 1;
  410da2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    const q31_t remainder_mask = (1 << exponent) - 1;
  410da4:	fa03 f30e 	lsl.w	r3, r3, lr
  410da8:	3b01      	subs	r3, #1
    q31_t threshold = remainder_mask >> 1;
  410daa:	1052      	asrs	r2, r2, #1
  410dac:	9200      	str	r2, [sp, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
  410dae:	9315      	str	r3, [sp, #84]	@ 0x54
    q31_t threshold = remainder_mask >> 1;
  410db0:	105b      	asrs	r3, r3, #1
  410db2:	9307      	str	r3, [sp, #28]
        threshold++;
  410db4:	9b00      	ldr	r3, [sp, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  410db6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  410dba:	2000      	movs	r0, #0
  410dbc:	4698      	mov	r8, r3
    q31_t threshold = remainder_mask >> 1;
  410dbe:	107a      	asrs	r2, r7, #1
    const q31_t remainder_mask = (1 << exponent) - 1;
  410dc0:	970c      	str	r7, [sp, #48]	@ 0x30
        threshold++;
  410dc2:	1c5f      	adds	r7, r3, #1
    q31_t threshold = remainder_mask >> 1;
  410dc4:	920d      	str	r2, [sp, #52]	@ 0x34
        threshold++;
  410dc6:	970f      	str	r7, [sp, #60]	@ 0x3c
  410dc8:	1c57      	adds	r7, r2, #1
  410dca:	9a07      	ldr	r2, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410dcc:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
  410dd0:	e9cd 541a 	strd	r5, r4, [sp, #104]	@ 0x68
        threshold++;
  410dd4:	3201      	adds	r2, #1
  410dd6:	970e      	str	r7, [sp, #56]	@ 0x38
  410dd8:	920b      	str	r2, [sp, #44]	@ 0x2c
    result = (int32_t)(mult.long_long >> 31);
  410dda:	460d      	mov	r5, r1
  410ddc:	4682      	mov	sl, r0
    memcpy(&val, *in_q15, 4);
  410dde:	9a11      	ldr	r2, [sp, #68]	@ 0x44
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410de0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
    memcpy(&val, *in_q15, 4);
  410de2:	f852 3b04 	ldr.w	r3, [r2], #4
    result = (int32_t)(mult.long_long >> 31);
  410de6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
    memcpy(&val, *in_q15, 4);
  410de8:	9211      	str	r2, [sp, #68]	@ 0x44
  410dea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
    result = (int32_t)(mult.long_long >> 31);
  410dec:	460f      	mov	r7, r1
    memcpy(&val, *in_q15, 4);
  410dee:	f852 9b04 	ldr.w	r9, [r2], #4
    result = (int32_t)(mult.long_long >> 31);
  410df2:	4683      	mov	fp, r0
    memcpy(&val, *in_q15, 4);
  410df4:	9210      	str	r2, [sp, #64]	@ 0x40
    {
        two_halfword_1 = arm_nn_read_q15x2_ia(&input_1_vect);
        two_halfword_2 = arm_nn_read_q15x2_ia(&input_2_vect);

        input_1 = (int16_t)(two_halfword_1 & 0xFFFF) << left_shift;
  410df6:	b21a      	sxth	r2, r3
  410df8:	fa02 f20c 	lsl.w	r2, r2, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410dfc:	40a2      	lsls	r2, r4
    result = (int32_t)(mult.long_long >> 31);
  410dfe:	fbc2 5a06 	smlal	r5, sl, r2, r6
  410e02:	4602      	mov	r2, r0
        sum = arm_nn_requantize(sum, out_mult, out_shift);
        sum = MAX(sum, out_activation_min);
        sum = MIN(sum, out_activation_max);
        sum_1 = (int16_t)sum;

        input_1 = (int16_t)(two_halfword_1 >> 16) << left_shift;
  410e04:	141b      	asrs	r3, r3, #16
  410e06:	fa03 f30c 	lsl.w	r3, r3, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410e0a:	40a3      	lsls	r3, r4
    result = (int32_t)(mult.long_long >> 31);
  410e0c:	fbc3 7206 	smlal	r7, r2, r3, r6
  410e10:	460e      	mov	r6, r1
  410e12:	e9cd 5a04 	strd	r5, sl, [sp, #16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410e16:	9b16      	ldr	r3, [sp, #88]	@ 0x58
        input_2 = (int16_t)(two_halfword_2 & 0xFFFF) << left_shift;
  410e18:	fa0f fa89 	sxth.w	sl, r9
    result = (int32_t)(mult.long_long >> 31);
  410e1c:	4615      	mov	r5, r2
  410e1e:	fa0a fa0c 	lsl.w	sl, sl, ip
  410e22:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410e24:	fa0a fa03 	lsl.w	sl, sl, r3
    result = (int32_t)(mult.long_long >> 31);
  410e28:	fbca 6b02 	smlal	r6, fp, sl, r2
  410e2c:	460a      	mov	r2, r1
  410e2e:	4682      	mov	sl, r0
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);
        input_2 = (int16_t)(two_halfword_2 >> 16) << left_shift;
  410e30:	ea4f 4929 	mov.w	r9, r9, asr #16
  410e34:	fa09 f90c 	lsl.w	r9, r9, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410e38:	fa09 f903 	lsl.w	r9, r9, r3
    result = (int32_t)(mult.long_long >> 31);
  410e3c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  410e3e:	e9cd 6b02 	strd	r6, fp, [sp, #8]
  410e42:	fbc9 2a03 	smlal	r2, sl, r9, r3
  410e46:	e9cd 2a00 	strd	r2, sl, [sp]
  410e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  410e4e:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
  410e52:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  410e56:	e9cd 2302 	strd	r2, r3, [sp, #8]
  410e5a:	e9dd 2300 	ldrd	r2, r3, [sp]
  410e5e:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  410e62:	ea5a 7bef 	orrs.w	fp, sl, pc, asr #31
  410e66:	e9cd 2300 	strd	r2, r3, [sp]
    q31_t threshold = remainder_mask >> 1;
  410e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    int32_t remainder = remainder_mask & dividend;
  410e6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    result = (int32_t)(mult.long_long >> 31);
  410e6e:	463c      	mov	r4, r7
    q31_t threshold = remainder_mask >> 1;
  410e70:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
  410e72:	fa5a f903 	asrs.w	r9, sl, r3
    int32_t remainder = remainder_mask & dividend;
  410e76:	ea02 030a 	and.w	r3, r2, sl
    q31_t threshold = remainder_mask >> 1;
  410e7a:	bf4c      	ite	mi
  410e7c:	46ba      	movmi	sl, r7
  410e7e:	46c2      	movpl	sl, r8
  410e80:	9a08      	ldr	r2, [sp, #32]
        result++;
  410e82:	459a      	cmp	sl, r3
  410e84:	ea59 99a9 			@ <UNDEFINED> instruction: 0xea5999a9
    q31_t threshold = remainder_mask >> 1;
  410e88:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  410e8c:	fa5a f302 	asrs.w	r3, sl, r2
    int32_t remainder = remainder_mask & dividend;
  410e90:	4652      	mov	r2, sl
  410e92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
    result = (int32_t)(mult.long_long >> 31);
  410e94:	468b      	mov	fp, r1
    int32_t remainder = remainder_mask & dividend;
  410e96:	ea02 0206 	and.w	r2, r2, r6
    q31_t threshold = remainder_mask >> 1;
  410e9a:	e9dd 760d 	ldrd	r7, r6, [sp, #52]	@ 0x34
  410e9e:	bf4c      	ite	mi
  410ea0:	46b2      	movmi	sl, r6
  410ea2:	46ba      	movpl	sl, r7
        result++;
  410ea4:	4592      	cmp	sl, r2
  410ea6:	ea53 93a3 			@ <UNDEFINED> instruction: 0xea5393a3
    result = (int32_t)(mult.long_long >> 31);
  410eaa:	4682      	mov	sl, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410eac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
    result = (int32_t)(mult.long_long >> 31);
  410eae:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
        sum = input_1 + input_2;
  410eb0:	444b      	add	r3, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410eb2:	fa03 f902 	lsl.w	r9, r3, r2
    result = (int32_t)(mult.long_long >> 31);
  410eb6:	fbc9 ba07 	smlal	fp, sl, r9, r7
  410eba:	465a      	mov	r2, fp
  410ebc:	4653      	mov	r3, sl
  410ebe:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
  410ec2:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
    int32_t remainder = remainder_mask & dividend;
  410ec6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  410ec8:	9f00      	ldr	r7, [sp, #0]
  410eca:	ea06 0b04 	and.w	fp, r6, r4
  410ece:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
    q31_t threshold = remainder_mask >> 1;
  410ed0:	fa52 f90e 	asrs.w	r9, r2, lr
    int32_t remainder = remainder_mask & dividend;
  410ed4:	ea06 0a07 	and.w	sl, r6, r7
    q31_t threshold = remainder_mask >> 1;
  410ed8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
  410eda:	9b07      	ldr	r3, [sp, #28]
  410edc:	bf48      	it	mi
  410ede:	463b      	movmi	r3, r7
    int32_t remainder = remainder_mask & dividend;
  410ee0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
    q31_t threshold = remainder_mask >> 1;
  410ee2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
    int32_t remainder = remainder_mask & dividend;
  410ee4:	4032      	ands	r2, r6
        result++;
  410ee6:	4293      	cmp	r3, r2
  410ee8:	ea59 99a9 			@ <UNDEFINED> instruction: 0xea5999a9
        sum = MAX(sum, out_activation_min);
  410eec:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
    q31_t threshold = remainder_mask >> 1;
  410eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  410ef0:	4591      	cmp	r9, r2
  410ef2:	bfb8      	it	lt
  410ef4:	4691      	movlt	r9, r2
        sum = MIN(sum, out_activation_max);
  410ef6:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
  410ef8:	4591      	cmp	r9, r2
  410efa:	bfa8      	it	ge
  410efc:	4691      	movge	r9, r2
  410efe:	fa54 f203 	asrs.w	r2, r4, r3
  410f02:	bf4c      	ite	mi
  410f04:	463b      	movmi	r3, r7
  410f06:	4643      	movpl	r3, r8
  410f08:	9c00      	ldr	r4, [sp, #0]
        result++;
  410f0a:	455b      	cmp	r3, fp
  410f0c:	ea52 92a2 			@ <UNDEFINED> instruction: 0xea5292a2
    q31_t threshold = remainder_mask >> 1;
  410f10:	9b08      	ldr	r3, [sp, #32]
        sum = arm_nn_requantize(sum, out_mult, out_shift);
        sum = MAX(sum, out_activation_min);
        sum = MIN(sum, out_activation_max);
        sum_2 = (int16_t)sum;

        arm_nn_write_q15x2_ia(&output, PACK_Q15x2_32x1(sum_1, sum_2));
  410f12:	fa1f f989 	uxth.w	r9, r9
  410f16:	fa54 f303 	asrs.w	r3, r4, r3
  410f1a:	e9dd 740d 	ldrd	r7, r4, [sp, #52]	@ 0x34
  410f1e:	bf4c      	ite	mi
  410f20:	46a3      	movmi	fp, r4
  410f22:	46bb      	movpl	fp, r7
        result++;
  410f24:	45d3      	cmp	fp, sl
  410f26:	ea53 93a3 			@ <UNDEFINED> instruction: 0xea5393a3
        sum = input_1 + input_2;
  410f2a:	4413      	add	r3, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410f2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
    result = (int32_t)(mult.long_long >> 31);
  410f2e:	4683      	mov	fp, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410f30:	fa03 fa02 	lsl.w	sl, r3, r2
    result = (int32_t)(mult.long_long >> 31);
  410f34:	460b      	mov	r3, r1
  410f36:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
  410f38:	fbca 3b02 	smlal	r3, fp, sl, r2
  410f3c:	461c      	mov	r4, r3
  410f3e:	465d      	mov	r5, fp
  410f40:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    q31_t threshold = remainder_mask >> 1;
  410f44:	9d07      	ldr	r5, [sp, #28]
  410f46:	fa54 f30e 	asrs.w	r3, r4, lr
    int32_t remainder = remainder_mask & dividend;
  410f4a:	ea04 0206 	and.w	r2, r4, r6
    q31_t threshold = remainder_mask >> 1;
  410f4e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  410f50:	bf54      	ite	pl
  410f52:	46aa      	movpl	sl, r5
  410f54:	46a2      	movmi	sl, r4
        result++;
  410f56:	4592      	cmp	sl, r2
  410f58:	ea53 93a3 			@ <UNDEFINED> instruction: 0xea5393a3
        sum = MAX(sum, out_activation_min);
  410f5c:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
  410f5e:	4293      	cmp	r3, r2
  410f60:	bfb8      	it	lt
  410f62:	4613      	movlt	r3, r2
        sum = MIN(sum, out_activation_max);
  410f64:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
  410f66:	4293      	cmp	r3, r2
  410f68:	bfa8      	it	ge
  410f6a:	4613      	movge	r3, r2
        arm_nn_write_q15x2_ia(&output, PACK_Q15x2_32x1(sum_1, sum_2));
  410f6c:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;

    memcpy(*dest_q15, &val, 4);
  410f70:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
  410f72:	f843 9b04 	str.w	r9, [r3], #4
  410f76:	932b      	str	r3, [sp, #172]	@ 0xac
    while (loop_count > 0)
  410f78:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  410f7a:	3b01      	subs	r3, #1
  410f7c:	9313      	str	r3, [sp, #76]	@ 0x4c
  410f7e:	f47f af2c 	bne.w	410dda <arm_elementwise_add_s16+0xba>
  410f82:	e9dd 541a 	ldrd	r5, r4, [sp, #104]	@ 0x68
  410f86:	e9dd ba2d 	ldrd	fp, sl, [sp, #180]	@ 0xb4
  410f8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
  410f8c:	f8dd 8098 	ldr.w	r8, [sp, #152]	@ 0x98
  410f90:	f8dd 90a4 	ldr.w	r9, [sp, #164]	@ 0xa4
  410f94:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
  410f96:	441c      	add	r4, r3
  410f98:	441d      	add	r5, r3

        loop_count--;
    }
    loop_count = block_size & 0x1;

    while (loop_count > 0)
  410f9a:	07f3      	lsls	r3, r6, #31
  410f9c:	d576      	bpl.n	41108c <arm_elementwise_add_s16+0x36c>
    {
        /* C = A + B */
        input_1 = *input_1_vect++ << left_shift;
        input_2 = *input_2_vect++ << left_shift;
  410f9e:	f9b4 2000 	ldrsh.w	r2, [r4]
        input_1 = *input_1_vect++ << left_shift;
  410fa2:	f9b5 1000 	ldrsh.w	r1, [r5]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  410fa6:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
        input_2 = *input_2_vect++ << left_shift;
  410faa:	fa02 f20c 	lsl.w	r2, r2, ip
        input_1 = *input_1_vect++ << left_shift;
  410fae:	fa01 f10c 	lsl.w	r1, r1, ip
  410fb2:	f04f 0c00 	mov.w	ip, #0
    result = (int32_t)(mult.long_long >> 31);
  410fb6:	463d      	mov	r5, r7
  410fb8:	4660      	mov	r0, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410fba:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
    result = (int32_t)(mult.long_long >> 31);
  410fbe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410fc0:	4099      	lsls	r1, r3
    result = (int32_t)(mult.long_long >> 31);
  410fc2:	fbc1 5004 	smlal	r5, r0, r1, r4
  410fc6:	4666      	mov	r6, ip
  410fc8:	e9cd 5000 	strd	r5, r0, [sp]
  410fcc:	4638      	mov	r0, r7
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410fce:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
    result = (int32_t)(mult.long_long >> 31);
  410fd2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410fd4:	409a      	lsls	r2, r3
    result = (int32_t)(mult.long_long >> 31);
  410fd6:	fbc2 0601 	smlal	r0, r6, r2, r1
  410fda:	e9cd 0602 	strd	r0, r6, [sp, #8]
  410fde:	e9dd 0100 	ldrd	r0, r1, [sp]
  410fe2:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
  410fe6:	e9cd 0100 	strd	r0, r1, [sp]
  410fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  410fee:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  410ff2:	2601      	movs	r6, #1
    result = (int32_t)(mult.long_long >> 31);
  410ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410ff8:	f1c8 0e00 	rsb	lr, r8, #0
    result = dividend >> exponent;
  410ffc:	9800      	ldr	r0, [sp, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  410ffe:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  411002:	fa06 f50e 	lsl.w	r5, r6, lr
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  411006:	f1c9 0300 	rsb	r3, r9, #0
    result = dividend >> exponent;
  41100a:	fa40 fe0e 	asr.w	lr, r0, lr
  41100e:	9802      	ldr	r0, [sp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  411010:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  411014:	fa06 f103 	lsl.w	r1, r6, r3
    result = dividend >> exponent;
  411018:	fa40 f303 	asr.w	r3, r0, r3
        threshold++;
  41101c:	9800      	ldr	r0, [sp, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
  41101e:	3d01      	subs	r5, #1
    int32_t remainder = remainder_mask & dividend;
  411020:	4604      	mov	r4, r0
        threshold++;
  411022:	ea4f 79d0 	mov.w	r9, r0, lsr #31
  411026:	9802      	ldr	r0, [sp, #8]
    int32_t remainder = remainder_mask & dividend;
  411028:	402c      	ands	r4, r5
        threshold++;
  41102a:	eb09 0965 	add.w	r9, r9, r5, asr #1
        result++;
  41102e:	454c      	cmp	r4, r9
  411030:	ea5e 9ede 			@ <UNDEFINED> instruction: 0xea5e9ede
    const q31_t remainder_mask = (1 << exponent) - 1;
  411034:	3901      	subs	r1, #1
        threshold++;
  411036:	0fc4      	lsrs	r4, r0, #31
  411038:	eb04 0461 	add.w	r4, r4, r1, asr #1
    int32_t remainder = remainder_mask & dividend;
  41103c:	4008      	ands	r0, r1
        result++;
  41103e:	42a0      	cmp	r0, r4
  411040:	ea53 93d3 			@ <UNDEFINED> instruction: 0xea5393d3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  411044:	ea2a 78ea 	bic.w	r8, sl, sl, asr #31

        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
  411048:	4473      	add	r3, lr
  41104a:	fa03 f308 	lsl.w	r3, r3, r8
    result = (int32_t)(mult.long_long >> 31);
  41104e:	fbc3 7c0b 	smlal	r7, ip, r3, fp
  411052:	4638      	mov	r0, r7
  411054:	4661      	mov	r1, ip
  411056:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  41105a:	f1ca 0200 	rsb	r2, sl, #0
  41105e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  411062:	4096      	lsls	r6, r2
  411064:	3e01      	subs	r6, #1
        threshold++;
  411066:	0fc3      	lsrs	r3, r0, #31
    result = dividend >> exponent;
  411068:	fa40 f202 	asr.w	r2, r0, r2
        threshold++;
  41106c:	eb03 0366 	add.w	r3, r3, r6, asr #1
    int32_t remainder = remainder_mask & dividend;
  411070:	4030      	ands	r0, r6
        result++;
  411072:	4298      	cmp	r0, r3
  411074:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
        sum = arm_nn_requantize(sum, out_mult, out_shift);

        sum = MAX(sum, out_activation_min);
  411078:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
  41107a:	429a      	cmp	r2, r3
  41107c:	bfb8      	it	lt
  41107e:	461a      	movlt	r2, r3
        sum = MIN(sum, out_activation_max);
  411080:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
  411082:	429a      	cmp	r2, r3
  411084:	bfa8      	it	ge
  411086:	461a      	movge	r2, r3

        *output++ = (int16_t)sum;
  411088:	9b18      	ldr	r3, [sp, #96]	@ 0x60
  41108a:	801a      	strh	r2, [r3, #0]
        /* Decrement loop counter */
        loop_count--;
    }

    return (ARM_CMSIS_NN_SUCCESS);
}
  41108c:	2000      	movs	r0, #0
  41108e:	b01d      	add	sp, #116	@ 0x74
  411090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (loop_count > 0)
  411094:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
  411096:	9318      	str	r3, [sp, #96]	@ 0x60
  411098:	e77f      	b.n	410f9a <arm_elementwise_add_s16+0x27a>
  41109a:	bf00      	nop

0041109c <arm_elementwise_add_s8>:
                                           const int32_t out_mult,
                                           const int32_t out_shift,
                                           const int32_t out_activation_min,
                                           const int32_t out_activation_max,
                                           const int32_t block_size)
{
  41109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4110a0:	ed2d 8b10 	vpush	{d8-d15}
  4110a4:	b095      	sub	sp, #84	@ 0x54
  4110a6:	f8dd c0e4 	ldr.w	ip, [sp, #228]	@ 0xe4
  4110aa:	f8dd b0b8 	ldr.w	fp, [sp, #184]	@ 0xb8
#if defined(ARM_MATH_MVEI)
    int32_t count = block_size;

    while (count > 0)
  4110ae:	f1bc 0f00 	cmp.w	ip, #0
{
  4110b2:	f8dd 90c4 	ldr.w	r9, [sp, #196]	@ 0xc4
  4110b6:	f8dd 80d8 	ldr.w	r8, [sp, #216]	@ 0xd8
  4110ba:	e9dd 6734 	ldrd	r6, r7, [sp, #208]	@ 0xd0
    while (count > 0)
  4110be:	f340 80a9 	ble.w	411214 <arm_elementwise_add_s8+0x178>
  4110c2:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
    return arm_divide_by_power_of_two_mve(
  4110c4:	f1cb 0e00 	rsb	lr, fp, #0
  4110c8:	eea6 4b10 	vdup.32	q3, r4
        arm_doubling_high_mult_mve(vshlq_s32(val, vdupq_n_s32(LEFT_SHIFT(shift))), multiplier), RIGHT_SHIFT(shift));
  4110cc:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
  4110d0:	ed8d 7f08 	stc	15, cr7, [sp, #32]
  4110d4:	eea6 bb10 	vdup.32	q3, fp
  4110d8:	eeac 2b10 	vdup.32	q6, r2
    const int32x4_t shift = vdupq_n_s32(-exponent);
  4110dc:	4662      	mov	r2, ip
    return arm_divide_by_power_of_two_mve(
  4110de:	f1c8 0c00 	rsb	ip, r8, #0
  4110e2:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
    const int32x4_t shift = vdupq_n_s32(-exponent);
  4110e6:	f1cc 0400 	rsb	r4, ip, #0
    return arm_divide_by_power_of_two_mve(
  4110ea:	f1c9 0c00 	rsb	ip, r9, #0
        arm_doubling_high_mult_mve(vshlq_s32(val, vdupq_n_s32(LEFT_SHIFT(shift))), multiplier), RIGHT_SHIFT(shift));
  4110ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  4110f2:	ed8d 7f10 	stc	15, cr7, [sp, #64]	@ 0x40
  4110f6:	eea6 9b10 	vdup.32	q3, r9
  4110fa:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
  4110fe:	f04f 0a01 	mov.w	sl, #1
  411102:	ed8d 7f00 	stc	15, cr7, [sp]
  411106:	eea6 8b10 	vdup.32	q3, r8
    return arm_divide_by_power_of_two_mve(
  41110a:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    const int32x4_t shift = vdupq_n_s32(-exponent);
  41110e:	f1ce 0e00 	rsb	lr, lr, #0
  411112:	f1a2 0b04 	sub.w	fp, r2, #4
  411116:	eea8 eb10 	vdup.32	q4, lr
  41111a:	eea2 4b10 	vdup.32	q1, r4
  41111e:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
  411122:	9c37      	ldr	r4, [sp, #220]	@ 0xdc
  411124:	f11b 0f04 	cmn.w	fp, #4
  411128:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  41112c:	44d6      	add	lr, sl
  41112e:	ed8d 7f04 	stc	15, cr7, [sp, #16]
  411132:	bfd8      	it	le
  411134:	46d6      	movle	lr, sl
  411136:	eea6 4b10 	vdup.32	q3, r4
    return arm_divide_by_power_of_two_mve(
  41113a:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
    const int32x4_t shift = vdupq_n_s32(-exponent);
  41113e:	f1cc 0c00 	rsb	ip, ip, #0
  411142:	f04e e001 	dls	lr, lr
  411146:	eea0 cb10 	vdup.32	q0, ip
  41114a:	ed8d 7f0c 	stc	15, cr7, [sp, #48]	@ 0x30
  41114e:	469b      	mov	fp, r3
  411150:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
  411152:	9c38      	ldr	r4, [sp, #224]	@ 0xe0
  411154:	eb05 0a02 	add.w	sl, r5, r2
  411158:	eeaa 4b10 	vdup.32	q5, r4
  41115c:	9d30      	ldr	r5, [sp, #192]	@ 0xc0
  41115e:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
  411160:	4411      	add	r1, r2
  411162:	4410      	add	r0, r2
  411164:	eba0 0902 	sub.w	r9, r0, r2

__extension__ extern __inline mve_pred16_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vctp32q (uint32_t __a)
{
  return __builtin_mve_vctp32qv4bi (__a);
  411168:	f022 e801 	bfcsel	0, 41116e <arm_elementwise_add_s8+0xd2>, 4, hi

__extension__ extern __inline int32x4_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vldrbq_z_s32 (int8_t const * __base, mve_pred16_t __p)
{
  return __builtin_mve_vldrbq_z_sv4si ((__builtin_neon_qi *) __base, __p);
  41116c:	464b      	mov	r3, r9
  41116e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  411172:	ed93 4f00 	ldc	15, cr4, [r3]

__extension__ extern __inline int32x4_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vaddq_s32 (int32x4_t __a, int32x4_t __b)
{
  return __a + __b;
  411176:	ef2c 4844 	vadd.i32	q2, q6, q2
  41117a:	eba1 0802 	sub.w	r8, r1, r2
  return __builtin_mve_vshlq_sv4si (__a, __b);
  41117e:	ed9d 7f10 	ldc	15, cr7, [sp, #64]	@ 0x40
  return __builtin_mve_vldrbq_z_sv4si ((__builtin_neon_qi *) __base, __p);
  411182:	4643      	mov	r3, r8
  return __builtin_mve_vshlq_r_sv4si (__a, __b);
  411184:	ee39 5e64 	cdp	14, 3, cr5, cr9, cr4, {3}
  return __a + __b;
  411188:	ed9d ff08 	ldc	15, cr15, [sp, #32]
  return __builtin_mve_vshlq_sv4si (__a, __b);
  41118c:	ef26 4444 	vshl.s32	q2, q2, q3
  return __builtin_mve_vldrbq_z_sv4si ((__builtin_neon_qi *) __base, __p);
  411190:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  411194:	ed93 6f00 	ldc	15, cr6, [r3]
  return __a + __b;
  411198:	ef2e 6846 	vadd.i32	q3, q7, q3
  return __builtin_mve_vqrdmulhq_n_sv4si (__a, __b);
  41119c:	fe25 4e6b 	cdp2	14, 2, cr4, cr5, cr11, {3}
  return __builtin_mve_vshlq_sv4si (__a, __b);
  4111a0:	ed9d ff00 	ldc	15, cr15, [sp]
  return __builtin_mve_vshlq_r_sv4si (__a, __b);
  4111a4:	ee39 7e64 	cdp	14, 3, cr7, cr9, cr4, {3}
  return __builtin_mve_vshlq_sv4si (__a, __b);
  4111a8:	ef2e 6446 	vshl.s32	q3, q3, q7
  return __builtin_mve_vandq_sv4si (__a, __b);
  4111ac:	ef04 e158 	vand	q7, q2, q4
  return __builtin_mve_vqrdmulhq_n_sv4si (__a, __b);
  4111b0:	fe27 6e65 	cdp2	14, 2, cr6, cr7, cr5, {3}
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  4111b4:	efa1 e05e 	vshr.s32	q7, q7, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  4111b8:	ef24 405e 	vqadd.s32	q2, q2, q7
  return __builtin_mve_vandq_sv4si (__a, __b);
  4111bc:	ef06 e150 	vand	q7, q3, q0
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  4111c0:	efa1 e05e 	vshr.s32	q7, q7, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  4111c4:	ef26 605e 	vqadd.s32	q3, q3, q7
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  4111c8:	ef28 4544 	vrshl.s32	q2, q2, q4
  4111cc:	ef20 6546 	vrshl.s32	q3, q3, q0
  return __a + __b;
  4111d0:	ef26 6844 	vadd.i32	q3, q3, q2
  return __builtin_mve_vshlq_sv4si (__a, __b);
  4111d4:	ed9d 5f04 	ldc	15, cr5, [sp, #16]
  4111d8:	ef24 6446 	vshl.s32	q3, q3, q2
  return __builtin_mve_vqrdmulhq_n_sv4si (__a, __b);
  4111dc:	fe27 6e67 	cdp2	14, 2, cr6, cr7, cr7, {3}
  return __builtin_mve_vandq_sv4si (__a, __b);
  4111e0:	ef06 4152 	vand	q2, q3, q1
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  4111e4:	efa1 4054 	vshr.s32	q2, q2, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  4111e8:	ef26 6054 	vqadd.s32	q3, q3, q2
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  4111ec:	ef22 6546 	vrshl.s32	q3, q3, q1
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  4111f0:	ed9d 5f0c 	ldc	15, cr5, [sp, #48]	@ 0x30
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4111f4:	ee27 6f46 	cdp	15, 2, cr6, cr7, cr6, {2}
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  4111f8:	ef26 6644 	vmax.s32	q3, q3, q2
  4111fc:	ebaa 0c02 	sub.w	ip, sl, r2
  return __builtin_mve_vminq_sv4si (__a, __b);
  411200:	ef26 665a 	vmin.s32	q3, q3, q5
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  411204:	4663      	mov	r3, ip
  411206:	3a04      	subs	r2, #4
  411208:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  41120c:	ed83 6f00 	stc	15, cr6, [r3]
  411210:	f00f c059 	le	lr, 411164 <arm_elementwise_add_s8+0xc8>
    }

#endif /* ARM_MATH_MVEI */

    return (ARM_CMSIS_NN_SUCCESS);
}
  411214:	2000      	movs	r0, #0
  411216:	b015      	add	sp, #84	@ 0x54
  411218:	ecbd 8b10 	vpop	{d8-d15}
  41121c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00411220 <arm_convolve_1_x_n_s8>:
                                          const q7_t *filter_data,
                                          const cmsis_nn_dims *bias_dims,
                                          const int32_t *bias_data,
                                          const cmsis_nn_dims *output_dims,
                                          q7_t *output_data)
{
  411220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411224:	4698      	mov	r8, r3
    (void)bias_dims;
    arm_cmsis_nn_status status = ARM_CMSIS_NN_SUCCESS;
    /* The wrapper API is the ultimate reference for argument check */
    if ((input_dims->h != 1) || (output_dims->w % 4 != 0) || conv_params->dilation.w != 1)
  411226:	685b      	ldr	r3, [r3, #4]
{
  411228:	b0a9      	sub	sp, #164	@ 0xa4
    if ((input_dims->h != 1) || (output_dims->w % 4 != 0) || conv_params->dilation.w != 1)
  41122a:	2b01      	cmp	r3, #1
{
  41122c:	9833      	ldr	r0, [sp, #204]	@ 0xcc
  41122e:	910d      	str	r1, [sp, #52]	@ 0x34
  411230:	9206      	str	r2, [sp, #24]
  411232:	e9dd 7e37 	ldrd	r7, lr, [sp, #220]	@ 0xdc
    if ((input_dims->h != 1) || (output_dims->w % 4 != 0) || conv_params->dilation.w != 1)
  411236:	f040 80fc 	bne.w	411432 <arm_convolve_1_x_n_s8+0x212>
  41123a:	68bb      	ldr	r3, [r7, #8]
  41123c:	460d      	mov	r5, r1
  41123e:	f013 0103 	ands.w	r1, r3, #3
  411242:	f040 80f6 	bne.w	411432 <arm_convolve_1_x_n_s8+0x212>
  411246:	69aa      	ldr	r2, [r5, #24]
  411248:	2a01      	cmp	r2, #1
  41124a:	f040 80f2 	bne.w	411432 <arm_convolve_1_x_n_s8+0x212>
    const uint16_t input_ch = input_dims->c;
    const uint16_t pad_x = conv_params->padding.w;
    const uint16_t stride_x = conv_params->stride.w;

    int i_batch;
    for (i_batch = 0; i_batch < input_dims->n; i_batch++)
  41124e:	f8d8 2000 	ldr.w	r2, [r8]
    const uint16_t kernel_x = filter_dims->w;
  411252:	6884      	ldr	r4, [r0, #8]
    for (i_batch = 0; i_batch < input_dims->n; i_batch++)
  411254:	2a00      	cmp	r2, #0
    const uint16_t stride_x = conv_params->stride.w;
  411256:	68ad      	ldr	r5, [r5, #8]
    const uint16_t input_ch = input_dims->c;
  411258:	e9d8 0602 	ldrd	r0, r6, [r8, #8]
    for (i_batch = 0; i_batch < input_dims->n; i_batch++)
  41125c:	f340 80cf 	ble.w	4113fe <arm_convolve_1_x_n_s8+0x1de>
  411260:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
  411264:	fa1f f985 	uxth.w	r9, r5
  411268:	b285      	uxth	r5, r0
    {
        for (int i_out_x = 0; i_out_x <= (output_x - 4); i_out_x += 4)
  41126a:	b298      	uxth	r0, r3
  41126c:	fa1f fa86 	uxth.w	sl, r6
  411270:	3803      	subs	r0, #3
  411272:	fa1f fb84 	uxth.w	fp, r4
  411276:	900e      	str	r0, [sp, #56]	@ 0x38
                    output_data += output_ch;
                }
            }
            else
            {
                output_data = arm_nn_mat_mul_core_4x_s8(kernel_x * input_ch,
  411278:	fb0a f00b 	mul.w	r0, sl, fp
  41127c:	9014      	str	r0, [sp, #80]	@ 0x50
                                                        stride_x * input_ch,
  41127e:	fb09 f00a 	mul.w	r0, r9, sl
  411282:	9015      	str	r0, [sp, #84]	@ 0x54
                                                        bias_data,
                                                        output_data);
            }
        }
        /* Advance to the next batch */
        input_data += (input_x * input_ch);
  411284:	fb0a f005 	mul.w	r0, sl, r5
  411288:	4213      	tst	r3, r2
  41128a:	9018      	str	r0, [sp, #96]	@ 0x60
  41128c:	f000 80b7 	beq.w	4113fe <arm_convolve_1_x_n_s8+0x1de>
  411290:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
    for (i_batch = 0; i_batch < input_dims->n; i_batch++)
  411292:	460c      	mov	r4, r1
  411294:	8a1b      	ldrh	r3, [r3, #16]
  411296:	eb09 0149 	add.w	r1, r9, r9, lsl #1
  41129a:	1aca      	subs	r2, r1, r3
  41129c:	1aaa      	subs	r2, r5, r2
  41129e:	921a      	str	r2, [sp, #104]	@ 0x68
  4112a0:	ea4f 0289 	mov.w	r2, r9, lsl #2
  4112a4:	f8b7 c00c 	ldrh.w	ip, [r7, #12]
  4112a8:	9211      	str	r2, [sp, #68]	@ 0x44
  4112aa:	ea4f 0249 	mov.w	r2, r9, lsl #1
  4112ae:	920f      	str	r2, [sp, #60]	@ 0x3c
  4112b0:	1a5a      	subs	r2, r3, r1
  4112b2:	425b      	negs	r3, r3
  4112b4:	931b      	str	r3, [sp, #108]	@ 0x6c
  4112b6:	ea4f 038c 	mov.w	r3, ip, lsl #2
  4112ba:	e9cd c312 	strd	ip, r3, [sp, #72]	@ 0x48
  4112be:	9110      	str	r1, [sp, #64]	@ 0x40
  4112c0:	9219      	str	r2, [sp, #100]	@ 0x64
        for (int i_out_x = 0; i_out_x <= (output_x - 4); i_out_x += 4)
  4112c2:	2300      	movs	r3, #0
  4112c4:	e9dd 7019 	ldrd	r7, r0, [sp, #100]	@ 0x64
  4112c8:	e9cd 4816 	strd	r4, r8, [sp, #88]	@ 0x58
  4112cc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
  4112ce:	9308      	str	r3, [sp, #32]
                input_begin_idx[i] = MAX(0, est_input_x_idx);
  4112d0:	9910      	ldr	r1, [sp, #64]	@ 0x40
                ker_begin_idx[i] = MAX(0, -est_input_x_idx);
  4112d2:	2a00      	cmp	r2, #0
  4112d4:	eb01 0300 	add.w	r3, r1, r0
  4112d8:	eb09 0502 	add.w	r5, r9, r2
  4112dc:	eb01 0407 	add.w	r4, r1, r7
  4112e0:	bfc8      	it	gt
  4112e2:	2400      	movgt	r4, #0
                ker_end_idx[i] = MIN(kernel_x, input_x - est_input_x_idx);
  4112e4:	455b      	cmp	r3, fp
  4112e6:	461e      	mov	r6, r3
  4112e8:	eb09 0105 	add.w	r1, r9, r5
  4112ec:	bfa8      	it	ge
  4112ee:	465e      	movge	r6, fp
                ker_begin_idx[i] = MAX(0, -est_input_x_idx);
  4112f0:	2d00      	cmp	r5, #0
                input_begin_idx[i] = MAX(0, est_input_x_idx);
  4112f2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
  4112f6:	951d      	str	r5, [sp, #116]	@ 0x74
                ker_begin_idx[i] = MAX(0, -est_input_x_idx);
  4112f8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
  4112fa:	eba3 0309 	sub.w	r3, r3, r9
  4112fe:	443d      	add	r5, r7
  411300:	bfc8      	it	gt
  411302:	2500      	movgt	r5, #0
                ker_end_idx[i] = MIN(kernel_x, input_x - est_input_x_idx);
  411304:	455b      	cmp	r3, fp
                ker_begin_idx[i] = MAX(0, -est_input_x_idx);
  411306:	9521      	str	r5, [sp, #132]	@ 0x84
                ker_end_idx[i] = MIN(kernel_x, input_x - est_input_x_idx);
  411308:	461d      	mov	r5, r3
  41130a:	bfa8      	it	ge
  41130c:	465d      	movge	r5, fp
  41130e:	eba3 0309 	sub.w	r3, r3, r9
                ker_begin_idx[i] = MAX(0, -est_input_x_idx);
  411312:	2900      	cmp	r1, #0
  411314:	9307      	str	r3, [sp, #28]
  411316:	eb09 0307 	add.w	r3, r9, r7
  41131a:	bfc8      	it	gt
  41131c:	2300      	movgt	r3, #0
  41131e:	9322      	str	r3, [sp, #136]	@ 0x88
                ker_end_idx[i] = MIN(kernel_x, input_x - est_input_x_idx);
  411320:	9b07      	ldr	r3, [sp, #28]
  411322:	9624      	str	r6, [sp, #144]	@ 0x90
  411324:	455b      	cmp	r3, fp
  411326:	bfa8      	it	ge
  411328:	465b      	movge	r3, fp
  41132a:	eb09 0601 	add.w	r6, r9, r1
                ker_begin_idx[i] = MAX(0, -est_input_x_idx);
  41132e:	2e00      	cmp	r6, #0
                ker_end_idx[i] = MIN(kernel_x, input_x - est_input_x_idx);
  411330:	9326      	str	r3, [sp, #152]	@ 0x98
                ker_begin_idx[i] = MAX(0, -est_input_x_idx);
  411332:	bfd4      	ite	le
  411334:	463b      	movle	r3, r7
  411336:	2300      	movgt	r3, #0
                ker_end_idx[i] = MIN(kernel_x, input_x - est_input_x_idx);
  411338:	4583      	cmp	fp, r0
                ker_begin_idx[i] = MAX(0, -est_input_x_idx);
  41133a:	9323      	str	r3, [sp, #140]	@ 0x8c
                ker_end_idx[i] = MIN(kernel_x, input_x - est_input_x_idx);
  41133c:	465b      	mov	r3, fp
  41133e:	bfa8      	it	ge
  411340:	4603      	movge	r3, r0
                input_begin_idx[i] = MAX(0, est_input_x_idx);
  411342:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  411346:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                ker_end_idx[i] = MIN(kernel_x, input_x - est_input_x_idx);
  41134a:	9327      	str	r3, [sp, #156]	@ 0x9c
                input_begin_idx[i] = MAX(0, est_input_x_idx);
  41134c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  411350:	921c      	str	r2, [sp, #112]	@ 0x70
                ker_begin_idx[i] = MAX(0, -est_input_x_idx);
  411352:	9420      	str	r4, [sp, #128]	@ 0x80
                ker_end_idx[i] = MIN(kernel_x, input_x - est_input_x_idx);
  411354:	9525      	str	r5, [sp, #148]	@ 0x94
                input_begin_idx[i] = MAX(0, est_input_x_idx);
  411356:	911e      	str	r1, [sp, #120]	@ 0x78
  411358:	931f      	str	r3, [sp, #124]	@ 0x7c
            if ((ker_begin_idx[0] != 0) || (ker_end_idx[3] != kernel_x))
  41135a:	2c00      	cmp	r4, #0
  41135c:	d167      	bne.n	41142e <arm_convolve_1_x_n_s8+0x20e>
  41135e:	4583      	cmp	fp, r0
  411360:	dd51      	ble.n	411406 <arm_convolve_1_x_n_s8+0x1e6>
  411362:	4675      	mov	r5, lr
  411364:	e9cd 6909 	strd	r6, r9, [sp, #36]	@ 0x24
  411368:	970b      	str	r7, [sp, #44]	@ 0x2c
  41136a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
  41136c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
  41136e:	f8dd 90c8 	ldr.w	r9, [sp, #200]	@ 0xc8
  411372:	f10d 0870 	add.w	r8, sp, #112	@ 0x70
  411376:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
                    arm_nn_mat_mul_core_1x_s8(actual_kernel_len * input_ch,
  41137a:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
  41137c:	9504      	str	r5, [sp, #16]
  41137e:	9303      	str	r3, [sp, #12]
  411380:	9b06      	ldr	r3, [sp, #24]
  411382:	9600      	str	r6, [sp, #0]
  411384:	e9cd 7301 	strd	r7, r3, [sp, #4]
                    const int32_t actual_kernel_len = ker_end_idx[i] - ker_begin_idx[i];
  411388:	aa24      	add	r2, sp, #144	@ 0x90
  41138a:	ab20      	add	r3, sp, #128	@ 0x80
  41138c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  411390:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
                    arm_nn_mat_mul_core_1x_s8(actual_kernel_len * input_ch,
  411394:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
                    const int32_t actual_kernel_len = ker_end_idx[i] - ker_begin_idx[i];
  411396:	1ac0      	subs	r0, r0, r3
                    arm_nn_mat_mul_core_1x_s8(actual_kernel_len * input_ch,
  411398:	fb0a 2303 	mla	r3, sl, r3, r2
                                              input_data + input_begin_idx[i] * input_ch,
  41139c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
                                              (kernel_x - actual_kernel_len) * input_ch,
  4113a0:	ebab 0100 	sub.w	r1, fp, r0
                    arm_nn_mat_mul_core_1x_s8(actual_kernel_len * input_ch,
  4113a4:	fb02 920a 	mla	r2, r2, sl, r9
  4113a8:	fb0a f101 	mul.w	r1, sl, r1
  4113ac:	fb0a f000 	mul.w	r0, sl, r0
                for (int i = 0; i < 4; i++)
  4113b0:	3401      	adds	r4, #1
                    arm_nn_mat_mul_core_1x_s8(actual_kernel_len * input_ch,
  4113b2:	f002 f84d 	bl	413450 <arm_nn_mat_mul_core_1x_s8>
                for (int i = 0; i < 4; i++)
  4113b6:	2c04      	cmp	r4, #4
                    output_data += output_ch;
  4113b8:	4435      	add	r5, r6
                for (int i = 0; i < 4; i++)
  4113ba:	d1de      	bne.n	41137a <arm_convolve_1_x_n_s8+0x15a>
  4113bc:	e9dd 7e0b 	ldrd	r7, lr, [sp, #44]	@ 0x2c
  4113c0:	e9dd 6909 	ldrd	r6, r9, [sp, #36]	@ 0x24
  4113c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  4113c6:	449e      	add	lr, r3
        for (int i_out_x = 0; i_out_x <= (output_x - 4); i_out_x += 4)
  4113c8:	9911      	ldr	r1, [sp, #68]	@ 0x44
  4113ca:	9b08      	ldr	r3, [sp, #32]
  4113cc:	eb01 0009 	add.w	r0, r1, r9
  4113d0:	1a7f      	subs	r7, r7, r1
  4113d2:	9907      	ldr	r1, [sp, #28]
  4113d4:	3304      	adds	r3, #4
  4113d6:	1a08      	subs	r0, r1, r0
  4113d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
  4113da:	9308      	str	r3, [sp, #32]
  4113dc:	428b      	cmp	r3, r1
  4113de:	eb06 0209 	add.w	r2, r6, r9
  4113e2:	f6ff af75 	blt.w	4112d0 <arm_convolve_1_x_n_s8+0xb0>
    for (i_batch = 0; i_batch < input_dims->n; i_batch++)
  4113e6:	e9dd 4816 	ldrd	r4, r8, [sp, #88]	@ 0x58
        input_data += (input_x * input_ch);
  4113ea:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  4113ec:	9a18      	ldr	r2, [sp, #96]	@ 0x60
    for (i_batch = 0; i_batch < input_dims->n; i_batch++)
  4113ee:	3401      	adds	r4, #1
        input_data += (input_x * input_ch);
  4113f0:	4413      	add	r3, r2
  4113f2:	9332      	str	r3, [sp, #200]	@ 0xc8
    for (i_batch = 0; i_batch < input_dims->n; i_batch++)
  4113f4:	f8d8 3000 	ldr.w	r3, [r8]
  4113f8:	429c      	cmp	r4, r3
  4113fa:	f6ff af62 	blt.w	4112c2 <arm_convolve_1_x_n_s8+0xa2>
    arm_cmsis_nn_status status = ARM_CMSIS_NN_SUCCESS;
  4113fe:	2000      	movs	r0, #0
#endif

out:
    /* Return to application */
    return status;
}
  411400:	b029      	add	sp, #164	@ 0xa4
  411402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                output_data = arm_nn_mat_mul_core_4x_s8(kernel_x * input_ch,
  411406:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  411408:	f8cd e010 	str.w	lr, [sp, #16]
  41140c:	fb02 320a 	mla	r2, r2, sl, r3
  411410:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
  411414:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
  411416:	9303      	str	r3, [sp, #12]
  411418:	9b06      	ldr	r3, [sp, #24]
  41141a:	9302      	str	r3, [sp, #8]
  41141c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  41141e:	9301      	str	r3, [sp, #4]
  411420:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  411422:	9300      	str	r3, [sp, #0]
  411424:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
  411426:	f002 f9e3 	bl	4137f0 <arm_nn_mat_mul_core_4x_s8>
  41142a:	4686      	mov	lr, r0
  41142c:	e7cc      	b.n	4113c8 <arm_convolve_1_x_n_s8+0x1a8>
  41142e:	2400      	movs	r4, #0
  411430:	e797      	b.n	411362 <arm_convolve_1_x_n_s8+0x142>
        status = ARM_CMSIS_NN_ARG_ERROR;
  411432:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  411436:	e7e3      	b.n	411400 <arm_convolve_1_x_n_s8+0x1e0>

00411438 <arm_convolve_1_x_n_s8_get_buffer_size>:
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
  411438:	2000      	movs	r0, #0
  41143a:	4770      	bx	lr

0041143c <arm_convolve_1x1_s8_fast>:
                                             const q7_t *filter_data,
                                             const cmsis_nn_dims *bias_dims,
                                             const int32_t *bias_data,
                                             const cmsis_nn_dims *output_dims,
                                             q7_t *output_data)
{
  41143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411440:	4691      	mov	r9, r2
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
  411442:	690a      	ldr	r2, [r1, #16]
{
  411444:	b089      	sub	sp, #36	@ 0x24
  411446:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
  41144a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
  41144c:	2a00      	cmp	r2, #0
  41144e:	d15a      	bne.n	411506 <arm_convolve_1x1_s8_fast+0xca>
  411450:	694e      	ldr	r6, [r1, #20]
  411452:	468a      	mov	sl, r1
  411454:	2e00      	cmp	r6, #0
  411456:	d156      	bne.n	411506 <arm_convolve_1x1_s8_fast+0xca>
  411458:	688a      	ldr	r2, [r1, #8]
  41145a:	2a01      	cmp	r2, #1
  41145c:	d153      	bne.n	411506 <arm_convolve_1x1_s8_fast+0xca>
  41145e:	68ca      	ldr	r2, [r1, #12]
  411460:	2a01      	cmp	r2, #1
  411462:	d150      	bne.n	411506 <arm_convolve_1x1_s8_fast+0xca>
    (void)filter_dims;
    (void)bias_dims;

#if defined(ARM_MATH_MVEI)

    const int32_t col_len = input_dims->w * input_dims->h * input_dims->n;
  411464:	e9d3 0201 	ldrd	r0, r2, [r3, #4]
  411468:	fb00 f202 	mul.w	r2, r0, r2
  41146c:	6818      	ldr	r0, [r3, #0]
    const int32_t output_ch = output_dims->c;
    const int32_t input_ch = input_dims->c;
  41146e:	68dd      	ldr	r5, [r3, #12]
    const int32_t col_len = input_dims->w * input_dims->h * input_dims->n;
  411470:	fb00 fc02 	mul.w	ip, r0, r2
    const int32_t output_ch = output_dims->c;
  411474:	9b17      	ldr	r3, [sp, #92]	@ 0x5c

    for (int i_items = 0; i_items <= (col_len - 4); i_items += 4)
  411476:	f1bc 0f03 	cmp.w	ip, #3
    const int32_t output_ch = output_dims->c;
  41147a:	f8d3 800c 	ldr.w	r8, [r3, #12]
    for (int i_items = 0; i_items <= (col_len - 4); i_items += 4)
  41147e:	f1ac 0303 	sub.w	r3, ip, #3
  411482:	dd1d      	ble.n	4114c0 <arm_convolve_1x1_s8_fast+0x84>
  411484:	9f12      	ldr	r7, [sp, #72]	@ 0x48
  411486:	4620      	mov	r0, r4
  411488:	46ba      	mov	sl, r7
  41148a:	460c      	mov	r4, r1
  41148c:	4647      	mov	r7, r8
  41148e:	4698      	mov	r8, r3
  411490:	00aa      	lsls	r2, r5, #2
  411492:	e9cd 2c06 	strd	r2, ip, [sp, #24]
    {
        output_data = arm_nn_mat_mul_core_4x_s8(input_ch,
  411496:	4652      	mov	r2, sl
  411498:	e9cd b003 	strd	fp, r0, [sp, #12]
  41149c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  41149e:	4629      	mov	r1, r5
  4114a0:	4628      	mov	r0, r5
  4114a2:	e9cd 4901 	strd	r4, r9, [sp, #4]
  4114a6:	9700      	str	r7, [sp, #0]
  4114a8:	f002 f9a2 	bl	4137f0 <arm_nn_mat_mul_core_4x_s8>
    for (int i_items = 0; i_items <= (col_len - 4); i_items += 4)
  4114ac:	3604      	adds	r6, #4
  4114ae:	9b06      	ldr	r3, [sp, #24]
  4114b0:	4546      	cmp	r6, r8
  4114b2:	449a      	add	sl, r3
  4114b4:	dbef      	blt.n	411496 <arm_convolve_1x1_s8_fast+0x5a>
  4114b6:	46a2      	mov	sl, r4
  4114b8:	46b8      	mov	r8, r7
  4114ba:	4604      	mov	r4, r0
  4114bc:	f8dd c01c 	ldr.w	ip, [sp, #28]
                                                bias_data,
                                                output_data);
    }

    /* Handle left over elements */
    for (int i_items = (col_len & ~0x3); i_items < col_len; i_items++)
  4114c0:	f02c 0703 	bic.w	r7, ip, #3
  4114c4:	45bc      	cmp	ip, r7
  4114c6:	dd1a      	ble.n	4114fe <arm_convolve_1x1_s8_fast+0xc2>
  4114c8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  4114ca:	f8cd 9018 	str.w	r9, [sp, #24]
  4114ce:	fb07 3605 	mla	r6, r7, r5, r3
  4114d2:	462b      	mov	r3, r5
  4114d4:	46b1      	mov	r9, r6
  4114d6:	4645      	mov	r5, r8
  4114d8:	4666      	mov	r6, ip
  4114da:	4698      	mov	r8, r3
    {
        arm_nn_mat_mul_core_1x_s8(input_ch,
  4114dc:	9806      	ldr	r0, [sp, #24]
  4114de:	464a      	mov	r2, r9
  4114e0:	e9cd b403 	strd	fp, r4, [sp, #12]
  4114e4:	e9cd a001 	strd	sl, r0, [sp, #4]
  4114e8:	2100      	movs	r1, #0
  4114ea:	4640      	mov	r0, r8
  4114ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  4114ee:	9500      	str	r5, [sp, #0]
    for (int i_items = (col_len & ~0x3); i_items < col_len; i_items++)
  4114f0:	3701      	adds	r7, #1
        arm_nn_mat_mul_core_1x_s8(input_ch,
  4114f2:	f001 ffad 	bl	413450 <arm_nn_mat_mul_core_1x_s8>
    for (int i_items = (col_len & ~0x3); i_items < col_len; i_items++)
  4114f6:	42be      	cmp	r6, r7
                                  output_ch,
                                  conv_params,
                                  quant_params,
                                  bias_data,
                                  output_data);
        output_data += output_ch;
  4114f8:	442c      	add	r4, r5
    for (int i_items = (col_len & ~0x3); i_items < col_len; i_items++)
  4114fa:	44c1      	add	r9, r8
  4114fc:	d1ee      	bne.n	4114dc <arm_convolve_1x1_s8_fast+0xa0>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
  4114fe:	2000      	movs	r0, #0
}
  411500:	b009      	add	sp, #36	@ 0x24
  411502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ARM_CMSIS_NN_ARG_ERROR;
  411506:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  41150a:	e7f9      	b.n	411500 <arm_convolve_1x1_s8_fast+0xc4>

0041150c <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
  41150c:	2000      	movs	r0, #0
  41150e:	4770      	bx	lr

00411510 <arm_convolve_s16>:
                                     const q7_t *filter_data,
                                     const cmsis_nn_dims *bias_dims,
                                     const int64_t *bias_data,
                                     const cmsis_nn_dims *output_dims,
                                     q15_t *output_data)
{
  411510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411514:	b0bb      	sub	sp, #236	@ 0xec
  411516:	9c49      	ldr	r4, [sp, #292]	@ 0x124
  411518:	9845      	ldr	r0, [sp, #276]	@ 0x114
    const int32_t input_x = input_dims->w;
    const int32_t input_y = input_dims->h;
    const int32_t input_ch = input_dims->c;
    const int32_t kernel_x = filter_dims->w;
    const int32_t kernel_y = filter_dims->h;
    const int32_t output_x = output_dims->w;
  41151a:	68a5      	ldr	r5, [r4, #8]
    const int32_t output_y = output_dims->h;
  41151c:	6866      	ldr	r6, [r4, #4]
    const int32_t output_x = output_dims->w;
  41151e:	950b      	str	r5, [sp, #44]	@ 0x2c
{
  411520:	461d      	mov	r5, r3
    const int32_t output_ch = output_dims->c;
  411522:	f8d4 800c 	ldr.w	r8, [r4, #12]
    const int32_t input_batches = input_dims->n;
  411526:	682c      	ldr	r4, [r5, #0]
{
  411528:	460b      	mov	r3, r1
    const int32_t out_activation_min = conv_params->activation.min;
    const int32_t out_activation_max = conv_params->activation.max;
    int32_t *output_mult = quant_params->multiplier;
    int32_t *output_shift = quant_params->shift;

    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  41152a:	2c00      	cmp	r4, #0
{
  41152c:	4611      	mov	r1, r2
    const int32_t input_y = input_dims->h;
  41152e:	e9d5 2701 	ldrd	r2, r7, [r5, #4]
    const int32_t input_ch = input_dims->c;
  411532:	f8d5 b00c 	ldr.w	fp, [r5, #12]
    const int32_t output_y = output_dims->h;
  411536:	9613      	str	r6, [sp, #76]	@ 0x4c
    const int32_t input_y = input_dims->h;
  411538:	9217      	str	r2, [sp, #92]	@ 0x5c
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  41153a:	f340 818f 	ble.w	41185c <arm_convolve_s16+0x34c>
                    output_data[i_out_ch + (i_out_y * output_x + i_out_x) * output_ch] = (int16_t)conv_out;
                }
            }
        }
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
  41153e:	fb02 f207 	mul.w	r2, r2, r7
  411542:	fb0b f202 	mul.w	r2, fp, r2
  411546:	970d      	str	r7, [sp, #52]	@ 0x34
  411548:	0057      	lsls	r7, r2, #1
        output_data += (output_x * output_y * output_ch);
  41154a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  41154c:	f1b8 0f00 	cmp.w	r8, #0
  411550:	fb06 f202 	mul.w	r2, r6, r2
  411554:	fb08 f202 	mul.w	r2, r8, r2
  411558:	ea4f 0542 	mov.w	r5, r2, lsl #1
  41155c:	f340 817e 	ble.w	41185c <arm_convolve_s16+0x34c>
  411560:	9e46      	ldr	r6, [sp, #280]	@ 0x118
    const int32_t kernel_x = filter_dims->w;
  411562:	6882      	ldr	r2, [r0, #8]
  411564:	3e01      	subs	r6, #1
  411566:	9602      	str	r6, [sp, #8]
    const int32_t kernel_y = filter_dims->h;
  411568:	6846      	ldr	r6, [r0, #4]
    const int32_t dilation_x = conv_params->dilation.w;
  41156a:	6998      	ldr	r0, [r3, #24]
    const int32_t kernel_x = filter_dims->w;
  41156c:	9212      	str	r2, [sp, #72]	@ 0x48
    const int32_t dilation_x = conv_params->dilation.w;
  41156e:	900e      	str	r0, [sp, #56]	@ 0x38
  411570:	4610      	mov	r0, r2
  411572:	fb02 f206 	mul.w	r2, r2, r6
    const int32_t kernel_y = filter_dims->h;
  411576:	9618      	str	r6, [sp, #96]	@ 0x60
  411578:	fb0b f602 	mul.w	r6, fp, r2
  41157c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  41157e:	9625      	str	r6, [sp, #148]	@ 0x94
  411580:	fb08 f202 	mul.w	r2, r8, r2
  411584:	0052      	lsls	r2, r2, #1
  411586:	9224      	str	r2, [sp, #144]	@ 0x90
  411588:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  41158a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  41158c:	fb0b f202 	mul.w	r2, fp, r2
  411590:	fb0b fa06 	mul.w	sl, fp, r6
    const int32_t dilation_y = conv_params->dilation.h;
  411594:	69de      	ldr	r6, [r3, #28]
    const int32_t pad_y = conv_params->padding.h;
  411596:	f8d3 e014 	ldr.w	lr, [r3, #20]
  41159a:	fb06 f202 	mul.w	r2, r6, r2
  41159e:	9209      	str	r2, [sp, #36]	@ 0x24
    int32_t *output_shift = quant_params->shift;
  4115a0:	e9d1 2100 	ldrd	r2, r1, [r1]
  4115a4:	911e      	str	r1, [sp, #120]	@ 0x78
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  4115a6:	2100      	movs	r1, #0
  4115a8:	f1a2 0c04 	sub.w	ip, r2, #4
  4115ac:	fb00 f20b 	mul.w	r2, r0, fp
  4115b0:	9208      	str	r2, [sp, #32]
    const int32_t pad_x = conv_params->padding.w;
  4115b2:	691a      	ldr	r2, [r3, #16]
    const int32_t dilation_y = conv_params->dilation.h;
  4115b4:	9614      	str	r6, [sp, #80]	@ 0x50
    const int32_t pad_x = conv_params->padding.w;
  4115b6:	9219      	str	r2, [sp, #100]	@ 0x64
    const int32_t stride_x = conv_params->stride.w;
  4115b8:	689a      	ldr	r2, [r3, #8]
  4115ba:	ea4f 094a 	mov.w	r9, sl, lsl #1
  4115be:	921a      	str	r2, [sp, #104]	@ 0x68
    const int32_t stride_y = conv_params->stride.h;
  4115c0:	68da      	ldr	r2, [r3, #12]
  4115c2:	4628      	mov	r0, r5
  4115c4:	921b      	str	r2, [sp, #108]	@ 0x6c
    const int32_t out_activation_min = conv_params->activation.min;
  4115c6:	6a1a      	ldr	r2, [r3, #32]
    const int32_t out_activation_max = conv_params->activation.max;
  4115c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    const int32_t out_activation_min = conv_params->activation.min;
  4115ca:	921c      	str	r2, [sp, #112]	@ 0x70
    const int32_t out_activation_max = conv_params->activation.max;
  4115cc:	931d      	str	r3, [sp, #116]	@ 0x74
  4115ce:	ea4f 0348 	mov.w	r3, r8, lsl #1
  4115d2:	9323      	str	r3, [sp, #140]	@ 0x8c
  4115d4:	f1ce 0300 	rsb	r3, lr, #0
  4115d8:	9329      	str	r3, [sp, #164]	@ 0xa4
  4115da:	ea4f 034b 	mov.w	r3, fp, lsl #1
  4115de:	4645      	mov	r5, r8
  4115e0:	461e      	mov	r6, r3
  4115e2:	46c8      	mov	r8, r9
  4115e4:	460b      	mov	r3, r1
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
  4115e6:	2100      	movs	r1, #0
  4115e8:	46d1      	mov	r9, sl
  4115ea:	e9cd 702b 	strd	r7, r0, [sp, #172]	@ 0xac
  4115ee:	46c2      	mov	sl, r8
  4115f0:	4670      	mov	r0, lr
  4115f2:	9a44      	ldr	r2, [sp, #272]	@ 0x110
  4115f4:	9111      	str	r1, [sp, #68]	@ 0x44
  4115f6:	18b2      	adds	r2, r6, r2
  4115f8:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
  4115fc:	920a      	str	r2, [sp, #40]	@ 0x28
  4115fe:	942d      	str	r4, [sp, #180]	@ 0xb4
  411600:	932e      	str	r3, [sp, #184]	@ 0xb8
            const q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[i_out_ch]);
  411602:	9a16      	ldr	r2, [sp, #88]	@ 0x58
  411604:	f852 3f04 	ldr.w	r3, [r2, #4]!
  411608:	9216      	str	r2, [sp, #88]	@ 0x58
  41160a:	4a99      	ldr	r2, [pc, #612]	@ (411870 <arm_convolve_s16+0x360>)
  41160c:	4293      	cmp	r3, r2
  41160e:	bfce      	itee	gt
  411610:	f647 73ff 	movwgt	r3, #32767	@ 0x7fff
  411614:	f503 4300 	addle.w	r3, r3, #32768	@ 0x8000
  411618:	141b      	asrle	r3, r3, #16
  41161a:	930c      	str	r3, [sp, #48]	@ 0x30
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
  41161c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  41161e:	2b00      	cmp	r3, #0
  411620:	f340 8103 	ble.w	41182a <arm_convolve_s16+0x31a>
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  411624:	9a19      	ldr	r2, [sp, #100]	@ 0x64
  411626:	4253      	negs	r3, r2
  411628:	9322      	str	r3, [sp, #136]	@ 0x88
  41162a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41162c:	2b00      	cmp	r3, #0
  41162e:	f340 80fc 	ble.w	41182a <arm_convolve_s16+0x31a>
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
  411632:	2300      	movs	r3, #0
  411634:	9315      	str	r3, [sp, #84]	@ 0x54
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
  411636:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
    const q63_t new_val = val * reduced_multiplier;
  411638:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
  41163a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  41163e:	e9cd 512f 	strd	r5, r1, [sp, #188]	@ 0xbc
  411642:	f1c3 030e 	rsb	r3, r3, #14
  411646:	931f      	str	r3, [sp, #124]	@ 0x7c
  411648:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  41164a:	e9cd c631 	strd	ip, r6, [sp, #196]	@ 0xc4
  41164e:	18c3      	adds	r3, r0, r3
  411650:	1e5c      	subs	r4, r3, #1
  411652:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
  411654:	f8dd 80a4 	ldr.w	r8, [sp, #164]	@ 0xa4
  411658:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  41165c:	9310      	str	r3, [sp, #64]	@ 0x40
  41165e:	9b48      	ldr	r3, [sp, #288]	@ 0x120
    const q63_t new_val = val * reduced_multiplier;
  411660:	9727      	str	r7, [sp, #156]	@ 0x9c
  411662:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  411666:	9326      	str	r3, [sp, #152]	@ 0x98
  411668:	17fb      	asrs	r3, r7, #31
  41166a:	932a      	str	r3, [sp, #168]	@ 0xa8
  41166c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  41166e:	18d3      	adds	r3, r2, r3
  411670:	9328      	str	r3, [sp, #160]	@ 0xa0
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  411672:	2100      	movs	r1, #0
                    const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  411674:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  411676:	9a14      	ldr	r2, [sp, #80]	@ 0x50
  411678:	4423      	add	r3, r4
  41167a:	fb93 f3f2 	sdiv	r3, r3, r2
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  41167e:	910f      	str	r1, [sp, #60]	@ 0x3c
  411680:	9928      	ldr	r1, [sp, #160]	@ 0xa0
                    const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
  411682:	fb94 f5f2 	sdiv	r5, r4, r2
  411686:	1e4f      	subs	r7, r1, #1
                    const int32_t ker_y_end = MIN(kernel_y, end_min_y);
  411688:	9918      	ldr	r1, [sp, #96]	@ 0x60
                    const int32_t ker_y_start = MAX(0, start_y_max);
  41168a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
                    const int32_t ker_y_end = MIN(kernel_y, end_min_y);
  41168e:	428b      	cmp	r3, r1
  411690:	bfa8      	it	ge
  411692:	460b      	movge	r3, r1
  411694:	9307      	str	r3, [sp, #28]
  411696:	fb02 8305 	mla	r3, r2, r5, r8
  41169a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  41169c:	9e22      	ldr	r6, [sp, #136]	@ 0x88
  41169e:	fb02 f303 	mul.w	r3, r2, r3
  4116a2:	9321      	str	r3, [sp, #132]	@ 0x84
  4116a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  4116a6:	e9cd 0833 	strd	r0, r8, [sp, #204]	@ 0xcc
  4116aa:	fb03 f305 	mul.w	r3, r3, r5
  4116ae:	9320      	str	r3, [sp, #128]	@ 0x80
  4116b0:	4633      	mov	r3, r6
  4116b2:	462e      	mov	r6, r5
  4116b4:	461d      	mov	r5, r3
  4116b6:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
  4116ba:	9435      	str	r4, [sp, #212]	@ 0xd4
                    const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  4116bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  4116be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  4116c0:	eb03 0807 	add.w	r8, r3, r7
  4116c4:	fb98 f8f2 	sdiv	r8, r8, r2
                    const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
  4116c8:	fb97 fef2 	sdiv	lr, r7, r2
                    const int32_t ker_x_end = MIN(kernel_x, end_min_x);
  4116cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
                    const int32_t ker_x_start = MAX(0, start_x_max);
  4116ce:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
                    const int32_t ker_x_end = MIN(kernel_x, end_min_x);
  4116d2:	4598      	cmp	r8, r3
  4116d4:	bfa8      	it	ge
  4116d6:	4698      	movge	r8, r3
                    for (int32_t i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
  4116d8:	9b07      	ldr	r3, [sp, #28]
  4116da:	429e      	cmp	r6, r3
  4116dc:	f280 80c2 	bge.w	411864 <arm_convolve_s16+0x354>
  4116e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
  4116e2:	9911      	ldr	r1, [sp, #68]	@ 0x44
  4116e4:	18eb      	adds	r3, r5, r3
  4116e6:	fb02 330e 	mla	r3, r2, lr, r3
  4116ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
  4116ec:	fb0b f303 	mul.w	r3, fp, r3
  4116f0:	4472      	add	r2, lr
  4116f2:	fb0b 1202 	mla	r2, fp, r2, r1
  4116f6:	e9cd 6536 	strd	r6, r5, [sp, #216]	@ 0xd8
  4116fa:	4614      	mov	r4, r2
                    int64_t conv_out_acc = 0;
  4116fc:	2000      	movs	r0, #0
  4116fe:	2100      	movs	r1, #0
  411700:	4635      	mov	r5, r6
  411702:	461a      	mov	r2, r3
  411704:	9738      	str	r7, [sp, #224]	@ 0xe0
  411706:	f8cd c0e4 	str.w	ip, [sp, #228]	@ 0xe4
                        for (int32_t i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
  41170a:	45c6      	cmp	lr, r8
  41170c:	da33      	bge.n	411776 <arm_convolve_s16+0x266>
  41170e:	4623      	mov	r3, r4
  411710:	4694      	mov	ip, r2
  411712:	4676      	mov	r6, lr
  411714:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  411716:	e9cd e503 	strd	lr, r5, [sp, #12]
  41171a:	e9cd 4205 	strd	r4, r2, [sp, #20]
  41171e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
                            for (int32_t i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
  411722:	f1bb 0f00 	cmp.w	fp, #0
  411726:	dd1c      	ble.n	411762 <arm_convolve_s16+0x252>
  411728:	9a44      	ldr	r2, [sp, #272]	@ 0x110
  41172a:	f8cd c000 	str.w	ip, [sp]
  41172e:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  411732:	eba7 0e02 	sub.w	lr, r7, r2
  411736:	f1ae 0e02 	sub.w	lr, lr, #2
  41173a:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
  41173e:	f10e 0e01 	add.w	lr, lr, #1
  411742:	f04e e001 	dls	lr, lr
  411746:	469c      	mov	ip, r3
  411748:	9c02      	ldr	r4, [sp, #8]
  41174a:	441c      	add	r4, r3
                                conv_out_acc += input_data[(in_row * input_x + in_col) * input_ch + i_input_ch] *
  41174c:	f932 3b02 	ldrsh.w	r3, [r2], #2
  411750:	f914 5f01 	ldrsb.w	r5, [r4, #1]!
  411754:	fbc3 0185 	smlalbb	r0, r1, r3, r5
                            for (int32_t i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
  411758:	f00f c009 	le	lr, 41174c <arm_convolve_s16+0x23c>
  41175c:	4663      	mov	r3, ip
  41175e:	f8dd c000 	ldr.w	ip, [sp]
                        for (int32_t i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
  411762:	3601      	adds	r6, #1
  411764:	45b0      	cmp	r8, r6
  411766:	44cc      	add	ip, r9
  411768:	445b      	add	r3, fp
  41176a:	4457      	add	r7, sl
  41176c:	d1d9      	bne.n	411722 <arm_convolve_s16+0x212>
  41176e:	e9dd e503 	ldrd	lr, r5, [sp, #12]
  411772:	e9dd 4205 	ldrd	r4, r2, [sp, #20]
                    for (int32_t i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
  411776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  411778:	3501      	adds	r5, #1
  41177a:	441a      	add	r2, r3
  41177c:	9b08      	ldr	r3, [sp, #32]
  41177e:	441c      	add	r4, r3
  411780:	9b07      	ldr	r3, [sp, #28]
  411782:	42ab      	cmp	r3, r5
  411784:	d1c1      	bne.n	41170a <arm_convolve_s16+0x1fa>
  411786:	e9dd 6536 	ldrd	r6, r5, [sp, #216]	@ 0xd8
  41178a:	e9dd 7c38 	ldrd	r7, ip, [sp, #224]	@ 0xe0
  41178e:	e9cd 0100 	strd	r0, r1, [sp]
                    if (bias_data)
  411792:	9b48      	ldr	r3, [sp, #288]	@ 0x120
  411794:	b14b      	cbz	r3, 4117aa <arm_convolve_s16+0x29a>
                        conv_out_acc += bias_data[i_out_ch];
  411796:	9a26      	ldr	r2, [sp, #152]	@ 0x98
  411798:	9900      	ldr	r1, [sp, #0]
  41179a:	6813      	ldr	r3, [r2, #0]
  41179c:	6852      	ldr	r2, [r2, #4]
  41179e:	18cb      	adds	r3, r1, r3
  4117a0:	9901      	ldr	r1, [sp, #4]
  4117a2:	eb42 0201 	adc.w	r2, r2, r1
  4117a6:	e9cd 3200 	strd	r3, r2, [sp]
  4117aa:	e9dd 0100 	ldrd	r0, r1, [sp]
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  4117ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  4117b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
  4117b2:	3301      	adds	r3, #1
  4117b4:	930f      	str	r3, [sp, #60]	@ 0x3c
  4117b6:	4603      	mov	r3, r0
  4117b8:	4415      	add	r5, r2
  4117ba:	1abf      	subs	r7, r7, r2
  4117bc:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
  4117be:	fb02 f303 	mul.w	r3, r2, r3
  4117c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  4117c4:	fb02 3101 	mla	r1, r2, r1, r3
  4117c8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
  4117ca:	9b00      	ldr	r3, [sp, #0]
  4117cc:	fba3 0402 	umull	r0, r4, r3, r2
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
  4117d0:	4602      	mov	r2, r0
  4117d2:	190b      	adds	r3, r1, r4
  4117d4:	991f      	ldr	r1, [sp, #124]	@ 0x7c
  4117d6:	ea52 132d 	orrs.w	r3, r2, sp, asr #4
    result = (result + 1) >> 1;             // Last shift position and insert round
  4117da:	1c53      	adds	r3, r2, #1
                    conv_out = MAX(conv_out, out_activation_min);
  4117dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
  4117de:	105b      	asrs	r3, r3, #1
  4117e0:	4293      	cmp	r3, r2
  4117e2:	bfb8      	it	lt
  4117e4:	4613      	movlt	r3, r2
                    conv_out = MIN(conv_out, out_activation_max);
  4117e6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
  4117e8:	4293      	cmp	r3, r2
  4117ea:	bfa8      	it	ge
  4117ec:	4613      	movge	r3, r2
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  4117ee:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
                    output_data[i_out_ch + (i_out_y * output_x + i_out_x) * output_ch] = (int16_t)conv_out;
  4117f0:	f8ac 3000 	strh.w	r3, [ip]
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  4117f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  4117f6:	4494      	add	ip, r2
  4117f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  4117fa:	429a      	cmp	r2, r3
  4117fc:	f47f af5e 	bne.w	4116bc <arm_convolve_s16+0x1ac>
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
  411800:	e9dd 0833 	ldrd	r0, r8, [sp, #204]	@ 0xcc
  411804:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
  411806:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
  411808:	9924      	ldr	r1, [sp, #144]	@ 0x90
  41180a:	4490      	add	r8, r2
  41180c:	1aa4      	subs	r4, r4, r2
  41180e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
  411810:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  411812:	440a      	add	r2, r1
  411814:	9210      	str	r2, [sp, #64]	@ 0x40
  411816:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
  411818:	3301      	adds	r3, #1
  41181a:	429a      	cmp	r2, r3
  41181c:	9315      	str	r3, [sp, #84]	@ 0x54
  41181e:	f47f af28 	bne.w	411672 <arm_convolve_s16+0x162>
  411822:	e9dd 512f 	ldrd	r5, r1, [sp, #188]	@ 0xbc
  411826:	e9dd c631 	ldrd	ip, r6, [sp, #196]	@ 0xc4
        for (int32_t i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  41182a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  41182c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
  41182e:	3101      	adds	r1, #1
  411830:	4413      	add	r3, r2
  411832:	428d      	cmp	r5, r1
  411834:	9311      	str	r3, [sp, #68]	@ 0x44
  411836:	f47f aee4 	bne.w	411602 <arm_convolve_s16+0xf2>
        input_data += (input_x * input_y * input_ch);
  41183a:	9a44      	ldr	r2, [sp, #272]	@ 0x110
  41183c:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
  41183e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
  411840:	443a      	add	r2, r7
  411842:	4686      	mov	lr, r0
  411844:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
  411846:	982c      	ldr	r0, [sp, #176]	@ 0xb0
  411848:	9244      	str	r2, [sp, #272]	@ 0x110
        output_data += (output_x * output_y * output_ch);
  41184a:	9a4a      	ldr	r2, [sp, #296]	@ 0x128
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  41184c:	3301      	adds	r3, #1
        output_data += (output_x * output_y * output_ch);
  41184e:	4402      	add	r2, r0
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  411850:	429c      	cmp	r4, r3
  411852:	46d0      	mov	r8, sl
        output_data += (output_x * output_y * output_ch);
  411854:	924a      	str	r2, [sp, #296]	@ 0x128
  411856:	46ca      	mov	sl, r9
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  411858:	f47f aec5 	bne.w	4115e6 <arm_convolve_s16+0xd6>
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
}
  41185c:	2000      	movs	r0, #0
  41185e:	b03b      	add	sp, #236	@ 0xec
  411860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    int64_t conv_out_acc = 0;
  411864:	2200      	movs	r2, #0
  411866:	2300      	movs	r3, #0
  411868:	e9cd 2300 	strd	r2, r3, [sp]
  41186c:	e791      	b.n	411792 <arm_convolve_s16+0x282>
  41186e:	bf00      	nop
  411870:	7ffeffff 	.word	0x7ffeffff

00411874 <arm_convolve_s16_get_buffer_size>:
int32_t arm_convolve_s16_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
    (void)input_dims;
    (void)filter_dims;
    return 0;
}
  411874:	2000      	movs	r0, #0
  411876:	4770      	bx	lr

00411878 <arm_convolve_s8>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
  411878:	469c      	mov	ip, r3
  41187a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41187e:	b0b5      	sub	sp, #212	@ 0xd4
  411880:	9c3f      	ldr	r4, [sp, #252]	@ 0xfc
    (void)bias_dims;

    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
  411882:	6803      	ldr	r3, [r0, #0]
{
  411884:	9228      	str	r2, [sp, #160]	@ 0xa0
  411886:	9f43      	ldr	r7, [sp, #268]	@ 0x10c
}

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_MVEI)
    int32_t col_length = input_dims->c * filter_dims->w * filter_dims->h;
  411888:	f8dc 200c 	ldr.w	r2, [ip, #12]
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
  41188c:	931e      	str	r3, [sp, #120]	@ 0x78
{
  41188e:	9120      	str	r1, [sp, #128]	@ 0x80
    int32_t col_length = input_dims->c * filter_dims->w * filter_dims->h;
  411890:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
  411894:	2b00      	cmp	r3, #0
  411896:	f000 817c 	beq.w	411b92 <arm_convolve_s8+0x31a>
    const uint16_t output_y = output_dims->h;
  41189a:	e9d7 1001 	ldrd	r1, r0, [r7, #4]
    const uint16_t output_ch = output_dims->c;
  41189e:	68fb      	ldr	r3, [r7, #12]
    const uint16_t pad_x = conv_params->padding.w;
  4118a0:	9f20      	ldr	r7, [sp, #128]	@ 0x80
    const int32_t input_batches = input_dims->n;
  4118a2:	f8dc e000 	ldr.w	lr, [ip]
    const uint16_t pad_x = conv_params->padding.w;
  4118a6:	693c      	ldr	r4, [r7, #16]
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  4118a8:	f1be 0f00 	cmp.w	lr, #0
    const uint16_t pad_x = conv_params->padding.w;
  4118ac:	942d      	str	r4, [sp, #180]	@ 0xb4
    const uint16_t pad_y = conv_params->padding.h;
  4118ae:	697c      	ldr	r4, [r7, #20]
    const uint16_t input_y = input_dims->h;
  4118b0:	e9dc c801 	ldrd	ip, r8, [ip, #4]
    const uint16_t pad_y = conv_params->padding.h;
  4118b4:	942e      	str	r4, [sp, #184]	@ 0xb8
    const uint16_t stride_y = conv_params->stride.h;
  4118b6:	e9d7 a402 	ldrd	sl, r4, [r7, #8]
  4118ba:	942f      	str	r4, [sp, #188]	@ 0xbc
    const int32_t input_offset = conv_params->input_offset;
  4118bc:	683c      	ldr	r4, [r7, #0]
  4118be:	941f      	str	r4, [sp, #124]	@ 0x7c
    const int32_t out_offset = conv_params->output_offset;
  4118c0:	687c      	ldr	r4, [r7, #4]
  4118c2:	9423      	str	r4, [sp, #140]	@ 0x8c
    const int32_t out_activation_min = conv_params->activation.min;
  4118c4:	6a3c      	ldr	r4, [r7, #32]
  4118c6:	9424      	str	r4, [sp, #144]	@ 0x90
    const int32_t out_activation_max = conv_params->activation.max;
  4118c8:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    int32_t *output_mult = quant_params->multiplier;
  4118ca:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
    const int32_t out_activation_max = conv_params->activation.max;
  4118cc:	9425      	str	r4, [sp, #148]	@ 0x94
    int32_t *output_mult = quant_params->multiplier;
  4118ce:	683c      	ldr	r4, [r7, #0]
  4118d0:	9426      	str	r4, [sp, #152]	@ 0x98
    int32_t *output_shift = quant_params->shift;
  4118d2:	687c      	ldr	r4, [r7, #4]
  4118d4:	9427      	str	r4, [sp, #156]	@ 0x9c
    const uint16_t output_ch = output_dims->c;
  4118d6:	b29c      	uxth	r4, r3
  4118d8:	9422      	str	r4, [sp, #136]	@ 0x88
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  4118da:	f340 8104 	ble.w	411ae6 <arm_convolve_s8+0x26e>
  4118de:	fa1f fb86 	uxth.w	fp, r6
  4118e2:	fa1f f68c 	uxth.w	r6, ip
  4118e6:	4634      	mov	r4, r6
  4118e8:	fa1f f982 	uxth.w	r9, r2
  4118ec:	b2ad      	uxth	r5, r5
  4118ee:	b29a      	uxth	r2, r3
  4118f0:	fa1f f38a 	uxth.w	r3, sl
  4118f4:	9319      	str	r3, [sp, #100]	@ 0x64
        const int32_t num_elem = kernel_x * kernel_y * input_ch;
  4118f6:	fb05 f30b 	mul.w	r3, r5, fp
  4118fa:	950b      	str	r5, [sp, #44]	@ 0x2c
  4118fc:	fb09 f503 	mul.w	r5, r9, r3
        input_data += (input_x * input_y * input_ch);
  411900:	4623      	mov	r3, r4
  411902:	fa1f f788 	uxth.w	r7, r8
  411906:	fb07 f303 	mul.w	r3, r7, r3
  41190a:	b289      	uxth	r1, r1
  41190c:	b280      	uxth	r0, r0
  41190e:	fb09 f403 	mul.w	r4, r9, r3
        output_data += (output_x * output_y * output_ch);
  411912:	fb00 f301 	mul.w	r3, r0, r1
  411916:	922a      	str	r2, [sp, #168]	@ 0xa8
  411918:	fb02 f203 	mul.w	r2, r2, r3
  41191c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
  41191e:	9610      	str	r6, [sp, #64]	@ 0x40
  411920:	fb03 f309 	mul.w	r3, r3, r9
  411924:	931a      	str	r3, [sp, #104]	@ 0x68
  411926:	fb09 f30b 	mul.w	r3, r9, fp
  41192a:	930f      	str	r3, [sp, #60]	@ 0x3c
  41192c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  41192e:	2600      	movs	r6, #0
  411930:	425b      	negs	r3, r3
                            memset(im2col_buf, (int8_t)-input_offset, sizeof(q7_t) * input_ch);
  411932:	fa4f fa83 	sxtb.w	sl, r3
        input_data += (input_x * input_y * input_ch);
  411936:	9431      	str	r4, [sp, #196]	@ 0xc4
            out = arm_nn_mat_mult_s8(filter_data,
  411938:	46d0      	mov	r8, sl
  41193a:	4674      	mov	r4, lr
  41193c:	b2ab      	uxth	r3, r5
  41193e:	912b      	str	r1, [sp, #172]	@ 0xac
  411940:	9018      	str	r0, [sp, #96]	@ 0x60
  411942:	970e      	str	r7, [sp, #56]	@ 0x38
        const int32_t num_elem = kernel_x * kernel_y * input_ch;
  411944:	9529      	str	r5, [sp, #164]	@ 0xa4
        output_data += (output_x * output_y * output_ch);
  411946:	9230      	str	r2, [sp, #192]	@ 0xc0
            out = arm_nn_mat_mult_s8(filter_data,
  411948:	9321      	str	r3, [sp, #132]	@ 0x84
  41194a:	962c      	str	r6, [sp, #176]	@ 0xb0
        const int32_t dilation_x = conv_params->dilation.w;
  41194c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
        const int32_t dilation_y = conv_params->dilation.h;
  41194e:	e9d3 7206 	ldrd	r7, r2, [r3, #24]
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
  411952:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
        const int32_t dilation_y = conv_params->dilation.h;
  411954:	920c      	str	r2, [sp, #48]	@ 0x30
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
  411956:	2b00      	cmp	r3, #0
  411958:	f000 80b7 	beq.w	411aca <arm_convolve_s8+0x252>
  41195c:	2100      	movs	r1, #0
  41195e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  411960:	46ba      	mov	sl, r7
  411962:	fb09 f303 	mul.w	r3, r9, r3
  411966:	fb02 f303 	mul.w	r3, r2, r3
  41196a:	460d      	mov	r5, r1
  41196c:	930d      	str	r3, [sp, #52]	@ 0x34
  41196e:	465e      	mov	r6, fp
  411970:	fb09 f307 	mul.w	r3, r9, r7
  411974:	460f      	mov	r7, r1
        q7_t *out = output_data;
  411976:	9844      	ldr	r0, [sp, #272]	@ 0x110
        q7_t *im2col_buf = (q7_t *)buffer_a;
  411978:	f8dd e078 	ldr.w	lr, [sp, #120]	@ 0x78
  41197c:	931b      	str	r3, [sp, #108]	@ 0x6c
  41197e:	9432      	str	r4, [sp, #200]	@ 0xc8
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
  411980:	9b18      	ldr	r3, [sp, #96]	@ 0x60
  411982:	2b00      	cmp	r3, #0
  411984:	d07e      	beq.n	411a84 <arm_convolve_s8+0x20c>
  411986:	f04f 0b00 	mov.w	fp, #0
                const int32_t base_idx_y = stride_y * i_out_y - pad_y;
  41198a:	f8bd 30bc 	ldrh.w	r3, [sp, #188]	@ 0xbc
  41198e:	f8bd 20b8 	ldrh.w	r2, [sp, #184]	@ 0xb8
  411992:	fb01 f303 	mul.w	r3, r1, r3
  411996:	1a9b      	subs	r3, r3, r2
  411998:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  41199a:	931c      	str	r3, [sp, #112]	@ 0x70
  41199c:	fb03 f302 	mul.w	r3, r3, r2
  4119a0:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	@ 0xb4
  4119a4:	9c3e      	ldr	r4, [sp, #248]	@ 0xf8
  4119a6:	1a9b      	subs	r3, r3, r2
  4119a8:	fb09 4403 	mla	r4, r9, r3, r4
  4119ac:	4253      	negs	r3, r2
  4119ae:	9314      	str	r3, [sp, #80]	@ 0x50
  4119b0:	901d      	str	r0, [sp, #116]	@ 0x74
  4119b2:	9133      	str	r1, [sp, #204]	@ 0xcc
  4119b4:	9415      	str	r4, [sp, #84]	@ 0x54
                for (int32_t i_ker_y = 0; i_ker_y < kernel_y; i_ker_y++)
  4119b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  4119b8:	2b00      	cmp	r3, #0
  4119ba:	d051      	beq.n	411a60 <arm_convolve_s8+0x1e8>
  4119bc:	2200      	movs	r2, #0
  4119be:	4638      	mov	r0, r7
  4119c0:	f8dd c054 	ldr.w	ip, [sp, #84]	@ 0x54
  4119c4:	e9cd 5b16 	strd	r5, fp, [sp, #88]	@ 0x58
  4119c8:	991c      	ldr	r1, [sp, #112]	@ 0x70
  4119ca:	f8dd b06c 	ldr.w	fp, [sp, #108]	@ 0x6c
  4119ce:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
                    for (int32_t i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
  4119d2:	2e00      	cmp	r6, #0
  4119d4:	d037      	beq.n	411a46 <arm_convolve_s8+0x1ce>
  4119d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  4119d8:	428b      	cmp	r3, r1
  4119da:	f240 8088 	bls.w	411aee <arm_convolve_s8+0x276>
  4119de:	46cc      	mov	ip, r9
  4119e0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
  4119e2:	4673      	mov	r3, lr
  4119e4:	46b9      	mov	r9, r7
  4119e6:	2500      	movs	r5, #0
  4119e8:	4667      	mov	r7, ip
  4119ea:	e9cd 2e11 	strd	r2, lr, [sp, #68]	@ 0x44
  4119ee:	9c14      	ldr	r4, [sp, #80]	@ 0x50
  4119f0:	9113      	str	r1, [sp, #76]	@ 0x4c
  4119f2:	e012      	b.n	411a1a <arm_convolve_s8+0x1a2>
                        if (k_y < 0 || k_y >= input_y || k_x < 0 || k_x >= input_x)
  4119f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  4119f6:	4294      	cmp	r4, r2
  4119f8:	da11      	bge.n	411a1e <arm_convolve_s8+0x1a6>
    __asm volatile("   wlstp.8                 lr, %[cnt], 1f             \n"
  4119fa:	4649      	mov	r1, r9
  4119fc:	469c      	mov	ip, r3
  4119fe:	f007 c007 	wlstp.8	lr, r7, 411a0e <arm_convolve_s8+0x196>
  411a02:	ecb1 1e10 	ldc	14, cr1, [r1], #64	@ 0x40
  411a06:	ecac 1e10 	stc	14, cr1, [ip], #64	@ 0x40
  411a0a:	f01f c007 	letp	lr, 411a02 <arm_convolve_s8+0x18a>
                    for (int32_t i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
  411a0e:	3501      	adds	r5, #1
  411a10:	42ae      	cmp	r6, r5
                        im2col_buf += input_ch;
  411a12:	443b      	add	r3, r7
                    for (int32_t i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
  411a14:	4454      	add	r4, sl
  411a16:	44d9      	add	r9, fp
  411a18:	d00f      	beq.n	411a3a <arm_convolve_s8+0x1c2>
                        if (k_y < 0 || k_y >= input_y || k_x < 0 || k_x >= input_x)
  411a1a:	2c00      	cmp	r4, #0
  411a1c:	daea      	bge.n	4119f4 <arm_convolve_s8+0x17c>
                            memset(im2col_buf, (int8_t)-input_offset, sizeof(q7_t) * input_ch);
  411a1e:	4618      	mov	r0, r3
  411a20:	463a      	mov	r2, r7
  411a22:	4641      	mov	r1, r8
  411a24:	f00f f93e 	bl	420ca4 <memset>
  411a28:	4603      	mov	r3, r0
                    for (int32_t i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
  411a2a:	3501      	adds	r5, #1
  411a2c:	42ae      	cmp	r6, r5
                            padded = 1;
  411a2e:	f04f 0001 	mov.w	r0, #1
                        im2col_buf += input_ch;
  411a32:	443b      	add	r3, r7
                    for (int32_t i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
  411a34:	4454      	add	r4, sl
  411a36:	44d9      	add	r9, fp
  411a38:	d1ef      	bne.n	411a1a <arm_convolve_s8+0x1a2>
  411a3a:	e9dd 2e11 	ldrd	r2, lr, [sp, #68]	@ 0x44
  411a3e:	46b9      	mov	r9, r7
                        im2col_buf += input_ch;
  411a40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  411a42:	9913      	ldr	r1, [sp, #76]	@ 0x4c
  411a44:	449e      	add	lr, r3
                for (int32_t i_ker_y = 0; i_ker_y < kernel_y; i_ker_y++)
  411a46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  411a48:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  411a4a:	3201      	adds	r2, #1
  411a4c:	4423      	add	r3, r4
  411a4e:	930a      	str	r3, [sp, #40]	@ 0x28
  411a50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  411a52:	4419      	add	r1, r3
  411a54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  411a56:	4293      	cmp	r3, r2
  411a58:	d1bb      	bne.n	4119d2 <arm_convolve_s8+0x15a>
  411a5a:	e9dd 5b16 	ldrd	r5, fp, [sp, #88]	@ 0x58
  411a5e:	4607      	mov	r7, r0
                buffer_fill_cnt++;
  411a60:	3501      	adds	r5, #1
                if (buffer_fill_cnt == 4 && (padded == 0))
  411a62:	2d04      	cmp	r5, #4
  411a64:	d05e      	beq.n	411b24 <arm_convolve_s8+0x2ac>
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
  411a66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  411a68:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
  411a6a:	f10b 0b01 	add.w	fp, fp, #1
  411a6e:	4413      	add	r3, r2
  411a70:	9315      	str	r3, [sp, #84]	@ 0x54
  411a72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
  411a74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  411a76:	4413      	add	r3, r2
  411a78:	9314      	str	r3, [sp, #80]	@ 0x50
  411a7a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
  411a7c:	459b      	cmp	fp, r3
  411a7e:	d19a      	bne.n	4119b6 <arm_convolve_s8+0x13e>
  411a80:	981d      	ldr	r0, [sp, #116]	@ 0x74
  411a82:	9933      	ldr	r1, [sp, #204]	@ 0xcc
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
  411a84:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
  411a86:	3101      	adds	r1, #1
  411a88:	4299      	cmp	r1, r3
  411a8a:	f6ff af79 	blt.w	411980 <arm_convolve_s8+0x108>
        if (buffer_fill_cnt != 0)
  411a8e:	46b3      	mov	fp, r6
  411a90:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
  411a92:	b1d5      	cbz	r5, 411aca <arm_convolve_s8+0x252>
            out = arm_nn_mat_mult_s8(filter_data,
  411a94:	2200      	movs	r2, #0
  411a96:	9b42      	ldr	r3, [sp, #264]	@ 0x108
  411a98:	9204      	str	r2, [sp, #16]
  411a9a:	9308      	str	r3, [sp, #32]
  411a9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
  411a9e:	f9bd 2094 	ldrsh.w	r2, [sp, #148]	@ 0x94
  411aa2:	9307      	str	r3, [sp, #28]
  411aa4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
  411aa6:	9206      	str	r2, [sp, #24]
  411aa8:	9303      	str	r3, [sp, #12]
  411aaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
  411aac:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	@ 0x90
  411ab0:	9302      	str	r3, [sp, #8]
  411ab2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
  411ab4:	9009      	str	r0, [sp, #36]	@ 0x24
  411ab6:	9301      	str	r3, [sp, #4]
  411ab8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  411aba:	9205      	str	r2, [sp, #20]
  411abc:	9300      	str	r3, [sp, #0]
  411abe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
  411ac0:	991e      	ldr	r1, [sp, #120]	@ 0x78
  411ac2:	9840      	ldr	r0, [sp, #256]	@ 0x100
  411ac4:	b2ab      	uxth	r3, r5
  411ac6:	f001 f915 	bl	412cf4 <arm_nn_mat_mult_s8>
        input_data += (input_x * input_y * input_ch);
  411aca:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
  411acc:	9931      	ldr	r1, [sp, #196]	@ 0xc4
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  411ace:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
        input_data += (input_x * input_y * input_ch);
  411ad0:	440a      	add	r2, r1
  411ad2:	923e      	str	r2, [sp, #248]	@ 0xf8
        output_data += (output_x * output_y * output_ch);
  411ad4:	9930      	ldr	r1, [sp, #192]	@ 0xc0
  411ad6:	9a44      	ldr	r2, [sp, #272]	@ 0x110
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  411ad8:	3301      	adds	r3, #1
        output_data += (output_x * output_y * output_ch);
  411ada:	440a      	add	r2, r1
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  411adc:	429c      	cmp	r4, r3
  411ade:	932c      	str	r3, [sp, #176]	@ 0xb0
        output_data += (output_x * output_y * output_ch);
  411ae0:	9244      	str	r2, [sp, #272]	@ 0x110
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  411ae2:	f47f af33 	bne.w	41194c <arm_convolve_s8+0xd4>
    return ARM_CMSIS_NN_SUCCESS;
  411ae6:	2000      	movs	r0, #0
}
  411ae8:	b035      	add	sp, #212	@ 0xd4
  411aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (int32_t i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
  411aee:	2400      	movs	r4, #0
  411af0:	4615      	mov	r5, r2
  411af2:	4622      	mov	r2, r4
  411af4:	4673      	mov	r3, lr
  411af6:	464c      	mov	r4, r9
  411af8:	4677      	mov	r7, lr
  411afa:	4691      	mov	r9, r2
  411afc:	9111      	str	r1, [sp, #68]	@ 0x44
                            memset(im2col_buf, (int8_t)-input_offset, sizeof(q7_t) * input_ch);
  411afe:	4618      	mov	r0, r3
  411b00:	4622      	mov	r2, r4
  411b02:	4641      	mov	r1, r8
  411b04:	f00f f8ce 	bl	420ca4 <memset>
  411b08:	4603      	mov	r3, r0
                    for (int32_t i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
  411b0a:	f109 0901 	add.w	r9, r9, #1
  411b0e:	454e      	cmp	r6, r9
                        im2col_buf += input_ch;
  411b10:	4423      	add	r3, r4
                    for (int32_t i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
  411b12:	d1f4      	bne.n	411afe <arm_convolve_s8+0x286>
  411b14:	46be      	mov	lr, r7
  411b16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  411b18:	46a1      	mov	r9, r4
  411b1a:	462a      	mov	r2, r5
  411b1c:	2001      	movs	r0, #1
  411b1e:	9911      	ldr	r1, [sp, #68]	@ 0x44
  411b20:	449e      	add	lr, r3
  411b22:	e790      	b.n	411a46 <arm_convolve_s8+0x1ce>
                    out = arm_nn_mat_mul_core_4x_s8(num_elem,
  411b24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
                if (buffer_fill_cnt == 4 && (padded == 0))
  411b26:	b99f      	cbnz	r7, 411b50 <arm_convolve_s8+0x2d8>
                    out = arm_nn_mat_mul_core_4x_s8(num_elem,
  411b28:	9304      	str	r3, [sp, #16]
  411b2a:	9b42      	ldr	r3, [sp, #264]	@ 0x108
  411b2c:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
  411b2e:	9303      	str	r3, [sp, #12]
  411b30:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  411b32:	9929      	ldr	r1, [sp, #164]	@ 0xa4
  411b34:	9302      	str	r3, [sp, #8]
  411b36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
  411b38:	4622      	mov	r2, r4
  411b3a:	9301      	str	r3, [sp, #4]
  411b3c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
  411b3e:	4608      	mov	r0, r1
  411b40:	9300      	str	r3, [sp, #0]
  411b42:	9b40      	ldr	r3, [sp, #256]	@ 0x100
  411b44:	f001 fe54 	bl	4137f0 <arm_nn_mat_mul_core_4x_s8>
                    buffer_fill_cnt = 0;
  411b48:	463d      	mov	r5, r7
                    im2col_buf = (q7_t *)buffer_a;
  411b4a:	46a6      	mov	lr, r4
                    out = arm_nn_mat_mul_core_4x_s8(num_elem,
  411b4c:	901d      	str	r0, [sp, #116]	@ 0x74
                    im2col_buf = (q7_t *)buffer_a;
  411b4e:	e78a      	b.n	411a66 <arm_convolve_s8+0x1ee>
                    out = arm_nn_mat_mult_s8(filter_data,
  411b50:	2400      	movs	r4, #0
  411b52:	9a42      	ldr	r2, [sp, #264]	@ 0x108
  411b54:	9309      	str	r3, [sp, #36]	@ 0x24
  411b56:	9208      	str	r2, [sp, #32]
  411b58:	9a21      	ldr	r2, [sp, #132]	@ 0x84
  411b5a:	462b      	mov	r3, r5
  411b5c:	9207      	str	r2, [sp, #28]
  411b5e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
  411b60:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
  411b62:	9203      	str	r2, [sp, #12]
  411b64:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
  411b66:	4629      	mov	r1, r5
  411b68:	9202      	str	r2, [sp, #8]
  411b6a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
  411b6c:	9840      	ldr	r0, [sp, #256]	@ 0x100
  411b6e:	9201      	str	r2, [sp, #4]
  411b70:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
  411b72:	9404      	str	r4, [sp, #16]
  411b74:	9200      	str	r2, [sp, #0]
  411b76:	f9bd 2094 	ldrsh.w	r2, [sp, #148]	@ 0x94
                    padded = 0;
  411b7a:	4627      	mov	r7, r4
                    out = arm_nn_mat_mult_s8(filter_data,
  411b7c:	9206      	str	r2, [sp, #24]
  411b7e:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	@ 0x90
  411b82:	9205      	str	r2, [sp, #20]
  411b84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
  411b86:	f001 f8b5 	bl	412cf4 <arm_nn_mat_mult_s8>
                    im2col_buf = (q7_t *)buffer_a;
  411b8a:	46ae      	mov	lr, r5
                    out = arm_nn_mat_mult_s8(filter_data,
  411b8c:	901d      	str	r0, [sp, #116]	@ 0x74
                    buffer_fill_cnt = 0;
  411b8e:	4625      	mov	r5, r4
  411b90:	e769      	b.n	411a66 <arm_convolve_s8+0x1ee>
    int32_t col_length = input_dims->c * filter_dims->w * filter_dims->h;
  411b92:	fb06 f302 	mul.w	r3, r6, r2
  411b96:	fb05 f303 	mul.w	r3, r5, r3
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
  411b9a:	2b00      	cmp	r3, #0
  411b9c:	f77f ae7d 	ble.w	41189a <arm_convolve_s8+0x22>
        return ARM_CMSIS_NN_ARG_ERROR;
  411ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  411ba4:	e7a0      	b.n	411ae8 <arm_convolve_s8+0x270>
  411ba6:	bf00      	nop

00411ba8 <arm_convolve_s8_get_buffer_size>:
    int32_t col_length = input_dims->c * filter_dims->w * filter_dims->h;
  411ba8:	68c0      	ldr	r0, [r0, #12]
  411baa:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
  411bae:	fb02 f000 	mul.w	r0, r2, r0
  411bb2:	fb03 f000 	mul.w	r0, r3, r0
    // Get number of complete int16 lanes(multiple of 8) for given col_length. This is dependent on
    // implementation of  arm_nn_mat_mult_s8
    col_length = (col_length + 7) / 8;
  411bb6:	f100 030e 	add.w	r3, r0, #14
  411bba:	3007      	adds	r0, #7
  411bbc:	bf48      	it	mi
  411bbe:	4618      	movmi	r0, r3
  411bc0:	10c0      	asrs	r0, r0, #3
    // 4 -> number of im2col buffers, 8 -> 8 elements per Q register
    return 4 * col_length * 8 * (int32_t)sizeof(int8_t);
#else
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
#endif
}
  411bc2:	0140      	lsls	r0, r0, #5
  411bc4:	4770      	bx	lr
  411bc6:	bf00      	nop

00411bc8 <arm_convolve_wrapper_s16>:
                                bias_data,
                                output_dims,
                                output_data);
    }
#else
    return arm_convolve_s16(ctx,
  411bc8:	f7ff bca2 	b.w	411510 <arm_convolve_s16>

00411bcc <arm_convolve_wrapper_s16_get_buffer_size>:
        return arm_convolve_fast_s16_get_buffer_size(input_dims, filter_dims);
    }

    return arm_convolve_s16_get_buffer_size(input_dims, filter_dims);
#else
    return arm_convolve_s16_get_buffer_size(input_dims, filter_dims);
  411bcc:	4608      	mov	r0, r1
  411bce:	4611      	mov	r1, r2
  411bd0:	f7ff be50 	b.w	411874 <arm_convolve_s16_get_buffer_size>

00411bd4 <arm_convolve_wrapper_s8>:
                                            const q7_t *filter_data,
                                            const cmsis_nn_dims *bias_dims,
                                            const int32_t *bias_data,
                                            const cmsis_nn_dims *output_dims,
                                            q7_t *output_data)
{
  411bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411bd8:	b083      	sub	sp, #12
  411bda:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  411bdc:	468c      	mov	ip, r1
  411bde:	e9dd 7b0d 	ldrd	r7, fp, [sp, #52]	@ 0x34
  411be2:	e9dd a90f 	ldrd	sl, r9, [sp, #60]	@ 0x3c
  411be6:	e9dd 6511 	ldrd	r6, r5, [sp, #68]	@ 0x44
  411bea:	9400      	str	r4, [sp, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
  411bec:	690c      	ldr	r4, [r1, #16]
{
  411bee:	4680      	mov	r8, r0
  411bf0:	469e      	mov	lr, r3
  411bf2:	9201      	str	r2, [sp, #4]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
  411bf4:	b90c      	cbnz	r4, 411bfa <arm_convolve_wrapper_s8+0x26>
  411bf6:	694c      	ldr	r4, [r1, #20]
  411bf8:	b1fc      	cbz	r4, 411c3a <arm_convolve_wrapper_s8+0x66>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((input_dims->h == 1) && (output_dims->w % 4 == 0) && conv_params->dilation.w == 1 && (filter_dims->h == 1))
  411bfa:	f8de 3004 	ldr.w	r3, [lr, #4]
  411bfe:	2b01      	cmp	r3, #1
  411c00:	d109      	bne.n	411c16 <arm_convolve_wrapper_s8+0x42>
  411c02:	68b3      	ldr	r3, [r6, #8]
  411c04:	079b      	lsls	r3, r3, #30
  411c06:	d106      	bne.n	411c16 <arm_convolve_wrapper_s8+0x42>
  411c08:	f8dc 3018 	ldr.w	r3, [ip, #24]
  411c0c:	2b01      	cmp	r3, #1
  411c0e:	d102      	bne.n	411c16 <arm_convolve_wrapper_s8+0x42>
  411c10:	687b      	ldr	r3, [r7, #4]
  411c12:	2b01      	cmp	r3, #1
  411c14:	d030      	beq.n	411c78 <arm_convolve_wrapper_s8+0xa4>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
  411c16:	4673      	mov	r3, lr
  411c18:	4661      	mov	r1, ip
  411c1a:	4640      	mov	r0, r8
  411c1c:	9c00      	ldr	r4, [sp, #0]
  411c1e:	9a01      	ldr	r2, [sp, #4]
  411c20:	e9cd 6511 	strd	r6, r5, [sp, #68]	@ 0x44
  411c24:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
  411c28:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
  411c2c:	970d      	str	r7, [sp, #52]	@ 0x34
  411c2e:	940c      	str	r4, [sp, #48]	@ 0x30
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
  411c30:	b003      	add	sp, #12
  411c32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
  411c36:	f7ff be1f 	b.w	411878 <arm_convolve_s8>
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
  411c3a:	688c      	ldr	r4, [r1, #8]
  411c3c:	2c01      	cmp	r4, #1
  411c3e:	d1dc      	bne.n	411bfa <arm_convolve_wrapper_s8+0x26>
  411c40:	68cc      	ldr	r4, [r1, #12]
  411c42:	2c01      	cmp	r4, #1
  411c44:	d1d9      	bne.n	411bfa <arm_convolve_wrapper_s8+0x26>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
  411c46:	68bc      	ldr	r4, [r7, #8]
  411c48:	2c01      	cmp	r4, #1
  411c4a:	d1d6      	bne.n	411bfa <arm_convolve_wrapper_s8+0x26>
  411c4c:	687c      	ldr	r4, [r7, #4]
  411c4e:	2c01      	cmp	r4, #1
  411c50:	d1d3      	bne.n	411bfa <arm_convolve_wrapper_s8+0x26>
  411c52:	698c      	ldr	r4, [r1, #24]
  411c54:	2c01      	cmp	r4, #1
  411c56:	d1d0      	bne.n	411bfa <arm_convolve_wrapper_s8+0x26>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
  411c58:	69cc      	ldr	r4, [r1, #28]
  411c5a:	2c01      	cmp	r4, #1
  411c5c:	d1cd      	bne.n	411bfa <arm_convolve_wrapper_s8+0x26>
        return arm_convolve_1x1_s8_fast(ctx,
  411c5e:	9c00      	ldr	r4, [sp, #0]
  411c60:	e9cd 6511 	strd	r6, r5, [sp, #68]	@ 0x44
  411c64:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
  411c68:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	@ 0x34
  411c6c:	940c      	str	r4, [sp, #48]	@ 0x30
}
  411c6e:	b003      	add	sp, #12
  411c70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
  411c74:	f7ff bbe2 	b.w	41143c <arm_convolve_1x1_s8_fast>
        return arm_convolve_1_x_n_s8(ctx,
  411c78:	4673      	mov	r3, lr
  411c7a:	4661      	mov	r1, ip
  411c7c:	4640      	mov	r0, r8
  411c7e:	9c00      	ldr	r4, [sp, #0]
  411c80:	9a01      	ldr	r2, [sp, #4]
  411c82:	e9cd 6511 	strd	r6, r5, [sp, #68]	@ 0x44
  411c86:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
  411c8a:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
  411c8e:	970d      	str	r7, [sp, #52]	@ 0x34
  411c90:	940c      	str	r4, [sp, #48]	@ 0x30
}
  411c92:	b003      	add	sp, #12
  411c94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
  411c98:	f7ff bac2 	b.w	411220 <arm_convolve_1_x_n_s8>

00411c9c <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
  411c9c:	4684      	mov	ip, r0
  411c9e:	4608      	mov	r0, r1
  411ca0:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
  411ca2:	f8dc 2010 	ldr.w	r2, [ip, #16]
  411ca6:	b912      	cbnz	r2, 411cae <arm_convolve_wrapper_s8_get_buffer_size+0x12>
  411ca8:	f8dc 2014 	ldr.w	r2, [ip, #20]
  411cac:	b172      	cbz	r2, 411ccc <arm_convolve_wrapper_s8_get_buffer_size+0x30>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
    }
    else if ((input_dims->h == 1) && (output_dims->w % 4 == 0) && (conv_params->dilation.w == 1) &&
  411cae:	6842      	ldr	r2, [r0, #4]
  411cb0:	2a01      	cmp	r2, #1
  411cb2:	d109      	bne.n	411cc8 <arm_convolve_wrapper_s8_get_buffer_size+0x2c>
  411cb4:	689b      	ldr	r3, [r3, #8]
  411cb6:	079b      	lsls	r3, r3, #30
  411cb8:	d106      	bne.n	411cc8 <arm_convolve_wrapper_s8_get_buffer_size+0x2c>
  411cba:	f8dc 3018 	ldr.w	r3, [ip, #24]
  411cbe:	2b01      	cmp	r3, #1
  411cc0:	d102      	bne.n	411cc8 <arm_convolve_wrapper_s8_get_buffer_size+0x2c>
  411cc2:	684b      	ldr	r3, [r1, #4]
  411cc4:	2b01      	cmp	r3, #1
  411cc6:	d019      	beq.n	411cfc <arm_convolve_wrapper_s8_get_buffer_size+0x60>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
  411cc8:	f7ff bf6e 	b.w	411ba8 <arm_convolve_s8_get_buffer_size>
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
  411ccc:	f8dc 2008 	ldr.w	r2, [ip, #8]
  411cd0:	2a01      	cmp	r2, #1
  411cd2:	d1ec      	bne.n	411cae <arm_convolve_wrapper_s8_get_buffer_size+0x12>
  411cd4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  411cd8:	2a01      	cmp	r2, #1
  411cda:	d1e8      	bne.n	411cae <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
  411cdc:	688a      	ldr	r2, [r1, #8]
  411cde:	2a01      	cmp	r2, #1
  411ce0:	d1e5      	bne.n	411cae <arm_convolve_wrapper_s8_get_buffer_size+0x12>
  411ce2:	684a      	ldr	r2, [r1, #4]
  411ce4:	2a01      	cmp	r2, #1
  411ce6:	d1e2      	bne.n	411cae <arm_convolve_wrapper_s8_get_buffer_size+0x12>
  411ce8:	f8dc 2018 	ldr.w	r2, [ip, #24]
  411cec:	2a01      	cmp	r2, #1
  411cee:	d1de      	bne.n	411cae <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
  411cf0:	f8dc 201c 	ldr.w	r2, [ip, #28]
  411cf4:	2a01      	cmp	r2, #1
  411cf6:	d1da      	bne.n	411cae <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
  411cf8:	f7ff bc08 	b.w	41150c <arm_convolve_1x1_s8_fast_get_buffer_size>
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
  411cfc:	f7ff bb9c 	b.w	411438 <arm_convolve_1_x_n_s8_get_buffer_size>

00411d00 <arm_depthwise_conv_s16>:
                                           const q7_t *kernel,
                                           const cmsis_nn_dims *bias_dims,
                                           const int64_t *bias,
                                           const cmsis_nn_dims *output_dims,
                                           q15_t *output)
{
  411d00:	469c      	mov	ip, r3
  411d02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)ctx;

    depthwise_conv_s16_generic_s16(input,
                                   input_dims->n,
                                   input_dims->w,
                                   input_dims->h,
  411d06:	e9dc 7801 	ldrd	r7, r8, [ip, #4]
{
  411d0a:	b0b9      	sub	sp, #228	@ 0xe4
    const uint16_t dilation_x = dw_conv_params->dilation.w;
  411d0c:	69cb      	ldr	r3, [r1, #28]
{
  411d0e:	9847      	ldr	r0, [sp, #284]	@ 0x11c
    const uint16_t dilation_x = dw_conv_params->dilation.w;
  411d10:	9301      	str	r3, [sp, #4]
  411d12:	f8bc 3000 	ldrh.w	r3, [ip]
                                   bias,
                                   output,
                                   quant_params->shift,
                                   quant_params->multiplier,
                                   output_dims->w,
                                   output_dims->h,
  411d16:	e9d0 6501 	ldrd	r6, r5, [r0, #4]
{
  411d1a:	4610      	mov	r0, r2
    depthwise_conv_s16_generic_s16(input,
  411d1c:	898a      	ldrh	r2, [r1, #12]
  411d1e:	9302      	str	r3, [sp, #8]
  411d20:	8a8b      	ldrh	r3, [r1, #20]
    const uint16_t dilation_y = dw_conv_params->dilation.h;
  411d22:	6a0c      	ldr	r4, [r1, #32]
    depthwise_conv_s16_generic_s16(input,
  411d24:	920d      	str	r2, [sp, #52]	@ 0x34
    const uint16_t dilation_x = dw_conv_params->dilation.w;
  411d26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    depthwise_conv_s16_generic_s16(input,
  411d2a:	9306      	str	r3, [sp, #24]
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  411d2c:	9b02      	ldr	r3, [sp, #8]
    const uint16_t dilation_x = dw_conv_params->dilation.w;
  411d2e:	9212      	str	r2, [sp, #72]	@ 0x48
    const uint16_t dilation_y = dw_conv_params->dilation.h;
  411d30:	b2a2      	uxth	r2, r4
                                   input_dims->c,
  411d32:	f8dc c00c 	ldr.w	ip, [ip, #12]
                                   dw_conv_params->ch_mult,
  411d36:	f8d1 b008 	ldr.w	fp, [r1, #8]
    depthwise_conv_s16_generic_s16(input,
  411d3a:	f8b1 e018 	ldrh.w	lr, [r1, #24]
  411d3e:	f8b1 a010 	ldrh.w	sl, [r1, #16]
    const uint16_t dilation_y = dw_conv_params->dilation.h;
  411d42:	9213      	str	r2, [sp, #76]	@ 0x4c
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  411d44:	2b00      	cmp	r3, #0
  411d46:	f000 8196 	beq.w	412076 <arm_depthwise_conv_s16+0x376>
  411d4a:	fa1f f288 	uxth.w	r2, r8
  411d4e:	9204      	str	r2, [sp, #16]
        input += (input_x * input_y * input_ch);
  411d50:	9b04      	ldr	r3, [sp, #16]
  411d52:	b2bf      	uxth	r7, r7
  411d54:	fa1f f985 	uxth.w	r9, r5
  411d58:	fb07 f503 	mul.w	r5, r7, r3
  411d5c:	fa1f f28c 	uxth.w	r2, ip
  411d60:	fa1f fb8b 	uxth.w	fp, fp
  411d64:	fb02 f505 	mul.w	r5, r2, r5
  411d68:	fa1f fc86 	uxth.w	ip, r6
                                int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
  411d6c:	fb02 f60b 	mul.w	r6, r2, fp
        input += (input_x * input_y * input_ch);
  411d70:	ea4f 0845 	mov.w	r8, r5, lsl #1
  411d74:	9205      	str	r2, [sp, #20]
                                int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
  411d76:	4615      	mov	r5, r2
  411d78:	9608      	str	r6, [sp, #32]
  411d7a:	f1bc 0f00 	cmp.w	ip, #0
  411d7e:	f000 817a 	beq.w	412076 <arm_depthwise_conv_s16+0x376>
  411d82:	9b06      	ldr	r3, [sp, #24]
  411d84:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  411d88:	425b      	negs	r3, r3
  411d8a:	9201      	str	r2, [sp, #4]
  411d8c:	f1ce 0200 	rsb	r2, lr, #0
  411d90:	fa1f fe83 	uxth.w	lr, r3
  411d94:	9b04      	ldr	r3, [sp, #16]
  411d96:	b2a4      	uxth	r4, r4
  411d98:	fb03 f305 	mul.w	r3, r3, r5
  411d9c:	fb04 f303 	mul.w	r3, r4, r3
  411da0:	921d      	str	r2, [sp, #116]	@ 0x74
  411da2:	005a      	lsls	r2, r3, #1
  411da4:	9b01      	ldr	r3, [sp, #4]
  411da6:	921b      	str	r2, [sp, #108]	@ 0x6c
  411da8:	fb03 f305 	mul.w	r3, r3, r5
  411dac:	005b      	lsls	r3, r3, #1
  411dae:	931c      	str	r3, [sp, #112]	@ 0x70
  411db0:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
  411db2:	891d      	ldrh	r5, [r3, #8]
  411db4:	889b      	ldrh	r3, [r3, #4]
  411db6:	fb05 f206 	mul.w	r2, r5, r6
  411dba:	921a      	str	r2, [sp, #104]	@ 0x68
                                   quant_params->shift,
  411dbc:	6842      	ldr	r2, [r0, #4]
  411dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
  411dc0:	920e      	str	r2, [sp, #56]	@ 0x38
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  411dc2:	2300      	movs	r3, #0
                                   quant_params->multiplier,
  411dc4:	6802      	ldr	r2, [r0, #0]
  411dc6:	4620      	mov	r0, r4
  411dc8:	4674      	mov	r4, lr
  411dca:	920f      	str	r2, [sp, #60]	@ 0x3c
                                   dw_conv_params->activation.min,
  411dcc:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
  411dce:	9507      	str	r5, [sp, #28]
  411dd0:	9210      	str	r2, [sp, #64]	@ 0x40
                                   dw_conv_params->activation.max,
  411dd2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
  411dd4:	9211      	str	r2, [sp, #68]	@ 0x44
  411dd6:	ea4f 028b 	mov.w	r2, fp, lsl #2
  411dda:	9217      	str	r2, [sp, #92]	@ 0x5c
  411ddc:	ea4f 024b 	mov.w	r2, fp, lsl #1
  411de0:	9219      	str	r2, [sp, #100]	@ 0x64
  411de2:	9a02      	ldr	r2, [sp, #8]
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
  411de4:	2600      	movs	r6, #0
  411de6:	e9cd 2326 	strd	r2, r3, [sp, #152]	@ 0x98
  411dea:	4686      	mov	lr, r0
  411dec:	4633      	mov	r3, r6
  411dee:	f8bd 5074 	ldrh.w	r5, [sp, #116]	@ 0x74
            const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
  411df2:	b22a      	sxth	r2, r5
  411df4:	9214      	str	r2, [sp, #80]	@ 0x50
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
  411df6:	f1b9 0f00 	cmp.w	r9, #0
  411dfa:	f000 812b 	beq.w	412054 <arm_depthwise_conv_s16+0x354>
  411dfe:	2a00      	cmp	r2, #0
  411e00:	ea5f b1c2 			@ <UNDEFINED> instruction: 0xea5fb1c2
  411e04:	9116      	str	r1, [sp, #88]	@ 0x58
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
  411e06:	990b      	ldr	r1, [sp, #44]	@ 0x2c
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  411e08:	1abe      	subs	r6, r7, r2
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
  411e0a:	42b1      	cmp	r1, r6
  411e0c:	bfa8      	it	ge
  411e0e:	4631      	movge	r1, r6
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
  411e10:	2000      	movs	r0, #0
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
  411e12:	e9cd a328 	strd	sl, r3, [sp, #160]	@ 0xa0
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  411e16:	9623      	str	r6, [sp, #140]	@ 0x8c
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
  411e18:	9124      	str	r1, [sp, #144]	@ 0x90
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
  411e1a:	465b      	mov	r3, fp
  411e1c:	462e      	mov	r6, r5
  411e1e:	4621      	mov	r1, r4
  411e20:	ebae 0202 	sub.w	r2, lr, r2
  411e24:	3a01      	subs	r2, #1
  411e26:	9225      	str	r2, [sp, #148]	@ 0x94
  411e28:	900c      	str	r0, [sp, #48]	@ 0x30
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
  411e2a:	9a05      	ldr	r2, [sp, #20]
                const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
  411e2c:	fa0f fb81 	sxth.w	fp, r1
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
  411e30:	2a00      	cmp	r2, #0
  411e32:	f000 8101 	beq.w	412038 <arm_depthwise_conv_s16+0x338>
                            ker_x_start = MAX(0, -base_idx_x);
  411e36:	2500      	movs	r5, #0
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  411e38:	9a04      	ldr	r2, [sp, #16]
  411e3a:	f1bb 0f00 	cmp.w	fp, #0
  411e3e:	eba2 000b 	sub.w	r0, r2, fp
  411e42:	ea55 b2cb 			@ <UNDEFINED> instruction: 0xea55b2cb
  411e46:	9215      	str	r2, [sp, #84]	@ 0x54
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
  411e48:	9a07      	ldr	r2, [sp, #28]
                            ker_x_start = MAX(0, -base_idx_x);
  411e4a:	f06f 0a03 	mvn.w	sl, #3
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
  411e4e:	4282      	cmp	r2, r0
  411e50:	bfa8      	it	ge
  411e52:	4602      	movge	r2, r0
  411e54:	9221      	str	r2, [sp, #132]	@ 0x84
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
  411e56:	9a01      	ldr	r2, [sp, #4]
  411e58:	e9cd 912a 	strd	r9, r1, [sp, #168]	@ 0xa8
  411e5c:	eba2 020b 	sub.w	r2, r2, fp
  411e60:	9222      	str	r2, [sp, #136]	@ 0x88
  411e62:	4652      	mov	r2, sl
  411e64:	46f2      	mov	sl, lr
  411e66:	46de      	mov	lr, fp
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  411e68:	9020      	str	r0, [sp, #128]	@ 0x80
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
  411e6a:	9506      	str	r5, [sp, #24]
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
  411e6c:	2b00      	cmp	r3, #0
  411e6e:	f000 80d6 	beq.w	41201e <arm_depthwise_conv_s16+0x31e>
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
  411e72:	e9cd 3c2c 	strd	r3, ip, [sp, #176]	@ 0xb0
  411e76:	e9cd 7230 	strd	r7, r2, [sp, #192]	@ 0xc0
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  411e7a:	46ab      	mov	fp, r5
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
  411e7c:	46f4      	mov	ip, lr
  411e7e:	4627      	mov	r7, r4
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  411e80:	9801      	ldr	r0, [sp, #4]
  411e82:	9920      	ldr	r1, [sp, #128]	@ 0x80
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
  411e84:	e9cd 862e 	strd	r8, r6, [sp, #184]	@ 0xb8
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  411e88:	eb00 0901 	add.w	r9, r0, r1
  411e8c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
  411e90:	911f      	str	r1, [sp, #124]	@ 0x7c
  411e92:	990f      	ldr	r1, [sp, #60]	@ 0x3c
  411e94:	9819      	ldr	r0, [sp, #100]	@ 0x64
  411e96:	4411      	add	r1, r2
  411e98:	910a      	str	r1, [sp, #40]	@ 0x28
  411e9a:	990e      	ldr	r1, [sp, #56]	@ 0x38
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
  411e9c:	9532      	str	r5, [sp, #200]	@ 0xc8
  411e9e:	4411      	add	r1, r2
  411ea0:	9109      	str	r1, [sp, #36]	@ 0x24
  411ea2:	9948      	ldr	r1, [sp, #288]	@ 0x120
  411ea4:	4401      	add	r1, r0
  411ea6:	9118      	str	r1, [sp, #96]	@ 0x60
  411ea8:	9922      	ldr	r1, [sp, #136]	@ 0x88
  411eaa:	3901      	subs	r1, #1
  411eac:	911e      	str	r1, [sp, #120]	@ 0x78
                        const q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[idx_out_ch]);
  411eae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  411eb0:	f852 3f04 	ldr.w	r3, [r2, #4]!
  411eb4:	920a      	str	r2, [sp, #40]	@ 0x28
  411eb6:	4a7b      	ldr	r2, [pc, #492]	@ (4120a4 <arm_depthwise_conv_s16+0x3a4>)
  411eb8:	4293      	cmp	r3, r2
  411eba:	f300 80e8 	bgt.w	41208e <arm_depthwise_conv_s16+0x38e>
  411ebe:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
  411ec2:	ea4f 4823 	mov.w	r8, r3, asr #16
  411ec6:	ea4f 7ee3 	mov.w	lr, r3, asr #31
                        if (dilation_x > 1)
  411eca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  411ecc:	2b01      	cmp	r3, #1
  411ece:	f240 80e6 	bls.w	41209e <arm_depthwise_conv_s16+0x39e>
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
  411ed2:	9b01      	ldr	r3, [sp, #4]
  411ed4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
  411ed6:	fb92 f5f3 	sdiv	r5, r2, r3
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  411eda:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
                            ker_x_start = MAX(0, start_x_max);
  411edc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  411ee0:	fb92 f6f3 	sdiv	r6, r2, r3
                            ker_x_end = MIN(kernel_x, end_min_x);
  411ee4:	9b07      	ldr	r3, [sp, #28]
  411ee6:	429e      	cmp	r6, r3
  411ee8:	bfa8      	it	ge
  411eea:	461e      	movge	r6, r3
                        if (dilation_y > 1)
  411eec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  411eee:	2b01      	cmp	r3, #1
  411ef0:	f240 80ca 	bls.w	412088 <arm_depthwise_conv_s16+0x388>
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  411ef4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
  411ef6:	eb0a 0403 	add.w	r4, sl, r3
  411efa:	3c01      	subs	r4, #1
  411efc:	fb94 f4fa 	sdiv	r4, r4, sl
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
  411f00:	9b25      	ldr	r3, [sp, #148]	@ 0x94
  411f02:	fb93 f1fa 	sdiv	r1, r3, sl
                            ker_y_end = MIN(kernel_y, end_min_y);
  411f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                            ker_y_start = MAX(0, start_y_max);
  411f08:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                            ker_y_end = MIN(kernel_y, end_min_y);
  411f0c:	429c      	cmp	r4, r3
  411f0e:	bfa8      	it	ge
  411f10:	461c      	movge	r4, r3
                        if (bias)
  411f12:	9b46      	ldr	r3, [sp, #280]	@ 0x118
  411f14:	2b00      	cmp	r3, #0
  411f16:	f000 80b2 	beq.w	41207e <arm_depthwise_conv_s16+0x37e>
                            acc_0 = bias[idx_out_ch];
  411f1a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
  411f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  411f22:	e9cd 2302 	strd	r2, r3, [sp, #8]
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
  411f26:	428c      	cmp	r4, r1
  411f28:	dd48      	ble.n	411fbc <arm_depthwise_conv_s16+0x2bc>
  411f2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  411f2c:	e9cd ba33 	strd	fp, sl, [sp, #204]	@ 0xcc
  411f30:	fb0a 3901 	mla	r9, sl, r1, r3
  411f34:	9b01      	ldr	r3, [sp, #4]
  411f36:	46c2      	mov	sl, r8
  411f38:	fb03 c005 	mla	r0, r3, r5, ip
  411f3c:	9b04      	ldr	r3, [sp, #16]
  411f3e:	fb03 0009 	mla	r0, r3, r9, r0
  411f42:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
  411f46:	fb02 3000 	mla	r0, r2, r0, r3
  411f4a:	9b42      	ldr	r3, [sp, #264]	@ 0x108
  411f4c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  411f50:	9b07      	ldr	r3, [sp, #28]
  411f52:	fb03 5901 	mla	r9, r3, r1, r5
  411f56:	9b08      	ldr	r3, [sp, #32]
  411f58:	fb03 b909 	mla	r9, r3, r9, fp
  411f5c:	9b44      	ldr	r3, [sp, #272]	@ 0x110
  411f5e:	46f3      	mov	fp, lr
  411f60:	4499      	add	r9, r3
  411f62:	4663      	mov	r3, ip
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
  411f64:	42ae      	cmp	r6, r5
  411f66:	dd1b      	ble.n	411fa0 <arm_depthwise_conv_s16+0x2a0>
  411f68:	eba6 0e05 	sub.w	lr, r6, r5
  411f6c:	f04e e001 	dls	lr, lr
  411f70:	46c8      	mov	r8, r9
  411f72:	4684      	mov	ip, r0
  411f74:	e9cd 3135 	strd	r3, r1, [sp, #212]	@ 0xd4
  411f78:	9037      	str	r0, [sp, #220]	@ 0xdc
                                acc_0 += input[idx_0] * kernel[ker_idx_0];
  411f7a:	f998 1000 	ldrsb.w	r1, [r8]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
  411f7e:	9b08      	ldr	r3, [sp, #32]
                                acc_0 += input[idx_0] * kernel[ker_idx_0];
  411f80:	f8bc 0000 	ldrh.w	r0, [ip]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
  411f84:	4498      	add	r8, r3
                                acc_0 += input[idx_0] * kernel[ker_idx_0];
  411f86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  411f8a:	fbc0 2381 	smlalbb	r2, r3, r0, r1
  411f8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
  411f92:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  411f94:	449c      	add	ip, r3
  411f96:	f00f c011 	le	lr, 411f7a <arm_depthwise_conv_s16+0x27a>
  411f9a:	e9dd 3135 	ldrd	r3, r1, [sp, #212]	@ 0xd4
  411f9e:	9837      	ldr	r0, [sp, #220]	@ 0xdc
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
  411fa0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
  411fa2:	3101      	adds	r1, #1
  411fa4:	4410      	add	r0, r2
  411fa6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
  411fa8:	42a1      	cmp	r1, r4
  411faa:	4491      	add	r9, r2
  411fac:	d1da      	bne.n	411f64 <arm_depthwise_conv_s16+0x264>
  411fae:	469c      	mov	ip, r3
  411fb0:	46d0      	mov	r8, sl
  411fb2:	46de      	mov	lr, fp
  411fb4:	f8dd a0d0 	ldr.w	sl, [sp, #208]	@ 0xd0
  411fb8:	f8dd b0cc 	ldr.w	fp, [sp, #204]	@ 0xcc
  411fbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
  411fc0:	fb04 f10e 	mul.w	r1, r4, lr
  411fc4:	fb08 1305 	mla	r3, r8, r5, r1
  411fc8:	fba4 2808 	umull	r2, r8, r4, r8
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
  411fcc:	4610      	mov	r0, r2
  411fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  411fd0:	eb03 0108 	add.w	r1, r3, r8
  411fd4:	f852 3f04 	ldr.w	r3, [r2, #4]!
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
  411fd8:	f10b 0b01 	add.w	fp, fp, #1
  411fdc:	f1c3 030e 	rsb	r3, r3, #14
  411fe0:	ea50 312d 	orrs.w	r1, r0, sp, asr #12
  411fe4:	9209      	str	r2, [sp, #36]	@ 0x24
    result = (result + 1) >> 1;             // Last shift position and insert round
  411fe6:	1c43      	adds	r3, r0, #1
                        result = MAX(result, output_activation_min);
  411fe8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
  411fea:	105b      	asrs	r3, r3, #1
  411fec:	4293      	cmp	r3, r2
  411fee:	bfb8      	it	lt
  411ff0:	4613      	movlt	r3, r2
                        result = MIN(result, output_activation_max);
  411ff2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  411ff4:	4293      	cmp	r3, r2
  411ff6:	bfa8      	it	ge
  411ff8:	4613      	movge	r3, r2
                        *output++ = (int16_t)result;
  411ffa:	9a48      	ldr	r2, [sp, #288]	@ 0x120
  411ffc:	f822 3b02 	strh.w	r3, [r2], #2
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
  412000:	4613      	mov	r3, r2
                        *output++ = (int16_t)result;
  412002:	9248      	str	r2, [sp, #288]	@ 0x120
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
  412004:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  412006:	4293      	cmp	r3, r2
  412008:	f47f af51 	bne.w	411eae <arm_depthwise_conv_s16+0x1ae>
  41200c:	e9dd 862e 	ldrd	r8, r6, [sp, #184]	@ 0xb8
  412010:	e9dd 2531 	ldrd	r2, r5, [sp, #196]	@ 0xc4
  412014:	463c      	mov	r4, r7
  412016:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
  412018:	46e6      	mov	lr, ip
  41201a:	e9dd 3c2c 	ldrd	r3, ip, [sp, #176]	@ 0xb0
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
  41201e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
  412020:	9806      	ldr	r0, [sp, #24]
  412022:	440a      	add	r2, r1
  412024:	9905      	ldr	r1, [sp, #20]
  412026:	3001      	adds	r0, #1
  412028:	4281      	cmp	r1, r0
  41202a:	9006      	str	r0, [sp, #24]
  41202c:	441d      	add	r5, r3
  41202e:	f47f af1d 	bne.w	411e6c <arm_depthwise_conv_s16+0x16c>
  412032:	e9dd 912a 	ldrd	r9, r1, [sp, #168]	@ 0xa8
  412036:	46d6      	mov	lr, sl
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
  412038:	980c      	ldr	r0, [sp, #48]	@ 0x30
  41203a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  41203c:	3001      	adds	r0, #1
  41203e:	440a      	add	r2, r1
  412040:	4581      	cmp	r9, r0
  412042:	900c      	str	r0, [sp, #48]	@ 0x30
  412044:	b291      	uxth	r1, r2
  412046:	f47f aef0 	bne.w	411e2a <arm_depthwise_conv_s16+0x12a>
  41204a:	4635      	mov	r5, r6
  41204c:	469b      	mov	fp, r3
  41204e:	f8dd a0a0 	ldr.w	sl, [sp, #160]	@ 0xa0
  412052:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
  412054:	3301      	adds	r3, #1
  412056:	eb0a 0205 	add.w	r2, sl, r5
  41205a:	4563      	cmp	r3, ip
  41205c:	b295      	uxth	r5, r2
  41205e:	f47f aec8 	bne.w	411df2 <arm_depthwise_conv_s16+0xf2>
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  412062:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	@ 0x98
        input += (input_x * input_y * input_ch);
  412066:	9942      	ldr	r1, [sp, #264]	@ 0x108
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  412068:	3301      	adds	r3, #1
        input += (input_x * input_y * input_ch);
  41206a:	4441      	add	r1, r8
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  41206c:	429a      	cmp	r2, r3
  41206e:	4670      	mov	r0, lr
        input += (input_x * input_y * input_ch);
  412070:	9142      	str	r1, [sp, #264]	@ 0x108
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
  412072:	f47f aeb7 	bne.w	411de4 <arm_depthwise_conv_s16+0xe4>
                                   dilation_x,
                                   dilation_y);

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
}
  412076:	2000      	movs	r0, #0
  412078:	b039      	add	sp, #228	@ 0xe4
  41207a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        int64_t acc_0 = 0;
  41207e:	2200      	movs	r2, #0
  412080:	2300      	movs	r3, #0
  412082:	e9cd 2302 	strd	r2, r3, [sp, #8]
  412086:	e74e      	b.n	411f26 <arm_depthwise_conv_s16+0x226>
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
  412088:	9c24      	ldr	r4, [sp, #144]	@ 0x90
                            ker_y_start = MAX(0, -base_idx_y);
  41208a:	9916      	ldr	r1, [sp, #88]	@ 0x58
  41208c:	e741      	b.n	411f12 <arm_depthwise_conv_s16+0x212>
                        if (dilation_x > 1)
  41208e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  412090:	f647 78ff 	movw	r8, #32767	@ 0x7fff
  412094:	2b01      	cmp	r3, #1
  412096:	f04f 0e00 	mov.w	lr, #0
  41209a:	f63f af1a 	bhi.w	411ed2 <arm_depthwise_conv_s16+0x1d2>
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
  41209e:	9e21      	ldr	r6, [sp, #132]	@ 0x84
                            ker_x_start = MAX(0, -base_idx_x);
  4120a0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
  4120a2:	e723      	b.n	411eec <arm_depthwise_conv_s16+0x1ec>
  4120a4:	7ffeffff 	.word	0x7ffeffff

004120a8 <depthwise_conv_s8_mult_4>:
                         const int32_t output_y,
                         const int32_t output_offset,
                         const int32_t input_offset,
                         const int32_t output_activation_min,
                         const int32_t output_activation_max)
{
  4120a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4120ac:	ed2d 8b0c 	vpush	{d8-d13}
  4120b0:	b0a9      	sub	sp, #164	@ 0xa4
  4120b2:	4615      	mov	r5, r2
    const int32_t *bias_base = bias;
    const int32_t *mult_base = output_mult;
    const int32_t *shift_base = output_shift;
    const int8_t *kernel_base = kernel;

    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
  4120b4:	9a4c      	ldr	r2, [sp, #304]	@ 0x130
{
  4120b6:	469a      	mov	sl, r3
  4120b8:	e9dd 934e 	ldrd	r9, r3, [sp, #312]	@ 0x138
    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
  4120bc:	2a00      	cmp	r2, #0
{
  4120be:	f8dd b0fc 	ldr.w	fp, [sp, #252]	@ 0xfc
  4120c2:	9c44      	ldr	r4, [sp, #272]	@ 0x110
  4120c4:	9019      	str	r0, [sp, #100]	@ 0x64
    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
  4120c6:	f340 8159 	ble.w	41237c <depthwise_conv_s8_mult_4+0x2d4>
                        out_buff[3] = *bias++;
                    }

                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
                    {
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
  4120ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
  4120cc:	984b      	ldr	r0, [sp, #300]	@ 0x12c
  4120ce:	fb0b f202 	mul.w	r2, fp, r2
  4120d2:	9204      	str	r2, [sp, #16]
                        kernel = kernel_base + mult_tile + ker_idx;
                        int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + in_ch;
  4120d4:	fb0a f201 	mul.w	r2, sl, r1
  4120d8:	9203      	str	r2, [sp, #12]
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
  4120da:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
  4120dc:	2800      	cmp	r0, #0
  4120de:	f1c2 0200 	rsb	r2, r2, #0
  4120e2:	f340 814b 	ble.w	41237c <depthwise_conv_s8_mult_4+0x2d4>
    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
  4120e6:	2000      	movs	r0, #0
  4120e8:	eea2 3b10 	vdup.32	q1, r3
  4120ec:	fb0a f302 	mul.w	r3, sl, r2
  4120f0:	9313      	str	r3, [sp, #76]	@ 0x4c
  4120f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
  4120f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
  4120f6:	18cb      	adds	r3, r1, r3
  4120f8:	931a      	str	r3, [sp, #104]	@ 0x68
  4120fa:	9b40      	ldr	r3, [sp, #256]	@ 0x100
  4120fc:	fb02 f20a 	mul.w	r2, r2, sl
  412100:	3b01      	subs	r3, #1
  412102:	089b      	lsrs	r3, r3, #2
  412104:	3301      	adds	r3, #1
  412106:	9214      	str	r2, [sp, #80]	@ 0x50
  412108:	009a      	lsls	r2, r3, #2
  41210a:	011b      	lsls	r3, r3, #4
  41210c:	9317      	str	r3, [sp, #92]	@ 0x5c
  41210e:	192b      	adds	r3, r5, r4
  412110:	9218      	str	r2, [sp, #96]	@ 0x60
  return __builtin_mve_vdupq_n_sv4si (__a);
  412112:	eea4 0b10 	vdup.32	q2, r0
                    int32_t out_buff[4] = {0, 0, 0, 0};
  412116:	461a      	mov	r2, r3
  412118:	4653      	mov	r3, sl
  41211a:	46da      	mov	sl, fp
  41211c:	46cb      	mov	fp, r9
  41211e:	f1c4 0800 	rsb	r8, r4, #0
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
  412122:	9942      	ldr	r1, [sp, #264]	@ 0x108
  412124:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
  412126:	4291      	cmp	r1, r2
  412128:	bfa8      	it	ge
  41212a:	4611      	movge	r1, r2
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
  41212c:	2700      	movs	r7, #0
  41212e:	ea24 7ee4 	bic.w	lr, r4, r4, asr #31
  412132:	e9cd 401c 	strd	r4, r0, [sp, #112]	@ 0x70
  412136:	462c      	mov	r4, r5
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
  412138:	9102      	str	r1, [sp, #8]
  41213a:	9943      	ldr	r1, [sp, #268]	@ 0x10c
  41213c:	eb08 060e 	add.w	r6, r8, lr
  412140:	9100      	str	r1, [sp, #0]
  412142:	9903      	ldr	r1, [sp, #12]
  412144:	f8cd b138 	str.w	fp, [sp, #312]	@ 0x138
  412148:	fb01 fc06 	mul.w	ip, r1, r6
  41214c:	9904      	ldr	r1, [sp, #16]
  41214e:	46d3      	mov	fp, sl
  412150:	fb0e f101 	mul.w	r1, lr, r1
  412154:	469a      	mov	sl, r3
  412156:	9116      	str	r1, [sp, #88]	@ 0x58
  412158:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
  41215c:	9900      	ldr	r1, [sp, #0]
  41215e:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
  412160:	921b      	str	r2, [sp, #108]	@ 0x6c
  412162:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
  412166:	9712      	str	r7, [sp, #72]	@ 0x48
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
  412168:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
  41216c:	f1bb 0f00 	cmp.w	fp, #0
  412170:	9205      	str	r2, [sp, #20]
  412172:	f340 80e6 	ble.w	412342 <depthwise_conv_s8_mult_4+0x29a>
  412176:	9850      	ldr	r0, [sp, #320]	@ 0x140
  412178:	9d19      	ldr	r5, [sp, #100]	@ 0x64
  41217a:	eea0 0b10 	vdup.32	q0, r0
#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
#pragma clang loop unroll(disable)
#endif
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
  41217e:	9841      	ldr	r0, [sp, #260]	@ 0x104
  412180:	eb09 0e0c 	add.w	lr, r9, ip
  412184:	42a0      	cmp	r0, r4
  412186:	bfa8      	it	ge
  412188:	4620      	movge	r0, r4
  41218a:	9015      	str	r0, [sp, #84]	@ 0x54
            output_mult = mult_base;
  41218c:	984a      	ldr	r0, [sp, #296]	@ 0x128
  41218e:	e9cd 911e 	strd	r9, r1, [sp, #120]	@ 0x78
  412192:	9010      	str	r0, [sp, #64]	@ 0x40
            output_shift = shift_base;
  412194:	9849      	ldr	r0, [sp, #292]	@ 0x124
  412196:	46d1      	mov	r9, sl
  412198:	900f      	str	r0, [sp, #60]	@ 0x3c
            bias = bias_base;
  41219a:	9847      	ldr	r0, [sp, #284]	@ 0x11c
  41219c:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
  4121a0:	4606      	mov	r6, r0
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
  4121a2:	2000      	movs	r0, #0
  4121a4:	9011      	str	r0, [sp, #68]	@ 0x44
  4121a6:	9816      	ldr	r0, [sp, #88]	@ 0x58
  4121a8:	fb02 000b 	mla	r0, r2, fp, r0
  4121ac:	fb02 520a 	mla	r2, r2, sl, r5
  4121b0:	469a      	mov	sl, r3
  4121b2:	9206      	str	r2, [sp, #24]
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
  4121b4:	9b40      	ldr	r3, [sp, #256]	@ 0x100
  4121b6:	2b00      	cmp	r3, #0
  4121b8:	f340 80b1 	ble.w	41231e <depthwise_conv_s8_mult_4+0x276>
  4121bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  4121be:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
  4121c0:	9307      	str	r3, [sp, #28]
  4121c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  4121c4:	4402      	add	r2, r0
  4121c6:	9308      	str	r3, [sp, #32]
  4121c8:	2300      	movs	r3, #0
  4121ca:	920e      	str	r2, [sp, #56]	@ 0x38
  4121cc:	469e      	mov	lr, r3
  4121ce:	4632      	mov	r2, r6
  4121d0:	e9cd 4021 	strd	r4, r0, [sp, #132]	@ 0x84
  4121d4:	9f15      	ldr	r7, [sp, #84]	@ 0x54
  4121d6:	f8cd 8080 	str.w	r8, [sp, #128]	@ 0x80
  4121da:	f8cd c08c 	str.w	ip, [sp, #140]	@ 0x8c
                    int32_t out_buff[4] = {0, 0, 0, 0};
  4121de:	2300      	movs	r3, #0
  4121e0:	e9cd 3324 	strd	r3, r3, [sp, #144]	@ 0x90
  4121e4:	e9cd 3326 	strd	r3, r3, [sp, #152]	@ 0x98
  4121e8:	9b48      	ldr	r3, [sp, #288]	@ 0x120
  4121ea:	4473      	add	r3, lr
  4121ec:	9309      	str	r3, [sp, #36]	@ 0x24
                    if (bias)
  4121ee:	2a00      	cmp	r2, #0
  4121f0:	f000 80c9 	beq.w	412386 <depthwise_conv_s8_mult_4+0x2de>
                        out_buff[0] = *bias++;
  4121f4:	6810      	ldr	r0, [r2, #0]
                        out_buff[1] = *bias++;
  4121f6:	6854      	ldr	r4, [r2, #4]
                        out_buff[2] = *bias++;
  4121f8:	6895      	ldr	r5, [r2, #8]
                        out_buff[3] = *bias++;
  4121fa:	68d6      	ldr	r6, [r2, #12]
                        out_buff[0] = *bias++;
  4121fc:	9024      	str	r0, [sp, #144]	@ 0x90
                        out_buff[1] = *bias++;
  4121fe:	9425      	str	r4, [sp, #148]	@ 0x94
                        out_buff[2] = *bias++;
  412200:	9526      	str	r5, [sp, #152]	@ 0x98
                        out_buff[3] = *bias++;
  412202:	3210      	adds	r2, #16
  412204:	9627      	str	r6, [sp, #156]	@ 0x9c
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
  412206:	990d      	ldr	r1, [sp, #52]	@ 0x34
  412208:	9b02      	ldr	r3, [sp, #8]
  41220a:	4299      	cmp	r1, r3
  41220c:	da46      	bge.n	41229c <depthwise_conv_s8_mult_4+0x1f4>
  41220e:	4688      	mov	r8, r1
  412210:	2100      	movs	r1, #0
  412212:	920a      	str	r2, [sp, #40]	@ 0x28
  412214:	4642      	mov	r2, r8
  412216:	46b8      	mov	r8, r7
  412218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  41221a:	9100      	str	r1, [sp, #0]
  41221c:	9301      	str	r3, [sp, #4]
  41221e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  412220:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
  412224:	eb03 0c0e 	add.w	ip, r3, lr
  412228:	9b01      	ldr	r3, [sp, #4]
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
  41222a:	9905      	ldr	r1, [sp, #20]
                        kernel = kernel_base + mult_tile + ker_idx;
  41222c:	4667      	mov	r7, ip
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
  41222e:	4541      	cmp	r1, r8
  412230:	da22      	bge.n	412278 <depthwise_conv_s8_mult_4+0x1d0>
  412232:	eba8 0e01 	sub.w	lr, r8, r1
  412236:	f04e e001 	dls	lr, lr
  41223a:	9906      	ldr	r1, [sp, #24]
  41223c:	e9cd 2800 	strd	r2, r8, [sp]
  412240:	4419      	add	r1, r3
                             ++ker_w, kernel += output_ch)
                        {
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
  412242:	f991 2000 	ldrsb.w	r2, [r1]
                            out_buff[0] += in_val * kernel[0];
  412246:	f997 8000 	ldrsb.w	r8, [r7]
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
  41224a:	4452      	add	r2, sl
                            out_buff[0] += in_val * kernel[0];
  41224c:	fb02 0008 	mla	r0, r2, r8, r0
                            out_buff[1] += in_val * kernel[1];
  412250:	f997 8001 	ldrsb.w	r8, [r7, #1]
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
  412254:	4449      	add	r1, r9
                            out_buff[1] += in_val * kernel[1];
  412256:	fb02 4408 	mla	r4, r2, r8, r4
                            out_buff[2] += in_val * kernel[2];
  41225a:	f997 8002 	ldrsb.w	r8, [r7, #2]
  41225e:	fb02 5508 	mla	r5, r2, r8, r5
                            out_buff[3] += in_val * kernel[3];
  412262:	f997 8003 	ldrsb.w	r8, [r7, #3]
                             ++ker_w, kernel += output_ch)
  412266:	445f      	add	r7, fp
                            out_buff[3] += in_val * kernel[3];
  412268:	fb02 6608 	mla	r6, r2, r8, r6
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
  41226c:	f00f c817 	le	lr, 412242 <depthwise_conv_s8_mult_4+0x19a>
  412270:	e9dd 2800 	ldrd	r2, r8, [sp]
  412274:	2101      	movs	r1, #1
  412276:	9100      	str	r1, [sp, #0]
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
  412278:	9904      	ldr	r1, [sp, #16]
  41227a:	3201      	adds	r2, #1
  41227c:	448c      	add	ip, r1
  41227e:	9903      	ldr	r1, [sp, #12]
  412280:	440b      	add	r3, r1
  412282:	9902      	ldr	r1, [sp, #8]
  412284:	428a      	cmp	r2, r1
  412286:	d1d0      	bne.n	41222a <depthwise_conv_s8_mult_4+0x182>
  412288:	9900      	ldr	r1, [sp, #0]
  41228a:	4647      	mov	r7, r8
  41228c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  41228e:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
  412292:	b119      	cbz	r1, 41229c <depthwise_conv_s8_mult_4+0x1f4>
  412294:	e9cd 5626 	strd	r5, r6, [sp, #152]	@ 0x98
  412298:	e9cd 0424 	strd	r0, r4, [sp, #144]	@ 0x90
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  41229c:	9b08      	ldr	r3, [sp, #32]
  41229e:	ed9d 7f24 	ldc	15, cr7, [sp, #144]	@ 0x90
  4122a2:	4619      	mov	r1, r3
  4122a4:	3310      	adds	r3, #16
  4122a6:	9308      	str	r3, [sp, #32]
  4122a8:	9b07      	ldr	r3, [sp, #28]
  4122aa:	ed91 9f00 	ldc	15, cr9, [r1]
  4122ae:	4619      	mov	r1, r3
  4122b0:	3310      	adds	r3, #16
  4122b2:	9307      	str	r3, [sp, #28]
  return __builtin_mve_vcmpgtq_n_v4si (__a, __b);
  4122b4:	2300      	movs	r3, #0
  4122b6:	fe29 1f63 	cdp2	15, 2, cr1, cr9, cr3, {3}
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  4122ba:	fe39 cf05 	cdp2	15, 3, cr12, cr9, cr5, {0}
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  4122be:	ed91 bf00 	ldc	15, cr11, [r1]
  return __builtin_mve_vshlq_sv4si (__a, __b);
  4122c2:	ef2c 6446 	vshl.s32	q3, q3, q6
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  4122c6:	fe35 8f09 	cdp2	15, 3, cr8, cr5, cr9, {0}
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  4122ca:	ff26 6b4a 	vqrdmulh.s32	q3, q3, q5
  return __builtin_mve_vandq_sv4si (__a, __b);
  4122ce:	ef06 a158 	vand	q5, q3, q4
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  4122d2:	efa1 a05a 	vshr.s32	q5, q5, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  4122d6:	ef26 605a 	vqadd.s32	q3, q3, q5
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  4122da:	ef28 6546 	vrshl.s32	q3, q3, q4
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4122de:	9b4d      	ldr	r3, [sp, #308]	@ 0x134
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
  4122e0:	f10e 0e04 	add.w	lr, lr, #4
  4122e4:	ee27 6f43 	cdp	15, 2, cr6, cr7, cr3, {2}
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  4122e8:	ef26 6642 	vmax.s32	q3, q3, q1
  return __builtin_mve_vminq_sv4si (__a, __b);
  4122ec:	ef26 6650 	vmin.s32	q3, q3, q0
  __builtin_mve_vstrbq_sv4si ((__builtin_neon_qi *) __addr, __value);
  4122f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  4122f2:	ed83 6f00 	stc	15, cr6, [r3]
  4122f6:	9b40      	ldr	r3, [sp, #256]	@ 0x100
  4122f8:	4573      	cmp	r3, lr
  4122fa:	f73f af70 	bgt.w	4121de <depthwise_conv_s8_mult_4+0x136>
  4122fe:	e9dd 8420 	ldrd	r8, r4, [sp, #128]	@ 0x80
  412302:	e9dd 0c22 	ldrd	r0, ip, [sp, #136]	@ 0x88
  412306:	9b48      	ldr	r3, [sp, #288]	@ 0x120
  412308:	4616      	mov	r6, r2
  41230a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  41230c:	4413      	add	r3, r2
  41230e:	9348      	str	r3, [sp, #288]	@ 0x120
  412310:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
  412312:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  412314:	4413      	add	r3, r2
  412316:	930f      	str	r3, [sp, #60]	@ 0x3c
  412318:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  41231a:	4413      	add	r3, r2
  41231c:	9310      	str	r3, [sp, #64]	@ 0x40
                 ++in_ch, out_ch += ch_mult)
  41231e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  412320:	9a40      	ldr	r2, [sp, #256]	@ 0x100
  412322:	4413      	add	r3, r2
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
  412324:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  412326:	459b      	cmp	fp, r3
  412328:	f102 0201 	add.w	r2, r2, #1
  41232c:	920c      	str	r2, [sp, #48]	@ 0x30
  41232e:	9a40      	ldr	r2, [sp, #256]	@ 0x100
                 ++in_ch, out_ch += ch_mult)
  412330:	9311      	str	r3, [sp, #68]	@ 0x44
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
  412332:	4410      	add	r0, r2
  412334:	f73f af3e 	bgt.w	4121b4 <depthwise_conv_s8_mult_4+0x10c>
  412338:	4653      	mov	r3, sl
  41233a:	991f      	ldr	r1, [sp, #124]	@ 0x7c
  41233c:	46ca      	mov	sl, r9
  41233e:	f8dd 9078 	ldr.w	r9, [sp, #120]	@ 0x78
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
  412342:	9845      	ldr	r0, [sp, #276]	@ 0x114
  412344:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  412346:	1a09      	subs	r1, r1, r0
  412348:	1a24      	subs	r4, r4, r0
  41234a:	9814      	ldr	r0, [sp, #80]	@ 0x50
  41234c:	3201      	adds	r2, #1
  41234e:	4481      	add	r9, r0
  412350:	984b      	ldr	r0, [sp, #300]	@ 0x12c
  412352:	9212      	str	r2, [sp, #72]	@ 0x48
  412354:	4290      	cmp	r0, r2
  412356:	f47f af07 	bne.w	412168 <depthwise_conv_s8_mult_4+0xc0>
    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
  41235a:	e9dd 241b 	ldrd	r2, r4, [sp, #108]	@ 0x6c
  41235e:	9946      	ldr	r1, [sp, #280]	@ 0x118
  412360:	981d      	ldr	r0, [sp, #116]	@ 0x74
  412362:	4488      	add	r8, r1
  412364:	1a64      	subs	r4, r4, r1
  412366:	1a52      	subs	r2, r2, r1
  412368:	994c      	ldr	r1, [sp, #304]	@ 0x130
  41236a:	3001      	adds	r0, #1
  41236c:	934e      	str	r3, [sp, #312]	@ 0x138
  41236e:	4281      	cmp	r1, r0
  412370:	4653      	mov	r3, sl
  412372:	46da      	mov	sl, fp
  412374:	f8dd b138 	ldr.w	fp, [sp, #312]	@ 0x138
  412378:	f47f aed3 	bne.w	412122 <depthwise_conv_s8_mult_4+0x7a>
#endif
                }
            }
        }
    }
}
  41237c:	b029      	add	sp, #164	@ 0xa4
  41237e:	ecbd 8b0c 	vpop	{d8-d13}
  412382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412386:	4616      	mov	r6, r2
  412388:	4610      	mov	r0, r2
  41238a:	4614      	mov	r4, r2
  41238c:	4615      	mov	r5, r2
  41238e:	e73a      	b.n	412206 <depthwise_conv_s8_mult_4+0x15e>

00412390 <arm_depthwise_conv_s8>:
                                          const q7_t *kernel,
                                          const cmsis_nn_dims *bias_dims,
                                          const int32_t *bias,
                                          const cmsis_nn_dims *output_dims,
                                          q7_t *output)
{
  412390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const uint16_t dilation_x = dw_conv_params->dilation.w;
    const uint16_t dilation_y = dw_conv_params->dilation.h;
  412394:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
{
  412398:	461d      	mov	r5, r3
  41239a:	b0c9      	sub	sp, #292	@ 0x124
  41239c:	4694      	mov	ip, r2
  41239e:	9853      	ldr	r0, [sp, #332]	@ 0x14c

    (void)bias_dims;
    (void)ctx;

    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  4123a0:	688b      	ldr	r3, [r1, #8]
                                 input_dims->h,
                                 input_dims->c,
                                 kernel,
                                 output_dims->c,
                                 dw_conv_params->ch_mult,
                                 filter_dims->w,
  4123a2:	6884      	ldr	r4, [r0, #8]
                                 filter_dims->h,
  4123a4:	6840      	ldr	r0, [r0, #4]
                                 filter_dims->w,
  4123a6:	9414      	str	r4, [sp, #80]	@ 0x50
{
  4123a8:	460c      	mov	r4, r1
                                 input_dims->h,
  4123aa:	e9d5 2101 	ldrd	r2, r1, [r5, #4]
                                 filter_dims->h,
  4123ae:	9019      	str	r0, [sp, #100]	@ 0x64
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  4123b0:	6828      	ldr	r0, [r5, #0]
                                 input_dims->c,
  4123b2:	f8d5 900c 	ldr.w	r9, [r5, #12]
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  4123b6:	9016      	str	r0, [sp, #88]	@ 0x58
                                 dw_conv_params->padding.h,
                                 dw_conv_params->stride.w,
                                 dw_conv_params->stride.h,
                                 bias,
                                 output,
                                 quant_params->shift,
  4123b8:	f8dc 0004 	ldr.w	r0, [ip, #4]
                                 dw_conv_params->padding.w,
  4123bc:	6965      	ldr	r5, [r4, #20]
                                 quant_params->shift,
  4123be:	9020      	str	r0, [sp, #128]	@ 0x80
                                 quant_params->multiplier,
  4123c0:	f8dc 0000 	ldr.w	r0, [ip]
{
  4123c4:	f8dd a15c 	ldr.w	sl, [sp, #348]	@ 0x15c
                                 quant_params->multiplier,
  4123c8:	9021      	str	r0, [sp, #132]	@ 0x84
                                 output_dims->w,
                                 output_dims->h,
                                 dw_conv_params->output_offset,
  4123ca:	6860      	ldr	r0, [r4, #4]
                                 dw_conv_params->padding.w,
  4123cc:	951a      	str	r5, [sp, #104]	@ 0x68
                                 dw_conv_params->output_offset,
  4123ce:	9022      	str	r0, [sp, #136]	@ 0x88
                                 dw_conv_params->input_offset,
  4123d0:	6820      	ldr	r0, [r4, #0]
                                 dw_conv_params->padding.h,
  4123d2:	69a5      	ldr	r5, [r4, #24]
                                 dw_conv_params->input_offset,
  4123d4:	9023      	str	r0, [sp, #140]	@ 0x8c
                                 dw_conv_params->activation.min,
  4123d6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
                                 dw_conv_params->padding.h,
  4123d8:	951b      	str	r5, [sp, #108]	@ 0x6c
                                 output_dims->h,
  4123da:	e9da 8b01 	ldrd	r8, fp, [sl, #4]
                                 dw_conv_params->stride.h,
  4123de:	e9d4 6503 	ldrd	r6, r5, [r4, #12]
                                 dw_conv_params->activation.min,
  4123e2:	9024      	str	r0, [sp, #144]	@ 0x90
                                 dw_conv_params->activation.max);
  4123e4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  4123e6:	9025      	str	r0, [sp, #148]	@ 0x94
    const uint16_t dilation_x = dw_conv_params->dilation.w;
  4123e8:	b2b8      	uxth	r0, r7
  4123ea:	9028      	str	r0, [sp, #160]	@ 0xa0
    const uint16_t dilation_y = dw_conv_params->dilation.h;
  4123ec:	fa1f f08e 	uxth.w	r0, lr
  4123f0:	9029      	str	r0, [sp, #164]	@ 0xa4
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  4123f2:	0798      	lsls	r0, r3, #30
  4123f4:	d103      	bne.n	4123fe <arm_depthwise_conv_s8+0x6e>
  4123f6:	9816      	ldr	r0, [sp, #88]	@ 0x58
  4123f8:	2801      	cmp	r0, #1
  4123fa:	f000 81ac 	beq.w	412756 <arm_depthwise_conv_s8+0x3c6>
    }
    else
    {
        depthwise_conv_s8_generic(input,
  4123fe:	f8bd 0058 	ldrh.w	r0, [sp, #88]	@ 0x58
  412402:	fa1f fc86 	uxth.w	ip, r6
  412406:	9016      	str	r0, [sp, #88]	@ 0x58
  412408:	b2ae      	uxth	r6, r5
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  41240a:	2800      	cmp	r0, #0
  41240c:	f000 8194 	beq.w	412738 <arm_depthwise_conv_s8+0x3a8>
  412410:	b28d      	uxth	r5, r1
  412412:	b292      	uxth	r2, r2
  412414:	fa1f f489 	uxth.w	r4, r9
  412418:	fa1f f983 	uxth.w	r9, r3
        input += (input_x * input_y * input_ch);
  41241c:	fb05 f302 	mul.w	r3, r5, r2
  412420:	fb04 f103 	mul.w	r1, r4, r3
                                int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
  412424:	fb09 f304 	mul.w	r3, r9, r4
  412428:	fa1f f888 	uxth.w	r8, r8
  41242c:	951c      	str	r5, [sp, #112]	@ 0x70
  41242e:	922d      	str	r2, [sp, #180]	@ 0xb4
  412430:	fa1f fb8b 	uxth.w	fp, fp
  412434:	9318      	str	r3, [sp, #96]	@ 0x60
  412436:	f1b8 0f00 	cmp.w	r8, #0
  41243a:	f000 817d 	beq.w	412738 <arm_depthwise_conv_s8+0x3a8>
    int i_out = 0;
  41243e:	f04f 0a00 	mov.w	sl, #0
  412442:	fa1f f08e 	uxth.w	r0, lr
  412446:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
  41244a:	9014      	str	r0, [sp, #80]	@ 0x50
  41244c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
  41244e:	9217      	str	r2, [sp, #92]	@ 0x5c
  412450:	4242      	negs	r2, r0
  412452:	981a      	ldr	r0, [sp, #104]	@ 0x68
  412454:	b2bf      	uxth	r7, r7
  412456:	4243      	negs	r3, r0
  412458:	fa1f fe83 	uxth.w	lr, r3
  41245c:	fb05 f304 	mul.w	r3, r5, r4
  412460:	f8bd 0064 	ldrh.w	r0, [sp, #100]	@ 0x64
  412464:	9d14      	ldr	r5, [sp, #80]	@ 0x50
  412466:	9715      	str	r7, [sp, #84]	@ 0x54
  412468:	9027      	str	r0, [sp, #156]	@ 0x9c
  41246a:	b297      	uxth	r7, r2
  41246c:	fb05 f003 	mul.w	r0, r5, r3
  412470:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	@ 0x5c
  412474:	fb02 f203 	mul.w	r2, r2, r3
  412478:	9030      	str	r0, [sp, #192]	@ 0xc0
  41247a:	922f      	str	r2, [sp, #188]	@ 0xbc
  41247c:	4608      	mov	r0, r1
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  41247e:	4652      	mov	r2, sl
  412480:	4661      	mov	r1, ip
  412482:	46c4      	mov	ip, r8
  412484:	46f0      	mov	r8, lr
  412486:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  412488:	941a      	str	r4, [sp, #104]	@ 0x68
  41248a:	fb03 f304 	mul.w	r3, r3, r4
  41248e:	932a      	str	r3, [sp, #168]	@ 0xa8
  412490:	ea4f 0389 	mov.w	r3, r9, lsl #2
  412494:	932e      	str	r3, [sp, #184]	@ 0xb8
  412496:	9b16      	ldr	r3, [sp, #88]	@ 0x58
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
  412498:	2400      	movs	r4, #0
  41249a:	e9cd 3038 	strd	r3, r0, [sp, #224]	@ 0xe0
  41249e:	4608      	mov	r0, r1
  4124a0:	4643      	mov	r3, r8
  4124a2:	4649      	mov	r1, r9
  4124a4:	9719      	str	r7, [sp, #100]	@ 0x64
  4124a6:	941b      	str	r4, [sp, #108]	@ 0x6c
            const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
  4124a8:	f9bd 9064 	ldrsh.w	r9, [sp, #100]	@ 0x64
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
  4124ac:	f1bb 0f00 	cmp.w	fp, #0
  4124b0:	f000 812c 	beq.w	41270c <arm_depthwise_conv_s8+0x37c>
  4124b4:	f1b9 0f00 	cmp.w	r9, #0
  4124b8:	ea5f b5c9 			@ <UNDEFINED> instruction: 0xea5fb5c9
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  4124bc:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
  4124be:	952c      	str	r5, [sp, #176]	@ 0xb0
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
  4124c0:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  4124c2:	eba4 0409 	sub.w	r4, r4, r9
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
  4124c6:	42a5      	cmp	r5, r4
  4124c8:	bfa8      	it	ge
  4124ca:	4625      	movge	r5, r4
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
  4124cc:	f04f 0800 	mov.w	r8, #0
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  4124d0:	9435      	str	r4, [sp, #212]	@ 0xd4
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
  4124d2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
  4124d4:	e9cd c23c 	strd	ip, r2, [sp, #240]	@ 0xf0
  4124d8:	eba4 0e09 	sub.w	lr, r4, r9
  4124dc:	f10e 34ff 	add.w	r4, lr, #4294967295	@ 0xffffffff
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
  4124e0:	9536      	str	r5, [sp, #216]	@ 0xd8
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
  4124e2:	9437      	str	r4, [sp, #220]	@ 0xdc
  4124e4:	4645      	mov	r5, r8
  4124e6:	461c      	mov	r4, r3
  4124e8:	4698      	mov	r8, r3
  4124ea:	460a      	mov	r2, r1
  4124ec:	4653      	mov	r3, sl
  4124ee:	e9cd 693a 	strd	r6, r9, [sp, #232]	@ 0xe8
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
  4124f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
                const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
  4124f4:	fa0f f984 	sxth.w	r9, r4
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
  4124f8:	2900      	cmp	r1, #0
  4124fa:	f000 80fb 	beq.w	4126f4 <arm_depthwise_conv_s8+0x364>
                            ker_x_start = MAX(0, -base_idx_x);
  4124fe:	f04f 0c00 	mov.w	ip, #0
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  412502:	991c      	ldr	r1, [sp, #112]	@ 0x70
  412504:	f1b9 0f00 	cmp.w	r9, #0
  412508:	eba1 0609 	sub.w	r6, r1, r9
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
  41250c:	9915      	ldr	r1, [sp, #84]	@ 0x54
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  41250e:	9626      	str	r6, [sp, #152]	@ 0x98
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
  412510:	eba1 0609 	sub.w	r6, r1, r9
  412514:	f106 31ff 	add.w	r1, r6, #4294967295	@ 0xffffffff
  412518:	9134      	str	r1, [sp, #208]	@ 0xd0
  41251a:	ea5c b1c9 			@ <UNDEFINED> instruction: 0xea5cb1c9
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
  41251e:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
  412520:	912b      	str	r1, [sp, #172]	@ 0xac
  412522:	9926      	ldr	r1, [sp, #152]	@ 0x98
                            ker_x_start = MAX(0, -base_idx_x);
  412524:	f06f 0e03 	mvn.w	lr, #3
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
  412528:	428e      	cmp	r6, r1
  41252a:	bfa8      	it	ge
  41252c:	460e      	movge	r6, r1
  41252e:	e9cd b03e 	strd	fp, r0, [sp, #248]	@ 0xf8
  412532:	9633      	str	r6, [sp, #204]	@ 0xcc
  412534:	9440      	str	r4, [sp, #256]	@ 0x100
  412536:	46ca      	mov	sl, r9
  412538:	4676      	mov	r6, lr
  41253a:	46e3      	mov	fp, ip
  41253c:	4644      	mov	r4, r8
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
  41253e:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
  412542:	2a00      	cmp	r2, #0
  412544:	f000 80c9 	beq.w	4126da <arm_depthwise_conv_s8+0x34a>
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  412548:	46dc      	mov	ip, fp
  41254a:	46a1      	mov	r9, r4
  41254c:	46b8      	mov	r8, r7
  41254e:	9958      	ldr	r1, [sp, #352]	@ 0x160
  412550:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
  412554:	4459      	add	r1, fp
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  412556:	9826      	ldr	r0, [sp, #152]	@ 0x98
  412558:	911f      	str	r1, [sp, #124]	@ 0x7c
  41255a:	9915      	ldr	r1, [sp, #84]	@ 0x54
  41255c:	e9cd 2541 	strd	r2, r5, [sp, #260]	@ 0x104
  412560:	eb01 0b00 	add.w	fp, r1, r0
  412564:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
  412568:	9131      	str	r1, [sp, #196]	@ 0xc4
  41256a:	9921      	ldr	r1, [sp, #132]	@ 0x84
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  41256c:	9835      	ldr	r0, [sp, #212]	@ 0xd4
  41256e:	4431      	add	r1, r6
  412570:	911e      	str	r1, [sp, #120]	@ 0x78
  412572:	9920      	ldr	r1, [sp, #128]	@ 0x80
  412574:	e9cd 3643 	strd	r3, r6, [sp, #268]	@ 0x10c
  412578:	4431      	add	r1, r6
  41257a:	911d      	str	r1, [sp, #116]	@ 0x74
  41257c:	9914      	ldr	r1, [sp, #80]	@ 0x50
  41257e:	eb02 0b0c 	add.w	fp, r2, ip
  412582:	4401      	add	r1, r0
  412584:	9132      	str	r1, [sp, #200]	@ 0xc8
                        if (dilation_x > 1)
  412586:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  412588:	2b01      	cmp	r3, #1
  41258a:	f240 80db 	bls.w	412744 <arm_depthwise_conv_s8+0x3b4>
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
  41258e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  412590:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
  412592:	fb92 f0f3 	sdiv	r0, r2, r3
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  412596:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
                            ker_x_start = MAX(0, start_x_max);
  412598:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
  41259c:	fb92 f4f3 	sdiv	r4, r2, r3
                            ker_x_end = MIN(kernel_x, end_min_x);
  4125a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  4125a2:	429c      	cmp	r4, r3
  4125a4:	bfa8      	it	ge
  4125a6:	461c      	movge	r4, r3
                        if (dilation_y > 1)
  4125a8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
  4125aa:	2b01      	cmp	r3, #1
  4125ac:	f240 80d0 	bls.w	412750 <arm_depthwise_conv_s8+0x3c0>
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  4125b0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
  4125b2:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
  4125b4:	1e5d      	subs	r5, r3, #1
  4125b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  4125b8:	fb95 f5f3 	sdiv	r5, r5, r3
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
  4125bc:	fb92 f3f3 	sdiv	r3, r2, r3
                            ker_y_end = MIN(kernel_y, end_min_y);
  4125c0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
                            ker_y_start = MAX(0, start_y_max);
  4125c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
                            ker_y_end = MIN(kernel_y, end_min_y);
  4125c6:	4295      	cmp	r5, r2
  4125c8:	bfa8      	it	ge
  4125ca:	4615      	movge	r5, r2
                        if (bias)
  4125cc:	9a56      	ldr	r2, [sp, #344]	@ 0x158
  4125ce:	2a00      	cmp	r2, #0
  4125d0:	f000 80b6 	beq.w	412740 <arm_depthwise_conv_s8+0x3b0>
                            acc_0 = bias[idx_out_ch];
  4125d4:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
  4125d8:	429d      	cmp	r5, r3
  4125da:	dd3e      	ble.n	41265a <arm_depthwise_conv_s8+0x2ca>
  4125dc:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
  4125de:	9914      	ldr	r1, [sp, #80]	@ 0x50
  4125e0:	f8cd a114 	str.w	sl, [sp, #276]	@ 0x114
  4125e4:	fb01 2103 	mla	r1, r1, r3, r2
  4125e8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
  4125ea:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
  4125ec:	fb02 a200 	mla	r2, r2, r0, sl
  4125f0:	46e2      	mov	sl, ip
  4125f2:	fb07 2201 	mla	r2, r7, r1, r2
  4125f6:	9916      	ldr	r1, [sp, #88]	@ 0x58
  4125f8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
  4125fa:	fb07 1202 	mla	r2, r7, r2, r1
  4125fe:	9952      	ldr	r1, [sp, #328]	@ 0x148
  412600:	9f18      	ldr	r7, [sp, #96]	@ 0x60
  412602:	440a      	add	r2, r1
  412604:	9917      	ldr	r1, [sp, #92]	@ 0x5c
  412606:	fb01 0103 	mla	r1, r1, r3, r0
  41260a:	fb07 c101 	mla	r1, r7, r1, ip
  41260e:	9f54      	ldr	r7, [sp, #336]	@ 0x150
  412610:	4439      	add	r1, r7
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
  412612:	4284      	cmp	r4, r0
  412614:	dd17      	ble.n	412646 <arm_depthwise_conv_s8+0x2b6>
  412616:	eba4 0e00 	sub.w	lr, r4, r0
  41261a:	f04e e001 	dls	lr, lr
  41261e:	468c      	mov	ip, r1
  412620:	4617      	mov	r7, r2
  412622:	e9cd 3246 	strd	r3, r2, [sp, #280]	@ 0x118
  412626:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
                                acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
  412628:	f997 3000 	ldrsb.w	r3, [r7]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
  41262c:	4417      	add	r7, r2
                                acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
  41262e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
  412630:	4413      	add	r3, r2
  412632:	f99c 2000 	ldrsb.w	r2, [ip]
  412636:	fb02 6603 	mla	r6, r2, r3, r6
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
  41263a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
  41263c:	449c      	add	ip, r3
  41263e:	f00f c00f 	le	lr, 412626 <arm_depthwise_conv_s8+0x296>
  412642:	e9dd 3246 	ldrd	r3, r2, [sp, #280]	@ 0x118
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
  412646:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
  412648:	3301      	adds	r3, #1
  41264a:	443a      	add	r2, r7
  41264c:	9f2f      	ldr	r7, [sp, #188]	@ 0xbc
  41264e:	42ab      	cmp	r3, r5
  412650:	4439      	add	r1, r7
  412652:	d1de      	bne.n	412612 <arm_depthwise_conv_s8+0x282>
  412654:	46d4      	mov	ip, sl
  412656:	f8dd a114 	ldr.w	sl, [sp, #276]	@ 0x114
                        acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
  41265a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    result = (int32_t)(mult.long_long >> 31);
  41265c:	2500      	movs	r5, #0
  41265e:	f853 1f04 	ldr.w	r1, [r3, #4]!
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
  412662:	f10c 0c01 	add.w	ip, ip, #1
                        acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
  412666:	931d      	str	r3, [sp, #116]	@ 0x74
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  412668:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  41266a:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  41266e:	f853 4f04 	ldr.w	r4, [r3, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  412672:	fa06 f000 	lsl.w	r0, r6, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  412676:	931e      	str	r3, [sp, #120]	@ 0x78
    result = (int32_t)(mult.long_long >> 31);
  412678:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  41267c:	fbc0 3504 	smlal	r3, r5, r0, r4
  412680:	461e      	mov	r6, r3
  412682:	462f      	mov	r7, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
  412684:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
  412686:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  41268a:	4249      	negs	r1, r1
  41268c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  412690:	fa03 f001 	lsl.w	r0, r3, r1
  412694:	3801      	subs	r0, #1
    result = dividend >> exponent;
  412696:	fa46 f301 	asr.w	r3, r6, r1
        threshold++;
  41269a:	0ff1      	lsrs	r1, r6, #31
    int32_t remainder = remainder_mask & dividend;
  41269c:	ea06 0200 	and.w	r2, r6, r0
        threshold++;
  4126a0:	eb01 0160 	add.w	r1, r1, r0, asr #1
        result++;
  4126a4:	428a      	cmp	r2, r1
  4126a6:	ea53 93d3 			@ <UNDEFINED> instruction: 0xea5393d3
                        acc_0 += output_offset;
  4126aa:	9a22      	ldr	r2, [sp, #136]	@ 0x88
  4126ac:	4413      	add	r3, r2
                        acc_0 = MAX(acc_0, output_activation_min);
  4126ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
  4126b0:	4293      	cmp	r3, r2
  4126b2:	bfb8      	it	lt
  4126b4:	4613      	movlt	r3, r2
                        acc_0 = MIN(acc_0, output_activation_max);
  4126b6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
  4126b8:	4293      	cmp	r3, r2
  4126ba:	bfa8      	it	ge
  4126bc:	4613      	movge	r3, r2
                        output[i_out++] = acc_0;
  4126be:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
  4126c0:	45e3      	cmp	fp, ip
                        output[i_out++] = acc_0;
  4126c2:	f802 3f01 	strb.w	r3, [r2, #1]!
  4126c6:	921f      	str	r2, [sp, #124]	@ 0x7c
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
  4126c8:	f47f af5d 	bne.w	412586 <arm_depthwise_conv_s8+0x1f6>
  4126cc:	e9dd 2541 	ldrd	r2, r5, [sp, #260]	@ 0x104
  4126d0:	e9dd 3643 	ldrd	r3, r6, [sp, #268]	@ 0x10c
  4126d4:	464c      	mov	r4, r9
  4126d6:	4647      	mov	r7, r8
  4126d8:	4413      	add	r3, r2
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
  4126da:	982e      	ldr	r0, [sp, #184]	@ 0xb8
  4126dc:	9916      	ldr	r1, [sp, #88]	@ 0x58
  4126de:	4406      	add	r6, r0
  4126e0:	981a      	ldr	r0, [sp, #104]	@ 0x68
  4126e2:	3101      	adds	r1, #1
  4126e4:	4288      	cmp	r0, r1
  4126e6:	9116      	str	r1, [sp, #88]	@ 0x58
  4126e8:	f47f af2b 	bne.w	412542 <arm_depthwise_conv_s8+0x1b2>
  4126ec:	e9dd b03e 	ldrd	fp, r0, [sp, #248]	@ 0xf8
  4126f0:	46a0      	mov	r8, r4
  4126f2:	9c40      	ldr	r4, [sp, #256]	@ 0x100
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
  4126f4:	3501      	adds	r5, #1
  4126f6:	1821      	adds	r1, r4, r0
  4126f8:	45ab      	cmp	fp, r5
  4126fa:	b28c      	uxth	r4, r1
  4126fc:	f47f aef9 	bne.w	4124f2 <arm_depthwise_conv_s8+0x162>
  412700:	469a      	mov	sl, r3
  412702:	4643      	mov	r3, r8
  412704:	9e3a      	ldr	r6, [sp, #232]	@ 0xe8
  412706:	4611      	mov	r1, r2
  412708:	e9dd c23c 	ldrd	ip, r2, [sp, #240]	@ 0xf0
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
  41270c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
  41270e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
  412710:	4434      	add	r4, r6
  412712:	3501      	adds	r5, #1
  412714:	b2a4      	uxth	r4, r4
  412716:	45ac      	cmp	ip, r5
  412718:	951b      	str	r5, [sp, #108]	@ 0x6c
  41271a:	9419      	str	r4, [sp, #100]	@ 0x64
  41271c:	f47f aec4 	bne.w	4124a8 <arm_depthwise_conv_s8+0x118>
        input += (input_x * input_y * input_ch);
  412720:	9c52      	ldr	r4, [sp, #328]	@ 0x148
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  412722:	4689      	mov	r9, r1
  412724:	4698      	mov	r8, r3
  412726:	4601      	mov	r1, r0
  412728:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
  41272a:	9839      	ldr	r0, [sp, #228]	@ 0xe4
  41272c:	3201      	adds	r2, #1
        input += (input_x * input_y * input_ch);
  41272e:	4404      	add	r4, r0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  412730:	429a      	cmp	r2, r3
        input += (input_x * input_y * input_ch);
  412732:	9452      	str	r4, [sp, #328]	@ 0x148
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  412734:	f47f aeb0 	bne.w	412498 <arm_depthwise_conv_s8+0x108>
                                  dilation_y);
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
}
  412738:	2000      	movs	r0, #0
  41273a:	b049      	add	sp, #292	@ 0x124
  41273c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412740:	4616      	mov	r6, r2
  412742:	e749      	b.n	4125d8 <arm_depthwise_conv_s8+0x248>
                        if (dilation_y > 1)
  412744:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
  412746:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
                        if (dilation_y > 1)
  412748:	2b01      	cmp	r3, #1
                            ker_x_start = MAX(0, -base_idx_x);
  41274a:	982b      	ldr	r0, [sp, #172]	@ 0xac
                        if (dilation_y > 1)
  41274c:	f63f af30 	bhi.w	4125b0 <arm_depthwise_conv_s8+0x220>
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
  412750:	9d36      	ldr	r5, [sp, #216]	@ 0xd8
                            ker_y_start = MAX(0, -base_idx_y);
  412752:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
  412754:	e73a      	b.n	4125cc <arm_depthwise_conv_s8+0x23c>
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  412756:	2f01      	cmp	r7, #1
  412758:	d003      	beq.n	412762 <arm_depthwise_conv_s8+0x3d2>
        depthwise_conv_s8_generic(input,
  41275a:	fa1f fc86 	uxth.w	ip, r6
  41275e:	b2ae      	uxth	r6, r5
    for (i_batch = 0; i_batch < input_batches; i_batch++)
  412760:	e656      	b.n	412410 <arm_depthwise_conv_s8+0x80>
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  412762:	f1be 0f01 	cmp.w	lr, #1
  412766:	d1f8      	bne.n	41275a <arm_depthwise_conv_s8+0x3ca>
        depthwise_conv_s8_mult_4(input,
  412768:	9820      	ldr	r0, [sp, #128]	@ 0x80
  41276a:	9607      	str	r6, [sp, #28]
  41276c:	900b      	str	r0, [sp, #44]	@ 0x2c
  41276e:	9858      	ldr	r0, [sp, #352]	@ 0x160
  412770:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  412774:	900a      	str	r0, [sp, #40]	@ 0x28
  412776:	9856      	ldr	r0, [sp, #344]	@ 0x158
  412778:	e9cd 5008 	strd	r5, r0, [sp, #32]
  41277c:	981b      	ldr	r0, [sp, #108]	@ 0x6c
  41277e:	9006      	str	r0, [sp, #24]
  412780:	981a      	ldr	r0, [sp, #104]	@ 0x68
  412782:	9005      	str	r0, [sp, #20]
  412784:	9819      	ldr	r0, [sp, #100]	@ 0x64
  412786:	9004      	str	r0, [sp, #16]
  412788:	9814      	ldr	r0, [sp, #80]	@ 0x50
  41278a:	e9cd 3002 	strd	r3, r0, [sp, #8]
  41278e:	9b54      	ldr	r3, [sp, #336]	@ 0x150
  412790:	9852      	ldr	r0, [sp, #328]	@ 0x148
  412792:	9300      	str	r3, [sp, #0]
  412794:	9b25      	ldr	r3, [sp, #148]	@ 0x94
  412796:	9312      	str	r3, [sp, #72]	@ 0x48
  412798:	9b24      	ldr	r3, [sp, #144]	@ 0x90
  41279a:	9311      	str	r3, [sp, #68]	@ 0x44
  41279c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
  41279e:	9310      	str	r3, [sp, #64]	@ 0x40
  4127a0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  4127a2:	e9cd 830e 	strd	r8, r3, [sp, #56]	@ 0x38
  4127a6:	f8da 400c 	ldr.w	r4, [sl, #12]
  4127aa:	464b      	mov	r3, r9
  4127ac:	9401      	str	r4, [sp, #4]
  4127ae:	9c21      	ldr	r4, [sp, #132]	@ 0x84
  4127b0:	940c      	str	r4, [sp, #48]	@ 0x30
  4127b2:	f7ff fc79 	bl	4120a8 <depthwise_conv_s8_mult_4>
  4127b6:	e7bf      	b.n	412738 <arm_depthwise_conv_s8+0x3a8>

004127b8 <arm_depthwise_conv_s8_opt>:
                                              const q7_t *kernel,
                                              const cmsis_nn_dims *bias_dims,
                                              const int32_t *bias,
                                              const cmsis_nn_dims *output_dims,
                                              q7_t *output)
{
  4127b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4127bc:	ed2d 8b0c 	vpush	{d8-d13}
  4127c0:	b0b9      	sub	sp, #228	@ 0xe4
  4127c2:	9f53      	ldr	r7, [sp, #332]	@ 0x14c

    const int32_t input_ch = input_dims->c;
  4127c4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
    const int32_t output_ch = output_dims->c;
  4127c8:	68fc      	ldr	r4, [r7, #12]
{
  4127ca:	461d      	mov	r5, r3

    /* Check depth multiplier is 1 */
    if (input_ch != output_ch)
  4127cc:	45a3      	cmp	fp, r4
{
  4127ce:	9e4f      	ldr	r6, [sp, #316]	@ 0x13c
    if (input_ch != output_ch)
  4127d0:	f040 8232 	bne.w	412c38 <arm_depthwise_conv_s8_opt+0x480>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
    }

    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
  4127d4:	460b      	mov	r3, r1
  4127d6:	6801      	ldr	r1, [r0, #0]

int32_t arm_depthwise_conv_s8_opt_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_MVEI)
    (void)input_dims;
    return (4 * CH_IN_BLOCK_MVE * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int8_t);
  4127d8:	68b0      	ldr	r0, [r6, #8]
  4127da:	6876      	ldr	r6, [r6, #4]
  4127dc:	902c      	str	r0, [sp, #176]	@ 0xb0
  4127de:	fb00 f006 	mul.w	r0, r0, r6
    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
  4127e2:	911c      	str	r1, [sp, #112]	@ 0x70
    return (4 * CH_IN_BLOCK_MVE * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int8_t);
  4127e4:	9627      	str	r6, [sp, #156]	@ 0x9c
  4127e6:	901e      	str	r0, [sp, #120]	@ 0x78
    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
  4127e8:	2900      	cmp	r1, #0
  4127ea:	f000 8222 	beq.w	412c32 <arm_depthwise_conv_s8_opt+0x47a>
    const int32_t ch_loop = (input_ch + (CH_IN_BLOCK_MVE - 1)) / CH_IN_BLOCK_MVE;
  4127ee:	4e5e      	ldr	r6, [pc, #376]	@ (412968 <arm_depthwise_conv_s8_opt+0x1b0>)
  4127f0:	f10b 017b 	add.w	r1, fp, #123	@ 0x7b
  4127f4:	fb86 6001 	smull	r6, r0, r6, r1
  4127f8:	4408      	add	r0, r1
  4127fa:	17c9      	asrs	r1, r1, #31
  4127fc:	ebc1 11a0 	rsb	r1, r1, r0, asr #6
  412800:	912d      	str	r1, [sp, #180]	@ 0xb4
    const int32_t input_y = input_dims->h;
  412802:	e9d5 1a01 	ldrd	r1, sl, [r5, #4]
  412806:	910d      	str	r1, [sp, #52]	@ 0x34
    const int32_t pad_x = dw_conv_params->padding.w;
  412808:	6959      	ldr	r1, [r3, #20]
    int32_t active_ch = MIN(CH_IN_BLOCK_MVE, remaining_ch);
  41280a:	2c7c      	cmp	r4, #124	@ 0x7c
    const int32_t pad_x = dw_conv_params->padding.w;
  41280c:	9128      	str	r1, [sp, #160]	@ 0xa0
    const int32_t pad_y = dw_conv_params->padding.h;
  41280e:	6999      	ldr	r1, [r3, #24]
    int32_t active_ch = MIN(CH_IN_BLOCK_MVE, remaining_ch);
  412810:	4626      	mov	r6, r4
    const int32_t pad_y = dw_conv_params->padding.h;
  412812:	9129      	str	r1, [sp, #164]	@ 0xa4
    const int32_t stride_x = dw_conv_params->stride.w;
  412814:	68d9      	ldr	r1, [r3, #12]
    int32_t active_ch = MIN(CH_IN_BLOCK_MVE, remaining_ch);
  412816:	bfa8      	it	ge
  412818:	267c      	movge	r6, #124	@ 0x7c
    const int32_t stride_x = dw_conv_params->stride.w;
  41281a:	911a      	str	r1, [sp, #104]	@ 0x68
    const int32_t stride_y = dw_conv_params->stride.h;
  41281c:	6919      	ldr	r1, [r3, #16]
    for (int i_ch = 0; i_ch < ch_loop; i_ch++)
  41281e:	f1bb 0f00 	cmp.w	fp, #0
    const int32_t stride_y = dw_conv_params->stride.h;
  412822:	912a      	str	r1, [sp, #168]	@ 0xa8
    const int32_t *output_shift = quant_params->shift;
  412824:	6851      	ldr	r1, [r2, #4]
    const int32_t *output_mult = quant_params->multiplier;
  412826:	6812      	ldr	r2, [r2, #0]
    const int32_t *output_shift = quant_params->shift;
  412828:	9115      	str	r1, [sp, #84]	@ 0x54
    const int32_t *output_mult = quant_params->multiplier;
  41282a:	9216      	str	r2, [sp, #88]	@ 0x58
    const int32_t output_x = output_dims->w;
  41282c:	68ba      	ldr	r2, [r7, #8]
  41282e:	9217      	str	r2, [sp, #92]	@ 0x5c
    const int32_t output_y = output_dims->h;
  412830:	687a      	ldr	r2, [r7, #4]
  412832:	922b      	str	r2, [sp, #172]	@ 0xac
    const int32_t output_offset = dw_conv_params->output_offset;
  412834:	685a      	ldr	r2, [r3, #4]
  412836:	9213      	str	r2, [sp, #76]	@ 0x4c
    const int32_t input_offset = dw_conv_params->input_offset;
  412838:	681a      	ldr	r2, [r3, #0]
  41283a:	921f      	str	r2, [sp, #124]	@ 0x7c
    const int32_t output_activation_min = dw_conv_params->activation.min;
  41283c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    const int32_t output_activation_max = dw_conv_params->activation.max;
  41283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    const int32_t output_activation_min = dw_conv_params->activation.min;
  412840:	9220      	str	r2, [sp, #128]	@ 0x80
    const int32_t output_activation_max = dw_conv_params->activation.max;
  412842:	9321      	str	r3, [sp, #132]	@ 0x84
    for (int i_ch = 0; i_ch < ch_loop; i_ch++)
  412844:	f340 817c 	ble.w	412b40 <arm_depthwise_conv_s8_opt+0x388>
        for (int i_out_y = 0, base_idx_y = -pad_y; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
  412848:	2000      	movs	r0, #0
  41284a:	f1a4 037c 	sub.w	r3, r4, #124	@ 0x7c
  41284e:	9331      	str	r3, [sp, #196]	@ 0xc4
  412850:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
  return __builtin_mve_vdupq_n_sv4si (__a);
  412852:	f8cd a0c8 	str.w	sl, [sp, #200]	@ 0xc8
  412856:	425b      	negs	r3, r3
  412858:	fb0a f303 	mul.w	r3, sl, r3
  41285c:	932f      	str	r3, [sp, #188]	@ 0xbc
  41285e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
  412860:	eeaa 2b10 	vdup.32	q5, r2
  412864:	fb03 f30a 	mul.w	r3, r3, sl
  412868:	eea8 0b10 	vdup.32	q4, r0
  41286c:	46d8      	mov	r8, fp
  41286e:	4605      	mov	r5, r0
  412870:	4682      	mov	sl, r0
  412872:	932e      	str	r3, [sp, #184]	@ 0xb8
  412874:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  412876:	9626      	str	r6, [sp, #152]	@ 0x98
  412878:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
  41287c:	009b      	lsls	r3, r3, #2
  41287e:	9330      	str	r3, [sp, #192]	@ 0xc0
                    out += (4 * input_ch);
  412880:	ea4f 038b 	mov.w	r3, fp, lsl #2
  412884:	9325      	str	r3, [sp, #148]	@ 0x94
  412886:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
  412888:	901d      	str	r0, [sp, #116]	@ 0x74
  41288a:	f1c3 0900 	rsb	r9, r3, #0
  41288e:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
  412890:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
  412892:	1a98      	subs	r0, r3, r2
        out = output + i_ch * CH_IN_BLOCK_MVE;
  412894:	9b54      	ldr	r3, [sp, #336]	@ 0x150
  412896:	4413      	add	r3, r2
  412898:	9319      	str	r3, [sp, #100]	@ 0x64
        for (int i_out_y = 0, base_idx_y = -pad_y; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
  41289a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
  41289c:	2b00      	cmp	r3, #0
  41289e:	f340 8143 	ble.w	412b28 <arm_depthwise_conv_s8_opt+0x370>
  4128a2:	2100      	movs	r1, #0
            for (int i_out_x = 0, base_idx_x = -pad_x; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  4128a4:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
  4128a6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
  4128a8:	9318      	str	r3, [sp, #96]	@ 0x60
  4128aa:	ebc5 1345 	rsb	r3, r5, r5, lsl #5
  4128ae:	009b      	lsls	r3, r3, #2
  4128b0:	9314      	str	r3, [sp, #80]	@ 0x50
                        arm_nn_depthwise_conv_nt_t_padded_s8(lhs_buffer,
  4128b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
            for (int i_out_x = 0, base_idx_x = -pad_x; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  4128b4:	460f      	mov	r7, r1
                        arm_nn_depthwise_conv_nt_t_padded_s8(lhs_buffer,
  4128b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4128ba:	9322      	str	r3, [sp, #136]	@ 0x88
  4128bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  4128be:	016e      	lsls	r6, r5, #5
  4128c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4128c4:	9323      	str	r3, [sp, #140]	@ 0x8c
  4128c6:	9b52      	ldr	r3, [sp, #328]	@ 0x148
            for (int i_out_x = 0, base_idx_x = -pad_x; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  4128c8:	e9cd 0634 	strd	r0, r6, [sp, #208]	@ 0xd0
                        arm_nn_depthwise_conv_nt_t_padded_s8(lhs_buffer,
  4128cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4128d0:	9324      	str	r3, [sp, #144]	@ 0x90
  4128d2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
            for (int i_out_x = 0, base_idx_x = -pad_x; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  4128d4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  4128d6:	1b12      	subs	r2, r2, r4
  4128d8:	425b      	negs	r3, r3
  4128da:	920b      	str	r2, [sp, #44]	@ 0x2c
  4128dc:	461a      	mov	r2, r3
  4128de:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
  4128e2:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
  4128e6:	46d0      	mov	r8, sl
  4128e8:	9c26      	ldr	r4, [sp, #152]	@ 0x98
  4128ea:	f8dd a0c8 	ldr.w	sl, [sp, #200]	@ 0xc8
  4128ee:	9533      	str	r5, [sp, #204]	@ 0xcc
  4128f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  4128f2:	9827      	ldr	r0, [sp, #156]	@ 0x9c
  4128f4:	1a1b      	subs	r3, r3, r0
  4128f6:	931b      	str	r3, [sp, #108]	@ 0x6c
  4128f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  4128fa:	2b00      	cmp	r3, #0
  4128fc:	dd73      	ble.n	4129e6 <arm_depthwise_conv_s8_opt+0x22e>
  4128fe:	2600      	movs	r6, #0
  412900:	46c4      	mov	ip, r8
  412902:	9611      	str	r6, [sp, #68]	@ 0x44
  412904:	4616      	mov	r6, r2
  412906:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
  412908:	9828      	ldr	r0, [sp, #160]	@ 0xa0
  41290a:	e9cd 2736 	strd	r2, r7, [sp, #216]	@ 0xd8
  41290e:	1a1d      	subs	r5, r3, r0
                for (int i_ker_y = base_idx_y; i_ker_y < base_idx_y + kernel_y; i_ker_y++)
  412910:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
  412912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  412914:	429a      	cmp	r2, r3
  412916:	da56      	bge.n	4129c6 <arm_depthwise_conv_s8_opt+0x20e>
  412918:	1bab      	subs	r3, r5, r6
  41291a:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
  41291e:	ea4f 0883 	mov.w	r8, r3, lsl #2
  412922:	4613      	mov	r3, r2
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  412924:	9f18      	ldr	r7, [sp, #96]	@ 0x60
  412926:	9112      	str	r1, [sp, #72]	@ 0x48
  412928:	42b5      	cmp	r5, r6
  41292a:	dd46      	ble.n	4129ba <arm_depthwise_conv_s8_opt+0x202>
  41292c:	2b00      	cmp	r3, #0
  41292e:	f2c0 810d 	blt.w	412b4c <arm_depthwise_conv_s8_opt+0x394>
  412932:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  412934:	429a      	cmp	r2, r3
  412936:	f340 8123 	ble.w	412b80 <arm_depthwise_conv_s8_opt+0x3c8>
  41293a:	2e00      	cmp	r6, #0
                            arm_memcpy_q7(lhs_buffer,
  41293c:	46b6      	mov	lr, r6
  41293e:	f2c0 8133 	blt.w	412ba8 <arm_depthwise_conv_s8_opt+0x3f0>
  412942:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
  412946:	9a14      	ldr	r2, [sp, #80]	@ 0x50
  412948:	990e      	ldr	r1, [sp, #56]	@ 0x38
  41294a:	eb0e 0007 	add.w	r0, lr, r7
  41294e:	fb01 2000 	mla	r0, r1, r0, r2
  412952:	9a4e      	ldr	r2, [sp, #312]	@ 0x138
  412954:	990c      	ldr	r1, [sp, #48]	@ 0x30
  412956:	4410      	add	r0, r2
  412958:	930f      	str	r3, [sp, #60]	@ 0x3c
  41295a:	4672      	mov	r2, lr
  41295c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  41295e:	960c      	str	r6, [sp, #48]	@ 0x30
  412960:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
  412964:	e012      	b.n	41298c <arm_depthwise_conv_s8_opt+0x1d4>
  412966:	bf00      	nop
  412968:	84210843 	.word	0x84210843
    __asm volatile("   wlstp.8                 lr, %[cnt], 1f             \n"
  41296c:	4606      	mov	r6, r0
  41296e:	468b      	mov	fp, r1
  412970:	f004 c007 	wlstp.8	lr, r4, 412980 <arm_depthwise_conv_s8_opt+0x1c8>
  412974:	ecb6 1e10 	ldc	14, cr1, [r6], #64	@ 0x40
  412978:	ecab 1e10 	stc	14, cr1, [fp], #64	@ 0x40
  41297c:	f01f c007 	letp	lr, 412974 <arm_depthwise_conv_s8_opt+0x1bc>
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  412980:	3201      	adds	r2, #1
  412982:	42aa      	cmp	r2, r5
                        lhs_buffer += CH_IN_BLOCK_MVE;
  412984:	f101 017c 	add.w	r1, r1, #124	@ 0x7c
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  412988:	4418      	add	r0, r3
  41298a:	da12      	bge.n	4129b2 <arm_depthwise_conv_s8_opt+0x1fa>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
  41298c:	4592      	cmp	sl, r2
  41298e:	dced      	bgt.n	41296c <arm_depthwise_conv_s8_opt+0x1b4>
    __asm volatile("   vdup.8                  q0, %[set_val]             \n"
  412990:	460e      	mov	r6, r1
  412992:	eee0 9b10 	vdup.8	q0, r9
  412996:	f004 c005 	wlstp.8	lr, r4, 4129a2 <arm_depthwise_conv_s8_opt+0x1ea>
  41299a:	eca6 1e10 	stc	14, cr1, [r6], #64	@ 0x40
  41299e:	f01f c005 	letp	lr, 41299a <arm_depthwise_conv_s8_opt+0x1e2>
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  4129a2:	3201      	adds	r2, #1
  4129a4:	42aa      	cmp	r2, r5
                            padded = 1;
  4129a6:	f04f 0c01 	mov.w	ip, #1
                        lhs_buffer += CH_IN_BLOCK_MVE;
  4129aa:	f101 017c 	add.w	r1, r1, #124	@ 0x7c
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  4129ae:	4418      	add	r0, r3
  4129b0:	dbec      	blt.n	41298c <arm_depthwise_conv_s8_opt+0x1d4>
  4129b2:	e9dd 3b0f 	ldrd	r3, fp, [sp, #60]	@ 0x3c
  4129b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
                        lhs_buffer += CH_IN_BLOCK_MVE;
  4129b8:	44c3      	add	fp, r8
                for (int i_ker_y = base_idx_y; i_ker_y < base_idx_y + kernel_y; i_ker_y++)
  4129ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  4129bc:	3301      	adds	r3, #1
  4129be:	4293      	cmp	r3, r2
  4129c0:	4457      	add	r7, sl
  4129c2:	d1b1      	bne.n	412928 <arm_depthwise_conv_s8_opt+0x170>
  4129c4:	9912      	ldr	r1, [sp, #72]	@ 0x48
                buffer_count++;
  4129c6:	3101      	adds	r1, #1
                if (buffer_count == 4)
  4129c8:	2904      	cmp	r1, #4
  4129ca:	f000 8108 	beq.w	412bde <arm_depthwise_conv_s8_opt+0x426>
            for (int i_out_x = 0, base_idx_x = -pad_x; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
  4129ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
  4129d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  4129d2:	4416      	add	r6, r2
  4129d4:	4415      	add	r5, r2
  4129d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
  4129d8:	3301      	adds	r3, #1
  4129da:	429a      	cmp	r2, r3
  4129dc:	9311      	str	r3, [sp, #68]	@ 0x44
  4129de:	d197      	bne.n	412910 <arm_depthwise_conv_s8_opt+0x158>
  4129e0:	e9dd 2736 	ldrd	r2, r7, [sp, #216]	@ 0xd8
  4129e4:	46e0      	mov	r8, ip
        for (int i_out_y = 0, base_idx_y = -pad_y; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
  4129e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  4129e8:	982a      	ldr	r0, [sp, #168]	@ 0xa8
  4129ea:	3701      	adds	r7, #1
  4129ec:	4403      	add	r3, r0
  4129ee:	930b      	str	r3, [sp, #44]	@ 0x2c
  4129f0:	982e      	ldr	r0, [sp, #184]	@ 0xb8
  4129f2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
  4129f4:	4403      	add	r3, r0
  4129f6:	9318      	str	r3, [sp, #96]	@ 0x60
  4129f8:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
  4129fa:	42bb      	cmp	r3, r7
  4129fc:	f47f af78 	bne.w	4128f0 <arm_depthwise_conv_s8_opt+0x138>
        for (int i_buf = 0; i_buf < buffer_count; i_buf++)
  412a00:	e9dd 0634 	ldrd	r0, r6, [sp, #208]	@ 0xd0
  412a04:	2900      	cmp	r1, #0
  412a06:	46c2      	mov	sl, r8
  412a08:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
  412a0a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  412a0e:	910c      	str	r1, [sp, #48]	@ 0x30
  412a10:	f340 808a 	ble.w	412b28 <arm_depthwise_conv_s8_opt+0x370>
            int32_t loop_count = (active_ch + 3) / 4;
  412a14:	9a26      	ldr	r2, [sp, #152]	@ 0x98
  412a16:	1cd3      	adds	r3, r2, #3
  412a18:	f102 0106 	add.w	r1, r2, #6
  412a1c:	bf48      	it	mi
  412a1e:	460b      	movmi	r3, r1
  412a20:	2a00      	cmp	r2, #0
  412a22:	4611      	mov	r1, r2
  412a24:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  412a28:	dd7e      	ble.n	412b28 <arm_depthwise_conv_s8_opt+0x370>
  412a2a:	1b72      	subs	r2, r6, r5
        for (int i_buf = 0; i_buf < buffer_count; i_buf++)
  412a2c:	2600      	movs	r6, #0
  412a2e:	ea4f 1e02 	mov.w	lr, r2, lsl #4
  412a32:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
  412a34:	9a50      	ldr	r2, [sp, #320]	@ 0x140
  412a36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
  412a38:	4422      	add	r2, r4
                const int8_t *row_0 = kernel + offset;
  412a3a:	440a      	add	r2, r1
  412a3c:	eea2 3b10 	vdup.32	q1, r3
  412a40:	920b      	str	r2, [sp, #44]	@ 0x2c
  412a42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
  412a44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
  412a46:	440b      	add	r3, r1
  412a48:	eb02 0b01 	add.w	fp, r2, r1
  412a4c:	4632      	mov	r2, r6
  412a4e:	4671      	mov	r1, lr
  412a50:	e9cd a00f 	strd	sl, r0, [sp, #60]	@ 0x3c
  412a54:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
  412a58:	469a      	mov	sl, r3
  412a5a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
  412a5c:	9b52      	ldr	r3, [sp, #328]	@ 0x148
  412a5e:	f8dd 9078 	ldr.w	r9, [sp, #120]	@ 0x78
  412a62:	950e      	str	r5, [sp, #56]	@ 0x38
        for (int i_buf = 0; i_buf < buffer_count; i_buf++)
  412a64:	460d      	mov	r5, r1
            for (int i_loop_cnt = 0, offset = i_ch * CH_IN_BLOCK_MVE; i_loop_cnt < loop_count;
  412a66:	2600      	movs	r6, #0
            int32_t num_ch_to_process = active_ch;
  412a68:	9c26      	ldr	r4, [sp, #152]	@ 0x98
            for (int i_loop_cnt = 0, offset = i_ch * CH_IN_BLOCK_MVE; i_loop_cnt < loop_count;
  412a6a:	9212      	str	r2, [sp, #72]	@ 0x48
  412a6c:	9114      	str	r1, [sp, #80]	@ 0x50
  412a6e:	2200      	movs	r2, #0
  412a70:	eea4 2b10 	vdup.32	q2, r2
                const int8_t *row_0 = kernel + offset;
  412a74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  412a76:	ebaa 0704 	sub.w	r7, sl, r4
                const int8_t *col_0 = lhs_buffer + (kernel_size * CH_IN_BLOCK_MVE * i_buf) + (i_loop_cnt * 4);
  412a7a:	ebab 0104 	sub.w	r1, fp, r4
                const int8_t *row_0 = kernel + offset;
  412a7e:	1b12      	subs	r2, r2, r4
                if (bias)
  412a80:	b11b      	cbz	r3, 412a8a <arm_depthwise_conv_s8_opt+0x2d2>
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  412a82:	eb03 0e05 	add.w	lr, r3, r5
  412a86:	ed9e 5f00 	ldc	15, cr5, [lr]
                for (int i_ker = 0; i_ker < kernel_size; i_ker++)
  412a8a:	f1b9 0f00 	cmp.w	r9, #0
  412a8e:	dd0e      	ble.n	412aae <arm_depthwise_conv_s8_opt+0x2f6>
  412a90:	f049 e001 	dls	lr, r9
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  412a94:	ecb1 6f7c 	ldc	15, cr6, [r1], #496	@ 0x1f0
  412a98:	ed92 0f00 	ldc	15, cr0, [r2]
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  412a9c:	ee27 6f40 	cdp	15, 2, cr6, cr7, cr0, {2}
  return __builtin_mve_vmulq_sv4si (__a, __b);
  412aa0:	ef26 6950 	vmul.i32	q3, q3, q0
                    row_0 += input_ch;
  412aa4:	4442      	add	r2, r8
                    out_0 += vmulq_s32(ip_0, ker_0);
  412aa6:	ef24 4846 	vadd.i32	q2, q2, q3
                for (int i_ker = 0; i_ker < kernel_size; i_ker++)
  412aaa:	f00f c80d 	le	lr, 412a94 <arm_depthwise_conv_s8_opt+0x2dc>
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  412aae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
                 num_ch_to_process -= 4, offset += 4, i_loop_cnt++)
  412ab0:	3601      	adds	r6, #1
  412ab2:	442a      	add	r2, r5
  412ab4:	ed92 1f00 	ldc	15, cr1, [r2]
  412ab8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
            for (int i_loop_cnt = 0, offset = i_ch * CH_IN_BLOCK_MVE; i_loop_cnt < loop_count;
  412aba:	45b4      	cmp	ip, r6
  412abc:	442a      	add	r2, r5
  412abe:	ed92 df00 	ldc	15, cr13, [r2]
  return __builtin_mve_vcmpgtq_n_v4si (__a, __b);
  412ac2:	f04f 0200 	mov.w	r2, #0
  412ac6:	fe21 1f62 	cdp2	15, 2, cr1, cr1, cr2, {3}
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  412aca:	fe31 6f09 	cdp2	15, 3, cr6, cr1, cr9, {0}
  return __builtin_mve_vshlq_sv4si (__a, __b);
  412ace:	ef26 6444 	vshl.s32	q3, q2, q3
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  412ad2:	fe39 0f01 	cdp2	15, 3, cr0, cr9, cr1, {0}
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  412ad6:	ff26 6b4c 	vqrdmulh.s32	q3, q3, q6
  return __builtin_mve_vandq_sv4si (__a, __b);
  412ada:	ef06 4150 	vand	q2, q3, q0
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  412ade:	efa1 4054 	vshr.s32	q2, q2, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  412ae2:	ef26 6054 	vqadd.s32	q3, q3, q2
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  412ae6:	ef20 6546 	vrshl.s32	q3, q3, q0
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  412aea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  412aec:	f024 e801 	bfcsel	0, 412af2 <arm_depthwise_conv_s8_opt+0x33a>, 2, ls
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  412af0:	ee27 6f42 	cdp	15, 2, cr6, cr7, cr2, {2}
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  412af4:	ef26 664a 	vmax.s32	q3, q3, q5
  return __builtin_mve_vminq_sv4si (__a, __b);
  412af8:	ef26 6652 	vmin.s32	q3, q3, q1
  412afc:	f105 0510 	add.w	r5, r5, #16
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  412b00:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  412b04:	ed87 6f00 	stc	15, cr6, [r7]
  412b08:	f1a4 0404 	sub.w	r4, r4, #4
  412b0c:	dcaf      	bgt.n	412a6e <arm_depthwise_conv_s8_opt+0x2b6>
        for (int i_buf = 0; i_buf < buffer_count; i_buf++)
  412b0e:	9c30      	ldr	r4, [sp, #192]	@ 0xc0
  412b10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  412b12:	44a3      	add	fp, r4
  412b14:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  412b16:	3201      	adds	r2, #1
  412b18:	42a2      	cmp	r2, r4
  412b1a:	9914      	ldr	r1, [sp, #80]	@ 0x50
  412b1c:	44c2      	add	sl, r8
  412b1e:	d1a1      	bne.n	412a64 <arm_depthwise_conv_s8_opt+0x2ac>
  412b20:	e9dd 5a0e 	ldrd	r5, sl, [sp, #56]	@ 0x38
  412b24:	e9dd 0910 	ldrd	r0, r9, [sp, #64]	@ 0x40
        active_ch = MIN(CH_IN_BLOCK_MVE, remaining_ch);
  412b28:	287c      	cmp	r0, #124	@ 0x7c
  412b2a:	bfa8      	it	ge
  412b2c:	207c      	movge	r0, #124	@ 0x7c
    for (int i_ch = 0; i_ch < ch_loop; i_ch++)
  412b2e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
  412b30:	3501      	adds	r5, #1
  412b32:	337c      	adds	r3, #124	@ 0x7c
  412b34:	931d      	str	r3, [sp, #116]	@ 0x74
  412b36:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
        active_ch = MIN(CH_IN_BLOCK_MVE, remaining_ch);
  412b38:	9026      	str	r0, [sp, #152]	@ 0x98
    for (int i_ch = 0; i_ch < ch_loop; i_ch++)
  412b3a:	42ab      	cmp	r3, r5
  412b3c:	f73f aea7 	bgt.w	41288e <arm_depthwise_conv_s8_opt+0xd6>
    return ARM_CMSIS_NN_SUCCESS;
  412b40:	2000      	movs	r0, #0
}
  412b42:	b039      	add	sp, #228	@ 0xe4
  412b44:	ecbd 8b0c 	vpop	{d8-d13}
  412b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  412b4c:	4631      	mov	r1, r6
                            arm_memcpy_q7(lhs_buffer,
  412b4e:	465a      	mov	r2, fp
  412b50:	4610      	mov	r0, r2
  412b52:	eee0 9b10 	vdup.8	q0, r9
  412b56:	f004 c005 	wlstp.8	lr, r4, 412b62 <arm_depthwise_conv_s8_opt+0x3aa>
  412b5a:	eca0 1e10 	stc	14, cr1, [r0], #64	@ 0x40
  412b5e:	f01f c005 	letp	lr, 412b5a <arm_depthwise_conv_s8_opt+0x3a2>
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  412b62:	3101      	adds	r1, #1
  412b64:	42a9      	cmp	r1, r5
                        lhs_buffer += CH_IN_BLOCK_MVE;
  412b66:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  412b6a:	d1f1      	bne.n	412b50 <arm_depthwise_conv_s8_opt+0x398>
  412b6c:	f04f 0c01 	mov.w	ip, #1
  412b70:	44c3      	add	fp, r8
                for (int i_ker_y = base_idx_y; i_ker_y < base_idx_y + kernel_y; i_ker_y++)
  412b72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  412b74:	3301      	adds	r3, #1
  412b76:	4293      	cmp	r3, r2
  412b78:	4457      	add	r7, sl
  412b7a:	f47f aed5 	bne.w	412928 <arm_depthwise_conv_s8_opt+0x170>
  412b7e:	e721      	b.n	4129c4 <arm_depthwise_conv_s8_opt+0x20c>
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  412b80:	4631      	mov	r1, r6
                            arm_memcpy_q7(lhs_buffer,
  412b82:	465a      	mov	r2, fp
  412b84:	4610      	mov	r0, r2
  412b86:	eee0 9b10 	vdup.8	q0, r9
  412b8a:	f004 c005 	wlstp.8	lr, r4, 412b96 <arm_depthwise_conv_s8_opt+0x3de>
  412b8e:	eca0 1e10 	stc	14, cr1, [r0], #64	@ 0x40
  412b92:	f01f c005 	letp	lr, 412b8e <arm_depthwise_conv_s8_opt+0x3d6>
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  412b96:	3101      	adds	r1, #1
  412b98:	42a9      	cmp	r1, r5
                        lhs_buffer += CH_IN_BLOCK_MVE;
  412b9a:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  412b9e:	d1f1      	bne.n	412b84 <arm_depthwise_conv_s8_opt+0x3cc>
  412ba0:	f04f 0c01 	mov.w	ip, #1
  412ba4:	44c3      	add	fp, r8
  412ba6:	e7e4      	b.n	412b72 <arm_depthwise_conv_s8_opt+0x3ba>
  412ba8:	4659      	mov	r1, fp
  412baa:	4632      	mov	r2, r6
  412bac:	ea05 7ce5 	and.w	ip, r5, r5, asr #31
  412bb0:	4608      	mov	r0, r1
  412bb2:	eee0 9b10 	vdup.8	q0, r9
  412bb6:	f004 c005 	wlstp.8	lr, r4, 412bc2 <arm_depthwise_conv_s8_opt+0x40a>
  412bba:	eca0 1e10 	stc	14, cr1, [r0], #64	@ 0x40
  412bbe:	f01f c005 	letp	lr, 412bba <arm_depthwise_conv_s8_opt+0x402>
  412bc2:	3201      	adds	r2, #1
  412bc4:	4562      	cmp	r2, ip
                        lhs_buffer += CH_IN_BLOCK_MVE;
  412bc6:	f101 017c 	add.w	r1, r1, #124	@ 0x7c
                    for (int i_ker_x = base_idx_x; i_ker_x < base_idx_x + kernel_x; i_ker_x++)
  412bca:	dbf1      	blt.n	412bb0 <arm_depthwise_conv_s8_opt+0x3f8>
  412bcc:	42aa      	cmp	r2, r5
  412bce:	4696      	mov	lr, r2
  412bd0:	f04f 0c01 	mov.w	ip, #1
  412bd4:	910c      	str	r1, [sp, #48]	@ 0x30
  412bd6:	f6ff aeb6 	blt.w	412946 <arm_depthwise_conv_s8_opt+0x18e>
                        lhs_buffer += CH_IN_BLOCK_MVE;
  412bda:	44c3      	add	fp, r8
  412bdc:	e6ed      	b.n	4129ba <arm_depthwise_conv_s8_opt+0x202>
                        arm_nn_depthwise_conv_nt_t_s8(lhs_buffer,
  412bde:	9b50      	ldr	r3, [sp, #320]	@ 0x140
  412be0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
  412be2:	981c      	ldr	r0, [sp, #112]	@ 0x70
  412be4:	1899      	adds	r1, r3, r2
  412be6:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
  412bea:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
  412bec:	9306      	str	r3, [sp, #24]
  412bee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
  412bf0:	9308      	str	r3, [sp, #32]
  412bf2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
  412bf4:	9307      	str	r3, [sp, #28]
  412bf6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
  412bf8:	9305      	str	r3, [sp, #20]
  412bfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
  412bfc:	9304      	str	r3, [sp, #16]
  412bfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  412c00:	9303      	str	r3, [sp, #12]
  412c02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
  412c04:	9302      	str	r3, [sp, #8]
  412c06:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  412c08:	9301      	str	r3, [sp, #4]
  412c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  412c0c:	9300      	str	r3, [sp, #0]
  412c0e:	4623      	mov	r3, r4
                    if (padded == 0)
  412c10:	f1bc 0f00 	cmp.w	ip, #0
  412c14:	d10a      	bne.n	412c2c <arm_depthwise_conv_s8_opt+0x474>
                        arm_nn_depthwise_conv_nt_t_s8(lhs_buffer,
  412c16:	f000 fb03 	bl	413220 <arm_nn_depthwise_conv_nt_t_s8>
                    buffer_count = 0;
  412c1a:	2100      	movs	r1, #0
                    out += (4 * input_ch);
  412c1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
  412c1e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
  412c20:	468c      	mov	ip, r1
  412c22:	4413      	add	r3, r2
                    lhs_buffer = (q7_t *)buffer_a;
  412c24:	f8dd b070 	ldr.w	fp, [sp, #112]	@ 0x70
                    out += (4 * input_ch);
  412c28:	9319      	str	r3, [sp, #100]	@ 0x64
                    buffer_count = 0;
  412c2a:	e6d0      	b.n	4129ce <arm_depthwise_conv_s8_opt+0x216>
                        arm_nn_depthwise_conv_nt_t_padded_s8(lhs_buffer,
  412c2c:	f000 f9e4 	bl	412ff8 <arm_nn_depthwise_conv_nt_t_padded_s8>
                        padded = 0;
  412c30:	e7f3      	b.n	412c1a <arm_depthwise_conv_s8_opt+0x462>
    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
  412c32:	2800      	cmp	r0, #0
  412c34:	f77f addb 	ble.w	4127ee <arm_depthwise_conv_s8_opt+0x36>
        return ARM_CMSIS_NN_ARG_ERROR;
  412c38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  412c3c:	e781      	b.n	412b42 <arm_depthwise_conv_s8_opt+0x38a>
  412c3e:	bf00      	nop

00412c40 <arm_depthwise_conv_s8_opt_get_buffer_size>:
    return (4 * CH_IN_BLOCK_MVE * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int8_t);
  412c40:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
  412c44:	fb03 f000 	mul.w	r0, r3, r0
  412c48:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
  412c4c:	0100      	lsls	r0, r0, #4
  412c4e:	4770      	bx	lr

00412c50 <arm_depthwise_conv_wrapper_s8>:
                                                  const q7_t *filter,
                                                  const cmsis_nn_dims *bias_dims,
                                                  const int32_t *bias,
                                                  const cmsis_nn_dims *output_dims,
                                                  q7_t *output)
{
  412c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412c54:	b083      	sub	sp, #12
  412c56:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  412c58:	468c      	mov	ip, r1
  412c5a:	e9dd ba0d 	ldrd	fp, sl, [sp, #52]	@ 0x34
  412c5e:	e9dd 950f 	ldrd	r9, r5, [sp, #60]	@ 0x3c
  412c62:	e9dd 6711 	ldrd	r6, r7, [sp, #68]	@ 0x44
  412c66:	9400      	str	r4, [sp, #0]
    arm_cmsis_nn_status status = ARM_CMSIS_NN_SUCCESS;
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  412c68:	688c      	ldr	r4, [r1, #8]
{
  412c6a:	4680      	mov	r8, r0
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  412c6c:	2c01      	cmp	r4, #1
{
  412c6e:	469e      	mov	lr, r3
  412c70:	9201      	str	r2, [sp, #4]
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  412c72:	d102      	bne.n	412c7a <arm_depthwise_conv_wrapper_s8+0x2a>
  412c74:	681c      	ldr	r4, [r3, #0]
  412c76:	2c01      	cmp	r4, #1
  412c78:	d012      	beq.n	412ca0 <arm_depthwise_conv_wrapper_s8+0x50>
                                               output);
        }
    }
    else
    {
        status = arm_depthwise_conv_s8(ctx,
  412c7a:	4673      	mov	r3, lr
  412c7c:	4661      	mov	r1, ip
  412c7e:	4640      	mov	r0, r8
  412c80:	9c00      	ldr	r4, [sp, #0]
  412c82:	9a01      	ldr	r2, [sp, #4]
  412c84:	e9cd 6711 	strd	r6, r7, [sp, #68]	@ 0x44
  412c88:	e9cd 950f 	strd	r9, r5, [sp, #60]	@ 0x3c
  412c8c:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
  412c90:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  412c94:	940c      	str	r4, [sp, #48]	@ 0x30
                                       output);
    }

    /* Return to application */
    return status;
}
  412c96:	b003      	add	sp, #12
  412c98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status = arm_depthwise_conv_s8(ctx,
  412c9c:	f7ff bb78 	b.w	412390 <arm_depthwise_conv_s8>
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  412ca0:	69cc      	ldr	r4, [r1, #28]
  412ca2:	2c01      	cmp	r4, #1
  412ca4:	d1e9      	bne.n	412c7a <arm_depthwise_conv_wrapper_s8+0x2a>
  412ca6:	6a0c      	ldr	r4, [r1, #32]
  412ca8:	2c01      	cmp	r4, #1
  412caa:	d1e6      	bne.n	412c7a <arm_depthwise_conv_wrapper_s8+0x2a>
            status = arm_depthwise_conv_s8_opt(ctx,
  412cac:	9c00      	ldr	r4, [sp, #0]
  412cae:	e9cd 6711 	strd	r6, r7, [sp, #68]	@ 0x44
  412cb2:	e9cd 950f 	strd	r9, r5, [sp, #60]	@ 0x3c
  412cb6:	e9cd ba0d 	strd	fp, sl, [sp, #52]	@ 0x34
  412cba:	940c      	str	r4, [sp, #48]	@ 0x30
}
  412cbc:	b003      	add	sp, #12
  412cbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            status = arm_depthwise_conv_s8_opt(ctx,
  412cc2:	f7ff bd79 	b.w	4127b8 <arm_depthwise_conv_s8_opt>
  412cc6:	bf00      	nop

00412cc8 <arm_depthwise_conv_wrapper_s8_get_buffer_size>:

int32_t arm_depthwise_conv_wrapper_s8_get_buffer_size(const cmsis_nn_dw_conv_params *dw_conv_params,
                                                      const cmsis_nn_dims *input_dims,
                                                      const cmsis_nn_dims *filter_dims,
                                                      const cmsis_nn_dims *output_dims)
{
  412cc8:	468c      	mov	ip, r1
    (void)dw_conv_params;
    int32_t size = 0;

    if (input_dims->c == output_dims->c && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  412cca:	68db      	ldr	r3, [r3, #12]
  412ccc:	68c9      	ldr	r1, [r1, #12]
  412cce:	4299      	cmp	r1, r3
  412cd0:	d001      	beq.n	412cd6 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xe>
    {
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
    }

    return size;
}
  412cd2:	2000      	movs	r0, #0
  412cd4:	4770      	bx	lr
    if (input_dims->c == output_dims->c && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
  412cd6:	f8dc 3000 	ldr.w	r3, [ip]
  412cda:	2b01      	cmp	r3, #1
  412cdc:	d1f9      	bne.n	412cd2 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xa>
  412cde:	69c3      	ldr	r3, [r0, #28]
  412ce0:	2b01      	cmp	r3, #1
  412ce2:	d1f6      	bne.n	412cd2 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xa>
  412ce4:	6a03      	ldr	r3, [r0, #32]
  412ce6:	2b01      	cmp	r3, #1
  412ce8:	d1f3      	bne.n	412cd2 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xa>
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
  412cea:	4611      	mov	r1, r2
  412cec:	4660      	mov	r0, ip
  412cee:	f7ff bfa7 	b.w	412c40 <arm_depthwise_conv_s8_opt_get_buffer_size>
  412cf2:	bf00      	nop

00412cf4 <arm_nn_mat_mult_s8>:
                         const int16_t activation_min,
                         const int16_t activation_max,
                         const uint16_t row_len,
                         const int32_t *const bias,
                         q7_t *out)
{
  412cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412cf8:	ed2d 8b10 	vpush	{d8-d15}
  412cfc:	b099      	sub	sp, #100	@ 0x64
  412cfe:	f9bd 40dc 	ldrsh.w	r4, [sp, #220]	@ 0xdc
#if defined(ARM_MATH_MVEI)
    (void)row_offset;
    if (col_batches == 4)
  412d02:	2b04      	cmp	r3, #4
{
  412d04:	9405      	str	r4, [sp, #20]
  412d06:	f9bd 40e0 	ldrsh.w	r4, [sp, #224]	@ 0xe0
  412d0a:	4607      	mov	r7, r0
  412d0c:	9406      	str	r4, [sp, #24]
  412d0e:	4608      	mov	r0, r1
  412d10:	f8bd b0e4 	ldrh.w	fp, [sp, #228]	@ 0xe4
  412d14:	9c3b      	ldr	r4, [sp, #236]	@ 0xec
    if (col_batches == 4)
  412d16:	f000 8098 	beq.w	412e4a <arm_nn_mat_mult_s8+0x156>
        }
        out += 4 * output_ch;
    }
    else
    {
        for (int i_col_batch = (col_batches & ~0x3); i_col_batch < (col_batches & 0x3); i_col_batch++)
  412d1a:	f003 0503 	and.w	r5, r3, #3
  412d1e:	f023 0303 	bic.w	r3, r3, #3
  412d22:	42ab      	cmp	r3, r5
  412d24:	f280 8166 	bge.w	412ff4 <arm_nn_mat_mult_s8+0x300>
                int32_t row_len_tmp = row_len;

                const int8_t *ip_r0 = input_row + (i_out_ch * row_len);
                const int8_t *ip_c0 = input_col + (i_col_batch * row_len);
                int32_t acc_0 = 0;
                const int32_t row_loop_cnt = (row_len + 7) / 8;
  412d28:	f10b 0107 	add.w	r1, fp, #7
  412d2c:	10c9      	asrs	r1, r1, #3
  412d2e:	9104      	str	r1, [sp, #16]
        for (int i_col_batch = (col_batches & ~0x3); i_col_batch < (col_batches & 0x3); i_col_batch++)
  412d30:	2300      	movs	r3, #0
            const uint32x4_t scatter_offset = {0, output_ch, output_ch * 2, output_ch * 3};
  412d32:	4621      	mov	r1, r4
                const int16x8_t offset = vdupq_x_n_s16(col_offset, p);
  412d34:	9e35      	ldr	r6, [sp, #212]	@ 0xd4
  412d36:	e9cd 5709 	strd	r5, r7, [sp, #36]	@ 0x24
  412d3a:	4458      	add	r0, fp
  412d3c:	fa0f fc86 	sxth.w	ip, r6
  412d40:	943b      	str	r4, [sp, #236]	@ 0xec
            for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412d42:	2a00      	cmp	r2, #0
  412d44:	d07f      	beq.n	412e46 <arm_nn_mat_mult_s8+0x152>
            res = vminq_s32(res, vdupq_n_s32(activation_max));
  412d46:	460e      	mov	r6, r1
  412d48:	9933      	ldr	r1, [sp, #204]	@ 0xcc
  412d4a:	e9cd 3207 	strd	r3, r2, [sp, #28]
  412d4e:	f1a1 0904 	sub.w	r9, r1, #4
  412d52:	9932      	ldr	r1, [sp, #200]	@ 0xc8
  412d54:	18b4      	adds	r4, r6, r2
  412d56:	f1a1 0a04 	sub.w	sl, r1, #4
  412d5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
  412d5c:	f8dd 80e8 	ldr.w	r8, [sp, #232]	@ 0xe8
  412d60:	4459      	add	r1, fp
  412d62:	9403      	str	r4, [sp, #12]

                for (int i_row_loop = 0; i_row_loop < row_loop_cnt; i_row_loop++)
  412d64:	9b04      	ldr	r3, [sp, #16]
  412d66:	2b00      	cmp	r3, #0
  412d68:	d06b      	beq.n	412e42 <arm_nn_mat_mult_s8+0x14e>
                int32_t row_len_tmp = row_len;
  412d6a:	465a      	mov	r2, fp
                int32_t acc_0 = 0;
  412d6c:	2400      	movs	r4, #0
__extension__ extern __inline int16x8_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vuninitializedq_s16 (void)
{
  int16x8_t __uninit;
  __asm__ ("": "=w"(__uninit));
  412d6e:	f043 e001 	dls	lr, r3
  return __builtin_mve_vctp16qv8bi (__a);
  412d72:	f012 e801 	bfcsel	0, 412d78 <arm_nn_mat_mult_s8+0x84>, 4, mi

__extension__ extern __inline int16x8_t
__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))
__arm_vdupq_x_n_s16 (int16_t __a, mve_pred16_t __p)
{
  return __builtin_mve_vdupq_m_n_sv8hi (__arm_vuninitializedq_s16 (), __a, __p);
  412d76:	ef20 2150 	vorr	q1, q0, q0
  412d7a:	4613      	mov	r3, r2
  return __builtin_mve_vldrbq_sv8hi ((__builtin_neon_qi *) __base);
  412d7c:	1a85      	subs	r5, r0, r2
  return __builtin_mve_vdupq_m_n_sv8hi (__arm_vuninitializedq_s16 (), __a, __p);
  412d7e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  412d82:	eea2 cb30 	vdup.16	q1, ip
  return __builtin_mve_vldrbq_sv8hi ((__builtin_neon_qi *) __base);
  412d86:	ed95 6e80 	ldc	14, cr6, [r5, #512]	@ 0x200
  return __builtin_mve_vldrbq_z_sv8hi ((__builtin_neon_qi *) __base, __p);
  412d8a:	1acb      	subs	r3, r1, r3
  412d8c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  412d90:	ed93 4e80 	ldc	14, cr4, [r3, #512]	@ 0x200
  return __a + __b;
  412d94:	ef16 6842 	vadd.i16	q3, q3, q1
  return __builtin_mve_vldrbq_sv8hi ((__builtin_neon_qi *) __base);
  412d98:	3a08      	subs	r2, #8
  return __builtin_mve_vmladavaq_p_sv8hi (__a, __b, __c, __p);
  412d9a:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  412d9e:	eef4 4e26 	cdp	14, 15, cr4, cr4, cr6, {1}
                for (int i_row_loop = 0; i_row_loop < row_loop_cnt; i_row_loop++)
  412da2:	f00f c01b 	le	lr, 412d72 <arm_nn_mat_mult_s8+0x7e>
                    int16x8_t r0 = vldrbq_z_s16(ip_r0, p);
                    ip_r0 += 8;
                    acc_0 = vmladavaq_p_s16(acc_0, r0, c0, p);
                }

                if (bias)
  412da6:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
  412da8:	b113      	cbz	r3, 412db0 <arm_nn_mat_mult_s8+0xbc>
                {
                    acc_0 += bias[i_out_ch];
  412daa:	f8d8 2000 	ldr.w	r2, [r8]
  412dae:	4414      	add	r4, r2
                }
                acc_0 = arm_nn_requantize(acc_0, output_mult[i_out_ch], output_shift[i_out_ch]);
  412db0:	f85a 2f04 	ldr.w	r2, [sl, #4]!
    result = (int32_t)(mult.long_long >> 31);
  412db4:	f04f 0e00 	mov.w	lr, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  412db8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  412dbc:	fa04 f303 	lsl.w	r3, r4, r3
    result = (int32_t)(mult.long_long >> 31);
  412dc0:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  412dc4:	f859 7f04 	ldr.w	r7, [r9, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  412dc8:	4252      	negs	r2, r2
    result = (int32_t)(mult.long_long >> 31);
  412dca:	fbc3 4e07 	smlal	r4, lr, r3, r7
  412dce:	e9cd 4e00 	strd	r4, lr, [sp]
  412dd2:	e9dd 4500 	ldrd	r4, r5, [sp]
  412dd6:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  412dda:	2301      	movs	r3, #1
    result = dividend >> exponent;
  412ddc:	e9cd 4500 	strd	r4, r5, [sp]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  412de0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  412de4:	4093      	lsls	r3, r2
    result = dividend >> exponent;
  412de6:	fa44 f202 	asr.w	r2, r4, r2
        threshold++;
  412dea:	9c00      	ldr	r4, [sp, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
  412dec:	3b01      	subs	r3, #1
        threshold++;
  412dee:	0fe5      	lsrs	r5, r4, #31
  412df0:	eb05 0563 	add.w	r5, r5, r3, asr #1
    int32_t remainder = remainder_mask & dividend;
  412df4:	401c      	ands	r4, r3
        result++;
  412df6:	42ac      	cmp	r4, r5
  412df8:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
                acc_0 += out_offset;
  412dfc:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
            for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412dfe:	f108 0804 	add.w	r8, r8, #4
                acc_0 += out_offset;
  412e02:	441a      	add	r2, r3
                acc_0 = MAX(acc_0, activation_min);
  412e04:	9b05      	ldr	r3, [sp, #20]
            for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412e06:	4459      	add	r1, fp
                acc_0 = MAX(acc_0, activation_min);
  412e08:	429a      	cmp	r2, r3
  412e0a:	bfb8      	it	lt
  412e0c:	461a      	movlt	r2, r3
                acc_0 = MIN(acc_0, activation_max);
  412e0e:	9b06      	ldr	r3, [sp, #24]
  412e10:	429a      	cmp	r2, r3
  412e12:	bfa8      	it	ge
  412e14:	461a      	movge	r2, r3
            for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412e16:	9b03      	ldr	r3, [sp, #12]
                out[i_out_ch] = (q7_t)acc_0;
  412e18:	f806 2b01 	strb.w	r2, [r6], #1
            for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412e1c:	429e      	cmp	r6, r3
  412e1e:	d1a1      	bne.n	412d64 <arm_nn_mat_mult_s8+0x70>
  412e20:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
        for (int i_col_batch = (col_batches & ~0x3); i_col_batch < (col_batches & 0x3); i_col_batch++)
  412e24:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  412e26:	3301      	adds	r3, #1
  412e28:	42a3      	cmp	r3, r4
            }
            out += output_ch;
  412e2a:	9903      	ldr	r1, [sp, #12]
        for (int i_col_batch = (col_batches & ~0x3); i_col_batch < (col_batches & 0x3); i_col_batch++)
  412e2c:	4458      	add	r0, fp
  412e2e:	db88      	blt.n	412d42 <arm_nn_mat_mult_s8+0x4e>
  412e30:	4625      	mov	r5, r4
  412e32:	9c3b      	ldr	r4, [sp, #236]	@ 0xec
  412e34:	fb02 4005 	mla	r0, r2, r5, r4
    (void)row_len;
    (void)bias;
    (void)out;
    return NULL;
#endif
}
  412e38:	b019      	add	sp, #100	@ 0x64
  412e3a:	ecbd 8b10 	vpop	{d8-d15}
  412e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412e42:	461c      	mov	r4, r3
  412e44:	e7af      	b.n	412da6 <arm_nn_mat_mult_s8+0xb2>
  412e46:	9103      	str	r1, [sp, #12]
  412e48:	e7ec      	b.n	412e24 <arm_nn_mat_mult_s8+0x130>
        for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412e4a:	2a00      	cmp	r2, #0
  412e4c:	f000 80c8 	beq.w	412fe0 <arm_nn_mat_mult_s8+0x2ec>
  412e50:	9b05      	ldr	r3, [sp, #20]
            const uint32x4_t scatter_offset = {0, output_ch, output_ch * 2, output_ch * 3};
  412e52:	9215      	str	r2, [sp, #84]	@ 0x54
  412e54:	eeac 3b10 	vdup.32	q6, r3
  412e58:	9b06      	ldr	r3, [sp, #24]
  412e5a:	445f      	add	r7, fp
  412e5c:	eeaa 3b10 	vdup.32	q5, r3
  412e60:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
  412e62:	4625      	mov	r5, r4
  412e64:	3b04      	subs	r3, #4
  412e66:	9305      	str	r3, [sp, #20]
  412e68:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  412e6a:	920f      	str	r2, [sp, #60]	@ 0x3c
  412e6c:	3b04      	subs	r3, #4
  412e6e:	9304      	str	r3, [sp, #16]
  412e70:	2300      	movs	r3, #0
  412e72:	9314      	str	r3, [sp, #80]	@ 0x50
  412e74:	0053      	lsls	r3, r2, #1
  412e76:	9316      	str	r3, [sp, #88]	@ 0x58
  412e78:	eb02 0342 	add.w	r3, r2, r2, lsl #1
  412e7c:	9317      	str	r3, [sp, #92]	@ 0x5c
  412e7e:	ed9d 7f14 	ldc	15, cr7, [sp, #80]	@ 0x50
  412e82:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
  412e84:	ed8d 7f0a 	stc	15, cr7, [sp, #40]	@ 0x28
  412e88:	9303      	str	r3, [sp, #12]
            const int32_t row_loop_cnt = (row_len + 7) / 8;
  412e8a:	f10b 0307 	add.w	r3, fp, #7
  412e8e:	10d9      	asrs	r1, r3, #3
  412e90:	9109      	str	r1, [sp, #36]	@ 0x24
            const int8_t *ip_c2 = input_col + (2 * row_len);
  412e92:	eb00 034b 	add.w	r3, r0, fp, lsl #1
  412e96:	ebab 01c1 	sub.w	r1, fp, r1, lsl #3
            const int8_t *ip_c3 = input_col + (3 * row_len);
  412e9a:	eb03 090b 	add.w	r9, r3, fp
  412e9e:	eb03 0a4b 	add.w	sl, r3, fp, lsl #1
  412ea2:	910e      	str	r1, [sp, #56]	@ 0x38
            const int8_t *ip_c1 = input_col + row_len;
  412ea4:	eb00 030b 	add.w	r3, r0, fp
                const int16x8_t offset = vdupq_x_n_s16(col_offset, p);
  412ea8:	9935      	ldr	r1, [sp, #212]	@ 0xd4
            const int8_t *ip_c1 = input_col + row_len;
  412eaa:	9300      	str	r3, [sp, #0]
  412eac:	eb00 034b 	add.w	r3, r0, fp, lsl #1
                const int16x8_t offset = vdupq_x_n_s16(col_offset, p);
  412eb0:	fa0f f881 	sxth.w	r8, r1
  412eb4:	4659      	mov	r1, fp
  412eb6:	469b      	mov	fp, r3
  412eb8:	18a0      	adds	r0, r4, r2
  412eba:	9008      	str	r0, [sp, #32]
  412ebc:	943b      	str	r4, [sp, #236]	@ 0xec
            for (int i_row_loop = 0; i_row_loop < row_loop_cnt; i_row_loop++)
  412ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  412ec0:	2b00      	cmp	r3, #0
  412ec2:	f000 8094 	beq.w	412fee <arm_nn_mat_mult_s8+0x2fa>
            int32_t acc_3 = 0;
  412ec6:	2000      	movs	r0, #0
  412ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            int32_t row_len_tmp = row_len;
  412eca:	460a      	mov	r2, r1
  412ecc:	eba1 0e03 	sub.w	lr, r1, r3
  412ed0:	f1ae 0e08 	sub.w	lr, lr, #8
  412ed4:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  412ed8:	f10e 0e01 	add.w	lr, lr, #1
  412edc:	f04e e001 	dls	lr, lr
            int32_t acc_2 = 0;
  412ee0:	4604      	mov	r4, r0
            int32_t acc_1 = 0;
  412ee2:	4606      	mov	r6, r0
            int32_t acc_0 = 0;
  412ee4:	4684      	mov	ip, r0
  412ee6:	e9cd 5106 	strd	r5, r1, [sp, #24]
  412eea:	4613      	mov	r3, r2
  return __builtin_mve_vctp16qv8bi (__a);
  412eec:	f012 e801 	bfcsel	0, 412ef2 <arm_nn_mat_mult_s8+0x1fe>, 4, mi
  return __builtin_mve_vdupq_m_n_sv8hi (__arm_vuninitializedq_s16 (), __a, __p);
  412ef0:	ef28 6158 	vorr	q3, q4, q4
  412ef4:	ebaa 0102 	sub.w	r1, sl, r2
  return __builtin_mve_vldrbq_sv8hi ((__builtin_neon_qi *) __base);
  412ef8:	ed91 4e80 	ldc	14, cr4, [r1, #512]	@ 0x200
  412efc:	9900      	ldr	r1, [sp, #0]
  412efe:	eba9 0502 	sub.w	r5, r9, r2
  412f02:	1a89      	subs	r1, r1, r2
  412f04:	ed91 0e80 	ldc	14, cr0, [r1, #512]	@ 0x200
  412f08:	ebab 0103 	sub.w	r1, fp, r3
  return __builtin_mve_vdupq_m_n_sv8hi (__arm_vuninitializedq_s16 (), __a, __p);
  412f0c:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  412f10:	eea6 8b30 	vdup.16	q3, r8
  return __builtin_mve_vldrbq_sv8hi ((__builtin_neon_qi *) __base);
  412f14:	ed95 2e80 	ldc	14, cr2, [r5, #512]	@ 0x200
  412f18:	ed91 ee80 	ldc	14, cr14, [r1, #512]	@ 0x200
  return __builtin_mve_vldrbq_z_sv8hi ((__builtin_neon_qi *) __base, __p);
  412f1c:	1afb      	subs	r3, r7, r3
  return __a + __b;
  412f1e:	ef12 2846 	vadd.i16	q1, q1, q3
  412f22:	ef14 4846 	vadd.i16	q2, q2, q3
  412f26:	ef10 0846 	vadd.i16	q0, q0, q3
  412f2a:	ef1e e846 	vadd.i16	q7, q7, q3
  return __builtin_mve_vldrbq_z_sv8hi ((__builtin_neon_qi *) __base, __p);
  412f2e:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  412f32:	ed93 6e80 	ldc	14, cr6, [r3, #512]	@ 0x200
  return __builtin_mve_vldrbq_sv8hi ((__builtin_neon_qi *) __base);
  412f36:	3a08      	subs	r2, #8
  return __builtin_mve_vmladavaq_p_sv8hi (__a, __b, __c, __p);
  412f38:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  412f3c:	eef6 ce20 	cdp	14, 15, cr12, cr6, cr0, {1}
  412f40:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  412f44:	eef6 6e2e 	cdp	14, 15, cr6, cr6, cr14, {1}
  412f48:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  412f4c:	eef6 4e22 	cdp	14, 15, cr4, cr6, cr2, {1}
  412f50:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  412f54:	eef6 0e24 	cdp	14, 15, cr0, cr6, cr4, {1}
            for (int i_row_loop = 0; i_row_loop < row_loop_cnt; i_row_loop++)
  412f58:	f00f c839 	le	lr, 412eea <arm_nn_mat_mult_s8+0x1f6>
  412f5c:	e9dd 5106 	ldrd	r5, r1, [sp, #24]
  412f60:	e9cd c610 	strd	ip, r6, [sp, #64]	@ 0x40
  412f64:	e9cd 4012 	strd	r4, r0, [sp, #72]	@ 0x48
  412f68:	ed9d 7f10 	ldc	15, cr7, [sp, #64]	@ 0x40
            if (bias)
  412f6c:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
  412f6e:	b11b      	cbz	r3, 412f78 <arm_nn_mat_mult_s8+0x284>
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  412f70:	9b03      	ldr	r3, [sp, #12]
  412f72:	681b      	ldr	r3, [r3, #0]
  412f74:	ee27 6f43 	cdp	15, 2, cr6, cr7, cr3, {2}
        for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412f78:	9b03      	ldr	r3, [sp, #12]
            res = arm_requantize_mve(res, output_mult[i_out_ch], output_shift[i_out_ch]);
  412f7a:	9a04      	ldr	r2, [sp, #16]
        for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412f7c:	3304      	adds	r3, #4
            res = arm_requantize_mve(res, output_mult[i_out_ch], output_shift[i_out_ch]);
  412f7e:	9805      	ldr	r0, [sp, #20]
        for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412f80:	9303      	str	r3, [sp, #12]
            res = arm_requantize_mve(res, output_mult[i_out_ch], output_shift[i_out_ch]);
  412f82:	f852 3f04 	ldr.w	r3, [r2, #4]!
        for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412f86:	440f      	add	r7, r1
            res = arm_requantize_mve(res, output_mult[i_out_ch], output_shift[i_out_ch]);
  412f88:	9204      	str	r2, [sp, #16]
  412f8a:	f850 2f04 	ldr.w	r2, [r0, #4]!
  412f8e:	9005      	str	r0, [sp, #20]
        arm_doubling_high_mult_mve(vshlq_s32(val, vdupq_n_s32(LEFT_SHIFT(shift))), multiplier), RIGHT_SHIFT(shift));
  412f90:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
  return __builtin_mve_vdupq_n_sv4si (__a);
  412f94:	eea2 0b10 	vdup.32	q1, r0
  return __builtin_mve_vshlq_sv4si (__a, __b);
  412f98:	ef22 6446 	vshl.s32	q3, q3, q1
    return arm_divide_by_power_of_two_mve(
  412f9c:	425b      	negs	r3, r3
  412f9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    const int32x4_t shift = vdupq_n_s32(-exponent);
  412fa2:	425b      	negs	r3, r3
  return __builtin_mve_vdupq_n_sv4si (__a);
  412fa4:	eea4 3b10 	vdup.32	q2, r3
  return __builtin_mve_vqrdmulhq_n_sv4si (__a, __b);
  412fa8:	fe27 6e62 	cdp2	14, 2, cr6, cr7, cr2, {3}
  return __builtin_mve_vandq_sv4si (__a, __b);
  412fac:	ef06 2154 	vand	q1, q3, q2
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  412fb0:	efa1 2052 	vshr.s32	q1, q1, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  412fb4:	ef26 6052 	vqadd.s32	q3, q3, q1
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  412fb8:	ef24 6546 	vrshl.s32	q3, q3, q2
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  412fbc:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
  __builtin_mve_vstrbq_scatter_offset_sv4si ((__builtin_neon_qi *) __base, __offset, __value);
  412fbe:	ed9d 5f0a 	ldc	15, cr5, [sp, #40]	@ 0x28
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  412fc2:	ee27 6f43 	cdp	15, 2, cr6, cr7, cr3, {2}
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  412fc6:	ef26 664c 	vmax.s32	q3, q3, q6
  return __builtin_mve_vminq_sv4si (__a, __b);
  412fca:	ef26 665a 	vmin.s32	q3, q3, q5
  __builtin_mve_vstrbq_scatter_offset_sv4si ((__builtin_neon_qi *) __base, __offset, __value);
  412fce:	ec85 6f04 	stc	15, cr6, [r5], {4}
        for (int i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
  412fd2:	9b08      	ldr	r3, [sp, #32]
  412fd4:	3501      	adds	r5, #1
  412fd6:	42ab      	cmp	r3, r5
  412fd8:	f47f af71 	bne.w	412ebe <arm_nn_mat_mult_s8+0x1ca>
  412fdc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  412fde:	9c3b      	ldr	r4, [sp, #236]	@ 0xec
        out += 4 * output_ch;
  412fe0:	eb04 0082 	add.w	r0, r4, r2, lsl #2
}
  412fe4:	b019      	add	sp, #100	@ 0x64
  412fe6:	ecbd 8b10 	vpop	{d8-d15}
  412fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for (int i_row_loop = 0; i_row_loop < row_loop_cnt; i_row_loop++)
  412fee:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  412ff2:	e7bb      	b.n	412f6c <arm_nn_mat_mult_s8+0x278>
        for (int i_col_batch = (col_batches & ~0x3); i_col_batch < (col_batches & 0x3); i_col_batch++)
  412ff4:	4620      	mov	r0, r4
    return out;
  412ff6:	e71f      	b.n	412e38 <arm_nn_mat_mult_s8+0x144>

00412ff8 <arm_nn_depthwise_conv_nt_t_padded_s8>:
                                                         const int32_t activation_min,
                                                         const int32_t activation_max,
                                                         const uint16_t row_x_col,
                                                         const int32_t *const output_bias,
                                                         q7_t *out)
{
  412ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412ffc:	4684      	mov	ip, r0
  412ffe:	4698      	mov	r8, r3
#if defined(ARM_MATH_MVEI)
    int32_t loop_count = (active_ch + 3) / 4;
  413000:	1d98      	adds	r0, r3, #6
  413002:	3303      	adds	r3, #3
{
  413004:	ed2d 8b10 	vpush	{d8-d15}
    int32_t loop_count = (active_ch + 3) / 4;
  413008:	bf48      	it	mi
  41300a:	4603      	movmi	r3, r0
{
  41300c:	b095      	sub	sp, #84	@ 0x54
    int32_t loop_count = (active_ch + 3) / 4;
  41300e:	109b      	asrs	r3, r3, #2
    const int32_t *bias = output_bias;
    uint32_t num_ch_to_process = active_ch;

    for (int i_loop_cnt = 0, offset = 0; i_loop_cnt < loop_count;
  413010:	f1b8 0f00 	cmp.w	r8, #0
{
  413014:	9e2e      	ldr	r6, [sp, #184]	@ 0xb8
  413016:	f8dd a0c4 	ldr.w	sl, [sp, #196]	@ 0xc4
  41301a:	f8bd e0d0 	ldrh.w	lr, [sp, #208]	@ 0xd0
  41301e:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
    int32_t loop_count = (active_ch + 3) / 4;
  413020:	9306      	str	r3, [sp, #24]
    for (int i_loop_cnt = 0, offset = 0; i_loop_cnt < loop_count;
  413022:	f340 80f6 	ble.w	413212 <arm_nn_depthwise_conv_nt_t_padded_s8+0x21a>
  413026:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  413028:	f04f 0b00 	mov.w	fp, #0
  41302c:	eeae 3b10 	vdup.32	q7, r3
  413030:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
        int32x4_t out_2 = out_0;
        int32x4_t out_3 = out_0;

        const int8_t *rhs_0 = rhs + offset;
        const int8_t *lhs_0 = lhs + offset;
        const int8_t *lhs_1 = lhs + row_x_col * CH_IN_BLOCK_MVE + offset;
  413032:	ebce 104e 	rsb	r0, lr, lr, lsl #5
  413036:	eea6 3b10 	vdup.32	q3, r3
  41303a:	ed8d 7f0e 	stc	15, cr7, [sp, #56]	@ 0x38
  return __builtin_mve_vdupq_n_sv4si (__a);
  41303e:	eea6 bb10 	vdup.32	q3, fp
        const int8_t *lhs_2 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 2) + offset;
        const int8_t *lhs_3 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 3) + offset;
  413042:	f44f 73ba 	mov.w	r3, #372	@ 0x174
  413046:	ed8d 7f08 	stc	15, cr7, [sp, #32]
  41304a:	fb03 f30e 	mul.w	r3, r3, lr
  41304e:	eb07 0946 	add.w	r9, r7, r6, lsl #1
        const int8_t *lhs_1 = lhs + row_x_col * CH_IN_BLOCK_MVE + offset;
  413052:	0084      	lsls	r4, r0, #2
  413054:	464f      	mov	r7, r9
        const int8_t *lhs_2 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 2) + offset;
  413056:	00c0      	lsls	r0, r0, #3
  413058:	4441      	add	r1, r8
  41305a:	f8dd 90d8 	ldr.w	r9, [sp, #216]	@ 0xd8
        const int8_t *lhs_1 = lhs + row_x_col * CH_IN_BLOCK_MVE + offset;
  41305e:	940c      	str	r4, [sp, #48]	@ 0x30
        const int8_t *lhs_2 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 2) + offset;
  413060:	900d      	str	r0, [sp, #52]	@ 0x34
  413062:	9112      	str	r1, [sp, #72]	@ 0x48
        const int8_t *lhs_3 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 3) + offset;
  413064:	9307      	str	r3, [sp, #28]
  413066:	9205      	str	r2, [sp, #20]
  413068:	f8cd e04c 	str.w	lr, [sp, #76]	@ 0x4c
  41306c:	2300      	movs	r3, #0
  41306e:	eea6 3b10 	vdup.32	q3, r3
        if (bias)
  413072:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
  413074:	b123      	cbz	r3, 413080 <arm_nn_depthwise_conv_nt_t_padded_s8+0x88>
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  413076:	461a      	mov	r2, r3
  413078:	ed92 7f00 	ldc	15, cr7, [r2]
  41307c:	3310      	adds	r3, #16
  41307e:	9335      	str	r3, [sp, #212]	@ 0xd4
        const int8_t *lhs_1 = lhs + row_x_col * CH_IN_BLOCK_MVE + offset;
  413080:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
        const int8_t *rhs_0 = rhs + offset;
  413082:	9b12      	ldr	r3, [sp, #72]	@ 0x48
        const int8_t *lhs_1 = lhs + row_x_col * CH_IN_BLOCK_MVE + offset;
  413084:	eb0c 0002 	add.w	r0, ip, r2
        const int8_t *lhs_2 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 2) + offset;
  413088:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
        const int8_t *lhs_0 = lhs + offset;
  41308a:	4661      	mov	r1, ip
        const int8_t *lhs_2 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 2) + offset;
  41308c:	eb0c 0402 	add.w	r4, ip, r2
        const int8_t *lhs_3 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 3) + offset;
  413090:	9a07      	ldr	r2, [sp, #28]
        int32x4_t out_3 = out_0;
  413092:	ef26 2156 	vorr	q1, q3, q3
        const int8_t *lhs_3 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 3) + offset;
  413096:	eb02 050c 	add.w	r5, r2, ip

        for (int i_row_x_col = 0; i_row_x_col < row_x_col; i_row_x_col++)
  41309a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
        int32x4_t out_2 = out_0;
  41309c:	ef26 0156 	vorr	q0, q3, q3
        int32x4_t out_1 = out_0;
  4130a0:	ed8d 7f00 	stc	15, cr7, [sp]
        const int8_t *rhs_0 = rhs + offset;
  4130a4:	eba3 0308 	sub.w	r3, r3, r8
        for (int i_row_x_col = 0; i_row_x_col < row_x_col; i_row_x_col++)
  4130a8:	b362      	cbz	r2, 413104 <arm_nn_depthwise_conv_nt_t_padded_s8+0x10c>
  4130aa:	ef26 4156 	vorr	q2, q3, q3
  4130ae:	f042 e001 	dls	lr, r2
  4130b2:	9a05      	ldr	r2, [sp, #20]
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  4130b4:	ecb1 8f7c 	ldc	15, cr8, [r1], #496	@ 0x1f0
  4130b8:	ed93 af00 	ldc	15, cr10, [r3]
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4130bc:	ee29 8f42 	cdp	15, 2, cr8, cr9, cr2, {2}
  return __builtin_mve_vmulq_sv4si (__a, __b);
  4130c0:	ef28 895a 	vmul.i32	q4, q4, q5
        {
            const int32x4_t ker_0 = vldrbq_s32(rhs_0);

            int32x4_t ip_0 = vldrbq_s32(lhs_0);
            ip_0 = vaddq_n_s32(ip_0, input_offset);
            out_0 += vmulq_s32(ip_0, ker_0);
  4130c4:	ef26 6848 	vadd.i32	q3, q3, q4
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  4130c8:	ecb0 8f7c 	ldc	15, cr8, [r0], #496	@ 0x1f0
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4130cc:	ee29 8f42 	cdp	15, 2, cr8, cr9, cr2, {2}
  return __builtin_mve_vmulq_sv4si (__a, __b);
  4130d0:	ef28 895a 	vmul.i32	q4, q4, q5

            int32x4_t ip_1 = vldrbq_s32(lhs_1);
            ip_1 = vaddq_n_s32(ip_1, input_offset);
            out_1 += vmulq_s32(ip_1, ker_0);
  4130d4:	ef24 4848 	vadd.i32	q2, q2, q4
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  4130d8:	ecb4 8f7c 	ldc	15, cr8, [r4], #496	@ 0x1f0
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4130dc:	ee29 8f42 	cdp	15, 2, cr8, cr9, cr2, {2}
  return __builtin_mve_vmulq_sv4si (__a, __b);
  4130e0:	ef28 895a 	vmul.i32	q4, q4, q5

            int32x4_t ip_2 = vldrbq_s32(lhs_2);
            ip_2 = vaddq_n_s32(ip_2, input_offset);
            out_2 += vmulq_s32(ip_2, ker_0);
  4130e4:	ef20 0848 	vadd.i32	q0, q0, q4
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  4130e8:	ecb5 8f7c 	ldc	15, cr8, [r5], #496	@ 0x1f0
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4130ec:	ee29 8f42 	cdp	15, 2, cr8, cr9, cr2, {2}
  return __builtin_mve_vmulq_sv4si (__a, __b);
  4130f0:	ef28 895a 	vmul.i32	q4, q4, q5
            lhs_0 += CH_IN_BLOCK_MVE;
            lhs_1 += CH_IN_BLOCK_MVE;
            lhs_2 += CH_IN_BLOCK_MVE;
            lhs_3 += CH_IN_BLOCK_MVE;

            rhs_0 += total_ch;
  4130f4:	4433      	add	r3, r6
            out_3 += vmulq_s32(ip_3, ker_0);
  4130f6:	ef22 2848 	vadd.i32	q1, q1, q4
        for (int i_row_x_col = 0; i_row_x_col < row_x_col; i_row_x_col++)
  4130fa:	f00f c825 	le	lr, 4130b4 <arm_nn_depthwise_conv_nt_t_padded_s8+0xbc>
  4130fe:	ed8d 5f00 	stc	15, cr5, [sp]
  413102:	9205      	str	r2, [sp, #20]
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  413104:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
  413106:	982f      	ldr	r0, [sp, #188]	@ 0xbc
  413108:	461a      	mov	r2, r3
  41310a:	ed92 bf00 	ldc	15, cr11, [r2]
  41310e:	4602      	mov	r2, r0
  413110:	ed92 9f00 	ldc	15, cr9, [r2]
  return __builtin_mve_vcmpgtq_n_v4si (__a, __b);
  413114:	2200      	movs	r2, #0
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  413116:	ed9d df08 	ldc	15, cr13, [sp, #32]
  return __builtin_mve_vcmpgtq_n_v4si (__a, __b);
  41311a:	fe29 1f62 	cdp2	15, 2, cr1, cr9, cr2, {3}
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  41311e:	fe39 4f0d 	cdp2	15, 3, cr4, cr9, cr13, {0}
  413122:	fe3d 8f09 	cdp2	15, 3, cr8, cr13, cr9, {0}
  return __builtin_mve_vshlq_sv4si (__a, __b);
  413126:	ef24 6446 	vshl.s32	q3, q3, q2
  41312a:	ef24 c154 	vorr	q6, q2, q2
  41312e:	ed9d 5f00 	ldc	15, cr5, [sp]
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  413132:	ff26 6b4a 	vqrdmulh.s32	q3, q3, q5
  return __builtin_mve_vshlq_sv4si (__a, __b);
  413136:	ef2c 4444 	vshl.s32	q2, q2, q6
  41313a:	ef2c 0440 	vshl.s32	q0, q0, q6
  41313e:	ef2c 2442 	vshl.s32	q1, q1, q6
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  413142:	ff24 4b4a 	vqrdmulh.s32	q2, q2, q5
  413146:	ff20 0b4a 	vqrdmulh.s32	q0, q0, q5
  41314a:	ff22 2b4a 	vqrdmulh.s32	q1, q1, q5
  return __builtin_mve_vandq_sv4si (__a, __b);
  41314e:	ef06 a158 	vand	q5, q3, q4
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  413152:	efa1 a05a 	vshr.s32	q5, q5, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  413156:	ef26 605a 	vqadd.s32	q3, q3, q5
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  41315a:	ef28 6546 	vrshl.s32	q3, q3, q4
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  41315e:	ee27 6f4a 	cdp	15, 2, cr6, cr7, cr10, {2}
  return __builtin_mve_vminq_sv4si (__a, __b);
  413162:	ed9d bf0e 	ldc	15, cr11, [sp, #56]	@ 0x38
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  413166:	ef26 664e 	vmax.s32	q3, q3, q7
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  41316a:	f028 e801 	bfcsel	0, 413170 <arm_nn_depthwise_conv_nt_t_padded_s8+0x178>, 2, ge
  return __builtin_mve_vminq_sv4si (__a, __b);
  41316e:	ef26 665a 	vmin.s32	q3, q3, q5
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  413172:	464a      	mov	r2, r9
  413174:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413178:	ed82 6f00 	stc	15, cr6, [r2]
  return __builtin_mve_vandq_sv4si (__a, __b);
  41317c:	ef04 6158 	vand	q3, q2, q4
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  413180:	efa1 6056 	vshr.s32	q3, q3, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  413184:	ef24 4056 	vqadd.s32	q2, q2, q3
  return __builtin_mve_vandq_sv4si (__a, __b);
  413188:	ef00 6158 	vand	q3, q0, q4
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  41318c:	efa1 6056 	vshr.s32	q3, q3, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  413190:	ef20 0056 	vqadd.s32	q0, q0, q3
  return __builtin_mve_vandq_sv4si (__a, __b);
  413194:	ef02 6158 	vand	q3, q1, q4
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  413198:	ef28 4544 	vrshl.s32	q2, q2, q4
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  41319c:	efa1 6056 	vshr.s32	q3, q3, #31
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4131a0:	ee25 4f4a 	cdp	15, 2, cr4, cr5, cr10, {2}
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  4131a4:	ef28 0540 	vrshl.s32	q0, q0, q4
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  4131a8:	ef22 6056 	vqadd.s32	q3, q1, q3
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  4131ac:	ef24 464e 	vmax.s32	q2, q2, q7
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4131b0:	ee21 0f4a 	cdp	15, 2, cr0, cr1, cr10, {2}
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  4131b4:	ef28 6546 	vrshl.s32	q3, q3, q4
  return __builtin_mve_vminq_sv4si (__a, __b);
  4131b8:	ef24 465a 	vmin.s32	q2, q2, q5
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  4131bc:	ef20 064e 	vmax.s32	q0, q0, q7
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4131c0:	ee27 6f4a 	cdp	15, 2, cr6, cr7, cr10, {2}
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  4131c4:	eb09 0106 	add.w	r1, r9, r6
  4131c8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  4131cc:	ed81 4f00 	stc	15, cr4, [r1]
  return __builtin_mve_vminq_sv4si (__a, __b);
  4131d0:	ef20 065a 	vmin.s32	q0, q0, q5
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  4131d4:	ef26 664e 	vmax.s32	q3, q3, q7
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  4131d8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  4131dc:	ed87 0f00 	stc	15, cr0, [r7]
  return __builtin_mve_vminq_sv4si (__a, __b);
  4131e0:	ef26 665a 	vmin.s32	q3, q3, q5
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  4131e4:	3310      	adds	r3, #16
  4131e6:	9330      	str	r3, [sp, #192]	@ 0xc0
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  4131e8:	19bb      	adds	r3, r7, r6
  4131ea:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  4131ee:	ed83 6f00 	stc	15, cr6, [r3]
    for (int i_loop_cnt = 0, offset = 0; i_loop_cnt < loop_count;
  4131f2:	9b06      	ldr	r3, [sp, #24]
         num_ch_to_process -= 4, out += 4, offset += 4, i_loop_cnt++)
  4131f4:	f10b 0b01 	add.w	fp, fp, #1
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  4131f8:	3010      	adds	r0, #16
    for (int i_loop_cnt = 0, offset = 0; i_loop_cnt < loop_count;
  4131fa:	455b      	cmp	r3, fp
  4131fc:	f10c 0c04 	add.w	ip, ip, #4
  413200:	902f      	str	r0, [sp, #188]	@ 0xbc
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  413202:	f1a8 0804 	sub.w	r8, r8, #4
         num_ch_to_process -= 4, out += 4, offset += 4, i_loop_cnt++)
  413206:	f109 0904 	add.w	r9, r9, #4
  41320a:	f107 0704 	add.w	r7, r7, #4
    for (int i_loop_cnt = 0, offset = 0; i_loop_cnt < loop_count;
  41320e:	f73f af2d 	bgt.w	41306c <arm_nn_depthwise_conv_nt_t_padded_s8+0x74>
    (void)row_x_col;
    (void)output_bias;
    (void)out;
    return ARM_CMSIS_NN_NO_IMPL_ERROR;
#endif
}
  413212:	2000      	movs	r0, #0
  413214:	b015      	add	sp, #84	@ 0x54
  413216:	ecbd 8b10 	vpop	{d8-d15}
  41321a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41321e:	bf00      	nop

00413220 <arm_nn_depthwise_conv_nt_t_s8>:
                                                  const int32_t activation_min,
                                                  const int32_t activation_max,
                                                  const uint16_t row_x_col,
                                                  const int32_t *const output_bias,
                                                  q7_t *out)
{
  413220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413224:	ed2d 8b10 	vpush	{d8-d15}
  413228:	b095      	sub	sp, #84	@ 0x54
  41322a:	461f      	mov	r7, r3
  41322c:	9206      	str	r2, [sp, #24]
#if defined(ARM_MATH_MVEI)
    const int32_t *bias = output_bias;
    int32_t loop_count = (active_ch + 3) / 4;
  41322e:	1d9a      	adds	r2, r3, #6
  413230:	3303      	adds	r3, #3
  413232:	bf48      	it	mi
  413234:	4613      	movmi	r3, r2
    uint32_t num_ch_to_process = active_ch;

    for (int i_loop_cnt = 0, offset = 0; i_loop_cnt < loop_count;
  413236:	2f00      	cmp	r7, #0
    int32_t loop_count = (active_ch + 3) / 4;
  413238:	ea4f 03a3 	mov.w	r3, r3, asr #2
{
  41323c:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
  41323e:	f8dd 90c4 	ldr.w	r9, [sp, #196]	@ 0xc4
  413242:	f8bd e0d0 	ldrh.w	lr, [sp, #208]	@ 0xd0
  413246:	9e36      	ldr	r6, [sp, #216]	@ 0xd8
    int32_t loop_count = (active_ch + 3) / 4;
  413248:	9305      	str	r3, [sp, #20]
    for (int i_loop_cnt = 0, offset = 0; i_loop_cnt < loop_count;
  41324a:	f340 80f8 	ble.w	41343e <arm_nn_depthwise_conv_nt_t_s8+0x21e>
  41324e:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  413250:	f04f 0a00 	mov.w	sl, #0
  413254:	eeae 3b10 	vdup.32	q7, r3
  413258:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
  return __builtin_mve_vdupq_n_sv4si (__a);
  41325a:	46d3      	mov	fp, sl
  41325c:	eea6 3b10 	vdup.32	q3, r3
  413260:	ed8d 7f0e 	stc	15, cr7, [sp, #56]	@ 0x38
  413264:	eea6 ab10 	vdup.32	q3, sl

        const int8_t *rhs_0 = rhs + offset;
        const int8_t *lhs_0 = lhs + offset;
        const int8_t *lhs_1 = lhs + row_x_col * CH_IN_BLOCK_MVE + offset;
        const int8_t *lhs_2 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 2) + offset;
        const int8_t *lhs_3 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 3) + offset;
  413268:	f44f 73ba 	mov.w	r3, #372	@ 0x174
  41326c:	ed8d 7f08 	stc	15, cr7, [sp, #32]
  413270:	fb03 f30e 	mul.w	r3, r3, lr
        const int8_t *lhs_1 = lhs + row_x_col * CH_IN_BLOCK_MVE + offset;
  413274:	ebce 124e 	rsb	r2, lr, lr, lsl #5
  413278:	eb06 0845 	add.w	r8, r6, r5, lsl #1
  41327c:	4684      	mov	ip, r0
  41327e:	0090      	lsls	r0, r2, #2
        const int8_t *lhs_2 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 2) + offset;
  413280:	00d2      	lsls	r2, r2, #3
  413282:	4646      	mov	r6, r8
  413284:	920d      	str	r2, [sp, #52]	@ 0x34
  413286:	46b8      	mov	r8, r7
  413288:	19ca      	adds	r2, r1, r7
  41328a:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
        const int8_t *lhs_1 = lhs + row_x_col * CH_IN_BLOCK_MVE + offset;
  41328c:	900c      	str	r0, [sp, #48]	@ 0x30
  41328e:	9212      	str	r2, [sp, #72]	@ 0x48
        const int8_t *lhs_3 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 3) + offset;
  413290:	9307      	str	r3, [sp, #28]
  413292:	f8cd e04c 	str.w	lr, [sp, #76]	@ 0x4c
        if (bias)
  413296:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
  413298:	eea4 bb10 	vdup.32	q2, fp
  41329c:	b123      	cbz	r3, 4132a8 <arm_nn_depthwise_conv_nt_t_s8+0x88>
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  41329e:	461a      	mov	r2, r3
  4132a0:	ed92 5f00 	ldc	15, cr5, [r2]
  4132a4:	3310      	adds	r3, #16
  4132a6:	9335      	str	r3, [sp, #212]	@ 0xd4
        const int8_t *rhs_0 = rhs + offset;
  4132a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  return __builtin_mve_vdupq_n_sv4si (__a);
  4132aa:	eea8 bb10 	vdup.32	q4, fp
  4132ae:	eba3 0308 	sub.w	r3, r3, r8
  4132b2:	9300      	str	r3, [sp, #0]
        const int8_t *lhs_1 = lhs + row_x_col * CH_IN_BLOCK_MVE + offset;
  4132b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
        const int8_t *lhs_0 = lhs + offset;
  4132b6:	4662      	mov	r2, ip
        const int8_t *lhs_1 = lhs + row_x_col * CH_IN_BLOCK_MVE + offset;
  4132b8:	eb0c 0103 	add.w	r1, ip, r3
        const int8_t *lhs_2 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 2) + offset;
  4132bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
        int32x4_t out_3 = out_0;
  4132be:	ef24 c154 	vorr	q6, q2, q2
        const int8_t *lhs_2 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 2) + offset;
  4132c2:	eb0c 0003 	add.w	r0, ip, r3
        const int8_t *lhs_3 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 3) + offset;
  4132c6:	9b07      	ldr	r3, [sp, #28]
        int32x4_t out_2 = out_0;
  4132c8:	ef24 a154 	vorr	q5, q2, q2
        const int8_t *lhs_3 = lhs + (row_x_col * CH_IN_BLOCK_MVE * 3) + offset;
  4132cc:	eb0c 0403 	add.w	r4, ip, r3
        int32x4_t ker_sum = vdupq_n_s32(0);

        for (int i_row_x_col = 0; i_row_x_col < row_x_col; i_row_x_col++)
  4132d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  4132d2:	2b00      	cmp	r3, #0
  4132d4:	f000 80b9 	beq.w	41344a <arm_nn_depthwise_conv_nt_t_s8+0x22a>
        int32x4_t out_1 = out_0;
  4132d8:	ef24 2154 	vorr	q1, q2, q2
        for (int i_row_x_col = 0; i_row_x_col < row_x_col; i_row_x_col++)
  4132dc:	f043 e001 	dls	lr, r3
        int32x4_t out_1 = out_0;
  4132e0:	9b00      	ldr	r3, [sp, #0]
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  4132e2:	ed93 6f00 	ldc	15, cr6, [r3]
  4132e6:	ecb2 0f7c 	ldc	15, cr0, [r2], #496	@ 0x1f0
  return __builtin_mve_vmulq_sv4si (__a, __b);
  4132ea:	ef20 0956 	vmul.i32	q0, q0, q3
        {
            const int32x4_t ker_0 = vldrbq_s32(rhs_0);
            ker_sum = vaddq_s32(ker_sum, ker_0);

            int32x4_t ip_0 = vldrbq_s32(lhs_0);
            out_0 += vmulq_s32(ip_0, ker_0);
  4132ee:	ef24 4840 	vadd.i32	q2, q2, q0
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  4132f2:	ecb1 0f7c 	ldc	15, cr0, [r1], #496	@ 0x1f0
  return __builtin_mve_vmulq_sv4si (__a, __b);
  4132f6:	ef20 0956 	vmul.i32	q0, q0, q3

            int32x4_t ip_1 = vldrbq_s32(lhs_1);
            out_1 += vmulq_s32(ip_1, ker_0);
  4132fa:	ef22 2840 	vadd.i32	q1, q1, q0
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  4132fe:	ecb0 0f7c 	ldc	15, cr0, [r0], #496	@ 0x1f0
  return __builtin_mve_vmulq_sv4si (__a, __b);
  413302:	ef20 0956 	vmul.i32	q0, q0, q3

            int32x4_t ip_2 = vldrbq_s32(lhs_2);
            out_2 += vmulq_s32(ip_2, ker_0);
  413306:	ef2a a840 	vadd.i32	q5, q5, q0
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  41330a:	ecb4 0f7c 	ldc	15, cr0, [r4], #496	@ 0x1f0
  return __a + __b;
  41330e:	ef28 8846 	vadd.i32	q4, q4, q3
  return __builtin_mve_vmulq_sv4si (__a, __b);
  413312:	ef20 6956 	vmul.i32	q3, q0, q3
            lhs_0 += CH_IN_BLOCK_MVE;
            lhs_1 += CH_IN_BLOCK_MVE;
            lhs_2 += CH_IN_BLOCK_MVE;
            lhs_3 += CH_IN_BLOCK_MVE;

            rhs_0 += total_ch;
  413316:	442b      	add	r3, r5
            out_3 += vmulq_s32(ip_3, ker_0);
  413318:	ef2c c846 	vadd.i32	q6, q6, q3
        for (int i_row_x_col = 0; i_row_x_col < row_x_col; i_row_x_col++)
  41331c:	f00f c81f 	le	lr, 4132e2 <arm_nn_depthwise_conv_nt_t_s8+0xc2>
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  413320:	992f      	ldr	r1, [sp, #188]	@ 0xbc
  return __builtin_mve_vmulq_n_sv4si (__a, __b);
  413322:	9b06      	ldr	r3, [sp, #24]
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  413324:	4608      	mov	r0, r1
  return __builtin_mve_vmulq_n_sv4si (__a, __b);
  413326:	ee29 9e63 	cdp	14, 2, cr9, cr9, cr3, {3}
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  41332a:	ed90 7f00 	ldc	15, cr7, [r0]
        }

        ker_sum = vmulq_n_s32(ker_sum, input_offset);
        out_0 = ker_sum + out_0;
  41332e:	ef28 4844 	vadd.i32	q2, q4, q2
  return __builtin_mve_vcmpgtq_n_v4si (__a, __b);
  413332:	fe27 1f6b 	cdp2	15, 2, cr1, cr7, cr11, {3}
  413336:	ed8d 5f00 	stc	15, cr5, [sp]
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  41333a:	ed9d 5f08 	ldc	15, cr5, [sp, #32]
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  41333e:	3110      	adds	r1, #16
  413340:	912f      	str	r1, [sp, #188]	@ 0xbc
  413342:	9930      	ldr	r1, [sp, #192]	@ 0xc0
        out_1 = ker_sum + out_1;
  413344:	ef28 2842 	vadd.i32	q1, q4, q1
        out_2 = ker_sum + out_2;
  413348:	ef28 a84a 	vadd.i32	q5, q4, q5
  41334c:	4608      	mov	r0, r1
        out_3 = ker_sum + out_3;
  41334e:	ef28 884c 	vadd.i32	q4, q4, q6
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  413352:	fe37 cf05 	cdp2	15, 3, cr12, cr7, cr5, {0}
  413356:	fe35 6f07 	cdp2	15, 3, cr6, cr5, cr7, {0}
  return __builtin_mve_vshlq_sv4si (__a, __b);
  41335a:	ed9d 5f00 	ldc	15, cr5, [sp]
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  41335e:	ed90 1f00 	ldc	15, cr1, [r0]
  return __builtin_mve_vshlq_sv4si (__a, __b);
  413362:	ef2c 4444 	vshl.s32	q2, q2, q6
  413366:	ef2c 2442 	vshl.s32	q1, q1, q6
  41336a:	ef2c a44a 	vshl.s32	q5, q5, q6
  41336e:	ef2c 8448 	vshl.s32	q4, q4, q6
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  413372:	ff24 4b40 	vqrdmulh.s32	q2, q2, q0
  413376:	ff22 2b40 	vqrdmulh.s32	q1, q1, q0
  41337a:	ff2a ab40 	vqrdmulh.s32	q5, q5, q0
  41337e:	ff28 8b40 	vqrdmulh.s32	q4, q4, q0
  return __builtin_mve_vandq_sv4si (__a, __b);
  413382:	ef04 0156 	vand	q0, q2, q3
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  413386:	efa1 0050 	vshr.s32	q0, q0, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  41338a:	ef24 4050 	vqadd.s32	q2, q2, q0
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  41338e:	ef26 4544 	vrshl.s32	q2, q2, q3
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  413392:	ee25 4f49 	cdp	15, 2, cr4, cr5, cr9, {2}
  return __builtin_mve_vminq_sv4si (__a, __b);
  413396:	ed9d df0e 	ldc	15, cr13, [sp, #56]	@ 0x38
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  41339a:	ef24 464e 	vmax.s32	q2, q2, q7
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  41339e:	f028 e801 	bfcsel	0, 4133a4 <arm_nn_depthwise_conv_nt_t_s8+0x184>, 2, ge
  return __builtin_mve_vminq_sv4si (__a, __b);
  4133a2:	ef24 465c 	vmin.s32	q2, q2, q6
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  4133a6:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  4133aa:	ed87 4f00 	stc	15, cr4, [r7]
  return __builtin_mve_vandq_sv4si (__a, __b);
  4133ae:	ef02 4156 	vand	q2, q1, q3
  4133b2:	ef0a 0156 	vand	q0, q5, q3
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  4133b6:	efa1 4054 	vshr.s32	q2, q2, #31
  4133ba:	efa1 0050 	vshr.s32	q0, q0, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  4133be:	ef22 2054 	vqadd.s32	q1, q1, q2
  return __builtin_mve_vandq_sv4si (__a, __b);
  4133c2:	ef08 4156 	vand	q2, q4, q3
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  4133c6:	ef26 2542 	vrshl.s32	q1, q1, q3
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  4133ca:	ef2a 0050 	vqadd.s32	q0, q5, q0
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  4133ce:	efa1 4054 	vshr.s32	q2, q2, #31
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  4133d2:	ef26 0540 	vrshl.s32	q0, q0, q3
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4133d6:	ee23 2f49 	cdp	15, 2, cr2, cr3, cr9, {2}
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  4133da:	ef28 4054 	vqadd.s32	q2, q4, q2
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  4133de:	ef22 264e 	vmax.s32	q1, q1, q7
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4133e2:	ee21 0f49 	cdp	15, 2, cr0, cr1, cr9, {2}
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  4133e6:	ef26 6544 	vrshl.s32	q3, q2, q3
  return __builtin_mve_vminq_sv4si (__a, __b);
  4133ea:	ef22 265c 	vmin.s32	q1, q1, q6
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  4133ee:	ef20 064e 	vmax.s32	q0, q0, q7
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4133f2:	ee27 6f49 	cdp	15, 2, cr6, cr7, cr9, {2}
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  4133f6:	197a      	adds	r2, r7, r5
  4133f8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  4133fc:	ed82 2f00 	stc	15, cr2, [r2]
  return __builtin_mve_vminq_sv4si (__a, __b);
  413400:	ef20 065c 	vmin.s32	q0, q0, q6
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  413404:	ef26 664e 	vmax.s32	q3, q3, q7
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  413408:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  41340c:	ed86 0f00 	stc	15, cr0, [r6]
  return __builtin_mve_vminq_sv4si (__a, __b);
  413410:	ef26 665c 	vmin.s32	q3, q3, q6
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  413414:	19ab      	adds	r3, r5, r6
  413416:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  41341a:	ed83 6f00 	stc	15, cr6, [r3]
    for (int i_loop_cnt = 0, offset = 0; i_loop_cnt < loop_count;
  41341e:	9b05      	ldr	r3, [sp, #20]
         num_ch_to_process -= 4, offset += 4, out += 4, i_loop_cnt++)
  413420:	f10a 0a01 	add.w	sl, sl, #1
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  413424:	3110      	adds	r1, #16
    for (int i_loop_cnt = 0, offset = 0; i_loop_cnt < loop_count;
  413426:	4553      	cmp	r3, sl
  413428:	f10c 0c04 	add.w	ip, ip, #4
  41342c:	9130      	str	r1, [sp, #192]	@ 0xc0
  __builtin_mve_vstrbq_p_sv4si ((__builtin_neon_qi *) __addr, __value, __p);
  41342e:	f1a8 0804 	sub.w	r8, r8, #4
         num_ch_to_process -= 4, offset += 4, out += 4, i_loop_cnt++)
  413432:	f107 0704 	add.w	r7, r7, #4
  413436:	f106 0604 	add.w	r6, r6, #4
    for (int i_loop_cnt = 0, offset = 0; i_loop_cnt < loop_count;
  41343a:	f73f af2c 	bgt.w	413296 <arm_nn_depthwise_conv_nt_t_s8+0x76>
    (void)row_x_col;
    (void)output_bias;
    (void)out;
    return ARM_CMSIS_NN_NO_IMPL_ERROR;
#endif
}
  41343e:	2000      	movs	r0, #0
  413440:	b015      	add	sp, #84	@ 0x54
  413442:	ecbd 8b10 	vpop	{d8-d15}
  413446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int32x4_t out_1 = out_0;
  41344a:	ef24 2154 	vorr	q1, q2, q2
  41344e:	e767      	b.n	413320 <arm_nn_depthwise_conv_nt_t_s8+0x100>

00413450 <arm_nn_mat_mul_core_1x_s8>:
                                              const int32_t out_ch,
                                              const cmsis_nn_conv_params *conv_params,
                                              const cmsis_nn_per_channel_quant_params *quant_params,
                                              const int32_t *bias,
                                              int8_t *output)
{
  413450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413454:	ed2d 8b0c 	vpush	{d8-d13}
  413458:	b089      	sub	sp, #36	@ 0x24
  41345a:	f8dd 9078 	ldr.w	r9, [sp, #120]	@ 0x78
  41345e:	e9dd 741f 	ldrd	r7, r4, [sp, #124]	@ 0x7c
#if defined(ARM_MATH_MVEI)
    const int8_t *col_base = col_base_ref;
    int32_t *output_mult = quant_params->multiplier;
    int32_t *output_shift = quant_params->shift;
  413462:	e9d4 be00 	ldrd	fp, lr, [r4]
    const int32_t out_offset = conv_params->output_offset;
  413466:	687c      	ldr	r4, [r7, #4]
    const int32_t out_activation_min = conv_params->activation.min;
    const int32_t out_activation_max = conv_params->activation.max;

    int32_t acc[4];
    for (int i = 0; i < out_ch; i++)
  413468:	f1b9 0f00 	cmp.w	r9, #0
    const int32_t out_offset = conv_params->output_offset;
  41346c:	9403      	str	r4, [sp, #12]
    const int32_t out_activation_max = conv_params->activation.max;
  41346e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
    for (int i = 0; i < out_ch; i++)
  413472:	dd68      	ble.n	413546 <arm_nn_mat_mul_core_1x_s8+0xf6>
  return __builtin_mve_vdupq_n_sv4si (__a);
  413474:	eea8 5b10 	vdup.32	q4, r5
  413478:	2500      	movs	r5, #0
  41347a:	eeaa 4b10 	vdup.32	q5, r4
  41347e:	eea4 5b10 	vdup.32	q2, r5
            int32_t col = col_base[j];
            sum_tmp += col;
            acc_n0 += row_base[j] * col;
        }
#else
        __ASM volatile("   vldrb.8         q0, [%[col]], #16     \n"
  413482:	46aa      	mov	sl, r5
  413484:	46f4      	mov	ip, lr
            res = vmaxq_s32(res, vdupq_n_s32(out_activation_min));
            res = vminq_s32(res, vdupq_n_s32(out_activation_max));
            vstrbq_s32(output, res);
            output += 4;
        }
        col_base = col_base_ref + (i + 1) * (row_elements + skipped_row_elements);
  413486:	eb00 0801 	add.w	r8, r0, r1
        __ASM volatile("   vldrb.8         q0, [%[col]], #16     \n"
  41348a:	f8cd b000 	str.w	fp, [sp]
  41348e:	e001      	b.n	413494 <arm_nn_mat_mul_core_1x_s8+0x44>
    for (int i = 0; i < out_ch; i++)
  413490:	454d      	cmp	r5, r9
  413492:	d055      	beq.n	413540 <arm_nn_mat_mul_core_1x_s8+0xf0>
        __ASM volatile("   vldrb.8         q0, [%[col]], #16     \n"
  413494:	4619      	mov	r1, r3
  413496:	4654      	mov	r4, sl
  413498:	4693      	mov	fp, r2
  41349a:	4656      	mov	r6, sl
  41349c:	ecb1 1e10 	ldc	14, cr1, [r1], #64	@ 0x40
  4134a0:	f000 c00b 	wlstp.8	lr, r0, 4134b8 <arm_nn_mat_mul_core_1x_s8+0x68>
  4134a4:	eef1 4f20 	cdp	15, 15, cr4, cr1, cr0, {1}
  4134a8:	ecbb 3e10 	ldc	14, cr3, [fp], #64	@ 0x40
  4134ac:	eef0 6f22 	cdp	15, 15, cr6, cr0, cr2, {1}
  4134b0:	ecb1 1e10 	ldc	14, cr1, [r1], #64	@ 0x40
  4134b4:	f01f c00b 	letp	lr, 4134a4 <arm_nn_mat_mul_core_1x_s8+0x54>
        sum_tmp *= conv_params->input_offset;
  4134b8:	6839      	ldr	r1, [r7, #0]
  4134ba:	4443      	add	r3, r8
        acc_n0 += sum_tmp;
  4134bc:	fb01 6604 	mla	r6, r1, r4, r6
        const int32_t index = i & 0x3;
  4134c0:	f005 0103 	and.w	r1, r5, #3
        acc[index] = acc_n0;
  4134c4:	ac08      	add	r4, sp, #32
  4134c6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
        if (index == 3)
  4134ca:	2903      	cmp	r1, #3
        acc[index] = acc_n0;
  4134cc:	f105 0501 	add.w	r5, r5, #1
  4134d0:	f844 6c10 	str.w	r6, [r4, #-16]
        if (index == 3)
  4134d4:	d1dc      	bne.n	413490 <arm_nn_mat_mul_core_1x_s8+0x40>
            if (bias)
  4134d6:	9921      	ldr	r1, [sp, #132]	@ 0x84
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  4134d8:	ed9d 7f04 	ldc	15, cr7, [sp, #16]
  4134dc:	b131      	cbz	r1, 4134ec <arm_nn_mat_mul_core_1x_s8+0x9c>
  4134de:	460c      	mov	r4, r1
  4134e0:	ed94 3f00 	ldc	15, cr3, [r4]
  return __a + __b;
  4134e4:	ef26 6842 	vadd.i32	q3, q3, q1
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  4134e8:	3110      	adds	r1, #16
  4134ea:	9121      	str	r1, [sp, #132]	@ 0x84
  4134ec:	ecbc 3f04 	ldc	15, cr3, [ip], #16
  return __builtin_mve_vcmpgtq_n_v4si (__a, __b);
  4134f0:	fe23 1f6a 	cdp2	15, 2, cr1, cr3, cr10, {3}
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  4134f4:	9900      	ldr	r1, [sp, #0]
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  4134f6:	fe33 cf05 	cdp2	15, 3, cr12, cr3, cr5, {0}
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  4134fa:	460c      	mov	r4, r1
  return __builtin_mve_vshlq_sv4si (__a, __b);
  4134fc:	ef2c 6446 	vshl.s32	q3, q3, q6
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  413500:	ed94 1f00 	ldc	15, cr1, [r4]
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  413504:	fe35 2f03 	cdp2	15, 3, cr2, cr5, cr3, {0}
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  413508:	ff26 6b40 	vqrdmulh.s32	q3, q3, q0
  return __builtin_mve_vandq_sv4si (__a, __b);
  41350c:	ef06 0152 	vand	q0, q3, q1
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  413510:	efa1 0050 	vshr.s32	q0, q0, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  413514:	ef26 6050 	vqadd.s32	q3, q3, q0
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  413518:	ef22 6546 	vrshl.s32	q3, q3, q1
  return __builtin_mve_vldrwq_sv4si ((__builtin_neon_si *) __base);
  41351c:	3110      	adds	r1, #16
  41351e:	9100      	str	r1, [sp, #0]
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  413520:	9903      	ldr	r1, [sp, #12]
    for (int i = 0; i < out_ch; i++)
  413522:	454d      	cmp	r5, r9
  413524:	ee27 6f41 	cdp	15, 2, cr6, cr7, cr1, {2}
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  413528:	ef26 664a 	vmax.s32	q3, q3, q5
  __builtin_mve_vstrbq_sv4si ((__builtin_neon_qi *) __addr, __value);
  41352c:	9922      	ldr	r1, [sp, #136]	@ 0x88
  return __builtin_mve_vminq_sv4si (__a, __b);
  41352e:	ef26 6658 	vmin.s32	q3, q3, q4
  __builtin_mve_vstrbq_sv4si ((__builtin_neon_qi *) __addr, __value);
  413532:	460c      	mov	r4, r1
  413534:	f101 0104 	add.w	r1, r1, #4
  413538:	ed84 6f00 	stc	15, cr6, [r4]
  41353c:	9122      	str	r1, [sp, #136]	@ 0x88
  41353e:	d1a9      	bne.n	413494 <arm_nn_mat_mul_core_1x_s8+0x44>
  413540:	46e6      	mov	lr, ip
  413542:	f8dd b000 	ldr.w	fp, [sp]
    }
    // Handle left over elements
    for (int i = 0; i < (out_ch & 0x3); i++)
  413546:	f019 0303 	ands.w	r3, r9, #3
  41354a:	9303      	str	r3, [sp, #12]
  41354c:	f000 80a7 	beq.w	41369e <arm_nn_mat_mul_core_1x_s8+0x24e>
  413550:	9b21      	ldr	r3, [sp, #132]	@ 0x84
  413552:	2b00      	cmp	r3, #0
  413554:	f000 80a9 	beq.w	4136aa <arm_nn_mat_mul_core_1x_s8+0x25a>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  413558:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
  41355c:	2000      	movs	r0, #0
    result = (int32_t)(mult.long_long >> 31);
  41355e:	4644      	mov	r4, r8
  413560:	4601      	mov	r1, r0
        int32_t acc_n0 = acc[i];
        if (bias)
        {
            acc_n0 += bias[i];
        }
        acc_n0 = arm_nn_requantize(acc_n0, output_mult[i], output_shift[i]);
  413562:	f8de 6000 	ldr.w	r6, [lr]
            acc_n0 += bias[i];
  413566:	681b      	ldr	r3, [r3, #0]
        int32_t acc_n0 = acc[i];
  413568:	9a04      	ldr	r2, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
  41356a:	f04f 0a01 	mov.w	sl, #1
            acc_n0 += bias[i];
  41356e:	441a      	add	r2, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  413570:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
  413574:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  413576:	f8db 3000 	ldr.w	r3, [fp]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  41357a:	4276      	negs	r6, r6
    result = (int32_t)(mult.long_long >> 31);
  41357c:	fbc2 4103 	smlal	r4, r1, r2, r3
        acc_n0 += conv_params->output_offset;
        acc_n0 = MAX(acc_n0, conv_params->activation.min);
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  413580:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
  413584:	e9cd 4100 	strd	r4, r1, [sp]
  413588:	e9dd 4500 	ldrd	r4, r5, [sp]
  41358c:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
  413590:	e9cd 4500 	strd	r4, r5, [sp]
    result = dividend >> exponent;
  413594:	9c00      	ldr	r4, [sp, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  413596:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  41359a:	fa0a f506 	lsl.w	r5, sl, r6
  41359e:	3d01      	subs	r5, #1
        threshold++;
  4135a0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
    result = dividend >> exponent;
  4135a4:	fa44 f606 	asr.w	r6, r4, r6
        threshold++;
  4135a8:	eb0c 0c65 	add.w	ip, ip, r5, asr #1
    int32_t remainder = remainder_mask & dividend;
  4135ac:	402c      	ands	r4, r5
        result++;
  4135ae:	4564      	cmp	r4, ip
  4135b0:	ea56 96d6 			@ <UNDEFINED> instruction: 0xea5696d6
        acc_n0 += conv_params->output_offset;
  4135b4:	6879      	ldr	r1, [r7, #4]
  4135b6:	440e      	add	r6, r1
        acc_n0 = MAX(acc_n0, conv_params->activation.min);
  4135b8:	4296      	cmp	r6, r2
  4135ba:	bfb8      	it	lt
  4135bc:	4616      	movlt	r6, r2
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  4135be:	429e      	cmp	r6, r3
  4135c0:	bfa8      	it	ge
  4135c2:	461e      	movge	r6, r3
        *output++ = (q7_t)acc_n0;
  4135c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
    for (int i = 0; i < (out_ch & 0x3); i++)
  4135c6:	f019 0f02 	tst.w	r9, #2
        *output++ = (q7_t)acc_n0;
  4135ca:	701e      	strb	r6, [r3, #0]
    for (int i = 0; i < (out_ch & 0x3); i++)
  4135cc:	d067      	beq.n	41369e <arm_nn_mat_mul_core_1x_s8+0x24e>
    result = (int32_t)(mult.long_long >> 31);
  4135ce:	4644      	mov	r4, r8
  4135d0:	4601      	mov	r1, r0
            acc_n0 += bias[i];
  4135d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
        acc_n0 = arm_nn_requantize(acc_n0, output_mult[i], output_shift[i]);
  4135d4:	f8de 6004 	ldr.w	r6, [lr, #4]
            acc_n0 += bias[i];
  4135d8:	685a      	ldr	r2, [r3, #4]
        int32_t acc_n0 = acc[i];
  4135da:	9b05      	ldr	r3, [sp, #20]
            acc_n0 += bias[i];
  4135dc:	4413      	add	r3, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  4135de:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
  4135e2:	fa03 f202 	lsl.w	r2, r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  4135e6:	f8db 3004 	ldr.w	r3, [fp, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  4135ea:	4276      	negs	r6, r6
    result = (int32_t)(mult.long_long >> 31);
  4135ec:	fbc2 4103 	smlal	r4, r1, r2, r3
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  4135f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
  4135f4:	e9cd 4100 	strd	r4, r1, [sp]
  4135f8:	e9dd 4500 	ldrd	r4, r5, [sp]
  4135fc:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  413600:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    result = dividend >> exponent;
  413604:	e9cd 4500 	strd	r4, r5, [sp]
    const q31_t remainder_mask = (1 << exponent) - 1;
  413608:	fa0a fc06 	lsl.w	ip, sl, r6
    result = dividend >> exponent;
  41360c:	fa44 f606 	asr.w	r6, r4, r6
        threshold++;
  413610:	9c00      	ldr	r4, [sp, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
  413612:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
        threshold++;
  413616:	0fe5      	lsrs	r5, r4, #31
  413618:	eb05 056c 	add.w	r5, r5, ip, asr #1
    int32_t remainder = remainder_mask & dividend;
  41361c:	ea0c 0404 	and.w	r4, ip, r4
        result++;
  413620:	42ac      	cmp	r4, r5
  413622:	ea56 96d6 			@ <UNDEFINED> instruction: 0xea5696d6
        acc_n0 += conv_params->output_offset;
  413626:	6879      	ldr	r1, [r7, #4]
  413628:	440e      	add	r6, r1
        acc_n0 = MAX(acc_n0, conv_params->activation.min);
  41362a:	4296      	cmp	r6, r2
  41362c:	bfb8      	it	lt
  41362e:	4616      	movlt	r6, r2
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  413630:	429e      	cmp	r6, r3
  413632:	bfa8      	it	ge
  413634:	461e      	movge	r6, r3
        *output++ = (q7_t)acc_n0;
  413636:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  413638:	705e      	strb	r6, [r3, #1]
    for (int i = 0; i < (out_ch & 0x3); i++)
  41363a:	9b03      	ldr	r3, [sp, #12]
  41363c:	2b03      	cmp	r3, #3
  41363e:	d12e      	bne.n	41369e <arm_nn_mat_mul_core_1x_s8+0x24e>
            acc_n0 += bias[i];
  413640:	9b21      	ldr	r3, [sp, #132]	@ 0x84
        acc_n0 = arm_nn_requantize(acc_n0, output_mult[i], output_shift[i]);
  413642:	f8de 1008 	ldr.w	r1, [lr, #8]
            acc_n0 += bias[i];
  413646:	689b      	ldr	r3, [r3, #8]
        int32_t acc_n0 = acc[i];
  413648:	9c06      	ldr	r4, [sp, #24]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  41364a:	f8db 5008 	ldr.w	r5, [fp, #8]
            acc_n0 += bias[i];
  41364e:	441c      	add	r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  413650:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  413654:	409c      	lsls	r4, r3
    result = (int32_t)(mult.long_long >> 31);
  413656:	fbc4 8005 	smlal	r8, r0, r4, r5
  41365a:	4603      	mov	r3, r0
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  41365c:	e9d7 4008 	ldrd	r4, r0, [r7, #32]
        acc_n0 += conv_params->output_offset;
  413660:	687d      	ldr	r5, [r7, #4]
  413662:	4646      	mov	r6, r8
  413664:	461f      	mov	r7, r3
  413666:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  41366a:	4249      	negs	r1, r1
  41366c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  413670:	fa0a fa01 	lsl.w	sl, sl, r1
  413674:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
        threshold++;
  413678:	0ff3      	lsrs	r3, r6, #31
  41367a:	eb03 036a 	add.w	r3, r3, sl, asr #1
    result = dividend >> exponent;
  41367e:	fa46 f101 	asr.w	r1, r6, r1
    int32_t remainder = remainder_mask & dividend;
  413682:	ea0a 0206 	and.w	r2, sl, r6
        result++;
  413686:	429a      	cmp	r2, r3
  413688:	ea51 91d1 			@ <UNDEFINED> instruction: 0xea5191d1
  41368c:	4429      	add	r1, r5
        acc_n0 = MAX(acc_n0, conv_params->activation.min);
  41368e:	42a1      	cmp	r1, r4
  413690:	bfb8      	it	lt
  413692:	4621      	movlt	r1, r4
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  413694:	4281      	cmp	r1, r0
  413696:	bfa8      	it	ge
  413698:	4601      	movge	r1, r0
        *output++ = (q7_t)acc_n0;
  41369a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  41369c:	7099      	strb	r1, [r3, #2]
    (void)quant_params;
    (void)bias;
    (void)output;
#endif
    return ARM_CMSIS_NN_SUCCESS;
}
  41369e:	2000      	movs	r0, #0
  4136a0:	b009      	add	sp, #36	@ 0x24
  4136a2:	ecbd 8b0c 	vpop	{d8-d13}
  4136a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  4136aa:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
        acc_n0 = arm_nn_requantize(acc_n0, output_mult[i], output_shift[i]);
  4136ae:	f8de 6000 	ldr.w	r6, [lr]
    return result;
  4136b2:	461c      	mov	r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  4136b4:	9b04      	ldr	r3, [sp, #16]
  4136b6:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
  4136ba:	fa03 f000 	lsl.w	r0, r3, r0
    result = (int32_t)(mult.long_long >> 31);
  4136be:	462b      	mov	r3, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  4136c0:	f8db 1000 	ldr.w	r1, [fp]
    const q31_t remainder_mask = (1 << exponent) - 1;
  4136c4:	f04f 0c01 	mov.w	ip, #1
    result = (int32_t)(mult.long_long >> 31);
  4136c8:	fbc1 3400 	smlal	r3, r4, r1, r0
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  4136cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
  4136d0:	e9cd 3400 	strd	r3, r4, [sp]
  4136d4:	e9dd 2300 	ldrd	r2, r3, [sp]
  4136d8:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  4136dc:	4276      	negs	r6, r6
    result = (int32_t)(mult.long_long >> 31);
  4136de:	e9cd 2300 	strd	r2, r3, [sp]
    result = dividend >> exponent;
  4136e2:	9a00      	ldr	r2, [sp, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  4136e4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  4136e8:	fa0c f306 	lsl.w	r3, ip, r6
  4136ec:	3b01      	subs	r3, #1
        threshold++;
  4136ee:	ea4f 78d2 	mov.w	r8, r2, lsr #31
    result = dividend >> exponent;
  4136f2:	fa42 f606 	asr.w	r6, r2, r6
        threshold++;
  4136f6:	eb08 0863 	add.w	r8, r8, r3, asr #1
    int32_t remainder = remainder_mask & dividend;
  4136fa:	401a      	ands	r2, r3
        result++;
  4136fc:	4590      	cmp	r8, r2
  4136fe:	ea56 96a6 			@ <UNDEFINED> instruction: 0xea5696a6
        acc_n0 += conv_params->output_offset;
  413702:	687c      	ldr	r4, [r7, #4]
        *output++ = (q7_t)acc_n0;
  413704:	9b22      	ldr	r3, [sp, #136]	@ 0x88
        acc_n0 += conv_params->output_offset;
  413706:	4426      	add	r6, r4
        acc_n0 = MAX(acc_n0, conv_params->activation.min);
  413708:	4286      	cmp	r6, r0
  41370a:	bfb8      	it	lt
  41370c:	4606      	movlt	r6, r0
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  41370e:	428e      	cmp	r6, r1
  413710:	bfa8      	it	ge
  413712:	460e      	movge	r6, r1
    for (int i = 0; i < (out_ch & 0x3); i++)
  413714:	f019 0f02 	tst.w	r9, #2
        *output++ = (q7_t)acc_n0;
  413718:	701e      	strb	r6, [r3, #0]
    for (int i = 0; i < (out_ch & 0x3); i++)
  41371a:	d0c0      	beq.n	41369e <arm_nn_mat_mul_core_1x_s8+0x24e>
        acc_n0 = arm_nn_requantize(acc_n0, output_mult[i], output_shift[i]);
  41371c:	f8de 6004 	ldr.w	r6, [lr, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  413720:	9b05      	ldr	r3, [sp, #20]
  413722:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
  413726:	fa03 f000 	lsl.w	r0, r3, r0
    result = (int32_t)(mult.long_long >> 31);
  41372a:	462b      	mov	r3, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  41372c:	f8db 1004 	ldr.w	r1, [fp, #4]
    result = (int32_t)(mult.long_long >> 31);
  413730:	9c21      	ldr	r4, [sp, #132]	@ 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  413732:	4276      	negs	r6, r6
    result = (int32_t)(mult.long_long >> 31);
  413734:	fbc0 3401 	smlal	r3, r4, r0, r1
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  413738:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
  41373c:	e9cd 3400 	strd	r3, r4, [sp]
  413740:	e9dd 2300 	ldrd	r2, r3, [sp]
  413744:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
    result = dividend >> exponent;
  413748:	e9cd 2300 	strd	r2, r3, [sp]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  41374c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
        threshold++;
  413750:	9b00      	ldr	r3, [sp, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
  413752:	fa0c f806 	lsl.w	r8, ip, r6
    result = dividend >> exponent;
  413756:	fa42 f606 	asr.w	r6, r2, r6
    int32_t remainder = remainder_mask & dividend;
  41375a:	9a00      	ldr	r2, [sp, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
  41375c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
        threshold++;
  413760:	0fdb      	lsrs	r3, r3, #31
  413762:	eb03 0368 	add.w	r3, r3, r8, asr #1
    int32_t remainder = remainder_mask & dividend;
  413766:	ea08 0202 	and.w	r2, r8, r2
        result++;
  41376a:	429a      	cmp	r2, r3
  41376c:	ea56 96d6 			@ <UNDEFINED> instruction: 0xea5696d6
        acc_n0 += conv_params->output_offset;
  413770:	687c      	ldr	r4, [r7, #4]
        *output++ = (q7_t)acc_n0;
  413772:	9b22      	ldr	r3, [sp, #136]	@ 0x88
        acc_n0 += conv_params->output_offset;
  413774:	4426      	add	r6, r4
        acc_n0 = MAX(acc_n0, conv_params->activation.min);
  413776:	4286      	cmp	r6, r0
  413778:	bfb8      	it	lt
  41377a:	4606      	movlt	r6, r0
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  41377c:	428e      	cmp	r6, r1
  41377e:	bfa8      	it	ge
  413780:	460e      	movge	r6, r1
        *output++ = (q7_t)acc_n0;
  413782:	705e      	strb	r6, [r3, #1]
    for (int i = 0; i < (out_ch & 0x3); i++)
  413784:	9b03      	ldr	r3, [sp, #12]
  413786:	2b03      	cmp	r3, #3
  413788:	d189      	bne.n	41369e <arm_nn_mat_mul_core_1x_s8+0x24e>
    result = (int32_t)(mult.long_long >> 31);
  41378a:	462a      	mov	r2, r5
        acc_n0 = arm_nn_requantize(acc_n0, output_mult[i], output_shift[i]);
  41378c:	f8de 1008 	ldr.w	r1, [lr, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  413790:	9806      	ldr	r0, [sp, #24]
  413792:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
  413796:	f8db 4008 	ldr.w	r4, [fp, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  41379a:	4098      	lsls	r0, r3
    result = (int32_t)(mult.long_long >> 31);
  41379c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  41379e:	4249      	negs	r1, r1
    result = (int32_t)(mult.long_long >> 31);
  4137a0:	fbc4 2300 	smlal	r2, r3, r4, r0
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  4137a4:	e9d7 5408 	ldrd	r5, r4, [r7, #32]
  4137a8:	4690      	mov	r8, r2
  4137aa:	4699      	mov	r9, r3
  4137ac:	ea58 79ef 	orrs.w	r9, r8, pc, asr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
  4137b0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
  4137b4:	fa0c f001 	lsl.w	r0, ip, r1
  4137b8:	3801      	subs	r0, #1
        threshold++;
  4137ba:	ea4f 73d8 	mov.w	r3, r8, lsr #31
    int32_t remainder = remainder_mask & dividend;
  4137be:	ea08 0200 	and.w	r2, r8, r0
        threshold++;
  4137c2:	eb03 0360 	add.w	r3, r3, r0, asr #1
    result = dividend >> exponent;
  4137c6:	fa48 f101 	asr.w	r1, r8, r1
        result++;
  4137ca:	4293      	cmp	r3, r2
  4137cc:	ea51 91a1 			@ <UNDEFINED> instruction: 0xea5191a1
        acc_n0 += conv_params->output_offset;
  4137d0:	687e      	ldr	r6, [r7, #4]
}
  4137d2:	2000      	movs	r0, #0
        acc_n0 += conv_params->output_offset;
  4137d4:	4431      	add	r1, r6
        acc_n0 = MAX(acc_n0, conv_params->activation.min);
  4137d6:	42a9      	cmp	r1, r5
  4137d8:	bfb8      	it	lt
  4137da:	4629      	movlt	r1, r5
        acc_n0 = MIN(acc_n0, conv_params->activation.max);
  4137dc:	42a1      	cmp	r1, r4
  4137de:	bfa8      	it	ge
  4137e0:	4621      	movge	r1, r4
        *output++ = (q7_t)acc_n0;
  4137e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  4137e4:	7099      	strb	r1, [r3, #2]
}
  4137e6:	b009      	add	sp, #36	@ 0x24
  4137e8:	ecbd 8b0c 	vpop	{d8-d13}
  4137ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004137f0 <arm_nn_mat_mul_core_4x_s8>:
                                  const int32_t out_ch,
                                  const cmsis_nn_conv_params *conv_params,
                                  const cmsis_nn_per_channel_quant_params *quant_params,
                                  const int32_t *bias,
                                  int8_t *output)
{
  4137f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4137f4:	ed2d 8b08 	vpush	{d8-d11}
  4137f8:	b097      	sub	sp, #92	@ 0x5c
  4137fa:	e9dd 5728 	ldrd	r5, r7, [sp, #160]	@ 0xa0

#if defined(ARM_MATH_MVEI)
    for (int i = 0; i < out_ch; i++)
  4137fe:	2d00      	cmp	r5, #0
{
  413800:	9e2c      	ldr	r6, [sp, #176]	@ 0xb0
        const uint32x4_t scatter_offset = {0, (uint32_t)out_ch, (uint32_t)out_ch * 2, (uint32_t)out_ch * 3};
        vstrbq_scatter_offset_s32(output, scatter_offset, res);
        output++;
    }

    return output + (3 * out_ch);
  413802:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
{
  413806:	9204      	str	r2, [sp, #16]
  413808:	e9dd b42a 	ldrd	fp, r4, [sp, #168]	@ 0xa8
    for (int i = 0; i < out_ch; i++)
  41380c:	f340 8113 	ble.w	413a36 <arm_nn_mat_mul_core_4x_s8+0x246>
        const int8_t *ip_row_2 = row_base + (2 * offset);
  413810:	eb02 0e41 	add.w	lr, r2, r1, lsl #1
        const int8_t *ip_row_1 = row_base + offset;
  413814:	eb0e 0201 	add.w	r2, lr, r1
  413818:	9205      	str	r2, [sp, #20]
  41381a:	ebae 0201 	sub.w	r2, lr, r1
  41381e:	9206      	str	r2, [sp, #24]
        const uint32x4_t scatter_offset = {0, (uint32_t)out_ch, (uint32_t)out_ch * 2, (uint32_t)out_ch * 3};
  413820:	2200      	movs	r2, #0
  413822:	4698      	mov	r8, r3
  413824:	006b      	lsls	r3, r5, #1
  413826:	e9cd 5313 	strd	r5, r3, [sp, #76]	@ 0x4c
  41382a:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
  41382e:	9212      	str	r2, [sp, #72]	@ 0x48
  413830:	4682      	mov	sl, r0
  413832:	ed9d bf12 	ldc	15, cr11, [sp, #72]	@ 0x48
  413836:	2c00      	cmp	r4, #0
  413838:	f000 8083 	beq.w	413942 <arm_nn_mat_mul_core_4x_s8+0x152>
  41383c:	f1a4 0904 	sub.w	r9, r4, #4
  413840:	e9cd 8901 	strd	r8, r9, [sp, #4]
  413844:	4681      	mov	r9, r0
  413846:	1973      	adds	r3, r6, r5
  413848:	9303      	str	r3, [sp, #12]
  41384a:	f1c4 0304 	rsb	r3, r4, #4
  41384e:	e9cd 3e07 	strd	r3, lr, [sp, #28]
  413852:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
  413856:	962c      	str	r6, [sp, #176]	@ 0xb0
        __ASM volatile("   vldrb.8         q0, [%[col]], #16     \n"
  413858:	2200      	movs	r2, #0
  41385a:	9b01      	ldr	r3, [sp, #4]
  41385c:	4692      	mov	sl, r2
  41385e:	4694      	mov	ip, r2
  413860:	4690      	mov	r8, r2
  413862:	4616      	mov	r6, r2
  413864:	9904      	ldr	r1, [sp, #16]
  413866:	9806      	ldr	r0, [sp, #24]
  413868:	9c08      	ldr	r4, [sp, #32]
  41386a:	9d05      	ldr	r5, [sp, #20]
  41386c:	ecb3 1e10 	ldc	14, cr1, [r3], #64	@ 0x40
  413870:	f009 c017 	wlstp.8	lr, r9, 4138a0 <arm_nn_mat_mul_core_4x_s8+0xb0>
  413874:	eef1 2f20 	cdp	15, 15, cr2, cr1, cr0, {1}
  413878:	ecb1 3e10 	ldc	14, cr3, [r1], #64	@ 0x40
  41387c:	eef0 af22 	cdp	15, 15, cr10, cr0, cr2, {1}
  413880:	ecb0 5e10 	ldc	14, cr5, [r0], #64	@ 0x40
  413884:	eef0 cf24 	cdp	15, 15, cr12, cr0, cr4, {1}
  413888:	ecb4 7e10 	ldc	14, cr7, [r4], #64	@ 0x40
  41388c:	eef0 8f26 	cdp	15, 15, cr8, cr0, cr6, {1}
  413890:	ecb5 9e10 	ldc	14, cr9, [r5], #64	@ 0x40
  413894:	eef0 6f28 	cdp	15, 15, cr6, cr0, cr8, {1}
  413898:	ecb3 1e10 	ldc	14, cr1, [r3], #64	@ 0x40
  41389c:	f01f c017 	letp	lr, 413874 <arm_nn_mat_mul_core_4x_s8+0x84>
            sum_tmp += bias[i];
  4138a0:	9802      	ldr	r0, [sp, #8]
        int32x4_t res = {acc_n0, acc_n1, acc_n2, acc_n3};
  4138a2:	e9cd ac0a 	strd	sl, ip, [sp, #40]	@ 0x28
            sum_tmp += bias[i];
  4138a6:	4604      	mov	r4, r0
        int32x4_t res = {acc_n0, acc_n1, acc_n2, acc_n3};
  4138a8:	e9cd 860c 	strd	r8, r6, [sp, #48]	@ 0x30
  4138ac:	ed9d 7f0a 	ldc	15, cr7, [sp, #40]	@ 0x28
    for (int i = 0; i < out_ch; i++)
  4138b0:	9b01      	ldr	r3, [sp, #4]
  4138b2:	444b      	add	r3, r9
  4138b4:	9301      	str	r3, [sp, #4]
            sum_tmp += bias[i];
  4138b6:	9b07      	ldr	r3, [sp, #28]
  4138b8:	1819      	adds	r1, r3, r0
        sum_tmp *= conv_params->input_offset;
  4138ba:	683b      	ldr	r3, [r7, #0]
            sum_tmp += bias[i];
  4138bc:	f854 0f04 	ldr.w	r0, [r4, #4]!
  4138c0:	fb03 0002 	mla	r0, r3, r2, r0
        res = arm_requantize_mve(res, quant_params->multiplier[i], quant_params->shift[i]);
  4138c4:	f8db 3004 	ldr.w	r3, [fp, #4]
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4138c8:	ee27 6f40 	cdp	15, 2, cr6, cr7, cr0, {2}
  4138cc:	585a      	ldr	r2, [r3, r1]
  4138ce:	f8db 3000 	ldr.w	r3, [fp]
            sum_tmp += bias[i];
  4138d2:	9402      	str	r4, [sp, #8]
        res = arm_requantize_mve(res, quant_params->multiplier[i], quant_params->shift[i]);
  4138d4:	5859      	ldr	r1, [r3, r1]
        arm_doubling_high_mult_mve(vshlq_s32(val, vdupq_n_s32(LEFT_SHIFT(shift))), multiplier), RIGHT_SHIFT(shift));
  4138d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  return __builtin_mve_vdupq_n_sv4si (__a);
  4138da:	eea8 3b10 	vdup.32	q4, r3
  return __builtin_mve_vshlq_sv4si (__a, __b);
  4138de:	ef28 6446 	vshl.s32	q3, q3, q4
    return arm_divide_by_power_of_two_mve(
  4138e2:	4252      	negs	r2, r2
  4138e4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    const int32x4_t shift = vdupq_n_s32(-exponent);
  4138e8:	4252      	negs	r2, r2
  return __builtin_mve_vdupq_n_sv4si (__a);
  4138ea:	eea0 2b10 	vdup.32	q0, r2
  return __builtin_mve_vqrdmulhq_n_sv4si (__a, __b);
  4138ee:	fe27 6e61 	cdp2	14, 2, cr6, cr7, cr1, {3}
  return __builtin_mve_vandq_sv4si (__a, __b);
  4138f2:	ef06 8150 	vand	q4, q3, q0
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  4138f6:	efa1 8058 	vshr.s32	q4, q4, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  4138fa:	ef26 6058 	vqadd.s32	q3, q3, q4
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  4138fe:	ef20 6546 	vrshl.s32	q3, q3, q0
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  413902:	687a      	ldr	r2, [r7, #4]
  return __builtin_mve_vdupq_n_sv4si (__a);
  413904:	6a3b      	ldr	r3, [r7, #32]
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  413906:	ee27 6f42 	cdp	15, 2, cr6, cr7, cr2, {2}
  return __builtin_mve_vdupq_n_sv4si (__a);
  41390a:	eea2 3b10 	vdup.32	q1, r3
  41390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  413910:	ef26 6642 	vmax.s32	q3, q3, q1
  return __builtin_mve_vdupq_n_sv4si (__a);
  413914:	eea4 3b10 	vdup.32	q2, r3
  return __builtin_mve_vminq_sv4si (__a, __b);
  413918:	ef26 6654 	vmin.s32	q3, q3, q2
  __builtin_mve_vstrbq_scatter_offset_sv4si ((__builtin_neon_qi *) __base, __offset, __value);
  41391c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
  41391e:	ec83 6f0a 	stc	15, cr6, [r3], {10}
        output++;
  413922:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
  413924:	3301      	adds	r3, #1
  413926:	932c      	str	r3, [sp, #176]	@ 0xb0
    for (int i = 0; i < out_ch; i++)
  413928:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
  41392a:	9b03      	ldr	r3, [sp, #12]
  41392c:	429a      	cmp	r2, r3
  41392e:	d193      	bne.n	413858 <arm_nn_mat_mul_core_4x_s8+0x68>
    return output + (3 * out_ch);
  413930:	4618      	mov	r0, r3
  413932:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
    (void)quant_params;
    (void)bias;
    (void)output;
    return NULL;
#endif
}
  413936:	4460      	add	r0, ip
  413938:	b017      	add	sp, #92	@ 0x5c
  41393a:	ecbd 8b08 	vpop	{d8-d11}
  41393e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        __ASM volatile("   vldrb.8         q0, [%[col]], #16     \n"
  413942:	46c1      	mov	r9, r8
  413944:	1973      	adds	r3, r6, r5
  413946:	e9cd e302 	strd	lr, r3, [sp, #8]
  41394a:	f8cd c01c 	str.w	ip, [sp, #28]
  41394e:	9401      	str	r4, [sp, #4]
  413950:	2200      	movs	r2, #0
  413952:	9806      	ldr	r0, [sp, #24]
  413954:	464b      	mov	r3, r9
  413956:	4607      	mov	r7, r0
  413958:	4690      	mov	r8, r2
  41395a:	4616      	mov	r6, r2
  41395c:	4694      	mov	ip, r2
  41395e:	4610      	mov	r0, r2
  413960:	9904      	ldr	r1, [sp, #16]
  413962:	9c02      	ldr	r4, [sp, #8]
  413964:	9d05      	ldr	r5, [sp, #20]
  413966:	ecb3 1e10 	ldc	14, cr1, [r3], #64	@ 0x40
  41396a:	f00a c017 	wlstp.8	lr, sl, 41399a <arm_nn_mat_mul_core_4x_s8+0x1aa>
  41396e:	eef1 2f20 	cdp	15, 15, cr2, cr1, cr0, {1}
  413972:	ecb1 3e10 	ldc	14, cr3, [r1], #64	@ 0x40
  413976:	eef0 8f22 	cdp	15, 15, cr8, cr0, cr2, {1}
  41397a:	ecb7 5e10 	ldc	14, cr5, [r7], #64	@ 0x40
  41397e:	eef0 6f24 	cdp	15, 15, cr6, cr0, cr4, {1}
  413982:	ecb4 7e10 	ldc	14, cr7, [r4], #64	@ 0x40
  413986:	eef0 cf26 	cdp	15, 15, cr12, cr0, cr6, {1}
  41398a:	ecb5 9e10 	ldc	14, cr9, [r5], #64	@ 0x40
  41398e:	eef0 0f28 	cdp	15, 15, cr0, cr0, cr8, {1}
  413992:	ecb3 1e10 	ldc	14, cr1, [r3], #64	@ 0x40
  413996:	f01f c017 	letp	lr, 41396e <arm_nn_mat_mul_core_4x_s8+0x17e>
        int32x4_t res = {acc_n0, acc_n1, acc_n2, acc_n3};
  41399a:	e9cd c010 	strd	ip, r0, [sp, #64]	@ 0x40
  41399e:	e9cd 860e 	strd	r8, r6, [sp, #56]	@ 0x38
  4139a2:	ed9d 7f0e 	ldc	15, cr7, [sp, #56]	@ 0x38
        sum_tmp *= conv_params->input_offset;
  4139a6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
        res = arm_requantize_mve(res, quant_params->multiplier[i], quant_params->shift[i]);
  4139a8:	9801      	ldr	r0, [sp, #4]
        sum_tmp *= conv_params->input_offset;
  4139aa:	681b      	ldr	r3, [r3, #0]
    for (int i = 0; i < out_ch; i++)
  4139ac:	44d1      	add	r9, sl
        sum_tmp *= conv_params->input_offset;
  4139ae:	fb03 f202 	mul.w	r2, r3, r2
        res = arm_requantize_mve(res, quant_params->multiplier[i], quant_params->shift[i]);
  4139b2:	f8db 3004 	ldr.w	r3, [fp, #4]
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4139b6:	ee27 6f42 	cdp	15, 2, cr6, cr7, cr2, {2}
  4139ba:	5819      	ldr	r1, [r3, r0]
  4139bc:	f8db 3000 	ldr.w	r3, [fp]
  4139c0:	581a      	ldr	r2, [r3, r0]
        arm_doubling_high_mult_mve(vshlq_s32(val, vdupq_n_s32(LEFT_SHIFT(shift))), multiplier), RIGHT_SHIFT(shift));
  4139c2:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  return __builtin_mve_vdupq_n_sv4si (__a);
  4139c6:	eea8 3b10 	vdup.32	q4, r3
  return __builtin_mve_vshlq_sv4si (__a, __b);
  4139ca:	ef28 6446 	vshl.s32	q3, q3, q4
    return arm_divide_by_power_of_two_mve(
  4139ce:	4249      	negs	r1, r1
  4139d0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const int32x4_t shift = vdupq_n_s32(-exponent);
  4139d4:	4249      	negs	r1, r1
  return __builtin_mve_vdupq_n_sv4si (__a);
  4139d6:	eea0 1b10 	vdup.32	q0, r1
  return __builtin_mve_vqrdmulhq_n_sv4si (__a, __b);
  4139da:	fe27 6e62 	cdp2	14, 2, cr6, cr7, cr2, {3}
  return __builtin_mve_vandq_sv4si (__a, __b);
  4139de:	ef06 8150 	vand	q4, q3, q0
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  4139e2:	efa1 8058 	vshr.s32	q4, q4, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  4139e6:	ef26 6058 	vqadd.s32	q3, q3, q4
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  4139ea:	ef20 6546 	vrshl.s32	q3, q3, q0
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4139ee:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
    for (int i = 0; i < out_ch; i++)
  4139f0:	3004      	adds	r0, #4
  4139f2:	6859      	ldr	r1, [r3, #4]
  return __builtin_mve_vdupq_n_sv4si (__a);
  4139f4:	6a1b      	ldr	r3, [r3, #32]
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  4139f6:	ee27 6f41 	cdp	15, 2, cr6, cr7, cr1, {2}
  return __builtin_mve_vdupq_n_sv4si (__a);
  4139fa:	eea2 3b10 	vdup.32	q1, r3
  4139fe:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  413a00:	ef26 6642 	vmax.s32	q3, q3, q1
  return __builtin_mve_vdupq_n_sv4si (__a);
  413a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  413a06:	9001      	str	r0, [sp, #4]
  413a08:	eea4 3b10 	vdup.32	q2, r3
  return __builtin_mve_vminq_sv4si (__a, __b);
  413a0c:	ef26 6654 	vmin.s32	q3, q3, q2
  __builtin_mve_vstrbq_scatter_offset_sv4si ((__builtin_neon_qi *) __base, __offset, __value);
  413a10:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
  413a12:	ec83 6f0a 	stc	15, cr6, [r3], {10}
        output++;
  413a16:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
  413a18:	3301      	adds	r3, #1
  413a1a:	932c      	str	r3, [sp, #176]	@ 0xb0
    for (int i = 0; i < out_ch; i++)
  413a1c:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
  413a1e:	9b03      	ldr	r3, [sp, #12]
  413a20:	429a      	cmp	r2, r3
  413a22:	d195      	bne.n	413950 <arm_nn_mat_mul_core_4x_s8+0x160>
  413a24:	4618      	mov	r0, r3
    return output + (3 * out_ch);
  413a26:	f8dd c01c 	ldr.w	ip, [sp, #28]
}
  413a2a:	4460      	add	r0, ip
  413a2c:	b017      	add	sp, #92	@ 0x5c
  413a2e:	ecbd 8b08 	vpop	{d8-d11}
  413a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413a36:	4630      	mov	r0, r6
  413a38:	4460      	add	r0, ip
    for (int i = 0; i < out_ch; i++)
  413a3a:	9603      	str	r6, [sp, #12]
}
  413a3c:	b017      	add	sp, #92	@ 0x5c
  413a3e:	ecbd 8b08 	vpop	{d8-d11}
  413a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413a46:	bf00      	nop

00413a48 <arm_exp_on_negative_values_mve_32x4>:

#define ACCUM_BITS 12

#ifdef ARM_MATH_MVEI
static int32x4_t arm_exp_on_negative_values_mve_32x4(int32x4_t val)
{
  413a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return __builtin_mve_vdupq_n_sv4si (__a);
  413a4c:	4bbc      	ldr	r3, [pc, #752]	@ (413d40 <arm_exp_on_negative_values_mve_32x4+0x2f8>)
  413a4e:	ed2d 8b10 	vpush	{d8-d15}
  413a52:	eea6 3b10 	vdup.32	q3, r3
  413a56:	4bbb      	ldr	r3, [pc, #748]	@ (413d44 <arm_exp_on_negative_values_mve_32x4+0x2fc>)
  413a58:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
  413a5c:	eea8 3b10 	vdup.32	q4, r3
  return __builtin_mve_vcmpneq_n_v4si (__a, __b);
  413a60:	2300      	movs	r3, #0
  return __builtin_mve_vcmpeqq_n_v4si (__a, __b);
  413a62:	fe21 0f43 	cdp2	15, 2, cr0, cr1, cr3, {2}
  return __builtin_mve_vdupq_n_sv4si (__a);
  413a66:	eea2 2b10 	vdup.32	q1, r2
  return __builtin_mve_vcmpeqq_n_v4si (__a, __b);
  413a6a:	eefd 2a10 	vmrs	r2, <impl def 0xd>
  413a6e:	b0c9      	sub	sp, #292	@ 0x124
  413a70:	f8ad 2110 	strh.w	r2, [sp, #272]	@ 0x110
  return __builtin_mve_vdupq_n_sv4si (__a);
  413a74:	4ab4      	ldr	r2, [pc, #720]	@ (413d48 <arm_exp_on_negative_values_mve_32x4+0x300>)
  413a76:	4cb5      	ldr	r4, [pc, #724]	@ (413d4c <arm_exp_on_negative_values_mve_32x4+0x304>)
  413a78:	eeaa 2b10 	vdup.32	q5, r2
  413a7c:	4ab4      	ldr	r2, [pc, #720]	@ (413d50 <arm_exp_on_negative_values_mve_32x4+0x308>)
  413a7e:	eeae 4b10 	vdup.32	q7, r4
  413a82:	eeac 2b10 	vdup.32	q6, r2
  413a86:	f04f 0cf2 	mov.w	ip, #242	@ 0xf2
  413a8a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
  413a8e:	ed8d df24 	stc	15, cr13, [sp, #144]	@ 0x90
  413a92:	ed8d ff0c 	stc	15, cr15, [sp, #48]	@ 0x30
  413a96:	eeac cb10 	vdup.32	q6, ip
  413a9a:	eeae 0b10 	vdup.32	q7, r0
  413a9e:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
  413aa2:	ed8d df04 	stc	15, cr13, [sp, #16]
  return __builtin_mve_vandq_sv4si (__a, __b);
  413aa6:	ef00 2152 	vand	q1, q0, q1
  return __builtin_mve_vdupq_n_sv4si (__a);
  413aaa:	eeac 0b10 	vdup.32	q6, r0
#define SHIFT_START (24)
    int32_t shift = SHIFT_START;
    int32x4_t mask;

    const int32x4_t val_mod_minus_quarter =
  413aae:	ff22 284c 	vsub.i32	q1, q1, q6
  413ab2:	f04f 6a80 	mov.w	sl, #67108864	@ 0x4000000
  return __builtin_mve_vsubq_sv4si (__a, __b);
  413ab6:	ff22 0840 	vsub.i32	q0, q1, q0
  return __builtin_mve_vdupq_n_sv4si (__a);
  413aba:	49a6      	ldr	r1, [pc, #664]	@ (413d54 <arm_exp_on_negative_values_mve_32x4+0x30c>)
  413abc:	ed8d bf2c 	stc	15, cr11, [sp, #176]	@ 0xb0
  413ac0:	eea4 1b10 	vdup.32	q2, r1
        mve_pred16_t p = vcmpneq_n_s32(remainder & vdupq_n_s32(1 << shift++), 0);                                      \
        mask = vmvnq_m_s32(vdupq_n_s32(0), vdupq_n_s32(0), p);                                                         \
        result = SELECT_USING_MASK(mask, MUL_SAT_MVE(result, vdupq_n_s32(x)), result);                                 \
    }

    SELECT_IF_NON_ZERO(1672461947)
  413ac4:	ef0c c150 	vand	q6, q6, q0
  413ac8:	f04f 6800 	mov.w	r8, #134217728	@ 0x8000000
  413acc:	eeaa ab10 	vdup.32	q5, sl
  413ad0:	4ea1      	ldr	r6, [pc, #644]	@ (413d58 <arm_exp_on_negative_values_mve_32x4+0x310>)
  413ad2:	ed8d 9f3c 	stc	15, cr9, [sp, #240]	@ 0xf0
  413ad6:	ed8d 5f34 	stc	15, cr5, [sp, #208]	@ 0xd0
  return __builtin_mve_vcmpneq_n_v4si (__a, __b);
  413ada:	fe2d 0fc3 	cdp2	15, 2, cr0, cr13, cr3, {6}
  return __builtin_mve_vdupq_n_sv4si (__a);
  413ade:	eea4 6b10 	vdup.32	q2, r6
    SELECT_IF_NON_ZERO(1302514674)
    SELECT_IF_NON_ZERO(790015084)
  413ae2:	ef0a a150 	vand	q5, q5, q0
  413ae6:	f04f 5500 	mov.w	r5, #536870912	@ 0x20000000
  413aea:	eea8 8b10 	vdup.32	q4, r8
  413aee:	4f9b      	ldr	r7, [pc, #620]	@ (413d5c <arm_exp_on_negative_values_mve_32x4+0x314>)
  413af0:	ed8d 7f40 	stc	15, cr7, [sp, #256]	@ 0x100
  413af4:	ed8d 5f14 	stc	15, cr5, [sp, #80]	@ 0x50
  413af8:	eea6 7b10 	vdup.32	q3, r7
  return __builtin_mve_vcmpneq_n_v4si (__a, __b);
  413afc:	eefd ca10 	vmrs	ip, <impl def 0xd>
    SELECT_IF_NON_ZERO(290630308)
  413b00:	ef08 8150 	vand	q4, q4, q0
  413b04:	fe2b 0fc3 	cdp2	15, 2, cr0, cr11, cr3, {6}
  return __builtin_mve_vdupq_n_sv4si (__a);
  413b08:	eea4 5b10 	vdup.32	q2, r5
  413b0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  413b10:	ed8d 7f1c 	stc	15, cr7, [sp, #112]	@ 0x70
  return __builtin_mve_vcmpneq_n_v4si (__a, __b);
  413b14:	eefd 6a10 	vmrs	r6, <impl def 0xd>
    SELECT_IF_NON_ZERO(39332535)
    SELECT_IF_NON_ZERO(720401)
  413b18:	ef04 4150 	vand	q2, q2, q0
  413b1c:	fe29 0fc3 	cdp2	15, 2, cr0, cr9, cr3, {6}
  return __builtin_mve_vdupq_n_sv4si (__a);
  413b20:	eea6 2b10 	vdup.32	q3, r2
  return __builtin_mve_vcmpneq_n_v4si (__a, __b);
  413b24:	eefd 5a10 	vmrs	r5, <impl def 0xd>
    SELECT_IF_NON_ZERO(242)
  413b28:	ef06 6150 	vand	q3, q3, q0
  413b2c:	fe25 0fc3 	cdp2	15, 2, cr0, cr5, cr3, {6}
  return __builtin_mve_vdupq_n_sv4si (__a);
  413b30:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
  return __builtin_mve_vcmpneq_n_v4si (__a, __b);
  413b34:	eefd 4a10 	vmrs	r4, <impl def 0xd>
  413b38:	fe27 0fc3 	cdp2	15, 2, cr0, cr7, cr3, {6}
  return __builtin_mve_vdupq_n_sv4si (__a);
  413b3c:	eea6 1b10 	vdup.32	q3, r1
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  413b40:	f04f 5e80 	mov.w	lr, #268435456	@ 0x10000000
    SELECT_IF_NON_ZERO(1302514674)
  413b44:	ef06 6150 	vand	q3, q3, q0
  return __builtin_mve_vcmpneq_n_v4si (__a, __b);
  413b48:	eefd 0a10 	vmrs	r0, <impl def 0xd>
  413b4c:	fe27 0fc3 	cdp2	15, 2, cr0, cr7, cr3, {6}
  return __builtin_mve_vdupq_n_sv4si (__a);
  413b50:	eea6 eb10 	vdup.32	q3, lr
    SELECT_IF_NON_ZERO(39332535)
  413b54:	ef06 6150 	vand	q3, q3, q0
  413b58:	eea4 3b10 	vdup.32	q2, r3
  return __builtin_mve_vcmpneq_n_v4si (__a, __b);
  413b5c:	eefd 7a10 	vmrs	r7, <impl def 0xd>
  413b60:	fe27 0fc3 	cdp2	15, 2, cr0, cr7, cr3, {6}
  return __builtin_mve_vmvnq_m_sv4si (__inactive, __a, __p);
  413b64:	ef24 a154 	vorr	q5, q2, q2
  return __builtin_mve_vcmpneq_n_v4si (__a, __b);
  413b68:	eefd 1a10 	vmrs	r1, <impl def 0xd>
  return __builtin_mve_vmvnq_m_sv4si (__inactive, __a, __p);
  413b6c:	eeed ca10 	vmsr	<impl def 0xd>, ip
  413b70:	ef24 6154 	vorr	q3, q2, q2
  413b74:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413b78:	ffb0 a5c4 	vmvn	q5, q2
  413b7c:	eeed 7a10 	vmsr	<impl def 0xd>, r7
  413b80:	ef24 0154 	vorr	q0, q2, q2
  413b84:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413b88:	ffb0 65c4 	vmvn	q3, q2
  413b8c:	eeed 6a10 	vmsr	<impl def 0xd>, r6
  413b90:	ed8d bf38 	stc	15, cr11, [sp, #224]	@ 0xe0
  413b94:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413b98:	ffb0 05c4 	vmvn	q0, q2
  413b9c:	ef24 a154 	vorr	q5, q2, q2
  413ba0:	eeed 5a10 	vmsr	<impl def 0xd>, r5
  413ba4:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413ba8:	ffb0 a5c4 	vmvn	q5, q2
  413bac:	eeed 1a10 	vmsr	<impl def 0xd>, r1
  413bb0:	ed8d bf20 	stc	15, cr11, [sp, #128]	@ 0x80
  413bb4:	ef24 a154 	vorr	q5, q2, q2
  413bb8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413bbc:	ffb0 a5c4 	vmvn	q5, q2
  413bc0:	eeed 4a10 	vmsr	<impl def 0xd>, r4
  413bc4:	ed8d bf18 	stc	15, cr11, [sp, #96]	@ 0x60
  413bc8:	ef24 a154 	vorr	q5, q2, q2
  413bcc:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413bd0:	ffb0 a5c4 	vmvn	q5, q2
    const int32x4_t x = vaddq_n_s32(val_mod_minus_quarter << 5, 1 << 28);
  413bd4:	efa5 2552 	vshl.s32	q1, q1, #5
  413bd8:	ed8d bf10 	stc	15, cr11, [sp, #64]	@ 0x40
  413bdc:	eeed 0a10 	vmsr	<impl def 0xd>, r0
  413be0:	ef24 a154 	vorr	q5, q2, q2
  413be4:	f8bd 2110 	ldrh.w	r2, [sp, #272]	@ 0x110
  return __builtin_mve_vaddq_n_sv4si (__a, __b);
  413be8:	ee23 2f4e 	cdp	15, 2, cr2, cr3, cr14, {2}
  return __builtin_mve_vmvnq_m_sv4si (__inactive, __a, __p);
  413bec:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413bf0:	ffb0 a5c4 	vmvn	q5, q2
  413bf4:	eeed 2a10 	vmsr	<impl def 0xd>, r2
  return __builtin_mve_vdupq_n_sv4si (__a);
  413bf8:	ed8d ff00 	stc	15, cr15, [sp]
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  413bfc:	ff22 8b42 	vqrdmulh.s32	q4, q1, q1
  return __builtin_mve_vmvnq_m_sv4si (__inactive, __a, __p);
  413c00:	ed8d bf08 	stc	15, cr11, [sp, #32]
  413c04:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413c08:	ffb0 45c4 	vmvn	q2, q2
#undef SELECT_IF_NON_ZERO

    mve_pred16_t p = vcmpeqq_n_s32(val, 0);
    mask = vmvnq_m_s32(vdupq_n_s32(0), vdupq_n_s32(0), p);

    result = SELECT_USING_MASK(mask, vdupq_n_s32(NN_Q31_MAX), result);
  413c0c:	ed9d bf00 	ldc	15, cr11, [sp]
  return __builtin_mve_vdupq_n_sv4si (__a);
  413c10:	f06f 0b01 	mvn.w	fp, #1
  return __builtin_mve_vmvnq_m_sv4si (__inactive, __a, __p);
  413c14:	ed8d 1f28 	stc	15, cr1, [sp, #160]	@ 0xa0
  return __builtin_mve_vdupq_n_sv4si (__a);
  413c18:	eeae bb10 	vdup.32	q7, fp
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  413c1c:	ff28 0b48 	vqrdmulh.s32	q0, q4, q4
  413c20:	ed8d 5f00 	stc	15, cr5, [sp]
  413c24:	ef0a 4154 	vand	q2, q5, q2
  413c28:	ed8d 5f44 	stc	15, cr5, [sp, #272]	@ 0x110
  return __builtin_mve_vandq_sv4si (__a, __b);
  413c2c:	ef00 415e 	vand	q2, q0, q7
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  413c30:	efa1 4054 	vshr.s32	q2, q2, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  413c34:	ef20 0054 	vqadd.s32	q0, q0, q2
  return __builtin_mve_vmvnq_m_sv4si (__inactive, __a, __p);
  413c38:	ed8d 7f30 	stc	15, cr7, [sp, #192]	@ 0xc0
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  413c3c:	ef2e 0540 	vrshl.s32	q0, q0, q7
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  413c40:	ff28 6b42 	vqrdmulh.s32	q3, q4, q1
  413c44:	ed9d ff40 	ldc	15, cr15, [sp, #256]	@ 0x100
    const int32x4_t op_1 = DIV_POW2_MVE(MUL_SAT_MVE(x2, x2), 2) + MUL_SAT_MVE(x2, x);
  413c48:	ef26 6840 	vadd.i32	q3, q3, q0
  return __builtin_mve_vdupq_n_sv4si (__a);
  413c4c:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  413c50:	ff26 6b4e 	vqrdmulh.s32	q3, q3, q7
  return __builtin_mve_vdupq_n_sv4si (__a);
  413c54:	eeac 9b10 	vdup.32	q6, r9
    const int32x4_t op_2 = x + DIV_POW2_MVE(MUL_SAT_MVE(op_1, vdupq_n_s32(715827883)) + x2, 1);
  413c58:	ef26 6848 	vadd.i32	q3, q3, q4
  return __builtin_mve_vandq_sv4si (__a, __b);
  413c5c:	ef06 415c 	vand	q2, q3, q6
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  413c60:	efa1 4054 	vshr.s32	q2, q2, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  413c64:	ef26 6054 	vqadd.s32	q3, q3, q2
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  413c68:	ef2c 6546 	vrshl.s32	q3, q3, q6
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  413c6c:	ed9d 9f3c 	ldc	15, cr9, [sp, #240]	@ 0xf0
  413c70:	ef26 6842 	vadd.i32	q3, q3, q1
  413c74:	ff28 6b46 	vqrdmulh.s32	q3, q4, q3
    int32x4_t result = vdupq_n_s32(1895147668) + MUL_SAT_MVE(vdupq_n_s32(1895147668), op_2);
  413c78:	ef26 6848 	vadd.i32	q3, q3, q4
  413c7c:	ed9d 9f34 	ldc	15, cr9, [sp, #208]	@ 0xd0
    SELECT_IF_NON_ZERO(1672461947)
  413c80:	ed9d 3f38 	ldc	15, cr3, [sp, #224]	@ 0xe0
  413c84:	ff26 4b48 	vqrdmulh.s32	q2, q3, q4
  413c88:	ef16 6152 	vbic	q3, q3, q1
  413c8c:	ef04 4152 	vand	q2, q2, q1
  413c90:	ed9d 9f2c 	ldc	15, cr9, [sp, #176]	@ 0xb0
  413c94:	ff04 4156 	veor	q2, q2, q3
    SELECT_IF_NON_ZERO(1302514674)
  413c98:	ed9d 3f30 	ldc	15, cr3, [sp, #192]	@ 0xc0
  413c9c:	ff24 6b48 	vqrdmulh.s32	q3, q2, q4
  413ca0:	ef14 4152 	vbic	q2, q2, q1
  413ca4:	ef06 6152 	vand	q3, q3, q1
  413ca8:	ed9d df24 	ldc	15, cr13, [sp, #144]	@ 0x90
  413cac:	ff06 6154 	veor	q3, q3, q2
    SELECT_IF_NON_ZERO(790015084)
  413cb0:	ed9d 1f28 	ldc	15, cr1, [sp, #160]	@ 0xa0
  413cb4:	ff26 4b4c 	vqrdmulh.s32	q2, q3, q6
  413cb8:	ef16 6150 	vbic	q3, q3, q0
  413cbc:	ef04 4150 	vand	q2, q2, q0
  413cc0:	ff04 4156 	veor	q2, q2, q3
  413cc4:	ed9d 7f1c 	ldc	15, cr7, [sp, #112]	@ 0x70
    SELECT_IF_NON_ZERO(290630308)
  413cc8:	ed9d bf20 	ldc	15, cr11, [sp, #128]	@ 0x80
  413ccc:	ff24 6b46 	vqrdmulh.s32	q3, q2, q3
  413cd0:	ef14 415a 	vbic	q2, q2, q5
  413cd4:	ef06 615a 	vand	q3, q3, q5
  413cd8:	ed9d 3f14 	ldc	15, cr3, [sp, #80]	@ 0x50
  413cdc:	ff06 6154 	veor	q3, q3, q2
    SELECT_IF_NON_ZERO(39332535)
  413ce0:	ed9d bf18 	ldc	15, cr11, [sp, #96]	@ 0x60
  413ce4:	ff26 4b42 	vqrdmulh.s32	q2, q3, q1
  413ce8:	ef16 615a 	vbic	q3, q3, q5
  413cec:	ef04 415a 	vand	q2, q2, q5
  413cf0:	ed9d ff0c 	ldc	15, cr15, [sp, #48]	@ 0x30
  413cf4:	ff04 4156 	veor	q2, q2, q3
    SELECT_IF_NON_ZERO(720401)
  413cf8:	ed9d bf10 	ldc	15, cr11, [sp, #64]	@ 0x40
  413cfc:	ff24 6b4e 	vqrdmulh.s32	q3, q2, q7
  413d00:	ef14 415a 	vbic	q2, q2, q5
  413d04:	ef06 615a 	vand	q3, q3, q5
  413d08:	ed9d df04 	ldc	15, cr13, [sp, #16]
  413d0c:	ff06 6154 	veor	q3, q3, q2
    SELECT_IF_NON_ZERO(242)
  413d10:	ed9d bf08 	ldc	15, cr11, [sp, #32]
  413d14:	ff26 0b4c 	vqrdmulh.s32	q0, q3, q6
  413d18:	ef16 615a 	vbic	q3, q3, q5
  413d1c:	ef00 015a 	vand	q0, q0, q5
    result = SELECT_USING_MASK(mask, vdupq_n_s32(NN_Q31_MAX), result);
  413d20:	ed9d 5f00 	ldc	15, cr5, [sp]
    SELECT_IF_NON_ZERO(242)
  413d24:	ff00 0156 	veor	q0, q0, q3
    result = SELECT_USING_MASK(mask, vdupq_n_s32(NN_Q31_MAX), result);
  413d28:	ef10 0154 	vbic	q0, q0, q2
    return result;
}
  413d2c:	ed9d 5f44 	ldc	15, cr5, [sp, #272]	@ 0x110
  413d30:	ff04 0150 	veor	q0, q2, q0
  413d34:	b049      	add	sp, #292	@ 0x124
  413d36:	ecbd 8b10 	vpop	{d8-d15}
  413d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413d3e:	bf00      	nop
  413d40:	2aaaaaab 	.word	0x2aaaaaab
  413d44:	70f5a894 	.word	0x70f5a894
  413d48:	4da2cbf2 	.word	0x4da2cbf2
  413d4c:	000afe11 	.word	0x000afe11
  413d50:	2f16ac6c 	.word	0x2f16ac6c
  413d54:	63afbe7b 	.word	0x63afbe7b
  413d58:	02582ab7 	.word	0x02582ab7
  413d5c:	1152aaa4 	.word	0x1152aaa4

00413d60 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
  413d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413d64:	ed2d 8b10 	vpush	{d8-d15}
#ifdef ARM_MATH_MVEI

#define ACT_MIN ((int8_t)NN_Q7_MIN)
#define ACT_MAX ((int8_t)NN_Q7_MAX)

    const int32_t mask = (1 << shift);
  413d68:	2401      	movs	r4, #1
{
  413d6a:	b0a5      	sub	sp, #148	@ 0x94
  413d6c:	9304      	str	r3, [sp, #16]
    const int32_t mask = (1 << shift);
  413d6e:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
{
  413d70:	f8dd 80fc 	ldr.w	r8, [sp, #252]	@ 0xfc
    const int32_t mask = (1 << shift);
  413d74:	409c      	lsls	r4, r3

    for (int i_num_rows = 0; i_num_rows < num_rows; ++i_num_rows)
  413d76:	1e0b      	subs	r3, r1, #0
  413d78:	9320      	str	r3, [sp, #128]	@ 0x80
  413d7a:	f340 845d 	ble.w	414638 <arm_softmax_s8+0x8d8>
  413d7e:	4693      	mov	fp, r2
    {
        int8_t max = ACT_MIN;

        int32_t vec_count = (row_size + 15) / 16;
  413d80:	320f      	adds	r2, #15
  413d82:	f10b 031e 	add.w	r3, fp, #30
  413d86:	bf48      	it	mi
  413d88:	461a      	movmi	r2, r3
    for (int i_num_rows = 0; i_num_rows < num_rows; ++i_num_rows)
  413d8a:	2100      	movs	r1, #0
            const int8x16_t ip = vldrbq_z_s8(&input[i * 16], p);
            max = vmaxvq_p_s8(max, ip, p);
            r_count -= 16;
        }

        vec_count = row_size / 4;
  413d8c:	f1bb 0f00 	cmp.w	fp, #0
  413d90:	f10b 0303 	add.w	r3, fp, #3
  413d94:	bfa8      	it	ge
  413d96:	465b      	movge	r3, fp
  413d98:	46c2      	mov	sl, r8
  413d9a:	46a0      	mov	r8, r4
    for (int i_num_rows = 0; i_num_rows < num_rows; ++i_num_rows)
  413d9c:	911a      	str	r1, [sp, #104]	@ 0x68

            vec_count--;
            idx++;
        }

        const int32_t tail_idx = row_size & ~3;
  413d9e:	f02b 0103 	bic.w	r1, fp, #3
        vec_count = row_size / 4;
  413da2:	109b      	asrs	r3, r3, #2
        const int32_t tail_idx = row_size & ~3;
  413da4:	9123      	str	r1, [sp, #140]	@ 0x8c
  413da6:	1841      	adds	r1, r0, r1
        vec_count = row_size / 4;
  413da8:	930e      	str	r3, [sp, #56]	@ 0x38
  413daa:	424b      	negs	r3, r1
        for (int i = 0; i < (row_size & 3); i++)
  413dac:	f00b 0503 	and.w	r5, fp, #3
        int32_t vec_count = (row_size + 15) / 16;
  413db0:	1112      	asrs	r2, r2, #4
  413db2:	9305      	str	r3, [sp, #20]
  413db4:	ea4f 034b 	mov.w	r3, fp, lsl #1
  413db8:	9109      	str	r1, [sp, #36]	@ 0x24
  413dba:	4458      	add	r0, fp
        for (int i = 0; i < (row_size & 3); i++)
  413dbc:	9503      	str	r5, [sp, #12]
        int32_t vec_count = (row_size + 15) / 16;
  413dbe:	9222      	str	r2, [sp, #136]	@ 0x88
  413dc0:	9321      	str	r3, [sp, #132]	@ 0x84
  413dc2:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
  413dc6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
        for (int i = 0; i < vec_count; i++)
  413dc8:	2b00      	cmp	r3, #0
  413dca:	eba0 0903 	sub.w	r9, r0, r3
  413dce:	f341 817e 	ble.w	4150ce <arm_softmax_s8+0x136e>
        int8_t max = ACT_MIN;
  413dd2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
  413dd4:	f06f 0b7f 	mvn.w	fp, #127	@ 0x7f
  413dd8:	2a01      	cmp	r2, #1
  413dda:	bfb8      	it	lt
  413ddc:	2201      	movlt	r2, #1
  413dde:	f042 e001 	dls	lr, r2
  return __builtin_mve_vldrbq_z_sv16qi ((__builtin_neon_qi *) __base, __p);
  413de2:	f003 e801 	bfcsel	0, 412de8 <arm_nn_mat_mult_s8+0xf4>, 4, eq
            const int8x16_t ip = vldrbq_z_s8(&input[i * 16], p);
  413de6:	1ac2      	subs	r2, r0, r3
  413de8:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413dec:	ed92 7e00 	ldc	14, cr7, [r2]
  return __builtin_mve_vmaxvq_p_sv16qi (__a, __b, __p);
  413df0:	fe71 0f4d 	cdp2	15, 7, cr0, cr1, cr13, {2}
  413df4:	eee2 bf06 	cdp	15, 14, cr11, cr2, cr6, {0}
  return __builtin_mve_vldrbq_z_sv16qi ((__builtin_neon_qi *) __base, __p);
  413df8:	3b10      	subs	r3, #16
  return __builtin_mve_vmaxvq_p_sv16qi (__a, __b, __p);
  413dfa:	fa4f fb8b 	sxtb.w	fp, fp
        for (int i = 0; i < vec_count; i++)
  413dfe:	f00f c011 	le	lr, 413de2 <arm_softmax_s8+0x82>
        while (vec_count)
  413e02:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  413e04:	2d00      	cmp	r5, #0
  413e06:	f001 815b 	beq.w	4150c0 <arm_softmax_s8+0x1360>
  return __builtin_mve_vdupq_n_sv4si (__a);
  413e0a:	9b04      	ldr	r3, [sp, #16]
        int32_t sum = 0;
  413e0c:	2700      	movs	r7, #0
  413e0e:	eeaa 3b10 	vdup.32	q5, r3
  413e12:	f06f 030b 	mvn.w	r3, #11
  413e16:	eea8 7b10 	vdup.32	q4, r7
  413e1a:	eeac 3b10 	vdup.32	q6, r3
        {
            const int32_t diff = input[tail_idx + i] - max;
  413e1e:	464e      	mov	r6, r9
  413e20:	e003      	b.n	413e2a <arm_softmax_s8+0xca>
        while (vec_count)
  413e22:	3d01      	subs	r5, #1
  413e24:	f106 0604 	add.w	r6, r6, #4
  413e28:	d023      	beq.n	413e72 <arm_softmax_s8+0x112>
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  413e2a:	ed96 0f00 	ldc	15, cr0, [r6]
  return __builtin_mve_vsubq_n_sv4si (__a, __b);
  413e2e:	ee21 1f4b 	cdp	15, 2, cr1, cr1, cr11, {2}
  return __builtin_mve_vcmpgeq_n_v4si (__a, __b);
  413e32:	fe21 1f4a 	cdp2	15, 2, cr1, cr1, cr10, {2}
  413e36:	eefd 4a10 	vmrs	r4, <impl def 0xd>
  413e3a:	b2a4      	uxth	r4, r4
            if (p != 0)
  413e3c:	2c00      	cmp	r4, #0
  413e3e:	d0f0      	beq.n	413e22 <arm_softmax_s8+0xc2>
  return __builtin_mve_vmulq_n_sv4si (__a, __b);
  413e40:	ee21 1e68 	cdp	14, 2, cr1, cr1, cr8, {3}
                res = arm_exp_on_negative_values_mve_32x4(res);
  413e44:	ff20 0b4a 	vqrdmulh.s32	q0, q0, q5
  413e48:	f7ff fdfe 	bl	413a48 <arm_exp_on_negative_values_mve_32x4>
  return __builtin_mve_vandq_sv4si (__a, __b);
  413e4c:	ef00 615c 	vand	q3, q0, q6
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  413e50:	efa1 6056 	vshr.s32	q3, q3, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  413e54:	ef20 0056 	vqadd.s32	q0, q0, q3
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  413e58:	eeed 4a10 	vmsr	<impl def 0xd>, r4
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  413e5c:	ef2c 0540 	vrshl.s32	q0, q0, q6
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  413e60:	fe31 0f09 	cdp2	15, 3, cr0, cr1, cr9, {0}
  return __builtin_mve_vaddvq_sv4si (__a);
  413e64:	eef9 2f00 	cdp	15, 15, cr2, cr9, cr0, {0}
        while (vec_count)
  413e68:	3d01      	subs	r5, #1
                sum += vaddvq_s32(res);
  413e6a:	4417      	add	r7, r2
        while (vec_count)
  413e6c:	f106 0604 	add.w	r6, r6, #4
  413e70:	d1db      	bne.n	413e2a <arm_softmax_s8+0xca>
        for (int i = 0; i < (row_size & 3); i++)
  413e72:	9b03      	ldr	r3, [sp, #12]
  413e74:	9700      	str	r7, [sp, #0]
  413e76:	2b00      	cmp	r3, #0
  413e78:	f000 80cf 	beq.w	41401a <arm_softmax_s8+0x2ba>
  413e7c:	9b04      	ldr	r3, [sp, #16]
  413e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
  413e82:	f000 872c 	beq.w	414cde <arm_softmax_s8+0xf7e>
        int32_t sum = 0;
  413e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    mult = mult + (q63_t)m1 * m2;
  413e88:	f8cd a0fc 	str.w	sl, [sp, #252]	@ 0xfc
  413e8c:	469a      	mov	sl, r3
  413e8e:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
            const int32_t diff = input[tail_idx + i] - max;
  413e92:	f91a 3b01 	ldrsb.w	r3, [sl], #1
            if (diff >= diff_min)
  413e96:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
            const int32_t diff = input[tail_idx + i] - max;
  413e98:	eba3 030b 	sub.w	r3, r3, fp
            if (diff >= diff_min)
  413e9c:	429a      	cmp	r2, r3
  413e9e:	f300 80b2 	bgt.w	414006 <arm_softmax_s8+0x2a6>
            {
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
  413ea2:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
    if ((m1 < 0) ^ (m2 < 0))
  413ea4:	9804      	ldr	r0, [sp, #16]
  413ea6:	4093      	lsls	r3, r2
  413ea8:	ea80 0203 	eor.w	r2, r0, r3
    q63_t mult = 1 << 30;
  413eac:	2a00      	cmp	r2, #0
  413eae:	bfb4      	ite	lt
  413eb0:	f04f 31ff 	movlt.w	r1, #4294967295	@ 0xffffffff
  413eb4:	2100      	movge	r1, #0
  413eb6:	4acc      	ldr	r2, [pc, #816]	@ (4141e8 <arm_softmax_s8+0x488>)
  413eb8:	bfa8      	it	ge
  413eba:	f04f 4280 	movge.w	r2, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  413ebe:	fbc3 2100 	smlal	r2, r1, r3, r0
  413ec2:	2900      	cmp	r1, #0
  413ec4:	da05      	bge.n	413ed2 <arm_softmax_s8+0x172>
  413ec6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  413eca:	18d3      	adds	r3, r2, r3
  413ecc:	461a      	mov	r2, r3
  413ece:	f141 0100 	adc.w	r1, r1, #0
  413ed2:	460f      	mov	r7, r1
  413ed4:	4616      	mov	r6, r2
  413ed6:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
    mult = mult + (q63_t)m1 * m2;
  413eda:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  413ede:	2000      	movs	r0, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
  413ee0:	f046 457f 	orr.w	r5, r6, #4278190080	@ 0xff000000
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
  413ee4:	ea4f 1c45 	mov.w	ip, r5, lsl #5
  413ee8:	f10c 5c80 	add.w	ip, ip, #268435456	@ 0x10000000
    result = (int32_t)(mult / (1ll << 31));
  413eec:	fbcc 100c 	smlal	r1, r0, ip, ip
  413ef0:	2800      	cmp	r0, #0
  413ef2:	4634      	mov	r4, r6
  413ef4:	da05      	bge.n	413f02 <arm_softmax_s8+0x1a2>
  413ef6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  413efa:	18cb      	adds	r3, r1, r3
  413efc:	4619      	mov	r1, r3
  413efe:	f140 0000 	adc.w	r0, r0, #0
  413f02:	4688      	mov	r8, r1
  413f04:	4681      	mov	r9, r0
  413f06:	ea58 79ef 	orrs.w	r9, r8, pc, asr #31
    mult = mult + (q63_t)m1 * m2;
  413f0a:	fba8 7e08 	umull	r7, lr, r8, r8
  413f0e:	fb09 f108 	mul.w	r1, r9, r8
  413f12:	f117 4780 	adds.w	r7, r7, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  413f16:	eb4e 0e41 	adc.w	lr, lr, r1, lsl #1
  413f1a:	f1be 0f00 	cmp.w	lr, #0
  413f1e:	4646      	mov	r6, r8
  413f20:	464b      	mov	r3, r9
  413f22:	4642      	mov	r2, r8
  413f24:	da05      	bge.n	413f32 <arm_softmax_s8+0x1d2>
  413f26:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  413f2a:	1879      	adds	r1, r7, r1
  413f2c:	460f      	mov	r7, r1
  413f2e:	f14e 0e00 	adc.w	lr, lr, #0
  413f32:	46b8      	mov	r8, r7
  413f34:	46f1      	mov	r9, lr
  413f36:	ea58 79ef 	orrs.w	r9, r8, pc, asr #31
    mult = mult + (q63_t)m1 * m2;
  413f3a:	fb0c f303 	mul.w	r3, ip, r3
  413f3e:	ea4f 7eec 	mov.w	lr, ip, asr #31
  413f42:	fb06 330e 	mla	r3, r6, lr, r3
  413f46:	fbac e606 	umull	lr, r6, ip, r6
  413f4a:	441e      	add	r6, r3
    q31_t threshold = remainder_mask >> 1;
  413f4c:	ea4f 73d8 	mov.w	r3, r8, lsr #31
    int32_t remainder = remainder_mask & dividend;
  413f50:	f008 0103 	and.w	r1, r8, #3
    q31_t threshold = remainder_mask >> 1;
  413f54:	3301      	adds	r3, #1
    if ((m1 < 0) ^ (m2 < 0))
  413f56:	ea8c 0702 	eor.w	r7, ip, r2
    result = dividend >> exponent;
  413f5a:	ea4f 00a8 	mov.w	r0, r8, asr #2
        result++;
  413f5e:	428b      	cmp	r3, r1
  413f60:	ea50 90a0 			@ <UNDEFINED> instruction: 0xea5090a0
    q63_t mult = 1 << 30;
  413f64:	2f00      	cmp	r7, #0
  413f66:	4ba0      	ldr	r3, [pc, #640]	@ (4141e8 <arm_softmax_s8+0x488>)
  413f68:	bfaa      	itet	ge
  413f6a:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
  413f6e:	f04f 31ff 	movlt.w	r1, #4294967295	@ 0xffffffff
  413f72:	2100      	movge	r1, #0
    mult = mult + (q63_t)m1 * m2;
  413f74:	eb1e 0303 	adds.w	r3, lr, r3
    result = (int32_t)(mult / (1ll << 31));
  413f78:	eb46 0101 	adc.w	r1, r6, r1
  413f7c:	2900      	cmp	r1, #0
  413f7e:	da05      	bge.n	413f8c <arm_softmax_s8+0x22c>
  413f80:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
  413f84:	199e      	adds	r6, r3, r6
  413f86:	4633      	mov	r3, r6
  413f88:	f141 0100 	adc.w	r1, r1, #0
  413f8c:	461e      	mov	r6, r3
  413f8e:	460f      	mov	r7, r1
  413f90:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
    if ((m1 < 0) ^ (m2 < 0))
  413f94:	4b95      	ldr	r3, [pc, #596]	@ (4141ec <arm_softmax_s8+0x48c>)
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  413f96:	4430      	add	r0, r6
    if ((m1 < 0) ^ (m2 < 0))
  413f98:	4043      	eors	r3, r0
    q63_t mult = 1 << 30;
  413f9a:	2b00      	cmp	r3, #0
  413f9c:	bfb4      	ite	lt
  413f9e:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
  413fa2:	2600      	movge	r6, #0
  413fa4:	4b90      	ldr	r3, [pc, #576]	@ (4141e8 <arm_softmax_s8+0x488>)
  413fa6:	bfa8      	it	ge
  413fa8:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  413fac:	498f      	ldr	r1, [pc, #572]	@ (4141ec <arm_softmax_s8+0x48c>)
  413fae:	fbc0 3601 	smlal	r3, r6, r0, r1
  413fb2:	2e00      	cmp	r6, #0
  413fb4:	da05      	bge.n	413fc2 <arm_softmax_s8+0x262>
  413fb6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  413fba:	1859      	adds	r1, r3, r1
  413fbc:	460b      	mov	r3, r1
  413fbe:	f146 0600 	adc.w	r6, r6, #0
  413fc2:	4618      	mov	r0, r3
  413fc4:	4631      	mov	r1, r6
  413fc6:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  413fca:	4402      	add	r2, r0
    if (result < 0)
  413fcc:	1053      	asrs	r3, r2, #1
  413fce:	d405      	bmi.n	413fdc <arm_softmax_s8+0x27c>
        result++;
  413fd0:	f012 0f01 	tst.w	r2, #1
  413fd4:	f103 0201 	add.w	r2, r3, #1
  413fd8:	bf18      	it	ne
  413fda:	4613      	movne	r3, r2
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  413fdc:	eb0c 0103 	add.w	r1, ip, r3
    if ((m1 < 0) ^ (m2 < 0))
  413fe0:	4b83      	ldr	r3, [pc, #524]	@ (4141f0 <arm_softmax_s8+0x490>)
  413fe2:	404b      	eors	r3, r1
    q63_t mult = 1 << 30;
  413fe4:	2b00      	cmp	r3, #0
  413fe6:	4b80      	ldr	r3, [pc, #512]	@ (4141e8 <arm_softmax_s8+0x488>)
  413fe8:	bfab      	itete	ge
  413fea:	f04f 4280 	movge.w	r2, #1073741824	@ 0x40000000
  413fee:	461a      	movlt	r2, r3
  413ff0:	2300      	movge	r3, #0
  413ff2:	f04f 33ff 	movlt.w	r3, #4294967295	@ 0xffffffff
    mask = MASK_IF_ZERO(val);
  413ff6:	2c00      	cmp	r4, #0
  413ff8:	f040 8360 	bne.w	4146bc <arm_softmax_s8+0x95c>
  413ffc:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  414000:	9b00      	ldr	r3, [sp, #0]
  414002:	4423      	add	r3, r4
  414004:	9300      	str	r3, [sp, #0]
        for (int i = 0; i < (row_size & 3); i++)
  414006:	9b05      	ldr	r3, [sp, #20]
  414008:	9a03      	ldr	r2, [sp, #12]
  41400a:	4453      	add	r3, sl
  41400c:	429a      	cmp	r2, r3
  41400e:	f73f af40 	bgt.w	413e92 <arm_softmax_s8+0x132>
  414012:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	@ 0x48
  414016:	f8dd a0fc 	ldr.w	sl, [sp, #252]	@ 0xfc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
  41401a:	9b00      	ldr	r3, [sp, #0]
  41401c:	2b00      	cmp	r3, #0
  41401e:	f000 8338 	beq.w	414692 <arm_softmax_s8+0x932>
  {
    return 32U;
  }
  return __builtin_clz(value);
  414022:	fab3 f683 	clz	r6, r3
            }
        }

        const int32_t headroom = __CLZ((uint32_t)sum);
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
  414026:	f1c6 0223 	rsb	r2, r6, #35	@ 0x23
  41402a:	920d      	str	r2, [sp, #52]	@ 0x34
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
  41402c:	f340 87e7 	ble.w	414ffe <arm_softmax_s8+0x129e>
  414030:	40b3      	lsls	r3, r6
  414032:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
  414036:	f113 4200 	adds.w	r2, r3, #2147483648	@ 0x80000000
    const int64_t sum = (int64_t)val + (int64_t)NN_Q31_MAX;
  41403a:	ea4f 73e3 	mov.w	r3, r3, asr #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
  41403e:	f143 0300 	adc.w	r3, r3, #0
  414042:	9301      	str	r3, [sp, #4]
  414044:	9200      	str	r2, [sp, #0]
  414046:	e9dd 0100 	ldrd	r0, r1, [sp]
  41404a:	ea50 016f 	orrs.w	r1, r0, pc, asr #1
    mult = mult + (q63_t)m1 * m2;
  41404e:	4c69      	ldr	r4, [pc, #420]	@ (4141f4 <arm_softmax_s8+0x494>)
  414050:	4243      	negs	r3, r0
  414052:	fb04 3301 	mla	r3, r4, r1, r3
  414056:	fba0 5404 	umull	r5, r4, r0, r4
  41405a:	441c      	add	r4, r3
  41405c:	4b62      	ldr	r3, [pc, #392]	@ (4141e8 <arm_softmax_s8+0x488>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
  41405e:	4607      	mov	r7, r0
    mult = mult + (q63_t)m1 * m2;
  414060:	18ed      	adds	r5, r5, r3
    result = (int32_t)(mult / (1ll << 31));
  414062:	f164 0400 	sbc.w	r4, r4, #0
  414066:	2c00      	cmp	r4, #0
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
  414068:	e9cd 0100 	strd	r0, r1, [sp]
    result = (int32_t)(mult / (1ll << 31));
  41406c:	da05      	bge.n	41407a <arm_softmax_s8+0x31a>
  41406e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  414072:	18eb      	adds	r3, r5, r3
  414074:	461d      	mov	r5, r3
  414076:	f144 0400 	adc.w	r4, r4, #0
  41407a:	462a      	mov	r2, r5
  41407c:	4623      	mov	r3, r4
    mult = mult + (q63_t)m1 * m2;
  41407e:	e9dd 4500 	ldrd	r4, r5, [sp]
    result = (int32_t)(mult / (1ll << 31));
  414082:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
  414086:	f102 325a 	add.w	r2, r2, #1515870810	@ 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
  41408a:	fb02 fc05 	mul.w	ip, r2, r5
  41408e:	17d3      	asrs	r3, r2, #31
  414090:	fb03 cc04 	mla	ip, r3, r4, ip
  414094:	fba2 3e04 	umull	r3, lr, r2, r4
  414098:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  41409c:	461c      	mov	r4, r3
  41409e:	eb4c 050e 	adc.w	r5, ip, lr
  4140a2:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  4140a6:	f1c4 5400 	rsb	r4, r4, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
  4140aa:	ea92 0f04 	teq	r2, r4
    mult = mult + (q63_t)m1 * m2;
  4140ae:	fb82 e504 	smull	lr, r5, r2, r4
    if ((m1 < 0) ^ (m2 < 0))
  4140b2:	f140 82fe 	bpl.w	4146b2 <arm_softmax_s8+0x952>
        mult = 1 - mult;
  4140b6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
  4140ba:	4b4b      	ldr	r3, [pc, #300]	@ (4141e8 <arm_softmax_s8+0x488>)
    mult = mult + (q63_t)m1 * m2;
  4140bc:	eb13 030e 	adds.w	r3, r3, lr
    result = (int32_t)(mult / (1ll << 31));
  4140c0:	eb4c 0c05 	adc.w	ip, ip, r5
  4140c4:	f1bc 0f00 	cmp.w	ip, #0
  4140c8:	da05      	bge.n	4140d6 <arm_softmax_s8+0x376>
  4140ca:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
  4140ce:	191c      	adds	r4, r3, r4
  4140d0:	4623      	mov	r3, r4
  4140d2:	f14c 0c00 	adc.w	ip, ip, #0
  4140d6:	4665      	mov	r5, ip
    mult = mult + (q63_t)m1 * m2;
  4140d8:	e9dd 0100 	ldrd	r0, r1, [sp]
    result = (int32_t)(mult / (1ll << 31));
  4140dc:	461c      	mov	r4, r3
  4140de:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  4140e2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
  4140e6:	ea82 0307 	eor.w	r3, r2, r7
    q63_t mult = 1 << 30;
  4140ea:	2b00      	cmp	r3, #0
  4140ec:	4b3e      	ldr	r3, [pc, #248]	@ (4141e8 <arm_softmax_s8+0x488>)
  4140ee:	bfad      	iteet	ge
  4140f0:	f04f 4c80 	movge.w	ip, #1073741824	@ 0x40000000
  4140f4:	469c      	movlt	ip, r3
  4140f6:	f04f 3eff 	movlt.w	lr, #4294967295	@ 0xffffffff
  4140fa:	f04f 0e00 	movge.w	lr, #0
    mult = mult + (q63_t)m1 * m2;
  4140fe:	fb02 f501 	mul.w	r5, r2, r1
  414102:	17d3      	asrs	r3, r2, #31
  414104:	fb03 5500 	mla	r5, r3, r0, r5
  414108:	9b00      	ldr	r3, [sp, #0]
  41410a:	fba2 3403 	umull	r3, r4, r2, r3
  41410e:	eb13 030c 	adds.w	r3, r3, ip
  414112:	442c      	add	r4, r5
    result = (int32_t)(mult / (1ll << 31));
  414114:	eb44 0c0e 	adc.w	ip, r4, lr
  414118:	f1bc 0f00 	cmp.w	ip, #0
  41411c:	f2c0 83db 	blt.w	4148d6 <arm_softmax_s8+0xb76>
  414120:	4665      	mov	r5, ip
  414122:	461c      	mov	r4, r3
  414124:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  414128:	f1c4 5400 	rsb	r4, r4, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
  41412c:	ea82 0304 	eor.w	r3, r2, r4
    q63_t mult = 1 << 30;
  414130:	2b00      	cmp	r3, #0
  414132:	bfb4      	ite	lt
  414134:	f04f 3cff 	movlt.w	ip, #4294967295	@ 0xffffffff
  414138:	f04f 0c00 	movge.w	ip, #0
  41413c:	4b2a      	ldr	r3, [pc, #168]	@ (4141e8 <arm_softmax_s8+0x488>)
  41413e:	bfa8      	it	ge
  414140:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  414144:	fbc2 3c04 	smlal	r3, ip, r2, r4
  414148:	f1bc 0f00 	cmp.w	ip, #0
  41414c:	da05      	bge.n	41415a <arm_softmax_s8+0x3fa>
  41414e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
  414152:	191c      	adds	r4, r3, r4
  414154:	4623      	mov	r3, r4
  414156:	f14c 0c00 	adc.w	ip, ip, #0
  41415a:	461c      	mov	r4, r3
  41415c:	4665      	mov	r5, ip
  41415e:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
  414162:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
  414166:	f280 8361 	bge.w	41482c <arm_softmax_s8+0xacc>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
  41416a:	f1b4 4f60 	cmp.w	r4, #3758096384	@ 0xe0000000
  41416e:	f300 87c3 	bgt.w	4150f8 <arm_softmax_s8+0x1398>
    mult = mult + (q63_t)m1 * m2;
  414172:	9900      	ldr	r1, [sp, #0]
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  414174:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
    mult = mult + (q63_t)m1 * m2;
  414178:	17d3      	asrs	r3, r2, #31
    if ((m1 < 0) ^ (m2 < 0))
  41417a:	ea92 0f07 	teq	r2, r7
    mult = mult + (q63_t)m1 * m2;
  41417e:	fb03 f401 	mul.w	r4, r3, r1
  414182:	9901      	ldr	r1, [sp, #4]
    if ((m1 < 0) ^ (m2 < 0))
  414184:	f100 83ae 	bmi.w	4148e4 <arm_softmax_s8+0xb84>
    mult = mult + (q63_t)m1 * m2;
  414188:	9800      	ldr	r0, [sp, #0]
  41418a:	fb02 4101 	mla	r1, r2, r1, r4
  41418e:	fba0 0402 	umull	r0, r4, r0, r2
  414192:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  414196:	eb41 0104 	adc.w	r1, r1, r4
  41419a:	2900      	cmp	r1, #0
  41419c:	f2c0 83af 	blt.w	4148fe <arm_softmax_s8+0xb9e>
  4141a0:	4604      	mov	r4, r0
  4141a2:	460d      	mov	r5, r1
  4141a4:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  4141a8:	f1c4 5400 	rsb	r4, r4, #536870912	@ 0x20000000
    mult = mult + (q63_t)m1 * m2;
  4141ac:	fb04 f303 	mul.w	r3, r4, r3
  4141b0:	17e1      	asrs	r1, r4, #31
  4141b2:	fb02 3101 	mla	r1, r2, r1, r3
  4141b6:	fba4 0402 	umull	r0, r4, r4, r2
  4141ba:	190b      	adds	r3, r1, r4
  4141bc:	490a      	ldr	r1, [pc, #40]	@ (4141e8 <arm_softmax_s8+0x488>)
  4141be:	1844      	adds	r4, r0, r1
    result = (int32_t)(mult / (1ll << 31));
  4141c0:	f163 0300 	sbc.w	r3, r3, #0
  4141c4:	2b00      	cmp	r3, #0
  4141c6:	da05      	bge.n	4141d4 <arm_softmax_s8+0x474>
  4141c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  4141cc:	1861      	adds	r1, r4, r1
  4141ce:	460c      	mov	r4, r1
  4141d0:	f143 0300 	adc.w	r3, r3, #0
  4141d4:	4620      	mov	r0, r4
  4141d6:	4619      	mov	r1, r3
  4141d8:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
  4141dc:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
  4141e0:	f300 8793 	bgt.w	41510a <arm_softmax_s8+0x13aa>
  4141e4:	e008      	b.n	4141f8 <arm_softmax_s8+0x498>
  4141e6:	bf00      	nop
  4141e8:	c0000001 	.word	0xc0000001
  4141ec:	2aaaaaab 	.word	0x2aaaaaab
  4141f0:	70f5a894 	.word	0x70f5a894
  4141f4:	c3c3c3c4 	.word	0xc3c3c3c4
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  4141f8:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
    int32_t result = val << exp;
  4141fc:	0052      	lsls	r2, r2, #1
  4141fe:	9206      	str	r2, [sp, #24]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
  414200:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
  414204:	9b06      	ldr	r3, [sp, #24]
  414206:	bfd8      	it	le
  414208:	f04f 4300 	movle.w	r3, #2147483648	@ 0x80000000
  41420c:	9306      	str	r3, [sp, #24]

        vec_count = row_size / 4;
        idx = 0;

        while (vec_count)
  41420e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  414210:	b30b      	cbz	r3, 414256 <arm_softmax_s8+0x4f6>
  return __builtin_mve_vdupq_n_sv4si (__a);
  414212:	9b04      	ldr	r3, [sp, #16]
            const int32_t diff = input[tail_idx + i] - max;
  414214:	464d      	mov	r5, r9
  414216:	eeaa 3b10 	vdup.32	q5, r3
  41421a:	9b06      	ldr	r3, [sp, #24]
    const int32x4_t shift = vdupq_n_s32(-exponent);
  41421c:	3e23      	subs	r6, #35	@ 0x23
  41421e:	eea8 3b10 	vdup.32	q4, r3
  414222:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
  414226:	eeac 3b10 	vdup.32	q6, r3
  41422a:	eeae 6b10 	vdup.32	q7, r6
  41422e:	9f40      	ldr	r7, [sp, #256]	@ 0x100
        vec_count = row_size / 4;
  414230:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  return __builtin_mve_vldrbq_sv4si ((__builtin_neon_qi *) __base);
  414232:	ed95 0f00 	ldc	15, cr0, [r5]
  return __builtin_mve_vsubq_n_sv4si (__a, __b);
  414236:	ee21 1f4b 	cdp	15, 2, cr1, cr1, cr11, {2}
  return __builtin_mve_vcmpgeq_n_v4si (__a, __b);
  41423a:	fe21 1f4a 	cdp2	15, 2, cr1, cr1, cr10, {2}
  41423e:	eefd 4a10 	vmrs	r4, <impl def 0xd>
  414242:	b2a4      	uxth	r4, r4

            mve_pred16_t p = vcmpgeq_n_s32(ip, diff_min);

            int32x4_t tmp_res;

            if (p != 0)
  414244:	2c00      	cmp	r4, #0
  414246:	f040 81fc 	bne.w	414642 <arm_softmax_s8+0x8e2>
        while (vec_count)
  41424a:	3e01      	subs	r6, #1
  __builtin_mve_vstrbq_sv4si ((__builtin_neon_qi *) __addr, __value);
  41424c:	eca7 cf04 	stc	15, cr12, [r7], #16
  414250:	f105 0504 	add.w	r5, r5, #4
  414254:	d1ed      	bne.n	414232 <arm_softmax_s8+0x4d2>
            vstrbq_s32(&output[idx], tmp_res);
            vec_count--;
            idx += 4;
        }

        for (int i = 0; i < (row_size & 3); i++)
  414256:	9b03      	ldr	r3, [sp, #12]
  414258:	2b00      	cmp	r3, #0
  41425a:	f000 81d9 	beq.w	414610 <arm_softmax_s8+0x8b0>
    const q31_t remainder_mask = (1 << exponent) - 1;
  41425e:	2301      	movs	r3, #1
  414260:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  414262:	4093      	lsls	r3, r2
  414264:	3b01      	subs	r3, #1
  414266:	931c      	str	r3, [sp, #112]	@ 0x70
    q31_t threshold = remainder_mask >> 1;
  414268:	105b      	asrs	r3, r3, #1
  41426a:	931d      	str	r3, [sp, #116]	@ 0x74
  41426c:	9b04      	ldr	r3, [sp, #16]
  41426e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
  414272:	f000 835f 	beq.w	414934 <arm_softmax_s8+0xbd4>
  414276:	9b40      	ldr	r3, [sp, #256]	@ 0x100
  414278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
            const int32_t diff = input[tail_idx + i] - max;
  41427a:	9909      	ldr	r1, [sp, #36]	@ 0x24
  41427c:	189f      	adds	r7, r3, r2
  41427e:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
  414282:	468c      	mov	ip, r1
  414284:	46d3      	mov	fp, sl
  414286:	460a      	mov	r2, r1
  414288:	46ba      	mov	sl, r7
  41428a:	9b03      	ldr	r3, [sp, #12]
  41428c:	f8cd 8078 	str.w	r8, [sp, #120]	@ 0x78
  414290:	440b      	add	r3, r1
  414292:	9308      	str	r3, [sp, #32]
  414294:	f8cd 907c 	str.w	r9, [sp, #124]	@ 0x7c
        {
            int32_t diff = input[tail_idx + i] - max;
  414298:	f91c 1b01 	ldrsb.w	r1, [ip], #1
  41429c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  41429e:	1ac9      	subs	r1, r1, r3
            if (diff >= diff_min)
  4142a0:	458b      	cmp	fp, r1
  4142a2:	f300 81f3 	bgt.w	41468c <arm_softmax_s8+0x92c>
            {
                const int32_t res =
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) +
  4142a6:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
    if ((m1 < 0) ^ (m2 < 0))
  4142a8:	9804      	ldr	r0, [sp, #16]
  4142aa:	4099      	lsls	r1, r3
  4142ac:	ea80 0301 	eor.w	r3, r0, r1
    q63_t mult = 1 << 30;
  4142b0:	2b00      	cmp	r3, #0
  4142b2:	bfb4      	ite	lt
  4142b4:	f04f 32ff 	movlt.w	r2, #4294967295	@ 0xffffffff
  4142b8:	2200      	movge	r2, #0
  4142ba:	4bcc      	ldr	r3, [pc, #816]	@ (4145ec <arm_softmax_s8+0x88c>)
  4142bc:	bfa8      	it	ge
  4142be:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  4142c2:	fbc0 3201 	smlal	r3, r2, r0, r1
  4142c6:	2a00      	cmp	r2, #0
  4142c8:	da05      	bge.n	4142d6 <arm_softmax_s8+0x576>
  4142ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  4142ce:	1859      	adds	r1, r3, r1
  4142d0:	460b      	mov	r3, r1
  4142d2:	f142 0200 	adc.w	r2, r2, #0
  4142d6:	4618      	mov	r0, r3
  4142d8:	4611      	mov	r1, r2
  4142da:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    mult = mult + (q63_t)m1 * m2;
  4142de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  4142e2:	2700      	movs	r7, #0
    mask = MASK_IF_ZERO(val);
  4142e4:	fab0 f680 	clz	r6, r0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
  4142e8:	f040 447f 	orr.w	r4, r0, #4278190080	@ 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
  4142ec:	1a23      	subs	r3, r4, r0
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
  4142ee:	0164      	lsls	r4, r4, #5
  4142f0:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
    SELECT_IF_NON_ZERO(242)
  4142f4:	f3c3 7180 	ubfx	r1, r3, #30, #1
    result = (int32_t)(mult / (1ll << 31));
  4142f8:	fbc4 2704 	smlal	r2, r7, r4, r4
    SELECT_IF_NON_ZERO(242)
  4142fc:	9118      	str	r1, [sp, #96]	@ 0x60
  4142fe:	3901      	subs	r1, #1
    SELECT_IF_NON_ZERO(1672461947)
  414300:	f3c3 6e00 	ubfx	lr, r3, #24, #1
  414304:	9117      	str	r1, [sp, #92]	@ 0x5c
    mask = MASK_IF_ZERO(val);
  414306:	0976      	lsrs	r6, r6, #5
    SELECT_IF_NON_ZERO(39332535)
  414308:	f3c3 7100 	ubfx	r1, r3, #28, #1
  41430c:	f10e 30ff 	add.w	r0, lr, #4294967295	@ 0xffffffff
  414310:	910b      	str	r1, [sp, #44]	@ 0x2c
  414312:	1e71      	subs	r1, r6, #1
  414314:	9019      	str	r0, [sp, #100]	@ 0x64
  414316:	9116      	str	r1, [sp, #88]	@ 0x58
    SELECT_IF_NON_ZERO(720401)
  414318:	f3c3 7040 	ubfx	r0, r3, #29, #1
    SELECT_IF_NON_ZERO(290630308)
  41431c:	f3c3 61c0 	ubfx	r1, r3, #27, #1
    result = (int32_t)(mult / (1ll << 31));
  414320:	2f00      	cmp	r7, #0
    SELECT_IF_NON_ZERO(1302514674)
  414322:	f3c3 6540 	ubfx	r5, r3, #25, #1
    SELECT_IF_NON_ZERO(720401)
  414326:	900c      	str	r0, [sp, #48]	@ 0x30
    SELECT_IF_NON_ZERO(290630308)
  414328:	910a      	str	r1, [sp, #40]	@ 0x28
    SELECT_IF_NON_ZERO(790015084)
  41432a:	f3c3 6380 	ubfx	r3, r3, #26, #1
    result = (int32_t)(mult / (1ll << 31));
  41432e:	da05      	bge.n	41433c <arm_softmax_s8+0x5dc>
  414330:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  414334:	1851      	adds	r1, r2, r1
  414336:	460a      	mov	r2, r1
  414338:	f147 0700 	adc.w	r7, r7, #0
  41433c:	4610      	mov	r0, r2
  41433e:	4639      	mov	r1, r7
  414340:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    mult = mult + (q63_t)m1 * m2;
  414344:	fb01 f700 	mul.w	r7, r1, r0
    result = (int32_t)(mult / (1ll << 31));
  414348:	4688      	mov	r8, r1
    mult = mult + (q63_t)m1 * m2;
  41434a:	fba0 1900 	umull	r1, r9, r0, r0
  41434e:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  414352:	eb49 0947 	adc.w	r9, r9, r7, lsl #1
  414356:	f1b9 0f00 	cmp.w	r9, #0
  41435a:	4602      	mov	r2, r0
  41435c:	da05      	bge.n	41436a <arm_softmax_s8+0x60a>
  41435e:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
  414362:	19cf      	adds	r7, r1, r7
  414364:	4639      	mov	r1, r7
  414366:	f149 0900 	adc.w	r9, r9, #0
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
  41436a:	2e00      	cmp	r6, #0
  41436c:	bf14      	ite	ne
  41436e:	f06f 4600 	mvnne.w	r6, #2147483648	@ 0x80000000
  414372:	2600      	moveq	r6, #0
  414374:	9615      	str	r6, [sp, #84]	@ 0x54
  414376:	1e5e      	subs	r6, r3, #1
  414378:	9613      	str	r6, [sp, #76]	@ 0x4c
  41437a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
    result = (int32_t)(mult / (1ll << 31));
  41437c:	9100      	str	r1, [sp, #0]
  41437e:	f8cd 9004 	str.w	r9, [sp, #4]
  414382:	3e01      	subs	r6, #1
  414384:	9612      	str	r6, [sp, #72]	@ 0x48
  414386:	e9dd 6700 	ldrd	r6, r7, [sp]
  41438a:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
    mult = mult + (q63_t)m1 * m2;
  41438e:	fb04 f108 	mul.w	r1, r4, r8
  414392:	ea4f 79e4 	mov.w	r9, r4, asr #31
  414396:	fb02 1109 	mla	r1, r2, r9, r1
  41439a:	fba4 9202 	umull	r9, r2, r4, r2
    result = (int32_t)(mult / (1ll << 31));
  41439e:	e9cd 6700 	strd	r6, r7, [sp]
  4143a2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
    mult = mult + (q63_t)m1 * m2;
  4143a4:	440a      	add	r2, r1
  4143a6:	3e01      	subs	r6, #1
  4143a8:	1e69      	subs	r1, r5, #1
  4143aa:	9611      	str	r6, [sp, #68]	@ 0x44
  4143ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  4143ae:	9114      	str	r1, [sp, #80]	@ 0x50
    q31_t threshold = remainder_mask >> 1;
  4143b0:	9900      	ldr	r1, [sp, #0]
  4143b2:	3e01      	subs	r6, #1
  4143b4:	9610      	str	r6, [sp, #64]	@ 0x40
    int32_t remainder = remainder_mask & dividend;
  4143b6:	f001 0603 	and.w	r6, r1, #3
    q31_t threshold = remainder_mask >> 1;
  4143ba:	0fcf      	lsrs	r7, r1, #31
    int32_t remainder = remainder_mask & dividend;
  4143bc:	4631      	mov	r1, r6
    result = dividend >> exponent;
  4143be:	9e00      	ldr	r6, [sp, #0]
    q31_t threshold = remainder_mask >> 1;
  4143c0:	3701      	adds	r7, #1
    result = dividend >> exponent;
  4143c2:	10b6      	asrs	r6, r6, #2
        result++;
  4143c4:	428f      	cmp	r7, r1
  4143c6:	ea56 96a6 			@ <UNDEFINED> instruction: 0xea5696a6
    if ((m1 < 0) ^ (m2 < 0))
  4143ca:	ea80 0804 	eor.w	r8, r0, r4
    q63_t mult = 1 << 30;
  4143ce:	4987      	ldr	r1, [pc, #540]	@ (4145ec <arm_softmax_s8+0x88c>)
  4143d0:	f1b8 0f00 	cmp.w	r8, #0
  4143d4:	bfb5      	itete	lt
  4143d6:	460f      	movlt	r7, r1
  4143d8:	f04f 4780 	movge.w	r7, #1073741824	@ 0x40000000
  4143dc:	f04f 38ff 	movlt.w	r8, #4294967295	@ 0xffffffff
  4143e0:	f04f 0800 	movge.w	r8, #0
    mult = mult + (q63_t)m1 * m2;
  4143e4:	eb17 0709 	adds.w	r7, r7, r9
    result = (int32_t)(mult / (1ll << 31));
  4143e8:	eb48 0202 	adc.w	r2, r8, r2
  4143ec:	2a00      	cmp	r2, #0
  4143ee:	da06      	bge.n	4143fe <arm_softmax_s8+0x69e>
  4143f0:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
  4143f4:	eb17 0808 	adds.w	r8, r7, r8
  4143f8:	4647      	mov	r7, r8
  4143fa:	f142 0200 	adc.w	r2, r2, #0
  4143fe:	4691      	mov	r9, r2
  414400:	46b8      	mov	r8, r7
  414402:	ea58 79ef 	orrs.w	r9, r8, pc, asr #31
    if ((m1 < 0) ^ (m2 < 0))
  414406:	4a7a      	ldr	r2, [pc, #488]	@ (4145f0 <arm_softmax_s8+0x890>)
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  414408:	4446      	add	r6, r8
    if ((m1 < 0) ^ (m2 < 0))
  41440a:	4072      	eors	r2, r6
    q63_t mult = 1 << 30;
  41440c:	2a00      	cmp	r2, #0
  41440e:	bfb4      	ite	lt
  414410:	f04f 38ff 	movlt.w	r8, #4294967295	@ 0xffffffff
  414414:	f04f 0800 	movge.w	r8, #0
  414418:	4a74      	ldr	r2, [pc, #464]	@ (4145ec <arm_softmax_s8+0x88c>)
  41441a:	bfa8      	it	ge
  41441c:	f04f 4280 	movge.w	r2, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  414420:	4973      	ldr	r1, [pc, #460]	@ (4145f0 <arm_softmax_s8+0x890>)
  414422:	fbc6 2801 	smlal	r2, r8, r6, r1
  414426:	f1b8 0f00 	cmp.w	r8, #0
  41442a:	da05      	bge.n	414438 <arm_softmax_s8+0x6d8>
  41442c:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
  414430:	1996      	adds	r6, r2, r6
  414432:	4632      	mov	r2, r6
  414434:	f148 0800 	adc.w	r8, r8, #0
  414438:	4616      	mov	r6, r2
  41443a:	4647      	mov	r7, r8
  41443c:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  414440:	4430      	add	r0, r6
    if (result < 0)
  414442:	1042      	asrs	r2, r0, #1
  414444:	d405      	bmi.n	414452 <arm_softmax_s8+0x6f2>
        result++;
  414446:	f010 0f01 	tst.w	r0, #1
  41444a:	f102 0001 	add.w	r0, r2, #1
  41444e:	bf18      	it	ne
  414450:	4602      	movne	r2, r0
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  414452:	4414      	add	r4, r2
    if ((m1 < 0) ^ (m2 < 0))
  414454:	4a67      	ldr	r2, [pc, #412]	@ (4145f4 <arm_softmax_s8+0x894>)
    result = (int32_t)(mult / (1ll << 31));
  414456:	4967      	ldr	r1, [pc, #412]	@ (4145f4 <arm_softmax_s8+0x894>)
    if ((m1 < 0) ^ (m2 < 0))
  414458:	4062      	eors	r2, r4
    q63_t mult = 1 << 30;
  41445a:	2a00      	cmp	r2, #0
  41445c:	bfb4      	ite	lt
  41445e:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
  414462:	2000      	movge	r0, #0
  414464:	4a61      	ldr	r2, [pc, #388]	@ (4145ec <arm_softmax_s8+0x88c>)
  414466:	bfa8      	it	ge
  414468:	f04f 4280 	movge.w	r2, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  41446c:	fbc4 2001 	smlal	r2, r0, r4, r1
  414470:	2800      	cmp	r0, #0
  414472:	da05      	bge.n	414480 <arm_softmax_s8+0x720>
  414474:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
  414478:	1914      	adds	r4, r2, r4
  41447a:	4622      	mov	r2, r4
  41447c:	f140 0000 	adc.w	r0, r0, #0
  414480:	4616      	mov	r6, r2
  414482:	4607      	mov	r7, r0
    mult = mult + (q63_t)m1 * m2;
  414484:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  414488:	2000      	movs	r0, #0
    result = (int32_t)(mult / (1ll << 31));
  41448a:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
    SELECT_IF_NON_ZERO(1672461947)
  41448e:	f1be 0f00 	cmp.w	lr, #0
    result = (int32_t)(mult / (1ll << 31));
  414492:	4681      	mov	r9, r0
  414494:	4696      	mov	lr, r2
    int32_t result = 1895147668 +
  414496:	4c57      	ldr	r4, [pc, #348]	@ (4145f4 <arm_softmax_s8+0x894>)
    SELECT_IF_NON_ZERO(1672461947)
  414498:	9919      	ldr	r1, [sp, #100]	@ 0x64
    int32_t result = 1895147668 +
  41449a:	4434      	add	r4, r6
    SELECT_IF_NON_ZERO(1672461947)
  41449c:	ea04 0801 	and.w	r8, r4, r1
    result = (int32_t)(mult / (1ll << 31));
  4144a0:	4955      	ldr	r1, [pc, #340]	@ (4145f8 <arm_softmax_s8+0x898>)
  4144a2:	fbc4 e901 	smlal	lr, r9, r4, r1
  4144a6:	4676      	mov	r6, lr
  4144a8:	464f      	mov	r7, r9
  4144aa:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
    SELECT_IF_NON_ZERO(1672461947)
  4144ae:	bf08      	it	eq
  4144b0:	4606      	moveq	r6, r0
    result = (int32_t)(mult / (1ll << 31));
  4144b2:	4696      	mov	lr, r2
    SELECT_IF_NON_ZERO(1672461947)
  4144b4:	ea88 0606 	eor.w	r6, r8, r6
    result = (int32_t)(mult / (1ll << 31));
  4144b8:	4680      	mov	r8, r0
  4144ba:	4f50      	ldr	r7, [pc, #320]	@ (4145fc <arm_softmax_s8+0x89c>)
    SELECT_IF_NON_ZERO(1302514674)
  4144bc:	4285      	cmp	r5, r0
    result = (int32_t)(mult / (1ll << 31));
  4144be:	fbc6 e807 	smlal	lr, r8, r6, r7
  4144c2:	4674      	mov	r4, lr
  4144c4:	4645      	mov	r5, r8
  4144c6:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    SELECT_IF_NON_ZERO(1302514674)
  4144ca:	bf08      	it	eq
  4144cc:	4604      	moveq	r4, r0
  4144ce:	9914      	ldr	r1, [sp, #80]	@ 0x50
    result = (int32_t)(mult / (1ll << 31));
  4144d0:	4696      	mov	lr, r2
    SELECT_IF_NON_ZERO(1302514674)
  4144d2:	4031      	ands	r1, r6
  4144d4:	404c      	eors	r4, r1
    result = (int32_t)(mult / (1ll << 31));
  4144d6:	4601      	mov	r1, r0
  4144d8:	4d49      	ldr	r5, [pc, #292]	@ (414600 <arm_softmax_s8+0x8a0>)
    SELECT_IF_NON_ZERO(790015084)
  4144da:	4283      	cmp	r3, r0
    result = (int32_t)(mult / (1ll << 31));
  4144dc:	fbc4 e105 	smlal	lr, r1, r4, r5
  4144e0:	4676      	mov	r6, lr
  4144e2:	460f      	mov	r7, r1
    SELECT_IF_NON_ZERO(290630308)
  4144e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
    result = (int32_t)(mult / (1ll << 31));
  4144e6:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
    SELECT_IF_NON_ZERO(790015084)
  4144ea:	bf08      	it	eq
  4144ec:	4606      	moveq	r6, r0
    result = (int32_t)(mult / (1ll << 31));
  4144ee:	4696      	mov	lr, r2
    SELECT_IF_NON_ZERO(290630308)
  4144f0:	4281      	cmp	r1, r0
    result = (int32_t)(mult / (1ll << 31));
  4144f2:	4601      	mov	r1, r0
    SELECT_IF_NON_ZERO(790015084)
  4144f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
    result = (int32_t)(mult / (1ll << 31));
  4144f6:	4f43      	ldr	r7, [pc, #268]	@ (414604 <arm_softmax_s8+0x8a4>)
    SELECT_IF_NON_ZERO(790015084)
  4144f8:	ea03 0304 	and.w	r3, r3, r4
  4144fc:	ea86 0603 	eor.w	r6, r6, r3
    result = (int32_t)(mult / (1ll << 31));
  414500:	fbc6 e107 	smlal	lr, r1, r6, r7
  414504:	4674      	mov	r4, lr
  414506:	460d      	mov	r5, r1
    SELECT_IF_NON_ZERO(39332535)
  414508:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    result = (int32_t)(mult / (1ll << 31));
  41450a:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    SELECT_IF_NON_ZERO(290630308)
  41450e:	bf08      	it	eq
  414510:	4604      	moveq	r4, r0
    result = (int32_t)(mult / (1ll << 31));
  414512:	4696      	mov	lr, r2
    SELECT_IF_NON_ZERO(39332535)
  414514:	4281      	cmp	r1, r0
    result = (int32_t)(mult / (1ll << 31));
  414516:	4601      	mov	r1, r0
    SELECT_IF_NON_ZERO(290630308)
  414518:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    result = (int32_t)(mult / (1ll << 31));
  41451a:	4d3b      	ldr	r5, [pc, #236]	@ (414608 <arm_softmax_s8+0x8a8>)
    SELECT_IF_NON_ZERO(290630308)
  41451c:	ea03 0306 	and.w	r3, r3, r6
  414520:	ea84 0403 	eor.w	r4, r4, r3
    result = (int32_t)(mult / (1ll << 31));
  414524:	fbc4 e105 	smlal	lr, r1, r4, r5
  414528:	4676      	mov	r6, lr
  41452a:	460f      	mov	r7, r1
    SELECT_IF_NON_ZERO(720401)
  41452c:	990c      	ldr	r1, [sp, #48]	@ 0x30
    result = (int32_t)(mult / (1ll << 31));
  41452e:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
    SELECT_IF_NON_ZERO(39332535)
  414532:	bf08      	it	eq
  414534:	4606      	moveq	r6, r0
    result = (int32_t)(mult / (1ll << 31));
  414536:	4696      	mov	lr, r2
    SELECT_IF_NON_ZERO(720401)
  414538:	4281      	cmp	r1, r0
    result = (int32_t)(mult / (1ll << 31));
  41453a:	4601      	mov	r1, r0
    SELECT_IF_NON_ZERO(39332535)
  41453c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    result = (int32_t)(mult / (1ll << 31));
  41453e:	4f33      	ldr	r7, [pc, #204]	@ (41460c <arm_softmax_s8+0x8ac>)
    SELECT_IF_NON_ZERO(39332535)
  414540:	ea03 0304 	and.w	r3, r3, r4
  414544:	ea86 0603 	eor.w	r6, r6, r3
    result = (int32_t)(mult / (1ll << 31));
  414548:	fbc6 e107 	smlal	lr, r1, r6, r7
  41454c:	460d      	mov	r5, r1
  41454e:	4674      	mov	r4, lr
  414550:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    SELECT_IF_NON_ZERO(720401)
  414554:	bf08      	it	eq
  414556:	4604      	moveq	r4, r0
  414558:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    SELECT_IF_NON_ZERO(242)
  41455a:	9918      	ldr	r1, [sp, #96]	@ 0x60
    SELECT_IF_NON_ZERO(720401)
  41455c:	4033      	ands	r3, r6
  41455e:	405c      	eors	r4, r3
    result = (int32_t)(mult / (1ll << 31));
  414560:	23f2      	movs	r3, #242	@ 0xf2
    SELECT_IF_NON_ZERO(242)
  414562:	4281      	cmp	r1, r0
    result = (int32_t)(mult / (1ll << 31));
  414564:	fbc4 2003 	smlal	r2, r0, r4, r3
  414568:	4607      	mov	r7, r0
  41456a:	4616      	mov	r6, r2
  41456c:	ea56 77ef 	orrs.w	r7, r6, pc, asr #31
    SELECT_IF_NON_ZERO(242)
  414570:	bf08      	it	eq
  414572:	2600      	moveq	r6, #0
  414574:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
    if ((m1 < 0) ^ (m2 < 0))
  414576:	9a06      	ldr	r2, [sp, #24]
    SELECT_IF_NON_ZERO(242)
  414578:	401c      	ands	r4, r3
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
  41457a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
    SELECT_IF_NON_ZERO(242)
  41457c:	4074      	eors	r4, r6
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
  41457e:	401c      	ands	r4, r3
  414580:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  414582:	405c      	eors	r4, r3
    if ((m1 < 0) ^ (m2 < 0))
  414584:	ea84 0302 	eor.w	r3, r4, r2
    q63_t mult = 1 << 30;
  414588:	2b00      	cmp	r3, #0
  41458a:	4b18      	ldr	r3, [pc, #96]	@ (4145ec <arm_softmax_s8+0x88c>)
  41458c:	bfad      	iteet	ge
  41458e:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
  414592:	4619      	movlt	r1, r3
  414594:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
  414598:	2000      	movge	r0, #0
    result = (int32_t)(mult / (1ll << 31));
  41459a:	fbc4 1002 	smlal	r1, r0, r4, r2
  41459e:	2800      	cmp	r0, #0
  4145a0:	da05      	bge.n	4145ae <arm_softmax_s8+0x84e>
  4145a2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  4145a6:	18cb      	adds	r3, r1, r3
  4145a8:	4619      	mov	r1, r3
  4145aa:	f140 0000 	adc.w	r0, r0, #0
  4145ae:	460a      	mov	r2, r1
  4145b0:	4603      	mov	r3, r0
  4145b2:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
    if (result < 0)
  4145b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
  4145b8:	fa52 f101 	asrs.w	r1, r2, r1
  4145bc:	d466      	bmi.n	41468c <arm_softmax_s8+0x92c>
    int32_t remainder = remainder_mask & dividend;
  4145be:	981c      	ldr	r0, [sp, #112]	@ 0x70
    if (remainder > threshold)
  4145c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    int32_t remainder = remainder_mask & dividend;
  4145c2:	4002      	ands	r2, r0
    if (remainder > threshold)
  4145c4:	4293      	cmp	r3, r2
  4145c6:	f280 8180 	bge.w	4148ca <arm_softmax_s8+0xb6a>
                const int32_t res =
  4145ca:	f1a1 037f 	sub.w	r3, r1, #127	@ 0x7f
                    NN_Q7_MIN;
                output[tail_idx + i] = (int8_t)CLAMP(res, (int32_t)ACT_MAX, (int32_t)ACT_MIN);
  4145ce:	2b7f      	cmp	r3, #127	@ 0x7f
  4145d0:	b25b      	sxtb	r3, r3
  4145d2:	bfa8      	it	ge
  4145d4:	237f      	movge	r3, #127	@ 0x7f
  4145d6:	f80a 3b01 	strb.w	r3, [sl], #1
        for (int i = 0; i < (row_size & 3); i++)
  4145da:	9b08      	ldr	r3, [sp, #32]
  4145dc:	4563      	cmp	r3, ip
  4145de:	f47f ae5b 	bne.w	414298 <arm_softmax_s8+0x538>
  4145e2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	@ 0x78
  4145e6:	46da      	mov	sl, fp
  4145e8:	e012      	b.n	414610 <arm_softmax_s8+0x8b0>
  4145ea:	bf00      	nop
  4145ec:	c0000001 	.word	0xc0000001
  4145f0:	2aaaaaab 	.word	0x2aaaaaab
  4145f4:	70f5a894 	.word	0x70f5a894
  4145f8:	63afbe7b 	.word	0x63afbe7b
  4145fc:	4da2cbf2 	.word	0x4da2cbf2
  414600:	2f16ac6c 	.word	0x2f16ac6c
  414604:	1152aaa4 	.word	0x1152aaa4
  414608:	02582ab7 	.word	0x02582ab7
  41460c:	000afe11 	.word	0x000afe11
                output[tail_idx + i] = ACT_MIN;
            }
        }

        input += row_size;
        output += row_size;
  414610:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
  414612:	9940      	ldr	r1, [sp, #256]	@ 0x100
    for (int i_num_rows = 0; i_num_rows < num_rows; ++i_num_rows)
  414614:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
        output += row_size;
  414616:	4411      	add	r1, r2
  414618:	9140      	str	r1, [sp, #256]	@ 0x100
    for (int i_num_rows = 0; i_num_rows < num_rows; ++i_num_rows)
  41461a:	9909      	ldr	r1, [sp, #36]	@ 0x24
  41461c:	3301      	adds	r3, #1
  41461e:	4411      	add	r1, r2
  414620:	9109      	str	r1, [sp, #36]	@ 0x24
  414622:	9905      	ldr	r1, [sp, #20]
  414624:	931a      	str	r3, [sp, #104]	@ 0x68
  414626:	1a8a      	subs	r2, r1, r2
  414628:	9205      	str	r2, [sp, #20]
  41462a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
  41462c:	eb02 0009 	add.w	r0, r2, r9
  414630:	9a20      	ldr	r2, [sp, #128]	@ 0x80
  414632:	429a      	cmp	r2, r3
  414634:	f47f abc7 	bne.w	413dc6 <arm_softmax_s8+0x66>
    }
#else
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, false, (void *)output);
#endif
}
  414638:	b025      	add	sp, #148	@ 0x94
  41463a:	ecbd 8b10 	vpop	{d8-d15}
  41463e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return __builtin_mve_vmulq_n_sv4si (__a, __b);
  414642:	ee21 1e68 	cdp	14, 2, cr1, cr1, cr8, {3}
                tmp_res = arm_exp_on_negative_values_mve_32x4(tmp_res);
  414646:	ff20 0b4a 	vqrdmulh.s32	q0, q0, q5
  41464a:	f7ff f9fd 	bl	413a48 <arm_exp_on_negative_values_mve_32x4>
  return __builtin_mve_vqrdmulhq_sv4si (__a, __b);
  41464e:	ff28 0b40 	vqrdmulh.s32	q0, q4, q0
  return __builtin_mve_vandq_sv4si (__a, __b);
  414652:	ef00 615e 	vand	q3, q0, q7
  return __builtin_mve_vshrq_n_sv4si (__a, __imm);
  414656:	efa1 6056 	vshr.s32	q3, q3, #31
  return __builtin_mve_vqaddq_sv4si (__a, __b);
  41465a:	ef20 6056 	vqadd.s32	q3, q0, q3
  return __builtin_mve_vrshlq_sv4si (__a, __b);
  41465e:	ef2e 6546 	vrshl.s32	q3, q3, q7
  return __builtin_mve_vdupq_n_sv4si (__a);
  414662:	237f      	movs	r3, #127	@ 0x7f
                tmp_res += vdupq_n_s32(ACT_MIN);
  414664:	ef2c 6846 	vadd.i32	q3, q6, q3
  414668:	eea4 3b10 	vdup.32	q2, r3
  return __builtin_mve_vmaxq_sv4si (__a, __b);
  41466c:	ef26 664c 	vmax.s32	q3, q3, q6
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  414670:	eeed 4a10 	vmsr	<impl def 0xd>, r4
  return __builtin_mve_vminq_sv4si (__a, __b);
  414674:	ef26 6654 	vmin.s32	q3, q3, q2
  return __builtin_mve_vpselq_sv4si (__a, __b, __p);
  414678:	fe37 6f0d 	cdp2	15, 3, cr6, cr7, cr13, {0}
        while (vec_count)
  41467c:	3e01      	subs	r6, #1
  __builtin_mve_vstrbq_sv4si ((__builtin_neon_qi *) __addr, __value);
  41467e:	eca7 6f04 	stc	15, cr6, [r7], #16
  414682:	f105 0504 	add.w	r5, r5, #4
  414686:	f47f add4 	bne.w	414232 <arm_softmax_s8+0x4d2>
  41468a:	e5e4      	b.n	414256 <arm_softmax_s8+0x4f6>
            if (diff >= diff_min)
  41468c:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
  414690:	e7a1      	b.n	4145d6 <arm_softmax_s8+0x876>
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
  414692:	2303      	movs	r3, #3
        const int32_t headroom = __CLZ((uint32_t)sum);
  414694:	2620      	movs	r6, #32
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
  414696:	930d      	str	r3, [sp, #52]	@ 0x34
    mask = MASK_IF_ZERO(val);
  414698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  41469c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  4146a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
  4146a4:	f04f 325a 	mov.w	r2, #1515870810	@ 0x5a5a5a5a
    mask = MASK_IF_ZERO(val);
  4146a8:	e9cd 0100 	strd	r0, r1, [sp]
  4146ac:	f8df e280 	ldr.w	lr, [pc, #640]	@ 414930 <arm_softmax_s8+0xbd0>
  4146b0:	4d96      	ldr	r5, [pc, #600]	@ (41490c <arm_softmax_s8+0xbac>)
    q63_t mult = 1 << 30;
  4146b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  4146b6:	f04f 0c00 	mov.w	ip, #0
  4146ba:	e4ff      	b.n	4140bc <arm_softmax_s8+0x35c>
    result = (int32_t)(mult / (1ll << 31));
  4146bc:	4894      	ldr	r0, [pc, #592]	@ (414910 <arm_softmax_s8+0xbb0>)
    const int32_t remainder = val_mod_minus_quarter - val;
  4146be:	eba5 0c04 	sub.w	ip, r5, r4
    result = (int32_t)(mult / (1ll << 31));
  4146c2:	fbc1 2300 	smlal	r2, r3, r1, r0
    SELECT_IF_NON_ZERO(720401)
  4146c6:	f3cc 7140 	ubfx	r1, ip, #29, #1
  4146ca:	9108      	str	r1, [sp, #32]
    SELECT_IF_NON_ZERO(242)
  4146cc:	f3cc 7180 	ubfx	r1, ip, #30, #1
  4146d0:	910a      	str	r1, [sp, #40]	@ 0x28
    result = (int32_t)(mult / (1ll << 31));
  4146d2:	2b00      	cmp	r3, #0
    SELECT_IF_NON_ZERO(39332535)
  4146d4:	f3cc 7100 	ubfx	r1, ip, #28, #1
    SELECT_IF_NON_ZERO(290630308)
  4146d8:	f3cc 67c0 	ubfx	r7, ip, #27, #1
    SELECT_IF_NON_ZERO(1672461947)
  4146dc:	f3cc 6800 	ubfx	r8, ip, #24, #1
    SELECT_IF_NON_ZERO(1302514674)
  4146e0:	f3cc 6940 	ubfx	r9, ip, #25, #1
    SELECT_IF_NON_ZERO(39332535)
  4146e4:	9106      	str	r1, [sp, #24]
    SELECT_IF_NON_ZERO(790015084)
  4146e6:	f3cc 6c80 	ubfx	ip, ip, #26, #1
    result = (int32_t)(mult / (1ll << 31));
  4146ea:	da05      	bge.n	4146f8 <arm_softmax_s8+0x998>
  4146ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  4146f0:	1851      	adds	r1, r2, r1
  4146f2:	460a      	mov	r2, r1
  4146f4:	f143 0300 	adc.w	r3, r3, #0
  4146f8:	4610      	mov	r0, r2
  4146fa:	4619      	mov	r1, r3
  4146fc:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    mult = mult + (q63_t)m1 * m2;
  414700:	2200      	movs	r2, #0
  414702:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    SELECT_IF_NON_ZERO(290630308)
  414706:	1e7c      	subs	r4, r7, #1
  414708:	940d      	str	r4, [sp, #52]	@ 0x34
    SELECT_IF_NON_ZERO(39332535)
  41470a:	9c06      	ldr	r4, [sp, #24]
    SELECT_IF_NON_ZERO(1302514674)
  41470c:	f109 36ff 	add.w	r6, r9, #4294967295	@ 0xffffffff
    SELECT_IF_NON_ZERO(39332535)
  414710:	3c01      	subs	r4, #1
  414712:	940f      	str	r4, [sp, #60]	@ 0x3c
    SELECT_IF_NON_ZERO(720401)
  414714:	9c08      	ldr	r4, [sp, #32]
    SELECT_IF_NON_ZERO(1302514674)
  414716:	960c      	str	r6, [sp, #48]	@ 0x30
    SELECT_IF_NON_ZERO(720401)
  414718:	1e66      	subs	r6, r4, #1
    SELECT_IF_NON_ZERO(242)
  41471a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
    SELECT_IF_NON_ZERO(720401)
  41471c:	9610      	str	r6, [sp, #64]	@ 0x40
    SELECT_IF_NON_ZERO(242)
  41471e:	1e66      	subs	r6, r4, #1
    int32_t result = 1895147668 +
  414720:	4c7b      	ldr	r4, [pc, #492]	@ (414910 <arm_softmax_s8+0xbb0>)
    SELECT_IF_NON_ZERO(1672461947)
  414722:	f1b8 0f00 	cmp.w	r8, #0
    int32_t result = 1895147668 +
  414726:	4404      	add	r4, r0
    SELECT_IF_NON_ZERO(1672461947)
  414728:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
  41472c:	ea08 0e04 	and.w	lr, r8, r4
  414730:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
    result = (int32_t)(mult / (1ll << 31));
  414734:	4690      	mov	r8, r2
  414736:	469e      	mov	lr, r3
    SELECT_IF_NON_ZERO(242)
  414738:	9611      	str	r6, [sp, #68]	@ 0x44
    result = (int32_t)(mult / (1ll << 31));
  41473a:	4e76      	ldr	r6, [pc, #472]	@ (414914 <arm_softmax_s8+0xbb4>)
    SELECT_IF_NON_ZERO(790015084)
  41473c:	f10c 35ff 	add.w	r5, ip, #4294967295	@ 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
  414740:	fbc4 e806 	smlal	lr, r8, r4, r6
  414744:	4670      	mov	r0, lr
  414746:	4641      	mov	r1, r8
  414748:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    SELECT_IF_NON_ZERO(1672461947)
  41474c:	bf08      	it	eq
  41474e:	4610      	moveq	r0, r2
    result = (int32_t)(mult / (1ll << 31));
  414750:	461c      	mov	r4, r3
    SELECT_IF_NON_ZERO(1302514674)
  414752:	4591      	cmp	r9, r2
    result = (int32_t)(mult / (1ll << 31));
  414754:	4691      	mov	r9, r2
    SELECT_IF_NON_ZERO(1672461947)
  414756:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    SELECT_IF_NON_ZERO(1302514674)
  414758:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
    SELECT_IF_NON_ZERO(1672461947)
  41475a:	ea80 0801 	eor.w	r8, r0, r1
    SELECT_IF_NON_ZERO(1302514674)
  41475e:	ea06 0e08 	and.w	lr, r6, r8
    result = (int32_t)(mult / (1ll << 31));
  414762:	4e6d      	ldr	r6, [pc, #436]	@ (414918 <arm_softmax_s8+0xbb8>)
  414764:	fbc8 4906 	smlal	r4, r9, r8, r6
  414768:	4620      	mov	r0, r4
  41476a:	4649      	mov	r1, r9
  41476c:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    SELECT_IF_NON_ZERO(1302514674)
  414770:	bf08      	it	eq
  414772:	4610      	moveq	r0, r2
    result = (int32_t)(mult / (1ll << 31));
  414774:	4698      	mov	r8, r3
    SELECT_IF_NON_ZERO(790015084)
  414776:	4594      	cmp	ip, r2
    SELECT_IF_NON_ZERO(1302514674)
  414778:	ea80 0c0e 	eor.w	ip, r0, lr
    result = (int32_t)(mult / (1ll << 31));
  41477c:	4696      	mov	lr, r2
  41477e:	4e67      	ldr	r6, [pc, #412]	@ (41491c <arm_softmax_s8+0xbbc>)
    SELECT_IF_NON_ZERO(790015084)
  414780:	ea05 050c 	and.w	r5, r5, ip
    result = (int32_t)(mult / (1ll << 31));
  414784:	fbcc 8e06 	smlal	r8, lr, ip, r6
  414788:	4640      	mov	r0, r8
  41478a:	4671      	mov	r1, lr
  41478c:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    SELECT_IF_NON_ZERO(790015084)
  414790:	bf08      	it	eq
  414792:	4610      	moveq	r0, r2
    result = (int32_t)(mult / (1ll << 31));
  414794:	4694      	mov	ip, r2
    SELECT_IF_NON_ZERO(290630308)
  414796:	4297      	cmp	r7, r2
    result = (int32_t)(mult / (1ll << 31));
  414798:	461f      	mov	r7, r3
  41479a:	4e61      	ldr	r6, [pc, #388]	@ (414920 <arm_softmax_s8+0xbc0>)
    SELECT_IF_NON_ZERO(790015084)
  41479c:	ea80 0005 	eor.w	r0, r0, r5
    result = (int32_t)(mult / (1ll << 31));
  4147a0:	fbc0 7c06 	smlal	r7, ip, r0, r6
  4147a4:	46b8      	mov	r8, r7
  4147a6:	46e1      	mov	r9, ip
  4147a8:	ea58 79ef 	orrs.w	r9, r8, pc, asr #31
    SELECT_IF_NON_ZERO(290630308)
  4147ac:	bf08      	it	eq
  4147ae:	4690      	moveq	r8, r2
  4147b0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
    result = (int32_t)(mult / (1ll << 31));
  4147b2:	461f      	mov	r7, r3
    SELECT_IF_NON_ZERO(290630308)
  4147b4:	ea05 0400 	and.w	r4, r5, r0
    SELECT_IF_NON_ZERO(39332535)
  4147b8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
    SELECT_IF_NON_ZERO(290630308)
  4147ba:	ea88 0804 	eor.w	r8, r8, r4
    SELECT_IF_NON_ZERO(39332535)
  4147be:	ea05 0408 	and.w	r4, r5, r8
    result = (int32_t)(mult / (1ll << 31));
  4147c2:	4615      	mov	r5, r2
  4147c4:	4e57      	ldr	r6, [pc, #348]	@ (414924 <arm_softmax_s8+0xbc4>)
    SELECT_IF_NON_ZERO(39332535)
  4147c6:	9906      	ldr	r1, [sp, #24]
    result = (int32_t)(mult / (1ll << 31));
  4147c8:	fbc8 7506 	smlal	r7, r5, r8, r6
    SELECT_IF_NON_ZERO(39332535)
  4147cc:	4291      	cmp	r1, r2
    result = (int32_t)(mult / (1ll << 31));
  4147ce:	4638      	mov	r0, r7
  4147d0:	4629      	mov	r1, r5
  4147d2:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    SELECT_IF_NON_ZERO(39332535)
  4147d6:	bf08      	it	eq
  4147d8:	4610      	moveq	r0, r2
    result = (int32_t)(mult / (1ll << 31));
  4147da:	469c      	mov	ip, r3
  4147dc:	4616      	mov	r6, r2
  4147de:	4f52      	ldr	r7, [pc, #328]	@ (414928 <arm_softmax_s8+0xbc8>)
    SELECT_IF_NON_ZERO(39332535)
  4147e0:	4060      	eors	r0, r4
    result = (int32_t)(mult / (1ll << 31));
  4147e2:	fbc0 c607 	smlal	ip, r6, r0, r7
  4147e6:	4664      	mov	r4, ip
  4147e8:	4635      	mov	r5, r6
    SELECT_IF_NON_ZERO(720401)
  4147ea:	9908      	ldr	r1, [sp, #32]
    result = (int32_t)(mult / (1ll << 31));
  4147ec:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    SELECT_IF_NON_ZERO(720401)
  4147f0:	4291      	cmp	r1, r2
  4147f2:	bf08      	it	eq
  4147f4:	4614      	moveq	r4, r2
    result = (int32_t)(mult / (1ll << 31));
  4147f6:	25f2      	movs	r5, #242	@ 0xf2
    SELECT_IF_NON_ZERO(720401)
  4147f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
  4147fa:	4001      	ands	r1, r0
    SELECT_IF_NON_ZERO(242)
  4147fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
    SELECT_IF_NON_ZERO(720401)
  4147fe:	404c      	eors	r4, r1
    SELECT_IF_NON_ZERO(242)
  414800:	4290      	cmp	r0, r2
    result = (int32_t)(mult / (1ll << 31));
  414802:	fbc4 3205 	smlal	r3, r2, r4, r5
  414806:	4618      	mov	r0, r3
  414808:	4611      	mov	r1, r2
  41480a:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    SELECT_IF_NON_ZERO(242)
  41480e:	bf08      	it	eq
  414810:	2000      	moveq	r0, #0
  414812:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  414814:	401c      	ands	r4, r3
  414816:	4044      	eors	r4, r0
        result++;
  414818:	f414 6f00 	tst.w	r4, #2048	@ 0x800
    result = dividend >> exponent;
  41481c:	ea4f 3424 	mov.w	r4, r4, asr #12
        result++;
  414820:	f104 0301 	add.w	r3, r4, #1
  414824:	bf18      	it	ne
  414826:	461c      	movne	r4, r3
  414828:	f7ff bbea 	b.w	414000 <arm_softmax_s8+0x2a0>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
  41482c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  414830:	441a      	add	r2, r3
    if ((m1 < 0) ^ (m2 < 0))
  414832:	4057      	eors	r7, r2
    q63_t mult = 1 << 30;
  414834:	2f00      	cmp	r7, #0
  414836:	4b3d      	ldr	r3, [pc, #244]	@ (41492c <arm_softmax_s8+0xbcc>)
  414838:	bfaa      	itet	ge
  41483a:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
  41483e:	f04f 34ff 	movlt.w	r4, #4294967295	@ 0xffffffff
  414842:	2400      	movge	r4, #0
    mult = mult + (q63_t)m1 * m2;
  414844:	9901      	ldr	r1, [sp, #4]
  414846:	9800      	ldr	r0, [sp, #0]
  414848:	fb02 f101 	mul.w	r1, r2, r1
  41484c:	17d5      	asrs	r5, r2, #31
  41484e:	fb05 1100 	mla	r1, r5, r0, r1
  414852:	fba2 0500 	umull	r0, r5, r2, r0
  414856:	18c0      	adds	r0, r0, r3
  414858:	440d      	add	r5, r1
    result = (int32_t)(mult / (1ll << 31));
  41485a:	eb45 0304 	adc.w	r3, r5, r4
  41485e:	2b00      	cmp	r3, #0
  414860:	da05      	bge.n	41486e <arm_softmax_s8+0xb0e>
  414862:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  414866:	1841      	adds	r1, r0, r1
  414868:	4608      	mov	r0, r1
  41486a:	f143 0300 	adc.w	r3, r3, #0
  41486e:	461d      	mov	r5, r3
  414870:	4604      	mov	r4, r0
  414872:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  414876:	f1c4 5400 	rsb	r4, r4, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
  41487a:	ea82 0304 	eor.w	r3, r2, r4
    q63_t mult = 1 << 30;
  41487e:	2b00      	cmp	r3, #0
  414880:	bfb4      	ite	lt
  414882:	f04f 35ff 	movlt.w	r5, #4294967295	@ 0xffffffff
  414886:	2500      	movge	r5, #0
  414888:	4b28      	ldr	r3, [pc, #160]	@ (41492c <arm_softmax_s8+0xbcc>)
  41488a:	bfa8      	it	ge
  41488c:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  414890:	fbc2 3504 	smlal	r3, r5, r2, r4
  414894:	2d00      	cmp	r5, #0
  414896:	da05      	bge.n	4148a4 <arm_softmax_s8+0xb44>
  414898:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  41489c:	1859      	adds	r1, r3, r1
  41489e:	460b      	mov	r3, r1
  4148a0:	f145 0500 	adc.w	r5, r5, #0
  4148a4:	4618      	mov	r0, r3
  4148a6:	4629      	mov	r1, r5
  4148a8:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
  4148ac:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
  4148b0:	f2c0 8411 	blt.w	4150d6 <arm_softmax_s8+0x1376>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  4148b4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  4148b8:	441a      	add	r2, r3
    int32_t result = val << exp;
  4148ba:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  4148be:	ea4f 0242 	mov.w	r2, r2, lsl #1
  4148c2:	bfb8      	it	lt
  4148c4:	4613      	movlt	r3, r2
  4148c6:	9306      	str	r3, [sp, #24]
  4148c8:	e4a1      	b.n	41420e <arm_softmax_s8+0x4ae>
                const int32_t res =
  4148ca:	f1a1 0380 	sub.w	r3, r1, #128	@ 0x80
                output[tail_idx + i] = (int8_t)CLAMP(res, (int32_t)ACT_MAX, (int32_t)ACT_MIN);
  4148ce:	2900      	cmp	r1, #0
  4148d0:	f47f ae7d 	bne.w	4145ce <arm_softmax_s8+0x86e>
  4148d4:	e67f      	b.n	4145d6 <arm_softmax_s8+0x876>
    result = (int32_t)(mult / (1ll << 31));
  4148d6:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
  4148da:	191c      	adds	r4, r3, r4
  4148dc:	4623      	mov	r3, r4
  4148de:	f14c 0c00 	adc.w	ip, ip, #0
  4148e2:	e41d      	b.n	414120 <arm_softmax_s8+0x3c0>
    mult = mult + (q63_t)m1 * m2;
  4148e4:	fb02 4401 	mla	r4, r2, r1, r4
  4148e8:	9900      	ldr	r1, [sp, #0]
  4148ea:	fba1 0102 	umull	r0, r1, r1, r2
  4148ee:	4421      	add	r1, r4
  4148f0:	4c0e      	ldr	r4, [pc, #56]	@ (41492c <arm_softmax_s8+0xbcc>)
  4148f2:	1900      	adds	r0, r0, r4
    result = (int32_t)(mult / (1ll << 31));
  4148f4:	f161 0100 	sbc.w	r1, r1, #0
  4148f8:	2900      	cmp	r1, #0
  4148fa:	f6bf ac51 	bge.w	4141a0 <arm_softmax_s8+0x440>
  4148fe:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
  414902:	1904      	adds	r4, r0, r4
  414904:	4620      	mov	r0, r4
  414906:	f141 0100 	adc.w	r1, r1, #0
  41490a:	e449      	b.n	4141a0 <arm_softmax_s8+0x440>
  41490c:	0b4b4b4b 	.word	0x0b4b4b4b
  414910:	70f5a894 	.word	0x70f5a894
  414914:	63afbe7b 	.word	0x63afbe7b
  414918:	4da2cbf2 	.word	0x4da2cbf2
  41491c:	2f16ac6c 	.word	0x2f16ac6c
  414920:	1152aaa4 	.word	0x1152aaa4
  414924:	02582ab7 	.word	0x02582ab7
  414928:	000afe11 	.word	0x000afe11
  41492c:	c0000001 	.word	0xc0000001
  414930:	9a5a5a5a 	.word	0x9a5a5a5a
  414934:	9a40      	ldr	r2, [sp, #256]	@ 0x100
  414936:	9923      	ldr	r1, [sp, #140]	@ 0x8c
            const int32_t diff = input[tail_idx + i] - max;
  414938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  41493a:	440a      	add	r2, r1
  41493c:	920a      	str	r2, [sp, #40]	@ 0x28
  41493e:	9a03      	ldr	r2, [sp, #12]
  414940:	461e      	mov	r6, r3
  414942:	18d3      	adds	r3, r2, r3
  414944:	9308      	str	r3, [sp, #32]
  414946:	f8cd 8064 	str.w	r8, [sp, #100]	@ 0x64
  41494a:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
  41494e:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
  414952:	f8cd a0fc 	str.w	sl, [sp, #252]	@ 0xfc
            int32_t diff = input[tail_idx + i] - max;
  414956:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  414958:	f916 3b01 	ldrsb.w	r3, [r6], #1
  41495c:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
  41495e:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
  414960:	429a      	cmp	r2, r3
  414962:	f300 81b9 	bgt.w	414cd8 <arm_softmax_s8+0xf78>
                    DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) +
  414966:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
    mult = mult + (q63_t)m1 * m2;
  414968:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
  41496c:	4093      	lsls	r3, r2
    if ((m1 < 0) ^ (m2 < 0))
  41496e:	f103 4200 	add.w	r2, r3, #2147483648	@ 0x80000000
    q63_t mult = 1 << 30;
  414972:	2a00      	cmp	r2, #0
  414974:	bfb4      	ite	lt
  414976:	f04f 34ff 	movlt.w	r4, #4294967295	@ 0xffffffff
  41497a:	2400      	movge	r4, #0
  41497c:	4acd      	ldr	r2, [pc, #820]	@ (414cb4 <arm_softmax_s8+0xf54>)
  41497e:	bfa8      	it	ge
  414980:	f04f 4280 	movge.w	r2, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  414984:	fbc3 2401 	smlal	r2, r4, r3, r1
  414988:	2c00      	cmp	r4, #0
  41498a:	da05      	bge.n	414998 <arm_softmax_s8+0xc38>
  41498c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  414990:	1851      	adds	r1, r2, r1
  414992:	460a      	mov	r2, r1
  414994:	f144 0400 	adc.w	r4, r4, #0
  414998:	4610      	mov	r0, r2
  41499a:	4621      	mov	r1, r4
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
  41499c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    result = (int32_t)(mult / (1ll << 31));
  4149a0:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
  4149a4:	f000 836e 	beq.w	415084 <arm_softmax_s8+0x1324>
    mult = mult + (q63_t)m1 * m2;
  4149a8:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
  4149ac:	f040 427f 	orr.w	r2, r0, #4278190080	@ 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
  4149b0:	1a11      	subs	r1, r2, r0
    SELECT_IF_NON_ZERO(720401)
  4149b2:	f3c1 7340 	ubfx	r3, r1, #29, #1
    mask = MASK_IF_ZERO(val);
  4149b6:	fab0 f980 	clz	r9, r0
    SELECT_IF_NON_ZERO(242)
  4149ba:	f3c1 7080 	ubfx	r0, r1, #30, #1
    SELECT_IF_NON_ZERO(720401)
  4149be:	9310      	str	r3, [sp, #64]	@ 0x40
  4149c0:	1e43      	subs	r3, r0, #1
  4149c2:	9317      	str	r3, [sp, #92]	@ 0x5c
    SELECT_IF_NON_ZERO(39332535)
  4149c4:	f3c1 7300 	ubfx	r3, r1, #28, #1
    mult = mult + (q63_t)m1 * m2;
  4149c8:	2700      	movs	r7, #0
    SELECT_IF_NON_ZERO(39332535)
  4149ca:	930f      	str	r3, [sp, #60]	@ 0x3c
    result = (int32_t)(mult / (1ll << 31));
  4149cc:	4663      	mov	r3, ip
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
  4149ce:	0152      	lsls	r2, r2, #5
  4149d0:	f102 5280 	add.w	r2, r2, #268435456	@ 0x10000000
    result = (int32_t)(mult / (1ll << 31));
  4149d4:	fbc2 3702 	smlal	r3, r7, r2, r2
    mask = MASK_IF_ZERO(val);
  4149d8:	ea4f 1959 	mov.w	r9, r9, lsr #5
    SELECT_IF_NON_ZERO(242)
  4149dc:	9018      	str	r0, [sp, #96]	@ 0x60
  4149de:	f109 30ff 	add.w	r0, r9, #4294967295	@ 0xffffffff
    SELECT_IF_NON_ZERO(1672461947)
  4149e2:	f3c1 6400 	ubfx	r4, r1, #24, #1
    SELECT_IF_NON_ZERO(1302514674)
  4149e6:	f3c1 6b40 	ubfx	fp, r1, #25, #1
  4149ea:	9016      	str	r0, [sp, #88]	@ 0x58
    result = (int32_t)(mult / (1ll << 31));
  4149ec:	2f00      	cmp	r7, #0
    SELECT_IF_NON_ZERO(290630308)
  4149ee:	f3c1 60c0 	ubfx	r0, r1, #27, #1
    SELECT_IF_NON_ZERO(790015084)
  4149f2:	f3c1 6180 	ubfx	r1, r1, #26, #1
  4149f6:	f104 35ff 	add.w	r5, r4, #4294967295	@ 0xffffffff
    SELECT_IF_NON_ZERO(290630308)
  4149fa:	900c      	str	r0, [sp, #48]	@ 0x30
    SELECT_IF_NON_ZERO(790015084)
  4149fc:	910b      	str	r1, [sp, #44]	@ 0x2c
    result = (int32_t)(mult / (1ll << 31));
  4149fe:	da05      	bge.n	414a0c <arm_softmax_s8+0xcac>
  414a00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  414a04:	1859      	adds	r1, r3, r1
  414a06:	460b      	mov	r3, r1
  414a08:	f147 0700 	adc.w	r7, r7, #0
  414a0c:	4618      	mov	r0, r3
  414a0e:	4639      	mov	r1, r7
  414a10:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    mult = mult + (q63_t)m1 * m2;
  414a14:	fba0 7800 	umull	r7, r8, r0, r0
  414a18:	fb01 fa00 	mul.w	sl, r1, r0
  414a1c:	f117 4780 	adds.w	r7, r7, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  414a20:	eb48 084a 	adc.w	r8, r8, sl, lsl #1
  414a24:	f1b8 0f00 	cmp.w	r8, #0
  414a28:	4686      	mov	lr, r0
  414a2a:	468c      	mov	ip, r1
  414a2c:	4603      	mov	r3, r0
  414a2e:	da05      	bge.n	414a3c <arm_softmax_s8+0xcdc>
  414a30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  414a34:	1879      	adds	r1, r7, r1
  414a36:	460f      	mov	r7, r1
  414a38:	f148 0800 	adc.w	r8, r8, #0
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
  414a3c:	f1b9 0f00 	cmp.w	r9, #0
  414a40:	bf14      	ite	ne
  414a42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
  414a46:	2100      	moveq	r1, #0
    mult = mult + (q63_t)m1 * m2;
  414a48:	fb02 fc0c 	mul.w	ip, r2, ip
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
  414a4c:	9115      	str	r1, [sp, #84]	@ 0x54
  414a4e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    result = (int32_t)(mult / (1ll << 31));
  414a50:	9700      	str	r7, [sp, #0]
    mult = mult + (q63_t)m1 * m2;
  414a52:	17d7      	asrs	r7, r2, #31
  414a54:	fb0e cc07 	mla	ip, lr, r7, ip
  414a58:	1e4f      	subs	r7, r1, #1
  414a5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
    result = (int32_t)(mult / (1ll << 31));
  414a5c:	f8cd 8004 	str.w	r8, [sp, #4]
  414a60:	3901      	subs	r1, #1
  414a62:	9114      	str	r1, [sp, #80]	@ 0x50
  414a64:	e9dd 0100 	ldrd	r0, r1, [sp]
  414a68:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
  414a6c:	e9cd 0100 	strd	r0, r1, [sp]
  414a70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    mult = mult + (q63_t)m1 * m2;
  414a72:	fba2 8e0e 	umull	r8, lr, r2, lr
  414a76:	3901      	subs	r1, #1
  414a78:	9113      	str	r1, [sp, #76]	@ 0x4c
  414a7a:	9910      	ldr	r1, [sp, #64]	@ 0x40
    int32_t remainder = remainder_mask & dividend;
  414a7c:	9800      	ldr	r0, [sp, #0]
  414a7e:	3901      	subs	r1, #1
  414a80:	9112      	str	r1, [sp, #72]	@ 0x48
    q31_t threshold = remainder_mask >> 1;
  414a82:	9900      	ldr	r1, [sp, #0]
    mult = mult + (q63_t)m1 * m2;
  414a84:	44e6      	add	lr, ip
    q31_t threshold = remainder_mask >> 1;
  414a86:	0fc9      	lsrs	r1, r1, #31
    int32_t remainder = remainder_mask & dividend;
  414a88:	f000 0a03 	and.w	sl, r0, #3
    if ((m1 < 0) ^ (m2 < 0))
  414a8c:	ea83 0902 	eor.w	r9, r3, r2
  414a90:	f10b 3cff 	add.w	ip, fp, #4294967295	@ 0xffffffff
    q31_t threshold = remainder_mask >> 1;
  414a94:	3101      	adds	r1, #1
    result = dividend >> exponent;
  414a96:	1080      	asrs	r0, r0, #2
        result++;
  414a98:	4551      	cmp	r1, sl
  414a9a:	ea50 90a0 			@ <UNDEFINED> instruction: 0xea5090a0
    q63_t mult = 1 << 30;
  414a9e:	f1b9 0f00 	cmp.w	r9, #0
  414aa2:	4984      	ldr	r1, [pc, #528]	@ (414cb4 <arm_softmax_s8+0xf54>)
  414aa4:	bfaa      	itet	ge
  414aa6:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
  414aaa:	f04f 39ff 	movlt.w	r9, #4294967295	@ 0xffffffff
  414aae:	f04f 0900 	movge.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
  414ab2:	eb11 0108 	adds.w	r1, r1, r8
    result = (int32_t)(mult / (1ll << 31));
  414ab6:	eb4e 0e09 	adc.w	lr, lr, r9
  414aba:	f1be 0f00 	cmp.w	lr, #0
  414abe:	da06      	bge.n	414ace <arm_softmax_s8+0xd6e>
  414ac0:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
  414ac4:	eb11 0808 	adds.w	r8, r1, r8
  414ac8:	4641      	mov	r1, r8
  414aca:	f14e 0e00 	adc.w	lr, lr, #0
  414ace:	46f1      	mov	r9, lr
  414ad0:	4688      	mov	r8, r1
  414ad2:	ea58 79ef 	orrs.w	r9, r8, pc, asr #31
    if ((m1 < 0) ^ (m2 < 0))
  414ad6:	4978      	ldr	r1, [pc, #480]	@ (414cb8 <arm_softmax_s8+0xf58>)
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  414ad8:	4440      	add	r0, r8
    if ((m1 < 0) ^ (m2 < 0))
  414ada:	4041      	eors	r1, r0
    q63_t mult = 1 << 30;
  414adc:	2900      	cmp	r1, #0
  414ade:	4975      	ldr	r1, [pc, #468]	@ (414cb4 <arm_softmax_s8+0xf54>)
  414ae0:	bfad      	iteet	ge
  414ae2:	f04f 4e80 	movge.w	lr, #1073741824	@ 0x40000000
  414ae6:	468e      	movlt	lr, r1
  414ae8:	f04f 38ff 	movlt.w	r8, #4294967295	@ 0xffffffff
  414aec:	f04f 0800 	movge.w	r8, #0
    result = (int32_t)(mult / (1ll << 31));
  414af0:	4971      	ldr	r1, [pc, #452]	@ (414cb8 <arm_softmax_s8+0xf58>)
  414af2:	fbc0 e801 	smlal	lr, r8, r0, r1
  414af6:	f1b8 0f00 	cmp.w	r8, #0
  414afa:	da06      	bge.n	414b0a <arm_softmax_s8+0xdaa>
  414afc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  414b00:	eb1e 0101 	adds.w	r1, lr, r1
  414b04:	468e      	mov	lr, r1
  414b06:	f148 0800 	adc.w	r8, r8, #0
  414b0a:	4670      	mov	r0, lr
  414b0c:	4641      	mov	r1, r8
  414b0e:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  414b12:	4403      	add	r3, r0
    if (result < 0)
  414b14:	1059      	asrs	r1, r3, #1
  414b16:	d405      	bmi.n	414b24 <arm_softmax_s8+0xdc4>
        result++;
  414b18:	f013 0f01 	tst.w	r3, #1
  414b1c:	f101 0301 	add.w	r3, r1, #1
  414b20:	bf18      	it	ne
  414b22:	4619      	movne	r1, r3
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  414b24:	188b      	adds	r3, r1, r2
    if ((m1 < 0) ^ (m2 < 0))
  414b26:	4a65      	ldr	r2, [pc, #404]	@ (414cbc <arm_softmax_s8+0xf5c>)
  414b28:	405a      	eors	r2, r3
    q63_t mult = 1 << 30;
  414b2a:	2a00      	cmp	r2, #0
  414b2c:	4a61      	ldr	r2, [pc, #388]	@ (414cb4 <arm_softmax_s8+0xf54>)
  414b2e:	bfad      	iteet	ge
  414b30:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
  414b34:	4611      	movlt	r1, r2
  414b36:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
  414b3a:	2000      	movge	r0, #0
    result = (int32_t)(mult / (1ll << 31));
  414b3c:	4a5f      	ldr	r2, [pc, #380]	@ (414cbc <arm_softmax_s8+0xf5c>)
  414b3e:	fbc3 1002 	smlal	r1, r0, r3, r2
  414b42:	2800      	cmp	r0, #0
  414b44:	da05      	bge.n	414b52 <arm_softmax_s8+0xdf2>
  414b46:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  414b4a:	18cb      	adds	r3, r1, r3
  414b4c:	4619      	mov	r1, r3
  414b4e:	f140 0000 	adc.w	r0, r0, #0
  414b52:	460a      	mov	r2, r1
  414b54:	4603      	mov	r3, r0
    mult = mult + (q63_t)m1 * m2;
  414b56:	f04f 4e80 	mov.w	lr, #1073741824	@ 0x40000000
  414b5a:	f04f 0800 	mov.w	r8, #0
    result = (int32_t)(mult / (1ll << 31));
  414b5e:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  414b62:	46f2      	mov	sl, lr
  414b64:	46c1      	mov	r9, r8
    int32_t result = 1895147668 +
  414b66:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
    result = (int32_t)(mult / (1ll << 31));
  414b6a:	4b55      	ldr	r3, [pc, #340]	@ (414cc0 <arm_softmax_s8+0xf60>)
    int32_t result = 1895147668 +
  414b6c:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
  414b70:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
    result = (int32_t)(mult / (1ll << 31));
  414b74:	fbc2 a903 	smlal	sl, r9, r2, r3
  414b78:	4650      	mov	r0, sl
  414b7a:	4649      	mov	r1, r9
  414b7c:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    SELECT_IF_NON_ZERO(1672461947)
  414b80:	fb00 f404 	mul.w	r4, r0, r4
  414b84:	4015      	ands	r5, r2
  414b86:	406c      	eors	r4, r5
    result = (int32_t)(mult / (1ll << 31));
  414b88:	4641      	mov	r1, r8
  414b8a:	4675      	mov	r5, lr
  414b8c:	484d      	ldr	r0, [pc, #308]	@ (414cc4 <arm_softmax_s8+0xf64>)
    SELECT_IF_NON_ZERO(1302514674)
  414b8e:	ea04 0c0c 	and.w	ip, r4, ip
    result = (int32_t)(mult / (1ll << 31));
  414b92:	fbc4 5100 	smlal	r5, r1, r4, r0
  414b96:	462a      	mov	r2, r5
  414b98:	460b      	mov	r3, r1
  414b9a:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  414b9e:	4674      	mov	r4, lr
  414ba0:	4641      	mov	r1, r8
    SELECT_IF_NON_ZERO(1302514674)
  414ba2:	fb02 fb0b 	mul.w	fp, r2, fp
    result = (int32_t)(mult / (1ll << 31));
  414ba6:	4848      	ldr	r0, [pc, #288]	@ (414cc8 <arm_softmax_s8+0xf68>)
    SELECT_IF_NON_ZERO(1302514674)
  414ba8:	ea8c 0b0b 	eor.w	fp, ip, fp
    result = (int32_t)(mult / (1ll << 31));
  414bac:	fbcb 4100 	smlal	r4, r1, fp, r0
  414bb0:	4622      	mov	r2, r4
  414bb2:	460b      	mov	r3, r1
  414bb4:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
    SELECT_IF_NON_ZERO(790015084)
  414bb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
  414bba:	ea0b 0707 	and.w	r7, fp, r7
  414bbe:	fb02 f101 	mul.w	r1, r2, r1
    result = (int32_t)(mult / (1ll << 31));
  414bc2:	4644      	mov	r4, r8
    SELECT_IF_NON_ZERO(790015084)
  414bc4:	4079      	eors	r1, r7
    result = (int32_t)(mult / (1ll << 31));
  414bc6:	4677      	mov	r7, lr
  414bc8:	4d40      	ldr	r5, [pc, #256]	@ (414ccc <arm_softmax_s8+0xf6c>)
    SELECT_IF_NON_ZERO(290630308)
  414bca:	9814      	ldr	r0, [sp, #80]	@ 0x50
    result = (int32_t)(mult / (1ll << 31));
  414bcc:	fbc1 7405 	smlal	r7, r4, r1, r5
  414bd0:	463a      	mov	r2, r7
  414bd2:	4623      	mov	r3, r4
  414bd4:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  414bd8:	4677      	mov	r7, lr
  414bda:	4644      	mov	r4, r8
    SELECT_IF_NON_ZERO(290630308)
  414bdc:	4008      	ands	r0, r1
  414bde:	990c      	ldr	r1, [sp, #48]	@ 0x30
    result = (int32_t)(mult / (1ll << 31));
  414be0:	4d3b      	ldr	r5, [pc, #236]	@ (414cd0 <arm_softmax_s8+0xf70>)
    SELECT_IF_NON_ZERO(290630308)
  414be2:	fb02 f101 	mul.w	r1, r2, r1
  414be6:	4041      	eors	r1, r0
    result = (int32_t)(mult / (1ll << 31));
  414be8:	fbc1 7405 	smlal	r7, r4, r1, r5
  414bec:	463a      	mov	r2, r7
  414bee:	4623      	mov	r3, r4
  414bf0:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  414bf4:	4677      	mov	r7, lr
  414bf6:	4644      	mov	r4, r8
    SELECT_IF_NON_ZERO(39332535)
  414bf8:	9813      	ldr	r0, [sp, #76]	@ 0x4c
    result = (int32_t)(mult / (1ll << 31));
  414bfa:	4d36      	ldr	r5, [pc, #216]	@ (414cd4 <arm_softmax_s8+0xf74>)
    SELECT_IF_NON_ZERO(39332535)
  414bfc:	4008      	ands	r0, r1
  414bfe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
  414c00:	fb02 f101 	mul.w	r1, r2, r1
  414c04:	4041      	eors	r1, r0
    result = (int32_t)(mult / (1ll << 31));
  414c06:	fbc1 7405 	smlal	r7, r4, r1, r5
  414c0a:	4623      	mov	r3, r4
  414c0c:	463a      	mov	r2, r7
  414c0e:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
    SELECT_IF_NON_ZERO(720401)
  414c12:	9812      	ldr	r0, [sp, #72]	@ 0x48
    if ((m1 < 0) ^ (m2 < 0))
  414c14:	9c06      	ldr	r4, [sp, #24]
    SELECT_IF_NON_ZERO(720401)
  414c16:	4008      	ands	r0, r1
  414c18:	9910      	ldr	r1, [sp, #64]	@ 0x40
  414c1a:	fb02 f101 	mul.w	r1, r2, r1
  414c1e:	4041      	eors	r1, r0
    result = (int32_t)(mult / (1ll << 31));
  414c20:	20f2      	movs	r0, #242	@ 0xf2
  414c22:	fbc1 e800 	smlal	lr, r8, r1, r0
  414c26:	4672      	mov	r2, lr
  414c28:	4643      	mov	r3, r8
  414c2a:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
    SELECT_IF_NON_ZERO(242)
  414c2e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
  414c30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
    SELECT_IF_NON_ZERO(242)
  414c32:	4001      	ands	r1, r0
  414c34:	9818      	ldr	r0, [sp, #96]	@ 0x60
  414c36:	fb02 f000 	mul.w	r0, r2, r0
  414c3a:	4041      	eors	r1, r0
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
  414c3c:	4019      	ands	r1, r3
  414c3e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  414c40:	404b      	eors	r3, r1
    if ((m1 < 0) ^ (m2 < 0))
  414c42:	ea83 0204 	eor.w	r2, r3, r4
    q63_t mult = 1 << 30;
  414c46:	2a00      	cmp	r2, #0
  414c48:	4a1a      	ldr	r2, [pc, #104]	@ (414cb4 <arm_softmax_s8+0xf54>)
  414c4a:	bfad      	iteet	ge
  414c4c:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
  414c50:	4611      	movlt	r1, r2
  414c52:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
  414c56:	2000      	movge	r0, #0
    result = (int32_t)(mult / (1ll << 31));
  414c58:	fbc3 1004 	smlal	r1, r0, r3, r4
  414c5c:	2800      	cmp	r0, #0
  414c5e:	da05      	bge.n	414c6c <arm_softmax_s8+0xf0c>
  414c60:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  414c64:	18cb      	adds	r3, r1, r3
  414c66:	4619      	mov	r1, r3
  414c68:	f140 0000 	adc.w	r0, r0, #0
  414c6c:	460a      	mov	r2, r1
  414c6e:	4603      	mov	r3, r0
  414c70:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
    if (result < 0)
  414c74:	990d      	ldr	r1, [sp, #52]	@ 0x34
  414c76:	fa52 f101 	asrs.w	r1, r2, r1
  414c7a:	d42d      	bmi.n	414cd8 <arm_softmax_s8+0xf78>
    int32_t remainder = remainder_mask & dividend;
  414c7c:	981c      	ldr	r0, [sp, #112]	@ 0x70
    if (remainder > threshold)
  414c7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    int32_t remainder = remainder_mask & dividend;
  414c80:	4002      	ands	r2, r0
    if (remainder > threshold)
  414c82:	4293      	cmp	r3, r2
  414c84:	f280 823b 	bge.w	4150fe <arm_softmax_s8+0x139e>
                const int32_t res =
  414c88:	f1a1 037f 	sub.w	r3, r1, #127	@ 0x7f
                output[tail_idx + i] = (int8_t)CLAMP(res, (int32_t)ACT_MAX, (int32_t)ACT_MIN);
  414c8c:	2b7f      	cmp	r3, #127	@ 0x7f
  414c8e:	b25b      	sxtb	r3, r3
  414c90:	bfa8      	it	ge
  414c92:	237f      	movge	r3, #127	@ 0x7f
  414c94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  414c96:	f802 3b01 	strb.w	r3, [r2], #1
        for (int i = 0; i < (row_size & 3); i++)
  414c9a:	9b08      	ldr	r3, [sp, #32]
                output[tail_idx + i] = (int8_t)CLAMP(res, (int32_t)ACT_MAX, (int32_t)ACT_MIN);
  414c9c:	920a      	str	r2, [sp, #40]	@ 0x28
        for (int i = 0; i < (row_size & 3); i++)
  414c9e:	42b3      	cmp	r3, r6
  414ca0:	f47f ae59 	bne.w	414956 <arm_softmax_s8+0xbf6>
  414ca4:	f8dd 8064 	ldr.w	r8, [sp, #100]	@ 0x64
  414ca8:	f8dd 9078 	ldr.w	r9, [sp, #120]	@ 0x78
  414cac:	f8dd a0fc 	ldr.w	sl, [sp, #252]	@ 0xfc
  414cb0:	e4ae      	b.n	414610 <arm_softmax_s8+0x8b0>
  414cb2:	bf00      	nop
  414cb4:	c0000001 	.word	0xc0000001
  414cb8:	2aaaaaab 	.word	0x2aaaaaab
  414cbc:	70f5a894 	.word	0x70f5a894
  414cc0:	63afbe7b 	.word	0x63afbe7b
  414cc4:	4da2cbf2 	.word	0x4da2cbf2
  414cc8:	2f16ac6c 	.word	0x2f16ac6c
  414ccc:	1152aaa4 	.word	0x1152aaa4
  414cd0:	02582ab7 	.word	0x02582ab7
  414cd4:	000afe11 	.word	0x000afe11
            if (diff >= diff_min)
  414cd8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
  414cdc:	e7da      	b.n	414c94 <arm_softmax_s8+0xf34>
    mask = MASK_IF_ZERO(val);
  414cde:	9f09      	ldr	r7, [sp, #36]	@ 0x24
    mult = mult + (q63_t)m1 * m2;
  414ce0:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  414ce4:	f8cd b020 	str.w	fp, [sp, #32]
  414ce8:	f8cd 905c 	str.w	r9, [sp, #92]	@ 0x5c
  414cec:	f8cd a0fc 	str.w	sl, [sp, #252]	@ 0xfc
            const int32_t diff = input[tail_idx + i] - max;
  414cf0:	9a08      	ldr	r2, [sp, #32]
  414cf2:	f917 3b01 	ldrsb.w	r3, [r7], #1
  414cf6:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
  414cf8:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
  414cfa:	429a      	cmp	r2, r3
  414cfc:	f300 816c 	bgt.w	414fd8 <arm_softmax_s8+0x1278>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
  414d00:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
  414d02:	fa03 f102 	lsl.w	r1, r3, r2
    if ((m1 < 0) ^ (m2 < 0))
  414d06:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
    q63_t mult = 1 << 30;
  414d0a:	2b00      	cmp	r3, #0
  414d0c:	4bcf      	ldr	r3, [pc, #828]	@ (41504c <arm_softmax_s8+0x12ec>)
  414d0e:	bfad      	iteet	ge
  414d10:	f04f 4080 	movge.w	r0, #1073741824	@ 0x40000000
  414d14:	4618      	movlt	r0, r3
  414d16:	f04f 34ff 	movlt.w	r4, #4294967295	@ 0xffffffff
  414d1a:	2400      	movge	r4, #0
    mult = mult + (q63_t)m1 * m2;
  414d1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
    result = (int32_t)(mult / (1ll << 31));
  414d20:	fbc1 0403 	smlal	r0, r4, r1, r3
  414d24:	2c00      	cmp	r4, #0
  414d26:	da05      	bge.n	414d34 <arm_softmax_s8+0xfd4>
  414d28:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  414d2c:	18c3      	adds	r3, r0, r3
  414d2e:	4618      	mov	r0, r3
  414d30:	f144 0400 	adc.w	r4, r4, #0
  414d34:	4602      	mov	r2, r0
  414d36:	4623      	mov	r3, r4
  414d38:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
  414d3c:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
    result = (int32_t)(mult / (1ll << 31));
  414d40:	920b      	str	r2, [sp, #44]	@ 0x2c
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
  414d42:	f000 8161 	beq.w	415008 <arm_softmax_s8+0x12a8>
    mult = mult + (q63_t)m1 * m2;
  414d46:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
  414d4a:	f042 447f 	orr.w	r4, r2, #4278190080	@ 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
  414d4e:	1aa3      	subs	r3, r4, r2
    SELECT_IF_NON_ZERO(720401)
  414d50:	f3c3 7240 	ubfx	r2, r3, #29, #1
    SELECT_IF_NON_ZERO(242)
  414d54:	f3c3 7080 	ubfx	r0, r3, #30, #1
    SELECT_IF_NON_ZERO(720401)
  414d58:	9215      	str	r2, [sp, #84]	@ 0x54
  414d5a:	3a01      	subs	r2, #1
  414d5c:	9210      	str	r2, [sp, #64]	@ 0x40
  414d5e:	1e42      	subs	r2, r0, #1
    mult = mult + (q63_t)m1 * m2;
  414d60:	2500      	movs	r5, #0
  414d62:	9212      	str	r2, [sp, #72]	@ 0x48
    result = (int32_t)(mult / (1ll << 31));
  414d64:	460a      	mov	r2, r1
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
  414d66:	0164      	lsls	r4, r4, #5
  414d68:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
    result = (int32_t)(mult / (1ll << 31));
  414d6c:	fbc4 2504 	smlal	r2, r5, r4, r4
  414d70:	2d00      	cmp	r5, #0
    SELECT_IF_NON_ZERO(242)
  414d72:	9011      	str	r0, [sp, #68]	@ 0x44
    result = (int32_t)(mult / (1ll << 31));
  414d74:	da05      	bge.n	414d82 <arm_softmax_s8+0x1022>
  414d76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  414d7a:	1851      	adds	r1, r2, r1
  414d7c:	460a      	mov	r2, r1
  414d7e:	f145 0500 	adc.w	r5, r5, #0
  414d82:	4610      	mov	r0, r2
  414d84:	4629      	mov	r1, r5
  414d86:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    mult = mult + (q63_t)m1 * m2;
  414d8a:	fba0 6e00 	umull	r6, lr, r0, r0
  414d8e:	fb01 f800 	mul.w	r8, r1, r0
  414d92:	f116 4680 	adds.w	r6, r6, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
  414d96:	eb4e 0e48 	adc.w	lr, lr, r8, lsl #1
  414d9a:	f1be 0f00 	cmp.w	lr, #0
  414d9e:	4605      	mov	r5, r0
  414da0:	468c      	mov	ip, r1
  414da2:	4602      	mov	r2, r0
  414da4:	da05      	bge.n	414db2 <arm_softmax_s8+0x1052>
  414da6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  414daa:	1871      	adds	r1, r6, r1
  414dac:	460e      	mov	r6, r1
  414dae:	f14e 0e00 	adc.w	lr, lr, #0
  414db2:	9606      	str	r6, [sp, #24]
  414db4:	f8cd e01c 	str.w	lr, [sp, #28]
  414db8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  414dbc:	ea5a 7bef 	orrs.w	fp, sl, pc, asr #31
    mult = mult + (q63_t)m1 * m2;
  414dc0:	fb04 fc0c 	mul.w	ip, r4, ip
  414dc4:	17e6      	asrs	r6, r4, #31
  414dc6:	fb05 cc06 	mla	ip, r5, r6, ip
  414dca:	fba4 8505 	umull	r8, r5, r4, r5
    SELECT_IF_NON_ZERO(39332535)
  414dce:	f3c3 7100 	ubfx	r1, r3, #28, #1
    SELECT_IF_NON_ZERO(290630308)
  414dd2:	f3c3 60c0 	ubfx	r0, r3, #27, #1
    SELECT_IF_NON_ZERO(39332535)
  414dd6:	910f      	str	r1, [sp, #60]	@ 0x3c
  414dd8:	3901      	subs	r1, #1
    SELECT_IF_NON_ZERO(1302514674)
  414dda:	f3c3 6640 	ubfx	r6, r3, #25, #1
    mult = mult + (q63_t)m1 * m2;
  414dde:	4465      	add	r5, ip
  414de0:	9113      	str	r1, [sp, #76]	@ 0x4c
    SELECT_IF_NON_ZERO(1672461947)
  414de2:	f3c3 6c00 	ubfx	ip, r3, #24, #1
  414de6:	1e41      	subs	r1, r0, #1
    SELECT_IF_NON_ZERO(790015084)
  414de8:	f3c3 6380 	ubfx	r3, r3, #26, #1
  414dec:	9114      	str	r1, [sp, #80]	@ 0x50
  414dee:	1e59      	subs	r1, r3, #1
  414df0:	910d      	str	r1, [sp, #52]	@ 0x34
  414df2:	f10c 31ff 	add.w	r1, ip, #4294967295	@ 0xffffffff
  414df6:	910c      	str	r1, [sp, #48]	@ 0x30
    q31_t threshold = remainder_mask >> 1;
  414df8:	4651      	mov	r1, sl
    int32_t remainder = remainder_mask & dividend;
  414dfa:	e9cd ab06 	strd	sl, fp, [sp, #24]
    SELECT_IF_NON_ZERO(290630308)
  414dfe:	900a      	str	r0, [sp, #40]	@ 0x28
    result = dividend >> exponent;
  414e00:	9806      	ldr	r0, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
  414e02:	0fc9      	lsrs	r1, r1, #31
    if ((m1 < 0) ^ (m2 < 0))
  414e04:	ea84 0902 	eor.w	r9, r4, r2
  414e08:	f106 3eff 	add.w	lr, r6, #4294967295	@ 0xffffffff
    q31_t threshold = remainder_mask >> 1;
  414e0c:	3101      	adds	r1, #1
    int32_t remainder = remainder_mask & dividend;
  414e0e:	f00a 0a03 	and.w	sl, sl, #3
    result = dividend >> exponent;
  414e12:	1080      	asrs	r0, r0, #2
        result++;
  414e14:	458a      	cmp	sl, r1
  414e16:	ea50 90d0 			@ <UNDEFINED> instruction: 0xea5090d0
    q63_t mult = 1 << 30;
  414e1a:	f1b9 0f00 	cmp.w	r9, #0
  414e1e:	498b      	ldr	r1, [pc, #556]	@ (41504c <arm_softmax_s8+0x12ec>)
  414e20:	bfaa      	itet	ge
  414e22:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
  414e26:	f04f 39ff 	movlt.w	r9, #4294967295	@ 0xffffffff
  414e2a:	f04f 0900 	movge.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
  414e2e:	eb18 0101 	adds.w	r1, r8, r1
    result = (int32_t)(mult / (1ll << 31));
  414e32:	eb45 0509 	adc.w	r5, r5, r9
  414e36:	2d00      	cmp	r5, #0
  414e38:	da06      	bge.n	414e48 <arm_softmax_s8+0x10e8>
  414e3a:	f06f 4800 	mvn.w	r8, #2147483648	@ 0x80000000
  414e3e:	eb11 0808 	adds.w	r8, r1, r8
  414e42:	4641      	mov	r1, r8
  414e44:	f145 0500 	adc.w	r5, r5, #0
  414e48:	46a9      	mov	r9, r5
  414e4a:	4688      	mov	r8, r1
  414e4c:	ea58 79ef 	orrs.w	r9, r8, pc, asr #31
    if ((m1 < 0) ^ (m2 < 0))
  414e50:	497f      	ldr	r1, [pc, #508]	@ (415050 <arm_softmax_s8+0x12f0>)
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  414e52:	4440      	add	r0, r8
    if ((m1 < 0) ^ (m2 < 0))
  414e54:	4041      	eors	r1, r0
    q63_t mult = 1 << 30;
  414e56:	2900      	cmp	r1, #0
  414e58:	497c      	ldr	r1, [pc, #496]	@ (41504c <arm_softmax_s8+0x12ec>)
  414e5a:	bfad      	iteet	ge
  414e5c:	f04f 4580 	movge.w	r5, #1073741824	@ 0x40000000
  414e60:	460d      	movlt	r5, r1
  414e62:	f04f 38ff 	movlt.w	r8, #4294967295	@ 0xffffffff
  414e66:	f04f 0800 	movge.w	r8, #0
    result = (int32_t)(mult / (1ll << 31));
  414e6a:	4979      	ldr	r1, [pc, #484]	@ (415050 <arm_softmax_s8+0x12f0>)
  414e6c:	fbc0 5801 	smlal	r5, r8, r0, r1
  414e70:	f1b8 0f00 	cmp.w	r8, #0
  414e74:	da05      	bge.n	414e82 <arm_softmax_s8+0x1122>
  414e76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  414e7a:	1869      	adds	r1, r5, r1
  414e7c:	460d      	mov	r5, r1
  414e7e:	f148 0800 	adc.w	r8, r8, #0
  414e82:	4628      	mov	r0, r5
  414e84:	4641      	mov	r1, r8
  414e86:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  414e8a:	4402      	add	r2, r0
    if (result < 0)
  414e8c:	1051      	asrs	r1, r2, #1
  414e8e:	d405      	bmi.n	414e9c <arm_softmax_s8+0x113c>
        result++;
  414e90:	f012 0f01 	tst.w	r2, #1
  414e94:	f101 0201 	add.w	r2, r1, #1
  414e98:	bf18      	it	ne
  414e9a:	4611      	movne	r1, r2
    if ((m1 < 0) ^ (m2 < 0))
  414e9c:	4a6d      	ldr	r2, [pc, #436]	@ (415054 <arm_softmax_s8+0x12f4>)
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
  414e9e:	4421      	add	r1, r4
    if ((m1 < 0) ^ (m2 < 0))
  414ea0:	404a      	eors	r2, r1
    mask = MASK_IF_ZERO(val);
  414ea2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
    q63_t mult = 1 << 30;
  414ea4:	2a00      	cmp	r2, #0
  414ea6:	bfb8      	it	lt
  414ea8:	f04f 34ff 	movlt.w	r4, #4294967295	@ 0xffffffff
  414eac:	4a67      	ldr	r2, [pc, #412]	@ (41504c <arm_softmax_s8+0x12ec>)
  414eae:	bfa4      	itt	ge
  414eb0:	2400      	movge	r4, #0
  414eb2:	f04f 4280 	movge.w	r2, #1073741824	@ 0x40000000
    mask = MASK_IF_ZERO(val);
  414eb6:	2800      	cmp	r0, #0
  414eb8:	f000 809e 	beq.w	414ff8 <arm_softmax_s8+0x1298>
    result = (int32_t)(mult / (1ll << 31));
  414ebc:	4865      	ldr	r0, [pc, #404]	@ (415054 <arm_softmax_s8+0x12f4>)
  414ebe:	fbc1 2400 	smlal	r2, r4, r1, r0
  414ec2:	2c00      	cmp	r4, #0
  414ec4:	da05      	bge.n	414ed2 <arm_softmax_s8+0x1172>
  414ec6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
  414eca:	1851      	adds	r1, r2, r1
  414ecc:	460a      	mov	r2, r1
  414ece:	f144 0400 	adc.w	r4, r4, #0
  414ed2:	4610      	mov	r0, r2
  414ed4:	4621      	mov	r1, r4
    mult = mult + (q63_t)m1 * m2;
  414ed6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  414eda:	f04f 0800 	mov.w	r8, #0
    result = (int32_t)(mult / (1ll << 31));
  414ede:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
  414ee2:	4692      	mov	sl, r2
  414ee4:	46c1      	mov	r9, r8
    int32_t result = 1895147668 +
  414ee6:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
    SELECT_IF_NON_ZERO(1672461947)
  414eea:	990c      	ldr	r1, [sp, #48]	@ 0x30
    int32_t result = 1895147668 +
  414eec:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
  414ef0:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
    SELECT_IF_NON_ZERO(1672461947)
  414ef4:	4001      	ands	r1, r0
  414ef6:	468b      	mov	fp, r1
    result = (int32_t)(mult / (1ll << 31));
  414ef8:	4957      	ldr	r1, [pc, #348]	@ (415058 <arm_softmax_s8+0x12f8>)
  414efa:	fbc0 a901 	smlal	sl, r9, r0, r1
  414efe:	464d      	mov	r5, r9
  414f00:	4654      	mov	r4, sl
  414f02:	ea54 75ef 	orrs.w	r5, r4, pc, asr #31
  414f06:	4691      	mov	r9, r2
    SELECT_IF_NON_ZERO(1672461947)
  414f08:	fb04 fc0c 	mul.w	ip, r4, ip
    result = (int32_t)(mult / (1ll << 31));
  414f0c:	4644      	mov	r4, r8
  414f0e:	4d53      	ldr	r5, [pc, #332]	@ (41505c <arm_softmax_s8+0x12fc>)
    SELECT_IF_NON_ZERO(1672461947)
  414f10:	ea8b 0c0c 	eor.w	ip, fp, ip
    result = (int32_t)(mult / (1ll << 31));
  414f14:	fbcc 9405 	smlal	r9, r4, ip, r5
  414f18:	4621      	mov	r1, r4
  414f1a:	4648      	mov	r0, r9
  414f1c:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    SELECT_IF_NON_ZERO(1302514674)
  414f20:	fb00 f606 	mul.w	r6, r0, r6
  414f24:	ea0e 0e0c 	and.w	lr, lr, ip
  414f28:	ea8e 0606 	eor.w	r6, lr, r6
    result = (int32_t)(mult / (1ll << 31));
  414f2c:	4694      	mov	ip, r2
  414f2e:	46c6      	mov	lr, r8
  414f30:	4d4b      	ldr	r5, [pc, #300]	@ (415060 <arm_softmax_s8+0x1300>)
    SELECT_IF_NON_ZERO(790015084)
  414f32:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
    result = (int32_t)(mult / (1ll << 31));
  414f34:	fbc6 ce05 	smlal	ip, lr, r6, r5
  414f38:	4660      	mov	r0, ip
  414f3a:	4671      	mov	r1, lr
  414f3c:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
  414f40:	4694      	mov	ip, r2
  414f42:	4645      	mov	r5, r8
    SELECT_IF_NON_ZERO(790015084)
  414f44:	fb00 f303 	mul.w	r3, r0, r3
  414f48:	4034      	ands	r4, r6
    result = (int32_t)(mult / (1ll << 31));
  414f4a:	4e46      	ldr	r6, [pc, #280]	@ (415064 <arm_softmax_s8+0x1304>)
    SELECT_IF_NON_ZERO(790015084)
  414f4c:	4063      	eors	r3, r4
    result = (int32_t)(mult / (1ll << 31));
  414f4e:	fbc3 c506 	smlal	ip, r5, r3, r6
  414f52:	4660      	mov	r0, ip
  414f54:	4629      	mov	r1, r5
  414f56:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    SELECT_IF_NON_ZERO(290630308)
  414f5a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
    result = (int32_t)(mult / (1ll << 31));
  414f5c:	4616      	mov	r6, r2
    SELECT_IF_NON_ZERO(290630308)
  414f5e:	401c      	ands	r4, r3
  414f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    result = (int32_t)(mult / (1ll << 31));
  414f62:	4d41      	ldr	r5, [pc, #260]	@ (415068 <arm_softmax_s8+0x1308>)
    SELECT_IF_NON_ZERO(290630308)
  414f64:	fb00 fb03 	mul.w	fp, r0, r3
  414f68:	ea84 0b0b 	eor.w	fp, r4, fp
    result = (int32_t)(mult / (1ll << 31));
  414f6c:	4644      	mov	r4, r8
  414f6e:	fbcb 6405 	smlal	r6, r4, fp, r5
  414f72:	4630      	mov	r0, r6
  414f74:	4621      	mov	r1, r4
  414f76:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
  414f7a:	4694      	mov	ip, r2
  414f7c:	4645      	mov	r5, r8
    SELECT_IF_NON_ZERO(39332535)
  414f7e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
  414f80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  414f82:	fb00 f404 	mul.w	r4, r0, r4
    result = (int32_t)(mult / (1ll << 31));
  414f86:	4e39      	ldr	r6, [pc, #228]	@ (41506c <arm_softmax_s8+0x130c>)
    SELECT_IF_NON_ZERO(39332535)
  414f88:	ea03 030b 	and.w	r3, r3, fp
  414f8c:	4063      	eors	r3, r4
    result = (int32_t)(mult / (1ll << 31));
  414f8e:	fbc3 c506 	smlal	ip, r5, r3, r6
  414f92:	4660      	mov	r0, ip
  414f94:	4629      	mov	r1, r5
  414f96:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    SELECT_IF_NON_ZERO(720401)
  414f9a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
  414f9c:	401c      	ands	r4, r3
  414f9e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  414fa0:	fb00 f303 	mul.w	r3, r0, r3
  414fa4:	4063      	eors	r3, r4
    result = (int32_t)(mult / (1ll << 31));
  414fa6:	24f2      	movs	r4, #242	@ 0xf2
  414fa8:	fbc3 2804 	smlal	r2, r8, r3, r4
  414fac:	4610      	mov	r0, r2
  414fae:	4641      	mov	r1, r8
  414fb0:	ea50 71ef 	orrs.w	r1, r0, pc, asr #31
    SELECT_IF_NON_ZERO(242)
  414fb4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  414fb6:	401a      	ands	r2, r3
  414fb8:	4613      	mov	r3, r2
  414fba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  414fbc:	fb00 f202 	mul.w	r2, r0, r2
  414fc0:	4053      	eors	r3, r2
        result++;
  414fc2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
    result = dividend >> exponent;
  414fc6:	ea4f 3323 	mov.w	r3, r3, asr #12
        result++;
  414fca:	f103 0201 	add.w	r2, r3, #1
  414fce:	bf18      	it	ne
  414fd0:	4613      	movne	r3, r2
  414fd2:	9a00      	ldr	r2, [sp, #0]
  414fd4:	441a      	add	r2, r3
  414fd6:	9200      	str	r2, [sp, #0]
        for (int i = 0; i < (row_size & 3); i++)
  414fd8:	9b05      	ldr	r3, [sp, #20]
  414fda:	9a03      	ldr	r2, [sp, #12]
  414fdc:	18fb      	adds	r3, r7, r3
  414fde:	429a      	cmp	r2, r3
  414fe0:	f73f ae86 	bgt.w	414cf0 <arm_softmax_s8+0xf90>
  414fe4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
  414fe8:	f8dd b020 	ldr.w	fp, [sp, #32]
  414fec:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
  414ff0:	f8dd a0fc 	ldr.w	sl, [sp, #252]	@ 0xfc
  414ff4:	f7ff b811 	b.w	41401a <arm_softmax_s8+0x2ba>
    mask = MASK_IF_ZERO(val);
  414ff8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
        result++;
  414ffc:	e7e9      	b.n	414fd2 <arm_softmax_s8+0x1272>
  414ffe:	2323      	movs	r3, #35	@ 0x23
  415000:	2600      	movs	r6, #0
  415002:	930d      	str	r3, [sp, #52]	@ 0x34
  415004:	f7ff bb48 	b.w	414698 <arm_softmax_s8+0x938>
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
  415008:	2300      	movs	r3, #0
  41500a:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
        result = NN_Q31_MAX;
  41500e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
  415012:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
        result = NN_Q31_MAX;
  415016:	920b      	str	r2, [sp, #44]	@ 0x2c
    q31_t threshold = remainder_mask >> 1;
  415018:	2101      	movs	r1, #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
  41501a:	461e      	mov	r6, r3
  41501c:	469c      	mov	ip, r3
  41501e:	469a      	mov	sl, r3
  415020:	e9cd ee0c 	strd	lr, lr, [sp, #48]	@ 0x30
  415024:	e9cd 3e11 	strd	r3, lr, [sp, #68]	@ 0x44
  415028:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 41507c <arm_softmax_s8+0x131c>
  41502c:	4d10      	ldr	r5, [pc, #64]	@ (415070 <arm_softmax_s8+0x1310>)
  41502e:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 415080 <arm_softmax_s8+0x1320>
  415032:	4a10      	ldr	r2, [pc, #64]	@ (415074 <arm_softmax_s8+0x1314>)
  415034:	4c10      	ldr	r4, [pc, #64]	@ (415078 <arm_softmax_s8+0x1318>)
  415036:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
  41503a:	930a      	str	r3, [sp, #40]	@ 0x28
  41503c:	f8cd e04c 	str.w	lr, [sp, #76]	@ 0x4c
  415040:	930f      	str	r3, [sp, #60]	@ 0x3c
  415042:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
  415046:	9315      	str	r3, [sp, #84]	@ 0x54
  415048:	e6e4      	b.n	414e14 <arm_softmax_s8+0x10b4>
  41504a:	bf00      	nop
  41504c:	c0000001 	.word	0xc0000001
  415050:	2aaaaaab 	.word	0x2aaaaaab
  415054:	70f5a894 	.word	0x70f5a894
  415058:	63afbe7b 	.word	0x63afbe7b
  41505c:	4da2cbf2 	.word	0x4da2cbf2
  415060:	2f16ac6c 	.word	0x2f16ac6c
  415064:	1152aaa4 	.word	0x1152aaa4
  415068:	02582ab7 	.word	0x02582ab7
  41506c:	000afe11 	.word	0x000afe11
  415070:	001fffff 	.word	0x001fffff
  415074:	01fffff8 	.word	0x01fffff8
  415078:	0fffffe0 	.word	0x0fffffe0
  41507c:	40000100 	.word	0x40000100
  415080:	0e000018 	.word	0x0e000018
  415084:	2400      	movs	r4, #0
  415086:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  41508a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
    q31_t threshold = remainder_mask >> 1;
  41508e:	2101      	movs	r1, #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
  415090:	46a3      	mov	fp, r4
  415092:	46a2      	mov	sl, r4
  415094:	46ac      	mov	ip, r5
  415096:	462f      	mov	r7, r5
  415098:	e9cd 5417 	strd	r5, r4, [sp, #92]	@ 0x5c
  41509c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  4150a0:	e9cd 5513 	strd	r5, r5, [sp, #76]	@ 0x4c
  4150a4:	4a1c      	ldr	r2, [pc, #112]	@ (415118 <arm_softmax_s8+0x13b8>)
  4150a6:	4b1d      	ldr	r3, [pc, #116]	@ (41511c <arm_softmax_s8+0x13bc>)
  4150a8:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 415120 <arm_softmax_s8+0x13c0>
  4150ac:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 415124 <arm_softmax_s8+0x13c4>
  4150b0:	f8df e074 	ldr.w	lr, [pc, #116]	@ 415128 <arm_softmax_s8+0x13c8>
  4150b4:	9410      	str	r4, [sp, #64]	@ 0x40
  4150b6:	9516      	str	r5, [sp, #88]	@ 0x58
  4150b8:	940f      	str	r4, [sp, #60]	@ 0x3c
  4150ba:	9415      	str	r4, [sp, #84]	@ 0x54
  4150bc:	9512      	str	r5, [sp, #72]	@ 0x48
  4150be:	e4eb      	b.n	414a98 <arm_softmax_s8+0xd38>
  4150c0:	9b03      	ldr	r3, [sp, #12]
  4150c2:	2b00      	cmp	r3, #0
  4150c4:	f43f aae5 	beq.w	414692 <arm_softmax_s8+0x932>
        int32_t sum = 0;
  4150c8:	9500      	str	r5, [sp, #0]
  4150ca:	f7fe bed7 	b.w	413e7c <arm_softmax_s8+0x11c>
        int8_t max = ACT_MIN;
  4150ce:	f06f 0b7f 	mvn.w	fp, #127	@ 0x7f
  4150d2:	f7fe be96 	b.w	413e02 <arm_softmax_s8+0xa2>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
  4150d6:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
  4150da:	f77f a88d 	ble.w	4141f8 <arm_softmax_s8+0x498>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  4150de:	eb02 0380 	add.w	r3, r2, r0, lsl #2
    int32_t result = val << exp;
  4150e2:	005a      	lsls	r2, r3, #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
  4150e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
    int32_t result = val << exp;
  4150e8:	9206      	str	r2, [sp, #24]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
  4150ea:	f6ff a889 	blt.w	414200 <arm_softmax_s8+0x4a0>
  4150ee:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  4150f2:	9306      	str	r3, [sp, #24]
  4150f4:	f7ff b88b 	b.w	41420e <arm_softmax_s8+0x4ae>
    int32_t result = val << exp;
  4150f8:	00a3      	lsls	r3, r4, #2
  4150fa:	f7ff bb99 	b.w	414830 <arm_softmax_s8+0xad0>
                const int32_t res =
  4150fe:	f1a1 0380 	sub.w	r3, r1, #128	@ 0x80
                output[tail_idx + i] = (int8_t)CLAMP(res, (int32_t)ACT_MAX, (int32_t)ACT_MIN);
  415102:	2900      	cmp	r1, #0
  415104:	f47f adc2 	bne.w	414c8c <arm_softmax_s8+0xf2c>
  415108:	e5c4      	b.n	414c94 <arm_softmax_s8+0xf34>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
  41510a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
    int32_t result = val << exp;
  41510e:	005a      	lsls	r2, r3, #1
  415110:	9206      	str	r2, [sp, #24]
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
  415112:	f7ff b875 	b.w	414200 <arm_softmax_s8+0x4a0>
  415116:	bf00      	nop
  415118:	0fffffe0 	.word	0x0fffffe0
  41511c:	01fffff8 	.word	0x01fffff8
  415120:	0e000018 	.word	0x0e000018
  415124:	40000100 	.word	0x40000100
  415128:	001fffff 	.word	0x001fffff

0041512c <_Z11ei_get_datajjPf>:
0x2c2618, 0x333021, 0x343326, 0x363627, 0x3b392b, 0x3c3829, 0x3c3a29, 0x3d3b2a, 0x3d3b29, 0x3e3b31, 0x3e3b30, 0x3f3e33, 0x3f3d32, 0x3f3c34, 0x403d34, 0x3f3d37, 0x3d3a33, 0x3d3b33, 0x3f3c31, 0x3f3a34, 0x423d39, 0x454643, 0x463e3f, 0x443437, 0x443636, 0x47413e, 0x47443f, 0x49423a, 0x302826, 0x281c18, 0x2c2428, 0x3c2a1e, 0x402a17, 0x3c2415, 0x3d2418, 0x3b241f, 0x3c2321, 0x3c2323, 0x372220, 0x34231d, 0x3b2925, 0x40302e, 0x433934, 0x443a38, 0x403030, 0x423937, 0x443c37, 0x474439, 0x46423a, 0x413231, 0x392327, 0x28191c, 0x392127, 0x392226, 0x372227, 0x372125, 0x381e21, 0x371f22, 0x351d22, 0x331c21, 0x311c21, 0x321c21, 0x32181f, 0x321821, 0x301b1f, 0x301a1f, 0x2f1a20, 0x311b21, 0x2f1b21, 0x2c181f, 0x2c1920, 0x2b1a1f, 0x2a171e, 0x27151f, 0x2b1e20, 0x2b1f1f, 0x26181b, 0x25151b, 0x261518, 0x251217, 0x231216, 0x221315, 0x201014, 0x1d0f12, 0x1e1414, 0x231518, 0x221316, 0x201116, 0x201116, 0x221317, 0x221218, 0x1f1117, 0x1e1215, 0x1f1415, 0x1f1416, 0x1f1414, 0x120d08, 0x16130c, 0x1a1811, 0x1a1a12, 0x1e1d17, 0x202019, 0x24261d, 0x29281f, 0x2c2b21, 0x34332a, 0x39372d, 0x3e3b32, 0x3f3c33, 0x403f37, 0x414238, 0x44443c, 0x464239, 0x46423b, 0x46403b, 0x453f39, 0x45423e, 0x463f3f, 0x473c3d, 0x473a3b, 0x463738, 0x483c3a, 0x494842, 0x4a4a41, 0x312a29, 0x281c1a, 0x29201d, 0x3e2f21, 0x442f1d, 0x3e291a, 0x3e2421, 0x402525, 0x3e2523, 0x3d2522, 0x39241f, 0x38261e, 0x3b281f, 0x3d2926, 0x402f2e, 0x483d39, 0x46413d, 0x47413c, 0x49473d, 0x4b493b, 0x48413c, 0x433033, 0x42272d, 0x352025, 0x291c21, 0x382126, 0x3c2327, 0x372122, 0x381e20, 0x391f23, 0x381f24, 0x351d21, 0x321b1f, 0x321a20, 0x321921, 0x311a21, 0x321b20, 0x311a20, 0x311d22, 0x321d24, 0x301c21, 0x301a20, 0x2f1722, 0x2b1820, 0x2b181e, 0x29151e, 0x29151c, 0x29181d, 0x291b1e, 0x28181d, 0x27161c, 0x261518, 0x221316, 0x211015, 0x211215, 0x211213, 0x211311, 0x251619, 0x25141a, 0x241519, 0x231419, 0x221318, 0x221217, 0x1f1119, 0x1e1017, 0x1d1215, 0x201416, 0x1f1518, 0xb0902, 0x80a05, 0xb0c06, 0x60804, 0xe0701, 0xe0802, 0xc0905, 0xc0b07, 0xf0a06, 0x110c07, 0x140f0a, 0x18120e, 0x1b1611, 0x1e1a17, 0x221f1d, 0x252422, 0x2a2724, 0x2d2d28, 0x332f2c, 0x393430, 0x3e3534, 0x423637, 0x473e3a, 0x48433f, 0x4c4441, 0x4d423f, 0x4e433e, 0x4f413c, 0x332827, 0x281e1b, 0x2d221c, 0x453423, 0x483724, 0x432b1e, 0x422724, 0x442529, 0x412426, 0x3f2425, 0x3b231f, 0x3b2620, 0x3e2822, 0x422a28, 0x44262d, 0x46282f, 0x433132, 0x483c39, 0x4e4c3d, 0x4c4941, 0x493f3d, 0x462f33, 0x42282d, 0x44272f, 0x372127, 0x2c1d20, 0x2f1f22, 0x33201f, 0x3a221e, 0x3c2225, 0x3c2025, 0x392125, 0x351d22, 0x341a21, 0x351923, 0x351d22, 0x351e21, 0x351e22, 0x331f24, 0x331e25, 0x341d23, 0x321e22, 0x2e1b23, 0x2a1821, 0x2a1a1e, 0x2c1b1e, 0x2d171f, 0x2b1a1d, 0x2c191c, 0x28191d, 0x28191e, 0x271819, 0x241116, 0x210f14, 0x211415, 0x221716, 0x231517, 0x28161b, 0x261719, 0x25121a, 0x231119, 0x221119, 0x231219, 0x211217, 0x201117, 0x1f1416, 0x201617, 0x21191d, 0x80a04, 0x50a08, 0x50b09, 0x90b09, 0xd0d06, 0x110d06, 0x120d07, 0x120b08, 0x120c07, 0x110c07, 0x140c07, 0x160b04, 0x150b04, 0x110b07, 0x130a07, 0x130a04, 0x130b05, 0x130d07, 0x120f08, 0x150e0b, 0x19100c, 0x1d120e, 0x221610, 0x271b15, 0x2b1f1a, 0x281f1d, 0x302220, 0x342522, 0x271b19, 0x2d2019, 0x30221a, 0x433023, 0x483628, 0x452926, 0x442729, 0x49282f, 0x492530, 0x44232a, 0x3f2324, 0x412826, 0x422b26, 0x452b2b, 0x472c30, 0x482b31, 0x45272d, 0x462c32, 0x4e4742, 0x4b443e, 0x483d3b, 0x483738, 0x452e31, 0x43292f, 0x43252c, 0x3f252a, 0x382126, 0x2c1b1e, 0x291b1b, 0x362124, 0x402425, 0x3c2125, 0x341e1f, 0x361a23, 0x391f25, 0x382123, 0x382024, 0x381f24, 0x372027, 0x361f26, 0x371e22, 0x351e24, 0x311d24, 0x2e1821, 0x2d1a1e, 0x2a1a1e, 0x29181e, 0x291b1c, 0x2b191d, 0x2c1a1e, 0x2a1a1c, 0x2a1d18, 0x281a17, 0x261417, 0x231416, 0x231417, 0x261619, 0x29181b, 0x26171a, 0x251319, 0x261419, 0x27151c, 0x201519, 0x211519, 0x23161c, 0x23181c, 0x271d20, 0x2a2827, 0x70905, 0x60906, 0x60a07, 0x70a07, 0x60b08, 0x90c0a, 0xc0d09, 0xf0c0a, 0xe0c08, 0xd0d0a, 0xe0d0a, 0x120e0a, 0x110f0b, 0x110f0d, 0x130f0e, 0x140f0b, 0x16100a, 0x17100b, 0x17100a, 0x17100b, 0x19100b, 0x1a110a, 0x1c0f06, 0x1b0f06, 0x170d07, 0x100a05, 0x180a01, 0x1e0c03, 0x1e0e07, 0x1c0e07, 0x1d0e06, 0x1d1109, 0x20120b, 0x22120e, 0x251411, 0x281617, 0x2a171a, 0x2c191b, 0x2c1b19, 0x32221f, 0x392822, 0x402a2a, 0x442c2f, 0x462d33, 0x452931, 0x4a363a, 0x514645, 0x4e3e3e, 0x4b2e38, 0x4c383a, 0x4a3c3b, 0x4a383a, 0x482f34, 0x442930, 0x42292e, 0x3f2327, 0x361e23, 0x2c1c1f, 0x2e201f, 0x3b2324, 0x3a221f, 0x362121, 0x372023, 0x351d20, 0x351f21, 0x362024, 0x382428, 0x362227, 0x352125, 0x352025, 0x351d23, 0x321c21, 0x32221e, 0x2c2119, 0x281d19, 0x261c1a, 0x281b1d, 0x2d1a1f, 0x2c1a1d, 0x2b1f1a, 0x291e16, 0x281917, 0x251717, 0x261618, 0x27161a, 0x2a181c, 0x28181b, 0x28161b, 0x25131a, 0x170f12, 0x90a09, 0x60a0a, 0xb0e0d, 0xd0f0f, 0x111315, 0x191b1c, 0xa0a05, 0x90a05, 0xa0b05, 0x80b08, 0x70a08, 0x70b08, 0xb0e0b, 0x14110c, 0x17100d, 0x17100b, 0x19130d, 0x19130e, 0x171310, 0x191412, 0x191410, 0x1a1312, 0x1c1513, 0x1c1512, 0x1c1511, 0x1b1510, 0x181411, 0x151210, 0x13110c, 0x10110f, 0xc1110, 0x100f0b, 0x1d0f05, 0x251207, 0x1e1209, 0x1b120a, 0x211109, 0x231004, 0x240f06, 0x220f04, 0x200e01, 0x200e03, 0x1c0d05, 0x140e09, 0x100c09, 0x150c08, 0x140f0a, 0x15100f, 0x171211, 0x1a1312, 0x181212, 0x211c1c, 0x2c2422, 0x322626, 0x342025, 0x392328, 0x3d272c, 0x443033, 0x473639, 0x463337, 0x462d33, 0x44262d, 0x45252b, 0x422829, 0x312122, 0x2c1c20, 0x37221f, 0x3d2422, 0x391d22, 0x351920, 0x351920, 0x362022, 0x382624, 0x372326, 0x371f25, 0x351f24, 0x331a21, 0x321c21, 0x32261f, 0x2f241a, 0x29201a, 0x25191b, 0x29191d, 0x2d1820, 0x2d1a1f, 0x2c2019, 0x2a1d13, 0x281b15, 0x271918, 0x271619, 0x29171c, 0x2d181e, 0x2b191e, 0x201318, 0xd0c0b, 0x70a08, 0x80908, 0x40707, 0x80c05, 0x30805, 0x705, 0x10805, 0x130a04, 0x140a06, 0x120c07, 0x130b07, 0x150a06, 0x140b07, 0x160c08, 0x190e0a, 0x1a0e0c, 0x190e09, 0x1b0f09, 0x1c110e, 0x1b130d, 0x1c1410, 0x201613, 0x221814, 0x281914, 0x291c19, 0x2b201c, 0x31211d, 0x32211e, 0x291f1c, 0x201a18, 0x1f1716, 0x1a1615, 0x191513, 0x1b1511, 0x1a1512, 0x191411, 0x14120d, 0x17110d, 0x18110c, 0x1a110d, 0x1d110c, 0x1e1108, 0x1e1109, 0x1c110b, 0x18100c, 0x180f0b, 0x1b0d06, 0x1d0d04, 0x1b0d04, 0x1a0d04, 0x190b05, 0x170b03, 0x140a04, 0x120a05, 0x110a05, 0xf0b08, 0x150b08, 0x160d09, 0x160d0b, 0x19100d, 0x1f1614, 0x25191b, 0x27181a, 0x29181a, 0x2d1b1d, 0x33211e, 0x331d1f, 0x281a1a, 0x312121, 0x3d1d26, 0x381923, 0x391c24, 0x3d2823, 0x3d2a23, 0x3a2225, 0x381f25, 0x371f27, 0x381c29, 0x351e25, 0x35251f, 0x31221e, 0x2c1d1f, 0x29161d, 0x28161e, 0x2f1920, 0x2f1f1d, 0x2d2117, 0x2b1f12, 0x281915, 0x261819, 0x26171b, 0x2b1a1e, 0x2d1a1f, 0x1b1115, 0x9090a, 0x80a08, 0x90b0a, 0x60909, 0x60b09, 0x40807, 0x30807, 0x50807, 0x50907, 0x80a06, 0x90a07, 0xb0b07, 0xd0b07, 0xe0c07, 0xf0c08, 0x120d08, 0x130d09, 0x160c0b, 0x170d09, 0x180d09, 0x1b0d0a, 0x1c0e0c, 0x1c0f0b, 0x1d100b, 0x1d110f, 0x201210, 0x201212, 0x211210, 0x25130f, 0x281511, 0x281613, 0x281713, 0x2b1a16, 0x2c1915, 0x2c1a12, 0x2d1910, 0x2e1a13, 0x241511, 0x19120e, 0x15120f, 0x13120f, 0x18100e, 0x170f0c, 0x170d0c, 0x140d0a, 0x150e09, 0x150d09, 0x140d0a, 0x140d0a, 0x160d08, 0x150d07, 0x160c07, 0x170c05, 0x180d07, 0x190d05, 0x180e07, 0x160f09, 0x160c08, 0x190a06, 0x160c06, 0x130c06, 0x120a05, 0x100b07, 0x100908, 0x100a08, 0xd0c09, 0xd0d0b, 0xf0c07, 0x120c08, 0x130c0b, 0x110e0b, 0x181011, 0x1c1013, 0x221516, 0x281d17, 0x292019, 0x2e1e1d, 0x321d21, 0x371f25, 0x391f26, 0x382125, 0x392426, 0x392325, 0x351724, 0x311422, 0x31191f, 0x311e20, 0x32241f, 0x2f2216, 0x2b1f13, 0x2a1a15, 0x281a19, 0x2b1b1d, 0x241719, 0x100d0e, 0x50908, 0xa0b08, 0x90a09, 0x90b08, 0xa0d0b, 0x50904, 0x50804, 0x40705, 0x40807, 0x40707, 0x10705, 0x20805, 0x40906, 0x20a06, 0x40905, 0x40b06, 0x30c07, 0x50d07, 0x60e08, 0x70f08, 0x80f09, 0xa100a, 0xb120d, 0xe130f, 0x101510, 0x151713, 0x1b1c19, 0x1d1c19, 0x221e1b, 0x272524, 0x241e1c, 0x231b1a, 0x221816, 0x201414, 0x1f120f, 0x20110d, 0x20100d, 0x21100c, 0x200f0d, 0x200e0a, 0x1d100a, 0x1c0e0e, 0x1d0e08, 0x1b0f0a, 0x1c0f0d, 0x1d0f0a, 0x1d100b, 0x1b0f08, 0x180e0a, 0x160d08, 0x140d08, 0x120d0b, 0xf0c0a, 0x100b09, 0x100b09, 0xf0c08, 0x100c08, 0x110b08, 0x120c06, 0x120c07, 0x120c07, 0x120d09, 0x110c07, 0xf0d0a, 0x110e0b, 0x130e0b, 0x110f0d, 0xf0f0c, 0x110c08, 0x110b08, 0xf0c08, 0xe0c08, 0xd0b09, 0xe0b08, 0x110d08, 0x90907, 0x90b0b, 0xd0d0d, 0xd0d0b, 0xf0d0c, 0x14100e, 0x1b1110, 0x1d1413, 0x1f1516, 0x231219, 0x26131a, 0x29161b, 0x2d1d1f, 0x2f221d, 0x2f221b, 0x2e1f17, 0x2d1b18, 0x2a1b18, 0x1a1513, 0x80a0a, 0x40906, 0x70a09, 0x80c09, 0xb0e0b, 0xb0f0c, 0x70c0a, 0x50906, 0x70807, 0x60806, 0x40805, 0x40706, 0x20705, 0x20804, 0x30905, 0x20c07, 0x30a07, 0x50c08, 0x9100c, 0x9100e, 0x5100c, 0x5100a, 0x50f0b, 0x41009, 0x21107, 0x21307, 0x21409, 0x21409, 0x4150b, 0x61710, 0xb1b13, 0x13201f, 0x131e1e, 0x131c1b, 0x121918, 0x131717, 0x121616, 0x111315, 0x131211, 0x121110, 0x13110f, 0x15100e, 0x18100d, 0x190f0d, 0x1b0f0a, 0x1b0e0b, 0x1c0e0c, 0x200f10, 0x1f0f0d, 0x1b0e0d, 0x1d0f0c, 0x1d0d09, 0x1b0d0c, 0x1b0e0b, 0x1a0d08, 0x180c0b, 0x170c09, 0x150c0a, 0x140c0a, 0x130b09, 0x110a09, 0x110b09, 0x110b06, 0x130a07, 0x120a07, 0xf0b08, 0xd0b09, 0xd0b09, 0xd0c07, 0xc0c07, 0xd0b09, 0xd0c08, 0xd0c08, 0xc0c0a, 0xc0c09, 0xd0b09, 0xf0c08, 0xb0b08, 0xb0c0a, 0xb0e0c, 0xb0c0a, 0xc0b09, 0xa0a07, 0xa0a05, 0xa0904, 0x90906, 0x90b07, 0xa0b08, 0xb0c0b, 0xd0d0b, 0x100f0b, 0x14120f, 0x181411, 0x1c1413, 0x14100d, 0x40907, 0x40907, 0x70b08, 0xa0e0b, 0xc0f0c, 0x80c0a, 0x50b09, 0x40a08, 0x80d0a, 0xb0c08, 0xa0905, 0xa0906, 0x90904, 0x10805, 0x10805, 0x20804, 0x40b05, 0x40b08, 0x60c08, 0xc120d, 0xb130d, 0x9110d, 0x8100d, 0x9110b, 0x71309, 0x51607, 0x51706, 0x41907, 0x31b05, 0x31907, 0x31a08, 0x41807, 0x7150c, 0x6140a, 0x41208, 0x60f0b, 0x50f0a, 0x60e0b, 0x60f0b, 0x70f0b, 0x60f0b, 0x60f0a, 0x40e0b, 0x60e0b, 0x60f0a, 0x80e0b, 0xa0d0b, 0xd0c0c, 0x110d0d, 0x140d0c, 0x150c0b, 0x160d0b, 0x180d0b, 0x1a0d0b, 0x1b0d0b, 0x1b0e0a, 0x1a0e09, 0x1b0d0a, 0x1b0d0b, 0x1c0c0b, 0x1b0c0a, 0x1b0d08, 0x1a0d08, 0x1a0c08, 0x190b08, 0x170b09, 0x160c0a, 0x130b09, 0x130a09, 0x130a06, 0xf0a08, 0xe0a08, 0xd0a05, 0xc0a07, 0xb0a05, 0xa0a05, 0xa0906, 0x80a06, 0x80a07, 0x90b07, 0x90b07, 0x90b08, 0xa0b08, 0xa0b08, 0xa0b07, 0xa0b07, 0xa0b08, 0xa0b09, 0x90b0a, 0x90b08, 0x80a07, 0x80a07, 0x80a08, 0x80b08, 0x90b0a, 0x70a08, 0x40a08, 0x40b08, 0xe100c, 0x10120e, 0xc100c, 0x101210, 0x90c0b, 0x80b09, 0x80a08, 0x40807, 0x50906, 0x50805, 0x70805, 0x10805, 0x20804, 0x20806, 0x20a06, 0x30a07, 0x30c09, 0x8100a, 0x9130e, 0x9120d, 0x90f0b, 0x9100b, 0x8100a, 0x41408, 0x51808, 0x31c07, 0x41c08, 0x61c08, 0x61c09, 0x41c0b, 0x51d0d, 0x5190e, 0x5160b, 0x81409, 0x9110e, 0xa100c, 0xd120e, 0xd120f, 0xd130f, 0xc120e, 0x40e0c, 0x40f0b, 0x40d0a, 0x50c0a, 0x50b09, 0x50b09, 0x60a0a, 0x80a0a, 0x80b0b, 0x90b0b, 0xe0c0c, 0x110e0d, 0x110e0e, 0x110d0e, 0x110d0c, 0xf0c0c, 0xf0d0c, 0xf0d0c, 0x100d0c, 0x100c0a, 0x110d0b, 0x110d0b, 0x130c0a, 0x150c08, 0x160c09, 0x170c08, 0x180c0a, 0x190c08, 0x190c09, 0x170c08, 0x180c09, 0x170b08, 0x160c09, 0x140c0a, 0x120b08, 0x120a08, 0x100a06, 0xd0b07, 0xd0a08, 0xb0a08, 0x90a06, 0x70a06, 0x70a07, 0x70a06, 0x80a07, 0x70907, 0x70a08, 0x80a08, 0x80908, 0x70a08, 0x80b07, 0x80b09, 0x90d0a, 0x80c09, 0x30908, 0xa100e, 0x171b19, 0x101410, 0x1d2626, 0x1f2423, 0xa0c0b, 0x80b0a, 0x70a09, 0x10807, 0x10906, 0x20806, 0x20807, 0x10805, 0x10805, 0x20905, 0x20906, 0x10906, 0x20b09, 0x30f06, 0x61306, 0x7140b, 0x8120c, 0x9120d, 0x80f0d, 0x80f0d, 0x6120b, 0x4130b, 0x41809, 0x41d07, 0x41c0a, 0x61a0b, 0x51a11, 0x51710, 0x7150b, 0x8140b, 0x9110d, 0x7110e, 0x8120f, 0xd1512, 0x101714, 0xd1411, 0x50f0d, 0x7110e, 0x7100c, 0xa0d0c, 0x70b09, 0x80b0b, 0xd0e0f, 0x111113, 0xd0e0f, 0x111212, 0x1a1917, 0x191616, 0x181616, 0x1b1916, 0x1a1615, 0x13110f, 0xf0e0d, 0xe0e0c, 0xe0e0b, 0xd0e0c, 0xd1011, 0xc0f10, 0x90d0b, 0x80d0b, 0x80c0c, 0x70c0a, 0x90b0a, 0xb0b0a, 0xb0b0b, 0xd0b0a, 0xd0b09, 0xe0b09, 0x100c0a, 0x120c0b, 0x130c0a, 0x140c09, 0x130c0a, 0x140d0c, 0x170d0d, 0x150d0c, 0x130d0b, 0x130c0c, 0x110c0a, 0xf0a08, 0xf0a09, 0xe0b08, 0xc0a08, 0xb0a09, 0x90a07, 0x70a09, 0x60b09, 0x80b09, 0x70c09, 0x60b0a, 0x40b09, 0x80e0b, 0xa0d0b, 0x111615, 0x151917, 0x80b09, 0x50907, 0x50c0a, 0x70a08, 0x20807, 0x20808, 0x20807, 0x10906, 0x40706, 0x30805, 0x30905, 0x10906, 0x10905, 0x50b07, 0xa100b, 0x61107, 0x61207, 0x7120a, 0x6140b, 0x61208, 0x9120c, 0x7110d, 0x70e0d, 0x5100c, 0x4130c, 0x71210, 0xb1310, 0xb1311, 0x7140e, 0x7150e, 0x9140d, 0xb140d, 0x91511, 0xb1412, 0xd1614, 0x111715, 0xa1411, 0x6100d, 0x5110d, 0x7120d, 0x111212, 0x111312, 0x121214, 0x171716, 0x252421, 0x2f2d2b, 0x383634, 0x393532, 0x342e2c, 0x2c2824, 0x2b2522, 0x262120, 0x26201d, 0x241e1c, 0x181717, 0x10130f, 0xf1410, 0x101513, 0x121412, 0x11140f, 0x10150f, 0xc130f, 0xa1211, 0xd110f, 0xd100f, 0xc0f0e, 0xa0d0c, 0x90c0b, 0x60e0a, 0x50b09, 0x50b09, 0x70b0a, 0x80b09, 0x60b08, 0x70b09, 0x90b09, 0xb0b09, 0xd0b08, 0xd0a0a, 0xd0c09, 0xf0c08, 0xf0d0a, 0x110f0d, 0x130c0b, 0x120c09, 0x110b09, 0x110909, 0x110d0b, 0x100d0b, 0xf0c0a, 0xd0c0a, 0xa0c0a, 0x50b08, 0x40b08, 0x50a07, 0x50807, 0x50a07, 0x50a06, 0x60a08, 0x70b09, 0x20806, 0x20906, 0x20806, 0x20806, 0x30805, 0x30705, 0x10905, 0x20807, 0x20907, 0x70c08, 0x10140e, 0x70f0a, 0x70f0a, 0x90e0b, 0x7100a, 0x31407, 0x41607, 0x51408, 0x71409, 0x81209, 0x71208, 0x7150a, 0x8150c, 0x7160c, 0x7160d, 0x7150c, 0x6150b, 0x7150e, 0x6140e, 0xc1410, 0xe1613, 0xe1514, 0x7130f, 0x7120e, 0xa1610, 0x111512, 0x1a1816, 0x232320, 0x2d2c29, 0x211f1e, 0x21221f, 0x302e2c, 0x443e3a, 0x4b463f, 0x413a37, 0x433d38, 0x43403c, 0x34312e, 0x262521, 0x2a2423, 0x201e1e, 0x131615, 0x111412, 0x101311, 0xf100e, 0x12120d, 0x12130d, 0x11130d, 0x101310, 0x111511, 0x101511, 0x101311, 0xe1210, 0xd130f, 0xd100d, 0x90e0a, 0x50c09, 0x90f0e, 0x60d0b, 0x40b09, 0x50a09, 0x50a09, 0x50c0a, 0x50d0b, 0x30c09, 0x40b09, 0x40b08, 0x80b08, 0xc0b09, 0xa0b09, 0xb0d0a, 0x100f0e, 0x131312, 0x100e0b, 0xd0e0b, 0xf0d0d, 0x110d0a, 0xe0c0b, 0x60a08, 0x60b09, 0x70a09, 0x60a08, 0x50a08, 0x50a06, 0x80908, 0x80b08, 0x10907, 0x10908, 0x20806, 0x10807, 0x40807, 0x30805, 0x20905, 0x10a07, 0x10b07, 0x30c07, 0x41509, 0x30e06, 0x40c05, 0x30f05, 0x40e09, 0x31206, 0x31506, 0x31608, 0x31709, 0x41607, 0x31708, 0x5140a, 0x6140a, 0x5150d, 0x6140e, 0x7150a, 0x8130d, 0x8130b, 0x7140a, 0xb120d, 0xb120e, 0xa110e, 0x5130e, 0xf1712, 0x161817, 0x1a1a1a, 0x1c1c1a, 0x292724, 0x3e3c37, 0x383432, 0x2e2827, 0x36302d, 0x4b4541, 0x4d4842, 0x3e3832, 0x4b4640, 0x4e4a44, 0x45413a, 0x3e3934, 0x35312e, 0x322e2a, 0x1f1f1e, 0x111414, 0xe110f, 0xc0e0c, 0xb0d0c, 0xa0d0b, 0xb0e0b, 0xe120f, 0xe130e, 0xd1410, 0xe120e, 0xd100d, 0xb100c, 0x70d0b, 0x40c0a, 0x50b0a, 0x50b0b, 0x40b0a, 0x50c08, 0x60c08, 0x50c0b, 0x40d0a, 0x60c0a, 0x40c0a, 0x40c09, 0x60b0a, 0x90b09, 0xb0c09, 0xd100d, 0x131513, 0x181a19, 0x212624, 0x1b1e1c, 0x121514, 0xa0f0d, 0x90e0d, 0x80e0b, 0x50a07, 0x60a08, 0x60a09, 0x60a09, 0x60a07, 0x50a07, 0x50b09, 0x70b09, 0x20807, 0x20806, 0x20807, 0x20807, 0x30804, 0x30804, 0x20806, 0x30706, 0x30806, 0x20a04, 0x20f04, 0x20e07, 0x31105, 0x31405, 0x21605, 0x21804, 0x21904, 0x31c05, 0x31c07, 0x11d08, 0x21d09, 0x31908, 0x5170c, 0x4170b, 0x6160b, 0x81409, 0x6120a, 0x7110a, 0x90f0c, 0x90f0d, 0x9100d, 0xb110f, 0x101514, 0x171816, 0x161615, 0x252321, 0x43413c, 0x3e3b38, 0x332e2c, 0x484541, 0x45403c, 0x56534d, 0x46413e, 0x3c3533, 0x453e3a, 0x534c48, 0x554d47, 0x4a443e, 0x47403a, 0x3f3b37, 0x363430, 0x302c2a, 0x191717, 0xb0e0d, 0xb0d0c, 0x90c0b, 0xd0c0c, 0x10110f, 0x10120f, 0xe120e, 0xe110d, 0xb0d0a, 0x90e0b, 0x60d0c, 0x70c0c, 0xc0e19, 0x40c0f, 0x50b08, 0x50c09, 0x50c09, 0x50c09, 0x50c0b, 0x50c0b, 0x50c0a, 0x50c0b, 0x50c0a, 0x60b08, 0x60b09, 0xe110d, 0x121413, 0xe1111, 0xd1512, 0x242e2b, 0x212828, 0x13191a, 0x50805, 0x70c09, 0x90d09, 0x40a07, 0x60b06, 0x50a07, 0x50a09, 0x60a08, 0x60907, 0x50a09, 0x60b09, 0x20907, 0x20807, 0x20807, 0x20807, 0x30703, 0x40704, 0x50605, 0x60604, 0x40604, 0x30905, 0x21303, 0x11204, 0x41305, 0x31705, 0x21907, 0x31905, 0x21a04, 0x31b05, 0x21d03, 0x21c07, 0x31c09, 0x51c07, 0x71a0a, 0x61907, 0x81905, 0xa1607, 0xb1706, 0xc1509, 0xf1208, 0xf1208, 0x10110a, 0x111310, 0x171715, 0x1a1a19, 0x1f1e1c, 0x413e3a, 0x5e5a56, 0x3a3634, 0x3f3935, 0x4f4d4b, 0x4a4743, 0x433b37, 0x3a2f2a, 0x433933, 0x493f3b, 0x423634, 0x5a4e45, 0x524640, 0x493f3a, 0x413e38, 0x3d3835, 0x383531, 0x262323, 0x131211, 0xe0f0c, 0xe0f0e, 0x111311, 0x121411, 0x111310, 0xf130e, 0xb0e0b, 0x90d0d, 0x70e0b, 0x70c0b, 0x70b0b, 0x80c11, 0x60c10, 0x60b09, 0x50c09, 0x30c09, 0x40c0b, 0x60c0a, 0x60c0b, 0x40d0b, 0x40d0b, 0x50c0a, 0x30d0a, 0x40d0b, 0x60d0b, 0x50b0b, 0x70d0c, 0x70e0c, 0x90f0d, 0x60a08, 0x50a07, 0x40a07, 0x60c09, 0xa0d0a, 0x50a06, 0x50b09, 0x70b09, 0x70c0a, 0x50a09, 0x40a07, 0x50b08, 0x80b09, 0x30806, 0x20806, 0x20806, 0x20806, 0x40804, 0xd0503, 0x120304, 0xd0405, 0x60604, 0x40605, 0x11503, 0x11702, 0x21105, 0x21606, 0x31c07, 0x11e08, 0x11d04, 0x21b07, 0x21d07, 0x31e06, 0x31808, 0x41b0c, 0x31d0c, 0x31909, 0x4180b, 0x5180b, 0x71608, 0x71508, 0x91409, 0xc1207, 0x13140d, 0x1c1c19, 0x232220, 0x2f2c29, 0x3d3b35, 0x5c5752, 0x595654, 0x3f3a37, 0x5a5450, 0x635e5c, 0x5d5650, 0x5e514d, 0x5f4d42, 0x6b5248, 0x6d5448, 0x6a5247, 0x664f43, 0x796157, 0x6d5b52, 0x665b53, 0x524c47, 0x423d38, 0x34312e, 0x22201f, 0x141412, 0x151512, 0x141512, 0x121311, 0x111210, 0xf110e, 0xb0f0d, 0xa0e0c, 0x60c0c, 0x80c09, 0x70c0b, 0x60c09, 0x70b09, 0x70a09, 0x50b09, 0x50b09, 0x50d0b, 0x50d0b, 0x50c0b, 0x60c0d, 0x60c0b, 0x30c0b, 0x30c0c, 0x30c0b, 0x20b0a, 0x20b09, 0x50c0a, 0x70c09, 0x50b0a, 0x50b09, 0x60b08, 0x40b07, 0x70c0a, 0xb0c0b, 0x60a08, 0x50b09, 0x70b09, 0x70c0a, 0x50b09, 0x50a08, 0x50b06, 0x80c09, 0x20907, 0x20907, 0x20906, 0x20805, 0x40a05, 0xb0605, 0x1b0205, 0x1a0205, 0xd0504, 0x40705, 0x40d05, 0x11e04, 0x21108, 0x21207, 0x61906, 0x71b0a, 0xa1f0d, 0xb200f, 0x71d0d, 0x51c08, 0x51a09, 0x41b0b, 0x61e0b, 0x51c09, 0x21a0a, 0x3190b, 0x6170a, 0x7170b, 0xa160e, 0x121a13, 0x1e1e1b, 0x292624, 0x2f2926, 0x413c38, 0x423d36, 0x4b4741, 0x595857, 0x514b49, 0x69605a, 0x776c65, 0x7c6a60, 0x947d72, 0xa5877b, 0xb89689, 0xbb9686, 0xb89486, 0xad887c, 0xae8c80, 0xa18176, 0x8e7568, 0x7b6d62, 0x625a54, 0x4d4945, 0x3b3735, 0x1b1918, 0x12100e, 0x11110e, 0xe0f0d, 0xf0d0c, 0xa0d0b, 0x80e0c, 0xc110f, 0x90e0c, 0x80c09, 0x80b0a, 0x70b0b, 0x60b09, 0x60a09, 0x60a0a, 0x70b0a, 0x70c0d, 0x40d0b, 0x50d0b, 0x60c0a, 0x40b0a, 0x30b09, 0x40b09, 0x30b0a, 0x20c0a, 0x40a08, 0x40a09, 0x70b0b, 0x50b0a, 0x60b09, 0x70b08, 0x50b09, 0x80c0b, 0xb0d0c, 0x60a09, 0x60c09, 0x60b09, 0x60b09, 0x60b09, 0x70908, 0x40b08, 0x80c09, 0x30a07, 0x20a08, 0x20906, 0x20806, 0x50904, 0x40a03, 0x140505, 0x240005, 0x180306, 0x80807, 0x30704, 0x12003, 0x61c09, 0x111710, 0x1e2219, 0x202118, 0x1a1f17, 0x171d16, 0x151b14, 0xe1a0f, 0x71a0c, 0x51a0c, 0x81a0c, 0xc1b0e, 0xb190d, 0x9160c, 0xb170f, 0x141a14, 0x1c1e18, 0x282622, 0x272522, 0x292520, 0x291f18, 0x271e19, 0x342b26, 0x413832, 0x584d48, 0x66574e, 0x857268, 0x9a7f71, 0xba998a, 0xd1ad9e, 0xd7ad9e, 0xce9f8e, 0xc79887, 0xbf917f, 0xbb8d7b, 0xae8370, 0xac8372, 0xaf8b7b, 0x947a6e, 0x796c64, 0x5d5653, 0x4e4b45, 0x343534, 0x121111, 0xf0e0c, 0x110e0d, 0xf0d0c, 0x70c0b, 0x80c0c, 0xa0e0c, 0x90e0c, 0x80c0b, 0x60c0b, 0x70a0a, 0x60a0a, 0x50b0a, 0x60b0a, 0x60c0a, 0x40b0a, 0x30b0a, 0x40c09, 0x40b0a, 0x40b09, 0x50b0a, 0x40b0a, 0x30b09, 0x20c0a, 0x30b09, 0x60a0a, 0x80b0b, 0x70a0a, 0x80b09, 0x60c09, 0x60b09, 0x80c0b, 0xb0e0c, 0x50d0d, 0x80e0f, 0x70b09, 0x70a08, 0x60a08, 0x50a09, 0x50a09, 0x90d0a, 0x30a08, 0x20908, 0x20a08, 0x20a07, 0x40a02, 0x40a04, 0x90905, 0x1d0306, 0x1e0306, 0xd0806, 0xa0c0a, 0x161e10, 0x242c1b, 0x201e19, 0x1f1e19, 0x181915, 0x131410, 0x151411, 0x151711, 0x15170f, 0x10180e, 0xd1d0e, 0x71e0d, 0x91f0f, 0xc1c0f, 0xb1a0f, 0xe1a12, 0x23241b, 0x2b2722, 0x292321, 0x241f1a, 0x261e1b, 0x2a1c19, 0x42312c, 0x543f36, 0x554137, 0x5c4137, 0x876858, 0xb39182, 0xd5b1a1, 0xe0b5a4, 0xddaa9a, 0xd6a08a, 0xd29985, 0xcb907b, 0xc38971, 0xbb856d, 0xb3816c, 0xa97b68, 0xad8471, 0xa58574, 0x8c786b, 0x685c54, 0x564f48, 0x46413d, 0x1f1e1d, 0x100d0c, 0x130f0e, 0xf0c0d, 0x90c0c, 0x90d0c, 0xa0c0b, 0x90b0b, 0x70b0a, 0x60c0b, 0x60d0c, 0x50c0a, 0x50c08, 0x70c0a, 0x90e0c, 0x80d0c, 0x90d0b, 0x70d0c, 0x90d0c, 0x80c0b, 0x50d0d, 0x60e0b, 0x40c09, 0x50b0a, 0x30b0a, 0x50b09, 0x80c0b, 0x60c0b, 0x70c0a, 0x70c0a, 0x60c0a, 0x90d0d, 0xc0f0d, 0x70c0b, 0x60c0a, 0x80b08, 0x80a08, 0x50a08, 0x50b08, 0x70a08, 0x90c09, 0x50a0a, 0x20a07, 0x20b08, 0x30a07, 0x30b03, 0x40b04, 0x40b06, 0xe0806, 0x190507, 0x1c120f, 0x26241c, 0x25221d, 0x201b19, 0x1b1914, 0x19170f, 0x19140d, 0x1b160e, 0x1e1a16, 0x201e19, 0x201f1d, 0x1d1c1b, 0x141512, 0x131711, 0x171f15, 0xe1d15, 0xc1a11, 0x151e14, 0x333126, 0x332c25, 0x312a23, 0x2c2420, 0x261b17, 0x452f28, 0x70564d, 0x735a51, 0x725549, 0x937064, 0xc59f90, 0xdeb5a5, 0xdfb09f, 0xdba690, 0xdda38b, 0xdba089, 0xd89d83, 0xd4977d, 0xce9278, 0xc78c71, 0xba846d, 0xae7d69, 0xb1836f, 0xae8674, 0x997d70, 0x6f6057, 0x504640, 0x423c38, 0x2c2b29, 0x111112, 0xf0d0d, 0xf0c0d, 0xc0e0e, 0x90c0c, 0x90c0c, 0x80c0c, 0x70e0c, 0x80f0e, 0x90f0e, 0xa0e0e, 0xa0f0d, 0xa0e0b, 0xd100e, 0xf1211, 0xf1312, 0xc1110, 0xa0f0d, 0xb0f0f, 0xd1211, 0xb0f0f, 0x90e0d, 0x50c0a, 0x50b0a, 0x50b0a, 0x70d0b, 0x70c0a, 0x70d0b, 0x80c0a, 0x60c09, 0x90d0c, 0xd100c, 0x90b0a, 0x70c08, 0x70b08, 0x60b09, 0x50b08, 0x60b08, 0x60b08, 0xa0d0b, 0x40a09, 0x30a09, 0x20907, 0x10806, 0x40a04, 0x60a05, 0x60a06, 0x90b0a, 0x201613, 0x2f231b, 0x27201a, 0x231c14, 0x2e231a, 0x35271d, 0x403830, 0x505049, 0x616e6c, 0x566c71, 0x434f56, 0x3c474f, 0x2c343b, 0x272c30, 0x292c30, 0x272626, 0x282623, 0x1c201a, 0x1c2118, 0x302d24, 0x373029, 0x362b27, 0x45362e, 0x51463e, 0x6a544a, 0x9e7d6e, 0xad877b, 0xb58e80, 0xd1a594, 0xe2b09d, 0xdea993, 0xdda48f, 0xdea58d, 0xe1a68d, 0xe0a68d, 0xdfa68c, 0xdba184, 0xd59a7f, 0xd1967a, 0xc5896e, 0xb57e67, 0xb47e67, 0xb27f6b, 0x997565, 0x6c5448, 0x48372f, 0x403633, 0x353030, 0x1a1818, 0x150d0d, 0x120f0e, 0xc0e0f, 0xb0d0d, 0xa0e0b, 0xa0c0b, 0x90d0d, 0xc0f0f, 0xd0f0f, 0xd100f, 0xc100f, 0xe100d, 0x141412, 0x1b1b19, 0x1a1918, 0x191916, 0x191a18, 0x161716, 0x121311, 0x111412, 0x121413, 0xe0f0f, 0x90d0b, 0x80c0b, 0x90e0c, 0x90e0c, 0x80e0c, 0x70d0b, 0x70c0a, 0x80e0d, 0xd0f0f, 0xa0c0b, 0x90b09, 0x70b09, 0x70b09, 0x80a09, 0x70b0a, 0x60b0a, 0xa0d0b, 0x30a08, 0x10908, 0x20807, 0x30905, 0x60a06, 0x60b06, 0xb0d0a, 0x261e15, 0x463520, 0x402c1e, 0x3f2b1d, 0x533f29, 0x483627, 0x2e2219, 0x474745, 0x585f60, 0x5b6163, 0x444140, 0x332f2e, 0x322f2b, 0x34312e, 0x3a3937, 0x464b4b, 0x404c50, 0x3a3d41, 0x3e3d3b, 0x2e2c27, 0x292520, 0x2b2521, 0x392d28, 0x48372e, 0x716159, 0x9b8377, 0xb88e7b, 0xce9583, 0xd69f8d, 0xdda28e, 0xe1a28c, 0xe1a68e, 0xe2aa94, 0xe4ad99, 0xe6b09d, 0xe7b09b, 0xe5ab93, 0xe0a58a, 0xdca287, 0xd99e80, 0xd3967c, 0xbf866e, 0xb87e67, 0xbb826b, 0xa67661, 0x765343, 0x4e382b, 0x40302a, 0x312724, 0x211b1b, 0x130c0e, 0x60908, 0x90b09, 0x90b0b, 0x7090a, 0x90b0c, 0xc110f, 0xc100f, 0xa0d0d, 0x90d0d, 0xa0f0d, 0x131413, 0x141513, 0x181715, 0x1c1a18, 0x1b1917, 0x1a1917, 0x1b1a18, 0x181613, 0x1a1816, 0x151513, 0x181815, 0x151616, 0xb100f, 0xb0e0d, 0xc0f0d, 0xb0f0e, 0xb0d0c, 0x80c0a, 0x90e0c, 0xf0f0e, 0x90d0b, 0x80d09, 0x80b08, 0x80a09, 0x70c0a, 0x80c0b, 0x50c08, 0xa0d0b, 0x40907, 0x20907, 0x30907, 0x20906, 0x70b06, 0xd100c, 0x312519, 0x614b38, 0x6d5337, 0x614d38, 0x6b5b4b, 0x46382b, 0x1e1914, 0x24211d, 0x403c36, 0x524c43, 0x403529, 0x28211b, 0x221d19, 0x26231e, 0x2b2822, 0x352f2b, 0x3a332e, 0x45443e, 0x383b39, 0x353637, 0x2e2c2a, 0x26211e, 0x29211c, 0x332520, 0x523c30, 0x856858, 0xb28674, 0xc58b77, 0xd49583, 0xdb9d87, 0xdfa28c, 0xe5ab96, 0xe8b19f, 0xe9b5a5, 0xebbbae, 0xedc1b3, 0xedbbac, 0xe9b19b, 0xe3a991, 0xe0a68b, 0xdba185, 0xd89e84, 0xcc9178, 0xbd846c, 0xbb826d, 0xaf7965, 0x906453, 0x6b4c3d, 0x46332a, 0x44362f, 0x231c1b, 0x281e1c, 0x3b2c29, 0x181817, 0x1f1c18, 0x332925, 0x39322a, 0x372f29, 0x3b332b, 0x333029, 0x23211d, 0x141312, 0x161716, 0x171615, 0x181615, 0x1a1918, 0x171616, 0x141412, 0x161513, 0x161614, 0x1d1b19, 0x1e1b19, 0x1e1b19, 0x1f1c18, 0x1a1918, 0x151615, 0xd100e, 0xb0e0c, 0xb0e0c, 0xb0d0c, 0xb0e0c, 0xe100f, 0x90d0c, 0x80c0a, 0x80b08, 0x80b09, 0x70c09, 0x80c09, 0x60c08, 0xb0c0b, 0x50a07, 0x20906, 0x40a06, 0x50907, 0x12130e, 0x302418, 0x6b6050, 0x79726a, 0x6e6053, 0x6a6360, 0x343230, 0x120f0c, 0x1d1914, 0x39352f, 0x585550, 0x51483f, 0x38302c, 0x1f1d1b, 0x211d19, 0x1b1817, 0x181616, 0x171615, 0x171512, 0x26211e, 0x282421, 0x2a2320, 0x36342f, 0x373029, 0x493d30, 0x4b3d30, 0x7a5c4a, 0xa97969, 0xb9816d, 0xc78a74, 0xd79884, 0xde9e8a, 0xe3a897, 0xe9b5a7, 0xeebfb5, 0xeec2b9, 0xefc9c0, 0xf1cdc5, 0xf0c5bd, 0xe9b6a2, 0xe4ab91, 0xe0a48a, 0xdba187, 0xd79e85, 0xd1937a, 0xbf876f, 0xb27e6c, 0xad7a67, 0x956956, 0x8a634e, 0x5b4136, 0x4b3c32, 0x48332e, 0x9e6862, 0x9a7268, 0x614e41, 0x544436, 0x574635, 0x4d3c2f, 0x443226, 0x3c3027, 0x352d26, 0x2b2622, 0x1c1919, 0x171717, 0x181616, 0x171615, 0x171615, 0x181615, 0x181616, 0x161614, 0x181815, 0x1c1b1a, 0x191714, 0x171615, 0x1a1714, 0x1e1816, 0x1f1b18, 0x1f1c1b, 0x151714, 0xd0f0d, 0xb0c0b, 0xc100e, 0x10110e, 0xc0d0c, 0xa0c0c, 0x80c09, 0x80b09, 0x60c0a, 0x80c0a, 0x50b09, 0x90c0c, 0x40a09, 0x30906, 0x40906, 0x30907, 0x272018, 0x584a3d, 0x696a66, 0x6d655e, 0x48413c, 0x1f1d1c, 0xe0c07, 0x1b1812, 0x2f281e, 0x494138, 0x514e4a, 0x34312e, 0x241f1d, 0x27211f, 0x211e1c, 0x151310, 0x161512, 0x161410, 0x171512, 0x1b1714, 0x27211c, 0x292521, 0x302c28, 0x413732, 0x584b3d, 0x654f43, 0x8f6554, 0xaf7665, 0xba7e6b, 0xcb8c77, 0xd99b87, 0xe0a08e, 0xe4aa9c, 0xecbdb4, 0xf0c6c1, 0xf0cdc6, 0xefcdc2, 0xefcbc0, 0xecc0b5, 0xe6b19c, 0xe2a58e, 0xe0a28a, 0xdea38e, 0xd8a18c, 0xd39985, 0xc99282, 0xb68274, 0x9f7265, 0x956956, 0x926856, 0x7f5d4d, 0x3f3029, 0x684d44, 0x9a7269, 0x4c3c38, 0x3d2d26, 0x3b2c27, 0x34291f, 0x332920, 0x2e2520, 0x201a18, 0x191615, 0x171616, 0x1b1716, 0x1c1918, 0x1c1a19, 0x1b1917, 0x1b1817, 0x191716, 0x1a1717, 0x181615, 0x1a1615, 0x1b1918, 0x1c1816, 0x1c1815, 0x1b1816, 0x1a1614, 0x191512, 0x201918, 0x25201f, 0x1e1c19, 0x121412, 0xe1110, 0x121210, 0xa0e0c, 0x80d0b, 0x90b09, 0xa0a08, 0x70b09, 0x70b09, 0x50a08, 0x80c0a, 0x50a08, 0x30806, 0x30907, 0x60b09, 0x3b2e23, 0x463f3a, 0x57534b, 0x3c352f, 0xf0c08, 0xe0d0a, 0x1a1914, 0x352d24, 0x463c33, 0x54524e, 0x3b3634, 0x28211d, 0x25201c, 0x211d1b, 0x1b1815, 0x191714, 0x191612, 0x191613, 0x1a1715, 0x1f1a17, 0x291e1a, 0x271d1c, 0x26201d, 0x403830, 0x4d4339, 0x685349, 0x8d5e4f, 0xb07765, 0xbd816c, 0xcf8b79, 0xd99a89, 0xe0a491, 0xe5ac9e, 0xebbcb4, 0xf0c7c0, 0xedc5bd, 0xebc2b7, 0xeabcae, 0xe7b1a0, 0xe3a793, 0xe2a894, 0xe4ac97, 0xe2ad9b, 0xdea999, 0xd1a092, 0xc39489, 0xb0837a, 0x936963, 0x805850, 0x946a58, 0x976d5d, 0x674d47, 0x504136, 0x41332a, 0x1d1716, 0x241c1b, 0x271f1e, 0x211c1a, 0x201b16, 0x1f1b17, 0x1a1717, 0x1c1a19, 0x1e1b19, 0x1f1a17, 0x211b19, 0x241e1c, 0x251c1c, 0x251f1b, 0x211b18, 0x201a16, 0x1d1917, 0x1b1816, 0x1b1714, 0x1b1714, 0x1a1613, 0x1d1713, 0x1d1817, 0x1b1916, 0x191612, 0x1b1714, 0x211b17, 0x201e1a, 0x1c1a18, 0x191816, 0x101211, 0xa0e0b, 0x90c09, 0xb0c09, 0x90b0a, 0x60a09, 0x50906, 0x90b0a, 0x50908, 0x70c09, 0x16130e, 0x60a08, 0x40362c, 0x474137, 0x3e3a37, 0xe0e0c, 0xf100b, 0x191816, 0x3b3733, 0x4f4841, 0x49433d, 0x5a5855, 0x47413c, 0x2b2520, 0x201c19, 0x231d18, 0x231d18, 0x221c16, 0x211a18, 0x231e1a, 0x241d18, 0x1f1614, 0x2b1d1a, 0x352823, 0x281e1c, 0x3c332c, 0x453935, 0x59423c, 0x8b5b49, 0xb37765, 0xc28471, 0xd0907c, 0xd99b88, 0xe0a696, 0xe4afa2, 0xe8b6ab, 0xebbbb4, 0xebbdb4, 0xe6b3a7, 0xe3ac9b, 0xe4ac9b, 0xe7aea1, 0xeabaab, 0xe6b7aa, 0xe5b5ab, 0xd6aca3, 0xb89189, 0xad867d, 0xab847d, 0xae837b, 0x946e67, 0x8e6855, 0x9f705d, 0x906a5d, 0x533e37, 0x211918, 0x1a1514, 0x181514, 0x1c1a18, 0x1e1b19, 0x1d1716, 0x181516, 0x1e1b19, 0x231d1a, 0x261e1b, 0x271f19, 0x2c211c, 0x3a2b23, 0x47372a, 0x3d2e25, 0x372823, 0x302622, 0x27201c, 0x251e19, 0x201916, 0x1e1815, 0x1f1916, 0x1e1916, 0x211916, 0x1f1917, 0x1f1b19, 0x1f1916, 0x231c17, 0x261f1a, 0x28211c, 0x2b2420, 0x1e1b19, 0x11120f, 0x90b09, 0xa0c09, 0x80b08, 0x60907, 0x60906, 0x90c09, 0x50a08, 0xc0f0d, 0x261c15, 0x40807, 0x3c332d, 0x3b3330, 0x131210, 0xf0f0c, 0x1b1a19, 0x27241e, 0x45423b, 0x4c4944, 0x5e5c56, 0x625d56, 0x453c35, 0x362d24, 0x423327, 0x3a2c20, 0x37281f, 0x342721, 0x352823, 0x33261d, 0x2e1e17, 0x37221c, 0x493427, 0x574538, 0x33231f, 0x362a23, 0x453a33, 0x4f3731, 0x875847, 0xae7664, 0xc38676, 0xcf917d, 0xd89a88, 0xdfa294, 0xe0a99a, 0xe3ac9f, 0xe6aca5, 0xe8b0a7, 0xe3aa9e, 0xe3ac9e, 0xe8b2a9, 0xeec0b8, 0xefc9c3, 0xe6beb8, 0xc39f98, 0xa0837a, 0xad887c, 0xc49283, 0xc59182, 0xbe8d7d, 0xb78c78, 0xb0846e, 0xae7c67, 0x916656, 0x49312a, 0x29221f, 0x211e1c, 0x201c1b, 0x221d1b, 0x1c1716, 0x171413, 0x1a1717, 0x221c1a, 0x281d1a, 0x31231e, 0x2f2119, 0x392920, 0x624938, 0x6b4e3e, 0x50392b, 0x423029, 0x3d312f, 0x2c2421, 0x2e2421, 0x282019, 0x231b17, 0x231c19, 0x28201c, 0x231a16, 0x251a16, 0x251e1b, 0x231d1b, 0x1e1715, 0x1f1b16, 0x231d18, 0x211b16, 0x221d1a, 0x221d1a, 0x191613, 0xd0d0a, 0x70a08, 0x70a08, 0x60907, 0xa0e0d, 0x12100e, 0x50907, 0x70a07, 0xa0b08, 0x332a28, 0x231d1a, 0xd0f0c, 0x191714, 0x201e1a, 0x221f19, 0x29231d, 0x48433a, 0x605e59, 0x6c6966, 0x66584f, 0x6d5745, 0x6d5439, 0x624c34, 0x5c4432, 0x5b4536, 0x543d2d, 0x5d3a2b, 0x8d644f, 0x99705c, 0x926e58, 0x7a5d49, 0x543a2b, 0x3c261f, 0x513f37, 0x553e38, 0x835544, 0xab715e, 0xbe826c, 0xcc8e7a, 0xd49582, 0xdb9a87, 0xdb9d8b, 0xdda191, 0xe1a49a, 0xe3a59b, 0xe1a499, 0xe6b2a8, 0xeec3bd, 0xefcdcb, 0xd9b7b4, 0xaa8c88, 0x826e65, 0xa57e6f, 0xcb9987, 0xbb8979, 0xa06c5e, 0x9b6c5b, 0xb57d67, 0xc68d71, 0xc48f77, 0x8d6152, 0x3d251e, 0x28201c, 0x272220, 0x26201f, 0x241b19, 0x171312, 0x151512, 0x1e1916, 0x261b18, 0x32231e, 0x3d2c23, 0x3b271f, 0x5d4332, 0x866853, 0x745543, 0x594032, 0x503c30, 0x493832, 0x382925, 0x2a201f, 0x2d2321, 0x2e241f, 0x241b17, 0x271d18, 0x2b211d, 0x2b1f1d, 0x291e19, 0x251d1a, 0x261d19, 0x221b18, 0x221b1a, 0x201a16, 0x1f1714, 0x211916, 0x251f1b, 0x241e19, 0x161310, 0xc0f0d, 0x60707, 0x70c08, 0x2e180e, 0x150f0d, 0xa0c09, 0xe0c09, 0x291f1a, 0x191711, 0xe0f0c, 0x1c1814, 0x1d1a14, 0x18160e, 0x2c2622, 0x3c352e, 0x4d4b45, 0x727470, 0x84817d, 0x877e76, 0x806d57, 0x816954, 0x7e644c, 0x785f4c, 0x87614b, 0xbd9074, 0xd4a487, 0xc8977a, 0xc09072, 0xb08367, 0x966c52, 0x5c3c29, 0x523629, 0x5c4338, 0x794e3c, 0xa66b55, 0xb97c67, 0xc88a71, 0xcc8f78, 0xd1917f, 0xd79787, 0xdb9f8d, 0xdd9e91, 0xe2a399, 0xe6b3a9, 0xebc3bd, 0xe9c4bf, 0xcfa5a2, 0xab8680, 0x8e7065, 0x9f766a, 0xaa776a, 0x8a7171, 0x6d6164, 0x917c7c, 0x9d695e, 0xb37b62, 0xcc957b, 0xc9947e, 0x9b6d59, 0x462c23, 0x1d1717, 0x201a19, 0x261d1b, 0x231816, 0x1b1413, 0x1e1815, 0x251b19, 0x2a1d18, 0x463224, 0x452e24, 0x583a2d, 0x926f59, 0x98715e, 0x8b6a59, 0x806253, 0x7c6255, 0x795e54, 0x654d42, 0x4e392d, 0x332320, 0x2e211c, 0x302421, 0x271c1a, 0x281e1b, 0x29201c, 0x2c201b, 0x2b201b, 0x281f1b, 0x281c17, 0x231915, 0x1f1a16, 0x211715, 0x211713, 0x1c1714, 0x1c1817, 0x201a18, 0x1f1c1a, 0xf100d, 0x50906, 0xc0d09, 0xb0d0b, 0x70b0a, 0x60a0a, 0x211a14, 0xe100c, 0xe0d09, 0x1a1611, 0x13100c, 0x1c1a15, 0x241e1a, 0x241c17, 0x36302a, 0x55514b, 0x6a6665, 0x848382, 0x8e8882, 0x928375, 0x897462, 0xa18372, 0xcfa690, 0xdeb094, 0xd8ab8c, 0xd7a987, 0xd2a17f, 0xc49170, 0xb68664, 0x966e51, 0x675042, 0x5d4737, 0x683f2f, 0x9a6049, 0xb47761, 0xc1866d, 0xc78974, 0xcf9482, 0xd79b8c, 0xdea295, 0xe1a79b, 0xe8b6b0, 0xecc6c2, 0xeac4bf, 0xddb3a7, 0xc79d8e, 0xc29688, 0xaa7b6b, 0xa97267, 0xb29c97, 0x858d99, 0x817985, 0xba9493, 0xbf7f6e, 0xc3907d, 0xd3a38e, 0xd09784, 0xb07f6d, 0x573c31, 0x211b19, 0x261f1d, 0x2d201c, 0x281717, 0x392721, 0x3c2721, 0x271b19, 0x35241c, 0x553c29, 0x482b1e, 0x815e49, 0xc59d83, 0xbb8c77, 0xbb927b, 0xbe9781, 0xb7927c, 0xae8a74, 0xb28e7a, 0xb99782, 0x9f8170, 0x4e3730, 0x362320, 0x31231f, 0x291e1a, 0x251b17, 0x281f1a, 0x2f231d, 0x291f1b, 0x271c18, 0x251c17, 0x211914, 0x211814, 0x241913, 0x231a13, 0x1f1813, 0x211914, 0x221d18, 0x201e1c, 0xc0f0d, 0x1c160a, 0x16100b, 0x80b0a, 0x80a09, 0x1c150d, 0xe0d0a, 0x14130c, 0x13110d, 0x100f0a, 0x15140e, 0x17130e, 0x1e1812, 0x2e241e, 0x31261f, 0x484037, 0x6e6761, 0x8a8680, 0x918179, 0xab8e80, 0xdab6a6, 0xe2bcab, 0xddb19b, 0xd9ad91, 0xd8a88b, 0xd5a082, 0xcc9473, 0xbd8a67, 0xb28468, 0x876c59, 0x57473b, 0x513429, 0x844f39, 0xb17660, 0xbc8470, 0xc88e7d, 0xd0978a, 0xdba193, 0xe0a9a0, 0xe4b8b0, 0xe6bdb6, 0xe4b8b0, 0xe1b4a5, 0xe1b8a4, 0xdbb19a, 0xc08d76, 0xb87e6b, 0xc07e77, 0xc89895, 0xcba8a4, 0xcba29e, 0xca8f7f, 0xc88e79, 0xd29887, 0xd8998b, 0xd79a8c, 0xc38c7f, 0x6c4a41, 0x2b201d, 0x2b201c, 0x37241f, 0x301a15, 0x62483a, 0x6a4d41, 0x291b18, 0x4a3224, 0x5b3e29, 0x553422, 0xa27a5e, 0xd3aa8d, 0xcea58a, 0xd3a48b, 0xd4a68d, 0xd1a48b, 0xcd9b81, 0xcf9f88, 0xcca087, 0xd6ac92, 0xa88470, 0x482e28, 0x402f29, 0x342a27, 0x2d231d, 0x261a16, 0x312620, 0x32251b, 0x251b16, 0x241b16, 0x251a15, 0x241a12, 0x251a12, 0x2a1d17, 0x271b16, 0x251c14, 0x261f19, 0x29201d, 0x1e1d1b, 0x1e1914, 0xd0c08, 0x80d0c, 0x60c09, 0x29241b, 0xa0905, 0x16140d, 0xd0e08, 0xf0f0a, 0x110f0b, 0x13110d, 0x262017, 0x291d17, 0x2e221c, 0x44362c, 0x5d4e45, 0x8a766d, 0xb29389, 0xdabaad, 0xe2c0b5, 0xe0bcb0, 0xe0b4a2, 0xdeb199, 0xdcab93, 0xd7a086, 0xce9278, 0xc69272, 0xb9896a, 0x926b51, 0x46342d, 0x36221d, 0x623627, 0xa36b57, 0xb7826f, 0xc59082, 0xcd9a8f, 0xca9b92, 0xc2938d, 0xcc9c91, 0xd9a998, 0xddad9c, 0xe0b3a0, 0xe8bfab, 0xdcac92, 0xbe8b73, 0xc98f76, 0xcd9283, 0xcb8e8a, 0xcf938d, 0xcf9386, 0xd29988, 0xd79e8a, 0xde9f8d, 0xdf9f91, 0xdba093, 0xcc9284, 0x885d54, 0x312220, 0x2c1e1c, 0x3d2823, 0x3c211b, 0x7f5d4b, 0x8a6c5b, 0x2f1c19, 0x5c3e2c, 0x5e3d27, 0x69462d, 0xbb9478, 0xd2a686, 0xd3a78d, 0xd0a38a, 0xcca38b, 0xcca489, 0xcda48d, 0xc6a28f, 0xbd9180, 0xa57168, 0x734a48, 0x452b29, 0x4a3b39, 0x342726, 0x332721, 0x2e201c, 0x2e221b, 0x33261b, 0x2a1c16, 0x251915, 0x281b17, 0x271b15, 0x251913, 0x281b15, 0x281c15, 0x301e12, 0x2e1f15, 0x231b15, 0x27201b, 0x211d1b, 0x151510, 0xc0e0b, 0x80d0a, 0x2b2620, 0xd0e08, 0xd0f0a, 0xb0c07, 0xf0f09, 0x120f0e, 0x19130f, 0x241b13, 0x241a13, 0x31261d, 0x3f2b1e, 0x785846, 0xbc9183, 0xdfbcb1, 0xe5cac4, 0xe3c7bf, 0xe0bcae, 0xdfb39f, 0xe0b29e, 0xdfaf9c, 0xdaa995, 0xd4a289, 0xcd9e86, 0xc2947b, 0xa3775e, 0x523a2e, 0x241918, 0x47231e, 0x8c5747, 0xb07c6e, 0xb6877d, 0x947169, 0x7e655c, 0x8f6f66, 0xa47c6f, 0xb98e7b, 0xcb9b86, 0xd89e88, 0xdea48f, 0xd59986, 0xc38e76, 0xc18870, 0xc68f7d, 0xce9388, 0xd09487, 0xd69986, 0xd99983, 0xdd9f87, 0xe2a290, 0xe09f90, 0xdb9c8e, 0xcd9282, 0x8f5f54, 0x3a2321, 0x311e1c, 0x422a23, 0x4b2a23, 0x825e4a, 0x8d705f, 0x3b221a, 0x704c2f, 0x61422b, 0x7b5a3f, 0xd0a98c, 0xcca187, 0xba9782, 0xb49787, 0xae877e, 0x987370, 0x84595b, 0x743c45, 0x822d39, 0x671e2f, 0x541728, 0x482329, 0x573a37, 0x4a2f29, 0x38241d, 0x392a24, 0x302219, 0x2e1f18, 0x2f2018, 0x281c16, 0x261c19, 0x291d17, 0x281c15, 0x2b1b15, 0x302219, 0x312017, 0x402816, 0x2e2118, 0x26211c, 0x261f16, 0x221d17, 0x141410, 0x70a08, 0x13100b, 0xc0d0a, 0x90a05, 0xa0b07, 0xc0d07, 0x14120e, 0x17110c, 0x1d160d, 0x28201a, 0x342118, 0x78533c, 0xc29682, 0xdeb4ab, 0xe2c0b7, 0xe4c4bc, 0xe6cac2, 0xe3c3b8, 0xe3bdb1, 0xe4beb2, 0xe3bcb4, 0xdfb6a8, 0xd3aa9a, 0xb0897e, 0x946f5f, 0x926b57, 0x6a4937, 0x231a16, 0x311c16, 0x6e4338, 0x8e6557, 0x735448, 0x60483e, 0x826457, 0x977769, 0x977164, 0x9b7169, 0x977064, 0xaf7867, 0xd29380, 0xd39786, 0xc68c77, 0xc68a72, 0xc38366, 0xce8c70, 0xd6947c, 0xdc997e, 0xe2a087, 0xe4a590, 0xe4a597, 0xe2a498, 0xdea195, 0xd29587, 0x8f5f53, 0x412621, 0x38201b, 0x4d3127, 0x5c3b2c, 0x7d5944, 0x7b5749, 0x502f1e, 0x7c5a3b, 0x694730, 0x967257, 0xcaa590, 0xa28477, 0xa99990, 0x886068, 0xa4313e, 0xa12e36, 0x490b20, 0x601728, 0x7f212f, 0x761c2a, 0x712b37, 0x8c5c57, 0xa07b6b, 0xa07762, 0x5e3625, 0x412921, 0x3b2a22, 0x311e19, 0x302018, 0x2e221b, 0x261b16, 0x231813, 0x2c1c15, 0x2f2017, 0x32241d, 0x372317, 0x3f2618, 0x492e1b, 0x2c231c, 0x231e18, 0x271f1a, 0x201f1b, 0xd0f0c, 0x90804, 0xa0c06, 0x80a05, 0xa0b06, 0xe0f07, 0x15110b, 0x19130b, 0x211913, 0x2f1c15, 0x7e5747, 0xd2a896, 0xdbb0a6, 0xe5c6c2, 0xe6ccca, 0xe7ccc8, 0xe7ceca, 0xe7cfcb, 0xe5c8c1, 0xe2bfb7, 0xd8b1a9, 0xbd9991, 0x93756e, 0x7e625a, 0x8c685c, 0x805d51, 0x674637, 0x31241e, 0x261613, 0x553126, 0x754e3e, 0x876355, 0xad7e6e, 0xa07467, 0x755e5f, 0x888789, 0xc3a2a2, 0x9a685d, 0x906459, 0xc58577, 0xd79c8a, 0xcb8f7f, 0xcc8f81, 0xd49480, 0xd7927e, 0xe3a38e, 0xe7ac99, 0xe9ae9f, 0xebb3a6, 0xe9b1a3, 0xe7aea4, 0xe2a99e, 0xda9c90, 0x936259, 0x462922, 0x3d211b, 0x50352b, 0x6d4935, 0x825e48, 0x6f4c3e, 0x6a462e, 0x846650, 0x77553e, 0xa07e68, 0x9e8278, 0xaa928a, 0x9c7a7e, 0x824d58, 0x711630, 0xb72a3a, 0xa73138, 0x561225, 0x6d2334, 0xc26964, 0xd4a293, 0xd7ad93, 0xc1927a, 0xba8e7a, 0xa97960, 0x562e21, 0x452f2a, 0x372621, 0x33211b, 0x39261f, 0x32251d, 0x261a14, 0x271913, 0x301e16, 0x39281c, 0x442d1e, 0x432b1c, 0x54381f, 0x452c19, 0x271c16, 0x1d1915, 0x1e1c1b, 0x1b1916, 0xa0a04, 0x90a03, 0xa0a04, 0xc0c06, 0x100e09, 0x15110a, 0x1c160d, 0x21150e, 0x57392e, 0xaa897d, 0xbe9a91, 0xc6a099, 0xd4b1ab, 0xdcb9b4, 0xdfbeb6, 0xe0beb6, 0xe1bfb9, 0xdebab0, 0xcea49a, 0xa67c75, 0x7d5a55, 0x876459, 0xb38c7e, 0xc59a8b, 0xb68c7d, 0x805c4f, 0x3e2c23, 0x241713, 0x3b2116, 0x7f5445, 0xa7786b, 0x94675b, 0x7e7372, 0x6a6a7a, 0x9a8a90, 0xbe8e8c, 0x9e685b, 0x90614f, 0xb97a71, 0xde9f92, 0xd6978a, 0xc98c7e, 0xcf9282, 0xd89884, 0xe6ab96, 0xeeb9ab, 0xecb8ad, 0xeebdb8, 0xedb8ae, 0xe7afa0, 0xe1a699, 0xdaa090, 0x996958, 0x4b2c23, 0x45241d, 0x61463b, 0x7a5c4c, 0x805c48, 0x6e482d, 0x85654d, 0x866954, 0x876854, 0x9e8174, 0xa98e8b, 0x9c7376, 0xc8a8a2, 0xe7ccbd, 0x9a6967, 0x6e162e, 0xb52d3d, 0xad585c, 0xc19a8e, 0xdfbda7, 0xdfb7a2, 0xd7aa96, 0xd09f88, 0xbe907a, 0xbc917a, 0x8a5a43, 0x502a1d, 0x3f2822, 0x3a271e, 0x462d23, 0x3d2a21, 0x2d221b, 0x2c201a, 0x30211a, 0x382316, 0x49382d, 0x503926, 0x533e2b, 0x624d38, 0x3d2d23, 0x1e1916, 0x141311, 0x1c1a16, 0xf0c04, 0xa0a04, 0xa0a05, 0xe0b06, 0x12100a, 0x17130a, 0x1e140b, 0x543f35, 0x84665c, 0x826661, 0x7b5e5b, 0x795851, 0x8a6257, 0xaa7d73, 0xcca091, 0xd9afa3, 0xddb6ac, 0xd6ac9d, 0xc29583, 0xa2786c, 0x7b5c57, 0x795e5b, 0x7f6360, 0x8b6054, 0xac7d6c, 0x9f7761, 0x5d4739, 0x261d1b, 0x331d18, 0x512f28, 0x83594b, 0x714d41, 0x9a7e7a, 0xad8b8a, 0xb9817a, 0xb47870, 0xa7705f, 0xa06a56, 0xa66e62, 0xdb988c, 0xe09e94, 0xcc897e, 0xc48579, 0xca867b, 0xd29583, 0xe6af97, 0xe9b09d, 0xebb5aa, 0xecb7ae, 0xe7ae9d, 0xdea395, 0xd69a89, 0xa37163, 0x58392c, 0x4c2a1f, 0x71574e, 0x7e6253, 0x7b5b4d, 0x7b5338, 0x9a816e, 0x8e7664, 0x967b6b, 0xab8f89, 0x9a6d70, 0xcd9e8c, 0xe9bba6, 0xc99991, 0x8f7672, 0x633e49, 0x863a4e, 0xd8a898, 0xdab19c, 0xdbaf9b, 0xe0b7a4, 0xdfb8a5, 0xd9b09a, 0xd5a78f, 0xc7a08a, 0xaf8a74, 0x6b3d2a, 0x49291e, 0x3d2921, 0x442b1d, 0x4d2c1a, 0x3a2820, 0x30221b, 0x312218, 0x372116, 0x452d20, 0x544337, 0x5a4738, 0x5d514c, 0x58524a, 0x2c2720, 0x1a1815, 0x161714, 0xd0b03, 0xc0b04, 0xa0b08, 0xf0d08, 0x150f0b, 0x1b1008, 0x573e32, 0xa8887c, 0xba988e, 0xb18f86, 0x96756f, 0x88635c, 0x956d60, 0xaa7f6f, 0xc09381, 0xd6a896, 0xe1baa9, 0xcfa492, 0xa97f6e, 0x88695f, 0x43393e, 0x5c585a, 0xb3b8b8, 0x796664, 0x865745, 0xb18369, 0x846556, 0x372d2c, 0x3f2821, 0x593536, 0x734737, 0x865948, 0x9a6454, 0xb07061, 0xb87769, 0xb57566, 0xbb7d66, 0xae7263, 0x9b655a, 0xc9877d, 0xde9a91, 0xd18982, 0xc07e75, 0xbe7c78, 0xc07a73, 0xd39d91, 0xecbeb0, 0xe9b8a1, 0xe7b19b, 0xe5ab98, 0xdda08e, 0xd59b86, 0xb4816c, 0x664231, 0x583523, 0x6e4a3a, 0x816555, 0x795f53, 0x8d6a53, 0x947e71, 0x886e5e, 0x97796d, 0x956a6f, 0xc5907d, 0xd99e83, 0xa5776f, 0x686069, 0x605f64, 0x79535c, 0xa77274, 0xd0aa96, 0xdba795, 0xe8b9ab, 0xeac4b7, 0xe7c6b5, 0xe2bfac, 0xdcb6a0, 0xd6ae95, 0xc59b84, 0x926a56, 0x5d3422, 0x483125, 0x422c21, 0x59371f, 0x52341d, 0x39271d, 0x34231c, 0x352015, 0x472919, 0x4f3c33, 0x56483e, 0x5c4d45, 0x58514b, 0x3a332c, 0x27221d, 0x161815, 0x281710, 0x180f09, 0xf0c06, 0x130d07, 0x23150b, 0x4e3524, 0x997666, 0xae8a80, 0x896b65, 0x5d4d4b, 0x5a4f51, 0xa29b99, 0xac8d85, 0xa87869, 0xab7e6f, 0xc49381, 0xddb3a1, 0xbe9684, 0xa4796e, 0xbba8a8, 0x68585a, 0x7d6b6d, 0xc0abaf, 0x9a726e, 0x9a6551, 0xba886c, 0x9a7460, 0x4f423c, 0x271c17, 0x483537, 0x6f443a, 0x986a57, 0x9e6a5b, 0xb47565, 0xb77564, 0xbd7963, 0xcc8770, 0xb97b6b, 0x956259, 0xb77870, 0xdc8e8b, 0xde938f, 0xce8883, 0xc9857f, 0xd49087, 0xca8f8a, 0xe9b9b5, 0xecbeaf, 0xe8baa3, 0xe5b097, 0xdba286, 0xd79f81, 0xbf8c73, 0x744d3e, 0x643c27, 0x6f4d3c, 0x7c655c, 0x775f53, 0x927d70, 0x7b6154, 0x764f37, 0x88615d, 0xbd928d, 0xdfa98c, 0xad7261, 0x8b7f80, 0x777479, 0x817377, 0x97676e, 0xc89f92, 0xd7a796, 0xe8b6a9, 0xeec2b9, 0xefc9c1, 0xedccc1, 0xe8c7b7, 0xe3c1ac, 0xdab49d, 0xd1a28a, 0xb38972, 0x673c2a, 0x5a3826, 0x533c2d, 0x564636, 0x6a4c34, 0x4f3422, 0x3a241a, 0x43281a, 0x492e20, 0x5a3b27, 0x4c4138, 0x59524d, 0x423833, 0x382e29, 0x302823, 0x201c18, 0x5e3224, 0x422a24, 0xb0a06, 0x291b11, 0x563a27, 0x7a6049, 0x9f7e6d, 0x815d55, 0x584947, 0x352b2a, 0x3d3c41, 0xbfbfc0, 0xd3b6b8, 0xbf8b87, 0xab7867, 0xab7d6d, 0xca978b, 0xba8a82, 0xa2756a, 0xc79e97, 0xc49897, 0xc09291, 0xb9887f, 0xb4826f, 0xbf8d77, 0xc08d76, 0xa27865, 0x584943, 0x2f231f, 0x322e28, 0x462d29, 0x916457, 0xb0776c, 0xbc7567, 0xc07664, 0xca8371, 0xd68d80, 0xcb8e7b, 0x9b6b62, 0xad6c67, 0xe09996, 0xeec0c2, 0xe1a8a4, 0xce978a, 0xc2897e, 0xcf938f, 0xeaafac, 0xe6b3aa, 0xe3b4a3, 0xe1b29b, 0xdea98f, 0xd6a17f, 0xc89478, 0x87614d, 0x633b27, 0x6c5042, 0x6e574b, 0x755f52, 0x847770, 0x67432e, 0x734936, 0xa07c7c, 0xe9cab5, 0xd89e84, 0x9f685e, 0xad9b9d, 0xbca79f, 0x987174, 0xb78d87, 0xd4a696, 0xe7b6ab, 0xeec2bb, 0xf0cbc4, 0xf0cec8, 0xefccc5, 0xeccabe, 0xe6c6b3, 0xdfbaa4, 0xd5ae97, 0xc3967d, 0x855c47, 0x48291f, 0x5f4231, 0x5a493d, 0x5c4c43, 0x6a4d39, 0x4c3525, 0x55351d, 0x56351f, 0x684b37, 0x584636, 0x49413e, 0x3c342f, 0x271e18, 0x2b211c, 0x271e18, 0x62392b, 0x633e30, 0x18100f, 0x3d2e26, 0x6b4a37, 0x93725b, 0xa47e68, 0x855949, 0x87645d, 0x846463, 0x8d7371, 0xc0a7ab, 0xc28f91, 0xc4938c, 0xb08373, 0xa9746a, 0xc2877f, 0xca908b, 0xaa756c, 0xae7f73, 0xc99e97, 0xcf9f94, 0xcf9f8e, 0xce9d8c, 0xd39d8a, 0xcd9582, 0xad7f70, 0x5d4b47, 0x2e211f, 0x161613, 0x1a1311, 0x694239, 0xab7062, 0xbb796c, 0xc88373, 0xd08c80, 0xda998b, 0xdaa18c, 0xa3776d, 0xac706c, 0xe4a49f, 0xe8bcbb, 0xd6a5a0, 0xbc8a7f, 0xc98b83, 0xd99d95, 0xdca29d, 0xdeaba1, 0xd4a896, 0xc29985, 0xc79580, 0xd5a685, 0xcd9b7b, 0x99725c, 0x613a2b, 0x5f3f30, 0x5c4130, 0x5f4a3b, 0x6a4d3e, 0x5f331e, 0x855e5a, 0xc6a29d, 0xf8e6d2, 0xdeb6a8, 0xad766a, 0xac7a72, 0xa2726d, 0xa67a76, 0xcf9f90, 0xe0ada2, 0xebbcb4, 0xf1c8c2, 0xf4d4ce, 0xf3d5d1, 0xf0d1c9, 0xeecec1, 0xecccbc, 0xe6c5b3, 0xdfbea5, 0xc69a84, 0xb68772, 0x5c372b, 0x492920, 0x59402f, 0x4b3f30, 0x5b4d42, 0x5d493b, 0x54412f, 0x654931, 0x685142, 0x6c6056, 0x4a3f3b, 0x342622, 0x281e19, 0x211914, 0x261f1a, 0x583727, 0x8f5f47, 0x432e26, 0x3f352d, 0x6d4d3b, 0x9b755d, 0xae816d, 0xa97c69, 0xa87c6c, 0xb78c81, 0xc8a49e, 0xcba6a7, 0xc79997, 0xbf928a, 0xae7a72, 0xaf766d, 0xc58b7f, 0xd39c93, 0xbf877c, 0xa67264, 0xbe8973, 0xce9484, 0xd19a8a, 0xd39b8a, 0xd69a8d, 0xcd9185, 0xb38172, 0x5e4a46, 0x1d1617, 0xc0d0d, 0x80b0a, 0x361e1d, 0x925d4f, 0xb97c6e, 0xc7897b, 0xd09085, 0xd99a8d, 0xdda491, 0xac7f73, 0x92655f, 0xb6847c, 0xb3857d, 0xa57c74, 0xbb887e, 0xd8a097, 0xce9990, 0xce9d94, 0xd3a499, 0xbf8e84, 0xb68075, 0xc49075, 0xd2a282, 0xcf9e7d, 0x967058, 0x5e382a, 0x503124, 0x4c3329, 0x523322, 0x532d1d, 0x775747, 0x916465, 0xbc8d8e, 0xf2c6b4, 0xe0baa9, 0xcd9d85, 0xb18073, 0xa67776, 0xcfa08f, 0xd8a593, 0xe5b5a9, 0xeec4ba, 0xf3d1cb, 0xf7ded9, 0xf7deda, 0xf3d5cd, 0xefcec1, 0xedcbba, 0xebc9b8, 0xe6c5b0, 0xd9b69f, 0xc49981, 0x8b5f4b, 0x5c382c, 0x513229, 0x523a2b, 0x514238, 0x685444, 0x543f34, 0x68594f, 0x6e5f57, 0x68605a, 0x575049, 0x3a2c23, 0x231911, 0x1f1a17, 0x2a231f, 0x402316, 0x986b55, 0x57403a, 0x352c25, 0x654937, 0x8d6652, 0xaf816f, 0xbe907f, 0xc19686, 0xc5998e, 0xca9c90, 0xcda095, 0xcfa198, 0xc18b7f, 0xb27a6e, 0xb57e70, 0xc38879, 0xd39990, 0xcc9388, 0xa87264, 0xbe8972, 0xdaa391, 0xd89e94, 0xd89a93, 0xd69793, 0xcb8e89, 0xb18073, 0x5b4640, 0x161314, 0x121011, 0x42301d, 0x3e2b1e, 0x54322a, 0xaf7666, 0xc18477, 0xcb8d7e, 0xd49689, 0xd7a18c, 0xcb9280, 0xb4776f, 0xa36e69, 0xa3776e, 0xb28379, 0xc99287, 0xd7a195, 0xd9a79c, 0xd49d96, 0xbf8282, 0xae6c72, 0xcb8780, 0xdfaf90, 0xd9a98a, 0xcc9d7b, 0x8e664d, 0x5c3729, 0x45281d, 0x432a24, 0x4b271d, 0x694838, 0x96756b, 0x692c3c, 0x7d4453, 0xb04f55, 0xcc7a72, 0xb9867b, 0xad7b79, 0xd8a89c, 0xd8a595, 0xddab9b, 0xe7b8ac, 0xeec7bb, 0xf5d4cc, 0xf8e2dd, 0xf8e3de, 0xf4d6cf, 0xf0cfc3, 0xeeccbc, 0xeccbba, 0xe8c8b6, 0xe4c2ad, 0xd6b09a, 0xba917b, 0x694639, 0x5b3725, 0x513424, 0x4a3527, 0x59493e, 0x635043, 0x58483f, 0x645d5a, 0x605953, 0x4f473e, 0x5c544d, 0x2f201a, 0x1f1612, 0x211916, 0x301e17, 0x7b4d3a, 0x715851, 0x2d2421, 0x573f35, 0x825b4c, 0xad806f, 0xbe8d7e, 0xc7948c, 0xcb9692, 0xcf9c96, 0xd5a39e, 0xd6a09d, 0xcb958c, 0xb38475, 0xaa7669, 0xbf8376, 0xd19188, 0xd4948a, 0xba8175, 0xad796a, 0xdba694, 0xdda39c, 0xd89a97, 0xd49893, 0xc89189, 0xa87b70, 0x594541, 0x33261d, 0x68482e, 0x926945, 0x94714f, 0x3b2822, 0x663f38, 0xb1796b, 0xbb8374, 0xc88c7c, 0xcf9981, 0xc9917e, 0xc7897c, 0xba8077, 0xb78679, 0xce9c8e, 0xdaa8a0, 0xdba19d, 0xd28e91, 0xbd737a, 0xb66e7c, 0xc37c85, 0xd19989, 0xdeac91, 0xd9a88c, 0xc7987b, 0x8b634a, 0x542e21, 0x40241c, 0x40231c, 0x56362b, 0x775b57, 0x5b2e37, 0x692c3a, 0xc0938b, 0xaa7173, 0xa3676c, 0xb67f81, 0xdeaea0, 0xe7bcad, 0xe5b6a4, 0xe1ae9d, 0xe3b1a5, 0xeac1b6, 0xf0cbc1, 0xf4d8d2, 0xf6e0d9, 0xf4d9d1, 0xf0d2c6, 0xefd0c1, 0xedcfbe, 0xebccba, 0xe9c6b5, 0xe3c1ae, 0xd4af96, 0x77574c, 0x583525, 0x674123, 0x573e2c, 0x574336, 0x62564c, 0x5b524c, 0x443730, 0x453731, 0x40332f, 0x5f5752, 0x45352d, 0x1f150f, 0x201610, 0x322720, 0x5b392d, 0x65443d, 0x231817, 0x4a3832, 0x795647, 0xa5776a, 0xb8857a, 0xc58d8c, 0xd1979a, 0xd5a4a4, 0xdcb2b7, 0xdeb4b4, 0xd0a196, 0xa5756c, 0x9e6b60, 0xc1837a, 0xd69b96, 0xd8a49d, 0xd29893, 0xa9736e, 0xcd9584, 0xdfa69b, 0xd79d98, 0xce9a8f, 0xbf8f85, 0x9a746a, 0x705445, 0x8a6440, 0xa37b55, 0xa98262, 0xb99270, 0x977a63, 0x352020, 0x63403a, 0x9d6d60, 0xb07a67, 0xc28d76, 0xbf8d78, 0xab8072, 0xab7f72, 0xb28173, 0xc78f87, 0xcd9192, 0xbd717d, 0xb36774, 0xc88993, 0xcd8290, 0xce938f, 0xd1a28c, 0xd3a386, 0xd3a383, 0xc89b7e, 0x8e6955, 0x4e291d, 0x482820, 0x442822, 0x633f3b, 0x956a62, 0x96695a, 0x6c3940, 0xc48c82, 0xdea999, 0xd5a798, 0xdeaf9e, 0xe4b6a3, 0xe7bfad, 0xeac2b0, 0xe5b7a4, 0xddab97, 0xdbab9b, 0xdfb2a4, 0xe4beae, 0xebcabc, 0xeed2c6, 0xefd4c7, 0xf0d3c5, 0xeed0c1, 0xedcfc0, 0xebccbd, 0xe5c3b4, 0xe3bda9, 0xa17f6f, 0x6f5446, 0x653f2c, 0x755137, 0x5e4536, 0x5b4d47, 0x5e534c, 0x3b2e24, 0x2c1e17, 0x2f241d, 0x49413d, 0x52453a, 0x271b14, 0x241b16, 0x35261e, 0x4c362a, 0x553427, 0x3d2823, 0x3c2b27, 0x6d4f40, 0x9b7366, 0xb17f79, 0xc38b8a, 0xcf9897, 0xd6a3a5, 0xdbb1b5, 0xd6a5a1, 0xc89586, 0xa2736a, 0xa56f66, 0xbc817c, 0xdaaba8, 0xddaead, 0xc3908e, 0xa2746f, 0xcc907f, 0xdaa08f, 0xd49c8e, 0xc49386, 0xb08576, 0x947164, 0x83654e, 0xaa8663, 0xb39071, 0xba9879, 0xba987b, 0xc19f81, 0x947862, 0x36231f, 0x604137, 0x996b56, 0xaa7b64, 0xa17965, 0x906e5e, 0x936b65, 0x986462, 0x9f6065, 0xad6372, 0xb96578, 0xd18493, 0xd891a1, 0xca868b, 0xc99e8d, 0xcea38a, 0xd0a385, 0xd3a587, 0xc1967b, 0x7d5945, 0x522b20, 0x43231e, 0x4c332c, 0x937367, 0xc28c72, 0xa27361, 0x664d4f, 0xb67d76, 0xd2968c, 0xcf978d, 0xd29e8f, 0xd29e90, 0xd7a497, 0xdfaea1, 0xe4b4a6, 0xecc2b2, 0xe6c1ad, 0xdcb19b, 0xdaad93, 0xdfb79d, 0xe8c9b3, 0xeed2c3, 0xf1d7c8, 0xf1d6c9, 0xeed0c2, 0xeccdbe, 0xe7c7b8, 0xe6c1b1, 0xc09c8c, 0x8d6b5c, 0x6c4a37, 0x684a38, 0x755f51, 0x5e4e4a, 0x554942, 0x3c2d27, 0x261b16, 0x2b1f1a, 0x413834, 0x52443b, 0x2f231b, 0x1e1612, 0x39251e, 0x3f2d22, 0x4a3022, 0x8a6455, 0x513f3c, 0x5b3f35, 0x90695b, 0xac7f76, 0xc08f8a, 0xca9694, 0xd19f9d, 0xd4a4a4, 0xd1a199, 0xd4a18d, 0xbb8b82, 0xa47570, 0xa47674, 0xb07f78, 0xb5837f, 0xb2847d, 0xc48e80, 0xce9685, 0xd09687, 0xc78e7d, 0xb9897b, 0xb08775, 0x997666, 0x90725e, 0xba9b7c, 0xbc9e84, 0xbf9f85, 0xbc9c81, 0xad8e75, 0xa4876e, 0x675649, 0x28201f, 0x5c3f35, 0x9c7059, 0xb5886c, 0xb98c71, 0x9f7369, 0x8e595e, 0xa45965, 0xc77080, 0xd27c8b, 0xc66e7a, 0xb77476, 0xba9182, 0xc99e88, 0xd6ad93, 0xdaaf94, 0xd2a38a, 0xad8369, 0x775443, 0x502b1d, 0x44241d, 0x533732, 0x8e6c5c, 0x966758, 0x645151, 0x493e42, 0xa8756f, 0xd2948c, 0xd8a197, 0xdaa898, 0xe3b3a5, 0xf1c6ba, 0xeec4b7, 0xe1afa3, 0xf1cbc5, 0xf3d5cd, 0xeecec1, 0xe7c5b1, 0xe5c1a9, 0xeccebc, 0xf2dbce, 0xf2daca, 0xf2dacd, 0xf0d5c9, 0xeccdbf, 0xeac9bb, 0xe6c0b4, 0xd7b2a1, 0x8b6657, 0x795642, 0x685045, 0x5b483d, 0x6d5d53, 0x5b4b41, 0x3b3029, 0x322824, 0x291e1d, 0x372c29, 0x55473f, 0x31231b, 0x1a1310, 0x332014, 0x3b2517, 0x38251e, 0x7a5343, 0x74554d, 0x543c33, 0x83604e, 0x9d7469, 0xb4877e, 0xc08f8a, 0xc8968e, 0xcd9b94, 0xd4a397, 0xd5a497, 0xcfa196, 0xc4948b, 0xc9978f, 0xc79891, 0xca9e93, 0xd3a495, 0xcd9d88, 0xcda18b, 0xcf9d8d, 0xb98b7b, 0xb88b78, 0xb78c79, 0x987666, 0x957d69, 0xc0a387, 0xba9c83, 0xa88f78, 0x8b7869, 0x655852, 0x564d4b, 0x574d4a, 0x4c4a47, 0x272323, 0x543a32, 0x9b7059, 0xbb8e71, 0xb88d73, 0x987362, 0x936863, 0xa56d70, 0xa67170, 0xa67a71, 0xb1887c, 0xcda190, 0xdfb6a2, 0xe1b8a5, 0xdfb4a1, 0xd1a58f, 0xb08a75, 0x6b4d41, 0x48231b, 0x472522, 0x503e38, 0x56413d, 0x5e403c, 0x6a6969, 0x645957, 0x986a62, 0xe2aba1, 0xecc7c2, 0xf1cfc6, 0xedc9c1, 0xddb8b1, 0xe0b2a3, 0xe7b8ac, 0xf2d2cb, 0xeed0c5, 0xedcfc2, 0xebcbc0, 0xe7c4b5, 0xdfbba6, 0xe6c6b3, 0xefd7c7, 0xf3dcd0, 0xf2d9cf, 0xedd1c5, 0xeaccbd, 0xe4c5b7, 0xe1bead, 0xa88371, 0x674130, 0x755e53, 0x5b4a43, 0x554941, 0x4f423a, 0x443129, 0x372a26, 0x2c1f1a, 0x332923, 0x574842, 0x34251d, 0x16120e, 0x301f12, 0x362417, 0x33241c, 0x2e1f16, 0x30201a, 0x4b362c, 0x83614c, 0x977262, 0xa87e71, 0xb18476, 0xb88a7e, 0xc39287, 0xcb9a8e, 0xd0a394, 0xcda597, 0xc8998a, 0xd29a8f, 0xd9a39a, 0xd79f96, 0xce958b, 0xc28e83, 0xba887f, 0xb28579, 0xb58c77, 0xbf9383, 0xb18876, 0x927264, 0x988775, 0x9c8979, 0x766760, 0x5f5551, 0x595151, 0x5e5354, 0x5c5351, 0x564f4d, 0x5c5555, 0x4d4849, 0x373031, 0x45332c, 0x7a5a47, 0x9e7860, 0xa8836c, 0x987965, 0x9a7b68, 0xac8874, 0xc79a87, 0xd6a595, 0xd8a496, 0xe1b5ac, 0xdfb1a5, 0xd7ab9b, 0xc5a08d, 0x927664, 0x4f362f, 0x401d1a, 0x432123, 0x493d3a, 0x3b3131, 0x322c2d, 0x504645, 0x593a3e, 0xaa7872, 0xeec5bd, 0xf3dcde, 0xedc5c1, 0xcda6a2, 0xcba09a, 0xedc1b9, 0xf3d3ca, 0xf0d8ce, 0xebd0c2, 0xefd7c9, 0xecd1c9, 0xe0b4b3, 0xc99293, 0xc89a8b, 0xe1bfa4, 0xecd2c3, 0xf0d5c9, 0xedd1c3, 0xe9ccbd, 0xe4c5b5, 0xddbead, 0xc8a692, 0x7d5947, 0x5b3a2f, 0x533a32, 0x594942, 0x41332b, 0x392924, 0x2e231e, 0x2c1f1a, 0x2f2622, 0x52433a, 0x322319, 0x120d0a, 0x321d13, 0x2f1e16, 0x2c2018, 0x251712, 0x16110d, 0x33261e, 0x805f49, 0x9d7966, 0xae8574, 0xb8907f, 0xbb9183, 0xbc9485, 0xb98e85, 0xb78c7f, 0xb5867f, 0xb27977, 0xb27177, 0xb9717c, 0xba707d, 0xae6673, 0xad6b78, 0x9d5c6c, 0xab736e, 0xc6957d, 0xc39886, 0xa48070, 0x8a6f60, 0x756d67, 0x584f50, 0x544b4b, 0x5e5353, 0x625858, 0x655958, 0x615455, 0x605757, 0x595151, 0x534c4b, 0x59524f, 0x433e40, 0x40322e, 0x63483a, 0x896755, 0xa37e6a, 0xad8970, 0xbd8f79, 0xce9b8b, 0xdbaaa0, 0xd6a39b, 0xd7a199, 0xd6a799, 0xc8a08f, 0x997f72, 0x695750, 0x4a2f2b, 0x361a18, 0x603c44, 0x693741, 0x6b242d, 0x62272f, 0x54232e, 0x4b212b, 0xa47b76, 0xf0c3ba, 0xf2d1ce, 0xe4bcb9, 0xe4b5b5, 0xf3c9c2, 0xf0d1ca, 0xf1ddd0, 0xebd4c5, 0xeed1c9, 0xe5bdbf, 0xdbadb2, 0xe2afac, 0xd7b0b7, 0xdbb4b0, 0xe5c5ac, 0xe6c9b3, 0xecd0be, 0xebcfc0, 0xe7c9ba, 0xe4c5b5, 0xddbdad, 0xcfac96, 0x957867, 0x685349, 0x4c3225, 0x46322d, 0x45342c, 0x352622, 0x2d2520, 0x2f251d, 0x2a201f, 0x4e3c32, 0x2d1f18, 0xd0b0a, 0x2b1b10, 0x2c1c13, 0x261c18, 0x1f140f, 0x1c140e, 0x201a12, 0x6a4e3b, 0x9f7a65, 0xad8473, 0xba9280, 0xc6a08e, 0xc19d86, 0xb18375, 0xa26c6f, 0x955160, 0xa55469, 0xaf5d73, 0xb6697f, 0xb9647c, 0xc4748a, 0xbf6882, 0xb66c78, 0xba8779, 0xc59582, 0xba937f, 0x9a7a65, 0x6e5c53, 0x4c4647, 0x564d4c, 0x584f50, 0x5a5150, 0x5e5452, 0x655959, 0x625958, 0x605858, 0x605959, 0x585151, 0x595151, 0x5f5657, 0x574f51, 0x3d3635, 0x44342d, 0x6e5446, 0x937663, 0xac8976, 0xbf9281, 0xd09c92, 0xd2a097, 0xc7978b, 0xac897d, 0x877064, 0x836b60, 0x8a6d65, 0x442e2b, 0x2c1717, 0x522633, 0x8b5361, 0x8c434a, 0x842f3d, 0x771c2a, 0x661d24, 0x6d4e4e, 0xa78883, 0xcba59f, 0xd6ada8, 0xd3aca7, 0xd4aea4, 0xdec0b3, 0xdcbba6, 0xeac1bc, 0xe7b0bb, 0xdc98a7, 0xeecdcf, 0xf2e3c2, 0xdcb8b5, 0xe8c4c5, 0xecd3c2, 0xeacebd, 0xebd0bc, 0xedd1c1, 0xe9cebe, 0xe5c8b8, 0xdebead, 0xcdaa95, 0x8f7466, 0x7a6960, 0x593e33, 0x43312d, 0x3f2e29, 0x31201c, 0x231813, 0x2f221c, 0x2e231e, 0x433026, 0x211913, 0x11110d, 0x281a0e, 0x2b1b11, 0x2b231b, 0x1b130a, 0x1b120b, 0x1a130e, 0x412e25, 0x8f6c56, 0xa78471, 0xad8974, 0xc29f89, 0xcca78e, 0xca9a86, 0xbf9186, 0xaf7577, 0xb56575, 0xc56e85, 0xcf859b, 0xcd7e91, 0xcb7d8d, 0xc67f85, 0xc38e82, 0xbe8b7b, 0xbf9380, 0xb1907d, 0x886c5c, 0x594d4d, 0x50474a, 0x554c4c, 0x59504f, 0x594f51, 0x5c5252, 0x605555, 0x645a5a, 0x635a5a, 0x655b5c, 0x5d5556, 0x5b5253, 0x5b5453, 0x645a5b, 0x5f5757, 0x464344, 0x322e2d, 0x433732, 0x654e47, 0x8f7568, 0xa38577, 0xa18174, 0x88716a, 0x745f5a, 0x92746a, 0xbb9284, 0x8d6e68, 0x3b2a27, 0x2f1f1d, 0x301c18, 0x4f222f, 0x6b2c3c, 0x561823, 0x622225, 0x422c2c, 0x856762, 0x9e7c77, 0xa48682, 0xb7968e, 0xa1827a, 0xa98d83, 0xceae97, 0xd6a297, 0xe299a9, 0xe1a4b2, 0xf0ced0, 0xf8ecdb, 0xe4c7bb, 0xdea2ad, 0xeccecc, 0xefd7cd, 0xefd6c9, 0xefd5c4, 0xeed5c7, 0xedd4c7, 0xe7ccbb, 0xddbfac, 0xcaa68f, 0x8b7164, 0x887668, 0x624635, 0x49342a, 0x3d2c23, 0x2e1f19, 0x201612, 0x2e2320, 0x352720, 0x382a21, 0x1b1612, 0x16130f, 0x291911, 0x251a0f, 0x27201a, 0x18120a, 0x1d1209, 0x1d140d, 0x2b1e18, 0x604336, 0x9c7862, 0xa3806e, 0xae8b75, 0xcba78e, 0xc9a08e, 0xbf9586, 0xbb9383, 0xbf9588, 0xc9988f, 0xcc998f, 0xce9d91, 0xcfa192, 0xd1a691, 0xce9b8a, 0xc5917e, 0xbb937e, 0xa28272, 0x68564d, 0x534a4a, 0x53494b, 0x554b4c, 0x595050, 0x595050, 0x5c5353, 0x5d5453, 0x5e5454, 0x625958, 0x645a5c, 0x655f5e, 0x5b5453, 0x5e5657, 0x635859, 0x605658, 0x5e5557, 0x524e4f, 0x54585b, 0x615d60, 0x543c37, 0x5e453d, 0x6d5652, 0x775d5a, 0x94736c, 0xb18781, 0xab8881, 0x846b64, 0x513936, 0x3a2725, 0x3c2b24, 0x3d2521, 0x3b2024, 0x2e211f, 0x332d2a, 0x2d2d2b, 0x6c5855, 0xd2a699, 0xe0b8ad, 0xe7c4b7, 0xd2a695, 0x9f7f72, 0xb68a7e, 0xce818b, 0xd37c91, 0xebcbc9, 0xf9f5e1, 0xeee7da, 0xdea8b5, 0xe9b0be, 0xf1dad6, 0xf0d9d1, 0xefd6c9, 0xeed7c9, 0xeed6cb, 0xeed7cc, 0xe7cebd, 0xdebfab, 0xc09f89, 0x856f62, 0x8b7364, 0x715340, 0x4c3328, 0x3d2c26, 0x30201b, 0x211814, 0x2e231f, 0x32211b, 0x312621, 0x19130e, 0x16130d, 0x291a10, 0x21130c, 0x28201b, 0x17120f, 0x1a1308, 0x1e140d, 0x3a2317, 0x593a27, 0x6f503c, 0x9a7862, 0x9e7c66, 0xb6937b, 0xc6a18c, 0xc09785, 0xc0937f, 0xc59987, 0xd1a592, 0xd7ad9c, 0xdaafa1, 0xd8ab9f, 0xd6a899, 0xd29d8e, 0xc89583, 0xb48c7c, 0x7e6760, 0x534a4a, 0x574e4e, 0x564c4d, 0x554b4c, 0x595051, 0x5b5251, 0x5b5252, 0x5a5251, 0x5b5453, 0x605757, 0x6c6664, 0x746f6e, 0x5a5454, 0x605859, 0x65595b, 0x62585a, 0x5c5556, 0x5d5556, 0x645c5e, 0x878b8d, 0xa5a1a2, 0xa98d89, 0xb3877d, 0xae7f74, 0x997069, 0x936c63, 0x917068, 0x98766d, 0x7e5b55, 0x573831, 0x4e372e, 0x493329, 0x3e2d27, 0x352726, 0x2d211f, 0x312927, 0x352d2d, 0xa7867d, 0xdbb1a2, 0xe4bfb0, 0xe2b9a3, 0xb7927f, 0x956e6e, 0x985867, 0xad7e82, 0xeee1d1, 0xf4f7eb, 0xdca4af, 0xe69bb0, 0xf3d1d9, 0xf4e2e0, 0xf1dbd4, 0xf1d7cb, 0xf0dacd, 0xeedace, 0xedd6cb, 0xe7cebf, 0xdbbeac, 0xae937e, 0x7c675a, 0x7d6354, 0x876b53, 0x563d2f, 0x3e2c25, 0x30201c, 0x271c19, 0x312320, 0x261914, 0x2b221b, 0x1b1611, 0x181510, 0x2c1a0f, 0x21120b, 0x271e17, 0x1b140f, 0x181009, 0x21130b, 0x402313, 0x7e5833, 0x795e46, 0x6f5442, 0x96735e, 0xa07e67, 0xb2917c, 0xbb9783, 0xc19681, 0xca9885, 0xcf9c8f, 0xd29d93, 0xd9a69d, 0xdcada5, 0xd6a39d, 0xd19c91, 0xcb988a, 0xa58076, 0x605354, 0x554c4c, 0x584d4d, 0x564d4d, 0x564d4d, 0x5a5152, 0x5c5656, 0x5a5250, 0x5b5352, 0x5b5252, 0x5e5454, 0x706967, 0x6e6767, 0x5b5455, 0x605959, 0x665a5c, 0x62595a, 0x615858, 0x62595a, 0x615a5a, 0x615a5a, 0x818487, 0xb2c0c7, 0xc2cad0, 0xc7c3c6, 0xc3b3b3, 0xbaa29f, 0xb59f9a, 0xb39d96, 0xa99791, 0x8e7e7a, 0x6d5f57, 0x57463b, 0x46322a, 0x362520, 0x2c201e, 0x312624, 0x2b2424, 0x4b3e3d, 0xb29085, 0xdbb09d, 0xd9b298, 0xcaa68c, 0xa5897a, 0x956469, 0x92686e, 0xbfb4a5, 0xcfa1a7, 0xd7738b, 0xeba7b7, 0xefd3d4, 0xf0d9d6, 0xf0d7d0, 0xf0d8cc, 0xf1dcd0, 0xf0ded3, 0xeed7ce, 0xe4c9be, 0xd4b6a5, 0x9c8173, 0x7a6254, 0x806551, 0x9a7d64, 0x624f40, 0x412d25, 0x2b1c18, 0x2a1e18, 0x2e231e, 0x211714, 0x281f1a, 0x1d1712, 0x16120e, 0x2a1910, 0x21130c, 0x211911, 0x18100a, 0x171006, 0x21130a, 0x3b1f0e, 0x7d522d, 0xac8763, 0x866e56, 0x6c523d, 0x86674d, 0x90735e, 0xa48270, 0xba9480, 0xc79789, 0xcd978a, 0xd4a39a, 0xddb2ad, 0xdeb4b0, 0xd9aca6, 0xd2a298, 0xc5948b, 0x816a66, 0x554d4e, 0x564d4d, 0x564c4d, 0x584d4f, 0x59504f, 0x5b5353, 0x5c5454, 0x5d5552, 0x5e5554, 0x5c5353, 0x5a5051, 0x665c5c, 0x675f5e, 0x5f5758, 0x625859, 0x675c5e, 0x655a5b, 0x5f5759, 0x62595b, 0x625b5c, 0x665c5e, 0x665c5d, 0x848384, 0xc0d2dc, 0xcae0ea, 0xd2e6f0, 0xd9ecf4, 0xdcecf4, 0xd8e9ef, 0xd8eaf1, 0xcddee5, 0x9aa7a8, 0x6d655b, 0x503e35, 0x402e25, 0x2e211f, 0x362b29, 0x39312d, 0x2d2a28, 0x3b3635, 0x876e67, 0xbe9b85, 0xc69d83, 0xc99d88, 0xce9c89, 0xaa6c6f, 0x945763, 0xce778a, 0xd88396, 0xe2b4b6, 0xe4cac6, 0xe8cbc5, 0xecd1c8, 0xeed4c9, 0xf1dacf, 0xf1ded5, 0xeed7d0, 0xe4c6bc, 0xc7a99b, 0x8b7263, 0x7c6351, 0x836653, 0x957962, 0x685449, 0x3e2b25, 0x2f1f1a, 0x2b1f1b, 0x2b1e18, 0x221712, 0x271c17, 0x191511, 0x17130e, 0x2c1b11, 0x24150c, 0x1b130d, 0x171009, 0x180f06, 0x21130a, 0x3d1e0f, 0x794e2e, 0xa87e5a, 0xb79472, 0x947b65, 0x6f5945, 0x6e5440, 0x755a49, 0x987868, 0xbd9588, 0xcda095, 0xd7aba3, 0xdab4b0, 0xd9adab, 0xd6a7a3, 0xca9791, 0x947471, 0x5d5455, 0x584f50, 0x574f4f, 0x575050, 0x5a5151, 0x5b5152, 0x5e5455, 0x5d5556, 0x605656, 0x605856, 0x5d5554, 0x584f50, 0x5e5454, 0x645c5c, 0x5e5758, 0x605758, 0x665b5d, 0x645a5c, 0x615659, 0x615859, 0x61585b, 0x635b5c, 0x6b6163, 0x6b6363, 0x9b9d9d, 0xdbebf1, 0xdbebf3, 0xdeeff5, 0xe1f2f7, 0xe0f0f8, 0xdeeef6, 0xddedf4, 0xbfced4, 0x8b8b87, 0x5f4d44, 0x483935, 0x33211e, 0x352824, 0x403530, 0x504844, 0x49413c, 0x292622, 0x49423e, 0x846e60, 0xbf9b85, 0xddba9a, 0xb6937a, 0x8b5b61, 0xbd7485, 0xd5a7a7, 0xd9bdba, 0xdcbfbc, 0xe2c4bb, 0xe8ccc3, 0xecd2c9, 0xf0d8d1, 0xf0dbd3, 0xebd2ca, 0xe2c4b8, 0xb39687, 0x7f6858, 0x7c614d, 0x8a735e, 0x927964, 0x644f46, 0x3b261f, 0x30221e, 0x30241f, 0x2c1e19, 0x251c18, 0x261d19, 0x1e1715, 0x1c1813, 0x271910, 0x22160c, 0x1e140b, 0x17100a, 0x1a1006, 0x20140b, 0x3a2011, 0x724929, 0xa57c59, 0xb38d6a, 0xb9987a, 0xa78c75, 0x876f5b, 0x6e5744, 0x624e3f, 0x83655b, 0xaa857a, 0xc1998e, 0xcba198, 0xc89d96, 0xb08680, 0x816563, 0x5b5253, 0x5a5353, 0x595151, 0x574f50, 0x5b5152, 0x5b5252, 0x5c5354, 0x605456, 0x605756, 0x615557, 0x605757, 0x5d5555, 0x565050, 0x564f4e, 0x635b5c, 0x615b5a, 0x605858, 0x655a5d, 0x63595b, 0x645b5d, 0x635b5c, 0x615b5b, 0x625c5c, 0x6a6062, 0x6e6567, 0x6d6768, 0xa5a9ab, 0xe2f1f8, 0xe3f3f8, 0xe2f4f8, 0xe2f4f8, 0xe1f3f7, 0xe4f4f8, 0xd3e3ea, 0xabb5b8, 0x6e5d53, 0x564743, 0x483e39, 0x2f211d, 0x302421, 0x3f322e, 0x5e4c41, 0x5a493b, 0x443e3c, 0x312c2c, 0x554c47, 0xa79183, 0xd6b89d, 0xae9580, 0x8c7775, 0xb09793, 0xc9aba1, 0xd4b5a9, 0xdec2b4, 0xe6c9c0, 0xecd0c8, 0xeccfc7, 0xe8cac6, 0xe4c7be, 0xd3b4a7, 0x8e766b, 0x816c5b, 0x876c58, 0x937f6c, 0x8a7461, 0x614f46, 0x3f2f26, 0x402c22, 0x37251f, 0x2e201c, 0x281e19, 0x221a14, 0x1d1713, 0x221d19, 0x2c1b10, 0x261910, 0x20160c, 0x160f07, 0x1e1108, 0x1e130b, 0x2d1a0f, 0x5a351a, 0x8d6844, 0xa47e5d, 0xab866a, 0xb9987d, 0xb69980, 0xaa917b, 0x97816e, 0x7e6a5d, 0x735d51, 0x765b4f, 0x70574e, 0x62514d, 0x5a4d4d, 0x544d4d, 0x5a5253, 0x5e5356, 0x5d5556, 0x565051, 0x5a5253, 0x5d5454, 0x5d5656, 0x615858, 0x625859, 0x5f5657, 0x5f5656, 0x5e5656, 0x5a5252, 0x564e4f, 0x635a5b, 0x645c5c, 0x615859, 0x63585a, 0x635b5b, 0x5f5a5b, 0x645b5c, 0x685f61, 0x635b5c, 0x655a5d, 0x6b6364, 0x716769, 0x716d6d, 0xb4bfc4, 0xe3f3fb, 0xdff0f7, 0xdceef6, 0xdaecf5, 0xdbecf5, 0xd8e9f2, 0xbecdd5, 0x857c77, 0x5e4943, 0x68605c, 0x504743, 0x31211e, 0x34241f, 0x45322c, 0x5a4335, 0x5c5045, 0x4e413c, 0x3b3533, 0x3d3937, 0x5e544e, 0x8d7c6d, 0x8b796b, 0x7e6e69, 0xa48b81, 0xc7a696, 0xd7baac, 0xe0c2b8, 0xe6cac2, 0xe6c8c2, 0xdebcb7, 0xd6b6ab, 0xa58c82, 0x796a5f, 0x947d69, 0x88705d, 0x95806a, 0x756356, 0x5f4f48, 0x40302a, 0x482f25, 0x41302a, 0x372a24, 0x362923, 0x2b2018, 0x1c1712, 0x211b18, 0x311e11, 0x2c1d13, 0x20150c, 0x1a1107, 0x211309, 0x331f14, 0x352214, 0x3a2112, 0x59361b, 0x7d5837, 0x956d52, 0xab8368, 0xba9a80, 0xb89a83, 0xb69a84, 0xb19680, 0x9f8671, 0x8c735e, 0x5a4940, 0x524849, 0x605656, 0x5e5455, 0x5d5254, 0x5d5455, 0x615a58, 0x5d5657, 0x585151, 0x5c5555, 0x605858, 0x655a5c, 0x645a5c, 0x625b5a, 0x5d5758, 0x5f5657, 0x5c5455, 0x5c5657, 0x645e5f, 0x6a6264, 0x645d5e, 0x625a5b, 0x655d5f, 0x645c5d, 0x655c5e, 0x6a5e61, 0x635a5c, 0x675b5e, 0x6d6467, 0x6e6768, 0x706669, 0x807f81, 0xc9d8df, 0xdff0f8, 0xdfeff5, 0xe0eff7, 0xddecf7, 0xdfedf7, 0xd6e9f2, 0x9fa5a9, 0x675750, 0x5e534f, 0x665e5a, 0x4e3c33, 0x45352e, 0x433228, 0x523a2d, 0x4d4134, 0x453c34, 0x58514b, 0x5e564f, 0x2b2622, 0x292828, 0x353130, 0x413a39, 0x544d4d, 0x9c847b, 0xcaa69b, 0xd8b8ae, 0xdcbeb6, 0xdabcb4, 0xceaea7, 0xa88d85, 0x7d6c64, 0x887564, 0x9b816e, 0x8c7663, 0x8f7a67, 0x68584d, 0x5d4c42, 0x422c27, 0x462e25, 0x3a2f29, 0x362b24, 0x3c2f27, 0x322220, 0x1b1511, 0x1d1a15, 0x372312, 0x352417, 0x24180e, 0x25170f, 0x25140a, 0x473021, 0x523d2e, 0x4d3320, 0x604533, 0x71523b, 0x805b3e, 0x896145, 0xa17b5e, 0xb19075, 0xae9279, 0xa98c73, 0xa68771, 0x7d6755, 0x5d504a, 0x635758, 0x625758, 0x5f5456, 0x605656, 0x5e5557, 0x5e5558, 0x61595a, 0x5c5454, 0x5c5253, 0x615759, 0x685d5e, 0x695d5f, 0x675d5d, 0x635a5b, 0x615759, 0x625859, 0x5b5454, 0x6f6868, 0x766e6d, 0x6d6465, 0x6b6062, 0x6c6163, 0x6d6263, 0x6d6264, 0x706566, 0x696263, 0x605e5c, 0x686364, 0x6a6566, 0x71696b, 0x706669, 0x999b9d, 0xd8eaf1, 0xd9eaf3, 0xddedf4, 0xe3f1f8, 0xdfeef6, 0xdcedf7, 0xbfd1db, 0x7c7a79, 0x594941, 0x655a55, 0x5d4538, 0x605249, 0x4a362b, 0x52372a, 0x4c3a30, 0x413631, 0x59524b, 0x60514b, 0x43332c, 0x494039, 0x433e3c, 0x433b38, 0x2b2928, 0x322f2f, 0x85736c, 0xba9d95, 0xc3a49d, 0xb1958d, 0x88736c, 0x534a49, 0x534642, 0x766053, 0x927968, 0x947c66, 0x705a4b, 0x644e45, 0x4f3c33, 0x422d23, 0x3f271e, 0x362823, 0x402f27, 0x3f2e26, 0x261c1a, 0x1c1512, 0x1a1612, 0x3c2816, 0x3a2618, 0x322012, 0x432f1f, 0x2c190d, 0x482f1e, 0x4d3d31, 0x462c1e, 0x523724, 0x472f23, 0x623f27, 0x936f4e, 0x8b664c, 0x9e795f, 0xaf9077, 0xac8e76, 0x856858, 0x4a3832, 0x605350, 0x615757, 0x5f5556, 0x5e5556, 0x625959, 0x61595a, 0x605658, 0x605659, 0x625a5b, 0x5f5557, 0x5f5758, 0x685d5e, 0x6c5f61, 0x6a5f60, 0x6a5e60, 0x6a6163, 0x645d5e, 0x60595a, 0x696466, 0x6b6566, 0x6b6566, 0x6b6466, 0x686163, 0x666061, 0x655e60, 0x665f62, 0x605d5f, 0x585659, 0x575858, 0x555656, 0x575659, 0x636163, 0x6f6a6b, 0xb9c0c3, 0xdbedf7, 0xd4e5ef, 0xdaeaf3, 0xe3f2f8, 0xddeef6, 0xd8eaf3, 0x9fa8af, 0x5e524a, 0x635953, 0x5d453a, 0x5a483f, 0x4e3c35, 0x4f3325, 0x412e25, 0x453b34, 0x5a4d46, 0x56463f, 0x3f302a, 0x49403c, 0x504a47, 0x5d5248, 0x645f5a, 0x323230, 0x1b1a1c, 0x3f3a3a, 0x524947, 0x453d3c, 0x332d29, 0x41332d, 0x332b28, 0x372e2c, 0x605041, 0x6a5342, 0x584135, 0x564034, 0x554131, 0x4a3326, 0x473428, 0x4e4037, 0x46332a, 0x402e25, 0x28211c, 0x1d1510, 0x1b1713, 0x3b2817, 0x483727, 0x352112, 0x543d27, 0x483122, 0x462915, 0x49392b, 0x423024, 0x4d3222, 0x4b3020, 0x371c12, 0x613d27, 0x8c684c, 0x88634c, 0xa6836d, 0x947663, 0x452c26, 0x4f3f3b, 0x655a59, 0x5f5555, 0x5e5556, 0x5e5556, 0x60585a, 0x61585a, 0x61585b, 0x5f5a5b, 0x625a5c, 0x645b5d, 0x615859, 0x675c5e, 0x6c6162, 0x6c6263, 0x74686a, 0x736b6b, 0x635c5d, 0x6c6363, 0x5e595b, 0x544f50, 0x605a5a, 0x565355, 0x565456, 0x5b5a5b, 0x5d5a5c, 0x5c5759, 0x595455, 0x595456, 0x5c5457, 0x5b5658, 0x535053, 0x4b4d50, 0x515053, 0x78797b, 0xd6e4e9, 0xd9ebf4, 0xd1e3ed, 0xd8e9f1, 0xe1f0f8, 0xe1eff8, 0xcbdbe4, 0x7f8082, 0x625753, 0x634e46, 0x513c2f, 0x514037, 0x482f20, 0x3b2d26, 0x4a4037, 0x564233, 0x4c3c34, 0x413530, 0x4f433e, 0x504945, 0x554841, 0x696460, 0x53504f, 0x362d29, 0x322825, 0x312827, 0x322b26, 0x322826, 0x453430, 0x453b35, 0x3a3534, 0x352e27, 0x46342a, 0x4c362b, 0x523f34, 0x543a28, 0x4b3228, 0x5b4b40, 0x574538, 0x49372e, 0x3b271f, 0x281e1b, 0x231915, 0x1c1512, 0x392417, 0x544437, 0x3f2515, 0x543a24, 0x503e31, 0x57381d, 0x4b3b2b, 0x2b241b, 0x362115, 0x493123, 0x4a2e20, 0x3e2011, 0x5c3924, 0x7e5c44, 0x93755b, 0x6a5041, 0x32211c, 0x5e504d, 0x625758, 0x625859, 0x615959, 0x5e5558, 0x615759, 0x61585b, 0x62595b, 0x615a5b, 0x605a5a, 0x635c5d, 0x635a5b, 0x655e5f, 0x6f6164, 0x716566, 0x766e6f, 0x746d6d, 0x696060, 0x6b6062, 0x6d6465, 0x585151, 0x615859, 0x5b5455, 0x625b5c, 0x6d6367, 0x6d6365, 0x675f60, 0x60595c, 0x5f585a, 0x61595b, 0x635c5f, 0x635b5e, 0x635c5e, 0x5c575a, 0x535053, 0x919a9d, 0xd6eaf1, 0xd5e7f1, 0xcbdfe9, 0xd9e8f2, 0xe0eef7, 0xdfeef8, 0xb8c5cd, 0x655c5c, 0x5f4d45, 0x564135, 0x524035, 0x492f20, 0x362925, 0x4a382c, 0x4f3725, 0x443229, 0x493d36, 0x4a403a, 0x493d34, 0x4f4139, 0x625b58, 0x464243, 0x3a2f2b, 0x44362d, 0x3f3330, 0x362c28, 0x332926, 0x40312d, 0x463d38, 0x484340, 0x3f322e, 0x3d2a23, 0x4b352d, 0x563a28, 0x523526, 0x675042, 0x634f3d, 0x523e31, 0x483a30, 0x36251d, 0x2f241f, 0x2c1e18, 0x1c1510, 0x372217, 0x4e3b30, 0x472b1a, 0x583a20, 0x4d3f33, 0x503725, 0x5e4736, 0x352825, 0x2c1a12, 0x3a2115, 0x392115, 0x3b2216, 0x442618, 0x7c5b40, 0x896951, 0x5a4233, 0x3d2f2a, 0x635654, 0x625659, 0x635759, 0x62585a, 0x5e5456, 0x61575a, 0x625b5b, 0x61585b, 0x61595a, 0x615b5c, 0x635d5f, 0x675f61, 0x675d5f, 0x6c6264, 0x75696c, 0x726b6c, 0x736a6c, 0x70686a, 0x645b5d, 0x736a6a, 0x605a5c, 0x575152, 0x5b5456, 0x615a5b, 0x6b6063, 0x6e6467, 0x6b6064, 0x63595e, 0x60575b, 0x60575a, 0x625b5e, 0x635b5e, 0x645c60, 0x685f65, 0x665c61, 0x5c575b, 0x919da1, 0xcee1eb, 0xd5e6f0, 0xc7dbe6, 0xdaeaf3, 0xe3f2fa, 0xcfdce5, 0x676569, 0x554741, 0x5d4436, 0x52413a, 0x3e2c25, 0x34231f, 0x483024, 0x442e23, 0x412c23, 0x50453f, 0x423e3b, 0x42362e, 0x4d4339, 0x4f4846, 0x3d3835, 0x332b28, 0x3c302a, 0x3b312d, 0x342b28, 0x322b26, 0x3d2f2b, 0x3a2f2d, 0x3a312f, 0x3b2a26, 0x49352a, 0x4c342a, 0x4d2e21, 0x573d2d, 0x644d3b, 0x60483a, 0x493428, 0x3c302c, 0x382922, 0x342823, 0x281c19, 0x241c16, 0x372013, 0x4c3526, 0x563824, 0x59381e, 0x593d26, 0x432f25, 0x3b261b, 0x37221a, 0x382016, 0x583821, 0x3e2214, 0x331a0e, 0x391f13, 0x6d4c33, 0x83664d, 0x5f4432, 0x574640, 0x625859, 0x5f5558, 0x61585a, 0x615a5a, 0x5e5555, 0x5e5657, 0x655d5e, 0x645d5e, 0x605a5a, 0x625b5c, 0x645c5f, 0x6a6364, 0x685f61, 0x6a5f63, 0x706668, 0x6f6768, 0x72696a, 0x726c6d, 0x686063, 0x706868, 0x6a6565, 0x575254, 0x595455, 0x625a5c, 0x6c6263, 0x6f6668, 0x6c6366, 0x665e61, 0x615a5c, 0x5e585a, 0x625c5e, 0x665d60, 0x645d60, 0x645c5f, 0x6b6067, 0x686166, 0x635f62, 0x9dacb3, 0xd5e7f1, 0xcee1ec, 0xc8dbe7, 0xe5f6ff, 0xacb5bb, 0x645e63, 0x534f50, 0x57443a, 0x4e3a2e, 0x392724, 0x37231e, 0x3d291e, 0x3b271d, 0x3d2a22, 0x514742, 0x403b39, 0x3d3330, 0x4c423d, 0x443835, 0x413530, 0x322826, 0x3b2e29, 0x3d332e, 0x342d2a, 0x322926, 0x372b27, 0x322520, 0x2b1b18, 0x432e28, 0x62422d, 0x593725, 0x5d3f2d, 0x5b412e, 0x604634, 0x553e31, 0x432c24, 0x44312b, 0x4a352b, 0x352c25, 0x2b1f1a, 0x2b221f, 0x462c1d, 0x533d2c, 0x4d3526, 0x4d2f1c, 0x5e4128, 0x60442e, 0x45301f, 0x332318, 0x381f13, 0x5e3a20, 0x55331b, 0x30170d, 0x33180d, 0x5e3e2b, 0x8d7058, 0x624938, 0x5c4c4a, 0x605658, 0x5b5354, 0x625a5c, 0x645a5c, 0x61585a, 0x5b5556, 0x62585a, 0x696061, 0x676062, 0x625a5c, 0x60595c, 0x675f62, 0x696163, 0x6b5f62, 0x6e6466, 0x6b6567, 0x72686b, 0x746d6e, 0x6f686a, 0x6f6768, 0x70676a, 0x5d5859, 0x5a5455, 0x62595b, 0x6b6065, 0x6f6468, 0x6d6466, 0x685f62, 0x615a5c, 0x5f5a5b, 0x635b5e, 0x675e62, 0x645c5f, 0x655c60, 0x665e62, 0x6e6568, 0x675f63, 0x6f7075, 0xb6c9d2, 0xddedf7, 0xc4d8e6, 0xcbdee9, 0x81858c, 0x675d64, 0x5e5c60, 0x4a4341, 0x483127, 0x3d2a23, 0x422e24, 0x3a2820, 0x38261e, 0x3f2a21, 0x524842, 0x433e3a, 0x3d3633, 0x49413b, 0x3e332f, 0x3b302c, 0x302a27, 0x3b2f2c, 0x3c3330, 0x362f2b, 0x302822, 0x30221d, 0x271a13, 0x3b291f, 0x5b3c2f, 0x78533e, 0x805740, 0x755238, 0x684831, 0x5d4334, 0x563f2f, 0x4c3329, 0x4e3931, 0x4c372d, 0x3f3228, 0x3d271b, 0x2e211b, 0x503925, 0x563b29, 0x594537, 0x44291a, 0x4b2e19, 0x644225, 0x604328, 0x503828, 0x533825, 0x775135, 0x6f4930, 0x3f2315, 0x543624, 0x6b4a36, 0x9b7960, 0x654c41, 0x584c4b, 0x5f5557, 0x5a5153, 0x61595b, 0x665b5e, 0x60595b, 0x5c5758, 0x5e5758, 0x635b5d, 0x696063, 0x655f61, 0x625c5e, 0x625b5e, 0x6b6568, 0x6e6568, 0x6a6263, 0x6a6464, 0x6e6669, 0x72686b, 0x746c6e, 0x706969, 0x71686a, 0x625b5d, 0x5a5355, 0x61585b, 0x6b6065, 0x706567, 0x6e6567, 0x6a6063, 0x635b5e, 0x605a5b, 0x635a5c, 0x685e61, 0x655d5f, 0x645c60, 0x665c60, 0x6d6367, 0x6d6469, 0x645c62, 0x878f95, 0xd5e8f1, 0xd6eaf6, 0xa5b5c0, 0x6d6a6c, 0x686167, 0x635f63, 0x595657, 0x383130, 0x3c2720, 0x412d26, 0x443127, 0x382921, 0x3f2920, 0x54473f, 0x3c3532, 0x312a28, 0x403431, 0x3b302a, 0x30261f, 0x332c29, 0x3c322d, 0x3c362f, 0x312b28, 0x2c201f, 0x261b17, 0x291e19, 0x403129, 0x624135, 0x956b58, 0xa87a63, 0x87583f, 0x653e27, 0x5e4238, 0x634736, 0x4d3224, 0x50423d, 0x4f3b31, 0x48372e, 0x452f23, 0x36231a, 0x503620, 0x573720, 0x5f4434, 0x443125, 0x311c14, 0x432718, 0x583e28, 0x5c483b, 0x593a29, 0x6e442a, 0x775138, 0x4f2e1c, 0x6e4c33, 0x86644a, 0x97755e, 0x5b433a, 0x5c5453, 0x5d5556, 0x5b5354, 0x5f5858, 0x655c5d, 0x635b5d, 0x5d5658, 0x5e5759, 0x625a5b, 0x665c5f, 0x696163, 0x655f60, 0x635b5e, 0x6a6364, 0x736c6d, 0x696264, 0x696264, 0x6c6669, 0x6d6567, 0x736c6c, 0x70696a, 0x71696a, 0x675f61, 0x5a5356, 0x625759, 0x6a5f61, 0x6e6266, 0x6e6668, 0x6d6466, 0x665d60, 0x61585c, 0x635a5c, 0x6a5f62, 0x6a5e63, 0x665b5f, 0x635c5e, 0x6a6265, 0x6f666a, 0x6c6266, 0x68676a, 0xb1c2cc, 0xe2f5ff, 0x939ba2, 0x685f63, 0x686267, 0x605d60, 0x5d595a, 0x494848, 0x372b29, 0x472f26, 0x50372a, 0x3b2e24, 0x3d2920, 0x524239, 0x403730, 0x27221f, 0x342a26, 0x392a26, 0x2b1f1b, 0x2f2928, 0x3a3431, 0x37312e, 0x312825, 0x332b28, 0x302623, 0x2c211c, 0x382924, 0x654638, 0x9e7262, 0xba8c79, 0xa67661, 0x6b432e, 0x664534, 0x64402a, 0x56382a, 0x514543, 0x4f3e39, 0x4c403b, 0x4b372d, 0x4b382e, 0x492a19, 0x5b3b23, 0x472b20, 0x452a19, 0x38241a, 0x412416, 0x583a26, 0x5d422e, 0x5d402c, 0x6a4222, 0x704c31, 0x4a2717, 0x754e32, 0xa17f62, 0x826049, 0x533d35, 0x60585b, 0x5c5455, 0x5a5255, 0x5a5455, 0x5f5859, 0x615b5c, 0x5e5859, 0x5e575a, 0x635a5d, 0x655c60, 0x696162, 0x686062, 0x666062, 0x645f60, 0x706c6c, 0x6a6466, 0x6c6467, 0x6e6669, 0x6c6264, 0x70696b, 0x70696d, 0x726a6c, 0x6c6367, 0x5b5356, 0x62585a, 0x6a6062, 0x6b6264, 0x6c6266, 0x6c6466, 0x665f61, 0x605a5c, 0x645a5e, 0x675f61, 0x696063, 0x675d62, 0x635c5f, 0x665e62, 0x6c6367, 0x6e6669, 0x675f62, 0x9099a1, 0xd0e4ef, 0x7b7c80, 0x6a6265, 0x686265, 0x615e60, 0x5e595c, 0x585356, 0x403a3a, 0x47362e, 0x553d33, 0x4a3930, 0x463027, 0x4b3b35, 0x544b46, 0x272221, 0x312924, 0x3a2c27, 0x251c17, 0x272421, 0x332e2d, 0x3e3736, 0x3b3231, 0x39302e, 0x312520, 0x2d201c, 0x47352b, 0x5c4235, 0x8f6657, 0xbb8e79, 0xae8167, 0x744c37, 0x684936, 0x6d4832, 0x5e3f2e, 0x4f4040, 0x4c423f, 0x504946, 0x615149, 0x523f35, 0x442515, 0x4d2f1d, 0x3f261b, 0x271409, 0x382111, 0x422717, 0x583620, 0x5b361f, 0x624128, 0x5e3e28, 0x52311c, 0x583016, 0x865f3e, 0x977559, 0x71523b, 0x564944, 0x5d5758, 0x5a5454, 0x585152, 0x595154, 0x5c5557, 0x60595a, 0x5d5658, 0x5e5959, 0x635c5e, 0x645c5e, 0x655d61, 0x6a6366, 0x6a6566, 0x646061, 0x6b6769, 0x6c6868, 0x6c6567, 0x6d6669, 0x6b6164, 0x6f6669, 0x746c70, 0x716a6b, 0x6d6367, 0x5a5557, 0x5f585b, 0x6d6264, 0x6c6466, 0x6b6164, 0x6d6367, 0x6a6264, 0x635c5e, 0x645b5d, 0x675e61, 0x6b6265, 0x6a6064, 0x665d60, 0x675c60, 0x695f63, 0x6d6367, 0x6a6164, 0x787c81, 0x98a7b1, 0x6c676b, 0x6c6468, 0x656163, 0x615c61, 0x5e595b, 0x5b5557, 0x453f40, 0x4b423c, 0x57463f, 0x4e3c36, 0x523e32, 0x4a382d, 0x5c5551, 0x2e2927, 0x2a2422, 0x403631, 0x241a16, 0x221d1a, 0x2a2320, 0x38322e, 0x3b3635, 0x393534, 0x302721, 0x2e201a, 0x563c2c, 0x593d2f, 0x785340, 0xa97c62, 0xa07459, 0x774f3b, 0x674a3a, 0x654938, 0x553b2e, 0x58504f, 0x4c403d, 0x554c49, 0x554944, 0x3e342e, 0x3b2112, 0x432717, 0x3f2818, 0x27180e, 0x21120a, 0x2a160b, 0x3d2111, 0x4d2915, 0x654228, 0x533728, 0x573923, 0x7b5939, 0x91714a, 0x95755c, 0x695146, 0x585151, 0x5b5457, 0x5a5356, 0x575153, 0x595153, 0x595356, 0x5e5659, 0x5f595b, 0x5e595b, 0x655c5e, 0x645d5f, 0x655d60, 0x6c6466, 0x6e6769, 0x676365, 0x656063, 0x726e6e, 0x6c666a, 0x6b6467, 0x6a6165, 0x6b6465, 0x736f6e, 0x706a6a, 0x6a6367, 0x5c5659, 0x5f585a, 0x695e61, 0x6c6165, 0x706568, 0x6e686a, 0x6c6567, 0x665e61, 0x645c5f, 0x645c5f, 0x6c6266, 0x6e6469, 0x695f63, 0x675c60, 0x685d64, 0x6c6168, 0x6d6467, 0x6b686b, 0x6c6b70, 0x6e676b, 0x6b6367, 0x615e62, 0x5e5c5e, 0x5d575a, 0x5e585a, 0x484344, 0x4e4642, 0x514540, 0x4b3830, 0x4b3d33, 0x523f31, 0x574f49, 0x373230, 0x282322, 0x463f3c, 0x261c18, 0x201b17, 0x272421, 0x332e2d, 0x43403f, 0x3b3937, 0x302725, 0x2a1e1b, 0x563a2d, 0x5b3a2a, 0x64412d, 0x8c624a, 0x8a5d47, 0x795440, 0x805a44, 0x674532, 0x483028, 0x646160, 0x463b37, 0x463f3a, 0x383231, 0x3d312d, 0x3b2315, 0x412615, 0x3b2315, 0x2f1d11, 0x21160e, 0x27160d, 0x462b17, 0x4d301e, 0x452819, 0x573724, 0x8b684e, 0x8c725a, 0x684f2b, 0x877057, 0x4e3a32, 0x565150, 0x5a5456, 0x595254, 0x585454, 0x595354, 0x585253, 0x5a5356, 0x5e595a, 0x605a5d, 0x645c5f, 0x665e60, 0x676063, 0x696264, 0x6d6668, 0x6b676a, 0x646162, 0x6f696b, 0x706a6e, 0x696365, 0x6a6165, 0x6a6366, 0x716b6c, 0x70696b, 0x6c6568, 0x60585c, 0x61585c, 0x675c5f, 0x6d6266, 0x72696b, 0x736b6d, 0x6e666a, 0x665e62, 0x625a5d, 0x635b5f, 0x6b6064, 0x70686b, 0x6e6468, 0x675d62, 0x645c60, 0x6a6065, 0x6f6568, 0x6e696c, 0x69666b, 0x6d6469, 0x686266, 0x605c5f, 0x5e585c, 0x5b5559, 0x5d5759, 0x4b4548, 0x4f4949, 0x4e4543, 0x4b3a32, 0x493935, 0x4f443e, 0x544a44, 0x403836, 0x241d1b, 0x3e3630, 0x2f2520, 0x211a17, 0x252121, 0x2b2727, 0x363332, 0x3b3738, 0x312826, 0x271a16, 0x4d3426, 0x63402f, 0x754e37, 0x875f45, 0x7b533e, 0x815f49, 0x865d44, 0x6a3f2a, 0x4b332d, 0x585452, 0x352d2a, 0x463e3b, 0x37312f, 0x534842, 0x3d2316, 0x4a2e1a, 0x49301b, 0x472f1c, 0x402e1f, 0x443120, 0x533621, 0x443120, 0x241e1b, 0x5b432d, 0x735e49, 0x504840, 0x4c453d, 0x574e44, 0x3d302b, 0x575150, 0x585254, 0x595253, 0x575254, 0x585154, 0x5a5455, 0x5a5456, 0x5b5557, 0x5e595a, 0x615c5f, 0x625f5f, 0x676062, 0x696163, 0x696566, 0x6d686a, 0x696467, 0x686364, 0x706a6d, 0x686264, 0x666061, 0x6d6669, 0x6a6365, 0x6e6768, 0x6e6769, 0x62595e, 0x62595d, 0x655d5e, 0x6c6465, 0x71686b, 0x756b6e, 0x70666a, 0x676163, 0x635c5e, 0x645b5f, 0x685c60, 0x6d6467, 0x6f6869, 0x6b6166, 0x655d61, 0x655d61, 0x6b6164, 0x70696b, 0x646066, 0x6a6266, 0x625e63, 0x5f5b5e, 0x5d585a, 0x5d5859, 0x5e575a, 0x494446, 0x4f4949, 0x4d4644, 0x4a4039, 0x4a3d3a, 0x443a38, 0x4d413c, 0x372c2a, 0x1b1614, 0x34261e, 0x332722, 0x201917, 0x24201e, 0x2a2523, 0x2d2a28, 0x383334, 0x2a2220, 0x231716, 0x432d23, 0x623e28, 0x7a5137, 0x8a5e44, 0x774f3b, 0x7d5742, 0x825841, 0x643d29, 0x4e3c38, 0x413935, 0x2e2522, 0x352a28, 0x4a423f, 0x524948, 0x3a2213, 0x412918, 0x402d1d, 0x432f20, 0x392618, 0x352314, 0x3e2415, 0x382a1e, 0x1d1f1f, 0x2a2420, 0x212223, 0x1a2022, 0x4d4840, 0x826e5b, 0x4a3d3b, 0x555050, 0x555051, 0x575154, 0x555152, 0x575254, 0x5b5457, 0x5c5558, 0x5c5557, 0x5e5859, 0x615a5d, 0x645f60, 0x666163, 0x676264, 0x696364, 0x6a6567, 0x6a6567, 0x646062, 0x6d696c, 0x686365, 0x645c5f, 0x6d6668, 0x676062, 0x6a6264, 0x6c6569, 0x5e575b, 0x60585b, 0x675d5f, 0x6d6568, 0x71686c, 0x736a6d, 0x71696c, 0x6b6466, 0x645d60, 0x60595b, 0x625a5d, 0x6a5f63, 0x6e6568, 0x6e6467, 0x696063, 0x665f62, 0x675e64, 0x6e666a, 0x656165, 0x635f62, 0x605d60, 0x5f5a5d, 0x5d575a, 0x5e5759, 0x5c5657, 0x4e4748, 0x494443, 0x4c4444, 0x453d3c, 0x4b433f, 0x332823, 0x43362f, 0x372d29, 0x241f1c, 0x322822, 0x32241e, 0x201915, 0x1f1a16, 0x23201c, 0x292725, 0x2d2826, 0x231b18, 0x261915, 0x37221b, 0x5c3a27, 0x7b523a, 0x8b5e40, 0x78503a, 0x7e5743, 0x7c533c, 0x4b2818, 0x3b2d2b, 0x362e2a, 0x281a16, 0x312a28, 0x463f3b, 0x342f2c, 0x2b1b10, 0x422614, 0x3a2518, 0x3a2719, 0x2b1f15, 0x281910, 0x432819, 0x3f2f22, 0x252626, 0x24221e, 0x1f2021, 0x6a6150, 0x474744, 0x332e2b, 0x544c49, 0x5a5555, 0x5a5656, 0x5c5759, 0x5c5758, 0x5c5758, 0x5a5557, 0x5b5658, 0x5b5657, 0x5b5658, 0x5f5a5a, 0x645d5e, 0x665f62, 0x676064, 0x666062, 0x676264, 0x686566, 0x645f61, 0x6c6768, 0x696266, 0x5e595d, 0x696465, 0x666062, 0x686163, 0x6f676a, 0x60585b, 0x60595c, 0x645b5e, 0x6d6466, 0x71686b, 0x746a6e, 0x746b6f, 0x6d6469, 0x655e61, 0x5f585a, 0x5f5658, 0x645a5e, 0x6b6063, 0x6c6266, 0x6c6166, 0x6a6064, 0x685f65, 0x6d6568, 0x656569, 0x5b626c, 0x645c60, 0x5d555b, 0x5d585b, 0x5d5758, 0x5b5255, 0x53494e, 0x3f3b3c, 0x524d4c, 0x3c3536, 0x4e443d, 0x372c29, 0x46372f, 0x3a3430, 0x352d2a, 0x3e3633, 0x392a23, 0x261b18, 0x1b1615, 0x1f1b19, 0x272120, 0x292420, 0x211b18, 0x291e1b, 0x36231c, 0x472e29, 0x80533a, 0x82533a, 0x815740, 0x7f553f, 0x674028, 0x351d16, 0x2d2321, 0x2d211b, 0x251a16, 0x2d2621, 0x2e2724, 0x2d2724, 0x241a11, 0x342115, 0x452d18, 0x372617, 0x302118, 0x24160e, 0x3b2413, 0x443426, 0x1d1e1f, 0x322c23, 0x191b1f, 0x5b4e40, 0x7c705e, 0x3a3737, 0x514c4c, 0x5d5859, 0x5e5759, 0x595456, 0x5a5556, 0x5c585a, 0x5d585a, 0x5b5859, 0x5c5859, 0x5a5556, 0x5a5758, 0x615a5c, 0x635e61, 0x656163, 0x656064, 0x625d60, 0x656262, 0x635f62, 0x645f61, 0x656164, 0x595659, 0x635e5f, 0x635d5f, 0x686364, 0x6d6569, 0x5f575a, 0x61595b, 0x625a5b, 0x696164, 0x6f6668, 0x726c6d, 0x736b6f, 0x6e666a, 0x695f63, 0x60595c, 0x5c5659, 0x60595c, 0x665d60, 0x6b6064, 0x6b6165, 0x675f62, 0x696265, 0x6c6567, 0x666566, 0x606167, 0x675f63, 0x625a5c, 0x5b5558, 0x5a5356, 0x575153, 0x575254, 0x3d3b3c, 0x554e4d, 0x3d3838, 0x483e37, 0x413531, 0x473935, 0x443e3e, 0x4c4641, 0x463d38, 0x433632, 0x30231c, 0x211c1a, 0x211c1c, 0x24201e, 0x2a2320, 0x251e1b, 0x261c1a, 0x382722, 0x4b3228, 0x82573a, 0x805336, 0x794e37, 0x6f452c, 0x442417, 0x271916, 0x251814, 0x20110e, 0x1d1310, 0x292320, 0x2f292a, 0x261c18, 0x2c2113, 0x292015, 0x574127, 0x4d3420, 0x3c271a, 0x271b12, 0x2a180d, 0x513b28, 0x262424, 0x423627, 0x353432, 0x34322f, 0x5e5243, 0x474140, 0x524e4e, 0x5d5759, 0x5a5457, 0x575252, 0x565051, 0x544f51, 0x514e4f, 0x545152, 0x5b5858, 0x5e595b, 0x5f595c, 0x60595c, 0x615b5d, 0x635e60, 0x646164, 0x635f60, 0x615d5d, 0x625c5f, 0x5f5b5d, 0x645f61, 0x5a5659, 0x605b5c, 0x615a5d, 0x686264, 0x696366, 0x5c585a, 0x5e595a, 0x625a5d, 0x6a6264, 0x6d6668, 0x726a6c, 0x70686b, 0x6c6468, 0x6a6064, 0x63585d, 0x5c5659, 0x5e585b, 0x625a5c, 0x655b5e, 0x685f62, 0x685e61, 0x655f61, 0x635c5f, 0x646469, 0x616469, 0x625a5d, 0x5b5558, 0x545053, 0x565054, 0x555153, 0x595151, 0x443f41, 0x474141, 0x493c37, 0x443c38, 0x4d3e38, 0x403230, 0x483e39, 0x493a33, 0x473a32, 0x4a403d, 0x342b25, 0x261f1c, 0x201b19, 0x221d1b, 0x27211f, 0x26211c, 0x201915, 0x362926, 0x4c3932, 0x724b35, 0x86583b, 0x744931, 0x562d1b, 0x2b130e, 0x20130d, 0x1d1309, 0x180e0b, 0x241b1b, 0x302729, 0x2f2826, 0x1c140e, 0x29241d, 0x352918, 0x4a3827, 0x3f3124, 0x4a311a, 0x47341e, 0x33261e, 0x442f21, 0x39332f, 0x302d24, 0x3e352a, 0x7f6a51, 0x615547, 0x3a312d, 0x4c4748, 0x555052, 0x514c4e, 0x524e4e, 0x535050, 0x545051, 0x555153, 0x544f50, 0x53504e, 0x545052, 0x5a5758, 0x615c5e, 0x635c5e, 0x645e5f, 0x625e60, 0x635e60, 0x615d5e, 0x5d595c, 0x5c595a, 0x605c5c, 0x5b585a, 0x595759, 0x5a5657, 0x676162, 0x676264, 0x5d595a, 0x5c575a, 0x625a5d, 0x685f62, 0x6e6668, 0x70676b, 0x6e6568, 0x6c6467, 0x676063, 0x625a5d, 0x5c5457, 0x5b5558, 0x5d5759, 0x60585b, 0x655c5f, 0x675d62, 0x655f62, 0x635a5d, 0x636267, 0x5f606a, 0x595456, 0x524f51, 0x524d50, 0x544e51, 0x544e52, 0x534e4f, 0x4c4648, 0x393130, 0x453832, 0x392f2d, 0x4c3f3a, 0x3a2c29, 0x412c21, 0x302019, 0x453026, 0x564d48, 0x423b39, 0x241e1b, 0x2d2928, 0x292121, 0x261e1b, 0x25201d, 0x1c1714, 0x352420, 0x352320, 0x563426, 0x8e6349, 0x83563a, 0x452214, 0x231008, 0x1c1008, 0x160e09, 0x1e140f, 0x2d211e, 0x2d2120, 0x29211b, 0x160c07, 0x1d2122, 0x1f1e1a, 0x382b1b, 0x514533, 0x44392f, 0x482e1b, 0x493a2c, 0x3d2e24, 0x392c23, 0x231d15, 0x2e2118, 0x836245, 0x8a6e54, 0x4e3d2d, 0x383333, 0x4b4447, 0x4b4648, 0x4d484a, 0x4f4c4e, 0x54504f, 0x575454, 0x585455, 0x575455, 0x565253, 0x514e4f, 0x545253, 0x5c5859, 0x605d5f, 0x615d60, 0x5f5a5d, 0x5e5b5c, 0x5c595b, 0x595859, 0x5c595a, 0x5a585a, 0x555355, 0x555252, 0x676162, 0x696366, 0x5d565a, 0x575355, 0x5d5859, 0x635a5c, 0x6d6366, 0x6c6367, 0x6b6264, 0x686064, 0x655e62, 0x635b5e, 0x5a5558, 0x565155, 0x585354, 0x5a5356, 0x60575a, 0x645b5e, 0x615a5d, 0x5f585a, 0x5d5b5f, 0x5f5f6a, 0x625e5f, 0x5a5658, 0x534f50, 0x534e51, 0x554f53, 0x554f52, 0x494445, 0x332a29, 0x373130, 0x382d2b, 0x3e3230, 0x30211d, 0x311e16, 0x251b19, 0x351f14, 0x50433c, 0x4d4540, 0x2b2624, 0x423c3a, 0x2a2320, 0x271e1c, 0x231e1c, 0x1e1916, 0x33221e, 0x31211c, 0x472b1f, 0x8f674f, 0x85583d, 0x421e12, 0x1d0e08, 0x120c07, 0x19110a, 0x24150d, 0x20140f, 0x27211f, 0x1f1711, 0x120c06, 0x1b1d1c, 0x131718, 0x171611, 0x403224, 0x463a2f, 0x38261b, 0x3a291f, 0x413022, 0x433328, 0x1d1712, 0x281c14, 0x826344, 0x765b44, 0x68513d, 0x413c3c, 0x3b3738, 0x433e3f, 0x484446, 0x494647, 0x4e4a4c, 0x524e4e, 0x555252, 0x595556, 0x5a5657, 0x5a5657, 0x555254, 0x555354, 0x585455, 0x5b5859, 0x5f5c5d, 0x5f5a5b, 0x5a595a, 0x585658, 0x585655, 0x575757, 0x4f4d4f, 0x524e50, 0x655e61, 0x655d62, 0x5b5557, 0x585356, 0x5a5356, 0x5d5657, 0x665d5f, 0x6a6264, 0x655e60, 0x655d61, 0x625a5d, 0x5f5a5a, 0x5b5457, 0x575154, 0x565253, 0x555053, 0x595255, 0x615a5c, 0x5c5658, 0x5a5357, 0x5f5a5d, 0x605d62, 0x605b5d, 0x5f595b, 0x585154, 0x565254, 0x575354, 0x565254, 0x494547, 0x494445, 0x363233, 0x302622, 0x2f231f, 0x271915, 0x261e1a, 0x231916, 0x25160f, 0x3f2a21, 0x453229, 0x2e2727, 0x423c3a, 0x2f2b26, 0x28201c, 0x211d1b, 0x201a19, 0x322220, 0x3d2a27, 0x352018, 0x82614b, 0x865c3e, 0x401f14, 0x120b07, 0x18100a, 0x1f120a, 0x190d08, 0x19110c, 0x1c1611, 0x150e09, 0x160f09, 0x141714, 0x141817, 0x101313, 0x21170d, 0x3d2c20, 0x34261d, 0x42372a, 0x393029, 0x413027, 0x251d16, 0x140f08, 0x5b432d, 0x715538, 0x5f4e3d, 0x474141, 0x44403f, 0x403c3d, 0x423d3d, 0x454042, 0x494447, 0x4e484a, 0x4f4d4e, 0x555052, 0x585455, 0x595656, 0x5a5757, 0x595556, 0x595455, 0x585455, 0x555254, 0x575453, 0x585656, 0x585456, 0x565355, 0x585657, 0x4b4b4d, 0x4e4b4c, 0x655f60, 0x615c5e, 0x585454, 0x565152, 0x585153, 0x5b5456, 0x615b5d, 0x675e61, 0x665e61, 0x625a5d, 0x60595b, 0x5e585b, 0x5c5658, 0x575153, 0x545052, 0x534f51, 0x534d4f, 0x5a5356, 0x5a5456, 0x565253, 0x5d5659, 0x5f595a, 0x5b5758, 0x5a5556, 0x5a5356, 0x595455, 0x565254, 0x565253, 0x565153, 0x524f50, 0x464444, 0x2c2625, 0x201510, 0x251b16, 0x282424, 0x1c1510, 0x1e130b, 0x2d1d12, 0x322017, 0x2a2320, 0x453d39, 0x322d2b, 0x292321, 0x201c1a, 0x1f1b15, 0x2f201c, 0x412d27, 0x30211d, 0x91725e, 0x916648, 0x32140b, 0x19120e, 0x25150d, 0x120a05, 0x140c08, 0x140d08, 0x160d09, 0x18110c, 0x150f07, 0xe1414, 0xf1512, 0xc1313, 0x18120a, 0x31261c, 0x291e13, 0x3c3122, 0x373330, 0x332a24, 0x271c14, 0x140d08, 0x231c16, 0x4d3f2d, 0x433e3c, 0x3f3a3a, 0x453e3e, 0x403c3d, 0x474344, 0x484346, 0x484346, 0x484444, 0x4f4b4a, 0x514e50, 0x524f51, 0x545052, 0x555051, 0x565254, 0x575455, 0x585556, 0x585456, 0x515051, 0x4d4b4c, 0x514f50, 0x545153, 0x535153, 0x49484c, 0x4d494a, 0x605a5b, 0x5c595a, 0x565254, 0x555051, 0x564f52, 0x575355, 0x605a5b, 0x645b5e, 0x615b5d, 0x5d5859, 0x5d5459, 0x5d5658, 0x595556, 0x544f52, 0x514d4f, 0x514b4d, 0x51494d, 0x534a4e, 0x534e50, 0x534f52, 0x575253, 0x595355, 0x5a5355, 0x585354, 0x575253, 0x575253, 0x564f53, 0x565053, 0x545152, 0x514d4e, 0x4e484b, 0x383233, 0x150f0c, 0x2a2423, 0x312d2d, 0x1a1511, 0x18130e, 0x22150f, 0x231510, 0x221915, 0x362924, 0x2c2524, 0x2e2826, 0x21201e, 0x231e18, 0x2e221b, 0x362720, 0x362720, 0x9d7d68, 0x885e44, 0x34170b, 0x321c15, 0x1e1009, 0x130d07, 0x150d09, 0x2c1f15, 0x2c1a14, 0x19100c, 0x1b150f, 0xe1312, 0xc1412, 0xa1413, 0x140f0a, 0x34281d, 0x322b26, 0x281f15, 0x2c2218, 0x231d19, 0x261911, 0x191209, 0x14140f, 0x342d2c, 0x3c3737, 0x383332, 0x3d3737, 0x423e3f, 0x454142, 0x423f3f, 0x454042, 0x433f40, 0x484445, 0x4f4b4d, 0x514e4f, 0x534f51, 0x545051, 0x565353, 0x555352, 0x555354, 0x555153, 0x535152, 0x504f4f, 0x484849, 0x4a4a4b, 0x514f51, 0x4a494a, 0x4d4a4b, 0x5a5657, 0x5a5759, 0x545151, 0x514d4e, 0x534d4f, 0x565151, 0x60595b, 0x635a5d, 0x5f595a, 0x5c5558, 0x585155, 0x595456, 0x595556, 0x555152, 0x504b4d, 0x4e494b, 0x4c474a, 0x4a4447, 0x4a4646, 0x50494b, 0x524b4f, 0x534d50, 0x554f51, 0x565053, 0x554f52, 0x534e50, 0x524d4f, 0x534e4f, 0x514c4e, 0x4e4b4b, 0x4f4a4b, 0x2f292a, 0x23201f, 0x312c2c, 0x352e2e, 0x211c1a, 0x16100d, 0x180f0a, 0x19120d, 0x1b140e, 0x261a15, 0x2a2524, 0x292421, 0x1f1f1e, 0x271d19, 0x2d201b, 0x2e211e, 0x443631, 0xab8973, 0x99755a, 0x714e39, 0x402116, 0x29140b, 0x180c08, 0x251915, 0x382217, 0x1e120b, 0x19110c, 0x231610, 0xc1110, 0xa1211, 0xa1311, 0x10100e, 0x261d12, 0x322d27, 0x302e28, 0x231f1a, 0x1a1611, 0x1a140c, 0x161008, 0x16120e, 0x2f2a27, 0x3c3736, 0x383535, 0x3c3736, 0x3f3a3a, 0x3d3939, 0x3d3839, 0x3e3a3b, 0x424040, 0x4c4748, 0x4e4b4c, 0x4f4e50, 0x524f50, 0x524e50, 0x524f50, 0x514e4f, 0x4f4e4e, 0x504e4f, 0x4c4c4c, 0x494949, 0x484748, 0x444344, 0x4e4c4e, 0x484849, 0x524d4f, 0x5b5556, 0x5a5557, 0x534e51, 0x4f4a4c, 0x514b4d, 0x555051, 0x5e5859, 0x5e5859, 0x5a5458, 0x565255, 0x544f51, 0x565152, 0x575152, 0x525050, 0x514b4d, 0x4e474a, 0x4a4547, 0x494447, 0x474243, 0x484244, 0x4b4346, 0x4c4749, 0x4f494b, 0x514b4d, 0x534d50, 0x514d4e, 0x504c4c, 0x4f494b, 0x4e484a, 0x4e4949, 0x474142, 0x2f2d2d, 0x433f40, 0x373234, 0x3a3435, 0x332f2f, 0x16120e, 0x120c07, 0x140f0a, 0x13100a, 0x1b160f, 0x2f2c28, 0x272420, 0x1d1c1b, 0x281e1a, 0x2c1f19, 0x221a16, 0x534640, 0xab8772, 0xa07b63, 0x9f7a60, 0x6c4631, 0x321a0f, 0x1f120b, 0x1e120a, 0x190f0b, 0x201711, 0x2e1b13, 0x2e1c15, 0xa100f, 0x91211, 0xc1011, 0x100f0c, 0x1a140b, 0x2c2721, 0x2c2923, 0x1a1611, 0x181813, 0x13130f, 0x130e06, 0x141009, 0x23211e, 0x383332, 0x3e3a3a, 0x3f3b3c, 0x3e3b3b, 0x3e3b3c, 0x403c3d, 0x454142, 0x474244, 0x464343, 0x474445, 0x464546, 0x484848, 0x4c4a49, 0x4c4a4a, 0x4c4b4b, 0x4b4a4a, 0x4f4c4d, 0x4b4b4c, 0x444546, 0x3a3a3b, 0x3f3d3e, 0x474648, 0x484646, 0x514d4f, 0x554f52, 0x585354, 0x545051, 0x4e4b4d, 0x4d4a4b, 0x524e4c, 0x5b5657, 0x595555, 0x565253, 0x534f50, 0x4f4d4c, 0x524d4d, 0x555051, 0x545152, 0x514c4e, 0x4c4949, 0x494647, 0x494546, 0x464243, 0x453f43, 0x464041, 0x474242, 0x484243, 0x494346, 0x4a4446, 0x4d4748, 0x4b4749, 0x484546, 0x4d4647, 0x4d4548, 0x474142, 0x444041, 0x474042, 0x3d3738, 0x3e3837, 0x433c3e, 0x1f1c1a, 0xd0a07, 0x110e0b, 0x100c09, 0x191610, 0x332e2b, 0x272421, 0x1b1d1d, 0x251f1c, 0x2a2320, 0x1c1612, 0x5b4b41, 0xa17f6a, 0x9c7862, 0x9f7a62, 0x9c7a61, 0x846750, 0x6a4c3a, 0x583a28, 0x462a1d, 0x563b26, 0x593724, 0x5c3c28, 0xa0d0b, 0xb1111, 0x90f0e, 0xc0c08, 0x120f07, 0x221e17, 0x26221f, 0x14120d, 0x15140d, 0xe110e, 0x100c05, 0x120e07, 0x252421, 0x272527, 0x2c292a, 0x393435, 0x3e3939, 0x3e3a3b, 0x3f3b3b, 0x3f3e3c, 0x3e393c, 0x3d3939, 0x403c3c, 0x413e3d, 0x423d3e, 0x434140, 0x474646, 0x4c4b4a, 0x4d4d4b, 0x4e4c4d, 0x504e4f, 0x4e4d4e, 0x49494a, 0x484849, 0x444345, 0x444243, 0x514f4f, 0x4f4c4d, 0x504b4d, 0x524f50, 0x4c494a, 0x4b4747, 0x514c4c, 0x5b5556, 0x575255, 0x545052, 0x504b4d, 0x4f4a4b, 0x504b4c, 0x514d4f, 0x514f4f, 0x514c4d, 0x4c4849, 0x474445, 0x474144, 0x433f40, 0x433d3e, 0x443d3f, 0x443e40, 0x463f3f, 0x474143, 0x454042, 0x464142, 0x474144, 0x464143, 0x464142, 0x453f42, 0x433d3d, 0x413a3d, 0x3e3939, 0x3d3636, 0x3a3535, 0x40393b, 0x2d2727, 0xc0c07, 0xd0c09, 0xd0a07, 0x1c1813, 0x2f2825, 0x282625, 0x1b1d1d, 0x231d1a, 0x272422, 0x16100a, 0x5a4c3f, 0x987a66, 0x997864, 0xa07d66, 0x9f7a64, 0x9e795f, 0x8e694c, 0x724c32, 0x563422, 0x66472a, 0x623a23, 0x68442a, 0x80e0c, 0xa1211, 0x8110e, 0x90b04, 0xf0d07, 0x16140d, 0x1d1914, 0x13120f, 0x100f06, 0xd100d, 0xb0b04, 0xf0b03, 0x27231d, 0x2e2d2e, 0x2d2b2b, 0x332f30, 0x353030, 0x343132, 0x353333, 0x363435, 0x393536, 0x3c3938, 0x3c3838, 0x3c3a39, 0x403b3c, 0x423d3f, 0x42403f, 0x4b4848, 0x4f4c4c, 0x4f4e4d, 0x4e4e4e, 0x4f4d4c, 0x4f4e4d, 0x4c4c4c, 0x3f3f3f, 0x434142, 0x4e4c4a, 0x4d494a, 0x4b4848, 0x504f4e, 0x484646, 0x494343, 0x4c4747, 0x585253, 0x565353, 0x524c4f, 0x4c4949, 0x4b4747, 0x4c4749, 0x4f494a, 0x4f4b4b, 0x4c4749, 0x494446, 0x484244, 0x474243, 0x444142, 0x433e3f, 0x433b3e, 0x423b3d, 0x423c3d, 0x433d3f, 0x433e3f, 0x443f41, 0x463f41, 0x443d3e, 0x423b3b, 0x3e3a38, 0x3d3738, 0x3b3536, 0x393535, 0x383333, 0x373132, 0x393434, 0x353030, 0x191815, 0xd0c08, 0xf0d0b, 0x1d1813, 0x201b19, 0x222221, 0x191a18, 0x24201d, 0x1f1c19, 0xf0d0a, 0x2e2924, 0x8c745e, 0x967862, 0x9a7b66, 0x9b7b64, 0x97755a, 0x8e694c, 0x6e4a2f, 0x583a25, 0x5d3b23, 0x5b3620, 0x64442a, 0x80f0d, 0xa100e, 0xa0f0f, 0x90b05, 0xb0c02, 0x100f09, 0x110f09, 0x12110b, 0xe0e08, 0xd100d, 0xb0c07, 0xc0a02, 0x1d1913, 0x2d2b29, 0x332f2e, 0x333030, 0x343030, 0x343131, 0x343233, 0x363233, 0x383535, 0x3a3737, 0x3a3837, 0x3d3a38, 0x3f3a3a, 0x423e40, 0x413e3f, 0x42403f, 0x494747, 0x4a4949, 0x4b4a49, 0x4a4949, 0x4c4a4a, 0x474748, 0x383939, 0x433f3f, 0x4c4947, 0x484746, 0x474344, 0x534e4d, 0x464444, 0x474143, 0x484243, 0x524c4c, 0x544e4e, 0x514a4c, 0x4a4749, 0x484544, 0x4a4546, 0x4a4647, 0x4b4a48, 0x494645, 0x464342, 0x464042, 0x464242, 0x464242, 0x433d3e, 0x403a3b, 0x413b3d, 0x40393b, 0x3f3939, 0x403b3b, 0x413c3d, 0x433c3d, 0x403a3b, 0x3e3a39, 0x3c3737, 0x3b3535, 0x393434, 0x373234, 0x353132, 0x353233, 0x363232, 0x343131, 0x262121, 0x120e0c, 0x13110f, 0x1a140e, 0x1a1816, 0x191917, 0x222322, 0x1b1918, 0x15130f, 0x11100d, 0xd0e0e, 0x403730, 0x907661, 0x92735e, 0x94765e, 0x907359, 0x8d6b50, 0x7d5942, 0x654329, 0x50301e, 0x563321, 0x67462e, 0x70d0a, 0x60e0a, 0x70e0b, 0x70a05, 0x90d07, 0xb0f09, 0xd0d08, 0x100e07, 0xd0c07, 0xa0e0b, 0x80a05, 0xb0801, 0x90d08, 0x181a16, 0x242221, 0x272624, 0x2a2827, 0x2f2b2b, 0x302e2e, 0x343231, 0x363433, 0x393636, 0x3a3838, 0x3e3839, 0x3d3a3a, 0x3f3c3b, 0x3e3d3c, 0x3f3d3d, 0x42403f, 0x454243, 0x454444, 0x464443, 0x494647, 0x403f40, 0x3a3838, 0x403d3c, 0x4a4645, 0x464442, 0x434040, 0x4d4a4a, 0x444142, 0x443f41, 0x464041, 0x4f4a49, 0x4f4b4c, 0x4c4849, 0x494447, 0x464143, 0x474243, 0x474344, 0x494343, 0x474243, 0x453f40, 0x423e3e, 0x433f3f, 0x453f40, 0x433e3f, 0x423c3d, 0x413c3c, 0x3f3b3a, 0x3e3838, 0x3f3839, 0x3e3a3b, 0x3d3938, 0x3d3839, 0x3d3638, 0x3b3537, 0x393434, 0x353233, 0x342f30, 0x2e292b, 0x2d2928, 0x2a2626, 0x221e1c, 0x191410, 0x120d09, 0xf0e09, 0x110d06, 0x171611, 0x1c1c1b, 0x221f1d, 0xc0d09, 0x13110e, 0xe100f, 0x191d1a, 0x151618, 0x584d44, 0x91755f, 0x8d6f58, 0x8d7156, 0x89674c, 0x82624a, 0x694b31, 0x4b2d1a, 0x523123, 0x65432e, 0x50b08, 0x50b07, 0x40d06, 0x50802, 0x80c08, 0x90e0b, 0x90b04, 0xa0c03, 0xa0b06, 0x80d09, 0x80a03, 0x80702, 0x7100d, 0xf1513, 0x1f1d1d, 0x232122, 0x252325, 0x2a2828, 0x2d2b2a, 0x302e2e, 0x302f2f, 0x323231, 0x363434, 0x393636, 0x3c3737, 0x3d3938, 0x3f3d3d, 0x403e3f, 0x43413f, 0x444141, 0x444040, 0x424140, 0x434141, 0x393939, 0x353434, 0x3d3a3a, 0x464142, 0x454142, 0x3f3d3c, 0x4a4747, 0x434040, 0x443e3e, 0x443e3f, 0x4b4747, 0x4f4b49, 0x4a4647, 0x454043, 0x433e40, 0x453e41, 0x453f40, 0x443f3f, 0x443e41, 0x423e3f, 0x413c3c, 0x413c3e, 0x413c3e, 0x403b3c, 0x3f3a3a, 0x3e3939, 0x3f3a3c, 0x3e393a, 0x3e3938, 0x3d3839, 0x3a3837, 0x3b3537, 0x3a3536, 0x383435, 0x373335, 0x353232, 0x363131, 0x2e2b2b, 0x1f1c1b, 0x181614, 0x15120f, 0x16120e, 0x12110d, 0x100e09, 0xe0c05, 0x181814, 0x252020, 0xf0c08, 0x90a05, 0xd0f0d, 0x80e0e, 0x181a19, 0x181818, 0x252524, 0x7f6c58, 0x876d58, 0x896d57, 0x87664c, 0x7e5f47, 0x705239, 0x4d2e1c, 0x4c2e22, 0x62422e, 0x30906, 0x40906, 0x40a05, 0x40700, 0x70a07, 0x70c08, 0x80a03, 0x90a03, 0x90a03, 0x90b05, 0x80a05, 0x80905, 0x60e0c, 0x131714, 0x211f1d, 0x232121, 0x252323, 0x292627, 0x2a2827, 0x2d2a2a, 0x302d2e, 0x312f30, 0x332f31, 0x353333, 0x373335, 0x353234, 0x363435, 0x383736, 0x383637, 0x393537, 0x3b3838, 0x393736, 0x333131, 0x2b2a2a, 0x302e2e, 0x3c3839, 0x423e3f, 0x403c3c, 0x3d393a, 0x474445, 0x423e3d, 0x413c3b, 0x443f3f, 0x494645, 0x4a4645, 0x474645, 0x413d3f, 0x3f3b3c, 0x413b3c, 0x403a3b, 0x413a3b, 0x413a3c, 0x403a3c, 0x3e3a3a, 0x3f393a, 0x3d3839, 0x3d3737, 0x3a3636, 0x3a3537, 0x3a3536, 0x3a3535, 0x3a3536, 0x3c3335, 0x3a3535, 0x393535, 0x383535, 0x353334, 0x373233, 0x353233, 0x342f30, 0x2a2727, 0x211f1f, 0x1f1c1a, 0x1d1a1a, 0x1a1715, 0x181411, 0x120f0c, 0x13100a, 0x1e1914, 0x100c09, 0x80904, 0x80a04, 0xa0d0a, 0x70b09, 0xa0f0e, 0xc110f, 0xd1010, 0x564e46, 0x836d5c, 0x7e6652, 0x80654d, 0x7c5e4c, 0x72553b, 0x4d321d, 0x472b1c, 0x5d3f2b
};
static bool debug_nn = false;
static bool inferOnRgb1 = true;
#define FEAT_TEST
int ei_get_data(size_t offset, size_t length, float *out_ptr) {
  41512c:	b500      	push	{lr}
    uint32_t outindex = 0;
    for (int i = offset; i < offset+length; i++) {
  41512e:	eb00 0e01 	add.w	lr, r0, r1
  415132:	4570      	cmp	r0, lr
  415134:	d216      	bcs.n	415164 <_Z11ei_get_datajjPf+0x38>
  415136:	2101      	movs	r1, #1
  415138:	1843      	adds	r3, r0, r1
  41513a:	4573      	cmp	r3, lr
  41513c:	ebae 0c00 	sub.w	ip, lr, r0
  415140:	46e6      	mov	lr, ip
  415142:	bf94      	ite	ls
  415144:	46e6      	movls	lr, ip
  415146:	468e      	movhi	lr, r1
  415148:	f04e e001 	dls	lr, lr
  41514c:	4b07      	ldr	r3, [pc, #28]	@ (41516c <_Z11ei_get_datajjPf+0x40>)
  41514e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
        #ifdef FEAT_TEST
            uint32_t intpix = features[offset + i];
            // float cpix = (intpix&0xff0000) + (intpix&0x00ff00) + (intpix&0x0000ff);
            float pix = features[offset + i];
  415152:	edd3 7a01 	vldr	s15, [r3, #4]
  415156:	eef8 7a67 	vcvt.f32.u32	s15, s15
  41515a:	3304      	adds	r3, #4
  41515c:	ece2 7a01 	vstmia	r2!, {s15}
    for (int i = offset; i < offset+length; i++) {
  415160:	f00f c809 	le	lr, 415152 <_Z11ei_get_datajjPf+0x26>
        #endif
        #endif
        out_ptr[outindex++] = pix;
    }
    return 0;
}
  415164:	2000      	movs	r0, #0
  415166:	f85d fb04 	ldr.w	pc, [sp], #4
  41516a:	bf00      	nop
  41516c:	20000ffc 	.word	0x20000ffc

00415170 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
  415170:	b410      	push	{r4}
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
  415172:	6804      	ldr	r4, [r0, #0]
  415174:	6808      	ldr	r0, [r1, #0]
  415176:	6811      	ldr	r1, [r2, #0]
  415178:	681a      	ldr	r2, [r3, #0]
  41517a:	4623      	mov	r3, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
  41517c:	f85d 4b04 	ldr.w	r4, [sp], #4
  415180:	4718      	bx	r3
  415182:	bf00      	nop

00415184 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
  415184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
            return this->get_data(offset, length, out_ptr);
  415188:	6804      	ldr	r4, [r0, #0]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
  41518a:	6808      	ldr	r0, [r1, #0]
  41518c:	68a1      	ldr	r1, [r4, #8]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
  41518e:	6812      	ldr	r2, [r2, #0]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
  415190:	fbb0 f8f1 	udiv	r8, r0, r1
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
  415194:	fbb2 faf1 	udiv	sl, r2, r1
  415198:	681b      	ldr	r3, [r3, #0]
  41519a:	b087      	sub	sp, #28
  41519c:	9301      	str	r3, [sp, #4]
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
  41519e:	68e3      	ldr	r3, [r4, #12]
  4151a0:	6a1b      	ldr	r3, [r3, #32]
  4151a2:	fb03 f808 	mul.w	r8, r3, r8

        size_t out_ptr_ix = 0;

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
  4151a6:	fb03 8a0a 	mla	sl, r3, sl, r8
  4151aa:	45c2      	cmp	sl, r8
  4151ac:	bf88      	it	hi
  4151ae:	f04f 0b00 	movhi.w	fp, #0
  4151b2:	d92a      	bls.n	41520a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x86>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
  4151b4:	b349      	cbz	r1, 41520a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x86>
  4151b6:	9b01      	ldr	r3, [sp, #4]
  4151b8:	2600      	movs	r6, #0
  4151ba:	f04f 0901 	mov.w	r9, #1
  4151be:	eb03 058b 	add.w	r5, r3, fp, lsl #2
  4151c2:	e006      	b.n	4151d2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x4e>
  4151c4:	68a1      	ldr	r1, [r4, #8]
  4151c6:	1c73      	adds	r3, r6, #1
  4151c8:	428b      	cmp	r3, r1
  4151ca:	f105 0504 	add.w	r5, r5, #4
  4151ce:	d213      	bcs.n	4151f8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x74>
  4151d0:	461e      	mov	r6, r3
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
  4151d2:	e9d4 0300 	ldrd	r0, r3, [r4]
  4151d6:	5d9b      	ldrb	r3, [r3, r6]
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
  4151d8:	6882      	ldr	r2, [r0, #8]
  4151da:	4443      	add	r3, r8
  4151dc:	e9cd 9304 	strd	r9, r3, [sp, #16]
  4151e0:	9503      	str	r5, [sp, #12]
  4151e2:	b1a2      	cbz	r2, 41520e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x8a>
	  __throw_bad_function_call();
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
  4151e4:	68c7      	ldr	r7, [r0, #12]
  4151e6:	ab03      	add	r3, sp, #12
  4151e8:	aa04      	add	r2, sp, #16
  4151ea:	a905      	add	r1, sp, #20
  4151ec:	47b8      	blx	r7
                if (r != 0) {
  4151ee:	2800      	cmp	r0, #0
  4151f0:	d0e8      	beq.n	4151c4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x40>
      }
  4151f2:	b007      	add	sp, #28
  4151f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
  4151f8:	68e3      	ldr	r3, [r4, #12]
  4151fa:	6a1b      	ldr	r3, [r3, #32]
  4151fc:	4498      	add	r8, r3
  4151fe:	45c2      	cmp	sl, r8
  415200:	d903      	bls.n	41520a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x86>
  415202:	f10b 0b01 	add.w	fp, fp, #1
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
  415206:	44b3      	add	fp, r6
  415208:	e7d4      	b.n	4151b4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x30>
                    return r;
                }
            }
        }

        return 0;
  41520a:	2000      	movs	r0, #0
				     std::forward<_ArgTypes>(__args)...);
  41520c:	e7f1      	b.n	4151f2 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x6e>
	  __throw_bad_function_call();
  41520e:	f015 fe59 	bl	42aec4 <_ZSt25__throw_bad_function_callv>
  415212:	bf00      	nop

00415214 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
  415214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  415218:	ed2d 8b04 	vpush	{d8-d9}
  41521c:	4606      	mov	r6, r0
  41521e:	468a      	mov	sl, r1
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
  415220:	6950      	ldr	r0, [r2, #20]
  415222:	4974      	ldr	r1, [pc, #464]	@ (4153f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e0>)
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
  415224:	b087      	sub	sp, #28
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
  415226:	f8d2 b008 	ldr.w	fp, [r2, #8]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
  41522a:	f7fb f8e9 	bl	410400 <strcmp>
#else
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
  41522e:	f8d6 8010 	ldr.w	r8, [r6, #16]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
  415232:	2800      	cmp	r0, #0
  415234:	d16b      	bne.n	41530e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xfa>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  415236:	f1b8 0f00 	cmp.w	r8, #0
  41523a:	d062      	beq.n	415302 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xee>
                output_matrix->buffer[output_ix++] = b;
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
  41523c:	ed9f 9a6e 	vldr	s18, [pc, #440]	@ 4153f8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e4>
  415240:	eddf 8a6e 	vldr	s17, [pc, #440]	@ 4153fc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e8>
  415244:	ed9f 8a6e 	vldr	s16, [pc, #440]	@ 415400 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ec>
    size_t output_ix = 0;
  415248:	4681      	mov	r9, r0
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  41524a:	9001      	str	r0, [sp, #4]
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
  41524c:	f5b8 6f80 	cmp.w	r8, #1024	@ 0x400
  415250:	4645      	mov	r5, r8
  415252:	bf28      	it	cs
  415254:	f44f 6580 	movcs.w	r5, #1024	@ 0x400
        if (a_buffer) {
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
  415258:	fb05 f00b 	mul.w	r0, r5, fp
  41525c:	2101      	movs	r1, #1
  41525e:	0080      	lsls	r0, r0, #2
  415260:	f009 fa0a 	bl	41e678 <_Z9ei_callocjj>
        if (!input_matrix.buffer) {
  415264:	4604      	mov	r4, r0
  415266:	2800      	cmp	r0, #0
  415268:	f000 80bb 	beq.w	4153e2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ce>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
  41526c:	9a01      	ldr	r2, [sp, #4]
	if (_M_empty())
  41526e:	68b3      	ldr	r3, [r6, #8]
  415270:	e9cd 2503 	strd	r2, r5, [sp, #12]
  415274:	9005      	str	r0, [sp, #20]
  415276:	2b00      	cmp	r3, #0
  415278:	f000 80b9 	beq.w	4153ee <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1da>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
  41527c:	4630      	mov	r0, r6
  41527e:	68f7      	ldr	r7, [r6, #12]
  415280:	ab05      	add	r3, sp, #20
  415282:	aa04      	add	r2, sp, #16
  415284:	a903      	add	r1, sp, #12
  415286:	47b8      	blx	r7
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  415288:	f1b8 0f00 	cmp.w	r8, #0
  41528c:	d02d      	beq.n	4152ea <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xd6>
  41528e:	2d00      	cmp	r5, #0
  415290:	bf14      	ite	ne
  415292:	46ae      	movne	lr, r5
  415294:	f04f 0e01 	moveq.w	lr, #1
  415298:	4621      	mov	r1, r4
  41529a:	f04e e001 	dls	lr, lr
  41529e:	f8da 2000 	ldr.w	r2, [sl]
  4152a2:	eb02 0289 	add.w	r2, r2, r9, lsl #2
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
  4152a6:	ecf1 7a01 	vldmia	r1!, {s15}
  4152aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4152ae:	ee17 3a90 	vmov	r3, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
  4152b2:	f3c3 2007 	ubfx	r0, r3, #8, #8
  4152b6:	ee07 0a90 	vmov	s15, r0
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
  4152ba:	f3c3 4007 	ubfx	r0, r3, #16, #8
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
  4152be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
  4152c2:	ee06 0a90 	vmov	s13, r0
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
  4152c6:	b2db      	uxtb	r3, r3
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
  4152c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
  4152cc:	ee07 3a10 	vmov	s14, r3
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
  4152d0:	ee67 7a89 	vmul.f32	s15, s15, s18
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
  4152d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
  4152d8:	eee6 7aa8 	vfma.f32	s15, s13, s17
  4152dc:	eee7 7a08 	vfma.f32	s15, s14, s16
                output_matrix->buffer[output_ix++] = v;
  4152e0:	ece2 7a01 	vstmia	r2!, {s15}
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  4152e4:	f00f c821 	le	lr, 4152a6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x92>
  4152e8:	44a9      	add	r9, r5
        }
    }

    ~ei_matrix() {
        if (buffer && buffer_managed_by_me) {
            ei_free(buffer);
  4152ea:	4620      	mov	r0, r4
  4152ec:	f009 f9d2 	bl	41e694 <_Z7ei_freePv>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  4152f0:	9a01      	ldr	r2, [sp, #4]
  4152f2:	6933      	ldr	r3, [r6, #16]
  4152f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  4152f8:	429a      	cmp	r2, r3
            }
        }

        bytes_left -= elements_to_read;
  4152fa:	eba8 0805 	sub.w	r8, r8, r5
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  4152fe:	9201      	str	r2, [sp, #4]
  415300:	d3a4      	bcc.n	41524c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x38>
    }

    return EIDSP_OK;
  415302:	2000      	movs	r0, #0
}
  415304:	b007      	add	sp, #28
  415306:	ecbd 8b04 	vpop	{d8-d9}
  41530a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  41530e:	f1b8 0f00 	cmp.w	r8, #0
  415312:	d0f6      	beq.n	415302 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xee>
  415314:	f04f 0900 	mov.w	r9, #0
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
  415318:	ed9f 8a3a 	vldr	s16, [pc, #232]	@ 415404 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f0>
    size_t output_ix = 0;
  41531c:	f8cd 9004 	str.w	r9, [sp, #4]
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
  415320:	f5b8 6f80 	cmp.w	r8, #1024	@ 0x400
  415324:	4645      	mov	r5, r8
  415326:	bf28      	it	cs
  415328:	f44f 6580 	movcs.w	r5, #1024	@ 0x400
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
  41532c:	fb0b f005 	mul.w	r0, fp, r5
  415330:	2101      	movs	r1, #1
  415332:	0080      	lsls	r0, r0, #2
  415334:	f009 f9a0 	bl	41e678 <_Z9ei_callocjj>
        if (!input_matrix.buffer) {
  415338:	4607      	mov	r7, r0
  41533a:	2800      	cmp	r0, #0
  41533c:	d051      	beq.n	4153e2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ce>
	if (_M_empty())
  41533e:	68b3      	ldr	r3, [r6, #8]
  415340:	e9cd 9503 	strd	r9, r5, [sp, #12]
  415344:	9005      	str	r0, [sp, #20]
  415346:	2b00      	cmp	r3, #0
  415348:	d051      	beq.n	4153ee <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1da>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
  41534a:	4630      	mov	r0, r6
  41534c:	68f4      	ldr	r4, [r6, #12]
  41534e:	ab05      	add	r3, sp, #20
  415350:	aa04      	add	r2, sp, #16
  415352:	a903      	add	r1, sp, #12
  415354:	47a0      	blx	r4
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  415356:	f1b8 0f00 	cmp.w	r8, #0
  41535a:	d037      	beq.n	4153cc <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
  41535c:	2d00      	cmp	r5, #0
  41535e:	bf14      	ite	ne
  415360:	46ae      	movne	lr, r5
  415362:	f04f 0e01 	moveq.w	lr, #1
  415366:	4639      	mov	r1, r7
  415368:	f04e e001 	dls	lr, lr
  41536c:	f8da 2000 	ldr.w	r2, [sl]
  415370:	9b01      	ldr	r3, [sp, #4]
  415372:	eb02 0283 	add.w	r2, r2, r3, lsl #2
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
  415376:	ecf1 7a01 	vldmia	r1!, {s15}
  41537a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  41537e:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
  415382:	f3c3 4007 	ubfx	r0, r3, #16, #8
  415386:	ee06 0a90 	vmov	s13, r0
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
  41538a:	f3c3 2007 	ubfx	r0, r3, #8, #8
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
  41538e:	b2db      	uxtb	r3, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
  415390:	ee07 0a10 	vmov	s14, r0
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
  415394:	ee07 3a90 	vmov	s15, r3
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
  415398:	eef8 6ae6 	vcvt.f32.s32	s13, s13
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
  41539c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
  4153a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
  4153a4:	ee66 6a88 	vmul.f32	s13, s13, s16
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
  4153a8:	ee27 7a08 	vmul.f32	s14, s14, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
  4153ac:	ee67 7a88 	vmul.f32	s15, s15, s16
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  4153b0:	320c      	adds	r2, #12
                output_matrix->buffer[output_ix++] = r;
  4153b2:	ed42 6a03 	vstr	s13, [r2, #-12]
                output_matrix->buffer[output_ix++] = g;
  4153b6:	ed02 7a02 	vstr	s14, [r2, #-8]
                output_matrix->buffer[output_ix++] = b;
  4153ba:	ed42 7a01 	vstr	s15, [r2, #-4]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  4153be:	f00f c027 	le	lr, 415376 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x162>
  4153c2:	9a01      	ldr	r2, [sp, #4]
  4153c4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
  4153c8:	441a      	add	r2, r3
  4153ca:	9201      	str	r2, [sp, #4]
            ei_free(buffer);
  4153cc:	4638      	mov	r0, r7
  4153ce:	f009 f961 	bl	41e694 <_Z7ei_freePv>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  4153d2:	6933      	ldr	r3, [r6, #16]
  4153d4:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
  4153d8:	454b      	cmp	r3, r9
        bytes_left -= elements_to_read;
  4153da:	eba8 0805 	sub.w	r8, r8, r5
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  4153de:	d89f      	bhi.n	415320 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x10c>
  4153e0:	e78f      	b.n	415302 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xee>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
  4153e2:	4809      	ldr	r0, [pc, #36]	@ (415408 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>)
}
  4153e4:	b007      	add	sp, #28
  4153e6:	ecbd 8b04 	vpop	{d8-d9}
  4153ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_bad_function_call();
  4153ee:	f015 fd69 	bl	42aec4 <_ZSt25__throw_bad_function_callv>
  4153f2:	bf00      	nop
  4153f4:	0043446c 	.word	0x0043446c
  4153f8:	3b16dc7f 	.word	0x3b16dc7f
  4153fc:	3a99b038 	.word	0x3a99b038
  415400:	39ea6339 	.word	0x39ea6339
  415404:	3b808081 	.word	0x3b808081
  415408:	fffffc16 	.word	0xfffffc16

0041540c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
  41540c:	b508      	push	{r3, lr}
	assert(ptr);
  41540e:	b130      	cbz	r0, 41541e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x12>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
  415410:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
  415414:	1ac0      	subs	r0, r0, r3
}
  415416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
  41541a:	f009 b93b 	b.w	41e694 <_Z7ei_freePv>
	assert(ptr);
  41541e:	215a      	movs	r1, #90	@ 0x5a
  415420:	4b02      	ldr	r3, [pc, #8]	@ (41542c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
  415422:	4a03      	ldr	r2, [pc, #12]	@ (415430 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
  415424:	4803      	ldr	r0, [pc, #12]	@ (415434 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
  415426:	f009 febf 	bl	41f1a8 <__assert_func>
  41542a:	bf00      	nop
  41542c:	00434478 	.word	0x00434478
  415430:	0043447c 	.word	0x0043447c
  415434:	004344a8 	.word	0x004344a8

00415438 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
	assert((align & (align - 1)) == 0);
  415438:	1e43      	subs	r3, r0, #1
  41543a:	4203      	tst	r3, r0
{
  41543c:	b510      	push	{r4, lr}
	assert((align & (align - 1)) == 0);
  41543e:	d114      	bne.n	41546a <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x32>
	if(align && size)
  415440:	4604      	mov	r4, r0
  415442:	b180      	cbz	r0, 415466 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
  415444:	b179      	cbz	r1, 415466 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
		void * p = ei_calloc(size + hdr_size, 1);
  415446:	1c48      	adds	r0, r1, #1
  415448:	4420      	add	r0, r4
  41544a:	2101      	movs	r1, #1
  41544c:	f009 f914 	bl	41e678 <_Z9ei_callocjj>
		if(p)
  415450:	4602      	mov	r2, r0
  415452:	b140      	cbz	r0, 415466 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
  415454:	1c63      	adds	r3, r4, #1
  415456:	4403      	add	r3, r0
  415458:	4264      	negs	r4, r4
  41545a:	ea03 0004 	and.w	r0, r3, r4
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
  41545e:	1a82      	subs	r2, r0, r2
  415460:	f820 2c02 	strh.w	r2, [r0, #-2]
}
  415464:	bd10      	pop	{r4, pc}
	void * ptr = NULL;
  415466:	2000      	movs	r0, #0
}
  415468:	bd10      	pop	{r4, pc}
	assert((align & (align - 1)) == 0);
  41546a:	2137      	movs	r1, #55	@ 0x37
  41546c:	4b02      	ldr	r3, [pc, #8]	@ (415478 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
  41546e:	4a03      	ldr	r2, [pc, #12]	@ (41547c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
  415470:	4803      	ldr	r0, [pc, #12]	@ (415480 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
  415472:	f009 fe99 	bl	41f1a8 <__assert_func>
  415476:	bf00      	nop
  415478:	004344ec 	.word	0x004344ec
  41547c:	00434508 	.word	0x00434508
  415480:	004344a8 	.word	0x004344a8

00415484 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
  415484:	b152      	cbz	r2, 41549c <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x18>
  415486:	2a01      	cmp	r2, #1
  415488:	d102      	bne.n	415490 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
  41548a:	6001      	str	r1, [r0, #0]
      }
  41548c:	2000      	movs	r0, #0
  41548e:	4770      	bx	lr
	  switch (__op)
  415490:	2a02      	cmp	r2, #2
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
  415492:	bf04      	itt	eq
  415494:	680b      	ldreq	r3, [r1, #0]
  415496:	6003      	streq	r3, [r0, #0]
      }
  415498:	2000      	movs	r0, #0
  41549a:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
  41549c:	4b01      	ldr	r3, [pc, #4]	@ (4154a4 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x20>)
  41549e:	6003      	str	r3, [r0, #0]
      }
  4154a0:	2000      	movs	r0, #0
  4154a2:	4770      	bx	lr
  4154a4:	00435a50 	.word	0x00435a50

004154a8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
  4154a8:	b152      	cbz	r2, 4154c0 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x18>
  4154aa:	2a01      	cmp	r2, #1
  4154ac:	d102      	bne.n	4154b4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
  4154ae:	6001      	str	r1, [r0, #0]
      }
  4154b0:	2000      	movs	r0, #0
  4154b2:	4770      	bx	lr
	  switch (__op)
  4154b4:	2a02      	cmp	r2, #2
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
  4154b6:	bf04      	itt	eq
  4154b8:	680b      	ldreq	r3, [r1, #0]
  4154ba:	6003      	streq	r3, [r0, #0]
      }
  4154bc:	2000      	movs	r0, #0
  4154be:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
  4154c0:	4b01      	ldr	r3, [pc, #4]	@ (4154c8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x20>)
  4154c2:	6003      	str	r3, [r0, #0]
      }
  4154c4:	2000      	movs	r0, #0
  4154c6:	4770      	bx	lr
  4154c8:	00435a8c 	.word	0x00435a8c

004154cc <__tcf_1>:
#endif

      _GLIBCXX20_CONSTEXPR
      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
  4154cc:	4b03      	ldr	r3, [pc, #12]	@ (4154dc <__tcf_1+0x10>)
  4154ce:	6818      	ldr	r0, [r3, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
  4154d0:	b118      	cbz	r0, 4154da <__tcf_1+0xe>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  4154d2:	6899      	ldr	r1, [r3, #8]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  4154d4:	1a09      	subs	r1, r1, r0
  4154d6:	f013 b819 	b.w	42850c <_ZdlPvj>
    }
}

__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
    std::vector<ei_classifier_cube_t*> bbs;
    static std::vector<ei_impulse_result_bounding_box_t> results;
  4154da:	4770      	bx	lr
  4154dc:	20013e60 	.word	0x20013e60

004154e0 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(
  4154e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4154e4:	460e      	mov	r6, r1
  4154e6:	4698      	mov	r8, r3
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
  4154e8:	6985      	ldr	r5, [r0, #24]
static EI_IMPULSE_ERROR inference_tflite_setup(
  4154ea:	4604      	mov	r4, r0
  4154ec:	4617      	mov	r7, r2

    *ctx_start_us = ei_read_timer_us();
  4154ee:	f009 f891 	bl	41e614 <_Z16ei_read_timer_usv>

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
  4154f2:	686b      	ldr	r3, [r5, #4]
    *ctx_start_us = ei_read_timer_us();
  4154f4:	e9c6 0100 	strd	r0, r1, [r6]
    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
  4154f8:	4813      	ldr	r0, [pc, #76]	@ (415548 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x68>)
  4154fa:	4798      	blx	r3
    if (init_status != kTfLiteOk) {
  4154fc:	b9e8      	cbnz	r0, 41553a <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x5a>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
  4154fe:	4639      	mov	r1, r7
  415500:	692b      	ldr	r3, [r5, #16]
  415502:	4798      	blx	r3
    if (status != kTfLiteOk) {
  415504:	b9b0      	cbnz	r0, 415534 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x54>
        return EI_IMPULSE_TFLITE_ERROR;
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
  415506:	4641      	mov	r1, r8
  415508:	696b      	ldr	r3, [r5, #20]
  41550a:	7aa0      	ldrb	r0, [r4, #10]
  41550c:	4798      	blx	r3
    if (status != kTfLiteOk) {
  41550e:	b988      	cbnz	r0, 415534 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x54>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
  415510:	f994 3009 	ldrsb.w	r3, [r4, #9]
  415514:	2b01      	cmp	r3, #1
  415516:	d002      	beq.n	41551e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x3e>
        if (status != kTfLiteOk) {
            return EI_IMPULSE_TFLITE_ERROR;
        }
    }

    return EI_IMPULSE_OK;
  415518:	2000      	movs	r0, #0
}
  41551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
  41551e:	9907      	ldr	r1, [sp, #28]
  415520:	696b      	ldr	r3, [r5, #20]
  415522:	7b20      	ldrb	r0, [r4, #12]
  415524:	4798      	blx	r3
        if (status != kTfLiteOk) {
  415526:	b928      	cbnz	r0, 415534 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x54>
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
  415528:	9906      	ldr	r1, [sp, #24]
  41552a:	696b      	ldr	r3, [r5, #20]
  41552c:	7ae0      	ldrb	r0, [r4, #11]
  41552e:	4798      	blx	r3
        if (status != kTfLiteOk) {
  415530:	2800      	cmp	r0, #0
  415532:	d0f1      	beq.n	415518 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x38>
        return EI_IMPULSE_TFLITE_ERROR;
  415534:	f06f 0002 	mvn.w	r0, #2
  415538:	e7ef      	b.n	41551a <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x3a>
  41553a:	4601      	mov	r1, r0
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
  41553c:	4803      	ldr	r0, [pc, #12]	@ (41554c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x6c>)
  41553e:	f009 f871 	bl	41e624 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
  415542:	f06f 0005 	mvn.w	r0, #5
  415546:	e7e8      	b.n	41551a <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x3a>
  415548:	00415439 	.word	0x00415439
  41554c:	00434540 	.word	0x00434540

00415550 <process_impulse.part.0>:
 * @param      handle   Handle from open_impulse. nullptr for backward compatibility
 * @param[in]  debug    Debug output enable
 *
 * @return     The ei impulse error.
 */
extern "C" EI_IMPULSE_ERROR process_impulse(ei_impulse_handle_t *handle,
  415550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  415554:	4615      	mov	r5, r2
  415556:	460c      	mov	r4, r1
  415558:	4682      	mov	sl, r0
  41555a:	b0a7      	sub	sp, #156	@ 0x9c
    }
#endif

#ifndef EI_DSP_RESULT_OVERRIDE
    // Don't wipe in CI, as we store a pointer
    memset(result, 0, sizeof(ei_impulse_result_t));
  41555c:	2100      	movs	r1, #0
  41555e:	2248      	movs	r2, #72	@ 0x48
  415560:	4628      	mov	r0, r5
extern "C" EI_IMPULSE_ERROR process_impulse(ei_impulse_handle_t *handle,
  415562:	9512      	str	r5, [sp, #72]	@ 0x48
  415564:	940a      	str	r4, [sp, #40]	@ 0x28
  415566:	9313      	str	r3, [sp, #76]	@ 0x4c
    memset(result, 0, sizeof(ei_impulse_result_t));
  415568:	f00b fb9c 	bl	420ca4 <memset>
#endif
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
  41556c:	f8da 3010 	ldr.w	r3, [sl, #16]
  415570:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
  415574:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
  415578:	18d5      	adds	r5, r2, r3

    // smart pointer to features array
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
  41557a:	00ec      	lsls	r4, r5, #3
  41557c:	4620      	mov	r0, r4
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
  41557e:	950f      	str	r5, [sp, #60]	@ 0x3c
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
  415580:	f012 ffc0 	bl	428504 <_Znaj>
    ei_feature_t* features = features_ptr.get();
    memset(features, 0, sizeof(ei_feature_t) * block_num);
  415584:	2100      	movs	r1, #0
  415586:	4622      	mov	r2, r4
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
  415588:	900d      	str	r0, [sp, #52]	@ 0x34
    memset(features, 0, sizeof(ei_feature_t) * block_num);
  41558a:	f00b fb8b 	bl	420ca4 <memset>

    // have it outside of the loop to avoid going out of scope
    std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
  41558e:	1cab      	adds	r3, r5, #2
  415590:	009b      	lsls	r3, r3, #2
  415592:	4618      	mov	r0, r3
  415594:	930e      	str	r3, [sp, #56]	@ 0x38
  415596:	f012 ffb5 	bl	428504 <_Znaj>
  41559a:	2304      	movs	r3, #4
  41559c:	900c      	str	r0, [sp, #48]	@ 0x30
  41559e:	6003      	str	r3, [r0, #0]
  4155a0:	6045      	str	r5, [r0, #4]
  4155a2:	f100 0608 	add.w	r6, r0, #8
  4155a6:	b12d      	cbz	r5, 4155b4 <process_impulse.part.0+0x64>

  template<size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
  4155a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  4155aa:	2100      	movs	r1, #0
  4155ac:	4630      	mov	r0, r6
  4155ae:	009a      	lsls	r2, r3, #2
  4155b0:	f00b fb78 	bl	420ca4 <memset>

    uint64_t dsp_start_us = ei_read_timer_us();
  4155b4:	f009 f82e 	bl	41e614 <_Z16ei_read_timer_usv>

    size_t out_features_index = 0;

    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
  4155b8:	f8da 3010 	ldr.w	r3, [sl, #16]
    uint64_t dsp_start_us = ei_read_timer_us();
  4155bc:	9014      	str	r0, [sp, #80]	@ 0x50
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
  4155be:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
    uint64_t dsp_start_us = ei_read_timer_us();
  4155c2:	9115      	str	r1, [sp, #84]	@ 0x54
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
  4155c4:	2a00      	cmp	r2, #0
  4155c6:	f000 80a3 	beq.w	415710 <process_impulse.part.0+0x1c0>
    size_t out_features_index = 0;
  4155ca:	f04f 0900 	mov.w	r9, #0
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
  4155ce:	464c      	mov	r4, r9
  4155d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  4155d2:	9610      	str	r6, [sp, #64]	@ 0x40
  4155d4:	3204      	adds	r2, #4
  4155d6:	9205      	str	r2, [sp, #20]
  4155d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  4155da:	f102 0804 	add.w	r8, r2, #4
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
  4155de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  4155e0:	ea4f 1b44 	mov.w	fp, r4, lsl #5
  4155e4:	eb03 1244 	add.w	r2, r3, r4, lsl #5
  4155e8:	f853 300b 	ldr.w	r3, [r3, fp]
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
  4155ec:	2010      	movs	r0, #16
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
  4155ee:	9306      	str	r3, [sp, #24]
  4155f0:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
  4155f4:	930b      	str	r3, [sp, #44]	@ 0x2c
  4155f6:	68d3      	ldr	r3, [r2, #12]
  4155f8:	6957      	ldr	r7, [r2, #20]
  4155fa:	9309      	str	r3, [sp, #36]	@ 0x24
  4155fc:	6913      	ldr	r3, [r2, #16]
  4155fe:	9307      	str	r3, [sp, #28]
  415600:	69d3      	ldr	r3, [r2, #28]
  415602:	9308      	str	r3, [sp, #32]
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
  415604:	f012 ff7c 	bl	428500 <_Znwj>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
  415608:	2101      	movs	r1, #1
  41560a:	4606      	mov	r6, r0
  41560c:	00a8      	lsls	r0, r5, #2
  41560e:	f009 f833 	bl	41e678 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
  415612:	f04f 0301 	mov.w	r3, #1
  415616:	7333      	strb	r3, [r6, #12]
        rows = n_rows;
  415618:	2301      	movs	r3, #1
        cols = n_cols;
  41561a:	e9c6 3501 	strd	r3, r5, [r6, #4]
      const _Dp& _M_deleter() const noexcept { return std::get<1>(_M_t); }

      _GLIBCXX23_CONSTEXPR
      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
  41561e:	9b05      	ldr	r3, [sp, #20]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
  415620:	6030      	str	r0, [r6, #0]
  415622:	f853 2f04 	ldr.w	r2, [r3, #4]!
  415626:	9305      	str	r3, [sp, #20]
	_M_ptr() = __p;
  415628:	601e      	str	r6, [r3, #0]
	if (__old_p)
  41562a:	b14a      	cbz	r2, 415640 <process_impulse.part.0+0xf0>
        if (buffer && buffer_managed_by_me) {
  41562c:	6810      	ldr	r0, [r2, #0]
  41562e:	b118      	cbz	r0, 415638 <process_impulse.part.0+0xe8>
  415630:	7b11      	ldrb	r1, [r2, #12]
  415632:	2900      	cmp	r1, #0
  415634:	f040 814c 	bne.w	4158d0 <process_impulse.part.0+0x380>
	delete __ptr;
  415638:	4610      	mov	r0, r2
  41563a:	2110      	movs	r1, #16
  41563c:	f012 ff66 	bl	42850c <_ZdlPvj>
        features[ix].matrix = matrix_ptrs[ix].get();
        features[ix].blockId = block.blockId;
  415640:	9b06      	ldr	r3, [sp, #24]

        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
  415642:	f8da 2010 	ldr.w	r2, [sl, #16]
        features[ix].blockId = block.blockId;
  415646:	f8c8 3000 	str.w	r3, [r8]
        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
  41564a:	6991      	ldr	r1, [r2, #24]
  41564c:	44a9      	add	r9, r5
  41564e:	4589      	cmp	r9, r1
        features[ix].matrix = matrix_ptrs[ix].get();
  415650:	f848 6c04 	str.w	r6, [r8, #-4]
        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
  415654:	f200 8141 	bhi.w	4158da <process_impulse.part.0+0x38a>
      : _Function_base() { }
  415658:	2100      	movs	r1, #0
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
  41565a:	9b07      	ldr	r3, [sp, #28]
  41565c:	9123      	str	r1, [sp, #140]	@ 0x8c
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
  41565e:	6a10      	ldr	r0, [r2, #32]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
  415660:	931e      	str	r3, [sp, #120]	@ 0x78
  415662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
  415664:	4287      	cmp	r7, r0
  415666:	ad21      	add	r5, sp, #132	@ 0x84
  415668:	9121      	str	r1, [sp, #132]	@ 0x84
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
  41566a:	e9cd 721f 	strd	r7, r2, [sp, #124]	@ 0x7c
  41566e:	931d      	str	r3, [sp, #116]	@ 0x74
  415670:	9124      	str	r1, [sp, #144]	@ 0x90
  415672:	6069      	str	r1, [r5, #4]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
  415674:	f000 80c3 	beq.w	4157fe <process_impulse.part.0+0x2ae>
	: _Function_base()
  415678:	e9cd 111a 	strd	r1, r1, [sp, #104]	@ 0x68
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
  41567c:	49a9      	ldr	r1, [pc, #676]	@ (415924 <process_impulse.part.0+0x3d4>)
  41567e:	9123      	str	r1, [sp, #140]	@ 0x8c
  415680:	49a9      	ldr	r1, [pc, #676]	@ (415928 <process_impulse.part.0+0x3d8>)
  415682:	9124      	str	r1, [sp, #144]	@ 0x90
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
  415684:	6919      	ldr	r1, [r3, #16]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
  415686:	ab1d      	add	r3, sp, #116	@ 0x74
  415688:	fbb1 f1f0 	udiv	r1, r1, r0
  41568c:	fb07 f101 	mul.w	r1, r7, r1
  415690:	9319      	str	r3, [sp, #100]	@ 0x64
  415692:	9125      	str	r1, [sp, #148]	@ 0x94
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  415694:	ab17      	add	r3, sp, #92	@ 0x5c
  415696:	a919      	add	r1, sp, #100	@ 0x64
  415698:	c903      	ldmia	r1, {r0, r1}
  41569a:	e883 0003 	stmia.w	r3, {r0, r1}
        SignalWithAxes swa(signal, block.axes, block.axes_size, handle->impulse);
        auto internal_signal = swa.get_signal();
#endif

        int ret;
        if (block.factory) { // ie, if we're using state
  41569e:	9b08      	ldr	r3, [sp, #32]
        return &wrapped_signal;
  4156a0:	462f      	mov	r7, r5
      __b = _GLIBCXX_MOVE(__tmp);
  4156a2:	e885 0003 	stmia.w	r5, {r0, r1}
  4156a6:	2b00      	cmp	r3, #0
  4156a8:	f000 80ae 	beq.w	415808 <process_impulse.part.0+0x2b8>
            // Msg user
            static bool has_printed = false;
            if (!has_printed) {
  4156ac:	4e9f      	ldr	r6, [pc, #636]	@ (41592c <process_impulse.part.0+0x3dc>)
  4156ae:	7833      	ldrb	r3, [r6, #0]
  4156b0:	2b00      	cmp	r3, #0
  4156b2:	f000 80e7 	beq.w	415884 <process_impulse.part.0+0x334>
            dsp_handles[ix] = nullptr;
        }
    }

    DspHandle* get_dsp_handle(size_t ix) {
        if (dsp_handles[ix] == nullptr) {
  4156b6:	f8da 6008 	ldr.w	r6, [sl, #8]
  4156ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  4156be:	2800      	cmp	r0, #0
  4156c0:	f000 80f1 	beq.w	4158a6 <process_impulse.part.0+0x356>
            }

            // getter has a lazy init, so we can just call it
            auto dsp_handle = handle->state.get_dsp_handle(ix);
            if(dsp_handle) {
                ret = dsp_handle->extract(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
  4156c4:	f8da 2010 	ldr.w	r2, [sl, #16]
  4156c8:	4639      	mov	r1, r7
  4156ca:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
  4156ce:	6802      	ldr	r2, [r0, #0]
  4156d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  4156d2:	6856      	ldr	r6, [r2, #4]
  4156d4:	f858 2c04 	ldr.w	r2, [r8, #-4]
  4156d8:	47b0      	blx	r6
            }
        } else {
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
        }

        if (ret != EIDSP_OK) {
  4156da:	2800      	cmp	r0, #0
  4156dc:	f040 809e 	bne.w	41581c <process_impulse.part.0+0x2cc>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
            delete[] matrix_ptrs;
            return EI_IMPULSE_DSP_ERROR;
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
  4156e0:	f008 ff96 	bl	41e610 <_Z29ei_run_impulse_check_canceledv>
  4156e4:	1c83      	adds	r3, r0, #2
  4156e6:	f000 812d 	beq.w	415944 <process_impulse.part.0+0x3f4>
      if (_M_manager)
  4156ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
  4156ec:	2b00      	cmp	r3, #0
  4156ee:	f000 80be 	beq.w	41586e <process_impulse.part.0+0x31e>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
  4156f2:	2203      	movs	r2, #3
  4156f4:	4629      	mov	r1, r5
  4156f6:	4628      	mov	r0, r5
  4156f8:	4798      	blx	r3
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
  4156fa:	f8da 3010 	ldr.w	r3, [sl, #16]
  4156fe:	3401      	adds	r4, #1
  415700:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
  415704:	f108 0808 	add.w	r8, r8, #8
  415708:	42a2      	cmp	r2, r4
  41570a:	f63f af68 	bhi.w	4155de <process_impulse.part.0+0x8e>
  41570e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
            features[handle->impulse->dsp_blocks_size + ix].blockId = block.blockId;
        }
    }
#endif // EI_CLASSIFIER_SINGLE_FEATURE_INPUT

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
  415710:	f008 ff80 	bl	41e614 <_Z16ei_read_timer_usv>
  415714:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  415716:	9c12      	ldr	r4, [sp, #72]	@ 0x48
  415718:	1ac0      	subs	r0, r0, r3
  41571a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
  41571c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
  415720:	eb61 0103 	sbc.w	r1, r1, r3
  415724:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
  415728:	2300      	movs	r3, #0
  41572a:	f7fb f979 	bl	410a20 <__aeabi_ldivmod>

    if (debug) {
  41572e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
  415730:	61e0      	str	r0, [r4, #28]
    if (debug) {
  415732:	2b00      	cmp	r3, #0
  415734:	f040 8122 	bne.w	41597c <process_impulse.part.0+0x42c>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
  415738:	f8da 0010 	ldr.w	r0, [sl, #16]
  41573c:	2500      	movs	r5, #0
  41573e:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
  415742:	2b00      	cmp	r3, #0
  415744:	f000 8155 	beq.w	4159f2 <process_impulse.part.0+0x4a2>
  415748:	46b0      	mov	r8, r6
  41574a:	e9dd 4612 	ldrd	r4, r6, [sp, #72]	@ 0x48
  41574e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
  415750:	e006      	b.n	415760 <process_impulse.part.0+0x210>
  415752:	f8da 0010 	ldr.w	r0, [sl, #16]
  415756:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
  41575a:	429d      	cmp	r5, r3
  41575c:	f080 8148 	bcs.w	4159f0 <process_impulse.part.0+0x4a0>
        ei_learning_block_t block = impulse->learning_blocks[ix];
  415760:	6d81      	ldr	r1, [r0, #88]	@ 0x58
  415762:	eb01 1145 	add.w	r1, r1, r5, lsl #5
        result->copy_output = block.keep_output;
  415766:	790a      	ldrb	r2, [r1, #4]
        ei_learning_block_t block = impulse->learning_blocks[ix];
  415768:	f8d1 e00c 	ldr.w	lr, [r1, #12]
  41576c:	f891 c018 	ldrb.w	ip, [r1, #24]
  415770:	694b      	ldr	r3, [r1, #20]
  415772:	f8d1 9008 	ldr.w	r9, [r1, #8]
        result->copy_output = block.keep_output;
  415776:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
  41577a:	4639      	mov	r1, r7
  41577c:	462a      	mov	r2, r5
  41577e:	e9cd e602 	strd	lr, r6, [sp, #8]
  415782:	e9cd c400 	strd	ip, r4, [sp]
  415786:	47c8      	blx	r9
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
  415788:	3501      	adds	r5, #1
        if (res != EI_IMPULSE_OK) {
  41578a:	2800      	cmp	r0, #0
  41578c:	d0e1      	beq.n	415752 <process_impulse.part.0+0x202>
  41578e:	4646      	mov	r6, r8
    if (debug) {
        ei_printf("Running impulse...\n");
    }

    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
    delete[] matrix_ptrs;
  415790:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  415792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  415794:	189d      	adds	r5, r3, r2
  415796:	42ae      	cmp	r6, r5
  415798:	d00f      	beq.n	4157ba <process_impulse.part.0+0x26a>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
  41579a:	f855 4d04 	ldr.w	r4, [r5, #-4]!
  41579e:	2c00      	cmp	r4, #0
  4157a0:	d0f9      	beq.n	415796 <process_impulse.part.0+0x246>
  4157a2:	6820      	ldr	r0, [r4, #0]
  4157a4:	b118      	cbz	r0, 4157ae <process_impulse.part.0+0x25e>
  4157a6:	7b23      	ldrb	r3, [r4, #12]
  4157a8:	2b00      	cmp	r3, #0
  4157aa:	f040 8115 	bne.w	4159d8 <process_impulse.part.0+0x488>
	delete __ptr;
  4157ae:	2110      	movs	r1, #16
  4157b0:	4620      	mov	r0, r4
  4157b2:	f012 feab 	bl	42850c <_ZdlPvj>
  4157b6:	42ae      	cmp	r6, r5
  4157b8:	d1ef      	bne.n	41579a <process_impulse.part.0+0x24a>
  4157ba:	990e      	ldr	r1, [sp, #56]	@ 0x38
  4157bc:	980c      	ldr	r0, [sp, #48]	@ 0x30
  4157be:	f012 fea9 	bl	428514 <_ZdaPvj>
                                               ei_impulse_result_t *result,
                                               bool debug) {
    if (!handle) {
        return EI_IMPULSE_OUT_OF_MEMORY;
    }
    auto impulse = handle->impulse;
  4157c2:	f8da 5010 	ldr.w	r5, [sl, #16]

    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
  4157c6:	2400      	movs	r4, #0
  4157c8:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
  4157ca:	2b00      	cmp	r3, #0
  4157cc:	f000 8114 	beq.w	4159f8 <process_impulse.part.0+0x4a8>
  4157d0:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	@ 0x48
  4157d4:	e003      	b.n	4157de <process_impulse.part.0+0x28e>
  4157d6:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
  4157d8:	429c      	cmp	r4, r3
  4157da:	f080 810d 	bcs.w	4159f8 <process_impulse.part.0+0x4a8>

        EI_IMPULSE_ERROR res = impulse->postprocessing_blocks[i].postprocess_fn(handle, result, impulse->postprocessing_blocks[i].config, debug);
  4157de:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
  4157e0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  4157e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  4157e8:	4631      	mov	r1, r6
  4157ea:	e9d2 8203 	ldrd	r8, r2, [r2, #12]
  4157ee:	463b      	mov	r3, r7
  4157f0:	4650      	mov	r0, sl
  4157f2:	47c0      	blx	r8
    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
  4157f4:	3401      	adds	r4, #1
        if (res != EI_IMPULSE_OK) {
  4157f6:	2800      	cmp	r0, #0
  4157f8:	d0ed      	beq.n	4157d6 <process_impulse.part.0+0x286>
  4157fa:	4683      	mov	fp, r0
  4157fc:	e08b      	b.n	415916 <process_impulse.part.0+0x3c6>
  4157fe:	461f      	mov	r7, r3
        if (block.factory) { // ie, if we're using state
  415800:	9b08      	ldr	r3, [sp, #32]
  415802:	2b00      	cmp	r3, #0
  415804:	f47f af52 	bne.w	4156ac <process_impulse.part.0+0x15c>
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
  415808:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
  41580c:	4631      	mov	r1, r6
  41580e:	4638      	mov	r0, r7
  415810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  415812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  415814:	4798      	blx	r3
        if (ret != EIDSP_OK) {
  415816:	2800      	cmp	r0, #0
  415818:	f43f af62 	beq.w	4156e0 <process_impulse.part.0+0x190>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
  41581c:	4601      	mov	r1, r0
  41581e:	4844      	ldr	r0, [pc, #272]	@ (415930 <process_impulse.part.0+0x3e0>)
  415820:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  415822:	f008 feff 	bl	41e624 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
  415826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  415828:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  41582a:	eb03 0802 	add.w	r8, r3, r2
  41582e:	4546      	cmp	r6, r8
  415830:	d00f      	beq.n	415852 <process_impulse.part.0+0x302>
	if (__ptr != nullptr)
  415832:	f858 4d04 	ldr.w	r4, [r8, #-4]!
  415836:	2c00      	cmp	r4, #0
  415838:	d0f9      	beq.n	41582e <process_impulse.part.0+0x2de>
  41583a:	6820      	ldr	r0, [r4, #0]
  41583c:	b118      	cbz	r0, 415846 <process_impulse.part.0+0x2f6>
  41583e:	7b23      	ldrb	r3, [r4, #12]
  415840:	2b00      	cmp	r3, #0
  415842:	f040 80cf 	bne.w	4159e4 <process_impulse.part.0+0x494>
	delete __ptr;
  415846:	2110      	movs	r1, #16
  415848:	4620      	mov	r0, r4
  41584a:	f012 fe5f 	bl	42850c <_ZdlPvj>
  41584e:	4546      	cmp	r6, r8
  415850:	d1ef      	bne.n	415832 <process_impulse.part.0+0x2e2>
  415852:	990e      	ldr	r1, [sp, #56]	@ 0x38
  415854:	980c      	ldr	r0, [sp, #48]	@ 0x30
  415856:	f012 fe5d 	bl	428514 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
  41585a:	f06f 0b04 	mvn.w	fp, #4
      if (_M_manager)
  41585e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
  415860:	2b00      	cmp	r3, #0
  415862:	d058      	beq.n	415916 <process_impulse.part.0+0x3c6>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
  415864:	2203      	movs	r2, #3
  415866:	4629      	mov	r1, r5
  415868:	4628      	mov	r0, r5
  41586a:	4798      	blx	r3
class SignalWithAxes {
  41586c:	e053      	b.n	415916 <process_impulse.part.0+0x3c6>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
  41586e:	f8da 3010 	ldr.w	r3, [sl, #16]
  415872:	3401      	adds	r4, #1
  415874:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
  415878:	f108 0808 	add.w	r8, r8, #8
  41587c:	4294      	cmp	r4, r2
  41587e:	f4ff aeae 	bcc.w	4155de <process_impulse.part.0+0x8e>
  415882:	e744      	b.n	41570e <process_impulse.part.0+0x1be>
                EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
  415884:	492b      	ldr	r1, [pc, #172]	@ (415934 <process_impulse.part.0+0x3e4>)
  415886:	482c      	ldr	r0, [pc, #176]	@ (415938 <process_impulse.part.0+0x3e8>)
  415888:	f008 fecc 	bl	41e624 <_Z9ei_printfPKcz>
  41588c:	482b      	ldr	r0, [pc, #172]	@ (41593c <process_impulse.part.0+0x3ec>)
  41588e:	f008 fec9 	bl	41e624 <_Z9ei_printfPKcz>
                has_printed = true;
  415892:	f04f 0301 	mov.w	r3, #1
  415896:	7033      	strb	r3, [r6, #0]
  415898:	f8da 6008 	ldr.w	r6, [sl, #8]
  41589c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  4158a0:	2800      	cmp	r0, #0
  4158a2:	f47f af0f 	bne.w	4156c4 <process_impulse.part.0+0x174>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config, impulse->frequency);
  4158a6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4158aa:	ed93 0a0e 	vldr	s0, [r3, #56]	@ 0x38
  4158ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  4158b0:	445b      	add	r3, fp
  4158b2:	69da      	ldr	r2, [r3, #28]
  4158b4:	68d8      	ldr	r0, [r3, #12]
  4158b6:	4790      	blx	r2
        }
        return dsp_handles[ix];
  4158b8:	f8da 3008 	ldr.w	r3, [sl, #8]
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config, impulse->frequency);
  4158bc:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        return dsp_handles[ix];
  4158c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
            if(dsp_handle) {
  4158c4:	2800      	cmp	r0, #0
  4158c6:	f47f aefd 	bne.w	4156c4 <process_impulse.part.0+0x174>
                return EI_IMPULSE_OUT_OF_MEMORY;
  4158ca:	f06f 0b0a 	mvn.w	fp, #10
  4158ce:	e7c6      	b.n	41585e <process_impulse.part.0+0x30e>
  4158d0:	9211      	str	r2, [sp, #68]	@ 0x44
            ei_free(buffer);
  4158d2:	f008 fedf 	bl	41e694 <_Z7ei_freePv>
  4158d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  4158d8:	e6ae      	b.n	415638 <process_impulse.part.0+0xe8>
            ei_printf("ERR: Would write outside feature buffer\n");
  4158da:	4819      	ldr	r0, [pc, #100]	@ (415940 <process_impulse.part.0+0x3f0>)
  4158dc:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  4158de:	f008 fea1 	bl	41e624 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
  4158e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  4158e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  4158e6:	189d      	adds	r5, r3, r2
  4158e8:	42ae      	cmp	r6, r5
  4158ea:	d00e      	beq.n	41590a <process_impulse.part.0+0x3ba>
	if (__ptr != nullptr)
  4158ec:	f855 4d04 	ldr.w	r4, [r5, #-4]!
  4158f0:	2c00      	cmp	r4, #0
  4158f2:	d0f9      	beq.n	4158e8 <process_impulse.part.0+0x398>
        if (buffer && buffer_managed_by_me) {
  4158f4:	6820      	ldr	r0, [r4, #0]
  4158f6:	b110      	cbz	r0, 4158fe <process_impulse.part.0+0x3ae>
  4158f8:	7b23      	ldrb	r3, [r4, #12]
  4158fa:	2b00      	cmp	r3, #0
  4158fc:	d16f      	bne.n	4159de <process_impulse.part.0+0x48e>
	delete __ptr;
  4158fe:	2110      	movs	r1, #16
  415900:	4620      	mov	r0, r4
  415902:	f012 fe03 	bl	42850c <_ZdlPvj>
  415906:	42ae      	cmp	r6, r5
  415908:	d1f0      	bne.n	4158ec <process_impulse.part.0+0x39c>
  41590a:	990e      	ldr	r1, [sp, #56]	@ 0x38
  41590c:	980c      	ldr	r0, [sp, #48]	@ 0x30
  41590e:	f012 fe01 	bl	428514 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
  415912:	f06f 0b04 	mvn.w	fp, #4
	  delete [] __ptr;
  415916:	980d      	ldr	r0, [sp, #52]	@ 0x34
  415918:	f012 fdfa 	bl	428510 <_ZdaPv>
    res = run_postprocessing(handle, result, debug);
    return res;
}
  41591c:	4658      	mov	r0, fp
  41591e:	b027      	add	sp, #156	@ 0x9c
  415920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415924:	004154a9 	.word	0x004154a9
  415928:	00415185 	.word	0x00415185
  41592c:	20013e54 	.word	0x20013e54
  415930:	00434634 	.word	0x00434634
  415934:	004345b8 	.word	0x004345b8
  415938:	004345c0 	.word	0x004345c0
  41593c:	004345c8 	.word	0x004345c8
  415940:	0043458c 	.word	0x0043458c
            delete[] matrix_ptrs;
  415944:	4683      	mov	fp, r0
  415946:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  415948:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  41594a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
  41594c:	eb03 0802 	add.w	r8, r3, r2
  415950:	4546      	cmp	r6, r8
  415952:	d00e      	beq.n	415972 <process_impulse.part.0+0x422>
	if (__ptr != nullptr)
  415954:	f858 4d04 	ldr.w	r4, [r8, #-4]!
  415958:	2c00      	cmp	r4, #0
  41595a:	d0f9      	beq.n	415950 <process_impulse.part.0+0x400>
  41595c:	6820      	ldr	r0, [r4, #0]
  41595e:	b110      	cbz	r0, 415966 <process_impulse.part.0+0x416>
  415960:	7b23      	ldrb	r3, [r4, #12]
  415962:	2b00      	cmp	r3, #0
  415964:	d141      	bne.n	4159ea <process_impulse.part.0+0x49a>
	delete __ptr;
  415966:	2110      	movs	r1, #16
  415968:	4620      	mov	r0, r4
  41596a:	f012 fdcf 	bl	42850c <_ZdlPvj>
  41596e:	4546      	cmp	r6, r8
  415970:	d1f0      	bne.n	415954 <process_impulse.part.0+0x404>
  415972:	990e      	ldr	r1, [sp, #56]	@ 0x38
  415974:	980c      	ldr	r0, [sp, #48]	@ 0x30
  415976:	f012 fdcd 	bl	428514 <_ZdaPvj>
            return EI_IMPULSE_CANCELED;
  41597a:	e770      	b.n	41585e <process_impulse.part.0+0x30e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
  41597c:	4601      	mov	r1, r0
  41597e:	4820      	ldr	r0, [pc, #128]	@ (415a00 <process_impulse.part.0+0x4b0>)
  415980:	f008 fe50 	bl	41e624 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
  415984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  415986:	2500      	movs	r5, #0
  415988:	b313      	cbz	r3, 4159d0 <process_impulse.part.0+0x480>
  41598a:	469b      	mov	fp, r3
                ei_printf(" ");
  41598c:	4c1d      	ldr	r4, [pc, #116]	@ (415a04 <process_impulse.part.0+0x4b4>)
            ei_printf("\n");
  41598e:	4f1e      	ldr	r7, [pc, #120]	@ (415a08 <process_impulse.part.0+0x4b8>)
  415990:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
            if (features[ix].matrix == nullptr) {
  415994:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
  415998:	b1bb      	cbz	r3, 4159ca <process_impulse.part.0+0x47a>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
  41599a:	689a      	ldr	r2, [r3, #8]
  41599c:	f04f 0800 	mov.w	r8, #0
  4159a0:	b182      	cbz	r2, 4159c4 <process_impulse.part.0+0x474>
                ei_printf_float(features[ix].matrix->buffer[jx]);
  4159a2:	681b      	ldr	r3, [r3, #0]
  4159a4:	eb03 0388 	add.w	r3, r3, r8, lsl #2
  4159a8:	ed93 0a00 	vldr	s0, [r3]
  4159ac:	f008 fe56 	bl	41e65c <_Z15ei_printf_floatf>
                ei_printf(" ");
  4159b0:	4620      	mov	r0, r4
  4159b2:	f008 fe37 	bl	41e624 <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
  4159b6:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
  4159ba:	f108 0801 	add.w	r8, r8, #1
  4159be:	689a      	ldr	r2, [r3, #8]
  4159c0:	4590      	cmp	r8, r2
  4159c2:	d3ee      	bcc.n	4159a2 <process_impulse.part.0+0x452>
            ei_printf("\n");
  4159c4:	4638      	mov	r0, r7
  4159c6:	f008 fe2d 	bl	41e624 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
  4159ca:	3501      	adds	r5, #1
  4159cc:	45ab      	cmp	fp, r5
  4159ce:	d1e1      	bne.n	415994 <process_impulse.part.0+0x444>
        ei_printf("Running impulse...\n");
  4159d0:	480e      	ldr	r0, [pc, #56]	@ (415a0c <process_impulse.part.0+0x4bc>)
  4159d2:	f008 fe27 	bl	41e624 <_Z9ei_printfPKcz>
  4159d6:	e6af      	b.n	415738 <process_impulse.part.0+0x1e8>
            ei_free(buffer);
  4159d8:	f008 fe5c 	bl	41e694 <_Z7ei_freePv>
  4159dc:	e6e7      	b.n	4157ae <process_impulse.part.0+0x25e>
  4159de:	f008 fe59 	bl	41e694 <_Z7ei_freePv>
  4159e2:	e78c      	b.n	4158fe <process_impulse.part.0+0x3ae>
  4159e4:	f008 fe56 	bl	41e694 <_Z7ei_freePv>
  4159e8:	e72d      	b.n	415846 <process_impulse.part.0+0x2f6>
  4159ea:	f008 fe53 	bl	41e694 <_Z7ei_freePv>
  4159ee:	e7ba      	b.n	415966 <process_impulse.part.0+0x416>
  4159f0:	4646      	mov	r6, r8
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
  4159f2:	f008 fe0d 	bl	41e610 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
  4159f6:	e6cb      	b.n	415790 <process_impulse.part.0+0x240>
            return res;
        }
    }

    return EI_IMPULSE_OK;
  4159f8:	f04f 0b00 	mov.w	fp, #0
  4159fc:	e78b      	b.n	415916 <process_impulse.part.0+0x3c6>
  4159fe:	bf00      	nop
  415a00:	0043465c 	.word	0x0043465c
  415a04:	004354e8 	.word	0x004354e8
  415a08:	00434630 	.word	0x00434630
  415a0c:	00434670 	.word	0x00434670

00415a10 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
  415a10:	468c      	mov	ip, r1
  415a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    size_t matrix_els = 0;
    uint32_t input_idx = 0;

    for (size_t i = 0; i < input_block_ids_size; i++) {
  415a16:	2b00      	cmp	r3, #0
  415a18:	f000 80df 	beq.w	415bda <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1ca>
  415a1c:	2400      	movs	r4, #0
  415a1e:	4682      	mov	sl, r0
    uint32_t input_idx = 0;
  415a20:	4622      	mov	r2, r4
    size_t matrix_els = 0;
  415a22:	4625      	mov	r5, r4
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
  415a24:	f8da 6000 	ldr.w	r6, [sl]
#endif

        matrix_els += matrix->rows * matrix->cols;

        switch (input->type) {
  415a28:	f89c 701c 	ldrb.w	r7, [ip, #28]
        matrix_els += matrix->rows * matrix->cols;
  415a2c:	e9d6 1001 	ldrd	r1, r0, [r6, #4]
  415a30:	fb00 f101 	mul.w	r1, r0, r1
        switch (input->type) {
  415a34:	2f03      	cmp	r7, #3
        matrix_els += matrix->rows * matrix->cols;
  415a36:	440d      	add	r5, r1
        switch (input->type) {
  415a38:	d00b      	beq.n	415a52 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x42>
  415a3a:	2f09      	cmp	r7, #9
  415a3c:	d066      	beq.n	415b0c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xfc>
  415a3e:	2f01      	cmp	r7, #1
  415a40:	d039      	beq.n	415ab6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xa6>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
                break;
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
  415a42:	486c      	ldr	r0, [pc, #432]	@ (415bf4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1e4>)
  415a44:	4639      	mov	r1, r7
  415a46:	f008 fded 	bl	41e624 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
  415a4a:	f06f 000c 	mvn.w	r0, #12
            (int)input->bytes, (int)matrix_els);
        return EI_IMPULSE_INVALID_SIZE;
    }

    return EI_IMPULSE_OK;
}
  415a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415a52:	f04f 0e00 	mov.w	lr, #0
  415a56:	b301      	cbz	r1, 415a9a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8a>
                    float val = (float)matrix->buffer[ix];
  415a58:	6831      	ldr	r1, [r6, #0]
static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {

    int32_t max_value = is_signed ? 127 : 255;
    int32_t min_value = is_signed ? -128 : 0;
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
  415a5a:	ed9c 7a02 	vldr	s14, [ip, #8]
  415a5e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
  415a62:	edd1 6a00 	vldr	s13, [r1]
  415a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
  415a6a:	fef8 7a67 	vrinta.f32	s15, s15
  415a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  415a72:	ee17 7a90 	vmov	r7, s15
  415a76:	f8dc 000c 	ldr.w	r0, [ip, #12]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
  415a7a:	f8dc 1010 	ldr.w	r1, [ip, #16]
  415a7e:	4407      	add	r7, r0
  415a80:	f387 0708 	usat	r7, #8, r7
  415a84:	548f      	strb	r7, [r1, r2]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415a86:	e9d6 1001 	ldrd	r1, r0, [r6, #4]
  415a8a:	fb00 f101 	mul.w	r1, r0, r1
  415a8e:	f10e 0e01 	add.w	lr, lr, #1
  415a92:	4571      	cmp	r1, lr
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
  415a94:	f102 0201 	add.w	r2, r2, #1
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415a98:	d8de      	bhi.n	415a58 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x48>
    for (size_t i = 0; i < input_block_ids_size; i++) {
  415a9a:	3401      	adds	r4, #1
  415a9c:	42a3      	cmp	r3, r4
  415a9e:	d1c1      	bne.n	415a24 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14>
    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
  415aa0:	f8dc 1018 	ldr.w	r1, [ip, #24]
  415aa4:	ebb5 0f91 	cmp.w	r5, r1, lsr #2
  415aa8:	d002      	beq.n	415ab0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xa0>
  415aaa:	42a9      	cmp	r1, r5
  415aac:	f040 80a0 	bne.w	415bf0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1e0>
    return EI_IMPULSE_OK;
  415ab0:	2000      	movs	r0, #0
}
  415ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415ab6:	2900      	cmp	r1, #0
  415ab8:	d0ef      	beq.n	415a9a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8a>
  415aba:	1e4f      	subs	r7, r1, #1
  415abc:	2f05      	cmp	r7, #5
                    input->data.f[input_idx++] = matrix->buffer[ix];
  415abe:	6836      	ldr	r6, [r6, #0]
  415ac0:	f8dc 9010 	ldr.w	r9, [ip, #16]
  415ac4:	f240 8086 	bls.w	415bd4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1c4>
  415ac8:	eb09 0782 	add.w	r7, r9, r2, lsl #2
  415acc:	f106 0e04 	add.w	lr, r6, #4
  415ad0:	eba7 0e0e 	sub.w	lr, r7, lr
  415ad4:	f1be 0f08 	cmp.w	lr, #8
  415ad8:	ea4f 0882 	mov.w	r8, r2, lsl #2
  415adc:	d849      	bhi.n	415b72 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x162>
  415ade:	ea4f 0e81 	mov.w	lr, r1, lsl #2
  415ae2:	f1ae 0e04 	sub.w	lr, lr, #4
  415ae6:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  415aea:	f10e 0e01 	add.w	lr, lr, #1
  415aee:	f04e e001 	dls	lr, lr
  415af2:	eb09 0708 	add.w	r7, r9, r8
  415af6:	f856 8b04 	ldr.w	r8, [r6], #4
  415afa:	f847 8b04 	str.w	r8, [r7], #4
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415afe:	f00f c007 	le	lr, 415af6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xe6>
  415b02:	440a      	add	r2, r1
    for (size_t i = 0; i < input_block_ids_size; i++) {
  415b04:	3401      	adds	r4, #1
  415b06:	42a3      	cmp	r3, r4
  415b08:	d18c      	bne.n	415a24 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14>
  415b0a:	e7c9      	b.n	415aa0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x90>
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415b0c:	f04f 0e00 	mov.w	lr, #0
                    input->data.int8[input_idx++] = static_cast<int8_t>(
  415b10:	f06f 077f 	mvn.w	r7, #127	@ 0x7f
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415b14:	2900      	cmp	r1, #0
  415b16:	d0c0      	beq.n	415a9a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8a>
                    float val = (float)matrix->buffer[ix];
  415b18:	6831      	ldr	r1, [r6, #0]
  415b1a:	ed9c 7a02 	vldr	s14, [ip, #8]
  415b1e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
  415b22:	edd1 6a00 	vldr	s13, [r1]
  415b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
  415b2a:	fef8 7a67 	vrinta.f32	s15, s15
  415b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  415b32:	ee17 8a90 	vmov	r8, s15
  415b36:	f8dc 000c 	ldr.w	r0, [ip, #12]
                    input->data.int8[input_idx++] = static_cast<int8_t>(
  415b3a:	f8dc 1010 	ldr.w	r1, [ip, #16]
  415b3e:	4480      	add	r8, r0
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
  415b40:	f1b8 0f7f 	cmp.w	r8, #127	@ 0x7f
  415b44:	bfa8      	it	ge
  415b46:	f04f 087f 	movge.w	r8, #127	@ 0x7f
  415b4a:	45b8      	cmp	r8, r7
  415b4c:	bfb8      	it	lt
  415b4e:	46b8      	movlt	r8, r7
  415b50:	f801 8002 	strb.w	r8, [r1, r2]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415b54:	e9d6 1001 	ldrd	r1, r0, [r6, #4]
  415b58:	fb00 f101 	mul.w	r1, r0, r1
  415b5c:	f10e 0e01 	add.w	lr, lr, #1
  415b60:	4571      	cmp	r1, lr
                    input->data.int8[input_idx++] = static_cast<int8_t>(
  415b62:	f102 0201 	add.w	r2, r2, #1
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415b66:	d8d7      	bhi.n	415b18 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x108>
    for (size_t i = 0; i < input_block_ids_size; i++) {
  415b68:	3401      	adds	r4, #1
  415b6a:	42a3      	cmp	r3, r4
  415b6c:	f47f af5a 	bne.w	415a24 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x14>
  415b70:	e796      	b.n	415aa0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x90>
  415b72:	ea4f 0e91 	mov.w	lr, r1, lsr #2
  415b76:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  415b7a:	f1ae 0e10 	sub.w	lr, lr, #16
  415b7e:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  415b82:	f10e 0e01 	add.w	lr, lr, #1
  415b86:	f04e e001 	dls	lr, lr
  415b8a:	46b0      	mov	r8, r6
                    input->data.f[input_idx++] = matrix->buffer[ix];
  415b8c:	ecb8 7f04 	ldc	15, cr7, [r8], #16
  415b90:	eca7 7f04 	stc	15, cr7, [r7], #16
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415b94:	f00f c007 	le	lr, 415b8c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x17c>
  415b98:	f021 0703 	bic.w	r7, r1, #3
  415b9c:	0788      	lsls	r0, r1, #30
  415b9e:	eb02 0e07 	add.w	lr, r2, r7
  415ba2:	d0ae      	beq.n	415b02 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf2>
                    input->data.f[input_idx++] = matrix->buffer[ix];
  415ba4:	eb06 0687 	add.w	r6, r6, r7, lsl #2
  415ba8:	f8d6 8000 	ldr.w	r8, [r6]
  415bac:	eb09 0e8e 	add.w	lr, r9, lr, lsl #2
  415bb0:	f8ce 8000 	str.w	r8, [lr]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415bb4:	f107 0801 	add.w	r8, r7, #1
  415bb8:	4541      	cmp	r1, r8
  415bba:	d9a2      	bls.n	415b02 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf2>
                    input->data.f[input_idx++] = matrix->buffer[ix];
  415bbc:	f8d6 8004 	ldr.w	r8, [r6, #4]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415bc0:	3702      	adds	r7, #2
  415bc2:	42b9      	cmp	r1, r7
                    input->data.f[input_idx++] = matrix->buffer[ix];
  415bc4:	f8ce 8004 	str.w	r8, [lr, #4]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415bc8:	d99b      	bls.n	415b02 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf2>
                    input->data.f[input_idx++] = matrix->buffer[ix];
  415bca:	68b6      	ldr	r6, [r6, #8]
  415bcc:	440a      	add	r2, r1
  415bce:	f8ce 6008 	str.w	r6, [lr, #8]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
  415bd2:	e797      	b.n	415b04 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xf4>
  415bd4:	ea4f 0882 	mov.w	r8, r2, lsl #2
  415bd8:	e781      	b.n	415ade <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xce>
    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
  415bda:	6989      	ldr	r1, [r1, #24]
  415bdc:	088a      	lsrs	r2, r1, #2
  415bde:	f43f af67 	beq.w	415ab0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xa0>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
  415be2:	4805      	ldr	r0, [pc, #20]	@ (415bf8 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1e8>)
  415be4:	461a      	mov	r2, r3
  415be6:	f008 fd1d 	bl	41e624 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
  415bea:	f06f 0017 	mvn.w	r0, #23
  415bee:	e72e      	b.n	415a4e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x3e>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
  415bf0:	462b      	mov	r3, r5
  415bf2:	e7f6      	b.n	415be2 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x1d2>
  415bf4:	00434684 	.word	0x00434684
  415bf8:	004346a8 	.word	0x004346a8

00415bfc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
  415bfc:	460b      	mov	r3, r1
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;

    switch (output->type) {
  415bfe:	7f01      	ldrb	r1, [r0, #28]
) {
  415c00:	b510      	push	{r4, lr}
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
  415c02:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
    switch (output->type) {
  415c06:	2903      	cmp	r1, #3
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
  415c08:	fb02 f404 	mul.w	r4, r2, r4
    switch (output->type) {
  415c0c:	d02e      	beq.n	415c6c <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x70>
  415c0e:	2909      	cmp	r1, #9
  415c10:	d00b      	beq.n	415c2a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2e>
  415c12:	2901      	cmp	r1, #1
  415c14:	d124      	bne.n	415c60 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x64>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
  415c16:	6982      	ldr	r2, [r0, #24]
  415c18:	ebb4 0f92 	cmp.w	r4, r2, lsr #2
  415c1c:	d141      	bne.n	415ca2 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xa6>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
                return EI_IMPULSE_INVALID_SIZE;
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
  415c1e:	6901      	ldr	r1, [r0, #16]
  415c20:	6818      	ldr	r0, [r3, #0]
  415c22:	f7fa fccb 	bl	4105bc <memcpy>
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
        }
    }

    return EI_IMPULSE_OK;
  415c26:	2000      	movs	r0, #0
}
  415c28:	bd10      	pop	{r4, pc}
            if (output->bytes != matrix_els) {
  415c2a:	6981      	ldr	r1, [r0, #24]
  415c2c:	42a1      	cmp	r1, r4
  415c2e:	d145      	bne.n	415cbc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xc0>
            for (size_t ix = 0; ix < output->bytes; ix++) {
  415c30:	2900      	cmp	r1, #0
  415c32:	d0f8      	beq.n	415c26 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
  415c34:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
  415c38:	f041 e001 	dls	lr, r1
  415c3c:	6819      	ldr	r1, [r3, #0]
  415c3e:	3a01      	subs	r2, #1
  415c40:	f912 3f01 	ldrsb.w	r3, [r2, #1]!
  415c44:	ed90 7a02 	vldr	s14, [r0, #8]
  415c48:	1b1b      	subs	r3, r3, r4
  415c4a:	ee07 3a90 	vmov	s15, r3
  415c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  415c52:	ee67 7a87 	vmul.f32	s15, s15, s14
                output_matrix->buffer[ix] = value;
  415c56:	ece1 7a01 	vstmia	r1!, {s15}
            for (size_t ix = 0; ix < output->bytes; ix++) {
  415c5a:	f00f c80f 	le	lr, 415c40 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x44>
  415c5e:	e7e2      	b.n	415c26 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
  415c60:	4819      	ldr	r0, [pc, #100]	@ (415cc8 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xcc>)
  415c62:	f008 fcdf 	bl	41e624 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
  415c66:	f06f 000d 	mvn.w	r0, #13
}
  415c6a:	bd10      	pop	{r4, pc}
            if (output->bytes != matrix_els) {
  415c6c:	6981      	ldr	r1, [r0, #24]
  415c6e:	42a1      	cmp	r1, r4
  415c70:	d124      	bne.n	415cbc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xc0>
            for (size_t ix = 0; ix < output->bytes; ix++) {
  415c72:	2900      	cmp	r1, #0
  415c74:	d0d7      	beq.n	415c26 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
  415c76:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
  415c7a:	f041 e001 	dls	lr, r1
  415c7e:	6819      	ldr	r1, [r3, #0]
  415c80:	3a01      	subs	r2, #1
  415c82:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  415c86:	ed90 7a02 	vldr	s14, [r0, #8]
  415c8a:	1b1b      	subs	r3, r3, r4
  415c8c:	ee07 3a90 	vmov	s15, r3
  415c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  415c94:	ee67 7a87 	vmul.f32	s15, s15, s14
                output_matrix->buffer[ix] = value;
  415c98:	ece1 7a01 	vstmia	r1!, {s15}
            for (size_t ix = 0; ix < output->bytes; ix++) {
  415c9c:	f00f c80f 	le	lr, 415c82 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x86>
  415ca0:	e7c1      	b.n	415c26 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
  415ca2:	2a00      	cmp	r2, #0
  415ca4:	f102 0103 	add.w	r1, r2, #3
  415ca8:	bfa8      	it	ge
  415caa:	4611      	movge	r1, r2
  415cac:	4807      	ldr	r0, [pc, #28]	@ (415ccc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd0>)
  415cae:	4622      	mov	r2, r4
  415cb0:	1089      	asrs	r1, r1, #2
  415cb2:	f008 fcb7 	bl	41e624 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
  415cb6:	f06f 0017 	mvn.w	r0, #23
}
  415cba:	bd10      	pop	{r4, pc}
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
  415cbc:	4622      	mov	r2, r4
  415cbe:	4803      	ldr	r0, [pc, #12]	@ (415ccc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd0>)
  415cc0:	f008 fcb0 	bl	41e624 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
  415cc4:	e7f7      	b.n	415cb6 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xba>
  415cc6:	bf00      	nop
  415cc8:	0043473c 	.word	0x0043473c
  415ccc:	004346f8 	.word	0x004346f8

00415cd0 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
  415cd0:	f06f 4c60 	mvn.w	ip, #3758096384	@ 0xe0000000
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
  415cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  415cd8:	e9d0 7600 	ldrd	r7, r6, [r0]
  415cdc:	4692      	mov	sl, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  415cde:	1bf2      	subs	r2, r6, r7
	if (max_size() - size() < __n)
  415ce0:	ebbc 0fa2 	cmp.w	ip, r2, asr #2
  415ce4:	b083      	sub	sp, #12
  415ce6:	d060      	beq.n	415daa <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xda>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
  415ce8:	42b7      	cmp	r7, r6
  415cea:	4605      	mov	r5, r0
  415cec:	4688      	mov	r8, r1
  415cee:	ea4f 03a2 	mov.w	r3, r2, asr #2
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
  415cf2:	eba1 0907 	sub.w	r9, r1, r7
  415cf6:	d040      	beq.n	415d7a <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xaa>
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  415cf8:	ebb3 0f43 	cmp.w	r3, r3, lsl #1
	const size_type __len = size() + (std::max)(size(), __n);
  415cfc:	ea4f 0243 	mov.w	r2, r3, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  415d00:	d81a      	bhi.n	415d38 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x68>
      _M_allocate(size_t __n)
  415d02:	4614      	mov	r4, r2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  415d04:	4693      	mov	fp, r2
  415d06:	2a00      	cmp	r2, #0
  415d08:	d149      	bne.n	415d9e <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xce>
      template<typename _Up, typename... _Args>
	__attribute__((__always_inline__))
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  415d0a:	f8da 3000 	ldr.w	r3, [sl]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
  415d0e:	f109 0a04 	add.w	sl, r9, #4
  415d12:	f84b 3009 	str.w	r3, [fp, r9]
  415d16:	44da      	add	sl, fp
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
  415d18:	eba6 0308 	sub.w	r3, r6, r8
      if (__count > 0)
  415d1c:	f1b9 0f00 	cmp.w	r9, #0
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
	}
      return __result + __count;
  415d20:	eb0a 0603 	add.w	r6, sl, r3
      if (__count > 0)
  415d24:	dc15      	bgt.n	415d52 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x82>
  415d26:	2b00      	cmp	r3, #0
  415d28:	dc0d      	bgt.n	415d46 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x76>
	if (__p)
  415d2a:	b9df      	cbnz	r7, 415d64 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x94>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
  415d2c:	e9c5 b600 	strd	fp, r6, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
  415d30:	60ac      	str	r4, [r5, #8]
    }
  415d32:	b003      	add	sp, #12
  415d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415d38:	4c1d      	ldr	r4, [pc, #116]	@ (415db0 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe0>)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  415d3a:	4620      	mov	r0, r4
  415d3c:	f012 fbe0 	bl	428500 <_Znwj>
  415d40:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
  415d42:	4404      	add	r4, r0
  415d44:	e7e1      	b.n	415d0a <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
  415d46:	461a      	mov	r2, r3
  415d48:	4641      	mov	r1, r8
  415d4a:	4650      	mov	r0, sl
  415d4c:	f7fa fc36 	bl	4105bc <memcpy>
  415d50:	e7eb      	b.n	415d2a <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x5a>
  415d52:	464a      	mov	r2, r9
  415d54:	4639      	mov	r1, r7
  415d56:	4658      	mov	r0, fp
  415d58:	9301      	str	r3, [sp, #4]
  415d5a:	f00a ff23 	bl	420ba4 <memmove>
      if (__count > 0)
  415d5e:	9b01      	ldr	r3, [sp, #4]
  415d60:	2b00      	cmp	r3, #0
  415d62:	dc11      	bgt.n	415d88 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb8>
		    this->_M_impl._M_end_of_storage - __old_start);
  415d64:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  415d66:	4638      	mov	r0, r7
  415d68:	1bc9      	subs	r1, r1, r7
  415d6a:	f012 fbcf 	bl	42850c <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
  415d6e:	e9c5 b600 	strd	fp, r6, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
  415d72:	60ac      	str	r4, [r5, #8]
    }
  415d74:	b003      	add	sp, #12
  415d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415d7a:	1c5c      	adds	r4, r3, #1
  415d7c:	d2dc      	bcs.n	415d38 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x68>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  415d7e:	4564      	cmp	r4, ip
  415d80:	bf28      	it	cs
  415d82:	4664      	movcs	r4, ip
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  415d84:	00a4      	lsls	r4, r4, #2
  415d86:	e7d8      	b.n	415d3a <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
  415d88:	4641      	mov	r1, r8
  415d8a:	461a      	mov	r2, r3
  415d8c:	4650      	mov	r0, sl
  415d8e:	f7fa fc15 	bl	4105bc <memcpy>
		    this->_M_impl._M_end_of_storage - __old_start);
  415d92:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  415d94:	4638      	mov	r0, r7
  415d96:	1bc9      	subs	r1, r1, r7
  415d98:	f012 fbb8 	bl	42850c <_ZdlPvj>
  415d9c:	e7e7      	b.n	415d6e <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9e>
  415d9e:	4594      	cmp	ip, r2
  415da0:	bf28      	it	cs
  415da2:	4694      	movcs	ip, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  415da4:	ea4f 048c 	mov.w	r4, ip, lsl #2
  415da8:	e7c7      	b.n	415d3a <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6a>
	  __throw_length_error(__N(__s));
  415daa:	4802      	ldr	r0, [pc, #8]	@ (415db4 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe4>)
  415dac:	f015 f856 	bl	42ae5c <_ZSt20__throw_length_errorPKc>
  415db0:	7ffffffc 	.word	0x7ffffffc
  415db4:	00434570 	.word	0x00434570

00415db8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
  415db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  415dbc:	e9d0 7600 	ldrd	r7, r6, [r0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  415dc0:	4c39      	ldr	r4, [pc, #228]	@ (415ea8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
  415dc2:	1bf3      	subs	r3, r6, r7
  415dc4:	10db      	asrs	r3, r3, #3
  415dc6:	fb04 f303 	mul.w	r3, r4, r3
	if (max_size() - size() < __n)
  415dca:	f8df c0e8 	ldr.w	ip, [pc, #232]	@ 415eb4 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>
  415dce:	b083      	sub	sp, #12
  415dd0:	4563      	cmp	r3, ip
  415dd2:	d065      	beq.n	415ea0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xe8>
  415dd4:	42b7      	cmp	r7, r6
  415dd6:	4605      	mov	r5, r0
  415dd8:	4689      	mov	r9, r1
  415dda:	4693      	mov	fp, r2
  415ddc:	eba1 0a07 	sub.w	sl, r1, r7
  415de0:	d043      	beq.n	415e6a <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb2>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  415de2:	ebb3 0f43 	cmp.w	r3, r3, lsl #1
	const size_type __len = size() + (std::max)(size(), __n);
  415de6:	ea4f 0243 	mov.w	r2, r3, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  415dea:	d824      	bhi.n	415e36 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
      _M_allocate(size_t __n)
  415dec:	4614      	mov	r4, r2
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  415dee:	4690      	mov	r8, r2
  415df0:	2a00      	cmp	r2, #0
  415df2:	d14e      	bne.n	415e92 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xda>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  415df4:	46dc      	mov	ip, fp
	      ++__new_finish;
  415df6:	f10a 0b18 	add.w	fp, sl, #24
      ptrdiff_t __count = __last - __first;
  415dfa:	eba6 0609 	sub.w	r6, r6, r9
  415dfe:	44c3      	add	fp, r8
      return __result + __count;
  415e00:	eb0b 0306 	add.w	r3, fp, r6
  415e04:	eb08 0e0a 	add.w	lr, r8, sl
  415e08:	9301      	str	r3, [sp, #4]
  415e0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  415e0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  415e12:	e89c 0003 	ldmia.w	ip, {r0, r1}
      if (__count > 0)
  415e16:	f1ba 0f00 	cmp.w	sl, #0
  415e1a:	e88e 0003 	stmia.w	lr, {r0, r1}
  415e1e:	dc17      	bgt.n	415e50 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x98>
  415e20:	2e00      	cmp	r6, #0
  415e22:	dc0f      	bgt.n	415e44 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
	if (__p)
  415e24:	b9df      	cbnz	r7, 415e5e <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa6>
      this->_M_impl._M_finish = __new_finish;
  415e26:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_start = __new_start;
  415e28:	f8c5 8000 	str.w	r8, [r5]
      this->_M_impl._M_end_of_storage = __new_start + __len;
  415e2c:	e9c5 3401 	strd	r3, r4, [r5, #4]
    }
  415e30:	b003      	add	sp, #12
  415e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415e36:	4c1d      	ldr	r4, [pc, #116]	@ (415eac <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf4>)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  415e38:	4620      	mov	r0, r4
  415e3a:	f012 fb61 	bl	428500 <_Znwj>
  415e3e:	4680      	mov	r8, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
  415e40:	4404      	add	r4, r0
  415e42:	e7d7      	b.n	415df4 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
  415e44:	4632      	mov	r2, r6
  415e46:	4649      	mov	r1, r9
  415e48:	4658      	mov	r0, fp
  415e4a:	f7fa fbb7 	bl	4105bc <memcpy>
  415e4e:	e7e9      	b.n	415e24 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
  415e50:	4652      	mov	r2, sl
  415e52:	4639      	mov	r1, r7
  415e54:	4640      	mov	r0, r8
  415e56:	f00a fea5 	bl	420ba4 <memmove>
      if (__count > 0)
  415e5a:	2e00      	cmp	r6, #0
  415e5c:	dc0e      	bgt.n	415e7c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
		    this->_M_impl._M_end_of_storage - __old_start);
  415e5e:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  415e60:	4638      	mov	r0, r7
  415e62:	1bc9      	subs	r1, r1, r7
  415e64:	f012 fb52 	bl	42850c <_ZdlPvj>
  415e68:	e7dd      	b.n	415e26 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6e>
  415e6a:	3301      	adds	r3, #1
  415e6c:	d2e3      	bcs.n	415e36 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  415e6e:	4563      	cmp	r3, ip
  415e70:	bf28      	it	cs
  415e72:	4663      	movcs	r3, ip
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  415e74:	eb03 0443 	add.w	r4, r3, r3, lsl #1
  415e78:	00e4      	lsls	r4, r4, #3
  415e7a:	e7dd      	b.n	415e38 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x80>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
  415e7c:	4649      	mov	r1, r9
  415e7e:	4632      	mov	r2, r6
  415e80:	4658      	mov	r0, fp
  415e82:	f7fa fb9b 	bl	4105bc <memcpy>
  415e86:	68a9      	ldr	r1, [r5, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  415e88:	4638      	mov	r0, r7
  415e8a:	1bc9      	subs	r1, r1, r7
  415e8c:	f012 fb3e 	bl	42850c <_ZdlPvj>
  415e90:	e7c9      	b.n	415e26 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6e>
  415e92:	4562      	cmp	r2, ip
  415e94:	bf28      	it	cs
  415e96:	4662      	movcs	r2, ip
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
  415e98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  415e9c:	00d4      	lsls	r4, r2, #3
  415e9e:	e7cb      	b.n	415e38 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x80>
	  __throw_length_error(__N(__s));
  415ea0:	4803      	ldr	r0, [pc, #12]	@ (415eb0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)
  415ea2:	f014 ffdb 	bl	42ae5c <_ZSt20__throw_length_errorPKc>
  415ea6:	bf00      	nop
  415ea8:	aaaaaaab 	.word	0xaaaaaaab
  415eac:	7ffffff8 	.word	0x7ffffff8
  415eb0:	00434570 	.word	0x00434570
  415eb4:	05555555 	.word	0x05555555

00415eb8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj>:
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
  415eb8:	2900      	cmp	r1, #0
  415eba:	f000 80ac 	beq.w	416016 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x15e>
    vector<_Tp, _Alloc>::
  415ebe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);
  415ec2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
  415ec6:	4a6c      	ldr	r2, [pc, #432]	@ (416078 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x1c0>)
  415ec8:	1b5b      	subs	r3, r3, r5
  415eca:	10db      	asrs	r3, r3, #3
  415ecc:	fb02 f303 	mul.w	r3, r2, r3

	  if (__size > max_size() || __navail > max_size() - __size)
	    __builtin_unreachable();

	  if (__navail >= __n)
  415ed0:	4299      	cmp	r1, r3
  415ed2:	4606      	mov	r6, r0
  415ed4:	460c      	mov	r4, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  415ed6:	f8d0 a000 	ldr.w	sl, [r0]
    vector<_Tp, _Alloc>::
  415eda:	b083      	sub	sp, #12
	  if (__navail >= __n)
  415edc:	d95a      	bls.n	415f94 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xdc>
  415ede:	eba5 050a 	sub.w	r5, r5, sl
  415ee2:	10eb      	asrs	r3, r5, #3
  415ee4:	fb02 f303 	mul.w	r3, r2, r3
	  if (__size > max_size() || __navail > max_size() - __size)
  415ee8:	4964      	ldr	r1, [pc, #400]	@ (41607c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x1c4>)
  415eea:	1aca      	subs	r2, r1, r3
	if (max_size() - size() < __n)
  415eec:	42a2      	cmp	r2, r4
  415eee:	f0c0 80bf 	bcc.w	416070 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x1b8>
	      __first = std::fill_n(__first, __n - 1, *__val);
  415ef2:	1e62      	subs	r2, r4, #1
  415ef4:	429c      	cmp	r4, r3
	const size_type __len = size() + (std::max)(size(), __n);
  415ef6:	eb04 0903 	add.w	r9, r4, r3
  415efa:	9201      	str	r2, [sp, #4]
  415efc:	f200 808c 	bhi.w	416018 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x160>
  415f00:	005b      	lsls	r3, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  415f02:	428b      	cmp	r3, r1
  415f04:	bf28      	it	cs
  415f06:	460b      	movcs	r3, r1
  415f08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  415f0c:	00db      	lsls	r3, r3, #3
  415f0e:	4618      	mov	r0, r3
  415f10:	9300      	str	r3, [sp, #0]
  415f12:	f012 faf5 	bl	428500 <_Znwj>
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
	  return;
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
  415f16:	2300      	movs	r3, #0
	      pointer __new_start(this->_M_allocate(__len));
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
		{
		  __try
		    {
		      std::__uninitialized_default_n_a(__new_start + __size,
  415f18:	eb00 0b05 	add.w	fp, r0, r5
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
  415f1c:	2c01      	cmp	r4, #1
  415f1e:	5143      	str	r3, [r0, r5]
  415f20:	4680      	mov	r8, r0
  415f22:	e9cb 3301 	strd	r3, r3, [fp, #4]
  415f26:	e9cb 3303 	strd	r3, r3, [fp, #12]
  415f2a:	f8cb 3014 	str.w	r3, [fp, #20]
  415f2e:	f000 808f 	beq.w	416050 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x198>
  415f32:	9a01      	ldr	r2, [sp, #4]
	      ++__first;
  415f34:	f10b 0718 	add.w	r7, fp, #24
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
  415f38:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
  415f3c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  415f40:	4b4f      	ldr	r3, [pc, #316]	@ (416080 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x1c8>)
  415f42:	f1ae 0e18 	sub.w	lr, lr, #24
  415f46:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  415f4a:	fb03 fe0e 	mul.w	lr, r3, lr
  415f4e:	f02e 4e60 	bic.w	lr, lr, #3758096384	@ 0xe0000000
  415f52:	f10e 0e01 	add.w	lr, lr, #1
  415f56:	f04e e001 	dls	lr, lr
	*__first = __value;
  415f5a:	46bc      	mov	ip, r7
  415f5c:	465c      	mov	r4, fp
  415f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  415f60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      for (; __first != __last; ++__first)
  415f64:	3718      	adds	r7, #24
	*__first = __value;
  415f66:	e894 0003 	ldmia.w	r4, {r0, r1}
  415f6a:	e88c 0003 	stmia.w	ip, {r0, r1}
      for (; __first != __last; ++__first)
  415f6e:	f00f c00d 	le	lr, 415f5a <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xa2>
      if (__count > 0)
  415f72:	2d00      	cmp	r5, #0
  415f74:	d16c      	bne.n	416050 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x198>
	if (__p)
  415f76:	f1ba 0f00 	cmp.w	sl, #0
  415f7a:	d175      	bne.n	416068 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x1b0>
	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
	      _M_deallocate(__old_start,
			    this->_M_impl._M_end_of_storage - __old_start);
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
  415f7c:	9a00      	ldr	r2, [sp, #0]
	      this->_M_impl._M_finish = __new_start + __size + __n;
  415f7e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  415f82:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
	      this->_M_impl._M_end_of_storage = __new_start + __len;
  415f86:	4442      	add	r2, r8
	      this->_M_impl._M_finish = __new_start + __size + __n;
  415f88:	e9c6 8300 	strd	r8, r3, [r6]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
  415f8c:	60b2      	str	r2, [r6, #8]
	    }
	}
    }
  415f8e:	b003      	add	sp, #12
  415f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  415f94:	2300      	movs	r3, #0
      if (__n <= 0)
  415f96:	1e4c      	subs	r4, r1, #1
  415f98:	e9c5 3300 	strd	r3, r3, [r5]
  415f9c:	e9c5 3302 	strd	r3, r3, [r5, #8]
  415fa0:	e9c5 3304 	strd	r3, r3, [r5, #16]
	      ++__first;
  415fa4:	f105 0918 	add.w	r9, r5, #24
  415fa8:	d030      	beq.n	41600c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x154>
      std::__fill_a(__first, __first + __n, __value);
  415faa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  415fae:	ea4f 0ec4 	mov.w	lr, r4, lsl #3
  415fb2:	f1ae 0e18 	sub.w	lr, lr, #24
  415fb6:	f1a3 3355 	sub.w	r3, r3, #1431655765	@ 0x55555555
  415fba:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  415fbe:	f103 43c0 	add.w	r3, r3, #1610612736	@ 0x60000000
  415fc2:	fb03 fe0e 	mul.w	lr, r3, lr
  415fc6:	f02e 4e60 	bic.w	lr, lr, #3758096384	@ 0xe0000000
  415fca:	f10e 0e01 	add.w	lr, lr, #1
  415fce:	46cc      	mov	ip, r9
  415fd0:	f04e e001 	dls	lr, lr
  415fd4:	eb09 08c4 	add.w	r8, r9, r4, lsl #3
	*__first = __value;
  415fd8:	4664      	mov	r4, ip
  415fda:	462f      	mov	r7, r5
  415fdc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  415fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      for (; __first != __last; ++__first)
  415fe0:	f10c 0c18 	add.w	ip, ip, #24
	*__first = __value;
  415fe4:	e897 0003 	ldmia.w	r7, {r0, r1}
  415fe8:	e884 0003 	stmia.w	r4, {r0, r1}
      for (; __first != __last; ++__first)
  415fec:	f00f c00d 	le	lr, 415fd8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x120>
  415ff0:	eba8 0305 	sub.w	r3, r8, r5
  415ff4:	4a22      	ldr	r2, [pc, #136]	@ (416080 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x1c8>)
  415ff6:	3b30      	subs	r3, #48	@ 0x30
  415ff8:	08db      	lsrs	r3, r3, #3
  415ffa:	fb02 f303 	mul.w	r3, r2, r3
  415ffe:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
  416002:	3301      	adds	r3, #1
  416004:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  416008:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
	      this->_M_impl._M_finish =
  41600c:	f8c6 9004 	str.w	r9, [r6, #4]
    }
  416010:	b003      	add	sp, #12
  416012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  416016:	4770      	bx	lr
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  416018:	4549      	cmp	r1, r9
  41601a:	460b      	mov	r3, r1
  41601c:	bf28      	it	cs
  41601e:	464b      	movcs	r3, r9
  416020:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  416024:	00db      	lsls	r3, r3, #3
  416026:	4618      	mov	r0, r3
  416028:	9300      	str	r3, [sp, #0]
  41602a:	f012 fa69 	bl	428500 <_Znwj>
  41602e:	2300      	movs	r3, #0
      if (__n <= 0)
  416030:	9a01      	ldr	r2, [sp, #4]
		      std::__uninitialized_default_n_a(__new_start + __size,
  416032:	eb00 0b05 	add.w	fp, r0, r5
  416036:	5143      	str	r3, [r0, r5]
  416038:	4680      	mov	r8, r0
  41603a:	e9cb 3301 	strd	r3, r3, [fp, #4]
  41603e:	e9cb 3303 	strd	r3, r3, [fp, #12]
  416042:	f8cb 3014 	str.w	r3, [fp, #20]
  416046:	2a00      	cmp	r2, #0
  416048:	d093      	beq.n	415f72 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xba>
  41604a:	f10b 0718 	add.w	r7, fp, #24
  41604e:	e773      	b.n	415f38 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x80>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
  416050:	4651      	mov	r1, sl
  416052:	462a      	mov	r2, r5
  416054:	4640      	mov	r0, r8
  416056:	f00a fda5 	bl	420ba4 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
  41605a:	68b1      	ldr	r1, [r6, #8]
  41605c:	eba1 010a 	sub.w	r1, r1, sl
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  416060:	4650      	mov	r0, sl
  416062:	f012 fa53 	bl	42850c <_ZdlPvj>
  416066:	e789      	b.n	415f7c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xc4>
  416068:	68b1      	ldr	r1, [r6, #8]
  41606a:	eba1 010a 	sub.w	r1, r1, sl
  41606e:	e7f7      	b.n	416060 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x1a8>
	  __throw_length_error(__N(__s));
  416070:	4804      	ldr	r0, [pc, #16]	@ (416084 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x1cc>)
  416072:	f014 fef3 	bl	42ae5c <_ZSt20__throw_length_errorPKc>
  416076:	bf00      	nop
  416078:	aaaaaaab 	.word	0xaaaaaaab
  41607c:	05555555 	.word	0x05555555
  416080:	0aaaaaab 	.word	0x0aaaaaab
  416084:	00434764 	.word	0x00434764

00416088 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>:
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
  416088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41608c:	ed2d 8b06 	vpush	{d8-d10}
  416090:	ed2d cb04 	vpush	{d12-d13}
	: _M_start(), _M_finish(), _M_end_of_storage()
  416094:	2400      	movs	r4, #0
  416096:	b099      	sub	sp, #100	@ 0x64
  416098:	2600      	movs	r6, #0
  41609a:	2700      	movs	r7, #0
  41609c:	9410      	str	r4, [sp, #64]	@ 0x40
  41609e:	4681      	mov	r9, r0
  4160a0:	460c      	mov	r4, r1
  4160a2:	4615      	mov	r5, r2
  4160a4:	4698      	mov	r8, r3
    static std::vector<ei_impulse_result_bounding_box_t> results;
  4160a6:	f8df b298 	ldr.w	fp, [pc, #664]	@ 416340 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x2b8>
  4160aa:	e9cd 670e 	strd	r6, r7, [sp, #56]	@ 0x38
  4160ae:	e8db 3faf 	lda	r3, [fp]
  4160b2:	f013 0a01 	ands.w	sl, r3, #1
  4160b6:	f000 8111 	beq.w	4162dc <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x254>
  4160ba:	4b9d      	ldr	r3, [pc, #628]	@ (416330 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x2a8>)
  4160bc:	4619      	mov	r1, r3
  4160be:	9307      	str	r3, [sp, #28]
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
  4160c0:	e9d1 3200 	ldrd	r3, r2, [r1]
  4160c4:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
  4160c6:	bf18      	it	ne
  4160c8:	604b      	strne	r3, [r1, #4]
	_M_deallocate(_M_impl._M_start,
  4160ca:	990e      	ldr	r1, [sp, #56]	@ 0x38
      : _M_current(__i) { }
  4160cc:	e9d4 3200 	ldrd	r3, r2, [r4]
  4160d0:	9104      	str	r1, [sp, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  4160d2:	9910      	ldr	r1, [sp, #64]	@ 0x40
    int added_boxes_count = 0;
    results.clear();
    for (auto sc : *cubes) {
  4160d4:	4293      	cmp	r3, r2
  4160d6:	9206      	str	r2, [sp, #24]
  4160d8:	9108      	str	r1, [sp, #32]
  4160da:	f000 811a 	beq.w	416312 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x28a>
  4160de:	9303      	str	r3, [sp, #12]
    int added_boxes_count = 0;
  4160e0:	2300      	movs	r3, #0

        bbs.push_back(sc);

        ei_impulse_result_bounding_box_t tmp = {
            .label = sc->label,
            .x = (uint32_t)(sc->x * out_width_factor),
  4160e2:	eeac 5b10 	vdup.32	q6, r5
            .y = (uint32_t)(sc->y * out_width_factor),
            .width = (uint32_t)(sc->width * out_width_factor),
            .height = (uint32_t)(sc->height * out_width_factor),
            .value = sc->confidence
        };
  4160e6:	e9cd 9409 	strd	r9, r4, [sp, #36]	@ 0x24
    int added_boxes_count = 0;
  4160ea:	9305      	str	r3, [sp, #20]
        };
  4160ec:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
  4160f0:	e037      	b.n	416162 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xda>
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
  4160f2:	6823      	ldr	r3, [r4, #0]
  4160f4:	68a1      	ldr	r1, [r4, #8]
  4160f6:	185a      	adds	r2, r3, r1
  4160f8:	4591      	cmp	r9, r2
  4160fa:	9201      	str	r2, [sp, #4]
  4160fc:	d853      	bhi.n	4161a6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x11e>
  4160fe:	6860      	ldr	r0, [r4, #4]
  416100:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  416104:	eb00 0c0e 	add.w	ip, r0, lr
  416108:	45e2      	cmp	sl, ip
  41610a:	d84c      	bhi.n	4161a6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x11e>
  41610c:	455b      	cmp	r3, fp
  41610e:	d84a      	bhi.n	4161a6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x11e>
  416110:	9a02      	ldr	r2, [sp, #8]
  416112:	4290      	cmp	r0, r2
  416114:	d847      	bhi.n	4161a6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x11e>
    if (x < c->x) {
  416116:	4599      	cmp	r9, r3
  416118:	9a01      	ldr	r2, [sp, #4]
  41611a:	d204      	bcs.n	416126 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x9e>
        c->x = x;
  41611c:	464b      	mov	r3, r9
  41611e:	f8c4 9000 	str.w	r9, [r4]
    if (x + width > c->x + c->width) {
  416122:	eb09 0201 	add.w	r2, r9, r1
    if (y < c->y) {
  416126:	4582      	cmp	sl, r0
  416128:	d204      	bcs.n	416134 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xac>
        c->y = y;
  41612a:	4650      	mov	r0, sl
  41612c:	f8c4 a004 	str.w	sl, [r4, #4]
    if (y + height > c->y + c->height) {
  416130:	eb0a 0c0e 	add.w	ip, sl, lr
    if (confidence > c->confidence) {
  416134:	edd4 7a04 	vldr	s15, [r4, #16]
  416138:	eeb4 aae7 	vcmpe.f32	s20, s15
    if (x + width > c->x + c->width) {
  41613c:	4593      	cmp	fp, r2
        c->width += (x + width) - (c->x + c->width);
  41613e:	bf84      	itt	hi
  416140:	ebab 0303 	subhi.w	r3, fp, r3
  416144:	60a3      	strhi	r3, [r4, #8]
    if (y + height > c->y + c->height) {
  416146:	9b02      	ldr	r3, [sp, #8]
  416148:	4563      	cmp	r3, ip
        c->height += (y + height) - (c->y + c->height);
  41614a:	bf84      	itt	hi
  41614c:	1a18      	subhi	r0, r3, r0
  41614e:	60e0      	strhi	r0, [r4, #12]
    if (confidence > c->confidence) {
  416150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  416154:	dd01      	ble.n	41615a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xd2>
        c->confidence = confidence;
  416156:	ed84 aa04 	vstr	s20, [r4, #16]
    for (auto sc : *cubes) {
  41615a:	9b06      	ldr	r3, [sp, #24]
  41615c:	9a03      	ldr	r2, [sp, #12]
  41615e:	4293      	cmp	r3, r2
  416160:	d047      	beq.n	4161f2 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x16a>
  416162:	9b03      	ldr	r3, [sp, #12]
  416164:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
  416166:	f853 8b04 	ldr.w	r8, [r3], #4
        for (auto c : bbs) {
  41616a:	9d04      	ldr	r5, [sp, #16]
        int x = sc->x;
  41616c:	ed98 9f00 	ldc	15, cr9, [r8]
        int y = sc->y;
  416170:	e9d8 9a00 	ldrd	r9, sl, [r8]
        for (auto c : bbs) {
  416174:	42ae      	cmp	r6, r5
    for (auto sc : *cubes) {
  416176:	9303      	str	r3, [sp, #12]
        float vf = sc->confidence;
  416178:	ed98 aa04 	vldr	s20, [r8, #16]
        int height = sc->height;
  41617c:	ee39 3b10 	vmov.32	r3, d9[1]
        int width = sc->width;
  416180:	f8d8 2008 	ldr.w	r2, [r8, #8]
        const char *label = sc->label;
  416184:	f8d8 7014 	ldr.w	r7, [r8, #20]
    for (auto sc : *cubes) {
  416188:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
        for (auto c : bbs) {
  41618c:	d00d      	beq.n	4161aa <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x122>
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
  41618e:	4453      	add	r3, sl
  416190:	eb09 0b02 	add.w	fp, r9, r2
  416194:	9302      	str	r3, [sp, #8]
        for (auto c : bbs) {
  416196:	f855 4b04 	ldr.w	r4, [r5], #4
            if (strcmp(c->label, label) != 0) continue;
  41619a:	4639      	mov	r1, r7
  41619c:	6960      	ldr	r0, [r4, #20]
  41619e:	f7fa f92f 	bl	410400 <strcmp>
  4161a2:	2800      	cmp	r0, #0
  4161a4:	d0a5      	beq.n	4160f2 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x6a>
        for (auto c : bbs) {
  4161a6:	42ae      	cmp	r6, r5
  4161a8:	d1f5      	bne.n	416196 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x10e>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4161aa:	9b08      	ldr	r3, [sp, #32]
  4161ac:	429e      	cmp	r6, r3
  4161ae:	d054      	beq.n	41625a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1d2>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  4161b0:	f846 8b04 	str.w	r8, [r6], #4
	    ++this->_M_impl._M_finish;
  4161b4:	960f      	str	r6, [sp, #60]	@ 0x3c
            .x = (uint32_t)(sc->x * out_width_factor),
  4161b6:	ef2c 8958 	vmul.i32	q4, q6, q4
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  4161ba:	9b07      	ldr	r3, [sp, #28]
        };
  4161bc:	9712      	str	r7, [sp, #72]	@ 0x48
  4161be:	685c      	ldr	r4, [r3, #4]
  4161c0:	461f      	mov	r7, r3
  4161c2:	689b      	ldr	r3, [r3, #8]
  4161c4:	ed8d aa17 	vstr	s20, [sp, #92]	@ 0x5c
  4161c8:	429c      	cmp	r4, r3
  4161ca:	ed8d 9f13 	stc	15, cr9, [sp, #76]	@ 0x4c
  4161ce:	d03e      	beq.n	41624e <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1c6>
  4161d0:	ad12      	add	r5, sp, #72	@ 0x48
	    ++this->_M_impl._M_finish;
  4161d2:	f104 0618 	add.w	r6, r4, #24
  4161d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4161d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4161da:	e895 0003 	ldmia.w	r5, {r0, r1}
  4161de:	e884 0003 	stmia.w	r4, {r0, r1}
  4161e2:	607e      	str	r6, [r7, #4]

        results.push_back(tmp);
        added_boxes_count++;
  4161e4:	9b05      	ldr	r3, [sp, #20]
    for (auto sc : *cubes) {
  4161e6:	9a03      	ldr	r2, [sp, #12]
        added_boxes_count++;
  4161e8:	3301      	adds	r3, #1
  4161ea:	9305      	str	r3, [sp, #20]
    for (auto sc : *cubes) {
  4161ec:	9b06      	ldr	r3, [sp, #24]
  4161ee:	4293      	cmp	r3, r2
  4161f0:	d1b7      	bne.n	416162 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xda>
    }

    // if we didn't detect min required objects, fill the rest with fixed value
    if (added_boxes_count < object_detection_count) {
  4161f2:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
  4161f6:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
  4161fa:	9d05      	ldr	r5, [sp, #20]
  4161fc:	45a8      	cmp	r8, r5
  4161fe:	d843      	bhi.n	416288 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x200>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  416200:	e9d4 4500 	ldrd	r4, r5, [r4]
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
            results[ix].value = 0.0f;
        }
    }

    for (auto c : *cubes) {
  416204:	42a5      	cmp	r5, r4
  416206:	d007      	beq.n	416218 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x190>
  416208:	f854 0b04 	ldr.w	r0, [r4], #4
        delete c;
  41620c:	b110      	cbz	r0, 416214 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x18c>
  41620e:	2118      	movs	r1, #24
  416210:	f012 f97c 	bl	42850c <_ZdlPvj>
    for (auto c : *cubes) {
  416214:	42a5      	cmp	r5, r4
  416216:	d1f7      	bne.n	416208 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x180>
      { return _M_data_ptr(this->_M_impl._M_start); }
  416218:	9b07      	ldr	r3, [sp, #28]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  41621a:	e9d3 2300 	ldrd	r2, r3, [r3]
  41621e:	1a9b      	subs	r3, r3, r2
    }

    result->bounding_boxes = results.data();
  416220:	f8c9 2000 	str.w	r2, [r9]
  416224:	4a43      	ldr	r2, [pc, #268]	@ (416334 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x2ac>)
  416226:	10db      	asrs	r3, r3, #3
  416228:	fb02 f303 	mul.w	r3, r2, r3
    result->bounding_boxes_count = results.size();
  41622c:	f8c9 3004 	str.w	r3, [r9, #4]
	if (__p)
  416230:	9b04      	ldr	r3, [sp, #16]
  416232:	b313      	cbz	r3, 41627a <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1f2>
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
  416234:	461a      	mov	r2, r3
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  416236:	4618      	mov	r0, r3
  416238:	9b08      	ldr	r3, [sp, #32]
  41623a:	1a99      	subs	r1, r3, r2
}
  41623c:	b019      	add	sp, #100	@ 0x64
  41623e:	ecbd cb04 	vpop	{d12-d13}
  416242:	ecbd 8b06 	vpop	{d8-d10}
  416246:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41624a:	f012 b95f 	b.w	42850c <_ZdlPvj>
	  _M_realloc_insert(end(), __x);
  41624e:	4621      	mov	r1, r4
  416250:	4837      	ldr	r0, [pc, #220]	@ (416330 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x2a8>)
  416252:	aa12      	add	r2, sp, #72	@ 0x48
  416254:	f7ff fdb0 	bl	415db8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
  416258:	e7c4      	b.n	4161e4 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x15c>
  41625a:	4619      	mov	r1, r3
  41625c:	aa0d      	add	r2, sp, #52	@ 0x34
  41625e:	a80e      	add	r0, sp, #56	@ 0x38
  416260:	f7ff fd36 	bl	415cd0 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	_M_deallocate(_M_impl._M_start,
  416264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            .x = (uint32_t)(sc->x * out_width_factor),
  416266:	ed98 9f00 	ldc	15, cr9, [r8]
  41626a:	9304      	str	r3, [sp, #16]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  41626c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
            .value = sc->confidence
  41626e:	ed98 aa04 	vldr	s20, [r8, #16]
            .label = sc->label,
  416272:	f8d8 7014 	ldr.w	r7, [r8, #20]
  416276:	9308      	str	r3, [sp, #32]
  416278:	e79d      	b.n	4161b6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x12e>
}
  41627a:	b019      	add	sp, #100	@ 0x64
  41627c:	ecbd cb04 	vpop	{d12-d13}
  416280:	ecbd 8b06 	vpop	{d8-d10}
  416284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  416288:	9a07      	ldr	r2, [sp, #28]
  41628a:	e9d2 0300 	ldrd	r0, r3, [r2]
  41628e:	4a29      	ldr	r2, [pc, #164]	@ (416334 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x2ac>)
  416290:	1a19      	subs	r1, r3, r0
  416292:	10c9      	asrs	r1, r1, #3
  416294:	fb02 f101 	mul.w	r1, r2, r1
	if (__new_size > size())
  416298:	4588      	cmp	r8, r1
  41629a:	d832      	bhi.n	416302 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x27a>
	else if (__new_size < size())
  41629c:	d326      	bcc.n	4162ec <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x264>
  41629e:	ea4f 0248 	mov.w	r2, r8, lsl #1
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
  4162a2:	eb02 0e08 	add.w	lr, r2, r8
  4162a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4162aa:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
  4162ae:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
            results[ix].value = 0.0f;
  4162b2:	ebae 0e03 	sub.w	lr, lr, r3
  4162b6:	4a20      	ldr	r2, [pc, #128]	@ (416338 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x2b0>)
  4162b8:	f1ae 0e18 	sub.w	lr, lr, #24
  4162bc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  4162c0:	fb02 fe0e 	mul.w	lr, r2, lr
  4162c4:	f02e 4e60 	bic.w	lr, lr, #3758096384	@ 0xe0000000
  4162c8:	f10e 0e01 	add.w	lr, lr, #1
  4162cc:	f04e e001 	dls	lr, lr
  4162d0:	2200      	movs	r2, #0
  4162d2:	615a      	str	r2, [r3, #20]
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
  4162d4:	3318      	adds	r3, #24
  4162d6:	f00f c005 	le	lr, 4162d2 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x24a>
  4162da:	e791      	b.n	416200 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x178>
    static std::vector<ei_impulse_result_bounding_box_t> results;
  4162dc:	4658      	mov	r0, fp
  4162de:	f014 fc69 	bl	42abb4 <__cxa_guard_acquire>
	: _M_start(), _M_finish(), _M_end_of_storage()
  4162e2:	4b13      	ldr	r3, [pc, #76]	@ (416330 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x2a8>)
  4162e4:	9307      	str	r3, [sp, #28]
  4162e6:	b9b0      	cbnz	r0, 416316 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x28e>
  4162e8:	4619      	mov	r1, r3
  4162ea:	e6e9      	b.n	4160c0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x38>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
  4162ec:	eb08 0148 	add.w	r1, r8, r8, lsl #1
  4162f0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (size_type __n = this->_M_impl._M_finish - __pos)
  4162f4:	428b      	cmp	r3, r1
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
  4162f6:	ea4f 0248 	mov.w	r2, r8, lsl #1
	if (size_type __n = this->_M_impl._M_finish - __pos)
  4162fa:	d0d2      	beq.n	4162a2 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x21a>
	    this->_M_impl._M_finish = __pos;
  4162fc:	9b07      	ldr	r3, [sp, #28]
  4162fe:	6059      	str	r1, [r3, #4]
  416300:	e7cf      	b.n	4162a2 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x21a>
	  _M_default_append(__new_size - size());
  416302:	480b      	ldr	r0, [pc, #44]	@ (416330 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x2a8>)
  416304:	eba8 0101 	sub.w	r1, r8, r1
  416308:	f7ff fdd6 	bl	415eb8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj>
	return *(this->_M_impl._M_start + __n);
  41630c:	9b07      	ldr	r3, [sp, #28]
  41630e:	6818      	ldr	r0, [r3, #0]
  416310:	e7c5      	b.n	41629e <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x216>
    for (auto sc : *cubes) {
  416312:	2500      	movs	r5, #0
  416314:	e772      	b.n	4161fc <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x174>
    static std::vector<ei_impulse_result_bounding_box_t> results;
  416316:	4809      	ldr	r0, [pc, #36]	@ (41633c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x2b4>)
	: _M_start(), _M_finish(), _M_end_of_storage()
  416318:	e9c3 6700 	strd	r6, r7, [r3]
  41631c:	f8c3 a008 	str.w	sl, [r3, #8]
  416320:	f008 ff60 	bl	41f1e4 <atexit>
  416324:	4658      	mov	r0, fp
  416326:	f014 fc61 	bl	42abec <__cxa_guard_release>
  41632a:	9907      	ldr	r1, [sp, #28]
  41632c:	e6c8      	b.n	4160c0 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x38>
  41632e:	bf00      	nop
  416330:	20013e60 	.word	0x20013e60
  416334:	aaaaaaab 	.word	0xaaaaaaab
  416338:	0aaaaaab 	.word	0x0aaaaaab
  41633c:	004154cd 	.word	0x004154cd
  416340:	20013e58 	.word	0x20013e58

00416344 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
  416344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416348:	ed2d 8b04 	vpush	{d8-d9}
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
  41634c:	788b      	ldrb	r3, [r1, #2]
) {
  41634e:	b095      	sub	sp, #84	@ 0x54
    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
  416350:	2b03      	cmp	r3, #3
) {
  416352:	e9cd 1003 	strd	r1, r0, [sp, #12]
  416356:	f8dd 808c 	ldr.w	r8, [sp, #140]	@ 0x8c
  41635a:	f89d 4090 	ldrb.w	r4, [sp, #144]	@ 0x90
    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
  41635e:	d00a      	beq.n	416376 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x32>
                    block_config->object_detection_last_layer);
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
  416360:	2b05      	cmp	r3, #5
  416362:	d002      	beq.n	41636a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
  416364:	f898 3040 	ldrb.w	r3, [r8, #64]	@ 0x40
  416368:	b1bb      	cbz	r3, 41639a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x56>
                    fill_res = fill_result_struct_f32_fomo(
  41636a:	2000      	movs	r0, #0
            }
        }
    }

    return fill_res;
}
  41636c:	b015      	add	sp, #84	@ 0x54
  41636e:	ecbd 8b04 	vpop	{d8-d9}
  416372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (block_config->object_detection_last_layer) {
  416376:	f991 1009 	ldrsb.w	r1, [r1, #9]
  41637a:	1e4b      	subs	r3, r1, #1
  41637c:	2b09      	cmp	r3, #9
  41637e:	f200 82b4 	bhi.w	4168ea <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x5a6>
  416382:	e8df f013 	tbh	[pc, r3, lsl #1]
  416386:	00a6      	.short	0x00a6
  416388:	007200aa 	.word	0x007200aa
  41638c:	00720096 	.word	0x00720096
  416390:	005f009e 	.word	0x005f009e
  416394:	0165005f 	.word	0x0165005f
  416398:	0084      	.short	0x0084
            if (int8_output) {
  41639a:	7f13      	ldrb	r3, [r2, #28]
                    fill_res = fill_result_struct_i8_fomo(
  41639c:	6915      	ldr	r5, [r2, #16]
            if (int8_output) {
  41639e:	2b09      	cmp	r3, #9
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
  4163a0:	f8b0 6072 	ldrh.w	r6, [r0, #114]	@ 0x72
  4163a4:	d00d      	beq.n	4163c2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x7e>
#ifdef EI_DSP_RESULT_OVERRIDE
    uint32_t stop_count = EI_DSP_RESULT_OVERRIDE;
#else
    uint32_t stop_count = impulse->label_count;
#endif
    for (uint32_t ix = 0; ix < stop_count; ix++) {
  4163a6:	2e00      	cmp	r6, #0
  4163a8:	d0df      	beq.n	41636a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26>

        float value = data[ix];
  4163aa:	ed95 8a00 	vldr	s16, [r5]

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
  4163ae:	6f43      	ldr	r3, [r0, #116]	@ 0x74
        if (debug) {
  4163b0:	2c00      	cmp	r4, #0
  4163b2:	f040 815f 	bne.w	416674 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x330>
            ei_printf_float(value);
            ei_printf("\n");
        }
// For testing purposes, we will have more values than labels
#ifndef EI_DSP_RESULT_OVERRIDE
        result->classification[ix].label = impulse->categories[ix];
  4163b6:	681b      	ldr	r3, [r3, #0]
#endif
        result->classification[ix].value = value;
  4163b8:	ed88 8a03 	vstr	s16, [r8, #12]
        result->classification[ix].label = impulse->categories[ix];
  4163bc:	f8c8 3008 	str.w	r3, [r8, #8]
    for (uint32_t ix = 0; ix < stop_count; ix++) {
  4163c0:	e7d3      	b.n	41636a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
  4163c2:	2e00      	cmp	r6, #0
  4163c4:	d0d1      	beq.n	41636a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
  4163c6:	f995 3000 	ldrsb.w	r3, [r5]
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
  4163ca:	edd2 7a03 	vldr	s15, [r2, #12]
  4163ce:	ee08 3a10 	vmov	s16, r3
  4163d2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  4163d6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  4163da:	ed92 9a02 	vldr	s18, [r2, #8]
  4163de:	ee38 8a68 	vsub.f32	s16, s16, s17
            ei_printf("%s:\t", impulse->categories[ix]);
  4163e2:	9b04      	ldr	r3, [sp, #16]
        float value = static_cast<float>(data[ix] - zero_point) * scale;
  4163e4:	ee28 8a09 	vmul.f32	s16, s16, s18
            ei_printf("%s:\t", impulse->categories[ix]);
  4163e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        if (debug) {
  4163ea:	2c00      	cmp	r4, #0
  4163ec:	d0e3      	beq.n	4163b6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x72>
            ei_printf("%s:\t", impulse->categories[ix]);
  4163ee:	6819      	ldr	r1, [r3, #0]
  4163f0:	48ad      	ldr	r0, [pc, #692]	@ (4166a8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
  4163f2:	f008 f917 	bl	41e624 <_Z9ei_printfPKcz>
            ei_printf_float(value);
  4163f6:	eeb0 0a48 	vmov.f32	s0, s16
  4163fa:	f008 f92f 	bl	41e65c <_Z15ei_printf_floatf>
            ei_printf("\n");
  4163fe:	48ab      	ldr	r0, [pc, #684]	@ (4166ac <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
  416400:	f008 f910 	bl	41e624 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
  416404:	9a04      	ldr	r2, [sp, #16]
  416406:	6f53      	ldr	r3, [r2, #116]	@ 0x74
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
  416408:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        result->classification[ix].label = impulse->categories[ix];
  41640c:	6819      	ldr	r1, [r3, #0]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
  41640e:	2a01      	cmp	r2, #1
        result->classification[ix].value = value;
  416410:	ed88 8a03 	vstr	s16, [r8, #12]
        result->classification[ix].label = impulse->categories[ix];
  416414:	f8c8 1008 	str.w	r1, [r8, #8]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
  416418:	d9a7      	bls.n	41636a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
  41641a:	f995 2001 	ldrsb.w	r2, [r5, #1]
            ei_printf("%s:\t", impulse->categories[ix]);
  41641e:	6859      	ldr	r1, [r3, #4]
        float value = static_cast<float>(data[ix] - zero_point) * scale;
  416420:	ee08 2a10 	vmov	s16, r2
  416424:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  416428:	ee38 8a68 	vsub.f32	s16, s16, s17
  41642c:	ee28 8a09 	vmul.f32	s16, s16, s18
            ei_printf("%s:\t", impulse->categories[ix]);
  416430:	489d      	ldr	r0, [pc, #628]	@ (4166a8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
            ei_printf("%s:\t", impulse->categories[ix]);
  416432:	f008 f8f7 	bl	41e624 <_Z9ei_printfPKcz>
            ei_printf_float(value);
  416436:	eeb0 0a48 	vmov.f32	s0, s16
  41643a:	f008 f90f 	bl	41e65c <_Z15ei_printf_floatf>
            ei_printf("\n");
  41643e:	489b      	ldr	r0, [pc, #620]	@ (4166ac <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
  416440:	f008 f8f0 	bl	41e624 <_Z9ei_printfPKcz>
                if (output->type == kTfLiteInt8) {
  416444:	7f11      	ldrb	r1, [r2, #28]
  416446:	1e4b      	subs	r3, r1, #1
  416448:	b2db      	uxtb	r3, r3
  41644a:	2b08      	cmp	r3, #8
  41644c:	d807      	bhi.n	41645e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x11a>
  41644e:	f240 1205 	movw	r2, #261	@ 0x105
  416452:	fa22 f303 	lsr.w	r3, r2, r3
  416456:	07dc      	lsls	r4, r3, #31
                    fill_res = fill_result_struct_quantized_yolov5(
  416458:	f06f 0014 	mvn.w	r0, #20
  41645c:	d486      	bmi.n	41636c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x28>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
  41645e:	4894      	ldr	r0, [pc, #592]	@ (4166b0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>)
  416460:	f008 f8e0 	bl	41e624 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
  416464:	f06f 0009 	mvn.w	r0, #9
  416468:	e780      	b.n	41636c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x28>
                if (output->type == kTfLiteInt8) {
  41646a:	7f11      	ldrb	r1, [r2, #28]
  41646c:	1e4b      	subs	r3, r1, #1
  41646e:	b2db      	uxtb	r3, r3
  416470:	2b08      	cmp	r3, #8
  416472:	d808      	bhi.n	416486 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x142>
  416474:	f240 1205 	movw	r2, #261	@ 0x105
  416478:	fa22 f303 	lsr.w	r3, r2, r3
  41647c:	07dd      	lsls	r5, r3, #31
                    fill_res = fill_result_struct_quantized_yolov5(
  41647e:	f06f 0014 	mvn.w	r0, #20
  416482:	f53f af73 	bmi.w	41636c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x28>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
  416486:	488b      	ldr	r0, [pc, #556]	@ (4166b4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x370>)
  416488:	f008 f8cc 	bl	41e624 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
  41648c:	e7ea      	b.n	416464 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x120>
                if (output->type == kTfLiteInt8) {
  41648e:	7f11      	ldrb	r1, [r2, #28]
  416490:	1e4b      	subs	r3, r1, #1
  416492:	b2db      	uxtb	r3, r3
  416494:	2b08      	cmp	r3, #8
  416496:	d808      	bhi.n	4164aa <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x166>
  416498:	f240 1205 	movw	r2, #261	@ 0x105
  41649c:	fa22 f303 	lsr.w	r3, r2, r3
  4164a0:	07db      	lsls	r3, r3, #31
                    fill_res = fill_result_struct_quantized_yolov5(
  4164a2:	f06f 0014 	mvn.w	r0, #20
  4164a6:	f53f af61 	bmi.w	41636c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x28>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
  4164aa:	4883      	ldr	r0, [pc, #524]	@ (4166b8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x374>)
  4164ac:	f008 f8ba 	bl	41e624 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
  4164b0:	e7d8      	b.n	416464 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x120>
                if (block_config->quantized == 1) {
  4164b2:	9b03      	ldr	r3, [sp, #12]
  4164b4:	7d1b      	ldrb	r3, [r3, #20]
  4164b6:	2b00      	cmp	r3, #0
  4164b8:	f040 820a 	bne.w	4168d0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x58c>
                    fill_res = fill_result_struct_quantized_yolov5(
  4164bc:	f06f 0014 	mvn.w	r0, #20
  4164c0:	e754      	b.n	41636c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x28>
                if (block_config->quantized == 1) {
  4164c2:	9b03      	ldr	r3, [sp, #12]
  4164c4:	7d1b      	ldrb	r3, [r3, #20]
  4164c6:	2b00      	cmp	r3, #0
  4164c8:	d0f8      	beq.n	4164bc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x178>
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
  4164ca:	487c      	ldr	r0, [pc, #496]	@ (4166bc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x378>)
  4164cc:	f008 f8aa 	bl	41e624 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
  4164d0:	e7c8      	b.n	416464 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x120>
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
  4164d2:	487b      	ldr	r0, [pc, #492]	@ (4166c0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x37c>)
  4164d4:	f008 f8a6 	bl	41e624 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
  4164d8:	e7c4      	b.n	416464 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x120>
                        impulse->fomo_output_size,
  4164da:	9b04      	ldr	r3, [sp, #16]
                    fill_res = fill_result_struct_i8_fomo(
  4164dc:	6915      	ldr	r5, [r2, #16]
                        impulse->fomo_output_size,
  4164de:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
    int out_width_factor = impulse->input_width / out_width;
  4164e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  4164e2:	fbb3 f6f4 	udiv	r6, r3, r4
                if (int8_output) {
  4164e6:	7f13      	ldrb	r3, [r2, #28]
  4164e8:	2b09      	cmp	r3, #9
  4164ea:	f000 811a 	beq.w	416722 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3de>
  4164ee:	2700      	movs	r7, #0
  4164f0:	2200      	movs	r2, #0
  4164f2:	2300      	movs	r3, #0
  4164f4:	9712      	str	r7, [sp, #72]	@ 0x48
  4164f6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
    for (size_t y = 0; y < out_width; y++) {
  4164fa:	2c00      	cmp	r4, #0
  4164fc:	f000 81ec 	beq.w	4168d8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x594>
  416500:	46ba      	mov	sl, r7
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
  416502:	9b04      	ldr	r3, [sp, #16]
  416504:	e9cd 7706 	strd	r7, r7, [sp, #24]
  416508:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
  41650c:	950b      	str	r5, [sp, #44]	@ 0x2c
  41650e:	9308      	str	r3, [sp, #32]
  416510:	ab10      	add	r3, sp, #64	@ 0x40
  416512:	930c      	str	r3, [sp, #48]	@ 0x30
  416514:	960d      	str	r6, [sp, #52]	@ 0x34
  416516:	f8cd 808c 	str.w	r8, [sp, #140]	@ 0x8c
    for (size_t y = 0; y < out_width; y++) {
  41651a:	f04f 0901 	mov.w	r9, #1
        for (size_t x = 0; x < out_height; x++) {
  41651e:	f04f 0800 	mov.w	r8, #0
  416522:	9b08      	ldr	r3, [sp, #32]
  416524:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
  416528:	444b      	add	r3, r9
  41652a:	9305      	str	r3, [sp, #20]
  41652c:	eb0a 0309 	add.w	r3, sl, r9
  416530:	9302      	str	r3, [sp, #8]
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
  416532:	9a05      	ldr	r2, [sp, #20]
  416534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
  416536:	2a01      	cmp	r2, #1
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
  416538:	4443      	add	r3, r8
  41653a:	fb02 f303 	mul.w	r3, r2, r3
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
  41653e:	f000 80cd 	beq.w	4166dc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x398>
  416542:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  416544:	3301      	adds	r3, #1
  416546:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  41654a:	f04f 0b01 	mov.w	fp, #1
  41654e:	9301      	str	r3, [sp, #4]
  416550:	e038      	b.n	4165c4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x280>
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
  416552:	6823      	ldr	r3, [r4, #0]
  416554:	68a0      	ldr	r0, [r4, #8]
  416556:	181a      	adds	r2, r3, r0
  416558:	4542      	cmp	r2, r8
  41655a:	9200      	str	r2, [sp, #0]
  41655c:	d351      	bcc.n	416602 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2be>
  41655e:	6861      	ldr	r1, [r4, #4]
  416560:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  416564:	eb01 0c0e 	add.w	ip, r1, lr
  416568:	45e2      	cmp	sl, ip
  41656a:	d84a      	bhi.n	416602 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2be>
  41656c:	454b      	cmp	r3, r9
  41656e:	d848      	bhi.n	416602 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2be>
  416570:	9a02      	ldr	r2, [sp, #8]
  416572:	4291      	cmp	r1, r2
  416574:	d845      	bhi.n	416602 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2be>
    if (x < c->x) {
  416576:	4543      	cmp	r3, r8
  416578:	9a00      	ldr	r2, [sp, #0]
  41657a:	d904      	bls.n	416586 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x242>
        c->x = x;
  41657c:	4643      	mov	r3, r8
  41657e:	f8c4 8000 	str.w	r8, [r4]
    if (x + width > c->x + c->width) {
  416582:	eb00 0208 	add.w	r2, r0, r8
    if (y < c->y) {
  416586:	458a      	cmp	sl, r1
  416588:	d204      	bcs.n	416594 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x250>
        c->y = y;
  41658a:	4651      	mov	r1, sl
  41658c:	f8c4 a004 	str.w	sl, [r4, #4]
    if (y + height > c->y + c->height) {
  416590:	eb0a 0c0e 	add.w	ip, sl, lr
    if (confidence > c->confidence) {
  416594:	edd4 7a04 	vldr	s15, [r4, #16]
  416598:	eeb4 8ae7 	vcmpe.f32	s16, s15
    if (x + width > c->x + c->width) {
  41659c:	4591      	cmp	r9, r2
        c->width += (x + width) - (c->x + c->width);
  41659e:	bf84      	itt	hi
  4165a0:	eba9 0303 	subhi.w	r3, r9, r3
  4165a4:	60a3      	strhi	r3, [r4, #8]
    if (y + height > c->y + c->height) {
  4165a6:	9b02      	ldr	r3, [sp, #8]
  4165a8:	459c      	cmp	ip, r3
        c->height += (y + height) - (c->y + c->height);
  4165aa:	bf3c      	itt	cc
  4165ac:	1a59      	subcc	r1, r3, r1
  4165ae:	60e1      	strcc	r1, [r4, #12]
    if (confidence > c->confidence) {
  4165b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4165b4:	dd01      	ble.n	4165ba <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x276>
        c->confidence = confidence;
  4165b6:	ed84 8a04 	vstr	s16, [r4, #16]
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
  4165ba:	9b05      	ldr	r3, [sp, #20]
  4165bc:	f10b 0b01 	add.w	fp, fp, #1
  4165c0:	459b      	cmp	fp, r3
  4165c2:	d23d      	bcs.n	416640 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2fc>
                float vf = data[loc+ix];
  4165c4:	9b01      	ldr	r3, [sp, #4]
  4165c6:	ecb3 8a01 	vldmia	r3!, {s16}
  4165ca:	9301      	str	r3, [sp, #4]
    if (vf < detection_threshold) return;
  4165cc:	9b03      	ldr	r3, [sp, #12]
  4165ce:	edd3 7a04 	vldr	s15, [r3, #16]
  4165d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
  4165d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4165da:	d4ee      	bmi.n	4165ba <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x276>
                ei_handle_cube(&cubes, x, y, vf, impulse->categories[ix - 1], block_config->threshold);
  4165dc:	9b04      	ldr	r3, [sp, #16]
      : _M_current(__i) { }
  4165de:	9e11      	ldr	r6, [sp, #68]	@ 0x44
  4165e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
  4165e2:	eb03 038b 	add.w	r3, r3, fp, lsl #2
  4165e6:	f853 7c04 	ldr.w	r7, [r3, #-4]
    for (auto c : *cubes) {
  4165ea:	9b06      	ldr	r3, [sp, #24]
  4165ec:	429e      	cmp	r6, r3
  4165ee:	d00a      	beq.n	416606 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2c2>
  4165f0:	461d      	mov	r5, r3
  4165f2:	f855 4b04 	ldr.w	r4, [r5], #4
        if (strcmp(c->label, label) != 0) continue;
  4165f6:	4639      	mov	r1, r7
  4165f8:	6960      	ldr	r0, [r4, #20]
  4165fa:	f7f9 ff01 	bl	410400 <strcmp>
  4165fe:	2800      	cmp	r0, #0
  416600:	d0a7      	beq.n	416552 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x20e>
    for (auto c : *cubes) {
  416602:	42ae      	cmp	r6, r5
  416604:	d1f5      	bne.n	4165f2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2ae>
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
  416606:	2018      	movs	r0, #24
  416608:	f011 ff7a 	bl	428500 <_Znwj>
        cube->width = 1;
  41660c:	2301      	movs	r3, #1
  41660e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  416612:	9b07      	ldr	r3, [sp, #28]
        cube->confidence = vf;
  416614:	ed80 8a04 	vstr	s16, [r0, #16]
  416618:	429e      	cmp	r6, r3
        cube->y = y;
  41661a:	e9c0 8a00 	strd	r8, sl, [r0]
        cube->label = label;
  41661e:	6147      	str	r7, [r0, #20]
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
  416620:	900f      	str	r0, [sp, #60]	@ 0x3c
  416622:	d051      	beq.n	4166c8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x384>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  416624:	f846 0b04 	str.w	r0, [r6], #4
	    ++this->_M_impl._M_finish;
  416628:	9611      	str	r6, [sp, #68]	@ 0x44
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
  41662a:	9b04      	ldr	r3, [sp, #16]
  41662c:	f10b 0b01 	add.w	fp, fp, #1
  416630:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
  416634:	9308      	str	r3, [sp, #32]
  416636:	3301      	adds	r3, #1
  416638:	9305      	str	r3, [sp, #20]
  41663a:	9b05      	ldr	r3, [sp, #20]
  41663c:	459b      	cmp	fp, r3
  41663e:	d3c1      	bcc.n	4165c4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x280>
        for (size_t x = 0; x < out_height; x++) {
  416640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  416642:	f108 0801 	add.w	r8, r8, #1
  416646:	4598      	cmp	r8, r3
  416648:	d068      	beq.n	41671c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3d8>
  41664a:	f109 0901 	add.w	r9, r9, #1
  41664e:	e770      	b.n	416532 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1ee>
                if (output->type == kTfLiteInt8) {
  416650:	7f11      	ldrb	r1, [r2, #28]
  416652:	1e4b      	subs	r3, r1, #1
  416654:	b2db      	uxtb	r3, r3
  416656:	2b08      	cmp	r3, #8
  416658:	d808      	bhi.n	41666c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x328>
  41665a:	f240 1205 	movw	r2, #261	@ 0x105
  41665e:	fa22 f303 	lsr.w	r3, r2, r3
  416662:	07da      	lsls	r2, r3, #31
                    fill_res = fill_result_struct_quantized_yolov5(
  416664:	f06f 0014 	mvn.w	r0, #20
  416668:	f53f ae80 	bmi.w	41636c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x28>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
  41666c:	4815      	ldr	r0, [pc, #84]	@ (4166c4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x380>)
  41666e:	f007 ffd9 	bl	41e624 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
  416672:	e6f7      	b.n	416464 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x120>
            ei_printf("%s:\t", impulse->categories[ix]);
  416674:	6819      	ldr	r1, [r3, #0]
  416676:	480c      	ldr	r0, [pc, #48]	@ (4166a8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
  416678:	f007 ffd4 	bl	41e624 <_Z9ei_printfPKcz>
            ei_printf_float(value);
  41667c:	eeb0 0a48 	vmov.f32	s0, s16
  416680:	f007 ffec 	bl	41e65c <_Z15ei_printf_floatf>
            ei_printf("\n");
  416684:	4809      	ldr	r0, [pc, #36]	@ (4166ac <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
  416686:	f007 ffcd 	bl	41e624 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
  41668a:	9b04      	ldr	r3, [sp, #16]
    for (uint32_t ix = 0; ix < stop_count; ix++) {
  41668c:	2e01      	cmp	r6, #1
        result->classification[ix].label = impulse->categories[ix];
  41668e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
  416690:	681a      	ldr	r2, [r3, #0]
        result->classification[ix].value = value;
  416692:	ed88 8a03 	vstr	s16, [r8, #12]
        result->classification[ix].label = impulse->categories[ix];
  416696:	f8c8 2008 	str.w	r2, [r8, #8]
    for (uint32_t ix = 0; ix < stop_count; ix++) {
  41669a:	f43f ae66 	beq.w	41636a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26>
        float value = data[ix];
  41669e:	ed95 8a01 	vldr	s16, [r5, #4]
            ei_printf("%s:\t", impulse->categories[ix]);
  4166a2:	6859      	ldr	r1, [r3, #4]
  4166a4:	4800      	ldr	r0, [pc, #0]	@ (4166a8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
  4166a6:	e6c4      	b.n	416432 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xee>
  4166a8:	00434938 	.word	0x00434938
  4166ac:	00434630 	.word	0x00434630
  4166b0:	00434868 	.word	0x00434868
  4166b4:	004347c8 	.word	0x004347c8
  4166b8:	004348d0 	.word	0x004348d0
  4166bc:	00434834 	.word	0x00434834
  4166c0:	00434780 	.word	0x00434780
  4166c4:	0043489c 	.word	0x0043489c
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  4166c8:	4619      	mov	r1, r3
	  _M_realloc_insert(end(), __x);
  4166ca:	980c      	ldr	r0, [sp, #48]	@ 0x30
  4166cc:	aa0f      	add	r2, sp, #60	@ 0x3c
  4166ce:	f7ff faff 	bl	415cd0 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	_M_deallocate(_M_impl._M_start,
  4166d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  4166d4:	9306      	str	r3, [sp, #24]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  4166d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  4166d8:	9307      	str	r3, [sp, #28]
  4166da:	e7a6      	b.n	41662a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2e6>
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
  4166dc:	2300      	movs	r3, #0
  4166de:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	@ 0x24
  4166e2:	9308      	str	r3, [sp, #32]
    for (size_t y = 0; y < out_width; y++) {
  4166e4:	f8dd a008 	ldr.w	sl, [sp, #8]
  4166e8:	4427      	add	r7, r4
  4166ea:	45a2      	cmp	sl, r4
  4166ec:	f47f af15 	bne.w	41651a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1d6>
    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);
  4166f0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  4166f2:	f8dd 808c 	ldr.w	r8, [sp, #140]	@ 0x8c
  4166f6:	9b04      	ldr	r3, [sp, #16]
  4166f8:	4632      	mov	r2, r6
  4166fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
  4166fe:	4640      	mov	r0, r8
  416700:	990c      	ldr	r1, [sp, #48]	@ 0x30
  416702:	f7ff fcc1 	bl	416088 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>
	if (__p)
  416706:	9b06      	ldr	r3, [sp, #24]
  416708:	2b00      	cmp	r3, #0
  41670a:	f43f ae2e 	beq.w	41636a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26>
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
  41670e:	461a      	mov	r2, r3
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
  416710:	4618      	mov	r0, r3
  416712:	9b07      	ldr	r3, [sp, #28]
  416714:	1a99      	subs	r1, r3, r2
  416716:	f011 fef9 	bl	42850c <_ZdlPvj>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
  41671a:	e626      	b.n	41636a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26>
  41671c:	461c      	mov	r4, r3
  41671e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  416720:	e7e0      	b.n	4166e4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3a0>
                    fill_res = fill_result_struct_i8_fomo(
  416722:	edd2 8a03 	vldr	s17, [r2, #12]
  416726:	ed92 9a02 	vldr	s18, [r2, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
  41672a:	2700      	movs	r7, #0
  41672c:	2200      	movs	r2, #0
  41672e:	2300      	movs	r3, #0
  416730:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  416734:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  416738:	9712      	str	r7, [sp, #72]	@ 0x48
    for (size_t y = 0; y < out_width; y++) {
  41673a:	2c00      	cmp	r4, #0
  41673c:	f000 80cc 	beq.w	4168d8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x594>
  416740:	46ba      	mov	sl, r7
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
  416742:	9b04      	ldr	r3, [sp, #16]
  416744:	e9cd 7706 	strd	r7, r7, [sp, #24]
  416748:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
  41674c:	960d      	str	r6, [sp, #52]	@ 0x34
  41674e:	9308      	str	r3, [sp, #32]
  416750:	ab10      	add	r3, sp, #64	@ 0x40
  416752:	930c      	str	r3, [sp, #48]	@ 0x30
  416754:	f8cd 808c 	str.w	r8, [sp, #140]	@ 0x8c
) {
  416758:	f04f 0901 	mov.w	r9, #1
        for (size_t x = 0; x < out_height; x++) {
  41675c:	f04f 0800 	mov.w	r8, #0
  416760:	9b08      	ldr	r3, [sp, #32]
  416762:	e9cd 7509 	strd	r7, r5, [sp, #36]	@ 0x24
  416766:	444b      	add	r3, r9
  416768:	9305      	str	r3, [sp, #20]
  41676a:	eb0a 0309 	add.w	r3, sl, r9
  41676e:	9302      	str	r3, [sp, #8]
  416770:	940b      	str	r4, [sp, #44]	@ 0x2c
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
  416772:	9a05      	ldr	r2, [sp, #20]
  416774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
  416776:	2a01      	cmp	r2, #1
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
  416778:	4443      	add	r3, r8
  41677a:	fb02 f303 	mul.w	r3, r2, r3
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
  41677e:	f000 8097 	beq.w	4168b0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x56c>
  416782:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  416784:	f04f 0b01 	mov.w	fp, #1
  416788:	18d3      	adds	r3, r2, r3
  41678a:	9301      	str	r3, [sp, #4]
  41678c:	e038      	b.n	416800 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4bc>
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
  41678e:	6823      	ldr	r3, [r4, #0]
  416790:	68a0      	ldr	r0, [r4, #8]
  416792:	181a      	adds	r2, r3, r0
  416794:	4542      	cmp	r2, r8
  416796:	9200      	str	r2, [sp, #0]
  416798:	d359      	bcc.n	41684e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x50a>
  41679a:	6861      	ldr	r1, [r4, #4]
  41679c:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  4167a0:	eb01 0c0e 	add.w	ip, r1, lr
  4167a4:	45d4      	cmp	ip, sl
  4167a6:	d352      	bcc.n	41684e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x50a>
  4167a8:	454b      	cmp	r3, r9
  4167aa:	d850      	bhi.n	41684e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x50a>
  4167ac:	9a02      	ldr	r2, [sp, #8]
  4167ae:	428a      	cmp	r2, r1
  4167b0:	d34d      	bcc.n	41684e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x50a>
    if (x < c->x) {
  4167b2:	4543      	cmp	r3, r8
  4167b4:	9a00      	ldr	r2, [sp, #0]
  4167b6:	d904      	bls.n	4167c2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x47e>
        c->x = x;
  4167b8:	4643      	mov	r3, r8
  4167ba:	f8c4 8000 	str.w	r8, [r4]
    if (x + width > c->x + c->width) {
  4167be:	eb00 0208 	add.w	r2, r0, r8
    if (y < c->y) {
  4167c2:	4551      	cmp	r1, sl
  4167c4:	d904      	bls.n	4167d0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x48c>
        c->y = y;
  4167c6:	4651      	mov	r1, sl
  4167c8:	f8c4 a004 	str.w	sl, [r4, #4]
    if (y + height > c->y + c->height) {
  4167cc:	eb0e 0c0a 	add.w	ip, lr, sl
    if (confidence > c->confidence) {
  4167d0:	edd4 7a04 	vldr	s15, [r4, #16]
  4167d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
    if (x + width > c->x + c->width) {
  4167d8:	4591      	cmp	r9, r2
        c->width += (x + width) - (c->x + c->width);
  4167da:	bf84      	itt	hi
  4167dc:	eba9 0303 	subhi.w	r3, r9, r3
  4167e0:	60a3      	strhi	r3, [r4, #8]
    if (y + height > c->y + c->height) {
  4167e2:	9b02      	ldr	r3, [sp, #8]
  4167e4:	4563      	cmp	r3, ip
        c->height += (y + height) - (c->y + c->height);
  4167e6:	bf84      	itt	hi
  4167e8:	1a59      	subhi	r1, r3, r1
  4167ea:	60e1      	strhi	r1, [r4, #12]
    if (confidence > c->confidence) {
  4167ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4167f0:	dd01      	ble.n	4167f6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4b2>
        c->confidence = confidence;
  4167f2:	ed84 8a04 	vstr	s16, [r4, #16]
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
  4167f6:	9b05      	ldr	r3, [sp, #20]
  4167f8:	f10b 0b01 	add.w	fp, fp, #1
  4167fc:	459b      	cmp	fp, r3
  4167fe:	d245      	bcs.n	41688c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x548>
                float vf = static_cast<float>(v - zero_point) * scale;
  416800:	9b01      	ldr	r3, [sp, #4]
  416802:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
  416806:	ee08 2a10 	vmov	s16, r2
  41680a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  41680e:	ee38 8a68 	vsub.f32	s16, s16, s17
  416812:	9301      	str	r3, [sp, #4]
    if (vf < detection_threshold) return;
  416814:	9b03      	ldr	r3, [sp, #12]
                float vf = static_cast<float>(v - zero_point) * scale;
  416816:	ee28 8a09 	vmul.f32	s16, s16, s18
    if (vf < detection_threshold) return;
  41681a:	edd3 7a04 	vldr	s15, [r3, #16]
  41681e:	eeb4 8ae7 	vcmpe.f32	s16, s15
  416822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  416826:	d4e6      	bmi.n	4167f6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4b2>
                ei_handle_cube(&cubes, x, y, vf, impulse->categories[ix - 1], block_config->threshold);
  416828:	9b04      	ldr	r3, [sp, #16]
      : _M_current(__i) { }
  41682a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
  41682c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
  41682e:	eb03 038b 	add.w	r3, r3, fp, lsl #2
  416832:	f853 7c04 	ldr.w	r7, [r3, #-4]
    for (auto c : *cubes) {
  416836:	9b06      	ldr	r3, [sp, #24]
  416838:	429e      	cmp	r6, r3
  41683a:	d00a      	beq.n	416852 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x50e>
  41683c:	461d      	mov	r5, r3
  41683e:	f855 4b04 	ldr.w	r4, [r5], #4
        if (strcmp(c->label, label) != 0) continue;
  416842:	4639      	mov	r1, r7
  416844:	6960      	ldr	r0, [r4, #20]
  416846:	f7f9 fddb 	bl	410400 <strcmp>
  41684a:	2800      	cmp	r0, #0
  41684c:	d09f      	beq.n	41678e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x44a>
    for (auto c : *cubes) {
  41684e:	42ae      	cmp	r6, r5
  416850:	d1f5      	bne.n	41683e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4fa>
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
  416852:	2018      	movs	r0, #24
  416854:	f011 fe54 	bl	428500 <_Znwj>
        cube->width = 1;
  416858:	2301      	movs	r3, #1
  41685a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  41685e:	9b07      	ldr	r3, [sp, #28]
        cube->confidence = vf;
  416860:	ed80 8a04 	vstr	s16, [r0, #16]
  416864:	429e      	cmp	r6, r3
        cube->y = y;
  416866:	e9c0 8a00 	strd	r8, sl, [r0]
        cube->label = label;
  41686a:	6147      	str	r7, [r0, #20]
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
  41686c:	900f      	str	r0, [sp, #60]	@ 0x3c
  41686e:	d015      	beq.n	41689c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x558>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  416870:	f846 0b04 	str.w	r0, [r6], #4
	    ++this->_M_impl._M_finish;
  416874:	9611      	str	r6, [sp, #68]	@ 0x44
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
  416876:	9b04      	ldr	r3, [sp, #16]
  416878:	f10b 0b01 	add.w	fp, fp, #1
  41687c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
  416880:	9308      	str	r3, [sp, #32]
  416882:	3301      	adds	r3, #1
  416884:	9305      	str	r3, [sp, #20]
  416886:	9b05      	ldr	r3, [sp, #20]
  416888:	459b      	cmp	fp, r3
  41688a:	d3b9      	bcc.n	416800 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x4bc>
        for (size_t x = 0; x < out_height; x++) {
  41688c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41688e:	f108 0801 	add.w	r8, r8, #1
  416892:	4598      	cmp	r8, r3
  416894:	d018      	beq.n	4168c8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x584>
  416896:	f109 0901 	add.w	r9, r9, #1
  41689a:	e76a      	b.n	416772 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x42e>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  41689c:	4619      	mov	r1, r3
	  _M_realloc_insert(end(), __x);
  41689e:	980c      	ldr	r0, [sp, #48]	@ 0x30
  4168a0:	aa0f      	add	r2, sp, #60	@ 0x3c
  4168a2:	f7ff fa15 	bl	415cd0 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	_M_deallocate(_M_impl._M_start,
  4168a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  4168a8:	9306      	str	r3, [sp, #24]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
  4168aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  4168ac:	9307      	str	r3, [sp, #28]
  4168ae:	e7e2      	b.n	416876 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x532>
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
  4168b0:	2300      	movs	r3, #0
  4168b2:	e9dd 7509 	ldrd	r7, r5, [sp, #36]	@ 0x24
  4168b6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  4168b8:	9308      	str	r3, [sp, #32]
    for (size_t y = 0; y < out_width; y++) {
  4168ba:	f8dd a008 	ldr.w	sl, [sp, #8]
  4168be:	4427      	add	r7, r4
  4168c0:	45a2      	cmp	sl, r4
  4168c2:	f47f af49 	bne.w	416758 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x414>
  4168c6:	e713      	b.n	4166f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x3ac>
  4168c8:	461c      	mov	r4, r3
  4168ca:	e9dd 7509 	ldrd	r7, r5, [sp, #36]	@ 0x24
  4168ce:	e7f4      	b.n	4168ba <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x576>
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
  4168d0:	4808      	ldr	r0, [pc, #32]	@ (4168f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x5b0>)
  4168d2:	f007 fea7 	bl	41e624 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
  4168d6:	e5c5      	b.n	416464 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x120>
    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);
  4168d8:	9b04      	ldr	r3, [sp, #16]
  4168da:	4632      	mov	r2, r6
  4168dc:	4640      	mov	r0, r8
  4168de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
  4168e2:	a910      	add	r1, sp, #64	@ 0x40
  4168e4:	f7ff fbd0 	bl	416088 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>
      _M_deallocate(pointer __p, size_t __n)
  4168e8:	e53f      	b.n	41636a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26>
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
  4168ea:	4803      	ldr	r0, [pc, #12]	@ (4168f8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x5b4>)
  4168ec:	f007 fe9a 	bl	41e624 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
  4168f0:	e5b8      	b.n	416464 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x120>
  4168f2:	bf00      	nop
  4168f4:	00434800 	.word	0x00434800
  4168f8:	00434904 	.word	0x00434904

004168fc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>:
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false) {
  4168fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416900:	ed2d 8b08 	vpush	{d8-d11}
  416904:	4614      	mov	r4, r2
  416906:	461f      	mov	r7, r3
  416908:	b0b9      	sub	sp, #228	@ 0xe4
  41690a:	f89d 2128 	ldrb.w	r2, [sp, #296]	@ 0x128

    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
  41690e:	699b      	ldr	r3, [r3, #24]
    bool debug = false) {
  416910:	920b      	str	r2, [sp, #44]	@ 0x2c
  416912:	9009      	str	r0, [sp, #36]	@ 0x24

    memset(result, 0, sizeof(ei_impulse_result_t));
  416914:	2248      	movs	r2, #72	@ 0x48
  416916:	4620      	mov	r0, r4
    bool debug = false) {
  416918:	460d      	mov	r5, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
  41691a:	2100      	movs	r1, #0
    bool debug = false) {
  41691c:	940a      	str	r4, [sp, #40]	@ 0x28
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
  41691e:	930c      	str	r3, [sp, #48]	@ 0x30
    memset(result, 0, sizeof(ei_impulse_result_t));
  416920:	f00a f9c0 	bl	420ca4 <memset>
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
  416924:	ab28      	add	r3, sp, #160	@ 0xa0
  416926:	9301      	str	r3, [sp, #4]
  416928:	ab30      	add	r3, sp, #192	@ 0xc0
  41692a:	9300      	str	r3, [sp, #0]
  41692c:	4638      	mov	r0, r7
  41692e:	ab20      	add	r3, sp, #128	@ 0x80
  416930:	aa18      	add	r2, sp, #96	@ 0x60
  416932:	a916      	add	r1, sp, #88	@ 0x58
  416934:	f7fe fdd4 	bl	4154e0 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0>
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
  416938:	4604      	mov	r4, r0
  41693a:	2800      	cmp	r0, #0
  41693c:	f040 8110 	bne.w	416b60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x264>
        return init_res;
    }

    if (input.type != TfLiteType::kTfLiteInt8 && input.type != TfLiteType::kTfLiteUInt8) {
  416940:	f89d 307c 	ldrb.w	r3, [sp, #124]	@ 0x7c
  416944:	2b09      	cmp	r3, #9
  416946:	d002      	beq.n	41694e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x52>
  416948:	2b03      	cmp	r3, #3
  41694a:	f040 8360 	bne.w	41700e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x712>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
  41694e:	f007 fe61 	bl	41e614 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
  416952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  416954:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
  416958:	699b      	ldr	r3, [r3, #24]
    uint64_t dsp_start_us = ei_read_timer_us();
  41695a:	900f      	str	r0, [sp, #60]	@ 0x3c
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
  41695c:	930e      	str	r3, [sp, #56]	@ 0x38
    uint64_t dsp_start_us = ei_read_timer_us();
  41695e:	9110      	str	r1, [sp, #64]	@ 0x40
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
  416960:	f1b9 0f00 	cmp.w	r9, #0
  416964:	f000 833b 	beq.w	416fde <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x6e2>
  416968:	2300      	movs	r3, #0
  41696a:	930d      	str	r3, [sp, #52]	@ 0x34

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
  41696c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
  416970:	9a09      	ldr	r2, [sp, #36]	@ 0x24

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, float scale, float zero_point, const float frequency,
                                                             int image_scaling) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
  416972:	49c4      	ldr	r1, [pc, #784]	@ (416c84 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x388>)
  416974:	6c13      	ldr	r3, [r2, #64]	@ 0x40
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
  416976:	6d92      	ldr	r2, [r2, #88]	@ 0x58
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
  416978:	68db      	ldr	r3, [r3, #12]
  41697a:	ed9d ba1a 	vldr	s22, [sp, #104]	@ 0x68
  41697e:	6958      	ldr	r0, [r3, #20]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
  416980:	689b      	ldr	r3, [r3, #8]
  416982:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
  416986:	6914      	ldr	r4, [r2, #16]
  416988:	9305      	str	r3, [sp, #20]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
  41698a:	f7f9 fd39 	bl	410400 <strcmp>
  41698e:	2800      	cmp	r0, #0
  416990:	f000 80ec 	beq.w	416b6c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x270>
#else
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
  416994:	f8d5 b010 	ldr.w	fp, [r5, #16]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  416998:	f1bb 0f00 	cmp.w	fp, #0
  41699c:	f000 8090 	beq.w	416ac0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1c4>
  4169a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
    size_t output_ix = 0;
  4169a4:	f04f 0a00 	mov.w	sl, #0
  4169a8:	465e      	mov	r6, fp
        for (size_t jx = 0; jx < elements_to_read; jx++) {
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);

            if (channel_count == 3) {
                // fast code path
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  4169aa:	eddf aabd 	vldr	s21, [pc, #756]	@ 416ca0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a4>
  4169ae:	46cb      	mov	fp, r9
  4169b0:	ed9f 9ab6 	vldr	s18, [pc, #728]	@ 416c8c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x390>
                        r = (r - torch_mean[0]) / torch_std[0];
                        g = (g - torch_mean[1]) / torch_std[1];
                        b = (b - torch_mean[2]) / torch_std[2];
                    }
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
                        r -= 128.0f;
  4169b4:	eddf 8ac1 	vldr	s17, [pc, #772]	@ 416cbc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c0>
                        r = (r - torch_mean[0]) / torch_std[0];
  4169b8:	ed9f aaba 	vldr	s20, [pc, #744]	@ 416ca4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a8>
  4169bc:	eddf 9abc 	vldr	s19, [pc, #752]	@ 416cb0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3b4>
  4169c0:	eec7 ba8b 	vdiv.f32	s23, s15, s22
  4169c4:	46d0      	mov	r8, sl
  4169c6:	46a9      	mov	r9, r5
  4169c8:	e9cd 4706 	strd	r4, r7, [sp, #24]
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
  4169cc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
  4169d0:	4637      	mov	r7, r6
  4169d2:	bf28      	it	cs
  4169d4:	f44f 6780 	movcs.w	r7, #1024	@ 0x400
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
  4169d8:	9b05      	ldr	r3, [sp, #20]
  4169da:	2101      	movs	r1, #1
  4169dc:	fb03 f007 	mul.w	r0, r3, r7
  4169e0:	0080      	lsls	r0, r0, #2
  4169e2:	f007 fe49 	bl	41e678 <_Z9ei_callocjj>
        if (!input_matrix.buffer) {
  4169e6:	4604      	mov	r4, r0
  4169e8:	2800      	cmp	r0, #0
  4169ea:	f000 830b 	beq.w	417004 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x708>
	if (_M_empty())
  4169ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
  4169f2:	e9cd 7814 	strd	r7, r8, [sp, #80]	@ 0x50
  4169f6:	9013      	str	r0, [sp, #76]	@ 0x4c
  4169f8:	2b00      	cmp	r3, #0
  4169fa:	f000 830b 	beq.w	417014 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x718>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
  4169fe:	4648      	mov	r0, r9
  416a00:	f8d9 500c 	ldr.w	r5, [r9, #12]
  416a04:	ab13      	add	r3, sp, #76	@ 0x4c
  416a06:	aa14      	add	r2, sp, #80	@ 0x50
  416a08:	a915      	add	r1, sp, #84	@ 0x54
  416a0a:	47a8      	blx	r5
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  416a0c:	2e00      	cmp	r6, #0
  416a0e:	d04a      	beq.n	416aa6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1aa>
  416a10:	2f00      	cmp	r7, #0
  416a12:	4620      	mov	r0, r4
  416a14:	bf14      	ite	ne
  416a16:	463a      	movne	r2, r7
  416a18:	2201      	moveq	r2, #1
  416a1a:	9d06      	ldr	r5, [sp, #24]
  416a1c:	eb0b 010a 	add.w	r1, fp, sl
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
  416a20:	ecf0 7a01 	vldmia	r0!, {s15}
  416a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  416a28:	ee17 3a90 	vmov	r3, s15
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416a2c:	eeb4 ba6a 	vcmp.f32	s22, s21
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
  416a30:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  416a34:	ee06 ca90 	vmov	s13, ip
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
  416a38:	f3c3 2c07 	ubfx	ip, r3, #8, #8
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
  416a3c:	b2db      	uxtb	r3, r3
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
  416a3e:	ee07 ca10 	vmov	s14, ip
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
  416a42:	ee07 3a90 	vmov	s15, r3
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
  416a4a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
  416a4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
  416a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416a56:	f040 8133 	bne.w	416cc0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c4>
  416a5a:	eeb4 8a49 	vcmp.f32	s16, s18
  416a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  416a62:	f040 812d 	bne.w	416cc0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c4>
  416a66:	2d00      	cmp	r5, #0
  416a68:	f040 8144 	bne.w	416cf4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f8>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
  416a6c:	ee76 6ae8 	vsub.f32	s13, s13, s17
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
  416a70:	ee37 7a68 	vsub.f32	s14, s14, s17
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
  416a74:	ee77 7ae8 	vsub.f32	s15, s15, s17
                        g -= 128.0f;
                        b -= 128.0f;
                    }

                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
  416a78:	eefd 6ae6 	vcvt.s32.f32	s13, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
  416a7c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
  416a80:	ee16 3a90 	vmov	r3, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
  416a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
  416a88:	700b      	strb	r3, [r1, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
  416a8a:	ee17 3a10 	vmov	r3, s14
  416a8e:	704b      	strb	r3, [r1, #1]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
  416a90:	ee17 3a90 	vmov	r3, s15
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  416a94:	3a01      	subs	r2, #1
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
  416a96:	708b      	strb	r3, [r1, #2]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  416a98:	f101 0103 	add.w	r1, r1, #3
  416a9c:	d1c0      	bne.n	416a20 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x124>
  416a9e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  416aa2:	9506      	str	r5, [sp, #24]
  416aa4:	449a      	add	sl, r3
            ei_free(buffer);
  416aa6:	4620      	mov	r0, r4
  416aa8:	f007 fdf4 	bl	41e694 <_Z7ei_freePv>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  416aac:	f8d9 3010 	ldr.w	r3, [r9, #16]
  416ab0:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
  416ab4:	4598      	cmp	r8, r3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
                }
            }
        }

        bytes_left -= elements_to_read;
  416ab6:	eba6 0607 	sub.w	r6, r6, r7
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  416aba:	d387      	bcc.n	4169cc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xd0>
  416abc:	46d9      	mov	r9, fp
  416abe:	9f07      	ldr	r7, [sp, #28]
    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
        return EI_IMPULSE_DSP_ERROR;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
  416ac0:	f007 fda6 	bl	41e610 <_Z29ei_run_impulse_check_canceledv>
  416ac4:	1c83      	adds	r3, r0, #2
  416ac6:	4604      	mov	r4, r0
  416ac8:	d043      	beq.n	416b52 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x256>
        return EI_IMPULSE_CANCELED;
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
  416aca:	f007 fda3 	bl	41e614 <_Z16ei_read_timer_usv>
  416ace:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  416ad0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  416ad2:	1ac0      	subs	r0, r0, r3
  416ad4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
  416ad6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
  416ada:	eb61 0103 	sbc.w	r1, r1, r3
  416ade:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
  416ae2:	2300      	movs	r3, #0
  416ae4:	f7f9 ff9c 	bl	410a20 <__aeabi_ldivmod>

    if (debug) {
  416ae8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
  416aea:	61e0      	str	r0, [r4, #28]
    if (debug) {
  416aec:	2b00      	cmp	r3, #0
  416aee:	f040 823a 	bne.w	416f66 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x66a>
            ei_printf(" ");
        }
        ei_printf("\n");
    }

    ctx_start_us = ei_read_timer_us();
  416af2:	f007 fd8f 	bl	41e614 <_Z16ei_read_timer_usv>
    if (graph_config->model_invoke() != kTfLiteOk) {
  416af6:	69bb      	ldr	r3, [r7, #24]
    ctx_start_us = ei_read_timer_us();
  416af8:	4604      	mov	r4, r0
    if (graph_config->model_invoke() != kTfLiteOk) {
  416afa:	689b      	ldr	r3, [r3, #8]
    ctx_start_us = ei_read_timer_us();
  416afc:	460d      	mov	r5, r1
    if (graph_config->model_invoke() != kTfLiteOk) {
  416afe:	4798      	blx	r3
  416b00:	2800      	cmp	r0, #0
  416b02:	f040 8281 	bne.w	417008 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x70c>
    uint64_t ctx_end_us = ei_read_timer_us();
  416b06:	f007 fd85 	bl	41e614 <_Z16ei_read_timer_usv>
    result->timing.classification_us = ctx_end_us - ctx_start_us;
  416b0a:	1b00      	subs	r0, r0, r4
  416b0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  416b0e:	eb61 0105 	sbc.w	r1, r1, r5
    result->timing.classification = (int)(result->timing.classification_us / 1000);
  416b12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
  416b16:	2300      	movs	r3, #0
    result->timing.classification_us = ctx_end_us - ctx_start_us;
  416b18:	e9c4 010c 	strd	r0, r1, [r4, #48]	@ 0x30
    result->timing.classification = (int)(result->timing.classification_us / 1000);
  416b1c:	f7f9 ff80 	bl	410a20 <__aeabi_ldivmod>
  416b20:	6220      	str	r0, [r4, #32]
    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
  416b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  416b24:	4639      	mov	r1, r7
  416b26:	9302      	str	r3, [sp, #8]
  416b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  416b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
  416b2c:	9301      	str	r3, [sp, #4]
  416b2e:	ab28      	add	r3, sp, #160	@ 0xa0
  416b30:	9300      	str	r3, [sp, #0]
  416b32:	aa20      	add	r2, sp, #128	@ 0x80
  416b34:	ab30      	add	r3, sp, #192	@ 0xc0
  416b36:	f7ff fc05 	bl	416344 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
    if (fill_res != EI_IMPULSE_OK) {
  416b3a:	4604      	mov	r4, r0
  416b3c:	b928      	cbnz	r0, 416b4a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x24e>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
  416b3e:	f007 fd67 	bl	41e610 <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
  416b42:	3002      	adds	r0, #2
  416b44:	bf08      	it	eq
  416b46:	f06f 0401 	mvneq.w	r4, #1
        &output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
        result,
        debug);

    graph_config->model_reset(ei_aligned_free);
  416b4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  416b4c:	484e      	ldr	r0, [pc, #312]	@ (416c88 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x38c>)
  416b4e:	68db      	ldr	r3, [r3, #12]
  416b50:	4798      	blx	r3
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
  416b52:	f1b9 0f00 	cmp.w	r9, #0
  416b56:	d003      	beq.n	416b60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x264>
  416b58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  416b5a:	2b00      	cmp	r3, #0
  416b5c:	f040 81fa 	bne.w	416f54 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x658>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
  416b60:	4620      	mov	r0, r4
  416b62:	b039      	add	sp, #228	@ 0xe4
  416b64:	ecbd 8b08 	vpop	{d8-d11}
  416b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t bytes_left = signal->total_length;
  416b6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  416b70:	f1ba 0f00 	cmp.w	sl, #0
  416b74:	d0a4      	beq.n	416ac0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1c4>
  416b76:	eddf 8a4a 	vldr	s17, [pc, #296]	@ 416ca0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a4>
  416b7a:	eeb4 ba68 	vcmp.f32	s22, s17
  416b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  416b82:	f000 8103 	beq.w	416d8c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x490>
  416b86:	4653      	mov	r3, sl
  416b88:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
  416b8c:	46ca      	mov	sl, r9
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
  416b8e:	eddf ba40 	vldr	s23, [pc, #256]	@ 416c90 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x394>
  416b92:	eddf aa41 	vldr	s21, [pc, #260]	@ 416c98 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x39c>
  416b96:	ed9f aa3f 	vldr	s20, [pc, #252]	@ 416c94 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x398>
                        r -= 128.0f;
  416b9a:	ed9f 9a48 	vldr	s18, [pc, #288]	@ 416cbc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c0>
  416b9e:	eec7 9a8b 	vdiv.f32	s19, s15, s22
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  416ba2:	4683      	mov	fp, r0
  416ba4:	4681      	mov	r9, r0
  416ba6:	46a8      	mov	r8, r5
  416ba8:	461e      	mov	r6, r3
  416baa:	9406      	str	r4, [sp, #24]
  416bac:	9707      	str	r7, [sp, #28]
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
  416bae:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
  416bb2:	4637      	mov	r7, r6
  416bb4:	bf28      	it	cs
  416bb6:	f44f 6780 	movcs.w	r7, #1024	@ 0x400
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
  416bba:	9b05      	ldr	r3, [sp, #20]
  416bbc:	2101      	movs	r1, #1
  416bbe:	fb07 f003 	mul.w	r0, r7, r3
  416bc2:	0080      	lsls	r0, r0, #2
  416bc4:	f007 fd58 	bl	41e678 <_Z9ei_callocjj>
        if (!input_matrix.buffer) {
  416bc8:	4605      	mov	r5, r0
  416bca:	2800      	cmp	r0, #0
  416bcc:	f000 8218 	beq.w	417000 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x704>
	if (_M_empty())
  416bd0:	f8d8 3008 	ldr.w	r3, [r8, #8]
  416bd4:	e9cd 7b14 	strd	r7, fp, [sp, #80]	@ 0x50
  416bd8:	9013      	str	r0, [sp, #76]	@ 0x4c
  416bda:	2b00      	cmp	r3, #0
  416bdc:	f000 821a 	beq.w	417014 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x718>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
  416be0:	4640      	mov	r0, r8
  416be2:	f8d8 400c 	ldr.w	r4, [r8, #12]
  416be6:	ab13      	add	r3, sp, #76	@ 0x4c
  416be8:	aa14      	add	r2, sp, #80	@ 0x50
  416bea:	a915      	add	r1, sp, #84	@ 0x54
  416bec:	47a0      	blx	r4
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  416bee:	2e00      	cmp	r6, #0
  416bf0:	f000 808d 	beq.w	416d0e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x412>
  416bf4:	2f00      	cmp	r7, #0
  416bf6:	4628      	mov	r0, r5
  416bf8:	bf14      	ite	ne
  416bfa:	463a      	movne	r2, r7
  416bfc:	2201      	moveq	r2, #1
  416bfe:	9c06      	ldr	r4, [sp, #24]
  416c00:	eb0a 0109 	add.w	r1, sl, r9
  416c04:	e019      	b.n	416c3a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x33e>
                        r /= 255.0f;
  416c06:	ee66 6aa8 	vmul.f32	s13, s13, s17
                        g /= 255.0f;
  416c0a:	ee67 7aa8 	vmul.f32	s15, s15, s17
                        b /= 255.0f;
  416c0e:	ee27 7a28 	vmul.f32	s14, s14, s17
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
  416c12:	ee67 7aab 	vmul.f32	s15, s15, s23
  416c16:	eee6 7aaa 	vfma.f32	s15, s13, s21
  416c1a:	eee7 7a0a 	vfma.f32	s15, s14, s20
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
  416c1e:	ee67 7aa9 	vmul.f32	s15, s15, s19
  416c22:	fef8 7a67 	vrinta.f32	s15, s15
  416c26:	ee78 7a27 	vadd.f32	s15, s16, s15
  416c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  416c2e:	ee17 3a90 	vmov	r3, s15
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  416c32:	3a01      	subs	r2, #1
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
  416c34:	f801 3b01 	strb.w	r3, [r1], #1
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  416c38:	d067      	beq.n	416d0a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x40e>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
  416c3a:	ecf0 7a01 	vldmia	r0!, {s15}
  416c3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  416c42:	ee17 3a90 	vmov	r3, s15
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
  416c46:	f3c3 4c07 	ubfx	ip, r3, #16, #8
  416c4a:	ee06 ca90 	vmov	s13, ip
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
  416c4e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
  416c52:	b2db      	uxtb	r3, r3
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
  416c54:	ee07 ca90 	vmov	s15, ip
                    float b = static_cast<float>(pixel & 0xff);
  416c58:	ee07 3a10 	vmov	s14, r3
                    float r = static_cast<float>(pixel >> 16 & 0xff);
  416c5c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    float g = static_cast<float>(pixel >> 8 & 0xff);
  416c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    float b = static_cast<float>(pixel & 0xff);
  416c64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416c68:	2c00      	cmp	r4, #0
  416c6a:	d0cc      	beq.n	416c06 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x30a>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
  416c6c:	2c02      	cmp	r4, #2
  416c6e:	d05d      	beq.n	416d2c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x430>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
  416c70:	2c04      	cmp	r4, #4
  416c72:	d1ce      	bne.n	416c12 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x316>
                        r -= 128.0f;
  416c74:	ee76 6ac9 	vsub.f32	s13, s13, s18
                        g -= 128.0f;
  416c78:	ee77 7ac9 	vsub.f32	s15, s15, s18
                        b -= 128.0f;
  416c7c:	ee37 7a49 	vsub.f32	s14, s14, s18
  416c80:	e7c7      	b.n	416c12 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x316>
  416c82:	bf00      	nop
  416c84:	0043446c 	.word	0x0043446c
  416c88:	0041540d 	.word	0x0041540d
  416c8c:	c3000000 	.word	0xc3000000
  416c90:	3f1645a2 	.word	0x3f1645a2
  416c94:	3de978d5 	.word	0x3de978d5
  416c98:	3e991687 	.word	0x3e991687
  416c9c:	437effff 	.word	0x437effff
  416ca0:	3b808081 	.word	0x3b808081
  416ca4:	bef851ec 	.word	0xbef851ec
  416ca8:	408e38e4 	.word	0x408e38e4
  416cac:	408edb6d 	.word	0x408edb6d
  416cb0:	408bbced 	.word	0x408bbced
  416cb4:	becfdf3b 	.word	0xbecfdf3b
  416cb8:	bee978d5 	.word	0xbee978d5
  416cbc:	43000000 	.word	0x43000000
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416cc0:	b9c5      	cbnz	r5, 416cf4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f8>
                        r /= 255.0f;
  416cc2:	ee66 6aaa 	vmul.f32	s13, s13, s21
                        g /= 255.0f;
  416cc6:	ee27 7a2a 	vmul.f32	s14, s14, s21
                        b /= 255.0f;
  416cca:	ee67 7aaa 	vmul.f32	s15, s15, s21
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
  416cce:	ee66 6aab 	vmul.f32	s13, s13, s23
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
  416cd2:	ee27 7a2b 	vmul.f32	s14, s14, s23
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
  416cd6:	ee67 7aab 	vmul.f32	s15, s15, s23
  416cda:	fef8 6a66 	vrinta.f32	s13, s13
  416cde:	feb8 7a47 	vrinta.f32	s14, s14
  416ce2:	fef8 7a67 	vrinta.f32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
  416ce6:	ee78 6a26 	vadd.f32	s13, s16, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
  416cea:	ee38 7a07 	vadd.f32	s14, s16, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
  416cee:	ee78 7a27 	vadd.f32	s15, s16, s15
  416cf2:	e6c1      	b.n	416a78 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x17c>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
  416cf4:	2d02      	cmp	r5, #2
  416cf6:	d032      	beq.n	416d5e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x462>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
  416cf8:	2d04      	cmp	r5, #4
  416cfa:	d1e8      	bne.n	416cce <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3d2>
                        r -= 128.0f;
  416cfc:	ee76 6ae8 	vsub.f32	s13, s13, s17
                        g -= 128.0f;
  416d00:	ee37 7a68 	vsub.f32	s14, s14, s17
                        b -= 128.0f;
  416d04:	ee77 7ae8 	vsub.f32	s15, s15, s17
  416d08:	e7e1      	b.n	416cce <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3d2>
  416d0a:	9406      	str	r4, [sp, #24]
  416d0c:	44b9      	add	r9, r7
            ei_free(buffer);
  416d0e:	4628      	mov	r0, r5
  416d10:	f007 fcc0 	bl	41e694 <_Z7ei_freePv>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  416d14:	f8d8 3010 	ldr.w	r3, [r8, #16]
  416d18:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
  416d1c:	459b      	cmp	fp, r3
        bytes_left -= elements_to_read;
  416d1e:	eba6 0607 	sub.w	r6, r6, r7
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  416d22:	f4ff af44 	bcc.w	416bae <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2b2>
  416d26:	46d1      	mov	r9, sl
  416d28:	9f07      	ldr	r7, [sp, #28]
  416d2a:	e6c9      	b.n	416ac0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1c4>
                        r = (r - torch_mean[0]) / torch_std[0];
  416d2c:	ed1f 5a23 	vldr	s10, [pc, #-140]	@ 416ca4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a8>
                        g = (g - torch_mean[1]) / torch_std[1];
  416d30:	ed5f 5a1f 	vldr	s11, [pc, #-124]	@ 416cb8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3bc>
                        b = (b - torch_mean[2]) / torch_std[2];
  416d34:	ed1f 6a21 	vldr	s12, [pc, #-132]	@ 416cb4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3b8>
                        r = (r - torch_mean[0]) / torch_std[0];
  416d38:	ed5f 3a23 	vldr	s7, [pc, #-140]	@ 416cb0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3b4>
                        g = (g - torch_mean[1]) / torch_std[1];
  416d3c:	ed1f 4a25 	vldr	s8, [pc, #-148]	@ 416cac <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3b0>
                        b = (b - torch_mean[2]) / torch_std[2];
  416d40:	ed5f 4a27 	vldr	s9, [pc, #-156]	@ 416ca8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3ac>
                        r = (r - torch_mean[0]) / torch_std[0];
  416d44:	eea6 5aa8 	vfma.f32	s10, s13, s17
                        g = (g - torch_mean[1]) / torch_std[1];
  416d48:	eee7 5aa8 	vfma.f32	s11, s15, s17
                        b = (b - torch_mean[2]) / torch_std[2];
  416d4c:	eea7 6a28 	vfma.f32	s12, s14, s17
                        r = (r - torch_mean[0]) / torch_std[0];
  416d50:	ee65 6a23 	vmul.f32	s13, s10, s7
                        g = (g - torch_mean[1]) / torch_std[1];
  416d54:	ee65 7a84 	vmul.f32	s15, s11, s8
                        b = (b - torch_mean[2]) / torch_std[2];
  416d58:	ee26 7a24 	vmul.f32	s14, s12, s9
  416d5c:	e759      	b.n	416c12 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x316>
                        g = (g - torch_mean[1]) / torch_std[1];
  416d5e:	ed5f 5a2a 	vldr	s11, [pc, #-168]	@ 416cb8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3bc>
                        b = (b - torch_mean[2]) / torch_std[2];
  416d62:	ed1f 6a2c 	vldr	s12, [pc, #-176]	@ 416cb4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3b8>
                        r = (r - torch_mean[0]) / torch_std[0];
  416d66:	eeb0 4a4a 	vmov.f32	s8, s20
                        g = (g - torch_mean[1]) / torch_std[1];
  416d6a:	ed5f 4a30 	vldr	s9, [pc, #-192]	@ 416cac <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3b0>
                        r = (r - torch_mean[0]) / torch_std[0];
  416d6e:	eea6 4aaa 	vfma.f32	s8, s13, s21
                        b = (b - torch_mean[2]) / torch_std[2];
  416d72:	ed1f 5a33 	vldr	s10, [pc, #-204]	@ 416ca8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3ac>
                        g = (g - torch_mean[1]) / torch_std[1];
  416d76:	eee7 5a2a 	vfma.f32	s11, s14, s21
                        b = (b - torch_mean[2]) / torch_std[2];
  416d7a:	eea7 6aaa 	vfma.f32	s12, s15, s21
                        r = (r - torch_mean[0]) / torch_std[0];
  416d7e:	ee64 6a29 	vmul.f32	s13, s8, s19
                        g = (g - torch_mean[1]) / torch_std[1];
  416d82:	ee25 7aa4 	vmul.f32	s14, s11, s9
                        b = (b - torch_mean[2]) / torch_std[2];
  416d86:	ee66 7a05 	vmul.f32	s15, s12, s10
  416d8a:	e7a0      	b.n	416cce <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3d2>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416d8c:	ed1f aa41 	vldr	s20, [pc, #-260]	@ 416c8c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x390>
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
  416d90:	ed5f 9a41 	vldr	s19, [pc, #-260]	@ 416c90 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x394>
  416d94:	ed1f 9a40 	vldr	s18, [pc, #-256]	@ 416c98 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x39c>
  416d98:	ed5f 8a42 	vldr	s17, [pc, #-264]	@ 416c94 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x398>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  416d9c:	46ab      	mov	fp, r5
  416d9e:	e9cd 0006 	strd	r0, r0, [sp, #24]
  416da2:	f8cd 9020 	str.w	r9, [sp, #32]
  416da6:	9711      	str	r7, [sp, #68]	@ 0x44
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
  416da8:	f5ba 6f80 	cmp.w	sl, #1024	@ 0x400
  416dac:	4656      	mov	r6, sl
  416dae:	bf28      	it	cs
  416db0:	f44f 6680 	movcs.w	r6, #1024	@ 0x400
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
  416db4:	9b05      	ldr	r3, [sp, #20]
  416db6:	2101      	movs	r1, #1
  416db8:	fb06 f003 	mul.w	r0, r6, r3
  416dbc:	0080      	lsls	r0, r0, #2
  416dbe:	f007 fc5b 	bl	41e678 <_Z9ei_callocjj>
        if (!input_matrix.buffer) {
  416dc2:	4607      	mov	r7, r0
  416dc4:	2800      	cmp	r0, #0
  416dc6:	f000 8112 	beq.w	416fee <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x6f2>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
  416dca:	9b06      	ldr	r3, [sp, #24]
  416dcc:	9013      	str	r0, [sp, #76]	@ 0x4c
  416dce:	e9cd 6314 	strd	r6, r3, [sp, #80]	@ 0x50
	if (_M_empty())
  416dd2:	f8db 3008 	ldr.w	r3, [fp, #8]
  416dd6:	2b00      	cmp	r3, #0
  416dd8:	f000 811c 	beq.w	417014 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x718>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
  416ddc:	4658      	mov	r0, fp
  416dde:	f8db 500c 	ldr.w	r5, [fp, #12]
  416de2:	ab13      	add	r3, sp, #76	@ 0x4c
  416de4:	aa14      	add	r2, sp, #80	@ 0x50
  416de6:	a915      	add	r1, sp, #84	@ 0x54
  416de8:	47a8      	blx	r5
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  416dea:	f1ba 0f00 	cmp.w	sl, #0
  416dee:	d065      	beq.n	416ebc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x5c0>
  416df0:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
  416df4:	2e00      	cmp	r6, #0
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
  416df6:	ed5f 5a57 	vldr	s11, [pc, #-348]	@ 416c9c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a0>
                        r /= 255.0f;
  416dfa:	ed1f 6a57 	vldr	s12, [pc, #-348]	@ 416ca0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a4>
  416dfe:	4638      	mov	r0, r7
  416e00:	bf14      	ite	ne
  416e02:	4632      	movne	r2, r6
  416e04:	2201      	moveq	r2, #1
  416e06:	1859      	adds	r1, r3, r1
  416e08:	e02f      	b.n	416e6a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x56e>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416e0a:	2c00      	cmp	r4, #0
  416e0c:	f000 8084 	beq.w	416f18 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x61c>
                    float r = static_cast<float>(pixel >> 16 & 0xff);
  416e10:	ee07 9a90 	vmov	s15, r9
                    float b = static_cast<float>(pixel & 0xff);
  416e14:	ee07 8a10 	vmov	s14, r8
                    float r = static_cast<float>(pixel >> 16 & 0xff);
  416e18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float g = static_cast<float>(pixel >> 8 & 0xff);
  416e1c:	ee07 5a90 	vmov	s15, r5
                    float b = static_cast<float>(pixel & 0xff);
  416e20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
  416e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
  416e28:	2c02      	cmp	r4, #2
  416e2a:	d05a      	beq.n	416ee2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x5e6>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
  416e2c:	2c04      	cmp	r4, #4
  416e2e:	d107      	bne.n	416e40 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x544>
                        r -= 128.0f;
  416e30:	ed1f 5a5e 	vldr	s10, [pc, #-376]	@ 416cbc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c0>
  416e34:	ee76 6ac5 	vsub.f32	s13, s13, s10
                        g -= 128.0f;
  416e38:	ee77 7ac5 	vsub.f32	s15, s15, s10
                        b -= 128.0f;
  416e3c:	ee37 7a45 	vsub.f32	s14, s14, s10
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
  416e40:	ee67 7aa9 	vmul.f32	s15, s15, s19
  416e44:	eee6 7a89 	vfma.f32	s15, s13, s18
  416e48:	eee7 7a28 	vfma.f32	s15, s14, s17
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
  416e4c:	ee67 7aa5 	vmul.f32	s15, s15, s11
  416e50:	fef8 7a67 	vrinta.f32	s15, s15
  416e54:	ee78 7a27 	vadd.f32	s15, s16, s15
  416e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  416e5c:	ee17 3a90 	vmov	r3, s15
  416e60:	700b      	strb	r3, [r1, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
  416e62:	3a01      	subs	r2, #1
  416e64:	f101 0101 	add.w	r1, r1, #1
  416e68:	d025      	beq.n	416eb6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x5ba>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
  416e6a:	ecf0 7a01 	vldmia	r0!, {s15}
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416e6e:	eeb4 8a4a 	vcmp.f32	s16, s20
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
  416e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
  416e7a:	ee17 8a90 	vmov	r8, s15
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
  416e7e:	f3c8 4907 	ubfx	r9, r8, #16, #8
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
  416e82:	f3c8 2507 	ubfx	r5, r8, #8, #8
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
  416e86:	fa5f f888 	uxtb.w	r8, r8
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416e8a:	d0be      	beq.n	416e0a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x50e>
                    float r = static_cast<float>(pixel >> 16 & 0xff);
  416e8c:	ee07 9a90 	vmov	s15, r9
                    float b = static_cast<float>(pixel & 0xff);
  416e90:	ee07 8a10 	vmov	s14, r8
                    float r = static_cast<float>(pixel >> 16 & 0xff);
  416e94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float g = static_cast<float>(pixel >> 8 & 0xff);
  416e98:	ee07 5a90 	vmov	s15, r5
                    float b = static_cast<float>(pixel & 0xff);
  416e9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
  416ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
  416ea4:	2c00      	cmp	r4, #0
  416ea6:	d1bf      	bne.n	416e28 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x52c>
                        r /= 255.0f;
  416ea8:	ee66 6a86 	vmul.f32	s13, s13, s12
                        g /= 255.0f;
  416eac:	ee67 7a86 	vmul.f32	s15, s15, s12
                        b /= 255.0f;
  416eb0:	ee27 7a06 	vmul.f32	s14, s14, s12
  416eb4:	e7c4      	b.n	416e40 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x544>
  416eb6:	9b07      	ldr	r3, [sp, #28]
  416eb8:	4433      	add	r3, r6
  416eba:	9307      	str	r3, [sp, #28]
            ei_free(buffer);
  416ebc:	4638      	mov	r0, r7
  416ebe:	f007 fbe9 	bl	41e694 <_Z7ei_freePv>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  416ec2:	9b06      	ldr	r3, [sp, #24]
        bytes_left -= elements_to_read;
  416ec4:	ebaa 0a06 	sub.w	sl, sl, r6
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
  416ec8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  416ecc:	461a      	mov	r2, r3
  416ece:	9306      	str	r3, [sp, #24]
  416ed0:	f8db 3010 	ldr.w	r3, [fp, #16]
  416ed4:	4293      	cmp	r3, r2
  416ed6:	f63f af67 	bhi.w	416da8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4ac>
  416eda:	f8dd 9020 	ldr.w	r9, [sp, #32]
  416ede:	9f11      	ldr	r7, [sp, #68]	@ 0x44
  416ee0:	e5ee      	b.n	416ac0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1c4>
                        r = (r - torch_mean[0]) / torch_std[0];
  416ee2:	ed5f 3a91 	vldr	s7, [pc, #-580]	@ 416ca0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a4>
  416ee6:	ed1f 4a91 	vldr	s8, [pc, #-580]	@ 416ca4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3a8>
                        g = (g - torch_mean[1]) / torch_std[1];
  416eea:	ed5f 4a8d 	vldr	s9, [pc, #-564]	@ 416cb8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3bc>
                        b = (b - torch_mean[2]) / torch_std[2];
  416eee:	ed1f 5a8f 	vldr	s10, [pc, #-572]	@ 416cb4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3b8>
                        r = (r - torch_mean[0]) / torch_std[0];
  416ef2:	ed1f 2a91 	vldr	s4, [pc, #-580]	@ 416cb0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3b4>
                        g = (g - torch_mean[1]) / torch_std[1];
  416ef6:	ed5f 2a93 	vldr	s5, [pc, #-588]	@ 416cac <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3b0>
                        b = (b - torch_mean[2]) / torch_std[2];
  416efa:	ed1f 3a95 	vldr	s6, [pc, #-596]	@ 416ca8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3ac>
                        r = (r - torch_mean[0]) / torch_std[0];
  416efe:	eea6 4aa3 	vfma.f32	s8, s13, s7
                        g = (g - torch_mean[1]) / torch_std[1];
  416f02:	eee7 4aa3 	vfma.f32	s9, s15, s7
                        b = (b - torch_mean[2]) / torch_std[2];
  416f06:	eea7 5a23 	vfma.f32	s10, s14, s7
                        r = (r - torch_mean[0]) / torch_std[0];
  416f0a:	ee64 6a02 	vmul.f32	s13, s8, s4
                        g = (g - torch_mean[1]) / torch_std[1];
  416f0e:	ee64 7aa2 	vmul.f32	s15, s9, s5
                        b = (b - torch_mean[2]) / torch_std[2];
  416f12:	ee25 7a03 	vmul.f32	s14, s10, s6
  416f16:	e793      	b.n	416e40 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x544>
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
  416f18:	f644 4e8b 	movw	lr, #19595	@ 0x4c8b
  416f1c:	f249 6c45 	movw	ip, #38469	@ 0x9645
  416f20:	f641 532f 	movw	r3, #7471	@ 0x1d2f
  416f24:	fb0e f909 	mul.w	r9, lr, r9
  416f28:	fb0c 9905 	mla	r9, ip, r5, r9
  416f2c:	fb03 9908 	mla	r9, r3, r8, r9
                    gray >>= 16; // scale down to int8_t
  416f30:	ea4f 4329 	mov.w	r3, r9, asr #16
                    gray += zero_point;
  416f34:	ee07 3a90 	vmov	s15, r3
  416f38:	ed1f 7aa0 	vldr	s14, [pc, #-640]	@ 416cbc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c0>
  416f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  416f40:	ee77 7ac7 	vsub.f32	s15, s15, s14
  416f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  416f48:	ee17 3a90 	vmov	r3, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
  416f4c:	f303 0307 	ssat	r3, #8, r3
  416f50:	700b      	strb	r3, [r1, #0]
  416f52:	e786      	b.n	416e62 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x566>
            ei_free(buffer);
  416f54:	4648      	mov	r0, r9
  416f56:	f007 fb9d 	bl	41e694 <_Z7ei_freePv>
  416f5a:	4620      	mov	r0, r4
  416f5c:	b039      	add	sp, #228	@ 0xe4
  416f5e:	ecbd 8b08 	vpop	{d8-d11}
  416f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_printf("Features (%d ms.): ", result->timing.dsp);
  416f66:	4601      	mov	r1, r0
  416f68:	482b      	ldr	r0, [pc, #172]	@ (417018 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x71c>)
  416f6a:	f007 fb5b 	bl	41e624 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
  416f6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  416f70:	b1bb      	cbz	r3, 416fa2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x6a6>
  416f72:	1e5c      	subs	r4, r3, #1
            ei_printf(" ");
  416f74:	4d29      	ldr	r5, [pc, #164]	@ (41701c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x720>)
  416f76:	444c      	add	r4, r9
  416f78:	f109 38ff 	add.w	r8, r9, #4294967295	@ 0xffffffff
            ei_printf_float((features_matrix.buffer[ix] - input.params.zero_point) * input.params.scale);
  416f7c:	f918 2f01 	ldrsb.w	r2, [r8, #1]!
  416f80:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
  416f82:	ed9d 0a1a 	vldr	s0, [sp, #104]	@ 0x68
  416f86:	1ad3      	subs	r3, r2, r3
  416f88:	ee07 3a90 	vmov	s15, r3
  416f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  416f90:	ee27 0a80 	vmul.f32	s0, s15, s0
  416f94:	f007 fb62 	bl	41e65c <_Z15ei_printf_floatf>
            ei_printf(" ");
  416f98:	4628      	mov	r0, r5
  416f9a:	f007 fb43 	bl	41e624 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
  416f9e:	45a0      	cmp	r8, r4
  416fa0:	d1ec      	bne.n	416f7c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x680>
        ei_printf("\n");
  416fa2:	481f      	ldr	r0, [pc, #124]	@ (417020 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x724>)
  416fa4:	f007 fb3e 	bl	41e624 <_Z9ei_printfPKcz>
    ctx_start_us = ei_read_timer_us();
  416fa8:	f007 fb34 	bl	41e614 <_Z16ei_read_timer_usv>
    if (graph_config->model_invoke() != kTfLiteOk) {
  416fac:	69bb      	ldr	r3, [r7, #24]
    ctx_start_us = ei_read_timer_us();
  416fae:	4604      	mov	r4, r0
    if (graph_config->model_invoke() != kTfLiteOk) {
  416fb0:	689b      	ldr	r3, [r3, #8]
    ctx_start_us = ei_read_timer_us();
  416fb2:	460d      	mov	r5, r1
    if (graph_config->model_invoke() != kTfLiteOk) {
  416fb4:	4798      	blx	r3
  416fb6:	bb38      	cbnz	r0, 417008 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x70c>
    uint64_t ctx_end_us = ei_read_timer_us();
  416fb8:	f007 fb2c 	bl	41e614 <_Z16ei_read_timer_usv>
    result->timing.classification_us = ctx_end_us - ctx_start_us;
  416fbc:	1b00      	subs	r0, r0, r4
  416fbe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  416fc0:	eb61 0105 	sbc.w	r1, r1, r5
    result->timing.classification = (int)(result->timing.classification_us / 1000);
  416fc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
  416fc8:	2300      	movs	r3, #0
    result->timing.classification_us = ctx_end_us - ctx_start_us;
  416fca:	e9c4 010c 	strd	r0, r1, [r4, #48]	@ 0x30
    result->timing.classification = (int)(result->timing.classification_us / 1000);
  416fce:	f7f9 fd27 	bl	410a20 <__aeabi_ldivmod>
  416fd2:	4601      	mov	r1, r0
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
  416fd4:	4813      	ldr	r0, [pc, #76]	@ (417024 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x728>)
    result->timing.classification = (int)(result->timing.classification_us / 1000);
  416fd6:	6221      	str	r1, [r4, #32]
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
  416fd8:	f007 fb24 	bl	41e624 <_Z9ei_printfPKcz>
  416fdc:	e5a1      	b.n	416b22 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x226>
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
  416fde:	4618      	mov	r0, r3
  416fe0:	2101      	movs	r1, #1
  416fe2:	f007 fb49 	bl	41e678 <_Z9ei_callocjj>
  416fe6:	2301      	movs	r3, #1
  416fe8:	4681      	mov	r9, r0
  416fea:	930d      	str	r3, [sp, #52]	@ 0x34
  416fec:	e4be      	b.n	41696c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x70>
  416fee:	f8dd 9020 	ldr.w	r9, [sp, #32]
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
  416ff2:	490d      	ldr	r1, [pc, #52]	@ (417028 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x72c>)
  416ff4:	480d      	ldr	r0, [pc, #52]	@ (41702c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x730>)
  416ff6:	f007 fb15 	bl	41e624 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
  416ffa:	f06f 0404 	mvn.w	r4, #4
  416ffe:	e5a8      	b.n	416b52 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x256>
  417000:	46d1      	mov	r9, sl
  417002:	e7f6      	b.n	416ff2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x6f6>
  417004:	46d9      	mov	r9, fp
  417006:	e7f4      	b.n	416ff2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x6f6>
        return EI_IMPULSE_TFLITE_ERROR;
  417008:	f06f 0402 	mvn.w	r4, #2
  41700c:	e59d      	b.n	416b4a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x24e>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
  41700e:	f06f 0408 	mvn.w	r4, #8
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
  417012:	e5a5      	b.n	416b60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x264>
	  __throw_bad_function_call();
  417014:	f013 ff56 	bl	42aec4 <_ZSt25__throw_bad_function_callv>
  417018:	0043465c 	.word	0x0043465c
  41701c:	004354e8 	.word	0x004354e8
  417020:	00434630 	.word	0x00434630
  417024:	00434940 	.word	0x00434940
  417028:	fffffc16 	.word	0xfffffc16
  41702c:	00434634 	.word	0x00434634

00417030 <main>:



int main(void) {
  417030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // int err;
    ns_core_config_t ns_core_cfg = {.api = &ns_core_V1_0_0};
  417034:	4b46      	ldr	r3, [pc, #280]	@ (417150 <main+0x120>)
int main(void) {
  417036:	b09d      	sub	sp, #116	@ 0x74
    usb_handle_t usb_handle = NULL;

    // Power configuration (mem, cache, peripherals, clock)
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
  417038:	a802      	add	r0, sp, #8
    ns_core_config_t ns_core_cfg = {.api = &ns_core_V1_0_0};
  41703a:	9302      	str	r3, [sp, #8]
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
  41703c:	f00e fd2a 	bl	425a94 <ns_core_init>
  417040:	2800      	cmp	r0, #0
  417042:	d172      	bne.n	41712a <main+0xfa>
    NS_TRY(ns_power_config(&ns_pwr_config), "Power config failed.\n");
  417044:	4843      	ldr	r0, [pc, #268]	@ (417154 <main+0x124>)
  417046:	f00e fd57 	bl	425af8 <ns_power_config>
  41704a:	2800      	cmp	r0, #0
  41704c:	d179      	bne.n	417142 <main+0x112>
    // am_bsp_low_power_init();
    am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_LOW_POWER);
  41704e:	2001      	movs	r0, #1
  417050:	f00e fefe 	bl	425e50 <am_hal_pwrctrl_mcu_mode_select>

    // ns_itm_printf_enable();
    ns_interrupt_master_enable();
  417054:	f011 fbf2 	bl	42883c <am_hal_interrupt_master_enable>

    elapsedTime = 0;
  417058:	2200      	movs	r2, #0
  41705a:	4b3f      	ldr	r3, [pc, #252]	@ (417158 <main+0x128>)
    NS_TRY(ns_timer_init(&ei_tickTimer), "Timer Init Failed\n");
  41705c:	483f      	ldr	r0, [pc, #252]	@ (41715c <main+0x12c>)
    elapsedTime = 0;
  41705e:	601a      	str	r2, [r3, #0]
    NS_TRY(ns_timer_init(&ei_tickTimer), "Timer Init Failed\n");
  417060:	f00e fe34 	bl	425ccc <ns_timer_init>
  417064:	2800      	cmp	r0, #0
  417066:	d166      	bne.n	417136 <main+0x106>
	: _Function_base()
  417068:	2400      	movs	r4, #0

    // EI Init
    signal_t signal_fomo;
    
    // signal_fomo.total_length = impulse_517398_0.input_width * impulse_517398_0.input_height;
    signal_fomo.total_length = impulse_522036_0.input_width * impulse_522036_0.input_height;
  41706a:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
  41706e:	4a3c      	ldr	r2, [pc, #240]	@ (417160 <main+0x130>)
  417070:	483c      	ldr	r0, [pc, #240]	@ (417164 <main+0x134>)
  417072:	920a      	str	r2, [sp, #40]	@ 0x28
  417074:	4a3c      	ldr	r2, [pc, #240]	@ (417168 <main+0x138>)
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  417076:	ab03      	add	r3, sp, #12
  417078:	af0a      	add	r7, sp, #40	@ 0x28
	: _Function_base()
  41707a:	940b      	str	r4, [sp, #44]	@ 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
  41707c:	f10d 0814 	add.w	r8, sp, #20
  417080:	e9cd 0207 	strd	r0, r2, [sp, #28]
  417084:	9109      	str	r1, [sp, #36]	@ 0x24
    signal_fomo.get_data = &ei_get_data;
    ei_impulse_result_t result_fomo = { 0 };
  417086:	2248      	movs	r2, #72	@ 0x48
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  417088:	e897 0003 	ldmia.w	r7, {r0, r1}
  41708c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
  417090:	e888 0003 	stmia.w	r8, {r0, r1}
  417094:	4638      	mov	r0, r7
  417096:	f009 fe05 	bl	420ca4 <memset>
  41709a:	2664      	movs	r6, #100	@ 0x64
  41709c:	f240 2a29 	movw	sl, #553	@ 0x229
  4170a0:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 417184 <main+0x154>
    ei_learning_block_t block = handle->impulse->learning_blocks[0];
  4170a4:	f8d9 4010 	ldr.w	r4, [r9, #16]
  4170a8:	f894 2064 	ldrb.w	r2, [r4, #100]	@ 0x64
  4170ac:	f8d4 b058 	ldr.w	fp, [r4, #88]	@ 0x58
  4170b0:	3a02      	subs	r2, #2
  4170b2:	b2d2      	uxtb	r2, r2
  4170b4:	2a09      	cmp	r2, #9
  4170b6:	e9db 1002 	ldrd	r1, r0, [fp, #8]
/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse, ei_learning_block_t block_ptr) {

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
  4170ba:	d829      	bhi.n	417110 <main+0xe0>
  4170bc:	fa2a f202 	lsr.w	r2, sl, r2
  4170c0:	07d3      	lsls	r3, r2, #31
  4170c2:	d525      	bpl.n	417110 <main+0xe0>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
    }

    // visual anomaly also needs to go through the normal path
    if (impulse->has_anomaly){
  4170c4:	f894 5071 	ldrb.w	r5, [r4, #113]	@ 0x71
  4170c8:	bb15      	cbnz	r5, 417110 <main+0xe0>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

        // Check if we have tflite graph
    if (block_ptr.infer_fn != run_nn_inference) {
  4170ca:	4b28      	ldr	r3, [pc, #160]	@ (41716c <main+0x13c>)
  4170cc:	4299      	cmp	r1, r3
  4170ce:	d11f      	bne.n	417110 <main+0xe0>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)block_ptr.config;
    if (block_config->quantized != 1) {
  4170d0:	7d02      	ldrb	r2, [r0, #20]
  4170d2:	b1ea      	cbz	r2, 417110 <main+0xe0>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
  4170d4:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
  4170d8:	2a01      	cmp	r2, #1
  4170da:	d119      	bne.n	417110 <main+0xe0>
  4170dc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
  4170de:	4b24      	ldr	r3, [pc, #144]	@ (417170 <main+0x140>)
  4170e0:	6892      	ldr	r2, [r2, #8]
  4170e2:	429a      	cmp	r2, r3
  4170e4:	d114      	bne.n	417110 <main+0xe0>
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    memset(result, 0, sizeof(ei_impulse_result_t));
  4170e6:	2248      	movs	r2, #72	@ 0x48
  4170e8:	4629      	mov	r1, r5
  4170ea:	4638      	mov	r0, r7
  4170ec:	f009 fdda 	bl	420ca4 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, impulse->learning_blocks[0].config, debug);
  4170f0:	f8db 300c 	ldr.w	r3, [fp, #12]
  4170f4:	463a      	mov	r2, r7
  4170f6:	4641      	mov	r1, r8
  4170f8:	4620      	mov	r0, r4
  4170fa:	9500      	str	r5, [sp, #0]
  4170fc:	f7ff fbfe 	bl	4168fc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>

    // ns_lp_printf("Starting FOMO\n");
    // Test inference on canned data
    for (int i = 0; i < 100; i++) {
        EI_IMPULSE_ERROR err = run_classifier(&impulse_handle_522036_0, &signal_fomo, &result_fomo, debug_nn);
        if (err != EI_IMPULSE_OK) {
  417100:	b970      	cbnz	r0, 417120 <main+0xf0>
    for (int i = 0; i < 100; i++) {
  417102:	3e01      	subs	r6, #1
  417104:	d1ce      	bne.n	4170a4 <main+0x74>
    //     if (!bb_found) {
    //         ns_lp_printf("    No objects found\n");
    //     }
    // } 
    while(1) {
        ns_deep_sleep();
  417106:	f00e fd13 	bl	425b30 <ns_deep_sleep>
  41710a:	f00e fd11 	bl	425b30 <ns_deep_sleep>
    while(1) {
  41710e:	e7fa      	b.n	417106 <main+0xd6>
  417110:	2300      	movs	r3, #0
  417112:	463a      	mov	r2, r7
  417114:	4641      	mov	r1, r8
  417116:	4648      	mov	r0, r9
  417118:	f7fe fa1a 	bl	415550 <process_impulse.part.0>
        if (err != EI_IMPULSE_OK) {
  41711c:	2800      	cmp	r0, #0
  41711e:	d0f0      	beq.n	417102 <main+0xd2>
            ns_lp_printf("ERR: Failed to run classifier (%d)\n", err);
  417120:	4601      	mov	r1, r0
  417122:	4814      	ldr	r0, [pc, #80]	@ (417174 <main+0x144>)
  417124:	f011 f98e 	bl	428444 <am_util_stdio_printf>
            while(1);
  417128:	e7fe      	b.n	417128 <main+0xf8>
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
  41712a:	4813      	ldr	r0, [pc, #76]	@ (417178 <main+0x148>)
  41712c:	f011 f98a 	bl	428444 <am_util_stdio_printf>
  417130:	f00e fce0 	bl	425af4 <ns_core_fail_loop>
  417134:	e786      	b.n	417044 <main+0x14>
    NS_TRY(ns_timer_init(&ei_tickTimer), "Timer Init Failed\n");
  417136:	4811      	ldr	r0, [pc, #68]	@ (41717c <main+0x14c>)
  417138:	f011 f984 	bl	428444 <am_util_stdio_printf>
  41713c:	f00e fcda 	bl	425af4 <ns_core_fail_loop>
  417140:	e792      	b.n	417068 <main+0x38>
    NS_TRY(ns_power_config(&ns_pwr_config), "Power config failed.\n");
  417142:	480f      	ldr	r0, [pc, #60]	@ (417180 <main+0x150>)
  417144:	f011 f97e 	bl	428444 <am_util_stdio_printf>
  417148:	f00e fcd4 	bl	425af4 <ns_core_fail_loop>
  41714c:	e77f      	b.n	41704e <main+0x1e>
  41714e:	bf00      	nop
  417150:	0043c750 	.word	0x0043c750
  417154:	00435a94 	.word	0x00435a94
  417158:	2000aa50 	.word	0x2000aa50
  41715c:	2000a000 	.word	0x2000a000
  417160:	0041512d 	.word	0x0041512d
  417164:	00415485 	.word	0x00415485
  417168:	00415171 	.word	0x00415171
  41716c:	00417189 	.word	0x00417189
  417170:	00415215 	.word	0x00415215
  417174:	004349a0 	.word	0x004349a0
  417178:	00434960 	.word	0x00434960
  41717c:	0043498c 	.word	0x0043498c
  417180:	00434974 	.word	0x00434974
  417184:	20013e6c 	.word	0x20013e6c

00417188 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
{
  417188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41718c:	b0a9      	sub	sp, #164	@ 0xa4
  41718e:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
  417190:	4617      	mov	r7, r2
  417192:	469b      	mov	fp, r3
  417194:	4604      	mov	r4, r0
  417196:	460d      	mov	r5, r1
  417198:	f89d 90d4 	ldrb.w	r9, [sp, #212]	@ 0xd4
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
  41719c:	f8d6 a018 	ldr.w	sl, [r6, #24]
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
  4171a0:	f10d 0880 	add.w	r8, sp, #128	@ 0x80
    uint64_t ctx_start_us = ei_read_timer_us();
  4171a4:	f007 fa36 	bl	41e614 <_Z16ei_read_timer_usv>
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
  4171a8:	ab18      	add	r3, sp, #96	@ 0x60
  4171aa:	9301      	str	r3, [sp, #4]
  4171ac:	4630      	mov	r0, r6
  4171ae:	ab10      	add	r3, sp, #64	@ 0x40
  4171b0:	f8cd 8000 	str.w	r8, [sp]
  4171b4:	aa08      	add	r2, sp, #32
  4171b6:	a906      	add	r1, sp, #24
  4171b8:	f7fe f992 	bl	4154e0 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0>
    if (init_res != EI_IMPULSE_OK) {
  4171bc:	4603      	mov	r3, r0
  4171be:	b118      	cbz	r0, 4171c8 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x40>
}
  4171c0:	4618      	mov	r0, r3
  4171c2:	b029      	add	sp, #164	@ 0xa4
  4171c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
  4171c8:	f894 0054 	ldrb.w	r0, [r4, #84]	@ 0x54
  4171cc:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
  4171d0:	465a      	mov	r2, fp
    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
  4171d2:	4403      	add	r3, r0
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
  4171d4:	9300      	str	r3, [sp, #0]
  4171d6:	4628      	mov	r0, r5
  4171d8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  4171da:	a908      	add	r1, sp, #32
  4171dc:	f7fe fc18 	bl	415a10 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
    if (input_res != EI_IMPULSE_OK) {
  4171e0:	4603      	mov	r3, r0
  4171e2:	2800      	cmp	r0, #0
  4171e4:	d1ec      	bne.n	4171c0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x38>
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
  4171e6:	e9dd b206 	ldrd	fp, r2, [sp, #24]
    if (graph_config->model_invoke() != kTfLiteOk) {
  4171ea:	69b3      	ldr	r3, [r6, #24]
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
  4171ec:	9205      	str	r2, [sp, #20]
    if (graph_config->model_invoke() != kTfLiteOk) {
  4171ee:	689b      	ldr	r3, [r3, #8]
  4171f0:	4798      	blx	r3
  4171f2:	2800      	cmp	r0, #0
  4171f4:	d14f      	bne.n	417296 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x10e>
    uint64_t ctx_end_us = ei_read_timer_us();
  4171f6:	f007 fa0d 	bl	41e614 <_Z16ei_read_timer_usv>
    result->timing.classification_us = ctx_end_us - ctx_start_us;
  4171fa:	9a05      	ldr	r2, [sp, #20]
  4171fc:	ebb0 000b 	subs.w	r0, r0, fp
  417200:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
  417202:	eb61 0102 	sbc.w	r1, r1, r2
  417206:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
    result->timing.classification = (int)(result->timing.classification_us / 1000);
  41720a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
  41720e:	2300      	movs	r3, #0
  417210:	f7f9 fc06 	bl	410a20 <__aeabi_ldivmod>
  417214:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
  417216:	6218      	str	r0, [r3, #32]
    if (debug) {
  417218:	f1b9 0f00 	cmp.w	r9, #0
  41721c:	d136      	bne.n	41728c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x104>
    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
  41721e:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
  417220:	ab18      	add	r3, sp, #96	@ 0x60
  417222:	9300      	str	r3, [sp, #0]
  417224:	9201      	str	r2, [sp, #4]
  417226:	4643      	mov	r3, r8
  417228:	4631      	mov	r1, r6
  41722a:	4620      	mov	r0, r4
  41722c:	f8cd 9008 	str.w	r9, [sp, #8]
  417230:	aa10      	add	r2, sp, #64	@ 0x40
  417232:	f7ff f887 	bl	416344 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
    if (fill_res != EI_IMPULSE_OK) {
  417236:	4603      	mov	r3, r0
  417238:	b168      	cbz	r0, 417256 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xce>
    if (result->copy_output) {
  41723a:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
  41723c:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
  417240:	b9b2      	cbnz	r2, 417270 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xe8>
    graph_config->model_reset(ei_aligned_free);
  417242:	f8da 200c 	ldr.w	r2, [sl, #12]
  417246:	4815      	ldr	r0, [pc, #84]	@ (41729c <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x114>)
  417248:	9305      	str	r3, [sp, #20]
  41724a:	4790      	blx	r2
    if (run_res != EI_IMPULSE_OK) {
  41724c:	9b05      	ldr	r3, [sp, #20]
}
  41724e:	4618      	mov	r0, r3
  417250:	b029      	add	sp, #164	@ 0xa4
  417252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
  417256:	9005      	str	r0, [sp, #20]
  417258:	f007 f9da 	bl	41e610 <_Z29ei_run_impulse_check_canceledv>
    if (result->copy_output) {
  41725c:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
        return EI_IMPULSE_CANCELED;
  41725e:	3002      	adds	r0, #2
  417260:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
  417264:	9b05      	ldr	r3, [sp, #20]
  417266:	bf08      	it	eq
  417268:	f06f 0301 	mvneq.w	r3, #1
  41726c:	2a00      	cmp	r2, #0
  41726e:	d0e8      	beq.n	417242 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xba>
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
  417270:	f894 203c 	ldrb.w	r2, [r4, #60]	@ 0x3c
  417274:	a810      	add	r0, sp, #64	@ 0x40
  417276:	443a      	add	r2, r7
  417278:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
  41727c:	9305      	str	r3, [sp, #20]
  41727e:	f7fe fcbd 	bl	415bfc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
        if (output_res != EI_IMPULSE_OK) {
  417282:	9b05      	ldr	r3, [sp, #20]
  417284:	2800      	cmp	r0, #0
  417286:	d0dc      	beq.n	417242 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xba>
            return output_res;
  417288:	4603      	mov	r3, r0
  41728a:	e799      	b.n	4171c0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x38>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
  41728c:	4601      	mov	r1, r0
  41728e:	4804      	ldr	r0, [pc, #16]	@ (4172a0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x118>)
  417290:	f007 f9c8 	bl	41e624 <_Z9ei_printfPKcz>
  417294:	e7c3      	b.n	41721e <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x96>
        return EI_IMPULSE_TFLITE_ERROR;
  417296:	f06f 0302 	mvn.w	r3, #2
  41729a:	e7ce      	b.n	41723a <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xb2>
  41729c:	0041540d 	.word	0x0041540d
  4172a0:	00434940 	.word	0x00434940

004172a4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
    }


    
  4172a4:	b570      	push	{r4, r5, r6, lr}
        : impulse(impulse)
  4172a6:	2600      	movs	r6, #0
  4172a8:	4c05      	ldr	r4, [pc, #20]	@ (4172c0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1c>)
  4172aa:	4d06      	ldr	r5, [pc, #24]	@ (4172c4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x20>)
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
  4172ac:	2004      	movs	r0, #4
        : impulse(impulse)
  4172ae:	6065      	str	r5, [r4, #4]
  4172b0:	7326      	strb	r6, [r4, #12]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
  4172b2:	f007 f9df 	bl	41e674 <_Z9ei_mallocj>
            dsp_handles[ix] = nullptr;
  4172b6:	6006      	str	r6, [r0, #0]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
  4172b8:	60a0      	str	r0, [r4, #8]
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
        : state(impulse), impulse(impulse) {};
  4172ba:	6125      	str	r5, [r4, #16]
  4172bc:	bd70      	pop	{r4, r5, r6, pc}
  4172be:	bf00      	nop
  4172c0:	20013e6c 	.word	0x20013e6c
  4172c4:	00435aa4 	.word	0x00435aa4

004172c8 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
  4172c8:	b570      	push	{r4, r5, r6, lr}
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
  4172ca:	4d10      	ldr	r5, [pc, #64]	@ (41730c <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x44>)
        ei_free(dsp_handles);
  4172cc:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
  4172d0:	f892 203c 	ldrb.w	r2, [r2, #60]	@ 0x3c
  4172d4:	b182      	cbz	r2, 4172f8 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x30>
  4172d6:	2400      	movs	r4, #0
                dsp_handles[ix] = nullptr;
  4172d8:	4626      	mov	r6, r4
            if (dsp_handles[ix] != nullptr) {
  4172da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4172de:	b180      	cbz	r0, 417302 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x3a>
                delete dsp_handles[ix];
  4172e0:	6803      	ldr	r3, [r0, #0]
  4172e2:	68db      	ldr	r3, [r3, #12]
  4172e4:	4798      	blx	r3
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
  4172e6:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
                dsp_handles[ix] = nullptr;
  4172ea:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
  4172ee:	f892 203c 	ldrb.w	r2, [r2, #60]	@ 0x3c
  4172f2:	3401      	adds	r4, #1
  4172f4:	42a2      	cmp	r2, r4
  4172f6:	d8f0      	bhi.n	4172da <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x12>
  4172f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ei_free(dsp_handles);
  4172fc:	4618      	mov	r0, r3
  4172fe:	f007 b9c9 	b.w	41e694 <_Z7ei_freePv>
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
  417302:	3401      	adds	r4, #1
  417304:	4294      	cmp	r4, r2
  417306:	d3e8      	bcc.n	4172da <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x12>
  417308:	e7f6      	b.n	4172f8 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x30>
  41730a:	bf00      	nop
  41730c:	20013e6c 	.word	0x20013e6c

00417310 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
  417310:	7f10      	ldrb	r0, [r2, #28]
                                               int32_t* act_max) {
  417312:	b430      	push	{r4, r5}
  417314:	2807      	cmp	r0, #7
  417316:	d052      	beq.n	4173be <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xae>
  417318:	2809      	cmp	r0, #9
  41731a:	d012      	beq.n	417342 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
  41731c:	2803      	cmp	r0, #3
  41731e:	d14b      	bne.n	4173b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>
  if (output->type == kTfLiteUInt8) {
  417320:	24ff      	movs	r4, #255	@ 0xff
  417322:	2000      	movs	r0, #0
  if (activation == kTfLiteActRelu) {
  417324:	2901      	cmp	r1, #1
  417326:	ed92 7a02 	vldr	s14, [r2, #8]
  41732a:	68d5      	ldr	r5, [r2, #12]
  41732c:	d012      	beq.n	417354 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x44>
  } else if (activation == kTfLiteActRelu6) {
  41732e:	2903      	cmp	r1, #3
  417330:	d049      	beq.n	4173c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb6>
  } else if (activation == kTfLiteActReluN1To1) {
  417332:	2902      	cmp	r1, #2
  417334:	d02c      	beq.n	417390 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x80>
    *act_min = qmin;
  417336:	6018      	str	r0, [r3, #0]
    *act_max = qmax;
  417338:	9b02      	ldr	r3, [sp, #8]
  41733a:	601c      	str	r4, [r3, #0]
  return kTfLiteOk;
  41733c:	2000      	movs	r0, #0
    TF_LITE_ENSURE(context, false);
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
  41733e:	bc30      	pop	{r4, r5}
  417340:	4770      	bx	lr
  if (activation == kTfLiteActRelu) {
  417342:	2901      	cmp	r1, #1
  if (output->type == kTfLiteUInt8) {
  417344:	f04f 047f 	mov.w	r4, #127	@ 0x7f
  417348:	f06f 007f 	mvn.w	r0, #127	@ 0x7f
  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
  41734c:	ed92 7a02 	vldr	s14, [r2, #8]
  417350:	68d5      	ldr	r5, [r2, #12]
  if (activation == kTfLiteActRelu) {
  417352:	d1ec      	bne.n	41732e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1e>
  const float tmp = TfLiteRound(f / scale);
  417354:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 417440 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x130>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
  417358:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 417444 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x134>
  41735c:	fef8 7a67 	vrinta.f32	s15, s15
  417360:	eef4 7ac7 	vcmpe.f32	s15, s14
  417364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  417368:	db26      	blt.n	4173b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>
  41736a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 417448 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x138>
  41736e:	eef4 7ac7 	vcmpe.f32	s15, s14
  417372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  417376:	d81f      	bhi.n	4173b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>
  q = zero_point + static_cast<int32_t>(tmp);
  417378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  41737c:	ee17 2a90 	vmov	r2, s15
  417380:	442a      	add	r2, r5
      if (__a < __b)
  417382:	4282      	cmp	r2, r0
  417384:	bfb8      	it	lt
  417386:	4602      	movlt	r2, r0
    *act_min = std::max(qmin, tmp_q);
  417388:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
  41738a:	9b02      	ldr	r3, [sp, #8]
  41738c:	601c      	str	r4, [r3, #0]
  41738e:	e7d5      	b.n	41733c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2c>
  const float tmp = TfLiteRound(f / scale);
  417390:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
  417394:	eec6 7a07 	vdiv.f32	s15, s12, s14
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
  417398:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 417444 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x134>
  41739c:	feb8 7a67 	vrinta.f32	s14, s15
  4173a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
  4173a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4173a8:	db06      	blt.n	4173b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>
  4173aa:	ed9f 6a27 	vldr	s12, [pc, #156]	@ 417448 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x138>
  4173ae:	eeb4 7ac6 	vcmpe.f32	s14, s12
  4173b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4173b6:	d93c      	bls.n	417432 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x122>
}
  4173b8:	bc30      	pop	{r4, r5}
  if (output->type == kTfLiteUInt8) {
  4173ba:	2001      	movs	r0, #1
}
  4173bc:	4770      	bx	lr
  if (output->type == kTfLiteUInt8) {
  4173be:	f647 74ff 	movw	r4, #32767	@ 0x7fff
  4173c2:	4822      	ldr	r0, [pc, #136]	@ (41744c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x13c>)
  4173c4:	e7ae      	b.n	417324 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x14>
  const float tmp = TfLiteRound(f / scale);
  4173c6:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 417440 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x130>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
  4173ca:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 417444 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x134>
  4173ce:	fef8 7a67 	vrinta.f32	s15, s15
  4173d2:	eef4 7ae6 	vcmpe.f32	s15, s13
  4173d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4173da:	dbed      	blt.n	4173b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>
  4173dc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 417448 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x138>
  4173e0:	eef4 7ac6 	vcmpe.f32	s15, s12
  4173e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4173e8:	d8e6      	bhi.n	4173b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>
  q = zero_point + static_cast<int32_t>(tmp);
  4173ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  const float tmp = TfLiteRound(f / scale);
  4173ee:	eef1 5a08 	vmov.f32	s11, #24	@ 0x40c00000  6.0
  q = zero_point + static_cast<int32_t>(tmp);
  4173f2:	ee17 2a90 	vmov	r2, s15
  const float tmp = TfLiteRound(f / scale);
  4173f6:	eec5 7a87 	vdiv.f32	s15, s11, s14
  4173fa:	fef8 7a67 	vrinta.f32	s15, s15
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
  4173fe:	eef4 7ae6 	vcmpe.f32	s15, s13
  q = zero_point + static_cast<int32_t>(tmp);
  417402:	442a      	add	r2, r5
  417404:	4282      	cmp	r2, r0
  417406:	bfb8      	it	lt
  417408:	4602      	movlt	r2, r0
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
  41740a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    *act_min = std::max(qmin, tmp_q);
  41740e:	601a      	str	r2, [r3, #0]
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
  417410:	dbd2      	blt.n	4173b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>
  417412:	eef4 7ac6 	vcmpe.f32	s15, s12
  417416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41741a:	d8cd      	bhi.n	4173b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa8>
  q = zero_point + static_cast<int32_t>(tmp);
  41741c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  417420:	ee17 3a90 	vmov	r3, s15
  417424:	442b      	add	r3, r5
      if (__b < __a)
  417426:	42a3      	cmp	r3, r4
  417428:	bfa8      	it	ge
  41742a:	4623      	movge	r3, r4
    *act_max = std::min(qmax, tmp_q);
  41742c:	9a02      	ldr	r2, [sp, #8]
  41742e:	6013      	str	r3, [r2, #0]
  417430:	e784      	b.n	41733c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2c>
  q = zero_point + static_cast<int32_t>(tmp);
  417432:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  417436:	eef1 7a67 	vneg.f32	s15, s15
  41743a:	ee17 2a10 	vmov	r2, s14
  41743e:	e7dc      	b.n	4173fa <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xea>
  417440:	00000000 	.word	0x00000000
  417444:	cf000000 	.word	0xcf000000
  417448:	4f000000 	.word	0x4f000000
  41744c:	ffff8000 	.word	0xffff8000

00417450 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    int num_channels) {
  417450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417454:	ed2d 8b02 	vpush	{d8}
  417458:	b08f      	sub	sp, #60	@ 0x3c
  41745a:	e9dd e41c 	ldrd	lr, r4, [sp, #112]	@ 0x70
  41745e:	9403      	str	r4, [sp, #12]
  417460:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
  417462:	4615      	mov	r5, r2
  417464:	e9dd a81f 	ldrd	sl, r8, [sp, #124]	@ 0x7c
  417468:	e9dd 2b1a 	ldrd	r2, fp, [sp, #104]	@ 0x68
  41746c:	e9dd 7c21 	ldrd	r7, ip, [sp, #132]	@ 0x84
  417470:	9402      	str	r4, [sp, #8]
  417472:	460c      	mov	r4, r1
  417474:	4619      	mov	r1, r3
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
  417476:	7823      	ldrb	r3, [r4, #0]
  417478:	2b01      	cmp	r3, #1
  41747a:	d005      	beq.n	417488 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x38>
  41747c:	2001      	movs	r0, #1
}
  41747e:	b00f      	add	sp, #60	@ 0x3c
  417480:	ecbd 8b02 	vpop	{d8}
  417484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
  417488:	782b      	ldrb	r3, [r5, #0]
  41748a:	2b01      	cmp	r3, #1
  41748c:	d1f6      	bne.n	41747c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c>
  const auto* affine_quantization =
  41748e:	686b      	ldr	r3, [r5, #4]
  TF_LITE_ENSURE(context, affine_quantization);
  417490:	2b00      	cmp	r3, #0
  417492:	d0f3      	beq.n	41747c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
  417494:	4606      	mov	r6, r0
  417496:	6818      	ldr	r0, [r3, #0]
  417498:	9004      	str	r0, [sp, #16]
  41749a:	2800      	cmp	r0, #0
  41749c:	d0ee      	beq.n	41747c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c>
  const bool is_per_channel = affine_quantization->scale->size > 1;
  41749e:	6800      	ldr	r0, [r0, #0]
  if (is_per_channel) {
  4174a0:	2801      	cmp	r0, #1
  4174a2:	dd6d      	ble.n	417580 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x130>
    TF_LITE_ENSURE(context,
  4174a4:	f894 901c 	ldrb.w	r9, [r4, #28]
  4174a8:	f1b9 0f09 	cmp.w	r9, #9
  4174ac:	d002      	beq.n	4174b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x64>
  4174ae:	f1b9 0f07 	cmp.w	r9, #7
  4174b2:	d1e3      	bne.n	41747c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE(context,
  4174b4:	f895 901c 	ldrb.w	r9, [r5, #28]
  4174b8:	f1b9 0f09 	cmp.w	r9, #9
  4174bc:	d002      	beq.n	4174c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x74>
  4174be:	f1b9 0f12 	cmp.w	r9, #18
  4174c2:	d1db      	bne.n	41747c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
  4174c4:	4560      	cmp	r0, ip
  4174c6:	d1d9      	bne.n	41747c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c>
    TF_LITE_ENSURE_EQ(
  4174c8:	6898      	ldr	r0, [r3, #8]
  4174ca:	696b      	ldr	r3, [r5, #20]
  4174cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4174d0:	6840      	ldr	r0, [r0, #4]
  4174d2:	4560      	cmp	r0, ip
  4174d4:	d1d2      	bne.n	41747c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c>
    const double effective_output_scale = static_cast<double>(input_scale) *
  4174d6:	ed94 6a02 	vldr	s12, [r4, #8]
                                          static_cast<double>(output_scale);
  4174da:	ed92 7a02 	vldr	s14, [r2, #8]
  4174de:	9b04      	ldr	r3, [sp, #16]
  4174e0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
  4174e4:	f103 0904 	add.w	r9, r3, #4
  for (int i = 0; i < num_channels; ++i) {
  4174e8:	2300      	movs	r3, #0
    const double effective_output_scale = static_cast<double>(input_scale) *
  4174ea:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
  4174ee:	f1a8 0804 	sub.w	r8, r8, #4
  for (int i = 0; i < num_channels; ++i) {
  4174f2:	9301      	str	r3, [sp, #4]
  4174f4:	a80d      	add	r0, sp, #52	@ 0x34
  4174f6:	ab0c      	add	r3, sp, #48	@ 0x30
  4174f8:	e9cd 6405 	strd	r6, r4, [sp, #20]
  4174fc:	e9cd 5107 	strd	r5, r1, [sp, #28]
  417500:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  417504:	ee86 8b07 	vdiv.f64	d8, d6, d7
  417508:	46c2      	mov	sl, r8
  41750a:	2400      	movs	r4, #0
  41750c:	4665      	mov	r5, ip
  41750e:	461e      	mov	r6, r3
  417510:	4680      	mov	r8, r0
  417512:	e9cd 2e09 	strd	r2, lr, [sp, #36]	@ 0x24
  417516:	3f04      	subs	r7, #4
  417518:	9304      	str	r3, [sp, #16]
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
  41751a:	ecb9 0a01 	vldmia	r9!, {s0}
    const double filter_scale = static_cast<double>(scale);
  41751e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
  417522:	4641      	mov	r1, r8
  417524:	4630      	mov	r0, r6
  417526:	ee28 0b00 	vmul.f64	d0, d8, d0
  41752a:	f000 f8dd 	bl	4176e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
  41752e:	990c      	ldr	r1, [sp, #48]	@ 0x30
  for (int i = 0; i < num_channels; ++i) {
  417530:	3401      	adds	r4, #1
    per_channel_multiplier[i] = significand;
  417532:	f84a 1f04 	str.w	r1, [sl, #4]!
    per_channel_shift[i] = channel_shift;
  417536:	990d      	ldr	r1, [sp, #52]	@ 0x34
  for (int i = 0; i < num_channels; ++i) {
  417538:	42a5      	cmp	r5, r4
    per_channel_shift[i] = channel_shift;
  41753a:	f847 1f04 	str.w	r1, [r7, #4]!
  for (int i = 0; i < num_channels; ++i) {
  41753e:	d1ec      	bne.n	41751a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0xca>
  417540:	e9dd 6405 	ldrd	r6, r4, [sp, #20]
  417544:	e9dd 5107 	ldrd	r5, r1, [sp, #28]
  417548:	e9dd 2e09 	ldrd	r2, lr, [sp, #36]	@ 0x24
  41754c:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  if (input->type == kTfLiteUInt8) {
  417550:	7f23      	ldrb	r3, [r4, #28]
  417552:	2b03      	cmp	r3, #3
  417554:	d054      	beq.n	417600 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1b0>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
  417556:	2b09      	cmp	r3, #9
  417558:	d850      	bhi.n	4175fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1ac>
  41755a:	f44f 7022 	mov.w	r0, #648	@ 0x288
  41755e:	40d8      	lsrs	r0, r3
  417560:	f010 0001 	ands.w	r0, r0, #1
  417564:	d08b      	beq.n	41747e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
  417566:	4630      	mov	r0, r6
  417568:	f89b 1000 	ldrb.w	r1, [fp]
  41756c:	9b02      	ldr	r3, [sp, #8]
  41756e:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
}
  417572:	b00f      	add	sp, #60	@ 0x3c
  417574:	ecbd 8b02 	vpop	{d8}
  417578:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
  41757c:	f7ff bec8 	b.w	417310 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  for (int i = 0; i < num_channels; ++i) {
  417580:	f1bc 0f00 	cmp.w	ip, #0
  const float input_scale = input->params.scale;
  417584:	ed94 6a02 	vldr	s12, [r4, #8]
  const float output_scale = output->params.scale;
  417588:	ed92 7a02 	vldr	s14, [r2, #8]
  for (int i = 0; i < num_channels; ++i) {
  41758c:	dde0      	ble.n	417550 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x100>
                                          static_cast<double>(output_scale);
  41758e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    const double effective_output_scale = static_cast<double>(input_scale) *
  417592:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
  417596:	3f04      	subs	r7, #4
  417598:	a80d      	add	r0, sp, #52	@ 0x34
  41759a:	ab0c      	add	r3, sp, #48	@ 0x30
  41759c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  4175a0:	9605      	str	r6, [sp, #20]
  4175a2:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
  4175a6:	463e      	mov	r6, r7
  for (int i = 0; i < num_channels; ++i) {
  4175a8:	f04f 0900 	mov.w	r9, #0
  4175ac:	ee86 8b07 	vdiv.f64	d8, d6, d7
  4175b0:	4664      	mov	r4, ip
  4175b2:	461f      	mov	r7, r3
  4175b4:	4682      	mov	sl, r0
  4175b6:	e9cd 2e08 	strd	r2, lr, [sp, #32]
  4175ba:	9d04      	ldr	r5, [sp, #16]
  4175bc:	f1a8 0804 	sub.w	r8, r8, #4
  4175c0:	9104      	str	r1, [sp, #16]
    const double filter_scale = static_cast<double>(scale);
  4175c2:	ed95 0a01 	vldr	s0, [r5, #4]
  4175c6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
  4175ca:	4651      	mov	r1, sl
  4175cc:	4638      	mov	r0, r7
  4175ce:	ee28 0b00 	vmul.f64	d0, d8, d0
  4175d2:	f000 f889 	bl	4176e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
  4175d6:	990c      	ldr	r1, [sp, #48]	@ 0x30
  for (int i = 0; i < num_channels; ++i) {
  4175d8:	f109 0901 	add.w	r9, r9, #1
    per_channel_multiplier[i] = significand;
  4175dc:	f848 1f04 	str.w	r1, [r8, #4]!
    per_channel_shift[i] = channel_shift;
  4175e0:	990d      	ldr	r1, [sp, #52]	@ 0x34
  for (int i = 0; i < num_channels; ++i) {
  4175e2:	454c      	cmp	r4, r9
    per_channel_shift[i] = channel_shift;
  4175e4:	f846 1f04 	str.w	r1, [r6, #4]!
  for (int i = 0; i < num_channels; ++i) {
  4175e8:	d1eb      	bne.n	4175c2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x172>
  4175ea:	e9dd 6405 	ldrd	r6, r4, [sp, #20]
  4175ee:	e9dd 2e08 	ldrd	r2, lr, [sp, #32]
  4175f2:	9d07      	ldr	r5, [sp, #28]
  4175f4:	9904      	ldr	r1, [sp, #16]
  4175f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
  4175fa:	e7a9      	b.n	417550 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x100>
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
  4175fc:	2000      	movs	r0, #0
  4175fe:	e73e      	b.n	41747e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e>
                                     static_cast<double>(filter->params.scale);
  417600:	ed95 6a02 	vldr	s12, [r5, #8]
  const double input_product_scale = static_cast<double>(input->params.scale) *
  417604:	edd4 6a02 	vldr	s13, [r4, #8]
  if (bias) {
  417608:	b1c9      	cbz	r1, 41763e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x1ee>
    const double bias_scale = static_cast<double>(bias->params.scale);
  41760a:	ed91 7a02 	vldr	s14, [r1, #8]
                                     static_cast<double>(filter->params.scale);
  41760e:	eeb7 4ac6 	vcvt.f64.f32	d4, s12
  const double input_product_scale = static_cast<double>(input->params.scale) *
  417612:	eeb7 3ae6 	vcvt.f64.f32	d3, s13
    const double bias_scale = static_cast<double>(bias->params.scale);
  417616:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    const double output_scale = static_cast<double>(output->params.scale);
  41761a:	ed92 5a02 	vldr	s10, [r2, #8]
    const double scale_diff = std::abs(input_product_scale - bias_scale);
  41761e:	ee93 7b04 	vfnms.f64	d7, d3, d4
    const double output_scale = static_cast<double>(output->params.scale);
  417622:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
  417626:	eeb0 7bc7 	vabs.f64	d7, d7
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
  41762a:	ed9f 2b13 	vldr	d2, [pc, #76]	@ 417678 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x228>
  41762e:	ee87 4b05 	vdiv.f64	d4, d7, d5
  417632:	eeb4 4bc2 	vcmpe.f64	d4, d2
  417636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41763a:	f73f af1f 	bgt.w	41747c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c>
      static_cast<double>(input->params.scale * filter->params.scale);
  41763e:	ee66 6a86 	vmul.f32	s13, s13, s12
  TF_LITE_ENSURE(context, input_product_scale >= 0);
  417642:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  417646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41764a:	f53f af17 	bmi.w	41747c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2c>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
  41764e:	ed92 0a02 	vldr	s0, [r2, #8]
  const double input_product_scale =
  417652:	eeb7 7ae6 	vcvt.f64.f32	d7, s13
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
  417656:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
  41765a:	a90d      	add	r1, sp, #52	@ 0x34
  41765c:	4670      	mov	r0, lr
  41765e:	ee87 0b00 	vdiv.f64	d0, d7, d0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
  417662:	9204      	str	r2, [sp, #16]
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
  417664:	f000 f840 	bl	4176e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
  417668:	990d      	ldr	r1, [sp, #52]	@ 0x34
  41766a:	9a03      	ldr	r2, [sp, #12]
  41766c:	4249      	negs	r1, r1
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
  41766e:	7f23      	ldrb	r3, [r4, #28]
    *shift = -exponent;
  417670:	6011      	str	r1, [r2, #0]
  417672:	9a04      	ldr	r2, [sp, #16]
  417674:	e76f      	b.n	417556 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x106>
  417676:	bf00      	nop
  417678:	47ae147b 	.word	0x47ae147b
  41767c:	3f947ae1 	.word	0x3f947ae1

00417680 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
  417680:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
  417682:	6949      	ldr	r1, [r1, #20]
  417684:	6940      	ldr	r0, [r0, #20]
  417686:	f006 ffa1 	bl	41e5cc <TfLiteIntArrayEqual>
}
  41768a:	3800      	subs	r0, #0
  41768c:	bf18      	it	ne
  41768e:	2001      	movne	r0, #1
  417690:	bd08      	pop	{r3, pc}
  417692:	bf00      	nop

00417694 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
  for (int i = 0; i < num_elements; i += 2) {
  417694:	2900      	cmp	r1, #0
  417696:	dd23      	ble.n	4176e0 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x4c>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
  417698:	7803      	ldrb	r3, [r0, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
  41769a:	2901      	cmp	r1, #1
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
  41769c:	f343 0303 	sbfx	r3, r3, #0, #4
  4176a0:	7013      	strb	r3, [r2, #0]
    if (i + 1 == num_elements) break;
  4176a2:	d01d      	beq.n	4176e0 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x4c>
                             int8_t* dst_buffer) {
  4176a4:	b530      	push	{r4, r5, lr}
  for (int i = 0; i < num_elements; i += 2) {
  4176a6:	2300      	movs	r3, #0
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
  4176a8:	4604      	mov	r4, r0
  4176aa:	1c55      	adds	r5, r2, #1
  4176ac:	e009      	b.n	4176c2 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x2e>
  4176ae:	f810 c00c 	ldrb.w	ip, [r0, ip]
    if (i + 1 == num_elements) break;
  4176b2:	f10e 0e03 	add.w	lr, lr, #3
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
  4176b6:	f34c 0c03 	sbfx	ip, ip, #0, #4
    if (i + 1 == num_elements) break;
  4176ba:	4571      	cmp	r1, lr
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
  4176bc:	f802 c003 	strb.w	ip, [r2, r3]
    if (i + 1 == num_elements) break;
  4176c0:	d00d      	beq.n	4176de <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x4a>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
  4176c2:	f994 c000 	ldrsb.w	ip, [r4]
  4176c6:	469e      	mov	lr, r3
  4176c8:	ea4f 1c2c 	mov.w	ip, ip, asr #4
  4176cc:	f805 c003 	strb.w	ip, [r5, r3]
  for (int i = 0; i < num_elements; i += 2) {
  4176d0:	3302      	adds	r3, #2
  4176d2:	4299      	cmp	r1, r3
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
  4176d4:	ea4f 0c63 	mov.w	ip, r3, asr #1
  4176d8:	eb00 0463 	add.w	r4, r0, r3, asr #1
  for (int i = 0; i < num_elements; i += 2) {
  4176dc:	dce7      	bgt.n	4176ae <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x1a>
  }
}
  4176de:	bd30      	pop	{r4, r5, pc}
  4176e0:	4770      	bx	lr
  4176e2:	bf00      	nop
  4176e4:	0000      	movs	r0, r0
	...

004176e8 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
  4176e8:	eeb5 0b40 	vcmp.f64	d0, #0.0
  4176ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                        int* shift) {
  4176f0:	b538      	push	{r3, r4, r5, lr}
  4176f2:	4605      	mov	r5, r0
  4176f4:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
  4176f6:	d103      	bne.n	417700 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x18>
    *quantized_multiplier = 0;
  4176f8:	2300      	movs	r3, #0
  4176fa:	6003      	str	r3, [r0, #0]
    *shift = 0;
  4176fc:	600b      	str	r3, [r1, #0]
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
  4176fe:	bd38      	pop	{r3, r4, r5, pc}
  const double q = std::frexp(double_multiplier, shift);
  417700:	4608      	mov	r0, r1
  417702:	f007 fd0d 	bl	41f120 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
  417706:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 417758 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x70>
  41770a:	ee20 0b07 	vmul.f64	d0, d0, d7
  41770e:	feb8 7b40 	vrinta.f64	d7, d0
  417712:	ec51 0b17 	vmov	r0, r1, d7
  417716:	f00d ff79 	bl	42560c <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1LL << 31));
  41771a:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
  41771e:	f04f 0c00 	mov.w	ip, #0
  417722:	4586      	cmp	lr, r0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
  417724:	4603      	mov	r3, r0
  417726:	4602      	mov	r2, r0
  TFLITE_CHECK(q_fixed <= (1LL << 31));
  417728:	eb7c 0001 	sbcs.w	r0, ip, r1
  41772c:	db10      	blt.n	417750 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x68>
  if (q_fixed == (1LL << 31)) {
  41772e:	4561      	cmp	r1, ip
  417730:	bf08      	it	eq
  417732:	4573      	cmpeq	r3, lr
    ++*shift;
  417734:	6820      	ldr	r0, [r4, #0]
  if (q_fixed == (1LL << 31)) {
  417736:	d103      	bne.n	417740 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x58>
    q_fixed /= 2;
  417738:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
    ++*shift;
  41773c:	3001      	adds	r0, #1
  41773e:	6020      	str	r0, [r4, #0]
  if (*shift < -31) {
  417740:	301f      	adds	r0, #31
    *shift = 0;
  417742:	bfb7      	itett	lt
  417744:	2200      	movlt	r2, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
  417746:	4613      	movge	r3, r2
    *shift = 0;
  417748:	4613      	movlt	r3, r2
  41774a:	6022      	strlt	r2, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
  41774c:	602b      	str	r3, [r5, #0]
}
  41774e:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_CHECK(q_fixed <= (1LL << 31));
  417750:	f007 fd22 	bl	41f198 <abort>
  417754:	f3af 8000 	nop.w
  417758:	00000000 	.word	0x00000000
  41775c:	41e00000 	.word	0x41e00000

00417760 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:
}

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
  TFLITE_CHECK_LT(double_multiplier, 1.);
  417760:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
  417764:	eeb4 0bc6 	vcmpe.f64	d0, d6
  417768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                         int* left_shift) {
  41776c:	b570      	push	{r4, r5, r6, lr}
  41776e:	b082      	sub	sp, #8
  TFLITE_CHECK_LT(double_multiplier, 1.);
  417770:	d533      	bpl.n	4177da <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x7a>
  TFLITE_CHECK_GT(double_multiplier, 0.);
  417772:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
  417776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41777a:	dd2e      	ble.n	4177da <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x7a>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
  41777c:	4605      	mov	r5, r0
  const double q = std::frexp(double_multiplier, shift);
  41777e:	a801      	add	r0, sp, #4
  417780:	460c      	mov	r4, r1
  417782:	f007 fccd 	bl	41f120 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
  417786:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 4177e0 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x80>
  41778a:	ee20 0b07 	vmul.f64	d0, d0, d7
  41778e:	feb8 7b40 	vrinta.f64	d7, d0
  417792:	ec51 0b17 	vmov	r0, r1, d7
  417796:	f00d ff39 	bl	42560c <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1LL << 31));
  41779a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
  41779e:	2200      	movs	r2, #0
  4177a0:	4584      	cmp	ip, r0
  4177a2:	eb72 0301 	sbcs.w	r3, r2, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
  4177a6:	4606      	mov	r6, r0
  TFLITE_CHECK(q_fixed <= (1LL << 31));
  4177a8:	db17      	blt.n	4177da <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x7a>
  if (q_fixed == (1LL << 31)) {
  4177aa:	4291      	cmp	r1, r2
  4177ac:	bf08      	it	eq
  4177ae:	4560      	cmpeq	r0, ip
    ++*shift;
  4177b0:	9b01      	ldr	r3, [sp, #4]
  if (q_fixed == (1LL << 31)) {
  4177b2:	d103      	bne.n	4177bc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x5c>
    q_fixed /= 2;
  4177b4:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
    ++*shift;
  4177b8:	3301      	adds	r3, #1
  4177ba:	9301      	str	r3, [sp, #4]
  if (*shift < -31) {
  4177bc:	f113 0f1f 	cmn.w	r3, #31
  4177c0:	db05      	blt.n	4177ce <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x6e>
  TFLITE_CHECK_LE(shift, 0);
  4177c2:	2b00      	cmp	r3, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
  4177c4:	602e      	str	r6, [r5, #0]
  TFLITE_CHECK_LE(shift, 0);
  4177c6:	dc08      	bgt.n	4177da <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x7a>
  *left_shift = shift;
  4177c8:	6023      	str	r3, [r4, #0]
}
  4177ca:	b002      	add	sp, #8
  4177cc:	bd70      	pop	{r4, r5, r6, pc}
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
  4177ce:	2200      	movs	r2, #0
  4177d0:	4613      	mov	r3, r2
  4177d2:	602a      	str	r2, [r5, #0]
  *left_shift = shift;
  4177d4:	6023      	str	r3, [r4, #0]
}
  4177d6:	b002      	add	sp, #8
  4177d8:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_CHECK_LT(double_multiplier, 1.);
  4177da:	f007 fcdd 	bl	41f198 <abort>
  4177de:	bf00      	nop
  4177e0:	00000000 	.word	0x00000000
  4177e4:	41e00000 	.word	0x41e00000

004177e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
      0) {
    input_beta_real_multiplier = max_real_multiplier;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier =
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
  4177e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  4177ec:	40c3      	lsrs	r3, r0
  4177ee:	ee07 3a90 	vmov	s15, r3
  4177f2:	ee20 0b01 	vmul.f64	d0, d0, d1
  4177f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
  4177fa:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 417880 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x98>
  4177fe:	ee27 0b00 	vmul.f64	d0, d7, d0
  417802:	eeb4 0bc6 	vcmpe.f64	d0, d6
  417806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                              int32_t* quantized_multiplier, int* left_shift) {
  41780a:	b570      	push	{r4, r5, r6, lr}
  41780c:	460d      	mov	r5, r1
  41780e:	4614      	mov	r4, r2
  417810:	dc2f      	bgt.n	417872 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x8a>
  TFLITE_CHECK_GT(double_multiplier, 1.);
  417812:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
  417816:	eeb4 0bc7 	vcmpe.f64	d0, d7
  41781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41781e:	dd2b      	ble.n	417878 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x90>
  const double q = std::frexp(double_multiplier, shift);
  417820:	4620      	mov	r0, r4
  417822:	f007 fc7d 	bl	41f120 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
  417826:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 417888 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xa0>
  41782a:	ee20 0b07 	vmul.f64	d0, d0, d7
  41782e:	feb8 7b40 	vrinta.f64	d7, d0
  417832:	ec51 0b17 	vmov	r0, r1, d7
  417836:	f00d fee9 	bl	42560c <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1LL << 31));
  41783a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
  41783e:	2200      	movs	r2, #0
  417840:	4584      	cmp	ip, r0
  417842:	eb72 0301 	sbcs.w	r3, r2, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
  417846:	4606      	mov	r6, r0
  TFLITE_CHECK(q_fixed <= (1LL << 31));
  417848:	db16      	blt.n	417878 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x90>
  if (q_fixed == (1LL << 31)) {
  41784a:	4291      	cmp	r1, r2
  41784c:	bf08      	it	eq
  41784e:	4560      	cmpeq	r0, ip
    ++*shift;
  417850:	6823      	ldr	r3, [r4, #0]
  if (q_fixed == (1LL << 31)) {
  417852:	d103      	bne.n	41785c <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x74>
    q_fixed /= 2;
  417854:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
    ++*shift;
  417858:	3301      	adds	r3, #1
  41785a:	6023      	str	r3, [r4, #0]
  if (*shift < -31) {
  41785c:	f113 0f1f 	cmn.w	r3, #31
  417860:	db03      	blt.n	41786a <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x82>
  TFLITE_CHECK_GE(*left_shift, 0);
  417862:	2b00      	cmp	r3, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
  417864:	602e      	str	r6, [r5, #0]
  TFLITE_CHECK_GE(*left_shift, 0);
  417866:	db07      	blt.n	417878 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x90>
                       max_real_multiplier);
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
                                   quantized_multiplier, left_shift);
}
  417868:	bd70      	pop	{r4, r5, r6, pc}
    *shift = 0;
  41786a:	2300      	movs	r3, #0
  41786c:	6023      	str	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
  41786e:	602b      	str	r3, [r5, #0]
}
  417870:	bd70      	pop	{r4, r5, r6, pc}
	return __b;
  417872:	eeb0 0b46 	vmov.f64	d0, d6
  417876:	e7d3      	b.n	417820 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x38>
  TFLITE_CHECK_GT(double_multiplier, 1.);
  417878:	f007 fc8e 	bl	41f198 <abort>
  41787c:	f3af 8000 	nop.w
  417880:	ffc00000 	.word	0xffc00000
  417884:	41dfffff 	.word	0x41dfffff
  417888:	00000000 	.word	0x00000000
  41788c:	41e00000 	.word	0x41e00000

00417890 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
  417890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
      (1LL << (total_signed_bits - input_integer_bits)) /
  417894:	2701      	movs	r7, #1
  417896:	2600      	movs	r6, #0
      1.0 * ((1 << input_integer_bits) - 1) *
  417898:	463b      	mov	r3, r7
      (1LL << (total_signed_bits - input_integer_bits)) /
  41789a:	463c      	mov	r4, r7
  41789c:	4635      	mov	r5, r6
  41789e:	1a12      	subs	r2, r2, r0
      1.0 * ((1 << input_integer_bits) - 1) *
  4178a0:	4083      	lsls	r3, r0
      (1LL << (total_signed_bits - input_integer_bits)) /
  4178a2:	ea54 250d 	orrs.w	r5, r4, sp, lsl #8
      1.0 * ((1 << input_integer_bits) - 1) *
  4178a6:	3b01      	subs	r3, #1
  4178a8:	ee07 3a90 	vmov	s15, r3
                         int total_signed_bits) {
  4178ac:	ed2d 8b02 	vpush	{d8}
  4178b0:	4688      	mov	r8, r1
      1.0 * ((1 << input_integer_bits) - 1) *
  4178b2:	4620      	mov	r0, r4
  4178b4:	4629      	mov	r1, r5
  4178b6:	eeb8 8be7 	vcvt.f64.s32	d8, s15
  4178ba:	f7f9 f883 	bl	4109c4 <__aeabi_l2d>
  4178be:	ec41 0b17 	vmov	d7, r0, r1
      (1LL << input_left_shift);
  4178c2:	4638      	mov	r0, r7
  4178c4:	4631      	mov	r1, r6
  4178c6:	ea50 810d 			@ <UNDEFINED> instruction: 0xea50810d
      1.0 * ((1 << input_integer_bits) - 1) *
  4178ca:	ee28 8b07 	vmul.f64	d8, d8, d7
      (1LL << (total_signed_bits - input_integer_bits)) /
  4178ce:	f7f9 f879 	bl	4109c4 <__aeabi_l2d>
  4178d2:	ec41 0b16 	vmov	d6, r0, r1
  const double max_input_rescaled =
  4178d6:	ee88 7b06 	vdiv.f64	d7, d8, d6
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
#endif  // TFLITE_EMULATE_FLOAT
}
  4178da:	ecbd 8b02 	vpop	{d8}
  return static_cast<int>(std::floor(max_input_rescaled));
  4178de:	febb 7b47 	vrintm.f64	d7, d7
}
  4178e2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
  4178e6:	ee17 0a90 	vmov	r0, s15
  4178ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4178ee:	bf00      	nop

004178f0 <_ZN6tflite7InitAddEP13TfLiteContextPKcj>:
}

}  // namespace

void* InitAdd(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  4178f0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  4178f2:	b10b      	cbz	r3, 4178f8 <_ZN6tflite7InitAddEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
  4178f4:	213c      	movs	r1, #60	@ 0x3c
  4178f6:	4718      	bx	r3
void* InitAdd(TfLiteContext* context, const char* buffer, size_t length) {
  4178f8:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  4178fa:	f007 fc4d 	bl	41f198 <abort>
  4178fe:	bf00      	nop

00417900 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus PrepareAdd(TfLiteContext* context, TfLiteNode* node) {
  417900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  417904:	ed2d 8b04 	vpush	{d8-d9}
  TFLITE_DCHECK(node->user_data != nullptr);
  417908:	68cb      	ldr	r3, [r1, #12]
TfLiteStatus PrepareAdd(TfLiteContext* context, TfLiteNode* node) {
  41790a:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->user_data != nullptr);
  41790c:	2b00      	cmp	r3, #0
  41790e:	f000 80d2 	beq.w	417ab6 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1b6>
  TFLITE_DCHECK(node->builtin_data != nullptr);
  417912:	690b      	ldr	r3, [r1, #16]
  417914:	460d      	mov	r5, r1
  417916:	2b00      	cmp	r3, #0
  417918:	f000 80cd 	beq.w	417ab6 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1b6>

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
  return reinterpret_cast<MicroContext*>(context->impl_);
  41791c:	6884      	ldr	r4, [r0, #8]

  MicroContext* micro_context = GetMicroContext(context);

  TfLiteTensor* input1 =
  41791e:	4680      	mov	r8, r0
      micro_context->AllocateTempInputTensor(node, kInputTensor1);
  417920:	6823      	ldr	r3, [r4, #0]
  417922:	2200      	movs	r2, #0
  417924:	4620      	mov	r0, r4
  417926:	699b      	ldr	r3, [r3, #24]
  417928:	4798      	blx	r3
  TF_LITE_ENSURE(context, input1 != nullptr);
  41792a:	4606      	mov	r6, r0
  41792c:	2800      	cmp	r0, #0
  41792e:	d040      	beq.n	4179b2 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xb2>
  TfLiteTensor* input2 =
      micro_context->AllocateTempInputTensor(node, kInputTensor2);
  417930:	6823      	ldr	r3, [r4, #0]
  417932:	2201      	movs	r2, #1
  417934:	4629      	mov	r1, r5
  417936:	4620      	mov	r0, r4
  417938:	699b      	ldr	r3, [r3, #24]
  41793a:	4798      	blx	r3
  TF_LITE_ENSURE(context, input2 != nullptr);
  41793c:	4607      	mov	r7, r0
  41793e:	2800      	cmp	r0, #0
  417940:	d037      	beq.n	4179b2 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xb2>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kOutputTensor);
  417942:	6823      	ldr	r3, [r4, #0]
  417944:	2200      	movs	r2, #0
  417946:	4629      	mov	r1, r5
  417948:	4620      	mov	r0, r4
  41794a:	69db      	ldr	r3, [r3, #28]
  41794c:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
  41794e:	4681      	mov	r9, r0
  417950:	b378      	cbz	r0, 4179b2 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xb2>

  if (input1->type == kTfLiteInt16) {
  417952:	7f33      	ldrb	r3, [r6, #28]
  417954:	2b07      	cmp	r3, #7
  417956:	d105      	bne.n	417964 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x64>
    TF_LITE_ENSURE_EQ(context, input1->params.zero_point, 0);
  417958:	68f3      	ldr	r3, [r6, #12]
  41795a:	bb53      	cbnz	r3, 4179b2 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xb2>
    TF_LITE_ENSURE_EQ(context, input2->params.zero_point, 0);
  41795c:	68fb      	ldr	r3, [r7, #12]
  41795e:	bb43      	cbnz	r3, 4179b2 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xb2>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
  417960:	68c3      	ldr	r3, [r0, #12]
  417962:	bb33      	cbnz	r3, 4179b2 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xb2>
  }

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
  417964:	e9d5 a503 	ldrd	sl, r5, [r5, #12]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
  417968:	4639      	mov	r1, r7
  41796a:	4630      	mov	r0, r6
  41796c:	f7ff fe88 	bl	417680 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
  417970:	f899 301c 	ldrb.w	r3, [r9, #28]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
  417974:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
  417978:	2b09      	cmp	r3, #9
  data->requires_broadcast = !HaveSameShapes(input1, input2);
  41797a:	f88a 0000 	strb.w	r0, [sl]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
  41797e:	d06c      	beq.n	417a5a <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x15a>
  417980:	2b07      	cmp	r3, #7
  417982:	d01c      	beq.n	4179be <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xbe>
  } else if (output->type == kTfLiteFloat32) {
  417984:	2b01      	cmp	r3, #1
  417986:	d076      	beq.n	417a76 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x176>

  TF_LITE_ENSURE_STATUS(
      CalculateOpData(context, params, input1, input2, output, data));

  micro_context->DeallocateTempTfLiteTensor(input1);
  417988:	6823      	ldr	r3, [r4, #0]
  41798a:	4631      	mov	r1, r6
  41798c:	4620      	mov	r0, r4
  41798e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  417990:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input2);
  417992:	6823      	ldr	r3, [r4, #0]
  417994:	4639      	mov	r1, r7
  417996:	4620      	mov	r0, r4
  417998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41799a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
  41799c:	6823      	ldr	r3, [r4, #0]
  41799e:	4620      	mov	r0, r4
  4179a0:	4649      	mov	r1, r9
  4179a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  4179a4:	4798      	blx	r3

  return kTfLiteOk;
  4179a6:	2000      	movs	r0, #0
}
  4179a8:	b002      	add	sp, #8
  4179aa:	ecbd 8b04 	vpop	{d8-d9}
  4179ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE(context, input1 != nullptr);
  4179b2:	2001      	movs	r0, #1
}
  4179b4:	b002      	add	sp, #8
  4179b6:	ecbd 8b04 	vpop	{d8-d9}
  4179ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    data->output_offset = output->params.zero_point;
  4179be:	ed9f 4b40 	vldr	d4, [pc, #256]	@ 417ac0 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1c0>
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
  4179c2:	220f      	movs	r2, #15
    data->input1_offset = -input1->params.zero_point;
  4179c4:	68f3      	ldr	r3, [r6, #12]
  4179c6:	425b      	negs	r3, r3
  4179c8:	f8ca 3028 	str.w	r3, [sl, #40]	@ 0x28
    data->input2_offset = -input2->params.zero_point;
  4179cc:	68fb      	ldr	r3, [r7, #12]
  4179ce:	425b      	negs	r3, r3
  4179d0:	f8ca 302c 	str.w	r3, [sl, #44]	@ 0x2c
    data->output_offset = output->params.zero_point;
  4179d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
      if (__a < __b)
  4179d8:	ed96 7a02 	vldr	s14, [r6, #8]
  4179dc:	ed97 5a02 	vldr	s10, [r7, #8]
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
  4179e0:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
  4179e4:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
  4179e8:	ed99 6a02 	vldr	s12, [r9, #8]
        2 * static_cast<double>(
  4179ec:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
  4179f0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
                std::max(input1->params.scale, input2->params.scale));
  4179f4:	ee37 7b07 	vadd.f64	d7, d7, d7
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
  4179f8:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
  4179fc:	ee26 6b04 	vmul.f64	d6, d6, d4
    const double real_input2_multiplier =
  417a00:	ee85 9b07 	vdiv.f64	d9, d5, d7
    const double real_output_multiplier =
  417a04:	ee87 8b06 	vdiv.f64	d8, d7, d6
    QuantizeMultiplierSmallerThanOneExp(
  417a08:	ee80 0b07 	vdiv.f64	d0, d0, d7
    data->output_offset = output->params.zero_point;
  417a0c:	f8ca 3030 	str.w	r3, [sl, #48]	@ 0x30
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
  417a10:	f8ca 2024 	str.w	r2, [sl, #36]	@ 0x24
    QuantizeMultiplierSmallerThanOneExp(
  417a14:	f10a 0104 	add.w	r1, sl, #4
  417a18:	f10a 0014 	add.w	r0, sl, #20
  417a1c:	f7ff fea0 	bl	417760 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    QuantizeMultiplierSmallerThanOneExp(
  417a20:	eeb0 0b49 	vmov.f64	d0, d9
  417a24:	f10a 0108 	add.w	r1, sl, #8
  417a28:	f10a 0018 	add.w	r0, sl, #24
  417a2c:	f7ff fe98 	bl	417760 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    QuantizeMultiplierSmallerThanOneExp(
  417a30:	f10a 0120 	add.w	r1, sl, #32
  417a34:	f10a 001c 	add.w	r0, sl, #28
  417a38:	eeb0 0b48 	vmov.f64	d0, d8
  417a3c:	f7ff fe90 	bl	417760 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
  417a40:	f10a 0310 	add.w	r3, sl, #16
  417a44:	7829      	ldrb	r1, [r5, #0]
  417a46:	4640      	mov	r0, r8
  417a48:	9300      	str	r3, [sp, #0]
  417a4a:	464a      	mov	r2, r9
  417a4c:	f10a 030c 	add.w	r3, sl, #12
  417a50:	f7ff fc5e 	bl	417310 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  417a54:	2800      	cmp	r0, #0
  417a56:	d097      	beq.n	417988 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x88>
  417a58:	e7ac      	b.n	4179b4 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xb4>
    data->input1_offset = -input1->params.zero_point;
  417a5a:	68f3      	ldr	r3, [r6, #12]
    data->output_offset = output->params.zero_point;
  417a5c:	ed9f 4b1a 	vldr	d4, [pc, #104]	@ 417ac8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1c8>
    data->input1_offset = -input1->params.zero_point;
  417a60:	425b      	negs	r3, r3
  417a62:	f8ca 3028 	str.w	r3, [sl, #40]	@ 0x28
    data->input2_offset = -input2->params.zero_point;
  417a66:	68fb      	ldr	r3, [r7, #12]
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
  417a68:	2214      	movs	r2, #20
    data->input2_offset = -input2->params.zero_point;
  417a6a:	425b      	negs	r3, r3
  417a6c:	f8ca 302c 	str.w	r3, [sl, #44]	@ 0x2c
    data->output_offset = output->params.zero_point;
  417a70:	f8d9 300c 	ldr.w	r3, [r9, #12]
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
  417a74:	e7b0      	b.n	4179d8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xd8>
    CalculateActivationRange(params->activation,
  417a76:	782b      	ldrb	r3, [r5, #0]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
  417a78:	2b01      	cmp	r3, #1
  417a7a:	d00e      	beq.n	417a9a <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x19a>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
  417a7c:	2b03      	cmp	r3, #3
  417a7e:	d013      	beq.n	417aa8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1a8>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
  417a80:	2b02      	cmp	r3, #2
    *activation_min = -1;
    *activation_max = 1;
  417a82:	bf0b      	itete	eq
  417a84:	f04f 527e 	moveq.w	r2, #1065353216	@ 0x3f800000
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
  417a88:	f46f 0300 	mvnne.w	r3, #8388608	@ 0x800000
    *activation_min = -1;
  417a8c:	4b10      	ldreq	r3, [pc, #64]	@ (417ad0 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1d0>)
    *activation_max = std::numeric_limits<T>::max();
  417a8e:	4a11      	ldrne	r2, [pc, #68]	@ (417ad4 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1d4>)
    *activation_min = std::numeric_limits<T>::lowest();
  417a90:	f8ca 3034 	str.w	r3, [sl, #52]	@ 0x34
    *activation_max = std::numeric_limits<T>::max();
  417a94:	f8ca 2038 	str.w	r2, [sl, #56]	@ 0x38
  TF_LITE_ENSURE_STATUS(
  417a98:	e776      	b.n	417988 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x88>
    *activation_min = 0;
  417a9a:	2300      	movs	r3, #0
    *activation_max = std::numeric_limits<T>::max();
  417a9c:	4a0d      	ldr	r2, [pc, #52]	@ (417ad4 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1d4>)
    *activation_min = 0;
  417a9e:	f8ca 3034 	str.w	r3, [sl, #52]	@ 0x34
    *activation_max = std::numeric_limits<T>::max();
  417aa2:	f8ca 2038 	str.w	r2, [sl, #56]	@ 0x38
  417aa6:	e76f      	b.n	417988 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x88>
    *activation_min = 0;
  417aa8:	2300      	movs	r3, #0
    *activation_max = 6;
  417aaa:	4a0b      	ldr	r2, [pc, #44]	@ (417ad8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1d8>)
    *activation_min = 0;
  417aac:	f8ca 3034 	str.w	r3, [sl, #52]	@ 0x34
    *activation_max = 6;
  417ab0:	f8ca 2038 	str.w	r2, [sl, #56]	@ 0x38
  417ab4:	e768      	b.n	417988 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x88>
  TFLITE_DCHECK(node->user_data != nullptr);
  417ab6:	f007 fb6f 	bl	41f198 <abort>
  417aba:	bf00      	nop
  417abc:	f3af 8000 	nop.w
  417ac0:	00000000 	.word	0x00000000
  417ac4:	40e00000 	.word	0x40e00000
  417ac8:	00000000 	.word	0x00000000
  417acc:	41300000 	.word	0x41300000
  417ad0:	bf800000 	.word	0xbf800000
  417ad4:	7f7fffff 	.word	0x7f7fffff
  417ad8:	40c00000 	.word	0x40c00000

00417adc <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
void EvalAddFloat(TfLiteContext* context, TfLiteNode* node,
  417adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  417ae0:	ed2d 8b02 	vpush	{d8}
  if (data->requires_broadcast) {
  417ae4:	7806      	ldrb	r6, [r0, #0]
void EvalAddFloat(TfLiteContext* context, TfLiteNode* node,
  417ae6:	460d      	mov	r5, r1
  417ae8:	4614      	mov	r4, r2
  417aea:	461f      	mov	r7, r3
  SetActivationParams(data->output_activation_min_f32,
  417aec:	ed90 8a0d 	vldr	s16, [r0, #52]	@ 0x34
                      data->output_activation_max_f32, &op_params);
  417af0:	edd0 8a0e 	vldr	s17, [r0, #56]	@ 0x38
void EvalAddFloat(TfLiteContext* context, TfLiteNode* node,
  417af4:	b0e5      	sub	sp, #404	@ 0x194
  if (data->requires_broadcast) {
  417af6:	2e00      	cmp	r6, #0
  417af8:	f000 819e 	beq.w	417e38 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x35c>
        op_params, tflite::micro::GetTensorShape(input1),
  417afc:	a83c      	add	r0, sp, #240	@ 0xf0
  417afe:	f004 fd57 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
  417b02:	2d00      	cmp	r5, #0
  417b04:	f000 8422 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  return reinterpret_cast<const T*>(tensor->data.raw);
  417b08:	682b      	ldr	r3, [r5, #0]
        tflite::micro::GetTensorShape(input2),
  417b0a:	4621      	mov	r1, r4
  417b0c:	a836      	add	r0, sp, #216	@ 0xd8
  417b0e:	9300      	str	r3, [sp, #0]
  417b10:	f004 fd4e 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  417b14:	2c00      	cmp	r4, #0
  417b16:	f000 8419 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  return reinterpret_cast<const T*>(tensor->data.raw);
  417b1a:	6823      	ldr	r3, [r4, #0]
        tflite::micro::GetTensorShape(output),
  417b1c:	4639      	mov	r1, r7
  417b1e:	a830      	add	r0, sp, #192	@ 0xc0
  417b20:	9301      	str	r3, [sp, #4]
  417b22:	f004 fd45 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  417b26:	2f00      	cmp	r7, #0
  417b28:	f000 8410 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
 private:
  // For use only by ExtendedShape(), written to guarantee (return-value) copy
  // elision in C++17.
  // This creates a shape padded to the desired size with the specified value.
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
      : size_(new_shape_size) {
  417b2c:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  417b2e:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
  return reinterpret_cast<T*>(tensor->data.raw);
  417b30:	6839      	ldr	r1, [r7, #0]
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  417b32:	429a      	cmp	r2, r3
  417b34:	9102      	str	r1, [sp, #8]
      : size_(new_shape_size) {
  417b36:	9348      	str	r3, [sp, #288]	@ 0x120
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  417b38:	f300 8408 	bgt.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    const int size_increase = new_shape_size - shape.DimensionsCount();
    for (int i = 0; i < size_increase; ++i) {
  417b3c:	1a98      	subs	r0, r3, r2
  417b3e:	d00d      	beq.n	417b5c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x80>
    dims_[i] = val;
  417b40:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  417b42:	4298      	cmp	r0, r3
    dims_[i] = val;
  417b44:	9349      	str	r3, [sp, #292]	@ 0x124
    for (int i = 0; i < size_increase; ++i) {
  417b46:	d009      	beq.n	417b5c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x80>
  417b48:	2802      	cmp	r0, #2
    dims_[i] = val;
  417b4a:	934a      	str	r3, [sp, #296]	@ 0x128
    for (int i = 0; i < size_increase; ++i) {
  417b4c:	d006      	beq.n	417b5c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x80>
  417b4e:	2803      	cmp	r0, #3
    dims_[i] = val;
  417b50:	934b      	str	r3, [sp, #300]	@ 0x12c
    for (int i = 0; i < size_increase; ++i) {
  417b52:	d003      	beq.n	417b5c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x80>
  417b54:	2804      	cmp	r0, #4
    dims_[i] = val;
  417b56:	934c      	str	r3, [sp, #304]	@ 0x130
    for (int i = 0; i < size_increase; ++i) {
  417b58:	f040 83f8 	bne.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
      SetDim(i, pad_value);
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  417b5c:	ab49      	add	r3, sp, #292	@ 0x124
  417b5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  417b62:	0092      	lsls	r2, r2, #2
  417b64:	a93d      	add	r1, sp, #244	@ 0xf4
  417b66:	f7f8 fd29 	bl	4105bc <memcpy>
      : size_(new_shape_size) {
  417b6a:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  417b6c:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
      : size_(new_shape_size) {
  417b6e:	934e      	str	r3, [sp, #312]	@ 0x138
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  417b70:	429a      	cmp	r2, r3
  417b72:	f300 83eb 	bgt.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    for (int i = 0; i < size_increase; ++i) {
  417b76:	1a98      	subs	r0, r3, r2
  417b78:	d00d      	beq.n	417b96 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xba>
    dims_[i] = val;
  417b7a:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  417b7c:	4298      	cmp	r0, r3
    dims_[i] = val;
  417b7e:	934f      	str	r3, [sp, #316]	@ 0x13c
    for (int i = 0; i < size_increase; ++i) {
  417b80:	d009      	beq.n	417b96 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xba>
  417b82:	2802      	cmp	r0, #2
    dims_[i] = val;
  417b84:	9350      	str	r3, [sp, #320]	@ 0x140
    for (int i = 0; i < size_increase; ++i) {
  417b86:	d006      	beq.n	417b96 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xba>
  417b88:	2803      	cmp	r0, #3
    dims_[i] = val;
  417b8a:	9351      	str	r3, [sp, #324]	@ 0x144
    for (int i = 0; i < size_increase; ++i) {
  417b8c:	d003      	beq.n	417b96 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xba>
  417b8e:	2804      	cmp	r0, #4
    dims_[i] = val;
  417b90:	9352      	str	r3, [sp, #328]	@ 0x148
    for (int i = 0; i < size_increase; ++i) {
  417b92:	f040 83db 	bne.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  417b96:	ab4f      	add	r3, sp, #316	@ 0x13c
  417b98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  417b9c:	0092      	lsls	r2, r2, #2
  417b9e:	a937      	add	r1, sp, #220	@ 0xdc
  417ba0:	f7f8 fd0c 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  417ba4:	9b48      	ldr	r3, [sp, #288]	@ 0x120
  417ba6:	2b03      	cmp	r3, #3
  417ba8:	f340 83d0 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    return dims_[i];
  417bac:	e9dd 024b 	ldrd	r0, r2, [sp, #300]	@ 0x12c
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
                           NdArrayDesc<N>* desc_out) {
  int desc_stride = 1;
  for (int i = N - 1; i >= 0; --i) {
    desc_out->extents[i] = input_shape.Dims(i);
    desc_out->strides[i] = desc_stride;
  417bb0:	2101      	movs	r1, #1
    desc_stride *= input_shape.Dims(i);
  417bb2:	fb02 f300 	mul.w	r3, r2, r0
  417bb6:	9d4a      	ldr	r5, [sp, #296]	@ 0x128
    desc_out->strides[i] = desc_stride;
  417bb8:	9359      	str	r3, [sp, #356]	@ 0x164
    desc_stride *= input_shape.Dims(i);
  417bba:	fb05 f303 	mul.w	r3, r5, r3
    desc_out->strides[i] = desc_stride;
  417bbe:	9358      	str	r3, [sp, #352]	@ 0x160
    TFLITE_DCHECK_LT(i, size_);
  417bc0:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
    return dims_[i];
  417bc2:	9f49      	ldr	r7, [sp, #292]	@ 0x124
    TFLITE_DCHECK_LT(i, size_);
  417bc4:	2b03      	cmp	r3, #3
    desc_out->extents[i] = input_shape.Dims(i);
  417bc6:	e9cd 0256 	strd	r0, r2, [sp, #344]	@ 0x158
    desc_out->strides[i] = desc_stride;
  417bca:	925a      	str	r2, [sp, #360]	@ 0x168
    desc_out->extents[i] = input_shape.Dims(i);
  417bcc:	9555      	str	r5, [sp, #340]	@ 0x154
    desc_out->strides[i] = desc_stride;
  417bce:	915b      	str	r1, [sp, #364]	@ 0x16c
    desc_out->extents[i] = input_shape.Dims(i);
  417bd0:	9754      	str	r7, [sp, #336]	@ 0x150
  417bd2:	f340 83bb 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    return dims_[i];
  417bd6:	9b52      	ldr	r3, [sp, #328]	@ 0x148
    desc_out->strides[i] = desc_stride;
  417bd8:	9163      	str	r1, [sp, #396]	@ 0x18c
  417bda:	9951      	ldr	r1, [sp, #324]	@ 0x144
  417bdc:	9c50      	ldr	r4, [sp, #320]	@ 0x140
    desc_stride *= input_shape.Dims(i);
  417bde:	fb03 f601 	mul.w	r6, r3, r1
    desc_out->strides[i] = desc_stride;
  417be2:	9661      	str	r6, [sp, #388]	@ 0x184
    desc_stride *= input_shape.Dims(i);
  417be4:	fb04 f606 	mul.w	r6, r4, r6
    desc_out->strides[i] = desc_stride;
  417be8:	9660      	str	r6, [sp, #384]	@ 0x180
  417bea:	9e4f      	ldr	r6, [sp, #316]	@ 0x13c
    desc_out->extents[i] = input_shape.Dims(i);
  417bec:	935f      	str	r3, [sp, #380]	@ 0x17c
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
    const int extent0 = extended_input0_shape.Dims(i);
    const int extent1 = extended_input1_shape.Dims(i);
    if (extent0 != extent1) {
  417bee:	42be      	cmp	r6, r7
    desc_out->strides[i] = desc_stride;
  417bf0:	9362      	str	r3, [sp, #392]	@ 0x188
    desc_out->extents[i] = input_shape.Dims(i);
  417bf2:	915e      	str	r1, [sp, #376]	@ 0x178
  417bf4:	945d      	str	r4, [sp, #372]	@ 0x174
  417bf6:	965c      	str	r6, [sp, #368]	@ 0x170
    if (extent0 != extent1) {
  417bf8:	d008      	beq.n	417c0c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x130>
      if (extent0 == 1) {
  417bfa:	2f01      	cmp	r7, #1
  417bfc:	f000 82e6 	beq.w	4181cc <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6f0>
        desc0_out->strides[i] = 0;
        desc0_out->extents[i] = extent1;
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
  417c00:	2e01      	cmp	r6, #1
  417c02:	f040 83a3 	bne.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
        desc1_out->strides[i] = 0;
  417c06:	2600      	movs	r6, #0
        desc1_out->extents[i] = extent0;
  417c08:	975c      	str	r7, [sp, #368]	@ 0x170
        desc1_out->strides[i] = 0;
  417c0a:	9660      	str	r6, [sp, #384]	@ 0x180
    if (extent0 != extent1) {
  417c0c:	42a5      	cmp	r5, r4
  417c0e:	d008      	beq.n	417c22 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x146>
      if (extent0 == 1) {
  417c10:	2d01      	cmp	r5, #1
  417c12:	f000 82df 	beq.w	4181d4 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6f8>
        TFLITE_DCHECK_EQ(extent1, 1);
  417c16:	2c01      	cmp	r4, #1
  417c18:	f040 8398 	bne.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
        desc1_out->strides[i] = 0;
  417c1c:	2400      	movs	r4, #0
        desc1_out->extents[i] = extent0;
  417c1e:	955d      	str	r5, [sp, #372]	@ 0x174
        desc1_out->strides[i] = 0;
  417c20:	9461      	str	r4, [sp, #388]	@ 0x184
    if (extent0 != extent1) {
  417c22:	4281      	cmp	r1, r0
  417c24:	d008      	beq.n	417c38 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x15c>
      if (extent0 == 1) {
  417c26:	2801      	cmp	r0, #1
  417c28:	f000 82cc 	beq.w	4181c4 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6e8>
        TFLITE_DCHECK_EQ(extent1, 1);
  417c2c:	2901      	cmp	r1, #1
  417c2e:	f040 838d 	bne.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
        desc1_out->strides[i] = 0;
  417c32:	2100      	movs	r1, #0
        desc1_out->extents[i] = extent0;
  417c34:	905e      	str	r0, [sp, #376]	@ 0x178
        desc1_out->strides[i] = 0;
  417c36:	9162      	str	r1, [sp, #392]	@ 0x188
    if (extent0 != extent1) {
  417c38:	4293      	cmp	r3, r2
  417c3a:	d008      	beq.n	417c4e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x172>
      if (extent0 == 1) {
  417c3c:	2a01      	cmp	r2, #1
  417c3e:	f000 82bd 	beq.w	4181bc <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6e0>
        TFLITE_DCHECK_EQ(extent1, 1);
  417c42:	2b01      	cmp	r3, #1
  417c44:	f040 8382 	bne.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
        desc1_out->strides[i] = 0;
  417c48:	2300      	movs	r3, #0
        desc1_out->extents[i] = extent0;
  417c4a:	925f      	str	r2, [sp, #380]	@ 0x17c
        desc1_out->strides[i] = 0;
  417c4c:	9363      	str	r3, [sp, #396]	@ 0x18c
      : size_(new_shape_size) {
  417c4e:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  417c50:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
      : size_(new_shape_size) {
  417c52:	9342      	str	r3, [sp, #264]	@ 0x108
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  417c54:	429a      	cmp	r2, r3
  417c56:	f300 8379 	bgt.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    for (int i = 0; i < size_increase; ++i) {
  417c5a:	1a98      	subs	r0, r3, r2
  417c5c:	d00d      	beq.n	417c7a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x19e>
    dims_[i] = val;
  417c5e:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  417c60:	4298      	cmp	r0, r3
    dims_[i] = val;
  417c62:	9343      	str	r3, [sp, #268]	@ 0x10c
    for (int i = 0; i < size_increase; ++i) {
  417c64:	d009      	beq.n	417c7a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x19e>
  417c66:	2802      	cmp	r0, #2
    dims_[i] = val;
  417c68:	9344      	str	r3, [sp, #272]	@ 0x110
    for (int i = 0; i < size_increase; ++i) {
  417c6a:	d006      	beq.n	417c7a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x19e>
  417c6c:	2803      	cmp	r0, #3
    dims_[i] = val;
  417c6e:	9345      	str	r3, [sp, #276]	@ 0x114
    for (int i = 0; i < size_increase; ++i) {
  417c70:	d003      	beq.n	417c7a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x19e>
  417c72:	2804      	cmp	r0, #4
    dims_[i] = val;
  417c74:	9346      	str	r3, [sp, #280]	@ 0x118
    for (int i = 0; i < size_increase; ++i) {
  417c76:	f040 8369 	bne.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  417c7a:	ab43      	add	r3, sp, #268	@ 0x10c
  417c7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  417c80:	0092      	lsls	r2, r2, #2
  417c82:	a931      	add	r1, sp, #196	@ 0xc4
  417c84:	f7f8 fc9a 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  417c88:	f8dd 9108 	ldr.w	r9, [sp, #264]	@ 0x108
  417c8c:	f1b9 0f00 	cmp.w	r9, #0
  417c90:	f340 835c 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    return dims_[i];
  417c94:	e9dd a245 	ldrd	sl, r2, [sp, #276]	@ 0x114
  417c98:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
  417c9a:	985b      	ldr	r0, [sp, #364]	@ 0x16c
  417c9c:	9315      	str	r3, [sp, #84]	@ 0x54
  417c9e:	9b44      	ldr	r3, [sp, #272]	@ 0x110
  417ca0:	2801      	cmp	r0, #1
  417ca2:	9310      	str	r3, [sp, #64]	@ 0x40
  417ca4:	9b54      	ldr	r3, [sp, #336]	@ 0x150
  417ca6:	9305      	str	r3, [sp, #20]
  417ca8:	9b55      	ldr	r3, [sp, #340]	@ 0x154
  417caa:	9306      	str	r3, [sp, #24]
  417cac:	9b56      	ldr	r3, [sp, #344]	@ 0x158
  417cae:	9307      	str	r3, [sp, #28]
  417cb0:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
  417cb2:	930a      	str	r3, [sp, #40]	@ 0x28
  417cb4:	9b58      	ldr	r3, [sp, #352]	@ 0x160
  417cb6:	9316      	str	r3, [sp, #88]	@ 0x58
  417cb8:	9b59      	ldr	r3, [sp, #356]	@ 0x164
  417cba:	9311      	str	r3, [sp, #68]	@ 0x44
  417cbc:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
  417cbe:	9303      	str	r3, [sp, #12]
  417cc0:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
  417cc2:	9308      	str	r3, [sp, #32]
  417cc4:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
  417cc6:	9309      	str	r3, [sp, #36]	@ 0x24
  417cc8:	9b5e      	ldr	r3, [sp, #376]	@ 0x178
  417cca:	930b      	str	r3, [sp, #44]	@ 0x2c
  417ccc:	9b5f      	ldr	r3, [sp, #380]	@ 0x17c
  417cce:	930c      	str	r3, [sp, #48]	@ 0x30
  417cd0:	9b60      	ldr	r3, [sp, #384]	@ 0x180
  417cd2:	9317      	str	r3, [sp, #92]	@ 0x5c
  417cd4:	9b61      	ldr	r3, [sp, #388]	@ 0x184
  417cd6:	9312      	str	r3, [sp, #72]	@ 0x48
  417cd8:	e9dd b362 	ldrd	fp, r3, [sp, #392]	@ 0x188
  417cdc:	f040 8289 	bne.w	4181f2 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x716>
  417ce0:	1e5c      	subs	r4, r3, #1
  417ce2:	bf18      	it	ne
  417ce4:	2401      	movne	r4, #1
  417ce6:	2c00      	cmp	r4, #0
  417ce8:	f040 8283 	bne.w	4181f2 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x716>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  417cec:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  417cf0:	46a3      	mov	fp, r4
  417cf2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  417cf4:	fb02 f00a 	mul.w	r0, r2, sl
  417cf8:	fb0a f303 	mul.w	r3, sl, r3
  417cfc:	fb02 fe03 	mul.w	lr, r2, r3
  417d00:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  417d02:	4677      	mov	r7, lr
  417d04:	455b      	cmp	r3, fp
  417d06:	4625      	mov	r5, r4
  417d08:	4626      	mov	r6, r4
  417d0a:	4686      	mov	lr, r0
  417d0c:	f340 808f 	ble.w	417e2e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x352>
    TFLITE_DCHECK_LT(i, size_);
  417d10:	f1b9 0f01 	cmp.w	r9, #1
  417d14:	f000 831a 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  417d18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  417d1a:	2b00      	cmp	r3, #0
  417d1c:	dd7c      	ble.n	417e18 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x33c>
  417d1e:	f1b9 0f02 	cmp.w	r9, #2
  417d22:	f000 8313 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  417d26:	4629      	mov	r1, r5
  417d28:	4630      	mov	r0, r6
  417d2a:	46a4      	mov	ip, r4
  417d2c:	f04f 0800 	mov.w	r8, #0
  417d30:	e9cd 6518 	strd	r6, r5, [sp, #96]	@ 0x60
  417d34:	e9cd 741a 	strd	r7, r4, [sp, #104]	@ 0x68
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  417d38:	f1ba 0f00 	cmp.w	sl, #0
  417d3c:	dd5e      	ble.n	417dfc <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x320>
  417d3e:	f1b9 0f03 	cmp.w	r9, #3
  417d42:	f000 8303 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  417d46:	4666      	mov	r6, ip
  417d48:	460d      	mov	r5, r1
  417d4a:	4604      	mov	r4, r0
  417d4c:	2300      	movs	r3, #0
  417d4e:	e9cd 100e 	strd	r1, r0, [sp, #56]	@ 0x38
  417d52:	e9cd ce13 	strd	ip, lr, [sp, #76]	@ 0x4c
  417d56:	f1b9 0f04 	cmp.w	r9, #4
  417d5a:	f040 82f4 	bne.w	418346 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x86a>
  417d5e:	2101      	movs	r1, #1
  417d60:	2a00      	cmp	r2, #0
  417d62:	eb02 0001 	add.w	r0, r2, r1
  417d66:	bfb8      	it	lt
  417d68:	4608      	movlt	r0, r1
  417d6a:	9f01      	ldr	r7, [sp, #4]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  417d6c:	2100      	movs	r1, #0
  417d6e:	eb07 0e86 	add.w	lr, r7, r6, lsl #2
  417d72:	9f02      	ldr	r7, [sp, #8]
  417d74:	9004      	str	r0, [sp, #16]
  417d76:	eb07 0c85 	add.w	ip, r7, r5, lsl #2
  417d7a:	9f00      	ldr	r7, [sp, #0]
  417d7c:	eb07 0784 	add.w	r7, r7, r4, lsl #2
  417d80:	e02c      	b.n	417ddc <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x300>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  417d82:	9805      	ldr	r0, [sp, #20]
  417d84:	4558      	cmp	r0, fp
  417d86:	f340 82e1 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  417d8a:	9806      	ldr	r0, [sp, #24]
  417d8c:	4540      	cmp	r0, r8
  417d8e:	f340 82dd 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  417d92:	9807      	ldr	r0, [sp, #28]
  417d94:	4298      	cmp	r0, r3
  417d96:	f340 82d9 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  417d9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
  417d9c:	4288      	cmp	r0, r1
  417d9e:	f340 82d5 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  417da2:	9808      	ldr	r0, [sp, #32]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax<T>(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
  417da4:	ecb7 7a01 	vldmia	r7!, {s14}
  417da8:	4558      	cmp	r0, fp
  417daa:	f340 82cf 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  417dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
  417db0:	4540      	cmp	r0, r8
  417db2:	f340 82cb 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  417db6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  417db8:	4298      	cmp	r0, r3
  417dba:	f340 82c7 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  417dbe:	980c      	ldr	r0, [sp, #48]	@ 0x30
  417dc0:	4288      	cmp	r0, r1
  417dc2:	f340 82c3 	ble.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
  417dc6:	ecfe 7a01 	vldmia	lr!, {s15}
              ActivationFunctionWithMinMax<T>(
  417dca:	ee77 7a87 	vadd.f32	s15, s15, s14
  417dce:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
      if (__b < __a)
  417dd2:	fec7 7ae8 	vminnm.f32	s15, s15, s17
          output_data[Offset(extended_output_shape, b, y, x, c)] =
  417dd6:	ecec 7a01 	vstmia	ip!, {s15}
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  417dda:	3101      	adds	r1, #1
  417ddc:	9804      	ldr	r0, [sp, #16]
  417dde:	3801      	subs	r0, #1
  417de0:	9004      	str	r0, [sp, #16]
  417de2:	d1ce      	bne.n	417d82 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2a6>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  417de4:	990d      	ldr	r1, [sp, #52]	@ 0x34
  417de6:	3301      	adds	r3, #1
  417de8:	440e      	add	r6, r1
  417dea:	9903      	ldr	r1, [sp, #12]
  417dec:	459a      	cmp	sl, r3
  417dee:	4415      	add	r5, r2
  417df0:	440c      	add	r4, r1
  417df2:	dcb0      	bgt.n	417d56 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x27a>
  417df4:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	@ 0x38
  417df8:	e9dd ce13 	ldrd	ip, lr, [sp, #76]	@ 0x4c
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  417dfc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  417dfe:	f108 0801 	add.w	r8, r8, #1
  417e02:	449c      	add	ip, r3
  417e04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  417e06:	4471      	add	r1, lr
  417e08:	4418      	add	r0, r3
  417e0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  417e0c:	4543      	cmp	r3, r8
  417e0e:	dc93      	bgt.n	417d38 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x25c>
  417e10:	e9dd 6518 	ldrd	r6, r5, [sp, #96]	@ 0x60
  417e14:	e9dd 741a 	ldrd	r7, r4, [sp, #104]	@ 0x68
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  417e18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  417e1a:	f10b 0b01 	add.w	fp, fp, #1
  417e1e:	441c      	add	r4, r3
  417e20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  417e22:	443d      	add	r5, r7
  417e24:	441e      	add	r6, r3
  417e26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  417e28:	455b      	cmp	r3, fp
  417e2a:	f73f af71 	bgt.w	417d10 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x234>
}
  417e2e:	b065      	add	sp, #404	@ 0x194
  417e30:	ecbd 8b02 	vpop	{d8}
  417e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
  417e38:	a82a      	add	r0, sp, #168	@ 0xa8
  417e3a:	f004 fbb9 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  417e3e:	2d00      	cmp	r5, #0
  417e40:	f000 8284 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
                       tflite::micro::GetTensorShape(input2),
  417e44:	4621      	mov	r1, r4
  417e46:	a824      	add	r0, sp, #144	@ 0x90
  return reinterpret_cast<const T*>(tensor->data.raw);
  417e48:	682d      	ldr	r5, [r5, #0]
  417e4a:	f004 fbb1 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  417e4e:	2c00      	cmp	r4, #0
  417e50:	f000 827c 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
                       tflite::micro::GetTensorShape(output),
  417e54:	4639      	mov	r1, r7
  417e56:	a81e      	add	r0, sp, #120	@ 0x78
  return reinterpret_cast<const T*>(tensor->data.raw);
  417e58:	6824      	ldr	r4, [r4, #0]
  417e5a:	f004 fba9 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  417e5e:	2f00      	cmp	r7, #0
  417e60:	f000 8274 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    for (int i = 0; i < size_; i++) {
  417e64:	992a      	ldr	r1, [sp, #168]	@ 0xa8
  return reinterpret_cast<T*>(tensor->data.raw);
  417e66:	6838      	ldr	r0, [r7, #0]
  417e68:	2900      	cmp	r1, #0
  417e6a:	f340 81b7 	ble.w	4181dc <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x700>
  417e6e:	1e4b      	subs	r3, r1, #1
  417e70:	2b04      	cmp	r3, #4
  417e72:	f240 825f 	bls.w	418334 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x858>
  417e76:	ea4f 0e91 	mov.w	lr, r1, lsr #2
  417e7a:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  417e7e:	f1ae 0e10 	sub.w	lr, lr, #16
  417e82:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  417e86:	f10e 0e01 	add.w	lr, lr, #1
  417e8a:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  417e8e:	f04e e001 	dls	lr, lr
  417e92:	ab2b      	add	r3, sp, #172	@ 0xac
      buffer_size *= dims_data[i];
  417e94:	ecb3 5f04 	ldc	15, cr5, [r3], #16
  417e98:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  417e9c:	f00f c007 	le	lr, 417e94 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x3b8>
  417ea0:	ee36 3b10 	vmov.32	r3, d6[1]
  417ea4:	ee16 2a10 	vmov	r2, s12
  417ea8:	fb03 f202 	mul.w	r2, r3, r2
  417eac:	ee17 3b10 	vmov.32	r3, d7[0]
  417eb0:	fb03 f202 	mul.w	r2, r3, r2
  417eb4:	ee37 3b10 	vmov.32	r3, d7[1]
  417eb8:	078e      	lsls	r6, r1, #30
  417eba:	fb03 f202 	mul.w	r2, r3, r2
  417ebe:	f021 0303 	bic.w	r3, r1, #3
  417ec2:	d022      	beq.n	417f0a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x42e>
      buffer_size *= dims_data[i];
  417ec4:	ae64      	add	r6, sp, #400	@ 0x190
  417ec6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
  417eca:	f856 7ce4 	ldr.w	r7, [r6, #-228]
  417ece:	fb07 f202 	mul.w	r2, r7, r2
    for (int i = 0; i < size_; i++) {
  417ed2:	1c5f      	adds	r7, r3, #1
  417ed4:	42b9      	cmp	r1, r7
  417ed6:	dd18      	ble.n	417f0a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x42e>
      buffer_size *= dims_data[i];
  417ed8:	f856 7ce0 	ldr.w	r7, [r6, #-224]
  417edc:	fb07 f202 	mul.w	r2, r7, r2
    for (int i = 0; i < size_; i++) {
  417ee0:	1c9f      	adds	r7, r3, #2
  417ee2:	42b9      	cmp	r1, r7
  417ee4:	dd11      	ble.n	417f0a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x42e>
      buffer_size *= dims_data[i];
  417ee6:	f856 7cdc 	ldr.w	r7, [r6, #-220]
  417eea:	fb07 f202 	mul.w	r2, r7, r2
    for (int i = 0; i < size_; i++) {
  417eee:	1cdf      	adds	r7, r3, #3
  417ef0:	42b9      	cmp	r1, r7
  417ef2:	dd0a      	ble.n	417f0a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x42e>
      buffer_size *= dims_data[i];
  417ef4:	f856 7cd8 	ldr.w	r7, [r6, #-216]
    for (int i = 0; i < size_; i++) {
  417ef8:	3304      	adds	r3, #4
  417efa:	4299      	cmp	r1, r3
      buffer_size *= dims_data[i];
  417efc:	fb07 f202 	mul.w	r2, r7, r2
    for (int i = 0; i < size_; i++) {
  417f00:	dd03      	ble.n	417f0a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x42e>
      buffer_size *= dims_data[i];
  417f02:	f856 3cd4 	ldr.w	r3, [r6, #-212]
  417f06:	fb03 f202 	mul.w	r2, r3, r2
    for (int i = 0; i < size_; i++) {
  417f0a:	9924      	ldr	r1, [sp, #144]	@ 0x90
  417f0c:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
  417f0e:	2900      	cmp	r1, #0
  417f10:	f340 8130 	ble.w	418174 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x698>
  417f14:	1e4b      	subs	r3, r1, #1
  417f16:	2b04      	cmp	r3, #4
  417f18:	f240 820f 	bls.w	41833a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x85e>
  417f1c:	ea4f 0e91 	mov.w	lr, r1, lsr #2
    int buffer_size = 1;
  417f20:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  417f24:	f1ae 0e10 	sub.w	lr, lr, #16
  417f28:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  417f2c:	f10e 0e01 	add.w	lr, lr, #1
  417f30:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  417f34:	f04e e001 	dls	lr, lr
  417f38:	ab25      	add	r3, sp, #148	@ 0x94
      buffer_size *= dims_data[i];
  417f3a:	ecb3 5f04 	ldc	15, cr5, [r3], #16
  417f3e:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  417f42:	f00f c007 	le	lr, 417f3a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x45e>
  417f46:	ee36 7b10 	vmov.32	r7, d6[1]
  417f4a:	ee16 3a10 	vmov	r3, s12
  417f4e:	fb07 f303 	mul.w	r3, r7, r3
  417f52:	ee17 7b10 	vmov.32	r7, d7[0]
  417f56:	fb07 f303 	mul.w	r3, r7, r3
  417f5a:	ee37 7b10 	vmov.32	r7, d7[1]
  417f5e:	fb07 f303 	mul.w	r3, r7, r3
  417f62:	078f      	lsls	r7, r1, #30
  417f64:	f021 0c03 	bic.w	ip, r1, #3
  417f68:	d026      	beq.n	417fb8 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4dc>
      buffer_size *= dims_data[i];
  417f6a:	af64      	add	r7, sp, #400	@ 0x190
  417f6c:	eb07 0e8c 	add.w	lr, r7, ip, lsl #2
  417f70:	f85e 7cfc 	ldr.w	r7, [lr, #-252]
  417f74:	fb07 f303 	mul.w	r3, r7, r3
    for (int i = 0; i < size_; i++) {
  417f78:	f10c 0701 	add.w	r7, ip, #1
  417f7c:	42b9      	cmp	r1, r7
  417f7e:	dd1b      	ble.n	417fb8 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4dc>
      buffer_size *= dims_data[i];
  417f80:	f85e 7cf8 	ldr.w	r7, [lr, #-248]
  417f84:	fb07 f303 	mul.w	r3, r7, r3
    for (int i = 0; i < size_; i++) {
  417f88:	f10c 0702 	add.w	r7, ip, #2
  417f8c:	42b9      	cmp	r1, r7
  417f8e:	dd13      	ble.n	417fb8 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4dc>
      buffer_size *= dims_data[i];
  417f90:	f85e 7cf4 	ldr.w	r7, [lr, #-244]
  417f94:	fb07 f303 	mul.w	r3, r7, r3
    for (int i = 0; i < size_; i++) {
  417f98:	f10c 0703 	add.w	r7, ip, #3
  417f9c:	42b9      	cmp	r1, r7
  417f9e:	dd0b      	ble.n	417fb8 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4dc>
      buffer_size *= dims_data[i];
  417fa0:	f85e 7cf0 	ldr.w	r7, [lr, #-240]
    for (int i = 0; i < size_; i++) {
  417fa4:	f10c 0c04 	add.w	ip, ip, #4
  417fa8:	4561      	cmp	r1, ip
      buffer_size *= dims_data[i];
  417faa:	fb07 f303 	mul.w	r3, r7, r3
    for (int i = 0; i < size_; i++) {
  417fae:	dd03      	ble.n	417fb8 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4dc>
      buffer_size *= dims_data[i];
  417fb0:	f85e 1cec 	ldr.w	r1, [lr, #-236]
  417fb4:	fb01 f303 	mul.w	r3, r1, r3
    for (int i = 0; i < size_; i++) {
  417fb8:	2e00      	cmp	r6, #0
  417fba:	f340 81c2 	ble.w	418342 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x866>
  417fbe:	2e05      	cmp	r6, #5
  417fc0:	f340 81b3 	ble.w	41832a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x84e>
  417fc4:	ea4f 0e96 	mov.w	lr, r6, lsr #2
    int buffer_size = 1;
  417fc8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  417fcc:	f1ae 0e10 	sub.w	lr, lr, #16
  417fd0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  417fd4:	f10e 0e01 	add.w	lr, lr, #1
  417fd8:	f10d 0c7c 	add.w	ip, sp, #124	@ 0x7c
  417fdc:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  417fe0:	f04e e001 	dls	lr, lr
  417fe4:	4661      	mov	r1, ip
      buffer_size *= dims_data[i];
  417fe6:	ecb1 5f04 	ldc	15, cr5, [r1], #16
  417fea:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  417fee:	f00f c007 	le	lr, 417fe6 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x50a>
  417ff2:	ee36 7b10 	vmov.32	r7, d6[1]
  417ff6:	ee16 1a10 	vmov	r1, s12
  417ffa:	fb07 f101 	mul.w	r1, r7, r1
  417ffe:	ee17 7b10 	vmov.32	r7, d7[0]
  418002:	fb07 f101 	mul.w	r1, r7, r1
  418006:	ee37 7b10 	vmov.32	r7, d7[1]
  41800a:	f016 0f03 	tst.w	r6, #3
  41800e:	fb07 f101 	mul.w	r1, r7, r1
  418012:	f026 0703 	bic.w	r7, r6, #3
  418016:	d02b      	beq.n	418070 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x594>
      buffer_size *= dims_data[i];
  418018:	f85c c027 	ldr.w	ip, [ip, r7, lsl #2]
    for (int i = 0; i < size_; i++) {
  41801c:	f107 0e01 	add.w	lr, r7, #1
  418020:	4576      	cmp	r6, lr
      buffer_size *= dims_data[i];
  418022:	fb0c f101 	mul.w	r1, ip, r1
  418026:	ea4f 0c87 	mov.w	ip, r7, lsl #2
    for (int i = 0; i < size_; i++) {
  41802a:	dd21      	ble.n	418070 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x594>
      buffer_size *= dims_data[i];
  41802c:	f10d 0e80 	add.w	lr, sp, #128	@ 0x80
  418030:	f85e e027 	ldr.w	lr, [lr, r7, lsl #2]
  418034:	fb0e f101 	mul.w	r1, lr, r1
    for (int i = 0; i < size_; i++) {
  418038:	f107 0e02 	add.w	lr, r7, #2
  41803c:	4576      	cmp	r6, lr
  41803e:	dd17      	ble.n	418070 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x594>
      buffer_size *= dims_data[i];
  418040:	f10d 0e84 	add.w	lr, sp, #132	@ 0x84
  418044:	f85e e00c 	ldr.w	lr, [lr, ip]
  418048:	fb0e f101 	mul.w	r1, lr, r1
    for (int i = 0; i < size_; i++) {
  41804c:	f107 0e03 	add.w	lr, r7, #3
  418050:	4576      	cmp	r6, lr
  418052:	dd0d      	ble.n	418070 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x594>
      buffer_size *= dims_data[i];
  418054:	f10d 0e88 	add.w	lr, sp, #136	@ 0x88
  418058:	f85e e00c 	ldr.w	lr, [lr, ip]
    for (int i = 0; i < size_; i++) {
  41805c:	3704      	adds	r7, #4
  41805e:	42be      	cmp	r6, r7
      buffer_size *= dims_data[i];
  418060:	fb0e f101 	mul.w	r1, lr, r1
    for (int i = 0; i < size_; i++) {
  418064:	dd04      	ble.n	418070 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x594>
      buffer_size *= dims_data[i];
  418066:	ae23      	add	r6, sp, #140	@ 0x8c
  418068:	f856 600c 	ldr.w	r6, [r6, ip]
  41806c:	fb06 f101 	mul.w	r1, r6, r1
                                const RuntimeShape& check_shape_0,
                                const RuntimeShape& check_shape_1) {
  const int size_1 = shape.FlatSize();
  const int size_2 = check_shape_0.FlatSize();
  const int size_3 = check_shape_1.FlatSize();
  TFLITE_CHECK_EQ(size_1, size_2);
  418070:	4293      	cmp	r3, r2
  418072:	f040 816b 	bne.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_CHECK_EQ(size_2, size_3);
  418076:	4291      	cmp	r1, r2
  418078:	f040 8168 	bne.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  for (int i = 0; i < flat_size; ++i) {
  41807c:	2a00      	cmp	r2, #0
  41807e:	f77f aed6 	ble.w	417e2e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x352>
  418082:	1e51      	subs	r1, r2, #1
  418084:	2903      	cmp	r1, #3
  418086:	4613      	mov	r3, r2
  418088:	d97c      	bls.n	418184 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6a8>
  41808a:	1d29      	adds	r1, r5, #4
  41808c:	1a41      	subs	r1, r0, r1
  41808e:	2908      	cmp	r1, #8
  418090:	d978      	bls.n	418184 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6a8>
  418092:	1d21      	adds	r1, r4, #4
  418094:	1a41      	subs	r1, r0, r1
  418096:	2908      	cmp	r1, #8
  418098:	d974      	bls.n	418184 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6a8>
  41809a:	ee18 3a10 	vmov	r3, s16
  41809e:	eea2 3b10 	vdup.32	q1, r3
  4180a2:	ee18 3a90 	vmov	r3, s17
  4180a6:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  4180aa:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4180ae:	f1ae 0e10 	sub.w	lr, lr, #16
  4180b2:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  4180b6:	f10e 0e01 	add.w	lr, lr, #1
  4180ba:	eea4 3b10 	vdup.32	q2, r3
  4180be:	462e      	mov	r6, r5
  4180c0:	4621      	mov	r1, r4
  4180c2:	f04e e001 	dls	lr, lr
  4180c6:	4603      	mov	r3, r0
        input1_data[i] + input2_data[i], activation_min, activation_max);
  4180c8:	ecb6 7f04 	ldc	15, cr7, [r6], #16
  4180cc:	ecb1 1f04 	ldc	15, cr1, [r1], #16
    output_data[i] = ActivationFunctionWithMinMax(
  4180d0:	ef06 6d40 	vadd.f32	q3, q3, q0
      if (__a < __b)
  4180d4:	ff06 6f52 	vmaxnm.f32	q3, q3, q1
      if (__b < __a)
  4180d8:	ff26 6f54 	vminnm.f32	q3, q3, q2
  4180dc:	eca3 7f04 	stc	15, cr7, [r3], #16
  for (int i = 0; i < flat_size; ++i) {
  4180e0:	f00f c00f 	le	lr, 4180c8 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x5ec>
  4180e4:	0793      	lsls	r3, r2, #30
  4180e6:	f022 0103 	bic.w	r1, r2, #3
  4180ea:	f43f aea0 	beq.w	417e2e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x352>
        input1_data[i] + input2_data[i], activation_min, activation_max);
  4180ee:	eb05 0381 	add.w	r3, r5, r1, lsl #2
    output_data[i] = ActivationFunctionWithMinMax(
  4180f2:	edd3 7a00 	vldr	s15, [r3]
        input1_data[i] + input2_data[i], activation_min, activation_max);
  4180f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
    output_data[i] = ActivationFunctionWithMinMax(
  4180fa:	ed93 7a00 	vldr	s14, [r3]
  4180fe:	ee77 7a87 	vadd.f32	s15, s15, s14
      if (__a < __b)
  418102:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
      if (__b < __a)
  418106:	fec7 7ae8 	vminnm.f32	s15, s15, s17
  for (int i = 0; i < flat_size; ++i) {
  41810a:	1c4b      	adds	r3, r1, #1
    output_data[i] = ActivationFunctionWithMinMax(
  41810c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
  for (int i = 0; i < flat_size; ++i) {
  418110:	429a      	cmp	r2, r3
    output_data[i] = ActivationFunctionWithMinMax(
  418112:	edc6 7a00 	vstr	s15, [r6]
  for (int i = 0; i < flat_size; ++i) {
  418116:	f77f ae8a 	ble.w	417e2e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x352>
        input1_data[i] + input2_data[i], activation_min, activation_max);
  41811a:	eb05 0683 	add.w	r6, r5, r3, lsl #2
    output_data[i] = ActivationFunctionWithMinMax(
  41811e:	edd6 7a00 	vldr	s15, [r6]
        input1_data[i] + input2_data[i], activation_min, activation_max);
  418122:	eb04 0683 	add.w	r6, r4, r3, lsl #2
    output_data[i] = ActivationFunctionWithMinMax(
  418126:	ed96 7a00 	vldr	s14, [r6]
  41812a:	ee77 7a87 	vadd.f32	s15, s15, s14
      if (__a < __b)
  41812e:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
      if (__b < __a)
  418132:	fec7 7ae8 	vminnm.f32	s15, s15, s17
  for (int i = 0; i < flat_size; ++i) {
  418136:	3102      	adds	r1, #2
    output_data[i] = ActivationFunctionWithMinMax(
  418138:	eb00 0683 	add.w	r6, r0, r3, lsl #2
  for (int i = 0; i < flat_size; ++i) {
  41813c:	428a      	cmp	r2, r1
    output_data[i] = ActivationFunctionWithMinMax(
  41813e:	edc6 7a00 	vstr	s15, [r6]
        input1_data[i] + input2_data[i], activation_min, activation_max);
  418142:	ea4f 0383 	mov.w	r3, r3, lsl #2
  for (int i = 0; i < flat_size; ++i) {
  418146:	f77f ae72 	ble.w	417e2e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x352>
        input1_data[i] + input2_data[i], activation_min, activation_max);
  41814a:	3304      	adds	r3, #4
  41814c:	441c      	add	r4, r3
  41814e:	441d      	add	r5, r3
    output_data[i] = ActivationFunctionWithMinMax(
  418150:	edd4 7a00 	vldr	s15, [r4]
  418154:	ed95 7a00 	vldr	s14, [r5]
  418158:	ee77 7a87 	vadd.f32	s15, s15, s14
      if (__a < __b)
  41815c:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
      if (__b < __a)
  418160:	fec7 7ae8 	vminnm.f32	s15, s15, s17
  418164:	4403      	add	r3, r0
  418166:	edc3 7a00 	vstr	s15, [r3]
}
  41816a:	b065      	add	sp, #404	@ 0x194
  41816c:	ecbd 8b02 	vpop	{d8}
  418170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (int i = 0; i < size_; i++) {
  418174:	2e00      	cmp	r6, #0
    int buffer_size = 1;
  418176:	f04f 0301 	mov.w	r3, #1
    for (int i = 0; i < size_; i++) {
  41817a:	f73f af20 	bgt.w	417fbe <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4e2>
  TFLITE_CHECK_EQ(size_1, size_2);
  41817e:	429a      	cmp	r2, r3
  418180:	f040 80e4 	bne.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  418184:	009b      	lsls	r3, r3, #2
  418186:	f1a3 0e04 	sub.w	lr, r3, #4
  41818a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  41818e:	f10e 0e01 	add.w	lr, lr, #1
  418192:	f04e e001 	dls	lr, lr
        input1_data[i] + input2_data[i], activation_min, activation_max);
  418196:	ecf5 7a01 	vldmia	r5!, {s15}
  41819a:	ecb4 7a01 	vldmia	r4!, {s14}
    output_data[i] = ActivationFunctionWithMinMax(
  41819e:	ee77 7a87 	vadd.f32	s15, s15, s14
      if (__a < __b)
  4181a2:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
      if (__b < __a)
  4181a6:	fec7 7ae8 	vminnm.f32	s15, s15, s17
  4181aa:	ece0 7a01 	vstmia	r0!, {s15}
  for (int i = 0; i < flat_size; ++i) {
  4181ae:	f00f c00f 	le	lr, 418196 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6ba>
  4181b2:	b065      	add	sp, #404	@ 0x194
  4181b4:	ecbd 8b02 	vpop	{d8}
  4181b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        desc0_out->strides[i] = 0;
  4181bc:	2200      	movs	r2, #0
        desc0_out->extents[i] = extent1;
  4181be:	9357      	str	r3, [sp, #348]	@ 0x15c
        desc0_out->strides[i] = 0;
  4181c0:	925b      	str	r2, [sp, #364]	@ 0x16c
  4181c2:	e544      	b.n	417c4e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x172>
        desc0_out->extents[i] = extent1;
  4181c4:	9156      	str	r1, [sp, #344]	@ 0x158
        desc0_out->strides[i] = 0;
  4181c6:	2100      	movs	r1, #0
  4181c8:	915a      	str	r1, [sp, #360]	@ 0x168
  4181ca:	e535      	b.n	417c38 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x15c>
        desc0_out->extents[i] = extent1;
  4181cc:	9654      	str	r6, [sp, #336]	@ 0x150
        desc0_out->strides[i] = 0;
  4181ce:	2600      	movs	r6, #0
  4181d0:	9658      	str	r6, [sp, #352]	@ 0x160
  4181d2:	e51b      	b.n	417c0c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x130>
        desc0_out->extents[i] = extent1;
  4181d4:	9455      	str	r4, [sp, #340]	@ 0x154
        desc0_out->strides[i] = 0;
  4181d6:	2400      	movs	r4, #0
  4181d8:	9459      	str	r4, [sp, #356]	@ 0x164
  4181da:	e522      	b.n	417c22 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x146>
  4181dc:	9924      	ldr	r1, [sp, #144]	@ 0x90
    int buffer_size = 1;
  4181de:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
  4181e0:	2900      	cmp	r1, #0
  4181e2:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
  4181e4:	f73f ae96 	bgt.w	417f14 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x438>
  4181e8:	2e00      	cmp	r6, #0
    int buffer_size = 1;
  4181ea:	4613      	mov	r3, r2
    for (int i = 0; i < size_; i++) {
  4181ec:	f73f aee7 	bgt.w	417fbe <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4e2>
  4181f0:	e7c8      	b.n	418184 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6a8>
    return dims_[i];
  4181f2:	2400      	movs	r4, #0
  4181f4:	009b      	lsls	r3, r3, #2
  4181f6:	930e      	str	r3, [sp, #56]	@ 0x38
  4181f8:	0083      	lsls	r3, r0, #2
  4181fa:	930f      	str	r3, [sp, #60]	@ 0x3c
  4181fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  4181fe:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  418202:	fb0a f303 	mul.w	r3, sl, r3
  418206:	fb02 f603 	mul.w	r6, r2, r3
  41820a:	fb02 f30a 	mul.w	r3, r2, sl
  41820e:	4625      	mov	r5, r4
  418210:	9313      	str	r3, [sp, #76]	@ 0x4c
  418212:	46a3      	mov	fp, r4
  418214:	4623      	mov	r3, r4
  418216:	9915      	ldr	r1, [sp, #84]	@ 0x54
  418218:	4559      	cmp	r1, fp
  41821a:	f77f ae08 	ble.w	417e2e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x352>
    TFLITE_DCHECK_LT(i, size_);
  41821e:	f1b9 0f01 	cmp.w	r9, #1
  418222:	f000 8093 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  418226:	9910      	ldr	r1, [sp, #64]	@ 0x40
  418228:	2900      	cmp	r1, #0
  41822a:	dd76      	ble.n	41831a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x83e>
  41822c:	f1b9 0f02 	cmp.w	r9, #2
  418230:	f000 808c 	beq.w	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  418234:	4620      	mov	r0, r4
  418236:	e9cd 461a 	strd	r4, r6, [sp, #104]	@ 0x68
  41823a:	46ae      	mov	lr, r5
  41823c:	f04f 0800 	mov.w	r8, #0
  418240:	461c      	mov	r4, r3
  418242:	e9cd 351c 	strd	r3, r5, [sp, #112]	@ 0x70
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  418246:	f1ba 0f00 	cmp.w	sl, #0
  41824a:	dd57      	ble.n	4182fc <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x820>
  41824c:	f1b9 0f03 	cmp.w	r9, #3
  418250:	d07c      	beq.n	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  418252:	4684      	mov	ip, r0
  418254:	4627      	mov	r7, r4
  418256:	4676      	mov	r6, lr
  418258:	2100      	movs	r1, #0
  41825a:	e9cd 0418 	strd	r0, r4, [sp, #96]	@ 0x60
  41825e:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
  418262:	f1b9 0f04 	cmp.w	r9, #4
  418266:	d173      	bne.n	418350 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x874>
  418268:	2001      	movs	r0, #1
  41826a:	9c01      	ldr	r4, [sp, #4]
  41826c:	2a00      	cmp	r2, #0
  41826e:	eb04 0586 	add.w	r5, r4, r6, lsl #2
  418272:	9c02      	ldr	r4, [sp, #8]
  418274:	eb02 0300 	add.w	r3, r2, r0
  418278:	eb04 0e87 	add.w	lr, r4, r7, lsl #2
  41827c:	9c00      	ldr	r4, [sp, #0]
  41827e:	bfb8      	it	lt
  418280:	4603      	movlt	r3, r0
  418282:	eb04 048c 	add.w	r4, r4, ip, lsl #2
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  418286:	2000      	movs	r0, #0
  418288:	9204      	str	r2, [sp, #16]
  41828a:	e028      	b.n	4182de <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x802>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  41828c:	9a05      	ldr	r2, [sp, #20]
  41828e:	455a      	cmp	r2, fp
  418290:	dd5c      	ble.n	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  418292:	9a06      	ldr	r2, [sp, #24]
  418294:	4542      	cmp	r2, r8
  418296:	dd59      	ble.n	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  418298:	9a07      	ldr	r2, [sp, #28]
  41829a:	428a      	cmp	r2, r1
  41829c:	dd56      	ble.n	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  41829e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  4182a0:	4282      	cmp	r2, r0
  4182a2:	dd53      	ble.n	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  4182a4:	9a08      	ldr	r2, [sp, #32]
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
  4182a6:	edd4 7a00 	vldr	s15, [r4]
  4182aa:	455a      	cmp	r2, fp
  4182ac:	dd4e      	ble.n	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  4182ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  4182b0:	4542      	cmp	r2, r8
  4182b2:	dd4b      	ble.n	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  4182b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  4182b6:	428a      	cmp	r2, r1
  4182b8:	dd48      	ble.n	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  4182ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  4182bc:	4414      	add	r4, r2
  4182be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  4182c0:	4282      	cmp	r2, r0
  4182c2:	dd43      	ble.n	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
              ActivationFunctionWithMinMax<T>(
  4182c4:	ed95 7a00 	vldr	s14, [r5]
  4182c8:	ee77 7a87 	vadd.f32	s15, s15, s14
      if (__a < __b)
  4182cc:	fec7 7a88 	vmaxnm.f32	s15, s15, s16
      if (__b < __a)
  4182d0:	fec7 7ae8 	vminnm.f32	s15, s15, s17
          output_data[Offset(extended_output_shape, b, y, x, c)] =
  4182d4:	ecee 7a01 	vstmia	lr!, {s15}
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  4182d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  4182da:	3001      	adds	r0, #1
  4182dc:	4415      	add	r5, r2
  4182de:	3b01      	subs	r3, #1
  4182e0:	d1d4      	bne.n	41828c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7b0>
  4182e2:	9a04      	ldr	r2, [sp, #16]
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  4182e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  4182e6:	3101      	adds	r1, #1
  4182e8:	441e      	add	r6, r3
  4182ea:	9b03      	ldr	r3, [sp, #12]
  4182ec:	4551      	cmp	r1, sl
  4182ee:	4417      	add	r7, r2
  4182f0:	449c      	add	ip, r3
  4182f2:	dbb6      	blt.n	418262 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x786>
  4182f4:	e9dd 0418 	ldrd	r0, r4, [sp, #96]	@ 0x60
  4182f8:	f8dd e050 	ldr.w	lr, [sp, #80]	@ 0x50
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  4182fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  4182fe:	f108 0801 	add.w	r8, r8, #1
  418302:	449e      	add	lr, r3
  418304:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  418306:	441c      	add	r4, r3
  418308:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  41830a:	4418      	add	r0, r3
  41830c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  41830e:	4598      	cmp	r8, r3
  418310:	db99      	blt.n	418246 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x76a>
  418312:	e9dd 461a 	ldrd	r4, r6, [sp, #104]	@ 0x68
  418316:	e9dd 351c 	ldrd	r3, r5, [sp, #112]	@ 0x70
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  41831a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
  41831c:	f10b 0b01 	add.w	fp, fp, #1
  418320:	440d      	add	r5, r1
  418322:	9916      	ldr	r1, [sp, #88]	@ 0x58
  418324:	4433      	add	r3, r6
  418326:	440c      	add	r4, r1
  418328:	e775      	b.n	418216 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x73a>
    int buffer_size = 1;
  41832a:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
  41832c:	2700      	movs	r7, #0
  41832e:	f10d 0c7c 	add.w	ip, sp, #124	@ 0x7c
  418332:	e671      	b.n	418018 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x53c>
  418334:	4633      	mov	r3, r6
    int buffer_size = 1;
  418336:	2201      	movs	r2, #1
  418338:	e5c4      	b.n	417ec4 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x3e8>
  41833a:	2301      	movs	r3, #1
    for (int i = 0; i < size_; i++) {
  41833c:	f04f 0c00 	mov.w	ip, #0
  418340:	e613      	b.n	417f6a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x48e>
    int buffer_size = 1;
  418342:	2101      	movs	r1, #1
  418344:	e694      	b.n	418070 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x594>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  418346:	2a00      	cmp	r2, #0
  418348:	f77f ad4c 	ble.w	417de4 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x308>
  TFLITE_DCHECK(tensor != nullptr);
  41834c:	f006 ff24 	bl	41f198 <abort>
  418350:	2a00      	cmp	r2, #0
  418352:	dcfb      	bgt.n	41834c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x870>
  418354:	e7c6      	b.n	4182e4 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x808>
  418356:	bf00      	nop

00418358 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
TfLiteStatus EvalAddQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
  418358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41835c:	4604      	mov	r4, r0
  41835e:	4615      	mov	r5, r2
  418360:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
  418364:	930e      	str	r3, [sp, #56]	@ 0x38
  op_params->left_shift = data->left_shift;
  418366:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      tflite::micro::GetTensorShape(input1),
  418368:	a870      	add	r0, sp, #448	@ 0x1c0
  op_params->left_shift = data->left_shift;
  41836a:	9310      	str	r3, [sp, #64]	@ 0x40
  op_params->input1_offset = data->input1_offset;
  41836c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
TfLiteStatus EvalAddQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
  41836e:	920c      	str	r2, [sp, #48]	@ 0x30
  op_params->input1_offset = data->input1_offset;
  418370:	9311      	str	r3, [sp, #68]	@ 0x44
  op_params->input1_shift = data->input1_shift;
  418372:	6863      	ldr	r3, [r4, #4]
TfLiteStatus EvalAddQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
  418374:	468b      	mov	fp, r1
  op_params->input1_shift = data->input1_shift;
  418376:	930d      	str	r3, [sp, #52]	@ 0x34
  op_params->input2_offset = data->input2_offset;
  418378:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  op_params->input1_multiplier = data->input1_multiplier;
  41837a:	6967      	ldr	r7, [r4, #20]
  op_params->input2_offset = data->input2_offset;
  41837c:	9312      	str	r3, [sp, #72]	@ 0x48
  op_params->input2_shift = data->input2_shift;
  41837e:	68a3      	ldr	r3, [r4, #8]
  op_params->input2_multiplier = data->input2_multiplier;
  418380:	69a6      	ldr	r6, [r4, #24]
  op_params->input2_shift = data->input2_shift;
  418382:	9313      	str	r3, [sp, #76]	@ 0x4c
  op_params->output_offset = data->output_offset;
  418384:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  418386:	9315      	str	r3, [sp, #84]	@ 0x54
  op_params->output_shift = data->output_shift;
  418388:	e9d4 a307 	ldrd	sl, r3, [r4, #28]
  41838c:	9314      	str	r3, [sp, #80]	@ 0x50
  SetActivationParams(data->output_activation_min, data->output_activation_max,
  41838e:	68e3      	ldr	r3, [r4, #12]
  418390:	9316      	str	r3, [sp, #88]	@ 0x58
  418392:	6923      	ldr	r3, [r4, #16]
  418394:	9317      	str	r3, [sp, #92]	@ 0x5c
      tflite::micro::GetTensorShape(input1),
  418396:	f004 f90b 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
  41839a:	4629      	mov	r1, r5
  41839c:	a86a      	add	r0, sp, #424	@ 0x1a8
  41839e:	f004 f907 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
  4183a2:	9a70      	ldr	r2, [sp, #448]	@ 0x1c0
  4183a4:	9c6a      	ldr	r4, [sp, #424]	@ 0x1a8
      if (__a < __b)
  4183a6:	42a2      	cmp	r2, r4
  4183a8:	f2c0 82f7 	blt.w	41899a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x642>
      : size_(new_shape_size) {
  4183ac:	ab77      	add	r3, sp, #476	@ 0x1dc
      return __a;
  4183ae:	4615      	mov	r5, r2
  4183b0:	4618      	mov	r0, r3
  4183b2:	9276      	str	r2, [sp, #472]	@ 0x1d8
  4183b4:	930f      	str	r3, [sp, #60]	@ 0x3c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  4183b6:	0092      	lsls	r2, r2, #2
  4183b8:	a971      	add	r1, sp, #452	@ 0x1c4
  4183ba:	f7f8 f8ff 	bl	4105bc <memcpy>
    for (int i = 0; i < size_increase; ++i) {
  4183be:	1b28      	subs	r0, r5, r4
      : size_(new_shape_size) {
  4183c0:	957c      	str	r5, [sp, #496]	@ 0x1f0
    for (int i = 0; i < size_increase; ++i) {
  4183c2:	d01f      	beq.n	418404 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac>
    TFLITE_DCHECK_LT(i, size_);
  4183c4:	2d00      	cmp	r5, #0
  4183c6:	f340 8570 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    dims_[i] = val;
  4183ca:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  4183cc:	4298      	cmp	r0, r3
    dims_[i] = val;
  4183ce:	937d      	str	r3, [sp, #500]	@ 0x1f4
    for (int i = 0; i < size_increase; ++i) {
  4183d0:	d018      	beq.n	418404 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac>
    TFLITE_DCHECK_LT(i, size_);
  4183d2:	429d      	cmp	r5, r3
  4183d4:	f000 8569 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  4183d8:	2802      	cmp	r0, #2
    dims_[i] = val;
  4183da:	937e      	str	r3, [sp, #504]	@ 0x1f8
    for (int i = 0; i < size_increase; ++i) {
  4183dc:	d012      	beq.n	418404 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac>
    TFLITE_DCHECK_LT(i, size_);
  4183de:	2d02      	cmp	r5, #2
  4183e0:	f000 8563 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  4183e4:	2803      	cmp	r0, #3
    dims_[i] = val;
  4183e6:	937f      	str	r3, [sp, #508]	@ 0x1fc
    for (int i = 0; i < size_increase; ++i) {
  4183e8:	d00c      	beq.n	418404 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac>
    TFLITE_DCHECK_LT(i, size_);
  4183ea:	2d03      	cmp	r5, #3
  4183ec:	f000 855d 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  4183f0:	2804      	cmp	r0, #4
    dims_[i] = val;
  4183f2:	9380      	str	r3, [sp, #512]	@ 0x200
    for (int i = 0; i < size_increase; ++i) {
  4183f4:	d006      	beq.n	418404 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac>
    TFLITE_DCHECK_LT(i, size_);
  4183f6:	2d04      	cmp	r5, #4
  4183f8:	f000 8557 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  4183fc:	2805      	cmp	r0, #5
    dims_[i] = val;
  4183fe:	9381      	str	r3, [sp, #516]	@ 0x204
    for (int i = 0; i < size_increase; ++i) {
  418400:	f040 8553 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  418404:	ab7d      	add	r3, sp, #500	@ 0x1f4
  418406:	00a2      	lsls	r2, r4, #2
  418408:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41840c:	a96b      	add	r1, sp, #428	@ 0x1ac
  41840e:	f7f8 f8d5 	bl	4105bc <memcpy>
    return this->size_ == comp.size_ &&
  418412:	f8dd 91d8 	ldr.w	r9, [sp, #472]	@ 0x1d8
  418416:	f8dd 81f0 	ldr.w	r8, [sp, #496]	@ 0x1f0
  41841a:	45c1      	cmp	r9, r8
  41841c:	f000 82e8 	beq.w	4189f0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x698>
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
    return false;
  }

  for (int i = dims_count - 1; i >= 0; --i) {
  418420:	1e69      	subs	r1, r5, #1
  418422:	f100 8542 	bmi.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    TFLITE_DCHECK_LT(i, size_);
  418426:	4589      	cmp	r9, r1
  418428:	f340 853f 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  41842c:	aba4      	add	r3, sp, #656	@ 0x290
  41842e:	eb03 0281 	add.w	r2, r3, r1, lsl #2
  418432:	0088      	lsls	r0, r1, #2
    TFLITE_DCHECK_LT(i, size_);
  418434:	4588      	cmp	r8, r1
    return dims_[i];
  418436:	f852 3cb4 	ldr.w	r3, [r2, #-180]
  41843a:	900f      	str	r0, [sp, #60]	@ 0x3c
    TFLITE_DCHECK_LT(i, size_);
  41843c:	f340 8535 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418440:	f852 2c9c 	ldr.w	r2, [r2, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  418444:	4293      	cmp	r3, r2
  418446:	f000 84f3 	beq.w	418e30 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xad8>
      continue;
    } else if (extended_shape0.Dims(i) == 1) {
  41844a:	2b01      	cmp	r3, #1
  41844c:	f000 84bb 	beq.w	418dc6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
      params->broadcast_category =
          BroadcastableOpCategory::kFirstInputBroadcastsFast;
      break;
    } else if (extended_shape1.Dims(i) == 1) {
  418450:	2a01      	cmp	r2, #1
  418452:	d14b      	bne.n	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418454:	464b      	mov	r3, r9
  418456:	46c1      	mov	r9, r8
  418458:	4698      	mov	r8, r3

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
  41845a:	f50d 7cf8 	add.w	ip, sp, #496	@ 0x1f0
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
  41845e:	f50d 7eec 	add.w	lr, sp, #472	@ 0x1d8
    TFLITE_DCHECK_LT(i, size_);
  418462:	4541      	cmp	r1, r8
    return dims_[i];
  418464:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
  418468:	ea4f 0085 	mov.w	r0, r5, lsl #2
  41846c:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
  418470:	f280 851b 	bge.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  params->broadcast_shape[2] = 1;
  params->broadcast_shape[3] = 1;
  params->broadcast_shape[4] = 1;
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  418474:	f85e 3025 	ldr.w	r3, [lr, r5, lsl #2]
  418478:	4470      	add	r0, lr
  41847a:	429a      	cmp	r2, r3
  41847c:	f040 840a 	bne.w	418c94 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x93c>
  418480:	2d01      	cmp	r5, #1
    params->broadcast_shape[4] *= shape_b->Dims(i);
    --i;
  418482:	f1a5 0102 	sub.w	r1, r5, #2
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  418486:	d031      	beq.n	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418488:	f854 2c04 	ldr.w	r2, [r4, #-4]
  41848c:	f850 3c04 	ldr.w	r3, [r0, #-4]
  418490:	429a      	cmp	r2, r3
  418492:	f040 83fa 	bne.w	418c8a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x932>
  418496:	2d02      	cmp	r5, #2
    --i;
  418498:	f1a5 0103 	sub.w	r1, r5, #3
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41849c:	d026      	beq.n	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  41849e:	4589      	cmp	r9, r1
  4184a0:	f340 8503 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  4184a4:	4588      	cmp	r8, r1
    return dims_[i];
  4184a6:	f854 2c08 	ldr.w	r2, [r4, #-8]
    TFLITE_DCHECK_LT(i, size_);
  4184aa:	f340 84fe 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  4184ae:	f850 3c08 	ldr.w	r3, [r0, #-8]
  4184b2:	429a      	cmp	r2, r3
  4184b4:	f040 8684 	bne.w	4191c0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe68>
  4184b8:	2d03      	cmp	r5, #3
    --i;
  4184ba:	f1a5 0104 	sub.w	r1, r5, #4
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  4184be:	d015      	beq.n	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  4184c0:	4589      	cmp	r9, r1
  4184c2:	f340 84f2 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  4184c6:	4588      	cmp	r8, r1
    return dims_[i];
  4184c8:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    TFLITE_DCHECK_LT(i, size_);
  4184cc:	f340 84ed 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  4184d0:	f850 3c0c 	ldr.w	r3, [r0, #-12]
  4184d4:	429a      	cmp	r2, r3
  4184d6:	f040 8673 	bne.w	4191c0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe68>
  4184da:	2d05      	cmp	r5, #5
  4184dc:	d106      	bne.n	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  4184de:	f854 2c10 	ldr.w	r2, [r4, #-16]
  4184e2:	f850 3c10 	ldr.w	r3, [r0, #-16]
  4184e6:	429a      	cmp	r2, r3
  4184e8:	f040 8635 	bne.w	419156 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdfe>
        op_params, tflite::micro::GetTensorShape(input1),
  4184ec:	4659      	mov	r1, fp
  4184ee:	a864      	add	r0, sp, #400	@ 0x190
  4184f0:	f004 f85e 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  4184f4:	f1bb 0f00 	cmp.w	fp, #0
  4184f8:	f000 84d7 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
        tflite::micro::GetTensorShape(input2),
  4184fc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  return reinterpret_cast<const T*>(tensor->data.raw);
  4184fe:	f8db 3000 	ldr.w	r3, [fp]
  418502:	4621      	mov	r1, r4
  418504:	a85e      	add	r0, sp, #376	@ 0x178
  418506:	9334      	str	r3, [sp, #208]	@ 0xd0
  418508:	f004 f852 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41850c:	2c00      	cmp	r4, #0
  41850e:	f000 84cc 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  return reinterpret_cast<const T*>(tensor->data.raw);
  418512:	6823      	ldr	r3, [r4, #0]
        tflite::micro::GetTensorShape(output),
  418514:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
  418516:	a858      	add	r0, sp, #352	@ 0x160
  418518:	4621      	mov	r1, r4
  41851a:	9335      	str	r3, [sp, #212]	@ 0xd4
  41851c:	f004 f848 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  418520:	2c00      	cmp	r4, #0
  418522:	f000 84c2 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  return reinterpret_cast<T*>(tensor->data.raw);
  418526:	6823      	ldr	r3, [r4, #0]
  int32_t DimensionsCount() const { return size_; }
  418528:	9a64      	ldr	r2, [sp, #400]	@ 0x190
  41852a:	9340      	str	r3, [sp, #256]	@ 0x100
      : size_(new_shape_size) {
  41852c:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41852e:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
  418530:	9388      	str	r3, [sp, #544]	@ 0x220
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  418532:	f300 84ba 	bgt.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  418536:	1a98      	subs	r0, r3, r2
  418538:	d00d      	beq.n	418556 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1fe>
    dims_[i] = val;
  41853a:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41853c:	4298      	cmp	r0, r3
    dims_[i] = val;
  41853e:	9389      	str	r3, [sp, #548]	@ 0x224
    for (int i = 0; i < size_increase; ++i) {
  418540:	d009      	beq.n	418556 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1fe>
  418542:	2802      	cmp	r0, #2
    dims_[i] = val;
  418544:	938a      	str	r3, [sp, #552]	@ 0x228
    for (int i = 0; i < size_increase; ++i) {
  418546:	d006      	beq.n	418556 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1fe>
  418548:	2803      	cmp	r0, #3
    dims_[i] = val;
  41854a:	938b      	str	r3, [sp, #556]	@ 0x22c
    for (int i = 0; i < size_increase; ++i) {
  41854c:	d003      	beq.n	418556 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1fe>
  41854e:	2804      	cmp	r0, #4
    dims_[i] = val;
  418550:	938c      	str	r3, [sp, #560]	@ 0x230
    for (int i = 0; i < size_increase; ++i) {
  418552:	f040 84aa 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  418556:	ab89      	add	r3, sp, #548	@ 0x224
  418558:	0092      	lsls	r2, r2, #2
  41855a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41855e:	a965      	add	r1, sp, #404	@ 0x194
  418560:	f7f8 f82c 	bl	4105bc <memcpy>
      : size_(new_shape_size) {
  418564:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  418566:	9a5e      	ldr	r2, [sp, #376]	@ 0x178
      : size_(new_shape_size) {
  418568:	938e      	str	r3, [sp, #568]	@ 0x238
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41856a:	429a      	cmp	r2, r3
  41856c:	f300 849d 	bgt.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  418570:	1a98      	subs	r0, r3, r2
  418572:	d00d      	beq.n	418590 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x238>
    dims_[i] = val;
  418574:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  418576:	4298      	cmp	r0, r3
    dims_[i] = val;
  418578:	938f      	str	r3, [sp, #572]	@ 0x23c
    for (int i = 0; i < size_increase; ++i) {
  41857a:	d009      	beq.n	418590 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x238>
  41857c:	2802      	cmp	r0, #2
    dims_[i] = val;
  41857e:	9390      	str	r3, [sp, #576]	@ 0x240
    for (int i = 0; i < size_increase; ++i) {
  418580:	d006      	beq.n	418590 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x238>
  418582:	2803      	cmp	r0, #3
    dims_[i] = val;
  418584:	9391      	str	r3, [sp, #580]	@ 0x244
    for (int i = 0; i < size_increase; ++i) {
  418586:	d003      	beq.n	418590 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x238>
  418588:	2804      	cmp	r0, #4
    dims_[i] = val;
  41858a:	9392      	str	r3, [sp, #584]	@ 0x248
    for (int i = 0; i < size_increase; ++i) {
  41858c:	f040 848d 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  418590:	ab8f      	add	r3, sp, #572	@ 0x23c
  418592:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  418596:	0092      	lsls	r2, r2, #2
  418598:	a95f      	add	r1, sp, #380	@ 0x17c
  41859a:	f7f8 f80f 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41859e:	9b88      	ldr	r3, [sp, #544]	@ 0x220
  4185a0:	2b03      	cmp	r3, #3
  4185a2:	f340 8482 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    desc_out->strides[i] = desc_stride;
  4185a6:	2201      	movs	r2, #1
    return dims_[i];
  4185a8:	f8dd c230 	ldr.w	ip, [sp, #560]	@ 0x230
  4185ac:	f8dd e22c 	ldr.w	lr, [sp, #556]	@ 0x22c
  4185b0:	998a      	ldr	r1, [sp, #552]	@ 0x228
    desc_stride *= input_shape.Dims(i);
  4185b2:	fb0c f30e 	mul.w	r3, ip, lr
    desc_out->strides[i] = desc_stride;
  4185b6:	9399      	str	r3, [sp, #612]	@ 0x264
    desc_stride *= input_shape.Dims(i);
  4185b8:	fb01 f303 	mul.w	r3, r1, r3
    desc_out->strides[i] = desc_stride;
  4185bc:	9398      	str	r3, [sp, #608]	@ 0x260
    TFLITE_DCHECK_LT(i, size_);
  4185be:	9b8e      	ldr	r3, [sp, #568]	@ 0x238
    return dims_[i];
  4185c0:	9c89      	ldr	r4, [sp, #548]	@ 0x224
    TFLITE_DCHECK_LT(i, size_);
  4185c2:	2b03      	cmp	r3, #3
    desc_out->extents[i] = input_shape.Dims(i);
  4185c4:	f8cd c25c 	str.w	ip, [sp, #604]	@ 0x25c
    desc_out->strides[i] = desc_stride;
  4185c8:	f8cd c268 	str.w	ip, [sp, #616]	@ 0x268
    desc_out->extents[i] = input_shape.Dims(i);
  4185cc:	f8cd e258 	str.w	lr, [sp, #600]	@ 0x258
    desc_out->strides[i] = desc_stride;
  4185d0:	929b      	str	r2, [sp, #620]	@ 0x26c
    desc_out->extents[i] = input_shape.Dims(i);
  4185d2:	9195      	str	r1, [sp, #596]	@ 0x254
  4185d4:	9494      	str	r4, [sp, #592]	@ 0x250
  4185d6:	f340 8468 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  4185da:	9d92      	ldr	r5, [sp, #584]	@ 0x248
  4185dc:	9b91      	ldr	r3, [sp, #580]	@ 0x244
    desc_out->strides[i] = desc_stride;
  4185de:	92a3      	str	r2, [sp, #652]	@ 0x28c
    desc_stride *= input_shape.Dims(i);
  4185e0:	fb05 f003 	mul.w	r0, r5, r3
  4185e4:	9a90      	ldr	r2, [sp, #576]	@ 0x240
    desc_out->strides[i] = desc_stride;
  4185e6:	90a1      	str	r0, [sp, #644]	@ 0x284
    desc_stride *= input_shape.Dims(i);
  4185e8:	fb02 f000 	mul.w	r0, r2, r0
    desc_out->strides[i] = desc_stride;
  4185ec:	90a0      	str	r0, [sp, #640]	@ 0x280
  4185ee:	988f      	ldr	r0, [sp, #572]	@ 0x23c
    desc_out->extents[i] = input_shape.Dims(i);
  4185f0:	959f      	str	r5, [sp, #636]	@ 0x27c
    if (extent0 != extent1) {
  4185f2:	42a0      	cmp	r0, r4
    desc_out->strides[i] = desc_stride;
  4185f4:	95a2      	str	r5, [sp, #648]	@ 0x288
    desc_out->extents[i] = input_shape.Dims(i);
  4185f6:	939e      	str	r3, [sp, #632]	@ 0x278
  4185f8:	929d      	str	r2, [sp, #628]	@ 0x274
  4185fa:	909c      	str	r0, [sp, #624]	@ 0x270
    if (extent0 != extent1) {
  4185fc:	d008      	beq.n	418610 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2b8>
      if (extent0 == 1) {
  4185fe:	2c01      	cmp	r4, #1
  418600:	f000 85a4 	beq.w	41914c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdf4>
        TFLITE_DCHECK_EQ(extent1, 1);
  418604:	2801      	cmp	r0, #1
  418606:	f040 8450 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
        desc1_out->strides[i] = 0;
  41860a:	2000      	movs	r0, #0
        desc1_out->extents[i] = extent0;
  41860c:	949c      	str	r4, [sp, #624]	@ 0x270
        desc1_out->strides[i] = 0;
  41860e:	90a0      	str	r0, [sp, #640]	@ 0x280
    if (extent0 != extent1) {
  418610:	4291      	cmp	r1, r2
  418612:	d008      	beq.n	418626 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ce>
      if (extent0 == 1) {
  418614:	2901      	cmp	r1, #1
  418616:	f000 8594 	beq.w	419142 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdea>
        TFLITE_DCHECK_EQ(extent1, 1);
  41861a:	2a01      	cmp	r2, #1
  41861c:	f040 8445 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
        desc1_out->strides[i] = 0;
  418620:	2200      	movs	r2, #0
        desc1_out->extents[i] = extent0;
  418622:	919d      	str	r1, [sp, #628]	@ 0x274
        desc1_out->strides[i] = 0;
  418624:	92a1      	str	r2, [sp, #644]	@ 0x284
    if (extent0 != extent1) {
  418626:	4573      	cmp	r3, lr
  418628:	d00a      	beq.n	418640 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2e8>
      if (extent0 == 1) {
  41862a:	f1be 0f01 	cmp.w	lr, #1
  41862e:	f000 8583 	beq.w	419138 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xde0>
        TFLITE_DCHECK_EQ(extent1, 1);
  418632:	2b01      	cmp	r3, #1
  418634:	f040 8439 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
        desc1_out->strides[i] = 0;
  418638:	2300      	movs	r3, #0
        desc1_out->extents[i] = extent0;
  41863a:	f8cd e278 	str.w	lr, [sp, #632]	@ 0x278
        desc1_out->strides[i] = 0;
  41863e:	93a2      	str	r3, [sp, #648]	@ 0x288
    if (extent0 != extent1) {
  418640:	45ac      	cmp	ip, r5
  418642:	d00a      	beq.n	41865a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x302>
      if (extent0 == 1) {
  418644:	f1bc 0f01 	cmp.w	ip, #1
  418648:	f000 844d 	beq.w	418ee6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb8e>
        TFLITE_DCHECK_EQ(extent1, 1);
  41864c:	2d01      	cmp	r5, #1
  41864e:	f040 842c 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
        desc1_out->strides[i] = 0;
  418652:	2300      	movs	r3, #0
        desc1_out->extents[i] = extent0;
  418654:	f8cd c27c 	str.w	ip, [sp, #636]	@ 0x27c
        desc1_out->strides[i] = 0;
  418658:	93a3      	str	r3, [sp, #652]	@ 0x28c
      : size_(new_shape_size) {
  41865a:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  41865c:	9a58      	ldr	r2, [sp, #352]	@ 0x160
      : size_(new_shape_size) {
  41865e:	9382      	str	r3, [sp, #520]	@ 0x208
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  418660:	429a      	cmp	r2, r3
  418662:	f300 8422 	bgt.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  418666:	1a98      	subs	r0, r3, r2
  418668:	d00d      	beq.n	418686 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32e>
    dims_[i] = val;
  41866a:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41866c:	4298      	cmp	r0, r3
    dims_[i] = val;
  41866e:	9383      	str	r3, [sp, #524]	@ 0x20c
    for (int i = 0; i < size_increase; ++i) {
  418670:	d009      	beq.n	418686 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32e>
  418672:	2802      	cmp	r0, #2
    dims_[i] = val;
  418674:	9384      	str	r3, [sp, #528]	@ 0x210
    for (int i = 0; i < size_increase; ++i) {
  418676:	d006      	beq.n	418686 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32e>
  418678:	2803      	cmp	r0, #3
    dims_[i] = val;
  41867a:	9385      	str	r3, [sp, #532]	@ 0x214
    for (int i = 0; i < size_increase; ++i) {
  41867c:	d003      	beq.n	418686 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32e>
  41867e:	2804      	cmp	r0, #4
    dims_[i] = val;
  418680:	9386      	str	r3, [sp, #536]	@ 0x218
    for (int i = 0; i < size_increase; ++i) {
  418682:	f040 8412 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  418686:	ab83      	add	r3, sp, #524	@ 0x20c
  418688:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41868c:	0092      	lsls	r2, r2, #2
  41868e:	a959      	add	r1, sp, #356	@ 0x164
  418690:	f7f7 ff94 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  418694:	9b82      	ldr	r3, [sp, #520]	@ 0x208
  418696:	2b00      	cmp	r3, #0
  418698:	930f      	str	r3, [sp, #60]	@ 0x3c
  41869a:	f340 8406 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  return RoundingDivideByPOT(
  41869e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  4186a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
  4186a2:	425d      	negs	r5, r3
  4186a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  4186a6:	4252      	negs	r2, r2
  4186a8:	425b      	negs	r3, r3
  4186aa:	9320      	str	r3, [sp, #128]	@ 0x80
  4186ac:	921f      	str	r2, [sp, #124]	@ 0x7c
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
  assert(exponent <= 31);
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  4186ae:	2300      	movs	r3, #0
  4186b0:	2201      	movs	r2, #1
  4186b2:	ea52 530d 	orrs.w	r3, r2, sp, lsl #20
    return dims_[i];
  4186b6:	9983      	ldr	r1, [sp, #524]	@ 0x20c
  4186b8:	1e53      	subs	r3, r2, #1
  4186ba:	913e      	str	r1, [sp, #248]	@ 0xf8
  4186bc:	e9dd 4184 	ldrd	r4, r1, [sp, #528]	@ 0x210
  4186c0:	912d      	str	r1, [sp, #180]	@ 0xb4
  4186c2:	9986      	ldr	r1, [sp, #536]	@ 0x218
  4186c4:	989b      	ldr	r0, [sp, #620]	@ 0x26c
  4186c6:	913d      	str	r1, [sp, #244]	@ 0xf4
  4186c8:	9994      	ldr	r1, [sp, #592]	@ 0x250
  4186ca:	9521      	str	r5, [sp, #132]	@ 0x84
  4186cc:	9118      	str	r1, [sp, #96]	@ 0x60
  4186ce:	9995      	ldr	r1, [sp, #596]	@ 0x254
  4186d0:	2201      	movs	r2, #1
  4186d2:	9119      	str	r1, [sp, #100]	@ 0x64
  4186d4:	9996      	ldr	r1, [sp, #600]	@ 0x258
  4186d6:	2801      	cmp	r0, #1
  4186d8:	911a      	str	r1, [sp, #104]	@ 0x68
  4186da:	9997      	ldr	r1, [sp, #604]	@ 0x25c
  4186dc:	911d      	str	r1, [sp, #116]	@ 0x74
  4186de:	9998      	ldr	r1, [sp, #608]	@ 0x260
  4186e0:	9141      	str	r1, [sp, #260]	@ 0x104
  4186e2:	9999      	ldr	r1, [sp, #612]	@ 0x264
  4186e4:	9136      	str	r1, [sp, #216]	@ 0xd8
  4186e6:	999a      	ldr	r1, [sp, #616]	@ 0x268
  4186e8:	912f      	str	r1, [sp, #188]	@ 0xbc
  4186ea:	999c      	ldr	r1, [sp, #624]	@ 0x270
  4186ec:	911b      	str	r1, [sp, #108]	@ 0x6c
  4186ee:	999d      	ldr	r1, [sp, #628]	@ 0x274
  4186f0:	911c      	str	r1, [sp, #112]	@ 0x70
  4186f2:	999e      	ldr	r1, [sp, #632]	@ 0x278
  4186f4:	9322      	str	r3, [sp, #136]	@ 0x88
  return a >> offset;
  4186f6:	ea4f 0363 	mov.w	r3, r3, asr #1
  4186fa:	9323      	str	r3, [sp, #140]	@ 0x8c
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  4186fc:	f04f 0300 	mov.w	r3, #0
  418700:	9d20      	ldr	r5, [sp, #128]	@ 0x80
  418702:	912e      	str	r1, [sp, #184]	@ 0xb8
  418704:	ea52 530d 	orrs.w	r3, r2, sp, lsl #20
  418708:	f102 33ff 	add.w	r3, r2, #4294967295	@ 0xffffffff
  41870c:	9324      	str	r3, [sp, #144]	@ 0x90
  return a >> offset;
  41870e:	ea4f 0363 	mov.w	r3, r3, asr #1
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  418712:	f04f 0201 	mov.w	r2, #1
  return a >> offset;
  418716:	9325      	str	r3, [sp, #148]	@ 0x94
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  418718:	f04f 0300 	mov.w	r3, #0
  41871c:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
  41871e:	999f      	ldr	r1, [sp, #636]	@ 0x27c
  418720:	ea52 530d 	orrs.w	r3, r2, sp, lsl #20
  418724:	911e      	str	r1, [sp, #120]	@ 0x78
  418726:	f102 33ff 	add.w	r3, r2, #4294967295	@ 0xffffffff
  41872a:	e9dd 91a0 	ldrd	r9, r1, [sp, #640]	@ 0x280
  41872e:	9137      	str	r1, [sp, #220]	@ 0xdc
  418730:	99a2      	ldr	r1, [sp, #648]	@ 0x288
  418732:	9326      	str	r3, [sp, #152]	@ 0x98
  return a >> offset;
  418734:	ea4f 0363 	mov.w	r3, r3, asr #1
  418738:	9130      	str	r1, [sp, #192]	@ 0xc0
  41873a:	9327      	str	r3, [sp, #156]	@ 0x9c
  41873c:	99a3      	ldr	r1, [sp, #652]	@ 0x28c
  41873e:	f040 83dd 	bne.w	418efc <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xba4>
  418742:	1e4b      	subs	r3, r1, #1
  418744:	bf18      	it	ne
  418746:	2301      	movne	r3, #1
  418748:	2b00      	cmp	r3, #0
  41874a:	f040 83d7 	bne.w	418efc <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xba4>
  41874e:	469b      	mov	fp, r3
  418750:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
  418752:	993d      	ldr	r1, [sp, #244]	@ 0xf4
  418754:	fb02 f304 	mul.w	r3, r2, r4
  418758:	fb02 fe01 	mul.w	lr, r2, r1
  41875c:	fb01 f303 	mul.w	r3, r1, r3
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  418760:	4620      	mov	r0, r4
  418762:	464a      	mov	r2, r9
  418764:	46bc      	mov	ip, r7
  418766:	4675      	mov	r5, lr
  418768:	465c      	mov	r4, fp
  41876a:	4698      	mov	r8, r3
  41876c:	4637      	mov	r7, r6
  41876e:	46d6      	mov	lr, sl
  418770:	46d9      	mov	r9, fp
  418772:	f8cd b0fc 	str.w	fp, [sp, #252]	@ 0xfc
  418776:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
  418778:	455b      	cmp	r3, fp
  41877a:	f340 8281 	ble.w	418c80 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x928>
    TFLITE_DCHECK_LT(i, size_);
  41877e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  418780:	2b01      	cmp	r3, #1
  418782:	f000 8392 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  418786:	2800      	cmp	r0, #0
  418788:	f340 8349 	ble.w	418e1e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac6>
  41878c:	2b02      	cmp	r3, #2
  41878e:	f000 838c 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  418792:	2600      	movs	r6, #0
  418794:	9940      	ldr	r1, [sp, #256]	@ 0x100
  418796:	46b2      	mov	sl, r6
  418798:	3902      	subs	r1, #2
  41879a:	9132      	str	r1, [sp, #200]	@ 0xc8
  41879c:	9935      	ldr	r1, [sp, #212]	@ 0xd4
  41879e:	4606      	mov	r6, r0
  4187a0:	3902      	subs	r1, #2
  4187a2:	9133      	str	r1, [sp, #204]	@ 0xcc
  4187a4:	4648      	mov	r0, r9
  4187a6:	4621      	mov	r1, r4
  4187a8:	e9cd 9444 	strd	r9, r4, [sp, #272]	@ 0x110
  4187ac:	f8cd 810c 	str.w	r8, [sp, #268]	@ 0x10c
  4187b0:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
  4187b2:	f8dd 80f4 	ldr.w	r8, [sp, #244]	@ 0xf4
  4187b6:	9242      	str	r2, [sp, #264]	@ 0x108
  4187b8:	f8cd b0a0 	str.w	fp, [sp, #160]	@ 0xa0
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  4187bc:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
  4187be:	2a00      	cmp	r2, #0
  4187c0:	f340 831c 	ble.w	418dfc <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xaa4>
  4187c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  4187c6:	2a03      	cmp	r2, #3
  4187c8:	f000 836f 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  4187cc:	2400      	movs	r4, #0
  4187ce:	468b      	mov	fp, r1
  4187d0:	4602      	mov	r2, r0
  4187d2:	4699      	mov	r9, r3
  4187d4:	940e      	str	r4, [sp, #56]	@ 0x38
  4187d6:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
  4187d8:	e9cd 6138 	strd	r6, r1, [sp, #224]	@ 0xe0
  4187dc:	e9cd 033a 	strd	r0, r3, [sp, #232]	@ 0xe8
  4187e0:	3c02      	subs	r4, #2
  4187e2:	9431      	str	r4, [sp, #196]	@ 0xc4
  4187e4:	953c      	str	r5, [sp, #240]	@ 0xf0
  4187e6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
  4187e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
  4187ea:	428b      	cmp	r3, r1
  4187ec:	f340 8578 	ble.w	4192e0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf88>
  4187f0:	2301      	movs	r3, #1
  4187f2:	f1b8 0f00 	cmp.w	r8, #0
  4187f6:	eb08 0003 	add.w	r0, r8, r3
  4187fa:	bfb8      	it	lt
  4187fc:	4618      	movlt	r0, r3
  4187fe:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  418800:	e9cd 292b 	strd	r2, r9, [sp, #172]	@ 0xac
  418804:	eb03 0649 	add.w	r6, r3, r9, lsl #1
  418808:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41880a:	2100      	movs	r1, #0
  41880c:	eb03 0542 	add.w	r5, r3, r2, lsl #1
  418810:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
  418812:	46b1      	mov	r9, r6
  418814:	eb03 044b 	add.w	r4, r3, fp, lsl #1
  418818:	e9cd b829 	strd	fp, r8, [sp, #164]	@ 0xa4
  41881c:	940c      	str	r4, [sp, #48]	@ 0x30
  41881e:	e070      	b.n	418902 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x5aa>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  418820:	f118 4880 	adds.w	r8, r8, #1073741824	@ 0x40000000
  418824:	4642      	mov	r2, r8
  418826:	f14b 0300 	adc.w	r3, fp, #0
  41882a:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  41882e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  418830:	2b00      	cmp	r3, #0
  418832:	f300 8513 	bgt.w	41925c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf04>
  assert(exponent <= 31);
  418836:	331f      	adds	r3, #31
  418838:	f2c0 8509 	blt.w	41924e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xef6>
  return a + b;
  41883c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
  return a >> offset;
  41883e:	9c21      	ldr	r4, [sp, #132]	@ 0x84
  return a + b;
  418840:	eb03 7bd2 	add.w	fp, r3, r2, lsr #31
  return a & b;
  418844:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  return a >> offset;
  418846:	fa42 f804 	asr.w	r8, r2, r4
  return a & b;
  41884a:	4013      	ands	r3, r2
  return a + b;
  41884c:	459b      	cmp	fp, r3
  41884e:	ea58 98a8 			@ <UNDEFINED> instruction: 0xea5898a8
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  418852:	42b7      	cmp	r7, r6
  418854:	f000 84eb 	beq.w	41922e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xed6>
  std::int64_t ab_64 = a_64 * b_64;
  418858:	fb86 6b07 	smull	r6, fp, r6, r7
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  41885c:	f1bb 0f00 	cmp.w	fp, #0
  418860:	f2c0 84b9 	blt.w	4191d6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe7e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  418864:	f116 4680 	adds.w	r6, r6, #1073741824	@ 0x40000000
  418868:	4632      	mov	r2, r6
  41886a:	f14b 0300 	adc.w	r3, fp, #0
  41886e:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  418872:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  418874:	2b00      	cmp	r3, #0
  418876:	f300 84f1 	bgt.w	41925c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf04>
  assert(exponent <= 31);
  41887a:	331f      	adds	r3, #31
  41887c:	f2c0 84e7 	blt.w	41924e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xef6>
  return a & b;
  418880:	9b24      	ldr	r3, [sp, #144]	@ 0x90
  return a >> offset;
  418882:	9c20      	ldr	r4, [sp, #128]	@ 0x80
  return a & b;
  418884:	ea03 0602 	and.w	r6, r3, r2
  return a + b;
  418888:	9b25      	ldr	r3, [sp, #148]	@ 0x94
  41888a:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  return a >> offset;
  41888e:	4122      	asrs	r2, r4
  return a + b;
  418890:	429e      	cmp	r6, r3
  418892:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
                  params.input1_shift);
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
  418896:	eb02 0608 	add.w	r6, r2, r8
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41889a:	45b6      	cmp	lr, r6
  41889c:	f000 84cf 	beq.w	41923e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xee6>
  std::int64_t ab_64 = a_64 * b_64;
  4188a0:	fb86 680e 	smull	r6, r8, r6, lr
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  4188a4:	f1b8 0f00 	cmp.w	r8, #0
  4188a8:	f2c0 84a7 	blt.w	4191fa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xea2>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  4188ac:	f116 4680 	adds.w	r6, r6, #1073741824	@ 0x40000000
  4188b0:	4632      	mov	r2, r6
  4188b2:	f148 0300 	adc.w	r3, r8, #0
  4188b6:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  4188ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  4188bc:	2b00      	cmp	r3, #0
  4188be:	f300 84cd 	bgt.w	41925c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf04>
  assert(exponent <= 31);
  4188c2:	331f      	adds	r3, #31
  4188c4:	f2c0 84c3 	blt.w	41924e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xef6>
  return a & b;
  4188c8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
  return a >> offset;
  4188ca:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
  return a & b;
  4188cc:	ea02 0603 	and.w	r6, r2, r3
  return a + b;
  4188d0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  4188d2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  return a >> offset;
  4188d6:	4122      	asrs	r2, r4
  return a + b;
  4188d8:	429e      	cmp	r6, r3
  4188da:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
  4188de:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  4188e0:	441a      	add	r2, r3
      if (__a < __b)
  4188e2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  4188e4:	429a      	cmp	r2, r3
  4188e6:	bfb8      	it	lt
  4188e8:	461a      	movlt	r2, r3
      if (__b < __a)
  4188ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  4188ec:	429a      	cmp	r2, r3
  4188ee:	bfa8      	it	ge
  4188f0:	461a      	movge	r2, r3
// allow that as long as the corresponding index is also 0. It is upto the
// calling ops to ensure that they perform verification checks on tensor shapes
// if they don't support a particular behavior.

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
  4188f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
              params.output_offset;
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
  4188f4:	b212      	sxth	r2, r2
  4188f6:	2b04      	cmp	r3, #4
  4188f8:	f040 82d7 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  4188fc:	f829 2f02 	strh.w	r2, [r9, #2]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  418900:	3101      	adds	r1, #1
  418902:	3801      	subs	r0, #1
  418904:	f000 8265 	beq.w	418dd2 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa7a>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  418908:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  41890a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  41890c:	429a      	cmp	r2, r3
  41890e:	f340 82cc 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  418912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
  418914:	4552      	cmp	r2, sl
  418916:	f340 82c8 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  41891a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
  41891c:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  41891e:	42b2      	cmp	r2, r6
  418920:	f340 82c3 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  418924:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
  418926:	428a      	cmp	r2, r1
  418928:	f340 82bf 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
  41892c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  41892e:	f932 8f02 	ldrsh.w	r8, [r2, #2]!
  418932:	920c      	str	r2, [sp, #48]	@ 0x30
          const int32_t input1_val =
  418934:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  418936:	4490      	add	r8, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  418938:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
  41893a:	429a      	cmp	r2, r3
  41893c:	f340 82b5 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  418940:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  418942:	4553      	cmp	r3, sl
  418944:	f340 82b1 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  418948:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41894a:	428b      	cmp	r3, r1
  41894c:	f340 82ad 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
          const int32_t shifted_input1_val =
  418950:	9b10      	ldr	r3, [sp, #64]	@ 0x40
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
  418952:	f935 6f02 	ldrsh.w	r6, [r5, #2]!
          const int32_t input2_val =
  418956:	9a12      	ldr	r2, [sp, #72]	@ 0x48
          const int32_t shifted_input1_val =
  418958:	fa08 f803 	lsl.w	r8, r8, r3
          const int32_t input2_val =
  41895c:	4416      	add	r6, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41895e:	45c4      	cmp	ip, r8
          const int32_t shifted_input2_val =
  418960:	fa06 f603 	lsl.w	r6, r6, r3
  418964:	f000 845b 	beq.w	41921e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xec6>
  std::int64_t ab_64 = a_64 * b_64;
  418968:	fb8c 8b08 	smull	r8, fp, ip, r8
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  41896c:	f1bb 0f00 	cmp.w	fp, #0
  418970:	f6bf af56 	bge.w	418820 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4c8>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  418974:	4b1d      	ldr	r3, [pc, #116]	@ (4189ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x694>)
  418976:	eb18 0803 	adds.w	r8, r8, r3
  41897a:	f16b 0b00 	sbc.w	fp, fp, #0
  41897e:	f1bb 0f00 	cmp.w	fp, #0
  418982:	da05      	bge.n	418990 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x638>
  418984:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  418988:	eb18 0803 	adds.w	r8, r8, r3
  41898c:	f14b 0b00 	adc.w	fp, fp, #0
  418990:	4642      	mov	r2, r8
  418992:	465b      	mov	r3, fp
  418994:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  418998:	e749      	b.n	41882e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4d6>
    TFLITE_DCHECK_LT(i, size_);
  41899a:	2c00      	cmp	r4, #0
      : size_(new_shape_size) {
  41899c:	9476      	str	r4, [sp, #472]	@ 0x1d8
    const int size_increase = new_shape_size - shape.DimensionsCount();
  41899e:	eba4 0302 	sub.w	r3, r4, r2
    TFLITE_DCHECK_LT(i, size_);
  4189a2:	f340 8282 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    dims_[i] = val;
  4189a6:	2101      	movs	r1, #1
    for (int i = 0; i < size_increase; ++i) {
  4189a8:	428b      	cmp	r3, r1
    dims_[i] = val;
  4189aa:	9177      	str	r1, [sp, #476]	@ 0x1dc
    for (int i = 0; i < size_increase; ++i) {
  4189ac:	d018      	beq.n	4189e0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x688>
    TFLITE_DCHECK_LT(i, size_);
  4189ae:	428c      	cmp	r4, r1
  4189b0:	f000 827b 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  4189b4:	2b02      	cmp	r3, #2
    dims_[i] = val;
  4189b6:	9178      	str	r1, [sp, #480]	@ 0x1e0
    for (int i = 0; i < size_increase; ++i) {
  4189b8:	d012      	beq.n	4189e0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x688>
    TFLITE_DCHECK_LT(i, size_);
  4189ba:	2c02      	cmp	r4, #2
  4189bc:	f000 8275 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  4189c0:	2b03      	cmp	r3, #3
    dims_[i] = val;
  4189c2:	9179      	str	r1, [sp, #484]	@ 0x1e4
    for (int i = 0; i < size_increase; ++i) {
  4189c4:	d00c      	beq.n	4189e0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x688>
    TFLITE_DCHECK_LT(i, size_);
  4189c6:	2c03      	cmp	r4, #3
  4189c8:	f000 826f 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  4189cc:	2b04      	cmp	r3, #4
    dims_[i] = val;
  4189ce:	917a      	str	r1, [sp, #488]	@ 0x1e8
    for (int i = 0; i < size_increase; ++i) {
  4189d0:	d006      	beq.n	4189e0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x688>
    TFLITE_DCHECK_LT(i, size_);
  4189d2:	2c04      	cmp	r4, #4
  4189d4:	f000 8269 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int i = 0; i < size_increase; ++i) {
  4189d8:	2b05      	cmp	r3, #5
    dims_[i] = val;
  4189da:	917b      	str	r1, [sp, #492]	@ 0x1ec
    for (int i = 0; i < size_increase; ++i) {
  4189dc:	f040 8265 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  4189e0:	a977      	add	r1, sp, #476	@ 0x1dc
	return __b;
  4189e2:	4625      	mov	r5, r4
  4189e4:	910f      	str	r1, [sp, #60]	@ 0x3c
  4189e6:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  4189ea:	e4e4      	b.n	4183b6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x5e>
  4189ec:	c0000001 	.word	0xc0000001
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
  4189f0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
  4189f2:	a97d      	add	r1, sp, #500	@ 0x1f4
  4189f4:	ea4f 0289 	mov.w	r2, r9, lsl #2
  4189f8:	f008 f83a 	bl	420a70 <memcmp>
    return this->size_ == comp.size_ &&
  4189fc:	900f      	str	r0, [sp, #60]	@ 0x3c
  4189fe:	2800      	cmp	r0, #0
  418a00:	f47f ad0e 	bne.w	418420 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc8>
  TFLITE_DCHECK(tensor != nullptr);
  418a04:	f1bb 0f00 	cmp.w	fp, #0
  418a08:	f000 824f 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  418a0c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  return reinterpret_cast<const T*>(tensor->data.raw);
  418a0e:	f8db 8000 	ldr.w	r8, [fp]
  TFLITE_DCHECK(tensor != nullptr);
  418a12:	2c00      	cmp	r4, #0
  418a14:	f000 8249 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(tensor != nullptr);
  418a18:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  return reinterpret_cast<const T*>(tensor->data.raw);
  418a1a:	f8d4 9000 	ldr.w	r9, [r4]
  TFLITE_DCHECK(tensor != nullptr);
  418a1e:	2d00      	cmp	r5, #0
  418a20:	f000 8243 	beq.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
        MatchingElementsSize(tflite::micro::GetTensorShape(input1),
  418a24:	4659      	mov	r1, fp
  418a26:	a852      	add	r0, sp, #328	@ 0x148
  return reinterpret_cast<T*>(tensor->data.raw);
  418a28:	f8d5 b000 	ldr.w	fp, [r5]
  418a2c:	f003 fdc0 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(input2),
  418a30:	4621      	mov	r1, r4
  418a32:	a84c      	add	r0, sp, #304	@ 0x130
  418a34:	f003 fdbc 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output)));
  418a38:	4629      	mov	r1, r5
  418a3a:	a846      	add	r0, sp, #280	@ 0x118
  418a3c:	f003 fdb8 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    for (int i = 0; i < size_; i++) {
  418a40:	9a52      	ldr	r2, [sp, #328]	@ 0x148
  418a42:	2a00      	cmp	r2, #0
  418a44:	f340 8233 	ble.w	418eae <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb56>
  418a48:	1e53      	subs	r3, r2, #1
  418a4a:	2b04      	cmp	r3, #4
  418a4c:	f240 823a 	bls.w	418ec4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb6c>
  418a50:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  418a54:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  418a58:	f1ae 0e10 	sub.w	lr, lr, #16
  418a5c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  418a60:	f10e 0e01 	add.w	lr, lr, #1
  418a64:	a853      	add	r0, sp, #332	@ 0x14c
  418a66:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  418a6a:	f04e e001 	dls	lr, lr
  418a6e:	4603      	mov	r3, r0
      buffer_size *= dims_data[i];
  418a70:	ecb3 5f04 	ldc	15, cr5, [r3], #16
  418a74:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  418a78:	f00f c007 	le	lr, 418a70 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x718>
  418a7c:	ee36 1b10 	vmov.32	r1, d6[1]
  418a80:	ee16 3a10 	vmov	r3, s12
  418a84:	fb01 f303 	mul.w	r3, r1, r3
  418a88:	ee17 1b10 	vmov.32	r1, d7[0]
  418a8c:	fb01 f303 	mul.w	r3, r1, r3
  418a90:	ee37 1b10 	vmov.32	r1, d7[1]
  418a94:	0794      	lsls	r4, r2, #30
  418a96:	fb01 f303 	mul.w	r3, r1, r3
  418a9a:	f022 0103 	bic.w	r1, r2, #3
  418a9e:	d021      	beq.n	418ae4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x78c>
      buffer_size *= dims_data[i];
  418aa0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  418aa4:	008c      	lsls	r4, r1, #2
  418aa6:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
  418aaa:	1c48      	adds	r0, r1, #1
  418aac:	4290      	cmp	r0, r2
  418aae:	da19      	bge.n	418ae4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x78c>
      buffer_size *= dims_data[i];
  418ab0:	a854      	add	r0, sp, #336	@ 0x150
  418ab2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  418ab6:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
  418aba:	1c88      	adds	r0, r1, #2
  418abc:	4290      	cmp	r0, r2
  418abe:	da11      	bge.n	418ae4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x78c>
      buffer_size *= dims_data[i];
  418ac0:	a855      	add	r0, sp, #340	@ 0x154
  418ac2:	5900      	ldr	r0, [r0, r4]
  418ac4:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
  418ac8:	1cc8      	adds	r0, r1, #3
  418aca:	4290      	cmp	r0, r2
  418acc:	da0a      	bge.n	418ae4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x78c>
      buffer_size *= dims_data[i];
  418ace:	a856      	add	r0, sp, #344	@ 0x158
  418ad0:	5900      	ldr	r0, [r0, r4]
    for (int i = 0; i < size_; i++) {
  418ad2:	3104      	adds	r1, #4
  418ad4:	4291      	cmp	r1, r2
      buffer_size *= dims_data[i];
  418ad6:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
  418ada:	da03      	bge.n	418ae4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x78c>
      buffer_size *= dims_data[i];
  418adc:	aa57      	add	r2, sp, #348	@ 0x15c
  418ade:	5912      	ldr	r2, [r2, r4]
  418ae0:	fb02 f303 	mul.w	r3, r2, r3
    for (int i = 0; i < size_; i++) {
  418ae4:	994c      	ldr	r1, [sp, #304]	@ 0x130
  418ae6:	9d46      	ldr	r5, [sp, #280]	@ 0x118
  418ae8:	2900      	cmp	r1, #0
  418aea:	f340 81f3 	ble.w	418ed4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb7c>
  418aee:	1e4a      	subs	r2, r1, #1
  418af0:	2a04      	cmp	r2, #4
  418af2:	f240 81eb 	bls.w	418ecc <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb74>
  418af6:	ea4f 0e91 	mov.w	lr, r1, lsr #2
    int buffer_size = 1;
  418afa:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  418afe:	f1ae 0e10 	sub.w	lr, lr, #16
  418b02:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  418b06:	f10e 0e01 	add.w	lr, lr, #1
  418b0a:	a84d      	add	r0, sp, #308	@ 0x134
  418b0c:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  418b10:	f04e e001 	dls	lr, lr
  418b14:	4602      	mov	r2, r0
      buffer_size *= dims_data[i];
  418b16:	ecb2 5f04 	ldc	15, cr5, [r2], #16
  418b1a:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  418b1e:	f00f c007 	le	lr, 418b16 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7be>
  418b22:	ee16 4a10 	vmov	r4, s12
  418b26:	ee36 2b10 	vmov.32	r2, d6[1]
  418b2a:	fb04 f202 	mul.w	r2, r4, r2
  418b2e:	ee17 4b10 	vmov.32	r4, d7[0]
  418b32:	fb04 f202 	mul.w	r2, r4, r2
  418b36:	ee37 4b10 	vmov.32	r4, d7[1]
  418b3a:	f011 0f03 	tst.w	r1, #3
  418b3e:	fb02 f404 	mul.w	r4, r2, r4
  418b42:	f021 0203 	bic.w	r2, r1, #3
  418b46:	d025      	beq.n	418b94 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x83c>
      buffer_size *= dims_data[i];
  418b48:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  418b4c:	ea4f 0c82 	mov.w	ip, r2, lsl #2
  418b50:	fb00 f404 	mul.w	r4, r0, r4
    for (int i = 0; i < size_; i++) {
  418b54:	1c50      	adds	r0, r2, #1
  418b56:	4288      	cmp	r0, r1
  418b58:	da1c      	bge.n	418b94 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x83c>
      buffer_size *= dims_data[i];
  418b5a:	a84e      	add	r0, sp, #312	@ 0x138
  418b5c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  418b60:	fb00 f404 	mul.w	r4, r0, r4
    for (int i = 0; i < size_; i++) {
  418b64:	1c90      	adds	r0, r2, #2
  418b66:	4288      	cmp	r0, r1
  418b68:	da14      	bge.n	418b94 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x83c>
      buffer_size *= dims_data[i];
  418b6a:	a84f      	add	r0, sp, #316	@ 0x13c
  418b6c:	f850 000c 	ldr.w	r0, [r0, ip]
  418b70:	fb00 f404 	mul.w	r4, r0, r4
    for (int i = 0; i < size_; i++) {
  418b74:	1cd0      	adds	r0, r2, #3
  418b76:	4288      	cmp	r0, r1
  418b78:	da0c      	bge.n	418b94 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x83c>
      buffer_size *= dims_data[i];
  418b7a:	a850      	add	r0, sp, #320	@ 0x140
  418b7c:	f850 000c 	ldr.w	r0, [r0, ip]
    for (int i = 0; i < size_; i++) {
  418b80:	3204      	adds	r2, #4
  418b82:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
  418b84:	fb00 f404 	mul.w	r4, r0, r4
    for (int i = 0; i < size_; i++) {
  418b88:	da04      	bge.n	418b94 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x83c>
      buffer_size *= dims_data[i];
  418b8a:	aa51      	add	r2, sp, #324	@ 0x144
  418b8c:	f852 200c 	ldr.w	r2, [r2, ip]
  418b90:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
  418b94:	2d00      	cmp	r5, #0
  418b96:	f340 81af 	ble.w	418ef8 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xba0>
  418b9a:	2d05      	cmp	r5, #5
  418b9c:	f340 81a8 	ble.w	418ef0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb98>
  418ba0:	ea4f 0e95 	mov.w	lr, r5, lsr #2
    int buffer_size = 1;
  418ba4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  418ba8:	f1ae 0e10 	sub.w	lr, lr, #16
  418bac:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  418bb0:	f10e 0e01 	add.w	lr, lr, #1
  418bb4:	a947      	add	r1, sp, #284	@ 0x11c
  418bb6:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  418bba:	f04e e001 	dls	lr, lr
  418bbe:	460a      	mov	r2, r1
      buffer_size *= dims_data[i];
  418bc0:	ecb2 5f04 	ldc	15, cr5, [r2], #16
  418bc4:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  418bc8:	f00f c007 	le	lr, 418bc0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x868>
  418bcc:	ee16 0a10 	vmov	r0, s12
  418bd0:	ee36 2b10 	vmov.32	r2, d6[1]
  418bd4:	fb00 f202 	mul.w	r2, r0, r2
  418bd8:	ee17 0b10 	vmov.32	r0, d7[0]
  418bdc:	fb00 f202 	mul.w	r2, r0, r2
  418be0:	ee37 0b10 	vmov.32	r0, d7[1]
  418be4:	fb00 f202 	mul.w	r2, r0, r2
  418be8:	07a8      	lsls	r0, r5, #30
  418bea:	d029      	beq.n	418c40 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8e8>
  418bec:	f025 0003 	bic.w	r0, r5, #3
  418bf0:	900f      	str	r0, [sp, #60]	@ 0x3c
      buffer_size *= dims_data[i];
  418bf2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  418bf6:	ea4f 0c80 	mov.w	ip, r0, lsl #2
  418bfa:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
  418bfe:	1c41      	adds	r1, r0, #1
  418c00:	42a9      	cmp	r1, r5
  418c02:	da1d      	bge.n	418c40 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8e8>
      buffer_size *= dims_data[i];
  418c04:	a948      	add	r1, sp, #288	@ 0x120
  418c06:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  418c0a:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
  418c0e:	1c81      	adds	r1, r0, #2
  418c10:	42a9      	cmp	r1, r5
  418c12:	da15      	bge.n	418c40 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8e8>
      buffer_size *= dims_data[i];
  418c14:	a949      	add	r1, sp, #292	@ 0x124
  418c16:	f851 100c 	ldr.w	r1, [r1, ip]
  418c1a:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
  418c1e:	1cc1      	adds	r1, r0, #3
  418c20:	42a9      	cmp	r1, r5
  418c22:	da0d      	bge.n	418c40 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8e8>
  418c24:	3004      	adds	r0, #4
  418c26:	4601      	mov	r1, r0
      buffer_size *= dims_data[i];
  418c28:	a84a      	add	r0, sp, #296	@ 0x128
  418c2a:	f850 000c 	ldr.w	r0, [r0, ip]
    for (int i = 0; i < size_; i++) {
  418c2e:	42a9      	cmp	r1, r5
      buffer_size *= dims_data[i];
  418c30:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  418c34:	da04      	bge.n	418c40 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8e8>
      buffer_size *= dims_data[i];
  418c36:	a94b      	add	r1, sp, #300	@ 0x12c
  418c38:	f851 100c 	ldr.w	r1, [r1, ip]
  418c3c:	fb01 f202 	mul.w	r2, r1, r2
  418c40:	429c      	cmp	r4, r3
  418c42:	f040 8132 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_CHECK_EQ(size_2, size_3);
  418c46:	429a      	cmp	r2, r3
  418c48:	f040 812f 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    arm_elementwise_add_s16(
  418c4c:	930b      	str	r3, [sp, #44]	@ 0x2c
  418c4e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  418c50:	9c12      	ldr	r4, [sp, #72]	@ 0x48
  418c52:	930a      	str	r3, [sp, #40]	@ 0x28
  418c54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  418c56:	9401      	str	r4, [sp, #4]
  418c58:	9309      	str	r3, [sp, #36]	@ 0x24
  418c5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  418c5c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  418c5e:	e9cd a307 	strd	sl, r3, [sp, #28]
  418c62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  418c64:	4649      	mov	r1, r9
  418c66:	e9cd b305 	strd	fp, r3, [sp, #20]
  418c6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  418c6c:	4640      	mov	r0, r8
  418c6e:	9304      	str	r3, [sp, #16]
  418c70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  418c72:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  418c74:	e9cd 6302 	strd	r6, r3, [sp, #8]
  418c78:	9400      	str	r4, [sp, #0]
  418c7a:	463b      	mov	r3, r7
  418c7c:	f7f8 f850 	bl	410d20 <arm_elementwise_add_s16>
}
  418c80:	2000      	movs	r0, #0
  418c82:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
  418c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK_LT(i, size_);
  418c8a:	008b      	lsls	r3, r1, #2
  418c8c:	4589      	cmp	r9, r1
  418c8e:	930f      	str	r3, [sp, #60]	@ 0x3c
  418c90:	f340 810b 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418c94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  418c96:	4463      	add	r3, ip
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).  If it is input_b
  // that has the unit dimension, the next two loops are not entered.
  while (i >= 0 && shape_a->Dims(i) == 1) {
  418c98:	685a      	ldr	r2, [r3, #4]
  418c9a:	2a01      	cmp	r2, #1
  418c9c:	f040 8295 	bne.w	4191ca <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe72>
    TFLITE_DCHECK_LT(i, size_);
  418ca0:	4541      	cmp	r1, r8
  418ca2:	f280 8102 	bge.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    params->broadcast_shape[3] *= shape_b->Dims(i);
    --i;
  418ca6:	1e48      	subs	r0, r1, #1
  while (i >= 0 && shape_a->Dims(i) == 1) {
  418ca8:	2900      	cmp	r1, #0
  418caa:	f43f ac1f 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418cae:	681a      	ldr	r2, [r3, #0]
  418cb0:	2a01      	cmp	r2, #1
  418cb2:	d11a      	bne.n	418cea <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x992>
  418cb4:	2901      	cmp	r1, #1
    --i;
  418cb6:	f1a1 0002 	sub.w	r0, r1, #2
  while (i >= 0 && shape_a->Dims(i) == 1) {
  418cba:	f43f ac17 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418cbe:	f853 2c04 	ldr.w	r2, [r3, #-4]
  418cc2:	2a01      	cmp	r2, #1
  418cc4:	d111      	bne.n	418cea <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x992>
  418cc6:	2902      	cmp	r1, #2
    --i;
  418cc8:	f1a1 0003 	sub.w	r0, r1, #3
  while (i >= 0 && shape_a->Dims(i) == 1) {
  418ccc:	f43f ac0e 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418cd0:	f853 2c08 	ldr.w	r2, [r3, #-8]
  418cd4:	2a01      	cmp	r2, #1
  418cd6:	d108      	bne.n	418cea <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x992>
  418cd8:	2904      	cmp	r1, #4
  418cda:	f47f ac07 	bne.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418cde:	f853 3c0c 	ldr.w	r3, [r3, #-12]
  418ce2:	2b01      	cmp	r3, #1
  418ce4:	f43f ac02 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
    --i;
  418ce8:	2000      	movs	r0, #0
  418cea:	4548      	cmp	r0, r9
  418cec:	f280 80dd 	bge.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418cf0:	eb0c 0580 	add.w	r5, ip, r0, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  418cf4:	4540      	cmp	r0, r8
    return dims_[i];
  418cf6:	6869      	ldr	r1, [r5, #4]
    TFLITE_DCHECK_LT(i, size_);
  418cf8:	ea4f 0380 	mov.w	r3, r0, lsl #2
  418cfc:	f280 80d5 	bge.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418d00:	4473      	add	r3, lr
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  418d02:	685a      	ldr	r2, [r3, #4]
  418d04:	428a      	cmp	r2, r1
  418d06:	f040 825e 	bne.w	4191c6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe6e>
    params->broadcast_shape[2] *= shape_a->Dims(i);
    --i;
  418d0a:	1e44      	subs	r4, r0, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  418d0c:	2800      	cmp	r0, #0
  418d0e:	f43f abed 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418d12:	6829      	ldr	r1, [r5, #0]
  418d14:	681a      	ldr	r2, [r3, #0]
  418d16:	4291      	cmp	r1, r2
  418d18:	d121      	bne.n	418d5e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa06>
  418d1a:	2801      	cmp	r0, #1
    --i;
  418d1c:	f1a0 0402 	sub.w	r4, r0, #2
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  418d20:	f43f abe4 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418d24:	f855 1c04 	ldr.w	r1, [r5, #-4]
  418d28:	f853 2c04 	ldr.w	r2, [r3, #-4]
  418d2c:	4291      	cmp	r1, r2
  418d2e:	d116      	bne.n	418d5e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa06>
  418d30:	2802      	cmp	r0, #2
    --i;
  418d32:	f1a0 0403 	sub.w	r4, r0, #3
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  418d36:	f43f abd9 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418d3a:	f855 1c08 	ldr.w	r1, [r5, #-8]
  418d3e:	f853 2c08 	ldr.w	r2, [r3, #-8]
  418d42:	4291      	cmp	r1, r2
  418d44:	d10b      	bne.n	418d5e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa06>
  418d46:	2804      	cmp	r0, #4
  418d48:	f47f abd0 	bne.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418d4c:	f855 2c0c 	ldr.w	r2, [r5, #-12]
  418d50:	f853 3c0c 	ldr.w	r3, [r3, #-12]
  418d54:	429a      	cmp	r2, r3
    --i;
  418d56:	bf18      	it	ne
  418d58:	2400      	movne	r4, #0
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  418d5a:	f43f abc7 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
    TFLITE_DCHECK_LT(i, size_);
  418d5e:	45a0      	cmp	r8, r4
  418d60:	f340 80a3 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418d64:	eb0e 0184 	add.w	r1, lr, r4, lsl #2
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).
  while (i >= 0 && shape_b->Dims(i) == 1) {
  418d68:	684b      	ldr	r3, [r1, #4]
  418d6a:	2b01      	cmp	r3, #1
  418d6c:	f040 822f 	bne.w	4191ce <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe76>
    TFLITE_DCHECK_LT(i, size_);
  418d70:	454c      	cmp	r4, r9
  418d72:	f280 809a 	bge.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    params->broadcast_shape[1] *= shape_a->Dims(i);
    --i;
  418d76:	1e63      	subs	r3, r4, #1
  while (i >= 0 && shape_b->Dims(i) == 1) {
  418d78:	2c00      	cmp	r4, #0
  418d7a:	f43f abb7 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418d7e:	680a      	ldr	r2, [r1, #0]
  418d80:	2a01      	cmp	r2, #1
  418d82:	d11a      	bne.n	418dba <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa62>
  418d84:	2c01      	cmp	r4, #1
    --i;
  418d86:	f1a4 0302 	sub.w	r3, r4, #2
  while (i >= 0 && shape_b->Dims(i) == 1) {
  418d8a:	f43f abaf 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418d8e:	f851 2c04 	ldr.w	r2, [r1, #-4]
  418d92:	2a01      	cmp	r2, #1
  418d94:	d111      	bne.n	418dba <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa62>
  418d96:	2c02      	cmp	r4, #2
    --i;
  418d98:	f1a4 0303 	sub.w	r3, r4, #3
  while (i >= 0 && shape_b->Dims(i) == 1) {
  418d9c:	f43f aba6 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418da0:	f851 2c08 	ldr.w	r2, [r1, #-8]
  418da4:	2a01      	cmp	r2, #1
  418da6:	d108      	bne.n	418dba <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa62>
  418da8:	2c04      	cmp	r4, #4
  418daa:	f47f ab9f 	bne.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418dae:	f851 3c0c 	ldr.w	r3, [r1, #-12]
  418db2:	2b01      	cmp	r3, #1
  418db4:	f43f ab9a 	beq.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
    --i;
  418db8:	2300      	movs	r3, #0
  418dba:	454b      	cmp	r3, r9
  418dbc:	da75      	bge.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  418dbe:	4543      	cmp	r3, r8
  418dc0:	f6ff ab94 	blt.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  418dc4:	e071      	b.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  const RuntimeShape* shape_a =
  418dc6:	f50d 7cec 	add.w	ip, sp, #472	@ 0x1d8
  const RuntimeShape* shape_b =
  418dca:	f50d 7ef8 	add.w	lr, sp, #496	@ 0x1f0
  418dce:	f7ff bb48 	b.w	418462 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
  418dd2:	e9dd b829 	ldrd	fp, r8, [sp, #164]	@ 0xa4
  418dd6:	e9dd 292b 	ldrd	r2, r9, [sp, #172]	@ 0xac
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  418dda:	9930      	ldr	r1, [sp, #192]	@ 0xc0
  418ddc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  418dde:	440a      	add	r2, r1
  418de0:	992f      	ldr	r1, [sp, #188]	@ 0xbc
  418de2:	3301      	adds	r3, #1
  418de4:	448b      	add	fp, r1
  418de6:	992d      	ldr	r1, [sp, #180]	@ 0xb4
  418de8:	930e      	str	r3, [sp, #56]	@ 0x38
  418dea:	4299      	cmp	r1, r3
  418dec:	44c1      	add	r9, r8
  418dee:	f73f acfa 	bgt.w	4187e6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x48e>
  418df2:	e9dd 6138 	ldrd	r6, r1, [sp, #224]	@ 0xe0
  418df6:	e9dd 033a 	ldrd	r0, r3, [sp, #232]	@ 0xe8
  418dfa:	9d3c      	ldr	r5, [sp, #240]	@ 0xf0
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  418dfc:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
  418dfe:	f10a 0a01 	add.w	sl, sl, #1
  418e02:	4410      	add	r0, r2
  418e04:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
  418e06:	4556      	cmp	r6, sl
  418e08:	442b      	add	r3, r5
  418e0a:	4411      	add	r1, r2
  418e0c:	f73f acd6 	bgt.w	4187bc <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x464>
  418e10:	e9dd 8943 	ldrd	r8, r9, [sp, #268]	@ 0x10c
  418e14:	4630      	mov	r0, r6
  418e16:	9a42      	ldr	r2, [sp, #264]	@ 0x108
  418e18:	f8dd b0a0 	ldr.w	fp, [sp, #160]	@ 0xa0
  418e1c:	9c45      	ldr	r4, [sp, #276]	@ 0x114
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  418e1e:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
  418e20:	f10b 0b01 	add.w	fp, fp, #1
  418e24:	4443      	add	r3, r8
  418e26:	933f      	str	r3, [sp, #252]	@ 0xfc
  418e28:	9b41      	ldr	r3, [sp, #260]	@ 0x104
  418e2a:	4491      	add	r9, r2
  418e2c:	441c      	add	r4, r3
  418e2e:	e4a2      	b.n	418776 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41e>
  for (int i = dims_count - 1; i >= 0; --i) {
  418e30:	2d01      	cmp	r5, #1
  418e32:	f1a5 0202 	sub.w	r2, r5, #2
  418e36:	d038      	beq.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  418e38:	4591      	cmp	r9, r2
  418e3a:	dd36      	ble.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418e3c:	aba4      	add	r3, sp, #656	@ 0x290
  418e3e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  418e42:	4590      	cmp	r8, r2
    return dims_[i];
  418e44:	f850 3cb4 	ldr.w	r3, [r0, #-180]
    TFLITE_DCHECK_LT(i, size_);
  418e48:	dd2f      	ble.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418e4a:	f850 2c9c 	ldr.w	r2, [r0, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  418e4e:	4293      	cmp	r3, r2
  418e50:	f47f aafb 	bne.w	41844a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2>
  for (int i = dims_count - 1; i >= 0; --i) {
  418e54:	2d02      	cmp	r5, #2
  418e56:	f1a5 0203 	sub.w	r2, r5, #3
  418e5a:	d026      	beq.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    TFLITE_DCHECK_LT(i, size_);
  418e5c:	4591      	cmp	r9, r2
  418e5e:	dd24      	ble.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418e60:	aba4      	add	r3, sp, #656	@ 0x290
  418e62:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  418e66:	4590      	cmp	r8, r2
    return dims_[i];
  418e68:	f850 3cb4 	ldr.w	r3, [r0, #-180]
    TFLITE_DCHECK_LT(i, size_);
  418e6c:	dd1d      	ble.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418e6e:	f850 2c9c 	ldr.w	r2, [r0, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  418e72:	4293      	cmp	r3, r2
  418e74:	f47f aae9 	bne.w	41844a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2>
  for (int i = dims_count - 1; i >= 0; --i) {
  418e78:	2d03      	cmp	r5, #3
  418e7a:	f1a5 0204 	sub.w	r2, r5, #4
  418e7e:	d014      	beq.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    TFLITE_DCHECK_LT(i, size_);
  418e80:	4591      	cmp	r9, r2
  418e82:	dd12      	ble.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418e84:	aba4      	add	r3, sp, #656	@ 0x290
  418e86:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  418e8a:	4590      	cmp	r8, r2
    return dims_[i];
  418e8c:	f850 3cb4 	ldr.w	r3, [r0, #-180]
    TFLITE_DCHECK_LT(i, size_);
  418e90:	dd0b      	ble.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    return dims_[i];
  418e92:	f850 2c9c 	ldr.w	r2, [r0, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  418e96:	4293      	cmp	r3, r2
  418e98:	f47f aad7 	bne.w	41844a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2>
  for (int i = dims_count - 1; i >= 0; --i) {
  418e9c:	2d05      	cmp	r5, #5
  418e9e:	d104      	bne.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  418ea0:	9b77      	ldr	r3, [sp, #476]	@ 0x1dc
  418ea2:	9a7d      	ldr	r2, [sp, #500]	@ 0x1f4
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  418ea4:	429a      	cmp	r2, r3
  418ea6:	f47f aad0 	bne.w	41844a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2>
    TFLITE_DCHECK_LT(i, size_);
  418eaa:	f006 f975 	bl	41f198 <abort>
    for (int i = 0; i < size_; i++) {
  418eae:	994c      	ldr	r1, [sp, #304]	@ 0x130
    int buffer_size = 1;
  418eb0:	2301      	movs	r3, #1
    for (int i = 0; i < size_; i++) {
  418eb2:	2900      	cmp	r1, #0
  418eb4:	9d46      	ldr	r5, [sp, #280]	@ 0x118
  418eb6:	f73f ae1a 	bgt.w	418aee <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x796>
  418eba:	2d00      	cmp	r5, #0
    int buffer_size = 1;
  418ebc:	461c      	mov	r4, r3
    for (int i = 0; i < size_; i++) {
  418ebe:	f73f ae6c 	bgt.w	418b9a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x842>
  418ec2:	e6c3      	b.n	418c4c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8f4>
    int buffer_size = 1;
  418ec4:	2301      	movs	r3, #1
    for (int i = 0; i < size_; i++) {
  418ec6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
  418ec8:	a853      	add	r0, sp, #332	@ 0x14c
  418eca:	e5e9      	b.n	418aa0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x748>
  418ecc:	2200      	movs	r2, #0
    int buffer_size = 1;
  418ece:	2401      	movs	r4, #1
  418ed0:	a84d      	add	r0, sp, #308	@ 0x134
  418ed2:	e639      	b.n	418b48 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7f0>
    for (int i = 0; i < size_; i++) {
  418ed4:	2d00      	cmp	r5, #0
    int buffer_size = 1;
  418ed6:	f04f 0401 	mov.w	r4, #1
    for (int i = 0; i < size_; i++) {
  418eda:	f73f ae5e 	bgt.w	418b9a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x842>
  TFLITE_CHECK_EQ(size_1, size_2);
  418ede:	42a3      	cmp	r3, r4
  418ee0:	f43f aeb4 	beq.w	418c4c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8f4>
  418ee4:	e7e1      	b.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
        desc0_out->strides[i] = 0;
  418ee6:	2300      	movs	r3, #0
        desc0_out->extents[i] = extent1;
  418ee8:	9597      	str	r5, [sp, #604]	@ 0x25c
        desc0_out->strides[i] = 0;
  418eea:	939b      	str	r3, [sp, #620]	@ 0x26c
  418eec:	f7ff bbb5 	b.w	41865a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x302>
    int buffer_size = 1;
  418ef0:	2201      	movs	r2, #1
  418ef2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
  418ef4:	a947      	add	r1, sp, #284	@ 0x11c
  418ef6:	e67c      	b.n	418bf2 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x89a>
  418ef8:	2201      	movs	r2, #1
  418efa:	e6a1      	b.n	418c40 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8e8>
  418efc:	004b      	lsls	r3, r1, #1
  418efe:	9329      	str	r3, [sp, #164]	@ 0xa4
  418f00:	0043      	lsls	r3, r0, #1
  return a >> offset;
  418f02:	2000      	movs	r0, #0
  418f04:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
  418f06:	932a      	str	r3, [sp, #168]	@ 0xa8
  418f08:	fb02 f304 	mul.w	r3, r2, r4
  418f0c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
  418f0e:	46be      	mov	lr, r7
  418f10:	fb01 fc03 	mul.w	ip, r1, r3
  418f14:	fb01 f302 	mul.w	r3, r1, r2
  418f18:	4637      	mov	r7, r6
  418f1a:	4662      	mov	r2, ip
  418f1c:	9338      	str	r3, [sp, #224]	@ 0xe0
  418f1e:	4625      	mov	r5, r4
  418f20:	4601      	mov	r1, r0
  418f22:	464b      	mov	r3, r9
  418f24:	4680      	mov	r8, r0
  418f26:	46d4      	mov	ip, sl
  418f28:	9028      	str	r0, [sp, #160]	@ 0xa0
  418f2a:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
  418f2c:	9e3e      	ldr	r6, [sp, #248]	@ 0xf8
  418f2e:	42b4      	cmp	r4, r6
  418f30:	f6bf aea6 	bge.w	418c80 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x928>
    TFLITE_DCHECK_LT(i, size_);
  418f34:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
  418f36:	2c01      	cmp	r4, #1
  418f38:	d0b7      	beq.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  418f3a:	2d00      	cmp	r5, #0
  418f3c:	f340 8138 	ble.w	4191b0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe58>
  418f40:	2c02      	cmp	r4, #2
  418f42:	d0b2      	beq.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  418f44:	933f      	str	r3, [sp, #252]	@ 0xfc
  418f46:	4646      	mov	r6, r8
  418f48:	f04f 0a00 	mov.w	sl, #0
  418f4c:	4603      	mov	r3, r0
  418f4e:	9c40      	ldr	r4, [sp, #256]	@ 0x100
  418f50:	e9cd 0843 	strd	r0, r8, [sp, #268]	@ 0x10c
  418f54:	3c02      	subs	r4, #2
  418f56:	9245      	str	r2, [sp, #276]	@ 0x114
  418f58:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
  418f5a:	9433      	str	r4, [sp, #204]	@ 0xcc
  418f5c:	9142      	str	r1, [sp, #264]	@ 0x108
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  418f5e:	982d      	ldr	r0, [sp, #180]	@ 0xb4
  418f60:	2800      	cmp	r0, #0
  418f62:	f340 8115 	ble.w	419190 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe38>
  418f66:	980f      	ldr	r0, [sp, #60]	@ 0x3c
  418f68:	2803      	cmp	r0, #3
  418f6a:	d09e      	beq.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  418f6c:	2000      	movs	r0, #0
  418f6e:	46b0      	mov	r8, r6
  418f70:	4689      	mov	r9, r1
  418f72:	469b      	mov	fp, r3
  418f74:	e9cd 1339 	strd	r1, r3, [sp, #228]	@ 0xe4
  418f78:	e9cd 563b 	strd	r5, r6, [sp, #236]	@ 0xec
  418f7c:	900e      	str	r0, [sp, #56]	@ 0x38
  418f7e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
  418f80:	990e      	ldr	r1, [sp, #56]	@ 0x38
  418f82:	428b      	cmp	r3, r1
  418f84:	f340 81a8 	ble.w	4192d8 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf80>
  418f88:	2301      	movs	r3, #1
  418f8a:	2a00      	cmp	r2, #0
  418f8c:	eb02 0003 	add.w	r0, r2, r3
  418f90:	bfb8      	it	lt
  418f92:	4618      	movlt	r0, r3
  418f94:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
  418f96:	e9cd 8931 	strd	r8, r9, [sp, #196]	@ 0xc4
  418f9a:	eb03 0649 	add.w	r6, r3, r9, lsl #1
  418f9e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  418fa0:	2100      	movs	r1, #0
  418fa2:	eb03 0548 	add.w	r5, r3, r8, lsl #1
  418fa6:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
  418fa8:	46b1      	mov	r9, r6
  418faa:	e9cd b22b 	strd	fp, r2, [sp, #172]	@ 0xac
  418fae:	eb03 044b 	add.w	r4, r3, fp, lsl #1
  418fb2:	900c      	str	r0, [sp, #48]	@ 0x30
  418fb4:	e075      	b.n	4190a2 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xd4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  418fb6:	f118 4880 	adds.w	r8, r8, #1073741824	@ 0x40000000
  418fba:	4642      	mov	r2, r8
  418fbc:	f14b 0300 	adc.w	r3, fp, #0
  418fc0:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  418fc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  418fc6:	2b00      	cmp	r3, #0
  418fc8:	f300 8148 	bgt.w	41925c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf04>
  assert(exponent <= 31);
  418fcc:	331f      	adds	r3, #31
  418fce:	f2c0 813e 	blt.w	41924e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xef6>
  return a & b;
  418fd2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  return a >> offset;
  418fd4:	9821      	ldr	r0, [sp, #132]	@ 0x84
  return a & b;
  418fd6:	ea02 0b03 	and.w	fp, r2, r3
  return a + b;
  418fda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
  return a >> offset;
  418fdc:	fa42 f800 	asr.w	r8, r2, r0
  return a + b;
  418fe0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  418fe4:	459b      	cmp	fp, r3
  418fe6:	ea58 98d8 			@ <UNDEFINED> instruction: 0xea5898d8
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  418fea:	42b7      	cmp	r7, r6
  418fec:	f000 8166 	beq.w	4192bc <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf64>
  std::int64_t ab_64 = a_64 * b_64;
  418ff0:	fb87 6b06 	smull	r6, fp, r7, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  418ff4:	f1bb 0f00 	cmp.w	fp, #0
  418ff8:	f2c0 8137 	blt.w	41926a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf12>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  418ffc:	f116 4680 	adds.w	r6, r6, #1073741824	@ 0x40000000
  419000:	4632      	mov	r2, r6
  419002:	f14b 0300 	adc.w	r3, fp, #0
  419006:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  41900a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  41900c:	2b00      	cmp	r3, #0
  41900e:	f300 8125 	bgt.w	41925c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf04>
  assert(exponent <= 31);
  419012:	331f      	adds	r3, #31
  419014:	f2c0 811b 	blt.w	41924e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xef6>
  return a & b;
  419018:	9b24      	ldr	r3, [sp, #144]	@ 0x90
  return a >> offset;
  41901a:	9820      	ldr	r0, [sp, #128]	@ 0x80
  return a & b;
  41901c:	ea02 0603 	and.w	r6, r2, r3
  return a + b;
  419020:	9b25      	ldr	r3, [sp, #148]	@ 0x94
  419022:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  return a >> offset;
  419026:	4102      	asrs	r2, r0
  return a + b;
  419028:	429e      	cmp	r6, r3
  41902a:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
  41902e:	eb02 0608 	add.w	r6, r2, r8
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  419032:	45b4      	cmp	ip, r6
  419034:	f000 8149 	beq.w	4192ca <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf72>
  std::int64_t ab_64 = a_64 * b_64;
  419038:	fb86 680c 	smull	r6, r8, r6, ip
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  41903c:	f1b8 0f00 	cmp.w	r8, #0
  419040:	f2c0 8124 	blt.w	41928c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf34>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  419044:	f116 4680 	adds.w	r6, r6, #1073741824	@ 0x40000000
  419048:	4632      	mov	r2, r6
  41904a:	f148 0300 	adc.w	r3, r8, #0
  41904e:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  419052:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  419054:	2b00      	cmp	r3, #0
  419056:	f300 8101 	bgt.w	41925c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf04>
  assert(exponent <= 31);
  41905a:	331f      	adds	r3, #31
  41905c:	f2c0 80f7 	blt.w	41924e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xef6>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
  419060:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
  return a >> offset;
  419062:	981f      	ldr	r0, [sp, #124]	@ 0x7c
  419064:	441d      	add	r5, r3
  419066:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
  419068:	441c      	add	r4, r3
  return a & b;
  41906a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
  41906c:	ea02 0603 	and.w	r6, r2, r3
  return a + b;
  419070:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  419072:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  return a >> offset;
  419076:	4102      	asrs	r2, r0
  return a + b;
  419078:	429e      	cmp	r6, r3
  41907a:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
                  raw_sum, params.output_multiplier, params.output_shift) +
  41907e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  419080:	18d3      	adds	r3, r2, r3
      if (__a < __b)
  419082:	9a16      	ldr	r2, [sp, #88]	@ 0x58
  419084:	4293      	cmp	r3, r2
  419086:	bfb8      	it	lt
  419088:	4613      	movlt	r3, r2
      if (__b < __a)
  41908a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
  41908c:	4293      	cmp	r3, r2
  41908e:	bfa8      	it	ge
  419090:	4613      	movge	r3, r2
  419092:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
          output_data[Offset(extended_output_shape, b, y, x, c)] =
  419094:	b21b      	sxth	r3, r3
  419096:	2a04      	cmp	r2, #4
  419098:	f47f af07 	bne.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  41909c:	f829 3f02 	strh.w	r3, [r9, #2]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  4190a0:	3101      	adds	r1, #1
  4190a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  4190a4:	3b01      	subs	r3, #1
  4190a6:	930c      	str	r3, [sp, #48]	@ 0x30
  4190a8:	d05e      	beq.n	419168 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe10>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  4190aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  4190ac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  4190ae:	4293      	cmp	r3, r2
  4190b0:	f6bf aefb 	bge.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  4190b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
  4190b6:	4552      	cmp	r2, sl
  4190b8:	f77f aef7 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  4190bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
  4190be:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  4190c0:	42b2      	cmp	r2, r6
  4190c2:	f77f aef2 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  4190c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
  4190c8:	4291      	cmp	r1, r2
  4190ca:	f6bf aeee 	bge.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
          const int32_t input1_val =
  4190ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
  4190d0:	f9b4 8000 	ldrsh.w	r8, [r4]
          const int32_t input1_val =
  4190d4:	4490      	add	r8, r2
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  4190d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
  4190d8:	4293      	cmp	r3, r2
  4190da:	f6bf aee6 	bge.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  4190de:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  4190e0:	4553      	cmp	r3, sl
  4190e2:	f77f aee2 	ble.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  4190e6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  4190e8:	4299      	cmp	r1, r3
  4190ea:	f6bf aede 	bge.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
          const int32_t shifted_input1_val =
  4190ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
  4190f0:	f9b5 6000 	ldrsh.w	r6, [r5]
          const int32_t input2_val =
  4190f4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
          const int32_t shifted_input1_val =
  4190f6:	fa08 f803 	lsl.w	r8, r8, r3
          const int32_t input2_val =
  4190fa:	4416      	add	r6, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  4190fc:	45c6      	cmp	lr, r8
          const int32_t shifted_input2_val =
  4190fe:	fa06 f603 	lsl.w	r6, r6, r3
  419102:	f000 80d4 	beq.w	4192ae <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf56>
  std::int64_t ab_64 = a_64 * b_64;
  419106:	fb88 8b0e 	smull	r8, fp, r8, lr
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  41910a:	f1bb 0f00 	cmp.w	fp, #0
  41910e:	f6bf af52 	bge.w	418fb6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc5e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  419112:	4b78      	ldr	r3, [pc, #480]	@ (4192f4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf9c>)
  419114:	eb18 0803 	adds.w	r8, r8, r3
  419118:	f16b 0b00 	sbc.w	fp, fp, #0
  41911c:	f1bb 0f00 	cmp.w	fp, #0
  419120:	da05      	bge.n	41912e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdd6>
  419122:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  419126:	eb18 0803 	adds.w	r8, r8, r3
  41912a:	f14b 0b00 	adc.w	fp, fp, #0
  41912e:	4642      	mov	r2, r8
  419130:	465b      	mov	r3, fp
  419132:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  419136:	e745      	b.n	418fc4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc6c>
        desc0_out->extents[i] = extent1;
  419138:	9396      	str	r3, [sp, #600]	@ 0x258
        desc0_out->strides[i] = 0;
  41913a:	2300      	movs	r3, #0
  41913c:	939a      	str	r3, [sp, #616]	@ 0x268
  41913e:	f7ff ba7f 	b.w	418640 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2e8>
        desc0_out->extents[i] = extent1;
  419142:	9295      	str	r2, [sp, #596]	@ 0x254
        desc0_out->strides[i] = 0;
  419144:	2200      	movs	r2, #0
  419146:	9299      	str	r2, [sp, #612]	@ 0x264
  419148:	f7ff ba6d 	b.w	418626 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ce>
        desc0_out->extents[i] = extent1;
  41914c:	9094      	str	r0, [sp, #592]	@ 0x250
        desc0_out->strides[i] = 0;
  41914e:	2000      	movs	r0, #0
  419150:	9098      	str	r0, [sp, #608]	@ 0x260
  419152:	f7ff ba5d 	b.w	418610 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2b8>
  while (i >= 0 && shape_a->Dims(i) == 1) {
  419156:	f8dc 3004 	ldr.w	r3, [ip, #4]
  41915a:	2b01      	cmp	r3, #1
    --i;
  41915c:	bf18      	it	ne
  41915e:	2100      	movne	r1, #0
  while (i >= 0 && shape_a->Dims(i) == 1) {
  419160:	d133      	bne.n	4191ca <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe72>
  419162:	4663      	mov	r3, ip
    --i;
  419164:	2100      	movs	r1, #0
  419166:	e59e      	b.n	418ca6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x94e>
  419168:	e9dd b22b 	ldrd	fp, r2, [sp, #172]	@ 0xac
  41916c:	e9dd 8931 	ldrd	r8, r9, [sp, #196]	@ 0xc4
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  419170:	9930      	ldr	r1, [sp, #192]	@ 0xc0
  419172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  419174:	4488      	add	r8, r1
  419176:	992f      	ldr	r1, [sp, #188]	@ 0xbc
  419178:	3301      	adds	r3, #1
  41917a:	448b      	add	fp, r1
  41917c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
  41917e:	930e      	str	r3, [sp, #56]	@ 0x38
  419180:	428b      	cmp	r3, r1
  419182:	4491      	add	r9, r2
  419184:	f6ff aefb 	blt.w	418f7e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc26>
  419188:	e9dd 1339 	ldrd	r1, r3, [sp, #228]	@ 0xe4
  41918c:	e9dd 563b 	ldrd	r5, r6, [sp, #236]	@ 0xec
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  419190:	9838      	ldr	r0, [sp, #224]	@ 0xe0
  419192:	f10a 0a01 	add.w	sl, sl, #1
    TFLITE_DCHECK_LT(i, size_);
  419196:	4401      	add	r1, r0
  419198:	9837      	ldr	r0, [sp, #220]	@ 0xdc
  41919a:	45aa      	cmp	sl, r5
  41919c:	4406      	add	r6, r0
  41919e:	9836      	ldr	r0, [sp, #216]	@ 0xd8
  4191a0:	4403      	add	r3, r0
  4191a2:	f6ff aedc 	blt.w	418f5e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc06>
  4191a6:	e9dd 1042 	ldrd	r1, r0, [sp, #264]	@ 0x108
  4191aa:	e9dd 8244 	ldrd	r8, r2, [sp, #272]	@ 0x110
  4191ae:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  4191b0:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
  4191b2:	4411      	add	r1, r2
  4191b4:	3401      	adds	r4, #1
  4191b6:	9428      	str	r4, [sp, #160]	@ 0xa0
  4191b8:	9c41      	ldr	r4, [sp, #260]	@ 0x104
  4191ba:	4498      	add	r8, r3
  4191bc:	4420      	add	r0, r4
  4191be:	e6b4      	b.n	418f2a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xbd2>
  4191c0:	008b      	lsls	r3, r1, #2
  4191c2:	930f      	str	r3, [sp, #60]	@ 0x3c
  4191c4:	e566      	b.n	418c94 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x93c>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  4191c6:	4604      	mov	r4, r0
  4191c8:	e5cc      	b.n	418d64 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa0c>
    --i;
  4191ca:	4608      	mov	r0, r1
  4191cc:	e590      	b.n	418cf0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x998>
  4191ce:	454c      	cmp	r4, r9
  4191d0:	f6ff a98c 	blt.w	4184ec <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  4191d4:	e669      	b.n	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  4191d6:	4b47      	ldr	r3, [pc, #284]	@ (4192f4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf9c>)
  4191d8:	18f6      	adds	r6, r6, r3
  4191da:	f16b 0b00 	sbc.w	fp, fp, #0
  4191de:	f1bb 0f00 	cmp.w	fp, #0
  4191e2:	da04      	bge.n	4191ee <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe96>
  4191e4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  4191e8:	18f6      	adds	r6, r6, r3
  4191ea:	f14b 0b00 	adc.w	fp, fp, #0
  4191ee:	4632      	mov	r2, r6
  4191f0:	465b      	mov	r3, fp
  4191f2:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  4191f6:	f7ff bb3c 	b.w	418872 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x51a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  4191fa:	4b3e      	ldr	r3, [pc, #248]	@ (4192f4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf9c>)
  4191fc:	18f6      	adds	r6, r6, r3
  4191fe:	f168 0800 	sbc.w	r8, r8, #0
  419202:	f1b8 0f00 	cmp.w	r8, #0
  419206:	da04      	bge.n	419212 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xeba>
  419208:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  41920c:	18f6      	adds	r6, r6, r3
  41920e:	f148 0800 	adc.w	r8, r8, #0
  419212:	4632      	mov	r2, r6
  419214:	4643      	mov	r3, r8
  419216:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41921a:	f7ff bb4e 	b.w	4188ba <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x562>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41921e:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
  419222:	f47f aba1 	bne.w	418968 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x610>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  419226:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  41922a:	f7ff bb00 	b.w	41882e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4d6>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41922e:	f1b7 4f00 	cmp.w	r7, #2147483648	@ 0x80000000
  419232:	f47f ab11 	bne.w	418858 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x500>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  419236:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  41923a:	f7ff bb1a 	b.w	418872 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x51a>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41923e:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
  419242:	f47f ab2d 	bne.w	4188a0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x548>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  419246:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  41924a:	f7ff bb36 	b.w	4188ba <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x562>
  assert(exponent <= 31);
  41924e:	f240 1167 	movw	r1, #359	@ 0x167
  419252:	4b29      	ldr	r3, [pc, #164]	@ (4192f8 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfa0>)
  419254:	4a29      	ldr	r2, [pc, #164]	@ (4192fc <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfa4>)
  419256:	482a      	ldr	r0, [pc, #168]	@ (419300 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfa8>)
  419258:	f005 ffa6 	bl	41f1a8 <__assert_func>
  assert(exponent >= 0);
  41925c:	f44f 71b3 	mov.w	r1, #358	@ 0x166
  419260:	4b28      	ldr	r3, [pc, #160]	@ (419304 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfac>)
  419262:	4a26      	ldr	r2, [pc, #152]	@ (4192fc <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfa4>)
  419264:	4826      	ldr	r0, [pc, #152]	@ (419300 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfa8>)
  419266:	f005 ff9f 	bl	41f1a8 <__assert_func>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  41926a:	4b22      	ldr	r3, [pc, #136]	@ (4192f4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf9c>)
  41926c:	18f6      	adds	r6, r6, r3
  41926e:	f16b 0b00 	sbc.w	fp, fp, #0
  419272:	f1bb 0f00 	cmp.w	fp, #0
  419276:	da04      	bge.n	419282 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2a>
  419278:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  41927c:	18f6      	adds	r6, r6, r3
  41927e:	f14b 0b00 	adc.w	fp, fp, #0
  419282:	4632      	mov	r2, r6
  419284:	465b      	mov	r3, fp
  419286:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41928a:	e6be      	b.n	41900a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xcb2>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  41928c:	4b19      	ldr	r3, [pc, #100]	@ (4192f4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf9c>)
  41928e:	18f6      	adds	r6, r6, r3
  419290:	f168 0800 	sbc.w	r8, r8, #0
  419294:	f1b8 0f00 	cmp.w	r8, #0
  419298:	da04      	bge.n	4192a4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf4c>
  41929a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  41929e:	18f6      	adds	r6, r6, r3
  4192a0:	f148 0800 	adc.w	r8, r8, #0
  4192a4:	4632      	mov	r2, r6
  4192a6:	4643      	mov	r3, r8
  4192a8:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  4192ac:	e6d1      	b.n	419052 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xcfa>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  4192ae:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
  4192b2:	f47f af28 	bne.w	419106 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdae>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  4192b6:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  4192ba:	e683      	b.n	418fc4 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc6c>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  4192bc:	f1b7 4f00 	cmp.w	r7, #2147483648	@ 0x80000000
  4192c0:	f47f ae96 	bne.w	418ff0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc98>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  4192c4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  4192c8:	e69f      	b.n	41900a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xcb2>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  4192ca:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
  4192ce:	f47f aeb3 	bne.w	419038 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xce0>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  4192d2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  4192d6:	e6bc      	b.n	419052 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xcfa>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  4192d8:	2a00      	cmp	r2, #0
  4192da:	f73f ade6 	bgt.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  4192de:	e747      	b.n	419170 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe18>
  4192e0:	9918      	ldr	r1, [sp, #96]	@ 0x60
  4192e2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  4192e4:	4299      	cmp	r1, r3
  4192e6:	ddff      	ble.n	4192e8 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf90>
  4192e8:	f1b8 0f00 	cmp.w	r8, #0
  4192ec:	f73f addd 	bgt.w	418eaa <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb52>
  4192f0:	e573      	b.n	418dda <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa82>
  4192f2:	bf00      	nop
  4192f4:	c0000001 	.word	0xc0000001
  4192f8:	00434b14 	.word	0x00434b14
  4192fc:	00434a68 	.word	0x00434a68
  419300:	00434ac4 	.word	0x00434ac4
  419304:	00434a58 	.word	0x00434a58

00419308 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
TfLiteStatus EvalAddQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
  419308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41930c:	4604      	mov	r4, r0
  41930e:	4615      	mov	r5, r2
  419310:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
  419314:	930e      	str	r3, [sp, #56]	@ 0x38
  op_params->left_shift = data->left_shift;
  419316:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      tflite::micro::GetTensorShape(input1),
  419318:	a86e      	add	r0, sp, #440	@ 0x1b8
  op_params->left_shift = data->left_shift;
  41931a:	9310      	str	r3, [sp, #64]	@ 0x40
  op_params->input1_offset = data->input1_offset;
  41931c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
TfLiteStatus EvalAddQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
  41931e:	920c      	str	r2, [sp, #48]	@ 0x30
  op_params->input1_offset = data->input1_offset;
  419320:	9311      	str	r3, [sp, #68]	@ 0x44
  op_params->input1_shift = data->input1_shift;
  419322:	6863      	ldr	r3, [r4, #4]
TfLiteStatus EvalAddQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
  419324:	468b      	mov	fp, r1
  op_params->input1_shift = data->input1_shift;
  419326:	930d      	str	r3, [sp, #52]	@ 0x34
  op_params->input2_offset = data->input2_offset;
  419328:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  op_params->input1_multiplier = data->input1_multiplier;
  41932a:	6967      	ldr	r7, [r4, #20]
  op_params->input2_offset = data->input2_offset;
  41932c:	9312      	str	r3, [sp, #72]	@ 0x48
  op_params->input2_shift = data->input2_shift;
  41932e:	68a3      	ldr	r3, [r4, #8]
  op_params->input2_multiplier = data->input2_multiplier;
  419330:	69a6      	ldr	r6, [r4, #24]
  op_params->input2_shift = data->input2_shift;
  419332:	9313      	str	r3, [sp, #76]	@ 0x4c
  op_params->output_offset = data->output_offset;
  419334:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  419336:	9315      	str	r3, [sp, #84]	@ 0x54
  op_params->output_shift = data->output_shift;
  419338:	e9d4 a307 	ldrd	sl, r3, [r4, #28]
  41933c:	9314      	str	r3, [sp, #80]	@ 0x50
  SetActivationParams(data->output_activation_min, data->output_activation_max,
  41933e:	68e3      	ldr	r3, [r4, #12]
  419340:	9316      	str	r3, [sp, #88]	@ 0x58
  419342:	6923      	ldr	r3, [r4, #16]
  419344:	9317      	str	r3, [sp, #92]	@ 0x5c
      tflite::micro::GetTensorShape(input1),
  419346:	f003 f933 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
  41934a:	4629      	mov	r1, r5
  41934c:	a868      	add	r0, sp, #416	@ 0x1a0
  41934e:	f003 f92f 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
  419352:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
  419354:	9c68      	ldr	r4, [sp, #416]	@ 0x1a0
      if (__a < __b)
  419356:	42a2      	cmp	r2, r4
  419358:	f2c0 82e5 	blt.w	419926 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x61e>
      : size_(new_shape_size) {
  41935c:	ab75      	add	r3, sp, #468	@ 0x1d4
      return __a;
  41935e:	4615      	mov	r5, r2
  419360:	4618      	mov	r0, r3
  419362:	9274      	str	r2, [sp, #464]	@ 0x1d0
  419364:	930f      	str	r3, [sp, #60]	@ 0x3c
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  419366:	0092      	lsls	r2, r2, #2
  419368:	a96f      	add	r1, sp, #444	@ 0x1bc
  41936a:	f7f7 f927 	bl	4105bc <memcpy>
    for (int i = 0; i < size_increase; ++i) {
  41936e:	1b28      	subs	r0, r5, r4
      : size_(new_shape_size) {
  419370:	957a      	str	r5, [sp, #488]	@ 0x1e8
    for (int i = 0; i < size_increase; ++i) {
  419372:	d01f      	beq.n	4193b4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac>
    TFLITE_DCHECK_LT(i, size_);
  419374:	2d00      	cmp	r5, #0
  419376:	f340 855d 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    dims_[i] = val;
  41937a:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41937c:	4298      	cmp	r0, r3
    dims_[i] = val;
  41937e:	937b      	str	r3, [sp, #492]	@ 0x1ec
    for (int i = 0; i < size_increase; ++i) {
  419380:	d018      	beq.n	4193b4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac>
    TFLITE_DCHECK_LT(i, size_);
  419382:	429d      	cmp	r5, r3
  419384:	f000 8556 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  419388:	2802      	cmp	r0, #2
    dims_[i] = val;
  41938a:	937c      	str	r3, [sp, #496]	@ 0x1f0
    for (int i = 0; i < size_increase; ++i) {
  41938c:	d012      	beq.n	4193b4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac>
    TFLITE_DCHECK_LT(i, size_);
  41938e:	2d02      	cmp	r5, #2
  419390:	f000 8550 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  419394:	2803      	cmp	r0, #3
    dims_[i] = val;
  419396:	937d      	str	r3, [sp, #500]	@ 0x1f4
    for (int i = 0; i < size_increase; ++i) {
  419398:	d00c      	beq.n	4193b4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac>
    TFLITE_DCHECK_LT(i, size_);
  41939a:	2d03      	cmp	r5, #3
  41939c:	f000 854a 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  4193a0:	2804      	cmp	r0, #4
    dims_[i] = val;
  4193a2:	937e      	str	r3, [sp, #504]	@ 0x1f8
    for (int i = 0; i < size_increase; ++i) {
  4193a4:	d006      	beq.n	4193b4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac>
    TFLITE_DCHECK_LT(i, size_);
  4193a6:	2d04      	cmp	r5, #4
  4193a8:	f000 8544 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  4193ac:	2805      	cmp	r0, #5
    dims_[i] = val;
  4193ae:	937f      	str	r3, [sp, #508]	@ 0x1fc
    for (int i = 0; i < size_increase; ++i) {
  4193b0:	f040 8540 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  4193b4:	ab7b      	add	r3, sp, #492	@ 0x1ec
  4193b6:	00a2      	lsls	r2, r4, #2
  4193b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4193bc:	a969      	add	r1, sp, #420	@ 0x1a4
  4193be:	f7f7 f8fd 	bl	4105bc <memcpy>
    return this->size_ == comp.size_ &&
  4193c2:	f8dd 91d0 	ldr.w	r9, [sp, #464]	@ 0x1d0
  4193c6:	f8dd 81e8 	ldr.w	r8, [sp, #488]	@ 0x1e8
  4193ca:	45c1      	cmp	r9, r8
  4193cc:	f000 82d6 	beq.w	41997c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x674>
  for (int i = dims_count - 1; i >= 0; --i) {
  4193d0:	1e69      	subs	r1, r5, #1
  4193d2:	f100 852f 	bmi.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    TFLITE_DCHECK_LT(i, size_);
  4193d6:	4589      	cmp	r9, r1
  4193d8:	f340 852c 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  4193dc:	aba2      	add	r3, sp, #648	@ 0x288
  4193de:	eb03 0281 	add.w	r2, r3, r1, lsl #2
  4193e2:	0088      	lsls	r0, r1, #2
    TFLITE_DCHECK_LT(i, size_);
  4193e4:	4588      	cmp	r8, r1
    return dims_[i];
  4193e6:	f852 3cb4 	ldr.w	r3, [r2, #-180]
  4193ea:	900f      	str	r0, [sp, #60]	@ 0x3c
    TFLITE_DCHECK_LT(i, size_);
  4193ec:	f340 8522 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  4193f0:	f852 2c9c 	ldr.w	r2, [r2, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  4193f4:	4293      	cmp	r3, r2
  4193f6:	f000 84e0 	beq.w	419dba <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xab2>
    } else if (extended_shape0.Dims(i) == 1) {
  4193fa:	2b01      	cmp	r3, #1
  4193fc:	f000 84a9 	beq.w	419d52 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa4a>
    } else if (extended_shape1.Dims(i) == 1) {
  419400:	2a01      	cmp	r2, #1
  419402:	d14b      	bne.n	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419404:	464b      	mov	r3, r9
  419406:	46c1      	mov	r9, r8
  419408:	4698      	mov	r8, r3
  const RuntimeShape* shape_a =
  41940a:	f50d 7cf4 	add.w	ip, sp, #488	@ 0x1e8
  const RuntimeShape* shape_b =
  41940e:	f50d 7ee8 	add.w	lr, sp, #464	@ 0x1d0
    TFLITE_DCHECK_LT(i, size_);
  419412:	4541      	cmp	r1, r8
    return dims_[i];
  419414:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
  419418:	ea4f 0085 	mov.w	r0, r5, lsl #2
  41941c:	eb0c 0485 	add.w	r4, ip, r5, lsl #2
  419420:	f280 8508 	bge.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  419424:	f85e 3025 	ldr.w	r3, [lr, r5, lsl #2]
  419428:	4470      	add	r0, lr
  41942a:	429a      	cmp	r2, r3
  41942c:	f040 83f8 	bne.w	419c20 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x918>
  419430:	2d01      	cmp	r5, #1
    --i;
  419432:	f1a5 0102 	sub.w	r1, r5, #2
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  419436:	d031      	beq.n	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419438:	f854 2c04 	ldr.w	r2, [r4, #-4]
  41943c:	f850 3c04 	ldr.w	r3, [r0, #-4]
  419440:	429a      	cmp	r2, r3
  419442:	f040 83e8 	bne.w	419c16 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x90e>
  419446:	2d02      	cmp	r5, #2
    --i;
  419448:	f1a5 0103 	sub.w	r1, r5, #3
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41944c:	d026      	beq.n	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  41944e:	4589      	cmp	r9, r1
  419450:	f340 84f0 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419454:	4588      	cmp	r8, r1
    return dims_[i];
  419456:	f854 2c08 	ldr.w	r2, [r4, #-8]
    TFLITE_DCHECK_LT(i, size_);
  41945a:	f340 84eb 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  41945e:	f850 3c08 	ldr.w	r3, [r0, #-8]
  419462:	429a      	cmp	r2, r3
  419464:	f040 866e 	bne.w	41a144 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe3c>
  419468:	2d03      	cmp	r5, #3
    --i;
  41946a:	f1a5 0104 	sub.w	r1, r5, #4
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41946e:	d015      	beq.n	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419470:	4589      	cmp	r9, r1
  419472:	f340 84df 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419476:	4588      	cmp	r8, r1
    return dims_[i];
  419478:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    TFLITE_DCHECK_LT(i, size_);
  41947c:	f340 84da 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419480:	f850 3c0c 	ldr.w	r3, [r0, #-12]
  419484:	429a      	cmp	r2, r3
  419486:	f040 865d 	bne.w	41a144 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe3c>
  41948a:	2d05      	cmp	r5, #5
  41948c:	d106      	bne.n	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  41948e:	f854 2c10 	ldr.w	r2, [r4, #-16]
  419492:	f850 3c10 	ldr.w	r3, [r0, #-16]
  419496:	429a      	cmp	r2, r3
  419498:	f040 861f 	bne.w	41a0da <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdd2>
        op_params, tflite::micro::GetTensorShape(input1),
  41949c:	4659      	mov	r1, fp
  41949e:	a862      	add	r0, sp, #392	@ 0x188
  4194a0:	f003 f886 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  4194a4:	f1bb 0f00 	cmp.w	fp, #0
  4194a8:	f000 84c4 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
        tflite::micro::GetTensorShape(input2),
  4194ac:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  return reinterpret_cast<const T*>(tensor->data.raw);
  4194ae:	f8db 3000 	ldr.w	r3, [fp]
  4194b2:	4621      	mov	r1, r4
  4194b4:	a85c      	add	r0, sp, #368	@ 0x170
  4194b6:	9333      	str	r3, [sp, #204]	@ 0xcc
  4194b8:	f003 f87a 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  4194bc:	2c00      	cmp	r4, #0
  4194be:	f000 84b9 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  return reinterpret_cast<const T*>(tensor->data.raw);
  4194c2:	6823      	ldr	r3, [r4, #0]
        tflite::micro::GetTensorShape(output),
  4194c4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
  4194c6:	a856      	add	r0, sp, #344	@ 0x158
  4194c8:	4621      	mov	r1, r4
  4194ca:	9334      	str	r3, [sp, #208]	@ 0xd0
  4194cc:	f003 f870 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  4194d0:	2c00      	cmp	r4, #0
  4194d2:	f000 84af 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
      : size_(new_shape_size) {
  4194d6:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  4194d8:	9a62      	ldr	r2, [sp, #392]	@ 0x188
  return reinterpret_cast<T*>(tensor->data.raw);
  4194da:	f8d4 9000 	ldr.w	r9, [r4]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  4194de:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
  4194e0:	9386      	str	r3, [sp, #536]	@ 0x218
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  4194e2:	f300 84a7 	bgt.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  4194e6:	1a98      	subs	r0, r3, r2
  4194e8:	d00d      	beq.n	419506 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1fe>
    dims_[i] = val;
  4194ea:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  4194ec:	4298      	cmp	r0, r3
    dims_[i] = val;
  4194ee:	9387      	str	r3, [sp, #540]	@ 0x21c
    for (int i = 0; i < size_increase; ++i) {
  4194f0:	d009      	beq.n	419506 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1fe>
  4194f2:	2802      	cmp	r0, #2
    dims_[i] = val;
  4194f4:	9388      	str	r3, [sp, #544]	@ 0x220
    for (int i = 0; i < size_increase; ++i) {
  4194f6:	d006      	beq.n	419506 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1fe>
  4194f8:	2803      	cmp	r0, #3
    dims_[i] = val;
  4194fa:	9389      	str	r3, [sp, #548]	@ 0x224
    for (int i = 0; i < size_increase; ++i) {
  4194fc:	d003      	beq.n	419506 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1fe>
  4194fe:	2804      	cmp	r0, #4
    dims_[i] = val;
  419500:	938a      	str	r3, [sp, #552]	@ 0x228
    for (int i = 0; i < size_increase; ++i) {
  419502:	f040 8497 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  419506:	ab87      	add	r3, sp, #540	@ 0x21c
  419508:	0092      	lsls	r2, r2, #2
  41950a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41950e:	a963      	add	r1, sp, #396	@ 0x18c
  419510:	f7f7 f854 	bl	4105bc <memcpy>
      : size_(new_shape_size) {
  419514:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  419516:	9a5c      	ldr	r2, [sp, #368]	@ 0x170
      : size_(new_shape_size) {
  419518:	938c      	str	r3, [sp, #560]	@ 0x230
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41951a:	429a      	cmp	r2, r3
  41951c:	f300 848a 	bgt.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  419520:	1a98      	subs	r0, r3, r2
  419522:	d00d      	beq.n	419540 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x238>
    dims_[i] = val;
  419524:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  419526:	4298      	cmp	r0, r3
    dims_[i] = val;
  419528:	938d      	str	r3, [sp, #564]	@ 0x234
    for (int i = 0; i < size_increase; ++i) {
  41952a:	d009      	beq.n	419540 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x238>
  41952c:	2802      	cmp	r0, #2
    dims_[i] = val;
  41952e:	938e      	str	r3, [sp, #568]	@ 0x238
    for (int i = 0; i < size_increase; ++i) {
  419530:	d006      	beq.n	419540 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x238>
  419532:	2803      	cmp	r0, #3
    dims_[i] = val;
  419534:	938f      	str	r3, [sp, #572]	@ 0x23c
    for (int i = 0; i < size_increase; ++i) {
  419536:	d003      	beq.n	419540 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x238>
  419538:	2804      	cmp	r0, #4
    dims_[i] = val;
  41953a:	9390      	str	r3, [sp, #576]	@ 0x240
    for (int i = 0; i < size_increase; ++i) {
  41953c:	f040 847a 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  419540:	ab8d      	add	r3, sp, #564	@ 0x234
  419542:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  419546:	0092      	lsls	r2, r2, #2
  419548:	a95d      	add	r1, sp, #372	@ 0x174
  41954a:	f7f7 f837 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41954e:	9b86      	ldr	r3, [sp, #536]	@ 0x218
  419550:	2b03      	cmp	r3, #3
  419552:	f340 846f 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    desc_out->strides[i] = desc_stride;
  419556:	2201      	movs	r2, #1
    return dims_[i];
  419558:	f8dd c228 	ldr.w	ip, [sp, #552]	@ 0x228
  41955c:	f8dd e224 	ldr.w	lr, [sp, #548]	@ 0x224
  419560:	9988      	ldr	r1, [sp, #544]	@ 0x220
    desc_stride *= input_shape.Dims(i);
  419562:	fb0c f30e 	mul.w	r3, ip, lr
    desc_out->strides[i] = desc_stride;
  419566:	9397      	str	r3, [sp, #604]	@ 0x25c
    desc_stride *= input_shape.Dims(i);
  419568:	fb01 f303 	mul.w	r3, r1, r3
    desc_out->strides[i] = desc_stride;
  41956c:	9396      	str	r3, [sp, #600]	@ 0x258
    TFLITE_DCHECK_LT(i, size_);
  41956e:	9b8c      	ldr	r3, [sp, #560]	@ 0x230
    return dims_[i];
  419570:	9c87      	ldr	r4, [sp, #540]	@ 0x21c
    TFLITE_DCHECK_LT(i, size_);
  419572:	2b03      	cmp	r3, #3
    desc_out->extents[i] = input_shape.Dims(i);
  419574:	f8cd c254 	str.w	ip, [sp, #596]	@ 0x254
    desc_out->strides[i] = desc_stride;
  419578:	f8cd c260 	str.w	ip, [sp, #608]	@ 0x260
    desc_out->extents[i] = input_shape.Dims(i);
  41957c:	f8cd e250 	str.w	lr, [sp, #592]	@ 0x250
    desc_out->strides[i] = desc_stride;
  419580:	9299      	str	r2, [sp, #612]	@ 0x264
    desc_out->extents[i] = input_shape.Dims(i);
  419582:	9193      	str	r1, [sp, #588]	@ 0x24c
  419584:	9492      	str	r4, [sp, #584]	@ 0x248
  419586:	f340 8455 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  41958a:	9d90      	ldr	r5, [sp, #576]	@ 0x240
  41958c:	9b8f      	ldr	r3, [sp, #572]	@ 0x23c
    desc_out->strides[i] = desc_stride;
  41958e:	92a1      	str	r2, [sp, #644]	@ 0x284
    desc_stride *= input_shape.Dims(i);
  419590:	fb05 f003 	mul.w	r0, r5, r3
  419594:	9a8e      	ldr	r2, [sp, #568]	@ 0x238
    desc_out->strides[i] = desc_stride;
  419596:	909f      	str	r0, [sp, #636]	@ 0x27c
    desc_stride *= input_shape.Dims(i);
  419598:	fb02 f000 	mul.w	r0, r2, r0
    desc_out->strides[i] = desc_stride;
  41959c:	909e      	str	r0, [sp, #632]	@ 0x278
  41959e:	988d      	ldr	r0, [sp, #564]	@ 0x234
    desc_out->extents[i] = input_shape.Dims(i);
  4195a0:	959d      	str	r5, [sp, #628]	@ 0x274
    if (extent0 != extent1) {
  4195a2:	42a0      	cmp	r0, r4
    desc_out->strides[i] = desc_stride;
  4195a4:	95a0      	str	r5, [sp, #640]	@ 0x280
    desc_out->extents[i] = input_shape.Dims(i);
  4195a6:	939c      	str	r3, [sp, #624]	@ 0x270
  4195a8:	929b      	str	r2, [sp, #620]	@ 0x26c
  4195aa:	909a      	str	r0, [sp, #616]	@ 0x268
    if (extent0 != extent1) {
  4195ac:	d008      	beq.n	4195c0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2b8>
      if (extent0 == 1) {
  4195ae:	2c01      	cmp	r4, #1
  4195b0:	f000 858e 	beq.w	41a0d0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdc8>
        TFLITE_DCHECK_EQ(extent1, 1);
  4195b4:	2801      	cmp	r0, #1
  4195b6:	f040 843d 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
        desc1_out->strides[i] = 0;
  4195ba:	2000      	movs	r0, #0
        desc1_out->extents[i] = extent0;
  4195bc:	949a      	str	r4, [sp, #616]	@ 0x268
        desc1_out->strides[i] = 0;
  4195be:	909e      	str	r0, [sp, #632]	@ 0x278
    if (extent0 != extent1) {
  4195c0:	428a      	cmp	r2, r1
  4195c2:	d008      	beq.n	4195d6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ce>
      if (extent0 == 1) {
  4195c4:	2901      	cmp	r1, #1
  4195c6:	f000 857e 	beq.w	41a0c6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdbe>
        TFLITE_DCHECK_EQ(extent1, 1);
  4195ca:	2a01      	cmp	r2, #1
  4195cc:	f040 8432 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
        desc1_out->strides[i] = 0;
  4195d0:	2200      	movs	r2, #0
        desc1_out->extents[i] = extent0;
  4195d2:	919b      	str	r1, [sp, #620]	@ 0x26c
        desc1_out->strides[i] = 0;
  4195d4:	929f      	str	r2, [sp, #636]	@ 0x27c
    if (extent0 != extent1) {
  4195d6:	459e      	cmp	lr, r3
  4195d8:	d00a      	beq.n	4195f0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2e8>
      if (extent0 == 1) {
  4195da:	f1be 0f01 	cmp.w	lr, #1
  4195de:	f000 856d 	beq.w	41a0bc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdb4>
        TFLITE_DCHECK_EQ(extent1, 1);
  4195e2:	2b01      	cmp	r3, #1
  4195e4:	f040 8426 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
        desc1_out->strides[i] = 0;
  4195e8:	2300      	movs	r3, #0
        desc1_out->extents[i] = extent0;
  4195ea:	f8cd e270 	str.w	lr, [sp, #624]	@ 0x270
        desc1_out->strides[i] = 0;
  4195ee:	93a0      	str	r3, [sp, #640]	@ 0x280
    if (extent0 != extent1) {
  4195f0:	45ac      	cmp	ip, r5
  4195f2:	d00a      	beq.n	41960a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x302>
      if (extent0 == 1) {
  4195f4:	f1bc 0f01 	cmp.w	ip, #1
  4195f8:	f000 843a 	beq.w	419e70 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb68>
        TFLITE_DCHECK_EQ(extent1, 1);
  4195fc:	2d01      	cmp	r5, #1
  4195fe:	f040 8419 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
        desc1_out->strides[i] = 0;
  419602:	2300      	movs	r3, #0
        desc1_out->extents[i] = extent0;
  419604:	f8cd c274 	str.w	ip, [sp, #628]	@ 0x274
        desc1_out->strides[i] = 0;
  419608:	93a1      	str	r3, [sp, #644]	@ 0x284
      : size_(new_shape_size) {
  41960a:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  41960c:	9a56      	ldr	r2, [sp, #344]	@ 0x158
      : size_(new_shape_size) {
  41960e:	9380      	str	r3, [sp, #512]	@ 0x200
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  419610:	429a      	cmp	r2, r3
  419612:	f300 840f 	bgt.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  419616:	1a98      	subs	r0, r3, r2
  419618:	d00d      	beq.n	419636 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32e>
    dims_[i] = val;
  41961a:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41961c:	4298      	cmp	r0, r3
    dims_[i] = val;
  41961e:	9381      	str	r3, [sp, #516]	@ 0x204
    for (int i = 0; i < size_increase; ++i) {
  419620:	d009      	beq.n	419636 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32e>
  419622:	2802      	cmp	r0, #2
    dims_[i] = val;
  419624:	9382      	str	r3, [sp, #520]	@ 0x208
    for (int i = 0; i < size_increase; ++i) {
  419626:	d006      	beq.n	419636 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32e>
  419628:	2803      	cmp	r0, #3
    dims_[i] = val;
  41962a:	9383      	str	r3, [sp, #524]	@ 0x20c
    for (int i = 0; i < size_increase; ++i) {
  41962c:	d003      	beq.n	419636 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32e>
  41962e:	2804      	cmp	r0, #4
    dims_[i] = val;
  419630:	9384      	str	r3, [sp, #528]	@ 0x210
    for (int i = 0; i < size_increase; ++i) {
  419632:	f040 83ff 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  419636:	ab81      	add	r3, sp, #516	@ 0x204
  419638:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41963c:	0092      	lsls	r2, r2, #2
  41963e:	a957      	add	r1, sp, #348	@ 0x15c
  419640:	f7f6 ffbc 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  419644:	9b80      	ldr	r3, [sp, #512]	@ 0x200
  419646:	2b00      	cmp	r3, #0
  419648:	930f      	str	r3, [sp, #60]	@ 0x3c
  41964a:	f340 83f3 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  41964e:	9881      	ldr	r0, [sp, #516]	@ 0x204
  return RoundingDivideByPOT(
  419650:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  419652:	9038      	str	r0, [sp, #224]	@ 0xe0
  419654:	e9dd 0482 	ldrd	r0, r4, [sp, #520]	@ 0x208
  419658:	942d      	str	r4, [sp, #180]	@ 0xb4
  41965a:	9c92      	ldr	r4, [sp, #584]	@ 0x248
  41965c:	4259      	negs	r1, r3
  41965e:	9418      	str	r4, [sp, #96]	@ 0x60
  419660:	9c93      	ldr	r4, [sp, #588]	@ 0x24c
  419662:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  419664:	9419      	str	r4, [sp, #100]	@ 0x64
  419666:	9c94      	ldr	r4, [sp, #592]	@ 0x250
  419668:	425d      	negs	r5, r3
  41966a:	941a      	str	r4, [sp, #104]	@ 0x68
  41966c:	9c95      	ldr	r4, [sp, #596]	@ 0x254
  41966e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  419670:	941d      	str	r4, [sp, #116]	@ 0x74
  419672:	9c96      	ldr	r4, [sp, #600]	@ 0x258
  419674:	9a99      	ldr	r2, [sp, #612]	@ 0x264
  419676:	943a      	str	r4, [sp, #232]	@ 0xe8
  419678:	9c97      	ldr	r4, [sp, #604]	@ 0x25c
  41967a:	425b      	negs	r3, r3
  41967c:	9435      	str	r4, [sp, #212]	@ 0xd4
  41967e:	9c98      	ldr	r4, [sp, #608]	@ 0x260
  419680:	9120      	str	r1, [sp, #128]	@ 0x80
  419682:	942f      	str	r4, [sp, #188]	@ 0xbc
  419684:	9c9a      	ldr	r4, [sp, #616]	@ 0x268
  419686:	9523      	str	r5, [sp, #140]	@ 0x8c
  419688:	941b      	str	r4, [sp, #108]	@ 0x6c
  41968a:	9c9b      	ldr	r4, [sp, #620]	@ 0x26c
  41968c:	931f      	str	r3, [sp, #124]	@ 0x7c
  41968e:	9229      	str	r2, [sp, #164]	@ 0xa4
  419690:	f8dd 8210 	ldr.w	r8, [sp, #528]	@ 0x210
  419694:	941c      	str	r4, [sp, #112]	@ 0x70
  419696:	9c9c      	ldr	r4, [sp, #624]	@ 0x270
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  419698:	2201      	movs	r2, #1
  41969a:	942e      	str	r4, [sp, #184]	@ 0xb8
  41969c:	9c9d      	ldr	r4, [sp, #628]	@ 0x274
  41969e:	941e      	str	r4, [sp, #120]	@ 0x78
  4196a0:	9c9e      	ldr	r4, [sp, #632]	@ 0x278
  4196a2:	943b      	str	r4, [sp, #236]	@ 0xec
  4196a4:	e9dd 439f 	ldrd	r4, r3, [sp, #636]	@ 0x27c
  4196a8:	9330      	str	r3, [sp, #192]	@ 0xc0
  4196aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
  4196ac:	932a      	str	r3, [sp, #168]	@ 0xa8
  4196ae:	2300      	movs	r3, #0
  4196b0:	ea52 130d 	orrs.w	r3, r2, sp, lsl #4
  4196b4:	2300      	movs	r3, #0
  4196b6:	1e51      	subs	r1, r2, #1
  4196b8:	2201      	movs	r2, #1
  4196ba:	ea52 530d 	orrs.w	r3, r2, sp, lsl #20
  4196be:	2300      	movs	r3, #0
  4196c0:	1e55      	subs	r5, r2, #1
  4196c2:	2201      	movs	r2, #1
  4196c4:	9121      	str	r1, [sp, #132]	@ 0x84
  return a >> offset;
  4196c6:	1049      	asrs	r1, r1, #1
  4196c8:	9122      	str	r1, [sp, #136]	@ 0x88
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  4196ca:	991f      	ldr	r1, [sp, #124]	@ 0x7c
  4196cc:	9524      	str	r5, [sp, #144]	@ 0x90
  4196ce:	ea52 130d 	orrs.w	r3, r2, sp, lsl #4
  4196d2:	1e51      	subs	r1, r2, #1
  4196d4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
  return a >> offset;
  4196d6:	106d      	asrs	r5, r5, #1
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  4196d8:	9126      	str	r1, [sp, #152]	@ 0x98
  4196da:	2a01      	cmp	r2, #1
  return a >> offset;
  4196dc:	ea4f 0161 	mov.w	r1, r1, asr #1
  4196e0:	9525      	str	r5, [sp, #148]	@ 0x94
  4196e2:	9127      	str	r1, [sp, #156]	@ 0x9c
  4196e4:	f040 83ce 	bne.w	419e84 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb7c>
  4196e8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
  4196ea:	3b01      	subs	r3, #1
  4196ec:	bf18      	it	ne
  4196ee:	2301      	movne	r3, #1
  4196f0:	2b00      	cmp	r3, #0
  4196f2:	f040 83c7 	bne.w	419e84 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb7c>
  4196f6:	e9dd 2b33 	ldrd	r2, fp, [sp, #204]	@ 0xcc
  4196fa:	9239      	str	r2, [sp, #228]	@ 0xe4
  4196fc:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  4196fe:	9328      	str	r3, [sp, #160]	@ 0xa0
  419700:	fb02 f300 	mul.w	r3, r2, r0
  419704:	fb08 fe02 	mul.w	lr, r8, r2
  419708:	fb08 f303 	mul.w	r3, r8, r3
  41970c:	46bc      	mov	ip, r7
  41970e:	4625      	mov	r5, r4
  419710:	4637      	mov	r7, r6
  419712:	461a      	mov	r2, r3
  419714:	464e      	mov	r6, r9
  419716:	4674      	mov	r4, lr
  419718:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
  41971a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
  41971c:	428b      	cmp	r3, r1
  41971e:	f340 8275 	ble.w	419c0c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x904>
    TFLITE_DCHECK_LT(i, size_);
  419722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  419724:	2b01      	cmp	r3, #1
  419726:	f000 8385 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  41972a:	2800      	cmp	r0, #0
  41972c:	f340 833a 	ble.w	419da4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa9c>
  419730:	2b02      	cmp	r3, #2
  419732:	f000 837f 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419736:	f04f 0e00 	mov.w	lr, #0
  41973a:	4631      	mov	r1, r6
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  41973c:	963d      	str	r6, [sp, #244]	@ 0xf4
  41973e:	46f1      	mov	r9, lr
  419740:	4606      	mov	r6, r0
  419742:	4658      	mov	r0, fp
  419744:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
  419746:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
  41974a:	f8cd b0f0 	str.w	fp, [sp, #240]	@ 0xf0
  41974e:	923e      	str	r2, [sp, #248]	@ 0xf8
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  419750:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
  419752:	2a00      	cmp	r2, #0
  419754:	f340 8319 	ble.w	419d8a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa82>
  419758:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  41975a:	2a03      	cmp	r2, #3
  41975c:	f000 836a 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419760:	2200      	movs	r2, #0
  419762:	920e      	str	r2, [sp, #56]	@ 0x38
  419764:	1e5a      	subs	r2, r3, #1
  419766:	9336      	str	r3, [sp, #216]	@ 0xd8
  419768:	4613      	mov	r3, r2
  41976a:	460a      	mov	r2, r1
  41976c:	469e      	mov	lr, r3
  41976e:	e9cd 1631 	strd	r1, r6, [sp, #196]	@ 0xc4
  419772:	e9cd 5033 	strd	r5, r0, [sp, #204]	@ 0xcc
  419776:	f100 3bff 	add.w	fp, r0, #4294967295	@ 0xffffffff
  41977a:	9437      	str	r4, [sp, #220]	@ 0xdc
  41977c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
  41977e:	990e      	ldr	r1, [sp, #56]	@ 0x38
  419780:	428b      	cmp	r3, r1
  419782:	f340 856f 	ble.w	41a264 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf5c>
  419786:	2301      	movs	r3, #1
  419788:	f1b8 0f00 	cmp.w	r8, #0
  41978c:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
  419790:	eb08 0003 	add.w	r0, r8, r3
  419794:	e9cd 2829 	strd	r2, r8, [sp, #164]	@ 0xa4
  419798:	bfb8      	it	lt
  41979a:	4618      	movlt	r0, r3
  41979c:	4675      	mov	r5, lr
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41979e:	2100      	movs	r1, #0
  4197a0:	46b0      	mov	r8, r6
  4197a2:	e9cd be2b 	strd	fp, lr, [sp, #172]	@ 0xac
  4197a6:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
  4197aa:	e070      	b.n	41988e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x586>
  4197ac:	f11e 4e80 	adds.w	lr, lr, #1073741824	@ 0x40000000
  4197b0:	4672      	mov	r2, lr
  4197b2:	f14b 0300 	adc.w	r3, fp, #0
  4197b6:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  4197ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  4197bc:	2b00      	cmp	r3, #0
  4197be:	f300 850f 	bgt.w	41a1e0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xed8>
  assert(exponent <= 31);
  4197c2:	331f      	adds	r3, #31
  4197c4:	f2c0 8505 	blt.w	41a1d2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xeca>
  return a + b;
  4197c8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  return a >> offset;
  4197ca:	9c20      	ldr	r4, [sp, #128]	@ 0x80
  return a + b;
  4197cc:	eb03 7bd2 	add.w	fp, r3, r2, lsr #31
  return a & b;
  4197d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
  return a >> offset;
  4197d2:	fa42 fe04 	asr.w	lr, r2, r4
  return a & b;
  4197d6:	4013      	ands	r3, r2
  return a + b;
  4197d8:	459b      	cmp	fp, r3
  4197da:	ea5e 9eae 			@ <UNDEFINED> instruction: 0xea5e9eae
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  4197de:	42b7      	cmp	r7, r6
  4197e0:	f000 84e7 	beq.w	41a1b2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xeaa>
  std::int64_t ab_64 = a_64 * b_64;
  4197e4:	fb87 6b06 	smull	r6, fp, r7, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  4197e8:	f1bb 0f00 	cmp.w	fp, #0
  4197ec:	f2c0 84b5 	blt.w	41a15a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe52>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  4197f0:	f116 4680 	adds.w	r6, r6, #1073741824	@ 0x40000000
  4197f4:	4632      	mov	r2, r6
  4197f6:	f14b 0300 	adc.w	r3, fp, #0
  4197fa:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  4197fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  419800:	2b00      	cmp	r3, #0
  419802:	f300 84ed 	bgt.w	41a1e0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xed8>
  assert(exponent <= 31);
  419806:	331f      	adds	r3, #31
  419808:	f2c0 84e3 	blt.w	41a1d2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xeca>
  return a & b;
  41980c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
  return a >> offset;
  41980e:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
  return a & b;
  419810:	ea03 0602 	and.w	r6, r3, r2
  return a + b;
  419814:	9b25      	ldr	r3, [sp, #148]	@ 0x94
  419816:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  return a >> offset;
  41981a:	4122      	asrs	r2, r4
  return a + b;
  41981c:	429e      	cmp	r6, r3
  41981e:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
  const int32_t scaled_input2_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input2_val, params.input2_multiplier, params.input2_shift);
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
  419822:	eb02 060e 	add.w	r6, r2, lr
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  419826:	45b2      	cmp	sl, r6
  419828:	f000 84cb 	beq.w	41a1c2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xeba>
  std::int64_t ab_64 = a_64 * b_64;
  41982c:	fb86 6e0a 	smull	r6, lr, r6, sl
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  419830:	f1be 0f00 	cmp.w	lr, #0
  419834:	f2c0 84a3 	blt.w	41a17e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe76>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  419838:	f116 4680 	adds.w	r6, r6, #1073741824	@ 0x40000000
  41983c:	4632      	mov	r2, r6
  41983e:	f14e 0300 	adc.w	r3, lr, #0
  419842:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  419846:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  419848:	2b00      	cmp	r3, #0
  41984a:	f300 84c9 	bgt.w	41a1e0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xed8>
  assert(exponent <= 31);
  41984e:	331f      	adds	r3, #31
  419850:	f2c0 84bf 	blt.w	41a1d2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xeca>
  return a & b;
  419854:	9b26      	ldr	r3, [sp, #152]	@ 0x98
  return a >> offset;
  419856:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
  return a & b;
  419858:	ea03 0602 	and.w	r6, r3, r2
  return a + b;
  41985c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  41985e:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  return a >> offset;
  419862:	4122      	asrs	r2, r4
  return a + b;
  419864:	429e      	cmp	r6, r3
  419866:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
  const int32_t raw_output =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          raw_sum, params.output_multiplier, params.output_shift) +
  41986a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  41986c:	441a      	add	r2, r3
      if (__a < __b)
  41986e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  419870:	429a      	cmp	r2, r3
  419872:	bfb8      	it	lt
  419874:	461a      	movlt	r2, r3
      if (__b < __a)
  419876:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  419878:	429a      	cmp	r2, r3
  41987a:	bfa8      	it	ge
  41987c:	461a      	movge	r2, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
  41987e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
      params.output_offset;
  const int32_t clamped_output =
      std::min(params.quantized_activation_max,
               std::max(params.quantized_activation_min, raw_output));
  return static_cast<int8_t>(clamped_output);
  419880:	b252      	sxtb	r2, r2
  419882:	2b04      	cmp	r3, #4
  419884:	f040 82d6 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
  419888:	f808 2f01 	strb.w	r2, [r8, #1]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41988c:	3101      	adds	r1, #1
  41988e:	3801      	subs	r0, #1
  419890:	f000 8265 	beq.w	419d5e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa56>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  419894:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  419896:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  419898:	429a      	cmp	r2, r3
  41989a:	f340 82cb 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  41989e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
  4198a0:	454a      	cmp	r2, r9
  4198a2:	f340 82c7 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  4198a6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
  4198a8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  4198aa:	42b2      	cmp	r2, r6
  4198ac:	f340 82c2 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  4198b0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
  4198b2:	428a      	cmp	r2, r1
  4198b4:	f340 82be 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  4198b8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
  4198ba:	f915 ef01 	ldrsb.w	lr, [r5, #1]!
  4198be:	429a      	cmp	r2, r3
  4198c0:	f340 82b8 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  4198c4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  4198c6:	454b      	cmp	r3, r9
  4198c8:	f340 82b4 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  4198cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  4198ce:	428b      	cmp	r3, r1
  4198d0:	f340 82b0 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  const int32_t input2_val = params.input2_offset + y;
  4198d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  const int32_t input1_val = params.input1_offset + x;
  4198d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  const int32_t input2_val = params.input2_offset + y;
  4198d8:	f912 6f01 	ldrsb.w	r6, [r2, #1]!
  const int32_t input1_val = params.input1_offset + x;
  4198dc:	449e      	add	lr, r3
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
  4198de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  const int32_t input2_val = params.input2_offset + y;
  4198e0:	920c      	str	r2, [sp, #48]	@ 0x30
  4198e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
  4198e4:	fa0e fe03 	lsl.w	lr, lr, r3
  const int32_t input2_val = params.input2_offset + y;
  4198e8:	4416      	add	r6, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  4198ea:	45f4      	cmp	ip, lr
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
  4198ec:	fa06 f603 	lsl.w	r6, r6, r3
  4198f0:	f000 8457 	beq.w	41a1a2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe9a>
  std::int64_t ab_64 = a_64 * b_64;
  4198f4:	fb8e eb0c 	smull	lr, fp, lr, ip
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  4198f8:	f1bb 0f00 	cmp.w	fp, #0
  4198fc:	f6bf af56 	bge.w	4197ac <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4a4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  419900:	4b1d      	ldr	r3, [pc, #116]	@ (419978 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x670>)
  419902:	eb1e 0e03 	adds.w	lr, lr, r3
  419906:	f16b 0b00 	sbc.w	fp, fp, #0
  41990a:	f1bb 0f00 	cmp.w	fp, #0
  41990e:	da05      	bge.n	41991c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x614>
  419910:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  419914:	eb1e 0e03 	adds.w	lr, lr, r3
  419918:	f14b 0b00 	adc.w	fp, fp, #0
  41991c:	4672      	mov	r2, lr
  41991e:	465b      	mov	r3, fp
  419920:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  419924:	e749      	b.n	4197ba <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4b2>
    TFLITE_DCHECK_LT(i, size_);
  419926:	2c00      	cmp	r4, #0
      : size_(new_shape_size) {
  419928:	9474      	str	r4, [sp, #464]	@ 0x1d0
    const int size_increase = new_shape_size - shape.DimensionsCount();
  41992a:	eba4 0302 	sub.w	r3, r4, r2
    TFLITE_DCHECK_LT(i, size_);
  41992e:	f340 8281 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    dims_[i] = val;
  419932:	2101      	movs	r1, #1
    for (int i = 0; i < size_increase; ++i) {
  419934:	428b      	cmp	r3, r1
    dims_[i] = val;
  419936:	9175      	str	r1, [sp, #468]	@ 0x1d4
    for (int i = 0; i < size_increase; ++i) {
  419938:	d018      	beq.n	41996c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x664>
    TFLITE_DCHECK_LT(i, size_);
  41993a:	428c      	cmp	r4, r1
  41993c:	f000 827a 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  419940:	2b02      	cmp	r3, #2
    dims_[i] = val;
  419942:	9176      	str	r1, [sp, #472]	@ 0x1d8
    for (int i = 0; i < size_increase; ++i) {
  419944:	d012      	beq.n	41996c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x664>
    TFLITE_DCHECK_LT(i, size_);
  419946:	2c02      	cmp	r4, #2
  419948:	f000 8274 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  41994c:	2b03      	cmp	r3, #3
    dims_[i] = val;
  41994e:	9177      	str	r1, [sp, #476]	@ 0x1dc
    for (int i = 0; i < size_increase; ++i) {
  419950:	d00c      	beq.n	41996c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x664>
    TFLITE_DCHECK_LT(i, size_);
  419952:	2c03      	cmp	r4, #3
  419954:	f000 826e 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  419958:	2b04      	cmp	r3, #4
    dims_[i] = val;
  41995a:	9178      	str	r1, [sp, #480]	@ 0x1e0
    for (int i = 0; i < size_increase; ++i) {
  41995c:	d006      	beq.n	41996c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x664>
    TFLITE_DCHECK_LT(i, size_);
  41995e:	2c04      	cmp	r4, #4
  419960:	f000 8268 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int i = 0; i < size_increase; ++i) {
  419964:	2b05      	cmp	r3, #5
    dims_[i] = val;
  419966:	9179      	str	r1, [sp, #484]	@ 0x1e4
    for (int i = 0; i < size_increase; ++i) {
  419968:	f040 8264 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41996c:	a975      	add	r1, sp, #468	@ 0x1d4
	return __b;
  41996e:	4625      	mov	r5, r4
  419970:	910f      	str	r1, [sp, #60]	@ 0x3c
  419972:	eb01 0083 	add.w	r0, r1, r3, lsl #2
  419976:	e4f6      	b.n	419366 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x5e>
  419978:	c0000001 	.word	0xc0000001
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
  41997c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
  41997e:	a97b      	add	r1, sp, #492	@ 0x1ec
  419980:	ea4f 0289 	mov.w	r2, r9, lsl #2
  419984:	f007 f874 	bl	420a70 <memcmp>
    return this->size_ == comp.size_ &&
  419988:	900f      	str	r0, [sp, #60]	@ 0x3c
  41998a:	2800      	cmp	r0, #0
  41998c:	f47f ad20 	bne.w	4193d0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc8>
  TFLITE_DCHECK(tensor != nullptr);
  419990:	f1bb 0f00 	cmp.w	fp, #0
  419994:	f000 824e 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419998:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  return reinterpret_cast<const T*>(tensor->data.raw);
  41999a:	f8db 8000 	ldr.w	r8, [fp]
  TFLITE_DCHECK(tensor != nullptr);
  41999e:	2c00      	cmp	r4, #0
  4199a0:	f000 8248 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(tensor != nullptr);
  4199a4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  return reinterpret_cast<const T*>(tensor->data.raw);
  4199a6:	f8d4 9000 	ldr.w	r9, [r4]
  TFLITE_DCHECK(tensor != nullptr);
  4199aa:	2d00      	cmp	r5, #0
  4199ac:	f000 8242 	beq.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
        MatchingElementsSize(tflite::micro::GetTensorShape(input1),
  4199b0:	4659      	mov	r1, fp
  4199b2:	a850      	add	r0, sp, #320	@ 0x140
  return reinterpret_cast<T*>(tensor->data.raw);
  4199b4:	f8d5 b000 	ldr.w	fp, [r5]
  4199b8:	f002 fdfa 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(input2),
  4199bc:	4621      	mov	r1, r4
  4199be:	a84a      	add	r0, sp, #296	@ 0x128
  4199c0:	f002 fdf6 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output)));
  4199c4:	4629      	mov	r1, r5
  4199c6:	a844      	add	r0, sp, #272	@ 0x110
  4199c8:	f002 fdf2 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    for (int i = 0; i < size_; i++) {
  4199cc:	9a50      	ldr	r2, [sp, #320]	@ 0x140
  4199ce:	2a00      	cmp	r2, #0
  4199d0:	f340 8232 	ble.w	419e38 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb30>
  4199d4:	1e53      	subs	r3, r2, #1
  4199d6:	2b04      	cmp	r3, #4
  4199d8:	f240 8239 	bls.w	419e4e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb46>
  4199dc:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  4199e0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4199e4:	f1ae 0e10 	sub.w	lr, lr, #16
  4199e8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  4199ec:	f10e 0e01 	add.w	lr, lr, #1
  4199f0:	a851      	add	r0, sp, #324	@ 0x144
  4199f2:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  4199f6:	f04e e001 	dls	lr, lr
  4199fa:	4603      	mov	r3, r0
      buffer_size *= dims_data[i];
  4199fc:	ecb3 5f04 	ldc	15, cr5, [r3], #16
  419a00:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  419a04:	f00f c007 	le	lr, 4199fc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6f4>
  419a08:	ee16 1a10 	vmov	r1, s12
  419a0c:	ee36 3b10 	vmov.32	r3, d6[1]
  419a10:	fb01 f303 	mul.w	r3, r1, r3
  419a14:	ee17 1b10 	vmov.32	r1, d7[0]
  419a18:	fb01 f303 	mul.w	r3, r1, r3
  419a1c:	ee37 1b10 	vmov.32	r1, d7[1]
  419a20:	0794      	lsls	r4, r2, #30
  419a22:	fb01 f303 	mul.w	r3, r1, r3
  419a26:	f022 0103 	bic.w	r1, r2, #3
  419a2a:	d021      	beq.n	419a70 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x768>
      buffer_size *= dims_data[i];
  419a2c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  419a30:	008c      	lsls	r4, r1, #2
  419a32:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
  419a36:	1c48      	adds	r0, r1, #1
  419a38:	4290      	cmp	r0, r2
  419a3a:	da19      	bge.n	419a70 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x768>
      buffer_size *= dims_data[i];
  419a3c:	a852      	add	r0, sp, #328	@ 0x148
  419a3e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  419a42:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
  419a46:	1c88      	adds	r0, r1, #2
  419a48:	4290      	cmp	r0, r2
  419a4a:	da11      	bge.n	419a70 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x768>
      buffer_size *= dims_data[i];
  419a4c:	a853      	add	r0, sp, #332	@ 0x14c
  419a4e:	5900      	ldr	r0, [r0, r4]
  419a50:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
  419a54:	1cc8      	adds	r0, r1, #3
  419a56:	4290      	cmp	r0, r2
  419a58:	da0a      	bge.n	419a70 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x768>
      buffer_size *= dims_data[i];
  419a5a:	a854      	add	r0, sp, #336	@ 0x150
  419a5c:	5900      	ldr	r0, [r0, r4]
    for (int i = 0; i < size_; i++) {
  419a5e:	3104      	adds	r1, #4
  419a60:	4291      	cmp	r1, r2
      buffer_size *= dims_data[i];
  419a62:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
  419a66:	da03      	bge.n	419a70 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x768>
      buffer_size *= dims_data[i];
  419a68:	aa55      	add	r2, sp, #340	@ 0x154
  419a6a:	5912      	ldr	r2, [r2, r4]
  419a6c:	fb02 f303 	mul.w	r3, r2, r3
    for (int i = 0; i < size_; i++) {
  419a70:	994a      	ldr	r1, [sp, #296]	@ 0x128
  419a72:	9d44      	ldr	r5, [sp, #272]	@ 0x110
  419a74:	2900      	cmp	r1, #0
  419a76:	f340 81f2 	ble.w	419e5e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb56>
  419a7a:	1e4a      	subs	r2, r1, #1
  419a7c:	2a04      	cmp	r2, #4
  419a7e:	f240 81ea 	bls.w	419e56 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb4e>
  419a82:	ea4f 0e91 	mov.w	lr, r1, lsr #2
    int buffer_size = 1;
  419a86:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  419a8a:	f1ae 0e10 	sub.w	lr, lr, #16
  419a8e:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  419a92:	f10e 0e01 	add.w	lr, lr, #1
  419a96:	a84b      	add	r0, sp, #300	@ 0x12c
  419a98:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  419a9c:	f04e e001 	dls	lr, lr
  419aa0:	4602      	mov	r2, r0
      buffer_size *= dims_data[i];
  419aa2:	ecb2 5f04 	ldc	15, cr5, [r2], #16
  419aa6:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  419aaa:	f00f c007 	le	lr, 419aa2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x79a>
  419aae:	ee16 4a10 	vmov	r4, s12
  419ab2:	ee36 2b10 	vmov.32	r2, d6[1]
  419ab6:	fb04 f202 	mul.w	r2, r4, r2
  419aba:	ee17 4b10 	vmov.32	r4, d7[0]
  419abe:	fb04 f202 	mul.w	r2, r4, r2
  419ac2:	ee37 4b10 	vmov.32	r4, d7[1]
  419ac6:	fb02 f404 	mul.w	r4, r2, r4
  419aca:	078a      	lsls	r2, r1, #30
  419acc:	d027      	beq.n	419b1e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x816>
  419ace:	f021 0203 	bic.w	r2, r1, #3
      buffer_size *= dims_data[i];
  419ad2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  419ad6:	ea4f 0c82 	mov.w	ip, r2, lsl #2
  419ada:	fb00 f404 	mul.w	r4, r0, r4
    for (int i = 0; i < size_; i++) {
  419ade:	1c50      	adds	r0, r2, #1
  419ae0:	4281      	cmp	r1, r0
  419ae2:	dd1c      	ble.n	419b1e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x816>
      buffer_size *= dims_data[i];
  419ae4:	a84c      	add	r0, sp, #304	@ 0x130
  419ae6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  419aea:	fb00 f404 	mul.w	r4, r0, r4
    for (int i = 0; i < size_; i++) {
  419aee:	1c90      	adds	r0, r2, #2
  419af0:	4281      	cmp	r1, r0
  419af2:	dd14      	ble.n	419b1e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x816>
      buffer_size *= dims_data[i];
  419af4:	a84d      	add	r0, sp, #308	@ 0x134
  419af6:	f850 000c 	ldr.w	r0, [r0, ip]
  419afa:	fb00 f404 	mul.w	r4, r0, r4
    for (int i = 0; i < size_; i++) {
  419afe:	1cd0      	adds	r0, r2, #3
  419b00:	4281      	cmp	r1, r0
  419b02:	dd0c      	ble.n	419b1e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x816>
      buffer_size *= dims_data[i];
  419b04:	a84e      	add	r0, sp, #312	@ 0x138
  419b06:	f850 000c 	ldr.w	r0, [r0, ip]
    for (int i = 0; i < size_; i++) {
  419b0a:	3204      	adds	r2, #4
  419b0c:	4291      	cmp	r1, r2
      buffer_size *= dims_data[i];
  419b0e:	fb00 f404 	mul.w	r4, r0, r4
    for (int i = 0; i < size_; i++) {
  419b12:	dd04      	ble.n	419b1e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x816>
      buffer_size *= dims_data[i];
  419b14:	aa4f      	add	r2, sp, #316	@ 0x13c
  419b16:	f852 200c 	ldr.w	r2, [r2, ip]
  419b1a:	fb02 f404 	mul.w	r4, r2, r4
    for (int i = 0; i < size_; i++) {
  419b1e:	2d00      	cmp	r5, #0
  419b20:	f340 81ae 	ble.w	419e80 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb78>
  419b24:	2d05      	cmp	r5, #5
  419b26:	f340 81a8 	ble.w	419e7a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb72>
  419b2a:	ea4f 0e95 	mov.w	lr, r5, lsr #2
    int buffer_size = 1;
  419b2e:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  419b32:	f1ae 0e10 	sub.w	lr, lr, #16
  419b36:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  419b3a:	f10e 0e01 	add.w	lr, lr, #1
  419b3e:	a945      	add	r1, sp, #276	@ 0x114
  419b40:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  419b44:	f04e e001 	dls	lr, lr
  419b48:	460a      	mov	r2, r1
      buffer_size *= dims_data[i];
  419b4a:	ecb2 5f04 	ldc	15, cr5, [r2], #16
  419b4e:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  419b52:	f00f c007 	le	lr, 419b4a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x842>
  419b56:	ee16 0a10 	vmov	r0, s12
  419b5a:	ee36 2b10 	vmov.32	r2, d6[1]
  419b5e:	fb00 f202 	mul.w	r2, r0, r2
  419b62:	ee17 0b10 	vmov.32	r0, d7[0]
  419b66:	fb00 f202 	mul.w	r2, r0, r2
  419b6a:	ee37 0b10 	vmov.32	r0, d7[1]
  419b6e:	fb00 f202 	mul.w	r2, r0, r2
  419b72:	f025 0003 	bic.w	r0, r5, #3
  419b76:	900f      	str	r0, [sp, #60]	@ 0x3c
  419b78:	07a8      	lsls	r0, r5, #30
  419b7a:	d027      	beq.n	419bcc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8c4>
      buffer_size *= dims_data[i];
  419b7c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
  419b7e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  419b82:	ea4f 0c80 	mov.w	ip, r0, lsl #2
  419b86:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
  419b8a:	1c41      	adds	r1, r0, #1
  419b8c:	42a9      	cmp	r1, r5
  419b8e:	da1d      	bge.n	419bcc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8c4>
      buffer_size *= dims_data[i];
  419b90:	a946      	add	r1, sp, #280	@ 0x118
  419b92:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  419b96:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
  419b9a:	1c81      	adds	r1, r0, #2
  419b9c:	42a9      	cmp	r1, r5
  419b9e:	da15      	bge.n	419bcc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8c4>
      buffer_size *= dims_data[i];
  419ba0:	a947      	add	r1, sp, #284	@ 0x11c
  419ba2:	f851 100c 	ldr.w	r1, [r1, ip]
  419ba6:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
  419baa:	1cc1      	adds	r1, r0, #3
  419bac:	42a9      	cmp	r1, r5
  419bae:	da0d      	bge.n	419bcc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8c4>
  419bb0:	3004      	adds	r0, #4
  419bb2:	4601      	mov	r1, r0
      buffer_size *= dims_data[i];
  419bb4:	a848      	add	r0, sp, #288	@ 0x120
  419bb6:	f850 000c 	ldr.w	r0, [r0, ip]
    for (int i = 0; i < size_; i++) {
  419bba:	42a9      	cmp	r1, r5
      buffer_size *= dims_data[i];
  419bbc:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  419bc0:	da04      	bge.n	419bcc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8c4>
      buffer_size *= dims_data[i];
  419bc2:	a949      	add	r1, sp, #292	@ 0x124
  419bc4:	f851 100c 	ldr.w	r1, [r1, ip]
  419bc8:	fb01 f202 	mul.w	r2, r1, r2
  419bcc:	429c      	cmp	r4, r3
  419bce:	f040 8131 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_CHECK_EQ(size_2, size_3);
  419bd2:	4293      	cmp	r3, r2
  419bd4:	f040 812e 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    arm_elementwise_add_s8(
  419bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
  419bda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  419bdc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
  419bde:	930a      	str	r3, [sp, #40]	@ 0x28
  419be0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  419be2:	9401      	str	r4, [sp, #4]
  419be4:	9309      	str	r3, [sp, #36]	@ 0x24
  419be6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  419be8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  419bea:	e9cd a307 	strd	sl, r3, [sp, #28]
  419bee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  419bf0:	4649      	mov	r1, r9
  419bf2:	e9cd b305 	strd	fp, r3, [sp, #20]
  419bf6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  419bf8:	4640      	mov	r0, r8
  419bfa:	9304      	str	r3, [sp, #16]
  419bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  419bfe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  419c00:	e9cd 6302 	strd	r6, r3, [sp, #8]
  419c04:	9400      	str	r4, [sp, #0]
  419c06:	463b      	mov	r3, r7
  419c08:	f7f7 fa48 	bl	41109c <arm_elementwise_add_s8>
}
  419c0c:	2000      	movs	r0, #0
  419c0e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
  419c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK_LT(i, size_);
  419c16:	008b      	lsls	r3, r1, #2
  419c18:	4589      	cmp	r9, r1
  419c1a:	930f      	str	r3, [sp, #60]	@ 0x3c
  419c1c:	f340 810a 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  419c20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  419c22:	4463      	add	r3, ip
  while (i >= 0 && shape_a->Dims(i) == 1) {
  419c24:	685a      	ldr	r2, [r3, #4]
  419c26:	2a01      	cmp	r2, #1
  419c28:	f040 8291 	bne.w	41a14e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe46>
    TFLITE_DCHECK_LT(i, size_);
  419c2c:	4541      	cmp	r1, r8
  419c2e:	f280 8101 	bge.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    --i;
  419c32:	1e48      	subs	r0, r1, #1
  while (i >= 0 && shape_a->Dims(i) == 1) {
  419c34:	2900      	cmp	r1, #0
  419c36:	f43f ac31 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419c3a:	681a      	ldr	r2, [r3, #0]
  419c3c:	2a01      	cmp	r2, #1
  419c3e:	d11a      	bne.n	419c76 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x96e>
  419c40:	2901      	cmp	r1, #1
    --i;
  419c42:	f1a1 0002 	sub.w	r0, r1, #2
  while (i >= 0 && shape_a->Dims(i) == 1) {
  419c46:	f43f ac29 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419c4a:	f853 2c04 	ldr.w	r2, [r3, #-4]
  419c4e:	2a01      	cmp	r2, #1
  419c50:	d111      	bne.n	419c76 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x96e>
  419c52:	2902      	cmp	r1, #2
    --i;
  419c54:	f1a1 0003 	sub.w	r0, r1, #3
  while (i >= 0 && shape_a->Dims(i) == 1) {
  419c58:	f43f ac20 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419c5c:	f853 2c08 	ldr.w	r2, [r3, #-8]
  419c60:	2a01      	cmp	r2, #1
  419c62:	d108      	bne.n	419c76 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x96e>
  419c64:	2904      	cmp	r1, #4
  419c66:	f47f ac19 	bne.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419c6a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
  419c6e:	2b01      	cmp	r3, #1
  419c70:	f43f ac14 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
    --i;
  419c74:	2000      	movs	r0, #0
  419c76:	4548      	cmp	r0, r9
  419c78:	f280 80dc 	bge.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  419c7c:	eb0c 0580 	add.w	r5, ip, r0, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  419c80:	4540      	cmp	r0, r8
    return dims_[i];
  419c82:	6869      	ldr	r1, [r5, #4]
    TFLITE_DCHECK_LT(i, size_);
  419c84:	ea4f 0380 	mov.w	r3, r0, lsl #2
  419c88:	f280 80d4 	bge.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  419c8c:	4473      	add	r3, lr
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  419c8e:	685a      	ldr	r2, [r3, #4]
  419c90:	4291      	cmp	r1, r2
  419c92:	f040 825a 	bne.w	41a14a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe42>
    --i;
  419c96:	1e44      	subs	r4, r0, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  419c98:	2800      	cmp	r0, #0
  419c9a:	f43f abff 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419c9e:	6829      	ldr	r1, [r5, #0]
  419ca0:	681a      	ldr	r2, [r3, #0]
  419ca2:	4291      	cmp	r1, r2
  419ca4:	d121      	bne.n	419cea <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x9e2>
  419ca6:	2801      	cmp	r0, #1
    --i;
  419ca8:	f1a0 0402 	sub.w	r4, r0, #2
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  419cac:	f43f abf6 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419cb0:	f855 1c04 	ldr.w	r1, [r5, #-4]
  419cb4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  419cb8:	4291      	cmp	r1, r2
  419cba:	d116      	bne.n	419cea <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x9e2>
  419cbc:	2802      	cmp	r0, #2
    --i;
  419cbe:	f1a0 0403 	sub.w	r4, r0, #3
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  419cc2:	f43f abeb 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419cc6:	f855 1c08 	ldr.w	r1, [r5, #-8]
  419cca:	f853 2c08 	ldr.w	r2, [r3, #-8]
  419cce:	4291      	cmp	r1, r2
  419cd0:	d10b      	bne.n	419cea <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x9e2>
  419cd2:	2804      	cmp	r0, #4
  419cd4:	f47f abe2 	bne.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419cd8:	f855 2c0c 	ldr.w	r2, [r5, #-12]
  419cdc:	f853 3c0c 	ldr.w	r3, [r3, #-12]
  419ce0:	429a      	cmp	r2, r3
    --i;
  419ce2:	bf18      	it	ne
  419ce4:	2400      	movne	r4, #0
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  419ce6:	f43f abd9 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
    TFLITE_DCHECK_LT(i, size_);
  419cea:	45a0      	cmp	r8, r4
  419cec:	f340 80a2 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  419cf0:	eb0e 0184 	add.w	r1, lr, r4, lsl #2
  while (i >= 0 && shape_b->Dims(i) == 1) {
  419cf4:	684b      	ldr	r3, [r1, #4]
  419cf6:	2b01      	cmp	r3, #1
  419cf8:	f040 822b 	bne.w	41a152 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe4a>
    TFLITE_DCHECK_LT(i, size_);
  419cfc:	454c      	cmp	r4, r9
  419cfe:	f280 8099 	bge.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    --i;
  419d02:	1e63      	subs	r3, r4, #1
  while (i >= 0 && shape_b->Dims(i) == 1) {
  419d04:	2c00      	cmp	r4, #0
  419d06:	f43f abc9 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419d0a:	680a      	ldr	r2, [r1, #0]
  419d0c:	2a01      	cmp	r2, #1
  419d0e:	d11a      	bne.n	419d46 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa3e>
  419d10:	2c01      	cmp	r4, #1
    --i;
  419d12:	f1a4 0302 	sub.w	r3, r4, #2
  while (i >= 0 && shape_b->Dims(i) == 1) {
  419d16:	f43f abc1 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419d1a:	f851 2c04 	ldr.w	r2, [r1, #-4]
  419d1e:	2a01      	cmp	r2, #1
  419d20:	d111      	bne.n	419d46 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa3e>
  419d22:	2c02      	cmp	r4, #2
    --i;
  419d24:	f1a4 0303 	sub.w	r3, r4, #3
  while (i >= 0 && shape_b->Dims(i) == 1) {
  419d28:	f43f abb8 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419d2c:	f851 2c08 	ldr.w	r2, [r1, #-8]
  419d30:	2a01      	cmp	r2, #1
  419d32:	d108      	bne.n	419d46 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa3e>
  419d34:	2c04      	cmp	r4, #4
  419d36:	f47f abb1 	bne.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419d3a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
  419d3e:	2b01      	cmp	r3, #1
  419d40:	f43f abac 	beq.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
    --i;
  419d44:	2300      	movs	r3, #0
  419d46:	454b      	cmp	r3, r9
  419d48:	da74      	bge.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419d4a:	4543      	cmp	r3, r8
  419d4c:	f6ff aba6 	blt.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  419d50:	e070      	b.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  const RuntimeShape* shape_a =
  419d52:	f50d 7ce8 	add.w	ip, sp, #464	@ 0x1d0
  const RuntimeShape* shape_b =
  419d56:	f50d 7ef4 	add.w	lr, sp, #488	@ 0x1e8
  419d5a:	f7ff bb5a 	b.w	419412 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
  419d5e:	e9dd 2829 	ldrd	r2, r8, [sp, #164]	@ 0xa4
  419d62:	e9dd be2b 	ldrd	fp, lr, [sp, #172]	@ 0xac
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  419d66:	9930      	ldr	r1, [sp, #192]	@ 0xc0
  419d68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  419d6a:	448b      	add	fp, r1
  419d6c:	992f      	ldr	r1, [sp, #188]	@ 0xbc
  419d6e:	3301      	adds	r3, #1
  419d70:	448e      	add	lr, r1
  419d72:	992d      	ldr	r1, [sp, #180]	@ 0xb4
  419d74:	930e      	str	r3, [sp, #56]	@ 0x38
  419d76:	4299      	cmp	r1, r3
  419d78:	4442      	add	r2, r8
  419d7a:	f73f acff 	bgt.w	41977c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x474>
  419d7e:	e9dd 1631 	ldrd	r1, r6, [sp, #196]	@ 0xc4
  419d82:	e9dd 5033 	ldrd	r5, r0, [sp, #204]	@ 0xcc
  419d86:	e9dd 3436 	ldrd	r3, r4, [sp, #216]	@ 0xd8
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  419d8a:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
  419d8c:	f109 0901 	add.w	r9, r9, #1
  419d90:	454e      	cmp	r6, r9
  419d92:	4421      	add	r1, r4
  419d94:	4428      	add	r0, r5
  419d96:	4413      	add	r3, r2
  419d98:	f73f acda 	bgt.w	419750 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x448>
  419d9c:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
  419d9e:	4630      	mov	r0, r6
  419da0:	e9dd b63c 	ldrd	fp, r6, [sp, #240]	@ 0xf0
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  419da4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  419da6:	4416      	add	r6, r2
  419da8:	3301      	adds	r3, #1
  419daa:	9328      	str	r3, [sp, #160]	@ 0xa0
  419dac:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
  419dae:	449b      	add	fp, r3
  419db0:	e9dd 3139 	ldrd	r3, r1, [sp, #228]	@ 0xe4
  419db4:	440b      	add	r3, r1
  419db6:	9339      	str	r3, [sp, #228]	@ 0xe4
  419db8:	e4ae      	b.n	419718 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x410>
  for (int i = dims_count - 1; i >= 0; --i) {
  419dba:	2d01      	cmp	r5, #1
  419dbc:	f1a5 0202 	sub.w	r2, r5, #2
  419dc0:	d038      	beq.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419dc2:	4591      	cmp	r9, r2
  419dc4:	dd36      	ble.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  419dc6:	aba2      	add	r3, sp, #648	@ 0x288
  419dc8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  419dcc:	4590      	cmp	r8, r2
    return dims_[i];
  419dce:	f850 3cb4 	ldr.w	r3, [r0, #-180]
    TFLITE_DCHECK_LT(i, size_);
  419dd2:	dd2f      	ble.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  419dd4:	f850 2c9c 	ldr.w	r2, [r0, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  419dd8:	4293      	cmp	r3, r2
  419dda:	f47f ab0e 	bne.w	4193fa <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2>
  for (int i = dims_count - 1; i >= 0; --i) {
  419dde:	2d02      	cmp	r5, #2
  419de0:	f1a5 0203 	sub.w	r2, r5, #3
  419de4:	d026      	beq.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    TFLITE_DCHECK_LT(i, size_);
  419de6:	4591      	cmp	r9, r2
  419de8:	dd24      	ble.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  419dea:	aba2      	add	r3, sp, #648	@ 0x288
  419dec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  419df0:	4590      	cmp	r8, r2
    return dims_[i];
  419df2:	f850 3cb4 	ldr.w	r3, [r0, #-180]
    TFLITE_DCHECK_LT(i, size_);
  419df6:	dd1d      	ble.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  419df8:	f850 2c9c 	ldr.w	r2, [r0, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  419dfc:	4293      	cmp	r3, r2
  419dfe:	f47f aafc 	bne.w	4193fa <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2>
  for (int i = dims_count - 1; i >= 0; --i) {
  419e02:	2d03      	cmp	r5, #3
  419e04:	f1a5 0204 	sub.w	r2, r5, #4
  419e08:	d014      	beq.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    TFLITE_DCHECK_LT(i, size_);
  419e0a:	4591      	cmp	r9, r2
  419e0c:	dd12      	ble.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  419e0e:	aba2      	add	r3, sp, #648	@ 0x288
  419e10:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  419e14:	4590      	cmp	r8, r2
    return dims_[i];
  419e16:	f850 3cb4 	ldr.w	r3, [r0, #-180]
    TFLITE_DCHECK_LT(i, size_);
  419e1a:	dd0b      	ble.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    return dims_[i];
  419e1c:	f850 2c9c 	ldr.w	r2, [r0, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  419e20:	4293      	cmp	r3, r2
  419e22:	f47f aaea 	bne.w	4193fa <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2>
  for (int i = dims_count - 1; i >= 0; --i) {
  419e26:	2d05      	cmp	r5, #5
  419e28:	d104      	bne.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419e2a:	9b75      	ldr	r3, [sp, #468]	@ 0x1d4
  419e2c:	9a7b      	ldr	r2, [sp, #492]	@ 0x1ec
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  419e2e:	429a      	cmp	r2, r3
  419e30:	f47f aae3 	bne.w	4193fa <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2>
    TFLITE_DCHECK_LT(i, size_);
  419e34:	f005 f9b0 	bl	41f198 <abort>
    for (int i = 0; i < size_; i++) {
  419e38:	994a      	ldr	r1, [sp, #296]	@ 0x128
    int buffer_size = 1;
  419e3a:	2301      	movs	r3, #1
    for (int i = 0; i < size_; i++) {
  419e3c:	2900      	cmp	r1, #0
  419e3e:	9d44      	ldr	r5, [sp, #272]	@ 0x110
  419e40:	f73f ae1b 	bgt.w	419a7a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x772>
  419e44:	2d00      	cmp	r5, #0
    int buffer_size = 1;
  419e46:	461c      	mov	r4, r3
    for (int i = 0; i < size_; i++) {
  419e48:	f73f ae6c 	bgt.w	419b24 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x81c>
  419e4c:	e6c4      	b.n	419bd8 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8d0>
    int buffer_size = 1;
  419e4e:	2301      	movs	r3, #1
    for (int i = 0; i < size_; i++) {
  419e50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
  419e52:	a851      	add	r0, sp, #324	@ 0x144
  419e54:	e5ea      	b.n	419a2c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x724>
  419e56:	2200      	movs	r2, #0
    int buffer_size = 1;
  419e58:	2401      	movs	r4, #1
  419e5a:	a84b      	add	r0, sp, #300	@ 0x12c
  419e5c:	e639      	b.n	419ad2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7ca>
    for (int i = 0; i < size_; i++) {
  419e5e:	2d00      	cmp	r5, #0
    int buffer_size = 1;
  419e60:	f04f 0401 	mov.w	r4, #1
    for (int i = 0; i < size_; i++) {
  419e64:	f73f ae5e 	bgt.w	419b24 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x81c>
  TFLITE_CHECK_EQ(size_1, size_2);
  419e68:	42a3      	cmp	r3, r4
  419e6a:	f43f aeb5 	beq.w	419bd8 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8d0>
  419e6e:	e7e1      	b.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
        desc0_out->strides[i] = 0;
  419e70:	2300      	movs	r3, #0
        desc0_out->extents[i] = extent1;
  419e72:	9595      	str	r5, [sp, #596]	@ 0x254
        desc0_out->strides[i] = 0;
  419e74:	9399      	str	r3, [sp, #612]	@ 0x264
  419e76:	f7ff bbc8 	b.w	41960a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x302>
    int buffer_size = 1;
  419e7a:	2201      	movs	r2, #1
  419e7c:	a945      	add	r1, sp, #276	@ 0x114
  419e7e:	e67d      	b.n	419b7c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x874>
  419e80:	2201      	movs	r2, #1
  419e82:	e6a3      	b.n	419bcc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8c4>
  419e84:	46cb      	mov	fp, r9
  return a >> offset;
  419e86:	f04f 0900 	mov.w	r9, #0
  419e8a:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
  419e8c:	4605      	mov	r5, r0
  419e8e:	fb02 f300 	mul.w	r3, r2, r0
  419e92:	fb08 fe03 	mul.w	lr, r8, r3
  419e96:	fb02 f308 	mul.w	r3, r2, r8
  419e9a:	4648      	mov	r0, r9
  419e9c:	9336      	str	r3, [sp, #216]	@ 0xd8
  419e9e:	464a      	mov	r2, r9
  419ea0:	4673      	mov	r3, lr
  419ea2:	4659      	mov	r1, fp
  419ea4:	46be      	mov	lr, r7
  419ea6:	4637      	mov	r7, r6
  419ea8:	f8cd 90a0 	str.w	r9, [sp, #160]	@ 0xa0
  419eac:	f8cd 80fc 	str.w	r8, [sp, #252]	@ 0xfc
  419eb0:	9437      	str	r4, [sp, #220]	@ 0xdc
  419eb2:	9c38      	ldr	r4, [sp, #224]	@ 0xe0
  419eb4:	9e28      	ldr	r6, [sp, #160]	@ 0xa0
  419eb6:	42b4      	cmp	r4, r6
  419eb8:	f77f aea8 	ble.w	419c0c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x904>
    TFLITE_DCHECK_LT(i, size_);
  419ebc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
  419ebe:	2c01      	cmp	r4, #1
  419ec0:	d0b8      	beq.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  419ec2:	2d00      	cmp	r5, #0
  419ec4:	f340 8135 	ble.w	41a132 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe2a>
  419ec8:	2c02      	cmp	r4, #2
  419eca:	d0b3      	beq.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419ecc:	4690      	mov	r8, r2
  419ece:	f04f 0c00 	mov.w	ip, #0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  419ed2:	e9cd 3142 	strd	r3, r1, [sp, #264]	@ 0x108
  419ed6:	460e      	mov	r6, r1
  419ed8:	46e1      	mov	r9, ip
  419eda:	4601      	mov	r1, r0
  419edc:	4643      	mov	r3, r8
  419ede:	e9cd 0240 	strd	r0, r2, [sp, #256]	@ 0x100
  419ee2:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  419ee4:	982d      	ldr	r0, [sp, #180]	@ 0xb4
  419ee6:	2800      	cmp	r0, #0
  419ee8:	f340 8114 	ble.w	41a114 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe0c>
  419eec:	980f      	ldr	r0, [sp, #60]	@ 0x3c
  419eee:	2803      	cmp	r0, #3
  419ef0:	d0a0      	beq.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  419ef2:	2000      	movs	r0, #0
  419ef4:	469c      	mov	ip, r3
  419ef6:	46b0      	mov	r8, r6
  419ef8:	468b      	mov	fp, r1
  419efa:	e9cd 133c 	strd	r1, r3, [sp, #240]	@ 0xf0
  419efe:	900e      	str	r0, [sp, #56]	@ 0x38
  419f00:	9539      	str	r5, [sp, #228]	@ 0xe4
  419f02:	963e      	str	r6, [sp, #248]	@ 0xf8
  419f04:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
  419f06:	990e      	ldr	r1, [sp, #56]	@ 0x38
  419f08:	428b      	cmp	r3, r1
  419f0a:	f340 81a7 	ble.w	41a25c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf54>
  419f0e:	2301      	movs	r3, #1
  419f10:	2a00      	cmp	r2, #0
  419f12:	eb02 0003 	add.w	r0, r2, r3
  419f16:	bfb8      	it	lt
  419f18:	4618      	movlt	r0, r3
  419f1a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
  419f1c:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
  419f20:	eb03 050b 	add.w	r5, r3, fp
  419f24:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
  419f26:	e9cd 822b 	strd	r8, r2, [sp, #172]	@ 0xac
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  419f2a:	2100      	movs	r1, #0
  419f2c:	46b0      	mov	r8, r6
  419f2e:	e9cd bc31 	strd	fp, ip, [sp, #196]	@ 0xc4
  419f32:	eb03 040c 	add.w	r4, r3, ip
  419f36:	900c      	str	r0, [sp, #48]	@ 0x30
  419f38:	e075      	b.n	41a026 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xd1e>
  419f3a:	f11c 4c80 	adds.w	ip, ip, #1073741824	@ 0x40000000
  419f3e:	4662      	mov	r2, ip
  419f40:	f14b 0300 	adc.w	r3, fp, #0
  419f44:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  419f48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  419f4a:	2b00      	cmp	r3, #0
  419f4c:	f300 8148 	bgt.w	41a1e0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xed8>
  assert(exponent <= 31);
  419f50:	331f      	adds	r3, #31
  419f52:	f2c0 813e 	blt.w	41a1d2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xeca>
  return a & b;
  419f56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
  return a >> offset;
  419f58:	9820      	ldr	r0, [sp, #128]	@ 0x80
  return a & b;
  419f5a:	ea02 0b03 	and.w	fp, r2, r3
  return a + b;
  419f5e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  return a >> offset;
  419f60:	fa42 fc00 	asr.w	ip, r2, r0
  return a + b;
  419f64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  419f68:	459b      	cmp	fp, r3
  419f6a:	ea5c 9cdc 			@ <UNDEFINED> instruction: 0xea5c9cdc
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  419f6e:	42b7      	cmp	r7, r6
  419f70:	f000 8166 	beq.w	41a240 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf38>
  std::int64_t ab_64 = a_64 * b_64;
  419f74:	fb87 6b06 	smull	r6, fp, r7, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  419f78:	f1bb 0f00 	cmp.w	fp, #0
  419f7c:	f2c0 8137 	blt.w	41a1ee <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xee6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  419f80:	f116 4680 	adds.w	r6, r6, #1073741824	@ 0x40000000
  419f84:	4632      	mov	r2, r6
  419f86:	f14b 0300 	adc.w	r3, fp, #0
  419f8a:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  419f8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  419f90:	2b00      	cmp	r3, #0
  419f92:	f300 8125 	bgt.w	41a1e0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xed8>
  assert(exponent <= 31);
  419f96:	331f      	adds	r3, #31
  419f98:	f2c0 811b 	blt.w	41a1d2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xeca>
  return a & b;
  419f9c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
  return a >> offset;
  419f9e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
  return a & b;
  419fa0:	ea02 0603 	and.w	r6, r2, r3
  return a + b;
  419fa4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
  419fa6:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  return a >> offset;
  419faa:	4102      	asrs	r2, r0
  return a + b;
  419fac:	429e      	cmp	r6, r3
  419fae:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
  419fb2:	eb02 060c 	add.w	r6, r2, ip
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  419fb6:	45b2      	cmp	sl, r6
  419fb8:	f000 8149 	beq.w	41a24e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf46>
  std::int64_t ab_64 = a_64 * b_64;
  419fbc:	fb86 6c0a 	smull	r6, ip, r6, sl
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  419fc0:	f1bc 0f00 	cmp.w	ip, #0
  419fc4:	f2c0 8124 	blt.w	41a210 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf08>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  419fc8:	f116 4680 	adds.w	r6, r6, #1073741824	@ 0x40000000
  419fcc:	4632      	mov	r2, r6
  419fce:	f14c 0300 	adc.w	r3, ip, #0
  419fd2:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  assert(exponent >= 0);
  419fd6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  419fd8:	2b00      	cmp	r3, #0
  419fda:	f300 8101 	bgt.w	41a1e0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xed8>
  assert(exponent <= 31);
  419fde:	331f      	adds	r3, #31
  419fe0:	f2c0 80f7 	blt.w	41a1d2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xeca>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
  419fe4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
  return a >> offset;
  419fe6:	981f      	ldr	r0, [sp, #124]	@ 0x7c
  419fe8:	441d      	add	r5, r3
  419fea:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
  419fec:	441c      	add	r4, r3
  return a & b;
  419fee:	9b26      	ldr	r3, [sp, #152]	@ 0x98
  419ff0:	ea02 0603 	and.w	r6, r2, r3
  return a + b;
  419ff4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  419ff6:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  return a >> offset;
  419ffa:	4102      	asrs	r2, r0
  return a + b;
  419ffc:	429e      	cmp	r6, r3
  419ffe:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
          raw_sum, params.output_multiplier, params.output_shift) +
  41a002:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  41a004:	18d3      	adds	r3, r2, r3
      if (__a < __b)
  41a006:	9a16      	ldr	r2, [sp, #88]	@ 0x58
  41a008:	4293      	cmp	r3, r2
  41a00a:	bfb8      	it	lt
  41a00c:	4613      	movlt	r3, r2
      if (__b < __a)
  41a00e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
  41a010:	4293      	cmp	r3, r2
  41a012:	bfa8      	it	ge
  41a014:	4613      	movge	r3, r2
  41a016:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  return static_cast<int8_t>(clamped_output);
  41a018:	b25b      	sxtb	r3, r3
  41a01a:	2a04      	cmp	r2, #4
  41a01c:	f47f af0a 	bne.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
  41a020:	f808 3f01 	strb.w	r3, [r8, #1]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41a024:	3101      	adds	r1, #1
  41a026:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  41a028:	3b01      	subs	r3, #1
  41a02a:	930c      	str	r3, [sp, #48]	@ 0x30
  41a02c:	d05e      	beq.n	41a0ec <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xde4>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  41a02e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  41a030:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  41a032:	429a      	cmp	r2, r3
  41a034:	f77f aefe 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  41a038:	9a19      	ldr	r2, [sp, #100]	@ 0x64
  41a03a:	454a      	cmp	r2, r9
  41a03c:	f77f aefa 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  41a040:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
  41a042:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  41a044:	42b2      	cmp	r2, r6
  41a046:	f77f aef5 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  41a04a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
  41a04c:	4291      	cmp	r1, r2
  41a04e:	f6bf aef1 	bge.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  41a052:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
  41a054:	f994 c000 	ldrsb.w	ip, [r4]
  41a058:	429a      	cmp	r2, r3
  41a05a:	f77f aeeb 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  41a05e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  41a060:	454b      	cmp	r3, r9
  41a062:	f77f aee7 	ble.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  41a066:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41a068:	4299      	cmp	r1, r3
  41a06a:	f6bf aee3 	bge.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  const int32_t input1_val = params.input1_offset + x;
  41a06e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  const int32_t input2_val = params.input2_offset + y;
  41a070:	f995 6000 	ldrsb.w	r6, [r5]
  const int32_t input1_val = params.input1_offset + x;
  41a074:	449c      	add	ip, r3
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
  41a076:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  const int32_t input2_val = params.input2_offset + y;
  41a078:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
  41a07a:	fa0c fc03 	lsl.w	ip, ip, r3
  const int32_t input2_val = params.input2_offset + y;
  41a07e:	4416      	add	r6, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41a080:	45e6      	cmp	lr, ip
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
  41a082:	fa06 f603 	lsl.w	r6, r6, r3
  41a086:	f000 80d4 	beq.w	41a232 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2a>
  std::int64_t ab_64 = a_64 * b_64;
  41a08a:	fb8c cb0e 	smull	ip, fp, ip, lr
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
  41a08e:	f1bb 0f00 	cmp.w	fp, #0
  41a092:	f6bf af52 	bge.w	419f3a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc32>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  41a096:	4b78      	ldr	r3, [pc, #480]	@ (41a278 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf70>)
  41a098:	eb1c 0c03 	adds.w	ip, ip, r3
  41a09c:	f16b 0b00 	sbc.w	fp, fp, #0
  41a0a0:	f1bb 0f00 	cmp.w	fp, #0
  41a0a4:	da05      	bge.n	41a0b2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdaa>
  41a0a6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  41a0aa:	eb1c 0c03 	adds.w	ip, ip, r3
  41a0ae:	f14b 0b00 	adc.w	fp, fp, #0
  41a0b2:	4662      	mov	r2, ip
  41a0b4:	465b      	mov	r3, fp
  41a0b6:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a0ba:	e745      	b.n	419f48 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc40>
        desc0_out->extents[i] = extent1;
  41a0bc:	9394      	str	r3, [sp, #592]	@ 0x250
        desc0_out->strides[i] = 0;
  41a0be:	2300      	movs	r3, #0
  41a0c0:	9398      	str	r3, [sp, #608]	@ 0x260
  41a0c2:	f7ff ba95 	b.w	4195f0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2e8>
        desc0_out->extents[i] = extent1;
  41a0c6:	9293      	str	r2, [sp, #588]	@ 0x24c
        desc0_out->strides[i] = 0;
  41a0c8:	2200      	movs	r2, #0
  41a0ca:	9297      	str	r2, [sp, #604]	@ 0x25c
  41a0cc:	f7ff ba83 	b.w	4195d6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ce>
        desc0_out->extents[i] = extent1;
  41a0d0:	9092      	str	r0, [sp, #584]	@ 0x248
        desc0_out->strides[i] = 0;
  41a0d2:	2000      	movs	r0, #0
  41a0d4:	9096      	str	r0, [sp, #600]	@ 0x258
  41a0d6:	f7ff ba73 	b.w	4195c0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2b8>
  while (i >= 0 && shape_a->Dims(i) == 1) {
  41a0da:	f8dc 3004 	ldr.w	r3, [ip, #4]
  41a0de:	2b01      	cmp	r3, #1
    --i;
  41a0e0:	bf18      	it	ne
  41a0e2:	2100      	movne	r1, #0
  while (i >= 0 && shape_a->Dims(i) == 1) {
  41a0e4:	d133      	bne.n	41a14e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe46>
  41a0e6:	4663      	mov	r3, ip
    --i;
  41a0e8:	2100      	movs	r1, #0
  41a0ea:	e5a2      	b.n	419c32 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x92a>
  41a0ec:	e9dd 822b 	ldrd	r8, r2, [sp, #172]	@ 0xac
  41a0f0:	e9dd bc31 	ldrd	fp, ip, [sp, #196]	@ 0xc4
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  41a0f4:	9930      	ldr	r1, [sp, #192]	@ 0xc0
  41a0f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  41a0f8:	448b      	add	fp, r1
  41a0fa:	992f      	ldr	r1, [sp, #188]	@ 0xbc
  41a0fc:	3301      	adds	r3, #1
  41a0fe:	448c      	add	ip, r1
  41a100:	992d      	ldr	r1, [sp, #180]	@ 0xb4
  41a102:	930e      	str	r3, [sp, #56]	@ 0x38
  41a104:	428b      	cmp	r3, r1
  41a106:	4490      	add	r8, r2
  41a108:	f6ff aefc 	blt.w	419f04 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xbfc>
  41a10c:	e9dd 133c 	ldrd	r1, r3, [sp, #240]	@ 0xf0
  41a110:	9d39      	ldr	r5, [sp, #228]	@ 0xe4
  41a112:	9e3e      	ldr	r6, [sp, #248]	@ 0xf8
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  41a114:	9836      	ldr	r0, [sp, #216]	@ 0xd8
  41a116:	f109 0901 	add.w	r9, r9, #1
    TFLITE_DCHECK_LT(i, size_);
  41a11a:	4406      	add	r6, r0
  41a11c:	9837      	ldr	r0, [sp, #220]	@ 0xdc
  41a11e:	45a9      	cmp	r9, r5
  41a120:	4401      	add	r1, r0
  41a122:	9835      	ldr	r0, [sp, #212]	@ 0xd4
  41a124:	4403      	add	r3, r0
  41a126:	f6ff aedd 	blt.w	419ee4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xbdc>
  41a12a:	e9dd 0240 	ldrd	r0, r2, [sp, #256]	@ 0x100
  41a12e:	e9dd 3142 	ldrd	r3, r1, [sp, #264]	@ 0x108
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  41a132:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
  41a134:	4419      	add	r1, r3
  41a136:	3401      	adds	r4, #1
  41a138:	9428      	str	r4, [sp, #160]	@ 0xa0
  41a13a:	9c3b      	ldr	r4, [sp, #236]	@ 0xec
  41a13c:	4420      	add	r0, r4
  41a13e:	9c3a      	ldr	r4, [sp, #232]	@ 0xe8
  41a140:	4422      	add	r2, r4
  41a142:	e6b6      	b.n	419eb2 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xbaa>
  41a144:	008b      	lsls	r3, r1, #2
  41a146:	930f      	str	r3, [sp, #60]	@ 0x3c
  41a148:	e56a      	b.n	419c20 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x918>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41a14a:	4604      	mov	r4, r0
  41a14c:	e5d0      	b.n	419cf0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x9e8>
    --i;
  41a14e:	4608      	mov	r0, r1
  41a150:	e594      	b.n	419c7c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x974>
  41a152:	454c      	cmp	r4, r9
  41a154:	f6ff a9a2 	blt.w	41949c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x194>
  41a158:	e66c      	b.n	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  41a15a:	4b47      	ldr	r3, [pc, #284]	@ (41a278 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf70>)
  41a15c:	18f6      	adds	r6, r6, r3
  41a15e:	f16b 0b00 	sbc.w	fp, fp, #0
  41a162:	f1bb 0f00 	cmp.w	fp, #0
  41a166:	da04      	bge.n	41a172 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe6a>
  41a168:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  41a16c:	18f6      	adds	r6, r6, r3
  41a16e:	f14b 0b00 	adc.w	fp, fp, #0
  41a172:	4632      	mov	r2, r6
  41a174:	465b      	mov	r3, fp
  41a176:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a17a:	f7ff bb40 	b.w	4197fe <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4f6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  41a17e:	4b3e      	ldr	r3, [pc, #248]	@ (41a278 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf70>)
  41a180:	18f6      	adds	r6, r6, r3
  41a182:	f16e 0e00 	sbc.w	lr, lr, #0
  41a186:	f1be 0f00 	cmp.w	lr, #0
  41a18a:	da04      	bge.n	41a196 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe8e>
  41a18c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  41a190:	18f6      	adds	r6, r6, r3
  41a192:	f14e 0e00 	adc.w	lr, lr, #0
  41a196:	4632      	mov	r2, r6
  41a198:	4673      	mov	r3, lr
  41a19a:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a19e:	f7ff bb52 	b.w	419846 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x53e>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41a1a2:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
  41a1a6:	f47f aba5 	bne.w	4198f4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x5ec>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a1aa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  41a1ae:	f7ff bb04 	b.w	4197ba <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4b2>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41a1b2:	f1b7 4f00 	cmp.w	r7, #2147483648	@ 0x80000000
  41a1b6:	f47f ab15 	bne.w	4197e4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4dc>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a1ba:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  41a1be:	f7ff bb1e 	b.w	4197fe <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4f6>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41a1c2:	f1ba 4f00 	cmp.w	sl, #2147483648	@ 0x80000000
  41a1c6:	f47f ab31 	bne.w	41982c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x524>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a1ca:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  41a1ce:	f7ff bb3a 	b.w	419846 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x53e>
  assert(exponent <= 31);
  41a1d2:	f240 1167 	movw	r1, #359	@ 0x167
  41a1d6:	4b29      	ldr	r3, [pc, #164]	@ (41a27c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf74>)
  41a1d8:	4a29      	ldr	r2, [pc, #164]	@ (41a280 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf78>)
  41a1da:	482a      	ldr	r0, [pc, #168]	@ (41a284 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf7c>)
  41a1dc:	f004 ffe4 	bl	41f1a8 <__assert_func>
  assert(exponent >= 0);
  41a1e0:	f44f 71b3 	mov.w	r1, #358	@ 0x166
  41a1e4:	4b28      	ldr	r3, [pc, #160]	@ (41a288 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf80>)
  41a1e6:	4a26      	ldr	r2, [pc, #152]	@ (41a280 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf78>)
  41a1e8:	4826      	ldr	r0, [pc, #152]	@ (41a284 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf7c>)
  41a1ea:	f004 ffdd 	bl	41f1a8 <__assert_func>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  41a1ee:	4b22      	ldr	r3, [pc, #136]	@ (41a278 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf70>)
  41a1f0:	18f6      	adds	r6, r6, r3
  41a1f2:	f16b 0b00 	sbc.w	fp, fp, #0
  41a1f6:	f1bb 0f00 	cmp.w	fp, #0
  41a1fa:	da04      	bge.n	41a206 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xefe>
  41a1fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  41a200:	18f6      	adds	r6, r6, r3
  41a202:	f14b 0b00 	adc.w	fp, fp, #0
  41a206:	4632      	mov	r2, r6
  41a208:	465b      	mov	r3, fp
  41a20a:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a20e:	e6be      	b.n	419f8e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc86>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  41a210:	4b19      	ldr	r3, [pc, #100]	@ (41a278 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf70>)
  41a212:	18f6      	adds	r6, r6, r3
  41a214:	f16c 0c00 	sbc.w	ip, ip, #0
  41a218:	f1bc 0f00 	cmp.w	ip, #0
  41a21c:	da04      	bge.n	41a228 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf20>
  41a21e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  41a222:	18f6      	adds	r6, r6, r3
  41a224:	f14c 0c00 	adc.w	ip, ip, #0
  41a228:	4632      	mov	r2, r6
  41a22a:	4663      	mov	r3, ip
  41a22c:	ea52 73ef 	orrs.w	r3, r2, pc, asr #31
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a230:	e6d1      	b.n	419fd6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xcce>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41a232:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
  41a236:	f47f af28 	bne.w	41a08a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xd82>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a23a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  41a23e:	e683      	b.n	419f48 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc40>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41a240:	f1b7 4f00 	cmp.w	r7, #2147483648	@ 0x80000000
  41a244:	f47f ae96 	bne.w	419f74 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc6c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a248:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  41a24c:	e69f      	b.n	419f8e <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc86>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
  41a24e:	f1ba 4f00 	cmp.w	sl, #2147483648	@ 0x80000000
  41a252:	f47f aeb3 	bne.w	419fbc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xcb4>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
  41a256:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  41a25a:	e6bc      	b.n	419fd6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xcce>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41a25c:	2a00      	cmp	r2, #0
  41a25e:	f73f ade9 	bgt.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  41a262:	e747      	b.n	41a0f4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xdec>
  41a264:	9918      	ldr	r1, [sp, #96]	@ 0x60
  41a266:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  41a268:	4299      	cmp	r1, r3
  41a26a:	ddff      	ble.n	41a26c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf64>
  41a26c:	f1b8 0f00 	cmp.w	r8, #0
  41a270:	f73f ade0 	bgt.w	419e34 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2c>
  41a274:	e577      	b.n	419d66 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa5e>
  41a276:	bf00      	nop
  41a278:	c0000001 	.word	0xc0000001
  41a27c:	00434b14 	.word	0x00434b14
  41a280:	00434a68 	.word	0x00434a68
  41a284:	00434ac4 	.word	0x00434ac4
  41a288:	00434a58 	.word	0x00434a58

0041a28c <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
  41a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (output->type) {
  41a290:	7a1d      	ldrb	r5, [r3, #8]
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
  41a292:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
  switch (output->type) {
  41a296:	2d07      	cmp	r5, #7
  41a298:	d00f      	beq.n	41a2ba <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2e>
  41a29a:	2d09      	cmp	r5, #9
  41a29c:	d006      	beq.n	41a2ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
  41a29e:	2d02      	cmp	r5, #2
  41a2a0:	d00e      	beq.n	41a2c0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x34>
  41a2a2:	2001      	movs	r0, #1
}
  41a2a4:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
  41a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      EvalAddQuantizedInt8(context, node, params, data, input1, input2, output);
  41a2ac:	f7ff f82c 	bl	419308 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
  return kTfLiteOk;
  41a2b0:	2000      	movs	r0, #0
}
  41a2b2:	f50d 7d01 	add.w	sp, sp, #516	@ 0x204
  41a2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      EvalAddQuantizedInt16(context, node, params, data, input1, input2,
  41a2ba:	f7fe f84d 	bl	418358 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
      break;
  41a2be:	e7f7      	b.n	41a2b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x24>
      op_params.input1_shift = data->input1_shift;
  41a2c0:	4604      	mov	r4, r0
  41a2c2:	4617      	mov	r7, r2
  41a2c4:	469b      	mov	fp, r3
  41a2c6:	6843      	ldr	r3, [r0, #4]
          tflite::micro::GetTensorShape(input1),
  41a2c8:	a84c      	add	r0, sp, #304	@ 0x130
      op_params.input1_shift = data->input1_shift;
  41a2ca:	9300      	str	r3, [sp, #0]
      op_params.input2_shift = data->input2_shift;
  41a2cc:	68a3      	ldr	r3, [r4, #8]
  41a2ce:	4688      	mov	r8, r1
  41a2d0:	9302      	str	r3, [sp, #8]
      SetActivationParams(data->output_activation_min, data->output_activation_max,
  41a2d2:	e9d4 a303 	ldrd	sl, r3, [r4, #12]
  41a2d6:	9301      	str	r3, [sp, #4]
          tflite::micro::GetTensorShape(input1),
  41a2d8:	f002 f96a 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(input2), &op_params);
  41a2dc:	4639      	mov	r1, r7
  41a2de:	a846      	add	r0, sp, #280	@ 0x118
  41a2e0:	f002 f966 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
  41a2e4:	9a4c      	ldr	r2, [sp, #304]	@ 0x130
  41a2e6:	9d46      	ldr	r5, [sp, #280]	@ 0x118
      if (__a < __b)
  41a2e8:	42aa      	cmp	r2, r5
  41a2ea:	db05      	blt.n	41a2f8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6c>
      : size_(new_shape_size) {
  41a2ec:	f50d 79a6 	add.w	r9, sp, #332	@ 0x14c
      return __a;
  41a2f0:	4614      	mov	r4, r2
  41a2f2:	4648      	mov	r0, r9
  41a2f4:	9252      	str	r2, [sp, #328]	@ 0x148
    for (int i = 0; i < size_increase; ++i) {
  41a2f6:	e027      	b.n	41a348 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xbc>
    TFLITE_DCHECK_LT(i, size_);
  41a2f8:	2d00      	cmp	r5, #0
      : size_(new_shape_size) {
  41a2fa:	9552      	str	r5, [sp, #328]	@ 0x148
    const int size_increase = new_shape_size - shape.DimensionsCount();
  41a2fc:	eba5 0102 	sub.w	r1, r5, r2
    TFLITE_DCHECK_LT(i, size_);
  41a300:	f340 84fb 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    dims_[i] = val;
  41a304:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41a306:	4299      	cmp	r1, r3
    dims_[i] = val;
  41a308:	9353      	str	r3, [sp, #332]	@ 0x14c
    for (int i = 0; i < size_increase; ++i) {
  41a30a:	d018      	beq.n	41a33e <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2>
    TFLITE_DCHECK_LT(i, size_);
  41a30c:	429d      	cmp	r5, r3
  41a30e:	f000 84f4 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a312:	2902      	cmp	r1, #2
    dims_[i] = val;
  41a314:	9354      	str	r3, [sp, #336]	@ 0x150
    for (int i = 0; i < size_increase; ++i) {
  41a316:	d012      	beq.n	41a33e <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2>
    TFLITE_DCHECK_LT(i, size_);
  41a318:	2d02      	cmp	r5, #2
  41a31a:	f000 84ee 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a31e:	2903      	cmp	r1, #3
    dims_[i] = val;
  41a320:	9355      	str	r3, [sp, #340]	@ 0x154
    for (int i = 0; i < size_increase; ++i) {
  41a322:	d00c      	beq.n	41a33e <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2>
    TFLITE_DCHECK_LT(i, size_);
  41a324:	2d03      	cmp	r5, #3
  41a326:	f000 84e8 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a32a:	2904      	cmp	r1, #4
    dims_[i] = val;
  41a32c:	9356      	str	r3, [sp, #344]	@ 0x158
    for (int i = 0; i < size_increase; ++i) {
  41a32e:	d006      	beq.n	41a33e <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2>
    TFLITE_DCHECK_LT(i, size_);
  41a330:	2d04      	cmp	r5, #4
  41a332:	f000 84e2 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a336:	2905      	cmp	r1, #5
    dims_[i] = val;
  41a338:	9357      	str	r3, [sp, #348]	@ 0x15c
    for (int i = 0; i < size_increase; ++i) {
  41a33a:	f040 84de 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
	return __b;
  41a33e:	462c      	mov	r4, r5
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41a340:	f50d 79a6 	add.w	r9, sp, #332	@ 0x14c
  41a344:	eb09 0081 	add.w	r0, r9, r1, lsl #2
  41a348:	0092      	lsls	r2, r2, #2
  41a34a:	a94d      	add	r1, sp, #308	@ 0x134
  41a34c:	f7f6 f936 	bl	4105bc <memcpy>
    for (int i = 0; i < size_increase; ++i) {
  41a350:	1b60      	subs	r0, r4, r5
      : size_(new_shape_size) {
  41a352:	9458      	str	r4, [sp, #352]	@ 0x160
    for (int i = 0; i < size_increase; ++i) {
  41a354:	d01f      	beq.n	41a396 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
    TFLITE_DCHECK_LT(i, size_);
  41a356:	2c00      	cmp	r4, #0
  41a358:	f340 84cf 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    dims_[i] = val;
  41a35c:	2201      	movs	r2, #1
    for (int i = 0; i < size_increase; ++i) {
  41a35e:	4290      	cmp	r0, r2
    dims_[i] = val;
  41a360:	9259      	str	r2, [sp, #356]	@ 0x164
    for (int i = 0; i < size_increase; ++i) {
  41a362:	d018      	beq.n	41a396 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
    TFLITE_DCHECK_LT(i, size_);
  41a364:	4294      	cmp	r4, r2
  41a366:	f000 84c8 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a36a:	2802      	cmp	r0, #2
    dims_[i] = val;
  41a36c:	925a      	str	r2, [sp, #360]	@ 0x168
    for (int i = 0; i < size_increase; ++i) {
  41a36e:	d012      	beq.n	41a396 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
    TFLITE_DCHECK_LT(i, size_);
  41a370:	2c02      	cmp	r4, #2
  41a372:	f000 84c2 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a376:	2803      	cmp	r0, #3
    dims_[i] = val;
  41a378:	925b      	str	r2, [sp, #364]	@ 0x16c
    for (int i = 0; i < size_increase; ++i) {
  41a37a:	d00c      	beq.n	41a396 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
    TFLITE_DCHECK_LT(i, size_);
  41a37c:	2c03      	cmp	r4, #3
  41a37e:	f000 84bc 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a382:	2804      	cmp	r0, #4
    dims_[i] = val;
  41a384:	925c      	str	r2, [sp, #368]	@ 0x170
    for (int i = 0; i < size_increase; ++i) {
  41a386:	d006      	beq.n	41a396 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
    TFLITE_DCHECK_LT(i, size_);
  41a388:	2c04      	cmp	r4, #4
  41a38a:	f000 84b6 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a38e:	2805      	cmp	r0, #5
    dims_[i] = val;
  41a390:	925d      	str	r2, [sp, #372]	@ 0x174
    for (int i = 0; i < size_increase; ++i) {
  41a392:	f040 84b2 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41a396:	ab59      	add	r3, sp, #356	@ 0x164
  41a398:	00aa      	lsls	r2, r5, #2
  41a39a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41a39e:	a947      	add	r1, sp, #284	@ 0x11c
  41a3a0:	f7f6 f90c 	bl	4105bc <memcpy>
    return this->size_ == comp.size_ &&
  41a3a4:	9d52      	ldr	r5, [sp, #328]	@ 0x148
  41a3a6:	9e58      	ldr	r6, [sp, #352]	@ 0x160
  41a3a8:	42b5      	cmp	r5, r6
  41a3aa:	f000 8212 	beq.w	41a7d2 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x546>
  for (int i = dims_count - 1; i >= 0; --i) {
  41a3ae:	1e63      	subs	r3, r4, #1
  41a3b0:	f100 84a3 	bmi.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    TFLITE_DCHECK_LT(i, size_);
  41a3b4:	429d      	cmp	r5, r3
  41a3b6:	f340 84a0 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41a3ba:	aa80      	add	r2, sp, #512	@ 0x200
  41a3bc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  41a3c0:	0098      	lsls	r0, r3, #2
    TFLITE_DCHECK_LT(i, size_);
  41a3c2:	429e      	cmp	r6, r3
    return dims_[i];
  41a3c4:	f851 2cb4 	ldr.w	r2, [r1, #-180]
  41a3c8:	9000      	str	r0, [sp, #0]
    TFLITE_DCHECK_LT(i, size_);
  41a3ca:	f340 8496 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41a3ce:	f851 1c9c 	ldr.w	r1, [r1, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  41a3d2:	428a      	cmp	r2, r1
  41a3d4:	f000 8454 	beq.w	41ac80 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x9f4>
    } else if (extended_shape0.Dims(i) == 1) {
  41a3d8:	2a01      	cmp	r2, #1
  41a3da:	f000 8446 	beq.w	41ac6a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x9de>
    } else if (extended_shape1.Dims(i) == 1) {
  41a3de:	2901      	cmp	r1, #1
  41a3e0:	d14a      	bne.n	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41a3e2:	462a      	mov	r2, r5
  41a3e4:	4635      	mov	r5, r6
  41a3e6:	4616      	mov	r6, r2
  const RuntimeShape* shape_a =
  41a3e8:	a958      	add	r1, sp, #352	@ 0x160
  const RuntimeShape* shape_b =
  41a3ea:	f50d 7ca4 	add.w	ip, sp, #328	@ 0x148
    TFLITE_DCHECK_LT(i, size_);
  41a3ee:	42b3      	cmp	r3, r6
    return dims_[i];
  41a3f0:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
  41a3f4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  41a3f8:	eb01 0984 	add.w	r9, r1, r4, lsl #2
  41a3fc:	f280 847d 	bge.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41a400:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
  41a404:	44e6      	add	lr, ip
  41a406:	4282      	cmp	r2, r0
  41a408:	f040 8394 	bne.w	41ab34 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8a8>
  41a40c:	2c01      	cmp	r4, #1
    --i;
  41a40e:	f1a4 0302 	sub.w	r3, r4, #2
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41a412:	d031      	beq.n	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41a414:	f859 0c04 	ldr.w	r0, [r9, #-4]
  41a418:	f85e 2c04 	ldr.w	r2, [lr, #-4]
  41a41c:	4290      	cmp	r0, r2
  41a41e:	f040 8384 	bne.w	41ab2a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x89e>
  41a422:	2c02      	cmp	r4, #2
    --i;
  41a424:	f1a4 0303 	sub.w	r3, r4, #3
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41a428:	d026      	beq.n	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41a42a:	429d      	cmp	r5, r3
  41a42c:	f340 8465 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41a430:	429e      	cmp	r6, r3
    return dims_[i];
  41a432:	f859 0c08 	ldr.w	r0, [r9, #-8]
    TFLITE_DCHECK_LT(i, size_);
  41a436:	f340 8460 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41a43a:	f85e 2c08 	ldr.w	r2, [lr, #-8]
  41a43e:	4290      	cmp	r0, r2
  41a440:	f040 847b 	bne.w	41ad3a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xaae>
  41a444:	2c03      	cmp	r4, #3
    --i;
  41a446:	f1a4 0304 	sub.w	r3, r4, #4
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41a44a:	d015      	beq.n	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41a44c:	429d      	cmp	r5, r3
  41a44e:	f340 8454 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41a452:	429e      	cmp	r6, r3
    return dims_[i];
  41a454:	f859 0c0c 	ldr.w	r0, [r9, #-12]
    TFLITE_DCHECK_LT(i, size_);
  41a458:	f340 844f 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41a45c:	f85e 2c0c 	ldr.w	r2, [lr, #-12]
  41a460:	4290      	cmp	r0, r2
  41a462:	f040 846a 	bne.w	41ad3a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xaae>
  41a466:	2c05      	cmp	r4, #5
  41a468:	d106      	bne.n	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41a46a:	f859 2c10 	ldr.w	r2, [r9, #-16]
  41a46e:	f85e 3c10 	ldr.w	r3, [lr, #-16]
  41a472:	429a      	cmp	r2, r3
  41a474:	f040 8458 	bne.w	41ad28 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa9c>
            op_params, tflite::micro::GetTensorShape(input1),
  41a478:	4641      	mov	r1, r8
  41a47a:	a840      	add	r0, sp, #256	@ 0x100
  41a47c:	f002 f898 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41a480:	f1b8 0f00 	cmp.w	r8, #0
  41a484:	f000 8439 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41a488:	f8d8 3000 	ldr.w	r3, [r8]
            tflite::micro::GetTensorShape(input2),
  41a48c:	4639      	mov	r1, r7
  41a48e:	a83a      	add	r0, sp, #232	@ 0xe8
  41a490:	9312      	str	r3, [sp, #72]	@ 0x48
  41a492:	f002 f88d 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41a496:	2f00      	cmp	r7, #0
  41a498:	f000 842f 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41a49c:	683b      	ldr	r3, [r7, #0]
            tflite::micro::GetTensorShape(output),
  41a49e:	4659      	mov	r1, fp
  41a4a0:	a834      	add	r0, sp, #208	@ 0xd0
  41a4a2:	9313      	str	r3, [sp, #76]	@ 0x4c
  41a4a4:	f002 f884 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      : size_(new_shape_size) {
  41a4a8:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  41a4aa:	9a40      	ldr	r2, [sp, #256]	@ 0x100
      : size_(new_shape_size) {
  41a4ac:	9364      	str	r3, [sp, #400]	@ 0x190
  return reinterpret_cast<T*>(tensor->data.raw);
  41a4ae:	f8db 3000 	ldr.w	r3, [fp]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41a4b2:	2a04      	cmp	r2, #4
  41a4b4:	931a      	str	r3, [sp, #104]	@ 0x68
  41a4b6:	f300 8420 	bgt.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a4ba:	f1d2 0004 	rsbs	r0, r2, #4
  41a4be:	d00d      	beq.n	41a4dc <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x250>
    dims_[i] = val;
  41a4c0:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41a4c2:	4298      	cmp	r0, r3
    dims_[i] = val;
  41a4c4:	9365      	str	r3, [sp, #404]	@ 0x194
    for (int i = 0; i < size_increase; ++i) {
  41a4c6:	d009      	beq.n	41a4dc <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x250>
  41a4c8:	2802      	cmp	r0, #2
    dims_[i] = val;
  41a4ca:	9366      	str	r3, [sp, #408]	@ 0x198
    for (int i = 0; i < size_increase; ++i) {
  41a4cc:	d006      	beq.n	41a4dc <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x250>
  41a4ce:	2803      	cmp	r0, #3
    dims_[i] = val;
  41a4d0:	9367      	str	r3, [sp, #412]	@ 0x19c
    for (int i = 0; i < size_increase; ++i) {
  41a4d2:	d003      	beq.n	41a4dc <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x250>
  41a4d4:	2804      	cmp	r0, #4
    dims_[i] = val;
  41a4d6:	9368      	str	r3, [sp, #416]	@ 0x1a0
    for (int i = 0; i < size_increase; ++i) {
  41a4d8:	f040 840f 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41a4dc:	ab65      	add	r3, sp, #404	@ 0x194
  41a4de:	0092      	lsls	r2, r2, #2
  41a4e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41a4e4:	a941      	add	r1, sp, #260	@ 0x104
  41a4e6:	f7f6 f869 	bl	4105bc <memcpy>
      : size_(new_shape_size) {
  41a4ea:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  41a4ec:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
      : size_(new_shape_size) {
  41a4ee:	936a      	str	r3, [sp, #424]	@ 0x1a8
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41a4f0:	429a      	cmp	r2, r3
  41a4f2:	f300 8402 	bgt.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a4f6:	1a98      	subs	r0, r3, r2
  41a4f8:	d00d      	beq.n	41a516 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x28a>
    dims_[i] = val;
  41a4fa:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41a4fc:	4298      	cmp	r0, r3
    dims_[i] = val;
  41a4fe:	936b      	str	r3, [sp, #428]	@ 0x1ac
    for (int i = 0; i < size_increase; ++i) {
  41a500:	d009      	beq.n	41a516 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x28a>
  41a502:	2802      	cmp	r0, #2
    dims_[i] = val;
  41a504:	936c      	str	r3, [sp, #432]	@ 0x1b0
    for (int i = 0; i < size_increase; ++i) {
  41a506:	d006      	beq.n	41a516 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x28a>
  41a508:	2803      	cmp	r0, #3
    dims_[i] = val;
  41a50a:	936d      	str	r3, [sp, #436]	@ 0x1b4
    for (int i = 0; i < size_increase; ++i) {
  41a50c:	d003      	beq.n	41a516 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x28a>
  41a50e:	2804      	cmp	r0, #4
    dims_[i] = val;
  41a510:	936e      	str	r3, [sp, #440]	@ 0x1b8
    for (int i = 0; i < size_increase; ++i) {
  41a512:	f040 83f2 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41a516:	ab6b      	add	r3, sp, #428	@ 0x1ac
  41a518:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41a51c:	0092      	lsls	r2, r2, #2
  41a51e:	a93b      	add	r1, sp, #236	@ 0xec
  41a520:	f7f6 f84c 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41a524:	9b64      	ldr	r3, [sp, #400]	@ 0x190
  41a526:	2b03      	cmp	r3, #3
  41a528:	f340 83e7 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    desc_out->strides[i] = desc_stride;
  41a52c:	2101      	movs	r1, #1
    return dims_[i];
  41a52e:	9b68      	ldr	r3, [sp, #416]	@ 0x1a0
  41a530:	9867      	ldr	r0, [sp, #412]	@ 0x19c
  41a532:	9d66      	ldr	r5, [sp, #408]	@ 0x198
    desc_stride *= input_shape.Dims(i);
  41a534:	fb00 f203 	mul.w	r2, r0, r3
    desc_out->strides[i] = desc_stride;
  41a538:	9275      	str	r2, [sp, #468]	@ 0x1d4
    desc_stride *= input_shape.Dims(i);
  41a53a:	fb05 f202 	mul.w	r2, r5, r2
    desc_out->strides[i] = desc_stride;
  41a53e:	9274      	str	r2, [sp, #464]	@ 0x1d0
    TFLITE_DCHECK_LT(i, size_);
  41a540:	9a6a      	ldr	r2, [sp, #424]	@ 0x1a8
    return dims_[i];
  41a542:	9f65      	ldr	r7, [sp, #404]	@ 0x194
    TFLITE_DCHECK_LT(i, size_);
  41a544:	2a03      	cmp	r2, #3
    desc_out->extents[i] = input_shape.Dims(i);
  41a546:	9373      	str	r3, [sp, #460]	@ 0x1cc
    desc_out->strides[i] = desc_stride;
  41a548:	9376      	str	r3, [sp, #472]	@ 0x1d8
    desc_out->extents[i] = input_shape.Dims(i);
  41a54a:	9072      	str	r0, [sp, #456]	@ 0x1c8
    desc_out->strides[i] = desc_stride;
  41a54c:	9177      	str	r1, [sp, #476]	@ 0x1dc
    desc_out->extents[i] = input_shape.Dims(i);
  41a54e:	9571      	str	r5, [sp, #452]	@ 0x1c4
  41a550:	9770      	str	r7, [sp, #448]	@ 0x1c0
  41a552:	f340 83d2 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41a556:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
    desc_out->strides[i] = desc_stride;
  41a558:	917f      	str	r1, [sp, #508]	@ 0x1fc
  41a55a:	996d      	ldr	r1, [sp, #436]	@ 0x1b4
  41a55c:	9c6c      	ldr	r4, [sp, #432]	@ 0x1b0
    desc_stride *= input_shape.Dims(i);
  41a55e:	fb01 f602 	mul.w	r6, r1, r2
    desc_out->strides[i] = desc_stride;
  41a562:	967d      	str	r6, [sp, #500]	@ 0x1f4
    desc_stride *= input_shape.Dims(i);
  41a564:	fb04 f606 	mul.w	r6, r4, r6
    desc_out->strides[i] = desc_stride;
  41a568:	967c      	str	r6, [sp, #496]	@ 0x1f0
  41a56a:	9e6b      	ldr	r6, [sp, #428]	@ 0x1ac
    desc_out->extents[i] = input_shape.Dims(i);
  41a56c:	927b      	str	r2, [sp, #492]	@ 0x1ec
    if (extent0 != extent1) {
  41a56e:	42be      	cmp	r6, r7
    desc_out->strides[i] = desc_stride;
  41a570:	927e      	str	r2, [sp, #504]	@ 0x1f8
    desc_out->extents[i] = input_shape.Dims(i);
  41a572:	917a      	str	r1, [sp, #488]	@ 0x1e8
  41a574:	9479      	str	r4, [sp, #484]	@ 0x1e4
  41a576:	9678      	str	r6, [sp, #480]	@ 0x1e0
    if (extent0 != extent1) {
  41a578:	d008      	beq.n	41a58c <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x300>
      if (extent0 == 1) {
  41a57a:	2f01      	cmp	r7, #1
  41a57c:	f000 84a2 	beq.w	41aec4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc38>
        TFLITE_DCHECK_EQ(extent1, 1);
  41a580:	2e01      	cmp	r6, #1
  41a582:	f040 83ba 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
        desc1_out->strides[i] = 0;
  41a586:	2600      	movs	r6, #0
        desc1_out->extents[i] = extent0;
  41a588:	9778      	str	r7, [sp, #480]	@ 0x1e0
        desc1_out->strides[i] = 0;
  41a58a:	967c      	str	r6, [sp, #496]	@ 0x1f0
    if (extent0 != extent1) {
  41a58c:	42a5      	cmp	r5, r4
  41a58e:	d008      	beq.n	41a5a2 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x316>
      if (extent0 == 1) {
  41a590:	2d01      	cmp	r5, #1
  41a592:	f000 83be 	beq.w	41ad12 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa86>
        TFLITE_DCHECK_EQ(extent1, 1);
  41a596:	2c01      	cmp	r4, #1
  41a598:	f040 83af 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
        desc1_out->strides[i] = 0;
  41a59c:	2400      	movs	r4, #0
        desc1_out->extents[i] = extent0;
  41a59e:	9579      	str	r5, [sp, #484]	@ 0x1e4
        desc1_out->strides[i] = 0;
  41a5a0:	947d      	str	r4, [sp, #500]	@ 0x1f4
    if (extent0 != extent1) {
  41a5a2:	4288      	cmp	r0, r1
  41a5a4:	d008      	beq.n	41a5b8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32c>
      if (extent0 == 1) {
  41a5a6:	2801      	cmp	r0, #1
  41a5a8:	f000 83af 	beq.w	41ad0a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa7e>
        TFLITE_DCHECK_EQ(extent1, 1);
  41a5ac:	2901      	cmp	r1, #1
  41a5ae:	f040 83a4 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
        desc1_out->strides[i] = 0;
  41a5b2:	2100      	movs	r1, #0
        desc1_out->extents[i] = extent0;
  41a5b4:	907a      	str	r0, [sp, #488]	@ 0x1e8
        desc1_out->strides[i] = 0;
  41a5b6:	917e      	str	r1, [sp, #504]	@ 0x1f8
    if (extent0 != extent1) {
  41a5b8:	4293      	cmp	r3, r2
  41a5ba:	d008      	beq.n	41a5ce <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x342>
      if (extent0 == 1) {
  41a5bc:	2b01      	cmp	r3, #1
  41a5be:	f000 839e 	beq.w	41acfe <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa72>
        TFLITE_DCHECK_EQ(extent1, 1);
  41a5c2:	2a01      	cmp	r2, #1
  41a5c4:	f040 8399 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
        desc1_out->extents[i] = extent0;
  41a5c8:	937b      	str	r3, [sp, #492]	@ 0x1ec
        desc1_out->strides[i] = 0;
  41a5ca:	2300      	movs	r3, #0
  41a5cc:	937f      	str	r3, [sp, #508]	@ 0x1fc
      : size_(new_shape_size) {
  41a5ce:	2304      	movs	r3, #4
  int32_t DimensionsCount() const { return size_; }
  41a5d0:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
      : size_(new_shape_size) {
  41a5d2:	935e      	str	r3, [sp, #376]	@ 0x178
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41a5d4:	429a      	cmp	r2, r3
  41a5d6:	f300 8390 	bgt.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_increase; ++i) {
  41a5da:	1a98      	subs	r0, r3, r2
  41a5dc:	d00d      	beq.n	41a5fa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x36e>
    dims_[i] = val;
  41a5de:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41a5e0:	4298      	cmp	r0, r3
    dims_[i] = val;
  41a5e2:	935f      	str	r3, [sp, #380]	@ 0x17c
    for (int i = 0; i < size_increase; ++i) {
  41a5e4:	d009      	beq.n	41a5fa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x36e>
  41a5e6:	2802      	cmp	r0, #2
    dims_[i] = val;
  41a5e8:	9360      	str	r3, [sp, #384]	@ 0x180
    for (int i = 0; i < size_increase; ++i) {
  41a5ea:	d006      	beq.n	41a5fa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x36e>
  41a5ec:	2803      	cmp	r0, #3
    dims_[i] = val;
  41a5ee:	9361      	str	r3, [sp, #388]	@ 0x184
    for (int i = 0; i < size_increase; ++i) {
  41a5f0:	d003      	beq.n	41a5fa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x36e>
  41a5f2:	2804      	cmp	r0, #4
    dims_[i] = val;
  41a5f4:	9362      	str	r3, [sp, #392]	@ 0x188
    for (int i = 0; i < size_increase; ++i) {
  41a5f6:	f040 8380 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41a5fa:	ab5f      	add	r3, sp, #380	@ 0x17c
  41a5fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41a600:	0092      	lsls	r2, r2, #2
  41a602:	a935      	add	r1, sp, #212	@ 0xd4
  41a604:	f7f5 ffda 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41a608:	9b5e      	ldr	r3, [sp, #376]	@ 0x178
  41a60a:	2b00      	cmp	r3, #0
  41a60c:	9311      	str	r3, [sp, #68]	@ 0x44
  41a60e:	f340 8374 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41a612:	9a5f      	ldr	r2, [sp, #380]	@ 0x17c
  41a614:	9b7f      	ldr	r3, [sp, #508]	@ 0x1fc
  41a616:	921b      	str	r2, [sp, #108]	@ 0x6c
  41a618:	9a60      	ldr	r2, [sp, #384]	@ 0x180
  41a61a:	f8dd 9188 	ldr.w	r9, [sp, #392]	@ 0x188
  41a61e:	9216      	str	r2, [sp, #88]	@ 0x58
  41a620:	9a61      	ldr	r2, [sp, #388]	@ 0x184
  41a622:	2b01      	cmp	r3, #1
  41a624:	9208      	str	r2, [sp, #32]
  41a626:	9a70      	ldr	r2, [sp, #448]	@ 0x1c0
  41a628:	920e      	str	r2, [sp, #56]	@ 0x38
  41a62a:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
  41a62c:	920f      	str	r2, [sp, #60]	@ 0x3c
  41a62e:	9a72      	ldr	r2, [sp, #456]	@ 0x1c8
  41a630:	9202      	str	r2, [sp, #8]
  41a632:	9a73      	ldr	r2, [sp, #460]	@ 0x1cc
  41a634:	9205      	str	r2, [sp, #20]
  41a636:	9a74      	ldr	r2, [sp, #464]	@ 0x1d0
  41a638:	921c      	str	r2, [sp, #112]	@ 0x70
  41a63a:	9a75      	ldr	r2, [sp, #468]	@ 0x1d4
  41a63c:	9214      	str	r2, [sp, #80]	@ 0x50
  41a63e:	9a76      	ldr	r2, [sp, #472]	@ 0x1d8
  41a640:	9209      	str	r2, [sp, #36]	@ 0x24
  41a642:	e9dd 7277 	ldrd	r7, r2, [sp, #476]	@ 0x1dc
  41a646:	9203      	str	r2, [sp, #12]
  41a648:	9a79      	ldr	r2, [sp, #484]	@ 0x1e4
  41a64a:	9204      	str	r2, [sp, #16]
  41a64c:	9a7a      	ldr	r2, [sp, #488]	@ 0x1e8
  41a64e:	9206      	str	r2, [sp, #24]
  41a650:	9a7b      	ldr	r2, [sp, #492]	@ 0x1ec
  41a652:	9207      	str	r2, [sp, #28]
  41a654:	e9dd e27c 	ldrd	lr, r2, [sp, #496]	@ 0x1f0
  41a658:	9215      	str	r2, [sp, #84]	@ 0x54
  41a65a:	9a7e      	ldr	r2, [sp, #504]	@ 0x1f8
  41a65c:	920a      	str	r2, [sp, #40]	@ 0x28
  41a65e:	f040 8377 	bne.w	41ad50 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac4>
  41a662:	1e7c      	subs	r4, r7, #1
  41a664:	bf18      	it	ne
  41a666:	2401      	movne	r4, #1
  41a668:	2c00      	cmp	r4, #0
  41a66a:	f040 8371 	bne.w	41ad50 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac4>
  41a66e:	9a08      	ldr	r2, [sp, #32]
  41a670:	9816      	ldr	r0, [sp, #88]	@ 0x58
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  41a672:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  41a676:	fb02 f300 	mul.w	r3, r2, r0
  41a67a:	fb09 f103 	mul.w	r1, r9, r3
  41a67e:	fb09 f302 	mul.w	r3, r9, r2
  41a682:	460f      	mov	r7, r1
  41a684:	4625      	mov	r5, r4
  41a686:	4671      	mov	r1, lr
  41a688:	46a3      	mov	fp, r4
  41a68a:	4682      	mov	sl, r0
  41a68c:	4626      	mov	r6, r4
  41a68e:	469e      	mov	lr, r3
  41a690:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  41a692:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
  41a694:	459b      	cmp	fp, r3
  41a696:	f6bf ae0b 	bge.w	41a2b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x24>
    TFLITE_DCHECK_LT(i, size_);
  41a69a:	2a01      	cmp	r2, #1
  41a69c:	f000 832d 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  41a6a0:	f1ba 0f00 	cmp.w	sl, #0
  41a6a4:	f340 808e 	ble.w	41a7c4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x538>
  41a6a8:	2a02      	cmp	r2, #2
  41a6aa:	f000 8326 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41a6ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  41a6b0:	4630      	mov	r0, r6
  41a6b2:	3b04      	subs	r3, #4
  41a6b4:	930b      	str	r3, [sp, #44]	@ 0x2c
  41a6b6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
  41a6b8:	46a4      	mov	ip, r4
  41a6ba:	3b04      	subs	r3, #4
  41a6bc:	930c      	str	r3, [sp, #48]	@ 0x30
  41a6be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  41a6c0:	f04f 0800 	mov.w	r8, #0
  41a6c4:	3b04      	subs	r3, #4
  41a6c6:	930d      	str	r3, [sp, #52]	@ 0x34
  41a6c8:	462b      	mov	r3, r5
  41a6ca:	e9cd 161d 	strd	r1, r6, [sp, #116]	@ 0x74
  41a6ce:	e9cd 451f 	strd	r4, r5, [sp, #124]	@ 0x7c
  41a6d2:	9721      	str	r7, [sp, #132]	@ 0x84
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  41a6d4:	9908      	ldr	r1, [sp, #32]
  41a6d6:	2900      	cmp	r1, #0
  41a6d8:	dd66      	ble.n	41a7a8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x51c>
  41a6da:	2a03      	cmp	r2, #3
  41a6dc:	f000 830d 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41a6e0:	4606      	mov	r6, r0
  41a6e2:	461d      	mov	r5, r3
  41a6e4:	4664      	mov	r4, ip
  41a6e6:	2100      	movs	r1, #0
  41a6e8:	e9cd 3016 	strd	r3, r0, [sp, #88]	@ 0x58
  41a6ec:	e9cd ce18 	strd	ip, lr, [sp, #96]	@ 0x60
  41a6f0:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
  41a6f4:	2a04      	cmp	r2, #4
  41a6f6:	f040 8413 	bne.w	41af20 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc94>
  41a6fa:	2001      	movs	r0, #1
  41a6fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
  41a6fe:	f1b9 0f00 	cmp.w	r9, #0
  41a702:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
  41a706:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  41a708:	eb09 0300 	add.w	r3, r9, r0
  41a70c:	eb07 0c85 	add.w	ip, r7, r5, lsl #2
  41a710:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
  41a712:	bfb8      	it	lt
  41a714:	4603      	movlt	r3, r0
  41a716:	eb07 0786 	add.w	r7, r7, r6, lsl #2
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41a71a:	2000      	movs	r0, #0
  41a71c:	46f2      	mov	sl, lr
  41a71e:	9700      	str	r7, [sp, #0]
  41a720:	e031      	b.n	41a786 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4fa>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  41a722:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  41a724:	45bb      	cmp	fp, r7
  41a726:	f280 82e8 	bge.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  41a72a:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
  41a72c:	4547      	cmp	r7, r8
  41a72e:	f340 82e4 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  41a732:	9f02      	ldr	r7, [sp, #8]
  41a734:	428f      	cmp	r7, r1
  41a736:	f340 82e0 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  41a73a:	9f05      	ldr	r7, [sp, #20]
  41a73c:	4287      	cmp	r7, r0
  41a73e:	f340 82dc 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
  41a742:	9f00      	ldr	r7, [sp, #0]
  41a744:	f857 ef04 	ldr.w	lr, [r7, #4]!
  41a748:	9700      	str	r7, [sp, #0]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  41a74a:	9f03      	ldr	r7, [sp, #12]
  41a74c:	45bb      	cmp	fp, r7
  41a74e:	f280 82d4 	bge.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  41a752:	9f04      	ldr	r7, [sp, #16]
  41a754:	4547      	cmp	r7, r8
  41a756:	f340 82d0 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  41a75a:	9f06      	ldr	r7, [sp, #24]
  41a75c:	428f      	cmp	r7, r1
  41a75e:	f340 82cc 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  41a762:	9f07      	ldr	r7, [sp, #28]
  41a764:	4287      	cmp	r7, r0
  41a766:	f340 82c8 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
              ActivationFunctionWithMinMax<T>(
  41a76a:	f85a 7f04 	ldr.w	r7, [sl, #4]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41a76e:	3001      	adds	r0, #1
              ActivationFunctionWithMinMax<T>(
  41a770:	44be      	add	lr, r7
      if (__a < __b)
  41a772:	9f10      	ldr	r7, [sp, #64]	@ 0x40
  41a774:	45be      	cmp	lr, r7
  41a776:	bfb8      	it	lt
  41a778:	46be      	movlt	lr, r7
      if (__b < __a)
  41a77a:	9f01      	ldr	r7, [sp, #4]
  41a77c:	45be      	cmp	lr, r7
  41a77e:	bfa8      	it	ge
  41a780:	46be      	movge	lr, r7
          output_data[Offset(extended_output_shape, b, y, x, c)] =
  41a782:	f84c ef04 	str.w	lr, [ip, #4]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41a786:	3b01      	subs	r3, #1
  41a788:	d1cb      	bne.n	41a722 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x496>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  41a78a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41a78c:	3101      	adds	r1, #1
  41a78e:	441c      	add	r4, r3
  41a790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  41a792:	444d      	add	r5, r9
  41a794:	441e      	add	r6, r3
  41a796:	9b08      	ldr	r3, [sp, #32]
  41a798:	428b      	cmp	r3, r1
  41a79a:	dcab      	bgt.n	41a6f4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x468>
  41a79c:	e9dd 3016 	ldrd	r3, r0, [sp, #88]	@ 0x58
  41a7a0:	e9dd ce18 	ldrd	ip, lr, [sp, #96]	@ 0x60
  41a7a4:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  41a7a8:	9915      	ldr	r1, [sp, #84]	@ 0x54
  41a7aa:	f108 0801 	add.w	r8, r8, #1
  41a7ae:	448c      	add	ip, r1
  41a7b0:	9914      	ldr	r1, [sp, #80]	@ 0x50
  41a7b2:	45c2      	cmp	sl, r8
  41a7b4:	4473      	add	r3, lr
  41a7b6:	4408      	add	r0, r1
  41a7b8:	dc8c      	bgt.n	41a6d4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x448>
  41a7ba:	e9dd 161d 	ldrd	r1, r6, [sp, #116]	@ 0x74
  41a7be:	e9dd 451f 	ldrd	r4, r5, [sp, #124]	@ 0x7c
  41a7c2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  41a7c4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  41a7c6:	f10b 0b01 	add.w	fp, fp, #1
  41a7ca:	440c      	add	r4, r1
  41a7cc:	443d      	add	r5, r7
  41a7ce:	441e      	add	r6, r3
  41a7d0:	e75f      	b.n	41a692 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x406>
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
  41a7d2:	4648      	mov	r0, r9
  41a7d4:	a959      	add	r1, sp, #356	@ 0x164
  41a7d6:	00aa      	lsls	r2, r5, #2
  41a7d8:	f006 f94a 	bl	420a70 <memcmp>
    return this->size_ == comp.size_ &&
  41a7dc:	4681      	mov	r9, r0
  41a7de:	2800      	cmp	r0, #0
  41a7e0:	f47f ade5 	bne.w	41a3ae <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x122>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
  41a7e4:	4641      	mov	r1, r8
  41a7e6:	a82e      	add	r0, sp, #184	@ 0xb8
  41a7e8:	f001 fee2 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41a7ec:	f1b8 0f00 	cmp.w	r8, #0
  41a7f0:	f000 8283 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
                           tflite::micro::GetTensorShape(input2),
  41a7f4:	4639      	mov	r1, r7
  41a7f6:	a828      	add	r0, sp, #160	@ 0xa0
  return reinterpret_cast<const T*>(tensor->data.raw);
  41a7f8:	f8d8 4000 	ldr.w	r4, [r8]
  41a7fc:	f001 fed8 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41a800:	2f00      	cmp	r7, #0
  41a802:	f000 827a 	beq.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
                           tflite::micro::GetTensorShape(output),
  41a806:	4659      	mov	r1, fp
  41a808:	a822      	add	r0, sp, #136	@ 0x88
  return reinterpret_cast<const T*>(tensor->data.raw);
  41a80a:	683d      	ldr	r5, [r7, #0]
  41a80c:	f001 fed0 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
  41a810:	9b01      	ldr	r3, [sp, #4]
  return reinterpret_cast<T*>(tensor->data.raw);
  41a812:	f8db 6000 	ldr.w	r6, [fp]
  41a816:	459a      	cmp	sl, r3
  41a818:	f300 826f 	bgt.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int i = 0; i < size_; i++) {
  41a81c:	982e      	ldr	r0, [sp, #184]	@ 0xb8
  41a81e:	2800      	cmp	r0, #0
  41a820:	f340 8359 	ble.w	41aed6 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc4a>
  41a824:	1e42      	subs	r2, r0, #1
  41a826:	2a04      	cmp	r2, #4
  41a828:	f240 8351 	bls.w	41aece <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc42>
  41a82c:	ea4f 0e90 	mov.w	lr, r0, lsr #2
  41a830:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41a834:	f1ae 0e10 	sub.w	lr, lr, #16
  41a838:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41a83c:	f10e 0e01 	add.w	lr, lr, #1
  41a840:	af2f      	add	r7, sp, #188	@ 0xbc
  41a842:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41a846:	f04e e001 	dls	lr, lr
  41a84a:	463a      	mov	r2, r7
      buffer_size *= dims_data[i];
  41a84c:	ecb2 5f04 	ldc	15, cr5, [r2], #16
  41a850:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41a854:	f00f c007 	le	lr, 41a84c <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x5c0>
  41a858:	ee36 1b10 	vmov.32	r1, d6[1]
  41a85c:	ee16 2a10 	vmov	r2, s12
  41a860:	fb01 f202 	mul.w	r2, r1, r2
  41a864:	ee17 1b10 	vmov.32	r1, d7[0]
  41a868:	fb01 f202 	mul.w	r2, r1, r2
  41a86c:	ee37 1b10 	vmov.32	r1, d7[1]
  41a870:	0783      	lsls	r3, r0, #30
  41a872:	fb01 f202 	mul.w	r2, r1, r2
  41a876:	f020 0103 	bic.w	r1, r0, #3
  41a87a:	d02a      	beq.n	41a8d2 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x646>
      buffer_size *= dims_data[i];
  41a87c:	f857 7021 	ldr.w	r7, [r7, r1, lsl #2]
    for (int i = 0; i < size_; i++) {
  41a880:	f101 0c01 	add.w	ip, r1, #1
  41a884:	4560      	cmp	r0, ip
      buffer_size *= dims_data[i];
  41a886:	fb07 f202 	mul.w	r2, r7, r2
  41a88a:	ea4f 0781 	mov.w	r7, r1, lsl #2
    for (int i = 0; i < size_; i++) {
  41a88e:	dd20      	ble.n	41a8d2 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x646>
      buffer_size *= dims_data[i];
  41a890:	f10d 0cc0 	add.w	ip, sp, #192	@ 0xc0
  41a894:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (int i = 0; i < size_; i++) {
  41a898:	f101 0c02 	add.w	ip, r1, #2
  41a89c:	4560      	cmp	r0, ip
      buffer_size *= dims_data[i];
  41a89e:	fb03 f202 	mul.w	r2, r3, r2
    for (int i = 0; i < size_; i++) {
  41a8a2:	dd16      	ble.n	41a8d2 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x646>
      buffer_size *= dims_data[i];
  41a8a4:	f10d 0cc4 	add.w	ip, sp, #196	@ 0xc4
  41a8a8:	f85c 3007 	ldr.w	r3, [ip, r7]
    for (int i = 0; i < size_; i++) {
  41a8ac:	f101 0c03 	add.w	ip, r1, #3
  41a8b0:	4560      	cmp	r0, ip
      buffer_size *= dims_data[i];
  41a8b2:	fb03 f202 	mul.w	r2, r3, r2
    for (int i = 0; i < size_; i++) {
  41a8b6:	dd0c      	ble.n	41a8d2 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x646>
      buffer_size *= dims_data[i];
  41a8b8:	f10d 0cc8 	add.w	ip, sp, #200	@ 0xc8
  41a8bc:	f85c 3007 	ldr.w	r3, [ip, r7]
    for (int i = 0; i < size_; i++) {
  41a8c0:	3104      	adds	r1, #4
  41a8c2:	4288      	cmp	r0, r1
      buffer_size *= dims_data[i];
  41a8c4:	fb03 f202 	mul.w	r2, r3, r2
    for (int i = 0; i < size_; i++) {
  41a8c8:	dd03      	ble.n	41a8d2 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x646>
      buffer_size *= dims_data[i];
  41a8ca:	a933      	add	r1, sp, #204	@ 0xcc
  41a8cc:	59c9      	ldr	r1, [r1, r7]
  41a8ce:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
  41a8d2:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
  41a8d4:	9822      	ldr	r0, [sp, #136]	@ 0x88
  41a8d6:	2f00      	cmp	r7, #0
  41a8d8:	f340 8314 	ble.w	41af04 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc78>
  41a8dc:	1e79      	subs	r1, r7, #1
  41a8de:	2904      	cmp	r1, #4
  41a8e0:	f240 830a 	bls.w	41aef8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc6c>
  41a8e4:	ea4f 0e97 	mov.w	lr, r7, lsr #2
    int buffer_size = 1;
  41a8e8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41a8ec:	f1ae 0e10 	sub.w	lr, lr, #16
  41a8f0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41a8f4:	f10e 0e01 	add.w	lr, lr, #1
  41a8f8:	f10d 08a4 	add.w	r8, sp, #164	@ 0xa4
  41a8fc:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41a900:	f04e e001 	dls	lr, lr
  41a904:	4641      	mov	r1, r8
      buffer_size *= dims_data[i];
  41a906:	ecb1 5f04 	ldc	15, cr5, [r1], #16
  41a90a:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41a90e:	f00f c007 	le	lr, 41a906 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x67a>
  41a912:	ee36 cb10 	vmov.32	ip, d6[1]
  41a916:	ee16 1a10 	vmov	r1, s12
  41a91a:	fb0c f101 	mul.w	r1, ip, r1
  41a91e:	ee17 cb10 	vmov.32	ip, d7[0]
  41a922:	fb0c f101 	mul.w	r1, ip, r1
  41a926:	ee37 cb10 	vmov.32	ip, d7[1]
  41a92a:	07bb      	lsls	r3, r7, #30
  41a92c:	fb0c f101 	mul.w	r1, ip, r1
  41a930:	f027 0c03 	bic.w	ip, r7, #3
  41a934:	d02c      	beq.n	41a990 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x704>
      buffer_size *= dims_data[i];
  41a936:	f858 302c 	ldr.w	r3, [r8, ip, lsl #2]
    for (int i = 0; i < size_; i++) {
  41a93a:	f10c 0801 	add.w	r8, ip, #1
  41a93e:	45b8      	cmp	r8, r7
      buffer_size *= dims_data[i];
  41a940:	fb03 f101 	mul.w	r1, r3, r1
  41a944:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
    for (int i = 0; i < size_; i++) {
  41a948:	da22      	bge.n	41a990 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x704>
      buffer_size *= dims_data[i];
  41a94a:	f10d 08a8 	add.w	r8, sp, #168	@ 0xa8
  41a94e:	f858 302c 	ldr.w	r3, [r8, ip, lsl #2]
    for (int i = 0; i < size_; i++) {
  41a952:	f10c 0802 	add.w	r8, ip, #2
  41a956:	45b8      	cmp	r8, r7
      buffer_size *= dims_data[i];
  41a958:	fb03 f101 	mul.w	r1, r3, r1
    for (int i = 0; i < size_; i++) {
  41a95c:	da18      	bge.n	41a990 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x704>
      buffer_size *= dims_data[i];
  41a95e:	f10d 08ac 	add.w	r8, sp, #172	@ 0xac
  41a962:	f858 300e 	ldr.w	r3, [r8, lr]
    for (int i = 0; i < size_; i++) {
  41a966:	f10c 0803 	add.w	r8, ip, #3
  41a96a:	45b8      	cmp	r8, r7
      buffer_size *= dims_data[i];
  41a96c:	fb03 f101 	mul.w	r1, r3, r1
    for (int i = 0; i < size_; i++) {
  41a970:	da0e      	bge.n	41a990 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x704>
      buffer_size *= dims_data[i];
  41a972:	f10d 08b0 	add.w	r8, sp, #176	@ 0xb0
  41a976:	f858 300e 	ldr.w	r3, [r8, lr]
    for (int i = 0; i < size_; i++) {
  41a97a:	f10c 0c04 	add.w	ip, ip, #4
  41a97e:	45bc      	cmp	ip, r7
      buffer_size *= dims_data[i];
  41a980:	fb03 f101 	mul.w	r1, r3, r1
    for (int i = 0; i < size_; i++) {
  41a984:	da04      	bge.n	41a990 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x704>
      buffer_size *= dims_data[i];
  41a986:	af2d      	add	r7, sp, #180	@ 0xb4
  41a988:	f857 700e 	ldr.w	r7, [r7, lr]
  41a98c:	fb07 f101 	mul.w	r1, r7, r1
    for (int i = 0; i < size_; i++) {
  41a990:	2800      	cmp	r0, #0
  41a992:	f340 82af 	ble.w	41aef4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc68>
  41a996:	2805      	cmp	r0, #5
  41a998:	f340 82a8 	ble.w	41aeec <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc60>
  41a99c:	ea4f 0e90 	mov.w	lr, r0, lsr #2
    int buffer_size = 1;
  41a9a0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41a9a4:	f1ae 0e10 	sub.w	lr, lr, #16
  41a9a8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41a9ac:	f10e 0e01 	add.w	lr, lr, #1
  41a9b0:	f10d 0c8c 	add.w	ip, sp, #140	@ 0x8c
  41a9b4:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41a9b8:	f04e e001 	dls	lr, lr
  41a9bc:	4663      	mov	r3, ip
      buffer_size *= dims_data[i];
  41a9be:	ecb3 5f04 	ldc	15, cr5, [r3], #16
  41a9c2:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41a9c6:	f00f c007 	le	lr, 41a9be <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x732>
  41a9ca:	ee36 3b10 	vmov.32	r3, d6[1]
  41a9ce:	ee16 7a10 	vmov	r7, s12
  41a9d2:	fb03 f707 	mul.w	r7, r3, r7
  41a9d6:	ee17 3b10 	vmov.32	r3, d7[0]
  41a9da:	fb03 f707 	mul.w	r7, r3, r7
  41a9de:	ee37 3b10 	vmov.32	r3, d7[1]
  41a9e2:	fb03 f707 	mul.w	r7, r3, r7
  41a9e6:	0783      	lsls	r3, r0, #30
  41a9e8:	f020 0903 	bic.w	r9, r0, #3
  41a9ec:	d02c      	beq.n	41aa48 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7bc>
      buffer_size *= dims_data[i];
  41a9ee:	f85c 3029 	ldr.w	r3, [ip, r9, lsl #2]
    for (int i = 0; i < size_; i++) {
  41a9f2:	f109 0e01 	add.w	lr, r9, #1
  41a9f6:	4570      	cmp	r0, lr
      buffer_size *= dims_data[i];
  41a9f8:	fb03 f707 	mul.w	r7, r3, r7
  41a9fc:	ea4f 0c89 	mov.w	ip, r9, lsl #2
    for (int i = 0; i < size_; i++) {
  41aa00:	dd22      	ble.n	41aa48 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7bc>
      buffer_size *= dims_data[i];
  41aa02:	f10d 0e90 	add.w	lr, sp, #144	@ 0x90
  41aa06:	f85e 3029 	ldr.w	r3, [lr, r9, lsl #2]
    for (int i = 0; i < size_; i++) {
  41aa0a:	f109 0e02 	add.w	lr, r9, #2
  41aa0e:	4570      	cmp	r0, lr
      buffer_size *= dims_data[i];
  41aa10:	fb03 f707 	mul.w	r7, r3, r7
    for (int i = 0; i < size_; i++) {
  41aa14:	dd18      	ble.n	41aa48 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7bc>
      buffer_size *= dims_data[i];
  41aa16:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
  41aa1a:	f85e 300c 	ldr.w	r3, [lr, ip]
    for (int i = 0; i < size_; i++) {
  41aa1e:	f109 0e03 	add.w	lr, r9, #3
  41aa22:	4570      	cmp	r0, lr
      buffer_size *= dims_data[i];
  41aa24:	fb03 f707 	mul.w	r7, r3, r7
    for (int i = 0; i < size_; i++) {
  41aa28:	dd0e      	ble.n	41aa48 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7bc>
      buffer_size *= dims_data[i];
  41aa2a:	f10d 0e98 	add.w	lr, sp, #152	@ 0x98
  41aa2e:	f85e e00c 	ldr.w	lr, [lr, ip]
    for (int i = 0; i < size_; i++) {
  41aa32:	f109 0304 	add.w	r3, r9, #4
  41aa36:	4298      	cmp	r0, r3
      buffer_size *= dims_data[i];
  41aa38:	fb0e f707 	mul.w	r7, lr, r7
    for (int i = 0; i < size_; i++) {
  41aa3c:	dd04      	ble.n	41aa48 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7bc>
      buffer_size *= dims_data[i];
  41aa3e:	ab27      	add	r3, sp, #156	@ 0x9c
  41aa40:	f853 300c 	ldr.w	r3, [r3, ip]
  41aa44:	fb03 f707 	mul.w	r7, r3, r7
  41aa48:	4291      	cmp	r1, r2
  41aa4a:	f040 8156 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_CHECK_EQ(size_2, size_3);
  41aa4e:	42ba      	cmp	r2, r7
  41aa50:	f040 8153 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(input1_shift == 0 || params.input2_shift == 0);
  41aa54:	9b00      	ldr	r3, [sp, #0]
  41aa56:	2b00      	cmp	r3, #0
  41aa58:	f000 810c 	beq.w	41ac74 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x9e8>
  41aa5c:	9902      	ldr	r1, [sp, #8]
  41aa5e:	2900      	cmp	r1, #0
  41aa60:	f040 814b 	bne.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK_LE(input1_shift, 0);
  41aa64:	2b00      	cmp	r3, #0
  41aa66:	f300 8148 	bgt.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41aa6a:	4619      	mov	r1, r3
      input1_shift == 0 ? -params.input2_shift : -input1_shift;
  41aa6c:	4623      	mov	r3, r4
      input1_shift == 0 ? input1_data : input2_data;
  41aa6e:	462c      	mov	r4, r5
  const int32_t* shift_input = input1_shift == 0 ? input2_data : input1_data;
  41aa70:	461d      	mov	r5, r3
      input1_shift == 0 ? -params.input2_shift : -input1_shift;
  41aa72:	f1c1 0900 	rsb	r9, r1, #0
  for (int i = 0; i < flat_size; i++) {
  41aa76:	2a00      	cmp	r2, #0
  41aa78:	f77f ac1a 	ble.w	41a2b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x24>
  assert(exponent <= 31);
  41aa7c:	f1b9 0f1f 	cmp.w	r9, #31
    F0 input_ready_scaled = F0::FromRaw(not_shift_input[i]);
  41aa80:	f9b4 b000 	ldrsh.w	fp, [r4]
        gemmlowp::RoundingDivideByPOT(shift_input[i], input_right_shift));
  41aa84:	682f      	ldr	r7, [r5, #0]
  41aa86:	f300 8148 	bgt.w	41ad1a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa8e>
  41aa8a:	49ad      	ldr	r1, [pc, #692]	@ (41ad40 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xab4>)
  41aa8c:	46d4      	mov	ip, sl
  41aa8e:	458a      	cmp	sl, r1
  41aa90:	bfb8      	it	lt
  41aa92:	468c      	movlt	ip, r1
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  41aa94:	2001      	movs	r0, #1
  41aa96:	2100      	movs	r1, #0
  41aa98:	ea50 910d 			@ <UNDEFINED> instruction: 0xea50910d
  return a ? BitNot(zero) : zero;
  41aa9c:	ea4f 7ed7 	mov.w	lr, r7, lsr #31
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
  41aaa0:	3801      	subs	r0, #1
  return a >> offset;
  41aaa2:	fa47 f309 	asr.w	r3, r7, r9
  return a + b;
  41aaa6:	eb0e 0e60 	add.w	lr, lr, r0, asr #1
  return a & b;
  41aaaa:	4007      	ands	r7, r0
  return a + b;
  41aaac:	45be      	cmp	lr, r7
  41aaae:	ea53 93a3 			@ <UNDEFINED> instruction: 0xea5393a3
  41aab2:	f647 78ff 	movw	r8, #32767	@ 0x7fff
  std::int32_t sum = a32 + b32;
  41aab6:	fa0b f183 	sxtah	r1, fp, r3
  41aaba:	4541      	cmp	r1, r8
  41aabc:	bfa8      	it	ge
  41aabe:	4641      	movge	r1, r8
      if (__a < __b)
  41aac0:	4561      	cmp	r1, ip
  41aac2:	bfb8      	it	lt
  41aac4:	4661      	movlt	r1, ip
      if (__b < __a)
  41aac6:	9f01      	ldr	r7, [sp, #4]
  return a >> offset;
  41aac8:	1043      	asrs	r3, r0, #1
  41aaca:	42b9      	cmp	r1, r7
  41aacc:	bfa8      	it	ge
  41aace:	4639      	movge	r1, r7
  for (int i = 0; i < flat_size; i++) {
  41aad0:	2a01      	cmp	r2, #1
    output_data[i] = clamped_output;
  41aad2:	6031      	str	r1, [r6, #0]
  for (int i = 0; i < flat_size; i++) {
  41aad4:	f43f abec 	beq.w	41a2b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x24>
  41aad8:	ea4f 0e82 	mov.w	lr, r2, lsl #2
  41aadc:	f1ae 0e08 	sub.w	lr, lr, #8
  41aae0:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  41aae4:	f10e 0e01 	add.w	lr, lr, #1
  41aae8:	f04e e001 	dls	lr, lr
        gemmlowp::RoundingDivideByPOT(shift_input[i], input_right_shift));
  41aaec:	f855 2f04 	ldr.w	r2, [r5, #4]!
  std::int32_t b32 = b;
  41aaf0:	f934 1f04 	ldrsh.w	r1, [r4, #4]!
  return a & b;
  41aaf4:	ea02 0a00 	and.w	sl, r2, r0
  return a + b;
  41aaf8:	eb03 77d2 	add.w	r7, r3, r2, lsr #31
  return a >> offset;
  41aafc:	fa42 f209 	asr.w	r2, r2, r9
  return a + b;
  41ab00:	45ba      	cmp	sl, r7
  41ab02:	ea52 92d2 			@ <UNDEFINED> instruction: 0xea5292d2
  std::int32_t sum = a32 + b32;
  41ab06:	fa01 f282 	sxtah	r2, r1, r2
  41ab0a:	4542      	cmp	r2, r8
  41ab0c:	bfa8      	it	ge
  41ab0e:	4642      	movge	r2, r8
      if (__a < __b)
  41ab10:	4562      	cmp	r2, ip
  41ab12:	bfb8      	it	lt
  41ab14:	4662      	movlt	r2, ip
      if (__b < __a)
  41ab16:	9901      	ldr	r1, [sp, #4]
  41ab18:	428a      	cmp	r2, r1
  41ab1a:	bfa8      	it	ge
  41ab1c:	460a      	movge	r2, r1
    output_data[i] = clamped_output;
  41ab1e:	f846 2f04 	str.w	r2, [r6, #4]!
  for (int i = 0; i < flat_size; i++) {
  41ab22:	f00f c81d 	le	lr, 41aaec <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x860>
  41ab26:	f7ff bbc3 	b.w	41a2b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x24>
    TFLITE_DCHECK_LT(i, size_);
  41ab2a:	009a      	lsls	r2, r3, #2
  41ab2c:	429d      	cmp	r5, r3
  41ab2e:	9200      	str	r2, [sp, #0]
  41ab30:	f340 80e3 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41ab34:	9c00      	ldr	r4, [sp, #0]
  41ab36:	440c      	add	r4, r1
  while (i >= 0 && shape_a->Dims(i) == 1) {
  41ab38:	6862      	ldr	r2, [r4, #4]
  41ab3a:	2a01      	cmp	r2, #1
  41ab3c:	f040 81c0 	bne.w	41aec0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc34>
    TFLITE_DCHECK_LT(i, size_);
  41ab40:	42b3      	cmp	r3, r6
  41ab42:	f280 80da 	bge.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    --i;
  41ab46:	1e5a      	subs	r2, r3, #1
  while (i >= 0 && shape_a->Dims(i) == 1) {
  41ab48:	2b00      	cmp	r3, #0
  41ab4a:	f43f ac95 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41ab4e:	6820      	ldr	r0, [r4, #0]
  41ab50:	2801      	cmp	r0, #1
  41ab52:	d11a      	bne.n	41ab8a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8fe>
  41ab54:	2b01      	cmp	r3, #1
    --i;
  41ab56:	f1a3 0202 	sub.w	r2, r3, #2
  while (i >= 0 && shape_a->Dims(i) == 1) {
  41ab5a:	f43f ac8d 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41ab5e:	f854 0c04 	ldr.w	r0, [r4, #-4]
  41ab62:	2801      	cmp	r0, #1
  41ab64:	d111      	bne.n	41ab8a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8fe>
  41ab66:	2b02      	cmp	r3, #2
    --i;
  41ab68:	f1a3 0203 	sub.w	r2, r3, #3
  while (i >= 0 && shape_a->Dims(i) == 1) {
  41ab6c:	f43f ac84 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41ab70:	f854 0c08 	ldr.w	r0, [r4, #-8]
  41ab74:	2801      	cmp	r0, #1
  41ab76:	d108      	bne.n	41ab8a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8fe>
  41ab78:	2b04      	cmp	r3, #4
  41ab7a:	f47f ac7d 	bne.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41ab7e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  41ab82:	2b01      	cmp	r3, #1
  41ab84:	f43f ac78 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
    --i;
  41ab88:	2200      	movs	r2, #0
  41ab8a:	42aa      	cmp	r2, r5
  41ab8c:	f280 80b5 	bge.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41ab90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  41ab94:	42b2      	cmp	r2, r6
    return dims_[i];
  41ab96:	6848      	ldr	r0, [r1, #4]
    TFLITE_DCHECK_LT(i, size_);
  41ab98:	ea4f 0e82 	mov.w	lr, r2, lsl #2
  41ab9c:	f280 80ad 	bge.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41aba0:	44e6      	add	lr, ip
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41aba2:	f8de 3004 	ldr.w	r3, [lr, #4]
  41aba6:	4298      	cmp	r0, r3
  41aba8:	f040 80ad 	bne.w	41ad06 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa7a>
    --i;
  41abac:	1e53      	subs	r3, r2, #1
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41abae:	2a00      	cmp	r2, #0
  41abb0:	f43f ac62 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41abb4:	680c      	ldr	r4, [r1, #0]
  41abb6:	f8de 0000 	ldr.w	r0, [lr]
  41abba:	4284      	cmp	r4, r0
  41abbc:	d121      	bne.n	41ac02 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x976>
  41abbe:	2a01      	cmp	r2, #1
    --i;
  41abc0:	f1a2 0302 	sub.w	r3, r2, #2
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41abc4:	f43f ac58 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41abc8:	f851 4c04 	ldr.w	r4, [r1, #-4]
  41abcc:	f85e 0c04 	ldr.w	r0, [lr, #-4]
  41abd0:	4284      	cmp	r4, r0
  41abd2:	d116      	bne.n	41ac02 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x976>
  41abd4:	2a02      	cmp	r2, #2
    --i;
  41abd6:	f1a2 0303 	sub.w	r3, r2, #3
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41abda:	f43f ac4d 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41abde:	f851 4c08 	ldr.w	r4, [r1, #-8]
  41abe2:	f85e 0c08 	ldr.w	r0, [lr, #-8]
  41abe6:	4284      	cmp	r4, r0
  41abe8:	d10b      	bne.n	41ac02 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x976>
  41abea:	2a04      	cmp	r2, #4
  41abec:	f47f ac44 	bne.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41abf0:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
  41abf4:	f851 2c0c 	ldr.w	r2, [r1, #-12]
  41abf8:	429a      	cmp	r2, r3
    --i;
  41abfa:	bf18      	it	ne
  41abfc:	2300      	movne	r3, #0
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41abfe:	f43f ac3b 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
    TFLITE_DCHECK_LT(i, size_);
  41ac02:	429e      	cmp	r6, r3
  41ac04:	dd79      	ble.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41ac06:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
  while (i >= 0 && shape_b->Dims(i) == 1) {
  41ac0a:	f8dc 2004 	ldr.w	r2, [ip, #4]
  41ac0e:	2a01      	cmp	r2, #1
  41ac10:	f040 8152 	bne.w	41aeb8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc2c>
    TFLITE_DCHECK_LT(i, size_);
  41ac14:	42ab      	cmp	r3, r5
  41ac16:	da70      	bge.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    --i;
  41ac18:	1e5a      	subs	r2, r3, #1
  while (i >= 0 && shape_b->Dims(i) == 1) {
  41ac1a:	2b00      	cmp	r3, #0
  41ac1c:	f43f ac2c 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41ac20:	f8dc 1000 	ldr.w	r1, [ip]
  41ac24:	2901      	cmp	r1, #1
  41ac26:	d11a      	bne.n	41ac5e <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x9d2>
  41ac28:	2b01      	cmp	r3, #1
    --i;
  41ac2a:	f1a3 0202 	sub.w	r2, r3, #2
  while (i >= 0 && shape_b->Dims(i) == 1) {
  41ac2e:	f43f ac23 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41ac32:	f85c 1c04 	ldr.w	r1, [ip, #-4]
  41ac36:	2901      	cmp	r1, #1
  41ac38:	d111      	bne.n	41ac5e <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x9d2>
  41ac3a:	2b02      	cmp	r3, #2
    --i;
  41ac3c:	f1a3 0203 	sub.w	r2, r3, #3
  while (i >= 0 && shape_b->Dims(i) == 1) {
  41ac40:	f43f ac1a 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41ac44:	f85c 1c08 	ldr.w	r1, [ip, #-8]
  41ac48:	2901      	cmp	r1, #1
  41ac4a:	d108      	bne.n	41ac5e <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x9d2>
  41ac4c:	2b04      	cmp	r3, #4
  41ac4e:	f47f ac13 	bne.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41ac52:	f85c 3c0c 	ldr.w	r3, [ip, #-12]
  41ac56:	2b01      	cmp	r3, #1
  41ac58:	f43f ac0e 	beq.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
    --i;
  41ac5c:	2200      	movs	r2, #0
  41ac5e:	42aa      	cmp	r2, r5
  41ac60:	da4b      	bge.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41ac62:	42b2      	cmp	r2, r6
  41ac64:	f6ff ac08 	blt.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41ac68:	e047      	b.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  const RuntimeShape* shape_a =
  41ac6a:	a952      	add	r1, sp, #328	@ 0x148
  const RuntimeShape* shape_b =
  41ac6c:	f50d 7cb0 	add.w	ip, sp, #352	@ 0x160
  41ac70:	f7ff bbbd 	b.w	41a3ee <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x162>
  TFLITE_DCHECK_LE(params.input2_shift, 0);
  41ac74:	9b02      	ldr	r3, [sp, #8]
  41ac76:	2b00      	cmp	r3, #0
  41ac78:	dc3f      	bgt.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
      input1_shift == 0 ? -params.input2_shift : -input1_shift;
  41ac7a:	f1c3 0900 	rsb	r9, r3, #0
  41ac7e:	e6fa      	b.n	41aa76 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7ea>
  for (int i = dims_count - 1; i >= 0; --i) {
  41ac80:	2c01      	cmp	r4, #1
  41ac82:	f1a4 0102 	sub.w	r1, r4, #2
  41ac86:	d038      	beq.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41ac88:	428d      	cmp	r5, r1
  41ac8a:	dd36      	ble.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41ac8c:	aa80      	add	r2, sp, #512	@ 0x200
  41ac8e:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  41ac92:	428e      	cmp	r6, r1
    return dims_[i];
  41ac94:	f85c 2cb4 	ldr.w	r2, [ip, #-180]
    TFLITE_DCHECK_LT(i, size_);
  41ac98:	dd2f      	ble.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41ac9a:	f85c 1c9c 	ldr.w	r1, [ip, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  41ac9e:	428a      	cmp	r2, r1
  41aca0:	f47f ab9a 	bne.w	41a3d8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x14c>
  for (int i = dims_count - 1; i >= 0; --i) {
  41aca4:	2c02      	cmp	r4, #2
  41aca6:	f1a4 0103 	sub.w	r1, r4, #3
  41acaa:	d026      	beq.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    TFLITE_DCHECK_LT(i, size_);
  41acac:	428d      	cmp	r5, r1
  41acae:	dd24      	ble.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41acb0:	aa80      	add	r2, sp, #512	@ 0x200
  41acb2:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  41acb6:	428e      	cmp	r6, r1
    return dims_[i];
  41acb8:	f85c 2cb4 	ldr.w	r2, [ip, #-180]
    TFLITE_DCHECK_LT(i, size_);
  41acbc:	dd1d      	ble.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41acbe:	f85c 1c9c 	ldr.w	r1, [ip, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  41acc2:	428a      	cmp	r2, r1
  41acc4:	f47f ab88 	bne.w	41a3d8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x14c>
  for (int i = dims_count - 1; i >= 0; --i) {
  41acc8:	2c03      	cmp	r4, #3
  41acca:	f1a4 0104 	sub.w	r1, r4, #4
  41acce:	d014      	beq.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    TFLITE_DCHECK_LT(i, size_);
  41acd0:	428d      	cmp	r5, r1
  41acd2:	dd12      	ble.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41acd4:	aa80      	add	r2, sp, #512	@ 0x200
  41acd6:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  41acda:	428e      	cmp	r6, r1
    return dims_[i];
  41acdc:	f85c 2cb4 	ldr.w	r2, [ip, #-180]
    TFLITE_DCHECK_LT(i, size_);
  41ace0:	dd0b      	ble.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    return dims_[i];
  41ace2:	f85c 1c9c 	ldr.w	r1, [ip, #-156]
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  41ace6:	428a      	cmp	r2, r1
  41ace8:	f47f ab76 	bne.w	41a3d8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x14c>
  for (int i = dims_count - 1; i >= 0; --i) {
  41acec:	2c05      	cmp	r4, #5
  41acee:	d104      	bne.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41acf0:	9a53      	ldr	r2, [sp, #332]	@ 0x14c
  41acf2:	9959      	ldr	r1, [sp, #356]	@ 0x164
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
  41acf4:	4291      	cmp	r1, r2
  41acf6:	f47f ab6f 	bne.w	41a3d8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x14c>
    TFLITE_DCHECK_LT(i, size_);
  41acfa:	f004 fa4d 	bl	41f198 <abort>
        desc0_out->strides[i] = 0;
  41acfe:	2300      	movs	r3, #0
        desc0_out->extents[i] = extent1;
  41ad00:	9273      	str	r2, [sp, #460]	@ 0x1cc
        desc0_out->strides[i] = 0;
  41ad02:	9377      	str	r3, [sp, #476]	@ 0x1dc
  41ad04:	e463      	b.n	41a5ce <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x342>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
  41ad06:	4613      	mov	r3, r2
  41ad08:	e77d      	b.n	41ac06 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x97a>
        desc0_out->extents[i] = extent1;
  41ad0a:	9172      	str	r1, [sp, #456]	@ 0x1c8
        desc0_out->strides[i] = 0;
  41ad0c:	2100      	movs	r1, #0
  41ad0e:	9176      	str	r1, [sp, #472]	@ 0x1d8
  41ad10:	e452      	b.n	41a5b8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32c>
        desc0_out->extents[i] = extent1;
  41ad12:	9471      	str	r4, [sp, #452]	@ 0x1c4
        desc0_out->strides[i] = 0;
  41ad14:	2400      	movs	r4, #0
  41ad16:	9475      	str	r4, [sp, #468]	@ 0x1d4
  41ad18:	e443      	b.n	41a5a2 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x316>
  assert(exponent <= 31);
  41ad1a:	f240 1167 	movw	r1, #359	@ 0x167
  41ad1e:	4b09      	ldr	r3, [pc, #36]	@ (41ad44 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xab8>)
  41ad20:	4a09      	ldr	r2, [pc, #36]	@ (41ad48 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xabc>)
  41ad22:	480a      	ldr	r0, [pc, #40]	@ (41ad4c <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xac0>)
  41ad24:	f004 fa40 	bl	41f1a8 <__assert_func>
  while (i >= 0 && shape_a->Dims(i) == 1) {
  41ad28:	684b      	ldr	r3, [r1, #4]
  41ad2a:	2b01      	cmp	r3, #1
    --i;
  41ad2c:	bf18      	it	ne
  41ad2e:	2300      	movne	r3, #0
  while (i >= 0 && shape_a->Dims(i) == 1) {
  41ad30:	f040 80c6 	bne.w	41aec0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc34>
  41ad34:	460c      	mov	r4, r1
    --i;
  41ad36:	2300      	movs	r3, #0
  41ad38:	e705      	b.n	41ab46 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8ba>
  41ad3a:	009a      	lsls	r2, r3, #2
  41ad3c:	9200      	str	r2, [sp, #0]
  41ad3e:	e6f9      	b.n	41ab34 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x8a8>
  41ad40:	ffff8000 	.word	0xffff8000
  41ad44:	00434b14 	.word	0x00434b14
  41ad48:	00434a68 	.word	0x00434a68
  41ad4c:	00434ac4 	.word	0x00434ac4
    return dims_[i];
  41ad50:	2100      	movs	r1, #0
  41ad52:	4608      	mov	r0, r1
  41ad54:	460e      	mov	r6, r1
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  41ad56:	468b      	mov	fp, r1
  41ad58:	9a08      	ldr	r2, [sp, #32]
  41ad5a:	ea4f 0883 	mov.w	r8, r3, lsl #2
  41ad5e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  41ad60:	00bf      	lsls	r7, r7, #2
  41ad62:	fb02 f303 	mul.w	r3, r2, r3
  41ad66:	fb02 f209 	mul.w	r2, r2, r9
  41ad6a:	fb09 f303 	mul.w	r3, r9, r3
  41ad6e:	4675      	mov	r5, lr
  41ad70:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
  41ad74:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
  41ad78:	46b9      	mov	r9, r7
  41ad7a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  41ad7c:	9217      	str	r2, [sp, #92]	@ 0x5c
  41ad7e:	931d      	str	r3, [sp, #116]	@ 0x74
  41ad80:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
  41ad82:	459b      	cmp	fp, r3
  41ad84:	f6bf aa94 	bge.w	41a2b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x24>
    TFLITE_DCHECK_LT(i, size_);
  41ad88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  41ad8a:	2b01      	cmp	r3, #1
  41ad8c:	d0b5      	beq.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  41ad8e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  41ad90:	2b00      	cmp	r3, #0
  41ad92:	f340 8089 	ble.w	41aea8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc1c>
  41ad96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  41ad98:	2b02      	cmp	r3, #2
  41ad9a:	d0ae      	beq.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41ad9c:	460c      	mov	r4, r1
  41ad9e:	e9cd 151e 	strd	r1, r5, [sp, #120]	@ 0x78
  41ada2:	4602      	mov	r2, r0
  41ada4:	f04f 0c00 	mov.w	ip, #0
  41ada8:	4631      	mov	r1, r6
  41adaa:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
  41adac:	e9cd 0620 	strd	r0, r6, [sp, #128]	@ 0x80
  41adb0:	3b04      	subs	r3, #4
  41adb2:	930e      	str	r3, [sp, #56]	@ 0x38
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  41adb4:	9b08      	ldr	r3, [sp, #32]
  41adb6:	2b00      	cmp	r3, #0
  41adb8:	dd67      	ble.n	41ae8a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xbfe>
  41adba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  41adbc:	2b03      	cmp	r3, #3
  41adbe:	d09c      	beq.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41adc0:	2500      	movs	r5, #0
  41adc2:	e9cd 120c 	strd	r1, r2, [sp, #48]	@ 0x30
  41adc6:	e9cd 2118 	strd	r2, r1, [sp, #96]	@ 0x60
  41adca:	940b      	str	r4, [sp, #44]	@ 0x2c
  41adcc:	940f      	str	r4, [sp, #60]	@ 0x3c
  41adce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  41add0:	2b04      	cmp	r3, #4
  41add2:	f040 80a0 	bne.w	41af16 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc8a>
  41add6:	2301      	movs	r3, #1
  41add8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
  41adda:	980c      	ldr	r0, [sp, #48]	@ 0x30
  41addc:	2a00      	cmp	r2, #0
  41adde:	eb02 0103 	add.w	r1, r2, r3
  41ade2:	bfb8      	it	lt
  41ade4:	4619      	movlt	r1, r3
  41ade6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41ade8:	2200      	movs	r2, #0
  41adea:	eb03 0480 	add.w	r4, r3, r0, lsl #2
  41adee:	e9dd 030d 	ldrd	r0, r3, [sp, #52]	@ 0x34
  41adf2:	eb03 0680 	add.w	r6, r3, r0, lsl #2
  41adf6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  41adf8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
  41adfa:	9600      	str	r6, [sp, #0]
  41adfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41ae00:	e02e      	b.n	41ae60 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xbd4>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  41ae02:	45bb      	cmp	fp, r7
  41ae04:	f6bf af79 	bge.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  41ae08:	45e6      	cmp	lr, ip
  41ae0a:	f77f af76 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  41ae0e:	9b02      	ldr	r3, [sp, #8]
  41ae10:	42ab      	cmp	r3, r5
  41ae12:	f77f af72 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  41ae16:	9b05      	ldr	r3, [sp, #20]
  41ae18:	4293      	cmp	r3, r2
  41ae1a:	f77f af6e 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
  41ae1e:	9e03      	ldr	r6, [sp, #12]
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
  41ae20:	6803      	ldr	r3, [r0, #0]
  41ae22:	45b3      	cmp	fp, r6
  41ae24:	f6bf af69 	bge.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
  41ae28:	9e04      	ldr	r6, [sp, #16]
  41ae2a:	4566      	cmp	r6, ip
  41ae2c:	f77f af65 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
  41ae30:	9e06      	ldr	r6, [sp, #24]
  41ae32:	42ae      	cmp	r6, r5
  41ae34:	f77f af61 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
  41ae38:	9e07      	ldr	r6, [sp, #28]
  41ae3a:	4448      	add	r0, r9
  41ae3c:	4296      	cmp	r6, r2
  41ae3e:	f77f af5c 	ble.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
              ActivationFunctionWithMinMax<T>(
  41ae42:	6826      	ldr	r6, [r4, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41ae44:	3201      	adds	r2, #1
              ActivationFunctionWithMinMax<T>(
  41ae46:	4433      	add	r3, r6
      if (__a < __b)
  41ae48:	4553      	cmp	r3, sl
  41ae4a:	bfb8      	it	lt
  41ae4c:	4653      	movlt	r3, sl
      if (__b < __a)
  41ae4e:	9e01      	ldr	r6, [sp, #4]
  41ae50:	4444      	add	r4, r8
  41ae52:	42b3      	cmp	r3, r6
  41ae54:	bfa8      	it	ge
  41ae56:	4633      	movge	r3, r6
          output_data[Offset(extended_output_shape, b, y, x, c)] =
  41ae58:	9e00      	ldr	r6, [sp, #0]
  41ae5a:	f846 3f04 	str.w	r3, [r6, #4]!
  41ae5e:	9600      	str	r6, [sp, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41ae60:	3901      	subs	r1, #1
  41ae62:	d1ce      	bne.n	41ae02 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb76>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
  41ae64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  41ae66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  41ae68:	3501      	adds	r5, #1
  41ae6a:	4413      	add	r3, r2
  41ae6c:	930c      	str	r3, [sp, #48]	@ 0x30
  41ae6e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
  41ae70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  41ae72:	4413      	add	r3, r2
  41ae74:	930d      	str	r3, [sp, #52]	@ 0x34
  41ae76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  41ae78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41ae7a:	4413      	add	r3, r2
  41ae7c:	930b      	str	r3, [sp, #44]	@ 0x2c
  41ae7e:	9b08      	ldr	r3, [sp, #32]
  41ae80:	429d      	cmp	r5, r3
  41ae82:	dba4      	blt.n	41adce <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb42>
  41ae84:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	@ 0x60
  41ae88:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
  41ae8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
  41ae8c:	f10c 0c01 	add.w	ip, ip, #1
  41ae90:	4419      	add	r1, r3
  41ae92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
  41ae94:	441a      	add	r2, r3
  41ae96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  41ae98:	441c      	add	r4, r3
  41ae9a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  41ae9c:	459c      	cmp	ip, r3
  41ae9e:	db89      	blt.n	41adb4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb28>
  41aea0:	e9dd 151e 	ldrd	r1, r5, [sp, #120]	@ 0x78
  41aea4:	e9dd 0620 	ldrd	r0, r6, [sp, #128]	@ 0x80
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
  41aea8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
  41aeaa:	f10b 0b01 	add.w	fp, fp, #1
  41aeae:	4418      	add	r0, r3
  41aeb0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  41aeb2:	442e      	add	r6, r5
  41aeb4:	4419      	add	r1, r3
  41aeb6:	e763      	b.n	41ad80 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xaf4>
  41aeb8:	42ab      	cmp	r3, r5
  41aeba:	f6ff aadd 	blt.w	41a478 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ec>
  41aebe:	e71c      	b.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
    --i;
  41aec0:	461a      	mov	r2, r3
  41aec2:	e665      	b.n	41ab90 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x904>
        desc0_out->extents[i] = extent1;
  41aec4:	9670      	str	r6, [sp, #448]	@ 0x1c0
        desc0_out->strides[i] = 0;
  41aec6:	2600      	movs	r6, #0
  41aec8:	9674      	str	r6, [sp, #464]	@ 0x1d0
  41aeca:	f7ff bb5f 	b.w	41a58c <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x300>
    for (int i = 0; i < size_; i++) {
  41aece:	4649      	mov	r1, r9
    int buffer_size = 1;
  41aed0:	2201      	movs	r2, #1
  41aed2:	af2f      	add	r7, sp, #188	@ 0xbc
  41aed4:	e4d2      	b.n	41a87c <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x5f0>
    for (int i = 0; i < size_; i++) {
  41aed6:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
    int buffer_size = 1;
  41aed8:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
  41aeda:	2f00      	cmp	r7, #0
  41aedc:	9822      	ldr	r0, [sp, #136]	@ 0x88
  41aede:	f73f acfd 	bgt.w	41a8dc <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x650>
  41aee2:	2800      	cmp	r0, #0
    int buffer_size = 1;
  41aee4:	4611      	mov	r1, r2
    for (int i = 0; i < size_; i++) {
  41aee6:	f73f ad56 	bgt.w	41a996 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x70a>
  41aeea:	e5b3      	b.n	41aa54 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7c8>
    int buffer_size = 1;
  41aeec:	2701      	movs	r7, #1
  41aeee:	f10d 0c8c 	add.w	ip, sp, #140	@ 0x8c
  41aef2:	e57c      	b.n	41a9ee <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x762>
  41aef4:	2701      	movs	r7, #1
  41aef6:	e5a7      	b.n	41aa48 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7bc>
    for (int i = 0; i < size_; i++) {
  41aef8:	f04f 0c00 	mov.w	ip, #0
    int buffer_size = 1;
  41aefc:	2101      	movs	r1, #1
  41aefe:	f10d 08a4 	add.w	r8, sp, #164	@ 0xa4
  41af02:	e518      	b.n	41a936 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x6aa>
    for (int i = 0; i < size_; i++) {
  41af04:	2800      	cmp	r0, #0
    int buffer_size = 1;
  41af06:	f04f 0101 	mov.w	r1, #1
    for (int i = 0; i < size_; i++) {
  41af0a:	f73f ad44 	bgt.w	41a996 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x70a>
  TFLITE_CHECK_EQ(size_1, size_2);
  41af0e:	428a      	cmp	r2, r1
  41af10:	f43f ada0 	beq.w	41aa54 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7c8>
  41af14:	e6f1      	b.n	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
  41af16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  41af18:	2b00      	cmp	r3, #0
  41af1a:	f73f aeee 	bgt.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41af1e:	e7a1      	b.n	41ae64 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xbd8>
  41af20:	f1b9 0f00 	cmp.w	r9, #0
  41af24:	f73f aee9 	bgt.w	41acfa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xa6e>
  41af28:	e42f      	b.n	41a78a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x4fe>
  41af2a:	bf00      	nop

0041af2c <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus EvalAdd(TfLiteContext* context, TfLiteNode* node) {
  41af2c:	b570      	push	{r4, r5, r6, lr}
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);

  const TfLiteEvalTensor* input1 =
      tflite::micro::GetEvalInput(context, node, kInputTensor1);
  41af2e:	2200      	movs	r2, #0
TfLiteStatus EvalAdd(TfLiteContext* context, TfLiteNode* node) {
  41af30:	4605      	mov	r5, r0
  41af32:	460c      	mov	r4, r1
      tflite::micro::GetEvalInput(context, node, kInputTensor1);
  41af34:	f001 fb16 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* input2 =
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
  41af38:	2201      	movs	r2, #1
  41af3a:	4621      	mov	r1, r4
      tflite::micro::GetEvalInput(context, node, kInputTensor1);
  41af3c:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
  41af3e:	4628      	mov	r0, r5
  41af40:	f001 fb10 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  41af44:	4603      	mov	r3, r0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
  41af46:	2200      	movs	r2, #0
  41af48:	4628      	mov	r0, r5
  41af4a:	4621      	mov	r1, r4
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
  41af4c:	461d      	mov	r5, r3
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
  41af4e:	f001 fb23 	bl	41c598 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  41af52:	4603      	mov	r3, r0

  TFLITE_DCHECK(node->user_data != nullptr);
  41af54:	68e0      	ldr	r0, [r4, #12]
  41af56:	b1c0      	cbz	r0, 41af8a <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode+0x5e>
  const OpData* data = static_cast<const OpData*>(node->user_data);

  if (output->type == kTfLiteFloat32) {
  41af58:	7a1c      	ldrb	r4, [r3, #8]
  41af5a:	3c01      	subs	r4, #1
  41af5c:	2c08      	cmp	r4, #8
  41af5e:	d80c      	bhi.n	41af7a <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode+0x4e>
  41af60:	e8df f004 	tbb	[pc, r4]
  41af64:	0b0b050d 	.word	0x0b0b050d
  41af68:	0b050b0b 	.word	0x0b050b0b
  41af6c:	05          	.byte	0x05
  41af6d:	00          	.byte	0x00
    EvalAddFloat(context, node, params, data, input1, input2, output);
  } else if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16 || output->type == kTfLiteInt32) {
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
  41af6e:	462a      	mov	r2, r5
  41af70:	4631      	mov	r1, r6
                output->type);
    return kTfLiteError;
  }

  return kTfLiteOk;
}
  41af72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
  41af76:	f7ff b989 	b.w	41a28c <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
  if (output->type == kTfLiteFloat32) {
  41af7a:	2001      	movs	r0, #1
}
  41af7c:	bd70      	pop	{r4, r5, r6, pc}
    EvalAddFloat(context, node, params, data, input1, input2, output);
  41af7e:	462a      	mov	r2, r5
  41af80:	4631      	mov	r1, r6
  41af82:	f7fc fdab 	bl	417adc <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
  return kTfLiteOk;
  41af86:	2000      	movs	r0, #0
}
  41af88:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
  41af8a:	f004 f905 	bl	41f198 <abort>
  41af8e:	bf00      	nop

0041af90 <_ZN6tflite12Register_ADDEv>:
                                                   input1, input2, output));

  return kTfLiteOk;
}

TfLiteRegistration Register_ADD() {
  41af90:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(InitAdd, PrepareAdd, EvalAdd);
  41af92:	2400      	movs	r4, #0
TfLiteRegistration Register_ADD() {
  41af94:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(InitAdd, PrepareAdd, EvalAdd);
  41af96:	9400      	str	r4, [sp, #0]
TfLiteRegistration Register_ADD() {
  41af98:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(InitAdd, PrepareAdd, EvalAdd);
  41af9a:	4b04      	ldr	r3, [pc, #16]	@ (41afac <_ZN6tflite12Register_ADDEv+0x1c>)
  41af9c:	4a04      	ldr	r2, [pc, #16]	@ (41afb0 <_ZN6tflite12Register_ADDEv+0x20>)
  41af9e:	4905      	ldr	r1, [pc, #20]	@ (41afb4 <_ZN6tflite12Register_ADDEv+0x24>)
  41afa0:	f001 faca 	bl	41c538 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
  41afa4:	4620      	mov	r0, r4
  41afa6:	b002      	add	sp, #8
  41afa8:	bd10      	pop	{r4, pc}
  41afaa:	bf00      	nop
  41afac:	0041af2d 	.word	0x0041af2d
  41afb0:	00417901 	.word	0x00417901
  41afb4:	004178f1 	.word	0x004178f1

0041afb8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  41afb8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  41afba:	b10b      	cbz	r3, 41afc0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
  41afbc:	213c      	movs	r1, #60	@ 0x3c
  41afbe:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  41afc0:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  41afc2:	f004 f8e9 	bl	41f198 <abort>
  41afc6:	bf00      	nop

0041afc8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  41afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
  41afcc:	68cf      	ldr	r7, [r1, #12]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  41afce:	b0bf      	sub	sp, #252	@ 0xfc
  TFLITE_DCHECK(node->user_data != nullptr);
  41afd0:	2f00      	cmp	r7, #0
  41afd2:	f000 8183 	beq.w	41b2dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>
  TFLITE_DCHECK(node->builtin_data != nullptr);
  41afd6:	f8d1 8010 	ldr.w	r8, [r1, #16]
  41afda:	460d      	mov	r5, r1
  41afdc:	f1b8 0f00 	cmp.w	r8, #0
  41afe0:	f000 817c 	beq.w	41b2dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>
  41afe4:	6884      	ldr	r4, [r0, #8]
  OpData* data = static_cast<OpData*>(node->user_data);

  MicroContext* micro_context = GetMicroContext(context);

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
  41afe6:	4bb1      	ldr	r3, [pc, #708]	@ (41b2ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
  41afe8:	4606      	mov	r6, r0
  41afea:	681a      	ldr	r2, [r3, #0]
  41afec:	6823      	ldr	r3, [r4, #0]
  41afee:	4620      	mov	r0, r4
  41aff0:	699b      	ldr	r3, [r3, #24]
  41aff2:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
  41aff4:	4682      	mov	sl, r0
  41aff6:	2800      	cmp	r0, #0
  41aff8:	f000 80cb 	beq.w	41b192 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ca>
  TfLiteTensor* filter =
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
  41affc:	4bac      	ldr	r3, [pc, #688]	@ (41b2b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
  41affe:	4629      	mov	r1, r5
  41b000:	681a      	ldr	r2, [r3, #0]
  41b002:	6823      	ldr	r3, [r4, #0]
  41b004:	4620      	mov	r0, r4
  41b006:	699b      	ldr	r3, [r3, #24]
  41b008:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
  41b00a:	9008      	str	r0, [sp, #32]
  41b00c:	2800      	cmp	r0, #0
  41b00e:	f000 80c0 	beq.w	41b192 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ca>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
  41b012:	4ba8      	ldr	r3, [pc, #672]	@ (41b2b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
  41b014:	4629      	mov	r1, r5
  41b016:	681a      	ldr	r2, [r3, #0]
  41b018:	6823      	ldr	r3, [r4, #0]
  41b01a:	4620      	mov	r0, r4
  41b01c:	69db      	ldr	r3, [r3, #28]
  41b01e:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
  41b020:	9009      	str	r0, [sp, #36]	@ 0x24
  41b022:	2800      	cmp	r0, #0
  41b024:	f000 80b5 	beq.w	41b192 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ca>
inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
  if (tensor == nullptr) {
    return RuntimeShape();
  }

  TfLiteIntArray* dims = tensor->dims;
  41b028:	f8da 3014 	ldr.w	r3, [sl, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41b02c:	a829      	add	r0, sp, #164	@ 0xa4
  const int dims_size = dims->size;
  41b02e:	4619      	mov	r1, r3
  41b030:	f851 2b04 	ldr.w	r2, [r1], #4
  41b034:	930b      	str	r3, [sp, #44]	@ 0x2c
      : size_(dimensions_count) {
  41b036:	9228      	str	r2, [sp, #160]	@ 0xa0
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41b038:	920a      	str	r2, [sp, #40]	@ 0x28
  41b03a:	0092      	lsls	r2, r2, #2
  41b03c:	f7f5 fabe 	bl	4105bc <memcpy>
  TfLiteIntArray* dims = tensor->dims;
  41b040:	9909      	ldr	r1, [sp, #36]	@ 0x24
  41b042:	a82f      	add	r0, sp, #188	@ 0xbc
  41b044:	f8d1 b014 	ldr.w	fp, [r1, #20]
  const int dims_size = dims->size;
  41b048:	4659      	mov	r1, fp
  41b04a:	f851 9b04 	ldr.w	r9, [r1], #4
  41b04e:	ea4f 0289 	mov.w	r2, r9, lsl #2
      : size_(dimensions_count) {
  41b052:	f8cd 90b8 	str.w	r9, [sp, #184]	@ 0xb8
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41b056:	f7f5 fab1 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41b05a:	980a      	ldr	r0, [sp, #40]	@ 0x28
  41b05c:	2800      	cmp	r0, #0
  41b05e:	f340 813d 	ble.w	41b2dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>
  41b062:	f1b9 0f00 	cmp.w	r9, #0
    return dims_[i];
  41b066:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
    TFLITE_DCHECK_LT(i, size_);
  41b068:	f340 8138 	ble.w	41b2dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
  41b06c:	992f      	ldr	r1, [sp, #188]	@ 0xbc
  41b06e:	428a      	cmp	r2, r1
  41b070:	f040 8134 	bne.w	41b2dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>
  RuntimeShape output_shape = GetTensorShape(output);

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
  input_dims.h = input->dims->data[1];
  41b074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41b076:	2803      	cmp	r0, #3
  41b078:	6899      	ldr	r1, [r3, #8]
  input_dims.w = input->dims->data[2];
  41b07a:	68db      	ldr	r3, [r3, #12]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
  41b07c:	9224      	str	r2, [sp, #144]	@ 0x90
  input_dims.h = input->dims->data[1];
  41b07e:	9125      	str	r1, [sp, #148]	@ 0x94
  input_dims.w = input->dims->data[2];
  41b080:	9326      	str	r3, [sp, #152]	@ 0x98
  41b082:	f340 812b 	ble.w	41b2dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>
    return dims_[i];
  41b086:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
    TFLITE_DCHECK_LT(i, size_);
  41b088:	f1b9 0f03 	cmp.w	r9, #3
  input_dims.c = input_shape.Dims(3);
  41b08c:	9327      	str	r3, [sp, #156]	@ 0x9c
  41b08e:	f340 8125 	ble.w	41b2dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
  filter_dims.h = filter->dims->data[1];
  41b092:	9908      	ldr	r1, [sp, #32]
    return dims_[i];
  41b094:	f8dd c0c8 	ldr.w	ip, [sp, #200]	@ 0xc8
  41b098:	6949      	ldr	r1, [r1, #20]
  filter_dims.n = output_shape.Dims(3);
  41b09a:	f8cd c060 	str.w	ip, [sp, #96]	@ 0x60
  41b09e:	6888      	ldr	r0, [r1, #8]
  41b0a0:	9019      	str	r0, [sp, #100]	@ 0x64
  41b0a2:	68c8      	ldr	r0, [r1, #12]
  filter_dims.w = filter->dims->data[2];
  filter_dims.c = input_dims.c;

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
  41b0a4:	9214      	str	r2, [sp, #80]	@ 0x50
  filter_dims.n = output_shape.Dims(3);
  41b0a6:	e9cd 031a 	strd	r0, r3, [sp, #104]	@ 0x68
  41b0aa:	ed9d 7f18 	ldc	15, cr7, [sp, #96]	@ 0x60
  output_dims.n = input_dims.n;
  41b0ae:	f8db 3008 	ldr.w	r3, [fp, #8]
  41b0b2:	9315      	str	r3, [sp, #84]	@ 0x54
  41b0b4:	f8db 300c 	ldr.w	r3, [fp, #12]
  filter_dims.n = output_shape.Dims(3);
  41b0b8:	f10d 0b70 	add.w	fp, sp, #112	@ 0x70
  output_dims.n = input_dims.n;
  41b0bc:	e9cd 3c16 	strd	r3, ip, [sp, #88]	@ 0x58
  filter_dims.n = output_shape.Dims(3);
  41b0c0:	ed8b 7f00 	stc	15, cr7, [fp]
  output_dims.n = input_dims.n;
  41b0c4:	ed9d 7f14 	ldc	15, cr7, [sp, #80]	@ 0x50
  output_dims.h = output->dims->data[1];
  output_dims.w = output->dims->data[2];
  output_dims.c = output_shape.Dims(3);

  if (filter->type == kTfLiteInt4) {
  41b0c8:	9b08      	ldr	r3, [sp, #32]
  output_dims.n = input_dims.n;
  41b0ca:	ed8d 7f20 	stc	15, cr7, [sp, #128]	@ 0x80
  if (filter->type == kTfLiteInt4) {
  41b0ce:	7f1b      	ldrb	r3, [r3, #28]
  41b0d0:	2b12      	cmp	r3, #18
  41b0d2:	d079      	beq.n	41b1c8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>
            .FlatSize();
    context->RequestScratchBufferInArena(
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
  41b0d4:	f89a 301c 	ldrb.w	r3, [sl, #28]
  41b0d8:	2b09      	cmp	r3, #9
  41b0da:	d05f      	beq.n	41b19c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
  41b0dc:	2b07      	cmp	r3, #7
  41b0de:	d05d      	beq.n	41b19c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
    data->reference_op_data.per_channel_output_shift =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
            context, num_channels * sizeof(int32_t)));
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
  41b0e0:	9305      	str	r3, [sp, #20]
  41b0e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
  41b0e4:	4629      	mov	r1, r5
  41b0e6:	9304      	str	r3, [sp, #16]
  41b0e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  41b0ea:	4642      	mov	r2, r8
  41b0ec:	9303      	str	r3, [sp, #12]
  41b0ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
  41b0f0:	4630      	mov	r0, r6
  41b0f2:	9302      	str	r3, [sp, #8]
  41b0f4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41b0f6:	9706      	str	r7, [sp, #24]
  41b0f8:	9301      	str	r3, [sp, #4]
  41b0fa:	9b25      	ldr	r3, [sp, #148]	@ 0x94
  41b0fc:	9300      	str	r3, [sp, #0]
  41b0fe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
  41b100:	f000 fbc2 	bl	41b888 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
  41b104:	4605      	mov	r5, r0
  41b106:	2800      	cmp	r0, #0
  41b108:	d144      	bne.n	41b194 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
  41b10a:	f89a 301c 	ldrb.w	r3, [sl, #28]
  41b10e:	2b09      	cmp	r3, #9
  41b110:	d014      	beq.n	41b13c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>
  41b112:	2b07      	cmp	r3, #7
  41b114:	d012      	beq.n	41b13c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x174>
    } else {
      data->buffer_idx = -1;
    }
  }

  micro_context->DeallocateTempTfLiteTensor(output);
  41b116:	6823      	ldr	r3, [r4, #0]
  41b118:	4620      	mov	r0, r4
  41b11a:	9909      	ldr	r1, [sp, #36]	@ 0x24
  41b11c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41b11e:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
  41b120:	6823      	ldr	r3, [r4, #0]
  41b122:	4651      	mov	r1, sl
  41b124:	4620      	mov	r0, r4
  41b126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41b128:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
  41b12a:	6823      	ldr	r3, [r4, #0]
  41b12c:	4620      	mov	r0, r4
  41b12e:	9908      	ldr	r1, [sp, #32]
  41b130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41b132:	4798      	blx	r3

  return kTfLiteOk;
}
  41b134:	4628      	mov	r0, r5
  41b136:	b03f      	add	sp, #252	@ 0xfc
  41b138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conv_params.input_offset = -input->params.zero_point;
  41b13c:	6839      	ldr	r1, [r7, #0]
    conv_params.output_offset = output->params.zero_point;
  41b13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    conv_params.input_offset = -input->params.zero_point;
  41b140:	f8da c00c 	ldr.w	ip, [sl, #12]
    conv_params.output_offset = output->params.zero_point;
  41b144:	68d2      	ldr	r2, [r2, #12]
    conv_params.padding.w = data->reference_op_data.padding.width;
  41b146:	9110      	str	r1, [sp, #64]	@ 0x40
  41b148:	6879      	ldr	r1, [r7, #4]
    conv_params.input_offset = -input->params.zero_point;
  41b14a:	a834      	add	r0, sp, #208	@ 0xd0
  41b14c:	9111      	str	r1, [sp, #68]	@ 0x44
  41b14e:	f8d8 1010 	ldr.w	r1, [r8, #16]
    if (input->type == kTfLiteInt8) {
  41b152:	2b09      	cmp	r3, #9
  41b154:	9112      	str	r1, [sp, #72]	@ 0x48
  41b156:	f8d8 1014 	ldr.w	r1, [r8, #20]
    conv_params.input_offset = -input->params.zero_point;
  41b15a:	920d      	str	r2, [sp, #52]	@ 0x34
  41b15c:	9113      	str	r1, [sp, #76]	@ 0x4c
  41b15e:	f1cc 0100 	rsb	r1, ip, #0
  41b162:	910c      	str	r1, [sp, #48]	@ 0x30
  41b164:	f8d8 1004 	ldr.w	r1, [r8, #4]
  41b168:	ed9d 7f10 	ldc	15, cr7, [sp, #64]	@ 0x40
  41b16c:	910e      	str	r1, [sp, #56]	@ 0x38
  41b16e:	f8d8 1008 	ldr.w	r1, [r8, #8]
  41b172:	910f      	str	r1, [sp, #60]	@ 0x3c
  41b174:	ed9d 5f0c 	ldc	15, cr5, [sp, #48]	@ 0x30
  41b178:	ed80 5f00 	stc	15, cr5, [r0]
  41b17c:	ed8d 7f38 	stc	15, cr7, [sp, #224]	@ 0xe0
    conv_params.activation.min = data->reference_op_data.output_activation_min;
  41b180:	e9d7 1e0b 	ldrd	r1, lr, [r7, #44]	@ 0x2c
  41b184:	e9cd 1e3c 	strd	r1, lr, [sp, #240]	@ 0xf0
    if (input->type == kTfLiteInt8) {
  41b188:	f000 8098 	beq.w	41b2bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
  41b18c:	ea5c 0202 	orrs.w	r2, ip, r2
  41b190:	d079      	beq.n	41b286 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2be>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
  41b192:	2501      	movs	r5, #1
}
  41b194:	4628      	mov	r0, r5
  41b196:	b03f      	add	sp, #252	@ 0xfc
  41b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const int num_channels = filter->dims->data[kConvQuantizedDimension];
  41b19c:	4b46      	ldr	r3, [pc, #280]	@ (41b2b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
  41b19e:	4630      	mov	r0, r6
    const int num_channels = filter->dims->data[kConvQuantizedDimension];
  41b1a0:	681a      	ldr	r2, [r3, #0]
  41b1a2:	9b08      	ldr	r3, [sp, #32]
  41b1a4:	695b      	ldr	r3, [r3, #20]
  41b1a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
  41b1aa:	6859      	ldr	r1, [r3, #4]
  41b1ac:	6b73      	ldr	r3, [r6, #52]	@ 0x34
  41b1ae:	ea4f 0981 	mov.w	r9, r1, lsl #2
  41b1b2:	4649      	mov	r1, r9
  41b1b4:	4798      	blx	r3
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
  41b1b6:	6b73      	ldr	r3, [r6, #52]	@ 0x34
    data->reference_op_data.per_channel_output_multiplier =
  41b1b8:	6278      	str	r0, [r7, #36]	@ 0x24
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
  41b1ba:	4649      	mov	r1, r9
  41b1bc:	4630      	mov	r0, r6
  41b1be:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
  41b1c0:	f89a 301c 	ldrb.w	r3, [sl, #28]
    data->reference_op_data.per_channel_output_shift =
  41b1c4:	62b8      	str	r0, [r7, #40]	@ 0x28
  41b1c6:	e78b      	b.n	41b0e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x118>
        RuntimeShape(filter->dims->size,
  41b1c8:	f851 9b04 	ldr.w	r9, [r1], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41b1cc:	a835      	add	r0, sp, #212	@ 0xd4
  41b1ce:	ea4f 0289 	mov.w	r2, r9, lsl #2
  41b1d2:	f7f5 f9f3 	bl	4105bc <memcpy>
    for (int i = 0; i < size_; i++) {
  41b1d6:	f1b9 0f00 	cmp.w	r9, #0
  41b1da:	dd7a      	ble.n	41b2d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30a>
  41b1dc:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
  41b1e0:	2b04      	cmp	r3, #4
  41b1e2:	d978      	bls.n	41b2d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30e>
  41b1e4:	ea4f 0e99 	mov.w	lr, r9, lsr #2
  41b1e8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41b1ec:	f1ae 0e10 	sub.w	lr, lr, #16
  41b1f0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41b1f4:	f10e 0e01 	add.w	lr, lr, #1
  41b1f8:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41b1fc:	f04e e001 	dls	lr, lr
  41b200:	ab35      	add	r3, sp, #212	@ 0xd4
      buffer_size *= dims_data[i];
  41b202:	ecb3 5f04 	ldc	15, cr5, [r3], #16
  41b206:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41b20a:	f00f c007 	le	lr, 41b202 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23a>
  41b20e:	ee36 3b10 	vmov.32	r3, d6[1]
  41b212:	ee16 1a10 	vmov	r1, s12
  41b216:	fb03 f101 	mul.w	r1, r3, r1
  41b21a:	ee17 3b10 	vmov.32	r3, d7[0]
  41b21e:	fb03 f101 	mul.w	r1, r3, r1
  41b222:	ee37 3b10 	vmov.32	r3, d7[1]
  41b226:	f019 0f03 	tst.w	r9, #3
  41b22a:	fb03 f101 	mul.w	r1, r3, r1
  41b22e:	f029 0003 	bic.w	r0, r9, #3
  41b232:	d022      	beq.n	41b27a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
      buffer_size *= dims_data[i];
  41b234:	ab3e      	add	r3, sp, #248	@ 0xf8
  41b236:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  41b23a:	f853 2c24 	ldr.w	r2, [r3, #-36]
  41b23e:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
  41b242:	1c42      	adds	r2, r0, #1
  41b244:	4591      	cmp	r9, r2
  41b246:	dd18      	ble.n	41b27a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
      buffer_size *= dims_data[i];
  41b248:	f853 2c20 	ldr.w	r2, [r3, #-32]
  41b24c:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
  41b250:	1c82      	adds	r2, r0, #2
  41b252:	4591      	cmp	r9, r2
  41b254:	dd11      	ble.n	41b27a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
      buffer_size *= dims_data[i];
  41b256:	f853 2c1c 	ldr.w	r2, [r3, #-28]
  41b25a:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
  41b25e:	1cc2      	adds	r2, r0, #3
  41b260:	4591      	cmp	r9, r2
  41b262:	dd0a      	ble.n	41b27a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
      buffer_size *= dims_data[i];
  41b264:	f853 2c18 	ldr.w	r2, [r3, #-24]
    for (int i = 0; i < size_; i++) {
  41b268:	3004      	adds	r0, #4
  41b26a:	4581      	cmp	r9, r0
      buffer_size *= dims_data[i];
  41b26c:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
  41b270:	dd03      	ble.n	41b27a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
      buffer_size *= dims_data[i];
  41b272:	f853 3c14 	ldr.w	r3, [r3, #-20]
  41b276:	fb03 f101 	mul.w	r1, r3, r1
    context->RequestScratchBufferInArena(
  41b27a:	4630      	mov	r0, r6
  41b27c:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
  41b27e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
  41b282:	4798      	blx	r3
  41b284:	e726      	b.n	41b0d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>
      buf_size = arm_convolve_wrapper_s16_get_buffer_size(
  41b286:	a924      	add	r1, sp, #144	@ 0x90
  41b288:	465a      	mov	r2, fp
  41b28a:	ab20      	add	r3, sp, #128	@ 0x80
  41b28c:	f7f6 fc9e 	bl	411bcc <arm_convolve_wrapper_s16_get_buffer_size>
  41b290:	4601      	mov	r1, r0
    if (buf_size > 0) {
  41b292:	2900      	cmp	r1, #0
  41b294:	dd19      	ble.n	41b2ca <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x302>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
  41b296:	4630      	mov	r0, r6
  41b298:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
  41b29a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
  41b29e:	4798      	blx	r3
  41b2a0:	2800      	cmp	r0, #0
  41b2a2:	f43f af38 	beq.w	41b116 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14e>
  41b2a6:	4605      	mov	r5, r0
  41b2a8:	e774      	b.n	41b194 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
  41b2aa:	bf00      	nop
  41b2ac:	00435b8c 	.word	0x00435b8c
  41b2b0:	00435b88 	.word	0x00435b88
  41b2b4:	00435b80 	.word	0x00435b80
  41b2b8:	00435b7c 	.word	0x00435b7c
      buf_size = arm_convolve_wrapper_s8_get_buffer_size(
  41b2bc:	a924      	add	r1, sp, #144	@ 0x90
  41b2be:	465a      	mov	r2, fp
  41b2c0:	ab20      	add	r3, sp, #128	@ 0x80
  41b2c2:	f7f6 fceb 	bl	411c9c <arm_convolve_wrapper_s8_get_buffer_size>
  41b2c6:	4601      	mov	r1, r0
  41b2c8:	e7e3      	b.n	41b292 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ca>
      data->buffer_idx = -1;
  41b2ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  41b2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  41b2d0:	e721      	b.n	41b116 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14e>
    for (int i = 0; i < size_; i++) {
  41b2d2:	2101      	movs	r1, #1
  41b2d4:	e7d1      	b.n	41b27a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
    int buffer_size = 1;
  41b2d6:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
  41b2d8:	2000      	movs	r0, #0
  41b2da:	e7ab      	b.n	41b234 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
  TFLITE_DCHECK(node->user_data != nullptr);
  41b2dc:	f003 ff5c 	bl	41f198 <abort>

0041b2e0 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel16x8(
  41b2e0:	468c      	mov	ip, r1
  41b2e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41b2e6:	461e      	mov	r6, r3
  41b2e8:	f8dc 3010 	ldr.w	r3, [ip, #16]
  41b2ec:	b0d3      	sub	sp, #332	@ 0x14c
  41b2ee:	931a      	str	r3, [sp, #104]	@ 0x68
  41b2f0:	6813      	ldr	r3, [r2, #0]
  41b2f2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
  41b2f6:	9318      	str	r3, [sp, #96]	@ 0x60
  41b2f8:	6853      	ldr	r3, [r2, #4]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
  conv_params.dilation.w = params.dilation_width_factor;

  // Initialize cmsis_nn convolution parameters
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b2fa:	f50d 7898 	add.w	r8, sp, #304	@ 0x130
  41b2fe:	9319      	str	r3, [sp, #100]	@ 0x64
  41b300:	f8dc 3014 	ldr.w	r3, [ip, #20]
  quant_params.multiplier = const_cast<int32_t*>(
      data.reference_op_data.per_channel_output_multiplier);
  quant_params.shift =
      const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);

  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41b304:	995c      	ldr	r1, [sp, #368]	@ 0x170
  41b306:	931b      	str	r3, [sp, #108]	@ 0x6c
  41b308:	ed99 7f00 	ldc	15, cr7, [r9]
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b30c:	6913      	ldr	r3, [r2, #16]
  41b30e:	ed88 7f00 	stc	15, cr7, [r8]
  41b312:	425b      	negs	r3, r3
  41b314:	9314      	str	r3, [sp, #80]	@ 0x50
  41b316:	6993      	ldr	r3, [r2, #24]
TfLiteStatus EvalQuantizedPerChannel16x8(
  41b318:	f8dd a178 	ldr.w	sl, [sp, #376]	@ 0x178
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b31c:	9315      	str	r3, [sp, #84]	@ 0x54
  41b31e:	f8dc 3004 	ldr.w	r3, [ip, #4]
TfLiteStatus EvalQuantizedPerChannel16x8(
  41b322:	4683      	mov	fp, r0
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b324:	9316      	str	r3, [sp, #88]	@ 0x58
  41b326:	f8dc 3008 	ldr.w	r3, [ip, #8]
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41b32a:	a836      	add	r0, sp, #216	@ 0xd8
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b32c:	9317      	str	r3, [sp, #92]	@ 0x5c
  41b32e:	ed9d 7f14 	ldc	15, cr7, [sp, #80]	@ 0x50
  conv_params.activation.min = data.reference_op_data.output_activation_min;
  41b332:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
TfLiteStatus EvalQuantizedPerChannel16x8(
  41b334:	4614      	mov	r4, r2
  conv_params.activation.min = data.reference_op_data.output_activation_min;
  41b336:	9350      	str	r3, [sp, #320]	@ 0x140
  41b338:	6b13      	ldr	r3, [r2, #48]	@ 0x30
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b33a:	ed8d 7f48 	stc	15, cr7, [sp, #288]	@ 0x120
  conv_params.activation.min = data.reference_op_data.output_activation_min;
  41b33e:	9351      	str	r3, [sp, #324]	@ 0x144
      data.reference_op_data.per_channel_output_multiplier);
  41b340:	6a53      	ldr	r3, [r2, #36]	@ 0x24
TfLiteStatus EvalQuantizedPerChannel16x8(
  41b342:	9d5d      	ldr	r5, [sp, #372]	@ 0x174
  quant_params.multiplier = const_cast<int32_t*>(
  41b344:	931c      	str	r3, [sp, #112]	@ 0x70
      data.reference_op_data.per_channel_output_multiplier);
  41b346:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b348:	af48      	add	r7, sp, #288	@ 0x120
  quant_params.multiplier = const_cast<int32_t*>(
  41b34a:	931d      	str	r3, [sp, #116]	@ 0x74
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41b34c:	f001 f930 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
  41b350:	4631      	mov	r1, r6
  41b352:	a83c      	add	r0, sp, #240	@ 0xf0
  41b354:	f001 f92c 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
  41b358:	4651      	mov	r1, sl
  41b35a:	a842      	add	r0, sp, #264	@ 0x108
  41b35c:	f001 f928 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
  41b360:	4629      	mov	r1, r5
  41b362:	a830      	add	r0, sp, #192	@ 0xc0
  41b364:	f001 f924 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  // Consistency check.
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
  41b368:	e9dd 2350 	ldrd	r2, r3, [sp, #320]	@ 0x140
  41b36c:	429a      	cmp	r2, r3
  41b36e:	f300 80d9 	bgt.w	41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  41b372:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
  41b374:	2b04      	cmp	r3, #4
  41b376:	f040 80d5 	bne.w	41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
  41b37a:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
  41b37c:	2b04      	cmp	r3, #4
  41b37e:	f040 80d1 	bne.w	41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  41b382:	9b42      	ldr	r3, [sp, #264]	@ 0x108
  41b384:	2b04      	cmp	r3, #4
  41b386:	f040 80cd 	bne.w	41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
    return dims_[i];
  41b38a:	f8dd 80f4 	ldr.w	r8, [sp, #244]	@ 0xf4
  41b38e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
  41b390:	4598      	cmp	r8, r3
  41b392:	f040 80c7 	bne.w	41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
  41b396:	f8dd c100 	ldr.w	ip, [sp, #256]	@ 0x100
  41b39a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
  41b39c:	4563      	cmp	r3, ip
  41b39e:	f040 80c1 	bne.w	41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
  41b3a2:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
  41b3a4:	9a46      	ldr	r2, [sp, #280]	@ 0x118
  41b3a6:	429a      	cmp	r2, r3
  41b3a8:	f040 80bc 	bne.w	41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
  return tensor == nullptr ? nullptr
  41b3ac:	2d00      	cmp	r5, #0
  41b3ae:	d05a      	beq.n	41b466 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x186>
  const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
  41b3b0:	682a      	ldr	r2, [r5, #0]
  41b3b2:	2a00      	cmp	r2, #0
  41b3b4:	d057      	beq.n	41b466 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x186>
    for (int i = 0; i < size_; i++) {
  41b3b6:	9930      	ldr	r1, [sp, #192]	@ 0xc0
  41b3b8:	2900      	cmp	r1, #0
  41b3ba:	f340 80b1 	ble.w	41b520 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x240>
  41b3be:	1e4a      	subs	r2, r1, #1
  41b3c0:	2a04      	cmp	r2, #4
  41b3c2:	f240 80a9 	bls.w	41b518 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x238>
  41b3c6:	ea4f 0e91 	mov.w	lr, r1, lsr #2
  41b3ca:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41b3ce:	f1ae 0e10 	sub.w	lr, lr, #16
  41b3d2:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41b3d6:	f10e 0e01 	add.w	lr, lr, #1
  41b3da:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41b3de:	f04e e001 	dls	lr, lr
  41b3e2:	aa31      	add	r2, sp, #196	@ 0xc4
      buffer_size *= dims_data[i];
  41b3e4:	ecb2 5f04 	ldc	15, cr5, [r2], #16
  41b3e8:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41b3ec:	f00f c007 	le	lr, 41b3e4 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x104>
  41b3f0:	ee36 0b10 	vmov.32	r0, d6[1]
  41b3f4:	ee16 2a10 	vmov	r2, s12
  41b3f8:	fb00 f202 	mul.w	r2, r0, r2
  41b3fc:	ee17 0b10 	vmov.32	r0, d7[0]
  41b400:	fb00 f202 	mul.w	r2, r0, r2
  41b404:	ee37 0b10 	vmov.32	r0, d7[1]
  41b408:	fb00 f202 	mul.w	r2, r0, r2
  41b40c:	0788      	lsls	r0, r1, #30
  41b40e:	f021 0903 	bic.w	r9, r1, #3
  41b412:	d026      	beq.n	41b462 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
      buffer_size *= dims_data[i];
  41b414:	a852      	add	r0, sp, #328	@ 0x148
  41b416:	eb00 0e89 	add.w	lr, r0, r9, lsl #2
  41b41a:	f85e 0c84 	ldr.w	r0, [lr, #-132]
  41b41e:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41b422:	f109 0001 	add.w	r0, r9, #1
  41b426:	4288      	cmp	r0, r1
  41b428:	da1b      	bge.n	41b462 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
      buffer_size *= dims_data[i];
  41b42a:	f85e 0c80 	ldr.w	r0, [lr, #-128]
  41b42e:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41b432:	f109 0002 	add.w	r0, r9, #2
  41b436:	4281      	cmp	r1, r0
  41b438:	dd13      	ble.n	41b462 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
      buffer_size *= dims_data[i];
  41b43a:	f85e 0c7c 	ldr.w	r0, [lr, #-124]
  41b43e:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41b442:	f109 0003 	add.w	r0, r9, #3
  41b446:	4281      	cmp	r1, r0
  41b448:	dd0b      	ble.n	41b462 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
      buffer_size *= dims_data[i];
  41b44a:	f85e 0c78 	ldr.w	r0, [lr, #-120]
    for (int i = 0; i < size_; i++) {
  41b44e:	f109 0904 	add.w	r9, r9, #4
  41b452:	4549      	cmp	r1, r9
      buffer_size *= dims_data[i];
  41b454:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41b458:	dd03      	ble.n	41b462 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
      buffer_size *= dims_data[i];
  41b45a:	f85e 1c74 	ldr.w	r1, [lr, #-116]
  41b45e:	fb01 f202 	mul.w	r2, r1, r2
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  41b462:	4293      	cmp	r3, r2
  41b464:	d15e      	bne.n	41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
  }

  // Initialize cmsis_nn dimensions
  // Input
  cmsis_nn_dims input_dims;
  input_dims.n = batch_size;
  41b466:	993e      	ldr	r1, [sp, #248]	@ 0xf8
  // Initialize cmsis_nn context
  cmsis_nn_context ctx;
  ctx.buf = nullptr;
  ctx.size = 0;

  if (data.buffer_idx > -1) {
  41b468:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  input_dims.n = batch_size;
  41b46c:	9111      	str	r1, [sp, #68]	@ 0x44
  41b46e:	993f      	ldr	r1, [sp, #252]	@ 0xfc
  41b470:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
  41b474:	9112      	str	r1, [sp, #72]	@ 0x48
  41b476:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
  41b47a:	ed9d 7f10 	ldc	15, cr7, [sp, #64]	@ 0x40
  filter_dims.n = output_depth;
  41b47e:	9938      	ldr	r1, [sp, #224]	@ 0xe0
  output_dims.n = batch_size;
  41b480:	f8cd 8020 	str.w	r8, [sp, #32]
  filter_dims.n = output_depth;
  41b484:	910d      	str	r1, [sp, #52]	@ 0x34
  41b486:	9939      	ldr	r1, [sp, #228]	@ 0xe4
  input_dims.n = batch_size;
  41b488:	f10d 0880 	add.w	r8, sp, #128	@ 0x80
  filter_dims.n = output_depth;
  41b48c:	e9cd 1c0e 	strd	r1, ip, [sp, #56]	@ 0x38
  output_dims.n = batch_size;
  41b490:	9944      	ldr	r1, [sp, #272]	@ 0x110
  filter_dims.n = output_depth;
  41b492:	930c      	str	r3, [sp, #48]	@ 0x30
  output_dims.n = batch_size;
  41b494:	9109      	str	r1, [sp, #36]	@ 0x24
  41b496:	9945      	ldr	r1, [sp, #276]	@ 0x114
  ctx.buf = nullptr;
  41b498:	2200      	movs	r2, #0
  output_dims.n = batch_size;
  41b49a:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  input_dims.n = batch_size;
  41b49e:	ed88 7f00 	stc	15, cr7, [r8]
  filter_dims.n = output_depth;
  41b4a2:	ed9d 7f0c 	ldc	15, cr7, [sp, #48]	@ 0x30
  41b4a6:	ed8d 7f24 	stc	15, cr7, [sp, #144]	@ 0x90
  bias_dims.w = 1;
  41b4aa:	2001      	movs	r0, #1
  output_dims.n = batch_size;
  41b4ac:	ed9d 7f08 	ldc	15, cr7, [sp, #32]
  ctx.size = 0;
  41b4b0:	e9cd 221e 	strd	r2, r2, [sp, #120]	@ 0x78
  bias_dims.c = output_depth;
  41b4b4:	932b      	str	r3, [sp, #172]	@ 0xac
  bias_dims.n = 1;
  41b4b6:	2201      	movs	r2, #1
  41b4b8:	2301      	movs	r3, #1
  if (data.buffer_idx > -1) {
  41b4ba:	f1be 0f00 	cmp.w	lr, #0
  filter_dims.n = output_depth;
  41b4be:	ac24      	add	r4, sp, #144	@ 0x90
  output_dims.n = batch_size;
  41b4c0:	f10d 09b0 	add.w	r9, sp, #176	@ 0xb0
  bias_dims.n = 1;
  41b4c4:	e9cd 2328 	strd	r2, r3, [sp, #160]	@ 0xa0
  bias_dims.w = 1;
  41b4c8:	902a      	str	r0, [sp, #168]	@ 0xa8
  output_dims.n = batch_size;
  41b4ca:	ed89 7f00 	stc	15, cr7, [r9]
  if (data.buffer_idx > -1) {
  41b4ce:	db05      	blt.n	41b4dc <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x1fc>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
  41b4d0:	4671      	mov	r1, lr
  41b4d2:	4658      	mov	r0, fp
  41b4d4:	f8db 3040 	ldr.w	r3, [fp, #64]	@ 0x40
  41b4d8:	4798      	blx	r3
  41b4da:	901e      	str	r0, [sp, #120]	@ 0x78
  TFLITE_DCHECK(tensor != nullptr);
  41b4dc:	b316      	cbz	r6, 41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
  41b4de:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
  return reinterpret_cast<const T*>(tensor->data.raw);
  41b4e0:	6832      	ldr	r2, [r6, #0]
  TFLITE_DCHECK(tensor != nullptr);
  41b4e2:	b1fb      	cbz	r3, 41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41b4e4:	681b      	ldr	r3, [r3, #0]
  return tensor == nullptr ? nullptr
  41b4e6:	b105      	cbz	r5, 41b4ea <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x20a>
  41b4e8:	682d      	ldr	r5, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
  41b4ea:	f1ba 0f00 	cmp.w	sl, #0
  41b4ee:	d019      	beq.n	41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
    // Note: ctx.size is currently not used in cmsis_nn.
    // The buffer should be allocated in the Prepare function through
    // arm_convolve_wrapper_s8_get_buffer_size
  }

  TFLITE_DCHECK_EQ(
  41b4f0:	e9cd 5904 	strd	r5, r9, [sp, #16]
  41b4f4:	9302      	str	r3, [sp, #8]
  41b4f6:	f8da 3000 	ldr.w	r3, [sl]
  41b4fa:	a828      	add	r0, sp, #160	@ 0xa0
  41b4fc:	e9cd 2400 	strd	r2, r4, [sp]
  41b500:	9306      	str	r3, [sp, #24]
  41b502:	9003      	str	r0, [sp, #12]
  41b504:	4643      	mov	r3, r8
  41b506:	4639      	mov	r1, r7
  41b508:	aa1c      	add	r2, sp, #112	@ 0x70
  41b50a:	a81e      	add	r0, sp, #120	@ 0x78
  41b50c:	f7f6 fb5c 	bl	411bc8 <arm_convolve_wrapper_s16>
  41b510:	b940      	cbnz	r0, 41b524 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
          tflite::micro::GetOptionalTensorData<int64_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int16_t>(output)),
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}
  41b512:	b053      	add	sp, #332	@ 0x14c
  41b514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int buffer_size = 1;
  41b518:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
  41b51a:	f04f 0900 	mov.w	r9, #0
  41b51e:	e779      	b.n	41b414 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x134>
    int buffer_size = 1;
  41b520:	2201      	movs	r2, #1
  41b522:	e79e      	b.n	41b462 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
  41b524:	f003 fe38 	bl	41f198 <abort>

0041b528 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
  41b528:	468c      	mov	ip, r1
  41b52a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41b52e:	461e      	mov	r6, r3
  41b530:	f8dc 3010 	ldr.w	r3, [ip, #16]
  41b534:	b0d3      	sub	sp, #332	@ 0x14c
  41b536:	931a      	str	r3, [sp, #104]	@ 0x68
  41b538:	6813      	ldr	r3, [r2, #0]
  41b53a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
  41b53e:	9318      	str	r3, [sp, #96]	@ 0x60
  41b540:	6853      	ldr	r3, [r2, #4]
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b542:	f50d 7898 	add.w	r8, sp, #304	@ 0x130
  41b546:	9319      	str	r3, [sp, #100]	@ 0x64
  41b548:	f8dc 3014 	ldr.w	r3, [ip, #20]
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41b54c:	995c      	ldr	r1, [sp, #368]	@ 0x170
  41b54e:	931b      	str	r3, [sp, #108]	@ 0x6c
  41b550:	ed99 7f00 	ldc	15, cr7, [r9]
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b554:	6913      	ldr	r3, [r2, #16]
  41b556:	ed88 7f00 	stc	15, cr7, [r8]
  41b55a:	425b      	negs	r3, r3
  41b55c:	9314      	str	r3, [sp, #80]	@ 0x50
  41b55e:	6993      	ldr	r3, [r2, #24]
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
  41b560:	f8dd a178 	ldr.w	sl, [sp, #376]	@ 0x178
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b564:	9315      	str	r3, [sp, #84]	@ 0x54
  41b566:	f8dc 3004 	ldr.w	r3, [ip, #4]
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
  41b56a:	4683      	mov	fp, r0
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b56c:	9316      	str	r3, [sp, #88]	@ 0x58
  41b56e:	f8dc 3008 	ldr.w	r3, [ip, #8]
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41b572:	a836      	add	r0, sp, #216	@ 0xd8
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b574:	9317      	str	r3, [sp, #92]	@ 0x5c
  41b576:	ed9d 7f14 	ldc	15, cr7, [sp, #80]	@ 0x50
  conv_params.activation.min = data.reference_op_data.output_activation_min;
  41b57a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
  41b57c:	4614      	mov	r4, r2
  conv_params.activation.min = data.reference_op_data.output_activation_min;
  41b57e:	9350      	str	r3, [sp, #320]	@ 0x140
  41b580:	6b13      	ldr	r3, [r2, #48]	@ 0x30
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b582:	ed8d 7f48 	stc	15, cr7, [sp, #288]	@ 0x120
  conv_params.activation.min = data.reference_op_data.output_activation_min;
  41b586:	9351      	str	r3, [sp, #324]	@ 0x144
      data.reference_op_data.per_channel_output_multiplier);
  41b588:	6a53      	ldr	r3, [r2, #36]	@ 0x24
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
  41b58a:	9d5d      	ldr	r5, [sp, #372]	@ 0x174
  quant_params.multiplier = const_cast<int32_t*>(
  41b58c:	931c      	str	r3, [sp, #112]	@ 0x70
      data.reference_op_data.per_channel_output_multiplier);
  41b58e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
  41b590:	af48      	add	r7, sp, #288	@ 0x120
  quant_params.multiplier = const_cast<int32_t*>(
  41b592:	931d      	str	r3, [sp, #116]	@ 0x74
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41b594:	f001 f80c 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
  41b598:	4631      	mov	r1, r6
  41b59a:	a83c      	add	r0, sp, #240	@ 0xf0
  41b59c:	f001 f808 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
  41b5a0:	4651      	mov	r1, sl
  41b5a2:	a842      	add	r0, sp, #264	@ 0x108
  41b5a4:	f001 f804 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
  41b5a8:	4629      	mov	r1, r5
  41b5aa:	a830      	add	r0, sp, #192	@ 0xc0
  41b5ac:	f001 f800 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
  41b5b0:	e9dd 2350 	ldrd	r2, r3, [sp, #320]	@ 0x140
  41b5b4:	429a      	cmp	r2, r3
  41b5b6:	f300 80d8 	bgt.w	41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  41b5ba:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
  41b5bc:	2b04      	cmp	r3, #4
  41b5be:	f040 80d4 	bne.w	41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
  41b5c2:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
  41b5c4:	2b04      	cmp	r3, #4
  41b5c6:	f040 80d0 	bne.w	41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  41b5ca:	9b42      	ldr	r3, [sp, #264]	@ 0x108
  41b5cc:	2b04      	cmp	r3, #4
  41b5ce:	f040 80cc 	bne.w	41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
    return dims_[i];
  41b5d2:	f8dd 80f4 	ldr.w	r8, [sp, #244]	@ 0xf4
  41b5d6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
  41b5d8:	4598      	cmp	r8, r3
  41b5da:	f040 80c6 	bne.w	41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
  41b5de:	f8dd c100 	ldr.w	ip, [sp, #256]	@ 0x100
  41b5e2:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
  41b5e4:	459c      	cmp	ip, r3
  41b5e6:	f040 80c0 	bne.w	41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
  41b5ea:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
  41b5ec:	9a46      	ldr	r2, [sp, #280]	@ 0x118
  41b5ee:	429a      	cmp	r2, r3
  41b5f0:	f040 80bb 	bne.w	41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
  return tensor == nullptr ? nullptr
  41b5f4:	2d00      	cmp	r5, #0
  41b5f6:	d05a      	beq.n	41b6ae <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x186>
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
  41b5f8:	682a      	ldr	r2, [r5, #0]
  41b5fa:	2a00      	cmp	r2, #0
  41b5fc:	d057      	beq.n	41b6ae <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x186>
    for (int i = 0; i < size_; i++) {
  41b5fe:	9930      	ldr	r1, [sp, #192]	@ 0xc0
  41b600:	2900      	cmp	r1, #0
  41b602:	f340 80b0 	ble.w	41b766 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x23e>
  41b606:	1e4a      	subs	r2, r1, #1
  41b608:	2a04      	cmp	r2, #4
  41b60a:	f240 80a8 	bls.w	41b75e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x236>
  41b60e:	ea4f 0e91 	mov.w	lr, r1, lsr #2
  41b612:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41b616:	f1ae 0e10 	sub.w	lr, lr, #16
  41b61a:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41b61e:	f10e 0e01 	add.w	lr, lr, #1
  41b622:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41b626:	f04e e001 	dls	lr, lr
  41b62a:	aa31      	add	r2, sp, #196	@ 0xc4
      buffer_size *= dims_data[i];
  41b62c:	ecb2 5f04 	ldc	15, cr5, [r2], #16
  41b630:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41b634:	f00f c007 	le	lr, 41b62c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x104>
  41b638:	ee36 0b10 	vmov.32	r0, d6[1]
  41b63c:	ee16 2a10 	vmov	r2, s12
  41b640:	fb00 f202 	mul.w	r2, r0, r2
  41b644:	ee17 0b10 	vmov.32	r0, d7[0]
  41b648:	fb00 f202 	mul.w	r2, r0, r2
  41b64c:	ee37 0b10 	vmov.32	r0, d7[1]
  41b650:	fb00 f202 	mul.w	r2, r0, r2
  41b654:	0788      	lsls	r0, r1, #30
  41b656:	d028      	beq.n	41b6aa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
  41b658:	f021 0903 	bic.w	r9, r1, #3
      buffer_size *= dims_data[i];
  41b65c:	a852      	add	r0, sp, #328	@ 0x148
  41b65e:	eb00 0e89 	add.w	lr, r0, r9, lsl #2
  41b662:	f85e 0c84 	ldr.w	r0, [lr, #-132]
  41b666:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41b66a:	f109 0001 	add.w	r0, r9, #1
  41b66e:	4288      	cmp	r0, r1
  41b670:	da1b      	bge.n	41b6aa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
      buffer_size *= dims_data[i];
  41b672:	f85e 0c80 	ldr.w	r0, [lr, #-128]
  41b676:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41b67a:	f109 0002 	add.w	r0, r9, #2
  41b67e:	4281      	cmp	r1, r0
  41b680:	dd13      	ble.n	41b6aa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
      buffer_size *= dims_data[i];
  41b682:	f85e 0c7c 	ldr.w	r0, [lr, #-124]
  41b686:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41b68a:	f109 0003 	add.w	r0, r9, #3
  41b68e:	4281      	cmp	r1, r0
  41b690:	dd0b      	ble.n	41b6aa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
      buffer_size *= dims_data[i];
  41b692:	f85e 0c78 	ldr.w	r0, [lr, #-120]
    for (int i = 0; i < size_; i++) {
  41b696:	f109 0904 	add.w	r9, r9, #4
  41b69a:	4549      	cmp	r1, r9
      buffer_size *= dims_data[i];
  41b69c:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41b6a0:	dd03      	ble.n	41b6aa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
      buffer_size *= dims_data[i];
  41b6a2:	f85e 1c74 	ldr.w	r1, [lr, #-116]
  41b6a6:	fb01 f202 	mul.w	r2, r1, r2
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  41b6aa:	429a      	cmp	r2, r3
  41b6ac:	d15d      	bne.n	41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
  input_dims.n = batch_size;
  41b6ae:	993e      	ldr	r1, [sp, #248]	@ 0xf8
  if (data.buffer_idx > -1) {
  41b6b0:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  input_dims.n = batch_size;
  41b6b4:	9111      	str	r1, [sp, #68]	@ 0x44
  41b6b6:	993f      	ldr	r1, [sp, #252]	@ 0xfc
  41b6b8:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
  41b6bc:	9112      	str	r1, [sp, #72]	@ 0x48
  41b6be:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
  41b6c2:	ed9d 7f10 	ldc	15, cr7, [sp, #64]	@ 0x40
  filter_dims.n = output_depth;
  41b6c6:	9938      	ldr	r1, [sp, #224]	@ 0xe0
  output_dims.n = batch_size;
  41b6c8:	f8cd 8020 	str.w	r8, [sp, #32]
  filter_dims.n = output_depth;
  41b6cc:	910d      	str	r1, [sp, #52]	@ 0x34
  41b6ce:	9939      	ldr	r1, [sp, #228]	@ 0xe4
  input_dims.n = batch_size;
  41b6d0:	f10d 0880 	add.w	r8, sp, #128	@ 0x80
  filter_dims.n = output_depth;
  41b6d4:	e9cd 1c0e 	strd	r1, ip, [sp, #56]	@ 0x38
  output_dims.n = batch_size;
  41b6d8:	9944      	ldr	r1, [sp, #272]	@ 0x110
  filter_dims.n = output_depth;
  41b6da:	930c      	str	r3, [sp, #48]	@ 0x30
  output_dims.n = batch_size;
  41b6dc:	9109      	str	r1, [sp, #36]	@ 0x24
  41b6de:	9945      	ldr	r1, [sp, #276]	@ 0x114
  ctx.buf = nullptr;
  41b6e0:	2200      	movs	r2, #0
  output_dims.n = batch_size;
  41b6e2:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
  input_dims.n = batch_size;
  41b6e6:	ed88 7f00 	stc	15, cr7, [r8]
  filter_dims.n = output_depth;
  41b6ea:	ed9d 7f0c 	ldc	15, cr7, [sp, #48]	@ 0x30
  41b6ee:	ed8d 7f24 	stc	15, cr7, [sp, #144]	@ 0x90
  bias_dims.w = 1;
  41b6f2:	2001      	movs	r0, #1
  output_dims.n = batch_size;
  41b6f4:	ed9d 7f08 	ldc	15, cr7, [sp, #32]
  ctx.size = 0;
  41b6f8:	e9cd 221e 	strd	r2, r2, [sp, #120]	@ 0x78
  bias_dims.c = output_depth;
  41b6fc:	932b      	str	r3, [sp, #172]	@ 0xac
  bias_dims.n = 1;
  41b6fe:	2201      	movs	r2, #1
  41b700:	2301      	movs	r3, #1
  if (data.buffer_idx > -1) {
  41b702:	f1be 0f00 	cmp.w	lr, #0
  filter_dims.n = output_depth;
  41b706:	ac24      	add	r4, sp, #144	@ 0x90
  output_dims.n = batch_size;
  41b708:	f10d 09b0 	add.w	r9, sp, #176	@ 0xb0
  bias_dims.n = 1;
  41b70c:	e9cd 2328 	strd	r2, r3, [sp, #160]	@ 0xa0
  bias_dims.w = 1;
  41b710:	902a      	str	r0, [sp, #168]	@ 0xa8
  output_dims.n = batch_size;
  41b712:	ed89 7f00 	stc	15, cr7, [r9]
  if (data.buffer_idx > -1) {
  41b716:	db05      	blt.n	41b724 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x1fc>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
  41b718:	4671      	mov	r1, lr
  41b71a:	4658      	mov	r0, fp
  41b71c:	f8db 3040 	ldr.w	r3, [fp, #64]	@ 0x40
  41b720:	4798      	blx	r3
  41b722:	901e      	str	r0, [sp, #120]	@ 0x78
  TFLITE_DCHECK(tensor != nullptr);
  41b724:	b30e      	cbz	r6, 41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41b726:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
  41b728:	6832      	ldr	r2, [r6, #0]
  41b72a:	681b      	ldr	r3, [r3, #0]
  return tensor == nullptr ? nullptr
  41b72c:	b105      	cbz	r5, 41b730 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x208>
  41b72e:	682d      	ldr	r5, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
  41b730:	f1ba 0f00 	cmp.w	sl, #0
  41b734:	d019      	beq.n	41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
  TFLITE_DCHECK_EQ(
  41b736:	e9cd 5904 	strd	r5, r9, [sp, #16]
  41b73a:	9302      	str	r3, [sp, #8]
  41b73c:	f8da 3000 	ldr.w	r3, [sl]
  41b740:	a828      	add	r0, sp, #160	@ 0xa0
  41b742:	e9cd 2400 	strd	r2, r4, [sp]
  41b746:	9306      	str	r3, [sp, #24]
  41b748:	9003      	str	r0, [sp, #12]
  41b74a:	4643      	mov	r3, r8
  41b74c:	4639      	mov	r1, r7
  41b74e:	aa1c      	add	r2, sp, #112	@ 0x70
  41b750:	a81e      	add	r0, sp, #120	@ 0x78
  41b752:	f7f6 fa3f 	bl	411bd4 <arm_convolve_wrapper_s8>
  41b756:	b940      	cbnz	r0, 41b76a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x242>
}
  41b758:	b053      	add	sp, #332	@ 0x14c
  41b75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int buffer_size = 1;
  41b75e:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
  41b760:	f04f 0900 	mov.w	r9, #0
  41b764:	e77a      	b.n	41b65c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x134>
    int buffer_size = 1;
  41b766:	2201      	movs	r2, #1
  41b768:	e79f      	b.n	41b6aa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x182>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
  41b76a:	f003 fd15 	bl	41f198 <abort>
  41b76e:	bf00      	nop

0041b770 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

  return EvalQuantizedPerChannel16x8(context, node, params, data, input, filter,
                                     bias, output);
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  41b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
  41b774:	4b36      	ldr	r3, [pc, #216]	@ (41b850 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  41b776:	b088      	sub	sp, #32
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
  41b778:	681a      	ldr	r2, [r3, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  41b77a:	460c      	mov	r4, r1
  41b77c:	4605      	mov	r5, r0
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
  41b77e:	f000 fef1 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
  41b782:	4b34      	ldr	r3, [pc, #208]	@ (41b854 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe4>)
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
  41b784:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
  41b786:	4621      	mov	r1, r4
  41b788:	4628      	mov	r0, r5
  41b78a:	681a      	ldr	r2, [r3, #0]
  41b78c:	f000 feea 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  return node->inputs == nullptr ? 0 : node->inputs->size;
  41b790:	f8d4 9000 	ldr.w	r9, [r4]
  41b794:	4680      	mov	r8, r0
  41b796:	f1b9 0f00 	cmp.w	r9, #0
  41b79a:	d005      	beq.n	41b7a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
  41b79c:	f8d9 3000 	ldr.w	r3, [r9]
  41b7a0:	2b03      	cmp	r3, #3
  41b7a2:	d047      	beq.n	41b834 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
  41b7a4:	f04f 0900 	mov.w	r9, #0
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
  41b7a8:	4b2b      	ldr	r3, [pc, #172]	@ (41b858 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>)
  41b7aa:	4621      	mov	r1, r4
  41b7ac:	4628      	mov	r0, r5
  41b7ae:	681a      	ldr	r2, [r3, #0]
  41b7b0:	f000 fef2 	bl	41c598 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->builtin_data != nullptr);
  41b7b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
  41b7b8:	4607      	mov	r7, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
  41b7ba:	f1ba 0f00 	cmp.w	sl, #0
  41b7be:	d044      	beq.n	41b84a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
  41b7c0:	68e4      	ldr	r4, [r4, #12]
  41b7c2:	2c00      	cmp	r4, #0
  41b7c4:	d041      	beq.n	41b84a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
  41b7c6:	7a32      	ldrb	r2, [r6, #8]
  41b7c8:	7a03      	ldrb	r3, [r0, #8]
  41b7ca:	4293      	cmp	r3, r2
  41b7cc:	d003      	beq.n	41b7d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x66>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
  41b7ce:	2001      	movs	r0, #1
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
  41b7d0:	b008      	add	sp, #32
  41b7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE_MSG(
  41b7d6:	f898 2008 	ldrb.w	r2, [r8, #8]
  41b7da:	4293      	cmp	r3, r2
  41b7dc:	d005      	beq.n	41b7ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  41b7de:	2b07      	cmp	r3, #7
  41b7e0:	d030      	beq.n	41b844 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd4>
  41b7e2:	2b09      	cmp	r3, #9
  41b7e4:	d1f3      	bne.n	41b7ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
  41b7e6:	2a12      	cmp	r2, #18
  41b7e8:	d1f1      	bne.n	41b7ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
  41b7ea:	4643      	mov	r3, r8
  41b7ec:	4629      	mov	r1, r5
  41b7ee:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  41b7f0:	a805      	add	r0, sp, #20
  41b7f2:	f000 feef 	bl	41c5d4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>
  switch (input->type) {  // Already know in/out types are same.
  41b7f6:	7a33      	ldrb	r3, [r6, #8]
  41b7f8:	2b07      	cmp	r3, #7
  41b7fa:	d011      	beq.n	41b820 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
  41b7fc:	2b09      	cmp	r3, #9
  41b7fe:	d1e6      	bne.n	41b7ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
      switch (filter_int8.type) {
  41b800:	f89d 301c 	ldrb.w	r3, [sp, #28]
  41b804:	2b09      	cmp	r3, #9
  41b806:	d1e2      	bne.n	41b7ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
          return EvalQuantizedPerChannel(context, node, params, data, input,
  41b808:	4622      	mov	r2, r4
  41b80a:	ac05      	add	r4, sp, #20
  41b80c:	4633      	mov	r3, r6
  41b80e:	4651      	mov	r1, sl
  41b810:	4628      	mov	r0, r5
  41b812:	9702      	str	r7, [sp, #8]
  41b814:	f8cd 9004 	str.w	r9, [sp, #4]
  41b818:	9400      	str	r4, [sp, #0]
  41b81a:	f7ff fe85 	bl	41b528 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
                                         &filter_int8, bias, output);
  41b81e:	e7d7      	b.n	41b7d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
      return EvalQuantizedPerChannel16x8(context, node, params, data, input,
  41b820:	4633      	mov	r3, r6
  41b822:	4622      	mov	r2, r4
  41b824:	4651      	mov	r1, sl
  41b826:	4628      	mov	r0, r5
  41b828:	e9cd 8900 	strd	r8, r9, [sp]
  41b82c:	9702      	str	r7, [sp, #8]
  41b82e:	f7ff fd57 	bl	41b2e0 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
                                         filter, bias, output);
  41b832:	e7cd      	b.n	41b7d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
  41b834:	4b09      	ldr	r3, [pc, #36]	@ (41b85c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>)
  41b836:	4621      	mov	r1, r4
  41b838:	4628      	mov	r0, r5
  41b83a:	681a      	ldr	r2, [r3, #0]
  41b83c:	f000 fe92 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  41b840:	4681      	mov	r9, r0
  41b842:	e7b1      	b.n	41b7a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  TF_LITE_ENSURE_MSG(
  41b844:	2a09      	cmp	r2, #9
  41b846:	d1c2      	bne.n	41b7ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
  41b848:	e7cf      	b.n	41b7ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  TFLITE_DCHECK(node->builtin_data != nullptr);
  41b84a:	f003 fca5 	bl	41f198 <abort>
  41b84e:	bf00      	nop
  41b850:	00435b8c 	.word	0x00435b8c
  41b854:	00435b88 	.word	0x00435b88
  41b858:	00435b80 	.word	0x00435b80
  41b85c:	00435b84 	.word	0x00435b84

0041b860 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
  41b860:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
  41b862:	2400      	movs	r4, #0
TfLiteRegistration Register_CONV_2D() {
  41b864:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
  41b866:	9400      	str	r4, [sp, #0]
TfLiteRegistration Register_CONV_2D() {
  41b868:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
  41b86a:	4b04      	ldr	r3, [pc, #16]	@ (41b87c <_ZN6tflite16Register_CONV_2DEv+0x1c>)
  41b86c:	4a04      	ldr	r2, [pc, #16]	@ (41b880 <_ZN6tflite16Register_CONV_2DEv+0x20>)
  41b86e:	4905      	ldr	r1, [pc, #20]	@ (41b884 <_ZN6tflite16Register_CONV_2DEv+0x24>)
  41b870:	f000 fe62 	bl	41c538 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
  41b874:	4620      	mov	r0, r4
  41b876:	b002      	add	sp, #8
  41b878:	bd10      	pop	{r4, pc}
  41b87a:	bf00      	nop
  41b87c:	0041b771 	.word	0x0041b771
  41b880:	0041afc9 	.word	0x0041afc9
  41b884:	0041afb9 	.word	0x0041afb9

0041b888 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
  41b888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41b88c:	4615      	mov	r5, r2
  bool has_bias = node->inputs->size == 3;
  41b88e:	680a      	ldr	r2, [r1, #0]
                                 OpDataConv* data) {
  41b890:	460c      	mov	r4, r1
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  41b892:	6811      	ldr	r1, [r2, #0]
                                 OpDataConv* data) {
  41b894:	b08f      	sub	sp, #60	@ 0x3c
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  41b896:	3902      	subs	r1, #2
  41b898:	2901      	cmp	r1, #1
                                 OpDataConv* data) {
  41b89a:	f89d 7074 	ldrb.w	r7, [sp, #116]	@ 0x74
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  41b89e:	d903      	bls.n	41b8a8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20>
  41b8a0:	2001      	movs	r0, #1
  micro_context->DeallocateTempTfLiteTensor(filter);
  micro_context->DeallocateTempTfLiteTensor(output);
  micro_context->DeallocateTempTfLiteTensor(bias);

  return kTfLiteOk;
}
  41b8a2:	b00f      	add	sp, #60	@ 0x3c
  41b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
  41b8a8:	6862      	ldr	r2, [r4, #4]
  41b8aa:	6812      	ldr	r2, [r2, #0]
  41b8ac:	2a01      	cmp	r2, #1
  41b8ae:	d1f7      	bne.n	41b8a0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      params.stride_height, params.stride_width, params.dilation_height_factor,
  41b8b0:	e9d5 e801 	ldrd	lr, r8, [r5, #4]
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  41b8b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
  41b8b6:	4606      	mov	r6, r0
  41b8b8:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
  41b8bc:	3a01      	subs	r2, #1
  41b8be:	fb01 f202 	mul.w	r2, r1, r2
  41b8c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
  auto padding = params.padding;
  41b8c4:	f895 c000 	ldrb.w	ip, [r5]
  41b8c8:	3901      	subs	r1, #1
  41b8ca:	fb00 f101 	mul.w	r1, r0, r1
  41b8ce:	f102 0901 	add.w	r9, r2, #1
  41b8d2:	3101      	adds	r1, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
  41b8d4:	f1be 0f00 	cmp.w	lr, #0
  41b8d8:	d013      	beq.n	41b902 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7a>

  switch (padding) {
  41b8da:	f1bc 0f01 	cmp.w	ip, #1
  41b8de:	f000 80b6 	beq.w	41ba4e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c6>
  41b8e2:	f1bc 0f02 	cmp.w	ip, #2
  41b8e6:	d122      	bne.n	41b92e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa6>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
  41b8e8:	eb0e 0003 	add.w	r0, lr, r3
  41b8ec:	eba0 0009 	sub.w	r0, r0, r9
  41b8f0:	fb90 f0fe 	sdiv	r0, r0, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
  41b8f4:	3801      	subs	r0, #1
  if (stride == 0) return 0;
  41b8f6:	f1b8 0f00 	cmp.w	r8, #0
  41b8fa:	d10e      	bne.n	41b91a <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x92>
  41b8fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
  41b900:	e018      	b.n	41b934 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xac>
  41b902:	f1b8 0f00 	cmp.w	r8, #0
  41b906:	d012      	beq.n	41b92e <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa6>
  switch (padding) {
  41b908:	f1bc 0f01 	cmp.w	ip, #1
  41b90c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  41b910:	f000 80a7 	beq.w	41ba62 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1da>
  41b914:	f1bc 0f02 	cmp.w	ip, #2
  41b918:	d10b      	bne.n	41b932 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xaa>
      return (image_size + stride - effective_filter_size) / stride;
  41b91a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  41b91c:	eb08 0c02 	add.w	ip, r8, r2
  41b920:	ebac 0c01 	sub.w	ip, ip, r1
  41b924:	fb9c fcf8 	sdiv	ip, ip, r8
      ((out_size - 1) * stride + effective_filter_size - in_size);
  41b928:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
      return (image_size + stride - effective_filter_size) / stride;
  41b92c:	e002      	b.n	41b934 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xac>
  41b92e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  41b932:	4684      	mov	ip, r0
      ((out_size - 1) * stride + effective_filter_size - in_size);
  41b934:	fb00 920e 	mla	r2, r0, lr, r9
  41b938:	fb0c 1108 	mla	r1, ip, r8, r1
  int total_padding =
  41b93c:	1ad3      	subs	r3, r2, r3
  41b93e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  total_padding = total_padding > 0 ? total_padding : 0;
  41b940:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  int total_padding =
  41b944:	1a89      	subs	r1, r1, r2
  total_padding = total_padding > 0 ? total_padding : 0;
  41b946:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  return total_padding / 2;
  41b94a:	105a      	asrs	r2, r3, #1
  data->padding = ComputePaddingHeightWidth(
  41b94c:	920a      	str	r2, [sp, #40]	@ 0x28
  *offset = total_padding % 2;
  41b94e:	f003 0301 	and.w	r3, r3, #1
  return total_padding / 2;
  41b952:	104a      	asrs	r2, r1, #1
  *offset = total_padding % 2;
  41b954:	f001 0101 	and.w	r1, r1, #1
  41b958:	920b      	str	r2, [sp, #44]	@ 0x2c
  41b95a:	910d      	str	r1, [sp, #52]	@ 0x34
  41b95c:	930c      	str	r3, [sp, #48]	@ 0x30
  41b95e:	ed9d 7f0a 	ldc	15, cr7, [sp, #40]	@ 0x28
  41b962:	f8d6 8008 	ldr.w	r8, [r6, #8]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
  41b966:	2200      	movs	r2, #0
  41b968:	f8d8 3000 	ldr.w	r3, [r8]
  41b96c:	4621      	mov	r1, r4
  41b96e:	f8d3 c018 	ldr.w	ip, [r3, #24]
  data->padding = ComputePaddingHeightWidth(
  41b972:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
  41b974:	4640      	mov	r0, r8
  data->padding = ComputePaddingHeightWidth(
  41b976:	ed83 7f00 	stc	15, cr7, [r3]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
  41b97a:	47e0      	blx	ip
  TF_LITE_ENSURE(context, input != nullptr);
  41b97c:	4681      	mov	r9, r0
  41b97e:	2800      	cmp	r0, #0
  41b980:	d08e      	beq.n	41b8a0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
  41b982:	f8d8 3000 	ldr.w	r3, [r8]
  41b986:	2201      	movs	r2, #1
  41b988:	4621      	mov	r1, r4
  41b98a:	4640      	mov	r0, r8
  41b98c:	699b      	ldr	r3, [r3, #24]
  41b98e:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
  41b990:	4682      	mov	sl, r0
  41b992:	2800      	cmp	r0, #0
  41b994:	d084      	beq.n	41b8a0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
  41b996:	f8d8 3000 	ldr.w	r3, [r8]
  41b99a:	4621      	mov	r1, r4
  41b99c:	2202      	movs	r2, #2
  41b99e:	699b      	ldr	r3, [r3, #24]
  41b9a0:	4640      	mov	r0, r8
  41b9a2:	4798      	blx	r3
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
  41b9a4:	f8d8 3000 	ldr.w	r3, [r8]
  41b9a8:	4621      	mov	r1, r4
  41b9aa:	2200      	movs	r2, #0
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
  41b9ac:	4683      	mov	fp, r0
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
  41b9ae:	69db      	ldr	r3, [r3, #28]
  41b9b0:	4640      	mov	r0, r8
  41b9b2:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
  41b9b4:	4604      	mov	r4, r0
  41b9b6:	2800      	cmp	r0, #0
  41b9b8:	f43f af72 	beq.w	41b8a0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
  if (data_type != kTfLiteFloat32) {
  41b9bc:	2f01      	cmp	r7, #1
  41b9be:	d021      	beq.n	41ba04 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x17c>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
  41b9c0:	f8da 3014 	ldr.w	r3, [sl, #20]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
  41b9c4:	350c      	adds	r5, #12
  41b9c6:	685b      	ldr	r3, [r3, #4]
  41b9c8:	9501      	str	r5, [sp, #4]
  41b9ca:	9308      	str	r3, [sp, #32]
  41b9cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41b9ce:	9400      	str	r4, [sp, #0]
  41b9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  41b9d2:	4630      	mov	r0, r6
  41b9d4:	9307      	str	r3, [sp, #28]
  41b9d6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41b9d8:	4652      	mov	r2, sl
  41b9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41b9dc:	4649      	mov	r1, r9
  41b9de:	9306      	str	r3, [sp, #24]
  41b9e0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41b9e2:	3330      	adds	r3, #48	@ 0x30
  41b9e4:	9305      	str	r3, [sp, #20]
  41b9e6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41b9e8:	332c      	adds	r3, #44	@ 0x2c
  41b9ea:	9304      	str	r3, [sp, #16]
  41b9ec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41b9ee:	3320      	adds	r3, #32
  41b9f0:	9303      	str	r3, [sp, #12]
  41b9f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41b9f4:	331c      	adds	r3, #28
  41b9f6:	9302      	str	r3, [sp, #8]
  41b9f8:	465b      	mov	r3, fp
  41b9fa:	f7fb fd29 	bl	417450 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
  41b9fe:	2800      	cmp	r0, #0
  41ba00:	f47f af4f 	bne.w	41b8a2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a>
  data->input_zero_point = input->params.zero_point;
  41ba04:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
  41ba06:	f8d9 300c 	ldr.w	r3, [r9, #12]
  micro_context->DeallocateTempTfLiteTensor(input);
  41ba0a:	4649      	mov	r1, r9
  data->input_zero_point = input->params.zero_point;
  41ba0c:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
  41ba0e:	f8da 300c 	ldr.w	r3, [sl, #12]
  micro_context->DeallocateTempTfLiteTensor(input);
  41ba12:	4640      	mov	r0, r8
  data->filter_zero_point = filter->params.zero_point;
  41ba14:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
  41ba16:	68e3      	ldr	r3, [r4, #12]
  41ba18:	6193      	str	r3, [r2, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
  41ba1a:	f8d8 3000 	ldr.w	r3, [r8]
  41ba1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41ba20:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
  41ba22:	f8d8 3000 	ldr.w	r3, [r8]
  41ba26:	4651      	mov	r1, sl
  41ba28:	4640      	mov	r0, r8
  41ba2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41ba2c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
  41ba2e:	f8d8 3000 	ldr.w	r3, [r8]
  41ba32:	4621      	mov	r1, r4
  41ba34:	4640      	mov	r0, r8
  41ba36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41ba38:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(bias);
  41ba3a:	f8d8 3000 	ldr.w	r3, [r8]
  41ba3e:	4640      	mov	r0, r8
  41ba40:	4659      	mov	r1, fp
  41ba42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41ba44:	4798      	blx	r3
  return kTfLiteOk;
  41ba46:	2000      	movs	r0, #0
}
  41ba48:	b00f      	add	sp, #60	@ 0x3c
  41ba4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (image_size + stride - 1) / stride;
  41ba4e:	eb0e 0003 	add.w	r0, lr, r3
  41ba52:	3801      	subs	r0, #1
  41ba54:	fb90 f0fe 	sdiv	r0, r0, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
  41ba58:	3801      	subs	r0, #1
  if (stride == 0) return 0;
  41ba5a:	f1b8 0f00 	cmp.w	r8, #0
  41ba5e:	f43f af4d 	beq.w	41b8fc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x74>
      return (image_size + stride - 1) / stride;
  41ba62:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  41ba64:	eb08 0c02 	add.w	ip, r8, r2
  41ba68:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
  41ba6c:	fb9c fcf8 	sdiv	ip, ip, r8
      ((out_size - 1) * stride + effective_filter_size - in_size);
  41ba70:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
      return (image_size + stride - 1) / stride;
  41ba74:	e75e      	b.n	41b934 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xac>
  41ba76:	bf00      	nop

0041ba78 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
    const TfLiteEvalTensor* input, const TfLiteEvalTensor* filter,
    const TfLiteEvalTensor* bias, TfLiteEvalTensor* output)
    __attribute__((always_inline));

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  41ba78:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  41ba7a:	b10b      	cbz	r3, 41ba80 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
  41ba7c:	213c      	movs	r1, #60	@ 0x3c
  41ba7e:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  41ba80:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  41ba82:	f003 fb89 	bl	41f198 <abort>
  41ba86:	bf00      	nop

0041ba88 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
          tflite::micro::GetOptionalTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_CMSIS_NN_SUCCESS);
}

void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
  41ba88:	4684      	mov	ip, r0
  41ba8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41ba8e:	461d      	mov	r5, r3
  41ba90:	f8dc 3008 	ldr.w	r3, [ip, #8]
  41ba94:	b0d0      	sub	sp, #320	@ 0x140
  41ba96:	9314      	str	r3, [sp, #80]	@ 0x50
  41ba98:	680b      	ldr	r3, [r1, #0]
  41ba9a:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
  41ba9e:	9315      	str	r3, [sp, #84]	@ 0x54
  41baa0:	684b      	ldr	r3, [r1, #4]
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
  41baa2:	f50d 7890 	add.w	r8, sp, #288	@ 0x120
  41baa6:	9316      	str	r3, [sp, #88]	@ 0x58
  41baa8:	f8dc 3014 	ldr.w	r3, [ip, #20]
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
  41baac:	4616      	mov	r6, r2
  41baae:	e9dd 4958 	ldrd	r4, r9, [sp, #352]	@ 0x160
  41bab2:	9317      	str	r3, [sp, #92]	@ 0x5c
  41bab4:	ed9a 7f00 	ldc	15, cr7, [sl]
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
  41bab8:	690b      	ldr	r3, [r1, #16]
  41baba:	ed88 7f00 	stc	15, cr7, [r8]
  41babe:	425b      	negs	r3, r3
  41bac0:	9310      	str	r3, [sp, #64]	@ 0x40
  dw_conv_params->output_offset = data.reference_op_data.output_zero_point;
  41bac2:	698b      	ldr	r3, [r1, #24]
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41bac4:	a832      	add	r0, sp, #200	@ 0xc8
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
  41bac6:	9311      	str	r3, [sp, #68]	@ 0x44
  dw_conv_params->stride.w = params.stride_width;
  41bac8:	f8dc 3004 	ldr.w	r3, [ip, #4]
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
  41bacc:	af44      	add	r7, sp, #272	@ 0x110
  41bace:	9313      	str	r3, [sp, #76]	@ 0x4c
  41bad0:	f8dc 300c 	ldr.w	r3, [ip, #12]
  41bad4:	9312      	str	r3, [sp, #72]	@ 0x48
  41bad6:	ed9d 7f10 	ldc	15, cr7, [sp, #64]	@ 0x40
  dw_conv_params->dilation.h = params.dilation_height_factor;
  41bada:	f8dc 3018 	ldr.w	r3, [ip, #24]
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
  41bade:	ed87 7f00 	stc	15, cr7, [r7]
  dw_conv_params->dilation.h = params.dilation_height_factor;
  41bae2:	934c      	str	r3, [sp, #304]	@ 0x130
  dw_conv_params->activation.min = data.reference_op_data.output_activation_min;
  41bae4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  41bae6:	934d      	str	r3, [sp, #308]	@ 0x134
  dw_conv_params->activation.max = data.reference_op_data.output_activation_max;
  41bae8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
  41baea:	934e      	str	r3, [sp, #312]	@ 0x138
      data.reference_op_data.per_channel_output_multiplier;
  41baec:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
  quant_params->multiplier =
  41baee:	9318      	str	r3, [sp, #96]	@ 0x60
      data.reference_op_data.per_channel_output_multiplier;
  41baf0:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41baf2:	4629      	mov	r1, r5
  quant_params->multiplier =
  41baf4:	9319      	str	r3, [sp, #100]	@ 0x64
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41baf6:	f000 fd5b 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
  41bafa:	4631      	mov	r1, r6
  41bafc:	a838      	add	r0, sp, #224	@ 0xe0
  41bafe:	f000 fd57 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
  41bb02:	4649      	mov	r1, r9
  41bb04:	a83e      	add	r0, sp, #248	@ 0xf8
  41bb06:	f000 fd53 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
  41bb0a:	4621      	mov	r1, r4
  41bb0c:	a82c      	add	r0, sp, #176	@ 0xb0
  41bb0e:	f000 fd4f 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
  41bb12:	e9dd 234d 	ldrd	r2, r3, [sp, #308]	@ 0x134
  41bb16:	429a      	cmp	r2, r3
  41bb18:	f300 80ce 	bgt.w	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
    TFLITE_DCHECK_LT(i, size_);
  41bb1c:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
  41bb1e:	2a00      	cmp	r2, #0
  41bb20:	f340 80ca 	ble.w	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  41bb24:	993e      	ldr	r1, [sp, #248]	@ 0xf8
    return dims_[i];
  41bb26:	f8dd 80e4 	ldr.w	r8, [sp, #228]	@ 0xe4
    TFLITE_DCHECK_LT(i, size_);
  41bb2a:	2900      	cmp	r1, #0
  41bb2c:	f340 80c4 	ble.w	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  41bb30:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
  41bb32:	4598      	cmp	r8, r3
  41bb34:	f040 80c0 	bne.w	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  41bb38:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  41bb3a:	2b03      	cmp	r3, #3
  41bb3c:	f340 80bc 	ble.w	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  41bb40:	2903      	cmp	r1, #3
    return dims_[i];
  41bb42:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
    TFLITE_DCHECK_LT(i, size_);
  41bb44:	f340 80b8 	ble.w	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  41bb48:	9942      	ldr	r1, [sp, #264]	@ 0x108
  41bb4a:	428b      	cmp	r3, r1
  41bb4c:	f040 80b4 	bne.w	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  return tensor == nullptr ? nullptr
  41bb50:	2c00      	cmp	r4, #0
  41bb52:	d05e      	beq.n	41bc12 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x18a>
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
  41bb54:	6821      	ldr	r1, [r4, #0]
  41bb56:	2900      	cmp	r1, #0
  41bb58:	d05b      	beq.n	41bc12 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x18a>
    for (int i = 0; i < size_; i++) {
  41bb5a:	f8dd c0b0 	ldr.w	ip, [sp, #176]	@ 0xb0
  41bb5e:	f1bc 0f00 	cmp.w	ip, #0
  41bb62:	f340 80a7 	ble.w	41bcb4 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x22c>
  41bb66:	f10c 31ff 	add.w	r1, ip, #4294967295	@ 0xffffffff
  41bb6a:	2904      	cmp	r1, #4
  41bb6c:	f240 809e 	bls.w	41bcac <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x224>
  41bb70:	ea4f 0e9c 	mov.w	lr, ip, lsr #2
  41bb74:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41bb78:	f1ae 0e10 	sub.w	lr, lr, #16
  41bb7c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41bb80:	f10e 0e01 	add.w	lr, lr, #1
  41bb84:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41bb88:	f04e e001 	dls	lr, lr
  41bb8c:	a92d      	add	r1, sp, #180	@ 0xb4
      buffer_size *= dims_data[i];
  41bb8e:	ecb1 5f04 	ldc	15, cr5, [r1], #16
  41bb92:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41bb96:	f00f c007 	le	lr, 41bb8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x106>
  41bb9a:	ee36 1b10 	vmov.32	r1, d6[1]
  41bb9e:	ee16 0a10 	vmov	r0, s12
  41bba2:	fb01 f000 	mul.w	r0, r1, r0
  41bba6:	ee17 1b10 	vmov.32	r1, d7[0]
  41bbaa:	fb01 f000 	mul.w	r0, r1, r0
  41bbae:	ee37 1b10 	vmov.32	r1, d7[1]
  41bbb2:	f01c 0f03 	tst.w	ip, #3
  41bbb6:	fb01 f000 	mul.w	r0, r1, r0
  41bbba:	d028      	beq.n	41bc0e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x186>
  41bbbc:	f02c 0a03 	bic.w	sl, ip, #3
      buffer_size *= dims_data[i];
  41bbc0:	a950      	add	r1, sp, #320	@ 0x140
  41bbc2:	eb01 0e8a 	add.w	lr, r1, sl, lsl #2
  41bbc6:	f85e 1c8c 	ldr.w	r1, [lr, #-140]
  41bbca:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41bbce:	f10a 0101 	add.w	r1, sl, #1
  41bbd2:	4561      	cmp	r1, ip
  41bbd4:	da1b      	bge.n	41bc0e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x186>
      buffer_size *= dims_data[i];
  41bbd6:	f85e 1c88 	ldr.w	r1, [lr, #-136]
  41bbda:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41bbde:	f10a 0102 	add.w	r1, sl, #2
  41bbe2:	458c      	cmp	ip, r1
  41bbe4:	dd13      	ble.n	41bc0e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x186>
      buffer_size *= dims_data[i];
  41bbe6:	f85e 1c84 	ldr.w	r1, [lr, #-132]
  41bbea:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41bbee:	f10a 0103 	add.w	r1, sl, #3
  41bbf2:	458c      	cmp	ip, r1
  41bbf4:	dd0b      	ble.n	41bc0e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x186>
      buffer_size *= dims_data[i];
  41bbf6:	f85e 1c80 	ldr.w	r1, [lr, #-128]
    for (int i = 0; i < size_; i++) {
  41bbfa:	f10a 0a04 	add.w	sl, sl, #4
  41bbfe:	45d4      	cmp	ip, sl
      buffer_size *= dims_data[i];
  41bc00:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41bc04:	dd03      	ble.n	41bc0e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x186>
      buffer_size *= dims_data[i];
  41bc06:	f85e 1c7c 	ldr.w	r1, [lr, #-124]
  41bc0a:	fb01 f000 	mul.w	r0, r1, r0
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  41bc0e:	4298      	cmp	r0, r3
  41bc10:	d152      	bne.n	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
    TFLITE_DCHECK_LT(i, size_);
  41bc12:	2a01      	cmp	r2, #1
  input_dims->n = batch_size;
  41bc14:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
  41bc18:	d04e      	beq.n	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  input_dims->h = input_shape.Dims(1);
  41bc1a:	993a      	ldr	r1, [sp, #232]	@ 0xe8
  41bc1c:	2a02      	cmp	r2, #2
  41bc1e:	9129      	str	r1, [sp, #164]	@ 0xa4
  41bc20:	d04a      	beq.n	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  input_dims->w = input_shape.Dims(2);
  41bc22:	993b      	ldr	r1, [sp, #236]	@ 0xec
  41bc24:	2a03      	cmp	r2, #3
  41bc26:	912a      	str	r1, [sp, #168]	@ 0xa8
  41bc28:	d046      	beq.n	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  PopulateDwConvParams(&dw_conv_params, &quant_params, &input_dims,
                       &filter_dims, &bias_dims, &output_dims, params, data,
                       input, filter, bias, output);

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
  41bc2a:	2200      	movs	r2, #0
  bias_dims->w = 1;
  41bc2c:	2101      	movs	r1, #1
  filter_dims->n = filter_shape.Dims(0);
  41bc2e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
  /* 'size' is unused */
  ctx.size = 0;
  41bc30:	e9cd 221a 	strd	r2, r2, [sp, #104]	@ 0x68
  bias_dims->w = 1;
  41bc34:	9122      	str	r1, [sp, #136]	@ 0x88
  filter_dims->n = filter_shape.Dims(0);
  41bc36:	e9dd 2133 	ldrd	r2, r1, [sp, #204]	@ 0xcc
  41bc3a:	e9cd 100d 	strd	r1, r0, [sp, #52]	@ 0x34
  41bc3e:	920c      	str	r2, [sp, #48]	@ 0x30
  41bc40:	930f      	str	r3, [sp, #60]	@ 0x3c
  41bc42:	ed9d 7f0c 	ldc	15, cr7, [sp, #48]	@ 0x30
  input_dims->c = input_shape.Dims(3);
  41bc46:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
  filter_dims->n = filter_shape.Dims(0);
  41bc48:	a81c      	add	r0, sp, #112	@ 0x70
  input_dims->c = input_shape.Dims(3);
  41bc4a:	922b      	str	r2, [sp, #172]	@ 0xac
  output_dims->n = batch_size;
  41bc4c:	9a40      	ldr	r2, [sp, #256]	@ 0x100
  41bc4e:	f8cd 8020 	str.w	r8, [sp, #32]
  41bc52:	9209      	str	r2, [sp, #36]	@ 0x24
  41bc54:	9a41      	ldr	r2, [sp, #260]	@ 0x104
  bias_dims->c = output_depth;
  41bc56:	9323      	str	r3, [sp, #140]	@ 0x8c
  output_dims->n = batch_size;
  41bc58:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  filter_dims->n = filter_shape.Dims(0);
  41bc5c:	ed80 7f00 	stc	15, cr7, [r0]
  output_dims->n = batch_size;
  41bc60:	ed9d 7f08 	ldc	15, cr7, [sp, #32]
  bias_dims->n = 1;
  41bc64:	2201      	movs	r2, #1
  41bc66:	2301      	movs	r3, #1
  output_dims->n = batch_size;
  41bc68:	a924      	add	r1, sp, #144	@ 0x90
  bias_dims->n = 1;
  41bc6a:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
  output_dims->n = batch_size;
  41bc6e:	ed81 7f00 	stc	15, cr7, [r1]
  TFLITE_DCHECK(tensor != nullptr);
  41bc72:	b30e      	cbz	r6, 41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41bc74:	6833      	ldr	r3, [r6, #0]
  TFLITE_DCHECK(tensor != nullptr);
  41bc76:	b1fd      	cbz	r5, 41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41bc78:	682a      	ldr	r2, [r5, #0]
  return tensor == nullptr ? nullptr
  41bc7a:	b104      	cbz	r4, 41bc7e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x1f6>
  41bc7c:	6824      	ldr	r4, [r4, #0]
  TFLITE_DCHECK(tensor != nullptr);
  41bc7e:	f1b9 0f00 	cmp.w	r9, #0
  41bc82:	d019      	beq.n	41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>

  TFLITE_DCHECK_EQ(
  41bc84:	9105      	str	r1, [sp, #20]
  41bc86:	f8d9 1000 	ldr.w	r1, [r9]
  41bc8a:	ad20      	add	r5, sp, #128	@ 0x80
  41bc8c:	e9cd 0201 	strd	r0, r2, [sp, #4]
  41bc90:	9106      	str	r1, [sp, #24]
  41bc92:	9300      	str	r3, [sp, #0]
  41bc94:	4639      	mov	r1, r7
  41bc96:	e9cd 5403 	strd	r5, r4, [sp, #12]
  41bc9a:	ab28      	add	r3, sp, #160	@ 0xa0
  41bc9c:	aa18      	add	r2, sp, #96	@ 0x60
  41bc9e:	a81a      	add	r0, sp, #104	@ 0x68
  41bca0:	f7f6 f82e 	bl	411d00 <arm_depthwise_conv_s16>
  41bca4:	b940      	cbnz	r0, 41bcb8 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x230>
          tflite::micro::GetTensorData<int16_t>(input), &filter_dims,
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetOptionalTensorData<int64_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int16_t>(output)),
      ARM_CMSIS_NN_SUCCESS);
}
  41bca6:	b050      	add	sp, #320	@ 0x140
  41bca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int buffer_size = 1;
  41bcac:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
  41bcae:	f04f 0a00 	mov.w	sl, #0
  41bcb2:	e785      	b.n	41bbc0 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x138>
    int buffer_size = 1;
  41bcb4:	2001      	movs	r0, #1
  41bcb6:	e7aa      	b.n	41bc0e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x186>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
  41bcb8:	f003 fa6e 	bl	41f198 <abort>

0041bcbc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
  41bcbc:	468c      	mov	ip, r1
  41bcbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41bcc2:	461e      	mov	r6, r3
  41bcc4:	f8dc 3008 	ldr.w	r3, [ip, #8]
  41bcc8:	b0d1      	sub	sp, #324	@ 0x144
  41bcca:	9314      	str	r3, [sp, #80]	@ 0x50
  41bccc:	6813      	ldr	r3, [r2, #0]
  41bcce:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
  41bcd2:	9315      	str	r3, [sp, #84]	@ 0x54
  41bcd4:	6853      	ldr	r3, [r2, #4]
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
  41bcd6:	f50d 7890 	add.w	r8, sp, #288	@ 0x120
  41bcda:	9316      	str	r3, [sp, #88]	@ 0x58
  41bcdc:	f8dc 3014 	ldr.w	r3, [ip, #20]
  41bce0:	af44      	add	r7, sp, #272	@ 0x110
  41bce2:	9317      	str	r3, [sp, #92]	@ 0x5c
  41bce4:	ed9a 7f00 	ldc	15, cr7, [sl]
  41bce8:	6913      	ldr	r3, [r2, #16]
  41bcea:	ed88 7f00 	stc	15, cr7, [r8]
  41bcee:	425b      	negs	r3, r3
  41bcf0:	9310      	str	r3, [sp, #64]	@ 0x40
  dw_conv_params->output_offset = data.reference_op_data.output_zero_point;
  41bcf2:	6993      	ldr	r3, [r2, #24]
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41bcf4:	995a      	ldr	r1, [sp, #360]	@ 0x168
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
  41bcf6:	9311      	str	r3, [sp, #68]	@ 0x44
  dw_conv_params->stride.w = params.stride_width;
  41bcf8:	f8dc 3004 	ldr.w	r3, [ip, #4]
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
  41bcfc:	9d5b      	ldr	r5, [sp, #364]	@ 0x16c
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
  41bcfe:	9313      	str	r3, [sp, #76]	@ 0x4c
  41bd00:	f8dc 300c 	ldr.w	r3, [ip, #12]
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
  41bd04:	f8dd 9170 	ldr.w	r9, [sp, #368]	@ 0x170
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
  41bd08:	9312      	str	r3, [sp, #72]	@ 0x48
  41bd0a:	ed9d 7f10 	ldc	15, cr7, [sp, #64]	@ 0x40
  dw_conv_params->dilation.h = params.dilation_height_factor;
  41bd0e:	f8dc 3018 	ldr.w	r3, [ip, #24]
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
  41bd12:	ed87 7f00 	stc	15, cr7, [r7]
  dw_conv_params->dilation.h = params.dilation_height_factor;
  41bd16:	934c      	str	r3, [sp, #304]	@ 0x130
  dw_conv_params->activation.min = data.reference_op_data.output_activation_min;
  41bd18:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
  41bd1a:	4683      	mov	fp, r0
  dw_conv_params->activation.min = data.reference_op_data.output_activation_min;
  41bd1c:	934d      	str	r3, [sp, #308]	@ 0x134
  dw_conv_params->activation.max = data.reference_op_data.output_activation_max;
  41bd1e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41bd20:	a832      	add	r0, sp, #200	@ 0xc8
  dw_conv_params->activation.max = data.reference_op_data.output_activation_max;
  41bd22:	934e      	str	r3, [sp, #312]	@ 0x138
      data.reference_op_data.per_channel_output_multiplier;
  41bd24:	6a53      	ldr	r3, [r2, #36]	@ 0x24
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
  41bd26:	4614      	mov	r4, r2
  quant_params->multiplier =
  41bd28:	9318      	str	r3, [sp, #96]	@ 0x60
      data.reference_op_data.per_channel_output_multiplier;
  41bd2a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  quant_params->multiplier =
  41bd2c:	9319      	str	r3, [sp, #100]	@ 0x64
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
  41bd2e:	f000 fc3f 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
  41bd32:	4631      	mov	r1, r6
  41bd34:	a838      	add	r0, sp, #224	@ 0xe0
  41bd36:	f000 fc3b 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
  41bd3a:	4649      	mov	r1, r9
  41bd3c:	a83e      	add	r0, sp, #248	@ 0xf8
  41bd3e:	f000 fc37 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
  41bd42:	4629      	mov	r1, r5
  41bd44:	a82c      	add	r0, sp, #176	@ 0xb0
  41bd46:	f000 fc33 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
  41bd4a:	e9dd 234d 	ldrd	r2, r3, [sp, #308]	@ 0x134
  41bd4e:	429a      	cmp	r2, r3
  41bd50:	f300 80d8 	bgt.w	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
    TFLITE_DCHECK_LT(i, size_);
  41bd54:	9938      	ldr	r1, [sp, #224]	@ 0xe0
  41bd56:	2900      	cmp	r1, #0
  41bd58:	f340 80d4 	ble.w	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  41bd5c:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
    return dims_[i];
  41bd5e:	f8dd 80e4 	ldr.w	r8, [sp, #228]	@ 0xe4
    TFLITE_DCHECK_LT(i, size_);
  41bd62:	2a00      	cmp	r2, #0
  41bd64:	f340 80ce 	ble.w	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  41bd68:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
  41bd6a:	4598      	cmp	r8, r3
  41bd6c:	f040 80ca 	bne.w	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  41bd70:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
  41bd72:	2b03      	cmp	r3, #3
  41bd74:	f340 80c6 	ble.w	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  41bd78:	2a03      	cmp	r2, #3
    return dims_[i];
  41bd7a:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
    TFLITE_DCHECK_LT(i, size_);
  41bd7c:	f340 80c2 	ble.w	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  41bd80:	9a42      	ldr	r2, [sp, #264]	@ 0x108
  41bd82:	4293      	cmp	r3, r2
  41bd84:	f040 80be 	bne.w	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  return tensor == nullptr ? nullptr
  41bd88:	2d00      	cmp	r5, #0
  41bd8a:	d05e      	beq.n	41be4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x18e>
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
  41bd8c:	682a      	ldr	r2, [r5, #0]
  41bd8e:	2a00      	cmp	r2, #0
  41bd90:	d05b      	beq.n	41be4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x18e>
    for (int i = 0; i < size_; i++) {
  41bd92:	f8dd c0b0 	ldr.w	ip, [sp, #176]	@ 0xb0
  41bd96:	f1bc 0f00 	cmp.w	ip, #0
  41bd9a:	f340 80b1 	ble.w	41bf00 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x244>
  41bd9e:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
  41bda2:	2a04      	cmp	r2, #4
  41bda4:	f240 80a8 	bls.w	41bef8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x23c>
  41bda8:	ea4f 0e9c 	mov.w	lr, ip, lsr #2
  41bdac:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41bdb0:	f1ae 0e10 	sub.w	lr, lr, #16
  41bdb4:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41bdb8:	f10e 0e01 	add.w	lr, lr, #1
  41bdbc:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41bdc0:	f04e e001 	dls	lr, lr
  41bdc4:	aa2d      	add	r2, sp, #180	@ 0xb4
      buffer_size *= dims_data[i];
  41bdc6:	ecb2 5f04 	ldc	15, cr5, [r2], #16
  41bdca:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41bdce:	f00f c007 	le	lr, 41bdc6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x10a>
  41bdd2:	ee36 0b10 	vmov.32	r0, d6[1]
  41bdd6:	ee16 2a10 	vmov	r2, s12
  41bdda:	fb00 f202 	mul.w	r2, r0, r2
  41bdde:	ee17 0b10 	vmov.32	r0, d7[0]
  41bde2:	fb00 f202 	mul.w	r2, r0, r2
  41bde6:	ee37 0b10 	vmov.32	r0, d7[1]
  41bdea:	f01c 0f03 	tst.w	ip, #3
  41bdee:	fb00 f202 	mul.w	r2, r0, r2
  41bdf2:	d028      	beq.n	41be46 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x18a>
  41bdf4:	f02c 0a03 	bic.w	sl, ip, #3
      buffer_size *= dims_data[i];
  41bdf8:	a850      	add	r0, sp, #320	@ 0x140
  41bdfa:	eb00 0e8a 	add.w	lr, r0, sl, lsl #2
  41bdfe:	f85e 0c8c 	ldr.w	r0, [lr, #-140]
  41be02:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41be06:	f10a 0001 	add.w	r0, sl, #1
  41be0a:	4560      	cmp	r0, ip
  41be0c:	da1b      	bge.n	41be46 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x18a>
      buffer_size *= dims_data[i];
  41be0e:	f85e 0c88 	ldr.w	r0, [lr, #-136]
  41be12:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41be16:	f10a 0002 	add.w	r0, sl, #2
  41be1a:	4584      	cmp	ip, r0
  41be1c:	dd13      	ble.n	41be46 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x18a>
      buffer_size *= dims_data[i];
  41be1e:	f85e 0c84 	ldr.w	r0, [lr, #-132]
  41be22:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41be26:	f10a 0003 	add.w	r0, sl, #3
  41be2a:	4584      	cmp	ip, r0
  41be2c:	dd0b      	ble.n	41be46 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x18a>
      buffer_size *= dims_data[i];
  41be2e:	f85e 0c80 	ldr.w	r0, [lr, #-128]
    for (int i = 0; i < size_; i++) {
  41be32:	f10a 0a04 	add.w	sl, sl, #4
  41be36:	45d4      	cmp	ip, sl
      buffer_size *= dims_data[i];
  41be38:	fb00 f202 	mul.w	r2, r0, r2
    for (int i = 0; i < size_; i++) {
  41be3c:	dd03      	ble.n	41be46 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x18a>
      buffer_size *= dims_data[i];
  41be3e:	f85e 0c7c 	ldr.w	r0, [lr, #-124]
  41be42:	fb00 f202 	mul.w	r2, r0, r2
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
  41be46:	429a      	cmp	r2, r3
  41be48:	d15c      	bne.n	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
    TFLITE_DCHECK_LT(i, size_);
  41be4a:	2901      	cmp	r1, #1
  input_dims->n = batch_size;
  41be4c:	f8cd 80a0 	str.w	r8, [sp, #160]	@ 0xa0
  41be50:	d058      	beq.n	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  input_dims->h = input_shape.Dims(1);
  41be52:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
  41be54:	2902      	cmp	r1, #2
  41be56:	9229      	str	r2, [sp, #164]	@ 0xa4
  41be58:	d054      	beq.n	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  input_dims->w = input_shape.Dims(2);
  41be5a:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
  41be5c:	2903      	cmp	r1, #3
  41be5e:	922a      	str	r2, [sp, #168]	@ 0xa8
  41be60:	d050      	beq.n	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  ctx.buf = nullptr;
  41be62:	2200      	movs	r2, #0
  if (data.buffer_idx > -1) {
  41be64:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  ctx.size = 0;
  41be66:	e9cd 221a 	strd	r2, r2, [sp, #104]	@ 0x68
  filter_dims->n = filter_shape.Dims(0);
  41be6a:	e9dd 2433 	ldrd	r2, r4, [sp, #204]	@ 0xcc
  41be6e:	920c      	str	r2, [sp, #48]	@ 0x30
  input_dims->c = input_shape.Dims(3);
  41be70:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
  filter_dims->n = filter_shape.Dims(0);
  41be72:	940d      	str	r4, [sp, #52]	@ 0x34
  input_dims->c = input_shape.Dims(3);
  41be74:	922b      	str	r2, [sp, #172]	@ 0xac
  filter_dims->n = filter_shape.Dims(0);
  41be76:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
  41be78:	ac1c      	add	r4, sp, #112	@ 0x70
  41be7a:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
  41be7e:	ed9d 7f0c 	ldc	15, cr7, [sp, #48]	@ 0x30
  output_dims->n = batch_size;
  41be82:	9a40      	ldr	r2, [sp, #256]	@ 0x100
  41be84:	f8cd 8020 	str.w	r8, [sp, #32]
  41be88:	9209      	str	r2, [sp, #36]	@ 0x24
  41be8a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
  bias_dims->w = 1;
  41be8c:	2001      	movs	r0, #1
  output_dims->n = batch_size;
  41be8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  filter_dims->n = filter_shape.Dims(0);
  41be92:	ed84 7f00 	stc	15, cr7, [r4]
  output_dims->n = batch_size;
  41be96:	ed9d 7f08 	ldc	15, cr7, [sp, #32]
  bias_dims->n = 1;
  41be9a:	2201      	movs	r2, #1
  bias_dims->c = output_depth;
  41be9c:	9323      	str	r3, [sp, #140]	@ 0x8c
  bias_dims->n = 1;
  41be9e:	2301      	movs	r3, #1
  if (data.buffer_idx > -1) {
  41bea0:	2900      	cmp	r1, #0
  output_dims->n = batch_size;
  41bea2:	f10d 0890 	add.w	r8, sp, #144	@ 0x90
  bias_dims->n = 1;
  41bea6:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
  bias_dims->w = 1;
  41beaa:	9022      	str	r0, [sp, #136]	@ 0x88
  output_dims->n = batch_size;
  41beac:	ed88 7f00 	stc	15, cr7, [r8]
  if (data.buffer_idx > -1) {
  41beb0:	db04      	blt.n	41bebc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x200>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
  41beb2:	4658      	mov	r0, fp
  41beb4:	f8db 3040 	ldr.w	r3, [fp, #64]	@ 0x40
  41beb8:	4798      	blx	r3
  41beba:	901a      	str	r0, [sp, #104]	@ 0x68
  TFLITE_DCHECK(tensor != nullptr);
  41bebc:	b316      	cbz	r6, 41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41bebe:	9a5a      	ldr	r2, [sp, #360]	@ 0x168
  41bec0:	6833      	ldr	r3, [r6, #0]
  41bec2:	6812      	ldr	r2, [r2, #0]
  return tensor == nullptr ? nullptr
  41bec4:	b105      	cbz	r5, 41bec8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x20c>
  41bec6:	682d      	ldr	r5, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
  41bec8:	f1b9 0f00 	cmp.w	r9, #0
  41becc:	d01a      	beq.n	41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
  TFLITE_DCHECK_EQ(
  41bece:	f8cd 8014 	str.w	r8, [sp, #20]
  41bed2:	f8d9 1000 	ldr.w	r1, [r9]
  41bed6:	a820      	add	r0, sp, #128	@ 0x80
  41bed8:	e9cd 0503 	strd	r0, r5, [sp, #12]
  41bedc:	e9cd 4201 	strd	r4, r2, [sp, #4]
  41bee0:	9106      	str	r1, [sp, #24]
  41bee2:	9300      	str	r3, [sp, #0]
  41bee4:	4639      	mov	r1, r7
  41bee6:	ab28      	add	r3, sp, #160	@ 0xa0
  41bee8:	aa18      	add	r2, sp, #96	@ 0x60
  41beea:	a81a      	add	r0, sp, #104	@ 0x68
  41beec:	f7f6 feb0 	bl	412c50 <arm_depthwise_conv_wrapper_s8>
  41bef0:	b940      	cbnz	r0, 41bf04 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x248>
}
  41bef2:	b051      	add	sp, #324	@ 0x144
  41bef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int buffer_size = 1;
  41bef8:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
  41befa:	f04f 0a00 	mov.w	sl, #0
  41befe:	e77b      	b.n	41bdf8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x13c>
    int buffer_size = 1;
  41bf00:	2201      	movs	r2, #1
  41bf02:	e7a0      	b.n	41be46 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x18a>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
  41bf04:	f003 f948 	bl	41f198 <abort>

0041bf08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  41bf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
  41bf0c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  41bf10:	b089      	sub	sp, #36	@ 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
  41bf12:	f1ba 0f00 	cmp.w	sl, #0
  41bf16:	d059      	beq.n	41bfcc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
  TFLITE_DCHECK(node->builtin_data != nullptr);
  41bf18:	f8d1 b010 	ldr.w	fp, [r1, #16]
  41bf1c:	460c      	mov	r4, r1
  41bf1e:	f1bb 0f00 	cmp.w	fp, #0
  41bf22:	d053      	beq.n	41bfcc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
  const auto& params =
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpData& data = *(static_cast<OpData*>(node->user_data));

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
  41bf24:	4b2a      	ldr	r3, [pc, #168]	@ (41bfd0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
  41bf26:	4605      	mov	r5, r0
  41bf28:	681a      	ldr	r2, [r3, #0]
  41bf2a:	f000 fb35 	bl	41c598 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
  41bf2e:	4b29      	ldr	r3, [pc, #164]	@ (41bfd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
  41bf30:	4621      	mov	r1, r4
  41bf32:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
  41bf34:	4681      	mov	r9, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
  41bf36:	4628      	mov	r0, r5
  41bf38:	f000 fb14 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
  41bf3c:	4b26      	ldr	r3, [pc, #152]	@ (41bfd8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0>)
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
  41bf3e:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
  41bf40:	4621      	mov	r1, r4
  41bf42:	4628      	mov	r0, r5
  41bf44:	681a      	ldr	r2, [r3, #0]
  41bf46:	f000 fb0d 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  41bf4a:	f8d4 8000 	ldr.w	r8, [r4]
  41bf4e:	4607      	mov	r7, r0
  41bf50:	f1b8 0f00 	cmp.w	r8, #0
  41bf54:	d005      	beq.n	41bf62 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
  41bf56:	f8d8 3000 	ldr.w	r3, [r8]
  41bf5a:	2b03      	cmp	r3, #3
  41bf5c:	d02e      	beq.n	41bfbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
  41bf5e:	f04f 0800 	mov.w	r8, #0
          : nullptr;

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
  41bf62:	463b      	mov	r3, r7
  41bf64:	4629      	mov	r1, r5
  41bf66:	f8da 2034 	ldr.w	r2, [sl, #52]	@ 0x34
  41bf6a:	a805      	add	r0, sp, #20
  41bf6c:	f000 fb32 	bl	41c5d4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>
      context, data.reference_op_data.filter_buffer_index, filter);

  switch (input->type) {  // Already know in/out types are same.
  41bf70:	7a33      	ldrb	r3, [r6, #8]
  41bf72:	2b07      	cmp	r3, #7
  41bf74:	d016      	beq.n	41bfa4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
  41bf76:	2b09      	cmp	r3, #9
  41bf78:	d003      	beq.n	41bf82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
    case kTfLiteFloat32: {
#if EI_TFLITE_DISABLE_DEPTHWISE_CONV_2D_IN_F32
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  41bf7a:	2001      	movs	r0, #1
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
  41bf7c:	b009      	add	sp, #36	@ 0x24
  41bf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (filter_int8.type) {
  41bf82:	f89d 301c 	ldrb.w	r3, [sp, #28]
  41bf86:	2b09      	cmp	r3, #9
  41bf88:	d1f7      	bne.n	41bf7a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
          EvalQuantizedPerChannel(context, node, params, data, input,
  41bf8a:	ac05      	add	r4, sp, #20
  41bf8c:	4633      	mov	r3, r6
  41bf8e:	4652      	mov	r2, sl
  41bf90:	4659      	mov	r1, fp
  41bf92:	4628      	mov	r0, r5
  41bf94:	f8cd 9008 	str.w	r9, [sp, #8]
  41bf98:	f8cd 8004 	str.w	r8, [sp, #4]
  41bf9c:	9400      	str	r4, [sp, #0]
  41bf9e:	f7ff fe8d 	bl	41bcbc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
      break;
  41bfa2:	e007      	b.n	41bfb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xac>
      EvalQuantizedPerChannel16x8(context, node, params, data, input, filter,
  41bfa4:	463b      	mov	r3, r7
  41bfa6:	4632      	mov	r2, r6
  41bfa8:	4651      	mov	r1, sl
  41bfaa:	4658      	mov	r0, fp
  41bfac:	e9cd 8900 	strd	r8, r9, [sp]
  41bfb0:	f7ff fd6a 	bl	41ba88 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
  return kTfLiteOk;
  41bfb4:	2000      	movs	r0, #0
}
  41bfb6:	b009      	add	sp, #36	@ 0x24
  41bfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
  41bfbc:	4b07      	ldr	r3, [pc, #28]	@ (41bfdc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd4>)
  41bfbe:	4621      	mov	r1, r4
  41bfc0:	4628      	mov	r0, r5
  41bfc2:	681a      	ldr	r2, [r3, #0]
  41bfc4:	f000 face 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  41bfc8:	4680      	mov	r8, r0
  41bfca:	e7ca      	b.n	41bf62 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  TFLITE_DCHECK(node->user_data != nullptr);
  41bfcc:	f003 f8e4 	bl	41f198 <abort>
  41bfd0:	00435b94 	.word	0x00435b94
  41bfd4:	00435ba0 	.word	0x00435ba0
  41bfd8:	00435b9c 	.word	0x00435b9c
  41bfdc:	00435b98 	.word	0x00435b98

0041bfe0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  41bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
  41bfe4:	f8d1 a00c 	ldr.w	sl, [r1, #12]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  41bfe8:	b0c1      	sub	sp, #260	@ 0x104
  TFLITE_DCHECK(node->user_data != nullptr);
  41bfea:	f1ba 0f00 	cmp.w	sl, #0
  41bfee:	f000 8188 	beq.w	41c302 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x322>
  TFLITE_DCHECK(node->builtin_data != nullptr);
  41bff2:	f8d1 b010 	ldr.w	fp, [r1, #16]
  41bff6:	460d      	mov	r5, r1
  41bff8:	f1bb 0f00 	cmp.w	fp, #0
  41bffc:	f000 8181 	beq.w	41c302 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x322>
  41c000:	6884      	ldr	r4, [r0, #8]
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvInputTensor);
  41c002:	4b85      	ldr	r3, [pc, #532]	@ (41c218 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
  41c004:	4680      	mov	r8, r0
  41c006:	681a      	ldr	r2, [r3, #0]
  41c008:	6823      	ldr	r3, [r4, #0]
  41c00a:	4620      	mov	r0, r4
  41c00c:	699b      	ldr	r3, [r3, #24]
  41c00e:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
  41c010:	4606      	mov	r6, r0
  41c012:	2800      	cmp	r0, #0
  41c014:	d062      	beq.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvWeightsTensor);
  41c016:	4b81      	ldr	r3, [pc, #516]	@ (41c21c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
  41c018:	4629      	mov	r1, r5
  41c01a:	681a      	ldr	r2, [r3, #0]
  41c01c:	6823      	ldr	r3, [r4, #0]
  41c01e:	4620      	mov	r0, r4
  41c020:	699b      	ldr	r3, [r3, #24]
  41c022:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
  41c024:	4607      	mov	r7, r0
  41c026:	2800      	cmp	r0, #0
  41c028:	d058      	beq.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
      micro_context->AllocateTempOutputTensor(node, kDepthwiseConvOutputTensor);
  41c02a:	4b7d      	ldr	r3, [pc, #500]	@ (41c220 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
  41c02c:	4629      	mov	r1, r5
  41c02e:	681a      	ldr	r2, [r3, #0]
  41c030:	6823      	ldr	r3, [r4, #0]
  41c032:	4620      	mov	r0, r4
  41c034:	69db      	ldr	r3, [r3, #28]
  41c036:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
  41c038:	4681      	mov	r9, r0
  41c03a:	2800      	cmp	r0, #0
  41c03c:	d04e      	beq.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
  return t->dims->data[dim];
  41c03e:	6971      	ldr	r1, [r6, #20]
  41c040:	697b      	ldr	r3, [r7, #20]
  41c042:	68ca      	ldr	r2, [r1, #12]
  41c044:	f8d0 c014 	ldr.w	ip, [r0, #20]
  41c048:	920f      	str	r2, [sp, #60]	@ 0x3c
  41c04a:	688a      	ldr	r2, [r1, #8]
  const TfLiteType data_type = input->type;
  41c04c:	7f30      	ldrb	r0, [r6, #28]
  41c04e:	920e      	str	r2, [sp, #56]	@ 0x38
  41c050:	68da      	ldr	r2, [r3, #12]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
  41c052:	2809      	cmp	r0, #9
  41c054:	920a      	str	r2, [sp, #40]	@ 0x28
  41c056:	689a      	ldr	r2, [r3, #8]
  const TfLiteType data_type = input->type;
  41c058:	9009      	str	r0, [sp, #36]	@ 0x24
  41c05a:	920b      	str	r2, [sp, #44]	@ 0x2c
  41c05c:	f8dc 200c 	ldr.w	r2, [ip, #12]
  41c060:	920c      	str	r2, [sp, #48]	@ 0x30
  41c062:	f8dc 2008 	ldr.w	r2, [ip, #8]
  41c066:	920d      	str	r2, [sp, #52]	@ 0x34
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
  41c068:	d03d      	beq.n	41c0e6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x106>
  41c06a:	2807      	cmp	r0, #7
  41c06c:	d02f      	beq.n	41c0ce <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xee>
  if (filter->type == kTfLiteInt4) {
  41c06e:	7f3b      	ldrb	r3, [r7, #28]
  41c070:	2b12      	cmp	r3, #18
  41c072:	d066      	beq.n	41c142 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x162>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
  41c074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  41c076:	4629      	mov	r1, r5
  41c078:	9305      	str	r3, [sp, #20]
  41c07a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  41c07c:	465a      	mov	r2, fp
  41c07e:	9304      	str	r3, [sp, #16]
  41c080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  41c082:	4640      	mov	r0, r8
  41c084:	9303      	str	r3, [sp, #12]
  41c086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41c088:	f8cd a018 	str.w	sl, [sp, #24]
  41c08c:	9302      	str	r3, [sp, #8]
  41c08e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41c090:	9301      	str	r3, [sp, #4]
  41c092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  41c094:	9300      	str	r3, [sp, #0]
  41c096:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  41c098:	f000 f94a 	bl	41c330 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
  41c09c:	4605      	mov	r5, r0
  41c09e:	b9f0      	cbnz	r0, 41c0de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
  if (input->type == kTfLiteInt8) {
  41c0a0:	7f33      	ldrb	r3, [r6, #28]
  41c0a2:	2b09      	cmp	r3, #9
  41c0a4:	f000 80c0 	beq.w	41c228 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
  micro_context->DeallocateTempTfLiteTensor(output);
  41c0a8:	6823      	ldr	r3, [r4, #0]
  41c0aa:	4649      	mov	r1, r9
  41c0ac:	4620      	mov	r0, r4
  41c0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41c0b0:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
  41c0b2:	6823      	ldr	r3, [r4, #0]
  41c0b4:	4631      	mov	r1, r6
  41c0b6:	4620      	mov	r0, r4
  41c0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41c0ba:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
  41c0bc:	6823      	ldr	r3, [r4, #0]
  41c0be:	4620      	mov	r0, r4
  41c0c0:	4639      	mov	r1, r7
  41c0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41c0c4:	4798      	blx	r3
}
  41c0c6:	4628      	mov	r0, r5
  41c0c8:	b041      	add	sp, #260	@ 0x104
  41c0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
  41c0ce:	783a      	ldrb	r2, [r7, #0]
  41c0d0:	2a01      	cmp	r2, #1
  41c0d2:	d103      	bne.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
  41c0d4:	68f2      	ldr	r2, [r6, #12]
  41c0d6:	2a00      	cmp	r2, #0
  41c0d8:	f000 8095 	beq.w	41c206 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x226>
  TF_LITE_ENSURE(context, input != nullptr);
  41c0dc:	2501      	movs	r5, #1
}
  41c0de:	4628      	mov	r0, r5
  41c0e0:	b041      	add	sp, #260	@ 0x104
  41c0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
  41c0e6:	783a      	ldrb	r2, [r7, #0]
  41c0e8:	2a01      	cmp	r2, #1
  41c0ea:	d1f7      	bne.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    const auto* affine_quantization =
  41c0ec:	687a      	ldr	r2, [r7, #4]
    TF_LITE_ENSURE(context, affine_quantization);
  41c0ee:	2a00      	cmp	r2, #0
  41c0f0:	d0f4      	beq.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    TF_LITE_ENSURE(context, affine_quantization->scale);
  41c0f2:	6811      	ldr	r1, [r2, #0]
  41c0f4:	2900      	cmp	r1, #0
  41c0f6:	d0f1      	beq.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
  41c0f8:	6850      	ldr	r0, [r2, #4]
  41c0fa:	2800      	cmp	r0, #0
  41c0fc:	d0ee      	beq.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    TF_LITE_ENSURE(
  41c0fe:	680a      	ldr	r2, [r1, #0]
  41c100:	2a01      	cmp	r2, #1
  41c102:	d006      	beq.n	41c112 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x132>
  41c104:	4947      	ldr	r1, [pc, #284]	@ (41c224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
  41c106:	6809      	ldr	r1, [r1, #0]
  41c108:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  41c10c:	6849      	ldr	r1, [r1, #4]
  41c10e:	428a      	cmp	r2, r1
  41c110:	d1e4      	bne.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
  41c112:	6801      	ldr	r1, [r0, #0]
  41c114:	428a      	cmp	r2, r1
  41c116:	d1e1      	bne.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    const int num_channels =
  41c118:	4a42      	ldr	r2, [pc, #264]	@ (41c224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
  41c11a:	4640      	mov	r0, r8
    const int num_channels =
  41c11c:	6812      	ldr	r2, [r2, #0]
  41c11e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
  41c122:	6859      	ldr	r1, [r3, #4]
  41c124:	f8d8 3034 	ldr.w	r3, [r8, #52]	@ 0x34
  41c128:	0089      	lsls	r1, r1, #2
  41c12a:	9110      	str	r1, [sp, #64]	@ 0x40
  41c12c:	4798      	blx	r3
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
  41c12e:	9910      	ldr	r1, [sp, #64]	@ 0x40
    data->reference_op_data.per_channel_output_multiplier =
  41c130:	f8ca 0024 	str.w	r0, [sl, #36]	@ 0x24
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
  41c134:	f8d8 3034 	ldr.w	r3, [r8, #52]	@ 0x34
  41c138:	4640      	mov	r0, r8
  41c13a:	4798      	blx	r3
    data->reference_op_data.per_channel_output_shift =
  41c13c:	f8ca 0028 	str.w	r0, [sl, #40]	@ 0x28
  41c140:	e795      	b.n	41c06e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
        RuntimeShape(filter->dims->size,
  41c142:	6979      	ldr	r1, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41c144:	a835      	add	r0, sp, #212	@ 0xd4
  41c146:	f851 2b04 	ldr.w	r2, [r1], #4
  41c14a:	9210      	str	r2, [sp, #64]	@ 0x40
  41c14c:	0092      	lsls	r2, r2, #2
  41c14e:	f7f4 fa35 	bl	4105bc <memcpy>
    for (int i = 0; i < size_; i++) {
  41c152:	9a10      	ldr	r2, [sp, #64]	@ 0x40
  41c154:	2a00      	cmp	r2, #0
  41c156:	dd5c      	ble.n	41c212 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x232>
  41c158:	1e53      	subs	r3, r2, #1
  41c15a:	2b04      	cmp	r3, #4
  41c15c:	f240 80ce 	bls.w	41c2fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x31c>
  41c160:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  41c164:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41c168:	f1ae 0e10 	sub.w	lr, lr, #16
  41c16c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41c170:	f10e 0e01 	add.w	lr, lr, #1
  41c174:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41c178:	f04e e001 	dls	lr, lr
  41c17c:	ab35      	add	r3, sp, #212	@ 0xd4
      buffer_size *= dims_data[i];
  41c17e:	ecb3 5f04 	ldc	15, cr5, [r3], #16
  41c182:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41c186:	f00f c007 	le	lr, 41c17e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19e>
  41c18a:	ee36 2b10 	vmov.32	r2, d6[1]
  41c18e:	ee16 3a10 	vmov	r3, s12
  41c192:	fb02 f303 	mul.w	r3, r2, r3
  41c196:	ee17 2b10 	vmov.32	r2, d7[0]
  41c19a:	fb02 f303 	mul.w	r3, r2, r3
  41c19e:	ee37 2b10 	vmov.32	r2, d7[1]
  41c1a2:	fb02 f003 	mul.w	r0, r2, r3
  41c1a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  41c1a8:	079a      	lsls	r2, r3, #30
  41c1aa:	d024      	beq.n	41c1f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x216>
  41c1ac:	f023 0303 	bic.w	r3, r3, #3
      buffer_size *= dims_data[i];
  41c1b0:	aa40      	add	r2, sp, #256	@ 0x100
  41c1b2:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
  41c1b6:	f85c 1c2c 	ldr.w	r1, [ip, #-44]
    for (int i = 0; i < size_; i++) {
  41c1ba:	9a10      	ldr	r2, [sp, #64]	@ 0x40
      buffer_size *= dims_data[i];
  41c1bc:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41c1c0:	1c59      	adds	r1, r3, #1
  41c1c2:	428a      	cmp	r2, r1
  41c1c4:	dd17      	ble.n	41c1f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x216>
      buffer_size *= dims_data[i];
  41c1c6:	f85c 1c28 	ldr.w	r1, [ip, #-40]
  41c1ca:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41c1ce:	1c99      	adds	r1, r3, #2
  41c1d0:	428a      	cmp	r2, r1
  41c1d2:	dd10      	ble.n	41c1f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x216>
      buffer_size *= dims_data[i];
  41c1d4:	f85c 1c24 	ldr.w	r1, [ip, #-36]
  41c1d8:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41c1dc:	1cd9      	adds	r1, r3, #3
  41c1de:	428a      	cmp	r2, r1
  41c1e0:	dd09      	ble.n	41c1f6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x216>
      buffer_size *= dims_data[i];
  41c1e2:	f85c 1c20 	ldr.w	r1, [ip, #-32]
    for (int i = 0; i < size_; i++) {
  41c1e6:	3304      	adds	r3, #4
      buffer_size *= dims_data[i];
  41c1e8:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41c1ec:	429a      	cmp	r2, r3
      buffer_size *= dims_data[i];
  41c1ee:	bfc4      	itt	gt
  41c1f0:	f85c 3c1c 	ldrgt.w	r3, [ip, #-28]
  41c1f4:	4358      	mulgt	r0, r3
    context->RequestScratchBufferInArena(
  41c1f6:	4601      	mov	r1, r0
  41c1f8:	4640      	mov	r0, r8
  41c1fa:	f8d8 303c 	ldr.w	r3, [r8, #60]	@ 0x3c
  41c1fe:	f10a 0234 	add.w	r2, sl, #52	@ 0x34
  41c202:	4798      	blx	r3
  41c204:	e736      	b.n	41c074 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x94>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
  41c206:	f8d9 200c 	ldr.w	r2, [r9, #12]
  41c20a:	2a00      	cmp	r2, #0
  41c20c:	f43f af6e 	beq.w	41c0ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>
  41c210:	e764      	b.n	41c0dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
    for (int i = 0; i < size_; i++) {
  41c212:	2101      	movs	r1, #1
  41c214:	e7f0      	b.n	41c1f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x218>
  41c216:	bf00      	nop
  41c218:	00435ba0 	.word	0x00435ba0
  41c21c:	00435b9c 	.word	0x00435b9c
  41c220:	00435b94 	.word	0x00435b94
  41c224:	00435b90 	.word	0x00435b90
  41c228:	6971      	ldr	r1, [r6, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41c22a:	a823      	add	r0, sp, #140	@ 0x8c
  41c22c:	f851 3b04 	ldr.w	r3, [r1], #4
  41c230:	009a      	lsls	r2, r3, #2
      : size_(dimensions_count) {
  41c232:	9322      	str	r3, [sp, #136]	@ 0x88
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41c234:	9310      	str	r3, [sp, #64]	@ 0x40
  41c236:	f7f4 f9c1 	bl	4105bc <memcpy>
  41c23a:	f8d9 1014 	ldr.w	r1, [r9, #20]
  41c23e:	a829      	add	r0, sp, #164	@ 0xa4
  41c240:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
  41c244:	9228      	str	r2, [sp, #160]	@ 0xa0
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41c246:	9209      	str	r2, [sp, #36]	@ 0x24
  41c248:	0092      	lsls	r2, r2, #2
  41c24a:	f7f4 f9b7 	bl	4105bc <memcpy>
  41c24e:	6979      	ldr	r1, [r7, #20]
  41c250:	a82f      	add	r0, sp, #188	@ 0xbc
  41c252:	f851 3b04 	ldr.w	r3, [r1], #4
  41c256:	009a      	lsls	r2, r3, #2
      : size_(dimensions_count) {
  41c258:	932e      	str	r3, [sp, #184]	@ 0xb8
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41c25a:	9311      	str	r3, [sp, #68]	@ 0x44
  41c25c:	f7f4 f9ae 	bl	4105bc <memcpy>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
  41c260:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  41c262:	2b04      	cmp	r3, #4
  41c264:	d14d      	bne.n	41c302 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x322>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
  41c266:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  41c268:	2b04      	cmp	r3, #4
  41c26a:	d14a      	bne.n	41c302 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x322>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
  41c26c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  41c26e:	2a04      	cmp	r2, #4
  41c270:	d147      	bne.n	41c302 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x322>
    return dims_[i];
  41c272:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
  41c274:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
  41c276:	4293      	cmp	r3, r2
  41c278:	d143      	bne.n	41c302 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x322>
  41c27a:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
  41c27c:	9932      	ldr	r1, [sp, #200]	@ 0xc8
  41c27e:	428a      	cmp	r2, r1
  41c280:	d13f      	bne.n	41c302 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x322>
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
  41c282:	2b01      	cmp	r3, #1
  41c284:	d13d      	bne.n	41c302 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x322>
    filter_dims.c = output_depth;
  41c286:	e9cd 231d 	strd	r2, r3, [sp, #116]	@ 0x74
    input_dims.n = batch_size;
  41c28a:	9316      	str	r3, [sp, #88]	@ 0x58
    filter_dims.n = 1;
  41c28c:	931a      	str	r3, [sp, #104]	@ 0x68
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
  41c28e:	f8da 3000 	ldr.w	r3, [sl]
    input_dims.h = input_height;
  41c292:	990e      	ldr	r1, [sp, #56]	@ 0x38
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
  41c294:	9312      	str	r3, [sp, #72]	@ 0x48
  41c296:	f8da 3004 	ldr.w	r3, [sl, #4]
    input_dims.h = input_height;
  41c29a:	9117      	str	r1, [sp, #92]	@ 0x5c
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
  41c29c:	9313      	str	r3, [sp, #76]	@ 0x4c
  41c29e:	f8db 3014 	ldr.w	r3, [fp, #20]
    input_dims.w = input_width;
  41c2a2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
  41c2a4:	9314      	str	r3, [sp, #80]	@ 0x50
  41c2a6:	f8db 3018 	ldr.w	r3, [fp, #24]
    input_dims.w = input_width;
  41c2aa:	9118      	str	r1, [sp, #96]	@ 0x60
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
  41c2ac:	9315      	str	r3, [sp, #84]	@ 0x54
  41c2ae:	ed9d 7f12 	ldc	15, cr7, [sp, #72]	@ 0x48
    filter_dims.h = filter_height;
  41c2b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
    input_dims.c = input_shape.Dims(3);
  41c2b4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
    filter_dims.h = filter_height;
  41c2b6:	911b      	str	r1, [sp, #108]	@ 0x6c
    filter_dims.w = filter_width;
  41c2b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
    output_dims.c = output_depth;
  41c2ba:	9221      	str	r2, [sp, #132]	@ 0x84
    filter_dims.w = filter_width;
  41c2bc:	911c      	str	r1, [sp, #112]	@ 0x70
    output_dims.h = output_height;
  41c2be:	990d      	ldr	r1, [sp, #52]	@ 0x34
    input_dims.c = input_shape.Dims(3);
  41c2c0:	9319      	str	r3, [sp, #100]	@ 0x64
    output_dims.h = output_height;
  41c2c2:	911f      	str	r1, [sp, #124]	@ 0x7c
    output_dims.w = output_width;
  41c2c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
  41c2c6:	ab1e      	add	r3, sp, #120	@ 0x78
    output_dims.w = output_width;
  41c2c8:	9120      	str	r1, [sp, #128]	@ 0x80
    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
  41c2ca:	aa1a      	add	r2, sp, #104	@ 0x68
  41c2cc:	a916      	add	r1, sp, #88	@ 0x58
  41c2ce:	a834      	add	r0, sp, #208	@ 0xd0
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
  41c2d0:	ed8d 7f39 	stc	15, cr7, [sp, #228]	@ 0xe4
    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
  41c2d4:	f7f6 fcf8 	bl	412cc8 <arm_depthwise_conv_wrapper_s8_get_buffer_size>
    if (buf_size > 0) {
  41c2d8:	1e01      	subs	r1, r0, #0
  41c2da:	dd0a      	ble.n	41c2f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x312>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
  41c2dc:	4640      	mov	r0, r8
  41c2de:	f8d8 303c 	ldr.w	r3, [r8, #60]	@ 0x3c
  41c2e2:	f10a 0238 	add.w	r2, sl, #56	@ 0x38
  41c2e6:	4798      	blx	r3
  41c2e8:	2800      	cmp	r0, #0
  41c2ea:	f43f aedd 	beq.w	41c0a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  41c2ee:	4605      	mov	r5, r0
  41c2f0:	e6f5      	b.n	41c0de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
      data->buffer_idx = -1;
  41c2f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  41c2f6:	f8ca 3038 	str.w	r3, [sl, #56]	@ 0x38
  ~RuntimeShape() {}
  41c2fa:	e6d5      	b.n	41c0a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    int buffer_size = 1;
  41c2fc:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
  41c2fe:	2300      	movs	r3, #0
  41c300:	e756      	b.n	41c1b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d0>
  TFLITE_DCHECK(node->user_data != nullptr);
  41c302:	f002 ff49 	bl	41f198 <abort>
  41c306:	bf00      	nop

0041c308 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
  41c308:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
  41c30a:	2400      	movs	r4, #0
TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
  41c30c:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
  41c30e:	9400      	str	r4, [sp, #0]
TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
  41c310:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
  41c312:	4b04      	ldr	r3, [pc, #16]	@ (41c324 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x1c>)
  41c314:	4a04      	ldr	r2, [pc, #16]	@ (41c328 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x20>)
  41c316:	4905      	ldr	r1, [pc, #20]	@ (41c32c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x24>)
  41c318:	f000 f90e 	bl	41c538 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
  41c31c:	4620      	mov	r0, r4
  41c31e:	b002      	add	sp, #8
  41c320:	bd10      	pop	{r4, pc}
  41c322:	bf00      	nop
  41c324:	0041bf09 	.word	0x0041bf09
  41c328:	0041bfe1 	.word	0x0041bfe1
  41c32c:	0041ba79 	.word	0x0041ba79

0041c330 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
  41c330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41c334:	4615      	mov	r5, r2
  bool has_bias = node->inputs->size == 3;
  41c336:	680a      	ldr	r2, [r1, #0]
    const TfLiteType data_type, OpDataConv* data) {
  41c338:	460c      	mov	r4, r1
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  41c33a:	6811      	ldr	r1, [r2, #0]
    const TfLiteType data_type, OpDataConv* data) {
  41c33c:	b08f      	sub	sp, #60	@ 0x3c
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  41c33e:	3902      	subs	r1, #2
  41c340:	2901      	cmp	r1, #1
    const TfLiteType data_type, OpDataConv* data) {
  41c342:	f89d 7074 	ldrb.w	r7, [sp, #116]	@ 0x74
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
  41c346:	d903      	bls.n	41c350 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20>
  41c348:	2001      	movs	r0, #1
  micro_context->DeallocateTempTfLiteTensor(filter);
  micro_context->DeallocateTempTfLiteTensor(bias);
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
  41c34a:	b00f      	add	sp, #60	@ 0x3c
  41c34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
  41c350:	6862      	ldr	r2, [r4, #4]
  41c352:	6812      	ldr	r2, [r2, #0]
  41c354:	2a01      	cmp	r2, #1
  41c356:	d1f7      	bne.n	41c348 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      params.stride_height, params.stride_width, params.dilation_height_factor,
  41c358:	e9d5 e801 	ldrd	lr, r8, [r5, #4]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
  41c35c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
  41c35e:	4606      	mov	r6, r0
  41c360:	e9d5 1005 	ldrd	r1, r0, [r5, #20]
  41c364:	3a01      	subs	r2, #1
  41c366:	fb01 f202 	mul.w	r2, r1, r2
  41c36a:	991a      	ldr	r1, [sp, #104]	@ 0x68
  auto padding = params.padding;
  41c36c:	f895 c000 	ldrb.w	ip, [r5]
  41c370:	3901      	subs	r1, #1
  41c372:	fb00 f101 	mul.w	r1, r0, r1
  41c376:	f102 0901 	add.w	r9, r2, #1
  41c37a:	3101      	adds	r1, #1
  if (stride == 0) return 0;
  41c37c:	f1be 0f00 	cmp.w	lr, #0
  41c380:	d013      	beq.n	41c3aa <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7a>
  switch (padding) {
  41c382:	f1bc 0f01 	cmp.w	ip, #1
  41c386:	f000 80ba 	beq.w	41c4fe <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
  41c38a:	f1bc 0f02 	cmp.w	ip, #2
  41c38e:	d122      	bne.n	41c3d6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa6>
      return (image_size + stride - effective_filter_size) / stride;
  41c390:	eb0e 0003 	add.w	r0, lr, r3
  41c394:	eba0 0009 	sub.w	r0, r0, r9
  41c398:	fb90 f0fe 	sdiv	r0, r0, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
  41c39c:	3801      	subs	r0, #1
  if (stride == 0) return 0;
  41c39e:	f1b8 0f00 	cmp.w	r8, #0
  41c3a2:	d10e      	bne.n	41c3c2 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x92>
  41c3a4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
  41c3a8:	e018      	b.n	41c3dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xac>
  41c3aa:	f1b8 0f00 	cmp.w	r8, #0
  41c3ae:	d012      	beq.n	41c3d6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xa6>
  switch (padding) {
  41c3b0:	f1bc 0f01 	cmp.w	ip, #1
  41c3b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  41c3b8:	f000 80ab 	beq.w	41c512 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e2>
  41c3bc:	f1bc 0f02 	cmp.w	ip, #2
  41c3c0:	d10b      	bne.n	41c3da <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xaa>
      return (image_size + stride - effective_filter_size) / stride;
  41c3c2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  41c3c4:	eb08 0c02 	add.w	ip, r8, r2
  41c3c8:	ebac 0c01 	sub.w	ip, ip, r1
  41c3cc:	fb9c fcf8 	sdiv	ip, ip, r8
      ((out_size - 1) * stride + effective_filter_size - in_size);
  41c3d0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
      return (image_size + stride - effective_filter_size) / stride;
  41c3d4:	e002      	b.n	41c3dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xac>
  41c3d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  41c3da:	4684      	mov	ip, r0
      ((out_size - 1) * stride + effective_filter_size - in_size);
  41c3dc:	fb00 920e 	mla	r2, r0, lr, r9
  41c3e0:	fb0c 1108 	mla	r1, ip, r8, r1
  int total_padding =
  41c3e4:	1ad3      	subs	r3, r2, r3
  41c3e6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  total_padding = total_padding > 0 ? total_padding : 0;
  41c3e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  int total_padding =
  41c3ec:	1a89      	subs	r1, r1, r2
  total_padding = total_padding > 0 ? total_padding : 0;
  41c3ee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  return total_padding / 2;
  41c3f2:	105a      	asrs	r2, r3, #1
  data->padding = ComputePaddingHeightWidth(
  41c3f4:	920a      	str	r2, [sp, #40]	@ 0x28
  *offset = total_padding % 2;
  41c3f6:	f003 0301 	and.w	r3, r3, #1
  return total_padding / 2;
  41c3fa:	104a      	asrs	r2, r1, #1
  *offset = total_padding % 2;
  41c3fc:	f001 0101 	and.w	r1, r1, #1
  41c400:	930c      	str	r3, [sp, #48]	@ 0x30
  41c402:	920b      	str	r2, [sp, #44]	@ 0x2c
  41c404:	910d      	str	r1, [sp, #52]	@ 0x34
  41c406:	ed9d 7f0a 	ldc	15, cr7, [sp, #40]	@ 0x28
  41c40a:	f8d6 8008 	ldr.w	r8, [r6, #8]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
  41c40e:	4b46      	ldr	r3, [pc, #280]	@ (41c528 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
  41c410:	4621      	mov	r1, r4
  41c412:	681a      	ldr	r2, [r3, #0]
  41c414:	f8d8 3000 	ldr.w	r3, [r8]
  41c418:	4640      	mov	r0, r8
  41c41a:	f8d3 c018 	ldr.w	ip, [r3, #24]
  data->padding = ComputePaddingHeightWidth(
  41c41e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41c420:	ed83 7f00 	stc	15, cr7, [r3]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
  41c424:	47e0      	blx	ip
  TF_LITE_ENSURE(context, input != nullptr);
  41c426:	4681      	mov	r9, r0
  41c428:	2800      	cmp	r0, #0
  41c42a:	d08d      	beq.n	41c348 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
  41c42c:	4b3f      	ldr	r3, [pc, #252]	@ (41c52c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
  41c42e:	4621      	mov	r1, r4
  41c430:	681a      	ldr	r2, [r3, #0]
  41c432:	f8d8 3000 	ldr.w	r3, [r8]
  41c436:	4640      	mov	r0, r8
  41c438:	699b      	ldr	r3, [r3, #24]
  41c43a:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
  41c43c:	4682      	mov	sl, r0
  41c43e:	2800      	cmp	r0, #0
  41c440:	d082      	beq.n	41c348 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
  41c442:	4b3b      	ldr	r3, [pc, #236]	@ (41c530 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
  41c444:	4621      	mov	r1, r4
  41c446:	681a      	ldr	r2, [r3, #0]
  41c448:	f8d8 3000 	ldr.w	r3, [r8]
  41c44c:	4640      	mov	r0, r8
  41c44e:	699b      	ldr	r3, [r3, #24]
  41c450:	4798      	blx	r3
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
  41c452:	4b38      	ldr	r3, [pc, #224]	@ (41c534 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
  41c454:	4621      	mov	r1, r4
  41c456:	681a      	ldr	r2, [r3, #0]
  41c458:	f8d8 3000 	ldr.w	r3, [r8]
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
  41c45c:	4683      	mov	fp, r0
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
  41c45e:	69db      	ldr	r3, [r3, #28]
  41c460:	4640      	mov	r0, r8
  41c462:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
  41c464:	4604      	mov	r4, r0
  41c466:	2800      	cmp	r0, #0
  41c468:	f43f af6e 	beq.w	41c348 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
  if (data_type != kTfLiteFloat32) {
  41c46c:	2f01      	cmp	r7, #1
  41c46e:	d021      	beq.n	41c4b4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x184>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
  41c470:	f8da 3014 	ldr.w	r3, [sl, #20]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
  41c474:	3510      	adds	r5, #16
  41c476:	691b      	ldr	r3, [r3, #16]
  41c478:	9501      	str	r5, [sp, #4]
  41c47a:	9308      	str	r3, [sp, #32]
  41c47c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41c47e:	9400      	str	r4, [sp, #0]
  41c480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  41c482:	4630      	mov	r0, r6
  41c484:	9307      	str	r3, [sp, #28]
  41c486:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41c488:	4652      	mov	r2, sl
  41c48a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41c48c:	4649      	mov	r1, r9
  41c48e:	9306      	str	r3, [sp, #24]
  41c490:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41c492:	3330      	adds	r3, #48	@ 0x30
  41c494:	9305      	str	r3, [sp, #20]
  41c496:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41c498:	332c      	adds	r3, #44	@ 0x2c
  41c49a:	9304      	str	r3, [sp, #16]
  41c49c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41c49e:	3320      	adds	r3, #32
  41c4a0:	9303      	str	r3, [sp, #12]
  41c4a2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  41c4a4:	331c      	adds	r3, #28
  41c4a6:	9302      	str	r3, [sp, #8]
  41c4a8:	465b      	mov	r3, fp
  41c4aa:	f7fa ffd1 	bl	417450 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
  41c4ae:	2800      	cmp	r0, #0
  41c4b0:	f47f af4b 	bne.w	41c34a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a>
  data->input_zero_point = input->params.zero_point;
  41c4b4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
  41c4b6:	f8d9 300c 	ldr.w	r3, [r9, #12]
  micro_context->DeallocateTempTfLiteTensor(input);
  41c4ba:	4649      	mov	r1, r9
  data->input_zero_point = input->params.zero_point;
  41c4bc:	6113      	str	r3, [r2, #16]
  data->filter_zero_point = filter->params.zero_point;
  41c4be:	f8da 300c 	ldr.w	r3, [sl, #12]
  micro_context->DeallocateTempTfLiteTensor(input);
  41c4c2:	4640      	mov	r0, r8
  data->filter_zero_point = filter->params.zero_point;
  41c4c4:	6153      	str	r3, [r2, #20]
  data->output_zero_point = output->params.zero_point;
  41c4c6:	68e3      	ldr	r3, [r4, #12]
  41c4c8:	6193      	str	r3, [r2, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
  41c4ca:	f8d8 3000 	ldr.w	r3, [r8]
  41c4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41c4d0:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
  41c4d2:	f8d8 3000 	ldr.w	r3, [r8]
  41c4d6:	4651      	mov	r1, sl
  41c4d8:	4640      	mov	r0, r8
  41c4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41c4dc:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(bias);
  41c4de:	f8d8 3000 	ldr.w	r3, [r8]
  41c4e2:	4659      	mov	r1, fp
  41c4e4:	4640      	mov	r0, r8
  41c4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41c4e8:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
  41c4ea:	f8d8 3000 	ldr.w	r3, [r8]
  41c4ee:	4640      	mov	r0, r8
  41c4f0:	4621      	mov	r1, r4
  41c4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41c4f4:	4798      	blx	r3
  return kTfLiteOk;
  41c4f6:	2000      	movs	r0, #0
}
  41c4f8:	b00f      	add	sp, #60	@ 0x3c
  41c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (image_size + stride - 1) / stride;
  41c4fe:	eb0e 0003 	add.w	r0, lr, r3
  41c502:	3801      	subs	r0, #1
  41c504:	fb90 f0fe 	sdiv	r0, r0, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
  41c508:	3801      	subs	r0, #1
  if (stride == 0) return 0;
  41c50a:	f1b8 0f00 	cmp.w	r8, #0
  41c50e:	f43f af49 	beq.w	41c3a4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x74>
      return (image_size + stride - 1) / stride;
  41c512:	9a18      	ldr	r2, [sp, #96]	@ 0x60
  41c514:	eb08 0c02 	add.w	ip, r8, r2
  41c518:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
  41c51c:	fb9c fcf8 	sdiv	ip, ip, r8
      ((out_size - 1) * stride + effective_filter_size - in_size);
  41c520:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
      return (image_size + stride - 1) / stride;
  41c524:	e75a      	b.n	41c3dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xac>
  41c526:	bf00      	nop
  41c528:	00435b8c 	.word	0x00435b8c
  41c52c:	00435b88 	.word	0x00435b88
  41c530:	00435b84 	.word	0x00435b84
  41c534:	00435b80 	.word	0x00435b80

0041c538 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:

TfLiteRegistration RegisterOp(
    void* (*init)(TfLiteContext* context, const char* buffer, size_t length),
    TfLiteStatus (*prepare)(TfLiteContext* context, TfLiteNode* node),
    TfLiteStatus (*invoke)(TfLiteContext* context, TfLiteNode* node),
    void (*free)(TfLiteContext* context, void* buffer)) {
  41c538:	b410      	push	{r4}
  41c53a:	b085      	sub	sp, #20
  41c53c:	9c06      	ldr	r4, [sp, #24]
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
  41c53e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  41c542:	9401      	str	r4, [sp, #4]
  41c544:	9100      	str	r1, [sp, #0]
  41c546:	2400      	movs	r4, #0
  41c548:	ed9d 7f00 	ldc	15, cr7, [sp]
  41c54c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  41c550:	ed80 7f00 	stc	15, cr7, [r0]
  41c554:	e9c0 4407 	strd	r4, r4, [r0, #28]
  41c558:	6104      	str	r4, [r0, #16]
}
  41c55a:	b005      	add	sp, #20
  41c55c:	f85d 4b04 	ldr.w	r4, [sp], #4
  41c560:	4770      	bx	lr
  41c562:	bf00      	nop

0041c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
  return context->GetEvalTensor(context, node->inputs->data[index]);
}

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
  41c564:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
  41c566:	b1a8      	cbz	r0, 41c594 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x30>
  TFLITE_DCHECK(node != nullptr);
  41c568:	b1a1      	cbz	r1, 41c594 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x30>
      context, index, node->inputs->size, node->inputs->data);
  41c56a:	6809      	ldr	r1, [r1, #0]
  if (index >= 0 && index < max_size) {
  41c56c:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
  41c56e:	468c      	mov	ip, r1
  41c570:	f85c 4b04 	ldr.w	r4, [ip], #4
  if (index >= 0 && index < max_size) {
  41c574:	db0c      	blt.n	41c590 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
  41c576:	42a2      	cmp	r2, r4
  41c578:	da0a      	bge.n	41c590 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
  if (tensor_index < 0) {
  41c57a:	f85c 4022 	ldr.w	r4, [ip, r2, lsl #2]
  41c57e:	2c00      	cmp	r4, #0
  41c580:	db06      	blt.n	41c590 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
  return GetMutableEvalInput(context, node, index);
}
  41c582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
  41c586:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  41c58a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  41c58c:	6849      	ldr	r1, [r1, #4]
  41c58e:	4718      	bx	r3
}
  41c590:	2000      	movs	r0, #0
  41c592:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(context != nullptr);
  41c594:	f002 fe00 	bl	41f198 <abort>

0041c598 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
  41c598:	b130      	cbz	r0, 41c5a8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x10>
  TFLITE_DCHECK(node != nullptr);
  41c59a:	b129      	cbz	r1, 41c5a8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x10>
  return context->GetEvalTensor(context, node->outputs->data[index]);
  41c59c:	6849      	ldr	r1, [r1, #4]
  41c59e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  41c5a0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  41c5a4:	6851      	ldr	r1, [r2, #4]
  41c5a6:	4718      	bx	r3
                                const TfLiteNode* node, int index) {
  41c5a8:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
  41c5aa:	f002 fdf5 	bl	41f198 <abort>
  41c5ae:	bf00      	nop

0041c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
  41c5b0:	b510      	push	{r4, lr}
  41c5b2:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
  41c5b4:	b151      	cbz	r1, 41c5cc <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1c>
  41c5b6:	6849      	ldr	r1, [r1, #4]
  41c5b8:	b141      	cbz	r1, 41c5cc <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1c>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  41c5ba:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
  41c5be:	f840 2b04 	str.w	r2, [r0], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41c5c2:	0092      	lsls	r2, r2, #2
  41c5c4:	f7f3 fffa 	bl	4105bc <memcpy>
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
  41c5c8:	4620      	mov	r0, r4
  41c5ca:	bd10      	pop	{r4, pc}
  RuntimeShape() : size_(0) {}
  41c5cc:	2300      	movs	r3, #0
  41c5ce:	4620      	mov	r0, r4
  41c5d0:	6023      	str	r3, [r4, #0]
  41c5d2:	bd10      	pop	{r4, pc}

0041c5d4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
  41c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41c5d8:	461d      	mov	r5, r3
  if (tensor->type != kTfLiteInt4) {
  41c5da:	7a1b      	ldrb	r3, [r3, #8]
                                        const TfLiteEvalTensor* tensor) {
  41c5dc:	4604      	mov	r4, r0
  if (tensor->type != kTfLiteInt4) {
  41c5de:	2b12      	cmp	r3, #18
                                        const TfLiteEvalTensor* tensor) {
  41c5e0:	b086      	sub	sp, #24
  if (tensor->type != kTfLiteInt4) {
  41c5e2:	d007      	beq.n	41c5f4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x20>
    return *tensor;
  41c5e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  41c5e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
}
  41c5ec:	4620      	mov	r0, r4
  41c5ee:	b006      	add	sp, #24
  41c5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  new_tensor.data.data = static_cast<int8_t*>(
  41c5f4:	4608      	mov	r0, r1
      context->GetScratchBuffer(context, scratch_buffer_index));
  41c5f6:	4611      	mov	r1, r2
  41c5f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  41c5fa:	4798      	blx	r3
  new_tensor.dims = tensor->dims;
  41c5fc:	686f      	ldr	r7, [r5, #4]
      context->GetScratchBuffer(context, scratch_buffer_index));
  41c5fe:	4606      	mov	r6, r0
  return reinterpret_cast<const T*>(tensor->data.raw);
  41c600:	f8d5 8000 	ldr.w	r8, [r5]
  if (tensor == nullptr || tensor->dims == nullptr) {
  41c604:	2f00      	cmp	r7, #0
  41c606:	d061      	beq.n	41c6cc <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0xf8>
  const int dims_size = dims->size;
  41c608:	4639      	mov	r1, r7
  41c60a:	f851 5b04 	ldr.w	r5, [r1], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41c60e:	a801      	add	r0, sp, #4
  41c610:	00aa      	lsls	r2, r5, #2
  41c612:	f7f3 ffd3 	bl	4105bc <memcpy>
    for (int i = 0; i < size_; i++) {
  41c616:	2d00      	cmp	r5, #0
  41c618:	dd58      	ble.n	41c6cc <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0xf8>
  41c61a:	1e6b      	subs	r3, r5, #1
  41c61c:	2b04      	cmp	r3, #4
  41c61e:	d957      	bls.n	41c6d0 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0xfc>
  41c620:	ea4f 0e95 	mov.w	lr, r5, lsr #2
  41c624:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41c628:	f1ae 0e10 	sub.w	lr, lr, #16
  41c62c:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41c630:	f10e 0e01 	add.w	lr, lr, #1
  41c634:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41c638:	f04e e001 	dls	lr, lr
  41c63c:	ab01      	add	r3, sp, #4
      buffer_size *= dims_data[i];
  41c63e:	ecb3 5f04 	ldc	15, cr5, [r3], #16
  41c642:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41c646:	f00f c007 	le	lr, 41c63e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x6a>
  41c64a:	ee36 3b10 	vmov.32	r3, d6[1]
  41c64e:	ee16 1a10 	vmov	r1, s12
  41c652:	fb03 f101 	mul.w	r1, r3, r1
  41c656:	ee17 3b10 	vmov.32	r3, d7[0]
  41c65a:	fb03 f101 	mul.w	r1, r3, r1
  41c65e:	ee37 3b10 	vmov.32	r3, d7[1]
  41c662:	07aa      	lsls	r2, r5, #30
  41c664:	fb03 f101 	mul.w	r1, r3, r1
  41c668:	f025 0303 	bic.w	r3, r5, #3
  41c66c:	d022      	beq.n	41c6b4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0xe0>
      buffer_size *= dims_data[i];
  41c66e:	aa06      	add	r2, sp, #24
  41c670:	eb02 0083 	add.w	r0, r2, r3, lsl #2
  41c674:	f850 2c14 	ldr.w	r2, [r0, #-20]
  41c678:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
  41c67c:	1c5a      	adds	r2, r3, #1
  41c67e:	42aa      	cmp	r2, r5
  41c680:	da18      	bge.n	41c6b4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0xe0>
      buffer_size *= dims_data[i];
  41c682:	f850 2c10 	ldr.w	r2, [r0, #-16]
  41c686:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
  41c68a:	1c9a      	adds	r2, r3, #2
  41c68c:	4295      	cmp	r5, r2
  41c68e:	dd11      	ble.n	41c6b4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0xe0>
      buffer_size *= dims_data[i];
  41c690:	f850 2c0c 	ldr.w	r2, [r0, #-12]
  41c694:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
  41c698:	1cda      	adds	r2, r3, #3
  41c69a:	4295      	cmp	r5, r2
  41c69c:	dd0a      	ble.n	41c6b4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0xe0>
      buffer_size *= dims_data[i];
  41c69e:	f850 2c08 	ldr.w	r2, [r0, #-8]
    for (int i = 0; i < size_; i++) {
  41c6a2:	3304      	adds	r3, #4
  41c6a4:	429d      	cmp	r5, r3
      buffer_size *= dims_data[i];
  41c6a6:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
  41c6aa:	dd03      	ble.n	41c6b4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0xe0>
      buffer_size *= dims_data[i];
  41c6ac:	f850 3c04 	ldr.w	r3, [r0, #-4]
  41c6b0:	fb03 f101 	mul.w	r1, r3, r1
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
  41c6b4:	4640      	mov	r0, r8
  41c6b6:	4632      	mov	r2, r6
  41c6b8:	f7fa ffec 	bl	417694 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
  return new_tensor;
  41c6bc:	2309      	movs	r3, #9
}
  41c6be:	4620      	mov	r0, r4
  return new_tensor;
  41c6c0:	e9c4 6700 	strd	r6, r7, [r4]
  41c6c4:	7223      	strb	r3, [r4, #8]
}
  41c6c6:	b006      	add	sp, #24
  41c6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int buffer_size = 1;
  41c6cc:	2101      	movs	r1, #1
  41c6ce:	e7f1      	b.n	41c6b4 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0xe0>
  41c6d0:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
  41c6d2:	2300      	movs	r3, #0
  41c6d4:	e7cb      	b.n	41c66e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x9a>
  41c6d6:	bf00      	nop

0041c6d8 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  PadParams params;
  int32_t output_zero_point;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  41c6d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  41c6da:	b10b      	cbz	r3, 41c6e0 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
  41c6dc:	2138      	movs	r1, #56	@ 0x38
  41c6de:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  41c6e0:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  41c6e2:	f002 fd59 	bl	41f198 <abort>
  41c6e6:	bf00      	nop

0041c6e8 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode>:
  return kTfLiteOk;
}

}  // namespace

TfLiteStatus PadPrepare(TfLiteContext* context, TfLiteNode* node) {
  41c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MicroContext* micro_context = GetMicroContext(context);

  TFLITE_DCHECK(node->user_data != nullptr);
  41c6ec:	68cc      	ldr	r4, [r1, #12]
  41c6ee:	6885      	ldr	r5, [r0, #8]
TfLiteStatus PadPrepare(TfLiteContext* context, TfLiteNode* node) {
  41c6f0:	b08f      	sub	sp, #60	@ 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
  41c6f2:	2c00      	cmp	r4, #0
  41c6f4:	f000 81d4 	beq.w	41caa0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x3b8>
  return node->inputs == nullptr ? 0 : node->inputs->size;
  41c6f8:	680b      	ldr	r3, [r1, #0]
  41c6fa:	4689      	mov	r9, r1
  41c6fc:	b11b      	cbz	r3, 41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
  41c6fe:	681b      	ldr	r3, [r3, #0]
  41c700:	3b02      	subs	r3, #2
  41c702:	2b01      	cmp	r3, #1
  41c704:	d903      	bls.n	41c70e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x26>
  41c706:	2001      	movs	r0, #1
    micro_context->DeallocateTempTfLiteTensor(constant_values);
  }
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
  41c708:	b00f      	add	sp, #60	@ 0x3c
  41c70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return node->outputs == nullptr ? 0 : node->outputs->size;
  41c70e:	684b      	ldr	r3, [r1, #4]
  41c710:	2b00      	cmp	r3, #0
  41c712:	d0f8      	beq.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  41c714:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  41c716:	2e01      	cmp	r6, #1
  41c718:	d1f5      	bne.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
      micro_context->AllocateTempInputTensor(node, /*index=*/0);
  41c71a:	682b      	ldr	r3, [r5, #0]
  41c71c:	2200      	movs	r2, #0
  41c71e:	4628      	mov	r0, r5
  41c720:	699b      	ldr	r3, [r3, #24]
  41c722:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
  41c724:	4607      	mov	r7, r0
  41c726:	2800      	cmp	r0, #0
  41c728:	d0ed      	beq.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
      micro_context->AllocateTempInputTensor(node, /*index=*/1);
  41c72a:	682b      	ldr	r3, [r5, #0]
  41c72c:	4632      	mov	r2, r6
  41c72e:	4649      	mov	r1, r9
  41c730:	4628      	mov	r0, r5
  41c732:	699b      	ldr	r3, [r3, #24]
  41c734:	4798      	blx	r3
  TF_LITE_ENSURE(context, paddings != nullptr);
  41c736:	4680      	mov	r8, r0
  41c738:	2800      	cmp	r0, #0
  41c73a:	d0e4      	beq.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  return node->inputs == nullptr ? 0 : node->inputs->size;
  41c73c:	f8d9 a000 	ldr.w	sl, [r9]
  41c740:	f1ba 0f00 	cmp.w	sl, #0
  41c744:	d006      	beq.n	41c754 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
          ? micro_context->AllocateTempInputTensor(node, /*index=*/2)
  41c746:	f8da 3000 	ldr.w	r3, [sl]
  41c74a:	2b03      	cmp	r3, #3
  41c74c:	f000 80c0 	beq.w	41c8d0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e8>
  41c750:	f04f 0a00 	mov.w	sl, #0
      micro_context->AllocateTempOutputTensor(node, /*index=*/0);
  41c754:	682b      	ldr	r3, [r5, #0]
  41c756:	4649      	mov	r1, r9
  41c758:	2200      	movs	r2, #0
  41c75a:	4628      	mov	r0, r5
  41c75c:	69db      	ldr	r3, [r3, #28]
  41c75e:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
  41c760:	4681      	mov	r9, r0
  41c762:	2800      	cmp	r0, #0
  41c764:	d0cf      	beq.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
  41c766:	f897 b01c 	ldrb.w	fp, [r7, #28]
  41c76a:	7f03      	ldrb	r3, [r0, #28]
  41c76c:	455b      	cmp	r3, fp
  41c76e:	d1ca      	bne.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
  41c770:	697b      	ldr	r3, [r7, #20]
  41c772:	9300      	str	r3, [sp, #0]
  41c774:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE(context, NumDimensions(input) <=
  41c776:	2b05      	cmp	r3, #5
  41c778:	9301      	str	r3, [sp, #4]
  41c77a:	dcc4      	bgt.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  if (constant_values != nullptr) {
  41c77c:	f1ba 0f00 	cmp.w	sl, #0
  41c780:	d01c      	beq.n	41c7bc <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xd4>
    TF_LITE_ENSURE_EQ(context, input->type, constant_values->type);
  41c782:	f89a 301c 	ldrb.w	r3, [sl, #28]
  41c786:	455b      	cmp	r3, fp
  41c788:	d1bd      	bne.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  return NumElements(t->dims);
  41c78a:	f8da 2014 	ldr.w	r2, [sl, #20]
  for (int i = 0; i < dims->size; ++i) {
  41c78e:	6813      	ldr	r3, [r2, #0]
  41c790:	2b00      	cmp	r3, #0
  41c792:	dd13      	ble.n	41c7bc <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xd4>
  41c794:	4694      	mov	ip, r2
  41c796:	f043 e001 	dls	lr, r3
  int64_t count = 1;
  41c79a:	2101      	movs	r1, #1
  41c79c:	2000      	movs	r0, #0
    count *= dims->data[i];
  41c79e:	f85c 2f04 	ldr.w	r2, [ip, #4]!
  41c7a2:	17d3      	asrs	r3, r2, #31
  41c7a4:	fb01 f303 	mul.w	r3, r1, r3
  41c7a8:	fb02 3300 	mla	r3, r2, r0, r3
  41c7ac:	fba1 1002 	umull	r1, r0, r1, r2
  41c7b0:	4418      	add	r0, r3
  for (int i = 0; i < dims->size; ++i) {
  41c7b2:	f00f c00d 	le	lr, 41c79e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xb6>
    TF_LITE_ENSURE_EQ(context, NumElements(constant_values), 1);
  41c7b6:	3901      	subs	r1, #1
  41c7b8:	4301      	orrs	r1, r0
  41c7ba:	d1a4      	bne.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  41c7bc:	f8d8 1014 	ldr.w	r1, [r8, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41c7c0:	a809      	add	r0, sp, #36	@ 0x24
  41c7c2:	f851 3b04 	ldr.w	r3, [r1], #4
  41c7c6:	009a      	lsls	r2, r3, #2
  41c7c8:	9302      	str	r3, [sp, #8]
  41c7ca:	9103      	str	r1, [sp, #12]
  41c7cc:	9204      	str	r2, [sp, #16]
  41c7ce:	f7f3 fef5 	bl	4105bc <memcpy>
    for (int i = 0; i < size_; i++) {
  41c7d2:	9b02      	ldr	r3, [sp, #8]
  41c7d4:	2b00      	cmp	r3, #0
  41c7d6:	dd96      	ble.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  41c7d8:	1e5a      	subs	r2, r3, #1
  41c7da:	2a04      	cmp	r2, #4
  41c7dc:	9205      	str	r2, [sp, #20]
  41c7de:	f240 812f 	bls.w	41ca40 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x358>
  41c7e2:	ea4f 0e93 	mov.w	lr, r3, lsr #2
  41c7e6:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41c7ea:	f1ae 0e10 	sub.w	lr, lr, #16
  41c7ee:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41c7f2:	f10e 0e01 	add.w	lr, lr, #1
  41c7f6:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41c7fa:	f04e e001 	dls	lr, lr
  41c7fe:	ab09      	add	r3, sp, #36	@ 0x24
      buffer_size *= dims_data[i];
  41c800:	ecb3 5f04 	ldc	15, cr5, [r3], #16
  41c804:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41c808:	f00f c007 	le	lr, 41c800 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x118>
  41c80c:	ee16 2a10 	vmov	r2, s12
  41c810:	ee36 3b10 	vmov.32	r3, d6[1]
  41c814:	fb02 f303 	mul.w	r3, r2, r3
  41c818:	ee17 2b10 	vmov.32	r2, d7[0]
  41c81c:	fb02 f303 	mul.w	r3, r2, r3
  41c820:	ee37 2b10 	vmov.32	r2, d7[1]
  41c824:	fb02 f003 	mul.w	r0, r2, r3
  41c828:	9a02      	ldr	r2, [sp, #8]
  41c82a:	f022 0303 	bic.w	r3, r2, #3
  41c82e:	0792      	lsls	r2, r2, #30
  41c830:	d022      	beq.n	41c878 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x190>
      buffer_size *= dims_data[i];
  41c832:	aa0e      	add	r2, sp, #56	@ 0x38
  41c834:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
  41c838:	f85c 1c14 	ldr.w	r1, [ip, #-20]
    for (int i = 0; i < size_; i++) {
  41c83c:	9a02      	ldr	r2, [sp, #8]
      buffer_size *= dims_data[i];
  41c83e:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41c842:	1c59      	adds	r1, r3, #1
  41c844:	428a      	cmp	r2, r1
  41c846:	dd17      	ble.n	41c878 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x190>
      buffer_size *= dims_data[i];
  41c848:	f85c 1c10 	ldr.w	r1, [ip, #-16]
  41c84c:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41c850:	1c99      	adds	r1, r3, #2
  41c852:	428a      	cmp	r2, r1
  41c854:	dd10      	ble.n	41c878 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x190>
      buffer_size *= dims_data[i];
  41c856:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
  41c85a:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41c85e:	1cd9      	adds	r1, r3, #3
  41c860:	428a      	cmp	r2, r1
  41c862:	dd09      	ble.n	41c878 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x190>
      buffer_size *= dims_data[i];
  41c864:	f85c 1c08 	ldr.w	r1, [ip, #-8]
    for (int i = 0; i < size_; i++) {
  41c868:	3304      	adds	r3, #4
      buffer_size *= dims_data[i];
  41c86a:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
  41c86e:	429a      	cmp	r2, r3
      buffer_size *= dims_data[i];
  41c870:	bfc4      	itt	gt
  41c872:	f85c 3c04 	ldrgt.w	r3, [ip, #-4]
  41c876:	4358      	mulgt	r0, r3
  TF_LITE_ENSURE_EQ(context, GetTensorShape(paddings).FlatSize(),
  41c878:	f8d9 2014 	ldr.w	r2, [r9, #20]
  41c87c:	6811      	ldr	r1, [r2, #0]
  41c87e:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
  41c882:	f47f af40 	bne.w	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  TF_LITE_ENSURE(context, IsConstantTensor(paddings));
  41c886:	f898 301d 	ldrb.w	r3, [r8, #29]
  41c88a:	2b01      	cmp	r3, #1
  41c88c:	f47f af3b 	bne.w	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  for (int i = 0; i < output->dims->size; i++) {
  41c890:	2900      	cmp	r1, #0
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
  41c892:	f8d8 3010 	ldr.w	r3, [r8, #16]
  41c896:	dd26      	ble.n	41c8e6 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
  41c898:	4610      	mov	r0, r2
  41c89a:	f8dd e000 	ldr.w	lr, [sp]
  41c89e:	2200      	movs	r2, #0
  41c8a0:	e9cd b506 	strd	fp, r5, [sp, #24]
  41c8a4:	f103 0c04 	add.w	ip, r3, #4
  41c8a8:	9400      	str	r4, [sp, #0]
  41c8aa:	e003      	b.n	41c8b4 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
  41c8ac:	3901      	subs	r1, #1
  41c8ae:	f102 0201 	add.w	r2, r2, #1
  41c8b2:	d015      	beq.n	41c8e0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1f8>
        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];
  41c8b4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
  41c8b8:	f853 5032 	ldr.w	r5, [r3, r2, lsl #3]
  41c8bc:	eb04 0b05 	add.w	fp, r4, r5
    int expected_dim =
  41c8c0:	f85c 4032 	ldr.w	r4, [ip, r2, lsl #3]
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
  41c8c4:	f850 5f04 	ldr.w	r5, [r0, #4]!
    int expected_dim =
  41c8c8:	445c      	add	r4, fp
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
  41c8ca:	42a5      	cmp	r5, r4
  41c8cc:	d0ee      	beq.n	41c8ac <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1c4>
  41c8ce:	e71a      	b.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
          ? micro_context->AllocateTempInputTensor(node, /*index=*/2)
  41c8d0:	682b      	ldr	r3, [r5, #0]
  41c8d2:	2202      	movs	r2, #2
  41c8d4:	4649      	mov	r1, r9
  41c8d6:	4628      	mov	r0, r5
  41c8d8:	699b      	ldr	r3, [r3, #24]
  41c8da:	4798      	blx	r3
  41c8dc:	4682      	mov	sl, r0
  41c8de:	e739      	b.n	41c754 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
  41c8e0:	9c00      	ldr	r4, [sp, #0]
  41c8e2:	e9dd b506 	ldrd	fp, r5, [sp, #24]
  data->params.resizing_category = ResizingCategory::kGenericResize;
  41c8e6:	2002      	movs	r0, #2
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41c8e8:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
  41c8ec:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
  41c8f0:	a809      	add	r0, sp, #36	@ 0x24
  41c8f2:	9300      	str	r3, [sp, #0]
  41c8f4:	f7f3 fe62 	bl	4105bc <memcpy>
    for (int i = 0; i < size_; i++) {
  41c8f8:	9b05      	ldr	r3, [sp, #20]
  41c8fa:	2b04      	cmp	r3, #4
  41c8fc:	9b00      	ldr	r3, [sp, #0]
  41c8fe:	f240 80cd 	bls.w	41ca9c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x3b4>
  41c902:	9902      	ldr	r1, [sp, #8]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41c904:	ef80 6051 	vmov.i32	q3, #1	@ 0x00000001
  41c908:	ea4f 0e91 	mov.w	lr, r1, lsr #2
  41c90c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41c910:	f1ae 0e10 	sub.w	lr, lr, #16
  41c914:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41c918:	f10e 0e01 	add.w	lr, lr, #1
  41c91c:	f04e e001 	dls	lr, lr
  41c920:	aa09      	add	r2, sp, #36	@ 0x24
      buffer_size *= dims_data[i];
  41c922:	ecb2 5f04 	ldc	15, cr5, [r2], #16
  41c926:	ef26 6954 	vmul.i32	q3, q3, q2
    for (int i = 0; i < size_; i++) {
  41c92a:	f00f c007 	le	lr, 41c922 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x23a>
  41c92e:	ee16 2a10 	vmov	r2, s12
  41c932:	ee36 6b10 	vmov.32	r6, d6[1]
  41c936:	fb02 f606 	mul.w	r6, r2, r6
  41c93a:	ee17 2b10 	vmov.32	r2, d7[0]
  41c93e:	fb02 f606 	mul.w	r6, r2, r6
  41c942:	ee37 2b10 	vmov.32	r2, d7[1]
  41c946:	9902      	ldr	r1, [sp, #8]
  41c948:	fb02 f606 	mul.w	r6, r2, r6
  41c94c:	f021 0203 	bic.w	r2, r1, #3
  41c950:	0789      	lsls	r1, r1, #30
  41c952:	d022      	beq.n	41c99a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
      buffer_size *= dims_data[i];
  41c954:	a90e      	add	r1, sp, #56	@ 0x38
  41c956:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
  41c95a:	f85c 0c14 	ldr.w	r0, [ip, #-20]
    for (int i = 0; i < size_; i++) {
  41c95e:	9902      	ldr	r1, [sp, #8]
      buffer_size *= dims_data[i];
  41c960:	fb00 f606 	mul.w	r6, r0, r6
    for (int i = 0; i < size_; i++) {
  41c964:	1c50      	adds	r0, r2, #1
  41c966:	4281      	cmp	r1, r0
  41c968:	dd17      	ble.n	41c99a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
      buffer_size *= dims_data[i];
  41c96a:	f85c 0c10 	ldr.w	r0, [ip, #-16]
  41c96e:	fb00 f606 	mul.w	r6, r0, r6
    for (int i = 0; i < size_; i++) {
  41c972:	1c90      	adds	r0, r2, #2
  41c974:	4281      	cmp	r1, r0
  41c976:	dd10      	ble.n	41c99a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
      buffer_size *= dims_data[i];
  41c978:	f85c 0c0c 	ldr.w	r0, [ip, #-12]
  41c97c:	fb00 f606 	mul.w	r6, r0, r6
    for (int i = 0; i < size_; i++) {
  41c980:	1cd0      	adds	r0, r2, #3
  41c982:	4281      	cmp	r1, r0
  41c984:	dd09      	ble.n	41c99a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
      buffer_size *= dims_data[i];
  41c986:	f85c 0c08 	ldr.w	r0, [ip, #-8]
    for (int i = 0; i < size_; i++) {
  41c98a:	3204      	adds	r2, #4
      buffer_size *= dims_data[i];
  41c98c:	fb00 f606 	mul.w	r6, r0, r6
    for (int i = 0; i < size_; i++) {
  41c990:	4291      	cmp	r1, r2
      buffer_size *= dims_data[i];
  41c992:	bfc4      	itt	gt
  41c994:	f85c 2c04 	ldrgt.w	r2, [ip, #-4]
  41c998:	4356      	mulgt	r6, r2
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
  41c99a:	2e08      	cmp	r6, #8
  41c99c:	d069      	beq.n	41ca72 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x38a>
  data->params.left_padding_count = num_input_dimensions;
  41c99e:	9901      	ldr	r1, [sp, #4]
  41c9a0:	b24a      	sxtb	r2, r1
  41c9a2:	7022      	strb	r2, [r4, #0]
  data->params.right_padding_count = num_input_dimensions;
  41c9a4:	7622      	strb	r2, [r4, #24]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
  41c9a6:	1e4a      	subs	r2, r1, #1
  41c9a8:	d42e      	bmi.n	41ca08 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x320>
    data->params.left_padding[idx] = paddings_data[idx * 2];
  41c9aa:	4608      	mov	r0, r1
  41c9ac:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
  41c9b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    data->params.left_padding[idx] = paddings_data[idx * 2];
  41c9b4:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
  41c9b8:	6859      	ldr	r1, [r3, #4]
  41c9ba:	eb04 0280 	add.w	r2, r4, r0, lsl #2
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
  41c9be:	2801      	cmp	r0, #1
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
  41c9c0:	6191      	str	r1, [r2, #24]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
  41c9c2:	d021      	beq.n	41ca08 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x320>
    data->params.left_padding[idx] = paddings_data[idx * 2];
  41c9c4:	f853 1c08 	ldr.w	r1, [r3, #-8]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
  41c9c8:	2802      	cmp	r0, #2
    data->params.left_padding[idx] = paddings_data[idx * 2];
  41c9ca:	f842 1c04 	str.w	r1, [r2, #-4]
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
  41c9ce:	f853 1c04 	ldr.w	r1, [r3, #-4]
  41c9d2:	6151      	str	r1, [r2, #20]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
  41c9d4:	d018      	beq.n	41ca08 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x320>
    data->params.left_padding[idx] = paddings_data[idx * 2];
  41c9d6:	f853 1c10 	ldr.w	r1, [r3, #-16]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
  41c9da:	2803      	cmp	r0, #3
    data->params.left_padding[idx] = paddings_data[idx * 2];
  41c9dc:	f842 1c08 	str.w	r1, [r2, #-8]
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
  41c9e0:	f853 1c0c 	ldr.w	r1, [r3, #-12]
  41c9e4:	6111      	str	r1, [r2, #16]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
  41c9e6:	d00f      	beq.n	41ca08 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x320>
    data->params.left_padding[idx] = paddings_data[idx * 2];
  41c9e8:	f853 1c18 	ldr.w	r1, [r3, #-24]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
  41c9ec:	2804      	cmp	r0, #4
    data->params.left_padding[idx] = paddings_data[idx * 2];
  41c9ee:	f842 1c0c 	str.w	r1, [r2, #-12]
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
  41c9f2:	f853 1c14 	ldr.w	r1, [r3, #-20]
  41c9f6:	60d1      	str	r1, [r2, #12]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
  41c9f8:	d006      	beq.n	41ca08 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x320>
    data->params.left_padding[idx] = paddings_data[idx * 2];
  41c9fa:	f853 1c20 	ldr.w	r1, [r3, #-32]
  41c9fe:	f842 1c10 	str.w	r1, [r2, #-16]
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
  41ca02:	f853 3c1c 	ldr.w	r3, [r3, #-28]
  41ca06:	6093      	str	r3, [r2, #8]
  if (input->type == kTfLiteInt8) {
  41ca08:	f1bb 0f09 	cmp.w	fp, #9
  41ca0c:	d01b      	beq.n	41ca46 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x35e>
  micro_context->DeallocateTempTfLiteTensor(input);
  41ca0e:	682b      	ldr	r3, [r5, #0]
  41ca10:	4639      	mov	r1, r7
  41ca12:	4628      	mov	r0, r5
  41ca14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41ca16:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(paddings);
  41ca18:	682b      	ldr	r3, [r5, #0]
  41ca1a:	4641      	mov	r1, r8
  41ca1c:	4628      	mov	r0, r5
  41ca1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41ca20:	4798      	blx	r3
  if (constant_values != nullptr) {
  41ca22:	f1ba 0f00 	cmp.w	sl, #0
  41ca26:	d004      	beq.n	41ca32 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x34a>
    micro_context->DeallocateTempTfLiteTensor(constant_values);
  41ca28:	682b      	ldr	r3, [r5, #0]
  41ca2a:	4651      	mov	r1, sl
  41ca2c:	4628      	mov	r0, r5
  41ca2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41ca30:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
  41ca32:	682b      	ldr	r3, [r5, #0]
  41ca34:	4628      	mov	r0, r5
  41ca36:	4649      	mov	r1, r9
  41ca38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41ca3a:	4798      	blx	r3
  return kTfLiteOk;
  41ca3c:	2000      	movs	r0, #0
  41ca3e:	e663      	b.n	41c708 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x20>
    int buffer_size = 1;
  41ca40:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
  41ca42:	2300      	movs	r3, #0
  41ca44:	e6f5      	b.n	41c832 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x14a>
      TF_LITE_ENSURE(context, output->params.zero_point >=
  41ca46:	f8d9 300c 	ldr.w	r3, [r9, #12]
    if (constant_values == nullptr) {
  41ca4a:	f1ba 0f00 	cmp.w	sl, #0
  41ca4e:	d020      	beq.n	41ca92 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x3aa>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point,
  41ca50:	f8da 200c 	ldr.w	r2, [sl, #12]
  41ca54:	429a      	cmp	r2, r3
  41ca56:	f47f ae56 	bne.w	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
      TF_LITE_ENSURE_EQ(context, static_cast<double>(output->params.scale),
  41ca5a:	ed99 7a02 	vldr	s14, [r9, #8]
  41ca5e:	edda 7a02 	vldr	s15, [sl, #8]
  41ca62:	eeb4 7a67 	vcmp.f32	s14, s15
  41ca66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41ca6a:	f47f ae4c 	bne.w	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
    data->output_zero_point = output->params.zero_point;
  41ca6e:	6363      	str	r3, [r4, #52]	@ 0x34
  41ca70:	e7cd      	b.n	41ca0e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x326>
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
  41ca72:	681a      	ldr	r2, [r3, #0]
  41ca74:	2a00      	cmp	r2, #0
  41ca76:	d192      	bne.n	41c99e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b6>
  41ca78:	685a      	ldr	r2, [r3, #4]
  41ca7a:	2a00      	cmp	r2, #0
  41ca7c:	d18f      	bne.n	41c99e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b6>
  41ca7e:	699a      	ldr	r2, [r3, #24]
  41ca80:	2a00      	cmp	r2, #0
  41ca82:	d18c      	bne.n	41c99e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b6>
      (paddings_data[6] == 0 && paddings_data[7] == 0)) {
  41ca84:	69da      	ldr	r2, [r3, #28]
  41ca86:	2a00      	cmp	r2, #0
  41ca88:	d189      	bne.n	41c99e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b6>
    data->params.resizing_category = ResizingCategory::kImageStyle;
  41ca8a:	2201      	movs	r2, #1
  41ca8c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
  41ca90:	e785      	b.n	41c99e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x2b6>
      TF_LITE_ENSURE(context, output->params.zero_point >=
  41ca92:	f103 0280 	add.w	r2, r3, #128	@ 0x80
  41ca96:	2aff      	cmp	r2, #255	@ 0xff
  41ca98:	d9e9      	bls.n	41ca6e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x386>
  41ca9a:	e634      	b.n	41c706 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  41ca9c:	2200      	movs	r2, #0
  41ca9e:	e759      	b.n	41c954 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x26c>
  TFLITE_DCHECK(node->user_data != nullptr);
  41caa0:	f002 fb7a 	bl	41f198 <abort>

0041caa4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  41caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
  41caa8:	68ce      	ldr	r6, [r1, #12]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
  41caaa:	f5ad 7d6d 	sub.w	sp, sp, #948	@ 0x3b4
  TFLITE_DCHECK(node->user_data != nullptr);
  41caae:	2e00      	cmp	r6, #0
  41cab0:	f001 82ab 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  const TfLiteEvalTensor* input =
  41cab4:	460c      	mov	r4, r1
      tflite::micro::GetEvalInput(context, node, /*index=*/0);
  41cab6:	2200      	movs	r2, #0
  41cab8:	4680      	mov	r8, r0
  41caba:	f7ff fd53 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  return node->inputs == nullptr ? 0 : node->inputs->size;
  41cabe:	6822      	ldr	r2, [r4, #0]
  41cac0:	4607      	mov	r7, r0
  41cac2:	b11a      	cbz	r2, 41cacc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28>
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
  41cac4:	6813      	ldr	r3, [r2, #0]
  41cac6:	2b03      	cmp	r3, #3
  41cac8:	d019      	beq.n	41cafe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
  41caca:	2200      	movs	r2, #0
  41cacc:	4621      	mov	r1, r4
  41cace:	4640      	mov	r0, r8
  41cad0:	f7ff fd62 	bl	41c598 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (input->type) {
  41cad4:	7a3b      	ldrb	r3, [r7, #8]
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
  41cad6:	4604      	mov	r4, r0
  switch (input->type) {
  41cad8:	3b01      	subs	r3, #1
  41cada:	2b08      	cmp	r3, #8
  41cadc:	d80a      	bhi.n	41caf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x50>
  41cade:	e8df f013 	tbh	[pc, r3, lsl #1]
  41cae2:	0033      	.short	0x0033
  41cae4:	00090337 	.word	0x00090337
  41cae8:	00090009 	.word	0x00090009
  41caec:	0a5d0009 	.word	0x0a5d0009
  41caf0:	0a5f0009 	.word	0x0a5f0009
      return kTfLiteError;
  41caf4:	2001      	movs	r0, #1
}
  41caf6:	f50d 7d6d 	add.w	sp, sp, #948	@ 0x3b4
  41cafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
  41cafe:	4621      	mov	r1, r4
  41cb00:	2202      	movs	r2, #2
  41cb02:	4640      	mov	r0, r8
  41cb04:	f7ff fd2e 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
  41cb08:	4621      	mov	r1, r4
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
  41cb0a:	4605      	mov	r5, r0
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
  41cb0c:	2200      	movs	r2, #0
  41cb0e:	4640      	mov	r0, r8
  41cb10:	f7ff fd42 	bl	41c598 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (input->type) {
  41cb14:	7a3b      	ldrb	r3, [r7, #8]
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
  41cb16:	4604      	mov	r4, r0
  switch (input->type) {
  41cb18:	3b01      	subs	r3, #1
  41cb1a:	2b08      	cmp	r3, #8
  41cb1c:	d8ea      	bhi.n	41caf4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x50>
  41cb1e:	a201      	add	r2, pc, #4	@ (adr r2, 41cb24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80>)
  41cb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  41cb24:	0041df27 	.word	0x0041df27
  41cb28:	0041df19 	.word	0x0041df19
  41cb2c:	0041caf5 	.word	0x0041caf5
  41cb30:	0041caf5 	.word	0x0041caf5
  41cb34:	0041caf5 	.word	0x0041caf5
  41cb38:	0041caf5 	.word	0x0041caf5
  41cb3c:	0041db7d 	.word	0x0041db7d
  41cb40:	0041caf5 	.word	0x0041caf5
  41cb44:	0041d45d 	.word	0x0041d45d
  41cb48:	2500      	movs	r5, #0
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
  41cb4a:	f896 8030 	ldrb.w	r8, [r6, #48]	@ 0x30
            data->params, tflite::micro::GetTensorShape(input),
  41cb4e:	4639      	mov	r1, r7
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
  41cb50:	f1b8 0f01 	cmp.w	r8, #1
  41cb54:	f000 81ad 	beq.w	41ceb2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x40e>
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
  41cb58:	a868      	add	r0, sp, #416	@ 0x1a0
  41cb5a:	f7ff fd29 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  41cb5e:	683b      	ldr	r3, [r7, #0]
                           &pad_value, tflite::micro::GetTensorShape(output),
  41cb60:	4621      	mov	r1, r4
  41cb62:	a86e      	add	r0, sp, #440	@ 0x1b8
  41cb64:	9308      	str	r3, [sp, #32]
  41cb66:	f7ff fd23 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41cb6a:	2c00      	cmp	r4, #0
  41cb6c:	f001 824d 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
      : size_(new_shape_size) {
  41cb70:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41cb72:	9a68      	ldr	r2, [sp, #416]	@ 0x1a0
  return reinterpret_cast<T*>(tensor->data.raw);
  41cb74:	6824      	ldr	r4, [r4, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41cb76:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
  41cb78:	93b0      	str	r3, [sp, #704]	@ 0x2c0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41cb7a:	f301 8246 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41cb7e:	1a98      	subs	r0, r3, r2
  41cb80:	d010      	beq.n	41cba4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>
    dims_[i] = val;
  41cb82:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41cb84:	4298      	cmp	r0, r3
    dims_[i] = val;
  41cb86:	93b1      	str	r3, [sp, #708]	@ 0x2c4
    for (int i = 0; i < size_increase; ++i) {
  41cb88:	d00c      	beq.n	41cba4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>
  41cb8a:	2802      	cmp	r0, #2
    dims_[i] = val;
  41cb8c:	93b2      	str	r3, [sp, #712]	@ 0x2c8
    for (int i = 0; i < size_increase; ++i) {
  41cb8e:	d009      	beq.n	41cba4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>
  41cb90:	2803      	cmp	r0, #3
    dims_[i] = val;
  41cb92:	93b3      	str	r3, [sp, #716]	@ 0x2cc
    for (int i = 0; i < size_increase; ++i) {
  41cb94:	d006      	beq.n	41cba4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>
  41cb96:	2804      	cmp	r0, #4
    dims_[i] = val;
  41cb98:	93b4      	str	r3, [sp, #720]	@ 0x2d0
    for (int i = 0; i < size_increase; ++i) {
  41cb9a:	d003      	beq.n	41cba4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x100>
  41cb9c:	2805      	cmp	r0, #5
    dims_[i] = val;
  41cb9e:	93b5      	str	r3, [sp, #724]	@ 0x2d4
    for (int i = 0; i < size_increase; ++i) {
  41cba0:	f041 8233 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41cba4:	abb1      	add	r3, sp, #708	@ 0x2c4
  41cba6:	0092      	lsls	r2, r2, #2
  41cba8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41cbac:	a969      	add	r1, sp, #420	@ 0x1a4
  41cbae:	f7f3 fd05 	bl	4105bc <memcpy>
      : size_(new_shape_size) {
  41cbb2:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41cbb4:	9a6e      	ldr	r2, [sp, #440]	@ 0x1b8
      : size_(new_shape_size) {
  41cbb6:	93b6      	str	r3, [sp, #728]	@ 0x2d8
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41cbb8:	429a      	cmp	r2, r3
  41cbba:	f301 8226 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41cbbe:	1a98      	subs	r0, r3, r2
  41cbc0:	d010      	beq.n	41cbe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
    dims_[i] = val;
  41cbc2:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41cbc4:	4298      	cmp	r0, r3
    dims_[i] = val;
  41cbc6:	93b7      	str	r3, [sp, #732]	@ 0x2dc
    for (int i = 0; i < size_increase; ++i) {
  41cbc8:	d00c      	beq.n	41cbe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  41cbca:	2802      	cmp	r0, #2
    dims_[i] = val;
  41cbcc:	93b8      	str	r3, [sp, #736]	@ 0x2e0
    for (int i = 0; i < size_increase; ++i) {
  41cbce:	d009      	beq.n	41cbe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  41cbd0:	2803      	cmp	r0, #3
    dims_[i] = val;
  41cbd2:	93b9      	str	r3, [sp, #740]	@ 0x2e4
    for (int i = 0; i < size_increase; ++i) {
  41cbd4:	d006      	beq.n	41cbe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  41cbd6:	2804      	cmp	r0, #4
    dims_[i] = val;
  41cbd8:	93ba      	str	r3, [sp, #744]	@ 0x2e8
    for (int i = 0; i < size_increase; ++i) {
  41cbda:	d003      	beq.n	41cbe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
  41cbdc:	2805      	cmp	r0, #5
    dims_[i] = val;
  41cbde:	93bb      	str	r3, [sp, #748]	@ 0x2ec
    for (int i = 0; i < size_increase; ++i) {
  41cbe0:	f041 8213 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41cbe4:	abb7      	add	r3, sp, #732	@ 0x2dc
  41cbe6:	0092      	lsls	r2, r2, #2
  41cbe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41cbec:	a96f      	add	r1, sp, #444	@ 0x1bc
  41cbee:	f7f3 fce5 	bl	4105bc <memcpy>
                    T* output_data) {
  const RuntimeShape ext_input_shape =
      RuntimeShape::ExtendedShape(PadKernelMaxDimensionCount(), input_shape);
  const RuntimeShape ext_output_shape =
      RuntimeShape::ExtendedShape(PadKernelMaxDimensionCount(), output_shape);
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
  41cbf2:	f996 2000 	ldrsb.w	r2, [r6]
  41cbf6:	2a05      	cmp	r2, #5
  41cbf8:	f301 8207 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
  41cbfc:	f996 9018 	ldrsb.w	r9, [r6, #24]
  41cc00:	f1b9 0f05 	cmp.w	r9, #5
  41cc04:	f301 8201 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>

  // Runtime calls are currently fixed at 5 dimensions. Copy inputs so we can
  // pad them to 5 dims (yes, we are "padding the padding").
  int left_padding_copy[PadKernelMaxDimensionCount()];
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
    left_padding_copy[i] = 0;
  41cc08:	2300      	movs	r3, #0
  41cc0a:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  }
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41cc0e:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
  41cc10:	f10d 0880 	add.w	r8, sp, #128	@ 0x80
  41cc14:	ed88 7f00 	stc	15, cr7, [r8]
  41cc18:	f8c8 3010 	str.w	r3, [r8, #16]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41cc1c:	dd07      	ble.n	41cc2e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18a>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
                      op_params.left_padding_count] = op_params.left_padding[i];
  41cc1e:	f1c2 0005 	rsb	r0, r2, #5
  41cc22:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  41cc26:	0092      	lsls	r2, r2, #2
  41cc28:	1d31      	adds	r1, r6, #4
  41cc2a:	f7f3 fcc7 	bl	4105bc <memcpy>
  }
  int right_padding_copy[PadKernelMaxDimensionCount()];
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
    right_padding_copy[i] = 0;
  41cc2e:	2300      	movs	r3, #0
  41cc30:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  }
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41cc34:	4599      	cmp	r9, r3
    right_padding_copy[i] = 0;
  41cc36:	af26      	add	r7, sp, #152	@ 0x98
  41cc38:	ed87 7f00 	stc	15, cr7, [r7]
  41cc3c:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41cc3e:	dd09      	ble.n	41cc54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b0>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
                       op_params.right_padding_count] =
  41cc40:	f1c9 0005 	rsb	r0, r9, #5
  41cc44:	f106 011c 	add.w	r1, r6, #28
  41cc48:	ea4f 0289 	mov.w	r2, r9, lsl #2
  41cc4c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  41cc50:	f7f3 fcb4 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41cc54:	9bb6      	ldr	r3, [sp, #728]	@ 0x2d8
  41cc56:	2b00      	cmp	r3, #0
  41cc58:	f341 81d7 	ble.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41cc5c:	2b01      	cmp	r3, #1
    return dims_[i];
  41cc5e:	99b7      	ldr	r1, [sp, #732]	@ 0x2dc
    TFLITE_DCHECK_LT(i, size_);
  41cc60:	f001 81d3 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41cc64:	2b02      	cmp	r3, #2
    return dims_[i];
  41cc66:	f8dd c2e0 	ldr.w	ip, [sp, #736]	@ 0x2e0
    TFLITE_DCHECK_LT(i, size_);
  41cc6a:	f001 81ce 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41cc6e:	2b03      	cmp	r3, #3
    return dims_[i];
  41cc70:	f8dd 92e4 	ldr.w	r9, [sp, #740]	@ 0x2e4
    TFLITE_DCHECK_LT(i, size_);
  41cc74:	f001 81c9 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41cc78:	2b04      	cmp	r3, #4
    return dims_[i];
  41cc7a:	f8dd a2e8 	ldr.w	sl, [sp, #744]	@ 0x2e8
    TFLITE_DCHECK_LT(i, size_);
  41cc7e:	f001 81c4 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>

  const T pad_value = *pad_value_ptr;

  const T* in_ptr = input_data;
  T* out_ptr = output_data;
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41cc82:	2900      	cmp	r1, #0
  41cc84:	f340 80d7 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
  41cc88:	f1bc 0f00 	cmp.w	ip, #0
  41cc8c:	f340 80d3 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
    return dims_[i];
  41cc90:	9bbb      	ldr	r3, [sp, #748]	@ 0x2ec
  const int right_d_padding = right_padding_copy[4];
  41cc92:	693a      	ldr	r2, [r7, #16]
  41cc94:	eea6 5b10 	vdup.32	q3, r5
  41cc98:	1a9e      	subs	r6, r3, r2
  41cc9a:	429e      	cmp	r6, r3
  41cc9c:	9609      	str	r6, [sp, #36]	@ 0x24
  41cc9e:	bfa8      	it	ge
  41cca0:	461e      	movge	r6, r3
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41cca2:	2000      	movs	r0, #0
  const int right_b_padding = right_padding_copy[0];
  41cca4:	683a      	ldr	r2, [r7, #0]
  41cca6:	960a      	str	r6, [sp, #40]	@ 0x28
  41cca8:	1a8a      	subs	r2, r1, r2
  41ccaa:	9203      	str	r2, [sp, #12]
  const int right_h_padding = right_padding_copy[2];
  41ccac:	68ba      	ldr	r2, [r7, #8]
            if (out_b < left_b_padding ||
                out_b >= output_batch - right_b_padding ||
                out_p < left_p_padding ||
                out_p >= output_plane - right_p_padding ||
                out_h < left_h_padding ||
                out_h >= output_height - right_h_padding ||
  41ccae:	eba9 0202 	sub.w	r2, r9, r2
  41ccb2:	9205      	str	r2, [sp, #20]
  const int left_b_padding = left_padding_copy[0];
  41ccb4:	f8d8 2000 	ldr.w	r2, [r8]
  41ccb8:	9202      	str	r2, [sp, #8]
  const int left_h_padding = left_padding_copy[2];
  41ccba:	e9d8 b201 	ldrd	fp, r2, [r8, #4]
  41ccbe:	9207      	str	r2, [sp, #28]
  const int left_w_padding = left_padding_copy[3];
  41ccc0:	f8d8 200c 	ldr.w	r2, [r8, #12]
  41ccc4:	920e      	str	r2, [sp, #56]	@ 0x38
  const int left_d_padding = left_padding_copy[4];
  41ccc6:	f8d8 2010 	ldr.w	r2, [r8, #16]
  const int right_p_padding = right_padding_copy[1];
  41ccca:	f8d7 8004 	ldr.w	r8, [r7, #4]
  const int left_d_padding = left_padding_copy[4];
  41ccce:	920f      	str	r2, [sp, #60]	@ 0x3c
  const int right_w_padding = right_padding_copy[3];
  41ccd0:	68fa      	ldr	r2, [r7, #12]
  41ccd2:	9210      	str	r2, [sp, #64]	@ 0x40
  41ccd4:	009a      	lsls	r2, r3, #2
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41ccd6:	2600      	movs	r6, #0
  41ccd8:	9111      	str	r1, [sp, #68]	@ 0x44
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41ccda:	f1b9 0f00 	cmp.w	r9, #0
  41ccde:	f340 80a1 	ble.w	41ce24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x380>
  41cce2:	2100      	movs	r1, #0
                out_p >= output_plane - right_p_padding ||
  41cce4:	ebac 0708 	sub.w	r7, ip, r8
  41cce8:	9706      	str	r7, [sp, #24]
  41ccea:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41ccee:	f1ba 0f00 	cmp.w	sl, #0
  41ccf2:	f340 8091 	ble.w	41ce18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
  41ccf6:	2700      	movs	r7, #0
  41ccf8:	9501      	str	r5, [sp, #4]
  41ccfa:	9100      	str	r1, [sp, #0]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41ccfc:	2b00      	cmp	r3, #0
  41ccfe:	f340 8085 	ble.w	41ce0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x368>
  41cd02:	9902      	ldr	r1, [sp, #8]
  41cd04:	4281      	cmp	r1, r0
  41cd06:	f300 80a8 	bgt.w	41ce5a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b6>
  41cd0a:	9903      	ldr	r1, [sp, #12]
  41cd0c:	4281      	cmp	r1, r0
  41cd0e:	f340 8097 	ble.w	41ce40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39c>
  41cd12:	45b3      	cmp	fp, r6
  41cd14:	f300 80ab 	bgt.w	41ce6e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ca>
  41cd18:	9906      	ldr	r1, [sp, #24]
  41cd1a:	42b1      	cmp	r1, r6
  41cd1c:	f340 80b1 	ble.w	41ce82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3de>
  41cd20:	9907      	ldr	r1, [sp, #28]
  41cd22:	9d00      	ldr	r5, [sp, #0]
  41cd24:	42a9      	cmp	r1, r5
  41cd26:	f300 80b6 	bgt.w	41ce96 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f2>
  41cd2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
  41cd2c:	2900      	cmp	r1, #0
  41cd2e:	f340 80bc 	ble.w	41ceaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x406>
  41cd32:	2100      	movs	r1, #0
                out_w < left_w_padding ||
                out_w >= output_width - right_w_padding ||
                out_d < left_d_padding ||
                out_d >= output_depth - right_d_padding) {
              *out_ptr++ = pad_value;
  41cd34:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41cd36:	9104      	str	r1, [sp, #16]
  41cd38:	2d01      	cmp	r5, #1
  41cd3a:	4629      	mov	r1, r5
  41cd3c:	bfb8      	it	lt
  41cd3e:	2101      	movlt	r1, #1
  41cd40:	46a4      	mov	ip, r4
  41cd42:	910b      	str	r1, [sp, #44]	@ 0x2c
  41cd44:	9d01      	ldr	r5, [sp, #4]
  41cd46:	9900      	ldr	r1, [sp, #0]
  41cd48:	930c      	str	r3, [sp, #48]	@ 0x30
  41cd4a:	920d      	str	r2, [sp, #52]	@ 0x34
                out_h < left_h_padding ||
  41cd4c:	9b05      	ldr	r3, [sp, #20]
              *out_ptr++ = pad_value;
  41cd4e:	46ae      	mov	lr, r5
                out_h < left_h_padding ||
  41cd50:	428b      	cmp	r3, r1
            } else {
              *out_ptr++ = *in_ptr++;
  41cd52:	f10c 0c04 	add.w	ip, ip, #4
                out_h < left_h_padding ||
  41cd56:	dd0f      	ble.n	41cd78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
                out_h >= output_height - right_h_padding ||
  41cd58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  41cd5a:	42bb      	cmp	r3, r7
  41cd5c:	dc0c      	bgt.n	41cd78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
                out_w >= output_width - right_w_padding ||
  41cd5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  41cd60:	ebaa 0303 	sub.w	r3, sl, r3
                out_w < left_w_padding ||
  41cd64:	42bb      	cmp	r3, r7
  41cd66:	dd07      	ble.n	41cd78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
                out_w >= output_width - right_w_padding ||
  41cd68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  41cd6a:	9a04      	ldr	r2, [sp, #16]
  41cd6c:	4293      	cmp	r3, r2
  41cd6e:	dc03      	bgt.n	41cd78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
              *out_ptr++ = *in_ptr++;
  41cd70:	9b08      	ldr	r3, [sp, #32]
  41cd72:	f853 eb04 	ldr.w	lr, [r3], #4
  41cd76:	9308      	str	r3, [sp, #32]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41cd78:	9b04      	ldr	r3, [sp, #16]
  41cd7a:	f84c ec04 	str.w	lr, [ip, #-4]
  41cd7e:	3301      	adds	r3, #1
  41cd80:	9304      	str	r3, [sp, #16]
  41cd82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41cd84:	3b01      	subs	r3, #1
  41cd86:	930b      	str	r3, [sp, #44]	@ 0x2c
  41cd88:	d1e0      	bne.n	41cd4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a8>
  41cd8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  41cd8c:	9100      	str	r1, [sp, #0]
  41cd8e:	9904      	ldr	r1, [sp, #16]
  41cd90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  41cd92:	428b      	cmp	r3, r1
  41cd94:	9501      	str	r5, [sp, #4]
  41cd96:	dd38      	ble.n	41ce0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x366>
  41cd98:	9904      	ldr	r1, [sp, #16]
  41cd9a:	428b      	cmp	r3, r1
  41cd9c:	eba3 0e01 	sub.w	lr, r3, r1
  41cda0:	f10e 31ff 	add.w	r1, lr, #4294967295	@ 0xffffffff
  41cda4:	bfd8      	it	le
  41cda6:	f04f 0e01 	movle.w	lr, #1
  41cdaa:	910c      	str	r1, [sp, #48]	@ 0x30
  41cdac:	990c      	ldr	r1, [sp, #48]	@ 0x30
  41cdae:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
  41cdb2:	2902      	cmp	r1, #2
  41cdb4:	d918      	bls.n	41cde8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x344>
  41cdb6:	9904      	ldr	r1, [sp, #16]
  41cdb8:	428b      	cmp	r3, r1
  41cdba:	dd15      	ble.n	41cde8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x344>
  41cdbc:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  41cdc0:	f04e e001 	dls	lr, lr
  41cdc4:	4665      	mov	r5, ip
  41cdc6:	9900      	ldr	r1, [sp, #0]
  41cdc8:	eca5 7f04 	stc	15, cr7, [r5], #16
  41cdcc:	f00f c005 	le	lr, 41cdc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x324>
  41cdd0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
  41cdd2:	9100      	str	r1, [sp, #0]
  41cdd4:	9904      	ldr	r1, [sp, #16]
  41cdd6:	f025 0e03 	bic.w	lr, r5, #3
  41cdda:	4471      	add	r1, lr
  41cddc:	9104      	str	r1, [sp, #16]
  41cdde:	4629      	mov	r1, r5
  41cde0:	0789      	lsls	r1, r1, #30
  41cde2:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
  41cde6:	d010      	beq.n	41ce0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x366>
  41cde8:	eddd 5a01 	vldr	s11, [sp, #4]
  41cdec:	9904      	ldr	r1, [sp, #16]
  41cdee:	edcc 5a00 	vstr	s11, [ip]
  41cdf2:	f101 0e01 	add.w	lr, r1, #1
  41cdf6:	4573      	cmp	r3, lr
  41cdf8:	dd07      	ble.n	41ce0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x366>
  41cdfa:	f101 0e02 	add.w	lr, r1, #2
  41cdfe:	4573      	cmp	r3, lr
  41ce00:	edcc 5a01 	vstr	s11, [ip, #4]
  41ce04:	dd01      	ble.n	41ce0a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x366>
  41ce06:	edcc 5a02 	vstr	s11, [ip, #8]
              *out_ptr++ = *in_ptr++;
  41ce0a:	4414      	add	r4, r2
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41ce0c:	3701      	adds	r7, #1
  41ce0e:	45ba      	cmp	sl, r7
  41ce10:	f47f af74 	bne.w	41ccfc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>
  41ce14:	9d01      	ldr	r5, [sp, #4]
  41ce16:	9900      	ldr	r1, [sp, #0]
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41ce18:	3101      	adds	r1, #1
  41ce1a:	4589      	cmp	r9, r1
  41ce1c:	f47f af67 	bne.w	41ccee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24a>
  41ce20:	f8dd c048 	ldr.w	ip, [sp, #72]	@ 0x48
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41ce24:	3601      	adds	r6, #1
  41ce26:	45b4      	cmp	ip, r6
  41ce28:	f47f af57 	bne.w	41ccda <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x236>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41ce2c:	9911      	ldr	r1, [sp, #68]	@ 0x44
  41ce2e:	3001      	adds	r0, #1
  41ce30:	4281      	cmp	r1, r0
  41ce32:	f47f af50 	bne.w	41ccd6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x232>
  return kTfLiteOk;
  41ce36:	2000      	movs	r0, #0
}
  41ce38:	f50d 7d6d 	add.w	sp, sp, #948	@ 0x3b4
  41ce3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41ce40:	46a4      	mov	ip, r4
  41ce42:	f043 e001 	dls	lr, r3
  41ce46:	9d01      	ldr	r5, [sp, #4]
  41ce48:	9900      	ldr	r1, [sp, #0]
  41ce4a:	f84c 5b04 	str.w	r5, [ip], #4
  41ce4e:	f00f c005 	le	lr, 41ce4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a6>
  41ce52:	9501      	str	r5, [sp, #4]
  41ce54:	9100      	str	r1, [sp, #0]
  41ce56:	4414      	add	r4, r2
  41ce58:	e7d8      	b.n	41ce0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x368>
  41ce5a:	46a4      	mov	ip, r4
  41ce5c:	f043 e001 	dls	lr, r3
  41ce60:	9d01      	ldr	r5, [sp, #4]
  41ce62:	9900      	ldr	r1, [sp, #0]
  41ce64:	f84c 5b04 	str.w	r5, [ip], #4
  41ce68:	f00f c005 	le	lr, 41ce64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c0>
  41ce6c:	e7f1      	b.n	41ce52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ae>
  41ce6e:	46a4      	mov	ip, r4
  41ce70:	f043 e001 	dls	lr, r3
  41ce74:	9d01      	ldr	r5, [sp, #4]
  41ce76:	9900      	ldr	r1, [sp, #0]
  41ce78:	f84c 5b04 	str.w	r5, [ip], #4
  41ce7c:	f00f c005 	le	lr, 41ce78 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d4>
  41ce80:	e7e7      	b.n	41ce52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ae>
  41ce82:	46a4      	mov	ip, r4
  41ce84:	f043 e001 	dls	lr, r3
  41ce88:	9d01      	ldr	r5, [sp, #4]
  41ce8a:	9900      	ldr	r1, [sp, #0]
  41ce8c:	f84c 5b04 	str.w	r5, [ip], #4
  41ce90:	f00f c005 	le	lr, 41ce8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e8>
  41ce94:	e7dd      	b.n	41ce52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ae>
  41ce96:	46a4      	mov	ip, r4
  41ce98:	f043 e001 	dls	lr, r3
  41ce9c:	4629      	mov	r1, r5
  41ce9e:	9d01      	ldr	r5, [sp, #4]
  41cea0:	f84c 5b04 	str.w	r5, [ip], #4
  41cea4:	f00f c005 	le	lr, 41cea0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3fc>
  41cea8:	e7d3      	b.n	41ce52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ae>
  41ceaa:	2100      	movs	r1, #0
  41ceac:	46a4      	mov	ip, r4
  41ceae:	9104      	str	r1, [sp, #16]
  41ceb0:	e772      	b.n	41cd98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>
            data->params, tflite::micro::GetTensorShape(input),
  41ceb2:	a85c      	add	r0, sp, #368	@ 0x170
  41ceb4:	f7ff fb7c 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41ceb8:	683b      	ldr	r3, [r7, #0]
            tflite::micro::GetTensorShape(output),
  41ceba:	4621      	mov	r1, r4
  41cebc:	a862      	add	r0, sp, #392	@ 0x188
  41cebe:	9304      	str	r3, [sp, #16]
  41cec0:	f7ff fb76 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41cec4:	2c00      	cmp	r4, #0
  41cec6:	f001 80a0 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
      : size_(new_shape_size) {
  41ceca:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41cecc:	9a5c      	ldr	r2, [sp, #368]	@ 0x170
  return reinterpret_cast<T*>(tensor->data.raw);
  41cece:	6824      	ldr	r4, [r4, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41ced0:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
  41ced2:	93a4      	str	r3, [sp, #656]	@ 0x290
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41ced4:	f301 8099 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41ced8:	1a98      	subs	r0, r3, r2
  41ceda:	d014      	beq.n	41cf06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x462>
  41cedc:	2801      	cmp	r0, #1
    dims_[i] = val;
  41cede:	f8cd 8294 	str.w	r8, [sp, #660]	@ 0x294
    for (int i = 0; i < size_increase; ++i) {
  41cee2:	d010      	beq.n	41cf06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x462>
  41cee4:	2802      	cmp	r0, #2
    dims_[i] = val;
  41cee6:	f8cd 8298 	str.w	r8, [sp, #664]	@ 0x298
    for (int i = 0; i < size_increase; ++i) {
  41ceea:	d00c      	beq.n	41cf06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x462>
  41ceec:	2803      	cmp	r0, #3
    dims_[i] = val;
  41ceee:	f8cd 829c 	str.w	r8, [sp, #668]	@ 0x29c
    for (int i = 0; i < size_increase; ++i) {
  41cef2:	d008      	beq.n	41cf06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x462>
  41cef4:	2804      	cmp	r0, #4
    dims_[i] = val;
  41cef6:	f8cd 82a0 	str.w	r8, [sp, #672]	@ 0x2a0
    for (int i = 0; i < size_increase; ++i) {
  41cefa:	d004      	beq.n	41cf06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x462>
  41cefc:	4298      	cmp	r0, r3
    dims_[i] = val;
  41cefe:	f8cd 82a4 	str.w	r8, [sp, #676]	@ 0x2a4
    for (int i = 0; i < size_increase; ++i) {
  41cf02:	f041 8082 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41cf06:	aba5      	add	r3, sp, #660	@ 0x294
  41cf08:	0092      	lsls	r2, r2, #2
  41cf0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41cf0e:	a95d      	add	r1, sp, #372	@ 0x174
  41cf10:	f7f3 fb54 	bl	4105bc <memcpy>
      : size_(new_shape_size) {
  41cf14:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41cf16:	9a62      	ldr	r2, [sp, #392]	@ 0x188
      : size_(new_shape_size) {
  41cf18:	93aa      	str	r3, [sp, #680]	@ 0x2a8
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41cf1a:	429a      	cmp	r2, r3
  41cf1c:	f301 8075 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41cf20:	1a98      	subs	r0, r3, r2
  41cf22:	d010      	beq.n	41cf46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4a2>
    dims_[i] = val;
  41cf24:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41cf26:	4298      	cmp	r0, r3
    dims_[i] = val;
  41cf28:	93ab      	str	r3, [sp, #684]	@ 0x2ac
    for (int i = 0; i < size_increase; ++i) {
  41cf2a:	d00c      	beq.n	41cf46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4a2>
  41cf2c:	2802      	cmp	r0, #2
    dims_[i] = val;
  41cf2e:	93ac      	str	r3, [sp, #688]	@ 0x2b0
    for (int i = 0; i < size_increase; ++i) {
  41cf30:	d009      	beq.n	41cf46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4a2>
  41cf32:	2803      	cmp	r0, #3
    dims_[i] = val;
  41cf34:	93ad      	str	r3, [sp, #692]	@ 0x2b4
    for (int i = 0; i < size_increase; ++i) {
  41cf36:	d006      	beq.n	41cf46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4a2>
  41cf38:	2804      	cmp	r0, #4
    dims_[i] = val;
  41cf3a:	93ae      	str	r3, [sp, #696]	@ 0x2b8
    for (int i = 0; i < size_increase; ++i) {
  41cf3c:	d003      	beq.n	41cf46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4a2>
  41cf3e:	2805      	cmp	r0, #5
    dims_[i] = val;
  41cf40:	93af      	str	r3, [sp, #700]	@ 0x2bc
    for (int i = 0; i < size_increase; ++i) {
  41cf42:	f041 8062 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41cf46:	abab      	add	r3, sp, #684	@ 0x2ac
  41cf48:	0092      	lsls	r2, r2, #2
  41cf4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41cf4e:	a963      	add	r1, sp, #396	@ 0x18c
  41cf50:	f7f3 fb34 	bl	4105bc <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
  41cf54:	f996 2000 	ldrsb.w	r2, [r6]
  41cf58:	2a05      	cmp	r2, #5
  41cf5a:	f301 8056 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
  41cf5e:	f996 8018 	ldrsb.w	r8, [r6, #24]
  41cf62:	f1b8 0f05 	cmp.w	r8, #5
  41cf66:	f301 8050 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    left_padding_copy[i] = 0;
  41cf6a:	2300      	movs	r3, #0
  41cf6c:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41cf70:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
  41cf72:	ed8d 7f14 	stc	15, cr7, [sp, #80]	@ 0x50
  41cf76:	9318      	str	r3, [sp, #96]	@ 0x60
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41cf78:	dd08      	ble.n	41cf8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e8>
                      op_params.left_padding_count] = op_params.left_padding[i];
  41cf7a:	f1c2 0005 	rsb	r0, r2, #5
  41cf7e:	ab14      	add	r3, sp, #80	@ 0x50
  41cf80:	0092      	lsls	r2, r2, #2
  41cf82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41cf86:	1d31      	adds	r1, r6, #4
  41cf88:	f7f3 fb18 	bl	4105bc <memcpy>
    right_padding_copy[i] = 0;
  41cf8c:	2300      	movs	r3, #0
  41cf8e:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41cf92:	4598      	cmp	r8, r3
    right_padding_copy[i] = 0;
  41cf94:	af1a      	add	r7, sp, #104	@ 0x68
  41cf96:	ed87 7f00 	stc	15, cr7, [r7]
  41cf9a:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41cf9c:	dd09      	ble.n	41cfb2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x50e>
                       op_params.right_padding_count] =
  41cf9e:	f1c8 0005 	rsb	r0, r8, #5
  41cfa2:	f106 011c 	add.w	r1, r6, #28
  41cfa6:	ea4f 0288 	mov.w	r2, r8, lsl #2
  41cfaa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  41cfae:	f7f3 fb05 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41cfb2:	9aaa      	ldr	r2, [sp, #680]	@ 0x2a8
  41cfb4:	2a00      	cmp	r2, #0
  41cfb6:	f341 8028 	ble.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41cfba:	2a01      	cmp	r2, #1
    return dims_[i];
  41cfbc:	9eab      	ldr	r6, [sp, #684]	@ 0x2ac
    TFLITE_DCHECK_LT(i, size_);
  41cfbe:	f001 8024 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41cfc2:	2a02      	cmp	r2, #2
    return dims_[i];
  41cfc4:	9bac      	ldr	r3, [sp, #688]	@ 0x2b0
    TFLITE_DCHECK_LT(i, size_);
  41cfc6:	f001 8020 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41cfca:	2a03      	cmp	r2, #3
    return dims_[i];
  41cfcc:	98ad      	ldr	r0, [sp, #692]	@ 0x2b4
    TFLITE_DCHECK_LT(i, size_);
  41cfce:	f001 801c 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41cfd2:	2a04      	cmp	r2, #4
    return dims_[i];
  41cfd4:	f8dd 92b8 	ldr.w	r9, [sp, #696]	@ 0x2b8
    TFLITE_DCHECK_LT(i, size_);
  41cfd8:	f001 8017 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41cfdc:	2e00      	cmp	r6, #0
  41cfde:	f77f af2a 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
  41cfe2:	2b00      	cmp	r3, #0
  41cfe4:	f77f af27 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
    return dims_[i];
  41cfe8:	9aaf      	ldr	r2, [sp, #700]	@ 0x2bc
  const int right_d_padding = right_padding_copy[4];
  41cfea:	6939      	ldr	r1, [r7, #16]
  41cfec:	eea6 5b10 	vdup.32	q3, r5
  41cff0:	1a51      	subs	r1, r2, r1
  41cff2:	9105      	str	r1, [sp, #20]
  const int right_b_padding = right_padding_copy[0];
  41cff4:	6839      	ldr	r1, [r7, #0]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41cff6:	f04f 0b00 	mov.w	fp, #0
  41cffa:	1a71      	subs	r1, r6, r1
  41cffc:	910c      	str	r1, [sp, #48]	@ 0x30
  const int right_h_padding = right_padding_copy[2];
  41cffe:	68b9      	ldr	r1, [r7, #8]
                out_h >= output_height - right_h_padding ||
  41d000:	1a41      	subs	r1, r0, r1
  41d002:	9102      	str	r1, [sp, #8]
  41d004:	9905      	ldr	r1, [sp, #20]
  41d006:	4291      	cmp	r1, r2
  41d008:	bfa8      	it	ge
  41d00a:	4611      	movge	r1, r2
  41d00c:	910d      	str	r1, [sp, #52]	@ 0x34
  const int left_b_padding = left_padding_copy[0];
  41d00e:	9914      	ldr	r1, [sp, #80]	@ 0x50
  41d010:	9107      	str	r1, [sp, #28]
  const int left_h_padding = left_padding_copy[2];
  41d012:	e9dd a115 	ldrd	sl, r1, [sp, #84]	@ 0x54
  41d016:	9103      	str	r1, [sp, #12]
  const int left_w_padding = left_padding_copy[3];
  41d018:	9917      	ldr	r1, [sp, #92]	@ 0x5c
  41d01a:	9108      	str	r1, [sp, #32]
  const int left_d_padding = left_padding_copy[4];
  41d01c:	9918      	ldr	r1, [sp, #96]	@ 0x60
  41d01e:	9109      	str	r1, [sp, #36]	@ 0x24
  const int right_p_padding = right_padding_copy[1];
  41d020:	6879      	ldr	r1, [r7, #4]
  const int right_w_padding = right_padding_copy[3];
  41d022:	68ff      	ldr	r7, [r7, #12]
  41d024:	970a      	str	r7, [sp, #40]	@ 0x28
  41d026:	0097      	lsls	r7, r2, #2
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41d028:	f04f 0800 	mov.w	r8, #0
  41d02c:	960e      	str	r6, [sp, #56]	@ 0x38
  41d02e:	f8cd b018 	str.w	fp, [sp, #24]
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41d032:	2800      	cmp	r0, #0
  41d034:	dd7e      	ble.n	41d134 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x690>
  41d036:	f04f 0c00 	mov.w	ip, #0
                out_p >= output_plane - right_p_padding ||
  41d03a:	1a5e      	subs	r6, r3, r1
  41d03c:	e9cd 0600 	strd	r0, r6, [sp]
  41d040:	4666      	mov	r6, ip
  41d042:	910f      	str	r1, [sp, #60]	@ 0x3c
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41d044:	f1b9 0f00 	cmp.w	r9, #0
  41d048:	dd6e      	ble.n	41d128 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x684>
  41d04a:	f04f 0c00 	mov.w	ip, #0
  41d04e:	469b      	mov	fp, r3
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d050:	2a00      	cmp	r2, #0
  41d052:	dd64      	ble.n	41d11e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x67a>
  41d054:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  41d058:	4299      	cmp	r1, r3
  41d05a:	f300 87cd 	bgt.w	41dff8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1554>
  41d05e:	990c      	ldr	r1, [sp, #48]	@ 0x30
  41d060:	4299      	cmp	r1, r3
  41d062:	f340 87a1 	ble.w	41dfa8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1504>
  41d066:	45c2      	cmp	sl, r8
  41d068:	f300 87a7 	bgt.w	41dfba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1516>
  41d06c:	9b01      	ldr	r3, [sp, #4]
  41d06e:	4543      	cmp	r3, r8
  41d070:	f340 87ac 	ble.w	41dfcc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1528>
  41d074:	9b03      	ldr	r3, [sp, #12]
  41d076:	42b3      	cmp	r3, r6
  41d078:	f300 87b1 	bgt.w	41dfde <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x153a>
  41d07c:	9b05      	ldr	r3, [sp, #20]
  41d07e:	2b00      	cmp	r3, #0
  41d080:	f340 87b6 	ble.w	41dff0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x154c>
              *out_ptr++ = pad_value;
  41d084:	990d      	ldr	r1, [sp, #52]	@ 0x34
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d086:	4620      	mov	r0, r4
  41d088:	2901      	cmp	r1, #1
  41d08a:	f04f 0300 	mov.w	r3, #0
  41d08e:	bfb8      	it	lt
  41d090:	2101      	movlt	r1, #1
  41d092:	920b      	str	r2, [sp, #44]	@ 0x2c
                out_h < left_h_padding ||
  41d094:	9a02      	ldr	r2, [sp, #8]
              *out_ptr++ = pad_value;
  41d096:	46ae      	mov	lr, r5
                out_h < left_h_padding ||
  41d098:	4296      	cmp	r6, r2
              *out_ptr++ = *in_ptr++;
  41d09a:	f100 0004 	add.w	r0, r0, #4
                out_h < left_h_padding ||
  41d09e:	da0e      	bge.n	41d0be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x61a>
                out_h >= output_height - right_h_padding ||
  41d0a0:	9a08      	ldr	r2, [sp, #32]
  41d0a2:	4562      	cmp	r2, ip
  41d0a4:	dc0b      	bgt.n	41d0be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x61a>
                out_w >= output_width - right_w_padding ||
  41d0a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  41d0a8:	eba9 0202 	sub.w	r2, r9, r2
                out_w < left_w_padding ||
  41d0ac:	4562      	cmp	r2, ip
  41d0ae:	dd06      	ble.n	41d0be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x61a>
                out_w >= output_width - right_w_padding ||
  41d0b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  41d0b2:	429a      	cmp	r2, r3
  41d0b4:	dc03      	bgt.n	41d0be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x61a>
              *out_ptr++ = *in_ptr++;
  41d0b6:	9a04      	ldr	r2, [sp, #16]
  41d0b8:	f852 eb04 	ldr.w	lr, [r2], #4
  41d0bc:	9204      	str	r2, [sp, #16]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d0be:	3901      	subs	r1, #1
  41d0c0:	f840 ec04 	str.w	lr, [r0, #-4]
  41d0c4:	f103 0301 	add.w	r3, r3, #1
  41d0c8:	d1e4      	bne.n	41d094 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f0>
  41d0ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  41d0cc:	429a      	cmp	r2, r3
  41d0ce:	dd25      	ble.n	41d11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x678>
  41d0d0:	1ad1      	subs	r1, r2, r3
  41d0d2:	429a      	cmp	r2, r3
  41d0d4:	f101 3eff 	add.w	lr, r1, #4294967295	@ 0xffffffff
  41d0d8:	bfd8      	it	le
  41d0da:	2101      	movle	r1, #1
  41d0dc:	f1be 0f02 	cmp.w	lr, #2
  41d0e0:	910b      	str	r1, [sp, #44]	@ 0x2c
  41d0e2:	d912      	bls.n	41d10a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x666>
  41d0e4:	429a      	cmp	r2, r3
  41d0e6:	dd10      	ble.n	41d10a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x666>
  41d0e8:	ea4f 0e91 	mov.w	lr, r1, lsr #2
  41d0ec:	f04e e001 	dls	lr, lr
  41d0f0:	4601      	mov	r1, r0
  41d0f2:	eca1 7f04 	stc	15, cr7, [r1], #16
  41d0f6:	f00f c005 	le	lr, 41d0f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64e>
  41d0fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
  41d0fc:	f021 0e03 	bic.w	lr, r1, #3
  41d100:	0789      	lsls	r1, r1, #30
  41d102:	4473      	add	r3, lr
  41d104:	eb00 008e 	add.w	r0, r0, lr, lsl #2
  41d108:	d008      	beq.n	41d11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x678>
  41d10a:	1c59      	adds	r1, r3, #1
  41d10c:	428a      	cmp	r2, r1
  41d10e:	6005      	str	r5, [r0, #0]
  41d110:	dd04      	ble.n	41d11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x678>
  41d112:	3302      	adds	r3, #2
  41d114:	429a      	cmp	r2, r3
  41d116:	6045      	str	r5, [r0, #4]
  41d118:	dd00      	ble.n	41d11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x678>
  41d11a:	6085      	str	r5, [r0, #8]
              *out_ptr++ = *in_ptr++;
  41d11c:	443c      	add	r4, r7
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41d11e:	f10c 0c01 	add.w	ip, ip, #1
  41d122:	45e1      	cmp	r9, ip
  41d124:	d194      	bne.n	41d050 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ac>
  41d126:	465b      	mov	r3, fp
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41d128:	9900      	ldr	r1, [sp, #0]
  41d12a:	3601      	adds	r6, #1
  41d12c:	42b1      	cmp	r1, r6
  41d12e:	d189      	bne.n	41d044 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a0>
  41d130:	4608      	mov	r0, r1
  41d132:	990f      	ldr	r1, [sp, #60]	@ 0x3c
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41d134:	f108 0801 	add.w	r8, r8, #1
  41d138:	4543      	cmp	r3, r8
  41d13a:	f47f af7a 	bne.w	41d032 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x58e>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41d13e:	f8dd b018 	ldr.w	fp, [sp, #24]
  41d142:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
  41d144:	f10b 0b01 	add.w	fp, fp, #1
  41d148:	455e      	cmp	r6, fp
  41d14a:	f47f af6d 	bne.w	41d028 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x584>
  41d14e:	e672      	b.n	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
              ? 0
  41d150:	2500      	movs	r5, #0
      reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
  41d152:	4639      	mov	r1, r7
  41d154:	a898      	add	r0, sp, #608	@ 0x260
  41d156:	f7ff fa2b 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41d15a:	683b      	ldr	r3, [r7, #0]
                         &pad_value, tflite::micro::GetTensorShape(output),
  41d15c:	4621      	mov	r1, r4
  41d15e:	a89e      	add	r0, sp, #632	@ 0x278
  41d160:	9308      	str	r3, [sp, #32]
  41d162:	f7ff fa25 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41d166:	2c00      	cmp	r4, #0
  41d168:	f000 874f 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
      : size_(new_shape_size) {
  41d16c:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41d16e:	9a98      	ldr	r2, [sp, #608]	@ 0x260
  return reinterpret_cast<T*>(tensor->data.raw);
  41d170:	6824      	ldr	r4, [r4, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41d172:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
  41d174:	93e0      	str	r3, [sp, #896]	@ 0x380
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41d176:	f300 8748 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41d17a:	1a98      	subs	r0, r3, r2
  41d17c:	d010      	beq.n	41d1a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6fc>
    dims_[i] = val;
  41d17e:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41d180:	4298      	cmp	r0, r3
    dims_[i] = val;
  41d182:	93e1      	str	r3, [sp, #900]	@ 0x384
    for (int i = 0; i < size_increase; ++i) {
  41d184:	d00c      	beq.n	41d1a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6fc>
  41d186:	2802      	cmp	r0, #2
    dims_[i] = val;
  41d188:	93e2      	str	r3, [sp, #904]	@ 0x388
    for (int i = 0; i < size_increase; ++i) {
  41d18a:	d009      	beq.n	41d1a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6fc>
  41d18c:	2803      	cmp	r0, #3
    dims_[i] = val;
  41d18e:	93e3      	str	r3, [sp, #908]	@ 0x38c
    for (int i = 0; i < size_increase; ++i) {
  41d190:	d006      	beq.n	41d1a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6fc>
  41d192:	2804      	cmp	r0, #4
    dims_[i] = val;
  41d194:	93e4      	str	r3, [sp, #912]	@ 0x390
    for (int i = 0; i < size_increase; ++i) {
  41d196:	d003      	beq.n	41d1a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6fc>
  41d198:	2805      	cmp	r0, #5
    dims_[i] = val;
  41d19a:	93e5      	str	r3, [sp, #916]	@ 0x394
    for (int i = 0; i < size_increase; ++i) {
  41d19c:	f040 8735 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41d1a0:	abe1      	add	r3, sp, #900	@ 0x384
  41d1a2:	0092      	lsls	r2, r2, #2
  41d1a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41d1a8:	a999      	add	r1, sp, #612	@ 0x264
  41d1aa:	f7f3 fa07 	bl	4105bc <memcpy>
      : size_(new_shape_size) {
  41d1ae:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41d1b0:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
      : size_(new_shape_size) {
  41d1b2:	93e6      	str	r3, [sp, #920]	@ 0x398
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41d1b4:	429a      	cmp	r2, r3
  41d1b6:	f300 8728 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41d1ba:	1a98      	subs	r0, r3, r2
  41d1bc:	d010      	beq.n	41d1e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x73c>
    dims_[i] = val;
  41d1be:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41d1c0:	4298      	cmp	r0, r3
    dims_[i] = val;
  41d1c2:	93e7      	str	r3, [sp, #924]	@ 0x39c
    for (int i = 0; i < size_increase; ++i) {
  41d1c4:	d00c      	beq.n	41d1e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x73c>
  41d1c6:	2802      	cmp	r0, #2
    dims_[i] = val;
  41d1c8:	93e8      	str	r3, [sp, #928]	@ 0x3a0
    for (int i = 0; i < size_increase; ++i) {
  41d1ca:	d009      	beq.n	41d1e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x73c>
  41d1cc:	2803      	cmp	r0, #3
    dims_[i] = val;
  41d1ce:	93e9      	str	r3, [sp, #932]	@ 0x3a4
    for (int i = 0; i < size_increase; ++i) {
  41d1d0:	d006      	beq.n	41d1e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x73c>
  41d1d2:	2804      	cmp	r0, #4
    dims_[i] = val;
  41d1d4:	93ea      	str	r3, [sp, #936]	@ 0x3a8
    for (int i = 0; i < size_increase; ++i) {
  41d1d6:	d003      	beq.n	41d1e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x73c>
  41d1d8:	2805      	cmp	r0, #5
    dims_[i] = val;
  41d1da:	93eb      	str	r3, [sp, #940]	@ 0x3ac
    for (int i = 0; i < size_increase; ++i) {
  41d1dc:	f040 8715 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41d1e0:	abe7      	add	r3, sp, #924	@ 0x39c
  41d1e2:	0092      	lsls	r2, r2, #2
  41d1e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41d1e8:	a99f      	add	r1, sp, #636	@ 0x27c
  41d1ea:	f7f3 f9e7 	bl	4105bc <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
  41d1ee:	f996 2000 	ldrsb.w	r2, [r6]
  41d1f2:	2a05      	cmp	r2, #5
  41d1f4:	f300 8709 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
  41d1f8:	f996 9018 	ldrsb.w	r9, [r6, #24]
  41d1fc:	f1b9 0f05 	cmp.w	r9, #5
  41d200:	f300 8703 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    left_padding_copy[i] = 0;
  41d204:	2300      	movs	r3, #0
  41d206:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41d20a:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
  41d20c:	f50d 78a0 	add.w	r8, sp, #320	@ 0x140
  41d210:	ed88 7f00 	stc	15, cr7, [r8]
  41d214:	f8c8 3010 	str.w	r3, [r8, #16]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41d218:	dd07      	ble.n	41d22a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x786>
                      op_params.left_padding_count] = op_params.left_padding[i];
  41d21a:	f1c2 0005 	rsb	r0, r2, #5
  41d21e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
  41d222:	0092      	lsls	r2, r2, #2
  41d224:	1d31      	adds	r1, r6, #4
  41d226:	f7f3 f9c9 	bl	4105bc <memcpy>
    right_padding_copy[i] = 0;
  41d22a:	2300      	movs	r3, #0
  41d22c:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41d230:	4599      	cmp	r9, r3
    right_padding_copy[i] = 0;
  41d232:	af56      	add	r7, sp, #344	@ 0x158
  41d234:	ed87 7f00 	stc	15, cr7, [r7]
  41d238:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41d23a:	dd09      	ble.n	41d250 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7ac>
                       op_params.right_padding_count] =
  41d23c:	f1c9 0005 	rsb	r0, r9, #5
  41d240:	f106 011c 	add.w	r1, r6, #28
  41d244:	ea4f 0289 	mov.w	r2, r9, lsl #2
  41d248:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  41d24c:	f7f3 f9b6 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41d250:	9be6      	ldr	r3, [sp, #920]	@ 0x398
  41d252:	2b00      	cmp	r3, #0
  41d254:	f340 86d9 	ble.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d258:	2b01      	cmp	r3, #1
    return dims_[i];
  41d25a:	98e7      	ldr	r0, [sp, #924]	@ 0x39c
    TFLITE_DCHECK_LT(i, size_);
  41d25c:	f000 86d5 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d260:	2b02      	cmp	r3, #2
    return dims_[i];
  41d262:	f8dd e3a0 	ldr.w	lr, [sp, #928]	@ 0x3a0
    TFLITE_DCHECK_LT(i, size_);
  41d266:	f000 86d0 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d26a:	2b03      	cmp	r3, #3
    return dims_[i];
  41d26c:	9ee9      	ldr	r6, [sp, #932]	@ 0x3a4
    TFLITE_DCHECK_LT(i, size_);
  41d26e:	f000 86cc 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d272:	2b04      	cmp	r3, #4
    return dims_[i];
  41d274:	f8dd b3a8 	ldr.w	fp, [sp, #936]	@ 0x3a8
    TFLITE_DCHECK_LT(i, size_);
  41d278:	f000 86c7 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41d27c:	2800      	cmp	r0, #0
  41d27e:	f77f adda 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
  41d282:	f1be 0f00 	cmp.w	lr, #0
  41d286:	f77f add6 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
    return dims_[i];
  41d28a:	9beb      	ldr	r3, [sp, #940]	@ 0x3ac
  const int right_d_padding = right_padding_copy[4];
  41d28c:	693a      	ldr	r2, [r7, #16]
  41d28e:	eea6 5b10 	vdup.32	q3, r5
  41d292:	1a99      	subs	r1, r3, r2
  const int right_b_padding = right_padding_copy[0];
  41d294:	683a      	ldr	r2, [r7, #0]
  41d296:	4299      	cmp	r1, r3
  41d298:	eba0 0a02 	sub.w	sl, r0, r2
  const int right_h_padding = right_padding_copy[2];
  41d29c:	68ba      	ldr	r2, [r7, #8]
  41d29e:	9106      	str	r1, [sp, #24]
                out_h >= output_height - right_h_padding ||
  41d2a0:	eba6 0202 	sub.w	r2, r6, r2
  41d2a4:	9202      	str	r2, [sp, #8]
  const int left_b_padding = left_padding_copy[0];
  41d2a6:	f8d8 2000 	ldr.w	r2, [r8]
  41d2aa:	bfa8      	it	ge
  41d2ac:	4619      	movge	r1, r3
  41d2ae:	9200      	str	r2, [sp, #0]
  const int left_p_padding = left_padding_copy[1];
  41d2b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41d2b4:	f04f 0c00 	mov.w	ip, #0
  const int left_p_padding = left_padding_copy[1];
  41d2b8:	9204      	str	r2, [sp, #16]
  const int left_h_padding = left_padding_copy[2];
  41d2ba:	f8d8 2008 	ldr.w	r2, [r8, #8]
  41d2be:	46d1      	mov	r9, sl
  41d2c0:	9205      	str	r2, [sp, #20]
  const int left_w_padding = left_padding_copy[3];
  41d2c2:	f8d8 200c 	ldr.w	r2, [r8, #12]
  41d2c6:	910c      	str	r1, [sp, #48]	@ 0x30
  41d2c8:	9209      	str	r2, [sp, #36]	@ 0x24
  const int left_d_padding = left_padding_copy[4];
  41d2ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
  const int right_p_padding = right_padding_copy[1];
  41d2ce:	f8d7 8004 	ldr.w	r8, [r7, #4]
  const int left_d_padding = left_padding_copy[4];
  41d2d2:	920a      	str	r2, [sp, #40]	@ 0x28
  const int right_w_padding = right_padding_copy[3];
  41d2d4:	68fa      	ldr	r2, [r7, #12]
  41d2d6:	4677      	mov	r7, lr
  41d2d8:	920b      	str	r2, [sp, #44]	@ 0x2c
  41d2da:	0099      	lsls	r1, r3, #2
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41d2dc:	f04f 0a00 	mov.w	sl, #0
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41d2e0:	2e00      	cmp	r6, #0
  41d2e2:	f340 8084 	ble.w	41d3ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94a>
  41d2e6:	f04f 0e00 	mov.w	lr, #0
                out_p >= output_plane - right_p_padding ||
  41d2ea:	eba7 0208 	sub.w	r2, r7, r8
  41d2ee:	9203      	str	r2, [sp, #12]
  41d2f0:	4672      	mov	r2, lr
  41d2f2:	e9cd 070d 	strd	r0, r7, [sp, #52]	@ 0x34
  41d2f6:	9601      	str	r6, [sp, #4]
  41d2f8:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41d2fc:	f1bb 0f00 	cmp.w	fp, #0
  41d300:	dd6c      	ble.n	41d3dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x938>
  41d302:	2000      	movs	r0, #0
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d304:	2b00      	cmp	r3, #0
  41d306:	dd66      	ble.n	41d3d6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x932>
  41d308:	9e00      	ldr	r6, [sp, #0]
  41d30a:	4566      	cmp	r6, ip
  41d30c:	dc7a      	bgt.n	41d404 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x960>
  41d30e:	45e1      	cmp	r9, ip
  41d310:	f340 8088 	ble.w	41d424 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x980>
  41d314:	9e04      	ldr	r6, [sp, #16]
  41d316:	4556      	cmp	r6, sl
  41d318:	dc7c      	bgt.n	41d414 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x970>
  41d31a:	9e03      	ldr	r6, [sp, #12]
  41d31c:	4556      	cmp	r6, sl
  41d31e:	f340 8089 	ble.w	41d434 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x990>
  41d322:	9e05      	ldr	r6, [sp, #20]
  41d324:	4296      	cmp	r6, r2
  41d326:	f300 808d 	bgt.w	41d444 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9a0>
  41d32a:	9e06      	ldr	r6, [sp, #24]
  41d32c:	2e00      	cmp	r6, #0
  41d32e:	f340 8091 	ble.w	41d454 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9b0>
              *out_ptr++ = pad_value;
  41d332:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d334:	4626      	mov	r6, r4
  41d336:	2f01      	cmp	r7, #1
  41d338:	bfb8      	it	lt
  41d33a:	2701      	movlt	r7, #1
  41d33c:	f04f 0800 	mov.w	r8, #0
  41d340:	46be      	mov	lr, r7
  41d342:	9307      	str	r3, [sp, #28]
                out_h < left_h_padding ||
  41d344:	9b02      	ldr	r3, [sp, #8]
              *out_ptr++ = pad_value;
  41d346:	462f      	mov	r7, r5
                out_h < left_h_padding ||
  41d348:	429a      	cmp	r2, r3
              *out_ptr++ = *in_ptr++;
  41d34a:	f106 0604 	add.w	r6, r6, #4
                out_h < left_h_padding ||
  41d34e:	da0e      	bge.n	41d36e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8ca>
                out_h >= output_height - right_h_padding ||
  41d350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  41d352:	4283      	cmp	r3, r0
  41d354:	dc0b      	bgt.n	41d36e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8ca>
                out_w >= output_width - right_w_padding ||
  41d356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41d358:	ebab 0303 	sub.w	r3, fp, r3
                out_w < left_w_padding ||
  41d35c:	4298      	cmp	r0, r3
  41d35e:	da06      	bge.n	41d36e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8ca>
                out_w >= output_width - right_w_padding ||
  41d360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41d362:	4543      	cmp	r3, r8
  41d364:	dc03      	bgt.n	41d36e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8ca>
              *out_ptr++ = *in_ptr++;
  41d366:	9b08      	ldr	r3, [sp, #32]
  41d368:	f853 7b04 	ldr.w	r7, [r3], #4
  41d36c:	9308      	str	r3, [sp, #32]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d36e:	f1be 0e01 	subs.w	lr, lr, #1
  41d372:	f846 7c04 	str.w	r7, [r6, #-4]
  41d376:	f108 0801 	add.w	r8, r8, #1
  41d37a:	d1e3      	bne.n	41d344 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8a0>
  41d37c:	9b07      	ldr	r3, [sp, #28]
  41d37e:	4543      	cmp	r3, r8
  41d380:	dd28      	ble.n	41d3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x930>
  41d382:	eba3 0708 	sub.w	r7, r3, r8
  41d386:	4543      	cmp	r3, r8
  41d388:	f107 3eff 	add.w	lr, r7, #4294967295	@ 0xffffffff
  41d38c:	bfd8      	it	le
  41d38e:	2701      	movle	r7, #1
  41d390:	f1be 0f02 	cmp.w	lr, #2
  41d394:	9707      	str	r7, [sp, #28]
  41d396:	d912      	bls.n	41d3be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x91a>
  41d398:	4543      	cmp	r3, r8
  41d39a:	dd10      	ble.n	41d3be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x91a>
  41d39c:	08bf      	lsrs	r7, r7, #2
  41d39e:	f047 e001 	dls	lr, r7
  41d3a2:	4637      	mov	r7, r6
  41d3a4:	eca7 7f04 	stc	15, cr7, [r7], #16
  41d3a8:	f00f c005 	le	lr, 41d3a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x900>
  41d3ac:	9f07      	ldr	r7, [sp, #28]
  41d3ae:	f027 0703 	bic.w	r7, r7, #3
  41d3b2:	44b8      	add	r8, r7
  41d3b4:	eb06 0687 	add.w	r6, r6, r7, lsl #2
  41d3b8:	9f07      	ldr	r7, [sp, #28]
  41d3ba:	07bf      	lsls	r7, r7, #30
  41d3bc:	d00a      	beq.n	41d3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x930>
  41d3be:	f108 0701 	add.w	r7, r8, #1
  41d3c2:	42bb      	cmp	r3, r7
  41d3c4:	6035      	str	r5, [r6, #0]
  41d3c6:	dd05      	ble.n	41d3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x930>
  41d3c8:	f108 0702 	add.w	r7, r8, #2
  41d3cc:	42bb      	cmp	r3, r7
  41d3ce:	6075      	str	r5, [r6, #4]
  41d3d0:	dd00      	ble.n	41d3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x930>
  41d3d2:	60b5      	str	r5, [r6, #8]
              *out_ptr++ = *in_ptr++;
  41d3d4:	440c      	add	r4, r1
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41d3d6:	3001      	adds	r0, #1
  41d3d8:	4583      	cmp	fp, r0
  41d3da:	d193      	bne.n	41d304 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x860>
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41d3dc:	9801      	ldr	r0, [sp, #4]
  41d3de:	3201      	adds	r2, #1
  41d3e0:	4290      	cmp	r0, r2
  41d3e2:	d18b      	bne.n	41d2fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
  41d3e4:	f8dd 803c 	ldr.w	r8, [sp, #60]	@ 0x3c
  41d3e8:	4606      	mov	r6, r0
  41d3ea:	e9dd 070d 	ldrd	r0, r7, [sp, #52]	@ 0x34
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41d3ee:	f10a 0a01 	add.w	sl, sl, #1
  41d3f2:	4557      	cmp	r7, sl
  41d3f4:	f47f af74 	bne.w	41d2e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x83c>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41d3f8:	f10c 0c01 	add.w	ip, ip, #1
  41d3fc:	4560      	cmp	r0, ip
  41d3fe:	f47f af6d 	bne.w	41d2dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x838>
  41d402:	e518      	b.n	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d404:	4626      	mov	r6, r4
  41d406:	f043 e001 	dls	lr, r3
  41d40a:	f846 5b04 	str.w	r5, [r6], #4
  41d40e:	f00f c005 	le	lr, 41d40a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x966>
  41d412:	e7df      	b.n	41d3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x930>
  41d414:	4626      	mov	r6, r4
  41d416:	f043 e001 	dls	lr, r3
  41d41a:	f846 5b04 	str.w	r5, [r6], #4
  41d41e:	f00f c005 	le	lr, 41d41a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x976>
  41d422:	e7d7      	b.n	41d3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x930>
  41d424:	4626      	mov	r6, r4
  41d426:	f043 e001 	dls	lr, r3
  41d42a:	f846 5b04 	str.w	r5, [r6], #4
  41d42e:	f00f c005 	le	lr, 41d42a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x986>
  41d432:	e7cf      	b.n	41d3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x930>
  41d434:	4626      	mov	r6, r4
  41d436:	f043 e001 	dls	lr, r3
  41d43a:	f846 5b04 	str.w	r5, [r6], #4
  41d43e:	f00f c005 	le	lr, 41d43a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x996>
  41d442:	e7c7      	b.n	41d3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x930>
  41d444:	4626      	mov	r6, r4
  41d446:	f043 e001 	dls	lr, r3
  41d44a:	f846 5b04 	str.w	r5, [r6], #4
  41d44e:	f00f c005 	le	lr, 41d44a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9a6>
  41d452:	e7bf      	b.n	41d3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x930>
  41d454:	4626      	mov	r6, r4
  41d456:	f04f 0800 	mov.w	r8, #0
  41d45a:	e792      	b.n	41d382 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8de>
      if (constant_values == nullptr) {
  41d45c:	2d00      	cmp	r5, #0
  41d45e:	f000 859f 	beq.w	41dfa0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14fc>
        pad_value = *tflite::micro::GetTensorData<int8_t>(constant_values);
  41d462:	682b      	ldr	r3, [r5, #0]
  41d464:	f993 a000 	ldrsb.w	sl, [r3]
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
  41d468:	f896 5030 	ldrb.w	r5, [r6, #48]	@ 0x30
            data->params, tflite::micro::GetTensorShape(input),
  41d46c:	4639      	mov	r1, r7
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
  41d46e:	2d01      	cmp	r5, #1
  41d470:	f000 81eb 	beq.w	41d84a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda6>
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
  41d474:	a880      	add	r0, sp, #512	@ 0x200
  41d476:	f7ff f89b 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41d47a:	683b      	ldr	r3, [r7, #0]
                           &pad_value, tflite::micro::GetTensorShape(output),
  41d47c:	4621      	mov	r1, r4
  41d47e:	a886      	add	r0, sp, #536	@ 0x218
  41d480:	930b      	str	r3, [sp, #44]	@ 0x2c
  41d482:	f7ff f895 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41d486:	2c00      	cmp	r4, #0
  41d488:	f000 85bf 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
      : size_(new_shape_size) {
  41d48c:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41d48e:	9a80      	ldr	r2, [sp, #512]	@ 0x200
  return reinterpret_cast<T*>(tensor->data.raw);
  41d490:	6824      	ldr	r4, [r4, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41d492:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
  41d494:	93c8      	str	r3, [sp, #800]	@ 0x320
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41d496:	f300 85b8 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41d49a:	1a98      	subs	r0, r3, r2
  41d49c:	d010      	beq.n	41d4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa1c>
    dims_[i] = val;
  41d49e:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41d4a0:	4298      	cmp	r0, r3
    dims_[i] = val;
  41d4a2:	93c9      	str	r3, [sp, #804]	@ 0x324
    for (int i = 0; i < size_increase; ++i) {
  41d4a4:	d00c      	beq.n	41d4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa1c>
  41d4a6:	2802      	cmp	r0, #2
    dims_[i] = val;
  41d4a8:	93ca      	str	r3, [sp, #808]	@ 0x328
    for (int i = 0; i < size_increase; ++i) {
  41d4aa:	d009      	beq.n	41d4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa1c>
  41d4ac:	2803      	cmp	r0, #3
    dims_[i] = val;
  41d4ae:	93cb      	str	r3, [sp, #812]	@ 0x32c
    for (int i = 0; i < size_increase; ++i) {
  41d4b0:	d006      	beq.n	41d4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa1c>
  41d4b2:	2804      	cmp	r0, #4
    dims_[i] = val;
  41d4b4:	93cc      	str	r3, [sp, #816]	@ 0x330
    for (int i = 0; i < size_increase; ++i) {
  41d4b6:	d003      	beq.n	41d4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa1c>
  41d4b8:	2805      	cmp	r0, #5
    dims_[i] = val;
  41d4ba:	93cd      	str	r3, [sp, #820]	@ 0x334
    for (int i = 0; i < size_increase; ++i) {
  41d4bc:	f040 85a5 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41d4c0:	abc9      	add	r3, sp, #804	@ 0x324
  41d4c2:	0092      	lsls	r2, r2, #2
  41d4c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41d4c8:	a981      	add	r1, sp, #516	@ 0x204
  41d4ca:	f7f3 f877 	bl	4105bc <memcpy>
      : size_(new_shape_size) {
  41d4ce:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41d4d0:	9a86      	ldr	r2, [sp, #536]	@ 0x218
      : size_(new_shape_size) {
  41d4d2:	93ce      	str	r3, [sp, #824]	@ 0x338
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41d4d4:	429a      	cmp	r2, r3
  41d4d6:	f300 8598 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41d4da:	1a98      	subs	r0, r3, r2
  41d4dc:	d010      	beq.n	41d500 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa5c>
    dims_[i] = val;
  41d4de:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41d4e0:	4298      	cmp	r0, r3
    dims_[i] = val;
  41d4e2:	93cf      	str	r3, [sp, #828]	@ 0x33c
    for (int i = 0; i < size_increase; ++i) {
  41d4e4:	d00c      	beq.n	41d500 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa5c>
  41d4e6:	2802      	cmp	r0, #2
    dims_[i] = val;
  41d4e8:	93d0      	str	r3, [sp, #832]	@ 0x340
    for (int i = 0; i < size_increase; ++i) {
  41d4ea:	d009      	beq.n	41d500 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa5c>
  41d4ec:	2803      	cmp	r0, #3
    dims_[i] = val;
  41d4ee:	93d1      	str	r3, [sp, #836]	@ 0x344
    for (int i = 0; i < size_increase; ++i) {
  41d4f0:	d006      	beq.n	41d500 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa5c>
  41d4f2:	2804      	cmp	r0, #4
    dims_[i] = val;
  41d4f4:	93d2      	str	r3, [sp, #840]	@ 0x348
    for (int i = 0; i < size_increase; ++i) {
  41d4f6:	d003      	beq.n	41d500 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa5c>
  41d4f8:	2805      	cmp	r0, #5
    dims_[i] = val;
  41d4fa:	93d3      	str	r3, [sp, #844]	@ 0x34c
    for (int i = 0; i < size_increase; ++i) {
  41d4fc:	f040 8585 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41d500:	abcf      	add	r3, sp, #828	@ 0x33c
  41d502:	0092      	lsls	r2, r2, #2
  41d504:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41d508:	a987      	add	r1, sp, #540	@ 0x21c
  41d50a:	f7f3 f857 	bl	4105bc <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
  41d50e:	f996 2000 	ldrsb.w	r2, [r6]
  41d512:	2a05      	cmp	r2, #5
  41d514:	f300 8579 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
  41d518:	f996 8018 	ldrsb.w	r8, [r6, #24]
  41d51c:	f1b8 0f05 	cmp.w	r8, #5
  41d520:	f300 8573 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    left_padding_copy[i] = 0;
  41d524:	2300      	movs	r3, #0
  41d526:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41d52a:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
  41d52c:	af38      	add	r7, sp, #224	@ 0xe0
  41d52e:	ed87 7f00 	stc	15, cr7, [r7]
  41d532:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41d534:	dd07      	ble.n	41d546 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xaa2>
                      op_params.left_padding_count] = op_params.left_padding[i];
  41d536:	f1c2 0005 	rsb	r0, r2, #5
  41d53a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  41d53e:	0092      	lsls	r2, r2, #2
  41d540:	1d31      	adds	r1, r6, #4
  41d542:	f7f3 f83b 	bl	4105bc <memcpy>
    right_padding_copy[i] = 0;
  41d546:	2300      	movs	r3, #0
  41d548:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41d54c:	4598      	cmp	r8, r3
    right_padding_copy[i] = 0;
  41d54e:	ad3e      	add	r5, sp, #248	@ 0xf8
  41d550:	ed85 7f00 	stc	15, cr7, [r5]
  41d554:	612b      	str	r3, [r5, #16]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41d556:	dd09      	ble.n	41d56c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xac8>
                       op_params.right_padding_count] =
  41d558:	f1c8 0005 	rsb	r0, r8, #5
  41d55c:	f106 011c 	add.w	r1, r6, #28
  41d560:	ea4f 0288 	mov.w	r2, r8, lsl #2
  41d564:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  41d568:	f7f3 f828 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41d56c:	9bce      	ldr	r3, [sp, #824]	@ 0x338
  41d56e:	2b00      	cmp	r3, #0
  41d570:	f340 854b 	ble.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d574:	2b01      	cmp	r3, #1
    return dims_[i];
  41d576:	98cf      	ldr	r0, [sp, #828]	@ 0x33c
    TFLITE_DCHECK_LT(i, size_);
  41d578:	f000 8547 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d57c:	2b02      	cmp	r3, #2
    return dims_[i];
  41d57e:	f8dd c340 	ldr.w	ip, [sp, #832]	@ 0x340
    TFLITE_DCHECK_LT(i, size_);
  41d582:	f000 8542 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d586:	2b03      	cmp	r3, #3
    return dims_[i];
  41d588:	9ed1      	ldr	r6, [sp, #836]	@ 0x344
    TFLITE_DCHECK_LT(i, size_);
  41d58a:	f000 853e 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    return dims_[i];
  41d58e:	9ad2      	ldr	r2, [sp, #840]	@ 0x348
    TFLITE_DCHECK_LT(i, size_);
  41d590:	2b04      	cmp	r3, #4
    return dims_[i];
  41d592:	9201      	str	r2, [sp, #4]
    TFLITE_DCHECK_LT(i, size_);
  41d594:	f000 8539 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41d598:	2800      	cmp	r0, #0
  41d59a:	f77f ac4c 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
  41d59e:	f1bc 0f00 	cmp.w	ip, #0
  41d5a2:	f77f ac48 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
    return dims_[i];
  41d5a6:	9bd3      	ldr	r3, [sp, #844]	@ 0x34c
  const int right_d_padding = right_padding_copy[4];
  41d5a8:	692a      	ldr	r2, [r5, #16]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41d5aa:	f04f 0800 	mov.w	r8, #0
  41d5ae:	1a9a      	subs	r2, r3, r2
  41d5b0:	429a      	cmp	r2, r3
  41d5b2:	920d      	str	r2, [sp, #52]	@ 0x34
  41d5b4:	bfa8      	it	ge
  41d5b6:	461a      	movge	r2, r3
  41d5b8:	9212      	str	r2, [sp, #72]	@ 0x48
  const int right_b_padding = right_padding_copy[0];
  41d5ba:	682a      	ldr	r2, [r5, #0]
  41d5bc:	eee6 ab10 	vdup.8	q3, sl
  41d5c0:	1a82      	subs	r2, r0, r2
  41d5c2:	9203      	str	r2, [sp, #12]
  const int right_h_padding = right_padding_copy[2];
  41d5c4:	68aa      	ldr	r2, [r5, #8]
                out_h >= output_height - right_h_padding ||
  41d5c6:	1ab2      	subs	r2, r6, r2
  41d5c8:	9205      	str	r2, [sp, #20]
  const int left_b_padding = left_padding_copy[0];
  41d5ca:	683a      	ldr	r2, [r7, #0]
  41d5cc:	9202      	str	r2, [sp, #8]
  const int left_h_padding = left_padding_copy[2];
  41d5ce:	e9d7 b201 	ldrd	fp, r2, [r7, #4]
  41d5d2:	9209      	str	r2, [sp, #36]	@ 0x24
  const int left_w_padding = left_padding_copy[3];
  41d5d4:	68fa      	ldr	r2, [r7, #12]
  41d5d6:	920e      	str	r2, [sp, #56]	@ 0x38
  const int left_d_padding = left_padding_copy[4];
  41d5d8:	693a      	ldr	r2, [r7, #16]
  const int right_p_padding = right_padding_copy[1];
  41d5da:	686f      	ldr	r7, [r5, #4]
  const int left_d_padding = left_padding_copy[4];
  41d5dc:	920f      	str	r2, [sp, #60]	@ 0x3c
  const int right_w_padding = right_padding_copy[3];
  41d5de:	68ea      	ldr	r2, [r5, #12]
  41d5e0:	9210      	str	r2, [sp, #64]	@ 0x40
  41d5e2:	4602      	mov	r2, r0
  41d5e4:	4660      	mov	r0, ip
  41d5e6:	46c4      	mov	ip, r8
  41d5e8:	46d8      	mov	r8, fp
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41d5ea:	f04f 0b00 	mov.w	fp, #0
  41d5ee:	4615      	mov	r5, r2
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41d5f0:	2e00      	cmp	r6, #0
  41d5f2:	f340 80ec 	ble.w	41d7ce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd2a>
  41d5f6:	2200      	movs	r2, #0
  41d5f8:	46a9      	mov	r9, r5
                out_p >= output_plane - right_p_padding ||
  41d5fa:	1bc1      	subs	r1, r0, r7
  41d5fc:	9106      	str	r1, [sp, #24]
  41d5fe:	9013      	str	r0, [sp, #76]	@ 0x4c
  41d600:	9604      	str	r6, [sp, #16]
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41d602:	9901      	ldr	r1, [sp, #4]
  41d604:	2900      	cmp	r1, #0
  41d606:	f340 80da 	ble.w	41d7be <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd1a>
  41d60a:	2100      	movs	r1, #0
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d60c:	2b00      	cmp	r3, #0
  41d60e:	f340 80d1 	ble.w	41d7b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd10>
  41d612:	9802      	ldr	r0, [sp, #8]
  41d614:	4560      	cmp	r0, ip
  41d616:	f300 80ef 	bgt.w	41d7f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd54>
  41d61a:	9803      	ldr	r0, [sp, #12]
  41d61c:	4560      	cmp	r0, ip
  41d61e:	f340 80e3 	ble.w	41d7e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd44>
  41d622:	45d8      	cmp	r8, fp
  41d624:	f300 80f0 	bgt.w	41d808 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd64>
  41d628:	9806      	ldr	r0, [sp, #24]
  41d62a:	4558      	cmp	r0, fp
  41d62c:	f340 80f4 	ble.w	41d818 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd74>
  41d630:	9809      	ldr	r0, [sp, #36]	@ 0x24
  41d632:	4290      	cmp	r0, r2
  41d634:	f300 80f8 	bgt.w	41d828 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd84>
  41d638:	980d      	ldr	r0, [sp, #52]	@ 0x34
  41d63a:	2800      	cmp	r0, #0
  41d63c:	f340 80fc 	ble.w	41d838 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd94>
              *out_ptr++ = pad_value;
  41d640:	9d12      	ldr	r5, [sp, #72]	@ 0x48
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d642:	4620      	mov	r0, r4
  41d644:	2d01      	cmp	r5, #1
  41d646:	bfb8      	it	lt
  41d648:	2501      	movlt	r5, #1
  41d64a:	2600      	movs	r6, #0
  41d64c:	46ae      	mov	lr, r5
  41d64e:	e9cd 4307 	strd	r4, r3, [sp, #28]
  41d652:	9500      	str	r5, [sp, #0]
                out_h < left_h_padding ||
  41d654:	9b05      	ldr	r3, [sp, #20]
              *out_ptr++ = pad_value;
  41d656:	4655      	mov	r5, sl
                out_h < left_h_padding ||
  41d658:	429a      	cmp	r2, r3
              *out_ptr++ = *in_ptr++;
  41d65a:	f100 0001 	add.w	r0, r0, #1
                out_h < left_h_padding ||
  41d65e:	da11      	bge.n	41d684 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe0>
                out_h >= output_height - right_h_padding ||
  41d660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  41d662:	4299      	cmp	r1, r3
  41d664:	db0e      	blt.n	41d684 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe0>
                out_w >= output_width - right_w_padding ||
  41d666:	9b01      	ldr	r3, [sp, #4]
  41d668:	9c10      	ldr	r4, [sp, #64]	@ 0x40
  41d66a:	eba3 0e04 	sub.w	lr, r3, r4
                out_w < left_w_padding ||
  41d66e:	4571      	cmp	r1, lr
  41d670:	da08      	bge.n	41d684 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe0>
                out_w >= output_width - right_w_padding ||
  41d672:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  41d674:	42b3      	cmp	r3, r6
  41d676:	dc05      	bgt.n	41d684 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe0>
              *out_ptr++ = *in_ptr++;
  41d678:	f8dd e02c 	ldr.w	lr, [sp, #44]	@ 0x2c
  41d67c:	f91e 5b01 	ldrsb.w	r5, [lr], #1
  41d680:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d684:	9b00      	ldr	r3, [sp, #0]
  41d686:	f800 5c01 	strb.w	r5, [r0, #-1]
  41d68a:	3b01      	subs	r3, #1
  41d68c:	f106 0601 	add.w	r6, r6, #1
  41d690:	9300      	str	r3, [sp, #0]
  41d692:	d1df      	bne.n	41d654 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbb0>
  41d694:	9b08      	ldr	r3, [sp, #32]
  41d696:	9c07      	ldr	r4, [sp, #28]
  41d698:	429e      	cmp	r6, r3
  41d69a:	9600      	str	r6, [sp, #0]
  41d69c:	9007      	str	r0, [sp, #28]
  41d69e:	f280 8087 	bge.w	41d7b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0c>
  41d6a2:	9800      	ldr	r0, [sp, #0]
  41d6a4:	4283      	cmp	r3, r0
  41d6a6:	eba3 0500 	sub.w	r5, r3, r0
  41d6aa:	bfcc      	ite	gt
  41d6ac:	4628      	movgt	r0, r5
  41d6ae:	2001      	movle	r0, #1
  41d6b0:	f105 3eff 	add.w	lr, r5, #4294967295	@ 0xffffffff
  41d6b4:	f1be 0f0e 	cmp.w	lr, #14
  41d6b8:	900c      	str	r0, [sp, #48]	@ 0x30
  41d6ba:	f240 80c1 	bls.w	41d840 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd9c>
  41d6be:	9d00      	ldr	r5, [sp, #0]
  41d6c0:	42ab      	cmp	r3, r5
  41d6c2:	f340 80bd 	ble.w	41d840 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd9c>
  41d6c6:	462e      	mov	r6, r5
  41d6c8:	f020 050f 	bic.w	r5, r0, #15
  41d6cc:	9807      	ldr	r0, [sp, #28]
  41d6ce:	f1a5 0e10 	sub.w	lr, r5, #16
  41d6d2:	900a      	str	r0, [sp, #40]	@ 0x28
  41d6d4:	9508      	str	r5, [sp, #32]
  41d6d6:	1828      	adds	r0, r5, r0
  41d6d8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41d6dc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  41d6de:	f10e 0e01 	add.w	lr, lr, #1
  41d6e2:	9011      	str	r0, [sp, #68]	@ 0x44
  41d6e4:	f04e e001 	dls	lr, lr
  41d6e8:	4628      	mov	r0, r5
  41d6ea:	eca5 7e10 	stc	14, cr7, [r5], #64	@ 0x40
  41d6ee:	f00f c005 	le	lr, 41d6ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc46>
  41d6f2:	4635      	mov	r5, r6
  41d6f4:	9007      	str	r0, [sp, #28]
  41d6f6:	9811      	ldr	r0, [sp, #68]	@ 0x44
  41d6f8:	900a      	str	r0, [sp, #40]	@ 0x28
  41d6fa:	9808      	ldr	r0, [sp, #32]
  41d6fc:	4405      	add	r5, r0
  41d6fe:	9500      	str	r5, [sp, #0]
  41d700:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  41d702:	42a8      	cmp	r0, r5
  41d704:	d054      	beq.n	41d7b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0c>
  41d706:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  41d708:	9e08      	ldr	r6, [sp, #32]
  41d70a:	1bad      	subs	r5, r5, r6
  41d70c:	4628      	mov	r0, r5
  41d70e:	3d01      	subs	r5, #1
  41d710:	2d06      	cmp	r5, #6
  41d712:	d926      	bls.n	41d762 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcbe>
  41d714:	2500      	movs	r5, #0
  41d716:	f020 0e07 	bic.w	lr, r0, #7
  41d71a:	900c      	str	r0, [sp, #48]	@ 0x30
  41d71c:	9800      	ldr	r0, [sp, #0]
  41d71e:	4470      	add	r0, lr
  41d720:	9000      	str	r0, [sp, #0]
  41d722:	980a      	ldr	r0, [sp, #40]	@ 0x28
  41d724:	4470      	add	r0, lr
  41d726:	900a      	str	r0, [sp, #40]	@ 0x28
  41d728:	4630      	mov	r0, r6
  41d72a:	46ae      	mov	lr, r5
  41d72c:	9e07      	ldr	r6, [sp, #28]
  41d72e:	f36a 0507 	bfi	r5, sl, #0, #8
  41d732:	4430      	add	r0, r6
  41d734:	f36a 250f 	bfi	r5, sl, #8, #8
  41d738:	9007      	str	r0, [sp, #28]
  41d73a:	f36a 4517 	bfi	r5, sl, #16, #8
  41d73e:	9808      	ldr	r0, [sp, #32]
  41d740:	f36a 0e07 	bfi	lr, sl, #0, #8
  41d744:	f36a 651f 	bfi	r5, sl, #24, #8
  41d748:	f36a 2e0f 	bfi	lr, sl, #8, #8
  41d74c:	5035      	str	r5, [r6, r0]
  41d74e:	f36a 4e17 	bfi	lr, sl, #16, #8
  41d752:	9807      	ldr	r0, [sp, #28]
  41d754:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  41d756:	f36a 6e1f 	bfi	lr, sl, #24, #8
  41d75a:	f8c0 e004 	str.w	lr, [r0, #4]
  41d75e:	0768      	lsls	r0, r5, #29
  41d760:	d026      	beq.n	41d7b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0c>
  41d762:	9800      	ldr	r0, [sp, #0]
  41d764:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  41d766:	3001      	adds	r0, #1
  41d768:	4283      	cmp	r3, r0
  41d76a:	f885 a000 	strb.w	sl, [r5]
  41d76e:	dd1f      	ble.n	41d7b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0c>
  41d770:	9800      	ldr	r0, [sp, #0]
  41d772:	f885 a001 	strb.w	sl, [r5, #1]
  41d776:	3002      	adds	r0, #2
  41d778:	4283      	cmp	r3, r0
  41d77a:	dd19      	ble.n	41d7b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0c>
  41d77c:	9800      	ldr	r0, [sp, #0]
  41d77e:	f885 a002 	strb.w	sl, [r5, #2]
  41d782:	3003      	adds	r0, #3
  41d784:	4283      	cmp	r3, r0
  41d786:	dd13      	ble.n	41d7b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0c>
  41d788:	9800      	ldr	r0, [sp, #0]
  41d78a:	f885 a003 	strb.w	sl, [r5, #3]
  41d78e:	3004      	adds	r0, #4
  41d790:	4283      	cmp	r3, r0
  41d792:	dd0d      	ble.n	41d7b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0c>
  41d794:	9800      	ldr	r0, [sp, #0]
  41d796:	f885 a004 	strb.w	sl, [r5, #4]
  41d79a:	3005      	adds	r0, #5
  41d79c:	4283      	cmp	r3, r0
  41d79e:	dd07      	ble.n	41d7b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0c>
  41d7a0:	9800      	ldr	r0, [sp, #0]
  41d7a2:	f885 a005 	strb.w	sl, [r5, #5]
  41d7a6:	3006      	adds	r0, #6
  41d7a8:	4283      	cmp	r3, r0
  41d7aa:	dd01      	ble.n	41d7b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0c>
  41d7ac:	f885 a006 	strb.w	sl, [r5, #6]
              *out_ptr++ = *in_ptr++;
  41d7b0:	18e0      	adds	r0, r4, r3
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d7b2:	4604      	mov	r4, r0
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41d7b4:	9801      	ldr	r0, [sp, #4]
  41d7b6:	3101      	adds	r1, #1
  41d7b8:	4288      	cmp	r0, r1
  41d7ba:	f47f af27 	bne.w	41d60c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb68>
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41d7be:	9904      	ldr	r1, [sp, #16]
  41d7c0:	3201      	adds	r2, #1
  41d7c2:	4291      	cmp	r1, r2
  41d7c4:	f47f af1d 	bne.w	41d602 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb5e>
  41d7c8:	460e      	mov	r6, r1
  41d7ca:	464d      	mov	r5, r9
  41d7cc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41d7ce:	f10b 0b01 	add.w	fp, fp, #1
  41d7d2:	4558      	cmp	r0, fp
  41d7d4:	f47f af0c 	bne.w	41d5f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4c>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41d7d8:	f10c 0c01 	add.w	ip, ip, #1
  41d7dc:	4565      	cmp	r5, ip
  41d7de:	462a      	mov	r2, r5
  41d7e0:	f47f af03 	bne.w	41d5ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb46>
  41d7e4:	f7ff bb27 	b.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
  41d7e8:	f043 e001 	dls	lr, r3
  41d7ec:	18e0      	adds	r0, r4, r3
  41d7ee:	f804 ab01 	strb.w	sl, [r4], #1
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d7f2:	f00f c005 	le	lr, 41d7ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd4a>
  41d7f6:	e7dc      	b.n	41d7b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0e>
  41d7f8:	f043 e001 	dls	lr, r3
  41d7fc:	18e0      	adds	r0, r4, r3
  41d7fe:	f804 ab01 	strb.w	sl, [r4], #1
  41d802:	f00f c005 	le	lr, 41d7fe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd5a>
  41d806:	e7d4      	b.n	41d7b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0e>
  41d808:	f043 e001 	dls	lr, r3
  41d80c:	18e0      	adds	r0, r4, r3
  41d80e:	f804 ab01 	strb.w	sl, [r4], #1
  41d812:	f00f c005 	le	lr, 41d80e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd6a>
  41d816:	e7cc      	b.n	41d7b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0e>
  41d818:	f043 e001 	dls	lr, r3
  41d81c:	18e0      	adds	r0, r4, r3
  41d81e:	f804 ab01 	strb.w	sl, [r4], #1
  41d822:	f00f c005 	le	lr, 41d81e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd7a>
  41d826:	e7c4      	b.n	41d7b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0e>
  41d828:	f043 e001 	dls	lr, r3
  41d82c:	18e0      	adds	r0, r4, r3
  41d82e:	f804 ab01 	strb.w	sl, [r4], #1
  41d832:	f00f c005 	le	lr, 41d82e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd8a>
  41d836:	e7bc      	b.n	41d7b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0e>
  41d838:	2000      	movs	r0, #0
  41d83a:	9407      	str	r4, [sp, #28]
  41d83c:	9000      	str	r0, [sp, #0]
  41d83e:	e730      	b.n	41d6a2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbfe>
  41d840:	9807      	ldr	r0, [sp, #28]
  41d842:	900a      	str	r0, [sp, #40]	@ 0x28
  41d844:	2000      	movs	r0, #0
  41d846:	9008      	str	r0, [sp, #32]
  41d848:	e75d      	b.n	41d706 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc62>
            data->params, tflite::micro::GetTensorShape(input),
  41d84a:	a874      	add	r0, sp, #464	@ 0x1d0
  41d84c:	f7fe feb0 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41d850:	683b      	ldr	r3, [r7, #0]
            tflite::micro::GetTensorShape(output),
  41d852:	4621      	mov	r1, r4
  41d854:	a87a      	add	r0, sp, #488	@ 0x1e8
  41d856:	9307      	str	r3, [sp, #28]
  41d858:	f7fe feaa 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41d85c:	2c00      	cmp	r4, #0
  41d85e:	f000 83d4 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
      : size_(new_shape_size) {
  41d862:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41d864:	9a74      	ldr	r2, [sp, #464]	@ 0x1d0
  return reinterpret_cast<T*>(tensor->data.raw);
  41d866:	6824      	ldr	r4, [r4, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41d868:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
  41d86a:	93bc      	str	r3, [sp, #752]	@ 0x2f0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41d86c:	f300 83cd 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41d870:	1a98      	subs	r0, r3, r2
  41d872:	d00f      	beq.n	41d894 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xdf0>
  41d874:	2801      	cmp	r0, #1
    dims_[i] = val;
  41d876:	95bd      	str	r5, [sp, #756]	@ 0x2f4
    for (int i = 0; i < size_increase; ++i) {
  41d878:	d00c      	beq.n	41d894 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xdf0>
  41d87a:	2802      	cmp	r0, #2
    dims_[i] = val;
  41d87c:	95be      	str	r5, [sp, #760]	@ 0x2f8
    for (int i = 0; i < size_increase; ++i) {
  41d87e:	d009      	beq.n	41d894 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xdf0>
  41d880:	2803      	cmp	r0, #3
    dims_[i] = val;
  41d882:	95bf      	str	r5, [sp, #764]	@ 0x2fc
    for (int i = 0; i < size_increase; ++i) {
  41d884:	d006      	beq.n	41d894 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xdf0>
  41d886:	2804      	cmp	r0, #4
    dims_[i] = val;
  41d888:	95c0      	str	r5, [sp, #768]	@ 0x300
    for (int i = 0; i < size_increase; ++i) {
  41d88a:	d003      	beq.n	41d894 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xdf0>
  41d88c:	4298      	cmp	r0, r3
    dims_[i] = val;
  41d88e:	95c1      	str	r5, [sp, #772]	@ 0x304
    for (int i = 0; i < size_increase; ++i) {
  41d890:	f040 83bb 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41d894:	abbd      	add	r3, sp, #756	@ 0x2f4
  41d896:	0092      	lsls	r2, r2, #2
  41d898:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41d89c:	a975      	add	r1, sp, #468	@ 0x1d4
  41d89e:	f7f2 fe8d 	bl	4105bc <memcpy>
      : size_(new_shape_size) {
  41d8a2:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41d8a4:	9a7a      	ldr	r2, [sp, #488]	@ 0x1e8
      : size_(new_shape_size) {
  41d8a6:	93c2      	str	r3, [sp, #776]	@ 0x308
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41d8a8:	429a      	cmp	r2, r3
  41d8aa:	f300 83ae 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41d8ae:	1a98      	subs	r0, r3, r2
  41d8b0:	d010      	beq.n	41d8d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe30>
    dims_[i] = val;
  41d8b2:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41d8b4:	4298      	cmp	r0, r3
    dims_[i] = val;
  41d8b6:	93c3      	str	r3, [sp, #780]	@ 0x30c
    for (int i = 0; i < size_increase; ++i) {
  41d8b8:	d00c      	beq.n	41d8d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe30>
  41d8ba:	2802      	cmp	r0, #2
    dims_[i] = val;
  41d8bc:	93c4      	str	r3, [sp, #784]	@ 0x310
    for (int i = 0; i < size_increase; ++i) {
  41d8be:	d009      	beq.n	41d8d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe30>
  41d8c0:	2803      	cmp	r0, #3
    dims_[i] = val;
  41d8c2:	93c5      	str	r3, [sp, #788]	@ 0x314
    for (int i = 0; i < size_increase; ++i) {
  41d8c4:	d006      	beq.n	41d8d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe30>
  41d8c6:	2804      	cmp	r0, #4
    dims_[i] = val;
  41d8c8:	93c6      	str	r3, [sp, #792]	@ 0x318
    for (int i = 0; i < size_increase; ++i) {
  41d8ca:	d003      	beq.n	41d8d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe30>
  41d8cc:	2805      	cmp	r0, #5
    dims_[i] = val;
  41d8ce:	93c7      	str	r3, [sp, #796]	@ 0x31c
    for (int i = 0; i < size_increase; ++i) {
  41d8d0:	f040 839b 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41d8d4:	abc3      	add	r3, sp, #780	@ 0x30c
  41d8d6:	0092      	lsls	r2, r2, #2
  41d8d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41d8dc:	a97b      	add	r1, sp, #492	@ 0x1ec
  41d8de:	f7f2 fe6d 	bl	4105bc <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
  41d8e2:	f996 2000 	ldrsb.w	r2, [r6]
  41d8e6:	2a05      	cmp	r2, #5
  41d8e8:	f300 838f 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
  41d8ec:	f996 8018 	ldrsb.w	r8, [r6, #24]
  41d8f0:	f1b8 0f05 	cmp.w	r8, #5
  41d8f4:	f300 8389 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    left_padding_copy[i] = 0;
  41d8f8:	2300      	movs	r3, #0
  41d8fa:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41d8fe:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
  41d900:	af2c      	add	r7, sp, #176	@ 0xb0
  41d902:	ed87 7f00 	stc	15, cr7, [r7]
  41d906:	613b      	str	r3, [r7, #16]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41d908:	dd07      	ble.n	41d91a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe76>
                      op_params.left_padding_count] = op_params.left_padding[i];
  41d90a:	f1c2 0005 	rsb	r0, r2, #5
  41d90e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
  41d912:	0092      	lsls	r2, r2, #2
  41d914:	1d31      	adds	r1, r6, #4
  41d916:	f7f2 fe51 	bl	4105bc <memcpy>
    right_padding_copy[i] = 0;
  41d91a:	2300      	movs	r3, #0
  41d91c:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41d920:	4598      	cmp	r8, r3
    right_padding_copy[i] = 0;
  41d922:	ad32      	add	r5, sp, #200	@ 0xc8
  41d924:	ed85 7f00 	stc	15, cr7, [r5]
  41d928:	612b      	str	r3, [r5, #16]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41d92a:	dd09      	ble.n	41d940 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe9c>
                       op_params.right_padding_count] =
  41d92c:	f1c8 0005 	rsb	r0, r8, #5
  41d930:	f106 011c 	add.w	r1, r6, #28
  41d934:	ea4f 0288 	mov.w	r2, r8, lsl #2
  41d938:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  41d93c:	f7f2 fe3e 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41d940:	9bc2      	ldr	r3, [sp, #776]	@ 0x308
  41d942:	2b00      	cmp	r3, #0
  41d944:	f340 8361 	ble.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d948:	2b01      	cmp	r3, #1
    return dims_[i];
  41d94a:	99c3      	ldr	r1, [sp, #780]	@ 0x30c
    TFLITE_DCHECK_LT(i, size_);
  41d94c:	f000 835d 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d950:	2b02      	cmp	r3, #2
    return dims_[i];
  41d952:	9ec4      	ldr	r6, [sp, #784]	@ 0x310
    TFLITE_DCHECK_LT(i, size_);
  41d954:	f000 8359 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d958:	2b03      	cmp	r3, #3
    return dims_[i];
  41d95a:	9ac5      	ldr	r2, [sp, #788]	@ 0x314
    TFLITE_DCHECK_LT(i, size_);
  41d95c:	f000 8355 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41d960:	2b04      	cmp	r3, #4
    return dims_[i];
  41d962:	f8dd 9318 	ldr.w	r9, [sp, #792]	@ 0x318
    TFLITE_DCHECK_LT(i, size_);
  41d966:	f000 8350 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41d96a:	2900      	cmp	r1, #0
  41d96c:	f77f aa63 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
  41d970:	2e00      	cmp	r6, #0
  41d972:	f77f aa60 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
    return dims_[i];
  41d976:	f8dd b31c 	ldr.w	fp, [sp, #796]	@ 0x31c
  const int right_d_padding = right_padding_copy[4];
  41d97a:	692b      	ldr	r3, [r5, #16]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41d97c:	2000      	movs	r0, #0
  41d97e:	ebab 0303 	sub.w	r3, fp, r3
  41d982:	455b      	cmp	r3, fp
  41d984:	930e      	str	r3, [sp, #56]	@ 0x38
  41d986:	bfa8      	it	ge
  41d988:	465b      	movge	r3, fp
  41d98a:	930f      	str	r3, [sp, #60]	@ 0x3c
  const int right_b_padding = right_padding_copy[0];
  41d98c:	682b      	ldr	r3, [r5, #0]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41d98e:	9005      	str	r0, [sp, #20]
  41d990:	1acb      	subs	r3, r1, r3
  41d992:	930d      	str	r3, [sp, #52]	@ 0x34
  const int right_h_padding = right_padding_copy[2];
  41d994:	68ab      	ldr	r3, [r5, #8]
  const int right_w_padding = right_padding_copy[3];
  41d996:	68e8      	ldr	r0, [r5, #12]
                out_h >= output_height - right_h_padding ||
  41d998:	1ad3      	subs	r3, r2, r3
  41d99a:	9304      	str	r3, [sp, #16]
  const int left_b_padding = left_padding_copy[0];
  41d99c:	683b      	ldr	r3, [r7, #0]
  41d99e:	eee6 ab10 	vdup.8	q3, sl
  41d9a2:	9308      	str	r3, [sp, #32]
  const int left_p_padding = left_padding_copy[1];
  41d9a4:	687b      	ldr	r3, [r7, #4]
  const int right_w_padding = right_padding_copy[3];
  41d9a6:	900b      	str	r0, [sp, #44]	@ 0x2c
  const int left_p_padding = left_padding_copy[1];
  41d9a8:	9301      	str	r3, [sp, #4]
  const int left_h_padding = left_padding_copy[2];
  41d9aa:	68bb      	ldr	r3, [r7, #8]
  41d9ac:	9306      	str	r3, [sp, #24]
  const int left_w_padding = left_padding_copy[3];
  41d9ae:	68fb      	ldr	r3, [r7, #12]
  41d9b0:	9309      	str	r3, [sp, #36]	@ 0x24
  const int left_d_padding = left_padding_copy[4];
  41d9b2:	693b      	ldr	r3, [r7, #16]
  41d9b4:	930a      	str	r3, [sp, #40]	@ 0x28
  const int right_p_padding = right_padding_copy[1];
  41d9b6:	686b      	ldr	r3, [r5, #4]
  const int right_w_padding = right_padding_copy[3];
  41d9b8:	4635      	mov	r5, r6
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41d9ba:	f04f 0800 	mov.w	r8, #0
  41d9be:	9110      	str	r1, [sp, #64]	@ 0x40
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41d9c0:	2a00      	cmp	r2, #0
  41d9c2:	f340 80cd 	ble.w	41db60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10bc>
  41d9c6:	2100      	movs	r1, #0
                out_p >= output_plane - right_p_padding ||
  41d9c8:	1ae8      	subs	r0, r5, r3
  41d9ca:	9003      	str	r0, [sp, #12]
  41d9cc:	9511      	str	r5, [sp, #68]	@ 0x44
  41d9ce:	9202      	str	r2, [sp, #8]
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41d9d0:	f1b9 0f00 	cmp.w	r9, #0
  41d9d4:	f340 80be 	ble.w	41db54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10b0>
  41d9d8:	2000      	movs	r0, #0
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41d9da:	f1bb 0f00 	cmp.w	fp, #0
  41d9de:	f340 80b5 	ble.w	41db4c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a8>
  41d9e2:	9a05      	ldr	r2, [sp, #20]
  41d9e4:	9d08      	ldr	r5, [sp, #32]
  41d9e6:	42aa      	cmp	r2, r5
  41d9e8:	f2c0 82cb 	blt.w	41df82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14de>
  41d9ec:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
  41d9ee:	42aa      	cmp	r2, r5
  41d9f0:	f280 82a0 	bge.w	41df34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1490>
  41d9f4:	9a01      	ldr	r2, [sp, #4]
  41d9f6:	4590      	cmp	r8, r2
  41d9f8:	f2c0 82a5 	blt.w	41df46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14a2>
  41d9fc:	9a03      	ldr	r2, [sp, #12]
  41d9fe:	4590      	cmp	r8, r2
  41da00:	f280 82aa 	bge.w	41df58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14b4>
  41da04:	9a06      	ldr	r2, [sp, #24]
  41da06:	4291      	cmp	r1, r2
  41da08:	f2c0 82af 	blt.w	41df6a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14c6>
  41da0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  41da0e:	2a00      	cmp	r2, #0
  41da10:	f340 82b4 	ble.w	41df7c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14d8>
              *out_ptr++ = pad_value;
  41da14:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41da16:	4625      	mov	r5, r4
  41da18:	2e01      	cmp	r6, #1
  41da1a:	f04f 0200 	mov.w	r2, #0
  41da1e:	bfb8      	it	lt
  41da20:	2601      	movlt	r6, #1
  41da22:	469e      	mov	lr, r3
                out_h < left_h_padding ||
  41da24:	9b04      	ldr	r3, [sp, #16]
              *out_ptr++ = pad_value;
  41da26:	4657      	mov	r7, sl
                out_h < left_h_padding ||
  41da28:	4299      	cmp	r1, r3
              *out_ptr++ = *in_ptr++;
  41da2a:	f105 0501 	add.w	r5, r5, #1
                out_h < left_h_padding ||
  41da2e:	da10      	bge.n	41da52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfae>
                out_h >= output_height - right_h_padding ||
  41da30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  41da32:	4283      	cmp	r3, r0
  41da34:	dc0d      	bgt.n	41da52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfae>
                out_w >= output_width - right_w_padding ||
  41da36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41da38:	eba9 0c03 	sub.w	ip, r9, r3
                out_w < left_w_padding ||
  41da3c:	4584      	cmp	ip, r0
  41da3e:	dd08      	ble.n	41da52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfae>
                out_w >= output_width - right_w_padding ||
  41da40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41da42:	4293      	cmp	r3, r2
  41da44:	dc05      	bgt.n	41da52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfae>
              *out_ptr++ = *in_ptr++;
  41da46:	f8dd c01c 	ldr.w	ip, [sp, #28]
  41da4a:	f91c 7b01 	ldrsb.w	r7, [ip], #1
  41da4e:	f8cd c01c 	str.w	ip, [sp, #28]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41da52:	3e01      	subs	r6, #1
  41da54:	f805 7c01 	strb.w	r7, [r5, #-1]
  41da58:	f102 0201 	add.w	r2, r2, #1
  41da5c:	d1e2      	bne.n	41da24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf80>
  41da5e:	455a      	cmp	r2, fp
  41da60:	4673      	mov	r3, lr
  41da62:	9500      	str	r5, [sp, #0]
  41da64:	da6f      	bge.n	41db46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a2>
  41da66:	ebab 0602 	sub.w	r6, fp, r2
  41da6a:	4593      	cmp	fp, r2
  41da6c:	f106 37ff 	add.w	r7, r6, #4294967295	@ 0xffffffff
  41da70:	bfcc      	ite	gt
  41da72:	46b4      	movgt	ip, r6
  41da74:	f04f 0c01 	movle.w	ip, #1
  41da78:	2f0e      	cmp	r7, #14
  41da7a:	f240 828b 	bls.w	41df94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14f0>
  41da7e:	4593      	cmp	fp, r2
  41da80:	f340 8288 	ble.w	41df94 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14f0>
  41da84:	9d00      	ldr	r5, [sp, #0]
  41da86:	f02c 060f 	bic.w	r6, ip, #15
  41da8a:	462f      	mov	r7, r5
  41da8c:	f1a6 0e10 	sub.w	lr, r6, #16
  41da90:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41da94:	1975      	adds	r5, r6, r5
  41da96:	f10e 0e01 	add.w	lr, lr, #1
  41da9a:	950c      	str	r5, [sp, #48]	@ 0x30
  41da9c:	f04e e001 	dls	lr, lr
  41daa0:	463d      	mov	r5, r7
  41daa2:	eca7 7e10 	stc	14, cr7, [r7], #64	@ 0x40
  41daa6:	f00f c005 	le	lr, 41daa2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xffe>
  41daaa:	4566      	cmp	r6, ip
  41daac:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
  41dab0:	9500      	str	r5, [sp, #0]
  41dab2:	4432      	add	r2, r6
  41dab4:	d047      	beq.n	41db46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a2>
  41dab6:	ebac 0706 	sub.w	r7, ip, r6
  41daba:	463d      	mov	r5, r7
  41dabc:	3f01      	subs	r7, #1
  41dabe:	2f06      	cmp	r7, #6
  41dac0:	d921      	bls.n	41db06 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1062>
  41dac2:	2700      	movs	r7, #0
  41dac4:	f025 0c07 	bic.w	ip, r5, #7
  41dac8:	4462      	add	r2, ip
  41daca:	44e6      	add	lr, ip
  41dacc:	46bc      	mov	ip, r7
  41dace:	950c      	str	r5, [sp, #48]	@ 0x30
  41dad0:	9d00      	ldr	r5, [sp, #0]
  41dad2:	f36a 0707 	bfi	r7, sl, #0, #8
  41dad6:	4435      	add	r5, r6
  41dad8:	f36a 270f 	bfi	r7, sl, #8, #8
  41dadc:	9512      	str	r5, [sp, #72]	@ 0x48
  41dade:	f36a 4717 	bfi	r7, sl, #16, #8
  41dae2:	9d00      	ldr	r5, [sp, #0]
  41dae4:	f36a 0c07 	bfi	ip, sl, #0, #8
  41dae8:	f36a 671f 	bfi	r7, sl, #24, #8
  41daec:	f36a 2c0f 	bfi	ip, sl, #8, #8
  41daf0:	51af      	str	r7, [r5, r6]
  41daf2:	f36a 4c17 	bfi	ip, sl, #16, #8
  41daf6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
  41daf8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
  41dafa:	f36a 6c1f 	bfi	ip, sl, #24, #8
  41dafe:	f8c5 c004 	str.w	ip, [r5, #4]
  41db02:	077d      	lsls	r5, r7, #29
  41db04:	d01f      	beq.n	41db46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a2>
  41db06:	1c55      	adds	r5, r2, #1
  41db08:	45ab      	cmp	fp, r5
  41db0a:	f88e a000 	strb.w	sl, [lr]
  41db0e:	dd1a      	ble.n	41db46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a2>
  41db10:	1c95      	adds	r5, r2, #2
  41db12:	45ab      	cmp	fp, r5
  41db14:	f88e a001 	strb.w	sl, [lr, #1]
  41db18:	dd15      	ble.n	41db46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a2>
  41db1a:	1cd5      	adds	r5, r2, #3
  41db1c:	45ab      	cmp	fp, r5
  41db1e:	f88e a002 	strb.w	sl, [lr, #2]
  41db22:	dd10      	ble.n	41db46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a2>
  41db24:	1d15      	adds	r5, r2, #4
  41db26:	45ab      	cmp	fp, r5
  41db28:	f88e a003 	strb.w	sl, [lr, #3]
  41db2c:	dd0b      	ble.n	41db46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a2>
  41db2e:	1d55      	adds	r5, r2, #5
  41db30:	45ab      	cmp	fp, r5
  41db32:	f88e a004 	strb.w	sl, [lr, #4]
  41db36:	dd06      	ble.n	41db46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a2>
  41db38:	3206      	adds	r2, #6
  41db3a:	4593      	cmp	fp, r2
  41db3c:	f88e a005 	strb.w	sl, [lr, #5]
  41db40:	dd01      	ble.n	41db46 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a2>
  41db42:	f88e a006 	strb.w	sl, [lr, #6]
              *out_ptr++ = *in_ptr++;
  41db46:	eb04 020b 	add.w	r2, r4, fp
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41db4a:	4614      	mov	r4, r2
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41db4c:	3001      	adds	r0, #1
  41db4e:	4581      	cmp	r9, r0
  41db50:	f47f af43 	bne.w	41d9da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf36>
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41db54:	9a02      	ldr	r2, [sp, #8]
  41db56:	3101      	adds	r1, #1
  41db58:	428a      	cmp	r2, r1
  41db5a:	f47f af39 	bne.w	41d9d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf2c>
  41db5e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41db60:	f108 0801 	add.w	r8, r8, #1
  41db64:	4545      	cmp	r5, r8
  41db66:	f47f af2b 	bne.w	41d9c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf1c>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41db6a:	9805      	ldr	r0, [sp, #20]
  41db6c:	9910      	ldr	r1, [sp, #64]	@ 0x40
  41db6e:	3001      	adds	r0, #1
  41db70:	4281      	cmp	r1, r0
  41db72:	9005      	str	r0, [sp, #20]
  41db74:	f47f af21 	bne.w	41d9ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf16>
  41db78:	f7ff b95d 	b.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
              : *tflite::micro::GetTensorData<int16_t>(constant_values);
  41db7c:	b115      	cbz	r5, 41db84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10e0>
  41db7e:	682b      	ldr	r3, [r5, #0]
  41db80:	f9b3 5000 	ldrsh.w	r5, [r3]
      reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
  41db84:	4639      	mov	r1, r7
  41db86:	a88c      	add	r0, sp, #560	@ 0x230
  41db88:	f7fe fd12 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
  41db8c:	683b      	ldr	r3, [r7, #0]
                         &pad_value, tflite::micro::GetTensorShape(output),
  41db8e:	4621      	mov	r1, r4
  41db90:	a892      	add	r0, sp, #584	@ 0x248
  41db92:	9308      	str	r3, [sp, #32]
  41db94:	f7fe fd0c 	bl	41c5b0 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
  41db98:	2c00      	cmp	r4, #0
  41db9a:	f000 8236 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
      : size_(new_shape_size) {
  41db9e:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41dba0:	9a8c      	ldr	r2, [sp, #560]	@ 0x230
  return reinterpret_cast<T*>(tensor->data.raw);
  41dba2:	6824      	ldr	r4, [r4, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41dba4:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
  41dba6:	93d4      	str	r3, [sp, #848]	@ 0x350
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41dba8:	f300 822f 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41dbac:	1a98      	subs	r0, r3, r2
  41dbae:	d010      	beq.n	41dbd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x112e>
    dims_[i] = val;
  41dbb0:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41dbb2:	4298      	cmp	r0, r3
    dims_[i] = val;
  41dbb4:	93d5      	str	r3, [sp, #852]	@ 0x354
    for (int i = 0; i < size_increase; ++i) {
  41dbb6:	d00c      	beq.n	41dbd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x112e>
  41dbb8:	2802      	cmp	r0, #2
    dims_[i] = val;
  41dbba:	93d6      	str	r3, [sp, #856]	@ 0x358
    for (int i = 0; i < size_increase; ++i) {
  41dbbc:	d009      	beq.n	41dbd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x112e>
  41dbbe:	2803      	cmp	r0, #3
    dims_[i] = val;
  41dbc0:	93d7      	str	r3, [sp, #860]	@ 0x35c
    for (int i = 0; i < size_increase; ++i) {
  41dbc2:	d006      	beq.n	41dbd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x112e>
  41dbc4:	2804      	cmp	r0, #4
    dims_[i] = val;
  41dbc6:	93d8      	str	r3, [sp, #864]	@ 0x360
    for (int i = 0; i < size_increase; ++i) {
  41dbc8:	d003      	beq.n	41dbd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x112e>
  41dbca:	2805      	cmp	r0, #5
    dims_[i] = val;
  41dbcc:	93d9      	str	r3, [sp, #868]	@ 0x364
    for (int i = 0; i < size_increase; ++i) {
  41dbce:	f040 821c 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41dbd2:	abd5      	add	r3, sp, #852	@ 0x354
  41dbd4:	0092      	lsls	r2, r2, #2
  41dbd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41dbda:	a98d      	add	r1, sp, #564	@ 0x234
  41dbdc:	f7f2 fcee 	bl	4105bc <memcpy>
      : size_(new_shape_size) {
  41dbe0:	2305      	movs	r3, #5
  int32_t DimensionsCount() const { return size_; }
  41dbe2:	9a92      	ldr	r2, [sp, #584]	@ 0x248
      : size_(new_shape_size) {
  41dbe4:	93da      	str	r3, [sp, #872]	@ 0x368
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
  41dbe6:	429a      	cmp	r2, r3
  41dbe8:	f300 820f 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    for (int i = 0; i < size_increase; ++i) {
  41dbec:	1a98      	subs	r0, r3, r2
  41dbee:	d010      	beq.n	41dc12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x116e>
    dims_[i] = val;
  41dbf0:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
  41dbf2:	4298      	cmp	r0, r3
    dims_[i] = val;
  41dbf4:	93db      	str	r3, [sp, #876]	@ 0x36c
    for (int i = 0; i < size_increase; ++i) {
  41dbf6:	d00c      	beq.n	41dc12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x116e>
  41dbf8:	2802      	cmp	r0, #2
    dims_[i] = val;
  41dbfa:	93dc      	str	r3, [sp, #880]	@ 0x370
    for (int i = 0; i < size_increase; ++i) {
  41dbfc:	d009      	beq.n	41dc12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x116e>
  41dbfe:	2803      	cmp	r0, #3
    dims_[i] = val;
  41dc00:	93dd      	str	r3, [sp, #884]	@ 0x374
    for (int i = 0; i < size_increase; ++i) {
  41dc02:	d006      	beq.n	41dc12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x116e>
  41dc04:	2804      	cmp	r0, #4
    dims_[i] = val;
  41dc06:	93de      	str	r3, [sp, #888]	@ 0x378
    for (int i = 0; i < size_increase; ++i) {
  41dc08:	d003      	beq.n	41dc12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x116e>
  41dc0a:	2805      	cmp	r0, #5
    dims_[i] = val;
  41dc0c:	93df      	str	r3, [sp, #892]	@ 0x37c
    for (int i = 0; i < size_increase; ++i) {
  41dc0e:	f040 81fc 	bne.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
  41dc12:	abdb      	add	r3, sp, #876	@ 0x36c
  41dc14:	0092      	lsls	r2, r2, #2
  41dc16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  41dc1a:	a993      	add	r1, sp, #588	@ 0x24c
  41dc1c:	f7f2 fcce 	bl	4105bc <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
  41dc20:	f996 2000 	ldrsb.w	r2, [r6]
  41dc24:	2a05      	cmp	r2, #5
  41dc26:	f300 81f0 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
  41dc2a:	f996 7018 	ldrsb.w	r7, [r6, #24]
  41dc2e:	2f05      	cmp	r7, #5
  41dc30:	f300 81eb 	bgt.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
    left_padding_copy[i] = 0;
  41dc34:	2300      	movs	r3, #0
  41dc36:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41dc3a:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
  41dc3c:	f50d 7a88 	add.w	sl, sp, #272	@ 0x110
  41dc40:	ed8a 7f00 	stc	15, cr7, [sl]
  41dc44:	f8ca 3010 	str.w	r3, [sl, #16]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
  41dc48:	dd07      	ble.n	41dc5a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11b6>
                      op_params.left_padding_count] = op_params.left_padding[i];
  41dc4a:	f1c2 0005 	rsb	r0, r2, #5
  41dc4e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
  41dc52:	0092      	lsls	r2, r2, #2
  41dc54:	1d31      	adds	r1, r6, #4
  41dc56:	f7f2 fcb1 	bl	4105bc <memcpy>
    right_padding_copy[i] = 0;
  41dc5a:	2300      	movs	r3, #0
  41dc5c:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41dc60:	429f      	cmp	r7, r3
    right_padding_copy[i] = 0;
  41dc62:	f50d 7994 	add.w	r9, sp, #296	@ 0x128
  41dc66:	ed89 7f00 	stc	15, cr7, [r9]
  41dc6a:	f8c9 3010 	str.w	r3, [r9, #16]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
  41dc6e:	dd08      	ble.n	41dc82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11de>
                       op_params.right_padding_count] =
  41dc70:	f1c7 0005 	rsb	r0, r7, #5
  41dc74:	f106 011c 	add.w	r1, r6, #28
  41dc78:	00ba      	lsls	r2, r7, #2
  41dc7a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  41dc7e:	f7f2 fc9d 	bl	4105bc <memcpy>
    TFLITE_DCHECK_LT(i, size_);
  41dc82:	9bda      	ldr	r3, [sp, #872]	@ 0x368
  41dc84:	2b00      	cmp	r3, #0
  41dc86:	f340 81c0 	ble.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41dc8a:	2b01      	cmp	r3, #1
    return dims_[i];
  41dc8c:	9adb      	ldr	r2, [sp, #876]	@ 0x36c
    TFLITE_DCHECK_LT(i, size_);
  41dc8e:	f000 81bc 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41dc92:	2b02      	cmp	r3, #2
    return dims_[i];
  41dc94:	9edc      	ldr	r6, [sp, #880]	@ 0x370
    TFLITE_DCHECK_LT(i, size_);
  41dc96:	f000 81b8 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41dc9a:	2b03      	cmp	r3, #3
    return dims_[i];
  41dc9c:	99dd      	ldr	r1, [sp, #884]	@ 0x374
    TFLITE_DCHECK_LT(i, size_);
  41dc9e:	f000 81b4 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  41dca2:	2b04      	cmp	r3, #4
    return dims_[i];
  41dca4:	f8dd b378 	ldr.w	fp, [sp, #888]	@ 0x378
    TFLITE_DCHECK_LT(i, size_);
  41dca8:	f000 81af 	beq.w	41e00a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1566>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41dcac:	2a00      	cmp	r2, #0
  41dcae:	f77f a8c2 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
  41dcb2:	2e00      	cmp	r6, #0
  41dcb4:	f77f a8bf 	ble.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
    return dims_[i];
  41dcb8:	f8dd 837c 	ldr.w	r8, [sp, #892]	@ 0x37c
  const int right_d_padding = right_padding_copy[4];
  41dcbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
  const int right_p_padding = right_padding_copy[1];
  41dcc0:	f8d9 c004 	ldr.w	ip, [r9, #4]
  41dcc4:	eba8 0003 	sub.w	r0, r8, r3
  41dcc8:	4540      	cmp	r0, r8
  41dcca:	9007      	str	r0, [sp, #28]
  41dccc:	bfa8      	it	ge
  41dcce:	4640      	movge	r0, r8
  const int right_b_padding = right_padding_copy[0];
  41dcd0:	f8d9 3000 	ldr.w	r3, [r9]
  41dcd4:	900d      	str	r0, [sp, #52]	@ 0x34
  41dcd6:	1ad3      	subs	r3, r2, r3
  41dcd8:	469e      	mov	lr, r3
  const int left_b_padding = left_padding_copy[0];
  41dcda:	f8da 0000 	ldr.w	r0, [sl]
  const int right_h_padding = right_padding_copy[2];
  41dcde:	f8d9 3008 	ldr.w	r3, [r9, #8]
  const int left_b_padding = left_padding_copy[0];
  41dce2:	9000      	str	r0, [sp, #0]
  const int left_p_padding = left_padding_copy[1];
  41dce4:	f8da 0004 	ldr.w	r0, [sl, #4]
                out_h >= output_height - right_h_padding ||
  41dce8:	1acf      	subs	r7, r1, r3
  const int left_p_padding = left_padding_copy[1];
  41dcea:	9004      	str	r0, [sp, #16]
  const int left_h_padding = left_padding_copy[2];
  41dcec:	f8da 0008 	ldr.w	r0, [sl, #8]
                out_h >= output_height - right_h_padding ||
  41dcf0:	9702      	str	r7, [sp, #8]
  const int left_h_padding = left_padding_copy[2];
  41dcf2:	9005      	str	r0, [sp, #20]
  const int left_w_padding = left_padding_copy[3];
  41dcf4:	f8da 000c 	ldr.w	r0, [sl, #12]
  41dcf8:	eea6 5b30 	vdup.16	q3, r5
  41dcfc:	900a      	str	r0, [sp, #40]	@ 0x28
  const int left_d_padding = left_padding_copy[4];
  41dcfe:	f8da 0010 	ldr.w	r0, [sl, #16]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41dd02:	2700      	movs	r7, #0
  const int left_d_padding = left_padding_copy[4];
  41dd04:	900b      	str	r0, [sp, #44]	@ 0x2c
  const int right_w_padding = right_padding_copy[3];
  41dd06:	f8d9 000c 	ldr.w	r0, [r9, #12]
  41dd0a:	46f1      	mov	r9, lr
  41dd0c:	900c      	str	r0, [sp, #48]	@ 0x30
  41dd0e:	ea4f 0348 	mov.w	r3, r8, lsl #1
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41dd12:	f04f 0a00 	mov.w	sl, #0
  41dd16:	920e      	str	r2, [sp, #56]	@ 0x38
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41dd18:	2900      	cmp	r1, #0
  41dd1a:	f340 80a8 	ble.w	41de6e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13ca>
  41dd1e:	2200      	movs	r2, #0
                out_p >= output_plane - right_p_padding ||
  41dd20:	eba6 000c 	sub.w	r0, r6, ip
  41dd24:	9003      	str	r0, [sp, #12]
  41dd26:	960f      	str	r6, [sp, #60]	@ 0x3c
  41dd28:	9101      	str	r1, [sp, #4]
  41dd2a:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41dd2e:	f1bb 0f00 	cmp.w	fp, #0
  41dd32:	f340 8095 	ble.w	41de60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13bc>
  41dd36:	2000      	movs	r0, #0
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41dd38:	f1b8 0f00 	cmp.w	r8, #0
  41dd3c:	f340 808c 	ble.w	41de58 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b4>
  41dd40:	9900      	ldr	r1, [sp, #0]
  41dd42:	42b9      	cmp	r1, r7
  41dd44:	f300 809f 	bgt.w	41de86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e2>
  41dd48:	45b9      	cmp	r9, r7
  41dd4a:	f340 80b8 	ble.w	41debe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x141a>
  41dd4e:	9904      	ldr	r1, [sp, #16]
  41dd50:	4551      	cmp	r1, sl
  41dd52:	f300 80a6 	bgt.w	41dea2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13fe>
  41dd56:	9903      	ldr	r1, [sp, #12]
  41dd58:	4551      	cmp	r1, sl
  41dd5a:	f340 80be 	ble.w	41deda <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1436>
  41dd5e:	9905      	ldr	r1, [sp, #20]
  41dd60:	4291      	cmp	r1, r2
  41dd62:	f300 80c8 	bgt.w	41def6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1452>
  41dd66:	9907      	ldr	r1, [sp, #28]
  41dd68:	2900      	cmp	r1, #0
  41dd6a:	f340 80d2 	ble.w	41df12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x146e>
              *out_ptr++ = pad_value;
  41dd6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41dd70:	2600      	movs	r6, #0
  41dd72:	2901      	cmp	r1, #1
  41dd74:	bfb8      	it	lt
  41dd76:	2101      	movlt	r1, #1
  41dd78:	468c      	mov	ip, r1
  41dd7a:	4621      	mov	r1, r4
  41dd7c:	46e6      	mov	lr, ip
  41dd7e:	9306      	str	r3, [sp, #24]
                out_h < left_h_padding ||
  41dd80:	9b02      	ldr	r3, [sp, #8]
              *out_ptr++ = pad_value;
  41dd82:	46ac      	mov	ip, r5
                out_h < left_h_padding ||
  41dd84:	429a      	cmp	r2, r3
              *out_ptr++ = *in_ptr++;
  41dd86:	f101 0102 	add.w	r1, r1, #2
                out_h < left_h_padding ||
  41dd8a:	da0e      	bge.n	41ddaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1306>
                out_h >= output_height - right_h_padding ||
  41dd8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41dd8e:	4283      	cmp	r3, r0
  41dd90:	dc0b      	bgt.n	41ddaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1306>
                out_w >= output_width - right_w_padding ||
  41dd92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  41dd94:	ebab 0303 	sub.w	r3, fp, r3
                out_w < left_w_padding ||
  41dd98:	4298      	cmp	r0, r3
  41dd9a:	da06      	bge.n	41ddaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1306>
                out_w >= output_width - right_w_padding ||
  41dd9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41dd9e:	42b3      	cmp	r3, r6
  41dda0:	dc03      	bgt.n	41ddaa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1306>
              *out_ptr++ = *in_ptr++;
  41dda2:	9b08      	ldr	r3, [sp, #32]
  41dda4:	f933 cb02 	ldrsh.w	ip, [r3], #2
  41dda8:	9308      	str	r3, [sp, #32]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41ddaa:	f1be 0e01 	subs.w	lr, lr, #1
  41ddae:	f821 cc02 	strh.w	ip, [r1, #-2]
  41ddb2:	f106 0601 	add.w	r6, r6, #1
  41ddb6:	d1e3      	bne.n	41dd80 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12dc>
  41ddb8:	45b0      	cmp	r8, r6
  41ddba:	9b06      	ldr	r3, [sp, #24]
  41ddbc:	9106      	str	r1, [sp, #24]
  41ddbe:	dd49      	ble.n	41de54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b0>
  41ddc0:	45b0      	cmp	r8, r6
  41ddc2:	eba8 0c06 	sub.w	ip, r8, r6
  41ddc6:	bfcc      	ite	gt
  41ddc8:	4661      	movgt	r1, ip
  41ddca:	2101      	movle	r1, #1
  41ddcc:	f10c 3eff 	add.w	lr, ip, #4294967295	@ 0xffffffff
  41ddd0:	f1be 0f06 	cmp.w	lr, #6
  41ddd4:	9109      	str	r1, [sp, #36]	@ 0x24
  41ddd6:	d91e      	bls.n	41de16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1372>
  41ddd8:	45b0      	cmp	r8, r6
  41ddda:	dd1c      	ble.n	41de16 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1372>
  41dddc:	ea4f 0ed1 	mov.w	lr, r1, lsr #3
  41dde0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41dde4:	f1ae 0e10 	sub.w	lr, lr, #16
  41dde8:	9906      	ldr	r1, [sp, #24]
  41ddea:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41ddee:	f10e 0e01 	add.w	lr, lr, #1
  41ddf2:	f04e e001 	dls	lr, lr
  41ddf6:	468c      	mov	ip, r1
  41ddf8:	ecac 7e88 	stc	14, cr7, [ip], #544	@ 0x220
  41ddfc:	f00f c005 	le	lr, 41ddf8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1354>
  41de00:	468e      	mov	lr, r1
  41de02:	9909      	ldr	r1, [sp, #36]	@ 0x24
  41de04:	f021 0c07 	bic.w	ip, r1, #7
  41de08:	eb0e 014c 	add.w	r1, lr, ip, lsl #1
  41de0c:	9106      	str	r1, [sp, #24]
  41de0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
  41de10:	4466      	add	r6, ip
  41de12:	0749      	lsls	r1, r1, #29
  41de14:	d01e      	beq.n	41de54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b0>
  41de16:	9906      	ldr	r1, [sp, #24]
  41de18:	f106 0c01 	add.w	ip, r6, #1
  41de1c:	45e0      	cmp	r8, ip
  41de1e:	800d      	strh	r5, [r1, #0]
  41de20:	dd18      	ble.n	41de54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b0>
  41de22:	f106 0c02 	add.w	ip, r6, #2
  41de26:	45e0      	cmp	r8, ip
  41de28:	804d      	strh	r5, [r1, #2]
  41de2a:	dd13      	ble.n	41de54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b0>
  41de2c:	f106 0c03 	add.w	ip, r6, #3
  41de30:	45e0      	cmp	r8, ip
  41de32:	808d      	strh	r5, [r1, #4]
  41de34:	dd0e      	ble.n	41de54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b0>
  41de36:	f106 0c04 	add.w	ip, r6, #4
  41de3a:	45e0      	cmp	r8, ip
  41de3c:	80cd      	strh	r5, [r1, #6]
  41de3e:	dd09      	ble.n	41de54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b0>
  41de40:	f106 0c05 	add.w	ip, r6, #5
  41de44:	45e0      	cmp	r8, ip
  41de46:	810d      	strh	r5, [r1, #8]
  41de48:	dd04      	ble.n	41de54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b0>
  41de4a:	3606      	adds	r6, #6
  41de4c:	45b0      	cmp	r8, r6
  41de4e:	814d      	strh	r5, [r1, #10]
  41de50:	dd00      	ble.n	41de54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b0>
  41de52:	818d      	strh	r5, [r1, #12]
              *out_ptr++ = *in_ptr++;
  41de54:	18e1      	adds	r1, r4, r3
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41de56:	460c      	mov	r4, r1
        for (int out_w = 0; out_w < output_width; ++out_w) {
  41de58:	3001      	adds	r0, #1
  41de5a:	4583      	cmp	fp, r0
  41de5c:	f47f af6c 	bne.w	41dd38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1294>
      for (int out_h = 0; out_h < output_height; ++out_h) {
  41de60:	9901      	ldr	r1, [sp, #4]
  41de62:	3201      	adds	r2, #1
  41de64:	4291      	cmp	r1, r2
  41de66:	f47f af62 	bne.w	41dd2e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x128a>
  41de6a:	e9dd 6c0f 	ldrd	r6, ip, [sp, #60]	@ 0x3c
    for (int out_p = 0; out_p < output_plane; ++out_p) {
  41de6e:	f10a 0a01 	add.w	sl, sl, #1
  41de72:	4556      	cmp	r6, sl
  41de74:	f47f af50 	bne.w	41dd18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1274>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
  41de78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  41de7a:	3701      	adds	r7, #1
  41de7c:	42ba      	cmp	r2, r7
  41de7e:	f47f af48 	bne.w	41dd12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x126e>
  41de82:	f7fe bfd8 	b.w	41ce36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x392>
  41de86:	f1a3 0e02 	sub.w	lr, r3, #2
  41de8a:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
  41de8e:	f10e 0e01 	add.w	lr, lr, #1
  41de92:	f04e e001 	dls	lr, lr
  41de96:	18e1      	adds	r1, r4, r3
  41de98:	f824 5b02 	strh.w	r5, [r4], #2
          for (int out_d = 0; out_d < output_depth; ++out_d) {
  41de9c:	f00f c005 	le	lr, 41de98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13f4>
  41dea0:	e7d9      	b.n	41de56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b2>
  41dea2:	f1a3 0e02 	sub.w	lr, r3, #2
  41dea6:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
  41deaa:	f10e 0e01 	add.w	lr, lr, #1
  41deae:	f04e e001 	dls	lr, lr
  41deb2:	18e1      	adds	r1, r4, r3
  41deb4:	f824 5b02 	strh.w	r5, [r4], #2
  41deb8:	f00f c005 	le	lr, 41deb4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1410>
  41debc:	e7cb      	b.n	41de56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b2>
  41debe:	f1a3 0e02 	sub.w	lr, r3, #2
  41dec2:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
  41dec6:	f10e 0e01 	add.w	lr, lr, #1
  41deca:	f04e e001 	dls	lr, lr
  41dece:	18e1      	adds	r1, r4, r3
  41ded0:	f824 5b02 	strh.w	r5, [r4], #2
  41ded4:	f00f c005 	le	lr, 41ded0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x142c>
  41ded8:	e7bd      	b.n	41de56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b2>
  41deda:	f1a3 0e02 	sub.w	lr, r3, #2
  41dede:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
  41dee2:	f10e 0e01 	add.w	lr, lr, #1
  41dee6:	f04e e001 	dls	lr, lr
  41deea:	18e1      	adds	r1, r4, r3
  41deec:	f824 5b02 	strh.w	r5, [r4], #2
  41def0:	f00f c005 	le	lr, 41deec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1448>
  41def4:	e7af      	b.n	41de56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b2>
  41def6:	f1a3 0e02 	sub.w	lr, r3, #2
  41defa:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
  41defe:	f10e 0e01 	add.w	lr, lr, #1
  41df02:	f04e e001 	dls	lr, lr
  41df06:	18e1      	adds	r1, r4, r3
  41df08:	f824 5b02 	strh.w	r5, [r4], #2
  41df0c:	f00f c005 	le	lr, 41df08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1464>
  41df10:	e7a1      	b.n	41de56 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13b2>
  41df12:	2600      	movs	r6, #0
  41df14:	9406      	str	r4, [sp, #24]
  41df16:	e753      	b.n	41ddc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x131c>
              ? 0
  41df18:	2d00      	cmp	r5, #0
  41df1a:	f43f a91a 	beq.w	41d152 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6ae>
  41df1e:	682b      	ldr	r3, [r5, #0]
  41df20:	681d      	ldr	r5, [r3, #0]
  41df22:	f7ff b916 	b.w	41d152 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6ae>
              ? 0.f
  41df26:	2d00      	cmp	r5, #0
  41df28:	f43e ae0e 	beq.w	41cb48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa4>
  41df2c:	682b      	ldr	r3, [r5, #0]
  41df2e:	681d      	ldr	r5, [r3, #0]
  41df30:	f7fe be0b 	b.w	41cb4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa6>
  41df34:	f04b e001 	dls	lr, fp
  41df38:	eb04 020b 	add.w	r2, r4, fp
  41df3c:	f804 ab01 	strb.w	sl, [r4], #1
  41df40:	f00f c005 	le	lr, 41df3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1498>
  41df44:	e601      	b.n	41db4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a6>
  41df46:	f04b e001 	dls	lr, fp
  41df4a:	eb04 020b 	add.w	r2, r4, fp
  41df4e:	f804 ab01 	strb.w	sl, [r4], #1
  41df52:	f00f c005 	le	lr, 41df4e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14aa>
  41df56:	e5f8      	b.n	41db4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a6>
  41df58:	f04b e001 	dls	lr, fp
  41df5c:	eb04 020b 	add.w	r2, r4, fp
  41df60:	f804 ab01 	strb.w	sl, [r4], #1
  41df64:	f00f c005 	le	lr, 41df60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14bc>
  41df68:	e5ef      	b.n	41db4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a6>
  41df6a:	f04b e001 	dls	lr, fp
  41df6e:	eb04 020b 	add.w	r2, r4, fp
  41df72:	f804 ab01 	strb.w	sl, [r4], #1
  41df76:	f00f c005 	le	lr, 41df72 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14ce>
  41df7a:	e5e6      	b.n	41db4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a6>
  41df7c:	2200      	movs	r2, #0
  41df7e:	9400      	str	r4, [sp, #0]
  41df80:	e571      	b.n	41da66 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfc2>
  41df82:	f04b e001 	dls	lr, fp
  41df86:	eb04 020b 	add.w	r2, r4, fp
  41df8a:	f804 ab01 	strb.w	sl, [r4], #1
  41df8e:	f00f c005 	le	lr, 41df8a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e6>
  41df92:	e5da      	b.n	41db4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a6>
  41df94:	2600      	movs	r6, #0
  41df96:	f8dd e000 	ldr.w	lr, [sp]
  41df9a:	e58c      	b.n	41dab6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1012>
              : *tflite::micro::GetTensorData<int16_t>(constant_values);
  41df9c:	2500      	movs	r5, #0
  41df9e:	e5f1      	b.n	41db84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10e0>
        pad_value = static_cast<uint8_t>(data->output_zero_point);
  41dfa0:	f996 a034 	ldrsb.w	sl, [r6, #52]	@ 0x34
  41dfa4:	f7ff ba60 	b.w	41d468 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c4>
  41dfa8:	4623      	mov	r3, r4
  41dfaa:	f042 e001 	dls	lr, r2
  41dfae:	f843 5b04 	str.w	r5, [r3], #4
  41dfb2:	f00f c005 	le	lr, 41dfae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x150a>
  41dfb6:	f7ff b8b1 	b.w	41d11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x678>
  41dfba:	4623      	mov	r3, r4
  41dfbc:	f042 e001 	dls	lr, r2
  41dfc0:	f843 5b04 	str.w	r5, [r3], #4
  41dfc4:	f00f c005 	le	lr, 41dfc0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x151c>
  41dfc8:	f7ff b8a8 	b.w	41d11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x678>
  41dfcc:	4623      	mov	r3, r4
  41dfce:	f042 e001 	dls	lr, r2
  41dfd2:	f843 5b04 	str.w	r5, [r3], #4
  41dfd6:	f00f c005 	le	lr, 41dfd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152e>
  41dfda:	f7ff b89f 	b.w	41d11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x678>
  41dfde:	4623      	mov	r3, r4
  41dfe0:	f042 e001 	dls	lr, r2
  41dfe4:	f843 5b04 	str.w	r5, [r3], #4
  41dfe8:	f00f c005 	le	lr, 41dfe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1540>
  41dfec:	f7ff b896 	b.w	41d11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x678>
  41dff0:	4620      	mov	r0, r4
  41dff2:	2300      	movs	r3, #0
  41dff4:	f7ff b86c 	b.w	41d0d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x62c>
  41dff8:	4623      	mov	r3, r4
  41dffa:	f042 e001 	dls	lr, r2
  41dffe:	f843 5b04 	str.w	r5, [r3], #4
  41e002:	f00f c005 	le	lr, 41dffe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x155a>
  41e006:	f7ff b889 	b.w	41d11c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x678>
  TFLITE_DCHECK(node->user_data != nullptr);
  41e00a:	f001 f8c5 	bl	41f198 <abort>
  41e00e:	bf00      	nop

0041e010 <_ZN6tflite12Register_PADEv>:

TfLiteRegistration Register_PAD() {
  41e010:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(Init, PadPrepare, Eval);
  41e012:	2400      	movs	r4, #0
TfLiteRegistration Register_PAD() {
  41e014:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, PadPrepare, Eval);
  41e016:	9400      	str	r4, [sp, #0]
TfLiteRegistration Register_PAD() {
  41e018:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, PadPrepare, Eval);
  41e01a:	4b04      	ldr	r3, [pc, #16]	@ (41e02c <_ZN6tflite12Register_PADEv+0x1c>)
  41e01c:	4a04      	ldr	r2, [pc, #16]	@ (41e030 <_ZN6tflite12Register_PADEv+0x20>)
  41e01e:	4905      	ldr	r1, [pc, #20]	@ (41e034 <_ZN6tflite12Register_PADEv+0x24>)
  41e020:	f7fe fa8a 	bl	41c538 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
  41e024:	4620      	mov	r0, r4
  41e026:	b002      	add	sp, #8
  41e028:	bd10      	pop	{r4, pc}
  41e02a:	bf00      	nop
  41e02c:	0041caa5 	.word	0x0041caa5
  41e030:	0041c6e9 	.word	0x0041c6e9
  41e034:	0041c6d9 	.word	0x0041c6d9

0041e038 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  41e038:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  41e03a:	b10b      	cbz	r3, 41e040 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context,
  41e03c:	2140      	movs	r1, #64	@ 0x40
  41e03e:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  41e040:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  41e042:	f001 f8a9 	bl	41f198 <abort>
  41e046:	bf00      	nop

0041e048 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return ret_val;
}

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
  41e048:	b570      	push	{r4, r5, r6, lr}
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
  41e04a:	2200      	movs	r2, #0
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
  41e04c:	b084      	sub	sp, #16
  41e04e:	460c      	mov	r4, r1
  41e050:	4606      	mov	r6, r0
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
  41e052:	f7fe fa87 	bl	41c564 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
  41e056:	4621      	mov	r1, r4
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
  41e058:	4605      	mov	r5, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
  41e05a:	2200      	movs	r2, #0
  41e05c:	4630      	mov	r0, r6
  41e05e:	f7fe fa9b 	bl	41c598 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
  41e062:	68e4      	ldr	r4, [r4, #12]
  41e064:	b1bc      	cbz	r4, 41e096 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);

  switch (input->type) {
  41e066:	7a2b      	ldrb	r3, [r5, #8]
  41e068:	2b09      	cmp	r3, #9
  41e06a:	d002      	beq.n	41e072 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2a>
    case kTfLiteFloat32: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  41e06c:	2001      	movs	r0, #1
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
}
  41e06e:	b004      	add	sp, #16
  41e070:	bd70      	pop	{r4, r5, r6, pc}
      if (output->type == kTfLiteInt8) {
  41e072:	7a03      	ldrb	r3, [r0, #8]
  41e074:	2b09      	cmp	r3, #9
  41e076:	d1f9      	bne.n	41e06c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x24>
        arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input),
  41e078:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	@ 0x38
  41e07c:	6806      	ldr	r6, [r0, #0]
  41e07e:	68a3      	ldr	r3, [r4, #8]
  41e080:	6828      	ldr	r0, [r5, #0]
  41e082:	9602      	str	r6, [sp, #8]
  41e084:	69a5      	ldr	r5, [r4, #24]
  41e086:	9501      	str	r5, [sp, #4]
  41e088:	68e4      	ldr	r4, [r4, #12]
  41e08a:	9400      	str	r4, [sp, #0]
  41e08c:	f7f5 fe68 	bl	413d60 <arm_softmax_s8>
      return kTfLiteOk;
  41e090:	2000      	movs	r0, #0
}
  41e092:	b004      	add	sp, #16
  41e094:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
  41e096:	f001 f87f 	bl	41f198 <abort>
  41e09a:	bf00      	nop

0041e09c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  41e09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e0a0:	680b      	ldr	r3, [r1, #0]
  41e0a2:	6886      	ldr	r6, [r0, #8]
  41e0a4:	b08f      	sub	sp, #60	@ 0x3c
  41e0a6:	b113      	cbz	r3, 41e0ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
  41e0a8:	681b      	ldr	r3, [r3, #0]
  41e0aa:	2b01      	cmp	r3, #1
  41e0ac:	d004      	beq.n	41e0b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c>
  41e0ae:	2401      	movs	r4, #1
}
  41e0b0:	4620      	mov	r0, r4
  41e0b2:	b00f      	add	sp, #60	@ 0x3c
  41e0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return node->outputs == nullptr ? 0 : node->outputs->size;
  41e0b8:	684b      	ldr	r3, [r1, #4]
  41e0ba:	460c      	mov	r4, r1
  41e0bc:	2b00      	cmp	r3, #0
  41e0be:	d0f6      	beq.n	41e0ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  41e0c0:	681f      	ldr	r7, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  41e0c2:	2f01      	cmp	r7, #1
  41e0c4:	d1f3      	bne.n	41e0ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
  41e0c6:	6833      	ldr	r3, [r6, #0]
  41e0c8:	4605      	mov	r5, r0
  41e0ca:	2200      	movs	r2, #0
  41e0cc:	4630      	mov	r0, r6
  41e0ce:	699b      	ldr	r3, [r3, #24]
  41e0d0:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
  41e0d2:	4680      	mov	r8, r0
  41e0d4:	2800      	cmp	r0, #0
  41e0d6:	d0ea      	beq.n	41e0ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
  41e0d8:	6943      	ldr	r3, [r0, #20]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
  41e0da:	681b      	ldr	r3, [r3, #0]
  41e0dc:	2b00      	cmp	r3, #0
  41e0de:	dde6      	ble.n	41e0ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
  41e0e0:	6833      	ldr	r3, [r6, #0]
  41e0e2:	2200      	movs	r2, #0
  41e0e4:	4621      	mov	r1, r4
  41e0e6:	4630      	mov	r0, r6
  41e0e8:	69db      	ldr	r3, [r3, #28]
  41e0ea:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
  41e0ec:	4681      	mov	r9, r0
  41e0ee:	2800      	cmp	r0, #0
  41e0f0:	d0dd      	beq.n	41e0ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
  41e0f2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
  41e0f6:	f1ba 0f00 	cmp.w	sl, #0
  41e0fa:	d0d8      	beq.n	41e0ae <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
  41e0fc:	6923      	ldr	r3, [r4, #16]
  41e0fe:	4628      	mov	r0, r5
  41e100:	464a      	mov	r2, r9
  41e102:	4641      	mov	r1, r8
  41e104:	f8cd a000 	str.w	sl, [sp]
  41e108:	f000 f8a6 	bl	41e258 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
  const int dims_size = dims->size;
  41e10c:	f8d8 1014 	ldr.w	r1, [r8, #20]
  41e110:	4604      	mov	r4, r0
  41e112:	f851 5b04 	ldr.w	r5, [r1], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41e116:	a803      	add	r0, sp, #12
  41e118:	00aa      	lsls	r2, r5, #2
      : size_(dimensions_count) {
  41e11a:	9502      	str	r5, [sp, #8]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
  41e11c:	f7f2 fa4e 	bl	4105bc <memcpy>
  41e120:	f8d9 1014 	ldr.w	r1, [r9, #20]
  41e124:	a809      	add	r0, sp, #36	@ 0x24
  41e126:	f851 bb04 	ldr.w	fp, [r1], #4
  41e12a:	ea4f 028b 	mov.w	r2, fp, lsl #2
  41e12e:	f7f2 fa45 	bl	4105bc <memcpy>

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
  41e132:	2d00      	cmp	r5, #0
  const int trailing_dim = input_shape.DimensionsCount() - 1;
  41e134:	f105 32ff 	add.w	r2, r5, #4294967295	@ 0xffffffff
  41e138:	dd77      	ble.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    if (i != skip_dim) {
  41e13a:	2a00      	cmp	r2, #0
  41e13c:	d048      	beq.n	41e1d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
    TFLITE_DCHECK_LT(i, size_);
  41e13e:	f1bb 0f00 	cmp.w	fp, #0
    return dims_[i];
  41e142:	9b03      	ldr	r3, [sp, #12]
    TFLITE_DCHECK_LT(i, size_);
  41e144:	dd71      	ble.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
  41e146:	9909      	ldr	r1, [sp, #36]	@ 0x24
  41e148:	4299      	cmp	r1, r3
  41e14a:	d16e      	bne.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    if (i != skip_dim) {
  41e14c:	2a01      	cmp	r2, #1
  41e14e:	d069      	beq.n	41e224 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x188>
  41e150:	f1bb 0f01 	cmp.w	fp, #1
    return dims_[i];
  41e154:	9904      	ldr	r1, [sp, #16]
    TFLITE_DCHECK_LT(i, size_);
  41e156:	d068      	beq.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
  41e158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41e15a:	4299      	cmp	r1, r3
  41e15c:	d165      	bne.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    if (i != skip_dim) {
  41e15e:	2a02      	cmp	r2, #2
  41e160:	d036      	beq.n	41e1d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
  41e162:	f1bb 0f02 	cmp.w	fp, #2
    return dims_[i];
  41e166:	9b05      	ldr	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
  41e168:	d05f      	beq.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
  41e16a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
  41e16c:	4299      	cmp	r1, r3
  41e16e:	d15c      	bne.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    if (i != skip_dim) {
  41e170:	2a03      	cmp	r2, #3
  41e172:	d02d      	beq.n	41e1d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
  41e174:	f1bb 0f03 	cmp.w	fp, #3
    return dims_[i];
  41e178:	9906      	ldr	r1, [sp, #24]
    TFLITE_DCHECK_LT(i, size_);
  41e17a:	d056      	beq.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
  41e17c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  41e17e:	4299      	cmp	r1, r3
  41e180:	d153      	bne.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    if (i != skip_dim) {
  41e182:	2a04      	cmp	r2, #4
  41e184:	d024      	beq.n	41e1d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
  41e186:	f1bb 0f04 	cmp.w	fp, #4
    return dims_[i];
  41e18a:	9b07      	ldr	r3, [sp, #28]
    TFLITE_DCHECK_LT(i, size_);
  41e18c:	d04d      	beq.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
  41e18e:	990d      	ldr	r1, [sp, #52]	@ 0x34
  41e190:	4299      	cmp	r1, r3
  41e192:	d14a      	bne.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    if (i != skip_dim) {
  41e194:	2a05      	cmp	r2, #5
  41e196:	d01b      	beq.n	41e1d0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>
  41e198:	f1bb 0f05 	cmp.w	fp, #5
    return dims_[i];
  41e19c:	9908      	ldr	r1, [sp, #32]
    TFLITE_DCHECK_LT(i, size_);
  41e19e:	d044      	beq.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
  41e1a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  41e1a2:	4299      	cmp	r1, r3
  41e1a4:	d141      	bne.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
  41e1a6:	2306      	movs	r3, #6
    if (i != skip_dim) {
  41e1a8:	429a      	cmp	r2, r3
  41e1aa:	d00e      	beq.n	41e1ca <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
    return dims_[i];
  41e1ac:	a90e      	add	r1, sp, #56	@ 0x38
  41e1ae:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  41e1b2:	459b      	cmp	fp, r3
    return dims_[i];
  41e1b4:	f851 0c2c 	ldr.w	r0, [r1, #-44]
  41e1b8:	ea4f 0183 	mov.w	r1, r3, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  41e1bc:	dd35      	ble.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
    return dims_[i];
  41e1be:	3138      	adds	r1, #56	@ 0x38
  41e1c0:	4469      	add	r1, sp
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
  41e1c2:	f851 1c14 	ldr.w	r1, [r1, #-20]
  41e1c6:	4288      	cmp	r0, r1
  41e1c8:	d12f      	bne.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
  for (int i = 0; i < dims_count; ++i) {
  41e1ca:	3301      	adds	r3, #1
  41e1cc:	429d      	cmp	r5, r3
  41e1ce:	d1eb      	bne.n	41e1a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10c>
  41e1d0:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
  41e1d2:	429a      	cmp	r2, r3
  41e1d4:	d022      	beq.n	41e21c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>
  41e1d6:	a902      	add	r1, sp, #8
  41e1d8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  41e1dc:	6849      	ldr	r1, [r1, #4]
  for (int i = 0; i < dims_count; ++i) {
  41e1de:	3301      	adds	r3, #1
  41e1e0:	429d      	cmp	r5, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
  41e1e2:	fb01 f707 	mul.w	r7, r1, r7
  for (int i = 0; i < dims_count; ++i) {
  41e1e6:	d1f4      	bne.n	41e1d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x136>
  41e1e8:	ab0e      	add	r3, sp, #56	@ 0x38
  41e1ea:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    TFLITE_DCHECK_LT(i, size_);
  41e1ee:	455a      	cmp	r2, fp
    return dims_[i];
  41e1f0:	f851 3c2c 	ldr.w	r3, [r1, #-44]
    TFLITE_DCHECK_LT(i, size_);
  41e1f4:	da19      	bge.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
  41e1f6:	f851 2c14 	ldr.w	r2, [r1, #-20]
  41e1fa:	4293      	cmp	r3, r2
  41e1fc:	d115      	bne.n	41e22a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
  op_data->row_size = depth;
  41e1fe:	f8ca 303c 	str.w	r3, [sl, #60]	@ 0x3c
  micro_context->DeallocateTempTfLiteTensor(input);
  41e202:	6833      	ldr	r3, [r6, #0]
  41e204:	4641      	mov	r1, r8
  41e206:	4630      	mov	r0, r6
  41e208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  op_data->num_rows = outer_size;
  41e20a:	f8ca 7038 	str.w	r7, [sl, #56]	@ 0x38
  micro_context->DeallocateTempTfLiteTensor(input);
  41e20e:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
  41e210:	6833      	ldr	r3, [r6, #0]
  41e212:	4649      	mov	r1, r9
  41e214:	4630      	mov	r0, r6
  41e216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  41e218:	4798      	blx	r3
  ~RuntimeShape() {}
  41e21a:	e749      	b.n	41e0b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
  for (int i = 0; i < dims_count; ++i) {
  41e21c:	1c53      	adds	r3, r2, #1
  41e21e:	429d      	cmp	r5, r3
  41e220:	d1d7      	bne.n	41e1d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x136>
  41e222:	e7e1      	b.n	41e1e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    if (i != skip_dim) {
  41e224:	4617      	mov	r7, r2
  41e226:	2300      	movs	r3, #0
  41e228:	e7d3      	b.n	41e1d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x136>
    TFLITE_DCHECK_LT(i, size_);
  41e22a:	f000 ffb5 	bl	41f198 <abort>
  41e22e:	bf00      	nop

0041e230 <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
  41e230:	b510      	push	{r4, lr}
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
  41e232:	2400      	movs	r4, #0
TfLiteRegistration Register_SOFTMAX() {
  41e234:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
  41e236:	9400      	str	r4, [sp, #0]
TfLiteRegistration Register_SOFTMAX() {
  41e238:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
  41e23a:	4b04      	ldr	r3, [pc, #16]	@ (41e24c <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
  41e23c:	4a04      	ldr	r2, [pc, #16]	@ (41e250 <_ZN6tflite16Register_SOFTMAXEv+0x20>)
  41e23e:	4905      	ldr	r1, [pc, #20]	@ (41e254 <_ZN6tflite16Register_SOFTMAXEv+0x24>)
  41e240:	f7fe f97a 	bl	41c538 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
  41e244:	4620      	mov	r0, r4
  41e246:	b002      	add	sp, #8
  41e248:	bd10      	pop	{r4, pc}
  41e24a:	bf00      	nop
  41e24c:	0041e049 	.word	0x0041e049
  41e250:	0041e09d 	.word	0x0041e09d
  41e254:	0041e039 	.word	0x0041e039

0041e258 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
  41e258:	7f08      	ldrb	r0, [r1, #28]
  41e25a:	2809      	cmp	r0, #9
  41e25c:	d001      	beq.n	41e262 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa>
    if (input->type == kTfLiteInt16) {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  41e25e:	2001      	movs	r0, #1
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    op_data->beta = static_cast<double>(params->beta);
  }
  return kTfLiteOk;
}
  41e260:	4770      	bx	lr
      if (output->type == kTfLiteInt16) {
  41e262:	7f10      	ldrb	r0, [r2, #28]
  41e264:	2807      	cmp	r0, #7
  41e266:	d00e      	beq.n	41e286 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
  41e268:	2809      	cmp	r0, #9
  41e26a:	d1f8      	bne.n	41e25e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
  41e26c:	68d0      	ldr	r0, [r2, #12]
  41e26e:	3080      	adds	r0, #128	@ 0x80
  41e270:	d1f5      	bne.n	41e25e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x6>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
  41e272:	eddf 7a24 	vldr	s15, [pc, #144]	@ 41e304 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xac>
  41e276:	ed92 7a02 	vldr	s14, [r2, #8]
  41e27a:	eeb4 7a67 	vcmp.f32	s14, s15
  41e27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41e282:	d018      	beq.n	41e2b6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x5e>
  41e284:	e7eb      	b.n	41e25e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
  41e286:	68d0      	ldr	r0, [r2, #12]
  41e288:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
  41e28c:	d1e7      	bne.n	41e25e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x6>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
  41e28e:	ed92 7a02 	vldr	s14, [r2, #8]
  41e292:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 41e308 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xb0>
  41e296:	eeb4 7ae7 	vcmpe.f32	s14, s15
  41e29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41e29e:	bfcc      	ite	gt
  41e2a0:	ee77 7a67 	vsubgt.f32	s15, s14, s15
  41e2a4:	ee77 7ac7 	vsuble.f32	s15, s15, s14
  41e2a8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 41e30c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xb4>
  41e2ac:	eef4 7ac7 	vcmpe.f32	s15, s14
  41e2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41e2b4:	dcd3      	bgt.n	41e25e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x6>
      tflite::PreprocessSoftmaxScaling(
  41e2b6:	ed91 1a02 	vldr	s2, [r1, #8]
  41e2ba:	ed93 0a00 	vldr	s0, [r3]
                                    SoftmaxParams* op_data) {
  41e2be:	b500      	push	{lr}
  41e2c0:	b083      	sub	sp, #12
      tflite::PreprocessSoftmaxScaling(
  41e2c2:	9b04      	ldr	r3, [sp, #16]
  41e2c4:	eeb7 1ac1 	vcvt.f64.f32	d1, s2
  41e2c8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
  41e2cc:	aa01      	add	r2, sp, #4
  41e2ce:	f103 0108 	add.w	r1, r3, #8
  41e2d2:	2005      	movs	r0, #5
  41e2d4:	f7f9 fa88 	bl	4177e8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
  41e2d8:	9b04      	ldr	r3, [sp, #16]
  41e2da:	9901      	ldr	r1, [sp, #4]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
  41e2dc:	221f      	movs	r2, #31
      op_data->input_left_shift = input_left_shift;
  41e2de:	60d9      	str	r1, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
  41e2e0:	2005      	movs	r0, #5
  41e2e2:	f7f9 fad5 	bl	417890 <_ZN6tflite20CalculateInputRadiusEiii>
  41e2e6:	ee07 0a10 	vmov	s14, r0
  41e2ea:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
  41e2ee:	eeb1 7b47 	vneg.f64	d7, d7
  41e2f2:	2000      	movs	r0, #0
      op_data->diff_min =
  41e2f4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
  41e2f8:	9b04      	ldr	r3, [sp, #16]
  41e2fa:	ed83 7a06 	vstr	s14, [r3, #24]
}
  41e2fe:	b003      	add	sp, #12
  41e300:	f85d fb04 	ldr.w	pc, [sp], #4
  41e304:	3b800000 	.word	0x3b800000
  41e308:	37800000 	.word	0x37800000
  41e30c:	3283126f 	.word	0x3283126f

0041e310 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
  41e310:	1e4b      	subs	r3, r1, #1
  41e312:	4418      	add	r0, r3
  41e314:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
  41e318:	fb01 f000 	mul.w	r0, r1, r0
  41e31c:	4770      	bx	lr
  41e31e:	bf00      	nop

0041e320 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
  41e320:	b5f0      	push	{r4, r5, r6, r7, lr}
  41e322:	4607      	mov	r7, r0
  41e324:	460e      	mov	r6, r1

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
  41e326:	69c0      	ldr	r0, [r0, #28]
  41e328:	2104      	movs	r1, #4
                                                         int* buffer_idx) {
  41e32a:	b085      	sub	sp, #20
  41e32c:	4615      	mov	r5, r2
  41e32e:	461c      	mov	r4, r3
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
  41e330:	f7ff ffee 	bl	41e310 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  41e334:	69bb      	ldr	r3, [r7, #24]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
  41e336:	4602      	mov	r2, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  41e338:	2b00      	cmp	r3, #0
  41e33a:	d069      	beq.n	41e410 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xf0>
  41e33c:	1e59      	subs	r1, r3, #1
  41e33e:	2903      	cmp	r1, #3
  41e340:	d975      	bls.n	41e42e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x10e>
  41e342:	ef80 6050 	vmov.i32	q3, #0	@ 0x00000000
  41e346:	ea4f 0c93 	mov.w	ip, r3, lsr #2
  41e34a:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
  41e34e:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  41e352:	4939      	ldr	r1, [pc, #228]	@ (41e438 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x118>)
  41e354:	f1ae 0e30 	sub.w	lr, lr, #48	@ 0x30
  41e358:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
  41e35c:	fb01 fe0e 	mul.w	lr, r1, lr
  41e360:	f02e 4e70 	bic.w	lr, lr, #4026531840	@ 0xf0000000
  41e364:	f10e 0e01 	add.w	lr, lr, #1
  41e368:	ff87 2e5f 	vmov.i8	q1, #255	@ 0xff
  41e36c:	f04e e001 	dls	lr, lr
  41e370:	ef26 0156 	vorr	q0, q3, q3
  41e374:	f100 0c34 	add.w	ip, r0, #52	@ 0x34
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
  41e378:	f85c 1c30 	ldr.w	r1, [ip, #-48]
  41e37c:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
  41e380:	9100      	str	r1, [sp, #0]
  41e382:	f85c 1c54 	ldr.w	r1, [ip, #-84]
  41e386:	9101      	str	r1, [sp, #4]
  41e388:	f85c 1c48 	ldr.w	r1, [ip, #-72]
  41e38c:	9102      	str	r1, [sp, #8]
  41e38e:	f85c 1c3c 	ldr.w	r1, [ip, #-60]
  41e392:	9103      	str	r1, [sp, #12]
  41e394:	ed9d 5f00 	ldc	15, cr5, [sp]
  41e398:	fe25 0f02 	cdp2	15, 2, cr0, cr5, cr2, {0}
  41e39c:	fe33 4f01 	cdp2	15, 3, cr4, cr3, cr1, {0}
  41e3a0:	ff26 6844 	vsub.i32	q3, q3, q2
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  41e3a4:	f00f c019 	le	lr, 41e378 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>
  41e3a8:	0799      	lsls	r1, r3, #30
  41e3aa:	eef9 0f06 	cdp	15, 15, cr0, cr9, cr6, {0}
  41e3ae:	f023 0c03 	bic.w	ip, r3, #3
  41e3b2:	d027      	beq.n	41e404 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xe4>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
  41e3b4:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
  41e3b8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
  41e3bc:	f8de 1004 	ldr.w	r1, [lr, #4]
      ++current_node_request_count;
  41e3c0:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
  41e3c4:	ea50 9010 			@ <UNDEFINED> instruction: 0xea509010
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  41e3c8:	f10c 0101 	add.w	r1, ip, #1
  41e3cc:	4299      	cmp	r1, r3
  41e3ce:	d219      	bcs.n	41e404 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xe4>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
  41e3d0:	f8de 1010 	ldr.w	r1, [lr, #16]
      ++current_node_request_count;
  41e3d4:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
  41e3d8:	ea50 9010 			@ <UNDEFINED> instruction: 0xea509010
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  41e3dc:	f10c 0102 	add.w	r1, ip, #2
  41e3e0:	428b      	cmp	r3, r1
  41e3e2:	d90f      	bls.n	41e404 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xe4>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
  41e3e4:	f8de 101c 	ldr.w	r1, [lr, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  41e3e8:	f10c 0c03 	add.w	ip, ip, #3
      ++current_node_request_count;
  41e3ec:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
  41e3f0:	ea50 9010 			@ <UNDEFINED> instruction: 0xea509010
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  41e3f4:	4563      	cmp	r3, ip
  41e3f6:	d905      	bls.n	41e404 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0xe4>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
  41e3f8:	f8de 1028 	ldr.w	r1, [lr, #40]	@ 0x28
      ++current_node_request_count;
  41e3fc:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
  41e400:	ea50 9010 			@ <UNDEFINED> instruction: 0xea509010
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
  41e404:	280b      	cmp	r0, #11
  41e406:	d80f      	bhi.n	41e428 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x108>
      &requests[scratch_buffer_request_count_];
  41e408:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  internal::ScratchBufferRequest* current_request =
  41e40c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
  41e410:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  return kTfLiteOk;
  41e414:	2000      	movs	r0, #0
  current_request->bytes = bytes;
  41e416:	6016      	str	r6, [r2, #0]
  current_request->subgraph_idx = subgraph_idx;
  41e418:	6095      	str	r5, [r2, #8]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
  41e41a:	6051      	str	r1, [r2, #4]
  *buffer_idx = scratch_buffer_request_count_;
  41e41c:	6023      	str	r3, [r4, #0]
  ++scratch_buffer_request_count_;
  41e41e:	69bb      	ldr	r3, [r7, #24]
  41e420:	3301      	adds	r3, #1
  41e422:	61bb      	str	r3, [r7, #24]
}
  41e424:	b005      	add	sp, #20
  41e426:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
  41e428:	2001      	movs	r0, #1
}
  41e42a:	b005      	add	sp, #20
  41e42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
  41e42e:	f04f 0c00 	mov.w	ip, #0
  size_t current_node_request_count = 0;
  41e432:	4660      	mov	r0, ip
  41e434:	e7be      	b.n	41e3b4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x94>
  41e436:	bf00      	nop
  41e438:	0aaaaaab 	.word	0x0aaaaaab

0041e43c <_ZN6tflite12MicroContextD1Ev>:
namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}

MicroContext::~MicroContext() {}
  41e43c:	4770      	bx	lr
  41e43e:	bf00      	nop

0041e440 <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
  return allocator_.AllocatePersistentBuffer(bytes);
  41e440:	6840      	ldr	r0, [r0, #4]
  41e442:	6803      	ldr	r3, [r0, #0]
  41e444:	695b      	ldr	r3, [r3, #20]
  41e446:	4718      	bx	r3

0041e448 <_ZN6tflite12MicroContext16GetScratchBufferEi>:
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroContext::GetScratchBuffer(int buffer_idx) {
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
  return handle->data;
  41e448:	6903      	ldr	r3, [r0, #16]
}
  41e44a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  41e44e:	4770      	bx	lr

0041e450 <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
  41e450:	4684      	mov	ip, r0
  41e452:	b510      	push	{r4, lr}
  41e454:	460b      	mov	r3, r1
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e456:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
  41e45a:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
  41e45e:	b082      	sub	sp, #8
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e460:	6801      	ldr	r1, [r0, #0]
  41e462:	9400      	str	r4, [sp, #0]
  41e464:	684c      	ldr	r4, [r1, #4]
  41e466:	f8dc 100c 	ldr.w	r1, [ip, #12]
  41e46a:	47a0      	blx	r4
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
}
  41e46c:	b002      	add	sp, #8
  41e46e:	bd10      	pop	{r4, pc}

0041e470 <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
  return allocator_.DeallocateTempTfLiteTensor(tensor);
  41e470:	6840      	ldr	r0, [r0, #4]
  41e472:	6803      	ldr	r3, [r0, #0]
  41e474:	689b      	ldr	r3, [r3, #8]
  41e476:	4718      	bx	r3

0041e478 <_ZN6tflite12MicroContext13GetEvalTensorEi>:
}

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
  41e478:	6883      	ldr	r3, [r0, #8]
              .tensors[tensor_idx];
  41e47a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  41e47e:	e9d3 3204 	ldrd	r3, r2, [r3, #16]
  41e482:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  41e486:	6858      	ldr	r0, [r3, #4]
}
  41e488:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  41e48c:	4770      	bx	lr
  41e48e:	bf00      	nop

0041e490 <_ZN6tflite12MicroContextD0Ev>:
MicroContext::~MicroContext() {}
  41e490:	b510      	push	{r4, lr}
  41e492:	4604      	mov	r4, r0
  41e494:	2118      	movs	r1, #24
  41e496:	f00a f839 	bl	42850c <_ZdlPvj>
  41e49a:	4620      	mov	r0, r4
  41e49c:	bd10      	pop	{r4, pc}
  41e49e:	bf00      	nop

0041e4a0 <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:
                                                       int* buffer_idx) {
  41e4a0:	4613      	mov	r3, r2
  return allocator_.RequestScratchBufferInArena(
  41e4a2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
  41e4a6:	6952      	ldr	r2, [r2, #20]
  41e4a8:	f7ff bf3a 	b.w	41e320 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>

0041e4ac <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
  41e4ac:	688b      	ldr	r3, [r1, #8]
  if (index >= 0 && index < max_size) {
  41e4ae:	2a00      	cmp	r2, #0
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
  41e4b0:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
  41e4b4:	db1b      	blt.n	41e4ee <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x42>
  41e4b6:	4291      	cmp	r1, r2
  41e4b8:	dd19      	ble.n	41e4ee <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x42>
    const int tensor_index = tensor_indices[index];
  41e4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  if (tensor_index < 0) {
  41e4be:	2b00      	cmp	r3, #0
  41e4c0:	db15      	blt.n	41e4ee <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x42>
  return AllocateTempTfLiteTensor(tensor_index);
  41e4c2:	6802      	ldr	r2, [r0, #0]
  41e4c4:	490b      	ldr	r1, [pc, #44]	@ (41e4f4 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x48>)
  41e4c6:	6952      	ldr	r2, [r2, #20]
  41e4c8:	4684      	mov	ip, r0
  41e4ca:	428a      	cmp	r2, r1
  41e4cc:	d10d      	bne.n	41e4ea <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3e>
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e4ce:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
    const TfLiteNode* node, int index) {
  41e4d2:	b510      	push	{r4, lr}
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e4d4:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
    const TfLiteNode* node, int index) {
  41e4d8:	b082      	sub	sp, #8
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e4da:	6801      	ldr	r1, [r0, #0]
  41e4dc:	9400      	str	r4, [sp, #0]
  41e4de:	684c      	ldr	r4, [r1, #4]
  41e4e0:	f8dc 100c 	ldr.w	r1, [ip, #12]
  41e4e4:	47a0      	blx	r4
}
  41e4e6:	b002      	add	sp, #8
  41e4e8:	bd10      	pop	{r4, pc}
  return AllocateTempTfLiteTensor(tensor_index);
  41e4ea:	4619      	mov	r1, r3
  41e4ec:	4710      	bx	r2
    return nullptr;
  41e4ee:	2000      	movs	r0, #0
}
  41e4f0:	4770      	bx	lr
  41e4f2:	bf00      	nop
  41e4f4:	0041e451 	.word	0x0041e451

0041e4f8 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
  41e4f8:	680b      	ldr	r3, [r1, #0]
  if (index >= 0 && index < max_size) {
  41e4fa:	2a00      	cmp	r2, #0
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
  41e4fc:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
  41e500:	db1b      	blt.n	41e53a <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x42>
  41e502:	4291      	cmp	r1, r2
  41e504:	dd19      	ble.n	41e53a <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x42>
    const int tensor_index = tensor_indices[index];
  41e506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  if (tensor_index < 0) {
  41e50a:	2b00      	cmp	r3, #0
  41e50c:	db15      	blt.n	41e53a <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x42>
  return AllocateTempTfLiteTensor(tensor_index);
  41e50e:	6802      	ldr	r2, [r0, #0]
  41e510:	490b      	ldr	r1, [pc, #44]	@ (41e540 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x48>)
  41e512:	6952      	ldr	r2, [r2, #20]
  41e514:	4684      	mov	ip, r0
  41e516:	428a      	cmp	r2, r1
  41e518:	d10d      	bne.n	41e536 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3e>
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e51a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
                                                    int index) {
  41e51e:	b510      	push	{r4, lr}
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e520:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
                                                    int index) {
  41e524:	b082      	sub	sp, #8
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e526:	6801      	ldr	r1, [r0, #0]
  41e528:	9400      	str	r4, [sp, #0]
  41e52a:	684c      	ldr	r4, [r1, #4]
  41e52c:	f8dc 100c 	ldr.w	r1, [ip, #12]
  41e530:	47a0      	blx	r4
}
  41e532:	b002      	add	sp, #8
  41e534:	bd10      	pop	{r4, pc}
  return AllocateTempTfLiteTensor(tensor_index);
  41e536:	4619      	mov	r1, r3
  41e538:	4710      	bx	r2
    return nullptr;
  41e53a:	2000      	movs	r0, #0
}
  41e53c:	4770      	bx	lr
  41e53e:	bf00      	nop
  41e540:	0041e451 	.word	0x0041e451

0041e544 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
  41e544:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
  41e546:	2a00      	cmp	r2, #0
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
  41e548:	f853 1b04 	ldr.w	r1, [r3], #4
  if (index >= 0 && index < max_size) {
  41e54c:	db1b      	blt.n	41e586 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x42>
  41e54e:	4291      	cmp	r1, r2
  41e550:	dd19      	ble.n	41e586 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x42>
    const int tensor_index = tensor_indices[index];
  41e552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  if (tensor_index < 0) {
  41e556:	2b00      	cmp	r3, #0
  41e558:	db15      	blt.n	41e586 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x42>
  return AllocateTempTfLiteTensor(tensor_index);
  41e55a:	6802      	ldr	r2, [r0, #0]
  41e55c:	490b      	ldr	r1, [pc, #44]	@ (41e58c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x48>)
  41e55e:	6952      	ldr	r2, [r2, #20]
  41e560:	4684      	mov	ip, r0
  41e562:	428a      	cmp	r2, r1
  41e564:	d10d      	bne.n	41e582 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3e>
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e566:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
                                                     int index) {
  41e56a:	b510      	push	{r4, lr}
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e56c:	e9d1 2404 	ldrd	r2, r4, [r1, #16]
                                                     int index) {
  41e570:	b082      	sub	sp, #8
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
  41e572:	6801      	ldr	r1, [r0, #0]
  41e574:	9400      	str	r4, [sp, #0]
  41e576:	684c      	ldr	r4, [r1, #4]
  41e578:	f8dc 100c 	ldr.w	r1, [ip, #12]
  41e57c:	47a0      	blx	r4
}
  41e57e:	b002      	add	sp, #8
  41e580:	bd10      	pop	{r4, pc}
  return AllocateTempTfLiteTensor(tensor_index);
  41e582:	4619      	mov	r1, r3
  41e584:	4710      	bx	r2
    return nullptr;
  41e586:	2000      	movs	r0, #0
}
  41e588:	4770      	bx	lr
  41e58a:	bf00      	nop
  41e58c:	0041e451 	.word	0x0041e451

0041e590 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
  41e590:	b430      	push	{r4, r5}
    : allocator_(*allocator), graph_(*graph), model_(model) {}
  41e592:	2400      	movs	r4, #0
  41e594:	4d04      	ldr	r5, [pc, #16]	@ (41e5a8 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x18>)
  41e596:	e9c0 4404 	strd	r4, r4, [r0, #16]
  41e59a:	e9c0 5100 	strd	r5, r1, [r0]
  41e59e:	bc30      	pop	{r4, r5}
  41e5a0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  41e5a4:	4770      	bx	lr
  41e5a6:	bf00      	nop
  41e5a8:	00435bcc 	.word	0x00435bcc

0041e5ac <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
  41e5ac:	b40e      	push	{r1, r2, r3}
  41e5ae:	b500      	push	{lr}
  41e5b0:	b082      	sub	sp, #8
  41e5b2:	a903      	add	r1, sp, #12
  41e5b4:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list args;
  va_start(args, format);
  41e5b8:	9101      	str	r1, [sp, #4]
  Log(format, args);
  41e5ba:	f000 f805 	bl	41e5c8 <_Z3LogPKcSt9__va_list>
  va_end(args);
}
  41e5be:	b002      	add	sp, #8
  41e5c0:	f85d eb04 	ldr.w	lr, [sp], #4
  41e5c4:	b003      	add	sp, #12
  41e5c6:	4770      	bx	lr

0041e5c8 <_Z3LogPKcSt9__va_list>:
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
  41e5c8:	4770      	bx	lr
  41e5ca:	bf00      	nop

0041e5cc <TfLiteIntArrayEqual>:
#endif
  return computed_size;
}

int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
  if (a == b) return 1;
  41e5cc:	4288      	cmp	r0, r1
  41e5ce:	d017      	beq.n	41e600 <TfLiteIntArrayEqual+0x34>
  if (a == nullptr || b == nullptr) return 0;
  41e5d0:	b1e0      	cbz	r0, 41e60c <TfLiteIntArrayEqual+0x40>
  41e5d2:	b199      	cbz	r1, 41e5fc <TfLiteIntArrayEqual+0x30>
}

int TfLiteIntArrayEqualsArray(const TfLiteIntArray* a, int b_size,
                              const int b_data[]) {
  if (a == nullptr) return (b_size == 0);
  if (a->size != b_size) return 0;
  41e5d4:	6802      	ldr	r2, [r0, #0]
  41e5d6:	680b      	ldr	r3, [r1, #0]
  41e5d8:	4293      	cmp	r3, r2
  41e5da:	d10f      	bne.n	41e5fc <TfLiteIntArrayEqual+0x30>
  int i = 0;
  for (; i < a->size; i++)
  41e5dc:	2b00      	cmp	r3, #0
  41e5de:	dd0f      	ble.n	41e600 <TfLiteIntArrayEqual+0x34>
int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
  41e5e0:	b410      	push	{r4}
  41e5e2:	e001      	b.n	41e5e8 <TfLiteIntArrayEqual+0x1c>
  for (; i < a->size; i++)
  41e5e4:	3b01      	subs	r3, #1
  41e5e6:	d00d      	beq.n	41e604 <TfLiteIntArrayEqual+0x38>
    if (a->data[i] != b_data[i]) return 0;
  41e5e8:	f850 4f04 	ldr.w	r4, [r0, #4]!
  41e5ec:	f851 2f04 	ldr.w	r2, [r1, #4]!
  41e5f0:	4294      	cmp	r4, r2
  41e5f2:	d0f7      	beq.n	41e5e4 <TfLiteIntArrayEqual+0x18>
  if (a == nullptr || b == nullptr) return 0;
  41e5f4:	2000      	movs	r0, #0
}
  41e5f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  41e5fa:	4770      	bx	lr
  if (a == nullptr || b == nullptr) return 0;
  41e5fc:	2000      	movs	r0, #0
  41e5fe:	4770      	bx	lr
  if (a == b) return 1;
  41e600:	2001      	movs	r0, #1
  41e602:	4770      	bx	lr
  41e604:	2001      	movs	r0, #1
}
  41e606:	f85d 4b04 	ldr.w	r4, [sp], #4
  41e60a:	4770      	bx	lr
  41e60c:	4770      	bx	lr
  41e60e:	bf00      	nop

0041e610 <_Z29ei_run_impulse_check_canceledv>:

extern ns_timer_config_t ei_tickTimer;

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
  41e610:	2000      	movs	r0, #0
  41e612:	4770      	bx	lr

0041e614 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return ns_us_ticker_read(&ei_tickTimer) / 1000L;
}

uint64_t ei_read_timer_us() {
  41e614:	b508      	push	{r3, lr}
    return ns_us_ticker_read(&ei_tickTimer);
  41e616:	4802      	ldr	r0, [pc, #8]	@ (41e620 <_Z16ei_read_timer_usv+0xc>)
  41e618:	f007 fc0a 	bl	425e30 <ns_us_ticker_read>

}
  41e61c:	2100      	movs	r1, #0
  41e61e:	bd08      	pop	{r3, pc}
  41e620:	2000a000 	.word	0x2000a000

0041e624 <_Z9ei_printfPKcz>:

__attribute__((weak)) void ei_printf(const char *format, ...) {
  41e624:	b40f      	push	{r0, r1, r2, r3}
  41e626:	b570      	push	{r4, r5, r6, lr}
    char buffer[1024] = {0};
  41e628:	f44f 6580 	mov.w	r5, #1024	@ 0x400
__attribute__((weak)) void ei_printf(const char *format, ...) {
  41e62c:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
  41e630:	f50d 6483 	add.w	r4, sp, #1048	@ 0x418
  41e634:	f854 6b04 	ldr.w	r6, [r4], #4
    char buffer[1024] = {0};
  41e638:	462a      	mov	r2, r5
  41e63a:	2100      	movs	r1, #0
  41e63c:	a802      	add	r0, sp, #8
  41e63e:	f002 fb31 	bl	420ca4 <memset>
    int length;
    va_list myargs;
    va_start(myargs, format);
    length = vsnprintf(buffer, sizeof(buffer), format, myargs);
  41e642:	4623      	mov	r3, r4
  41e644:	4632      	mov	r2, r6
  41e646:	4629      	mov	r1, r5
  41e648:	a802      	add	r0, sp, #8
    va_start(myargs, format);
  41e64a:	9401      	str	r4, [sp, #4]
    length = vsnprintf(buffer, sizeof(buffer), format, myargs);
  41e64c:	f001 ffd4 	bl	4205f8 <vsnprintf>
    va_end(myargs);

    if (length > 0) {
        //ei_usb_send((uint8_t *)buffer, length);
    }
}
  41e650:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
  41e654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  41e658:	b004      	add	sp, #16
  41e65a:	4770      	bx	lr

0041e65c <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
    ei_printf("%f", f);
  41e65c:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
__attribute__((weak)) void ei_printf_float(float f) {
  41e660:	b508      	push	{r3, lr}
    ei_printf("%f", f);
  41e662:	4803      	ldr	r0, [pc, #12]	@ (41e670 <_Z15ei_printf_floatf+0x14>)
  41e664:	ec53 2b17 	vmov	r2, r3, d7
  41e668:	f7ff ffdc 	bl	41e624 <_Z9ei_printfPKcz>
}
  41e66c:	bd08      	pop	{r3, pc}
  41e66e:	bf00      	nop
  41e670:	00434b24 	.word	0x00434b24

0041e674 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    void *p = ns_malloc(size);
  41e674:	f007 bb14 	b.w	425ca0 <ns_malloc>

0041e678 <_Z9ei_callocjj>:
    return p;
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
  41e678:	b510      	push	{r4, lr}
    void *ret = ns_malloc(nitems*size);
  41e67a:	fb01 f400 	mul.w	r4, r1, r0
  41e67e:	4620      	mov	r0, r4
  41e680:	f007 fb0e 	bl	425ca0 <ns_malloc>
    memset(ret, 0, nitems*size);
  41e684:	4622      	mov	r2, r4
    void *ret = ns_malloc(nitems*size);
  41e686:	4604      	mov	r4, r0
    memset(ret, 0, nitems*size);
  41e688:	2100      	movs	r1, #0
  41e68a:	f002 fb0b 	bl	420ca4 <memset>
    return ret;
}
  41e68e:	4620      	mov	r0, r4
  41e690:	bd10      	pop	{r4, pc}
  41e692:	bf00      	nop

0041e694 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
    // ns_lp_printf("free @ 0x%x\n", ptr);
    ns_free(ptr);
  41e694:	f007 bb10 	b.w	425cb8 <ns_free>

0041e698 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
  41e698:	4b04      	ldr	r3, [pc, #16]	@ (41e6ac <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x14>)
  41e69a:	681b      	ldr	r3, [r3, #0]
  41e69c:	428b      	cmp	r3, r1
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
  41e69e:	bfa3      	ittte	ge
  41e6a0:	4b03      	ldrge	r3, [pc, #12]	@ (41e6b0 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x18>)
  41e6a2:	eb03 03c1 	addge.w	r3, r3, r1, lsl #3
  41e6a6:	6858      	ldrge	r0, [r3, #4]
    return NULL;
  41e6a8:	2000      	movlt	r0, #0
}
  41e6aa:	4770      	bx	lr
  41e6ac:	20013e84 	.word	0x20013e84
  41e6b0:	20013e88 	.word	0x20013e88

0041e6b4 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:
  if (buffer_idx > (int)scratch_buffers_ix) {
  41e6b4:	4b04      	ldr	r3, [pc, #16]	@ (41e6c8 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi+0x14>)
  41e6b6:	681b      	ldr	r3, [r3, #0]
  41e6b8:	4299      	cmp	r1, r3
  return scratch_buffers[buffer_idx].ptr;
  41e6ba:	bfdd      	ittte	le
  41e6bc:	4b03      	ldrle	r3, [pc, #12]	@ (41e6cc <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi+0x18>)
  41e6be:	eb03 03c1 	addle.w	r3, r3, r1, lsl #3
  41e6c2:	6858      	ldrle	r0, [r3, #4]
    return NULL;
  41e6c4:	2000      	movgt	r0, #0
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
  41e6c6:	4770      	bx	lr
  41e6c8:	20013e84 	.word	0x20013e84
  41e6cc:	20013e88 	.word	0x20013e88

0041e6d0 <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  41e6d0:	4770      	bx	lr
  41e6d2:	bf00      	nop

0041e6d4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e6d4:	4a29      	ldr	r2, [pc, #164]	@ (41e77c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa8>)
                                       int tensor_idx) {
  41e6d6:	b538      	push	{r3, r4, r5, lr}
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e6d8:	6812      	ldr	r2, [r2, #0]
  41e6da:	4b29      	ldr	r3, [pc, #164]	@ (41e780 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xac>)
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e6dc:	4829      	ldr	r0, [pc, #164]	@ (41e784 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xb0>)
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e6e2:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e6e6:	4419      	add	r1, r3
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e6e8:	4291      	cmp	r1, r2
  41e6ea:	d01f      	beq.n	41e72c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x58>
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
  41e6ec:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  41e6f0:	429a      	cmp	r2, r3
  41e6f2:	d01f      	beq.n	41e734 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x60>
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e6f4:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
  41e6f8:	4291      	cmp	r1, r2
  41e6fa:	d037      	beq.n	41e76c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x98>
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
  41e6fc:	429a      	cmp	r2, r3
  41e6fe:	d037      	beq.n	41e770 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x9c>
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e700:	f9b0 202c 	ldrsh.w	r2, [r0, #44]	@ 0x2c
  41e704:	4291      	cmp	r1, r2
  41e706:	d035      	beq.n	41e774 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa0>
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
  41e708:	429a      	cmp	r2, r3
  41e70a:	d035      	beq.n	41e778 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xa4>
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e70c:	f9b0 203c 	ldrsh.w	r2, [r0, #60]	@ 0x3c
  41e710:	428a      	cmp	r2, r1
  41e712:	bf08      	it	eq
  41e714:	2303      	moveq	r3, #3
  41e716:	d00a      	beq.n	41e72e <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x5a>
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
  41e718:	429a      	cmp	r2, r3
  41e71a:	bf08      	it	eq
  41e71c:	2303      	moveq	r3, #3
  41e71e:	d00a      	beq.n	41e736 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x62>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  41e720:	2104      	movs	r1, #4
  41e722:	4819      	ldr	r0, [pc, #100]	@ (41e788 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xb4>)
  41e724:	f7ff ff7e 	bl	41e624 <_Z9ei_printfPKcz>
  return nullptr;
  41e728:	2000      	movs	r0, #0
}
  41e72a:	bd38      	pop	{r3, r4, r5, pc}
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
  41e72c:	2300      	movs	r3, #0
      return &tflEvalTensors[ix].tensor;
  41e72e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
}
  41e732:	bd38      	pop	{r3, r4, r5, pc}
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
  41e734:	2300      	movs	r3, #0
  tensor->type = tensorData[i].type;
  41e736:	4c15      	ldr	r4, [pc, #84]	@ (41e78c <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0xb8>)
  41e738:	eb01 0241 	add.w	r2, r1, r1, lsl #1
  41e73c:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
  41e740:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
  41e744:	f892 e001 	ldrb.w	lr, [r2, #1]
  tensor->data.data = tensorData[i].data;
  41e748:	f10c 0c08 	add.w	ip, ip, #8
  tensor->type = tensorData[i].type;
  41e74c:	eb00 1203 	add.w	r2, r0, r3, lsl #4
  41e750:	f882 e008 	strb.w	lr, [r2, #8]
  tensor->data.data = tensorData[i].data;
  41e754:	eb0c 0e04 	add.w	lr, ip, r4
  41e758:	f85e 5c04 	ldr.w	r5, [lr, #-4]
  41e75c:	f854 400c 	ldr.w	r4, [r4, ip]
  tensor->type = tensorData[i].type;
  41e760:	011b      	lsls	r3, r3, #4
  tensor->data.data = tensorData[i].data;
  41e762:	50c5      	str	r5, [r0, r3]
      return &tflEvalTensors[ix].tensor;
  41e764:	4610      	mov	r0, r2
  tensor->data.data = tensorData[i].data;
  41e766:	6054      	str	r4, [r2, #4]
      tflEvalTensors[ix].index = tensor_idx;
  41e768:	8191      	strh	r1, [r2, #12]
}
  41e76a:	bd38      	pop	{r3, r4, r5, pc}
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
  41e76c:	2301      	movs	r3, #1
  41e76e:	e7de      	b.n	41e72e <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x5a>
  41e770:	2301      	movs	r3, #1
  41e772:	e7e0      	b.n	41e736 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x62>
  41e774:	2302      	movs	r3, #2
  41e776:	e7da      	b.n	41e72e <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x5a>
  41e778:	2302      	movs	r3, #2
  41e77a:	e7dc      	b.n	41e736 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x62>
  41e77c:	20013f28 	.word	0x20013f28
  41e780:	00435c5c 	.word	0x00435c5c
  41e784:	20013fe0 	.word	0x20013fe0
  41e788:	00434b28 	.word	0x00434b28
  41e78c:	00435c88 	.word	0x00435c88

0041e790 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
  41e790:	b510      	push	{r4, lr}
  41e792:	4604      	mov	r4, r0
  41e794:	4b02      	ldr	r3, [pc, #8]	@ (41e7a0 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x10>)
  41e796:	6003      	str	r3, [r0, #0]
  41e798:	f7ff fe50 	bl	41e43c <_ZN6tflite12MicroContextD1Ev>
  41e79c:	4620      	mov	r0, r4
  41e79e:	bd10      	pop	{r4, pc}
  41e7a0:	00435c30 	.word	0x00435c30

0041e7a4 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
  41e7a4:	b510      	push	{r4, lr}
  41e7a6:	4604      	mov	r4, r0
  41e7a8:	4b04      	ldr	r3, [pc, #16]	@ (41e7bc <_ZN12_GLOBAL__N_115EonMicroContextD0Ev+0x18>)
  41e7aa:	6003      	str	r3, [r0, #0]
  41e7ac:	f7ff fe46 	bl	41e43c <_ZN6tflite12MicroContextD1Ev>
  41e7b0:	4620      	mov	r0, r4
  41e7b2:	2118      	movs	r1, #24
  41e7b4:	f009 feaa 	bl	42850c <_ZdlPvj>
  41e7b8:	4620      	mov	r0, r4
  41e7ba:	bd10      	pop	{r4, pc}
  41e7bc:	00435c30 	.word	0x00435c30

0041e7c0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:
                                       size_t bytes) {
  41e7c0:	b538      	push	{r3, r4, r5, lr}
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
  41e7c2:	f011 030f 	ands.w	r3, r1, #15
  41e7c6:	bf08      	it	eq
  41e7c8:	460a      	moveq	r2, r1
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
  41e7ca:	4d1c      	ldr	r5, [pc, #112]	@ (41e83c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x7c>)
  41e7cc:	bf18      	it	ne
  41e7ce:	f101 0210 	addne.w	r2, r1, #16
                                       size_t bytes) {
  41e7d2:	460c      	mov	r4, r1
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
  41e7d4:	491a      	ldr	r1, [pc, #104]	@ (41e840 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x80>)
  41e7d6:	bf18      	it	ne
  41e7d8:	1ad2      	subne	r2, r2, r3
  41e7da:	682b      	ldr	r3, [r5, #0]
  41e7dc:	6809      	ldr	r1, [r1, #0]
  41e7de:	1a9a      	subs	r2, r3, r2
  41e7e0:	4291      	cmp	r1, r2
  41e7e2:	d911      	bls.n	41e808 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x48>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
  41e7e4:	4d17      	ldr	r5, [pc, #92]	@ (41e844 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>)
  41e7e6:	682b      	ldr	r3, [r5, #0]
  41e7e8:	2b09      	cmp	r3, #9
  41e7ea:	d81b      	bhi.n	41e824 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x64>
    ptr = ei_calloc(bytes, 1);
  41e7ec:	2101      	movs	r1, #1
  41e7ee:	4620      	mov	r0, r4
  41e7f0:	f7ff ff42 	bl	41e678 <_Z9ei_callocjj>
    if (ptr == NULL) {
  41e7f4:	4603      	mov	r3, r0
  41e7f6:	b1d8      	cbz	r0, 41e830 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x70>
    overflow_buffers[overflow_buffers_ix++] = ptr;
  41e7f8:	682a      	ldr	r2, [r5, #0]
  41e7fa:	4913      	ldr	r1, [pc, #76]	@ (41e848 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x88>)
  41e7fc:	1c50      	adds	r0, r2, #1
  41e7fe:	6028      	str	r0, [r5, #0]
  41e800:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
  41e804:	4618      	mov	r0, r3
  41e806:	bd38      	pop	{r3, r4, r5, pc}
  current_location -= 15; // for alignment
  41e808:	1b1b      	subs	r3, r3, r4
  41e80a:	3b0f      	subs	r3, #15
  current_location += 16 - ((uintptr_t)(current_location) & 15);
  41e80c:	f023 030f 	bic.w	r3, r3, #15
  41e810:	3310      	adds	r3, #16
  memset(ptr, 0, bytes);
  41e812:	4622      	mov	r2, r4
  41e814:	2100      	movs	r1, #0
  41e816:	4618      	mov	r0, r3
  current_location += 16 - ((uintptr_t)(current_location) & 15);
  41e818:	602b      	str	r3, [r5, #0]
  memset(ptr, 0, bytes);
  41e81a:	f002 fa43 	bl	420ca4 <memset>
  41e81e:	4603      	mov	r3, r0
}
  41e820:	4618      	mov	r0, r3
  41e822:	bd38      	pop	{r3, r4, r5, pc}
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
  41e824:	4621      	mov	r1, r4
  41e826:	4809      	ldr	r0, [pc, #36]	@ (41e84c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x8c>)
  41e828:	f7ff fefc 	bl	41e624 <_Z9ei_printfPKcz>
      return NULL;
  41e82c:	2300      	movs	r3, #0
  41e82e:	e7e9      	b.n	41e804 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x44>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
  41e830:	4621      	mov	r1, r4
  41e832:	4807      	ldr	r0, [pc, #28]	@ (41e850 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x90>)
  41e834:	f7ff fef6 	bl	41e624 <_Z9ei_printfPKcz>
      return NULL;
  41e838:	e7f8      	b.n	41e82c <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6c>
  41e83a:	bf00      	nop
  41e83c:	20014108 	.word	0x20014108
  41e840:	2001410c 	.word	0x2001410c
  41e844:	20013ef8 	.word	0x20013ef8
  41e848:	20013f00 	.word	0x20013f00
  41e84c:	00434b60 	.word	0x00434b60
  41e850:	00434be0 	.word	0x00434be0

0041e854 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e854:	4a46      	ldr	r2, [pc, #280]	@ (41e970 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x11c>)
  41e856:	4b47      	ldr	r3, [pc, #284]	@ (41e974 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x120>)
  41e858:	6812      	ldr	r2, [r2, #0]
                               int tensor_idx) {
  41e85a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (tflTensors[ix].index == tensor_idx) {
  41e85e:	4c46      	ldr	r4, [pc, #280]	@ (41e978 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x124>)
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    if (tflTensors[ix].index == tensor_idx) {
  41e864:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e868:	440b      	add	r3, r1
    if (tflTensors[ix].index == tensor_idx) {
  41e86a:	4283      	cmp	r3, r0
  41e86c:	d023      	beq.n	41e8b6 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x62>
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
  41e86e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
  41e872:	4288      	cmp	r0, r1
  41e874:	d028      	beq.n	41e8c8 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x74>
    if (tflTensors[ix].index == tensor_idx) {
  41e876:	f9b4 0044 	ldrsh.w	r0, [r4, #68]	@ 0x44
  41e87a:	4283      	cmp	r3, r0
  41e87c:	d06d      	beq.n	41e95a <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x106>
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
  41e87e:	4288      	cmp	r0, r1
  41e880:	d06e      	beq.n	41e960 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x10c>
    if (tflTensors[ix].index == tensor_idx) {
  41e882:	f9b4 0068 	ldrsh.w	r0, [r4, #104]	@ 0x68
  41e886:	4283      	cmp	r3, r0
  41e888:	d06c      	beq.n	41e964 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x110>
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
  41e88a:	4288      	cmp	r0, r1
  41e88c:	d06d      	beq.n	41e96a <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x116>
    if (tflTensors[ix].index == tensor_idx) {
  41e88e:	f9b4 008c 	ldrsh.w	r0, [r4, #140]	@ 0x8c
  41e892:	4298      	cmp	r0, r3
  41e894:	bf08      	it	eq
  41e896:	f04f 0c03 	moveq.w	ip, #3
  41e89a:	d00e      	beq.n	41e8ba <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x66>
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
  41e89c:	4288      	cmp	r0, r1
  41e89e:	bf08      	it	eq
  41e8a0:	2603      	moveq	r6, #3
  41e8a2:	d012      	beq.n	41e8ca <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x76>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  41e8a4:	2104      	movs	r1, #4
  41e8a6:	4835      	ldr	r0, [pc, #212]	@ (41e97c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x128>)
  41e8a8:	f7ff febc 	bl	41e624 <_Z9ei_printfPKcz>
  return nullptr;
  41e8ac:	f04f 0c00 	mov.w	ip, #0
}
  41e8b0:	4660      	mov	r0, ip
  41e8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
  41e8b6:	f04f 0c00 	mov.w	ip, #0
      return &tflTensors[ix].tensor;
  41e8ba:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
  41e8be:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
  41e8c2:	4660      	mov	r0, ip
  41e8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
  41e8c8:	2600      	movs	r6, #0
  tensor->type = tensorData[i].type;
  41e8ca:	482d      	ldr	r0, [pc, #180]	@ (41e980 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x12c>)
  41e8cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  41e8d0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  41e8d4:	7855      	ldrb	r5, [r2, #1]
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41e8d6:	6851      	ldr	r1, [r2, #4]
  tensor->is_variable = false;
  41e8d8:	2200      	movs	r2, #0
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41e8da:	4f2a      	ldr	r7, [pc, #168]	@ (41e984 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x130>)
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
  41e8dc:	eb06 0cc6 	add.w	ip, r6, r6, lsl #3
  41e8e0:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41e8e4:	42b9      	cmp	r1, r7
  tensor->type = tensorData[i].type;
  41e8e6:	f88c 501c 	strb.w	r5, [ip, #28]
  tensor->is_variable = false;
  41e8ea:	f88c 201e 	strb.w	r2, [ip, #30]
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
  41e8ee:	ea4f 05c6 	mov.w	r5, r6, lsl #3
  tensor->type = tensorData[i].type;
  41e8f2:	ea4f 0243 	mov.w	r2, r3, lsl #1
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41e8f6:	d32d      	bcc.n	41e954 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x100>
  41e8f8:	4f23      	ldr	r7, [pc, #140]	@ (41e988 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x134>)
  41e8fa:	42b9      	cmp	r1, r7
  41e8fc:	bf34      	ite	cc
  41e8fe:	f04f 0802 	movcc.w	r8, #2
  41e902:	f04f 0801 	movcs.w	r8, #1
  tensor->bytes = tensorData[i].bytes;
  41e906:	441a      	add	r2, r3
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41e908:	19af      	adds	r7, r5, r6
  tensor->bytes = tensorData[i].bytes;
  41e90a:	eb00 0ec2 	add.w	lr, r0, r2, lsl #3
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41e90e:	eb04 0287 	add.w	r2, r4, r7, lsl #2
  tensor->data.data = tensorData[i].data;
  41e912:	6111      	str	r1, [r2, #16]
  tensor->quantization = tensorData[i].quantization;
  41e914:	f10e 0110 	add.w	r1, lr, #16
  41e918:	c903      	ldmia	r1, {r0, r1}
  41e91a:	e882 0003 	stmia.w	r2, {r0, r1}
  tensor->bytes = tensorData[i].bytes;
  41e91e:	f8de 000c 	ldr.w	r0, [lr, #12]
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
  41e922:	f814 1027 	ldrb.w	r1, [r4, r7, lsl #2]
  tensor->bytes = tensorData[i].bytes;
  41e926:	6190      	str	r0, [r2, #24]
  tensor->dims = tensorData[i].dims;
  41e928:	f8de 0008 	ldr.w	r0, [lr, #8]
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
  41e92c:	2901      	cmp	r1, #1
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41e92e:	f882 801d 	strb.w	r8, [r2, #29]
  tensor->dims = tensorData[i].dims;
  41e932:	6150      	str	r0, [r2, #20]
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
  41e934:	d107      	bne.n	41e946 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xf2>
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
  41e936:	f8de 1014 	ldr.w	r1, [lr, #20]
    tensor->params.zero_point = quant->zero_point->data[0];
  41e93a:	e9d1 7000 	ldrd	r7, r0, [r1]
    tensor->params.scale = quant->scale->data[0];
  41e93e:	6879      	ldr	r1, [r7, #4]
    tensor->params.zero_point = quant->zero_point->data[0];
  41e940:	6840      	ldr	r0, [r0, #4]
    tensor->params.scale = quant->scale->data[0];
  41e942:	6091      	str	r1, [r2, #8]
    tensor->params.zero_point = quant->zero_point->data[0];
  41e944:	60d0      	str	r0, [r2, #12]
      tflTensors[ix].index = tensor_idx;
  41e946:	4435      	add	r5, r6
  41e948:	eb04 0285 	add.w	r2, r4, r5, lsl #2
}
  41e94c:	4660      	mov	r0, ip
      tflTensors[ix].index = tensor_idx;
  41e94e:	8413      	strh	r3, [r2, #32]
}
  41e950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41e954:	f04f 0801 	mov.w	r8, #1
  41e958:	e7d5      	b.n	41e906 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0xb2>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
  41e95a:	f04f 0c01 	mov.w	ip, #1
  41e95e:	e7ac      	b.n	41e8ba <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x66>
  41e960:	2601      	movs	r6, #1
  41e962:	e7b2      	b.n	41e8ca <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x76>
  41e964:	f04f 0c02 	mov.w	ip, #2
  41e968:	e7a7      	b.n	41e8ba <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x66>
  41e96a:	2602      	movs	r6, #2
  41e96c:	e7ad      	b.n	41e8ca <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x76>
  41e96e:	bf00      	nop
  41e970:	20013f28 	.word	0x20013f28
  41e974:	00435c5c 	.word	0x00435c5c
  41e978:	20014020 	.word	0x20014020
  41e97c:	00434c18 	.word	0x00434c18
  41e980:	00435c88 	.word	0x00435c88
  41e984:	20014110 	.word	0x20014110
  41e988:	2004e0d0 	.word	0x2004e0d0

0041e98c <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e98c:	4a29      	ldr	r2, [pc, #164]	@ (41ea34 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0xa8>)

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
  41e98e:	b538      	push	{r3, r4, r5, lr}
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e990:	6812      	ldr	r2, [r2, #0]
  41e992:	4b29      	ldr	r3, [pc, #164]	@ (41ea38 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0xac>)
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e994:	4829      	ldr	r0, [pc, #164]	@ (41ea3c <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0xb0>)
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e99a:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41e99e:	4419      	add	r1, r3
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e9a0:	4291      	cmp	r1, r2
  41e9a2:	d01f      	beq.n	41e9e4 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0x58>
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
  41e9a4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  41e9a8:	429a      	cmp	r2, r3
  41e9aa:	d01f      	beq.n	41e9ec <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0x60>
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e9ac:	f9b0 201c 	ldrsh.w	r2, [r0, #28]
  41e9b0:	4291      	cmp	r1, r2
  41e9b2:	d037      	beq.n	41ea24 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0x98>
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
  41e9b4:	429a      	cmp	r2, r3
  41e9b6:	d037      	beq.n	41ea28 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0x9c>
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e9b8:	f9b0 202c 	ldrsh.w	r2, [r0, #44]	@ 0x2c
  41e9bc:	4291      	cmp	r1, r2
  41e9be:	d035      	beq.n	41ea2c <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0xa0>
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
  41e9c0:	429a      	cmp	r2, r3
  41e9c2:	d035      	beq.n	41ea30 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0xa4>
    if (tflEvalTensors[ix].index == tensor_idx) {
  41e9c4:	f9b0 203c 	ldrsh.w	r2, [r0, #60]	@ 0x3c
  41e9c8:	4291      	cmp	r1, r2
  41e9ca:	bf08      	it	eq
  41e9cc:	2303      	moveq	r3, #3
  41e9ce:	d00a      	beq.n	41e9e6 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0x5a>
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
  41e9d0:	429a      	cmp	r2, r3
  41e9d2:	bf08      	it	eq
  41e9d4:	2303      	moveq	r3, #3
  41e9d6:	d00a      	beq.n	41e9ee <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0x62>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  41e9d8:	2104      	movs	r1, #4
  41e9da:	4819      	ldr	r0, [pc, #100]	@ (41ea40 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0xb4>)
  41e9dc:	f7ff fe22 	bl	41e624 <_Z9ei_printfPKcz>
  return nullptr;
  41e9e0:	2000      	movs	r0, #0
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
  41e9e2:	bd38      	pop	{r3, r4, r5, pc}
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
  41e9e4:	2300      	movs	r3, #0
      return &tflEvalTensors[ix].tensor;
  41e9e6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  }
  41e9ea:	bd38      	pop	{r3, r4, r5, pc}
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
  41e9ec:	2300      	movs	r3, #0
  tensor->type = tensorData[i].type;
  41e9ee:	4c15      	ldr	r4, [pc, #84]	@ (41ea44 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0xb8>)
  41e9f0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
  41e9f4:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
  41e9f8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
  41e9fc:	f892 e001 	ldrb.w	lr, [r2, #1]
  tensor->data.data = tensorData[i].data;
  41ea00:	f10c 0c08 	add.w	ip, ip, #8
  tensor->type = tensorData[i].type;
  41ea04:	eb00 1203 	add.w	r2, r0, r3, lsl #4
  41ea08:	f882 e008 	strb.w	lr, [r2, #8]
  tensor->data.data = tensorData[i].data;
  41ea0c:	eb0c 0e04 	add.w	lr, ip, r4
  41ea10:	f85e 5c04 	ldr.w	r5, [lr, #-4]
  41ea14:	f854 400c 	ldr.w	r4, [r4, ip]
  tensor->type = tensorData[i].type;
  41ea18:	011b      	lsls	r3, r3, #4
  tensor->data.data = tensorData[i].data;
  41ea1a:	50c5      	str	r5, [r0, r3]
      return &tflEvalTensors[ix].tensor;
  41ea1c:	4610      	mov	r0, r2
  tensor->data.data = tensorData[i].data;
  41ea1e:	6054      	str	r4, [r2, #4]
      tflEvalTensors[ix].index = tensor_idx;
  41ea20:	8191      	strh	r1, [r2, #12]
  }
  41ea22:	bd38      	pop	{r3, r4, r5, pc}
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
  41ea24:	2301      	movs	r3, #1
  41ea26:	e7de      	b.n	41e9e6 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0x5a>
  41ea28:	2301      	movs	r3, #1
  41ea2a:	e7e0      	b.n	41e9ee <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0x62>
  41ea2c:	2302      	movs	r3, #2
  41ea2e:	e7da      	b.n	41e9e6 <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0x5a>
  41ea30:	2302      	movs	r3, #2
  41ea32:	e7dc      	b.n	41e9ee <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi+0x62>
  41ea34:	20013f28 	.word	0x20013f28
  41ea38:	00435c5c 	.word	0x00435c5c
  41ea3c:	20013fe0 	.word	0x20013fe0
  41ea40:	00434b28 	.word	0x00434b28
  41ea44:	00435c88 	.word	0x00435c88

0041ea48 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:
  void* AllocatePersistentBuffer(size_t bytes) {
  41ea48:	b538      	push	{r3, r4, r5, lr}
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
  41ea4a:	f011 030f 	ands.w	r3, r1, #15
  41ea4e:	bf08      	it	eq
  41ea50:	460a      	moveq	r2, r1
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
  41ea52:	4d1c      	ldr	r5, [pc, #112]	@ (41eac4 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x7c>)
  41ea54:	bf18      	it	ne
  41ea56:	f101 0210 	addne.w	r2, r1, #16
  void* AllocatePersistentBuffer(size_t bytes) {
  41ea5a:	460c      	mov	r4, r1
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
  41ea5c:	491a      	ldr	r1, [pc, #104]	@ (41eac8 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x80>)
  41ea5e:	bf18      	it	ne
  41ea60:	1ad2      	subne	r2, r2, r3
  41ea62:	682b      	ldr	r3, [r5, #0]
  41ea64:	6809      	ldr	r1, [r1, #0]
  41ea66:	1a9a      	subs	r2, r3, r2
  41ea68:	4291      	cmp	r1, r2
  41ea6a:	d911      	bls.n	41ea90 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x48>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
  41ea6c:	4d17      	ldr	r5, [pc, #92]	@ (41eacc <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x84>)
  41ea6e:	682b      	ldr	r3, [r5, #0]
  41ea70:	2b09      	cmp	r3, #9
  41ea72:	d81b      	bhi.n	41eaac <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x64>
    ptr = ei_calloc(bytes, 1);
  41ea74:	2101      	movs	r1, #1
  41ea76:	4620      	mov	r0, r4
  41ea78:	f7ff fdfe 	bl	41e678 <_Z9ei_callocjj>
    if (ptr == NULL) {
  41ea7c:	4603      	mov	r3, r0
  41ea7e:	b1d8      	cbz	r0, 41eab8 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x70>
    overflow_buffers[overflow_buffers_ix++] = ptr;
  41ea80:	682a      	ldr	r2, [r5, #0]
  41ea82:	4913      	ldr	r1, [pc, #76]	@ (41ead0 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x88>)
  41ea84:	1c50      	adds	r0, r2, #1
  41ea86:	6028      	str	r0, [r5, #0]
  41ea88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  }
  41ea8c:	4618      	mov	r0, r3
  41ea8e:	bd38      	pop	{r3, r4, r5, pc}
  current_location -= 15; // for alignment
  41ea90:	1b1b      	subs	r3, r3, r4
  41ea92:	3b0f      	subs	r3, #15
  current_location += 16 - ((uintptr_t)(current_location) & 15);
  41ea94:	f023 030f 	bic.w	r3, r3, #15
  41ea98:	3310      	adds	r3, #16
  memset(ptr, 0, bytes);
  41ea9a:	4622      	mov	r2, r4
  41ea9c:	2100      	movs	r1, #0
  41ea9e:	4618      	mov	r0, r3
  current_location += 16 - ((uintptr_t)(current_location) & 15);
  41eaa0:	602b      	str	r3, [r5, #0]
  memset(ptr, 0, bytes);
  41eaa2:	f002 f8ff 	bl	420ca4 <memset>
  41eaa6:	4603      	mov	r3, r0
  }
  41eaa8:	4618      	mov	r0, r3
  41eaaa:	bd38      	pop	{r3, r4, r5, pc}
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
  41eaac:	4621      	mov	r1, r4
  41eaae:	4809      	ldr	r0, [pc, #36]	@ (41ead4 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x8c>)
  41eab0:	f7ff fdb8 	bl	41e624 <_Z9ei_printfPKcz>
      return NULL;
  41eab4:	2300      	movs	r3, #0
  41eab6:	e7e9      	b.n	41ea8c <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x44>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
  41eab8:	4621      	mov	r1, r4
  41eaba:	4807      	ldr	r0, [pc, #28]	@ (41ead8 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x90>)
  41eabc:	f7ff fdb2 	bl	41e624 <_Z9ei_printfPKcz>
      return NULL;
  41eac0:	e7f8      	b.n	41eab4 <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj+0x6c>
  41eac2:	bf00      	nop
  41eac4:	20014108 	.word	0x20014108
  41eac8:	2001410c 	.word	0x2001410c
  41eacc:	20013ef8 	.word	0x20013ef8
  41ead0:	20013f00 	.word	0x20013f00
  41ead4:	00434b60 	.word	0x00434b60
  41ead8:	00434be0 	.word	0x00434be0

0041eadc <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
  41eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
  41eade:	4f28      	ldr	r7, [pc, #160]	@ (41eb80 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0xa4>)
  41eae0:	683d      	ldr	r5, [r7, #0]
  41eae2:	2d0d      	cmp	r5, #13
  41eae4:	d838      	bhi.n	41eb58 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x7c>
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
  41eae6:	460b      	mov	r3, r1
  41eae8:	4616      	mov	r6, r2
  41eaea:	f011 020f 	ands.w	r2, r1, #15
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
  41eaee:	bf1c      	itt	ne
  41eaf0:	f101 0310 	addne.w	r3, r1, #16
  41eaf4:	1a9b      	subne	r3, r3, r2
  41eaf6:	460c      	mov	r4, r1
  41eaf8:	4a22      	ldr	r2, [pc, #136]	@ (41eb84 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0xa8>)
  41eafa:	4923      	ldr	r1, [pc, #140]	@ (41eb88 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0xac>)
  41eafc:	6810      	ldr	r0, [r2, #0]
  41eafe:	680a      	ldr	r2, [r1, #0]
  41eb00:	1ad3      	subs	r3, r2, r3
  41eb02:	4298      	cmp	r0, r3
  41eb04:	d91b      	bls.n	41eb3e <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x62>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
  41eb06:	4d21      	ldr	r5, [pc, #132]	@ (41eb8c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0xb0>)
  41eb08:	682b      	ldr	r3, [r5, #0]
  41eb0a:	2b09      	cmp	r3, #9
  41eb0c:	d829      	bhi.n	41eb62 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x86>
    ptr = ei_calloc(bytes, 1);
  41eb0e:	2101      	movs	r1, #1
  41eb10:	4620      	mov	r0, r4
  41eb12:	f7ff fdb1 	bl	41e678 <_Z9ei_callocjj>
    if (ptr == NULL) {
  41eb16:	4603      	mov	r3, r0
  41eb18:	b360      	cbz	r0, 41eb74 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x98>
    overflow_buffers[overflow_buffers_ix++] = ptr;
  41eb1a:	682a      	ldr	r2, [r5, #0]
  41eb1c:	491c      	ldr	r1, [pc, #112]	@ (41eb90 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0xb4>)
  41eb1e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  41eb22:	3201      	adds	r2, #1
  41eb24:	602a      	str	r2, [r5, #0]
  scratch_buffers[scratch_buffers_ix] = b;
  41eb26:	683d      	ldr	r5, [r7, #0]
  41eb28:	4a1a      	ldr	r2, [pc, #104]	@ (41eb94 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0xb8>)
  scratch_buffers_ix++;
  41eb2a:	1c69      	adds	r1, r5, #1
  scratch_buffers[scratch_buffers_ix] = b;
  41eb2c:	f842 4035 	str.w	r4, [r2, r5, lsl #3]
  41eb30:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  return kTfLiteOk;
  41eb34:	2000      	movs	r0, #0
  *buffer_idx = scratch_buffers_ix;
  41eb36:	6035      	str	r5, [r6, #0]
  scratch_buffers[scratch_buffers_ix] = b;
  41eb38:	6053      	str	r3, [r2, #4]
  scratch_buffers_ix++;
  41eb3a:	6039      	str	r1, [r7, #0]
}
  41eb3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  current_location -= 15; // for alignment
  41eb3e:	1b13      	subs	r3, r2, r4
  41eb40:	3b0f      	subs	r3, #15
  current_location += 16 - ((uintptr_t)(current_location) & 15);
  41eb42:	f023 030f 	bic.w	r3, r3, #15
  41eb46:	3310      	adds	r3, #16
  41eb48:	600b      	str	r3, [r1, #0]
  memset(ptr, 0, bytes);
  41eb4a:	4618      	mov	r0, r3
  41eb4c:	4622      	mov	r2, r4
  41eb4e:	2100      	movs	r1, #0
  41eb50:	f002 f8a8 	bl	420ca4 <memset>
  41eb54:	4603      	mov	r3, r0
  if (!b.ptr) {
  41eb56:	e7e7      	b.n	41eb28 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x4c>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
  41eb58:	480f      	ldr	r0, [pc, #60]	@ (41eb98 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0xbc>)
  41eb5a:	f7ff fd63 	bl	41e624 <_Z9ei_printfPKcz>
    return kTfLiteError;
  41eb5e:	2001      	movs	r0, #1
}
  41eb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
  41eb62:	4621      	mov	r1, r4
  41eb64:	480d      	ldr	r0, [pc, #52]	@ (41eb9c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0xc0>)
  41eb66:	f7ff fd5d 	bl	41e624 <_Z9ei_printfPKcz>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
  41eb6a:	4621      	mov	r1, r4
  41eb6c:	480c      	ldr	r0, [pc, #48]	@ (41eba0 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0xc4>)
  41eb6e:	f7ff fd59 	bl	41e624 <_Z9ei_printfPKcz>
    return kTfLiteError;
  41eb72:	e7f4      	b.n	41eb5e <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x82>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
  41eb74:	4621      	mov	r1, r4
  41eb76:	480b      	ldr	r0, [pc, #44]	@ (41eba4 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0xc8>)
  41eb78:	f7ff fd54 	bl	41e624 <_Z9ei_printfPKcz>
  if (!b.ptr) {
  41eb7c:	e7f5      	b.n	41eb6a <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x8e>
  41eb7e:	bf00      	nop
  41eb80:	20013e84 	.word	0x20013e84
  41eb84:	2001410c 	.word	0x2001410c
  41eb88:	20014108 	.word	0x20014108
  41eb8c:	20013ef8 	.word	0x20013ef8
  41eb90:	20013f00 	.word	0x20013f00
  41eb94:	20013e88 	.word	0x20013e88
  41eb98:	00434c50 	.word	0x00434c50
  41eb9c:	00434b60 	.word	0x00434b60
  41eba0:	00434ca8 	.word	0x00434ca8
  41eba4:	00434be0 	.word	0x00434be0

0041eba8 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
  41eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
  41ebaa:	4f28      	ldr	r7, [pc, #160]	@ (41ec4c <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0xa4>)
  41ebac:	683d      	ldr	r5, [r7, #0]
  41ebae:	2d0d      	cmp	r5, #13
  41ebb0:	d838      	bhi.n	41ec24 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x7c>
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
  41ebb2:	460b      	mov	r3, r1
  41ebb4:	4616      	mov	r6, r2
  41ebb6:	f011 020f 	ands.w	r2, r1, #15
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
  41ebba:	bf1c      	itt	ne
  41ebbc:	f101 0310 	addne.w	r3, r1, #16
  41ebc0:	1a9b      	subne	r3, r3, r2
  41ebc2:	460c      	mov	r4, r1
  41ebc4:	4a22      	ldr	r2, [pc, #136]	@ (41ec50 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0xa8>)
  41ebc6:	4923      	ldr	r1, [pc, #140]	@ (41ec54 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0xac>)
  41ebc8:	6810      	ldr	r0, [r2, #0]
  41ebca:	680a      	ldr	r2, [r1, #0]
  41ebcc:	1ad3      	subs	r3, r2, r3
  41ebce:	4298      	cmp	r0, r3
  41ebd0:	d91b      	bls.n	41ec0a <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x62>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
  41ebd2:	4d21      	ldr	r5, [pc, #132]	@ (41ec58 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0xb0>)
  41ebd4:	682b      	ldr	r3, [r5, #0]
  41ebd6:	2b09      	cmp	r3, #9
  41ebd8:	d829      	bhi.n	41ec2e <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x86>
    ptr = ei_calloc(bytes, 1);
  41ebda:	2101      	movs	r1, #1
  41ebdc:	4620      	mov	r0, r4
  41ebde:	f7ff fd4b 	bl	41e678 <_Z9ei_callocjj>
    if (ptr == NULL) {
  41ebe2:	4603      	mov	r3, r0
  41ebe4:	b360      	cbz	r0, 41ec40 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x98>
    overflow_buffers[overflow_buffers_ix++] = ptr;
  41ebe6:	682a      	ldr	r2, [r5, #0]
  41ebe8:	491c      	ldr	r1, [pc, #112]	@ (41ec5c <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0xb4>)
  41ebea:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  41ebee:	3201      	adds	r2, #1
  41ebf0:	602a      	str	r2, [r5, #0]
  scratch_buffers[scratch_buffers_ix] = b;
  41ebf2:	683d      	ldr	r5, [r7, #0]
  41ebf4:	4a1a      	ldr	r2, [pc, #104]	@ (41ec60 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0xb8>)
  scratch_buffers_ix++;
  41ebf6:	1c69      	adds	r1, r5, #1
  scratch_buffers[scratch_buffers_ix] = b;
  41ebf8:	f842 4035 	str.w	r4, [r2, r5, lsl #3]
  41ebfc:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  return kTfLiteOk;
  41ec00:	2000      	movs	r0, #0
  *buffer_idx = scratch_buffers_ix;
  41ec02:	6035      	str	r5, [r6, #0]
  scratch_buffers[scratch_buffers_ix] = b;
  41ec04:	6053      	str	r3, [r2, #4]
  scratch_buffers_ix++;
  41ec06:	6039      	str	r1, [r7, #0]
  }
  41ec08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  current_location -= 15; // for alignment
  41ec0a:	1b13      	subs	r3, r2, r4
  41ec0c:	3b0f      	subs	r3, #15
  current_location += 16 - ((uintptr_t)(current_location) & 15);
  41ec0e:	f023 030f 	bic.w	r3, r3, #15
  41ec12:	3310      	adds	r3, #16
  41ec14:	600b      	str	r3, [r1, #0]
  memset(ptr, 0, bytes);
  41ec16:	4618      	mov	r0, r3
  41ec18:	4622      	mov	r2, r4
  41ec1a:	2100      	movs	r1, #0
  41ec1c:	f002 f842 	bl	420ca4 <memset>
  41ec20:	4603      	mov	r3, r0
  if (!b.ptr) {
  41ec22:	e7e7      	b.n	41ebf4 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x4c>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
  41ec24:	480f      	ldr	r0, [pc, #60]	@ (41ec64 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0xbc>)
  41ec26:	f7ff fcfd 	bl	41e624 <_Z9ei_printfPKcz>
    return kTfLiteError;
  41ec2a:	2001      	movs	r0, #1
  }
  41ec2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
  41ec2e:	4621      	mov	r1, r4
  41ec30:	480d      	ldr	r0, [pc, #52]	@ (41ec68 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0xc0>)
  41ec32:	f7ff fcf7 	bl	41e624 <_Z9ei_printfPKcz>
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
  41ec36:	4621      	mov	r1, r4
  41ec38:	480c      	ldr	r0, [pc, #48]	@ (41ec6c <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0xc4>)
  41ec3a:	f7ff fcf3 	bl	41e624 <_Z9ei_printfPKcz>
    return kTfLiteError;
  41ec3e:	e7f4      	b.n	41ec2a <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x82>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
  41ec40:	4621      	mov	r1, r4
  41ec42:	480b      	ldr	r0, [pc, #44]	@ (41ec70 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0xc8>)
  41ec44:	f7ff fcee 	bl	41e624 <_Z9ei_printfPKcz>
  if (!b.ptr) {
  41ec48:	e7f5      	b.n	41ec36 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x8e>
  41ec4a:	bf00      	nop
  41ec4c:	20013e84 	.word	0x20013e84
  41ec50:	2001410c 	.word	0x2001410c
  41ec54:	20014108 	.word	0x20014108
  41ec58:	20013ef8 	.word	0x20013ef8
  41ec5c:	20013f00 	.word	0x20013f00
  41ec60:	20013e88 	.word	0x20013e88
  41ec64:	00434c50 	.word	0x00434c50
  41ec68:	00434b60 	.word	0x00434b60
  41ec6c:	00434ca8 	.word	0x00434ca8
  41ec70:	00434be0 	.word	0x00434be0

0041ec74 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41ec74:	4a46      	ldr	r2, [pc, #280]	@ (41ed90 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x11c>)
  41ec76:	4b47      	ldr	r3, [pc, #284]	@ (41ed94 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x120>)
  41ec78:	6812      	ldr	r2, [r2, #0]
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
  41ec7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (tflTensors[ix].index == tensor_idx) {
  41ec7e:	4c46      	ldr	r4, [pc, #280]	@ (41ed98 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x124>)
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41ec80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    if (tflTensors[ix].index == tensor_idx) {
  41ec84:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
  41ec88:	440b      	add	r3, r1
    if (tflTensors[ix].index == tensor_idx) {
  41ec8a:	4283      	cmp	r3, r0
  41ec8c:	d023      	beq.n	41ecd6 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x62>
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
  41ec8e:	f647 71ff 	movw	r1, #32767	@ 0x7fff
  41ec92:	4288      	cmp	r0, r1
  41ec94:	d028      	beq.n	41ece8 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x74>
    if (tflTensors[ix].index == tensor_idx) {
  41ec96:	f9b4 0044 	ldrsh.w	r0, [r4, #68]	@ 0x44
  41ec9a:	4283      	cmp	r3, r0
  41ec9c:	d06d      	beq.n	41ed7a <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x106>
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
  41ec9e:	4288      	cmp	r0, r1
  41eca0:	d06e      	beq.n	41ed80 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x10c>
    if (tflTensors[ix].index == tensor_idx) {
  41eca2:	f9b4 0068 	ldrsh.w	r0, [r4, #104]	@ 0x68
  41eca6:	4283      	cmp	r3, r0
  41eca8:	d06c      	beq.n	41ed84 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x110>
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
  41ecaa:	4288      	cmp	r0, r1
  41ecac:	d06d      	beq.n	41ed8a <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x116>
    if (tflTensors[ix].index == tensor_idx) {
  41ecae:	f9b4 008c 	ldrsh.w	r0, [r4, #140]	@ 0x8c
  41ecb2:	4298      	cmp	r0, r3
  41ecb4:	bf08      	it	eq
  41ecb6:	f04f 0c03 	moveq.w	ip, #3
  41ecba:	d00e      	beq.n	41ecda <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x66>
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
  41ecbc:	4288      	cmp	r0, r1
  41ecbe:	bf08      	it	eq
  41ecc0:	2603      	moveq	r6, #3
  41ecc2:	d012      	beq.n	41ecea <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x76>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  41ecc4:	2104      	movs	r1, #4
  41ecc6:	4835      	ldr	r0, [pc, #212]	@ (41ed9c <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x128>)
  41ecc8:	f7ff fcac 	bl	41e624 <_Z9ei_printfPKcz>
  return nullptr;
  41eccc:	f04f 0c00 	mov.w	ip, #0
  }
  41ecd0:	4660      	mov	r0, ip
  41ecd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
  41ecd6:	f04f 0c00 	mov.w	ip, #0
      return &tflTensors[ix].tensor;
  41ecda:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
  41ecde:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
  }
  41ece2:	4660      	mov	r0, ip
  41ece4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
  41ece8:	2600      	movs	r6, #0
  tensor->type = tensorData[i].type;
  41ecea:	482d      	ldr	r0, [pc, #180]	@ (41eda0 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x12c>)
  41ecec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  41ecf0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  41ecf4:	7855      	ldrb	r5, [r2, #1]
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41ecf6:	6851      	ldr	r1, [r2, #4]
  tensor->is_variable = false;
  41ecf8:	2200      	movs	r2, #0
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41ecfa:	4f2a      	ldr	r7, [pc, #168]	@ (41eda4 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x130>)
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
  41ecfc:	eb06 0cc6 	add.w	ip, r6, r6, lsl #3
  41ed00:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41ed04:	42b9      	cmp	r1, r7
  tensor->type = tensorData[i].type;
  41ed06:	f88c 501c 	strb.w	r5, [ip, #28]
  tensor->is_variable = false;
  41ed0a:	f88c 201e 	strb.w	r2, [ip, #30]
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
  41ed0e:	ea4f 05c6 	mov.w	r5, r6, lsl #3
  tensor->type = tensorData[i].type;
  41ed12:	ea4f 0243 	mov.w	r2, r3, lsl #1
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41ed16:	d32d      	bcc.n	41ed74 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x100>
  41ed18:	4f23      	ldr	r7, [pc, #140]	@ (41eda8 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x134>)
  41ed1a:	42b9      	cmp	r1, r7
  41ed1c:	bf34      	ite	cc
  41ed1e:	f04f 0802 	movcc.w	r8, #2
  41ed22:	f04f 0801 	movcs.w	r8, #1
  tensor->bytes = tensorData[i].bytes;
  41ed26:	441a      	add	r2, r3
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41ed28:	19af      	adds	r7, r5, r6
  tensor->bytes = tensorData[i].bytes;
  41ed2a:	eb00 0ec2 	add.w	lr, r0, r2, lsl #3
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41ed2e:	eb04 0287 	add.w	r2, r4, r7, lsl #2
  tensor->data.data = tensorData[i].data;
  41ed32:	6111      	str	r1, [r2, #16]
  tensor->quantization = tensorData[i].quantization;
  41ed34:	f10e 0110 	add.w	r1, lr, #16
  41ed38:	c903      	ldmia	r1, {r0, r1}
  41ed3a:	e882 0003 	stmia.w	r2, {r0, r1}
  tensor->bytes = tensorData[i].bytes;
  41ed3e:	f8de 000c 	ldr.w	r0, [lr, #12]
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
  41ed42:	f814 1027 	ldrb.w	r1, [r4, r7, lsl #2]
  tensor->bytes = tensorData[i].bytes;
  41ed46:	6190      	str	r0, [r2, #24]
  tensor->dims = tensorData[i].dims;
  41ed48:	f8de 0008 	ldr.w	r0, [lr, #8]
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
  41ed4c:	2901      	cmp	r1, #1
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41ed4e:	f882 801d 	strb.w	r8, [r2, #29]
  tensor->dims = tensorData[i].dims;
  41ed52:	6150      	str	r0, [r2, #20]
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
  41ed54:	d107      	bne.n	41ed66 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0xf2>
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
  41ed56:	f8de 1014 	ldr.w	r1, [lr, #20]
    tensor->params.zero_point = quant->zero_point->data[0];
  41ed5a:	e9d1 7000 	ldrd	r7, r0, [r1]
    tensor->params.scale = quant->scale->data[0];
  41ed5e:	6879      	ldr	r1, [r7, #4]
    tensor->params.zero_point = quant->zero_point->data[0];
  41ed60:	6840      	ldr	r0, [r0, #4]
    tensor->params.scale = quant->scale->data[0];
  41ed62:	6091      	str	r1, [r2, #8]
    tensor->params.zero_point = quant->zero_point->data[0];
  41ed64:	60d0      	str	r0, [r2, #12]
      tflTensors[ix].index = tensor_idx;
  41ed66:	4435      	add	r5, r6
  41ed68:	eb04 0285 	add.w	r2, r4, r5, lsl #2
  }
  41ed6c:	4660      	mov	r0, ip
      tflTensors[ix].index = tensor_idx;
  41ed6e:	8413      	strh	r3, [r2, #32]
  }
  41ed70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41ed74:	f04f 0801 	mov.w	r8, #1
  41ed78:	e7d5      	b.n	41ed26 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0xb2>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
  41ed7a:	f04f 0c01 	mov.w	ip, #1
  41ed7e:	e7ac      	b.n	41ecda <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x66>
  41ed80:	2601      	movs	r6, #1
  41ed82:	e7b2      	b.n	41ecea <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x76>
  41ed84:	f04f 0c02 	mov.w	ip, #2
  41ed88:	e7a7      	b.n	41ecda <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x66>
  41ed8a:	2602      	movs	r6, #2
  41ed8c:	e7ad      	b.n	41ecea <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi+0x76>
  41ed8e:	bf00      	nop
  41ed90:	20013f28 	.word	0x20013f28
  41ed94:	00435c5c 	.word	0x00435c5c
  41ed98:	20014020 	.word	0x20014020
  41ed9c:	00434c18 	.word	0x00434c18
  41eda0:	00435c88 	.word	0x00435c88
  41eda4:	20014110 	.word	0x20014110
  41eda8:	2004e0d0 	.word	0x2004e0d0

0041edac <_Z19tflite_learn_7_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
  41edac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
  41edb0:	4c78      	ldr	r4, [pc, #480]	@ (41ef94 <_Z19tflite_learn_7_initPFPvjjE+0x1e8>)
TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
  41edb2:	b093      	sub	sp, #76	@ 0x4c
  memset(tensor_arena, 0, kTensorArenaSize);
  41edb4:	2100      	movs	r1, #0
  41edb6:	4a78      	ldr	r2, [pc, #480]	@ (41ef98 <_Z19tflite_learn_7_initPFPvjjE+0x1ec>)
  41edb8:	4620      	mov	r0, r4
  41edba:	f001 ff73 	bl	420ca4 <memset>
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
  41edbe:	2300      	movs	r3, #0
#endif
  tensor_boundary = tensor_arena;
  41edc0:	4e76      	ldr	r6, [pc, #472]	@ (41ef9c <_Z19tflite_learn_7_initPFPvjjE+0x1f0>)
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
  41edc2:	f10d 0b30 	add.w	fp, sp, #48	@ 0x30
  current_location = tensor_arena + kTensorArenaSize;
  41edc6:	4f76      	ldr	r7, [pc, #472]	@ (41efa0 <_Z19tflite_learn_7_initPFPvjjE+0x1f4>)
  41edc8:	4d76      	ldr	r5, [pc, #472]	@ (41efa4 <_Z19tflite_learn_7_initPFPvjjE+0x1f8>)
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
  41edca:	461a      	mov	r2, r3
  41edcc:	4619      	mov	r1, r3
  41edce:	4658      	mov	r0, fp
  current_location = tensor_arena + kTensorArenaSize;
  41edd0:	603d      	str	r5, [r7, #0]
  tensor_boundary = tensor_arena;
  41edd2:	6034      	str	r4, [r6, #0]
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
  41edd4:	f7ff fbdc 	bl	41e590 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
  41edd8:	6830      	ldr	r0, [r6, #0]
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  41edda:	2148      	movs	r1, #72	@ 0x48
  41eddc:	f04f 0e00 	mov.w	lr, #0
  41ede0:	4684      	mov	ip, r0
  41ede2:	4680      	mov	r8, r0
  ctx.impl_ = static_cast<void*>(&micro_context_);
  41ede4:	4b70      	ldr	r3, [pc, #448]	@ (41efa8 <_Z19tflite_learn_7_initPFPvjjE+0x1fc>)
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  41ede6:	4a71      	ldr	r2, [pc, #452]	@ (41efac <_Z19tflite_learn_7_initPFPvjjE+0x200>)
  ctx.impl_ = static_cast<void*>(&micro_context_);
  41ede8:	f8c3 b008 	str.w	fp, [r3, #8]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  41edec:	635a      	str	r2, [r3, #52]	@ 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  41edee:	4a70      	ldr	r2, [pc, #448]	@ (41efb0 <_Z19tflite_learn_7_initPFPvjjE+0x204>)
  ctx.tensors_size = 72;
  41edf0:	6019      	str	r1, [r3, #0]
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  41edf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  41edf4:	4a6f      	ldr	r2, [pc, #444]	@ (41efb4 <_Z19tflite_learn_7_initPFPvjjE+0x208>)
  41edf6:	641a      	str	r2, [r3, #64]	@ 0x40
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
  41edf8:	4a6f      	ldr	r2, [pc, #444]	@ (41efb8 <_Z19tflite_learn_7_initPFPvjjE+0x20c>)
  41edfa:	920c      	str	r2, [sp, #48]	@ 0x30
  ctx.GetTensor = &GetTensorImpl;
  41edfc:	4a6f      	ldr	r2, [pc, #444]	@ (41efbc <_Z19tflite_learn_7_initPFPvjjE+0x210>)
  41edfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  41ee00:	4a6f      	ldr	r2, [pc, #444]	@ (41efc0 <_Z19tflite_learn_7_initPFPvjjE+0x214>)
  41ee02:	651a      	str	r2, [r3, #80]	@ 0x50
  ctx.ReportError = &MicroContextReportOpError;
  41ee04:	4a6f      	ldr	r2, [pc, #444]	@ (41efc4 <_Z19tflite_learn_7_initPFPvjjE+0x218>)
  41ee06:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < 72; ++i) {
  41ee08:	4a6f      	ldr	r2, [pc, #444]	@ (41efc8 <_Z19tflite_learn_7_initPFPvjjE+0x21c>)
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
  41ee0a:	6853      	ldr	r3, [r2, #4]
  41ee0c:	42a3      	cmp	r3, r4
  41ee0e:	d308      	bcc.n	41ee22 <_Z19tflite_learn_7_initPFPvjjE+0x76>
  41ee10:	42ab      	cmp	r3, r5
  41ee12:	d206      	bcs.n	41ee22 <_Z19tflite_learn_7_initPFPvjjE+0x76>
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
  41ee14:	68d0      	ldr	r0, [r2, #12]
  41ee16:	4403      	add	r3, r0
      if (data_end_ptr > tensor_boundary) {
  41ee18:	459c      	cmp	ip, r3
        tensor_boundary = data_end_ptr;
  41ee1a:	bf3c      	itt	cc
  41ee1c:	469c      	movcc	ip, r3
      if (data_end_ptr > tensor_boundary) {
  41ee1e:	f04f 0e01 	movcc.w	lr, #1
  for (size_t i = 0; i < 72; ++i) {
  41ee22:	3901      	subs	r1, #1
  41ee24:	f102 0218 	add.w	r2, r2, #24
  41ee28:	d1ef      	bne.n	41ee0a <_Z19tflite_learn_7_initPFPvjjE+0x5e>
  41ee2a:	4640      	mov	r0, r8
  41ee2c:	f1be 0f00 	cmp.w	lr, #0
  41ee30:	d002      	beq.n	41ee38 <_Z19tflite_learn_7_initPFPvjjE+0x8c>
  41ee32:	4660      	mov	r0, ip
  41ee34:	f8c6 c000 	str.w	ip, [r6]
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
  41ee38:	683b      	ldr	r3, [r7, #0]
  41ee3a:	4283      	cmp	r3, r0
  41ee3c:	f0c0 8095 	bcc.w	41ef6a <_Z19tflite_learn_7_initPFPvjjE+0x1be>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  41ee40:	4e62      	ldr	r6, [pc, #392]	@ (41efcc <_Z19tflite_learn_7_initPFPvjjE+0x220>)
  41ee42:	a802      	add	r0, sp, #8
  41ee44:	4634      	mov	r4, r6
  41ee46:	af02      	add	r7, sp, #8
  41ee48:	f7fc fd0a 	bl	41b860 <_ZN6tflite16Register_CONV_2DEv>
  41ee4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  41ee4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  41ee50:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
  41ee52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  41ee54:	683b      	ldr	r3, [r7, #0]
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  41ee56:	a802      	add	r0, sp, #8
  registrations[OP_CONV_2D] = Register_CONV_2D();
  41ee58:	6023      	str	r3, [r4, #0]
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  41ee5a:	f106 0524 	add.w	r5, r6, #36	@ 0x24
  41ee5e:	f7fd fa53 	bl	41c308 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
  41ee62:	f10d 0c08 	add.w	ip, sp, #8
  41ee66:	683c      	ldr	r4, [r7, #0]
  41ee68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  41ee6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  41ee6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  41ee72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  registrations[OP_ADD] = Register_ADD();
  41ee74:	a802      	add	r0, sp, #8
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  41ee76:	602c      	str	r4, [r5, #0]
  registrations[OP_ADD] = Register_ADD();
  41ee78:	f7fc f88a 	bl	41af90 <_ZN6tflite12Register_ADDEv>
  41ee7c:	f106 0548 	add.w	r5, r6, #72	@ 0x48
  41ee80:	f10d 0c08 	add.w	ip, sp, #8
  41ee84:	683c      	ldr	r4, [r7, #0]
  41ee86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  41ee8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  41ee8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  41ee90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  registrations[OP_PAD] = Register_PAD();
  41ee92:	a802      	add	r0, sp, #8
  registrations[OP_ADD] = Register_ADD();
  41ee94:	602c      	str	r4, [r5, #0]
  registrations[OP_PAD] = Register_PAD();
  41ee96:	f7ff f8bb 	bl	41e010 <_ZN6tflite12Register_PADEv>
  41ee9a:	f106 056c 	add.w	r5, r6, #108	@ 0x6c
  41ee9e:	f10d 0c08 	add.w	ip, sp, #8
  41eea2:	683c      	ldr	r4, [r7, #0]
  41eea4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  41eea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  41eeaa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  41eeae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
  41eeb0:	a802      	add	r0, sp, #8
  registrations[OP_PAD] = Register_PAD();
  41eeb2:	602c      	str	r4, [r5, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
  41eeb4:	f7ff f9bc 	bl	41e230 <_ZN6tflite16Register_SOFTMAXEv>

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
  41eeb8:	2300      	movs	r3, #0
  41eeba:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 41efe0 <_Z19tflite_learn_7_initPFPvjjE+0x234>
  41eebe:	4a44      	ldr	r2, [pc, #272]	@ (41efd0 <_Z19tflite_learn_7_initPFPvjjE+0x224>)
  41eec0:	4644      	mov	r4, r8
  41eec2:	6013      	str	r3, [r2, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
  41eec4:	683b      	ldr	r3, [r7, #0]
  41eec6:	f10d 0c08 	add.w	ip, sp, #8
  41eeca:	f106 0e90 	add.w	lr, r6, #144	@ 0x90
  41eece:	9301      	str	r3, [sp, #4]
  41eed0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  41eed4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  41eed8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  41eedc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  41eee0:	4d3c      	ldr	r5, [pc, #240]	@ (41efd4 <_Z19tflite_learn_7_initPFPvjjE+0x228>)
  41eee2:	9b01      	ldr	r3, [sp, #4]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
  41eee4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 41efa8 <_Z19tflite_learn_7_initPFPvjjE+0x1fc>
  41eee8:	1c6f      	adds	r7, r5, #1
  41eeea:	f105 091c 	add.w	r9, r5, #28
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
  41eeee:	f8ce 3000 	str.w	r3, [lr]
      if (registrations[used_ops[i]].init) {
  41eef2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
  41eef6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  41eefa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  41eefe:	b123      	cbz	r3, 41ef0a <_Z19tflite_learn_7_initPFPvjjE+0x15e>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
  41ef00:	2200      	movs	r2, #0
  41ef02:	4650      	mov	r0, sl
  41ef04:	6921      	ldr	r1, [r4, #16]
  41ef06:	4798      	blx	r3
  41ef08:	60e0      	str	r0, [r4, #12]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
  41ef0a:	45a9      	cmp	r9, r5
  41ef0c:	f104 041c 	add.w	r4, r4, #28
  41ef10:	d1ef      	bne.n	41eef2 <_Z19tflite_learn_7_initPFPvjjE+0x146>
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
  41ef12:	2300      	movs	r3, #0
  41ef14:	4a2e      	ldr	r2, [pc, #184]	@ (41efd0 <_Z19tflite_learn_7_initPFPvjjE+0x224>)
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  41ef16:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 41efe4 <_Z19tflite_learn_7_initPFPvjjE+0x238>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  41ef1a:	4c2f      	ldr	r4, [pc, #188]	@ (41efd8 <_Z19tflite_learn_7_initPFPvjjE+0x22c>)
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
  41ef1c:	4d22      	ldr	r5, [pc, #136]	@ (41efa8 <_Z19tflite_learn_7_initPFPvjjE+0x1fc>)
    current_subgraph_index = g;
  41ef1e:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
  41ef20:	f107 0a1c 	add.w	sl, r7, #28
  41ef24:	e003      	b.n	41ef2e <_Z19tflite_learn_7_initPFPvjjE+0x182>
  41ef26:	4557      	cmp	r7, sl
  41ef28:	f108 081c 	add.w	r8, r8, #28
  41ef2c:	d02c      	beq.n	41ef88 <_Z19tflite_learn_7_initPFPvjjE+0x1dc>
      if (registrations[used_ops[i]].prepare) {
  41ef2e:	f817 3b01 	ldrb.w	r3, [r7], #1
  41ef32:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  41ef36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  41ef3a:	689a      	ldr	r2, [r3, #8]
  41ef3c:	2a00      	cmp	r2, #0
  41ef3e:	d0f2      	beq.n	41ef26 <_Z19tflite_learn_7_initPFPvjjE+0x17a>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  41ef40:	f647 73ff 	movw	r3, #32767	@ 0x7fff
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
  41ef44:	4641      	mov	r1, r8
  41ef46:	4628      	mov	r0, r5
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  41ef48:	f8a9 3020 	strh.w	r3, [r9, #32]
  41ef4c:	f8a9 3044 	strh.w	r3, [r9, #68]	@ 0x44
  41ef50:	f8a9 3068 	strh.w	r3, [r9, #104]	@ 0x68
  41ef54:	f8a9 308c 	strh.w	r3, [r9, #140]	@ 0x8c
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  41ef58:	81a3      	strh	r3, [r4, #12]
  41ef5a:	83a3      	strh	r3, [r4, #28]
  41ef5c:	85a3      	strh	r3, [r4, #44]	@ 0x2c
  41ef5e:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
  41ef60:	4790      	blx	r2
        if (status != kTfLiteOk) {
  41ef62:	2800      	cmp	r0, #0
  41ef64:	d0df      	beq.n	41ef26 <_Z19tflite_learn_7_initPFPvjjE+0x17a>
  41ef66:	4603      	mov	r3, r0
  41ef68:	e003      	b.n	41ef72 <_Z19tflite_learn_7_initPFPvjjE+0x1c6>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
  41ef6a:	481c      	ldr	r0, [pc, #112]	@ (41efdc <_Z19tflite_learn_7_initPFPvjjE+0x230>)
  41ef6c:	f7ff fb5a 	bl	41e624 <_Z9ei_printfPKcz>
    return kTfLiteError;
  41ef70:	2301      	movs	r3, #1
  41ef72:	9301      	str	r3, [sp, #4]
class EonMicroContext : public MicroContext {
  41ef74:	4b10      	ldr	r3, [pc, #64]	@ (41efb8 <_Z19tflite_learn_7_initPFPvjjE+0x20c>)
  41ef76:	4658      	mov	r0, fp
  41ef78:	930c      	str	r3, [sp, #48]	@ 0x30
  41ef7a:	f7ff fa5f 	bl	41e43c <_ZN6tflite12MicroContextD1Ev>
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}
  41ef7e:	9b01      	ldr	r3, [sp, #4]
  41ef80:	4618      	mov	r0, r3
  41ef82:	b013      	add	sp, #76	@ 0x4c
  41ef84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  current_subgraph_index = 0;
  41ef88:	2200      	movs	r2, #0
  41ef8a:	4911      	ldr	r1, [pc, #68]	@ (41efd0 <_Z19tflite_learn_7_initPFPvjjE+0x224>)
  return kTfLiteOk;
  41ef8c:	4613      	mov	r3, r2
  current_subgraph_index = 0;
  41ef8e:	600a      	str	r2, [r1, #0]
  return kTfLiteOk;
  41ef90:	e7ef      	b.n	41ef72 <_Z19tflite_learn_7_initPFPvjjE+0x1c6>
  41ef92:	bf00      	nop
  41ef94:	20014110 	.word	0x20014110
  41ef98:	00039fc0 	.word	0x00039fc0
  41ef9c:	2001410c 	.word	0x2001410c
  41efa0:	20014108 	.word	0x20014108
  41efa4:	2004e0d0 	.word	0x2004e0d0
  41efa8:	200140b0 	.word	0x200140b0
  41efac:	0041e7c1 	.word	0x0041e7c1
  41efb0:	0041eadd 	.word	0x0041eadd
  41efb4:	0041e699 	.word	0x0041e699
  41efb8:	00435c30 	.word	0x00435c30
  41efbc:	0041e855 	.word	0x0041e855
  41efc0:	0041e6d5 	.word	0x0041e6d5
  41efc4:	0041e5ad 	.word	0x0041e5ad
  41efc8:	00435c88 	.word	0x00435c88
  41efcc:	20013f2c 	.word	0x20013f2c
  41efd0:	20013f28 	.word	0x20013f28
  41efd4:	00435c67 	.word	0x00435c67
  41efd8:	20013fe0 	.word	0x20013fe0
  41efdc:	00434cdc 	.word	0x00434cdc
  41efe0:	2000a050 	.word	0x2000a050
  41efe4:	20014020 	.word	0x20014020

0041efe8 <_Z20tflite_learn_7_inputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  41efe8:	460b      	mov	r3, r1
  tensor->type = tensorData[i].type;
  41efea:	f240 2c09 	movw	ip, #521	@ 0x209
TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
  41efee:	b5f0      	push	{r4, r5, r6, r7, lr}
  tensor->is_variable = false;
  41eff0:	2200      	movs	r2, #0
  tensor->bytes = tensorData[i].bytes;
  41eff2:	f44f 5510 	mov.w	r5, #9216	@ 0x2400
    tensor->params.zero_point = quant->zero_point->data[0];
  41eff6:	f06f 047f 	mvn.w	r4, #127	@ 0x7f
    tensor->params.scale = quant->scale->data[0];
  41effa:	f8df e030 	ldr.w	lr, [pc, #48]	@ 41f02c <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x44>
  tensor->dims = tensorData[i].dims;
  41effe:	4f08      	ldr	r7, [pc, #32]	@ (41f020 <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x38>)
  tensor->data.data = tensorData[i].data;
  41f000:	4e08      	ldr	r6, [pc, #32]	@ (41f024 <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x3c>)
  tensor->quantization = tensorData[i].quantization;
  41f002:	4909      	ldr	r1, [pc, #36]	@ (41f028 <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x40>)
  tensor->type = tensorData[i].type;
  41f004:	f8a3 c01c 	strh.w	ip, [r3, #28]
  tensor->quantization = tensorData[i].quantization;
  41f008:	c903      	ldmia	r1, {r0, r1}
  tensor->data.data = tensorData[i].data;
  41f00a:	e9c3 6704 	strd	r6, r7, [r3, #16]
  tensor->quantization = tensorData[i].quantization;
  41f00e:	e883 0003 	stmia.w	r3, {r0, r1}
    tensor->params.scale = quant->scale->data[0];
  41f012:	f8c3 e008 	str.w	lr, [r3, #8]
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}
  41f016:	4610      	mov	r0, r2
  tensor->is_variable = false;
  41f018:	779a      	strb	r2, [r3, #30]
  tensor->bytes = tensorData[i].bytes;
  41f01a:	619d      	str	r5, [r3, #24]
    tensor->params.zero_point = quant->zero_point->data[0];
  41f01c:	60dc      	str	r4, [r3, #12]
}
  41f01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41f020:	0043c4fc 	.word	0x0043c4fc
  41f024:	20014110 	.word	0x20014110
  41f028:	00435c98 	.word	0x00435c98
  41f02c:	3b808081 	.word	0x3b808081

0041f030 <_Z21tflite_learn_7_outputiP12TfLiteTensor>:

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  41f030:	460b      	mov	r3, r1
  tensor->type = tensorData[i].type;
  41f032:	f240 2c09 	movw	ip, #521	@ 0x209
TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
  41f036:	b5f0      	push	{r4, r5, r6, r7, lr}
  tensor->is_variable = false;
  41f038:	2200      	movs	r2, #0
  tensor->bytes = tensorData[i].bytes;
  41f03a:	f44f 7590 	mov.w	r5, #288	@ 0x120
    tensor->params.scale = quant->scale->data[0];
  41f03e:	f04f 5e6e 	mov.w	lr, #998244352	@ 0x3b800000
    tensor->params.zero_point = quant->zero_point->data[0];
  41f042:	f06f 047f 	mvn.w	r4, #127	@ 0x7f
  tensor->dims = tensorData[i].dims;
  41f046:	4f08      	ldr	r7, [pc, #32]	@ (41f068 <_Z21tflite_learn_7_outputiP12TfLiteTensor+0x38>)
  tensor->data.data = tensorData[i].data;
  41f048:	4e08      	ldr	r6, [pc, #32]	@ (41f06c <_Z21tflite_learn_7_outputiP12TfLiteTensor+0x3c>)
  tensor->quantization = tensorData[i].quantization;
  41f04a:	4909      	ldr	r1, [pc, #36]	@ (41f070 <_Z21tflite_learn_7_outputiP12TfLiteTensor+0x40>)
  tensor->type = tensorData[i].type;
  41f04c:	f8a3 c01c 	strh.w	ip, [r3, #28]
  tensor->quantization = tensorData[i].quantization;
  41f050:	c903      	ldmia	r1, {r0, r1}
  tensor->data.data = tensorData[i].data;
  41f052:	e9c3 6704 	strd	r6, r7, [r3, #16]
  tensor->quantization = tensorData[i].quantization;
  41f056:	e883 0003 	stmia.w	r3, {r0, r1}
    tensor->params.scale = quant->scale->data[0];
  41f05a:	f8c3 e008 	str.w	lr, [r3, #8]
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}
  41f05e:	4610      	mov	r0, r2
  tensor->is_variable = false;
  41f060:	779a      	strb	r2, [r3, #30]
  tensor->bytes = tensorData[i].bytes;
  41f062:	619d      	str	r5, [r3, #24]
    tensor->params.zero_point = quant->zero_point->data[0];
  41f064:	60dc      	str	r4, [r3, #12]
}
  41f066:	bdf0      	pop	{r4, r5, r6, r7, pc}
  41f068:	00436808 	.word	0x00436808
  41f06c:	20014110 	.word	0x20014110
  41f070:	00436340 	.word	0x00436340

0041f074 <_Z21tflite_learn_7_invokev>:

TfLiteStatus tflite_learn_7_invoke() {
  41f074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f078:	f8df a060 	ldr.w	sl, [pc, #96]	@ 41f0dc <_Z21tflite_learn_7_invokev+0x68>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  41f07c:	f647 74ff 	movw	r4, #32767	@ 0x7fff
  41f080:	f8df b05c 	ldr.w	fp, [pc, #92]	@ 41f0e0 <_Z21tflite_learn_7_invokev+0x6c>
  41f084:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 41f0e4 <_Z21tflite_learn_7_invokev+0x70>
  41f088:	4d11      	ldr	r5, [pc, #68]	@ (41f0d0 <_Z21tflite_learn_7_invokev+0x5c>)
  41f08a:	4f12      	ldr	r7, [pc, #72]	@ (41f0d4 <_Z21tflite_learn_7_invokev+0x60>)
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
  41f08c:	4e12      	ldr	r6, [pc, #72]	@ (41f0d8 <_Z21tflite_learn_7_invokev+0x64>)
  41f08e:	f10a 081c 	add.w	r8, sl, #28
  41f092:	e001      	b.n	41f098 <_Z21tflite_learn_7_invokev+0x24>
  for (size_t i = 0; i < 28; ++i) {
  41f094:	45d0      	cmp	r8, sl
  41f096:	d019      	beq.n	41f0cc <_Z21tflite_learn_7_invokev+0x58>
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
  41f098:	f81a 3b01 	ldrb.w	r3, [sl], #1
  41f09c:	4659      	mov	r1, fp
  41f09e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  41f0a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  41f0a6:	4630      	mov	r0, r6
  41f0a8:	68db      	ldr	r3, [r3, #12]
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  41f0aa:	f8a9 4020 	strh.w	r4, [r9, #32]
  41f0ae:	f8a9 4044 	strh.w	r4, [r9, #68]	@ 0x44
  41f0b2:	f8a9 4068 	strh.w	r4, [r9, #104]	@ 0x68
  41f0b6:	f8a9 408c 	strh.w	r4, [r9, #140]	@ 0x8c
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  41f0ba:	81ac      	strh	r4, [r5, #12]
  41f0bc:	83ac      	strh	r4, [r5, #28]
  41f0be:	85ac      	strh	r4, [r5, #44]	@ 0x2c
  41f0c0:	87ac      	strh	r4, [r5, #60]	@ 0x3c
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
  41f0c2:	4798      	blx	r3
  for (size_t i = 0; i < 28; ++i) {
  41f0c4:	f10b 0b1c 	add.w	fp, fp, #28
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
  41f0c8:	2800      	cmp	r0, #0
  41f0ca:	d0e3      	beq.n	41f094 <_Z21tflite_learn_7_invokev+0x20>
      return status;
    }
  }
  return kTfLiteOk;
}
  41f0cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f0d0:	20013fe0 	.word	0x20013fe0
  41f0d4:	20013f2c 	.word	0x20013f2c
  41f0d8:	200140b0 	.word	0x200140b0
  41f0dc:	00435c68 	.word	0x00435c68
  41f0e0:	2000a050 	.word	0x2000a050
  41f0e4:	20014020 	.word	0x20014020

0041f0e8 <_Z20tflite_learn_7_resetPFvPvE>:

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
  41f0e8:	b570      	push	{r4, r5, r6, lr}
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;
  41f0ea:	2400      	movs	r4, #0

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
  41f0ec:	4e08      	ldr	r6, [pc, #32]	@ (41f110 <_Z20tflite_learn_7_resetPFvPvE+0x28>)
  scratch_buffers_ix = 0;
  41f0ee:	4a09      	ldr	r2, [pc, #36]	@ (41f114 <_Z20tflite_learn_7_resetPFvPvE+0x2c>)
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
  41f0f0:	6833      	ldr	r3, [r6, #0]
  scratch_buffers_ix = 0;
  41f0f2:	6014      	str	r4, [r2, #0]
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
  41f0f4:	b143      	cbz	r3, 41f108 <_Z20tflite_learn_7_resetPFvPvE+0x20>
  41f0f6:	4d08      	ldr	r5, [pc, #32]	@ (41f118 <_Z20tflite_learn_7_resetPFvPvE+0x30>)
    ei_free(overflow_buffers[ix]);
  41f0f8:	f855 0b04 	ldr.w	r0, [r5], #4
  41f0fc:	f7ff faca 	bl	41e694 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
  41f100:	6833      	ldr	r3, [r6, #0]
  41f102:	3401      	adds	r4, #1
  41f104:	42a3      	cmp	r3, r4
  41f106:	d8f7      	bhi.n	41f0f8 <_Z20tflite_learn_7_resetPFvPvE+0x10>
  }
  overflow_buffers_ix = 0;
  41f108:	2000      	movs	r0, #0
  41f10a:	6030      	str	r0, [r6, #0]
  return kTfLiteOk;
}
  41f10c:	bd70      	pop	{r4, r5, r6, pc}
  41f10e:	bf00      	nop
  41f110:	20013ef8 	.word	0x20013ef8
  41f114:	20013e84 	.word	0x20013e84
  41f118:	20013f00 	.word	0x20013f00
  41f11c:	00000000 	.word	0x00000000

0041f120 <frexp>:
  41f120:	b430      	push	{r4, r5}
  41f122:	b082      	sub	sp, #8
  41f124:	4c1a      	ldr	r4, [pc, #104]	@ (41f190 <frexp+0x70>)
  41f126:	2100      	movs	r1, #0
  41f128:	ed8d 0b00 	vstr	d0, [sp]
  41f12c:	9a01      	ldr	r2, [sp, #4]
  41f12e:	6001      	str	r1, [r0, #0]
  41f130:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
  41f134:	42a3      	cmp	r3, r4
  41f136:	d81f      	bhi.n	41f178 <frexp+0x58>
  41f138:	9c00      	ldr	r4, [sp, #0]
  41f13a:	431c      	orrs	r4, r3
  41f13c:	d01c      	beq.n	41f178 <frexp+0x58>
  41f13e:	4c15      	ldr	r4, [pc, #84]	@ (41f194 <frexp+0x74>)
  41f140:	4014      	ands	r4, r2
  41f142:	b954      	cbnz	r4, 41f15a <frexp+0x3a>
  41f144:	f06f 0135 	mvn.w	r1, #53	@ 0x35
  41f148:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 41f188 <frexp+0x68>
  41f14c:	ee20 7b07 	vmul.f64	d7, d0, d7
  41f150:	ed8d 7b00 	vstr	d7, [sp]
  41f154:	9a01      	ldr	r2, [sp, #4]
  41f156:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
  41f15a:	f36f 521e 	bfc	r2, #20, #11
  41f15e:	151b      	asrs	r3, r3, #20
  41f160:	e9dd 4500 	ldrd	r4, r5, [sp]
  41f164:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
  41f168:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
  41f16c:	440b      	add	r3, r1
  41f16e:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
  41f172:	6003      	str	r3, [r0, #0]
  41f174:	e9cd 4500 	strd	r4, r5, [sp]
  41f178:	ed9d 0b00 	vldr	d0, [sp]
  41f17c:	b002      	add	sp, #8
  41f17e:	bc30      	pop	{r4, r5}
  41f180:	4770      	bx	lr
  41f182:	bf00      	nop
  41f184:	f3af 8000 	nop.w
  41f188:	00000000 	.word	0x00000000
  41f18c:	43500000 	.word	0x43500000
  41f190:	7fefffff 	.word	0x7fefffff
  41f194:	7ff00000 	.word	0x7ff00000

0041f198 <abort>:
  41f198:	2006      	movs	r0, #6
  41f19a:	b508      	push	{r3, lr}
  41f19c:	f001 fe46 	bl	420e2c <raise>
  41f1a0:	2001      	movs	r0, #1
  41f1a2:	f006 fc3d 	bl	425a20 <_exit>
  41f1a6:	bf00      	nop

0041f1a8 <__assert_func>:
  41f1a8:	4d0a      	ldr	r5, [pc, #40]	@ (41f1d4 <__assert_func+0x2c>)
  41f1aa:	4614      	mov	r4, r2
  41f1ac:	461a      	mov	r2, r3
  41f1ae:	4603      	mov	r3, r0
  41f1b0:	682e      	ldr	r6, [r5, #0]
  41f1b2:	460d      	mov	r5, r1
  41f1b4:	b500      	push	{lr}
  41f1b6:	68f0      	ldr	r0, [r6, #12]
  41f1b8:	b085      	sub	sp, #20
  41f1ba:	b144      	cbz	r4, 41f1ce <__assert_func+0x26>
  41f1bc:	4906      	ldr	r1, [pc, #24]	@ (41f1d8 <__assert_func+0x30>)
  41f1be:	9500      	str	r5, [sp, #0]
  41f1c0:	e9cd 1401 	strd	r1, r4, [sp, #4]
  41f1c4:	4905      	ldr	r1, [pc, #20]	@ (41f1dc <__assert_func+0x34>)
  41f1c6:	f000 f813 	bl	41f1f0 <fiprintf>
  41f1ca:	f7ff ffe5 	bl	41f198 <abort>
  41f1ce:	4904      	ldr	r1, [pc, #16]	@ (41f1e0 <__assert_func+0x38>)
  41f1d0:	460c      	mov	r4, r1
  41f1d2:	e7f4      	b.n	41f1be <__assert_func+0x16>
  41f1d4:	2000a4d8 	.word	0x2000a4d8
  41f1d8:	00434d30 	.word	0x00434d30
  41f1dc:	00434d40 	.word	0x00434d40
  41f1e0:	0043493c 	.word	0x0043493c

0041f1e4 <atexit>:
  41f1e4:	2300      	movs	r3, #0
  41f1e6:	4601      	mov	r1, r0
  41f1e8:	461a      	mov	r2, r3
  41f1ea:	4618      	mov	r0, r3
  41f1ec:	f001 bf4e 	b.w	42108c <__register_exitproc>

0041f1f0 <fiprintf>:
  41f1f0:	b40e      	push	{r1, r2, r3}
  41f1f2:	b510      	push	{r4, lr}
  41f1f4:	b083      	sub	sp, #12
  41f1f6:	4c07      	ldr	r4, [pc, #28]	@ (41f214 <fiprintf+0x24>)
  41f1f8:	4601      	mov	r1, r0
  41f1fa:	ab05      	add	r3, sp, #20
  41f1fc:	6820      	ldr	r0, [r4, #0]
  41f1fe:	f853 2b04 	ldr.w	r2, [r3], #4
  41f202:	9301      	str	r3, [sp, #4]
  41f204:	f000 f844 	bl	41f290 <_vfiprintf_r>
  41f208:	b003      	add	sp, #12
  41f20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  41f20e:	b003      	add	sp, #12
  41f210:	4770      	bx	lr
  41f212:	bf00      	nop
  41f214:	2000a4d8 	.word	0x2000a4d8

0041f218 <__sprint_r.part.0>:
  41f218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f21c:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
  41f21e:	4690      	mov	r8, r2
  41f220:	049c      	lsls	r4, r3, #18
  41f222:	d52d      	bpl.n	41f280 <__sprint_r.part.0+0x68>
  41f224:	6893      	ldr	r3, [r2, #8]
  41f226:	6812      	ldr	r2, [r2, #0]
  41f228:	b343      	cbz	r3, 41f27c <__sprint_r.part.0+0x64>
  41f22a:	460d      	mov	r5, r1
  41f22c:	4606      	mov	r6, r0
  41f22e:	f102 0908 	add.w	r9, r2, #8
  41f232:	e959 2a02 	ldrd	r2, sl, [r9, #-8]
  41f236:	ea5f 079a 	movs.w	r7, sl, lsr #2
  41f23a:	d015      	beq.n	41f268 <__sprint_r.part.0+0x50>
  41f23c:	f1a2 0b04 	sub.w	fp, r2, #4
  41f240:	2400      	movs	r4, #0
  41f242:	e001      	b.n	41f248 <__sprint_r.part.0+0x30>
  41f244:	42a7      	cmp	r7, r4
  41f246:	d00d      	beq.n	41f264 <__sprint_r.part.0+0x4c>
  41f248:	462a      	mov	r2, r5
  41f24a:	f85b 1f04 	ldr.w	r1, [fp, #4]!
  41f24e:	4630      	mov	r0, r6
  41f250:	3401      	adds	r4, #1
  41f252:	f001 fc77 	bl	420b44 <_fputwc_r>
  41f256:	1c43      	adds	r3, r0, #1
  41f258:	d1f4      	bne.n	41f244 <__sprint_r.part.0+0x2c>
  41f25a:	2300      	movs	r3, #0
  41f25c:	e9c8 3301 	strd	r3, r3, [r8, #4]
  41f260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f264:	f8d8 3008 	ldr.w	r3, [r8, #8]
  41f268:	f02a 0a03 	bic.w	sl, sl, #3
  41f26c:	f109 0908 	add.w	r9, r9, #8
  41f270:	eba3 030a 	sub.w	r3, r3, sl
  41f274:	f8c8 3008 	str.w	r3, [r8, #8]
  41f278:	2b00      	cmp	r3, #0
  41f27a:	d1da      	bne.n	41f232 <__sprint_r.part.0+0x1a>
  41f27c:	2000      	movs	r0, #0
  41f27e:	e7ec      	b.n	41f25a <__sprint_r.part.0+0x42>
  41f280:	f001 f9f2 	bl	420668 <__sfvwrite_r>
  41f284:	2300      	movs	r3, #0
  41f286:	e9c8 3301 	strd	r3, r3, [r8, #4]
  41f28a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f28e:	bf00      	nop

0041f290 <_vfiprintf_r>:
  41f290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f294:	b0c7      	sub	sp, #284	@ 0x11c
  41f296:	4682      	mov	sl, r0
  41f298:	461c      	mov	r4, r3
  41f29a:	af16      	add	r7, sp, #88	@ 0x58
  41f29c:	930a      	str	r3, [sp, #40]	@ 0x28
  41f29e:	e9cd 1205 	strd	r1, r2, [sp, #20]
  41f2a2:	4638      	mov	r0, r7
  41f2a4:	2208      	movs	r2, #8
  41f2a6:	2100      	movs	r1, #0
  41f2a8:	f001 fcfc 	bl	420ca4 <memset>
  41f2ac:	f1ba 0f00 	cmp.w	sl, #0
  41f2b0:	d004      	beq.n	41f2bc <_vfiprintf_r+0x2c>
  41f2b2:	f8da 3034 	ldr.w	r3, [sl, #52]	@ 0x34
  41f2b6:	2b00      	cmp	r3, #0
  41f2b8:	f000 86b6 	beq.w	420028 <_vfiprintf_r+0xd98>
  41f2bc:	9a05      	ldr	r2, [sp, #20]
  41f2be:	6e53      	ldr	r3, [r2, #100]	@ 0x64
  41f2c0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
  41f2c4:	07de      	lsls	r6, r3, #31
  41f2c6:	d402      	bmi.n	41f2ce <_vfiprintf_r+0x3e>
  41f2c8:	0595      	lsls	r5, r2, #22
  41f2ca:	f140 8595 	bpl.w	41fdf8 <_vfiprintf_r+0xb68>
  41f2ce:	0490      	lsls	r0, r2, #18
  41f2d0:	d407      	bmi.n	41f2e2 <_vfiprintf_r+0x52>
  41f2d2:	9905      	ldr	r1, [sp, #20]
  41f2d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
  41f2d8:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
  41f2da:	818a      	strh	r2, [r1, #12]
  41f2dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  41f2e0:	664b      	str	r3, [r1, #100]	@ 0x64
  41f2e2:	0711      	lsls	r1, r2, #28
  41f2e4:	f140 80c9 	bpl.w	41f47a <_vfiprintf_r+0x1ea>
  41f2e8:	9b05      	ldr	r3, [sp, #20]
  41f2ea:	691b      	ldr	r3, [r3, #16]
  41f2ec:	2b00      	cmp	r3, #0
  41f2ee:	f000 80c4 	beq.w	41f47a <_vfiprintf_r+0x1ea>
  41f2f2:	f002 031a 	and.w	r3, r2, #26
  41f2f6:	2b0a      	cmp	r3, #10
  41f2f8:	f000 80ce 	beq.w	41f498 <_vfiprintf_r+0x208>
  41f2fc:	aa1d      	add	r2, sp, #116	@ 0x74
  41f2fe:	2300      	movs	r3, #0
  41f300:	f8df b8d4 	ldr.w	fp, [pc, #2260]	@ 41fbd8 <_vfiprintf_r+0x948>
  41f304:	4691      	mov	r9, r2
  41f306:	930d      	str	r3, [sp, #52]	@ 0x34
  41f308:	921a      	str	r2, [sp, #104]	@ 0x68
  41f30a:	9310      	str	r3, [sp, #64]	@ 0x40
  41f30c:	9308      	str	r3, [sp, #32]
  41f30e:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  41f312:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  41f316:	9d06      	ldr	r5, [sp, #24]
  41f318:	f8db 40e4 	ldr.w	r4, [fp, #228]	@ 0xe4
  41f31c:	f001 fdb2 	bl	420e84 <__locale_mb_cur_max>
  41f320:	462a      	mov	r2, r5
  41f322:	4603      	mov	r3, r0
  41f324:	a914      	add	r1, sp, #80	@ 0x50
  41f326:	4650      	mov	r0, sl
  41f328:	9700      	str	r7, [sp, #0]
  41f32a:	47a0      	blx	r4
  41f32c:	2800      	cmp	r0, #0
  41f32e:	4603      	mov	r3, r0
  41f330:	f000 80d1 	beq.w	41f4d6 <_vfiprintf_r+0x246>
  41f334:	f2c0 80c7 	blt.w	41f4c6 <_vfiprintf_r+0x236>
  41f338:	9a14      	ldr	r2, [sp, #80]	@ 0x50
  41f33a:	2a25      	cmp	r2, #37	@ 0x25
  41f33c:	d001      	beq.n	41f342 <_vfiprintf_r+0xb2>
  41f33e:	441d      	add	r5, r3
  41f340:	e7ea      	b.n	41f318 <_vfiprintf_r+0x88>
  41f342:	9b06      	ldr	r3, [sp, #24]
  41f344:	4604      	mov	r4, r0
  41f346:	1aee      	subs	r6, r5, r3
  41f348:	f040 80c9 	bne.w	41f4de <_vfiprintf_r+0x24e>
  41f34c:	2300      	movs	r3, #0
  41f34e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  41f352:	1c6c      	adds	r4, r5, #1
  41f354:	7869      	ldrb	r1, [r5, #1]
  41f356:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
  41f35a:	9309      	str	r3, [sp, #36]	@ 0x24
  41f35c:	9204      	str	r2, [sp, #16]
  41f35e:	9302      	str	r3, [sp, #8]
  41f360:	3401      	adds	r4, #1
  41f362:	f1a1 0320 	sub.w	r3, r1, #32
  41f366:	2b5a      	cmp	r3, #90	@ 0x5a
  41f368:	f200 80ff 	bhi.w	41f56a <_vfiprintf_r+0x2da>
  41f36c:	e8df f013 	tbh	[pc, r3, lsl #1]
  41f370:	00fd02f6 	.word	0x00fd02f6
  41f374:	02f000fd 	.word	0x02f000fd
  41f378:	00fd00fd 	.word	0x00fd00fd
  41f37c:	006a00fd 	.word	0x006a00fd
  41f380:	00fd00fd 	.word	0x00fd00fd
  41f384:	02c40214 	.word	0x02c40214
  41f388:	021f00fd 	.word	0x021f00fd
  41f38c:	00fd0306 	.word	0x00fd0306
  41f390:	005b0300 	.word	0x005b0300
  41f394:	005b005b 	.word	0x005b005b
  41f398:	005b005b 	.word	0x005b005b
  41f39c:	005b005b 	.word	0x005b005b
  41f3a0:	005b005b 	.word	0x005b005b
  41f3a4:	00fd00fd 	.word	0x00fd00fd
  41f3a8:	00fd00fd 	.word	0x00fd00fd
  41f3ac:	00fd00fd 	.word	0x00fd00fd
  41f3b0:	00fd00fd 	.word	0x00fd00fd
  41f3b4:	01c400fd 	.word	0x01c400fd
  41f3b8:	00fd026a 	.word	0x00fd026a
  41f3bc:	00fd00fd 	.word	0x00fd00fd
  41f3c0:	00fd00fd 	.word	0x00fd00fd
  41f3c4:	00fd00fd 	.word	0x00fd00fd
  41f3c8:	00fd00fd 	.word	0x00fd00fd
  41f3cc:	022500fd 	.word	0x022500fd
  41f3d0:	00fd00fd 	.word	0x00fd00fd
  41f3d4:	019d00fd 	.word	0x019d00fd
  41f3d8:	028400fd 	.word	0x028400fd
  41f3dc:	00fd00fd 	.word	0x00fd00fd
  41f3e0:	00fd058a 	.word	0x00fd058a
  41f3e4:	00fd00fd 	.word	0x00fd00fd
  41f3e8:	00fd00fd 	.word	0x00fd00fd
  41f3ec:	00fd00fd 	.word	0x00fd00fd
  41f3f0:	00fd00fd 	.word	0x00fd00fd
  41f3f4:	01c400fd 	.word	0x01c400fd
  41f3f8:	00fd01e9 	.word	0x00fd01e9
  41f3fc:	00fd00fd 	.word	0x00fd00fd
  41f400:	01e902bb 	.word	0x01e902bb
  41f404:	00fd007f 	.word	0x00fd007f
  41f408:	00fd0321 	.word	0x00fd0321
  41f40c:	058802e1 	.word	0x058802e1
  41f410:	007f02c9 	.word	0x007f02c9
  41f414:	019d00fd 	.word	0x019d00fd
  41f418:	0585007d 	.word	0x0585007d
  41f41c:	00fd00fd 	.word	0x00fd00fd
  41f420:	00fd05ac 	.word	0x00fd05ac
  41f424:	007d      	.short	0x007d
  41f426:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
  41f42a:	2200      	movs	r2, #0
  41f42c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  41f430:	f814 1b01 	ldrb.w	r1, [r4], #1
  41f434:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  41f438:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
  41f43c:	2b09      	cmp	r3, #9
  41f43e:	d9f5      	bls.n	41f42c <_vfiprintf_r+0x19c>
  41f440:	9209      	str	r2, [sp, #36]	@ 0x24
  41f442:	e78e      	b.n	41f362 <_vfiprintf_r+0xd2>
  41f444:	4650      	mov	r0, sl
  41f446:	f001 fd23 	bl	420e90 <_localeconv_r>
  41f44a:	6843      	ldr	r3, [r0, #4]
  41f44c:	4618      	mov	r0, r3
  41f44e:	9310      	str	r3, [sp, #64]	@ 0x40
  41f450:	f001 fdbc 	bl	420fcc <strlen>
  41f454:	900f      	str	r0, [sp, #60]	@ 0x3c
  41f456:	4605      	mov	r5, r0
  41f458:	4650      	mov	r0, sl
  41f45a:	f001 fd19 	bl	420e90 <_localeconv_r>
  41f45e:	6883      	ldr	r3, [r0, #8]
  41f460:	930e      	str	r3, [sp, #56]	@ 0x38
  41f462:	b115      	cbz	r5, 41f46a <_vfiprintf_r+0x1da>
  41f464:	2b00      	cmp	r3, #0
  41f466:	f040 84f6 	bne.w	41fe56 <_vfiprintf_r+0xbc6>
  41f46a:	7821      	ldrb	r1, [r4, #0]
  41f46c:	e778      	b.n	41f360 <_vfiprintf_r+0xd0>
  41f46e:	9b02      	ldr	r3, [sp, #8]
  41f470:	7821      	ldrb	r1, [r4, #0]
  41f472:	f043 0320 	orr.w	r3, r3, #32
  41f476:	9302      	str	r3, [sp, #8]
  41f478:	e772      	b.n	41f360 <_vfiprintf_r+0xd0>
  41f47a:	9d05      	ldr	r5, [sp, #20]
  41f47c:	4650      	mov	r0, sl
  41f47e:	4629      	mov	r1, r5
  41f480:	f001 fa94 	bl	4209ac <__swsetup_r>
  41f484:	2800      	cmp	r0, #0
  41f486:	f040 86b3 	bne.w	4201f0 <_vfiprintf_r+0xf60>
  41f48a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  41f48e:	f002 031a 	and.w	r3, r2, #26
  41f492:	2b0a      	cmp	r3, #10
  41f494:	f47f af32 	bne.w	41f2fc <_vfiprintf_r+0x6c>
  41f498:	9905      	ldr	r1, [sp, #20]
  41f49a:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
  41f49e:	2b00      	cmp	r3, #0
  41f4a0:	f6ff af2c 	blt.w	41f2fc <_vfiprintf_r+0x6c>
  41f4a4:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
  41f4a6:	07de      	lsls	r6, r3, #31
  41f4a8:	d402      	bmi.n	41f4b0 <_vfiprintf_r+0x220>
  41f4aa:	0595      	lsls	r5, r2, #22
  41f4ac:	f140 865e 	bpl.w	42016c <_vfiprintf_r+0xedc>
  41f4b0:	4623      	mov	r3, r4
  41f4b2:	4650      	mov	r0, sl
  41f4b4:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  41f4b8:	f000 feca 	bl	420250 <__sbprintf>
  41f4bc:	9008      	str	r0, [sp, #32]
  41f4be:	9808      	ldr	r0, [sp, #32]
  41f4c0:	b047      	add	sp, #284	@ 0x11c
  41f4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f4c6:	2208      	movs	r2, #8
  41f4c8:	2100      	movs	r1, #0
  41f4ca:	4638      	mov	r0, r7
  41f4cc:	f001 fbea 	bl	420ca4 <memset>
  41f4d0:	2301      	movs	r3, #1
  41f4d2:	441d      	add	r5, r3
  41f4d4:	e720      	b.n	41f318 <_vfiprintf_r+0x88>
  41f4d6:	9b06      	ldr	r3, [sp, #24]
  41f4d8:	4604      	mov	r4, r0
  41f4da:	1aee      	subs	r6, r5, r3
  41f4dc:	d012      	beq.n	41f504 <_vfiprintf_r+0x274>
  41f4de:	9b06      	ldr	r3, [sp, #24]
  41f4e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
  41f4e2:	e9c9 3600 	strd	r3, r6, [r9]
  41f4e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
  41f4e8:	4432      	add	r2, r6
  41f4ea:	3301      	adds	r3, #1
  41f4ec:	921c      	str	r2, [sp, #112]	@ 0x70
  41f4ee:	2b07      	cmp	r3, #7
  41f4f0:	931b      	str	r3, [sp, #108]	@ 0x6c
  41f4f2:	dc11      	bgt.n	41f518 <_vfiprintf_r+0x288>
  41f4f4:	f109 0908 	add.w	r9, r9, #8
  41f4f8:	9b08      	ldr	r3, [sp, #32]
  41f4fa:	4433      	add	r3, r6
  41f4fc:	9308      	str	r3, [sp, #32]
  41f4fe:	2c00      	cmp	r4, #0
  41f500:	f47f af24 	bne.w	41f34c <_vfiprintf_r+0xbc>
  41f504:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  41f506:	2b00      	cmp	r3, #0
  41f508:	f040 8660 	bne.w	4201cc <_vfiprintf_r+0xf3c>
  41f50c:	2200      	movs	r2, #0
  41f50e:	9b05      	ldr	r3, [sp, #20]
  41f510:	921b      	str	r2, [sp, #108]	@ 0x6c
  41f512:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  41f516:	e01c      	b.n	41f552 <_vfiprintf_r+0x2c2>
  41f518:	2a00      	cmp	r2, #0
  41f51a:	f000 8428 	beq.w	41fd6e <_vfiprintf_r+0xade>
  41f51e:	aa1a      	add	r2, sp, #104	@ 0x68
  41f520:	9905      	ldr	r1, [sp, #20]
  41f522:	4650      	mov	r0, sl
  41f524:	f7ff fe78 	bl	41f218 <__sprint_r.part.0>
  41f528:	b980      	cbnz	r0, 41f54c <_vfiprintf_r+0x2bc>
  41f52a:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41f52e:	e7e3      	b.n	41f4f8 <_vfiprintf_r+0x268>
  41f530:	aa1a      	add	r2, sp, #104	@ 0x68
  41f532:	9905      	ldr	r1, [sp, #20]
  41f534:	4650      	mov	r0, sl
  41f536:	f7ff fe6f 	bl	41f218 <__sprint_r.part.0>
  41f53a:	2800      	cmp	r0, #0
  41f53c:	f000 80a0 	beq.w	41f680 <_vfiprintf_r+0x3f0>
  41f540:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41f542:	b11b      	cbz	r3, 41f54c <_vfiprintf_r+0x2bc>
  41f544:	990b      	ldr	r1, [sp, #44]	@ 0x2c
  41f546:	4650      	mov	r0, sl
  41f548:	f001 fe48 	bl	4211dc <_free_r>
  41f54c:	9b05      	ldr	r3, [sp, #20]
  41f54e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  41f552:	9a05      	ldr	r2, [sp, #20]
  41f554:	6e52      	ldr	r2, [r2, #100]	@ 0x64
  41f556:	07d1      	lsls	r1, r2, #31
  41f558:	f140 809d 	bpl.w	41f696 <_vfiprintf_r+0x406>
  41f55c:	065b      	lsls	r3, r3, #25
  41f55e:	f100 8653 	bmi.w	420208 <_vfiprintf_r+0xf78>
  41f562:	9808      	ldr	r0, [sp, #32]
  41f564:	b047      	add	sp, #284	@ 0x11c
  41f566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f56a:	9406      	str	r4, [sp, #24]
  41f56c:	2900      	cmp	r1, #0
  41f56e:	d0c9      	beq.n	41f504 <_vfiprintf_r+0x274>
  41f570:	2300      	movs	r3, #0
  41f572:	ac2d      	add	r4, sp, #180	@ 0xb4
  41f574:	f88d 10b4 	strb.w	r1, [sp, #180]	@ 0xb4
  41f578:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
  41f57c:	2301      	movs	r3, #1
  41f57e:	9303      	str	r3, [sp, #12]
  41f580:	9307      	str	r3, [sp, #28]
  41f582:	2600      	movs	r6, #0
  41f584:	960b      	str	r6, [sp, #44]	@ 0x2c
  41f586:	9604      	str	r6, [sp, #16]
  41f588:	9b02      	ldr	r3, [sp, #8]
  41f58a:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
  41f58e:	f013 0384 	ands.w	r3, r3, #132	@ 0x84
  41f592:	f102 0001 	add.w	r0, r2, #1
  41f596:	930c      	str	r3, [sp, #48]	@ 0x30
  41f598:	4601      	mov	r1, r0
  41f59a:	d105      	bne.n	41f5a8 <_vfiprintf_r+0x318>
  41f59c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  41f59e:	9d03      	ldr	r5, [sp, #12]
  41f5a0:	1b5d      	subs	r5, r3, r5
  41f5a2:	2d00      	cmp	r5, #0
  41f5a4:	f300 8305 	bgt.w	41fbb2 <_vfiprintf_r+0x922>
  41f5a8:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
  41f5ac:	b18b      	cbz	r3, 41f5d2 <_vfiprintf_r+0x342>
  41f5ae:	2301      	movs	r3, #1
  41f5b0:	f10c 0c01 	add.w	ip, ip, #1
  41f5b4:	2907      	cmp	r1, #7
  41f5b6:	f8c9 3004 	str.w	r3, [r9, #4]
  41f5ba:	f10d 034b 	add.w	r3, sp, #75	@ 0x4b
  41f5be:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
  41f5c2:	f8c9 3000 	str.w	r3, [r9]
  41f5c6:	f300 82d3 	bgt.w	41fb70 <_vfiprintf_r+0x8e0>
  41f5ca:	460a      	mov	r2, r1
  41f5cc:	f109 0908 	add.w	r9, r9, #8
  41f5d0:	3101      	adds	r1, #1
  41f5d2:	b1ee      	cbz	r6, 41f610 <_vfiprintf_r+0x380>
  41f5d4:	ab13      	add	r3, sp, #76	@ 0x4c
  41f5d6:	f10c 0c02 	add.w	ip, ip, #2
  41f5da:	2907      	cmp	r1, #7
  41f5dc:	f8c9 3000 	str.w	r3, [r9]
  41f5e0:	f04f 0302 	mov.w	r3, #2
  41f5e4:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
  41f5e8:	f8c9 3004 	str.w	r3, [r9, #4]
  41f5ec:	f340 82dc 	ble.w	41fba8 <_vfiprintf_r+0x918>
  41f5f0:	f1bc 0f00 	cmp.w	ip, #0
  41f5f4:	f000 83e4 	beq.w	41fdc0 <_vfiprintf_r+0xb30>
  41f5f8:	aa1a      	add	r2, sp, #104	@ 0x68
  41f5fa:	9905      	ldr	r1, [sp, #20]
  41f5fc:	4650      	mov	r0, sl
  41f5fe:	f7ff fe0b 	bl	41f218 <__sprint_r.part.0>
  41f602:	2800      	cmp	r0, #0
  41f604:	d19c      	bne.n	41f540 <_vfiprintf_r+0x2b0>
  41f606:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41f60a:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
  41f60e:	1c51      	adds	r1, r2, #1
  41f610:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  41f612:	2b80      	cmp	r3, #128	@ 0x80
  41f614:	f000 820b 	beq.w	41fa2e <_vfiprintf_r+0x79e>
  41f618:	9b04      	ldr	r3, [sp, #16]
  41f61a:	9807      	ldr	r0, [sp, #28]
  41f61c:	1a1d      	subs	r5, r3, r0
  41f61e:	2d00      	cmp	r5, #0
  41f620:	f300 8266 	bgt.w	41faf0 <_vfiprintf_r+0x860>
  41f624:	9a07      	ldr	r2, [sp, #28]
  41f626:	2907      	cmp	r1, #7
  41f628:	f8c9 4000 	str.w	r4, [r9]
  41f62c:	eb02 030c 	add.w	r3, r2, ip
  41f630:	f8c9 2004 	str.w	r2, [r9, #4]
  41f634:	e9cd 131b 	strd	r1, r3, [sp, #108]	@ 0x6c
  41f638:	f340 81f6 	ble.w	41fa28 <_vfiprintf_r+0x798>
  41f63c:	2b00      	cmp	r3, #0
  41f63e:	f000 830e 	beq.w	41fc5e <_vfiprintf_r+0x9ce>
  41f642:	aa1a      	add	r2, sp, #104	@ 0x68
  41f644:	9905      	ldr	r1, [sp, #20]
  41f646:	4650      	mov	r0, sl
  41f648:	f7ff fde6 	bl	41f218 <__sprint_r.part.0>
  41f64c:	2800      	cmp	r0, #0
  41f64e:	f47f af77 	bne.w	41f540 <_vfiprintf_r+0x2b0>
  41f652:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  41f654:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41f658:	9a02      	ldr	r2, [sp, #8]
  41f65a:	0750      	lsls	r0, r2, #29
  41f65c:	d505      	bpl.n	41f66a <_vfiprintf_r+0x3da>
  41f65e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  41f660:	9903      	ldr	r1, [sp, #12]
  41f662:	1a54      	subs	r4, r2, r1
  41f664:	2c00      	cmp	r4, #0
  41f666:	f300 8305 	bgt.w	41fc74 <_vfiprintf_r+0x9e4>
  41f66a:	9803      	ldr	r0, [sp, #12]
  41f66c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
  41f670:	4281      	cmp	r1, r0
  41f672:	bfac      	ite	ge
  41f674:	1852      	addge	r2, r2, r1
  41f676:	1812      	addlt	r2, r2, r0
  41f678:	9208      	str	r2, [sp, #32]
  41f67a:	2b00      	cmp	r3, #0
  41f67c:	f47f af58 	bne.w	41f530 <_vfiprintf_r+0x2a0>
  41f680:	2300      	movs	r3, #0
  41f682:	931b      	str	r3, [sp, #108]	@ 0x6c
  41f684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  41f686:	b11b      	cbz	r3, 41f690 <_vfiprintf_r+0x400>
  41f688:	4619      	mov	r1, r3
  41f68a:	4650      	mov	r0, sl
  41f68c:	f001 fda6 	bl	4211dc <_free_r>
  41f690:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41f694:	e63f      	b.n	41f316 <_vfiprintf_r+0x86>
  41f696:	059a      	lsls	r2, r3, #22
  41f698:	f53f af60 	bmi.w	41f55c <_vfiprintf_r+0x2cc>
  41f69c:	9c05      	ldr	r4, [sp, #20]
  41f69e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  41f6a0:	f001 fc46 	bl	420f30 <__retarget_lock_release_recursive>
  41f6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41f6a8:	e758      	b.n	41f55c <_vfiprintf_r+0x2cc>
  41f6aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  41f6ac:	2300      	movs	r3, #0
  41f6ae:	9406      	str	r4, [sp, #24]
  41f6b0:	f856 4b04 	ldr.w	r4, [r6], #4
  41f6b4:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
  41f6b8:	2c00      	cmp	r4, #0
  41f6ba:	f000 84cd 	beq.w	420058 <_vfiprintf_r+0xdc8>
  41f6be:	2953      	cmp	r1, #83	@ 0x53
  41f6c0:	f000 841e 	beq.w	41ff00 <_vfiprintf_r+0xc70>
  41f6c4:	9b02      	ldr	r3, [sp, #8]
  41f6c6:	f013 0510 	ands.w	r5, r3, #16
  41f6ca:	f040 8419 	bne.w	41ff00 <_vfiprintf_r+0xc70>
  41f6ce:	9b04      	ldr	r3, [sp, #16]
  41f6d0:	2b00      	cmp	r3, #0
  41f6d2:	f2c0 8565 	blt.w	4201a0 <_vfiprintf_r+0xf10>
  41f6d6:	461a      	mov	r2, r3
  41f6d8:	4629      	mov	r1, r5
  41f6da:	4620      	mov	r0, r4
  41f6dc:	f001 fc2a 	bl	420f34 <memchr>
  41f6e0:	900b      	str	r0, [sp, #44]	@ 0x2c
  41f6e2:	2800      	cmp	r0, #0
  41f6e4:	f000 8547 	beq.w	420176 <_vfiprintf_r+0xee6>
  41f6e8:	1b03      	subs	r3, r0, r4
  41f6ea:	950b      	str	r5, [sp, #44]	@ 0x2c
  41f6ec:	9307      	str	r3, [sp, #28]
  41f6ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  41f6f2:	9303      	str	r3, [sp, #12]
  41f6f4:	f000 bd03 	b.w	4200fe <_vfiprintf_r+0xe6e>
  41f6f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41f6fa:	2943      	cmp	r1, #67	@ 0x43
  41f6fc:	9406      	str	r4, [sp, #24]
  41f6fe:	f103 0504 	add.w	r5, r3, #4
  41f702:	d003      	beq.n	41f70c <_vfiprintf_r+0x47c>
  41f704:	9b02      	ldr	r3, [sp, #8]
  41f706:	06d8      	lsls	r0, r3, #27
  41f708:	f140 83e2 	bpl.w	41fed0 <_vfiprintf_r+0xc40>
  41f70c:	2208      	movs	r2, #8
  41f70e:	2100      	movs	r1, #0
  41f710:	a818      	add	r0, sp, #96	@ 0x60
  41f712:	ac2d      	add	r4, sp, #180	@ 0xb4
  41f714:	f001 fac6 	bl	420ca4 <memset>
  41f718:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  41f71a:	ab18      	add	r3, sp, #96	@ 0x60
  41f71c:	4650      	mov	r0, sl
  41f71e:	6812      	ldr	r2, [r2, #0]
  41f720:	4621      	mov	r1, r4
  41f722:	f001 fc81 	bl	421028 <_wcrtomb_r>
  41f726:	4603      	mov	r3, r0
  41f728:	9007      	str	r0, [sp, #28]
  41f72a:	3301      	adds	r3, #1
  41f72c:	f000 8558 	beq.w	4201e0 <_vfiprintf_r+0xf50>
  41f730:	9b07      	ldr	r3, [sp, #28]
  41f732:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  41f736:	9303      	str	r3, [sp, #12]
  41f738:	2300      	movs	r3, #0
  41f73a:	950a      	str	r5, [sp, #40]	@ 0x28
  41f73c:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
  41f740:	e71f      	b.n	41f582 <_vfiprintf_r+0x2f2>
  41f742:	9b02      	ldr	r3, [sp, #8]
  41f744:	9406      	str	r4, [sp, #24]
  41f746:	0699      	lsls	r1, r3, #26
  41f748:	f140 8085 	bpl.w	41f856 <_vfiprintf_r+0x5c6>
  41f74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41f74e:	3307      	adds	r3, #7
  41f750:	f023 0307 	bic.w	r3, r3, #7
  41f754:	461a      	mov	r2, r3
  41f756:	6859      	ldr	r1, [r3, #4]
  41f758:	f852 3b08 	ldr.w	r3, [r2], #8
  41f75c:	920a      	str	r2, [sp, #40]	@ 0x28
  41f75e:	460a      	mov	r2, r1
  41f760:	2900      	cmp	r1, #0
  41f762:	f2c0 812f 	blt.w	41f9c4 <_vfiprintf_r+0x734>
  41f766:	9904      	ldr	r1, [sp, #16]
  41f768:	2900      	cmp	r1, #0
  41f76a:	f2c0 8138 	blt.w	41f9de <_vfiprintf_r+0x74e>
  41f76e:	9902      	ldr	r1, [sp, #8]
  41f770:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
  41f774:	9102      	str	r1, [sp, #8]
  41f776:	ea53 0102 	orrs.w	r1, r3, r2
  41f77a:	f040 8130 	bne.w	41f9de <_vfiprintf_r+0x74e>
  41f77e:	9804      	ldr	r0, [sp, #16]
  41f780:	1e01      	subs	r1, r0, #0
  41f782:	bf18      	it	ne
  41f784:	2101      	movne	r1, #1
  41f786:	2800      	cmp	r0, #0
  41f788:	f040 8129 	bne.w	41f9de <_vfiprintf_r+0x74e>
  41f78c:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
  41f790:	ac46      	add	r4, sp, #280	@ 0x118
  41f792:	9104      	str	r1, [sp, #16]
  41f794:	9107      	str	r1, [sp, #28]
  41f796:	e130      	b.n	41f9fa <_vfiprintf_r+0x76a>
  41f798:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41f79a:	f853 2b04 	ldr.w	r2, [r3], #4
  41f79e:	2a00      	cmp	r2, #0
  41f7a0:	9209      	str	r2, [sp, #36]	@ 0x24
  41f7a2:	f280 8325 	bge.w	41fdf0 <_vfiprintf_r+0xb60>
  41f7a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  41f7a8:	4252      	negs	r2, r2
  41f7aa:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  41f7ae:	9b02      	ldr	r3, [sp, #8]
  41f7b0:	7821      	ldrb	r1, [r4, #0]
  41f7b2:	f043 0304 	orr.w	r3, r3, #4
  41f7b6:	9302      	str	r3, [sp, #8]
  41f7b8:	e5d2      	b.n	41f360 <_vfiprintf_r+0xd0>
  41f7ba:	9b02      	ldr	r3, [sp, #8]
  41f7bc:	9406      	str	r4, [sp, #24]
  41f7be:	f043 0310 	orr.w	r3, r3, #16
  41f7c2:	9302      	str	r3, [sp, #8]
  41f7c4:	9b02      	ldr	r3, [sp, #8]
  41f7c6:	f013 0220 	ands.w	r2, r3, #32
  41f7ca:	f000 82d9 	beq.w	41fd80 <_vfiprintf_r+0xaf0>
  41f7ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41f7d0:	3307      	adds	r3, #7
  41f7d2:	f023 0307 	bic.w	r3, r3, #7
  41f7d6:	4619      	mov	r1, r3
  41f7d8:	685a      	ldr	r2, [r3, #4]
  41f7da:	f851 3b08 	ldr.w	r3, [r1], #8
  41f7de:	910a      	str	r1, [sp, #40]	@ 0x28
  41f7e0:	9902      	ldr	r1, [sp, #8]
  41f7e2:	9c04      	ldr	r4, [sp, #16]
  41f7e4:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
  41f7e8:	2100      	movs	r1, #0
  41f7ea:	428c      	cmp	r4, r1
  41f7ec:	f88d 104b 	strb.w	r1, [sp, #75]	@ 0x4b
  41f7f0:	da5b      	bge.n	41f8aa <_vfiprintf_r+0x61a>
  41f7f2:	ac46      	add	r4, sp, #280	@ 0x118
  41f7f4:	f003 0107 	and.w	r1, r3, #7
  41f7f8:	08db      	lsrs	r3, r3, #3
  41f7fa:	4625      	mov	r5, r4
  41f7fc:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
  41f800:	3130      	adds	r1, #48	@ 0x30
  41f802:	08d2      	lsrs	r2, r2, #3
  41f804:	f804 1d01 	strb.w	r1, [r4, #-1]!
  41f808:	ea53 0602 	orrs.w	r6, r3, r2
  41f80c:	d1f2      	bne.n	41f7f4 <_vfiprintf_r+0x564>
  41f80e:	2930      	cmp	r1, #48	@ 0x30
  41f810:	d002      	beq.n	41f818 <_vfiprintf_r+0x588>
  41f812:	07c6      	lsls	r6, r0, #31
  41f814:	f100 8304 	bmi.w	41fe20 <_vfiprintf_r+0xb90>
  41f818:	ab46      	add	r3, sp, #280	@ 0x118
  41f81a:	9002      	str	r0, [sp, #8]
  41f81c:	1b1b      	subs	r3, r3, r4
  41f81e:	9307      	str	r3, [sp, #28]
  41f820:	9b07      	ldr	r3, [sp, #28]
  41f822:	9a04      	ldr	r2, [sp, #16]
  41f824:	4293      	cmp	r3, r2
  41f826:	bfb8      	it	lt
  41f828:	4613      	movlt	r3, r2
  41f82a:	9303      	str	r3, [sp, #12]
  41f82c:	2300      	movs	r3, #0
  41f82e:	930b      	str	r3, [sp, #44]	@ 0x2c
  41f830:	9b02      	ldr	r3, [sp, #8]
  41f832:	f013 0602 	ands.w	r6, r3, #2
  41f836:	f43f aea7 	beq.w	41f588 <_vfiprintf_r+0x2f8>
  41f83a:	9b03      	ldr	r3, [sp, #12]
  41f83c:	2602      	movs	r6, #2
  41f83e:	3302      	adds	r3, #2
  41f840:	9303      	str	r3, [sp, #12]
  41f842:	e6a1      	b.n	41f588 <_vfiprintf_r+0x2f8>
  41f844:	9b02      	ldr	r3, [sp, #8]
  41f846:	9406      	str	r4, [sp, #24]
  41f848:	f043 0310 	orr.w	r3, r3, #16
  41f84c:	9302      	str	r3, [sp, #8]
  41f84e:	9b02      	ldr	r3, [sp, #8]
  41f850:	0699      	lsls	r1, r3, #26
  41f852:	f53f af7b 	bmi.w	41f74c <_vfiprintf_r+0x4bc>
  41f856:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  41f858:	f852 3b04 	ldr.w	r3, [r2], #4
  41f85c:	920a      	str	r2, [sp, #40]	@ 0x28
  41f85e:	9a02      	ldr	r2, [sp, #8]
  41f860:	06d2      	lsls	r2, r2, #27
  41f862:	f100 82da 	bmi.w	41fe1a <_vfiprintf_r+0xb8a>
  41f866:	9a02      	ldr	r2, [sp, #8]
  41f868:	0656      	lsls	r6, r2, #25
  41f86a:	f140 82d2 	bpl.w	41fe12 <_vfiprintf_r+0xb82>
  41f86e:	f343 32c0 	sbfx	r2, r3, #15, #1
  41f872:	b21b      	sxth	r3, r3
  41f874:	4611      	mov	r1, r2
  41f876:	e773      	b.n	41f760 <_vfiprintf_r+0x4d0>
  41f878:	9b02      	ldr	r3, [sp, #8]
  41f87a:	9406      	str	r4, [sp, #24]
  41f87c:	f043 0010 	orr.w	r0, r3, #16
  41f880:	f010 0220 	ands.w	r2, r0, #32
  41f884:	f000 828d 	beq.w	41fda2 <_vfiprintf_r+0xb12>
  41f888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41f88a:	3307      	adds	r3, #7
  41f88c:	f023 0307 	bic.w	r3, r3, #7
  41f890:	4619      	mov	r1, r3
  41f892:	685a      	ldr	r2, [r3, #4]
  41f894:	f851 3b08 	ldr.w	r3, [r1], #8
  41f898:	910a      	str	r1, [sp, #40]	@ 0x28
  41f89a:	2100      	movs	r1, #0
  41f89c:	f88d 104b 	strb.w	r1, [sp, #75]	@ 0x4b
  41f8a0:	9904      	ldr	r1, [sp, #16]
  41f8a2:	2900      	cmp	r1, #0
  41f8a4:	f2c0 847a 	blt.w	42019c <_vfiprintf_r+0xf0c>
  41f8a8:	2101      	movs	r1, #1
  41f8aa:	f020 0480 	bic.w	r4, r0, #128	@ 0x80
  41f8ae:	9402      	str	r4, [sp, #8]
  41f8b0:	ea53 0402 	orrs.w	r4, r3, r2
  41f8b4:	f040 8232 	bne.w	41fd1c <_vfiprintf_r+0xa8c>
  41f8b8:	9d04      	ldr	r5, [sp, #16]
  41f8ba:	1e2c      	subs	r4, r5, #0
  41f8bc:	bf18      	it	ne
  41f8be:	2401      	movne	r4, #1
  41f8c0:	2d00      	cmp	r5, #0
  41f8c2:	f040 822b 	bne.w	41fd1c <_vfiprintf_r+0xa8c>
  41f8c6:	2900      	cmp	r1, #0
  41f8c8:	f040 8221 	bne.w	41fd0e <_vfiprintf_r+0xa7e>
  41f8cc:	f010 0301 	ands.w	r3, r0, #1
  41f8d0:	9303      	str	r3, [sp, #12]
  41f8d2:	f000 824f 	beq.w	41fd74 <_vfiprintf_r+0xae4>
  41f8d6:	9307      	str	r3, [sp, #28]
  41f8d8:	2330      	movs	r3, #48	@ 0x30
  41f8da:	f20d 1417 	addw	r4, sp, #279	@ 0x117
  41f8de:	9104      	str	r1, [sp, #16]
  41f8e0:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
  41f8e4:	e79c      	b.n	41f820 <_vfiprintf_r+0x590>
  41f8e6:	7821      	ldrb	r1, [r4, #0]
  41f8e8:	9b02      	ldr	r3, [sp, #8]
  41f8ea:	2968      	cmp	r1, #104	@ 0x68
  41f8ec:	f000 83a1 	beq.w	420032 <_vfiprintf_r+0xda2>
  41f8f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  41f8f4:	9302      	str	r3, [sp, #8]
  41f8f6:	e533      	b.n	41f360 <_vfiprintf_r+0xd0>
  41f8f8:	232b      	movs	r3, #43	@ 0x2b
  41f8fa:	7821      	ldrb	r1, [r4, #0]
  41f8fc:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
  41f900:	e52e      	b.n	41f360 <_vfiprintf_r+0xd0>
  41f902:	9b02      	ldr	r3, [sp, #8]
  41f904:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  41f906:	f043 0002 	orr.w	r0, r3, #2
  41f90a:	f647 0330 	movw	r3, #30768	@ 0x7830
  41f90e:	49b0      	ldr	r1, [pc, #704]	@ (41fbd0 <_vfiprintf_r+0x940>)
  41f910:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
  41f914:	f852 3b04 	ldr.w	r3, [r2], #4
  41f918:	9406      	str	r4, [sp, #24]
  41f91a:	920a      	str	r2, [sp, #40]	@ 0x28
  41f91c:	2200      	movs	r2, #0
  41f91e:	910d      	str	r1, [sp, #52]	@ 0x34
  41f920:	2100      	movs	r1, #0
  41f922:	f88d 104b 	strb.w	r1, [sp, #75]	@ 0x4b
  41f926:	9904      	ldr	r1, [sp, #16]
  41f928:	2900      	cmp	r1, #0
  41f92a:	f2c0 81fe 	blt.w	41fd2a <_vfiprintf_r+0xa9a>
  41f92e:	2102      	movs	r1, #2
  41f930:	e7bb      	b.n	41f8aa <_vfiprintf_r+0x61a>
  41f932:	9b02      	ldr	r3, [sp, #8]
  41f934:	9406      	str	r4, [sp, #24]
  41f936:	069c      	lsls	r4, r3, #26
  41f938:	f140 827c 	bpl.w	41fe34 <_vfiprintf_r+0xba4>
  41f93c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41f93e:	9a08      	ldr	r2, [sp, #32]
  41f940:	681b      	ldr	r3, [r3, #0]
  41f942:	601a      	str	r2, [r3, #0]
  41f944:	17d2      	asrs	r2, r2, #31
  41f946:	605a      	str	r2, [r3, #4]
  41f948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41f94a:	3304      	adds	r3, #4
  41f94c:	930a      	str	r3, [sp, #40]	@ 0x28
  41f94e:	e4e2      	b.n	41f316 <_vfiprintf_r+0x86>
  41f950:	9b02      	ldr	r3, [sp, #8]
  41f952:	7821      	ldrb	r1, [r4, #0]
  41f954:	f043 0301 	orr.w	r3, r3, #1
  41f958:	9302      	str	r3, [sp, #8]
  41f95a:	e501      	b.n	41f360 <_vfiprintf_r+0xd0>
  41f95c:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
  41f960:	7821      	ldrb	r1, [r4, #0]
  41f962:	2b00      	cmp	r3, #0
  41f964:	f47f acfc 	bne.w	41f360 <_vfiprintf_r+0xd0>
  41f968:	2320      	movs	r3, #32
  41f96a:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
  41f96e:	e4f7      	b.n	41f360 <_vfiprintf_r+0xd0>
  41f970:	9b02      	ldr	r3, [sp, #8]
  41f972:	7821      	ldrb	r1, [r4, #0]
  41f974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
  41f978:	9302      	str	r3, [sp, #8]
  41f97a:	e4f1      	b.n	41f360 <_vfiprintf_r+0xd0>
  41f97c:	4620      	mov	r0, r4
  41f97e:	f810 1b01 	ldrb.w	r1, [r0], #1
  41f982:	292a      	cmp	r1, #42	@ 0x2a
  41f984:	f000 844d 	beq.w	420222 <_vfiprintf_r+0xf92>
  41f988:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
  41f98c:	2b09      	cmp	r3, #9
  41f98e:	f200 8410 	bhi.w	4201b2 <_vfiprintf_r+0xf22>
  41f992:	2200      	movs	r2, #0
  41f994:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  41f998:	f810 1b01 	ldrb.w	r1, [r0], #1
  41f99c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  41f9a0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
  41f9a4:	2b09      	cmp	r3, #9
  41f9a6:	d9f5      	bls.n	41f994 <_vfiprintf_r+0x704>
  41f9a8:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
  41f9ac:	4604      	mov	r4, r0
  41f9ae:	9304      	str	r3, [sp, #16]
  41f9b0:	e4d7      	b.n	41f362 <_vfiprintf_r+0xd2>
  41f9b2:	7821      	ldrb	r1, [r4, #0]
  41f9b4:	9b02      	ldr	r3, [sp, #8]
  41f9b6:	296c      	cmp	r1, #108	@ 0x6c
  41f9b8:	f000 8342 	beq.w	420040 <_vfiprintf_r+0xdb0>
  41f9bc:	f043 0310 	orr.w	r3, r3, #16
  41f9c0:	9302      	str	r3, [sp, #8]
  41f9c2:	e4cd      	b.n	41f360 <_vfiprintf_r+0xd0>
  41f9c4:	212d      	movs	r1, #45	@ 0x2d
  41f9c6:	425b      	negs	r3, r3
  41f9c8:	f88d 104b 	strb.w	r1, [sp, #75]	@ 0x4b
  41f9cc:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
  41f9d0:	9904      	ldr	r1, [sp, #16]
  41f9d2:	2900      	cmp	r1, #0
  41f9d4:	db03      	blt.n	41f9de <_vfiprintf_r+0x74e>
  41f9d6:	9902      	ldr	r1, [sp, #8]
  41f9d8:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
  41f9dc:	9102      	str	r1, [sp, #8]
  41f9de:	2b0a      	cmp	r3, #10
  41f9e0:	f172 0100 	sbcs.w	r1, r2, #0
  41f9e4:	f080 82c2 	bcs.w	41ff6c <_vfiprintf_r+0xcdc>
  41f9e8:	3330      	adds	r3, #48	@ 0x30
  41f9ea:	2201      	movs	r2, #1
  41f9ec:	f20d 1417 	addw	r4, sp, #279	@ 0x117
  41f9f0:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
  41f9f4:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
  41f9f8:	9207      	str	r2, [sp, #28]
  41f9fa:	9a07      	ldr	r2, [sp, #28]
  41f9fc:	9904      	ldr	r1, [sp, #16]
  41f9fe:	428a      	cmp	r2, r1
  41fa00:	bfb8      	it	lt
  41fa02:	460a      	movlt	r2, r1
  41fa04:	9203      	str	r2, [sp, #12]
  41fa06:	2b00      	cmp	r3, #0
  41fa08:	f000 81b8 	beq.w	41fd7c <_vfiprintf_r+0xaec>
  41fa0c:	2300      	movs	r3, #0
  41fa0e:	930b      	str	r3, [sp, #44]	@ 0x2c
  41fa10:	9b03      	ldr	r3, [sp, #12]
  41fa12:	3301      	adds	r3, #1
  41fa14:	9303      	str	r3, [sp, #12]
  41fa16:	e70b      	b.n	41f830 <_vfiprintf_r+0x5a0>
  41fa18:	9b07      	ldr	r3, [sp, #28]
  41fa1a:	2201      	movs	r2, #1
  41fa1c:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fa20:	941d      	str	r4, [sp, #116]	@ 0x74
  41fa22:	931e      	str	r3, [sp, #120]	@ 0x78
  41fa24:	931c      	str	r3, [sp, #112]	@ 0x70
  41fa26:	921b      	str	r2, [sp, #108]	@ 0x6c
  41fa28:	f109 0908 	add.w	r9, r9, #8
  41fa2c:	e614      	b.n	41f658 <_vfiprintf_r+0x3c8>
  41fa2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  41fa30:	9803      	ldr	r0, [sp, #12]
  41fa32:	1a1d      	subs	r5, r3, r0
  41fa34:	2d00      	cmp	r5, #0
  41fa36:	f77f adef 	ble.w	41f618 <_vfiprintf_r+0x388>
  41fa3a:	2d10      	cmp	r5, #16
  41fa3c:	f340 83e9 	ble.w	420212 <_vfiprintf_r+0xf82>
  41fa40:	f8df 8190 	ldr.w	r8, [pc, #400]	@ 41fbd4 <_vfiprintf_r+0x944>
  41fa44:	2610      	movs	r6, #16
  41fa46:	4660      	mov	r0, ip
  41fa48:	4643      	mov	r3, r8
  41fa4a:	46a0      	mov	r8, r4
  41fa4c:	461c      	mov	r4, r3
  41fa4e:	e00f      	b.n	41fa70 <_vfiprintf_r+0x7e0>
  41fa50:	9905      	ldr	r1, [sp, #20]
  41fa52:	4650      	mov	r0, sl
  41fa54:	f7ff fbe0 	bl	41f218 <__sprint_r.part.0>
  41fa58:	2800      	cmp	r0, #0
  41fa5a:	f47f ad71 	bne.w	41f540 <_vfiprintf_r+0x2b0>
  41fa5e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fa62:	e9dd 201b 	ldrd	r2, r0, [sp, #108]	@ 0x6c
  41fa66:	f102 0c01 	add.w	ip, r2, #1
  41fa6a:	3d10      	subs	r5, #16
  41fa6c:	2d10      	cmp	r5, #16
  41fa6e:	dd17      	ble.n	41faa0 <_vfiprintf_r+0x810>
  41fa70:	1c51      	adds	r1, r2, #1
  41fa72:	3010      	adds	r0, #16
  41fa74:	f102 0c02 	add.w	ip, r2, #2
  41fa78:	2907      	cmp	r1, #7
  41fa7a:	460a      	mov	r2, r1
  41fa7c:	e9c9 4600 	strd	r4, r6, [r9]
  41fa80:	e9cd 101b 	strd	r1, r0, [sp, #108]	@ 0x6c
  41fa84:	f109 0908 	add.w	r9, r9, #8
  41fa88:	ddef      	ble.n	41fa6a <_vfiprintf_r+0x7da>
  41fa8a:	aa1a      	add	r2, sp, #104	@ 0x68
  41fa8c:	2800      	cmp	r0, #0
  41fa8e:	d1df      	bne.n	41fa50 <_vfiprintf_r+0x7c0>
  41fa90:	3d10      	subs	r5, #16
  41fa92:	f04f 0c01 	mov.w	ip, #1
  41fa96:	4602      	mov	r2, r0
  41fa98:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fa9c:	2d10      	cmp	r5, #16
  41fa9e:	dce7      	bgt.n	41fa70 <_vfiprintf_r+0x7e0>
  41faa0:	4662      	mov	r2, ip
  41faa2:	4623      	mov	r3, r4
  41faa4:	4684      	mov	ip, r0
  41faa6:	4644      	mov	r4, r8
  41faa8:	4610      	mov	r0, r2
  41faaa:	4698      	mov	r8, r3
  41faac:	44ac      	add	ip, r5
  41faae:	2807      	cmp	r0, #7
  41fab0:	f8c9 8000 	str.w	r8, [r9]
  41fab4:	f8c9 5004 	str.w	r5, [r9, #4]
  41fab8:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	@ 0x6c
  41fabc:	f340 81a4 	ble.w	41fe08 <_vfiprintf_r+0xb78>
  41fac0:	f1bc 0f00 	cmp.w	ip, #0
  41fac4:	f000 8327 	beq.w	420116 <_vfiprintf_r+0xe86>
  41fac8:	aa1a      	add	r2, sp, #104	@ 0x68
  41faca:	9905      	ldr	r1, [sp, #20]
  41facc:	4650      	mov	r0, sl
  41face:	f7ff fba3 	bl	41f218 <__sprint_r.part.0>
  41fad2:	2800      	cmp	r0, #0
  41fad4:	f47f ad34 	bne.w	41f540 <_vfiprintf_r+0x2b0>
  41fad8:	9b04      	ldr	r3, [sp, #16]
  41fada:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fade:	9807      	ldr	r0, [sp, #28]
  41fae0:	1a1d      	subs	r5, r3, r0
  41fae2:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
  41fae6:	2d00      	cmp	r5, #0
  41fae8:	f102 0101 	add.w	r1, r2, #1
  41faec:	f77f ad9a 	ble.w	41f624 <_vfiprintf_r+0x394>
  41faf0:	2d10      	cmp	r5, #16
  41faf2:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 41fbd4 <_vfiprintf_r+0x944>
  41faf6:	dd2d      	ble.n	41fb54 <_vfiprintf_r+0x8c4>
  41faf8:	9404      	str	r4, [sp, #16]
  41fafa:	2610      	movs	r6, #16
  41fafc:	4663      	mov	r3, ip
  41fafe:	9c05      	ldr	r4, [sp, #20]
  41fb00:	e00d      	b.n	41fb1e <_vfiprintf_r+0x88e>
  41fb02:	4650      	mov	r0, sl
  41fb04:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fb08:	f7ff fb86 	bl	41f218 <__sprint_r.part.0>
  41fb0c:	2800      	cmp	r0, #0
  41fb0e:	f47f ad17 	bne.w	41f540 <_vfiprintf_r+0x2b0>
  41fb12:	e9dd 231b 	ldrd	r2, r3, [sp, #108]	@ 0x6c
  41fb16:	1c51      	adds	r1, r2, #1
  41fb18:	3d10      	subs	r5, #16
  41fb1a:	2d10      	cmp	r5, #16
  41fb1c:	dd18      	ble.n	41fb50 <_vfiprintf_r+0x8c0>
  41fb1e:	1c50      	adds	r0, r2, #1
  41fb20:	492c      	ldr	r1, [pc, #176]	@ (41fbd4 <_vfiprintf_r+0x944>)
  41fb22:	3310      	adds	r3, #16
  41fb24:	2807      	cmp	r0, #7
  41fb26:	e9c9 1600 	strd	r1, r6, [r9]
  41fb2a:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
  41fb2e:	f102 0102 	add.w	r1, r2, #2
  41fb32:	f109 0908 	add.w	r9, r9, #8
  41fb36:	4602      	mov	r2, r0
  41fb38:	ddee      	ble.n	41fb18 <_vfiprintf_r+0x888>
  41fb3a:	aa1a      	add	r2, sp, #104	@ 0x68
  41fb3c:	4621      	mov	r1, r4
  41fb3e:	2b00      	cmp	r3, #0
  41fb40:	d1df      	bne.n	41fb02 <_vfiprintf_r+0x872>
  41fb42:	3d10      	subs	r5, #16
  41fb44:	2101      	movs	r1, #1
  41fb46:	461a      	mov	r2, r3
  41fb48:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fb4c:	2d10      	cmp	r5, #16
  41fb4e:	dce6      	bgt.n	41fb1e <_vfiprintf_r+0x88e>
  41fb50:	9c04      	ldr	r4, [sp, #16]
  41fb52:	469c      	mov	ip, r3
  41fb54:	44ac      	add	ip, r5
  41fb56:	2907      	cmp	r1, #7
  41fb58:	f8c9 8000 	str.w	r8, [r9]
  41fb5c:	f8c9 5004 	str.w	r5, [r9, #4]
  41fb60:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
  41fb64:	f300 80f0 	bgt.w	41fd48 <_vfiprintf_r+0xab8>
  41fb68:	f109 0908 	add.w	r9, r9, #8
  41fb6c:	3101      	adds	r1, #1
  41fb6e:	e559      	b.n	41f624 <_vfiprintf_r+0x394>
  41fb70:	f1bc 0f00 	cmp.w	ip, #0
  41fb74:	d00d      	beq.n	41fb92 <_vfiprintf_r+0x902>
  41fb76:	aa1a      	add	r2, sp, #104	@ 0x68
  41fb78:	9905      	ldr	r1, [sp, #20]
  41fb7a:	4650      	mov	r0, sl
  41fb7c:	f7ff fb4c 	bl	41f218 <__sprint_r.part.0>
  41fb80:	2800      	cmp	r0, #0
  41fb82:	f47f acdd 	bne.w	41f540 <_vfiprintf_r+0x2b0>
  41fb86:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fb8a:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
  41fb8e:	1c51      	adds	r1, r2, #1
  41fb90:	e51f      	b.n	41f5d2 <_vfiprintf_r+0x342>
  41fb92:	2e00      	cmp	r6, #0
  41fb94:	f000 816b 	beq.w	41fe6e <_vfiprintf_r+0xbde>
  41fb98:	2302      	movs	r3, #2
  41fb9a:	2101      	movs	r1, #1
  41fb9c:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fba0:	469c      	mov	ip, r3
  41fba2:	931e      	str	r3, [sp, #120]	@ 0x78
  41fba4:	ab13      	add	r3, sp, #76	@ 0x4c
  41fba6:	931d      	str	r3, [sp, #116]	@ 0x74
  41fba8:	460a      	mov	r2, r1
  41fbaa:	f109 0908 	add.w	r9, r9, #8
  41fbae:	3101      	adds	r1, #1
  41fbb0:	e52e      	b.n	41f610 <_vfiprintf_r+0x380>
  41fbb2:	2d10      	cmp	r5, #16
  41fbb4:	f340 8302 	ble.w	4201bc <_vfiprintf_r+0xf2c>
  41fbb8:	f8df 8020 	ldr.w	r8, [pc, #32]	@ 41fbdc <_vfiprintf_r+0x94c>
  41fbbc:	4649      	mov	r1, r9
  41fbbe:	9611      	str	r6, [sp, #68]	@ 0x44
  41fbc0:	46a1      	mov	r9, r4
  41fbc2:	2310      	movs	r3, #16
  41fbc4:	4644      	mov	r4, r8
  41fbc6:	4666      	mov	r6, ip
  41fbc8:	f8dd 8014 	ldr.w	r8, [sp, #20]
  41fbcc:	e00d      	b.n	41fbea <_vfiprintf_r+0x95a>
  41fbce:	bf00      	nop
  41fbd0:	00434d84 	.word	0x00434d84
  41fbd4:	0043c510 	.word	0x0043c510
  41fbd8:	2000a36c 	.word	0x2000a36c
  41fbdc:	0043c520 	.word	0x0043c520
  41fbe0:	4602      	mov	r2, r0
  41fbe2:	3d10      	subs	r5, #16
  41fbe4:	1c50      	adds	r0, r2, #1
  41fbe6:	2d10      	cmp	r5, #16
  41fbe8:	dd1e      	ble.n	41fc28 <_vfiprintf_r+0x998>
  41fbea:	3610      	adds	r6, #16
  41fbec:	2807      	cmp	r0, #7
  41fbee:	f102 0e02 	add.w	lr, r2, #2
  41fbf2:	e9c1 4300 	strd	r4, r3, [r1]
  41fbf6:	e9cd 061b 	strd	r0, r6, [sp, #108]	@ 0x6c
  41fbfa:	f101 0108 	add.w	r1, r1, #8
  41fbfe:	ddef      	ble.n	41fbe0 <_vfiprintf_r+0x950>
  41fc00:	aa1a      	add	r2, sp, #104	@ 0x68
  41fc02:	4641      	mov	r1, r8
  41fc04:	4650      	mov	r0, sl
  41fc06:	b32e      	cbz	r6, 41fc54 <_vfiprintf_r+0x9c4>
  41fc08:	f7ff fb06 	bl	41f218 <__sprint_r.part.0>
  41fc0c:	a91d      	add	r1, sp, #116	@ 0x74
  41fc0e:	2800      	cmp	r0, #0
  41fc10:	f47f ac96 	bne.w	41f540 <_vfiprintf_r+0x2b0>
  41fc14:	3d10      	subs	r5, #16
  41fc16:	2310      	movs	r3, #16
  41fc18:	e9dd 261b 	ldrd	r2, r6, [sp, #108]	@ 0x6c
  41fc1c:	2d10      	cmp	r5, #16
  41fc1e:	f102 0e01 	add.w	lr, r2, #1
  41fc22:	f102 0001 	add.w	r0, r2, #1
  41fc26:	dce0      	bgt.n	41fbea <_vfiprintf_r+0x95a>
  41fc28:	46b4      	mov	ip, r6
  41fc2a:	46a0      	mov	r8, r4
  41fc2c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
  41fc2e:	464c      	mov	r4, r9
  41fc30:	4689      	mov	r9, r1
  41fc32:	44ac      	add	ip, r5
  41fc34:	f1be 0f07 	cmp.w	lr, #7
  41fc38:	f8c9 8000 	str.w	r8, [r9]
  41fc3c:	f8c9 5004 	str.w	r5, [r9, #4]
  41fc40:	e9cd ec1b 	strd	lr, ip, [sp, #108]	@ 0x6c
  41fc44:	f300 80c1 	bgt.w	41fdca <_vfiprintf_r+0xb3a>
  41fc48:	f109 0908 	add.w	r9, r9, #8
  41fc4c:	f10e 0101 	add.w	r1, lr, #1
  41fc50:	4672      	mov	r2, lr
  41fc52:	e4a9      	b.n	41f5a8 <_vfiprintf_r+0x318>
  41fc54:	4632      	mov	r2, r6
  41fc56:	f04f 0e01 	mov.w	lr, #1
  41fc5a:	a91d      	add	r1, sp, #116	@ 0x74
  41fc5c:	e7c1      	b.n	41fbe2 <_vfiprintf_r+0x952>
  41fc5e:	9a02      	ldr	r2, [sp, #8]
  41fc60:	931b      	str	r3, [sp, #108]	@ 0x6c
  41fc62:	0754      	lsls	r4, r2, #29
  41fc64:	d54a      	bpl.n	41fcfc <_vfiprintf_r+0xa6c>
  41fc66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  41fc68:	9903      	ldr	r1, [sp, #12]
  41fc6a:	1a54      	subs	r4, r2, r1
  41fc6c:	2c00      	cmp	r4, #0
  41fc6e:	dd45      	ble.n	41fcfc <_vfiprintf_r+0xa6c>
  41fc70:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fc74:	2c10      	cmp	r4, #16
  41fc76:	991b      	ldr	r1, [sp, #108]	@ 0x6c
  41fc78:	f340 82a4 	ble.w	4201c4 <_vfiprintf_r+0xf34>
  41fc7c:	f8df 84e8 	ldr.w	r8, [pc, #1256]	@ 420168 <_vfiprintf_r+0xed8>
  41fc80:	2510      	movs	r5, #16
  41fc82:	4646      	mov	r6, r8
  41fc84:	f8dd 8014 	ldr.w	r8, [sp, #20]
  41fc88:	e00e      	b.n	41fca8 <_vfiprintf_r+0xa18>
  41fc8a:	4641      	mov	r1, r8
  41fc8c:	4650      	mov	r0, sl
  41fc8e:	f7ff fac3 	bl	41f218 <__sprint_r.part.0>
  41fc92:	2800      	cmp	r0, #0
  41fc94:	f47f ac54 	bne.w	41f540 <_vfiprintf_r+0x2b0>
  41fc98:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fc9c:	e9dd 131b 	ldrd	r1, r3, [sp, #108]	@ 0x6c
  41fca0:	1c48      	adds	r0, r1, #1
  41fca2:	3c10      	subs	r4, #16
  41fca4:	2c10      	cmp	r4, #16
  41fca6:	dd15      	ble.n	41fcd4 <_vfiprintf_r+0xa44>
  41fca8:	1c4a      	adds	r2, r1, #1
  41fcaa:	3310      	adds	r3, #16
  41fcac:	1c88      	adds	r0, r1, #2
  41fcae:	2a07      	cmp	r2, #7
  41fcb0:	4611      	mov	r1, r2
  41fcb2:	e9c9 6500 	strd	r6, r5, [r9]
  41fcb6:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
  41fcba:	f109 0908 	add.w	r9, r9, #8
  41fcbe:	ddf0      	ble.n	41fca2 <_vfiprintf_r+0xa12>
  41fcc0:	aa1a      	add	r2, sp, #104	@ 0x68
  41fcc2:	2b00      	cmp	r3, #0
  41fcc4:	d1e1      	bne.n	41fc8a <_vfiprintf_r+0x9fa>
  41fcc6:	3c10      	subs	r4, #16
  41fcc8:	2001      	movs	r0, #1
  41fcca:	4619      	mov	r1, r3
  41fccc:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fcd0:	2c10      	cmp	r4, #16
  41fcd2:	dce9      	bgt.n	41fca8 <_vfiprintf_r+0xa18>
  41fcd4:	46b0      	mov	r8, r6
  41fcd6:	4423      	add	r3, r4
  41fcd8:	2807      	cmp	r0, #7
  41fcda:	e9c9 8400 	strd	r8, r4, [r9]
  41fcde:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
  41fce2:	f77f acc2 	ble.w	41f66a <_vfiprintf_r+0x3da>
  41fce6:	b14b      	cbz	r3, 41fcfc <_vfiprintf_r+0xa6c>
  41fce8:	aa1a      	add	r2, sp, #104	@ 0x68
  41fcea:	9905      	ldr	r1, [sp, #20]
  41fcec:	4650      	mov	r0, sl
  41fcee:	f7ff fa93 	bl	41f218 <__sprint_r.part.0>
  41fcf2:	2800      	cmp	r0, #0
  41fcf4:	f47f ac24 	bne.w	41f540 <_vfiprintf_r+0x2b0>
  41fcf8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  41fcfa:	e4b6      	b.n	41f66a <_vfiprintf_r+0x3da>
  41fcfc:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
  41fd00:	9903      	ldr	r1, [sp, #12]
  41fd02:	428a      	cmp	r2, r1
  41fd04:	bfac      	ite	ge
  41fd06:	189b      	addge	r3, r3, r2
  41fd08:	185b      	addlt	r3, r3, r1
  41fd0a:	9308      	str	r3, [sp, #32]
  41fd0c:	e4b8      	b.n	41f680 <_vfiprintf_r+0x3f0>
  41fd0e:	4622      	mov	r2, r4
  41fd10:	940b      	str	r4, [sp, #44]	@ 0x2c
  41fd12:	ac46      	add	r4, sp, #280	@ 0x118
  41fd14:	9204      	str	r2, [sp, #16]
  41fd16:	9207      	str	r2, [sp, #28]
  41fd18:	9203      	str	r2, [sp, #12]
  41fd1a:	e589      	b.n	41f830 <_vfiprintf_r+0x5a0>
  41fd1c:	2901      	cmp	r1, #1
  41fd1e:	f43f ae5e 	beq.w	41f9de <_vfiprintf_r+0x74e>
  41fd22:	2902      	cmp	r1, #2
  41fd24:	9802      	ldr	r0, [sp, #8]
  41fd26:	f47f ad64 	bne.w	41f7f2 <_vfiprintf_r+0x562>
  41fd2a:	ac46      	add	r4, sp, #280	@ 0x118
  41fd2c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
  41fd2e:	f003 010f 	and.w	r1, r3, #15
  41fd32:	091b      	lsrs	r3, r3, #4
  41fd34:	5c69      	ldrb	r1, [r5, r1]
  41fd36:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  41fd3a:	0912      	lsrs	r2, r2, #4
  41fd3c:	f804 1d01 	strb.w	r1, [r4, #-1]!
  41fd40:	ea53 0102 	orrs.w	r1, r3, r2
  41fd44:	d1f3      	bne.n	41fd2e <_vfiprintf_r+0xa9e>
  41fd46:	e567      	b.n	41f818 <_vfiprintf_r+0x588>
  41fd48:	f1bc 0f00 	cmp.w	ip, #0
  41fd4c:	f43f ae64 	beq.w	41fa18 <_vfiprintf_r+0x788>
  41fd50:	aa1a      	add	r2, sp, #104	@ 0x68
  41fd52:	9905      	ldr	r1, [sp, #20]
  41fd54:	4650      	mov	r0, sl
  41fd56:	f7ff fa5f 	bl	41f218 <__sprint_r.part.0>
  41fd5a:	2800      	cmp	r0, #0
  41fd5c:	f47f abf0 	bne.w	41f540 <_vfiprintf_r+0x2b0>
  41fd60:	991b      	ldr	r1, [sp, #108]	@ 0x6c
  41fd62:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fd66:	f8dd c070 	ldr.w	ip, [sp, #112]	@ 0x70
  41fd6a:	3101      	adds	r1, #1
  41fd6c:	e45a      	b.n	41f624 <_vfiprintf_r+0x394>
  41fd6e:	921b      	str	r2, [sp, #108]	@ 0x6c
  41fd70:	f7ff bbdb 	b.w	41f52a <_vfiprintf_r+0x29a>
  41fd74:	460b      	mov	r3, r1
  41fd76:	ac46      	add	r4, sp, #280	@ 0x118
  41fd78:	9104      	str	r1, [sp, #16]
  41fd7a:	9107      	str	r1, [sp, #28]
  41fd7c:	930b      	str	r3, [sp, #44]	@ 0x2c
  41fd7e:	e557      	b.n	41f830 <_vfiprintf_r+0x5a0>
  41fd80:	990a      	ldr	r1, [sp, #40]	@ 0x28
  41fd82:	f851 3b04 	ldr.w	r3, [r1], #4
  41fd86:	910a      	str	r1, [sp, #40]	@ 0x28
  41fd88:	9902      	ldr	r1, [sp, #8]
  41fd8a:	f011 0110 	ands.w	r1, r1, #16
  41fd8e:	f47f ad27 	bne.w	41f7e0 <_vfiprintf_r+0x550>
  41fd92:	9a02      	ldr	r2, [sp, #8]
  41fd94:	f012 0040 	ands.w	r0, r2, #64	@ 0x40
  41fd98:	f000 8170 	beq.w	42007c <_vfiprintf_r+0xdec>
  41fd9c:	b29b      	uxth	r3, r3
  41fd9e:	460a      	mov	r2, r1
  41fda0:	e51e      	b.n	41f7e0 <_vfiprintf_r+0x550>
  41fda2:	990a      	ldr	r1, [sp, #40]	@ 0x28
  41fda4:	f851 3b04 	ldr.w	r3, [r1], #4
  41fda8:	910a      	str	r1, [sp, #40]	@ 0x28
  41fdaa:	f010 0110 	ands.w	r1, r0, #16
  41fdae:	f47f ad74 	bne.w	41f89a <_vfiprintf_r+0x60a>
  41fdb2:	f010 0440 	ands.w	r4, r0, #64	@ 0x40
  41fdb6:	f000 816a 	beq.w	42008e <_vfiprintf_r+0xdfe>
  41fdba:	b29b      	uxth	r3, r3
  41fdbc:	460a      	mov	r2, r1
  41fdbe:	e56c      	b.n	41f89a <_vfiprintf_r+0x60a>
  41fdc0:	2101      	movs	r1, #1
  41fdc2:	4662      	mov	r2, ip
  41fdc4:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fdc8:	e422      	b.n	41f610 <_vfiprintf_r+0x380>
  41fdca:	f1bc 0f00 	cmp.w	ip, #0
  41fdce:	f000 8088 	beq.w	41fee2 <_vfiprintf_r+0xc52>
  41fdd2:	aa1a      	add	r2, sp, #104	@ 0x68
  41fdd4:	9905      	ldr	r1, [sp, #20]
  41fdd6:	4650      	mov	r0, sl
  41fdd8:	f7ff fa1e 	bl	41f218 <__sprint_r.part.0>
  41fddc:	2800      	cmp	r0, #0
  41fdde:	f47f abaf 	bne.w	41f540 <_vfiprintf_r+0x2b0>
  41fde2:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fde6:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
  41fdea:	1c51      	adds	r1, r2, #1
  41fdec:	f7ff bbdc 	b.w	41f5a8 <_vfiprintf_r+0x318>
  41fdf0:	7821      	ldrb	r1, [r4, #0]
  41fdf2:	930a      	str	r3, [sp, #40]	@ 0x28
  41fdf4:	f7ff bab4 	b.w	41f360 <_vfiprintf_r+0xd0>
  41fdf8:	9d05      	ldr	r5, [sp, #20]
  41fdfa:	6da8      	ldr	r0, [r5, #88]	@ 0x58
  41fdfc:	f001 f896 	bl	420f2c <__retarget_lock_acquire_recursive>
  41fe00:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  41fe04:	f7ff ba63 	b.w	41f2ce <_vfiprintf_r+0x3e>
  41fe08:	f109 0908 	add.w	r9, r9, #8
  41fe0c:	1c41      	adds	r1, r0, #1
  41fe0e:	4602      	mov	r2, r0
  41fe10:	e402      	b.n	41f618 <_vfiprintf_r+0x388>
  41fe12:	9a02      	ldr	r2, [sp, #8]
  41fe14:	0595      	lsls	r5, r2, #22
  41fe16:	f100 8184 	bmi.w	420122 <_vfiprintf_r+0xe92>
  41fe1a:	17da      	asrs	r2, r3, #31
  41fe1c:	4611      	mov	r1, r2
  41fe1e:	e49f      	b.n	41f760 <_vfiprintf_r+0x4d0>
  41fe20:	2330      	movs	r3, #48	@ 0x30
  41fe22:	3d02      	subs	r5, #2
  41fe24:	9002      	str	r0, [sp, #8]
  41fe26:	f804 3c01 	strb.w	r3, [r4, #-1]
  41fe2a:	ab46      	add	r3, sp, #280	@ 0x118
  41fe2c:	462c      	mov	r4, r5
  41fe2e:	1b5b      	subs	r3, r3, r5
  41fe30:	9307      	str	r3, [sp, #28]
  41fe32:	e4f5      	b.n	41f820 <_vfiprintf_r+0x590>
  41fe34:	9b02      	ldr	r3, [sp, #8]
  41fe36:	06d8      	lsls	r0, r3, #27
  41fe38:	f100 8109 	bmi.w	42004e <_vfiprintf_r+0xdbe>
  41fe3c:	9b02      	ldr	r3, [sp, #8]
  41fe3e:	0659      	lsls	r1, r3, #25
  41fe40:	f100 817b 	bmi.w	42013a <_vfiprintf_r+0xeaa>
  41fe44:	9b02      	ldr	r3, [sp, #8]
  41fe46:	059a      	lsls	r2, r3, #22
  41fe48:	f140 8101 	bpl.w	42004e <_vfiprintf_r+0xdbe>
  41fe4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41fe4e:	9a08      	ldr	r2, [sp, #32]
  41fe50:	681b      	ldr	r3, [r3, #0]
  41fe52:	701a      	strb	r2, [r3, #0]
  41fe54:	e578      	b.n	41f948 <_vfiprintf_r+0x6b8>
  41fe56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  41fe58:	7821      	ldrb	r1, [r4, #0]
  41fe5a:	781b      	ldrb	r3, [r3, #0]
  41fe5c:	2b00      	cmp	r3, #0
  41fe5e:	f43f aa7f 	beq.w	41f360 <_vfiprintf_r+0xd0>
  41fe62:	9b02      	ldr	r3, [sp, #8]
  41fe64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
  41fe68:	9302      	str	r3, [sp, #8]
  41fe6a:	f7ff ba79 	b.w	41f360 <_vfiprintf_r+0xd0>
  41fe6e:	4662      	mov	r2, ip
  41fe70:	2101      	movs	r1, #1
  41fe72:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fe76:	f7ff bbcb 	b.w	41f610 <_vfiprintf_r+0x380>
  41fe7a:	9802      	ldr	r0, [sp, #8]
  41fe7c:	9406      	str	r4, [sp, #24]
  41fe7e:	e4ff      	b.n	41f880 <_vfiprintf_r+0x5f0>
  41fe80:	9406      	str	r4, [sp, #24]
  41fe82:	e49f      	b.n	41f7c4 <_vfiprintf_r+0x534>
  41fe84:	4bb4      	ldr	r3, [pc, #720]	@ (420158 <_vfiprintf_r+0xec8>)
  41fe86:	9406      	str	r4, [sp, #24]
  41fe88:	930d      	str	r3, [sp, #52]	@ 0x34
  41fe8a:	9b02      	ldr	r3, [sp, #8]
  41fe8c:	f013 0220 	ands.w	r2, r3, #32
  41fe90:	d05c      	beq.n	41ff4c <_vfiprintf_r+0xcbc>
  41fe92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41fe94:	3307      	adds	r3, #7
  41fe96:	f023 0307 	bic.w	r3, r3, #7
  41fe9a:	4618      	mov	r0, r3
  41fe9c:	685a      	ldr	r2, [r3, #4]
  41fe9e:	f850 3b08 	ldr.w	r3, [r0], #8
  41fea2:	900a      	str	r0, [sp, #40]	@ 0x28
  41fea4:	ea53 0002 	orrs.w	r0, r3, r2
  41fea8:	d00a      	beq.n	41fec0 <_vfiprintf_r+0xc30>
  41feaa:	9802      	ldr	r0, [sp, #8]
  41feac:	07c4      	lsls	r4, r0, #31
  41feae:	d507      	bpl.n	41fec0 <_vfiprintf_r+0xc30>
  41feb0:	f88d 104d 	strb.w	r1, [sp, #77]	@ 0x4d
  41feb4:	f040 0102 	orr.w	r1, r0, #2
  41feb8:	9102      	str	r1, [sp, #8]
  41feba:	2130      	movs	r1, #48	@ 0x30
  41febc:	f88d 104c 	strb.w	r1, [sp, #76]	@ 0x4c
  41fec0:	9902      	ldr	r1, [sp, #8]
  41fec2:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
  41fec6:	e52b      	b.n	41f920 <_vfiprintf_r+0x690>
  41fec8:	4ba4      	ldr	r3, [pc, #656]	@ (42015c <_vfiprintf_r+0xecc>)
  41feca:	9406      	str	r4, [sp, #24]
  41fecc:	930d      	str	r3, [sp, #52]	@ 0x34
  41fece:	e7dc      	b.n	41fe8a <_vfiprintf_r+0xbfa>
  41fed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  41fed2:	ac2d      	add	r4, sp, #180	@ 0xb4
  41fed4:	681b      	ldr	r3, [r3, #0]
  41fed6:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
  41feda:	2301      	movs	r3, #1
  41fedc:	9303      	str	r3, [sp, #12]
  41fede:	9307      	str	r3, [sp, #28]
  41fee0:	e42a      	b.n	41f738 <_vfiprintf_r+0x4a8>
  41fee2:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
  41fee6:	2b00      	cmp	r3, #0
  41fee8:	f000 8121 	beq.w	42012e <_vfiprintf_r+0xe9e>
  41feec:	2101      	movs	r1, #1
  41feee:	f10d 034b 	add.w	r3, sp, #75	@ 0x4b
  41fef2:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  41fef6:	468c      	mov	ip, r1
  41fef8:	911e      	str	r1, [sp, #120]	@ 0x78
  41fefa:	931d      	str	r3, [sp, #116]	@ 0x74
  41fefc:	f7ff bb65 	b.w	41f5ca <_vfiprintf_r+0x33a>
  41ff00:	2208      	movs	r2, #8
  41ff02:	2100      	movs	r1, #0
  41ff04:	a818      	add	r0, sp, #96	@ 0x60
  41ff06:	9415      	str	r4, [sp, #84]	@ 0x54
  41ff08:	f000 fecc 	bl	420ca4 <memset>
  41ff0c:	9b04      	ldr	r3, [sp, #16]
  41ff0e:	2b00      	cmp	r3, #0
  41ff10:	f2c0 80c5 	blt.w	42009e <_vfiprintf_r+0xe0e>
  41ff14:	2500      	movs	r5, #0
  41ff16:	9403      	str	r4, [sp, #12]
  41ff18:	4698      	mov	r8, r3
  41ff1a:	462c      	mov	r4, r5
  41ff1c:	e00e      	b.n	41ff3c <_vfiprintf_r+0xcac>
  41ff1e:	a92d      	add	r1, sp, #180	@ 0xb4
  41ff20:	4650      	mov	r0, sl
  41ff22:	f001 f881 	bl	421028 <_wcrtomb_r>
  41ff26:	1c43      	adds	r3, r0, #1
  41ff28:	f105 0504 	add.w	r5, r5, #4
  41ff2c:	4420      	add	r0, r4
  41ff2e:	f000 8157 	beq.w	4201e0 <_vfiprintf_r+0xf50>
  41ff32:	4540      	cmp	r0, r8
  41ff34:	dc07      	bgt.n	41ff46 <_vfiprintf_r+0xcb6>
  41ff36:	f000 8170 	beq.w	42021a <_vfiprintf_r+0xf8a>
  41ff3a:	4604      	mov	r4, r0
  41ff3c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
  41ff3e:	ab18      	add	r3, sp, #96	@ 0x60
  41ff40:	5952      	ldr	r2, [r2, r5]
  41ff42:	2a00      	cmp	r2, #0
  41ff44:	d1eb      	bne.n	41ff1e <_vfiprintf_r+0xc8e>
  41ff46:	9407      	str	r4, [sp, #28]
  41ff48:	9c03      	ldr	r4, [sp, #12]
  41ff4a:	e0b6      	b.n	4200ba <_vfiprintf_r+0xe2a>
  41ff4c:	980a      	ldr	r0, [sp, #40]	@ 0x28
  41ff4e:	f850 3b04 	ldr.w	r3, [r0], #4
  41ff52:	900a      	str	r0, [sp, #40]	@ 0x28
  41ff54:	9802      	ldr	r0, [sp, #8]
  41ff56:	f010 0010 	ands.w	r0, r0, #16
  41ff5a:	d1a3      	bne.n	41fea4 <_vfiprintf_r+0xc14>
  41ff5c:	9a02      	ldr	r2, [sp, #8]
  41ff5e:	f012 0440 	ands.w	r4, r2, #64	@ 0x40
  41ff62:	f000 8083 	beq.w	42006c <_vfiprintf_r+0xddc>
  41ff66:	b29b      	uxth	r3, r3
  41ff68:	4602      	mov	r2, r0
  41ff6a:	e79b      	b.n	41fea4 <_vfiprintf_r+0xc14>
  41ff6c:	9902      	ldr	r1, [sp, #8]
  41ff6e:	f04f 0e00 	mov.w	lr, #0
  41ff72:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
  41ff76:	f50d 7c8c 	add.w	ip, sp, #280	@ 0x118
  41ff7a:	f401 6180 	and.w	r1, r1, #1024	@ 0x400
  41ff7e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
  41ff82:	4698      	mov	r8, r3
  41ff84:	f8cd 901c 	str.w	r9, [sp, #28]
  41ff88:	9103      	str	r1, [sp, #12]
  41ff8a:	e007      	b.n	41ff9c <_vfiprintf_r+0xd0c>
  41ff8c:	f1b8 0f0a 	cmp.w	r8, #10
  41ff90:	f172 0200 	sbcs.w	r2, r2, #0
  41ff94:	d33c      	bcc.n	420010 <_vfiprintf_r+0xd80>
  41ff96:	46b0      	mov	r8, r6
  41ff98:	462a      	mov	r2, r5
  41ff9a:	46a4      	mov	ip, r4
  41ff9c:	eb18 0002 	adds.w	r0, r8, r2
  41ffa0:	496f      	ldr	r1, [pc, #444]	@ (420160 <_vfiprintf_r+0xed0>)
  41ffa2:	f10e 0e01 	add.w	lr, lr, #1
  41ffa6:	f10c 34ff 	add.w	r4, ip, #4294967295	@ 0xffffffff
  41ffaa:	f140 0000 	adc.w	r0, r0, #0
  41ffae:	460b      	mov	r3, r1
  41ffb0:	fba1 1500 	umull	r1, r5, r1, r0
  41ffb4:	f025 0103 	bic.w	r1, r5, #3
  41ffb8:	eb01 0195 	add.w	r1, r1, r5, lsr #2
  41ffbc:	f04f 35cc 	mov.w	r5, #3435973836	@ 0xcccccccc
  41ffc0:	1a40      	subs	r0, r0, r1
  41ffc2:	ebb8 0100 	subs.w	r1, r8, r0
  41ffc6:	f162 0600 	sbc.w	r6, r2, #0
  41ffca:	fb05 f501 	mul.w	r5, r5, r1
  41ffce:	fb03 5506 	mla	r5, r3, r6, r5
  41ffd2:	fba1 6103 	umull	r6, r1, r1, r3
  41ffd6:	2305      	movs	r3, #5
  41ffd8:	440d      	add	r5, r1
  41ffda:	f006 0101 	and.w	r1, r6, #1
  41ffde:	0876      	lsrs	r6, r6, #1
  41ffe0:	fba1 1903 	umull	r1, r9, r1, r3
  41ffe4:	9b03      	ldr	r3, [sp, #12]
  41ffe6:	ea46 76c5 	orr.w	r6, r6, r5, lsl #31
  41ffea:	1809      	adds	r1, r1, r0
  41ffec:	086d      	lsrs	r5, r5, #1
  41ffee:	3130      	adds	r1, #48	@ 0x30
  41fff0:	f80c 1c01 	strb.w	r1, [ip, #-1]
  41fff4:	2b00      	cmp	r3, #0
  41fff6:	d0c9      	beq.n	41ff8c <_vfiprintf_r+0xcfc>
  41fff8:	f89a 1000 	ldrb.w	r1, [sl]
  41fffc:	29ff      	cmp	r1, #255	@ 0xff
  41fffe:	d0c5      	beq.n	41ff8c <_vfiprintf_r+0xcfc>
  420000:	4571      	cmp	r1, lr
  420002:	d1c3      	bne.n	41ff8c <_vfiprintf_r+0xcfc>
  420004:	f1b8 0f0a 	cmp.w	r8, #10
  420008:	f172 0200 	sbcs.w	r2, r2, #0
  42000c:	f080 80b7 	bcs.w	42017e <_vfiprintf_r+0xeee>
  420010:	aa46      	add	r2, sp, #280	@ 0x118
  420012:	f8dd 901c 	ldr.w	r9, [sp, #28]
  420016:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
  42001a:	1b12      	subs	r2, r2, r4
  42001c:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  420020:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
  420024:	9207      	str	r2, [sp, #28]
  420026:	e4e8      	b.n	41f9fa <_vfiprintf_r+0x76a>
  420028:	4650      	mov	r0, sl
  42002a:	f000 fabb 	bl	4205a4 <__sinit>
  42002e:	f7ff b945 	b.w	41f2bc <_vfiprintf_r+0x2c>
  420032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
  420036:	7861      	ldrb	r1, [r4, #1]
  420038:	3401      	adds	r4, #1
  42003a:	9302      	str	r3, [sp, #8]
  42003c:	f7ff b990 	b.w	41f360 <_vfiprintf_r+0xd0>
  420040:	f043 0320 	orr.w	r3, r3, #32
  420044:	7861      	ldrb	r1, [r4, #1]
  420046:	3401      	adds	r4, #1
  420048:	9302      	str	r3, [sp, #8]
  42004a:	f7ff b989 	b.w	41f360 <_vfiprintf_r+0xd0>
  42004e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  420050:	9a08      	ldr	r2, [sp, #32]
  420052:	681b      	ldr	r3, [r3, #0]
  420054:	601a      	str	r2, [r3, #0]
  420056:	e477      	b.n	41f948 <_vfiprintf_r+0x6b8>
  420058:	9b04      	ldr	r3, [sp, #16]
  42005a:	4c42      	ldr	r4, [pc, #264]	@ (420164 <_vfiprintf_r+0xed4>)
  42005c:	2b06      	cmp	r3, #6
  42005e:	960a      	str	r6, [sp, #40]	@ 0x28
  420060:	bf28      	it	cs
  420062:	2306      	movcs	r3, #6
  420064:	9307      	str	r3, [sp, #28]
  420066:	9303      	str	r3, [sp, #12]
  420068:	f7ff ba8b 	b.w	41f582 <_vfiprintf_r+0x2f2>
  42006c:	9a02      	ldr	r2, [sp, #8]
  42006e:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
  420072:	f43f af17 	beq.w	41fea4 <_vfiprintf_r+0xc14>
  420076:	b2db      	uxtb	r3, r3
  420078:	4622      	mov	r2, r4
  42007a:	e713      	b.n	41fea4 <_vfiprintf_r+0xc14>
  42007c:	9a02      	ldr	r2, [sp, #8]
  42007e:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
  420082:	f43f abad 	beq.w	41f7e0 <_vfiprintf_r+0x550>
  420086:	b2db      	uxtb	r3, r3
  420088:	4602      	mov	r2, r0
  42008a:	f7ff bba9 	b.w	41f7e0 <_vfiprintf_r+0x550>
  42008e:	f410 7200 	ands.w	r2, r0, #512	@ 0x200
  420092:	f43f ac02 	beq.w	41f89a <_vfiprintf_r+0x60a>
  420096:	b2db      	uxtb	r3, r3
  420098:	4622      	mov	r2, r4
  42009a:	f7ff bbfe 	b.w	41f89a <_vfiprintf_r+0x60a>
  42009e:	ab18      	add	r3, sp, #96	@ 0x60
  4200a0:	aa15      	add	r2, sp, #84	@ 0x54
  4200a2:	4650      	mov	r0, sl
  4200a4:	9300      	str	r3, [sp, #0]
  4200a6:	2300      	movs	r3, #0
  4200a8:	4619      	mov	r1, r3
  4200aa:	f000 ffe3 	bl	421074 <_wcsrtombs_r>
  4200ae:	4603      	mov	r3, r0
  4200b0:	9007      	str	r0, [sp, #28]
  4200b2:	3301      	adds	r3, #1
  4200b4:	f000 8094 	beq.w	4201e0 <_vfiprintf_r+0xf50>
  4200b8:	9415      	str	r4, [sp, #84]	@ 0x54
  4200ba:	9b07      	ldr	r3, [sp, #28]
  4200bc:	b1e3      	cbz	r3, 4200f8 <_vfiprintf_r+0xe68>
  4200be:	2b63      	cmp	r3, #99	@ 0x63
  4200c0:	dc40      	bgt.n	420144 <_vfiprintf_r+0xeb4>
  4200c2:	2300      	movs	r3, #0
  4200c4:	ac2d      	add	r4, sp, #180	@ 0xb4
  4200c6:	930b      	str	r3, [sp, #44]	@ 0x2c
  4200c8:	2208      	movs	r2, #8
  4200ca:	2100      	movs	r1, #0
  4200cc:	a818      	add	r0, sp, #96	@ 0x60
  4200ce:	f000 fde9 	bl	420ca4 <memset>
  4200d2:	9d07      	ldr	r5, [sp, #28]
  4200d4:	ab18      	add	r3, sp, #96	@ 0x60
  4200d6:	aa15      	add	r2, sp, #84	@ 0x54
  4200d8:	4621      	mov	r1, r4
  4200da:	4650      	mov	r0, sl
  4200dc:	9300      	str	r3, [sp, #0]
  4200de:	462b      	mov	r3, r5
  4200e0:	f000 ffc8 	bl	421074 <_wcsrtombs_r>
  4200e4:	4285      	cmp	r5, r0
  4200e6:	f040 80a7 	bne.w	420238 <_vfiprintf_r+0xfa8>
  4200ea:	2300      	movs	r3, #0
  4200ec:	9a07      	ldr	r2, [sp, #28]
  4200ee:	54a3      	strb	r3, [r4, r2]
  4200f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4200f4:	9303      	str	r3, [sp, #12]
  4200f6:	e002      	b.n	4200fe <_vfiprintf_r+0xe6e>
  4200f8:	9b07      	ldr	r3, [sp, #28]
  4200fa:	9303      	str	r3, [sp, #12]
  4200fc:	930b      	str	r3, [sp, #44]	@ 0x2c
  4200fe:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
  420102:	b11b      	cbz	r3, 42010c <_vfiprintf_r+0xe7c>
  420104:	2300      	movs	r3, #0
  420106:	960a      	str	r6, [sp, #40]	@ 0x28
  420108:	9304      	str	r3, [sp, #16]
  42010a:	e481      	b.n	41fa10 <_vfiprintf_r+0x780>
  42010c:	960a      	str	r6, [sp, #40]	@ 0x28
  42010e:	461e      	mov	r6, r3
  420110:	9304      	str	r3, [sp, #16]
  420112:	f7ff ba39 	b.w	41f588 <_vfiprintf_r+0x2f8>
  420116:	2101      	movs	r1, #1
  420118:	4662      	mov	r2, ip
  42011a:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  42011e:	f7ff ba7b 	b.w	41f618 <_vfiprintf_r+0x388>
  420122:	f343 12c0 	sbfx	r2, r3, #7, #1
  420126:	b25b      	sxtb	r3, r3
  420128:	4611      	mov	r1, r2
  42012a:	f7ff bb19 	b.w	41f760 <_vfiprintf_r+0x4d0>
  42012e:	4662      	mov	r2, ip
  420130:	2101      	movs	r1, #1
  420132:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
  420136:	f7ff ba4c 	b.w	41f5d2 <_vfiprintf_r+0x342>
  42013a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  42013c:	9a08      	ldr	r2, [sp, #32]
  42013e:	681b      	ldr	r3, [r3, #0]
  420140:	801a      	strh	r2, [r3, #0]
  420142:	e401      	b.n	41f948 <_vfiprintf_r+0x6b8>
  420144:	1c59      	adds	r1, r3, #1
  420146:	4650      	mov	r0, sl
  420148:	f001 f984 	bl	421454 <_malloc_r>
  42014c:	4604      	mov	r4, r0
  42014e:	2800      	cmp	r0, #0
  420150:	d046      	beq.n	4201e0 <_vfiprintf_r+0xf50>
  420152:	900b      	str	r0, [sp, #44]	@ 0x2c
  420154:	e7b8      	b.n	4200c8 <_vfiprintf_r+0xe38>
  420156:	bf00      	nop
  420158:	00434d70 	.word	0x00434d70
  42015c:	00434d84 	.word	0x00434d84
  420160:	cccccccd 	.word	0xcccccccd
  420164:	00434d98 	.word	0x00434d98
  420168:	0043c520 	.word	0x0043c520
  42016c:	6d88      	ldr	r0, [r1, #88]	@ 0x58
  42016e:	f000 fedf 	bl	420f30 <__retarget_lock_release_recursive>
  420172:	f7ff b99d 	b.w	41f4b0 <_vfiprintf_r+0x220>
  420176:	9b04      	ldr	r3, [sp, #16]
  420178:	9303      	str	r3, [sp, #12]
  42017a:	9307      	str	r3, [sp, #28]
  42017c:	e7bf      	b.n	4200fe <_vfiprintf_r+0xe6e>
  42017e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  420180:	9910      	ldr	r1, [sp, #64]	@ 0x40
  420182:	1ae4      	subs	r4, r4, r3
  420184:	461a      	mov	r2, r3
  420186:	4620      	mov	r0, r4
  420188:	f000 fe1e 	bl	420dc8 <strncpy>
  42018c:	f89a 2001 	ldrb.w	r2, [sl, #1]
  420190:	b10a      	cbz	r2, 420196 <_vfiprintf_r+0xf06>
  420192:	f10a 0a01 	add.w	sl, sl, #1
  420196:	f04f 0e00 	mov.w	lr, #0
  42019a:	e6fc      	b.n	41ff96 <_vfiprintf_r+0xd06>
  42019c:	9002      	str	r0, [sp, #8]
  42019e:	e41e      	b.n	41f9de <_vfiprintf_r+0x74e>
  4201a0:	4620      	mov	r0, r4
  4201a2:	f000 ff13 	bl	420fcc <strlen>
  4201a6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  4201aa:	950b      	str	r5, [sp, #44]	@ 0x2c
  4201ac:	9007      	str	r0, [sp, #28]
  4201ae:	9303      	str	r3, [sp, #12]
  4201b0:	e7a5      	b.n	4200fe <_vfiprintf_r+0xe6e>
  4201b2:	2300      	movs	r3, #0
  4201b4:	4604      	mov	r4, r0
  4201b6:	9304      	str	r3, [sp, #16]
  4201b8:	f7ff b8d3 	b.w	41f362 <_vfiprintf_r+0xd2>
  4201bc:	4686      	mov	lr, r0
  4201be:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 420248 <_vfiprintf_r+0xfb8>
  4201c2:	e536      	b.n	41fc32 <_vfiprintf_r+0x9a2>
  4201c4:	1c48      	adds	r0, r1, #1
  4201c6:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 420248 <_vfiprintf_r+0xfb8>
  4201ca:	e584      	b.n	41fcd6 <_vfiprintf_r+0xa46>
  4201cc:	aa1a      	add	r2, sp, #104	@ 0x68
  4201ce:	9905      	ldr	r1, [sp, #20]
  4201d0:	4650      	mov	r0, sl
  4201d2:	f7ff f821 	bl	41f218 <__sprint_r.part.0>
  4201d6:	2800      	cmp	r0, #0
  4201d8:	f43f a998 	beq.w	41f50c <_vfiprintf_r+0x27c>
  4201dc:	f7ff b9b6 	b.w	41f54c <_vfiprintf_r+0x2bc>
  4201e0:	9a05      	ldr	r2, [sp, #20]
  4201e2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4201e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  4201ea:	8193      	strh	r3, [r2, #12]
  4201ec:	f7ff b9b1 	b.w	41f552 <_vfiprintf_r+0x2c2>
  4201f0:	9b05      	ldr	r3, [sp, #20]
  4201f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  4201f4:	07db      	lsls	r3, r3, #31
  4201f6:	d407      	bmi.n	420208 <_vfiprintf_r+0xf78>
  4201f8:	9b05      	ldr	r3, [sp, #20]
  4201fa:	899b      	ldrh	r3, [r3, #12]
  4201fc:	059f      	lsls	r7, r3, #22
  4201fe:	d403      	bmi.n	420208 <_vfiprintf_r+0xf78>
  420200:	9b05      	ldr	r3, [sp, #20]
  420202:	6d98      	ldr	r0, [r3, #88]	@ 0x58
  420204:	f000 fe94 	bl	420f30 <__retarget_lock_release_recursive>
  420208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  42020c:	9308      	str	r3, [sp, #32]
  42020e:	f7ff b9a8 	b.w	41f562 <_vfiprintf_r+0x2d2>
  420212:	4608      	mov	r0, r1
  420214:	f8df 8034 	ldr.w	r8, [pc, #52]	@ 42024c <_vfiprintf_r+0xfbc>
  420218:	e448      	b.n	41faac <_vfiprintf_r+0x81c>
  42021a:	e9dd 4303 	ldrd	r4, r3, [sp, #12]
  42021e:	9307      	str	r3, [sp, #28]
  420220:	e74b      	b.n	4200ba <_vfiprintf_r+0xe2a>
  420222:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  420224:	7861      	ldrb	r1, [r4, #1]
  420226:	4604      	mov	r4, r0
  420228:	f853 2b04 	ldr.w	r2, [r3], #4
  42022c:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
  420230:	930a      	str	r3, [sp, #40]	@ 0x28
  420232:	9204      	str	r2, [sp, #16]
  420234:	f7ff b894 	b.w	41f360 <_vfiprintf_r+0xd0>
  420238:	9a05      	ldr	r2, [sp, #20]
  42023a:	8993      	ldrh	r3, [r2, #12]
  42023c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  420240:	8193      	strh	r3, [r2, #12]
  420242:	f7ff b97d 	b.w	41f540 <_vfiprintf_r+0x2b0>
  420246:	bf00      	nop
  420248:	0043c520 	.word	0x0043c520
  42024c:	0043c510 	.word	0x0043c510

00420250 <__sbprintf>:
  420250:	b5f0      	push	{r4, r5, r6, r7, lr}
  420252:	461f      	mov	r7, r3
  420254:	898b      	ldrh	r3, [r1, #12]
  420256:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
  42025a:	4615      	mov	r5, r2
  42025c:	f023 0302 	bic.w	r3, r3, #2
  420260:	4606      	mov	r6, r0
  420262:	a816      	add	r0, sp, #88	@ 0x58
  420264:	460c      	mov	r4, r1
  420266:	f8ad 300c 	strh.w	r3, [sp, #12]
  42026a:	ab1a      	add	r3, sp, #104	@ 0x68
  42026c:	9300      	str	r3, [sp, #0]
  42026e:	9304      	str	r3, [sp, #16]
  420270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  420274:	9302      	str	r3, [sp, #8]
  420276:	9305      	str	r3, [sp, #20]
  420278:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
  42027a:	9319      	str	r3, [sp, #100]	@ 0x64
  42027c:	89cb      	ldrh	r3, [r1, #14]
  42027e:	f8ad 300e 	strh.w	r3, [sp, #14]
  420282:	69cb      	ldr	r3, [r1, #28]
  420284:	9307      	str	r3, [sp, #28]
  420286:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
  420288:	9309      	str	r3, [sp, #36]	@ 0x24
  42028a:	2300      	movs	r3, #0
  42028c:	9306      	str	r3, [sp, #24]
  42028e:	f000 fe49 	bl	420f24 <__retarget_lock_init_recursive>
  420292:	462a      	mov	r2, r5
  420294:	463b      	mov	r3, r7
  420296:	4669      	mov	r1, sp
  420298:	4630      	mov	r0, r6
  42029a:	f7fe fff9 	bl	41f290 <_vfiprintf_r>
  42029e:	1e05      	subs	r5, r0, #0
  4202a0:	db07      	blt.n	4202b2 <__sbprintf+0x62>
  4202a2:	4669      	mov	r1, sp
  4202a4:	4630      	mov	r0, r6
  4202a6:	f000 f8af 	bl	420408 <_fflush_r>
  4202aa:	2800      	cmp	r0, #0
  4202ac:	bf18      	it	ne
  4202ae:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
  4202b2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4202b6:	065b      	lsls	r3, r3, #25
  4202b8:	d503      	bpl.n	4202c2 <__sbprintf+0x72>
  4202ba:	89a3      	ldrh	r3, [r4, #12]
  4202bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  4202c0:	81a3      	strh	r3, [r4, #12]
  4202c2:	9816      	ldr	r0, [sp, #88]	@ 0x58
  4202c4:	f000 fe30 	bl	420f28 <__retarget_lock_close_recursive>
  4202c8:	4628      	mov	r0, r5
  4202ca:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
  4202ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

004202d0 <__sflush_r>:
  4202d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4202d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4202d8:	0716      	lsls	r6, r2, #28
  4202da:	460c      	mov	r4, r1
  4202dc:	4680      	mov	r8, r0
  4202de:	d44e      	bmi.n	42037e <__sflush_r+0xae>
  4202e0:	6849      	ldr	r1, [r1, #4]
  4202e2:	f442 6300 	orr.w	r3, r2, #2048	@ 0x800
  4202e6:	2900      	cmp	r1, #0
  4202e8:	81a3      	strh	r3, [r4, #12]
  4202ea:	dd63      	ble.n	4203b4 <__sflush_r+0xe4>
  4202ec:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
  4202ee:	2d00      	cmp	r5, #0
  4202f0:	d042      	beq.n	420378 <__sflush_r+0xa8>
  4202f2:	2100      	movs	r1, #0
  4202f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
  4202f8:	f8d8 6000 	ldr.w	r6, [r8]
  4202fc:	f8c8 1000 	str.w	r1, [r8]
  420300:	69e1      	ldr	r1, [r4, #28]
  420302:	d164      	bne.n	4203ce <__sflush_r+0xfe>
  420304:	2301      	movs	r3, #1
  420306:	4640      	mov	r0, r8
  420308:	47a8      	blx	r5
  42030a:	1c45      	adds	r5, r0, #1
  42030c:	4602      	mov	r2, r0
  42030e:	d06d      	beq.n	4203ec <__sflush_r+0x11c>
  420310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  420314:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
  420316:	69e1      	ldr	r1, [r4, #28]
  420318:	0758      	lsls	r0, r3, #29
  42031a:	d505      	bpl.n	420328 <__sflush_r+0x58>
  42031c:	6863      	ldr	r3, [r4, #4]
  42031e:	1ad2      	subs	r2, r2, r3
  420320:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  420322:	b10b      	cbz	r3, 420328 <__sflush_r+0x58>
  420324:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
  420326:	1ad2      	subs	r2, r2, r3
  420328:	2300      	movs	r3, #0
  42032a:	4640      	mov	r0, r8
  42032c:	47a8      	blx	r5
  42032e:	1c43      	adds	r3, r0, #1
  420330:	d14f      	bne.n	4203d2 <__sflush_r+0x102>
  420332:	f8d8 1000 	ldr.w	r1, [r8]
  420336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42033a:	291d      	cmp	r1, #29
  42033c:	d840      	bhi.n	4203c0 <__sflush_r+0xf0>
  42033e:	4a31      	ldr	r2, [pc, #196]	@ (420404 <__sflush_r+0x134>)
  420340:	40ca      	lsrs	r2, r1
  420342:	07d7      	lsls	r7, r2, #31
  420344:	d53c      	bpl.n	4203c0 <__sflush_r+0xf0>
  420346:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
  42034a:	04dd      	lsls	r5, r3, #19
  42034c:	81a2      	strh	r2, [r4, #12]
  42034e:	f04f 0200 	mov.w	r2, #0
  420352:	6062      	str	r2, [r4, #4]
  420354:	6922      	ldr	r2, [r4, #16]
  420356:	6022      	str	r2, [r4, #0]
  420358:	d501      	bpl.n	42035e <__sflush_r+0x8e>
  42035a:	2900      	cmp	r1, #0
  42035c:	d044      	beq.n	4203e8 <__sflush_r+0x118>
  42035e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
  420360:	f8c8 6000 	str.w	r6, [r8]
  420364:	b141      	cbz	r1, 420378 <__sflush_r+0xa8>
  420366:	f104 0340 	add.w	r3, r4, #64	@ 0x40
  42036a:	4299      	cmp	r1, r3
  42036c:	d002      	beq.n	420374 <__sflush_r+0xa4>
  42036e:	4640      	mov	r0, r8
  420370:	f000 ff34 	bl	4211dc <_free_r>
  420374:	2300      	movs	r3, #0
  420376:	6323      	str	r3, [r4, #48]	@ 0x30
  420378:	2000      	movs	r0, #0
  42037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42037e:	690e      	ldr	r6, [r1, #16]
  420380:	2e00      	cmp	r6, #0
  420382:	d0f9      	beq.n	420378 <__sflush_r+0xa8>
  420384:	0792      	lsls	r2, r2, #30
  420386:	680d      	ldr	r5, [r1, #0]
  420388:	600e      	str	r6, [r1, #0]
  42038a:	bf0c      	ite	eq
  42038c:	694b      	ldreq	r3, [r1, #20]
  42038e:	2300      	movne	r3, #0
  420390:	1bad      	subs	r5, r5, r6
  420392:	608b      	str	r3, [r1, #8]
  420394:	e00b      	b.n	4203ae <__sflush_r+0xde>
  420396:	462b      	mov	r3, r5
  420398:	4632      	mov	r2, r6
  42039a:	69e1      	ldr	r1, [r4, #28]
  42039c:	4640      	mov	r0, r8
  42039e:	6a67      	ldr	r7, [r4, #36]	@ 0x24
  4203a0:	47b8      	blx	r7
  4203a2:	f1b0 0c00 	subs.w	ip, r0, #0
  4203a6:	eba5 050c 	sub.w	r5, r5, ip
  4203aa:	4466      	add	r6, ip
  4203ac:	dd06      	ble.n	4203bc <__sflush_r+0xec>
  4203ae:	2d00      	cmp	r5, #0
  4203b0:	dcf1      	bgt.n	420396 <__sflush_r+0xc6>
  4203b2:	e7e1      	b.n	420378 <__sflush_r+0xa8>
  4203b4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  4203b6:	2900      	cmp	r1, #0
  4203b8:	dc98      	bgt.n	4202ec <__sflush_r+0x1c>
  4203ba:	e7dd      	b.n	420378 <__sflush_r+0xa8>
  4203bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4203c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  4203c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  4203c8:	81a3      	strh	r3, [r4, #12]
  4203ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4203ce:	6d22      	ldr	r2, [r4, #80]	@ 0x50
  4203d0:	e7a2      	b.n	420318 <__sflush_r+0x48>
  4203d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4203d6:	2200      	movs	r2, #0
  4203d8:	6062      	str	r2, [r4, #4]
  4203da:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
  4203de:	04db      	lsls	r3, r3, #19
  4203e0:	81a2      	strh	r2, [r4, #12]
  4203e2:	6922      	ldr	r2, [r4, #16]
  4203e4:	6022      	str	r2, [r4, #0]
  4203e6:	d5ba      	bpl.n	42035e <__sflush_r+0x8e>
  4203e8:	6520      	str	r0, [r4, #80]	@ 0x50
  4203ea:	e7b8      	b.n	42035e <__sflush_r+0x8e>
  4203ec:	f8d8 3000 	ldr.w	r3, [r8]
  4203f0:	2b00      	cmp	r3, #0
  4203f2:	d08d      	beq.n	420310 <__sflush_r+0x40>
  4203f4:	2b1d      	cmp	r3, #29
  4203f6:	d001      	beq.n	4203fc <__sflush_r+0x12c>
  4203f8:	2b16      	cmp	r3, #22
  4203fa:	d1df      	bne.n	4203bc <__sflush_r+0xec>
  4203fc:	f8c8 6000 	str.w	r6, [r8]
  420400:	e7ba      	b.n	420378 <__sflush_r+0xa8>
  420402:	bf00      	nop
  420404:	20400001 	.word	0x20400001

00420408 <_fflush_r>:
  420408:	b538      	push	{r3, r4, r5, lr}
  42040a:	4605      	mov	r5, r0
  42040c:	460c      	mov	r4, r1
  42040e:	b108      	cbz	r0, 420414 <_fflush_r+0xc>
  420410:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  420412:	b303      	cbz	r3, 420456 <_fflush_r+0x4e>
  420414:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  420418:	b188      	cbz	r0, 42043e <_fflush_r+0x36>
  42041a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  42041c:	07db      	lsls	r3, r3, #31
  42041e:	d401      	bmi.n	420424 <_fflush_r+0x1c>
  420420:	0581      	lsls	r1, r0, #22
  420422:	d50f      	bpl.n	420444 <_fflush_r+0x3c>
  420424:	4628      	mov	r0, r5
  420426:	4621      	mov	r1, r4
  420428:	f7ff ff52 	bl	4202d0 <__sflush_r>
  42042c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  42042e:	4605      	mov	r5, r0
  420430:	07da      	lsls	r2, r3, #31
  420432:	d402      	bmi.n	42043a <_fflush_r+0x32>
  420434:	89a3      	ldrh	r3, [r4, #12]
  420436:	059b      	lsls	r3, r3, #22
  420438:	d508      	bpl.n	42044c <_fflush_r+0x44>
  42043a:	4628      	mov	r0, r5
  42043c:	bd38      	pop	{r3, r4, r5, pc}
  42043e:	4605      	mov	r5, r0
  420440:	4628      	mov	r0, r5
  420442:	bd38      	pop	{r3, r4, r5, pc}
  420444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  420446:	f000 fd71 	bl	420f2c <__retarget_lock_acquire_recursive>
  42044a:	e7eb      	b.n	420424 <_fflush_r+0x1c>
  42044c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  42044e:	f000 fd6f 	bl	420f30 <__retarget_lock_release_recursive>
  420452:	4628      	mov	r0, r5
  420454:	bd38      	pop	{r3, r4, r5, pc}
  420456:	f000 f8a5 	bl	4205a4 <__sinit>
  42045a:	e7db      	b.n	420414 <_fflush_r+0xc>

0042045c <stdio_exit_handler>:
  42045c:	4a02      	ldr	r2, [pc, #8]	@ (420468 <stdio_exit_handler+0xc>)
  42045e:	4903      	ldr	r1, [pc, #12]	@ (42046c <stdio_exit_handler+0x10>)
  420460:	4803      	ldr	r0, [pc, #12]	@ (420470 <stdio_exit_handler+0x14>)
  420462:	f000 ba81 	b.w	420968 <_fwalk_sglue>
  420466:	bf00      	nop
  420468:	2000a360 	.word	0x2000a360
  42046c:	00423619 	.word	0x00423619
  420470:	2000a4e0 	.word	0x2000a4e0

00420474 <cleanup_stdio>:
  420474:	4b0c      	ldr	r3, [pc, #48]	@ (4204a8 <cleanup_stdio+0x34>)
  420476:	6841      	ldr	r1, [r0, #4]
  420478:	4299      	cmp	r1, r3
  42047a:	b510      	push	{r4, lr}
  42047c:	4604      	mov	r4, r0
  42047e:	d001      	beq.n	420484 <cleanup_stdio+0x10>
  420480:	f003 f8ca 	bl	423618 <_fclose_r>
  420484:	68a1      	ldr	r1, [r4, #8]
  420486:	4b09      	ldr	r3, [pc, #36]	@ (4204ac <cleanup_stdio+0x38>)
  420488:	4299      	cmp	r1, r3
  42048a:	d002      	beq.n	420492 <cleanup_stdio+0x1e>
  42048c:	4620      	mov	r0, r4
  42048e:	f003 f8c3 	bl	423618 <_fclose_r>
  420492:	68e1      	ldr	r1, [r4, #12]
  420494:	4b06      	ldr	r3, [pc, #24]	@ (4204b0 <cleanup_stdio+0x3c>)
  420496:	4299      	cmp	r1, r3
  420498:	d004      	beq.n	4204a4 <cleanup_stdio+0x30>
  42049a:	4620      	mov	r0, r4
  42049c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4204a0:	f003 b8ba 	b.w	423618 <_fclose_r>
  4204a4:	bd10      	pop	{r4, pc}
  4204a6:	bf00      	nop
  4204a8:	2004e0d0 	.word	0x2004e0d0
  4204ac:	2004e138 	.word	0x2004e138
  4204b0:	2004e1a0 	.word	0x2004e1a0

004204b4 <global_stdio_init.part.0>:
  4204b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4204b8:	4a31      	ldr	r2, [pc, #196]	@ (420580 <global_stdio_init.part.0+0xcc>)
  4204ba:	2500      	movs	r5, #0
  4204bc:	4c31      	ldr	r4, [pc, #196]	@ (420584 <global_stdio_init.part.0+0xd0>)
  4204be:	2304      	movs	r3, #4
  4204c0:	4931      	ldr	r1, [pc, #196]	@ (420588 <global_stdio_init.part.0+0xd4>)
  4204c2:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 42059c <global_stdio_init.part.0+0xe8>
  4204c6:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
  4204ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 4205a0 <global_stdio_init.part.0+0xec>
  4204ce:	4f2f      	ldr	r7, [pc, #188]	@ (42058c <global_stdio_init.part.0+0xd8>)
  4204d0:	4e2f      	ldr	r6, [pc, #188]	@ (420590 <global_stdio_init.part.0+0xdc>)
  4204d2:	6011      	str	r1, [r2, #0]
  4204d4:	4629      	mov	r1, r5
  4204d6:	2208      	movs	r2, #8
  4204d8:	6025      	str	r5, [r4, #0]
  4204da:	6665      	str	r5, [r4, #100]	@ 0x64
  4204dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
  4204e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
  4204e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
  4204e8:	f000 fbdc 	bl	420ca4 <memset>
  4204ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
  4204f0:	62e6      	str	r6, [r4, #44]	@ 0x2c
  4204f2:	e9c4 4907 	strd	r4, r9, [r4, #28]
  4204f6:	e9c4 8709 	strd	r8, r7, [r4, #36]	@ 0x24
  4204fa:	f000 fd13 	bl	420f24 <__retarget_lock_init_recursive>
  4204fe:	4b25      	ldr	r3, [pc, #148]	@ (420594 <global_stdio_init.part.0+0xe0>)
  420500:	4629      	mov	r1, r5
  420502:	2208      	movs	r2, #8
  420504:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
  420508:	6763      	str	r3, [r4, #116]	@ 0x74
  42050a:	6725      	str	r5, [r4, #112]	@ 0x70
  42050c:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
  420510:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
  420514:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
  420518:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
  42051c:	f000 fbc2 	bl	420ca4 <memset>
  420520:	f104 0368 	add.w	r3, r4, #104	@ 0x68
  420524:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
  420528:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  42052c:	e9c4 9822 	strd	r9, r8, [r4, #136]	@ 0x88
  420530:	e9c4 7624 	strd	r7, r6, [r4, #144]	@ 0x90
  420534:	f000 fcf6 	bl	420f24 <__retarget_lock_init_recursive>
  420538:	4b17      	ldr	r3, [pc, #92]	@ (420598 <global_stdio_init.part.0+0xe4>)
  42053a:	4629      	mov	r1, r5
  42053c:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
  420540:	2208      	movs	r2, #8
  420542:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
  420546:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
  42054a:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
  42054e:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
  420552:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
  420556:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
  42055a:	f000 fba3 	bl	420ca4 <memset>
  42055e:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
  420562:	f504 7094 	add.w	r0, r4, #296	@ 0x128
  420566:	f8c4 90f0 	str.w	r9, [r4, #240]	@ 0xf0
  42056a:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
  42056e:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
  420572:	e9c4 873d 	strd	r8, r7, [r4, #244]	@ 0xf4
  420576:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  42057a:	f000 bcd3 	b.w	420f24 <__retarget_lock_init_recursive>
  42057e:	bf00      	nop
  420580:	2004e208 	.word	0x2004e208
  420584:	2004e0d0 	.word	0x2004e0d0
  420588:	0042045d 	.word	0x0042045d
  42058c:	00423aad 	.word	0x00423aad
  420590:	00423ad5 	.word	0x00423ad5
  420594:	00010009 	.word	0x00010009
  420598:	00020012 	.word	0x00020012
  42059c:	00423a49 	.word	0x00423a49
  4205a0:	00423a6d 	.word	0x00423a6d

004205a4 <__sinit>:
  4205a4:	b510      	push	{r4, lr}
  4205a6:	4604      	mov	r4, r0
  4205a8:	480a      	ldr	r0, [pc, #40]	@ (4205d4 <__sinit+0x30>)
  4205aa:	f000 fcbf 	bl	420f2c <__retarget_lock_acquire_recursive>
  4205ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  4205b0:	b923      	cbnz	r3, 4205bc <__sinit+0x18>
  4205b2:	4b09      	ldr	r3, [pc, #36]	@ (4205d8 <__sinit+0x34>)
  4205b4:	4a09      	ldr	r2, [pc, #36]	@ (4205dc <__sinit+0x38>)
  4205b6:	681b      	ldr	r3, [r3, #0]
  4205b8:	6362      	str	r2, [r4, #52]	@ 0x34
  4205ba:	b123      	cbz	r3, 4205c6 <__sinit+0x22>
  4205bc:	4805      	ldr	r0, [pc, #20]	@ (4205d4 <__sinit+0x30>)
  4205be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4205c2:	f000 bcb5 	b.w	420f30 <__retarget_lock_release_recursive>
  4205c6:	f7ff ff75 	bl	4204b4 <global_stdio_init.part.0>
  4205ca:	4802      	ldr	r0, [pc, #8]	@ (4205d4 <__sinit+0x30>)
  4205cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4205d0:	f000 bcae 	b.w	420f30 <__retarget_lock_release_recursive>
  4205d4:	2004e218 	.word	0x2004e218
  4205d8:	2004e208 	.word	0x2004e208
  4205dc:	00420475 	.word	0x00420475

004205e0 <__sfp_lock_acquire>:
  4205e0:	4801      	ldr	r0, [pc, #4]	@ (4205e8 <__sfp_lock_acquire+0x8>)
  4205e2:	f000 bca3 	b.w	420f2c <__retarget_lock_acquire_recursive>
  4205e6:	bf00      	nop
  4205e8:	2004e218 	.word	0x2004e218

004205ec <__sfp_lock_release>:
  4205ec:	4801      	ldr	r0, [pc, #4]	@ (4205f4 <__sfp_lock_release+0x8>)
  4205ee:	f000 bc9f 	b.w	420f30 <__retarget_lock_release_recursive>
  4205f2:	bf00      	nop
  4205f4:	2004e218 	.word	0x2004e218

004205f8 <vsnprintf>:
  4205f8:	b510      	push	{r4, lr}
  4205fa:	2900      	cmp	r1, #0
  4205fc:	4c19      	ldr	r4, [pc, #100]	@ (420664 <vsnprintf+0x6c>)
  4205fe:	b09a      	sub	sp, #104	@ 0x68
  420600:	6824      	ldr	r4, [r4, #0]
  420602:	db2a      	blt.n	42065a <vsnprintf+0x62>
  420604:	9000      	str	r0, [sp, #0]
  420606:	9004      	str	r0, [sp, #16]
  420608:	f44f 7002 	mov.w	r0, #520	@ 0x208
  42060c:	f8ad 000c 	strh.w	r0, [sp, #12]
  420610:	d013      	beq.n	42063a <vsnprintf+0x42>
  420612:	3901      	subs	r1, #1
  420614:	f64f 70ff 	movw	r0, #65535	@ 0xffff
  420618:	9102      	str	r1, [sp, #8]
  42061a:	9105      	str	r1, [sp, #20]
  42061c:	4669      	mov	r1, sp
  42061e:	f8ad 000e 	strh.w	r0, [sp, #14]
  420622:	4620      	mov	r0, r4
  420624:	f001 f9d8 	bl	4219d8 <_svfprintf_r>
  420628:	1c42      	adds	r2, r0, #1
  42062a:	da01      	bge.n	420630 <vsnprintf+0x38>
  42062c:	238b      	movs	r3, #139	@ 0x8b
  42062e:	6023      	str	r3, [r4, #0]
  420630:	9b00      	ldr	r3, [sp, #0]
  420632:	2200      	movs	r2, #0
  420634:	701a      	strb	r2, [r3, #0]
  420636:	b01a      	add	sp, #104	@ 0x68
  420638:	bd10      	pop	{r4, pc}
  42063a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
  42063e:	9102      	str	r1, [sp, #8]
  420640:	9105      	str	r1, [sp, #20]
  420642:	4669      	mov	r1, sp
  420644:	f8ad 000e 	strh.w	r0, [sp, #14]
  420648:	4620      	mov	r0, r4
  42064a:	f001 f9c5 	bl	4219d8 <_svfprintf_r>
  42064e:	1c43      	adds	r3, r0, #1
  420650:	da01      	bge.n	420656 <vsnprintf+0x5e>
  420652:	238b      	movs	r3, #139	@ 0x8b
  420654:	6023      	str	r3, [r4, #0]
  420656:	b01a      	add	sp, #104	@ 0x68
  420658:	bd10      	pop	{r4, pc}
  42065a:	238b      	movs	r3, #139	@ 0x8b
  42065c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  420660:	6023      	str	r3, [r4, #0]
  420662:	e7f8      	b.n	420656 <vsnprintf+0x5e>
  420664:	2000a4d8 	.word	0x2000a4d8

00420668 <__sfvwrite_r>:
  420668:	6893      	ldr	r3, [r2, #8]
  42066a:	2b00      	cmp	r3, #0
  42066c:	f000 80f9 	beq.w	420862 <__sfvwrite_r+0x1fa>
  420670:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
  420674:	f01c 0f08 	tst.w	ip, #8
  420678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42067c:	4690      	mov	r8, r2
  42067e:	b083      	sub	sp, #12
  420680:	4681      	mov	r9, r0
  420682:	460c      	mov	r4, r1
  420684:	d031      	beq.n	4206ea <__sfvwrite_r+0x82>
  420686:	690b      	ldr	r3, [r1, #16]
  420688:	b37b      	cbz	r3, 4206ea <__sfvwrite_r+0x82>
  42068a:	f01c 0702 	ands.w	r7, ip, #2
  42068e:	f8d8 6000 	ldr.w	r6, [r8]
  420692:	d038      	beq.n	420706 <__sfvwrite_r+0x9e>
  420694:	2700      	movs	r7, #0
  420696:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
  42069a:	69e1      	ldr	r1, [r4, #28]
  42069c:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 420964 <__sfvwrite_r+0x2fc>
  4206a0:	463d      	mov	r5, r7
  4206a2:	4555      	cmp	r5, sl
  4206a4:	462b      	mov	r3, r5
  4206a6:	463a      	mov	r2, r7
  4206a8:	4648      	mov	r0, r9
  4206aa:	bf28      	it	cs
  4206ac:	4653      	movcs	r3, sl
  4206ae:	b1c5      	cbz	r5, 4206e2 <__sfvwrite_r+0x7a>
  4206b0:	47d8      	blx	fp
  4206b2:	2800      	cmp	r0, #0
  4206b4:	f340 80cb 	ble.w	42084e <__sfvwrite_r+0x1e6>
  4206b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4206bc:	4407      	add	r7, r0
  4206be:	1a2d      	subs	r5, r5, r0
  4206c0:	1a1b      	subs	r3, r3, r0
  4206c2:	f8c8 3008 	str.w	r3, [r8, #8]
  4206c6:	2b00      	cmp	r3, #0
  4206c8:	f000 80b7 	beq.w	42083a <__sfvwrite_r+0x1d2>
  4206cc:	4555      	cmp	r5, sl
  4206ce:	462b      	mov	r3, r5
  4206d0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
  4206d4:	463a      	mov	r2, r7
  4206d6:	69e1      	ldr	r1, [r4, #28]
  4206d8:	bf28      	it	cs
  4206da:	4653      	movcs	r3, sl
  4206dc:	4648      	mov	r0, r9
  4206de:	2d00      	cmp	r5, #0
  4206e0:	d1e6      	bne.n	4206b0 <__sfvwrite_r+0x48>
  4206e2:	e9d6 7500 	ldrd	r7, r5, [r6]
  4206e6:	3608      	adds	r6, #8
  4206e8:	e7db      	b.n	4206a2 <__sfvwrite_r+0x3a>
  4206ea:	4621      	mov	r1, r4
  4206ec:	4648      	mov	r0, r9
  4206ee:	f000 f95d 	bl	4209ac <__swsetup_r>
  4206f2:	2800      	cmp	r0, #0
  4206f4:	f040 80b0 	bne.w	420858 <__sfvwrite_r+0x1f0>
  4206f8:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
  4206fc:	f8d8 6000 	ldr.w	r6, [r8]
  420700:	f01c 0702 	ands.w	r7, ip, #2
  420704:	d1c6      	bne.n	420694 <__sfvwrite_r+0x2c>
  420706:	f01c 0a01 	ands.w	sl, ip, #1
  42070a:	d164      	bne.n	4207d6 <__sfvwrite_r+0x16e>
  42070c:	6823      	ldr	r3, [r4, #0]
  42070e:	4657      	mov	r7, sl
  420710:	68a1      	ldr	r1, [r4, #8]
  420712:	4618      	mov	r0, r3
  420714:	468b      	mov	fp, r1
  420716:	2f00      	cmp	r7, #0
  420718:	d059      	beq.n	4207ce <__sfvwrite_r+0x166>
  42071a:	f41c 7f00 	tst.w	ip, #512	@ 0x200
  42071e:	f000 80b6 	beq.w	42088e <__sfvwrite_r+0x226>
  420722:	42b9      	cmp	r1, r7
  420724:	460a      	mov	r2, r1
  420726:	f200 80e2 	bhi.w	4208ee <__sfvwrite_r+0x286>
  42072a:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
  42072e:	d030      	beq.n	420792 <__sfvwrite_r+0x12a>
  420730:	6921      	ldr	r1, [r4, #16]
  420732:	1a5d      	subs	r5, r3, r1
  420734:	6963      	ldr	r3, [r4, #20]
  420736:	eb13 0343 	adds.w	r3, r3, r3, lsl #1
  42073a:	bf48      	it	mi
  42073c:	3301      	addmi	r3, #1
  42073e:	ea4f 0b63 	mov.w	fp, r3, asr #1
  420742:	1c6b      	adds	r3, r5, #1
  420744:	443b      	add	r3, r7
  420746:	465a      	mov	r2, fp
  420748:	455b      	cmp	r3, fp
  42074a:	d901      	bls.n	420750 <__sfvwrite_r+0xe8>
  42074c:	469b      	mov	fp, r3
  42074e:	461a      	mov	r2, r3
  420750:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
  420754:	f000 80ea 	beq.w	42092c <__sfvwrite_r+0x2c4>
  420758:	4611      	mov	r1, r2
  42075a:	4648      	mov	r0, r9
  42075c:	f000 fe7a 	bl	421454 <_malloc_r>
  420760:	2800      	cmp	r0, #0
  420762:	f000 80f9 	beq.w	420958 <__sfvwrite_r+0x2f0>
  420766:	462a      	mov	r2, r5
  420768:	6921      	ldr	r1, [r4, #16]
  42076a:	9000      	str	r0, [sp, #0]
  42076c:	f7ef ff26 	bl	4105bc <memcpy>
  420770:	89a2      	ldrh	r2, [r4, #12]
  420772:	9b00      	ldr	r3, [sp, #0]
  420774:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
  420778:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
  42077c:	81a2      	strh	r2, [r4, #12]
  42077e:	1958      	adds	r0, r3, r5
  420780:	f8c4 b014 	str.w	fp, [r4, #20]
  420784:	ebab 0505 	sub.w	r5, fp, r5
  420788:	463a      	mov	r2, r7
  42078a:	46bb      	mov	fp, r7
  42078c:	6123      	str	r3, [r4, #16]
  42078e:	60a5      	str	r5, [r4, #8]
  420790:	6020      	str	r0, [r4, #0]
  420792:	4651      	mov	r1, sl
  420794:	9200      	str	r2, [sp, #0]
  420796:	f000 fa05 	bl	420ba4 <memmove>
  42079a:	68a1      	ldr	r1, [r4, #8]
  42079c:	6823      	ldr	r3, [r4, #0]
  42079e:	463d      	mov	r5, r7
  4207a0:	9a00      	ldr	r2, [sp, #0]
  4207a2:	eba1 010b 	sub.w	r1, r1, fp
  4207a6:	2700      	movs	r7, #0
  4207a8:	441a      	add	r2, r3
  4207aa:	60a1      	str	r1, [r4, #8]
  4207ac:	6022      	str	r2, [r4, #0]
  4207ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4207b2:	44aa      	add	sl, r5
  4207b4:	1b5b      	subs	r3, r3, r5
  4207b6:	f8c8 3008 	str.w	r3, [r8, #8]
  4207ba:	2b00      	cmp	r3, #0
  4207bc:	d03d      	beq.n	42083a <__sfvwrite_r+0x1d2>
  4207be:	6823      	ldr	r3, [r4, #0]
  4207c0:	68a1      	ldr	r1, [r4, #8]
  4207c2:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
  4207c6:	4618      	mov	r0, r3
  4207c8:	468b      	mov	fp, r1
  4207ca:	2f00      	cmp	r7, #0
  4207cc:	d1a5      	bne.n	42071a <__sfvwrite_r+0xb2>
  4207ce:	e9d6 a700 	ldrd	sl, r7, [r6]
  4207d2:	3608      	adds	r6, #8
  4207d4:	e79d      	b.n	420712 <__sfvwrite_r+0xaa>
  4207d6:	4638      	mov	r0, r7
  4207d8:	46bb      	mov	fp, r7
  4207da:	463d      	mov	r5, r7
  4207dc:	9700      	str	r7, [sp, #0]
  4207de:	2d00      	cmp	r5, #0
  4207e0:	d041      	beq.n	420866 <__sfvwrite_r+0x1fe>
  4207e2:	2800      	cmp	r0, #0
  4207e4:	d046      	beq.n	420874 <__sfvwrite_r+0x20c>
  4207e6:	9a00      	ldr	r2, [sp, #0]
  4207e8:	68a1      	ldr	r1, [r4, #8]
  4207ea:	42aa      	cmp	r2, r5
  4207ec:	6963      	ldr	r3, [r4, #20]
  4207ee:	6820      	ldr	r0, [r4, #0]
  4207f0:	bf28      	it	cs
  4207f2:	462a      	movcs	r2, r5
  4207f4:	eb03 0a01 	add.w	sl, r3, r1
  4207f8:	6921      	ldr	r1, [r4, #16]
  4207fa:	4288      	cmp	r0, r1
  4207fc:	d902      	bls.n	420804 <__sfvwrite_r+0x19c>
  4207fe:	4552      	cmp	r2, sl
  420800:	f300 8085 	bgt.w	42090e <__sfvwrite_r+0x2a6>
  420804:	4293      	cmp	r3, r2
  420806:	dc75      	bgt.n	4208f4 <__sfvwrite_r+0x28c>
  420808:	465a      	mov	r2, fp
  42080a:	69e1      	ldr	r1, [r4, #28]
  42080c:	4648      	mov	r0, r9
  42080e:	6a67      	ldr	r7, [r4, #36]	@ 0x24
  420810:	47b8      	blx	r7
  420812:	f1b0 0a00 	subs.w	sl, r0, #0
  420816:	dd1a      	ble.n	42084e <__sfvwrite_r+0x1e6>
  420818:	9b00      	ldr	r3, [sp, #0]
  42081a:	ebb3 030a 	subs.w	r3, r3, sl
  42081e:	9300      	str	r3, [sp, #0]
  420820:	d00f      	beq.n	420842 <__sfvwrite_r+0x1da>
  420822:	2001      	movs	r0, #1
  420824:	f8d8 3008 	ldr.w	r3, [r8, #8]
  420828:	44d3      	add	fp, sl
  42082a:	eba5 050a 	sub.w	r5, r5, sl
  42082e:	eba3 030a 	sub.w	r3, r3, sl
  420832:	f8c8 3008 	str.w	r3, [r8, #8]
  420836:	2b00      	cmp	r3, #0
  420838:	d1d1      	bne.n	4207de <__sfvwrite_r+0x176>
  42083a:	2000      	movs	r0, #0
  42083c:	b003      	add	sp, #12
  42083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420842:	4621      	mov	r1, r4
  420844:	4648      	mov	r0, r9
  420846:	f7ff fddf 	bl	420408 <_fflush_r>
  42084a:	2800      	cmp	r0, #0
  42084c:	d0ea      	beq.n	420824 <__sfvwrite_r+0x1bc>
  42084e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  420852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  420856:	81a3      	strh	r3, [r4, #12]
  420858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  42085c:	b003      	add	sp, #12
  42085e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420862:	2000      	movs	r0, #0
  420864:	4770      	bx	lr
  420866:	6875      	ldr	r5, [r6, #4]
  420868:	4633      	mov	r3, r6
  42086a:	3608      	adds	r6, #8
  42086c:	2d00      	cmp	r5, #0
  42086e:	d0fa      	beq.n	420866 <__sfvwrite_r+0x1fe>
  420870:	f8d3 b000 	ldr.w	fp, [r3]
  420874:	462a      	mov	r2, r5
  420876:	210a      	movs	r1, #10
  420878:	4658      	mov	r0, fp
  42087a:	f000 fb5b 	bl	420f34 <memchr>
  42087e:	2800      	cmp	r0, #0
  420880:	d067      	beq.n	420952 <__sfvwrite_r+0x2ea>
  420882:	3001      	adds	r0, #1
  420884:	eba0 030b 	sub.w	r3, r0, fp
  420888:	461a      	mov	r2, r3
  42088a:	9300      	str	r3, [sp, #0]
  42088c:	e7ac      	b.n	4207e8 <__sfvwrite_r+0x180>
  42088e:	6922      	ldr	r2, [r4, #16]
  420890:	429a      	cmp	r2, r3
  420892:	d314      	bcc.n	4208be <__sfvwrite_r+0x256>
  420894:	6962      	ldr	r2, [r4, #20]
  420896:	42ba      	cmp	r2, r7
  420898:	d811      	bhi.n	4208be <__sfvwrite_r+0x256>
  42089a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
  42089e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  4208a0:	69e1      	ldr	r1, [r4, #28]
  4208a2:	4648      	mov	r0, r9
  4208a4:	42bb      	cmp	r3, r7
  4208a6:	bf28      	it	cs
  4208a8:	463b      	movcs	r3, r7
  4208aa:	fb93 f3f2 	sdiv	r3, r3, r2
  4208ae:	fb02 f303 	mul.w	r3, r2, r3
  4208b2:	4652      	mov	r2, sl
  4208b4:	47a8      	blx	r5
  4208b6:	1e05      	subs	r5, r0, #0
  4208b8:	ddc9      	ble.n	42084e <__sfvwrite_r+0x1e6>
  4208ba:	1b7f      	subs	r7, r7, r5
  4208bc:	e777      	b.n	4207ae <__sfvwrite_r+0x146>
  4208be:	42b9      	cmp	r1, r7
  4208c0:	4618      	mov	r0, r3
  4208c2:	bf28      	it	cs
  4208c4:	4639      	movcs	r1, r7
  4208c6:	460d      	mov	r5, r1
  4208c8:	4651      	mov	r1, sl
  4208ca:	462a      	mov	r2, r5
  4208cc:	f000 f96a 	bl	420ba4 <memmove>
  4208d0:	68a1      	ldr	r1, [r4, #8]
  4208d2:	6823      	ldr	r3, [r4, #0]
  4208d4:	1b49      	subs	r1, r1, r5
  4208d6:	442b      	add	r3, r5
  4208d8:	60a1      	str	r1, [r4, #8]
  4208da:	6023      	str	r3, [r4, #0]
  4208dc:	2900      	cmp	r1, #0
  4208de:	d1ec      	bne.n	4208ba <__sfvwrite_r+0x252>
  4208e0:	4621      	mov	r1, r4
  4208e2:	4648      	mov	r0, r9
  4208e4:	f7ff fd90 	bl	420408 <_fflush_r>
  4208e8:	2800      	cmp	r0, #0
  4208ea:	d0e6      	beq.n	4208ba <__sfvwrite_r+0x252>
  4208ec:	e7af      	b.n	42084e <__sfvwrite_r+0x1e6>
  4208ee:	46bb      	mov	fp, r7
  4208f0:	463a      	mov	r2, r7
  4208f2:	e74e      	b.n	420792 <__sfvwrite_r+0x12a>
  4208f4:	4659      	mov	r1, fp
  4208f6:	9201      	str	r2, [sp, #4]
  4208f8:	f000 f954 	bl	420ba4 <memmove>
  4208fc:	9a01      	ldr	r2, [sp, #4]
  4208fe:	68a3      	ldr	r3, [r4, #8]
  420900:	4692      	mov	sl, r2
  420902:	1a9b      	subs	r3, r3, r2
  420904:	60a3      	str	r3, [r4, #8]
  420906:	6823      	ldr	r3, [r4, #0]
  420908:	4413      	add	r3, r2
  42090a:	6023      	str	r3, [r4, #0]
  42090c:	e784      	b.n	420818 <__sfvwrite_r+0x1b0>
  42090e:	4659      	mov	r1, fp
  420910:	4652      	mov	r2, sl
  420912:	f000 f947 	bl	420ba4 <memmove>
  420916:	6823      	ldr	r3, [r4, #0]
  420918:	4621      	mov	r1, r4
  42091a:	4648      	mov	r0, r9
  42091c:	4453      	add	r3, sl
  42091e:	6023      	str	r3, [r4, #0]
  420920:	f7ff fd72 	bl	420408 <_fflush_r>
  420924:	2800      	cmp	r0, #0
  420926:	f43f af77 	beq.w	420818 <__sfvwrite_r+0x1b0>
  42092a:	e790      	b.n	42084e <__sfvwrite_r+0x1e6>
  42092c:	4648      	mov	r0, r9
  42092e:	f002 fed3 	bl	4236d8 <_realloc_r>
  420932:	4603      	mov	r3, r0
  420934:	2800      	cmp	r0, #0
  420936:	f47f af22 	bne.w	42077e <__sfvwrite_r+0x116>
  42093a:	6921      	ldr	r1, [r4, #16]
  42093c:	4648      	mov	r0, r9
  42093e:	f000 fc4d 	bl	4211dc <_free_r>
  420942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  420946:	220c      	movs	r2, #12
  420948:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  42094c:	f8c9 2000 	str.w	r2, [r9]
  420950:	e77f      	b.n	420852 <__sfvwrite_r+0x1ea>
  420952:	1c6a      	adds	r2, r5, #1
  420954:	9200      	str	r2, [sp, #0]
  420956:	e747      	b.n	4207e8 <__sfvwrite_r+0x180>
  420958:	220c      	movs	r2, #12
  42095a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42095e:	f8c9 2000 	str.w	r2, [r9]
  420962:	e776      	b.n	420852 <__sfvwrite_r+0x1ea>
  420964:	7ffffc00 	.word	0x7ffffc00

00420968 <_fwalk_sglue>:
  420968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  42096c:	f04f 0900 	mov.w	r9, #0
  420970:	4607      	mov	r7, r0
  420972:	4688      	mov	r8, r1
  420974:	4616      	mov	r6, r2
  420976:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
  42097a:	3d01      	subs	r5, #1
  42097c:	d40f      	bmi.n	42099e <_fwalk_sglue+0x36>
  42097e:	89a3      	ldrh	r3, [r4, #12]
  420980:	2b01      	cmp	r3, #1
  420982:	d908      	bls.n	420996 <_fwalk_sglue+0x2e>
  420984:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  420988:	4621      	mov	r1, r4
  42098a:	4638      	mov	r0, r7
  42098c:	3301      	adds	r3, #1
  42098e:	d002      	beq.n	420996 <_fwalk_sglue+0x2e>
  420990:	47c0      	blx	r8
  420992:	ea49 0900 	orr.w	r9, r9, r0
  420996:	3d01      	subs	r5, #1
  420998:	3468      	adds	r4, #104	@ 0x68
  42099a:	1c6b      	adds	r3, r5, #1
  42099c:	d1ef      	bne.n	42097e <_fwalk_sglue+0x16>
  42099e:	6836      	ldr	r6, [r6, #0]
  4209a0:	2e00      	cmp	r6, #0
  4209a2:	d1e8      	bne.n	420976 <_fwalk_sglue+0xe>
  4209a4:	4648      	mov	r0, r9
  4209a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4209aa:	bf00      	nop

004209ac <__swsetup_r>:
  4209ac:	b538      	push	{r3, r4, r5, lr}
  4209ae:	4b2f      	ldr	r3, [pc, #188]	@ (420a6c <__swsetup_r+0xc0>)
  4209b0:	4605      	mov	r5, r0
  4209b2:	460c      	mov	r4, r1
  4209b4:	681b      	ldr	r3, [r3, #0]
  4209b6:	b113      	cbz	r3, 4209be <__swsetup_r+0x12>
  4209b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  4209ba:	2a00      	cmp	r2, #0
  4209bc:	d045      	beq.n	420a4a <__swsetup_r+0x9e>
  4209be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4209c2:	0718      	lsls	r0, r3, #28
  4209c4:	d516      	bpl.n	4209f4 <__swsetup_r+0x48>
  4209c6:	6922      	ldr	r2, [r4, #16]
  4209c8:	b1f2      	cbz	r2, 420a08 <__swsetup_r+0x5c>
  4209ca:	f013 0101 	ands.w	r1, r3, #1
  4209ce:	d007      	beq.n	4209e0 <__swsetup_r+0x34>
  4209d0:	6961      	ldr	r1, [r4, #20]
  4209d2:	2000      	movs	r0, #0
  4209d4:	4249      	negs	r1, r1
  4209d6:	60a0      	str	r0, [r4, #8]
  4209d8:	61a1      	str	r1, [r4, #24]
  4209da:	b13a      	cbz	r2, 4209ec <__swsetup_r+0x40>
  4209dc:	2000      	movs	r0, #0
  4209de:	bd38      	pop	{r3, r4, r5, pc}
  4209e0:	0798      	lsls	r0, r3, #30
  4209e2:	bf58      	it	pl
  4209e4:	6961      	ldrpl	r1, [r4, #20]
  4209e6:	60a1      	str	r1, [r4, #8]
  4209e8:	2a00      	cmp	r2, #0
  4209ea:	d1f7      	bne.n	4209dc <__swsetup_r+0x30>
  4209ec:	0619      	lsls	r1, r3, #24
  4209ee:	d438      	bmi.n	420a62 <__swsetup_r+0xb6>
  4209f0:	4610      	mov	r0, r2
  4209f2:	bd38      	pop	{r3, r4, r5, pc}
  4209f4:	06d9      	lsls	r1, r3, #27
  4209f6:	d52c      	bpl.n	420a52 <__swsetup_r+0xa6>
  4209f8:	075a      	lsls	r2, r3, #29
  4209fa:	d412      	bmi.n	420a22 <__swsetup_r+0x76>
  4209fc:	6922      	ldr	r2, [r4, #16]
  4209fe:	f043 0308 	orr.w	r3, r3, #8
  420a02:	81a3      	strh	r3, [r4, #12]
  420a04:	2a00      	cmp	r2, #0
  420a06:	d1e0      	bne.n	4209ca <__swsetup_r+0x1e>
  420a08:	f403 7120 	and.w	r1, r3, #640	@ 0x280
  420a0c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
  420a10:	d0db      	beq.n	4209ca <__swsetup_r+0x1e>
  420a12:	4621      	mov	r1, r4
  420a14:	4628      	mov	r0, r5
  420a16:	f002 fd85 	bl	423524 <__smakebuf_r>
  420a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  420a1e:	6922      	ldr	r2, [r4, #16]
  420a20:	e7d3      	b.n	4209ca <__swsetup_r+0x1e>
  420a22:	6b21      	ldr	r1, [r4, #48]	@ 0x30
  420a24:	b151      	cbz	r1, 420a3c <__swsetup_r+0x90>
  420a26:	f104 0240 	add.w	r2, r4, #64	@ 0x40
  420a2a:	4291      	cmp	r1, r2
  420a2c:	d004      	beq.n	420a38 <__swsetup_r+0x8c>
  420a2e:	4628      	mov	r0, r5
  420a30:	f000 fbd4 	bl	4211dc <_free_r>
  420a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  420a38:	2200      	movs	r2, #0
  420a3a:	6322      	str	r2, [r4, #48]	@ 0x30
  420a3c:	2100      	movs	r1, #0
  420a3e:	6922      	ldr	r2, [r4, #16]
  420a40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
  420a44:	e9c4 2100 	strd	r2, r1, [r4]
  420a48:	e7d9      	b.n	4209fe <__swsetup_r+0x52>
  420a4a:	4618      	mov	r0, r3
  420a4c:	f7ff fdaa 	bl	4205a4 <__sinit>
  420a50:	e7b5      	b.n	4209be <__swsetup_r+0x12>
  420a52:	2209      	movs	r2, #9
  420a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  420a58:	602a      	str	r2, [r5, #0]
  420a5a:	81a3      	strh	r3, [r4, #12]
  420a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  420a60:	bd38      	pop	{r3, r4, r5, pc}
  420a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  420a66:	81a3      	strh	r3, [r4, #12]
  420a68:	e7f8      	b.n	420a5c <__swsetup_r+0xb0>
  420a6a:	bf00      	nop
  420a6c:	2000a4d8 	.word	0x2000a4d8

00420a70 <memcmp>:
  420a70:	2a03      	cmp	r2, #3
  420a72:	b430      	push	{r4, r5}
  420a74:	d915      	bls.n	420aa2 <memcmp+0x32>
  420a76:	ea41 0400 	orr.w	r4, r1, r0
  420a7a:	4684      	mov	ip, r0
  420a7c:	460b      	mov	r3, r1
  420a7e:	07a4      	lsls	r4, r4, #30
  420a80:	d004      	beq.n	420a8c <memcmp+0x1c>
  420a82:	1e54      	subs	r4, r2, #1
  420a84:	e00f      	b.n	420aa6 <memcmp+0x36>
  420a86:	3a04      	subs	r2, #4
  420a88:	2a03      	cmp	r2, #3
  420a8a:	d908      	bls.n	420a9e <memcmp+0x2e>
  420a8c:	4619      	mov	r1, r3
  420a8e:	4660      	mov	r0, ip
  420a90:	f853 4b04 	ldr.w	r4, [r3], #4
  420a94:	f85c 5b04 	ldr.w	r5, [ip], #4
  420a98:	42a5      	cmp	r5, r4
  420a9a:	d0f4      	beq.n	420a86 <memcmp+0x16>
  420a9c:	e7f1      	b.n	420a82 <memcmp+0x12>
  420a9e:	4660      	mov	r0, ip
  420aa0:	4619      	mov	r1, r3
  420aa2:	1e54      	subs	r4, r2, #1
  420aa4:	b17a      	cbz	r2, 420ac6 <memcmp+0x56>
  420aa6:	1e43      	subs	r3, r0, #1
  420aa8:	3901      	subs	r1, #1
  420aaa:	1902      	adds	r2, r0, r4
  420aac:	e001      	b.n	420ab2 <memcmp+0x42>
  420aae:	429a      	cmp	r2, r3
  420ab0:	d009      	beq.n	420ac6 <memcmp+0x56>
  420ab2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  420ab6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  420aba:	4560      	cmp	r0, ip
  420abc:	d0f7      	beq.n	420aae <memcmp+0x3e>
  420abe:	eba0 000c 	sub.w	r0, r0, ip
  420ac2:	bc30      	pop	{r4, r5}
  420ac4:	4770      	bx	lr
  420ac6:	2000      	movs	r0, #0
  420ac8:	bc30      	pop	{r4, r5}
  420aca:	4770      	bx	lr

00420acc <__fputwc>:
  420acc:	b570      	push	{r4, r5, r6, lr}
  420ace:	b082      	sub	sp, #8
  420ad0:	4606      	mov	r6, r0
  420ad2:	460d      	mov	r5, r1
  420ad4:	4614      	mov	r4, r2
  420ad6:	f000 f9d5 	bl	420e84 <__locale_mb_cur_max>
  420ada:	2801      	cmp	r0, #1
  420adc:	d102      	bne.n	420ae4 <__fputwc+0x18>
  420ade:	1e6b      	subs	r3, r5, #1
  420ae0:	2bfe      	cmp	r3, #254	@ 0xfe
  420ae2:	d926      	bls.n	420b32 <__fputwc+0x66>
  420ae4:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
  420ae8:	462a      	mov	r2, r5
  420aea:	a901      	add	r1, sp, #4
  420aec:	4630      	mov	r0, r6
  420aee:	f000 fa9b 	bl	421028 <_wcrtomb_r>
  420af2:	1c43      	adds	r3, r0, #1
  420af4:	d020      	beq.n	420b38 <__fputwc+0x6c>
  420af6:	b178      	cbz	r0, 420b18 <__fputwc+0x4c>
  420af8:	68a3      	ldr	r3, [r4, #8]
  420afa:	f89d 1004 	ldrb.w	r1, [sp, #4]
  420afe:	3b01      	subs	r3, #1
  420b00:	2b00      	cmp	r3, #0
  420b02:	60a3      	str	r3, [r4, #8]
  420b04:	da04      	bge.n	420b10 <__fputwc+0x44>
  420b06:	69a2      	ldr	r2, [r4, #24]
  420b08:	4293      	cmp	r3, r2
  420b0a:	db08      	blt.n	420b1e <__fputwc+0x52>
  420b0c:	290a      	cmp	r1, #10
  420b0e:	d006      	beq.n	420b1e <__fputwc+0x52>
  420b10:	6823      	ldr	r3, [r4, #0]
  420b12:	1c5a      	adds	r2, r3, #1
  420b14:	6022      	str	r2, [r4, #0]
  420b16:	7019      	strb	r1, [r3, #0]
  420b18:	4628      	mov	r0, r5
  420b1a:	b002      	add	sp, #8
  420b1c:	bd70      	pop	{r4, r5, r6, pc}
  420b1e:	4622      	mov	r2, r4
  420b20:	4630      	mov	r0, r6
  420b22:	f002 ffe9 	bl	423af8 <__swbuf_r>
  420b26:	3001      	adds	r0, #1
  420b28:	d1f6      	bne.n	420b18 <__fputwc+0x4c>
  420b2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  420b2e:	b002      	add	sp, #8
  420b30:	bd70      	pop	{r4, r5, r6, pc}
  420b32:	f88d 5004 	strb.w	r5, [sp, #4]
  420b36:	e7df      	b.n	420af8 <__fputwc+0x2c>
  420b38:	89a3      	ldrh	r3, [r4, #12]
  420b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  420b3e:	81a3      	strh	r3, [r4, #12]
  420b40:	e7f3      	b.n	420b2a <__fputwc+0x5e>
  420b42:	bf00      	nop

00420b44 <_fputwc_r>:
  420b44:	b530      	push	{r4, r5, lr}
  420b46:	4614      	mov	r4, r2
  420b48:	6e52      	ldr	r2, [r2, #100]	@ 0x64
  420b4a:	4605      	mov	r5, r0
  420b4c:	b083      	sub	sp, #12
  420b4e:	07d0      	lsls	r0, r2, #31
  420b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  420b54:	d401      	bmi.n	420b5a <_fputwc_r+0x16>
  420b56:	059a      	lsls	r2, r3, #22
  420b58:	d51c      	bpl.n	420b94 <_fputwc_r+0x50>
  420b5a:	0498      	lsls	r0, r3, #18
  420b5c:	d406      	bmi.n	420b6c <_fputwc_r+0x28>
  420b5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
  420b60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
  420b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
  420b68:	81a3      	strh	r3, [r4, #12]
  420b6a:	6662      	str	r2, [r4, #100]	@ 0x64
  420b6c:	4622      	mov	r2, r4
  420b6e:	4628      	mov	r0, r5
  420b70:	f7ff ffac 	bl	420acc <__fputwc>
  420b74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  420b76:	4605      	mov	r5, r0
  420b78:	07da      	lsls	r2, r3, #31
  420b7a:	d402      	bmi.n	420b82 <_fputwc_r+0x3e>
  420b7c:	89a3      	ldrh	r3, [r4, #12]
  420b7e:	059b      	lsls	r3, r3, #22
  420b80:	d502      	bpl.n	420b88 <_fputwc_r+0x44>
  420b82:	4628      	mov	r0, r5
  420b84:	b003      	add	sp, #12
  420b86:	bd30      	pop	{r4, r5, pc}
  420b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  420b8a:	f000 f9d1 	bl	420f30 <__retarget_lock_release_recursive>
  420b8e:	4628      	mov	r0, r5
  420b90:	b003      	add	sp, #12
  420b92:	bd30      	pop	{r4, r5, pc}
  420b94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  420b96:	9101      	str	r1, [sp, #4]
  420b98:	f000 f9c8 	bl	420f2c <__retarget_lock_acquire_recursive>
  420b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  420ba0:	9901      	ldr	r1, [sp, #4]
  420ba2:	e7da      	b.n	420b5a <_fputwc_r+0x16>

00420ba4 <memmove>:
  420ba4:	4288      	cmp	r0, r1
  420ba6:	d90e      	bls.n	420bc6 <memmove+0x22>
  420ba8:	188b      	adds	r3, r1, r2
  420baa:	4283      	cmp	r3, r0
  420bac:	d90b      	bls.n	420bc6 <memmove+0x22>
  420bae:	eb00 0c02 	add.w	ip, r0, r2
  420bb2:	2a00      	cmp	r2, #0
  420bb4:	d06e      	beq.n	420c94 <memmove+0xf0>
  420bb6:	4662      	mov	r2, ip
  420bb8:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
  420bbc:	4299      	cmp	r1, r3
  420bbe:	f802 cd01 	strb.w	ip, [r2, #-1]!
  420bc2:	d1f9      	bne.n	420bb8 <memmove+0x14>
  420bc4:	4770      	bx	lr
  420bc6:	2a0f      	cmp	r2, #15
  420bc8:	d80f      	bhi.n	420bea <memmove+0x46>
  420bca:	4603      	mov	r3, r0
  420bcc:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
  420bd0:	2a00      	cmp	r2, #0
  420bd2:	d05f      	beq.n	420c94 <memmove+0xf0>
  420bd4:	f10c 0c01 	add.w	ip, ip, #1
  420bd8:	3b01      	subs	r3, #1
  420bda:	448c      	add	ip, r1
  420bdc:	f811 2b01 	ldrb.w	r2, [r1], #1
  420be0:	4561      	cmp	r1, ip
  420be2:	f803 2f01 	strb.w	r2, [r3, #1]!
  420be6:	d1f9      	bne.n	420bdc <memmove+0x38>
  420be8:	4770      	bx	lr
  420bea:	ea40 0301 	orr.w	r3, r0, r1
  420bee:	079b      	lsls	r3, r3, #30
  420bf0:	d151      	bne.n	420c96 <memmove+0xf2>
  420bf2:	f1a2 0310 	sub.w	r3, r2, #16
  420bf6:	f101 0c20 	add.w	ip, r1, #32
  420bfa:	b570      	push	{r4, r5, r6, lr}
  420bfc:	f023 050f 	bic.w	r5, r3, #15
  420c00:	f101 0e10 	add.w	lr, r1, #16
  420c04:	f100 0410 	add.w	r4, r0, #16
  420c08:	091b      	lsrs	r3, r3, #4
  420c0a:	44ac      	add	ip, r5
  420c0c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
  420c10:	f10e 0e10 	add.w	lr, lr, #16
  420c14:	3410      	adds	r4, #16
  420c16:	f844 5c20 	str.w	r5, [r4, #-32]
  420c1a:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
  420c1e:	f844 5c1c 	str.w	r5, [r4, #-28]
  420c22:	f85e 5c18 	ldr.w	r5, [lr, #-24]
  420c26:	f844 5c18 	str.w	r5, [r4, #-24]
  420c2a:	f85e 5c14 	ldr.w	r5, [lr, #-20]
  420c2e:	45e6      	cmp	lr, ip
  420c30:	f844 5c14 	str.w	r5, [r4, #-20]
  420c34:	d1ea      	bne.n	420c0c <memmove+0x68>
  420c36:	3301      	adds	r3, #1
  420c38:	f012 0f0c 	tst.w	r2, #12
  420c3c:	f002 0c0f 	and.w	ip, r2, #15
  420c40:	eb01 1103 	add.w	r1, r1, r3, lsl #4
  420c44:	eb00 1303 	add.w	r3, r0, r3, lsl #4
  420c48:	d029      	beq.n	420c9e <memmove+0xfa>
  420c4a:	f1ac 0c04 	sub.w	ip, ip, #4
  420c4e:	1f1c      	subs	r4, r3, #4
  420c50:	468e      	mov	lr, r1
  420c52:	f02c 0603 	bic.w	r6, ip, #3
  420c56:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
  420c5a:	441e      	add	r6, r3
  420c5c:	f85e 5b04 	ldr.w	r5, [lr], #4
  420c60:	f844 5f04 	str.w	r5, [r4, #4]!
  420c64:	42b4      	cmp	r4, r6
  420c66:	d1f9      	bne.n	420c5c <memmove+0xb8>
  420c68:	f10c 0401 	add.w	r4, ip, #1
  420c6c:	f002 0203 	and.w	r2, r2, #3
  420c70:	eb03 0384 	add.w	r3, r3, r4, lsl #2
  420c74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
  420c78:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
  420c7c:	b14a      	cbz	r2, 420c92 <memmove+0xee>
  420c7e:	f10c 0c01 	add.w	ip, ip, #1
  420c82:	3b01      	subs	r3, #1
  420c84:	448c      	add	ip, r1
  420c86:	f811 2b01 	ldrb.w	r2, [r1], #1
  420c8a:	4561      	cmp	r1, ip
  420c8c:	f803 2f01 	strb.w	r2, [r3, #1]!
  420c90:	d1f9      	bne.n	420c86 <memmove+0xe2>
  420c92:	bd70      	pop	{r4, r5, r6, pc}
  420c94:	4770      	bx	lr
  420c96:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
  420c9a:	4603      	mov	r3, r0
  420c9c:	e79a      	b.n	420bd4 <memmove+0x30>
  420c9e:	4662      	mov	r2, ip
  420ca0:	e7ea      	b.n	420c78 <memmove+0xd4>
  420ca2:	bf00      	nop

00420ca4 <memset>:
  420ca4:	b570      	push	{r4, r5, r6, lr}
  420ca6:	0786      	lsls	r6, r0, #30
  420ca8:	d047      	beq.n	420d3a <memset+0x96>
  420caa:	1e54      	subs	r4, r2, #1
  420cac:	2a00      	cmp	r2, #0
  420cae:	d03e      	beq.n	420d2e <memset+0x8a>
  420cb0:	b2ca      	uxtb	r2, r1
  420cb2:	4603      	mov	r3, r0
  420cb4:	e001      	b.n	420cba <memset+0x16>
  420cb6:	3c01      	subs	r4, #1
  420cb8:	d339      	bcc.n	420d2e <memset+0x8a>
  420cba:	f803 2b01 	strb.w	r2, [r3], #1
  420cbe:	079d      	lsls	r5, r3, #30
  420cc0:	d1f9      	bne.n	420cb6 <memset+0x12>
  420cc2:	2c03      	cmp	r4, #3
  420cc4:	d92c      	bls.n	420d20 <memset+0x7c>
  420cc6:	b2cd      	uxtb	r5, r1
  420cc8:	2c0f      	cmp	r4, #15
  420cca:	eb05 2505 	add.w	r5, r5, r5, lsl #8
  420cce:	eb05 4505 	add.w	r5, r5, r5, lsl #16
  420cd2:	d935      	bls.n	420d40 <memset+0x9c>
  420cd4:	f1a4 0c10 	sub.w	ip, r4, #16
  420cd8:	f103 0e10 	add.w	lr, r3, #16
  420cdc:	461a      	mov	r2, r3
  420cde:	f02c 060f 	bic.w	r6, ip, #15
  420ce2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  420ce6:	44b6      	add	lr, r6
  420ce8:	e9c2 5500 	strd	r5, r5, [r2]
  420cec:	e9c2 5502 	strd	r5, r5, [r2, #8]
  420cf0:	3210      	adds	r2, #16
  420cf2:	4572      	cmp	r2, lr
  420cf4:	d1f8      	bne.n	420ce8 <memset+0x44>
  420cf6:	f10c 0201 	add.w	r2, ip, #1
  420cfa:	f014 0f0c 	tst.w	r4, #12
  420cfe:	f004 0c0f 	and.w	ip, r4, #15
  420d02:	eb03 1202 	add.w	r2, r3, r2, lsl #4
  420d06:	d013      	beq.n	420d30 <memset+0x8c>
  420d08:	f1ac 0304 	sub.w	r3, ip, #4
  420d0c:	f023 0303 	bic.w	r3, r3, #3
  420d10:	3304      	adds	r3, #4
  420d12:	4413      	add	r3, r2
  420d14:	f842 5b04 	str.w	r5, [r2], #4
  420d18:	4293      	cmp	r3, r2
  420d1a:	d1fb      	bne.n	420d14 <memset+0x70>
  420d1c:	f00c 0403 	and.w	r4, ip, #3
  420d20:	b12c      	cbz	r4, 420d2e <memset+0x8a>
  420d22:	b2c9      	uxtb	r1, r1
  420d24:	441c      	add	r4, r3
  420d26:	f803 1b01 	strb.w	r1, [r3], #1
  420d2a:	42a3      	cmp	r3, r4
  420d2c:	d1fb      	bne.n	420d26 <memset+0x82>
  420d2e:	bd70      	pop	{r4, r5, r6, pc}
  420d30:	4664      	mov	r4, ip
  420d32:	4613      	mov	r3, r2
  420d34:	2c00      	cmp	r4, #0
  420d36:	d1f4      	bne.n	420d22 <memset+0x7e>
  420d38:	e7f9      	b.n	420d2e <memset+0x8a>
  420d3a:	4603      	mov	r3, r0
  420d3c:	4614      	mov	r4, r2
  420d3e:	e7c0      	b.n	420cc2 <memset+0x1e>
  420d40:	461a      	mov	r2, r3
  420d42:	46a4      	mov	ip, r4
  420d44:	e7e0      	b.n	420d08 <memset+0x64>
  420d46:	bf00      	nop

00420d48 <strncmp>:
  420d48:	b3ca      	cbz	r2, 420dbe <strncmp+0x76>
  420d4a:	4684      	mov	ip, r0
  420d4c:	460b      	mov	r3, r1
  420d4e:	b530      	push	{r4, r5, lr}
  420d50:	4604      	mov	r4, r0
  420d52:	4308      	orrs	r0, r1
  420d54:	0780      	lsls	r0, r0, #30
  420d56:	d019      	beq.n	420d8c <strncmp+0x44>
  420d58:	f89c 0000 	ldrb.w	r0, [ip]
  420d5c:	780c      	ldrb	r4, [r1, #0]
  420d5e:	42a0      	cmp	r0, r4
  420d60:	d112      	bne.n	420d88 <strncmp+0x40>
  420d62:	b350      	cbz	r0, 420dba <strncmp+0x72>
  420d64:	2a01      	cmp	r2, #1
  420d66:	d028      	beq.n	420dba <strncmp+0x72>
  420d68:	46e6      	mov	lr, ip
  420d6a:	e003      	b.n	420d74 <strncmp+0x2c>
  420d6c:	eb1c 0f03 	cmn.w	ip, r3
  420d70:	d023      	beq.n	420dba <strncmp+0x72>
  420d72:	b310      	cbz	r0, 420dba <strncmp+0x72>
  420d74:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  420d78:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  420d7c:	eba2 030e 	sub.w	r3, r2, lr
  420d80:	42a0      	cmp	r0, r4
  420d82:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  420d86:	d0f1      	beq.n	420d6c <strncmp+0x24>
  420d88:	1b00      	subs	r0, r0, r4
  420d8a:	bd30      	pop	{r4, r5, pc}
  420d8c:	2a03      	cmp	r2, #3
  420d8e:	d807      	bhi.n	420da0 <strncmp+0x58>
  420d90:	e7e2      	b.n	420d58 <strncmp+0x10>
  420d92:	3a04      	subs	r2, #4
  420d94:	d011      	beq.n	420dba <strncmp+0x72>
  420d96:	f01e 3f80 	tst.w	lr, #2155905152	@ 0x80808080
  420d9a:	d10e      	bne.n	420dba <strncmp+0x72>
  420d9c:	2a03      	cmp	r2, #3
  420d9e:	d910      	bls.n	420dc2 <strncmp+0x7a>
  420da0:	6820      	ldr	r0, [r4, #0]
  420da2:	4619      	mov	r1, r3
  420da4:	f853 5b04 	ldr.w	r5, [r3], #4
  420da8:	46a4      	mov	ip, r4
  420daa:	f1a0 3e01 	sub.w	lr, r0, #16843009	@ 0x1010101
  420dae:	3404      	adds	r4, #4
  420db0:	42a8      	cmp	r0, r5
  420db2:	ea2e 0e00 	bic.w	lr, lr, r0
  420db6:	d0ec      	beq.n	420d92 <strncmp+0x4a>
  420db8:	e7ce      	b.n	420d58 <strncmp+0x10>
  420dba:	2000      	movs	r0, #0
  420dbc:	bd30      	pop	{r4, r5, pc}
  420dbe:	4610      	mov	r0, r2
  420dc0:	4770      	bx	lr
  420dc2:	46a4      	mov	ip, r4
  420dc4:	4619      	mov	r1, r3
  420dc6:	e7c7      	b.n	420d58 <strncmp+0x10>

00420dc8 <strncpy>:
  420dc8:	ea40 0301 	orr.w	r3, r0, r1
  420dcc:	079b      	lsls	r3, r3, #30
  420dce:	b530      	push	{r4, r5, lr}
  420dd0:	d101      	bne.n	420dd6 <strncpy+0xe>
  420dd2:	2a03      	cmp	r2, #3
  420dd4:	d817      	bhi.n	420e06 <strncpy+0x3e>
  420dd6:	4684      	mov	ip, r0
  420dd8:	f101 3eff 	add.w	lr, r1, #4294967295	@ 0xffffffff
  420ddc:	e007      	b.n	420dee <strncpy+0x26>
  420dde:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
  420de2:	1e54      	subs	r4, r2, #1
  420de4:	f803 1b01 	strb.w	r1, [r3], #1
  420de8:	b129      	cbz	r1, 420df6 <strncpy+0x2e>
  420dea:	4622      	mov	r2, r4
  420dec:	469c      	mov	ip, r3
  420dee:	4663      	mov	r3, ip
  420df0:	2a00      	cmp	r2, #0
  420df2:	d1f4      	bne.n	420dde <strncpy+0x16>
  420df4:	bd30      	pop	{r4, r5, pc}
  420df6:	2c00      	cmp	r4, #0
  420df8:	d0fc      	beq.n	420df4 <strncpy+0x2c>
  420dfa:	4494      	add	ip, r2
  420dfc:	f803 1b01 	strb.w	r1, [r3], #1
  420e00:	4563      	cmp	r3, ip
  420e02:	d1fb      	bne.n	420dfc <strncpy+0x34>
  420e04:	bd30      	pop	{r4, r5, pc}
  420e06:	460c      	mov	r4, r1
  420e08:	4684      	mov	ip, r0
  420e0a:	6825      	ldr	r5, [r4, #0]
  420e0c:	4621      	mov	r1, r4
  420e0e:	3404      	adds	r4, #4
  420e10:	f1a5 3301 	sub.w	r3, r5, #16843009	@ 0x1010101
  420e14:	ea23 0305 	bic.w	r3, r3, r5
  420e18:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
  420e1c:	d1dc      	bne.n	420dd8 <strncpy+0x10>
  420e1e:	3a04      	subs	r2, #4
  420e20:	f84c 5b04 	str.w	r5, [ip], #4
  420e24:	2a03      	cmp	r2, #3
  420e26:	d8f0      	bhi.n	420e0a <strncpy+0x42>
  420e28:	4621      	mov	r1, r4
  420e2a:	e7d5      	b.n	420dd8 <strncpy+0x10>

00420e2c <raise>:
  420e2c:	b538      	push	{r3, r4, r5, lr}
  420e2e:	281f      	cmp	r0, #31
  420e30:	4b13      	ldr	r3, [pc, #76]	@ (420e80 <raise+0x54>)
  420e32:	681d      	ldr	r5, [r3, #0]
  420e34:	d81e      	bhi.n	420e74 <raise+0x48>
  420e36:	f8d5 2118 	ldr.w	r2, [r5, #280]	@ 0x118
  420e3a:	4604      	mov	r4, r0
  420e3c:	b162      	cbz	r2, 420e58 <raise+0x2c>
  420e3e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
  420e42:	b14b      	cbz	r3, 420e58 <raise+0x2c>
  420e44:	2b01      	cmp	r3, #1
  420e46:	d005      	beq.n	420e54 <raise+0x28>
  420e48:	1c59      	adds	r1, r3, #1
  420e4a:	d00f      	beq.n	420e6c <raise+0x40>
  420e4c:	2100      	movs	r1, #0
  420e4e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  420e52:	4798      	blx	r3
  420e54:	2000      	movs	r0, #0
  420e56:	bd38      	pop	{r3, r4, r5, pc}
  420e58:	4628      	mov	r0, r5
  420e5a:	f000 f833 	bl	420ec4 <_getpid_r>
  420e5e:	4622      	mov	r2, r4
  420e60:	4601      	mov	r1, r0
  420e62:	4628      	mov	r0, r5
  420e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  420e68:	f000 b816 	b.w	420e98 <_kill_r>
  420e6c:	2316      	movs	r3, #22
  420e6e:	2001      	movs	r0, #1
  420e70:	602b      	str	r3, [r5, #0]
  420e72:	bd38      	pop	{r3, r4, r5, pc}
  420e74:	2316      	movs	r3, #22
  420e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  420e7a:	602b      	str	r3, [r5, #0]
  420e7c:	bd38      	pop	{r3, r4, r5, pc}
  420e7e:	bf00      	nop
  420e80:	2000a4d8 	.word	0x2000a4d8

00420e84 <__locale_mb_cur_max>:
  420e84:	4b01      	ldr	r3, [pc, #4]	@ (420e8c <__locale_mb_cur_max+0x8>)
  420e86:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
  420e8a:	4770      	bx	lr
  420e8c:	2000a36c 	.word	0x2000a36c

00420e90 <_localeconv_r>:
  420e90:	4800      	ldr	r0, [pc, #0]	@ (420e94 <_localeconv_r+0x4>)
  420e92:	4770      	bx	lr
  420e94:	2000a45c 	.word	0x2000a45c

00420e98 <_kill_r>:
  420e98:	b570      	push	{r4, r5, r6, lr}
  420e9a:	460c      	mov	r4, r1
  420e9c:	4603      	mov	r3, r0
  420e9e:	4d08      	ldr	r5, [pc, #32]	@ (420ec0 <_kill_r+0x28>)
  420ea0:	2600      	movs	r6, #0
  420ea2:	4620      	mov	r0, r4
  420ea4:	4611      	mov	r1, r2
  420ea6:	461c      	mov	r4, r3
  420ea8:	602e      	str	r6, [r5, #0]
  420eaa:	f004 fd89 	bl	4259c0 <_kill>
  420eae:	1c43      	adds	r3, r0, #1
  420eb0:	d000      	beq.n	420eb4 <_kill_r+0x1c>
  420eb2:	bd70      	pop	{r4, r5, r6, pc}
  420eb4:	682b      	ldr	r3, [r5, #0]
  420eb6:	2b00      	cmp	r3, #0
  420eb8:	d0fb      	beq.n	420eb2 <_kill_r+0x1a>
  420eba:	6023      	str	r3, [r4, #0]
  420ebc:	bd70      	pop	{r4, r5, r6, pc}
  420ebe:	bf00      	nop
  420ec0:	2004e3e4 	.word	0x2004e3e4

00420ec4 <_getpid_r>:
  420ec4:	f004 bd6c 	b.w	4259a0 <_getpid>

00420ec8 <__errno>:
  420ec8:	4b01      	ldr	r3, [pc, #4]	@ (420ed0 <__errno+0x8>)
  420eca:	6818      	ldr	r0, [r3, #0]
  420ecc:	4770      	bx	lr
  420ece:	bf00      	nop
  420ed0:	2000a4d8 	.word	0x2000a4d8

00420ed4 <__libc_init_array>:
  420ed4:	4b0f      	ldr	r3, [pc, #60]	@ (420f14 <__libc_init_array+0x40>)
  420ed6:	b570      	push	{r4, r5, r6, lr}
  420ed8:	4d0f      	ldr	r5, [pc, #60]	@ (420f18 <__libc_init_array+0x44>)
  420eda:	42ab      	cmp	r3, r5
  420edc:	eba3 0605 	sub.w	r6, r3, r5
  420ee0:	d007      	beq.n	420ef2 <__libc_init_array+0x1e>
  420ee2:	10b6      	asrs	r6, r6, #2
  420ee4:	2400      	movs	r4, #0
  420ee6:	3401      	adds	r4, #1
  420ee8:	f855 3b04 	ldr.w	r3, [r5], #4
  420eec:	4798      	blx	r3
  420eee:	42a6      	cmp	r6, r4
  420ef0:	d8f9      	bhi.n	420ee6 <__libc_init_array+0x12>
  420ef2:	4d0a      	ldr	r5, [pc, #40]	@ (420f1c <__libc_init_array+0x48>)
  420ef4:	f7ef ff10 	bl	410d18 <_init>
  420ef8:	4b09      	ldr	r3, [pc, #36]	@ (420f20 <__libc_init_array+0x4c>)
  420efa:	1b5e      	subs	r6, r3, r5
  420efc:	42ab      	cmp	r3, r5
  420efe:	ea4f 06a6 	mov.w	r6, r6, asr #2
  420f02:	d006      	beq.n	420f12 <__libc_init_array+0x3e>
  420f04:	2400      	movs	r4, #0
  420f06:	3401      	adds	r4, #1
  420f08:	f855 3b04 	ldr.w	r3, [r5], #4
  420f0c:	4798      	blx	r3
  420f0e:	42a6      	cmp	r6, r4
  420f10:	d8f9      	bhi.n	420f06 <__libc_init_array+0x32>
  420f12:	bd70      	pop	{r4, r5, r6, pc}
  420f14:	0043d948 	.word	0x0043d948
  420f18:	0043d948 	.word	0x0043d948
  420f1c:	0043d948 	.word	0x0043d948
  420f20:	0043d954 	.word	0x0043d954

00420f24 <__retarget_lock_init_recursive>:
  420f24:	4770      	bx	lr
  420f26:	bf00      	nop

00420f28 <__retarget_lock_close_recursive>:
  420f28:	4770      	bx	lr
  420f2a:	bf00      	nop

00420f2c <__retarget_lock_acquire_recursive>:
  420f2c:	4770      	bx	lr
  420f2e:	bf00      	nop

00420f30 <__retarget_lock_release_recursive>:
  420f30:	4770      	bx	lr
  420f32:	bf00      	nop

00420f34 <memchr>:
  420f34:	fa5f fc81 	uxtb.w	ip, r1
  420f38:	0781      	lsls	r1, r0, #30
  420f3a:	d044      	beq.n	420fc6 <memchr+0x92>
  420f3c:	4603      	mov	r3, r0
  420f3e:	1e51      	subs	r1, r2, #1
  420f40:	b922      	cbnz	r2, 420f4c <memchr+0x18>
  420f42:	e009      	b.n	420f58 <memchr+0x24>
  420f44:	079a      	lsls	r2, r3, #30
  420f46:	d009      	beq.n	420f5c <memchr+0x28>
  420f48:	3901      	subs	r1, #1
  420f4a:	d305      	bcc.n	420f58 <memchr+0x24>
  420f4c:	4618      	mov	r0, r3
  420f4e:	3301      	adds	r3, #1
  420f50:	7802      	ldrb	r2, [r0, #0]
  420f52:	4562      	cmp	r2, ip
  420f54:	d1f6      	bne.n	420f44 <memchr+0x10>
  420f56:	4770      	bx	lr
  420f58:	2000      	movs	r0, #0
  420f5a:	4770      	bx	lr
  420f5c:	4618      	mov	r0, r3
  420f5e:	2903      	cmp	r1, #3
  420f60:	d80c      	bhi.n	420f7c <memchr+0x48>
  420f62:	2900      	cmp	r1, #0
  420f64:	d0f8      	beq.n	420f58 <memchr+0x24>
  420f66:	4603      	mov	r3, r0
  420f68:	4401      	add	r1, r0
  420f6a:	e001      	b.n	420f70 <memchr+0x3c>
  420f6c:	428b      	cmp	r3, r1
  420f6e:	d0f3      	beq.n	420f58 <memchr+0x24>
  420f70:	4618      	mov	r0, r3
  420f72:	f813 2b01 	ldrb.w	r2, [r3], #1
  420f76:	4562      	cmp	r2, ip
  420f78:	d1f8      	bne.n	420f6c <memchr+0x38>
  420f7a:	4770      	bx	lr
  420f7c:	b510      	push	{r4, lr}
  420f7e:	eb0c 240c 	add.w	r4, ip, ip, lsl #8
  420f82:	4602      	mov	r2, r0
  420f84:	eb04 4404 	add.w	r4, r4, r4, lsl #16
  420f88:	e002      	b.n	420f90 <memchr+0x5c>
  420f8a:	3904      	subs	r1, #4
  420f8c:	2903      	cmp	r1, #3
  420f8e:	d915      	bls.n	420fbc <memchr+0x88>
  420f90:	4610      	mov	r0, r2
  420f92:	f852 3b04 	ldr.w	r3, [r2], #4
  420f96:	4063      	eors	r3, r4
  420f98:	f1a3 3e01 	sub.w	lr, r3, #16843009	@ 0x1010101
  420f9c:	ea2e 0303 	bic.w	r3, lr, r3
  420fa0:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
  420fa4:	d0f1      	beq.n	420f8a <memchr+0x56>
  420fa6:	4603      	mov	r3, r0
  420fa8:	4401      	add	r1, r0
  420faa:	e001      	b.n	420fb0 <memchr+0x7c>
  420fac:	428b      	cmp	r3, r1
  420fae:	d008      	beq.n	420fc2 <memchr+0x8e>
  420fb0:	4618      	mov	r0, r3
  420fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
  420fb6:	4562      	cmp	r2, ip
  420fb8:	d1f8      	bne.n	420fac <memchr+0x78>
  420fba:	bd10      	pop	{r4, pc}
  420fbc:	4610      	mov	r0, r2
  420fbe:	2900      	cmp	r1, #0
  420fc0:	d1f1      	bne.n	420fa6 <memchr+0x72>
  420fc2:	2000      	movs	r0, #0
  420fc4:	bd10      	pop	{r4, pc}
  420fc6:	4611      	mov	r1, r2
  420fc8:	e7c9      	b.n	420f5e <memchr+0x2a>
  420fca:	bf00      	nop

00420fcc <strlen>:
  420fcc:	f020 0103 	bic.w	r1, r0, #3
  420fd0:	f010 0003 	ands.w	r0, r0, #3
  420fd4:	f1c0 0000 	rsb	r0, r0, #0
  420fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  420fdc:	f100 0c04 	add.w	ip, r0, #4
  420fe0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  420fe4:	f06f 0200 	mvn.w	r2, #0
  420fe8:	bf1c      	itt	ne
  420fea:	fa22 f20c 	lsrne.w	r2, r2, ip
  420fee:	4313      	orrne	r3, r2
  420ff0:	f04f 0c01 	mov.w	ip, #1
  420ff4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  420ff8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  420ffc:	eba3 020c 	sub.w	r2, r3, ip
  421000:	ea22 0203 	bic.w	r2, r2, r3
  421004:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  421008:	bf04      	itt	eq
  42100a:	f851 3b04 	ldreq.w	r3, [r1], #4
  42100e:	3004      	addeq	r0, #4
  421010:	d0f4      	beq.n	420ffc <strlen+0x30>
  421012:	f1c2 0100 	rsb	r1, r2, #0
  421016:	ea02 0201 	and.w	r2, r2, r1
  42101a:	fab2 f282 	clz	r2, r2
  42101e:	f1c2 021f 	rsb	r2, r2, #31
  421022:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  421026:	4770      	bx	lr

00421028 <_wcrtomb_r>:
  421028:	b570      	push	{r4, r5, r6, lr}
  42102a:	4605      	mov	r5, r0
  42102c:	b084      	sub	sp, #16
  42102e:	b15b      	cbz	r3, 421048 <_wcrtomb_r+0x20>
  421030:	461c      	mov	r4, r3
  421032:	4b0f      	ldr	r3, [pc, #60]	@ (421070 <_wcrtomb_r+0x48>)
  421034:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
  421038:	4623      	mov	r3, r4
  42103a:	b169      	cbz	r1, 421058 <_wcrtomb_r+0x30>
  42103c:	4628      	mov	r0, r5
  42103e:	47b0      	blx	r6
  421040:	1c43      	adds	r3, r0, #1
  421042:	d00f      	beq.n	421064 <_wcrtomb_r+0x3c>
  421044:	b004      	add	sp, #16
  421046:	bd70      	pop	{r4, r5, r6, pc}
  421048:	4b09      	ldr	r3, [pc, #36]	@ (421070 <_wcrtomb_r+0x48>)
  42104a:	f500 7482 	add.w	r4, r0, #260	@ 0x104
  42104e:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
  421052:	4623      	mov	r3, r4
  421054:	2900      	cmp	r1, #0
  421056:	d1f1      	bne.n	42103c <_wcrtomb_r+0x14>
  421058:	460a      	mov	r2, r1
  42105a:	4628      	mov	r0, r5
  42105c:	a901      	add	r1, sp, #4
  42105e:	47b0      	blx	r6
  421060:	1c43      	adds	r3, r0, #1
  421062:	d1ef      	bne.n	421044 <_wcrtomb_r+0x1c>
  421064:	2200      	movs	r2, #0
  421066:	238a      	movs	r3, #138	@ 0x8a
  421068:	6022      	str	r2, [r4, #0]
  42106a:	602b      	str	r3, [r5, #0]
  42106c:	b004      	add	sp, #16
  42106e:	bd70      	pop	{r4, r5, r6, pc}
  421070:	2000a36c 	.word	0x2000a36c

00421074 <_wcsrtombs_r>:
  421074:	b510      	push	{r4, lr}
  421076:	b082      	sub	sp, #8
  421078:	9c04      	ldr	r4, [sp, #16]
  42107a:	9300      	str	r3, [sp, #0]
  42107c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  421080:	9401      	str	r4, [sp, #4]
  421082:	f002 ff25 	bl	423ed0 <_wcsnrtombs_r>
  421086:	b002      	add	sp, #8
  421088:	bd10      	pop	{r4, pc}
  42108a:	bf00      	nop

0042108c <__register_exitproc>:
  42108c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  421090:	4d1c      	ldr	r5, [pc, #112]	@ (421104 <__register_exitproc+0x78>)
  421092:	4606      	mov	r6, r0
  421094:	4698      	mov	r8, r3
  421096:	460f      	mov	r7, r1
  421098:	6828      	ldr	r0, [r5, #0]
  42109a:	4691      	mov	r9, r2
  42109c:	f7ff ff46 	bl	420f2c <__retarget_lock_acquire_recursive>
  4210a0:	4b19      	ldr	r3, [pc, #100]	@ (421108 <__register_exitproc+0x7c>)
  4210a2:	681c      	ldr	r4, [r3, #0]
  4210a4:	b32c      	cbz	r4, 4210f2 <__register_exitproc+0x66>
  4210a6:	6828      	ldr	r0, [r5, #0]
  4210a8:	6865      	ldr	r5, [r4, #4]
  4210aa:	2d1f      	cmp	r5, #31
  4210ac:	dc24      	bgt.n	4210f8 <__register_exitproc+0x6c>
  4210ae:	b94e      	cbnz	r6, 4210c4 <__register_exitproc+0x38>
  4210b0:	1c6b      	adds	r3, r5, #1
  4210b2:	3502      	adds	r5, #2
  4210b4:	6063      	str	r3, [r4, #4]
  4210b6:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
  4210ba:	f7ff ff39 	bl	420f30 <__retarget_lock_release_recursive>
  4210be:	2000      	movs	r0, #0
  4210c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4210c4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
  4210c8:	2301      	movs	r3, #1
  4210ca:	2e02      	cmp	r6, #2
  4210cc:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
  4210d0:	fa03 f305 	lsl.w	r3, r3, r5
  4210d4:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
  4210d8:	ea42 0203 	orr.w	r2, r2, r3
  4210dc:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
  4210e0:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
  4210e4:	d1e4      	bne.n	4210b0 <__register_exitproc+0x24>
  4210e6:	f8d4 218c 	ldr.w	r2, [r4, #396]	@ 0x18c
  4210ea:	431a      	orrs	r2, r3
  4210ec:	f8c4 218c 	str.w	r2, [r4, #396]	@ 0x18c
  4210f0:	e7de      	b.n	4210b0 <__register_exitproc+0x24>
  4210f2:	4c06      	ldr	r4, [pc, #24]	@ (42110c <__register_exitproc+0x80>)
  4210f4:	601c      	str	r4, [r3, #0]
  4210f6:	e7d6      	b.n	4210a6 <__register_exitproc+0x1a>
  4210f8:	f7ff ff1a 	bl	420f30 <__retarget_lock_release_recursive>
  4210fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  421100:	e7de      	b.n	4210c0 <__register_exitproc+0x34>
  421102:	bf00      	nop
  421104:	2000a600 	.word	0x2000a600
  421108:	2004e3ac 	.word	0x2004e3ac
  42110c:	2004e21c 	.word	0x2004e21c

00421110 <register_fini>:
  421110:	4b02      	ldr	r3, [pc, #8]	@ (42111c <register_fini+0xc>)
  421112:	b113      	cbz	r3, 42111a <register_fini+0xa>
  421114:	4802      	ldr	r0, [pc, #8]	@ (421120 <register_fini+0x10>)
  421116:	f7fe b865 	b.w	41f1e4 <atexit>
  42111a:	4770      	bx	lr
  42111c:	00000000 	.word	0x00000000
  421120:	00423dad 	.word	0x00423dad

00421124 <_malloc_trim_r>:
  421124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  421128:	4606      	mov	r6, r0
  42112a:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 4211d8 <_malloc_trim_r+0xb4>
  42112e:	2008      	movs	r0, #8
  421130:	4689      	mov	r9, r1
  421132:	f002 fe2d 	bl	423d90 <sysconf>
  421136:	4605      	mov	r5, r0
  421138:	4630      	mov	r0, r6
  42113a:	f002 fa61 	bl	423600 <__malloc_lock>
  42113e:	f8d8 3008 	ldr.w	r3, [r8, #8]
  421142:	685f      	ldr	r7, [r3, #4]
  421144:	f027 0703 	bic.w	r7, r7, #3
  421148:	f1a7 0411 	sub.w	r4, r7, #17
  42114c:	eba4 0409 	sub.w	r4, r4, r9
  421150:	442c      	add	r4, r5
  421152:	fbb4 f4f5 	udiv	r4, r4, r5
  421156:	3c01      	subs	r4, #1
  421158:	fb05 f404 	mul.w	r4, r5, r4
  42115c:	42a5      	cmp	r5, r4
  42115e:	dc08      	bgt.n	421172 <_malloc_trim_r+0x4e>
  421160:	2100      	movs	r1, #0
  421162:	4630      	mov	r0, r6
  421164:	f002 fdec 	bl	423d40 <_sbrk_r>
  421168:	f8d8 3008 	ldr.w	r3, [r8, #8]
  42116c:	443b      	add	r3, r7
  42116e:	4298      	cmp	r0, r3
  421170:	d005      	beq.n	42117e <_malloc_trim_r+0x5a>
  421172:	4630      	mov	r0, r6
  421174:	f002 fa4a 	bl	42360c <__malloc_unlock>
  421178:	2000      	movs	r0, #0
  42117a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42117e:	4261      	negs	r1, r4
  421180:	4630      	mov	r0, r6
  421182:	f002 fddd 	bl	423d40 <_sbrk_r>
  421186:	3001      	adds	r0, #1
  421188:	d00f      	beq.n	4211aa <_malloc_trim_r+0x86>
  42118a:	1b3f      	subs	r7, r7, r4
  42118c:	4a10      	ldr	r2, [pc, #64]	@ (4211d0 <_malloc_trim_r+0xac>)
  42118e:	f8d8 3008 	ldr.w	r3, [r8, #8]
  421192:	4630      	mov	r0, r6
  421194:	f047 0701 	orr.w	r7, r7, #1
  421198:	605f      	str	r7, [r3, #4]
  42119a:	6813      	ldr	r3, [r2, #0]
  42119c:	1b1b      	subs	r3, r3, r4
  42119e:	6013      	str	r3, [r2, #0]
  4211a0:	f002 fa34 	bl	42360c <__malloc_unlock>
  4211a4:	2001      	movs	r0, #1
  4211a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4211aa:	2100      	movs	r1, #0
  4211ac:	4630      	mov	r0, r6
  4211ae:	f002 fdc7 	bl	423d40 <_sbrk_r>
  4211b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
  4211b6:	1a83      	subs	r3, r0, r2
  4211b8:	2b0f      	cmp	r3, #15
  4211ba:	ddda      	ble.n	421172 <_malloc_trim_r+0x4e>
  4211bc:	f043 0301 	orr.w	r3, r3, #1
  4211c0:	4903      	ldr	r1, [pc, #12]	@ (4211d0 <_malloc_trim_r+0xac>)
  4211c2:	6053      	str	r3, [r2, #4]
  4211c4:	4b03      	ldr	r3, [pc, #12]	@ (4211d4 <_malloc_trim_r+0xb0>)
  4211c6:	681b      	ldr	r3, [r3, #0]
  4211c8:	1ac0      	subs	r0, r0, r3
  4211ca:	6008      	str	r0, [r1, #0]
  4211cc:	e7d1      	b.n	421172 <_malloc_trim_r+0x4e>
  4211ce:	bf00      	nop
  4211d0:	2004e3b0 	.word	0x2004e3b0
  4211d4:	2000a604 	.word	0x2000a604
  4211d8:	2000a610 	.word	0x2000a610

004211dc <_free_r>:
  4211dc:	2900      	cmp	r1, #0
  4211de:	d07c      	beq.n	4212da <_free_r+0xfe>
  4211e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4211e4:	460c      	mov	r4, r1
  4211e6:	4680      	mov	r8, r0
  4211e8:	f002 fa0a 	bl	423600 <__malloc_lock>
  4211ec:	4f76      	ldr	r7, [pc, #472]	@ (4213c8 <_free_r+0x1ec>)
  4211ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4211f2:	f1a4 0508 	sub.w	r5, r4, #8
  4211f6:	68be      	ldr	r6, [r7, #8]
  4211f8:	f023 0101 	bic.w	r1, r3, #1
  4211fc:	1868      	adds	r0, r5, r1
  4211fe:	6842      	ldr	r2, [r0, #4]
  421200:	4286      	cmp	r6, r0
  421202:	f022 0203 	bic.w	r2, r2, #3
  421206:	f000 8083 	beq.w	421310 <_free_r+0x134>
  42120a:	07de      	lsls	r6, r3, #31
  42120c:	eb00 0c02 	add.w	ip, r0, r2
  421210:	6042      	str	r2, [r0, #4]
  421212:	d433      	bmi.n	42127c <_free_r+0xa0>
  421214:	f854 4c08 	ldr.w	r4, [r4, #-8]
  421218:	f8dc 3004 	ldr.w	r3, [ip, #4]
  42121c:	f107 0c08 	add.w	ip, r7, #8
  421220:	1b2d      	subs	r5, r5, r4
  421222:	4421      	add	r1, r4
  421224:	f003 0301 	and.w	r3, r3, #1
  421228:	68ac      	ldr	r4, [r5, #8]
  42122a:	4564      	cmp	r4, ip
  42122c:	d064      	beq.n	4212f8 <_free_r+0x11c>
  42122e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  421232:	f8c4 e00c 	str.w	lr, [r4, #12]
  421236:	f8ce 4008 	str.w	r4, [lr, #8]
  42123a:	2b00      	cmp	r3, #0
  42123c:	f000 8081 	beq.w	421342 <_free_r+0x166>
  421240:	f041 0301 	orr.w	r3, r1, #1
  421244:	606b      	str	r3, [r5, #4]
  421246:	6001      	str	r1, [r0, #0]
  421248:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
  42124c:	d222      	bcs.n	421294 <_free_r+0xb8>
  42124e:	08cb      	lsrs	r3, r1, #3
  421250:	2201      	movs	r2, #1
  421252:	0949      	lsrs	r1, r1, #5
  421254:	3301      	adds	r3, #1
  421256:	408a      	lsls	r2, r1
  421258:	6879      	ldr	r1, [r7, #4]
  42125a:	430a      	orrs	r2, r1
  42125c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
  421260:	607a      	str	r2, [r7, #4]
  421262:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
  421266:	3a08      	subs	r2, #8
  421268:	e9c5 1202 	strd	r1, r2, [r5, #8]
  42126c:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
  421270:	60cd      	str	r5, [r1, #12]
  421272:	4640      	mov	r0, r8
  421274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  421278:	f002 b9c8 	b.w	42360c <__malloc_unlock>
  42127c:	f8dc 3004 	ldr.w	r3, [ip, #4]
  421280:	07db      	lsls	r3, r3, #31
  421282:	d52b      	bpl.n	4212dc <_free_r+0x100>
  421284:	f041 0301 	orr.w	r3, r1, #1
  421288:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
  42128c:	f844 3c04 	str.w	r3, [r4, #-4]
  421290:	6001      	str	r1, [r0, #0]
  421292:	d3dc      	bcc.n	42124e <_free_r+0x72>
  421294:	f5b1 6f20 	cmp.w	r1, #2560	@ 0xa00
  421298:	ea4f 2351 	mov.w	r3, r1, lsr #9
  42129c:	d253      	bcs.n	421346 <_free_r+0x16a>
  42129e:	098b      	lsrs	r3, r1, #6
  4212a0:	f103 0039 	add.w	r0, r3, #57	@ 0x39
  4212a4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
  4212a8:	00c3      	lsls	r3, r0, #3
  4212aa:	18f8      	adds	r0, r7, r3
  4212ac:	58fb      	ldr	r3, [r7, r3]
  4212ae:	3808      	subs	r0, #8
  4212b0:	4298      	cmp	r0, r3
  4212b2:	d103      	bne.n	4212bc <_free_r+0xe0>
  4212b4:	e061      	b.n	42137a <_free_r+0x19e>
  4212b6:	689b      	ldr	r3, [r3, #8]
  4212b8:	4298      	cmp	r0, r3
  4212ba:	d004      	beq.n	4212c6 <_free_r+0xea>
  4212bc:	685a      	ldr	r2, [r3, #4]
  4212be:	f022 0203 	bic.w	r2, r2, #3
  4212c2:	428a      	cmp	r2, r1
  4212c4:	d8f7      	bhi.n	4212b6 <_free_r+0xda>
  4212c6:	68d8      	ldr	r0, [r3, #12]
  4212c8:	e9c5 3002 	strd	r3, r0, [r5, #8]
  4212cc:	6085      	str	r5, [r0, #8]
  4212ce:	4640      	mov	r0, r8
  4212d0:	60dd      	str	r5, [r3, #12]
  4212d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4212d6:	f002 b999 	b.w	42360c <__malloc_unlock>
  4212da:	4770      	bx	lr
  4212dc:	4411      	add	r1, r2
  4212de:	f107 0c08 	add.w	ip, r7, #8
  4212e2:	6883      	ldr	r3, [r0, #8]
  4212e4:	4563      	cmp	r3, ip
  4212e6:	d03f      	beq.n	421368 <_free_r+0x18c>
  4212e8:	68c2      	ldr	r2, [r0, #12]
  4212ea:	60da      	str	r2, [r3, #12]
  4212ec:	6093      	str	r3, [r2, #8]
  4212ee:	f041 0301 	orr.w	r3, r1, #1
  4212f2:	606b      	str	r3, [r5, #4]
  4212f4:	5069      	str	r1, [r5, r1]
  4212f6:	e7a7      	b.n	421248 <_free_r+0x6c>
  4212f8:	2b00      	cmp	r3, #0
  4212fa:	d15f      	bne.n	4213bc <_free_r+0x1e0>
  4212fc:	440a      	add	r2, r1
  4212fe:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
  421302:	60cb      	str	r3, [r1, #12]
  421304:	6099      	str	r1, [r3, #8]
  421306:	f042 0301 	orr.w	r3, r2, #1
  42130a:	606b      	str	r3, [r5, #4]
  42130c:	50aa      	str	r2, [r5, r2]
  42130e:	e7b0      	b.n	421272 <_free_r+0x96>
  421310:	07db      	lsls	r3, r3, #31
  421312:	440a      	add	r2, r1
  421314:	d407      	bmi.n	421326 <_free_r+0x14a>
  421316:	f854 3c08 	ldr.w	r3, [r4, #-8]
  42131a:	1aed      	subs	r5, r5, r3
  42131c:	441a      	add	r2, r3
  42131e:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
  421322:	60cb      	str	r3, [r1, #12]
  421324:	6099      	str	r1, [r3, #8]
  421326:	f042 0301 	orr.w	r3, r2, #1
  42132a:	606b      	str	r3, [r5, #4]
  42132c:	4b27      	ldr	r3, [pc, #156]	@ (4213cc <_free_r+0x1f0>)
  42132e:	60bd      	str	r5, [r7, #8]
  421330:	681b      	ldr	r3, [r3, #0]
  421332:	4293      	cmp	r3, r2
  421334:	d89d      	bhi.n	421272 <_free_r+0x96>
  421336:	4b26      	ldr	r3, [pc, #152]	@ (4213d0 <_free_r+0x1f4>)
  421338:	4640      	mov	r0, r8
  42133a:	6819      	ldr	r1, [r3, #0]
  42133c:	f7ff fef2 	bl	421124 <_malloc_trim_r>
  421340:	e797      	b.n	421272 <_free_r+0x96>
  421342:	4411      	add	r1, r2
  421344:	e7cd      	b.n	4212e2 <_free_r+0x106>
  421346:	2b14      	cmp	r3, #20
  421348:	d908      	bls.n	42135c <_free_r+0x180>
  42134a:	2b54      	cmp	r3, #84	@ 0x54
  42134c:	d81d      	bhi.n	42138a <_free_r+0x1ae>
  42134e:	0b0b      	lsrs	r3, r1, #12
  421350:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
  421354:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
  421358:	00c3      	lsls	r3, r0, #3
  42135a:	e7a6      	b.n	4212aa <_free_r+0xce>
  42135c:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
  421360:	f103 025b 	add.w	r2, r3, #91	@ 0x5b
  421364:	00c3      	lsls	r3, r0, #3
  421366:	e7a0      	b.n	4212aa <_free_r+0xce>
  421368:	f041 0301 	orr.w	r3, r1, #1
  42136c:	e9c7 5504 	strd	r5, r5, [r7, #16]
  421370:	e9c5 cc02 	strd	ip, ip, [r5, #8]
  421374:	606b      	str	r3, [r5, #4]
  421376:	5069      	str	r1, [r5, r1]
  421378:	e77b      	b.n	421272 <_free_r+0x96>
  42137a:	2101      	movs	r1, #1
  42137c:	1092      	asrs	r2, r2, #2
  42137e:	fa01 f202 	lsl.w	r2, r1, r2
  421382:	6879      	ldr	r1, [r7, #4]
  421384:	430a      	orrs	r2, r1
  421386:	607a      	str	r2, [r7, #4]
  421388:	e79e      	b.n	4212c8 <_free_r+0xec>
  42138a:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
  42138e:	d806      	bhi.n	42139e <_free_r+0x1c2>
  421390:	0bcb      	lsrs	r3, r1, #15
  421392:	f103 0078 	add.w	r0, r3, #120	@ 0x78
  421396:	f103 0277 	add.w	r2, r3, #119	@ 0x77
  42139a:	00c3      	lsls	r3, r0, #3
  42139c:	e785      	b.n	4212aa <_free_r+0xce>
  42139e:	f240 5254 	movw	r2, #1364	@ 0x554
  4213a2:	4293      	cmp	r3, r2
  4213a4:	d806      	bhi.n	4213b4 <_free_r+0x1d8>
  4213a6:	0c8b      	lsrs	r3, r1, #18
  4213a8:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
  4213ac:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
  4213b0:	00c3      	lsls	r3, r0, #3
  4213b2:	e77a      	b.n	4212aa <_free_r+0xce>
  4213b4:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
  4213b8:	227e      	movs	r2, #126	@ 0x7e
  4213ba:	e776      	b.n	4212aa <_free_r+0xce>
  4213bc:	f041 0301 	orr.w	r3, r1, #1
  4213c0:	606b      	str	r3, [r5, #4]
  4213c2:	6001      	str	r1, [r0, #0]
  4213c4:	e755      	b.n	421272 <_free_r+0x96>
  4213c6:	bf00      	nop
  4213c8:	2000a610 	.word	0x2000a610
  4213cc:	2000a608 	.word	0x2000a608
  4213d0:	2004e3e0 	.word	0x2004e3e0

004213d4 <_findenv_r>:
  4213d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4213d8:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 421450 <_findenv_r+0x7c>
  4213dc:	4680      	mov	r8, r0
  4213de:	460e      	mov	r6, r1
  4213e0:	4617      	mov	r7, r2
  4213e2:	f003 fc83 	bl	424cec <__env_lock>
  4213e6:	f8d9 5000 	ldr.w	r5, [r9]
  4213ea:	b14d      	cbz	r5, 421400 <_findenv_r+0x2c>
  4213ec:	7833      	ldrb	r3, [r6, #0]
  4213ee:	4634      	mov	r4, r6
  4213f0:	b163      	cbz	r3, 42140c <_findenv_r+0x38>
  4213f2:	2b3d      	cmp	r3, #61	@ 0x3d
  4213f4:	d00a      	beq.n	42140c <_findenv_r+0x38>
  4213f6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4213fa:	b13b      	cbz	r3, 42140c <_findenv_r+0x38>
  4213fc:	2b3d      	cmp	r3, #61	@ 0x3d
  4213fe:	d1fa      	bne.n	4213f6 <_findenv_r+0x22>
  421400:	4640      	mov	r0, r8
  421402:	f003 fc79 	bl	424cf8 <__env_unlock>
  421406:	2000      	movs	r0, #0
  421408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42140c:	2b3d      	cmp	r3, #61	@ 0x3d
  42140e:	d0f7      	beq.n	421400 <_findenv_r+0x2c>
  421410:	6828      	ldr	r0, [r5, #0]
  421412:	1ba4      	subs	r4, r4, r6
  421414:	2800      	cmp	r0, #0
  421416:	d0f3      	beq.n	421400 <_findenv_r+0x2c>
  421418:	4622      	mov	r2, r4
  42141a:	4631      	mov	r1, r6
  42141c:	f7ff fc94 	bl	420d48 <strncmp>
  421420:	b928      	cbnz	r0, 42142e <_findenv_r+0x5a>
  421422:	6828      	ldr	r0, [r5, #0]
  421424:	5d03      	ldrb	r3, [r0, r4]
  421426:	eb00 0a04 	add.w	sl, r0, r4
  42142a:	2b3d      	cmp	r3, #61	@ 0x3d
  42142c:	d004      	beq.n	421438 <_findenv_r+0x64>
  42142e:	f855 0f04 	ldr.w	r0, [r5, #4]!
  421432:	2800      	cmp	r0, #0
  421434:	d1f0      	bne.n	421418 <_findenv_r+0x44>
  421436:	e7e3      	b.n	421400 <_findenv_r+0x2c>
  421438:	f8d9 3000 	ldr.w	r3, [r9]
  42143c:	4640      	mov	r0, r8
  42143e:	1aed      	subs	r5, r5, r3
  421440:	10ad      	asrs	r5, r5, #2
  421442:	603d      	str	r5, [r7, #0]
  421444:	f003 fc58 	bl	424cf8 <__env_unlock>
  421448:	f10a 0001 	add.w	r0, sl, #1
  42144c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  421450:	2000aa18 	.word	0x2000aa18

00421454 <_malloc_r>:
  421454:	f101 030b 	add.w	r3, r1, #11
  421458:	2b16      	cmp	r3, #22
  42145a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42145e:	4607      	mov	r7, r0
  421460:	b083      	sub	sp, #12
  421462:	d823      	bhi.n	4214ac <_malloc_r+0x58>
  421464:	2910      	cmp	r1, #16
  421466:	f200 80af 	bhi.w	4215c8 <_malloc_r+0x174>
  42146a:	f002 f8c9 	bl	423600 <__malloc_lock>
  42146e:	2510      	movs	r5, #16
  421470:	2318      	movs	r3, #24
  421472:	2002      	movs	r0, #2
  421474:	4ebc      	ldr	r6, [pc, #752]	@ (421768 <_malloc_r+0x314>)
  421476:	4433      	add	r3, r6
  421478:	685c      	ldr	r4, [r3, #4]
  42147a:	f1a3 0208 	sub.w	r2, r3, #8
  42147e:	4294      	cmp	r4, r2
  421480:	f000 8180 	beq.w	421784 <_malloc_r+0x330>
  421484:	6863      	ldr	r3, [r4, #4]
  421486:	4638      	mov	r0, r7
  421488:	f023 0303 	bic.w	r3, r3, #3
  42148c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
  421490:	4423      	add	r3, r4
  421492:	60ca      	str	r2, [r1, #12]
  421494:	6091      	str	r1, [r2, #8]
  421496:	685a      	ldr	r2, [r3, #4]
  421498:	3408      	adds	r4, #8
  42149a:	f042 0201 	orr.w	r2, r2, #1
  42149e:	605a      	str	r2, [r3, #4]
  4214a0:	f002 f8b4 	bl	42360c <__malloc_unlock>
  4214a4:	4620      	mov	r0, r4
  4214a6:	b003      	add	sp, #12
  4214a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4214ac:	2b00      	cmp	r3, #0
  4214ae:	f023 0507 	bic.w	r5, r3, #7
  4214b2:	f2c0 8089 	blt.w	4215c8 <_malloc_r+0x174>
  4214b6:	42a9      	cmp	r1, r5
  4214b8:	f200 8086 	bhi.w	4215c8 <_malloc_r+0x174>
  4214bc:	f002 f8a0 	bl	423600 <__malloc_lock>
  4214c0:	f5b5 7ffc 	cmp.w	r5, #504	@ 0x1f8
  4214c4:	f0c0 81b4 	bcc.w	421830 <_malloc_r+0x3dc>
  4214c8:	0a6b      	lsrs	r3, r5, #9
  4214ca:	f000 8081 	beq.w	4215d0 <_malloc_r+0x17c>
  4214ce:	2b04      	cmp	r3, #4
  4214d0:	f200 817e 	bhi.w	4217d0 <_malloc_r+0x37c>
  4214d4:	09ab      	lsrs	r3, r5, #6
  4214d6:	f103 0039 	add.w	r0, r3, #57	@ 0x39
  4214da:	f103 0e38 	add.w	lr, r3, #56	@ 0x38
  4214de:	00c3      	lsls	r3, r0, #3
  4214e0:	4ea1      	ldr	r6, [pc, #644]	@ (421768 <_malloc_r+0x314>)
  4214e2:	4433      	add	r3, r6
  4214e4:	f1a3 0c08 	sub.w	ip, r3, #8
  4214e8:	685c      	ldr	r4, [r3, #4]
  4214ea:	45a4      	cmp	ip, r4
  4214ec:	d107      	bne.n	4214fe <_malloc_r+0xaa>
  4214ee:	e00d      	b.n	42150c <_malloc_r+0xb8>
  4214f0:	2a00      	cmp	r2, #0
  4214f2:	68e1      	ldr	r1, [r4, #12]
  4214f4:	f280 8132 	bge.w	42175c <_malloc_r+0x308>
  4214f8:	458c      	cmp	ip, r1
  4214fa:	460c      	mov	r4, r1
  4214fc:	d006      	beq.n	42150c <_malloc_r+0xb8>
  4214fe:	6863      	ldr	r3, [r4, #4]
  421500:	f023 0303 	bic.w	r3, r3, #3
  421504:	1b5a      	subs	r2, r3, r5
  421506:	2a0f      	cmp	r2, #15
  421508:	ddf2      	ble.n	4214f0 <_malloc_r+0x9c>
  42150a:	4670      	mov	r0, lr
  42150c:	f8df 8270 	ldr.w	r8, [pc, #624]	@ 421780 <_malloc_r+0x32c>
  421510:	6934      	ldr	r4, [r6, #16]
  421512:	4544      	cmp	r4, r8
  421514:	f000 80e7 	beq.w	4216e6 <_malloc_r+0x292>
  421518:	6863      	ldr	r3, [r4, #4]
  42151a:	f023 0c03 	bic.w	ip, r3, #3
  42151e:	ebac 0305 	sub.w	r3, ip, r5
  421522:	2b0f      	cmp	r3, #15
  421524:	f300 8194 	bgt.w	421850 <_malloc_r+0x3fc>
  421528:	2b00      	cmp	r3, #0
  42152a:	e9c6 8804 	strd	r8, r8, [r6, #16]
  42152e:	f280 8183 	bge.w	421838 <_malloc_r+0x3e4>
  421532:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
  421536:	f8d6 e004 	ldr.w	lr, [r6, #4]
  42153a:	f080 8129 	bcs.w	421790 <_malloc_r+0x33c>
  42153e:	ea4f 03dc 	mov.w	r3, ip, lsr #3
  421542:	2201      	movs	r2, #1
  421544:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  421548:	3301      	adds	r3, #1
  42154a:	fa02 f20c 	lsl.w	r2, r2, ip
  42154e:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
  421552:	ea4e 0e02 	orr.w	lr, lr, r2
  421556:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
  42155a:	3a08      	subs	r2, #8
  42155c:	f8c6 e004 	str.w	lr, [r6, #4]
  421560:	e9c4 1202 	strd	r1, r2, [r4, #8]
  421564:	f846 4033 	str.w	r4, [r6, r3, lsl #3]
  421568:	60cc      	str	r4, [r1, #12]
  42156a:	1083      	asrs	r3, r0, #2
  42156c:	f04f 0c01 	mov.w	ip, #1
  421570:	fa0c fc03 	lsl.w	ip, ip, r3
  421574:	45f4      	cmp	ip, lr
  421576:	d831      	bhi.n	4215dc <_malloc_r+0x188>
  421578:	ea1c 0f0e 	tst.w	ip, lr
  42157c:	d107      	bne.n	42158e <_malloc_r+0x13a>
  42157e:	f020 0003 	bic.w	r0, r0, #3
  421582:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  421586:	3004      	adds	r0, #4
  421588:	ea1c 0f0e 	tst.w	ip, lr
  42158c:	d0f9      	beq.n	421582 <_malloc_r+0x12e>
  42158e:	eb06 0ac0 	add.w	sl, r6, r0, lsl #3
  421592:	4681      	mov	r9, r0
  421594:	46d6      	mov	lr, sl
  421596:	f8de 300c 	ldr.w	r3, [lr, #12]
  42159a:	e00b      	b.n	4215b4 <_malloc_r+0x160>
  42159c:	685a      	ldr	r2, [r3, #4]
  42159e:	461c      	mov	r4, r3
  4215a0:	68db      	ldr	r3, [r3, #12]
  4215a2:	f022 0203 	bic.w	r2, r2, #3
  4215a6:	1b51      	subs	r1, r2, r5
  4215a8:	290f      	cmp	r1, #15
  4215aa:	f300 811d 	bgt.w	4217e8 <_malloc_r+0x394>
  4215ae:	2900      	cmp	r1, #0
  4215b0:	f280 8131 	bge.w	421816 <_malloc_r+0x3c2>
  4215b4:	459e      	cmp	lr, r3
  4215b6:	d1f1      	bne.n	42159c <_malloc_r+0x148>
  4215b8:	f109 0901 	add.w	r9, r9, #1
  4215bc:	f10e 0e08 	add.w	lr, lr, #8
  4215c0:	f019 0f03 	tst.w	r9, #3
  4215c4:	d1e7      	bne.n	421596 <_malloc_r+0x142>
  4215c6:	e167      	b.n	421898 <_malloc_r+0x444>
  4215c8:	230c      	movs	r3, #12
  4215ca:	603b      	str	r3, [r7, #0]
  4215cc:	2400      	movs	r4, #0
  4215ce:	e769      	b.n	4214a4 <_malloc_r+0x50>
  4215d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
  4215d4:	2040      	movs	r0, #64	@ 0x40
  4215d6:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
  4215da:	e781      	b.n	4214e0 <_malloc_r+0x8c>
  4215dc:	68b4      	ldr	r4, [r6, #8]
  4215de:	6863      	ldr	r3, [r4, #4]
  4215e0:	f023 0903 	bic.w	r9, r3, #3
  4215e4:	eba9 0305 	sub.w	r3, r9, r5
  4215e8:	2b0f      	cmp	r3, #15
  4215ea:	dd02      	ble.n	4215f2 <_malloc_r+0x19e>
  4215ec:	45a9      	cmp	r9, r5
  4215ee:	f080 80a4 	bcs.w	42173a <_malloc_r+0x2e6>
  4215f2:	4b5e      	ldr	r3, [pc, #376]	@ (42176c <_malloc_r+0x318>)
  4215f4:	2008      	movs	r0, #8
  4215f6:	681b      	ldr	r3, [r3, #0]
  4215f8:	f103 0810 	add.w	r8, r3, #16
  4215fc:	eb04 0309 	add.w	r3, r4, r9
  421600:	9300      	str	r3, [sp, #0]
  421602:	f002 fbc5 	bl	423d90 <sysconf>
  421606:	4a5a      	ldr	r2, [pc, #360]	@ (421770 <_malloc_r+0x31c>)
  421608:	44a8      	add	r8, r5
  42160a:	4683      	mov	fp, r0
  42160c:	6813      	ldr	r3, [r2, #0]
  42160e:	3301      	adds	r3, #1
  421610:	d005      	beq.n	42161e <_malloc_r+0x1ca>
  421612:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
  421616:	4243      	negs	r3, r0
  421618:	4480      	add	r8, r0
  42161a:	ea03 0808 	and.w	r8, r3, r8
  42161e:	4641      	mov	r1, r8
  421620:	4638      	mov	r0, r7
  421622:	f002 fb8d 	bl	423d40 <_sbrk_r>
  421626:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
  42162a:	4682      	mov	sl, r0
  42162c:	4a50      	ldr	r2, [pc, #320]	@ (421770 <_malloc_r+0x31c>)
  42162e:	d079      	beq.n	421724 <_malloc_r+0x2d0>
  421630:	9b00      	ldr	r3, [sp, #0]
  421632:	4283      	cmp	r3, r0
  421634:	d95a      	bls.n	4216ec <_malloc_r+0x298>
  421636:	42b4      	cmp	r4, r6
  421638:	d174      	bne.n	421724 <_malloc_r+0x2d0>
  42163a:	4b4e      	ldr	r3, [pc, #312]	@ (421774 <_malloc_r+0x320>)
  42163c:	f10b 3cff 	add.w	ip, fp, #4294967295	@ 0xffffffff
  421640:	6818      	ldr	r0, [r3, #0]
  421642:	eb00 0e08 	add.w	lr, r0, r8
  421646:	f8c3 e000 	str.w	lr, [r3]
  42164a:	6811      	ldr	r1, [r2, #0]
  42164c:	3101      	adds	r1, #1
  42164e:	f000 8173 	beq.w	421938 <_malloc_r+0x4e4>
  421652:	9a00      	ldr	r2, [sp, #0]
  421654:	ebaa 0202 	sub.w	r2, sl, r2
  421658:	4472      	add	r2, lr
  42165a:	601a      	str	r2, [r3, #0]
  42165c:	f01a 0207 	ands.w	r2, sl, #7
  421660:	e9cd 2300 	strd	r2, r3, [sp]
  421664:	f000 8142 	beq.w	4218ec <_malloc_r+0x498>
  421668:	f1c2 0208 	rsb	r2, r2, #8
  42166c:	4638      	mov	r0, r7
  42166e:	4492      	add	sl, r2
  421670:	445a      	add	r2, fp
  421672:	44d0      	add	r8, sl
  421674:	ea08 010c 	and.w	r1, r8, ip
  421678:	1a52      	subs	r2, r2, r1
  42167a:	ea02 0b0c 	and.w	fp, r2, ip
  42167e:	4659      	mov	r1, fp
  421680:	f002 fb5e 	bl	423d40 <_sbrk_r>
  421684:	1c42      	adds	r2, r0, #1
  421686:	9b01      	ldr	r3, [sp, #4]
  421688:	f000 816e 	beq.w	421968 <_malloc_r+0x514>
  42168c:	eba0 000a 	sub.w	r0, r0, sl
  421690:	eb00 080b 	add.w	r8, r0, fp
  421694:	6819      	ldr	r1, [r3, #0]
  421696:	f048 0201 	orr.w	r2, r8, #1
  42169a:	42b4      	cmp	r4, r6
  42169c:	f8c6 a008 	str.w	sl, [r6, #8]
  4216a0:	4459      	add	r1, fp
  4216a2:	f8ca 2004 	str.w	r2, [sl, #4]
  4216a6:	6019      	str	r1, [r3, #0]
  4216a8:	d032      	beq.n	421710 <_malloc_r+0x2bc>
  4216aa:	f1b9 0f0f 	cmp.w	r9, #15
  4216ae:	f240 810c 	bls.w	4218ca <_malloc_r+0x476>
  4216b2:	6860      	ldr	r0, [r4, #4]
  4216b4:	f1a9 020c 	sub.w	r2, r9, #12
  4216b8:	f04f 0c05 	mov.w	ip, #5
  4216bc:	f022 0207 	bic.w	r2, r2, #7
  4216c0:	f000 0001 	and.w	r0, r0, #1
  4216c4:	4310      	orrs	r0, r2
  4216c6:	2a0f      	cmp	r2, #15
  4216c8:	6060      	str	r0, [r4, #4]
  4216ca:	eb04 0002 	add.w	r0, r4, r2
  4216ce:	e9c0 cc01 	strd	ip, ip, [r0, #4]
  4216d2:	d91d      	bls.n	421710 <_malloc_r+0x2bc>
  4216d4:	f104 0108 	add.w	r1, r4, #8
  4216d8:	4638      	mov	r0, r7
  4216da:	9300      	str	r3, [sp, #0]
  4216dc:	f7ff fd7e 	bl	4211dc <_free_r>
  4216e0:	9b00      	ldr	r3, [sp, #0]
  4216e2:	6819      	ldr	r1, [r3, #0]
  4216e4:	e014      	b.n	421710 <_malloc_r+0x2bc>
  4216e6:	f8d6 e004 	ldr.w	lr, [r6, #4]
  4216ea:	e73e      	b.n	42156a <_malloc_r+0x116>
  4216ec:	4b21      	ldr	r3, [pc, #132]	@ (421774 <_malloc_r+0x320>)
  4216ee:	f10b 3cff 	add.w	ip, fp, #4294967295	@ 0xffffffff
  4216f2:	6819      	ldr	r1, [r3, #0]
  4216f4:	4441      	add	r1, r8
  4216f6:	468e      	mov	lr, r1
  4216f8:	6019      	str	r1, [r3, #0]
  4216fa:	d1a6      	bne.n	42164a <_malloc_r+0x1f6>
  4216fc:	9800      	ldr	r0, [sp, #0]
  4216fe:	ea10 0f0c 	tst.w	r0, ip
  421702:	d1a2      	bne.n	42164a <_malloc_r+0x1f6>
  421704:	eb09 0308 	add.w	r3, r9, r8
  421708:	68b2      	ldr	r2, [r6, #8]
  42170a:	f043 0301 	orr.w	r3, r3, #1
  42170e:	6053      	str	r3, [r2, #4]
  421710:	4b19      	ldr	r3, [pc, #100]	@ (421778 <_malloc_r+0x324>)
  421712:	681a      	ldr	r2, [r3, #0]
  421714:	428a      	cmp	r2, r1
  421716:	bf38      	it	cc
  421718:	6019      	strcc	r1, [r3, #0]
  42171a:	4b18      	ldr	r3, [pc, #96]	@ (42177c <_malloc_r+0x328>)
  42171c:	681a      	ldr	r2, [r3, #0]
  42171e:	428a      	cmp	r2, r1
  421720:	bf38      	it	cc
  421722:	6019      	strcc	r1, [r3, #0]
  421724:	68b4      	ldr	r4, [r6, #8]
  421726:	6862      	ldr	r2, [r4, #4]
  421728:	f022 0203 	bic.w	r2, r2, #3
  42172c:	1b53      	subs	r3, r2, r5
  42172e:	2b0f      	cmp	r3, #15
  421730:	f340 80ce 	ble.w	4218d0 <_malloc_r+0x47c>
  421734:	4295      	cmp	r5, r2
  421736:	f200 80cb 	bhi.w	4218d0 <_malloc_r+0x47c>
  42173a:	1962      	adds	r2, r4, r5
  42173c:	f045 0501 	orr.w	r5, r5, #1
  421740:	f043 0301 	orr.w	r3, r3, #1
  421744:	3408      	adds	r4, #8
  421746:	f844 5c04 	str.w	r5, [r4, #-4]
  42174a:	4638      	mov	r0, r7
  42174c:	60b2      	str	r2, [r6, #8]
  42174e:	6053      	str	r3, [r2, #4]
  421750:	f001 ff5c 	bl	42360c <__malloc_unlock>
  421754:	4620      	mov	r0, r4
  421756:	b003      	add	sp, #12
  421758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42175c:	68a2      	ldr	r2, [r4, #8]
  42175e:	4423      	add	r3, r4
  421760:	4638      	mov	r0, r7
  421762:	60d1      	str	r1, [r2, #12]
  421764:	608a      	str	r2, [r1, #8]
  421766:	e696      	b.n	421496 <_malloc_r+0x42>
  421768:	2000a610 	.word	0x2000a610
  42176c:	2004e3e0 	.word	0x2004e3e0
  421770:	2000a604 	.word	0x2000a604
  421774:	2004e3b0 	.word	0x2004e3b0
  421778:	2004e3dc 	.word	0x2004e3dc
  42177c:	2004e3d8 	.word	0x2004e3d8
  421780:	2000a618 	.word	0x2000a618
  421784:	68dc      	ldr	r4, [r3, #12]
  421786:	42a3      	cmp	r3, r4
  421788:	f47f ae7c 	bne.w	421484 <_malloc_r+0x30>
  42178c:	3002      	adds	r0, #2
  42178e:	e6bd      	b.n	42150c <_malloc_r+0xb8>
  421790:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
  421794:	ea4f 225c 	mov.w	r2, ip, lsr #9
  421798:	d36c      	bcc.n	421874 <_malloc_r+0x420>
  42179a:	2a14      	cmp	r2, #20
  42179c:	f200 80b9 	bhi.w	421912 <_malloc_r+0x4be>
  4217a0:	f102 035c 	add.w	r3, r2, #92	@ 0x5c
  4217a4:	325b      	adds	r2, #91	@ 0x5b
  4217a6:	00db      	lsls	r3, r3, #3
  4217a8:	18f1      	adds	r1, r6, r3
  4217aa:	58f3      	ldr	r3, [r6, r3]
  4217ac:	3908      	subs	r1, #8
  4217ae:	4299      	cmp	r1, r3
  4217b0:	d103      	bne.n	4217ba <_malloc_r+0x366>
  4217b2:	e091      	b.n	4218d8 <_malloc_r+0x484>
  4217b4:	689b      	ldr	r3, [r3, #8]
  4217b6:	4299      	cmp	r1, r3
  4217b8:	d004      	beq.n	4217c4 <_malloc_r+0x370>
  4217ba:	685a      	ldr	r2, [r3, #4]
  4217bc:	f022 0203 	bic.w	r2, r2, #3
  4217c0:	4562      	cmp	r2, ip
  4217c2:	d8f7      	bhi.n	4217b4 <_malloc_r+0x360>
  4217c4:	68d9      	ldr	r1, [r3, #12]
  4217c6:	e9c4 3102 	strd	r3, r1, [r4, #8]
  4217ca:	608c      	str	r4, [r1, #8]
  4217cc:	60dc      	str	r4, [r3, #12]
  4217ce:	e6cc      	b.n	42156a <_malloc_r+0x116>
  4217d0:	2b14      	cmp	r3, #20
  4217d2:	d956      	bls.n	421882 <_malloc_r+0x42e>
  4217d4:	2b54      	cmp	r3, #84	@ 0x54
  4217d6:	f200 80a5 	bhi.w	421924 <_malloc_r+0x4d0>
  4217da:	0b2b      	lsrs	r3, r5, #12
  4217dc:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
  4217e0:	f103 0e6e 	add.w	lr, r3, #110	@ 0x6e
  4217e4:	00c3      	lsls	r3, r0, #3
  4217e6:	e67b      	b.n	4214e0 <_malloc_r+0x8c>
  4217e8:	f8d4 c008 	ldr.w	ip, [r4, #8]
  4217ec:	4638      	mov	r0, r7
  4217ee:	1967      	adds	r7, r4, r5
  4217f0:	f045 0501 	orr.w	r5, r5, #1
  4217f4:	6065      	str	r5, [r4, #4]
  4217f6:	f8cc 300c 	str.w	r3, [ip, #12]
  4217fa:	f8c3 c008 	str.w	ip, [r3, #8]
  4217fe:	f041 0301 	orr.w	r3, r1, #1
  421802:	e9c6 7704 	strd	r7, r7, [r6, #16]
  421806:	e9c7 8802 	strd	r8, r8, [r7, #8]
  42180a:	607b      	str	r3, [r7, #4]
  42180c:	50a1      	str	r1, [r4, r2]
  42180e:	3408      	adds	r4, #8
  421810:	f001 fefc 	bl	42360c <__malloc_unlock>
  421814:	e646      	b.n	4214a4 <_malloc_r+0x50>
  421816:	4422      	add	r2, r4
  421818:	4638      	mov	r0, r7
  42181a:	6851      	ldr	r1, [r2, #4]
  42181c:	f041 0101 	orr.w	r1, r1, #1
  421820:	6051      	str	r1, [r2, #4]
  421822:	f854 2f08 	ldr.w	r2, [r4, #8]!
  421826:	60d3      	str	r3, [r2, #12]
  421828:	609a      	str	r2, [r3, #8]
  42182a:	f001 feef 	bl	42360c <__malloc_unlock>
  42182e:	e639      	b.n	4214a4 <_malloc_r+0x50>
  421830:	08e8      	lsrs	r0, r5, #3
  421832:	f105 0308 	add.w	r3, r5, #8
  421836:	e61d      	b.n	421474 <_malloc_r+0x20>
  421838:	44a4      	add	ip, r4
  42183a:	4638      	mov	r0, r7
  42183c:	3408      	adds	r4, #8
  42183e:	f8dc 3004 	ldr.w	r3, [ip, #4]
  421842:	f043 0301 	orr.w	r3, r3, #1
  421846:	f8cc 3004 	str.w	r3, [ip, #4]
  42184a:	f001 fedf 	bl	42360c <__malloc_unlock>
  42184e:	e629      	b.n	4214a4 <_malloc_r+0x50>
  421850:	1962      	adds	r2, r4, r5
  421852:	f043 0101 	orr.w	r1, r3, #1
  421856:	f045 0501 	orr.w	r5, r5, #1
  42185a:	4638      	mov	r0, r7
  42185c:	6065      	str	r5, [r4, #4]
  42185e:	e9c6 2204 	strd	r2, r2, [r6, #16]
  421862:	e9c2 8802 	strd	r8, r8, [r2, #8]
  421866:	6051      	str	r1, [r2, #4]
  421868:	f844 300c 	str.w	r3, [r4, ip]
  42186c:	3408      	adds	r4, #8
  42186e:	f001 fecd 	bl	42360c <__malloc_unlock>
  421872:	e617      	b.n	4214a4 <_malloc_r+0x50>
  421874:	ea4f 129c 	mov.w	r2, ip, lsr #6
  421878:	f102 0339 	add.w	r3, r2, #57	@ 0x39
  42187c:	3238      	adds	r2, #56	@ 0x38
  42187e:	00db      	lsls	r3, r3, #3
  421880:	e792      	b.n	4217a8 <_malloc_r+0x354>
  421882:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
  421886:	f103 0e5b 	add.w	lr, r3, #91	@ 0x5b
  42188a:	00c3      	lsls	r3, r0, #3
  42188c:	e628      	b.n	4214e0 <_malloc_r+0x8c>
  42188e:	f85a 3908 	ldr.w	r3, [sl], #-8
  421892:	4553      	cmp	r3, sl
  421894:	f040 8085 	bne.w	4219a2 <_malloc_r+0x54e>
  421898:	f010 0f03 	tst.w	r0, #3
  42189c:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
  4218a0:	d1f5      	bne.n	42188e <_malloc_r+0x43a>
  4218a2:	6873      	ldr	r3, [r6, #4]
  4218a4:	ea23 030c 	bic.w	r3, r3, ip
  4218a8:	6073      	str	r3, [r6, #4]
  4218aa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  4218ae:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
  4218b2:	429a      	cmp	r2, r3
  4218b4:	d304      	bcc.n	4218c0 <_malloc_r+0x46c>
  4218b6:	e691      	b.n	4215dc <_malloc_r+0x188>
  4218b8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  4218bc:	f109 0904 	add.w	r9, r9, #4
  4218c0:	ea1c 0f03 	tst.w	ip, r3
  4218c4:	d0f8      	beq.n	4218b8 <_malloc_r+0x464>
  4218c6:	4648      	mov	r0, r9
  4218c8:	e661      	b.n	42158e <_malloc_r+0x13a>
  4218ca:	2301      	movs	r3, #1
  4218cc:	f8ca 3004 	str.w	r3, [sl, #4]
  4218d0:	4638      	mov	r0, r7
  4218d2:	f001 fe9b 	bl	42360c <__malloc_unlock>
  4218d6:	e679      	b.n	4215cc <_malloc_r+0x178>
  4218d8:	1092      	asrs	r2, r2, #2
  4218da:	f04f 0c01 	mov.w	ip, #1
  4218de:	fa0c f202 	lsl.w	r2, ip, r2
  4218e2:	ea4e 0e02 	orr.w	lr, lr, r2
  4218e6:	f8c6 e004 	str.w	lr, [r6, #4]
  4218ea:	e76c      	b.n	4217c6 <_malloc_r+0x372>
  4218ec:	eb0a 0208 	add.w	r2, sl, r8
  4218f0:	4638      	mov	r0, r7
  4218f2:	ea02 020c 	and.w	r2, r2, ip
  4218f6:	ebab 0b02 	sub.w	fp, fp, r2
  4218fa:	ea0b 0b0c 	and.w	fp, fp, ip
  4218fe:	4659      	mov	r1, fp
  421900:	f002 fa1e 	bl	423d40 <_sbrk_r>
  421904:	1c43      	adds	r3, r0, #1
  421906:	9b01      	ldr	r3, [sp, #4]
  421908:	f47f aec0 	bne.w	42168c <_malloc_r+0x238>
  42190c:	f8dd b000 	ldr.w	fp, [sp]
  421910:	e6c0      	b.n	421694 <_malloc_r+0x240>
  421912:	2a54      	cmp	r2, #84	@ 0x54
  421914:	d813      	bhi.n	42193e <_malloc_r+0x4ea>
  421916:	ea4f 321c 	mov.w	r2, ip, lsr #12
  42191a:	f102 036f 	add.w	r3, r2, #111	@ 0x6f
  42191e:	326e      	adds	r2, #110	@ 0x6e
  421920:	00db      	lsls	r3, r3, #3
  421922:	e741      	b.n	4217a8 <_malloc_r+0x354>
  421924:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
  421928:	d813      	bhi.n	421952 <_malloc_r+0x4fe>
  42192a:	0beb      	lsrs	r3, r5, #15
  42192c:	f103 0078 	add.w	r0, r3, #120	@ 0x78
  421930:	f103 0e77 	add.w	lr, r3, #119	@ 0x77
  421934:	00c3      	lsls	r3, r0, #3
  421936:	e5d3      	b.n	4214e0 <_malloc_r+0x8c>
  421938:	f8c2 a000 	str.w	sl, [r2]
  42193c:	e68e      	b.n	42165c <_malloc_r+0x208>
  42193e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
  421942:	d819      	bhi.n	421978 <_malloc_r+0x524>
  421944:	ea4f 32dc 	mov.w	r2, ip, lsr #15
  421948:	f102 0378 	add.w	r3, r2, #120	@ 0x78
  42194c:	3277      	adds	r2, #119	@ 0x77
  42194e:	00db      	lsls	r3, r3, #3
  421950:	e72a      	b.n	4217a8 <_malloc_r+0x354>
  421952:	f240 5254 	movw	r2, #1364	@ 0x554
  421956:	4293      	cmp	r3, r2
  421958:	d819      	bhi.n	42198e <_malloc_r+0x53a>
  42195a:	0cab      	lsrs	r3, r5, #18
  42195c:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
  421960:	f103 0e7c 	add.w	lr, r3, #124	@ 0x7c
  421964:	00c3      	lsls	r3, r0, #3
  421966:	e5bb      	b.n	4214e0 <_malloc_r+0x8c>
  421968:	9a00      	ldr	r2, [sp, #0]
  42196a:	f04f 0b00 	mov.w	fp, #0
  42196e:	3a08      	subs	r2, #8
  421970:	4490      	add	r8, r2
  421972:	eba8 080a 	sub.w	r8, r8, sl
  421976:	e68d      	b.n	421694 <_malloc_r+0x240>
  421978:	f240 5354 	movw	r3, #1364	@ 0x554
  42197c:	429a      	cmp	r2, r3
  42197e:	d80c      	bhi.n	42199a <_malloc_r+0x546>
  421980:	ea4f 429c 	mov.w	r2, ip, lsr #18
  421984:	f102 037d 	add.w	r3, r2, #125	@ 0x7d
  421988:	327c      	adds	r2, #124	@ 0x7c
  42198a:	00db      	lsls	r3, r3, #3
  42198c:	e70c      	b.n	4217a8 <_malloc_r+0x354>
  42198e:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
  421992:	207f      	movs	r0, #127	@ 0x7f
  421994:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
  421998:	e5a2      	b.n	4214e0 <_malloc_r+0x8c>
  42199a:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
  42199e:	227e      	movs	r2, #126	@ 0x7e
  4219a0:	e702      	b.n	4217a8 <_malloc_r+0x354>
  4219a2:	6873      	ldr	r3, [r6, #4]
  4219a4:	e781      	b.n	4218aa <_malloc_r+0x456>
  4219a6:	bf00      	nop

004219a8 <__ascii_mbtowc>:
  4219a8:	b082      	sub	sp, #8
  4219aa:	b149      	cbz	r1, 4219c0 <__ascii_mbtowc+0x18>
  4219ac:	b15a      	cbz	r2, 4219c6 <__ascii_mbtowc+0x1e>
  4219ae:	b16b      	cbz	r3, 4219cc <__ascii_mbtowc+0x24>
  4219b0:	7813      	ldrb	r3, [r2, #0]
  4219b2:	600b      	str	r3, [r1, #0]
  4219b4:	7812      	ldrb	r2, [r2, #0]
  4219b6:	1e10      	subs	r0, r2, #0
  4219b8:	bf18      	it	ne
  4219ba:	2001      	movne	r0, #1
  4219bc:	b002      	add	sp, #8
  4219be:	4770      	bx	lr
  4219c0:	a901      	add	r1, sp, #4
  4219c2:	2a00      	cmp	r2, #0
  4219c4:	d1f3      	bne.n	4219ae <__ascii_mbtowc+0x6>
  4219c6:	4610      	mov	r0, r2
  4219c8:	b002      	add	sp, #8
  4219ca:	4770      	bx	lr
  4219cc:	f06f 0001 	mvn.w	r0, #1
  4219d0:	e7f4      	b.n	4219bc <__ascii_mbtowc+0x14>
  4219d2:	bf00      	nop
  4219d4:	0000      	movs	r0, r0
	...

004219d8 <_svfprintf_r>:
  4219d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4219dc:	ed2d 8b04 	vpush	{d8-d9}
  4219e0:	b0d3      	sub	sp, #332	@ 0x14c
  4219e2:	460c      	mov	r4, r1
  4219e4:	4682      	mov	sl, r0
  4219e6:	9109      	str	r1, [sp, #36]	@ 0x24
  4219e8:	af22      	add	r7, sp, #136	@ 0x88
  4219ea:	9205      	str	r2, [sp, #20]
  4219ec:	930b      	str	r3, [sp, #44]	@ 0x2c
  4219ee:	f7ff fa4f 	bl	420e90 <_localeconv_r>
  4219f2:	6803      	ldr	r3, [r0, #0]
  4219f4:	4618      	mov	r0, r3
  4219f6:	9314      	str	r3, [sp, #80]	@ 0x50
  4219f8:	f7ff fae8 	bl	420fcc <strlen>
  4219fc:	2208      	movs	r2, #8
  4219fe:	9012      	str	r0, [sp, #72]	@ 0x48
  421a00:	2100      	movs	r1, #0
  421a02:	4638      	mov	r0, r7
  421a04:	f7ff f94e 	bl	420ca4 <memset>
  421a08:	89a3      	ldrh	r3, [r4, #12]
  421a0a:	061b      	lsls	r3, r3, #24
  421a0c:	d503      	bpl.n	421a16 <_svfprintf_r+0x3e>
  421a0e:	6923      	ldr	r3, [r4, #16]
  421a10:	2b00      	cmp	r3, #0
  421a12:	f000 87cb 	beq.w	4229ac <_svfprintf_r+0xfd4>
  421a16:	2300      	movs	r3, #0
  421a18:	f8df 9214 	ldr.w	r9, [pc, #532]	@ 421c30 <_svfprintf_r+0x258>
  421a1c:	469e      	mov	lr, r3
  421a1e:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
  421a22:	ab29      	add	r3, sp, #164	@ 0xa4
  421a24:	f8cd e05c 	str.w	lr, [sp, #92]	@ 0x5c
  421a28:	f8cd e054 	str.w	lr, [sp, #84]	@ 0x54
  421a2c:	469b      	mov	fp, r3
  421a2e:	9326      	str	r3, [sp, #152]	@ 0x98
  421a30:	f8cd e04c 	str.w	lr, [sp, #76]	@ 0x4c
  421a34:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
  421a38:	f8cd e060 	str.w	lr, [sp, #96]	@ 0x60
  421a3c:	f8cd e018 	str.w	lr, [sp, #24]
  421a40:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
  421a44:	ed9f 8b78 	vldr	d8, [pc, #480]	@ 421c28 <_svfprintf_r+0x250>
  421a48:	9d05      	ldr	r5, [sp, #20]
  421a4a:	f8d9 40e4 	ldr.w	r4, [r9, #228]	@ 0xe4
  421a4e:	f7ff fa19 	bl	420e84 <__locale_mb_cur_max>
  421a52:	462a      	mov	r2, r5
  421a54:	4603      	mov	r3, r0
  421a56:	a91e      	add	r1, sp, #120	@ 0x78
  421a58:	4650      	mov	r0, sl
  421a5a:	9700      	str	r7, [sp, #0]
  421a5c:	47a0      	blx	r4
  421a5e:	2800      	cmp	r0, #0
  421a60:	4603      	mov	r3, r0
  421a62:	f000 80ad 	beq.w	421bc0 <_svfprintf_r+0x1e8>
  421a66:	f2c0 80a3 	blt.w	421bb0 <_svfprintf_r+0x1d8>
  421a6a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
  421a6c:	2a25      	cmp	r2, #37	@ 0x25
  421a6e:	d001      	beq.n	421a74 <_svfprintf_r+0x9c>
  421a70:	441d      	add	r5, r3
  421a72:	e7ea      	b.n	421a4a <_svfprintf_r+0x72>
  421a74:	9b05      	ldr	r3, [sp, #20]
  421a76:	4604      	mov	r4, r0
  421a78:	1aee      	subs	r6, r5, r3
  421a7a:	f040 80a5 	bne.w	421bc8 <_svfprintf_r+0x1f0>
  421a7e:	2300      	movs	r3, #0
  421a80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  421a84:	1c6c      	adds	r4, r5, #1
  421a86:	4619      	mov	r1, r3
  421a88:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
  421a8c:	9308      	str	r3, [sp, #32]
  421a8e:	786b      	ldrb	r3, [r5, #1]
  421a90:	9204      	str	r2, [sp, #16]
  421a92:	9102      	str	r1, [sp, #8]
  421a94:	3401      	adds	r4, #1
  421a96:	f1a3 0220 	sub.w	r2, r3, #32
  421a9a:	2a5a      	cmp	r2, #90	@ 0x5a
  421a9c:	f200 80ca 	bhi.w	421c34 <_svfprintf_r+0x25c>
  421aa0:	e8df f012 	tbh	[pc, r2, lsl #1]
  421aa4:	00c80320 	.word	0x00c80320
  421aa8:	031a00c8 	.word	0x031a00c8
  421aac:	00c800c8 	.word	0x00c800c8
  421ab0:	006b00c8 	.word	0x006b00c8
  421ab4:	00c800c8 	.word	0x00c800c8
  421ab8:	02570246 	.word	0x02570246
  421abc:	025100c8 	.word	0x025100c8
  421ac0:	00c80330 	.word	0x00c80330
  421ac4:	005b032a 	.word	0x005b032a
  421ac8:	005b005b 	.word	0x005b005b
  421acc:	005b005b 	.word	0x005b005b
  421ad0:	005b005b 	.word	0x005b005b
  421ad4:	005b005b 	.word	0x005b005b
  421ad8:	00c800c8 	.word	0x00c800c8
  421adc:	00c800c8 	.word	0x00c800c8
  421ae0:	00c800c8 	.word	0x00c800c8
  421ae4:	014c00c8 	.word	0x014c00c8
  421ae8:	01bc00c8 	.word	0x01bc00c8
  421aec:	014c02ff 	.word	0x014c02ff
  421af0:	014c014c 	.word	0x014c014c
  421af4:	00c800c8 	.word	0x00c800c8
  421af8:	00c800c8 	.word	0x00c800c8
  421afc:	00c802f9 	.word	0x00c802f9
  421b00:	02ac00c8 	.word	0x02ac00c8
  421b04:	00c800c8 	.word	0x00c800c8
  421b08:	01e800c8 	.word	0x01e800c8
  421b0c:	025c00c8 	.word	0x025c00c8
  421b10:	00c800c8 	.word	0x00c800c8
  421b14:	00c80729 	.word	0x00c80729
  421b18:	00c800c8 	.word	0x00c800c8
  421b1c:	00c800c8 	.word	0x00c800c8
  421b20:	00c800c8 	.word	0x00c800c8
  421b24:	014c00c8 	.word	0x014c00c8
  421b28:	01bc00c8 	.word	0x01bc00c8
  421b2c:	014c021d 	.word	0x014c021d
  421b30:	014c014c 	.word	0x014c014c
  421b34:	021d02c5 	.word	0x021d02c5
  421b38:	00c80080 	.word	0x00c80080
  421b3c:	00c802dd 	.word	0x00c802dd
  421b40:	075502ce 	.word	0x075502ce
  421b44:	008002e6 	.word	0x008002e6
  421b48:	01e800c8 	.word	0x01e800c8
  421b4c:	0750007e 	.word	0x0750007e
  421b50:	00c800c8 	.word	0x00c800c8
  421b54:	00c80759 	.word	0x00c80759
  421b58:	007e      	.short	0x007e
  421b5a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
  421b5e:	2300      	movs	r3, #0
  421b60:	4619      	mov	r1, r3
  421b62:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  421b66:	f814 3b01 	ldrb.w	r3, [r4], #1
  421b6a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  421b6e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
  421b72:	2a09      	cmp	r2, #9
  421b74:	d9f5      	bls.n	421b62 <_svfprintf_r+0x18a>
  421b76:	9108      	str	r1, [sp, #32]
  421b78:	e78d      	b.n	421a96 <_svfprintf_r+0xbe>
  421b7a:	4650      	mov	r0, sl
  421b7c:	f7ff f988 	bl	420e90 <_localeconv_r>
  421b80:	6843      	ldr	r3, [r0, #4]
  421b82:	4618      	mov	r0, r3
  421b84:	9318      	str	r3, [sp, #96]	@ 0x60
  421b86:	f7ff fa21 	bl	420fcc <strlen>
  421b8a:	9016      	str	r0, [sp, #88]	@ 0x58
  421b8c:	4605      	mov	r5, r0
  421b8e:	4650      	mov	r0, sl
  421b90:	f7ff f97e 	bl	420e90 <_localeconv_r>
  421b94:	6883      	ldr	r3, [r0, #8]
  421b96:	9313      	str	r3, [sp, #76]	@ 0x4c
  421b98:	b115      	cbz	r5, 421ba0 <_svfprintf_r+0x1c8>
  421b9a:	2b00      	cmp	r3, #0
  421b9c:	f040 8693 	bne.w	4228c6 <_svfprintf_r+0xeee>
  421ba0:	7823      	ldrb	r3, [r4, #0]
  421ba2:	e777      	b.n	421a94 <_svfprintf_r+0xbc>
  421ba4:	9b02      	ldr	r3, [sp, #8]
  421ba6:	f043 0320 	orr.w	r3, r3, #32
  421baa:	9302      	str	r3, [sp, #8]
  421bac:	7823      	ldrb	r3, [r4, #0]
  421bae:	e771      	b.n	421a94 <_svfprintf_r+0xbc>
  421bb0:	2208      	movs	r2, #8
  421bb2:	2100      	movs	r1, #0
  421bb4:	4638      	mov	r0, r7
  421bb6:	f7ff f875 	bl	420ca4 <memset>
  421bba:	2301      	movs	r3, #1
  421bbc:	441d      	add	r5, r3
  421bbe:	e744      	b.n	421a4a <_svfprintf_r+0x72>
  421bc0:	9b05      	ldr	r3, [sp, #20]
  421bc2:	4604      	mov	r4, r0
  421bc4:	1aee      	subs	r6, r5, r3
  421bc6:	d012      	beq.n	421bee <_svfprintf_r+0x216>
  421bc8:	9b05      	ldr	r3, [sp, #20]
  421bca:	e9cb 3600 	strd	r3, r6, [fp]
  421bce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  421bd0:	4433      	add	r3, r6
  421bd2:	9328      	str	r3, [sp, #160]	@ 0xa0
  421bd4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  421bd6:	3301      	adds	r3, #1
  421bd8:	2b07      	cmp	r3, #7
  421bda:	9327      	str	r3, [sp, #156]	@ 0x9c
  421bdc:	dc18      	bgt.n	421c10 <_svfprintf_r+0x238>
  421bde:	f10b 0b08 	add.w	fp, fp, #8
  421be2:	9b06      	ldr	r3, [sp, #24]
  421be4:	4433      	add	r3, r6
  421be6:	9306      	str	r3, [sp, #24]
  421be8:	2c00      	cmp	r4, #0
  421bea:	f47f af48 	bne.w	421a7e <_svfprintf_r+0xa6>
  421bee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
  421bf0:	2b00      	cmp	r3, #0
  421bf2:	f041 821b 	bne.w	42302c <_svfprintf_r+0x1654>
  421bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  421bf8:	899b      	ldrh	r3, [r3, #12]
  421bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  421bfe:	2b00      	cmp	r3, #0
  421c00:	f041 838f 	bne.w	423322 <_svfprintf_r+0x194a>
  421c04:	9806      	ldr	r0, [sp, #24]
  421c06:	b053      	add	sp, #332	@ 0x14c
  421c08:	ecbd 8b04 	vpop	{d8-d9}
  421c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421c10:	aa26      	add	r2, sp, #152	@ 0x98
  421c12:	9909      	ldr	r1, [sp, #36]	@ 0x24
  421c14:	4650      	mov	r0, sl
  421c16:	f003 f875 	bl	424d04 <__ssprint_r>
  421c1a:	2800      	cmp	r0, #0
  421c1c:	d1eb      	bne.n	421bf6 <_svfprintf_r+0x21e>
  421c1e:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  421c22:	e7de      	b.n	421be2 <_svfprintf_r+0x20a>
  421c24:	f3af 8000 	nop.w
	...
  421c30:	2000a36c 	.word	0x2000a36c
  421c34:	930d      	str	r3, [sp, #52]	@ 0x34
  421c36:	9405      	str	r4, [sp, #20]
  421c38:	2b00      	cmp	r3, #0
  421c3a:	d0d8      	beq.n	421bee <_svfprintf_r+0x216>
  421c3c:	2100      	movs	r1, #0
  421c3e:	aa39      	add	r2, sp, #228	@ 0xe4
  421c40:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
  421c44:	2301      	movs	r3, #1
  421c46:	f88d 106f 	strb.w	r1, [sp, #111]	@ 0x6f
  421c4a:	9303      	str	r3, [sp, #12]
  421c4c:	920c      	str	r2, [sp, #48]	@ 0x30
  421c4e:	910a      	str	r1, [sp, #40]	@ 0x28
  421c50:	9104      	str	r1, [sp, #16]
  421c52:	9307      	str	r3, [sp, #28]
  421c54:	9111      	str	r1, [sp, #68]	@ 0x44
  421c56:	e9cd 110e 	strd	r1, r1, [sp, #56]	@ 0x38
  421c5a:	9b02      	ldr	r3, [sp, #8]
  421c5c:	f013 0302 	ands.w	r3, r3, #2
  421c60:	d002      	beq.n	421c68 <_svfprintf_r+0x290>
  421c62:	9a03      	ldr	r2, [sp, #12]
  421c64:	3202      	adds	r2, #2
  421c66:	9203      	str	r2, [sp, #12]
  421c68:	9802      	ldr	r0, [sp, #8]
  421c6a:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  421c6c:	f010 0584 	ands.w	r5, r0, #132	@ 0x84
  421c70:	d105      	bne.n	421c7e <_svfprintf_r+0x2a6>
  421c72:	9808      	ldr	r0, [sp, #32]
  421c74:	9c03      	ldr	r4, [sp, #12]
  421c76:	1b04      	subs	r4, r0, r4
  421c78:	2c00      	cmp	r4, #0
  421c7a:	f300 8095 	bgt.w	421da8 <_svfprintf_r+0x3d0>
  421c7e:	b181      	cbz	r1, 421ca2 <_svfprintf_r+0x2ca>
  421c80:	2101      	movs	r1, #1
  421c82:	3201      	adds	r2, #1
  421c84:	f10d 006f 	add.w	r0, sp, #111	@ 0x6f
  421c88:	f8cb 1004 	str.w	r1, [fp, #4]
  421c8c:	9927      	ldr	r1, [sp, #156]	@ 0x9c
  421c8e:	9228      	str	r2, [sp, #160]	@ 0xa0
  421c90:	3101      	adds	r1, #1
  421c92:	f8cb 0000 	str.w	r0, [fp]
  421c96:	2907      	cmp	r1, #7
  421c98:	9127      	str	r1, [sp, #156]	@ 0x9c
  421c9a:	f300 83e1 	bgt.w	422460 <_svfprintf_r+0xa88>
  421c9e:	f10b 0b08 	add.w	fp, fp, #8
  421ca2:	b17b      	cbz	r3, 421cc4 <_svfprintf_r+0x2ec>
  421ca4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  421ca6:	a91c      	add	r1, sp, #112	@ 0x70
  421ca8:	3202      	adds	r2, #2
  421caa:	3301      	adds	r3, #1
  421cac:	f8cb 1000 	str.w	r1, [fp]
  421cb0:	2102      	movs	r1, #2
  421cb2:	9228      	str	r2, [sp, #160]	@ 0xa0
  421cb4:	2b07      	cmp	r3, #7
  421cb6:	9327      	str	r3, [sp, #156]	@ 0x9c
  421cb8:	f8cb 1004 	str.w	r1, [fp, #4]
  421cbc:	f300 83c4 	bgt.w	422448 <_svfprintf_r+0xa70>
  421cc0:	f10b 0b08 	add.w	fp, fp, #8
  421cc4:	2d80      	cmp	r5, #128	@ 0x80
  421cc6:	f000 8290 	beq.w	4221ea <_svfprintf_r+0x812>
  421cca:	9b04      	ldr	r3, [sp, #16]
  421ccc:	9907      	ldr	r1, [sp, #28]
  421cce:	1a5c      	subs	r4, r3, r1
  421cd0:	2c00      	cmp	r4, #0
  421cd2:	f300 82c9 	bgt.w	422268 <_svfprintf_r+0x890>
  421cd6:	9b02      	ldr	r3, [sp, #8]
  421cd8:	05d8      	lsls	r0, r3, #23
  421cda:	f100 822e 	bmi.w	42213a <_svfprintf_r+0x762>
  421cde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  421ce0:	f8cb 3000 	str.w	r3, [fp]
  421ce4:	9b07      	ldr	r3, [sp, #28]
  421ce6:	441a      	add	r2, r3
  421ce8:	f8cb 3004 	str.w	r3, [fp, #4]
  421cec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  421cee:	9228      	str	r2, [sp, #160]	@ 0xa0
  421cf0:	3301      	adds	r3, #1
  421cf2:	2b07      	cmp	r3, #7
  421cf4:	9327      	str	r3, [sp, #156]	@ 0x9c
  421cf6:	f300 8359 	bgt.w	4223ac <_svfprintf_r+0x9d4>
  421cfa:	f10b 0b08 	add.w	fp, fp, #8
  421cfe:	9b02      	ldr	r3, [sp, #8]
  421d00:	0759      	lsls	r1, r3, #29
  421d02:	d505      	bpl.n	421d10 <_svfprintf_r+0x338>
  421d04:	9b08      	ldr	r3, [sp, #32]
  421d06:	9903      	ldr	r1, [sp, #12]
  421d08:	1a5c      	subs	r4, r3, r1
  421d0a:	2c00      	cmp	r4, #0
  421d0c:	f300 83b6 	bgt.w	42247c <_svfprintf_r+0xaa4>
  421d10:	9b06      	ldr	r3, [sp, #24]
  421d12:	9908      	ldr	r1, [sp, #32]
  421d14:	9803      	ldr	r0, [sp, #12]
  421d16:	4281      	cmp	r1, r0
  421d18:	bfac      	ite	ge
  421d1a:	185b      	addge	r3, r3, r1
  421d1c:	181b      	addlt	r3, r3, r0
  421d1e:	9306      	str	r3, [sp, #24]
  421d20:	2a00      	cmp	r2, #0
  421d22:	f040 82f5 	bne.w	422310 <_svfprintf_r+0x938>
  421d26:	2300      	movs	r3, #0
  421d28:	9327      	str	r3, [sp, #156]	@ 0x9c
  421d2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  421d2c:	b11b      	cbz	r3, 421d36 <_svfprintf_r+0x35e>
  421d2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
  421d30:	4650      	mov	r0, sl
  421d32:	f7ff fa53 	bl	4211dc <_free_r>
  421d36:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  421d3a:	e685      	b.n	421a48 <_svfprintf_r+0x70>
  421d3c:	930d      	str	r3, [sp, #52]	@ 0x34
  421d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  421d40:	9405      	str	r4, [sp, #20]
  421d42:	3307      	adds	r3, #7
  421d44:	f023 0307 	bic.w	r3, r3, #7
  421d48:	ecb3 8b02 	vldmia	r3!, {d8}
  421d4c:	ed9f 7ba6 	vldr	d7, [pc, #664]	@ 421fe8 <_svfprintf_r+0x610>
  421d50:	eeb0 6bc8 	vabs.f64	d6, d8
  421d54:	930b      	str	r3, [sp, #44]	@ 0x2c
  421d56:	eeb4 6b47 	vcmp.f64	d6, d7
  421d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  421d5e:	f340 8522 	ble.w	4227a6 <_svfprintf_r+0xdce>
  421d62:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
  421d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  421d6a:	f101 811a 	bmi.w	422fa2 <_svfprintf_r+0x15ca>
  421d6e:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  421d72:	9b02      	ldr	r3, [sp, #8]
  421d74:	2000      	movs	r0, #0
  421d76:	4a9e      	ldr	r2, [pc, #632]	@ (421ff0 <_svfprintf_r+0x618>)
  421d78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  421d7c:	900a      	str	r0, [sp, #40]	@ 0x28
  421d7e:	9302      	str	r3, [sp, #8]
  421d80:	4b9c      	ldr	r3, [pc, #624]	@ (421ff4 <_svfprintf_r+0x61c>)
  421d82:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  421d84:	9011      	str	r0, [sp, #68]	@ 0x44
  421d86:	2c47      	cmp	r4, #71	@ 0x47
  421d88:	bfd8      	it	le
  421d8a:	461a      	movle	r2, r3
  421d8c:	2303      	movs	r3, #3
  421d8e:	920c      	str	r2, [sp, #48]	@ 0x30
  421d90:	9307      	str	r3, [sp, #28]
  421d92:	e9cd 3003 	strd	r3, r0, [sp, #12]
  421d96:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  421d9a:	2900      	cmp	r1, #0
  421d9c:	f43f af5d 	beq.w	421c5a <_svfprintf_r+0x282>
  421da0:	9b03      	ldr	r3, [sp, #12]
  421da2:	3301      	adds	r3, #1
  421da4:	9303      	str	r3, [sp, #12]
  421da6:	e758      	b.n	421c5a <_svfprintf_r+0x282>
  421da8:	2c10      	cmp	r4, #16
  421daa:	9927      	ldr	r1, [sp, #156]	@ 0x9c
  421dac:	4e92      	ldr	r6, [pc, #584]	@ (421ff8 <_svfprintf_r+0x620>)
  421dae:	dd25      	ble.n	421dfc <_svfprintf_r+0x424>
  421db0:	46dc      	mov	ip, fp
  421db2:	f04f 0810 	mov.w	r8, #16
  421db6:	46ab      	mov	fp, r5
  421db8:	9319      	str	r3, [sp, #100]	@ 0x64
  421dba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
  421dbc:	e002      	b.n	421dc4 <_svfprintf_r+0x3ec>
  421dbe:	3c10      	subs	r4, #16
  421dc0:	2c10      	cmp	r4, #16
  421dc2:	dd18      	ble.n	421df6 <_svfprintf_r+0x41e>
  421dc4:	3101      	adds	r1, #1
  421dc6:	3210      	adds	r2, #16
  421dc8:	2907      	cmp	r1, #7
  421dca:	e9cc 6800 	strd	r6, r8, [ip]
  421dce:	e9cd 1227 	strd	r1, r2, [sp, #156]	@ 0x9c
  421dd2:	f10c 0c08 	add.w	ip, ip, #8
  421dd6:	ddf2      	ble.n	421dbe <_svfprintf_r+0x3e6>
  421dd8:	aa26      	add	r2, sp, #152	@ 0x98
  421dda:	4629      	mov	r1, r5
  421ddc:	4650      	mov	r0, sl
  421dde:	f002 ff91 	bl	424d04 <__ssprint_r>
  421de2:	f10d 0ca4 	add.w	ip, sp, #164	@ 0xa4
  421de6:	2800      	cmp	r0, #0
  421de8:	f040 829a 	bne.w	422320 <_svfprintf_r+0x948>
  421dec:	3c10      	subs	r4, #16
  421dee:	2c10      	cmp	r4, #16
  421df0:	e9dd 1227 	ldrd	r1, r2, [sp, #156]	@ 0x9c
  421df4:	dce6      	bgt.n	421dc4 <_svfprintf_r+0x3ec>
  421df6:	465d      	mov	r5, fp
  421df8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
  421dfa:	46e3      	mov	fp, ip
  421dfc:	3101      	adds	r1, #1
  421dfe:	4422      	add	r2, r4
  421e00:	f8cb 6000 	str.w	r6, [fp]
  421e04:	2907      	cmp	r1, #7
  421e06:	f8cb 4004 	str.w	r4, [fp, #4]
  421e0a:	e9cd 1227 	strd	r1, r2, [sp, #156]	@ 0x9c
  421e0e:	f300 86d1 	bgt.w	422bb4 <_svfprintf_r+0x11dc>
  421e12:	f10b 0b08 	add.w	fp, fp, #8
  421e16:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  421e1a:	e730      	b.n	421c7e <_svfprintf_r+0x2a6>
  421e1c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  421e1e:	2b43      	cmp	r3, #67	@ 0x43
  421e20:	9405      	str	r4, [sp, #20]
  421e22:	930d      	str	r3, [sp, #52]	@ 0x34
  421e24:	f102 0404 	add.w	r4, r2, #4
  421e28:	d003      	beq.n	421e32 <_svfprintf_r+0x45a>
  421e2a:	9b02      	ldr	r3, [sp, #8]
  421e2c:	06de      	lsls	r6, r3, #27
  421e2e:	f140 8597 	bpl.w	422960 <_svfprintf_r+0xf88>
  421e32:	2208      	movs	r2, #8
  421e34:	2100      	movs	r1, #0
  421e36:	a824      	add	r0, sp, #144	@ 0x90
  421e38:	ae39      	add	r6, sp, #228	@ 0xe4
  421e3a:	f7fe ff33 	bl	420ca4 <memset>
  421e3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  421e40:	ab24      	add	r3, sp, #144	@ 0x90
  421e42:	4650      	mov	r0, sl
  421e44:	6812      	ldr	r2, [r2, #0]
  421e46:	4631      	mov	r1, r6
  421e48:	f7ff f8ee 	bl	421028 <_wcrtomb_r>
  421e4c:	4603      	mov	r3, r0
  421e4e:	9007      	str	r0, [sp, #28]
  421e50:	3301      	adds	r3, #1
  421e52:	f001 8261 	beq.w	423318 <_svfprintf_r+0x1940>
  421e56:	9b07      	ldr	r3, [sp, #28]
  421e58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  421e5c:	9303      	str	r3, [sp, #12]
  421e5e:	2100      	movs	r1, #0
  421e60:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  421e64:	f88d 106f 	strb.w	r1, [sp, #111]	@ 0x6f
  421e68:	910a      	str	r1, [sp, #40]	@ 0x28
  421e6a:	9104      	str	r1, [sp, #16]
  421e6c:	9111      	str	r1, [sp, #68]	@ 0x44
  421e6e:	e9cd 110e 	strd	r1, r1, [sp, #56]	@ 0x38
  421e72:	e6f2      	b.n	421c5a <_svfprintf_r+0x282>
  421e74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
  421e76:	930d      	str	r3, [sp, #52]	@ 0x34
  421e78:	2300      	movs	r3, #0
  421e7a:	9405      	str	r4, [sp, #20]
  421e7c:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
  421e80:	f856 3b04 	ldr.w	r3, [r6], #4
  421e84:	930c      	str	r3, [sp, #48]	@ 0x30
  421e86:	2b00      	cmp	r3, #0
  421e88:	f000 859f 	beq.w	4229ca <_svfprintf_r+0xff2>
  421e8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  421e8e:	2b53      	cmp	r3, #83	@ 0x53
  421e90:	f000 86bb 	beq.w	422c0a <_svfprintf_r+0x1232>
  421e94:	9b02      	ldr	r3, [sp, #8]
  421e96:	f013 0310 	ands.w	r3, r3, #16
  421e9a:	930e      	str	r3, [sp, #56]	@ 0x38
  421e9c:	f040 86b5 	bne.w	422c0a <_svfprintf_r+0x1232>
  421ea0:	9b04      	ldr	r3, [sp, #16]
  421ea2:	2b00      	cmp	r3, #0
  421ea4:	f2c1 80af 	blt.w	423006 <_svfprintf_r+0x162e>
  421ea8:	461a      	mov	r2, r3
  421eaa:	990e      	ldr	r1, [sp, #56]	@ 0x38
  421eac:	980c      	ldr	r0, [sp, #48]	@ 0x30
  421eae:	f7ff f841 	bl	420f34 <memchr>
  421eb2:	900a      	str	r0, [sp, #40]	@ 0x28
  421eb4:	2800      	cmp	r0, #0
  421eb6:	f001 82c2 	beq.w	42343e <_svfprintf_r+0x1a66>
  421eba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  421ebc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  421ebe:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  421ec2:	1a9a      	subs	r2, r3, r2
  421ec4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  421ec6:	960b      	str	r6, [sp, #44]	@ 0x2c
  421ec8:	9207      	str	r2, [sp, #28]
  421eca:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  421ece:	9304      	str	r3, [sp, #16]
  421ed0:	9203      	str	r2, [sp, #12]
  421ed2:	2273      	movs	r2, #115	@ 0x73
  421ed4:	9311      	str	r3, [sp, #68]	@ 0x44
  421ed6:	920d      	str	r2, [sp, #52]	@ 0x34
  421ed8:	930f      	str	r3, [sp, #60]	@ 0x3c
  421eda:	930a      	str	r3, [sp, #40]	@ 0x28
  421edc:	e75d      	b.n	421d9a <_svfprintf_r+0x3c2>
  421ede:	930d      	str	r3, [sp, #52]	@ 0x34
  421ee0:	9b02      	ldr	r3, [sp, #8]
  421ee2:	9405      	str	r4, [sp, #20]
  421ee4:	069d      	lsls	r5, r3, #26
  421ee6:	f140 80e6 	bpl.w	4220b6 <_svfprintf_r+0x6de>
  421eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  421eec:	3307      	adds	r3, #7
  421eee:	f023 0307 	bic.w	r3, r3, #7
  421ef2:	461a      	mov	r2, r3
  421ef4:	6859      	ldr	r1, [r3, #4]
  421ef6:	f852 3b08 	ldr.w	r3, [r2], #8
  421efa:	920b      	str	r2, [sp, #44]	@ 0x2c
  421efc:	460a      	mov	r2, r1
  421efe:	2900      	cmp	r1, #0
  421f00:	f2c0 840f 	blt.w	422722 <_svfprintf_r+0xd4a>
  421f04:	9904      	ldr	r1, [sp, #16]
  421f06:	2900      	cmp	r1, #0
  421f08:	f2c0 8307 	blt.w	42251a <_svfprintf_r+0xb42>
  421f0c:	9902      	ldr	r1, [sp, #8]
  421f0e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
  421f12:	9102      	str	r1, [sp, #8]
  421f14:	f040 8301 	bne.w	42251a <_svfprintf_r+0xb42>
  421f18:	ea53 0102 	orrs.w	r1, r3, r2
  421f1c:	bf14      	ite	ne
  421f1e:	2101      	movne	r1, #1
  421f20:	2100      	moveq	r1, #0
  421f22:	f040 82fa 	bne.w	42251a <_svfprintf_r+0xb42>
  421f26:	ab52      	add	r3, sp, #328	@ 0x148
  421f28:	9104      	str	r1, [sp, #16]
  421f2a:	9107      	str	r1, [sp, #28]
  421f2c:	930c      	str	r3, [sp, #48]	@ 0x30
  421f2e:	e04b      	b.n	421fc8 <_svfprintf_r+0x5f0>
  421f30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  421f32:	f853 2b04 	ldr.w	r2, [r3], #4
  421f36:	2a00      	cmp	r2, #0
  421f38:	9208      	str	r2, [sp, #32]
  421f3a:	f280 8418 	bge.w	42276e <_svfprintf_r+0xd96>
  421f3e:	9a08      	ldr	r2, [sp, #32]
  421f40:	930b      	str	r3, [sp, #44]	@ 0x2c
  421f42:	4252      	negs	r2, r2
  421f44:	9208      	str	r2, [sp, #32]
  421f46:	9b02      	ldr	r3, [sp, #8]
  421f48:	f043 0304 	orr.w	r3, r3, #4
  421f4c:	9302      	str	r3, [sp, #8]
  421f4e:	7823      	ldrb	r3, [r4, #0]
  421f50:	e5a0      	b.n	421a94 <_svfprintf_r+0xbc>
  421f52:	232b      	movs	r3, #43	@ 0x2b
  421f54:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
  421f58:	7823      	ldrb	r3, [r4, #0]
  421f5a:	e59b      	b.n	421a94 <_svfprintf_r+0xbc>
  421f5c:	930d      	str	r3, [sp, #52]	@ 0x34
  421f5e:	9b02      	ldr	r3, [sp, #8]
  421f60:	9405      	str	r4, [sp, #20]
  421f62:	f043 0510 	orr.w	r5, r3, #16
  421f66:	f015 0220 	ands.w	r2, r5, #32
  421f6a:	f000 83b5 	beq.w	4226d8 <_svfprintf_r+0xd00>
  421f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  421f70:	2101      	movs	r1, #1
  421f72:	3307      	adds	r3, #7
  421f74:	f023 0307 	bic.w	r3, r3, #7
  421f78:	4618      	mov	r0, r3
  421f7a:	685a      	ldr	r2, [r3, #4]
  421f7c:	f850 3b08 	ldr.w	r3, [r0], #8
  421f80:	900b      	str	r0, [sp, #44]	@ 0x2c
  421f82:	2000      	movs	r0, #0
  421f84:	9c04      	ldr	r4, [sp, #16]
  421f86:	f88d 006f 	strb.w	r0, [sp, #111]	@ 0x6f
  421f8a:	2c00      	cmp	r4, #0
  421f8c:	f2c0 819f 	blt.w	4222ce <_svfprintf_r+0x8f6>
  421f90:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
  421f94:	9002      	str	r0, [sp, #8]
  421f96:	ea53 0002 	orrs.w	r0, r3, r2
  421f9a:	f040 8197 	bne.w	4222cc <_svfprintf_r+0x8f4>
  421f9e:	1e20      	subs	r0, r4, #0
  421fa0:	bf18      	it	ne
  421fa2:	2001      	movne	r0, #1
  421fa4:	2c00      	cmp	r4, #0
  421fa6:	f040 8191 	bne.w	4222cc <_svfprintf_r+0x8f4>
  421faa:	2900      	cmp	r1, #0
  421fac:	f040 829d 	bne.w	4224ea <_svfprintf_r+0xb12>
  421fb0:	f015 0301 	ands.w	r3, r5, #1
  421fb4:	9104      	str	r1, [sp, #16]
  421fb6:	9307      	str	r3, [sp, #28]
  421fb8:	f000 833a 	beq.w	422630 <_svfprintf_r+0xc58>
  421fbc:	2330      	movs	r3, #48	@ 0x30
  421fbe:	f88d 3147 	strb.w	r3, [sp, #327]	@ 0x147
  421fc2:	f20d 1347 	addw	r3, sp, #327	@ 0x147
  421fc6:	930c      	str	r3, [sp, #48]	@ 0x30
  421fc8:	9a04      	ldr	r2, [sp, #16]
  421fca:	2300      	movs	r3, #0
  421fcc:	9807      	ldr	r0, [sp, #28]
  421fce:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  421fd2:	4282      	cmp	r2, r0
  421fd4:	930a      	str	r3, [sp, #40]	@ 0x28
  421fd6:	9311      	str	r3, [sp, #68]	@ 0x44
  421fd8:	bfb8      	it	lt
  421fda:	4602      	movlt	r2, r0
  421fdc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  421fe0:	9203      	str	r2, [sp, #12]
  421fe2:	e6da      	b.n	421d9a <_svfprintf_r+0x3c2>
  421fe4:	f3af 8000 	nop.w
  421fe8:	ffffffff 	.word	0xffffffff
  421fec:	7fefffff 	.word	0x7fefffff
  421ff0:	00434de8 	.word	0x00434de8
  421ff4:	00434de4 	.word	0x00434de4
  421ff8:	0043c644 	.word	0x0043c644
  421ffc:	930d      	str	r3, [sp, #52]	@ 0x34
  421ffe:	9b02      	ldr	r3, [sp, #8]
  422000:	9405      	str	r4, [sp, #20]
  422002:	f043 0310 	orr.w	r3, r3, #16
  422006:	9302      	str	r3, [sp, #8]
  422008:	9b02      	ldr	r3, [sp, #8]
  42200a:	f013 0220 	ands.w	r2, r3, #32
  42200e:	f000 8379 	beq.w	422704 <_svfprintf_r+0xd2c>
  422012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  422014:	3307      	adds	r3, #7
  422016:	f023 0307 	bic.w	r3, r3, #7
  42201a:	4619      	mov	r1, r3
  42201c:	685a      	ldr	r2, [r3, #4]
  42201e:	f851 3b08 	ldr.w	r3, [r1], #8
  422022:	910b      	str	r1, [sp, #44]	@ 0x2c
  422024:	9902      	ldr	r1, [sp, #8]
  422026:	f421 6580 	bic.w	r5, r1, #1024	@ 0x400
  42202a:	2100      	movs	r1, #0
  42202c:	e7a9      	b.n	421f82 <_svfprintf_r+0x5aa>
  42202e:	7823      	ldrb	r3, [r4, #0]
  422030:	2b68      	cmp	r3, #104	@ 0x68
  422032:	f000 84ab 	beq.w	42298c <_svfprintf_r+0xfb4>
  422036:	9a02      	ldr	r2, [sp, #8]
  422038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
  42203c:	9202      	str	r2, [sp, #8]
  42203e:	e529      	b.n	421a94 <_svfprintf_r+0xbc>
  422040:	9b02      	ldr	r3, [sp, #8]
  422042:	9405      	str	r4, [sp, #20]
  422044:	069c      	lsls	r4, r3, #26
  422046:	f140 839d 	bpl.w	422784 <_svfprintf_r+0xdac>
  42204a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  42204c:	9a06      	ldr	r2, [sp, #24]
  42204e:	681b      	ldr	r3, [r3, #0]
  422050:	601a      	str	r2, [r3, #0]
  422052:	17d2      	asrs	r2, r2, #31
  422054:	605a      	str	r2, [r3, #4]
  422056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  422058:	3304      	adds	r3, #4
  42205a:	930b      	str	r3, [sp, #44]	@ 0x2c
  42205c:	e4f4      	b.n	421a48 <_svfprintf_r+0x70>
  42205e:	7823      	ldrb	r3, [r4, #0]
  422060:	2b6c      	cmp	r3, #108	@ 0x6c
  422062:	f000 849b 	beq.w	42299c <_svfprintf_r+0xfc4>
  422066:	9a02      	ldr	r2, [sp, #8]
  422068:	f042 0210 	orr.w	r2, r2, #16
  42206c:	9202      	str	r2, [sp, #8]
  42206e:	e511      	b.n	421a94 <_svfprintf_r+0xbc>
  422070:	9b02      	ldr	r3, [sp, #8]
  422072:	2078      	movs	r0, #120	@ 0x78
  422074:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  422076:	f043 0502 	orr.w	r5, r3, #2
  42207a:	f647 0330 	movw	r3, #30768	@ 0x7830
  42207e:	49af      	ldr	r1, [pc, #700]	@ (42233c <_svfprintf_r+0x964>)
  422080:	f8ad 3070 	strh.w	r3, [sp, #112]	@ 0x70
  422084:	f852 3b04 	ldr.w	r3, [r2], #4
  422088:	9117      	str	r1, [sp, #92]	@ 0x5c
  42208a:	2102      	movs	r1, #2
  42208c:	920b      	str	r2, [sp, #44]	@ 0x2c
  42208e:	2200      	movs	r2, #0
  422090:	9405      	str	r4, [sp, #20]
  422092:	900d      	str	r0, [sp, #52]	@ 0x34
  422094:	e775      	b.n	421f82 <_svfprintf_r+0x5aa>
  422096:	9b02      	ldr	r3, [sp, #8]
  422098:	f043 0308 	orr.w	r3, r3, #8
  42209c:	9302      	str	r3, [sp, #8]
  42209e:	7823      	ldrb	r3, [r4, #0]
  4220a0:	e4f8      	b.n	421a94 <_svfprintf_r+0xbc>
  4220a2:	930d      	str	r3, [sp, #52]	@ 0x34
  4220a4:	9b02      	ldr	r3, [sp, #8]
  4220a6:	9405      	str	r4, [sp, #20]
  4220a8:	f043 0310 	orr.w	r3, r3, #16
  4220ac:	9302      	str	r3, [sp, #8]
  4220ae:	9b02      	ldr	r3, [sp, #8]
  4220b0:	069d      	lsls	r5, r3, #26
  4220b2:	f53f af1a 	bmi.w	421eea <_svfprintf_r+0x512>
  4220b6:	9902      	ldr	r1, [sp, #8]
  4220b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  4220ba:	06cc      	lsls	r4, r1, #27
  4220bc:	f852 3b04 	ldr.w	r3, [r2], #4
  4220c0:	f100 83fc 	bmi.w	4228bc <_svfprintf_r+0xee4>
  4220c4:	9902      	ldr	r1, [sp, #8]
  4220c6:	0648      	lsls	r0, r1, #25
  4220c8:	f140 8664 	bpl.w	422d94 <_svfprintf_r+0x13bc>
  4220cc:	920b      	str	r2, [sp, #44]	@ 0x2c
  4220ce:	f343 32c0 	sbfx	r2, r3, #15, #1
  4220d2:	b21b      	sxth	r3, r3
  4220d4:	4611      	mov	r1, r2
  4220d6:	e712      	b.n	421efe <_svfprintf_r+0x526>
  4220d8:	9b02      	ldr	r3, [sp, #8]
  4220da:	f043 0301 	orr.w	r3, r3, #1
  4220de:	9302      	str	r3, [sp, #8]
  4220e0:	7823      	ldrb	r3, [r4, #0]
  4220e2:	e4d7      	b.n	421a94 <_svfprintf_r+0xbc>
  4220e4:	f89d 206f 	ldrb.w	r2, [sp, #111]	@ 0x6f
  4220e8:	7823      	ldrb	r3, [r4, #0]
  4220ea:	2a00      	cmp	r2, #0
  4220ec:	f47f acd2 	bne.w	421a94 <_svfprintf_r+0xbc>
  4220f0:	2220      	movs	r2, #32
  4220f2:	f88d 206f 	strb.w	r2, [sp, #111]	@ 0x6f
  4220f6:	e4cd      	b.n	421a94 <_svfprintf_r+0xbc>
  4220f8:	9b02      	ldr	r3, [sp, #8]
  4220fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
  4220fe:	9302      	str	r3, [sp, #8]
  422100:	7823      	ldrb	r3, [r4, #0]
  422102:	e4c7      	b.n	421a94 <_svfprintf_r+0xbc>
  422104:	4620      	mov	r0, r4
  422106:	f810 3b01 	ldrb.w	r3, [r0], #1
  42210a:	2b2a      	cmp	r3, #42	@ 0x2a
  42210c:	f001 81e1 	beq.w	4234d2 <_svfprintf_r+0x1afa>
  422110:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
  422114:	2a09      	cmp	r2, #9
  422116:	f201 80ac 	bhi.w	423272 <_svfprintf_r+0x189a>
  42211a:	2100      	movs	r1, #0
  42211c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  422120:	f810 3b01 	ldrb.w	r3, [r0], #1
  422124:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  422128:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
  42212c:	2a09      	cmp	r2, #9
  42212e:	d9f5      	bls.n	42211c <_svfprintf_r+0x744>
  422130:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
  422134:	4604      	mov	r4, r0
  422136:	9204      	str	r2, [sp, #16]
  422138:	e4ad      	b.n	421a96 <_svfprintf_r+0xbe>
  42213a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  42213c:	2b65      	cmp	r3, #101	@ 0x65
  42213e:	f340 8140 	ble.w	4223c2 <_svfprintf_r+0x9ea>
  422142:	eeb5 8b40 	vcmp.f64	d8, #0.0
  422146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  42214a:	f040 81f6 	bne.w	42253a <_svfprintf_r+0xb62>
  42214e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  422150:	3201      	adds	r2, #1
  422152:	497b      	ldr	r1, [pc, #492]	@ (422340 <_svfprintf_r+0x968>)
  422154:	3301      	adds	r3, #1
  422156:	9228      	str	r2, [sp, #160]	@ 0xa0
  422158:	f8cb 1000 	str.w	r1, [fp]
  42215c:	2101      	movs	r1, #1
  42215e:	2b07      	cmp	r3, #7
  422160:	9327      	str	r3, [sp, #156]	@ 0x9c
  422162:	f8cb 1004 	str.w	r1, [fp, #4]
  422166:	f300 8543 	bgt.w	422bf0 <_svfprintf_r+0x1218>
  42216a:	f10b 0b08 	add.w	fp, fp, #8
  42216e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
  422170:	9910      	ldr	r1, [sp, #64]	@ 0x40
  422172:	428b      	cmp	r3, r1
  422174:	f280 82f6 	bge.w	422764 <_svfprintf_r+0xd8c>
  422178:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  42217a:	9914      	ldr	r1, [sp, #80]	@ 0x50
  42217c:	441a      	add	r2, r3
  42217e:	e9cb 1300 	strd	r1, r3, [fp]
  422182:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  422184:	9228      	str	r2, [sp, #160]	@ 0xa0
  422186:	3301      	adds	r3, #1
  422188:	2b07      	cmp	r3, #7
  42218a:	9327      	str	r3, [sp, #156]	@ 0x9c
  42218c:	f300 83f2 	bgt.w	422974 <_svfprintf_r+0xf9c>
  422190:	f10b 0b08 	add.w	fp, fp, #8
  422194:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  422196:	1e5c      	subs	r4, r3, #1
  422198:	2c00      	cmp	r4, #0
  42219a:	f77f adb0 	ble.w	421cfe <_svfprintf_r+0x326>
  42219e:	2c10      	cmp	r4, #16
  4221a0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  4221a2:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 422344 <_svfprintf_r+0x96c>
  4221a6:	f340 8559 	ble.w	422c5c <_svfprintf_r+0x1284>
  4221aa:	4646      	mov	r6, r8
  4221ac:	2510      	movs	r5, #16
  4221ae:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  4221b2:	e003      	b.n	4221bc <_svfprintf_r+0x7e4>
  4221b4:	3c10      	subs	r4, #16
  4221b6:	2c10      	cmp	r4, #16
  4221b8:	f340 854f 	ble.w	422c5a <_svfprintf_r+0x1282>
  4221bc:	3301      	adds	r3, #1
  4221be:	3210      	adds	r2, #16
  4221c0:	2b07      	cmp	r3, #7
  4221c2:	e9cb 6500 	strd	r6, r5, [fp]
  4221c6:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  4221ca:	f10b 0b08 	add.w	fp, fp, #8
  4221ce:	ddf1      	ble.n	4221b4 <_svfprintf_r+0x7dc>
  4221d0:	aa26      	add	r2, sp, #152	@ 0x98
  4221d2:	4641      	mov	r1, r8
  4221d4:	4650      	mov	r0, sl
  4221d6:	f002 fd95 	bl	424d04 <__ssprint_r>
  4221da:	2800      	cmp	r0, #0
  4221dc:	f040 80a0 	bne.w	422320 <_svfprintf_r+0x948>
  4221e0:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  4221e4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  4221e8:	e7e4      	b.n	4221b4 <_svfprintf_r+0x7dc>
  4221ea:	9b08      	ldr	r3, [sp, #32]
  4221ec:	9903      	ldr	r1, [sp, #12]
  4221ee:	1a5c      	subs	r4, r3, r1
  4221f0:	2c00      	cmp	r4, #0
  4221f2:	f77f ad6a 	ble.w	421cca <_svfprintf_r+0x2f2>
  4221f6:	2c10      	cmp	r4, #16
  4221f8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  4221fa:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 422344 <_svfprintf_r+0x96c>
  4221fe:	dd20      	ble.n	422242 <_svfprintf_r+0x86a>
  422200:	4646      	mov	r6, r8
  422202:	2510      	movs	r5, #16
  422204:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  422208:	e002      	b.n	422210 <_svfprintf_r+0x838>
  42220a:	3c10      	subs	r4, #16
  42220c:	2c10      	cmp	r4, #16
  42220e:	dd17      	ble.n	422240 <_svfprintf_r+0x868>
  422210:	3301      	adds	r3, #1
  422212:	3210      	adds	r2, #16
  422214:	2b07      	cmp	r3, #7
  422216:	e9cb 6500 	strd	r6, r5, [fp]
  42221a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  42221e:	f10b 0b08 	add.w	fp, fp, #8
  422222:	ddf2      	ble.n	42220a <_svfprintf_r+0x832>
  422224:	aa26      	add	r2, sp, #152	@ 0x98
  422226:	4641      	mov	r1, r8
  422228:	4650      	mov	r0, sl
  42222a:	f002 fd6b 	bl	424d04 <__ssprint_r>
  42222e:	2800      	cmp	r0, #0
  422230:	d176      	bne.n	422320 <_svfprintf_r+0x948>
  422232:	3c10      	subs	r4, #16
  422234:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  422238:	2c10      	cmp	r4, #16
  42223a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  42223e:	dce7      	bgt.n	422210 <_svfprintf_r+0x838>
  422240:	46b0      	mov	r8, r6
  422242:	3301      	adds	r3, #1
  422244:	4422      	add	r2, r4
  422246:	f8cb 8000 	str.w	r8, [fp]
  42224a:	2b07      	cmp	r3, #7
  42224c:	f8cb 4004 	str.w	r4, [fp, #4]
  422250:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  422254:	f300 856b 	bgt.w	422d2e <_svfprintf_r+0x1356>
  422258:	9b04      	ldr	r3, [sp, #16]
  42225a:	f10b 0b08 	add.w	fp, fp, #8
  42225e:	9907      	ldr	r1, [sp, #28]
  422260:	1a5c      	subs	r4, r3, r1
  422262:	2c00      	cmp	r4, #0
  422264:	f77f ad37 	ble.w	421cd6 <_svfprintf_r+0x2fe>
  422268:	2c10      	cmp	r4, #16
  42226a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  42226c:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 422344 <_svfprintf_r+0x96c>
  422270:	dd1e      	ble.n	4222b0 <_svfprintf_r+0x8d8>
  422272:	2510      	movs	r5, #16
  422274:	9e09      	ldr	r6, [sp, #36]	@ 0x24
  422276:	e002      	b.n	42227e <_svfprintf_r+0x8a6>
  422278:	3c10      	subs	r4, #16
  42227a:	2c10      	cmp	r4, #16
  42227c:	dd18      	ble.n	4222b0 <_svfprintf_r+0x8d8>
  42227e:	3301      	adds	r3, #1
  422280:	3210      	adds	r2, #16
  422282:	4930      	ldr	r1, [pc, #192]	@ (422344 <_svfprintf_r+0x96c>)
  422284:	2b07      	cmp	r3, #7
  422286:	e9cb 1500 	strd	r1, r5, [fp]
  42228a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  42228e:	f10b 0b08 	add.w	fp, fp, #8
  422292:	ddf1      	ble.n	422278 <_svfprintf_r+0x8a0>
  422294:	aa26      	add	r2, sp, #152	@ 0x98
  422296:	4631      	mov	r1, r6
  422298:	4650      	mov	r0, sl
  42229a:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  42229e:	f002 fd31 	bl	424d04 <__ssprint_r>
  4222a2:	2800      	cmp	r0, #0
  4222a4:	d13c      	bne.n	422320 <_svfprintf_r+0x948>
  4222a6:	3c10      	subs	r4, #16
  4222a8:	2c10      	cmp	r4, #16
  4222aa:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  4222ae:	dce6      	bgt.n	42227e <_svfprintf_r+0x8a6>
  4222b0:	3301      	adds	r3, #1
  4222b2:	4422      	add	r2, r4
  4222b4:	f8cb 8000 	str.w	r8, [fp]
  4222b8:	2b07      	cmp	r3, #7
  4222ba:	f8cb 4004 	str.w	r4, [fp, #4]
  4222be:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  4222c2:	f300 81fc 	bgt.w	4226be <_svfprintf_r+0xce6>
  4222c6:	f10b 0b08 	add.w	fp, fp, #8
  4222ca:	e504      	b.n	421cd6 <_svfprintf_r+0x2fe>
  4222cc:	9d02      	ldr	r5, [sp, #8]
  4222ce:	2901      	cmp	r1, #1
  4222d0:	f000 8124 	beq.w	42251c <_svfprintf_r+0xb44>
  4222d4:	2902      	cmp	r1, #2
  4222d6:	a952      	add	r1, sp, #328	@ 0x148
  4222d8:	f000 810c 	beq.w	4224f4 <_svfprintf_r+0xb1c>
  4222dc:	460c      	mov	r4, r1
  4222de:	f003 0107 	and.w	r1, r3, #7
  4222e2:	08db      	lsrs	r3, r3, #3
  4222e4:	4620      	mov	r0, r4
  4222e6:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
  4222ea:	3130      	adds	r1, #48	@ 0x30
  4222ec:	08d2      	lsrs	r2, r2, #3
  4222ee:	f804 1d01 	strb.w	r1, [r4, #-1]!
  4222f2:	ea53 0602 	orrs.w	r6, r3, r2
  4222f6:	d1f2      	bne.n	4222de <_svfprintf_r+0x906>
  4222f8:	2930      	cmp	r1, #48	@ 0x30
  4222fa:	940c      	str	r4, [sp, #48]	@ 0x30
  4222fc:	d002      	beq.n	422304 <_svfprintf_r+0x92c>
  4222fe:	07ec      	lsls	r4, r5, #31
  422300:	f100 82ed 	bmi.w	4228de <_svfprintf_r+0xf06>
  422304:	ab52      	add	r3, sp, #328	@ 0x148
  422306:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  422308:	9502      	str	r5, [sp, #8]
  42230a:	1a9b      	subs	r3, r3, r2
  42230c:	9307      	str	r3, [sp, #28]
  42230e:	e65b      	b.n	421fc8 <_svfprintf_r+0x5f0>
  422310:	aa26      	add	r2, sp, #152	@ 0x98
  422312:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422314:	4650      	mov	r0, sl
  422316:	f002 fcf5 	bl	424d04 <__ssprint_r>
  42231a:	2800      	cmp	r0, #0
  42231c:	f43f ad03 	beq.w	421d26 <_svfprintf_r+0x34e>
  422320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  422322:	2b00      	cmp	r3, #0
  422324:	f43f ac67 	beq.w	421bf6 <_svfprintf_r+0x21e>
  422328:	990a      	ldr	r1, [sp, #40]	@ 0x28
  42232a:	4650      	mov	r0, sl
  42232c:	f7fe ff56 	bl	4211dc <_free_r>
  422330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  422332:	899b      	ldrh	r3, [r3, #12]
  422334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  422338:	e461      	b.n	421bfe <_svfprintf_r+0x226>
  42233a:	bf00      	nop
  42233c:	00434d84 	.word	0x00434d84
  422340:	00434a64 	.word	0x00434a64
  422344:	0043c634 	.word	0x0043c634
  422348:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  42234a:	3201      	adds	r2, #1
  42234c:	48b5      	ldr	r0, [pc, #724]	@ (422624 <_svfprintf_r+0xc4c>)
  42234e:	3301      	adds	r3, #1
  422350:	9228      	str	r2, [sp, #160]	@ 0xa0
  422352:	f8cb 0000 	str.w	r0, [fp]
  422356:	2001      	movs	r0, #1
  422358:	2b07      	cmp	r3, #7
  42235a:	9327      	str	r3, [sp, #156]	@ 0x9c
  42235c:	f8cb 0004 	str.w	r0, [fp, #4]
  422360:	f300 8624 	bgt.w	422fac <_svfprintf_r+0x15d4>
  422364:	f10b 0b08 	add.w	fp, fp, #8
  422368:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  42236a:	430b      	orrs	r3, r1
  42236c:	f000 872d 	beq.w	4231ca <_svfprintf_r+0x17f2>
  422370:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  422372:	9814      	ldr	r0, [sp, #80]	@ 0x50
  422374:	441a      	add	r2, r3
  422376:	e9cb 0300 	strd	r0, r3, [fp]
  42237a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  42237c:	9228      	str	r2, [sp, #160]	@ 0xa0
  42237e:	3301      	adds	r3, #1
  422380:	2b07      	cmp	r3, #7
  422382:	9327      	str	r3, [sp, #156]	@ 0x9c
  422384:	f300 86e3 	bgt.w	42314e <_svfprintf_r+0x1776>
  422388:	f10b 0b08 	add.w	fp, fp, #8
  42238c:	2900      	cmp	r1, #0
  42238e:	f2c0 8775 	blt.w	42327c <_svfprintf_r+0x18a4>
  422392:	990c      	ldr	r1, [sp, #48]	@ 0x30
  422394:	3301      	adds	r3, #1
  422396:	f8cb 1000 	str.w	r1, [fp]
  42239a:	2b07      	cmp	r3, #7
  42239c:	9910      	ldr	r1, [sp, #64]	@ 0x40
  42239e:	440a      	add	r2, r1
  4223a0:	f8cb 1004 	str.w	r1, [fp, #4]
  4223a4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  4223a8:	f77f aca7 	ble.w	421cfa <_svfprintf_r+0x322>
  4223ac:	aa26      	add	r2, sp, #152	@ 0x98
  4223ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
  4223b0:	4650      	mov	r0, sl
  4223b2:	f002 fca7 	bl	424d04 <__ssprint_r>
  4223b6:	2800      	cmp	r0, #0
  4223b8:	d1b2      	bne.n	422320 <_svfprintf_r+0x948>
  4223ba:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  4223bc:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  4223c0:	e49d      	b.n	421cfe <_svfprintf_r+0x326>
  4223c2:	9910      	ldr	r1, [sp, #64]	@ 0x40
  4223c4:	3201      	adds	r2, #1
  4223c6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  4223c8:	f10b 0008 	add.w	r0, fp, #8
  4223cc:	2901      	cmp	r1, #1
  4223ce:	f103 0301 	add.w	r3, r3, #1
  4223d2:	f340 8130 	ble.w	422636 <_svfprintf_r+0xc5e>
  4223d6:	990c      	ldr	r1, [sp, #48]	@ 0x30
  4223d8:	2b07      	cmp	r3, #7
  4223da:	f8cb 1000 	str.w	r1, [fp]
  4223de:	f04f 0101 	mov.w	r1, #1
  4223e2:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  4223e6:	f8cb 1004 	str.w	r1, [fp, #4]
  4223ea:	f300 81a3 	bgt.w	422734 <_svfprintf_r+0xd5c>
  4223ee:	9912      	ldr	r1, [sp, #72]	@ 0x48
  4223f0:	3301      	adds	r3, #1
  4223f2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
  4223f4:	440a      	add	r2, r1
  4223f6:	2b07      	cmp	r3, #7
  4223f8:	e9c0 4100 	strd	r4, r1, [r0]
  4223fc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  422400:	f300 81a4 	bgt.w	42274c <_svfprintf_r+0xd74>
  422404:	3008      	adds	r0, #8
  422406:	eeb5 8b40 	vcmp.f64	d8, #0.0
  42240a:	9910      	ldr	r1, [sp, #64]	@ 0x40
  42240c:	1e4d      	subs	r5, r1, #1
  42240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  422412:	f000 812c 	beq.w	42266e <_svfprintf_r+0xc96>
  422416:	3301      	adds	r3, #1
  422418:	990c      	ldr	r1, [sp, #48]	@ 0x30
  42241a:	442a      	add	r2, r5
  42241c:	6045      	str	r5, [r0, #4]
  42241e:	3101      	adds	r1, #1
  422420:	2b07      	cmp	r3, #7
  422422:	6001      	str	r1, [r0, #0]
  422424:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  422428:	f300 8115 	bgt.w	422656 <_svfprintf_r+0xc7e>
  42242c:	3008      	adds	r0, #8
  42242e:	9915      	ldr	r1, [sp, #84]	@ 0x54
  422430:	3301      	adds	r3, #1
  422432:	440a      	add	r2, r1
  422434:	6041      	str	r1, [r0, #4]
  422436:	2b07      	cmp	r3, #7
  422438:	a920      	add	r1, sp, #128	@ 0x80
  42243a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  42243e:	6001      	str	r1, [r0, #0]
  422440:	dcb4      	bgt.n	4223ac <_svfprintf_r+0x9d4>
  422442:	f100 0b08 	add.w	fp, r0, #8
  422446:	e45a      	b.n	421cfe <_svfprintf_r+0x326>
  422448:	aa26      	add	r2, sp, #152	@ 0x98
  42244a:	9909      	ldr	r1, [sp, #36]	@ 0x24
  42244c:	4650      	mov	r0, sl
  42244e:	f002 fc59 	bl	424d04 <__ssprint_r>
  422452:	2800      	cmp	r0, #0
  422454:	f47f af64 	bne.w	422320 <_svfprintf_r+0x948>
  422458:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  42245a:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  42245e:	e431      	b.n	421cc4 <_svfprintf_r+0x2ec>
  422460:	aa26      	add	r2, sp, #152	@ 0x98
  422462:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422464:	4650      	mov	r0, sl
  422466:	9319      	str	r3, [sp, #100]	@ 0x64
  422468:	f002 fc4c 	bl	424d04 <__ssprint_r>
  42246c:	2800      	cmp	r0, #0
  42246e:	f47f af57 	bne.w	422320 <_svfprintf_r+0x948>
  422472:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  422474:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  422478:	9b19      	ldr	r3, [sp, #100]	@ 0x64
  42247a:	e412      	b.n	421ca2 <_svfprintf_r+0x2ca>
  42247c:	2c10      	cmp	r4, #16
  42247e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  422480:	4e69      	ldr	r6, [pc, #420]	@ (422628 <_svfprintf_r+0xc50>)
  422482:	dd1f      	ble.n	4224c4 <_svfprintf_r+0xaec>
  422484:	2510      	movs	r5, #16
  422486:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  42248a:	e002      	b.n	422492 <_svfprintf_r+0xaba>
  42248c:	3c10      	subs	r4, #16
  42248e:	2c10      	cmp	r4, #16
  422490:	dd18      	ble.n	4224c4 <_svfprintf_r+0xaec>
  422492:	3301      	adds	r3, #1
  422494:	3210      	adds	r2, #16
  422496:	2b07      	cmp	r3, #7
  422498:	e9cb 6500 	strd	r6, r5, [fp]
  42249c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  4224a0:	f10b 0b08 	add.w	fp, fp, #8
  4224a4:	ddf2      	ble.n	42248c <_svfprintf_r+0xab4>
  4224a6:	aa26      	add	r2, sp, #152	@ 0x98
  4224a8:	4641      	mov	r1, r8
  4224aa:	4650      	mov	r0, sl
  4224ac:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  4224b0:	f002 fc28 	bl	424d04 <__ssprint_r>
  4224b4:	2800      	cmp	r0, #0
  4224b6:	f47f af33 	bne.w	422320 <_svfprintf_r+0x948>
  4224ba:	3c10      	subs	r4, #16
  4224bc:	2c10      	cmp	r4, #16
  4224be:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  4224c2:	dce6      	bgt.n	422492 <_svfprintf_r+0xaba>
  4224c4:	3301      	adds	r3, #1
  4224c6:	4422      	add	r2, r4
  4224c8:	2b07      	cmp	r3, #7
  4224ca:	e9cb 6400 	strd	r6, r4, [fp]
  4224ce:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  4224d2:	f77f ac1d 	ble.w	421d10 <_svfprintf_r+0x338>
  4224d6:	aa26      	add	r2, sp, #152	@ 0x98
  4224d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
  4224da:	4650      	mov	r0, sl
  4224dc:	f002 fc12 	bl	424d04 <__ssprint_r>
  4224e0:	2800      	cmp	r0, #0
  4224e2:	f47f af1d 	bne.w	422320 <_svfprintf_r+0x948>
  4224e6:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  4224e8:	e412      	b.n	421d10 <_svfprintf_r+0x338>
  4224ea:	ab52      	add	r3, sp, #328	@ 0x148
  4224ec:	9004      	str	r0, [sp, #16]
  4224ee:	9007      	str	r0, [sp, #28]
  4224f0:	930c      	str	r3, [sp, #48]	@ 0x30
  4224f2:	e569      	b.n	421fc8 <_svfprintf_r+0x5f0>
  4224f4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
  4224f6:	f003 000f 	and.w	r0, r3, #15
  4224fa:	091b      	lsrs	r3, r3, #4
  4224fc:	5c20      	ldrb	r0, [r4, r0]
  4224fe:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  422502:	0912      	lsrs	r2, r2, #4
  422504:	f801 0d01 	strb.w	r0, [r1, #-1]!
  422508:	ea53 0002 	orrs.w	r0, r3, r2
  42250c:	d1f3      	bne.n	4224f6 <_svfprintf_r+0xb1e>
  42250e:	ab52      	add	r3, sp, #328	@ 0x148
  422510:	910c      	str	r1, [sp, #48]	@ 0x30
  422512:	9502      	str	r5, [sp, #8]
  422514:	1a5b      	subs	r3, r3, r1
  422516:	9307      	str	r3, [sp, #28]
  422518:	e556      	b.n	421fc8 <_svfprintf_r+0x5f0>
  42251a:	9d02      	ldr	r5, [sp, #8]
  42251c:	2b0a      	cmp	r3, #10
  42251e:	f172 0100 	sbcs.w	r1, r2, #0
  422522:	f080 83a8 	bcs.w	422c76 <_svfprintf_r+0x129e>
  422526:	3330      	adds	r3, #48	@ 0x30
  422528:	9502      	str	r5, [sp, #8]
  42252a:	f88d 3147 	strb.w	r3, [sp, #327]	@ 0x147
  42252e:	2301      	movs	r3, #1
  422530:	9307      	str	r3, [sp, #28]
  422532:	f20d 1347 	addw	r3, sp, #327	@ 0x147
  422536:	930c      	str	r3, [sp, #48]	@ 0x30
  422538:	e546      	b.n	421fc8 <_svfprintf_r+0x5f0>
  42253a:	991d      	ldr	r1, [sp, #116]	@ 0x74
  42253c:	2900      	cmp	r1, #0
  42253e:	f77f af03 	ble.w	422348 <_svfprintf_r+0x970>
  422542:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  422544:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  422546:	429d      	cmp	r5, r3
  422548:	bfa8      	it	ge
  42254a:	461d      	movge	r5, r3
  42254c:	2d00      	cmp	r5, #0
  42254e:	dd0c      	ble.n	42256a <_svfprintf_r+0xb92>
  422550:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  422552:	442a      	add	r2, r5
  422554:	e9cb 3500 	strd	r3, r5, [fp]
  422558:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  42255a:	9228      	str	r2, [sp, #160]	@ 0xa0
  42255c:	3301      	adds	r3, #1
  42255e:	2b07      	cmp	r3, #7
  422560:	9327      	str	r3, [sp, #156]	@ 0x9c
  422562:	f300 85e7 	bgt.w	423134 <_svfprintf_r+0x175c>
  422566:	f10b 0b08 	add.w	fp, fp, #8
  42256a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
  42256c:	2d00      	cmp	r5, #0
  42256e:	bfa8      	it	ge
  422570:	1b64      	subge	r4, r4, r5
  422572:	2c00      	cmp	r4, #0
  422574:	f300 823a 	bgt.w	4229ec <_svfprintf_r+0x1014>
  422578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  42257a:	990c      	ldr	r1, [sp, #48]	@ 0x30
  42257c:	440b      	add	r3, r1
  42257e:	4698      	mov	r8, r3
  422580:	9b02      	ldr	r3, [sp, #8]
  422582:	055e      	lsls	r6, r3, #21
  422584:	f100 8258 	bmi.w	422a38 <_svfprintf_r+0x1060>
  422588:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
  42258a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  42258c:	429c      	cmp	r4, r3
  42258e:	f2c0 8262 	blt.w	422a56 <_svfprintf_r+0x107e>
  422592:	9b02      	ldr	r3, [sp, #8]
  422594:	07dd      	lsls	r5, r3, #31
  422596:	f100 825e 	bmi.w	422a56 <_svfprintf_r+0x107e>
  42259a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  42259c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
  42259e:	1b1c      	subs	r4, r3, r4
  4225a0:	441d      	add	r5, r3
  4225a2:	4643      	mov	r3, r8
  4225a4:	1aed      	subs	r5, r5, r3
  4225a6:	42a5      	cmp	r5, r4
  4225a8:	bfa8      	it	ge
  4225aa:	4625      	movge	r5, r4
  4225ac:	2d00      	cmp	r5, #0
  4225ae:	dd0d      	ble.n	4225cc <_svfprintf_r+0xbf4>
  4225b0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  4225b2:	442a      	add	r2, r5
  4225b4:	f8cb 8000 	str.w	r8, [fp]
  4225b8:	3301      	adds	r3, #1
  4225ba:	f8cb 5004 	str.w	r5, [fp, #4]
  4225be:	9228      	str	r2, [sp, #160]	@ 0xa0
  4225c0:	2b07      	cmp	r3, #7
  4225c2:	9327      	str	r3, [sp, #156]	@ 0x9c
  4225c4:	f300 861f 	bgt.w	423206 <_svfprintf_r+0x182e>
  4225c8:	f10b 0b08 	add.w	fp, fp, #8
  4225cc:	2d00      	cmp	r5, #0
  4225ce:	bfa8      	it	ge
  4225d0:	1b64      	subge	r4, r4, r5
  4225d2:	2c00      	cmp	r4, #0
  4225d4:	f77f ab93 	ble.w	421cfe <_svfprintf_r+0x326>
  4225d8:	2c10      	cmp	r4, #16
  4225da:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  4225dc:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 42262c <_svfprintf_r+0xc54>
  4225e0:	f340 833c 	ble.w	422c5c <_svfprintf_r+0x1284>
  4225e4:	4646      	mov	r6, r8
  4225e6:	2510      	movs	r5, #16
  4225e8:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  4225ec:	e003      	b.n	4225f6 <_svfprintf_r+0xc1e>
  4225ee:	3c10      	subs	r4, #16
  4225f0:	2c10      	cmp	r4, #16
  4225f2:	f340 8332 	ble.w	422c5a <_svfprintf_r+0x1282>
  4225f6:	3301      	adds	r3, #1
  4225f8:	3210      	adds	r2, #16
  4225fa:	2b07      	cmp	r3, #7
  4225fc:	e9cb 6500 	strd	r6, r5, [fp]
  422600:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  422604:	f10b 0b08 	add.w	fp, fp, #8
  422608:	ddf1      	ble.n	4225ee <_svfprintf_r+0xc16>
  42260a:	aa26      	add	r2, sp, #152	@ 0x98
  42260c:	4641      	mov	r1, r8
  42260e:	4650      	mov	r0, sl
  422610:	f002 fb78 	bl	424d04 <__ssprint_r>
  422614:	2800      	cmp	r0, #0
  422616:	f47f ae83 	bne.w	422320 <_svfprintf_r+0x948>
  42261a:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  42261e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  422622:	e7e4      	b.n	4225ee <_svfprintf_r+0xc16>
  422624:	00434a64 	.word	0x00434a64
  422628:	0043c644 	.word	0x0043c644
  42262c:	0043c634 	.word	0x0043c634
  422630:	ab52      	add	r3, sp, #328	@ 0x148
  422632:	930c      	str	r3, [sp, #48]	@ 0x30
  422634:	e4c8      	b.n	421fc8 <_svfprintf_r+0x5f0>
  422636:	9902      	ldr	r1, [sp, #8]
  422638:	07cc      	lsls	r4, r1, #31
  42263a:	f53f aecc 	bmi.w	4223d6 <_svfprintf_r+0x9fe>
  42263e:	990c      	ldr	r1, [sp, #48]	@ 0x30
  422640:	2b07      	cmp	r3, #7
  422642:	f8cb 1000 	str.w	r1, [fp]
  422646:	f04f 0101 	mov.w	r1, #1
  42264a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  42264e:	f8cb 1004 	str.w	r1, [fp, #4]
  422652:	f77f aeec 	ble.w	42242e <_svfprintf_r+0xa56>
  422656:	aa26      	add	r2, sp, #152	@ 0x98
  422658:	9909      	ldr	r1, [sp, #36]	@ 0x24
  42265a:	4650      	mov	r0, sl
  42265c:	f002 fb52 	bl	424d04 <__ssprint_r>
  422660:	2800      	cmp	r0, #0
  422662:	f47f ae5d 	bne.w	422320 <_svfprintf_r+0x948>
  422666:	a829      	add	r0, sp, #164	@ 0xa4
  422668:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  42266c:	e6df      	b.n	42242e <_svfprintf_r+0xa56>
  42266e:	9910      	ldr	r1, [sp, #64]	@ 0x40
  422670:	2901      	cmp	r1, #1
  422672:	f77f aedc 	ble.w	42242e <_svfprintf_r+0xa56>
  422676:	2911      	cmp	r1, #17
  422678:	f8df 8404 	ldr.w	r8, [pc, #1028]	@ 422a80 <_svfprintf_r+0x10a8>
  42267c:	f340 837f 	ble.w	422d7e <_svfprintf_r+0x13a6>
  422680:	4646      	mov	r6, r8
  422682:	2410      	movs	r4, #16
  422684:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  422688:	e003      	b.n	422692 <_svfprintf_r+0xcba>
  42268a:	3d10      	subs	r5, #16
  42268c:	2d10      	cmp	r5, #16
  42268e:	f340 8375 	ble.w	422d7c <_svfprintf_r+0x13a4>
  422692:	3301      	adds	r3, #1
  422694:	3210      	adds	r2, #16
  422696:	2b07      	cmp	r3, #7
  422698:	e9c0 6400 	strd	r6, r4, [r0]
  42269c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  4226a0:	f100 0008 	add.w	r0, r0, #8
  4226a4:	ddf1      	ble.n	42268a <_svfprintf_r+0xcb2>
  4226a6:	aa26      	add	r2, sp, #152	@ 0x98
  4226a8:	4641      	mov	r1, r8
  4226aa:	4650      	mov	r0, sl
  4226ac:	f002 fb2a 	bl	424d04 <__ssprint_r>
  4226b0:	2800      	cmp	r0, #0
  4226b2:	f47f ae35 	bne.w	422320 <_svfprintf_r+0x948>
  4226b6:	a829      	add	r0, sp, #164	@ 0xa4
  4226b8:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  4226bc:	e7e5      	b.n	42268a <_svfprintf_r+0xcb2>
  4226be:	aa26      	add	r2, sp, #152	@ 0x98
  4226c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
  4226c2:	4650      	mov	r0, sl
  4226c4:	f002 fb1e 	bl	424d04 <__ssprint_r>
  4226c8:	2800      	cmp	r0, #0
  4226ca:	f47f ae29 	bne.w	422320 <_svfprintf_r+0x948>
  4226ce:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  4226d0:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  4226d4:	f7ff baff 	b.w	421cd6 <_svfprintf_r+0x2fe>
  4226d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
  4226da:	f015 0010 	ands.w	r0, r5, #16
  4226de:	f851 3b04 	ldr.w	r3, [r1], #4
  4226e2:	d10c      	bne.n	4226fe <_svfprintf_r+0xd26>
  4226e4:	f015 0440 	ands.w	r4, r5, #64	@ 0x40
  4226e8:	d004      	beq.n	4226f4 <_svfprintf_r+0xd1c>
  4226ea:	910b      	str	r1, [sp, #44]	@ 0x2c
  4226ec:	b29b      	uxth	r3, r3
  4226ee:	4602      	mov	r2, r0
  4226f0:	2101      	movs	r1, #1
  4226f2:	e446      	b.n	421f82 <_svfprintf_r+0x5aa>
  4226f4:	f415 7200 	ands.w	r2, r5, #512	@ 0x200
  4226f8:	d001      	beq.n	4226fe <_svfprintf_r+0xd26>
  4226fa:	b2db      	uxtb	r3, r3
  4226fc:	4622      	mov	r2, r4
  4226fe:	910b      	str	r1, [sp, #44]	@ 0x2c
  422700:	2101      	movs	r1, #1
  422702:	e43e      	b.n	421f82 <_svfprintf_r+0x5aa>
  422704:	9802      	ldr	r0, [sp, #8]
  422706:	990b      	ldr	r1, [sp, #44]	@ 0x2c
  422708:	f010 0010 	ands.w	r0, r0, #16
  42270c:	f851 3b04 	ldr.w	r3, [r1], #4
  422710:	d136      	bne.n	422780 <_svfprintf_r+0xda8>
  422712:	9a02      	ldr	r2, [sp, #8]
  422714:	f012 0440 	ands.w	r4, r2, #64	@ 0x40
  422718:	d02d      	beq.n	422776 <_svfprintf_r+0xd9e>
  42271a:	b29b      	uxth	r3, r3
  42271c:	4602      	mov	r2, r0
  42271e:	910b      	str	r1, [sp, #44]	@ 0x2c
  422720:	e480      	b.n	422024 <_svfprintf_r+0x64c>
  422722:	425b      	negs	r3, r3
  422724:	9d02      	ldr	r5, [sp, #8]
  422726:	f04f 002d 	mov.w	r0, #45	@ 0x2d
  42272a:	f04f 0101 	mov.w	r1, #1
  42272e:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
  422732:	e427      	b.n	421f84 <_svfprintf_r+0x5ac>
  422734:	aa26      	add	r2, sp, #152	@ 0x98
  422736:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422738:	4650      	mov	r0, sl
  42273a:	f002 fae3 	bl	424d04 <__ssprint_r>
  42273e:	2800      	cmp	r0, #0
  422740:	f47f adee 	bne.w	422320 <_svfprintf_r+0x948>
  422744:	a829      	add	r0, sp, #164	@ 0xa4
  422746:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  42274a:	e650      	b.n	4223ee <_svfprintf_r+0xa16>
  42274c:	aa26      	add	r2, sp, #152	@ 0x98
  42274e:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422750:	4650      	mov	r0, sl
  422752:	f002 fad7 	bl	424d04 <__ssprint_r>
  422756:	2800      	cmp	r0, #0
  422758:	f47f ade2 	bne.w	422320 <_svfprintf_r+0x948>
  42275c:	a829      	add	r0, sp, #164	@ 0xa4
  42275e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  422762:	e650      	b.n	422406 <_svfprintf_r+0xa2e>
  422764:	9b02      	ldr	r3, [sp, #8]
  422766:	07d9      	lsls	r1, r3, #31
  422768:	f57f aac9 	bpl.w	421cfe <_svfprintf_r+0x326>
  42276c:	e504      	b.n	422178 <_svfprintf_r+0x7a0>
  42276e:	930b      	str	r3, [sp, #44]	@ 0x2c
  422770:	7823      	ldrb	r3, [r4, #0]
  422772:	f7ff b98f 	b.w	421a94 <_svfprintf_r+0xbc>
  422776:	9a02      	ldr	r2, [sp, #8]
  422778:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
  42277c:	f040 843a 	bne.w	422ff4 <_svfprintf_r+0x161c>
  422780:	910b      	str	r1, [sp, #44]	@ 0x2c
  422782:	e44f      	b.n	422024 <_svfprintf_r+0x64c>
  422784:	9b02      	ldr	r3, [sp, #8]
  422786:	06d8      	lsls	r0, r3, #27
  422788:	f100 82ed 	bmi.w	422d66 <_svfprintf_r+0x138e>
  42278c:	9b02      	ldr	r3, [sp, #8]
  42278e:	0659      	lsls	r1, r3, #25
  422790:	f100 8426 	bmi.w	422fe0 <_svfprintf_r+0x1608>
  422794:	9b02      	ldr	r3, [sp, #8]
  422796:	059a      	lsls	r2, r3, #22
  422798:	f140 82e5 	bpl.w	422d66 <_svfprintf_r+0x138e>
  42279c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  42279e:	9a06      	ldr	r2, [sp, #24]
  4227a0:	681b      	ldr	r3, [r3, #0]
  4227a2:	701a      	strb	r2, [r3, #0]
  4227a4:	e457      	b.n	422056 <_svfprintf_r+0x67e>
  4227a6:	eeb4 8b48 	vcmp.f64	d8, d8
  4227aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4227ae:	f180 8618 	bvs.w	4233e2 <_svfprintf_r+0x1a0a>
  4227b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  4227b4:	f023 0420 	bic.w	r4, r3, #32
  4227b8:	2c41      	cmp	r4, #65	@ 0x41
  4227ba:	f040 82f6 	bne.w	422daa <_svfprintf_r+0x13d2>
  4227be:	2b61      	cmp	r3, #97	@ 0x61
  4227c0:	f04f 0330 	mov.w	r3, #48	@ 0x30
  4227c4:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
  4227c8:	bf14      	ite	ne
  4227ca:	2358      	movne	r3, #88	@ 0x58
  4227cc:	2378      	moveq	r3, #120	@ 0x78
  4227ce:	f88d 3071 	strb.w	r3, [sp, #113]	@ 0x71
  4227d2:	9b04      	ldr	r3, [sp, #16]
  4227d4:	2b63      	cmp	r3, #99	@ 0x63
  4227d6:	f300 843f 	bgt.w	423058 <_svfprintf_r+0x1680>
  4227da:	2300      	movs	r3, #0
  4227dc:	930a      	str	r3, [sp, #40]	@ 0x28
  4227de:	ab39      	add	r3, sp, #228	@ 0xe4
  4227e0:	930c      	str	r3, [sp, #48]	@ 0x30
  4227e2:	ee18 3a90 	vmov	r3, s17
  4227e6:	2b00      	cmp	r3, #0
  4227e8:	f280 856a 	bge.w	4232c0 <_svfprintf_r+0x18e8>
  4227ec:	eeb1 0b48 	vneg.f64	d0, d8
  4227f0:	f04f 082d 	mov.w	r8, #45	@ 0x2d
  4227f4:	a81d      	add	r0, sp, #116	@ 0x74
  4227f6:	f7fc fc93 	bl	41f120 <frexp>
  4227fa:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
  4227fe:	ee20 7b07 	vmul.f64	d7, d0, d7
  422802:	eeb5 7b40 	vcmp.f64	d7, #0.0
  422806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  42280a:	d101      	bne.n	422810 <_svfprintf_r+0xe38>
  42280c:	2301      	movs	r3, #1
  42280e:	931d      	str	r3, [sp, #116]	@ 0x74
  422810:	4a98      	ldr	r2, [pc, #608]	@ (422a74 <_svfprintf_r+0x109c>)
  422812:	eeb3 4b00 	vmov.f64	d4, #48	@ 0x41800000  16.0
  422816:	9b04      	ldr	r3, [sp, #16]
  422818:	4897      	ldr	r0, [pc, #604]	@ (422a78 <_svfprintf_r+0x10a0>)
  42281a:	990d      	ldr	r1, [sp, #52]	@ 0x34
  42281c:	3b01      	subs	r3, #1
  42281e:	2961      	cmp	r1, #97	@ 0x61
  422820:	bf08      	it	eq
  422822:	4610      	moveq	r0, r2
  422824:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  422826:	e006      	b.n	422836 <_svfprintf_r+0xe5e>
  422828:	eeb5 7b40 	vcmp.f64	d7, #0.0
  42282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  422830:	f000 85e7 	beq.w	423402 <_svfprintf_r+0x1a2a>
  422834:	460b      	mov	r3, r1
  422836:	ee27 7b04 	vmul.f64	d7, d7, d4
  42283a:	1c5e      	adds	r6, r3, #1
  42283c:	4615      	mov	r5, r2
  42283e:	f103 31ff 	add.w	r1, r3, #4294967295	@ 0xffffffff
  422842:	eefd 6bc7 	vcvt.s32.f64	s13, d7
  422846:	ee16 4a90 	vmov	r4, s13
  42284a:	eeb8 5be6 	vcvt.f64.s32	d5, s13
  42284e:	5d04      	ldrb	r4, [r0, r4]
  422850:	ee37 7b45 	vsub.f64	d7, d7, d5
  422854:	f802 4b01 	strb.w	r4, [r2], #1
  422858:	d1e6      	bne.n	422828 <_svfprintf_r+0xe50>
  42285a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
  42285e:	eeb4 7bc5 	vcmpe.f64	d7, d5
  422862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  422866:	f340 860e 	ble.w	423486 <_svfprintf_r+0x1aae>
  42286a:	7bc4      	ldrb	r4, [r0, #15]
  42286c:	4613      	mov	r3, r2
  42286e:	9524      	str	r5, [sp, #144]	@ 0x90
  422870:	f812 1c01 	ldrb.w	r1, [r2, #-1]
  422874:	428c      	cmp	r4, r1
  422876:	d109      	bne.n	42288c <_svfprintf_r+0xeb4>
  422878:	2530      	movs	r5, #48	@ 0x30
  42287a:	f803 5c01 	strb.w	r5, [r3, #-1]
  42287e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
  422880:	1e59      	subs	r1, r3, #1
  422882:	9124      	str	r1, [sp, #144]	@ 0x90
  422884:	f813 1c01 	ldrb.w	r1, [r3, #-1]
  422888:	428c      	cmp	r4, r1
  42288a:	d0f6      	beq.n	42287a <_svfprintf_r+0xea2>
  42288c:	2939      	cmp	r1, #57	@ 0x39
  42288e:	f000 85f7 	beq.w	423480 <_svfprintf_r+0x1aa8>
  422892:	3101      	adds	r1, #1
  422894:	b2c9      	uxtb	r1, r1
  422896:	f803 1c01 	strb.w	r1, [r3, #-1]
  42289a:	4613      	mov	r3, r2
  42289c:	9a02      	ldr	r2, [sp, #8]
  42289e:	2101      	movs	r1, #1
  4228a0:	f042 0202 	orr.w	r2, r2, #2
  4228a4:	9202      	str	r2, [sp, #8]
  4228a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  4228a8:	1a9b      	subs	r3, r3, r2
  4228aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  4228ac:	9310      	str	r3, [sp, #64]	@ 0x40
  4228ae:	320f      	adds	r2, #15
  4228b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
  4228b2:	b2d2      	uxtb	r2, r2
  4228b4:	930e      	str	r3, [sp, #56]	@ 0x38
  4228b6:	3b01      	subs	r3, #1
  4228b8:	931d      	str	r3, [sp, #116]	@ 0x74
  4228ba:	e2d3      	b.n	422e64 <_svfprintf_r+0x148c>
  4228bc:	920b      	str	r2, [sp, #44]	@ 0x2c
  4228be:	17da      	asrs	r2, r3, #31
  4228c0:	4611      	mov	r1, r2
  4228c2:	f7ff bb1c 	b.w	421efe <_svfprintf_r+0x526>
  4228c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  4228c8:	781a      	ldrb	r2, [r3, #0]
  4228ca:	7823      	ldrb	r3, [r4, #0]
  4228cc:	2a00      	cmp	r2, #0
  4228ce:	f43f a8e1 	beq.w	421a94 <_svfprintf_r+0xbc>
  4228d2:	9a02      	ldr	r2, [sp, #8]
  4228d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  4228d8:	9202      	str	r2, [sp, #8]
  4228da:	f7ff b8db 	b.w	421a94 <_svfprintf_r+0xbc>
  4228de:	2330      	movs	r3, #48	@ 0x30
  4228e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  4228e2:	3802      	subs	r0, #2
  4228e4:	9502      	str	r5, [sp, #8]
  4228e6:	f802 3c01 	strb.w	r3, [r2, #-1]
  4228ea:	ab52      	add	r3, sp, #328	@ 0x148
  4228ec:	900c      	str	r0, [sp, #48]	@ 0x30
  4228ee:	1a1b      	subs	r3, r3, r0
  4228f0:	9307      	str	r3, [sp, #28]
  4228f2:	f7ff bb69 	b.w	421fc8 <_svfprintf_r+0x5f0>
  4228f6:	930d      	str	r3, [sp, #52]	@ 0x34
  4228f8:	4b5f      	ldr	r3, [pc, #380]	@ (422a78 <_svfprintf_r+0x10a0>)
  4228fa:	9405      	str	r4, [sp, #20]
  4228fc:	9317      	str	r3, [sp, #92]	@ 0x5c
  4228fe:	9b02      	ldr	r3, [sp, #8]
  422900:	f013 0220 	ands.w	r2, r3, #32
  422904:	f000 8104 	beq.w	422b10 <_svfprintf_r+0x1138>
  422908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  42290a:	3307      	adds	r3, #7
  42290c:	f023 0307 	bic.w	r3, r3, #7
  422910:	4619      	mov	r1, r3
  422912:	685a      	ldr	r2, [r3, #4]
  422914:	f851 3b08 	ldr.w	r3, [r1], #8
  422918:	910b      	str	r1, [sp, #44]	@ 0x2c
  42291a:	ea53 0102 	orrs.w	r1, r3, r2
  42291e:	d00b      	beq.n	422938 <_svfprintf_r+0xf60>
  422920:	9902      	ldr	r1, [sp, #8]
  422922:	07cd      	lsls	r5, r1, #31
  422924:	d508      	bpl.n	422938 <_svfprintf_r+0xf60>
  422926:	f041 0102 	orr.w	r1, r1, #2
  42292a:	9102      	str	r1, [sp, #8]
  42292c:	990d      	ldr	r1, [sp, #52]	@ 0x34
  42292e:	f88d 1071 	strb.w	r1, [sp, #113]	@ 0x71
  422932:	2130      	movs	r1, #48	@ 0x30
  422934:	f88d 1070 	strb.w	r1, [sp, #112]	@ 0x70
  422938:	9902      	ldr	r1, [sp, #8]
  42293a:	f421 6580 	bic.w	r5, r1, #1024	@ 0x400
  42293e:	2102      	movs	r1, #2
  422940:	f7ff bb1f 	b.w	421f82 <_svfprintf_r+0x5aa>
  422944:	9d02      	ldr	r5, [sp, #8]
  422946:	930d      	str	r3, [sp, #52]	@ 0x34
  422948:	9405      	str	r4, [sp, #20]
  42294a:	f7ff bb0c 	b.w	421f66 <_svfprintf_r+0x58e>
  42294e:	930d      	str	r3, [sp, #52]	@ 0x34
  422950:	9405      	str	r4, [sp, #20]
  422952:	f7ff bb59 	b.w	422008 <_svfprintf_r+0x630>
  422956:	930d      	str	r3, [sp, #52]	@ 0x34
  422958:	4b46      	ldr	r3, [pc, #280]	@ (422a74 <_svfprintf_r+0x109c>)
  42295a:	9405      	str	r4, [sp, #20]
  42295c:	9317      	str	r3, [sp, #92]	@ 0x5c
  42295e:	e7ce      	b.n	4228fe <_svfprintf_r+0xf26>
  422960:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  422962:	ae39      	add	r6, sp, #228	@ 0xe4
  422964:	681b      	ldr	r3, [r3, #0]
  422966:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
  42296a:	2301      	movs	r3, #1
  42296c:	9303      	str	r3, [sp, #12]
  42296e:	9307      	str	r3, [sp, #28]
  422970:	f7ff ba75 	b.w	421e5e <_svfprintf_r+0x486>
  422974:	aa26      	add	r2, sp, #152	@ 0x98
  422976:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422978:	4650      	mov	r0, sl
  42297a:	f002 f9c3 	bl	424d04 <__ssprint_r>
  42297e:	2800      	cmp	r0, #0
  422980:	f47f acce 	bne.w	422320 <_svfprintf_r+0x948>
  422984:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  422986:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  42298a:	e403      	b.n	422194 <_svfprintf_r+0x7bc>
  42298c:	9b02      	ldr	r3, [sp, #8]
  42298e:	3401      	adds	r4, #1
  422990:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
  422994:	9302      	str	r3, [sp, #8]
  422996:	7823      	ldrb	r3, [r4, #0]
  422998:	f7ff b87c 	b.w	421a94 <_svfprintf_r+0xbc>
  42299c:	9b02      	ldr	r3, [sp, #8]
  42299e:	3401      	adds	r4, #1
  4229a0:	f043 0320 	orr.w	r3, r3, #32
  4229a4:	9302      	str	r3, [sp, #8]
  4229a6:	7823      	ldrb	r3, [r4, #0]
  4229a8:	f7ff b874 	b.w	421a94 <_svfprintf_r+0xbc>
  4229ac:	2140      	movs	r1, #64	@ 0x40
  4229ae:	4650      	mov	r0, sl
  4229b0:	f7fe fd50 	bl	421454 <_malloc_r>
  4229b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  4229b6:	6018      	str	r0, [r3, #0]
  4229b8:	6118      	str	r0, [r3, #16]
  4229ba:	2800      	cmp	r0, #0
  4229bc:	f000 8594 	beq.w	4234e8 <_svfprintf_r+0x1b10>
  4229c0:	2340      	movs	r3, #64	@ 0x40
  4229c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  4229c4:	6153      	str	r3, [r2, #20]
  4229c6:	f7ff b826 	b.w	421a16 <_svfprintf_r+0x3e>
  4229ca:	9a04      	ldr	r2, [sp, #16]
  4229cc:	4619      	mov	r1, r3
  4229ce:	9304      	str	r3, [sp, #16]
  4229d0:	2a06      	cmp	r2, #6
  4229d2:	930a      	str	r3, [sp, #40]	@ 0x28
  4229d4:	9311      	str	r3, [sp, #68]	@ 0x44
  4229d6:	bf28      	it	cs
  4229d8:	2206      	movcs	r2, #6
  4229da:	960b      	str	r6, [sp, #44]	@ 0x2c
  4229dc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  4229e0:	4b26      	ldr	r3, [pc, #152]	@ (422a7c <_svfprintf_r+0x10a4>)
  4229e2:	9203      	str	r2, [sp, #12]
  4229e4:	9207      	str	r2, [sp, #28]
  4229e6:	930c      	str	r3, [sp, #48]	@ 0x30
  4229e8:	f7ff b9d7 	b.w	421d9a <_svfprintf_r+0x3c2>
  4229ec:	2c10      	cmp	r4, #16
  4229ee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  4229f0:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 422a80 <_svfprintf_r+0x10a8>
  4229f4:	f340 828f 	ble.w	422f16 <_svfprintf_r+0x153e>
  4229f8:	4646      	mov	r6, r8
  4229fa:	2510      	movs	r5, #16
  4229fc:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  422a00:	e003      	b.n	422a0a <_svfprintf_r+0x1032>
  422a02:	3c10      	subs	r4, #16
  422a04:	2c10      	cmp	r4, #16
  422a06:	f340 8285 	ble.w	422f14 <_svfprintf_r+0x153c>
  422a0a:	3301      	adds	r3, #1
  422a0c:	3210      	adds	r2, #16
  422a0e:	2b07      	cmp	r3, #7
  422a10:	e9cb 6500 	strd	r6, r5, [fp]
  422a14:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  422a18:	f10b 0b08 	add.w	fp, fp, #8
  422a1c:	ddf1      	ble.n	422a02 <_svfprintf_r+0x102a>
  422a1e:	aa26      	add	r2, sp, #152	@ 0x98
  422a20:	4641      	mov	r1, r8
  422a22:	4650      	mov	r0, sl
  422a24:	f002 f96e 	bl	424d04 <__ssprint_r>
  422a28:	2800      	cmp	r0, #0
  422a2a:	f47f ac79 	bne.w	422320 <_svfprintf_r+0x948>
  422a2e:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  422a32:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  422a36:	e7e4      	b.n	422a02 <_svfprintf_r+0x102a>
  422a38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  422a3a:	2b00      	cmp	r3, #0
  422a3c:	dc22      	bgt.n	422a84 <_svfprintf_r+0x10ac>
  422a3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  422a40:	2b00      	cmp	r3, #0
  422a42:	dc1f      	bgt.n	422a84 <_svfprintf_r+0x10ac>
  422a44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  422a46:	9910      	ldr	r1, [sp, #64]	@ 0x40
  422a48:	440b      	add	r3, r1
  422a4a:	4598      	cmp	r8, r3
  422a4c:	4641      	mov	r1, r8
  422a4e:	bf28      	it	cs
  422a50:	4619      	movcs	r1, r3
  422a52:	4688      	mov	r8, r1
  422a54:	e598      	b.n	422588 <_svfprintf_r+0xbb0>
  422a56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  422a58:	9914      	ldr	r1, [sp, #80]	@ 0x50
  422a5a:	441a      	add	r2, r3
  422a5c:	e9cb 1300 	strd	r1, r3, [fp]
  422a60:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  422a62:	9228      	str	r2, [sp, #160]	@ 0xa0
  422a64:	3301      	adds	r3, #1
  422a66:	2b07      	cmp	r3, #7
  422a68:	9327      	str	r3, [sp, #156]	@ 0x9c
  422a6a:	f300 83a0 	bgt.w	4231ae <_svfprintf_r+0x17d6>
  422a6e:	f10b 0b08 	add.w	fp, fp, #8
  422a72:	e592      	b.n	42259a <_svfprintf_r+0xbc2>
  422a74:	00434d84 	.word	0x00434d84
  422a78:	00434d70 	.word	0x00434d70
  422a7c:	00434d98 	.word	0x00434d98
  422a80:	0043c634 	.word	0x0043c634
  422a84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  422a86:	9910      	ldr	r1, [sp, #64]	@ 0x40
  422a88:	f8cd a010 	str.w	sl, [sp, #16]
  422a8c:	1858      	adds	r0, r3, r1
  422a8e:	4eb9      	ldr	r6, [pc, #740]	@ (422d74 <_svfprintf_r+0x139c>)
  422a90:	4659      	mov	r1, fp
  422a92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  422a94:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
  422a98:	4683      	mov	fp, r0
  422a9a:	2b00      	cmp	r3, #0
  422a9c:	dc36      	bgt.n	422b0c <_svfprintf_r+0x1134>
  422a9e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
  422aa0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
  422aa4:	3801      	subs	r0, #1
  422aa6:	900f      	str	r0, [sp, #60]	@ 0x3c
  422aa8:	9816      	ldr	r0, [sp, #88]	@ 0x58
  422aaa:	9c18      	ldr	r4, [sp, #96]	@ 0x60
  422aac:	4402      	add	r2, r0
  422aae:	e9c1 4000 	strd	r4, r0, [r1]
  422ab2:	9827      	ldr	r0, [sp, #156]	@ 0x9c
  422ab4:	9228      	str	r2, [sp, #160]	@ 0xa0
  422ab6:	3001      	adds	r0, #1
  422ab8:	2807      	cmp	r0, #7
  422aba:	9027      	str	r0, [sp, #156]	@ 0x9c
  422abc:	f300 808b 	bgt.w	422bd6 <_svfprintf_r+0x11fe>
  422ac0:	3108      	adds	r1, #8
  422ac2:	ebab 0508 	sub.w	r5, fp, r8
  422ac6:	f89a 0000 	ldrb.w	r0, [sl]
  422aca:	f8cd b01c 	str.w	fp, [sp, #28]
  422ace:	4285      	cmp	r5, r0
  422ad0:	bfa8      	it	ge
  422ad2:	4605      	movge	r5, r0
  422ad4:	2d00      	cmp	r5, #0
  422ad6:	dd0c      	ble.n	422af2 <_svfprintf_r+0x111a>
  422ad8:	9827      	ldr	r0, [sp, #156]	@ 0x9c
  422ada:	442a      	add	r2, r5
  422adc:	3001      	adds	r0, #1
  422ade:	9228      	str	r2, [sp, #160]	@ 0xa0
  422ae0:	2807      	cmp	r0, #7
  422ae2:	9027      	str	r0, [sp, #156]	@ 0x9c
  422ae4:	e9c1 8500 	strd	r8, r5, [r1]
  422ae8:	f300 812e 	bgt.w	422d48 <_svfprintf_r+0x1370>
  422aec:	3108      	adds	r1, #8
  422aee:	f89a 0000 	ldrb.w	r0, [sl]
  422af2:	2d00      	cmp	r5, #0
  422af4:	bfac      	ite	ge
  422af6:	1b44      	subge	r4, r0, r5
  422af8:	4604      	movlt	r4, r0
  422afa:	2c00      	cmp	r4, #0
  422afc:	dc1e      	bgt.n	422b3c <_svfprintf_r+0x1164>
  422afe:	4480      	add	r8, r0
  422b00:	980f      	ldr	r0, [sp, #60]	@ 0x3c
  422b02:	2800      	cmp	r0, #0
  422b04:	dcc9      	bgt.n	422a9a <_svfprintf_r+0x10c2>
  422b06:	2b00      	cmp	r3, #0
  422b08:	f340 84ae 	ble.w	423468 <_svfprintf_r+0x1a90>
  422b0c:	3b01      	subs	r3, #1
  422b0e:	e7cb      	b.n	422aa8 <_svfprintf_r+0x10d0>
  422b10:	9802      	ldr	r0, [sp, #8]
  422b12:	990b      	ldr	r1, [sp, #44]	@ 0x2c
  422b14:	f010 0010 	ands.w	r0, r0, #16
  422b18:	f851 3b04 	ldr.w	r3, [r1], #4
  422b1c:	d10c      	bne.n	422b38 <_svfprintf_r+0x1160>
  422b1e:	9a02      	ldr	r2, [sp, #8]
  422b20:	f012 0440 	ands.w	r4, r2, #64	@ 0x40
  422b24:	d003      	beq.n	422b2e <_svfprintf_r+0x1156>
  422b26:	b29b      	uxth	r3, r3
  422b28:	4602      	mov	r2, r0
  422b2a:	910b      	str	r1, [sp, #44]	@ 0x2c
  422b2c:	e6f5      	b.n	42291a <_svfprintf_r+0xf42>
  422b2e:	9a02      	ldr	r2, [sp, #8]
  422b30:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
  422b34:	f040 8263 	bne.w	422ffe <_svfprintf_r+0x1626>
  422b38:	910b      	str	r1, [sp, #44]	@ 0x2c
  422b3a:	e6ee      	b.n	42291a <_svfprintf_r+0xf42>
  422b3c:	2c10      	cmp	r4, #16
  422b3e:	9827      	ldr	r0, [sp, #156]	@ 0x9c
  422b40:	f340 848e 	ble.w	423460 <_svfprintf_r+0x1a88>
  422b44:	2510      	movs	r5, #16
  422b46:	9311      	str	r3, [sp, #68]	@ 0x44
  422b48:	9613      	str	r6, [sp, #76]	@ 0x4c
  422b4a:	e9cd 8a0d 	strd	r8, sl, [sp, #52]	@ 0x34
  422b4e:	f8dd 8010 	ldr.w	r8, [sp, #16]
  422b52:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
  422b56:	e002      	b.n	422b5e <_svfprintf_r+0x1186>
  422b58:	3c10      	subs	r4, #16
  422b5a:	2c10      	cmp	r4, #16
  422b5c:	dd17      	ble.n	422b8e <_svfprintf_r+0x11b6>
  422b5e:	3001      	adds	r0, #1
  422b60:	3210      	adds	r2, #16
  422b62:	2807      	cmp	r0, #7
  422b64:	e9c1 6500 	strd	r6, r5, [r1]
  422b68:	e9cd 0227 	strd	r0, r2, [sp, #156]	@ 0x9c
  422b6c:	f101 0108 	add.w	r1, r1, #8
  422b70:	ddf2      	ble.n	422b58 <_svfprintf_r+0x1180>
  422b72:	aa26      	add	r2, sp, #152	@ 0x98
  422b74:	4651      	mov	r1, sl
  422b76:	4640      	mov	r0, r8
  422b78:	f002 f8c4 	bl	424d04 <__ssprint_r>
  422b7c:	2800      	cmp	r0, #0
  422b7e:	f040 8337 	bne.w	4231f0 <_svfprintf_r+0x1818>
  422b82:	3c10      	subs	r4, #16
  422b84:	a929      	add	r1, sp, #164	@ 0xa4
  422b86:	2c10      	cmp	r4, #16
  422b88:	e9dd 0227 	ldrd	r0, r2, [sp, #156]	@ 0x9c
  422b8c:	dce7      	bgt.n	422b5e <_svfprintf_r+0x1186>
  422b8e:	e9dd 8a0d 	ldrd	r8, sl, [sp, #52]	@ 0x34
  422b92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  422b94:	f8dd c04c 	ldr.w	ip, [sp, #76]	@ 0x4c
  422b98:	3001      	adds	r0, #1
  422b9a:	4422      	add	r2, r4
  422b9c:	f8c1 c000 	str.w	ip, [r1]
  422ba0:	2807      	cmp	r0, #7
  422ba2:	604c      	str	r4, [r1, #4]
  422ba4:	e9cd 0227 	strd	r0, r2, [sp, #156]	@ 0x9c
  422ba8:	f300 82e0 	bgt.w	42316c <_svfprintf_r+0x1794>
  422bac:	3108      	adds	r1, #8
  422bae:	f89a 0000 	ldrb.w	r0, [sl]
  422bb2:	e7a4      	b.n	422afe <_svfprintf_r+0x1126>
  422bb4:	aa26      	add	r2, sp, #152	@ 0x98
  422bb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422bb8:	4650      	mov	r0, sl
  422bba:	9319      	str	r3, [sp, #100]	@ 0x64
  422bbc:	f002 f8a2 	bl	424d04 <__ssprint_r>
  422bc0:	2800      	cmp	r0, #0
  422bc2:	f47f abad 	bne.w	422320 <_svfprintf_r+0x948>
  422bc6:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  422bca:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  422bce:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  422bd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
  422bd2:	f7ff b854 	b.w	421c7e <_svfprintf_r+0x2a6>
  422bd6:	aa26      	add	r2, sp, #152	@ 0x98
  422bd8:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422bda:	9804      	ldr	r0, [sp, #16]
  422bdc:	9307      	str	r3, [sp, #28]
  422bde:	f002 f891 	bl	424d04 <__ssprint_r>
  422be2:	2800      	cmp	r0, #0
  422be4:	f040 845f 	bne.w	4234a6 <_svfprintf_r+0x1ace>
  422be8:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  422bea:	a929      	add	r1, sp, #164	@ 0xa4
  422bec:	9b07      	ldr	r3, [sp, #28]
  422bee:	e768      	b.n	422ac2 <_svfprintf_r+0x10ea>
  422bf0:	aa26      	add	r2, sp, #152	@ 0x98
  422bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422bf4:	4650      	mov	r0, sl
  422bf6:	f002 f885 	bl	424d04 <__ssprint_r>
  422bfa:	2800      	cmp	r0, #0
  422bfc:	f47f ab90 	bne.w	422320 <_svfprintf_r+0x948>
  422c00:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  422c02:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  422c06:	f7ff bab2 	b.w	42216e <_svfprintf_r+0x796>
  422c0a:	ad24      	add	r5, sp, #144	@ 0x90
  422c0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  422c0e:	2208      	movs	r2, #8
  422c10:	2100      	movs	r1, #0
  422c12:	4628      	mov	r0, r5
  422c14:	931f      	str	r3, [sp, #124]	@ 0x7c
  422c16:	f7fe f845 	bl	420ca4 <memset>
  422c1a:	9b04      	ldr	r3, [sp, #16]
  422c1c:	2b00      	cmp	r3, #0
  422c1e:	f2c0 8189 	blt.w	422f34 <_svfprintf_r+0x155c>
  422c22:	2400      	movs	r4, #0
  422c24:	9603      	str	r6, [sp, #12]
  422c26:	4698      	mov	r8, r3
  422c28:	4626      	mov	r6, r4
  422c2a:	e00e      	b.n	422c4a <_svfprintf_r+0x1272>
  422c2c:	a939      	add	r1, sp, #228	@ 0xe4
  422c2e:	4650      	mov	r0, sl
  422c30:	f7fe f9fa 	bl	421028 <_wcrtomb_r>
  422c34:	1c43      	adds	r3, r0, #1
  422c36:	f104 0404 	add.w	r4, r4, #4
  422c3a:	4430      	add	r0, r6
  422c3c:	f000 838d 	beq.w	42335a <_svfprintf_r+0x1982>
  422c40:	4540      	cmp	r0, r8
  422c42:	dc07      	bgt.n	422c54 <_svfprintf_r+0x127c>
  422c44:	f000 83c9 	beq.w	4233da <_svfprintf_r+0x1a02>
  422c48:	4606      	mov	r6, r0
  422c4a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
  422c4c:	462b      	mov	r3, r5
  422c4e:	5912      	ldr	r2, [r2, r4]
  422c50:	2a00      	cmp	r2, #0
  422c52:	d1eb      	bne.n	422c2c <_svfprintf_r+0x1254>
  422c54:	9607      	str	r6, [sp, #28]
  422c56:	9e03      	ldr	r6, [sp, #12]
  422c58:	e17a      	b.n	422f50 <_svfprintf_r+0x1578>
  422c5a:	46b0      	mov	r8, r6
  422c5c:	3301      	adds	r3, #1
  422c5e:	4422      	add	r2, r4
  422c60:	f8cb 8000 	str.w	r8, [fp]
  422c64:	2b07      	cmp	r3, #7
  422c66:	f8cb 4004 	str.w	r4, [fp, #4]
  422c6a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  422c6e:	f77f a844 	ble.w	421cfa <_svfprintf_r+0x322>
  422c72:	f7ff bb9b 	b.w	4223ac <_svfprintf_r+0x9d4>
  422c76:	f405 6180 	and.w	r1, r5, #1024	@ 0x400
  422c7a:	2000      	movs	r0, #0
  422c7c:	469e      	mov	lr, r3
  422c7e:	f8cd a01c 	str.w	sl, [sp, #28]
  422c82:	f50d 7ca4 	add.w	ip, sp, #328	@ 0x148
  422c86:	4e3c      	ldr	r6, [pc, #240]	@ (422d78 <_svfprintf_r+0x13a0>)
  422c88:	4682      	mov	sl, r0
  422c8a:	460b      	mov	r3, r1
  422c8c:	e9cd 5b02 	strd	r5, fp, [sp, #8]
  422c90:	e007      	b.n	422ca2 <_svfprintf_r+0x12ca>
  422c92:	f1be 0f0a 	cmp.w	lr, #10
  422c96:	f172 0200 	sbcs.w	r2, r2, #0
  422c9a:	d33a      	bcc.n	422d12 <_svfprintf_r+0x133a>
  422c9c:	46ae      	mov	lr, r5
  422c9e:	4622      	mov	r2, r4
  422ca0:	46c4      	mov	ip, r8
  422ca2:	eb1e 0002 	adds.w	r0, lr, r2
  422ca6:	f04f 0b05 	mov.w	fp, #5
  422caa:	f10a 0a01 	add.w	sl, sl, #1
  422cae:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
  422cb2:	f140 0000 	adc.w	r0, r0, #0
  422cb6:	fba6 1400 	umull	r1, r4, r6, r0
  422cba:	f024 0103 	bic.w	r1, r4, #3
  422cbe:	eb01 0194 	add.w	r1, r1, r4, lsr #2
  422cc2:	f04f 34cc 	mov.w	r4, #3435973836	@ 0xcccccccc
  422cc6:	1a40      	subs	r0, r0, r1
  422cc8:	ebbe 0100 	subs.w	r1, lr, r0
  422ccc:	f162 0500 	sbc.w	r5, r2, #0
  422cd0:	fb04 f401 	mul.w	r4, r4, r1
  422cd4:	fb06 4405 	mla	r4, r6, r5, r4
  422cd8:	fba1 5106 	umull	r5, r1, r1, r6
  422cdc:	440c      	add	r4, r1
  422cde:	f005 0101 	and.w	r1, r5, #1
  422ce2:	086d      	lsrs	r5, r5, #1
  422ce4:	fba1 1b0b 	umull	r1, fp, r1, fp
  422ce8:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
  422cec:	1809      	adds	r1, r1, r0
  422cee:	0864      	lsrs	r4, r4, #1
  422cf0:	3130      	adds	r1, #48	@ 0x30
  422cf2:	f80c 1c01 	strb.w	r1, [ip, #-1]
  422cf6:	2b00      	cmp	r3, #0
  422cf8:	d0cb      	beq.n	422c92 <_svfprintf_r+0x12ba>
  422cfa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
  422cfc:	7809      	ldrb	r1, [r1, #0]
  422cfe:	29ff      	cmp	r1, #255	@ 0xff
  422d00:	d0c7      	beq.n	422c92 <_svfprintf_r+0x12ba>
  422d02:	4551      	cmp	r1, sl
  422d04:	d1c5      	bne.n	422c92 <_svfprintf_r+0x12ba>
  422d06:	f1be 0f0a 	cmp.w	lr, #10
  422d0a:	f172 0200 	sbcs.w	r2, r2, #0
  422d0e:	f080 823c 	bcs.w	42318a <_svfprintf_r+0x17b2>
  422d12:	4642      	mov	r2, r8
  422d14:	ab52      	add	r3, sp, #328	@ 0x148
  422d16:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  422d1a:	1a9b      	subs	r3, r3, r2
  422d1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
  422d20:	f8dd b00c 	ldr.w	fp, [sp, #12]
  422d24:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  422d28:	9307      	str	r3, [sp, #28]
  422d2a:	f7ff b94d 	b.w	421fc8 <_svfprintf_r+0x5f0>
  422d2e:	aa26      	add	r2, sp, #152	@ 0x98
  422d30:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422d32:	4650      	mov	r0, sl
  422d34:	f001 ffe6 	bl	424d04 <__ssprint_r>
  422d38:	2800      	cmp	r0, #0
  422d3a:	f47f aaf1 	bne.w	422320 <_svfprintf_r+0x948>
  422d3e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  422d40:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  422d44:	f7fe bfc1 	b.w	421cca <_svfprintf_r+0x2f2>
  422d48:	aa26      	add	r2, sp, #152	@ 0x98
  422d4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422d4c:	9804      	ldr	r0, [sp, #16]
  422d4e:	930d      	str	r3, [sp, #52]	@ 0x34
  422d50:	f001 ffd8 	bl	424d04 <__ssprint_r>
  422d54:	2800      	cmp	r0, #0
  422d56:	f040 83a6 	bne.w	4234a6 <_svfprintf_r+0x1ace>
  422d5a:	f89a 0000 	ldrb.w	r0, [sl]
  422d5e:	a929      	add	r1, sp, #164	@ 0xa4
  422d60:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  422d62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  422d64:	e6c5      	b.n	422af2 <_svfprintf_r+0x111a>
  422d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  422d68:	9a06      	ldr	r2, [sp, #24]
  422d6a:	681b      	ldr	r3, [r3, #0]
  422d6c:	601a      	str	r2, [r3, #0]
  422d6e:	f7ff b972 	b.w	422056 <_svfprintf_r+0x67e>
  422d72:	bf00      	nop
  422d74:	0043c634 	.word	0x0043c634
  422d78:	cccccccd 	.word	0xcccccccd
  422d7c:	46b0      	mov	r8, r6
  422d7e:	3301      	adds	r3, #1
  422d80:	442a      	add	r2, r5
  422d82:	f8c0 8000 	str.w	r8, [r0]
  422d86:	2b07      	cmp	r3, #7
  422d88:	6045      	str	r5, [r0, #4]
  422d8a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  422d8e:	f77f ab4d 	ble.w	42242c <_svfprintf_r+0xa54>
  422d92:	e460      	b.n	422656 <_svfprintf_r+0xc7e>
  422d94:	9902      	ldr	r1, [sp, #8]
  422d96:	920b      	str	r2, [sp, #44]	@ 0x2c
  422d98:	0589      	lsls	r1, r1, #22
  422d9a:	f140 8127 	bpl.w	422fec <_svfprintf_r+0x1614>
  422d9e:	f343 12c0 	sbfx	r2, r3, #7, #1
  422da2:	b25b      	sxtb	r3, r3
  422da4:	4611      	mov	r1, r2
  422da6:	f7ff b8aa 	b.w	421efe <_svfprintf_r+0x526>
  422daa:	9b04      	ldr	r3, [sp, #16]
  422dac:	1c5a      	adds	r2, r3, #1
  422dae:	f000 815f 	beq.w	423070 <_svfprintf_r+0x1698>
  422db2:	2c47      	cmp	r4, #71	@ 0x47
  422db4:	d103      	bne.n	422dbe <_svfprintf_r+0x13e6>
  422db6:	2b00      	cmp	r3, #0
  422db8:	bf08      	it	eq
  422dba:	2301      	moveq	r3, #1
  422dbc:	9304      	str	r3, [sp, #16]
  422dbe:	9b02      	ldr	r3, [sp, #8]
  422dc0:	f443 7680 	orr.w	r6, r3, #256	@ 0x100
  422dc4:	ee18 3a90 	vmov	r3, s17
  422dc8:	2b00      	cmp	r3, #0
  422dca:	f2c0 82d3 	blt.w	423374 <_svfprintf_r+0x199c>
  422dce:	eeb0 9b48 	vmov.f64	d9, d8
  422dd2:	f04f 0800 	mov.w	r8, #0
  422dd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  422dd8:	2b65      	cmp	r3, #101	@ 0x65
  422dda:	f000 820c 	beq.w	4231f6 <_svfprintf_r+0x181e>
  422dde:	f300 8191 	bgt.w	423104 <_svfprintf_r+0x172c>
  422de2:	2b45      	cmp	r3, #69	@ 0x45
  422de4:	f000 8207 	beq.w	4231f6 <_svfprintf_r+0x181e>
  422de8:	2b46      	cmp	r3, #70	@ 0x46
  422dea:	f040 818f 	bne.w	42310c <_svfprintf_r+0x1734>
  422dee:	9d04      	ldr	r5, [sp, #16]
  422df0:	2103      	movs	r1, #3
  422df2:	ab24      	add	r3, sp, #144	@ 0x90
  422df4:	eeb0 0b49 	vmov.f64	d0, d9
  422df8:	462a      	mov	r2, r5
  422dfa:	4650      	mov	r0, sl
  422dfc:	9301      	str	r3, [sp, #4]
  422dfe:	ab1f      	add	r3, sp, #124	@ 0x7c
  422e00:	9300      	str	r3, [sp, #0]
  422e02:	ab1d      	add	r3, sp, #116	@ 0x74
  422e04:	f001 f914 	bl	424030 <_dtoa_r>
  422e08:	2c46      	cmp	r4, #70	@ 0x46
  422e0a:	900c      	str	r0, [sp, #48]	@ 0x30
  422e0c:	4428      	add	r0, r5
  422e0e:	d106      	bne.n	422e1e <_svfprintf_r+0x1446>
  422e10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  422e12:	781b      	ldrb	r3, [r3, #0]
  422e14:	2b30      	cmp	r3, #48	@ 0x30
  422e16:	f000 8206 	beq.w	423226 <_svfprintf_r+0x184e>
  422e1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
  422e1c:	4418      	add	r0, r3
  422e1e:	eeb5 9b40 	vcmp.f64	d9, #0.0
  422e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  422e26:	f000 81ea 	beq.w	4231fe <_svfprintf_r+0x1826>
  422e2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
  422e2c:	4283      	cmp	r3, r0
  422e2e:	d206      	bcs.n	422e3e <_svfprintf_r+0x1466>
  422e30:	2130      	movs	r1, #48	@ 0x30
  422e32:	1c5a      	adds	r2, r3, #1
  422e34:	9224      	str	r2, [sp, #144]	@ 0x90
  422e36:	7019      	strb	r1, [r3, #0]
  422e38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
  422e3a:	4298      	cmp	r0, r3
  422e3c:	d8f9      	bhi.n	422e32 <_svfprintf_r+0x145a>
  422e3e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
  422e40:	920e      	str	r2, [sp, #56]	@ 0x38
  422e42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  422e44:	2c47      	cmp	r4, #71	@ 0x47
  422e46:	eba3 0302 	sub.w	r3, r3, r2
  422e4a:	9310      	str	r3, [sp, #64]	@ 0x40
  422e4c:	f000 8126 	beq.w	42309c <_svfprintf_r+0x16c4>
  422e50:	2c46      	cmp	r4, #70	@ 0x46
  422e52:	f000 81f4 	beq.w	42323e <_svfprintf_r+0x1866>
  422e56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  422e58:	3b01      	subs	r3, #1
  422e5a:	2100      	movs	r1, #0
  422e5c:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
  422e60:	931d      	str	r3, [sp, #116]	@ 0x74
  422e62:	910a      	str	r1, [sp, #40]	@ 0x28
  422e64:	2b00      	cmp	r3, #0
  422e66:	f88d 2080 	strb.w	r2, [sp, #128]	@ 0x80
  422e6a:	f2c0 8271 	blt.w	423350 <_svfprintf_r+0x1978>
  422e6e:	222b      	movs	r2, #43	@ 0x2b
  422e70:	2b09      	cmp	r3, #9
  422e72:	f88d 2081 	strb.w	r2, [sp, #129]	@ 0x81
  422e76:	f340 8259 	ble.w	42332c <_svfprintf_r+0x1954>
  422e7a:	f10d 0697 	add.w	r6, sp, #151	@ 0x97
  422e7e:	f8df c69c 	ldr.w	ip, [pc, #1692]	@ 42351c <_svfprintf_r+0x1b44>
  422e82:	4634      	mov	r4, r6
  422e84:	fbac 2503 	umull	r2, r5, ip, r3
  422e88:	4619      	mov	r1, r3
  422e8a:	4620      	mov	r0, r4
  422e8c:	3c01      	subs	r4, #1
  422e8e:	08ed      	lsrs	r5, r5, #3
  422e90:	2963      	cmp	r1, #99	@ 0x63
  422e92:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  422e96:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  422e9a:	462b      	mov	r3, r5
  422e9c:	f102 0230 	add.w	r2, r2, #48	@ 0x30
  422ea0:	f800 2c01 	strb.w	r2, [r0, #-1]
  422ea4:	dcee      	bgt.n	422e84 <_svfprintf_r+0x14ac>
  422ea6:	3330      	adds	r3, #48	@ 0x30
  422ea8:	f804 3c01 	strb.w	r3, [r4, #-1]
  422eac:	1e83      	subs	r3, r0, #2
  422eae:	42b3      	cmp	r3, r6
  422eb0:	f080 82f6 	bcs.w	4234a0 <_svfprintf_r+0x1ac8>
  422eb4:	f10d 0281 	add.w	r2, sp, #129	@ 0x81
  422eb8:	f813 1b01 	ldrb.w	r1, [r3], #1
  422ebc:	42b3      	cmp	r3, r6
  422ebe:	f802 1f01 	strb.w	r1, [r2, #1]!
  422ec2:	d1f9      	bne.n	422eb8 <_svfprintf_r+0x14e0>
  422ec4:	ab52      	add	r3, sp, #328	@ 0x148
  422ec6:	1a18      	subs	r0, r3, r0
  422ec8:	f1a0 03ad 	sub.w	r3, r0, #173	@ 0xad
  422ecc:	9315      	str	r3, [sp, #84]	@ 0x54
  422ece:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  422ed0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
  422ed2:	2b01      	cmp	r3, #1
  422ed4:	441a      	add	r2, r3
  422ed6:	9207      	str	r2, [sp, #28]
  422ed8:	f340 8235 	ble.w	423346 <_svfprintf_r+0x196e>
  422edc:	9b07      	ldr	r3, [sp, #28]
  422ede:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  422ee0:	4413      	add	r3, r2
  422ee2:	9307      	str	r3, [sp, #28]
  422ee4:	9b02      	ldr	r3, [sp, #8]
  422ee6:	9a07      	ldr	r2, [sp, #28]
  422ee8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  422eec:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  422ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  422ef4:	9203      	str	r2, [sp, #12]
  422ef6:	9302      	str	r3, [sp, #8]
  422ef8:	2300      	movs	r3, #0
  422efa:	9311      	str	r3, [sp, #68]	@ 0x44
  422efc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  422f00:	f1b8 0f00 	cmp.w	r8, #0
  422f04:	f040 80d6 	bne.w	4230b4 <_svfprintf_r+0x16dc>
  422f08:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  422f0c:	f8cd 8010 	str.w	r8, [sp, #16]
  422f10:	f7fe bf43 	b.w	421d9a <_svfprintf_r+0x3c2>
  422f14:	46b0      	mov	r8, r6
  422f16:	3301      	adds	r3, #1
  422f18:	4422      	add	r2, r4
  422f1a:	f8cb 8000 	str.w	r8, [fp]
  422f1e:	2b07      	cmp	r3, #7
  422f20:	f8cb 4004 	str.w	r4, [fp, #4]
  422f24:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  422f28:	f300 80a5 	bgt.w	423076 <_svfprintf_r+0x169e>
  422f2c:	f10b 0b08 	add.w	fp, fp, #8
  422f30:	f7ff bb22 	b.w	422578 <_svfprintf_r+0xba0>
  422f34:	2300      	movs	r3, #0
  422f36:	aa1f      	add	r2, sp, #124	@ 0x7c
  422f38:	4650      	mov	r0, sl
  422f3a:	9500      	str	r5, [sp, #0]
  422f3c:	4619      	mov	r1, r3
  422f3e:	f7fe f899 	bl	421074 <_wcsrtombs_r>
  422f42:	4603      	mov	r3, r0
  422f44:	9007      	str	r0, [sp, #28]
  422f46:	3301      	adds	r3, #1
  422f48:	f000 8207 	beq.w	42335a <_svfprintf_r+0x1982>
  422f4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  422f4e:	931f      	str	r3, [sp, #124]	@ 0x7c
  422f50:	9b07      	ldr	r3, [sp, #28]
  422f52:	2b00      	cmp	r3, #0
  422f54:	d038      	beq.n	422fc8 <_svfprintf_r+0x15f0>
  422f56:	2b63      	cmp	r3, #99	@ 0x63
  422f58:	dc73      	bgt.n	423042 <_svfprintf_r+0x166a>
  422f5a:	2300      	movs	r3, #0
  422f5c:	930a      	str	r3, [sp, #40]	@ 0x28
  422f5e:	ab39      	add	r3, sp, #228	@ 0xe4
  422f60:	930c      	str	r3, [sp, #48]	@ 0x30
  422f62:	2208      	movs	r2, #8
  422f64:	2100      	movs	r1, #0
  422f66:	4628      	mov	r0, r5
  422f68:	f7fd fe9c 	bl	420ca4 <memset>
  422f6c:	9c07      	ldr	r4, [sp, #28]
  422f6e:	aa1f      	add	r2, sp, #124	@ 0x7c
  422f70:	990c      	ldr	r1, [sp, #48]	@ 0x30
  422f72:	4623      	mov	r3, r4
  422f74:	4650      	mov	r0, sl
  422f76:	9500      	str	r5, [sp, #0]
  422f78:	f7fe f87c 	bl	421074 <_wcsrtombs_r>
  422f7c:	4284      	cmp	r4, r0
  422f7e:	f040 82bb 	bne.w	4234f8 <_svfprintf_r+0x1b20>
  422f82:	2300      	movs	r3, #0
  422f84:	990c      	ldr	r1, [sp, #48]	@ 0x30
  422f86:	9a07      	ldr	r2, [sp, #28]
  422f88:	960b      	str	r6, [sp, #44]	@ 0x2c
  422f8a:	548b      	strb	r3, [r1, r2]
  422f8c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  422f90:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  422f94:	9304      	str	r3, [sp, #16]
  422f96:	9203      	str	r2, [sp, #12]
  422f98:	9311      	str	r3, [sp, #68]	@ 0x44
  422f9a:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  422f9e:	f7fe befc 	b.w	421d9a <_svfprintf_r+0x3c2>
  422fa2:	212d      	movs	r1, #45	@ 0x2d
  422fa4:	f88d 106f 	strb.w	r1, [sp, #111]	@ 0x6f
  422fa8:	f7fe bee3 	b.w	421d72 <_svfprintf_r+0x39a>
  422fac:	aa26      	add	r2, sp, #152	@ 0x98
  422fae:	9909      	ldr	r1, [sp, #36]	@ 0x24
  422fb0:	4650      	mov	r0, sl
  422fb2:	f001 fea7 	bl	424d04 <__ssprint_r>
  422fb6:	2800      	cmp	r0, #0
  422fb8:	f47f a9b2 	bne.w	422320 <_svfprintf_r+0x948>
  422fbc:	991d      	ldr	r1, [sp, #116]	@ 0x74
  422fbe:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  422fc2:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  422fc4:	f7ff b9d0 	b.w	422368 <_svfprintf_r+0x990>
  422fc8:	9b07      	ldr	r3, [sp, #28]
  422fca:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  422fce:	960b      	str	r6, [sp, #44]	@ 0x2c
  422fd0:	9311      	str	r3, [sp, #68]	@ 0x44
  422fd2:	930a      	str	r3, [sp, #40]	@ 0x28
  422fd4:	e9cd 3303 	strd	r3, r3, [sp, #12]
  422fd8:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  422fdc:	f7fe bedd 	b.w	421d9a <_svfprintf_r+0x3c2>
  422fe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  422fe2:	9a06      	ldr	r2, [sp, #24]
  422fe4:	681b      	ldr	r3, [r3, #0]
  422fe6:	801a      	strh	r2, [r3, #0]
  422fe8:	f7ff b835 	b.w	422056 <_svfprintf_r+0x67e>
  422fec:	17da      	asrs	r2, r3, #31
  422fee:	4611      	mov	r1, r2
  422ff0:	f7fe bf85 	b.w	421efe <_svfprintf_r+0x526>
  422ff4:	b2db      	uxtb	r3, r3
  422ff6:	4622      	mov	r2, r4
  422ff8:	910b      	str	r1, [sp, #44]	@ 0x2c
  422ffa:	f7ff b813 	b.w	422024 <_svfprintf_r+0x64c>
  422ffe:	b2db      	uxtb	r3, r3
  423000:	4622      	mov	r2, r4
  423002:	910b      	str	r1, [sp, #44]	@ 0x2c
  423004:	e489      	b.n	42291a <_svfprintf_r+0xf42>
  423006:	980c      	ldr	r0, [sp, #48]	@ 0x30
  423008:	f7fd ffe0 	bl	420fcc <strlen>
  42300c:	2273      	movs	r2, #115	@ 0x73
  42300e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  423010:	920d      	str	r2, [sp, #52]	@ 0x34
  423012:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
  423016:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  42301a:	960b      	str	r6, [sp, #44]	@ 0x2c
  42301c:	9007      	str	r0, [sp, #28]
  42301e:	9304      	str	r3, [sp, #16]
  423020:	9203      	str	r2, [sp, #12]
  423022:	9311      	str	r3, [sp, #68]	@ 0x44
  423024:	930f      	str	r3, [sp, #60]	@ 0x3c
  423026:	930a      	str	r3, [sp, #40]	@ 0x28
  423028:	f7fe beb7 	b.w	421d9a <_svfprintf_r+0x3c2>
  42302c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  42302e:	aa26      	add	r2, sp, #152	@ 0x98
  423030:	4650      	mov	r0, sl
  423032:	4621      	mov	r1, r4
  423034:	f001 fe66 	bl	424d04 <__ssprint_r>
  423038:	89a3      	ldrh	r3, [r4, #12]
  42303a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  42303e:	f7fe bdde 	b.w	421bfe <_svfprintf_r+0x226>
  423042:	1c59      	adds	r1, r3, #1
  423044:	4650      	mov	r0, sl
  423046:	f7fe fa05 	bl	421454 <_malloc_r>
  42304a:	900c      	str	r0, [sp, #48]	@ 0x30
  42304c:	2800      	cmp	r0, #0
  42304e:	f000 8259 	beq.w	423504 <_svfprintf_r+0x1b2c>
  423052:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  423054:	930a      	str	r3, [sp, #40]	@ 0x28
  423056:	e784      	b.n	422f62 <_svfprintf_r+0x158a>
  423058:	1c59      	adds	r1, r3, #1
  42305a:	4650      	mov	r0, sl
  42305c:	f7fe f9fa 	bl	421454 <_malloc_r>
  423060:	900c      	str	r0, [sp, #48]	@ 0x30
  423062:	2800      	cmp	r0, #0
  423064:	f000 8158 	beq.w	423318 <_svfprintf_r+0x1940>
  423068:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  42306a:	930a      	str	r3, [sp, #40]	@ 0x28
  42306c:	f7ff bbb9 	b.w	4227e2 <_svfprintf_r+0xe0a>
  423070:	2306      	movs	r3, #6
  423072:	9304      	str	r3, [sp, #16]
  423074:	e6a3      	b.n	422dbe <_svfprintf_r+0x13e6>
  423076:	aa26      	add	r2, sp, #152	@ 0x98
  423078:	9909      	ldr	r1, [sp, #36]	@ 0x24
  42307a:	4650      	mov	r0, sl
  42307c:	f001 fe42 	bl	424d04 <__ssprint_r>
  423080:	2800      	cmp	r0, #0
  423082:	f47f a94d 	bne.w	422320 <_svfprintf_r+0x948>
  423086:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  423088:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  42308c:	f7ff ba74 	b.w	422578 <_svfprintf_r+0xba0>
  423090:	9b24      	ldr	r3, [sp, #144]	@ 0x90
  423092:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  423094:	1a9b      	subs	r3, r3, r2
  423096:	9310      	str	r3, [sp, #64]	@ 0x40
  423098:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
  42309a:	930e      	str	r3, [sp, #56]	@ 0x38
  42309c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  42309e:	1cda      	adds	r2, r3, #3
  4230a0:	db02      	blt.n	4230a8 <_svfprintf_r+0x16d0>
  4230a2:	9a04      	ldr	r2, [sp, #16]
  4230a4:	429a      	cmp	r2, r3
  4230a6:	da0c      	bge.n	4230c2 <_svfprintf_r+0x16ea>
  4230a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  4230aa:	3b02      	subs	r3, #2
  4230ac:	930d      	str	r3, [sp, #52]	@ 0x34
  4230ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  4230b0:	3b01      	subs	r3, #1
  4230b2:	e6d2      	b.n	422e5a <_svfprintf_r+0x1482>
  4230b4:	212d      	movs	r1, #45	@ 0x2d
  4230b6:	2300      	movs	r3, #0
  4230b8:	f88d 106f 	strb.w	r1, [sp, #111]	@ 0x6f
  4230bc:	9304      	str	r3, [sp, #16]
  4230be:	f7fe be6f 	b.w	421da0 <_svfprintf_r+0x3c8>
  4230c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  4230c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  4230c6:	4293      	cmp	r3, r2
  4230c8:	f300 8100 	bgt.w	4232cc <_svfprintf_r+0x18f4>
  4230cc:	9b02      	ldr	r3, [sp, #8]
  4230ce:	f013 0f01 	tst.w	r3, #1
  4230d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  4230d4:	f000 814c 	beq.w	423370 <_svfprintf_r+0x1998>
  4230d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  4230da:	4413      	add	r3, r2
  4230dc:	9307      	str	r3, [sp, #28]
  4230de:	9b02      	ldr	r3, [sp, #8]
  4230e0:	055d      	lsls	r5, r3, #21
  4230e2:	d503      	bpl.n	4230ec <_svfprintf_r+0x1714>
  4230e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  4230e6:	2b00      	cmp	r3, #0
  4230e8:	f300 814c 	bgt.w	423384 <_svfprintf_r+0x19ac>
  4230ec:	9b07      	ldr	r3, [sp, #28]
  4230ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4230f2:	9303      	str	r3, [sp, #12]
  4230f4:	2367      	movs	r3, #103	@ 0x67
  4230f6:	930d      	str	r3, [sp, #52]	@ 0x34
  4230f8:	2300      	movs	r3, #0
  4230fa:	9602      	str	r6, [sp, #8]
  4230fc:	930a      	str	r3, [sp, #40]	@ 0x28
  4230fe:	9311      	str	r3, [sp, #68]	@ 0x44
  423100:	930f      	str	r3, [sp, #60]	@ 0x3c
  423102:	e6fd      	b.n	422f00 <_svfprintf_r+0x1528>
  423104:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  423106:	2b66      	cmp	r3, #102	@ 0x66
  423108:	f43f ae71 	beq.w	422dee <_svfprintf_r+0x1416>
  42310c:	ab24      	add	r3, sp, #144	@ 0x90
  42310e:	2102      	movs	r1, #2
  423110:	eeb0 0b49 	vmov.f64	d0, d9
  423114:	9a04      	ldr	r2, [sp, #16]
  423116:	9301      	str	r3, [sp, #4]
  423118:	ab1f      	add	r3, sp, #124	@ 0x7c
  42311a:	4650      	mov	r0, sl
  42311c:	9300      	str	r3, [sp, #0]
  42311e:	ab1d      	add	r3, sp, #116	@ 0x74
  423120:	f000 ff86 	bl	424030 <_dtoa_r>
  423124:	9b02      	ldr	r3, [sp, #8]
  423126:	900c      	str	r0, [sp, #48]	@ 0x30
  423128:	07d9      	lsls	r1, r3, #31
  42312a:	d5b1      	bpl.n	423090 <_svfprintf_r+0x16b8>
  42312c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  42312e:	9a04      	ldr	r2, [sp, #16]
  423130:	1898      	adds	r0, r3, r2
  423132:	e674      	b.n	422e1e <_svfprintf_r+0x1446>
  423134:	aa26      	add	r2, sp, #152	@ 0x98
  423136:	9909      	ldr	r1, [sp, #36]	@ 0x24
  423138:	4650      	mov	r0, sl
  42313a:	f001 fde3 	bl	424d04 <__ssprint_r>
  42313e:	2800      	cmp	r0, #0
  423140:	f47f a8ee 	bne.w	422320 <_svfprintf_r+0x948>
  423144:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  423146:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  42314a:	f7ff ba0e 	b.w	42256a <_svfprintf_r+0xb92>
  42314e:	aa26      	add	r2, sp, #152	@ 0x98
  423150:	9909      	ldr	r1, [sp, #36]	@ 0x24
  423152:	4650      	mov	r0, sl
  423154:	f001 fdd6 	bl	424d04 <__ssprint_r>
  423158:	2800      	cmp	r0, #0
  42315a:	f47f a8e1 	bne.w	422320 <_svfprintf_r+0x948>
  42315e:	991d      	ldr	r1, [sp, #116]	@ 0x74
  423160:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  423164:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  423168:	f7ff b910 	b.w	42238c <_svfprintf_r+0x9b4>
  42316c:	aa26      	add	r2, sp, #152	@ 0x98
  42316e:	9909      	ldr	r1, [sp, #36]	@ 0x24
  423170:	9804      	ldr	r0, [sp, #16]
  423172:	930d      	str	r3, [sp, #52]	@ 0x34
  423174:	f001 fdc6 	bl	424d04 <__ssprint_r>
  423178:	2800      	cmp	r0, #0
  42317a:	f040 8194 	bne.w	4234a6 <_svfprintf_r+0x1ace>
  42317e:	f89a 0000 	ldrb.w	r0, [sl]
  423182:	a929      	add	r1, sp, #164	@ 0xa4
  423184:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  423186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  423188:	e4b9      	b.n	422afe <_svfprintf_r+0x1126>
  42318a:	930a      	str	r3, [sp, #40]	@ 0x28
  42318c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  42318e:	9918      	ldr	r1, [sp, #96]	@ 0x60
  423190:	eba8 0803 	sub.w	r8, r8, r3
  423194:	461a      	mov	r2, r3
  423196:	4640      	mov	r0, r8
  423198:	f7fd fe16 	bl	420dc8 <strncpy>
  42319c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
  42319e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  4231a0:	784a      	ldrb	r2, [r1, #1]
  4231a2:	b10a      	cbz	r2, 4231a8 <_svfprintf_r+0x17d0>
  4231a4:	3101      	adds	r1, #1
  4231a6:	9113      	str	r1, [sp, #76]	@ 0x4c
  4231a8:	f04f 0a00 	mov.w	sl, #0
  4231ac:	e576      	b.n	422c9c <_svfprintf_r+0x12c4>
  4231ae:	aa26      	add	r2, sp, #152	@ 0x98
  4231b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
  4231b2:	4650      	mov	r0, sl
  4231b4:	f001 fda6 	bl	424d04 <__ssprint_r>
  4231b8:	2800      	cmp	r0, #0
  4231ba:	f47f a8b1 	bne.w	422320 <_svfprintf_r+0x948>
  4231be:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
  4231c0:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  4231c4:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  4231c6:	f7ff b9e8 	b.w	42259a <_svfprintf_r+0xbc2>
  4231ca:	9b02      	ldr	r3, [sp, #8]
  4231cc:	07db      	lsls	r3, r3, #31
  4231ce:	f57e ad96 	bpl.w	421cfe <_svfprintf_r+0x326>
  4231d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  4231d4:	9914      	ldr	r1, [sp, #80]	@ 0x50
  4231d6:	441a      	add	r2, r3
  4231d8:	e9cb 1300 	strd	r1, r3, [fp]
  4231dc:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
  4231de:	9228      	str	r2, [sp, #160]	@ 0xa0
  4231e0:	3301      	adds	r3, #1
  4231e2:	2b07      	cmp	r3, #7
  4231e4:	9327      	str	r3, [sp, #156]	@ 0x9c
  4231e6:	dcb2      	bgt.n	42314e <_svfprintf_r+0x1776>
  4231e8:	f10b 0b08 	add.w	fp, fp, #8
  4231ec:	f7ff b8d1 	b.w	422392 <_svfprintf_r+0x9ba>
  4231f0:	46c2      	mov	sl, r8
  4231f2:	f7ff b895 	b.w	422320 <_svfprintf_r+0x948>
  4231f6:	9b04      	ldr	r3, [sp, #16]
  4231f8:	2102      	movs	r1, #2
  4231fa:	1c5d      	adds	r5, r3, #1
  4231fc:	e5f9      	b.n	422df2 <_svfprintf_r+0x141a>
  4231fe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
  423200:	4603      	mov	r3, r0
  423202:	920e      	str	r2, [sp, #56]	@ 0x38
  423204:	e61d      	b.n	422e42 <_svfprintf_r+0x146a>
  423206:	aa26      	add	r2, sp, #152	@ 0x98
  423208:	9909      	ldr	r1, [sp, #36]	@ 0x24
  42320a:	4650      	mov	r0, sl
  42320c:	f001 fd7a 	bl	424d04 <__ssprint_r>
  423210:	2800      	cmp	r0, #0
  423212:	f47f a885 	bne.w	422320 <_svfprintf_r+0x948>
  423216:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
  423218:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  42321c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  42321e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  423220:	1b1c      	subs	r4, r3, r4
  423222:	f7ff b9d3 	b.w	4225cc <_svfprintf_r+0xbf4>
  423226:	eeb5 9b40 	vcmp.f64	d9, #0.0
  42322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  42322e:	f040 8123 	bne.w	423478 <_svfprintf_r+0x1aa0>
  423232:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
  423234:	4418      	add	r0, r3
  423236:	930e      	str	r3, [sp, #56]	@ 0x38
  423238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  42323a:	1ac3      	subs	r3, r0, r3
  42323c:	9310      	str	r3, [sp, #64]	@ 0x40
  42323e:	9b02      	ldr	r3, [sp, #8]
  423240:	990e      	ldr	r1, [sp, #56]	@ 0x38
  423242:	f003 0301 	and.w	r3, r3, #1
  423246:	9a04      	ldr	r2, [sp, #16]
  423248:	2900      	cmp	r1, #0
  42324a:	ea43 0302 	orr.w	r3, r3, r2
  42324e:	f340 812e 	ble.w	4234ae <_svfprintf_r+0x1ad6>
  423252:	2b00      	cmp	r3, #0
  423254:	f040 80e1 	bne.w	42341a <_svfprintf_r+0x1a42>
  423258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  42325a:	9307      	str	r3, [sp, #28]
  42325c:	2366      	movs	r3, #102	@ 0x66
  42325e:	930d      	str	r3, [sp, #52]	@ 0x34
  423260:	9b02      	ldr	r3, [sp, #8]
  423262:	055b      	lsls	r3, r3, #21
  423264:	f100 8090 	bmi.w	423388 <_svfprintf_r+0x19b0>
  423268:	9b07      	ldr	r3, [sp, #28]
  42326a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  42326e:	9303      	str	r3, [sp, #12]
  423270:	e742      	b.n	4230f8 <_svfprintf_r+0x1720>
  423272:	2200      	movs	r2, #0
  423274:	4604      	mov	r4, r0
  423276:	9204      	str	r2, [sp, #16]
  423278:	f7fe bc0d 	b.w	421a96 <_svfprintf_r+0xbe>
  42327c:	424c      	negs	r4, r1
  42327e:	3110      	adds	r1, #16
  423280:	f8df 829c 	ldr.w	r8, [pc, #668]	@ 423520 <_svfprintf_r+0x1b48>
  423284:	da2f      	bge.n	4232e6 <_svfprintf_r+0x190e>
  423286:	2510      	movs	r5, #16
  423288:	4646      	mov	r6, r8
  42328a:	e002      	b.n	423292 <_svfprintf_r+0x18ba>
  42328c:	3c10      	subs	r4, #16
  42328e:	2c10      	cmp	r4, #16
  423290:	dd28      	ble.n	4232e4 <_svfprintf_r+0x190c>
  423292:	3301      	adds	r3, #1
  423294:	3210      	adds	r2, #16
  423296:	2b07      	cmp	r3, #7
  423298:	e9cb 6500 	strd	r6, r5, [fp]
  42329c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  4232a0:	f10b 0b08 	add.w	fp, fp, #8
  4232a4:	ddf2      	ble.n	42328c <_svfprintf_r+0x18b4>
  4232a6:	aa26      	add	r2, sp, #152	@ 0x98
  4232a8:	9909      	ldr	r1, [sp, #36]	@ 0x24
  4232aa:	4650      	mov	r0, sl
  4232ac:	f001 fd2a 	bl	424d04 <__ssprint_r>
  4232b0:	2800      	cmp	r0, #0
  4232b2:	f47f a835 	bne.w	422320 <_svfprintf_r+0x948>
  4232b6:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  4232ba:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  4232be:	e7e5      	b.n	42328c <_svfprintf_r+0x18b4>
  4232c0:	eeb0 0b48 	vmov.f64	d0, d8
  4232c4:	f04f 0800 	mov.w	r8, #0
  4232c8:	f7ff ba94 	b.w	4227f4 <_svfprintf_r+0xe1c>
  4232cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  4232ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  4232d0:	4413      	add	r3, r2
  4232d2:	461a      	mov	r2, r3
  4232d4:	9307      	str	r3, [sp, #28]
  4232d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  4232d8:	2b00      	cmp	r3, #0
  4232da:	f340 80a5 	ble.w	423428 <_svfprintf_r+0x1a50>
  4232de:	2367      	movs	r3, #103	@ 0x67
  4232e0:	930d      	str	r3, [sp, #52]	@ 0x34
  4232e2:	e7bd      	b.n	423260 <_svfprintf_r+0x1888>
  4232e4:	46b0      	mov	r8, r6
  4232e6:	3301      	adds	r3, #1
  4232e8:	4422      	add	r2, r4
  4232ea:	f8cb 8000 	str.w	r8, [fp]
  4232ee:	2b07      	cmp	r3, #7
  4232f0:	f8cb 4004 	str.w	r4, [fp, #4]
  4232f4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
  4232f8:	f77f af76 	ble.w	4231e8 <_svfprintf_r+0x1810>
  4232fc:	aa26      	add	r2, sp, #152	@ 0x98
  4232fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
  423300:	4650      	mov	r0, sl
  423302:	f001 fcff 	bl	424d04 <__ssprint_r>
  423306:	2800      	cmp	r0, #0
  423308:	f47f a80a 	bne.w	422320 <_svfprintf_r+0x948>
  42330c:	f10d 0ba4 	add.w	fp, sp, #164	@ 0xa4
  423310:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
  423314:	f7ff b83d 	b.w	422392 <_svfprintf_r+0x9ba>
  423318:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  42331a:	8993      	ldrh	r3, [r2, #12]
  42331c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  423320:	8193      	strh	r3, [r2, #12]
  423322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  423326:	9306      	str	r3, [sp, #24]
  423328:	f7fe bc6c 	b.w	421c04 <_svfprintf_r+0x22c>
  42332c:	bb39      	cbnz	r1, 42337e <_svfprintf_r+0x19a6>
  42332e:	2230      	movs	r2, #48	@ 0x30
  423330:	f88d 2082 	strb.w	r2, [sp, #130]	@ 0x82
  423334:	f10d 0283 	add.w	r2, sp, #131	@ 0x83
  423338:	3330      	adds	r3, #48	@ 0x30
  42333a:	f802 3b01 	strb.w	r3, [r2], #1
  42333e:	ab20      	add	r3, sp, #128	@ 0x80
  423340:	1ad3      	subs	r3, r2, r3
  423342:	9315      	str	r3, [sp, #84]	@ 0x54
  423344:	e5c3      	b.n	422ece <_svfprintf_r+0x14f6>
  423346:	9b02      	ldr	r3, [sp, #8]
  423348:	07de      	lsls	r6, r3, #31
  42334a:	f57f adcb 	bpl.w	422ee4 <_svfprintf_r+0x150c>
  42334e:	e5c5      	b.n	422edc <_svfprintf_r+0x1504>
  423350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  423352:	222d      	movs	r2, #45	@ 0x2d
  423354:	f1c3 0301 	rsb	r3, r3, #1
  423358:	e58a      	b.n	422e70 <_svfprintf_r+0x1498>
  42335a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  42335c:	2200      	movs	r2, #0
  42335e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  423362:	920a      	str	r2, [sp, #40]	@ 0x28
  423364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  423368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  42336a:	8193      	strh	r3, [r2, #12]
  42336c:	f7fe bfd8 	b.w	422320 <_svfprintf_r+0x948>
  423370:	9307      	str	r3, [sp, #28]
  423372:	e6b4      	b.n	4230de <_svfprintf_r+0x1706>
  423374:	eeb1 9b48 	vneg.f64	d9, d8
  423378:	f04f 082d 	mov.w	r8, #45	@ 0x2d
  42337c:	e52b      	b.n	422dd6 <_svfprintf_r+0x13fe>
  42337e:	f10d 0282 	add.w	r2, sp, #130	@ 0x82
  423382:	e7d9      	b.n	423338 <_svfprintf_r+0x1960>
  423384:	2367      	movs	r3, #103	@ 0x67
  423386:	930d      	str	r3, [sp, #52]	@ 0x34
  423388:	9913      	ldr	r1, [sp, #76]	@ 0x4c
  42338a:	780b      	ldrb	r3, [r1, #0]
  42338c:	2bff      	cmp	r3, #255	@ 0xff
  42338e:	f000 80af 	beq.w	4234f0 <_svfprintf_r+0x1b18>
  423392:	2400      	movs	r4, #0
  423394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
  423396:	4620      	mov	r0, r4
  423398:	e003      	b.n	4233a2 <_svfprintf_r+0x19ca>
  42339a:	3001      	adds	r0, #1
  42339c:	3101      	adds	r1, #1
  42339e:	2bff      	cmp	r3, #255	@ 0xff
  4233a0:	d008      	beq.n	4233b4 <_svfprintf_r+0x19dc>
  4233a2:	4293      	cmp	r3, r2
  4233a4:	da06      	bge.n	4233b4 <_svfprintf_r+0x19dc>
  4233a6:	1ad2      	subs	r2, r2, r3
  4233a8:	784b      	ldrb	r3, [r1, #1]
  4233aa:	2b00      	cmp	r3, #0
  4233ac:	d1f5      	bne.n	42339a <_svfprintf_r+0x19c2>
  4233ae:	780b      	ldrb	r3, [r1, #0]
  4233b0:	3401      	adds	r4, #1
  4233b2:	e7f4      	b.n	42339e <_svfprintf_r+0x19c6>
  4233b4:	900f      	str	r0, [sp, #60]	@ 0x3c
  4233b6:	9113      	str	r1, [sp, #76]	@ 0x4c
  4233b8:	9411      	str	r4, [sp, #68]	@ 0x44
  4233ba:	920e      	str	r2, [sp, #56]	@ 0x38
  4233bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  4233be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  4233c0:	9916      	ldr	r1, [sp, #88]	@ 0x58
  4233c2:	4413      	add	r3, r2
  4233c4:	9a07      	ldr	r2, [sp, #28]
  4233c6:	9602      	str	r6, [sp, #8]
  4233c8:	fb01 2303 	mla	r3, r1, r3, r2
  4233cc:	2200      	movs	r2, #0
  4233ce:	9307      	str	r3, [sp, #28]
  4233d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4233d4:	920a      	str	r2, [sp, #40]	@ 0x28
  4233d6:	9303      	str	r3, [sp, #12]
  4233d8:	e592      	b.n	422f00 <_svfprintf_r+0x1528>
  4233da:	e9dd 6303 	ldrd	r6, r3, [sp, #12]
  4233de:	9307      	str	r3, [sp, #28]
  4233e0:	e5b6      	b.n	422f50 <_svfprintf_r+0x1578>
  4233e2:	ee18 3a90 	vmov	r3, s17
  4233e6:	2b00      	cmp	r3, #0
  4233e8:	db36      	blt.n	423458 <_svfprintf_r+0x1a80>
  4233ea:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  4233ee:	9b02      	ldr	r3, [sp, #8]
  4233f0:	2000      	movs	r0, #0
  4233f2:	4a48      	ldr	r2, [pc, #288]	@ (423514 <_svfprintf_r+0x1b3c>)
  4233f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  4233f8:	900a      	str	r0, [sp, #40]	@ 0x28
  4233fa:	9302      	str	r3, [sp, #8]
  4233fc:	4b46      	ldr	r3, [pc, #280]	@ (423518 <_svfprintf_r+0x1b40>)
  4233fe:	f7fe bcc0 	b.w	421d82 <_svfprintf_r+0x3aa>
  423402:	2b00      	cmp	r3, #0
  423404:	f6ff aa49 	blt.w	42289a <_svfprintf_r+0xec2>
  423408:	3301      	adds	r3, #1
  42340a:	2130      	movs	r1, #48	@ 0x30
  42340c:	4413      	add	r3, r2
  42340e:	f802 1b01 	strb.w	r1, [r2], #1
  423412:	4293      	cmp	r3, r2
  423414:	d1fb      	bne.n	42340e <_svfprintf_r+0x1a36>
  423416:	f7ff ba41 	b.w	42289c <_svfprintf_r+0xec4>
  42341a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  42341c:	441a      	add	r2, r3
  42341e:	1853      	adds	r3, r2, r1
  423420:	9307      	str	r3, [sp, #28]
  423422:	2366      	movs	r3, #102	@ 0x66
  423424:	930d      	str	r3, [sp, #52]	@ 0x34
  423426:	e71b      	b.n	423260 <_svfprintf_r+0x1888>
  423428:	f1c3 0301 	rsb	r3, r3, #1
  42342c:	441a      	add	r2, r3
  42342e:	4613      	mov	r3, r2
  423430:	9207      	str	r2, [sp, #28]
  423432:	2267      	movs	r2, #103	@ 0x67
  423434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  423438:	920d      	str	r2, [sp, #52]	@ 0x34
  42343a:	9303      	str	r3, [sp, #12]
  42343c:	e65c      	b.n	4230f8 <_svfprintf_r+0x1720>
  42343e:	9b04      	ldr	r3, [sp, #16]
  423440:	2273      	movs	r2, #115	@ 0x73
  423442:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
  423446:	960b      	str	r6, [sp, #44]	@ 0x2c
  423448:	9303      	str	r3, [sp, #12]
  42344a:	9307      	str	r3, [sp, #28]
  42344c:	9004      	str	r0, [sp, #16]
  42344e:	920d      	str	r2, [sp, #52]	@ 0x34
  423450:	9011      	str	r0, [sp, #68]	@ 0x44
  423452:	900f      	str	r0, [sp, #60]	@ 0x3c
  423454:	f7fe bca1 	b.w	421d9a <_svfprintf_r+0x3c2>
  423458:	212d      	movs	r1, #45	@ 0x2d
  42345a:	f88d 106f 	strb.w	r1, [sp, #111]	@ 0x6f
  42345e:	e7c6      	b.n	4233ee <_svfprintf_r+0x1a16>
  423460:	f8df c0bc 	ldr.w	ip, [pc, #188]	@ 423520 <_svfprintf_r+0x1b48>
  423464:	f7ff bb98 	b.w	422b98 <_svfprintf_r+0x11c0>
  423468:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
  42346c:	468b      	mov	fp, r1
  42346e:	9b07      	ldr	r3, [sp, #28]
  423470:	f8dd a010 	ldr.w	sl, [sp, #16]
  423474:	f7ff bae9 	b.w	422a4a <_svfprintf_r+0x1072>
  423478:	f1c5 0301 	rsb	r3, r5, #1
  42347c:	931d      	str	r3, [sp, #116]	@ 0x74
  42347e:	e4cd      	b.n	422e1c <_svfprintf_r+0x1444>
  423480:	7a81      	ldrb	r1, [r0, #10]
  423482:	f7ff ba08 	b.w	422896 <_svfprintf_r+0xebe>
  423486:	eeb4 7b45 	vcmp.f64	d7, d5
  42348a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  42348e:	f47f aa04 	bne.w	42289a <_svfprintf_r+0xec2>
  423492:	ee16 3a90 	vmov	r3, s13
  423496:	07dc      	lsls	r4, r3, #31
  423498:	f57f a9ff 	bpl.w	42289a <_svfprintf_r+0xec2>
  42349c:	f7ff b9e5 	b.w	42286a <_svfprintf_r+0xe92>
  4234a0:	2302      	movs	r3, #2
  4234a2:	9315      	str	r3, [sp, #84]	@ 0x54
  4234a4:	e513      	b.n	422ece <_svfprintf_r+0x14f6>
  4234a6:	f8dd a010 	ldr.w	sl, [sp, #16]
  4234aa:	f7fe bf39 	b.w	422320 <_svfprintf_r+0x948>
  4234ae:	b92b      	cbnz	r3, 4234bc <_svfprintf_r+0x1ae4>
  4234b0:	2301      	movs	r3, #1
  4234b2:	2266      	movs	r2, #102	@ 0x66
  4234b4:	9303      	str	r3, [sp, #12]
  4234b6:	920d      	str	r2, [sp, #52]	@ 0x34
  4234b8:	9307      	str	r3, [sp, #28]
  4234ba:	e61d      	b.n	4230f8 <_svfprintf_r+0x1720>
  4234bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  4234be:	2266      	movs	r2, #102	@ 0x66
  4234c0:	1c5d      	adds	r5, r3, #1
  4234c2:	9b04      	ldr	r3, [sp, #16]
  4234c4:	920d      	str	r2, [sp, #52]	@ 0x34
  4234c6:	442b      	add	r3, r5
  4234c8:	9307      	str	r3, [sp, #28]
  4234ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4234ce:	9303      	str	r3, [sp, #12]
  4234d0:	e612      	b.n	4230f8 <_svfprintf_r+0x1720>
  4234d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  4234d4:	7863      	ldrb	r3, [r4, #1]
  4234d6:	4604      	mov	r4, r0
  4234d8:	f852 1b04 	ldr.w	r1, [r2], #4
  4234dc:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
  4234e0:	920b      	str	r2, [sp, #44]	@ 0x2c
  4234e2:	9104      	str	r1, [sp, #16]
  4234e4:	f7fe bad6 	b.w	421a94 <_svfprintf_r+0xbc>
  4234e8:	230c      	movs	r3, #12
  4234ea:	f8ca 3000 	str.w	r3, [sl]
  4234ee:	e718      	b.n	423322 <_svfprintf_r+0x194a>
  4234f0:	2300      	movs	r3, #0
  4234f2:	9311      	str	r3, [sp, #68]	@ 0x44
  4234f4:	930f      	str	r3, [sp, #60]	@ 0x3c
  4234f6:	e761      	b.n	4233bc <_svfprintf_r+0x19e4>
  4234f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  4234fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  4234fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  423502:	e731      	b.n	423368 <_svfprintf_r+0x1990>
  423504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  423506:	900a      	str	r0, [sp, #40]	@ 0x28
  423508:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
  42350c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  423510:	e72a      	b.n	423368 <_svfprintf_r+0x1990>
  423512:	bf00      	nop
  423514:	00434df0 	.word	0x00434df0
  423518:	00434dec 	.word	0x00434dec
  42351c:	cccccccd 	.word	0xcccccccd
  423520:	0043c634 	.word	0x0043c634

00423524 <__smakebuf_r>:
  423524:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  423528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42352c:	460c      	mov	r4, r1
  42352e:	0799      	lsls	r1, r3, #30
  423530:	b096      	sub	sp, #88	@ 0x58
  423532:	d508      	bpl.n	423546 <__smakebuf_r+0x22>
  423534:	f104 0343 	add.w	r3, r4, #67	@ 0x43
  423538:	2201      	movs	r2, #1
  42353a:	6023      	str	r3, [r4, #0]
  42353c:	e9c4 3204 	strd	r3, r2, [r4, #16]
  423540:	b016      	add	sp, #88	@ 0x58
  423542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  423546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  42354a:	4606      	mov	r6, r0
  42354c:	2900      	cmp	r1, #0
  42354e:	db26      	blt.n	42359e <__smakebuf_r+0x7a>
  423550:	466a      	mov	r2, sp
  423552:	f000 fba1 	bl	423c98 <_fstat_r>
  423556:	2800      	cmp	r0, #0
  423558:	db1f      	blt.n	42359a <__smakebuf_r+0x76>
  42355a:	9d01      	ldr	r5, [sp, #4]
  42355c:	f44f 6880 	mov.w	r8, #1024	@ 0x400
  423560:	f44f 6700 	mov.w	r7, #2048	@ 0x800
  423564:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  423568:	f5a5 5500 	sub.w	r5, r5, #8192	@ 0x2000
  42356c:	fab5 f585 	clz	r5, r5
  423570:	096d      	lsrs	r5, r5, #5
  423572:	4641      	mov	r1, r8
  423574:	4630      	mov	r0, r6
  423576:	f7fd ff6d 	bl	421454 <_malloc_r>
  42357a:	b1e8      	cbz	r0, 4235b8 <__smakebuf_r+0x94>
  42357c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  423580:	f8c4 8014 	str.w	r8, [r4, #20]
  423584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
  423588:	6020      	str	r0, [r4, #0]
  42358a:	6120      	str	r0, [r4, #16]
  42358c:	81a3      	strh	r3, [r4, #12]
  42358e:	bb3d      	cbnz	r5, 4235e0 <__smakebuf_r+0xbc>
  423590:	433b      	orrs	r3, r7
  423592:	81a3      	strh	r3, [r4, #12]
  423594:	b016      	add	sp, #88	@ 0x58
  423596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42359a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42359e:	f013 0580 	ands.w	r5, r3, #128	@ 0x80
  4235a2:	d019      	beq.n	4235d8 <__smakebuf_r+0xb4>
  4235a4:	f04f 0840 	mov.w	r8, #64	@ 0x40
  4235a8:	2500      	movs	r5, #0
  4235aa:	4630      	mov	r0, r6
  4235ac:	4641      	mov	r1, r8
  4235ae:	462f      	mov	r7, r5
  4235b0:	f7fd ff50 	bl	421454 <_malloc_r>
  4235b4:	2800      	cmp	r0, #0
  4235b6:	d1e1      	bne.n	42357c <__smakebuf_r+0x58>
  4235b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4235bc:	059a      	lsls	r2, r3, #22
  4235be:	d4bf      	bmi.n	423540 <__smakebuf_r+0x1c>
  4235c0:	f023 0303 	bic.w	r3, r3, #3
  4235c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
  4235c8:	2101      	movs	r1, #1
  4235ca:	f043 0302 	orr.w	r3, r3, #2
  4235ce:	6022      	str	r2, [r4, #0]
  4235d0:	e9c4 2104 	strd	r2, r1, [r4, #16]
  4235d4:	81a3      	strh	r3, [r4, #12]
  4235d6:	e7b3      	b.n	423540 <__smakebuf_r+0x1c>
  4235d8:	f44f 6880 	mov.w	r8, #1024	@ 0x400
  4235dc:	462f      	mov	r7, r5
  4235de:	e7c8      	b.n	423572 <__smakebuf_r+0x4e>
  4235e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4235e4:	4630      	mov	r0, r6
  4235e6:	f000 fb6d 	bl	423cc4 <_isatty_r>
  4235ea:	b910      	cbnz	r0, 4235f2 <__smakebuf_r+0xce>
  4235ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4235f0:	e7ce      	b.n	423590 <__smakebuf_r+0x6c>
  4235f2:	89a3      	ldrh	r3, [r4, #12]
  4235f4:	f023 0303 	bic.w	r3, r3, #3
  4235f8:	f043 0301 	orr.w	r3, r3, #1
  4235fc:	b21b      	sxth	r3, r3
  4235fe:	e7c7      	b.n	423590 <__smakebuf_r+0x6c>

00423600 <__malloc_lock>:
  423600:	4801      	ldr	r0, [pc, #4]	@ (423608 <__malloc_lock+0x8>)
  423602:	f7fd bc93 	b.w	420f2c <__retarget_lock_acquire_recursive>
  423606:	bf00      	nop
  423608:	2004e210 	.word	0x2004e210

0042360c <__malloc_unlock>:
  42360c:	4801      	ldr	r0, [pc, #4]	@ (423614 <__malloc_unlock+0x8>)
  42360e:	f7fd bc8f 	b.w	420f30 <__retarget_lock_release_recursive>
  423612:	bf00      	nop
  423614:	2004e210 	.word	0x2004e210

00423618 <_fclose_r>:
  423618:	b570      	push	{r4, r5, r6, lr}
  42361a:	2900      	cmp	r1, #0
  42361c:	d03f      	beq.n	42369e <_fclose_r+0x86>
  42361e:	4606      	mov	r6, r0
  423620:	460c      	mov	r4, r1
  423622:	b110      	cbz	r0, 42362a <_fclose_r+0x12>
  423624:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  423626:	2b00      	cmp	r3, #0
  423628:	d03c      	beq.n	4236a4 <_fclose_r+0x8c>
  42362a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  42362c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  423630:	07dd      	lsls	r5, r3, #31
  423632:	d432      	bmi.n	42369a <_fclose_r+0x82>
  423634:	0590      	lsls	r0, r2, #22
  423636:	d538      	bpl.n	4236aa <_fclose_r+0x92>
  423638:	4621      	mov	r1, r4
  42363a:	4630      	mov	r0, r6
  42363c:	f7fc fe48 	bl	4202d0 <__sflush_r>
  423640:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  423642:	4605      	mov	r5, r0
  423644:	b133      	cbz	r3, 423654 <_fclose_r+0x3c>
  423646:	69e1      	ldr	r1, [r4, #28]
  423648:	4630      	mov	r0, r6
  42364a:	4798      	blx	r3
  42364c:	2800      	cmp	r0, #0
  42364e:	bfb8      	it	lt
  423650:	f04f 35ff 	movlt.w	r5, #4294967295	@ 0xffffffff
  423654:	89a3      	ldrh	r3, [r4, #12]
  423656:	061a      	lsls	r2, r3, #24
  423658:	d439      	bmi.n	4236ce <_fclose_r+0xb6>
  42365a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
  42365c:	b141      	cbz	r1, 423670 <_fclose_r+0x58>
  42365e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
  423662:	4299      	cmp	r1, r3
  423664:	d002      	beq.n	42366c <_fclose_r+0x54>
  423666:	4630      	mov	r0, r6
  423668:	f7fd fdb8 	bl	4211dc <_free_r>
  42366c:	2300      	movs	r3, #0
  42366e:	6323      	str	r3, [r4, #48]	@ 0x30
  423670:	6c61      	ldr	r1, [r4, #68]	@ 0x44
  423672:	b121      	cbz	r1, 42367e <_fclose_r+0x66>
  423674:	4630      	mov	r0, r6
  423676:	f7fd fdb1 	bl	4211dc <_free_r>
  42367a:	2300      	movs	r3, #0
  42367c:	6463      	str	r3, [r4, #68]	@ 0x44
  42367e:	f7fc ffaf 	bl	4205e0 <__sfp_lock_acquire>
  423682:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  423684:	2200      	movs	r2, #0
  423686:	07db      	lsls	r3, r3, #31
  423688:	81a2      	strh	r2, [r4, #12]
  42368a:	d51c      	bpl.n	4236c6 <_fclose_r+0xae>
  42368c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  42368e:	f7fd fc4b 	bl	420f28 <__retarget_lock_close_recursive>
  423692:	f7fc ffab 	bl	4205ec <__sfp_lock_release>
  423696:	4628      	mov	r0, r5
  423698:	bd70      	pop	{r4, r5, r6, pc}
  42369a:	2a00      	cmp	r2, #0
  42369c:	d1cc      	bne.n	423638 <_fclose_r+0x20>
  42369e:	2500      	movs	r5, #0
  4236a0:	4628      	mov	r0, r5
  4236a2:	bd70      	pop	{r4, r5, r6, pc}
  4236a4:	f7fc ff7e 	bl	4205a4 <__sinit>
  4236a8:	e7bf      	b.n	42362a <_fclose_r+0x12>
  4236aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  4236ac:	f7fd fc3e 	bl	420f2c <__retarget_lock_acquire_recursive>
  4236b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4236b4:	2b00      	cmp	r3, #0
  4236b6:	d1bf      	bne.n	423638 <_fclose_r+0x20>
  4236b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  4236ba:	07d9      	lsls	r1, r3, #31
  4236bc:	d4ef      	bmi.n	42369e <_fclose_r+0x86>
  4236be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  4236c0:	f7fd fc36 	bl	420f30 <__retarget_lock_release_recursive>
  4236c4:	e7eb      	b.n	42369e <_fclose_r+0x86>
  4236c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  4236c8:	f7fd fc32 	bl	420f30 <__retarget_lock_release_recursive>
  4236cc:	e7de      	b.n	42368c <_fclose_r+0x74>
  4236ce:	6921      	ldr	r1, [r4, #16]
  4236d0:	4630      	mov	r0, r6
  4236d2:	f7fd fd83 	bl	4211dc <_free_r>
  4236d6:	e7c0      	b.n	42365a <_fclose_r+0x42>

004236d8 <_realloc_r>:
  4236d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4236dc:	4616      	mov	r6, r2
  4236de:	b083      	sub	sp, #12
  4236e0:	2900      	cmp	r1, #0
  4236e2:	f000 809e 	beq.w	423822 <_realloc_r+0x14a>
  4236e6:	460c      	mov	r4, r1
  4236e8:	f106 050b 	add.w	r5, r6, #11
  4236ec:	4680      	mov	r8, r0
  4236ee:	f7ff ff87 	bl	423600 <__malloc_lock>
  4236f2:	f854 0c04 	ldr.w	r0, [r4, #-4]
  4236f6:	2d16      	cmp	r5, #22
  4236f8:	f1a4 0908 	sub.w	r9, r4, #8
  4236fc:	f020 0703 	bic.w	r7, r0, #3
  423700:	d862      	bhi.n	4237c8 <_realloc_r+0xf0>
  423702:	2210      	movs	r2, #16
  423704:	2300      	movs	r3, #0
  423706:	4615      	mov	r5, r2
  423708:	42b5      	cmp	r5, r6
  42370a:	f0c0 80a2 	bcc.w	423852 <_realloc_r+0x17a>
  42370e:	2b00      	cmp	r3, #0
  423710:	f040 809f 	bne.w	423852 <_realloc_r+0x17a>
  423714:	4297      	cmp	r7, r2
  423716:	da61      	bge.n	4237dc <_realloc_r+0x104>
  423718:	f8df b328 	ldr.w	fp, [pc, #808]	@ 423a44 <_realloc_r+0x36c>
  42371c:	eb09 0107 	add.w	r1, r9, r7
  423720:	f8db 3008 	ldr.w	r3, [fp, #8]
  423724:	f8d1 c004 	ldr.w	ip, [r1, #4]
  423728:	428b      	cmp	r3, r1
  42372a:	f000 8097 	beq.w	42385c <_realloc_r+0x184>
  42372e:	f02c 0301 	bic.w	r3, ip, #1
  423732:	440b      	add	r3, r1
  423734:	685b      	ldr	r3, [r3, #4]
  423736:	07db      	lsls	r3, r3, #31
  423738:	d468      	bmi.n	42380c <_realloc_r+0x134>
  42373a:	f02c 0c03 	bic.w	ip, ip, #3
  42373e:	eb07 030c 	add.w	r3, r7, ip
  423742:	4293      	cmp	r3, r2
  423744:	da45      	bge.n	4237d2 <_realloc_r+0xfa>
  423746:	07c3      	lsls	r3, r0, #31
  423748:	d412      	bmi.n	423770 <_realloc_r+0x98>
  42374a:	f854 3c08 	ldr.w	r3, [r4, #-8]
  42374e:	eba9 0a03 	sub.w	sl, r9, r3
  423752:	f8da 3004 	ldr.w	r3, [sl, #4]
  423756:	f023 0003 	bic.w	r0, r3, #3
  42375a:	4484      	add	ip, r0
  42375c:	eb0c 0b07 	add.w	fp, ip, r7
  423760:	455a      	cmp	r2, fp
  423762:	f340 80fe 	ble.w	423962 <_realloc_r+0x28a>
  423766:	eb07 0b00 	add.w	fp, r7, r0
  42376a:	455a      	cmp	r2, fp
  42376c:	f340 80d4 	ble.w	423918 <_realloc_r+0x240>
  423770:	4631      	mov	r1, r6
  423772:	4640      	mov	r0, r8
  423774:	f7fd fe6e 	bl	421454 <_malloc_r>
  423778:	4606      	mov	r6, r0
  42377a:	2800      	cmp	r0, #0
  42377c:	f000 8129 	beq.w	4239d2 <_realloc_r+0x2fa>
  423780:	f854 3c04 	ldr.w	r3, [r4, #-4]
  423784:	f1a0 0208 	sub.w	r2, r0, #8
  423788:	f023 0301 	bic.w	r3, r3, #1
  42378c:	444b      	add	r3, r9
  42378e:	4293      	cmp	r3, r2
  423790:	f000 80b1 	beq.w	4238f6 <_realloc_r+0x21e>
  423794:	1f3a      	subs	r2, r7, #4
  423796:	2a24      	cmp	r2, #36	@ 0x24
  423798:	f200 80df 	bhi.w	42395a <_realloc_r+0x282>
  42379c:	2a13      	cmp	r2, #19
  42379e:	f200 80b0 	bhi.w	423902 <_realloc_r+0x22a>
  4237a2:	4603      	mov	r3, r0
  4237a4:	4622      	mov	r2, r4
  4237a6:	6811      	ldr	r1, [r2, #0]
  4237a8:	6019      	str	r1, [r3, #0]
  4237aa:	6851      	ldr	r1, [r2, #4]
  4237ac:	6059      	str	r1, [r3, #4]
  4237ae:	6892      	ldr	r2, [r2, #8]
  4237b0:	609a      	str	r2, [r3, #8]
  4237b2:	4621      	mov	r1, r4
  4237b4:	4640      	mov	r0, r8
  4237b6:	f7fd fd11 	bl	4211dc <_free_r>
  4237ba:	4640      	mov	r0, r8
  4237bc:	f7ff ff26 	bl	42360c <__malloc_unlock>
  4237c0:	4630      	mov	r0, r6
  4237c2:	b003      	add	sp, #12
  4237c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4237c8:	f025 0507 	bic.w	r5, r5, #7
  4237cc:	462a      	mov	r2, r5
  4237ce:	0feb      	lsrs	r3, r5, #31
  4237d0:	e79a      	b.n	423708 <_realloc_r+0x30>
  4237d2:	461f      	mov	r7, r3
  4237d4:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4237d8:	60d3      	str	r3, [r2, #12]
  4237da:	609a      	str	r2, [r3, #8]
  4237dc:	1b78      	subs	r0, r7, r5
  4237de:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4237e2:	eb09 0207 	add.w	r2, r9, r7
  4237e6:	280f      	cmp	r0, #15
  4237e8:	f003 0301 	and.w	r3, r3, #1
  4237ec:	d81f      	bhi.n	42382e <_realloc_r+0x156>
  4237ee:	433b      	orrs	r3, r7
  4237f0:	f8c9 3004 	str.w	r3, [r9, #4]
  4237f4:	6853      	ldr	r3, [r2, #4]
  4237f6:	f043 0301 	orr.w	r3, r3, #1
  4237fa:	6053      	str	r3, [r2, #4]
  4237fc:	4626      	mov	r6, r4
  4237fe:	4640      	mov	r0, r8
  423800:	f7ff ff04 	bl	42360c <__malloc_unlock>
  423804:	4630      	mov	r0, r6
  423806:	b003      	add	sp, #12
  423808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42380c:	07c3      	lsls	r3, r0, #31
  42380e:	d4af      	bmi.n	423770 <_realloc_r+0x98>
  423810:	f854 3c08 	ldr.w	r3, [r4, #-8]
  423814:	eba9 0a03 	sub.w	sl, r9, r3
  423818:	f8da 3004 	ldr.w	r3, [sl, #4]
  42381c:	f023 0003 	bic.w	r0, r3, #3
  423820:	e7a1      	b.n	423766 <_realloc_r+0x8e>
  423822:	4611      	mov	r1, r2
  423824:	b003      	add	sp, #12
  423826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42382a:	f7fd be13 	b.w	421454 <_malloc_r>
  42382e:	432b      	orrs	r3, r5
  423830:	eb09 0105 	add.w	r1, r9, r5
  423834:	f040 0001 	orr.w	r0, r0, #1
  423838:	f8c9 3004 	str.w	r3, [r9, #4]
  42383c:	3108      	adds	r1, #8
  42383e:	f841 0c04 	str.w	r0, [r1, #-4]
  423842:	4640      	mov	r0, r8
  423844:	6853      	ldr	r3, [r2, #4]
  423846:	f043 0301 	orr.w	r3, r3, #1
  42384a:	6053      	str	r3, [r2, #4]
  42384c:	f7fd fcc6 	bl	4211dc <_free_r>
  423850:	e7d4      	b.n	4237fc <_realloc_r+0x124>
  423852:	230c      	movs	r3, #12
  423854:	f8c8 3000 	str.w	r3, [r8]
  423858:	2600      	movs	r6, #0
  42385a:	e7d3      	b.n	423804 <_realloc_r+0x12c>
  42385c:	f02c 0c03 	bic.w	ip, ip, #3
  423860:	f105 0110 	add.w	r1, r5, #16
  423864:	eb0c 0307 	add.w	r3, ip, r7
  423868:	428b      	cmp	r3, r1
  42386a:	f280 8092 	bge.w	423992 <_realloc_r+0x2ba>
  42386e:	07c0      	lsls	r0, r0, #31
  423870:	f53f af7e 	bmi.w	423770 <_realloc_r+0x98>
  423874:	f854 3c08 	ldr.w	r3, [r4, #-8]
  423878:	eba9 0a03 	sub.w	sl, r9, r3
  42387c:	f8da 3004 	ldr.w	r3, [sl, #4]
  423880:	f023 0003 	bic.w	r0, r3, #3
  423884:	4484      	add	ip, r0
  423886:	eb0c 0307 	add.w	r3, ip, r7
  42388a:	4299      	cmp	r1, r3
  42388c:	f73f af6b 	bgt.w	423766 <_realloc_r+0x8e>
  423890:	1f3a      	subs	r2, r7, #4
  423892:	4656      	mov	r6, sl
  423894:	f8da 100c 	ldr.w	r1, [sl, #12]
  423898:	f856 0f08 	ldr.w	r0, [r6, #8]!
  42389c:	2a24      	cmp	r2, #36	@ 0x24
  42389e:	60c1      	str	r1, [r0, #12]
  4238a0:	6088      	str	r0, [r1, #8]
  4238a2:	f200 80b0 	bhi.w	423a06 <_realloc_r+0x32e>
  4238a6:	2a13      	cmp	r2, #19
  4238a8:	f240 80ab 	bls.w	423a02 <_realloc_r+0x32a>
  4238ac:	6821      	ldr	r1, [r4, #0]
  4238ae:	2a1b      	cmp	r2, #27
  4238b0:	f8ca 1008 	str.w	r1, [sl, #8]
  4238b4:	6861      	ldr	r1, [r4, #4]
  4238b6:	f8ca 100c 	str.w	r1, [sl, #12]
  4238ba:	f200 80ab 	bhi.w	423a14 <_realloc_r+0x33c>
  4238be:	3408      	adds	r4, #8
  4238c0:	f10a 0210 	add.w	r2, sl, #16
  4238c4:	6821      	ldr	r1, [r4, #0]
  4238c6:	6011      	str	r1, [r2, #0]
  4238c8:	6861      	ldr	r1, [r4, #4]
  4238ca:	6051      	str	r1, [r2, #4]
  4238cc:	68a1      	ldr	r1, [r4, #8]
  4238ce:	6091      	str	r1, [r2, #8]
  4238d0:	1b5b      	subs	r3, r3, r5
  4238d2:	eb0a 0205 	add.w	r2, sl, r5
  4238d6:	4640      	mov	r0, r8
  4238d8:	f043 0301 	orr.w	r3, r3, #1
  4238dc:	f8cb 2008 	str.w	r2, [fp, #8]
  4238e0:	6053      	str	r3, [r2, #4]
  4238e2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4238e6:	f003 0301 	and.w	r3, r3, #1
  4238ea:	432b      	orrs	r3, r5
  4238ec:	f8ca 3004 	str.w	r3, [sl, #4]
  4238f0:	f7ff fe8c 	bl	42360c <__malloc_unlock>
  4238f4:	e786      	b.n	423804 <_realloc_r+0x12c>
  4238f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4238fa:	f023 0303 	bic.w	r3, r3, #3
  4238fe:	441f      	add	r7, r3
  423900:	e76c      	b.n	4237dc <_realloc_r+0x104>
  423902:	6823      	ldr	r3, [r4, #0]
  423904:	2a1b      	cmp	r2, #27
  423906:	6003      	str	r3, [r0, #0]
  423908:	6863      	ldr	r3, [r4, #4]
  42390a:	6043      	str	r3, [r0, #4]
  42390c:	d836      	bhi.n	42397c <_realloc_r+0x2a4>
  42390e:	f104 0208 	add.w	r2, r4, #8
  423912:	f100 0308 	add.w	r3, r0, #8
  423916:	e746      	b.n	4237a6 <_realloc_r+0xce>
  423918:	1f3a      	subs	r2, r7, #4
  42391a:	4656      	mov	r6, sl
  42391c:	f8da 300c 	ldr.w	r3, [sl, #12]
  423920:	2a24      	cmp	r2, #36	@ 0x24
  423922:	f856 1f08 	ldr.w	r1, [r6, #8]!
  423926:	60cb      	str	r3, [r1, #12]
  423928:	6099      	str	r1, [r3, #8]
  42392a:	d822      	bhi.n	423972 <_realloc_r+0x29a>
  42392c:	2a13      	cmp	r2, #19
  42392e:	d91e      	bls.n	42396e <_realloc_r+0x296>
  423930:	6823      	ldr	r3, [r4, #0]
  423932:	2a1b      	cmp	r2, #27
  423934:	f8ca 3008 	str.w	r3, [sl, #8]
  423938:	6863      	ldr	r3, [r4, #4]
  42393a:	f8ca 300c 	str.w	r3, [sl, #12]
  42393e:	d83c      	bhi.n	4239ba <_realloc_r+0x2e2>
  423940:	3408      	adds	r4, #8
  423942:	f10a 0310 	add.w	r3, sl, #16
  423946:	6822      	ldr	r2, [r4, #0]
  423948:	601a      	str	r2, [r3, #0]
  42394a:	6862      	ldr	r2, [r4, #4]
  42394c:	605a      	str	r2, [r3, #4]
  42394e:	68a2      	ldr	r2, [r4, #8]
  423950:	609a      	str	r2, [r3, #8]
  423952:	4634      	mov	r4, r6
  423954:	465f      	mov	r7, fp
  423956:	46d1      	mov	r9, sl
  423958:	e740      	b.n	4237dc <_realloc_r+0x104>
  42395a:	4621      	mov	r1, r4
  42395c:	f7fd f922 	bl	420ba4 <memmove>
  423960:	e727      	b.n	4237b2 <_realloc_r+0xda>
  423962:	e9d1 1302 	ldrd	r1, r3, [r1, #8]
  423966:	1f3a      	subs	r2, r7, #4
  423968:	60cb      	str	r3, [r1, #12]
  42396a:	6099      	str	r1, [r3, #8]
  42396c:	e7d5      	b.n	42391a <_realloc_r+0x242>
  42396e:	4633      	mov	r3, r6
  423970:	e7e9      	b.n	423946 <_realloc_r+0x26e>
  423972:	4621      	mov	r1, r4
  423974:	4630      	mov	r0, r6
  423976:	f7fd f915 	bl	420ba4 <memmove>
  42397a:	e7ea      	b.n	423952 <_realloc_r+0x27a>
  42397c:	68a3      	ldr	r3, [r4, #8]
  42397e:	2a24      	cmp	r2, #36	@ 0x24
  423980:	6083      	str	r3, [r0, #8]
  423982:	68e3      	ldr	r3, [r4, #12]
  423984:	60c3      	str	r3, [r0, #12]
  423986:	d028      	beq.n	4239da <_realloc_r+0x302>
  423988:	f104 0210 	add.w	r2, r4, #16
  42398c:	f100 0310 	add.w	r3, r0, #16
  423990:	e709      	b.n	4237a6 <_realloc_r+0xce>
  423992:	1b5b      	subs	r3, r3, r5
  423994:	eb09 0205 	add.w	r2, r9, r5
  423998:	4640      	mov	r0, r8
  42399a:	4626      	mov	r6, r4
  42399c:	f043 0301 	orr.w	r3, r3, #1
  4239a0:	f8cb 2008 	str.w	r2, [fp, #8]
  4239a4:	6053      	str	r3, [r2, #4]
  4239a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4239aa:	f003 0301 	and.w	r3, r3, #1
  4239ae:	432b      	orrs	r3, r5
  4239b0:	f844 3c04 	str.w	r3, [r4, #-4]
  4239b4:	f7ff fe2a 	bl	42360c <__malloc_unlock>
  4239b8:	e724      	b.n	423804 <_realloc_r+0x12c>
  4239ba:	68a3      	ldr	r3, [r4, #8]
  4239bc:	2a24      	cmp	r2, #36	@ 0x24
  4239be:	f8ca 3010 	str.w	r3, [sl, #16]
  4239c2:	68e3      	ldr	r3, [r4, #12]
  4239c4:	f8ca 3014 	str.w	r3, [sl, #20]
  4239c8:	d010      	beq.n	4239ec <_realloc_r+0x314>
  4239ca:	3410      	adds	r4, #16
  4239cc:	f10a 0318 	add.w	r3, sl, #24
  4239d0:	e7b9      	b.n	423946 <_realloc_r+0x26e>
  4239d2:	4640      	mov	r0, r8
  4239d4:	f7ff fe1a 	bl	42360c <__malloc_unlock>
  4239d8:	e73e      	b.n	423858 <_realloc_r+0x180>
  4239da:	6923      	ldr	r3, [r4, #16]
  4239dc:	f104 0218 	add.w	r2, r4, #24
  4239e0:	6103      	str	r3, [r0, #16]
  4239e2:	6963      	ldr	r3, [r4, #20]
  4239e4:	6143      	str	r3, [r0, #20]
  4239e6:	f100 0318 	add.w	r3, r0, #24
  4239ea:	e6dc      	b.n	4237a6 <_realloc_r+0xce>
  4239ec:	6923      	ldr	r3, [r4, #16]
  4239ee:	3418      	adds	r4, #24
  4239f0:	f8ca 3018 	str.w	r3, [sl, #24]
  4239f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4239f8:	f8ca 301c 	str.w	r3, [sl, #28]
  4239fc:	f10a 0320 	add.w	r3, sl, #32
  423a00:	e7a1      	b.n	423946 <_realloc_r+0x26e>
  423a02:	4632      	mov	r2, r6
  423a04:	e75e      	b.n	4238c4 <_realloc_r+0x1ec>
  423a06:	4621      	mov	r1, r4
  423a08:	4630      	mov	r0, r6
  423a0a:	9301      	str	r3, [sp, #4]
  423a0c:	f7fd f8ca 	bl	420ba4 <memmove>
  423a10:	9b01      	ldr	r3, [sp, #4]
  423a12:	e75d      	b.n	4238d0 <_realloc_r+0x1f8>
  423a14:	68a1      	ldr	r1, [r4, #8]
  423a16:	2a24      	cmp	r2, #36	@ 0x24
  423a18:	f8ca 1010 	str.w	r1, [sl, #16]
  423a1c:	68e1      	ldr	r1, [r4, #12]
  423a1e:	f8ca 1014 	str.w	r1, [sl, #20]
  423a22:	d003      	beq.n	423a2c <_realloc_r+0x354>
  423a24:	3410      	adds	r4, #16
  423a26:	f10a 0218 	add.w	r2, sl, #24
  423a2a:	e74b      	b.n	4238c4 <_realloc_r+0x1ec>
  423a2c:	6922      	ldr	r2, [r4, #16]
  423a2e:	3418      	adds	r4, #24
  423a30:	f8ca 2018 	str.w	r2, [sl, #24]
  423a34:	f854 2c04 	ldr.w	r2, [r4, #-4]
  423a38:	f8ca 201c 	str.w	r2, [sl, #28]
  423a3c:	f10a 0220 	add.w	r2, sl, #32
  423a40:	e740      	b.n	4238c4 <_realloc_r+0x1ec>
  423a42:	bf00      	nop
  423a44:	2000a610 	.word	0x2000a610

00423a48 <__sread>:
  423a48:	b510      	push	{r4, lr}
  423a4a:	460c      	mov	r4, r1
  423a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  423a50:	f000 f960 	bl	423d14 <_read_r>
  423a54:	2800      	cmp	r0, #0
  423a56:	db03      	blt.n	423a60 <__sread+0x18>
  423a58:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  423a5a:	4403      	add	r3, r0
  423a5c:	6523      	str	r3, [r4, #80]	@ 0x50
  423a5e:	bd10      	pop	{r4, pc}
  423a60:	89a3      	ldrh	r3, [r4, #12]
  423a62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  423a66:	81a3      	strh	r3, [r4, #12]
  423a68:	bd10      	pop	{r4, pc}
  423a6a:	bf00      	nop

00423a6c <__swrite>:
  423a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  423a70:	460c      	mov	r4, r1
  423a72:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
  423a76:	461f      	mov	r7, r3
  423a78:	4605      	mov	r5, r0
  423a7a:	05cb      	lsls	r3, r1, #23
  423a7c:	4616      	mov	r6, r2
  423a7e:	d40b      	bmi.n	423a98 <__swrite+0x2c>
  423a80:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
  423a84:	463b      	mov	r3, r7
  423a86:	4632      	mov	r2, r6
  423a88:	4628      	mov	r0, r5
  423a8a:	81a1      	strh	r1, [r4, #12]
  423a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  423a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  423a94:	f000 b966 	b.w	423d64 <_write_r>
  423a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  423a9c:	2302      	movs	r3, #2
  423a9e:	2200      	movs	r2, #0
  423aa0:	f000 f922 	bl	423ce8 <_lseek_r>
  423aa4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
  423aa8:	e7ea      	b.n	423a80 <__swrite+0x14>
  423aaa:	bf00      	nop

00423aac <__sseek>:
  423aac:	b510      	push	{r4, lr}
  423aae:	460c      	mov	r4, r1
  423ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  423ab4:	f000 f918 	bl	423ce8 <_lseek_r>
  423ab8:	1c42      	adds	r2, r0, #1
  423aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  423abe:	d004      	beq.n	423aca <__sseek+0x1e>
  423ac0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
  423ac4:	6520      	str	r0, [r4, #80]	@ 0x50
  423ac6:	81a3      	strh	r3, [r4, #12]
  423ac8:	bd10      	pop	{r4, pc}
  423aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  423ace:	81a3      	strh	r3, [r4, #12]
  423ad0:	bd10      	pop	{r4, pc}
  423ad2:	bf00      	nop

00423ad4 <__sclose>:
  423ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  423ad8:	f000 b8cc 	b.w	423c74 <_close_r>

00423adc <__ascii_wctomb>:
  423adc:	4603      	mov	r3, r0
  423ade:	b149      	cbz	r1, 423af4 <__ascii_wctomb+0x18>
  423ae0:	2aff      	cmp	r2, #255	@ 0xff
  423ae2:	d802      	bhi.n	423aea <__ascii_wctomb+0xe>
  423ae4:	2001      	movs	r0, #1
  423ae6:	700a      	strb	r2, [r1, #0]
  423ae8:	4770      	bx	lr
  423aea:	228a      	movs	r2, #138	@ 0x8a
  423aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  423af0:	601a      	str	r2, [r3, #0]
  423af2:	4770      	bx	lr
  423af4:	4608      	mov	r0, r1
  423af6:	4770      	bx	lr

00423af8 <__swbuf_r>:
  423af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  423afa:	460d      	mov	r5, r1
  423afc:	4606      	mov	r6, r0
  423afe:	4614      	mov	r4, r2
  423b00:	b110      	cbz	r0, 423b08 <__swbuf_r+0x10>
  423b02:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  423b04:	2b00      	cmp	r3, #0
  423b06:	d04a      	beq.n	423b9e <__swbuf_r+0xa6>
  423b08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  423b0c:	69a3      	ldr	r3, [r4, #24]
  423b0e:	0710      	lsls	r0, r2, #28
  423b10:	60a3      	str	r3, [r4, #8]
  423b12:	d51b      	bpl.n	423b4c <__swbuf_r+0x54>
  423b14:	6923      	ldr	r3, [r4, #16]
  423b16:	b1cb      	cbz	r3, 423b4c <__swbuf_r+0x54>
  423b18:	b2ed      	uxtb	r5, r5
  423b1a:	0491      	lsls	r1, r2, #18
  423b1c:	462f      	mov	r7, r5
  423b1e:	d521      	bpl.n	423b64 <__swbuf_r+0x6c>
  423b20:	6822      	ldr	r2, [r4, #0]
  423b22:	6961      	ldr	r1, [r4, #20]
  423b24:	1ad3      	subs	r3, r2, r3
  423b26:	4299      	cmp	r1, r3
  423b28:	dd28      	ble.n	423b7c <__swbuf_r+0x84>
  423b2a:	3301      	adds	r3, #1
  423b2c:	68a1      	ldr	r1, [r4, #8]
  423b2e:	3901      	subs	r1, #1
  423b30:	60a1      	str	r1, [r4, #8]
  423b32:	1c51      	adds	r1, r2, #1
  423b34:	6021      	str	r1, [r4, #0]
  423b36:	7015      	strb	r5, [r2, #0]
  423b38:	6962      	ldr	r2, [r4, #20]
  423b3a:	429a      	cmp	r2, r3
  423b3c:	d026      	beq.n	423b8c <__swbuf_r+0x94>
  423b3e:	2d0a      	cmp	r5, #10
  423b40:	d102      	bne.n	423b48 <__swbuf_r+0x50>
  423b42:	89a3      	ldrh	r3, [r4, #12]
  423b44:	07db      	lsls	r3, r3, #31
  423b46:	d421      	bmi.n	423b8c <__swbuf_r+0x94>
  423b48:	4638      	mov	r0, r7
  423b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  423b4c:	4621      	mov	r1, r4
  423b4e:	4630      	mov	r0, r6
  423b50:	f7fc ff2c 	bl	4209ac <__swsetup_r>
  423b54:	bb00      	cbnz	r0, 423b98 <__swbuf_r+0xa0>
  423b56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  423b5a:	b2ed      	uxtb	r5, r5
  423b5c:	6923      	ldr	r3, [r4, #16]
  423b5e:	0491      	lsls	r1, r2, #18
  423b60:	462f      	mov	r7, r5
  423b62:	d4dd      	bmi.n	423b20 <__swbuf_r+0x28>
  423b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
  423b68:	6961      	ldr	r1, [r4, #20]
  423b6a:	81a2      	strh	r2, [r4, #12]
  423b6c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
  423b6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  423b72:	6662      	str	r2, [r4, #100]	@ 0x64
  423b74:	6822      	ldr	r2, [r4, #0]
  423b76:	1ad3      	subs	r3, r2, r3
  423b78:	4299      	cmp	r1, r3
  423b7a:	dcd6      	bgt.n	423b2a <__swbuf_r+0x32>
  423b7c:	4621      	mov	r1, r4
  423b7e:	4630      	mov	r0, r6
  423b80:	f7fc fc42 	bl	420408 <_fflush_r>
  423b84:	b940      	cbnz	r0, 423b98 <__swbuf_r+0xa0>
  423b86:	6822      	ldr	r2, [r4, #0]
  423b88:	2301      	movs	r3, #1
  423b8a:	e7cf      	b.n	423b2c <__swbuf_r+0x34>
  423b8c:	4621      	mov	r1, r4
  423b8e:	4630      	mov	r0, r6
  423b90:	f7fc fc3a 	bl	420408 <_fflush_r>
  423b94:	2800      	cmp	r0, #0
  423b96:	d0d7      	beq.n	423b48 <__swbuf_r+0x50>
  423b98:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
  423b9c:	e7d4      	b.n	423b48 <__swbuf_r+0x50>
  423b9e:	f7fc fd01 	bl	4205a4 <__sinit>
  423ba2:	e7b1      	b.n	423b08 <__swbuf_r+0x10>

00423ba4 <strchr>:
  423ba4:	f011 01ff 	ands.w	r1, r1, #255	@ 0xff
  423ba8:	4603      	mov	r3, r0
  423baa:	f000 0203 	and.w	r2, r0, #3
  423bae:	d039      	beq.n	423c24 <strchr+0x80>
  423bb0:	bb8a      	cbnz	r2, 423c16 <strchr+0x72>
  423bb2:	b510      	push	{r4, lr}
  423bb4:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
  423bb8:	6802      	ldr	r2, [r0, #0]
  423bba:	eb0e 4e0e 	add.w	lr, lr, lr, lsl #16
  423bbe:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
  423bc2:	ea8e 0402 	eor.w	r4, lr, r2
  423bc6:	ea23 0302 	bic.w	r3, r3, r2
  423bca:	f1a4 3201 	sub.w	r2, r4, #16843009	@ 0x1010101
  423bce:	ea22 0204 	bic.w	r2, r2, r4
  423bd2:	4313      	orrs	r3, r2
  423bd4:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
  423bd8:	d10f      	bne.n	423bfa <strchr+0x56>
  423bda:	f850 4f04 	ldr.w	r4, [r0, #4]!
  423bde:	ea84 0c0e 	eor.w	ip, r4, lr
  423be2:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
  423be6:	f1ac 3201 	sub.w	r2, ip, #16843009	@ 0x1010101
  423bea:	ea23 0304 	bic.w	r3, r3, r4
  423bee:	ea22 020c 	bic.w	r2, r2, ip
  423bf2:	4313      	orrs	r3, r2
  423bf4:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
  423bf8:	d0ef      	beq.n	423bda <strchr+0x36>
  423bfa:	7803      	ldrb	r3, [r0, #0]
  423bfc:	b923      	cbnz	r3, 423c08 <strchr+0x64>
  423bfe:	e036      	b.n	423c6e <strchr+0xca>
  423c00:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  423c04:	2b00      	cmp	r3, #0
  423c06:	d032      	beq.n	423c6e <strchr+0xca>
  423c08:	4299      	cmp	r1, r3
  423c0a:	d1f9      	bne.n	423c00 <strchr+0x5c>
  423c0c:	bd10      	pop	{r4, pc}
  423c0e:	428a      	cmp	r2, r1
  423c10:	d028      	beq.n	423c64 <strchr+0xc0>
  423c12:	079a      	lsls	r2, r3, #30
  423c14:	d029      	beq.n	423c6a <strchr+0xc6>
  423c16:	781a      	ldrb	r2, [r3, #0]
  423c18:	4618      	mov	r0, r3
  423c1a:	3301      	adds	r3, #1
  423c1c:	2a00      	cmp	r2, #0
  423c1e:	d1f6      	bne.n	423c0e <strchr+0x6a>
  423c20:	4610      	mov	r0, r2
  423c22:	4770      	bx	lr
  423c24:	b9ca      	cbnz	r2, 423c5a <strchr+0xb6>
  423c26:	6802      	ldr	r2, [r0, #0]
  423c28:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
  423c2c:	ea23 0302 	bic.w	r3, r3, r2
  423c30:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
  423c34:	d108      	bne.n	423c48 <strchr+0xa4>
  423c36:	f850 2f04 	ldr.w	r2, [r0, #4]!
  423c3a:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
  423c3e:	ea23 0302 	bic.w	r3, r3, r2
  423c42:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
  423c46:	d0f6      	beq.n	423c36 <strchr+0x92>
  423c48:	7803      	ldrb	r3, [r0, #0]
  423c4a:	b15b      	cbz	r3, 423c64 <strchr+0xc0>
  423c4c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  423c50:	2b00      	cmp	r3, #0
  423c52:	d1fb      	bne.n	423c4c <strchr+0xa8>
  423c54:	4770      	bx	lr
  423c56:	0799      	lsls	r1, r3, #30
  423c58:	d005      	beq.n	423c66 <strchr+0xc2>
  423c5a:	4618      	mov	r0, r3
  423c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
  423c60:	2a00      	cmp	r2, #0
  423c62:	d1f8      	bne.n	423c56 <strchr+0xb2>
  423c64:	4770      	bx	lr
  423c66:	4618      	mov	r0, r3
  423c68:	e7dd      	b.n	423c26 <strchr+0x82>
  423c6a:	4618      	mov	r0, r3
  423c6c:	e7a1      	b.n	423bb2 <strchr+0xe>
  423c6e:	4618      	mov	r0, r3
  423c70:	bd10      	pop	{r4, pc}
  423c72:	bf00      	nop

00423c74 <_close_r>:
  423c74:	b538      	push	{r3, r4, r5, lr}
  423c76:	2200      	movs	r2, #0
  423c78:	4d06      	ldr	r5, [pc, #24]	@ (423c94 <_close_r+0x20>)
  423c7a:	4604      	mov	r4, r0
  423c7c:	4608      	mov	r0, r1
  423c7e:	602a      	str	r2, [r5, #0]
  423c80:	f001 fe7e 	bl	425980 <_close>
  423c84:	1c43      	adds	r3, r0, #1
  423c86:	d000      	beq.n	423c8a <_close_r+0x16>
  423c88:	bd38      	pop	{r3, r4, r5, pc}
  423c8a:	682b      	ldr	r3, [r5, #0]
  423c8c:	2b00      	cmp	r3, #0
  423c8e:	d0fb      	beq.n	423c88 <_close_r+0x14>
  423c90:	6023      	str	r3, [r4, #0]
  423c92:	bd38      	pop	{r3, r4, r5, pc}
  423c94:	2004e3e4 	.word	0x2004e3e4

00423c98 <_fstat_r>:
  423c98:	b570      	push	{r4, r5, r6, lr}
  423c9a:	460c      	mov	r4, r1
  423c9c:	4603      	mov	r3, r0
  423c9e:	4d08      	ldr	r5, [pc, #32]	@ (423cc0 <_fstat_r+0x28>)
  423ca0:	2600      	movs	r6, #0
  423ca2:	4620      	mov	r0, r4
  423ca4:	4611      	mov	r1, r2
  423ca6:	461c      	mov	r4, r3
  423ca8:	602e      	str	r6, [r5, #0]
  423caa:	f001 fe71 	bl	425990 <_fstat>
  423cae:	1c43      	adds	r3, r0, #1
  423cb0:	d000      	beq.n	423cb4 <_fstat_r+0x1c>
  423cb2:	bd70      	pop	{r4, r5, r6, pc}
  423cb4:	682b      	ldr	r3, [r5, #0]
  423cb6:	2b00      	cmp	r3, #0
  423cb8:	d0fb      	beq.n	423cb2 <_fstat_r+0x1a>
  423cba:	6023      	str	r3, [r4, #0]
  423cbc:	bd70      	pop	{r4, r5, r6, pc}
  423cbe:	bf00      	nop
  423cc0:	2004e3e4 	.word	0x2004e3e4

00423cc4 <_isatty_r>:
  423cc4:	b538      	push	{r3, r4, r5, lr}
  423cc6:	2200      	movs	r2, #0
  423cc8:	4d06      	ldr	r5, [pc, #24]	@ (423ce4 <_isatty_r+0x20>)
  423cca:	4604      	mov	r4, r0
  423ccc:	4608      	mov	r0, r1
  423cce:	602a      	str	r2, [r5, #0]
  423cd0:	f001 fe6e 	bl	4259b0 <_isatty>
  423cd4:	1c43      	adds	r3, r0, #1
  423cd6:	d000      	beq.n	423cda <_isatty_r+0x16>
  423cd8:	bd38      	pop	{r3, r4, r5, pc}
  423cda:	682b      	ldr	r3, [r5, #0]
  423cdc:	2b00      	cmp	r3, #0
  423cde:	d0fb      	beq.n	423cd8 <_isatty_r+0x14>
  423ce0:	6023      	str	r3, [r4, #0]
  423ce2:	bd38      	pop	{r3, r4, r5, pc}
  423ce4:	2004e3e4 	.word	0x2004e3e4

00423ce8 <_lseek_r>:
  423ce8:	b538      	push	{r3, r4, r5, lr}
  423cea:	460c      	mov	r4, r1
  423cec:	4684      	mov	ip, r0
  423cee:	4611      	mov	r1, r2
  423cf0:	4d07      	ldr	r5, [pc, #28]	@ (423d10 <_lseek_r+0x28>)
  423cf2:	461a      	mov	r2, r3
  423cf4:	2300      	movs	r3, #0
  423cf6:	4620      	mov	r0, r4
  423cf8:	4664      	mov	r4, ip
  423cfa:	602b      	str	r3, [r5, #0]
  423cfc:	f001 fe68 	bl	4259d0 <_lseek>
  423d00:	1c43      	adds	r3, r0, #1
  423d02:	d000      	beq.n	423d06 <_lseek_r+0x1e>
  423d04:	bd38      	pop	{r3, r4, r5, pc}
  423d06:	682b      	ldr	r3, [r5, #0]
  423d08:	2b00      	cmp	r3, #0
  423d0a:	d0fb      	beq.n	423d04 <_lseek_r+0x1c>
  423d0c:	6023      	str	r3, [r4, #0]
  423d0e:	bd38      	pop	{r3, r4, r5, pc}
  423d10:	2004e3e4 	.word	0x2004e3e4

00423d14 <_read_r>:
  423d14:	b538      	push	{r3, r4, r5, lr}
  423d16:	460c      	mov	r4, r1
  423d18:	4684      	mov	ip, r0
  423d1a:	4611      	mov	r1, r2
  423d1c:	4d07      	ldr	r5, [pc, #28]	@ (423d3c <_read_r+0x28>)
  423d1e:	461a      	mov	r2, r3
  423d20:	2300      	movs	r3, #0
  423d22:	4620      	mov	r0, r4
  423d24:	4664      	mov	r4, ip
  423d26:	602b      	str	r3, [r5, #0]
  423d28:	f001 fe5a 	bl	4259e0 <_read>
  423d2c:	1c43      	adds	r3, r0, #1
  423d2e:	d000      	beq.n	423d32 <_read_r+0x1e>
  423d30:	bd38      	pop	{r3, r4, r5, pc}
  423d32:	682b      	ldr	r3, [r5, #0]
  423d34:	2b00      	cmp	r3, #0
  423d36:	d0fb      	beq.n	423d30 <_read_r+0x1c>
  423d38:	6023      	str	r3, [r4, #0]
  423d3a:	bd38      	pop	{r3, r4, r5, pc}
  423d3c:	2004e3e4 	.word	0x2004e3e4

00423d40 <_sbrk_r>:
  423d40:	b538      	push	{r3, r4, r5, lr}
  423d42:	2200      	movs	r2, #0
  423d44:	4d06      	ldr	r5, [pc, #24]	@ (423d60 <_sbrk_r+0x20>)
  423d46:	4604      	mov	r4, r0
  423d48:	4608      	mov	r0, r1
  423d4a:	602a      	str	r2, [r5, #0]
  423d4c:	f001 fe50 	bl	4259f0 <_sbrk>
  423d50:	1c43      	adds	r3, r0, #1
  423d52:	d000      	beq.n	423d56 <_sbrk_r+0x16>
  423d54:	bd38      	pop	{r3, r4, r5, pc}
  423d56:	682b      	ldr	r3, [r5, #0]
  423d58:	2b00      	cmp	r3, #0
  423d5a:	d0fb      	beq.n	423d54 <_sbrk_r+0x14>
  423d5c:	6023      	str	r3, [r4, #0]
  423d5e:	bd38      	pop	{r3, r4, r5, pc}
  423d60:	2004e3e4 	.word	0x2004e3e4

00423d64 <_write_r>:
  423d64:	b538      	push	{r3, r4, r5, lr}
  423d66:	460c      	mov	r4, r1
  423d68:	4684      	mov	ip, r0
  423d6a:	4611      	mov	r1, r2
  423d6c:	4d07      	ldr	r5, [pc, #28]	@ (423d8c <_write_r+0x28>)
  423d6e:	461a      	mov	r2, r3
  423d70:	2300      	movs	r3, #0
  423d72:	4620      	mov	r0, r4
  423d74:	4664      	mov	r4, ip
  423d76:	602b      	str	r3, [r5, #0]
  423d78:	f001 fe4a 	bl	425a10 <_write>
  423d7c:	1c43      	adds	r3, r0, #1
  423d7e:	d000      	beq.n	423d82 <_write_r+0x1e>
  423d80:	bd38      	pop	{r3, r4, r5, pc}
  423d82:	682b      	ldr	r3, [r5, #0]
  423d84:	2b00      	cmp	r3, #0
  423d86:	d0fb      	beq.n	423d80 <_write_r+0x1c>
  423d88:	6023      	str	r3, [r4, #0]
  423d8a:	bd38      	pop	{r3, r4, r5, pc}
  423d8c:	2004e3e4 	.word	0x2004e3e4

00423d90 <sysconf>:
  423d90:	2808      	cmp	r0, #8
  423d92:	d102      	bne.n	423d9a <sysconf+0xa>
  423d94:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  423d98:	4770      	bx	lr
  423d9a:	b508      	push	{r3, lr}
  423d9c:	f7fd f894 	bl	420ec8 <__errno>
  423da0:	2216      	movs	r2, #22
  423da2:	4603      	mov	r3, r0
  423da4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  423da8:	601a      	str	r2, [r3, #0]
  423daa:	bd08      	pop	{r3, pc}

00423dac <__libc_fini_array>:
  423dac:	b538      	push	{r3, r4, r5, lr}
  423dae:	4d07      	ldr	r5, [pc, #28]	@ (423dcc <__libc_fini_array+0x20>)
  423db0:	4c07      	ldr	r4, [pc, #28]	@ (423dd0 <__libc_fini_array+0x24>)
  423db2:	1b2c      	subs	r4, r5, r4
  423db4:	10a4      	asrs	r4, r4, #2
  423db6:	d005      	beq.n	423dc4 <__libc_fini_array+0x18>
  423db8:	3c01      	subs	r4, #1
  423dba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  423dbe:	4798      	blx	r3
  423dc0:	2c00      	cmp	r4, #0
  423dc2:	d1f9      	bne.n	423db8 <__libc_fini_array+0xc>
  423dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  423dc8:	f7ec bfa8 	b.w	410d1c <_fini>
  423dcc:	0043d958 	.word	0x0043d958
  423dd0:	0043d954 	.word	0x0043d954

00423dd4 <_wcsnrtombs_l>:
  423dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  423dd8:	b08b      	sub	sp, #44	@ 0x2c
  423dda:	4686      	mov	lr, r0
  423ddc:	461e      	mov	r6, r3
  423dde:	e9dd 7a15 	ldrd	r7, sl, [sp, #84]	@ 0x54
  423de2:	2f00      	cmp	r7, #0
  423de4:	d05a      	beq.n	423e9c <_wcsnrtombs_l+0xc8>
  423de6:	6815      	ldr	r5, [r2, #0]
  423de8:	2900      	cmp	r1, #0
  423dea:	d05c      	beq.n	423ea6 <_wcsnrtombs_l+0xd2>
  423dec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  423dee:	2b00      	cmp	r3, #0
  423df0:	d069      	beq.n	423ec6 <_wcsnrtombs_l+0xf2>
  423df2:	1e74      	subs	r4, r6, #1
  423df4:	b34e      	cbz	r6, 423e4a <_wcsnrtombs_l+0x76>
  423df6:	3d04      	subs	r5, #4
  423df8:	2600      	movs	r6, #0
  423dfa:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
  423dfe:	9104      	str	r1, [sp, #16]
  423e00:	9103      	str	r1, [sp, #12]
  423e02:	9205      	str	r2, [sp, #20]
  423e04:	e9cd 5e01 	strd	r5, lr, [sp, #4]
  423e08:	e00b      	b.n	423e22 <_wcsnrtombs_l+0x4e>
  423e0a:	9b03      	ldr	r3, [sp, #12]
  423e0c:	bb0b      	cbnz	r3, 423e52 <_wcsnrtombs_l+0x7e>
  423e0e:	9b01      	ldr	r3, [sp, #4]
  423e10:	6818      	ldr	r0, [r3, #0]
  423e12:	2800      	cmp	r0, #0
  423e14:	d036      	beq.n	423e84 <_wcsnrtombs_l+0xb0>
  423e16:	45dc      	cmp	ip, fp
  423e18:	d257      	bcs.n	423eca <_wcsnrtombs_l+0xf6>
  423e1a:	3c01      	subs	r4, #1
  423e1c:	4666      	mov	r6, ip
  423e1e:	1c63      	adds	r3, r4, #1
  423e20:	d013      	beq.n	423e4a <_wcsnrtombs_l+0x76>
  423e22:	9901      	ldr	r1, [sp, #4]
  423e24:	463b      	mov	r3, r7
  423e26:	9802      	ldr	r0, [sp, #8]
  423e28:	f851 2f04 	ldr.w	r2, [r1, #4]!
  423e2c:	f8da 50e0 	ldr.w	r5, [sl, #224]	@ 0xe0
  423e30:	9101      	str	r1, [sp, #4]
  423e32:	a907      	add	r1, sp, #28
  423e34:	e9d7 9800 	ldrd	r9, r8, [r7]
  423e38:	47a8      	blx	r5
  423e3a:	1c42      	adds	r2, r0, #1
  423e3c:	d037      	beq.n	423eae <_wcsnrtombs_l+0xda>
  423e3e:	eb00 0c06 	add.w	ip, r0, r6
  423e42:	45dc      	cmp	ip, fp
  423e44:	d9e1      	bls.n	423e0a <_wcsnrtombs_l+0x36>
  423e46:	e9c7 9800 	strd	r9, r8, [r7]
  423e4a:	4630      	mov	r0, r6
  423e4c:	b00b      	add	sp, #44	@ 0x2c
  423e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423e52:	2800      	cmp	r0, #0
  423e54:	dd0e      	ble.n	423e74 <_wcsnrtombs_l+0xa0>
  423e56:	9b04      	ldr	r3, [sp, #16]
  423e58:	a907      	add	r1, sp, #28
  423e5a:	9d01      	ldr	r5, [sp, #4]
  423e5c:	4418      	add	r0, r3
  423e5e:	1e5a      	subs	r2, r3, #1
  423e60:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
  423e64:	f811 3b01 	ldrb.w	r3, [r1], #1
  423e68:	f802 3f01 	strb.w	r3, [r2, #1]!
  423e6c:	4572      	cmp	r2, lr
  423e6e:	d1f9      	bne.n	423e64 <_wcsnrtombs_l+0x90>
  423e70:	9501      	str	r5, [sp, #4]
  423e72:	9004      	str	r0, [sp, #16]
  423e74:	9b05      	ldr	r3, [sp, #20]
  423e76:	681a      	ldr	r2, [r3, #0]
  423e78:	3204      	adds	r2, #4
  423e7a:	601a      	str	r2, [r3, #0]
  423e7c:	9b01      	ldr	r3, [sp, #4]
  423e7e:	6818      	ldr	r0, [r3, #0]
  423e80:	2800      	cmp	r0, #0
  423e82:	d1c8      	bne.n	423e16 <_wcsnrtombs_l+0x42>
  423e84:	9903      	ldr	r1, [sp, #12]
  423e86:	9a05      	ldr	r2, [sp, #20]
  423e88:	b101      	cbz	r1, 423e8c <_wcsnrtombs_l+0xb8>
  423e8a:	6010      	str	r0, [r2, #0]
  423e8c:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
  423e90:	2200      	movs	r2, #0
  423e92:	4630      	mov	r0, r6
  423e94:	603a      	str	r2, [r7, #0]
  423e96:	b00b      	add	sp, #44	@ 0x2c
  423e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423e9c:	f500 7786 	add.w	r7, r0, #268	@ 0x10c
  423ea0:	6815      	ldr	r5, [r2, #0]
  423ea2:	2900      	cmp	r1, #0
  423ea4:	d1a2      	bne.n	423dec <_wcsnrtombs_l+0x18>
  423ea6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  423eaa:	9314      	str	r3, [sp, #80]	@ 0x50
  423eac:	e7a1      	b.n	423df2 <_wcsnrtombs_l+0x1e>
  423eae:	4606      	mov	r6, r0
  423eb0:	f8dd e008 	ldr.w	lr, [sp, #8]
  423eb4:	218a      	movs	r1, #138	@ 0x8a
  423eb6:	2200      	movs	r2, #0
  423eb8:	4630      	mov	r0, r6
  423eba:	f8ce 1000 	str.w	r1, [lr]
  423ebe:	603a      	str	r2, [r7, #0]
  423ec0:	b00b      	add	sp, #44	@ 0x2c
  423ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  423ec6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
  423ec8:	e7bf      	b.n	423e4a <_wcsnrtombs_l+0x76>
  423eca:	4666      	mov	r6, ip
  423ecc:	e7bd      	b.n	423e4a <_wcsnrtombs_l+0x76>
  423ece:	bf00      	nop

00423ed0 <_wcsnrtombs_r>:
  423ed0:	b510      	push	{r4, lr}
  423ed2:	b084      	sub	sp, #16
  423ed4:	4c05      	ldr	r4, [pc, #20]	@ (423eec <_wcsnrtombs_r+0x1c>)
  423ed6:	9806      	ldr	r0, [sp, #24]
  423ed8:	9000      	str	r0, [sp, #0]
  423eda:	9807      	ldr	r0, [sp, #28]
  423edc:	9001      	str	r0, [sp, #4]
  423ede:	4804      	ldr	r0, [pc, #16]	@ (423ef0 <_wcsnrtombs_r+0x20>)
  423ee0:	6800      	ldr	r0, [r0, #0]
  423ee2:	9402      	str	r4, [sp, #8]
  423ee4:	f7ff ff76 	bl	423dd4 <_wcsnrtombs_l>
  423ee8:	b004      	add	sp, #16
  423eea:	bd10      	pop	{r4, pc}
  423eec:	2000a36c 	.word	0x2000a36c
  423ef0:	2000a4d8 	.word	0x2000a4d8

00423ef4 <quorem>:
  423ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  423ef8:	6903      	ldr	r3, [r0, #16]
  423efa:	b085      	sub	sp, #20
  423efc:	690c      	ldr	r4, [r1, #16]
  423efe:	42a3      	cmp	r3, r4
  423f00:	f2c0 8090 	blt.w	424024 <quorem+0x130>
  423f04:	3c01      	subs	r4, #1
  423f06:	f101 0514 	add.w	r5, r1, #20
  423f0a:	f100 0814 	add.w	r8, r0, #20
  423f0e:	4681      	mov	r9, r0
  423f10:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
  423f14:	ea4f 0c84 	mov.w	ip, r4, lsl #2
  423f18:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
  423f1c:	eb05 0784 	add.w	r7, r5, r4, lsl #2
  423f20:	3301      	adds	r3, #1
  423f22:	eb08 0b84 	add.w	fp, r8, r4, lsl #2
  423f26:	429a      	cmp	r2, r3
  423f28:	fbb2 f6f3 	udiv	r6, r2, r3
  423f2c:	d342      	bcc.n	423fb4 <quorem+0xc0>
  423f2e:	2000      	movs	r0, #0
  423f30:	46aa      	mov	sl, r5
  423f32:	46c6      	mov	lr, r8
  423f34:	f8cd 800c 	str.w	r8, [sp, #12]
  423f38:	4603      	mov	r3, r0
  423f3a:	4688      	mov	r8, r1
  423f3c:	e9cd c501 	strd	ip, r5, [sp, #4]
  423f40:	4605      	mov	r5, r0
  423f42:	f85a 2b04 	ldr.w	r2, [sl], #4
  423f46:	f8de 1000 	ldr.w	r1, [lr]
  423f4a:	b290      	uxth	r0, r2
  423f4c:	4557      	cmp	r7, sl
  423f4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  423f52:	fb06 5000 	mla	r0, r6, r0, r5
  423f56:	b28a      	uxth	r2, r1
  423f58:	ea4f 4510 	mov.w	r5, r0, lsr #16
  423f5c:	b280      	uxth	r0, r0
  423f5e:	fb06 550c 	mla	r5, r6, ip, r5
  423f62:	eba2 0200 	sub.w	r2, r2, r0
  423f66:	441a      	add	r2, r3
  423f68:	b2ab      	uxth	r3, r5
  423f6a:	ea4f 4515 	mov.w	r5, r5, lsr #16
  423f6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
  423f72:	b292      	uxth	r2, r2
  423f74:	eb03 4311 	add.w	r3, r3, r1, lsr #16
  423f78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  423f7c:	ea4f 4323 	mov.w	r3, r3, asr #16
  423f80:	f84e 2b04 	str.w	r2, [lr], #4
  423f84:	d2dd      	bcs.n	423f42 <quorem+0x4e>
  423f86:	4641      	mov	r1, r8
  423f88:	f8dd 800c 	ldr.w	r8, [sp, #12]
  423f8c:	e9dd c501 	ldrd	ip, r5, [sp, #4]
  423f90:	f858 300c 	ldr.w	r3, [r8, ip]
  423f94:	b973      	cbnz	r3, 423fb4 <quorem+0xc0>
  423f96:	f1ab 0b04 	sub.w	fp, fp, #4
  423f9a:	45d8      	cmp	r8, fp
  423f9c:	d304      	bcc.n	423fa8 <quorem+0xb4>
  423f9e:	e007      	b.n	423fb0 <quorem+0xbc>
  423fa0:	45d8      	cmp	r8, fp
  423fa2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
  423fa6:	d203      	bcs.n	423fb0 <quorem+0xbc>
  423fa8:	f85b 3904 	ldr.w	r3, [fp], #-4
  423fac:	2b00      	cmp	r3, #0
  423fae:	d0f7      	beq.n	423fa0 <quorem+0xac>
  423fb0:	f8c9 4010 	str.w	r4, [r9, #16]
  423fb4:	4648      	mov	r0, r9
  423fb6:	f001 f9af 	bl	425318 <__mcmp>
  423fba:	2800      	cmp	r0, #0
  423fbc:	db2e      	blt.n	42401c <quorem+0x128>
  423fbe:	2200      	movs	r2, #0
  423fc0:	4641      	mov	r1, r8
  423fc2:	4694      	mov	ip, r2
  423fc4:	f855 0b04 	ldr.w	r0, [r5], #4
  423fc8:	680b      	ldr	r3, [r1, #0]
  423fca:	fa1f fe80 	uxth.w	lr, r0
  423fce:	42af      	cmp	r7, r5
  423fd0:	b29a      	uxth	r2, r3
  423fd2:	ea4f 4010 	mov.w	r0, r0, lsr #16
  423fd6:	eba2 020e 	sub.w	r2, r2, lr
  423fda:	4462      	add	r2, ip
  423fdc:	ebc0 4022 	rsb	r0, r0, r2, asr #16
  423fe0:	b292      	uxth	r2, r2
  423fe2:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  423fe6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  423fea:	ea4f 4c20 	mov.w	ip, r0, asr #16
  423fee:	f841 2b04 	str.w	r2, [r1], #4
  423ff2:	d2e7      	bcs.n	423fc4 <quorem+0xd0>
  423ff4:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
  423ff8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
  423ffc:	b96a      	cbnz	r2, 42401a <quorem+0x126>
  423ffe:	3b04      	subs	r3, #4
  424000:	4543      	cmp	r3, r8
  424002:	d804      	bhi.n	42400e <quorem+0x11a>
  424004:	e007      	b.n	424016 <quorem+0x122>
  424006:	4598      	cmp	r8, r3
  424008:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
  42400c:	d203      	bcs.n	424016 <quorem+0x122>
  42400e:	f853 2904 	ldr.w	r2, [r3], #-4
  424012:	2a00      	cmp	r2, #0
  424014:	d0f7      	beq.n	424006 <quorem+0x112>
  424016:	f8c9 4010 	str.w	r4, [r9, #16]
  42401a:	3601      	adds	r6, #1
  42401c:	4630      	mov	r0, r6
  42401e:	b005      	add	sp, #20
  424020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424024:	2000      	movs	r0, #0
  424026:	b005      	add	sp, #20
  424028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42402c:	0000      	movs	r0, r0
	...

00424030 <_dtoa_r>:
  424030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  424034:	ed2d 8b02 	vpush	{d8}
  424038:	b08f      	sub	sp, #60	@ 0x3c
  42403a:	4604      	mov	r4, r0
  42403c:	4691      	mov	r9, r2
  42403e:	9102      	str	r1, [sp, #8]
  424040:	6b81      	ldr	r1, [r0, #56]	@ 0x38
  424042:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
  424044:	9304      	str	r3, [sp, #16]
  424046:	ec57 6b10 	vmov	r6, r7, d0
  42404a:	ed8d 0b00 	vstr	d0, [sp]
  42404e:	b141      	cbz	r1, 424062 <_dtoa_r+0x32>
  424050:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  424052:	2301      	movs	r3, #1
  424054:	4093      	lsls	r3, r2
  424056:	604a      	str	r2, [r1, #4]
  424058:	608b      	str	r3, [r1, #8]
  42405a:	f000 feff 	bl	424e5c <_Bfree>
  42405e:	2300      	movs	r3, #0
  424060:	63a3      	str	r3, [r4, #56]	@ 0x38
  424062:	f1b7 0800 	subs.w	r8, r7, #0
  424066:	f2c0 80aa 	blt.w	4241be <_dtoa_r+0x18e>
  42406a:	2300      	movs	r3, #0
  42406c:	602b      	str	r3, [r5, #0]
  42406e:	4bc4      	ldr	r3, [pc, #784]	@ (424380 <_dtoa_r+0x350>)
  424070:	ea33 0308 	bics.w	r3, r3, r8
  424074:	f000 80ae 	beq.w	4241d4 <_dtoa_r+0x1a4>
  424078:	ed9d 8b00 	vldr	d8, [sp]
  42407c:	eeb5 8b40 	vcmp.f64	d8, #0.0
  424080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  424084:	d10e      	bne.n	4240a4 <_dtoa_r+0x74>
  424086:	2301      	movs	r3, #1
  424088:	9a04      	ldr	r2, [sp, #16]
  42408a:	6013      	str	r3, [r2, #0]
  42408c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
  42408e:	b113      	cbz	r3, 424096 <_dtoa_r+0x66>
  424090:	4bbc      	ldr	r3, [pc, #752]	@ (424384 <_dtoa_r+0x354>)
  424092:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
  424094:	6013      	str	r3, [r2, #0]
  424096:	4ebc      	ldr	r6, [pc, #752]	@ (424388 <_dtoa_r+0x358>)
  424098:	4630      	mov	r0, r6
  42409a:	b00f      	add	sp, #60	@ 0x3c
  42409c:	ecbd 8b02 	vpop	{d8}
  4240a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4240a4:	eeb0 0b48 	vmov.f64	d0, d8
  4240a8:	aa0c      	add	r2, sp, #48	@ 0x30
  4240aa:	a90d      	add	r1, sp, #52	@ 0x34
  4240ac:	4620      	mov	r0, r4
  4240ae:	f001 fa15 	bl	4254dc <__d2b>
  4240b2:	4605      	mov	r5, r0
  4240b4:	ea5f 5318 	movs.w	r3, r8, lsr #20
  4240b8:	f040 80a3 	bne.w	424202 <_dtoa_r+0x1d2>
  4240bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
  4240c0:	4413      	add	r3, r2
  4240c2:	f203 4132 	addw	r1, r3, #1074	@ 0x432
  4240c6:	2920      	cmp	r1, #32
  4240c8:	f340 81d4 	ble.w	424474 <_dtoa_r+0x444>
  4240cc:	f1c1 0140 	rsb	r1, r1, #64	@ 0x40
  4240d0:	fa08 f801 	lsl.w	r8, r8, r1
  4240d4:	f203 4112 	addw	r1, r3, #1042	@ 0x412
  4240d8:	fa26 f101 	lsr.w	r1, r6, r1
  4240dc:	ea48 0101 	orr.w	r1, r8, r1
  4240e0:	ee07 1a10 	vmov	s14, r1
  4240e4:	eeb8 7b47 	vcvt.f64.u32	d7, s14
  4240e8:	2101      	movs	r1, #1
  4240ea:	3b01      	subs	r3, #1
  4240ec:	910a      	str	r1, [sp, #40]	@ 0x28
  4240ee:	ee17 6a90 	vmov	r6, s15
  4240f2:	ec51 0b17 	vmov	r0, r1, d7
  4240f6:	f1a6 71f8 	sub.w	r1, r6, #32505856	@ 0x1f00000
  4240fa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
  4240fe:	ee05 3a90 	vmov	s11, r3
  424102:	ec41 0b17 	vmov	d7, r0, r1
  424106:	ee37 6b46 	vsub.f64	d6, d7, d6
  42410a:	eeb8 4be5 	vcvt.f64.s32	d4, s11
  42410e:	ed9f 3b96 	vldr	d3, [pc, #600]	@ 424368 <_dtoa_r+0x338>
  424112:	ed9f 7b97 	vldr	d7, [pc, #604]	@ 424370 <_dtoa_r+0x340>
  424116:	ed9f 5b98 	vldr	d5, [pc, #608]	@ 424378 <_dtoa_r+0x348>
  42411a:	eea6 7b03 	vfma.f64	d7, d6, d3
  42411e:	eea4 7b05 	vfma.f64	d7, d4, d5
  424122:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
  424126:	eefd 6bc7 	vcvt.s32.f64	s13, d7
  42412a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  42412e:	ee16 aa90 	vmov	sl, s13
  424132:	d508      	bpl.n	424146 <_dtoa_r+0x116>
  424134:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  424138:	eeb4 6b47 	vcmp.f64	d6, d7
  42413c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  424140:	bf18      	it	ne
  424142:	f10a 3aff 	addne.w	sl, sl, #4294967295	@ 0xffffffff
  424146:	1ad3      	subs	r3, r2, r3
  424148:	f1ba 0f16 	cmp.w	sl, #22
  42414c:	f103 36ff 	add.w	r6, r3, #4294967295	@ 0xffffffff
  424150:	f200 8186 	bhi.w	424460 <_dtoa_r+0x430>
  424154:	4a8d      	ldr	r2, [pc, #564]	@ (42438c <_dtoa_r+0x35c>)
  424156:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
  42415a:	ed92 7b00 	vldr	d7, [r2]
  42415e:	eeb4 8bc7 	vcmpe.f64	d8, d7
  424162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  424166:	d564      	bpl.n	424232 <_dtoa_r+0x202>
  424168:	2200      	movs	r2, #0
  42416a:	2e00      	cmp	r6, #0
  42416c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
  424170:	9209      	str	r2, [sp, #36]	@ 0x24
  424172:	f2c0 817a 	blt.w	42446a <_dtoa_r+0x43a>
  424176:	2300      	movs	r3, #0
  424178:	9305      	str	r3, [sp, #20]
  42417a:	f1ba 0f00 	cmp.w	sl, #0
  42417e:	da5e      	bge.n	42423e <_dtoa_r+0x20e>
  424180:	9b05      	ldr	r3, [sp, #20]
  424182:	f8cd a018 	str.w	sl, [sp, #24]
  424186:	eba3 030a 	sub.w	r3, r3, sl
  42418a:	9305      	str	r3, [sp, #20]
  42418c:	f1ca 0300 	rsb	r3, sl, #0
  424190:	f04f 0a00 	mov.w	sl, #0
  424194:	9303      	str	r3, [sp, #12]
  424196:	9b02      	ldr	r3, [sp, #8]
  424198:	2b09      	cmp	r3, #9
  42419a:	d858      	bhi.n	42424e <_dtoa_r+0x21e>
  42419c:	2b05      	cmp	r3, #5
  42419e:	f340 8170 	ble.w	424482 <_dtoa_r+0x452>
  4241a2:	3b04      	subs	r3, #4
  4241a4:	2700      	movs	r7, #0
  4241a6:	9302      	str	r3, [sp, #8]
  4241a8:	9b02      	ldr	r3, [sp, #8]
  4241aa:	3b02      	subs	r3, #2
  4241ac:	2b03      	cmp	r3, #3
  4241ae:	f200 856d 	bhi.w	424c8c <_dtoa_r+0xc5c>
  4241b2:	e8df f013 	tbh	[pc, r3, lsl #1]
  4241b6:	036a      	.short	0x036a
  4241b8:	035c0367 	.word	0x035c0367
  4241bc:	0340      	.short	0x0340
  4241be:	2301      	movs	r3, #1
  4241c0:	f028 4800 	bic.w	r8, r8, #2147483648	@ 0x80000000
  4241c4:	602b      	str	r3, [r5, #0]
  4241c6:	4b6e      	ldr	r3, [pc, #440]	@ (424380 <_dtoa_r+0x350>)
  4241c8:	f8cd 8004 	str.w	r8, [sp, #4]
  4241cc:	ea33 0308 	bics.w	r3, r3, r8
  4241d0:	f47f af52 	bne.w	424078 <_dtoa_r+0x48>
  4241d4:	f3c8 0813 	ubfx	r8, r8, #0, #20
  4241d8:	f242 730f 	movw	r3, #9999	@ 0x270f
  4241dc:	9a04      	ldr	r2, [sp, #16]
  4241de:	ea58 0806 	orrs.w	r8, r8, r6
  4241e2:	6013      	str	r3, [r2, #0]
  4241e4:	d01d      	beq.n	424222 <_dtoa_r+0x1f2>
  4241e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
  4241e8:	4e69      	ldr	r6, [pc, #420]	@ (424390 <_dtoa_r+0x360>)
  4241ea:	2b00      	cmp	r3, #0
  4241ec:	f43f af54 	beq.w	424098 <_dtoa_r+0x68>
  4241f0:	1cf3      	adds	r3, r6, #3
  4241f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
  4241f4:	4630      	mov	r0, r6
  4241f6:	6013      	str	r3, [r2, #0]
  4241f8:	b00f      	add	sp, #60	@ 0x3c
  4241fa:	ecbd 8b02 	vpop	{d8}
  4241fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424202:	ee18 6a90 	vmov	r6, s17
  424206:	2100      	movs	r1, #0
  424208:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
  42420c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  42420e:	f3c6 0613 	ubfx	r6, r6, #0, #20
  424212:	910a      	str	r1, [sp, #40]	@ 0x28
  424214:	ec51 0b18 	vmov	r0, r1, d8
  424218:	f046 517f 	orr.w	r1, r6, #1069547520	@ 0x3fc00000
  42421c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
  424220:	e76b      	b.n	4240fa <_dtoa_r+0xca>
  424222:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
  424224:	4e5b      	ldr	r6, [pc, #364]	@ (424394 <_dtoa_r+0x364>)
  424226:	2b00      	cmp	r3, #0
  424228:	f43f af36 	beq.w	424098 <_dtoa_r+0x68>
  42422c:	f106 0308 	add.w	r3, r6, #8
  424230:	e7df      	b.n	4241f2 <_dtoa_r+0x1c2>
  424232:	2b00      	cmp	r3, #0
  424234:	f340 845c 	ble.w	424af0 <_dtoa_r+0xac0>
  424238:	2300      	movs	r3, #0
  42423a:	9309      	str	r3, [sp, #36]	@ 0x24
  42423c:	9305      	str	r3, [sp, #20]
  42423e:	2300      	movs	r3, #0
  424240:	4456      	add	r6, sl
  424242:	f8cd a018 	str.w	sl, [sp, #24]
  424246:	9303      	str	r3, [sp, #12]
  424248:	9b02      	ldr	r3, [sp, #8]
  42424a:	2b09      	cmp	r3, #9
  42424c:	d9a6      	bls.n	42419c <_dtoa_r+0x16c>
  42424e:	2300      	movs	r3, #0
  424250:	2701      	movs	r7, #1
  424252:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
  424256:	4699      	mov	r9, r3
  424258:	9302      	str	r3, [sp, #8]
  42425a:	9707      	str	r7, [sp, #28]
  42425c:	2100      	movs	r1, #0
  42425e:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
  424262:	63e1      	str	r1, [r4, #60]	@ 0x3c
  424264:	4620      	mov	r0, r4
  424266:	f000 fdd3 	bl	424e10 <_Balloc>
  42426a:	4680      	mov	r8, r0
  42426c:	2800      	cmp	r0, #0
  42426e:	f000 8515 	beq.w	424c9c <_dtoa_r+0xc6c>
  424272:	f1bb 0f0e 	cmp.w	fp, #14
  424276:	bf8c      	ite	hi
  424278:	2700      	movhi	r7, #0
  42427a:	f007 0701 	andls.w	r7, r7, #1
  42427e:	63a0      	str	r0, [r4, #56]	@ 0x38
  424280:	2f00      	cmp	r7, #0
  424282:	f000 80ce 	beq.w	424422 <_dtoa_r+0x3f2>
  424286:	9906      	ldr	r1, [sp, #24]
  424288:	2900      	cmp	r1, #0
  42428a:	f340 80fc 	ble.w	424486 <_dtoa_r+0x456>
  42428e:	4b3f      	ldr	r3, [pc, #252]	@ (42438c <_dtoa_r+0x35c>)
  424290:	f001 020f 	and.w	r2, r1, #15
  424294:	05cf      	lsls	r7, r1, #23
  424296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  42429a:	ed93 6b00 	vldr	d6, [r3]
  42429e:	ea4f 1321 	mov.w	r3, r1, asr #4
  4242a2:	f140 82ab 	bpl.w	4247fc <_dtoa_r+0x7cc>
  4242a6:	4a3c      	ldr	r2, [pc, #240]	@ (424398 <_dtoa_r+0x368>)
  4242a8:	f003 030f 	and.w	r3, r3, #15
  4242ac:	2103      	movs	r1, #3
  4242ae:	ed92 7b08 	vldr	d7, [r2, #32]
  4242b2:	ee88 5b07 	vdiv.f64	d5, d8, d7
  4242b6:	b15b      	cbz	r3, 4242d0 <_dtoa_r+0x2a0>
  4242b8:	4a37      	ldr	r2, [pc, #220]	@ (424398 <_dtoa_r+0x368>)
  4242ba:	07d8      	lsls	r0, r3, #31
  4242bc:	d504      	bpl.n	4242c8 <_dtoa_r+0x298>
  4242be:	3101      	adds	r1, #1
  4242c0:	ed92 7b00 	vldr	d7, [r2]
  4242c4:	ee26 6b07 	vmul.f64	d6, d6, d7
  4242c8:	105b      	asrs	r3, r3, #1
  4242ca:	f102 0208 	add.w	r2, r2, #8
  4242ce:	d1f4      	bne.n	4242ba <_dtoa_r+0x28a>
  4242d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
  4242d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  4242d6:	b13b      	cbz	r3, 4242e8 <_dtoa_r+0x2b8>
  4242d8:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
  4242dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
  4242e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4242e4:	f100 840e 	bmi.w	424b04 <_dtoa_r+0xad4>
  4242e8:	ee06 1a90 	vmov	s13, r1
  4242ec:	eeb8 5be6 	vcvt.f64.s32	d5, s13
  4242f0:	eeb1 6b0c 	vmov.f64	d6, #28	@ 0x40e00000  7.0
  4242f4:	eea5 6b07 	vfma.f64	d6, d5, d7
  4242f8:	ee16 1a90 	vmov	r1, s13
  4242fc:	ec53 2b16 	vmov	r2, r3, d6
  424300:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
  424304:	f1bb 0f00 	cmp.w	fp, #0
  424308:	d077      	beq.n	4243fa <_dtoa_r+0x3ca>
  42430a:	9906      	ldr	r1, [sp, #24]
  42430c:	9108      	str	r1, [sp, #32]
  42430e:	4659      	mov	r1, fp
  424310:	eefd 6bc7 	vcvt.s32.f64	s13, d7
  424314:	481d      	ldr	r0, [pc, #116]	@ (42438c <_dtoa_r+0x35c>)
  424316:	9f07      	ldr	r7, [sp, #28]
  424318:	ec43 2b14 	vmov	d4, r2, r3
  42431c:	ee16 3a90 	vmov	r3, s13
  424320:	eeb8 5be6 	vcvt.f64.s32	d5, s13
  424324:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
  424328:	3330      	adds	r3, #48	@ 0x30
  42432a:	ee37 7b45 	vsub.f64	d7, d7, d5
  42432e:	b2db      	uxtb	r3, r3
  424330:	ed12 6b02 	vldr	d6, [r2, #-8]
  424334:	f888 3000 	strb.w	r3, [r8]
  424338:	f108 0201 	add.w	r2, r8, #1
  42433c:	2f00      	cmp	r7, #0
  42433e:	f000 82a7 	beq.w	424890 <_dtoa_r+0x860>
  424342:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
  424346:	ee83 5b06 	vdiv.f64	d5, d3, d6
  42434a:	ee35 5b44 	vsub.f64	d5, d5, d4
  42434e:	eeb4 5bc7 	vcmpe.f64	d5, d7
  424352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  424356:	f300 8332 	bgt.w	4249be <_dtoa_r+0x98e>
  42435a:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
  42435e:	2000      	movs	r0, #0
  424360:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
  424364:	e032      	b.n	4243cc <_dtoa_r+0x39c>
  424366:	bf00      	nop
  424368:	636f4361 	.word	0x636f4361
  42436c:	3fd287a7 	.word	0x3fd287a7
  424370:	8b60c8b3 	.word	0x8b60c8b3
  424374:	3fc68a28 	.word	0x3fc68a28
  424378:	509f79fb 	.word	0x509f79fb
  42437c:	3fd34413 	.word	0x3fd34413
  424380:	7ff00000 	.word	0x7ff00000
  424384:	00434a65 	.word	0x00434a65
  424388:	00434a64 	.word	0x00434a64
  42438c:	0043c688 	.word	0x0043c688
  424390:	00434e00 	.word	0x00434e00
  424394:	00434df4 	.word	0x00434df4
  424398:	0043c660 	.word	0x0043c660
  42439c:	3001      	adds	r0, #1
  42439e:	4288      	cmp	r0, r1
  4243a0:	da3f      	bge.n	424422 <_dtoa_r+0x3f2>
  4243a2:	ee27 7b04 	vmul.f64	d7, d7, d4
  4243a6:	ee25 5b04 	vmul.f64	d5, d5, d4
  4243aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
  4243ae:	eeb8 3be6 	vcvt.f64.s32	d3, s13
  4243b2:	ee16 3a90 	vmov	r3, s13
  4243b6:	3330      	adds	r3, #48	@ 0x30
  4243b8:	ee37 7b43 	vsub.f64	d7, d7, d3
  4243bc:	f802 3b01 	strb.w	r3, [r2], #1
  4243c0:	eeb4 7bc5 	vcmpe.f64	d7, d5
  4243c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4243c8:	f100 82f9 	bmi.w	4249be <_dtoa_r+0x98e>
  4243cc:	ee32 6b47 	vsub.f64	d6, d2, d7
  4243d0:	eeb4 6bc5 	vcmpe.f64	d6, d5
  4243d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4243d8:	d5e0      	bpl.n	42439c <_dtoa_r+0x36c>
  4243da:	4611      	mov	r1, r2
  4243dc:	e2df      	b.n	42499e <_dtoa_r+0x96e>
  4243de:	ee06 1a90 	vmov	s13, r1
  4243e2:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
  4243e6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
  4243ea:	eea6 5b07 	vfma.f64	d5, d6, d7
  4243ee:	ee15 1a90 	vmov	r1, s11
  4243f2:	ec53 2b15 	vmov	r2, r3, d5
  4243f6:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
  4243fa:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
  4243fe:	ec43 2b15 	vmov	d5, r2, r3
  424402:	ee37 7b46 	vsub.f64	d7, d7, d6
  424406:	eeb4 7bc5 	vcmpe.f64	d7, d5
  42440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  42440e:	f300 83a6 	bgt.w	424b5e <_dtoa_r+0xb2e>
  424412:	eeb1 5b45 	vneg.f64	d5, d5
  424416:	eeb4 7bc5 	vcmpe.f64	d7, d5
  42441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  42441e:	f100 8164 	bmi.w	4246ea <_dtoa_r+0x6ba>
  424422:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  424424:	2b00      	cmp	r3, #0
  424426:	db03      	blt.n	424430 <_dtoa_r+0x400>
  424428:	9a06      	ldr	r2, [sp, #24]
  42442a:	2a0e      	cmp	r2, #14
  42442c:	f340 8143 	ble.w	4246b6 <_dtoa_r+0x686>
  424430:	9a07      	ldr	r2, [sp, #28]
  424432:	2a00      	cmp	r2, #0
  424434:	d04d      	beq.n	4244d2 <_dtoa_r+0x4a2>
  424436:	9a02      	ldr	r2, [sp, #8]
  424438:	2a01      	cmp	r2, #1
  42443a:	f340 8384 	ble.w	424b46 <_dtoa_r+0xb16>
  42443e:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
  424442:	9a03      	ldr	r2, [sp, #12]
  424444:	429a      	cmp	r2, r3
  424446:	f2c0 82c1 	blt.w	4249cc <_dtoa_r+0x99c>
  42444a:	1ad3      	subs	r3, r2, r3
  42444c:	f1bb 0f00 	cmp.w	fp, #0
  424450:	930a      	str	r3, [sp, #40]	@ 0x28
  424452:	f280 83e7 	bge.w	424c24 <_dtoa_r+0xbf4>
  424456:	9b05      	ldr	r3, [sp, #20]
  424458:	eba3 030b 	sub.w	r3, r3, fp
  42445c:	9308      	str	r3, [sp, #32]
  42445e:	e2c0      	b.n	4249e2 <_dtoa_r+0x9b2>
  424460:	2201      	movs	r2, #1
  424462:	2e00      	cmp	r6, #0
  424464:	9209      	str	r2, [sp, #36]	@ 0x24
  424466:	f6bf ae86 	bge.w	424176 <_dtoa_r+0x146>
  42446a:	f1c3 0301 	rsb	r3, r3, #1
  42446e:	2600      	movs	r6, #0
  424470:	9305      	str	r3, [sp, #20]
  424472:	e682      	b.n	42417a <_dtoa_r+0x14a>
  424474:	f1c1 0120 	rsb	r1, r1, #32
  424478:	fa06 f101 	lsl.w	r1, r6, r1
  42447c:	ee07 1a10 	vmov	s14, r1
  424480:	e630      	b.n	4240e4 <_dtoa_r+0xb4>
  424482:	2701      	movs	r7, #1
  424484:	e690      	b.n	4241a8 <_dtoa_r+0x178>
  424486:	f000 829d 	beq.w	4249c4 <_dtoa_r+0x994>
  42448a:	9b06      	ldr	r3, [sp, #24]
  42448c:	4abe      	ldr	r2, [pc, #760]	@ (424788 <_dtoa_r+0x758>)
  42448e:	425b      	negs	r3, r3
  424490:	f003 010f 	and.w	r1, r3, #15
  424494:	111b      	asrs	r3, r3, #4
  424496:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
  42449a:	ed92 5b00 	vldr	d5, [r2]
  42449e:	ee28 5b05 	vmul.f64	d5, d8, d5
  4244a2:	eeb0 7b45 	vmov.f64	d7, d5
  4244a6:	f000 83ee 	beq.w	424c86 <_dtoa_r+0xc56>
  4244aa:	4ab8      	ldr	r2, [pc, #736]	@ (42478c <_dtoa_r+0x75c>)
  4244ac:	2000      	movs	r0, #0
  4244ae:	2102      	movs	r1, #2
  4244b0:	f013 0f01 	tst.w	r3, #1
  4244b4:	d005      	beq.n	4244c2 <_dtoa_r+0x492>
  4244b6:	3101      	adds	r1, #1
  4244b8:	4638      	mov	r0, r7
  4244ba:	ed92 6b00 	vldr	d6, [r2]
  4244be:	ee27 7b06 	vmul.f64	d7, d7, d6
  4244c2:	105b      	asrs	r3, r3, #1
  4244c4:	f102 0208 	add.w	r2, r2, #8
  4244c8:	d1f2      	bne.n	4244b0 <_dtoa_r+0x480>
  4244ca:	2800      	cmp	r0, #0
  4244cc:	fe05 7b07 	vseleq.f64	d7, d5, d7
  4244d0:	e700      	b.n	4242d4 <_dtoa_r+0x2a4>
  4244d2:	9b03      	ldr	r3, [sp, #12]
  4244d4:	2700      	movs	r7, #0
  4244d6:	930a      	str	r3, [sp, #40]	@ 0x28
  4244d8:	9b05      	ldr	r3, [sp, #20]
  4244da:	9707      	str	r7, [sp, #28]
  4244dc:	9308      	str	r3, [sp, #32]
  4244de:	9a08      	ldr	r2, [sp, #32]
  4244e0:	2a00      	cmp	r2, #0
  4244e2:	dd0b      	ble.n	4244fc <_dtoa_r+0x4cc>
  4244e4:	2e00      	cmp	r6, #0
  4244e6:	dd09      	ble.n	4244fc <_dtoa_r+0x4cc>
  4244e8:	42b2      	cmp	r2, r6
  4244ea:	4613      	mov	r3, r2
  4244ec:	9905      	ldr	r1, [sp, #20]
  4244ee:	bfa8      	it	ge
  4244f0:	4633      	movge	r3, r6
  4244f2:	1ac9      	subs	r1, r1, r3
  4244f4:	1ad2      	subs	r2, r2, r3
  4244f6:	1af6      	subs	r6, r6, r3
  4244f8:	9105      	str	r1, [sp, #20]
  4244fa:	9208      	str	r2, [sp, #32]
  4244fc:	9b03      	ldr	r3, [sp, #12]
  4244fe:	b15b      	cbz	r3, 424518 <_dtoa_r+0x4e8>
  424500:	9b07      	ldr	r3, [sp, #28]
  424502:	b11b      	cbz	r3, 42450c <_dtoa_r+0x4dc>
  424504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  424506:	2b00      	cmp	r3, #0
  424508:	f040 827e 	bne.w	424a08 <_dtoa_r+0x9d8>
  42450c:	4629      	mov	r1, r5
  42450e:	9a03      	ldr	r2, [sp, #12]
  424510:	4620      	mov	r0, r4
  424512:	f000 fe33 	bl	42517c <__pow5mult>
  424516:	4605      	mov	r5, r0
  424518:	2101      	movs	r1, #1
  42451a:	4620      	mov	r0, r4
  42451c:	f000 fd4e 	bl	424fbc <__i2b>
  424520:	9003      	str	r0, [sp, #12]
  424522:	f1ba 0f00 	cmp.w	sl, #0
  424526:	f040 8153 	bne.w	4247d0 <_dtoa_r+0x7a0>
  42452a:	9b02      	ldr	r3, [sp, #8]
  42452c:	2b01      	cmp	r3, #1
  42452e:	f340 8169 	ble.w	424804 <_dtoa_r+0x7d4>
  424532:	2301      	movs	r3, #1
  424534:	4433      	add	r3, r6
  424536:	f013 031f 	ands.w	r3, r3, #31
  42453a:	d008      	beq.n	42454e <_dtoa_r+0x51e>
  42453c:	f1c3 0220 	rsb	r2, r3, #32
  424540:	2a04      	cmp	r2, #4
  424542:	f300 820f 	bgt.w	424964 <_dtoa_r+0x934>
  424546:	d00a      	beq.n	42455e <_dtoa_r+0x52e>
  424548:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
  42454c:	e000      	b.n	424550 <_dtoa_r+0x520>
  42454e:	231c      	movs	r3, #28
  424550:	9a05      	ldr	r2, [sp, #20]
  424552:	441e      	add	r6, r3
  424554:	441a      	add	r2, r3
  424556:	9205      	str	r2, [sp, #20]
  424558:	9a08      	ldr	r2, [sp, #32]
  42455a:	441a      	add	r2, r3
  42455c:	9208      	str	r2, [sp, #32]
  42455e:	9b05      	ldr	r3, [sp, #20]
  424560:	2b00      	cmp	r3, #0
  424562:	dd05      	ble.n	424570 <_dtoa_r+0x540>
  424564:	4629      	mov	r1, r5
  424566:	461a      	mov	r2, r3
  424568:	4620      	mov	r0, r4
  42456a:	f000 fe61 	bl	425230 <__lshift>
  42456e:	4605      	mov	r5, r0
  424570:	2e00      	cmp	r6, #0
  424572:	dd05      	ble.n	424580 <_dtoa_r+0x550>
  424574:	4632      	mov	r2, r6
  424576:	9903      	ldr	r1, [sp, #12]
  424578:	4620      	mov	r0, r4
  42457a:	f000 fe59 	bl	425230 <__lshift>
  42457e:	9003      	str	r0, [sp, #12]
  424580:	9b02      	ldr	r3, [sp, #8]
  424582:	2b02      	cmp	r3, #2
  424584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  424586:	bfd4      	ite	le
  424588:	2600      	movle	r6, #0
  42458a:	2601      	movgt	r6, #1
  42458c:	2b00      	cmp	r3, #0
  42458e:	f040 80b0 	bne.w	4246f2 <_dtoa_r+0x6c2>
  424592:	f1bb 0f00 	cmp.w	fp, #0
  424596:	dc28      	bgt.n	4245ea <_dtoa_r+0x5ba>
  424598:	b33e      	cbz	r6, 4245ea <_dtoa_r+0x5ba>
  42459a:	f1bb 0f00 	cmp.w	fp, #0
  42459e:	f000 81e4 	beq.w	42496a <_dtoa_r+0x93a>
  4245a2:	ea6f 0309 	mvn.w	r3, r9
  4245a6:	4646      	mov	r6, r8
  4245a8:	9308      	str	r3, [sp, #32]
  4245aa:	9903      	ldr	r1, [sp, #12]
  4245ac:	4620      	mov	r0, r4
  4245ae:	f000 fc55 	bl	424e5c <_Bfree>
  4245b2:	b11f      	cbz	r7, 4245bc <_dtoa_r+0x58c>
  4245b4:	4639      	mov	r1, r7
  4245b6:	4620      	mov	r0, r4
  4245b8:	f000 fc50 	bl	424e5c <_Bfree>
  4245bc:	4629      	mov	r1, r5
  4245be:	4620      	mov	r0, r4
  4245c0:	f000 fc4c 	bl	424e5c <_Bfree>
  4245c4:	2200      	movs	r2, #0
  4245c6:	9b08      	ldr	r3, [sp, #32]
  4245c8:	f888 2000 	strb.w	r2, [r8]
  4245cc:	3301      	adds	r3, #1
  4245ce:	9a04      	ldr	r2, [sp, #16]
  4245d0:	6013      	str	r3, [r2, #0]
  4245d2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
  4245d4:	2b00      	cmp	r3, #0
  4245d6:	f43f ad5f 	beq.w	424098 <_dtoa_r+0x68>
  4245da:	4630      	mov	r0, r6
  4245dc:	f8c3 8000 	str.w	r8, [r3]
  4245e0:	b00f      	add	sp, #60	@ 0x3c
  4245e2:	ecbd 8b02 	vpop	{d8}
  4245e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4245ea:	9b07      	ldr	r3, [sp, #28]
  4245ec:	2b00      	cmp	r3, #0
  4245ee:	f000 809d 	beq.w	42472c <_dtoa_r+0x6fc>
  4245f2:	9b08      	ldr	r3, [sp, #32]
  4245f4:	2b00      	cmp	r3, #0
  4245f6:	f300 821e 	bgt.w	424a36 <_dtoa_r+0xa06>
  4245fa:	f1ba 0f00 	cmp.w	sl, #0
  4245fe:	f040 82d5 	bne.w	424bac <_dtoa_r+0xb7c>
  424602:	46ba      	mov	sl, r7
  424604:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
  424608:	4646      	mov	r6, r8
  42460a:	445b      	add	r3, fp
  42460c:	9307      	str	r3, [sp, #28]
  42460e:	9b00      	ldr	r3, [sp, #0]
  424610:	f003 0301 	and.w	r3, r3, #1
  424614:	e9cd 3808 	strd	r3, r8, [sp, #32]
  424618:	9903      	ldr	r1, [sp, #12]
  42461a:	4628      	mov	r0, r5
  42461c:	f7ff fc6a 	bl	423ef4 <quorem>
  424620:	4639      	mov	r1, r7
  424622:	4683      	mov	fp, r0
  424624:	4628      	mov	r0, r5
  424626:	f000 fe77 	bl	425318 <__mcmp>
  42462a:	9903      	ldr	r1, [sp, #12]
  42462c:	4681      	mov	r9, r0
  42462e:	4652      	mov	r2, sl
  424630:	4620      	mov	r0, r4
  424632:	f10b 0830 	add.w	r8, fp, #48	@ 0x30
  424636:	f000 fe91 	bl	42535c <__mdiff>
  42463a:	68c3      	ldr	r3, [r0, #12]
  42463c:	4601      	mov	r1, r0
  42463e:	2b00      	cmp	r3, #0
  424640:	f040 8204 	bne.w	424a4c <_dtoa_r+0xa1c>
  424644:	9005      	str	r0, [sp, #20]
  424646:	4628      	mov	r0, r5
  424648:	f000 fe66 	bl	425318 <__mcmp>
  42464c:	9905      	ldr	r1, [sp, #20]
  42464e:	9005      	str	r0, [sp, #20]
  424650:	4620      	mov	r0, r4
  424652:	f000 fc03 	bl	424e5c <_Bfree>
  424656:	9b02      	ldr	r3, [sp, #8]
  424658:	9a05      	ldr	r2, [sp, #20]
  42465a:	4313      	orrs	r3, r2
  42465c:	f040 822b 	bne.w	424ab6 <_dtoa_r+0xa86>
  424660:	9b08      	ldr	r3, [sp, #32]
  424662:	2b00      	cmp	r3, #0
  424664:	f000 82e8 	beq.w	424c38 <_dtoa_r+0xc08>
  424668:	f1b9 0f00 	cmp.w	r9, #0
  42466c:	f2c0 82e0 	blt.w	424c30 <_dtoa_r+0xc00>
  424670:	9b07      	ldr	r3, [sp, #28]
  424672:	46b1      	mov	r9, r6
  424674:	42b3      	cmp	r3, r6
  424676:	f809 8b01 	strb.w	r8, [r9], #1
  42467a:	f000 82c4 	beq.w	424c06 <_dtoa_r+0xbd6>
  42467e:	4629      	mov	r1, r5
  424680:	2300      	movs	r3, #0
  424682:	220a      	movs	r2, #10
  424684:	4620      	mov	r0, r4
  424686:	f000 fbf3 	bl	424e70 <__multadd>
  42468a:	4557      	cmp	r7, sl
  42468c:	4605      	mov	r5, r0
  42468e:	4639      	mov	r1, r7
  424690:	f04f 0300 	mov.w	r3, #0
  424694:	f04f 020a 	mov.w	r2, #10
  424698:	4620      	mov	r0, r4
  42469a:	f000 8206 	beq.w	424aaa <_dtoa_r+0xa7a>
  42469e:	f000 fbe7 	bl	424e70 <__multadd>
  4246a2:	4651      	mov	r1, sl
  4246a4:	4607      	mov	r7, r0
  4246a6:	2300      	movs	r3, #0
  4246a8:	220a      	movs	r2, #10
  4246aa:	4620      	mov	r0, r4
  4246ac:	f000 fbe0 	bl	424e70 <__multadd>
  4246b0:	464e      	mov	r6, r9
  4246b2:	4682      	mov	sl, r0
  4246b4:	e7b0      	b.n	424618 <_dtoa_r+0x5e8>
  4246b6:	4b34      	ldr	r3, [pc, #208]	@ (424788 <_dtoa_r+0x758>)
  4246b8:	f1b9 0f00 	cmp.w	r9, #0
  4246bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4246c0:	ed93 6b00 	vldr	d6, [r3]
  4246c4:	f280 81be 	bge.w	424a44 <_dtoa_r+0xa14>
  4246c8:	f1bb 0f00 	cmp.w	fp, #0
  4246cc:	f300 81ba 	bgt.w	424a44 <_dtoa_r+0xa14>
  4246d0:	f1bb 0f00 	cmp.w	fp, #0
  4246d4:	d109      	bne.n	4246ea <_dtoa_r+0x6ba>
  4246d6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
  4246da:	ee26 7b07 	vmul.f64	d7, d6, d7
  4246de:	eeb4 8bc7 	vcmpe.f64	d8, d7
  4246e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4246e6:	f200 823a 	bhi.w	424b5e <_dtoa_r+0xb2e>
  4246ea:	2300      	movs	r3, #0
  4246ec:	461f      	mov	r7, r3
  4246ee:	9303      	str	r3, [sp, #12]
  4246f0:	e757      	b.n	4245a2 <_dtoa_r+0x572>
  4246f2:	9903      	ldr	r1, [sp, #12]
  4246f4:	4628      	mov	r0, r5
  4246f6:	f000 fe0f 	bl	425318 <__mcmp>
  4246fa:	2800      	cmp	r0, #0
  4246fc:	f6bf af49 	bge.w	424592 <_dtoa_r+0x562>
  424700:	9b06      	ldr	r3, [sp, #24]
  424702:	4629      	mov	r1, r5
  424704:	220a      	movs	r2, #10
  424706:	4620      	mov	r0, r4
  424708:	3b01      	subs	r3, #1
  42470a:	9306      	str	r3, [sp, #24]
  42470c:	2300      	movs	r3, #0
  42470e:	f000 fbaf 	bl	424e70 <__multadd>
  424712:	9b07      	ldr	r3, [sp, #28]
  424714:	4605      	mov	r5, r0
  424716:	2b00      	cmp	r3, #0
  424718:	f040 829a 	bne.w	424c50 <_dtoa_r+0xc20>
  42471c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  42471e:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
  424722:	2b00      	cmp	r3, #0
  424724:	dc02      	bgt.n	42472c <_dtoa_r+0x6fc>
  424726:	2e00      	cmp	r6, #0
  424728:	f47f af37 	bne.w	42459a <_dtoa_r+0x56a>
  42472c:	46c1      	mov	r9, r8
  42472e:	2601      	movs	r6, #1
  424730:	f8dd a00c 	ldr.w	sl, [sp, #12]
  424734:	e007      	b.n	424746 <_dtoa_r+0x716>
  424736:	4629      	mov	r1, r5
  424738:	2300      	movs	r3, #0
  42473a:	220a      	movs	r2, #10
  42473c:	4620      	mov	r0, r4
  42473e:	f000 fb97 	bl	424e70 <__multadd>
  424742:	3601      	adds	r6, #1
  424744:	4605      	mov	r5, r0
  424746:	4651      	mov	r1, sl
  424748:	4628      	mov	r0, r5
  42474a:	f7ff fbd3 	bl	423ef4 <quorem>
  42474e:	455e      	cmp	r6, fp
  424750:	f100 0330 	add.w	r3, r0, #48	@ 0x30
  424754:	f809 3b01 	strb.w	r3, [r9], #1
  424758:	dbed      	blt.n	424736 <_dtoa_r+0x706>
  42475a:	f1bb 0f00 	cmp.w	fp, #0
  42475e:	f04f 0600 	mov.w	r6, #0
  424762:	bfcc      	ite	gt
  424764:	46d9      	movgt	r9, fp
  424766:	f04f 0901 	movle.w	r9, #1
  42476a:	44c1      	add	r9, r8
  42476c:	4629      	mov	r1, r5
  42476e:	2201      	movs	r2, #1
  424770:	4620      	mov	r0, r4
  424772:	9302      	str	r3, [sp, #8]
  424774:	f000 fd5c 	bl	425230 <__lshift>
  424778:	9903      	ldr	r1, [sp, #12]
  42477a:	4605      	mov	r5, r0
  42477c:	f000 fdcc 	bl	425318 <__mcmp>
  424780:	2800      	cmp	r0, #0
  424782:	dc08      	bgt.n	424796 <_dtoa_r+0x766>
  424784:	e1f3      	b.n	424b6e <_dtoa_r+0xb3e>
  424786:	bf00      	nop
  424788:	0043c688 	.word	0x0043c688
  42478c:	0043c660 	.word	0x0043c660
  424790:	45c1      	cmp	r9, r8
  424792:	f000 81fb 	beq.w	424b8c <_dtoa_r+0xb5c>
  424796:	f819 3c01 	ldrb.w	r3, [r9, #-1]
  42479a:	46cb      	mov	fp, r9
  42479c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
  4247a0:	2b39      	cmp	r3, #57	@ 0x39
  4247a2:	d0f5      	beq.n	424790 <_dtoa_r+0x760>
  4247a4:	3301      	adds	r3, #1
  4247a6:	f889 3000 	strb.w	r3, [r9]
  4247aa:	9b06      	ldr	r3, [sp, #24]
  4247ac:	9308      	str	r3, [sp, #32]
  4247ae:	9903      	ldr	r1, [sp, #12]
  4247b0:	4620      	mov	r0, r4
  4247b2:	f000 fb53 	bl	424e5c <_Bfree>
  4247b6:	2f00      	cmp	r7, #0
  4247b8:	f000 81d6 	beq.w	424b68 <_dtoa_r+0xb38>
  4247bc:	b12e      	cbz	r6, 4247ca <_dtoa_r+0x79a>
  4247be:	42be      	cmp	r6, r7
  4247c0:	d003      	beq.n	4247ca <_dtoa_r+0x79a>
  4247c2:	4631      	mov	r1, r6
  4247c4:	4620      	mov	r0, r4
  4247c6:	f000 fb49 	bl	424e5c <_Bfree>
  4247ca:	4646      	mov	r6, r8
  4247cc:	46d8      	mov	r8, fp
  4247ce:	e6f1      	b.n	4245b4 <_dtoa_r+0x584>
  4247d0:	4601      	mov	r1, r0
  4247d2:	4652      	mov	r2, sl
  4247d4:	4620      	mov	r0, r4
  4247d6:	f000 fcd1 	bl	42517c <__pow5mult>
  4247da:	9b02      	ldr	r3, [sp, #8]
  4247dc:	9003      	str	r0, [sp, #12]
  4247de:	2b01      	cmp	r3, #1
  4247e0:	f340 8105 	ble.w	4249ee <_dtoa_r+0x9be>
  4247e4:	f04f 0a00 	mov.w	sl, #0
  4247e8:	9a03      	ldr	r2, [sp, #12]
  4247ea:	6913      	ldr	r3, [r2, #16]
  4247ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4247f0:	6918      	ldr	r0, [r3, #16]
  4247f2:	f000 fb8f 	bl	424f14 <__hi0bits>
  4247f6:	f1c0 0320 	rsb	r3, r0, #32
  4247fa:	e69b      	b.n	424534 <_dtoa_r+0x504>
  4247fc:	eeb0 5b48 	vmov.f64	d5, d8
  424800:	2102      	movs	r1, #2
  424802:	e558      	b.n	4242b6 <_dtoa_r+0x286>
  424804:	9b00      	ldr	r3, [sp, #0]
  424806:	2b00      	cmp	r3, #0
  424808:	f47f ae93 	bne.w	424532 <_dtoa_r+0x502>
  42480c:	e9dd 1200 	ldrd	r1, r2, [sp]
  424810:	f3c2 0313 	ubfx	r3, r2, #0, #20
  424814:	2b00      	cmp	r3, #0
  424816:	f47f ae8c 	bne.w	424532 <_dtoa_r+0x502>
  42481a:	4bb9      	ldr	r3, [pc, #740]	@ (424b00 <_dtoa_r+0xad0>)
  42481c:	4013      	ands	r3, r2
  42481e:	b123      	cbz	r3, 42482a <_dtoa_r+0x7fa>
  424820:	9b05      	ldr	r3, [sp, #20]
  424822:	3601      	adds	r6, #1
  424824:	3301      	adds	r3, #1
  424826:	9305      	str	r3, [sp, #20]
  424828:	2301      	movs	r3, #1
  42482a:	f1ba 0f00 	cmp.w	sl, #0
  42482e:	f040 81f7 	bne.w	424c20 <_dtoa_r+0xbf0>
  424832:	469a      	mov	sl, r3
  424834:	e67d      	b.n	424532 <_dtoa_r+0x502>
  424836:	2301      	movs	r3, #1
  424838:	9307      	str	r3, [sp, #28]
  42483a:	9b06      	ldr	r3, [sp, #24]
  42483c:	444b      	add	r3, r9
  42483e:	f103 0b01 	add.w	fp, r3, #1
  424842:	930b      	str	r3, [sp, #44]	@ 0x2c
  424844:	f1bb 0f01 	cmp.w	fp, #1
  424848:	46dc      	mov	ip, fp
  42484a:	bfb8      	it	lt
  42484c:	f04f 0c01 	movlt.w	ip, #1
  424850:	f1bc 0f17 	cmp.w	ip, #23
  424854:	f340 8230 	ble.w	424cb8 <_dtoa_r+0xc88>
  424858:	2201      	movs	r2, #1
  42485a:	2304      	movs	r3, #4
  42485c:	005b      	lsls	r3, r3, #1
  42485e:	4611      	mov	r1, r2
  424860:	3201      	adds	r2, #1
  424862:	f103 0014 	add.w	r0, r3, #20
  424866:	4560      	cmp	r0, ip
  424868:	d9f8      	bls.n	42485c <_dtoa_r+0x82c>
  42486a:	63e1      	str	r1, [r4, #60]	@ 0x3c
  42486c:	e4fa      	b.n	424264 <_dtoa_r+0x234>
  42486e:	2301      	movs	r3, #1
  424870:	9307      	str	r3, [sp, #28]
  424872:	f1b9 0f00 	cmp.w	r9, #0
  424876:	f340 8136 	ble.w	424ae6 <_dtoa_r+0xab6>
  42487a:	46cb      	mov	fp, r9
  42487c:	46cc      	mov	ip, r9
  42487e:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
  424882:	e7e5      	b.n	424850 <_dtoa_r+0x820>
  424884:	2300      	movs	r3, #0
  424886:	9307      	str	r3, [sp, #28]
  424888:	e7d7      	b.n	42483a <_dtoa_r+0x80a>
  42488a:	2300      	movs	r3, #0
  42488c:	9307      	str	r3, [sp, #28]
  42488e:	e7f0      	b.n	424872 <_dtoa_r+0x842>
  424890:	2901      	cmp	r1, #1
  424892:	ee24 3b06 	vmul.f64	d3, d4, d6
  424896:	f000 81d9 	beq.w	424c4c <_dtoa_r+0xc1c>
  42489a:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
  42489e:	4441      	add	r1, r8
  4248a0:	4617      	mov	r7, r2
  4248a2:	ee27 7b04 	vmul.f64	d7, d7, d4
  4248a6:	eefd 6bc7 	vcvt.s32.f64	s13, d7
  4248aa:	ee16 3a90 	vmov	r3, s13
  4248ae:	eeb8 5be6 	vcvt.f64.s32	d5, s13
  4248b2:	3330      	adds	r3, #48	@ 0x30
  4248b4:	ee37 7b45 	vsub.f64	d7, d7, d5
  4248b8:	f807 3b01 	strb.w	r3, [r7], #1
  4248bc:	42b9      	cmp	r1, r7
  4248be:	d1f0      	bne.n	4248a2 <_dtoa_r+0x872>
  4248c0:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
  4248c4:	ee33 5b06 	vadd.f64	d5, d3, d6
  4248c8:	eeb4 5bc7 	vcmpe.f64	d5, d7
  4248cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4248d0:	d465      	bmi.n	42499e <_dtoa_r+0x96e>
  4248d2:	ee36 6b43 	vsub.f64	d6, d6, d3
  4248d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
  4248da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4248de:	dc69      	bgt.n	4249b4 <_dtoa_r+0x984>
  4248e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  4248e2:	2b00      	cmp	r3, #0
  4248e4:	f6ff adf5 	blt.w	4244d2 <_dtoa_r+0x4a2>
  4248e8:	9b06      	ldr	r3, [sp, #24]
  4248ea:	2b0e      	cmp	r3, #14
  4248ec:	f73f adf1 	bgt.w	4244d2 <_dtoa_r+0x4a2>
  4248f0:	9b06      	ldr	r3, [sp, #24]
  4248f2:	4646      	mov	r6, r8
  4248f4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
  4248f8:	ed90 6b00 	vldr	d6, [r0]
  4248fc:	ee88 7b06 	vdiv.f64	d7, d8, d6
  424900:	f1bb 0f01 	cmp.w	fp, #1
  424904:	eebd 7bc7 	vcvt.s32.f64	s14, d7
  424908:	ee17 3a10 	vmov	r3, s14
  42490c:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
  424910:	f103 0330 	add.w	r3, r3, #48	@ 0x30
  424914:	eea5 8b46 	vfms.f64	d8, d5, d6
  424918:	f888 3000 	strb.w	r3, [r8]
  42491c:	4690      	mov	r8, r2
  42491e:	f000 815b 	beq.w	424bd8 <_dtoa_r+0xba8>
  424922:	f1c2 0201 	rsb	r2, r2, #1
  424926:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
  42492a:	e011      	b.n	424950 <_dtoa_r+0x920>
  42492c:	ee88 7b06 	vdiv.f64	d7, d8, d6
  424930:	eebd 7bc7 	vcvt.s32.f64	s14, d7
  424934:	ee17 3a10 	vmov	r3, s14
  424938:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
  42493c:	3330      	adds	r3, #48	@ 0x30
  42493e:	eea5 8b46 	vfms.f64	d8, d5, d6
  424942:	f808 3b01 	strb.w	r3, [r8], #1
  424946:	eb08 0302 	add.w	r3, r8, r2
  42494a:	455b      	cmp	r3, fp
  42494c:	f000 8144 	beq.w	424bd8 <_dtoa_r+0xba8>
  424950:	ee28 8b04 	vmul.f64	d8, d8, d4
  424954:	eeb5 8b40 	vcmp.f64	d8, #0.0
  424958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  42495c:	d1e6      	bne.n	42492c <_dtoa_r+0x8fc>
  42495e:	9b06      	ldr	r3, [sp, #24]
  424960:	9308      	str	r3, [sp, #32]
  424962:	e62b      	b.n	4245bc <_dtoa_r+0x58c>
  424964:	f1c3 031c 	rsb	r3, r3, #28
  424968:	e5f2      	b.n	424550 <_dtoa_r+0x520>
  42496a:	465b      	mov	r3, fp
  42496c:	9903      	ldr	r1, [sp, #12]
  42496e:	2205      	movs	r2, #5
  424970:	4620      	mov	r0, r4
  424972:	f000 fa7d 	bl	424e70 <__multadd>
  424976:	4601      	mov	r1, r0
  424978:	9003      	str	r0, [sp, #12]
  42497a:	4628      	mov	r0, r5
  42497c:	f000 fccc 	bl	425318 <__mcmp>
  424980:	2800      	cmp	r0, #0
  424982:	f77f ae0e 	ble.w	4245a2 <_dtoa_r+0x572>
  424986:	4646      	mov	r6, r8
  424988:	9b06      	ldr	r3, [sp, #24]
  42498a:	f108 0801 	add.w	r8, r8, #1
  42498e:	3301      	adds	r3, #1
  424990:	9308      	str	r3, [sp, #32]
  424992:	2331      	movs	r3, #49	@ 0x31
  424994:	7033      	strb	r3, [r6, #0]
  424996:	e608      	b.n	4245aa <_dtoa_r+0x57a>
  424998:	4588      	cmp	r8, r1
  42499a:	f000 80fe 	beq.w	424b9a <_dtoa_r+0xb6a>
  42499e:	460a      	mov	r2, r1
  4249a0:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
  4249a4:	2b39      	cmp	r3, #57	@ 0x39
  4249a6:	d0f7      	beq.n	424998 <_dtoa_r+0x968>
  4249a8:	3301      	adds	r3, #1
  4249aa:	b2db      	uxtb	r3, r3
  4249ac:	4646      	mov	r6, r8
  4249ae:	700b      	strb	r3, [r1, #0]
  4249b0:	4690      	mov	r8, r2
  4249b2:	e603      	b.n	4245bc <_dtoa_r+0x58c>
  4249b4:	460a      	mov	r2, r1
  4249b6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
  4249ba:	2b30      	cmp	r3, #48	@ 0x30
  4249bc:	d0fa      	beq.n	4249b4 <_dtoa_r+0x984>
  4249be:	4646      	mov	r6, r8
  4249c0:	4690      	mov	r8, r2
  4249c2:	e5fb      	b.n	4245bc <_dtoa_r+0x58c>
  4249c4:	eeb0 7b48 	vmov.f64	d7, d8
  4249c8:	2102      	movs	r1, #2
  4249ca:	e483      	b.n	4242d4 <_dtoa_r+0x2a4>
  4249cc:	9a03      	ldr	r2, [sp, #12]
  4249ce:	445e      	add	r6, fp
  4249d0:	9303      	str	r3, [sp, #12]
  4249d2:	1a9a      	subs	r2, r3, r2
  4249d4:	9b05      	ldr	r3, [sp, #20]
  4249d6:	9308      	str	r3, [sp, #32]
  4249d8:	445b      	add	r3, fp
  4249da:	4492      	add	sl, r2
  4249dc:	9305      	str	r3, [sp, #20]
  4249de:	2300      	movs	r3, #0
  4249e0:	930a      	str	r3, [sp, #40]	@ 0x28
  4249e2:	2101      	movs	r1, #1
  4249e4:	4620      	mov	r0, r4
  4249e6:	f000 fae9 	bl	424fbc <__i2b>
  4249ea:	4607      	mov	r7, r0
  4249ec:	e577      	b.n	4244de <_dtoa_r+0x4ae>
  4249ee:	9b00      	ldr	r3, [sp, #0]
  4249f0:	2b00      	cmp	r3, #0
  4249f2:	f47f aef7 	bne.w	4247e4 <_dtoa_r+0x7b4>
  4249f6:	e9dd 0100 	ldrd	r0, r1, [sp]
  4249fa:	f3c1 0313 	ubfx	r3, r1, #0, #20
  4249fe:	460a      	mov	r2, r1
  424a00:	2b00      	cmp	r3, #0
  424a02:	f43f af0a 	beq.w	42481a <_dtoa_r+0x7ea>
  424a06:	e6ed      	b.n	4247e4 <_dtoa_r+0x7b4>
  424a08:	461a      	mov	r2, r3
  424a0a:	4639      	mov	r1, r7
  424a0c:	4620      	mov	r0, r4
  424a0e:	f000 fbb5 	bl	42517c <__pow5mult>
  424a12:	4607      	mov	r7, r0
  424a14:	462a      	mov	r2, r5
  424a16:	4620      	mov	r0, r4
  424a18:	4639      	mov	r1, r7
  424a1a:	f000 fafd 	bl	425018 <__multiply>
  424a1e:	4629      	mov	r1, r5
  424a20:	4605      	mov	r5, r0
  424a22:	4620      	mov	r0, r4
  424a24:	f000 fa1a 	bl	424e5c <_Bfree>
  424a28:	9b03      	ldr	r3, [sp, #12]
  424a2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  424a2c:	1a9b      	subs	r3, r3, r2
  424a2e:	9303      	str	r3, [sp, #12]
  424a30:	f43f ad72 	beq.w	424518 <_dtoa_r+0x4e8>
  424a34:	e56a      	b.n	42450c <_dtoa_r+0x4dc>
  424a36:	4639      	mov	r1, r7
  424a38:	461a      	mov	r2, r3
  424a3a:	4620      	mov	r0, r4
  424a3c:	f000 fbf8 	bl	425230 <__lshift>
  424a40:	4607      	mov	r7, r0
  424a42:	e5da      	b.n	4245fa <_dtoa_r+0x5ca>
  424a44:	f108 0201 	add.w	r2, r8, #1
  424a48:	4646      	mov	r6, r8
  424a4a:	e757      	b.n	4248fc <_dtoa_r+0x8cc>
  424a4c:	4620      	mov	r0, r4
  424a4e:	f8cd 8014 	str.w	r8, [sp, #20]
  424a52:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  424a56:	f000 fa01 	bl	424e5c <_Bfree>
  424a5a:	f1b9 0f00 	cmp.w	r9, #0
  424a5e:	9b05      	ldr	r3, [sp, #20]
  424a60:	db08      	blt.n	424a74 <_dtoa_r+0xa44>
  424a62:	9a00      	ldr	r2, [sp, #0]
  424a64:	9902      	ldr	r1, [sp, #8]
  424a66:	f002 0201 	and.w	r2, r2, #1
  424a6a:	ea41 0909 	orr.w	r9, r1, r9
  424a6e:	ea52 0209 	orrs.w	r2, r2, r9
  424a72:	d132      	bne.n	424ada <_dtoa_r+0xaaa>
  424a74:	4629      	mov	r1, r5
  424a76:	2201      	movs	r2, #1
  424a78:	4620      	mov	r0, r4
  424a7a:	9302      	str	r3, [sp, #8]
  424a7c:	f000 fbd8 	bl	425230 <__lshift>
  424a80:	9903      	ldr	r1, [sp, #12]
  424a82:	4605      	mov	r5, r0
  424a84:	f000 fc48 	bl	425318 <__mcmp>
  424a88:	2800      	cmp	r0, #0
  424a8a:	9b02      	ldr	r3, [sp, #8]
  424a8c:	f340 80f5 	ble.w	424c7a <_dtoa_r+0xc4a>
  424a90:	2b39      	cmp	r3, #57	@ 0x39
  424a92:	f000 80be 	beq.w	424c12 <_dtoa_r+0xbe2>
  424a96:	f10b 0331 	add.w	r3, fp, #49	@ 0x31
  424a9a:	46b3      	mov	fp, r6
  424a9c:	f80b 3b01 	strb.w	r3, [fp], #1
  424aa0:	463e      	mov	r6, r7
  424aa2:	9b06      	ldr	r3, [sp, #24]
  424aa4:	4657      	mov	r7, sl
  424aa6:	9308      	str	r3, [sp, #32]
  424aa8:	e681      	b.n	4247ae <_dtoa_r+0x77e>
  424aaa:	f000 f9e1 	bl	424e70 <__multadd>
  424aae:	464e      	mov	r6, r9
  424ab0:	4607      	mov	r7, r0
  424ab2:	4682      	mov	sl, r0
  424ab4:	e5b0      	b.n	424618 <_dtoa_r+0x5e8>
  424ab6:	f1b9 0f00 	cmp.w	r9, #0
  424aba:	f2c0 8101 	blt.w	424cc0 <_dtoa_r+0xc90>
  424abe:	9b02      	ldr	r3, [sp, #8]
  424ac0:	ea43 0909 	orr.w	r9, r3, r9
  424ac4:	9b08      	ldr	r3, [sp, #32]
  424ac6:	ea53 0909 	orrs.w	r9, r3, r9
  424aca:	f000 80f9 	beq.w	424cc0 <_dtoa_r+0xc90>
  424ace:	2a00      	cmp	r2, #0
  424ad0:	f77f adce 	ble.w	424670 <_dtoa_r+0x640>
  424ad4:	4643      	mov	r3, r8
  424ad6:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  424ada:	2b39      	cmp	r3, #57	@ 0x39
  424adc:	f000 8099 	beq.w	424c12 <_dtoa_r+0xbe2>
  424ae0:	46b3      	mov	fp, r6
  424ae2:	3301      	adds	r3, #1
  424ae4:	e7da      	b.n	424a9c <_dtoa_r+0xa6c>
  424ae6:	f04f 0901 	mov.w	r9, #1
  424aea:	46cb      	mov	fp, r9
  424aec:	f7ff bbb6 	b.w	42425c <_dtoa_r+0x22c>
  424af0:	f1c3 0301 	rsb	r3, r3, #1
  424af4:	2600      	movs	r6, #0
  424af6:	9305      	str	r3, [sp, #20]
  424af8:	9609      	str	r6, [sp, #36]	@ 0x24
  424afa:	f7ff bba0 	b.w	42423e <_dtoa_r+0x20e>
  424afe:	bf00      	nop
  424b00:	7ff00000 	.word	0x7ff00000
  424b04:	f1bb 0f00 	cmp.w	fp, #0
  424b08:	f43f ac69 	beq.w	4243de <_dtoa_r+0x3ae>
  424b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  424b0e:	2b00      	cmp	r3, #0
  424b10:	f77f ac87 	ble.w	424422 <_dtoa_r+0x3f2>
  424b14:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
  424b18:	3101      	adds	r1, #1
  424b1a:	9a06      	ldr	r2, [sp, #24]
  424b1c:	ee06 1a90 	vmov	s13, r1
  424b20:	4619      	mov	r1, r3
  424b22:	ee27 7b04 	vmul.f64	d7, d7, d4
  424b26:	3a01      	subs	r2, #1
  424b28:	9208      	str	r2, [sp, #32]
  424b2a:	eeb8 5be6 	vcvt.f64.s32	d5, s13
  424b2e:	eeb1 6b0c 	vmov.f64	d6, #28	@ 0x40e00000  7.0
  424b32:	eea7 6b05 	vfma.f64	d6, d7, d5
  424b36:	ee16 0a90 	vmov	r0, s13
  424b3a:	ec53 2b16 	vmov	r2, r3, d6
  424b3e:	f1a0 7350 	sub.w	r3, r0, #54525952	@ 0x3400000
  424b42:	f7ff bbe5 	b.w	424310 <_dtoa_r+0x2e0>
  424b46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  424b48:	b362      	cbz	r2, 424ba4 <_dtoa_r+0xb74>
  424b4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
  424b4e:	9a05      	ldr	r2, [sp, #20]
  424b50:	441e      	add	r6, r3
  424b52:	18d3      	adds	r3, r2, r3
  424b54:	9208      	str	r2, [sp, #32]
  424b56:	9305      	str	r3, [sp, #20]
  424b58:	9b03      	ldr	r3, [sp, #12]
  424b5a:	930a      	str	r3, [sp, #40]	@ 0x28
  424b5c:	e741      	b.n	4249e2 <_dtoa_r+0x9b2>
  424b5e:	2300      	movs	r3, #0
  424b60:	4646      	mov	r6, r8
  424b62:	461f      	mov	r7, r3
  424b64:	9303      	str	r3, [sp, #12]
  424b66:	e70f      	b.n	424988 <_dtoa_r+0x958>
  424b68:	4646      	mov	r6, r8
  424b6a:	46d8      	mov	r8, fp
  424b6c:	e526      	b.n	4245bc <_dtoa_r+0x58c>
  424b6e:	d103      	bne.n	424b78 <_dtoa_r+0xb48>
  424b70:	9b02      	ldr	r3, [sp, #8]
  424b72:	07db      	lsls	r3, r3, #31
  424b74:	f53f ae0f 	bmi.w	424796 <_dtoa_r+0x766>
  424b78:	f819 3c01 	ldrb.w	r3, [r9, #-1]
  424b7c:	46cb      	mov	fp, r9
  424b7e:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
  424b82:	2b30      	cmp	r3, #48	@ 0x30
  424b84:	d0f8      	beq.n	424b78 <_dtoa_r+0xb48>
  424b86:	9b06      	ldr	r3, [sp, #24]
  424b88:	9308      	str	r3, [sp, #32]
  424b8a:	e610      	b.n	4247ae <_dtoa_r+0x77e>
  424b8c:	9b06      	ldr	r3, [sp, #24]
  424b8e:	3301      	adds	r3, #1
  424b90:	9308      	str	r3, [sp, #32]
  424b92:	2331      	movs	r3, #49	@ 0x31
  424b94:	f888 3000 	strb.w	r3, [r8]
  424b98:	e609      	b.n	4247ae <_dtoa_r+0x77e>
  424b9a:	9b08      	ldr	r3, [sp, #32]
  424b9c:	3301      	adds	r3, #1
  424b9e:	9308      	str	r3, [sp, #32]
  424ba0:	2331      	movs	r3, #49	@ 0x31
  424ba2:	e703      	b.n	4249ac <_dtoa_r+0x97c>
  424ba4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  424ba6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
  424baa:	e7d0      	b.n	424b4e <_dtoa_r+0xb1e>
  424bac:	6879      	ldr	r1, [r7, #4]
  424bae:	4620      	mov	r0, r4
  424bb0:	f000 f92e 	bl	424e10 <_Balloc>
  424bb4:	4606      	mov	r6, r0
  424bb6:	2800      	cmp	r0, #0
  424bb8:	d077      	beq.n	424caa <_dtoa_r+0xc7a>
  424bba:	693b      	ldr	r3, [r7, #16]
  424bbc:	f107 010c 	add.w	r1, r7, #12
  424bc0:	300c      	adds	r0, #12
  424bc2:	3302      	adds	r3, #2
  424bc4:	009a      	lsls	r2, r3, #2
  424bc6:	f7eb fcf9 	bl	4105bc <memcpy>
  424bca:	4631      	mov	r1, r6
  424bcc:	2201      	movs	r2, #1
  424bce:	4620      	mov	r0, r4
  424bd0:	f000 fb2e 	bl	425230 <__lshift>
  424bd4:	4682      	mov	sl, r0
  424bd6:	e515      	b.n	424604 <_dtoa_r+0x5d4>
  424bd8:	ee38 8b08 	vadd.f64	d8, d8, d8
  424bdc:	eeb4 8bc6 	vcmpe.f64	d8, d6
  424be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  424be4:	dc0a      	bgt.n	424bfc <_dtoa_r+0xbcc>
  424be6:	eeb4 8b46 	vcmp.f64	d8, d6
  424bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  424bee:	f47f aeb6 	bne.w	42495e <_dtoa_r+0x92e>
  424bf2:	ee17 3a10 	vmov	r3, s14
  424bf6:	07d9      	lsls	r1, r3, #31
  424bf8:	f57f aeb1 	bpl.w	42495e <_dtoa_r+0x92e>
  424bfc:	9b06      	ldr	r3, [sp, #24]
  424bfe:	4641      	mov	r1, r8
  424c00:	46b0      	mov	r8, r6
  424c02:	9308      	str	r3, [sp, #32]
  424c04:	e6cb      	b.n	42499e <_dtoa_r+0x96e>
  424c06:	4643      	mov	r3, r8
  424c08:	463e      	mov	r6, r7
  424c0a:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  424c0e:	4657      	mov	r7, sl
  424c10:	e5ac      	b.n	42476c <_dtoa_r+0x73c>
  424c12:	46b1      	mov	r9, r6
  424c14:	2339      	movs	r3, #57	@ 0x39
  424c16:	463e      	mov	r6, r7
  424c18:	4657      	mov	r7, sl
  424c1a:	f809 3b01 	strb.w	r3, [r9], #1
  424c1e:	e5ba      	b.n	424796 <_dtoa_r+0x766>
  424c20:	469a      	mov	sl, r3
  424c22:	e5e1      	b.n	4247e8 <_dtoa_r+0x7b8>
  424c24:	9b05      	ldr	r3, [sp, #20]
  424c26:	445e      	add	r6, fp
  424c28:	9308      	str	r3, [sp, #32]
  424c2a:	445b      	add	r3, fp
  424c2c:	9305      	str	r3, [sp, #20]
  424c2e:	e6d8      	b.n	4249e2 <_dtoa_r+0x9b2>
  424c30:	4643      	mov	r3, r8
  424c32:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  424c36:	e730      	b.n	424a9a <_dtoa_r+0xa6a>
  424c38:	4643      	mov	r3, r8
  424c3a:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  424c3e:	2b39      	cmp	r3, #57	@ 0x39
  424c40:	d0e7      	beq.n	424c12 <_dtoa_r+0xbe2>
  424c42:	f1b9 0f00 	cmp.w	r9, #0
  424c46:	f73f af26 	bgt.w	424a96 <_dtoa_r+0xa66>
  424c4a:	e726      	b.n	424a9a <_dtoa_r+0xa6a>
  424c4c:	4611      	mov	r1, r2
  424c4e:	e637      	b.n	4248c0 <_dtoa_r+0x890>
  424c50:	4639      	mov	r1, r7
  424c52:	2300      	movs	r3, #0
  424c54:	220a      	movs	r2, #10
  424c56:	4620      	mov	r0, r4
  424c58:	f000 f90a 	bl	424e70 <__multadd>
  424c5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  424c5e:	4607      	mov	r7, r0
  424c60:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
  424c64:	2b00      	cmp	r3, #0
  424c66:	f73f acc4 	bgt.w	4245f2 <_dtoa_r+0x5c2>
  424c6a:	2e00      	cmp	r6, #0
  424c6c:	f43f acc1 	beq.w	4245f2 <_dtoa_r+0x5c2>
  424c70:	f1bb 0f00 	cmp.w	fp, #0
  424c74:	f47f ac95 	bne.w	4245a2 <_dtoa_r+0x572>
  424c78:	e677      	b.n	42496a <_dtoa_r+0x93a>
  424c7a:	f47f af0e 	bne.w	424a9a <_dtoa_r+0xa6a>
  424c7e:	07da      	lsls	r2, r3, #31
  424c80:	f57f af0b 	bpl.w	424a9a <_dtoa_r+0xa6a>
  424c84:	e704      	b.n	424a90 <_dtoa_r+0xa60>
  424c86:	2102      	movs	r1, #2
  424c88:	f7ff bb24 	b.w	4242d4 <_dtoa_r+0x2a4>
  424c8c:	2700      	movs	r7, #0
  424c8e:	4620      	mov	r0, r4
  424c90:	4639      	mov	r1, r7
  424c92:	63e7      	str	r7, [r4, #60]	@ 0x3c
  424c94:	f000 f8bc 	bl	424e10 <_Balloc>
  424c98:	4680      	mov	r8, r0
  424c9a:	b9c0      	cbnz	r0, 424cce <_dtoa_r+0xc9e>
  424c9c:	4b11      	ldr	r3, [pc, #68]	@ (424ce4 <_dtoa_r+0xcb4>)
  424c9e:	2200      	movs	r2, #0
  424ca0:	f240 11af 	movw	r1, #431	@ 0x1af
  424ca4:	4810      	ldr	r0, [pc, #64]	@ (424ce8 <_dtoa_r+0xcb8>)
  424ca6:	f7fa fa7f 	bl	41f1a8 <__assert_func>
  424caa:	4602      	mov	r2, r0
  424cac:	4b0d      	ldr	r3, [pc, #52]	@ (424ce4 <_dtoa_r+0xcb4>)
  424cae:	f240 21ef 	movw	r1, #751	@ 0x2ef
  424cb2:	480d      	ldr	r0, [pc, #52]	@ (424ce8 <_dtoa_r+0xcb8>)
  424cb4:	f7fa fa78 	bl	41f1a8 <__assert_func>
  424cb8:	2100      	movs	r1, #0
  424cba:	63e1      	str	r1, [r4, #60]	@ 0x3c
  424cbc:	f7ff bad2 	b.w	424264 <_dtoa_r+0x234>
  424cc0:	2a00      	cmp	r2, #0
  424cc2:	4643      	mov	r3, r8
  424cc4:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
  424cc8:	f73f aed4 	bgt.w	424a74 <_dtoa_r+0xa44>
  424ccc:	e6e5      	b.n	424a9a <_dtoa_r+0xa6a>
  424cce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  424cd2:	2201      	movs	r2, #1
  424cd4:	46b9      	mov	r9, r7
  424cd6:	63a0      	str	r0, [r4, #56]	@ 0x38
  424cd8:	469b      	mov	fp, r3
  424cda:	930b      	str	r3, [sp, #44]	@ 0x2c
  424cdc:	9207      	str	r2, [sp, #28]
  424cde:	f7ff bba0 	b.w	424422 <_dtoa_r+0x3f2>
  424ce2:	bf00      	nop
  424ce4:	00434e04 	.word	0x00434e04
  424ce8:	00434e18 	.word	0x00434e18

00424cec <__env_lock>:
  424cec:	4801      	ldr	r0, [pc, #4]	@ (424cf4 <__env_lock+0x8>)
  424cee:	f7fc b91d 	b.w	420f2c <__retarget_lock_acquire_recursive>
  424cf2:	bf00      	nop
  424cf4:	2004e20c 	.word	0x2004e20c

00424cf8 <__env_unlock>:
  424cf8:	4801      	ldr	r0, [pc, #4]	@ (424d00 <__env_unlock+0x8>)
  424cfa:	f7fc b919 	b.w	420f30 <__retarget_lock_release_recursive>
  424cfe:	bf00      	nop
  424d00:	2004e20c 	.word	0x2004e20c

00424d04 <__ssprint_r>:
  424d04:	6893      	ldr	r3, [r2, #8]
  424d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  424d0a:	4692      	mov	sl, r2
  424d0c:	b083      	sub	sp, #12
  424d0e:	6817      	ldr	r7, [r2, #0]
  424d10:	2b00      	cmp	r3, #0
  424d12:	d075      	beq.n	424e00 <__ssprint_r+0xfc>
  424d14:	f04f 0b00 	mov.w	fp, #0
  424d18:	4681      	mov	r9, r0
  424d1a:	460c      	mov	r4, r1
  424d1c:	688b      	ldr	r3, [r1, #8]
  424d1e:	680a      	ldr	r2, [r1, #0]
  424d20:	465d      	mov	r5, fp
  424d22:	e047      	b.n	424db4 <__ssprint_r+0xb0>
  424d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424d28:	f413 6f90 	tst.w	r3, #1152	@ 0x480
  424d2c:	d02e      	beq.n	424d8c <__ssprint_r+0x88>
  424d2e:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
  424d32:	eb16 0646 	adds.w	r6, r6, r6, lsl #1
  424d36:	eba2 0801 	sub.w	r8, r2, r1
  424d3a:	bf48      	it	mi
  424d3c:	3601      	addmi	r6, #1
  424d3e:	f108 0001 	add.w	r0, r8, #1
  424d42:	1076      	asrs	r6, r6, #1
  424d44:	4428      	add	r0, r5
  424d46:	42b0      	cmp	r0, r6
  424d48:	4632      	mov	r2, r6
  424d4a:	d901      	bls.n	424d50 <__ssprint_r+0x4c>
  424d4c:	4606      	mov	r6, r0
  424d4e:	4602      	mov	r2, r0
  424d50:	055b      	lsls	r3, r3, #21
  424d52:	d539      	bpl.n	424dc8 <__ssprint_r+0xc4>
  424d54:	4611      	mov	r1, r2
  424d56:	4648      	mov	r0, r9
  424d58:	f7fc fb7c 	bl	421454 <_malloc_r>
  424d5c:	9001      	str	r0, [sp, #4]
  424d5e:	2800      	cmp	r0, #0
  424d60:	d03c      	beq.n	424ddc <__ssprint_r+0xd8>
  424d62:	4642      	mov	r2, r8
  424d64:	6921      	ldr	r1, [r4, #16]
  424d66:	f7eb fc29 	bl	4105bc <memcpy>
  424d6a:	89a2      	ldrh	r2, [r4, #12]
  424d6c:	9b01      	ldr	r3, [sp, #4]
  424d6e:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
  424d72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
  424d76:	81a2      	strh	r2, [r4, #12]
  424d78:	eba6 0208 	sub.w	r2, r6, r8
  424d7c:	eb03 0008 	add.w	r0, r3, r8
  424d80:	6166      	str	r6, [r4, #20]
  424d82:	46a8      	mov	r8, r5
  424d84:	462e      	mov	r6, r5
  424d86:	60a2      	str	r2, [r4, #8]
  424d88:	6123      	str	r3, [r4, #16]
  424d8a:	6020      	str	r0, [r4, #0]
  424d8c:	4632      	mov	r2, r6
  424d8e:	4659      	mov	r1, fp
  424d90:	f7fb ff08 	bl	420ba4 <memmove>
  424d94:	f8da 1008 	ldr.w	r1, [sl, #8]
  424d98:	68a3      	ldr	r3, [r4, #8]
  424d9a:	6822      	ldr	r2, [r4, #0]
  424d9c:	1b49      	subs	r1, r1, r5
  424d9e:	eba3 0308 	sub.w	r3, r3, r8
  424da2:	4432      	add	r2, r6
  424da4:	60a3      	str	r3, [r4, #8]
  424da6:	6022      	str	r2, [r4, #0]
  424da8:	f8ca 1008 	str.w	r1, [sl, #8]
  424dac:	b341      	cbz	r1, 424e00 <__ssprint_r+0xfc>
  424dae:	e9d7 b500 	ldrd	fp, r5, [r7]
  424db2:	3708      	adds	r7, #8
  424db4:	4698      	mov	r8, r3
  424db6:	4610      	mov	r0, r2
  424db8:	2d00      	cmp	r5, #0
  424dba:	d0f8      	beq.n	424dae <__ssprint_r+0xaa>
  424dbc:	429d      	cmp	r5, r3
  424dbe:	461e      	mov	r6, r3
  424dc0:	d2b0      	bcs.n	424d24 <__ssprint_r+0x20>
  424dc2:	46a8      	mov	r8, r5
  424dc4:	462e      	mov	r6, r5
  424dc6:	e7e1      	b.n	424d8c <__ssprint_r+0x88>
  424dc8:	4648      	mov	r0, r9
  424dca:	f7fe fc85 	bl	4236d8 <_realloc_r>
  424dce:	4603      	mov	r3, r0
  424dd0:	2800      	cmp	r0, #0
  424dd2:	d1d1      	bne.n	424d78 <__ssprint_r+0x74>
  424dd4:	6921      	ldr	r1, [r4, #16]
  424dd6:	4648      	mov	r0, r9
  424dd8:	f7fc fa00 	bl	4211dc <_free_r>
  424ddc:	89a3      	ldrh	r3, [r4, #12]
  424dde:	220c      	movs	r2, #12
  424de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  424de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
  424de8:	f8c9 2000 	str.w	r2, [r9]
  424dec:	2200      	movs	r2, #0
  424dee:	81a3      	strh	r3, [r4, #12]
  424df0:	2300      	movs	r3, #0
  424df2:	f8ca 2008 	str.w	r2, [sl, #8]
  424df6:	f8ca 3004 	str.w	r3, [sl, #4]
  424dfa:	b003      	add	sp, #12
  424dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424e00:	2000      	movs	r0, #0
  424e02:	2300      	movs	r3, #0
  424e04:	f8ca 3004 	str.w	r3, [sl, #4]
  424e08:	b003      	add	sp, #12
  424e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424e0e:	bf00      	nop

00424e10 <_Balloc>:
  424e10:	b538      	push	{r3, r4, r5, lr}
  424e12:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  424e14:	4605      	mov	r5, r0
  424e16:	460c      	mov	r4, r1
  424e18:	b14b      	cbz	r3, 424e2e <_Balloc+0x1e>
  424e1a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  424e1e:	b180      	cbz	r0, 424e42 <_Balloc+0x32>
  424e20:	6802      	ldr	r2, [r0, #0]
  424e22:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  424e26:	2300      	movs	r3, #0
  424e28:	e9c0 3303 	strd	r3, r3, [r0, #12]
  424e2c:	bd38      	pop	{r3, r4, r5, pc}
  424e2e:	2221      	movs	r2, #33	@ 0x21
  424e30:	2104      	movs	r1, #4
  424e32:	f000 fbb3 	bl	42559c <_calloc_r>
  424e36:	4603      	mov	r3, r0
  424e38:	6468      	str	r0, [r5, #68]	@ 0x44
  424e3a:	2800      	cmp	r0, #0
  424e3c:	d1ed      	bne.n	424e1a <_Balloc+0xa>
  424e3e:	2000      	movs	r0, #0
  424e40:	bd38      	pop	{r3, r4, r5, pc}
  424e42:	2101      	movs	r1, #1
  424e44:	4628      	mov	r0, r5
  424e46:	fa01 f504 	lsl.w	r5, r1, r4
  424e4a:	1d6a      	adds	r2, r5, #5
  424e4c:	0092      	lsls	r2, r2, #2
  424e4e:	f000 fba5 	bl	42559c <_calloc_r>
  424e52:	2800      	cmp	r0, #0
  424e54:	d0f3      	beq.n	424e3e <_Balloc+0x2e>
  424e56:	e9c0 4501 	strd	r4, r5, [r0, #4]
  424e5a:	e7e4      	b.n	424e26 <_Balloc+0x16>

00424e5c <_Bfree>:
  424e5c:	b131      	cbz	r1, 424e6c <_Bfree+0x10>
  424e5e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  424e60:	684a      	ldr	r2, [r1, #4]
  424e62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  424e66:	6008      	str	r0, [r1, #0]
  424e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  424e6c:	4770      	bx	lr
  424e6e:	bf00      	nop

00424e70 <__multadd>:
  424e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424e74:	4607      	mov	r7, r0
  424e76:	460e      	mov	r6, r1
  424e78:	461c      	mov	r4, r3
  424e7a:	690d      	ldr	r5, [r1, #16]
  424e7c:	f101 0e14 	add.w	lr, r1, #20
  424e80:	2000      	movs	r0, #0
  424e82:	f8de 1000 	ldr.w	r1, [lr]
  424e86:	3001      	adds	r0, #1
  424e88:	b28b      	uxth	r3, r1
  424e8a:	4285      	cmp	r5, r0
  424e8c:	ea4f 4111 	mov.w	r1, r1, lsr #16
  424e90:	fb02 4303 	mla	r3, r2, r3, r4
  424e94:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  424e98:	b29b      	uxth	r3, r3
  424e9a:	fb02 cc01 	mla	ip, r2, r1, ip
  424e9e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
  424ea2:	ea4f 441c 	mov.w	r4, ip, lsr #16
  424ea6:	f84e 3b04 	str.w	r3, [lr], #4
  424eaa:	dcea      	bgt.n	424e82 <__multadd+0x12>
  424eac:	b13c      	cbz	r4, 424ebe <__multadd+0x4e>
  424eae:	68b3      	ldr	r3, [r6, #8]
  424eb0:	42ab      	cmp	r3, r5
  424eb2:	dd07      	ble.n	424ec4 <__multadd+0x54>
  424eb4:	eb06 0385 	add.w	r3, r6, r5, lsl #2
  424eb8:	3501      	adds	r5, #1
  424eba:	615c      	str	r4, [r3, #20]
  424ebc:	6135      	str	r5, [r6, #16]
  424ebe:	4630      	mov	r0, r6
  424ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  424ec4:	6871      	ldr	r1, [r6, #4]
  424ec6:	4638      	mov	r0, r7
  424ec8:	3101      	adds	r1, #1
  424eca:	f7ff ffa1 	bl	424e10 <_Balloc>
  424ece:	4680      	mov	r8, r0
  424ed0:	b1a8      	cbz	r0, 424efe <__multadd+0x8e>
  424ed2:	6932      	ldr	r2, [r6, #16]
  424ed4:	f106 010c 	add.w	r1, r6, #12
  424ed8:	300c      	adds	r0, #12
  424eda:	3202      	adds	r2, #2
  424edc:	0092      	lsls	r2, r2, #2
  424ede:	f7eb fb6d 	bl	4105bc <memcpy>
  424ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
  424ee4:	6872      	ldr	r2, [r6, #4]
  424ee6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  424eea:	6031      	str	r1, [r6, #0]
  424eec:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  424ef0:	4646      	mov	r6, r8
  424ef2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
  424ef6:	3501      	adds	r5, #1
  424ef8:	615c      	str	r4, [r3, #20]
  424efa:	6135      	str	r5, [r6, #16]
  424efc:	e7df      	b.n	424ebe <__multadd+0x4e>
  424efe:	4602      	mov	r2, r0
  424f00:	4b02      	ldr	r3, [pc, #8]	@ (424f0c <__multadd+0x9c>)
  424f02:	21ba      	movs	r1, #186	@ 0xba
  424f04:	4802      	ldr	r0, [pc, #8]	@ (424f10 <__multadd+0xa0>)
  424f06:	f7fa f94f 	bl	41f1a8 <__assert_func>
  424f0a:	bf00      	nop
  424f0c:	00434e04 	.word	0x00434e04
  424f10:	00434e7c 	.word	0x00434e7c

00424f14 <__hi0bits>:
  424f14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
  424f18:	4603      	mov	r3, r0
  424f1a:	d218      	bcs.n	424f4e <__hi0bits+0x3a>
  424f1c:	0403      	lsls	r3, r0, #16
  424f1e:	2010      	movs	r0, #16
  424f20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  424f24:	d201      	bcs.n	424f2a <__hi0bits+0x16>
  424f26:	3008      	adds	r0, #8
  424f28:	021b      	lsls	r3, r3, #8
  424f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
  424f2e:	d201      	bcs.n	424f34 <__hi0bits+0x20>
  424f30:	3004      	adds	r0, #4
  424f32:	011b      	lsls	r3, r3, #4
  424f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
  424f38:	d303      	bcc.n	424f42 <__hi0bits+0x2e>
  424f3a:	2b00      	cmp	r3, #0
  424f3c:	db06      	blt.n	424f4c <__hi0bits+0x38>
  424f3e:	3001      	adds	r0, #1
  424f40:	4770      	bx	lr
  424f42:	009b      	lsls	r3, r3, #2
  424f44:	d405      	bmi.n	424f52 <__hi0bits+0x3e>
  424f46:	005b      	lsls	r3, r3, #1
  424f48:	d405      	bmi.n	424f56 <__hi0bits+0x42>
  424f4a:	2020      	movs	r0, #32
  424f4c:	4770      	bx	lr
  424f4e:	2000      	movs	r0, #0
  424f50:	e7e6      	b.n	424f20 <__hi0bits+0xc>
  424f52:	3002      	adds	r0, #2
  424f54:	4770      	bx	lr
  424f56:	3003      	adds	r0, #3
  424f58:	4770      	bx	lr
  424f5a:	bf00      	nop

00424f5c <__lo0bits>:
  424f5c:	6803      	ldr	r3, [r0, #0]
  424f5e:	4601      	mov	r1, r0
  424f60:	f013 0207 	ands.w	r2, r3, #7
  424f64:	d007      	beq.n	424f76 <__lo0bits+0x1a>
  424f66:	07da      	lsls	r2, r3, #31
  424f68:	d41f      	bmi.n	424faa <__lo0bits+0x4e>
  424f6a:	0798      	lsls	r0, r3, #30
  424f6c:	d521      	bpl.n	424fb2 <__lo0bits+0x56>
  424f6e:	085b      	lsrs	r3, r3, #1
  424f70:	2001      	movs	r0, #1
  424f72:	600b      	str	r3, [r1, #0]
  424f74:	4770      	bx	lr
  424f76:	b298      	uxth	r0, r3
  424f78:	b1a0      	cbz	r0, 424fa4 <__lo0bits+0x48>
  424f7a:	4610      	mov	r0, r2
  424f7c:	b2da      	uxtb	r2, r3
  424f7e:	b90a      	cbnz	r2, 424f84 <__lo0bits+0x28>
  424f80:	3008      	adds	r0, #8
  424f82:	0a1b      	lsrs	r3, r3, #8
  424f84:	071a      	lsls	r2, r3, #28
  424f86:	d101      	bne.n	424f8c <__lo0bits+0x30>
  424f88:	3004      	adds	r0, #4
  424f8a:	091b      	lsrs	r3, r3, #4
  424f8c:	079a      	lsls	r2, r3, #30
  424f8e:	d101      	bne.n	424f94 <__lo0bits+0x38>
  424f90:	3002      	adds	r0, #2
  424f92:	089b      	lsrs	r3, r3, #2
  424f94:	07da      	lsls	r2, r3, #31
  424f96:	d403      	bmi.n	424fa0 <__lo0bits+0x44>
  424f98:	085b      	lsrs	r3, r3, #1
  424f9a:	f100 0001 	add.w	r0, r0, #1
  424f9e:	d006      	beq.n	424fae <__lo0bits+0x52>
  424fa0:	600b      	str	r3, [r1, #0]
  424fa2:	4770      	bx	lr
  424fa4:	0c1b      	lsrs	r3, r3, #16
  424fa6:	2010      	movs	r0, #16
  424fa8:	e7e8      	b.n	424f7c <__lo0bits+0x20>
  424faa:	2000      	movs	r0, #0
  424fac:	4770      	bx	lr
  424fae:	2020      	movs	r0, #32
  424fb0:	4770      	bx	lr
  424fb2:	089b      	lsrs	r3, r3, #2
  424fb4:	2002      	movs	r0, #2
  424fb6:	600b      	str	r3, [r1, #0]
  424fb8:	4770      	bx	lr
  424fba:	bf00      	nop

00424fbc <__i2b>:
  424fbc:	b538      	push	{r3, r4, r5, lr}
  424fbe:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  424fc0:	4604      	mov	r4, r0
  424fc2:	460d      	mov	r5, r1
  424fc4:	b14b      	cbz	r3, 424fda <__i2b+0x1e>
  424fc6:	6858      	ldr	r0, [r3, #4]
  424fc8:	b1b0      	cbz	r0, 424ff8 <__i2b+0x3c>
  424fca:	6802      	ldr	r2, [r0, #0]
  424fcc:	605a      	str	r2, [r3, #4]
  424fce:	2200      	movs	r2, #0
  424fd0:	2301      	movs	r3, #1
  424fd2:	6145      	str	r5, [r0, #20]
  424fd4:	e9c0 2303 	strd	r2, r3, [r0, #12]
  424fd8:	bd38      	pop	{r3, r4, r5, pc}
  424fda:	2221      	movs	r2, #33	@ 0x21
  424fdc:	2104      	movs	r1, #4
  424fde:	f000 fadd 	bl	42559c <_calloc_r>
  424fe2:	4603      	mov	r3, r0
  424fe4:	6460      	str	r0, [r4, #68]	@ 0x44
  424fe6:	2800      	cmp	r0, #0
  424fe8:	d1ed      	bne.n	424fc6 <__i2b+0xa>
  424fea:	4b09      	ldr	r3, [pc, #36]	@ (425010 <__i2b+0x54>)
  424fec:	2200      	movs	r2, #0
  424fee:	f240 1145 	movw	r1, #325	@ 0x145
  424ff2:	4808      	ldr	r0, [pc, #32]	@ (425014 <__i2b+0x58>)
  424ff4:	f7fa f8d8 	bl	41f1a8 <__assert_func>
  424ff8:	221c      	movs	r2, #28
  424ffa:	2101      	movs	r1, #1
  424ffc:	4620      	mov	r0, r4
  424ffe:	f000 facd 	bl	42559c <_calloc_r>
  425002:	2800      	cmp	r0, #0
  425004:	d0f1      	beq.n	424fea <__i2b+0x2e>
  425006:	2201      	movs	r2, #1
  425008:	2302      	movs	r3, #2
  42500a:	e9c0 2301 	strd	r2, r3, [r0, #4]
  42500e:	e7de      	b.n	424fce <__i2b+0x12>
  425010:	00434e04 	.word	0x00434e04
  425014:	00434e7c 	.word	0x00434e7c

00425018 <__multiply>:
  425018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42501c:	f8d1 8010 	ldr.w	r8, [r1, #16]
  425020:	b085      	sub	sp, #20
  425022:	6915      	ldr	r5, [r2, #16]
  425024:	460e      	mov	r6, r1
  425026:	4692      	mov	sl, r2
  425028:	45a8      	cmp	r8, r5
  42502a:	db05      	blt.n	425038 <__multiply+0x20>
  42502c:	462a      	mov	r2, r5
  42502e:	4653      	mov	r3, sl
  425030:	4645      	mov	r5, r8
  425032:	468a      	mov	sl, r1
  425034:	4690      	mov	r8, r2
  425036:	461e      	mov	r6, r3
  425038:	eb05 0408 	add.w	r4, r5, r8
  42503c:	e9da 1301 	ldrd	r1, r3, [sl, #4]
  425040:	42a3      	cmp	r3, r4
  425042:	bfb8      	it	lt
  425044:	3101      	addlt	r1, #1
  425046:	f7ff fee3 	bl	424e10 <_Balloc>
  42504a:	2800      	cmp	r0, #0
  42504c:	f000 808b 	beq.w	425166 <__multiply+0x14e>
  425050:	f100 0714 	add.w	r7, r0, #20
  425054:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
  425058:	4577      	cmp	r7, lr
  42505a:	d205      	bcs.n	425068 <__multiply+0x50>
  42505c:	463b      	mov	r3, r7
  42505e:	2200      	movs	r2, #0
  425060:	f843 2b04 	str.w	r2, [r3], #4
  425064:	459e      	cmp	lr, r3
  425066:	d8fb      	bhi.n	425060 <__multiply+0x48>
  425068:	3614      	adds	r6, #20
  42506a:	f10a 0914 	add.w	r9, sl, #20
  42506e:	eb06 0888 	add.w	r8, r6, r8, lsl #2
  425072:	eb09 0585 	add.w	r5, r9, r5, lsl #2
  425076:	4546      	cmp	r6, r8
  425078:	d268      	bcs.n	42514c <__multiply+0x134>
  42507a:	eba5 030a 	sub.w	r3, r5, sl
  42507e:	f10a 0a15 	add.w	sl, sl, #21
  425082:	f8cd e008 	str.w	lr, [sp, #8]
  425086:	46ae      	mov	lr, r5
  425088:	3b15      	subs	r3, #21
  42508a:	9403      	str	r4, [sp, #12]
  42508c:	f023 0303 	bic.w	r3, r3, #3
  425090:	3304      	adds	r3, #4
  425092:	4555      	cmp	r5, sl
  425094:	bf2c      	ite	cs
  425096:	469b      	movcs	fp, r3
  425098:	f04f 0b04 	movcc.w	fp, #4
  42509c:	4682      	mov	sl, r0
  42509e:	e005      	b.n	4250ac <__multiply+0x94>
  4250a0:	0c09      	lsrs	r1, r1, #16
  4250a2:	d12c      	bne.n	4250fe <__multiply+0xe6>
  4250a4:	45b0      	cmp	r8, r6
  4250a6:	f107 0704 	add.w	r7, r7, #4
  4250aa:	d94c      	bls.n	425146 <__multiply+0x12e>
  4250ac:	f856 1b04 	ldr.w	r1, [r6], #4
  4250b0:	b28d      	uxth	r5, r1
  4250b2:	2d00      	cmp	r5, #0
  4250b4:	d0f4      	beq.n	4250a0 <__multiply+0x88>
  4250b6:	46cc      	mov	ip, r9
  4250b8:	463c      	mov	r4, r7
  4250ba:	2300      	movs	r3, #0
  4250bc:	9601      	str	r6, [sp, #4]
  4250be:	f85c 0b04 	ldr.w	r0, [ip], #4
  4250c2:	6821      	ldr	r1, [r4, #0]
  4250c4:	b286      	uxth	r6, r0
  4250c6:	45e6      	cmp	lr, ip
  4250c8:	b28a      	uxth	r2, r1
  4250ca:	ea4f 4010 	mov.w	r0, r0, lsr #16
  4250ce:	fb05 2206 	mla	r2, r5, r6, r2
  4250d2:	ea4f 4111 	mov.w	r1, r1, lsr #16
  4250d6:	441a      	add	r2, r3
  4250d8:	fb05 1100 	mla	r1, r5, r0, r1
  4250dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4250e0:	b292      	uxth	r2, r2
  4250e2:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4250e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  4250ea:	f844 2b04 	str.w	r2, [r4], #4
  4250ee:	d8e6      	bhi.n	4250be <__multiply+0xa6>
  4250f0:	9e01      	ldr	r6, [sp, #4]
  4250f2:	f847 300b 	str.w	r3, [r7, fp]
  4250f6:	f856 1c04 	ldr.w	r1, [r6, #-4]
  4250fa:	0c09      	lsrs	r1, r1, #16
  4250fc:	d0d2      	beq.n	4250a4 <__multiply+0x8c>
  4250fe:	683b      	ldr	r3, [r7, #0]
  425100:	2200      	movs	r2, #0
  425102:	4648      	mov	r0, r9
  425104:	463d      	mov	r5, r7
  425106:	461c      	mov	r4, r3
  425108:	4694      	mov	ip, r2
  42510a:	8802      	ldrh	r2, [r0, #0]
  42510c:	b29b      	uxth	r3, r3
  42510e:	fb01 c202 	mla	r2, r1, r2, ip
  425112:	eb02 4214 	add.w	r2, r2, r4, lsr #16
  425116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  42511a:	f845 3b04 	str.w	r3, [r5], #4
  42511e:	f850 3b04 	ldr.w	r3, [r0], #4
  425122:	682c      	ldr	r4, [r5, #0]
  425124:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  425128:	4570      	cmp	r0, lr
  42512a:	b2a3      	uxth	r3, r4
  42512c:	fb01 330c 	mla	r3, r1, ip, r3
  425130:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  425134:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  425138:	d3e7      	bcc.n	42510a <__multiply+0xf2>
  42513a:	45b0      	cmp	r8, r6
  42513c:	f847 300b 	str.w	r3, [r7, fp]
  425140:	f107 0704 	add.w	r7, r7, #4
  425144:	d8b2      	bhi.n	4250ac <__multiply+0x94>
  425146:	4650      	mov	r0, sl
  425148:	e9dd e402 	ldrd	lr, r4, [sp, #8]
  42514c:	2c00      	cmp	r4, #0
  42514e:	dc02      	bgt.n	425156 <__multiply+0x13e>
  425150:	e005      	b.n	42515e <__multiply+0x146>
  425152:	3c01      	subs	r4, #1
  425154:	d003      	beq.n	42515e <__multiply+0x146>
  425156:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
  42515a:	2b00      	cmp	r3, #0
  42515c:	d0f9      	beq.n	425152 <__multiply+0x13a>
  42515e:	6104      	str	r4, [r0, #16]
  425160:	b005      	add	sp, #20
  425162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  425166:	4602      	mov	r2, r0
  425168:	4b02      	ldr	r3, [pc, #8]	@ (425174 <__multiply+0x15c>)
  42516a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
  42516e:	4802      	ldr	r0, [pc, #8]	@ (425178 <__multiply+0x160>)
  425170:	f7fa f81a 	bl	41f1a8 <__assert_func>
  425174:	00434e04 	.word	0x00434e04
  425178:	00434e7c 	.word	0x00434e7c

0042517c <__pow5mult>:
  42517c:	f012 0303 	ands.w	r3, r2, #3
  425180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  425184:	4614      	mov	r4, r2
  425186:	4607      	mov	r7, r0
  425188:	d12c      	bne.n	4251e4 <__pow5mult+0x68>
  42518a:	460d      	mov	r5, r1
  42518c:	10a4      	asrs	r4, r4, #2
  42518e:	d01c      	beq.n	4251ca <__pow5mult+0x4e>
  425190:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
  425192:	b386      	cbz	r6, 4251f6 <__pow5mult+0x7a>
  425194:	07e3      	lsls	r3, r4, #31
  425196:	f04f 0800 	mov.w	r8, #0
  42519a:	d406      	bmi.n	4251aa <__pow5mult+0x2e>
  42519c:	1064      	asrs	r4, r4, #1
  42519e:	d014      	beq.n	4251ca <__pow5mult+0x4e>
  4251a0:	6830      	ldr	r0, [r6, #0]
  4251a2:	b1a8      	cbz	r0, 4251d0 <__pow5mult+0x54>
  4251a4:	4606      	mov	r6, r0
  4251a6:	07e3      	lsls	r3, r4, #31
  4251a8:	d5f8      	bpl.n	42519c <__pow5mult+0x20>
  4251aa:	4632      	mov	r2, r6
  4251ac:	4629      	mov	r1, r5
  4251ae:	4638      	mov	r0, r7
  4251b0:	f7ff ff32 	bl	425018 <__multiply>
  4251b4:	b135      	cbz	r5, 4251c4 <__pow5mult+0x48>
  4251b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
  4251b8:	6869      	ldr	r1, [r5, #4]
  4251ba:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
  4251be:	602a      	str	r2, [r5, #0]
  4251c0:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
  4251c4:	1064      	asrs	r4, r4, #1
  4251c6:	4605      	mov	r5, r0
  4251c8:	d1ea      	bne.n	4251a0 <__pow5mult+0x24>
  4251ca:	4628      	mov	r0, r5
  4251cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4251d0:	4632      	mov	r2, r6
  4251d2:	4631      	mov	r1, r6
  4251d4:	4638      	mov	r0, r7
  4251d6:	f7ff ff1f 	bl	425018 <__multiply>
  4251da:	6030      	str	r0, [r6, #0]
  4251dc:	4606      	mov	r6, r0
  4251de:	f8c0 8000 	str.w	r8, [r0]
  4251e2:	e7e0      	b.n	4251a6 <__pow5mult+0x2a>
  4251e4:	3b01      	subs	r3, #1
  4251e6:	4a0f      	ldr	r2, [pc, #60]	@ (425224 <__pow5mult+0xa8>)
  4251e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4251ec:	2300      	movs	r3, #0
  4251ee:	f7ff fe3f 	bl	424e70 <__multadd>
  4251f2:	4605      	mov	r5, r0
  4251f4:	e7ca      	b.n	42518c <__pow5mult+0x10>
  4251f6:	2101      	movs	r1, #1
  4251f8:	4638      	mov	r0, r7
  4251fa:	f7ff fe09 	bl	424e10 <_Balloc>
  4251fe:	4606      	mov	r6, r0
  425200:	b140      	cbz	r0, 425214 <__pow5mult+0x98>
  425202:	2301      	movs	r3, #1
  425204:	f240 2271 	movw	r2, #625	@ 0x271
  425208:	e9c0 3204 	strd	r3, r2, [r0, #16]
  42520c:	2300      	movs	r3, #0
  42520e:	6438      	str	r0, [r7, #64]	@ 0x40
  425210:	6003      	str	r3, [r0, #0]
  425212:	e7bf      	b.n	425194 <__pow5mult+0x18>
  425214:	4602      	mov	r2, r0
  425216:	4b04      	ldr	r3, [pc, #16]	@ (425228 <__pow5mult+0xac>)
  425218:	f240 1145 	movw	r1, #325	@ 0x145
  42521c:	4803      	ldr	r0, [pc, #12]	@ (42522c <__pow5mult+0xb0>)
  42521e:	f7f9 ffc3 	bl	41f1a8 <__assert_func>
  425222:	bf00      	nop
  425224:	0043c654 	.word	0x0043c654
  425228:	00434e04 	.word	0x00434e04
  42522c:	00434e7c 	.word	0x00434e7c

00425230 <__lshift>:
  425230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  425234:	460c      	mov	r4, r1
  425236:	4690      	mov	r8, r2
  425238:	4606      	mov	r6, r0
  42523a:	ea4f 1962 	mov.w	r9, r2, asr #5
  42523e:	6927      	ldr	r7, [r4, #16]
  425240:	68a3      	ldr	r3, [r4, #8]
  425242:	eb07 1762 	add.w	r7, r7, r2, asr #5
  425246:	6849      	ldr	r1, [r1, #4]
  425248:	1c7d      	adds	r5, r7, #1
  42524a:	429d      	cmp	r5, r3
  42524c:	dd03      	ble.n	425256 <__lshift+0x26>
  42524e:	005b      	lsls	r3, r3, #1
  425250:	3101      	adds	r1, #1
  425252:	429d      	cmp	r5, r3
  425254:	dcfb      	bgt.n	42524e <__lshift+0x1e>
  425256:	4630      	mov	r0, r6
  425258:	f7ff fdda 	bl	424e10 <_Balloc>
  42525c:	2800      	cmp	r0, #0
  42525e:	d050      	beq.n	425302 <__lshift+0xd2>
  425260:	f1b9 0f00 	cmp.w	r9, #0
  425264:	f100 0c14 	add.w	ip, r0, #20
  425268:	dd0e      	ble.n	425288 <__lshift+0x58>
  42526a:	f109 0205 	add.w	r2, r9, #5
  42526e:	4663      	mov	r3, ip
  425270:	2100      	movs	r1, #0
  425272:	ea4f 0e82 	mov.w	lr, r2, lsl #2
  425276:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  42527a:	f843 1b04 	str.w	r1, [r3], #4
  42527e:	4293      	cmp	r3, r2
  425280:	d1fb      	bne.n	42527a <__lshift+0x4a>
  425282:	f1ae 0314 	sub.w	r3, lr, #20
  425286:	449c      	add	ip, r3
  425288:	f104 0314 	add.w	r3, r4, #20
  42528c:	6921      	ldr	r1, [r4, #16]
  42528e:	f018 081f 	ands.w	r8, r8, #31
  425292:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  425296:	d02b      	beq.n	4252f0 <__lshift+0xc0>
  425298:	f1c8 0920 	rsb	r9, r8, #32
  42529c:	46e6      	mov	lr, ip
  42529e:	f04f 0a00 	mov.w	sl, #0
  4252a2:	681a      	ldr	r2, [r3, #0]
  4252a4:	fa02 f208 	lsl.w	r2, r2, r8
  4252a8:	ea42 020a 	orr.w	r2, r2, sl
  4252ac:	f84e 2b04 	str.w	r2, [lr], #4
  4252b0:	f853 2b04 	ldr.w	r2, [r3], #4
  4252b4:	4299      	cmp	r1, r3
  4252b6:	fa22 fa09 	lsr.w	sl, r2, r9
  4252ba:	d8f2      	bhi.n	4252a2 <__lshift+0x72>
  4252bc:	1b0b      	subs	r3, r1, r4
  4252be:	f104 0215 	add.w	r2, r4, #21
  4252c2:	3b15      	subs	r3, #21
  4252c4:	f023 0303 	bic.w	r3, r3, #3
  4252c8:	3304      	adds	r3, #4
  4252ca:	4291      	cmp	r1, r2
  4252cc:	bf38      	it	cc
  4252ce:	2304      	movcc	r3, #4
  4252d0:	f84c a003 	str.w	sl, [ip, r3]
  4252d4:	f1ba 0f00 	cmp.w	sl, #0
  4252d8:	d100      	bne.n	4252dc <__lshift+0xac>
  4252da:	463d      	mov	r5, r7
  4252dc:	6c73      	ldr	r3, [r6, #68]	@ 0x44
  4252de:	6862      	ldr	r2, [r4, #4]
  4252e0:	6105      	str	r5, [r0, #16]
  4252e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4252e6:	6021      	str	r1, [r4, #0]
  4252e8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  4252ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4252f0:	f1ac 0c04 	sub.w	ip, ip, #4
  4252f4:	f853 2b04 	ldr.w	r2, [r3], #4
  4252f8:	4299      	cmp	r1, r3
  4252fa:	f84c 2f04 	str.w	r2, [ip, #4]!
  4252fe:	d8f9      	bhi.n	4252f4 <__lshift+0xc4>
  425300:	e7eb      	b.n	4252da <__lshift+0xaa>
  425302:	4602      	mov	r2, r0
  425304:	4b02      	ldr	r3, [pc, #8]	@ (425310 <__lshift+0xe0>)
  425306:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
  42530a:	4802      	ldr	r0, [pc, #8]	@ (425314 <__lshift+0xe4>)
  42530c:	f7f9 ff4c 	bl	41f1a8 <__assert_func>
  425310:	00434e04 	.word	0x00434e04
  425314:	00434e7c 	.word	0x00434e7c

00425318 <__mcmp>:
  425318:	4684      	mov	ip, r0
  42531a:	690b      	ldr	r3, [r1, #16]
  42531c:	6900      	ldr	r0, [r0, #16]
  42531e:	1ac0      	subs	r0, r0, r3
  425320:	d116      	bne.n	425350 <__mcmp+0x38>
  425322:	f10c 0c14 	add.w	ip, ip, #20
  425326:	3114      	adds	r1, #20
  425328:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  42532c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  425330:	b410      	push	{r4}
  425332:	e001      	b.n	425338 <__mcmp+0x20>
  425334:	4594      	cmp	ip, r2
  425336:	d208      	bcs.n	42534a <__mcmp+0x32>
  425338:	f852 4d04 	ldr.w	r4, [r2, #-4]!
  42533c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  425340:	428c      	cmp	r4, r1
  425342:	d0f7      	beq.n	425334 <__mcmp+0x1c>
  425344:	d205      	bcs.n	425352 <__mcmp+0x3a>
  425346:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  42534a:	f85d 4b04 	ldr.w	r4, [sp], #4
  42534e:	4770      	bx	lr
  425350:	4770      	bx	lr
  425352:	2001      	movs	r0, #1
  425354:	f85d 4b04 	ldr.w	r4, [sp], #4
  425358:	4770      	bx	lr
  42535a:	bf00      	nop

0042535c <__mdiff>:
  42535c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  425360:	4615      	mov	r5, r2
  425362:	690a      	ldr	r2, [r1, #16]
  425364:	b083      	sub	sp, #12
  425366:	4688      	mov	r8, r1
  425368:	692b      	ldr	r3, [r5, #16]
  42536a:	1ad2      	subs	r2, r2, r3
  42536c:	2a00      	cmp	r2, #0
  42536e:	f040 808b 	bne.w	425488 <__mdiff+0x12c>
  425372:	f101 0614 	add.w	r6, r1, #20
  425376:	f105 0114 	add.w	r1, r5, #20
  42537a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  42537e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  425382:	e002      	b.n	42538a <__mdiff+0x2e>
  425384:	429e      	cmp	r6, r3
  425386:	f080 8082 	bcs.w	42548e <__mdiff+0x132>
  42538a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  42538e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  425392:	4294      	cmp	r4, r2
  425394:	d0f6      	beq.n	425384 <__mdiff+0x28>
  425396:	d378      	bcc.n	42548a <__mdiff+0x12e>
  425398:	462b      	mov	r3, r5
  42539a:	2400      	movs	r4, #0
  42539c:	4645      	mov	r5, r8
  42539e:	4698      	mov	r8, r3
  4253a0:	6869      	ldr	r1, [r5, #4]
  4253a2:	f7ff fd35 	bl	424e10 <_Balloc>
  4253a6:	2800      	cmp	r0, #0
  4253a8:	f000 808c 	beq.w	4254c4 <__mdiff+0x168>
  4253ac:	692e      	ldr	r6, [r5, #16]
  4253ae:	f105 0b14 	add.w	fp, r5, #20
  4253b2:	f108 0e14 	add.w	lr, r8, #20
  4253b6:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4253ba:	f100 0a14 	add.w	sl, r0, #20
  4253be:	f105 0210 	add.w	r2, r5, #16
  4253c2:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
  4253c6:	f04f 0c00 	mov.w	ip, #0
  4253ca:	eb0b 0186 	add.w	r1, fp, r6, lsl #2
  4253ce:	4657      	mov	r7, sl
  4253d0:	60c4      	str	r4, [r0, #12]
  4253d2:	f8cd b004 	str.w	fp, [sp, #4]
  4253d6:	f85e 4b04 	ldr.w	r4, [lr], #4
  4253da:	f852 5f04 	ldr.w	r5, [r2, #4]!
  4253de:	fa1f fb84 	uxth.w	fp, r4
  4253e2:	45f1      	cmp	r9, lr
  4253e4:	b2ab      	uxth	r3, r5
  4253e6:	ea4f 4414 	mov.w	r4, r4, lsr #16
  4253ea:	eba3 030b 	sub.w	r3, r3, fp
  4253ee:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
  4253f2:	4463      	add	r3, ip
  4253f4:	eb04 4423 	add.w	r4, r4, r3, asr #16
  4253f8:	b29b      	uxth	r3, r3
  4253fa:	ea4f 4c24 	mov.w	ip, r4, asr #16
  4253fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  425402:	f847 3b04 	str.w	r3, [r7], #4
  425406:	d8e6      	bhi.n	4253d6 <__mdiff+0x7a>
  425408:	eba9 0408 	sub.w	r4, r9, r8
  42540c:	f108 0815 	add.w	r8, r8, #21
  425410:	f8dd b004 	ldr.w	fp, [sp, #4]
  425414:	45c1      	cmp	r9, r8
  425416:	f1a4 0415 	sub.w	r4, r4, #21
  42541a:	bf34      	ite	cc
  42541c:	f04f 0800 	movcc.w	r8, #0
  425420:	f04f 0801 	movcs.w	r8, #1
  425424:	08a4      	lsrs	r4, r4, #2
  425426:	f1b8 0f00 	cmp.w	r8, #0
  42542a:	f104 0201 	add.w	r2, r4, #1
  42542e:	ea4f 0282 	mov.w	r2, r2, lsl #2
  425432:	bf08      	it	eq
  425434:	2204      	moveq	r2, #4
  425436:	eb0b 0502 	add.w	r5, fp, r2
  42543a:	4452      	add	r2, sl
  42543c:	42a9      	cmp	r1, r5
  42543e:	d931      	bls.n	4254a4 <__mdiff+0x148>
  425440:	4617      	mov	r7, r2
  425442:	462c      	mov	r4, r5
  425444:	f854 3b04 	ldr.w	r3, [r4], #4
  425448:	fa1f f883 	uxth.w	r8, r3
  42544c:	42a1      	cmp	r1, r4
  42544e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  425452:	4463      	add	r3, ip
  425454:	44c4      	add	ip, r8
  425456:	b29b      	uxth	r3, r3
  425458:	eb0e 4c2c 	add.w	ip, lr, ip, asr #16
  42545c:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
  425460:	ea4f 4c2c 	mov.w	ip, ip, asr #16
  425464:	f847 3b04 	str.w	r3, [r7], #4
  425468:	d8ec      	bhi.n	425444 <__mdiff+0xe8>
  42546a:	3901      	subs	r1, #1
  42546c:	1b49      	subs	r1, r1, r5
  42546e:	f021 0103 	bic.w	r1, r1, #3
  425472:	440a      	add	r2, r1
  425474:	b923      	cbnz	r3, 425480 <__mdiff+0x124>
  425476:	f852 3d04 	ldr.w	r3, [r2, #-4]!
  42547a:	3e01      	subs	r6, #1
  42547c:	2b00      	cmp	r3, #0
  42547e:	d0fa      	beq.n	425476 <__mdiff+0x11a>
  425480:	6106      	str	r6, [r0, #16]
  425482:	b003      	add	sp, #12
  425484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  425488:	da86      	bge.n	425398 <__mdiff+0x3c>
  42548a:	2401      	movs	r4, #1
  42548c:	e788      	b.n	4253a0 <__mdiff+0x44>
  42548e:	2100      	movs	r1, #0
  425490:	f7ff fcbe 	bl	424e10 <_Balloc>
  425494:	b178      	cbz	r0, 4254b6 <__mdiff+0x15a>
  425496:	2201      	movs	r2, #1
  425498:	2300      	movs	r3, #0
  42549a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  42549e:	b003      	add	sp, #12
  4254a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4254a4:	f1b8 0f00 	cmp.w	r8, #0
  4254a8:	ea4f 0484 	mov.w	r4, r4, lsl #2
  4254ac:	bf08      	it	eq
  4254ae:	2400      	moveq	r4, #0
  4254b0:	eb0a 0204 	add.w	r2, sl, r4
  4254b4:	e7de      	b.n	425474 <__mdiff+0x118>
  4254b6:	4602      	mov	r2, r0
  4254b8:	4b06      	ldr	r3, [pc, #24]	@ (4254d4 <__mdiff+0x178>)
  4254ba:	f240 2137 	movw	r1, #567	@ 0x237
  4254be:	4806      	ldr	r0, [pc, #24]	@ (4254d8 <__mdiff+0x17c>)
  4254c0:	f7f9 fe72 	bl	41f1a8 <__assert_func>
  4254c4:	4602      	mov	r2, r0
  4254c6:	4b03      	ldr	r3, [pc, #12]	@ (4254d4 <__mdiff+0x178>)
  4254c8:	f240 2145 	movw	r1, #581	@ 0x245
  4254cc:	4802      	ldr	r0, [pc, #8]	@ (4254d8 <__mdiff+0x17c>)
  4254ce:	f7f9 fe6b 	bl	41f1a8 <__assert_func>
  4254d2:	bf00      	nop
  4254d4:	00434e04 	.word	0x00434e04
  4254d8:	00434e7c 	.word	0x00434e7c

004254dc <__d2b>:
  4254dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4254e0:	460e      	mov	r6, r1
  4254e2:	b083      	sub	sp, #12
  4254e4:	2101      	movs	r1, #1
  4254e6:	4615      	mov	r5, r2
  4254e8:	ec59 8b10 	vmov	r8, r9, d0
  4254ec:	f7ff fc90 	bl	424e10 <_Balloc>
  4254f0:	4604      	mov	r4, r0
  4254f2:	2800      	cmp	r0, #0
  4254f4:	d046      	beq.n	425584 <__d2b+0xa8>
  4254f6:	f3c9 570a 	ubfx	r7, r9, #20, #11
  4254fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
  4254fe:	b10f      	cbz	r7, 425504 <__d2b+0x28>
  425500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  425504:	9301      	str	r3, [sp, #4]
  425506:	f1b8 0300 	subs.w	r3, r8, #0
  42550a:	d113      	bne.n	425534 <__d2b+0x58>
  42550c:	a801      	add	r0, sp, #4
  42550e:	f7ff fd25 	bl	424f5c <__lo0bits>
  425512:	9b01      	ldr	r3, [sp, #4]
  425514:	2201      	movs	r2, #1
  425516:	3020      	adds	r0, #32
  425518:	6163      	str	r3, [r4, #20]
  42551a:	6122      	str	r2, [r4, #16]
  42551c:	b30f      	cbz	r7, 425562 <__d2b+0x86>
  42551e:	f2a7 4733 	subw	r7, r7, #1075	@ 0x433
  425522:	4407      	add	r7, r0
  425524:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
  425528:	6037      	str	r7, [r6, #0]
  42552a:	6028      	str	r0, [r5, #0]
  42552c:	4620      	mov	r0, r4
  42552e:	b003      	add	sp, #12
  425530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  425534:	4668      	mov	r0, sp
  425536:	9300      	str	r3, [sp, #0]
  425538:	f7ff fd10 	bl	424f5c <__lo0bits>
  42553c:	9b01      	ldr	r3, [sp, #4]
  42553e:	b1f8      	cbz	r0, 425580 <__d2b+0xa4>
  425540:	f1c0 0220 	rsb	r2, r0, #32
  425544:	9900      	ldr	r1, [sp, #0]
  425546:	fa03 f202 	lsl.w	r2, r3, r2
  42554a:	40c3      	lsrs	r3, r0
  42554c:	430a      	orrs	r2, r1
  42554e:	9301      	str	r3, [sp, #4]
  425550:	2b00      	cmp	r3, #0
  425552:	6162      	str	r2, [r4, #20]
  425554:	61a3      	str	r3, [r4, #24]
  425556:	bf0c      	ite	eq
  425558:	2201      	moveq	r2, #1
  42555a:	2202      	movne	r2, #2
  42555c:	6122      	str	r2, [r4, #16]
  42555e:	2f00      	cmp	r7, #0
  425560:	d1dd      	bne.n	42551e <__d2b+0x42>
  425562:	eb04 0382 	add.w	r3, r4, r2, lsl #2
  425566:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
  42556a:	6030      	str	r0, [r6, #0]
  42556c:	6918      	ldr	r0, [r3, #16]
  42556e:	f7ff fcd1 	bl	424f14 <__hi0bits>
  425572:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
  425576:	6028      	str	r0, [r5, #0]
  425578:	4620      	mov	r0, r4
  42557a:	b003      	add	sp, #12
  42557c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  425580:	9a00      	ldr	r2, [sp, #0]
  425582:	e7e5      	b.n	425550 <__d2b+0x74>
  425584:	4602      	mov	r2, r0
  425586:	4b03      	ldr	r3, [pc, #12]	@ (425594 <__d2b+0xb8>)
  425588:	f240 310f 	movw	r1, #783	@ 0x30f
  42558c:	4802      	ldr	r0, [pc, #8]	@ (425598 <__d2b+0xbc>)
  42558e:	f7f9 fe0b 	bl	41f1a8 <__assert_func>
  425592:	bf00      	nop
  425594:	00434e04 	.word	0x00434e04
  425598:	00434e7c 	.word	0x00434e7c

0042559c <_calloc_r>:
  42559c:	b538      	push	{r3, r4, r5, lr}
  42559e:	fba1 1402 	umull	r1, r4, r1, r2
  4255a2:	bb34      	cbnz	r4, 4255f2 <_calloc_r+0x56>
  4255a4:	f7fb ff56 	bl	421454 <_malloc_r>
  4255a8:	4605      	mov	r5, r0
  4255aa:	b330      	cbz	r0, 4255fa <_calloc_r+0x5e>
  4255ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4255b0:	f022 0203 	bic.w	r2, r2, #3
  4255b4:	3a04      	subs	r2, #4
  4255b6:	2a24      	cmp	r2, #36	@ 0x24
  4255b8:	d80c      	bhi.n	4255d4 <_calloc_r+0x38>
  4255ba:	2a13      	cmp	r2, #19
  4255bc:	d90f      	bls.n	4255de <_calloc_r+0x42>
  4255be:	2a1b      	cmp	r2, #27
  4255c0:	e9c0 4400 	strd	r4, r4, [r0]
  4255c4:	d912      	bls.n	4255ec <_calloc_r+0x50>
  4255c6:	2a24      	cmp	r2, #36	@ 0x24
  4255c8:	e9c0 4402 	strd	r4, r4, [r0, #8]
  4255cc:	d018      	beq.n	425600 <_calloc_r+0x64>
  4255ce:	f100 0210 	add.w	r2, r0, #16
  4255d2:	e005      	b.n	4255e0 <_calloc_r+0x44>
  4255d4:	4621      	mov	r1, r4
  4255d6:	f7fb fb65 	bl	420ca4 <memset>
  4255da:	4628      	mov	r0, r5
  4255dc:	bd38      	pop	{r3, r4, r5, pc}
  4255de:	4602      	mov	r2, r0
  4255e0:	2300      	movs	r3, #0
  4255e2:	4628      	mov	r0, r5
  4255e4:	e9c2 3300 	strd	r3, r3, [r2]
  4255e8:	6093      	str	r3, [r2, #8]
  4255ea:	bd38      	pop	{r3, r4, r5, pc}
  4255ec:	f100 0208 	add.w	r2, r0, #8
  4255f0:	e7f6      	b.n	4255e0 <_calloc_r+0x44>
  4255f2:	f7fb fc69 	bl	420ec8 <__errno>
  4255f6:	230c      	movs	r3, #12
  4255f8:	6003      	str	r3, [r0, #0]
  4255fa:	2500      	movs	r5, #0
  4255fc:	4628      	mov	r0, r5
  4255fe:	bd38      	pop	{r3, r4, r5, pc}
  425600:	f100 0218 	add.w	r2, r0, #24
  425604:	e9c0 4404 	strd	r4, r4, [r0, #16]
  425608:	e7ea      	b.n	4255e0 <_calloc_r+0x44>
  42560a:	bf00      	nop

0042560c <__aeabi_d2lz>:
  42560c:	4602      	mov	r2, r0
  42560e:	b508      	push	{r3, lr}
  425610:	460b      	mov	r3, r1
  425612:	ec43 2b17 	vmov	d7, r2, r3
  425616:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
  42561a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  42561e:	d403      	bmi.n	425628 <__aeabi_d2lz+0x1c>
  425620:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  425624:	f000 b80c 	b.w	425640 <__aeabi_d2ulz>
  425628:	eeb1 7b47 	vneg.f64	d7, d7
  42562c:	ec51 0b17 	vmov	r0, r1, d7
  425630:	f000 f806 	bl	425640 <__aeabi_d2ulz>
  425634:	4240      	negs	r0, r0
  425636:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  42563a:	bd08      	pop	{r3, pc}
  42563c:	0000      	movs	r0, r0
	...

00425640 <__aeabi_d2ulz>:
  425640:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 425670 <__aeabi_d2ulz+0x30>
  425644:	ec41 0b17 	vmov	d7, r0, r1
  425648:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 425678 <__aeabi_d2ulz+0x38>
  42564c:	ee27 6b06 	vmul.f64	d6, d7, d6
  425650:	eebc 6bc6 	vcvt.u32.f64	s12, d6
  425654:	eeb8 4b46 	vcvt.f64.u32	d4, s12
  425658:	ee16 1a10 	vmov	r1, s12
  42565c:	eea4 7b45 	vfms.f64	d7, d4, d5
  425660:	eefc 7bc7 	vcvt.u32.f64	s15, d7
  425664:	ee17 0a90 	vmov	r0, s15
  425668:	4770      	bx	lr
  42566a:	bf00      	nop
  42566c:	f3af 8000 	nop.w
  425670:	00000000 	.word	0x00000000
  425674:	3df00000 	.word	0x3df00000
  425678:	00000000 	.word	0x00000000
  42567c:	41f00000 	.word	0x41f00000

00425680 <__udivmoddi4>:
  425680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  425684:	9d09      	ldr	r5, [sp, #36]	@ 0x24
  425686:	460e      	mov	r6, r1
  425688:	4604      	mov	r4, r0
  42568a:	460f      	mov	r7, r1
  42568c:	2b00      	cmp	r3, #0
  42568e:	d147      	bne.n	425720 <__udivmoddi4+0xa0>
  425690:	428a      	cmp	r2, r1
  425692:	4694      	mov	ip, r2
  425694:	fab2 f382 	clz	r3, r2
  425698:	d95a      	bls.n	425750 <__udivmoddi4+0xd0>
  42569a:	b143      	cbz	r3, 4256ae <__udivmoddi4+0x2e>
  42569c:	fa02 fc03 	lsl.w	ip, r2, r3
  4256a0:	f1c3 0220 	rsb	r2, r3, #32
  4256a4:	409f      	lsls	r7, r3
  4256a6:	409c      	lsls	r4, r3
  4256a8:	fa20 f202 	lsr.w	r2, r0, r2
  4256ac:	4317      	orrs	r7, r2
  4256ae:	ea4f 461c 	mov.w	r6, ip, lsr #16
  4256b2:	fa1f fe8c 	uxth.w	lr, ip
  4256b6:	0c22      	lsrs	r2, r4, #16
  4256b8:	fbb7 f1f6 	udiv	r1, r7, r6
  4256bc:	fb06 7711 	mls	r7, r6, r1, r7
  4256c0:	fb01 f00e 	mul.w	r0, r1, lr
  4256c4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  4256c8:	4290      	cmp	r0, r2
  4256ca:	d908      	bls.n	4256de <__udivmoddi4+0x5e>
  4256cc:	eb1c 0202 	adds.w	r2, ip, r2
  4256d0:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
  4256d4:	d202      	bcs.n	4256dc <__udivmoddi4+0x5c>
  4256d6:	4290      	cmp	r0, r2
  4256d8:	f200 813c 	bhi.w	425954 <__udivmoddi4+0x2d4>
  4256dc:	4639      	mov	r1, r7
  4256de:	1a12      	subs	r2, r2, r0
  4256e0:	b2a4      	uxth	r4, r4
  4256e2:	fbb2 f0f6 	udiv	r0, r2, r6
  4256e6:	fb06 2210 	mls	r2, r6, r0, r2
  4256ea:	fb00 fe0e 	mul.w	lr, r0, lr
  4256ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
  4256f2:	45a6      	cmp	lr, r4
  4256f4:	d908      	bls.n	425708 <__udivmoddi4+0x88>
  4256f6:	eb1c 0404 	adds.w	r4, ip, r4
  4256fa:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
  4256fe:	d202      	bcs.n	425706 <__udivmoddi4+0x86>
  425700:	45a6      	cmp	lr, r4
  425702:	f200 812a 	bhi.w	42595a <__udivmoddi4+0x2da>
  425706:	4610      	mov	r0, r2
  425708:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  42570c:	eba4 040e 	sub.w	r4, r4, lr
  425710:	2100      	movs	r1, #0
  425712:	b11d      	cbz	r5, 42571c <__udivmoddi4+0x9c>
  425714:	40dc      	lsrs	r4, r3
  425716:	2300      	movs	r3, #0
  425718:	e9c5 4300 	strd	r4, r3, [r5]
  42571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  425720:	428b      	cmp	r3, r1
  425722:	d905      	bls.n	425730 <__udivmoddi4+0xb0>
  425724:	b10d      	cbz	r5, 42572a <__udivmoddi4+0xaa>
  425726:	e9c5 0100 	strd	r0, r1, [r5]
  42572a:	2100      	movs	r1, #0
  42572c:	4608      	mov	r0, r1
  42572e:	e7f5      	b.n	42571c <__udivmoddi4+0x9c>
  425730:	fab3 f183 	clz	r1, r3
  425734:	2900      	cmp	r1, #0
  425736:	d14f      	bne.n	4257d8 <__udivmoddi4+0x158>
  425738:	42b3      	cmp	r3, r6
  42573a:	f0c0 8102 	bcc.w	425942 <__udivmoddi4+0x2c2>
  42573e:	4282      	cmp	r2, r0
  425740:	f240 80ff 	bls.w	425942 <__udivmoddi4+0x2c2>
  425744:	4608      	mov	r0, r1
  425746:	2d00      	cmp	r5, #0
  425748:	d0e8      	beq.n	42571c <__udivmoddi4+0x9c>
  42574a:	e9c5 4700 	strd	r4, r7, [r5]
  42574e:	e7e5      	b.n	42571c <__udivmoddi4+0x9c>
  425750:	2b00      	cmp	r3, #0
  425752:	f040 80af 	bne.w	4258b4 <__udivmoddi4+0x234>
  425756:	1a8a      	subs	r2, r1, r2
  425758:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
  42575c:	fa1f f78c 	uxth.w	r7, ip
  425760:	2101      	movs	r1, #1
  425762:	fbb2 f6fe 	udiv	r6, r2, lr
  425766:	fb0e 2016 	mls	r0, lr, r6, r2
  42576a:	0c22      	lsrs	r2, r4, #16
  42576c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  425770:	fb07 f006 	mul.w	r0, r7, r6
  425774:	4290      	cmp	r0, r2
  425776:	d90f      	bls.n	425798 <__udivmoddi4+0x118>
  425778:	eb1c 0202 	adds.w	r2, ip, r2
  42577c:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
  425780:	bf2c      	ite	cs
  425782:	f04f 0901 	movcs.w	r9, #1
  425786:	f04f 0900 	movcc.w	r9, #0
  42578a:	4290      	cmp	r0, r2
  42578c:	d903      	bls.n	425796 <__udivmoddi4+0x116>
  42578e:	f1b9 0f00 	cmp.w	r9, #0
  425792:	f000 80dc 	beq.w	42594e <__udivmoddi4+0x2ce>
  425796:	4646      	mov	r6, r8
  425798:	1a12      	subs	r2, r2, r0
  42579a:	b2a4      	uxth	r4, r4
  42579c:	fbb2 f0fe 	udiv	r0, r2, lr
  4257a0:	fb0e 2210 	mls	r2, lr, r0, r2
  4257a4:	fb00 f707 	mul.w	r7, r0, r7
  4257a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
  4257ac:	42a7      	cmp	r7, r4
  4257ae:	d90f      	bls.n	4257d0 <__udivmoddi4+0x150>
  4257b0:	eb1c 0404 	adds.w	r4, ip, r4
  4257b4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
  4257b8:	bf2c      	ite	cs
  4257ba:	f04f 0e01 	movcs.w	lr, #1
  4257be:	f04f 0e00 	movcc.w	lr, #0
  4257c2:	42a7      	cmp	r7, r4
  4257c4:	d903      	bls.n	4257ce <__udivmoddi4+0x14e>
  4257c6:	f1be 0f00 	cmp.w	lr, #0
  4257ca:	f000 80c9 	beq.w	425960 <__udivmoddi4+0x2e0>
  4257ce:	4610      	mov	r0, r2
  4257d0:	1be4      	subs	r4, r4, r7
  4257d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  4257d6:	e79c      	b.n	425712 <__udivmoddi4+0x92>
  4257d8:	f1c1 0420 	rsb	r4, r1, #32
  4257dc:	408b      	lsls	r3, r1
  4257de:	fa06 fc01 	lsl.w	ip, r6, r1
  4257e2:	fa00 fe01 	lsl.w	lr, r0, r1
  4257e6:	fa22 f704 	lsr.w	r7, r2, r4
  4257ea:	40e6      	lsrs	r6, r4
  4257ec:	408a      	lsls	r2, r1
  4257ee:	431f      	orrs	r7, r3
  4257f0:	fa20 f304 	lsr.w	r3, r0, r4
  4257f4:	ea4f 4817 	mov.w	r8, r7, lsr #16
  4257f8:	ea43 030c 	orr.w	r3, r3, ip
  4257fc:	fa1f fc87 	uxth.w	ip, r7
  425800:	ea4f 4913 	mov.w	r9, r3, lsr #16
  425804:	fbb6 f0f8 	udiv	r0, r6, r8
  425808:	fb08 6610 	mls	r6, r8, r0, r6
  42580c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
  425810:	fb00 f90c 	mul.w	r9, r0, ip
  425814:	45b1      	cmp	r9, r6
  425816:	d90e      	bls.n	425836 <__udivmoddi4+0x1b6>
  425818:	19be      	adds	r6, r7, r6
  42581a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
  42581e:	bf2c      	ite	cs
  425820:	f04f 0b01 	movcs.w	fp, #1
  425824:	f04f 0b00 	movcc.w	fp, #0
  425828:	45b1      	cmp	r9, r6
  42582a:	d903      	bls.n	425834 <__udivmoddi4+0x1b4>
  42582c:	f1bb 0f00 	cmp.w	fp, #0
  425830:	f000 80a2 	beq.w	425978 <__udivmoddi4+0x2f8>
  425834:	4650      	mov	r0, sl
  425836:	eba6 0609 	sub.w	r6, r6, r9
  42583a:	fa1f f983 	uxth.w	r9, r3
  42583e:	fbb6 f3f8 	udiv	r3, r6, r8
  425842:	fb08 6613 	mls	r6, r8, r3, r6
  425846:	fb03 fc0c 	mul.w	ip, r3, ip
  42584a:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
  42584e:	45b4      	cmp	ip, r6
  425850:	d90e      	bls.n	425870 <__udivmoddi4+0x1f0>
  425852:	19be      	adds	r6, r7, r6
  425854:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
  425858:	bf2c      	ite	cs
  42585a:	f04f 0901 	movcs.w	r9, #1
  42585e:	f04f 0900 	movcc.w	r9, #0
  425862:	45b4      	cmp	ip, r6
  425864:	d903      	bls.n	42586e <__udivmoddi4+0x1ee>
  425866:	f1b9 0f00 	cmp.w	r9, #0
  42586a:	f000 8082 	beq.w	425972 <__udivmoddi4+0x2f2>
  42586e:	4643      	mov	r3, r8
  425870:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  425874:	eba6 060c 	sub.w	r6, r6, ip
  425878:	fba0 8c02 	umull	r8, ip, r0, r2
  42587c:	4566      	cmp	r6, ip
  42587e:	4643      	mov	r3, r8
  425880:	46e1      	mov	r9, ip
  425882:	d302      	bcc.n	42588a <__udivmoddi4+0x20a>
  425884:	d107      	bne.n	425896 <__udivmoddi4+0x216>
  425886:	45c6      	cmp	lr, r8
  425888:	d205      	bcs.n	425896 <__udivmoddi4+0x216>
  42588a:	ebb8 0302 	subs.w	r3, r8, r2
  42588e:	eb6c 0c07 	sbc.w	ip, ip, r7
  425892:	3801      	subs	r0, #1
  425894:	46e1      	mov	r9, ip
  425896:	b15d      	cbz	r5, 4258b0 <__udivmoddi4+0x230>
  425898:	ebbe 0203 	subs.w	r2, lr, r3
  42589c:	eb66 0609 	sbc.w	r6, r6, r9
  4258a0:	fa06 f404 	lsl.w	r4, r6, r4
  4258a4:	fa22 f301 	lsr.w	r3, r2, r1
  4258a8:	40ce      	lsrs	r6, r1
  4258aa:	431c      	orrs	r4, r3
  4258ac:	e9c5 4600 	strd	r4, r6, [r5]
  4258b0:	2100      	movs	r1, #0
  4258b2:	e733      	b.n	42571c <__udivmoddi4+0x9c>
  4258b4:	fa02 fc03 	lsl.w	ip, r2, r3
  4258b8:	f1c3 0220 	rsb	r2, r3, #32
  4258bc:	4099      	lsls	r1, r3
  4258be:	409c      	lsls	r4, r3
  4258c0:	40d6      	lsrs	r6, r2
  4258c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
  4258c6:	fa20 f202 	lsr.w	r2, r0, r2
  4258ca:	fa1f f78c 	uxth.w	r7, ip
  4258ce:	fbb6 f0fe 	udiv	r0, r6, lr
  4258d2:	430a      	orrs	r2, r1
  4258d4:	fb0e 6610 	mls	r6, lr, r0, r6
  4258d8:	0c11      	lsrs	r1, r2, #16
  4258da:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
  4258de:	fb00 f607 	mul.w	r6, r0, r7
  4258e2:	428e      	cmp	r6, r1
  4258e4:	d90e      	bls.n	425904 <__udivmoddi4+0x284>
  4258e6:	eb1c 0101 	adds.w	r1, ip, r1
  4258ea:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
  4258ee:	bf2c      	ite	cs
  4258f0:	f04f 0901 	movcs.w	r9, #1
  4258f4:	f04f 0900 	movcc.w	r9, #0
  4258f8:	428e      	cmp	r6, r1
  4258fa:	d902      	bls.n	425902 <__udivmoddi4+0x282>
  4258fc:	f1b9 0f00 	cmp.w	r9, #0
  425900:	d034      	beq.n	42596c <__udivmoddi4+0x2ec>
  425902:	4640      	mov	r0, r8
  425904:	1b89      	subs	r1, r1, r6
  425906:	b292      	uxth	r2, r2
  425908:	fbb1 f6fe 	udiv	r6, r1, lr
  42590c:	fb0e 1116 	mls	r1, lr, r6, r1
  425910:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  425914:	fb06 f107 	mul.w	r1, r6, r7
  425918:	4291      	cmp	r1, r2
  42591a:	d90e      	bls.n	42593a <__udivmoddi4+0x2ba>
  42591c:	eb1c 0202 	adds.w	r2, ip, r2
  425920:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
  425924:	bf2c      	ite	cs
  425926:	f04f 0901 	movcs.w	r9, #1
  42592a:	f04f 0900 	movcc.w	r9, #0
  42592e:	4291      	cmp	r1, r2
  425930:	d902      	bls.n	425938 <__udivmoddi4+0x2b8>
  425932:	f1b9 0f00 	cmp.w	r9, #0
  425936:	d016      	beq.n	425966 <__udivmoddi4+0x2e6>
  425938:	4646      	mov	r6, r8
  42593a:	1a52      	subs	r2, r2, r1
  42593c:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
  425940:	e70f      	b.n	425762 <__udivmoddi4+0xe2>
  425942:	1a84      	subs	r4, r0, r2
  425944:	eb66 0203 	sbc.w	r2, r6, r3
  425948:	2001      	movs	r0, #1
  42594a:	4617      	mov	r7, r2
  42594c:	e6fb      	b.n	425746 <__udivmoddi4+0xc6>
  42594e:	3e02      	subs	r6, #2
  425950:	4462      	add	r2, ip
  425952:	e721      	b.n	425798 <__udivmoddi4+0x118>
  425954:	3902      	subs	r1, #2
  425956:	4462      	add	r2, ip
  425958:	e6c1      	b.n	4256de <__udivmoddi4+0x5e>
  42595a:	4464      	add	r4, ip
  42595c:	3802      	subs	r0, #2
  42595e:	e6d3      	b.n	425708 <__udivmoddi4+0x88>
  425960:	4464      	add	r4, ip
  425962:	3802      	subs	r0, #2
  425964:	e734      	b.n	4257d0 <__udivmoddi4+0x150>
  425966:	3e02      	subs	r6, #2
  425968:	4462      	add	r2, ip
  42596a:	e7e6      	b.n	42593a <__udivmoddi4+0x2ba>
  42596c:	3802      	subs	r0, #2
  42596e:	4461      	add	r1, ip
  425970:	e7c8      	b.n	425904 <__udivmoddi4+0x284>
  425972:	3b02      	subs	r3, #2
  425974:	443e      	add	r6, r7
  425976:	e77b      	b.n	425870 <__udivmoddi4+0x1f0>
  425978:	3802      	subs	r0, #2
  42597a:	443e      	add	r6, r7
  42597c:	e75b      	b.n	425836 <__udivmoddi4+0x1b6>
  42597e:	bf00      	nop

00425980 <_close>:
  425980:	4b02      	ldr	r3, [pc, #8]	@ (42598c <_close+0xc>)
  425982:	2258      	movs	r2, #88	@ 0x58
  425984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  425988:	601a      	str	r2, [r3, #0]
  42598a:	4770      	bx	lr
  42598c:	2004e3e4 	.word	0x2004e3e4

00425990 <_fstat>:
  425990:	4b02      	ldr	r3, [pc, #8]	@ (42599c <_fstat+0xc>)
  425992:	2258      	movs	r2, #88	@ 0x58
  425994:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  425998:	601a      	str	r2, [r3, #0]
  42599a:	4770      	bx	lr
  42599c:	2004e3e4 	.word	0x2004e3e4

004259a0 <_getpid>:
  4259a0:	4b02      	ldr	r3, [pc, #8]	@ (4259ac <_getpid+0xc>)
  4259a2:	2258      	movs	r2, #88	@ 0x58
  4259a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  4259a8:	601a      	str	r2, [r3, #0]
  4259aa:	4770      	bx	lr
  4259ac:	2004e3e4 	.word	0x2004e3e4

004259b0 <_isatty>:
  4259b0:	4b02      	ldr	r3, [pc, #8]	@ (4259bc <_isatty+0xc>)
  4259b2:	2258      	movs	r2, #88	@ 0x58
  4259b4:	2000      	movs	r0, #0
  4259b6:	601a      	str	r2, [r3, #0]
  4259b8:	4770      	bx	lr
  4259ba:	bf00      	nop
  4259bc:	2004e3e4 	.word	0x2004e3e4

004259c0 <_kill>:
  4259c0:	4b02      	ldr	r3, [pc, #8]	@ (4259cc <_kill+0xc>)
  4259c2:	2258      	movs	r2, #88	@ 0x58
  4259c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  4259c8:	601a      	str	r2, [r3, #0]
  4259ca:	4770      	bx	lr
  4259cc:	2004e3e4 	.word	0x2004e3e4

004259d0 <_lseek>:
  4259d0:	4b02      	ldr	r3, [pc, #8]	@ (4259dc <_lseek+0xc>)
  4259d2:	2258      	movs	r2, #88	@ 0x58
  4259d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  4259d8:	601a      	str	r2, [r3, #0]
  4259da:	4770      	bx	lr
  4259dc:	2004e3e4 	.word	0x2004e3e4

004259e0 <_read>:
  4259e0:	4b02      	ldr	r3, [pc, #8]	@ (4259ec <_read+0xc>)
  4259e2:	2258      	movs	r2, #88	@ 0x58
  4259e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  4259e8:	601a      	str	r2, [r3, #0]
  4259ea:	4770      	bx	lr
  4259ec:	2004e3e4 	.word	0x2004e3e4

004259f0 <_sbrk>:
  4259f0:	4a05      	ldr	r2, [pc, #20]	@ (425a08 <_sbrk+0x18>)
  4259f2:	4603      	mov	r3, r0
  4259f4:	6810      	ldr	r0, [r2, #0]
  4259f6:	b110      	cbz	r0, 4259fe <_sbrk+0xe>
  4259f8:	4403      	add	r3, r0
  4259fa:	6013      	str	r3, [r2, #0]
  4259fc:	4770      	bx	lr
  4259fe:	4803      	ldr	r0, [pc, #12]	@ (425a0c <_sbrk+0x1c>)
  425a00:	4403      	add	r3, r0
  425a02:	6013      	str	r3, [r2, #0]
  425a04:	4770      	bx	lr
  425a06:	bf00      	nop
  425a08:	2004e3ec 	.word	0x2004e3ec
  425a0c:	20001000 	.word	0x20001000

00425a10 <_write>:
  425a10:	4b02      	ldr	r3, [pc, #8]	@ (425a1c <_write+0xc>)
  425a12:	2258      	movs	r2, #88	@ 0x58
  425a14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  425a18:	601a      	str	r2, [r3, #0]
  425a1a:	4770      	bx	lr
  425a1c:	2004e3e4 	.word	0x2004e3e4

00425a20 <_exit>:
  425a20:	e7fe      	b.n	425a20 <_exit>
  425a22:	bf00      	nop

00425a24 <ns_core_check_api>:
 * param oldest
 * param newest
 * return uint32_t
 */
extern uint32_t ns_core_check_api(
    const ns_core_api_t *submitted, const ns_core_api_t *oldest, const ns_core_api_t *newest) {
  425a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    // ns_lp_printf("submitted->apiId: %x\n", submitted->apiId);
    // ns_lp_printf("newest->apiId: %x\n", newest->apiId);
    if (submitted->apiId != newest->apiId) {
  425a28:	6813      	ldr	r3, [r2, #0]
  425a2a:	6804      	ldr	r4, [r0, #0]
  425a2c:	429c      	cmp	r4, r3
  425a2e:	d12e      	bne.n	425a8e <ns_core_check_api+0x6a>
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
  425a30:	2300      	movs	r3, #0
  425a32:	461f      	mov	r7, r3
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
  425a34:	461d      	mov	r5, r3
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
  425a36:	88c6      	ldrh	r6, [r0, #6]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
  425a38:	88cc      	ldrh	r4, [r1, #6]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
  425a3a:	ea56 470f 	orrs.w	r7, r6, pc, lsl #16
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
  425a3e:	ea54 450f 	orrs.w	r5, r4, pc, lsl #16
    uint64_t cMajor = (uint64_t)c->major;
  425a42:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
  425a46:	8900      	ldrh	r0, [r0, #8]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
  425a48:	f8b1 e008 	ldrh.w	lr, [r1, #8]
    uint64_t nMajor = (uint64_t)n->major;
  425a4c:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
  425a50:	1999      	adds	r1, r3, r6
  425a52:	1809      	adds	r1, r1, r0
  425a54:	eb48 0607 	adc.w	r6, r8, r7
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
  425a58:	1918      	adds	r0, r3, r4
  425a5a:	eb10 000e 	adds.w	r0, r0, lr
  425a5e:	eb4c 0405 	adc.w	r4, ip, r5
    } else if (c64 < n64) {
  425a62:	4281      	cmp	r1, r0
  425a64:	eb76 0404 	sbcs.w	r4, r6, r4
  425a68:	d311      	bcc.n	425a8e <ns_core_check_api+0x6a>
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
  425a6a:	461d      	mov	r5, r3
  425a6c:	88d4      	ldrh	r4, [r2, #6]
    uint64_t nMajor = (uint64_t)n->major;
  425a6e:	8890      	ldrh	r0, [r2, #4]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
  425a70:	ea54 450f 	orrs.w	r5, r4, pc, lsl #16
  425a74:	8912      	ldrh	r2, [r2, #8]
  425a76:	191b      	adds	r3, r3, r4
  425a78:	189b      	adds	r3, r3, r2
  425a7a:	eb40 0205 	adc.w	r2, r0, r5
    } else if (c64 < n64) {
  425a7e:	428b      	cmp	r3, r1
  425a80:	41b2      	sbcs	r2, r6
  425a82:	bf34      	ite	cc
  425a84:	2001      	movcc	r0, #1
  425a86:	2000      	movcs	r0, #0
  425a88:	0040      	lsls	r0, r0, #1
        // submitted version is higher than newest supported version
        return NS_STATUS_INVALID_VERSION;
    }

    return NS_STATUS_SUCCESS;
}
  425a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NS_STATUS_INVALID_VERSION;
  425a8e:	2002      	movs	r0, #2
}
  425a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00425a94 <ns_core_init>:
uint32_t ns_core_init(ns_core_config_t *cfg) {
#ifndef NS_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (cfg == NULL) {
  425a94:	b340      	cbz	r0, 425ae8 <ns_core_init+0x54>
        return NS_STATUS_INVALID_HANDLE;
    }

    // check API version
    if (ns_core_check_api(cfg->api, &ns_core_oldest_supported_version, &ns_core_current_version)) {
  425a96:	6802      	ldr	r2, [r0, #0]
    if (submitted->apiId != newest->apiId) {
  425a98:	6813      	ldr	r3, [r2, #0]
  425a9a:	f5b3 0f4a 	cmp.w	r3, #13238272	@ 0xca0000
  425a9e:	d121      	bne.n	425ae4 <ns_core_init+0x50>
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
  425aa0:	2300      	movs	r3, #0
  425aa2:	4619      	mov	r1, r3
  425aa4:	88d0      	ldrh	r0, [r2, #6]
uint32_t ns_core_init(ns_core_config_t *cfg) {
  425aa6:	b530      	push	{r4, r5, lr}
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
  425aa8:	ea50 410f 	orrs.w	r1, r0, pc, lsl #16
  425aac:	f8b2 e008 	ldrh.w	lr, [r2, #8]
  425ab0:	181b      	adds	r3, r3, r0
    uint64_t cMajor = (uint64_t)c->major;
  425ab2:	f8b2 c004 	ldrh.w	ip, [r2, #4]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
  425ab6:	eb13 030e 	adds.w	r3, r3, lr
  425aba:	eb4c 0101 	adc.w	r1, ip, r1
    if (c64 == n64) {
  425abe:	1e58      	subs	r0, r3, #1
  425ac0:	4308      	orrs	r0, r1
  425ac2:	d005      	beq.n	425ad0 <ns_core_init+0x3c>
    } else if (c64 < n64) {
  425ac4:	3b01      	subs	r3, #1
  425ac6:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
  425aca:	b109      	cbz	r1, 425ad0 <ns_core_init+0x3c>
        return NS_STATUS_INVALID_VERSION;
  425acc:	2002      	movs	r0, #2
    g_ns_state.tempcoCurrentlyEnabled = false;
    g_ns_state.cryptoWantsToBeEnabled = true; // reset state of Crypto is 'on'
    g_ns_state.cryptoCurrentlyEnabled = true;
    g_ns_state.ap3BurstModeInitialized = false;
    return NS_STATUS_SUCCESS;
}
  425ace:	bd30      	pop	{r4, r5, pc}
    g_ns_state.initialized = true;
  425ad0:	2401      	movs	r4, #1
    g_ns_state.uartPrintCurrentlyEnabled = false;
  425ad2:	f04f 0100 	mov.w	r1, #0
    g_ns_state.api = cfg->api;
  425ad6:	4b05      	ldr	r3, [pc, #20]	@ (425aec <ns_core_init+0x58>)
    g_ns_state.initialized = true;
  425ad8:	4d05      	ldr	r5, [pc, #20]	@ (425af0 <ns_core_init+0x5c>)
    return NS_STATUS_SUCCESS;
  425ada:	2000      	movs	r0, #0
    g_ns_state.initialized = true;
  425adc:	e883 0034 	stmia.w	r3, {r2, r4, r5}
    g_ns_state.uartPrintCurrentlyEnabled = false;
  425ae0:	8199      	strh	r1, [r3, #12]
}
  425ae2:	bd30      	pop	{r4, r5, pc}
        return NS_STATUS_INVALID_VERSION;
  425ae4:	2002      	movs	r0, #2
}
  425ae6:	4770      	bx	lr
        return NS_STATUS_INVALID_HANDLE;
  425ae8:	2001      	movs	r0, #1
  425aea:	4770      	bx	lr
  425aec:	2004e3f0 	.word	0x2004e3f0
  425af0:	00010100 	.word	0x00010100

00425af4 <ns_core_fail_loop>:

void ns_core_fail_loop() {
    while (1)
  425af4:	e7fe      	b.n	425af4 <ns_core_fail_loop>
  425af6:	bf00      	nop

00425af8 <ns_power_config>:
// Main function for power configuration
uint32_t ns_power_config(const ns_power_config_t *pCfg) {
    uint32_t ui32ReturnStatus = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (pCfg == NULL) {
  425af8:	b188      	cbz	r0, 425b1e <ns_power_config+0x26>
uint32_t ns_power_config(const ns_power_config_t *pCfg) {
  425afa:	b510      	push	{r4, lr}
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(
  425afc:	4a0a      	ldr	r2, [pc, #40]	@ (425b28 <ns_power_config+0x30>)
  425afe:	4604      	mov	r4, r0
  425b00:	490a      	ldr	r1, [pc, #40]	@ (425b2c <ns_power_config+0x34>)
  425b02:	6800      	ldr	r0, [r0, #0]
  425b04:	f7ff ff8e 	bl	425a24 <ns_core_check_api>
  425b08:	b938      	cbnz	r0, 425b1a <ns_power_config+0x22>
            pCfg->api, &ns_power_oldest_supported_version, &ns_power_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if (!ns_core_initialized()) {
  425b0a:	f000 f8d9 	bl	425cc0 <ns_core_initialized>
  425b0e:	b140      	cbz	r0, 425b22 <ns_power_config+0x2a>
        // Power needs ns_core to be initialized first
        return NS_STATUS_INIT_FAILED;
    }
#endif

    ui32ReturnStatus = ns_power_platform_config(pCfg);
  425b10:	4620      	mov	r0, r4

    return ui32ReturnStatus;
}
  425b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui32ReturnStatus = ns_power_platform_config(pCfg);
  425b16:	f000 b80d 	b.w	425b34 <ns_power_platform_config>
        return NS_STATUS_INVALID_VERSION;
  425b1a:	2002      	movs	r0, #2
}
  425b1c:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_HANDLE;
  425b1e:	2001      	movs	r0, #1
}
  425b20:	4770      	bx	lr
        return NS_STATUS_INIT_FAILED;
  425b22:	2004      	movs	r0, #4
}
  425b24:	bd10      	pop	{r4, pc}
  425b26:	bf00      	nop
  425b28:	0043c75c 	.word	0x0043c75c
  425b2c:	0043c768 	.word	0x0043c768

00425b30 <ns_deep_sleep>:
 * systems as needed.
 *
 */
extern void ns_platform_deep_sleep(void);

void ns_deep_sleep(void) { ns_platform_deep_sleep(); }
  425b30:	f000 b8b2 	b.w	425c98 <ns_platform_deep_sleep>

00425b34 <ns_power_platform_config>:
    }
#endif
}

// Main function for power configuration
uint32_t ns_power_platform_config(const ns_power_config_t *pCfg) {
  425b34:	b5f0      	push	{r4, r5, r6, r7, lr}
  425b36:	b083      	sub	sp, #12
    uint32_t ui32ReturnStatus = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (pCfg == NULL) {
  425b38:	2800      	cmp	r0, #0
  425b3a:	d06d      	beq.n	425c18 <ns_power_platform_config+0xe4>
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(
  425b3c:	4604      	mov	r4, r0
  425b3e:	4a49      	ldr	r2, [pc, #292]	@ (425c64 <ns_power_platform_config+0x130>)
  425b40:	4949      	ldr	r1, [pc, #292]	@ (425c68 <ns_power_platform_config+0x134>)
  425b42:	6800      	ldr	r0, [r0, #0]
  425b44:	f7ff ff6e 	bl	425a24 <ns_core_check_api>
  425b48:	4605      	mov	r5, r0
  425b4a:	2800      	cmp	r0, #0
  425b4c:	d160      	bne.n	425c10 <ns_power_platform_config+0xdc>
            pCfg->api, &ns_power_oldest_supported_version, &ns_power_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if (!ns_core_initialized()) {
  425b4e:	f000 f8b7 	bl	425cc0 <ns_core_initialized>
  425b52:	2800      	cmp	r0, #0
  425b54:	d06b      	beq.n	425c2e <ns_power_platform_config+0xfa>
        // Power needs ns_core to be initialized first
        return NS_STATUS_INIT_FAILED;
    }
#endif

    am_bsp_low_power_init();
  425b56:	f004 ff85 	bl	42aa64 <am_bsp_low_power_init>

    // configure SRAM & other memories
    if (pCfg->bNeedSharedSRAM == false) {
  425b5a:	79a3      	ldrb	r3, [r4, #6]
  425b5c:	2b00      	cmp	r3, #0
  425b5e:	d05f      	beq.n	425c20 <ns_power_platform_config+0xec>
            .eActiveWithMCU   = AM_HAL_PWRCTRL_SRAM_NONE,
            .eActiveWithGFX   = AM_HAL_PWRCTRL_SRAM_NONE,
            .eActiveWithDISP  = AM_HAL_PWRCTRL_SRAM_NONE,          
            .eSRAMRetain = AM_HAL_PWRCTRL_SRAM_3M
        };       
        am_hal_pwrctrl_sram_config(&SRAMMemCfg);
  425b60:	466e      	mov	r6, sp
         am_hal_pwrctrl_sram_memcfg_t SRAMMemCfg = {
  425b62:	4b42      	ldr	r3, [pc, #264]	@ (425c6c <ns_power_platform_config+0x138>)
  425b64:	e893 0003 	ldmia.w	r3, {r0, r1}
  425b68:	9000      	str	r0, [sp, #0]
        am_hal_pwrctrl_sram_config(&SRAMMemCfg);
  425b6a:	4630      	mov	r0, r6
         am_hal_pwrctrl_sram_memcfg_t SRAMMemCfg = {
  425b6c:	f88d 1004 	strb.w	r1, [sp, #4]
        am_hal_pwrctrl_sram_config(&SRAMMemCfg);
  425b70:	f000 fb24 	bl	4261bc <am_hal_pwrctrl_sram_config>

    }
    #define ALL_RETAIN 1
    am_hal_pwrctrl_mcu_memory_config_t McuMemCfg =
  425b74:	4b3e      	ldr	r3, [pc, #248]	@ (425c70 <ns_power_platform_config+0x13c>)
    // Configure the cache, Enable the I-Cache and D-Cache.
    am_hal_cachectrl_icache_enable();
    am_hal_cachectrl_dcache_enable(true);

    am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_DIS_PERIPHS_ALL, 0);
    MCUCTRL->XTALCTRL = 0;
  425b76:	4f3f      	ldr	r7, [pc, #252]	@ (425c74 <ns_power_platform_config+0x140>)
    am_hal_pwrctrl_mcu_memory_config_t McuMemCfg =
  425b78:	e893 0003 	ldmia.w	r3, {r0, r1}
  425b7c:	9000      	str	r0, [sp, #0]
    am_hal_pwrctrl_mcu_memory_config(&McuMemCfg);
  425b7e:	4630      	mov	r0, r6
    MCUCTRL->XTALCTRL = 0;
  425b80:	2600      	movs	r6, #0
    am_hal_pwrctrl_mcu_memory_config_t McuMemCfg =
  425b82:	f88d 1004 	strb.w	r1, [sp, #4]
    am_hal_pwrctrl_mcu_memory_config(&McuMemCfg);
  425b86:	f000 fa7d 	bl	426084 <am_hal_pwrctrl_mcu_memory_config>
    am_hal_cachectrl_icache_enable();
  425b8a:	f002 fcc5 	bl	428518 <am_hal_cachectrl_icache_enable>
    am_hal_cachectrl_dcache_enable(true);
  425b8e:	2001      	movs	r0, #1
  425b90:	f002 fce4 	bl	42855c <am_hal_cachectrl_dcache_enable>
    am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_DIS_PERIPHS_ALL, 0);
  425b94:	2100      	movs	r1, #0
  425b96:	2003      	movs	r0, #3
  425b98:	f001 fd7c 	bl	427694 <am_hal_pwrctrl_control>
    am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_XTAL_PWDN_DEEPSLEEP, 0);
  425b9c:	4631      	mov	r1, r6
  425b9e:	2002      	movs	r0, #2
    MCUCTRL->XTALCTRL = 0;
  425ba0:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
    am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_XTAL_PWDN_DEEPSLEEP, 0);
  425ba4:	f001 fd76 	bl	427694 <am_hal_pwrctrl_control>
    am_hal_rtc_osc_disable();
  425ba8:	f002 fe54 	bl	428854 <am_hal_rtc_osc_disable>
    VCOMP->PWDKEY = VCOMP_PWDKEY_PWDKEY_Key;
  425bac:	2237      	movs	r2, #55	@ 0x37
  425bae:	4b32      	ldr	r3, [pc, #200]	@ (425c78 <ns_power_platform_config+0x144>)
    MCUCTRL->DBGCTRL = 0;
    // Powering down various peripheral power domains
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DEBUG);
  425bb0:	201c      	movs	r0, #28
    VCOMP->PWDKEY = VCOMP_PWDKEY_PWDKEY_Key;
  425bb2:	609a      	str	r2, [r3, #8]
    MCUCTRL->DBGCTRL = 0;
  425bb4:	f8c7 6250 	str.w	r6, [r7, #592]	@ 0x250
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DEBUG);
  425bb8:	f000 ffc2 	bl	426b40 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_CRYPTO);
  425bbc:	2017      	movs	r0, #23
  425bbe:	f000 ffbf 	bl	426b40 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_OTP); 
  425bc2:	201d      	movs	r0, #29
  425bc4:	f000 ffbc 	bl	426b40 <am_hal_pwrctrl_periph_disable>
    am_hal_sysctrl_fpu_enable();
  425bc8:	f002 fef6 	bl	4289b8 <am_hal_sysctrl_fpu_enable>
    am_hal_sysctrl_fpu_stacking_enable(true);
  425bcc:	2001      	movs	r0, #1
  425bce:	f002 ff01 	bl	4289d4 <am_hal_sysctrl_fpu_stacking_enable>

    // configure peripherals
    // ns_power_down_peripherals(pCfg);

    // Configure power mode
    ns_delay_us(10000);
  425bd2:	f242 7010 	movw	r0, #10000	@ 0x2710
  425bd6:	f001 fedb 	bl	427990 <am_util_delay_us>
    if ((eAIPowerMode == NS_MAXIMUM_PERF) || (eAIPowerMode == NS_MEDIUM_PERF)) {
  425bda:	7923      	ldrb	r3, [r4, #4]
  425bdc:	3b01      	subs	r3, #1
  425bde:	2b01      	cmp	r3, #1
  425be0:	d929      	bls.n	425c36 <ns_power_platform_config+0x102>
        ns_lp_printf("Setting CPU Perf mode to Low Power\n");
  425be2:	4826      	ldr	r0, [pc, #152]	@ (425c7c <ns_power_platform_config+0x148>)
  425be4:	f002 fc2e 	bl	428444 <am_util_stdio_printf>
        retval = am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_LOW_POWER);
  425be8:	2001      	movs	r0, #1
  425bea:	f000 f931 	bl	425e50 <am_hal_pwrctrl_mcu_mode_select>
  425bee:	4606      	mov	r6, r0
        ns_lp_printf("Set CPU Perf mode to Low Power ret = %d\n", retval);
  425bf0:	4823      	ldr	r0, [pc, #140]	@ (425c80 <ns_power_platform_config+0x14c>)
  425bf2:	4631      	mov	r1, r6
  425bf4:	f002 fc26 	bl	428444 <am_util_stdio_printf>
    NS_TRY(ns_set_performance_mode(pCfg->eAIPowerMode), "Set CPU Perf mode failed.");
  425bf8:	bb6e      	cbnz	r6, 425c56 <ns_power_platform_config+0x122>

    if (pCfg->bEnableTempCo) {
  425bfa:	7b63      	ldrb	r3, [r4, #13]
  425bfc:	bb3b      	cbnz	r3, 425c4e <ns_power_platform_config+0x11a>
    g_ns_state.cryptoWantsToBeEnabled = pCfg->bNeedCrypto;
    g_ns_state.cryptoCurrentlyEnabled = pCfg->bNeedCrypto;
    g_ns_state.itmPrintWantsToBeEnabled = pCfg->bNeedITM;

    return ui32ReturnStatus;
}
  425bfe:	4628      	mov	r0, r5
    g_ns_state.cryptoWantsToBeEnabled = pCfg->bNeedCrypto;
  425c00:	4b20      	ldr	r3, [pc, #128]	@ (425c84 <ns_power_platform_config+0x150>)
  425c02:	79e2      	ldrb	r2, [r4, #7]
    g_ns_state.itmPrintWantsToBeEnabled = pCfg->bNeedITM;
  425c04:	7ba1      	ldrb	r1, [r4, #14]
    g_ns_state.cryptoWantsToBeEnabled = pCfg->bNeedCrypto;
  425c06:	725a      	strb	r2, [r3, #9]
    g_ns_state.cryptoCurrentlyEnabled = pCfg->bNeedCrypto;
  425c08:	729a      	strb	r2, [r3, #10]
    g_ns_state.itmPrintWantsToBeEnabled = pCfg->bNeedITM;
  425c0a:	7159      	strb	r1, [r3, #5]
}
  425c0c:	b003      	add	sp, #12
  425c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NS_STATUS_INVALID_VERSION;
  425c10:	2502      	movs	r5, #2
}
  425c12:	4628      	mov	r0, r5
  425c14:	b003      	add	sp, #12
  425c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NS_STATUS_INVALID_HANDLE;
  425c18:	2501      	movs	r5, #1
}
  425c1a:	4628      	mov	r0, r5
  425c1c:	b003      	add	sp, #12
  425c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_pwrctrl_sram_memcfg_t SRAMMemCfg = {
  425c20:	466e      	mov	r6, sp
  425c22:	9500      	str	r5, [sp, #0]
        am_hal_pwrctrl_sram_config(&SRAMMemCfg);
  425c24:	4630      	mov	r0, r6
        am_hal_pwrctrl_sram_memcfg_t SRAMMemCfg = {
  425c26:	7135      	strb	r5, [r6, #4]
        am_hal_pwrctrl_sram_config(&SRAMMemCfg);
  425c28:	f000 fac8 	bl	4261bc <am_hal_pwrctrl_sram_config>
  425c2c:	e7a2      	b.n	425b74 <ns_power_platform_config+0x40>
        return NS_STATUS_INIT_FAILED;
  425c2e:	2504      	movs	r5, #4
}
  425c30:	4628      	mov	r0, r5
  425c32:	b003      	add	sp, #12
  425c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ns_lp_printf("Setting CPU Perf mode to High Performance\n");
  425c36:	4814      	ldr	r0, [pc, #80]	@ (425c88 <ns_power_platform_config+0x154>)
  425c38:	f002 fc04 	bl	428444 <am_util_stdio_printf>
        retval = am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE);
  425c3c:	2002      	movs	r0, #2
  425c3e:	f000 f907 	bl	425e50 <am_hal_pwrctrl_mcu_mode_select>
  425c42:	4606      	mov	r6, r0
        ns_lp_printf("Set CPU Perf mode to High Performance ret = %d\n", retval);
  425c44:	4811      	ldr	r0, [pc, #68]	@ (425c8c <ns_power_platform_config+0x158>)
  425c46:	4631      	mov	r1, r6
  425c48:	f002 fbfc 	bl	428444 <am_util_stdio_printf>
    return retval;
  425c4c:	e7d4      	b.n	425bf8 <ns_power_platform_config+0xc4>
        ns_lp_printf("WARNING TempCo not supported.\n");
  425c4e:	4810      	ldr	r0, [pc, #64]	@ (425c90 <ns_power_platform_config+0x15c>)
  425c50:	f002 fbf8 	bl	428444 <am_util_stdio_printf>
  425c54:	e7d3      	b.n	425bfe <ns_power_platform_config+0xca>
    NS_TRY(ns_set_performance_mode(pCfg->eAIPowerMode), "Set CPU Perf mode failed.");
  425c56:	480f      	ldr	r0, [pc, #60]	@ (425c94 <ns_power_platform_config+0x160>)
  425c58:	f002 fbf4 	bl	428444 <am_util_stdio_printf>
  425c5c:	f7ff ff4a 	bl	425af4 <ns_core_fail_loop>
  425c60:	e7cb      	b.n	425bfa <ns_power_platform_config+0xc6>
  425c62:	bf00      	nop
  425c64:	0043c75c 	.word	0x0043c75c
  425c68:	0043c768 	.word	0x0043c768
  425c6c:	00434444 	.word	0x00434444
  425c70:	0043444c 	.word	0x0043444c
  425c74:	40020000 	.word	0x40020000
  425c78:	4000c000 	.word	0x4000c000
  425c7c:	00434f3c 	.word	0x00434f3c
  425c80:	00434f60 	.word	0x00434f60
  425c84:	2004e3f0 	.word	0x2004e3f0
  425c88:	00434ee0 	.word	0x00434ee0
  425c8c:	00434f0c 	.word	0x00434f0c
  425c90:	00434fa8 	.word	0x00434fa8
  425c94:	00434f8c 	.word	0x00434f8c

00425c98 <ns_platform_deep_sleep>:
    // if (g_ns_state.cryptoCurrentlyEnabled) {
    //     am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
    //     g_ns_state.cryptoCurrentlyEnabled = false;
    // }

    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
  425c98:	2001      	movs	r0, #1
  425c9a:	f002 bde5 	b.w	428868 <am_hal_sysctrl_sleep>
  425c9e:	bf00      	nop

00425ca0 <ns_malloc>:
/// Empty for now, but placeholder in case we need multi-heap support
uint8_t ns_malloc_init() { return 0; };

int total_allocated = 0;
/// Simple pvPortMalloc wrapper
void *ns_malloc(size_t size) {
  425ca0:	b510      	push	{r4, lr}
    void *ptr = NULL;

    if (size > 0) {
  425ca2:	4604      	mov	r4, r0
  425ca4:	b108      	cbz	r0, 425caa <ns_malloc+0xa>
        ptr = pvTasklessPortMalloc(size);
  425ca6:	f00d fdaf 	bl	433808 <pvTasklessPortMalloc>
    } // else NULL if there was an error
    total_allocated += size;
  425caa:	4a02      	ldr	r2, [pc, #8]	@ (425cb4 <ns_malloc+0x14>)
  425cac:	6813      	ldr	r3, [r2, #0]
  425cae:	4423      	add	r3, r4
  425cb0:	6013      	str	r3, [r2, #0]
    // ns_lp_printf("ns_malloc(%d) total %d returning 0x%x\n", size, total_allocated, ptr);
    return ptr;
}
  425cb2:	bd10      	pop	{r4, pc}
  425cb4:	2004e400 	.word	0x2004e400

00425cb8 <ns_free>:

/// Simple vPortFree wrapper
void ns_free(void *ptr) {
    if (ptr) {
  425cb8:	b108      	cbz	r0, 425cbe <ns_free+0x6>
        vTasklessPortFree(ptr);
  425cba:	f00d be55 	b.w	433968 <vTasklessPortFree>
    }
    // ns_lp_printf("ns_free(0x%x)\n", ptr);
}
  425cbe:	4770      	bx	lr

00425cc0 <ns_core_initialized>:
const ns_core_api_t ns_timer_current_version = {
    .apiId = NS_TIMER_API_ID, .version = NS_TIMER_V1_0_0};

ns_timer_config_t *ns_timer_config[NS_TIMER_TEMPCO + 1];

extern bool ns_core_initialized(void) { return g_ns_state.initialized; }
  425cc0:	4b01      	ldr	r3, [pc, #4]	@ (425cc8 <ns_core_initialized+0x8>)
  425cc2:	7918      	ldrb	r0, [r3, #4]
  425cc4:	4770      	bx	lr
  425cc6:	bf00      	nop
  425cc8:	2004e3f0 	.word	0x2004e3f0

00425ccc <ns_timer_init>:

uint32_t ns_timer_init(ns_timer_config_t *cfg) {
    uint32_t ui32Status = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
  425ccc:	b1b0      	cbz	r0, 425cfc <ns_timer_init+0x30>
uint32_t ns_timer_init(ns_timer_config_t *cfg) {
  425cce:	b510      	push	{r4, lr}
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(
  425cd0:	4a0d      	ldr	r2, [pc, #52]	@ (425d08 <ns_timer_init+0x3c>)
  425cd2:	4604      	mov	r4, r0
  425cd4:	490d      	ldr	r1, [pc, #52]	@ (425d0c <ns_timer_init+0x40>)
  425cd6:	6800      	ldr	r0, [r0, #0]
  425cd8:	f7ff fea4 	bl	425a24 <ns_core_check_api>
  425cdc:	b990      	cbnz	r0, 425d04 <ns_timer_init+0x38>
            cfg->api, &ns_timer_oldest_supported_version, &ns_timer_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if (cfg->timer > NS_TIMER_TEMPCO) {
  425cde:	7923      	ldrb	r3, [r4, #4]
  425ce0:	2b03      	cmp	r3, #3
  425ce2:	d80d      	bhi.n	425d00 <ns_timer_init+0x34>
        return NS_STATUS_INVALID_CONFIG;
    }
    if ((cfg->enableInterrupt) && (cfg->callback == NULL)) {
  425ce4:	7962      	ldrb	r2, [r4, #5]
  425ce6:	b10a      	cbz	r2, 425cec <ns_timer_init+0x20>
  425ce8:	68e2      	ldr	r2, [r4, #12]
  425cea:	b14a      	cbz	r2, 425d00 <ns_timer_init+0x34>
        return NS_STATUS_INVALID_CONFIG;
    }
#endif

    ns_timer_config[cfg->timer] = cfg;
  425cec:	4a08      	ldr	r2, [pc, #32]	@ (425d10 <ns_timer_init+0x44>)

    ui32Status = ns_timer_platform_init(cfg);
  425cee:	4620      	mov	r0, r4
    ns_timer_config[cfg->timer] = cfg;
  425cf0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

    return ui32Status;
}
  425cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui32Status = ns_timer_platform_init(cfg);
  425cf8:	f000 b848 	b.w	425d8c <ns_timer_platform_init>
        return NS_STATUS_INVALID_HANDLE;
  425cfc:	2001      	movs	r0, #1
}
  425cfe:	4770      	bx	lr
        return NS_STATUS_INVALID_CONFIG;
  425d00:	2003      	movs	r0, #3
}
  425d02:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_VERSION;
  425d04:	2002      	movs	r0, #2
}
  425d06:	bd10      	pop	{r4, pc}
  425d08:	0043c780 	.word	0x0043c780
  425d0c:	0043c78c 	.word	0x0043c78c
  425d10:	2004e408 	.word	0x2004e408

00425d14 <am_timer01_isr>:
void am_timer01_isr(void) {
    ns_timers_e timerNum = ns_timer_config[1]->timer;
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
  425d14:	2002      	movs	r0, #2
void am_timer01_isr(void) {
  425d16:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[1]->timer;
  425d18:	4c07      	ldr	r4, [pc, #28]	@ (425d38 <am_timer01_isr+0x24>)
  425d1a:	6863      	ldr	r3, [r4, #4]
  425d1c:	791d      	ldrb	r5, [r3, #4]
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
  425d1e:	006b      	lsls	r3, r5, #1
  425d20:	4098      	lsls	r0, r3
  425d22:	f003 f9fd 	bl	429120 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
  425d26:	4628      	mov	r0, r5
  425d28:	f003 f9aa 	bl	429080 <am_hal_timer_clear>

    ns_timer_config[1]->callback(ns_timer_config[1]);
  425d2c:	6860      	ldr	r0, [r4, #4]
}
  425d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[1]->callback(ns_timer_config[1]);
  425d32:	68c3      	ldr	r3, [r0, #12]
  425d34:	4718      	bx	r3
  425d36:	bf00      	nop
  425d38:	2004e408 	.word	0x2004e408

00425d3c <am_timer02_isr>:
void am_timer02_isr(void) {
    ns_timers_e timerNum = ns_timer_config[2]->timer;
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
  425d3c:	2002      	movs	r0, #2
void am_timer02_isr(void) {
  425d3e:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[2]->timer;
  425d40:	4c07      	ldr	r4, [pc, #28]	@ (425d60 <am_timer02_isr+0x24>)
  425d42:	68a3      	ldr	r3, [r4, #8]
  425d44:	791d      	ldrb	r5, [r3, #4]
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
  425d46:	006b      	lsls	r3, r5, #1
  425d48:	4098      	lsls	r0, r3
  425d4a:	f003 f9e9 	bl	429120 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
  425d4e:	4628      	mov	r0, r5
  425d50:	f003 f996 	bl	429080 <am_hal_timer_clear>

    ns_timer_config[2]->callback(ns_timer_config[2]);
  425d54:	68a0      	ldr	r0, [r4, #8]
}
  425d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[2]->callback(ns_timer_config[2]);
  425d5a:	68c3      	ldr	r3, [r0, #12]
  425d5c:	4718      	bx	r3
  425d5e:	bf00      	nop
  425d60:	2004e408 	.word	0x2004e408

00425d64 <am_timer03_isr>:
void am_timer03_isr(void) {
    ns_timers_e timerNum = ns_timer_config[3]->timer;
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
  425d64:	2002      	movs	r0, #2
void am_timer03_isr(void) {
  425d66:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[3]->timer;
  425d68:	4c07      	ldr	r4, [pc, #28]	@ (425d88 <am_timer03_isr+0x24>)
  425d6a:	68e3      	ldr	r3, [r4, #12]
  425d6c:	791d      	ldrb	r5, [r3, #4]
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
  425d6e:	006b      	lsls	r3, r5, #1
  425d70:	4098      	lsls	r0, r3
  425d72:	f003 f9d5 	bl	429120 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
  425d76:	4628      	mov	r0, r5
  425d78:	f003 f982 	bl	429080 <am_hal_timer_clear>

    ns_timer_config[2]->callback(ns_timer_config[3]);
  425d7c:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
}
  425d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[2]->callback(ns_timer_config[3]);
  425d84:	68db      	ldr	r3, [r3, #12]
  425d86:	4718      	bx	r3
  425d88:	2004e408 	.word	0x2004e408

00425d8c <ns_timer_platform_init>:

uint32_t ns_timer_platform_init(ns_timer_config_t *cfg) {
  425d8c:	b570      	push	{r4, r5, r6, lr}
  425d8e:	4604      	mov	r4, r0
  425d90:	b086      	sub	sp, #24

    am_hal_timer_config_t TimerConfig;

    // Set the timer configuration
    // The default timer configuration is HFRC_DIV16, EDGE, compares=0, no trig.
    am_hal_timer_default_config_set(&TimerConfig);
  425d92:	4668      	mov	r0, sp
  425d94:	f003 f962 	bl	42905c <am_hal_timer_default_config_set>

    // modify the default
    if (cfg->timer == NS_TIMER_TEMPCO) {
  425d98:	7920      	ldrb	r0, [r4, #4]
  425d9a:	2803      	cmp	r0, #3
        TimerConfig.eInputClock = AM_HAL_TIMER_CLOCK_HFRC_DIV16;
  425d9c:	bf04      	itt	eq
  425d9e:	2301      	moveq	r3, #1
  425da0:	f8ad 3000 	strheq.w	r3, [sp]
    }

    if ((cfg->enableInterrupt)) {
  425da4:	7963      	ldrb	r3, [r4, #5]
  425da6:	b143      	cbz	r3, 425dba <ns_timer_platform_init+0x2e>
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
  425da8:	2102      	movs	r1, #2
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
  425daa:	68a3      	ldr	r3, [r4, #8]
  425dac:	4a1d      	ldr	r2, [pc, #116]	@ (425e24 <ns_timer_platform_init+0x98>)
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
  425dae:	f88d 1002 	strb.w	r1, [sp, #2]
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
  425db2:	fba2 2303 	umull	r2, r3, r2, r3
  425db6:	40cb      	lsrs	r3, r1
  425db8:	9305      	str	r3, [sp, #20]
    }

    ui32Status = am_hal_timer_config(cfg->timer, &TimerConfig);
  425dba:	4669      	mov	r1, sp
  425dbc:	f003 f8fa 	bl	428fb4 <am_hal_timer_config>
    if (ui32Status != AM_HAL_STATUS_SUCCESS) {
  425dc0:	4605      	mov	r5, r0
  425dc2:	bb00      	cbnz	r0, 425e06 <ns_timer_platform_init+0x7a>
    }

    //
    // Stop and clear the timer.
    //
    am_hal_timer_clear(cfg->timer);
  425dc4:	7920      	ldrb	r0, [r4, #4]
  425dc6:	f003 f95b 	bl	429080 <am_hal_timer_clear>

    if ((cfg->enableInterrupt)) {
  425dca:	7963      	ldrb	r3, [r4, #5]
  425dcc:	b913      	cbnz	r3, 425dd4 <ns_timer_platform_init+0x48>
            NVIC_SetPriority(TIMER2_IRQn, AM_IRQ_PRIORITY_DEFAULT);
            NVIC_EnableIRQ(TIMER2_IRQn);
        }
    }
    return ui32Status;
}
  425dce:	4628      	mov	r0, r5
  425dd0:	b006      	add	sp, #24
  425dd2:	bd70      	pop	{r4, r5, r6, pc}
        am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(cfg->timer, AM_HAL_TIMER_COMPARE1));
  425dd4:	2602      	movs	r6, #2
  425dd6:	7920      	ldrb	r0, [r4, #4]
  425dd8:	0040      	lsls	r0, r0, #1
  425dda:	fa06 f000 	lsl.w	r0, r6, r0
  425dde:	f003 f99f 	bl	429120 <am_hal_timer_interrupt_clear>
        am_hal_timer_interrupt_enable(AM_HAL_TIMER_MASK(cfg->timer, AM_HAL_TIMER_COMPARE1));
  425de2:	7920      	ldrb	r0, [r4, #4]
  425de4:	0040      	lsls	r0, r0, #1
  425de6:	fa06 f000 	lsl.w	r0, r6, r0
  425dea:	f003 f98f 	bl	42910c <am_hal_timer_interrupt_enable>
        if (cfg->timer == NS_TIMER_INTERRUPT) {
  425dee:	7923      	ldrb	r3, [r4, #4]
  425df0:	2b01      	cmp	r3, #1
  425df2:	d010      	beq.n	425e16 <ns_timer_platform_init+0x8a>
        } else if (cfg->timer == NS_TIMER_USB) {
  425df4:	2b02      	cmp	r3, #2
  425df6:	d1ea      	bne.n	425dce <ns_timer_platform_init+0x42>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  425df8:	2240      	movs	r2, #64	@ 0x40
  425dfa:	4b0b      	ldr	r3, [pc, #44]	@ (425e28 <ns_timer_platform_init+0x9c>)
  425dfc:	f883 2345 	strb.w	r2, [r3, #837]	@ 0x345
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  425e00:	2220      	movs	r2, #32
  425e02:	609a      	str	r2, [r3, #8]
    __COMPILER_BARRIER();
  425e04:	e7e3      	b.n	425dce <ns_timer_platform_init+0x42>
        ns_lp_printf("Failed to configure TIMER%d, return value=%d\r\n", cfg->timer, ui32Status);
  425e06:	4602      	mov	r2, r0
  425e08:	7921      	ldrb	r1, [r4, #4]
  425e0a:	4808      	ldr	r0, [pc, #32]	@ (425e2c <ns_timer_platform_init+0xa0>)
  425e0c:	f002 fb1a 	bl	428444 <am_util_stdio_printf>
}
  425e10:	4628      	mov	r0, r5
  425e12:	b006      	add	sp, #24
  425e14:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  425e16:	2210      	movs	r2, #16
  425e18:	4b03      	ldr	r3, [pc, #12]	@ (425e28 <ns_timer_platform_init+0x9c>)
  425e1a:	609a      	str	r2, [r3, #8]
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  425e1c:	2240      	movs	r2, #64	@ 0x40
  425e1e:	f883 2344 	strb.w	r2, [r3, #836]	@ 0x344
  425e22:	e7d4      	b.n	425dce <ns_timer_platform_init+0x42>
  425e24:	aaaaaaab 	.word	0xaaaaaaab
  425e28:	e000e100 	.word	0xe000e100
  425e2c:	00434fc8 	.word	0x00434fc8

00425e30 <ns_us_ticker_read>:

uint32_t ns_us_ticker_read(ns_timer_config_t *cfg) {
#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
  425e30:	b140      	cbz	r0, 425e44 <ns_us_ticker_read+0x14>
uint32_t ns_us_ticker_read(ns_timer_config_t *cfg) {
  425e32:	b508      	push	{r3, lr}
        return 0xDEADBEEF;
    }
#endif
    return am_hal_timer_read(cfg->timer) / 6; // 6 ticks per uS
  425e34:	7900      	ldrb	r0, [r0, #4]
  425e36:	f003 f951 	bl	4290dc <am_hal_timer_read>
  425e3a:	4b03      	ldr	r3, [pc, #12]	@ (425e48 <ns_us_ticker_read+0x18>)
  425e3c:	fba3 3000 	umull	r3, r0, r3, r0
  425e40:	0880      	lsrs	r0, r0, #2
}
  425e42:	bd08      	pop	{r3, pc}
        return 0xDEADBEEF;
  425e44:	4801      	ldr	r0, [pc, #4]	@ (425e4c <ns_us_ticker_read+0x1c>)
}
  425e46:	4770      	bx	lr
  425e48:	aaaaaaab 	.word	0xaaaaaaab
  425e4c:	deadbeef 	.word	0xdeadbeef

00425e50 <am_hal_pwrctrl_mcu_mode_select>:
//  Select the MCU power mode.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_mcu_mode_select(am_hal_pwrctrl_mcu_mode_e ePowerMode)
{
  425e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ui32Status;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( (ePowerMode != AM_HAL_PWRCTRL_MCU_MODE_LOW_POWER)      &&
  425e54:	1e43      	subs	r3, r0, #1
  425e56:	2b01      	cmp	r3, #1
{
  425e58:	b082      	sub	sp, #8
    if ( (ePowerMode != AM_HAL_PWRCTRL_MCU_MODE_LOW_POWER)      &&
  425e5a:	d85e      	bhi.n	425f1a <am_hal_pwrctrl_mcu_mode_select+0xca>
    }
#if !defined(APOLLO5_FPGA)
    //
    // We must be using SIMOBUCK in order to go to HP mode.
    //
    if ( (ePowerMode == AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE)   &&
  425e5c:	2802      	cmp	r0, #2
  425e5e:	4605      	mov	r5, r0
  425e60:	d025      	beq.n	425eae <am_hal_pwrctrl_mcu_mode_select+0x5e>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Check if the request mode is already selected.  If so, return SUCCESS.
    //
    if ( ePowerMode == g_eCurMcuPwrMode )
  425e62:	4f44      	ldr	r7, [pc, #272]	@ (425f74 <am_hal_pwrctrl_mcu_mode_select+0x124>)
  425e64:	783b      	ldrb	r3, [r7, #0]
  425e66:	2b01      	cmp	r3, #1
  425e68:	d05c      	beq.n	425f24 <am_hal_pwrctrl_mcu_mode_select+0xd4>
    AM_CRITICAL_BEGIN
  425e6a:	f002 fceb 	bl	428844 <am_hal_interrupt_master_disable>
        PWRCTRL->MCUPERFREQ_b.MCUPERFREQ = ePowerMode;
  425e6e:	2201      	movs	r2, #1
  425e70:	4e41      	ldr	r6, [pc, #260]	@ (425f78 <am_hal_pwrctrl_mcu_mode_select+0x128>)
    AM_CRITICAL_BEGIN
  425e72:	9001      	str	r0, [sp, #4]
        PWRCTRL->MCUPERFREQ_b.MCUPERFREQ = ePowerMode;
  425e74:	6833      	ldr	r3, [r6, #0]
  425e76:	2414      	movs	r4, #20
  425e78:	f362 0301 	bfi	r3, r2, #0, #2
  425e7c:	6033      	str	r3, [r6, #0]
        for ( uint32_t i = 0; i < AM_HAL_PWRCTRL_PERF_SWITCH_WAIT_US; i++ )
  425e7e:	e004      	b.n	425e8a <am_hal_pwrctrl_mcu_mode_select+0x3a>
            am_hal_delay_us(1);
  425e80:	2001      	movs	r0, #1
  425e82:	f001 fcf3 	bl	42786c <am_hal_delay_us>
        for ( uint32_t i = 0; i < AM_HAL_PWRCTRL_PERF_SWITCH_WAIT_US; i++ )
  425e86:	3c01      	subs	r4, #1
  425e88:	d045      	beq.n	425f16 <am_hal_pwrctrl_mcu_mode_select+0xc6>
            if ( PWRCTRL->MCUPERFREQ_b.MCUPERFACK > 0 )
  425e8a:	6833      	ldr	r3, [r6, #0]
  425e8c:	075b      	lsls	r3, r3, #29
  425e8e:	d5f7      	bpl.n	425e80 <am_hal_pwrctrl_mcu_mode_select+0x30>
    AM_CRITICAL_END
  425e90:	9801      	ldr	r0, [sp, #4]
        g_eCurMcuPwrMode = ePowerMode;
  425e92:	703d      	strb	r5, [r7, #0]
    AM_CRITICAL_END
  425e94:	f002 fcda 	bl	42884c <am_hal_interrupt_master_set>
    }

    //
    // Check the MCU power mode status and return SUCCESS/FAIL.
    //
    if ( PWRCTRL->MCUPERFREQ_b.MCUPERFSTATUS == ePowerMode )
  425e98:	4b37      	ldr	r3, [pc, #220]	@ (425f78 <am_hal_pwrctrl_mcu_mode_select+0x128>)
  425e9a:	681c      	ldr	r4, [r3, #0]
  425e9c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
  425ea0:	1b64      	subs	r4, r4, r5
  425ea2:	bf18      	it	ne
  425ea4:	2401      	movne	r4, #1
        //          state and may not be able to recover.
        //
        return AM_HAL_STATUS_FAIL;
    }

} // am_hal_pwrctrl_mcu_mode_select()
  425ea6:	4620      	mov	r0, r4
  425ea8:	b002      	add	sp, #8
  425eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         (PWRCTRL->VRSTATUS_b.SIMOBUCKST != PWRCTRL_VRSTATUS_SIMOBUCKST_ACT) )
  425eae:	4b32      	ldr	r3, [pc, #200]	@ (425f78 <am_hal_pwrctrl_mcu_mode_select+0x128>)
  425eb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  425eb4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    if ( (ePowerMode == AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE)   &&
  425eb8:	2b03      	cmp	r3, #3
  425eba:	d138      	bne.n	425f2e <am_hal_pwrctrl_mcu_mode_select+0xde>
    if ( ePowerMode == g_eCurMcuPwrMode )
  425ebc:	4f2d      	ldr	r7, [pc, #180]	@ (425f74 <am_hal_pwrctrl_mcu_mode_select+0x124>)
  425ebe:	783b      	ldrb	r3, [r7, #0]
  425ec0:	2b02      	cmp	r3, #2
  425ec2:	d02f      	beq.n	425f24 <am_hal_pwrctrl_mcu_mode_select+0xd4>
    AM_CRITICAL_BEGIN
  425ec4:	f002 fcbe 	bl	428844 <am_hal_interrupt_master_disable>
        if (!CLKGEN->MISC_b.FRCHFRC2)
  425ec8:	f04f 2440 	mov.w	r4, #1073758208	@ 0x40004000
    AM_CRITICAL_BEGIN
  425ecc:	9001      	str	r0, [sp, #4]
        if (!CLKGEN->MISC_b.FRCHFRC2)
  425ece:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  425ed0:	069e      	lsls	r6, r3, #26
  425ed2:	d52e      	bpl.n	425f32 <am_hal_pwrctrl_mcu_mode_select+0xe2>
        if (CLKGEN->CLOCKENSTAT_b.HFRC2READY)
  425ed4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  425ed6:	01d8      	lsls	r0, r3, #7
  425ed8:	d542      	bpl.n	425f60 <am_hal_pwrctrl_mcu_mode_select+0x110>
        bool bHFRC2ForceOn = false;
  425eda:	f04f 0800 	mov.w	r8, #0
            PWRCTRL->MCUPERFREQ_b.MCUPERFREQ = ePowerMode;
  425ede:	2202      	movs	r2, #2
  425ee0:	4e25      	ldr	r6, [pc, #148]	@ (425f78 <am_hal_pwrctrl_mcu_mode_select+0x128>)
  425ee2:	2414      	movs	r4, #20
  425ee4:	6833      	ldr	r3, [r6, #0]
  425ee6:	f362 0301 	bfi	r3, r2, #0, #2
  425eea:	6033      	str	r3, [r6, #0]
            for ( uint32_t i = 0; i < AM_HAL_PWRCTRL_PERF_SWITCH_WAIT_US; i++ )
  425eec:	e004      	b.n	425ef8 <am_hal_pwrctrl_mcu_mode_select+0xa8>
                am_hal_delay_us(1);
  425eee:	2001      	movs	r0, #1
  425ef0:	f001 fcbc 	bl	42786c <am_hal_delay_us>
            for ( uint32_t i = 0; i < AM_HAL_PWRCTRL_PERF_SWITCH_WAIT_US; i++ )
  425ef4:	3c01      	subs	r4, #1
  425ef6:	d03b      	beq.n	425f70 <am_hal_pwrctrl_mcu_mode_select+0x120>
                if ( PWRCTRL->MCUPERFREQ_b.MCUPERFACK > 0 )
  425ef8:	6833      	ldr	r3, [r6, #0]
  425efa:	075a      	lsls	r2, r3, #29
  425efc:	d5f7      	bpl.n	425eee <am_hal_pwrctrl_mcu_mode_select+0x9e>
                    ui32Status = AM_HAL_STATUS_SUCCESS;
  425efe:	2300      	movs	r3, #0
        if (bHFRC2ForceOn)
  425f00:	f1b8 0f00 	cmp.w	r8, #0
  425f04:	d005      	beq.n	425f12 <am_hal_pwrctrl_mcu_mode_select+0xc2>
            CLKGEN->MISC_b.FRCHFRC2 = CLKGEN_MISC_FRCHFRC2_NOFRC;
  425f06:	f04f 2140 	mov.w	r1, #1073758208	@ 0x40004000
  425f0a:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  425f0c:	f022 0220 	bic.w	r2, r2, #32
  425f10:	644a      	str	r2, [r1, #68]	@ 0x44
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
  425f12:	2b00      	cmp	r3, #0
  425f14:	d0bc      	beq.n	425e90 <am_hal_pwrctrl_mcu_mode_select+0x40>
        PWRCTRL->MCUPERFREQ_b.MCUPERFREQ = ePowerMode;
  425f16:	2404      	movs	r4, #4
  425f18:	e023      	b.n	425f62 <am_hal_pwrctrl_mcu_mode_select+0x112>
        return AM_HAL_STATUS_INVALID_ARG;
  425f1a:	2406      	movs	r4, #6
} // am_hal_pwrctrl_mcu_mode_select()
  425f1c:	4620      	mov	r0, r4
  425f1e:	b002      	add	sp, #8
  425f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_SUCCESS;
  425f24:	2400      	movs	r4, #0
} // am_hal_pwrctrl_mcu_mode_select()
  425f26:	4620      	mov	r0, r4
  425f28:	b002      	add	sp, #8
  425f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_OPERATION;
  425f2e:	2407      	movs	r4, #7
  425f30:	e7b9      	b.n	425ea6 <am_hal_pwrctrl_mcu_mode_select+0x56>
            CLKGEN->MISC_b.FRCHFRC2 = CLKGEN_MISC_FRCHFRC2_FRC;
  425f32:	6c63      	ldr	r3, [r4, #68]	@ 0x44
            am_hal_delay_us(1);
  425f34:	2001      	movs	r0, #1
            CLKGEN->MISC_b.FRCHFRC2 = CLKGEN_MISC_FRCHFRC2_FRC;
  425f36:	f043 0320 	orr.w	r3, r3, #32
  425f3a:	6463      	str	r3, [r4, #68]	@ 0x44
            am_hal_delay_us(1);
  425f3c:	f001 fc96 	bl	42786c <am_hal_delay_us>
            am_hal_delay_us_status_change(AM_HAL_CLKGEN_HFRC2_DELAY,
  425f40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  425f44:	490d      	ldr	r1, [pc, #52]	@ (425f7c <am_hal_pwrctrl_mcu_mode_select+0x12c>)
  425f46:	461a      	mov	r2, r3
  425f48:	200f      	movs	r0, #15
  425f4a:	f001 fcb9 	bl	4278c0 <am_hal_delay_us_status_change>
        if (CLKGEN->CLOCKENSTAT_b.HFRC2READY)
  425f4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  425f50:	01d9      	lsls	r1, r3, #7
  425f52:	f3c3 6800 	ubfx	r8, r3, #24, #1
  425f56:	d4c2      	bmi.n	425ede <am_hal_pwrctrl_mcu_mode_select+0x8e>
            CLKGEN->MISC_b.FRCHFRC2 = CLKGEN_MISC_FRCHFRC2_NOFRC;
  425f58:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  425f5a:	f368 1345 	bfi	r3, r8, #5, #1
  425f5e:	6463      	str	r3, [r4, #68]	@ 0x44
            ui32Status = AM_HAL_STATUS_FAIL;
  425f60:	2401      	movs	r4, #1
    AM_CRITICAL_END
  425f62:	9801      	ldr	r0, [sp, #4]
  425f64:	f002 fc72 	bl	42884c <am_hal_interrupt_master_set>
} // am_hal_pwrctrl_mcu_mode_select()
  425f68:	4620      	mov	r0, r4
  425f6a:	b002      	add	sp, #8
  425f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ui32Status = AM_HAL_STATUS_TIMEOUT;
  425f70:	2304      	movs	r3, #4
  425f72:	e7c5      	b.n	425f00 <am_hal_pwrctrl_mcu_mode_select+0xb0>
  425f74:	2000aa28 	.word	0x2000aa28
  425f78:	40021000 	.word	0x40021000
  425f7c:	40004030 	.word	0x40004030

00425f80 <am_hal_pwrctrl_gpu_mode_select>:
//  Select the GPU power mode.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_gpu_mode_select(am_hal_pwrctrl_gpu_mode_e ePowerMode)
{
  425f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bool     bGFXEnabled;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( (ePowerMode != AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER)      &&
  425f84:	4604      	mov	r4, r0
{
  425f86:	b082      	sub	sp, #8
    if ( (ePowerMode != AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER)      &&
  425f88:	b140      	cbz	r0, 425f9c <am_hal_pwrctrl_gpu_mode_select+0x1c>
  425f8a:	2803      	cmp	r0, #3
  425f8c:	d13c      	bne.n	426008 <am_hal_pwrctrl_gpu_mode_select+0x88>
#if !defined(APOLLO5_FPGA)
    //
    // We must be using SIMOBUCK in order to go to HP mode.
    //
    if ( (ePowerMode == AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE)   &&
         (PWRCTRL->VRSTATUS_b.SIMOBUCKST != PWRCTRL_VRSTATUS_SIMOBUCKST_ACT) )
  425f8e:	4b39      	ldr	r3, [pc, #228]	@ (426074 <am_hal_pwrctrl_gpu_mode_select+0xf4>)
  425f90:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  425f94:	f3c3 1301 	ubfx	r3, r3, #4, #2
    if ( (ePowerMode == AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE)   &&
  425f98:	2b03      	cmp	r3, #3
  425f9a:	d13a      	bne.n	426012 <am_hal_pwrctrl_gpu_mode_select+0x92>
    if ( AM_HAL_STATUS_SUCCESS != ui32Status )
    {
        return ui32Status;
    }

    *bEnabled = ((AM_REGVAL(pwr_ctrl.ui32PwrStatReqAddr) &
  425f9c:	4b35      	ldr	r3, [pc, #212]	@ (426074 <am_hal_pwrctrl_gpu_mode_select+0xf4>)
  425f9e:	689d      	ldr	r5, [r3, #8]
        if (bGFXEnabled)
  425fa0:	f415 2580 	ands.w	r5, r5, #262144	@ 0x40000
  425fa4:	d13a      	bne.n	42601c <am_hal_pwrctrl_gpu_mode_select+0x9c>
    if ( ePowerMode == g_eCurGpuPwrMode )
  425fa6:	4e34      	ldr	r6, [pc, #208]	@ (426078 <am_hal_pwrctrl_gpu_mode_select+0xf8>)
  425fa8:	7833      	ldrb	r3, [r6, #0]
  425faa:	429c      	cmp	r4, r3
  425fac:	d057      	beq.n	42605e <am_hal_pwrctrl_gpu_mode_select+0xde>
    AM_CRITICAL_BEGIN
  425fae:	f002 fc49 	bl	428844 <am_hal_interrupt_master_disable>
    if (g_ui32TrimVer <= 1)
  425fb2:	4f32      	ldr	r7, [pc, #200]	@ (42607c <am_hal_pwrctrl_gpu_mode_select+0xfc>)
    AM_CRITICAL_BEGIN
  425fb4:	9001      	str	r0, [sp, #4]
    if (g_ui32TrimVer <= 1)
  425fb6:	683b      	ldr	r3, [r7, #0]
  425fb8:	2b01      	cmp	r3, #1
  425fba:	d934      	bls.n	426026 <am_hal_pwrctrl_gpu_mode_select+0xa6>
    if (ePowerMode == AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE)
  425fbc:	2c03      	cmp	r4, #3
  425fbe:	d038      	beq.n	426032 <am_hal_pwrctrl_gpu_mode_select+0xb2>
    g_eCurGpuPwrMode = ePowerMode;
  425fc0:	f04f 0800 	mov.w	r8, #0
        PWRCTRL->GFXPWRSWSEL_b.GFXVDDSEL = PWRCTRL_GFXPWRSWSEL_GFXVDDSEL_VDDC;
  425fc4:	4c2b      	ldr	r4, [pc, #172]	@ (426074 <am_hal_pwrctrl_gpu_mode_select+0xf4>)
    am_hal_delay_us(AM_HAL_PWRCTRL_GPU_VOLTADJ_WAIT);
  425fc6:	2001      	movs	r0, #1
        PWRCTRL->GFXPWRSWSEL_b.GFXVDDSEL = PWRCTRL_GFXPWRSWSEL_GFXVDDSEL_VDDC;
  425fc8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
  425fcc:	f023 0301 	bic.w	r3, r3, #1
  425fd0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    am_hal_delay_us(AM_HAL_PWRCTRL_GPU_VOLTADJ_WAIT);
  425fd4:	f001 fc4a 	bl	42786c <am_hal_delay_us>
    PWRCTRL->GFXPERFREQ_b.GFXPERFREQ = ePowerMode;
  425fd8:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    g_ePreGpuPwrMode = ePowerMode;
  425fdc:	4a28      	ldr	r2, [pc, #160]	@ (426080 <am_hal_pwrctrl_gpu_mode_select+0x100>)
    PWRCTRL->GFXPERFREQ_b.GFXPERFREQ = ePowerMode;
  425fde:	f023 0303 	bic.w	r3, r3, #3
  425fe2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    am_hal_delay_us(AM_HAL_PWRCTRL_GPU_PWRADJ_WAIT);
  425fe6:	2006      	movs	r0, #6
    g_eCurGpuPwrMode = ePowerMode;
  425fe8:	f886 8000 	strb.w	r8, [r6]
    g_ePreGpuPwrMode = ePowerMode;
  425fec:	f882 8000 	strb.w	r8, [r2]
    am_hal_delay_us(AM_HAL_PWRCTRL_GPU_PWRADJ_WAIT);
  425ff0:	f001 fc3c 	bl	42786c <am_hal_delay_us>
    if (g_ui32TrimVer <= 1)
  425ff4:	683b      	ldr	r3, [r7, #0]
  425ff6:	2b01      	cmp	r3, #1
  425ff8:	d937      	bls.n	42606a <am_hal_pwrctrl_gpu_mode_select+0xea>
    AM_CRITICAL_END
  425ffa:	9801      	ldr	r0, [sp, #4]
  425ffc:	f002 fc26 	bl	42884c <am_hal_interrupt_master_set>
} // am_hal_pwrctrl_gpu_mode_select()
  426000:	4628      	mov	r0, r5
  426002:	b002      	add	sp, #8
  426004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG;
  426008:	2506      	movs	r5, #6
} // am_hal_pwrctrl_gpu_mode_select()
  42600a:	4628      	mov	r0, r5
  42600c:	b002      	add	sp, #8
  42600e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_OPERATION;
  426012:	2507      	movs	r5, #7
} // am_hal_pwrctrl_gpu_mode_select()
  426014:	4628      	mov	r0, r5
  426016:	b002      	add	sp, #8
  426018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return AM_HAL_STATUS_IN_USE;
  42601c:	2503      	movs	r5, #3
} // am_hal_pwrctrl_gpu_mode_select()
  42601e:	4628      	mov	r0, r5
  426020:	b002      	add	sp, #8
  426022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ePowerMode == AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE )
  426026:	2c03      	cmp	r4, #3
  426028:	d1ca      	bne.n	425fc0 <am_hal_pwrctrl_gpu_mode_select+0x40>
            am_hal_sysctrl_ton_config_update(true, ePowerMode);
  42602a:	4621      	mov	r1, r4
  42602c:	2001      	movs	r0, #1
  42602e:	f002 fd3b 	bl	428aa8 <am_hal_sysctrl_ton_config_update>
    am_hal_delay_us(AM_HAL_PWRCTRL_GPU_VOLTADJ_WAIT);
  426032:	2001      	movs	r0, #1
        PWRCTRL->GFXPWRSWSEL_b.GFXVDDSEL = PWRCTRL_GFXPWRSWSEL_GFXVDDSEL_VDDF;
  426034:	4c0f      	ldr	r4, [pc, #60]	@ (426074 <am_hal_pwrctrl_gpu_mode_select+0xf4>)
  426036:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
  42603a:	4303      	orrs	r3, r0
  42603c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    am_hal_delay_us(AM_HAL_PWRCTRL_GPU_VOLTADJ_WAIT);
  426040:	f001 fc14 	bl	42786c <am_hal_delay_us>
    g_eCurGpuPwrMode = ePowerMode;
  426044:	2203      	movs	r2, #3
    PWRCTRL->GFXPERFREQ_b.GFXPERFREQ = ePowerMode;
  426046:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
    g_ePreGpuPwrMode = ePowerMode;
  42604a:	490d      	ldr	r1, [pc, #52]	@ (426080 <am_hal_pwrctrl_gpu_mode_select+0x100>)
    PWRCTRL->GFXPERFREQ_b.GFXPERFREQ = ePowerMode;
  42604c:	4313      	orrs	r3, r2
  42604e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    am_hal_delay_us(AM_HAL_PWRCTRL_GPU_PWRADJ_WAIT);
  426052:	2006      	movs	r0, #6
    g_eCurGpuPwrMode = ePowerMode;
  426054:	7032      	strb	r2, [r6, #0]
    g_ePreGpuPwrMode = ePowerMode;
  426056:	700a      	strb	r2, [r1, #0]
    am_hal_delay_us(AM_HAL_PWRCTRL_GPU_PWRADJ_WAIT);
  426058:	f001 fc08 	bl	42786c <am_hal_delay_us>
        if ( ePowerMode == AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER )
  42605c:	e7cd      	b.n	425ffa <am_hal_pwrctrl_gpu_mode_select+0x7a>
        if (g_ePreGpuPwrMode != g_eCurGpuPwrMode)
  42605e:	4b08      	ldr	r3, [pc, #32]	@ (426080 <am_hal_pwrctrl_gpu_mode_select+0x100>)
  426060:	781a      	ldrb	r2, [r3, #0]
  426062:	42a2      	cmp	r2, r4
  426064:	d0d1      	beq.n	42600a <am_hal_pwrctrl_gpu_mode_select+0x8a>
            g_ePreGpuPwrMode = ePowerMode;
  426066:	701c      	strb	r4, [r3, #0]
  426068:	e7cf      	b.n	42600a <am_hal_pwrctrl_gpu_mode_select+0x8a>
            am_hal_sysctrl_ton_config_update(true, ePowerMode);
  42606a:	4641      	mov	r1, r8
  42606c:	2001      	movs	r0, #1
  42606e:	f002 fd1b 	bl	428aa8 <am_hal_sysctrl_ton_config_update>
  426072:	e7c2      	b.n	425ffa <am_hal_pwrctrl_gpu_mode_select+0x7a>
  426074:	40021000 	.word	0x40021000
  426078:	2004e4e3 	.word	0x2004e4e3
  42607c:	2000aa24 	.word	0x2000aa24
  426080:	2004e4e2 	.word	0x2004e4e2

00426084 <am_hal_pwrctrl_mcu_memory_config>:
{
  426084:	b570      	push	{r4, r5, r6, lr}
    g_eCurROMPwrMode = psConfig->eROMMode;
  426086:	4a49      	ldr	r2, [pc, #292]	@ (4261ac <am_hal_pwrctrl_mcu_memory_config+0x128>)
  426088:	7803      	ldrb	r3, [r0, #0]
{
  42608a:	4604      	mov	r4, r0
  42608c:	b082      	sub	sp, #8
    g_eCurROMPwrMode = psConfig->eROMMode;
  42608e:	7013      	strb	r3, [r2, #0]
    switch (psConfig->eROMMode)
  426090:	b32b      	cbz	r3, 4260de <am_hal_pwrctrl_mcu_memory_config+0x5a>
    uint32_t      ui32PwrEn = 0;
  426092:	2200      	movs	r2, #0
    uint32_t      ui32PwrStatus = 0;
  426094:	4613      	mov	r3, r2
    ui32PwrEn |= _VAL2FLD(PWRCTRL_MEMPWREN_PWRENTCM, psConfig->eDTCMCfg);
  426096:	7861      	ldrb	r1, [r4, #1]
    switch (psConfig->eNVMCfg)
  426098:	78e0      	ldrb	r0, [r4, #3]
    ui32PwrEn |= _VAL2FLD(PWRCTRL_MEMPWREN_PWRENTCM, psConfig->eDTCMCfg);
  42609a:	f001 0107 	and.w	r1, r1, #7
    switch (psConfig->eNVMCfg)
  42609e:	2801      	cmp	r0, #1
    ui32PwrEn |= _VAL2FLD(PWRCTRL_MEMPWREN_PWRENTCM, psConfig->eDTCMCfg);
  4260a0:	ea42 0201 	orr.w	r2, r2, r1
    ui32PwrStatus |= _VAL2FLD(PWRCTRL_MEMPWRSTATUS_PWRSTTCM, psConfig->eDTCMCfg);
  4260a4:	ea43 0301 	orr.w	r3, r3, r1
    switch (psConfig->eNVMCfg)
  4260a8:	d150      	bne.n	42614c <am_hal_pwrctrl_mcu_memory_config+0xc8>
            ui32PwrEn |= _VAL2FLD(PWRCTRL_MEMPWREN_PWRENNVM, 1) | _VAL2FLD(PWRCTRL_MEMPWREN_PWRENNVM1, 0);
  4260aa:	f042 0208 	orr.w	r2, r2, #8
            ui32PwrStatus |= _VAL2FLD(PWRCTRL_MEMPWRSTATUS_PWRSTNVM0, 1) | _VAL2FLD(PWRCTRL_MEMPWRSTATUS_PWRSTNVM1, 0);
  4260ae:	f043 0308 	orr.w	r3, r3, #8
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  4260b2:	2501      	movs	r5, #1
    PWRCTRL->MEMPWREN = ui32PwrEn;
  4260b4:	493e      	ldr	r1, [pc, #248]	@ (4261b0 <am_hal_pwrctrl_mcu_memory_config+0x12c>)
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  4260b6:	2005      	movs	r0, #5
    PWRCTRL->MEMPWREN = ui32PwrEn;
  4260b8:	614a      	str	r2, [r1, #20]
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  4260ba:	22cf      	movs	r2, #207	@ 0xcf
  4260bc:	3118      	adds	r1, #24
  4260be:	9500      	str	r5, [sp, #0]
  4260c0:	f001 fc26 	bl	427910 <am_hal_delay_us_status_check>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
  4260c4:	b948      	cbnz	r0, 4260da <am_hal_pwrctrl_mcu_memory_config+0x56>
    if ((PWRCTRL->MEMPWRSTATUS_b.PWRSTTCM != PWRCTRL->MEMPWREN_b.PWRENTCM)          ||
  4260c6:	4b3a      	ldr	r3, [pc, #232]	@ (4261b0 <am_hal_pwrctrl_mcu_memory_config+0x12c>)
  4260c8:	6999      	ldr	r1, [r3, #24]
  4260ca:	695a      	ldr	r2, [r3, #20]
  4260cc:	f001 0107 	and.w	r1, r1, #7
  4260d0:	f002 0207 	and.w	r2, r2, #7
  4260d4:	4291      	cmp	r1, r2
  4260d6:	d005      	beq.n	4260e4 <am_hal_pwrctrl_mcu_memory_config+0x60>
        return AM_HAL_STATUS_FAIL;
  4260d8:	2001      	movs	r0, #1
} // am_hal_pwrctrl_mcu_memory_config()
  4260da:	b002      	add	sp, #8
  4260dc:	bd70      	pop	{r4, r5, r6, pc}
            ui32PwrEn |= _VAL2FLD(PWRCTRL_MEMPWREN_PWRENROM, 1);
  4260de:	2220      	movs	r2, #32
            ui32PwrStatus |= _VAL2FLD(PWRCTRL_MEMPWRSTATUS_PWRSTROM, 1);
  4260e0:	2380      	movs	r3, #128	@ 0x80
  4260e2:	e7d8      	b.n	426096 <am_hal_pwrctrl_mcu_memory_config+0x12>
        (PWRCTRL->MEMPWRSTATUS_b.PWRSTNVM0 != PWRCTRL->MEMPWREN_b.PWRENNVM)         ||
  4260e4:	6999      	ldr	r1, [r3, #24]
  4260e6:	695a      	ldr	r2, [r3, #20]
  4260e8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
  4260ec:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    if ((PWRCTRL->MEMPWRSTATUS_b.PWRSTTCM != PWRCTRL->MEMPWREN_b.PWRENTCM)          ||
  4260f0:	4291      	cmp	r1, r2
  4260f2:	d1f1      	bne.n	4260d8 <am_hal_pwrctrl_mcu_memory_config+0x54>
        ((PWRCTRL->MEMPWRSTATUS_b.PWRSTNVM0 & PWRCTRL->MEMPWRSTATUS_b.PWRSTNVM1) != PWRCTRL->MEMPWREN_b.PWRENNVM1)        ||
  4260f4:	699d      	ldr	r5, [r3, #24]
  4260f6:	699a      	ldr	r2, [r3, #24]
  4260f8:	6959      	ldr	r1, [r3, #20]
  4260fa:	f3c2 1280 	ubfx	r2, r2, #6, #1
  4260fe:	f3c1 1100 	ubfx	r1, r1, #4, #1
        (PWRCTRL->MEMPWRSTATUS_b.PWRSTNVM0 != PWRCTRL->MEMPWREN_b.PWRENNVM)         ||
  426102:	ea02 02d5 	and.w	r2, r2, r5, lsr #3
  426106:	4291      	cmp	r1, r2
  426108:	d1e6      	bne.n	4260d8 <am_hal_pwrctrl_mcu_memory_config+0x54>
        (PWRCTRL->MEMPWRSTATUS_b.PWRSTROM != PWRCTRL->MEMPWREN_b.PWRENROM)          ||
  42610a:	6999      	ldr	r1, [r3, #24]
  42610c:	695a      	ldr	r2, [r3, #20]
  42610e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
  426112:	f3c2 1240 	ubfx	r2, r2, #5, #1
        ((PWRCTRL->MEMPWRSTATUS_b.PWRSTNVM0 & PWRCTRL->MEMPWRSTATUS_b.PWRSTNVM1) != PWRCTRL->MEMPWREN_b.PWRENNVM1)        ||
  426116:	4291      	cmp	r1, r2
  426118:	d1de      	bne.n	4260d8 <am_hal_pwrctrl_mcu_memory_config+0x54>
        (PWRCTRL->DEVPWRSTATUS_b.PWRSTOTP != PWRCTRL->DEVPWREN_b.PWRENOTP))
  42611a:	6899      	ldr	r1, [r3, #8]
  42611c:	685a      	ldr	r2, [r3, #4]
  42611e:	f3c1 61c0 	ubfx	r1, r1, #27, #1
  426122:	f3c2 62c0 	ubfx	r2, r2, #27, #1
        (PWRCTRL->MEMPWRSTATUS_b.PWRSTROM != PWRCTRL->MEMPWREN_b.PWRENROM)          ||
  426126:	4291      	cmp	r1, r2
  426128:	d1d6      	bne.n	4260d8 <am_hal_pwrctrl_mcu_memory_config+0x54>
    if (psConfig->bKeepNVMOnInDeepSleep)
  42612a:	7922      	ldrb	r2, [r4, #4]
  42612c:	b382      	cbz	r2, 426190 <am_hal_pwrctrl_mcu_memory_config+0x10c>
        PWRCTRL->MEMRETCFG_b.NVMPWDSLP = PWRCTRL_MEMRETCFG_NVMPWDSLP_DIS;
  42612e:	69da      	ldr	r2, [r3, #28]
  426130:	f360 0241 	bfi	r2, r0, #1, #1
  426134:	61da      	str	r2, [r3, #28]
    if ( psConfig->eRetainDTCM == AM_HAL_PWRCTRL_MEMRETCFG_TCMPWDSLP_NORETAIN )
  426136:	78a3      	ldrb	r3, [r4, #2]
  426138:	2b01      	cmp	r3, #1
  42613a:	d02e      	beq.n	42619a <am_hal_pwrctrl_mcu_memory_config+0x116>
    else if ( psConfig->eRetainDTCM == AM_HAL_PWRCTRL_MEMRETCFG_TCMPWDSLP_RETAIN )
  42613c:	2b00      	cmp	r3, #0
  42613e:	d132      	bne.n	4261a6 <am_hal_pwrctrl_mcu_memory_config+0x122>
        PWRCTRL->MEMRETCFG_b.TCMPWDSLP = PWRCTRL_MEMRETCFG_TCMPWDSLP_RETAIN;
  426140:	4a1b      	ldr	r2, [pc, #108]	@ (4261b0 <am_hal_pwrctrl_mcu_memory_config+0x12c>)
  426142:	69d1      	ldr	r1, [r2, #28]
  426144:	f363 0100 	bfi	r1, r3, #0, #1
  426148:	61d1      	str	r1, [r2, #28]
  42614a:	e7c6      	b.n	4260da <am_hal_pwrctrl_mcu_memory_config+0x56>
    switch (psConfig->eNVMCfg)
  42614c:	2803      	cmp	r0, #3
  42614e:	d1b0      	bne.n	4260b2 <am_hal_pwrctrl_mcu_memory_config+0x2e>
        ((PWRCTRL->MEMPWRSTATUS & (PWRCTRL_MEMPWRSTATUS_PWRSTNVM1_Msk | PWRCTRL_MEMPWRSTATUS_PWRSTNVM0_Msk)) == PWRCTRL_MEMPWRSTATUS_PWRSTNVM0_Msk))
  426150:	4817      	ldr	r0, [pc, #92]	@ (4261b0 <am_hal_pwrctrl_mcu_memory_config+0x12c>)
            ui32PwrEn |= _VAL2FLD(PWRCTRL_MEMPWREN_PWRENNVM, 1) | _VAL2FLD(PWRCTRL_MEMPWREN_PWRENNVM1, 1);
  426152:	f042 0218 	orr.w	r2, r2, #24
        ((PWRCTRL->MEMPWRSTATUS & (PWRCTRL_MEMPWRSTATUS_PWRSTNVM1_Msk | PWRCTRL_MEMPWRSTATUS_PWRSTNVM0_Msk)) == PWRCTRL_MEMPWRSTATUS_PWRSTNVM0_Msk))
  426156:	6981      	ldr	r1, [r0, #24]
            ui32PwrStatus |= _VAL2FLD(PWRCTRL_MEMPWRSTATUS_PWRSTNVM0, 1) | _VAL2FLD(PWRCTRL_MEMPWRSTATUS_PWRSTNVM1, 1);
  426158:	f043 0348 	orr.w	r3, r3, #72	@ 0x48
        ((PWRCTRL->MEMPWRSTATUS & (PWRCTRL_MEMPWRSTATUS_PWRSTNVM1_Msk | PWRCTRL_MEMPWRSTATUS_PWRSTNVM0_Msk)) == PWRCTRL_MEMPWRSTATUS_PWRSTNVM0_Msk))
  42615c:	f001 0148 	and.w	r1, r1, #72	@ 0x48
    if ((psConfig->eNVMCfg == AM_HAL_PWRCTRL_NVM0_AND_NVM1) &&
  426160:	2908      	cmp	r1, #8
  426162:	d1a6      	bne.n	4260b2 <am_hal_pwrctrl_mcu_memory_config+0x2e>
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  426164:	2601      	movs	r6, #1
        MCUCTRL->FORCEAXICLKEN_b.FRCAXICLKEN = 1;
  426166:	4d13      	ldr	r5, [pc, #76]	@ (4261b4 <am_hal_pwrctrl_mcu_memory_config+0x130>)
  426168:	f8d5 1284 	ldr.w	r1, [r5, #644]	@ 0x284
  42616c:	f041 0101 	orr.w	r1, r1, #1
  426170:	f8c5 1284 	str.w	r1, [r5, #644]	@ 0x284
    PWRCTRL->MEMPWREN = ui32PwrEn;
  426174:	6142      	str	r2, [r0, #20]
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  426176:	4910      	ldr	r1, [pc, #64]	@ (4261b8 <am_hal_pwrctrl_mcu_memory_config+0x134>)
  426178:	22cf      	movs	r2, #207	@ 0xcf
  42617a:	2005      	movs	r0, #5
  42617c:	9600      	str	r6, [sp, #0]
  42617e:	f001 fbc7 	bl	427910 <am_hal_delay_us_status_check>
        MCUCTRL->FORCEAXICLKEN_b.FRCAXICLKEN = 0;
  426182:	f8d5 3284 	ldr.w	r3, [r5, #644]	@ 0x284
  426186:	f023 0301 	bic.w	r3, r3, #1
  42618a:	f8c5 3284 	str.w	r3, [r5, #644]	@ 0x284
  42618e:	e799      	b.n	4260c4 <am_hal_pwrctrl_mcu_memory_config+0x40>
        PWRCTRL->MEMRETCFG_b.NVMPWDSLP = PWRCTRL_MEMRETCFG_NVMPWDSLP_EN;
  426190:	69da      	ldr	r2, [r3, #28]
  426192:	f042 0202 	orr.w	r2, r2, #2
  426196:	61da      	str	r2, [r3, #28]
  426198:	e7cd      	b.n	426136 <am_hal_pwrctrl_mcu_memory_config+0xb2>
        PWRCTRL->MEMRETCFG_b.TCMPWDSLP = PWRCTRL_MEMRETCFG_TCMPWDSLP_NORETAIN;
  42619a:	4a05      	ldr	r2, [pc, #20]	@ (4261b0 <am_hal_pwrctrl_mcu_memory_config+0x12c>)
  42619c:	69d3      	ldr	r3, [r2, #28]
  42619e:	f043 0301 	orr.w	r3, r3, #1
  4261a2:	61d3      	str	r3, [r2, #28]
  4261a4:	e799      	b.n	4260da <am_hal_pwrctrl_mcu_memory_config+0x56>
        return AM_HAL_STATUS_OUT_OF_RANGE;
  4261a6:	2005      	movs	r0, #5
  4261a8:	e797      	b.n	4260da <am_hal_pwrctrl_mcu_memory_config+0x56>
  4261aa:	bf00      	nop
  4261ac:	2004e4e1 	.word	0x2004e4e1
  4261b0:	40021000 	.word	0x40021000
  4261b4:	40020000 	.word	0x40020000
  4261b8:	40021018 	.word	0x40021018

004261bc <am_hal_pwrctrl_sram_config>:
{
  4261bc:	b570      	push	{r4, r5, r6, lr}
  4261be:	4605      	mov	r5, r0
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  4261c0:	2601      	movs	r6, #1
    PWRCTRL->SSRAMPWREN_b.PWRENSSRAM = psConfig->eSRAMCfg;
  4261c2:	4c2b      	ldr	r4, [pc, #172]	@ (426270 <am_hal_pwrctrl_sram_config+0xb4>)
  4261c4:	f895 c000 	ldrb.w	ip, [r5]
  4261c8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
{
  4261ca:	b082      	sub	sp, #8
    PWRCTRL->SSRAMPWREN_b.PWRENSSRAM = psConfig->eSRAMCfg;
  4261cc:	f36c 0302 	bfi	r3, ip, #0, #3
  4261d0:	6263      	str	r3, [r4, #36]	@ 0x24
                                              PWRCTRL->SSRAMPWREN,
  4261d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  4261d4:	2207      	movs	r2, #7
  4261d6:	2005      	movs	r0, #5
  4261d8:	4926      	ldr	r1, [pc, #152]	@ (426274 <am_hal_pwrctrl_sram_config+0xb8>)
  4261da:	9600      	str	r6, [sp, #0]
  4261dc:	f001 fb98 	bl	427910 <am_hal_delay_us_status_check>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
  4261e0:	b940      	cbnz	r0, 4261f4 <am_hal_pwrctrl_sram_config+0x38>
    if (PWRCTRL->SSRAMPWRST_b.SSRAMPWRST != PWRCTRL->SSRAMPWREN_b.PWRENSSRAM)
  4261e2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  4261e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  4261e6:	f002 0207 	and.w	r2, r2, #7
  4261ea:	f003 0307 	and.w	r3, r3, #7
  4261ee:	429a      	cmp	r2, r3
  4261f0:	d002      	beq.n	4261f8 <am_hal_pwrctrl_sram_config+0x3c>
        return AM_HAL_STATUS_FAIL;
  4261f2:	4630      	mov	r0, r6
} // am_hal_pwrctrl_sram_config()
  4261f4:	b002      	add	sp, #8
  4261f6:	bd70      	pop	{r4, r5, r6, pc}
    PWRCTRL->SSRAMRETCFG_b.SSRAMACTMCU  = psConfig->eActiveWithMCU;
  4261f8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  4261fa:	78ae      	ldrb	r6, [r5, #2]
  4261fc:	78e9      	ldrb	r1, [r5, #3]
  4261fe:	792b      	ldrb	r3, [r5, #4]
  426200:	786d      	ldrb	r5, [r5, #1]
  426202:	f365 02c5 	bfi	r2, r5, #3, #3
  426206:	62e2      	str	r2, [r4, #44]	@ 0x2c
    PWRCTRL->SSRAMRETCFG_b.SSRAMACTGFX  = psConfig->eActiveWithGFX;
  426208:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  42620a:	f366 224b 	bfi	r2, r6, #9, #3
  42620e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    PWRCTRL->SSRAMRETCFG_b.SSRAMACTDISP = psConfig->eActiveWithDISP;
  426210:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  426212:	f361 320e 	bfi	r2, r1, #12, #3
  426216:	62e2      	str	r2, [r4, #44]	@ 0x2c
    switch ( psConfig->eSRAMRetain )
  426218:	2b07      	cmp	r3, #7
  42621a:	d80b      	bhi.n	426234 <am_hal_pwrctrl_sram_config+0x78>
  42621c:	e8df f003 	tbb	[pc, r3]
  426220:	040a1b22 	.word	0x040a1b22
  426224:	150a0a0a 	.word	0x150a0a0a
            PWRCTRL->SSRAMRETCFG_b.SSRAMPWDSLP = PWRCTRL_SSRAMRETCFG_SSRAMPWDSLP_GROUP2;
  426228:	2104      	movs	r1, #4
  42622a:	4b11      	ldr	r3, [pc, #68]	@ (426270 <am_hal_pwrctrl_sram_config+0xb4>)
  42622c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  42622e:	f361 0202 	bfi	r2, r1, #0, #3
  426232:	62da      	str	r2, [r3, #44]	@ 0x2c
    PWRCTRL->MMSOVERRIDE_b.MMSOVRSSRAMRETGFX = PWRCTRL_MMSOVERRIDE_MMSOVRSSRAMRETGFX_PGSTATE;
  426234:	4b0e      	ldr	r3, [pc, #56]	@ (426270 <am_hal_pwrctrl_sram_config+0xb4>)
  426236:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  426238:	f422 5260 	bic.w	r2, r2, #14336	@ 0x3800
  42623c:	641a      	str	r2, [r3, #64]	@ 0x40
    PWRCTRL->MMSOVERRIDE_b.MMSOVRSSRAMRETDISP = PWRCTRL_MMSOVERRIDE_MMSOVRSSRAMRETDISP_PGSTATE;
  42623e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  426240:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  426244:	641a      	str	r2, [r3, #64]	@ 0x40
} // am_hal_pwrctrl_sram_config()
  426246:	b002      	add	sp, #8
  426248:	bd70      	pop	{r4, r5, r6, pc}
            PWRCTRL->SSRAMRETCFG_b.SSRAMPWDSLP = PWRCTRL_SSRAMRETCFG_SSRAMPWDSLP_NONE;
  42624a:	4a09      	ldr	r2, [pc, #36]	@ (426270 <am_hal_pwrctrl_sram_config+0xb4>)
  42624c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
  42624e:	f023 0307 	bic.w	r3, r3, #7
  426252:	62d3      	str	r3, [r2, #44]	@ 0x2c
            break;
  426254:	e7ee      	b.n	426234 <am_hal_pwrctrl_sram_config+0x78>
            PWRCTRL->SSRAMRETCFG_b.SSRAMPWDSLP = PWRCTRL_SSRAMRETCFG_SSRAMPWDSLP_GROUP1 |
  426256:	2106      	movs	r1, #6
  426258:	4b05      	ldr	r3, [pc, #20]	@ (426270 <am_hal_pwrctrl_sram_config+0xb4>)
  42625a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  42625c:	f361 0202 	bfi	r2, r1, #0, #3
  426260:	62da      	str	r2, [r3, #44]	@ 0x2c
            break;
  426262:	e7e7      	b.n	426234 <am_hal_pwrctrl_sram_config+0x78>
            PWRCTRL->SSRAMRETCFG_b.SSRAMPWDSLP = PWRCTRL_SSRAMRETCFG_SSRAMPWDSLP_ALL;
  426264:	4a02      	ldr	r2, [pc, #8]	@ (426270 <am_hal_pwrctrl_sram_config+0xb4>)
  426266:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
  426268:	f043 0307 	orr.w	r3, r3, #7
  42626c:	62d3      	str	r3, [r2, #44]	@ 0x2c
            break;
  42626e:	e7e1      	b.n	426234 <am_hal_pwrctrl_sram_config+0x78>
  426270:	40021000 	.word	0x40021000
  426274:	40021028 	.word	0x40021028

00426278 <am_hal_pwrctrl_periph_enable>:
    if ( pwr_ctrl == NULL || ePeripheral >= AM_HAL_PWRCTRL_PERIPH_MAX )
  426278:	2821      	cmp	r0, #33	@ 0x21
  42627a:	d84e      	bhi.n	42631a <am_hal_pwrctrl_periph_enable+0xa2>
    *pwr_ctrl = am_hal_pwrctrl_peripheral_control[ePeripheral];
  42627c:	4bc6      	ldr	r3, [pc, #792]	@ (426598 <am_hal_pwrctrl_periph_enable+0x320>)
  42627e:	0102      	lsls	r2, r0, #4
{
  426280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & pwr_ctrl.ui32PeriphEnable )
  426284:	f853 9002 	ldr.w	r9, [r3, r2]
    *pwr_ctrl = am_hal_pwrctrl_peripheral_control[ePeripheral];
  426288:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    if ( AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & pwr_ctrl.ui32PeriphEnable )
  42628c:	f8d9 5000 	ldr.w	r5, [r9]
    *pwr_ctrl = am_hal_pwrctrl_peripheral_control[ePeripheral];
  426290:	f8d3 8004 	ldr.w	r8, [r3, #4]
    if ( AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & pwr_ctrl.ui32PeriphEnable )
  426294:	4604      	mov	r4, r0
  426296:	ea15 0508 	ands.w	r5, r5, r8
{
  42629a:	b087      	sub	sp, #28
    if ( AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & pwr_ctrl.ui32PeriphEnable )
  42629c:	f040 819f 	bne.w	4265de <am_hal_pwrctrl_periph_enable+0x366>
    *pwr_ctrl = am_hal_pwrctrl_peripheral_control[ePeripheral];
  4262a0:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
    if ( (ePeripheral == AM_HAL_PWRCTRL_PERIPH_CRYPTO)      &&
  4262a4:	2817      	cmp	r0, #23
  4262a6:	d03a      	beq.n	42631e <am_hal_pwrctrl_periph_enable+0xa6>
    if (g_ui32TrimVer <= 1)
  4262a8:	f8df a304 	ldr.w	sl, [pc, #772]	@ 4265b0 <am_hal_pwrctrl_periph_enable+0x338>
  4262ac:	f8da 3000 	ldr.w	r3, [sl]
  4262b0:	2b01      	cmp	r3, #1
  4262b2:	d966      	bls.n	426382 <am_hal_pwrctrl_periph_enable+0x10a>
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  4262b4:	2814      	cmp	r0, #20
  4262b6:	d13b      	bne.n	426330 <am_hal_pwrctrl_periph_enable+0xb8>
            g_bPostponeTempco = true;
  4262b8:	2301      	movs	r3, #1
            if (g_ePreGpuPwrMode == AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE)
  4262ba:	4ab8      	ldr	r2, [pc, #736]	@ (42659c <am_hal_pwrctrl_periph_enable+0x324>)
            g_bPostponeTempco = true;
  4262bc:	4cb8      	ldr	r4, [pc, #736]	@ (4265a0 <am_hal_pwrctrl_periph_enable+0x328>)
            if (g_ePreGpuPwrMode == AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE)
  4262be:	7810      	ldrb	r0, [r2, #0]
            g_bPostponeTempco = true;
  4262c0:	7023      	strb	r3, [r4, #0]
            if (g_ePreGpuPwrMode == AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE)
  4262c2:	2803      	cmp	r0, #3
  4262c4:	f000 80b1 	beq.w	42642a <am_hal_pwrctrl_periph_enable+0x1b2>
    if ((g_ui32TrimVer >= 1) && g_bOrigTrimsStored)
  4262c8:	4bb6      	ldr	r3, [pc, #728]	@ (4265a4 <am_hal_pwrctrl_periph_enable+0x32c>)
  4262ca:	781b      	ldrb	r3, [r3, #0]
  4262cc:	2b00      	cmp	r3, #0
  4262ce:	f040 812d 	bne.w	42652c <am_hal_pwrctrl_periph_enable+0x2b4>
            AM_CRITICAL_BEGIN
  4262d2:	f002 fab7 	bl	428844 <am_hal_interrupt_master_disable>
            if (g_bTempcoPending)
  4262d6:	4ab4      	ldr	r2, [pc, #720]	@ (4265a8 <am_hal_pwrctrl_periph_enable+0x330>)
            AM_CRITICAL_BEGIN
  4262d8:	9004      	str	r0, [sp, #16]
            AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) |=
  4262da:	f8d9 3000 	ldr.w	r3, [r9]
            if (g_bTempcoPending)
  4262de:	7811      	ldrb	r1, [r2, #0]
            AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) |=
  4262e0:	ea43 0308 	orr.w	r3, r3, r8
  4262e4:	f8c9 3000 	str.w	r3, [r9]
            if (g_bTempcoPending)
  4262e8:	2900      	cmp	r1, #0
  4262ea:	f040 81ad 	bne.w	426648 <am_hal_pwrctrl_periph_enable+0x3d0>
            g_bPostponeTempco = false;
  4262ee:	2300      	movs	r3, #0
            AM_CRITICAL_END
  4262f0:	9804      	ldr	r0, [sp, #16]
            g_bPostponeTempco = false;
  4262f2:	7023      	strb	r3, [r4, #0]
            AM_CRITICAL_END
  4262f4:	f002 faaa 	bl	42884c <am_hal_interrupt_master_set>
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  4262f8:	2101      	movs	r1, #1
  4262fa:	2005      	movs	r0, #5
  4262fc:	9100      	str	r1, [sp, #0]
  4262fe:	463b      	mov	r3, r7
  426300:	463a      	mov	r2, r7
  426302:	4631      	mov	r1, r6
  426304:	f001 fb04 	bl	427910 <am_hal_delay_us_status_check>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
  426308:	b920      	cbnz	r0, 426314 <am_hal_pwrctrl_periph_enable+0x9c>
    if ( (AM_REGVAL(pwr_ctrl.ui32PwrStatReqAddr) &
  42630a:	6833      	ldr	r3, [r6, #0]
  42630c:	423b      	tst	r3, r7
  42630e:	f040 8166 	bne.w	4265de <am_hal_pwrctrl_periph_enable+0x366>
        return AM_HAL_STATUS_FAIL;
  426312:	2001      	movs	r0, #1
} // am_hal_pwrctrl_periph_enable()
  426314:	b007      	add	sp, #28
  426316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ui32Status;
  42631a:	2006      	movs	r0, #6
} // am_hal_pwrctrl_periph_enable()
  42631c:	4770      	bx	lr
         (PWRCTRL->DEVPWRSTATUS_b.PWRSTOTP == PWRCTRL_DEVPWRSTATUS_PWRSTOTP_OFF))
  42631e:	4ba3      	ldr	r3, [pc, #652]	@ (4265ac <am_hal_pwrctrl_periph_enable+0x334>)
  426320:	689b      	ldr	r3, [r3, #8]
    if ( (ePeripheral == AM_HAL_PWRCTRL_PERIPH_CRYPTO)      &&
  426322:	0118      	lsls	r0, r3, #4
  426324:	d5f5      	bpl.n	426312 <am_hal_pwrctrl_periph_enable+0x9a>
    if (g_ui32TrimVer <= 1)
  426326:	4ba2      	ldr	r3, [pc, #648]	@ (4265b0 <am_hal_pwrctrl_periph_enable+0x338>)
  426328:	681b      	ldr	r3, [r3, #0]
  42632a:	2b01      	cmp	r3, #1
  42632c:	f240 81a3 	bls.w	426676 <am_hal_pwrctrl_periph_enable+0x3fe>
            AM_CRITICAL_BEGIN
  426330:	f002 fa88 	bl	428844 <am_hal_interrupt_master_disable>
  426334:	9005      	str	r0, [sp, #20]
            AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) |=
  426336:	f8d9 3000 	ldr.w	r3, [r9]
  42633a:	ea43 0308 	orr.w	r3, r3, r8
  42633e:	f8c9 3000 	str.w	r3, [r9]
            AM_CRITICAL_END
  426342:	9805      	ldr	r0, [sp, #20]
  426344:	f002 fa82 	bl	42884c <am_hal_interrupt_master_set>
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  426348:	2501      	movs	r5, #1
  42634a:	463b      	mov	r3, r7
  42634c:	463a      	mov	r2, r7
  42634e:	4631      	mov	r1, r6
  426350:	2005      	movs	r0, #5
  426352:	9500      	str	r5, [sp, #0]
  426354:	f001 fadc 	bl	427910 <am_hal_delay_us_status_check>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
  426358:	2800      	cmp	r0, #0
  42635a:	d1db      	bne.n	426314 <am_hal_pwrctrl_periph_enable+0x9c>
    if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_CRYPTO)
  42635c:	2c17      	cmp	r4, #23
  42635e:	f000 8164 	beq.w	42662a <am_hal_pwrctrl_periph_enable+0x3b2>
    if ( ePeripheral == AM_HAL_PWRCTRL_PERIPH_OTP)
  426362:	2c1d      	cmp	r4, #29
  426364:	f000 817e 	beq.w	426664 <am_hal_pwrctrl_periph_enable+0x3ec>
    if ( (AM_REGVAL(pwr_ctrl.ui32PwrStatReqAddr) &
  426368:	6833      	ldr	r3, [r6, #0]
  42636a:	423b      	tst	r3, r7
  42636c:	d0d1      	beq.n	426312 <am_hal_pwrctrl_periph_enable+0x9a>
        switch(ePeripheral)
  42636e:	3c10      	subs	r4, #16
  426370:	2c03      	cmp	r4, #3
  426372:	f200 8134 	bhi.w	4265de <am_hal_pwrctrl_periph_enable+0x366>
  426376:	e8df f014 	tbh	[pc, r4, lsl #1]
  42637a:	014c      	.short	0x014c
  42637c:	01270140 	.word	0x01270140
  426380:	0134      	.short	0x0134
        AM_CRITICAL_BEGIN
  426382:	f002 fa5f 	bl	428844 <am_hal_interrupt_master_disable>
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  426386:	2c14      	cmp	r4, #20
        AM_CRITICAL_BEGIN
  426388:	9003      	str	r0, [sp, #12]
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  42638a:	d144      	bne.n	426416 <am_hal_pwrctrl_periph_enable+0x19e>
            if (g_ePreGpuPwrMode == AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE)
  42638c:	4b83      	ldr	r3, [pc, #524]	@ (42659c <am_hal_pwrctrl_periph_enable+0x324>)
  42638e:	7818      	ldrb	r0, [r3, #0]
  426390:	2803      	cmp	r0, #3
  426392:	f000 8174 	beq.w	42667e <am_hal_pwrctrl_periph_enable+0x406>
                am_hal_sysctrl_ton_config_update(true, AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER);
  426396:	4629      	mov	r1, r5
  426398:	2001      	movs	r0, #1
  42639a:	f002 fb85 	bl	428aa8 <am_hal_sysctrl_ton_config_update>
    if ((g_ui32TrimVer >= 1) && g_bOrigTrimsStored)
  42639e:	f8da 5000 	ldr.w	r5, [sl]
  4263a2:	2d00      	cmp	r5, #0
  4263a4:	d037      	beq.n	426416 <am_hal_pwrctrl_periph_enable+0x19e>
  4263a6:	4b7f      	ldr	r3, [pc, #508]	@ (4265a4 <am_hal_pwrctrl_periph_enable+0x32c>)
  4263a8:	781b      	ldrb	r3, [r3, #0]
  4263aa:	b3a3      	cbz	r3, 426416 <am_hal_pwrctrl_periph_enable+0x19e>
        if (PWRCTRL->VRSTATUS_b.SIMOBUCKST == PWRCTRL_VRSTATUS_SIMOBUCKST_ACT) // Buck mode
  4263ac:	f8df b1fc 	ldr.w	fp, [pc, #508]	@ 4265ac <am_hal_pwrctrl_periph_enable+0x334>
  4263b0:	f8db 3108 	ldr.w	r3, [fp, #264]	@ 0x108
  4263b4:	f3c3 1301 	ubfx	r3, r3, #4, #2
  4263b8:	2b03      	cmp	r3, #3
  4263ba:	f000 8277 	beq.w	4268ac <am_hal_pwrctrl_periph_enable+0x634>
            MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 2;
  4263be:	2102      	movs	r1, #2
            g_ui32CurCORELDOTEMPCOTRIMLDO = MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM;
  4263c0:	4b7c      	ldr	r3, [pc, #496]	@ (4265b4 <am_hal_pwrctrl_periph_enable+0x33c>)
  4263c2:	487d      	ldr	r0, [pc, #500]	@ (4265b8 <am_hal_pwrctrl_periph_enable+0x340>)
  4263c4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  4263c8:	f3c2 2283 	ubfx	r2, r2, #10, #4
  4263cc:	6002      	str	r2, [r0, #0]
            MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 2;
  4263ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
            am_hal_delay_us(15);
  4263d2:	200f      	movs	r0, #15
            MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 2;
  4263d4:	f361 228d 	bfi	r2, r1, #10, #4
  4263d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            g_ui32CurMEMLDOACTIVETRIMLDO = MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM;
  4263dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  4263e0:	4976      	ldr	r1, [pc, #472]	@ (4265bc <am_hal_pwrctrl_periph_enable+0x344>)
  4263e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
  4263e6:	600a      	str	r2, [r1, #0]
            MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM + 5 > 0x3F ? 0x3F : MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM + 5;
  4263e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  4263ec:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
  4263f0:	2a3a      	cmp	r2, #58	@ 0x3a
  4263f2:	bf8c      	ite	hi
  4263f4:	233f      	movhi	r3, #63	@ 0x3f
  4263f6:	f8d3 3088 	ldrls.w	r3, [r3, #136]	@ 0x88
  4263fa:	4a6e      	ldr	r2, [pc, #440]	@ (4265b4 <am_hal_pwrctrl_periph_enable+0x33c>)
  4263fc:	bf98      	it	ls
  4263fe:	3305      	addls	r3, #5
  426400:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
  426404:	bf98      	it	ls
  426406:	f003 033f 	andls.w	r3, r3, #63	@ 0x3f
  42640a:	f363 0105 	bfi	r1, r3, #0, #6
  42640e:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
            am_hal_delay_us(15);
  426412:	f001 fa2b 	bl	42786c <am_hal_delay_us>
        AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) |=
  426416:	f8d9 3000 	ldr.w	r3, [r9]
  42641a:	ea43 0308 	orr.w	r3, r3, r8
  42641e:	f8c9 3000 	str.w	r3, [r9]
        AM_CRITICAL_END
  426422:	9803      	ldr	r0, [sp, #12]
  426424:	f002 fa12 	bl	42884c <am_hal_interrupt_master_set>
  426428:	e78e      	b.n	426348 <am_hal_pwrctrl_periph_enable+0xd0>
                am_hal_pwrctrl_gpu_mode_select(AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE);
  42642a:	f7ff fda9 	bl	425f80 <am_hal_pwrctrl_gpu_mode_select>
    if ((g_ui32TrimVer >= 1) && g_bOrigTrimsStored)
  42642e:	f8da 3000 	ldr.w	r3, [sl]
  426432:	2b00      	cmp	r3, #0
  426434:	f43f af4d 	beq.w	4262d2 <am_hal_pwrctrl_periph_enable+0x5a>
  426438:	4a5a      	ldr	r2, [pc, #360]	@ (4265a4 <am_hal_pwrctrl_periph_enable+0x32c>)
  42643a:	7812      	ldrb	r2, [r2, #0]
  42643c:	2a00      	cmp	r2, #0
  42643e:	f43f af48 	beq.w	4262d2 <am_hal_pwrctrl_periph_enable+0x5a>
        if (PWRCTRL->VRSTATUS_b.SIMOBUCKST == PWRCTRL_VRSTATUS_SIMOBUCKST_ACT) // Buck mode
  426442:	4a5a      	ldr	r2, [pc, #360]	@ (4265ac <am_hal_pwrctrl_periph_enable+0x334>)
  426444:	f8d2 2108 	ldr.w	r2, [r2, #264]	@ 0x108
  426448:	f3c2 1201 	ubfx	r2, r2, #4, #2
  42644c:	2a03      	cmp	r2, #3
  42644e:	d175      	bne.n	42653c <am_hal_pwrctrl_periph_enable+0x2c4>
            if (g_ui32TrimVer == 1)
  426450:	2b01      	cmp	r3, #1
  426452:	f040 8117 	bne.w	426684 <am_hal_pwrctrl_periph_enable+0x40c>
// Dynamically turn on and off the overrides for buck and LDO
// Override configs are already set once in buck_ldo_override_init
void
buck_ldo_update_override(bool bEnable)
{
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  426456:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 4265b4 <am_hal_pwrctrl_periph_enable+0x33c>
        am_hal_delay_us(5);
  42645a:	2005      	movs	r0, #5
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  42645c:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
  426460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  426464:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
#if AM_HAL_PWRCTL_SET_CORELDO_MEMLDO_IN_PARALLEL
    MCUCTRL->VRCTRL_b.CORELDOOVER    = bEnable;
  426468:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
  42646c:	f023 0301 	bic.w	r3, r3, #1
  426470:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOOVER     = bEnable;
  426474:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
  426478:	f023 0320 	bic.w	r3, r3, #32
  42647c:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
        am_hal_delay_us(5);
  426480:	f001 f9f4 	bl	42786c <am_hal_delay_us>
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  426484:	f04f 0e01 	mov.w	lr, #1
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 0;
  426488:	4a48      	ldr	r2, [pc, #288]	@ (4265ac <am_hal_pwrctrl_periph_enable+0x334>)
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = g_orig_TVRGCVREFTRIM + 9 > 0x7F ? 0x7F : g_orig_TVRGCVREFTRIM + 9;
  42648a:	f8df c138 	ldr.w	ip, [pc, #312]	@ 4265c4 <am_hal_pwrctrl_periph_enable+0x34c>
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 0;
  42648e:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM + 15 > 0x7F ? 0x7F : g_orig_TVRGFVREFTRIM + 15;
  426492:	494b      	ldr	r1, [pc, #300]	@ (4265c0 <am_hal_pwrctrl_periph_enable+0x348>)
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 0;
  426494:	f023 0301 	bic.w	r3, r3, #1
  426498:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  42649c:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        am_hal_delay_us(5);
  4264a0:	2005      	movs	r0, #5
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  4264a2:	f36e 238d 	bfi	r3, lr, #10, #4
  4264a6:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = g_orig_TVRGCVREFTRIM + 9 > 0x7F ? 0x7F : g_orig_TVRGCVREFTRIM + 9;
  4264aa:	f8dc 3000 	ldr.w	r3, [ip]
  4264ae:	f8da c044 	ldr.w	ip, [sl, #68]	@ 0x44
  4264b2:	3309      	adds	r3, #9
  4264b4:	2b7f      	cmp	r3, #127	@ 0x7f
  4264b6:	bf28      	it	cs
  4264b8:	237f      	movcs	r3, #127	@ 0x7f
  4264ba:	f363 0c06 	bfi	ip, r3, #0, #7
  4264be:	f8ca c044 	str.w	ip, [sl, #68]	@ 0x44
                MCUCTRL->D2ASPARE_b.D2ASPARE |= (0x1UL << 8);
  4264c2:	f8da 31b0 	ldr.w	r3, [sl, #432]	@ 0x1b0
  4264c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  4264ca:	f8ca 31b0 	str.w	r3, [sl, #432]	@ 0x1b0
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM + 15 > 0x7F ? 0x7F : g_orig_TVRGFVREFTRIM + 15;
  4264ce:	680b      	ldr	r3, [r1, #0]
  4264d0:	f8da 104c 	ldr.w	r1, [sl, #76]	@ 0x4c
  4264d4:	330f      	adds	r3, #15
  4264d6:	2b7f      	cmp	r3, #127	@ 0x7f
  4264d8:	bf28      	it	cs
  4264da:	237f      	movcs	r3, #127	@ 0x7f
  4264dc:	f363 0106 	bfi	r1, r3, #0, #7
  4264e0:	f8ca 104c 	str.w	r1, [sl, #76]	@ 0x4c
                MCUCTRL->SIMOBUCK14_b.VDDCLKGTRIM = 3;
  4264e4:	f8da 3374 	ldr.w	r3, [sl, #884]	@ 0x374
  4264e8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
  4264ec:	f8ca 3374 	str.w	r3, [sl, #884]	@ 0x374
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 1;
  4264f0:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
  4264f4:	ea43 030e 	orr.w	r3, r3, lr
  4264f8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
        am_hal_delay_us(5);
  4264fc:	f001 f9b6 	bl	42786c <am_hal_delay_us>
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  426500:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
                am_hal_delay_us(15);
  426504:	200f      	movs	r0, #15
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  426506:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
  42650a:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.CORELDOOVER    = bEnable;
  42650e:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
  426512:	f043 0301 	orr.w	r3, r3, #1
  426516:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOOVER     = bEnable;
  42651a:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
  42651e:	f043 0320 	orr.w	r3, r3, #32
  426522:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
                am_hal_delay_us(15);
  426526:	f001 f9a1 	bl	42786c <am_hal_delay_us>
  42652a:	e6d2      	b.n	4262d2 <am_hal_pwrctrl_periph_enable+0x5a>
        if (PWRCTRL->VRSTATUS_b.SIMOBUCKST == PWRCTRL_VRSTATUS_SIMOBUCKST_ACT) // Buck mode
  42652c:	4b1f      	ldr	r3, [pc, #124]	@ (4265ac <am_hal_pwrctrl_periph_enable+0x334>)
  42652e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  426532:	f3c3 1301 	ubfx	r3, r3, #4, #2
  426536:	2b03      	cmp	r3, #3
  426538:	f000 80a4 	beq.w	426684 <am_hal_pwrctrl_periph_enable+0x40c>
            MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 2;
  42653c:	2102      	movs	r1, #2
            g_ui32CurCORELDOTEMPCOTRIMLDO = MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM;
  42653e:	4b1d      	ldr	r3, [pc, #116]	@ (4265b4 <am_hal_pwrctrl_periph_enable+0x33c>)
  426540:	481d      	ldr	r0, [pc, #116]	@ (4265b8 <am_hal_pwrctrl_periph_enable+0x340>)
  426542:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  426546:	f3c2 2283 	ubfx	r2, r2, #10, #4
  42654a:	6002      	str	r2, [r0, #0]
            MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 2;
  42654c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
            am_hal_delay_us(15);
  426550:	200f      	movs	r0, #15
            MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 2;
  426552:	f361 228d 	bfi	r2, r1, #10, #4
  426556:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            g_ui32CurMEMLDOACTIVETRIMLDO = MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM;
  42655a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  42655e:	4917      	ldr	r1, [pc, #92]	@ (4265bc <am_hal_pwrctrl_periph_enable+0x344>)
  426560:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
  426564:	600a      	str	r2, [r1, #0]
            MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM + 5 > 0x3F ? 0x3F : MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM + 5;
  426566:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  42656a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
  42656e:	2a3a      	cmp	r2, #58	@ 0x3a
  426570:	bf8c      	ite	hi
  426572:	233f      	movhi	r3, #63	@ 0x3f
  426574:	f8d3 3088 	ldrls.w	r3, [r3, #136]	@ 0x88
  426578:	4a0e      	ldr	r2, [pc, #56]	@ (4265b4 <am_hal_pwrctrl_periph_enable+0x33c>)
  42657a:	bf98      	it	ls
  42657c:	3305      	addls	r3, #5
  42657e:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
  426582:	bf98      	it	ls
  426584:	f003 033f 	andls.w	r3, r3, #63	@ 0x3f
  426588:	f363 0105 	bfi	r1, r3, #0, #6
  42658c:	f8c2 1088 	str.w	r1, [r2, #136]	@ 0x88
            am_hal_delay_us(15);
  426590:	f001 f96c 	bl	42786c <am_hal_delay_us>
  426594:	e69d      	b.n	4262d2 <am_hal_pwrctrl_periph_enable+0x5a>
  426596:	bf00      	nop
  426598:	0043c7ac 	.word	0x0043c7ac
  42659c:	2004e4e2 	.word	0x2004e4e2
  4265a0:	2004e492 	.word	0x2004e492
  4265a4:	2004e4e0 	.word	0x2004e4e0
  4265a8:	2004e491 	.word	0x2004e491
  4265ac:	40021000 	.word	0x40021000
  4265b0:	2000aa24 	.word	0x2000aa24
  4265b4:	40020000 	.word	0x40020000
  4265b8:	2004e49c 	.word	0x2004e49c
  4265bc:	2004e494 	.word	0x2004e494
  4265c0:	2004e4c8 	.word	0x2004e4c8
  4265c4:	2004e4cc 	.word	0x2004e4cc
                CLKGEN->MSPIIOCLKCTRL_b.MSPI2IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI2IOCLKEN_EN;
  4265c8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
  4265cc:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
                am_hal_delay_us(10);
  4265d0:	200a      	movs	r0, #10
                CLKGEN->MSPIIOCLKCTRL_b.MSPI2IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI2IOCLKEN_EN;
  4265d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
  4265d6:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                am_hal_delay_us(10);
  4265da:	f001 f947 	bl	42786c <am_hal_delay_us>
        return AM_HAL_STATUS_SUCCESS;
  4265de:	2000      	movs	r0, #0
  4265e0:	e698      	b.n	426314 <am_hal_pwrctrl_periph_enable+0x9c>
                CLKGEN->MSPIIOCLKCTRL_b.MSPI3IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI3IOCLKEN_EN;
  4265e2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
  4265e6:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
                am_hal_delay_us(10);
  4265ea:	200a      	movs	r0, #10
                CLKGEN->MSPIIOCLKCTRL_b.MSPI3IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI3IOCLKEN_EN;
  4265ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
  4265f0:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                am_hal_delay_us(10);
  4265f4:	f001 f93a 	bl	42786c <am_hal_delay_us>
                break;
  4265f8:	e7f1      	b.n	4265de <am_hal_pwrctrl_periph_enable+0x366>
                CLKGEN->MSPIIOCLKCTRL_b.MSPI1IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI1IOCLKEN_EN;
  4265fa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
  4265fe:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
                am_hal_delay_us(10);
  426602:	200a      	movs	r0, #10
                CLKGEN->MSPIIOCLKCTRL_b.MSPI1IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI1IOCLKEN_EN;
  426604:	f043 0320 	orr.w	r3, r3, #32
  426608:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                am_hal_delay_us(10);
  42660c:	f001 f92e 	bl	42786c <am_hal_delay_us>
                break;
  426610:	e7e5      	b.n	4265de <am_hal_pwrctrl_periph_enable+0x366>
                CLKGEN->MSPIIOCLKCTRL_b.MSPI0IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI0IOCLKEN_EN;
  426612:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
  426616:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
                am_hal_delay_us(10);
  42661a:	200a      	movs	r0, #10
                CLKGEN->MSPIIOCLKCTRL_b.MSPI0IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI0IOCLKEN_EN;
  42661c:	f043 0301 	orr.w	r3, r3, #1
  426620:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                am_hal_delay_us(10);
  426624:	f001 f922 	bl	42786c <am_hal_delay_us>
                break;
  426628:	e7d9      	b.n	4265de <am_hal_pwrctrl_periph_enable+0x366>
        ui32Status = am_hal_delay_us_status_change(CRYPTO_WAIT_USEC,
  42662a:	462b      	mov	r3, r5
  42662c:	462a      	mov	r2, r5
  42662e:	2064      	movs	r0, #100	@ 0x64
  426630:	4996      	ldr	r1, [pc, #600]	@ (42688c <am_hal_pwrctrl_periph_enable+0x614>)
  426632:	f001 f945 	bl	4278c0 <am_hal_delay_us_status_change>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
  426636:	2800      	cmp	r0, #0
  426638:	f47f ae6c 	bne.w	426314 <am_hal_pwrctrl_periph_enable+0x9c>
    if ( (AM_REGVAL(pwr_ctrl.ui32PwrStatReqAddr) &
  42663c:	6833      	ldr	r3, [r6, #0]
  42663e:	423b      	tst	r3, r7
  426640:	bf0c      	ite	eq
  426642:	4628      	moveq	r0, r5
  426644:	2000      	movne	r0, #0
  426646:	e665      	b.n	426314 <am_hal_pwrctrl_periph_enable+0x9c>
#if AM_HAL_ENABLE_TEMPCO_VDDF
    int32_t i32TVRGFDiff = 0;
    int32_t i32TVRGFReduce = 0;
#endif

    if (g_bOrigTrimsStored && (PWRCTRL->VRSTATUS_b.SIMOBUCKST == PWRCTRL_VRSTATUS_SIMOBUCKST_ACT))
  426648:	4b91      	ldr	r3, [pc, #580]	@ (426890 <am_hal_pwrctrl_periph_enable+0x618>)
  42664a:	781b      	ldrb	r3, [r3, #0]
  42664c:	b13b      	cbz	r3, 42665e <am_hal_pwrctrl_periph_enable+0x3e6>
  42664e:	4991      	ldr	r1, [pc, #580]	@ (426894 <am_hal_pwrctrl_periph_enable+0x61c>)
  426650:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
  426654:	f3c3 1301 	ubfx	r3, r3, #4, #2
  426658:	2b03      	cmp	r3, #3
  42665a:	f000 80ea 	beq.w	426832 <am_hal_pwrctrl_periph_enable+0x5ba>
                g_bTempcoPending  = false;
  42665e:	2300      	movs	r3, #0
  426660:	7013      	strb	r3, [r2, #0]
  426662:	e644      	b.n	4262ee <am_hal_pwrctrl_periph_enable+0x76>
        am_hal_delay_us(100);
  426664:	2064      	movs	r0, #100	@ 0x64
  426666:	f001 f901 	bl	42786c <am_hal_delay_us>
    if ( (AM_REGVAL(pwr_ctrl.ui32PwrStatReqAddr) &
  42666a:	6833      	ldr	r3, [r6, #0]
  42666c:	423b      	tst	r3, r7
  42666e:	bf0c      	ite	eq
  426670:	2001      	moveq	r0, #1
  426672:	2000      	movne	r0, #0
  426674:	e64e      	b.n	426314 <am_hal_pwrctrl_periph_enable+0x9c>
        AM_CRITICAL_BEGIN
  426676:	f002 f8e5 	bl	428844 <am_hal_interrupt_master_disable>
  42667a:	9003      	str	r0, [sp, #12]
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  42667c:	e6cb      	b.n	426416 <am_hal_pwrctrl_periph_enable+0x19e>
                am_hal_pwrctrl_gpu_mode_select(AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE);
  42667e:	f7ff fc7f 	bl	425f80 <am_hal_pwrctrl_gpu_mode_select>
  426682:	e68c      	b.n	42639e <am_hal_pwrctrl_periph_enable+0x126>
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  426684:	2101      	movs	r1, #1
                g_ui32CurCORELDOTEMPCOTRIMBuck = MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM;
  426686:	4b84      	ldr	r3, [pc, #528]	@ (426898 <am_hal_pwrctrl_periph_enable+0x620>)
  426688:	4884      	ldr	r0, [pc, #528]	@ (42689c <am_hal_pwrctrl_periph_enable+0x624>)
  42668a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM += i32CORELDODiff;
  42668e:	f8df b208 	ldr.w	fp, [pc, #520]	@ 426898 <am_hal_pwrctrl_periph_enable+0x620>
                g_ui32CurCORELDOTEMPCOTRIMBuck = MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM;
  426692:	f3c2 2283 	ubfx	r2, r2, #10, #4
  426696:	6002      	str	r2, [r0, #0]
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  426698:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 5;
  42669c:	2005      	movs	r0, #5
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  42669e:	f361 228d 	bfi	r2, r1, #10, #4
  4266a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                if (MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM + 12 > 0x3FF)
  4266a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  4266aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
  4266ae:	f5b2 7f7d 	cmp.w	r2, #1012	@ 0x3f4
                    i32CORELDODiff = 0x3FF - MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM;
  4266b2:	bf2a      	itet	cs
  4266b4:	f8d3 3080 	ldrcs.w	r3, [r3, #128]	@ 0x80
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM += i32CORELDODiff;
  4266b8:	f04f 0a0c 	movcc.w	sl, #12
                    i32CORELDODiff = 0x3FF - MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM;
  4266bc:	ea6f 0a03 	mvncs.w	sl, r3
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM += i32CORELDODiff;
  4266c0:	f8db 3080 	ldr.w	r3, [fp, #128]	@ 0x80
  4266c4:	bf28      	it	cs
  4266c6:	f3ca 0a09 	ubfxcs	sl, sl, #0, #10
  4266ca:	f8db 2080 	ldr.w	r2, [fp, #128]	@ 0x80
  4266ce:	4453      	add	r3, sl
  4266d0:	f363 0209 	bfi	r2, r3, #0, #10
  4266d4:	f8cb 2080 	str.w	r2, [fp, #128]	@ 0x80
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 5;
  4266d8:	f8db 3088 	ldr.w	r3, [fp, #136]	@ 0x88
  4266dc:	f360 0305 	bfi	r3, r0, #0, #6
  4266e0:	f8cb 3088 	str.w	r3, [fp, #136]	@ 0x88
                am_hal_delay_us(5);
  4266e4:	f001 f8c2 	bl	42786c <am_hal_delay_us>
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM + 15 > 0x7F ? 0x7F : MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM + 15;
  4266e8:	f8db 304c 	ldr.w	r3, [fp, #76]	@ 0x4c
                am_hal_delay_us(10);
  4266ec:	200a      	movs	r0, #10
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM + 15 > 0x7F ? 0x7F : MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM + 15;
  4266ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
  4266f2:	2b70      	cmp	r3, #112	@ 0x70
  4266f4:	bf8c      	ite	hi
  4266f6:	237f      	movhi	r3, #127	@ 0x7f
  4266f8:	f8db 304c 	ldrls.w	r3, [fp, #76]	@ 0x4c
  4266fc:	f8df b198 	ldr.w	fp, [pc, #408]	@ 426898 <am_hal_pwrctrl_periph_enable+0x620>
  426700:	bf98      	it	ls
  426702:	330f      	addls	r3, #15
  426704:	f8db 204c 	ldr.w	r2, [fp, #76]	@ 0x4c
  426708:	bf98      	it	ls
  42670a:	f003 037f 	andls.w	r3, r3, #127	@ 0x7f
  42670e:	f363 0206 	bfi	r2, r3, #0, #7
  426712:	f8cb 204c 	str.w	r2, [fp, #76]	@ 0x4c
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVORVAL = 1;
  426716:	f8db 3380 	ldr.w	r3, [fp, #896]	@ 0x380
  42671a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  42671e:	f8cb 3380 	str.w	r3, [fp, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVOREN = 1;
  426722:	f8db 3380 	ldr.w	r3, [fp, #896]	@ 0x380
  426726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
  42672a:	f8cb 3380 	str.w	r3, [fp, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSORVAL = 1;
  42672e:	f8db 3380 	ldr.w	r3, [fp, #896]	@ 0x380
  426732:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
  426736:	f8cb 3380 	str.w	r3, [fp, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSOREN = 1;
  42673a:	f8db 3380 	ldr.w	r3, [fp, #896]	@ 0x380
  42673e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  426742:	f8cb 3380 	str.w	r3, [fp, #896]	@ 0x380
                am_hal_delay_us(10);
  426746:	f001 f891 	bl	42786c <am_hal_delay_us>
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9 > 0x7F ? 0x7F : MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9;
  42674a:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
                MCUCTRL->SIMOBUCK2_b.VDDCACTLOWTONTRIM = 10;
  42674e:	f04f 0c0a 	mov.w	ip, #10
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9 > 0x7F ? 0x7F : MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9;
  426752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
  426756:	2b76      	cmp	r3, #118	@ 0x76
  426758:	bf88      	it	hi
  42675a:	227f      	movhi	r2, #127	@ 0x7f
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTLOWTONTRIM = 8;
  42675c:	f04f 0108 	mov.w	r1, #8
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9 > 0x7F ? 0x7F : MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9;
  426760:	bf98      	it	ls
  426762:	f8db 2044 	ldrls.w	r2, [fp, #68]	@ 0x44
  426766:	4b4c      	ldr	r3, [pc, #304]	@ (426898 <am_hal_pwrctrl_periph_enable+0x620>)
  426768:	bf98      	it	ls
  42676a:	3209      	addls	r2, #9
  42676c:	f8d3 e044 	ldr.w	lr, [r3, #68]	@ 0x44
  426770:	bf98      	it	ls
  426772:	f002 027f 	andls.w	r2, r2, #127	@ 0x7f
  426776:	f362 0e06 	bfi	lr, r2, #0, #7
  42677a:	f8c3 e044 	str.w	lr, [r3, #68]	@ 0x44
                MCUCTRL->D2ASPARE_b.D2ASPARE |= (0x1UL << 8);
  42677e:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
                if (g_eCurGpuPwrMode == AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER)
  426782:	4847      	ldr	r0, [pc, #284]	@ (4268a0 <am_hal_pwrctrl_periph_enable+0x628>)
                MCUCTRL->D2ASPARE_b.D2ASPARE |= (0x1UL << 8);
  426784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
  426788:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
                MCUCTRL->SIMOBUCK2_b.VDDCACTLOWTONTRIM = 10;
  42678c:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
  426790:	f36c 625d 	bfi	r2, ip, #25, #5
  426794:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
                MCUCTRL->SIMOBUCK2_b.VDDCACTHIGHTONTRIM = 10;
  426798:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
  42679c:	f36c 22cf 	bfi	r2, ip, #11, #5
  4267a0:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTLOWTONTRIM = 8;
  4267a4:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
  4267a8:	f361 625d 	bfi	r2, r1, #25, #5
  4267ac:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTHIGHTONTRIM = 8;
  4267b0:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
  4267b4:	f361 22cf 	bfi	r2, r1, #11, #5
  4267b8:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
                if (g_eCurGpuPwrMode == AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER)
  4267bc:	7802      	ldrb	r2, [r0, #0]
  4267be:	2a00      	cmp	r2, #0
  4267c0:	d152      	bne.n	426868 <am_hal_pwrctrl_periph_enable+0x5f0>
                    MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM = 16;
  4267c2:	2010      	movs	r0, #16
                    MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 20;
  4267c4:	2114      	movs	r1, #20
                    MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM = 20;
  4267c6:	f8d3 2358 	ldr.w	r2, [r3, #856]	@ 0x358
  4267ca:	f360 220c 	bfi	r2, r0, #8, #5
  4267ce:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
                    MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 22;
  4267d2:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
  4267d6:	f361 4255 	bfi	r2, r1, #17, #5
  4267da:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVORVAL = 0;
  4267de:	4b2e      	ldr	r3, [pc, #184]	@ (426898 <am_hal_pwrctrl_periph_enable+0x620>)
  4267e0:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  4267e4:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  4267e8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVOREN = 0;
  4267ec:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  4267f0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
  4267f4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSORVAL = 0;
  4267f8:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  4267fc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  426800:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSOREN = 0;
  426804:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  426808:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
  42680c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM -= i32CORELDODiff;
  426810:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  426814:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
  426818:	eba2 020a 	sub.w	r2, r2, sl
  42681c:	f362 0109 	bfi	r1, r2, #0, #10
  426820:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 0;
  426824:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  426828:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
  42682c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  426830:	e54f      	b.n	4262d2 <am_hal_pwrctrl_periph_enable+0x5a>
                vddc_vddf_tempco(g_eTempCoRange);
  426832:	4b1c      	ldr	r3, [pc, #112]	@ (4268a4 <am_hal_pwrctrl_periph_enable+0x62c>)
    {
        if (PWRCTRL->DEVPWREN_b.PWRENGFX)
  426834:	6849      	ldr	r1, [r1, #4]
                vddc_vddf_tempco(g_eTempCoRange);
  426836:	f893 c000 	ldrb.w	ip, [r3]
        }
#endif
#if AM_HAL_ENABLE_TEMPCO_VDDF
        if (i32TVRGFReduce - i32TVRGFDiff > 0)
        {
            MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM <= i32TVRGFReduce - i32TVRGFDiff? 0x0 : g_orig_TVRGFVREFTRIM - (i32TVRGFReduce - i32TVRGFDiff);
  42683a:	4b1b      	ldr	r3, [pc, #108]	@ (4268a8 <am_hal_pwrctrl_periph_enable+0x630>)
        if (PWRCTRL->DEVPWREN_b.PWRENGFX)
  42683c:	f3c1 4080 	ubfx	r0, r1, #18, #1
  426840:	0349      	lsls	r1, r1, #13
            MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM <= i32TVRGFReduce - i32TVRGFDiff? 0x0 : g_orig_TVRGFVREFTRIM - (i32TVRGFReduce - i32TVRGFDiff);
  426842:	681b      	ldr	r3, [r3, #0]
        if (PWRCTRL->DEVPWREN_b.PWRENGFX)
  426844:	d513      	bpl.n	42686e <am_hal_pwrctrl_periph_enable+0x5f6>
        switch (eTempCoRange)
  426846:	f1bc 0f02 	cmp.w	ip, #2
  42684a:	bf34      	ite	cc
  42684c:	f06f 0504 	mvncc.w	r5, #4
  426850:	f06f 050e 	mvncs.w	r5, #14
        }
        else
        {
            MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM - (i32TVRGFReduce - i32TVRGFDiff) >= 0x7F ? 0x7F : g_orig_TVRGFVREFTRIM - (i32TVRGFReduce - i32TVRGFDiff);
  426854:	1b5b      	subs	r3, r3, r5
  426856:	2b7f      	cmp	r3, #127	@ 0x7f
  426858:	bf28      	it	cs
  42685a:	237f      	movcs	r3, #127	@ 0x7f
  42685c:	490e      	ldr	r1, [pc, #56]	@ (426898 <am_hal_pwrctrl_periph_enable+0x620>)
  42685e:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
  426860:	f363 0006 	bfi	r0, r3, #0, #7
  426864:	64c8      	str	r0, [r1, #76]	@ 0x4c
  426866:	e6fa      	b.n	42665e <am_hal_pwrctrl_periph_enable+0x3e6>
                    MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM = 20;
  426868:	2014      	movs	r0, #20
                    MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 22;
  42686a:	2116      	movs	r1, #22
  42686c:	e7ab      	b.n	4267c6 <am_hal_pwrctrl_periph_enable+0x54e>
        switch (eTempCoRange)
  42686e:	f1bc 0f01 	cmp.w	ip, #1
  426872:	d8ef      	bhi.n	426854 <am_hal_pwrctrl_periph_enable+0x5dc>
            MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM <= i32TVRGFReduce - i32TVRGFDiff? 0x0 : g_orig_TVRGFVREFTRIM - (i32TVRGFReduce - i32TVRGFDiff);
  426874:	2b0a      	cmp	r3, #10
  426876:	bf84      	itt	hi
  426878:	3b0a      	subhi	r3, #10
  42687a:	f003 007f 	andhi.w	r0, r3, #127	@ 0x7f
  42687e:	4b06      	ldr	r3, [pc, #24]	@ (426898 <am_hal_pwrctrl_periph_enable+0x620>)
  426880:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  426882:	f360 0106 	bfi	r1, r0, #0, #7
  426886:	64d9      	str	r1, [r3, #76]	@ 0x4c
        }
#endif
    }
}
  426888:	e6e9      	b.n	42665e <am_hal_pwrctrl_periph_enable+0x3e6>
  42688a:	bf00      	nop
  42688c:	400c1f10 	.word	0x400c1f10
  426890:	2004e4e0 	.word	0x2004e4e0
  426894:	40021000 	.word	0x40021000
  426898:	40020000 	.word	0x40020000
  42689c:	2004e498 	.word	0x2004e498
  4268a0:	2004e4e3 	.word	0x2004e4e3
  4268a4:	2004e490 	.word	0x2004e490
  4268a8:	2004e4c8 	.word	0x2004e4c8
            if (g_ui32TrimVer == 1)
  4268ac:	2d01      	cmp	r5, #1
  4268ae:	f000 80d6 	beq.w	426a5e <am_hal_pwrctrl_periph_enable+0x7e6>
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  4268b2:	2101      	movs	r1, #1
                g_ui32CurCORELDOTEMPCOTRIMBuck = MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM;
  4268b4:	4b9d      	ldr	r3, [pc, #628]	@ (426b2c <am_hal_pwrctrl_periph_enable+0x8b4>)
  4268b6:	489e      	ldr	r0, [pc, #632]	@ (426b30 <am_hal_pwrctrl_periph_enable+0x8b8>)
  4268b8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM += i32CORELDODiff;
  4268bc:	f8df a26c 	ldr.w	sl, [pc, #620]	@ 426b2c <am_hal_pwrctrl_periph_enable+0x8b4>
                g_ui32CurCORELDOTEMPCOTRIMBuck = MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM;
  4268c0:	f3c2 2283 	ubfx	r2, r2, #10, #4
  4268c4:	6002      	str	r2, [r0, #0]
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  4268c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 5;
  4268ca:	2005      	movs	r0, #5
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  4268cc:	f361 228d 	bfi	r2, r1, #10, #4
  4268d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                if (MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM + 12 > 0x3FF)
  4268d4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  4268d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
  4268dc:	f5b2 7f7d 	cmp.w	r2, #1012	@ 0x3f4
                    i32CORELDODiff = 0x3FF - MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM;
  4268e0:	bf2a      	itet	cs
  4268e2:	f8d3 5080 	ldrcs.w	r5, [r3, #128]	@ 0x80
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM += i32CORELDODiff;
  4268e6:	250c      	movcc	r5, #12
                    i32CORELDODiff = 0x3FF - MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM;
  4268e8:	43ed      	mvncs	r5, r5
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM += i32CORELDODiff;
  4268ea:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
  4268ee:	bf28      	it	cs
  4268f0:	f3c5 0509 	ubfxcs	r5, r5, #0, #10
  4268f4:	f8da 2080 	ldr.w	r2, [sl, #128]	@ 0x80
  4268f8:	442b      	add	r3, r5
  4268fa:	f363 0209 	bfi	r2, r3, #0, #10
  4268fe:	f8ca 2080 	str.w	r2, [sl, #128]	@ 0x80
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 5;
  426902:	f8da 3088 	ldr.w	r3, [sl, #136]	@ 0x88
  426906:	f360 0305 	bfi	r3, r0, #0, #6
  42690a:	f8ca 3088 	str.w	r3, [sl, #136]	@ 0x88
                am_hal_delay_us(5);
  42690e:	f000 ffad 	bl	42786c <am_hal_delay_us>
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM + 15 > 0x7F ? 0x7F : MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM + 15;
  426912:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
                am_hal_delay_us(10);
  426916:	200a      	movs	r0, #10
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM + 15 > 0x7F ? 0x7F : MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM + 15;
  426918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
  42691c:	2b70      	cmp	r3, #112	@ 0x70
  42691e:	bf8c      	ite	hi
  426920:	237f      	movhi	r3, #127	@ 0x7f
  426922:	f8da 304c 	ldrls.w	r3, [sl, #76]	@ 0x4c
  426926:	f8df a204 	ldr.w	sl, [pc, #516]	@ 426b2c <am_hal_pwrctrl_periph_enable+0x8b4>
  42692a:	bf98      	it	ls
  42692c:	330f      	addls	r3, #15
  42692e:	f8da 204c 	ldr.w	r2, [sl, #76]	@ 0x4c
  426932:	bf98      	it	ls
  426934:	f003 037f 	andls.w	r3, r3, #127	@ 0x7f
  426938:	f363 0206 	bfi	r2, r3, #0, #7
  42693c:	f8ca 204c 	str.w	r2, [sl, #76]	@ 0x4c
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVORVAL = 1;
  426940:	f8da 3380 	ldr.w	r3, [sl, #896]	@ 0x380
  426944:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  426948:	f8ca 3380 	str.w	r3, [sl, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVOREN = 1;
  42694c:	f8da 3380 	ldr.w	r3, [sl, #896]	@ 0x380
  426950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
  426954:	f8ca 3380 	str.w	r3, [sl, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSORVAL = 1;
  426958:	f8da 3380 	ldr.w	r3, [sl, #896]	@ 0x380
  42695c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
  426960:	f8ca 3380 	str.w	r3, [sl, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSOREN = 1;
  426964:	f8da 3380 	ldr.w	r3, [sl, #896]	@ 0x380
  426968:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  42696c:	f8ca 3380 	str.w	r3, [sl, #896]	@ 0x380
                am_hal_delay_us(10);
  426970:	f000 ff7c 	bl	42786c <am_hal_delay_us>
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9 > 0x7F ? 0x7F : MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9;
  426974:	f8da 3044 	ldr.w	r3, [sl, #68]	@ 0x44
                MCUCTRL->SIMOBUCK2_b.VDDCACTLOWTONTRIM = 10;
  426978:	f04f 0c0a 	mov.w	ip, #10
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9 > 0x7F ? 0x7F : MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9;
  42697c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
  426980:	2b76      	cmp	r3, #118	@ 0x76
  426982:	bf88      	it	hi
  426984:	227f      	movhi	r2, #127	@ 0x7f
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTLOWTONTRIM = 8;
  426986:	f04f 0108 	mov.w	r1, #8
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9 > 0x7F ? 0x7F : MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM + 9;
  42698a:	bf98      	it	ls
  42698c:	f8da 2044 	ldrls.w	r2, [sl, #68]	@ 0x44
  426990:	4b66      	ldr	r3, [pc, #408]	@ (426b2c <am_hal_pwrctrl_periph_enable+0x8b4>)
  426992:	bf98      	it	ls
  426994:	3209      	addls	r2, #9
  426996:	f8d3 e044 	ldr.w	lr, [r3, #68]	@ 0x44
  42699a:	bf98      	it	ls
  42699c:	f002 027f 	andls.w	r2, r2, #127	@ 0x7f
  4269a0:	f362 0e06 	bfi	lr, r2, #0, #7
  4269a4:	f8c3 e044 	str.w	lr, [r3, #68]	@ 0x44
                MCUCTRL->D2ASPARE_b.D2ASPARE |= (0x1UL << 8);
  4269a8:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
                if (g_eCurGpuPwrMode == AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER)
  4269ac:	4861      	ldr	r0, [pc, #388]	@ (426b34 <am_hal_pwrctrl_periph_enable+0x8bc>)
                MCUCTRL->D2ASPARE_b.D2ASPARE |= (0x1UL << 8);
  4269ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
  4269b2:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
                MCUCTRL->SIMOBUCK2_b.VDDCACTLOWTONTRIM = 10;
  4269b6:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
  4269ba:	f36c 625d 	bfi	r2, ip, #25, #5
  4269be:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
                MCUCTRL->SIMOBUCK2_b.VDDCACTHIGHTONTRIM = 10;
  4269c2:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
  4269c6:	f36c 22cf 	bfi	r2, ip, #11, #5
  4269ca:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTLOWTONTRIM = 8;
  4269ce:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
  4269d2:	f361 625d 	bfi	r2, r1, #25, #5
  4269d6:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTHIGHTONTRIM = 8;
  4269da:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
  4269de:	f361 22cf 	bfi	r2, r1, #11, #5
  4269e2:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
                if (g_eCurGpuPwrMode == AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER)
  4269e6:	7802      	ldrb	r2, [r0, #0]
  4269e8:	bbb2      	cbnz	r2, 426a58 <am_hal_pwrctrl_periph_enable+0x7e0>
                    MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM = 16;
  4269ea:	2010      	movs	r0, #16
                    MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 20;
  4269ec:	2114      	movs	r1, #20
                    MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM = 20;
  4269ee:	f8d3 2358 	ldr.w	r2, [r3, #856]	@ 0x358
  4269f2:	f360 220c 	bfi	r2, r0, #8, #5
  4269f6:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
                    MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 22;
  4269fa:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
  4269fe:	f361 4255 	bfi	r2, r1, #17, #5
  426a02:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVORVAL = 0;
  426a06:	4b49      	ldr	r3, [pc, #292]	@ (426b2c <am_hal_pwrctrl_periph_enable+0x8b4>)
  426a08:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  426a0c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  426a10:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVOREN = 0;
  426a14:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  426a18:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
  426a1c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSORVAL = 0;
  426a20:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  426a24:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  426a28:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSOREN = 0;
  426a2c:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  426a30:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
  426a34:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM -= i32CORELDODiff;
  426a38:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  426a3c:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
  426a40:	1b52      	subs	r2, r2, r5
  426a42:	f362 0109 	bfi	r1, r2, #0, #10
  426a46:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 0;
  426a4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  426a4e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
  426a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  426a56:	e4de      	b.n	426416 <am_hal_pwrctrl_periph_enable+0x19e>
                    MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM = 20;
  426a58:	2014      	movs	r0, #20
                    MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 22;
  426a5a:	2116      	movs	r1, #22
  426a5c:	e7c7      	b.n	4269ee <am_hal_pwrctrl_periph_enable+0x776>
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  426a5e:	f8df a0cc 	ldr.w	sl, [pc, #204]	@ 426b2c <am_hal_pwrctrl_periph_enable+0x8b4>
        am_hal_delay_us(5);
  426a62:	2005      	movs	r0, #5
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  426a64:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
  426a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  426a6c:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.CORELDOOVER    = bEnable;
  426a70:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
  426a74:	f023 0301 	bic.w	r3, r3, #1
  426a78:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOOVER     = bEnable;
  426a7c:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
  426a80:	f023 0320 	bic.w	r3, r3, #32
  426a84:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
        am_hal_delay_us(5);
  426a88:	f000 fef0 	bl	42786c <am_hal_delay_us>
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 0;
  426a8c:	f8db 3100 	ldr.w	r3, [fp, #256]	@ 0x100
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = g_orig_TVRGCVREFTRIM + 9 > 0x7F ? 0x7F : g_orig_TVRGCVREFTRIM + 9;
  426a90:	4929      	ldr	r1, [pc, #164]	@ (426b38 <am_hal_pwrctrl_periph_enable+0x8c0>)
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 0;
  426a92:	f023 0301 	bic.w	r3, r3, #1
  426a96:	f8cb 3100 	str.w	r3, [fp, #256]	@ 0x100
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  426a9a:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM + 15 > 0x7F ? 0x7F : g_orig_TVRGFVREFTRIM + 15;
  426a9e:	4a27      	ldr	r2, [pc, #156]	@ (426b3c <am_hal_pwrctrl_periph_enable+0x8c4>)
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = 1;
  426aa0:	f365 238d 	bfi	r3, r5, #10, #4
  426aa4:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = g_orig_TVRGCVREFTRIM + 9 > 0x7F ? 0x7F : g_orig_TVRGCVREFTRIM + 9;
  426aa8:	680b      	ldr	r3, [r1, #0]
  426aaa:	f8da 1044 	ldr.w	r1, [sl, #68]	@ 0x44
  426aae:	3309      	adds	r3, #9
  426ab0:	2b7f      	cmp	r3, #127	@ 0x7f
  426ab2:	bf28      	it	cs
  426ab4:	237f      	movcs	r3, #127	@ 0x7f
  426ab6:	f363 0106 	bfi	r1, r3, #0, #7
  426aba:	f8ca 1044 	str.w	r1, [sl, #68]	@ 0x44
                MCUCTRL->D2ASPARE_b.D2ASPARE |= (0x1UL << 8);
  426abe:	f8da 31b0 	ldr.w	r3, [sl, #432]	@ 0x1b0
        am_hal_delay_us(5);
  426ac2:	2005      	movs	r0, #5
                MCUCTRL->D2ASPARE_b.D2ASPARE |= (0x1UL << 8);
  426ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  426ac8:	f8ca 31b0 	str.w	r3, [sl, #432]	@ 0x1b0
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM + 15 > 0x7F ? 0x7F : g_orig_TVRGFVREFTRIM + 15;
  426acc:	6813      	ldr	r3, [r2, #0]
  426ace:	f8da 204c 	ldr.w	r2, [sl, #76]	@ 0x4c
  426ad2:	330f      	adds	r3, #15
  426ad4:	2b7f      	cmp	r3, #127	@ 0x7f
  426ad6:	bf28      	it	cs
  426ad8:	237f      	movcs	r3, #127	@ 0x7f
  426ada:	f363 0206 	bfi	r2, r3, #0, #7
  426ade:	f8ca 204c 	str.w	r2, [sl, #76]	@ 0x4c
                MCUCTRL->SIMOBUCK14_b.VDDCLKGTRIM = 3;
  426ae2:	f8da 3374 	ldr.w	r3, [sl, #884]	@ 0x374
  426ae6:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
  426aea:	f8ca 3374 	str.w	r3, [sl, #884]	@ 0x374
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 1;
  426aee:	f8db 3100 	ldr.w	r3, [fp, #256]	@ 0x100
  426af2:	f043 0301 	orr.w	r3, r3, #1
  426af6:	f8cb 3100 	str.w	r3, [fp, #256]	@ 0x100
        am_hal_delay_us(5);
  426afa:	f000 feb7 	bl	42786c <am_hal_delay_us>
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  426afe:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
                am_hal_delay_us(15);
  426b02:	200f      	movs	r0, #15
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  426b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
  426b08:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.CORELDOOVER    = bEnable;
  426b0c:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
  426b10:	f043 0301 	orr.w	r3, r3, #1
  426b14:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOOVER     = bEnable;
  426b18:	f8da 3060 	ldr.w	r3, [sl, #96]	@ 0x60
  426b1c:	f043 0320 	orr.w	r3, r3, #32
  426b20:	f8ca 3060 	str.w	r3, [sl, #96]	@ 0x60
                am_hal_delay_us(15);
  426b24:	f000 fea2 	bl	42786c <am_hal_delay_us>
  426b28:	e475      	b.n	426416 <am_hal_pwrctrl_periph_enable+0x19e>
  426b2a:	bf00      	nop
  426b2c:	40020000 	.word	0x40020000
  426b30:	2004e498 	.word	0x2004e498
  426b34:	2004e4e3 	.word	0x2004e4e3
  426b38:	2004e4cc 	.word	0x2004e4cc
  426b3c:	2004e4c8 	.word	0x2004e4c8

00426b40 <am_hal_pwrctrl_periph_disable>:
    if ( pwr_ctrl == NULL || ePeripheral >= AM_HAL_PWRCTRL_PERIPH_MAX )
  426b40:	2821      	cmp	r0, #33	@ 0x21
  426b42:	d865      	bhi.n	426c10 <am_hal_pwrctrl_periph_disable+0xd0>
    *pwr_ctrl = am_hal_pwrctrl_peripheral_control[ePeripheral];
  426b44:	4b9a      	ldr	r3, [pc, #616]	@ (426db0 <am_hal_pwrctrl_periph_disable+0x270>)
  426b46:	0102      	lsls	r2, r0, #4
{
  426b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ( !(AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & pwr_ctrl.ui32PeriphEnable) )
  426b4c:	589e      	ldr	r6, [r3, r2]
    *pwr_ctrl = am_hal_pwrctrl_peripheral_control[ePeripheral];
  426b4e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
  426b52:	e9d3 5801 	ldrd	r5, r8, [r3, #4]
  426b56:	68df      	ldr	r7, [r3, #12]
    if ( !(AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & pwr_ctrl.ui32PeriphEnable) )
  426b58:	6833      	ldr	r3, [r6, #0]
  426b5a:	4604      	mov	r4, r0
  426b5c:	422b      	tst	r3, r5
{
  426b5e:	b086      	sub	sp, #24
    if ( !(AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & pwr_ctrl.ui32PeriphEnable) )
  426b60:	f000 80a7 	beq.w	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
    if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_OTP)
  426b64:	281d      	cmp	r0, #29
  426b66:	d055      	beq.n	426c14 <am_hal_pwrctrl_periph_disable+0xd4>
    if (g_ui32TrimVer <= 1)
  426b68:	f8df 9274 	ldr.w	r9, [pc, #628]	@ 426de0 <am_hal_pwrctrl_periph_disable+0x2a0>
        AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) &= ~pwr_ctrl.ui32PeriphEnable;
  426b6c:	43ed      	mvns	r5, r5
    if (g_ui32TrimVer <= 1)
  426b6e:	f8d9 3000 	ldr.w	r3, [r9]
  426b72:	2b01      	cmp	r3, #1
  426b74:	f240 8081 	bls.w	426c7a <am_hal_pwrctrl_periph_disable+0x13a>
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  426b78:	2814      	cmp	r0, #20
  426b7a:	d163      	bne.n	426c44 <am_hal_pwrctrl_periph_disable+0x104>
            g_bPostponeTempco = true;
  426b7c:	2301      	movs	r3, #1
  426b7e:	4c8d      	ldr	r4, [pc, #564]	@ (426db4 <am_hal_pwrctrl_periph_disable+0x274>)
  426b80:	7023      	strb	r3, [r4, #0]
            AM_CRITICAL_BEGIN
  426b82:	f001 fe5f 	bl	428844 <am_hal_interrupt_master_disable>
  426b86:	9003      	str	r0, [sp, #12]
            AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) &= ~pwr_ctrl.ui32PeriphEnable;
  426b88:	6833      	ldr	r3, [r6, #0]
  426b8a:	402b      	ands	r3, r5
  426b8c:	6033      	str	r3, [r6, #0]
            AM_CRITICAL_END
  426b8e:	9803      	ldr	r0, [sp, #12]
  426b90:	f001 fe5c 	bl	42884c <am_hal_interrupt_master_set>
    if ((g_ui32TrimVer >= 1) && g_bOrigTrimsStored)
  426b94:	f8d9 3000 	ldr.w	r3, [r9]
  426b98:	b1db      	cbz	r3, 426bd2 <am_hal_pwrctrl_periph_disable+0x92>
  426b9a:	4a87      	ldr	r2, [pc, #540]	@ (426db8 <am_hal_pwrctrl_periph_disable+0x278>)
  426b9c:	7812      	ldrb	r2, [r2, #0]
  426b9e:	b1c2      	cbz	r2, 426bd2 <am_hal_pwrctrl_periph_disable+0x92>
        if (PWRCTRL->VRSTATUS_b.SIMOBUCKST == PWRCTRL_VRSTATUS_SIMOBUCKST_ACT) // Buck mode
  426ba0:	4d86      	ldr	r5, [pc, #536]	@ (426dbc <am_hal_pwrctrl_periph_disable+0x27c>)
  426ba2:	f8d5 2108 	ldr.w	r2, [r5, #264]	@ 0x108
  426ba6:	f3c2 1201 	ubfx	r2, r2, #4, #2
  426baa:	2a03      	cmp	r2, #3
  426bac:	f000 811a 	beq.w	426de4 <am_hal_pwrctrl_periph_disable+0x2a4>
            MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = g_ui32CurMEMLDOACTIVETRIMLDO;
  426bb0:	4b83      	ldr	r3, [pc, #524]	@ (426dc0 <am_hal_pwrctrl_periph_disable+0x280>)
  426bb2:	4a84      	ldr	r2, [pc, #528]	@ (426dc4 <am_hal_pwrctrl_periph_disable+0x284>)
  426bb4:	6811      	ldr	r1, [r2, #0]
  426bb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  426bba:	f361 0205 	bfi	r2, r1, #0, #6
  426bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = g_ui32CurCORELDOTEMPCOTRIMLDO;
  426bc2:	4a81      	ldr	r2, [pc, #516]	@ (426dc8 <am_hal_pwrctrl_periph_disable+0x288>)
  426bc4:	6811      	ldr	r1, [r2, #0]
  426bc6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  426bca:	f361 228d 	bfi	r2, r1, #10, #4
  426bce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            AM_CRITICAL_BEGIN
  426bd2:	f001 fe37 	bl	428844 <am_hal_interrupt_master_disable>
            if (g_bTempcoPending)
  426bd6:	4b7d      	ldr	r3, [pc, #500]	@ (426dcc <am_hal_pwrctrl_periph_disable+0x28c>)
            AM_CRITICAL_BEGIN
  426bd8:	9004      	str	r0, [sp, #16]
            if (g_bTempcoPending)
  426bda:	781a      	ldrb	r2, [r3, #0]
  426bdc:	2a00      	cmp	r2, #0
  426bde:	f040 809a 	bne.w	426d16 <am_hal_pwrctrl_periph_disable+0x1d6>
            g_bPostponeTempco = false;
  426be2:	2500      	movs	r5, #0
            AM_CRITICAL_END
  426be4:	9804      	ldr	r0, [sp, #16]
            g_bPostponeTempco = false;
  426be6:	7025      	strb	r5, [r4, #0]
            AM_CRITICAL_END
  426be8:	f001 fe30 	bl	42884c <am_hal_interrupt_master_set>
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  426bec:	2005      	movs	r0, #5
  426bee:	463b      	mov	r3, r7
  426bf0:	4641      	mov	r1, r8
  426bf2:	463a      	mov	r2, r7
  426bf4:	9500      	str	r5, [sp, #0]
  426bf6:	f000 fe8b 	bl	427910 <am_hal_delay_us_status_check>
    if (AM_HAL_STATUS_SUCCESS == ui32Status)
  426bfa:	2800      	cmp	r0, #0
  426bfc:	d14a      	bne.n	426c94 <am_hal_pwrctrl_periph_disable+0x154>
            if (g_eCurGpuPwrMode == AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE)
  426bfe:	4b74      	ldr	r3, [pc, #464]	@ (426dd0 <am_hal_pwrctrl_periph_disable+0x290>)
  426c00:	781c      	ldrb	r4, [r3, #0]
  426c02:	2c03      	cmp	r4, #3
  426c04:	f000 81ca 	beq.w	426f9c <am_hal_pwrctrl_periph_disable+0x45c>
                g_ePreGpuPwrMode = AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER;
  426c08:	2200      	movs	r2, #0
  426c0a:	4b72      	ldr	r3, [pc, #456]	@ (426dd4 <am_hal_pwrctrl_periph_disable+0x294>)
  426c0c:	701a      	strb	r2, [r3, #0]
  426c0e:	e050      	b.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
        return ui32Status;
  426c10:	2006      	movs	r0, #6
} // am_hal_pwrctrl_periph_disable()
  426c12:	4770      	bx	lr
        if (!APOLLO5_GE_B1 && (PWRCTRL->DEVPWRSTATUS_b.PWRSTCRYPTO))
  426c14:	4b6a      	ldr	r3, [pc, #424]	@ (426dc0 <am_hal_pwrctrl_periph_disable+0x280>)
  426c16:	68db      	ldr	r3, [r3, #12]
  426c18:	b2db      	uxtb	r3, r3
  426c1a:	2b21      	cmp	r3, #33	@ 0x21
  426c1c:	d804      	bhi.n	426c28 <am_hal_pwrctrl_periph_disable+0xe8>
  426c1e:	4b67      	ldr	r3, [pc, #412]	@ (426dbc <am_hal_pwrctrl_periph_disable+0x27c>)
  426c20:	689b      	ldr	r3, [r3, #8]
  426c22:	0298      	lsls	r0, r3, #10
  426c24:	f100 8085 	bmi.w	426d32 <am_hal_pwrctrl_periph_disable+0x1f2>
        ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_OTP_US,
  426c28:	2201      	movs	r2, #1
  426c2a:	2300      	movs	r3, #0
  426c2c:	496a      	ldr	r1, [pc, #424]	@ (426dd8 <am_hal_pwrctrl_periph_disable+0x298>)
  426c2e:	486b      	ldr	r0, [pc, #428]	@ (426ddc <am_hal_pwrctrl_periph_disable+0x29c>)
  426c30:	9200      	str	r2, [sp, #0]
  426c32:	f000 fe6d 	bl	427910 <am_hal_delay_us_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
  426c36:	2800      	cmp	r0, #0
  426c38:	d13c      	bne.n	426cb4 <am_hal_pwrctrl_periph_disable+0x174>
    if (g_ui32TrimVer <= 1)
  426c3a:	4b69      	ldr	r3, [pc, #420]	@ (426de0 <am_hal_pwrctrl_periph_disable+0x2a0>)
  426c3c:	681b      	ldr	r3, [r3, #0]
  426c3e:	2b01      	cmp	r3, #1
  426c40:	d979      	bls.n	426d36 <am_hal_pwrctrl_periph_disable+0x1f6>
  426c42:	43ed      	mvns	r5, r5
            AM_CRITICAL_BEGIN
  426c44:	f001 fdfe 	bl	428844 <am_hal_interrupt_master_disable>
  426c48:	9005      	str	r0, [sp, #20]
            AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) &= ~pwr_ctrl.ui32PeriphEnable;
  426c4a:	6833      	ldr	r3, [r6, #0]
  426c4c:	401d      	ands	r5, r3
  426c4e:	6035      	str	r5, [r6, #0]
            AM_CRITICAL_END
  426c50:	9805      	ldr	r0, [sp, #20]
  426c52:	f001 fdfb 	bl	42884c <am_hal_interrupt_master_set>
    ui32Status = am_hal_delay_us_status_check(AM_HAL_PWRCTRL_MAX_WAIT_US,
  426c56:	2500      	movs	r5, #0
  426c58:	463b      	mov	r3, r7
  426c5a:	4641      	mov	r1, r8
  426c5c:	463a      	mov	r2, r7
  426c5e:	2005      	movs	r0, #5
  426c60:	9500      	str	r5, [sp, #0]
  426c62:	f000 fe55 	bl	427910 <am_hal_delay_us_status_check>
    if (AM_HAL_STATUS_SUCCESS == ui32Status)
  426c66:	b9a8      	cbnz	r0, 426c94 <am_hal_pwrctrl_periph_disable+0x154>
        switch(ePeripheral)
  426c68:	f1a4 0310 	sub.w	r3, r4, #16
  426c6c:	2b03      	cmp	r3, #3
  426c6e:	f200 8334 	bhi.w	4272da <am_hal_pwrctrl_periph_disable+0x79a>
  426c72:	e8df f003 	tbb	[pc, r3]
  426c76:	3e47      	.short	0x3e47
  426c78:	2c35      	.short	0x2c35
        AM_CRITICAL_BEGIN
  426c7a:	f001 fde3 	bl	428844 <am_hal_interrupt_master_disable>
  426c7e:	9002      	str	r0, [sp, #8]
        AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) &= ~pwr_ctrl.ui32PeriphEnable;
  426c80:	6833      	ldr	r3, [r6, #0]
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  426c82:	2c14      	cmp	r4, #20
        AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) &= ~pwr_ctrl.ui32PeriphEnable;
  426c84:	ea03 0305 	and.w	r3, r3, r5
  426c88:	6033      	str	r3, [r6, #0]
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  426c8a:	d05c      	beq.n	426d46 <am_hal_pwrctrl_periph_disable+0x206>
        AM_CRITICAL_END
  426c8c:	9802      	ldr	r0, [sp, #8]
  426c8e:	f001 fddd 	bl	42884c <am_hal_interrupt_master_set>
  426c92:	e7e0      	b.n	426c56 <am_hal_pwrctrl_periph_disable+0x116>
    switch (pwr_ctrl.ui32PeriphStatus)
  426c94:	f5b7 7ff0 	cmp.w	r7, #480	@ 0x1e0
  426c98:	f000 8084 	beq.w	426da4 <am_hal_pwrctrl_periph_disable+0x264>
  426c9c:	d90d      	bls.n	426cba <am_hal_pwrctrl_periph_disable+0x17a>
  426c9e:	f5b7 5ff0 	cmp.w	r7, #7680	@ 0x1e00
  426ca2:	d075      	beq.n	426d90 <am_hal_pwrctrl_periph_disable+0x250>
  426ca4:	f5b7 3f70 	cmp.w	r7, #245760	@ 0x3c000
  426ca8:	d103      	bne.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
            if (((AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & PWRCTRL_MSPI_DEVPWREN_MASK) != 0) &&
  426caa:	6833      	ldr	r3, [r6, #0]
  426cac:	f413 3f70 	tst.w	r3, #245760	@ 0x3c000
  426cb0:	d10b      	bne.n	426cca <am_hal_pwrctrl_periph_disable+0x18a>
        return AM_HAL_STATUS_SUCCESS;
  426cb2:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_disable()
  426cb4:	b006      	add	sp, #24
  426cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (pwr_ctrl.ui32PeriphStatus)
  426cba:	2f1e      	cmp	r7, #30
  426cbc:	d06d      	beq.n	426d9a <am_hal_pwrctrl_periph_disable+0x25a>
  426cbe:	2fc4      	cmp	r7, #196	@ 0xc4
  426cc0:	d1f7      	bne.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
            if (((AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & PWRCTRL_AUD_DEVPWREN_MASK) != 0) &&
  426cc2:	6833      	ldr	r3, [r6, #0]
  426cc4:	f013 0fc4 	tst.w	r3, #196	@ 0xc4
  426cc8:	d0f3      	beq.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
                ((AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & pwr_ctrl.ui32PeriphEnable) == 0))
  426cca:	6833      	ldr	r3, [r6, #0]
        return pwrctrl_periph_disable_msk_check(ePeripheral);
  426ccc:	e7f1      	b.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
                CLKGEN->MSPIIOCLKCTRL_b.MSPI3IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI3IOCLKEN_DIS;
  426cce:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
  426cd2:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  426cd6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
  426cda:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  426cde:	e7e8      	b.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
                CLKGEN->MSPIIOCLKCTRL_b.MSPI2IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI2IOCLKEN_DIS;
  426ce0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
  426ce4:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  426ce8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  426cec:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  426cf0:	e7df      	b.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
                CLKGEN->MSPIIOCLKCTRL_b.MSPI1IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI1IOCLKEN_DIS;
  426cf2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
  426cf6:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  426cfa:	f023 0320 	bic.w	r3, r3, #32
  426cfe:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  426d02:	e7d6      	b.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
                CLKGEN->MSPIIOCLKCTRL_b.MSPI0IOCLKEN = CLKGEN_MSPIIOCLKCTRL_MSPI0IOCLKEN_DIS;
  426d04:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
  426d08:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  426d0c:	f023 0301 	bic.w	r3, r3, #1
  426d10:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  426d14:	e7cd      	b.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
    if (g_bOrigTrimsStored && (PWRCTRL->VRSTATUS_b.SIMOBUCKST == PWRCTRL_VRSTATUS_SIMOBUCKST_ACT))
  426d16:	4a28      	ldr	r2, [pc, #160]	@ (426db8 <am_hal_pwrctrl_periph_disable+0x278>)
  426d18:	7812      	ldrb	r2, [r2, #0]
  426d1a:	b13a      	cbz	r2, 426d2c <am_hal_pwrctrl_periph_disable+0x1ec>
  426d1c:	4927      	ldr	r1, [pc, #156]	@ (426dbc <am_hal_pwrctrl_periph_disable+0x27c>)
  426d1e:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
  426d22:	f3c2 1201 	ubfx	r2, r2, #4, #2
  426d26:	2a03      	cmp	r2, #3
  426d28:	f000 811f 	beq.w	426f6a <am_hal_pwrctrl_periph_disable+0x42a>
                g_bTempcoPending  = false;
  426d2c:	2200      	movs	r2, #0
  426d2e:	701a      	strb	r2, [r3, #0]
  426d30:	e757      	b.n	426be2 <am_hal_pwrctrl_periph_disable+0xa2>
            return AM_HAL_STATUS_IN_USE;
  426d32:	2003      	movs	r0, #3
  426d34:	e7be      	b.n	426cb4 <am_hal_pwrctrl_periph_disable+0x174>
        AM_CRITICAL_BEGIN
  426d36:	f001 fd85 	bl	428844 <am_hal_interrupt_master_disable>
  426d3a:	9002      	str	r0, [sp, #8]
        AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) &= ~pwr_ctrl.ui32PeriphEnable;
  426d3c:	6833      	ldr	r3, [r6, #0]
  426d3e:	ea23 0305 	bic.w	r3, r3, r5
  426d42:	6033      	str	r3, [r6, #0]
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  426d44:	e7a2      	b.n	426c8c <am_hal_pwrctrl_periph_disable+0x14c>
    if ((g_ui32TrimVer >= 1) && g_bOrigTrimsStored)
  426d46:	f8d9 3000 	ldr.w	r3, [r9]
  426d4a:	b1e3      	cbz	r3, 426d86 <am_hal_pwrctrl_periph_disable+0x246>
  426d4c:	4a1a      	ldr	r2, [pc, #104]	@ (426db8 <am_hal_pwrctrl_periph_disable+0x278>)
  426d4e:	7812      	ldrb	r2, [r2, #0]
  426d50:	b1ca      	cbz	r2, 426d86 <am_hal_pwrctrl_periph_disable+0x246>
        if (PWRCTRL->VRSTATUS_b.SIMOBUCKST == PWRCTRL_VRSTATUS_SIMOBUCKST_ACT) // Buck mode
  426d52:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 426dbc <am_hal_pwrctrl_periph_disable+0x27c>
  426d56:	f8d9 2108 	ldr.w	r2, [r9, #264]	@ 0x108
  426d5a:	f3c2 1201 	ubfx	r2, r2, #4, #2
  426d5e:	2a03      	cmp	r2, #3
  426d60:	f000 81a2 	beq.w	4270a8 <am_hal_pwrctrl_periph_disable+0x568>
            MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = g_ui32CurMEMLDOACTIVETRIMLDO;
  426d64:	4b16      	ldr	r3, [pc, #88]	@ (426dc0 <am_hal_pwrctrl_periph_disable+0x280>)
  426d66:	4a17      	ldr	r2, [pc, #92]	@ (426dc4 <am_hal_pwrctrl_periph_disable+0x284>)
  426d68:	6811      	ldr	r1, [r2, #0]
  426d6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  426d6e:	f361 0205 	bfi	r2, r1, #0, #6
  426d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
            MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = g_ui32CurCORELDOTEMPCOTRIMLDO;
  426d76:	4a14      	ldr	r2, [pc, #80]	@ (426dc8 <am_hal_pwrctrl_periph_disable+0x288>)
  426d78:	6811      	ldr	r1, [r2, #0]
  426d7a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  426d7e:	f361 228d 	bfi	r2, r1, #10, #4
  426d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            am_hal_sysctrl_ton_config_update(false, AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER);
  426d86:	2100      	movs	r1, #0
  426d88:	4608      	mov	r0, r1
  426d8a:	f001 fe8d 	bl	428aa8 <am_hal_sysctrl_ton_config_update>
  426d8e:	e77d      	b.n	426c8c <am_hal_pwrctrl_periph_disable+0x14c>
            if (((AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & PWRCTRL_HCPA_DEVPWREN_MASK) != 0) &&
  426d90:	6833      	ldr	r3, [r6, #0]
  426d92:	f413 5ff0 	tst.w	r3, #7680	@ 0x1e00
  426d96:	d08c      	beq.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
  426d98:	e797      	b.n	426cca <am_hal_pwrctrl_periph_disable+0x18a>
            if (((AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & PWRCTRL_HCPB_DEVPWREN_MASK) != 0) &&
  426d9a:	6833      	ldr	r3, [r6, #0]
  426d9c:	f013 0f1e 	tst.w	r3, #30
  426da0:	d087      	beq.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
  426da2:	e792      	b.n	426cca <am_hal_pwrctrl_periph_disable+0x18a>
            if (((AM_REGVAL(pwr_ctrl.ui32PwrEnRegAddr) & PWRCTRL_HCPC_DEVPWREN_MASK) != 0) &&
  426da4:	6833      	ldr	r3, [r6, #0]
  426da6:	f413 7ff0 	tst.w	r3, #480	@ 0x1e0
  426daa:	d082      	beq.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
  426dac:	e78d      	b.n	426cca <am_hal_pwrctrl_periph_disable+0x18a>
  426dae:	bf00      	nop
  426db0:	0043c7ac 	.word	0x0043c7ac
  426db4:	2004e492 	.word	0x2004e492
  426db8:	2004e4e0 	.word	0x2004e4e0
  426dbc:	40021000 	.word	0x40021000
  426dc0:	40020000 	.word	0x40020000
  426dc4:	2004e494 	.word	0x2004e494
  426dc8:	2004e49c 	.word	0x2004e49c
  426dcc:	2004e491 	.word	0x2004e491
  426dd0:	2004e4e3 	.word	0x2004e4e3
  426dd4:	2004e4e2 	.word	0x2004e4e2
  426dd8:	40014ac4 	.word	0x40014ac4
  426ddc:	000186a0 	.word	0x000186a0
  426de0:	2000aa24 	.word	0x2000aa24
            if (g_ui32TrimVer == 1)
  426de4:	2b01      	cmp	r3, #1
  426de6:	f000 80eb 	beq.w	426fc0 <am_hal_pwrctrl_periph_disable+0x480>
                if (MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM + 12 > 0x3FF)
  426dea:	4ba7      	ldr	r3, [pc, #668]	@ (427088 <am_hal_pwrctrl_periph_disable+0x548>)
  426dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
  426df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
  426df4:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
  426df8:	f0c0 80d6 	bcc.w	426fa8 <am_hal_pwrctrl_periph_disable+0x468>
                    i32CORELDODiff = 0x3FF - MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM;
  426dfc:	4ba2      	ldr	r3, [pc, #648]	@ (427088 <am_hal_pwrctrl_periph_disable+0x548>)
  426dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
  426e02:	ea6f 0903 	mvn.w	r9, r3
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM += i32CORELDODiff;
  426e06:	f3c9 0909 	ubfx	r9, r9, #0, #10
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 5;
  426e0a:	f04f 0a05 	mov.w	sl, #5
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM += i32CORELDODiff;
  426e0e:	4d9e      	ldr	r5, [pc, #632]	@ (427088 <am_hal_pwrctrl_periph_disable+0x548>)
                am_hal_delay_us(5);
  426e10:	4650      	mov	r0, sl
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM += i32CORELDODiff;
  426e12:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
  426e16:	f8d5 2080 	ldr.w	r2, [r5, #128]	@ 0x80
  426e1a:	444b      	add	r3, r9
  426e1c:	f363 0209 	bfi	r2, r3, #0, #10
  426e20:	f8c5 2080 	str.w	r2, [r5, #128]	@ 0x80
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 5;
  426e24:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
  426e28:	f36a 0305 	bfi	r3, sl, #0, #6
  426e2c:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
                am_hal_delay_us(5);
  426e30:	f000 fd1c 	bl	42786c <am_hal_delay_us>
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVORVAL = 1;
  426e34:	f8d5 3380 	ldr.w	r3, [r5, #896]	@ 0x380
                am_hal_delay_us(10);
  426e38:	200a      	movs	r0, #10
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVORVAL = 1;
  426e3a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  426e3e:	f8c5 3380 	str.w	r3, [r5, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVOREN = 1;
  426e42:	f8d5 3380 	ldr.w	r3, [r5, #896]	@ 0x380
  426e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
  426e4a:	f8c5 3380 	str.w	r3, [r5, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSORVAL = 1;
  426e4e:	f8d5 3380 	ldr.w	r3, [r5, #896]	@ 0x380
  426e52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
  426e56:	f8c5 3380 	str.w	r3, [r5, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSOREN = 1;
  426e5a:	f8d5 3380 	ldr.w	r3, [r5, #896]	@ 0x380
  426e5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  426e62:	f8c5 3380 	str.w	r3, [r5, #896]	@ 0x380
                am_hal_delay_us(10);
  426e66:	f000 fd01 	bl	42786c <am_hal_delay_us>
                MCUCTRL->SIMOBUCK2_b.VDDCACTLOWTONTRIM = 6;
  426e6a:	2206      	movs	r2, #6
                MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM = 7;
  426e6c:	2007      	movs	r0, #7
                MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 10;
  426e6e:	210a      	movs	r1, #10
                MCUCTRL->SIMOBUCK2_b.VDDCACTLOWTONTRIM = 6;
  426e70:	f8d5 3344 	ldr.w	r3, [r5, #836]	@ 0x344
  426e74:	f362 635d 	bfi	r3, r2, #25, #5
  426e78:	f8c5 3344 	str.w	r3, [r5, #836]	@ 0x344
                MCUCTRL->SIMOBUCK2_b.VDDCACTHIGHTONTRIM = 6;
  426e7c:	f8d5 3344 	ldr.w	r3, [r5, #836]	@ 0x344
  426e80:	f362 23cf 	bfi	r3, r2, #11, #5
  426e84:	f8c5 3344 	str.w	r3, [r5, #836]	@ 0x344
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTLOWTONTRIM = 5;
  426e88:	f8d5 334c 	ldr.w	r3, [r5, #844]	@ 0x34c
  426e8c:	f36a 635d 	bfi	r3, sl, #25, #5
  426e90:	f8c5 334c 	str.w	r3, [r5, #844]	@ 0x34c
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTHIGHTONTRIM = 5;
  426e94:	f8d5 334c 	ldr.w	r3, [r5, #844]	@ 0x34c
  426e98:	f36a 23cf 	bfi	r3, sl, #11, #5
  426e9c:	f8c5 334c 	str.w	r3, [r5, #844]	@ 0x34c
                MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM = 7;
  426ea0:	f8d5 3358 	ldr.w	r3, [r5, #856]	@ 0x358
  426ea4:	f360 230c 	bfi	r3, r0, #8, #5
  426ea8:	f8c5 3358 	str.w	r3, [r5, #856]	@ 0x358
                MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 10;
  426eac:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = g_ui32CurCORELDOTEMPCOTRIMBuck;
  426eb0:	4876      	ldr	r0, [pc, #472]	@ (42708c <am_hal_pwrctrl_periph_disable+0x54c>)
                MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 10;
  426eb2:	f361 4355 	bfi	r3, r1, #17, #5
  426eb6:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM < 15 ? 0x0 : MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM - 15;
  426eba:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  426ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
  426ec0:	2b0e      	cmp	r3, #14
  426ec2:	bf94      	ite	ls
  426ec4:	2200      	movls	r2, #0
  426ec6:	6cea      	ldrhi	r2, [r5, #76]	@ 0x4c
  426ec8:	4b6f      	ldr	r3, [pc, #444]	@ (427088 <am_hal_pwrctrl_periph_disable+0x548>)
  426eca:	bf88      	it	hi
  426ecc:	3271      	addhi	r2, #113	@ 0x71
  426ece:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  426ed0:	bf88      	it	hi
  426ed2:	f002 027f 	andhi.w	r2, r2, #127	@ 0x7f
  426ed6:	f362 0106 	bfi	r1, r2, #0, #7
  426eda:	64d9      	str	r1, [r3, #76]	@ 0x4c
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM < 9 ? 0x0 : MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM - 9;
  426edc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  426ede:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
  426ee2:	2a08      	cmp	r2, #8
  426ee4:	bf94      	ite	ls
  426ee6:	2200      	movls	r2, #0
  426ee8:	6c5a      	ldrhi	r2, [r3, #68]	@ 0x44
  426eea:	4b67      	ldr	r3, [pc, #412]	@ (427088 <am_hal_pwrctrl_periph_disable+0x548>)
  426eec:	bf88      	it	hi
  426eee:	3277      	addhi	r2, #119	@ 0x77
  426ef0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
  426ef2:	bf88      	it	hi
  426ef4:	f002 027f 	andhi.w	r2, r2, #127	@ 0x7f
  426ef8:	f362 0106 	bfi	r1, r2, #0, #7
  426efc:	6459      	str	r1, [r3, #68]	@ 0x44
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = g_ui32CurCORELDOTEMPCOTRIMBuck;
  426efe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  426f02:	6801      	ldr	r1, [r0, #0]
  426f04:	f361 228d 	bfi	r2, r1, #10, #4
  426f08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                MCUCTRL->D2ASPARE_b.D2ASPARE &= ~(0x1UL << 8);
  426f0c:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
  426f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
  426f14:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM -= i32CORELDODiff;
  426f18:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  426f1c:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
  426f20:	eba2 0209 	sub.w	r2, r2, r9
  426f24:	f362 0109 	bfi	r1, r2, #0, #10
  426f28:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 0;
  426f2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  426f30:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
  426f34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVORVAL = 0;
  426f38:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  426f3c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  426f40:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVOREN = 0;
  426f44:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  426f48:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
  426f4c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSORVAL = 0;
  426f50:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  426f54:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  426f58:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSOREN = 0;
  426f5c:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  426f60:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
  426f64:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
  426f68:	e633      	b.n	426bd2 <am_hal_pwrctrl_periph_disable+0x92>
                vddc_vddf_tempco(g_eTempCoRange);
  426f6a:	4a49      	ldr	r2, [pc, #292]	@ (427090 <am_hal_pwrctrl_periph_disable+0x550>)
        if (PWRCTRL->DEVPWREN_b.PWRENGFX)
  426f6c:	6849      	ldr	r1, [r1, #4]
                vddc_vddf_tempco(g_eTempCoRange);
  426f6e:	7815      	ldrb	r5, [r2, #0]
            MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM <= i32TVRGFReduce - i32TVRGFDiff? 0x0 : g_orig_TVRGFVREFTRIM - (i32TVRGFReduce - i32TVRGFDiff);
  426f70:	4a48      	ldr	r2, [pc, #288]	@ (427094 <am_hal_pwrctrl_periph_disable+0x554>)
        if (PWRCTRL->DEVPWREN_b.PWRENGFX)
  426f72:	f3c1 4080 	ubfx	r0, r1, #18, #1
  426f76:	0349      	lsls	r1, r1, #13
            MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM <= i32TVRGFReduce - i32TVRGFDiff? 0x0 : g_orig_TVRGFVREFTRIM - (i32TVRGFReduce - i32TVRGFDiff);
  426f78:	6812      	ldr	r2, [r2, #0]
        if (PWRCTRL->DEVPWREN_b.PWRENGFX)
  426f7a:	d518      	bpl.n	426fae <am_hal_pwrctrl_periph_disable+0x46e>
        switch (eTempCoRange)
  426f7c:	2d02      	cmp	r5, #2
  426f7e:	bf34      	ite	cc
  426f80:	f06f 0004 	mvncc.w	r0, #4
  426f84:	f06f 000e 	mvncs.w	r0, #14
            MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM - (i32TVRGFReduce - i32TVRGFDiff) >= 0x7F ? 0x7F : g_orig_TVRGFVREFTRIM - (i32TVRGFReduce - i32TVRGFDiff);
  426f88:	1a12      	subs	r2, r2, r0
  426f8a:	2a7f      	cmp	r2, #127	@ 0x7f
  426f8c:	bf28      	it	cs
  426f8e:	227f      	movcs	r2, #127	@ 0x7f
  426f90:	493d      	ldr	r1, [pc, #244]	@ (427088 <am_hal_pwrctrl_periph_disable+0x548>)
  426f92:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
  426f94:	f362 0006 	bfi	r0, r2, #0, #7
  426f98:	64c8      	str	r0, [r1, #76]	@ 0x4c
  426f9a:	e6c7      	b.n	426d2c <am_hal_pwrctrl_periph_disable+0x1ec>
                am_hal_pwrctrl_gpu_mode_select(AM_HAL_PWRCTRL_GPU_MODE_LOW_POWER);
  426f9c:	2000      	movs	r0, #0
  426f9e:	f7fe ffef 	bl	425f80 <am_hal_pwrctrl_gpu_mode_select>
                g_ePreGpuPwrMode = AM_HAL_PWRCTRL_GPU_MODE_HIGH_PERFORMANCE;
  426fa2:	4b3d      	ldr	r3, [pc, #244]	@ (427098 <am_hal_pwrctrl_periph_disable+0x558>)
  426fa4:	701c      	strb	r4, [r3, #0]
  426fa6:	e684      	b.n	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
  426fa8:	f04f 090c 	mov.w	r9, #12
  426fac:	e72d      	b.n	426e0a <am_hal_pwrctrl_periph_disable+0x2ca>
        switch (eTempCoRange)
  426fae:	2d01      	cmp	r5, #1
  426fb0:	d8ea      	bhi.n	426f88 <am_hal_pwrctrl_periph_disable+0x448>
            MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM <= i32TVRGFReduce - i32TVRGFDiff? 0x0 : g_orig_TVRGFVREFTRIM - (i32TVRGFReduce - i32TVRGFDiff);
  426fb2:	2a0a      	cmp	r2, #10
  426fb4:	bf8a      	itet	hi
  426fb6:	3a0a      	subhi	r2, #10
  426fb8:	4602      	movls	r2, r0
  426fba:	f002 027f 	andhi.w	r2, r2, #127	@ 0x7f
  426fbe:	e7e7      	b.n	426f90 <am_hal_pwrctrl_periph_disable+0x450>
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  426fc0:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 427088 <am_hal_pwrctrl_periph_disable+0x548>
        am_hal_delay_us(5);
  426fc4:	2005      	movs	r0, #5
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  426fc6:	f8d9 3060 	ldr.w	r3, [r9, #96]	@ 0x60
  426fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  426fce:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.CORELDOOVER    = bEnable;
  426fd2:	f8d9 3060 	ldr.w	r3, [r9, #96]	@ 0x60
  426fd6:	f023 0301 	bic.w	r3, r3, #1
  426fda:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOOVER     = bEnable;
  426fde:	f8d9 3060 	ldr.w	r3, [r9, #96]	@ 0x60
  426fe2:	f023 0320 	bic.w	r3, r3, #32
  426fe6:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
        am_hal_delay_us(5);
  426fea:	f000 fc3f 	bl	42786c <am_hal_delay_us>
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 0;
  426fee:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
                MCUCTRL->SIMOBUCK14_b.VDDCLKGTRIM = g_orig_VDDCLKGTRIM;
  426ff2:	f8df e0b0 	ldr.w	lr, [pc, #176]	@ 4270a4 <am_hal_pwrctrl_periph_disable+0x564>
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 0;
  426ff6:	f023 0301 	bic.w	r3, r3, #1
  426ffa:	f8c5 3100 	str.w	r3, [r5, #256]	@ 0x100
                MCUCTRL->SIMOBUCK14_b.VDDCLKGTRIM = g_orig_VDDCLKGTRIM;
  426ffe:	f8d9 3374 	ldr.w	r3, [r9, #884]	@ 0x374
  427002:	f8de e000 	ldr.w	lr, [lr]
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM;
  427006:	f8df c08c 	ldr.w	ip, [pc, #140]	@ 427094 <am_hal_pwrctrl_periph_disable+0x554>
                MCUCTRL->SIMOBUCK14_b.VDDCLKGTRIM = g_orig_VDDCLKGTRIM;
  42700a:	f36e 735e 	bfi	r3, lr, #29, #2
  42700e:	f8c9 3374 	str.w	r3, [r9, #884]	@ 0x374
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM;
  427012:	f8d9 304c 	ldr.w	r3, [r9, #76]	@ 0x4c
  427016:	f8dc c000 	ldr.w	ip, [ip]
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = g_orig_TVRGCVREFTRIM;
  42701a:	4920      	ldr	r1, [pc, #128]	@ (42709c <am_hal_pwrctrl_periph_disable+0x55c>)
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM;
  42701c:	f36c 0306 	bfi	r3, ip, #0, #7
  427020:	f8c9 304c 	str.w	r3, [r9, #76]	@ 0x4c
                MCUCTRL->D2ASPARE_b.D2ASPARE &= ~(0x1UL << 8);
  427024:	f8d9 31b0 	ldr.w	r3, [r9, #432]	@ 0x1b0
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = g_orig_CORELDOTEMPCOTRIM;
  427028:	4a1d      	ldr	r2, [pc, #116]	@ (4270a0 <am_hal_pwrctrl_periph_disable+0x560>)
                MCUCTRL->D2ASPARE_b.D2ASPARE &= ~(0x1UL << 8);
  42702a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
  42702e:	f8c9 31b0 	str.w	r3, [r9, #432]	@ 0x1b0
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = g_orig_TVRGCVREFTRIM;
  427032:	f8d9 3044 	ldr.w	r3, [r9, #68]	@ 0x44
  427036:	6809      	ldr	r1, [r1, #0]
        am_hal_delay_us(5);
  427038:	2005      	movs	r0, #5
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = g_orig_TVRGCVREFTRIM;
  42703a:	f361 0306 	bfi	r3, r1, #0, #7
  42703e:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = g_orig_CORELDOTEMPCOTRIM;
  427042:	f8d9 3080 	ldr.w	r3, [r9, #128]	@ 0x80
  427046:	6812      	ldr	r2, [r2, #0]
  427048:	f362 238d 	bfi	r3, r2, #10, #4
  42704c:	f8c9 3080 	str.w	r3, [r9, #128]	@ 0x80
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 1;
  427050:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  427054:	f043 0301 	orr.w	r3, r3, #1
  427058:	f8c5 3100 	str.w	r3, [r5, #256]	@ 0x100
        am_hal_delay_us(5);
  42705c:	f000 fc06 	bl	42786c <am_hal_delay_us>
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  427060:	f8d9 3060 	ldr.w	r3, [r9, #96]	@ 0x60
  427064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
  427068:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.CORELDOOVER    = bEnable;
  42706c:	f8d9 3060 	ldr.w	r3, [r9, #96]	@ 0x60
  427070:	f043 0301 	orr.w	r3, r3, #1
  427074:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOOVER     = bEnable;
  427078:	f8d9 3060 	ldr.w	r3, [r9, #96]	@ 0x60
  42707c:	f043 0320 	orr.w	r3, r3, #32
  427080:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
} // buck_ldo_update_override()
  427084:	e5a5      	b.n	426bd2 <am_hal_pwrctrl_periph_disable+0x92>
  427086:	bf00      	nop
  427088:	40020000 	.word	0x40020000
  42708c:	2004e498 	.word	0x2004e498
  427090:	2004e490 	.word	0x2004e490
  427094:	2004e4c8 	.word	0x2004e4c8
  427098:	2004e4e2 	.word	0x2004e4e2
  42709c:	2004e4cc 	.word	0x2004e4cc
  4270a0:	2004e4c0 	.word	0x2004e4c0
  4270a4:	2004e4c4 	.word	0x2004e4c4
            if (g_ui32TrimVer == 1)
  4270a8:	2b01      	cmp	r3, #1
  4270aa:	f000 80c4 	beq.w	427236 <am_hal_pwrctrl_periph_disable+0x6f6>
                if (MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM + 12 > 0x3FF)
  4270ae:	4b8d      	ldr	r3, [pc, #564]	@ (4272e4 <am_hal_pwrctrl_periph_disable+0x7a4>)
  4270b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
  4270b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4270b8:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
  4270bc:	f0c0 80b9 	bcc.w	427232 <am_hal_pwrctrl_periph_disable+0x6f2>
                    i32CORELDODiff = 0x3FF - MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM;
  4270c0:	4b88      	ldr	r3, [pc, #544]	@ (4272e4 <am_hal_pwrctrl_periph_disable+0x7a4>)
  4270c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
  4270c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4270ca:	f5c3 737f 	rsb	r3, r3, #1020	@ 0x3fc
  4270ce:	3303      	adds	r3, #3
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 5;
  4270d0:	f04f 0a05 	mov.w	sl, #5
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM += i32CORELDODiff;
  4270d4:	4d83      	ldr	r5, [pc, #524]	@ (4272e4 <am_hal_pwrctrl_periph_disable+0x7a4>)
  4270d6:	fa1f f983 	uxth.w	r9, r3
  4270da:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
  4270de:	f8d5 2080 	ldr.w	r2, [r5, #128]	@ 0x80
  4270e2:	444b      	add	r3, r9
  4270e4:	f363 0209 	bfi	r2, r3, #0, #10
  4270e8:	f8c5 2080 	str.w	r2, [r5, #128]	@ 0x80
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 5;
  4270ec:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
                am_hal_delay_us(5);
  4270f0:	4650      	mov	r0, sl
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 5;
  4270f2:	f36a 0305 	bfi	r3, sl, #0, #6
  4270f6:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
                am_hal_delay_us(5);
  4270fa:	f000 fbb7 	bl	42786c <am_hal_delay_us>
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVORVAL = 1;
  4270fe:	f8d5 3380 	ldr.w	r3, [r5, #896]	@ 0x380
                am_hal_delay_us(10);
  427102:	200a      	movs	r0, #10
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVORVAL = 1;
  427104:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  427108:	f8c5 3380 	str.w	r3, [r5, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVOREN = 1;
  42710c:	f8d5 3380 	ldr.w	r3, [r5, #896]	@ 0x380
  427110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
  427114:	f8c5 3380 	str.w	r3, [r5, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSORVAL = 1;
  427118:	f8d5 3380 	ldr.w	r3, [r5, #896]	@ 0x380
  42711c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
  427120:	f8c5 3380 	str.w	r3, [r5, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSOREN = 1;
  427124:	f8d5 3380 	ldr.w	r3, [r5, #896]	@ 0x380
  427128:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  42712c:	f8c5 3380 	str.w	r3, [r5, #896]	@ 0x380
                am_hal_delay_us(10);
  427130:	f000 fb9c 	bl	42786c <am_hal_delay_us>
                MCUCTRL->SIMOBUCK2_b.VDDCACTLOWTONTRIM = 6;
  427134:	2206      	movs	r2, #6
                MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM = 7;
  427136:	2007      	movs	r0, #7
                MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 10;
  427138:	210a      	movs	r1, #10
                MCUCTRL->SIMOBUCK2_b.VDDCACTLOWTONTRIM = 6;
  42713a:	f8d5 3344 	ldr.w	r3, [r5, #836]	@ 0x344
  42713e:	f362 635d 	bfi	r3, r2, #25, #5
  427142:	f8c5 3344 	str.w	r3, [r5, #836]	@ 0x344
                MCUCTRL->SIMOBUCK2_b.VDDCACTHIGHTONTRIM = 6;
  427146:	f8d5 3344 	ldr.w	r3, [r5, #836]	@ 0x344
  42714a:	f362 23cf 	bfi	r3, r2, #11, #5
  42714e:	f8c5 3344 	str.w	r3, [r5, #836]	@ 0x344
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTLOWTONTRIM = 5;
  427152:	f8d5 334c 	ldr.w	r3, [r5, #844]	@ 0x34c
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM < 15 ? 0x0 : MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM - 15;
  427156:	4a63      	ldr	r2, [pc, #396]	@ (4272e4 <am_hal_pwrctrl_periph_disable+0x7a4>)
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTLOWTONTRIM = 5;
  427158:	f36a 635d 	bfi	r3, sl, #25, #5
  42715c:	f8c5 334c 	str.w	r3, [r5, #844]	@ 0x34c
                MCUCTRL->SIMOBUCK4_b.VDDCLVACTHIGHTONTRIM = 5;
  427160:	f8d5 334c 	ldr.w	r3, [r5, #844]	@ 0x34c
  427164:	f36a 23cf 	bfi	r3, sl, #11, #5
  427168:	f8c5 334c 	str.w	r3, [r5, #844]	@ 0x34c
                MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM = 7;
  42716c:	f8d5 3358 	ldr.w	r3, [r5, #856]	@ 0x358
  427170:	f360 230c 	bfi	r3, r0, #8, #5
  427174:	f8c5 3358 	str.w	r3, [r5, #856]	@ 0x358
                MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 10;
  427178:	f8d5 3354 	ldr.w	r3, [r5, #852]	@ 0x354
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = g_ui32CurCORELDOTEMPCOTRIMBuck;
  42717c:	485a      	ldr	r0, [pc, #360]	@ (4272e8 <am_hal_pwrctrl_periph_disable+0x7a8>)
                MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM = 10;
  42717e:	f361 4355 	bfi	r3, r1, #17, #5
  427182:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM < 15 ? 0x0 : MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM - 15;
  427186:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  427188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
  42718c:	2b0e      	cmp	r3, #14
  42718e:	bf94      	ite	ls
  427190:	2300      	movls	r3, #0
  427192:	6ceb      	ldrhi	r3, [r5, #76]	@ 0x4c
  427194:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
  427196:	bf84      	itt	hi
  427198:	3371      	addhi	r3, #113	@ 0x71
  42719a:	f003 037f 	andhi.w	r3, r3, #127	@ 0x7f
  42719e:	f363 0106 	bfi	r1, r3, #0, #7
  4271a2:	64d1      	str	r1, [r2, #76]	@ 0x4c
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM < 9 ? 0x0 : MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM - 9;
  4271a4:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  4271a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
  4271aa:	2b08      	cmp	r3, #8
  4271ac:	bf98      	it	ls
  4271ae:	2200      	movls	r2, #0
  4271b0:	4b4c      	ldr	r3, [pc, #304]	@ (4272e4 <am_hal_pwrctrl_periph_disable+0x7a4>)
  4271b2:	bf88      	it	hi
  4271b4:	6c52      	ldrhi	r2, [r2, #68]	@ 0x44
  4271b6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
  4271b8:	bf84      	itt	hi
  4271ba:	3277      	addhi	r2, #119	@ 0x77
  4271bc:	f002 027f 	andhi.w	r2, r2, #127	@ 0x7f
  4271c0:	f362 0106 	bfi	r1, r2, #0, #7
  4271c4:	6459      	str	r1, [r3, #68]	@ 0x44
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = g_ui32CurCORELDOTEMPCOTRIMBuck;
  4271c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  4271ca:	6801      	ldr	r1, [r0, #0]
  4271cc:	f361 228d 	bfi	r2, r1, #10, #4
  4271d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                MCUCTRL->D2ASPARE_b.D2ASPARE &= ~(0x1UL << 8);
  4271d4:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
  4271d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
  4271dc:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
                MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM -= i32CORELDODiff;
  4271e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  4271e4:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
  4271e8:	eba2 0209 	sub.w	r2, r2, r9
  4271ec:	f362 0109 	bfi	r1, r2, #0, #10
  4271f0:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
                MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 0;
  4271f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  4271f8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
  4271fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVORVAL = 0;
  427200:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  427204:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  427208:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDCVDDCLVOREN = 0;
  42720c:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  427210:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
  427214:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSORVAL = 0;
  427218:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  42721c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  427220:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
        MCUCTRL->PWRSW1_b.SHORTVDDFVDDSOREN = 0;
  427224:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
  427228:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
  42722c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
  427230:	e5a9      	b.n	426d86 <am_hal_pwrctrl_periph_disable+0x246>
                    i32CORELDODiff = 12;
  427232:	230c      	movs	r3, #12
  427234:	e74c      	b.n	4270d0 <am_hal_pwrctrl_periph_disable+0x590>
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  427236:	4d2b      	ldr	r5, [pc, #172]	@ (4272e4 <am_hal_pwrctrl_periph_disable+0x7a4>)
        am_hal_delay_us(5);
  427238:	2005      	movs	r0, #5
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  42723a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
  42723c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  427240:	662b      	str	r3, [r5, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.CORELDOOVER    = bEnable;
  427242:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
  427244:	f023 0301 	bic.w	r3, r3, #1
  427248:	662b      	str	r3, [r5, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOOVER     = bEnable;
  42724a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
  42724c:	f023 0320 	bic.w	r3, r3, #32
  427250:	662b      	str	r3, [r5, #96]	@ 0x60
        am_hal_delay_us(5);
  427252:	f000 fb0b 	bl	42786c <am_hal_delay_us>
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 0;
  427256:	f8d9 3100 	ldr.w	r3, [r9, #256]	@ 0x100
                MCUCTRL->SIMOBUCK14_b.VDDCLKGTRIM = g_orig_VDDCLKGTRIM;
  42725a:	f8df e098 	ldr.w	lr, [pc, #152]	@ 4272f4 <am_hal_pwrctrl_periph_disable+0x7b4>
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 0;
  42725e:	f023 0301 	bic.w	r3, r3, #1
  427262:	f8c9 3100 	str.w	r3, [r9, #256]	@ 0x100
                MCUCTRL->SIMOBUCK14_b.VDDCLKGTRIM = g_orig_VDDCLKGTRIM;
  427266:	f8d5 3374 	ldr.w	r3, [r5, #884]	@ 0x374
  42726a:	f8de e000 	ldr.w	lr, [lr]
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM;
  42726e:	f8df c088 	ldr.w	ip, [pc, #136]	@ 4272f8 <am_hal_pwrctrl_periph_disable+0x7b8>
                MCUCTRL->SIMOBUCK14_b.VDDCLKGTRIM = g_orig_VDDCLKGTRIM;
  427272:	f36e 735e 	bfi	r3, lr, #29, #2
  427276:	f8c5 3374 	str.w	r3, [r5, #884]	@ 0x374
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM;
  42727a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
  42727c:	f8dc c000 	ldr.w	ip, [ip]
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = g_orig_TVRGCVREFTRIM;
  427280:	491a      	ldr	r1, [pc, #104]	@ (4272ec <am_hal_pwrctrl_periph_disable+0x7ac>)
                MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM = g_orig_TVRGFVREFTRIM;
  427282:	f36c 0306 	bfi	r3, ip, #0, #7
  427286:	64eb      	str	r3, [r5, #76]	@ 0x4c
                MCUCTRL->D2ASPARE_b.D2ASPARE &= ~(0x1UL << 8);
  427288:	f8d5 31b0 	ldr.w	r3, [r5, #432]	@ 0x1b0
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = g_orig_CORELDOTEMPCOTRIM;
  42728c:	4a18      	ldr	r2, [pc, #96]	@ (4272f0 <am_hal_pwrctrl_periph_disable+0x7b0>)
                MCUCTRL->D2ASPARE_b.D2ASPARE &= ~(0x1UL << 8);
  42728e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
  427292:	f8c5 31b0 	str.w	r3, [r5, #432]	@ 0x1b0
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = g_orig_TVRGCVREFTRIM;
  427296:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
  427298:	6809      	ldr	r1, [r1, #0]
        am_hal_delay_us(5);
  42729a:	2005      	movs	r0, #5
                MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM = g_orig_TVRGCVREFTRIM;
  42729c:	f361 0306 	bfi	r3, r1, #0, #7
  4272a0:	646b      	str	r3, [r5, #68]	@ 0x44
                MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM = g_orig_CORELDOTEMPCOTRIM;
  4272a2:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
  4272a6:	6812      	ldr	r2, [r2, #0]
  4272a8:	f362 238d 	bfi	r3, r2, #10, #4
  4272ac:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
        PWRCTRL->VRCTRL_b.SIMOBUCKEN = 1;
  4272b0:	f8d9 3100 	ldr.w	r3, [r9, #256]	@ 0x100
  4272b4:	f043 0301 	orr.w	r3, r3, #1
  4272b8:	f8c9 3100 	str.w	r3, [r9, #256]	@ 0x100
        am_hal_delay_us(5);
  4272bc:	f000 fad6 	bl	42786c <am_hal_delay_us>
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  4272c0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
  4272c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
  4272c6:	662b      	str	r3, [r5, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.CORELDOOVER    = bEnable;
  4272c8:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
  4272ca:	f043 0301 	orr.w	r3, r3, #1
  4272ce:	662b      	str	r3, [r5, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOOVER     = bEnable;
  4272d0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
  4272d2:	f043 0320 	orr.w	r3, r3, #32
  4272d6:	662b      	str	r3, [r5, #96]	@ 0x60
} // buck_ldo_update_override()
  4272d8:	e555      	b.n	426d86 <am_hal_pwrctrl_periph_disable+0x246>
        if (ePeripheral == AM_HAL_PWRCTRL_PERIPH_GFX)
  4272da:	2c14      	cmp	r4, #20
  4272dc:	f47f ace9 	bne.w	426cb2 <am_hal_pwrctrl_periph_disable+0x172>
  4272e0:	e48d      	b.n	426bfe <am_hal_pwrctrl_periph_disable+0xbe>
  4272e2:	bf00      	nop
  4272e4:	40020000 	.word	0x40020000
  4272e8:	2004e498 	.word	0x2004e498
  4272ec:	2004e4cc 	.word	0x2004e4cc
  4272f0:	2004e4c0 	.word	0x2004e4c0
  4272f4:	2004e4c4 	.word	0x2004e4c4
  4272f8:	2004e4c8 	.word	0x2004e4c8

004272fc <am_hal_pwrctrl_low_power_init>:
    if (((SCB->CCR & SCB_CCR_IC_Msk) || (SCB->CCR & SCB_CCR_DC_Msk))
  4272fc:	4bc2      	ldr	r3, [pc, #776]	@ (427608 <am_hal_pwrctrl_low_power_init+0x30c>)
{
  4272fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (((SCB->CCR & SCB_CCR_IC_Msk) || (SCB->CCR & SCB_CCR_DC_Msk))
  427300:	695a      	ldr	r2, [r3, #20]
{
  427302:	b08d      	sub	sp, #52	@ 0x34
    if (((SCB->CCR & SCB_CCR_IC_Msk) || (SCB->CCR & SCB_CCR_DC_Msk))
  427304:	0391      	lsls	r1, r2, #14
    PWRMODCTL->CPDLPSTATE = ui32CpdlpConfig;
  427306:	f04f 0100 	mov.w	r1, #0
  42730a:	4ac0      	ldr	r2, [pc, #768]	@ (42760c <am_hal_pwrctrl_low_power_init+0x310>)
    if (((SCB->CCR & SCB_CCR_IC_Msk) || (SCB->CCR & SCB_CCR_DC_Msk))
  42730c:	bf58      	it	pl
  42730e:	695b      	ldrpl	r3, [r3, #20]
    MCUCTRL->WICCONTROL |= _VAL2FLD(MCUCTRL_WICCONTROL_DEEPISWIC, 1);
  427310:	4bbf      	ldr	r3, [pc, #764]	@ (427610 <am_hal_pwrctrl_low_power_init+0x314>)
    PWRMODCTL->CPDLPSTATE = ui32CpdlpConfig;
  427312:	6011      	str	r1, [r2, #0]
    MCUCTRL->WICCONTROL |= _VAL2FLD(MCUCTRL_WICCONTROL_DEEPISWIC, 1);
  427314:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
  427318:	f042 0201 	orr.w	r2, r2, #1
  42731c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    if (APOLLO5_GE_B1)
  427320:	68db      	ldr	r3, [r3, #12]
  427322:	b2db      	uxtb	r3, r3
  427324:	2b21      	cmp	r3, #33	@ 0x21
  427326:	d902      	bls.n	42732e <am_hal_pwrctrl_low_power_init+0x32>
        g_DefaultMcuMemCfg.eROMMode = AM_HAL_PWRCTRL_ROM_AUTO;
  427328:	2201      	movs	r2, #1
  42732a:	4bba      	ldr	r3, [pc, #744]	@ (427614 <am_hal_pwrctrl_low_power_init+0x318>)
  42732c:	701a      	strb	r2, [r3, #0]
    am_hal_pwrctrl_mcu_memory_config((am_hal_pwrctrl_mcu_memory_config_t *)&g_DefaultMcuMemCfg);
  42732e:	48b9      	ldr	r0, [pc, #740]	@ (427614 <am_hal_pwrctrl_low_power_init+0x318>)
  427330:	f7fe fea8 	bl	426084 <am_hal_pwrctrl_mcu_memory_config>
    am_hal_pwrctrl_sram_config((am_hal_pwrctrl_sram_memcfg_t *)&g_DefaultSRAMCfg);
  427334:	48b8      	ldr	r0, [pc, #736]	@ (427618 <am_hal_pwrctrl_low_power_init+0x31c>)
  427336:	f7fe ff41 	bl	4261bc <am_hal_pwrctrl_sram_config>
    if ( (MCUCTRL->SHADOWVALID_b.INFO1SELOTP != MCUCTRL_SHADOWVALID_INFO1SELOTP_VALID)  ||
  42733a:	4bb5      	ldr	r3, [pc, #724]	@ (427610 <am_hal_pwrctrl_low_power_init+0x314>)
  42733c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
  427340:	071a      	lsls	r2, r3, #28
  427342:	d50d      	bpl.n	427360 <am_hal_pwrctrl_low_power_init+0x64>
         (PWRCTRL->DEVPWRSTATUS_b.PWRSTOTP   != PWRCTRL_DEVPWRSTATUS_PWRSTOTP_ON) )
  427344:	4bb5      	ldr	r3, [pc, #724]	@ (42761c <am_hal_pwrctrl_low_power_init+0x320>)
  427346:	689b      	ldr	r3, [r3, #8]
    if ( (MCUCTRL->SHADOWVALID_b.INFO1SELOTP != MCUCTRL_SHADOWVALID_INFO1SELOTP_VALID)  ||
  427348:	011b      	lsls	r3, r3, #4
  42734a:	d509      	bpl.n	427360 <am_hal_pwrctrl_low_power_init+0x64>
    RD_INFO1(AM_HAL_INFO_INFOSPACE_MRAM_INFO1,    (AM_REG_INFO1_SBL_VERSION_0_O / 4), 2, &info1buf[0]);
  42734c:	466b      	mov	r3, sp
  42734e:	2202      	movs	r2, #2
  427350:	f44f 6190 	mov.w	r1, #1152	@ 0x480
  427354:	2005      	movs	r0, #5
  427356:	f001 fa13 	bl	428780 <am_hal_info1_read>
  42735a:	2800      	cmp	r0, #0
  42735c:	f000 80d6 	beq.w	42750c <am_hal_pwrctrl_low_power_init+0x210>
    CLKGEN->MISC |=
  427360:	f04f 2440 	mov.w	r4, #1073758208	@ 0x40004000
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_CRYPTO);
  427364:	2017      	movs	r0, #23
  427366:	f7ff fbeb 	bl	426b40 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_OTP);
  42736a:	201d      	movs	r0, #29
  42736c:	f7ff fbe8 	bl	426b40 <am_hal_pwrctrl_periph_disable>
    CLKGEN->CLKCTRL = 0x0; // Disable all unneccesary clocks including display controller clock
  427370:	2200      	movs	r2, #0
    CLKGEN->MISC |=
  427372:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  427374:	f443 0378 	orr.w	r3, r3, #16252928	@ 0xf80000
  427378:	6463      	str	r3, [r4, #68]	@ 0x44
    CLKGEN->CLKCTRL = 0x0; // Disable all unneccesary clocks including display controller clock
  42737a:	f8c4 2120 	str.w	r2, [r4, #288]	@ 0x120
    am_hal_cachectrl_icache_enable();
  42737e:	f001 f8cb 	bl	428518 <am_hal_cachectrl_icache_enable>
    am_hal_cachectrl_dcache_enable(true);
  427382:	2001      	movs	r0, #1
  427384:	f001 f8ea 	bl	42855c <am_hal_cachectrl_dcache_enable>
    MCUCTRL->AUDADCPWRDLY_b.AUDADCPWR1 = 4;
  427388:	2004      	movs	r0, #4
    CLKGEN->MISC_b.PWRONCLKENDISP = 1;
  42738a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
    MCUCTRL->AUDADCPWRDLY_b.AUDADCPWR1 = 4;
  42738c:	4ba0      	ldr	r3, [pc, #640]	@ (427610 <am_hal_pwrctrl_low_power_init+0x314>)
    CLKGEN->MISC_b.PWRONCLKENDISP = 1;
  42738e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
  427392:	6462      	str	r2, [r4, #68]	@ 0x44
    MCUCTRL->AUDADCPWRDLY_b.AUDADCPWR1 = 4;
  427394:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
    if ( g_bOrigTrimsStored == false )
  427398:	49a1      	ldr	r1, [pc, #644]	@ (427620 <am_hal_pwrctrl_low_power_init+0x324>)
    MCUCTRL->AUDADCPWRDLY_b.AUDADCPWR1 = 4;
  42739a:	f360 220f 	bfi	r2, r0, #8, #8
  42739e:	f8c3 2448 	str.w	r2, [r3, #1096]	@ 0x448
    if ( g_bOrigTrimsStored == false )
  4273a2:	780a      	ldrb	r2, [r1, #0]
  4273a4:	2a00      	cmp	r2, #0
  4273a6:	d15c      	bne.n	427462 <am_hal_pwrctrl_low_power_init+0x166>
        g_orig_ACTTRIMVDDF          = MCUCTRL->SIMOBUCK12_b.ACTTRIMVDDF;
  4273a8:	f8d3 236c 	ldr.w	r2, [r3, #876]	@ 0x36c
  4273ac:	489d      	ldr	r0, [pc, #628]	@ (427624 <am_hal_pwrctrl_low_power_init+0x328>)
  4273ae:	f3c2 5205 	ubfx	r2, r2, #20, #6
  4273b2:	6002      	str	r2, [r0, #0]
        g_orig_MEMLDOACTIVETRIM     = MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM;
  4273b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  4273b8:	489b      	ldr	r0, [pc, #620]	@ (427628 <am_hal_pwrctrl_low_power_init+0x32c>)
  4273ba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
  4273be:	6002      	str	r2, [r0, #0]
        g_orig_LPTRIMVDDF           = MCUCTRL->SIMOBUCK12_b.LPTRIMVDDF;
  4273c0:	f8d3 236c 	ldr.w	r2, [r3, #876]	@ 0x36c
  4273c4:	4899      	ldr	r0, [pc, #612]	@ (42762c <am_hal_pwrctrl_low_power_init+0x330>)
  4273c6:	0e92      	lsrs	r2, r2, #26
  4273c8:	6002      	str	r2, [r0, #0]
        g_orig_MEMLPLDOTRIM         = MCUCTRL->LDOREG2_b.MEMLPLDOTRIM;
  4273ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  4273ce:	4898      	ldr	r0, [pc, #608]	@ (427630 <am_hal_pwrctrl_low_power_init+0x334>)
  4273d0:	f3c2 4285 	ubfx	r2, r2, #18, #6
  4273d4:	6002      	str	r2, [r0, #0]
        g_orig_TVRGCVREFTRIM        = MCUCTRL->VREFGEN2_b.TVRGCVREFTRIM;
  4273d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  4273d8:	4896      	ldr	r0, [pc, #600]	@ (427634 <am_hal_pwrctrl_low_power_init+0x338>)
  4273da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
  4273de:	6002      	str	r2, [r0, #0]
        g_orig_TVRGFVREFTRIM        = MCUCTRL->VREFGEN4_b.TVRGFVREFTRIM;
  4273e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  4273e2:	4895      	ldr	r0, [pc, #596]	@ (427638 <am_hal_pwrctrl_low_power_init+0x33c>)
  4273e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
  4273e8:	6002      	str	r2, [r0, #0]
        g_orig_VDDCLKGTRIM          = MCUCTRL->SIMOBUCK14_b.VDDCLKGTRIM;
  4273ea:	f8d3 2374 	ldr.w	r2, [r3, #884]	@ 0x374
  4273ee:	4893      	ldr	r0, [pc, #588]	@ (42763c <am_hal_pwrctrl_low_power_init+0x340>)
  4273f0:	f3c2 7241 	ubfx	r2, r2, #29, #2
  4273f4:	6002      	str	r2, [r0, #0]
        g_orig_CORELDOTEMPCOTRIM    = MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM;
  4273f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  4273fa:	4c91      	ldr	r4, [pc, #580]	@ (427640 <am_hal_pwrctrl_low_power_init+0x344>)
  4273fc:	f3c2 2283 	ubfx	r2, r2, #10, #4
        g_bOrigTrimsStored          = true;
  427400:	2001      	movs	r0, #1
        g_orig_CORELDOTEMPCOTRIM    = MCUCTRL->LDOREG1_b.CORELDOTEMPCOTRIM;
  427402:	6022      	str	r2, [r4, #0]
        g_orig_CORELDOACTIVETRIM    = MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM;
  427404:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  427408:	4c8e      	ldr	r4, [pc, #568]	@ (427644 <am_hal_pwrctrl_low_power_init+0x348>)
  42740a:	f3c2 0209 	ubfx	r2, r2, #0, #10
  42740e:	6022      	str	r2, [r4, #0]
        g_orig_D2ASPARE             = MCUCTRL->D2ASPARE_b.D2ASPARE;
  427410:	f8d3 51b0 	ldr.w	r5, [r3, #432]	@ 0x1b0
  427414:	4a8c      	ldr	r2, [pc, #560]	@ (427648 <am_hal_pwrctrl_low_power_init+0x34c>)
        g_orig_VDDCACTLOWTONTRIM    = MCUCTRL->SIMOBUCK2_b.VDDCACTLOWTONTRIM;
  427416:	4c8d      	ldr	r4, [pc, #564]	@ (42764c <am_hal_pwrctrl_low_power_init+0x350>)
        g_orig_D2ASPARE             = MCUCTRL->D2ASPARE_b.D2ASPARE;
  427418:	6015      	str	r5, [r2, #0]
        g_orig_VDDCACTLOWTONTRIM    = MCUCTRL->SIMOBUCK2_b.VDDCACTLOWTONTRIM;
  42741a:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
  42741e:	f3c2 6244 	ubfx	r2, r2, #25, #5
  427422:	6022      	str	r2, [r4, #0]
        g_orig_VDDCACTHIGHTONTRIM   = MCUCTRL->SIMOBUCK2_b.VDDCACTHIGHTONTRIM;
  427424:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
  427428:	4c89      	ldr	r4, [pc, #548]	@ (427650 <am_hal_pwrctrl_low_power_init+0x354>)
  42742a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
  42742e:	6022      	str	r2, [r4, #0]
        g_orig_VDDCLVACTLOWTONTRIM  = MCUCTRL->SIMOBUCK4_b.VDDCLVACTLOWTONTRIM;
  427430:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
  427434:	4c87      	ldr	r4, [pc, #540]	@ (427654 <am_hal_pwrctrl_low_power_init+0x358>)
  427436:	f3c2 6244 	ubfx	r2, r2, #25, #5
  42743a:	6022      	str	r2, [r4, #0]
        g_orig_VDDCLVACTHIGHTONTRIM = MCUCTRL->SIMOBUCK4_b.VDDCLVACTHIGHTONTRIM;
  42743c:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
  427440:	4c85      	ldr	r4, [pc, #532]	@ (427658 <am_hal_pwrctrl_low_power_init+0x35c>)
  427442:	f3c2 22c4 	ubfx	r2, r2, #11, #5
  427446:	6022      	str	r2, [r4, #0]
        g_orig_VDDFACTLOWTONTRIM    = MCUCTRL->SIMOBUCK7_b.VDDFACTLOWTONTRIM;
  427448:	f8d3 2358 	ldr.w	r2, [r3, #856]	@ 0x358
  42744c:	4c83      	ldr	r4, [pc, #524]	@ (42765c <am_hal_pwrctrl_low_power_init+0x360>)
  42744e:	f3c2 2204 	ubfx	r2, r2, #8, #5
  427452:	6022      	str	r2, [r4, #0]
        g_orig_VDDFACTHIGHTONTRIM   = MCUCTRL->SIMOBUCK6_b.VDDFACTHIGHTONTRIM;
  427454:	f8d3 3354 	ldr.w	r3, [r3, #852]	@ 0x354
  427458:	4a81      	ldr	r2, [pc, #516]	@ (427660 <am_hal_pwrctrl_low_power_init+0x364>)
  42745a:	f3c3 4344 	ubfx	r3, r3, #17, #5
  42745e:	6013      	str	r3, [r2, #0]
        g_bOrigTrimsStored          = true;
  427460:	7008      	strb	r0, [r1, #0]
    MCUCTRL->PWRSW0_b.PWRSWVDDRCPUSTATSEL =0x1;
  427462:	4a6b      	ldr	r2, [pc, #428]	@ (427610 <am_hal_pwrctrl_low_power_init+0x314>)
    if ( g_ui32TrimVer == 0xFFFFFFFF )
  427464:	4c7f      	ldr	r4, [pc, #508]	@ (427664 <am_hal_pwrctrl_low_power_init+0x368>)
    MCUCTRL->PWRSW0_b.PWRSWVDDRCPUSTATSEL =0x1;
  427466:	f8d2 337c 	ldr.w	r3, [r2, #892]	@ 0x37c
  42746a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
  42746e:	f8c2 337c 	str.w	r3, [r2, #892]	@ 0x37c
    MCUCTRL->PWRSW1_b.PWRSWVDDRMSTATSEL =0x1;
  427472:	f8d2 3380 	ldr.w	r3, [r2, #896]	@ 0x380
  427476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
  42747a:	f8c2 3380 	str.w	r3, [r2, #896]	@ 0x380
    MCUCTRL->PWRSW1_b.PWRSWVDDRLSTATSEL =0x1;
  42747e:	f8d2 3380 	ldr.w	r3, [r2, #896]	@ 0x380
  427482:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
  427486:	f8c2 3380 	str.w	r3, [r2, #896]	@ 0x380
    if ( g_ui32TrimVer == 0xFFFFFFFF )
  42748a:	6823      	ldr	r3, [r4, #0]
  42748c:	3301      	adds	r3, #1
  42748e:	f000 80ab 	beq.w	4275e8 <am_hal_pwrctrl_low_power_init+0x2ec>
    AM_CRITICAL_BEGIN
  427492:	f001 f9d7 	bl	428844 <am_hal_interrupt_master_disable>
    if (g_ui32TrimVer <= 1)
  427496:	6823      	ldr	r3, [r4, #0]
    AM_CRITICAL_BEGIN
  427498:	9000      	str	r0, [sp, #0]
    if (g_ui32TrimVer <= 1)
  42749a:	2b01      	cmp	r3, #1
  42749c:	f240 809c 	bls.w	4275d8 <am_hal_pwrctrl_low_power_init+0x2dc>
    AM_CRITICAL_END
  4274a0:	9800      	ldr	r0, [sp, #0]
  4274a2:	f001 f9d3 	bl	42884c <am_hal_interrupt_master_set>
    if (g_ui32TrimVer >= 2)
  4274a6:	6823      	ldr	r3, [r4, #0]
  4274a8:	2b01      	cmp	r3, #1
  4274aa:	d92a      	bls.n	427502 <am_hal_pwrctrl_low_power_init+0x206>
        PWRCTRL->LPOVRHYSTCNT_b.LPOVRHYSTCNT = 0;
  4274ac:	2200      	movs	r2, #0
        PWRCTRL->LPOVRTHRESHVDDS_b.LPOVRTHRESHVDDS = 800;
  4274ae:	f44f 7648 	mov.w	r6, #800	@ 0x320
        PWRCTRL->LPOVRTHRESHVDDF_b.LPOVRTHRESHVDDF = 450;
  4274b2:	f44f 75e1 	mov.w	r5, #450	@ 0x1c2
        PWRCTRL->LPOVRTHRESHVDDC_b.LPOVRTHRESHVDDC = 600;
  4274b6:	f44f 7416 	mov.w	r4, #600	@ 0x258
        PWRCTRL->LPOVRTHRESHVDDCLV_b.LPOVRTHRESHVDDCLV = 250;
  4274ba:	20fa      	movs	r0, #250	@ 0xfa
        PWRCTRL->TONCNTRCTRL_b.CLKDIV = 0;
  4274bc:	4b57      	ldr	r3, [pc, #348]	@ (42761c <am_hal_pwrctrl_low_power_init+0x320>)
  4274be:	f8d3 11a0 	ldr.w	r1, [r3, #416]	@ 0x1a0
  4274c2:	f421 51f8 	bic.w	r1, r1, #7936	@ 0x1f00
  4274c6:	f8c3 11a0 	str.w	r1, [r3, #416]	@ 0x1a0
        PWRCTRL->TONCNTRCTRL_b.FCNT = 1000;
  4274ca:	f8d3 11a0 	ldr.w	r1, [r3, #416]	@ 0x1a0
  4274ce:	f2c0 31e8 	movt	r1, #1000	@ 0x3e8
  4274d2:	f8c3 11a0 	str.w	r1, [r3, #416]	@ 0x1a0
        PWRCTRL->LPOVRHYSTCNT_b.LPOVRHYSTCNT = 0;
  4274d6:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
        PWRCTRL->LPOVRTHRESHVDDS_b.LPOVRTHRESHVDDS = 800;
  4274da:	f8c3 61a4 	str.w	r6, [r3, #420]	@ 0x1a4
        PWRCTRL->LPOVRTHRESHVDDF_b.LPOVRTHRESHVDDF = 450;
  4274de:	f8c3 51ac 	str.w	r5, [r3, #428]	@ 0x1ac
        PWRCTRL->LPOVRTHRESHVDDC_b.LPOVRTHRESHVDDC = 600;
  4274e2:	f8c3 41b4 	str.w	r4, [r3, #436]	@ 0x1b4
        PWRCTRL->LPOVRTHRESHVDDCLV_b.LPOVRTHRESHVDDCLV = 250;
  4274e6:	f8c3 01bc 	str.w	r0, [r3, #444]	@ 0x1bc
        PWRCTRL->TONCNTRCTRL_b.LPMODESWOVR = 0;
  4274ea:	f8d3 11a0 	ldr.w	r1, [r3, #416]	@ 0x1a0
  4274ee:	f362 0141 	bfi	r1, r2, #1, #1
  4274f2:	f8c3 11a0 	str.w	r1, [r3, #416]	@ 0x1a0
        PWRCTRL->TONCNTRCTRL_b.ENABLELPOVR = 0;
  4274f6:	f8d3 11a0 	ldr.w	r1, [r3, #416]	@ 0x1a0
  4274fa:	f362 0100 	bfi	r1, r2, #0, #1
  4274fe:	f8c3 11a0 	str.w	r1, [r3, #416]	@ 0x1a0
    am_hal_sysctrl_clkmuxrst_low_power_init();
  427502:	f001 fb79 	bl	428bf8 <am_hal_sysctrl_clkmuxrst_low_power_init>
} // am_hal_pwrctrl_low_power_init()
  427506:	2000      	movs	r0, #0
  427508:	b00d      	add	sp, #52	@ 0x34
  42750a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_MAINPTR_O / 4), 1, &info1buf[0]);
  42750c:	2201      	movs	r2, #1
    g_sINFO1regs.ui32SBLVer0                = info1buf[0];
  42750e:	e9dd 0100 	ldrd	r0, r1, [sp]
  427512:	4c55      	ldr	r4, [pc, #340]	@ (427668 <am_hal_pwrctrl_low_power_init+0x36c>)
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_MAINPTR_O / 4), 1, &info1buf[0]);
  427514:	466b      	mov	r3, sp
    g_sINFO1regs.ui32SBLVer0                = info1buf[0];
  427516:	e9c4 0101 	strd	r0, r1, [r4, #4]
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_MAINPTR_O / 4), 1, &info1buf[0]);
  42751a:	f44f 7101 	mov.w	r1, #516	@ 0x204
  42751e:	4610      	mov	r0, r2
  427520:	f001 f92e 	bl	428780 <am_hal_info1_read>
  427524:	2800      	cmp	r0, #0
  427526:	f47f af1b 	bne.w	427360 <am_hal_pwrctrl_low_power_init+0x64>
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_SBLOTA_O / 4), 1, &info1buf[0]);
  42752a:	2201      	movs	r2, #1
    g_sINFO1regs.ui32MAINPTR                = info1buf[0];
  42752c:	9800      	ldr	r0, [sp, #0]
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_SBLOTA_O / 4), 1, &info1buf[0]);
  42752e:	466b      	mov	r3, sp
    g_sINFO1regs.ui32MAINPTR                = info1buf[0];
  427530:	60e0      	str	r0, [r4, #12]
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_SBLOTA_O / 4), 1, &info1buf[0]);
  427532:	f240 2106 	movw	r1, #518	@ 0x206
  427536:	4610      	mov	r0, r2
  427538:	f001 f922 	bl	428780 <am_hal_info1_read>
  42753c:	2800      	cmp	r0, #0
  42753e:	f47f af0f 	bne.w	427360 <am_hal_pwrctrl_low_power_init+0x64>
    g_sINFO1regs.ui32SBLOTA                 = info1buf[0];
  427542:	9800      	ldr	r0, [sp, #0]
    RD_INFO1(AM_HAL_INFO_INFOSPACE_OTP_INFO1,     (AM_REG_OTP_INFO1_SOCID0_O / 4), 8, &info1buf[0]);
  427544:	466b      	mov	r3, sp
    g_sINFO1regs.ui32SBLOTA                 = info1buf[0];
  427546:	6120      	str	r0, [r4, #16]
    RD_INFO1(AM_HAL_INFO_INFOSPACE_OTP_INFO1,     (AM_REG_OTP_INFO1_SOCID0_O / 4), 8, &info1buf[0]);
  427548:	2208      	movs	r2, #8
  42754a:	f44f 7102 	mov.w	r1, #520	@ 0x208
  42754e:	2003      	movs	r0, #3
  427550:	f001 f916 	bl	428780 <am_hal_info1_read>
  427554:	2800      	cmp	r0, #0
  427556:	f47f af03 	bne.w	427360 <am_hal_pwrctrl_low_power_init+0x64>
    g_sINFO1regs.ui32SOCID0                 = info1buf[0];
  42755a:	ed9d 5f04 	ldc	15, cr5, [sp, #16]
  42755e:	ed9d 7f00 	ldc	15, cr7, [sp]
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_TEMP_CAL_ATE_O  / 4), 3, &info1buf[0]);
  427562:	466b      	mov	r3, sp
  427564:	2203      	movs	r2, #3
  427566:	f44f 7110 	mov.w	r1, #576	@ 0x240
  42756a:	2001      	movs	r0, #1
    g_sINFO1regs.ui32SOCID0                 = info1buf[0];
  42756c:	ed84 5f09 	stc	15, cr5, [r4, #36]	@ 0x24
  427570:	ed84 7f05 	stc	15, cr7, [r4, #20]
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_TEMP_CAL_ATE_O  / 4), 3, &info1buf[0]);
  427574:	f001 f904 	bl	428780 <am_hal_info1_read>
  427578:	2800      	cmp	r0, #0
  42757a:	f47f aef1 	bne.w	427360 <am_hal_pwrctrl_low_power_init+0x64>
    g_sINFO1regs.ui32TEMP_CAL_ATE           = info1buf[0];
  42757e:	e9dd 2300 	ldrd	r2, r3, [sp]
    g_sINFO1regs.ui32TEMP_CAL_ADC_OFFSET    = info1buf[2];
  427582:	9902      	ldr	r1, [sp, #8]
    g_sINFO1regs.ui32TEMP_CAL_ATE           = info1buf[0];
  427584:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
    g_sINFO1regs.ui32TEMP_CAL_ADC_OFFSET    = info1buf[2];
  427588:	63e1      	str	r1, [r4, #60]	@ 0x3c
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_ADC_GAIN_ERR_O  / 4), 2, &info1buf[0]);
  42758a:	466b      	mov	r3, sp
  42758c:	2202      	movs	r2, #2
  42758e:	f240 214a 	movw	r1, #586	@ 0x24a
  427592:	2001      	movs	r0, #1
  427594:	f001 f8f4 	bl	428780 <am_hal_info1_read>
  427598:	2800      	cmp	r0, #0
  42759a:	f47f aee1 	bne.w	427360 <am_hal_pwrctrl_low_power_init+0x64>
    g_sINFO1regs.ui32ADC_GAIN_ERR           = info1buf[0];
  42759e:	e9dd 6700 	ldrd	r6, r7, [sp]
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_AUDADC_A0_LG_OFFSET_O  / 4), 12, &info1buf[0]);
  4275a2:	466b      	mov	r3, sp
  4275a4:	220c      	movs	r2, #12
  4275a6:	f44f 7114 	mov.w	r1, #592	@ 0x250
  4275aa:	2001      	movs	r0, #1
    g_sINFO1regs.ui32ADC_GAIN_ERR           = info1buf[0];
  4275ac:	e9c4 6710 	strd	r6, r7, [r4, #64]	@ 0x40
    RD_INFO1(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1, (AM_REG_OTP_INFO1_AUDADC_A0_LG_OFFSET_O  / 4), 12, &info1buf[0]);
  4275b0:	f001 f8e6 	bl	428780 <am_hal_info1_read>
  4275b4:	2800      	cmp	r0, #0
  4275b6:	f47f aed3 	bne.w	427360 <am_hal_pwrctrl_low_power_init+0x64>
    g_sINFO1regs.ui32AUDADC_A0_LG_OFFSET    = info1buf[0];
  4275ba:	ed9d 7f00 	ldc	15, cr7, [sp]
  4275be:	ed84 7f12 	stc	15, cr7, [r4, #72]	@ 0x48
  4275c2:	ed9d 7f04 	ldc	15, cr7, [sp, #16]
  4275c6:	ed84 7f16 	stc	15, cr7, [r4, #88]	@ 0x58
  4275ca:	ed9d 7f08 	ldc	15, cr7, [sp, #32]
    g_sINFO1regs.ui32INFO1GlobalValid = INFO1GLOBALVALID;
  4275ce:	4b27      	ldr	r3, [pc, #156]	@ (42766c <am_hal_pwrctrl_low_power_init+0x370>)
    g_sINFO1regs.ui32AUDADC_A0_LG_OFFSET    = info1buf[0];
  4275d0:	ed84 7f1a 	stc	15, cr7, [r4, #104]	@ 0x68
    g_sINFO1regs.ui32INFO1GlobalValid = INFO1GLOBALVALID;
  4275d4:	6023      	str	r3, [r4, #0]
    return ui32Status;
  4275d6:	e6c3      	b.n	427360 <am_hal_pwrctrl_low_power_init+0x64>
        am_hal_sysctrl_ton_config_init();
  4275d8:	f001 fa16 	bl	428a08 <am_hal_sysctrl_ton_config_init>
        am_hal_sysctrl_ton_config_update(false, g_eCurGpuPwrMode);
  4275dc:	4b24      	ldr	r3, [pc, #144]	@ (427670 <am_hal_pwrctrl_low_power_init+0x374>)
  4275de:	2000      	movs	r0, #0
  4275e0:	7819      	ldrb	r1, [r3, #0]
  4275e2:	f001 fa61 	bl	428aa8 <am_hal_sysctrl_ton_config_update>
  4275e6:	e75b      	b.n	4274a0 <am_hal_pwrctrl_low_power_init+0x1a4>
        ui32Ret = am_hal_info1_read(AM_HAL_INFO_INFOSPACE_CURRENT_INFO1,
  4275e8:	2201      	movs	r2, #1
  4275ea:	4623      	mov	r3, r4
  4275ec:	f44f 7111 	mov.w	r1, #580	@ 0x244
  4275f0:	4610      	mov	r0, r2
  4275f2:	f001 f8c5 	bl	428780 <am_hal_info1_read>
        if ( (g_ui32TrimVer == 0x00000000)  ||
  4275f6:	6823      	ldr	r3, [r4, #0]
  4275f8:	b913      	cbnz	r3, 427600 <am_hal_pwrctrl_low_power_init+0x304>
            g_ui32TrimVer = 0;
  4275fa:	2300      	movs	r3, #0
  4275fc:	6023      	str	r3, [r4, #0]
  4275fe:	e748      	b.n	427492 <am_hal_pwrctrl_low_power_init+0x196>
        if ( (g_ui32TrimVer == 0x00000000)  ||
  427600:	2800      	cmp	r0, #0
  427602:	f43f af46 	beq.w	427492 <am_hal_pwrctrl_low_power_init+0x196>
  427606:	e7f8      	b.n	4275fa <am_hal_pwrctrl_low_power_init+0x2fe>
  427608:	e000ed00 	.word	0xe000ed00
  42760c:	e001e300 	.word	0xe001e300
  427610:	40020000 	.word	0x40020000
  427614:	2000aa1c 	.word	0x2000aa1c
  427618:	0043c7a4 	.word	0x0043c7a4
  42761c:	40021000 	.word	0x40021000
  427620:	2004e4e0 	.word	0x2004e4e0
  427624:	2004e4dc 	.word	0x2004e4dc
  427628:	2004e4d8 	.word	0x2004e4d8
  42762c:	2004e4d4 	.word	0x2004e4d4
  427630:	2004e4d0 	.word	0x2004e4d0
  427634:	2004e4cc 	.word	0x2004e4cc
  427638:	2004e4c8 	.word	0x2004e4c8
  42763c:	2004e4c4 	.word	0x2004e4c4
  427640:	2004e4c0 	.word	0x2004e4c0
  427644:	2004e4bc 	.word	0x2004e4bc
  427648:	2004e4b8 	.word	0x2004e4b8
  42764c:	2004e4b4 	.word	0x2004e4b4
  427650:	2004e4b0 	.word	0x2004e4b0
  427654:	2004e4ac 	.word	0x2004e4ac
  427658:	2004e4a8 	.word	0x2004e4a8
  42765c:	2004e4a4 	.word	0x2004e4a4
  427660:	2004e4a0 	.word	0x2004e4a0
  427664:	2000aa24 	.word	0x2000aa24
  427668:	2004e418 	.word	0x2004e418
  42766c:	1f01600d 	.word	0x1f01600d
  427670:	2004e4e3 	.word	0x2004e4e3

00427674 <buck_ldo_update_override>:
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = bEnable;
  427674:	4b06      	ldr	r3, [pc, #24]	@ (427690 <buck_ldo_update_override+0x1c>)
  427676:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  427678:	f360 4210 	bfi	r2, r0, #16, #1
  42767c:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.CORELDOOVER    = bEnable;
  42767e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  427680:	f360 0200 	bfi	r2, r0, #0, #1
  427684:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOOVER     = bEnable;
  427686:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  427688:	f360 1245 	bfi	r2, r0, #5, #1
  42768c:	661a      	str	r2, [r3, #96]	@ 0x60
} // buck_ldo_update_override()
  42768e:	4770      	bx	lr
  427690:	40020000 	.word	0x40020000

00427694 <am_hal_pwrctrl_control>:
    switch ( eControl )
  427694:	2803      	cmp	r0, #3
  427696:	f200 80a8 	bhi.w	4277ea <am_hal_pwrctrl_control+0x156>
  42769a:	e8df f000 	tbb	[pc, r0]
  42769e:	1427      	.short	0x1427
  4276a0:	0207      	.short	0x0207
            PWRCTRL->DEVPWREN =
  4276a2:	2200      	movs	r2, #0
  4276a4:	4b52      	ldr	r3, [pc, #328]	@ (4277f0 <am_hal_pwrctrl_control+0x15c>)
  4276a6:	605a      	str	r2, [r3, #4]
    uint32_t ui32ReturnStatus = AM_HAL_STATUS_SUCCESS;
  4276a8:	2000      	movs	r0, #0
  4276aa:	4770      	bx	lr
            MCUCTRL->XTALGENCTRL_b.XTALBIASTRIM   = 0x20;
  4276ac:	2020      	movs	r0, #32
            MCUCTRL->XTALCTRL =
  4276ae:	2101      	movs	r1, #1
            MCUCTRL->XTALGENCTRL_b.XTALBIASTRIM   = 0x20;
  4276b0:	4b50      	ldr	r3, [pc, #320]	@ (4277f4 <am_hal_pwrctrl_control+0x160>)
  4276b2:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
  4276b6:	f360 0287 	bfi	r2, r0, #2, #6
  4276ba:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    uint32_t ui32ReturnStatus = AM_HAL_STATUS_SUCCESS;
  4276be:	2000      	movs	r0, #0
            MCUCTRL->XTALCTRL =
  4276c0:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
            break;
  4276c4:	4770      	bx	lr
    *bEnabled = ((AM_REGVAL(pwr_ctrl.ui32PwrStatReqAddr) &
  4276c6:	4b4a      	ldr	r3, [pc, #296]	@ (4277f0 <am_hal_pwrctrl_control+0x15c>)
  4276c8:	689b      	ldr	r3, [r3, #8]
                if ( bEnabled )
  4276ca:	029b      	lsls	r3, r3, #10
  4276cc:	d5ec      	bpl.n	4276a8 <am_hal_pwrctrl_control+0x14>
    ui32Status = am_hal_delay_us_status_change(CRYPTO_WAIT_USEC,
  4276ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
  4276d2:	b510      	push	{r4, lr}
    ui32Status = am_hal_delay_us_status_change(CRYPTO_WAIT_USEC,
  4276d4:	2064      	movs	r0, #100	@ 0x64
  4276d6:	461a      	mov	r2, r3
  4276d8:	4947      	ldr	r1, [pc, #284]	@ (4277f8 <am_hal_pwrctrl_control+0x164>)
  4276da:	f000 f8f1 	bl	4278c0 <am_hal_delay_us_status_change>
    if (AM_HAL_STATUS_SUCCESS != ui32Status)
  4276de:	2800      	cmp	r0, #0
  4276e0:	d169      	bne.n	4277b6 <am_hal_pwrctrl_control+0x122>
} // am_hal_pwrctrl_control()
  4276e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                    ui32Status = am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_CRYPTO);
  4276e6:	2017      	movs	r0, #23
  4276e8:	f7ff ba2a 	b.w	426b40 <am_hal_pwrctrl_periph_disable>
    MCUCTRL->VRCTRL_b.SIMOBUCKPDNB   = 1;
  4276ec:	4b41      	ldr	r3, [pc, #260]	@ (4277f4 <am_hal_pwrctrl_control+0x160>)
                if ((g_ui32TrimVer >= 1) && g_bOrigTrimsStored)
  4276ee:	4943      	ldr	r1, [pc, #268]	@ (4277fc <am_hal_pwrctrl_control+0x168>)
    MCUCTRL->VRCTRL_b.SIMOBUCKPDNB   = 1;
  4276f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  4276f2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
  4276f6:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.SIMOBUCKRSTB   = 1;
  4276f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  4276fa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
  4276fe:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.SIMOBUCKACTIVE = 1;
  427700:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  427702:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
  427706:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.SIMOBUCKOVER   = 1;
  427708:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  42770a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
  42770e:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.CORELDOCOLDSTARTEN  = 0;
  427710:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  427712:	f022 0210 	bic.w	r2, r2, #16
  427716:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL |=
  427718:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  42771a:	f042 020e 	orr.w	r2, r2, #14
  42771e:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.CORELDOOVER         = 1;
  427720:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  427722:	f042 0201 	orr.w	r2, r2, #1
  427726:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOCOLDSTARTEN   = 0;
  427728:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  42772a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  42772e:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL |=
  427730:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  427732:	f442 72e0 	orr.w	r2, r2, #448	@ 0x1c0
  427736:	661a      	str	r2, [r3, #96]	@ 0x60
    MCUCTRL->VRCTRL_b.MEMLDOOVER          = 1;
  427738:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
  42773a:	f042 0220 	orr.w	r2, r2, #32
  42773e:	661a      	str	r2, [r3, #96]	@ 0x60
                MCUCTRL->SIMOBUCK15_b.TRIMLATCHOVER = 1;
  427740:	f8d3 2378 	ldr.w	r2, [r3, #888]	@ 0x378
  427744:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
  427748:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
                MCUCTRL->SIMOBUCK0 |=
  42774c:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
  427750:	f042 020f 	orr.w	r2, r2, #15
  427754:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
                if ((g_ui32TrimVer >= 1) && g_bOrigTrimsStored)
  427758:	680a      	ldr	r2, [r1, #0]
  42775a:	b322      	cbz	r2, 4277a6 <am_hal_pwrctrl_control+0x112>
  42775c:	4a28      	ldr	r2, [pc, #160]	@ (427800 <am_hal_pwrctrl_control+0x16c>)
  42775e:	7812      	ldrb	r2, [r2, #0]
  427760:	b30a      	cbz	r2, 4277a6 <am_hal_pwrctrl_control+0x112>
                    MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM = g_orig_CORELDOACTIVETRIM  < 6 ? 0 : g_orig_CORELDOACTIVETRIM - 6;
  427762:	4a28      	ldr	r2, [pc, #160]	@ (427804 <am_hal_pwrctrl_control+0x170>)
  427764:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
  427768:	6812      	ldr	r2, [r2, #0]
                    PWRCTRL->VRCTRL_b.SIMOBUCKEN = 1;
  42776a:	4921      	ldr	r1, [pc, #132]	@ (4277f0 <am_hal_pwrctrl_control+0x15c>)
                    MCUCTRL->LDOREG1_b.CORELDOACTIVETRIM = g_orig_CORELDOACTIVETRIM  < 6 ? 0 : g_orig_CORELDOACTIVETRIM - 6;
  42776c:	2a06      	cmp	r2, #6
  42776e:	bf38      	it	cc
  427770:	2206      	movcc	r2, #6
  427772:	3a06      	subs	r2, #6
  427774:	f362 0009 	bfi	r0, r2, #0, #10
  427778:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
                    PWRCTRL->VRCTRL_b.SIMOBUCKEN = 1;
  42777c:	f8d1 2100 	ldr.w	r2, [r1, #256]	@ 0x100
  427780:	f042 0201 	orr.w	r2, r2, #1
  427784:	f8c1 2100 	str.w	r2, [r1, #256]	@ 0x100
                    MCUCTRL->LDOREG2_b.MEMLDOACTIVETRIM = 0;
  427788:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  42778c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
  427790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                    MCUCTRL->D2ASPARE = (MCUCTRL->D2ASPARE & ~(0x3UL << 15)) | (0x1UL << 15);
  427794:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
  427798:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
  42779c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
  4277a0:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
  4277a4:	e780      	b.n	4276a8 <am_hal_pwrctrl_control+0x14>
                    PWRCTRL->VRCTRL_b.SIMOBUCKEN = 1;
  4277a6:	4a12      	ldr	r2, [pc, #72]	@ (4277f0 <am_hal_pwrctrl_control+0x15c>)
  4277a8:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
  4277ac:	f043 0301 	orr.w	r3, r3, #1
  4277b0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  4277b4:	e778      	b.n	4276a8 <am_hal_pwrctrl_control+0x14>
        ui32Status = am_hal_delay_us_status_change(CRYPTO_WAIT_USEC,
  4277b6:	2301      	movs	r3, #1
  4277b8:	2064      	movs	r0, #100	@ 0x64
  4277ba:	461a      	mov	r2, r3
  4277bc:	4912      	ldr	r1, [pc, #72]	@ (427808 <am_hal_pwrctrl_control+0x174>)
  4277be:	f000 f87f 	bl	4278c0 <am_hal_delay_us_status_change>
        if (AM_HAL_STATUS_SUCCESS == ui32Status)
  4277c2:	b100      	cbz	r0, 4277c6 <am_hal_pwrctrl_control+0x132>
} // am_hal_pwrctrl_control()
  4277c4:	bd10      	pop	{r4, pc}
            ui32Status = am_hal_delay_us_status_change(CRYPTO_WAIT_USEC,
  4277c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
            CRYPTO->HOSTPOWERDOWN_b.HOSTPOWERDOWN = 1;
  4277ca:	4c10      	ldr	r4, [pc, #64]	@ (42780c <am_hal_pwrctrl_control+0x178>)
            ui32Status = am_hal_delay_us_status_change(CRYPTO_WAIT_USEC,
  4277cc:	2064      	movs	r0, #100	@ 0x64
            CRYPTO->HOSTPOWERDOWN_b.HOSTPOWERDOWN = 1;
  4277ce:	f8d4 2a80 	ldr.w	r2, [r4, #2688]	@ 0xa80
            ui32Status = am_hal_delay_us_status_change(CRYPTO_WAIT_USEC,
  4277d2:	4909      	ldr	r1, [pc, #36]	@ (4277f8 <am_hal_pwrctrl_control+0x164>)
            CRYPTO->HOSTPOWERDOWN_b.HOSTPOWERDOWN = 1;
  4277d4:	f042 0201 	orr.w	r2, r2, #1
  4277d8:	f8c4 2a80 	str.w	r2, [r4, #2688]	@ 0xa80
            ui32Status = am_hal_delay_us_status_change(CRYPTO_WAIT_USEC,
  4277dc:	461a      	mov	r2, r3
  4277de:	f000 f86f 	bl	4278c0 <am_hal_delay_us_status_change>
                    if (AM_HAL_STATUS_SUCCESS != ui32Status)
  4277e2:	2800      	cmp	r0, #0
  4277e4:	f43f af7d 	beq.w	4276e2 <am_hal_pwrctrl_control+0x4e>
} // am_hal_pwrctrl_control()
  4277e8:	bd10      	pop	{r4, pc}
    switch ( eControl )
  4277ea:	2006      	movs	r0, #6
} // am_hal_pwrctrl_control()
  4277ec:	4770      	bx	lr
  4277ee:	bf00      	nop
  4277f0:	40021000 	.word	0x40021000
  4277f4:	40020000 	.word	0x40020000
  4277f8:	40020180 	.word	0x40020180
  4277fc:	2000aa24 	.word	0x2000aa24
  427800:	2004e4e0 	.word	0x2004e4e0
  427804:	2004e4bc 	.word	0x2004e4bc
  427808:	400c0a7c 	.word	0x400c0a7c
  42780c:	400c0000 	.word	0x400c0000

00427810 <am_hal_pwrctrl_pwrmodctl_cpdlp_config>:
    if (((SCB->CCR & SCB_CCR_IC_Msk) || (SCB->CCR & SCB_CCR_DC_Msk))
  427810:	4b0d      	ldr	r3, [pc, #52]	@ (427848 <am_hal_pwrctrl_pwrmodctl_cpdlp_config+0x38>)
{
  427812:	b082      	sub	sp, #8
    if (((SCB->CCR & SCB_CCR_IC_Msk) || (SCB->CCR & SCB_CCR_DC_Msk))
  427814:	695a      	ldr	r2, [r3, #20]
{
  427816:	9001      	str	r0, [sp, #4]
    if (((SCB->CCR & SCB_CCR_IC_Msk) || (SCB->CCR & SCB_CCR_DC_Msk))
  427818:	0392      	lsls	r2, r2, #14
  42781a:	b2c0      	uxtb	r0, r0
  42781c:	d40f      	bmi.n	42783e <am_hal_pwrctrl_pwrmodctl_cpdlp_config+0x2e>
  42781e:	695b      	ldr	r3, [r3, #20]
  427820:	03db      	lsls	r3, r3, #15
  427822:	d40c      	bmi.n	42783e <am_hal_pwrctrl_pwrmodctl_cpdlp_config+0x2e>
    ui32CpdlpConfig |= (sCpdlpConfig.eElpConfig << PWRMODCTL_CPDLPSTATE_ELPSTATE_Pos);
  427824:	f89d 1005 	ldrb.w	r1, [sp, #5]
    ui32CpdlpConfig |= (sCpdlpConfig.eClpConfig << PWRMODCTL_CPDLPSTATE_CLPSTATE_Pos);
  427828:	f89d 3006 	ldrb.w	r3, [sp, #6]
    ui32CpdlpConfig |= (sCpdlpConfig.eRlpConfig << PWRMODCTL_CPDLPSTATE_RLPSTATE_Pos);
  42782c:	0200      	lsls	r0, r0, #8
    ui32CpdlpConfig |= (sCpdlpConfig.eElpConfig << PWRMODCTL_CPDLPSTATE_ELPSTATE_Pos);
  42782e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
    ui32CpdlpConfig |= (sCpdlpConfig.eClpConfig << PWRMODCTL_CPDLPSTATE_CLPSTATE_Pos);
  427832:	4303      	orrs	r3, r0
    return AM_HAL_STATUS_SUCCESS;
  427834:	2000      	movs	r0, #0
    PWRMODCTL->CPDLPSTATE = ui32CpdlpConfig;
  427836:	4a05      	ldr	r2, [pc, #20]	@ (42784c <am_hal_pwrctrl_pwrmodctl_cpdlp_config+0x3c>)
  427838:	6013      	str	r3, [r2, #0]
} // am_hal_pwrctrl_pwrmodctl_cpdlp_config()
  42783a:	b002      	add	sp, #8
  42783c:	4770      	bx	lr
        && (sCpdlpConfig.eRlpConfig == AM_HAL_PWRCTRL_RLP_OFF))
  42783e:	2803      	cmp	r0, #3
  427840:	d1f0      	bne.n	427824 <am_hal_pwrctrl_pwrmodctl_cpdlp_config+0x14>
        return AM_HAL_STATUS_FAIL;
  427842:	2001      	movs	r0, #1
} // am_hal_pwrctrl_pwrmodctl_cpdlp_config()
  427844:	b002      	add	sp, #8
  427846:	4770      	bx	lr
  427848:	e000ed00 	.word	0xe000ed00
  42784c:	e001e300 	.word	0xe001e300

00427850 <am_hal_pwrctrl_pwrmodctl_cpdlp_get>:
    ui32CpdlpConfig = PWRMODCTL->CPDLPSTATE;
  427850:	4b05      	ldr	r3, [pc, #20]	@ (427868 <am_hal_pwrctrl_pwrmodctl_cpdlp_get+0x18>)
  427852:	681b      	ldr	r3, [r3, #0]
    psCpdlpConfig->eRlpConfig = (am_hal_pwrctrl_pwrmodctl_rlp_e) ((ui32CpdlpConfig & PWRMODCTL_CPDLPSTATE_RLPSTATE_Msk) >> PWRMODCTL_CPDLPSTATE_RLPSTATE_Pos);
  427854:	f3c3 2101 	ubfx	r1, r3, #8, #2
    psCpdlpConfig->eElpConfig = (am_hal_pwrctrl_pwrmodctl_elp_e) ((ui32CpdlpConfig & PWRMODCTL_CPDLPSTATE_ELPSTATE_Msk) >> PWRMODCTL_CPDLPSTATE_ELPSTATE_Pos);
  427858:	f3c3 1201 	ubfx	r2, r3, #4, #2
    psCpdlpConfig->eClpConfig = (am_hal_pwrctrl_pwrmodctl_clp_e) ((ui32CpdlpConfig & PWRMODCTL_CPDLPSTATE_CLPSTATE_Msk) >> PWRMODCTL_CPDLPSTATE_CLPSTATE_Pos);
  42785c:	f003 0303 	and.w	r3, r3, #3
    psCpdlpConfig->eRlpConfig = (am_hal_pwrctrl_pwrmodctl_rlp_e) ((ui32CpdlpConfig & PWRMODCTL_CPDLPSTATE_RLPSTATE_Msk) >> PWRMODCTL_CPDLPSTATE_RLPSTATE_Pos);
  427860:	7001      	strb	r1, [r0, #0]
    psCpdlpConfig->eElpConfig = (am_hal_pwrctrl_pwrmodctl_elp_e) ((ui32CpdlpConfig & PWRMODCTL_CPDLPSTATE_ELPSTATE_Msk) >> PWRMODCTL_CPDLPSTATE_ELPSTATE_Pos);
  427862:	7042      	strb	r2, [r0, #1]
    psCpdlpConfig->eClpConfig = (am_hal_pwrctrl_pwrmodctl_clp_e) ((ui32CpdlpConfig & PWRMODCTL_CPDLPSTATE_CLPSTATE_Msk) >> PWRMODCTL_CPDLPSTATE_CLPSTATE_Pos);
  427864:	7083      	strb	r3, [r0, #2]
} // am_hal_pwrctrl_pwrmodctl_cpdlp_get()
  427866:	4770      	bx	lr
  427868:	e001e300 	.word	0xe001e300

0042786c <am_hal_delay_us>:
// Use the bootrom to implement a spin loop.
//
//*****************************************************************************
void
am_hal_delay_us(uint32_t ui32us)
{
  42786c:	ee07 0a90 	vmov	s15, r0

    register uint32_t ui32Iterations = BOOTROM_CYCLES_US(ui32us);
  427870:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 4278b4 <am_hal_delay_us+0x48>
  427874:	eef8 7a67 	vcvt.f32.u32	s15, s15
    register uint32_t ui32CycleCntAdj;

    //
    // Check for LP (96MHz) vs. HP (192MHz/250MHz) mode and create the adjustment accordingly.
    //
    if (PWRCTRL->MCUPERFREQ_b.MCUPERFSTATUS == AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE)
  427878:	4b0f      	ldr	r3, [pc, #60]	@ (4278b8 <am_hal_delay_us+0x4c>)
    register uint32_t ui32Iterations = BOOTROM_CYCLES_US(ui32us);
  42787a:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (PWRCTRL->MCUPERFREQ_b.MCUPERFSTATUS == AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE)
  42787e:	681b      	ldr	r3, [r3, #0]
  427880:	f3c3 03c1 	ubfx	r3, r3, #3, #2
  427884:	2b02      	cmp	r3, #2
  427886:	d007      	beq.n	427898 <am_hal_delay_us+0x2c>
    register uint32_t ui32Iterations = BOOTROM_CYCLES_US(ui32us);
  427888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        //
        ui32CycleCntAdj = ((13 * AM_HAL_CLKGEN_FREQ_HP250_MHZ / AM_HAL_CLKGEN_FREQ_MAX_MHZ) + 40) / 3;
    }
    else
    {
        ui32CycleCntAdj = ((13 * 1) + 32) / 3;
  42788c:	230f      	movs	r3, #15
    register uint32_t ui32Iterations = BOOTROM_CYCLES_US(ui32us);
  42788e:	ee17 0a90 	vmov	r0, s15
    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //

    if ( ui32Iterations > ui32CycleCntAdj )
  427892:	4298      	cmp	r0, r3
  427894:	d80b      	bhi.n	4278ae <am_hal_delay_us+0x42>
    {
        ui32Iterations -= ui32CycleCntAdj;
        br_util_delay_cycles(ui32Iterations);
    }

} // am_hal_delay_us()
  427896:	4770      	bx	lr
        ui32Iterations = (uint32_t)(ui32Iterations * 1.0f * AM_HAL_CLKGEN_FREQ_HP250_MHZ / AM_HAL_CLKGEN_FREQ_MAX_MHZ);
  427898:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 4278bc <am_hal_delay_us+0x50>
  42789c:	ee67 7a87 	vmul.f32	s15, s15, s14
  4278a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        ui32CycleCntAdj = ((13 * AM_HAL_CLKGEN_FREQ_HP250_MHZ / AM_HAL_CLKGEN_FREQ_MAX_MHZ) + 40) / 3;
  4278a4:	2318      	movs	r3, #24
        ui32Iterations = (uint32_t)(ui32Iterations * 1.0f * AM_HAL_CLKGEN_FREQ_HP250_MHZ / AM_HAL_CLKGEN_FREQ_MAX_MHZ);
  4278a6:	ee17 0a90 	vmov	r0, s15
    if ( ui32Iterations > ui32CycleCntAdj )
  4278aa:	4298      	cmp	r0, r3
  4278ac:	d9f3      	bls.n	427896 <am_hal_delay_us+0x2a>
        br_util_delay_cycles(ui32Iterations);
  4278ae:	1ac0      	subs	r0, r0, r3
  4278b0:	f7d8 b3a6 	b.w	0 <br_util_delay_cycles>
  4278b4:	42000000 	.word	0x42000000
  4278b8:	40021000 	.word	0x40021000
  4278bc:	4026aaab 	.word	0x4026aaab

004278c0 <am_hal_delay_us_status_change>:
//
//*****************************************************************************
uint32_t
am_hal_delay_us_status_change(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                              uint32_t ui32Mask, uint32_t ui32Value)
{
  4278c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4278c4:	461e      	mov	r6, r3
    while ( 1 )
    {
        //
        // Check the status
        //
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
  4278c6:	680b      	ldr	r3, [r1, #0]
  4278c8:	4013      	ands	r3, r2
  4278ca:	429e      	cmp	r6, r3
  4278cc:	d018      	beq.n	427900 <am_hal_delay_us_status_change+0x40>
        {
            return AM_HAL_STATUS_SUCCESS;
        }

        if (ui32usMaxDelay--)
  4278ce:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
  4278d2:	b1c0      	cbz	r0, 427906 <am_hal_delay_us_status_change+0x46>
  4278d4:	460c      	mov	r4, r1
  4278d6:	4615      	mov	r5, r2
    if (PWRCTRL->MCUPERFREQ_b.MCUPERFSTATUS == AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE)
  4278d8:	4f0c      	ldr	r7, [pc, #48]	@ (42790c <am_hal_delay_us_status_change+0x4c>)
  4278da:	e002      	b.n	4278e2 <am_hal_delay_us_status_change+0x22>
        if (ui32usMaxDelay--)
  4278dc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
  4278e0:	d011      	beq.n	427906 <am_hal_delay_us_status_change+0x46>
    if (PWRCTRL->MCUPERFREQ_b.MCUPERFSTATUS == AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE)
  4278e2:	6838      	ldr	r0, [r7, #0]
        if (ui32usMaxDelay--)
  4278e4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
    if (PWRCTRL->MCUPERFREQ_b.MCUPERFSTATUS == AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE)
  4278e8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
  4278ec:	2802      	cmp	r0, #2
        br_util_delay_cycles(ui32Iterations);
  4278ee:	bf0c      	ite	eq
  4278f0:	203b      	moveq	r0, #59	@ 0x3b
  4278f2:	2011      	movne	r0, #17
  4278f4:	f7d8 f384 	bl	0 <br_util_delay_cycles>
        if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
  4278f8:	6820      	ldr	r0, [r4, #0]
  4278fa:	4028      	ands	r0, r5
  4278fc:	42b0      	cmp	r0, r6
  4278fe:	d1ed      	bne.n	4278dc <am_hal_delay_us_status_change+0x1c>
            return AM_HAL_STATUS_SUCCESS;
  427900:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_delay_us_status_change()
  427902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return AM_HAL_STATUS_TIMEOUT;
  427906:	2004      	movs	r0, #4
} // am_hal_delay_us_status_change()
  427908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42790c:	40021000 	.word	0x40021000

00427910 <am_hal_delay_us_status_check>:
//*****************************************************************************
uint32_t
am_hal_delay_us_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                             uint32_t ui32Mask, uint32_t ui32Value,
                             bool bIsEqual)
{
  427910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  427914:	f89d c018 	ldrb.w	ip, [sp, #24]
  427918:	4604      	mov	r4, r0
  42791a:	460d      	mov	r5, r1
  42791c:	4616      	mov	r6, r2
  42791e:	461f      	mov	r7, r3
    if (PWRCTRL->MCUPERFREQ_b.MCUPERFSTATUS == AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE)
  427920:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 42797c <am_hal_delay_us_status_check+0x6c>
  427924:	f1bc 0f00 	cmp.w	ip, #0
  427928:	d00c      	beq.n	427944 <am_hal_delay_us_status_check+0x34>
  42792a:	e01e      	b.n	42796a <am_hal_delay_us_status_check+0x5a>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
  42792c:	b314      	cbz	r4, 427974 <am_hal_delay_us_status_check+0x64>
    if (PWRCTRL->MCUPERFREQ_b.MCUPERFSTATUS == AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE)
  42792e:	f8d8 3000 	ldr.w	r3, [r8]
  427932:	3c01      	subs	r4, #1
  427934:	f3c3 03c1 	ubfx	r3, r3, #3, #2
  427938:	2b02      	cmp	r3, #2
        br_util_delay_cycles(ui32Iterations);
  42793a:	bf14      	ite	ne
  42793c:	2011      	movne	r0, #17
  42793e:	203b      	moveq	r0, #59	@ 0x3b
  427940:	f7d8 f35e 	bl	0 <br_util_delay_cycles>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
  427944:	6828      	ldr	r0, [r5, #0]
  427946:	4030      	ands	r0, r6
  427948:	4287      	cmp	r7, r0
  42794a:	d0ef      	beq.n	42792c <am_hal_delay_us_status_check+0x1c>
                return AM_HAL_STATUS_SUCCESS;
  42794c:	2000      	movs	r0, #0
        }
    }

    return AM_HAL_STATUS_TIMEOUT;

} // am_hal_delay_us_status_check()
  42794e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32usMaxDelay-- )
  427952:	b17c      	cbz	r4, 427974 <am_hal_delay_us_status_check+0x64>
    if (PWRCTRL->MCUPERFREQ_b.MCUPERFSTATUS == AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE)
  427954:	f8d8 3000 	ldr.w	r3, [r8]
  427958:	3c01      	subs	r4, #1
  42795a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
  42795e:	2b02      	cmp	r3, #2
        br_util_delay_cycles(ui32Iterations);
  427960:	bf0c      	ite	eq
  427962:	203b      	moveq	r0, #59	@ 0x3b
  427964:	2011      	movne	r0, #17
  427966:	f7d8 f34b 	bl	0 <br_util_delay_cycles>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
  42796a:	6828      	ldr	r0, [r5, #0]
  42796c:	4030      	ands	r0, r6
  42796e:	42b8      	cmp	r0, r7
  427970:	d1ef      	bne.n	427952 <am_hal_delay_us_status_check+0x42>
  427972:	e7eb      	b.n	42794c <am_hal_delay_us_status_check+0x3c>
    return AM_HAL_STATUS_TIMEOUT;
  427974:	2004      	movs	r0, #4
} // am_hal_delay_us_status_check()
  427976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42797a:	bf00      	nop
  42797c:	40021000 	.word	0x40021000

00427980 <am_hal_read_words>:
//!  I-Cache.
//
//*****************************************************************************
void am_hal_read_words(uint32_t *pSrcAddr, uint32_t *pDstAddr, uint32_t numWords)
{
    internal_hal_read_words(pSrcAddr, pDstAddr, numWords);
  427980:	f7d8 b344 	b.w	c <internal_hal_read_words>

00427984 <am_util_delay_ms>:
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
#if defined(AM_PART_APOLLO4_API) || defined(AM_PART_APOLLO5_API)
    am_hal_delay_us( ui32MilliSeconds * 1000);
  427984:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
  427988:	fb03 f000 	mul.w	r0, r3, r0
  42798c:	f7ff bf6e 	b.w	42786c <am_hal_delay_us>

00427990 <am_util_delay_us>:
//
// Delays for a desired amount of microseconds.
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
  427990:	f7ff bf6c 	b.w	42786c <am_hal_delay_us>

00427994 <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
  427994:	2900      	cmp	r1, #0
  427996:	d03f      	beq.n	427a18 <divu64_10+0x84>
{
  427998:	b4f0      	push	{r4, r5, r6, r7}
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
  42799a:	4604      	mov	r4, r0
  42799c:	4606      	mov	r6, r0
  42799e:	460d      	mov	r5, r1
  4279a0:	460f      	mov	r7, r1
  4279a2:	ea54 055f 	orrs.w	r5, r4, pc, lsr #1
  4279a6:	ea56 079f 	orrs.w	r7, r6, pc, lsr #2
  4279aa:	19a3      	adds	r3, r4, r6
  4279ac:	eb45 0207 	adc.w	r2, r5, r7
        q64 += (q64 >> 4);
  4279b0:	461c      	mov	r4, r3
  4279b2:	4615      	mov	r5, r2
  4279b4:	ea54 151f 	orrs.w	r5, r4, pc, lsr #4
  4279b8:	191b      	adds	r3, r3, r4
  4279ba:	eb42 0205 	adc.w	r2, r2, r5
        q64 += (q64 >> 8);
  4279be:	461c      	mov	r4, r3
  4279c0:	4615      	mov	r5, r2
  4279c2:	ea54 251f 	orrs.w	r5, r4, pc, lsr #8
  4279c6:	191b      	adds	r3, r3, r4
  4279c8:	eb42 0205 	adc.w	r2, r2, r5
        q64 += (q64 >> 16);
  4279cc:	461c      	mov	r4, r3
  4279ce:	4615      	mov	r5, r2
  4279d0:	ea54 451f 	orrs.w	r5, r4, pc, lsr #16
  4279d4:	191b      	adds	r3, r3, r4
  4279d6:	eb42 0205 	adc.w	r2, r2, r5
        q64 += (q64 >> 32);
  4279da:	189b      	adds	r3, r3, r2
        q64 >>= 3;
  4279dc:	461c      	mov	r4, r3
  4279de:	f142 0500 	adc.w	r5, r2, #0
  4279e2:	ea54 05df 	orrs.w	r5, r4, pc, lsr #3
        r64 = ui64Val - q64*10;
  4279e6:	4626      	mov	r6, r4
  4279e8:	462f      	mov	r7, r5
  4279ea:	ea56 078f 	orrs.w	r7, r6, pc, lsl #2
        return q64 + ((r64 + 6) >> 4);
  4279ee:	3006      	adds	r0, #6
  4279f0:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
  4279f4:	1933      	adds	r3, r6, r4
  4279f6:	eb45 0207 	adc.w	r2, r5, r7
  4279fa:	18db      	adds	r3, r3, r3
  4279fc:	eb42 0602 	adc.w	r6, r2, r2
        return q64 + ((r64 + 6) >> 4);
  427a00:	1ac0      	subs	r0, r0, r3
  427a02:	eb61 0106 	sbc.w	r1, r1, r6
  427a06:	4602      	mov	r2, r0
  427a08:	460b      	mov	r3, r1
  427a0a:	ea52 131f 	orrs.w	r3, r2, pc, lsr #4
  427a0e:	1910      	adds	r0, r2, r4
  427a10:	eb43 0105 	adc.w	r1, r3, r5
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
  427a14:	bcf0      	pop	{r4, r5, r6, r7}
  427a16:	4770      	bx	lr
        q32 = (ui32Val>>1) + (ui32Val>>2);
  427a18:	0883      	lsrs	r3, r0, #2
  427a1a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
  427a1e:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
  427a22:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
  427a26:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
  427a2a:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
  427a2c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
  427a30:	3006      	adds	r0, #6
  427a32:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
  427a36:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
  427a3a:	4770      	bx	lr

00427a3c <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
  427a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  427a40:	b08b      	sub	sp, #44	@ 0x2c
  427a42:	4684      	mov	ip, r0
  427a44:	f10d 0e0c 	add.w	lr, sp, #12
    char tbuf[25];
    int ix = 0, iNumDig = 0;
  427a48:	2000      	movs	r0, #0
  427a4a:	e052      	b.n	427af2 <uint64_to_str+0xb6>
        q64 = (ui64Val>>1) + (ui64Val>>2);
  427a4c:	4666      	mov	r6, ip
  427a4e:	46e0      	mov	r8, ip
  427a50:	460f      	mov	r7, r1
  427a52:	4689      	mov	r9, r1
  427a54:	ea56 079f 	orrs.w	r7, r6, pc, lsr #2
  427a58:	ea58 095f 	orrs.w	r9, r8, pc, lsr #1
  427a5c:	eb16 0408 	adds.w	r4, r6, r8
  427a60:	eb47 0809 	adc.w	r8, r7, r9
        q64 += (q64 >> 4);
  427a64:	f8cd 8004 	str.w	r8, [sp, #4]
  427a68:	9400      	str	r4, [sp, #0]
  427a6a:	e9dd 6700 	ldrd	r6, r7, [sp]
  427a6e:	ea56 171f 	orrs.w	r7, r6, pc, lsr #4
  427a72:	e9cd 6700 	strd	r6, r7, [sp]
  427a76:	1936      	adds	r6, r6, r4
  427a78:	9c01      	ldr	r4, [sp, #4]
        q64 += (q64 >> 8);
  427a7a:	46b2      	mov	sl, r6
        q64 += (q64 >> 4);
  427a7c:	eb48 0804 	adc.w	r8, r8, r4
        q64 += (q64 >> 8);
  427a80:	46c3      	mov	fp, r8
  427a82:	ea5a 2b1f 	orrs.w	fp, sl, pc, lsr #8
  427a86:	eb1a 0406 	adds.w	r4, sl, r6
  427a8a:	eb48 050b 	adc.w	r5, r8, fp
        q64 += (q64 >> 16);
  427a8e:	4626      	mov	r6, r4
  427a90:	462f      	mov	r7, r5
  427a92:	ea56 471f 	orrs.w	r7, r6, pc, lsr #16
  427a96:	1934      	adds	r4, r6, r4
  427a98:	eb45 0707 	adc.w	r7, r5, r7
        q64 += (q64 >> 32);
  427a9c:	193e      	adds	r6, r7, r4
        q64 >>= 3;
  427a9e:	4634      	mov	r4, r6
  427aa0:	f147 0500 	adc.w	r5, r7, #0
  427aa4:	ea54 05df 	orrs.w	r5, r4, pc, lsr #3
        r64 = ui64Val - q64*10;
  427aa8:	46a0      	mov	r8, r4
  427aaa:	46a9      	mov	r9, r5
  427aac:	ea58 098f 	orrs.w	r9, r8, pc, lsl #2
        return q64 + ((r64 + 6) >> 4);
  427ab0:	f11c 0c06 	adds.w	ip, ip, #6
  427ab4:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
  427ab8:	eb18 0604 	adds.w	r6, r8, r4
  427abc:	eb49 0705 	adc.w	r7, r9, r5
  427ac0:	19b6      	adds	r6, r6, r6
  427ac2:	eb47 0807 	adc.w	r8, r7, r7
        return q64 + ((r64 + 6) >> 4);
  427ac6:	ebbc 0c06 	subs.w	ip, ip, r6
  427aca:	eb61 0108 	sbc.w	r1, r1, r8
  427ace:	4666      	mov	r6, ip
  427ad0:	460f      	mov	r7, r1
  427ad2:	ea56 171f 	orrs.w	r7, r6, pc, lsr #4
  427ad6:	eb16 0c04 	adds.w	ip, r6, r4
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
  427ada:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
  427ade:	eba3 0341 	sub.w	r3, r3, r1, lsl #1

        tbuf[ix++] = uMod + '0';
  427ae2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
  427ae6:	f100 0001 	add.w	r0, r0, #1
        return q64 + ((r64 + 6) >> 4);
  427aea:	eb47 0105 	adc.w	r1, r7, r5
        tbuf[ix++] = uMod + '0';
  427aee:	f80e 3b01 	strb.w	r3, [lr], #1
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
  427af2:	4663      	mov	r3, ip
    if ( ui64Val >> 32 )
  427af4:	2900      	cmp	r1, #0
  427af6:	d1a9      	bne.n	427a4c <uint64_to_str+0x10>
        q32 = (ui32Val>>1) + (ui32Val>>2);
  427af8:	4619      	mov	r1, r3
  427afa:	085b      	lsrs	r3, r3, #1
  427afc:	eb03 0391 	add.w	r3, r3, r1, lsr #2
        q32 += (q32 >> 4);
  427b00:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
  427b04:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
  427b08:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
  427b0c:	08db      	lsrs	r3, r3, #3
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
  427b0e:	1d8c      	adds	r4, r1, #6
        r32 = ui32Val - q32*10;
  427b10:	eb03 0583 	add.w	r5, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
  427b14:	eba4 0445 	sub.w	r4, r4, r5, lsl #1
  427b18:	eb03 1314 	add.w	r3, r3, r4, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
  427b1c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  427b20:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
        tbuf[ix++] = uMod + '0';
  427b24:	3130      	adds	r1, #48	@ 0x30
  427b26:	3001      	adds	r0, #1
  427b28:	f80e 1b01 	strb.w	r1, [lr], #1
        ui64Val = u64Tmp;
    } while ( ui64Val );
  427b2c:	2b00      	cmp	r3, #0
  427b2e:	d1e3      	bne.n	427af8 <uint64_to_str+0xbc>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
  427b30:	b16a      	cbz	r2, 427b4e <uint64_to_str+0x112>
  427b32:	4605      	mov	r5, r0
  427b34:	f040 e001 	dls	lr, r0
  427b38:	ab03      	add	r3, sp, #12
  427b3a:	4403      	add	r3, r0
  427b3c:	1e51      	subs	r1, r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
  427b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  427b42:	f801 4f01 	strb.w	r4, [r1, #1]!
        while ( ix-- )
  427b46:	f00f c007 	le	lr, 427b3e <uint64_to_str+0x102>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
  427b4a:	2300      	movs	r3, #0
  427b4c:	5553      	strb	r3, [r2, r5]
    }

    return iNumDig;
}
  427b4e:	b00b      	add	sp, #44	@ 0x2c
  427b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00427b54 <am_util_stdio_vsprintf>:
// Format data into string. (va_list implementation)
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
  427b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
  427b58:	780b      	ldrb	r3, [r1, #0]
{
  427b5a:	4604      	mov	r4, r0
  427b5c:	b08f      	sub	sp, #60	@ 0x3c
    while ( *pcFmt != 0x0 )
  427b5e:	2b00      	cmp	r3, #0
  427b60:	f000 8099 	beq.w	427c96 <am_util_stdio_vsprintf+0x142>
  427b64:	460d      	mov	r5, r1
  427b66:	4692      	mov	sl, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
  427b68:	f04f 0b00 	mov.w	fp, #0
  427b6c:	e00c      	b.n	427b88 <am_util_stdio_vsprintf+0x34>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
  427b6e:	b124      	cbz	r4, 427b7a <am_util_stdio_vsprintf+0x26>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
  427b70:	2b0a      	cmp	r3, #10
  427b72:	f000 8084 	beq.w	427c7e <am_util_stdio_vsprintf+0x12a>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
  427b76:	f804 3b01 	strb.w	r3, [r4], #1
            }

            ++pcFmt;
  427b7a:	4605      	mov	r5, r0
            ++ui32CharCnt;
  427b7c:	f10b 0b01 	add.w	fp, fp, #1
    while ( *pcFmt != 0x0 )
  427b80:	782b      	ldrb	r3, [r5, #0]
  427b82:	2b00      	cmp	r3, #0
  427b84:	f000 8088 	beq.w	427c98 <am_util_stdio_vsprintf+0x144>
        if ( *pcFmt != '%' )
  427b88:	2b25      	cmp	r3, #37	@ 0x25
            ++pcFmt;
  427b8a:	f105 0001 	add.w	r0, r5, #1
        if ( *pcFmt != '%' )
  427b8e:	d1ee      	bne.n	427b6e <am_util_stdio_vsprintf+0x1a>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
  427b90:	786a      	ldrb	r2, [r5, #1]
  427b92:	2a30      	cmp	r2, #48	@ 0x30
  427b94:	f000 80c7 	beq.w	427d26 <am_util_stdio_vsprintf+0x1d2>
        ui8PadChar = ' ';
  427b98:	2320      	movs	r3, #32
  427b9a:	9301      	str	r3, [sp, #4]
    if ( *pcStr == '-')
  427b9c:	2a2d      	cmp	r2, #45	@ 0x2d
  427b9e:	f000 8082 	beq.w	427ca6 <am_util_stdio_vsprintf+0x152>
    uint32_t ui32Val = 0, uCnt = 0;
  427ba2:	2600      	movs	r6, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  427ba4:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
  427ba8:	2b09      	cmp	r3, #9
  427baa:	4605      	mov	r5, r0
    bool bNeg = false;
  427bac:	4637      	mov	r7, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  427bae:	f200 8084 	bhi.w	427cba <am_util_stdio_vsprintf+0x166>
  427bb2:	4629      	mov	r1, r5
  427bb4:	2300      	movs	r3, #0
        ui32Val *= 10;
  427bb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
  427bba:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  427bbe:	468c      	mov	ip, r1
  427bc0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  427bc4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  427bc8:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
  427bcc:	f1be 0f09 	cmp.w	lr, #9
  427bd0:	d9f1      	bls.n	427bb6 <am_util_stdio_vsprintf+0x62>
    return bNeg ? -ui32Val : ui32Val;
  427bd2:	3601      	adds	r6, #1
  427bd4:	1b76      	subs	r6, r6, r5
        ++uCnt;
  427bd6:	44b4      	add	ip, r6
        pcFmt += ui32NumChars;

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
  427bd8:	f810 200c 	ldrb.w	r2, [r0, ip]
    return bNeg ? -ui32Val : ui32Val;
  427bdc:	2f00      	cmp	r7, #0
  427bde:	ea53 b303 			@ <UNDEFINED> instruction: 0xea53b303
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
  427be2:	2a73      	cmp	r2, #115	@ 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
  427be4:	461f      	mov	r7, r3
        pcFmt += ui32NumChars;
  427be6:	eb00 050c 	add.w	r5, r0, ip
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
  427bea:	d06d      	beq.n	427cc8 <am_util_stdio_vsprintf+0x174>
  427bec:	ea83 7ce3 	eor.w	ip, r3, r3, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
  427bf0:	2a2e      	cmp	r2, #46	@ 0x2e
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
  427bf2:	ebac 7ce3 	sub.w	ip, ip, r3, asr #31
        if (*pcFmt == '.')
  427bf6:	f000 80fc 	beq.w	427df2 <am_util_stdio_vsprintf+0x29e>
        iPrecision = 6;             // printf() default precision for %f is 6
  427bfa:	2606      	movs	r6, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
  427bfc:	2a6c      	cmp	r2, #108	@ 0x6c
  427bfe:	d104      	bne.n	427c0a <am_util_stdio_vsprintf+0xb6>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
  427c00:	786a      	ldrb	r2, [r5, #1]
  427c02:	2a6c      	cmp	r2, #108	@ 0x6c
  427c04:	f000 8123 	beq.w	427e4e <am_util_stdio_vsprintf+0x2fa>
            pcFmt++;
  427c08:	3501      	adds	r5, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
  427c0a:	f1a2 0146 	sub.w	r1, r2, #70	@ 0x46
  427c0e:	2932      	cmp	r1, #50	@ 0x32
  427c10:	f200 808d 	bhi.w	427d2e <am_util_stdio_vsprintf+0x1da>
  427c14:	e8df f011 	tbh	[pc, r1, lsl #1]
  427c18:	008b0092 	.word	0x008b0092
  427c1c:	008b008b 	.word	0x008b008b
  427c20:	008b008b 	.word	0x008b008b
  427c24:	008b008b 	.word	0x008b008b
  427c28:	008b008b 	.word	0x008b008b
  427c2c:	008b008b 	.word	0x008b008b
  427c30:	008b008b 	.word	0x008b008b
  427c34:	008b008b 	.word	0x008b008b
  427c38:	008b008b 	.word	0x008b008b
  427c3c:	008b027b 	.word	0x008b027b
  427c40:	008b008b 	.word	0x008b008b
  427c44:	008b008b 	.word	0x008b008b
  427c48:	008b008b 	.word	0x008b008b
  427c4c:	008b008b 	.word	0x008b008b
  427c50:	00e2008b 	.word	0x00e2008b
  427c54:	008b01a1 	.word	0x008b01a1
  427c58:	008b0092 	.word	0x008b0092
  427c5c:	01a1008b 	.word	0x01a1008b
  427c60:	008b008b 	.word	0x008b008b
  427c64:	008b008b 	.word	0x008b008b
  427c68:	008b008b 	.word	0x008b008b
  427c6c:	008b008b 	.word	0x008b008b
  427c70:	02f8008b 	.word	0x02f8008b
  427c74:	01cc008b 	.word	0x01cc008b
  427c78:	008b008b 	.word	0x008b008b
  427c7c:	029d      	.short	0x029d
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
  427c7e:	4aca      	ldr	r2, [pc, #808]	@ (427fa8 <am_util_stdio_vsprintf+0x454>)
  427c80:	7812      	ldrb	r2, [r2, #0]
  427c82:	2a00      	cmp	r2, #0
  427c84:	f43f af77 	beq.w	427b76 <am_util_stdio_vsprintf+0x22>
                    *pcBuf++ = '\r';
  427c88:	230d      	movs	r3, #13
  427c8a:	f804 3b01 	strb.w	r3, [r4], #1
                *pcBuf++ = *pcFmt;
  427c8e:	782b      	ldrb	r3, [r5, #0]
                    ++ui32CharCnt;
  427c90:	f10b 0b01 	add.w	fp, fp, #1
  427c94:	e76f      	b.n	427b76 <am_util_stdio_vsprintf+0x22>
    uint32_t ui32NumChars, ui32CharCnt = 0;
  427c96:	469b      	mov	fp, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
  427c98:	b10c      	cbz	r4, 427c9e <am_util_stdio_vsprintf+0x14a>
    {
        *pcBuf = 0x0;
  427c9a:	2300      	movs	r3, #0
  427c9c:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
  427c9e:	4658      	mov	r0, fp
  427ca0:	b00f      	add	sp, #60	@ 0x3c
  427ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uCnt++;
  427ca6:	2601      	movs	r6, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  427ca8:	7842      	ldrb	r2, [r0, #1]
        bNeg = true;
  427caa:	4637      	mov	r7, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  427cac:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
  427cb0:	2b09      	cmp	r3, #9
        pcStr++;
  427cb2:	eb00 0506 	add.w	r5, r0, r6
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  427cb6:	f67f af7c 	bls.w	427bb2 <am_util_stdio_vsprintf+0x5e>
  427cba:	2300      	movs	r3, #0
    return bNeg ? -ui32Val : ui32Val;
  427cbc:	2f00      	cmp	r7, #0
  427cbe:	ea53 b303 			@ <UNDEFINED> instruction: 0xea53b303
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
  427cc2:	2a73      	cmp	r2, #115	@ 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
  427cc4:	461f      	mov	r7, r3
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
  427cc6:	d191      	bne.n	427bec <am_util_stdio_vsprintf+0x98>
                pcStr = va_arg(pArgs, char *);
  427cc8:	4651      	mov	r1, sl
  427cca:	f851 ab04 	ldr.w	sl, [r1], #4
    if ( !pcBuf )
  427cce:	f1ba 0f00 	cmp.w	sl, #0
  427cd2:	f000 81fe 	beq.w	4280d2 <am_util_stdio_vsprintf+0x57e>
    while ( *pcBuf++ )
  427cd6:	4650      	mov	r0, sl
  427cd8:	f810 6b01 	ldrb.w	r6, [r0], #1
  427cdc:	2e00      	cmp	r6, #0
  427cde:	f000 834a 	beq.w	428376 <am_util_stdio_vsprintf+0x822>
  427ce2:	9102      	str	r1, [sp, #8]
  427ce4:	f7f9 f972 	bl	420fcc <strlen>
                if ( iWidth > 0 )
  427ce8:	2f00      	cmp	r7, #0
  427cea:	9902      	ldr	r1, [sp, #8]
  427cec:	f100 0001 	add.w	r0, r0, #1
  427cf0:	dd02      	ble.n	427cf8 <am_util_stdio_vsprintf+0x1a4>
                    if ( ui32strlen < iWidth )
  427cf2:	4287      	cmp	r7, r0
  427cf4:	f200 811c 	bhi.w	427f30 <am_util_stdio_vsprintf+0x3dc>
  427cf8:	4653      	mov	r3, sl
                    if ( pcBuf )
  427cfa:	2c00      	cmp	r4, #0
  427cfc:	f000 8121 	beq.w	427f42 <am_util_stdio_vsprintf+0x3ee>
                        *pcBuf++ = *pcStr;
  427d00:	7026      	strb	r6, [r4, #0]
  427d02:	461a      	mov	r2, r3
                while (*pcStr != 0x0)
  427d04:	f813 6f01 	ldrb.w	r6, [r3, #1]!
                        *pcBuf++ = *pcStr;
  427d08:	3401      	adds	r4, #1
                while (*pcStr != 0x0)
  427d0a:	2e00      	cmp	r6, #0
  427d0c:	d1f8      	bne.n	427d00 <am_util_stdio_vsprintf+0x1ac>
                if ( iWidth )
  427d0e:	f1ca 0301 	rsb	r3, sl, #1
  427d12:	445b      	add	r3, fp
                    ++ui32CharCnt;
  427d14:	eb02 0b03 	add.w	fp, r2, r3
                if ( iWidth )
  427d18:	b11f      	cbz	r7, 427d22 <am_util_stdio_vsprintf+0x1ce>
                    iWidth = -iWidth;
  427d1a:	427b      	negs	r3, r7
                    if ( ui32strlen < iWidth )
  427d1c:	4283      	cmp	r3, r0
  427d1e:	f200 812d 	bhi.w	427f7c <am_util_stdio_vsprintf+0x428>
                pcStr = va_arg(pArgs, char *);
  427d22:	468a      	mov	sl, r1
  427d24:	e008      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
            ui8PadChar = '0';
  427d26:	9201      	str	r2, [sp, #4]
            ++pcFmt;
  427d28:	1ca8      	adds	r0, r5, #2
    if ( *pcStr == '-')
  427d2a:	78aa      	ldrb	r2, [r5, #2]
  427d2c:	e736      	b.n	427b9c <am_util_stdio_vsprintf+0x48>
                if ( pcBuf )
  427d2e:	b10c      	cbz	r4, 427d34 <am_util_stdio_vsprintf+0x1e0>
                    *pcBuf++ = *pcFmt;
  427d30:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
  427d34:	f10b 0b01 	add.w	fp, fp, #1
        ++pcFmt;
  427d38:	3501      	adds	r5, #1
  427d3a:	e721      	b.n	427b80 <am_util_stdio_vsprintf+0x2c>
                if ( pcBuf )
  427d3c:	2c00      	cmp	r4, #0
  427d3e:	d0fb      	beq.n	427d38 <am_util_stdio_vsprintf+0x1e4>
                    float fValue = va_arg(pArgs, double);
  427d40:	f10a 0a07 	add.w	sl, sl, #7
  427d44:	f02a 0a07 	bic.w	sl, sl, #7
  427d48:	ecba 7b02 	vldmia	sl!, {d7}
  427d4c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    if (fValue == 0.0f)
  427d50:	eeb5 7a40 	vcmp.f32	s14, #0.0
                    *(uint32_t*)pcBuf = 20;
  427d54:	2314      	movs	r3, #20
    if (fValue == 0.0f)
  427d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
  427d5a:	6023      	str	r3, [r4, #0]
    if (fValue == 0.0f)
  427d5c:	f000 81b3 	beq.w	4280c6 <am_util_stdio_vsprintf+0x572>
    unFloatValue.F = fValue;
  427d60:	ee17 3a10 	vmov	r3, s14
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
  427d64:	f3c3 5cc7 	ubfx	ip, r3, #23, #8
  427d68:	f1ac 017f 	sub.w	r1, ip, #127	@ 0x7f
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
  427d6c:	f3c3 0716 	ubfx	r7, r3, #0, #23
    if (iExp2 >= 31)
  427d70:	291e      	cmp	r1, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
  427d72:	f447 0700 	orr.w	r7, r7, #8388608	@ 0x800000
    if (iExp2 >= 31)
  427d76:	f300 8325 	bgt.w	4283c4 <am_util_stdio_vsprintf+0x870>
    else if (iExp2 < -23)
  427d7a:	f111 0f17 	cmn.w	r1, #23
  427d7e:	f2c0 81a2 	blt.w	4280c6 <am_util_stdio_vsprintf+0x572>
    else if (iExp2 >= 23)
  427d82:	2916      	cmp	r1, #22
  427d84:	f340 8185 	ble.w	428092 <am_util_stdio_vsprintf+0x53e>
    if (unFloatValue.I32 < 0)
  427d88:	2b00      	cmp	r3, #0
        *pcBuf++ = '-';
  427d8a:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
  427d8c:	f2c0 8227 	blt.w	4281de <am_util_stdio_vsprintf+0x68a>
        i32IntPart = i32Significand << (iExp2 - 23);
  427d90:	f1ac 0c96 	sub.w	ip, ip, #150	@ 0x96
  427d94:	fa07 f00c 	lsl.w	r0, r7, ip
            uint64_to_str(i32IntPart, pcBuf);
  427d98:	17c1      	asrs	r1, r0, #31
  427d9a:	f7ff fe4f 	bl	427a3c <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
  427d9e:	7813      	ldrb	r3, [r2, #0]
  427da0:	2700      	movs	r7, #0
  427da2:	2b00      	cmp	r3, #0
  427da4:	f000 8344 	beq.w	428430 <am_util_stdio_vsprintf+0x8dc>
  427da8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  427dac:	2b00      	cmp	r3, #0
  427dae:	d1fb      	bne.n	427da8 <am_util_stdio_vsprintf+0x254>
    *pcBuf++ = '.';
  427db0:	232e      	movs	r3, #46	@ 0x2e
  427db2:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
  427db4:	2f00      	cmp	r7, #0
  427db6:	f040 82d7 	bne.w	428368 <am_util_stdio_vsprintf+0x814>
        *pcBuf++ = '0';
  427dba:	2330      	movs	r3, #48	@ 0x30
  427dbc:	1c91      	adds	r1, r2, #2
  427dbe:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
  427dc0:	1b08      	subs	r0, r1, r4
    *pcBuf = 0x00;
  427dc2:	2300      	movs	r3, #0
                    if ( iVal < 0 )
  427dc4:	4298      	cmp	r0, r3
    *pcBuf = 0x00;
  427dc6:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
  427dc8:	f280 8180 	bge.w	4280cc <am_util_stdio_vsprintf+0x578>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
  427dcc:	1c43      	adds	r3, r0, #1
  427dce:	f000 817a 	beq.w	4280c6 <am_util_stdio_vsprintf+0x572>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
  427dd2:	3002      	adds	r0, #2
  427dd4:	f000 82f6 	beq.w	4283c4 <am_util_stdio_vsprintf+0x870>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
  427dd8:	4b74      	ldr	r3, [pc, #464]	@ (427fac <am_util_stdio_vsprintf+0x458>)
                        iVal = 3;
  427dda:	e175      	b.n	4280c8 <am_util_stdio_vsprintf+0x574>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
  427ddc:	f10a 0304 	add.w	r3, sl, #4
                if ( pcBuf )
  427de0:	b11c      	cbz	r4, 427dea <am_util_stdio_vsprintf+0x296>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
  427de2:	f8da 2000 	ldr.w	r2, [sl]
  427de6:	f804 2b01 	strb.w	r2, [r4], #1
  427dea:	469a      	mov	sl, r3
                ++ui32CharCnt;
  427dec:	f10b 0b01 	add.w	fp, fp, #1
                break;
  427df0:	e7a2      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
    if ( *pcStr == '-')
  427df2:	786a      	ldrb	r2, [r5, #1]
            ++pcFmt;
  427df4:	1c6e      	adds	r6, r5, #1
    if ( *pcStr == '-')
  427df6:	2a2d      	cmp	r2, #45	@ 0x2d
  427df8:	f000 8113 	beq.w	428022 <am_util_stdio_vsprintf+0x4ce>
    uint32_t ui32Val = 0, uCnt = 0;
  427dfc:	2100      	movs	r1, #0
  427dfe:	4635      	mov	r5, r6
  427e00:	9104      	str	r1, [sp, #16]
    bool bNeg = false;
  427e02:	9102      	str	r1, [sp, #8]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  427e04:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
  427e08:	2909      	cmp	r1, #9
  427e0a:	f200 82ab 	bhi.w	428364 <am_util_stdio_vsprintf+0x810>
  427e0e:	4628      	mov	r0, r5
  427e10:	2100      	movs	r1, #0
  427e12:	e9cd 8906 	strd	r8, r9, [sp, #24]
        ui32Val *= 10;
  427e16:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
  427e1a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
  427e1e:	4681      	mov	r9, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  427e20:	f810 2f01 	ldrb.w	r2, [r0, #1]!
        ui32Val += (*pcStr - '0');
  427e24:	3930      	subs	r1, #48	@ 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  427e26:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
  427e2a:	f1be 0f09 	cmp.w	lr, #9
  427e2e:	d9f2      	bls.n	427e16 <am_util_stdio_vsprintf+0x2c2>
  427e30:	46ce      	mov	lr, r9
  427e32:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
  427e36:	9a04      	ldr	r2, [sp, #16]
  427e38:	3201      	adds	r2, #1
  427e3a:	1b52      	subs	r2, r2, r5
        ++uCnt;
  427e3c:	eb0e 0502 	add.w	r5, lr, r2
        if ( *pcFmt == 'l' )
  427e40:	5d72      	ldrb	r2, [r6, r5]
            pcFmt += ui32NumChars;
  427e42:	4435      	add	r5, r6
    return bNeg ? -ui32Val : ui32Val;
  427e44:	9802      	ldr	r0, [sp, #8]
  427e46:	2800      	cmp	r0, #0
  427e48:	ea51 b601 			@ <UNDEFINED> instruction: 0xea51b601
            pcFmt += ui32NumChars;
  427e4c:	e6d6      	b.n	427bfc <am_util_stdio_vsprintf+0xa8>
        switch ( *pcFmt )
  427e4e:	78aa      	ldrb	r2, [r5, #2]
                pcFmt++;
  427e50:	3502      	adds	r5, #2
        switch ( *pcFmt )
  427e52:	f1a2 0146 	sub.w	r1, r2, #70	@ 0x46
  427e56:	2932      	cmp	r1, #50	@ 0x32
  427e58:	f63f af69 	bhi.w	427d2e <am_util_stdio_vsprintf+0x1da>
  427e5c:	a001      	add	r0, pc, #4	@ (adr r0, 427e64 <am_util_stdio_vsprintf+0x310>)
  427e5e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
  427e62:	bf00      	nop
  427e64:	00427d3d 	.word	0x00427d3d
  427e68:	00427d2f 	.word	0x00427d2f
  427e6c:	00427d2f 	.word	0x00427d2f
  427e70:	00427d2f 	.word	0x00427d2f
  427e74:	00427d2f 	.word	0x00427d2f
  427e78:	00427d2f 	.word	0x00427d2f
  427e7c:	00427d2f 	.word	0x00427d2f
  427e80:	00427d2f 	.word	0x00427d2f
  427e84:	00427d2f 	.word	0x00427d2f
  427e88:	00427d2f 	.word	0x00427d2f
  427e8c:	00427d2f 	.word	0x00427d2f
  427e90:	00427d2f 	.word	0x00427d2f
  427e94:	00427d2f 	.word	0x00427d2f
  427e98:	00427d2f 	.word	0x00427d2f
  427e9c:	00427d2f 	.word	0x00427d2f
  427ea0:	00427d2f 	.word	0x00427d2f
  427ea4:	00427d2f 	.word	0x00427d2f
  427ea8:	00427d2f 	.word	0x00427d2f
  427eac:	0042820d 	.word	0x0042820d
  427eb0:	00427d2f 	.word	0x00427d2f
  427eb4:	00427d2f 	.word	0x00427d2f
  427eb8:	00427d2f 	.word	0x00427d2f
  427ebc:	00427d2f 	.word	0x00427d2f
  427ec0:	00427d2f 	.word	0x00427d2f
  427ec4:	00427d2f 	.word	0x00427d2f
  427ec8:	00427d2f 	.word	0x00427d2f
  427ecc:	00427d2f 	.word	0x00427d2f
  427ed0:	00427d2f 	.word	0x00427d2f
  427ed4:	00427d2f 	.word	0x00427d2f
  427ed8:	00427ddd 	.word	0x00427ddd
  427edc:	00427fd1 	.word	0x00427fd1
  427ee0:	00427d2f 	.word	0x00427d2f
  427ee4:	00427d3d 	.word	0x00427d3d
  427ee8:	00427d2f 	.word	0x00427d2f
  427eec:	00427d2f 	.word	0x00427d2f
  427ef0:	00427fd1 	.word	0x00427fd1
  427ef4:	00427d2f 	.word	0x00427d2f
  427ef8:	00427d2f 	.word	0x00427d2f
  427efc:	00427d2f 	.word	0x00427d2f
  427f00:	00427d2f 	.word	0x00427d2f
  427f04:	00427d2f 	.word	0x00427d2f
  427f08:	00427d2f 	.word	0x00427d2f
  427f0c:	00427d2f 	.word	0x00427d2f
  427f10:	00427d2f 	.word	0x00427d2f
  427f14:	00427d2f 	.word	0x00427d2f
  427f18:	00428209 	.word	0x00428209
  427f1c:	00427d2f 	.word	0x00427d2f
  427f20:	0042800f 	.word	0x0042800f
  427f24:	00427d2f 	.word	0x00427d2f
  427f28:	00427d2f 	.word	0x00427d2f
  427f2c:	00428273 	.word	0x00428273
                        iWidth -= ui32strlen;
  427f30:	1a3f      	subs	r7, r7, r0
    if ( i32NumChars <= 0 )
  427f32:	2f00      	cmp	r7, #0
  427f34:	f300 810f 	bgt.w	428156 <am_util_stdio_vsprintf+0x602>
                        pcBuf += pcBuf ? iWidth : 0;
  427f38:	2c00      	cmp	r4, #0
  427f3a:	f040 80e5 	bne.w	428108 <am_util_stdio_vsprintf+0x5b4>
  427f3e:	4653      	mov	r3, sl
                        iWidth = 0;
  427f40:	2700      	movs	r7, #0
                while (*pcStr != 0x0)
  427f42:	461a      	mov	r2, r3
  427f44:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  427f48:	2c00      	cmp	r4, #0
  427f4a:	f43f aee0 	beq.w	427d0e <am_util_stdio_vsprintf+0x1ba>
  427f4e:	461a      	mov	r2, r3
  427f50:	f813 4f01 	ldrb.w	r4, [r3, #1]!
  427f54:	2c00      	cmp	r4, #0
  427f56:	d1f4      	bne.n	427f42 <am_util_stdio_vsprintf+0x3ee>
  427f58:	e6d9      	b.n	427d0e <am_util_stdio_vsprintf+0x1ba>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
  427f5a:	f85a 0b04 	ldr.w	r0, [sl], #4
  427f5e:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
  427f60:	2900      	cmp	r1, #0
  427f62:	db3f      	blt.n	427fe4 <am_util_stdio_vsprintf+0x490>
                    ui64Val = i64Val;
  427f64:	4602      	mov	r2, r0
  427f66:	460f      	mov	r7, r1
                if ( iWidth )
  427f68:	2b00      	cmp	r3, #0
  427f6a:	f040 819e 	bne.w	4282aa <am_util_stdio_vsprintf+0x756>
                iVal = uint64_to_str(ui64Val, pcBuf);
  427f6e:	4622      	mov	r2, r4
  427f70:	f7ff fd64 	bl	427a3c <uint64_to_str>
                if ( pcBuf )
  427f74:	b104      	cbz	r4, 427f78 <am_util_stdio_vsprintf+0x424>
                    pcBuf += iVal;
  427f76:	4404      	add	r4, r0
                ui32CharCnt += iVal;
  427f78:	4483      	add	fp, r0
                break;
  427f7a:	e6dd      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
                        iWidth -= ui32strlen;
  427f7c:	1a18      	subs	r0, r3, r0
    if ( i32NumChars <= 0 )
  427f7e:	2800      	cmp	r0, #0
                        iWidth -= ui32strlen;
  427f80:	4607      	mov	r7, r0
    if ( i32NumChars <= 0 )
  427f82:	f340 813f 	ble.w	428204 <am_util_stdio_vsprintf+0x6b0>
        if ( pcBuf )
  427f86:	b13c      	cbz	r4, 427f98 <am_util_stdio_vsprintf+0x444>
  427f88:	f047 e001 	dls	lr, r7
  427f8c:	4622      	mov	r2, r4
  427f8e:	9e01      	ldr	r6, [sp, #4]
            *pcBuf++ = cPadChar;
  427f90:	7016      	strb	r6, [r2, #0]
  427f92:	3201      	adds	r2, #1
    while ( i32NumChars-- )
  427f94:	f00f c005 	le	lr, 427f90 <am_util_stdio_vsprintf+0x43c>
                        ui32CharCnt += iWidth;
  427f98:	4483      	add	fp, r0
                        pcBuf += pcBuf ? iWidth : 0;
  427f9a:	4420      	add	r0, r4
  427f9c:	2c00      	cmp	r4, #0
  427f9e:	bf18      	it	ne
  427fa0:	4604      	movne	r4, r0
                pcStr = va_arg(pArgs, char *);
  427fa2:	468a      	mov	sl, r1
  427fa4:	e6c8      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
  427fa6:	bf00      	nop
  427fa8:	2004e4e4 	.word	0x2004e4e4
  427fac:	003f2e3f 	.word	0x003f2e3f
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
  427fb0:	2200      	movs	r2, #0
  427fb2:	f85a 7b04 	ldr.w	r7, [sl], #4
  427fb6:	9202      	str	r2, [sp, #8]
                if ( iWidth )
  427fb8:	2b00      	cmp	r3, #0
  427fba:	d138      	bne.n	42802e <am_util_stdio_vsprintf+0x4da>
                iVal = uint64_to_str(ui64Val, pcBuf);
  427fbc:	4638      	mov	r0, r7
  427fbe:	4622      	mov	r2, r4
  427fc0:	9902      	ldr	r1, [sp, #8]
  427fc2:	f7ff fd3b 	bl	427a3c <uint64_to_str>
                if ( pcBuf )
  427fc6:	2c00      	cmp	r4, #0
  427fc8:	d1d5      	bne.n	427f76 <am_util_stdio_vsprintf+0x422>
                    pcBuf += iVal;
  427fca:	2400      	movs	r4, #0
                ui32CharCnt += iVal;
  427fcc:	4483      	add	fp, r0
                break;
  427fce:	e6b3      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
  427fd0:	f10a 0a07 	add.w	sl, sl, #7
  427fd4:	f02a 0a07 	bic.w	sl, sl, #7
  427fd8:	f8da 1004 	ldr.w	r1, [sl, #4]
  427fdc:	f85a 0b08 	ldr.w	r0, [sl], #8
                if ( i64Val < 0 )
  427fe0:	2900      	cmp	r1, #0
  427fe2:	dabf      	bge.n	427f64 <am_util_stdio_vsprintf+0x410>
                    ui64Val = -i64Val;          // Get absolute value
  427fe4:	4242      	negs	r2, r0
  427fe6:	eb61 0741 	sbc.w	r7, r1, r1, lsl #1
                if ( iWidth )
  427fea:	2b00      	cmp	r3, #0
  427fec:	f040 81c1 	bne.w	428372 <am_util_stdio_vsprintf+0x81e>
                iVal = uint64_to_str(ui64Val, pcBuf);
  427ff0:	4610      	mov	r0, r2
  427ff2:	4639      	mov	r1, r7
                    ++ui32CharCnt;
  427ff4:	f10b 0b01 	add.w	fp, fp, #1
                        if ( pcBuf )
  427ff8:	2c00      	cmp	r4, #0
  427ffa:	f000 81ac 	beq.w	428356 <am_util_stdio_vsprintf+0x802>
                            *pcBuf++ = '-';
  427ffe:	232d      	movs	r3, #45	@ 0x2d
  428000:	f804 3b01 	strb.w	r3, [r4], #1
                iVal = uint64_to_str(ui64Val, pcBuf);
  428004:	4622      	mov	r2, r4
  428006:	f7ff fd19 	bl	427a3c <uint64_to_str>
                    pcBuf += iVal;
  42800a:	4404      	add	r4, r0
  42800c:	e7b4      	b.n	427f78 <am_util_stdio_vsprintf+0x424>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
  42800e:	f10a 0a07 	add.w	sl, sl, #7
  428012:	f02a 0a07 	bic.w	sl, sl, #7
  428016:	f8da 2004 	ldr.w	r2, [sl, #4]
  42801a:	f85a 7b08 	ldr.w	r7, [sl], #8
  42801e:	9202      	str	r2, [sp, #8]
  428020:	e7ca      	b.n	427fb8 <am_util_stdio_vsprintf+0x464>
        uCnt++;
  428022:	2101      	movs	r1, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  428024:	78aa      	ldrb	r2, [r5, #2]
        uCnt++;
  428026:	9104      	str	r1, [sp, #16]
        pcStr++;
  428028:	3502      	adds	r5, #2
        bNeg = true;
  42802a:	9102      	str	r1, [sp, #8]
  42802c:	e6ea      	b.n	427e04 <am_util_stdio_vsprintf+0x2b0>
    while ( ui64Val )
  42802e:	9902      	ldr	r1, [sp, #8]
  428030:	ea57 0301 	orrs.w	r3, r7, r1
  428034:	f000 81ef 	beq.w	428416 <am_util_stdio_vsprintf+0x8c2>
    int iNDigits = ui64Val ? 0 : 1;
  428038:	2600      	movs	r6, #0
  42803a:	e9cd 8904 	strd	r8, r9, [sp, #16]
    while ( ui64Val )
  42803e:	4638      	mov	r0, r7
    int iNDigits = ui64Val ? 0 : 1;
  428040:	46b1      	mov	r9, r6
  428042:	4626      	mov	r6, r4
  428044:	4664      	mov	r4, ip
        ui64Val = divu64_10(ui64Val);
  428046:	f7ff fca5 	bl	427994 <divu64_10>
    while ( ui64Val )
  42804a:	ea50 0201 	orrs.w	r2, r0, r1
        ++iNDigits;
  42804e:	f109 0901 	add.w	r9, r9, #1
    while ( ui64Val )
  428052:	d1f8      	bne.n	428046 <am_util_stdio_vsprintf+0x4f2>
  428054:	46a4      	mov	ip, r4
  428056:	4634      	mov	r4, r6
  428058:	464e      	mov	r6, r9
  42805a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
                    iWidth -= ndigits_in_u64(ui64Val);
  42805e:	ebac 0306 	sub.w	r3, ip, r6
    if ( i32NumChars <= 0 )
  428062:	2b00      	cmp	r3, #0
  428064:	f340 81a2 	ble.w	4283ac <am_util_stdio_vsprintf+0x858>
        if ( pcBuf )
  428068:	b13c      	cbz	r4, 42807a <am_util_stdio_vsprintf+0x526>
  42806a:	4621      	mov	r1, r4
  42806c:	f043 e001 	dls	lr, r3
  428070:	9801      	ldr	r0, [sp, #4]
            *pcBuf++ = cPadChar;
  428072:	7008      	strb	r0, [r1, #0]
  428074:	3101      	adds	r1, #1
    while ( i32NumChars-- )
  428076:	f00f c005 	le	lr, 428072 <am_util_stdio_vsprintf+0x51e>
                    ui32CharCnt += iWidth;
  42807a:	449b      	add	fp, r3
                    pcBuf += pcBuf ? iWidth : 0;
  42807c:	2c00      	cmp	r4, #0
  42807e:	f000 818f 	beq.w	4283a0 <am_util_stdio_vsprintf+0x84c>
  428082:	441c      	add	r4, r3
                iVal = uint64_to_str(ui64Val, pcBuf);
  428084:	4622      	mov	r2, r4
  428086:	4638      	mov	r0, r7
  428088:	9902      	ldr	r1, [sp, #8]
  42808a:	f7ff fcd7 	bl	427a3c <uint64_to_str>
                    pcBuf += iVal;
  42808e:	4404      	add	r4, r0
  428090:	e772      	b.n	427f78 <am_util_stdio_vsprintf+0x424>
    else if (iExp2 >= 0)
  428092:	2900      	cmp	r1, #0
  428094:	db61      	blt.n	42815a <am_util_stdio_vsprintf+0x606>
    if (unFloatValue.I32 < 0)
  428096:	2b00      	cmp	r3, #0
                    *pcBuf++ = '\r';
  428098:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
  42809a:	da02      	bge.n	4280a2 <am_util_stdio_vsprintf+0x54e>
        *pcBuf++ = '-';
  42809c:	232d      	movs	r3, #45	@ 0x2d
  42809e:	f802 3b01 	strb.w	r3, [r2], #1
        i32IntPart = i32Significand >> (23 - iExp2);
  4280a2:	f1c1 0117 	rsb	r1, r1, #23
  4280a6:	fa47 f001 	asr.w	r0, r7, r1
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
  4280aa:	f1ac 0c7e 	sub.w	ip, ip, #126	@ 0x7e
            uint64_to_str(i32IntPart, pcBuf);
  4280ae:	17c1      	asrs	r1, r0, #31
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
  4280b0:	fa07 f70c 	lsl.w	r7, r7, ip
            uint64_to_str(i32IntPart, pcBuf);
  4280b4:	f7ff fcc2 	bl	427a3c <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
  4280b8:	7813      	ldrb	r3, [r2, #0]
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
  4280ba:	f027 477f 	bic.w	r7, r7, #4278190080	@ 0xff000000
        while (*pcBuf)    // Get to end of new string
  4280be:	2b00      	cmp	r3, #0
  4280c0:	f47f ae72 	bne.w	427da8 <am_util_stdio_vsprintf+0x254>
  4280c4:	e674      	b.n	427db0 <am_util_stdio_vsprintf+0x25c>
  4280c6:	4bc0      	ldr	r3, [pc, #768]	@ (4283c8 <am_util_stdio_vsprintf+0x874>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
  4280c8:	2003      	movs	r0, #3
  4280ca:	6023      	str	r3, [r4, #0]
                    ui32CharCnt += iVal;
  4280cc:	4483      	add	fp, r0
                    pcBuf += iVal;
  4280ce:	4404      	add	r4, r0
  4280d0:	e632      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
                if ( iWidth > 0 )
  4280d2:	2f00      	cmp	r7, #0
  4280d4:	f340 8087 	ble.w	4281e6 <am_util_stdio_vsprintf+0x692>
        return ui32RetVal;
  4280d8:	4650      	mov	r0, sl
    while ( i32NumChars-- )
  4280da:	3f01      	subs	r7, #1
        if ( pcBuf )
  4280dc:	b14c      	cbz	r4, 4280f2 <am_util_stdio_vsprintf+0x59e>
  4280de:	f107 0e01 	add.w	lr, r7, #1
  4280e2:	f04e e001 	dls	lr, lr
  4280e6:	4622      	mov	r2, r4
  4280e8:	9e01      	ldr	r6, [sp, #4]
            *pcBuf++ = cPadChar;
  4280ea:	7016      	strb	r6, [r2, #0]
  4280ec:	3201      	adds	r2, #1
    while ( i32NumChars-- )
  4280ee:	f00f c005 	le	lr, 4280ea <am_util_stdio_vsprintf+0x596>
                        ui32CharCnt += iWidth;
  4280f2:	1c7b      	adds	r3, r7, #1
                while (*pcStr != 0x0)
  4280f4:	f89a 6000 	ldrb.w	r6, [sl]
                        ui32CharCnt += iWidth;
  4280f8:	449b      	add	fp, r3
                        pcBuf += pcBuf ? iWidth : 0;
  4280fa:	2c00      	cmp	r4, #0
  4280fc:	f000 8158 	beq.w	4283b0 <am_util_stdio_vsprintf+0x85c>
  428100:	441c      	add	r4, r3
                while (*pcStr != 0x0)
  428102:	2e00      	cmp	r6, #0
  428104:	f43f ae0d 	beq.w	427d22 <am_util_stdio_vsprintf+0x1ce>
  428108:	4653      	mov	r3, sl
                        iWidth = 0;
  42810a:	2700      	movs	r7, #0
  42810c:	e5f8      	b.n	427d00 <am_util_stdio_vsprintf+0x1ac>
        switch ( *pcFmt )
  42810e:	2000      	movs	r0, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
  428110:	f04f 0900 	mov.w	r9, #0
  428114:	f85a 8b04 	ldr.w	r8, [sl], #4
                if ( iWidth )
  428118:	2b00      	cmp	r3, #0
  42811a:	f040 8081 	bne.w	428220 <am_util_stdio_vsprintf+0x6cc>
    if ( ui64Val == 0 )
  42811e:	ea58 0309 	orrs.w	r3, r8, r9
  428122:	f040 80a8 	bne.w	428276 <am_util_stdio_vsprintf+0x722>
  428126:	2330      	movs	r3, #48	@ 0x30
  428128:	2201      	movs	r2, #1
  42812a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    if (pcBuf)
  42812e:	b174      	cbz	r4, 42814e <am_util_stdio_vsprintf+0x5fa>
  428130:	3701      	adds	r7, #1
  428132:	f047 e001 	dls	lr, r7
  428136:	ab09      	add	r3, sp, #36	@ 0x24
  428138:	443b      	add	r3, r7
  42813a:	1e61      	subs	r1, r4, #1
            *pcBuf++ = tbuf[ix];
  42813c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  428140:	f801 0f01 	strb.w	r0, [r1, #1]!
        while (ix--)
  428144:	f00f c007 	le	lr, 42813c <am_util_stdio_vsprintf+0x5e8>
        *pcBuf = 0;
  428148:	2300      	movs	r3, #0
  42814a:	55e3      	strb	r3, [r4, r7]
                    pcBuf += iVal;
  42814c:	4414      	add	r4, r2
                ui32CharCnt += iVal;
  42814e:	4493      	add	fp, r2
                break;
  428150:	e5f2      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
        switch ( *pcFmt )
  428152:	2001      	movs	r0, #1
  428154:	e7dc      	b.n	428110 <am_util_stdio_vsprintf+0x5bc>
    while ( i32NumChars-- )
  428156:	3f01      	subs	r7, #1
  428158:	e7c0      	b.n	4280dc <am_util_stdio_vsprintf+0x588>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
  42815a:	43c9      	mvns	r1, r1
    if (unFloatValue.I32 < 0)
  42815c:	2b00      	cmp	r3, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
  42815e:	fa47 f701 	asr.w	r7, r7, r1
    if (unFloatValue.I32 < 0)
  428162:	f2c0 8142 	blt.w	4283ea <am_util_stdio_vsprintf+0x896>
        *pcBuf++ = '0';
  428166:	2330      	movs	r3, #48	@ 0x30
  428168:	4622      	mov	r2, r4
  42816a:	f802 3b02 	strb.w	r3, [r2], #2
    *pcBuf++ = '.';
  42816e:	232e      	movs	r3, #46	@ 0x2e
  428170:	2111      	movs	r1, #17
  428172:	2002      	movs	r0, #2
  428174:	7063      	strb	r3, [r4, #1]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
  428176:	42b1      	cmp	r1, r6
  428178:	bfa8      	it	ge
  42817a:	4631      	movge	r1, r6
        for (jx = 0; jx < iMax; jx++)
  42817c:	2900      	cmp	r1, #0
  42817e:	f340 814c 	ble.w	42841a <am_util_stdio_vsprintf+0x8c6>
  428182:	f041 e001 	dls	lr, r1
  428186:	4411      	add	r1, r2
            i32FracPart *= 10;
  428188:	eb07 0787 	add.w	r7, r7, r7, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
  42818c:	15fb      	asrs	r3, r7, #23
  42818e:	3330      	adds	r3, #48	@ 0x30
            i32FracPart *= 10;
  428190:	007f      	lsls	r7, r7, #1
            *pcBuf++ = (i32FracPart >> 24) + '0';
  428192:	f802 3b01 	strb.w	r3, [r2], #1
            i32FracPart &= 0x00FFFFFF;
  428196:	f027 477f 	bic.w	r7, r7, #4278190080	@ 0xff000000
        for (jx = 0; jx < iMax; jx++)
  42819a:	f00f c80b 	le	lr, 428188 <am_util_stdio_vsprintf+0x634>
    return (pcBuf - pcBufInitial);
  42819e:	1b08      	subs	r0, r1, r4
        if ( ((i32FracPart * 10) >> 24) >= 5 )
  4281a0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  4281a4:	f347 53c7 	sbfx	r3, r7, #23, #8
  4281a8:	2b04      	cmp	r3, #4
  4281aa:	f77f ae0a 	ble.w	427dc2 <am_util_stdio_vsprintf+0x26e>
            pcBuftmp = pcBuf - 1;
  4281ae:	1e4b      	subs	r3, r1, #1
            while ( pcBuftmp >= pcBufInitial )
  4281b0:	429c      	cmp	r4, r3
  4281b2:	f63f ae06 	bhi.w	427dc2 <am_util_stdio_vsprintf+0x26e>
                    *pcBuftmp = '0';
  4281b6:	1b1a      	subs	r2, r3, r4
  4281b8:	f04f 0c30 	mov.w	ip, #48	@ 0x30
  4281bc:	3201      	adds	r2, #1
  4281be:	e004      	b.n	4281ca <am_util_stdio_vsprintf+0x676>
  4281c0:	f883 c001 	strb.w	ip, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
  4281c4:	3a01      	subs	r2, #1
  4281c6:	f43f adfc 	beq.w	427dc2 <am_util_stdio_vsprintf+0x26e>
                    *pcBuftmp = '0';
  4281ca:	461f      	mov	r7, r3
                if ( *pcBuftmp == '.' )
  4281cc:	f813 6901 	ldrb.w	r6, [r3], #-1
  4281d0:	2e2e      	cmp	r6, #46	@ 0x2e
  4281d2:	d0f7      	beq.n	4281c4 <am_util_stdio_vsprintf+0x670>
                else if ( *pcBuftmp == '9' )
  4281d4:	2e39      	cmp	r6, #57	@ 0x39
  4281d6:	d0f3      	beq.n	4281c0 <am_util_stdio_vsprintf+0x66c>
                    *pcBuftmp += 1;
  4281d8:	3601      	adds	r6, #1
  4281da:	703e      	strb	r6, [r7, #0]
                    break;
  4281dc:	e5f1      	b.n	427dc2 <am_util_stdio_vsprintf+0x26e>
        *pcBuf++ = '-';
  4281de:	232d      	movs	r3, #45	@ 0x2d
  4281e0:	f802 3b01 	strb.w	r3, [r2], #1
    if (i32IntPart == 0)
  4281e4:	e5d4      	b.n	427d90 <am_util_stdio_vsprintf+0x23c>
    while ( *pcBuf++ )
  4281e6:	f89a 6000 	ldrb.w	r6, [sl]
                while (*pcStr != 0x0)
  4281ea:	4650      	mov	r0, sl
  4281ec:	2e00      	cmp	r6, #0
  4281ee:	f47f ad83 	bne.w	427cf8 <am_util_stdio_vsprintf+0x1a4>
                if ( iWidth )
  4281f2:	2f00      	cmp	r7, #0
  4281f4:	f43f ad95 	beq.w	427d22 <am_util_stdio_vsprintf+0x1ce>
                    iWidth = -iWidth;
  4281f8:	427f      	negs	r7, r7
                    if ( ui32strlen < iWidth )
  4281fa:	4638      	mov	r0, r7
        if ( pcBuf )
  4281fc:	2c00      	cmp	r4, #0
  4281fe:	f47f aec3 	bne.w	427f88 <am_util_stdio_vsprintf+0x434>
  428202:	e6c9      	b.n	427f98 <am_util_stdio_vsprintf+0x444>
  428204:	2000      	movs	r0, #0
  428206:	e6c8      	b.n	427f9a <am_util_stdio_vsprintf+0x446>
        switch ( *pcFmt )
  428208:	4667      	mov	r7, ip
  42820a:	e55d      	b.n	427cc8 <am_util_stdio_vsprintf+0x174>
  42820c:	2000      	movs	r0, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
  42820e:	f10a 0a07 	add.w	sl, sl, #7
  428212:	f02a 0a07 	bic.w	sl, sl, #7
  428216:	e8fa 8902 	ldrd	r8, r9, [sl], #8
                if ( iWidth )
  42821a:	2b00      	cmp	r3, #0
  42821c:	f43f af7f 	beq.w	42811e <am_util_stdio_vsprintf+0x5ca>
    while ( ui64Val )
  428220:	ea58 0309 	orrs.w	r3, r8, r9
  428224:	f000 80c9 	beq.w	4283ba <am_util_stdio_vsprintf+0x866>
    int iDigits = ui64Val ? 0 : 1;
  428228:	2100      	movs	r1, #0
    while ( ui64Val )
  42822a:	4642      	mov	r2, r8
  42822c:	464b      	mov	r3, r9
        ui64Val >>= 4;
  42822e:	ea52 131f 	orrs.w	r3, r2, pc, lsr #4
    while ( ui64Val )
  428232:	ea52 0603 	orrs.w	r6, r2, r3
        ++iDigits;
  428236:	f101 0101 	add.w	r1, r1, #1
    while ( ui64Val )
  42823a:	d1f8      	bne.n	42822e <am_util_stdio_vsprintf+0x6da>
                    iWidth -= ndigits_in_hex(ui64Val);
  42823c:	ebac 0101 	sub.w	r1, ip, r1
    if ( i32NumChars <= 0 )
  428240:	2900      	cmp	r1, #0
  428242:	f340 808d 	ble.w	428360 <am_util_stdio_vsprintf+0x80c>
        if ( pcBuf )
  428246:	b13c      	cbz	r4, 428258 <am_util_stdio_vsprintf+0x704>
  428248:	4622      	mov	r2, r4
  42824a:	f041 e001 	dls	lr, r1
  42824e:	9e01      	ldr	r6, [sp, #4]
            *pcBuf++ = cPadChar;
  428250:	7016      	strb	r6, [r2, #0]
  428252:	3201      	adds	r2, #1
    while ( i32NumChars-- )
  428254:	f00f c005 	le	lr, 428250 <am_util_stdio_vsprintf+0x6fc>
                    ui32CharCnt += iWidth;
  428258:	448b      	add	fp, r1
                    pcBuf += pcBuf ? iWidth : 0;
  42825a:	2c00      	cmp	r4, #0
  42825c:	d073      	beq.n	428346 <am_util_stdio_vsprintf+0x7f2>
    if ( ui64Val == 0 )
  42825e:	ea58 0309 	orrs.w	r3, r8, r9
                    pcBuf += pcBuf ? iWidth : 0;
  428262:	440c      	add	r4, r1
    if ( ui64Val == 0 )
  428264:	d107      	bne.n	428276 <am_util_stdio_vsprintf+0x722>
  428266:	2330      	movs	r3, #48	@ 0x30
  428268:	2700      	movs	r7, #0
  42826a:	2201      	movs	r2, #1
  42826c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    if (pcBuf)
  428270:	e75e      	b.n	428130 <am_util_stdio_vsprintf+0x5dc>
        switch ( *pcFmt )
  428272:	2001      	movs	r0, #1
  428274:	e7cb      	b.n	42820e <am_util_stdio_vsprintf+0x6ba>
  428276:	2800      	cmp	r0, #0
  428278:	bf14      	ite	ne
  42827a:	2627      	movne	r6, #39	@ 0x27
  42827c:	2607      	moveq	r6, #7
    int iNumDig, ix = 0;
  42827e:	2700      	movs	r7, #0
  428280:	a909      	add	r1, sp, #36	@ 0x24
  428282:	e000      	b.n	428286 <am_util_stdio_vsprintf+0x732>
        tbuf[ix++] = cCh + '0';
  428284:	4617      	mov	r7, r2
        cCh = ui64Val & 0xf;
  428286:	f008 030f 	and.w	r3, r8, #15
        if ( cCh > 9 )
  42828a:	2b09      	cmp	r3, #9
            cCh += bLower ? 0x27 : 0x7;
  42828c:	eb03 0006 	add.w	r0, r3, r6
  428290:	bf88      	it	hi
  428292:	4603      	movhi	r3, r0
        ui64Val >>= 4;
  428294:	ea58 191f 	orrs.w	r9, r8, pc, lsr #4
        tbuf[ix++] = cCh + '0';
  428298:	3330      	adds	r3, #48	@ 0x30
  42829a:	f801 3b01 	strb.w	r3, [r1], #1
    while ( ui64Val )
  42829e:	ea58 0309 	orrs.w	r3, r8, r9
        tbuf[ix++] = cCh + '0';
  4282a2:	f107 0201 	add.w	r2, r7, #1
    while ( ui64Val )
  4282a6:	d1ed      	bne.n	428284 <am_util_stdio_vsprintf+0x730>
  4282a8:	e741      	b.n	42812e <am_util_stdio_vsprintf+0x5da>
    while ( ui64Val )
  4282aa:	ea50 0107 	orrs.w	r1, r0, r7
                    bNeg = false;
  4282ae:	f04f 0300 	mov.w	r3, #0
                    iWidth -= ndigits_in_i64(ui64Val);
  4282b2:	bf08      	it	eq
  4282b4:	f10c 36ff 	addeq.w	r6, ip, #4294967295	@ 0xffffffff
    while ( ui64Val )
  4282b8:	d025      	beq.n	428306 <am_util_stdio_vsprintf+0x7b2>
    int iNDigits = ui64Val ? 0 : 1;
  4282ba:	2600      	movs	r6, #0
  4282bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
  4282c0:	4699      	mov	r9, r3
  4282c2:	4623      	mov	r3, r4
                    bNeg = false;
  4282c4:	4639      	mov	r1, r7
    int iNDigits = ui64Val ? 0 : 1;
  4282c6:	4634      	mov	r4, r6
  4282c8:	9706      	str	r7, [sp, #24]
                    bNeg = false;
  4282ca:	4610      	mov	r0, r2
    int iNDigits = ui64Val ? 0 : 1;
  4282cc:	4617      	mov	r7, r2
  4282ce:	461e      	mov	r6, r3
  4282d0:	f8cd c010 	str.w	ip, [sp, #16]
        ui64Val = divu64_10(ui64Val);
  4282d4:	f7ff fb5e 	bl	427994 <divu64_10>
    while ( ui64Val )
  4282d8:	ea50 0201 	orrs.w	r2, r0, r1
        ++iNDigits;
  4282dc:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
  4282e0:	d1f8      	bne.n	4282d4 <am_util_stdio_vsprintf+0x780>
                    iWidth -= ndigits_in_i64(ui64Val);
  4282e2:	4631      	mov	r1, r6
  4282e4:	464b      	mov	r3, r9
  4282e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  4282ea:	4626      	mov	r6, r4
  4282ec:	f8dd c010 	ldr.w	ip, [sp, #16]
  4282f0:	463a      	mov	r2, r7
  4282f2:	460c      	mov	r4, r1
  4282f4:	9f06      	ldr	r7, [sp, #24]
  4282f6:	ebac 0606 	sub.w	r6, ip, r6
                    if ( bNeg )
  4282fa:	b123      	cbz	r3, 428306 <am_util_stdio_vsprintf+0x7b2>
                        if ( ui8PadChar == '0' )
  4282fc:	9801      	ldr	r0, [sp, #4]
                        --iWidth;
  4282fe:	1e71      	subs	r1, r6, #1
                        if ( ui8PadChar == '0' )
  428300:	2830      	cmp	r0, #48	@ 0x30
  428302:	d065      	beq.n	4283d0 <am_util_stdio_vsprintf+0x87c>
                        --iWidth;
  428304:	460e      	mov	r6, r1
    if ( i32NumChars <= 0 )
  428306:	2e00      	cmp	r6, #0
  428308:	dd59      	ble.n	4283be <am_util_stdio_vsprintf+0x86a>
    while ( i32NumChars-- )
  42830a:	f106 3cff 	add.w	ip, r6, #4294967295	@ 0xffffffff
        if ( pcBuf )
  42830e:	b154      	cbz	r4, 428326 <am_util_stdio_vsprintf+0x7d2>
  428310:	4666      	mov	r6, ip
  428312:	4620      	mov	r0, r4
  428314:	f106 0e01 	add.w	lr, r6, #1
  428318:	f04e e001 	dls	lr, lr
  42831c:	9e01      	ldr	r6, [sp, #4]
            *pcBuf++ = cPadChar;
  42831e:	7006      	strb	r6, [r0, #0]
  428320:	3001      	adds	r0, #1
    while ( i32NumChars-- )
  428322:	f00f c005 	le	lr, 42831e <am_util_stdio_vsprintf+0x7ca>
                    ui32CharCnt += iWidth;
  428326:	f10c 0c01 	add.w	ip, ip, #1
  42832a:	44e3      	add	fp, ip
                    pcBuf += pcBuf ? iWidth : 0;
  42832c:	b35c      	cbz	r4, 428386 <am_util_stdio_vsprintf+0x832>
  42832e:	4464      	add	r4, ip
                    if ( bNeg  &&  (ui8PadChar == ' ') )
  428330:	b113      	cbz	r3, 428338 <am_util_stdio_vsprintf+0x7e4>
  428332:	9b01      	ldr	r3, [sp, #4]
  428334:	2b20      	cmp	r3, #32
  428336:	d062      	beq.n	4283fe <am_util_stdio_vsprintf+0x8aa>
                iVal = uint64_to_str(ui64Val, pcBuf);
  428338:	4610      	mov	r0, r2
  42833a:	4639      	mov	r1, r7
  42833c:	4622      	mov	r2, r4
  42833e:	f7ff fb7d 	bl	427a3c <uint64_to_str>
                    pcBuf += iVal;
  428342:	4404      	add	r4, r0
  428344:	e618      	b.n	427f78 <am_util_stdio_vsprintf+0x424>
    if ( ui64Val == 0 )
  428346:	ea58 0309 	orrs.w	r3, r8, r9
  42834a:	d194      	bne.n	428276 <am_util_stdio_vsprintf+0x722>
  42834c:	2201      	movs	r2, #1
                ui32CharCnt += iVal;
  42834e:	4493      	add	fp, r2
                break;
  428350:	e4f2      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
                iVal = uint64_to_str(ui64Val, pcBuf);
  428352:	4610      	mov	r0, r2
  428354:	4639      	mov	r1, r7
  428356:	4622      	mov	r2, r4
  428358:	f7ff fb70 	bl	427a3c <uint64_to_str>
                ui32CharCnt += iVal;
  42835c:	4483      	add	fp, r0
                break;
  42835e:	e4eb      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
  428360:	2100      	movs	r1, #0
  428362:	e77a      	b.n	42825a <am_util_stdio_vsprintf+0x706>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
  428364:	2100      	movs	r1, #0
  428366:	e56d      	b.n	427e44 <am_util_stdio_vsprintf+0x2f0>
    *pcBuf++ = '.';
  428368:	3201      	adds	r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
  42836a:	1b10      	subs	r0, r2, r4
  42836c:	f1c0 0113 	rsb	r1, r0, #19
  428370:	e701      	b.n	428176 <am_util_stdio_vsprintf+0x622>
                    bNeg = true;
  428372:	2301      	movs	r3, #1
  428374:	e7a1      	b.n	4282ba <am_util_stdio_vsprintf+0x766>
                if ( iWidth > 0 )
  428376:	2f00      	cmp	r7, #0
    uint32_t ui32RetVal = 0;
  428378:	4630      	mov	r0, r6
                if ( iWidth > 0 )
  42837a:	f73f aeec 	bgt.w	428156 <am_util_stdio_vsprintf+0x602>
                if ( iWidth )
  42837e:	f47f af3b 	bne.w	4281f8 <am_util_stdio_vsprintf+0x6a4>
                pcStr = va_arg(pArgs, char *);
  428382:	468a      	mov	sl, r1
  428384:	e4d8      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
  428386:	2b00      	cmp	r3, #0
  428388:	d0e3      	beq.n	428352 <am_util_stdio_vsprintf+0x7fe>
  42838a:	9b01      	ldr	r3, [sp, #4]
  42838c:	2b20      	cmp	r3, #32
  42838e:	d046      	beq.n	42841e <am_util_stdio_vsprintf+0x8ca>
                iVal = uint64_to_str(ui64Val, pcBuf);
  428390:	4610      	mov	r0, r2
  428392:	4639      	mov	r1, r7
  428394:	2200      	movs	r2, #0
  428396:	f7ff fb51 	bl	427a3c <uint64_to_str>
                ui32CharCnt += iVal;
  42839a:	4614      	mov	r4, r2
  42839c:	4483      	add	fp, r0
                break;
  42839e:	e4cb      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
                iVal = uint64_to_str(ui64Val, pcBuf);
  4283a0:	4622      	mov	r2, r4
  4283a2:	4638      	mov	r0, r7
  4283a4:	9902      	ldr	r1, [sp, #8]
  4283a6:	f7ff fb49 	bl	427a3c <uint64_to_str>
                if ( pcBuf )
  4283aa:	e60e      	b.n	427fca <am_util_stdio_vsprintf+0x476>
  4283ac:	2300      	movs	r3, #0
  4283ae:	e665      	b.n	42807c <am_util_stdio_vsprintf+0x528>
                while (*pcStr != 0x0)
  4283b0:	2e00      	cmp	r6, #0
  4283b2:	f47f adc4 	bne.w	427f3e <am_util_stdio_vsprintf+0x3ea>
                pcStr = va_arg(pArgs, char *);
  4283b6:	468a      	mov	sl, r1
  4283b8:	e4be      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
    int iDigits = ui64Val ? 0 : 1;
  4283ba:	2101      	movs	r1, #1
  4283bc:	e73e      	b.n	42823c <am_util_stdio_vsprintf+0x6e8>
  4283be:	f04f 0c00 	mov.w	ip, #0
  4283c2:	e7b3      	b.n	42832c <am_util_stdio_vsprintf+0x7d8>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
  4283c4:	4b01      	ldr	r3, [pc, #4]	@ (4283cc <am_util_stdio_vsprintf+0x878>)
  4283c6:	e67f      	b.n	4280c8 <am_util_stdio_vsprintf+0x574>
  4283c8:	00302e30 	.word	0x00302e30
  4283cc:	00232e23 	.word	0x00232e23
                    ++ui32CharCnt;
  4283d0:	f10b 0b01 	add.w	fp, fp, #1
                            if ( pcBuf )
  4283d4:	b37c      	cbz	r4, 428436 <am_util_stdio_vsprintf+0x8e2>
                                *pcBuf++ = '-';
  4283d6:	4620      	mov	r0, r4
  4283d8:	242d      	movs	r4, #45	@ 0x2d
    if ( i32NumChars <= 0 )
  4283da:	2900      	cmp	r1, #0
                                *pcBuf++ = '-';
  4283dc:	f800 4b01 	strb.w	r4, [r0], #1
    if ( i32NumChars <= 0 )
  4283e0:	dd2e      	ble.n	428440 <am_util_stdio_vsprintf+0x8ec>
    while ( i32NumChars-- )
  4283e2:	3e02      	subs	r6, #2
                                *pcBuf++ = '-';
  4283e4:	4604      	mov	r4, r0
    while ( i32NumChars-- )
  4283e6:	46b4      	mov	ip, r6
  4283e8:	e794      	b.n	428314 <am_util_stdio_vsprintf+0x7c0>
        *pcBuf++ = '-';
  4283ea:	232d      	movs	r3, #45	@ 0x2d
  4283ec:	7023      	strb	r3, [r4, #0]
        *pcBuf++ = '0';
  4283ee:	2330      	movs	r3, #48	@ 0x30
    *pcBuf++ = '.';
  4283f0:	2003      	movs	r0, #3
        *pcBuf++ = '0';
  4283f2:	7063      	strb	r3, [r4, #1]
    *pcBuf++ = '.';
  4283f4:	232e      	movs	r3, #46	@ 0x2e
  4283f6:	2110      	movs	r1, #16
  4283f8:	70a3      	strb	r3, [r4, #2]
  4283fa:	1822      	adds	r2, r4, r0
    if (i32FracPart == 0)
  4283fc:	e6bb      	b.n	428176 <am_util_stdio_vsprintf+0x622>
                            *pcBuf++ = '-';
  4283fe:	232d      	movs	r3, #45	@ 0x2d
  428400:	f804 3b01 	strb.w	r3, [r4], #1
                iVal = uint64_to_str(ui64Val, pcBuf);
  428404:	4610      	mov	r0, r2
  428406:	4639      	mov	r1, r7
  428408:	4622      	mov	r2, r4
  42840a:	f7ff fb17 	bl	427a3c <uint64_to_str>
                        ++ui32CharCnt;
  42840e:	f10b 0b01 	add.w	fp, fp, #1
                    pcBuf += iVal;
  428412:	4404      	add	r4, r0
  428414:	e5b0      	b.n	427f78 <am_util_stdio_vsprintf+0x424>
    int iNDigits = ui64Val ? 0 : 1;
  428416:	2601      	movs	r6, #1
  428418:	e621      	b.n	42805e <am_util_stdio_vsprintf+0x50a>
    *pcBuf++ = '.';
  42841a:	4611      	mov	r1, r2
  42841c:	e6c0      	b.n	4281a0 <am_util_stdio_vsprintf+0x64c>
                iVal = uint64_to_str(ui64Val, pcBuf);
  42841e:	4610      	mov	r0, r2
  428420:	4639      	mov	r1, r7
  428422:	4622      	mov	r2, r4
  428424:	f7ff fb0a 	bl	427a3c <uint64_to_str>
                        ++ui32CharCnt;
  428428:	f10b 0b01 	add.w	fp, fp, #1
                ui32CharCnt += iVal;
  42842c:	4483      	add	fp, r0
                break;
  42842e:	e483      	b.n	427d38 <am_util_stdio_vsprintf+0x1e4>
    *pcBuf++ = '.';
  428430:	232e      	movs	r3, #46	@ 0x2e
  428432:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
  428434:	e4c1      	b.n	427dba <am_util_stdio_vsprintf+0x266>
    if ( i32NumChars <= 0 )
  428436:	2900      	cmp	r1, #0
  428438:	ddaa      	ble.n	428390 <am_util_stdio_vsprintf+0x83c>
    while ( i32NumChars-- )
  42843a:	f1a6 0c02 	sub.w	ip, r6, #2
  42843e:	e772      	b.n	428326 <am_util_stdio_vsprintf+0x7d2>
                    pcBuf += pcBuf ? iWidth : 0;
  428440:	4604      	mov	r4, r0
  428442:	e779      	b.n	428338 <am_util_stdio_vsprintf+0x7e4>

00428444 <am_util_stdio_printf>:
// A lite version of printf()
//
//*****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
  428444:	b40f      	push	{r0, r1, r2, r3}
  428446:	b530      	push	{r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
  428448:	4d09      	ldr	r5, [pc, #36]	@ (428470 <am_util_stdio_printf+0x2c>)
{
  42844a:	b083      	sub	sp, #12
    if (!g_pfnCharPrint)
  42844c:	682c      	ldr	r4, [r5, #0]
  42844e:	b14c      	cbz	r4, 428464 <am_util_stdio_printf+0x20>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
  428450:	aa07      	add	r2, sp, #28
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
  428452:	9906      	ldr	r1, [sp, #24]
  428454:	4807      	ldr	r0, [pc, #28]	@ (428474 <am_util_stdio_printf+0x30>)
    va_start(pArgs, pcFmt);
  428456:	9201      	str	r2, [sp, #4]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
  428458:	f7ff fb7c 	bl	427b54 <am_util_stdio_vsprintf>
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
  42845c:	682b      	ldr	r3, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
  42845e:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
  428460:	4804      	ldr	r0, [pc, #16]	@ (428474 <am_util_stdio_printf+0x30>)
  428462:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
  428464:	4620      	mov	r0, r4
  428466:	b003      	add	sp, #12
  428468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  42846c:	b004      	add	sp, #16
  42846e:	4770      	bx	lr
  428470:	2004e8e8 	.word	0x2004e8e8
  428474:	2004e4e8 	.word	0x2004e4e8

00428478 <SystemInit>:
void
SystemInit(void)
{

#if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
  SCB->VTOR = (uint32_t)(&__VECTOR_TABLE[0]);
  428478:	4b0e      	ldr	r3, [pc, #56]	@ (4284b4 <SystemInit+0x3c>)
  42847a:	490f      	ldr	r1, [pc, #60]	@ (4284b8 <SystemInit+0x40>)
  /*  0b01  | ON, but the clock is off            */
  /*  0b10  | RET(ention)                         */
  /*  0b11  | OFF                                 */

  /* Clear ELPSTATE, value is 0b11 on Cold reset */
  PWRMODCTL->CPDLPSTATE &= ~(PWRMODCTL_CPDLPSTATE_ELPSTATE_Msk);
  42847c:	4a0f      	ldr	r2, [pc, #60]	@ (4284bc <SystemInit+0x44>)
  SCB->VTOR = (uint32_t)(&__VECTOR_TABLE[0]);
  42847e:	6099      	str	r1, [r3, #8]
  SCB->CPACR |= ((3U << 10U*2U) |           /* enable CP10 Full Access */
  428480:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
  428484:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
  428488:	f8c3 1088 	str.w	r1, [r3, #136]	@ 0x88
  PWRMODCTL->CPDLPSTATE &= ~(PWRMODCTL_CPDLPSTATE_ELPSTATE_Msk);
  42848c:	6811      	ldr	r1, [r2, #0]
  42848e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
  428492:	6011      	str	r1, [r2, #0]

  /* Favor best FP/MVE performance by default, avoid EPU switch-ON delays */
  /* PDEPU ON, Clock OFF */
  PWRMODCTL->CPDLPSTATE |= 0x1 << PWRMODCTL_CPDLPSTATE_ELPSTATE_Pos;
  428494:	6811      	ldr	r1, [r2, #0]
  428496:	f041 0110 	orr.w	r1, r1, #16
  42849a:	6011      	str	r1, [r2, #0]
#ifdef UNALIGNED_SUPPORT_DISABLE
  SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif

  /* Enable Loop and branch info cache */
  SCB->CCR |= SCB_CCR_LOB_Msk;
  42849c:	695a      	ldr	r2, [r3, #20]
  42849e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
  4284a2:	615a      	str	r2, [r3, #20]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4284a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4284a8:	f3bf 8f6f 	isb	sy

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  TZ_SAU_Setup();
#endif

  SystemCoreClock = __SYSTEM_CLOCK;
  4284ac:	4b04      	ldr	r3, [pc, #16]	@ (4284c0 <SystemInit+0x48>)
  4284ae:	4a05      	ldr	r2, [pc, #20]	@ (4284c4 <SystemInit+0x4c>)
  4284b0:	601a      	str	r2, [r3, #0]
  //
  SCB_CleanInvalidateDCache();
  ARM_MPU_Enable((1 << MPU_CTRL_HFNMIENA_Pos) |
                 (1 << MPU_CTRL_PRIVDEFENA_Pos));
#endif  // SSRAM_NON_CACHEABLE
}
  4284b2:	4770      	bx	lr
  4284b4:	e000ed00 	.word	0xe000ed00
  4284b8:	00410000 	.word	0x00410000
  4284bc:	e001e300 	.word	0xe001e300
  4284c0:	2000aa2c 	.word	0x2000aa2c
  4284c4:	05b8d800 	.word	0x05b8d800

004284c8 <am_usb_isr>:
// the usb isr
//
//*****************************************************************************
void
am_usb_isr(void)
{
  4284c8:	b510      	push	{r4, lr}
                                 ui32IntStatus[1],
                                 ui32IntStatus[2]);

    #else
    uint32_t ui32IntStatus[5];
    am_hal_usb_intr_status_get(pUSBHandle,
  4284ca:	4c0c      	ldr	r4, [pc, #48]	@ (4284fc <am_usb_isr+0x34>)
{
  4284cc:	b088      	sub	sp, #32
    am_hal_usb_intr_status_get(pUSBHandle,
  4284ce:	aa07      	add	r2, sp, #28
  4284d0:	ab06      	add	r3, sp, #24
  4284d2:	6820      	ldr	r0, [r4, #0]
  4284d4:	a903      	add	r1, sp, #12
  4284d6:	e9cd 3200 	strd	r3, r2, [sp]
  4284da:	ab05      	add	r3, sp, #20
  4284dc:	aa04      	add	r2, sp, #16
  4284de:	f001 f94d 	bl	42977c <am_hal_usb_intr_status_get>
                               &ui32IntStatus[0],
                               &ui32IntStatus[1],
                               &ui32IntStatus[2],
                               &ui32IntStatus[3],
                               &ui32IntStatus[4]);
    am_hal_usb_interrupt_service(pUSBHandle,
  4284e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4284e6:	6820      	ldr	r0, [r4, #0]
  4284e8:	9c07      	ldr	r4, [sp, #28]
  4284ea:	9903      	ldr	r1, [sp, #12]
  4284ec:	9401      	str	r4, [sp, #4]
  4284ee:	9c06      	ldr	r4, [sp, #24]
  4284f0:	9400      	str	r4, [sp, #0]
  4284f2:	f001 f979 	bl	4297e8 <am_hal_usb_interrupt_service>
                                 ui32IntStatus[1],
                                 ui32IntStatus[2],
                                 ui32IntStatus[3],
                                 ui32IntStatus[4]);
    #endif
}
  4284f6:	b008      	add	sp, #32
  4284f8:	bd10      	pop	{r4, pc}
  4284fa:	bf00      	nop
  4284fc:	2004e8ec 	.word	0x2004e8ec

00428500 <_Znwj>:
    erpc_free(ptr);
}

void *erpc_malloc(size_t size)
{
    void *p = ns_malloc(size);
  428500:	f7fd bbce 	b.w	425ca0 <ns_malloc>

00428504 <_Znaj>:
void *operator new[](size_t count) THROW_BADALLOC
  428504:	f7fd bbcc 	b.w	425ca0 <ns_malloc>

00428508 <_ZdlPv>:
    return p;
}

void erpc_free(void *ptr)
{
    ns_free(ptr);
  428508:	f7fd bbd6 	b.w	425cb8 <ns_free>

0042850c <_ZdlPvj>:
  42850c:	f7fd bbd4 	b.w	425cb8 <ns_free>

00428510 <_ZdaPv>:
void operator delete[](void *ptr) THROW NOEXCEPT
  428510:	f7fd bbd2 	b.w	425cb8 <ns_free>

00428514 <_ZdaPvj>:
void operator delete[](void *ptr, std::size_t count) THROW NOEXCEPT
  428514:	f7fd bbd0 	b.w	425cb8 <ns_free>

00428518 <am_hal_cachectrl_icache_enable>:
  428518:	4b0f      	ldr	r3, [pc, #60]	@ (428558 <am_hal_cachectrl_icache_enable+0x40>)
  42851a:	6818      	ldr	r0, [r3, #0]
  42851c:	f410 7040 	ands.w	r0, r0, #768	@ 0x300
  428520:	d117      	bne.n	428552 <am_hal_cachectrl_icache_enable+0x3a>
  428522:	f5a3 4376 	sub.w	r3, r3, #62976	@ 0xf600
  428526:	695a      	ldr	r2, [r3, #20]
  428528:	0392      	lsls	r2, r2, #14
  42852a:	d413      	bmi.n	428554 <am_hal_cachectrl_icache_enable+0x3c>
  42852c:	f3bf 8f4f 	dsb	sy
  428530:	f3bf 8f6f 	isb	sy
  428534:	f8c3 0250 	str.w	r0, [r3, #592]	@ 0x250
  428538:	f3bf 8f4f 	dsb	sy
  42853c:	f3bf 8f6f 	isb	sy
  428540:	695a      	ldr	r2, [r3, #20]
  428542:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
  428546:	615a      	str	r2, [r3, #20]
  428548:	f3bf 8f4f 	dsb	sy
  42854c:	f3bf 8f6f 	isb	sy
  428550:	4770      	bx	lr
  428552:	2001      	movs	r0, #1
  428554:	4770      	bx	lr
  428556:	bf00      	nop
  428558:	e001e300 	.word	0xe001e300

0042855c <am_hal_cachectrl_dcache_enable>:
  42855c:	4b39      	ldr	r3, [pc, #228]	@ (428644 <am_hal_cachectrl_dcache_enable+0xe8>)
  42855e:	b5f0      	push	{r4, r5, r6, r7, lr}
  428560:	681b      	ldr	r3, [r3, #0]
  428562:	4606      	mov	r6, r0
  428564:	f413 7040 	ands.w	r0, r3, #768	@ 0x300
  428568:	d16a      	bne.n	428640 <am_hal_cachectrl_dcache_enable+0xe4>
  42856a:	4a37      	ldr	r2, [pc, #220]	@ (428648 <am_hal_cachectrl_dcache_enable+0xec>)
  42856c:	4d37      	ldr	r5, [pc, #220]	@ (42864c <am_hal_cachectrl_dcache_enable+0xf0>)
  42856e:	7813      	ldrb	r3, [r2, #0]
  428570:	7891      	ldrb	r1, [r2, #2]
  428572:	7852      	ldrb	r2, [r2, #1]
  428574:	01db      	lsls	r3, r3, #7
  428576:	0049      	lsls	r1, r1, #1
  428578:	f403 7360 	and.w	r3, r3, #896	@ 0x380
  42857c:	f001 010e 	and.w	r1, r1, #14
  428580:	0112      	lsls	r2, r2, #4
  428582:	430b      	orrs	r3, r1
  428584:	f002 0270 	and.w	r2, r2, #112	@ 0x70
  428588:	4313      	orrs	r3, r2
  42858a:	f043 0301 	orr.w	r3, r3, #1
  42858e:	4c30      	ldr	r4, [pc, #192]	@ (428650 <am_hal_cachectrl_dcache_enable+0xf4>)
  428590:	606b      	str	r3, [r5, #4]
  428592:	6963      	ldr	r3, [r4, #20]
  428594:	03db      	lsls	r3, r3, #15
  428596:	d42a      	bmi.n	4285ee <am_hal_cachectrl_dcache_enable+0x92>
  428598:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  42859c:	f3bf 8f4f 	dsb	sy
  4285a0:	f643 77e0 	movw	r7, #16352	@ 0x3fe0
  4285a4:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
  4285a8:	f3c5 3c4e 	ubfx	ip, r5, #13, #15
  4285ac:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
  4285b0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
  4285b4:	f105 0e01 	add.w	lr, r5, #1
  4285b8:	462b      	mov	r3, r5
  4285ba:	f04e e001 	dls	lr, lr
  4285be:	ea0c 0107 	and.w	r1, ip, r7
  4285c2:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
  4285c6:	f8c4 2260 	str.w	r2, [r4, #608]	@ 0x260
  4285ca:	3b01      	subs	r3, #1
  4285cc:	f00f c807 	le	lr, 4285c2 <am_hal_cachectrl_dcache_enable+0x66>
  4285d0:	f1ac 0c20 	sub.w	ip, ip, #32
  4285d4:	f11c 0f20 	cmn.w	ip, #32
  4285d8:	d1ec      	bne.n	4285b4 <am_hal_cachectrl_dcache_enable+0x58>
  4285da:	f3bf 8f4f 	dsb	sy
  4285de:	6963      	ldr	r3, [r4, #20]
  4285e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
  4285e4:	6163      	str	r3, [r4, #20]
  4285e6:	f3bf 8f4f 	dsb	sy
  4285ea:	f3bf 8f6f 	isb	sy
  4285ee:	b336      	cbz	r6, 42863e <am_hal_cachectrl_dcache_enable+0xe2>
  4285f0:	2300      	movs	r3, #0
  4285f2:	4c17      	ldr	r4, [pc, #92]	@ (428650 <am_hal_cachectrl_dcache_enable+0xf4>)
  4285f4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  4285f8:	f3bf 8f4f 	dsb	sy
  4285fc:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
  428600:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
  428604:	f3c5 3c4e 	ubfx	ip, r5, #13, #15
  428608:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
  42860c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
  428610:	f105 0e01 	add.w	lr, r5, #1
  428614:	462b      	mov	r3, r5
  428616:	f04e e001 	dls	lr, lr
  42861a:	ea0c 0106 	and.w	r1, ip, r6
  42861e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
  428622:	f8c4 226c 	str.w	r2, [r4, #620]	@ 0x26c
  428626:	3b01      	subs	r3, #1
  428628:	f00f c807 	le	lr, 42861e <am_hal_cachectrl_dcache_enable+0xc2>
  42862c:	f1ac 0c20 	sub.w	ip, ip, #32
  428630:	f11c 0f20 	cmn.w	ip, #32
  428634:	d1ec      	bne.n	428610 <am_hal_cachectrl_dcache_enable+0xb4>
  428636:	f3bf 8f4f 	dsb	sy
  42863a:	f3bf 8f6f 	isb	sy
  42863e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  428640:	2001      	movs	r0, #1
  428642:	bdf0      	pop	{r4, r5, r6, r7, pc}
  428644:	e001e300 	.word	0xe001e300
  428648:	2000aa30 	.word	0x2000aa30
  42864c:	e001e000 	.word	0xe001e000
  428650:	e000ed00 	.word	0xe000ed00

00428654 <am_hal_cachectrl_dcache_invalidate>:
  428654:	4a49      	ldr	r2, [pc, #292]	@ (42877c <am_hal_cachectrl_dcache_invalidate+0x128>)
  428656:	6953      	ldr	r3, [r2, #20]
  428658:	03db      	lsls	r3, r3, #15
  42865a:	d527      	bpl.n	4286ac <am_hal_cachectrl_dcache_invalidate+0x58>
  42865c:	b530      	push	{r4, r5, lr}
  42865e:	2800      	cmp	r0, #0
  428660:	d047      	beq.n	4286f2 <am_hal_cachectrl_dcache_invalidate+0x9e>
  428662:	e9d0 3000 	ldrd	r3, r0, [r0]
  428666:	b339      	cbz	r1, 4286b8 <am_hal_cachectrl_dcache_invalidate+0x64>
  428668:	2800      	cmp	r0, #0
  42866a:	dd1d      	ble.n	4286a8 <am_hal_cachectrl_dcache_invalidate+0x54>
  42866c:	f003 011f 	and.w	r1, r3, #31
  428670:	4408      	add	r0, r1
  428672:	f3bf 8f4f 	dsb	sy
  428676:	f1a0 0120 	sub.w	r1, r0, #32
  42867a:	3120      	adds	r1, #32
  42867c:	ea6f 0103 	mvn.w	r1, r3
  428680:	f04f 0e01 	mov.w	lr, #1
  428684:	4418      	add	r0, r3
  428686:	4401      	add	r1, r0
  428688:	ea4f 1151 	mov.w	r1, r1, lsr #5
  42868c:	4471      	add	r1, lr
  42868e:	bfc8      	it	gt
  428690:	468e      	movgt	lr, r1
  428692:	f04e e001 	dls	lr, lr
  428696:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270
  42869a:	3320      	adds	r3, #32
  42869c:	f00f c805 	le	lr, 428696 <am_hal_cachectrl_dcache_invalidate+0x42>
  4286a0:	f3bf 8f4f 	dsb	sy
  4286a4:	f3bf 8f6f 	isb	sy
  4286a8:	2000      	movs	r0, #0
  4286aa:	bd30      	pop	{r4, r5, pc}
  4286ac:	f3bf 8f4f 	dsb	sy
  4286b0:	f3bf 8f6f 	isb	sy
  4286b4:	2000      	movs	r0, #0
  4286b6:	4770      	bx	lr
  4286b8:	2800      	cmp	r0, #0
  4286ba:	ddf5      	ble.n	4286a8 <am_hal_cachectrl_dcache_invalidate+0x54>
  4286bc:	f003 011f 	and.w	r1, r3, #31
  4286c0:	4408      	add	r0, r1
  4286c2:	f3bf 8f4f 	dsb	sy
  4286c6:	f1a0 0120 	sub.w	r1, r0, #32
  4286ca:	3120      	adds	r1, #32
  4286cc:	ea6f 0103 	mvn.w	r1, r3
  4286d0:	f04f 0e01 	mov.w	lr, #1
  4286d4:	4418      	add	r0, r3
  4286d6:	4401      	add	r1, r0
  4286d8:	ea4f 1151 	mov.w	r1, r1, lsr #5
  4286dc:	4471      	add	r1, lr
  4286de:	bfc8      	it	gt
  4286e0:	468e      	movgt	lr, r1
  4286e2:	f04e e001 	dls	lr, lr
  4286e6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
  4286ea:	3320      	adds	r3, #32
  4286ec:	f00f c805 	le	lr, 4286e6 <am_hal_cachectrl_dcache_invalidate+0x92>
  4286f0:	e7d6      	b.n	4286a0 <am_hal_cachectrl_dcache_invalidate+0x4c>
  4286f2:	b309      	cbz	r1, 428738 <am_hal_cachectrl_dcache_invalidate+0xe4>
  4286f4:	f8c2 0084 	str.w	r0, [r2, #132]	@ 0x84
  4286f8:	f3bf 8f4f 	dsb	sy
  4286fc:	f643 75e0 	movw	r5, #16352	@ 0x3fe0
  428700:	f8d2 4080 	ldr.w	r4, [r2, #128]	@ 0x80
  428704:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
  428708:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
  42870c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  428710:	f104 0e01 	add.w	lr, r4, #1
  428714:	4623      	mov	r3, r4
  428716:	f04e e001 	dls	lr, lr
  42871a:	ea0c 0005 	and.w	r0, ip, r5
  42871e:	ea40 7183 	orr.w	r1, r0, r3, lsl #30
  428722:	f8c2 1274 	str.w	r1, [r2, #628]	@ 0x274
  428726:	3b01      	subs	r3, #1
  428728:	f00f c807 	le	lr, 42871e <am_hal_cachectrl_dcache_invalidate+0xca>
  42872c:	f1ac 0c20 	sub.w	ip, ip, #32
  428730:	f11c 0f20 	cmn.w	ip, #32
  428734:	d1ec      	bne.n	428710 <am_hal_cachectrl_dcache_invalidate+0xbc>
  428736:	e7b3      	b.n	4286a0 <am_hal_cachectrl_dcache_invalidate+0x4c>
  428738:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  42873c:	f3bf 8f4f 	dsb	sy
  428740:	f643 75e0 	movw	r5, #16352	@ 0x3fe0
  428744:	f8d2 4080 	ldr.w	r4, [r2, #128]	@ 0x80
  428748:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
  42874c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
  428750:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  428754:	f104 0e01 	add.w	lr, r4, #1
  428758:	4623      	mov	r3, r4
  42875a:	f04e e001 	dls	lr, lr
  42875e:	ea0c 0005 	and.w	r0, ip, r5
  428762:	ea40 7183 	orr.w	r1, r0, r3, lsl #30
  428766:	f8c2 1260 	str.w	r1, [r2, #608]	@ 0x260
  42876a:	3b01      	subs	r3, #1
  42876c:	f00f c807 	le	lr, 428762 <am_hal_cachectrl_dcache_invalidate+0x10e>
  428770:	f1ac 0c20 	sub.w	ip, ip, #32
  428774:	f11c 0f20 	cmn.w	ip, #32
  428778:	d1ec      	bne.n	428754 <am_hal_cachectrl_dcache_invalidate+0x100>
  42877a:	e791      	b.n	4286a0 <am_hal_cachectrl_dcache_invalidate+0x4c>
  42877c:	e000ed00 	.word	0xe000ed00

00428780 <am_hal_info1_read>:
  428780:	2805      	cmp	r0, #5
  428782:	d841      	bhi.n	428808 <am_hal_info1_read+0x88>
  428784:	b538      	push	{r3, r4, r5, lr}
  428786:	468c      	mov	ip, r1
  428788:	4619      	mov	r1, r3
  42878a:	232a      	movs	r3, #42	@ 0x2a
  42878c:	40c3      	lsrs	r3, r0
  42878e:	07dc      	lsls	r4, r3, #31
  428790:	d510      	bpl.n	4287b4 <am_hal_info1_read+0x34>
  428792:	4c28      	ldr	r4, [pc, #160]	@ (428834 <am_hal_info1_read+0xb4>)
  428794:	4b28      	ldr	r3, [pc, #160]	@ (428838 <am_hal_info1_read+0xb8>)
  428796:	f8d4 51bc 	ldr.w	r5, [r4, #444]	@ 0x1bc
  42879a:	689b      	ldr	r3, [r3, #8]
  42879c:	f3c3 63c0 	ubfx	r3, r3, #27, #1
  4287a0:	b141      	cbz	r1, 4287b4 <am_hal_info1_read+0x34>
  4287a2:	3802      	subs	r0, #2
  4287a4:	eb0c 0402 	add.w	r4, ip, r2
  4287a8:	2803      	cmp	r0, #3
  4287aa:	d81a      	bhi.n	4287e2 <am_hal_info1_read+0x62>
  4287ac:	e8df f000 	tbb	[pc, r0]
  4287b0:	04251b10 	.word	0x04251b10
  4287b4:	2006      	movs	r0, #6
  4287b6:	bd38      	pop	{r3, r4, r5, pc}
  4287b8:	f5b4 6fc0 	cmp.w	r4, #1536	@ 0x600
  4287bc:	d829      	bhi.n	428812 <am_hal_info1_read+0x92>
  4287be:	f10c 5084 	add.w	r0, ip, #276824064	@ 0x10800000
  4287c2:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  4287c6:	0080      	lsls	r0, r0, #2
  4287c8:	f7ff f8da 	bl	427980 <am_hal_read_words>
  4287cc:	2000      	movs	r0, #0
  4287ce:	bd38      	pop	{r3, r4, r5, pc}
  4287d0:	2c40      	cmp	r4, #64	@ 0x40
  4287d2:	d81e      	bhi.n	428812 <am_hal_info1_read+0x92>
  4287d4:	b1fb      	cbz	r3, 428816 <am_hal_info1_read+0x96>
  4287d6:	f10c 2010 	add.w	r0, ip, #268439552	@ 0x10001000
  4287da:	f500 0000 	add.w	r0, r0, #8388608	@ 0x800000
  4287de:	0080      	lsls	r0, r0, #2
  4287e0:	e7f2      	b.n	4287c8 <am_hal_info1_read+0x48>
  4287e2:	0728      	lsls	r0, r5, #28
  4287e4:	d512      	bpl.n	42880c <am_hal_info1_read+0x8c>
  4287e6:	f5b4 7f30 	cmp.w	r4, #704	@ 0x2c0
  4287ea:	d812      	bhi.n	428812 <am_hal_info1_read+0x92>
  4287ec:	b19b      	cbz	r3, 428816 <am_hal_info1_read+0x96>
  4287ee:	f10c 5084 	add.w	r0, ip, #276824064	@ 0x10800000
  4287f2:	f500 50c0 	add.w	r0, r0, #6144	@ 0x1800
  4287f6:	0080      	lsls	r0, r0, #2
  4287f8:	e7e6      	b.n	4287c8 <am_hal_info1_read+0x48>
  4287fa:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
  4287fe:	d808      	bhi.n	428812 <am_hal_info1_read+0x92>
  428800:	f10c 5084 	add.w	r0, ip, #276824064	@ 0x10800000
  428804:	0080      	lsls	r0, r0, #2
  428806:	e7df      	b.n	4287c8 <am_hal_info1_read+0x48>
  428808:	2006      	movs	r0, #6
  42880a:	4770      	bx	lr
  42880c:	f5b4 6fc0 	cmp.w	r4, #1536	@ 0x600
  428810:	d903      	bls.n	42881a <am_hal_info1_read+0x9a>
  428812:	2005      	movs	r0, #5
  428814:	bd38      	pop	{r3, r4, r5, pc}
  428816:	2009      	movs	r0, #9
  428818:	bd38      	pop	{r3, r4, r5, pc}
  42881a:	f50c 7320 	add.w	r3, ip, #640	@ 0x280
  42881e:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
  428822:	bf28      	it	cs
  428824:	469c      	movcs	ip, r3
  428826:	f10c 5084 	add.w	r0, ip, #276824064	@ 0x10800000
  42882a:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
  42882e:	0080      	lsls	r0, r0, #2
  428830:	e7ca      	b.n	4287c8 <am_hal_info1_read+0x48>
  428832:	bf00      	nop
  428834:	40020000 	.word	0x40020000
  428838:	40021000 	.word	0x40021000

0042883c <am_hal_interrupt_master_enable>:
  42883c:	f3ef 8010 	mrs	r0, PRIMASK
  428840:	b662      	cpsie	i
  428842:	4770      	bx	lr

00428844 <am_hal_interrupt_master_disable>:
  428844:	f3ef 8010 	mrs	r0, PRIMASK
  428848:	b672      	cpsid	i
  42884a:	4770      	bx	lr

0042884c <am_hal_interrupt_master_set>:
  42884c:	f380 8810 	msr	PRIMASK, r0
  428850:	4770      	bx	lr
  428852:	bf00      	nop

00428854 <am_hal_rtc_osc_disable>:
  428854:	4a03      	ldr	r2, [pc, #12]	@ (428864 <am_hal_rtc_osc_disable+0x10>)
  428856:	2000      	movs	r0, #0
  428858:	6813      	ldr	r3, [r2, #0]
  42885a:	f043 0310 	orr.w	r3, r3, #16
  42885e:	6013      	str	r3, [r2, #0]
  428860:	4770      	bx	lr
  428862:	bf00      	nop
  428864:	40004800 	.word	0x40004800

00428868 <am_hal_sysctrl_sleep>:
  428868:	b5f0      	push	{r4, r5, r6, r7, lr}
  42886a:	b085      	sub	sp, #20
  42886c:	4604      	mov	r4, r0
  42886e:	f7ff ffe9 	bl	428844 <am_hal_interrupt_master_disable>
  428872:	4603      	mov	r3, r0
  428874:	4e4a      	ldr	r6, [pc, #296]	@ (4289a0 <am_hal_sysctrl_sleep+0x138>)
  428876:	a801      	add	r0, sp, #4
  428878:	9303      	str	r3, [sp, #12]
  42887a:	f7fe ffe9 	bl	427850 <am_hal_pwrctrl_pwrmodctl_cpdlp_get>
  42887e:	f8d6 5108 	ldr.w	r5, [r6, #264]	@ 0x108
  428882:	f3c5 1501 	ubfx	r5, r5, #4, #2
  428886:	b124      	cbz	r4, 428892 <am_hal_sysctrl_sleep+0x2a>
  428888:	68b3      	ldr	r3, [r6, #8]
  42888a:	f3c3 67c0 	ubfx	r7, r3, #27, #1
  42888e:	011b      	lsls	r3, r3, #4
  428890:	d532      	bpl.n	4288f8 <am_hal_sysctrl_sleep+0x90>
  428892:	2301      	movs	r3, #1
  428894:	f89d 2004 	ldrb.w	r2, [sp, #4]
  428898:	4941      	ldr	r1, [pc, #260]	@ (4289a0 <am_hal_sysctrl_sleep+0x138>)
  42889a:	6d09      	ldr	r1, [r1, #80]	@ 0x50
  42889c:	f88d 2008 	strb.w	r2, [sp, #8]
  4288a0:	f88d 3009 	strb.w	r3, [sp, #9]
  4288a4:	f88d 300a 	strb.w	r3, [sp, #10]
  4288a8:	9802      	ldr	r0, [sp, #8]
  4288aa:	f7fe ffb1 	bl	427810 <am_hal_pwrctrl_pwrmodctl_cpdlp_config>
  4288ae:	4a3d      	ldr	r2, [pc, #244]	@ (4289a4 <am_hal_sysctrl_sleep+0x13c>)
  4288b0:	493d      	ldr	r1, [pc, #244]	@ (4289a8 <am_hal_sysctrl_sleep+0x140>)
  4288b2:	6913      	ldr	r3, [r2, #16]
  4288b4:	f023 0304 	bic.w	r3, r3, #4
  4288b8:	6113      	str	r3, [r2, #16]
  4288ba:	680b      	ldr	r3, [r1, #0]
  4288bc:	bf30      	wfi
  4288be:	f3bf 8f6f 	isb	sy
  4288c2:	4d3a      	ldr	r5, [pc, #232]	@ (4289ac <am_hal_sysctrl_sleep+0x144>)
  4288c4:	682b      	ldr	r3, [r5, #0]
  4288c6:	2b01      	cmp	r3, #1
  4288c8:	d90e      	bls.n	4288e8 <am_hal_sysctrl_sleep+0x80>
  4288ca:	4b35      	ldr	r3, [pc, #212]	@ (4289a0 <am_hal_sysctrl_sleep+0x138>)
  4288cc:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
  4288d0:	0791      	lsls	r1, r2, #30
  4288d2:	d509      	bpl.n	4288e8 <am_hal_sysctrl_sleep+0x80>
  4288d4:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
  4288d8:	07d2      	lsls	r2, r2, #31
  4288da:	d505      	bpl.n	4288e8 <am_hal_sysctrl_sleep+0x80>
  4288dc:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
  4288e0:	f022 0203 	bic.w	r2, r2, #3
  4288e4:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
  4288e8:	9801      	ldr	r0, [sp, #4]
  4288ea:	f7fe ff91 	bl	427810 <am_hal_pwrctrl_pwrmodctl_cpdlp_config>
  4288ee:	9803      	ldr	r0, [sp, #12]
  4288f0:	f7ff ffac 	bl	42884c <am_hal_interrupt_master_set>
  4288f4:	b005      	add	sp, #20
  4288f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4288f8:	2302      	movs	r3, #2
  4288fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
  4288fe:	f88d 3009 	strb.w	r3, [sp, #9]
  428902:	f88d 2008 	strb.w	r2, [sp, #8]
  428906:	f88d 300a 	strb.w	r3, [sp, #10]
  42890a:	9802      	ldr	r0, [sp, #8]
  42890c:	f7fe ff80 	bl	427810 <am_hal_pwrctrl_pwrmodctl_cpdlp_config>
  428910:	2d03      	cmp	r5, #3
  428912:	d024      	beq.n	42895e <am_hal_sysctrl_sleep+0xf6>
  428914:	4d25      	ldr	r5, [pc, #148]	@ (4289ac <am_hal_sysctrl_sleep+0x144>)
  428916:	4a23      	ldr	r2, [pc, #140]	@ (4289a4 <am_hal_sysctrl_sleep+0x13c>)
  428918:	4c21      	ldr	r4, [pc, #132]	@ (4289a0 <am_hal_sysctrl_sleep+0x138>)
  42891a:	6913      	ldr	r3, [r2, #16]
  42891c:	f043 0304 	orr.w	r3, r3, #4
  428920:	6113      	str	r3, [r2, #16]
  428922:	6823      	ldr	r3, [r4, #0]
  428924:	f003 0303 	and.w	r3, r3, #3
  428928:	2b02      	cmp	r3, #2
  42892a:	d00a      	beq.n	428942 <am_hal_sysctrl_sleep+0xda>
  42892c:	4b1e      	ldr	r3, [pc, #120]	@ (4289a8 <am_hal_sysctrl_sleep+0x140>)
  42892e:	681b      	ldr	r3, [r3, #0]
  428930:	bf30      	wfi
  428932:	f3bf 8f6f 	isb	sy
  428936:	2f00      	cmp	r7, #0
  428938:	d0c4      	beq.n	4288c4 <am_hal_sysctrl_sleep+0x5c>
  42893a:	2001      	movs	r0, #1
  42893c:	f7fe fe9a 	bl	427674 <buck_ldo_update_override>
  428940:	e7c0      	b.n	4288c4 <am_hal_sysctrl_sleep+0x5c>
  428942:	6823      	ldr	r3, [r4, #0]
  428944:	f3c3 03c1 	ubfx	r3, r3, #3, #2
  428948:	2b02      	cmp	r3, #2
  42894a:	d0ef      	beq.n	42892c <am_hal_sysctrl_sleep+0xc4>
  42894c:	2001      	movs	r0, #1
  42894e:	f7fe ff8d 	bl	42786c <am_hal_delay_us>
  428952:	6823      	ldr	r3, [r4, #0]
  428954:	f3c3 03c1 	ubfx	r3, r3, #3, #2
  428958:	2b02      	cmp	r3, #2
  42895a:	d1f7      	bne.n	42894c <am_hal_sysctrl_sleep+0xe4>
  42895c:	e7e6      	b.n	42892c <am_hal_sysctrl_sleep+0xc4>
  42895e:	f240 43c4 	movw	r3, #1220	@ 0x4c4
  428962:	6932      	ldr	r2, [r6, #16]
  428964:	421a      	tst	r2, r3
  428966:	d1d5      	bne.n	428914 <am_hal_sysctrl_sleep+0xac>
  428968:	68b3      	ldr	r3, [r6, #8]
  42896a:	f033 4340 	bics.w	r3, r3, #3221225472	@ 0xc0000000
  42896e:	d1d1      	bne.n	428914 <am_hal_sysctrl_sleep+0xac>
  428970:	4b0f      	ldr	r3, [pc, #60]	@ (4289b0 <am_hal_sysctrl_sleep+0x148>)
  428972:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
  428976:	0098      	lsls	r0, r3, #2
  428978:	d4cc      	bmi.n	428914 <am_hal_sysctrl_sleep+0xac>
  42897a:	4b0e      	ldr	r3, [pc, #56]	@ (4289b4 <am_hal_sysctrl_sleep+0x14c>)
  42897c:	7818      	ldrb	r0, [r3, #0]
  42897e:	2800      	cmp	r0, #0
  428980:	d1c8      	bne.n	428914 <am_hal_sysctrl_sleep+0xac>
  428982:	4d0a      	ldr	r5, [pc, #40]	@ (4289ac <am_hal_sysctrl_sleep+0x144>)
  428984:	f7fe fe76 	bl	427674 <buck_ldo_update_override>
  428988:	682b      	ldr	r3, [r5, #0]
  42898a:	2b01      	cmp	r3, #1
  42898c:	d905      	bls.n	42899a <am_hal_sysctrl_sleep+0x132>
  42898e:	f8d6 31a0 	ldr.w	r3, [r6, #416]	@ 0x1a0
  428992:	f043 0303 	orr.w	r3, r3, #3
  428996:	f8c6 31a0 	str.w	r3, [r6, #416]	@ 0x1a0
  42899a:	4627      	mov	r7, r4
  42899c:	e7bb      	b.n	428916 <am_hal_sysctrl_sleep+0xae>
  42899e:	bf00      	nop
  4289a0:	40021000 	.word	0x40021000
  4289a4:	e000ed00 	.word	0xe000ed00
  4289a8:	47ff0000 	.word	0x47ff0000
  4289ac:	2000aa24 	.word	0x2000aa24
  4289b0:	40020000 	.word	0x40020000
  4289b4:	2004e8f0 	.word	0x2004e8f0

004289b8 <am_hal_sysctrl_fpu_enable>:
  4289b8:	4a05      	ldr	r2, [pc, #20]	@ (4289d0 <am_hal_sysctrl_fpu_enable+0x18>)
  4289ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
  4289be:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
  4289c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  4289c6:	f3bf 8f4f 	dsb	sy
  4289ca:	f3bf 8f6f 	isb	sy
  4289ce:	4770      	bx	lr
  4289d0:	e000ed00 	.word	0xe000ed00

004289d4 <am_hal_sysctrl_fpu_stacking_enable>:
  4289d4:	b510      	push	{r4, lr}
  4289d6:	4604      	mov	r4, r0
  4289d8:	b082      	sub	sp, #8
  4289da:	f7ff ff33 	bl	428844 <am_hal_interrupt_master_disable>
  4289de:	2c00      	cmp	r4, #0
  4289e0:	bf0c      	ite	eq
  4289e2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
  4289e6:	f04f 4340 	movne.w	r3, #3221225472	@ 0xc0000000
  4289ea:	4906      	ldr	r1, [pc, #24]	@ (428a04 <am_hal_sysctrl_fpu_stacking_enable+0x30>)
  4289ec:	9001      	str	r0, [sp, #4]
  4289ee:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
  4289f0:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
  4289f4:	4313      	orrs	r3, r2
  4289f6:	634b      	str	r3, [r1, #52]	@ 0x34
  4289f8:	9801      	ldr	r0, [sp, #4]
  4289fa:	b002      	add	sp, #8
  4289fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  428a00:	f7ff bf24 	b.w	42884c <am_hal_interrupt_master_set>
  428a04:	e000ef00 	.word	0xe000ef00

00428a08 <am_hal_sysctrl_ton_config_init>:
  428a08:	4b1f      	ldr	r3, [pc, #124]	@ (428a88 <am_hal_sysctrl_ton_config_init+0x80>)
  428a0a:	681b      	ldr	r3, [r3, #0]
  428a0c:	b32b      	cbz	r3, 428a5a <am_hal_sysctrl_ton_config_init+0x52>
  428a0e:	4b1f      	ldr	r3, [pc, #124]	@ (428a8c <am_hal_sysctrl_ton_config_init+0x84>)
  428a10:	491f      	ldr	r1, [pc, #124]	@ (428a90 <am_hal_sysctrl_ton_config_init+0x88>)
  428a12:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
  428a16:	481f      	ldr	r0, [pc, #124]	@ (428a94 <am_hal_sysctrl_ton_config_init+0x8c>)
  428a18:	f3c2 6244 	ubfx	r2, r2, #25, #5
  428a1c:	700a      	strb	r2, [r1, #0]
  428a1e:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
  428a22:	491d      	ldr	r1, [pc, #116]	@ (428a98 <am_hal_sysctrl_ton_config_init+0x90>)
  428a24:	f3c2 22c4 	ubfx	r2, r2, #11, #5
  428a28:	7002      	strb	r2, [r0, #0]
  428a2a:	f8d3 2358 	ldr.w	r2, [r3, #856]	@ 0x358
  428a2e:	481b      	ldr	r0, [pc, #108]	@ (428a9c <am_hal_sysctrl_ton_config_init+0x94>)
  428a30:	f3c2 2204 	ubfx	r2, r2, #8, #5
  428a34:	700a      	strb	r2, [r1, #0]
  428a36:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
  428a3a:	4919      	ldr	r1, [pc, #100]	@ (428aa0 <am_hal_sysctrl_ton_config_init+0x98>)
  428a3c:	f3c2 4244 	ubfx	r2, r2, #17, #5
  428a40:	7002      	strb	r2, [r0, #0]
  428a42:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
  428a46:	f3c2 6244 	ubfx	r2, r2, #25, #5
  428a4a:	700a      	strb	r2, [r1, #0]
  428a4c:	f8d3 334c 	ldr.w	r3, [r3, #844]	@ 0x34c
  428a50:	4a14      	ldr	r2, [pc, #80]	@ (428aa4 <am_hal_sysctrl_ton_config_init+0x9c>)
  428a52:	f3c3 23c4 	ubfx	r3, r3, #11, #5
  428a56:	7013      	strb	r3, [r2, #0]
  428a58:	4770      	bx	lr
  428a5a:	b510      	push	{r4, lr}
  428a5c:	f04f 0e15 	mov.w	lr, #21
  428a60:	220b      	movs	r2, #11
  428a62:	231f      	movs	r3, #31
  428a64:	490c      	ldr	r1, [pc, #48]	@ (428a98 <am_hal_sysctrl_ton_config_init+0x90>)
  428a66:	480b      	ldr	r0, [pc, #44]	@ (428a94 <am_hal_sysctrl_ton_config_init+0x8c>)
  428a68:	f881 e000 	strb.w	lr, [r1]
  428a6c:	490b      	ldr	r1, [pc, #44]	@ (428a9c <am_hal_sysctrl_ton_config_init+0x94>)
  428a6e:	f04f 0c0e 	mov.w	ip, #14
  428a72:	700b      	strb	r3, [r1, #0]
  428a74:	7003      	strb	r3, [r0, #0]
  428a76:	4613      	mov	r3, r2
  428a78:	4909      	ldr	r1, [pc, #36]	@ (428aa0 <am_hal_sysctrl_ton_config_init+0x98>)
  428a7a:	4c05      	ldr	r4, [pc, #20]	@ (428a90 <am_hal_sysctrl_ton_config_init+0x88>)
  428a7c:	700a      	strb	r2, [r1, #0]
  428a7e:	4a09      	ldr	r2, [pc, #36]	@ (428aa4 <am_hal_sysctrl_ton_config_init+0x9c>)
  428a80:	f884 c000 	strb.w	ip, [r4]
  428a84:	7013      	strb	r3, [r2, #0]
  428a86:	bd10      	pop	{r4, pc}
  428a88:	2000aa24 	.word	0x2000aa24
  428a8c:	40020000 	.word	0x40020000
  428a90:	2000aa38 	.word	0x2000aa38
  428a94:	2000aa37 	.word	0x2000aa37
  428a98:	2000aa34 	.word	0x2000aa34
  428a9c:	2000aa33 	.word	0x2000aa33
  428aa0:	2000aa36 	.word	0x2000aa36
  428aa4:	2000aa35 	.word	0x2000aa35

00428aa8 <am_hal_sysctrl_ton_config_update>:
  428aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  428aaa:	4f4b      	ldr	r7, [pc, #300]	@ (428bd8 <am_hal_sysctrl_ton_config_update+0x130>)
  428aac:	4605      	mov	r5, r0
  428aae:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
  428ab2:	460e      	mov	r6, r1
  428ab4:	f014 0401 	ands.w	r4, r4, #1
  428ab8:	d172      	bne.n	428ba0 <am_hal_sysctrl_ton_config_update+0xf8>
  428aba:	b10d      	cbz	r5, 428ac0 <am_hal_sysctrl_ton_config_update+0x18>
  428abc:	2e00      	cmp	r6, #0
  428abe:	d13d      	bne.n	428b3c <am_hal_sysctrl_ton_config_update+0x94>
  428ac0:	4a46      	ldr	r2, [pc, #280]	@ (428bdc <am_hal_sysctrl_ton_config_update+0x134>)
  428ac2:	4947      	ldr	r1, [pc, #284]	@ (428be0 <am_hal_sysctrl_ton_config_update+0x138>)
  428ac4:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
  428ac8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
  428acc:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
  428ad0:	4b42      	ldr	r3, [pc, #264]	@ (428bdc <am_hal_sysctrl_ton_config_update+0x134>)
  428ad2:	7808      	ldrb	r0, [r1, #0]
  428ad4:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
  428ad8:	4942      	ldr	r1, [pc, #264]	@ (428be4 <am_hal_sysctrl_ton_config_update+0x13c>)
  428ada:	f360 625d 	bfi	r2, r0, #25, #5
  428ade:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
  428ae2:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
  428ae6:	7809      	ldrb	r1, [r1, #0]
  428ae8:	483f      	ldr	r0, [pc, #252]	@ (428be8 <am_hal_sysctrl_ton_config_update+0x140>)
  428aea:	f361 22cf 	bfi	r2, r1, #11, #5
  428aee:	493f      	ldr	r1, [pc, #252]	@ (428bec <am_hal_sysctrl_ton_config_update+0x144>)
  428af0:	7800      	ldrb	r0, [r0, #0]
  428af2:	780d      	ldrb	r5, [r1, #0]
  428af4:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
  428af8:	f8d3 2358 	ldr.w	r2, [r3, #856]	@ 0x358
  428afc:	493c      	ldr	r1, [pc, #240]	@ (428bf0 <am_hal_sysctrl_ton_config_update+0x148>)
  428afe:	f365 220c 	bfi	r2, r5, #8, #5
  428b02:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
  428b06:	f8d3 2354 	ldr.w	r2, [r3, #852]	@ 0x354
  428b0a:	780d      	ldrb	r5, [r1, #0]
  428b0c:	4939      	ldr	r1, [pc, #228]	@ (428bf4 <am_hal_sysctrl_ton_config_update+0x14c>)
  428b0e:	f365 4255 	bfi	r2, r5, #17, #5
  428b12:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
  428b16:	f8d3 234c 	ldr.w	r2, [r3, #844]	@ 0x34c
  428b1a:	f360 625d 	bfi	r2, r0, #25, #5
  428b1e:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
  428b22:	780a      	ldrb	r2, [r1, #0]
  428b24:	f002 021f 	and.w	r2, r2, #31
  428b28:	4b2c      	ldr	r3, [pc, #176]	@ (428bdc <am_hal_sysctrl_ton_config_update+0x134>)
  428b2a:	f8d3 134c 	ldr.w	r1, [r3, #844]	@ 0x34c
  428b2e:	f362 21cf 	bfi	r1, r2, #11, #5
  428b32:	f8c3 134c 	str.w	r1, [r3, #844]	@ 0x34c
  428b36:	2c00      	cmp	r4, #0
  428b38:	d13f      	bne.n	428bba <am_hal_sysctrl_ton_config_update+0x112>
  428b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  428b3c:	4b27      	ldr	r3, [pc, #156]	@ (428bdc <am_hal_sysctrl_ton_config_update+0x134>)
  428b3e:	4929      	ldr	r1, [pc, #164]	@ (428be4 <am_hal_sysctrl_ton_config_update+0x13c>)
  428b40:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
  428b44:	4d2b      	ldr	r5, [pc, #172]	@ (428bf4 <am_hal_sysctrl_ton_config_update+0x14c>)
  428b46:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
  428b4a:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
  428b4e:	780a      	ldrb	r2, [r1, #0]
  428b50:	f8d3 1344 	ldr.w	r1, [r3, #836]	@ 0x344
  428b54:	f002 021f 	and.w	r2, r2, #31
  428b58:	f362 615d 	bfi	r1, r2, #25, #5
  428b5c:	f8c3 1344 	str.w	r1, [r3, #836]	@ 0x344
  428b60:	f8d3 0344 	ldr.w	r0, [r3, #836]	@ 0x344
  428b64:	4922      	ldr	r1, [pc, #136]	@ (428bf0 <am_hal_sysctrl_ton_config_update+0x148>)
  428b66:	f362 20cf 	bfi	r0, r2, #11, #5
  428b6a:	7809      	ldrb	r1, [r1, #0]
  428b6c:	782a      	ldrb	r2, [r5, #0]
  428b6e:	f8c3 0344 	str.w	r0, [r3, #836]	@ 0x344
  428b72:	f8d3 0358 	ldr.w	r0, [r3, #856]	@ 0x358
  428b76:	f001 011f 	and.w	r1, r1, #31
  428b7a:	f361 200c 	bfi	r0, r1, #8, #5
  428b7e:	f8c3 0358 	str.w	r0, [r3, #856]	@ 0x358
  428b82:	f8d3 0354 	ldr.w	r0, [r3, #852]	@ 0x354
  428b86:	f002 021f 	and.w	r2, r2, #31
  428b8a:	f361 4055 	bfi	r0, r1, #17, #5
  428b8e:	f8c3 0354 	str.w	r0, [r3, #852]	@ 0x354
  428b92:	f8d3 134c 	ldr.w	r1, [r3, #844]	@ 0x34c
  428b96:	f362 615d 	bfi	r1, r2, #25, #5
  428b9a:	f8c3 134c 	str.w	r1, [r3, #844]	@ 0x34c
  428b9e:	e7c3      	b.n	428b28 <am_hal_sysctrl_ton_config_update+0x80>
  428ba0:	2000      	movs	r0, #0
  428ba2:	f7fe fd67 	bl	427674 <buck_ldo_update_override>
  428ba6:	2005      	movs	r0, #5
  428ba8:	f7fe fe60 	bl	42786c <am_hal_delay_us>
  428bac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
  428bb0:	f023 0301 	bic.w	r3, r3, #1
  428bb4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  428bb8:	e77f      	b.n	428aba <am_hal_sysctrl_ton_config_update+0x12>
  428bba:	4a07      	ldr	r2, [pc, #28]	@ (428bd8 <am_hal_sysctrl_ton_config_update+0x130>)
  428bbc:	2005      	movs	r0, #5
  428bbe:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
  428bc2:	f043 0301 	orr.w	r3, r3, #1
  428bc6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  428bca:	f7fe fe4f 	bl	42786c <am_hal_delay_us>
  428bce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  428bd2:	2001      	movs	r0, #1
  428bd4:	f7fe bd4e 	b.w	427674 <buck_ldo_update_override>
  428bd8:	40021000 	.word	0x40021000
  428bdc:	40020000 	.word	0x40020000
  428be0:	2000aa38 	.word	0x2000aa38
  428be4:	2000aa37 	.word	0x2000aa37
  428be8:	2000aa36 	.word	0x2000aa36
  428bec:	2000aa34 	.word	0x2000aa34
  428bf0:	2000aa33 	.word	0x2000aa33
  428bf4:	2000aa35 	.word	0x2000aa35

00428bf8 <am_hal_sysctrl_clkmuxrst_low_power_init>:
  428bf8:	b530      	push	{r4, r5, lr}
  428bfa:	4bb9      	ldr	r3, [pc, #740]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428bfc:	b085      	sub	sp, #20
  428bfe:	f8d3 285c 	ldr.w	r2, [r3, #2140]	@ 0x85c
  428c02:	0792      	lsls	r2, r2, #30
  428c04:	d406      	bmi.n	428c14 <am_hal_sysctrl_clkmuxrst_low_power_init+0x1c>
  428c06:	f645 22f0 	movw	r2, #23280	@ 0x5af0
  428c0a:	f8d3 1858 	ldr.w	r1, [r3, #2136]	@ 0x858
  428c0e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
  428c12:	d00b      	beq.n	428c2c <am_hal_sysctrl_clkmuxrst_low_power_init+0x34>
  428c14:	2200      	movs	r2, #0
  428c16:	4bb2      	ldr	r3, [pc, #712]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428c18:	f8c3 2858 	str.w	r2, [r3, #2136]	@ 0x858
  428c1c:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428c20:	f6c5 22f0 	movt	r2, #23280	@ 0x5af0
  428c24:	f8c3 2858 	str.w	r2, [r3, #2136]	@ 0x858
  428c28:	b005      	add	sp, #20
  428c2a:	bd30      	pop	{r4, r5, pc}
  428c2c:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428c30:	07d5      	lsls	r5, r2, #31
  428c32:	d413      	bmi.n	428c5c <am_hal_sysctrl_clkmuxrst_low_power_init+0x64>
  428c34:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428c38:	0794      	lsls	r4, r2, #30
  428c3a:	d40f      	bmi.n	428c5c <am_hal_sysctrl_clkmuxrst_low_power_init+0x64>
  428c3c:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428c40:	0750      	lsls	r0, r2, #29
  428c42:	d40b      	bmi.n	428c5c <am_hal_sysctrl_clkmuxrst_low_power_init+0x64>
  428c44:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428c48:	0711      	lsls	r1, r2, #28
  428c4a:	d407      	bmi.n	428c5c <am_hal_sysctrl_clkmuxrst_low_power_init+0x64>
  428c4c:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428c50:	06d2      	lsls	r2, r2, #27
  428c52:	d403      	bmi.n	428c5c <am_hal_sysctrl_clkmuxrst_low_power_init+0x64>
  428c54:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428c58:	069b      	lsls	r3, r3, #26
  428c5a:	d5db      	bpl.n	428c14 <am_hal_sysctrl_clkmuxrst_low_power_init+0x1c>
  428c5c:	4ba0      	ldr	r3, [pc, #640]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428c5e:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428c62:	07d5      	lsls	r5, r2, #31
  428c64:	f100 8114 	bmi.w	428e90 <am_hal_sysctrl_clkmuxrst_low_power_init+0x298>
  428c68:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428c6c:	079c      	lsls	r4, r3, #30
  428c6e:	f100 810f 	bmi.w	428e90 <am_hal_sysctrl_clkmuxrst_low_power_init+0x298>
  428c72:	4b9b      	ldr	r3, [pc, #620]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428c74:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428c78:	07d8      	lsls	r0, r3, #31
  428c7a:	f100 8187 	bmi.w	428f8c <am_hal_sysctrl_clkmuxrst_low_power_init+0x394>
  428c7e:	4b98      	ldr	r3, [pc, #608]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428c80:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428c84:	0759      	lsls	r1, r3, #29
  428c86:	f100 816e 	bmi.w	428f66 <am_hal_sysctrl_clkmuxrst_low_power_init+0x36e>
  428c8a:	4b95      	ldr	r3, [pc, #596]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428c8c:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428c90:	0712      	lsls	r2, r2, #28
  428c92:	f100 810a 	bmi.w	428eaa <am_hal_sysctrl_clkmuxrst_low_power_init+0x2b2>
  428c96:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428c9a:	0695      	lsls	r5, r2, #26
  428c9c:	d504      	bpl.n	428ca8 <am_hal_sysctrl_clkmuxrst_low_power_init+0xb0>
  428c9e:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428ca2:	065c      	lsls	r4, r3, #25
  428ca4:	f140 8101 	bpl.w	428eaa <am_hal_sysctrl_clkmuxrst_low_power_init+0x2b2>
  428ca8:	4b8d      	ldr	r3, [pc, #564]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428caa:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428cae:	06d0      	lsls	r0, r2, #27
  428cb0:	f100 8104 	bmi.w	428ebc <am_hal_sysctrl_clkmuxrst_low_power_init+0x2c4>
  428cb4:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428cb8:	0691      	lsls	r1, r2, #26
  428cba:	d504      	bpl.n	428cc6 <am_hal_sysctrl_clkmuxrst_low_power_init+0xce>
  428cbc:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428cc0:	065a      	lsls	r2, r3, #25
  428cc2:	f100 80fb 	bmi.w	428ebc <am_hal_sysctrl_clkmuxrst_low_power_init+0x2c4>
  428cc6:	4d86      	ldr	r5, [pc, #536]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428cc8:	f8d5 3858 	ldr.w	r3, [r5, #2136]	@ 0x858
  428ccc:	069b      	lsls	r3, r3, #26
  428cce:	f100 8115 	bmi.w	428efc <am_hal_sysctrl_clkmuxrst_low_power_init+0x304>
  428cd2:	201e      	movs	r0, #30
  428cd4:	f7fd fad0 	bl	426278 <am_hal_pwrctrl_periph_enable>
  428cd8:	201f      	movs	r0, #31
  428cda:	f7fd facd 	bl	426278 <am_hal_pwrctrl_periph_enable>
  428cde:	2020      	movs	r0, #32
  428ce0:	f7fd faca 	bl	426278 <am_hal_pwrctrl_periph_enable>
  428ce4:	2021      	movs	r0, #33	@ 0x21
  428ce6:	f7fd fac7 	bl	426278 <am_hal_pwrctrl_periph_enable>
  428cea:	201a      	movs	r0, #26
  428cec:	f7fd fac4 	bl	426278 <am_hal_pwrctrl_periph_enable>
  428cf0:	4c7c      	ldr	r4, [pc, #496]	@ (428ee4 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2ec>)
  428cf2:	201b      	movs	r0, #27
  428cf4:	f7fd fac0 	bl	426278 <am_hal_pwrctrl_periph_enable>
  428cf8:	2005      	movs	r0, #5
  428cfa:	6823      	ldr	r3, [r4, #0]
  428cfc:	f7fe fdb6 	bl	42786c <am_hal_delay_us>
  428d00:	4879      	ldr	r0, [pc, #484]	@ (428ee8 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2f0>)
  428d02:	497a      	ldr	r1, [pc, #488]	@ (428eec <am_hal_sysctrl_clkmuxrst_low_power_init+0x2f4>)
  428d04:	6803      	ldr	r3, [r0, #0]
  428d06:	4a7a      	ldr	r2, [pc, #488]	@ (428ef0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2f8>)
  428d08:	f043 0301 	orr.w	r3, r3, #1
  428d0c:	6003      	str	r3, [r0, #0]
  428d0e:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
  428d12:	2000      	movs	r0, #0
  428d14:	f043 0301 	orr.w	r3, r3, #1
  428d18:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  428d1c:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
  428d20:	f5a1 11ab 	sub.w	r1, r1, #1400832	@ 0x156000
  428d24:	f043 0301 	orr.w	r3, r3, #1
  428d28:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  428d2c:	680b      	ldr	r3, [r1, #0]
  428d2e:	f502 42e0 	add.w	r2, r2, #28672	@ 0x7000
  428d32:	f023 0301 	bic.w	r3, r3, #1
  428d36:	600b      	str	r3, [r1, #0]
  428d38:	6813      	ldr	r3, [r2, #0]
  428d3a:	2101      	movs	r1, #1
  428d3c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
  428d40:	6013      	str	r3, [r2, #0]
  428d42:	f7ff fc87 	bl	428654 <am_hal_cachectrl_dcache_invalidate>
  428d46:	2001      	movs	r0, #1
  428d48:	f7fe fd90 	bl	42786c <am_hal_delay_us>
  428d4c:	4b64      	ldr	r3, [pc, #400]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428d4e:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428d52:	07dd      	lsls	r5, r3, #31
  428d54:	d508      	bpl.n	428d68 <am_hal_sysctrl_clkmuxrst_low_power_init+0x170>
  428d56:	2102      	movs	r1, #2
  428d58:	4b66      	ldr	r3, [pc, #408]	@ (428ef4 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2fc>)
  428d5a:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
  428d5e:	f361 0283 	bfi	r2, r1, #2, #2
  428d62:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
  428d66:	6823      	ldr	r3, [r4, #0]
  428d68:	2014      	movs	r0, #20
  428d6a:	f7fe fd7f 	bl	42786c <am_hal_delay_us>
  428d6e:	4a5e      	ldr	r2, [pc, #376]	@ (428ee8 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2f0>)
  428d70:	485e      	ldr	r0, [pc, #376]	@ (428eec <am_hal_sysctrl_clkmuxrst_low_power_init+0x2f4>)
  428d72:	6813      	ldr	r3, [r2, #0]
  428d74:	495e      	ldr	r1, [pc, #376]	@ (428ef0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2f8>)
  428d76:	f043 0301 	orr.w	r3, r3, #1
  428d7a:	6013      	str	r3, [r2, #0]
  428d7c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
  428d80:	4a5d      	ldr	r2, [pc, #372]	@ (428ef8 <am_hal_sysctrl_clkmuxrst_low_power_init+0x300>)
  428d82:	f043 0301 	orr.w	r3, r3, #1
  428d86:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
  428d8a:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
  428d8e:	201e      	movs	r0, #30
  428d90:	f043 0301 	orr.w	r3, r3, #1
  428d94:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  428d98:	6813      	ldr	r3, [r2, #0]
  428d9a:	f023 0301 	bic.w	r3, r3, #1
  428d9e:	6013      	str	r3, [r2, #0]
  428da0:	f7fd fece 	bl	426b40 <am_hal_pwrctrl_periph_disable>
  428da4:	201f      	movs	r0, #31
  428da6:	f7fd fecb 	bl	426b40 <am_hal_pwrctrl_periph_disable>
  428daa:	2020      	movs	r0, #32
  428dac:	f7fd fec8 	bl	426b40 <am_hal_pwrctrl_periph_disable>
  428db0:	2021      	movs	r0, #33	@ 0x21
  428db2:	f7fd fec5 	bl	426b40 <am_hal_pwrctrl_periph_disable>
  428db6:	201a      	movs	r0, #26
  428db8:	f7fd fec2 	bl	426b40 <am_hal_pwrctrl_periph_disable>
  428dbc:	201b      	movs	r0, #27
  428dbe:	f7fd febf 	bl	426b40 <am_hal_pwrctrl_periph_disable>
  428dc2:	4b47      	ldr	r3, [pc, #284]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428dc4:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428dc8:	0698      	lsls	r0, r3, #26
  428dca:	d52a      	bpl.n	428e22 <am_hal_sysctrl_clkmuxrst_low_power_init+0x22a>
  428dcc:	4b49      	ldr	r3, [pc, #292]	@ (428ef4 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2fc>)
  428dce:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
  428dd2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  428dd6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  428dda:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
  428dde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
  428de2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  428de6:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
  428dea:	f022 0220 	bic.w	r2, r2, #32
  428dee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  428df2:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
  428df6:	f042 0204 	orr.w	r2, r2, #4
  428dfa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  428dfe:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
  428e02:	f042 0202 	orr.w	r2, r2, #2
  428e06:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  428e0a:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
  428e0e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
  428e12:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  428e16:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
  428e1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
  428e1e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  428e22:	4b2f      	ldr	r3, [pc, #188]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428e24:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428e28:	06d1      	lsls	r1, r2, #27
  428e2a:	d454      	bmi.n	428ed6 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2de>
  428e2c:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428e30:	0692      	lsls	r2, r2, #26
  428e32:	d503      	bpl.n	428e3c <am_hal_sysctrl_clkmuxrst_low_power_init+0x244>
  428e34:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428e38:	065b      	lsls	r3, r3, #25
  428e3a:	d44c      	bmi.n	428ed6 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2de>
  428e3c:	4b28      	ldr	r3, [pc, #160]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428e3e:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428e42:	0715      	lsls	r5, r2, #28
  428e44:	d42c      	bmi.n	428ea0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2a8>
  428e46:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428e4a:	0694      	lsls	r4, r2, #26
  428e4c:	d503      	bpl.n	428e56 <am_hal_sysctrl_clkmuxrst_low_power_init+0x25e>
  428e4e:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428e52:	0658      	lsls	r0, r3, #25
  428e54:	d524      	bpl.n	428ea0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2a8>
  428e56:	4b22      	ldr	r3, [pc, #136]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428e58:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428e5c:	0759      	lsls	r1, r3, #29
  428e5e:	d505      	bpl.n	428e6c <am_hal_sysctrl_clkmuxrst_low_power_init+0x274>
  428e60:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
  428e64:	6c53      	ldr	r3, [r2, #68]	@ 0x44
  428e66:	f023 0320 	bic.w	r3, r3, #32
  428e6a:	6453      	str	r3, [r2, #68]	@ 0x44
  428e6c:	4b1c      	ldr	r3, [pc, #112]	@ (428ee0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2e8>)
  428e6e:	f8d3 2858 	ldr.w	r2, [r3, #2136]	@ 0x858
  428e72:	07d2      	lsls	r2, r2, #31
  428e74:	d404      	bmi.n	428e80 <am_hal_sysctrl_clkmuxrst_low_power_init+0x288>
  428e76:	f8d3 3858 	ldr.w	r3, [r3, #2136]	@ 0x858
  428e7a:	079b      	lsls	r3, r3, #30
  428e7c:	f57f aeca 	bpl.w	428c14 <am_hal_sysctrl_clkmuxrst_low_power_init+0x1c>
  428e80:	4a1c      	ldr	r2, [pc, #112]	@ (428ef4 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2fc>)
  428e82:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
  428e86:	f023 0301 	bic.w	r3, r3, #1
  428e8a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  428e8e:	e6c1      	b.n	428c14 <am_hal_sysctrl_clkmuxrst_low_power_init+0x1c>
  428e90:	4a18      	ldr	r2, [pc, #96]	@ (428ef4 <am_hal_sysctrl_clkmuxrst_low_power_init+0x2fc>)
  428e92:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
  428e96:	f043 0301 	orr.w	r3, r3, #1
  428e9a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
  428e9e:	e6e8      	b.n	428c72 <am_hal_sysctrl_clkmuxrst_low_power_init+0x7a>
  428ea0:	2100      	movs	r1, #0
  428ea2:	2004      	movs	r0, #4
  428ea4:	f001 fc86 	bl	42a7b4 <am_hal_mcuctrl_control>
  428ea8:	e7d5      	b.n	428e56 <am_hal_sysctrl_clkmuxrst_low_power_init+0x25e>
  428eaa:	2100      	movs	r1, #0
  428eac:	2002      	movs	r0, #2
  428eae:	f001 fc81 	bl	42a7b4 <am_hal_mcuctrl_control>
  428eb2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
  428eb6:	f7fe fcd9 	bl	42786c <am_hal_delay_us>
  428eba:	e6f5      	b.n	428ca8 <am_hal_sysctrl_clkmuxrst_low_power_init+0xb0>
  428ebc:	230a      	movs	r3, #10
  428ebe:	2400      	movs	r4, #0
  428ec0:	a903      	add	r1, sp, #12
  428ec2:	f363 0403 	bfi	r4, r3, #0, #4
  428ec6:	200f      	movs	r0, #15
  428ec8:	f001 fc1e 	bl	42a708 <am_hal_gpio_pinconfig_get>
  428ecc:	4621      	mov	r1, r4
  428ece:	200f      	movs	r0, #15
  428ed0:	f001 fc2a 	bl	42a728 <am_hal_gpio_pinconfig>
  428ed4:	e6f7      	b.n	428cc6 <am_hal_sysctrl_clkmuxrst_low_power_init+0xce>
  428ed6:	9903      	ldr	r1, [sp, #12]
  428ed8:	200f      	movs	r0, #15
  428eda:	f001 fc25 	bl	42a728 <am_hal_gpio_pinconfig>
  428ede:	e7ad      	b.n	428e3c <am_hal_sysctrl_clkmuxrst_low_power_init+0x244>
  428ee0:	40008000 	.word	0x40008000
  428ee4:	47ff0000 	.word	0x47ff0000
  428ee8:	40201000 	.word	0x40201000
  428eec:	40208000 	.word	0x40208000
  428ef0:	40209000 	.word	0x40209000
  428ef4:	40020000 	.word	0x40020000
  428ef8:	400b2000 	.word	0x400b2000
  428efc:	4c2a      	ldr	r4, [pc, #168]	@ (428fa8 <am_hal_sysctrl_clkmuxrst_low_power_init+0x3b0>)
  428efe:	4a2b      	ldr	r2, [pc, #172]	@ (428fac <am_hal_sysctrl_clkmuxrst_low_power_init+0x3b4>)
  428f00:	f8d4 34d8 	ldr.w	r3, [r4, #1240]	@ 0x4d8
  428f04:	2005      	movs	r0, #5
  428f06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  428f0a:	f8c4 34d8 	str.w	r3, [r4, #1240]	@ 0x4d8
  428f0e:	f8d4 34d8 	ldr.w	r3, [r4, #1240]	@ 0x4d8
  428f12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
  428f16:	f8c4 34d8 	str.w	r3, [r4, #1240]	@ 0x4d8
  428f1a:	6813      	ldr	r3, [r2, #0]
  428f1c:	f7fe fca6 	bl	42786c <am_hal_delay_us>
  428f20:	f8d4 34d8 	ldr.w	r3, [r4, #1240]	@ 0x4d8
  428f24:	f023 0302 	bic.w	r3, r3, #2
  428f28:	f8c4 34d8 	str.w	r3, [r4, #1240]	@ 0x4d8
  428f2c:	f8d4 34d8 	ldr.w	r3, [r4, #1240]	@ 0x4d8
  428f30:	f023 0304 	bic.w	r3, r3, #4
  428f34:	f8c4 34d8 	str.w	r3, [r4, #1240]	@ 0x4d8
  428f38:	f8d5 3858 	ldr.w	r3, [r5, #2136]	@ 0x858
  428f3c:	f8d4 24d8 	ldr.w	r2, [r4, #1240]	@ 0x4d8
  428f40:	f3c3 1380 	ubfx	r3, r3, #6, #1
  428f44:	f363 1245 	bfi	r2, r3, #5, #1
  428f48:	f8c4 24d8 	str.w	r2, [r4, #1240]	@ 0x4d8
  428f4c:	f8d4 34d8 	ldr.w	r3, [r4, #1240]	@ 0x4d8
  428f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  428f54:	f8c4 34d8 	str.w	r3, [r4, #1240]	@ 0x4d8
  428f58:	f8d4 34d8 	ldr.w	r3, [r4, #1240]	@ 0x4d8
  428f5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  428f60:	f8c4 34d8 	str.w	r3, [r4, #1240]	@ 0x4d8
  428f64:	e6b5      	b.n	428cd2 <am_hal_sysctrl_clkmuxrst_low_power_init+0xda>
  428f66:	f04f 2440 	mov.w	r4, #1073758208	@ 0x40004000
  428f6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  428f6e:	2501      	movs	r5, #1
  428f70:	6c62      	ldr	r2, [r4, #68]	@ 0x44
  428f72:	490f      	ldr	r1, [pc, #60]	@ (428fb0 <am_hal_sysctrl_clkmuxrst_low_power_init+0x3b8>)
  428f74:	f042 0220 	orr.w	r2, r2, #32
  428f78:	6462      	str	r2, [r4, #68]	@ 0x44
  428f7a:	20c8      	movs	r0, #200	@ 0xc8
  428f7c:	461a      	mov	r2, r3
  428f7e:	9500      	str	r5, [sp, #0]
  428f80:	f7fe fcc6 	bl	427910 <am_hal_delay_us_status_check>
  428f84:	2005      	movs	r0, #5
  428f86:	f7fe fc71 	bl	42786c <am_hal_delay_us>
  428f8a:	e67e      	b.n	428c8a <am_hal_sysctrl_clkmuxrst_low_power_init+0x92>
  428f8c:	2001      	movs	r0, #1
  428f8e:	4b06      	ldr	r3, [pc, #24]	@ (428fa8 <am_hal_sysctrl_clkmuxrst_low_power_init+0x3b0>)
  428f90:	4906      	ldr	r1, [pc, #24]	@ (428fac <am_hal_sysctrl_clkmuxrst_low_power_init+0x3b4>)
  428f92:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	@ 0x4e8
  428f96:	f360 0283 	bfi	r2, r0, #2, #2
  428f9a:	f8c3 24e8 	str.w	r2, [r3, #1256]	@ 0x4e8
  428f9e:	680b      	ldr	r3, [r1, #0]
  428fa0:	f7fe fc64 	bl	42786c <am_hal_delay_us>
  428fa4:	e66b      	b.n	428c7e <am_hal_sysctrl_clkmuxrst_low_power_init+0x86>
  428fa6:	bf00      	nop
  428fa8:	40020000 	.word	0x40020000
  428fac:	47ff0000 	.word	0x47ff0000
  428fb0:	40004030 	.word	0x40004030

00428fb4 <am_hal_timer_config>:
  428fb4:	280a      	cmp	r0, #10
  428fb6:	d04d      	beq.n	429054 <am_hal_timer_config+0xa0>
  428fb8:	b470      	push	{r4, r5, r6}
  428fba:	e9d1 6503 	ldrd	r6, r5, [r1, #12]
  428fbe:	788a      	ldrb	r2, [r1, #2]
  428fc0:	694c      	ldr	r4, [r1, #20]
  428fc2:	1e53      	subs	r3, r2, #1
  428fc4:	2b0c      	cmp	r3, #12
  428fc6:	d80a      	bhi.n	428fde <am_hal_timer_config+0x2a>
  428fc8:	e8df f003 	tbb	[pc, r3]
  428fcc:	1009100c 	.word	0x1009100c
  428fd0:	09090909 	.word	0x09090909
  428fd4:	07090909 	.word	0x07090909
  428fd8:	07          	.byte	0x07
  428fd9:	00          	.byte	0x00
  428fda:	2e3f      	cmp	r6, #63	@ 0x3f
  428fdc:	d906      	bls.n	428fec <am_hal_timer_config+0x38>
  428fde:	bc70      	pop	{r4, r5, r6}
  428fe0:	2007      	movs	r0, #7
  428fe2:	4770      	bx	lr
  428fe4:	1c63      	adds	r3, r4, #1
  428fe6:	d001      	beq.n	428fec <am_hal_timer_config+0x38>
  428fe8:	42a5      	cmp	r5, r4
  428fea:	d9f8      	bls.n	428fde <am_hal_timer_config+0x2a>
  428fec:	f100 7000 	add.w	r0, r0, #33554432	@ 0x2000000
  428ff0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  428ff4:	0143      	lsls	r3, r0, #5
  428ff6:	7908      	ldrb	r0, [r1, #4]
  428ff8:	0112      	lsls	r2, r2, #4
  428ffa:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
  428ffe:	78c8      	ldrb	r0, [r1, #3]
  429000:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  429004:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
  429008:	7948      	ldrb	r0, [r1, #5]
  42900a:	88ce      	ldrh	r6, [r1, #6]
  42900c:	f8b1 c000 	ldrh.w	ip, [r1]
  429010:	0441      	lsls	r1, r0, #17
  429012:	4811      	ldr	r0, [pc, #68]	@ (429058 <am_hal_timer_config+0xa4>)
  429014:	f401 21c0 	and.w	r1, r1, #393216	@ 0x60000
  429018:	ea00 2c0c 	and.w	ip, r0, ip, lsl #8
  42901c:	ea42 020c 	orr.w	r2, r2, ip
  429020:	430a      	orrs	r2, r1
  429022:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
  429026:	ea00 2006 	and.w	r0, r0, r6, lsl #8
  42902a:	f021 0101 	bic.w	r1, r1, #1
  42902e:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
  429032:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  429036:	f8c3 0210 	str.w	r0, [r3, #528]	@ 0x210
  42903a:	f8c3 5208 	str.w	r5, [r3, #520]	@ 0x208
  42903e:	f8c3 420c 	str.w	r4, [r3, #524]	@ 0x20c
  429042:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
  429046:	2000      	movs	r0, #0
  429048:	f042 0202 	orr.w	r2, r2, #2
  42904c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  429050:	bc70      	pop	{r4, r5, r6}
  429052:	4770      	bx	lr
  429054:	2003      	movs	r0, #3
  429056:	4770      	bx	lr
  429058:	0001ff00 	.word	0x0001ff00

0042905c <am_hal_timer_default_config_set>:
  42905c:	b430      	push	{r4, r5}
  42905e:	4603      	mov	r3, r0
  429060:	f04f 1501 	mov.w	r5, #65537	@ 0x10001
  429064:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
  429068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  42906c:	2100      	movs	r1, #0
  42906e:	e9c3 5400 	strd	r5, r4, [r3]
  429072:	4608      	mov	r0, r1
  429074:	bc30      	pop	{r4, r5}
  429076:	e9c3 1203 	strd	r1, r2, [r3, #12]
  42907a:	615a      	str	r2, [r3, #20]
  42907c:	4770      	bx	lr
  42907e:	bf00      	nop

00429080 <am_hal_timer_clear>:
  429080:	280a      	cmp	r0, #10
  429082:	d028      	beq.n	4290d6 <am_hal_timer_clear+0x56>
  429084:	b510      	push	{r4, lr}
  429086:	4604      	mov	r4, r0
  429088:	b082      	sub	sp, #8
  42908a:	f7ff fbdb 	bl	428844 <am_hal_interrupt_master_disable>
  42908e:	f104 7300 	add.w	r3, r4, #33554432	@ 0x2000000
  429092:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  429096:	9001      	str	r0, [sp, #4]
  429098:	015b      	lsls	r3, r3, #5
  42909a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
  42909e:	f022 0201 	bic.w	r2, r2, #1
  4290a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  4290a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
  4290aa:	f042 0202 	orr.w	r2, r2, #2
  4290ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  4290b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
  4290b6:	f022 0202 	bic.w	r2, r2, #2
  4290ba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  4290be:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
  4290c2:	f042 0201 	orr.w	r2, r2, #1
  4290c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  4290ca:	9801      	ldr	r0, [sp, #4]
  4290cc:	f7ff fbbe 	bl	42884c <am_hal_interrupt_master_set>
  4290d0:	2000      	movs	r0, #0
  4290d2:	b002      	add	sp, #8
  4290d4:	bd10      	pop	{r4, pc}
  4290d6:	2003      	movs	r0, #3
  4290d8:	4770      	bx	lr
  4290da:	bf00      	nop

004290dc <am_hal_timer_read>:
  4290dc:	4603      	mov	r3, r0
  4290de:	480a      	ldr	r0, [pc, #40]	@ (429108 <am_hal_timer_read+0x2c>)
  4290e0:	015a      	lsls	r2, r3, #5
  4290e2:	2b0a      	cmp	r3, #10
  4290e4:	4410      	add	r0, r2
  4290e6:	d00c      	beq.n	429102 <am_hal_timer_read+0x26>
  4290e8:	b500      	push	{lr}
  4290ea:	b085      	sub	sp, #20
  4290ec:	a901      	add	r1, sp, #4
  4290ee:	f001 fafd 	bl	42a6ec <am_hal_triple_read>
  4290f2:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
  4290f6:	4283      	cmp	r3, r0
  4290f8:	d000      	beq.n	4290fc <am_hal_timer_read+0x20>
  4290fa:	9803      	ldr	r0, [sp, #12]
  4290fc:	b005      	add	sp, #20
  4290fe:	f85d fb04 	ldr.w	pc, [sp], #4
  429102:	2003      	movs	r0, #3
  429104:	4770      	bx	lr
  429106:	bf00      	nop
  429108:	40008204 	.word	0x40008204

0042910c <am_hal_timer_interrupt_enable>:
  42910c:	4601      	mov	r1, r0
  42910e:	4a03      	ldr	r2, [pc, #12]	@ (42911c <am_hal_timer_interrupt_enable+0x10>)
  429110:	2000      	movs	r0, #0
  429112:	6e13      	ldr	r3, [r2, #96]	@ 0x60
  429114:	430b      	orrs	r3, r1
  429116:	6613      	str	r3, [r2, #96]	@ 0x60
  429118:	4770      	bx	lr
  42911a:	bf00      	nop
  42911c:	40008000 	.word	0x40008000

00429120 <am_hal_timer_interrupt_clear>:
  429120:	4603      	mov	r3, r0
  429122:	4a02      	ldr	r2, [pc, #8]	@ (42912c <am_hal_timer_interrupt_clear+0xc>)
  429124:	2000      	movs	r0, #0
  429126:	6693      	str	r3, [r2, #104]	@ 0x68
  429128:	6e53      	ldr	r3, [r2, #100]	@ 0x64
  42912a:	4770      	bx	lr
  42912c:	40008000 	.word	0x40008000

00429130 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0>:
  429130:	b5f0      	push	{r4, r5, r6, r7, lr}
  429132:	4957      	ldr	r1, [pc, #348]	@ (429290 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x160>)
  429134:	4604      	mov	r4, r0
  429136:	698d      	ldr	r5, [r1, #24]
  429138:	b083      	sub	sp, #12
  42913a:	f3c5 038a 	ubfx	r3, r5, #2, #11
  42913e:	f3c5 0c0c 	ubfx	ip, r5, #0, #13
  429142:	f005 0503 	and.w	r5, r5, #3
  429146:	2b00      	cmp	r3, #0
  429148:	d05f      	beq.n	42920a <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0xda>
  42914a:	466e      	mov	r6, sp
  42914c:	ea4f 0e83 	mov.w	lr, r3, lsl #2
  429150:	f1ae 0e04 	sub.w	lr, lr, #4
  429154:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  429158:	f10e 0e01 	add.w	lr, lr, #1
  42915c:	f04e e001 	dls	lr, lr
  429160:	4633      	mov	r3, r6
  429162:	6a0a      	ldr	r2, [r1, #32]
  429164:	f843 2b04 	str.w	r2, [r3], #4
  429168:	f00f c805 	le	lr, 429162 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x32>
  42916c:	b1a5      	cbz	r5, 429198 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x68>
  42916e:	4a48      	ldr	r2, [pc, #288]	@ (429290 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x160>)
  429170:	f02c 0303 	bic.w	r3, ip, #3
  429174:	f892 1020 	ldrb.w	r1, [r2, #32]
  429178:	3308      	adds	r3, #8
  42917a:	446b      	add	r3, sp
  42917c:	2d01      	cmp	r5, #1
  42917e:	f803 1c08 	strb.w	r1, [r3, #-8]
  429182:	d009      	beq.n	429198 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x68>
  429184:	f892 1020 	ldrb.w	r1, [r2, #32]
  429188:	2d03      	cmp	r5, #3
  42918a:	f803 1c07 	strb.w	r1, [r3, #-7]
  42918e:	d103      	bne.n	429198 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x68>
  429190:	f892 2020 	ldrb.w	r2, [r2, #32]
  429194:	f803 2c06 	strb.w	r2, [r3, #-6]
  429198:	2501      	movs	r5, #1
  42919a:	f89d 3001 	ldrb.w	r3, [sp, #1]
  42919e:	f884 5056 	strb.w	r5, [r4, #86]	@ 0x56
  4291a2:	2b03      	cmp	r3, #3
  4291a4:	d005      	beq.n	4291b2 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x82>
  4291a6:	4630      	mov	r0, r6
  4291a8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	@ 0x1b0
  4291ac:	4798      	blx	r3
  4291ae:	b003      	add	sp, #12
  4291b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4291b2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  4291b6:	2b02      	cmp	r3, #2
  4291b8:	d1f5      	bne.n	4291a6 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x76>
  4291ba:	4b35      	ldr	r3, [pc, #212]	@ (429290 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x160>)
  4291bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
  4291c0:	68da      	ldr	r2, [r3, #12]
  4291c2:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
  4291c6:	60da      	str	r2, [r3, #12]
  4291c8:	68da      	ldr	r2, [r3, #12]
  4291ca:	60da      	str	r2, [r3, #12]
  4291cc:	691a      	ldr	r2, [r3, #16]
  4291ce:	f422 0296 	bic.w	r2, r2, #4915200	@ 0x4b0000
  4291d2:	f442 0290 	orr.w	r2, r2, #4718592	@ 0x480000
  4291d6:	611a      	str	r2, [r3, #16]
  4291d8:	691a      	ldr	r2, [r3, #16]
  4291da:	f422 2230 	bic.w	r2, r2, #720896	@ 0xb0000
  4291de:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
  4291e2:	611a      	str	r2, [r3, #16]
  4291e4:	f7fe fb42 	bl	42786c <am_hal_delay_us>
  4291e8:	6823      	ldr	r3, [r4, #0]
  4291ea:	4a2a      	ldr	r2, [pc, #168]	@ (429294 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x164>)
  4291ec:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
  4291f0:	4293      	cmp	r3, r2
  4291f2:	d1d8      	bne.n	4291a6 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x76>
  4291f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
  4291f8:	f884 51a4 	strb.w	r5, [r4, #420]	@ 0x1a4
  4291fc:	3b01      	subs	r3, #1
  4291fe:	2b03      	cmp	r3, #3
  429200:	d8d1      	bhi.n	4291a6 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x76>
  429202:	e8df f003 	tbb	[pc, r3]
  429206:	0a10      	.short	0x0a10
  429208:	1604      	.short	0x1604
  42920a:	466e      	mov	r6, sp
  42920c:	e7ae      	b.n	42916c <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x3c>
  42920e:	4a20      	ldr	r2, [pc, #128]	@ (429290 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x160>)
  429210:	68d3      	ldr	r3, [r2, #12]
  429212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  429216:	60d3      	str	r3, [r2, #12]
  429218:	e7fe      	b.n	429218 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0xe8>
  42921a:	4a1d      	ldr	r2, [pc, #116]	@ (429290 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x160>)
  42921c:	68d3      	ldr	r3, [r2, #12]
  42921e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
  429222:	60d3      	str	r3, [r2, #12]
  429224:	e7fe      	b.n	429224 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0xf4>
  429226:	4a1a      	ldr	r2, [pc, #104]	@ (429290 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x160>)
  429228:	68d3      	ldr	r3, [r2, #12]
  42922a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  42922e:	60d3      	str	r3, [r2, #12]
  429230:	e7fe      	b.n	429230 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x100>
  429232:	2400      	movs	r4, #0
  429234:	f04f 37aa 	mov.w	r7, #2863311530	@ 0xaaaaaaaa
  429238:	f04f 36ee 	mov.w	r6, #4008636142	@ 0xeeeeeeee
  42923c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  429240:	257e      	movs	r5, #126	@ 0x7e
  429242:	4b13      	ldr	r3, [pc, #76]	@ (429290 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x160>)
  429244:	4914      	ldr	r1, [pc, #80]	@ (429298 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x168>)
  429246:	68da      	ldr	r2, [r3, #12]
  429248:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
  42924c:	60da      	str	r2, [r3, #12]
  42924e:	68da      	ldr	r2, [r3, #12]
  429250:	60da      	str	r2, [r3, #12]
  429252:	4a12      	ldr	r2, [pc, #72]	@ (42929c <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x16c>)
  429254:	621c      	str	r4, [r3, #32]
  429256:	621c      	str	r4, [r3, #32]
  429258:	621a      	str	r2, [r3, #32]
  42925a:	4a11      	ldr	r2, [pc, #68]	@ (4292a0 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x170>)
  42925c:	621f      	str	r7, [r3, #32]
  42925e:	621a      	str	r2, [r3, #32]
  429260:	4a10      	ldr	r2, [pc, #64]	@ (4292a4 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x174>)
  429262:	621e      	str	r6, [r3, #32]
  429264:	4c10      	ldr	r4, [pc, #64]	@ (4292a8 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x178>)
  429266:	621a      	str	r2, [r3, #32]
  429268:	4a10      	ldr	r2, [pc, #64]	@ (4292ac <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x17c>)
  42926a:	6218      	str	r0, [r3, #32]
  42926c:	6218      	str	r0, [r3, #32]
  42926e:	621c      	str	r4, [r3, #32]
  429270:	6219      	str	r1, [r3, #32]
  429272:	621a      	str	r2, [r3, #32]
  429274:	6219      	str	r1, [r3, #32]
  429276:	f883 5020 	strb.w	r5, [r3, #32]
  42927a:	691a      	ldr	r2, [r3, #16]
  42927c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
  429280:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
  429284:	611a      	str	r2, [r3, #16]
  429286:	68da      	ldr	r2, [r3, #12]
  429288:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
  42928c:	60da      	str	r2, [r3, #12]
  42928e:	e7fe      	b.n	42928e <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0+0x15e>
  429290:	400b0000 	.word	0x400b0000
  429294:	01ea9e06 	.word	0x01ea9e06
  429298:	fdfbf7ef 	.word	0xfdfbf7ef
  42929c:	aaaaaa00 	.word	0xaaaaaa00
  4292a0:	eeeeeeaa 	.word	0xeeeeeeaa
  4292a4:	fffffeee 	.word	0xfffffeee
  4292a8:	dfbf7fff 	.word	0xdfbf7fff
  4292ac:	dfbf7efc 	.word	0xdfbf7efc

004292b0 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0>:
  4292b0:	4b3a      	ldr	r3, [pc, #232]	@ (42939c <am_hal_usb_out_ep_dma1_adma_handling.constprop.0+0xec>)
  4292b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4292b4:	68dc      	ldr	r4, [r3, #12]
  4292b6:	460a      	mov	r2, r1
  4292b8:	f424 2470 	bic.w	r4, r4, #983040	@ 0xf0000
  4292bc:	60dc      	str	r4, [r3, #12]
  4292be:	68dc      	ldr	r4, [r3, #12]
  4292c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  4292c4:	60dc      	str	r4, [r3, #12]
  4292c6:	6959      	ldr	r1, [r3, #20]
  4292c8:	0249      	lsls	r1, r1, #9
  4292ca:	d40a      	bmi.n	4292e2 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0+0x32>
  4292cc:	4684      	mov	ip, r0
  4292ce:	2001      	movs	r0, #1
  4292d0:	4933      	ldr	r1, [pc, #204]	@ (4293a0 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0+0xf0>)
  4292d2:	f102 0e04 	add.w	lr, r2, #4
  4292d6:	6e4d      	ldr	r5, [r1, #100]	@ 0x64
  4292d8:	fa00 f40e 	lsl.w	r4, r0, lr
  4292dc:	4225      	tst	r5, r4
  4292de:	d107      	bne.n	4292f0 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0+0x40>
  4292e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4292e2:	695a      	ldr	r2, [r3, #20]
  4292e4:	f422 0282 	bic.w	r2, r2, #4259840	@ 0x410000
  4292e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
  4292ec:	615a      	str	r2, [r3, #20]
  4292ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4292f0:	6e8d      	ldr	r5, [r1, #104]	@ 0x68
  4292f2:	fa00 f602 	lsl.w	r6, r0, r2
  4292f6:	4325      	orrs	r5, r4
  4292f8:	668d      	str	r5, [r1, #104]	@ 0x68
  4292fa:	6c8d      	ldr	r5, [r1, #72]	@ 0x48
  4292fc:	ea25 0404 	bic.w	r4, r5, r4
  429300:	648c      	str	r4, [r1, #72]	@ 0x48
  429302:	6959      	ldr	r1, [r3, #20]
  429304:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
  429308:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
  42930c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
  429310:	6159      	str	r1, [r3, #20]
  429312:	4924      	ldr	r1, [pc, #144]	@ (4293a4 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0+0xf4>)
  429314:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
  429318:	7a1d      	ldrb	r5, [r3, #8]
  42931a:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
  42931e:	ea25 0506 	bic.w	r5, r5, r6
  429322:	ebce 06ce 	rsb	r6, lr, lr, lsl #3
  429326:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  42932a:	eb0c 06c6 	add.w	r6, ip, r6, lsl #3
  42932e:	f8d6 708c 	ldr.w	r7, [r6, #140]	@ 0x8c
  429332:	721d      	strb	r5, [r3, #8]
  429334:	f8d6 50a0 	ldr.w	r5, [r6, #160]	@ 0xa0
  429338:	ea4f 04ce 	mov.w	r4, lr, lsl #3
  42933c:	1bc9      	subs	r1, r1, r7
  42933e:	b195      	cbz	r5, 429366 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0+0xb6>
  429340:	f89c 51ba 	ldrb.w	r5, [ip, #442]	@ 0x1ba
  429344:	fa00 f00e 	lsl.w	r0, r0, lr
  429348:	462e      	mov	r6, r5
  42934a:	f3c5 0544 	ubfx	r5, r5, #1, #5
  42934e:	ea25 0500 	bic.w	r5, r5, r0
  429352:	f365 0645 	bfi	r6, r5, #1, #5
  429356:	f88c 61ba 	strb.w	r6, [ip, #442]	@ 0x1ba
  42935a:	b2f6      	uxtb	r6, r6
  42935c:	7ad8      	ldrb	r0, [r3, #11]
  42935e:	b9ce      	cbnz	r6, 429394 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0+0xe4>
  429360:	f000 00f7 	and.w	r0, r0, #247	@ 0xf7
  429364:	72d8      	strb	r0, [r3, #11]
  429366:	2300      	movs	r3, #0
  429368:	eba4 040e 	sub.w	r4, r4, lr
  42936c:	00e4      	lsls	r4, r4, #3
  42936e:	348c      	adds	r4, #140	@ 0x8c
  429370:	eb0c 0504 	add.w	r5, ip, r4
  429374:	f84c 3004 	str.w	r3, [ip, r4]
  429378:	606b      	str	r3, [r5, #4]
  42937a:	60ab      	str	r3, [r5, #8]
  42937c:	60eb      	str	r3, [r5, #12]
  42937e:	612b      	str	r3, [r5, #16]
  429380:	616b      	str	r3, [r5, #20]
  429382:	61ab      	str	r3, [r5, #24]
  429384:	f8dc 41b4 	ldr.w	r4, [ip, #436]	@ 0x1b4
  429388:	4610      	mov	r0, r2
  42938a:	46a4      	mov	ip, r4
  42938c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  429390:	461a      	mov	r2, r3
  429392:	4760      	bx	ip
  429394:	f040 0008 	orr.w	r0, r0, #8
  429398:	72d8      	strb	r0, [r3, #11]
  42939a:	e7e4      	b.n	429366 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0+0xb6>
  42939c:	400b0000 	.word	0x400b0000
  4293a0:	400b2000 	.word	0x400b2000
  4293a4:	400b2200 	.word	0x400b2200

004293a8 <am_hal_usb_out_ep_dma0_handling.constprop.0>:
  4293a8:	4b9c      	ldr	r3, [pc, #624]	@ (42961c <am_hal_usb_out_ep_dma0_handling.constprop.0+0x274>)
  4293aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4293ae:	68dd      	ldr	r5, [r3, #12]
  4293b0:	460a      	mov	r2, r1
  4293b2:	f425 2570 	bic.w	r5, r5, #983040	@ 0xf0000
  4293b6:	60dd      	str	r5, [r3, #12]
  4293b8:	68dd      	ldr	r5, [r3, #12]
  4293ba:	b084      	sub	sp, #16
  4293bc:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  4293c0:	60dd      	str	r5, [r3, #12]
  4293c2:	6959      	ldr	r1, [r3, #20]
  4293c4:	024c      	lsls	r4, r1, #9
  4293c6:	f100 80c0 	bmi.w	42954a <am_hal_usb_out_ep_dma0_handling.constprop.0+0x1a2>
  4293ca:	1e56      	subs	r6, r2, #1
  4293cc:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
  4293d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  4293d4:	4604      	mov	r4, r0
  4293d6:	f891 0098 	ldrb.w	r0, [r1, #152]	@ 0x98
  4293da:	699b      	ldr	r3, [r3, #24]
  4293dc:	0700      	lsls	r0, r0, #28
  4293de:	ea4f 05c6 	mov.w	r5, r6, lsl #3
  4293e2:	d46e      	bmi.n	4294c2 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x11a>
  4293e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
  4293e8:	b91b      	cbnz	r3, 4293f2 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x4a>
  4293ea:	e9d1 0324 	ldrd	r0, r3, [r1, #144]	@ 0x90
  4293ee:	4298      	cmp	r0, r3
  4293f0:	d067      	beq.n	4294c2 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x11a>
  4293f2:	4b8a      	ldr	r3, [pc, #552]	@ (42961c <am_hal_usb_out_ep_dma0_handling.constprop.0+0x274>)
  4293f4:	6959      	ldr	r1, [r3, #20]
  4293f6:	03c9      	lsls	r1, r1, #15
  4293f8:	d560      	bpl.n	4294bc <am_hal_usb_out_ep_dma0_handling.constprop.0+0x114>
  4293fa:	699f      	ldr	r7, [r3, #24]
  4293fc:	1ba9      	subs	r1, r5, r6
  4293fe:	eb04 0346 	add.w	r3, r4, r6, lsl #1
  429402:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
  429406:	f8b3 8064 	ldrh.w	r8, [r3, #100]	@ 0x64
  42940a:	f3c7 070c 	ubfx	r7, r7, #0, #13
  42940e:	e9d1 0324 	ldrd	r0, r3, [r1, #144]	@ 0x90
  429412:	f8d1 108c 	ldr.w	r1, [r1, #140]	@ 0x8c
  429416:	1ac0      	subs	r0, r0, r3
  429418:	42bb      	cmp	r3, r7
  42941a:	4401      	add	r1, r0
  42941c:	f080 809e 	bcs.w	42955c <am_hal_usb_out_ep_dma0_handling.constprop.0+0x1b4>
  429420:	2b00      	cmp	r3, #0
  429422:	d03c      	beq.n	42949e <am_hal_usb_out_ep_dma0_handling.constprop.0+0xf6>
  429424:	2000      	movs	r0, #0
  429426:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
  42942a:	f88d 000d 	strb.w	r0, [sp, #13]
  42942e:	487c      	ldr	r0, [pc, #496]	@ (429620 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x278>)
  429430:	e9cd 1301 	strd	r1, r3, [sp, #4]
  429434:	f88d 200c 	strb.w	r2, [sp, #12]
  429438:	f8c0 7080 	str.w	r7, [r0, #128]	@ 0x80
  42943c:	f3bf 8f4f 	dsb	sy
  429440:	f3bf 8f6f 	isb	sy
  429444:	4877      	ldr	r0, [pc, #476]	@ (429624 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x27c>)
  429446:	7807      	ldrb	r7, [r0, #0]
  429448:	2f00      	cmp	r7, #0
  42944a:	f040 80e1 	bne.w	429610 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x268>
  42944e:	f04f 0c01 	mov.w	ip, #1
  429452:	f04f 0e03 	mov.w	lr, #3
  429456:	f880 c000 	strb.w	ip, [r0]
  42945a:	4873      	ldr	r0, [pc, #460]	@ (429628 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x280>)
  42945c:	f8d0 c02c 	ldr.w	ip, [r0, #44]	@ 0x2c
  429460:	f02c 0c01 	bic.w	ip, ip, #1
  429464:	f8c0 c02c 	str.w	ip, [r0, #44]	@ 0x2c
  429468:	6301      	str	r1, [r0, #48]	@ 0x30
  42946a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  42946c:	f362 0143 	bfi	r1, r2, #1, #3
  429470:	62c1      	str	r1, [r0, #44]	@ 0x2c
  429472:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  429474:	f367 1204 	bfi	r2, r7, #4, #1
  429478:	62c2      	str	r2, [r0, #44]	@ 0x2c
  42947a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  42947c:	f367 1245 	bfi	r2, r7, #5, #1
  429480:	62c2      	str	r2, [r0, #44]	@ 0x2c
  429482:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  429484:	f363 421b 	bfi	r2, r3, #16, #12
  429488:	62c2      	str	r2, [r0, #44]	@ 0x2c
  42948a:	f8c0 e034 	str.w	lr, [r0, #52]	@ 0x34
  42948e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  429490:	f043 0301 	orr.w	r3, r3, #1
  429494:	62c3      	str	r3, [r0, #44]	@ 0x2c
  429496:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
  42949a:	4b61      	ldr	r3, [pc, #388]	@ (429620 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x278>)
  42949c:	601a      	str	r2, [r3, #0]
  42949e:	2200      	movs	r2, #0
  4294a0:	1bab      	subs	r3, r5, r6
  4294a2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  4294a6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  4294aa:	1bad      	subs	r5, r5, r6
  4294ac:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  4294b0:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
  4294b4:	f043 0308 	orr.w	r3, r3, #8
  4294b8:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
  4294bc:	b004      	add	sp, #16
  4294be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4294c2:	f04f 0c01 	mov.w	ip, #1
  4294c6:	4855      	ldr	r0, [pc, #340]	@ (42961c <am_hal_usb_out_ep_dma0_handling.constprop.0+0x274>)
  4294c8:	fa0c f702 	lsl.w	r7, ip, r2
  4294cc:	7a01      	ldrb	r1, [r0, #8]
  4294ce:	1bab      	subs	r3, r5, r6
  4294d0:	ea21 0107 	bic.w	r1, r1, r7
  4294d4:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
  4294d8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  4294dc:	7201      	strb	r1, [r0, #8]
  4294de:	e9d3 7124 	ldrd	r7, r1, [r3, #144]	@ 0x90
  4294e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
  4294e6:	1a79      	subs	r1, r7, r1
  4294e8:	b19b      	cbz	r3, 429512 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x16a>
  4294ea:	f894 31ba 	ldrb.w	r3, [r4, #442]	@ 0x1ba
  4294ee:	fa0c fc06 	lsl.w	ip, ip, r6
  4294f2:	461f      	mov	r7, r3
  4294f4:	f3c3 0344 	ubfx	r3, r3, #1, #5
  4294f8:	ea23 030c 	bic.w	r3, r3, ip
  4294fc:	f363 0745 	bfi	r7, r3, #1, #5
  429500:	f884 71ba 	strb.w	r7, [r4, #442]	@ 0x1ba
  429504:	b2ff      	uxtb	r7, r7
  429506:	7ac3      	ldrb	r3, [r0, #11]
  429508:	2f00      	cmp	r7, #0
  42950a:	d177      	bne.n	4295fc <am_hal_usb_out_ep_dma0_handling.constprop.0+0x254>
  42950c:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
  429510:	72c3      	strb	r3, [r0, #11]
  429512:	2300      	movs	r3, #0
  429514:	1bad      	subs	r5, r5, r6
  429516:	00ed      	lsls	r5, r5, #3
  429518:	358c      	adds	r5, #140	@ 0x8c
  42951a:	eb04 0c05 	add.w	ip, r4, r5
  42951e:	5163      	str	r3, [r4, r5]
  429520:	f8cc 3004 	str.w	r3, [ip, #4]
  429524:	f8cc 3008 	str.w	r3, [ip, #8]
  429528:	f8cc 300c 	str.w	r3, [ip, #12]
  42952c:	f8cc 3010 	str.w	r3, [ip, #16]
  429530:	f8cc 3014 	str.w	r3, [ip, #20]
  429534:	f8cc 3018 	str.w	r3, [ip, #24]
  429538:	f8d4 41b4 	ldr.w	r4, [r4, #436]	@ 0x1b4
  42953c:	4610      	mov	r0, r2
  42953e:	46a4      	mov	ip, r4
  429540:	461a      	mov	r2, r3
  429542:	b004      	add	sp, #16
  429544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  429548:	4760      	bx	ip
  42954a:	695a      	ldr	r2, [r3, #20]
  42954c:	f422 0282 	bic.w	r2, r2, #4259840	@ 0x410000
  429550:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
  429554:	615a      	str	r2, [r3, #20]
  429556:	b004      	add	sp, #16
  429558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42955c:	2f00      	cmp	r7, #0
  42955e:	d040      	beq.n	4295e2 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x23a>
  429560:	2300      	movs	r3, #0
  429562:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
  429566:	f88d 300d 	strb.w	r3, [sp, #13]
  42956a:	4b2d      	ldr	r3, [pc, #180]	@ (429620 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x278>)
  42956c:	e9cd 1701 	strd	r1, r7, [sp, #4]
  429570:	f88d 200c 	strb.w	r2, [sp, #12]
  429574:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  429578:	f3bf 8f4f 	dsb	sy
  42957c:	f3bf 8f6f 	isb	sy
  429580:	4b28      	ldr	r3, [pc, #160]	@ (429624 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x27c>)
  429582:	7818      	ldrb	r0, [r3, #0]
  429584:	2800      	cmp	r0, #0
  429586:	d13d      	bne.n	429604 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x25c>
  429588:	f04f 0c01 	mov.w	ip, #1
  42958c:	f04f 0e03 	mov.w	lr, #3
  429590:	f883 c000 	strb.w	ip, [r3]
  429594:	4b24      	ldr	r3, [pc, #144]	@ (429628 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x280>)
  429596:	f8d3 c02c 	ldr.w	ip, [r3, #44]	@ 0x2c
  42959a:	f02c 0c01 	bic.w	ip, ip, #1
  42959e:	f8c3 c02c 	str.w	ip, [r3, #44]	@ 0x2c
  4295a2:	6319      	str	r1, [r3, #48]	@ 0x30
  4295a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
  4295a6:	f362 0143 	bfi	r1, r2, #1, #3
  4295aa:	62d9      	str	r1, [r3, #44]	@ 0x2c
  4295ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  4295ae:	f360 1204 	bfi	r2, r0, #4, #1
  4295b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  4295b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  4295b6:	f360 1245 	bfi	r2, r0, #5, #1
  4295ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  4295bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  4295be:	f367 421b 	bfi	r2, r7, #16, #12
  4295c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  4295c4:	f8c3 e034 	str.w	lr, [r3, #52]	@ 0x34
  4295c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  4295ca:	f042 0201 	orr.w	r2, r2, #1
  4295ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  4295d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
  4295d4:	4b12      	ldr	r3, [pc, #72]	@ (429620 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x278>)
  4295d6:	601a      	str	r2, [r3, #0]
  4295d8:	1bab      	subs	r3, r5, r6
  4295da:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  4295de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
  4295e2:	1baa      	subs	r2, r5, r6
  4295e4:	1bdb      	subs	r3, r3, r7
  4295e6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
  4295ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  4295ee:	2b00      	cmp	r3, #0
  4295f0:	f43f af5b 	beq.w	4294aa <am_hal_usb_out_ep_dma0_handling.constprop.0+0x102>
  4295f4:	4547      	cmp	r7, r8
  4295f6:	f4bf af61 	bcs.w	4294bc <am_hal_usb_out_ep_dma0_handling.constprop.0+0x114>
  4295fa:	e756      	b.n	4294aa <am_hal_usb_out_ep_dma0_handling.constprop.0+0x102>
  4295fc:	f043 0308 	orr.w	r3, r3, #8
  429600:	72c3      	strb	r3, [r0, #11]
  429602:	e786      	b.n	429512 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x16a>
  429604:	2201      	movs	r2, #1
  429606:	a901      	add	r1, sp, #4
  429608:	4808      	ldr	r0, [pc, #32]	@ (42962c <am_hal_usb_out_ep_dma0_handling.constprop.0+0x284>)
  42960a:	f001 f9af 	bl	42a96c <am_hal_queue_item_add>
  42960e:	e7df      	b.n	4295d0 <am_hal_usb_out_ep_dma0_handling.constprop.0+0x228>
  429610:	2201      	movs	r2, #1
  429612:	a901      	add	r1, sp, #4
  429614:	4805      	ldr	r0, [pc, #20]	@ (42962c <am_hal_usb_out_ep_dma0_handling.constprop.0+0x284>)
  429616:	f001 f9a9 	bl	42a96c <am_hal_queue_item_add>
  42961a:	e73c      	b.n	429496 <am_hal_usb_out_ep_dma0_handling.constprop.0+0xee>
  42961c:	400b0000 	.word	0x400b0000
  429620:	e000e100 	.word	0xe000e100
  429624:	2004e8f1 	.word	0x2004e8f1
  429628:	400b2000 	.word	0x400b2000
  42962c:	2004e8f4 	.word	0x2004e8f4

00429630 <am_hal_usb_in_ep_dma1_handling.constprop.0>:
  429630:	4b50      	ldr	r3, [pc, #320]	@ (429774 <am_hal_usb_in_ep_dma1_handling.constprop.0+0x144>)
  429632:	4684      	mov	ip, r0
  429634:	68da      	ldr	r2, [r3, #12]
  429636:	eb00 0041 	add.w	r0, r0, r1, lsl #1
  42963a:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
  42963e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  429642:	f8b0 4058 	ldrh.w	r4, [r0, #88]	@ 0x58
  429646:	60da      	str	r2, [r3, #12]
  429648:	68da      	ldr	r2, [r3, #12]
  42964a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  42964e:	60da      	str	r2, [r3, #12]
  429650:	691a      	ldr	r2, [r3, #16]
  429652:	0295      	lsls	r5, r2, #10
  429654:	d443      	bmi.n	4296de <am_hal_usb_in_ep_dma1_handling.constprop.0+0xae>
  429656:	2201      	movs	r2, #1
  429658:	4847      	ldr	r0, [pc, #284]	@ (429778 <am_hal_usb_in_ep_dma1_handling.constprop.0+0x148>)
  42965a:	f101 3eff 	add.w	lr, r1, #4294967295	@ 0xffffffff
  42965e:	6e45      	ldr	r5, [r0, #100]	@ 0x64
  429660:	fa02 f20e 	lsl.w	r2, r2, lr
  429664:	4215      	tst	r5, r2
  429666:	d029      	beq.n	4296bc <am_hal_usb_in_ep_dma1_handling.constprop.0+0x8c>
  429668:	ebce 05ce 	rsb	r5, lr, lr, lsl #3
  42966c:	eb0c 05c5 	add.w	r5, ip, r5, lsl #3
  429670:	f8d5 60ac 	ldr.w	r6, [r5, #172]	@ 0xac
  429674:	6e85      	ldr	r5, [r0, #104]	@ 0x68
  429676:	4315      	orrs	r5, r2
  429678:	6685      	str	r5, [r0, #104]	@ 0x68
  42967a:	fbb6 f5f4 	udiv	r5, r6, r4
  42967e:	fb04 6415 	mls	r4, r4, r5, r6
  429682:	6c85      	ldr	r5, [r0, #72]	@ 0x48
  429684:	ea25 0502 	bic.w	r5, r5, r2
  429688:	6485      	str	r5, [r0, #72]	@ 0x48
  42968a:	6918      	ldr	r0, [r3, #16]
  42968c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
  429690:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
  429694:	6118      	str	r0, [r3, #16]
  429696:	6918      	ldr	r0, [r3, #16]
  429698:	f020 5080 	bic.w	r0, r0, #268435456	@ 0x10000000
  42969c:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
  4296a0:	6118      	str	r0, [r3, #16]
  4296a2:	6918      	ldr	r0, [r3, #16]
  4296a4:	f020 6080 	bic.w	r0, r0, #67108864	@ 0x4000000
  4296a8:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
  4296ac:	6118      	str	r0, [r3, #16]
  4296ae:	b12c      	cbz	r4, 4296bc <am_hal_usb_in_ep_dma1_handling.constprop.0+0x8c>
  4296b0:	6918      	ldr	r0, [r3, #16]
  4296b2:	f420 3040 	bic.w	r0, r0, #196608	@ 0x30000
  4296b6:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
  4296ba:	6118      	str	r0, [r3, #16]
  4296bc:	4c2d      	ldr	r4, [pc, #180]	@ (429774 <am_hal_usb_in_ep_dma1_handling.constprop.0+0x144>)
  4296be:	6923      	ldr	r3, [r4, #16]
  4296c0:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
  4296c4:	d109      	bne.n	4296da <am_hal_usb_in_ep_dma1_handling.constprop.0+0xaa>
  4296c6:	ebce 05ce 	rsb	r5, lr, lr, lsl #3
  4296ca:	eb0c 05c5 	add.w	r5, ip, r5, lsl #3
  4296ce:	f895 00b4 	ldrb.w	r0, [r5, #180]	@ 0xb4
  4296d2:	ea4f 06ce 	mov.w	r6, lr, lsl #3
  4296d6:	07c0      	lsls	r0, r0, #31
  4296d8:	d407      	bmi.n	4296ea <am_hal_usb_in_ep_dma1_handling.constprop.0+0xba>
  4296da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4296de:	691a      	ldr	r2, [r3, #16]
  4296e0:	f422 120c 	bic.w	r2, r2, #2293760	@ 0x230000
  4296e4:	611a      	str	r2, [r3, #16]
  4296e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4296ea:	f04f 0a01 	mov.w	sl, #1
  4296ee:	f8b4 8006 	ldrh.w	r8, [r4, #6]
  4296f2:	f041 0080 	orr.w	r0, r1, #128	@ 0x80
  4296f6:	fa1f f888 	uxth.w	r8, r8
  4296fa:	fa0a f101 	lsl.w	r1, sl, r1
  4296fe:	f8d5 90bc 	ldr.w	r9, [r5, #188]	@ 0xbc
  429702:	ea28 0101 	bic.w	r1, r8, r1
  429706:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
  42970a:	f8d5 70ac 	ldr.w	r7, [r5, #172]	@ 0xac
  42970e:	80e1      	strh	r1, [r4, #6]
  429710:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
  429714:	f1b9 0f00 	cmp.w	r9, #0
  429718:	d010      	beq.n	42973c <am_hal_usb_in_ep_dma1_handling.constprop.0+0x10c>
  42971a:	f89c 31ba 	ldrb.w	r3, [ip, #442]	@ 0x1ba
  42971e:	4619      	mov	r1, r3
  429720:	f3c3 0344 	ubfx	r3, r3, #1, #5
  429724:	ea23 0302 	bic.w	r3, r3, r2
  429728:	f363 0145 	bfi	r1, r3, #1, #5
  42972c:	f88c 11ba 	strb.w	r1, [ip, #442]	@ 0x1ba
  429730:	b2c9      	uxtb	r1, r1
  429732:	7ae3      	ldrb	r3, [r4, #11]
  429734:	b9c9      	cbnz	r1, 42976a <am_hal_usb_in_ep_dma1_handling.constprop.0+0x13a>
  429736:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
  42973a:	72e3      	strb	r3, [r4, #11]
  42973c:	2300      	movs	r3, #0
  42973e:	eba6 060e 	sub.w	r6, r6, lr
  429742:	00f6      	lsls	r6, r6, #3
  429744:	36a8      	adds	r6, #168	@ 0xa8
  429746:	eb0c 0206 	add.w	r2, ip, r6
  42974a:	f84c 3006 	str.w	r3, [ip, r6]
  42974e:	6053      	str	r3, [r2, #4]
  429750:	6093      	str	r3, [r2, #8]
  429752:	60d3      	str	r3, [r2, #12]
  429754:	6113      	str	r3, [r2, #16]
  429756:	6153      	str	r3, [r2, #20]
  429758:	6193      	str	r3, [r2, #24]
  42975a:	f8dc 41b4 	ldr.w	r4, [ip, #436]	@ 0x1b4
  42975e:	4639      	mov	r1, r7
  429760:	46a4      	mov	ip, r4
  429762:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  429766:	461a      	mov	r2, r3
  429768:	4760      	bx	ip
  42976a:	f043 0308 	orr.w	r3, r3, #8
  42976e:	72e3      	strb	r3, [r4, #11]
  429770:	e7e4      	b.n	42973c <am_hal_usb_in_ep_dma1_handling.constprop.0+0x10c>
  429772:	bf00      	nop
  429774:	400b0000 	.word	0x400b0000
  429778:	400b2000 	.word	0x400b2000

0042977c <am_hal_usb_intr_status_get>:
  42977c:	b358      	cbz	r0, 4297d6 <am_hal_usb_intr_status_get+0x5a>
  42977e:	4684      	mov	ip, r0
  429780:	6800      	ldr	r0, [r0, #0]
  429782:	b410      	push	{r4}
  429784:	4c15      	ldr	r4, [pc, #84]	@ (4297dc <am_hal_usb_intr_status_get+0x60>)
  429786:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
  42978a:	42a0      	cmp	r0, r4
  42978c:	d11f      	bne.n	4297ce <am_hal_usb_intr_status_get+0x52>
  42978e:	4814      	ldr	r0, [pc, #80]	@ (4297e0 <am_hal_usb_intr_status_get+0x64>)
  429790:	7a84      	ldrb	r4, [r0, #10]
  429792:	f004 040f 	and.w	r4, r4, #15
  429796:	600c      	str	r4, [r1, #0]
  429798:	2400      	movs	r4, #0
  42979a:	8841      	ldrh	r1, [r0, #2]
  42979c:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
  4297a0:	6011      	str	r1, [r2, #0]
  4297a2:	7902      	ldrb	r2, [r0, #4]
  4297a4:	f8dc 01c0 	ldr.w	r0, [ip, #448]	@ 0x1c0
  4297a8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
  4297ac:	4302      	orrs	r2, r0
  4297ae:	490d      	ldr	r1, [pc, #52]	@ (4297e4 <am_hal_usb_intr_status_get+0x68>)
  4297b0:	601a      	str	r2, [r3, #0]
  4297b2:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
  4297b4:	9a01      	ldr	r2, [sp, #4]
  4297b6:	f003 0303 	and.w	r3, r3, #3
  4297ba:	6013      	str	r3, [r2, #0]
  4297bc:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
  4297be:	9a02      	ldr	r2, [sp, #8]
  4297c0:	4620      	mov	r0, r4
  4297c2:	6013      	str	r3, [r2, #0]
  4297c4:	f8cc 41c0 	str.w	r4, [ip, #448]	@ 0x1c0
  4297c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4297cc:	4770      	bx	lr
  4297ce:	2002      	movs	r0, #2
  4297d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4297d4:	4770      	bx	lr
  4297d6:	2002      	movs	r0, #2
  4297d8:	4770      	bx	lr
  4297da:	bf00      	nop
  4297dc:	01ea9e06 	.word	0x01ea9e06
  4297e0:	400b0000 	.word	0x400b0000
  4297e4:	400b2000 	.word	0x400b2000

004297e8 <am_hal_usb_interrupt_service>:
  4297e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4297ec:	b08f      	sub	sp, #60	@ 0x3c
  4297ee:	9c18      	ldr	r4, [sp, #96]	@ 0x60
  4297f0:	9304      	str	r3, [sp, #16]
  4297f2:	9405      	str	r4, [sp, #20]
  4297f4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
  4297f6:	e9cd 1402 	strd	r1, r4, [sp, #8]
  4297fa:	2800      	cmp	r0, #0
  4297fc:	f000 8285 	beq.w	429d0a <am_hal_usb_interrupt_service+0x522>
  429800:	6803      	ldr	r3, [r0, #0]
  429802:	4693      	mov	fp, r2
  429804:	4ab6      	ldr	r2, [pc, #728]	@ (429ae0 <am_hal_usb_interrupt_service+0x2f8>)
  429806:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
  42980a:	4293      	cmp	r3, r2
  42980c:	4604      	mov	r4, r0
  42980e:	f040 827c 	bne.w	429d0a <am_hal_usb_interrupt_service+0x522>
  429812:	0788      	lsls	r0, r1, #30
  429814:	d50c      	bpl.n	429830 <am_hal_usb_interrupt_service+0x48>
  429816:	2003      	movs	r0, #3
  429818:	4ab2      	ldr	r2, [pc, #712]	@ (429ae4 <am_hal_usb_interrupt_service+0x2fc>)
  42981a:	f8d4 11ac 	ldr.w	r1, [r4, #428]	@ 0x1ac
  42981e:	6913      	ldr	r3, [r2, #16]
  429820:	f043 0302 	orr.w	r3, r3, #2
  429824:	6113      	str	r3, [r2, #16]
  429826:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  42982a:	b109      	cbz	r1, 429830 <am_hal_usb_interrupt_service+0x48>
  42982c:	2002      	movs	r0, #2
  42982e:	4788      	blx	r1
  429830:	9b02      	ldr	r3, [sp, #8]
  429832:	0759      	lsls	r1, r3, #29
  429834:	f140 808c 	bpl.w	429950 <am_hal_usb_interrupt_service+0x168>
  429838:	2300      	movs	r3, #0
  42983a:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
  42983e:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
  429842:	f104 0670 	add.w	r6, r4, #112	@ 0x70
  429846:	07da      	lsls	r2, r3, #31
  429848:	f100 8267 	bmi.w	429d1a <am_hal_usb_interrupt_service+0x532>
  42984c:	f04f 0900 	mov.w	r9, #0
  429850:	f104 038c 	add.w	r3, r4, #140	@ 0x8c
  429854:	f8cd b018 	str.w	fp, [sp, #24]
  429858:	f04f 0a01 	mov.w	sl, #1
  42985c:	46c8      	mov	r8, r9
  42985e:	469b      	mov	fp, r3
  429860:	f884 9056 	strb.w	r9, [r4, #86]	@ 0x56
  429864:	f8c4 9070 	str.w	r9, [r4, #112]	@ 0x70
  429868:	9301      	str	r3, [sp, #4]
  42986a:	f8c6 9004 	str.w	r9, [r6, #4]
  42986e:	f8c6 9008 	str.w	r9, [r6, #8]
  429872:	f8c6 900c 	str.w	r9, [r6, #12]
  429876:	f8c6 9010 	str.w	r9, [r6, #16]
  42987a:	f8c6 9014 	str.w	r9, [r6, #20]
  42987e:	f8c6 9018 	str.w	r9, [r6, #24]
  429882:	eb0b 0509 	add.w	r5, fp, r9
  429886:	7b2e      	ldrb	r6, [r5, #12]
  429888:	f016 0601 	ands.w	r6, r6, #1
  42988c:	d036      	beq.n	4298fc <am_hal_usb_interrupt_service+0x114>
  42988e:	2600      	movs	r6, #0
  429890:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
  429894:	1ac9      	subs	r1, r1, r3
  429896:	696b      	ldr	r3, [r5, #20]
  429898:	ea4a 10c6 	orr.w	r0, sl, r6, lsl #7
  42989c:	b2c0      	uxtb	r0, r0
  42989e:	b1d3      	cbz	r3, 4298d6 <am_hal_usb_interrupt_service+0xee>
  4298a0:	f894 21ba 	ldrb.w	r2, [r4, #442]	@ 0x1ba
  4298a4:	2701      	movs	r7, #1
  4298a6:	4613      	mov	r3, r2
  4298a8:	f000 0c7f 	and.w	ip, r0, #127	@ 0x7f
  4298ac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
  4298b0:	f3c2 0244 	ubfx	r2, r2, #1, #5
  4298b4:	fa07 f70c 	lsl.w	r7, r7, ip
  4298b8:	ea22 0207 	bic.w	r2, r2, r7
  4298bc:	f362 0345 	bfi	r3, r2, #1, #5
  4298c0:	f884 31ba 	strb.w	r3, [r4, #442]	@ 0x1ba
  4298c4:	b2db      	uxtb	r3, r3
  4298c6:	4a88      	ldr	r2, [pc, #544]	@ (429ae8 <am_hal_usb_interrupt_service+0x300>)
  4298c8:	2b00      	cmp	r3, #0
  4298ca:	f040 8221 	bne.w	429d10 <am_hal_usb_interrupt_service+0x528>
  4298ce:	7ad3      	ldrb	r3, [r2, #11]
  4298d0:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
  4298d4:	72d3      	strb	r3, [r2, #11]
  4298d6:	f8c5 8000 	str.w	r8, [r5]
  4298da:	f8c5 8004 	str.w	r8, [r5, #4]
  4298de:	f8c5 8008 	str.w	r8, [r5, #8]
  4298e2:	f8c5 800c 	str.w	r8, [r5, #12]
  4298e6:	f8c5 8010 	str.w	r8, [r5, #16]
  4298ea:	f8c5 8014 	str.w	r8, [r5, #20]
  4298ee:	f8c5 8018 	str.w	r8, [r5, #24]
  4298f2:	2300      	movs	r3, #0
  4298f4:	2204      	movs	r2, #4
  4298f6:	f8d4 71b4 	ldr.w	r7, [r4, #436]	@ 0x1b4
  4298fa:	47b8      	blx	r7
  4298fc:	351c      	adds	r5, #28
  4298fe:	b91e      	cbnz	r6, 429908 <am_hal_usb_interrupt_service+0x120>
  429900:	7b2b      	ldrb	r3, [r5, #12]
  429902:	2601      	movs	r6, #1
  429904:	07df      	lsls	r7, r3, #31
  429906:	d4c3      	bmi.n	429890 <am_hal_usb_interrupt_service+0xa8>
  429908:	f109 0938 	add.w	r9, r9, #56	@ 0x38
  42990c:	f5b9 7f8c 	cmp.w	r9, #280	@ 0x118
  429910:	f10a 0a01 	add.w	sl, sl, #1
  429914:	d1b5      	bne.n	429882 <am_hal_usb_interrupt_service+0x9a>
  429916:	464a      	mov	r2, r9
  429918:	2100      	movs	r1, #0
  42991a:	9801      	ldr	r0, [sp, #4]
  42991c:	f8dd b018 	ldr.w	fp, [sp, #24]
  429920:	f7f7 f9c0 	bl	420ca4 <memset>
  429924:	2308      	movs	r3, #8
  429926:	2000      	movs	r0, #0
  429928:	6523      	str	r3, [r4, #80]	@ 0x50
  42992a:	4b6f      	ldr	r3, [pc, #444]	@ (429ae8 <am_hal_usb_interrupt_service+0x300>)
  42992c:	88da      	ldrh	r2, [r3, #6]
  42992e:	80d8      	strh	r0, [r3, #6]
  429930:	7a1a      	ldrb	r2, [r3, #8]
  429932:	7218      	strb	r0, [r3, #8]
  429934:	7ada      	ldrb	r2, [r3, #11]
  429936:	f002 02f7 	and.w	r2, r2, #247	@ 0xf7
  42993a:	72da      	strb	r2, [r3, #11]
  42993c:	f884 01ba 	strb.w	r0, [r4, #442]	@ 0x1ba
  429940:	7ada      	ldrb	r2, [r3, #11]
  429942:	f042 0201 	orr.w	r2, r2, #1
  429946:	72da      	strb	r2, [r3, #11]
  429948:	f8d4 31ac 	ldr.w	r3, [r4, #428]	@ 0x1ac
  42994c:	b103      	cbz	r3, 429950 <am_hal_usb_interrupt_service+0x168>
  42994e:	4798      	blx	r3
  429950:	9b02      	ldr	r3, [sp, #8]
  429952:	071d      	lsls	r5, r3, #28
  429954:	d52b      	bpl.n	4299ae <am_hal_usb_interrupt_service+0x1c6>
  429956:	f894 31ba 	ldrb.w	r3, [r4, #442]	@ 0x1ba
  42995a:	f013 0f3e 	tst.w	r3, #62	@ 0x3e
  42995e:	f3c3 0544 	ubfx	r5, r3, #1, #5
  429962:	d01b      	beq.n	42999c <am_hal_usb_interrupt_service+0x1b4>
  429964:	f04f 0801 	mov.w	r8, #1
  429968:	f04f 0a02 	mov.w	sl, #2
  42996c:	f8df 9180 	ldr.w	r9, [pc, #384]	@ 429af0 <am_hal_usb_interrupt_service+0x308>
  429970:	f104 078c 	add.w	r7, r4, #140	@ 0x8c
  429974:	07e9      	lsls	r1, r5, #31
  429976:	d50b      	bpl.n	429990 <am_hal_usb_interrupt_service+0x1a8>
  429978:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
  42997c:	697a      	ldr	r2, [r7, #20]
  42997e:	429a      	cmp	r2, r3
  429980:	d006      	beq.n	429990 <am_hal_usb_interrupt_service+0x1a8>
  429982:	693a      	ldr	r2, [r7, #16]
  429984:	429a      	cmp	r2, r3
  429986:	f000 8271 	beq.w	429e6c <am_hal_usb_interrupt_service+0x684>
  42998a:	613b      	str	r3, [r7, #16]
  42998c:	f8c7 a018 	str.w	sl, [r7, #24]
  429990:	086d      	lsrs	r5, r5, #1
  429992:	f108 0801 	add.w	r8, r8, #1
  429996:	f107 0738 	add.w	r7, r7, #56	@ 0x38
  42999a:	d1eb      	bne.n	429974 <am_hal_usb_interrupt_service+0x18c>
  42999c:	f894 31ba 	ldrb.w	r3, [r4, #442]	@ 0x1ba
  4299a0:	07d8      	lsls	r0, r3, #31
  4299a2:	d504      	bpl.n	4299ae <am_hal_usb_interrupt_service+0x1c6>
  4299a4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	@ 0x1ac
  4299a8:	b10b      	cbz	r3, 4299ae <am_hal_usb_interrupt_service+0x1c6>
  4299aa:	2001      	movs	r0, #1
  4299ac:	4798      	blx	r3
  4299ae:	f1bb 0f00 	cmp.w	fp, #0
  4299b2:	f000 80a8 	beq.w	429b06 <am_hal_usb_interrupt_service+0x31e>
  4299b6:	f01b 0f01 	tst.w	fp, #1
  4299ba:	f040 8224 	bne.w	429e06 <am_hal_usb_interrupt_service+0x61e>
  4299be:	2501      	movs	r5, #1
  4299c0:	46aa      	mov	sl, r5
  4299c2:	4f4a      	ldr	r7, [pc, #296]	@ (429aec <am_hal_usb_interrupt_service+0x304>)
  4299c4:	f8df 8120 	ldr.w	r8, [pc, #288]	@ 429ae8 <am_hal_usb_interrupt_service+0x300>
  4299c8:	f104 06a8 	add.w	r6, r4, #168	@ 0xa8
  4299cc:	f104 0958 	add.w	r9, r4, #88	@ 0x58
  4299d0:	9701      	str	r7, [sp, #4]
  4299d2:	fa0a f205 	lsl.w	r2, sl, r5
  4299d6:	ea12 0f0b 	tst.w	r2, fp
  4299da:	f000 808b 	beq.w	429af4 <am_hal_usb_interrupt_service+0x30c>
  4299de:	f894 e1a6 	ldrb.w	lr, [r4, #422]	@ 0x1a6
  4299e2:	b2e9      	uxtb	r1, r5
  4299e4:	f1be 0f05 	cmp.w	lr, #5
  4299e8:	f000 8223 	beq.w	429e32 <am_hal_usb_interrupt_service+0x64a>
  4299ec:	f8d8 000c 	ldr.w	r0, [r8, #12]
  4299f0:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
  4299f4:	f420 2070 	bic.w	r0, r0, #983040	@ 0xf0000
  4299f8:	f8c8 000c 	str.w	r0, [r8, #12]
  4299fc:	f8d8 000c 	ldr.w	r0, [r8, #12]
  429a00:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  429a04:	f8c8 000c 	str.w	r0, [r8, #12]
  429a08:	f8d8 0010 	ldr.w	r0, [r8, #16]
  429a0c:	0280      	lsls	r0, r0, #10
  429a0e:	f100 8219 	bmi.w	429e44 <am_hal_usb_interrupt_service+0x65c>
  429a12:	f8d8 0010 	ldr.w	r0, [r8, #16]
  429a16:	0387      	lsls	r7, r0, #14
  429a18:	d46c      	bmi.n	429af4 <am_hal_usb_interrupt_service+0x30c>
  429a1a:	7b30      	ldrb	r0, [r6, #12]
  429a1c:	07c0      	lsls	r0, r0, #31
  429a1e:	d569      	bpl.n	429af4 <am_hal_usb_interrupt_service+0x30c>
  429a20:	68b0      	ldr	r0, [r6, #8]
  429a22:	1e6f      	subs	r7, r5, #1
  429a24:	9006      	str	r0, [sp, #24]
  429a26:	6870      	ldr	r0, [r6, #4]
  429a28:	9708      	str	r7, [sp, #32]
  429a2a:	9007      	str	r0, [sp, #28]
  429a2c:	9806      	ldr	r0, [sp, #24]
  429a2e:	2800      	cmp	r0, #0
  429a30:	f000 836c 	beq.w	42a10c <am_hal_usb_interrupt_service+0x924>
  429a34:	4602      	mov	r2, r0
  429a36:	9807      	ldr	r0, [sp, #28]
  429a38:	429a      	cmp	r2, r3
  429a3a:	eba0 0002 	sub.w	r0, r0, r2
  429a3e:	bf28      	it	cs
  429a40:	461a      	movcs	r2, r3
  429a42:	f1be 0f04 	cmp.w	lr, #4
  429a46:	f8d6 c000 	ldr.w	ip, [r6]
  429a4a:	9207      	str	r2, [sp, #28]
  429a4c:	f000 8483 	beq.w	42a356 <am_hal_usb_interrupt_service+0xb6e>
  429a50:	f002 0103 	and.w	r1, r2, #3
  429a54:	0892      	lsrs	r2, r2, #2
  429a56:	d014      	beq.n	429a82 <am_hal_usb_interrupt_service+0x29a>
  429a58:	ea4f 0e82 	mov.w	lr, r2, lsl #2
  429a5c:	f1ae 0e04 	sub.w	lr, lr, #4
  429a60:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  429a64:	f10e 0e01 	add.w	lr, lr, #1
  429a68:	f04e e001 	dls	lr, lr
  429a6c:	9f01      	ldr	r7, [sp, #4]
  429a6e:	eb0c 0200 	add.w	r2, ip, r0
  429a72:	9309      	str	r3, [sp, #36]	@ 0x24
  429a74:	f852 3b04 	ldr.w	r3, [r2], #4
  429a78:	603b      	str	r3, [r7, #0]
  429a7a:	f00f c805 	le	lr, 429a74 <am_hal_usb_interrupt_service+0x28c>
  429a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  429a80:	9701      	str	r7, [sp, #4]
  429a82:	b191      	cbz	r1, 429aaa <am_hal_usb_interrupt_service+0x2c2>
  429a84:	9f07      	ldr	r7, [sp, #28]
  429a86:	f027 0203 	bic.w	r2, r7, #3
  429a8a:	4494      	add	ip, r2
  429a8c:	f81c 2000 	ldrb.w	r2, [ip, r0]
  429a90:	4484      	add	ip, r0
  429a92:	9801      	ldr	r0, [sp, #4]
  429a94:	7002      	strb	r2, [r0, #0]
  429a96:	07ba      	lsls	r2, r7, #30
  429a98:	d507      	bpl.n	429aaa <am_hal_usb_interrupt_service+0x2c2>
  429a9a:	f89c 2001 	ldrb.w	r2, [ip, #1]
  429a9e:	2903      	cmp	r1, #3
  429aa0:	7002      	strb	r2, [r0, #0]
  429aa2:	d102      	bne.n	429aaa <am_hal_usb_interrupt_service+0x2c2>
  429aa4:	f89c 2002 	ldrb.w	r2, [ip, #2]
  429aa8:	7002      	strb	r2, [r0, #0]
  429aaa:	480f      	ldr	r0, [pc, #60]	@ (429ae8 <am_hal_usb_interrupt_service+0x300>)
  429aac:	68b2      	ldr	r2, [r6, #8]
  429aae:	6901      	ldr	r1, [r0, #16]
  429ab0:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
  429ab4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
  429ab8:	6101      	str	r1, [r0, #16]
  429aba:	9907      	ldr	r1, [sp, #28]
  429abc:	1a52      	subs	r2, r2, r1
  429abe:	60b2      	str	r2, [r6, #8]
  429ac0:	b9c2      	cbnz	r2, 429af4 <am_hal_usb_interrupt_service+0x30c>
  429ac2:	9a06      	ldr	r2, [sp, #24]
  429ac4:	4293      	cmp	r3, r2
  429ac6:	d815      	bhi.n	429af4 <am_hal_usb_interrupt_service+0x30c>
  429ac8:	9b08      	ldr	r3, [sp, #32]
  429aca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  429ace:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  429ad2:	f893 20b4 	ldrb.w	r2, [r3, #180]	@ 0xb4
  429ad6:	f042 0202 	orr.w	r2, r2, #2
  429ada:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
  429ade:	e009      	b.n	429af4 <am_hal_usb_interrupt_service+0x30c>
  429ae0:	01ea9e06 	.word	0x01ea9e06
  429ae4:	400b4000 	.word	0x400b4000
  429ae8:	400b0000 	.word	0x400b0000
  429aec:	400b0024 	.word	0x400b0024
  429af0:	400b2210 	.word	0x400b2210
  429af4:	9b01      	ldr	r3, [sp, #4]
  429af6:	3501      	adds	r5, #1
  429af8:	3304      	adds	r3, #4
  429afa:	2d06      	cmp	r5, #6
  429afc:	f106 0638 	add.w	r6, r6, #56	@ 0x38
  429b00:	9301      	str	r3, [sp, #4]
  429b02:	f47f af66 	bne.w	4299d2 <am_hal_usb_interrupt_service+0x1ea>
  429b06:	9b04      	ldr	r3, [sp, #16]
  429b08:	2b00      	cmp	r3, #0
  429b0a:	f000 8086 	beq.w	429c1a <am_hal_usb_interrupt_service+0x432>
  429b0e:	469b      	mov	fp, r3
  429b10:	2501      	movs	r5, #1
  429b12:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 429e68 <am_hal_usb_interrupt_service+0x680>
  429b16:	f8df a33c 	ldr.w	sl, [pc, #828]	@ 429e54 <am_hal_usb_interrupt_service+0x66c>
  429b1a:	f104 068c 	add.w	r6, r4, #140	@ 0x8c
  429b1e:	f104 0964 	add.w	r9, r4, #100	@ 0x64
  429b22:	2301      	movs	r3, #1
  429b24:	40ab      	lsls	r3, r5
  429b26:	ea13 0f0b 	tst.w	r3, fp
  429b2a:	d06d      	beq.n	429c08 <am_hal_usb_interrupt_service+0x420>
  429b2c:	f894 21a5 	ldrb.w	r2, [r4, #421]	@ 0x1a5
  429b30:	b2e8      	uxtb	r0, r5
  429b32:	2a02      	cmp	r2, #2
  429b34:	f000 81ef 	beq.w	429f16 <am_hal_usb_interrupt_service+0x72e>
  429b38:	2a01      	cmp	r2, #1
  429b3a:	f000 817e 	beq.w	429e3a <am_hal_usb_interrupt_service+0x652>
  429b3e:	f8da 200c 	ldr.w	r2, [sl, #12]
  429b42:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
  429b46:	f8ca 200c 	str.w	r2, [sl, #12]
  429b4a:	f8da 200c 	ldr.w	r2, [sl, #12]
  429b4e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  429b52:	f8ca 200c 	str.w	r2, [sl, #12]
  429b56:	f8da 2014 	ldr.w	r2, [sl, #20]
  429b5a:	0252      	lsls	r2, r2, #9
  429b5c:	f100 80fe 	bmi.w	429d5c <am_hal_usb_interrupt_service+0x574>
  429b60:	f8da 2014 	ldr.w	r2, [sl, #20]
  429b64:	03d7      	lsls	r7, r2, #15
  429b66:	d54f      	bpl.n	429c08 <am_hal_usb_interrupt_service+0x420>
  429b68:	e9d6 7101 	ldrd	r7, r1, [r6, #4]
  429b6c:	f8da 2018 	ldr.w	r2, [sl, #24]
  429b70:	1a7f      	subs	r7, r7, r1
  429b72:	f3c2 0c0c 	ubfx	ip, r2, #0, #13
  429b76:	fa1f fe82 	uxth.w	lr, r2
  429b7a:	f8b9 2000 	ldrh.w	r2, [r9]
  429b7e:	4561      	cmp	r1, ip
  429b80:	9204      	str	r2, [sp, #16]
  429b82:	6832      	ldr	r2, [r6, #0]
  429b84:	9201      	str	r2, [sp, #4]
  429b86:	f0c0 8231 	bcc.w	429fec <am_hal_usb_interrupt_service+0x804>
  429b8a:	f00e 0203 	and.w	r2, lr, #3
  429b8e:	9206      	str	r2, [sp, #24]
  429b90:	ea5f 029c 	movs.w	r2, ip, lsr #2
  429b94:	d011      	beq.n	429bba <am_hal_usb_interrupt_service+0x3d2>
  429b96:	ea4f 0e82 	mov.w	lr, r2, lsl #2
  429b9a:	f1ae 0e04 	sub.w	lr, lr, #4
  429b9e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  429ba2:	f10e 0e01 	add.w	lr, lr, #1
  429ba6:	f04e e001 	dls	lr, lr
  429baa:	9a01      	ldr	r2, [sp, #4]
  429bac:	443a      	add	r2, r7
  429bae:	f8d8 1000 	ldr.w	r1, [r8]
  429bb2:	f842 1b04 	str.w	r1, [r2], #4
  429bb6:	f00f c007 	le	lr, 429bae <am_hal_usb_interrupt_service+0x3c6>
  429bba:	9a06      	ldr	r2, [sp, #24]
  429bbc:	b1a2      	cbz	r2, 429be8 <am_hal_usb_interrupt_service+0x400>
  429bbe:	9a01      	ldr	r2, [sp, #4]
  429bc0:	f02c 0103 	bic.w	r1, ip, #3
  429bc4:	440a      	add	r2, r1
  429bc6:	4611      	mov	r1, r2
  429bc8:	f898 e000 	ldrb.w	lr, [r8]
  429bcc:	4439      	add	r1, r7
  429bce:	f802 e007 	strb.w	lr, [r2, r7]
  429bd2:	9f06      	ldr	r7, [sp, #24]
  429bd4:	2f01      	cmp	r7, #1
  429bd6:	d007      	beq.n	429be8 <am_hal_usb_interrupt_service+0x400>
  429bd8:	f898 2000 	ldrb.w	r2, [r8]
  429bdc:	2f03      	cmp	r7, #3
  429bde:	704a      	strb	r2, [r1, #1]
  429be0:	d102      	bne.n	429be8 <am_hal_usb_interrupt_service+0x400>
  429be2:	f898 2000 	ldrb.w	r2, [r8]
  429be6:	708a      	strb	r2, [r1, #2]
  429be8:	68b2      	ldr	r2, [r6, #8]
  429bea:	eba2 020c 	sub.w	r2, r2, ip
  429bee:	60b2      	str	r2, [r6, #8]
  429bf0:	2a00      	cmp	r2, #0
  429bf2:	f000 822c 	beq.w	42a04e <am_hal_usb_interrupt_service+0x866>
  429bf6:	9a04      	ldr	r2, [sp, #16]
  429bf8:	4594      	cmp	ip, r2
  429bfa:	f0c0 8228 	bcc.w	42a04e <am_hal_usb_interrupt_service+0x866>
  429bfe:	4a95      	ldr	r2, [pc, #596]	@ (429e54 <am_hal_usb_interrupt_service+0x66c>)
  429c00:	6953      	ldr	r3, [r2, #20]
  429c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  429c06:	6153      	str	r3, [r2, #20]
  429c08:	3501      	adds	r5, #1
  429c0a:	2d06      	cmp	r5, #6
  429c0c:	f106 0638 	add.w	r6, r6, #56	@ 0x38
  429c10:	f109 0902 	add.w	r9, r9, #2
  429c14:	f108 0804 	add.w	r8, r8, #4
  429c18:	d183      	bne.n	429b22 <am_hal_usb_interrupt_service+0x33a>
  429c1a:	9b05      	ldr	r3, [sp, #20]
  429c1c:	2b00      	cmp	r3, #0
  429c1e:	d057      	beq.n	429cd0 <am_hal_usb_interrupt_service+0x4e8>
  429c20:	2000      	movs	r0, #0
  429c22:	498d      	ldr	r1, [pc, #564]	@ (429e58 <am_hal_usb_interrupt_service+0x670>)
  429c24:	4d8d      	ldr	r5, [pc, #564]	@ (429e5c <am_hal_usb_interrupt_service+0x674>)
  429c26:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  429c28:	4a8a      	ldr	r2, [pc, #552]	@ (429e54 <am_hal_usb_interrupt_service+0x66c>)
  429c2a:	f023 0301 	bic.w	r3, r3, #1
  429c2e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  429c30:	9b05      	ldr	r3, [sp, #20]
  429c32:	63cb      	str	r3, [r1, #60]	@ 0x3c
  429c34:	7028      	strb	r0, [r5, #0]
  429c36:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  429c38:	06df      	lsls	r7, r3, #27
  429c3a:	f3c3 1000 	ubfx	r0, r3, #4, #1
  429c3e:	f100 80c6 	bmi.w	429dce <am_hal_usb_interrupt_service+0x5e6>
  429c42:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  429c44:	f3c3 0342 	ubfx	r3, r3, #1, #3
  429c48:	3b01      	subs	r3, #1
  429c4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  429c4e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  429c52:	f893 6098 	ldrb.w	r6, [r3, #152]	@ 0x98
  429c56:	68d3      	ldr	r3, [r2, #12]
  429c58:	0736      	lsls	r6, r6, #28
  429c5a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  429c5e:	60d3      	str	r3, [r2, #12]
  429c60:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
  429c62:	68d3      	ldr	r3, [r2, #12]
  429c64:	f3c0 0042 	ubfx	r0, r0, #1, #3
  429c68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  429c6c:	60d3      	str	r3, [r2, #12]
  429c6e:	f100 8364 	bmi.w	42a33a <am_hal_usb_interrupt_service+0xb52>
  429c72:	6953      	ldr	r3, [r2, #20]
  429c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  429c78:	6153      	str	r3, [r2, #20]
  429c7a:	4879      	ldr	r0, [pc, #484]	@ (429e60 <am_hal_usb_interrupt_service+0x678>)
  429c7c:	6883      	ldr	r3, [r0, #8]
  429c7e:	b33b      	cbz	r3, 429cd0 <am_hal_usb_interrupt_service+0x4e8>
  429c80:	2201      	movs	r2, #1
  429c82:	a90b      	add	r1, sp, #44	@ 0x2c
  429c84:	f000 feb0 	bl	42a9e8 <am_hal_queue_item_get>
  429c88:	2201      	movs	r2, #1
  429c8a:	2103      	movs	r1, #3
  429c8c:	4b72      	ldr	r3, [pc, #456]	@ (429e58 <am_hal_usb_interrupt_service+0x670>)
  429c8e:	702a      	strb	r2, [r5, #0]
  429c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  429c92:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
  429c94:	f022 0201 	bic.w	r2, r2, #1
  429c98:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
  429c9c:	f89d 5035 	ldrb.w	r5, [sp, #53]	@ 0x35
  429ca0:	980c      	ldr	r0, [sp, #48]	@ 0x30
  429ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
  429ca4:	631f      	str	r7, [r3, #48]	@ 0x30
  429ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  429ca8:	f366 0243 	bfi	r2, r6, #1, #3
  429cac:	62da      	str	r2, [r3, #44]	@ 0x2c
  429cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  429cb0:	f365 1204 	bfi	r2, r5, #4, #1
  429cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  429cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  429cb8:	f022 0220 	bic.w	r2, r2, #32
  429cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  429cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  429cc0:	f360 421b 	bfi	r2, r0, #16, #12
  429cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  429cc6:	6359      	str	r1, [r3, #52]	@ 0x34
  429cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  429cca:	f042 0201 	orr.w	r2, r2, #1
  429cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  429cd0:	9b03      	ldr	r3, [sp, #12]
  429cd2:	b13b      	cbz	r3, 429ce4 <am_hal_usb_interrupt_service+0x4fc>
  429cd4:	f894 31a6 	ldrb.w	r3, [r4, #422]	@ 0x1a6
  429cd8:	2b05      	cmp	r3, #5
  429cda:	d060      	beq.n	429d9e <am_hal_usb_interrupt_service+0x5b6>
  429cdc:	f894 31a5 	ldrb.w	r3, [r4, #421]	@ 0x1a5
  429ce0:	2b02      	cmp	r3, #2
  429ce2:	d044      	beq.n	429d6e <am_hal_usb_interrupt_service+0x586>
  429ce4:	9b02      	ldr	r3, [sp, #8]
  429ce6:	07d8      	lsls	r0, r3, #31
  429ce8:	d50f      	bpl.n	429d0a <am_hal_usb_interrupt_service+0x522>
  429cea:	2005      	movs	r0, #5
  429cec:	4a5d      	ldr	r2, [pc, #372]	@ (429e64 <am_hal_usb_interrupt_service+0x67c>)
  429cee:	f8d4 11ac 	ldr.w	r1, [r4, #428]	@ 0x1ac
  429cf2:	6913      	ldr	r3, [r2, #16]
  429cf4:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
  429cf8:	6113      	str	r3, [r2, #16]
  429cfa:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
  429cfe:	b121      	cbz	r1, 429d0a <am_hal_usb_interrupt_service+0x522>
  429d00:	2003      	movs	r0, #3
  429d02:	b00f      	add	sp, #60	@ 0x3c
  429d04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  429d08:	4708      	bx	r1
  429d0a:	b00f      	add	sp, #60	@ 0x3c
  429d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  429d10:	7ad3      	ldrb	r3, [r2, #11]
  429d12:	f043 0308 	orr.w	r3, r3, #8
  429d16:	72d3      	strb	r3, [r2, #11]
  429d18:	e5dd      	b.n	4298d6 <am_hal_usb_interrupt_service+0xee>
  429d1a:	f3c3 0080 	ubfx	r0, r3, #2, #1
  429d1e:	e9d4 131d 	ldrd	r1, r3, [r4, #116]	@ 0x74
  429d22:	1ac9      	subs	r1, r1, r3
  429d24:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  429d28:	01c0      	lsls	r0, r0, #7
  429d2a:	b2c0      	uxtb	r0, r0
  429d2c:	b14b      	cbz	r3, 429d42 <am_hal_usb_interrupt_service+0x55a>
  429d2e:	f894 31ba 	ldrb.w	r3, [r4, #442]	@ 0x1ba
  429d32:	4a48      	ldr	r2, [pc, #288]	@ (429e54 <am_hal_usb_interrupt_service+0x66c>)
  429d34:	2b00      	cmp	r3, #0
  429d36:	f040 81bc 	bne.w	42a0b2 <am_hal_usb_interrupt_service+0x8ca>
  429d3a:	7ad3      	ldrb	r3, [r2, #11]
  429d3c:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
  429d40:	72d3      	strb	r3, [r2, #11]
  429d42:	2300      	movs	r3, #0
  429d44:	6723      	str	r3, [r4, #112]	@ 0x70
  429d46:	6073      	str	r3, [r6, #4]
  429d48:	60b3      	str	r3, [r6, #8]
  429d4a:	60f3      	str	r3, [r6, #12]
  429d4c:	6133      	str	r3, [r6, #16]
  429d4e:	6173      	str	r3, [r6, #20]
  429d50:	61b3      	str	r3, [r6, #24]
  429d52:	2204      	movs	r2, #4
  429d54:	f8d4 51b4 	ldr.w	r5, [r4, #436]	@ 0x1b4
  429d58:	47a8      	blx	r5
  429d5a:	e577      	b.n	42984c <am_hal_usb_interrupt_service+0x64>
  429d5c:	f8da 3014 	ldr.w	r3, [sl, #20]
  429d60:	f423 0382 	bic.w	r3, r3, #4259840	@ 0x410000
  429d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
  429d68:	f8ca 3014 	str.w	r3, [sl, #20]
  429d6c:	e74c      	b.n	429c08 <am_hal_usb_interrupt_service+0x420>
  429d6e:	9b03      	ldr	r3, [sp, #12]
  429d70:	069d      	lsls	r5, r3, #26
  429d72:	f100 81a3 	bmi.w	42a0bc <am_hal_usb_interrupt_service+0x8d4>
  429d76:	9b03      	ldr	r3, [sp, #12]
  429d78:	0658      	lsls	r0, r3, #25
  429d7a:	f100 81c2 	bmi.w	42a102 <am_hal_usb_interrupt_service+0x91a>
  429d7e:	9b03      	ldr	r3, [sp, #12]
  429d80:	0619      	lsls	r1, r3, #24
  429d82:	f100 81b9 	bmi.w	42a0f8 <am_hal_usb_interrupt_service+0x910>
  429d86:	9b03      	ldr	r3, [sp, #12]
  429d88:	05da      	lsls	r2, r3, #23
  429d8a:	f100 81b0 	bmi.w	42a0ee <am_hal_usb_interrupt_service+0x906>
  429d8e:	9b03      	ldr	r3, [sp, #12]
  429d90:	059b      	lsls	r3, r3, #22
  429d92:	d5a7      	bpl.n	429ce4 <am_hal_usb_interrupt_service+0x4fc>
  429d94:	2105      	movs	r1, #5
  429d96:	4620      	mov	r0, r4
  429d98:	f7ff fa8a 	bl	4292b0 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0>
  429d9c:	e7a2      	b.n	429ce4 <am_hal_usb_interrupt_service+0x4fc>
  429d9e:	9b03      	ldr	r3, [sp, #12]
  429da0:	07d9      	lsls	r1, r3, #31
  429da2:	f100 819f 	bmi.w	42a0e4 <am_hal_usb_interrupt_service+0x8fc>
  429da6:	9b03      	ldr	r3, [sp, #12]
  429da8:	079a      	lsls	r2, r3, #30
  429daa:	f100 8196 	bmi.w	42a0da <am_hal_usb_interrupt_service+0x8f2>
  429dae:	9b03      	ldr	r3, [sp, #12]
  429db0:	075b      	lsls	r3, r3, #29
  429db2:	f100 818d 	bmi.w	42a0d0 <am_hal_usb_interrupt_service+0x8e8>
  429db6:	9b03      	ldr	r3, [sp, #12]
  429db8:	071f      	lsls	r7, r3, #28
  429dba:	f100 8184 	bmi.w	42a0c6 <am_hal_usb_interrupt_service+0x8de>
  429dbe:	9b03      	ldr	r3, [sp, #12]
  429dc0:	06de      	lsls	r6, r3, #27
  429dc2:	d58b      	bpl.n	429cdc <am_hal_usb_interrupt_service+0x4f4>
  429dc4:	2105      	movs	r1, #5
  429dc6:	4620      	mov	r0, r4
  429dc8:	f7ff fc32 	bl	429630 <am_hal_usb_in_ep_dma1_handling.constprop.0>
  429dcc:	e786      	b.n	429cdc <am_hal_usb_interrupt_service+0x4f4>
  429dce:	68d3      	ldr	r3, [r2, #12]
  429dd0:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  429dd4:	60d3      	str	r3, [r2, #12]
  429dd6:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
  429dd8:	68d3      	ldr	r3, [r2, #12]
  429dda:	f3c6 0642 	ubfx	r6, r6, #1, #3
  429dde:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  429de2:	60d3      	str	r3, [r2, #12]
  429de4:	6913      	ldr	r3, [r2, #16]
  429de6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
  429dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
  429dee:	6113      	str	r3, [r2, #16]
  429df0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
  429df2:	f3c3 0342 	ubfx	r3, r3, #1, #3
  429df6:	4098      	lsls	r0, r3
  429df8:	88d3      	ldrh	r3, [r2, #6]
  429dfa:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
  429dfe:	b29b      	uxth	r3, r3
  429e00:	4303      	orrs	r3, r0
  429e02:	80d3      	strh	r3, [r2, #6]
  429e04:	e739      	b.n	429c7a <am_hal_usb_interrupt_service+0x492>
  429e06:	4b13      	ldr	r3, [pc, #76]	@ (429e54 <am_hal_usb_interrupt_service+0x66c>)
  429e08:	f8b4 1058 	ldrh.w	r1, [r4, #88]	@ 0x58
  429e0c:	68da      	ldr	r2, [r3, #12]
  429e0e:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
  429e12:	60da      	str	r2, [r3, #12]
  429e14:	68da      	ldr	r2, [r3, #12]
  429e16:	60da      	str	r2, [r3, #12]
  429e18:	f894 3056 	ldrb.w	r3, [r4, #86]	@ 0x56
  429e1c:	2b05      	cmp	r3, #5
  429e1e:	f200 80e2 	bhi.w	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  429e22:	e8df f013 	tbh	[pc, r3, lsl #1]
  429e26:	0284      	.short	0x0284
  429e28:	01f70244 	.word	0x01f70244
  429e2c:	00a701ab 	.word	0x00a701ab
  429e30:	025b      	.short	0x025b
  429e32:	4620      	mov	r0, r4
  429e34:	f7ff fbfc 	bl	429630 <am_hal_usb_in_ep_dma1_handling.constprop.0>
  429e38:	e65c      	b.n	429af4 <am_hal_usb_interrupt_service+0x30c>
  429e3a:	4601      	mov	r1, r0
  429e3c:	4620      	mov	r0, r4
  429e3e:	f7ff fab3 	bl	4293a8 <am_hal_usb_out_ep_dma0_handling.constprop.0>
  429e42:	e6e1      	b.n	429c08 <am_hal_usb_interrupt_service+0x420>
  429e44:	f8d8 3010 	ldr.w	r3, [r8, #16]
  429e48:	f423 130c 	bic.w	r3, r3, #2293760	@ 0x230000
  429e4c:	f8c8 3010 	str.w	r3, [r8, #16]
  429e50:	e650      	b.n	429af4 <am_hal_usb_interrupt_service+0x30c>
  429e52:	bf00      	nop
  429e54:	400b0000 	.word	0x400b0000
  429e58:	400b2000 	.word	0x400b2000
  429e5c:	2004e8f1 	.word	0x2004e8f1
  429e60:	2004e8f4 	.word	0x2004e8f4
  429e64:	400b4000 	.word	0x400b4000
  429e68:	400b0024 	.word	0x400b0024
  429e6c:	69bb      	ldr	r3, [r7, #24]
  429e6e:	3b01      	subs	r3, #1
  429e70:	61bb      	str	r3, [r7, #24]
  429e72:	2b00      	cmp	r3, #0
  429e74:	f47f ad8c 	bne.w	429990 <am_hal_usb_interrupt_service+0x1a8>
  429e78:	2001      	movs	r0, #1
  429e7a:	4bbe      	ldr	r3, [pc, #760]	@ (42a174 <am_hal_usb_interrupt_service+0x98c>)
  429e7c:	f8df c2f8 	ldr.w	ip, [pc, #760]	@ 42a178 <am_hal_usb_interrupt_service+0x990>
  429e80:	68d9      	ldr	r1, [r3, #12]
  429e82:	f108 0604 	add.w	r6, r8, #4
  429e86:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
  429e8a:	60d9      	str	r1, [r3, #12]
  429e8c:	68d9      	ldr	r1, [r3, #12]
  429e8e:	fa00 f606 	lsl.w	r6, r0, r6
  429e92:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
  429e96:	60d9      	str	r1, [r3, #12]
  429e98:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
  429e9c:	ea21 0106 	bic.w	r1, r1, r6
  429ea0:	f8cc 1048 	str.w	r1, [ip, #72]	@ 0x48
  429ea4:	6959      	ldr	r1, [r3, #20]
  429ea6:	fa00 f608 	lsl.w	r6, r0, r8
  429eaa:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
  429eae:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
  429eb2:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
  429eb6:	6159      	str	r1, [r3, #20]
  429eb8:	7a19      	ldrb	r1, [r3, #8]
  429eba:	ea21 0106 	bic.w	r1, r1, r6
  429ebe:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
  429ec2:	683e      	ldr	r6, [r7, #0]
  429ec4:	7219      	strb	r1, [r3, #8]
  429ec6:	1b91      	subs	r1, r2, r6
  429ec8:	697a      	ldr	r2, [r7, #20]
  429eca:	b1aa      	cbz	r2, 429ef8 <am_hal_usb_interrupt_service+0x710>
  429ecc:	f894 21ba 	ldrb.w	r2, [r4, #442]	@ 0x1ba
  429ed0:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
  429ed4:	40b0      	lsls	r0, r6
  429ed6:	4616      	mov	r6, r2
  429ed8:	f3c2 0244 	ubfx	r2, r2, #1, #5
  429edc:	ea22 0200 	bic.w	r2, r2, r0
  429ee0:	f362 0645 	bfi	r6, r2, #1, #5
  429ee4:	f884 61ba 	strb.w	r6, [r4, #442]	@ 0x1ba
  429ee8:	b2f6      	uxtb	r6, r6
  429eea:	7ada      	ldrb	r2, [r3, #11]
  429eec:	2e00      	cmp	r6, #0
  429eee:	f040 8279 	bne.w	42a3e4 <am_hal_usb_interrupt_service+0xbfc>
  429ef2:	f002 02f7 	and.w	r2, r2, #247	@ 0xf7
  429ef6:	72da      	strb	r2, [r3, #11]
  429ef8:	2300      	movs	r3, #0
  429efa:	603b      	str	r3, [r7, #0]
  429efc:	607b      	str	r3, [r7, #4]
  429efe:	60bb      	str	r3, [r7, #8]
  429f00:	60fb      	str	r3, [r7, #12]
  429f02:	613b      	str	r3, [r7, #16]
  429f04:	617b      	str	r3, [r7, #20]
  429f06:	61bb      	str	r3, [r7, #24]
  429f08:	461a      	mov	r2, r3
  429f0a:	f8d4 61b4 	ldr.w	r6, [r4, #436]	@ 0x1b4
  429f0e:	fa5f f088 	uxtb.w	r0, r8
  429f12:	47b0      	blx	r6
  429f14:	e53c      	b.n	429990 <am_hal_usb_interrupt_service+0x1a8>
  429f16:	4a97      	ldr	r2, [pc, #604]	@ (42a174 <am_hal_usb_interrupt_service+0x98c>)
  429f18:	68d1      	ldr	r1, [r2, #12]
  429f1a:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
  429f1e:	60d1      	str	r1, [r2, #12]
  429f20:	68d1      	ldr	r1, [r2, #12]
  429f22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  429f26:	60d1      	str	r1, [r2, #12]
  429f28:	6951      	ldr	r1, [r2, #20]
  429f2a:	024f      	lsls	r7, r1, #9
  429f2c:	f100 820c 	bmi.w	42a348 <am_hal_usb_interrupt_service+0xb60>
  429f30:	6951      	ldr	r1, [r2, #20]
  429f32:	03c9      	lsls	r1, r1, #15
  429f34:	f57f ae68 	bpl.w	429c08 <am_hal_usb_interrupt_service+0x420>
  429f38:	6997      	ldr	r7, [r2, #24]
  429f3a:	f8b9 1000 	ldrh.w	r1, [r9]
  429f3e:	f3c7 0c0c 	ubfx	ip, r7, #0, #13
  429f42:	4561      	cmp	r1, ip
  429f44:	b2bf      	uxth	r7, r7
  429f46:	9701      	str	r7, [sp, #4]
  429f48:	f67f ae5e 	bls.w	429c08 <am_hal_usb_interrupt_service+0x420>
  429f4c:	6871      	ldr	r1, [r6, #4]
  429f4e:	2900      	cmp	r1, #0
  429f50:	f000 824c 	beq.w	42a3ec <am_hal_usb_interrupt_service+0xc04>
  429f54:	2701      	movs	r7, #1
  429f56:	4988      	ldr	r1, [pc, #544]	@ (42a178 <am_hal_usb_interrupt_service+0x990>)
  429f58:	f105 0e04 	add.w	lr, r5, #4
  429f5c:	fa07 fe0e 	lsl.w	lr, r7, lr
  429f60:	6e4f      	ldr	r7, [r1, #100]	@ 0x64
  429f62:	ea17 0f0e 	tst.w	r7, lr
  429f66:	f000 828d 	beq.w	42a484 <am_hal_usb_interrupt_service+0xc9c>
  429f6a:	4601      	mov	r1, r0
  429f6c:	4620      	mov	r0, r4
  429f6e:	f7ff f99f 	bl	4292b0 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0>
  429f72:	e649      	b.n	429c08 <am_hal_usb_interrupt_service+0x420>
  429f74:	4b7f      	ldr	r3, [pc, #508]	@ (42a174 <am_hal_usb_interrupt_service+0x98c>)
  429f76:	6f60      	ldr	r0, [r4, #116]	@ 0x74
  429f78:	691a      	ldr	r2, [r3, #16]
  429f7a:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
  429f7c:	0357      	lsls	r7, r2, #13
  429f7e:	eba0 0101 	sub.w	r1, r0, r1
  429f82:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  429f86:	f140 8250 	bpl.w	42a42a <am_hal_usb_interrupt_service+0xc42>
  429f8a:	691a      	ldr	r2, [r3, #16]
  429f8c:	f104 0670 	add.w	r6, r4, #112	@ 0x70
  429f90:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
  429f94:	611a      	str	r2, [r3, #16]
  429f96:	b140      	cbz	r0, 429faa <am_hal_usb_interrupt_service+0x7c2>
  429f98:	f894 21ba 	ldrb.w	r2, [r4, #442]	@ 0x1ba
  429f9c:	2a00      	cmp	r2, #0
  429f9e:	f040 8381 	bne.w	42a6a4 <am_hal_usb_interrupt_service+0xebc>
  429fa2:	7ada      	ldrb	r2, [r3, #11]
  429fa4:	f002 02f7 	and.w	r2, r2, #247	@ 0xf7
  429fa8:	72da      	strb	r2, [r3, #11]
  429faa:	2300      	movs	r3, #0
  429fac:	6723      	str	r3, [r4, #112]	@ 0x70
  429fae:	6073      	str	r3, [r6, #4]
  429fb0:	60b3      	str	r3, [r6, #8]
  429fb2:	60f3      	str	r3, [r6, #12]
  429fb4:	6133      	str	r3, [r6, #16]
  429fb6:	6173      	str	r3, [r6, #20]
  429fb8:	61b3      	str	r3, [r6, #24]
  429fba:	2202      	movs	r2, #2
  429fbc:	4618      	mov	r0, r3
  429fbe:	f8d4 51b4 	ldr.w	r5, [r4, #436]	@ 0x1b4
  429fc2:	47a8      	blx	r5
  429fc4:	2300      	movs	r3, #0
  429fc6:	4a6b      	ldr	r2, [pc, #428]	@ (42a174 <am_hal_usb_interrupt_service+0x98c>)
  429fc8:	f884 3056 	strb.w	r3, [r4, #86]	@ 0x56
  429fcc:	6723      	str	r3, [r4, #112]	@ 0x70
  429fce:	6073      	str	r3, [r6, #4]
  429fd0:	60b3      	str	r3, [r6, #8]
  429fd2:	60f3      	str	r3, [r6, #12]
  429fd4:	6133      	str	r3, [r6, #16]
  429fd6:	6173      	str	r3, [r6, #20]
  429fd8:	61b3      	str	r3, [r6, #24]
  429fda:	6913      	ldr	r3, [r2, #16]
  429fdc:	03dd      	lsls	r5, r3, #15
  429fde:	d502      	bpl.n	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  429fe0:	4620      	mov	r0, r4
  429fe2:	f7ff f8a5 	bl	429130 <am_hal_usb_ep0_handle_setup_req.part.0.constprop.0>
  429fe6:	f02b 0b01 	bic.w	fp, fp, #1
  429fea:	e4e8      	b.n	4299be <am_hal_usb_interrupt_service+0x1d6>
  429fec:	088a      	lsrs	r2, r1, #2
  429fee:	f001 0c03 	and.w	ip, r1, #3
  429ff2:	d013      	beq.n	42a01c <am_hal_usb_interrupt_service+0x834>
  429ff4:	ea4f 0e82 	mov.w	lr, r2, lsl #2
  429ff8:	f1ae 0e04 	sub.w	lr, lr, #4
  429ffc:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  42a000:	f10e 0e01 	add.w	lr, lr, #1
  42a004:	f04e e001 	dls	lr, lr
  42a008:	9a01      	ldr	r2, [sp, #4]
  42a00a:	9304      	str	r3, [sp, #16]
  42a00c:	443a      	add	r2, r7
  42a00e:	f8d8 3000 	ldr.w	r3, [r8]
  42a012:	f842 3b04 	str.w	r3, [r2], #4
  42a016:	f00f c007 	le	lr, 42a00e <am_hal_usb_interrupt_service+0x826>
  42a01a:	9b04      	ldr	r3, [sp, #16]
  42a01c:	f1bc 0f00 	cmp.w	ip, #0
  42a020:	d013      	beq.n	42a04a <am_hal_usb_interrupt_service+0x862>
  42a022:	f021 0203 	bic.w	r2, r1, #3
  42a026:	443a      	add	r2, r7
  42a028:	f898 e000 	ldrb.w	lr, [r8]
  42a02c:	9f01      	ldr	r7, [sp, #4]
  42a02e:	0789      	lsls	r1, r1, #30
  42a030:	f807 e002 	strb.w	lr, [r7, r2]
  42a034:	d509      	bpl.n	42a04a <am_hal_usb_interrupt_service+0x862>
  42a036:	f898 1000 	ldrb.w	r1, [r8]
  42a03a:	4417      	add	r7, r2
  42a03c:	f1bc 0f03 	cmp.w	ip, #3
  42a040:	7079      	strb	r1, [r7, #1]
  42a042:	d102      	bne.n	42a04a <am_hal_usb_interrupt_service+0x862>
  42a044:	f898 1000 	ldrb.w	r1, [r8]
  42a048:	70b9      	strb	r1, [r7, #2]
  42a04a:	2200      	movs	r2, #0
  42a04c:	60b2      	str	r2, [r6, #8]
  42a04e:	4f49      	ldr	r7, [pc, #292]	@ (42a174 <am_hal_usb_interrupt_service+0x98c>)
  42a050:	7a3a      	ldrb	r2, [r7, #8]
  42a052:	ea22 0303 	bic.w	r3, r2, r3
  42a056:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  42a05a:	723b      	strb	r3, [r7, #8]
  42a05c:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
  42a060:	1ad1      	subs	r1, r2, r3
  42a062:	6973      	ldr	r3, [r6, #20]
  42a064:	b1c3      	cbz	r3, 42a098 <am_hal_usb_interrupt_service+0x8b0>
  42a066:	f894 21ba 	ldrb.w	r2, [r4, #442]	@ 0x1ba
  42a06a:	f04f 0c01 	mov.w	ip, #1
  42a06e:	4613      	mov	r3, r2
  42a070:	f105 3eff 	add.w	lr, r5, #4294967295	@ 0xffffffff
  42a074:	f3c2 0244 	ubfx	r2, r2, #1, #5
  42a078:	fa0c fc0e 	lsl.w	ip, ip, lr
  42a07c:	ea22 020c 	bic.w	r2, r2, ip
  42a080:	f362 0345 	bfi	r3, r2, #1, #5
  42a084:	f884 31ba 	strb.w	r3, [r4, #442]	@ 0x1ba
  42a088:	b2db      	uxtb	r3, r3
  42a08a:	2b00      	cmp	r3, #0
  42a08c:	f040 81a5 	bne.w	42a3da <am_hal_usb_interrupt_service+0xbf2>
  42a090:	7afb      	ldrb	r3, [r7, #11]
  42a092:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
  42a096:	72fb      	strb	r3, [r7, #11]
  42a098:	2300      	movs	r3, #0
  42a09a:	6033      	str	r3, [r6, #0]
  42a09c:	6073      	str	r3, [r6, #4]
  42a09e:	60b3      	str	r3, [r6, #8]
  42a0a0:	60f3      	str	r3, [r6, #12]
  42a0a2:	6133      	str	r3, [r6, #16]
  42a0a4:	6173      	str	r3, [r6, #20]
  42a0a6:	61b3      	str	r3, [r6, #24]
  42a0a8:	461a      	mov	r2, r3
  42a0aa:	f8d4 71b4 	ldr.w	r7, [r4, #436]	@ 0x1b4
  42a0ae:	47b8      	blx	r7
  42a0b0:	e5aa      	b.n	429c08 <am_hal_usb_interrupt_service+0x420>
  42a0b2:	7ad3      	ldrb	r3, [r2, #11]
  42a0b4:	f043 0308 	orr.w	r3, r3, #8
  42a0b8:	72d3      	strb	r3, [r2, #11]
  42a0ba:	e642      	b.n	429d42 <am_hal_usb_interrupt_service+0x55a>
  42a0bc:	2101      	movs	r1, #1
  42a0be:	4620      	mov	r0, r4
  42a0c0:	f7ff f8f6 	bl	4292b0 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0>
  42a0c4:	e657      	b.n	429d76 <am_hal_usb_interrupt_service+0x58e>
  42a0c6:	2104      	movs	r1, #4
  42a0c8:	4620      	mov	r0, r4
  42a0ca:	f7ff fab1 	bl	429630 <am_hal_usb_in_ep_dma1_handling.constprop.0>
  42a0ce:	e676      	b.n	429dbe <am_hal_usb_interrupt_service+0x5d6>
  42a0d0:	2103      	movs	r1, #3
  42a0d2:	4620      	mov	r0, r4
  42a0d4:	f7ff faac 	bl	429630 <am_hal_usb_in_ep_dma1_handling.constprop.0>
  42a0d8:	e66d      	b.n	429db6 <am_hal_usb_interrupt_service+0x5ce>
  42a0da:	2102      	movs	r1, #2
  42a0dc:	4620      	mov	r0, r4
  42a0de:	f7ff faa7 	bl	429630 <am_hal_usb_in_ep_dma1_handling.constprop.0>
  42a0e2:	e664      	b.n	429dae <am_hal_usb_interrupt_service+0x5c6>
  42a0e4:	2101      	movs	r1, #1
  42a0e6:	4620      	mov	r0, r4
  42a0e8:	f7ff faa2 	bl	429630 <am_hal_usb_in_ep_dma1_handling.constprop.0>
  42a0ec:	e65b      	b.n	429da6 <am_hal_usb_interrupt_service+0x5be>
  42a0ee:	2104      	movs	r1, #4
  42a0f0:	4620      	mov	r0, r4
  42a0f2:	f7ff f8dd 	bl	4292b0 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0>
  42a0f6:	e64a      	b.n	429d8e <am_hal_usb_interrupt_service+0x5a6>
  42a0f8:	2103      	movs	r1, #3
  42a0fa:	4620      	mov	r0, r4
  42a0fc:	f7ff f8d8 	bl	4292b0 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0>
  42a100:	e641      	b.n	429d86 <am_hal_usb_interrupt_service+0x59e>
  42a102:	2102      	movs	r1, #2
  42a104:	4620      	mov	r0, r4
  42a106:	f7ff f8d3 	bl	4292b0 <am_hal_usb_out_ep_dma1_adma_handling.constprop.0>
  42a10a:	e638      	b.n	429d7e <am_hal_usb_interrupt_service+0x596>
  42a10c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
  42a110:	f041 0c80 	orr.w	ip, r1, #128	@ 0x80
  42a114:	b29b      	uxth	r3, r3
  42a116:	ea23 0302 	bic.w	r3, r3, r2
  42a11a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  42a11e:	f8a8 3006 	strh.w	r3, [r8, #6]
  42a122:	6973      	ldr	r3, [r6, #20]
  42a124:	b1bb      	cbz	r3, 42a156 <am_hal_usb_interrupt_service+0x96e>
  42a126:	9b08      	ldr	r3, [sp, #32]
  42a128:	fa0a f103 	lsl.w	r1, sl, r3
  42a12c:	f894 31ba 	ldrb.w	r3, [r4, #442]	@ 0x1ba
  42a130:	461a      	mov	r2, r3
  42a132:	f3c3 0344 	ubfx	r3, r3, #1, #5
  42a136:	ea23 0301 	bic.w	r3, r3, r1
  42a13a:	f363 0245 	bfi	r2, r3, #1, #5
  42a13e:	f884 21ba 	strb.w	r2, [r4, #442]	@ 0x1ba
  42a142:	b2d2      	uxtb	r2, r2
  42a144:	f898 300b 	ldrb.w	r3, [r8, #11]
  42a148:	2a00      	cmp	r2, #0
  42a14a:	f040 8196 	bne.w	42a47a <am_hal_usb_interrupt_service+0xc92>
  42a14e:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
  42a152:	f888 300b 	strb.w	r3, [r8, #11]
  42a156:	2300      	movs	r3, #0
  42a158:	6033      	str	r3, [r6, #0]
  42a15a:	6073      	str	r3, [r6, #4]
  42a15c:	60b3      	str	r3, [r6, #8]
  42a15e:	60f3      	str	r3, [r6, #12]
  42a160:	6133      	str	r3, [r6, #16]
  42a162:	6173      	str	r3, [r6, #20]
  42a164:	61b3      	str	r3, [r6, #24]
  42a166:	4660      	mov	r0, ip
  42a168:	461a      	mov	r2, r3
  42a16a:	9907      	ldr	r1, [sp, #28]
  42a16c:	f8d4 71b4 	ldr.w	r7, [r4, #436]	@ 0x1b4
  42a170:	47b8      	blx	r7
  42a172:	e4bf      	b.n	429af4 <am_hal_usb_interrupt_service+0x30c>
  42a174:	400b0000 	.word	0x400b0000
  42a178:	400b2000 	.word	0x400b2000
  42a17c:	4bb8      	ldr	r3, [pc, #736]	@ (42a460 <am_hal_usb_interrupt_service+0xc78>)
  42a17e:	6fa5      	ldr	r5, [r4, #120]	@ 0x78
  42a180:	691e      	ldr	r6, [r3, #16]
  42a182:	e9d4 021c 	ldrd	r0, r2, [r4, #112]	@ 0x70
  42a186:	02f6      	lsls	r6, r6, #11
  42a188:	f100 8230 	bmi.w	42a5ec <am_hal_usb_interrupt_service+0xe04>
  42a18c:	691e      	ldr	r6, [r3, #16]
  42a18e:	0377      	lsls	r7, r6, #13
  42a190:	f100 816e 	bmi.w	42a470 <am_hal_usb_interrupt_service+0xc88>
  42a194:	691e      	ldr	r6, [r3, #16]
  42a196:	03b6      	lsls	r6, r6, #14
  42a198:	f53f af25 	bmi.w	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a19c:	b2ae      	uxth	r6, r5
  42a19e:	1b92      	subs	r2, r2, r6
  42a1a0:	42b1      	cmp	r1, r6
  42a1a2:	b292      	uxth	r2, r2
  42a1a4:	f0c0 8247 	bcc.w	42a636 <am_hal_usb_interrupt_service+0xe4e>
  42a1a8:	f3c5 068d 	ubfx	r6, r5, #2, #14
  42a1ac:	f005 0103 	and.w	r1, r5, #3
  42a1b0:	b17e      	cbz	r6, 42a1d2 <am_hal_usb_interrupt_service+0x9ea>
  42a1b2:	ea4f 0e86 	mov.w	lr, r6, lsl #2
  42a1b6:	f1ae 0e04 	sub.w	lr, lr, #4
  42a1ba:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  42a1be:	f10e 0e01 	add.w	lr, lr, #1
  42a1c2:	f04e e001 	dls	lr, lr
  42a1c6:	1886      	adds	r6, r0, r2
  42a1c8:	f856 7b04 	ldr.w	r7, [r6], #4
  42a1cc:	621f      	str	r7, [r3, #32]
  42a1ce:	f00f c805 	le	lr, 42a1c8 <am_hal_usb_interrupt_service+0x9e0>
  42a1d2:	b191      	cbz	r1, 42a1fa <am_hal_usb_interrupt_service+0xa12>
  42a1d4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
  42a1d8:	402b      	ands	r3, r5
  42a1da:	4403      	add	r3, r0
  42a1dc:	5c98      	ldrb	r0, [r3, r2]
  42a1de:	4ea0      	ldr	r6, [pc, #640]	@ (42a460 <am_hal_usb_interrupt_service+0xc78>)
  42a1e0:	4413      	add	r3, r2
  42a1e2:	07aa      	lsls	r2, r5, #30
  42a1e4:	f886 0020 	strb.w	r0, [r6, #32]
  42a1e8:	d507      	bpl.n	42a1fa <am_hal_usb_interrupt_service+0xa12>
  42a1ea:	785a      	ldrb	r2, [r3, #1]
  42a1ec:	2903      	cmp	r1, #3
  42a1ee:	f886 2020 	strb.w	r2, [r6, #32]
  42a1f2:	d102      	bne.n	42a1fa <am_hal_usb_interrupt_service+0xa12>
  42a1f4:	789b      	ldrb	r3, [r3, #2]
  42a1f6:	f886 3020 	strb.w	r3, [r6, #32]
  42a1fa:	2300      	movs	r3, #0
  42a1fc:	67a3      	str	r3, [r4, #120]	@ 0x78
  42a1fe:	2305      	movs	r3, #5
  42a200:	4a97      	ldr	r2, [pc, #604]	@ (42a460 <am_hal_usb_interrupt_service+0xc78>)
  42a202:	f884 3056 	strb.w	r3, [r4, #86]	@ 0x56
  42a206:	6913      	ldr	r3, [r2, #16]
  42a208:	f423 2330 	bic.w	r3, r3, #720896	@ 0xb0000
  42a20c:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
  42a210:	6113      	str	r3, [r2, #16]
  42a212:	e6e8      	b.n	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a214:	4b92      	ldr	r3, [pc, #584]	@ (42a460 <am_hal_usb_interrupt_service+0xc78>)
  42a216:	6fa6      	ldr	r6, [r4, #120]	@ 0x78
  42a218:	6918      	ldr	r0, [r3, #16]
  42a21a:	6f62      	ldr	r2, [r4, #116]	@ 0x74
  42a21c:	02c7      	lsls	r7, r0, #11
  42a21e:	f100 81ac 	bmi.w	42a57a <am_hal_usb_interrupt_service+0xd92>
  42a222:	6918      	ldr	r0, [r3, #16]
  42a224:	0340      	lsls	r0, r0, #13
  42a226:	f100 8123 	bmi.w	42a470 <am_hal_usb_interrupt_service+0xc88>
  42a22a:	6918      	ldr	r0, [r3, #16]
  42a22c:	03c7      	lsls	r7, r0, #15
  42a22e:	f57f aeda 	bpl.w	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a232:	6998      	ldr	r0, [r3, #24]
  42a234:	6f25      	ldr	r5, [r4, #112]	@ 0x70
  42a236:	1b92      	subs	r2, r2, r6
  42a238:	fa15 f282 	uxtah	r2, r5, r2
  42a23c:	f3c0 050c 	ubfx	r5, r0, #0, #13
  42a240:	1b76      	subs	r6, r6, r5
  42a242:	ea5f 0e95 	movs.w	lr, r5, lsr #2
  42a246:	67a6      	str	r6, [r4, #120]	@ 0x78
  42a248:	f000 0003 	and.w	r0, r0, #3
  42a24c:	d00f      	beq.n	42a26e <am_hal_usb_interrupt_service+0xa86>
  42a24e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
  42a252:	f1ae 0e04 	sub.w	lr, lr, #4
  42a256:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  42a25a:	f10e 0e01 	add.w	lr, lr, #1
  42a25e:	f04e e001 	dls	lr, lr
  42a262:	1f16      	subs	r6, r2, #4
  42a264:	6a1f      	ldr	r7, [r3, #32]
  42a266:	f846 7f04 	str.w	r7, [r6, #4]!
  42a26a:	f00f c805 	le	lr, 42a264 <am_hal_usb_interrupt_service+0xa7c>
  42a26e:	b180      	cbz	r0, 42a292 <am_hal_usb_interrupt_service+0xaaa>
  42a270:	4b7b      	ldr	r3, [pc, #492]	@ (42a460 <am_hal_usb_interrupt_service+0xc78>)
  42a272:	f025 0603 	bic.w	r6, r5, #3
  42a276:	f893 7020 	ldrb.w	r7, [r3, #32]
  42a27a:	2801      	cmp	r0, #1
  42a27c:	5597      	strb	r7, [r2, r6]
  42a27e:	d008      	beq.n	42a292 <am_hal_usb_interrupt_service+0xaaa>
  42a280:	4432      	add	r2, r6
  42a282:	f893 6020 	ldrb.w	r6, [r3, #32]
  42a286:	2803      	cmp	r0, #3
  42a288:	7056      	strb	r6, [r2, #1]
  42a28a:	d102      	bne.n	42a292 <am_hal_usb_interrupt_service+0xaaa>
  42a28c:	f893 3020 	ldrb.w	r3, [r3, #32]
  42a290:	7093      	strb	r3, [r2, #2]
  42a292:	42a9      	cmp	r1, r5
  42a294:	f240 8215 	bls.w	42a6c2 <am_hal_usb_interrupt_service+0xeda>
  42a298:	2304      	movs	r3, #4
  42a29a:	4a71      	ldr	r2, [pc, #452]	@ (42a460 <am_hal_usb_interrupt_service+0xc78>)
  42a29c:	f884 3056 	strb.w	r3, [r4, #86]	@ 0x56
  42a2a0:	6913      	ldr	r3, [r2, #16]
  42a2a2:	f423 0396 	bic.w	r3, r3, #4915200	@ 0x4b0000
  42a2a6:	f443 0390 	orr.w	r3, r3, #4718592	@ 0x480000
  42a2aa:	6113      	str	r3, [r2, #16]
  42a2ac:	e69b      	b.n	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a2ae:	4a6c      	ldr	r2, [pc, #432]	@ (42a460 <am_hal_usb_interrupt_service+0xc78>)
  42a2b0:	6913      	ldr	r3, [r2, #16]
  42a2b2:	035b      	lsls	r3, r3, #13
  42a2b4:	f57f ae97 	bpl.w	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a2b8:	2300      	movs	r3, #0
  42a2ba:	6911      	ldr	r1, [r2, #16]
  42a2bc:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
  42a2c0:	6111      	str	r1, [r2, #16]
  42a2c2:	f884 3056 	strb.w	r3, [r4, #86]	@ 0x56
  42a2c6:	6723      	str	r3, [r4, #112]	@ 0x70
  42a2c8:	6763      	str	r3, [r4, #116]	@ 0x74
  42a2ca:	67a3      	str	r3, [r4, #120]	@ 0x78
  42a2cc:	67e3      	str	r3, [r4, #124]	@ 0x7c
  42a2ce:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  42a2d2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  42a2d6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  42a2da:	e684      	b.n	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a2dc:	4b60      	ldr	r3, [pc, #384]	@ (42a460 <am_hal_usb_interrupt_service+0xc78>)
  42a2de:	6f60      	ldr	r0, [r4, #116]	@ 0x74
  42a2e0:	691a      	ldr	r2, [r3, #16]
  42a2e2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
  42a2e4:	0356      	lsls	r6, r2, #13
  42a2e6:	eba0 0101 	sub.w	r1, r0, r1
  42a2ea:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  42a2ee:	f140 8082 	bpl.w	42a3f6 <am_hal_usb_interrupt_service+0xc0e>
  42a2f2:	691a      	ldr	r2, [r3, #16]
  42a2f4:	f104 0670 	add.w	r6, r4, #112	@ 0x70
  42a2f8:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
  42a2fc:	611a      	str	r2, [r3, #16]
  42a2fe:	b140      	cbz	r0, 42a312 <am_hal_usb_interrupt_service+0xb2a>
  42a300:	f894 21ba 	ldrb.w	r2, [r4, #442]	@ 0x1ba
  42a304:	2a00      	cmp	r2, #0
  42a306:	f040 81c8 	bne.w	42a69a <am_hal_usb_interrupt_service+0xeb2>
  42a30a:	7ada      	ldrb	r2, [r3, #11]
  42a30c:	f002 02f7 	and.w	r2, r2, #247	@ 0xf7
  42a310:	72da      	strb	r2, [r3, #11]
  42a312:	2300      	movs	r3, #0
  42a314:	6723      	str	r3, [r4, #112]	@ 0x70
  42a316:	6073      	str	r3, [r6, #4]
  42a318:	60b3      	str	r3, [r6, #8]
  42a31a:	60f3      	str	r3, [r6, #12]
  42a31c:	6133      	str	r3, [r6, #16]
  42a31e:	6173      	str	r3, [r6, #20]
  42a320:	61b3      	str	r3, [r6, #24]
  42a322:	2202      	movs	r2, #2
  42a324:	2080      	movs	r0, #128	@ 0x80
  42a326:	f8d4 51b4 	ldr.w	r5, [r4, #436]	@ 0x1b4
  42a32a:	47a8      	blx	r5
  42a32c:	e64a      	b.n	429fc4 <am_hal_usb_interrupt_service+0x7dc>
  42a32e:	4b4c      	ldr	r3, [pc, #304]	@ (42a460 <am_hal_usb_interrupt_service+0xc78>)
  42a330:	691b      	ldr	r3, [r3, #16]
  42a332:	03da      	lsls	r2, r3, #15
  42a334:	f57f ae57 	bpl.w	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a338:	e652      	b.n	429fe0 <am_hal_usb_interrupt_service+0x7f8>
  42a33a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  42a33c:	4620      	mov	r0, r4
  42a33e:	f3c1 0142 	ubfx	r1, r1, #1, #3
  42a342:	f7ff f831 	bl	4293a8 <am_hal_usb_out_ep_dma0_handling.constprop.0>
  42a346:	e498      	b.n	429c7a <am_hal_usb_interrupt_service+0x492>
  42a348:	6953      	ldr	r3, [r2, #20]
  42a34a:	f423 0382 	bic.w	r3, r3, #4259840	@ 0x410000
  42a34e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
  42a352:	6153      	str	r3, [r2, #20]
  42a354:	e458      	b.n	429c08 <am_hal_usb_interrupt_service+0x420>
  42a356:	2a00      	cmp	r2, #0
  42a358:	f43f abcc 	beq.w	429af4 <am_hal_usb_interrupt_service+0x30c>
  42a35c:	f88d 1034 	strb.w	r1, [sp, #52]	@ 0x34
  42a360:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  42a364:	4460      	add	r0, ip
  42a366:	e9cd 020b 	strd	r0, r2, [sp, #44]	@ 0x2c
  42a36a:	4a3e      	ldr	r2, [pc, #248]	@ (42a464 <am_hal_usb_interrupt_service+0xc7c>)
  42a36c:	f88d a035 	strb.w	sl, [sp, #53]	@ 0x35
  42a370:	f8c2 1080 	str.w	r1, [r2, #128]	@ 0x80
  42a374:	f3bf 8f4f 	dsb	sy
  42a378:	f3bf 8f6f 	isb	sy
  42a37c:	4a3a      	ldr	r2, [pc, #232]	@ (42a468 <am_hal_usb_interrupt_service+0xc80>)
  42a37e:	7811      	ldrb	r1, [r2, #0]
  42a380:	2900      	cmp	r1, #0
  42a382:	f040 812b 	bne.w	42a5dc <am_hal_usb_interrupt_service+0xdf4>
  42a386:	f04f 0c03 	mov.w	ip, #3
  42a38a:	f882 a000 	strb.w	sl, [r2]
  42a38e:	4a37      	ldr	r2, [pc, #220]	@ (42a46c <am_hal_usb_interrupt_service+0xc84>)
  42a390:	f8d2 e02c 	ldr.w	lr, [r2, #44]	@ 0x2c
  42a394:	f02e 0e01 	bic.w	lr, lr, #1
  42a398:	f8c2 e02c 	str.w	lr, [r2, #44]	@ 0x2c
  42a39c:	6310      	str	r0, [r2, #48]	@ 0x30
  42a39e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
  42a3a0:	f365 0043 	bfi	r0, r5, #1, #3
  42a3a4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  42a3a6:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
  42a3a8:	f040 0010 	orr.w	r0, r0, #16
  42a3ac:	62d0      	str	r0, [r2, #44]	@ 0x2c
  42a3ae:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
  42a3b0:	f361 1045 	bfi	r0, r1, #5, #1
  42a3b4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  42a3b6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
  42a3b8:	9807      	ldr	r0, [sp, #28]
  42a3ba:	f360 411b 	bfi	r1, r0, #16, #12
  42a3be:	62d1      	str	r1, [r2, #44]	@ 0x2c
  42a3c0:	f8c2 c034 	str.w	ip, [r2, #52]	@ 0x34
  42a3c4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
  42a3c6:	f041 0101 	orr.w	r1, r1, #1
  42a3ca:	62d1      	str	r1, [r2, #44]	@ 0x2c
  42a3cc:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  42a3d0:	4a24      	ldr	r2, [pc, #144]	@ (42a464 <am_hal_usb_interrupt_service+0xc7c>)
  42a3d2:	6011      	str	r1, [r2, #0]
  42a3d4:	68b2      	ldr	r2, [r6, #8]
  42a3d6:	f7ff bb70 	b.w	429aba <am_hal_usb_interrupt_service+0x2d2>
  42a3da:	7afb      	ldrb	r3, [r7, #11]
  42a3dc:	f043 0308 	orr.w	r3, r3, #8
  42a3e0:	72fb      	strb	r3, [r7, #11]
  42a3e2:	e659      	b.n	42a098 <am_hal_usb_interrupt_service+0x8b0>
  42a3e4:	f042 0208 	orr.w	r2, r2, #8
  42a3e8:	72da      	strb	r2, [r3, #11]
  42a3ea:	e585      	b.n	429ef8 <am_hal_usb_interrupt_service+0x710>
  42a3ec:	f1bc 0f00 	cmp.w	ip, #0
  42a3f0:	f47f ac0a 	bne.w	429c08 <am_hal_usb_interrupt_service+0x420>
  42a3f4:	e404      	b.n	429c00 <am_hal_usb_interrupt_service+0x418>
  42a3f6:	f104 0670 	add.w	r6, r4, #112	@ 0x70
  42a3fa:	b140      	cbz	r0, 42a40e <am_hal_usb_interrupt_service+0xc26>
  42a3fc:	f894 21ba 	ldrb.w	r2, [r4, #442]	@ 0x1ba
  42a400:	2a00      	cmp	r2, #0
  42a402:	f040 8113 	bne.w	42a62c <am_hal_usb_interrupt_service+0xe44>
  42a406:	7ada      	ldrb	r2, [r3, #11]
  42a408:	f002 02f7 	and.w	r2, r2, #247	@ 0xf7
  42a40c:	72da      	strb	r2, [r3, #11]
  42a40e:	2300      	movs	r3, #0
  42a410:	6723      	str	r3, [r4, #112]	@ 0x70
  42a412:	6073      	str	r3, [r6, #4]
  42a414:	60b3      	str	r3, [r6, #8]
  42a416:	60f3      	str	r3, [r6, #12]
  42a418:	6133      	str	r3, [r6, #16]
  42a41a:	6173      	str	r3, [r6, #20]
  42a41c:	61b3      	str	r3, [r6, #24]
  42a41e:	2080      	movs	r0, #128	@ 0x80
  42a420:	461a      	mov	r2, r3
  42a422:	f8d4 51b4 	ldr.w	r5, [r4, #436]	@ 0x1b4
  42a426:	47a8      	blx	r5
  42a428:	e5cc      	b.n	429fc4 <am_hal_usb_interrupt_service+0x7dc>
  42a42a:	f104 0670 	add.w	r6, r4, #112	@ 0x70
  42a42e:	b140      	cbz	r0, 42a442 <am_hal_usb_interrupt_service+0xc5a>
  42a430:	f894 21ba 	ldrb.w	r2, [r4, #442]	@ 0x1ba
  42a434:	2a00      	cmp	r2, #0
  42a436:	f040 813a 	bne.w	42a6ae <am_hal_usb_interrupt_service+0xec6>
  42a43a:	7ada      	ldrb	r2, [r3, #11]
  42a43c:	f002 02f7 	and.w	r2, r2, #247	@ 0xf7
  42a440:	72da      	strb	r2, [r3, #11]
  42a442:	2300      	movs	r3, #0
  42a444:	6723      	str	r3, [r4, #112]	@ 0x70
  42a446:	6073      	str	r3, [r6, #4]
  42a448:	60b3      	str	r3, [r6, #8]
  42a44a:	60f3      	str	r3, [r6, #12]
  42a44c:	6133      	str	r3, [r6, #16]
  42a44e:	6173      	str	r3, [r6, #20]
  42a450:	61b3      	str	r3, [r6, #24]
  42a452:	461a      	mov	r2, r3
  42a454:	4618      	mov	r0, r3
  42a456:	f8d4 51b4 	ldr.w	r5, [r4, #436]	@ 0x1b4
  42a45a:	47a8      	blx	r5
  42a45c:	e5b2      	b.n	429fc4 <am_hal_usb_interrupt_service+0x7dc>
  42a45e:	bf00      	nop
  42a460:	400b0000 	.word	0x400b0000
  42a464:	e000e100 	.word	0xe000e100
  42a468:	2004e8f1 	.word	0x2004e8f1
  42a46c:	400b2000 	.word	0x400b2000
  42a470:	691a      	ldr	r2, [r3, #16]
  42a472:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
  42a476:	611a      	str	r2, [r3, #16]
  42a478:	e5b5      	b.n	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a47a:	f043 0308 	orr.w	r3, r3, #8
  42a47e:	f888 300b 	strb.w	r3, [r8, #11]
  42a482:	e668      	b.n	42a156 <am_hal_usb_interrupt_service+0x96e>
  42a484:	9f01      	ldr	r7, [sp, #4]
  42a486:	f007 0703 	and.w	r7, r7, #3
  42a48a:	9701      	str	r7, [sp, #4]
  42a48c:	6e8f      	ldr	r7, [r1, #104]	@ 0x68
  42a48e:	ea4e 0707 	orr.w	r7, lr, r7
  42a492:	668f      	str	r7, [r1, #104]	@ 0x68
  42a494:	6c8f      	ldr	r7, [r1, #72]	@ 0x48
  42a496:	ea27 070e 	bic.w	r7, r7, lr
  42a49a:	648f      	str	r7, [r1, #72]	@ 0x48
  42a49c:	6951      	ldr	r1, [r2, #20]
  42a49e:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
  42a4a2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
  42a4a6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
  42a4aa:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
  42a4ae:	6151      	str	r1, [r2, #20]
  42a4b0:	f242 12f0 	movw	r2, #8688	@ 0x21f0
  42a4b4:	f858 1002 	ldr.w	r1, [r8, r2]
  42a4b8:	6832      	ldr	r2, [r6, #0]
  42a4ba:	eb01 070c 	add.w	r7, r1, ip
  42a4be:	eba7 0202 	sub.w	r2, r7, r2
  42a4c2:	9204      	str	r2, [sp, #16]
  42a4c4:	d010      	beq.n	42a4e8 <am_hal_usb_interrupt_service+0xd00>
  42a4c6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
  42a4ca:	f1ae 0e04 	sub.w	lr, lr, #4
  42a4ce:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  42a4d2:	f10e 0e01 	add.w	lr, lr, #1
  42a4d6:	f04e e001 	dls	lr, lr
  42a4da:	460a      	mov	r2, r1
  42a4dc:	f8d8 7000 	ldr.w	r7, [r8]
  42a4e0:	f842 7b04 	str.w	r7, [r2], #4
  42a4e4:	f00f c007 	le	lr, 42a4dc <am_hal_usb_interrupt_service+0xcf4>
  42a4e8:	9a01      	ldr	r2, [sp, #4]
  42a4ea:	b18a      	cbz	r2, 42a510 <am_hal_usb_interrupt_service+0xd28>
  42a4ec:	4617      	mov	r7, r2
  42a4ee:	f898 2000 	ldrb.w	r2, [r8]
  42a4f2:	f02c 0c03 	bic.w	ip, ip, #3
  42a4f6:	2f01      	cmp	r7, #1
  42a4f8:	f801 200c 	strb.w	r2, [r1, ip]
  42a4fc:	d008      	beq.n	42a510 <am_hal_usb_interrupt_service+0xd28>
  42a4fe:	f898 2000 	ldrb.w	r2, [r8]
  42a502:	4461      	add	r1, ip
  42a504:	2f03      	cmp	r7, #3
  42a506:	704a      	strb	r2, [r1, #1]
  42a508:	d102      	bne.n	42a510 <am_hal_usb_interrupt_service+0xd28>
  42a50a:	f898 2000 	ldrb.w	r2, [r8]
  42a50e:	708a      	strb	r2, [r1, #2]
  42a510:	4a74      	ldr	r2, [pc, #464]	@ (42a6e4 <am_hal_usb_interrupt_service+0xefc>)
  42a512:	7a11      	ldrb	r1, [r2, #8]
  42a514:	ea21 0303 	bic.w	r3, r1, r3
  42a518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  42a51c:	7213      	strb	r3, [r2, #8]
  42a51e:	6973      	ldr	r3, [r6, #20]
  42a520:	b1bb      	cbz	r3, 42a552 <am_hal_usb_interrupt_service+0xd6a>
  42a522:	f894 11ba 	ldrb.w	r1, [r4, #442]	@ 0x1ba
  42a526:	2701      	movs	r7, #1
  42a528:	460b      	mov	r3, r1
  42a52a:	f105 3cff 	add.w	ip, r5, #4294967295	@ 0xffffffff
  42a52e:	f3c1 0144 	ubfx	r1, r1, #1, #5
  42a532:	fa07 f70c 	lsl.w	r7, r7, ip
  42a536:	ea21 0107 	bic.w	r1, r1, r7
  42a53a:	f361 0345 	bfi	r3, r1, #1, #5
  42a53e:	f884 31ba 	strb.w	r3, [r4, #442]	@ 0x1ba
  42a542:	b2db      	uxtb	r3, r3
  42a544:	2b00      	cmp	r3, #0
  42a546:	f040 80b7 	bne.w	42a6b8 <am_hal_usb_interrupt_service+0xed0>
  42a54a:	7ad3      	ldrb	r3, [r2, #11]
  42a54c:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
  42a550:	72d3      	strb	r3, [r2, #11]
  42a552:	2300      	movs	r3, #0
  42a554:	6033      	str	r3, [r6, #0]
  42a556:	6073      	str	r3, [r6, #4]
  42a558:	60b3      	str	r3, [r6, #8]
  42a55a:	60f3      	str	r3, [r6, #12]
  42a55c:	6133      	str	r3, [r6, #16]
  42a55e:	6173      	str	r3, [r6, #20]
  42a560:	61b3      	str	r3, [r6, #24]
  42a562:	461a      	mov	r2, r3
  42a564:	9904      	ldr	r1, [sp, #16]
  42a566:	f8d4 71b4 	ldr.w	r7, [r4, #436]	@ 0x1b4
  42a56a:	47b8      	blx	r7
  42a56c:	4a5d      	ldr	r2, [pc, #372]	@ (42a6e4 <am_hal_usb_interrupt_service+0xefc>)
  42a56e:	6953      	ldr	r3, [r2, #20]
  42a570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  42a574:	6153      	str	r3, [r2, #20]
  42a576:	f7ff bb47 	b.w	429c08 <am_hal_usb_interrupt_service+0x420>
  42a57a:	6919      	ldr	r1, [r3, #16]
  42a57c:	f421 0103 	bic.w	r1, r1, #8585216	@ 0x830000
  42a580:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  42a584:	6119      	str	r1, [r3, #16]
  42a586:	6919      	ldr	r1, [r3, #16]
  42a588:	03cd      	lsls	r5, r1, #15
  42a58a:	f53f ad2c 	bmi.w	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a58e:	1b91      	subs	r1, r2, r6
  42a590:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  42a594:	f104 0670 	add.w	r6, r4, #112	@ 0x70
  42a598:	b142      	cbz	r2, 42a5ac <am_hal_usb_interrupt_service+0xdc4>
  42a59a:	f894 21ba 	ldrb.w	r2, [r4, #442]	@ 0x1ba
  42a59e:	7ad8      	ldrb	r0, [r3, #11]
  42a5a0:	2a00      	cmp	r2, #0
  42a5a2:	f040 809b 	bne.w	42a6dc <am_hal_usb_interrupt_service+0xef4>
  42a5a6:	f000 00f7 	and.w	r0, r0, #247	@ 0xf7
  42a5aa:	72d8      	strb	r0, [r3, #11]
  42a5ac:	2700      	movs	r7, #0
  42a5ae:	2206      	movs	r2, #6
  42a5b0:	463b      	mov	r3, r7
  42a5b2:	4638      	mov	r0, r7
  42a5b4:	6727      	str	r7, [r4, #112]	@ 0x70
  42a5b6:	6077      	str	r7, [r6, #4]
  42a5b8:	60b7      	str	r7, [r6, #8]
  42a5ba:	60f7      	str	r7, [r6, #12]
  42a5bc:	6137      	str	r7, [r6, #16]
  42a5be:	6177      	str	r7, [r6, #20]
  42a5c0:	61b7      	str	r7, [r6, #24]
  42a5c2:	f8d4 51b4 	ldr.w	r5, [r4, #436]	@ 0x1b4
  42a5c6:	47a8      	blx	r5
  42a5c8:	f884 7056 	strb.w	r7, [r4, #86]	@ 0x56
  42a5cc:	6727      	str	r7, [r4, #112]	@ 0x70
  42a5ce:	6077      	str	r7, [r6, #4]
  42a5d0:	60b7      	str	r7, [r6, #8]
  42a5d2:	60f7      	str	r7, [r6, #12]
  42a5d4:	6137      	str	r7, [r6, #16]
  42a5d6:	6177      	str	r7, [r6, #20]
  42a5d8:	61b7      	str	r7, [r6, #24]
  42a5da:	e504      	b.n	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a5dc:	2201      	movs	r2, #1
  42a5de:	4842      	ldr	r0, [pc, #264]	@ (42a6e8 <am_hal_usb_interrupt_service+0xf00>)
  42a5e0:	a90b      	add	r1, sp, #44	@ 0x2c
  42a5e2:	9309      	str	r3, [sp, #36]	@ 0x24
  42a5e4:	f000 f9c2 	bl	42a96c <am_hal_queue_item_add>
  42a5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  42a5ea:	e6ef      	b.n	42a3cc <am_hal_usb_interrupt_service+0xbe4>
  42a5ec:	1b51      	subs	r1, r2, r5
  42a5ee:	691a      	ldr	r2, [r3, #16]
  42a5f0:	f104 0670 	add.w	r6, r4, #112	@ 0x70
  42a5f4:	f422 0203 	bic.w	r2, r2, #8585216	@ 0x830000
  42a5f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
  42a5fc:	611a      	str	r2, [r3, #16]
  42a5fe:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
  42a602:	b13a      	cbz	r2, 42a614 <am_hal_usb_interrupt_service+0xe2c>
  42a604:	f894 21ba 	ldrb.w	r2, [r4, #442]	@ 0x1ba
  42a608:	2a00      	cmp	r2, #0
  42a60a:	d162      	bne.n	42a6d2 <am_hal_usb_interrupt_service+0xeea>
  42a60c:	7ada      	ldrb	r2, [r3, #11]
  42a60e:	f002 02f7 	and.w	r2, r2, #247	@ 0xf7
  42a612:	72da      	strb	r2, [r3, #11]
  42a614:	2700      	movs	r7, #0
  42a616:	2206      	movs	r2, #6
  42a618:	6727      	str	r7, [r4, #112]	@ 0x70
  42a61a:	2080      	movs	r0, #128	@ 0x80
  42a61c:	463b      	mov	r3, r7
  42a61e:	6077      	str	r7, [r6, #4]
  42a620:	60b7      	str	r7, [r6, #8]
  42a622:	60f7      	str	r7, [r6, #12]
  42a624:	6137      	str	r7, [r6, #16]
  42a626:	6177      	str	r7, [r6, #20]
  42a628:	61b7      	str	r7, [r6, #24]
  42a62a:	e7ca      	b.n	42a5c2 <am_hal_usb_interrupt_service+0xdda>
  42a62c:	7ada      	ldrb	r2, [r3, #11]
  42a62e:	f042 0208 	orr.w	r2, r2, #8
  42a632:	72da      	strb	r2, [r3, #11]
  42a634:	e6eb      	b.n	42a40e <am_hal_usb_interrupt_service+0xc26>
  42a636:	1a6d      	subs	r5, r5, r1
  42a638:	ea5f 0e91 	movs.w	lr, r1, lsr #2
  42a63c:	67a5      	str	r5, [r4, #120]	@ 0x78
  42a63e:	f001 0503 	and.w	r5, r1, #3
  42a642:	d00f      	beq.n	42a664 <am_hal_usb_interrupt_service+0xe7c>
  42a644:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
  42a648:	f1ae 0e04 	sub.w	lr, lr, #4
  42a64c:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
  42a650:	f10e 0e01 	add.w	lr, lr, #1
  42a654:	f04e e001 	dls	lr, lr
  42a658:	1886      	adds	r6, r0, r2
  42a65a:	f856 7b04 	ldr.w	r7, [r6], #4
  42a65e:	621f      	str	r7, [r3, #32]
  42a660:	f00f c805 	le	lr, 42a65a <am_hal_usb_interrupt_service+0xe72>
  42a664:	b18d      	cbz	r5, 42a68a <am_hal_usb_interrupt_service+0xea2>
  42a666:	f021 0103 	bic.w	r1, r1, #3
  42a66a:	1843      	adds	r3, r0, r1
  42a66c:	5c99      	ldrb	r1, [r3, r2]
  42a66e:	4413      	add	r3, r2
  42a670:	4a1c      	ldr	r2, [pc, #112]	@ (42a6e4 <am_hal_usb_interrupt_service+0xefc>)
  42a672:	2d01      	cmp	r5, #1
  42a674:	f882 1020 	strb.w	r1, [r2, #32]
  42a678:	d007      	beq.n	42a68a <am_hal_usb_interrupt_service+0xea2>
  42a67a:	7859      	ldrb	r1, [r3, #1]
  42a67c:	2d03      	cmp	r5, #3
  42a67e:	f882 1020 	strb.w	r1, [r2, #32]
  42a682:	d102      	bne.n	42a68a <am_hal_usb_interrupt_service+0xea2>
  42a684:	789b      	ldrb	r3, [r3, #2]
  42a686:	f882 3020 	strb.w	r3, [r2, #32]
  42a68a:	4a16      	ldr	r2, [pc, #88]	@ (42a6e4 <am_hal_usb_interrupt_service+0xefc>)
  42a68c:	6913      	ldr	r3, [r2, #16]
  42a68e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
  42a692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  42a696:	6113      	str	r3, [r2, #16]
  42a698:	e4a5      	b.n	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a69a:	7ada      	ldrb	r2, [r3, #11]
  42a69c:	f042 0208 	orr.w	r2, r2, #8
  42a6a0:	72da      	strb	r2, [r3, #11]
  42a6a2:	e636      	b.n	42a312 <am_hal_usb_interrupt_service+0xb2a>
  42a6a4:	7ada      	ldrb	r2, [r3, #11]
  42a6a6:	f042 0208 	orr.w	r2, r2, #8
  42a6aa:	72da      	strb	r2, [r3, #11]
  42a6ac:	e47d      	b.n	429faa <am_hal_usb_interrupt_service+0x7c2>
  42a6ae:	7ada      	ldrb	r2, [r3, #11]
  42a6b0:	f042 0208 	orr.w	r2, r2, #8
  42a6b4:	72da      	strb	r2, [r3, #11]
  42a6b6:	e6c4      	b.n	42a442 <am_hal_usb_interrupt_service+0xc5a>
  42a6b8:	7ad3      	ldrb	r3, [r2, #11]
  42a6ba:	f043 0308 	orr.w	r3, r3, #8
  42a6be:	72d3      	strb	r3, [r2, #11]
  42a6c0:	e747      	b.n	42a552 <am_hal_usb_interrupt_service+0xd6a>
  42a6c2:	4a08      	ldr	r2, [pc, #32]	@ (42a6e4 <am_hal_usb_interrupt_service+0xefc>)
  42a6c4:	6913      	ldr	r3, [r2, #16]
  42a6c6:	f423 0386 	bic.w	r3, r3, #4390912	@ 0x430000
  42a6ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
  42a6ce:	6113      	str	r3, [r2, #16]
  42a6d0:	e489      	b.n	429fe6 <am_hal_usb_interrupt_service+0x7fe>
  42a6d2:	7ada      	ldrb	r2, [r3, #11]
  42a6d4:	f042 0208 	orr.w	r2, r2, #8
  42a6d8:	72da      	strb	r2, [r3, #11]
  42a6da:	e79b      	b.n	42a614 <am_hal_usb_interrupt_service+0xe2c>
  42a6dc:	f040 0008 	orr.w	r0, r0, #8
  42a6e0:	72d8      	strb	r0, [r3, #11]
  42a6e2:	e763      	b.n	42a5ac <am_hal_usb_interrupt_service+0xdc4>
  42a6e4:	400b0000 	.word	0x400b0000
  42a6e8:	2004e8f4 	.word	0x2004e8f4

0042a6ec <am_hal_triple_read>:
  42a6ec:	b412      	push	{r1, r4}
  42a6ee:	f3ef 8410 	mrs	r4, PRIMASK
  42a6f2:	b672      	cpsid	i
  42a6f4:	6801      	ldr	r1, [r0, #0]
  42a6f6:	6802      	ldr	r2, [r0, #0]
  42a6f8:	6803      	ldr	r3, [r0, #0]
  42a6fa:	f384 8810 	msr	PRIMASK, r4
  42a6fe:	bc11      	pop	{r0, r4}
  42a700:	6001      	str	r1, [r0, #0]
  42a702:	6042      	str	r2, [r0, #4]
  42a704:	6083      	str	r3, [r0, #8]
  42a706:	4770      	bx	lr

0042a708 <am_hal_gpio_pinconfig_get>:
  42a708:	28df      	cmp	r0, #223	@ 0xdf
  42a70a:	d809      	bhi.n	42a720 <am_hal_gpio_pinconfig_get+0x18>
  42a70c:	b151      	cbz	r1, 42a724 <am_hal_gpio_pinconfig_get+0x1c>
  42a70e:	0080      	lsls	r0, r0, #2
  42a710:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
  42a714:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
  42a718:	6803      	ldr	r3, [r0, #0]
  42a71a:	2000      	movs	r0, #0
  42a71c:	600b      	str	r3, [r1, #0]
  42a71e:	4770      	bx	lr
  42a720:	2005      	movs	r0, #5
  42a722:	4770      	bx	lr
  42a724:	2006      	movs	r0, #6
  42a726:	4770      	bx	lr

0042a728 <am_hal_gpio_pinconfig>:
  42a728:	b410      	push	{r4}
  42a72a:	28df      	cmp	r0, #223	@ 0xdf
  42a72c:	b083      	sub	sp, #12
  42a72e:	9101      	str	r1, [sp, #4]
  42a730:	d82f      	bhi.n	42a792 <am_hal_gpio_pinconfig+0x6a>
  42a732:	2301      	movs	r3, #1
  42a734:	491c      	ldr	r1, [pc, #112]	@ (42a7a8 <am_hal_gpio_pinconfig+0x80>)
  42a736:	0942      	lsrs	r2, r0, #5
  42a738:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  42a73c:	f000 0c1f 	and.w	ip, r0, #31
  42a740:	fa03 f30c 	lsl.w	r3, r3, ip
  42a744:	420b      	tst	r3, r1
  42a746:	d118      	bne.n	42a77a <am_hal_gpio_pinconfig+0x52>
  42a748:	f89d 1005 	ldrb.w	r1, [sp, #5]
  42a74c:	f3c1 0182 	ubfx	r1, r1, #2, #3
  42a750:	0789      	lsls	r1, r1, #30
  42a752:	d423      	bmi.n	42a79c <am_hal_gpio_pinconfig+0x74>
  42a754:	2100      	movs	r1, #0
  42a756:	2473      	movs	r4, #115	@ 0x73
  42a758:	0080      	lsls	r0, r0, #2
  42a75a:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
  42a75e:	4608      	mov	r0, r1
  42a760:	4a12      	ldr	r2, [pc, #72]	@ (42a7ac <am_hal_gpio_pinconfig+0x84>)
  42a762:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
  42a766:	f8c2 4400 	str.w	r4, [r2, #1024]	@ 0x400
  42a76a:	9c01      	ldr	r4, [sp, #4]
  42a76c:	601c      	str	r4, [r3, #0]
  42a76e:	f8c2 1400 	str.w	r1, [r2, #1024]	@ 0x400
  42a772:	b003      	add	sp, #12
  42a774:	f85d 4b04 	ldr.w	r4, [sp], #4
  42a778:	4770      	bx	lr
  42a77a:	f89d 3005 	ldrb.w	r3, [sp, #5]
  42a77e:	2b1f      	cmp	r3, #31
  42a780:	d9e8      	bls.n	42a754 <am_hal_gpio_pinconfig+0x2c>
  42a782:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
  42a786:	2bc0      	cmp	r3, #192	@ 0xc0
  42a788:	d0e4      	beq.n	42a754 <am_hal_gpio_pinconfig+0x2c>
  42a78a:	2b20      	cmp	r3, #32
  42a78c:	d0e2      	beq.n	42a754 <am_hal_gpio_pinconfig+0x2c>
  42a78e:	2007      	movs	r0, #7
  42a790:	e7ef      	b.n	42a772 <am_hal_gpio_pinconfig+0x4a>
  42a792:	2005      	movs	r0, #5
  42a794:	b003      	add	sp, #12
  42a796:	f85d 4b04 	ldr.w	r4, [sp], #4
  42a79a:	4770      	bx	lr
  42a79c:	4904      	ldr	r1, [pc, #16]	@ (42a7b0 <am_hal_gpio_pinconfig+0x88>)
  42a79e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  42a7a2:	4213      	tst	r3, r2
  42a7a4:	d1d6      	bne.n	42a754 <am_hal_gpio_pinconfig+0x2c>
  42a7a6:	e7f2      	b.n	42a78e <am_hal_gpio_pinconfig+0x66>
  42a7a8:	0043c9f0 	.word	0x0043c9f0
  42a7ac:	40010000 	.word	0x40010000
  42a7b0:	0043c9d0 	.word	0x0043c9d0

0042a7b4 <am_hal_mcuctrl_control>:
  42a7b4:	b530      	push	{r4, r5, lr}
  42a7b6:	460d      	mov	r5, r1
  42a7b8:	b083      	sub	sp, #12
  42a7ba:	2804      	cmp	r0, #4
  42a7bc:	f200 80cc 	bhi.w	42a958 <am_hal_mcuctrl_control+0x1a4>
  42a7c0:	e8df f000 	tbb	[pc, r0]
  42a7c4:	87372717 	.word	0x87372717
  42a7c8:	03          	.byte	0x03
  42a7c9:	00          	.byte	0x00
  42a7ca:	4a64      	ldr	r2, [pc, #400]	@ (42a95c <am_hal_mcuctrl_control+0x1a8>)
  42a7cc:	f8d2 312c 	ldr.w	r3, [r2, #300]	@ 0x12c
  42a7d0:	9301      	str	r3, [sp, #4]
  42a7d2:	9b01      	ldr	r3, [sp, #4]
  42a7d4:	f423 7395 	bic.w	r3, r3, #298	@ 0x12a
  42a7d8:	f023 0301 	bic.w	r3, r3, #1
  42a7dc:	9301      	str	r3, [sp, #4]
  42a7de:	9b01      	ldr	r3, [sp, #4]
  42a7e0:	f043 0302 	orr.w	r3, r3, #2
  42a7e4:	9301      	str	r3, [sp, #4]
  42a7e6:	9b01      	ldr	r3, [sp, #4]
  42a7e8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  42a7ec:	2000      	movs	r0, #0
  42a7ee:	b003      	add	sp, #12
  42a7f0:	bd30      	pop	{r4, r5, pc}
  42a7f2:	4a5a      	ldr	r2, [pc, #360]	@ (42a95c <am_hal_mcuctrl_control+0x1a8>)
  42a7f4:	f8d2 3120 	ldr.w	r3, [r2, #288]	@ 0x120
  42a7f8:	9301      	str	r3, [sp, #4]
  42a7fa:	9b01      	ldr	r3, [sp, #4]
  42a7fc:	f023 031f 	bic.w	r3, r3, #31
  42a800:	9301      	str	r3, [sp, #4]
  42a802:	9b01      	ldr	r3, [sp, #4]
  42a804:	f043 0319 	orr.w	r3, r3, #25
  42a808:	9301      	str	r3, [sp, #4]
  42a80a:	9b01      	ldr	r3, [sp, #4]
  42a80c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  42a810:	e7ec      	b.n	42a7ec <am_hal_mcuctrl_control+0x38>
  42a812:	4a52      	ldr	r2, [pc, #328]	@ (42a95c <am_hal_mcuctrl_control+0x1a8>)
  42a814:	f8d2 3120 	ldr.w	r3, [r2, #288]	@ 0x120
  42a818:	9301      	str	r3, [sp, #4]
  42a81a:	9b01      	ldr	r3, [sp, #4]
  42a81c:	f023 031f 	bic.w	r3, r3, #31
  42a820:	9301      	str	r3, [sp, #4]
  42a822:	9b01      	ldr	r3, [sp, #4]
  42a824:	f043 0318 	orr.w	r3, r3, #24
  42a828:	9301      	str	r3, [sp, #4]
  42a82a:	9b01      	ldr	r3, [sp, #4]
  42a82c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  42a830:	e7dc      	b.n	42a7ec <am_hal_mcuctrl_control+0x38>
  42a832:	4b4b      	ldr	r3, [pc, #300]	@ (42a960 <am_hal_mcuctrl_control+0x1ac>)
  42a834:	4a4b      	ldr	r2, [pc, #300]	@ (42a964 <am_hal_mcuctrl_control+0x1b0>)
  42a836:	681b      	ldr	r3, [r3, #0]
  42a838:	6811      	ldr	r1, [r2, #0]
  42a83a:	019b      	lsls	r3, r3, #6
  42a83c:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
  42a840:	4a49      	ldr	r2, [pc, #292]	@ (42a968 <am_hal_mcuctrl_control+0x1b4>)
  42a842:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
  42a846:	430b      	orrs	r3, r1
  42a848:	431a      	orrs	r2, r3
  42a84a:	9201      	str	r2, [sp, #4]
  42a84c:	9b01      	ldr	r3, [sp, #4]
  42a84e:	4c43      	ldr	r4, [pc, #268]	@ (42a95c <am_hal_mcuctrl_control+0x1a8>)
  42a850:	2005      	movs	r0, #5
  42a852:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42a856:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
  42a85a:	9301      	str	r3, [sp, #4]
  42a85c:	9b01      	ldr	r3, [sp, #4]
  42a85e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
  42a862:	9301      	str	r3, [sp, #4]
  42a864:	9b01      	ldr	r3, [sp, #4]
  42a866:	f043 0302 	orr.w	r3, r3, #2
  42a86a:	9301      	str	r3, [sp, #4]
  42a86c:	9b01      	ldr	r3, [sp, #4]
  42a86e:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
  42a872:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
  42a876:	f043 0301 	orr.w	r3, r3, #1
  42a87a:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
  42a87e:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
  42a882:	f043 0310 	orr.w	r3, r3, #16
  42a886:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
  42a88a:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
  42a88e:	f043 0308 	orr.w	r3, r3, #8
  42a892:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
  42a896:	f7fc ffe9 	bl	42786c <am_hal_delay_us>
  42a89a:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
  42a89e:	f023 0310 	bic.w	r3, r3, #16
  42a8a2:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
  42a8a6:	2d00      	cmp	r5, #0
  42a8a8:	d0a0      	beq.n	42a7ec <am_hal_mcuctrl_control+0x38>
  42a8aa:	782b      	ldrb	r3, [r5, #0]
  42a8ac:	2b00      	cmp	r3, #0
  42a8ae:	d09d      	beq.n	42a7ec <am_hal_mcuctrl_control+0x38>
  42a8b0:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
  42a8b4:	9301      	str	r3, [sp, #4]
  42a8b6:	9b01      	ldr	r3, [sp, #4]
  42a8b8:	f423 7384 	bic.w	r3, r3, #264	@ 0x108
  42a8bc:	f023 0301 	bic.w	r3, r3, #1
  42a8c0:	9301      	str	r3, [sp, #4]
  42a8c2:	9b01      	ldr	r3, [sp, #4]
  42a8c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  42a8c8:	9301      	str	r3, [sp, #4]
  42a8ca:	9b01      	ldr	r3, [sp, #4]
  42a8cc:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
  42a8d0:	e78c      	b.n	42a7ec <am_hal_mcuctrl_control+0x38>
  42a8d2:	4b23      	ldr	r3, [pc, #140]	@ (42a960 <am_hal_mcuctrl_control+0x1ac>)
  42a8d4:	4a23      	ldr	r2, [pc, #140]	@ (42a964 <am_hal_mcuctrl_control+0x1b0>)
  42a8d6:	681b      	ldr	r3, [r3, #0]
  42a8d8:	6811      	ldr	r1, [r2, #0]
  42a8da:	019b      	lsls	r3, r3, #6
  42a8dc:	4a22      	ldr	r2, [pc, #136]	@ (42a968 <am_hal_mcuctrl_control+0x1b4>)
  42a8de:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
  42a8e2:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
  42a8e6:	430b      	orrs	r3, r1
  42a8e8:	431a      	orrs	r2, r3
  42a8ea:	9201      	str	r2, [sp, #4]
  42a8ec:	9a01      	ldr	r2, [sp, #4]
  42a8ee:	4b1b      	ldr	r3, [pc, #108]	@ (42a95c <am_hal_mcuctrl_control+0x1a8>)
  42a8f0:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
  42a8f4:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
  42a8f8:	9201      	str	r2, [sp, #4]
  42a8fa:	9a01      	ldr	r2, [sp, #4]
  42a8fc:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
  42a900:	9201      	str	r2, [sp, #4]
  42a902:	9a01      	ldr	r2, [sp, #4]
  42a904:	f042 0222 	orr.w	r2, r2, #34	@ 0x22
  42a908:	9201      	str	r2, [sp, #4]
  42a90a:	9a01      	ldr	r2, [sp, #4]
  42a90c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
  42a910:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
  42a914:	f042 0201 	orr.w	r2, r2, #1
  42a918:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
  42a91c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
  42a920:	9301      	str	r3, [sp, #4]
  42a922:	b185      	cbz	r5, 42a946 <am_hal_mcuctrl_control+0x192>
  42a924:	782b      	ldrb	r3, [r5, #0]
  42a926:	b173      	cbz	r3, 42a946 <am_hal_mcuctrl_control+0x192>
  42a928:	9b01      	ldr	r3, [sp, #4]
  42a92a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
  42a92e:	f023 0301 	bic.w	r3, r3, #1
  42a932:	9301      	str	r3, [sp, #4]
  42a934:	9b01      	ldr	r3, [sp, #4]
  42a936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  42a93a:	9301      	str	r3, [sp, #4]
  42a93c:	9a01      	ldr	r2, [sp, #4]
  42a93e:	4b07      	ldr	r3, [pc, #28]	@ (42a95c <am_hal_mcuctrl_control+0x1a8>)
  42a940:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
  42a944:	e752      	b.n	42a7ec <am_hal_mcuctrl_control+0x38>
  42a946:	9b01      	ldr	r3, [sp, #4]
  42a948:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
  42a94c:	9301      	str	r3, [sp, #4]
  42a94e:	9b01      	ldr	r3, [sp, #4]
  42a950:	f043 0308 	orr.w	r3, r3, #8
  42a954:	9301      	str	r3, [sp, #4]
  42a956:	e7f1      	b.n	42a93c <am_hal_mcuctrl_control+0x188>
  42a958:	2006      	movs	r0, #6
  42a95a:	e748      	b.n	42a7ee <am_hal_mcuctrl_control+0x3a>
  42a95c:	40020000 	.word	0x40020000
  42a960:	2000aa3c 	.word	0x2000aa3c
  42a964:	2000aa40 	.word	0x2000aa40
  42a968:	0fff8c00 	.word	0x0fff8c00

0042a96c <am_hal_queue_item_add>:
  42a96c:	b570      	push	{r4, r5, r6, lr}
  42a96e:	6903      	ldr	r3, [r0, #16]
  42a970:	b082      	sub	sp, #8
  42a972:	fb03 f602 	mul.w	r6, r3, r2
  42a976:	4604      	mov	r4, r0
  42a978:	460d      	mov	r5, r1
  42a97a:	f7fd ff63 	bl	428844 <am_hal_interrupt_master_disable>
  42a97e:	9001      	str	r0, [sp, #4]
  42a980:	68e2      	ldr	r2, [r4, #12]
  42a982:	68a3      	ldr	r3, [r4, #8]
  42a984:	1ad3      	subs	r3, r2, r3
  42a986:	42b3      	cmp	r3, r6
  42a988:	d31d      	bcc.n	42a9c6 <am_hal_queue_item_add+0x5a>
  42a98a:	b196      	cbz	r6, 42a9b2 <am_hal_queue_item_add+0x46>
  42a98c:	f046 e001 	dls	lr, r6
  42a990:	b305      	cbz	r5, 42a9d4 <am_hal_queue_item_add+0x68>
  42a992:	1e69      	subs	r1, r5, #1
  42a994:	6823      	ldr	r3, [r4, #0]
  42a996:	f811 0f01 	ldrb.w	r0, [r1, #1]!
  42a99a:	6962      	ldr	r2, [r4, #20]
  42a99c:	54d0      	strb	r0, [r2, r3]
  42a99e:	6823      	ldr	r3, [r4, #0]
  42a9a0:	68e0      	ldr	r0, [r4, #12]
  42a9a2:	3301      	adds	r3, #1
  42a9a4:	fbb3 f2f0 	udiv	r2, r3, r0
  42a9a8:	fb00 3312 	mls	r3, r0, r2, r3
  42a9ac:	6023      	str	r3, [r4, #0]
  42a9ae:	f00f c80f 	le	lr, 42a994 <am_hal_queue_item_add+0x28>
  42a9b2:	2501      	movs	r5, #1
  42a9b4:	68a3      	ldr	r3, [r4, #8]
  42a9b6:	4433      	add	r3, r6
  42a9b8:	60a3      	str	r3, [r4, #8]
  42a9ba:	9801      	ldr	r0, [sp, #4]
  42a9bc:	f7fd ff46 	bl	42884c <am_hal_interrupt_master_set>
  42a9c0:	4628      	mov	r0, r5
  42a9c2:	b002      	add	sp, #8
  42a9c4:	bd70      	pop	{r4, r5, r6, pc}
  42a9c6:	2500      	movs	r5, #0
  42a9c8:	9801      	ldr	r0, [sp, #4]
  42a9ca:	f7fd ff3f 	bl	42884c <am_hal_interrupt_master_set>
  42a9ce:	4628      	mov	r0, r5
  42a9d0:	b002      	add	sp, #8
  42a9d2:	bd70      	pop	{r4, r5, r6, pc}
  42a9d4:	6823      	ldr	r3, [r4, #0]
  42a9d6:	3301      	adds	r3, #1
  42a9d8:	fbb3 f1f2 	udiv	r1, r3, r2
  42a9dc:	fb02 3311 	mls	r3, r2, r1, r3
  42a9e0:	6023      	str	r3, [r4, #0]
  42a9e2:	f00f c809 	le	lr, 42a9d4 <am_hal_queue_item_add+0x68>
  42a9e6:	e7e4      	b.n	42a9b2 <am_hal_queue_item_add+0x46>

0042a9e8 <am_hal_queue_item_get>:
  42a9e8:	b570      	push	{r4, r5, r6, lr}
  42a9ea:	6903      	ldr	r3, [r0, #16]
  42a9ec:	b082      	sub	sp, #8
  42a9ee:	fb03 f602 	mul.w	r6, r3, r2
  42a9f2:	4604      	mov	r4, r0
  42a9f4:	460d      	mov	r5, r1
  42a9f6:	f7fd ff25 	bl	428844 <am_hal_interrupt_master_disable>
  42a9fa:	9001      	str	r0, [sp, #4]
  42a9fc:	68a3      	ldr	r3, [r4, #8]
  42a9fe:	42b3      	cmp	r3, r6
  42aa00:	d31d      	bcc.n	42aa3e <am_hal_queue_item_get+0x56>
  42aa02:	b196      	cbz	r6, 42aa2a <am_hal_queue_item_get+0x42>
  42aa04:	f046 e001 	dls	lr, r6
  42aa08:	b305      	cbz	r5, 42aa4c <am_hal_queue_item_get+0x64>
  42aa0a:	1e69      	subs	r1, r5, #1
  42aa0c:	6863      	ldr	r3, [r4, #4]
  42aa0e:	6962      	ldr	r2, [r4, #20]
  42aa10:	5cd3      	ldrb	r3, [r2, r3]
  42aa12:	f801 3f01 	strb.w	r3, [r1, #1]!
  42aa16:	6863      	ldr	r3, [r4, #4]
  42aa18:	68e0      	ldr	r0, [r4, #12]
  42aa1a:	3301      	adds	r3, #1
  42aa1c:	fbb3 f2f0 	udiv	r2, r3, r0
  42aa20:	fb00 3312 	mls	r3, r0, r2, r3
  42aa24:	6063      	str	r3, [r4, #4]
  42aa26:	f00f c80f 	le	lr, 42aa0c <am_hal_queue_item_get+0x24>
  42aa2a:	2501      	movs	r5, #1
  42aa2c:	68a3      	ldr	r3, [r4, #8]
  42aa2e:	1b9b      	subs	r3, r3, r6
  42aa30:	60a3      	str	r3, [r4, #8]
  42aa32:	9801      	ldr	r0, [sp, #4]
  42aa34:	f7fd ff0a 	bl	42884c <am_hal_interrupt_master_set>
  42aa38:	4628      	mov	r0, r5
  42aa3a:	b002      	add	sp, #8
  42aa3c:	bd70      	pop	{r4, r5, r6, pc}
  42aa3e:	2500      	movs	r5, #0
  42aa40:	9801      	ldr	r0, [sp, #4]
  42aa42:	f7fd ff03 	bl	42884c <am_hal_interrupt_master_set>
  42aa46:	4628      	mov	r0, r5
  42aa48:	b002      	add	sp, #8
  42aa4a:	bd70      	pop	{r4, r5, r6, pc}
  42aa4c:	68e2      	ldr	r2, [r4, #12]
  42aa4e:	6863      	ldr	r3, [r4, #4]
  42aa50:	3301      	adds	r3, #1
  42aa52:	fbb3 f1f2 	udiv	r1, r3, r2
  42aa56:	fb02 3311 	mls	r3, r2, r1, r3
  42aa5a:	6063      	str	r3, [r4, #4]
  42aa5c:	f00f c809 	le	lr, 42aa4e <am_hal_queue_item_get+0x66>
  42aa60:	e7e3      	b.n	42aa2a <am_hal_queue_item_get+0x42>
  42aa62:	bf00      	nop

0042aa64 <am_bsp_low_power_init>:
  42aa64:	b508      	push	{r3, lr}
  42aa66:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
  42aa6a:	f7fc ff8b 	bl	427984 <am_util_delay_ms>
  42aa6e:	f7fc fc45 	bl	4272fc <am_hal_pwrctrl_low_power_init>
  42aa72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  42aa76:	2100      	movs	r1, #0
  42aa78:	4608      	mov	r0, r1
  42aa7a:	f7fc be0b 	b.w	427694 <am_hal_pwrctrl_control>
  42aa7e:	bf00      	nop

0042aa80 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
  42aa80:	6803      	ldr	r3, [r0, #0]
  42aa82:	b570      	push	{r4, r5, r6, lr}
  42aa84:	2400      	movs	r4, #0
  42aa86:	b084      	sub	sp, #16
  42aa88:	699e      	ldr	r6, [r3, #24]
  42aa8a:	2310      	movs	r3, #16
  42aa8c:	4615      	mov	r5, r2
  42aa8e:	9403      	str	r4, [sp, #12]
  42aa90:	9302      	str	r3, [sp, #8]
  42aa92:	466b      	mov	r3, sp
  42aa94:	6812      	ldr	r2, [r2, #0]
  42aa96:	e9cd 4400 	strd	r4, r4, [sp]
  42aa9a:	47b0      	blx	r6
  42aa9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
  42aaa0:	f003 0306 	and.w	r3, r3, #6
  42aaa4:	2b06      	cmp	r3, #6
  42aaa6:	d104      	bne.n	42aab2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x32>
  42aaa8:	9b00      	ldr	r3, [sp, #0]
  42aaaa:	2001      	movs	r0, #1
  42aaac:	602b      	str	r3, [r5, #0]
  42aaae:	b004      	add	sp, #16
  42aab0:	bd70      	pop	{r4, r5, r6, pc}
  42aab2:	4620      	mov	r0, r4
  42aab4:	b004      	add	sp, #16
  42aab6:	bd70      	pop	{r4, r5, r6, pc}

0042aab8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
  42aab8:	9800      	ldr	r0, [sp, #0]
  42aaba:	4290      	cmp	r0, r2
  42aabc:	bf0c      	ite	eq
  42aabe:	2006      	moveq	r0, #6
  42aac0:	2001      	movne	r0, #1
  42aac2:	4770      	bx	lr

0042aac4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
  42aac4:	4b03      	ldr	r3, [pc, #12]	@ (42aad4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
  42aac6:	b510      	push	{r4, lr}
  42aac8:	4604      	mov	r4, r0
  42aaca:	6003      	str	r3, [r0, #0]
  42aacc:	f000 f97c 	bl	42adc8 <_ZNSt9type_infoD1Ev>
  42aad0:	4620      	mov	r0, r4
  42aad2:	bd10      	pop	{r4, pc}
  42aad4:	0043ca44 	.word	0x0043ca44

0042aad8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
  42aad8:	4b05      	ldr	r3, [pc, #20]	@ (42aaf0 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
  42aada:	b510      	push	{r4, lr}
  42aadc:	4604      	mov	r4, r0
  42aade:	6003      	str	r3, [r0, #0]
  42aae0:	f000 f972 	bl	42adc8 <_ZNSt9type_infoD1Ev>
  42aae4:	2108      	movs	r1, #8
  42aae6:	4620      	mov	r0, r4
  42aae8:	f7fd fd10 	bl	42850c <_ZdlPvj>
  42aaec:	4620      	mov	r0, r4
  42aaee:	bd10      	pop	{r4, pc}
  42aaf0:	0043ca44 	.word	0x0043ca44

0042aaf4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
  42aaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42aaf8:	9f06      	ldr	r7, [sp, #24]
  42aafa:	461d      	mov	r5, r3
  42aafc:	4604      	mov	r4, r0
  42aafe:	4690      	mov	r8, r2
  42ab00:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
  42ab04:	429f      	cmp	r7, r3
  42ab06:	d00c      	beq.n	42ab22 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
  42ab08:	4629      	mov	r1, r5
  42ab0a:	4620      	mov	r0, r4
  42ab0c:	f000 f978 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42ab10:	b120      	cbz	r0, 42ab1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
  42ab12:	2301      	movs	r3, #1
  42ab14:	6037      	str	r7, [r6, #0]
  42ab16:	f886 8004 	strb.w	r8, [r6, #4]
  42ab1a:	71b3      	strb	r3, [r6, #6]
  42ab1c:	2000      	movs	r0, #0
  42ab1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42ab22:	9907      	ldr	r1, [sp, #28]
  42ab24:	f000 f96c 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42ab28:	2800      	cmp	r0, #0
  42ab2a:	d0ed      	beq.n	42ab08 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
  42ab2c:	2000      	movs	r0, #0
  42ab2e:	f886 8005 	strb.w	r8, [r6, #5]
  42ab32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42ab36:	bf00      	nop

0042ab38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
  42ab38:	b538      	push	{r3, r4, r5, lr}
  42ab3a:	4615      	mov	r5, r2
  42ab3c:	461c      	mov	r4, r3
  42ab3e:	f000 f95f 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42ab42:	b900      	cbnz	r0, 42ab46 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0xe>
  42ab44:	bd38      	pop	{r3, r4, r5, pc}
  42ab46:	2208      	movs	r2, #8
  42ab48:	2306      	movs	r3, #6
  42ab4a:	6025      	str	r5, [r4, #0]
  42ab4c:	60e2      	str	r2, [r4, #12]
  42ab4e:	7123      	strb	r3, [r4, #4]
  42ab50:	bd38      	pop	{r3, r4, r5, pc}
  42ab52:	bf00      	nop

0042ab54 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
  42ab54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42ab58:	4606      	mov	r6, r0
  42ab5a:	4617      	mov	r7, r2
  42ab5c:	461d      	mov	r5, r3
  42ab5e:	460c      	mov	r4, r1
  42ab60:	f000 f94e 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42ab64:	b948      	cbnz	r0, 42ab7a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
  42ab66:	2d03      	cmp	r5, #3
  42ab68:	d807      	bhi.n	42ab7a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
  42ab6a:	6823      	ldr	r3, [r4, #0]
  42ab6c:	463a      	mov	r2, r7
  42ab6e:	4631      	mov	r1, r6
  42ab70:	4620      	mov	r0, r4
  42ab72:	695b      	ldr	r3, [r3, #20]
  42ab74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42ab78:	4718      	bx	r3
  42ab7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42ab7e:	bf00      	nop

0042ab80 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
  42ab80:	2001      	movs	r0, #1
  42ab82:	4770      	bx	lr

0042ab84 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
  42ab84:	4b03      	ldr	r3, [pc, #12]	@ (42ab94 <_ZN10__cxxabiv120__function_type_infoD1Ev+0x10>)
  42ab86:	b510      	push	{r4, lr}
  42ab88:	4604      	mov	r4, r0
  42ab8a:	6003      	str	r3, [r0, #0]
  42ab8c:	f000 f91c 	bl	42adc8 <_ZNSt9type_infoD1Ev>
  42ab90:	4620      	mov	r0, r4
  42ab92:	bd10      	pop	{r4, pc}
  42ab94:	0043caa4 	.word	0x0043caa4

0042ab98 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
  42ab98:	4b05      	ldr	r3, [pc, #20]	@ (42abb0 <_ZN10__cxxabiv120__function_type_infoD0Ev+0x18>)
  42ab9a:	b510      	push	{r4, lr}
  42ab9c:	4604      	mov	r4, r0
  42ab9e:	6003      	str	r3, [r0, #0]
  42aba0:	f000 f912 	bl	42adc8 <_ZNSt9type_infoD1Ev>
  42aba4:	2108      	movs	r1, #8
  42aba6:	4620      	mov	r0, r4
  42aba8:	f7fd fcb0 	bl	42850c <_ZdlPvj>
  42abac:	4620      	mov	r0, r4
  42abae:	bd10      	pop	{r4, pc}
  42abb0:	0043caa4 	.word	0x0043caa4

0042abb4 <__cxa_guard_acquire>:
  42abb4:	6802      	ldr	r2, [r0, #0]
  42abb6:	07d3      	lsls	r3, r2, #31
  42abb8:	d406      	bmi.n	42abc8 <__cxa_guard_acquire+0x14>
  42abba:	7842      	ldrb	r2, [r0, #1]
  42abbc:	4603      	mov	r3, r0
  42abbe:	b92a      	cbnz	r2, 42abcc <__cxa_guard_acquire+0x18>
  42abc0:	2201      	movs	r2, #1
  42abc2:	4610      	mov	r0, r2
  42abc4:	705a      	strb	r2, [r3, #1]
  42abc6:	4770      	bx	lr
  42abc8:	2000      	movs	r0, #0
  42abca:	4770      	bx	lr
  42abcc:	b510      	push	{r4, lr}
  42abce:	2004      	movs	r0, #4
  42abd0:	f000 f9f4 	bl	42afbc <__cxa_allocate_exception>
  42abd4:	4604      	mov	r4, r0
  42abd6:	f000 f825 	bl	42ac24 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
  42abda:	4a02      	ldr	r2, [pc, #8]	@ (42abe4 <__cxa_guard_acquire+0x30>)
  42abdc:	4902      	ldr	r1, [pc, #8]	@ (42abe8 <__cxa_guard_acquire+0x34>)
  42abde:	4620      	mov	r0, r4
  42abe0:	f000 febc 	bl	42b95c <__cxa_throw>
  42abe4:	0042abf5 	.word	0x0042abf5
  42abe8:	0043cae0 	.word	0x0043cae0

0042abec <__cxa_guard_release>:
  42abec:	2301      	movs	r3, #1
  42abee:	6003      	str	r3, [r0, #0]
  42abf0:	4770      	bx	lr
  42abf2:	bf00      	nop

0042abf4 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
  42abf4:	4b03      	ldr	r3, [pc, #12]	@ (42ac04 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
  42abf6:	b510      	push	{r4, lr}
  42abf8:	4604      	mov	r4, r0
  42abfa:	6003      	str	r3, [r0, #0]
  42abfc:	f000 fb4e 	bl	42b29c <_ZNSt9exceptionD1Ev>
  42ac00:	4620      	mov	r0, r4
  42ac02:	bd10      	pop	{r4, pc}
  42ac04:	0043caf4 	.word	0x0043caf4

0042ac08 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
  42ac08:	4b05      	ldr	r3, [pc, #20]	@ (42ac20 <_ZN9__gnu_cxx20recursive_init_errorD0Ev+0x18>)
  42ac0a:	b510      	push	{r4, lr}
  42ac0c:	4604      	mov	r4, r0
  42ac0e:	6003      	str	r3, [r0, #0]
  42ac10:	f000 fb44 	bl	42b29c <_ZNSt9exceptionD1Ev>
  42ac14:	2104      	movs	r1, #4
  42ac16:	4620      	mov	r0, r4
  42ac18:	f7fd fc78 	bl	42850c <_ZdlPvj>
  42ac1c:	4620      	mov	r0, r4
  42ac1e:	bd10      	pop	{r4, pc}
  42ac20:	0043caf4 	.word	0x0043caf4

0042ac24 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
  42ac24:	4b01      	ldr	r3, [pc, #4]	@ (42ac2c <_ZN9__gnu_cxx20recursive_init_errorC1Ev+0x8>)
  42ac26:	6003      	str	r3, [r0, #0]
  42ac28:	4770      	bx	lr
  42ac2a:	bf00      	nop
  42ac2c:	0043caf4 	.word	0x0043caf4

0042ac30 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
  42ac30:	2001      	movs	r0, #1
  42ac32:	4770      	bx	lr

0042ac34 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
  42ac34:	4b03      	ldr	r3, [pc, #12]	@ (42ac44 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
  42ac36:	b510      	push	{r4, lr}
  42ac38:	4604      	mov	r4, r0
  42ac3a:	6003      	str	r3, [r0, #0]
  42ac3c:	f000 ff04 	bl	42ba48 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
  42ac40:	4620      	mov	r0, r4
  42ac42:	bd10      	pop	{r4, pc}
  42ac44:	0043cb38 	.word	0x0043cb38

0042ac48 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
  42ac48:	4b05      	ldr	r3, [pc, #20]	@ (42ac60 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
  42ac4a:	b510      	push	{r4, lr}
  42ac4c:	4604      	mov	r4, r0
  42ac4e:	6003      	str	r3, [r0, #0]
  42ac50:	f000 fefa 	bl	42ba48 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
  42ac54:	2110      	movs	r1, #16
  42ac56:	4620      	mov	r0, r4
  42ac58:	f7fd fc58 	bl	42850c <_ZdlPvj>
  42ac5c:	4620      	mov	r0, r4
  42ac5e:	bd10      	pop	{r4, pc}
  42ac60:	0043cb38 	.word	0x0043cb38

0042ac64 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
  42ac64:	2b01      	cmp	r3, #1
  42ac66:	b570      	push	{r4, r5, r6, lr}
  42ac68:	4605      	mov	r5, r0
  42ac6a:	b082      	sub	sp, #8
  42ac6c:	461c      	mov	r4, r3
  42ac6e:	460e      	mov	r6, r1
  42ac70:	68c0      	ldr	r0, [r0, #12]
  42ac72:	d909      	bls.n	42ac88 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x24>
  42ac74:	68e8      	ldr	r0, [r5, #12]
  42ac76:	1ca3      	adds	r3, r4, #2
  42ac78:	68f1      	ldr	r1, [r6, #12]
  42ac7a:	6804      	ldr	r4, [r0, #0]
  42ac7c:	6924      	ldr	r4, [r4, #16]
  42ac7e:	46a4      	mov	ip, r4
  42ac80:	b002      	add	sp, #8
  42ac82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42ac86:	4760      	bx	ip
  42ac88:	4907      	ldr	r1, [pc, #28]	@ (42aca8 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>)
  42ac8a:	9201      	str	r2, [sp, #4]
  42ac8c:	f000 f8b8 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42ac90:	9a01      	ldr	r2, [sp, #4]
  42ac92:	2800      	cmp	r0, #0
  42ac94:	d0ee      	beq.n	42ac74 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x10>
  42ac96:	68f0      	ldr	r0, [r6, #12]
  42ac98:	6803      	ldr	r3, [r0, #0]
  42ac9a:	68db      	ldr	r3, [r3, #12]
  42ac9c:	4798      	blx	r3
  42ac9e:	f080 0001 	eor.w	r0, r0, #1
  42aca2:	b2c0      	uxtb	r0, r0
  42aca4:	b002      	add	sp, #8
  42aca6:	bd70      	pop	{r4, r5, r6, pc}
  42aca8:	0043cd08 	.word	0x0043cd08

0042acac <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
  42acac:	4b03      	ldr	r3, [pc, #12]	@ (42acbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
  42acae:	b510      	push	{r4, lr}
  42acb0:	4604      	mov	r4, r0
  42acb2:	6003      	str	r3, [r0, #0]
  42acb4:	f7ff ff06 	bl	42aac4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
  42acb8:	4620      	mov	r0, r4
  42acba:	bd10      	pop	{r4, pc}
  42acbc:	0043cb90 	.word	0x0043cb90

0042acc0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
  42acc0:	4b05      	ldr	r3, [pc, #20]	@ (42acd8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
  42acc2:	b510      	push	{r4, lr}
  42acc4:	4604      	mov	r4, r0
  42acc6:	6003      	str	r3, [r0, #0]
  42acc8:	f7ff fefc 	bl	42aac4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
  42accc:	210c      	movs	r1, #12
  42acce:	4620      	mov	r0, r4
  42acd0:	f7fd fc1c 	bl	42850c <_ZdlPvj>
  42acd4:	4620      	mov	r0, r4
  42acd6:	bd10      	pop	{r4, pc}
  42acd8:	0043cb90 	.word	0x0043cb90

0042acdc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
  42acdc:	b570      	push	{r4, r5, r6, lr}
  42acde:	b082      	sub	sp, #8
  42ace0:	4604      	mov	r4, r0
  42ace2:	460d      	mov	r5, r1
  42ace4:	9e06      	ldr	r6, [sp, #24]
  42ace6:	4296      	cmp	r6, r2
  42ace8:	d009      	beq.n	42acfe <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
  42acea:	68a0      	ldr	r0, [r4, #8]
  42acec:	4629      	mov	r1, r5
  42acee:	6804      	ldr	r4, [r0, #0]
  42acf0:	9606      	str	r6, [sp, #24]
  42acf2:	6a24      	ldr	r4, [r4, #32]
  42acf4:	46a4      	mov	ip, r4
  42acf6:	b002      	add	sp, #8
  42acf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42acfc:	4760      	bx	ip
  42acfe:	4619      	mov	r1, r3
  42ad00:	9201      	str	r2, [sp, #4]
  42ad02:	9300      	str	r3, [sp, #0]
  42ad04:	f000 f87c 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42ad08:	e9dd 3200 	ldrd	r3, r2, [sp]
  42ad0c:	2800      	cmp	r0, #0
  42ad0e:	d0ec      	beq.n	42acea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
  42ad10:	2006      	movs	r0, #6
  42ad12:	b002      	add	sp, #8
  42ad14:	bd70      	pop	{r4, r5, r6, pc}
  42ad16:	bf00      	nop

0042ad18 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
  42ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42ad1c:	b081      	sub	sp, #4
  42ad1e:	460d      	mov	r5, r1
  42ad20:	4619      	mov	r1, r3
  42ad22:	461c      	mov	r4, r3
  42ad24:	4607      	mov	r7, r0
  42ad26:	4616      	mov	r6, r2
  42ad28:	e9dd 8b0a 	ldrd	r8, fp, [sp, #40]	@ 0x28
  42ad2c:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	@ 0x30
  42ad30:	f000 f866 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42ad34:	b980      	cbnz	r0, 42ad58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
  42ad36:	45d0      	cmp	r8, sl
  42ad38:	d027      	beq.n	42ad8a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x72>
  42ad3a:	68b8      	ldr	r0, [r7, #8]
  42ad3c:	4623      	mov	r3, r4
  42ad3e:	4632      	mov	r2, r6
  42ad40:	4629      	mov	r1, r5
  42ad42:	6804      	ldr	r4, [r0, #0]
  42ad44:	e9cd a90c 	strd	sl, r9, [sp, #48]	@ 0x30
  42ad48:	e9cd 8b0a 	strd	r8, fp, [sp, #40]	@ 0x28
  42ad4c:	69e4      	ldr	r4, [r4, #28]
  42ad4e:	46a4      	mov	ip, r4
  42ad50:	b001      	add	sp, #4
  42ad52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42ad56:	4760      	bx	ip
  42ad58:	2d00      	cmp	r5, #0
  42ad5a:	f8c9 8000 	str.w	r8, [r9]
  42ad5e:	f889 6004 	strb.w	r6, [r9, #4]
  42ad62:	db0c      	blt.n	42ad7e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
  42ad64:	44a8      	add	r8, r5
  42ad66:	45c2      	cmp	sl, r8
  42ad68:	bf14      	ite	ne
  42ad6a:	f04f 0801 	movne.w	r8, #1
  42ad6e:	f04f 0806 	moveq.w	r8, #6
  42ad72:	f889 8006 	strb.w	r8, [r9, #6]
  42ad76:	2000      	movs	r0, #0
  42ad78:	b001      	add	sp, #4
  42ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42ad7e:	3502      	adds	r5, #2
  42ad80:	d1f9      	bne.n	42ad76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
  42ad82:	2301      	movs	r3, #1
  42ad84:	f889 3006 	strb.w	r3, [r9, #6]
  42ad88:	e7f5      	b.n	42ad76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
  42ad8a:	4659      	mov	r1, fp
  42ad8c:	4638      	mov	r0, r7
  42ad8e:	f000 f837 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42ad92:	2800      	cmp	r0, #0
  42ad94:	d0d1      	beq.n	42ad3a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22>
  42ad96:	f889 6005 	strb.w	r6, [r9, #5]
  42ad9a:	e7ec      	b.n	42ad76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>

0042ad9c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
  42ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42ada0:	4607      	mov	r7, r0
  42ada2:	460c      	mov	r4, r1
  42ada4:	4615      	mov	r5, r2
  42ada6:	461e      	mov	r6, r3
  42ada8:	f7ff fec6 	bl	42ab38 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  42adac:	b948      	cbnz	r0, 42adc2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
  42adae:	68b8      	ldr	r0, [r7, #8]
  42adb0:	4621      	mov	r1, r4
  42adb2:	4633      	mov	r3, r6
  42adb4:	462a      	mov	r2, r5
  42adb6:	6804      	ldr	r4, [r0, #0]
  42adb8:	69a4      	ldr	r4, [r4, #24]
  42adba:	46a4      	mov	ip, r4
  42adbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42adc0:	4760      	bx	ip
  42adc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42adc6:	bf00      	nop

0042adc8 <_ZNSt9type_infoD1Ev>:
  42adc8:	4770      	bx	lr
  42adca:	bf00      	nop

0042adcc <_ZNKSt9type_info14__is_pointer_pEv>:
  42adcc:	2000      	movs	r0, #0
  42adce:	4770      	bx	lr

0042add0 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
  42add0:	2000      	movs	r0, #0
  42add2:	4770      	bx	lr

0042add4 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
  42add4:	4288      	cmp	r0, r1
  42add6:	d011      	beq.n	42adfc <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x28>
  42add8:	6840      	ldr	r0, [r0, #4]
  42adda:	b508      	push	{r3, lr}
  42addc:	7803      	ldrb	r3, [r0, #0]
  42adde:	2b2a      	cmp	r3, #42	@ 0x2a
  42ade0:	d00a      	beq.n	42adf8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x24>
  42ade2:	6849      	ldr	r1, [r1, #4]
  42ade4:	780b      	ldrb	r3, [r1, #0]
  42ade6:	2b2a      	cmp	r3, #42	@ 0x2a
  42ade8:	bf08      	it	eq
  42adea:	3101      	addeq	r1, #1
  42adec:	f7e5 fb08 	bl	410400 <strcmp>
  42adf0:	fab0 f080 	clz	r0, r0
  42adf4:	0940      	lsrs	r0, r0, #5
  42adf6:	bd08      	pop	{r3, pc}
  42adf8:	2000      	movs	r0, #0
  42adfa:	bd08      	pop	{r3, pc}
  42adfc:	2001      	movs	r0, #1
  42adfe:	4770      	bx	lr

0042ae00 <_ZNKSt9type_info7__equalERKS_>:
  42ae00:	4281      	cmp	r1, r0
  42ae02:	d011      	beq.n	42ae28 <_ZNKSt9type_info7__equalERKS_+0x28>
  42ae04:	6840      	ldr	r0, [r0, #4]
  42ae06:	b508      	push	{r3, lr}
  42ae08:	7803      	ldrb	r3, [r0, #0]
  42ae0a:	2b2a      	cmp	r3, #42	@ 0x2a
  42ae0c:	d00a      	beq.n	42ae24 <_ZNKSt9type_info7__equalERKS_+0x24>
  42ae0e:	6849      	ldr	r1, [r1, #4]
  42ae10:	780b      	ldrb	r3, [r1, #0]
  42ae12:	2b2a      	cmp	r3, #42	@ 0x2a
  42ae14:	bf08      	it	eq
  42ae16:	3101      	addeq	r1, #1
  42ae18:	f7e5 faf2 	bl	410400 <strcmp>
  42ae1c:	fab0 f080 	clz	r0, r0
  42ae20:	0940      	lsrs	r0, r0, #5
  42ae22:	bd08      	pop	{r3, pc}
  42ae24:	2000      	movs	r0, #0
  42ae26:	bd08      	pop	{r3, pc}
  42ae28:	2001      	movs	r0, #1
  42ae2a:	4770      	bx	lr

0042ae2c <_ZSt19__throw_logic_errorPKc>:
  42ae2c:	b510      	push	{r4, lr}
  42ae2e:	4604      	mov	r4, r0
  42ae30:	2008      	movs	r0, #8
  42ae32:	f000 f8c3 	bl	42afbc <__cxa_allocate_exception>
  42ae36:	4621      	mov	r1, r4
  42ae38:	4604      	mov	r4, r0
  42ae3a:	f000 ffab 	bl	42bd94 <_ZNSt11logic_errorC1EPKc>
  42ae3e:	4a05      	ldr	r2, [pc, #20]	@ (42ae54 <_ZSt19__throw_logic_errorPKc+0x28>)
  42ae40:	4620      	mov	r0, r4
  42ae42:	4905      	ldr	r1, [pc, #20]	@ (42ae58 <_ZSt19__throw_logic_errorPKc+0x2c>)
  42ae44:	f000 fd8a 	bl	42b95c <__cxa_throw>
  42ae48:	4620      	mov	r0, r4
  42ae4a:	f000 f8cf 	bl	42afec <__cxa_free_exception>
  42ae4e:	f000 f95d 	bl	42b10c <__cxa_end_cleanup>
  42ae52:	bf00      	nop
  42ae54:	0042bc85 	.word	0x0042bc85
  42ae58:	0043cdbc 	.word	0x0043cdbc

0042ae5c <_ZSt20__throw_length_errorPKc>:
  42ae5c:	b510      	push	{r4, lr}
  42ae5e:	4604      	mov	r4, r0
  42ae60:	2008      	movs	r0, #8
  42ae62:	f000 f8ab 	bl	42afbc <__cxa_allocate_exception>
  42ae66:	4621      	mov	r1, r4
  42ae68:	4604      	mov	r4, r0
  42ae6a:	f000 ffd3 	bl	42be14 <_ZNSt12length_errorC1EPKc>
  42ae6e:	4a05      	ldr	r2, [pc, #20]	@ (42ae84 <_ZSt20__throw_length_errorPKc+0x28>)
  42ae70:	4620      	mov	r0, r4
  42ae72:	4905      	ldr	r1, [pc, #20]	@ (42ae88 <_ZSt20__throw_length_errorPKc+0x2c>)
  42ae74:	f000 fd72 	bl	42b95c <__cxa_throw>
  42ae78:	4620      	mov	r0, r4
  42ae7a:	f000 f8b7 	bl	42afec <__cxa_free_exception>
  42ae7e:	f000 f945 	bl	42b10c <__cxa_end_cleanup>
  42ae82:	bf00      	nop
  42ae84:	0042bcc5 	.word	0x0042bcc5
  42ae88:	0043cddc 	.word	0x0043cddc

0042ae8c <_ZNKSt17bad_function_call4whatEv>:
  42ae8c:	4800      	ldr	r0, [pc, #0]	@ (42ae90 <_ZNKSt17bad_function_call4whatEv+0x4>)
  42ae8e:	4770      	bx	lr
  42ae90:	00434ff8 	.word	0x00434ff8

0042ae94 <_ZNSt17bad_function_callD1Ev>:
  42ae94:	4b03      	ldr	r3, [pc, #12]	@ (42aea4 <_ZNSt17bad_function_callD1Ev+0x10>)
  42ae96:	b510      	push	{r4, lr}
  42ae98:	4604      	mov	r4, r0
  42ae9a:	6003      	str	r3, [r0, #0]
  42ae9c:	f000 f9fe 	bl	42b29c <_ZNSt9exceptionD1Ev>
  42aea0:	4620      	mov	r0, r4
  42aea2:	bd10      	pop	{r4, pc}
  42aea4:	0043cbf8 	.word	0x0043cbf8

0042aea8 <_ZNSt17bad_function_callD0Ev>:
  42aea8:	4b05      	ldr	r3, [pc, #20]	@ (42aec0 <_ZNSt17bad_function_callD0Ev+0x18>)
  42aeaa:	b510      	push	{r4, lr}
  42aeac:	4604      	mov	r4, r0
  42aeae:	6003      	str	r3, [r0, #0]
  42aeb0:	f000 f9f4 	bl	42b29c <_ZNSt9exceptionD1Ev>
  42aeb4:	4620      	mov	r0, r4
  42aeb6:	f7fd fb27 	bl	428508 <_ZdlPv>
  42aeba:	4620      	mov	r0, r4
  42aebc:	bd10      	pop	{r4, pc}
  42aebe:	bf00      	nop
  42aec0:	0043cbf8 	.word	0x0043cbf8

0042aec4 <_ZSt25__throw_bad_function_callv>:
  42aec4:	b508      	push	{r3, lr}
  42aec6:	2004      	movs	r0, #4
  42aec8:	f000 f878 	bl	42afbc <__cxa_allocate_exception>
  42aecc:	4b02      	ldr	r3, [pc, #8]	@ (42aed8 <_ZSt25__throw_bad_function_callv+0x14>)
  42aece:	4a03      	ldr	r2, [pc, #12]	@ (42aedc <_ZSt25__throw_bad_function_callv+0x18>)
  42aed0:	4903      	ldr	r1, [pc, #12]	@ (42aee0 <_ZSt25__throw_bad_function_callv+0x1c>)
  42aed2:	6003      	str	r3, [r0, #0]
  42aed4:	f000 fd42 	bl	42b95c <__cxa_throw>
  42aed8:	0043cbf8 	.word	0x0043cbf8
  42aedc:	0042ae95 	.word	0x0042ae95
  42aee0:	0043cbe4 	.word	0x0043cbe4

0042aee4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
  42aee4:	491e      	ldr	r1, [pc, #120]	@ (42af60 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>)
  42aee6:	684b      	ldr	r3, [r1, #4]
  42aee8:	b530      	push	{r4, r5, lr}
  42aeea:	f1a0 0508 	sub.w	r5, r0, #8
  42aeee:	f850 4c08 	ldr.w	r4, [r0, #-8]
  42aef2:	b32b      	cbz	r3, 42af40 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5c>
  42aef4:	eb05 0e04 	add.w	lr, r5, r4
  42aef8:	4573      	cmp	r3, lr
  42aefa:	d821      	bhi.n	42af40 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5c>
  42aefc:	685a      	ldr	r2, [r3, #4]
  42aefe:	d026      	beq.n	42af4e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6a>
  42af00:	f101 0c04 	add.w	ip, r1, #4
  42af04:	b932      	cbnz	r2, 42af14 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
  42af06:	e010      	b.n	42af2a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x46>
  42af08:	6851      	ldr	r1, [r2, #4]
  42af0a:	f103 0c04 	add.w	ip, r3, #4
  42af0e:	4613      	mov	r3, r2
  42af10:	b149      	cbz	r1, 42af26 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
  42af12:	460a      	mov	r2, r1
  42af14:	4596      	cmp	lr, r2
  42af16:	d8f7      	bhi.n	42af08 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x24>
  42af18:	d105      	bne.n	42af26 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
  42af1a:	f8de 2000 	ldr.w	r2, [lr]
  42af1e:	4414      	add	r4, r2
  42af20:	f8de 2004 	ldr.w	r2, [lr, #4]
  42af24:	605a      	str	r2, [r3, #4]
  42af26:	f8dc 3000 	ldr.w	r3, [ip]
  42af2a:	681a      	ldr	r2, [r3, #0]
  42af2c:	1899      	adds	r1, r3, r2
  42af2e:	428d      	cmp	r5, r1
  42af30:	d00a      	beq.n	42af48 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x64>
  42af32:	685b      	ldr	r3, [r3, #4]
  42af34:	e940 4302 	strd	r4, r3, [r0, #-8]
  42af38:	f8dc 3000 	ldr.w	r3, [ip]
  42af3c:	605d      	str	r5, [r3, #4]
  42af3e:	bd30      	pop	{r4, r5, pc}
  42af40:	f840 3c04 	str.w	r3, [r0, #-4]
  42af44:	604d      	str	r5, [r1, #4]
  42af46:	bd30      	pop	{r4, r5, pc}
  42af48:	4422      	add	r2, r4
  42af4a:	601a      	str	r2, [r3, #0]
  42af4c:	bd30      	pop	{r4, r5, pc}
  42af4e:	681b      	ldr	r3, [r3, #0]
  42af50:	f840 2c04 	str.w	r2, [r0, #-4]
  42af54:	4423      	add	r3, r4
  42af56:	f840 3c08 	str.w	r3, [r0, #-8]
  42af5a:	604d      	str	r5, [r1, #4]
  42af5c:	bd30      	pop	{r4, r5, pc}
  42af5e:	bf00      	nop
  42af60:	2004e910 	.word	0x2004e910

0042af64 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
  42af64:	f100 0308 	add.w	r3, r0, #8
  42af68:	4913      	ldr	r1, [pc, #76]	@ (42afb8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x54>)
  42af6a:	2b08      	cmp	r3, #8
  42af6c:	6848      	ldr	r0, [r1, #4]
  42af6e:	bf38      	it	cc
  42af70:	2308      	movcc	r3, #8
  42af72:	b1f8      	cbz	r0, 42afb4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x50>
  42af74:	3307      	adds	r3, #7
  42af76:	3104      	adds	r1, #4
  42af78:	f023 0307 	bic.w	r3, r3, #7
  42af7c:	e002      	b.n	42af84 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x20>
  42af7e:	1d01      	adds	r1, r0, #4
  42af80:	6840      	ldr	r0, [r0, #4]
  42af82:	b180      	cbz	r0, 42afa6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x42>
  42af84:	6802      	ldr	r2, [r0, #0]
  42af86:	4293      	cmp	r3, r2
  42af88:	d8f9      	bhi.n	42af7e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x1a>
  42af8a:	b470      	push	{r4, r5, r6}
  42af8c:	1ad4      	subs	r4, r2, r3
  42af8e:	6846      	ldr	r6, [r0, #4]
  42af90:	2c07      	cmp	r4, #7
  42af92:	d909      	bls.n	42afa8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>
  42af94:	18c5      	adds	r5, r0, r3
  42af96:	606e      	str	r6, [r5, #4]
  42af98:	50c4      	str	r4, [r0, r3]
  42af9a:	6808      	ldr	r0, [r1, #0]
  42af9c:	6003      	str	r3, [r0, #0]
  42af9e:	3008      	adds	r0, #8
  42afa0:	600d      	str	r5, [r1, #0]
  42afa2:	bc70      	pop	{r4, r5, r6}
  42afa4:	4770      	bx	lr
  42afa6:	4770      	bx	lr
  42afa8:	4635      	mov	r5, r6
  42afaa:	6002      	str	r2, [r0, #0]
  42afac:	3008      	adds	r0, #8
  42afae:	600d      	str	r5, [r1, #0]
  42afb0:	bc70      	pop	{r4, r5, r6}
  42afb2:	4770      	bx	lr
  42afb4:	4770      	bx	lr
  42afb6:	bf00      	nop
  42afb8:	2004e910 	.word	0x2004e910

0042afbc <__cxa_allocate_exception>:
  42afbc:	b510      	push	{r4, lr}
  42afbe:	f100 0480 	add.w	r4, r0, #128	@ 0x80
  42afc2:	4620      	mov	r0, r4
  42afc4:	f007 fb36 	bl	432634 <malloc>
  42afc8:	b138      	cbz	r0, 42afda <__cxa_allocate_exception+0x1e>
  42afca:	4603      	mov	r3, r0
  42afcc:	2280      	movs	r2, #128	@ 0x80
  42afce:	2100      	movs	r1, #0
  42afd0:	4618      	mov	r0, r3
  42afd2:	f7f5 fe67 	bl	420ca4 <memset>
  42afd6:	3080      	adds	r0, #128	@ 0x80
  42afd8:	bd10      	pop	{r4, pc}
  42afda:	4620      	mov	r0, r4
  42afdc:	f7ff ffc2 	bl	42af64 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
  42afe0:	4603      	mov	r3, r0
  42afe2:	2800      	cmp	r0, #0
  42afe4:	d1f2      	bne.n	42afcc <__cxa_allocate_exception+0x10>
  42afe6:	f000 fc59 	bl	42b89c <_ZSt9terminatev>
  42afea:	bf00      	nop

0042afec <__cxa_free_exception>:
  42afec:	4b06      	ldr	r3, [pc, #24]	@ (42b008 <__cxa_free_exception+0x1c>)
  42afee:	3880      	subs	r0, #128	@ 0x80
  42aff0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  42aff4:	4413      	add	r3, r2
  42aff6:	4298      	cmp	r0, r3
  42aff8:	d203      	bcs.n	42b002 <__cxa_free_exception+0x16>
  42affa:	4282      	cmp	r2, r0
  42affc:	d201      	bcs.n	42b002 <__cxa_free_exception+0x16>
  42affe:	f7ff bf71 	b.w	42aee4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
  42b002:	f007 bb1f 	b.w	432644 <free>
  42b006:	bf00      	nop
  42b008:	2004e910 	.word	0x2004e910

0042b00c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
  42b00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42b010:	2600      	movs	r6, #0
  42b012:	4d39      	ldr	r5, [pc, #228]	@ (42b0f8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xec>)
  42b014:	b088      	sub	sp, #32
  42b016:	4839      	ldr	r0, [pc, #228]	@ (42b0fc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xf0>)
  42b018:	60ee      	str	r6, [r5, #12]
  42b01a:	e9c5 6601 	strd	r6, r6, [r5, #4]
  42b01e:	f007 fafb 	bl	432618 <getenv>
  42b022:	2208      	movs	r2, #8
  42b024:	4b36      	ldr	r3, [pc, #216]	@ (42b100 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xf4>)
  42b026:	2109      	movs	r1, #9
  42b028:	9604      	str	r6, [sp, #16]
  42b02a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  42b02e:	4a35      	ldr	r2, [pc, #212]	@ (42b104 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xf8>)
  42b030:	2304      	movs	r3, #4
  42b032:	e9cd 1205 	strd	r1, r2, [sp, #20]
  42b036:	9307      	str	r3, [sp, #28]
  42b038:	2800      	cmp	r0, #0
  42b03a:	d03b      	beq.n	42b0b4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xa8>
  42b03c:	4604      	mov	r4, r0
  42b03e:	4e32      	ldr	r6, [pc, #200]	@ (42b108 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xfc>)
  42b040:	7823      	ldrb	r3, [r4, #0]
  42b042:	220f      	movs	r2, #15
  42b044:	4630      	mov	r0, r6
  42b046:	2b3a      	cmp	r3, #58	@ 0x3a
  42b048:	bf08      	it	eq
  42b04a:	3401      	addeq	r4, #1
  42b04c:	4621      	mov	r1, r4
  42b04e:	f7f5 fd0f 	bl	420a70 <memcmp>
  42b052:	b910      	cbnz	r0, 42b05a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
  42b054:	7be3      	ldrb	r3, [r4, #15]
  42b056:	2b2e      	cmp	r3, #46	@ 0x2e
  42b058:	d017      	beq.n	42b08a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x7e>
  42b05a:	4620      	mov	r0, r4
  42b05c:	213a      	movs	r1, #58	@ 0x3a
  42b05e:	f7f8 fda1 	bl	423ba4 <strchr>
  42b062:	4604      	mov	r4, r0
  42b064:	2800      	cmp	r0, #0
  42b066:	d1eb      	bne.n	42b040 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x34>
  42b068:	9a07      	ldr	r2, [sp, #28]
  42b06a:	9c04      	ldr	r4, [sp, #16]
  42b06c:	2a40      	cmp	r2, #64	@ 0x40
  42b06e:	bfa8      	it	ge
  42b070:	2240      	movge	r2, #64	@ 0x40
  42b072:	2c00      	cmp	r4, #0
  42b074:	bf08      	it	eq
  42b076:	2406      	moveq	r4, #6
  42b078:	343e      	adds	r4, #62	@ 0x3e
  42b07a:	fb02 f404 	mul.w	r4, r2, r4
  42b07e:	00a4      	lsls	r4, r4, #2
  42b080:	60ec      	str	r4, [r5, #12]
  42b082:	b9dc      	cbnz	r4, 42b0bc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xb0>
  42b084:	b008      	add	sp, #32
  42b086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42b08a:	3410      	adds	r4, #16
  42b08c:	af02      	add	r7, sp, #8
  42b08e:	4621      	mov	r1, r4
  42b090:	e9d7 8000 	ldrd	r8, r0, [r7]
  42b094:	4642      	mov	r2, r8
  42b096:	f1b8 0f00 	cmp.w	r8, #0
  42b09a:	d002      	beq.n	42b0a2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x96>
  42b09c:	f7f5 fce8 	bl	420a70 <memcmp>
  42b0a0:	b918      	cbnz	r0, 42b0aa <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x9e>
  42b0a2:	f814 3008 	ldrb.w	r3, [r4, r8]
  42b0a6:	2b3d      	cmp	r3, #61	@ 0x3d
  42b0a8:	d012      	beq.n	42b0d0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xc4>
  42b0aa:	370c      	adds	r7, #12
  42b0ac:	ab08      	add	r3, sp, #32
  42b0ae:	429f      	cmp	r7, r3
  42b0b0:	d1ed      	bne.n	42b08e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x82>
  42b0b2:	e7d2      	b.n	42b05a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
  42b0b4:	f44f 6388 	mov.w	r3, #1088	@ 0x440
  42b0b8:	461c      	mov	r4, r3
  42b0ba:	60eb      	str	r3, [r5, #12]
  42b0bc:	4620      	mov	r0, r4
  42b0be:	f007 fab9 	bl	432634 <malloc>
  42b0c2:	60a8      	str	r0, [r5, #8]
  42b0c4:	b1a8      	cbz	r0, 42b0f2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xe6>
  42b0c6:	2300      	movs	r3, #0
  42b0c8:	6068      	str	r0, [r5, #4]
  42b0ca:	e9c0 4300 	strd	r4, r3, [r0]
  42b0ce:	e7d9      	b.n	42b084 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x78>
  42b0d0:	f108 0001 	add.w	r0, r8, #1
  42b0d4:	2200      	movs	r2, #0
  42b0d6:	a901      	add	r1, sp, #4
  42b0d8:	4420      	add	r0, r4
  42b0da:	f007 fb57 	bl	43278c <strtoul>
  42b0de:	9c01      	ldr	r4, [sp, #4]
  42b0e0:	7823      	ldrb	r3, [r4, #0]
  42b0e2:	2b3a      	cmp	r3, #58	@ 0x3a
  42b0e4:	d001      	beq.n	42b0ea <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xde>
  42b0e6:	2b00      	cmp	r3, #0
  42b0e8:	d1b7      	bne.n	42b05a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
  42b0ea:	2800      	cmp	r0, #0
  42b0ec:	bfa8      	it	ge
  42b0ee:	60b8      	strge	r0, [r7, #8]
  42b0f0:	e7b3      	b.n	42b05a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
  42b0f2:	60e8      	str	r0, [r5, #12]
  42b0f4:	e7c6      	b.n	42b084 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x78>
  42b0f6:	bf00      	nop
  42b0f8:	2004e910 	.word	0x2004e910
  42b0fc:	0043500c 	.word	0x0043500c
  42b100:	00435020 	.word	0x00435020
  42b104:	0043502c 	.word	0x0043502c
  42b108:	00435038 	.word	0x00435038

0042b10c <__cxa_end_cleanup>:
  42b10c:	b41e      	push	{r1, r2, r3, r4}
  42b10e:	f000 f88d 	bl	42b22c <__gnu_end_cleanup>
  42b112:	bc1e      	pop	{r1, r2, r3, r4}
  42b114:	f7e5 fd64 	bl	410be0 <_Unwind_Resume>

0042b118 <__cxa_type_match>:
  42b118:	b5f0      	push	{r4, r5, r6, r7, lr}
  42b11a:	461d      	mov	r5, r3
  42b11c:	7803      	ldrb	r3, [r0, #0]
  42b11e:	b083      	sub	sp, #12
  42b120:	460c      	mov	r4, r1
  42b122:	2b47      	cmp	r3, #71	@ 0x47
  42b124:	d019      	beq.n	42b15a <__cxa_type_match+0x42>
  42b126:	2000      	movs	r0, #0
  42b128:	4e25      	ldr	r6, [pc, #148]	@ (42b1c0 <__cxa_type_match+0xa8>)
  42b12a:	6833      	ldr	r3, [r6, #0]
  42b12c:	9001      	str	r0, [sp, #4]
  42b12e:	4630      	mov	r0, r6
  42b130:	689b      	ldr	r3, [r3, #8]
  42b132:	4798      	blx	r3
  42b134:	b178      	cbz	r0, 42b156 <__cxa_type_match+0x3e>
  42b136:	9b01      	ldr	r3, [sp, #4]
  42b138:	2702      	movs	r7, #2
  42b13a:	681b      	ldr	r3, [r3, #0]
  42b13c:	9301      	str	r3, [sp, #4]
  42b13e:	6823      	ldr	r3, [r4, #0]
  42b140:	4620      	mov	r0, r4
  42b142:	4631      	mov	r1, r6
  42b144:	aa01      	add	r2, sp, #4
  42b146:	691c      	ldr	r4, [r3, #16]
  42b148:	2301      	movs	r3, #1
  42b14a:	47a0      	blx	r4
  42b14c:	bb20      	cbnz	r0, 42b198 <__cxa_type_match+0x80>
  42b14e:	4607      	mov	r7, r0
  42b150:	4638      	mov	r0, r7
  42b152:	b003      	add	sp, #12
  42b154:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42b156:	2701      	movs	r7, #1
  42b158:	e7f1      	b.n	42b13e <__cxa_type_match+0x26>
  42b15a:	7843      	ldrb	r3, [r0, #1]
  42b15c:	2b4e      	cmp	r3, #78	@ 0x4e
  42b15e:	d1e2      	bne.n	42b126 <__cxa_type_match+0xe>
  42b160:	7883      	ldrb	r3, [r0, #2]
  42b162:	2b55      	cmp	r3, #85	@ 0x55
  42b164:	d1df      	bne.n	42b126 <__cxa_type_match+0xe>
  42b166:	78c3      	ldrb	r3, [r0, #3]
  42b168:	2b43      	cmp	r3, #67	@ 0x43
  42b16a:	d1dc      	bne.n	42b126 <__cxa_type_match+0xe>
  42b16c:	7903      	ldrb	r3, [r0, #4]
  42b16e:	2b46      	cmp	r3, #70	@ 0x46
  42b170:	d01b      	beq.n	42b1aa <__cxa_type_match+0x92>
  42b172:	2b43      	cmp	r3, #67	@ 0x43
  42b174:	d1d7      	bne.n	42b126 <__cxa_type_match+0xe>
  42b176:	7943      	ldrb	r3, [r0, #5]
  42b178:	2b2b      	cmp	r3, #43	@ 0x2b
  42b17a:	d1d4      	bne.n	42b126 <__cxa_type_match+0xe>
  42b17c:	7983      	ldrb	r3, [r0, #6]
  42b17e:	2b2b      	cmp	r3, #43	@ 0x2b
  42b180:	d1d1      	bne.n	42b126 <__cxa_type_match+0xe>
  42b182:	79c3      	ldrb	r3, [r0, #7]
  42b184:	2b01      	cmp	r3, #1
  42b186:	d8ce      	bhi.n	42b126 <__cxa_type_match+0xe>
  42b188:	f04f 0300 	mov.w	r3, #0
  42b18c:	f850 6c20 	ldr.w	r6, [r0, #-32]
  42b190:	9301      	str	r3, [sp, #4]
  42b192:	d006      	beq.n	42b1a2 <__cxa_type_match+0x8a>
  42b194:	3058      	adds	r0, #88	@ 0x58
  42b196:	e7c8      	b.n	42b12a <__cxa_type_match+0x12>
  42b198:	9b01      	ldr	r3, [sp, #4]
  42b19a:	4638      	mov	r0, r7
  42b19c:	602b      	str	r3, [r5, #0]
  42b19e:	b003      	add	sp, #12
  42b1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42b1a2:	4630      	mov	r0, r6
  42b1a4:	f856 6c78 	ldr.w	r6, [r6, #-120]
  42b1a8:	e7bf      	b.n	42b12a <__cxa_type_match+0x12>
  42b1aa:	7943      	ldrb	r3, [r0, #5]
  42b1ac:	2b4f      	cmp	r3, #79	@ 0x4f
  42b1ae:	d1ba      	bne.n	42b126 <__cxa_type_match+0xe>
  42b1b0:	7983      	ldrb	r3, [r0, #6]
  42b1b2:	2b52      	cmp	r3, #82	@ 0x52
  42b1b4:	d1b7      	bne.n	42b126 <__cxa_type_match+0xe>
  42b1b6:	79c0      	ldrb	r0, [r0, #7]
  42b1b8:	2800      	cmp	r0, #0
  42b1ba:	d1b4      	bne.n	42b126 <__cxa_type_match+0xe>
  42b1bc:	4e01      	ldr	r6, [pc, #4]	@ (42b1c4 <__cxa_type_match+0xac>)
  42b1be:	e7b4      	b.n	42b12a <__cxa_type_match+0x12>
  42b1c0:	0043cc88 	.word	0x0043cc88
  42b1c4:	0043cc5c 	.word	0x0043cc5c

0042b1c8 <__cxa_begin_cleanup>:
  42b1c8:	b510      	push	{r4, lr}
  42b1ca:	4604      	mov	r4, r0
  42b1cc:	f000 f87e 	bl	42b2cc <__cxa_get_globals>
  42b1d0:	4622      	mov	r2, r4
  42b1d2:	f812 3920 	ldrb.w	r3, [r2], #-32
  42b1d6:	2b47      	cmp	r3, #71	@ 0x47
  42b1d8:	d004      	beq.n	42b1e4 <__cxa_begin_cleanup+0x1c>
  42b1da:	6883      	ldr	r3, [r0, #8]
  42b1dc:	bb23      	cbnz	r3, 42b228 <__cxa_begin_cleanup+0x60>
  42b1de:	6082      	str	r2, [r0, #8]
  42b1e0:	2001      	movs	r0, #1
  42b1e2:	bd10      	pop	{r4, pc}
  42b1e4:	7863      	ldrb	r3, [r4, #1]
  42b1e6:	2b4e      	cmp	r3, #78	@ 0x4e
  42b1e8:	d1f7      	bne.n	42b1da <__cxa_begin_cleanup+0x12>
  42b1ea:	78a3      	ldrb	r3, [r4, #2]
  42b1ec:	2b55      	cmp	r3, #85	@ 0x55
  42b1ee:	d1f4      	bne.n	42b1da <__cxa_begin_cleanup+0x12>
  42b1f0:	78e3      	ldrb	r3, [r4, #3]
  42b1f2:	2b43      	cmp	r3, #67	@ 0x43
  42b1f4:	d1f1      	bne.n	42b1da <__cxa_begin_cleanup+0x12>
  42b1f6:	7923      	ldrb	r3, [r4, #4]
  42b1f8:	2b43      	cmp	r3, #67	@ 0x43
  42b1fa:	d1ee      	bne.n	42b1da <__cxa_begin_cleanup+0x12>
  42b1fc:	7963      	ldrb	r3, [r4, #5]
  42b1fe:	2b2b      	cmp	r3, #43	@ 0x2b
  42b200:	d1eb      	bne.n	42b1da <__cxa_begin_cleanup+0x12>
  42b202:	79a3      	ldrb	r3, [r4, #6]
  42b204:	2b2b      	cmp	r3, #43	@ 0x2b
  42b206:	d1e8      	bne.n	42b1da <__cxa_begin_cleanup+0x12>
  42b208:	79e3      	ldrb	r3, [r4, #7]
  42b20a:	2b01      	cmp	r3, #1
  42b20c:	d8e5      	bhi.n	42b1da <__cxa_begin_cleanup+0x12>
  42b20e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  42b212:	3301      	adds	r3, #1
  42b214:	2b01      	cmp	r3, #1
  42b216:	f844 3c04 	str.w	r3, [r4, #-4]
  42b21a:	d1e1      	bne.n	42b1e0 <__cxa_begin_cleanup+0x18>
  42b21c:	6883      	ldr	r3, [r0, #8]
  42b21e:	f844 3c08 	str.w	r3, [r4, #-8]
  42b222:	6082      	str	r2, [r0, #8]
  42b224:	2001      	movs	r0, #1
  42b226:	bd10      	pop	{r4, pc}
  42b228:	f000 fb38 	bl	42b89c <_ZSt9terminatev>

0042b22c <__gnu_end_cleanup>:
  42b22c:	b508      	push	{r3, lr}
  42b22e:	f000 f84d 	bl	42b2cc <__cxa_get_globals>
  42b232:	6883      	ldr	r3, [r0, #8]
  42b234:	b383      	cbz	r3, 42b298 <__gnu_end_cleanup+0x6c>
  42b236:	f893 2020 	ldrb.w	r2, [r3, #32]
  42b23a:	2a47      	cmp	r2, #71	@ 0x47
  42b23c:	d004      	beq.n	42b248 <__gnu_end_cleanup+0x1c>
  42b23e:	2200      	movs	r2, #0
  42b240:	6082      	str	r2, [r0, #8]
  42b242:	f103 0020 	add.w	r0, r3, #32
  42b246:	bd08      	pop	{r3, pc}
  42b248:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
  42b24c:	2a4e      	cmp	r2, #78	@ 0x4e
  42b24e:	d1f6      	bne.n	42b23e <__gnu_end_cleanup+0x12>
  42b250:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
  42b254:	2a55      	cmp	r2, #85	@ 0x55
  42b256:	d1f2      	bne.n	42b23e <__gnu_end_cleanup+0x12>
  42b258:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
  42b25c:	2a43      	cmp	r2, #67	@ 0x43
  42b25e:	d1ee      	bne.n	42b23e <__gnu_end_cleanup+0x12>
  42b260:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
  42b264:	2a43      	cmp	r2, #67	@ 0x43
  42b266:	d1ea      	bne.n	42b23e <__gnu_end_cleanup+0x12>
  42b268:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
  42b26c:	2a2b      	cmp	r2, #43	@ 0x2b
  42b26e:	d1e6      	bne.n	42b23e <__gnu_end_cleanup+0x12>
  42b270:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
  42b274:	2a2b      	cmp	r2, #43	@ 0x2b
  42b276:	d1e2      	bne.n	42b23e <__gnu_end_cleanup+0x12>
  42b278:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
  42b27c:	2a01      	cmp	r2, #1
  42b27e:	d8de      	bhi.n	42b23e <__gnu_end_cleanup+0x12>
  42b280:	69da      	ldr	r2, [r3, #28]
  42b282:	3a01      	subs	r2, #1
  42b284:	61da      	str	r2, [r3, #28]
  42b286:	2a00      	cmp	r2, #0
  42b288:	d1db      	bne.n	42b242 <__gnu_end_cleanup+0x16>
  42b28a:	6999      	ldr	r1, [r3, #24]
  42b28c:	2200      	movs	r2, #0
  42b28e:	6081      	str	r1, [r0, #8]
  42b290:	f103 0020 	add.w	r0, r3, #32
  42b294:	619a      	str	r2, [r3, #24]
  42b296:	bd08      	pop	{r3, pc}
  42b298:	f000 fb00 	bl	42b89c <_ZSt9terminatev>

0042b29c <_ZNSt9exceptionD1Ev>:
  42b29c:	4770      	bx	lr
  42b29e:	bf00      	nop

0042b2a0 <_ZNSt13bad_exceptionD1Ev>:
  42b2a0:	4770      	bx	lr
  42b2a2:	bf00      	nop

0042b2a4 <_ZGTtNKSt9exception4whatEv>:
  42b2a4:	4800      	ldr	r0, [pc, #0]	@ (42b2a8 <_ZGTtNKSt9exception4whatEv+0x4>)
  42b2a6:	4770      	bx	lr
  42b2a8:	00435048 	.word	0x00435048

0042b2ac <_ZGTtNKSt13bad_exception4whatEv>:
  42b2ac:	4800      	ldr	r0, [pc, #0]	@ (42b2b0 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
  42b2ae:	4770      	bx	lr
  42b2b0:	00435058 	.word	0x00435058

0042b2b4 <_ZNSt13bad_exceptionD0Ev>:
  42b2b4:	b510      	push	{r4, lr}
  42b2b6:	4604      	mov	r4, r0
  42b2b8:	2104      	movs	r1, #4
  42b2ba:	f7fd f927 	bl	42850c <_ZdlPvj>
  42b2be:	4620      	mov	r0, r4
  42b2c0:	bd10      	pop	{r4, pc}
  42b2c2:	bf00      	nop

0042b2c4 <__cxa_get_globals_fast>:
  42b2c4:	4800      	ldr	r0, [pc, #0]	@ (42b2c8 <__cxa_get_globals_fast+0x4>)
  42b2c6:	4770      	bx	lr
  42b2c8:	2004e920 	.word	0x2004e920

0042b2cc <__cxa_get_globals>:
  42b2cc:	4800      	ldr	r0, [pc, #0]	@ (42b2d0 <__cxa_get_globals+0x4>)
  42b2ce:	4770      	bx	lr
  42b2d0:	2004e920 	.word	0x2004e920

0042b2d4 <_ZL28read_encoded_value_with_basehjPKhPj>:
  42b2d4:	2850      	cmp	r0, #80	@ 0x50
  42b2d6:	b570      	push	{r4, r5, r6, lr}
  42b2d8:	d01d      	beq.n	42b316 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
  42b2da:	4684      	mov	ip, r0
  42b2dc:	f000 000f 	and.w	r0, r0, #15
  42b2e0:	280c      	cmp	r0, #12
  42b2e2:	d855      	bhi.n	42b390 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
  42b2e4:	e8df f000 	tbb	[pc, r0]
  42b2e8:	07264407 	.word	0x07264407
  42b2ec:	5454541e 	.word	0x5454541e
  42b2f0:	07222a54 	.word	0x07222a54
  42b2f4:	1e          	.byte	0x1e
  42b2f5:	00          	.byte	0x00
  42b2f6:	4610      	mov	r0, r2
  42b2f8:	f850 6b04 	ldr.w	r6, [r0], #4
  42b2fc:	b14e      	cbz	r6, 42b312 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
  42b2fe:	f00c 0470 	and.w	r4, ip, #112	@ 0x70
  42b302:	2c10      	cmp	r4, #16
  42b304:	bf08      	it	eq
  42b306:	4611      	moveq	r1, r2
  42b308:	f01c 0f80 	tst.w	ip, #128	@ 0x80
  42b30c:	440e      	add	r6, r1
  42b30e:	bf18      	it	ne
  42b310:	6836      	ldrne	r6, [r6, #0]
  42b312:	601e      	str	r6, [r3, #0]
  42b314:	bd70      	pop	{r4, r5, r6, pc}
  42b316:	1cd0      	adds	r0, r2, #3
  42b318:	f020 0003 	bic.w	r0, r0, #3
  42b31c:	f850 6b04 	ldr.w	r6, [r0], #4
  42b320:	601e      	str	r6, [r3, #0]
  42b322:	bd70      	pop	{r4, r5, r6, pc}
  42b324:	4610      	mov	r0, r2
  42b326:	f850 6b08 	ldr.w	r6, [r0], #8
  42b32a:	e7e7      	b.n	42b2fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
  42b32c:	4610      	mov	r0, r2
  42b32e:	f930 6b02 	ldrsh.w	r6, [r0], #2
  42b332:	e7e3      	b.n	42b2fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
  42b334:	4610      	mov	r0, r2
  42b336:	f830 6b02 	ldrh.w	r6, [r0], #2
  42b33a:	e7df      	b.n	42b2fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
  42b33c:	2600      	movs	r6, #0
  42b33e:	4610      	mov	r0, r2
  42b340:	4634      	mov	r4, r6
  42b342:	f810 5b01 	ldrb.w	r5, [r0], #1
  42b346:	f005 0e7f 	and.w	lr, r5, #127	@ 0x7f
  42b34a:	f015 0f80 	tst.w	r5, #128	@ 0x80
  42b34e:	fa0e fe04 	lsl.w	lr, lr, r4
  42b352:	f104 0407 	add.w	r4, r4, #7
  42b356:	ea46 060e 	orr.w	r6, r6, lr
  42b35a:	d1f2      	bne.n	42b342 <_ZL28read_encoded_value_with_basehjPKhPj+0x6e>
  42b35c:	2c1f      	cmp	r4, #31
  42b35e:	d8cd      	bhi.n	42b2fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
  42b360:	066d      	lsls	r5, r5, #25
  42b362:	d5cb      	bpl.n	42b2fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
  42b364:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
  42b368:	fa05 f404 	lsl.w	r4, r5, r4
  42b36c:	4326      	orrs	r6, r4
  42b36e:	e7c6      	b.n	42b2fe <_ZL28read_encoded_value_with_basehjPKhPj+0x2a>
  42b370:	2600      	movs	r6, #0
  42b372:	4610      	mov	r0, r2
  42b374:	4634      	mov	r4, r6
  42b376:	f810 5b01 	ldrb.w	r5, [r0], #1
  42b37a:	f005 0e7f 	and.w	lr, r5, #127	@ 0x7f
  42b37e:	062d      	lsls	r5, r5, #24
  42b380:	fa0e fe04 	lsl.w	lr, lr, r4
  42b384:	f104 0407 	add.w	r4, r4, #7
  42b388:	ea46 060e 	orr.w	r6, r6, lr
  42b38c:	d4f3      	bmi.n	42b376 <_ZL28read_encoded_value_with_basehjPKhPj+0xa2>
  42b38e:	e7b5      	b.n	42b2fc <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
  42b390:	f7f3 ff02 	bl	41f198 <abort>

0042b394 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
  42b394:	28ff      	cmp	r0, #255	@ 0xff
  42b396:	b508      	push	{r3, lr}
  42b398:	4603      	mov	r3, r0
  42b39a:	d012      	beq.n	42b3c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
  42b39c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  42b3a0:	4608      	mov	r0, r1
  42b3a2:	2b30      	cmp	r3, #48	@ 0x30
  42b3a4:	d013      	beq.n	42b3ce <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
  42b3a6:	d805      	bhi.n	42b3b4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
  42b3a8:	2b20      	cmp	r3, #32
  42b3aa:	d109      	bne.n	42b3c0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
  42b3ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  42b3b0:	f008 ba27 	b.w	433802 <_Unwind_GetTextRelBase>
  42b3b4:	2b40      	cmp	r3, #64	@ 0x40
  42b3b6:	d106      	bne.n	42b3c6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
  42b3b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  42b3bc:	f008 ba0e 	b.w	4337dc <_Unwind_GetRegionStart>
  42b3c0:	d803      	bhi.n	42b3ca <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
  42b3c2:	2000      	movs	r0, #0
  42b3c4:	bd08      	pop	{r3, pc}
  42b3c6:	2b50      	cmp	r3, #80	@ 0x50
  42b3c8:	d0fb      	beq.n	42b3c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
  42b3ca:	f7f3 fee5 	bl	41f198 <abort>
  42b3ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  42b3d2:	f008 ba13 	b.w	4337fc <_Unwind_GetDataRelBase>
  42b3d6:	bf00      	nop

0042b3d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
  42b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42b3da:	460c      	mov	r4, r1
  42b3dc:	4606      	mov	r6, r0
  42b3de:	4615      	mov	r5, r2
  42b3e0:	b108      	cbz	r0, 42b3e6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
  42b3e2:	f008 f9fb 	bl	4337dc <_Unwind_GetRegionStart>
  42b3e6:	6028      	str	r0, [r5, #0]
  42b3e8:	f814 7b01 	ldrb.w	r7, [r4], #1
  42b3ec:	2fff      	cmp	r7, #255	@ 0xff
  42b3ee:	d128      	bne.n	42b442 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6a>
  42b3f0:	6068      	str	r0, [r5, #4]
  42b3f2:	4620      	mov	r0, r4
  42b3f4:	f810 2b01 	ldrb.w	r2, [r0], #1
  42b3f8:	2aff      	cmp	r2, #255	@ 0xff
  42b3fa:	d032      	beq.n	42b462 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8a>
  42b3fc:	2400      	movs	r4, #0
  42b3fe:	2310      	movs	r3, #16
  42b400:	4622      	mov	r2, r4
  42b402:	752b      	strb	r3, [r5, #20]
  42b404:	f810 1b01 	ldrb.w	r1, [r0], #1
  42b408:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
  42b40c:	0609      	lsls	r1, r1, #24
  42b40e:	fa03 f302 	lsl.w	r3, r3, r2
  42b412:	f102 0207 	add.w	r2, r2, #7
  42b416:	ea44 0403 	orr.w	r4, r4, r3
  42b41a:	d4f3      	bmi.n	42b404 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
  42b41c:	1903      	adds	r3, r0, r4
  42b41e:	2400      	movs	r4, #0
  42b420:	60eb      	str	r3, [r5, #12]
  42b422:	f810 3b01 	ldrb.w	r3, [r0], #1
  42b426:	4622      	mov	r2, r4
  42b428:	756b      	strb	r3, [r5, #21]
  42b42a:	f810 1b01 	ldrb.w	r1, [r0], #1
  42b42e:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
  42b432:	4093      	lsls	r3, r2
  42b434:	3207      	adds	r2, #7
  42b436:	431c      	orrs	r4, r3
  42b438:	060b      	lsls	r3, r1, #24
  42b43a:	d4f6      	bmi.n	42b42a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
  42b43c:	4404      	add	r4, r0
  42b43e:	612c      	str	r4, [r5, #16]
  42b440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42b442:	4631      	mov	r1, r6
  42b444:	4638      	mov	r0, r7
  42b446:	f7ff ffa5 	bl	42b394 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  42b44a:	4622      	mov	r2, r4
  42b44c:	4601      	mov	r1, r0
  42b44e:	1d2b      	adds	r3, r5, #4
  42b450:	4638      	mov	r0, r7
  42b452:	f7ff ff3f 	bl	42b2d4 <_ZL28read_encoded_value_with_basehjPKhPj>
  42b456:	4604      	mov	r4, r0
  42b458:	4620      	mov	r0, r4
  42b45a:	f810 2b01 	ldrb.w	r2, [r0], #1
  42b45e:	2aff      	cmp	r2, #255	@ 0xff
  42b460:	d1cc      	bne.n	42b3fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
  42b462:	2300      	movs	r3, #0
  42b464:	752a      	strb	r2, [r5, #20]
  42b466:	e7da      	b.n	42b41e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x46>

0042b468 <__gxx_personality_v0>:
  42b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42b46c:	2300      	movs	r3, #0
  42b46e:	b095      	sub	sp, #84	@ 0x54
  42b470:	460f      	mov	r7, r1
  42b472:	4616      	mov	r6, r2
  42b474:	930a      	str	r3, [sp, #40]	@ 0x28
  42b476:	f000 0303 	and.w	r3, r0, #3
  42b47a:	2b01      	cmp	r3, #1
  42b47c:	f000 80a4 	beq.w	42b5c8 <__gxx_personality_v0+0x160>
  42b480:	2b02      	cmp	r3, #2
  42b482:	d10a      	bne.n	42b49a <__gxx_personality_v0+0x32>
  42b484:	4631      	mov	r1, r6
  42b486:	4638      	mov	r0, r7
  42b488:	f008 f992 	bl	4337b0 <__gnu_unwind_frame>
  42b48c:	2800      	cmp	r0, #0
  42b48e:	f040 8090 	bne.w	42b5b2 <__gxx_personality_v0+0x14a>
  42b492:	2008      	movs	r0, #8
  42b494:	b015      	add	sp, #84	@ 0x54
  42b496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42b49a:	2b00      	cmp	r3, #0
  42b49c:	f040 81f0 	bne.w	42b880 <__gxx_personality_v0+0x418>
  42b4a0:	f010 0408 	ands.w	r4, r0, #8
  42b4a4:	d1ee      	bne.n	42b484 <__gxx_personality_v0+0x1c>
  42b4a6:	ab0e      	add	r3, sp, #56	@ 0x38
  42b4a8:	f04f 0801 	mov.w	r8, #1
  42b4ac:	9302      	str	r3, [sp, #8]
  42b4ae:	9b02      	ldr	r3, [sp, #8]
  42b4b0:	220c      	movs	r2, #12
  42b4b2:	4630      	mov	r0, r6
  42b4b4:	970e      	str	r7, [sp, #56]	@ 0x38
  42b4b6:	9300      	str	r3, [sp, #0]
  42b4b8:	2300      	movs	r3, #0
  42b4ba:	4619      	mov	r1, r3
  42b4bc:	f007 fc9c 	bl	432df8 <_Unwind_VRS_Set>
  42b4c0:	4630      	mov	r0, r6
  42b4c2:	f008 f991 	bl	4337e8 <_Unwind_GetLanguageSpecificData>
  42b4c6:	9003      	str	r0, [sp, #12]
  42b4c8:	2800      	cmp	r0, #0
  42b4ca:	d0db      	beq.n	42b484 <__gxx_personality_v0+0x1c>
  42b4cc:	ea44 0308 	orr.w	r3, r4, r8
  42b4d0:	4630      	mov	r0, r6
  42b4d2:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
  42b4d6:	9304      	str	r3, [sp, #16]
  42b4d8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
  42b4dc:	f7ff ff7c 	bl	42b3d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  42b4e0:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
  42b4e4:	4681      	mov	r9, r0
  42b4e6:	4631      	mov	r1, r6
  42b4e8:	4618      	mov	r0, r3
  42b4ea:	9306      	str	r3, [sp, #24]
  42b4ec:	f7ff ff52 	bl	42b394 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  42b4f0:	2300      	movs	r3, #0
  42b4f2:	9005      	str	r0, [sp, #20]
  42b4f4:	220f      	movs	r2, #15
  42b4f6:	4619      	mov	r1, r3
  42b4f8:	9010      	str	r0, [sp, #64]	@ 0x40
  42b4fa:	f8cd 8000 	str.w	r8, [sp]
  42b4fe:	4630      	mov	r0, r6
  42b500:	f007 fc54 	bl	432dac <_Unwind_VRS_Get>
  42b504:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  42b506:	f8dd b048 	ldr.w	fp, [sp, #72]	@ 0x48
  42b50a:	f023 0301 	bic.w	r3, r3, #1
  42b50e:	45d9      	cmp	r9, fp
  42b510:	f103 35ff 	add.w	r5, r3, #4294967295	@ 0xffffffff
  42b514:	d232      	bcs.n	42b57c <__gxx_personality_v0+0x114>
  42b516:	f89d a04d 	ldrb.w	sl, [sp, #77]	@ 0x4d
  42b51a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
  42b51c:	2100      	movs	r1, #0
  42b51e:	4650      	mov	r0, sl
  42b520:	f7ff ff38 	bl	42b394 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  42b524:	464a      	mov	r2, r9
  42b526:	4601      	mov	r1, r0
  42b528:	ab0b      	add	r3, sp, #44	@ 0x2c
  42b52a:	4650      	mov	r0, sl
  42b52c:	f7ff fed2 	bl	42b2d4 <_ZL28read_encoded_value_with_basehjPKhPj>
  42b530:	4681      	mov	r9, r0
  42b532:	2100      	movs	r1, #0
  42b534:	4650      	mov	r0, sl
  42b536:	f7ff ff2d 	bl	42b394 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  42b53a:	464a      	mov	r2, r9
  42b53c:	4601      	mov	r1, r0
  42b53e:	ab0c      	add	r3, sp, #48	@ 0x30
  42b540:	4650      	mov	r0, sl
  42b542:	f7ff fec7 	bl	42b2d4 <_ZL28read_encoded_value_with_basehjPKhPj>
  42b546:	4681      	mov	r9, r0
  42b548:	2100      	movs	r1, #0
  42b54a:	4650      	mov	r0, sl
  42b54c:	f7ff ff22 	bl	42b394 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  42b550:	464a      	mov	r2, r9
  42b552:	4601      	mov	r1, r0
  42b554:	4643      	mov	r3, r8
  42b556:	4650      	mov	r0, sl
  42b558:	f7ff febc 	bl	42b2d4 <_ZL28read_encoded_value_with_basehjPKhPj>
  42b55c:	4681      	mov	r9, r0
  42b55e:	2000      	movs	r0, #0
  42b560:	4602      	mov	r2, r0
  42b562:	f819 1b01 	ldrb.w	r1, [r9], #1
  42b566:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
  42b56a:	4093      	lsls	r3, r2
  42b56c:	3207      	adds	r2, #7
  42b56e:	4318      	orrs	r0, r3
  42b570:	060b      	lsls	r3, r1, #24
  42b572:	d4f6      	bmi.n	42b562 <__gxx_personality_v0+0xfa>
  42b574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  42b576:	4423      	add	r3, r4
  42b578:	42ab      	cmp	r3, r5
  42b57a:	d91e      	bls.n	42b5ba <__gxx_personality_v0+0x152>
  42b57c:	f04f 0900 	mov.w	r9, #0
  42b580:	2301      	movs	r3, #1
  42b582:	46ca      	mov	sl, r9
  42b584:	9a04      	ldr	r2, [sp, #16]
  42b586:	07d1      	lsls	r1, r2, #31
  42b588:	f140 80d2 	bpl.w	42b730 <__gxx_personality_v0+0x2c8>
  42b58c:	2300      	movs	r3, #0
  42b58e:	4630      	mov	r0, r6
  42b590:	220d      	movs	r2, #13
  42b592:	f8cd 8000 	str.w	r8, [sp]
  42b596:	4619      	mov	r1, r3
  42b598:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
  42b59a:	f007 fc07 	bl	432dac <_Unwind_VRS_Get>
  42b59e:	9b03      	ldr	r3, [sp, #12]
  42b5a0:	2006      	movs	r0, #6
  42b5a2:	627c      	str	r4, [r7, #36]	@ 0x24
  42b5a4:	f8c7 9028 	str.w	r9, [r7, #40]	@ 0x28
  42b5a8:	e9c7 3a0b 	strd	r3, sl, [r7, #44]	@ 0x2c
  42b5ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  42b5ae:	623b      	str	r3, [r7, #32]
  42b5b0:	e770      	b.n	42b494 <__gxx_personality_v0+0x2c>
  42b5b2:	2009      	movs	r0, #9
  42b5b4:	b015      	add	sp, #84	@ 0x54
  42b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42b5ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  42b5bc:	4413      	add	r3, r2
  42b5be:	42ab      	cmp	r3, r5
  42b5c0:	d861      	bhi.n	42b686 <__gxx_personality_v0+0x21e>
  42b5c2:	45d9      	cmp	r9, fp
  42b5c4:	d3aa      	bcc.n	42b51c <__gxx_personality_v0+0xb4>
  42b5c6:	e7d9      	b.n	42b57c <__gxx_personality_v0+0x114>
  42b5c8:	f010 0408 	ands.w	r4, r0, #8
  42b5cc:	ab0e      	add	r3, sp, #56	@ 0x38
  42b5ce:	d003      	beq.n	42b5d8 <__gxx_personality_v0+0x170>
  42b5d0:	9302      	str	r3, [sp, #8]
  42b5d2:	f04f 0802 	mov.w	r8, #2
  42b5d6:	e76a      	b.n	42b4ae <__gxx_personality_v0+0x46>
  42b5d8:	461a      	mov	r2, r3
  42b5da:	6a0d      	ldr	r5, [r1, #32]
  42b5dc:	9302      	str	r3, [sp, #8]
  42b5de:	4621      	mov	r1, r4
  42b5e0:	4623      	mov	r3, r4
  42b5e2:	9200      	str	r2, [sp, #0]
  42b5e4:	4630      	mov	r0, r6
  42b5e6:	220d      	movs	r2, #13
  42b5e8:	f007 fbe0 	bl	432dac <_Unwind_VRS_Get>
  42b5ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  42b5ee:	429d      	cmp	r5, r3
  42b5f0:	d1ef      	bne.n	42b5d2 <__gxx_personality_v0+0x16a>
  42b5f2:	9a02      	ldr	r2, [sp, #8]
  42b5f4:	4623      	mov	r3, r4
  42b5f6:	4621      	mov	r1, r4
  42b5f8:	4630      	mov	r0, r6
  42b5fa:	9200      	str	r2, [sp, #0]
  42b5fc:	220c      	movs	r2, #12
  42b5fe:	970e      	str	r7, [sp, #56]	@ 0x38
  42b600:	f007 fbfa 	bl	432df8 <_Unwind_VRS_Set>
  42b604:	f8d7 a030 	ldr.w	sl, [r7, #48]	@ 0x30
  42b608:	e9d7 430a 	ldrd	r4, r3, [r7, #40]	@ 0x28
  42b60c:	f1ba 0f00 	cmp.w	sl, #0
  42b610:	d036      	beq.n	42b680 <__gxx_personality_v0+0x218>
  42b612:	46a1      	mov	r9, r4
  42b614:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
  42b618:	9303      	str	r3, [sp, #12]
  42b61a:	f1b9 0f00 	cmp.w	r9, #0
  42b61e:	f2c0 80f9 	blt.w	42b814 <__gxx_personality_v0+0x3ac>
  42b622:	2503      	movs	r5, #3
  42b624:	2300      	movs	r3, #0
  42b626:	4630      	mov	r0, r6
  42b628:	f8cd 8000 	str.w	r8, [sp]
  42b62c:	461a      	mov	r2, r3
  42b62e:	4619      	mov	r1, r3
  42b630:	970d      	str	r7, [sp, #52]	@ 0x34
  42b632:	f007 fbe1 	bl	432df8 <_Unwind_VRS_Set>
  42b636:	2300      	movs	r3, #0
  42b638:	2201      	movs	r2, #1
  42b63a:	4630      	mov	r0, r6
  42b63c:	f8cd 8000 	str.w	r8, [sp]
  42b640:	4619      	mov	r1, r3
  42b642:	940d      	str	r4, [sp, #52]	@ 0x34
  42b644:	f007 fbd8 	bl	432df8 <_Unwind_VRS_Set>
  42b648:	2300      	movs	r3, #0
  42b64a:	220f      	movs	r2, #15
  42b64c:	4630      	mov	r0, r6
  42b64e:	4619      	mov	r1, r3
  42b650:	f8cd 8000 	str.w	r8, [sp]
  42b654:	f007 fbaa 	bl	432dac <_Unwind_VRS_Get>
  42b658:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  42b65a:	2300      	movs	r3, #0
  42b65c:	4630      	mov	r0, r6
  42b65e:	f002 0201 	and.w	r2, r2, #1
  42b662:	f8cd 8000 	str.w	r8, [sp]
  42b666:	4619      	mov	r1, r3
  42b668:	ea42 020a 	orr.w	r2, r2, sl
  42b66c:	920d      	str	r2, [sp, #52]	@ 0x34
  42b66e:	220f      	movs	r2, #15
  42b670:	f007 fbc2 	bl	432df8 <_Unwind_VRS_Set>
  42b674:	2d02      	cmp	r5, #2
  42b676:	d068      	beq.n	42b74a <__gxx_personality_v0+0x2e2>
  42b678:	2007      	movs	r0, #7
  42b67a:	b015      	add	sp, #84	@ 0x54
  42b67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42b680:	4638      	mov	r0, r7
  42b682:	f006 febf 	bl	432404 <__cxa_call_terminate>
  42b686:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  42b688:	2b00      	cmp	r3, #0
  42b68a:	f43f aefb 	beq.w	42b484 <__gxx_personality_v0+0x1c>
  42b68e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  42b690:	eb03 0a02 	add.w	sl, r3, r2
  42b694:	2800      	cmp	r0, #0
  42b696:	f000 80e0 	beq.w	42b85a <__gxx_personality_v0+0x3f2>
  42b69a:	3801      	subs	r0, #1
  42b69c:	eb0b 0400 	add.w	r4, fp, r0
  42b6a0:	f1ba 0f00 	cmp.w	sl, #0
  42b6a4:	f43f aeee 	beq.w	42b484 <__gxx_personality_v0+0x1c>
  42b6a8:	9b04      	ldr	r3, [sp, #16]
  42b6aa:	f013 0308 	ands.w	r3, r3, #8
  42b6ae:	9308      	str	r3, [sp, #32]
  42b6b0:	f000 80d7 	beq.w	42b862 <__gxx_personality_v0+0x3fa>
  42b6b4:	4b73      	ldr	r3, [pc, #460]	@ (42b884 <__gxx_personality_v0+0x41c>)
  42b6b6:	603b      	str	r3, [r7, #0]
  42b6b8:	4b73      	ldr	r3, [pc, #460]	@ (42b888 <__gxx_personality_v0+0x420>)
  42b6ba:	607b      	str	r3, [r7, #4]
  42b6bc:	f8dd b018 	ldr.w	fp, [sp, #24]
  42b6c0:	2300      	movs	r3, #0
  42b6c2:	f8cd a018 	str.w	sl, [sp, #24]
  42b6c6:	f00b 0207 	and.w	r2, fp, #7
  42b6ca:	469a      	mov	sl, r3
  42b6cc:	9607      	str	r6, [sp, #28]
  42b6ce:	9209      	str	r2, [sp, #36]	@ 0x24
  42b6d0:	2100      	movs	r1, #0
  42b6d2:	460a      	mov	r2, r1
  42b6d4:	f814 0b01 	ldrb.w	r0, [r4], #1
  42b6d8:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
  42b6dc:	0605      	lsls	r5, r0, #24
  42b6de:	fa03 f302 	lsl.w	r3, r3, r2
  42b6e2:	f102 0207 	add.w	r2, r2, #7
  42b6e6:	ea41 0103 	orr.w	r1, r1, r3
  42b6ea:	d4f3      	bmi.n	42b6d4 <__gxx_personality_v0+0x26c>
  42b6ec:	2a1f      	cmp	r2, #31
  42b6ee:	d805      	bhi.n	42b6fc <__gxx_personality_v0+0x294>
  42b6f0:	0640      	lsls	r0, r0, #25
  42b6f2:	d503      	bpl.n	42b6fc <__gxx_personality_v0+0x294>
  42b6f4:	2301      	movs	r3, #1
  42b6f6:	4093      	lsls	r3, r2
  42b6f8:	425b      	negs	r3, r3
  42b6fa:	4319      	orrs	r1, r3
  42b6fc:	2500      	movs	r5, #0
  42b6fe:	4689      	mov	r9, r1
  42b700:	4626      	mov	r6, r4
  42b702:	462a      	mov	r2, r5
  42b704:	f816 0b01 	ldrb.w	r0, [r6], #1
  42b708:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
  42b70c:	4093      	lsls	r3, r2
  42b70e:	3207      	adds	r2, #7
  42b710:	431d      	orrs	r5, r3
  42b712:	0603      	lsls	r3, r0, #24
  42b714:	d4f6      	bmi.n	42b704 <__gxx_personality_v0+0x29c>
  42b716:	2a1f      	cmp	r2, #31
  42b718:	d81f      	bhi.n	42b75a <__gxx_personality_v0+0x2f2>
  42b71a:	0646      	lsls	r6, r0, #25
  42b71c:	d51d      	bpl.n	42b75a <__gxx_personality_v0+0x2f2>
  42b71e:	2301      	movs	r3, #1
  42b720:	4093      	lsls	r3, r2
  42b722:	425b      	negs	r3, r3
  42b724:	431d      	orrs	r5, r3
  42b726:	bb51      	cbnz	r1, 42b77e <__gxx_personality_v0+0x316>
  42b728:	f04f 0a01 	mov.w	sl, #1
  42b72c:	442c      	add	r4, r5
  42b72e:	e7cf      	b.n	42b6d0 <__gxx_personality_v0+0x268>
  42b730:	9a04      	ldr	r2, [sp, #16]
  42b732:	0712      	lsls	r2, r2, #28
  42b734:	d50d      	bpl.n	42b752 <__gxx_personality_v0+0x2ea>
  42b736:	2b01      	cmp	r3, #1
  42b738:	f000 80a0 	beq.w	42b87c <__gxx_personality_v0+0x414>
  42b73c:	f1b9 0f00 	cmp.w	r9, #0
  42b740:	f2c0 8098 	blt.w	42b874 <__gxx_personality_v0+0x40c>
  42b744:	464c      	mov	r4, r9
  42b746:	2503      	movs	r5, #3
  42b748:	e76c      	b.n	42b624 <__gxx_personality_v0+0x1bc>
  42b74a:	4638      	mov	r0, r7
  42b74c:	f7ff fd3c 	bl	42b1c8 <__cxa_begin_cleanup>
  42b750:	e792      	b.n	42b678 <__gxx_personality_v0+0x210>
  42b752:	2b01      	cmp	r3, #1
  42b754:	d094      	beq.n	42b680 <__gxx_personality_v0+0x218>
  42b756:	464c      	mov	r4, r9
  42b758:	e75f      	b.n	42b61a <__gxx_personality_v0+0x1b2>
  42b75a:	b981      	cbnz	r1, 42b77e <__gxx_personality_v0+0x316>
  42b75c:	f04f 0a01 	mov.w	sl, #1
  42b760:	2d00      	cmp	r5, #0
  42b762:	d1e3      	bne.n	42b72c <__gxx_personality_v0+0x2c4>
  42b764:	4653      	mov	r3, sl
  42b766:	e9dd a606 	ldrd	sl, r6, [sp, #24]
  42b76a:	2b00      	cmp	r3, #0
  42b76c:	f43f ae8a 	beq.w	42b484 <__gxx_personality_v0+0x1c>
  42b770:	9b04      	ldr	r3, [sp, #16]
  42b772:	07d8      	lsls	r0, r3, #31
  42b774:	f53f ae86 	bmi.w	42b484 <__gxx_personality_v0+0x1c>
  42b778:	2400      	movs	r4, #0
  42b77a:	2502      	movs	r5, #2
  42b77c:	e752      	b.n	42b624 <__gxx_personality_v0+0x1bc>
  42b77e:	2900      	cmp	r1, #0
  42b780:	dc21      	bgt.n	42b7c6 <__gxx_personality_v0+0x35e>
  42b782:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
  42b786:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  42b788:	1a5b      	subs	r3, r3, r1
  42b78a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
  42b78e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
  42b792:	b10f      	cbz	r7, 42b798 <__gxx_personality_v0+0x330>
  42b794:	9b08      	ldr	r3, [sp, #32]
  42b796:	b12b      	cbz	r3, 42b7a4 <__gxx_personality_v0+0x33c>
  42b798:	2900      	cmp	r1, #0
  42b79a:	d1e1      	bne.n	42b760 <__gxx_personality_v0+0x2f8>
  42b79c:	e9dd a606 	ldrd	sl, r6, [sp, #24]
  42b7a0:	2303      	movs	r3, #3
  42b7a2:	e6ef      	b.n	42b584 <__gxx_personality_v0+0x11c>
  42b7a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  42b7a6:	930d      	str	r3, [sp, #52]	@ 0x34
  42b7a8:	b921      	cbnz	r1, 42b7b4 <__gxx_personality_v0+0x34c>
  42b7aa:	e7f7      	b.n	42b79c <__gxx_personality_v0+0x334>
  42b7ac:	f856 1f04 	ldr.w	r1, [r6, #4]!
  42b7b0:	2900      	cmp	r1, #0
  42b7b2:	d0f3      	beq.n	42b79c <__gxx_personality_v0+0x334>
  42b7b4:	4431      	add	r1, r6
  42b7b6:	4643      	mov	r3, r8
  42b7b8:	2200      	movs	r2, #0
  42b7ba:	4638      	mov	r0, r7
  42b7bc:	f7ff fcac 	bl	42b118 <__cxa_type_match>
  42b7c0:	2800      	cmp	r0, #0
  42b7c2:	d0f3      	beq.n	42b7ac <__gxx_personality_v0+0x344>
  42b7c4:	e7cc      	b.n	42b760 <__gxx_personality_v0+0x2f8>
  42b7c6:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
  42b7ca:	d044      	beq.n	42b856 <__gxx_personality_v0+0x3ee>
  42b7cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  42b7ce:	2a04      	cmp	r2, #4
  42b7d0:	d856      	bhi.n	42b880 <__gxx_personality_v0+0x418>
  42b7d2:	e8df f002 	tbb	[pc, r2]
  42b7d6:	5503      	.short	0x5503
  42b7d8:	031c      	.short	0x031c
  42b7da:	19          	.byte	0x19
  42b7db:	00          	.byte	0x00
  42b7dc:	008b      	lsls	r3, r1, #2
  42b7de:	425b      	negs	r3, r3
  42b7e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  42b7e2:	4658      	mov	r0, fp
  42b7e4:	9905      	ldr	r1, [sp, #20]
  42b7e6:	441a      	add	r2, r3
  42b7e8:	4643      	mov	r3, r8
  42b7ea:	f7ff fd73 	bl	42b2d4 <_ZL28read_encoded_value_with_basehjPKhPj>
  42b7ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
  42b7f0:	2900      	cmp	r1, #0
  42b7f2:	d0d3      	beq.n	42b79c <__gxx_personality_v0+0x334>
  42b7f4:	2f00      	cmp	r7, #0
  42b7f6:	d0b3      	beq.n	42b760 <__gxx_personality_v0+0x2f8>
  42b7f8:	ab0a      	add	r3, sp, #40	@ 0x28
  42b7fa:	2200      	movs	r2, #0
  42b7fc:	4638      	mov	r0, r7
  42b7fe:	f7ff fc8b 	bl	42b118 <__cxa_type_match>
  42b802:	2800      	cmp	r0, #0
  42b804:	d0ac      	beq.n	42b760 <__gxx_personality_v0+0x2f8>
  42b806:	e7c9      	b.n	42b79c <__gxx_personality_v0+0x334>
  42b808:	00cb      	lsls	r3, r1, #3
  42b80a:	425b      	negs	r3, r3
  42b80c:	e7e8      	b.n	42b7e0 <__gxx_personality_v0+0x378>
  42b80e:	004b      	lsls	r3, r1, #1
  42b810:	425b      	negs	r3, r3
  42b812:	e7e5      	b.n	42b7e0 <__gxx_personality_v0+0x378>
  42b814:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
  42b818:	4630      	mov	r0, r6
  42b81a:	f7ff fddd 	bl	42b3d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  42b81e:	4631      	mov	r1, r6
  42b820:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
  42b824:	f7ff fdb6 	bl	42b394 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  42b828:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
  42b82c:	4605      	mov	r5, r0
  42b82e:	9811      	ldr	r0, [sp, #68]	@ 0x44
  42b830:	1b12      	subs	r2, r2, r4
  42b832:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
  42b836:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  42b83a:	b133      	cbz	r3, 42b84a <__gxx_personality_v0+0x3e2>
  42b83c:	4602      	mov	r2, r0
  42b83e:	2300      	movs	r3, #0
  42b840:	f852 1f04 	ldr.w	r1, [r2, #4]!
  42b844:	3301      	adds	r3, #1
  42b846:	2900      	cmp	r1, #0
  42b848:	d1fa      	bne.n	42b840 <__gxx_personality_v0+0x3d8>
  42b84a:	6378      	str	r0, [r7, #52]	@ 0x34
  42b84c:	e9c7 350a 	strd	r3, r5, [r7, #40]	@ 0x28
  42b850:	2304      	movs	r3, #4
  42b852:	633b      	str	r3, [r7, #48]	@ 0x30
  42b854:	e6e5      	b.n	42b622 <__gxx_personality_v0+0x1ba>
  42b856:	2300      	movs	r3, #0
  42b858:	e7c2      	b.n	42b7e0 <__gxx_personality_v0+0x378>
  42b85a:	f1ba 0f00 	cmp.w	sl, #0
  42b85e:	d187      	bne.n	42b770 <__gxx_personality_v0+0x308>
  42b860:	e610      	b.n	42b484 <__gxx_personality_v0+0x1c>
  42b862:	79fb      	ldrb	r3, [r7, #7]
  42b864:	2b01      	cmp	r3, #1
  42b866:	bf0c      	ite	eq
  42b868:	f857 3c20 	ldreq.w	r3, [r7, #-32]
  42b86c:	f107 0358 	addne.w	r3, r7, #88	@ 0x58
  42b870:	930a      	str	r3, [sp, #40]	@ 0x28
  42b872:	e723      	b.n	42b6bc <__gxx_personality_v0+0x254>
  42b874:	f000 f81e 	bl	42b8b4 <_ZSt10unexpectedv>
  42b878:	f006 fe3e 	bl	4324f8 <__cxa_begin_catch>
  42b87c:	f000 f80e 	bl	42b89c <_ZSt9terminatev>
  42b880:	f7f3 fc8a 	bl	41f198 <abort>
  42b884:	43554e47 	.word	0x43554e47
  42b888:	00524f46 	.word	0x00524f46

0042b88c <_ZN10__cxxabiv111__terminateEPFvvE>:
  42b88c:	b508      	push	{r3, lr}
  42b88e:	4780      	blx	r0
  42b890:	f7f3 fc82 	bl	41f198 <abort>
  42b894:	f006 fe30 	bl	4324f8 <__cxa_begin_catch>
  42b898:	f7f3 fc7e 	bl	41f198 <abort>

0042b89c <_ZSt9terminatev>:
  42b89c:	b508      	push	{r3, lr}
  42b89e:	4b02      	ldr	r3, [pc, #8]	@ (42b8a8 <_ZSt9terminatev+0xc>)
  42b8a0:	e8d3 0faf 	lda	r0, [r3]
  42b8a4:	f7ff fff2 	bl	42b88c <_ZN10__cxxabiv111__terminateEPFvvE>
  42b8a8:	2000aa48 	.word	0x2000aa48

0042b8ac <_ZN10__cxxabiv112__unexpectedEPFvvE>:
  42b8ac:	b508      	push	{r3, lr}
  42b8ae:	4780      	blx	r0
  42b8b0:	f7ff fff4 	bl	42b89c <_ZSt9terminatev>

0042b8b4 <_ZSt10unexpectedv>:
  42b8b4:	b508      	push	{r3, lr}
  42b8b6:	4b02      	ldr	r3, [pc, #8]	@ (42b8c0 <_ZSt10unexpectedv+0xc>)
  42b8b8:	e8d3 0faf 	lda	r0, [r3]
  42b8bc:	f7ff fff6 	bl	42b8ac <_ZN10__cxxabiv112__unexpectedEPFvvE>
  42b8c0:	2000aa44 	.word	0x2000aa44

0042b8c4 <_ZSt13get_terminatev>:
  42b8c4:	4b01      	ldr	r3, [pc, #4]	@ (42b8cc <_ZSt13get_terminatev+0x8>)
  42b8c6:	e8d3 0faf 	lda	r0, [r3]
  42b8ca:	4770      	bx	lr
  42b8cc:	2000aa48 	.word	0x2000aa48

0042b8d0 <_ZSt14get_unexpectedv>:
  42b8d0:	4b01      	ldr	r3, [pc, #4]	@ (42b8d8 <_ZSt14get_unexpectedv+0x8>)
  42b8d2:	e8d3 0faf 	lda	r0, [r3]
  42b8d6:	4770      	bx	lr
  42b8d8:	2000aa44 	.word	0x2000aa44

0042b8dc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
  42b8dc:	2801      	cmp	r0, #1
  42b8de:	b510      	push	{r4, lr}
  42b8e0:	d816      	bhi.n	42b910 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x34>
  42b8e2:	f1a1 0328 	sub.w	r3, r1, #40	@ 0x28
  42b8e6:	e8d3 2fef 	ldaex	r2, [r3]
  42b8ea:	3a01      	subs	r2, #1
  42b8ec:	e8c3 2fe0 	stlex	r0, r2, [r3]
  42b8f0:	2800      	cmp	r0, #0
  42b8f2:	d1f8      	bne.n	42b8e6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xa>
  42b8f4:	b95a      	cbnz	r2, 42b90e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x32>
  42b8f6:	f851 3c1c 	ldr.w	r3, [r1, #-28]
  42b8fa:	f101 0458 	add.w	r4, r1, #88	@ 0x58
  42b8fe:	b10b      	cbz	r3, 42b904 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x28>
  42b900:	4620      	mov	r0, r4
  42b902:	4798      	blx	r3
  42b904:	4620      	mov	r0, r4
  42b906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  42b90a:	f7ff bb6f 	b.w	42afec <__cxa_free_exception>
  42b90e:	bd10      	pop	{r4, pc}
  42b910:	f851 0c14 	ldr.w	r0, [r1, #-20]
  42b914:	f7ff ffba 	bl	42b88c <_ZN10__cxxabiv111__terminateEPFvvE>

0042b918 <__cxa_init_primary_exception>:
  42b918:	2300      	movs	r3, #0
  42b91a:	b510      	push	{r4, lr}
  42b91c:	4604      	mov	r4, r0
  42b91e:	f840 3c80 	str.w	r3, [r0, #-128]
  42b922:	e940 121e 	strd	r1, r2, [r0, #-120]	@ 0x78
  42b926:	f7ff ffd3 	bl	42b8d0 <_ZSt14get_unexpectedv>
  42b92a:	f844 0c70 	str.w	r0, [r4, #-112]
  42b92e:	f7ff ffc9 	bl	42b8c4 <_ZSt13get_terminatev>
  42b932:	4907      	ldr	r1, [pc, #28]	@ (42b950 <__cxa_init_primary_exception+0x38>)
  42b934:	4a07      	ldr	r2, [pc, #28]	@ (42b954 <__cxa_init_primary_exception+0x3c>)
  42b936:	4b08      	ldr	r3, [pc, #32]	@ (42b958 <__cxa_init_primary_exception+0x40>)
  42b938:	f844 0c6c 	str.w	r0, [r4, #-108]
  42b93c:	f1a4 0080 	sub.w	r0, r4, #128	@ 0x80
  42b940:	f844 1c58 	str.w	r1, [r4, #-88]
  42b944:	f844 2c54 	str.w	r2, [r4, #-84]
  42b948:	f844 3c50 	str.w	r3, [r4, #-80]
  42b94c:	bd10      	pop	{r4, pc}
  42b94e:	bf00      	nop
  42b950:	43554e47 	.word	0x43554e47
  42b954:	002b2b43 	.word	0x002b2b43
  42b958:	0042b8dd 	.word	0x0042b8dd

0042b95c <__cxa_throw>:
  42b95c:	b570      	push	{r4, r5, r6, lr}
  42b95e:	4604      	mov	r4, r0
  42b960:	460d      	mov	r5, r1
  42b962:	4616      	mov	r6, r2
  42b964:	f7ff fcb2 	bl	42b2cc <__cxa_get_globals>
  42b968:	4603      	mov	r3, r0
  42b96a:	4620      	mov	r0, r4
  42b96c:	4632      	mov	r2, r6
  42b96e:	4629      	mov	r1, r5
  42b970:	685c      	ldr	r4, [r3, #4]
  42b972:	3401      	adds	r4, #1
  42b974:	605c      	str	r4, [r3, #4]
  42b976:	f7ff ffcf 	bl	42b918 <__cxa_init_primary_exception>
  42b97a:	2301      	movs	r3, #1
  42b97c:	4604      	mov	r4, r0
  42b97e:	f844 3b28 	str.w	r3, [r4], #40
  42b982:	4620      	mov	r0, r4
  42b984:	f7e5 f91a 	bl	410bbc <_Unwind_RaiseException>
  42b988:	4620      	mov	r0, r4
  42b98a:	f006 fdb5 	bl	4324f8 <__cxa_begin_catch>
  42b98e:	f7ff ff85 	bl	42b89c <_ZSt9terminatev>
  42b992:	bf00      	nop

0042b994 <__cxa_rethrow>:
  42b994:	b510      	push	{r4, lr}
  42b996:	f7ff fc99 	bl	42b2cc <__cxa_get_globals>
  42b99a:	e9d0 4200 	ldrd	r4, r2, [r0]
  42b99e:	3201      	adds	r2, #1
  42b9a0:	6042      	str	r2, [r0, #4]
  42b9a2:	b164      	cbz	r4, 42b9be <__cxa_rethrow+0x2a>
  42b9a4:	f894 2020 	ldrb.w	r2, [r4, #32]
  42b9a8:	2a47      	cmp	r2, #71	@ 0x47
  42b9aa:	d00a      	beq.n	42b9c2 <__cxa_rethrow+0x2e>
  42b9ac:	2200      	movs	r2, #0
  42b9ae:	6002      	str	r2, [r0, #0]
  42b9b0:	3420      	adds	r4, #32
  42b9b2:	4620      	mov	r0, r4
  42b9b4:	f7e5 f926 	bl	410c04 <_Unwind_Resume_or_Rethrow>
  42b9b8:	4620      	mov	r0, r4
  42b9ba:	f006 fd9d 	bl	4324f8 <__cxa_begin_catch>
  42b9be:	f7ff ff6d 	bl	42b89c <_ZSt9terminatev>
  42b9c2:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
  42b9c6:	2a4e      	cmp	r2, #78	@ 0x4e
  42b9c8:	d1f0      	bne.n	42b9ac <__cxa_rethrow+0x18>
  42b9ca:	f894 2022 	ldrb.w	r2, [r4, #34]	@ 0x22
  42b9ce:	2a55      	cmp	r2, #85	@ 0x55
  42b9d0:	d1ec      	bne.n	42b9ac <__cxa_rethrow+0x18>
  42b9d2:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
  42b9d6:	2a43      	cmp	r2, #67	@ 0x43
  42b9d8:	d1e8      	bne.n	42b9ac <__cxa_rethrow+0x18>
  42b9da:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
  42b9de:	2a43      	cmp	r2, #67	@ 0x43
  42b9e0:	d1e4      	bne.n	42b9ac <__cxa_rethrow+0x18>
  42b9e2:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
  42b9e6:	2a2b      	cmp	r2, #43	@ 0x2b
  42b9e8:	d1e0      	bne.n	42b9ac <__cxa_rethrow+0x18>
  42b9ea:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
  42b9ee:	2a2b      	cmp	r2, #43	@ 0x2b
  42b9f0:	d1dc      	bne.n	42b9ac <__cxa_rethrow+0x18>
  42b9f2:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
  42b9f6:	2a01      	cmp	r2, #1
  42b9f8:	d8d8      	bhi.n	42b9ac <__cxa_rethrow+0x18>
  42b9fa:	6962      	ldr	r2, [r4, #20]
  42b9fc:	4252      	negs	r2, r2
  42b9fe:	6162      	str	r2, [r4, #20]
  42ba00:	e7d6      	b.n	42b9b0 <__cxa_rethrow+0x1c>
  42ba02:	bf00      	nop

0042ba04 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
  42ba04:	4b03      	ldr	r3, [pc, #12]	@ (42ba14 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
  42ba06:	b510      	push	{r4, lr}
  42ba08:	4604      	mov	r4, r0
  42ba0a:	6003      	str	r3, [r0, #0]
  42ba0c:	f7ff f9dc 	bl	42adc8 <_ZNSt9type_infoD1Ev>
  42ba10:	4620      	mov	r0, r4
  42ba12:	bd10      	pop	{r4, pc}
  42ba14:	0043cce0 	.word	0x0043cce0

0042ba18 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
  42ba18:	4b05      	ldr	r3, [pc, #20]	@ (42ba30 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
  42ba1a:	b510      	push	{r4, lr}
  42ba1c:	4604      	mov	r4, r0
  42ba1e:	6003      	str	r3, [r0, #0]
  42ba20:	f7ff f9d2 	bl	42adc8 <_ZNSt9type_infoD1Ev>
  42ba24:	2108      	movs	r1, #8
  42ba26:	4620      	mov	r0, r4
  42ba28:	f7fc fd70 	bl	42850c <_ZdlPvj>
  42ba2c:	4620      	mov	r0, r4
  42ba2e:	bd10      	pop	{r4, pc}
  42ba30:	0043cce0 	.word	0x0043cce0

0042ba34 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
  42ba34:	68c0      	ldr	r0, [r0, #12]
  42ba36:	3302      	adds	r3, #2
  42ba38:	68c9      	ldr	r1, [r1, #12]
  42ba3a:	b410      	push	{r4}
  42ba3c:	6804      	ldr	r4, [r0, #0]
  42ba3e:	6924      	ldr	r4, [r4, #16]
  42ba40:	46a4      	mov	ip, r4
  42ba42:	f85d 4b04 	ldr.w	r4, [sp], #4
  42ba46:	4760      	bx	ip

0042ba48 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
  42ba48:	4b03      	ldr	r3, [pc, #12]	@ (42ba58 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
  42ba4a:	b510      	push	{r4, lr}
  42ba4c:	4604      	mov	r4, r0
  42ba4e:	6003      	str	r3, [r0, #0]
  42ba50:	f7ff f9ba 	bl	42adc8 <_ZNSt9type_infoD1Ev>
  42ba54:	4620      	mov	r0, r4
  42ba56:	bd10      	pop	{r4, pc}
  42ba58:	0043cd48 	.word	0x0043cd48

0042ba5c <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
  42ba5c:	4b05      	ldr	r3, [pc, #20]	@ (42ba74 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
  42ba5e:	b510      	push	{r4, lr}
  42ba60:	4604      	mov	r4, r0
  42ba62:	6003      	str	r3, [r0, #0]
  42ba64:	f7ff f9b0 	bl	42adc8 <_ZNSt9type_infoD1Ev>
  42ba68:	2110      	movs	r1, #16
  42ba6a:	4620      	mov	r0, r4
  42ba6c:	f7fc fd4e 	bl	42850c <_ZdlPvj>
  42ba70:	4620      	mov	r0, r4
  42ba72:	bd10      	pop	{r4, pc}
  42ba74:	0043cd48 	.word	0x0043cd48

0042ba78 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
  42ba78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  42ba7c:	4607      	mov	r7, r0
  42ba7e:	4690      	mov	r8, r2
  42ba80:	4699      	mov	r9, r3
  42ba82:	460e      	mov	r6, r1
  42ba84:	f7ff f9bc 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42ba88:	b118      	cbz	r0, 42ba92 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
  42ba8a:	2501      	movs	r5, #1
  42ba8c:	4628      	mov	r0, r5
  42ba8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42ba92:	4604      	mov	r4, r0
  42ba94:	4605      	mov	r5, r0
  42ba96:	4931      	ldr	r1, [pc, #196]	@ (42bb5c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe4>)
  42ba98:	4630      	mov	r0, r6
  42ba9a:	f7ff f9b1 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42ba9e:	b150      	cbz	r0, 42bab6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x3e>
  42baa0:	683b      	ldr	r3, [r7, #0]
  42baa2:	492f      	ldr	r1, [pc, #188]	@ (42bb60 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe8>)
  42baa4:	f853 0c04 	ldr.w	r0, [r3, #-4]
  42baa8:	f7ff f9aa 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42baac:	2800      	cmp	r0, #0
  42baae:	d033      	beq.n	42bb18 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xa0>
  42bab0:	f8c8 4000 	str.w	r4, [r8]
  42bab4:	e7e9      	b.n	42ba8a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x12>
  42bab6:	6833      	ldr	r3, [r6, #0]
  42bab8:	f853 1c04 	ldr.w	r1, [r3, #-4]
  42babc:	683b      	ldr	r3, [r7, #0]
  42babe:	f853 0c04 	ldr.w	r0, [r3, #-4]
  42bac2:	f7ff f99d 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42bac6:	2800      	cmp	r0, #0
  42bac8:	d037      	beq.n	42bb3a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc2>
  42baca:	f019 0f01 	tst.w	r9, #1
  42bace:	d0dd      	beq.n	42ba8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
  42bad0:	68b2      	ldr	r2, [r6, #8]
  42bad2:	68b9      	ldr	r1, [r7, #8]
  42bad4:	f002 0060 	and.w	r0, r2, #96	@ 0x60
  42bad8:	f001 0360 	and.w	r3, r1, #96	@ 0x60
  42badc:	ea30 0403 	bics.w	r4, r0, r3
  42bae0:	bf18      	it	ne
  42bae2:	401a      	andne	r2, r3
  42bae4:	ea23 0300 	bic.w	r3, r3, r0
  42bae8:	ea22 0201 	bic.w	r2, r2, r1
  42baec:	4313      	orrs	r3, r2
  42baee:	d1cd      	bne.n	42ba8c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
  42baf0:	07cb      	lsls	r3, r1, #31
  42baf2:	683b      	ldr	r3, [r7, #0]
  42baf4:	699c      	ldr	r4, [r3, #24]
  42baf6:	bf58      	it	pl
  42baf8:	f029 0901 	bicpl.w	r9, r9, #1
  42bafc:	4b19      	ldr	r3, [pc, #100]	@ (42bb64 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xec>)
  42bafe:	429c      	cmp	r4, r3
  42bb00:	d123      	bne.n	42bb4a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xd2>
  42bb02:	68f8      	ldr	r0, [r7, #12]
  42bb04:	f109 0302 	add.w	r3, r9, #2
  42bb08:	4642      	mov	r2, r8
  42bb0a:	68f1      	ldr	r1, [r6, #12]
  42bb0c:	6804      	ldr	r4, [r0, #0]
  42bb0e:	6924      	ldr	r4, [r4, #16]
  42bb10:	46a4      	mov	ip, r4
  42bb12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  42bb16:	4760      	bx	ip
  42bb18:	683b      	ldr	r3, [r7, #0]
  42bb1a:	4913      	ldr	r1, [pc, #76]	@ (42bb68 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf0>)
  42bb1c:	f853 0c04 	ldr.w	r0, [r3, #-4]
  42bb20:	f7ff f96e 	bl	42ae00 <_ZNKSt9type_info7__equalERKS_>
  42bb24:	2800      	cmp	r0, #0
  42bb26:	d0c6      	beq.n	42bab6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x3e>
  42bb28:	68f8      	ldr	r0, [r7, #12]
  42bb2a:	6803      	ldr	r3, [r0, #0]
  42bb2c:	68db      	ldr	r3, [r3, #12]
  42bb2e:	4798      	blx	r3
  42bb30:	b138      	cbz	r0, 42bb42 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xca>
  42bb32:	4b0e      	ldr	r3, [pc, #56]	@ (42bb6c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf4>)
  42bb34:	f8c8 3000 	str.w	r3, [r8]
  42bb38:	e7a7      	b.n	42ba8a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x12>
  42bb3a:	4605      	mov	r5, r0
  42bb3c:	4628      	mov	r0, r5
  42bb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42bb42:	4b0b      	ldr	r3, [pc, #44]	@ (42bb70 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf8>)
  42bb44:	f8c8 3000 	str.w	r3, [r8]
  42bb48:	e79f      	b.n	42ba8a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x12>
  42bb4a:	464b      	mov	r3, r9
  42bb4c:	4642      	mov	r2, r8
  42bb4e:	4631      	mov	r1, r6
  42bb50:	4638      	mov	r0, r7
  42bb52:	46a4      	mov	ip, r4
  42bb54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  42bb58:	4760      	bx	ip
  42bb5a:	bf00      	nop
  42bb5c:	0043ccfc 	.word	0x0043ccfc
  42bb60:	0043cb24 	.word	0x0043cb24
  42bb64:	0042ba35 	.word	0x0042ba35
  42bb68:	0043cda0 	.word	0x0043cda0
  42bb6c:	0043cd68 	.word	0x0043cd68
  42bb70:	0043cd64 	.word	0x0043cd64

0042bb74 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
  42bb74:	4b3b      	ldr	r3, [pc, #236]	@ (42bc64 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf0>)
  42bb76:	781a      	ldrb	r2, [r3, #0]
  42bb78:	b570      	push	{r4, r5, r6, lr}
  42bb7a:	b082      	sub	sp, #8
  42bb7c:	2a00      	cmp	r2, #0
  42bb7e:	d141      	bne.n	42bc04 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
  42bb80:	2401      	movs	r4, #1
  42bb82:	701c      	strb	r4, [r3, #0]
  42bb84:	f006 fd3a 	bl	4325fc <__cxa_current_exception_type>
  42bb88:	2800      	cmp	r0, #0
  42bb8a:	d031      	beq.n	42bbf0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7c>
  42bb8c:	6844      	ldr	r4, [r0, #4]
  42bb8e:	2200      	movs	r2, #0
  42bb90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  42bb94:	4d34      	ldr	r5, [pc, #208]	@ (42bc68 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
  42bb96:	7823      	ldrb	r3, [r4, #0]
  42bb98:	4611      	mov	r1, r2
  42bb9a:	9001      	str	r0, [sp, #4]
  42bb9c:	2b2a      	cmp	r3, #42	@ 0x2a
  42bb9e:	ab01      	add	r3, sp, #4
  42bba0:	bf08      	it	eq
  42bba2:	3401      	addeq	r4, #1
  42bba4:	4620      	mov	r0, r4
  42bba6:	f006 fbaf 	bl	432308 <__cxa_demangle>
  42bbaa:	682b      	ldr	r3, [r5, #0]
  42bbac:	2230      	movs	r2, #48	@ 0x30
  42bbae:	2101      	movs	r1, #1
  42bbb0:	68db      	ldr	r3, [r3, #12]
  42bbb2:	4606      	mov	r6, r0
  42bbb4:	482d      	ldr	r0, [pc, #180]	@ (42bc6c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
  42bbb6:	f006 fedb 	bl	432970 <fwrite>
  42bbba:	9b01      	ldr	r3, [sp, #4]
  42bbbc:	b193      	cbz	r3, 42bbe4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x70>
  42bbbe:	682b      	ldr	r3, [r5, #0]
  42bbc0:	4620      	mov	r0, r4
  42bbc2:	68d9      	ldr	r1, [r3, #12]
  42bbc4:	f006 fe7c 	bl	4328c0 <fputs>
  42bbc8:	682b      	ldr	r3, [r5, #0]
  42bbca:	2202      	movs	r2, #2
  42bbcc:	2101      	movs	r1, #1
  42bbce:	4828      	ldr	r0, [pc, #160]	@ (42bc70 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
  42bbd0:	68db      	ldr	r3, [r3, #12]
  42bbd2:	f006 fecd 	bl	432970 <fwrite>
  42bbd6:	9b01      	ldr	r3, [sp, #4]
  42bbd8:	b913      	cbnz	r3, 42bbe0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
  42bbda:	4630      	mov	r0, r6
  42bbdc:	f006 fd32 	bl	432644 <free>
  42bbe0:	f7ff fed8 	bl	42b994 <__cxa_rethrow>
  42bbe4:	682b      	ldr	r3, [r5, #0]
  42bbe6:	4630      	mov	r0, r6
  42bbe8:	68d9      	ldr	r1, [r3, #12]
  42bbea:	f006 fe69 	bl	4328c0 <fputs>
  42bbee:	e7eb      	b.n	42bbc8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x54>
  42bbf0:	4b1d      	ldr	r3, [pc, #116]	@ (42bc68 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
  42bbf2:	222d      	movs	r2, #45	@ 0x2d
  42bbf4:	4621      	mov	r1, r4
  42bbf6:	481f      	ldr	r0, [pc, #124]	@ (42bc74 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
  42bbf8:	681b      	ldr	r3, [r3, #0]
  42bbfa:	68db      	ldr	r3, [r3, #12]
  42bbfc:	f006 feb8 	bl	432970 <fwrite>
  42bc00:	f7f3 faca 	bl	41f198 <abort>
  42bc04:	4b18      	ldr	r3, [pc, #96]	@ (42bc68 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
  42bc06:	221d      	movs	r2, #29
  42bc08:	2101      	movs	r1, #1
  42bc0a:	481b      	ldr	r0, [pc, #108]	@ (42bc78 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
  42bc0c:	681b      	ldr	r3, [r3, #0]
  42bc0e:	68db      	ldr	r3, [r3, #12]
  42bc10:	f006 feae 	bl	432970 <fwrite>
  42bc14:	f7f3 fac0 	bl	41f198 <abort>
  42bc18:	2901      	cmp	r1, #1
  42bc1a:	460c      	mov	r4, r1
  42bc1c:	d119      	bne.n	42bc52 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xde>
  42bc1e:	f006 fc6b 	bl	4324f8 <__cxa_begin_catch>
  42bc22:	6803      	ldr	r3, [r0, #0]
  42bc24:	689b      	ldr	r3, [r3, #8]
  42bc26:	4798      	blx	r3
  42bc28:	682b      	ldr	r3, [r5, #0]
  42bc2a:	4621      	mov	r1, r4
  42bc2c:	220b      	movs	r2, #11
  42bc2e:	4604      	mov	r4, r0
  42bc30:	68db      	ldr	r3, [r3, #12]
  42bc32:	4812      	ldr	r0, [pc, #72]	@ (42bc7c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
  42bc34:	f006 fe9c 	bl	432970 <fwrite>
  42bc38:	682b      	ldr	r3, [r5, #0]
  42bc3a:	4620      	mov	r0, r4
  42bc3c:	68d9      	ldr	r1, [r3, #12]
  42bc3e:	f006 fe3f 	bl	4328c0 <fputs>
  42bc42:	682b      	ldr	r3, [r5, #0]
  42bc44:	200a      	movs	r0, #10
  42bc46:	68d9      	ldr	r1, [r3, #12]
  42bc48:	f006 fdce 	bl	4327e8 <fputc>
  42bc4c:	f006 fc92 	bl	432574 <__cxa_end_catch>
  42bc50:	e7d6      	b.n	42bc00 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
  42bc52:	f006 fc51 	bl	4324f8 <__cxa_begin_catch>
  42bc56:	f006 fc8d 	bl	432574 <__cxa_end_catch>
  42bc5a:	e7d1      	b.n	42bc00 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
  42bc5c:	f006 fc8a 	bl	432574 <__cxa_end_catch>
  42bc60:	f7ff fa54 	bl	42b10c <__cxa_end_cleanup>
  42bc64:	2004e92c 	.word	0x2004e92c
  42bc68:	2000a4d8 	.word	0x2000a4d8
  42bc6c:	0043508c 	.word	0x0043508c
  42bc70:	004350c0 	.word	0x004350c0
  42bc74:	004350c4 	.word	0x004350c4
  42bc78:	0043506c 	.word	0x0043506c
  42bc7c:	004350f4 	.word	0x004350f4

0042bc80 <_ZNKSt11logic_error4whatEv>:
  42bc80:	6840      	ldr	r0, [r0, #4]
  42bc82:	4770      	bx	lr

0042bc84 <_ZNSt11logic_errorD1Ev>:
  42bc84:	490d      	ldr	r1, [pc, #52]	@ (42bcbc <_ZNSt11logic_errorD1Ev+0x38>)
  42bc86:	6843      	ldr	r3, [r0, #4]
  42bc88:	4a0d      	ldr	r2, [pc, #52]	@ (42bcc0 <_ZNSt11logic_errorD1Ev+0x3c>)
  42bc8a:	b510      	push	{r4, lr}
  42bc8c:	4604      	mov	r4, r0
  42bc8e:	6001      	str	r1, [r0, #0]
  42bc90:	f1a3 000c 	sub.w	r0, r3, #12
  42bc94:	b082      	sub	sp, #8
  42bc96:	4290      	cmp	r0, r2
  42bc98:	d105      	bne.n	42bca6 <_ZNSt11logic_errorD1Ev+0x22>
  42bc9a:	4620      	mov	r0, r4
  42bc9c:	f7ff fafe 	bl	42b29c <_ZNSt9exceptionD1Ev>
  42bca0:	4620      	mov	r0, r4
  42bca2:	b002      	add	sp, #8
  42bca4:	bd10      	pop	{r4, pc}
  42bca6:	f853 2c04 	ldr.w	r2, [r3, #-4]
  42bcaa:	1e51      	subs	r1, r2, #1
  42bcac:	2a00      	cmp	r2, #0
  42bcae:	f843 1c04 	str.w	r1, [r3, #-4]
  42bcb2:	dcf2      	bgt.n	42bc9a <_ZNSt11logic_errorD1Ev+0x16>
  42bcb4:	a901      	add	r1, sp, #4
  42bcb6:	f000 f8e1 	bl	42be7c <_ZNSs4_Rep10_M_destroyERKSaIcE>
  42bcba:	e7ee      	b.n	42bc9a <_ZNSt11logic_errorD1Ev+0x16>
  42bcbc:	0043cdf0 	.word	0x0043cdf0
  42bcc0:	2004e930 	.word	0x2004e930

0042bcc4 <_ZNSt12length_errorD1Ev>:
  42bcc4:	490d      	ldr	r1, [pc, #52]	@ (42bcfc <_ZNSt12length_errorD1Ev+0x38>)
  42bcc6:	6843      	ldr	r3, [r0, #4]
  42bcc8:	4a0d      	ldr	r2, [pc, #52]	@ (42bd00 <_ZNSt12length_errorD1Ev+0x3c>)
  42bcca:	b510      	push	{r4, lr}
  42bccc:	4604      	mov	r4, r0
  42bcce:	6001      	str	r1, [r0, #0]
  42bcd0:	f1a3 000c 	sub.w	r0, r3, #12
  42bcd4:	b082      	sub	sp, #8
  42bcd6:	4290      	cmp	r0, r2
  42bcd8:	d105      	bne.n	42bce6 <_ZNSt12length_errorD1Ev+0x22>
  42bcda:	4620      	mov	r0, r4
  42bcdc:	f7ff fade 	bl	42b29c <_ZNSt9exceptionD1Ev>
  42bce0:	4620      	mov	r0, r4
  42bce2:	b002      	add	sp, #8
  42bce4:	bd10      	pop	{r4, pc}
  42bce6:	f853 2c04 	ldr.w	r2, [r3, #-4]
  42bcea:	1e51      	subs	r1, r2, #1
  42bcec:	2a00      	cmp	r2, #0
  42bcee:	f843 1c04 	str.w	r1, [r3, #-4]
  42bcf2:	dcf2      	bgt.n	42bcda <_ZNSt12length_errorD1Ev+0x16>
  42bcf4:	a901      	add	r1, sp, #4
  42bcf6:	f000 f8c1 	bl	42be7c <_ZNSs4_Rep10_M_destroyERKSaIcE>
  42bcfa:	e7ee      	b.n	42bcda <_ZNSt12length_errorD1Ev+0x16>
  42bcfc:	0043cdf0 	.word	0x0043cdf0
  42bd00:	2004e930 	.word	0x2004e930

0042bd04 <_ZNSt11logic_errorD0Ev>:
  42bd04:	490f      	ldr	r1, [pc, #60]	@ (42bd44 <_ZNSt11logic_errorD0Ev+0x40>)
  42bd06:	6843      	ldr	r3, [r0, #4]
  42bd08:	4a0f      	ldr	r2, [pc, #60]	@ (42bd48 <_ZNSt11logic_errorD0Ev+0x44>)
  42bd0a:	b510      	push	{r4, lr}
  42bd0c:	4604      	mov	r4, r0
  42bd0e:	6001      	str	r1, [r0, #0]
  42bd10:	f1a3 000c 	sub.w	r0, r3, #12
  42bd14:	b082      	sub	sp, #8
  42bd16:	4290      	cmp	r0, r2
  42bd18:	d108      	bne.n	42bd2c <_ZNSt11logic_errorD0Ev+0x28>
  42bd1a:	4620      	mov	r0, r4
  42bd1c:	f7ff fabe 	bl	42b29c <_ZNSt9exceptionD1Ev>
  42bd20:	4620      	mov	r0, r4
  42bd22:	f7fc fbf1 	bl	428508 <_ZdlPv>
  42bd26:	4620      	mov	r0, r4
  42bd28:	b002      	add	sp, #8
  42bd2a:	bd10      	pop	{r4, pc}
  42bd2c:	f853 2c04 	ldr.w	r2, [r3, #-4]
  42bd30:	1e51      	subs	r1, r2, #1
  42bd32:	2a00      	cmp	r2, #0
  42bd34:	f843 1c04 	str.w	r1, [r3, #-4]
  42bd38:	dcef      	bgt.n	42bd1a <_ZNSt11logic_errorD0Ev+0x16>
  42bd3a:	a901      	add	r1, sp, #4
  42bd3c:	f000 f89e 	bl	42be7c <_ZNSs4_Rep10_M_destroyERKSaIcE>
  42bd40:	e7eb      	b.n	42bd1a <_ZNSt11logic_errorD0Ev+0x16>
  42bd42:	bf00      	nop
  42bd44:	0043cdf0 	.word	0x0043cdf0
  42bd48:	2004e930 	.word	0x2004e930

0042bd4c <_ZNSt12length_errorD0Ev>:
  42bd4c:	490f      	ldr	r1, [pc, #60]	@ (42bd8c <_ZNSt12length_errorD0Ev+0x40>)
  42bd4e:	6843      	ldr	r3, [r0, #4]
  42bd50:	4a0f      	ldr	r2, [pc, #60]	@ (42bd90 <_ZNSt12length_errorD0Ev+0x44>)
  42bd52:	b510      	push	{r4, lr}
  42bd54:	4604      	mov	r4, r0
  42bd56:	6001      	str	r1, [r0, #0]
  42bd58:	f1a3 000c 	sub.w	r0, r3, #12
  42bd5c:	b082      	sub	sp, #8
  42bd5e:	4290      	cmp	r0, r2
  42bd60:	d108      	bne.n	42bd74 <_ZNSt12length_errorD0Ev+0x28>
  42bd62:	4620      	mov	r0, r4
  42bd64:	f7ff fa9a 	bl	42b29c <_ZNSt9exceptionD1Ev>
  42bd68:	4620      	mov	r0, r4
  42bd6a:	f7fc fbcd 	bl	428508 <_ZdlPv>
  42bd6e:	4620      	mov	r0, r4
  42bd70:	b002      	add	sp, #8
  42bd72:	bd10      	pop	{r4, pc}
  42bd74:	f853 2c04 	ldr.w	r2, [r3, #-4]
  42bd78:	1e51      	subs	r1, r2, #1
  42bd7a:	2a00      	cmp	r2, #0
  42bd7c:	f843 1c04 	str.w	r1, [r3, #-4]
  42bd80:	dcef      	bgt.n	42bd62 <_ZNSt12length_errorD0Ev+0x16>
  42bd82:	a901      	add	r1, sp, #4
  42bd84:	f000 f87a 	bl	42be7c <_ZNSs4_Rep10_M_destroyERKSaIcE>
  42bd88:	e7eb      	b.n	42bd62 <_ZNSt12length_errorD0Ev+0x16>
  42bd8a:	bf00      	nop
  42bd8c:	0043cdf0 	.word	0x0043cdf0
  42bd90:	2004e930 	.word	0x2004e930

0042bd94 <_ZNSt11logic_errorC1EPKc>:
  42bd94:	4b1b      	ldr	r3, [pc, #108]	@ (42be04 <_ZNSt11logic_errorC1EPKc+0x70>)
  42bd96:	b5f0      	push	{r4, r5, r6, r7, lr}
  42bd98:	4604      	mov	r4, r0
  42bd9a:	b083      	sub	sp, #12
  42bd9c:	6003      	str	r3, [r0, #0]
  42bd9e:	b349      	cbz	r1, 42bdf4 <_ZNSt11logic_errorC1EPKc+0x60>
  42bda0:	4608      	mov	r0, r1
  42bda2:	460d      	mov	r5, r1
  42bda4:	f7f5 f912 	bl	420fcc <strlen>
  42bda8:	4606      	mov	r6, r0
  42bdaa:	b920      	cbnz	r0, 42bdb6 <_ZNSt11logic_errorC1EPKc+0x22>
  42bdac:	4b16      	ldr	r3, [pc, #88]	@ (42be08 <_ZNSt11logic_errorC1EPKc+0x74>)
  42bdae:	4620      	mov	r0, r4
  42bdb0:	6063      	str	r3, [r4, #4]
  42bdb2:	b003      	add	sp, #12
  42bdb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42bdb6:	aa01      	add	r2, sp, #4
  42bdb8:	2100      	movs	r1, #0
  42bdba:	f000 f835 	bl	42be28 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
  42bdbe:	2e01      	cmp	r6, #1
  42bdc0:	4607      	mov	r7, r0
  42bdc2:	f100 030c 	add.w	r3, r0, #12
  42bdc6:	d00c      	beq.n	42bde2 <_ZNSt11logic_errorC1EPKc+0x4e>
  42bdc8:	4618      	mov	r0, r3
  42bdca:	4629      	mov	r1, r5
  42bdcc:	4632      	mov	r2, r6
  42bdce:	f7e4 fbf5 	bl	4105bc <memcpy>
  42bdd2:	4603      	mov	r3, r0
  42bdd4:	4a0d      	ldr	r2, [pc, #52]	@ (42be0c <_ZNSt11logic_errorC1EPKc+0x78>)
  42bdd6:	4297      	cmp	r7, r2
  42bdd8:	d106      	bne.n	42bde8 <_ZNSt11logic_errorC1EPKc+0x54>
  42bdda:	4620      	mov	r0, r4
  42bddc:	6063      	str	r3, [r4, #4]
  42bdde:	b003      	add	sp, #12
  42bde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42bde2:	782a      	ldrb	r2, [r5, #0]
  42bde4:	7302      	strb	r2, [r0, #12]
  42bde6:	e7f5      	b.n	42bdd4 <_ZNSt11logic_errorC1EPKc+0x40>
  42bde8:	2200      	movs	r2, #0
  42bdea:	603e      	str	r6, [r7, #0]
  42bdec:	443e      	add	r6, r7
  42bdee:	60ba      	str	r2, [r7, #8]
  42bdf0:	7332      	strb	r2, [r6, #12]
  42bdf2:	e7f2      	b.n	42bdda <_ZNSt11logic_errorC1EPKc+0x46>
  42bdf4:	4806      	ldr	r0, [pc, #24]	@ (42be10 <_ZNSt11logic_errorC1EPKc+0x7c>)
  42bdf6:	f7ff f819 	bl	42ae2c <_ZSt19__throw_logic_errorPKc>
  42bdfa:	4620      	mov	r0, r4
  42bdfc:	f7ff fa4e 	bl	42b29c <_ZNSt9exceptionD1Ev>
  42be00:	f7ff f984 	bl	42b10c <__cxa_end_cleanup>
  42be04:	0043cdf0 	.word	0x0043cdf0
  42be08:	2004e93c 	.word	0x2004e93c
  42be0c:	2004e930 	.word	0x2004e930
  42be10:	00435100 	.word	0x00435100

0042be14 <_ZNSt12length_errorC1EPKc>:
  42be14:	b510      	push	{r4, lr}
  42be16:	4604      	mov	r4, r0
  42be18:	f7ff ffbc 	bl	42bd94 <_ZNSt11logic_errorC1EPKc>
  42be1c:	4b01      	ldr	r3, [pc, #4]	@ (42be24 <_ZNSt12length_errorC1EPKc+0x10>)
  42be1e:	4620      	mov	r0, r4
  42be20:	6023      	str	r3, [r4, #0]
  42be22:	bd10      	pop	{r4, pc}
  42be24:	0043ce04 	.word	0x0043ce04

0042be28 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
  42be28:	4b12      	ldr	r3, [pc, #72]	@ (42be74 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>)
  42be2a:	4298      	cmp	r0, r3
  42be2c:	b510      	push	{r4, lr}
  42be2e:	d81d      	bhi.n	42be6c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
  42be30:	4288      	cmp	r0, r1
  42be32:	4604      	mov	r4, r0
  42be34:	d912      	bls.n	42be5c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x34>
  42be36:	004a      	lsls	r2, r1, #1
  42be38:	4290      	cmp	r0, r2
  42be3a:	bf38      	it	cc
  42be3c:	4614      	movcc	r4, r2
  42be3e:	f104 021d 	add.w	r2, r4, #29
  42be42:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
  42be46:	d909      	bls.n	42be5c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x34>
  42be48:	42a1      	cmp	r1, r4
  42be4a:	d207      	bcs.n	42be5c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x34>
  42be4c:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
  42be50:	f3c2 020b 	ubfx	r2, r2, #0, #12
  42be54:	1aa4      	subs	r4, r4, r2
  42be56:	429c      	cmp	r4, r3
  42be58:	bf28      	it	cs
  42be5a:	461c      	movcs	r4, r3
  42be5c:	f104 000d 	add.w	r0, r4, #13
  42be60:	f7fc fb4e 	bl	428500 <_Znwj>
  42be64:	2200      	movs	r2, #0
  42be66:	e9c0 4201 	strd	r4, r2, [r0, #4]
  42be6a:	bd10      	pop	{r4, pc}
  42be6c:	4802      	ldr	r0, [pc, #8]	@ (42be78 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
  42be6e:	f7fe fff5 	bl	42ae5c <_ZSt20__throw_length_errorPKc>
  42be72:	bf00      	nop
  42be74:	3ffffffc 	.word	0x3ffffffc
  42be78:	0043512c 	.word	0x0043512c

0042be7c <_ZNSs4_Rep10_M_destroyERKSaIcE>:
  42be7c:	f7fc bb44 	b.w	428508 <_ZdlPv>

0042be80 <d_make_comp>:
  42be80:	2931      	cmp	r1, #49	@ 0x31
  42be82:	4684      	mov	ip, r0
  42be84:	b570      	push	{r4, r5, r6, lr}
  42be86:	d83c      	bhi.n	42bf02 <d_make_comp+0x82>
  42be88:	2928      	cmp	r1, #40	@ 0x28
  42be8a:	d90a      	bls.n	42bea2 <d_make_comp+0x22>
  42be8c:	f1a1 0029 	sub.w	r0, r1, #41	@ 0x29
  42be90:	2808      	cmp	r0, #8
  42be92:	d834      	bhi.n	42befe <d_make_comp+0x7e>
  42be94:	e8df f000 	tbb	[pc, r0]
  42be98:	3318191a 	.word	0x3318191a
  42be9c:	411a1a18 	.word	0x411a1a18
  42bea0:	19          	.byte	0x19
  42bea1:	00          	.byte	0x00
  42bea2:	290a      	cmp	r1, #10
  42bea4:	d90e      	bls.n	42bec4 <d_make_comp+0x44>
  42bea6:	f1a1 000b 	sub.w	r0, r1, #11
  42beaa:	2401      	movs	r4, #1
  42beac:	b2c0      	uxtb	r0, r0
  42beae:	4084      	lsls	r4, r0
  42beb0:	482d      	ldr	r0, [pc, #180]	@ (42bf68 <d_make_comp+0xe8>)
  42beb2:	4020      	ands	r0, r4
  42beb4:	bb88      	cbnz	r0, 42bf1a <d_make_comp+0x9a>
  42beb6:	f414 1f7f 	tst.w	r4, #4177920	@ 0x3fc000
  42beba:	d107      	bne.n	42becc <d_make_comp+0x4c>
  42bebc:	482b      	ldr	r0, [pc, #172]	@ (42bf6c <d_make_comp+0xec>)
  42bebe:	4020      	ands	r0, r4
  42bec0:	b910      	cbnz	r0, 42bec8 <d_make_comp+0x48>
  42bec2:	bd70      	pop	{r4, r5, r6, pc}
  42bec4:	2904      	cmp	r1, #4
  42bec6:	d816      	bhi.n	42bef6 <d_make_comp+0x76>
  42bec8:	b1ca      	cbz	r2, 42befe <d_make_comp+0x7e>
  42beca:	b1c3      	cbz	r3, 42befe <d_make_comp+0x7e>
  42becc:	e9dc 4005 	ldrd	r4, r0, [ip, #20]
  42bed0:	4284      	cmp	r4, r0
  42bed2:	da14      	bge.n	42befe <d_make_comp+0x7e>
  42bed4:	f8dc 5010 	ldr.w	r5, [ip, #16]
  42bed8:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
  42bedc:	2600      	movs	r6, #0
  42bede:	3401      	adds	r4, #1
  42bee0:	eb05 008e 	add.w	r0, r5, lr, lsl #2
  42bee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
  42bee8:	f8cc 4014 	str.w	r4, [ip, #20]
  42beec:	f805 102e 	strb.w	r1, [r5, lr, lsl #2]
  42bef0:	e9c0 2303 	strd	r2, r3, [r0, #12]
  42bef4:	bd70      	pop	{r4, r5, r6, pc}
  42bef6:	f1a1 0009 	sub.w	r0, r1, #9
  42befa:	2801      	cmp	r0, #1
  42befc:	d90d      	bls.n	42bf1a <d_make_comp+0x9a>
  42befe:	2000      	movs	r0, #0
  42bf00:	bd70      	pop	{r4, r5, r6, pc}
  42bf02:	294f      	cmp	r1, #79	@ 0x4f
  42bf04:	d80c      	bhi.n	42bf20 <d_make_comp+0xa0>
  42bf06:	2933      	cmp	r1, #51	@ 0x33
  42bf08:	d9f9      	bls.n	42befe <d_make_comp+0x7e>
  42bf0a:	f1a1 0034 	sub.w	r0, r1, #52	@ 0x34
  42bf0e:	2401      	movs	r4, #1
  42bf10:	b2c0      	uxtb	r0, r0
  42bf12:	4084      	lsls	r4, r0
  42bf14:	4816      	ldr	r0, [pc, #88]	@ (42bf70 <d_make_comp+0xf0>)
  42bf16:	4020      	ands	r0, r4
  42bf18:	b1f0      	cbz	r0, 42bf58 <d_make_comp+0xd8>
  42bf1a:	2a00      	cmp	r2, #0
  42bf1c:	d1d6      	bne.n	42becc <d_make_comp+0x4c>
  42bf1e:	e7ee      	b.n	42befe <d_make_comp+0x7e>
  42bf20:	f1a1 0052 	sub.w	r0, r1, #82	@ 0x52
  42bf24:	2809      	cmp	r0, #9
  42bf26:	d8d1      	bhi.n	42becc <d_make_comp+0x4c>
  42bf28:	a401      	add	r4, pc, #4	@ (adr r4, 42bf30 <d_make_comp+0xb0>)
  42bf2a:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
  42bf2e:	bf00      	nop
  42bf30:	0042bf1b 	.word	0x0042bf1b
  42bf34:	0042becb 	.word	0x0042becb
  42bf38:	0042becb 	.word	0x0042becb
  42bf3c:	0042bec9 	.word	0x0042bec9
  42bf40:	0042bf1b 	.word	0x0042bf1b
  42bf44:	0042bf1b 	.word	0x0042bf1b
  42bf48:	0042becd 	.word	0x0042becd
  42bf4c:	0042bf1b 	.word	0x0042bf1b
  42bf50:	0042bf1b 	.word	0x0042bf1b
  42bf54:	0042bf1b 	.word	0x0042bf1b
  42bf58:	4806      	ldr	r0, [pc, #24]	@ (42bf74 <d_make_comp+0xf4>)
  42bf5a:	4020      	ands	r0, r4
  42bf5c:	2800      	cmp	r0, #0
  42bf5e:	d1b3      	bne.n	42bec8 <d_make_comp+0x48>
  42bf60:	294e      	cmp	r1, #78	@ 0x4e
  42bf62:	d0b3      	beq.n	42becc <d_make_comp+0x4c>
  42bf64:	bd70      	pop	{r4, r5, r6, pc}
  42bf66:	bf00      	nop
  42bf68:	2f801ffe 	.word	0x2f801ffe
  42bf6c:	00400001 	.word	0x00400001
  42bf70:	01c71107 	.word	0x01c71107
  42bf74:	0a002ef8 	.word	0x0a002ef8

0042bf78 <d_make_name>:
  42bf78:	b570      	push	{r4, r5, r6, lr}
  42bf7a:	e9d0 4305 	ldrd	r4, r3, [r0, #20]
  42bf7e:	429c      	cmp	r4, r3
  42bf80:	da1a      	bge.n	42bfb8 <d_make_name+0x40>
  42bf82:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  42bf86:	6906      	ldr	r6, [r0, #16]
  42bf88:	4684      	mov	ip, r0
  42bf8a:	3401      	adds	r4, #1
  42bf8c:	2500      	movs	r5, #0
  42bf8e:	eb06 0083 	add.w	r0, r6, r3, lsl #2
  42bf92:	ea4f 0e83 	mov.w	lr, r3, lsl #2
  42bf96:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42bf9a:	f8cc 4014 	str.w	r4, [ip, #20]
  42bf9e:	b159      	cbz	r1, 42bfb8 <d_make_name+0x40>
  42bfa0:	42aa      	cmp	r2, r5
  42bfa2:	bfcc      	ite	gt
  42bfa4:	2300      	movgt	r3, #0
  42bfa6:	2301      	movle	r3, #1
  42bfa8:	b933      	cbnz	r3, 42bfb8 <d_make_name+0x40>
  42bfaa:	e9c0 3301 	strd	r3, r3, [r0, #4]
  42bfae:	f806 300e 	strb.w	r3, [r6, lr]
  42bfb2:	e9c0 1203 	strd	r1, r2, [r0, #12]
  42bfb6:	bd70      	pop	{r4, r5, r6, pc}
  42bfb8:	2000      	movs	r0, #0
  42bfba:	bd70      	pop	{r4, r5, r6, pc}

0042bfbc <d_number>:
  42bfbc:	68c2      	ldr	r2, [r0, #12]
  42bfbe:	b570      	push	{r4, r5, r6, lr}
  42bfc0:	f892 c000 	ldrb.w	ip, [r2]
  42bfc4:	4686      	mov	lr, r0
  42bfc6:	f1bc 0f6e 	cmp.w	ip, #110	@ 0x6e
  42bfca:	d025      	beq.n	42c018 <d_number+0x5c>
  42bfcc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
  42bfd0:	fa5f f38c 	uxtb.w	r3, ip
  42bfd4:	2b09      	cmp	r3, #9
  42bfd6:	d82c      	bhi.n	42c032 <d_number+0x76>
  42bfd8:	2600      	movs	r6, #0
  42bfda:	2000      	movs	r0, #0
  42bfdc:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
  42bfe0:	4c15      	ldr	r4, [pc, #84]	@ (42c038 <d_number+0x7c>)
  42bfe2:	e002      	b.n	42bfea <d_number+0x2e>
  42bfe4:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
  42bfe8:	dc13      	bgt.n	42c012 <d_number+0x56>
  42bfea:	3201      	adds	r2, #1
  42bfec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  42bff0:	f8ce 200c 	str.w	r2, [lr, #12]
  42bff4:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
  42bff8:	7813      	ldrb	r3, [r2, #0]
  42bffa:	3b30      	subs	r3, #48	@ 0x30
  42bffc:	469c      	mov	ip, r3
  42bffe:	b2db      	uxtb	r3, r3
  42c000:	eba5 010c 	sub.w	r1, r5, ip
  42c004:	2b09      	cmp	r3, #9
  42c006:	fba4 3101 	umull	r3, r1, r4, r1
  42c00a:	d9eb      	bls.n	42bfe4 <d_number+0x28>
  42c00c:	b106      	cbz	r6, 42c010 <d_number+0x54>
  42c00e:	4240      	negs	r0, r0
  42c010:	bd70      	pop	{r4, r5, r6, pc}
  42c012:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  42c016:	bd70      	pop	{r4, r5, r6, pc}
  42c018:	1c53      	adds	r3, r2, #1
  42c01a:	60c3      	str	r3, [r0, #12]
  42c01c:	f892 c001 	ldrb.w	ip, [r2, #1]
  42c020:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
  42c024:	fa5f f28c 	uxtb.w	r2, ip
  42c028:	2a09      	cmp	r2, #9
  42c02a:	d802      	bhi.n	42c032 <d_number+0x76>
  42c02c:	461a      	mov	r2, r3
  42c02e:	2601      	movs	r6, #1
  42c030:	e7d3      	b.n	42bfda <d_number+0x1e>
  42c032:	2000      	movs	r0, #0
  42c034:	bd70      	pop	{r4, r5, r6, pc}
  42c036:	bf00      	nop
  42c038:	cccccccd 	.word	0xcccccccd

0042c03c <d_call_offset>:
  42c03c:	b510      	push	{r4, lr}
  42c03e:	4604      	mov	r4, r0
  42c040:	b929      	cbnz	r1, 42c04e <d_call_offset+0x12>
  42c042:	68c3      	ldr	r3, [r0, #12]
  42c044:	781a      	ldrb	r2, [r3, #0]
  42c046:	b16a      	cbz	r2, 42c064 <d_call_offset+0x28>
  42c048:	1c5a      	adds	r2, r3, #1
  42c04a:	60c2      	str	r2, [r0, #12]
  42c04c:	7819      	ldrb	r1, [r3, #0]
  42c04e:	2968      	cmp	r1, #104	@ 0x68
  42c050:	d017      	beq.n	42c082 <d_call_offset+0x46>
  42c052:	2976      	cmp	r1, #118	@ 0x76
  42c054:	d106      	bne.n	42c064 <d_call_offset+0x28>
  42c056:	4620      	mov	r0, r4
  42c058:	f7ff ffb0 	bl	42bfbc <d_number>
  42c05c:	68e3      	ldr	r3, [r4, #12]
  42c05e:	781a      	ldrb	r2, [r3, #0]
  42c060:	2a5f      	cmp	r2, #95	@ 0x5f
  42c062:	d001      	beq.n	42c068 <d_call_offset+0x2c>
  42c064:	2000      	movs	r0, #0
  42c066:	bd10      	pop	{r4, pc}
  42c068:	3301      	adds	r3, #1
  42c06a:	4620      	mov	r0, r4
  42c06c:	60e3      	str	r3, [r4, #12]
  42c06e:	f7ff ffa5 	bl	42bfbc <d_number>
  42c072:	68e3      	ldr	r3, [r4, #12]
  42c074:	781a      	ldrb	r2, [r3, #0]
  42c076:	2a5f      	cmp	r2, #95	@ 0x5f
  42c078:	d1f4      	bne.n	42c064 <d_call_offset+0x28>
  42c07a:	3301      	adds	r3, #1
  42c07c:	2001      	movs	r0, #1
  42c07e:	60e3      	str	r3, [r4, #12]
  42c080:	bd10      	pop	{r4, pc}
  42c082:	4620      	mov	r0, r4
  42c084:	f7ff ff9a 	bl	42bfbc <d_number>
  42c088:	e7f3      	b.n	42c072 <d_call_offset+0x36>
  42c08a:	bf00      	nop

0042c08c <d_ref_qualifier>:
  42c08c:	b430      	push	{r4, r5}
  42c08e:	68c4      	ldr	r4, [r0, #12]
  42c090:	460a      	mov	r2, r1
  42c092:	7821      	ldrb	r1, [r4, #0]
  42c094:	2952      	cmp	r1, #82	@ 0x52
  42c096:	d004      	beq.n	42c0a2 <d_ref_qualifier+0x16>
  42c098:	294f      	cmp	r1, #79	@ 0x4f
  42c09a:	d002      	beq.n	42c0a2 <d_ref_qualifier+0x16>
  42c09c:	4610      	mov	r0, r2
  42c09e:	bc30      	pop	{r4, r5}
  42c0a0:	4770      	bx	lr
  42c0a2:	2952      	cmp	r1, #82	@ 0x52
  42c0a4:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  42c0a6:	d008      	beq.n	42c0ba <d_ref_qualifier+0x2e>
  42c0a8:	3503      	adds	r5, #3
  42c0aa:	2120      	movs	r1, #32
  42c0ac:	3401      	adds	r4, #1
  42c0ae:	62c5      	str	r5, [r0, #44]	@ 0x2c
  42c0b0:	2300      	movs	r3, #0
  42c0b2:	60c4      	str	r4, [r0, #12]
  42c0b4:	bc30      	pop	{r4, r5}
  42c0b6:	f7ff bee3 	b.w	42be80 <d_make_comp>
  42c0ba:	3502      	adds	r5, #2
  42c0bc:	211f      	movs	r1, #31
  42c0be:	e7f5      	b.n	42c0ac <d_ref_qualifier+0x20>

0042c0c0 <d_discriminator>:
  42c0c0:	68c3      	ldr	r3, [r0, #12]
  42c0c2:	781a      	ldrb	r2, [r3, #0]
  42c0c4:	2a5f      	cmp	r2, #95	@ 0x5f
  42c0c6:	d001      	beq.n	42c0cc <d_discriminator+0xc>
  42c0c8:	2001      	movs	r0, #1
  42c0ca:	4770      	bx	lr
  42c0cc:	1c5a      	adds	r2, r3, #1
  42c0ce:	b510      	push	{r4, lr}
  42c0d0:	60c2      	str	r2, [r0, #12]
  42c0d2:	4604      	mov	r4, r0
  42c0d4:	785a      	ldrb	r2, [r3, #1]
  42c0d6:	2a5f      	cmp	r2, #95	@ 0x5f
  42c0d8:	d004      	beq.n	42c0e4 <d_discriminator+0x24>
  42c0da:	f7ff ff6f 	bl	42bfbc <d_number>
  42c0de:	2800      	cmp	r0, #0
  42c0e0:	da10      	bge.n	42c104 <d_discriminator+0x44>
  42c0e2:	e00b      	b.n	42c0fc <d_discriminator+0x3c>
  42c0e4:	3302      	adds	r3, #2
  42c0e6:	60c3      	str	r3, [r0, #12]
  42c0e8:	f7ff ff68 	bl	42bfbc <d_number>
  42c0ec:	2800      	cmp	r0, #0
  42c0ee:	db05      	blt.n	42c0fc <d_discriminator+0x3c>
  42c0f0:	2809      	cmp	r0, #9
  42c0f2:	dd07      	ble.n	42c104 <d_discriminator+0x44>
  42c0f4:	68e3      	ldr	r3, [r4, #12]
  42c0f6:	781a      	ldrb	r2, [r3, #0]
  42c0f8:	2a5f      	cmp	r2, #95	@ 0x5f
  42c0fa:	d001      	beq.n	42c100 <d_discriminator+0x40>
  42c0fc:	2000      	movs	r0, #0
  42c0fe:	bd10      	pop	{r4, pc}
  42c100:	3301      	adds	r3, #1
  42c102:	60e3      	str	r3, [r4, #12]
  42c104:	2001      	movs	r0, #1
  42c106:	bd10      	pop	{r4, pc}

0042c108 <d_count_templates_scopes>:
  42c108:	2900      	cmp	r1, #0
  42c10a:	f000 808f 	beq.w	42c22c <d_count_templates_scopes+0x124>
  42c10e:	b538      	push	{r3, r4, r5, lr}
  42c110:	4605      	mov	r5, r0
  42c112:	460c      	mov	r4, r1
  42c114:	68a2      	ldr	r2, [r4, #8]
  42c116:	2a01      	cmp	r2, #1
  42c118:	dc33      	bgt.n	42c182 <d_count_templates_scopes+0x7a>
  42c11a:	f8d5 011c 	ldr.w	r0, [r5, #284]	@ 0x11c
  42c11e:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
  42c122:	dc2e      	bgt.n	42c182 <d_count_templates_scopes+0x7a>
  42c124:	7823      	ldrb	r3, [r4, #0]
  42c126:	3201      	adds	r2, #1
  42c128:	2b41      	cmp	r3, #65	@ 0x41
  42c12a:	60a2      	str	r2, [r4, #8]
  42c12c:	d82a      	bhi.n	42c184 <d_count_templates_scopes+0x7c>
  42c12e:	2b22      	cmp	r3, #34	@ 0x22
  42c130:	d818      	bhi.n	42c164 <d_count_templates_scopes+0x5c>
  42c132:	3b01      	subs	r3, #1
  42c134:	b2da      	uxtb	r2, r3
  42c136:	2a21      	cmp	r2, #33	@ 0x21
  42c138:	d823      	bhi.n	42c182 <d_count_templates_scopes+0x7a>
  42c13a:	2b21      	cmp	r3, #33	@ 0x21
  42c13c:	d821      	bhi.n	42c182 <d_count_templates_scopes+0x7a>
  42c13e:	e8df f003 	tbb	[pc, r3]
  42c142:	4f4f      	.short	0x4f4f
  42c144:	20206e4f 	.word	0x20206e4f
  42c148:	4f4f1d1d 	.word	0x4f4f1d1d
  42c14c:	4f4f4f4f 	.word	0x4f4f4f4f
  42c150:	4f4f4f4f 	.word	0x4f4f4f4f
  42c154:	4f4f4f4f 	.word	0x4f4f4f4f
  42c158:	4f4f204f 	.word	0x4f4f204f
  42c15c:	4f4f4f4f 	.word	0x4f4f4f4f
  42c160:	4f4f4f4f 	.word	0x4f4f4f4f
  42c164:	f1a3 0123 	sub.w	r1, r3, #35	@ 0x23
  42c168:	2201      	movs	r2, #1
  42c16a:	b2c9      	uxtb	r1, r1
  42c16c:	408a      	lsls	r2, r1
  42c16e:	4930      	ldr	r1, [pc, #192]	@ (42c230 <d_count_templates_scopes+0x128>)
  42c170:	4011      	ands	r1, r2
  42c172:	bba9      	cbnz	r1, 42c1e0 <d_count_templates_scopes+0xd8>
  42c174:	0792      	lsls	r2, r2, #30
  42c176:	d148      	bne.n	42c20a <d_count_templates_scopes+0x102>
  42c178:	2b33      	cmp	r3, #51	@ 0x33
  42c17a:	d102      	bne.n	42c182 <d_count_templates_scopes+0x7a>
  42c17c:	6924      	ldr	r4, [r4, #16]
  42c17e:	2c00      	cmp	r4, #0
  42c180:	d1c8      	bne.n	42c114 <d_count_templates_scopes+0xc>
  42c182:	bd38      	pop	{r3, r4, r5, pc}
  42c184:	3b44      	subs	r3, #68	@ 0x44
  42c186:	b2da      	uxtb	r2, r3
  42c188:	2a11      	cmp	r2, #17
  42c18a:	d8fa      	bhi.n	42c182 <d_count_templates_scopes+0x7a>
  42c18c:	2b11      	cmp	r3, #17
  42c18e:	d8f8      	bhi.n	42c182 <d_count_templates_scopes+0x7a>
  42c190:	a201      	add	r2, pc, #4	@ (adr r2, 42c198 <d_count_templates_scopes+0x90>)
  42c192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  42c196:	bf00      	nop
  42c198:	0042c1e1 	.word	0x0042c1e1
  42c19c:	0042c203 	.word	0x0042c203
  42c1a0:	0042c203 	.word	0x0042c203
  42c1a4:	0042c203 	.word	0x0042c203
  42c1a8:	0042c203 	.word	0x0042c203
  42c1ac:	0042c183 	.word	0x0042c183
  42c1b0:	0042c1e1 	.word	0x0042c1e1
  42c1b4:	0042c1e1 	.word	0x0042c1e1
  42c1b8:	0042c1e1 	.word	0x0042c1e1
  42c1bc:	0042c1e1 	.word	0x0042c1e1
  42c1c0:	0042c1e1 	.word	0x0042c1e1
  42c1c4:	0042c1e1 	.word	0x0042c1e1
  42c1c8:	0042c1e1 	.word	0x0042c1e1
  42c1cc:	0042c1e1 	.word	0x0042c1e1
  42c1d0:	0042c183 	.word	0x0042c183
  42c1d4:	0042c183 	.word	0x0042c183
  42c1d8:	0042c183 	.word	0x0042c183
  42c1dc:	0042c203 	.word	0x0042c203
  42c1e0:	68e1      	ldr	r1, [r4, #12]
  42c1e2:	1c43      	adds	r3, r0, #1
  42c1e4:	4628      	mov	r0, r5
  42c1e6:	f8c5 311c 	str.w	r3, [r5, #284]	@ 0x11c
  42c1ea:	f7ff ff8d 	bl	42c108 <d_count_templates_scopes>
  42c1ee:	6921      	ldr	r1, [r4, #16]
  42c1f0:	4628      	mov	r0, r5
  42c1f2:	f7ff ff89 	bl	42c108 <d_count_templates_scopes>
  42c1f6:	f8d5 311c 	ldr.w	r3, [r5, #284]	@ 0x11c
  42c1fa:	3b01      	subs	r3, #1
  42c1fc:	f8c5 311c 	str.w	r3, [r5, #284]	@ 0x11c
  42c200:	bd38      	pop	{r3, r4, r5, pc}
  42c202:	68e4      	ldr	r4, [r4, #12]
  42c204:	2c00      	cmp	r4, #0
  42c206:	d185      	bne.n	42c114 <d_count_templates_scopes+0xc>
  42c208:	e7bb      	b.n	42c182 <d_count_templates_scopes+0x7a>
  42c20a:	68e1      	ldr	r1, [r4, #12]
  42c20c:	780b      	ldrb	r3, [r1, #0]
  42c20e:	2b05      	cmp	r3, #5
  42c210:	d1e7      	bne.n	42c1e2 <d_count_templates_scopes+0xda>
  42c212:	f8d5 3138 	ldr.w	r3, [r5, #312]	@ 0x138
  42c216:	3301      	adds	r3, #1
  42c218:	f8c5 3138 	str.w	r3, [r5, #312]	@ 0x138
  42c21c:	e7e1      	b.n	42c1e2 <d_count_templates_scopes+0xda>
  42c21e:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
  42c222:	68e1      	ldr	r1, [r4, #12]
  42c224:	3301      	adds	r3, #1
  42c226:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
  42c22a:	e7da      	b.n	42c1e2 <d_count_templates_scopes+0xda>
  42c22c:	4770      	bx	lr
  42c22e:	bf00      	nop
  42c230:	7ffe7dec 	.word	0x7ffe7dec

0042c234 <d_index_template_argument.part.0>:
  42c234:	b920      	cbnz	r0, 42c240 <d_index_template_argument.part.0+0xc>
  42c236:	e007      	b.n	42c248 <d_index_template_argument.part.0+0x14>
  42c238:	b139      	cbz	r1, 42c24a <d_index_template_argument.part.0+0x16>
  42c23a:	6900      	ldr	r0, [r0, #16]
  42c23c:	3901      	subs	r1, #1
  42c23e:	b130      	cbz	r0, 42c24e <d_index_template_argument.part.0+0x1a>
  42c240:	7803      	ldrb	r3, [r0, #0]
  42c242:	2b2f      	cmp	r3, #47	@ 0x2f
  42c244:	d0f8      	beq.n	42c238 <d_index_template_argument.part.0+0x4>
  42c246:	2000      	movs	r0, #0
  42c248:	4770      	bx	lr
  42c24a:	68c0      	ldr	r0, [r0, #12]
  42c24c:	4770      	bx	lr
  42c24e:	4770      	bx	lr

0042c250 <d_growable_string_callback_adapter>:
  42c250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42c254:	1c4b      	adds	r3, r1, #1
  42c256:	4614      	mov	r4, r2
  42c258:	6852      	ldr	r2, [r2, #4]
  42c25a:	b082      	sub	sp, #8
  42c25c:	460e      	mov	r6, r1
  42c25e:	4607      	mov	r7, r0
  42c260:	4413      	add	r3, r2
  42c262:	e9d4 5802 	ldrd	r5, r8, [r4, #8]
  42c266:	42ab      	cmp	r3, r5
  42c268:	d814      	bhi.n	42c294 <d_growable_string_callback_adapter+0x44>
  42c26a:	f1b8 0f00 	cmp.w	r8, #0
  42c26e:	d10e      	bne.n	42c28e <d_growable_string_callback_adapter+0x3e>
  42c270:	6863      	ldr	r3, [r4, #4]
  42c272:	4632      	mov	r2, r6
  42c274:	6820      	ldr	r0, [r4, #0]
  42c276:	4639      	mov	r1, r7
  42c278:	4418      	add	r0, r3
  42c27a:	f7e4 f99f 	bl	4105bc <memcpy>
  42c27e:	e9d4 3200 	ldrd	r3, r2, [r4]
  42c282:	4433      	add	r3, r6
  42c284:	f803 8002 	strb.w	r8, [r3, r2]
  42c288:	6863      	ldr	r3, [r4, #4]
  42c28a:	4433      	add	r3, r6
  42c28c:	6063      	str	r3, [r4, #4]
  42c28e:	b002      	add	sp, #8
  42c290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42c294:	f1b8 0f00 	cmp.w	r8, #0
  42c298:	d1f9      	bne.n	42c28e <d_growable_string_callback_adapter+0x3e>
  42c29a:	b17d      	cbz	r5, 42c2bc <d_growable_string_callback_adapter+0x6c>
  42c29c:	006d      	lsls	r5, r5, #1
  42c29e:	42ab      	cmp	r3, r5
  42c2a0:	d8fc      	bhi.n	42c29c <d_growable_string_callback_adapter+0x4c>
  42c2a2:	4629      	mov	r1, r5
  42c2a4:	6820      	ldr	r0, [r4, #0]
  42c2a6:	f006 f9d5 	bl	432654 <realloc>
  42c2aa:	b160      	cbz	r0, 42c2c6 <d_growable_string_callback_adapter+0x76>
  42c2ac:	f8d4 800c 	ldr.w	r8, [r4, #12]
  42c2b0:	6020      	str	r0, [r4, #0]
  42c2b2:	60a5      	str	r5, [r4, #8]
  42c2b4:	f1b8 0f00 	cmp.w	r8, #0
  42c2b8:	d0da      	beq.n	42c270 <d_growable_string_callback_adapter+0x20>
  42c2ba:	e7e8      	b.n	42c28e <d_growable_string_callback_adapter+0x3e>
  42c2bc:	2b02      	cmp	r3, #2
  42c2be:	f04f 0502 	mov.w	r5, #2
  42c2c2:	d8eb      	bhi.n	42c29c <d_growable_string_callback_adapter+0x4c>
  42c2c4:	e7ed      	b.n	42c2a2 <d_growable_string_callback_adapter+0x52>
  42c2c6:	9001      	str	r0, [sp, #4]
  42c2c8:	6820      	ldr	r0, [r4, #0]
  42c2ca:	f006 f9bb 	bl	432644 <free>
  42c2ce:	9b01      	ldr	r3, [sp, #4]
  42c2d0:	2201      	movs	r2, #1
  42c2d2:	e9c4 3300 	strd	r3, r3, [r4]
  42c2d6:	e9c4 3202 	strd	r3, r2, [r4, #8]
  42c2da:	e7d8      	b.n	42c28e <d_growable_string_callback_adapter+0x3e>

0042c2dc <next_is_type_qual.isra.0>:
  42c2dc:	7803      	ldrb	r3, [r0, #0]
  42c2de:	2b4b      	cmp	r3, #75	@ 0x4b
  42c2e0:	d016      	beq.n	42c310 <next_is_type_qual.isra.0+0x34>
  42c2e2:	d80d      	bhi.n	42c300 <next_is_type_qual.isra.0+0x24>
  42c2e4:	2b44      	cmp	r3, #68	@ 0x44
  42c2e6:	d115      	bne.n	42c314 <next_is_type_qual.isra.0+0x38>
  42c2e8:	7843      	ldrb	r3, [r0, #1]
  42c2ea:	f1a3 0077 	sub.w	r0, r3, #119	@ 0x77
  42c2ee:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
  42c2f2:	2b4f      	cmp	r3, #79	@ 0x4f
  42c2f4:	bf18      	it	ne
  42c2f6:	2801      	cmpne	r0, #1
  42c2f8:	bf94      	ite	ls
  42c2fa:	2001      	movls	r0, #1
  42c2fc:	2000      	movhi	r0, #0
  42c2fe:	4770      	bx	lr
  42c300:	2b56      	cmp	r3, #86	@ 0x56
  42c302:	d005      	beq.n	42c310 <next_is_type_qual.isra.0+0x34>
  42c304:	f1a3 0072 	sub.w	r0, r3, #114	@ 0x72
  42c308:	fab0 f080 	clz	r0, r0
  42c30c:	0940      	lsrs	r0, r0, #5
  42c30e:	4770      	bx	lr
  42c310:	2001      	movs	r0, #1
  42c312:	4770      	bx	lr
  42c314:	2000      	movs	r0, #0
  42c316:	4770      	bx	lr

0042c318 <d_append_char>:
  42c318:	b570      	push	{r4, r5, r6, lr}
  42c31a:	460d      	mov	r5, r1
  42c31c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42c320:	4604      	mov	r4, r0
  42c322:	29ff      	cmp	r1, #255	@ 0xff
  42c324:	d006      	beq.n	42c334 <d_append_char+0x1c>
  42c326:	1c4b      	adds	r3, r1, #1
  42c328:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  42c32c:	5465      	strb	r5, [r4, r1]
  42c32e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42c332:	bd70      	pop	{r4, r5, r6, pc}
  42c334:	2600      	movs	r6, #0
  42c336:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
  42c33a:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
  42c33e:	4798      	blx	r3
  42c340:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
  42c344:	2301      	movs	r3, #1
  42c346:	4631      	mov	r1, r6
  42c348:	441a      	add	r2, r3
  42c34a:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  42c34e:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
  42c352:	5465      	strb	r5, [r4, r1]
  42c354:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42c358:	bd70      	pop	{r4, r5, r6, pc}
  42c35a:	bf00      	nop

0042c35c <d_lookup_template_argument>:
  42c35c:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
  42c360:	b18b      	cbz	r3, 42c386 <d_lookup_template_argument+0x2a>
  42c362:	685a      	ldr	r2, [r3, #4]
  42c364:	68cb      	ldr	r3, [r1, #12]
  42c366:	6910      	ldr	r0, [r2, #16]
  42c368:	2b00      	cmp	r3, #0
  42c36a:	db0b      	blt.n	42c384 <d_lookup_template_argument+0x28>
  42c36c:	b920      	cbnz	r0, 42c378 <d_lookup_template_argument+0x1c>
  42c36e:	e006      	b.n	42c37e <d_lookup_template_argument+0x22>
  42c370:	b13b      	cbz	r3, 42c382 <d_lookup_template_argument+0x26>
  42c372:	6900      	ldr	r0, [r0, #16]
  42c374:	3b01      	subs	r3, #1
  42c376:	b110      	cbz	r0, 42c37e <d_lookup_template_argument+0x22>
  42c378:	7802      	ldrb	r2, [r0, #0]
  42c37a:	2a2f      	cmp	r2, #47	@ 0x2f
  42c37c:	d0f8      	beq.n	42c370 <d_lookup_template_argument+0x14>
  42c37e:	2000      	movs	r0, #0
  42c380:	4770      	bx	lr
  42c382:	68c0      	ldr	r0, [r0, #12]
  42c384:	4770      	bx	lr
  42c386:	2301      	movs	r3, #1
  42c388:	f8c0 3118 	str.w	r3, [r0, #280]	@ 0x118
  42c38c:	e7f7      	b.n	42c37e <d_lookup_template_argument+0x22>
  42c38e:	bf00      	nop

0042c390 <d_append_string>:
  42c390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42c394:	4604      	mov	r4, r0
  42c396:	4608      	mov	r0, r1
  42c398:	460d      	mov	r5, r1
  42c39a:	f7f4 fe17 	bl	420fcc <strlen>
  42c39e:	b338      	cbz	r0, 42c3f0 <d_append_string+0x60>
  42c3a0:	3d01      	subs	r5, #1
  42c3a2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42c3a6:	f04f 0800 	mov.w	r8, #0
  42c3aa:	182f      	adds	r7, r5, r0
  42c3ac:	e007      	b.n	42c3be <d_append_string+0x2e>
  42c3ae:	3101      	adds	r1, #1
  42c3b0:	42bd      	cmp	r5, r7
  42c3b2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42c3b6:	54e6      	strb	r6, [r4, r3]
  42c3b8:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42c3bc:	d018      	beq.n	42c3f0 <d_append_string+0x60>
  42c3be:	29ff      	cmp	r1, #255	@ 0xff
  42c3c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  42c3c4:	460b      	mov	r3, r1
  42c3c6:	d1f2      	bne.n	42c3ae <d_append_string+0x1e>
  42c3c8:	4620      	mov	r0, r4
  42c3ca:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42c3ce:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  42c3d2:	4798      	blx	r3
  42c3d4:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
  42c3d8:	2101      	movs	r1, #1
  42c3da:	2300      	movs	r3, #0
  42c3dc:	42bd      	cmp	r5, r7
  42c3de:	440a      	add	r2, r1
  42c3e0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42c3e4:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
  42c3e8:	54e6      	strb	r6, [r4, r3]
  42c3ea:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42c3ee:	d1e6      	bne.n	42c3be <d_append_string+0x2e>
  42c3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0042c3f4 <d_find_pack>:
  42c3f4:	2900      	cmp	r1, #0
  42c3f6:	d055      	beq.n	42c4a4 <d_find_pack+0xb0>
  42c3f8:	b538      	push	{r3, r4, r5, lr}
  42c3fa:	4605      	mov	r5, r0
  42c3fc:	460c      	mov	r4, r1
  42c3fe:	7823      	ldrb	r3, [r4, #0]
  42c400:	2b33      	cmp	r3, #51	@ 0x33
  42c402:	d81d      	bhi.n	42c440 <d_find_pack+0x4c>
  42c404:	2b33      	cmp	r3, #51	@ 0x33
  42c406:	d824      	bhi.n	42c452 <d_find_pack+0x5e>
  42c408:	e8df f003 	tbb	[pc, r3]
  42c40c:	2323232b 	.word	0x2323232b
  42c410:	282b2d23 	.word	0x282b2d23
  42c414:	23232328 	.word	0x23232328
  42c418:	23232323 	.word	0x23232323
  42c41c:	23232323 	.word	0x23232323
  42c420:	23232323 	.word	0x23232323
  42c424:	2323232b 	.word	0x2323232b
  42c428:	23232323 	.word	0x23232323
  42c42c:	23232323 	.word	0x23232323
  42c430:	2b232323 	.word	0x2b232323
  42c434:	23232323 	.word	0x23232323
  42c438:	23232323 	.word	0x23232323
  42c43c:	282b2323 	.word	0x282b2323
  42c440:	3b42      	subs	r3, #66	@ 0x42
  42c442:	b2db      	uxtb	r3, r3
  42c444:	2b1a      	cmp	r3, #26
  42c446:	d804      	bhi.n	42c452 <d_find_pack+0x5e>
  42c448:	4a17      	ldr	r2, [pc, #92]	@ (42c4a8 <d_find_pack+0xb4>)
  42c44a:	fa22 f303 	lsr.w	r3, r2, r3
  42c44e:	07db      	lsls	r3, r3, #31
  42c450:	d407      	bmi.n	42c462 <d_find_pack+0x6e>
  42c452:	68e1      	ldr	r1, [r4, #12]
  42c454:	4628      	mov	r0, r5
  42c456:	f7ff ffcd 	bl	42c3f4 <d_find_pack>
  42c45a:	b918      	cbnz	r0, 42c464 <d_find_pack+0x70>
  42c45c:	6924      	ldr	r4, [r4, #16]
  42c45e:	2c00      	cmp	r4, #0
  42c460:	d1cd      	bne.n	42c3fe <d_find_pack+0xa>
  42c462:	2000      	movs	r0, #0
  42c464:	bd38      	pop	{r3, r4, r5, pc}
  42c466:	f8d5 3110 	ldr.w	r3, [r5, #272]	@ 0x110
  42c46a:	b1bb      	cbz	r3, 42c49c <d_find_pack+0xa8>
  42c46c:	685a      	ldr	r2, [r3, #4]
  42c46e:	68e3      	ldr	r3, [r4, #12]
  42c470:	6910      	ldr	r0, [r2, #16]
  42c472:	2b00      	cmp	r3, #0
  42c474:	db0b      	blt.n	42c48e <d_find_pack+0x9a>
  42c476:	b928      	cbnz	r0, 42c484 <d_find_pack+0x90>
  42c478:	e7f3      	b.n	42c462 <d_find_pack+0x6e>
  42c47a:	b13b      	cbz	r3, 42c48c <d_find_pack+0x98>
  42c47c:	6900      	ldr	r0, [r0, #16]
  42c47e:	3b01      	subs	r3, #1
  42c480:	2800      	cmp	r0, #0
  42c482:	d0ee      	beq.n	42c462 <d_find_pack+0x6e>
  42c484:	7802      	ldrb	r2, [r0, #0]
  42c486:	2a2f      	cmp	r2, #47	@ 0x2f
  42c488:	d0f7      	beq.n	42c47a <d_find_pack+0x86>
  42c48a:	e7ea      	b.n	42c462 <d_find_pack+0x6e>
  42c48c:	68c0      	ldr	r0, [r0, #12]
  42c48e:	2800      	cmp	r0, #0
  42c490:	d0e7      	beq.n	42c462 <d_find_pack+0x6e>
  42c492:	7803      	ldrb	r3, [r0, #0]
  42c494:	2b2f      	cmp	r3, #47	@ 0x2f
  42c496:	d0e5      	beq.n	42c464 <d_find_pack+0x70>
  42c498:	2000      	movs	r0, #0
  42c49a:	e7e3      	b.n	42c464 <d_find_pack+0x70>
  42c49c:	2301      	movs	r3, #1
  42c49e:	f8c5 3118 	str.w	r3, [r5, #280]	@ 0x118
  42c4a2:	e7de      	b.n	42c462 <d_find_pack+0x6e>
  42c4a4:	2000      	movs	r0, #0
  42c4a6:	4770      	bx	lr
  42c4a8:	04000ce3 	.word	0x04000ce3

0042c4ac <d_template_param>:
  42c4ac:	68c2      	ldr	r2, [r0, #12]
  42c4ae:	b538      	push	{r3, r4, r5, lr}
  42c4b0:	7813      	ldrb	r3, [r2, #0]
  42c4b2:	2b54      	cmp	r3, #84	@ 0x54
  42c4b4:	d124      	bne.n	42c500 <d_template_param+0x54>
  42c4b6:	1c53      	adds	r3, r2, #1
  42c4b8:	4604      	mov	r4, r0
  42c4ba:	60c3      	str	r3, [r0, #12]
  42c4bc:	7852      	ldrb	r2, [r2, #1]
  42c4be:	2a5f      	cmp	r2, #95	@ 0x5f
  42c4c0:	d020      	beq.n	42c504 <d_template_param+0x58>
  42c4c2:	2a6e      	cmp	r2, #110	@ 0x6e
  42c4c4:	d01c      	beq.n	42c500 <d_template_param+0x54>
  42c4c6:	f7ff fd79 	bl	42bfbc <d_number>
  42c4ca:	1c41      	adds	r1, r0, #1
  42c4cc:	d418      	bmi.n	42c500 <d_template_param+0x54>
  42c4ce:	68e3      	ldr	r3, [r4, #12]
  42c4d0:	781a      	ldrb	r2, [r3, #0]
  42c4d2:	2a5f      	cmp	r2, #95	@ 0x5f
  42c4d4:	d114      	bne.n	42c500 <d_template_param+0x54>
  42c4d6:	3301      	adds	r3, #1
  42c4d8:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
  42c4dc:	60e3      	str	r3, [r4, #12]
  42c4de:	4282      	cmp	r2, r0
  42c4e0:	da0e      	bge.n	42c500 <d_template_param+0x54>
  42c4e2:	6923      	ldr	r3, [r4, #16]
  42c4e4:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
  42c4e8:	2500      	movs	r5, #0
  42c4ea:	3201      	adds	r2, #1
  42c4ec:	eb03 008c 	add.w	r0, r3, ip, lsl #2
  42c4f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42c4f4:	6162      	str	r2, [r4, #20]
  42c4f6:	2205      	movs	r2, #5
  42c4f8:	f803 202c 	strb.w	r2, [r3, ip, lsl #2]
  42c4fc:	60c1      	str	r1, [r0, #12]
  42c4fe:	bd38      	pop	{r3, r4, r5, pc}
  42c500:	2000      	movs	r0, #0
  42c502:	bd38      	pop	{r3, r4, r5, pc}
  42c504:	2100      	movs	r1, #0
  42c506:	e7e6      	b.n	42c4d6 <d_template_param+0x2a>

0042c508 <d_append_num>:
  42c508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42c50c:	b088      	sub	sp, #32
  42c50e:	460a      	mov	r2, r1
  42c510:	4604      	mov	r4, r0
  42c512:	4919      	ldr	r1, [pc, #100]	@ (42c578 <d_append_num+0x70>)
  42c514:	a801      	add	r0, sp, #4
  42c516:	f006 f945 	bl	4327a4 <sprintf>
  42c51a:	a801      	add	r0, sp, #4
  42c51c:	f7f4 fd56 	bl	420fcc <strlen>
  42c520:	b338      	cbz	r0, 42c572 <d_append_num+0x6a>
  42c522:	ad01      	add	r5, sp, #4
  42c524:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42c528:	f04f 0800 	mov.w	r8, #0
  42c52c:	182f      	adds	r7, r5, r0
  42c52e:	e007      	b.n	42c540 <d_append_num+0x38>
  42c530:	3101      	adds	r1, #1
  42c532:	42bd      	cmp	r5, r7
  42c534:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42c538:	54e6      	strb	r6, [r4, r3]
  42c53a:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42c53e:	d018      	beq.n	42c572 <d_append_num+0x6a>
  42c540:	29ff      	cmp	r1, #255	@ 0xff
  42c542:	f815 6b01 	ldrb.w	r6, [r5], #1
  42c546:	460b      	mov	r3, r1
  42c548:	d1f2      	bne.n	42c530 <d_append_num+0x28>
  42c54a:	4620      	mov	r0, r4
  42c54c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42c550:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  42c554:	4798      	blx	r3
  42c556:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
  42c55a:	2101      	movs	r1, #1
  42c55c:	2300      	movs	r3, #0
  42c55e:	42bd      	cmp	r5, r7
  42c560:	440a      	add	r2, r1
  42c562:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42c566:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
  42c56a:	54e6      	strb	r6, [r4, r3]
  42c56c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42c570:	d1e6      	bne.n	42c540 <d_append_num+0x38>
  42c572:	b008      	add	sp, #32
  42c574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42c578:	00435144 	.word	0x00435144

0042c57c <d_source_name>:
  42c57c:	b570      	push	{r4, r5, r6, lr}
  42c57e:	4604      	mov	r4, r0
  42c580:	f7ff fd1c 	bl	42bfbc <d_number>
  42c584:	1e05      	subs	r5, r0, #0
  42c586:	dd25      	ble.n	42c5d4 <d_source_name+0x58>
  42c588:	68e6      	ldr	r6, [r4, #12]
  42c58a:	6863      	ldr	r3, [r4, #4]
  42c58c:	1b9b      	subs	r3, r3, r6
  42c58e:	429d      	cmp	r5, r3
  42c590:	dc27      	bgt.n	42c5e2 <d_source_name+0x66>
  42c592:	68a2      	ldr	r2, [r4, #8]
  42c594:	1973      	adds	r3, r6, r5
  42c596:	0752      	lsls	r2, r2, #29
  42c598:	60e3      	str	r3, [r4, #12]
  42c59a:	d502      	bpl.n	42c5a2 <d_source_name+0x26>
  42c59c:	5d72      	ldrb	r2, [r6, r5]
  42c59e:	2a24      	cmp	r2, #36	@ 0x24
  42c5a0:	d01a      	beq.n	42c5d8 <d_source_name+0x5c>
  42c5a2:	2d09      	cmp	r5, #9
  42c5a4:	dd0f      	ble.n	42c5c6 <d_source_name+0x4a>
  42c5a6:	2208      	movs	r2, #8
  42c5a8:	491c      	ldr	r1, [pc, #112]	@ (42c61c <d_source_name+0xa0>)
  42c5aa:	4630      	mov	r0, r6
  42c5ac:	f7f4 fa60 	bl	420a70 <memcmp>
  42c5b0:	b948      	cbnz	r0, 42c5c6 <d_source_name+0x4a>
  42c5b2:	7a33      	ldrb	r3, [r6, #8]
  42c5b4:	2b5f      	cmp	r3, #95	@ 0x5f
  42c5b6:	bf18      	it	ne
  42c5b8:	2b2e      	cmpne	r3, #46	@ 0x2e
  42c5ba:	d001      	beq.n	42c5c0 <d_source_name+0x44>
  42c5bc:	2b24      	cmp	r3, #36	@ 0x24
  42c5be:	d102      	bne.n	42c5c6 <d_source_name+0x4a>
  42c5c0:	7a73      	ldrb	r3, [r6, #9]
  42c5c2:	2b4e      	cmp	r3, #78	@ 0x4e
  42c5c4:	d00f      	beq.n	42c5e6 <d_source_name+0x6a>
  42c5c6:	462a      	mov	r2, r5
  42c5c8:	4631      	mov	r1, r6
  42c5ca:	4620      	mov	r0, r4
  42c5cc:	f7ff fcd4 	bl	42bf78 <d_make_name>
  42c5d0:	62a0      	str	r0, [r4, #40]	@ 0x28
  42c5d2:	bd70      	pop	{r4, r5, r6, pc}
  42c5d4:	2000      	movs	r0, #0
  42c5d6:	bd70      	pop	{r4, r5, r6, pc}
  42c5d8:	3301      	adds	r3, #1
  42c5da:	2d09      	cmp	r5, #9
  42c5dc:	60e3      	str	r3, [r4, #12]
  42c5de:	dce2      	bgt.n	42c5a6 <d_source_name+0x2a>
  42c5e0:	e7f1      	b.n	42c5c6 <d_source_name+0x4a>
  42c5e2:	2000      	movs	r0, #0
  42c5e4:	e7f4      	b.n	42c5d0 <d_source_name+0x54>
  42c5e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  42c5e8:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
  42c5ec:	3216      	adds	r2, #22
  42c5ee:	428b      	cmp	r3, r1
  42c5f0:	eba2 0205 	sub.w	r2, r2, r5
  42c5f4:	62e2      	str	r2, [r4, #44]	@ 0x2c
  42c5f6:	daf4      	bge.n	42c5e2 <d_source_name+0x66>
  42c5f8:	6922      	ldr	r2, [r4, #16]
  42c5fa:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  42c5fe:	3301      	adds	r3, #1
  42c600:	4907      	ldr	r1, [pc, #28]	@ (42c620 <d_source_name+0xa4>)
  42c602:	0085      	lsls	r5, r0, #2
  42c604:	6163      	str	r3, [r4, #20]
  42c606:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  42c60a:	2300      	movs	r3, #0
  42c60c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  42c610:	5553      	strb	r3, [r2, r5]
  42c612:	2315      	movs	r3, #21
  42c614:	e9c0 1303 	strd	r1, r3, [r0, #12]
  42c618:	e7da      	b.n	42c5d0 <d_source_name+0x54>
  42c61a:	bf00      	nop
  42c61c:	00435148 	.word	0x00435148
  42c620:	00435154 	.word	0x00435154

0042c624 <d_substitution>:
  42c624:	68c3      	ldr	r3, [r0, #12]
  42c626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42c62a:	781a      	ldrb	r2, [r3, #0]
  42c62c:	2a53      	cmp	r2, #83	@ 0x53
  42c62e:	d11a      	bne.n	42c666 <d_substitution+0x42>
  42c630:	1c5a      	adds	r2, r3, #1
  42c632:	4604      	mov	r4, r0
  42c634:	60c2      	str	r2, [r0, #12]
  42c636:	7858      	ldrb	r0, [r3, #1]
  42c638:	b9c8      	cbnz	r0, 42c66e <d_substitution+0x4a>
  42c63a:	68a3      	ldr	r3, [r4, #8]
  42c63c:	f013 0308 	ands.w	r3, r3, #8
  42c640:	d159      	bne.n	42c6f6 <d_substitution+0xd2>
  42c642:	07ca      	lsls	r2, r1, #31
  42c644:	d557      	bpl.n	42c6f6 <d_substitution+0xd2>
  42c646:	68e3      	ldr	r3, [r4, #12]
  42c648:	781b      	ldrb	r3, [r3, #0]
  42c64a:	3b43      	subs	r3, #67	@ 0x43
  42c64c:	2b01      	cmp	r3, #1
  42c64e:	bf8c      	ite	hi
  42c650:	2500      	movhi	r5, #0
  42c652:	2501      	movls	r5, #1
  42c654:	4b5c      	ldr	r3, [pc, #368]	@ (42c7c8 <d_substitution+0x1a4>)
  42c656:	f103 01c4 	add.w	r1, r3, #196	@ 0xc4
  42c65a:	781a      	ldrb	r2, [r3, #0]
  42c65c:	4282      	cmp	r2, r0
  42c65e:	d053      	beq.n	42c708 <d_substitution+0xe4>
  42c660:	331c      	adds	r3, #28
  42c662:	428b      	cmp	r3, r1
  42c664:	d1f9      	bne.n	42c65a <d_substitution+0x36>
  42c666:	2500      	movs	r5, #0
  42c668:	4628      	mov	r0, r5
  42c66a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42c66e:	1c9a      	adds	r2, r3, #2
  42c670:	60e2      	str	r2, [r4, #12]
  42c672:	7858      	ldrb	r0, [r3, #1]
  42c674:	f1a0 0c30 	sub.w	ip, r0, #48	@ 0x30
  42c678:	fa5f f38c 	uxtb.w	r3, ip
  42c67c:	2b09      	cmp	r3, #9
  42c67e:	d906      	bls.n	42c68e <d_substitution+0x6a>
  42c680:	f1a0 025f 	sub.w	r2, r0, #95	@ 0x5f
  42c684:	fab2 f282 	clz	r2, r2
  42c688:	0952      	lsrs	r2, r2, #5
  42c68a:	2a00      	cmp	r2, #0
  42c68c:	d037      	beq.n	42c6fe <d_substitution+0xda>
  42c68e:	285f      	cmp	r0, #95	@ 0x5f
  42c690:	d109      	bne.n	42c6a6 <d_substitution+0x82>
  42c692:	2300      	movs	r3, #0
  42c694:	6a22      	ldr	r2, [r4, #32]
  42c696:	429a      	cmp	r2, r3
  42c698:	d9e5      	bls.n	42c666 <d_substitution+0x42>
  42c69a:	69e2      	ldr	r2, [r4, #28]
  42c69c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  42c6a0:	4628      	mov	r0, r5
  42c6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42c6a6:	2200      	movs	r2, #0
  42c6a8:	e005      	b.n	42c6b6 <d_substitution+0x92>
  42c6aa:	60e5      	str	r5, [r4, #12]
  42c6ac:	7808      	ldrb	r0, [r1, #0]
  42c6ae:	285f      	cmp	r0, #95	@ 0x5f
  42c6b0:	f1a0 0c30 	sub.w	ip, r0, #48	@ 0x30
  42c6b4:	d01d      	beq.n	42c6f2 <d_substitution+0xce>
  42c6b6:	fa5f fc8c 	uxtb.w	ip, ip
  42c6ba:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  42c6be:	f1bc 0f09 	cmp.w	ip, #9
  42c6c2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  42c6c6:	d809      	bhi.n	42c6dc <d_substitution+0xb8>
  42c6c8:	3b30      	subs	r3, #48	@ 0x30
  42c6ca:	429a      	cmp	r2, r3
  42c6cc:	461a      	mov	r2, r3
  42c6ce:	d8ca      	bhi.n	42c666 <d_substitution+0x42>
  42c6d0:	68e1      	ldr	r1, [r4, #12]
  42c6d2:	7808      	ldrb	r0, [r1, #0]
  42c6d4:	1c4d      	adds	r5, r1, #1
  42c6d6:	2800      	cmp	r0, #0
  42c6d8:	d0c5      	beq.n	42c666 <d_substitution+0x42>
  42c6da:	e7e6      	b.n	42c6aa <d_substitution+0x86>
  42c6dc:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
  42c6e0:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
  42c6e4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  42c6e8:	2919      	cmp	r1, #25
  42c6ea:	f1a3 0337 	sub.w	r3, r3, #55	@ 0x37
  42c6ee:	d9ec      	bls.n	42c6ca <d_substitution+0xa6>
  42c6f0:	e7b9      	b.n	42c666 <d_substitution+0x42>
  42c6f2:	3301      	adds	r3, #1
  42c6f4:	e7ce      	b.n	42c694 <d_substitution+0x70>
  42c6f6:	1e1d      	subs	r5, r3, #0
  42c6f8:	bf18      	it	ne
  42c6fa:	2501      	movne	r5, #1
  42c6fc:	e7aa      	b.n	42c654 <d_substitution+0x30>
  42c6fe:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
  42c702:	2b19      	cmp	r3, #25
  42c704:	d9d7      	bls.n	42c6b6 <d_substitution+0x92>
  42c706:	e798      	b.n	42c63a <d_substitution+0x16>
  42c708:	695e      	ldr	r6, [r3, #20]
  42c70a:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
  42c70e:	b1ae      	cbz	r6, 42c73c <d_substitution+0x118>
  42c710:	4290      	cmp	r0, r2
  42c712:	f8d3 8018 	ldr.w	r8, [r3, #24]
  42c716:	dd54      	ble.n	42c7c2 <d_substitution+0x19e>
  42c718:	6927      	ldr	r7, [r4, #16]
  42c71a:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
  42c71e:	f04f 0e00 	mov.w	lr, #0
  42c722:	3201      	adds	r2, #1
  42c724:	eb07 018c 	add.w	r1, r7, ip, lsl #2
  42c728:	e9c1 ee01 	strd	lr, lr, [r1, #4]
  42c72c:	f04f 0e18 	mov.w	lr, #24
  42c730:	6162      	str	r2, [r4, #20]
  42c732:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
  42c736:	e9c1 6803 	strd	r6, r8, [r1, #12]
  42c73a:	62a1      	str	r1, [r4, #40]	@ 0x28
  42c73c:	2d00      	cmp	r5, #0
  42c73e:	d03b      	beq.n	42c7b8 <d_substitution+0x194>
  42c740:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
  42c744:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42c746:	4290      	cmp	r0, r2
  42c748:	440b      	add	r3, r1
  42c74a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42c74c:	dd37      	ble.n	42c7be <d_substitution+0x19a>
  42c74e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
  42c752:	1c53      	adds	r3, r2, #1
  42c754:	6922      	ldr	r2, [r4, #16]
  42c756:	2600      	movs	r6, #0
  42c758:	f04f 0c18 	mov.w	ip, #24
  42c75c:	eb02 0580 	add.w	r5, r2, r0, lsl #2
  42c760:	e9c5 6601 	strd	r6, r6, [r5, #4]
  42c764:	6163      	str	r3, [r4, #20]
  42c766:	f802 c020 	strb.w	ip, [r2, r0, lsl #2]
  42c76a:	e9c5 7103 	strd	r7, r1, [r5, #12]
  42c76e:	68e3      	ldr	r3, [r4, #12]
  42c770:	781a      	ldrb	r2, [r3, #0]
  42c772:	2a42      	cmp	r2, #66	@ 0x42
  42c774:	f47f af78 	bne.w	42c668 <d_substitution+0x44>
  42c778:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
  42c77a:	3301      	adds	r3, #1
  42c77c:	4620      	mov	r0, r4
  42c77e:	60e3      	str	r3, [r4, #12]
  42c780:	f7ff fefc 	bl	42c57c <d_source_name>
  42c784:	462a      	mov	r2, r5
  42c786:	4603      	mov	r3, r0
  42c788:	214d      	movs	r1, #77	@ 0x4d
  42c78a:	4620      	mov	r0, r4
  42c78c:	f7ff fb78 	bl	42be80 <d_make_comp>
  42c790:	68e3      	ldr	r3, [r4, #12]
  42c792:	4605      	mov	r5, r0
  42c794:	781a      	ldrb	r2, [r3, #0]
  42c796:	2a42      	cmp	r2, #66	@ 0x42
  42c798:	d0ef      	beq.n	42c77a <d_substitution+0x156>
  42c79a:	62a6      	str	r6, [r4, #40]	@ 0x28
  42c79c:	2800      	cmp	r0, #0
  42c79e:	f43f af62 	beq.w	42c666 <d_substitution+0x42>
  42c7a2:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
  42c7a6:	4293      	cmp	r3, r2
  42c7a8:	f6bf af5d 	bge.w	42c666 <d_substitution+0x42>
  42c7ac:	69e1      	ldr	r1, [r4, #28]
  42c7ae:	1c5a      	adds	r2, r3, #1
  42c7b0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  42c7b4:	6222      	str	r2, [r4, #32]
  42c7b6:	e757      	b.n	42c668 <d_substitution+0x44>
  42c7b8:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
  42c7bc:	e7c2      	b.n	42c744 <d_substitution+0x120>
  42c7be:	2500      	movs	r5, #0
  42c7c0:	e7d5      	b.n	42c76e <d_substitution+0x14a>
  42c7c2:	2100      	movs	r1, #0
  42c7c4:	e7b9      	b.n	42c73a <d_substitution+0x116>
  42c7c6:	bf00      	nop
  42c7c8:	0043ce1c 	.word	0x0043ce1c

0042c7cc <d_maybe_module_name>:
  42c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42c7ce:	68c3      	ldr	r3, [r0, #12]
  42c7d0:	781a      	ldrb	r2, [r3, #0]
  42c7d2:	2a57      	cmp	r2, #87	@ 0x57
  42c7d4:	d127      	bne.n	42c826 <d_maybe_module_name+0x5a>
  42c7d6:	4604      	mov	r4, r0
  42c7d8:	460e      	mov	r6, r1
  42c7da:	e007      	b.n	42c7ec <d_maybe_module_name+0x20>
  42c7dc:	68e3      	ldr	r3, [r4, #12]
  42c7de:	69e5      	ldr	r5, [r4, #28]
  42c7e0:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
  42c7e4:	6221      	str	r1, [r4, #32]
  42c7e6:	781a      	ldrb	r2, [r3, #0]
  42c7e8:	2a57      	cmp	r2, #87	@ 0x57
  42c7ea:	d11c      	bne.n	42c826 <d_maybe_module_name+0x5a>
  42c7ec:	1c5a      	adds	r2, r3, #1
  42c7ee:	2553      	movs	r5, #83	@ 0x53
  42c7f0:	60e2      	str	r2, [r4, #12]
  42c7f2:	785a      	ldrb	r2, [r3, #1]
  42c7f4:	2a50      	cmp	r2, #80	@ 0x50
  42c7f6:	d102      	bne.n	42c7fe <d_maybe_module_name+0x32>
  42c7f8:	3302      	adds	r3, #2
  42c7fa:	2554      	movs	r5, #84	@ 0x54
  42c7fc:	60e3      	str	r3, [r4, #12]
  42c7fe:	6837      	ldr	r7, [r6, #0]
  42c800:	4620      	mov	r0, r4
  42c802:	f7ff febb 	bl	42c57c <d_source_name>
  42c806:	4629      	mov	r1, r5
  42c808:	4603      	mov	r3, r0
  42c80a:	463a      	mov	r2, r7
  42c80c:	4620      	mov	r0, r4
  42c80e:	f7ff fb37 	bl	42be80 <d_make_comp>
  42c812:	6030      	str	r0, [r6, #0]
  42c814:	b130      	cbz	r0, 42c824 <d_maybe_module_name+0x58>
  42c816:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
  42c81a:	429a      	cmp	r2, r3
  42c81c:	f102 0101 	add.w	r1, r2, #1
  42c820:	dbdc      	blt.n	42c7dc <d_maybe_module_name+0x10>
  42c822:	2000      	movs	r0, #0
  42c824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42c826:	2001      	movs	r0, #1
  42c828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42c82a:	bf00      	nop

0042c82c <d_type>:
  42c82c:	68c2      	ldr	r2, [r0, #12]
  42c82e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  42c832:	4604      	mov	r4, r0
  42c834:	b085      	sub	sp, #20
  42c836:	4610      	mov	r0, r2
  42c838:	f7ff fd50 	bl	42c2dc <next_is_type_qual.isra.0>
  42c83c:	b9f0      	cbnz	r0, 42c87c <d_type+0x50>
  42c83e:	7813      	ldrb	r3, [r2, #0]
  42c840:	2b55      	cmp	r3, #85	@ 0x55
  42c842:	d84d      	bhi.n	42c8e0 <d_type+0xb4>
  42c844:	2b40      	cmp	r3, #64	@ 0x40
  42c846:	d978      	bls.n	42c93a <d_type+0x10e>
  42c848:	3b41      	subs	r3, #65	@ 0x41
  42c84a:	2b14      	cmp	r3, #20
  42c84c:	d875      	bhi.n	42c93a <d_type+0x10e>
  42c84e:	e8df f013 	tbh	[pc, r3, lsl #1]
  42c852:	014b      	.short	0x014b
  42c854:	01370074 	.word	0x01370074
  42c858:	007400f7 	.word	0x007400f7
  42c85c:	00a50145 	.word	0x00a50145
  42c860:	00740074 	.word	0x00740074
  42c864:	00740074 	.word	0x00740074
  42c868:	01760074 	.word	0x01760074
  42c86c:	00970074 	.word	0x00970074
  42c870:	00740089 	.word	0x00740089
  42c874:	0074007b 	.word	0x0074007b
  42c878:	00b300cb 	.word	0x00b300cb
  42c87c:	2200      	movs	r2, #0
  42c87e:	4669      	mov	r1, sp
  42c880:	4620      	mov	r0, r4
  42c882:	f001 f9b9 	bl	42dbf8 <d_cv_qualifiers>
  42c886:	4605      	mov	r5, r0
  42c888:	2800      	cmp	r0, #0
  42c88a:	f000 8185 	beq.w	42cb98 <d_type+0x36c>
  42c88e:	68e3      	ldr	r3, [r4, #12]
  42c890:	4620      	mov	r0, r4
  42c892:	781b      	ldrb	r3, [r3, #0]
  42c894:	2b46      	cmp	r3, #70	@ 0x46
  42c896:	d020      	beq.n	42c8da <d_type+0xae>
  42c898:	f7ff ffc8 	bl	42c82c <d_type>
  42c89c:	6028      	str	r0, [r5, #0]
  42c89e:	2800      	cmp	r0, #0
  42c8a0:	f000 817a 	beq.w	42cb98 <d_type+0x36c>
  42c8a4:	7803      	ldrb	r3, [r0, #0]
  42c8a6:	3b1f      	subs	r3, #31
  42c8a8:	2b01      	cmp	r3, #1
  42c8aa:	d805      	bhi.n	42c8b8 <d_type+0x8c>
  42c8ac:	9a00      	ldr	r2, [sp, #0]
  42c8ae:	68c3      	ldr	r3, [r0, #12]
  42c8b0:	60c2      	str	r2, [r0, #12]
  42c8b2:	682a      	ldr	r2, [r5, #0]
  42c8b4:	9200      	str	r2, [sp, #0]
  42c8b6:	602b      	str	r3, [r5, #0]
  42c8b8:	9800      	ldr	r0, [sp, #0]
  42c8ba:	2800      	cmp	r0, #0
  42c8bc:	f000 816c 	beq.w	42cb98 <d_type+0x36c>
  42c8c0:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
  42c8c4:	4293      	cmp	r3, r2
  42c8c6:	f280 8167 	bge.w	42cb98 <d_type+0x36c>
  42c8ca:	69e1      	ldr	r1, [r4, #28]
  42c8cc:	1c5a      	adds	r2, r3, #1
  42c8ce:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  42c8d2:	6222      	str	r2, [r4, #32]
  42c8d4:	b005      	add	sp, #20
  42c8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  42c8da:	f000 fbdf 	bl	42d09c <d_function_type>
  42c8de:	e7dd      	b.n	42c89c <d_type+0x70>
  42c8e0:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
  42c8e4:	4605      	mov	r5, r0
  42c8e6:	b2c8      	uxtb	r0, r1
  42c8e8:	2819      	cmp	r0, #25
  42c8ea:	d826      	bhi.n	42c93a <d_type+0x10e>
  42c8ec:	2301      	movs	r3, #1
  42c8ee:	4eab      	ldr	r6, [pc, #684]	@ (42cb9c <d_type+0x370>)
  42c8f0:	4083      	lsls	r3, r0
  42c8f2:	401e      	ands	r6, r3
  42c8f4:	2e00      	cmp	r6, #0
  42c8f6:	f040 82b6 	bne.w	42ce66 <d_type+0x63a>
  42c8fa:	2814      	cmp	r0, #20
  42c8fc:	d11d      	bne.n	42c93a <d_type+0x10e>
  42c8fe:	3201      	adds	r2, #1
  42c900:	4620      	mov	r0, r4
  42c902:	60e2      	str	r2, [r4, #12]
  42c904:	f7ff fe3a 	bl	42c57c <d_source_name>
  42c908:	4633      	mov	r3, r6
  42c90a:	4602      	mov	r2, r0
  42c90c:	2128      	movs	r1, #40	@ 0x28
  42c90e:	4620      	mov	r0, r4
  42c910:	f7ff fab6 	bl	42be80 <d_make_comp>
  42c914:	4605      	mov	r5, r0
  42c916:	9000      	str	r0, [sp, #0]
  42c918:	2d00      	cmp	r5, #0
  42c91a:	f000 813d 	beq.w	42cb98 <d_type+0x36c>
  42c91e:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
  42c922:	4293      	cmp	r3, r2
  42c924:	f280 8138 	bge.w	42cb98 <d_type+0x36c>
  42c928:	69e1      	ldr	r1, [r4, #28]
  42c92a:	1c5a      	adds	r2, r3, #1
  42c92c:	9800      	ldr	r0, [sp, #0]
  42c92e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
  42c932:	6222      	str	r2, [r4, #32]
  42c934:	b005      	add	sp, #20
  42c936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  42c93a:	2101      	movs	r1, #1
  42c93c:	4620      	mov	r0, r4
  42c93e:	b005      	add	sp, #20
  42c940:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  42c944:	f001 b9fe 	b.w	42dd44 <d_name>
  42c948:	3201      	adds	r2, #1
  42c94a:	4620      	mov	r0, r4
  42c94c:	60e2      	str	r2, [r4, #12]
  42c94e:	f7ff ff6d 	bl	42c82c <d_type>
  42c952:	2300      	movs	r3, #0
  42c954:	4602      	mov	r2, r0
  42c956:	2123      	movs	r1, #35	@ 0x23
  42c958:	4620      	mov	r0, r4
  42c95a:	f7ff fa91 	bl	42be80 <d_make_comp>
  42c95e:	4605      	mov	r5, r0
  42c960:	9000      	str	r0, [sp, #0]
  42c962:	e7d9      	b.n	42c918 <d_type+0xec>
  42c964:	3201      	adds	r2, #1
  42c966:	4620      	mov	r0, r4
  42c968:	60e2      	str	r2, [r4, #12]
  42c96a:	f7ff ff5f 	bl	42c82c <d_type>
  42c96e:	2300      	movs	r3, #0
  42c970:	4602      	mov	r2, r0
  42c972:	2122      	movs	r1, #34	@ 0x22
  42c974:	4620      	mov	r0, r4
  42c976:	f7ff fa83 	bl	42be80 <d_make_comp>
  42c97a:	4605      	mov	r5, r0
  42c97c:	9000      	str	r0, [sp, #0]
  42c97e:	e7cb      	b.n	42c918 <d_type+0xec>
  42c980:	3201      	adds	r2, #1
  42c982:	4620      	mov	r0, r4
  42c984:	60e2      	str	r2, [r4, #12]
  42c986:	f7ff ff51 	bl	42c82c <d_type>
  42c98a:	2300      	movs	r3, #0
  42c98c:	4602      	mov	r2, r0
  42c98e:	2124      	movs	r1, #36	@ 0x24
  42c990:	4620      	mov	r0, r4
  42c992:	f7ff fa75 	bl	42be80 <d_make_comp>
  42c996:	4605      	mov	r5, r0
  42c998:	9000      	str	r0, [sp, #0]
  42c99a:	e7bd      	b.n	42c918 <d_type+0xec>
  42c99c:	3201      	adds	r2, #1
  42c99e:	4620      	mov	r0, r4
  42c9a0:	60e2      	str	r2, [r4, #12]
  42c9a2:	f7ff ff43 	bl	42c82c <d_type>
  42c9a6:	2300      	movs	r3, #0
  42c9a8:	4602      	mov	r2, r0
  42c9aa:	2126      	movs	r1, #38	@ 0x26
  42c9ac:	4620      	mov	r0, r4
  42c9ae:	f7ff fa67 	bl	42be80 <d_make_comp>
  42c9b2:	4605      	mov	r5, r0
  42c9b4:	9000      	str	r0, [sp, #0]
  42c9b6:	e7af      	b.n	42c918 <d_type+0xec>
  42c9b8:	3201      	adds	r2, #1
  42c9ba:	4620      	mov	r0, r4
  42c9bc:	60e2      	str	r2, [r4, #12]
  42c9be:	f7ff fddd 	bl	42c57c <d_source_name>
  42c9c2:	68e3      	ldr	r3, [r4, #12]
  42c9c4:	4605      	mov	r5, r0
  42c9c6:	9000      	str	r0, [sp, #0]
  42c9c8:	781a      	ldrb	r2, [r3, #0]
  42c9ca:	2a49      	cmp	r2, #73	@ 0x49
  42c9cc:	f000 826c 	beq.w	42cea8 <d_type+0x67c>
  42c9d0:	4620      	mov	r0, r4
  42c9d2:	f7ff ff2b 	bl	42c82c <d_type>
  42c9d6:	462b      	mov	r3, r5
  42c9d8:	4602      	mov	r2, r0
  42c9da:	2121      	movs	r1, #33	@ 0x21
  42c9dc:	4620      	mov	r0, r4
  42c9de:	f7ff fa4f 	bl	42be80 <d_make_comp>
  42c9e2:	4605      	mov	r5, r0
  42c9e4:	9000      	str	r0, [sp, #0]
  42c9e6:	e797      	b.n	42c918 <d_type+0xec>
  42c9e8:	4620      	mov	r0, r4
  42c9ea:	f7ff fd5f 	bl	42c4ac <d_template_param>
  42c9ee:	68e6      	ldr	r6, [r4, #12]
  42c9f0:	4605      	mov	r5, r0
  42c9f2:	9000      	str	r0, [sp, #0]
  42c9f4:	7833      	ldrb	r3, [r6, #0]
  42c9f6:	2b49      	cmp	r3, #73	@ 0x49
  42c9f8:	d18e      	bne.n	42c918 <d_type+0xec>
  42c9fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  42c9fc:	2b00      	cmp	r3, #0
  42c9fe:	f040 826e 	bne.w	42cede <d_type+0x6b2>
  42ca02:	2800      	cmp	r0, #0
  42ca04:	f000 80c8 	beq.w	42cb98 <d_type+0x36c>
  42ca08:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
  42ca0c:	428a      	cmp	r2, r1
  42ca0e:	f280 80c3 	bge.w	42cb98 <d_type+0x36c>
  42ca12:	69e1      	ldr	r1, [r4, #28]
  42ca14:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  42ca18:	3201      	adds	r2, #1
  42ca1a:	6222      	str	r2, [r4, #32]
  42ca1c:	7832      	ldrb	r2, [r6, #0]
  42ca1e:	3a49      	subs	r2, #73	@ 0x49
  42ca20:	2a01      	cmp	r2, #1
  42ca22:	d805      	bhi.n	42ca30 <d_type+0x204>
  42ca24:	3601      	adds	r6, #1
  42ca26:	4620      	mov	r0, r4
  42ca28:	60e6      	str	r6, [r4, #12]
  42ca2a:	f001 fe5f 	bl	42e6ec <d_template_args_1>
  42ca2e:	4603      	mov	r3, r0
  42ca30:	462a      	mov	r2, r5
  42ca32:	2104      	movs	r1, #4
  42ca34:	4620      	mov	r0, r4
  42ca36:	f7ff fa23 	bl	42be80 <d_make_comp>
  42ca3a:	4605      	mov	r5, r0
  42ca3c:	9000      	str	r0, [sp, #0]
  42ca3e:	e76b      	b.n	42c918 <d_type+0xec>
  42ca40:	1c53      	adds	r3, r2, #1
  42ca42:	60e3      	str	r3, [r4, #12]
  42ca44:	7853      	ldrb	r3, [r2, #1]
  42ca46:	2b00      	cmp	r3, #0
  42ca48:	f000 80a6 	beq.w	42cb98 <d_type+0x36c>
  42ca4c:	1c93      	adds	r3, r2, #2
  42ca4e:	60e3      	str	r3, [r4, #12]
  42ca50:	7853      	ldrb	r3, [r2, #1]
  42ca52:	3b46      	subs	r3, #70	@ 0x46
  42ca54:	2b30      	cmp	r3, #48	@ 0x30
  42ca56:	f200 809f 	bhi.w	42cb98 <d_type+0x36c>
  42ca5a:	e8df f013 	tbh	[pc, r3, lsl #1]
  42ca5e:	00e4      	.short	0x00e4
  42ca60:	009d009d 	.word	0x009d009d
  42ca64:	009d009d 	.word	0x009d009d
  42ca68:	009d009d 	.word	0x009d009d
  42ca6c:	009d009d 	.word	0x009d009d
  42ca70:	009d009d 	.word	0x009d009d
  42ca74:	009d009d 	.word	0x009d009d
  42ca78:	0084009d 	.word	0x0084009d
  42ca7c:	009d009d 	.word	0x009d009d
  42ca80:	009d009d 	.word	0x009d009d
  42ca84:	009d009d 	.word	0x009d009d
  42ca88:	009d009d 	.word	0x009d009d
  42ca8c:	009d009d 	.word	0x009d009d
  42ca90:	009d009d 	.word	0x009d009d
  42ca94:	009d01b2 	.word	0x009d01b2
  42ca98:	0184019c 	.word	0x0184019c
  42ca9c:	0154016c 	.word	0x0154016c
  42caa0:	013c009d 	.word	0x013c009d
  42caa4:	009d01e0 	.word	0x009d01e0
  42caa8:	009d009d 	.word	0x009d009d
  42caac:	01c8009d 	.word	0x01c8009d
  42cab0:	01f8009d 	.word	0x01f8009d
  42cab4:	009d009d 	.word	0x009d009d
  42cab8:	00840124 	.word	0x00840124
  42cabc:	00a100cc 	.word	0x00a100cc
  42cac0:	3201      	adds	r2, #1
  42cac2:	4620      	mov	r0, r4
  42cac4:	60e2      	str	r2, [r4, #12]
  42cac6:	f7ff feb1 	bl	42c82c <d_type>
  42caca:	2300      	movs	r3, #0
  42cacc:	4602      	mov	r2, r0
  42cace:	2125      	movs	r1, #37	@ 0x25
  42cad0:	4620      	mov	r0, r4
  42cad2:	f7ff f9d5 	bl	42be80 <d_make_comp>
  42cad6:	4605      	mov	r5, r0
  42cad8:	9000      	str	r0, [sp, #0]
  42cada:	e71d      	b.n	42c918 <d_type+0xec>
  42cadc:	4620      	mov	r0, r4
  42cade:	f000 fadd 	bl	42d09c <d_function_type>
  42cae2:	4605      	mov	r5, r0
  42cae4:	9000      	str	r0, [sp, #0]
  42cae6:	e717      	b.n	42c918 <d_type+0xec>
  42cae8:	1c51      	adds	r1, r2, #1
  42caea:	60e1      	str	r1, [r4, #12]
  42caec:	7853      	ldrb	r3, [r2, #1]
  42caee:	2b5f      	cmp	r3, #95	@ 0x5f
  42caf0:	f000 81d8 	beq.w	42cea4 <d_type+0x678>
  42caf4:	3b30      	subs	r3, #48	@ 0x30
  42caf6:	2b09      	cmp	r3, #9
  42caf8:	f200 81e3 	bhi.w	42cec2 <d_type+0x696>
  42cafc:	460d      	mov	r5, r1
  42cafe:	462e      	mov	r6, r5
  42cb00:	3501      	adds	r5, #1
  42cb02:	60e5      	str	r5, [r4, #12]
  42cb04:	782b      	ldrb	r3, [r5, #0]
  42cb06:	3b30      	subs	r3, #48	@ 0x30
  42cb08:	2b09      	cmp	r3, #9
  42cb0a:	d9f8      	bls.n	42cafe <d_type+0x2d2>
  42cb0c:	1ab2      	subs	r2, r6, r2
  42cb0e:	4620      	mov	r0, r4
  42cb10:	f7ff fa32 	bl	42bf78 <d_make_name>
  42cb14:	4607      	mov	r7, r0
  42cb16:	2800      	cmp	r0, #0
  42cb18:	d03e      	beq.n	42cb98 <d_type+0x36c>
  42cb1a:	7873      	ldrb	r3, [r6, #1]
  42cb1c:	2b5f      	cmp	r3, #95	@ 0x5f
  42cb1e:	d13b      	bne.n	42cb98 <d_type+0x36c>
  42cb20:	4629      	mov	r1, r5
  42cb22:	3101      	adds	r1, #1
  42cb24:	4620      	mov	r0, r4
  42cb26:	60e1      	str	r1, [r4, #12]
  42cb28:	f7ff fe80 	bl	42c82c <d_type>
  42cb2c:	463a      	mov	r2, r7
  42cb2e:	4603      	mov	r3, r0
  42cb30:	212a      	movs	r1, #42	@ 0x2a
  42cb32:	4620      	mov	r0, r4
  42cb34:	f7ff f9a4 	bl	42be80 <d_make_comp>
  42cb38:	4605      	mov	r5, r0
  42cb3a:	9000      	str	r0, [sp, #0]
  42cb3c:	e6ec      	b.n	42c918 <d_type+0xec>
  42cb3e:	3201      	adds	r2, #1
  42cb40:	4620      	mov	r0, r4
  42cb42:	60e2      	str	r2, [r4, #12]
  42cb44:	f7ff fe72 	bl	42c82c <d_type>
  42cb48:	4605      	mov	r5, r0
  42cb4a:	b328      	cbz	r0, 42cb98 <d_type+0x36c>
  42cb4c:	4620      	mov	r0, r4
  42cb4e:	f7ff fe6d 	bl	42c82c <d_type>
  42cb52:	4603      	mov	r3, r0
  42cb54:	b300      	cbz	r0, 42cb98 <d_type+0x36c>
  42cb56:	462a      	mov	r2, r5
  42cb58:	212b      	movs	r1, #43	@ 0x2b
  42cb5a:	4620      	mov	r0, r4
  42cb5c:	f7ff f990 	bl	42be80 <d_make_comp>
  42cb60:	4605      	mov	r5, r0
  42cb62:	9000      	str	r0, [sp, #0]
  42cb64:	e6d8      	b.n	42c918 <d_type+0xec>
  42cb66:	2301      	movs	r3, #1
  42cb68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  42cb6a:	4620      	mov	r0, r4
  42cb6c:	6323      	str	r3, [r4, #48]	@ 0x30
  42cb6e:	f000 fd8d 	bl	42d68c <d_expression_1>
  42cb72:	6325      	str	r5, [r4, #48]	@ 0x30
  42cb74:	4602      	mov	r2, r0
  42cb76:	2300      	movs	r3, #0
  42cb78:	2144      	movs	r1, #68	@ 0x44
  42cb7a:	4620      	mov	r0, r4
  42cb7c:	f7ff f980 	bl	42be80 <d_make_comp>
  42cb80:	4605      	mov	r5, r0
  42cb82:	9000      	str	r0, [sp, #0]
  42cb84:	b140      	cbz	r0, 42cb98 <d_type+0x36c>
  42cb86:	68e3      	ldr	r3, [r4, #12]
  42cb88:	781a      	ldrb	r2, [r3, #0]
  42cb8a:	b12a      	cbz	r2, 42cb98 <d_type+0x36c>
  42cb8c:	1c5a      	adds	r2, r3, #1
  42cb8e:	60e2      	str	r2, [r4, #12]
  42cb90:	781b      	ldrb	r3, [r3, #0]
  42cb92:	2b45      	cmp	r3, #69	@ 0x45
  42cb94:	f43f aec3 	beq.w	42c91e <d_type+0xf2>
  42cb98:	2000      	movs	r0, #0
  42cb9a:	e69b      	b.n	42c8d4 <d_type+0xa8>
  42cb9c:	03ec7bff 	.word	0x03ec7bff
  42cba0:	7893      	ldrb	r3, [r2, #2]
  42cba2:	2b5f      	cmp	r3, #95	@ 0x5f
  42cba4:	f000 81f5 	beq.w	42cf92 <d_type+0x766>
  42cba8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42cbac:	4293      	cmp	r3, r2
  42cbae:	daf3      	bge.n	42cb98 <d_type+0x36c>
  42cbb0:	6922      	ldr	r2, [r4, #16]
  42cbb2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42cbb6:	2000      	movs	r0, #0
  42cbb8:	3301      	adds	r3, #1
  42cbba:	eb02 0581 	add.w	r5, r2, r1, lsl #2
  42cbbe:	e9c5 0001 	strd	r0, r0, [r5, #4]
  42cbc2:	6163      	str	r3, [r4, #20]
  42cbc4:	2343      	movs	r3, #67	@ 0x43
  42cbc6:	4620      	mov	r0, r4
  42cbc8:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42cbcc:	f7ff f9f6 	bl	42bfbc <d_number>
  42cbd0:	60e8      	str	r0, [r5, #12]
  42cbd2:	68e3      	ldr	r3, [r4, #12]
  42cbd4:	781a      	ldrb	r2, [r3, #0]
  42cbd6:	2a5f      	cmp	r2, #95	@ 0x5f
  42cbd8:	d1de      	bne.n	42cb98 <d_type+0x36c>
  42cbda:	3301      	adds	r3, #1
  42cbdc:	4620      	mov	r0, r4
  42cbde:	60e3      	str	r3, [r4, #12]
  42cbe0:	f7ff fe24 	bl	42c82c <d_type>
  42cbe4:	462a      	mov	r2, r5
  42cbe6:	4603      	mov	r3, r0
  42cbe8:	212d      	movs	r1, #45	@ 0x2d
  42cbea:	4620      	mov	r0, r4
  42cbec:	f7ff f948 	bl	42be80 <d_make_comp>
  42cbf0:	4605      	mov	r5, r0
  42cbf2:	9000      	str	r0, [sp, #0]
  42cbf4:	e690      	b.n	42c918 <d_type+0xec>
  42cbf6:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42cbfa:	4293      	cmp	r3, r2
  42cbfc:	f280 81dc 	bge.w	42cfb8 <d_type+0x78c>
  42cc00:	6922      	ldr	r2, [r4, #16]
  42cc02:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42cc06:	2500      	movs	r5, #0
  42cc08:	3301      	adds	r3, #1
  42cc0a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  42cc0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42cc12:	6163      	str	r3, [r4, #20]
  42cc14:	2327      	movs	r3, #39	@ 0x27
  42cc16:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42cc1a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42cc1c:	4aba      	ldr	r2, [pc, #744]	@ (42cf08 <d_type+0x6dc>)
  42cc1e:	3307      	adds	r3, #7
  42cc20:	60c2      	str	r2, [r0, #12]
  42cc22:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42cc24:	e656      	b.n	42c8d4 <d_type+0xa8>
  42cc26:	4620      	mov	r0, r4
  42cc28:	f7ff f9c8 	bl	42bfbc <d_number>
  42cc2c:	68e3      	ldr	r3, [r4, #12]
  42cc2e:	4602      	mov	r2, r0
  42cc30:	781d      	ldrb	r5, [r3, #0]
  42cc32:	2d62      	cmp	r5, #98	@ 0x62
  42cc34:	f000 8192 	beq.w	42cf5c <d_type+0x730>
  42cc38:	2d78      	cmp	r5, #120	@ 0x78
  42cc3a:	d002      	beq.n	42cc42 <d_type+0x416>
  42cc3c:	2d5f      	cmp	r5, #95	@ 0x5f
  42cc3e:	d1ab      	bne.n	42cb98 <d_type+0x36c>
  42cc40:	2500      	movs	r5, #0
  42cc42:	fa0f fe82 	sxth.w	lr, r2
  42cc46:	3301      	adds	r3, #1
  42cc48:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
  42cc4c:	4281      	cmp	r1, r0
  42cc4e:	f280 81ae 	bge.w	42cfae <d_type+0x782>
  42cc52:	2014      	movs	r0, #20
  42cc54:	6927      	ldr	r7, [r4, #16]
  42cc56:	f04f 0c00 	mov.w	ip, #0
  42cc5a:	f04f 095c 	mov.w	r9, #92	@ 0x5c
  42cc5e:	fb01 f000 	mul.w	r0, r1, r0
  42cc62:	f8df 82d4 	ldr.w	r8, [pc, #724]	@ 42cf38 <d_type+0x70c>
  42cc66:	3101      	adds	r1, #1
  42cc68:	183e      	adds	r6, r7, r0
  42cc6a:	e9c6 cc01 	strd	ip, ip, [r6, #4]
  42cc6e:	6161      	str	r1, [r4, #20]
  42cc70:	f807 9000 	strb.w	r9, [r7, r0]
  42cc74:	a801      	add	r0, sp, #4
  42cc76:	f8a6 e010 	strh.w	lr, [r6, #16]
  42cc7a:	49a4      	ldr	r1, [pc, #656]	@ (42cf0c <d_type+0x6e0>)
  42cc7c:	f8c6 800c 	str.w	r8, [r6, #12]
  42cc80:	74b5      	strb	r5, [r6, #18]
  42cc82:	60e3      	str	r3, [r4, #12]
  42cc84:	9600      	str	r6, [sp, #0]
  42cc86:	f005 fd8d 	bl	4327a4 <sprintf>
  42cc8a:	a801      	add	r0, sp, #4
  42cc8c:	f7f4 f99e 	bl	420fcc <strlen>
  42cc90:	68f3      	ldr	r3, [r6, #12]
  42cc92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  42cc94:	685b      	ldr	r3, [r3, #4]
  42cc96:	4413      	add	r3, r2
  42cc98:	2d00      	cmp	r5, #0
  42cc9a:	bf18      	it	ne
  42cc9c:	3301      	addne	r3, #1
  42cc9e:	4403      	add	r3, r0
  42cca0:	9800      	ldr	r0, [sp, #0]
  42cca2:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42cca4:	e616      	b.n	42c8d4 <d_type+0xa8>
  42cca6:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42ccaa:	4293      	cmp	r3, r2
  42ccac:	f280 8184 	bge.w	42cfb8 <d_type+0x78c>
  42ccb0:	6922      	ldr	r2, [r4, #16]
  42ccb2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42ccb6:	2500      	movs	r5, #0
  42ccb8:	3301      	adds	r3, #1
  42ccba:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  42ccbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42ccc2:	6163      	str	r3, [r4, #20]
  42ccc4:	2327      	movs	r3, #39	@ 0x27
  42ccc6:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42ccca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42cccc:	4a90      	ldr	r2, [pc, #576]	@ (42cf10 <d_type+0x6e4>)
  42ccce:	3308      	adds	r3, #8
  42ccd0:	60c2      	str	r2, [r0, #12]
  42ccd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42ccd4:	e5fe      	b.n	42c8d4 <d_type+0xa8>
  42ccd6:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42ccda:	4293      	cmp	r3, r2
  42ccdc:	f280 816c 	bge.w	42cfb8 <d_type+0x78c>
  42cce0:	6922      	ldr	r2, [r4, #16]
  42cce2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42cce6:	2500      	movs	r5, #0
  42cce8:	3301      	adds	r3, #1
  42ccea:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  42ccee:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42ccf2:	6163      	str	r3, [r4, #20]
  42ccf4:	2327      	movs	r3, #39	@ 0x27
  42ccf6:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42ccfa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42ccfc:	4a85      	ldr	r2, [pc, #532]	@ (42cf14 <d_type+0x6e8>)
  42ccfe:	3304      	adds	r3, #4
  42cd00:	60c2      	str	r2, [r0, #12]
  42cd02:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42cd04:	e5e6      	b.n	42c8d4 <d_type+0xa8>
  42cd06:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42cd0a:	4293      	cmp	r3, r2
  42cd0c:	f280 8154 	bge.w	42cfb8 <d_type+0x78c>
  42cd10:	6922      	ldr	r2, [r4, #16]
  42cd12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42cd16:	2500      	movs	r5, #0
  42cd18:	3301      	adds	r3, #1
  42cd1a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  42cd1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42cd22:	6163      	str	r3, [r4, #20]
  42cd24:	2327      	movs	r3, #39	@ 0x27
  42cd26:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42cd2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42cd2c:	4a7a      	ldr	r2, [pc, #488]	@ (42cf18 <d_type+0x6ec>)
  42cd2e:	3309      	adds	r3, #9
  42cd30:	60c2      	str	r2, [r0, #12]
  42cd32:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42cd34:	e5ce      	b.n	42c8d4 <d_type+0xa8>
  42cd36:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42cd3a:	4293      	cmp	r3, r2
  42cd3c:	f280 813c 	bge.w	42cfb8 <d_type+0x78c>
  42cd40:	6922      	ldr	r2, [r4, #16]
  42cd42:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42cd46:	2500      	movs	r5, #0
  42cd48:	3301      	adds	r3, #1
  42cd4a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  42cd4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42cd52:	6163      	str	r3, [r4, #20]
  42cd54:	2327      	movs	r3, #39	@ 0x27
  42cd56:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42cd5a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42cd5c:	4a6f      	ldr	r2, [pc, #444]	@ (42cf1c <d_type+0x6f0>)
  42cd5e:	330a      	adds	r3, #10
  42cd60:	60c2      	str	r2, [r0, #12]
  42cd62:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42cd64:	e5b6      	b.n	42c8d4 <d_type+0xa8>
  42cd66:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42cd6a:	4293      	cmp	r3, r2
  42cd6c:	f280 8124 	bge.w	42cfb8 <d_type+0x78c>
  42cd70:	6922      	ldr	r2, [r4, #16]
  42cd72:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42cd76:	2500      	movs	r5, #0
  42cd78:	3301      	adds	r3, #1
  42cd7a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  42cd7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42cd82:	6163      	str	r3, [r4, #20]
  42cd84:	2327      	movs	r3, #39	@ 0x27
  42cd86:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42cd8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42cd8c:	4a64      	ldr	r2, [pc, #400]	@ (42cf20 <d_type+0x6f4>)
  42cd8e:	3309      	adds	r3, #9
  42cd90:	60c2      	str	r2, [r0, #12]
  42cd92:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42cd94:	e59e      	b.n	42c8d4 <d_type+0xa8>
  42cd96:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42cd9a:	4293      	cmp	r3, r2
  42cd9c:	f6bf aefc 	bge.w	42cb98 <d_type+0x36c>
  42cda0:	6922      	ldr	r2, [r4, #16]
  42cda2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  42cda6:	3301      	adds	r3, #1
  42cda8:	0081      	lsls	r1, r0, #2
  42cdaa:	6163      	str	r3, [r4, #20]
  42cdac:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  42cdb0:	2300      	movs	r3, #0
  42cdb2:	e9c0 3301 	strd	r3, r3, [r0, #4]
  42cdb6:	5453      	strb	r3, [r2, r1]
  42cdb8:	230e      	movs	r3, #14
  42cdba:	4a5a      	ldr	r2, [pc, #360]	@ (42cf24 <d_type+0x6f8>)
  42cdbc:	e9c0 2303 	strd	r2, r3, [r0, #12]
  42cdc0:	e588      	b.n	42c8d4 <d_type+0xa8>
  42cdc2:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42cdc6:	4293      	cmp	r3, r2
  42cdc8:	f6bf aee6 	bge.w	42cb98 <d_type+0x36c>
  42cdcc:	6922      	ldr	r2, [r4, #16]
  42cdce:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  42cdd2:	3301      	adds	r3, #1
  42cdd4:	0081      	lsls	r1, r0, #2
  42cdd6:	6163      	str	r3, [r4, #20]
  42cdd8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  42cddc:	2300      	movs	r3, #0
  42cdde:	e9c0 3301 	strd	r3, r3, [r0, #4]
  42cde2:	5453      	strb	r3, [r2, r1]
  42cde4:	2304      	movs	r3, #4
  42cde6:	4a50      	ldr	r2, [pc, #320]	@ (42cf28 <d_type+0x6fc>)
  42cde8:	e9c0 2303 	strd	r2, r3, [r0, #12]
  42cdec:	e572      	b.n	42c8d4 <d_type+0xa8>
  42cdee:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42cdf2:	4293      	cmp	r3, r2
  42cdf4:	f280 80e0 	bge.w	42cfb8 <d_type+0x78c>
  42cdf8:	6922      	ldr	r2, [r4, #16]
  42cdfa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42cdfe:	2500      	movs	r5, #0
  42ce00:	3301      	adds	r3, #1
  42ce02:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  42ce06:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42ce0a:	6163      	str	r3, [r4, #20]
  42ce0c:	2327      	movs	r3, #39	@ 0x27
  42ce0e:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42ce12:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42ce14:	4a45      	ldr	r2, [pc, #276]	@ (42cf2c <d_type+0x700>)
  42ce16:	3311      	adds	r3, #17
  42ce18:	60c2      	str	r2, [r0, #12]
  42ce1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42ce1c:	e55a      	b.n	42c8d4 <d_type+0xa8>
  42ce1e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42ce22:	4293      	cmp	r3, r2
  42ce24:	f280 80c8 	bge.w	42cfb8 <d_type+0x78c>
  42ce28:	6922      	ldr	r2, [r4, #16]
  42ce2a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42ce2e:	2500      	movs	r5, #0
  42ce30:	3301      	adds	r3, #1
  42ce32:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  42ce36:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42ce3a:	6163      	str	r3, [r4, #20]
  42ce3c:	2327      	movs	r3, #39	@ 0x27
  42ce3e:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42ce42:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42ce44:	4a3a      	ldr	r2, [pc, #232]	@ (42cf30 <d_type+0x704>)
  42ce46:	3308      	adds	r3, #8
  42ce48:	60c2      	str	r2, [r0, #12]
  42ce4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42ce4c:	e542      	b.n	42c8d4 <d_type+0xa8>
  42ce4e:	4620      	mov	r0, r4
  42ce50:	f7ff fcec 	bl	42c82c <d_type>
  42ce54:	2300      	movs	r3, #0
  42ce56:	4602      	mov	r2, r0
  42ce58:	214c      	movs	r1, #76	@ 0x4c
  42ce5a:	4620      	mov	r0, r4
  42ce5c:	f7ff f810 	bl	42be80 <d_make_comp>
  42ce60:	4605      	mov	r5, r0
  42ce62:	9000      	str	r0, [sp, #0]
  42ce64:	e558      	b.n	42c918 <d_type+0xec>
  42ce66:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  42ce6a:	4932      	ldr	r1, [pc, #200]	@ (42cf34 <d_type+0x708>)
  42ce6c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  42ce70:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
  42ce74:	4283      	cmp	r3, r0
  42ce76:	f280 80a2 	bge.w	42cfbe <d_type+0x792>
  42ce7a:	6926      	ldr	r6, [r4, #16]
  42ce7c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
  42ce80:	f04f 0c27 	mov.w	ip, #39	@ 0x27
  42ce84:	3301      	adds	r3, #1
  42ce86:	eb06 0087 	add.w	r0, r6, r7, lsl #2
  42ce8a:	3201      	adds	r2, #1
  42ce8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
  42ce90:	6163      	str	r3, [r4, #20]
  42ce92:	f806 c027 	strb.w	ip, [r6, r7, lsl #2]
  42ce96:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42ce98:	60c1      	str	r1, [r0, #12]
  42ce9a:	6849      	ldr	r1, [r1, #4]
  42ce9c:	60e2      	str	r2, [r4, #12]
  42ce9e:	440b      	add	r3, r1
  42cea0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42cea2:	e517      	b.n	42c8d4 <d_type+0xa8>
  42cea4:	2700      	movs	r7, #0
  42cea6:	e63c      	b.n	42cb22 <d_type+0x2f6>
  42cea8:	3301      	adds	r3, #1
  42ceaa:	4620      	mov	r0, r4
  42ceac:	60e3      	str	r3, [r4, #12]
  42ceae:	f001 fc1d 	bl	42e6ec <d_template_args_1>
  42ceb2:	462a      	mov	r2, r5
  42ceb4:	4603      	mov	r3, r0
  42ceb6:	2104      	movs	r1, #4
  42ceb8:	4620      	mov	r0, r4
  42ceba:	f7fe ffe1 	bl	42be80 <d_make_comp>
  42cebe:	4605      	mov	r5, r0
  42cec0:	e586      	b.n	42c9d0 <d_type+0x1a4>
  42cec2:	2301      	movs	r3, #1
  42cec4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  42cec6:	4620      	mov	r0, r4
  42cec8:	6323      	str	r3, [r4, #48]	@ 0x30
  42ceca:	f000 fbdf 	bl	42d68c <d_expression_1>
  42cece:	6325      	str	r5, [r4, #48]	@ 0x30
  42ced0:	4607      	mov	r7, r0
  42ced2:	2800      	cmp	r0, #0
  42ced4:	f43f ae60 	beq.w	42cb98 <d_type+0x36c>
  42ced8:	68e5      	ldr	r5, [r4, #12]
  42ceda:	782b      	ldrb	r3, [r5, #0]
  42cedc:	e61e      	b.n	42cb1c <d_type+0x2f0>
  42cede:	1c73      	adds	r3, r6, #1
  42cee0:	4620      	mov	r0, r4
  42cee2:	f8d4 9014 	ldr.w	r9, [r4, #20]
  42cee6:	60e3      	str	r3, [r4, #12]
  42cee8:	f8d4 8020 	ldr.w	r8, [r4, #32]
  42ceec:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
  42ceee:	f001 fbfd 	bl	42e6ec <d_template_args_1>
  42cef2:	68e3      	ldr	r3, [r4, #12]
  42cef4:	781b      	ldrb	r3, [r3, #0]
  42cef6:	2b49      	cmp	r3, #73	@ 0x49
  42cef8:	d020      	beq.n	42cf3c <d_type+0x710>
  42cefa:	60e6      	str	r6, [r4, #12]
  42cefc:	f8c4 9014 	str.w	r9, [r4, #20]
  42cf00:	f8c4 8020 	str.w	r8, [r4, #32]
  42cf04:	62e7      	str	r7, [r4, #44]	@ 0x2c
  42cf06:	e507      	b.n	42c918 <d_type+0xec>
  42cf08:	0043d5c8 	.word	0x0043d5c8
  42cf0c:	00435144 	.word	0x00435144
  42cf10:	0043d5dc 	.word	0x0043d5dc
  42cf14:	0043d5b4 	.word	0x0043d5b4
  42cf18:	0043d578 	.word	0x0043d578
  42cf1c:	0043d5a0 	.word	0x0043d5a0
  42cf20:	0043d58c 	.word	0x0043d58c
  42cf24:	00435174 	.word	0x00435174
  42cf28:	0043516c 	.word	0x0043516c
  42cf2c:	0043d604 	.word	0x0043d604
  42cf30:	0043d5f0 	.word	0x0043d5f0
  42cf34:	0043d370 	.word	0x0043d370
  42cf38:	0043d618 	.word	0x0043d618
  42cf3c:	2d00      	cmp	r5, #0
  42cf3e:	f43f ae2b 	beq.w	42cb98 <d_type+0x36c>
  42cf42:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
  42cf46:	4299      	cmp	r1, r3
  42cf48:	f6bf ae26 	bge.w	42cb98 <d_type+0x36c>
  42cf4c:	69e2      	ldr	r2, [r4, #28]
  42cf4e:	4603      	mov	r3, r0
  42cf50:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  42cf54:	3101      	adds	r1, #1
  42cf56:	462a      	mov	r2, r5
  42cf58:	6221      	str	r1, [r4, #32]
  42cf5a:	e56a      	b.n	42ca32 <d_type+0x206>
  42cf5c:	2810      	cmp	r0, #16
  42cf5e:	f47f ae1b 	bne.w	42cb98 <d_type+0x36c>
  42cf62:	3301      	adds	r3, #1
  42cf64:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
  42cf68:	60e3      	str	r3, [r4, #12]
  42cf6a:	428a      	cmp	r2, r1
  42cf6c:	da24      	bge.n	42cfb8 <d_type+0x78c>
  42cf6e:	2314      	movs	r3, #20
  42cf70:	6920      	ldr	r0, [r4, #16]
  42cf72:	2500      	movs	r5, #0
  42cf74:	fb02 f303 	mul.w	r3, r2, r3
  42cf78:	3201      	adds	r2, #1
  42cf7a:	18c1      	adds	r1, r0, r3
  42cf7c:	e9c1 5501 	strd	r5, r5, [r1, #4]
  42cf80:	6162      	str	r2, [r4, #20]
  42cf82:	2227      	movs	r2, #39	@ 0x27
  42cf84:	9100      	str	r1, [sp, #0]
  42cf86:	54c2      	strb	r2, [r0, r3]
  42cf88:	4a0e      	ldr	r2, [pc, #56]	@ (42cfc4 <d_type+0x798>)
  42cf8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42cf8c:	60ca      	str	r2, [r1, #12]
  42cf8e:	330f      	adds	r3, #15
  42cf90:	e686      	b.n	42cca0 <d_type+0x474>
  42cf92:	3203      	adds	r2, #3
  42cf94:	2301      	movs	r3, #1
  42cf96:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  42cf98:	4620      	mov	r0, r4
  42cf9a:	60e2      	str	r2, [r4, #12]
  42cf9c:	6323      	str	r3, [r4, #48]	@ 0x30
  42cf9e:	f000 fb75 	bl	42d68c <d_expression_1>
  42cfa2:	6325      	str	r5, [r4, #48]	@ 0x30
  42cfa4:	4605      	mov	r5, r0
  42cfa6:	2800      	cmp	r0, #0
  42cfa8:	f47f ae13 	bne.w	42cbd2 <d_type+0x3a6>
  42cfac:	e5f4      	b.n	42cb98 <d_type+0x36c>
  42cfae:	4906      	ldr	r1, [pc, #24]	@ (42cfc8 <d_type+0x79c>)
  42cfb0:	a801      	add	r0, sp, #4
  42cfb2:	60e3      	str	r3, [r4, #12]
  42cfb4:	f005 fbf6 	bl	4327a4 <sprintf>
  42cfb8:	2300      	movs	r3, #0
  42cfba:	68db      	ldr	r3, [r3, #12]
  42cfbc:	deff      	udf	#255	@ 0xff
  42cfbe:	68eb      	ldr	r3, [r5, #12]
  42cfc0:	deff      	udf	#255	@ 0xff
  42cfc2:	bf00      	nop
  42cfc4:	0043d62c 	.word	0x0043d62c
  42cfc8:	00435144 	.word	0x00435144

0042cfcc <d_parmlist>:
  42cfcc:	b530      	push	{r4, r5, lr}
  42cfce:	4604      	mov	r4, r0
  42cfd0:	b083      	sub	sp, #12
  42cfd2:	2300      	movs	r3, #0
  42cfd4:	68e2      	ldr	r2, [r4, #12]
  42cfd6:	ad01      	add	r5, sp, #4
  42cfd8:	9301      	str	r3, [sp, #4]
  42cfda:	4620      	mov	r0, r4
  42cfdc:	7813      	ldrb	r3, [r2, #0]
  42cfde:	2b4f      	cmp	r3, #79	@ 0x4f
  42cfe0:	d017      	beq.n	42d012 <d_parmlist+0x46>
  42cfe2:	d81f      	bhi.n	42d024 <d_parmlist+0x58>
  42cfe4:	2b2e      	cmp	r3, #46	@ 0x2e
  42cfe6:	d017      	beq.n	42d018 <d_parmlist+0x4c>
  42cfe8:	2b45      	cmp	r3, #69	@ 0x45
  42cfea:	d015      	beq.n	42d018 <d_parmlist+0x4c>
  42cfec:	b1a3      	cbz	r3, 42d018 <d_parmlist+0x4c>
  42cfee:	f7ff fc1d 	bl	42c82c <d_type>
  42cff2:	4602      	mov	r2, r0
  42cff4:	2300      	movs	r3, #0
  42cff6:	212e      	movs	r1, #46	@ 0x2e
  42cff8:	4620      	mov	r0, r4
  42cffa:	b33a      	cbz	r2, 42d04c <d_parmlist+0x80>
  42cffc:	f7fe ff40 	bl	42be80 <d_make_comp>
  42d000:	6028      	str	r0, [r5, #0]
  42d002:	b318      	cbz	r0, 42d04c <d_parmlist+0x80>
  42d004:	68e2      	ldr	r2, [r4, #12]
  42d006:	f100 0510 	add.w	r5, r0, #16
  42d00a:	4620      	mov	r0, r4
  42d00c:	7813      	ldrb	r3, [r2, #0]
  42d00e:	2b4f      	cmp	r3, #79	@ 0x4f
  42d010:	d1e7      	bne.n	42cfe2 <d_parmlist+0x16>
  42d012:	7853      	ldrb	r3, [r2, #1]
  42d014:	2b45      	cmp	r3, #69	@ 0x45
  42d016:	d1ea      	bne.n	42cfee <d_parmlist+0x22>
  42d018:	9801      	ldr	r0, [sp, #4]
  42d01a:	b1b8      	cbz	r0, 42d04c <d_parmlist+0x80>
  42d01c:	6903      	ldr	r3, [r0, #16]
  42d01e:	b13b      	cbz	r3, 42d030 <d_parmlist+0x64>
  42d020:	b003      	add	sp, #12
  42d022:	bd30      	pop	{r4, r5, pc}
  42d024:	2b52      	cmp	r3, #82	@ 0x52
  42d026:	d1e2      	bne.n	42cfee <d_parmlist+0x22>
  42d028:	7853      	ldrb	r3, [r2, #1]
  42d02a:	2b45      	cmp	r3, #69	@ 0x45
  42d02c:	d1df      	bne.n	42cfee <d_parmlist+0x22>
  42d02e:	e7f3      	b.n	42d018 <d_parmlist+0x4c>
  42d030:	68c2      	ldr	r2, [r0, #12]
  42d032:	7811      	ldrb	r1, [r2, #0]
  42d034:	2927      	cmp	r1, #39	@ 0x27
  42d036:	d1f3      	bne.n	42d020 <d_parmlist+0x54>
  42d038:	68d2      	ldr	r2, [r2, #12]
  42d03a:	7c11      	ldrb	r1, [r2, #16]
  42d03c:	2909      	cmp	r1, #9
  42d03e:	d1ef      	bne.n	42d020 <d_parmlist+0x54>
  42d040:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  42d042:	6852      	ldr	r2, [r2, #4]
  42d044:	1a89      	subs	r1, r1, r2
  42d046:	62e1      	str	r1, [r4, #44]	@ 0x2c
  42d048:	60c3      	str	r3, [r0, #12]
  42d04a:	e7e9      	b.n	42d020 <d_parmlist+0x54>
  42d04c:	2000      	movs	r0, #0
  42d04e:	b003      	add	sp, #12
  42d050:	bd30      	pop	{r4, r5, pc}
  42d052:	bf00      	nop

0042d054 <d_bare_function_type>:
  42d054:	68c3      	ldr	r3, [r0, #12]
  42d056:	b570      	push	{r4, r5, r6, lr}
  42d058:	781a      	ldrb	r2, [r3, #0]
  42d05a:	4605      	mov	r5, r0
  42d05c:	2a4a      	cmp	r2, #74	@ 0x4a
  42d05e:	d01a      	beq.n	42d096 <d_bare_function_type+0x42>
  42d060:	b181      	cbz	r1, 42d084 <d_bare_function_type+0x30>
  42d062:	4628      	mov	r0, r5
  42d064:	f7ff fbe2 	bl	42c82c <d_type>
  42d068:	4604      	mov	r4, r0
  42d06a:	b190      	cbz	r0, 42d092 <d_bare_function_type+0x3e>
  42d06c:	4628      	mov	r0, r5
  42d06e:	f7ff ffad 	bl	42cfcc <d_parmlist>
  42d072:	4603      	mov	r3, r0
  42d074:	b168      	cbz	r0, 42d092 <d_bare_function_type+0x3e>
  42d076:	4622      	mov	r2, r4
  42d078:	4628      	mov	r0, r5
  42d07a:	2129      	movs	r1, #41	@ 0x29
  42d07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42d080:	f7fe befe 	b.w	42be80 <d_make_comp>
  42d084:	4628      	mov	r0, r5
  42d086:	460c      	mov	r4, r1
  42d088:	f7ff ffa0 	bl	42cfcc <d_parmlist>
  42d08c:	4603      	mov	r3, r0
  42d08e:	2800      	cmp	r0, #0
  42d090:	d1f1      	bne.n	42d076 <d_bare_function_type+0x22>
  42d092:	2000      	movs	r0, #0
  42d094:	bd70      	pop	{r4, r5, r6, pc}
  42d096:	3301      	adds	r3, #1
  42d098:	60c3      	str	r3, [r0, #12]
  42d09a:	e7e2      	b.n	42d062 <d_bare_function_type+0xe>

0042d09c <d_function_type>:
  42d09c:	b510      	push	{r4, lr}
  42d09e:	4604      	mov	r4, r0
  42d0a0:	6880      	ldr	r0, [r0, #8]
  42d0a2:	f410 2080 	ands.w	r0, r0, #262144	@ 0x40000
  42d0a6:	d10b      	bne.n	42d0c0 <d_function_type+0x24>
  42d0a8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
  42d0aa:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
  42d0ae:	d806      	bhi.n	42d0be <d_function_type+0x22>
  42d0b0:	1c51      	adds	r1, r2, #1
  42d0b2:	68e3      	ldr	r3, [r4, #12]
  42d0b4:	63e1      	str	r1, [r4, #60]	@ 0x3c
  42d0b6:	7819      	ldrb	r1, [r3, #0]
  42d0b8:	2946      	cmp	r1, #70	@ 0x46
  42d0ba:	d007      	beq.n	42d0cc <d_function_type+0x30>
  42d0bc:	63e2      	str	r2, [r4, #60]	@ 0x3c
  42d0be:	bd10      	pop	{r4, pc}
  42d0c0:	68e3      	ldr	r3, [r4, #12]
  42d0c2:	781a      	ldrb	r2, [r3, #0]
  42d0c4:	2a46      	cmp	r2, #70	@ 0x46
  42d0c6:	d001      	beq.n	42d0cc <d_function_type+0x30>
  42d0c8:	2000      	movs	r0, #0
  42d0ca:	bd10      	pop	{r4, pc}
  42d0cc:	1c5a      	adds	r2, r3, #1
  42d0ce:	60e2      	str	r2, [r4, #12]
  42d0d0:	785a      	ldrb	r2, [r3, #1]
  42d0d2:	2a59      	cmp	r2, #89	@ 0x59
  42d0d4:	d101      	bne.n	42d0da <d_function_type+0x3e>
  42d0d6:	3302      	adds	r3, #2
  42d0d8:	60e3      	str	r3, [r4, #12]
  42d0da:	2101      	movs	r1, #1
  42d0dc:	4620      	mov	r0, r4
  42d0de:	f7ff ffb9 	bl	42d054 <d_bare_function_type>
  42d0e2:	4601      	mov	r1, r0
  42d0e4:	4620      	mov	r0, r4
  42d0e6:	f7fe ffd1 	bl	42c08c <d_ref_qualifier>
  42d0ea:	68e3      	ldr	r3, [r4, #12]
  42d0ec:	781a      	ldrb	r2, [r3, #0]
  42d0ee:	2a45      	cmp	r2, #69	@ 0x45
  42d0f0:	d006      	beq.n	42d100 <d_function_type+0x64>
  42d0f2:	2000      	movs	r0, #0
  42d0f4:	68a3      	ldr	r3, [r4, #8]
  42d0f6:	035b      	lsls	r3, r3, #13
  42d0f8:	d4e1      	bmi.n	42d0be <d_function_type+0x22>
  42d0fa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
  42d0fc:	3a01      	subs	r2, #1
  42d0fe:	e7dd      	b.n	42d0bc <d_function_type+0x20>
  42d100:	3301      	adds	r3, #1
  42d102:	60e3      	str	r3, [r4, #12]
  42d104:	e7f6      	b.n	42d0f4 <d_function_type+0x58>
  42d106:	bf00      	nop

0042d108 <d_template_parm>:
  42d108:	68c3      	ldr	r3, [r0, #12]
  42d10a:	781a      	ldrb	r2, [r3, #0]
  42d10c:	2a54      	cmp	r2, #84	@ 0x54
  42d10e:	d149      	bne.n	42d1a4 <d_template_parm+0x9c>
  42d110:	b570      	push	{r4, r5, r6, lr}
  42d112:	785a      	ldrb	r2, [r3, #1]
  42d114:	4604      	mov	r4, r0
  42d116:	460d      	mov	r5, r1
  42d118:	3a6e      	subs	r2, #110	@ 0x6e
  42d11a:	2a0b      	cmp	r2, #11
  42d11c:	d809      	bhi.n	42d132 <d_template_parm+0x2a>
  42d11e:	e8df f002 	tbb	[pc, r2]
  42d122:	0814      	.short	0x0814
  42d124:	08080822 	.word	0x08080822
  42d128:	08080831 	.word	0x08080831
  42d12c:	0a08      	.short	0x0a08
  42d12e:	2301      	movs	r3, #1
  42d130:	602b      	str	r3, [r5, #0]
  42d132:	2000      	movs	r0, #0
  42d134:	bd70      	pop	{r4, r5, r6, pc}
  42d136:	3302      	adds	r3, #2
  42d138:	2158      	movs	r1, #88	@ 0x58
  42d13a:	2200      	movs	r2, #0
  42d13c:	60c3      	str	r3, [r0, #12]
  42d13e:	4620      	mov	r0, r4
  42d140:	2300      	movs	r3, #0
  42d142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42d146:	f7fe be9b 	b.w	42be80 <d_make_comp>
  42d14a:	3302      	adds	r3, #2
  42d14c:	60c3      	str	r3, [r0, #12]
  42d14e:	f7ff fb6d 	bl	42c82c <d_type>
  42d152:	4602      	mov	r2, r0
  42d154:	2800      	cmp	r0, #0
  42d156:	d0ea      	beq.n	42d12e <d_template_parm+0x26>
  42d158:	4620      	mov	r0, r4
  42d15a:	2159      	movs	r1, #89	@ 0x59
  42d15c:	2300      	movs	r3, #0
  42d15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42d162:	f7fe be8d 	b.w	42be80 <d_make_comp>
  42d166:	3302      	adds	r3, #2
  42d168:	4629      	mov	r1, r5
  42d16a:	60c3      	str	r3, [r0, #12]
  42d16c:	f7ff ffcc 	bl	42d108 <d_template_parm>
  42d170:	4602      	mov	r2, r0
  42d172:	2800      	cmp	r0, #0
  42d174:	d0db      	beq.n	42d12e <d_template_parm+0x26>
  42d176:	4620      	mov	r0, r4
  42d178:	215b      	movs	r1, #91	@ 0x5b
  42d17a:	2300      	movs	r3, #0
  42d17c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42d180:	f7fe be7e 	b.w	42be80 <d_make_comp>
  42d184:	3302      	adds	r3, #2
  42d186:	4629      	mov	r1, r5
  42d188:	60c3      	str	r3, [r0, #12]
  42d18a:	f000 f80d 	bl	42d1a8 <d_template_head>
  42d18e:	4602      	mov	r2, r0
  42d190:	2800      	cmp	r0, #0
  42d192:	d0cc      	beq.n	42d12e <d_template_parm+0x26>
  42d194:	68e3      	ldr	r3, [r4, #12]
  42d196:	7819      	ldrb	r1, [r3, #0]
  42d198:	2945      	cmp	r1, #69	@ 0x45
  42d19a:	d1c8      	bne.n	42d12e <d_template_parm+0x26>
  42d19c:	3301      	adds	r3, #1
  42d19e:	215a      	movs	r1, #90	@ 0x5a
  42d1a0:	60e3      	str	r3, [r4, #12]
  42d1a2:	e7cc      	b.n	42d13e <d_template_parm+0x36>
  42d1a4:	2000      	movs	r0, #0
  42d1a6:	4770      	bx	lr

0042d1a8 <d_template_head>:
  42d1a8:	b570      	push	{r4, r5, r6, lr}
  42d1aa:	2300      	movs	r3, #0
  42d1ac:	b082      	sub	sp, #8
  42d1ae:	4605      	mov	r5, r0
  42d1b0:	460e      	mov	r6, r1
  42d1b2:	ac01      	add	r4, sp, #4
  42d1b4:	9301      	str	r3, [sp, #4]
  42d1b6:	e002      	b.n	42d1be <d_template_head+0x16>
  42d1b8:	6023      	str	r3, [r4, #0]
  42d1ba:	f103 0410 	add.w	r4, r3, #16
  42d1be:	4631      	mov	r1, r6
  42d1c0:	4628      	mov	r0, r5
  42d1c2:	f7ff ffa1 	bl	42d108 <d_template_parm>
  42d1c6:	4603      	mov	r3, r0
  42d1c8:	2800      	cmp	r0, #0
  42d1ca:	d1f5      	bne.n	42d1b8 <d_template_head+0x10>
  42d1cc:	9a01      	ldr	r2, [sp, #4]
  42d1ce:	b132      	cbz	r2, 42d1de <d_template_head+0x36>
  42d1d0:	2157      	movs	r1, #87	@ 0x57
  42d1d2:	4628      	mov	r0, r5
  42d1d4:	b002      	add	sp, #8
  42d1d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42d1da:	f7fe be51 	b.w	42be80 <d_make_comp>
  42d1de:	b002      	add	sp, #8
  42d1e0:	bd70      	pop	{r4, r5, r6, pc}
  42d1e2:	bf00      	nop

0042d1e4 <d_operator_name>:
  42d1e4:	68c3      	ldr	r3, [r0, #12]
  42d1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42d1ea:	781f      	ldrb	r7, [r3, #0]
  42d1ec:	4606      	mov	r6, r0
  42d1ee:	2f00      	cmp	r7, #0
  42d1f0:	d037      	beq.n	42d262 <d_operator_name+0x7e>
  42d1f2:	1c5a      	adds	r2, r3, #1
  42d1f4:	60c2      	str	r2, [r0, #12]
  42d1f6:	f893 8001 	ldrb.w	r8, [r3, #1]
  42d1fa:	781f      	ldrb	r7, [r3, #0]
  42d1fc:	f1b8 0f00 	cmp.w	r8, #0
  42d200:	d131      	bne.n	42d266 <d_operator_name+0x82>
  42d202:	2148      	movs	r1, #72	@ 0x48
  42d204:	2200      	movs	r2, #0
  42d206:	4d39      	ldr	r5, [pc, #228]	@ (42d2ec <d_operator_name+0x108>)
  42d208:	1a8b      	subs	r3, r1, r2
  42d20a:	bf48      	it	mi
  42d20c:	3301      	addmi	r3, #1
  42d20e:	eb02 0363 	add.w	r3, r2, r3, asr #1
  42d212:	0118      	lsls	r0, r3, #4
  42d214:	eb05 1e03 	add.w	lr, r5, r3, lsl #4
  42d218:	582c      	ldr	r4, [r5, r0]
  42d21a:	f894 c000 	ldrb.w	ip, [r4]
  42d21e:	45bc      	cmp	ip, r7
  42d220:	d007      	beq.n	42d232 <d_operator_name+0x4e>
  42d222:	bf94      	ite	ls
  42d224:	1c5a      	addls	r2, r3, #1
  42d226:	4619      	movhi	r1, r3
  42d228:	428a      	cmp	r2, r1
  42d22a:	d1ed      	bne.n	42d208 <d_operator_name+0x24>
  42d22c:	2000      	movs	r0, #0
  42d22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42d232:	7860      	ldrb	r0, [r4, #1]
  42d234:	4540      	cmp	r0, r8
  42d236:	d1f4      	bne.n	42d222 <d_operator_name+0x3e>
  42d238:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
  42d23c:	4293      	cmp	r3, r2
  42d23e:	daf5      	bge.n	42d22c <d_operator_name+0x48>
  42d240:	6932      	ldr	r2, [r6, #16]
  42d242:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42d246:	2400      	movs	r4, #0
  42d248:	3301      	adds	r3, #1
  42d24a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  42d24e:	e9c0 4401 	strd	r4, r4, [r0, #4]
  42d252:	6173      	str	r3, [r6, #20]
  42d254:	2332      	movs	r3, #50	@ 0x32
  42d256:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42d25a:	f8c0 e00c 	str.w	lr, [r0, #12]
  42d25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42d262:	46b8      	mov	r8, r7
  42d264:	e7cd      	b.n	42d202 <d_operator_name+0x1e>
  42d266:	1c9a      	adds	r2, r3, #2
  42d268:	2f76      	cmp	r7, #118	@ 0x76
  42d26a:	60c2      	str	r2, [r0, #12]
  42d26c:	f893 8001 	ldrb.w	r8, [r3, #1]
  42d270:	d11f      	bne.n	42d2b2 <d_operator_name+0xce>
  42d272:	f1a8 0430 	sub.w	r4, r8, #48	@ 0x30
  42d276:	b2e3      	uxtb	r3, r4
  42d278:	2b09      	cmp	r3, #9
  42d27a:	d8c2      	bhi.n	42d202 <d_operator_name+0x1e>
  42d27c:	f7ff f97e 	bl	42c57c <d_source_name>
  42d280:	4602      	mov	r2, r0
  42d282:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
  42d286:	428b      	cmp	r3, r1
  42d288:	dad0      	bge.n	42d22c <d_operator_name+0x48>
  42d28a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  42d28e:	6935      	ldr	r5, [r6, #16]
  42d290:	3301      	adds	r3, #1
  42d292:	2100      	movs	r1, #0
  42d294:	0087      	lsls	r7, r0, #2
  42d296:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  42d29a:	e9c0 1101 	strd	r1, r1, [r0, #4]
  42d29e:	6173      	str	r3, [r6, #20]
  42d2a0:	2a00      	cmp	r2, #0
  42d2a2:	d0c3      	beq.n	42d22c <d_operator_name+0x48>
  42d2a4:	2333      	movs	r3, #51	@ 0x33
  42d2a6:	e9c0 1101 	strd	r1, r1, [r0, #4]
  42d2aa:	55eb      	strb	r3, [r5, r7]
  42d2ac:	e9c0 4203 	strd	r4, r2, [r0, #12]
  42d2b0:	e7bd      	b.n	42d22e <d_operator_name+0x4a>
  42d2b2:	2f63      	cmp	r7, #99	@ 0x63
  42d2b4:	d1a5      	bne.n	42d202 <d_operator_name+0x1e>
  42d2b6:	f1b8 0f76 	cmp.w	r8, #118	@ 0x76
  42d2ba:	d1a2      	bne.n	42d202 <d_operator_name+0x1e>
  42d2bc:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	@ 0x30
  42d2c0:	fab3 f383 	clz	r3, r3
  42d2c4:	095b      	lsrs	r3, r3, #5
  42d2c6:	6343      	str	r3, [r0, #52]	@ 0x34
  42d2c8:	f7ff fab0 	bl	42c82c <d_type>
  42d2cc:	6b73      	ldr	r3, [r6, #52]	@ 0x34
  42d2ce:	4602      	mov	r2, r0
  42d2d0:	b933      	cbnz	r3, 42d2e0 <d_operator_name+0xfc>
  42d2d2:	2134      	movs	r1, #52	@ 0x34
  42d2d4:	4630      	mov	r0, r6
  42d2d6:	f7fe fdd3 	bl	42be80 <d_make_comp>
  42d2da:	6374      	str	r4, [r6, #52]	@ 0x34
  42d2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42d2e0:	2300      	movs	r3, #0
  42d2e2:	2135      	movs	r1, #53	@ 0x35
  42d2e4:	4630      	mov	r0, r6
  42d2e6:	f7fe fdcb 	bl	42be80 <d_make_comp>
  42d2ea:	e7f6      	b.n	42d2da <d_operator_name+0xf6>
  42d2ec:	0043cee0 	.word	0x0043cee0

0042d2f0 <d_unqualified_name>:
  42d2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42d2f4:	b084      	sub	sp, #16
  42d2f6:	460e      	mov	r6, r1
  42d2f8:	4604      	mov	r4, r0
  42d2fa:	a901      	add	r1, sp, #4
  42d2fc:	9201      	str	r2, [sp, #4]
  42d2fe:	f7ff fa65 	bl	42c7cc <d_maybe_module_name>
  42d302:	2800      	cmp	r0, #0
  42d304:	f000 80d8 	beq.w	42d4b8 <d_unqualified_name+0x1c8>
  42d308:	68e2      	ldr	r2, [r4, #12]
  42d30a:	7813      	ldrb	r3, [r2, #0]
  42d30c:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
  42d310:	2909      	cmp	r1, #9
  42d312:	d979      	bls.n	42d408 <d_unqualified_name+0x118>
  42d314:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
  42d318:	2919      	cmp	r1, #25
  42d31a:	d829      	bhi.n	42d370 <d_unqualified_name+0x80>
  42d31c:	2b6f      	cmp	r3, #111	@ 0x6f
  42d31e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  42d320:	f000 80a1 	beq.w	42d466 <d_unqualified_name+0x176>
  42d324:	4620      	mov	r0, r4
  42d326:	f7ff ff5d 	bl	42d1e4 <d_operator_name>
  42d32a:	6325      	str	r5, [r4, #48]	@ 0x30
  42d32c:	4605      	mov	r5, r0
  42d32e:	2800      	cmp	r0, #0
  42d330:	f000 80b4 	beq.w	42d49c <d_unqualified_name+0x1ac>
  42d334:	7803      	ldrb	r3, [r0, #0]
  42d336:	2b32      	cmp	r3, #50	@ 0x32
  42d338:	d16a      	bne.n	42d410 <d_unqualified_name+0x120>
  42d33a:	68c2      	ldr	r2, [r0, #12]
  42d33c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42d33e:	6891      	ldr	r1, [r2, #8]
  42d340:	3307      	adds	r3, #7
  42d342:	6812      	ldr	r2, [r2, #0]
  42d344:	440b      	add	r3, r1
  42d346:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42d348:	7813      	ldrb	r3, [r2, #0]
  42d34a:	2b6c      	cmp	r3, #108	@ 0x6c
  42d34c:	d160      	bne.n	42d410 <d_unqualified_name+0x120>
  42d34e:	7853      	ldrb	r3, [r2, #1]
  42d350:	2b69      	cmp	r3, #105	@ 0x69
  42d352:	d15d      	bne.n	42d410 <d_unqualified_name+0x120>
  42d354:	7893      	ldrb	r3, [r2, #2]
  42d356:	2b00      	cmp	r3, #0
  42d358:	d15a      	bne.n	42d410 <d_unqualified_name+0x120>
  42d35a:	4620      	mov	r0, r4
  42d35c:	f7ff f90e 	bl	42c57c <d_source_name>
  42d360:	462a      	mov	r2, r5
  42d362:	4603      	mov	r3, r0
  42d364:	2137      	movs	r1, #55	@ 0x37
  42d366:	4620      	mov	r0, r4
  42d368:	f7fe fd8a 	bl	42be80 <d_make_comp>
  42d36c:	4605      	mov	r5, r0
  42d36e:	e04f      	b.n	42d410 <d_unqualified_name+0x120>
  42d370:	2b44      	cmp	r3, #68	@ 0x44
  42d372:	f000 8081 	beq.w	42d478 <d_unqualified_name+0x188>
  42d376:	f1a3 0143 	sub.w	r1, r3, #67	@ 0x43
  42d37a:	2901      	cmp	r1, #1
  42d37c:	f240 80e5 	bls.w	42d54a <d_unqualified_name+0x25a>
  42d380:	2b4c      	cmp	r3, #76	@ 0x4c
  42d382:	f000 808d 	beq.w	42d4a0 <d_unqualified_name+0x1b0>
  42d386:	2b55      	cmp	r3, #85	@ 0x55
  42d388:	f040 8096 	bne.w	42d4b8 <d_unqualified_name+0x1c8>
  42d38c:	7853      	ldrb	r3, [r2, #1]
  42d38e:	2b6c      	cmp	r3, #108	@ 0x6c
  42d390:	f000 80ed 	beq.w	42d56e <d_unqualified_name+0x27e>
  42d394:	2b74      	cmp	r3, #116	@ 0x74
  42d396:	f040 808f 	bne.w	42d4b8 <d_unqualified_name+0x1c8>
  42d39a:	1c53      	adds	r3, r2, #1
  42d39c:	9d01      	ldr	r5, [sp, #4]
  42d39e:	60e3      	str	r3, [r4, #12]
  42d3a0:	7853      	ldrb	r3, [r2, #1]
  42d3a2:	2b74      	cmp	r3, #116	@ 0x74
  42d3a4:	d17a      	bne.n	42d49c <d_unqualified_name+0x1ac>
  42d3a6:	1c93      	adds	r3, r2, #2
  42d3a8:	60e3      	str	r3, [r4, #12]
  42d3aa:	7892      	ldrb	r2, [r2, #2]
  42d3ac:	2a5f      	cmp	r2, #95	@ 0x5f
  42d3ae:	f000 8163 	beq.w	42d678 <d_unqualified_name+0x388>
  42d3b2:	2a6e      	cmp	r2, #110	@ 0x6e
  42d3b4:	f000 8164 	beq.w	42d680 <d_unqualified_name+0x390>
  42d3b8:	4620      	mov	r0, r4
  42d3ba:	f7fe fdff 	bl	42bfbc <d_number>
  42d3be:	1c47      	adds	r7, r0, #1
  42d3c0:	d46c      	bmi.n	42d49c <d_unqualified_name+0x1ac>
  42d3c2:	68e3      	ldr	r3, [r4, #12]
  42d3c4:	781a      	ldrb	r2, [r3, #0]
  42d3c6:	2a5f      	cmp	r2, #95	@ 0x5f
  42d3c8:	d168      	bne.n	42d49c <d_unqualified_name+0x1ac>
  42d3ca:	3301      	adds	r3, #1
  42d3cc:	6962      	ldr	r2, [r4, #20]
  42d3ce:	60e3      	str	r3, [r4, #12]
  42d3d0:	69a3      	ldr	r3, [r4, #24]
  42d3d2:	429a      	cmp	r2, r3
  42d3d4:	da62      	bge.n	42d49c <d_unqualified_name+0x1ac>
  42d3d6:	6923      	ldr	r3, [r4, #16]
  42d3d8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  42d3dc:	2000      	movs	r0, #0
  42d3de:	3201      	adds	r2, #1
  42d3e0:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  42d3e4:	f04f 0c49 	mov.w	ip, #73	@ 0x49
  42d3e8:	e9c5 0001 	strd	r0, r0, [r5, #4]
  42d3ec:	6162      	str	r2, [r4, #20]
  42d3ee:	f803 c021 	strb.w	ip, [r3, r1, lsl #2]
  42d3f2:	6a23      	ldr	r3, [r4, #32]
  42d3f4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  42d3f6:	60ef      	str	r7, [r5, #12]
  42d3f8:	4293      	cmp	r3, r2
  42d3fa:	da4f      	bge.n	42d49c <d_unqualified_name+0x1ac>
  42d3fc:	69e2      	ldr	r2, [r4, #28]
  42d3fe:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
  42d402:	3301      	adds	r3, #1
  42d404:	6223      	str	r3, [r4, #32]
  42d406:	e003      	b.n	42d410 <d_unqualified_name+0x120>
  42d408:	4620      	mov	r0, r4
  42d40a:	f7ff f8b7 	bl	42c57c <d_source_name>
  42d40e:	4605      	mov	r5, r0
  42d410:	9b01      	ldr	r3, [sp, #4]
  42d412:	b12b      	cbz	r3, 42d420 <d_unqualified_name+0x130>
  42d414:	462a      	mov	r2, r5
  42d416:	2155      	movs	r1, #85	@ 0x55
  42d418:	4620      	mov	r0, r4
  42d41a:	f7fe fd31 	bl	42be80 <d_make_comp>
  42d41e:	4605      	mov	r5, r0
  42d420:	68e3      	ldr	r3, [r4, #12]
  42d422:	781a      	ldrb	r2, [r3, #0]
  42d424:	2a42      	cmp	r2, #66	@ 0x42
  42d426:	d00b      	beq.n	42d440 <d_unqualified_name+0x150>
  42d428:	b136      	cbz	r6, 42d438 <d_unqualified_name+0x148>
  42d42a:	462b      	mov	r3, r5
  42d42c:	4632      	mov	r2, r6
  42d42e:	2101      	movs	r1, #1
  42d430:	4620      	mov	r0, r4
  42d432:	f7fe fd25 	bl	42be80 <d_make_comp>
  42d436:	4605      	mov	r5, r0
  42d438:	4628      	mov	r0, r5
  42d43a:	b004      	add	sp, #16
  42d43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42d440:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
  42d442:	3301      	adds	r3, #1
  42d444:	4620      	mov	r0, r4
  42d446:	60e3      	str	r3, [r4, #12]
  42d448:	f7ff f898 	bl	42c57c <d_source_name>
  42d44c:	462a      	mov	r2, r5
  42d44e:	4603      	mov	r3, r0
  42d450:	214d      	movs	r1, #77	@ 0x4d
  42d452:	4620      	mov	r0, r4
  42d454:	f7fe fd14 	bl	42be80 <d_make_comp>
  42d458:	68e3      	ldr	r3, [r4, #12]
  42d45a:	4605      	mov	r5, r0
  42d45c:	781a      	ldrb	r2, [r3, #0]
  42d45e:	2a42      	cmp	r2, #66	@ 0x42
  42d460:	d0ef      	beq.n	42d442 <d_unqualified_name+0x152>
  42d462:	62a7      	str	r7, [r4, #40]	@ 0x28
  42d464:	e7e0      	b.n	42d428 <d_unqualified_name+0x138>
  42d466:	7853      	ldrb	r3, [r2, #1]
  42d468:	2b6e      	cmp	r3, #110	@ 0x6e
  42d46a:	f47f af5b 	bne.w	42d324 <d_unqualified_name+0x34>
  42d46e:	3202      	adds	r2, #2
  42d470:	2300      	movs	r3, #0
  42d472:	60e2      	str	r2, [r4, #12]
  42d474:	6323      	str	r3, [r4, #48]	@ 0x30
  42d476:	e755      	b.n	42d324 <d_unqualified_name+0x34>
  42d478:	7853      	ldrb	r3, [r2, #1]
  42d47a:	2b43      	cmp	r3, #67	@ 0x43
  42d47c:	d047      	beq.n	42d50e <d_unqualified_name+0x21e>
  42d47e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  42d480:	b121      	cbz	r1, 42d48c <d_unqualified_name+0x19c>
  42d482:	7808      	ldrb	r0, [r1, #0]
  42d484:	2800      	cmp	r0, #0
  42d486:	d067      	beq.n	42d558 <d_unqualified_name+0x268>
  42d488:	2818      	cmp	r0, #24
  42d48a:	d065      	beq.n	42d558 <d_unqualified_name+0x268>
  42d48c:	3b30      	subs	r3, #48	@ 0x30
  42d48e:	2b05      	cmp	r3, #5
  42d490:	d804      	bhi.n	42d49c <d_unqualified_name+0x1ac>
  42d492:	e8df f003 	tbb	[pc, r3]
  42d496:	1330      	.short	0x1330
  42d498:	39330336 	.word	0x39330336
  42d49c:	2500      	movs	r5, #0
  42d49e:	e7b7      	b.n	42d410 <d_unqualified_name+0x120>
  42d4a0:	3201      	adds	r2, #1
  42d4a2:	4620      	mov	r0, r4
  42d4a4:	60e2      	str	r2, [r4, #12]
  42d4a6:	f7ff f869 	bl	42c57c <d_source_name>
  42d4aa:	4605      	mov	r5, r0
  42d4ac:	b120      	cbz	r0, 42d4b8 <d_unqualified_name+0x1c8>
  42d4ae:	4620      	mov	r0, r4
  42d4b0:	f7fe fe06 	bl	42c0c0 <d_discriminator>
  42d4b4:	2800      	cmp	r0, #0
  42d4b6:	d1ab      	bne.n	42d410 <d_unqualified_name+0x120>
  42d4b8:	2500      	movs	r5, #0
  42d4ba:	e7bd      	b.n	42d438 <d_unqualified_name+0x148>
  42d4bc:	f04f 0c02 	mov.w	ip, #2
  42d4c0:	3202      	adds	r2, #2
  42d4c2:	60e2      	str	r2, [r4, #12]
  42d4c4:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42d4c8:	4293      	cmp	r3, r2
  42d4ca:	dae7      	bge.n	42d49c <d_unqualified_name+0x1ac>
  42d4cc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  42d4d0:	6927      	ldr	r7, [r4, #16]
  42d4d2:	3301      	adds	r3, #1
  42d4d4:	2000      	movs	r0, #0
  42d4d6:	eb07 0582 	add.w	r5, r7, r2, lsl #2
  42d4da:	0092      	lsls	r2, r2, #2
  42d4dc:	e9c5 0001 	strd	r0, r0, [r5, #4]
  42d4e0:	6163      	str	r3, [r4, #20]
  42d4e2:	2900      	cmp	r1, #0
  42d4e4:	d0da      	beq.n	42d49c <d_unqualified_name+0x1ac>
  42d4e6:	2308      	movs	r3, #8
  42d4e8:	e9c5 0001 	strd	r0, r0, [r5, #4]
  42d4ec:	54bb      	strb	r3, [r7, r2]
  42d4ee:	f885 c00c 	strb.w	ip, [r5, #12]
  42d4f2:	6129      	str	r1, [r5, #16]
  42d4f4:	e78c      	b.n	42d410 <d_unqualified_name+0x120>
  42d4f6:	f04f 0c01 	mov.w	ip, #1
  42d4fa:	e7e1      	b.n	42d4c0 <d_unqualified_name+0x1d0>
  42d4fc:	f04f 0c04 	mov.w	ip, #4
  42d500:	e7de      	b.n	42d4c0 <d_unqualified_name+0x1d0>
  42d502:	f04f 0c03 	mov.w	ip, #3
  42d506:	e7db      	b.n	42d4c0 <d_unqualified_name+0x1d0>
  42d508:	f04f 0c05 	mov.w	ip, #5
  42d50c:	e7d8      	b.n	42d4c0 <d_unqualified_name+0x1d0>
  42d50e:	3202      	adds	r2, #2
  42d510:	2700      	movs	r7, #0
  42d512:	60e2      	str	r2, [r4, #12]
  42d514:	4620      	mov	r0, r4
  42d516:	46b8      	mov	r8, r7
  42d518:	f7ff f830 	bl	42c57c <d_source_name>
  42d51c:	2300      	movs	r3, #0
  42d51e:	4602      	mov	r2, r0
  42d520:	2152      	movs	r1, #82	@ 0x52
  42d522:	4620      	mov	r0, r4
  42d524:	f7fe fcac 	bl	42be80 <d_make_comp>
  42d528:	4607      	mov	r7, r0
  42d52a:	f1b8 0f00 	cmp.w	r8, #0
  42d52e:	d00a      	beq.n	42d546 <d_unqualified_name+0x256>
  42d530:	f8c8 0010 	str.w	r0, [r8, #16]
  42d534:	2f00      	cmp	r7, #0
  42d536:	d0b1      	beq.n	42d49c <d_unqualified_name+0x1ac>
  42d538:	68e3      	ldr	r3, [r4, #12]
  42d53a:	781a      	ldrb	r2, [r3, #0]
  42d53c:	2a45      	cmp	r2, #69	@ 0x45
  42d53e:	d1e9      	bne.n	42d514 <d_unqualified_name+0x224>
  42d540:	3301      	adds	r3, #1
  42d542:	60e3      	str	r3, [r4, #12]
  42d544:	e764      	b.n	42d410 <d_unqualified_name+0x120>
  42d546:	4605      	mov	r5, r0
  42d548:	e7f4      	b.n	42d534 <d_unqualified_name+0x244>
  42d54a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  42d54c:	2900      	cmp	r1, #0
  42d54e:	d05a      	beq.n	42d606 <d_unqualified_name+0x316>
  42d550:	780b      	ldrb	r3, [r1, #0]
  42d552:	b10b      	cbz	r3, 42d558 <d_unqualified_name+0x268>
  42d554:	2b18      	cmp	r3, #24
  42d556:	d156      	bne.n	42d606 <d_unqualified_name+0x316>
  42d558:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42d55a:	6908      	ldr	r0, [r1, #16]
  42d55c:	4403      	add	r3, r0
  42d55e:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42d560:	7813      	ldrb	r3, [r2, #0]
  42d562:	2b43      	cmp	r3, #67	@ 0x43
  42d564:	d04f      	beq.n	42d606 <d_unqualified_name+0x316>
  42d566:	2b44      	cmp	r3, #68	@ 0x44
  42d568:	d198      	bne.n	42d49c <d_unqualified_name+0x1ac>
  42d56a:	7853      	ldrb	r3, [r2, #1]
  42d56c:	e78e      	b.n	42d48c <d_unqualified_name+0x19c>
  42d56e:	1c53      	adds	r3, r2, #1
  42d570:	60e3      	str	r3, [r4, #12]
  42d572:	7853      	ldrb	r3, [r2, #1]
  42d574:	2b6c      	cmp	r3, #108	@ 0x6c
  42d576:	d191      	bne.n	42d49c <d_unqualified_name+0x1ac>
  42d578:	3202      	adds	r2, #2
  42d57a:	2300      	movs	r3, #0
  42d57c:	a903      	add	r1, sp, #12
  42d57e:	4620      	mov	r0, r4
  42d580:	60e2      	str	r2, [r4, #12]
  42d582:	9303      	str	r3, [sp, #12]
  42d584:	f7ff fe10 	bl	42d1a8 <d_template_head>
  42d588:	f8dd 800c 	ldr.w	r8, [sp, #12]
  42d58c:	4607      	mov	r7, r0
  42d58e:	f1b8 0f00 	cmp.w	r8, #0
  42d592:	d183      	bne.n	42d49c <d_unqualified_name+0x1ac>
  42d594:	4620      	mov	r0, r4
  42d596:	f7ff fd19 	bl	42cfcc <d_parmlist>
  42d59a:	2800      	cmp	r0, #0
  42d59c:	f43f af7e 	beq.w	42d49c <d_unqualified_name+0x1ac>
  42d5a0:	2f00      	cmp	r7, #0
  42d5a2:	d06b      	beq.n	42d67c <d_unqualified_name+0x38c>
  42d5a4:	6138      	str	r0, [r7, #16]
  42d5a6:	68e2      	ldr	r2, [r4, #12]
  42d5a8:	7813      	ldrb	r3, [r2, #0]
  42d5aa:	2b45      	cmp	r3, #69	@ 0x45
  42d5ac:	f47f af76 	bne.w	42d49c <d_unqualified_name+0x1ac>
  42d5b0:	1c53      	adds	r3, r2, #1
  42d5b2:	60e3      	str	r3, [r4, #12]
  42d5b4:	7852      	ldrb	r2, [r2, #1]
  42d5b6:	2a5f      	cmp	r2, #95	@ 0x5f
  42d5b8:	d00e      	beq.n	42d5d8 <d_unqualified_name+0x2e8>
  42d5ba:	2a6e      	cmp	r2, #110	@ 0x6e
  42d5bc:	f43f af6e 	beq.w	42d49c <d_unqualified_name+0x1ac>
  42d5c0:	4620      	mov	r0, r4
  42d5c2:	f7fe fcfb 	bl	42bfbc <d_number>
  42d5c6:	f110 0801 	adds.w	r8, r0, #1
  42d5ca:	f53f af67 	bmi.w	42d49c <d_unqualified_name+0x1ac>
  42d5ce:	68e3      	ldr	r3, [r4, #12]
  42d5d0:	781a      	ldrb	r2, [r3, #0]
  42d5d2:	2a5f      	cmp	r2, #95	@ 0x5f
  42d5d4:	f47f af62 	bne.w	42d49c <d_unqualified_name+0x1ac>
  42d5d8:	3301      	adds	r3, #1
  42d5da:	60e3      	str	r3, [r4, #12]
  42d5dc:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42d5e0:	4293      	cmp	r3, r2
  42d5e2:	f6bf af5b 	bge.w	42d49c <d_unqualified_name+0x1ac>
  42d5e6:	6922      	ldr	r2, [r4, #16]
  42d5e8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42d5ec:	2000      	movs	r0, #0
  42d5ee:	3301      	adds	r3, #1
  42d5f0:	eb02 0581 	add.w	r5, r2, r1, lsl #2
  42d5f4:	e9c5 0001 	strd	r0, r0, [r5, #4]
  42d5f8:	6163      	str	r3, [r4, #20]
  42d5fa:	2347      	movs	r3, #71	@ 0x47
  42d5fc:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42d600:	e9c5 7803 	strd	r7, r8, [r5, #12]
  42d604:	e704      	b.n	42d410 <d_unqualified_name+0x120>
  42d606:	7853      	ldrb	r3, [r2, #1]
  42d608:	2b49      	cmp	r3, #73	@ 0x49
  42d60a:	d024      	beq.n	42d656 <d_unqualified_name+0x366>
  42d60c:	f1a3 0031 	sub.w	r0, r3, #49	@ 0x31
  42d610:	2804      	cmp	r0, #4
  42d612:	f63f af43 	bhi.w	42d49c <d_unqualified_name+0x1ac>
  42d616:	3b30      	subs	r3, #48	@ 0x30
  42d618:	3202      	adds	r2, #2
  42d61a:	b2df      	uxtb	r7, r3
  42d61c:	60e2      	str	r2, [r4, #12]
  42d61e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42d622:	4293      	cmp	r3, r2
  42d624:	f6bf af3a 	bge.w	42d49c <d_unqualified_name+0x1ac>
  42d628:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  42d62c:	f8d4 c010 	ldr.w	ip, [r4, #16]
  42d630:	3301      	adds	r3, #1
  42d632:	2000      	movs	r0, #0
  42d634:	eb0c 0582 	add.w	r5, ip, r2, lsl #2
  42d638:	0092      	lsls	r2, r2, #2
  42d63a:	e9c5 0001 	strd	r0, r0, [r5, #4]
  42d63e:	6163      	str	r3, [r4, #20]
  42d640:	2900      	cmp	r1, #0
  42d642:	f43f af2b 	beq.w	42d49c <d_unqualified_name+0x1ac>
  42d646:	2307      	movs	r3, #7
  42d648:	e9c5 0001 	strd	r0, r0, [r5, #4]
  42d64c:	f80c 3002 	strb.w	r3, [ip, r2]
  42d650:	732f      	strb	r7, [r5, #12]
  42d652:	6129      	str	r1, [r5, #16]
  42d654:	e6dc      	b.n	42d410 <d_unqualified_name+0x120>
  42d656:	1c53      	adds	r3, r2, #1
  42d658:	60e3      	str	r3, [r4, #12]
  42d65a:	7893      	ldrb	r3, [r2, #2]
  42d65c:	f1a3 0131 	sub.w	r1, r3, #49	@ 0x31
  42d660:	2904      	cmp	r1, #4
  42d662:	f63f af1b 	bhi.w	42d49c <d_unqualified_name+0x1ac>
  42d666:	3203      	adds	r2, #3
  42d668:	3b30      	subs	r3, #48	@ 0x30
  42d66a:	4620      	mov	r0, r4
  42d66c:	60e2      	str	r2, [r4, #12]
  42d66e:	b2df      	uxtb	r7, r3
  42d670:	f7ff f8dc 	bl	42c82c <d_type>
  42d674:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  42d676:	e7d2      	b.n	42d61e <d_unqualified_name+0x32e>
  42d678:	2700      	movs	r7, #0
  42d67a:	e6a6      	b.n	42d3ca <d_unqualified_name+0xda>
  42d67c:	4607      	mov	r7, r0
  42d67e:	e792      	b.n	42d5a6 <d_unqualified_name+0x2b6>
  42d680:	2d00      	cmp	r5, #0
  42d682:	f43f aed1 	beq.w	42d428 <d_unqualified_name+0x138>
  42d686:	462b      	mov	r3, r5
  42d688:	2500      	movs	r5, #0
  42d68a:	e6c3      	b.n	42d414 <d_unqualified_name+0x124>

0042d68c <d_expression_1>:
  42d68c:	68c2      	ldr	r2, [r0, #12]
  42d68e:	7813      	ldrb	r3, [r2, #0]
  42d690:	2b4c      	cmp	r3, #76	@ 0x4c
  42d692:	f000 80f9 	beq.w	42d888 <d_expression_1+0x1fc>
  42d696:	2b54      	cmp	r3, #84	@ 0x54
  42d698:	f000 80f8 	beq.w	42d88c <d_expression_1+0x200>
  42d69c:	2b73      	cmp	r3, #115	@ 0x73
  42d69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42d6a2:	4604      	mov	r4, r0
  42d6a4:	d01e      	beq.n	42d6e4 <d_expression_1+0x58>
  42d6a6:	2b66      	cmp	r3, #102	@ 0x66
  42d6a8:	d042      	beq.n	42d730 <d_expression_1+0xa4>
  42d6aa:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
  42d6ae:	2909      	cmp	r1, #9
  42d6b0:	d907      	bls.n	42d6c2 <d_expression_1+0x36>
  42d6b2:	2b6f      	cmp	r3, #111	@ 0x6f
  42d6b4:	f040 80b3 	bne.w	42d81e <d_expression_1+0x192>
  42d6b8:	7853      	ldrb	r3, [r2, #1]
  42d6ba:	2b6e      	cmp	r3, #110	@ 0x6e
  42d6bc:	d118      	bne.n	42d6f0 <d_expression_1+0x64>
  42d6be:	3202      	adds	r2, #2
  42d6c0:	60c2      	str	r2, [r0, #12]
  42d6c2:	2200      	movs	r2, #0
  42d6c4:	4620      	mov	r0, r4
  42d6c6:	4611      	mov	r1, r2
  42d6c8:	f7ff fe12 	bl	42d2f0 <d_unqualified_name>
  42d6cc:	4605      	mov	r5, r0
  42d6ce:	2800      	cmp	r0, #0
  42d6d0:	f000 80c3 	beq.w	42d85a <d_expression_1+0x1ce>
  42d6d4:	68e3      	ldr	r3, [r4, #12]
  42d6d6:	781a      	ldrb	r2, [r3, #0]
  42d6d8:	2a49      	cmp	r2, #73	@ 0x49
  42d6da:	f000 808c 	beq.w	42d7f6 <d_expression_1+0x16a>
  42d6de:	4628      	mov	r0, r5
  42d6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42d6e4:	7853      	ldrb	r3, [r2, #1]
  42d6e6:	2b72      	cmp	r3, #114	@ 0x72
  42d6e8:	d068      	beq.n	42d7bc <d_expression_1+0x130>
  42d6ea:	2b70      	cmp	r3, #112	@ 0x70
  42d6ec:	f000 8173 	beq.w	42d9d6 <d_expression_1+0x34a>
  42d6f0:	4620      	mov	r0, r4
  42d6f2:	f7ff fd77 	bl	42d1e4 <d_operator_name>
  42d6f6:	4605      	mov	r5, r0
  42d6f8:	2800      	cmp	r0, #0
  42d6fa:	f000 80ae 	beq.w	42d85a <d_expression_1+0x1ce>
  42d6fe:	7803      	ldrb	r3, [r0, #0]
  42d700:	2b32      	cmp	r3, #50	@ 0x32
  42d702:	d047      	beq.n	42d794 <d_expression_1+0x108>
  42d704:	2b33      	cmp	r3, #51	@ 0x33
  42d706:	f000 80c3 	beq.w	42d890 <d_expression_1+0x204>
  42d70a:	2b34      	cmp	r3, #52	@ 0x34
  42d70c:	f040 80a5 	bne.w	42d85a <d_expression_1+0x1ce>
  42d710:	68e3      	ldr	r3, [r4, #12]
  42d712:	781a      	ldrb	r2, [r3, #0]
  42d714:	2a5f      	cmp	r2, #95	@ 0x5f
  42d716:	f000 814d 	beq.w	42d9b4 <d_expression_1+0x328>
  42d71a:	4620      	mov	r0, r4
  42d71c:	f7ff ffb6 	bl	42d68c <d_expression_1>
  42d720:	4603      	mov	r3, r0
  42d722:	462a      	mov	r2, r5
  42d724:	4620      	mov	r0, r4
  42d726:	2137      	movs	r1, #55	@ 0x37
  42d728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42d72c:	f7fe bba8 	b.w	42be80 <d_make_comp>
  42d730:	7853      	ldrb	r3, [r2, #1]
  42d732:	2b70      	cmp	r3, #112	@ 0x70
  42d734:	d1dc      	bne.n	42d6f0 <d_expression_1+0x64>
  42d736:	1c93      	adds	r3, r2, #2
  42d738:	60c3      	str	r3, [r0, #12]
  42d73a:	7893      	ldrb	r3, [r2, #2]
  42d73c:	2b54      	cmp	r3, #84	@ 0x54
  42d73e:	f000 8146 	beq.w	42d9ce <d_expression_1+0x342>
  42d742:	2b5f      	cmp	r3, #95	@ 0x5f
  42d744:	f000 80b4 	beq.w	42d8b0 <d_expression_1+0x224>
  42d748:	2b6e      	cmp	r3, #110	@ 0x6e
  42d74a:	f000 8086 	beq.w	42d85a <d_expression_1+0x1ce>
  42d74e:	f7fe fc35 	bl	42bfbc <d_number>
  42d752:	1c41      	adds	r1, r0, #1
  42d754:	f100 8081 	bmi.w	42d85a <d_expression_1+0x1ce>
  42d758:	68e3      	ldr	r3, [r4, #12]
  42d75a:	781a      	ldrb	r2, [r3, #0]
  42d75c:	2a5f      	cmp	r2, #95	@ 0x5f
  42d75e:	d17c      	bne.n	42d85a <d_expression_1+0x1ce>
  42d760:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
  42d764:	3301      	adds	r3, #1
  42d766:	4291      	cmp	r1, r2
  42d768:	60e3      	str	r3, [r4, #12]
  42d76a:	d076      	beq.n	42d85a <d_expression_1+0x1ce>
  42d76c:	3002      	adds	r0, #2
  42d76e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
  42d772:	4293      	cmp	r3, r2
  42d774:	da71      	bge.n	42d85a <d_expression_1+0x1ce>
  42d776:	6922      	ldr	r2, [r4, #16]
  42d778:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  42d77c:	2600      	movs	r6, #0
  42d77e:	3301      	adds	r3, #1
  42d780:	eb02 0581 	add.w	r5, r2, r1, lsl #2
  42d784:	e9c5 6601 	strd	r6, r6, [r5, #4]
  42d788:	6163      	str	r3, [r4, #20]
  42d78a:	2306      	movs	r3, #6
  42d78c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
  42d790:	60e8      	str	r0, [r5, #12]
  42d792:	e7a4      	b.n	42d6de <d_expression_1+0x52>
  42d794:	68c1      	ldr	r1, [r0, #12]
  42d796:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42d798:	688a      	ldr	r2, [r1, #8]
  42d79a:	680e      	ldr	r6, [r1, #0]
  42d79c:	3a02      	subs	r2, #2
  42d79e:	4413      	add	r3, r2
  42d7a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42d7a2:	7833      	ldrb	r3, [r6, #0]
  42d7a4:	2b73      	cmp	r3, #115	@ 0x73
  42d7a6:	d133      	bne.n	42d810 <d_expression_1+0x184>
  42d7a8:	7872      	ldrb	r2, [r6, #1]
  42d7aa:	2a74      	cmp	r2, #116	@ 0x74
  42d7ac:	d130      	bne.n	42d810 <d_expression_1+0x184>
  42d7ae:	78b2      	ldrb	r2, [r6, #2]
  42d7b0:	bb72      	cbnz	r2, 42d810 <d_expression_1+0x184>
  42d7b2:	4620      	mov	r0, r4
  42d7b4:	f7ff f83a 	bl	42c82c <d_type>
  42d7b8:	4603      	mov	r3, r0
  42d7ba:	e7b2      	b.n	42d722 <d_expression_1+0x96>
  42d7bc:	1c93      	adds	r3, r2, #2
  42d7be:	6b81      	ldr	r1, [r0, #56]	@ 0x38
  42d7c0:	60c3      	str	r3, [r0, #12]
  42d7c2:	7893      	ldrb	r3, [r2, #2]
  42d7c4:	b149      	cbz	r1, 42d7da <d_expression_1+0x14e>
  42d7c6:	2b55      	cmp	r3, #85	@ 0x55
  42d7c8:	f200 81b2 	bhi.w	42db30 <d_expression_1+0x4a4>
  42d7cc:	2b42      	cmp	r3, #66	@ 0x42
  42d7ce:	f200 817c 	bhi.w	42daca <d_expression_1+0x43e>
  42d7d2:	3b30      	subs	r3, #48	@ 0x30
  42d7d4:	2b09      	cmp	r3, #9
  42d7d6:	f240 8180 	bls.w	42dada <d_expression_1+0x44e>
  42d7da:	4620      	mov	r0, r4
  42d7dc:	f7ff f826 	bl	42c82c <d_type>
  42d7e0:	4601      	mov	r1, r0
  42d7e2:	2200      	movs	r2, #0
  42d7e4:	4620      	mov	r0, r4
  42d7e6:	f7ff fd83 	bl	42d2f0 <d_unqualified_name>
  42d7ea:	68e3      	ldr	r3, [r4, #12]
  42d7ec:	4605      	mov	r5, r0
  42d7ee:	781a      	ldrb	r2, [r3, #0]
  42d7f0:	2a49      	cmp	r2, #73	@ 0x49
  42d7f2:	f47f af74 	bne.w	42d6de <d_expression_1+0x52>
  42d7f6:	3301      	adds	r3, #1
  42d7f8:	4620      	mov	r0, r4
  42d7fa:	60e3      	str	r3, [r4, #12]
  42d7fc:	f000 ff76 	bl	42e6ec <d_template_args_1>
  42d800:	462a      	mov	r2, r5
  42d802:	4603      	mov	r3, r0
  42d804:	2104      	movs	r1, #4
  42d806:	4620      	mov	r0, r4
  42d808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42d80c:	f7fe bb38 	b.w	42be80 <d_make_comp>
  42d810:	68cf      	ldr	r7, [r1, #12]
  42d812:	2f03      	cmp	r7, #3
  42d814:	d821      	bhi.n	42d85a <d_expression_1+0x1ce>
  42d816:	e8df f007 	tbb	[pc, r7]
  42d81a:	4f43      	.short	0x4f43
  42d81c:	6d99      	.short	0x6d99
  42d81e:	2b69      	cmp	r3, #105	@ 0x69
  42d820:	d001      	beq.n	42d826 <d_expression_1+0x19a>
  42d822:	2b74      	cmp	r3, #116	@ 0x74
  42d824:	d11d      	bne.n	42d862 <d_expression_1+0x1d6>
  42d826:	7851      	ldrb	r1, [r2, #1]
  42d828:	296c      	cmp	r1, #108	@ 0x6c
  42d82a:	f47f af61 	bne.w	42d6f0 <d_expression_1+0x64>
  42d82e:	3202      	adds	r2, #2
  42d830:	2b74      	cmp	r3, #116	@ 0x74
  42d832:	60e2      	str	r2, [r4, #12]
  42d834:	f000 80e8 	beq.w	42da08 <d_expression_1+0x37c>
  42d838:	2500      	movs	r5, #0
  42d83a:	7813      	ldrb	r3, [r2, #0]
  42d83c:	b16b      	cbz	r3, 42d85a <d_expression_1+0x1ce>
  42d83e:	7853      	ldrb	r3, [r2, #1]
  42d840:	b15b      	cbz	r3, 42d85a <d_expression_1+0x1ce>
  42d842:	2145      	movs	r1, #69	@ 0x45
  42d844:	4620      	mov	r0, r4
  42d846:	f000 f99d 	bl	42db84 <d_exprlist>
  42d84a:	462a      	mov	r2, r5
  42d84c:	4603      	mov	r3, r0
  42d84e:	2131      	movs	r1, #49	@ 0x31
  42d850:	4620      	mov	r0, r4
  42d852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42d856:	f7fe bb13 	b.w	42be80 <d_make_comp>
  42d85a:	2500      	movs	r5, #0
  42d85c:	4628      	mov	r0, r5
  42d85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42d862:	2b75      	cmp	r3, #117	@ 0x75
  42d864:	f47f af44 	bne.w	42d6f0 <d_expression_1+0x64>
  42d868:	3201      	adds	r2, #1
  42d86a:	60c2      	str	r2, [r0, #12]
  42d86c:	f7fe fe86 	bl	42c57c <d_source_name>
  42d870:	4605      	mov	r5, r0
  42d872:	4620      	mov	r0, r4
  42d874:	f000 ff3a 	bl	42e6ec <d_template_args_1>
  42d878:	462a      	mov	r2, r5
  42d87a:	4603      	mov	r3, r0
  42d87c:	213f      	movs	r1, #63	@ 0x3f
  42d87e:	4620      	mov	r0, r4
  42d880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42d884:	f7fe bafc 	b.w	42be80 <d_make_comp>
  42d888:	f000 be86 	b.w	42e598 <d_expr_primary>
  42d88c:	f7fe be0e 	b.w	42c4ac <d_template_param>
  42d890:	68c3      	ldr	r3, [r0, #12]
  42d892:	2b01      	cmp	r3, #1
  42d894:	f43f af41 	beq.w	42d71a <d_expression_1+0x8e>
  42d898:	2b03      	cmp	r3, #3
  42d89a:	d0de      	beq.n	42d85a <d_expression_1+0x1ce>
  42d89c:	2b00      	cmp	r3, #0
  42d89e:	d1dc      	bne.n	42d85a <d_expression_1+0x1ce>
  42d8a0:	462a      	mov	r2, r5
  42d8a2:	4620      	mov	r0, r4
  42d8a4:	2300      	movs	r3, #0
  42d8a6:	2136      	movs	r1, #54	@ 0x36
  42d8a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42d8ac:	f7fe bae8 	b.w	42be80 <d_make_comp>
  42d8b0:	3203      	adds	r2, #3
  42d8b2:	2001      	movs	r0, #1
  42d8b4:	60e2      	str	r2, [r4, #12]
  42d8b6:	e75a      	b.n	42d76e <d_expression_1+0xe2>
  42d8b8:	7832      	ldrb	r2, [r6, #0]
  42d8ba:	2a6d      	cmp	r2, #109	@ 0x6d
  42d8bc:	f000 8097 	beq.w	42d9ee <d_expression_1+0x362>
  42d8c0:	2a70      	cmp	r2, #112	@ 0x70
  42d8c2:	f000 8094 	beq.w	42d9ee <d_expression_1+0x362>
  42d8c6:	2700      	movs	r7, #0
  42d8c8:	2b73      	cmp	r3, #115	@ 0x73
  42d8ca:	d17b      	bne.n	42d9c4 <d_expression_1+0x338>
  42d8cc:	7873      	ldrb	r3, [r6, #1]
  42d8ce:	2b50      	cmp	r3, #80	@ 0x50
  42d8d0:	d178      	bne.n	42d9c4 <d_expression_1+0x338>
  42d8d2:	78b3      	ldrb	r3, [r6, #2]
  42d8d4:	2b00      	cmp	r3, #0
  42d8d6:	d175      	bne.n	42d9c4 <d_expression_1+0x338>
  42d8d8:	4620      	mov	r0, r4
  42d8da:	f000 ff07 	bl	42e6ec <d_template_args_1>
  42d8de:	4603      	mov	r3, r0
  42d8e0:	2f00      	cmp	r7, #0
  42d8e2:	f43f af1e 	beq.w	42d722 <d_expression_1+0x96>
  42d8e6:	461a      	mov	r2, r3
  42d8e8:	2139      	movs	r1, #57	@ 0x39
  42d8ea:	4620      	mov	r0, r4
  42d8ec:	f7fe fac8 	bl	42be80 <d_make_comp>
  42d8f0:	4603      	mov	r3, r0
  42d8f2:	e716      	b.n	42d722 <d_expression_1+0x96>
  42d8f4:	2b71      	cmp	r3, #113	@ 0x71
  42d8f6:	f040 808d 	bne.w	42da14 <d_expression_1+0x388>
  42d8fa:	7872      	ldrb	r2, [r6, #1]
  42d8fc:	2a75      	cmp	r2, #117	@ 0x75
  42d8fe:	f040 8089 	bne.w	42da14 <d_expression_1+0x388>
  42d902:	78b2      	ldrb	r2, [r6, #2]
  42d904:	2a00      	cmp	r2, #0
  42d906:	f040 8085 	bne.w	42da14 <d_expression_1+0x388>
  42d90a:	4620      	mov	r0, r4
  42d90c:	f7ff febe 	bl	42d68c <d_expression_1>
  42d910:	4606      	mov	r6, r0
  42d912:	4620      	mov	r0, r4
  42d914:	f7ff feba 	bl	42d68c <d_expression_1>
  42d918:	4607      	mov	r7, r0
  42d91a:	4620      	mov	r0, r4
  42d91c:	f7ff feb6 	bl	42d68c <d_expression_1>
  42d920:	4603      	mov	r3, r0
  42d922:	2800      	cmp	r0, #0
  42d924:	d099      	beq.n	42d85a <d_expression_1+0x1ce>
  42d926:	463a      	mov	r2, r7
  42d928:	213c      	movs	r1, #60	@ 0x3c
  42d92a:	4620      	mov	r0, r4
  42d92c:	f7fe faa8 	bl	42be80 <d_make_comp>
  42d930:	4632      	mov	r2, r6
  42d932:	4603      	mov	r3, r0
  42d934:	213b      	movs	r1, #59	@ 0x3b
  42d936:	4620      	mov	r0, r4
  42d938:	f7fe faa2 	bl	42be80 <d_make_comp>
  42d93c:	462a      	mov	r2, r5
  42d93e:	4603      	mov	r3, r0
  42d940:	213a      	movs	r1, #58	@ 0x3a
  42d942:	4620      	mov	r0, r4
  42d944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42d948:	f7fe ba9a 	b.w	42be80 <d_make_comp>
  42d94c:	7871      	ldrb	r1, [r6, #1]
  42d94e:	7832      	ldrb	r2, [r6, #0]
  42d950:	2963      	cmp	r1, #99	@ 0x63
  42d952:	f000 80d2 	beq.w	42dafa <d_expression_1+0x46e>
  42d956:	2a66      	cmp	r2, #102	@ 0x66
  42d958:	f000 80f8 	beq.w	42db4c <d_expression_1+0x4c0>
  42d95c:	2b64      	cmp	r3, #100	@ 0x64
  42d95e:	f040 80ec 	bne.w	42db3a <d_expression_1+0x4ae>
  42d962:	7873      	ldrb	r3, [r6, #1]
  42d964:	2b69      	cmp	r3, #105	@ 0x69
  42d966:	f040 80e8 	bne.w	42db3a <d_expression_1+0x4ae>
  42d96a:	78b2      	ldrb	r2, [r6, #2]
  42d96c:	2a00      	cmp	r2, #0
  42d96e:	f040 80e4 	bne.w	42db3a <d_expression_1+0x4ae>
  42d972:	4611      	mov	r1, r2
  42d974:	4620      	mov	r0, r4
  42d976:	f7ff fcbb 	bl	42d2f0 <d_unqualified_name>
  42d97a:	4607      	mov	r7, r0
  42d97c:	7833      	ldrb	r3, [r6, #0]
  42d97e:	2b63      	cmp	r3, #99	@ 0x63
  42d980:	d17a      	bne.n	42da78 <d_expression_1+0x3ec>
  42d982:	7872      	ldrb	r2, [r6, #1]
  42d984:	2a6c      	cmp	r2, #108	@ 0x6c
  42d986:	d177      	bne.n	42da78 <d_expression_1+0x3ec>
  42d988:	78b2      	ldrb	r2, [r6, #2]
  42d98a:	2a00      	cmp	r2, #0
  42d98c:	d174      	bne.n	42da78 <d_expression_1+0x3ec>
  42d98e:	2145      	movs	r1, #69	@ 0x45
  42d990:	4620      	mov	r0, r4
  42d992:	f000 f8f7 	bl	42db84 <d_exprlist>
  42d996:	4606      	mov	r6, r0
  42d998:	4633      	mov	r3, r6
  42d99a:	463a      	mov	r2, r7
  42d99c:	2139      	movs	r1, #57	@ 0x39
  42d99e:	4620      	mov	r0, r4
  42d9a0:	f7fe fa6e 	bl	42be80 <d_make_comp>
  42d9a4:	462a      	mov	r2, r5
  42d9a6:	4603      	mov	r3, r0
  42d9a8:	2138      	movs	r1, #56	@ 0x38
  42d9aa:	4620      	mov	r0, r4
  42d9ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42d9b0:	f7fe ba66 	b.w	42be80 <d_make_comp>
  42d9b4:	3301      	adds	r3, #1
  42d9b6:	2145      	movs	r1, #69	@ 0x45
  42d9b8:	4620      	mov	r0, r4
  42d9ba:	60e3      	str	r3, [r4, #12]
  42d9bc:	f000 f8e2 	bl	42db84 <d_exprlist>
  42d9c0:	4603      	mov	r3, r0
  42d9c2:	e6ae      	b.n	42d722 <d_expression_1+0x96>
  42d9c4:	4620      	mov	r0, r4
  42d9c6:	f7ff fe61 	bl	42d68c <d_expression_1>
  42d9ca:	4603      	mov	r3, r0
  42d9cc:	e788      	b.n	42d8e0 <d_expression_1+0x254>
  42d9ce:	3203      	adds	r2, #3
  42d9d0:	2000      	movs	r0, #0
  42d9d2:	60e2      	str	r2, [r4, #12]
  42d9d4:	e6cb      	b.n	42d76e <d_expression_1+0xe2>
  42d9d6:	3202      	adds	r2, #2
  42d9d8:	60c2      	str	r2, [r0, #12]
  42d9da:	f7ff fe57 	bl	42d68c <d_expression_1>
  42d9de:	2300      	movs	r3, #0
  42d9e0:	4602      	mov	r2, r0
  42d9e2:	214c      	movs	r1, #76	@ 0x4c
  42d9e4:	4620      	mov	r0, r4
  42d9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42d9ea:	f7fe ba49 	b.w	42be80 <d_make_comp>
  42d9ee:	7871      	ldrb	r1, [r6, #1]
  42d9f0:	4291      	cmp	r1, r2
  42d9f2:	f47f af68 	bne.w	42d8c6 <d_expression_1+0x23a>
  42d9f6:	68e2      	ldr	r2, [r4, #12]
  42d9f8:	7811      	ldrb	r1, [r2, #0]
  42d9fa:	295f      	cmp	r1, #95	@ 0x5f
  42d9fc:	f47f af64 	bne.w	42d8c8 <d_expression_1+0x23c>
  42da00:	3201      	adds	r2, #1
  42da02:	60e2      	str	r2, [r4, #12]
  42da04:	7833      	ldrb	r3, [r6, #0]
  42da06:	e75e      	b.n	42d8c6 <d_expression_1+0x23a>
  42da08:	4620      	mov	r0, r4
  42da0a:	f7fe ff0f 	bl	42c82c <d_type>
  42da0e:	68e2      	ldr	r2, [r4, #12]
  42da10:	4605      	mov	r5, r0
  42da12:	e712      	b.n	42d83a <d_expression_1+0x1ae>
  42da14:	2b64      	cmp	r3, #100	@ 0x64
  42da16:	d106      	bne.n	42da26 <d_expression_1+0x39a>
  42da18:	7873      	ldrb	r3, [r6, #1]
  42da1a:	2b58      	cmp	r3, #88	@ 0x58
  42da1c:	d103      	bne.n	42da26 <d_expression_1+0x39a>
  42da1e:	78b3      	ldrb	r3, [r6, #2]
  42da20:	2b00      	cmp	r3, #0
  42da22:	f43f af72 	beq.w	42d90a <d_expression_1+0x27e>
  42da26:	7833      	ldrb	r3, [r6, #0]
  42da28:	2b66      	cmp	r3, #102	@ 0x66
  42da2a:	f000 8094 	beq.w	42db56 <d_expression_1+0x4ca>
  42da2e:	2b6e      	cmp	r3, #110	@ 0x6e
  42da30:	f47f af13 	bne.w	42d85a <d_expression_1+0x1ce>
  42da34:	7873      	ldrb	r3, [r6, #1]
  42da36:	2b77      	cmp	r3, #119	@ 0x77
  42da38:	d002      	beq.n	42da40 <d_expression_1+0x3b4>
  42da3a:	2b61      	cmp	r3, #97	@ 0x61
  42da3c:	f47f af0d 	bne.w	42d85a <d_expression_1+0x1ce>
  42da40:	215f      	movs	r1, #95	@ 0x5f
  42da42:	4620      	mov	r0, r4
  42da44:	f000 f89e 	bl	42db84 <d_exprlist>
  42da48:	4606      	mov	r6, r0
  42da4a:	4620      	mov	r0, r4
  42da4c:	f7fe feee 	bl	42c82c <d_type>
  42da50:	68e3      	ldr	r3, [r4, #12]
  42da52:	4607      	mov	r7, r0
  42da54:	781a      	ldrb	r2, [r3, #0]
  42da56:	2a45      	cmp	r2, #69	@ 0x45
  42da58:	f000 808d 	beq.w	42db76 <d_expression_1+0x4ea>
  42da5c:	2a70      	cmp	r2, #112	@ 0x70
  42da5e:	d07e      	beq.n	42db5e <d_expression_1+0x4d2>
  42da60:	2a69      	cmp	r2, #105	@ 0x69
  42da62:	f47f aefa 	bne.w	42d85a <d_expression_1+0x1ce>
  42da66:	785b      	ldrb	r3, [r3, #1]
  42da68:	2b6c      	cmp	r3, #108	@ 0x6c
  42da6a:	f47f aef6 	bne.w	42d85a <d_expression_1+0x1ce>
  42da6e:	4620      	mov	r0, r4
  42da70:	f7ff fe0c 	bl	42d68c <d_expression_1>
  42da74:	4603      	mov	r3, r0
  42da76:	e756      	b.n	42d926 <d_expression_1+0x29a>
  42da78:	2b64      	cmp	r3, #100	@ 0x64
  42da7a:	d14c      	bne.n	42db16 <d_expression_1+0x48a>
  42da7c:	7872      	ldrb	r2, [r6, #1]
  42da7e:	2a74      	cmp	r2, #116	@ 0x74
  42da80:	d149      	bne.n	42db16 <d_expression_1+0x48a>
  42da82:	78b2      	ldrb	r2, [r6, #2]
  42da84:	2a00      	cmp	r2, #0
  42da86:	d146      	bne.n	42db16 <d_expression_1+0x48a>
  42da88:	68e3      	ldr	r3, [r4, #12]
  42da8a:	781a      	ldrb	r2, [r3, #0]
  42da8c:	2a67      	cmp	r2, #103	@ 0x67
  42da8e:	d059      	beq.n	42db44 <d_expression_1+0x4b8>
  42da90:	2a73      	cmp	r2, #115	@ 0x73
  42da92:	d102      	bne.n	42da9a <d_expression_1+0x40e>
  42da94:	785b      	ldrb	r3, [r3, #1]
  42da96:	2b72      	cmp	r3, #114	@ 0x72
  42da98:	d045      	beq.n	42db26 <d_expression_1+0x49a>
  42da9a:	2200      	movs	r2, #0
  42da9c:	4620      	mov	r0, r4
  42da9e:	4611      	mov	r1, r2
  42daa0:	f7ff fc26 	bl	42d2f0 <d_unqualified_name>
  42daa4:	68e3      	ldr	r3, [r4, #12]
  42daa6:	4606      	mov	r6, r0
  42daa8:	781a      	ldrb	r2, [r3, #0]
  42daaa:	2a49      	cmp	r2, #73	@ 0x49
  42daac:	f47f af74 	bne.w	42d998 <d_expression_1+0x30c>
  42dab0:	3301      	adds	r3, #1
  42dab2:	4620      	mov	r0, r4
  42dab4:	60e3      	str	r3, [r4, #12]
  42dab6:	f000 fe19 	bl	42e6ec <d_template_args_1>
  42daba:	4632      	mov	r2, r6
  42dabc:	4603      	mov	r3, r0
  42dabe:	2104      	movs	r1, #4
  42dac0:	4620      	mov	r0, r4
  42dac2:	f7fe f9dd 	bl	42be80 <d_make_comp>
  42dac6:	4606      	mov	r6, r0
  42dac8:	e766      	b.n	42d998 <d_expression_1+0x30c>
  42daca:	3b43      	subs	r3, #67	@ 0x43
  42dacc:	4a2c      	ldr	r2, [pc, #176]	@ (42db80 <d_expression_1+0x4f4>)
  42dace:	b2db      	uxtb	r3, r3
  42dad0:	fa22 f303 	lsr.w	r3, r2, r3
  42dad4:	07db      	lsls	r3, r3, #31
  42dad6:	f57f ae80 	bpl.w	42d7da <d_expression_1+0x14e>
  42dada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  42dade:	2100      	movs	r1, #0
  42dae0:	4620      	mov	r0, r4
  42dae2:	63a3      	str	r3, [r4, #56]	@ 0x38
  42dae4:	f000 fe34 	bl	42e750 <d_prefix>
  42dae8:	68e3      	ldr	r3, [r4, #12]
  42daea:	4601      	mov	r1, r0
  42daec:	781a      	ldrb	r2, [r3, #0]
  42daee:	2a45      	cmp	r2, #69	@ 0x45
  42daf0:	f47f ae77 	bne.w	42d7e2 <d_expression_1+0x156>
  42daf4:	3301      	adds	r3, #1
  42daf6:	60e3      	str	r3, [r4, #12]
  42daf8:	e673      	b.n	42d7e2 <d_expression_1+0x156>
  42dafa:	f1a2 0172 	sub.w	r1, r2, #114	@ 0x72
  42dafe:	2901      	cmp	r1, #1
  42db00:	d904      	bls.n	42db0c <d_expression_1+0x480>
  42db02:	f1a2 0163 	sub.w	r1, r2, #99	@ 0x63
  42db06:	2901      	cmp	r1, #1
  42db08:	f63f af25 	bhi.w	42d956 <d_expression_1+0x2ca>
  42db0c:	4620      	mov	r0, r4
  42db0e:	f7fe fe8d 	bl	42c82c <d_type>
  42db12:	4607      	mov	r7, r0
  42db14:	e732      	b.n	42d97c <d_expression_1+0x2f0>
  42db16:	2b70      	cmp	r3, #112	@ 0x70
  42db18:	d105      	bne.n	42db26 <d_expression_1+0x49a>
  42db1a:	7873      	ldrb	r3, [r6, #1]
  42db1c:	2b74      	cmp	r3, #116	@ 0x74
  42db1e:	d102      	bne.n	42db26 <d_expression_1+0x49a>
  42db20:	78b3      	ldrb	r3, [r6, #2]
  42db22:	2b00      	cmp	r3, #0
  42db24:	d0b0      	beq.n	42da88 <d_expression_1+0x3fc>
  42db26:	4620      	mov	r0, r4
  42db28:	f7ff fdb0 	bl	42d68c <d_expression_1>
  42db2c:	4606      	mov	r6, r0
  42db2e:	e733      	b.n	42d998 <d_expression_1+0x30c>
  42db30:	3b61      	subs	r3, #97	@ 0x61
  42db32:	2b19      	cmp	r3, #25
  42db34:	f63f ae51 	bhi.w	42d7da <d_expression_1+0x14e>
  42db38:	e7cf      	b.n	42dada <d_expression_1+0x44e>
  42db3a:	4620      	mov	r0, r4
  42db3c:	f7ff fda6 	bl	42d68c <d_expression_1>
  42db40:	4607      	mov	r7, r0
  42db42:	e71b      	b.n	42d97c <d_expression_1+0x2f0>
  42db44:	785b      	ldrb	r3, [r3, #1]
  42db46:	2b73      	cmp	r3, #115	@ 0x73
  42db48:	d1a7      	bne.n	42da9a <d_expression_1+0x40e>
  42db4a:	e7ec      	b.n	42db26 <d_expression_1+0x49a>
  42db4c:	4620      	mov	r0, r4
  42db4e:	f7ff fb49 	bl	42d1e4 <d_operator_name>
  42db52:	4607      	mov	r7, r0
  42db54:	e712      	b.n	42d97c <d_expression_1+0x2f0>
  42db56:	4620      	mov	r0, r4
  42db58:	f7ff fb44 	bl	42d1e4 <d_operator_name>
  42db5c:	e6d8      	b.n	42d910 <d_expression_1+0x284>
  42db5e:	785a      	ldrb	r2, [r3, #1]
  42db60:	2a69      	cmp	r2, #105	@ 0x69
  42db62:	f47f ae7a 	bne.w	42d85a <d_expression_1+0x1ce>
  42db66:	3302      	adds	r3, #2
  42db68:	2145      	movs	r1, #69	@ 0x45
  42db6a:	4620      	mov	r0, r4
  42db6c:	60e3      	str	r3, [r4, #12]
  42db6e:	f000 f809 	bl	42db84 <d_exprlist>
  42db72:	4603      	mov	r3, r0
  42db74:	e6d7      	b.n	42d926 <d_expression_1+0x29a>
  42db76:	3301      	adds	r3, #1
  42db78:	60e3      	str	r3, [r4, #12]
  42db7a:	2300      	movs	r3, #0
  42db7c:	e6d3      	b.n	42d926 <d_expression_1+0x29a>
  42db7e:	bf00      	nop
  42db80:	00040201 	.word	0x00040201

0042db84 <d_exprlist>:
  42db84:	68c2      	ldr	r2, [r0, #12]
  42db86:	2300      	movs	r3, #0
  42db88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42db8c:	460e      	mov	r6, r1
  42db8e:	7811      	ldrb	r1, [r2, #0]
  42db90:	b082      	sub	sp, #8
  42db92:	4604      	mov	r4, r0
  42db94:	42b1      	cmp	r1, r6
  42db96:	9301      	str	r3, [sp, #4]
  42db98:	d024      	beq.n	42dbe4 <d_exprlist+0x60>
  42db9a:	ad01      	add	r5, sp, #4
  42db9c:	2701      	movs	r7, #1
  42db9e:	e009      	b.n	42dbb4 <d_exprlist+0x30>
  42dba0:	f7fe f96e 	bl	42be80 <d_make_comp>
  42dba4:	6028      	str	r0, [r5, #0]
  42dba6:	f100 0510 	add.w	r5, r0, #16
  42dbaa:	b188      	cbz	r0, 42dbd0 <d_exprlist+0x4c>
  42dbac:	68e3      	ldr	r3, [r4, #12]
  42dbae:	781a      	ldrb	r2, [r3, #0]
  42dbb0:	42b2      	cmp	r2, r6
  42dbb2:	d011      	beq.n	42dbd8 <d_exprlist+0x54>
  42dbb4:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
  42dbb8:	4620      	mov	r0, r4
  42dbba:	6327      	str	r7, [r4, #48]	@ 0x30
  42dbbc:	f7ff fd66 	bl	42d68c <d_expression_1>
  42dbc0:	4602      	mov	r2, r0
  42dbc2:	2300      	movs	r3, #0
  42dbc4:	212e      	movs	r1, #46	@ 0x2e
  42dbc6:	4620      	mov	r0, r4
  42dbc8:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
  42dbcc:	2a00      	cmp	r2, #0
  42dbce:	d1e7      	bne.n	42dba0 <d_exprlist+0x1c>
  42dbd0:	2000      	movs	r0, #0
  42dbd2:	b002      	add	sp, #8
  42dbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42dbd8:	3301      	adds	r3, #1
  42dbda:	9801      	ldr	r0, [sp, #4]
  42dbdc:	60e3      	str	r3, [r4, #12]
  42dbde:	b002      	add	sp, #8
  42dbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42dbe4:	1c51      	adds	r1, r2, #1
  42dbe6:	461a      	mov	r2, r3
  42dbe8:	60c1      	str	r1, [r0, #12]
  42dbea:	212e      	movs	r1, #46	@ 0x2e
  42dbec:	b002      	add	sp, #8
  42dbee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42dbf2:	f7fe b945 	b.w	42be80 <d_make_comp>
  42dbf6:	bf00      	nop

0042dbf8 <d_cv_qualifiers>:
  42dbf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42dbfc:	4691      	mov	r9, r2
  42dbfe:	460e      	mov	r6, r1
  42dc00:	68c2      	ldr	r2, [r0, #12]
  42dc02:	4604      	mov	r4, r0
  42dc04:	f009 0301 	and.w	r3, r9, #1
  42dc08:	4635      	mov	r5, r6
  42dc0a:	7811      	ldrb	r1, [r2, #0]
  42dc0c:	2b00      	cmp	r3, #0
  42dc0e:	bf15      	itete	ne
  42dc10:	f04f 0a1e 	movne.w	sl, #30
  42dc14:	f04f 0a1b 	moveq.w	sl, #27
  42dc18:	f04f 081d 	movne.w	r8, #29
  42dc1c:	f04f 081a 	moveq.w	r8, #26
  42dc20:	bf14      	ite	ne
  42dc22:	271c      	movne	r7, #28
  42dc24:	2719      	moveq	r7, #25
  42dc26:	e020      	b.n	42dc6a <d_cv_qualifiers+0x72>
  42dc28:	2956      	cmp	r1, #86	@ 0x56
  42dc2a:	d037      	beq.n	42dc9c <d_cv_qualifiers+0xa4>
  42dc2c:	294b      	cmp	r1, #75	@ 0x4b
  42dc2e:	d03b      	beq.n	42dca8 <d_cv_qualifiers+0xb0>
  42dc30:	7853      	ldrb	r3, [r2, #1]
  42dc32:	b37b      	cbz	r3, 42dc94 <d_cv_qualifiers+0x9c>
  42dc34:	1c93      	adds	r3, r2, #2
  42dc36:	60e3      	str	r3, [r4, #12]
  42dc38:	7853      	ldrb	r3, [r2, #1]
  42dc3a:	2b78      	cmp	r3, #120	@ 0x78
  42dc3c:	d03a      	beq.n	42dcb4 <d_cv_qualifiers+0xbc>
  42dc3e:	f003 02df 	and.w	r2, r3, #223	@ 0xdf
  42dc42:	2a4f      	cmp	r2, #79	@ 0x4f
  42dc44:	d16b      	bne.n	42dd1e <d_cv_qualifiers+0x126>
  42dc46:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  42dc48:	2b4f      	cmp	r3, #79	@ 0x4f
  42dc4a:	f102 0209 	add.w	r2, r2, #9
  42dc4e:	62e2      	str	r2, [r4, #44]	@ 0x2c
  42dc50:	d036      	beq.n	42dcc0 <d_cv_qualifiers+0xc8>
  42dc52:	2300      	movs	r3, #0
  42dc54:	2150      	movs	r1, #80	@ 0x50
  42dc56:	2200      	movs	r2, #0
  42dc58:	4620      	mov	r0, r4
  42dc5a:	f7fe f911 	bl	42be80 <d_make_comp>
  42dc5e:	6028      	str	r0, [r5, #0]
  42dc60:	b1c0      	cbz	r0, 42dc94 <d_cv_qualifiers+0x9c>
  42dc62:	68e2      	ldr	r2, [r4, #12]
  42dc64:	f100 050c 	add.w	r5, r0, #12
  42dc68:	7811      	ldrb	r1, [r2, #0]
  42dc6a:	4610      	mov	r0, r2
  42dc6c:	f7fe fb36 	bl	42c2dc <next_is_type_qual.isra.0>
  42dc70:	2800      	cmp	r0, #0
  42dc72:	d039      	beq.n	42dce8 <d_cv_qualifiers+0xf0>
  42dc74:	1c53      	adds	r3, r2, #1
  42dc76:	2972      	cmp	r1, #114	@ 0x72
  42dc78:	60e3      	str	r3, [r4, #12]
  42dc7a:	d1d5      	bne.n	42dc28 <d_cv_qualifiers+0x30>
  42dc7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  42dc7e:	4639      	mov	r1, r7
  42dc80:	2300      	movs	r3, #0
  42dc82:	4620      	mov	r0, r4
  42dc84:	3209      	adds	r2, #9
  42dc86:	62e2      	str	r2, [r4, #44]	@ 0x2c
  42dc88:	2200      	movs	r2, #0
  42dc8a:	f7fe f8f9 	bl	42be80 <d_make_comp>
  42dc8e:	6028      	str	r0, [r5, #0]
  42dc90:	2800      	cmp	r0, #0
  42dc92:	d1e6      	bne.n	42dc62 <d_cv_qualifiers+0x6a>
  42dc94:	2500      	movs	r5, #0
  42dc96:	4628      	mov	r0, r5
  42dc98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42dc9c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  42dc9e:	4641      	mov	r1, r8
  42dca0:	2300      	movs	r3, #0
  42dca2:	3209      	adds	r2, #9
  42dca4:	62e2      	str	r2, [r4, #44]	@ 0x2c
  42dca6:	e7d6      	b.n	42dc56 <d_cv_qualifiers+0x5e>
  42dca8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  42dcaa:	4651      	mov	r1, sl
  42dcac:	2300      	movs	r3, #0
  42dcae:	3206      	adds	r2, #6
  42dcb0:	62e2      	str	r2, [r4, #44]	@ 0x2c
  42dcb2:	e7d0      	b.n	42dc56 <d_cv_qualifiers+0x5e>
  42dcb4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42dcb6:	214e      	movs	r1, #78	@ 0x4e
  42dcb8:	3311      	adds	r3, #17
  42dcba:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42dcbc:	2300      	movs	r3, #0
  42dcbe:	e7ca      	b.n	42dc56 <d_cv_qualifiers+0x5e>
  42dcc0:	2301      	movs	r3, #1
  42dcc2:	f8d4 b030 	ldr.w	fp, [r4, #48]	@ 0x30
  42dcc6:	4620      	mov	r0, r4
  42dcc8:	6323      	str	r3, [r4, #48]	@ 0x30
  42dcca:	f7ff fcdf 	bl	42d68c <d_expression_1>
  42dcce:	f8c4 b030 	str.w	fp, [r4, #48]	@ 0x30
  42dcd2:	4603      	mov	r3, r0
  42dcd4:	2800      	cmp	r0, #0
  42dcd6:	d0dd      	beq.n	42dc94 <d_cv_qualifiers+0x9c>
  42dcd8:	68e2      	ldr	r2, [r4, #12]
  42dcda:	7811      	ldrb	r1, [r2, #0]
  42dcdc:	2945      	cmp	r1, #69	@ 0x45
  42dcde:	d1d9      	bne.n	42dc94 <d_cv_qualifiers+0x9c>
  42dce0:	3201      	adds	r2, #1
  42dce2:	2150      	movs	r1, #80	@ 0x50
  42dce4:	60e2      	str	r2, [r4, #12]
  42dce6:	e7b6      	b.n	42dc56 <d_cv_qualifiers+0x5e>
  42dce8:	f019 0f01 	tst.w	r9, #1
  42dcec:	d1d3      	bne.n	42dc96 <d_cv_qualifiers+0x9e>
  42dcee:	2946      	cmp	r1, #70	@ 0x46
  42dcf0:	d1d1      	bne.n	42dc96 <d_cv_qualifiers+0x9e>
  42dcf2:	42b5      	cmp	r5, r6
  42dcf4:	d0cf      	beq.n	42dc96 <d_cv_qualifiers+0x9e>
  42dcf6:	201d      	movs	r0, #29
  42dcf8:	211e      	movs	r1, #30
  42dcfa:	221c      	movs	r2, #28
  42dcfc:	e007      	b.n	42dd0e <d_cv_qualifiers+0x116>
  42dcfe:	2b1b      	cmp	r3, #27
  42dd00:	d00b      	beq.n	42dd1a <d_cv_qualifiers+0x122>
  42dd02:	2b19      	cmp	r3, #25
  42dd04:	d100      	bne.n	42dd08 <d_cv_qualifiers+0x110>
  42dd06:	7032      	strb	r2, [r6, #0]
  42dd08:	360c      	adds	r6, #12
  42dd0a:	42b5      	cmp	r5, r6
  42dd0c:	d0c3      	beq.n	42dc96 <d_cv_qualifiers+0x9e>
  42dd0e:	6836      	ldr	r6, [r6, #0]
  42dd10:	7833      	ldrb	r3, [r6, #0]
  42dd12:	2b1a      	cmp	r3, #26
  42dd14:	d1f3      	bne.n	42dcfe <d_cv_qualifiers+0x106>
  42dd16:	7030      	strb	r0, [r6, #0]
  42dd18:	e7f6      	b.n	42dd08 <d_cv_qualifiers+0x110>
  42dd1a:	7031      	strb	r1, [r6, #0]
  42dd1c:	e7f4      	b.n	42dd08 <d_cv_qualifiers+0x110>
  42dd1e:	2b77      	cmp	r3, #119	@ 0x77
  42dd20:	d1b8      	bne.n	42dc94 <d_cv_qualifiers+0x9c>
  42dd22:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42dd24:	4620      	mov	r0, r4
  42dd26:	3306      	adds	r3, #6
  42dd28:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42dd2a:	f7ff f94f 	bl	42cfcc <d_parmlist>
  42dd2e:	4603      	mov	r3, r0
  42dd30:	2800      	cmp	r0, #0
  42dd32:	d0af      	beq.n	42dc94 <d_cv_qualifiers+0x9c>
  42dd34:	68e2      	ldr	r2, [r4, #12]
  42dd36:	7811      	ldrb	r1, [r2, #0]
  42dd38:	2945      	cmp	r1, #69	@ 0x45
  42dd3a:	d1ab      	bne.n	42dc94 <d_cv_qualifiers+0x9c>
  42dd3c:	3201      	adds	r2, #1
  42dd3e:	2151      	movs	r1, #81	@ 0x51
  42dd40:	60e2      	str	r2, [r4, #12]
  42dd42:	e788      	b.n	42dc56 <d_cv_qualifiers+0x5e>

0042dd44 <d_name>:
  42dd44:	68c2      	ldr	r2, [r0, #12]
  42dd46:	b5f0      	push	{r4, r5, r6, r7, lr}
  42dd48:	7813      	ldrb	r3, [r2, #0]
  42dd4a:	b085      	sub	sp, #20
  42dd4c:	4604      	mov	r4, r0
  42dd4e:	460e      	mov	r6, r1
  42dd50:	3b4e      	subs	r3, #78	@ 0x4e
  42dd52:	2b0c      	cmp	r3, #12
  42dd54:	d808      	bhi.n	42dd68 <d_name+0x24>
  42dd56:	e8df f003 	tbb	[pc, r3]
  42dd5a:	077d      	.short	0x077d
  42dd5c:	2b070707 	.word	0x2b070707
  42dd60:	07072307 	.word	0x07072307
  42dd64:	0707      	.short	0x0707
  42dd66:	48          	.byte	0x48
  42dd67:	00          	.byte	0x00
  42dd68:	2500      	movs	r5, #0
  42dd6a:	462f      	mov	r7, r5
  42dd6c:	462a      	mov	r2, r5
  42dd6e:	4639      	mov	r1, r7
  42dd70:	4620      	mov	r0, r4
  42dd72:	f7ff fabd 	bl	42d2f0 <d_unqualified_name>
  42dd76:	68e3      	ldr	r3, [r4, #12]
  42dd78:	4605      	mov	r5, r0
  42dd7a:	781a      	ldrb	r2, [r3, #0]
  42dd7c:	2a49      	cmp	r2, #73	@ 0x49
  42dd7e:	f000 808d 	beq.w	42de9c <d_name+0x158>
  42dd82:	b156      	cbz	r6, 42dd9a <d_name+0x56>
  42dd84:	2d00      	cmp	r5, #0
  42dd86:	d063      	beq.n	42de50 <d_name+0x10c>
  42dd88:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
  42dd8c:	4293      	cmp	r3, r2
  42dd8e:	da5f      	bge.n	42de50 <d_name+0x10c>
  42dd90:	69e1      	ldr	r1, [r4, #28]
  42dd92:	1c5a      	adds	r2, r3, #1
  42dd94:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
  42dd98:	6222      	str	r2, [r4, #32]
  42dd9a:	4628      	mov	r0, r5
  42dd9c:	b005      	add	sp, #20
  42dd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42dda0:	2200      	movs	r2, #0
  42dda2:	4611      	mov	r1, r2
  42dda4:	f7ff faa4 	bl	42d2f0 <d_unqualified_name>
  42dda8:	4605      	mov	r5, r0
  42ddaa:	2e00      	cmp	r6, #0
  42ddac:	d1ea      	bne.n	42dd84 <d_name+0x40>
  42ddae:	e7f4      	b.n	42dd9a <d_name+0x56>
  42ddb0:	7853      	ldrb	r3, [r2, #1]
  42ddb2:	2b74      	cmp	r3, #116	@ 0x74
  42ddb4:	f000 8090 	beq.w	42ded8 <d_name+0x194>
  42ddb8:	2700      	movs	r7, #0
  42ddba:	2100      	movs	r1, #0
  42ddbc:	4620      	mov	r0, r4
  42ddbe:	f7fe fc31 	bl	42c624 <d_substitution>
  42ddc2:	4605      	mov	r5, r0
  42ddc4:	2800      	cmp	r0, #0
  42ddc6:	d043      	beq.n	42de50 <d_name+0x10c>
  42ddc8:	7803      	ldrb	r3, [r0, #0]
  42ddca:	3b53      	subs	r3, #83	@ 0x53
  42ddcc:	2b01      	cmp	r3, #1
  42ddce:	d9cd      	bls.n	42dd6c <d_name+0x28>
  42ddd0:	2f00      	cmp	r7, #0
  42ddd2:	d13d      	bne.n	42de50 <d_name+0x10c>
  42ddd4:	68e3      	ldr	r3, [r4, #12]
  42ddd6:	781a      	ldrb	r2, [r3, #0]
  42ddd8:	2a49      	cmp	r2, #73	@ 0x49
  42ddda:	d1de      	bne.n	42dd9a <d_name+0x56>
  42dddc:	3301      	adds	r3, #1
  42ddde:	4620      	mov	r0, r4
  42dde0:	60e3      	str	r3, [r4, #12]
  42dde2:	f000 fc83 	bl	42e6ec <d_template_args_1>
  42dde6:	4603      	mov	r3, r0
  42dde8:	e068      	b.n	42debc <d_name+0x178>
  42ddea:	1c53      	adds	r3, r2, #1
  42ddec:	60c3      	str	r3, [r0, #12]
  42ddee:	7851      	ldrb	r1, [r2, #1]
  42ddf0:	2947      	cmp	r1, #71	@ 0x47
  42ddf2:	d06d      	beq.n	42ded0 <d_name+0x18c>
  42ddf4:	f1a1 0154 	sub.w	r1, r1, #84	@ 0x54
  42ddf8:	fab1 f181 	clz	r1, r1
  42ddfc:	0949      	lsrs	r1, r1, #5
  42ddfe:	2900      	cmp	r1, #0
  42de00:	d166      	bne.n	42ded0 <d_name+0x18c>
  42de02:	f000 f8fd 	bl	42e000 <d_encoding.part.0>
  42de06:	4605      	mov	r5, r0
  42de08:	b315      	cbz	r5, 42de50 <d_name+0x10c>
  42de0a:	68e3      	ldr	r3, [r4, #12]
  42de0c:	781a      	ldrb	r2, [r3, #0]
  42de0e:	2a45      	cmp	r2, #69	@ 0x45
  42de10:	d11e      	bne.n	42de50 <d_name+0x10c>
  42de12:	1c5a      	adds	r2, r3, #1
  42de14:	60e2      	str	r2, [r4, #12]
  42de16:	785a      	ldrb	r2, [r3, #1]
  42de18:	2a73      	cmp	r2, #115	@ 0x73
  42de1a:	f000 80cc 	beq.w	42dfb6 <d_name+0x272>
  42de1e:	2a64      	cmp	r2, #100	@ 0x64
  42de20:	d07a      	beq.n	42df18 <d_name+0x1d4>
  42de22:	2100      	movs	r1, #0
  42de24:	4620      	mov	r0, r4
  42de26:	f7ff ff8d 	bl	42dd44 <d_name>
  42de2a:	4603      	mov	r3, r0
  42de2c:	2800      	cmp	r0, #0
  42de2e:	f000 80c0 	beq.w	42dfb2 <d_name+0x26e>
  42de32:	7802      	ldrb	r2, [r0, #0]
  42de34:	2a49      	cmp	r2, #73	@ 0x49
  42de36:	f000 80a8 	beq.w	42df8a <d_name+0x246>
  42de3a:	2a47      	cmp	r2, #71	@ 0x47
  42de3c:	f000 80a5 	beq.w	42df8a <d_name+0x246>
  42de40:	9001      	str	r0, [sp, #4]
  42de42:	4620      	mov	r0, r4
  42de44:	f7fe f93c 	bl	42c0c0 <d_discriminator>
  42de48:	9b01      	ldr	r3, [sp, #4]
  42de4a:	2800      	cmp	r0, #0
  42de4c:	f040 809d 	bne.w	42df8a <d_name+0x246>
  42de50:	2500      	movs	r5, #0
  42de52:	e7a2      	b.n	42dd9a <d_name+0x56>
  42de54:	1c53      	adds	r3, r2, #1
  42de56:	a903      	add	r1, sp, #12
  42de58:	2201      	movs	r2, #1
  42de5a:	60c3      	str	r3, [r0, #12]
  42de5c:	f7ff fecc 	bl	42dbf8 <d_cv_qualifiers>
  42de60:	4605      	mov	r5, r0
  42de62:	2800      	cmp	r0, #0
  42de64:	d0f4      	beq.n	42de50 <d_name+0x10c>
  42de66:	2100      	movs	r1, #0
  42de68:	4620      	mov	r0, r4
  42de6a:	f7fe f90f 	bl	42c08c <d_ref_qualifier>
  42de6e:	2101      	movs	r1, #1
  42de70:	4607      	mov	r7, r0
  42de72:	4620      	mov	r0, r4
  42de74:	f000 fc6c 	bl	42e750 <d_prefix>
  42de78:	6028      	str	r0, [r5, #0]
  42de7a:	2800      	cmp	r0, #0
  42de7c:	d0e8      	beq.n	42de50 <d_name+0x10c>
  42de7e:	b117      	cbz	r7, 42de86 <d_name+0x142>
  42de80:	9b03      	ldr	r3, [sp, #12]
  42de82:	9703      	str	r7, [sp, #12]
  42de84:	60fb      	str	r3, [r7, #12]
  42de86:	68e3      	ldr	r3, [r4, #12]
  42de88:	781a      	ldrb	r2, [r3, #0]
  42de8a:	2a45      	cmp	r2, #69	@ 0x45
  42de8c:	d1e0      	bne.n	42de50 <d_name+0x10c>
  42de8e:	3301      	adds	r3, #1
  42de90:	9d03      	ldr	r5, [sp, #12]
  42de92:	60e3      	str	r3, [r4, #12]
  42de94:	2e00      	cmp	r6, #0
  42de96:	f47f af75 	bne.w	42dd84 <d_name+0x40>
  42de9a:	e77e      	b.n	42dd9a <d_name+0x56>
  42de9c:	2800      	cmp	r0, #0
  42de9e:	d0d7      	beq.n	42de50 <d_name+0x10c>
  42dea0:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
  42dea4:	428a      	cmp	r2, r1
  42dea6:	dad3      	bge.n	42de50 <d_name+0x10c>
  42dea8:	69e1      	ldr	r1, [r4, #28]
  42deaa:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
  42deae:	3201      	adds	r2, #1
  42deb0:	6222      	str	r2, [r4, #32]
  42deb2:	781a      	ldrb	r2, [r3, #0]
  42deb4:	3a49      	subs	r2, #73	@ 0x49
  42deb6:	2a01      	cmp	r2, #1
  42deb8:	d990      	bls.n	42dddc <d_name+0x98>
  42deba:	2300      	movs	r3, #0
  42debc:	462a      	mov	r2, r5
  42debe:	2104      	movs	r1, #4
  42dec0:	4620      	mov	r0, r4
  42dec2:	f7fd ffdd 	bl	42be80 <d_make_comp>
  42dec6:	4605      	mov	r5, r0
  42dec8:	2e00      	cmp	r6, #0
  42deca:	f47f af5b 	bne.w	42dd84 <d_name+0x40>
  42dece:	e764      	b.n	42dd9a <d_name+0x56>
  42ded0:	f000 f916 	bl	42e100 <d_special_name>
  42ded4:	4605      	mov	r5, r0
  42ded6:	e797      	b.n	42de08 <d_name+0xc4>
  42ded8:	1c91      	adds	r1, r2, #2
  42deda:	6943      	ldr	r3, [r0, #20]
  42dedc:	60c1      	str	r1, [r0, #12]
  42dede:	6981      	ldr	r1, [r0, #24]
  42dee0:	428b      	cmp	r3, r1
  42dee2:	f280 8085 	bge.w	42dff0 <d_name+0x2ac>
  42dee6:	6901      	ldr	r1, [r0, #16]
  42dee8:	eb03 0783 	add.w	r7, r3, r3, lsl #2
  42deec:	3301      	adds	r3, #1
  42deee:	6143      	str	r3, [r0, #20]
  42def0:	2300      	movs	r3, #0
  42def2:	00b8      	lsls	r0, r7, #2
  42def4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  42def8:	e9c7 3301 	strd	r3, r3, [r7, #4]
  42defc:	540b      	strb	r3, [r1, r0]
  42defe:	4b3e      	ldr	r3, [pc, #248]	@ (42dff8 <d_name+0x2b4>)
  42df00:	60fb      	str	r3, [r7, #12]
  42df02:	2303      	movs	r3, #3
  42df04:	613b      	str	r3, [r7, #16]
  42df06:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  42df08:	3303      	adds	r3, #3
  42df0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  42df0c:	7893      	ldrb	r3, [r2, #2]
  42df0e:	2b53      	cmp	r3, #83	@ 0x53
  42df10:	f43f af53 	beq.w	42ddba <d_name+0x76>
  42df14:	2500      	movs	r5, #0
  42df16:	e729      	b.n	42dd6c <d_name+0x28>
  42df18:	1c9a      	adds	r2, r3, #2
  42df1a:	60e2      	str	r2, [r4, #12]
  42df1c:	789b      	ldrb	r3, [r3, #2]
  42df1e:	2b5f      	cmp	r3, #95	@ 0x5f
  42df20:	d068      	beq.n	42dff4 <d_name+0x2b0>
  42df22:	2b6e      	cmp	r3, #110	@ 0x6e
  42df24:	d094      	beq.n	42de50 <d_name+0x10c>
  42df26:	4620      	mov	r0, r4
  42df28:	f7fe f848 	bl	42bfbc <d_number>
  42df2c:	1c47      	adds	r7, r0, #1
  42df2e:	d48f      	bmi.n	42de50 <d_name+0x10c>
  42df30:	68e2      	ldr	r2, [r4, #12]
  42df32:	7813      	ldrb	r3, [r2, #0]
  42df34:	2b5f      	cmp	r3, #95	@ 0x5f
  42df36:	d18b      	bne.n	42de50 <d_name+0x10c>
  42df38:	3201      	adds	r2, #1
  42df3a:	2100      	movs	r1, #0
  42df3c:	4620      	mov	r0, r4
  42df3e:	60e2      	str	r2, [r4, #12]
  42df40:	f7ff ff00 	bl	42dd44 <d_name>
  42df44:	4601      	mov	r1, r0
  42df46:	b160      	cbz	r0, 42df62 <d_name+0x21e>
  42df48:	7803      	ldrb	r3, [r0, #0]
  42df4a:	2b47      	cmp	r3, #71	@ 0x47
  42df4c:	d009      	beq.n	42df62 <d_name+0x21e>
  42df4e:	2b49      	cmp	r3, #73	@ 0x49
  42df50:	d007      	beq.n	42df62 <d_name+0x21e>
  42df52:	9001      	str	r0, [sp, #4]
  42df54:	4620      	mov	r0, r4
  42df56:	f7fe f8b3 	bl	42c0c0 <d_discriminator>
  42df5a:	9901      	ldr	r1, [sp, #4]
  42df5c:	2800      	cmp	r0, #0
  42df5e:	f43f af77 	beq.w	42de50 <d_name+0x10c>
  42df62:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
  42df66:	429a      	cmp	r2, r3
  42df68:	da23      	bge.n	42dfb2 <d_name+0x26e>
  42df6a:	6920      	ldr	r0, [r4, #16]
  42df6c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
  42df70:	f04f 0e00 	mov.w	lr, #0
  42df74:	3201      	adds	r2, #1
  42df76:	eb00 038c 	add.w	r3, r0, ip, lsl #2
  42df7a:	e9c3 ee01 	strd	lr, lr, [r3, #4]
  42df7e:	6162      	str	r2, [r4, #20]
  42df80:	2248      	movs	r2, #72	@ 0x48
  42df82:	f800 202c 	strb.w	r2, [r0, ip, lsl #2]
  42df86:	e9c3 1703 	strd	r1, r7, [r3, #12]
  42df8a:	782a      	ldrb	r2, [r5, #0]
  42df8c:	2a03      	cmp	r2, #3
  42df8e:	d009      	beq.n	42dfa4 <d_name+0x260>
  42df90:	462a      	mov	r2, r5
  42df92:	2102      	movs	r1, #2
  42df94:	4620      	mov	r0, r4
  42df96:	f7fd ff73 	bl	42be80 <d_make_comp>
  42df9a:	4605      	mov	r5, r0
  42df9c:	2e00      	cmp	r6, #0
  42df9e:	f47f aef1 	bne.w	42dd84 <d_name+0x40>
  42dfa2:	e6fa      	b.n	42dd9a <d_name+0x56>
  42dfa4:	692a      	ldr	r2, [r5, #16]
  42dfa6:	7811      	ldrb	r1, [r2, #0]
  42dfa8:	2929      	cmp	r1, #41	@ 0x29
  42dfaa:	d1f1      	bne.n	42df90 <d_name+0x24c>
  42dfac:	2100      	movs	r1, #0
  42dfae:	60d1      	str	r1, [r2, #12]
  42dfb0:	e7ee      	b.n	42df90 <d_name+0x24c>
  42dfb2:	2300      	movs	r3, #0
  42dfb4:	e7e9      	b.n	42df8a <d_name+0x246>
  42dfb6:	3302      	adds	r3, #2
  42dfb8:	4620      	mov	r0, r4
  42dfba:	60e3      	str	r3, [r4, #12]
  42dfbc:	f7fe f880 	bl	42c0c0 <d_discriminator>
  42dfc0:	2800      	cmp	r0, #0
  42dfc2:	f43f af45 	beq.w	42de50 <d_name+0x10c>
  42dfc6:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
  42dfca:	429a      	cmp	r2, r3
  42dfcc:	daf1      	bge.n	42dfb2 <d_name+0x26e>
  42dfce:	6921      	ldr	r1, [r4, #16]
  42dfd0:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  42dfd4:	3201      	adds	r2, #1
  42dfd6:	0098      	lsls	r0, r3, #2
  42dfd8:	6162      	str	r2, [r4, #20]
  42dfda:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  42dfde:	2200      	movs	r2, #0
  42dfe0:	e9c3 2201 	strd	r2, r2, [r3, #4]
  42dfe4:	540a      	strb	r2, [r1, r0]
  42dfe6:	4a05      	ldr	r2, [pc, #20]	@ (42dffc <d_name+0x2b8>)
  42dfe8:	60da      	str	r2, [r3, #12]
  42dfea:	220e      	movs	r2, #14
  42dfec:	611a      	str	r2, [r3, #16]
  42dfee:	e7cc      	b.n	42df8a <d_name+0x246>
  42dff0:	2700      	movs	r7, #0
  42dff2:	e788      	b.n	42df06 <d_name+0x1c2>
  42dff4:	2700      	movs	r7, #0
  42dff6:	e79f      	b.n	42df38 <d_name+0x1f4>
  42dff8:	00435194 	.word	0x00435194
  42dffc:	00435184 	.word	0x00435184

0042e000 <d_encoding.part.0>:
  42e000:	b570      	push	{r4, r5, r6, lr}
  42e002:	460e      	mov	r6, r1
  42e004:	2100      	movs	r1, #0
  42e006:	4605      	mov	r5, r0
  42e008:	f7ff fe9c 	bl	42dd44 <d_name>
  42e00c:	2800      	cmp	r0, #0
  42e00e:	d05b      	beq.n	42e0c8 <d_encoding.part.0+0xc8>
  42e010:	4604      	mov	r4, r0
  42e012:	b1ee      	cbz	r6, 42e050 <d_encoding.part.0+0x50>
  42e014:	68ab      	ldr	r3, [r5, #8]
  42e016:	07db      	lsls	r3, r3, #31
  42e018:	d41a      	bmi.n	42e050 <d_encoding.part.0+0x50>
  42e01a:	7823      	ldrb	r3, [r4, #0]
  42e01c:	2b4e      	cmp	r3, #78	@ 0x4e
  42e01e:	f1a3 011c 	sub.w	r1, r3, #28
  42e022:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
  42e026:	d041      	beq.n	42e0ac <d_encoding.part.0+0xac>
  42e028:	d83e      	bhi.n	42e0a8 <d_encoding.part.0+0xa8>
  42e02a:	2904      	cmp	r1, #4
  42e02c:	d93e      	bls.n	42e0ac <d_encoding.part.0+0xac>
  42e02e:	2b02      	cmp	r3, #2
  42e030:	d10c      	bne.n	42e04c <d_encoding.part.0+0x4c>
  42e032:	6923      	ldr	r3, [r4, #16]
  42e034:	2b00      	cmp	r3, #0
  42e036:	d047      	beq.n	42e0c8 <d_encoding.part.0+0xc8>
  42e038:	781a      	ldrb	r2, [r3, #0]
  42e03a:	2a4e      	cmp	r2, #78	@ 0x4e
  42e03c:	f1a2 001c 	sub.w	r0, r2, #28
  42e040:	f1a2 0150 	sub.w	r1, r2, #80	@ 0x50
  42e044:	d03c      	beq.n	42e0c0 <d_encoding.part.0+0xc0>
  42e046:	d839      	bhi.n	42e0bc <d_encoding.part.0+0xbc>
  42e048:	2804      	cmp	r0, #4
  42e04a:	d939      	bls.n	42e0c0 <d_encoding.part.0+0xc0>
  42e04c:	4620      	mov	r0, r4
  42e04e:	bd70      	pop	{r4, r5, r6, pc}
  42e050:	68eb      	ldr	r3, [r5, #12]
  42e052:	781b      	ldrb	r3, [r3, #0]
  42e054:	2b00      	cmp	r3, #0
  42e056:	d0f9      	beq.n	42e04c <d_encoding.part.0+0x4c>
  42e058:	2b45      	cmp	r3, #69	@ 0x45
  42e05a:	d0f7      	beq.n	42e04c <d_encoding.part.0+0x4c>
  42e05c:	4623      	mov	r3, r4
  42e05e:	781a      	ldrb	r2, [r3, #0]
  42e060:	2a04      	cmp	r2, #4
  42e062:	d034      	beq.n	42e0ce <d_encoding.part.0+0xce>
  42e064:	d924      	bls.n	42e0b0 <d_encoding.part.0+0xb0>
  42e066:	2a4e      	cmp	r2, #78	@ 0x4e
  42e068:	d006      	beq.n	42e078 <d_encoding.part.0+0x78>
  42e06a:	f1a2 011c 	sub.w	r1, r2, #28
  42e06e:	f1a2 0250 	sub.w	r2, r2, #80	@ 0x50
  42e072:	d83c      	bhi.n	42e0ee <d_encoding.part.0+0xee>
  42e074:	2904      	cmp	r1, #4
  42e076:	d802      	bhi.n	42e07e <d_encoding.part.0+0x7e>
  42e078:	68db      	ldr	r3, [r3, #12]
  42e07a:	2b00      	cmp	r3, #0
  42e07c:	d1ef      	bne.n	42e05e <d_encoding.part.0+0x5e>
  42e07e:	2100      	movs	r1, #0
  42e080:	4628      	mov	r0, r5
  42e082:	f7fe ffe7 	bl	42d054 <d_bare_function_type>
  42e086:	4603      	mov	r3, r0
  42e088:	b1f0      	cbz	r0, 42e0c8 <d_encoding.part.0+0xc8>
  42e08a:	b936      	cbnz	r6, 42e09a <d_encoding.part.0+0x9a>
  42e08c:	7822      	ldrb	r2, [r4, #0]
  42e08e:	2a02      	cmp	r2, #2
  42e090:	d103      	bne.n	42e09a <d_encoding.part.0+0x9a>
  42e092:	7802      	ldrb	r2, [r0, #0]
  42e094:	2a29      	cmp	r2, #41	@ 0x29
  42e096:	bf08      	it	eq
  42e098:	60c6      	streq	r6, [r0, #12]
  42e09a:	4622      	mov	r2, r4
  42e09c:	4628      	mov	r0, r5
  42e09e:	2103      	movs	r1, #3
  42e0a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42e0a4:	f7fd beec 	b.w	42be80 <d_make_comp>
  42e0a8:	2a01      	cmp	r2, #1
  42e0aa:	d8cf      	bhi.n	42e04c <d_encoding.part.0+0x4c>
  42e0ac:	68e4      	ldr	r4, [r4, #12]
  42e0ae:	e7b4      	b.n	42e01a <d_encoding.part.0+0x1a>
  42e0b0:	2a02      	cmp	r2, #2
  42e0b2:	d1e4      	bne.n	42e07e <d_encoding.part.0+0x7e>
  42e0b4:	691b      	ldr	r3, [r3, #16]
  42e0b6:	2b00      	cmp	r3, #0
  42e0b8:	d1d1      	bne.n	42e05e <d_encoding.part.0+0x5e>
  42e0ba:	e7e0      	b.n	42e07e <d_encoding.part.0+0x7e>
  42e0bc:	2901      	cmp	r1, #1
  42e0be:	d8c5      	bhi.n	42e04c <d_encoding.part.0+0x4c>
  42e0c0:	68db      	ldr	r3, [r3, #12]
  42e0c2:	6123      	str	r3, [r4, #16]
  42e0c4:	2b00      	cmp	r3, #0
  42e0c6:	d1b7      	bne.n	42e038 <d_encoding.part.0+0x38>
  42e0c8:	2400      	movs	r4, #0
  42e0ca:	4620      	mov	r0, r4
  42e0cc:	bd70      	pop	{r4, r5, r6, pc}
  42e0ce:	68da      	ldr	r2, [r3, #12]
  42e0d0:	b15a      	cbz	r2, 42e0ea <d_encoding.part.0+0xea>
  42e0d2:	7813      	ldrb	r3, [r2, #0]
  42e0d4:	2b08      	cmp	r3, #8
  42e0d6:	f103 31ff 	add.w	r1, r3, #4294967295	@ 0xffffffff
  42e0da:	d80b      	bhi.n	42e0f4 <d_encoding.part.0+0xf4>
  42e0dc:	2b06      	cmp	r3, #6
  42e0de:	d8ce      	bhi.n	42e07e <d_encoding.part.0+0x7e>
  42e0e0:	2901      	cmp	r1, #1
  42e0e2:	d802      	bhi.n	42e0ea <d_encoding.part.0+0xea>
  42e0e4:	6912      	ldr	r2, [r2, #16]
  42e0e6:	2a00      	cmp	r2, #0
  42e0e8:	d1f3      	bne.n	42e0d2 <d_encoding.part.0+0xd2>
  42e0ea:	2101      	movs	r1, #1
  42e0ec:	e7c8      	b.n	42e080 <d_encoding.part.0+0x80>
  42e0ee:	2a01      	cmp	r2, #1
  42e0f0:	d9c2      	bls.n	42e078 <d_encoding.part.0+0x78>
  42e0f2:	e7c4      	b.n	42e07e <d_encoding.part.0+0x7e>
  42e0f4:	f1b3 0135 	subs.w	r1, r3, #53	@ 0x35
  42e0f8:	bf18      	it	ne
  42e0fa:	2101      	movne	r1, #1
  42e0fc:	e7c0      	b.n	42e080 <d_encoding.part.0+0x80>
  42e0fe:	bf00      	nop

0042e100 <d_special_name>:
  42e100:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  42e102:	68c3      	ldr	r3, [r0, #12]
  42e104:	f101 0214 	add.w	r2, r1, #20
  42e108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  42e10c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  42e10e:	b083      	sub	sp, #12
  42e110:	781a      	ldrb	r2, [r3, #0]
  42e112:	4604      	mov	r4, r0
  42e114:	2a54      	cmp	r2, #84	@ 0x54
  42e116:	d029      	beq.n	42e16c <d_special_name+0x6c>
  42e118:	2a47      	cmp	r2, #71	@ 0x47
  42e11a:	d123      	bne.n	42e164 <d_special_name+0x64>
  42e11c:	1c5a      	adds	r2, r3, #1
  42e11e:	60c2      	str	r2, [r0, #12]
  42e120:	785a      	ldrb	r2, [r3, #1]
  42e122:	b1fa      	cbz	r2, 42e164 <d_special_name+0x64>
  42e124:	1c9a      	adds	r2, r3, #2
  42e126:	60c2      	str	r2, [r0, #12]
  42e128:	785a      	ldrb	r2, [r3, #1]
  42e12a:	2a56      	cmp	r2, #86	@ 0x56
  42e12c:	f200 80e9 	bhi.w	42e302 <d_special_name+0x202>
  42e130:	2a40      	cmp	r2, #64	@ 0x40
  42e132:	d917      	bls.n	42e164 <d_special_name+0x64>
  42e134:	3a41      	subs	r2, #65	@ 0x41
  42e136:	2a15      	cmp	r2, #21
  42e138:	d814      	bhi.n	42e164 <d_special_name+0x64>
  42e13a:	e8df f002 	tbb	[pc, r2]
  42e13e:	13d2      	.short	0x13d2
  42e140:	13131313 	.word	0x13131313
  42e144:	130b1313 	.word	0x130b1313
  42e148:	13131313 	.word	0x13131313
  42e14c:	b4131313 	.word	0xb4131313
  42e150:	91139d13 	.word	0x91139d13
  42e154:	2500      	movs	r5, #0
  42e156:	a901      	add	r1, sp, #4
  42e158:	9501      	str	r5, [sp, #4]
  42e15a:	f7fe fb37 	bl	42c7cc <d_maybe_module_name>
  42e15e:	2800      	cmp	r0, #0
  42e160:	f040 8120 	bne.w	42e3a4 <d_special_name+0x2a4>
  42e164:	2000      	movs	r0, #0
  42e166:	b003      	add	sp, #12
  42e168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  42e16c:	1c5a      	adds	r2, r3, #1
  42e16e:	60c2      	str	r2, [r0, #12]
  42e170:	785a      	ldrb	r2, [r3, #1]
  42e172:	2a00      	cmp	r2, #0
  42e174:	d0f6      	beq.n	42e164 <d_special_name+0x64>
  42e176:	1c9a      	adds	r2, r3, #2
  42e178:	60c2      	str	r2, [r0, #12]
  42e17a:	785b      	ldrb	r3, [r3, #1]
  42e17c:	3b41      	subs	r3, #65	@ 0x41
  42e17e:	2b35      	cmp	r3, #53	@ 0x35
  42e180:	d8f0      	bhi.n	42e164 <d_special_name+0x64>
  42e182:	a201      	add	r2, pc, #4	@ (adr r2, 42e188 <d_special_name+0x88>)
  42e184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  42e188:	0042e3ff 	.word	0x0042e3ff
  42e18c:	0042e165 	.word	0x0042e165
  42e190:	0042e4d9 	.word	0x0042e4d9
  42e194:	0042e165 	.word	0x0042e165
  42e198:	0042e165 	.word	0x0042e165
  42e19c:	0042e4cd 	.word	0x0042e4cd
  42e1a0:	0042e165 	.word	0x0042e165
  42e1a4:	0042e50d 	.word	0x0042e50d
  42e1a8:	0042e40b 	.word	0x0042e40b
  42e1ac:	0042e417 	.word	0x0042e417
  42e1b0:	0042e165 	.word	0x0042e165
  42e1b4:	0042e165 	.word	0x0042e165
  42e1b8:	0042e165 	.word	0x0042e165
  42e1bc:	0042e165 	.word	0x0042e165
  42e1c0:	0042e165 	.word	0x0042e165
  42e1c4:	0042e165 	.word	0x0042e165
  42e1c8:	0042e165 	.word	0x0042e165
  42e1cc:	0042e165 	.word	0x0042e165
  42e1d0:	0042e423 	.word	0x0042e423
  42e1d4:	0042e42f 	.word	0x0042e42f
  42e1d8:	0042e165 	.word	0x0042e165
  42e1dc:	0042e43f 	.word	0x0042e43f
  42e1e0:	0042e44f 	.word	0x0042e44f
  42e1e4:	0042e165 	.word	0x0042e165
  42e1e8:	0042e165 	.word	0x0042e165
  42e1ec:	0042e165 	.word	0x0042e165
  42e1f0:	0042e165 	.word	0x0042e165
  42e1f4:	0042e165 	.word	0x0042e165
  42e1f8:	0042e165 	.word	0x0042e165
  42e1fc:	0042e165 	.word	0x0042e165
  42e200:	0042e165 	.word	0x0042e165
  42e204:	0042e165 	.word	0x0042e165
  42e208:	0042e165 	.word	0x0042e165
  42e20c:	0042e165 	.word	0x0042e165
  42e210:	0042e45d 	.word	0x0042e45d
  42e214:	0042e165 	.word	0x0042e165
  42e218:	0042e165 	.word	0x0042e165
  42e21c:	0042e165 	.word	0x0042e165
  42e220:	0042e165 	.word	0x0042e165
  42e224:	0042e49d 	.word	0x0042e49d
  42e228:	0042e165 	.word	0x0042e165
  42e22c:	0042e165 	.word	0x0042e165
  42e230:	0042e165 	.word	0x0042e165
  42e234:	0042e165 	.word	0x0042e165
  42e238:	0042e165 	.word	0x0042e165
  42e23c:	0042e165 	.word	0x0042e165
  42e240:	0042e165 	.word	0x0042e165
  42e244:	0042e165 	.word	0x0042e165
  42e248:	0042e165 	.word	0x0042e165
  42e24c:	0042e165 	.word	0x0042e165
  42e250:	0042e165 	.word	0x0042e165
  42e254:	0042e165 	.word	0x0042e165
  42e258:	0042e165 	.word	0x0042e165
  42e25c:	0042e3cb 	.word	0x0042e3cb
  42e260:	2100      	movs	r1, #0
  42e262:	f7ff fd6f 	bl	42dd44 <d_name>
  42e266:	2300      	movs	r3, #0
  42e268:	4602      	mov	r2, r0
  42e26a:	2113      	movs	r1, #19
  42e26c:	4620      	mov	r0, r4
  42e26e:	b003      	add	sp, #12
  42e270:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  42e274:	f7fd be04 	b.w	42be80 <d_make_comp>
  42e278:	789a      	ldrb	r2, [r3, #2]
  42e27a:	2a00      	cmp	r2, #0
  42e27c:	f000 809d 	beq.w	42e3ba <d_special_name+0x2ba>
  42e280:	1cda      	adds	r2, r3, #3
  42e282:	60c2      	str	r2, [r0, #12]
  42e284:	789a      	ldrb	r2, [r3, #2]
  42e286:	78db      	ldrb	r3, [r3, #3]
  42e288:	2a6e      	cmp	r2, #110	@ 0x6e
  42e28a:	f000 8167 	beq.w	42e55c <d_special_name+0x45c>
  42e28e:	2b47      	cmp	r3, #71	@ 0x47
  42e290:	d002      	beq.n	42e298 <d_special_name+0x198>
  42e292:	2b54      	cmp	r3, #84	@ 0x54
  42e294:	f040 8091 	bne.w	42e3ba <d_special_name+0x2ba>
  42e298:	4620      	mov	r0, r4
  42e29a:	f7ff ff31 	bl	42e100 <d_special_name>
  42e29e:	4602      	mov	r2, r0
  42e2a0:	2300      	movs	r3, #0
  42e2a2:	214a      	movs	r1, #74	@ 0x4a
  42e2a4:	e7e2      	b.n	42e26c <d_special_name+0x16c>
  42e2a6:	2100      	movs	r1, #0
  42e2a8:	f7ff fd4c 	bl	42dd44 <d_name>
  42e2ac:	4606      	mov	r6, r0
  42e2ae:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
  42e2b2:	4291      	cmp	r1, r2
  42e2b4:	f280 8087 	bge.w	42e3c6 <d_special_name+0x2c6>
  42e2b8:	6922      	ldr	r2, [r4, #16]
  42e2ba:	eb01 0081 	add.w	r0, r1, r1, lsl #2
  42e2be:	2300      	movs	r3, #0
  42e2c0:	3101      	adds	r1, #1
  42e2c2:	eb02 0580 	add.w	r5, r2, r0, lsl #2
  42e2c6:	e9c5 3301 	strd	r3, r3, [r5, #4]
  42e2ca:	2343      	movs	r3, #67	@ 0x43
  42e2cc:	6161      	str	r1, [r4, #20]
  42e2ce:	f802 3020 	strb.w	r3, [r2, r0, lsl #2]
  42e2d2:	4620      	mov	r0, r4
  42e2d4:	f7fd fe72 	bl	42bfbc <d_number>
  42e2d8:	60e8      	str	r0, [r5, #12]
  42e2da:	462b      	mov	r3, r5
  42e2dc:	4632      	mov	r2, r6
  42e2de:	2116      	movs	r1, #22
  42e2e0:	e7c4      	b.n	42e26c <d_special_name+0x16c>
  42e2e2:	7899      	ldrb	r1, [r3, #2]
  42e2e4:	2947      	cmp	r1, #71	@ 0x47
  42e2e6:	d064      	beq.n	42e3b2 <d_special_name+0x2b2>
  42e2e8:	f1a1 0154 	sub.w	r1, r1, #84	@ 0x54
  42e2ec:	fab1 f181 	clz	r1, r1
  42e2f0:	0949      	lsrs	r1, r1, #5
  42e2f2:	2900      	cmp	r1, #0
  42e2f4:	d15d      	bne.n	42e3b2 <d_special_name+0x2b2>
  42e2f6:	f7ff fe83 	bl	42e000 <d_encoding.part.0>
  42e2fa:	4602      	mov	r2, r0
  42e2fc:	2300      	movs	r3, #0
  42e2fe:	2117      	movs	r1, #23
  42e300:	e7b4      	b.n	42e26c <d_special_name+0x16c>
  42e302:	2a72      	cmp	r2, #114	@ 0x72
  42e304:	f47f af2e 	bne.w	42e164 <d_special_name+0x64>
  42e308:	f7fd fe58 	bl	42bfbc <d_number>
  42e30c:	2801      	cmp	r0, #1
  42e30e:	f77f af29 	ble.w	42e164 <d_special_name+0x64>
  42e312:	68e3      	ldr	r3, [r4, #12]
  42e314:	781a      	ldrb	r2, [r3, #0]
  42e316:	2a00      	cmp	r2, #0
  42e318:	f43f af24 	beq.w	42e164 <d_special_name+0x64>
  42e31c:	1c5e      	adds	r6, r3, #1
  42e31e:	60e6      	str	r6, [r4, #12]
  42e320:	781b      	ldrb	r3, [r3, #0]
  42e322:	2b5f      	cmp	r3, #95	@ 0x5f
  42e324:	f47f af1e 	bne.w	42e164 <d_special_name+0x64>
  42e328:	2700      	movs	r7, #0
  42e32a:	1e45      	subs	r5, r0, #1
  42e32c:	f04f 0942 	mov.w	r9, #66	@ 0x42
  42e330:	46b8      	mov	r8, r7
  42e332:	7833      	ldrb	r3, [r6, #0]
  42e334:	2b00      	cmp	r3, #0
  42e336:	f43f af15 	beq.w	42e164 <d_special_name+0x64>
  42e33a:	2b24      	cmp	r3, #36	@ 0x24
  42e33c:	f040 80ed 	bne.w	42e51a <d_special_name+0x41a>
  42e340:	7873      	ldrb	r3, [r6, #1]
  42e342:	2b53      	cmp	r3, #83	@ 0x53
  42e344:	f000 8104 	beq.w	42e550 <d_special_name+0x450>
  42e348:	2b5f      	cmp	r3, #95	@ 0x5f
  42e34a:	f000 8103 	beq.w	42e554 <d_special_name+0x454>
  42e34e:	2b24      	cmp	r3, #36	@ 0x24
  42e350:	f47f af08 	bne.w	42e164 <d_special_name+0x64>
  42e354:	461a      	mov	r2, r3
  42e356:	68e6      	ldr	r6, [r4, #12]
  42e358:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
  42e35c:	3602      	adds	r6, #2
  42e35e:	4299      	cmp	r1, r3
  42e360:	f280 80fa 	bge.w	42e558 <d_special_name+0x458>
  42e364:	6920      	ldr	r0, [r4, #16]
  42e366:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
  42e36a:	3d02      	subs	r5, #2
  42e36c:	3101      	adds	r1, #1
  42e36e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
  42e372:	e9c3 8801 	strd	r8, r8, [r3, #4]
  42e376:	6161      	str	r1, [r4, #20]
  42e378:	f800 902c 	strb.w	r9, [r0, ip, lsl #2]
  42e37c:	60da      	str	r2, [r3, #12]
  42e37e:	60e6      	str	r6, [r4, #12]
  42e380:	2f00      	cmp	r7, #0
  42e382:	f000 80e3 	beq.w	42e54c <d_special_name+0x44c>
  42e386:	463a      	mov	r2, r7
  42e388:	2141      	movs	r1, #65	@ 0x41
  42e38a:	4620      	mov	r0, r4
  42e38c:	f7fd fd78 	bl	42be80 <d_make_comp>
  42e390:	4607      	mov	r7, r0
  42e392:	2800      	cmp	r0, #0
  42e394:	f43f aee6 	beq.w	42e164 <d_special_name+0x64>
  42e398:	2d00      	cmp	r5, #0
  42e39a:	dcca      	bgt.n	42e332 <d_special_name+0x232>
  42e39c:	2300      	movs	r3, #0
  42e39e:	463a      	mov	r2, r7
  42e3a0:	2140      	movs	r1, #64	@ 0x40
  42e3a2:	e763      	b.n	42e26c <d_special_name+0x16c>
  42e3a4:	9a01      	ldr	r2, [sp, #4]
  42e3a6:	2a00      	cmp	r2, #0
  42e3a8:	f43f aedc 	beq.w	42e164 <d_special_name+0x64>
  42e3ac:	462b      	mov	r3, r5
  42e3ae:	2156      	movs	r1, #86	@ 0x56
  42e3b0:	e75c      	b.n	42e26c <d_special_name+0x16c>
  42e3b2:	f7ff fea5 	bl	42e100 <d_special_name>
  42e3b6:	4602      	mov	r2, r0
  42e3b8:	e7a0      	b.n	42e2fc <d_special_name+0x1fc>
  42e3ba:	2100      	movs	r1, #0
  42e3bc:	4620      	mov	r0, r4
  42e3be:	f7ff fe1f 	bl	42e000 <d_encoding.part.0>
  42e3c2:	4602      	mov	r2, r0
  42e3c4:	e76c      	b.n	42e2a0 <d_special_name+0x1a0>
  42e3c6:	2500      	movs	r5, #0
  42e3c8:	e787      	b.n	42e2da <d_special_name+0x1da>
  42e3ca:	2176      	movs	r1, #118	@ 0x76
  42e3cc:	f7fd fe36 	bl	42c03c <d_call_offset>
  42e3d0:	2800      	cmp	r0, #0
  42e3d2:	f43f aec7 	beq.w	42e164 <d_special_name+0x64>
  42e3d6:	68e3      	ldr	r3, [r4, #12]
  42e3d8:	4620      	mov	r0, r4
  42e3da:	781b      	ldrb	r3, [r3, #0]
  42e3dc:	2b47      	cmp	r3, #71	@ 0x47
  42e3de:	f000 80cf 	beq.w	42e580 <d_special_name+0x480>
  42e3e2:	f1a3 0154 	sub.w	r1, r3, #84	@ 0x54
  42e3e6:	fab1 f181 	clz	r1, r1
  42e3ea:	0949      	lsrs	r1, r1, #5
  42e3ec:	2900      	cmp	r1, #0
  42e3ee:	f040 80c7 	bne.w	42e580 <d_special_name+0x480>
  42e3f2:	f7ff fe05 	bl	42e000 <d_encoding.part.0>
  42e3f6:	4602      	mov	r2, r0
  42e3f8:	2300      	movs	r3, #0
  42e3fa:	2110      	movs	r1, #16
  42e3fc:	e736      	b.n	42e26c <d_special_name+0x16c>
  42e3fe:	f000 f949 	bl	42e694 <d_template_arg>
  42e402:	2300      	movs	r3, #0
  42e404:	4602      	mov	r2, r0
  42e406:	2130      	movs	r1, #48	@ 0x30
  42e408:	e730      	b.n	42e26c <d_special_name+0x16c>
  42e40a:	f7fe fa0f 	bl	42c82c <d_type>
  42e40e:	2300      	movs	r3, #0
  42e410:	4602      	mov	r2, r0
  42e412:	210c      	movs	r1, #12
  42e414:	e72a      	b.n	42e26c <d_special_name+0x16c>
  42e416:	f7fe fa09 	bl	42c82c <d_type>
  42e41a:	2300      	movs	r3, #0
  42e41c:	4602      	mov	r2, r0
  42e41e:	2112      	movs	r1, #18
  42e420:	e724      	b.n	42e26c <d_special_name+0x16c>
  42e422:	f7fe fa03 	bl	42c82c <d_type>
  42e426:	2300      	movs	r3, #0
  42e428:	4602      	mov	r2, r0
  42e42a:	210d      	movs	r1, #13
  42e42c:	e71e      	b.n	42e26c <d_special_name+0x16c>
  42e42e:	310a      	adds	r1, #10
  42e430:	62c1      	str	r1, [r0, #44]	@ 0x2c
  42e432:	f7fe f9fb 	bl	42c82c <d_type>
  42e436:	2300      	movs	r3, #0
  42e438:	4602      	mov	r2, r0
  42e43a:	210a      	movs	r1, #10
  42e43c:	e716      	b.n	42e26c <d_special_name+0x16c>
  42e43e:	310f      	adds	r1, #15
  42e440:	62c1      	str	r1, [r0, #44]	@ 0x2c
  42e442:	f7fe f9f3 	bl	42c82c <d_type>
  42e446:	2300      	movs	r3, #0
  42e448:	4602      	mov	r2, r0
  42e44a:	2109      	movs	r1, #9
  42e44c:	e70e      	b.n	42e26c <d_special_name+0x16c>
  42e44e:	2100      	movs	r1, #0
  42e450:	f7ff fc78 	bl	42dd44 <d_name>
  42e454:	2300      	movs	r3, #0
  42e456:	4602      	mov	r2, r0
  42e458:	2115      	movs	r1, #21
  42e45a:	e707      	b.n	42e26c <d_special_name+0x16c>
  42e45c:	2100      	movs	r1, #0
  42e45e:	f7fd fded 	bl	42c03c <d_call_offset>
  42e462:	2800      	cmp	r0, #0
  42e464:	f43f ae7e 	beq.w	42e164 <d_special_name+0x64>
  42e468:	2100      	movs	r1, #0
  42e46a:	4620      	mov	r0, r4
  42e46c:	f7fd fde6 	bl	42c03c <d_call_offset>
  42e470:	2800      	cmp	r0, #0
  42e472:	f43f ae77 	beq.w	42e164 <d_special_name+0x64>
  42e476:	68e3      	ldr	r3, [r4, #12]
  42e478:	4620      	mov	r0, r4
  42e47a:	781b      	ldrb	r3, [r3, #0]
  42e47c:	2b47      	cmp	r3, #71	@ 0x47
  42e47e:	f000 8087 	beq.w	42e590 <d_special_name+0x490>
  42e482:	f1a3 0154 	sub.w	r1, r3, #84	@ 0x54
  42e486:	fab1 f181 	clz	r1, r1
  42e48a:	0949      	lsrs	r1, r1, #5
  42e48c:	2900      	cmp	r1, #0
  42e48e:	d17f      	bne.n	42e590 <d_special_name+0x490>
  42e490:	f7ff fdb6 	bl	42e000 <d_encoding.part.0>
  42e494:	4602      	mov	r2, r0
  42e496:	2300      	movs	r3, #0
  42e498:	2111      	movs	r1, #17
  42e49a:	e6e7      	b.n	42e26c <d_special_name+0x16c>
  42e49c:	2168      	movs	r1, #104	@ 0x68
  42e49e:	f7fd fdcd 	bl	42c03c <d_call_offset>
  42e4a2:	2800      	cmp	r0, #0
  42e4a4:	f43f ae5e 	beq.w	42e164 <d_special_name+0x64>
  42e4a8:	68e3      	ldr	r3, [r4, #12]
  42e4aa:	4620      	mov	r0, r4
  42e4ac:	781b      	ldrb	r3, [r3, #0]
  42e4ae:	2b47      	cmp	r3, #71	@ 0x47
  42e4b0:	d062      	beq.n	42e578 <d_special_name+0x478>
  42e4b2:	f1a3 0154 	sub.w	r1, r3, #84	@ 0x54
  42e4b6:	fab1 f181 	clz	r1, r1
  42e4ba:	0949      	lsrs	r1, r1, #5
  42e4bc:	2900      	cmp	r1, #0
  42e4be:	d15b      	bne.n	42e578 <d_special_name+0x478>
  42e4c0:	f7ff fd9e 	bl	42e000 <d_encoding.part.0>
  42e4c4:	4602      	mov	r2, r0
  42e4c6:	2300      	movs	r3, #0
  42e4c8:	210f      	movs	r1, #15
  42e4ca:	e6cf      	b.n	42e26c <d_special_name+0x16c>
  42e4cc:	f7fe f9ae 	bl	42c82c <d_type>
  42e4d0:	2300      	movs	r3, #0
  42e4d2:	4602      	mov	r2, r0
  42e4d4:	210e      	movs	r1, #14
  42e4d6:	e6c9      	b.n	42e26c <d_special_name+0x16c>
  42e4d8:	f7fe f9a8 	bl	42c82c <d_type>
  42e4dc:	4605      	mov	r5, r0
  42e4de:	4620      	mov	r0, r4
  42e4e0:	f7fd fd6c 	bl	42bfbc <d_number>
  42e4e4:	2800      	cmp	r0, #0
  42e4e6:	f6ff ae3d 	blt.w	42e164 <d_special_name+0x64>
  42e4ea:	68e3      	ldr	r3, [r4, #12]
  42e4ec:	781a      	ldrb	r2, [r3, #0]
  42e4ee:	2a5f      	cmp	r2, #95	@ 0x5f
  42e4f0:	f47f ae38 	bne.w	42e164 <d_special_name+0x64>
  42e4f4:	3301      	adds	r3, #1
  42e4f6:	4620      	mov	r0, r4
  42e4f8:	60e3      	str	r3, [r4, #12]
  42e4fa:	f7fe f997 	bl	42c82c <d_type>
  42e4fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
  42e500:	4602      	mov	r2, r0
  42e502:	462b      	mov	r3, r5
  42e504:	3605      	adds	r6, #5
  42e506:	210b      	movs	r1, #11
  42e508:	62e6      	str	r6, [r4, #44]	@ 0x2c
  42e50a:	e6af      	b.n	42e26c <d_special_name+0x16c>
  42e50c:	2100      	movs	r1, #0
  42e50e:	f7ff fc19 	bl	42dd44 <d_name>
  42e512:	2300      	movs	r3, #0
  42e514:	4602      	mov	r2, r0
  42e516:	2114      	movs	r1, #20
  42e518:	e6a8      	b.n	42e26c <d_special_name+0x16c>
  42e51a:	1e71      	subs	r1, r6, #1
  42e51c:	2200      	movs	r2, #0
  42e51e:	e004      	b.n	42e52a <d_special_name+0x42a>
  42e520:	2b24      	cmp	r3, #36	@ 0x24
  42e522:	d006      	beq.n	42e532 <d_special_name+0x432>
  42e524:	3201      	adds	r2, #1
  42e526:	42aa      	cmp	r2, r5
  42e528:	d003      	beq.n	42e532 <d_special_name+0x432>
  42e52a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  42e52e:	2b00      	cmp	r3, #0
  42e530:	d1f6      	bne.n	42e520 <d_special_name+0x420>
  42e532:	4631      	mov	r1, r6
  42e534:	4620      	mov	r0, r4
  42e536:	f7fd fd1f 	bl	42bf78 <d_make_name>
  42e53a:	68e6      	ldr	r6, [r4, #12]
  42e53c:	1aad      	subs	r5, r5, r2
  42e53e:	4603      	mov	r3, r0
  42e540:	4416      	add	r6, r2
  42e542:	60e6      	str	r6, [r4, #12]
  42e544:	2800      	cmp	r0, #0
  42e546:	f47f af1b 	bne.w	42e380 <d_special_name+0x280>
  42e54a:	e60b      	b.n	42e164 <d_special_name+0x64>
  42e54c:	461f      	mov	r7, r3
  42e54e:	e723      	b.n	42e398 <d_special_name+0x298>
  42e550:	222f      	movs	r2, #47	@ 0x2f
  42e552:	e700      	b.n	42e356 <d_special_name+0x256>
  42e554:	222e      	movs	r2, #46	@ 0x2e
  42e556:	e6fe      	b.n	42e356 <d_special_name+0x256>
  42e558:	60e6      	str	r6, [r4, #12]
  42e55a:	e603      	b.n	42e164 <d_special_name+0x64>
  42e55c:	2b47      	cmp	r3, #71	@ 0x47
  42e55e:	d013      	beq.n	42e588 <d_special_name+0x488>
  42e560:	f1a3 0154 	sub.w	r1, r3, #84	@ 0x54
  42e564:	fab1 f181 	clz	r1, r1
  42e568:	0949      	lsrs	r1, r1, #5
  42e56a:	b969      	cbnz	r1, 42e588 <d_special_name+0x488>
  42e56c:	f7ff fd48 	bl	42e000 <d_encoding.part.0>
  42e570:	4602      	mov	r2, r0
  42e572:	2300      	movs	r3, #0
  42e574:	214b      	movs	r1, #75	@ 0x4b
  42e576:	e679      	b.n	42e26c <d_special_name+0x16c>
  42e578:	f7ff fdc2 	bl	42e100 <d_special_name>
  42e57c:	4602      	mov	r2, r0
  42e57e:	e7a2      	b.n	42e4c6 <d_special_name+0x3c6>
  42e580:	f7ff fdbe 	bl	42e100 <d_special_name>
  42e584:	4602      	mov	r2, r0
  42e586:	e737      	b.n	42e3f8 <d_special_name+0x2f8>
  42e588:	f7ff fdba 	bl	42e100 <d_special_name>
  42e58c:	4602      	mov	r2, r0
  42e58e:	e7f0      	b.n	42e572 <d_special_name+0x472>
  42e590:	f7ff fdb6 	bl	42e100 <d_special_name>
  42e594:	4602      	mov	r2, r0
  42e596:	e77e      	b.n	42e496 <d_special_name+0x396>

0042e598 <d_expr_primary>:
  42e598:	68c2      	ldr	r2, [r0, #12]
  42e59a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42e59c:	7813      	ldrb	r3, [r2, #0]
  42e59e:	2b4c      	cmp	r3, #76	@ 0x4c
  42e5a0:	d11e      	bne.n	42e5e0 <d_expr_primary+0x48>
  42e5a2:	1c53      	adds	r3, r2, #1
  42e5a4:	4604      	mov	r4, r0
  42e5a6:	60c3      	str	r3, [r0, #12]
  42e5a8:	7851      	ldrb	r1, [r2, #1]
  42e5aa:	295f      	cmp	r1, #95	@ 0x5f
  42e5ac:	d04a      	beq.n	42e644 <d_expr_primary+0xac>
  42e5ae:	295a      	cmp	r1, #90	@ 0x5a
  42e5b0:	d019      	beq.n	42e5e6 <d_expr_primary+0x4e>
  42e5b2:	f7fe f93b 	bl	42c82c <d_type>
  42e5b6:	4605      	mov	r5, r0
  42e5b8:	b190      	cbz	r0, 42e5e0 <d_expr_primary+0x48>
  42e5ba:	7803      	ldrb	r3, [r0, #0]
  42e5bc:	68e6      	ldr	r6, [r4, #12]
  42e5be:	2b27      	cmp	r3, #39	@ 0x27
  42e5c0:	d047      	beq.n	42e652 <d_expr_primary+0xba>
  42e5c2:	7833      	ldrb	r3, [r6, #0]
  42e5c4:	2b6e      	cmp	r3, #110	@ 0x6e
  42e5c6:	d028      	beq.n	42e61a <d_expr_primary+0x82>
  42e5c8:	273d      	movs	r7, #61	@ 0x3d
  42e5ca:	2b45      	cmp	r3, #69	@ 0x45
  42e5cc:	d05b      	beq.n	42e686 <d_expr_primary+0xee>
  42e5ce:	4632      	mov	r2, r6
  42e5d0:	e003      	b.n	42e5da <d_expr_primary+0x42>
  42e5d2:	60e2      	str	r2, [r4, #12]
  42e5d4:	7813      	ldrb	r3, [r2, #0]
  42e5d6:	2b45      	cmp	r3, #69	@ 0x45
  42e5d8:	d025      	beq.n	42e626 <d_expr_primary+0x8e>
  42e5da:	3201      	adds	r2, #1
  42e5dc:	2b00      	cmp	r3, #0
  42e5de:	d1f8      	bne.n	42e5d2 <d_expr_primary+0x3a>
  42e5e0:	2500      	movs	r5, #0
  42e5e2:	4628      	mov	r0, r5
  42e5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42e5e6:	295f      	cmp	r1, #95	@ 0x5f
  42e5e8:	d02c      	beq.n	42e644 <d_expr_primary+0xac>
  42e5ea:	1c5a      	adds	r2, r3, #1
  42e5ec:	4620      	mov	r0, r4
  42e5ee:	60e2      	str	r2, [r4, #12]
  42e5f0:	7859      	ldrb	r1, [r3, #1]
  42e5f2:	2947      	cmp	r1, #71	@ 0x47
  42e5f4:	d041      	beq.n	42e67a <d_expr_primary+0xe2>
  42e5f6:	f1a1 0154 	sub.w	r1, r1, #84	@ 0x54
  42e5fa:	fab1 f181 	clz	r1, r1
  42e5fe:	0949      	lsrs	r1, r1, #5
  42e600:	2900      	cmp	r1, #0
  42e602:	d13a      	bne.n	42e67a <d_expr_primary+0xe2>
  42e604:	f7ff fcfc 	bl	42e000 <d_encoding.part.0>
  42e608:	68e3      	ldr	r3, [r4, #12]
  42e60a:	4605      	mov	r5, r0
  42e60c:	781a      	ldrb	r2, [r3, #0]
  42e60e:	2a45      	cmp	r2, #69	@ 0x45
  42e610:	d1e6      	bne.n	42e5e0 <d_expr_primary+0x48>
  42e612:	3301      	adds	r3, #1
  42e614:	4628      	mov	r0, r5
  42e616:	60e3      	str	r3, [r4, #12]
  42e618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42e61a:	1c72      	adds	r2, r6, #1
  42e61c:	273e      	movs	r7, #62	@ 0x3e
  42e61e:	60e2      	str	r2, [r4, #12]
  42e620:	7873      	ldrb	r3, [r6, #1]
  42e622:	4616      	mov	r6, r2
  42e624:	e7d1      	b.n	42e5ca <d_expr_primary+0x32>
  42e626:	1b92      	subs	r2, r2, r6
  42e628:	4631      	mov	r1, r6
  42e62a:	4620      	mov	r0, r4
  42e62c:	f7fd fca4 	bl	42bf78 <d_make_name>
  42e630:	462a      	mov	r2, r5
  42e632:	4603      	mov	r3, r0
  42e634:	4639      	mov	r1, r7
  42e636:	4620      	mov	r0, r4
  42e638:	f7fd fc22 	bl	42be80 <d_make_comp>
  42e63c:	68e3      	ldr	r3, [r4, #12]
  42e63e:	4605      	mov	r5, r0
  42e640:	781a      	ldrb	r2, [r3, #0]
  42e642:	e7e4      	b.n	42e60e <d_expr_primary+0x76>
  42e644:	1c93      	adds	r3, r2, #2
  42e646:	60e3      	str	r3, [r4, #12]
  42e648:	7892      	ldrb	r2, [r2, #2]
  42e64a:	2a5a      	cmp	r2, #90	@ 0x5a
  42e64c:	d0cd      	beq.n	42e5ea <d_expr_primary+0x52>
  42e64e:	2500      	movs	r5, #0
  42e650:	e7dd      	b.n	42e60e <d_expr_primary+0x76>
  42e652:	68c3      	ldr	r3, [r0, #12]
  42e654:	7c1a      	ldrb	r2, [r3, #16]
  42e656:	b11a      	cbz	r2, 42e660 <d_expr_primary+0xc8>
  42e658:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  42e65a:	6859      	ldr	r1, [r3, #4]
  42e65c:	1a52      	subs	r2, r2, r1
  42e65e:	62e2      	str	r2, [r4, #44]	@ 0x2c
  42e660:	6818      	ldr	r0, [r3, #0]
  42e662:	490b      	ldr	r1, [pc, #44]	@ (42e690 <d_expr_primary+0xf8>)
  42e664:	f7e1 fecc 	bl	410400 <strcmp>
  42e668:	7833      	ldrb	r3, [r6, #0]
  42e66a:	2800      	cmp	r0, #0
  42e66c:	d1aa      	bne.n	42e5c4 <d_expr_primary+0x2c>
  42e66e:	2b45      	cmp	r3, #69	@ 0x45
  42e670:	d00b      	beq.n	42e68a <d_expr_primary+0xf2>
  42e672:	2b6e      	cmp	r3, #110	@ 0x6e
  42e674:	d0d1      	beq.n	42e61a <d_expr_primary+0x82>
  42e676:	273d      	movs	r7, #61	@ 0x3d
  42e678:	e7a9      	b.n	42e5ce <d_expr_primary+0x36>
  42e67a:	f7ff fd41 	bl	42e100 <d_special_name>
  42e67e:	68e3      	ldr	r3, [r4, #12]
  42e680:	4605      	mov	r5, r0
  42e682:	781a      	ldrb	r2, [r3, #0]
  42e684:	e7c3      	b.n	42e60e <d_expr_primary+0x76>
  42e686:	2200      	movs	r2, #0
  42e688:	e7ce      	b.n	42e628 <d_expr_primary+0x90>
  42e68a:	3601      	adds	r6, #1
  42e68c:	60e6      	str	r6, [r4, #12]
  42e68e:	e7a8      	b.n	42e5e2 <d_expr_primary+0x4a>
  42e690:	00435198 	.word	0x00435198

0042e694 <d_template_arg>:
  42e694:	b538      	push	{r3, r4, r5, lr}
  42e696:	68c3      	ldr	r3, [r0, #12]
  42e698:	781a      	ldrb	r2, [r3, #0]
  42e69a:	2a4c      	cmp	r2, #76	@ 0x4c
  42e69c:	d01b      	beq.n	42e6d6 <d_template_arg+0x42>
  42e69e:	4604      	mov	r4, r0
  42e6a0:	d808      	bhi.n	42e6b4 <d_template_arg+0x20>
  42e6a2:	3a49      	subs	r2, #73	@ 0x49
  42e6a4:	2a01      	cmp	r2, #1
  42e6a6:	d81a      	bhi.n	42e6de <d_template_arg+0x4a>
  42e6a8:	3301      	adds	r3, #1
  42e6aa:	60c3      	str	r3, [r0, #12]
  42e6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  42e6b0:	f000 b81c 	b.w	42e6ec <d_template_args_1>
  42e6b4:	2a58      	cmp	r2, #88	@ 0x58
  42e6b6:	d112      	bne.n	42e6de <d_template_arg+0x4a>
  42e6b8:	3301      	adds	r3, #1
  42e6ba:	2201      	movs	r2, #1
  42e6bc:	6b05      	ldr	r5, [r0, #48]	@ 0x30
  42e6be:	60c3      	str	r3, [r0, #12]
  42e6c0:	6302      	str	r2, [r0, #48]	@ 0x30
  42e6c2:	f7fe ffe3 	bl	42d68c <d_expression_1>
  42e6c6:	68e3      	ldr	r3, [r4, #12]
  42e6c8:	6325      	str	r5, [r4, #48]	@ 0x30
  42e6ca:	781a      	ldrb	r2, [r3, #0]
  42e6cc:	2a45      	cmp	r2, #69	@ 0x45
  42e6ce:	d10b      	bne.n	42e6e8 <d_template_arg+0x54>
  42e6d0:	3301      	adds	r3, #1
  42e6d2:	60e3      	str	r3, [r4, #12]
  42e6d4:	bd38      	pop	{r3, r4, r5, pc}
  42e6d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  42e6da:	f7ff bf5d 	b.w	42e598 <d_expr_primary>
  42e6de:	4620      	mov	r0, r4
  42e6e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  42e6e4:	f7fe b8a2 	b.w	42c82c <d_type>
  42e6e8:	2000      	movs	r0, #0
  42e6ea:	bd38      	pop	{r3, r4, r5, pc}

0042e6ec <d_template_args_1>:
  42e6ec:	68c3      	ldr	r3, [r0, #12]
  42e6ee:	b570      	push	{r4, r5, r6, lr}
  42e6f0:	781a      	ldrb	r2, [r3, #0]
  42e6f2:	b082      	sub	sp, #8
  42e6f4:	4604      	mov	r4, r0
  42e6f6:	6a86      	ldr	r6, [r0, #40]	@ 0x28
  42e6f8:	2a45      	cmp	r2, #69	@ 0x45
  42e6fa:	d01f      	beq.n	42e73c <d_template_args_1+0x50>
  42e6fc:	2300      	movs	r3, #0
  42e6fe:	ad01      	add	r5, sp, #4
  42e700:	9301      	str	r3, [sp, #4]
  42e702:	e009      	b.n	42e718 <d_template_args_1+0x2c>
  42e704:	f7fd fbbc 	bl	42be80 <d_make_comp>
  42e708:	6028      	str	r0, [r5, #0]
  42e70a:	f100 0510 	add.w	r5, r0, #16
  42e70e:	b160      	cbz	r0, 42e72a <d_template_args_1+0x3e>
  42e710:	68e3      	ldr	r3, [r4, #12]
  42e712:	781a      	ldrb	r2, [r3, #0]
  42e714:	2a45      	cmp	r2, #69	@ 0x45
  42e716:	d00b      	beq.n	42e730 <d_template_args_1+0x44>
  42e718:	4620      	mov	r0, r4
  42e71a:	f7ff ffbb 	bl	42e694 <d_template_arg>
  42e71e:	4602      	mov	r2, r0
  42e720:	2300      	movs	r3, #0
  42e722:	212f      	movs	r1, #47	@ 0x2f
  42e724:	4620      	mov	r0, r4
  42e726:	2a00      	cmp	r2, #0
  42e728:	d1ec      	bne.n	42e704 <d_template_args_1+0x18>
  42e72a:	2000      	movs	r0, #0
  42e72c:	b002      	add	sp, #8
  42e72e:	bd70      	pop	{r4, r5, r6, pc}
  42e730:	3301      	adds	r3, #1
  42e732:	9801      	ldr	r0, [sp, #4]
  42e734:	62a6      	str	r6, [r4, #40]	@ 0x28
  42e736:	60e3      	str	r3, [r4, #12]
  42e738:	b002      	add	sp, #8
  42e73a:	bd70      	pop	{r4, r5, r6, pc}
  42e73c:	1c5a      	adds	r2, r3, #1
  42e73e:	2300      	movs	r3, #0
  42e740:	212f      	movs	r1, #47	@ 0x2f
  42e742:	60c2      	str	r2, [r0, #12]
  42e744:	461a      	mov	r2, r3
  42e746:	b002      	add	sp, #8
  42e748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  42e74c:	f7fd bb98 	b.w	42be80 <d_make_comp>

0042e750 <d_prefix>:
  42e750:	b570      	push	{r4, r5, r6, lr}
  42e752:	68c2      	ldr	r2, [r0, #12]
  42e754:	2400      	movs	r4, #0
  42e756:	4605      	mov	r5, r0
  42e758:	460e      	mov	r6, r1
  42e75a:	7813      	ldrb	r3, [r2, #0]
  42e75c:	2b44      	cmp	r3, #68	@ 0x44
  42e75e:	d024      	beq.n	42e7aa <d_prefix+0x5a>
  42e760:	3b49      	subs	r3, #73	@ 0x49
  42e762:	2b0b      	cmp	r3, #11
  42e764:	d807      	bhi.n	42e776 <d_prefix+0x26>
  42e766:	e8df f003 	tbb	[pc, r3]
  42e76a:	0643      	.short	0x0643
  42e76c:	063f0606 	.word	0x063f0606
  42e770:	06060606 	.word	0x06060606
  42e774:	2b31      	.short	0x2b31
  42e776:	2200      	movs	r2, #0
  42e778:	4621      	mov	r1, r4
  42e77a:	4628      	mov	r0, r5
  42e77c:	f7fe fdb8 	bl	42d2f0 <d_unqualified_name>
  42e780:	4604      	mov	r4, r0
  42e782:	2c00      	cmp	r4, #0
  42e784:	d043      	beq.n	42e80e <d_prefix+0xbe>
  42e786:	68ea      	ldr	r2, [r5, #12]
  42e788:	7813      	ldrb	r3, [r2, #0]
  42e78a:	2b45      	cmp	r3, #69	@ 0x45
  42e78c:	d040      	beq.n	42e810 <d_prefix+0xc0>
  42e78e:	2e00      	cmp	r6, #0
  42e790:	d0e3      	beq.n	42e75a <d_prefix+0xa>
  42e792:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
  42e796:	428b      	cmp	r3, r1
  42e798:	da39      	bge.n	42e80e <d_prefix+0xbe>
  42e79a:	69e9      	ldr	r1, [r5, #28]
  42e79c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  42e7a0:	3301      	adds	r3, #1
  42e7a2:	622b      	str	r3, [r5, #32]
  42e7a4:	7813      	ldrb	r3, [r2, #0]
  42e7a6:	2b44      	cmp	r3, #68	@ 0x44
  42e7a8:	d1da      	bne.n	42e760 <d_prefix+0x10>
  42e7aa:	7853      	ldrb	r3, [r2, #1]
  42e7ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
  42e7b0:	2b54      	cmp	r3, #84	@ 0x54
  42e7b2:	d1e0      	bne.n	42e776 <d_prefix+0x26>
  42e7b4:	bb5c      	cbnz	r4, 42e80e <d_prefix+0xbe>
  42e7b6:	4628      	mov	r0, r5
  42e7b8:	f7fe f838 	bl	42c82c <d_type>
  42e7bc:	4604      	mov	r4, r0
  42e7be:	e7e0      	b.n	42e782 <d_prefix+0x32>
  42e7c0:	bb2c      	cbnz	r4, 42e80e <d_prefix+0xbe>
  42e7c2:	4628      	mov	r0, r5
  42e7c4:	f7fd fe72 	bl	42c4ac <d_template_param>
  42e7c8:	4604      	mov	r4, r0
  42e7ca:	e7da      	b.n	42e782 <d_prefix+0x32>
  42e7cc:	2101      	movs	r1, #1
  42e7ce:	4628      	mov	r0, r5
  42e7d0:	f7fd ff28 	bl	42c624 <d_substitution>
  42e7d4:	4602      	mov	r2, r0
  42e7d6:	b1d0      	cbz	r0, 42e80e <d_prefix+0xbe>
  42e7d8:	7803      	ldrb	r3, [r0, #0]
  42e7da:	3b53      	subs	r3, #83	@ 0x53
  42e7dc:	2b01      	cmp	r3, #1
  42e7de:	d9cb      	bls.n	42e778 <d_prefix+0x28>
  42e7e0:	b9ac      	cbnz	r4, 42e80e <d_prefix+0xbe>
  42e7e2:	4604      	mov	r4, r0
  42e7e4:	68ea      	ldr	r2, [r5, #12]
  42e7e6:	e7b8      	b.n	42e75a <d_prefix+0xa>
  42e7e8:	1c53      	adds	r3, r2, #1
  42e7ea:	461a      	mov	r2, r3
  42e7ec:	60eb      	str	r3, [r5, #12]
  42e7ee:	e7b4      	b.n	42e75a <d_prefix+0xa>
  42e7f0:	b16c      	cbz	r4, 42e80e <d_prefix+0xbe>
  42e7f2:	3201      	adds	r2, #1
  42e7f4:	4628      	mov	r0, r5
  42e7f6:	60ea      	str	r2, [r5, #12]
  42e7f8:	f7ff ff78 	bl	42e6ec <d_template_args_1>
  42e7fc:	4603      	mov	r3, r0
  42e7fe:	b130      	cbz	r0, 42e80e <d_prefix+0xbe>
  42e800:	4622      	mov	r2, r4
  42e802:	2104      	movs	r1, #4
  42e804:	4628      	mov	r0, r5
  42e806:	f7fd fb3b 	bl	42be80 <d_make_comp>
  42e80a:	4604      	mov	r4, r0
  42e80c:	e7b9      	b.n	42e782 <d_prefix+0x32>
  42e80e:	2400      	movs	r4, #0
  42e810:	4620      	mov	r0, r4
  42e812:	bd70      	pop	{r4, r5, r6, pc}

0042e814 <d_print_comp_inner>:
  42e814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42e818:	4604      	mov	r4, r0
  42e81a:	b097      	sub	sp, #92	@ 0x5c
  42e81c:	2a00      	cmp	r2, #0
  42e81e:	d07d      	beq.n	42e91c <d_print_comp_inner+0x108>
  42e820:	f8d0 7118 	ldr.w	r7, [r0, #280]	@ 0x118
  42e824:	2f00      	cmp	r7, #0
  42e826:	d17c      	bne.n	42e922 <d_print_comp_inner+0x10e>
  42e828:	7816      	ldrb	r6, [r2, #0]
  42e82a:	4693      	mov	fp, r2
  42e82c:	2e5c      	cmp	r6, #92	@ 0x5c
  42e82e:	d875      	bhi.n	42e91c <d_print_comp_inner+0x108>
  42e830:	e8df f016 	tbh	[pc, r6, lsl #1]
  42e834:	01760a52 	.word	0x01760a52
  42e838:	06330176 	.word	0x06330176
  42e83c:	005d05f8 	.word	0x005d05f8
  42e840:	010505ed 	.word	0x010505ed
  42e844:	027b08c1 	.word	0x027b08c1
  42e848:	032a0255 	.word	0x032a0255
  42e84c:	02c702ed 	.word	0x02c702ed
  42e850:	043b02a1 	.word	0x043b02a1
  42e854:	040e0434 	.word	0x040e0434
  42e858:	03c203e8 	.word	0x03c203e8
  42e85c:	0376039c 	.word	0x0376039c
  42e860:	022f0350 	.word	0x022f0350
  42e864:	007a0204 	.word	0x007a0204
  42e868:	007a007a 	.word	0x007a007a
  42e86c:	00980098 	.word	0x00980098
  42e870:	00980098 	.word	0x00980098
  42e874:	00980098 	.word	0x00980098
  42e878:	01250098 	.word	0x01250098
  42e87c:	00980125 	.word	0x00980125
  42e880:	0a7d0098 	.word	0x0a7d0098
  42e884:	05be008f 	.word	0x05be008f
  42e888:	00b6074a 	.word	0x00b6074a
  42e88c:	00b60074 	.word	0x00b60074
  42e890:	014b014b 	.word	0x014b014b
  42e894:	072505e5 	.word	0x072505e5
  42e898:	07f00685 	.word	0x07f00685
  42e89c:	06ff0074 	.word	0x06ff0074
  42e8a0:	06e206f7 	.word	0x06e206f7
  42e8a4:	0074085e 	.word	0x0074085e
  42e8a8:	00740816 	.word	0x00740816
  42e8ac:	00d00074 	.word	0x00d00074
  42e8b0:	08c900d0 	.word	0x08c900d0
  42e8b4:	09db098f 	.word	0x09db098f
  42e8b8:	07c009e4 	.word	0x07c009e4
  42e8bc:	09b507a9 	.word	0x09b507a9
  42e8c0:	018601de 	.word	0x018601de
  42e8c4:	06bc0074 	.word	0x06bc0074
  42e8c8:	09690a2c 	.word	0x09690a2c
  42e8cc:	08f3091d 	.word	0x08f3091d
  42e8d0:	09f20098 	.word	0x09f20098
  42e8d4:	00980098 	.word	0x00980098
  42e8d8:	01080461 	.word	0x01080461
  42e8dc:	04d80108 	.word	0x04d80108
  42e8e0:	0563049c 	.word	0x0563049c
  42e8e4:	008f053d 	.word	0x008f053d
  42e8e8:	04ee0517 	.word	0x04ee0517
  42e8ec:	0591      	.short	0x0591
  42e8ee:	68d7      	ldr	r7, [r2, #12]
  42e8f0:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
  42e8f4:	1c7a      	adds	r2, r7, #1
  42e8f6:	4293      	cmp	r3, r2
  42e8f8:	f341 8491 	ble.w	43021e <d_print_comp_inner+0x1a0a>
  42e8fc:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
  42e900:	4639      	mov	r1, r7
  42e902:	685b      	ldr	r3, [r3, #4]
  42e904:	68db      	ldr	r3, [r3, #12]
  42e906:	b14b      	cbz	r3, 42e91c <d_print_comp_inner+0x108>
  42e908:	b927      	cbnz	r7, 42e914 <d_print_comp_inner+0x100>
  42e90a:	f001 bdfa 	b.w	430502 <d_print_comp_inner+0x1cee>
  42e90e:	2900      	cmp	r1, #0
  42e910:	f001 85f7 	beq.w	430502 <d_print_comp_inner+0x1cee>
  42e914:	691b      	ldr	r3, [r3, #16]
  42e916:	3901      	subs	r1, #1
  42e918:	2b00      	cmp	r3, #0
  42e91a:	d1f8      	bne.n	42e90e <d_print_comp_inner+0xfa>
  42e91c:	2301      	movs	r3, #1
  42e91e:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
  42e922:	b017      	add	sp, #92	@ 0x5c
  42e924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42e928:	f8d0 1114 	ldr.w	r1, [r0, #276]	@ 0x114
  42e92c:	468c      	mov	ip, r1
  42e92e:	2900      	cmp	r1, #0
  42e930:	f002 8195 	beq.w	430c5e <d_print_comp_inner+0x244a>
  42e934:	460b      	mov	r3, r1
  42e936:	e001      	b.n	42e93c <d_print_comp_inner+0x128>
  42e938:	681b      	ldr	r3, [r3, #0]
  42e93a:	b1ab      	cbz	r3, 42e968 <d_print_comp_inner+0x154>
  42e93c:	689a      	ldr	r2, [r3, #8]
  42e93e:	2a00      	cmp	r2, #0
  42e940:	d1fa      	bne.n	42e938 <d_print_comp_inner+0x124>
  42e942:	685a      	ldr	r2, [r3, #4]
  42e944:	7812      	ldrb	r2, [r2, #0]
  42e946:	f1a2 0019 	sub.w	r0, r2, #25
  42e94a:	2802      	cmp	r0, #2
  42e94c:	d80c      	bhi.n	42e968 <d_print_comp_inner+0x154>
  42e94e:	4296      	cmp	r6, r2
  42e950:	d1f2      	bne.n	42e938 <d_print_comp_inner+0x124>
  42e952:	f8db 200c 	ldr.w	r2, [fp, #12]
  42e956:	2111      	movs	r1, #17
  42e958:	4620      	mov	r0, r4
  42e95a:	b017      	add	sp, #92	@ 0x5c
  42e95c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42e960:	f002 ba1c 	b.w	430d9c <d_print_comp>
  42e964:	f8d0 1114 	ldr.w	r1, [r0, #276]	@ 0x114
  42e968:	ab06      	add	r3, sp, #24
  42e96a:	2200      	movs	r2, #0
  42e96c:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  42e970:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
  42e974:	e9cd 1b06 	strd	r1, fp, [sp, #24]
  42e978:	e9cd 2308 	strd	r2, r3, [sp, #32]
  42e97c:	f8db 200c 	ldr.w	r2, [fp, #12]
  42e980:	2111      	movs	r1, #17
  42e982:	4620      	mov	r0, r4
  42e984:	f002 fa0a 	bl	430d9c <d_print_comp>
  42e988:	9b08      	ldr	r3, [sp, #32]
  42e98a:	2b00      	cmp	r3, #0
  42e98c:	f001 8406 	beq.w	43019c <d_print_comp_inner+0x1988>
  42e990:	9b06      	ldr	r3, [sp, #24]
  42e992:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  42e996:	2f00      	cmp	r7, #0
  42e998:	d0c3      	beq.n	42e922 <d_print_comp_inner+0x10e>
  42e99a:	f8c4 8110 	str.w	r8, [r4, #272]	@ 0x110
  42e99e:	e7c0      	b.n	42e922 <d_print_comp_inner+0x10e>
  42e9a0:	2300      	movs	r3, #0
  42e9a2:	f8d0 2114 	ldr.w	r2, [r0, #276]	@ 0x114
  42e9a6:	a906      	add	r1, sp, #24
  42e9a8:	f8cd b01c 	str.w	fp, [sp, #28]
  42e9ac:	9308      	str	r3, [sp, #32]
  42e9ae:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
  42e9b2:	f8c0 1114 	str.w	r1, [r0, #276]	@ 0x114
  42e9b6:	2111      	movs	r1, #17
  42e9b8:	9206      	str	r2, [sp, #24]
  42e9ba:	f8db 2010 	ldr.w	r2, [fp, #16]
  42e9be:	9309      	str	r3, [sp, #36]	@ 0x24
  42e9c0:	f002 f9ec 	bl	430d9c <d_print_comp>
  42e9c4:	9b08      	ldr	r3, [sp, #32]
  42e9c6:	2b00      	cmp	r3, #0
  42e9c8:	f001 852b 	beq.w	430422 <d_print_comp_inner+0x1c0e>
  42e9cc:	9b06      	ldr	r3, [sp, #24]
  42e9ce:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  42e9d2:	e7a6      	b.n	42e922 <d_print_comp_inner+0x10e>
  42e9d4:	68d2      	ldr	r2, [r2, #12]
  42e9d6:	7813      	ldrb	r3, [r2, #0]
  42e9d8:	2b27      	cmp	r3, #39	@ 0x27
  42e9da:	f041 847c 	bne.w	4302d6 <d_print_comp_inner+0x1ac2>
  42e9de:	68d3      	ldr	r3, [r2, #12]
  42e9e0:	7c1f      	ldrb	r7, [r3, #16]
  42e9e2:	2f06      	cmp	r7, #6
  42e9e4:	f201 85fb 	bhi.w	4305de <d_print_comp_inner+0x1dca>
  42e9e8:	b12f      	cbz	r7, 42e9f6 <d_print_comp_inner+0x1e2>
  42e9ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  42e9ee:	781b      	ldrb	r3, [r3, #0]
  42e9f0:	2b00      	cmp	r3, #0
  42e9f2:	f002 80e5 	beq.w	430bc0 <d_print_comp_inner+0x23ac>
  42e9f6:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42e9fa:	29ff      	cmp	r1, #255	@ 0xff
  42e9fc:	f001 873c 	beq.w	430878 <d_print_comp_inner+0x2064>
  42ea00:	1c4b      	adds	r3, r1, #1
  42ea02:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  42ea06:	2328      	movs	r3, #40	@ 0x28
  42ea08:	4620      	mov	r0, r4
  42ea0a:	5463      	strb	r3, [r4, r1]
  42ea0c:	2111      	movs	r1, #17
  42ea0e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42ea12:	f002 f9c3 	bl	430d9c <d_print_comp>
  42ea16:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42ea1a:	29ff      	cmp	r1, #255	@ 0xff
  42ea1c:	f001 871c 	beq.w	430858 <d_print_comp_inner+0x2044>
  42ea20:	1c4b      	adds	r3, r1, #1
  42ea22:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  42ea26:	2329      	movs	r3, #41	@ 0x29
  42ea28:	5463      	strb	r3, [r4, r1]
  42ea2a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42ea2e:	f89b 3000 	ldrb.w	r3, [fp]
  42ea32:	2b3e      	cmp	r3, #62	@ 0x3e
  42ea34:	f001 870a 	beq.w	43084c <d_print_comp_inner+0x2038>
  42ea38:	2f08      	cmp	r7, #8
  42ea3a:	f001 86fa 	beq.w	430832 <d_print_comp_inner+0x201e>
  42ea3e:	f8db 2010 	ldr.w	r2, [fp, #16]
  42ea42:	e788      	b.n	42e956 <d_print_comp_inner+0x142>
  42ea44:	68d2      	ldr	r2, [r2, #12]
  42ea46:	2a00      	cmp	r2, #0
  42ea48:	f001 8448 	beq.w	4302dc <d_print_comp_inner+0x1ac8>
  42ea4c:	2111      	movs	r1, #17
  42ea4e:	f002 f9a5 	bl	430d9c <d_print_comp>
  42ea52:	f89b 3000 	ldrb.w	r3, [fp]
  42ea56:	2b54      	cmp	r3, #84	@ 0x54
  42ea58:	f001 8443 	beq.w	4302e2 <d_print_comp_inner+0x1ace>
  42ea5c:	f8db 300c 	ldr.w	r3, [fp, #12]
  42ea60:	2b00      	cmp	r3, #0
  42ea62:	d0ec      	beq.n	42ea3e <d_print_comp_inner+0x22a>
  42ea64:	262e      	movs	r6, #46	@ 0x2e
  42ea66:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42ea6a:	29ff      	cmp	r1, #255	@ 0xff
  42ea6c:	f001 8775 	beq.w	43095a <d_print_comp_inner+0x2146>
  42ea70:	1c4b      	adds	r3, r1, #1
  42ea72:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  42ea76:	5466      	strb	r6, [r4, r1]
  42ea78:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42ea7c:	e7df      	b.n	42ea3e <d_print_comp_inner+0x22a>
  42ea7e:	68d2      	ldr	r2, [r2, #12]
  42ea80:	f8d0 9120 	ldr.w	r9, [r0, #288]	@ 0x120
  42ea84:	7813      	ldrb	r3, [r2, #0]
  42ea86:	f1b9 0f00 	cmp.w	r9, #0
  42ea8a:	d103      	bne.n	42ea94 <d_print_comp_inner+0x280>
  42ea8c:	2b05      	cmp	r3, #5
  42ea8e:	f001 872b 	beq.w	4308e8 <d_print_comp_inner+0x20d4>
  42ea92:	464f      	mov	r7, r9
  42ea94:	4610      	mov	r0, r2
  42ea96:	2b23      	cmp	r3, #35	@ 0x23
  42ea98:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
  42ea9c:	f001 83bb 	beq.w	430216 <d_print_comp_inner+0x1a02>
  42eaa0:	1af6      	subs	r6, r6, r3
  42eaa2:	fab6 f686 	clz	r6, r6
  42eaa6:	0976      	lsrs	r6, r6, #5
  42eaa8:	2e00      	cmp	r6, #0
  42eaaa:	f041 83b4 	bne.w	430216 <d_print_comp_inner+0x1a02>
  42eaae:	2b24      	cmp	r3, #36	@ 0x24
  42eab0:	f001 81d7 	beq.w	42fe62 <d_print_comp_inner+0x164e>
  42eab4:	ab06      	add	r3, sp, #24
  42eab6:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  42eaba:	2300      	movs	r3, #0
  42eabc:	9308      	str	r3, [sp, #32]
  42eabe:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
  42eac2:	e9cd cb06 	strd	ip, fp, [sp, #24]
  42eac6:	9309      	str	r3, [sp, #36]	@ 0x24
  42eac8:	e75a      	b.n	42e980 <d_print_comp_inner+0x16c>
  42eaca:	68d2      	ldr	r2, [r2, #12]
  42eacc:	b112      	cbz	r2, 42ead4 <d_print_comp_inner+0x2c0>
  42eace:	2111      	movs	r1, #17
  42ead0:	f002 f964 	bl	430d9c <d_print_comp>
  42ead4:	f8db 3010 	ldr.w	r3, [fp, #16]
  42ead8:	2b00      	cmp	r3, #0
  42eada:	f43f af22 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42eade:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42eae2:	29fd      	cmp	r1, #253	@ 0xfd
  42eae4:	f201 8596 	bhi.w	430614 <d_print_comp_inner+0x1e00>
  42eae8:	49cd      	ldr	r1, [pc, #820]	@ (42ee20 <d_print_comp_inner+0x60c>)
  42eaea:	4620      	mov	r0, r4
  42eaec:	f7fd fc50 	bl	42c390 <d_append_string>
  42eaf0:	2111      	movs	r1, #17
  42eaf2:	f8db 2010 	ldr.w	r2, [fp, #16]
  42eaf6:	4620      	mov	r0, r4
  42eaf8:	f8d4 5128 	ldr.w	r5, [r4, #296]	@ 0x128
  42eafc:	f8d4 6100 	ldr.w	r6, [r4, #256]	@ 0x100
  42eb00:	f002 f94c 	bl	430d9c <d_print_comp>
  42eb04:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42eb08:	42ab      	cmp	r3, r5
  42eb0a:	f47f af0a 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42eb0e:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
  42eb12:	42b3      	cmp	r3, r6
  42eb14:	f47f af05 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42eb18:	3b02      	subs	r3, #2
  42eb1a:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  42eb1e:	e700      	b.n	42e922 <d_print_comp_inner+0x10e>
  42eb20:	68d2      	ldr	r2, [r2, #12]
  42eb22:	2111      	movs	r1, #17
  42eb24:	f002 f93a 	bl	430d9c <d_print_comp>
  42eb28:	49be      	ldr	r1, [pc, #760]	@ (42ee24 <d_print_comp_inner+0x610>)
  42eb2a:	4620      	mov	r0, r4
  42eb2c:	f7fd fc30 	bl	42c390 <d_append_string>
  42eb30:	f8db 7010 	ldr.w	r7, [fp, #16]
  42eb34:	783b      	ldrb	r3, [r7, #0]
  42eb36:	2b48      	cmp	r3, #72	@ 0x48
  42eb38:	f001 8125 	beq.w	42fd86 <d_print_comp_inner+0x1572>
  42eb3c:	463a      	mov	r2, r7
  42eb3e:	e70a      	b.n	42e956 <d_print_comp_inner+0x142>
  42eb40:	49b9      	ldr	r1, [pc, #740]	@ (42ee28 <d_print_comp_inner+0x614>)
  42eb42:	f04f 0900 	mov.w	r9, #0
  42eb46:	f7fd fc23 	bl	42c390 <d_append_string>
  42eb4a:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
  42eb4e:	f8db 700c 	ldr.w	r7, [fp, #12]
  42eb52:	9304      	str	r3, [sp, #16]
  42eb54:	ab04      	add	r3, sp, #16
  42eb56:	f8d4 5120 	ldr.w	r5, [r4, #288]	@ 0x120
  42eb5a:	f8cd 9014 	str.w	r9, [sp, #20]
  42eb5e:	f8c4 9120 	str.w	r9, [r4, #288]	@ 0x120
  42eb62:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  42eb66:	b11f      	cbz	r7, 42eb70 <d_print_comp_inner+0x35c>
  42eb68:	783b      	ldrb	r3, [r7, #0]
  42eb6a:	2b57      	cmp	r3, #87	@ 0x57
  42eb6c:	f001 8715 	beq.w	43099a <d_print_comp_inner+0x2186>
  42eb70:	2301      	movs	r3, #1
  42eb72:	ae06      	add	r6, sp, #24
  42eb74:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42eb78:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
  42eb7c:	29ff      	cmp	r1, #255	@ 0xff
  42eb7e:	f001 8601 	beq.w	430784 <d_print_comp_inner+0x1f70>
  42eb82:	1c4b      	adds	r3, r1, #1
  42eb84:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  42eb88:	2328      	movs	r3, #40	@ 0x28
  42eb8a:	463a      	mov	r2, r7
  42eb8c:	4620      	mov	r0, r4
  42eb8e:	5463      	strb	r3, [r4, r1]
  42eb90:	2111      	movs	r1, #17
  42eb92:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42eb96:	f04f 0900 	mov.w	r9, #0
  42eb9a:	f002 f8ff 	bl	430d9c <d_print_comp>
  42eb9e:	4fa3      	ldr	r7, [pc, #652]	@ (42ee2c <d_print_comp_inner+0x618>)
  42eba0:	9b04      	ldr	r3, [sp, #16]
  42eba2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42eba6:	f107 0a02 	add.w	sl, r7, #2
  42ebaa:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  42ebae:	f8c4 5120 	str.w	r5, [r4, #288]	@ 0x120
  42ebb2:	e008      	b.n	42ebc6 <d_print_comp_inner+0x3b2>
  42ebb4:	3101      	adds	r1, #1
  42ebb6:	4557      	cmp	r7, sl
  42ebb8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ebbc:	54e5      	strb	r5, [r4, r3]
  42ebbe:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42ebc2:	f001 822f 	beq.w	430024 <d_print_comp_inner+0x1810>
  42ebc6:	29ff      	cmp	r1, #255	@ 0xff
  42ebc8:	f817 5b01 	ldrb.w	r5, [r7], #1
  42ebcc:	460b      	mov	r3, r1
  42ebce:	d1f1      	bne.n	42ebb4 <d_print_comp_inner+0x3a0>
  42ebd0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ebd4:	4620      	mov	r0, r4
  42ebd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42ebda:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
  42ebde:	4798      	blx	r3
  42ebe0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ebe4:	2101      	movs	r1, #1
  42ebe6:	3301      	adds	r3, #1
  42ebe8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ebec:	2300      	movs	r3, #0
  42ebee:	e7e2      	b.n	42ebb6 <d_print_comp_inner+0x3a2>
  42ebf0:	4e8f      	ldr	r6, [pc, #572]	@ (42ee30 <d_print_comp_inner+0x61c>)
  42ebf2:	f04f 0800 	mov.w	r8, #0
  42ebf6:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42ebfa:	f106 091c 	add.w	r9, r6, #28
  42ebfe:	e008      	b.n	42ec12 <d_print_comp_inner+0x3fe>
  42ec00:	3101      	adds	r1, #1
  42ec02:	45b1      	cmp	r9, r6
  42ec04:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ec08:	54e5      	strb	r5, [r4, r3]
  42ec0a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42ec0e:	f43f aea0 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42ec12:	29ff      	cmp	r1, #255	@ 0xff
  42ec14:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42ec18:	460b      	mov	r3, r1
  42ec1a:	d1f1      	bne.n	42ec00 <d_print_comp_inner+0x3ec>
  42ec1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ec20:	4620      	mov	r0, r4
  42ec22:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42ec26:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42ec2a:	4798      	blx	r3
  42ec2c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ec30:	2101      	movs	r1, #1
  42ec32:	3301      	adds	r3, #1
  42ec34:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ec38:	2300      	movs	r3, #0
  42ec3a:	e7e2      	b.n	42ec02 <d_print_comp_inner+0x3ee>
  42ec3c:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
  42ec40:	2b00      	cmp	r3, #0
  42ec42:	f43f ae6e 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42ec46:	442b      	add	r3, r5
  42ec48:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42ec4c:	3d01      	subs	r5, #1
  42ec4e:	f04f 0800 	mov.w	r8, #0
  42ec52:	1e5f      	subs	r7, r3, #1
  42ec54:	e008      	b.n	42ec68 <d_print_comp_inner+0x454>
  42ec56:	3101      	adds	r1, #1
  42ec58:	42af      	cmp	r7, r5
  42ec5a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ec5e:	54e6      	strb	r6, [r4, r3]
  42ec60:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42ec64:	f43f ae5d 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42ec68:	29ff      	cmp	r1, #255	@ 0xff
  42ec6a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  42ec6e:	460b      	mov	r3, r1
  42ec70:	d1f1      	bne.n	42ec56 <d_print_comp_inner+0x442>
  42ec72:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ec76:	4620      	mov	r0, r4
  42ec78:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42ec7c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42ec80:	4798      	blx	r3
  42ec82:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ec86:	2101      	movs	r1, #1
  42ec88:	3301      	adds	r3, #1
  42ec8a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ec8e:	2300      	movs	r3, #0
  42ec90:	e7e2      	b.n	42ec58 <d_print_comp_inner+0x444>
  42ec92:	4e68      	ldr	r6, [pc, #416]	@ (42ee34 <d_print_comp_inner+0x620>)
  42ec94:	f04f 0800 	mov.w	r8, #0
  42ec98:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42ec9c:	f106 0911 	add.w	r9, r6, #17
  42eca0:	e008      	b.n	42ecb4 <d_print_comp_inner+0x4a0>
  42eca2:	3101      	adds	r1, #1
  42eca4:	45b1      	cmp	r9, r6
  42eca6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ecaa:	54e5      	strb	r5, [r4, r3]
  42ecac:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42ecb0:	f43f ae4f 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42ecb4:	29ff      	cmp	r1, #255	@ 0xff
  42ecb6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42ecba:	460b      	mov	r3, r1
  42ecbc:	d1f1      	bne.n	42eca2 <d_print_comp_inner+0x48e>
  42ecbe:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ecc2:	4620      	mov	r0, r4
  42ecc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42ecc8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42eccc:	4798      	blx	r3
  42ecce:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ecd2:	2101      	movs	r1, #1
  42ecd4:	3301      	adds	r3, #1
  42ecd6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ecda:	2300      	movs	r3, #0
  42ecdc:	e7e2      	b.n	42eca4 <d_print_comp_inner+0x490>
  42ecde:	4e56      	ldr	r6, [pc, #344]	@ (42ee38 <d_print_comp_inner+0x624>)
  42ece0:	f04f 0800 	mov.w	r8, #0
  42ece4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42ece8:	f106 0908 	add.w	r9, r6, #8
  42ecec:	e008      	b.n	42ed00 <d_print_comp_inner+0x4ec>
  42ecee:	3101      	adds	r1, #1
  42ecf0:	45b1      	cmp	r9, r6
  42ecf2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ecf6:	54e5      	strb	r5, [r4, r3]
  42ecf8:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42ecfc:	f43f ae29 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42ed00:	29ff      	cmp	r1, #255	@ 0xff
  42ed02:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42ed06:	460b      	mov	r3, r1
  42ed08:	d1f1      	bne.n	42ecee <d_print_comp_inner+0x4da>
  42ed0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ed0e:	4620      	mov	r0, r4
  42ed10:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42ed14:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42ed18:	4798      	blx	r3
  42ed1a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ed1e:	2101      	movs	r1, #1
  42ed20:	3301      	adds	r3, #1
  42ed22:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ed26:	2300      	movs	r3, #0
  42ed28:	e7e2      	b.n	42ecf0 <d_print_comp_inner+0x4dc>
  42ed2a:	4e44      	ldr	r6, [pc, #272]	@ (42ee3c <d_print_comp_inner+0x628>)
  42ed2c:	f04f 0800 	mov.w	r8, #0
  42ed30:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42ed34:	f106 090b 	add.w	r9, r6, #11
  42ed38:	e008      	b.n	42ed4c <d_print_comp_inner+0x538>
  42ed3a:	3101      	adds	r1, #1
  42ed3c:	45b1      	cmp	r9, r6
  42ed3e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ed42:	54e5      	strb	r5, [r4, r3]
  42ed44:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42ed48:	f43f ae03 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42ed4c:	29ff      	cmp	r1, #255	@ 0xff
  42ed4e:	f816 5b01 	ldrb.w	r5, [r6], #1
  42ed52:	460b      	mov	r3, r1
  42ed54:	d1f1      	bne.n	42ed3a <d_print_comp_inner+0x526>
  42ed56:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ed5a:	4620      	mov	r0, r4
  42ed5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42ed60:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42ed64:	4798      	blx	r3
  42ed66:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ed6a:	2101      	movs	r1, #1
  42ed6c:	3301      	adds	r3, #1
  42ed6e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ed72:	2300      	movs	r3, #0
  42ed74:	e7e2      	b.n	42ed3c <d_print_comp_inner+0x528>
  42ed76:	4e32      	ldr	r6, [pc, #200]	@ (42ee40 <d_print_comp_inner+0x62c>)
  42ed78:	f04f 0800 	mov.w	r8, #0
  42ed7c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42ed80:	f106 0910 	add.w	r9, r6, #16
  42ed84:	e008      	b.n	42ed98 <d_print_comp_inner+0x584>
  42ed86:	3101      	adds	r1, #1
  42ed88:	454e      	cmp	r6, r9
  42ed8a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ed8e:	54e5      	strb	r5, [r4, r3]
  42ed90:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42ed94:	f43f addd 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42ed98:	29ff      	cmp	r1, #255	@ 0xff
  42ed9a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42ed9e:	460b      	mov	r3, r1
  42eda0:	d1f1      	bne.n	42ed86 <d_print_comp_inner+0x572>
  42eda2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42eda6:	4620      	mov	r0, r4
  42eda8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42edac:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42edb0:	4798      	blx	r3
  42edb2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42edb6:	2101      	movs	r1, #1
  42edb8:	3301      	adds	r3, #1
  42edba:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42edbe:	2300      	movs	r3, #0
  42edc0:	e7e2      	b.n	42ed88 <d_print_comp_inner+0x574>
  42edc2:	4e20      	ldr	r6, [pc, #128]	@ (42ee44 <d_print_comp_inner+0x630>)
  42edc4:	f04f 0800 	mov.w	r8, #0
  42edc8:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42edcc:	f106 0912 	add.w	r9, r6, #18
  42edd0:	e008      	b.n	42ede4 <d_print_comp_inner+0x5d0>
  42edd2:	3101      	adds	r1, #1
  42edd4:	45b1      	cmp	r9, r6
  42edd6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42edda:	54e5      	strb	r5, [r4, r3]
  42eddc:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42ede0:	f43f adb7 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42ede4:	29ff      	cmp	r1, #255	@ 0xff
  42ede6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42edea:	460b      	mov	r3, r1
  42edec:	d1f1      	bne.n	42edd2 <d_print_comp_inner+0x5be>
  42edee:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42edf2:	4620      	mov	r0, r4
  42edf4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42edf8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42edfc:	4798      	blx	r3
  42edfe:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ee02:	2101      	movs	r1, #1
  42ee04:	3301      	adds	r3, #1
  42ee06:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ee0a:	2300      	movs	r3, #0
  42ee0c:	e7e2      	b.n	42edd4 <d_print_comp_inner+0x5c0>
  42ee0e:	4e0e      	ldr	r6, [pc, #56]	@ (42ee48 <d_print_comp_inner+0x634>)
  42ee10:	f04f 0800 	mov.w	r8, #0
  42ee14:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42ee18:	f106 090d 	add.w	r9, r6, #13
  42ee1c:	e01f      	b.n	42ee5e <d_print_comp_inner+0x64a>
  42ee1e:	bf00      	nop
  42ee20:	004351b4 	.word	0x004351b4
  42ee24:	004351b8 	.word	0x004351b8
  42ee28:	00435418 	.word	0x00435418
  42ee2c:	00435420 	.word	0x00435420
  42ee30:	004353f7 	.word	0x004353f7
  42ee34:	00435327 	.word	0x00435327
  42ee38:	0043521b 	.word	0x0043521b
  42ee3c:	00435210 	.word	0x00435210
  42ee40:	0043526f 	.word	0x0043526f
  42ee44:	0043525b 	.word	0x0043525b
  42ee48:	0043524c 	.word	0x0043524c
  42ee4c:	3101      	adds	r1, #1
  42ee4e:	45b1      	cmp	r9, r6
  42ee50:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ee54:	54e5      	strb	r5, [r4, r3]
  42ee56:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42ee5a:	f43f ad7a 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42ee5e:	29ff      	cmp	r1, #255	@ 0xff
  42ee60:	f816 5b01 	ldrb.w	r5, [r6], #1
  42ee64:	460b      	mov	r3, r1
  42ee66:	d1f1      	bne.n	42ee4c <d_print_comp_inner+0x638>
  42ee68:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ee6c:	4620      	mov	r0, r4
  42ee6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42ee72:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42ee76:	4798      	blx	r3
  42ee78:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ee7c:	2101      	movs	r1, #1
  42ee7e:	3301      	adds	r3, #1
  42ee80:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ee84:	2300      	movs	r3, #0
  42ee86:	e7e2      	b.n	42ee4e <d_print_comp_inner+0x63a>
  42ee88:	4ecb      	ldr	r6, [pc, #812]	@ (42f1b8 <d_print_comp_inner+0x9a4>)
  42ee8a:	f04f 0800 	mov.w	r8, #0
  42ee8e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42ee92:	f106 0918 	add.w	r9, r6, #24
  42ee96:	e008      	b.n	42eeaa <d_print_comp_inner+0x696>
  42ee98:	3101      	adds	r1, #1
  42ee9a:	45b1      	cmp	r9, r6
  42ee9c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42eea0:	54e5      	strb	r5, [r4, r3]
  42eea2:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42eea6:	f001 80ec 	beq.w	430082 <d_print_comp_inner+0x186e>
  42eeaa:	29ff      	cmp	r1, #255	@ 0xff
  42eeac:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42eeb0:	460b      	mov	r3, r1
  42eeb2:	d1f1      	bne.n	42ee98 <d_print_comp_inner+0x684>
  42eeb4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42eeb8:	4620      	mov	r0, r4
  42eeba:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42eebe:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42eec2:	4798      	blx	r3
  42eec4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42eec8:	2101      	movs	r1, #1
  42eeca:	3301      	adds	r3, #1
  42eecc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42eed0:	2300      	movs	r3, #0
  42eed2:	e7e2      	b.n	42ee9a <d_print_comp_inner+0x686>
  42eed4:	4eb9      	ldr	r6, [pc, #740]	@ (42f1bc <d_print_comp_inner+0x9a8>)
  42eed6:	f04f 0800 	mov.w	r8, #0
  42eeda:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42eede:	f106 0915 	add.w	r9, r6, #21
  42eee2:	e008      	b.n	42eef6 <d_print_comp_inner+0x6e2>
  42eee4:	3101      	adds	r1, #1
  42eee6:	45b1      	cmp	r9, r6
  42eee8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42eeec:	54e5      	strb	r5, [r4, r3]
  42eeee:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42eef2:	f001 80f2 	beq.w	4300da <d_print_comp_inner+0x18c6>
  42eef6:	29ff      	cmp	r1, #255	@ 0xff
  42eef8:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42eefc:	460b      	mov	r3, r1
  42eefe:	d1f1      	bne.n	42eee4 <d_print_comp_inner+0x6d0>
  42ef00:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ef04:	4620      	mov	r0, r4
  42ef06:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42ef0a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42ef0e:	4798      	blx	r3
  42ef10:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ef14:	2101      	movs	r1, #1
  42ef16:	3301      	adds	r3, #1
  42ef18:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ef1c:	2300      	movs	r3, #0
  42ef1e:	e7e2      	b.n	42eee6 <d_print_comp_inner+0x6d2>
  42ef20:	4ea7      	ldr	r6, [pc, #668]	@ (42f1c0 <d_print_comp_inner+0x9ac>)
  42ef22:	f04f 0800 	mov.w	r8, #0
  42ef26:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42ef2a:	f106 0919 	add.w	r9, r6, #25
  42ef2e:	e008      	b.n	42ef42 <d_print_comp_inner+0x72e>
  42ef30:	3101      	adds	r1, #1
  42ef32:	45b1      	cmp	r9, r6
  42ef34:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ef38:	54e5      	strb	r5, [r4, r3]
  42ef3a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42ef3e:	f43f ad08 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42ef42:	29ff      	cmp	r1, #255	@ 0xff
  42ef44:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42ef48:	460b      	mov	r3, r1
  42ef4a:	d1f1      	bne.n	42ef30 <d_print_comp_inner+0x71c>
  42ef4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ef50:	4620      	mov	r0, r4
  42ef52:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42ef56:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42ef5a:	4798      	blx	r3
  42ef5c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ef60:	2101      	movs	r1, #1
  42ef62:	3301      	adds	r3, #1
  42ef64:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ef68:	2300      	movs	r3, #0
  42ef6a:	e7e2      	b.n	42ef32 <d_print_comp_inner+0x71e>
  42ef6c:	4e95      	ldr	r6, [pc, #596]	@ (42f1c4 <d_print_comp_inner+0x9b0>)
  42ef6e:	f04f 0800 	mov.w	r8, #0
  42ef72:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42ef76:	f106 0916 	add.w	r9, r6, #22
  42ef7a:	e008      	b.n	42ef8e <d_print_comp_inner+0x77a>
  42ef7c:	3101      	adds	r1, #1
  42ef7e:	45b1      	cmp	r9, r6
  42ef80:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ef84:	54e5      	strb	r5, [r4, r3]
  42ef86:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42ef8a:	f43f ace2 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42ef8e:	29ff      	cmp	r1, #255	@ 0xff
  42ef90:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42ef94:	460b      	mov	r3, r1
  42ef96:	d1f1      	bne.n	42ef7c <d_print_comp_inner+0x768>
  42ef98:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ef9c:	4620      	mov	r0, r4
  42ef9e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42efa2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42efa6:	4798      	blx	r3
  42efa8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42efac:	2101      	movs	r1, #1
  42efae:	3301      	adds	r3, #1
  42efb0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42efb4:	2300      	movs	r3, #0
  42efb6:	e7e2      	b.n	42ef7e <d_print_comp_inner+0x76a>
  42efb8:	4e83      	ldr	r6, [pc, #524]	@ (42f1c8 <d_print_comp_inner+0x9b4>)
  42efba:	f04f 0800 	mov.w	r8, #0
  42efbe:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42efc2:	f106 0913 	add.w	r9, r6, #19
  42efc6:	e008      	b.n	42efda <d_print_comp_inner+0x7c6>
  42efc8:	3101      	adds	r1, #1
  42efca:	45b1      	cmp	r9, r6
  42efcc:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42efd0:	54e5      	strb	r5, [r4, r3]
  42efd2:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42efd6:	f43f acbc 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42efda:	29ff      	cmp	r1, #255	@ 0xff
  42efdc:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42efe0:	460b      	mov	r3, r1
  42efe2:	d1f1      	bne.n	42efc8 <d_print_comp_inner+0x7b4>
  42efe4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42efe8:	4620      	mov	r0, r4
  42efea:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42efee:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42eff2:	4798      	blx	r3
  42eff4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42eff8:	2101      	movs	r1, #1
  42effa:	3301      	adds	r3, #1
  42effc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f000:	2300      	movs	r3, #0
  42f002:	e7e2      	b.n	42efca <d_print_comp_inner+0x7b6>
  42f004:	4e71      	ldr	r6, [pc, #452]	@ (42f1cc <d_print_comp_inner+0x9b8>)
  42f006:	f04f 0800 	mov.w	r8, #0
  42f00a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f00e:	f106 090f 	add.w	r9, r6, #15
  42f012:	e008      	b.n	42f026 <d_print_comp_inner+0x812>
  42f014:	3101      	adds	r1, #1
  42f016:	45b1      	cmp	r9, r6
  42f018:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f01c:	54e5      	strb	r5, [r4, r3]
  42f01e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42f022:	f43f ac96 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42f026:	29ff      	cmp	r1, #255	@ 0xff
  42f028:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42f02c:	460b      	mov	r3, r1
  42f02e:	d1f1      	bne.n	42f014 <d_print_comp_inner+0x800>
  42f030:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f034:	4620      	mov	r0, r4
  42f036:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f03a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f03e:	4798      	blx	r3
  42f040:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f044:	2101      	movs	r1, #1
  42f046:	3301      	adds	r3, #1
  42f048:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f04c:	2300      	movs	r3, #0
  42f04e:	e7e2      	b.n	42f016 <d_print_comp_inner+0x802>
  42f050:	4e5f      	ldr	r6, [pc, #380]	@ (42f1d0 <d_print_comp_inner+0x9bc>)
  42f052:	f04f 0800 	mov.w	r8, #0
  42f056:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f05a:	f106 091a 	add.w	r9, r6, #26
  42f05e:	e008      	b.n	42f072 <d_print_comp_inner+0x85e>
  42f060:	3101      	adds	r1, #1
  42f062:	454e      	cmp	r6, r9
  42f064:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f068:	54e5      	strb	r5, [r4, r3]
  42f06a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42f06e:	f43f ac70 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42f072:	29ff      	cmp	r1, #255	@ 0xff
  42f074:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42f078:	460b      	mov	r3, r1
  42f07a:	d1f1      	bne.n	42f060 <d_print_comp_inner+0x84c>
  42f07c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f080:	4620      	mov	r0, r4
  42f082:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f086:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f08a:	4798      	blx	r3
  42f08c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f090:	2101      	movs	r1, #1
  42f092:	3301      	adds	r3, #1
  42f094:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f098:	2300      	movs	r3, #0
  42f09a:	e7e2      	b.n	42f062 <d_print_comp_inner+0x84e>
  42f09c:	494d      	ldr	r1, [pc, #308]	@ (42f1d4 <d_print_comp_inner+0x9c0>)
  42f09e:	f7fd f977 	bl	42c390 <d_append_string>
  42f0a2:	2111      	movs	r1, #17
  42f0a4:	f8db 200c 	ldr.w	r2, [fp, #12]
  42f0a8:	e456      	b.n	42e958 <d_print_comp_inner+0x144>
  42f0aa:	4e4b      	ldr	r6, [pc, #300]	@ (42f1d8 <d_print_comp_inner+0x9c4>)
  42f0ac:	f04f 0800 	mov.w	r8, #0
  42f0b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f0b4:	f106 0915 	add.w	r9, r6, #21
  42f0b8:	e008      	b.n	42f0cc <d_print_comp_inner+0x8b8>
  42f0ba:	3101      	adds	r1, #1
  42f0bc:	454e      	cmp	r6, r9
  42f0be:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f0c2:	54e5      	strb	r5, [r4, r3]
  42f0c4:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42f0c8:	f43f ac43 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42f0cc:	29ff      	cmp	r1, #255	@ 0xff
  42f0ce:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42f0d2:	460b      	mov	r3, r1
  42f0d4:	d1f1      	bne.n	42f0ba <d_print_comp_inner+0x8a6>
  42f0d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f0da:	4620      	mov	r0, r4
  42f0dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f0e0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f0e4:	4798      	blx	r3
  42f0e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f0ea:	2101      	movs	r1, #1
  42f0ec:	3301      	adds	r3, #1
  42f0ee:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f0f2:	2300      	movs	r3, #0
  42f0f4:	e7e2      	b.n	42f0bc <d_print_comp_inner+0x8a8>
  42f0f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f0fa:	29ff      	cmp	r1, #255	@ 0xff
  42f0fc:	f001 8388 	beq.w	430810 <d_print_comp_inner+0x1ffc>
  42f100:	1c4a      	adds	r2, r1, #1
  42f102:	235b      	movs	r3, #91	@ 0x5b
  42f104:	f04f 0800 	mov.w	r8, #0
  42f108:	465f      	mov	r7, fp
  42f10a:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  42f10e:	5463      	strb	r3, [r4, r1]
  42f110:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42f114:	68fa      	ldr	r2, [r7, #12]
  42f116:	2111      	movs	r1, #17
  42f118:	4620      	mov	r0, r4
  42f11a:	f001 fe3f 	bl	430d9c <d_print_comp>
  42f11e:	693f      	ldr	r7, [r7, #16]
  42f120:	2f00      	cmp	r7, #0
  42f122:	f000 86f8 	beq.w	42ff16 <d_print_comp_inner+0x1702>
  42f126:	4d2d      	ldr	r5, [pc, #180]	@ (42f1dc <d_print_comp_inner+0x9c8>)
  42f128:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f12c:	f105 0902 	add.w	r9, r5, #2
  42f130:	e007      	b.n	42f142 <d_print_comp_inner+0x92e>
  42f132:	3101      	adds	r1, #1
  42f134:	45a9      	cmp	r9, r5
  42f136:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f13a:	54e6      	strb	r6, [r4, r3]
  42f13c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42f140:	d0e8      	beq.n	42f114 <d_print_comp_inner+0x900>
  42f142:	29ff      	cmp	r1, #255	@ 0xff
  42f144:	f815 6b01 	ldrb.w	r6, [r5], #1
  42f148:	460b      	mov	r3, r1
  42f14a:	d1f2      	bne.n	42f132 <d_print_comp_inner+0x91e>
  42f14c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f150:	4620      	mov	r0, r4
  42f152:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f156:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f15a:	4798      	blx	r3
  42f15c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f160:	2101      	movs	r1, #1
  42f162:	3301      	adds	r3, #1
  42f164:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f168:	2300      	movs	r3, #0
  42f16a:	e7e3      	b.n	42f134 <d_print_comp_inner+0x920>
  42f16c:	4e1c      	ldr	r6, [pc, #112]	@ (42f1e0 <d_print_comp_inner+0x9cc>)
  42f16e:	f04f 0800 	mov.w	r8, #0
  42f172:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f176:	f106 0917 	add.w	r9, r6, #23
  42f17a:	e008      	b.n	42f18e <d_print_comp_inner+0x97a>
  42f17c:	3101      	adds	r1, #1
  42f17e:	45b1      	cmp	r9, r6
  42f180:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f184:	54e5      	strb	r5, [r4, r3]
  42f186:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42f18a:	f43f abe2 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42f18e:	29ff      	cmp	r1, #255	@ 0xff
  42f190:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42f194:	460b      	mov	r3, r1
  42f196:	d1f1      	bne.n	42f17c <d_print_comp_inner+0x968>
  42f198:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f19c:	4620      	mov	r0, r4
  42f19e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f1a2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f1a6:	4798      	blx	r3
  42f1a8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f1ac:	2101      	movs	r1, #1
  42f1ae:	3301      	adds	r3, #1
  42f1b0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f1b4:	2300      	movs	r3, #0
  42f1b6:	e7e2      	b.n	42f17e <d_print_comp_inner+0x96a>
  42f1b8:	00435227 	.word	0x00435227
  42f1bc:	0043530f 	.word	0x0043530f
  42f1c0:	004352f3 	.word	0x004352f3
  42f1c4:	004352db 	.word	0x004352db
  42f1c8:	004352c7 	.word	0x004352c7
  42f1cc:	004352b7 	.word	0x004352b7
  42f1d0:	0043529b 	.word	0x0043529b
  42f1d4:	00435288 	.word	0x00435288
  42f1d8:	00435283 	.word	0x00435283
  42f1dc:	004351b4 	.word	0x004351b4
  42f1e0:	004351f7 	.word	0x004351f7
  42f1e4:	2111      	movs	r1, #17
  42f1e6:	68d2      	ldr	r2, [r2, #12]
  42f1e8:	f001 fdd8 	bl	430d9c <d_print_comp>
  42f1ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f1f0:	29ff      	cmp	r1, #255	@ 0xff
  42f1f2:	f001 82b5 	beq.w	430760 <d_print_comp_inner+0x1f4c>
  42f1f6:	1c4a      	adds	r2, r1, #1
  42f1f8:	2340      	movs	r3, #64	@ 0x40
  42f1fa:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  42f1fe:	4620      	mov	r0, r4
  42f200:	5463      	strb	r3, [r4, r1]
  42f202:	2111      	movs	r1, #17
  42f204:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42f208:	f8db 2010 	ldr.w	r2, [fp, #16]
  42f20c:	f7ff bba5 	b.w	42e95a <d_print_comp_inner+0x146>
  42f210:	4dd1      	ldr	r5, [pc, #836]	@ (42f558 <d_print_comp_inner+0xd44>)
  42f212:	2111      	movs	r1, #17
  42f214:	68d2      	ldr	r2, [r2, #12]
  42f216:	f04f 0800 	mov.w	r8, #0
  42f21a:	f001 fdbf 	bl	430d9c <d_print_comp>
  42f21e:	1cef      	adds	r7, r5, #3
  42f220:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f224:	e008      	b.n	42f238 <d_print_comp_inner+0xa24>
  42f226:	3101      	adds	r1, #1
  42f228:	42bd      	cmp	r5, r7
  42f22a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f22e:	54e6      	strb	r6, [r4, r3]
  42f230:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42f234:	f43f ab75 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42f238:	29ff      	cmp	r1, #255	@ 0xff
  42f23a:	f815 6b01 	ldrb.w	r6, [r5], #1
  42f23e:	460b      	mov	r3, r1
  42f240:	d1f1      	bne.n	42f226 <d_print_comp_inner+0xa12>
  42f242:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f246:	4620      	mov	r0, r4
  42f248:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f24c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f250:	4798      	blx	r3
  42f252:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f256:	2101      	movs	r1, #1
  42f258:	3301      	adds	r3, #1
  42f25a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f25e:	2300      	movs	r3, #0
  42f260:	e7e2      	b.n	42f228 <d_print_comp_inner+0xa14>
  42f262:	4ebe      	ldr	r6, [pc, #760]	@ (42f55c <d_print_comp_inner+0xd48>)
  42f264:	f04f 0800 	mov.w	r8, #0
  42f268:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f26c:	f106 0908 	add.w	r9, r6, #8
  42f270:	e008      	b.n	42f284 <d_print_comp_inner+0xa70>
  42f272:	3101      	adds	r1, #1
  42f274:	454e      	cmp	r6, r9
  42f276:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f27a:	54e5      	strb	r5, [r4, r3]
  42f27c:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42f280:	f000 865b 	beq.w	42ff3a <d_print_comp_inner+0x1726>
  42f284:	29ff      	cmp	r1, #255	@ 0xff
  42f286:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42f28a:	460b      	mov	r3, r1
  42f28c:	d1f1      	bne.n	42f272 <d_print_comp_inner+0xa5e>
  42f28e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f292:	4620      	mov	r0, r4
  42f294:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f298:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f29c:	4798      	blx	r3
  42f29e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f2a2:	2101      	movs	r1, #1
  42f2a4:	3301      	adds	r3, #1
  42f2a6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f2aa:	2300      	movs	r3, #0
  42f2ac:	e7e2      	b.n	42f274 <d_print_comp_inner+0xa60>
  42f2ae:	4dac      	ldr	r5, [pc, #688]	@ (42f560 <d_print_comp_inner+0xd4c>)
  42f2b0:	f04f 0800 	mov.w	r8, #0
  42f2b4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f2b8:	f105 0708 	add.w	r7, r5, #8
  42f2bc:	e008      	b.n	42f2d0 <d_print_comp_inner+0xabc>
  42f2be:	3101      	adds	r1, #1
  42f2c0:	42af      	cmp	r7, r5
  42f2c2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f2c6:	54e6      	strb	r6, [r4, r3]
  42f2c8:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42f2cc:	f43f ab29 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42f2d0:	29ff      	cmp	r1, #255	@ 0xff
  42f2d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  42f2d6:	460b      	mov	r3, r1
  42f2d8:	d1f1      	bne.n	42f2be <d_print_comp_inner+0xaaa>
  42f2da:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f2de:	4620      	mov	r0, r4
  42f2e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f2e4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f2e8:	4798      	blx	r3
  42f2ea:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f2ee:	2101      	movs	r1, #1
  42f2f0:	3301      	adds	r3, #1
  42f2f2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f2f6:	2300      	movs	r3, #0
  42f2f8:	e7e2      	b.n	42f2c0 <d_print_comp_inner+0xaac>
  42f2fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f2fe:	29ff      	cmp	r1, #255	@ 0xff
  42f300:	f001 821d 	beq.w	43073e <d_print_comp_inner+0x1f2a>
  42f304:	1c4a      	adds	r2, r1, #1
  42f306:	233c      	movs	r3, #60	@ 0x3c
  42f308:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  42f30c:	5463      	strb	r3, [r4, r1]
  42f30e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42f312:	f8db 700c 	ldr.w	r7, [fp, #12]
  42f316:	b187      	cbz	r7, 42f33a <d_print_comp_inner+0xb26>
  42f318:	f04f 0800 	mov.w	r8, #0
  42f31c:	46c1      	mov	r9, r8
  42f31e:	f1b8 0f00 	cmp.w	r8, #0
  42f322:	f040 8566 	bne.w	42fdf2 <d_print_comp_inner+0x15de>
  42f326:	463a      	mov	r2, r7
  42f328:	2111      	movs	r1, #17
  42f32a:	4620      	mov	r0, r4
  42f32c:	f108 0801 	add.w	r8, r8, #1
  42f330:	f001 fd34 	bl	430d9c <d_print_comp>
  42f334:	693f      	ldr	r7, [r7, #16]
  42f336:	2f00      	cmp	r7, #0
  42f338:	d1f1      	bne.n	42f31e <d_print_comp_inner+0xb0a>
  42f33a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f33e:	29ff      	cmp	r1, #255	@ 0xff
  42f340:	f001 81dc 	beq.w	4306fc <d_print_comp_inner+0x1ee8>
  42f344:	1c4a      	adds	r2, r1, #1
  42f346:	233e      	movs	r3, #62	@ 0x3e
  42f348:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  42f34c:	5463      	strb	r3, [r4, r1]
  42f34e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42f352:	f7ff bae6 	b.w	42e922 <d_print_comp_inner+0x10e>
  42f356:	68d2      	ldr	r2, [r2, #12]
  42f358:	e9d2 6300 	ldrd	r6, r3, [r2]
  42f35c:	2b00      	cmp	r3, #0
  42f35e:	f000 8590 	beq.w	42fe82 <d_print_comp_inner+0x166e>
  42f362:	4433      	add	r3, r6
  42f364:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f368:	3e01      	subs	r6, #1
  42f36a:	f04f 0800 	mov.w	r8, #0
  42f36e:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
  42f372:	e008      	b.n	42f386 <d_print_comp_inner+0xb72>
  42f374:	3101      	adds	r1, #1
  42f376:	45b1      	cmp	r9, r6
  42f378:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f37c:	54e5      	strb	r5, [r4, r3]
  42f37e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42f382:	f000 857e 	beq.w	42fe82 <d_print_comp_inner+0x166e>
  42f386:	29ff      	cmp	r1, #255	@ 0xff
  42f388:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42f38c:	460b      	mov	r3, r1
  42f38e:	d1f1      	bne.n	42f374 <d_print_comp_inner+0xb60>
  42f390:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f394:	4620      	mov	r0, r4
  42f396:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f39a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f39e:	4798      	blx	r3
  42f3a0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f3a4:	2101      	movs	r1, #1
  42f3a6:	3301      	adds	r3, #1
  42f3a8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f3ac:	2300      	movs	r3, #0
  42f3ae:	e7e2      	b.n	42f376 <d_print_comp_inner+0xb62>
  42f3b0:	68d2      	ldr	r2, [r2, #12]
  42f3b2:	f8d0 c114 	ldr.w	ip, [r0, #276]	@ 0x114
  42f3b6:	b1ca      	cbz	r2, 42f3ec <d_print_comp_inner+0xbd8>
  42f3b8:	ab06      	add	r3, sp, #24
  42f3ba:	2100      	movs	r1, #0
  42f3bc:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
  42f3c0:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
  42f3c4:	e9cd 1308 	strd	r1, r3, [sp, #32]
  42f3c8:	2111      	movs	r1, #17
  42f3ca:	e9cd cb06 	strd	ip, fp, [sp, #24]
  42f3ce:	f001 fce5 	bl	430d9c <d_print_comp>
  42f3d2:	9a06      	ldr	r2, [sp, #24]
  42f3d4:	9b08      	ldr	r3, [sp, #32]
  42f3d6:	f8c4 2114 	str.w	r2, [r4, #276]	@ 0x114
  42f3da:	2b00      	cmp	r3, #0
  42f3dc:	f47f aaa1 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42f3e0:	2120      	movs	r1, #32
  42f3e2:	4620      	mov	r0, r4
  42f3e4:	f7fc ff98 	bl	42c318 <d_append_char>
  42f3e8:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
  42f3ec:	4663      	mov	r3, ip
  42f3ee:	465a      	mov	r2, fp
  42f3f0:	2111      	movs	r1, #17
  42f3f2:	4620      	mov	r0, r4
  42f3f4:	b017      	add	sp, #92	@ 0x5c
  42f3f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42f3fa:	f002 b815 	b.w	431428 <d_print_function_type>
  42f3fe:	4959      	ldr	r1, [pc, #356]	@ (42f564 <d_print_comp_inner+0xd50>)
  42f400:	f7fc ffc6 	bl	42c390 <d_append_string>
  42f404:	2111      	movs	r1, #17
  42f406:	f8db 200c 	ldr.w	r2, [fp, #12]
  42f40a:	f7ff baa5 	b.w	42e958 <d_print_comp_inner+0x144>
  42f40e:	68d5      	ldr	r5, [r2, #12]
  42f410:	2d00      	cmp	r5, #0
  42f412:	f040 872d 	bne.w	430270 <d_print_comp_inner+0x1a5c>
  42f416:	4954      	ldr	r1, [pc, #336]	@ (42f568 <d_print_comp_inner+0xd54>)
  42f418:	4620      	mov	r0, r4
  42f41a:	b017      	add	sp, #92	@ 0x5c
  42f41c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42f420:	f7fc bfb6 	b.w	42c390 <d_append_string>
  42f424:	2300      	movs	r3, #0
  42f426:	f8d0 8114 	ldr.w	r8, [r0, #276]	@ 0x114
  42f42a:	f8d0 7148 	ldr.w	r7, [r0, #328]	@ 0x148
  42f42e:	2111      	movs	r1, #17
  42f430:	f8c4 2148 	str.w	r2, [r4, #328]	@ 0x148
  42f434:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
  42f438:	68d2      	ldr	r2, [r2, #12]
  42f43a:	f001 fcaf 	bl	430d9c <d_print_comp>
  42f43e:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
  42f442:	2b3c      	cmp	r3, #60	@ 0x3c
  42f444:	f001 81d5 	beq.w	4307f2 <d_print_comp_inner+0x1fde>
  42f448:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f44c:	29ff      	cmp	r1, #255	@ 0xff
  42f44e:	f001 81c0 	beq.w	4307d2 <d_print_comp_inner+0x1fbe>
  42f452:	1c4b      	adds	r3, r1, #1
  42f454:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  42f458:	233c      	movs	r3, #60	@ 0x3c
  42f45a:	4620      	mov	r0, r4
  42f45c:	5463      	strb	r3, [r4, r1]
  42f45e:	2111      	movs	r1, #17
  42f460:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42f464:	f8db 2010 	ldr.w	r2, [fp, #16]
  42f468:	f001 fc98 	bl	430d9c <d_print_comp>
  42f46c:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
  42f470:	2b3e      	cmp	r3, #62	@ 0x3e
  42f472:	f001 81a8 	beq.w	4307c6 <d_print_comp_inner+0x1fb2>
  42f476:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f47a:	29ff      	cmp	r1, #255	@ 0xff
  42f47c:	f001 8193 	beq.w	4307a6 <d_print_comp_inner+0x1f92>
  42f480:	1c4b      	adds	r3, r1, #1
  42f482:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  42f486:	233e      	movs	r3, #62	@ 0x3e
  42f488:	5463      	strb	r3, [r4, r1]
  42f48a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42f48e:	f8c4 8114 	str.w	r8, [r4, #276]	@ 0x114
  42f492:	f8c4 7148 	str.w	r7, [r4, #328]	@ 0x148
  42f496:	f7ff ba44 	b.w	42e922 <d_print_comp_inner+0x10e>
  42f49a:	2200      	movs	r2, #0
  42f49c:	f8db 800c 	ldr.w	r8, [fp, #12]
  42f4a0:	f8d0 9114 	ldr.w	r9, [r0, #276]	@ 0x114
  42f4a4:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
  42f4a8:	f1b8 0f00 	cmp.w	r8, #0
  42f4ac:	f43f aa36 	beq.w	42e91c <d_print_comp_inner+0x108>
  42f4b0:	ae06      	add	r6, sp, #24
  42f4b2:	f8d0 1110 	ldr.w	r1, [r0, #272]	@ 0x110
  42f4b6:	4694      	mov	ip, r2
  42f4b8:	4610      	mov	r0, r2
  42f4ba:	4633      	mov	r3, r6
  42f4bc:	4645      	mov	r5, r8
  42f4be:	469e      	mov	lr, r3
  42f4c0:	f10c 0701 	add.w	r7, ip, #1
  42f4c4:	e9c3 2500 	strd	r2, r5, [r3]
  42f4c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
  42f4cc:	782a      	ldrb	r2, [r5, #0]
  42f4ce:	2a4e      	cmp	r2, #78	@ 0x4e
  42f4d0:	f1a2 081c 	sub.w	r8, r2, #28
  42f4d4:	f1a2 0250 	sub.w	r2, r2, #80	@ 0x50
  42f4d8:	f000 8687 	beq.w	4301ea <d_print_comp_inner+0x19d6>
  42f4dc:	f200 8682 	bhi.w	4301e4 <d_print_comp_inner+0x19d0>
  42f4e0:	f1b8 0f04 	cmp.w	r8, #4
  42f4e4:	f240 8681 	bls.w	4301ea <d_print_comp_inner+0x19d6>
  42f4e8:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  42f4ec:	46a8      	mov	r8, r5
  42f4ee:	782b      	ldrb	r3, [r5, #0]
  42f4f0:	2b02      	cmp	r3, #2
  42f4f2:	f001 809e 	beq.w	430632 <d_print_comp_inner+0x1e1e>
  42f4f6:	2b04      	cmp	r3, #4
  42f4f8:	d104      	bne.n	42f504 <d_print_comp_inner+0xcf0>
  42f4fa:	ab04      	add	r3, sp, #16
  42f4fc:	e9cd 1804 	strd	r1, r8, [sp, #16]
  42f500:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  42f504:	f8db 2010 	ldr.w	r2, [fp, #16]
  42f508:	2111      	movs	r1, #17
  42f50a:	4620      	mov	r0, r4
  42f50c:	f001 fc46 	bl	430d9c <d_print_comp>
  42f510:	f898 3000 	ldrb.w	r3, [r8]
  42f514:	2b04      	cmp	r3, #4
  42f516:	d102      	bne.n	42f51e <d_print_comp_inner+0xd0a>
  42f518:	9b04      	ldr	r3, [sp, #16]
  42f51a:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  42f51e:	eb06 1507 	add.w	r5, r6, r7, lsl #4
  42f522:	f04f 0820 	mov.w	r8, #32
  42f526:	f855 7c08 	ldr.w	r7, [r5, #-8]
  42f52a:	2f00      	cmp	r7, #0
  42f52c:	f000 863d 	beq.w	4301aa <d_print_comp_inner+0x1996>
  42f530:	3d10      	subs	r5, #16
  42f532:	42ae      	cmp	r6, r5
  42f534:	d1f7      	bne.n	42f526 <d_print_comp_inner+0xd12>
  42f536:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
  42f53a:	f7ff b9f2 	b.w	42e922 <d_print_comp_inner+0x10e>
  42f53e:	f8d2 900c 	ldr.w	r9, [r2, #12]
  42f542:	f04f 0800 	mov.w	r8, #0
  42f546:	4d09      	ldr	r5, [pc, #36]	@ (42f56c <d_print_comp_inner+0xd58>)
  42f548:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f54c:	f8d9 a008 	ldr.w	sl, [r9, #8]
  42f550:	f105 0708 	add.w	r7, r5, #8
  42f554:	e015      	b.n	42f582 <d_print_comp_inner+0xd6e>
  42f556:	bf00      	nop
  42f558:	004353c4 	.word	0x004353c4
  42f55c:	0043544b 	.word	0x0043544b
  42f560:	0043543f 	.word	0x0043543f
  42f564:	004351d8 	.word	0x004351d8
  42f568:	004353c8 	.word	0x004353c8
  42f56c:	00435357 	.word	0x00435357
  42f570:	3101      	adds	r1, #1
  42f572:	42af      	cmp	r7, r5
  42f574:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f578:	54e6      	strb	r6, [r4, r3]
  42f57a:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42f57e:	f000 85d8 	beq.w	430132 <d_print_comp_inner+0x191e>
  42f582:	29ff      	cmp	r1, #255	@ 0xff
  42f584:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  42f588:	460b      	mov	r3, r1
  42f58a:	d1f1      	bne.n	42f570 <d_print_comp_inner+0xd5c>
  42f58c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f590:	4620      	mov	r0, r4
  42f592:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f596:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f59a:	4798      	blx	r3
  42f59c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f5a0:	2101      	movs	r1, #1
  42f5a2:	3301      	adds	r3, #1
  42f5a4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f5a8:	2300      	movs	r3, #0
  42f5aa:	e7e2      	b.n	42f572 <d_print_comp_inner+0xd5e>
  42f5ac:	4eca      	ldr	r6, [pc, #808]	@ (42f8d8 <d_print_comp_inner+0x10c4>)
  42f5ae:	f04f 0800 	mov.w	r8, #0
  42f5b2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f5b6:	f106 090e 	add.w	r9, r6, #14
  42f5ba:	e008      	b.n	42f5ce <d_print_comp_inner+0xdba>
  42f5bc:	3101      	adds	r1, #1
  42f5be:	45b1      	cmp	r9, r6
  42f5c0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f5c4:	54e5      	strb	r5, [r4, r3]
  42f5c6:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42f5ca:	f000 84dd 	beq.w	42ff88 <d_print_comp_inner+0x1774>
  42f5ce:	29ff      	cmp	r1, #255	@ 0xff
  42f5d0:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42f5d4:	460b      	mov	r3, r1
  42f5d6:	d1f1      	bne.n	42f5bc <d_print_comp_inner+0xda8>
  42f5d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f5dc:	4620      	mov	r0, r4
  42f5de:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f5e2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f5e6:	4798      	blx	r3
  42f5e8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f5ec:	2101      	movs	r1, #1
  42f5ee:	3301      	adds	r3, #1
  42f5f0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f5f4:	2300      	movs	r3, #0
  42f5f6:	e7e2      	b.n	42f5be <d_print_comp_inner+0xdaa>
  42f5f8:	e9d2 6503 	ldrd	r6, r5, [r2, #12]
  42f5fc:	7833      	ldrb	r3, [r6, #0]
  42f5fe:	2b32      	cmp	r3, #50	@ 0x32
  42f600:	f000 86b4 	beq.w	43036c <d_print_comp_inner+0x1b58>
  42f604:	2b34      	cmp	r3, #52	@ 0x34
  42f606:	f000 871a 	beq.w	43043e <d_print_comp_inner+0x1c2a>
  42f60a:	4632      	mov	r2, r6
  42f60c:	2111      	movs	r1, #17
  42f60e:	f002 f9e3 	bl	4319d8 <d_print_expr_op>
  42f612:	462a      	mov	r2, r5
  42f614:	2111      	movs	r1, #17
  42f616:	4620      	mov	r0, r4
  42f618:	b017      	add	sp, #92	@ 0x5c
  42f61a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42f61e:	f002 bbcb 	b.w	431db8 <d_print_subexpr>
  42f622:	68d2      	ldr	r2, [r2, #12]
  42f624:	2111      	movs	r1, #17
  42f626:	4620      	mov	r0, r4
  42f628:	b017      	add	sp, #92	@ 0x5c
  42f62a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42f62e:	f002 b9d3 	b.w	4319d8 <d_print_expr_op>
  42f632:	4eaa      	ldr	r6, [pc, #680]	@ (42f8dc <d_print_comp_inner+0x10c8>)
  42f634:	f04f 0800 	mov.w	r8, #0
  42f638:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f63c:	f106 0909 	add.w	r9, r6, #9
  42f640:	e008      	b.n	42f654 <d_print_comp_inner+0xe40>
  42f642:	3101      	adds	r1, #1
  42f644:	45b1      	cmp	r9, r6
  42f646:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f64a:	54e5      	strb	r5, [r4, r3]
  42f64c:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42f650:	f000 847c 	beq.w	42ff4c <d_print_comp_inner+0x1738>
  42f654:	29ff      	cmp	r1, #255	@ 0xff
  42f656:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42f65a:	460b      	mov	r3, r1
  42f65c:	d1f1      	bne.n	42f642 <d_print_comp_inner+0xe2e>
  42f65e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f662:	4620      	mov	r0, r4
  42f664:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f668:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f66c:	4798      	blx	r3
  42f66e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f672:	2101      	movs	r1, #1
  42f674:	3301      	adds	r3, #1
  42f676:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f67a:	2300      	movs	r3, #0
  42f67c:	e7e2      	b.n	42f644 <d_print_comp_inner+0xe30>
  42f67e:	e9d2 2503 	ldrd	r2, r5, [r2, #12]
  42f682:	b112      	cbz	r2, 42f68a <d_print_comp_inner+0xe76>
  42f684:	2111      	movs	r1, #17
  42f686:	f001 fb89 	bl	430d9c <d_print_comp>
  42f68a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f68e:	29ff      	cmp	r1, #255	@ 0xff
  42f690:	f001 8008 	beq.w	4306a4 <d_print_comp_inner+0x1e90>
  42f694:	1c4a      	adds	r2, r1, #1
  42f696:	237b      	movs	r3, #123	@ 0x7b
  42f698:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  42f69c:	4620      	mov	r0, r4
  42f69e:	462a      	mov	r2, r5
  42f6a0:	5463      	strb	r3, [r4, r1]
  42f6a2:	2111      	movs	r1, #17
  42f6a4:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42f6a8:	f001 fb78 	bl	430d9c <d_print_comp>
  42f6ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f6b0:	29ff      	cmp	r1, #255	@ 0xff
  42f6b2:	f000 84a7 	beq.w	430004 <d_print_comp_inner+0x17f0>
  42f6b6:	1c4a      	adds	r2, r1, #1
  42f6b8:	237d      	movs	r3, #125	@ 0x7d
  42f6ba:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  42f6be:	5463      	strb	r3, [r4, r1]
  42f6c0:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42f6c4:	f7ff b92d 	b.w	42e922 <d_print_comp_inner+0x10e>
  42f6c8:	2300      	movs	r3, #0
  42f6ca:	f8d0 c114 	ldr.w	ip, [r0, #276]	@ 0x114
  42f6ce:	ae06      	add	r6, sp, #24
  42f6d0:	9207      	str	r2, [sp, #28]
  42f6d2:	9308      	str	r3, [sp, #32]
  42f6d4:	46e1      	mov	r9, ip
  42f6d6:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
  42f6da:	f8cd c018 	str.w	ip, [sp, #24]
  42f6de:	f8c0 6114 	str.w	r6, [r0, #276]	@ 0x114
  42f6e2:	9309      	str	r3, [sp, #36]	@ 0x24
  42f6e4:	f1bc 0f00 	cmp.w	ip, #0
  42f6e8:	f001 8297 	beq.w	430c1a <d_print_comp_inner+0x2406>
  42f6ec:	f04f 0801 	mov.w	r8, #1
  42f6f0:	4667      	mov	r7, ip
  42f6f2:	4635      	mov	r5, r6
  42f6f4:	46c6      	mov	lr, r8
  42f6f6:	e01a      	b.n	42f72e <d_print_comp_inner+0xf1a>
  42f6f8:	68bb      	ldr	r3, [r7, #8]
  42f6fa:	b9b3      	cbnz	r3, 42f72a <d_print_comp_inner+0xf16>
  42f6fc:	f1b8 0f03 	cmp.w	r8, #3
  42f700:	f63f a90c 	bhi.w	42e91c <d_print_comp_inner+0x108>
  42f704:	ab16      	add	r3, sp, #88	@ 0x58
  42f706:	eb03 1a08 	add.w	sl, r3, r8, lsl #4
  42f70a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
  42f70e:	f1aa 0c40 	sub.w	ip, sl, #64	@ 0x40
  42f712:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  42f716:	f84a 5c40 	str.w	r5, [sl, #-64]
  42f71a:	eb06 1508 	add.w	r5, r6, r8, lsl #4
  42f71e:	f108 0801 	add.w	r8, r8, #1
  42f722:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
  42f726:	f8c7 e008 	str.w	lr, [r7, #8]
  42f72a:	683f      	ldr	r7, [r7, #0]
  42f72c:	b127      	cbz	r7, 42f738 <d_print_comp_inner+0xf24>
  42f72e:	687b      	ldr	r3, [r7, #4]
  42f730:	781b      	ldrb	r3, [r3, #0]
  42f732:	3b19      	subs	r3, #25
  42f734:	2b02      	cmp	r3, #2
  42f736:	d9df      	bls.n	42f6f8 <d_print_comp_inner+0xee4>
  42f738:	f8db 2010 	ldr.w	r2, [fp, #16]
  42f73c:	2111      	movs	r1, #17
  42f73e:	4620      	mov	r0, r4
  42f740:	f001 fb2c 	bl	430d9c <d_print_comp>
  42f744:	9b08      	ldr	r3, [sp, #32]
  42f746:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
  42f74a:	2b00      	cmp	r3, #0
  42f74c:	f47f a8e9 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42f750:	f1b8 0f01 	cmp.w	r8, #1
  42f754:	d90e      	bls.n	42f774 <d_print_comp_inner+0xf60>
  42f756:	eb06 1608 	add.w	r6, r6, r8, lsl #4
  42f75a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
  42f75e:	f856 2c0c 	ldr.w	r2, [r6, #-12]
  42f762:	2111      	movs	r1, #17
  42f764:	4620      	mov	r0, r4
  42f766:	f001 fb47 	bl	430df8 <d_print_mod>
  42f76a:	f1b8 0f01 	cmp.w	r8, #1
  42f76e:	f1a6 0610 	sub.w	r6, r6, #16
  42f772:	d1f2      	bne.n	42f75a <d_print_comp_inner+0xf46>
  42f774:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
  42f778:	465a      	mov	r2, fp
  42f77a:	2111      	movs	r1, #17
  42f77c:	4620      	mov	r0, r4
  42f77e:	f002 f853 	bl	431828 <d_print_array_type>
  42f782:	f7ff b8ce 	b.w	42e922 <d_print_comp_inner+0x10e>
  42f786:	4956      	ldr	r1, [pc, #344]	@ (42f8e0 <d_print_comp_inner+0x10cc>)
  42f788:	f7fc fe02 	bl	42c390 <d_append_string>
  42f78c:	2111      	movs	r1, #17
  42f78e:	f8db 200c 	ldr.w	r2, [fp, #12]
  42f792:	4620      	mov	r0, r4
  42f794:	f001 fb02 	bl	430d9c <d_print_comp>
  42f798:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f79c:	29ff      	cmp	r1, #255	@ 0xff
  42f79e:	f000 812d 	beq.w	42f9fc <d_print_comp_inner+0x11e8>
  42f7a2:	1c4a      	adds	r2, r1, #1
  42f7a4:	2329      	movs	r3, #41	@ 0x29
  42f7a6:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  42f7aa:	5463      	strb	r3, [r4, r1]
  42f7ac:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42f7b0:	f7ff b8b7 	b.w	42e922 <d_print_comp_inner+0x10e>
  42f7b4:	68d2      	ldr	r2, [r2, #12]
  42f7b6:	a806      	add	r0, sp, #24
  42f7b8:	494a      	ldr	r1, [pc, #296]	@ (42f8e4 <d_print_comp_inner+0x10d0>)
  42f7ba:	f002 fff3 	bl	4327a4 <sprintf>
  42f7be:	a806      	add	r0, sp, #24
  42f7c0:	f7f1 fc04 	bl	420fcc <strlen>
  42f7c4:	2800      	cmp	r0, #0
  42f7c6:	f43f a8ac 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42f7ca:	ad06      	add	r5, sp, #24
  42f7cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f7d0:	f04f 0800 	mov.w	r8, #0
  42f7d4:	182f      	adds	r7, r5, r0
  42f7d6:	e008      	b.n	42f7ea <d_print_comp_inner+0xfd6>
  42f7d8:	3101      	adds	r1, #1
  42f7da:	42af      	cmp	r7, r5
  42f7dc:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f7e0:	54e6      	strb	r6, [r4, r3]
  42f7e2:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42f7e6:	f43f a89c 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42f7ea:	29ff      	cmp	r1, #255	@ 0xff
  42f7ec:	f815 6b01 	ldrb.w	r6, [r5], #1
  42f7f0:	460b      	mov	r3, r1
  42f7f2:	d1f1      	bne.n	42f7d8 <d_print_comp_inner+0xfc4>
  42f7f4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f7f8:	4620      	mov	r0, r4
  42f7fa:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f7fe:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f802:	4798      	blx	r3
  42f804:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f808:	2101      	movs	r1, #1
  42f80a:	3301      	adds	r3, #1
  42f80c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f810:	2300      	movs	r3, #0
  42f812:	e7e2      	b.n	42f7da <d_print_comp_inner+0xfc6>
  42f814:	4e31      	ldr	r6, [pc, #196]	@ (42f8dc <d_print_comp_inner+0x10c8>)
  42f816:	f04f 0800 	mov.w	r8, #0
  42f81a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f81e:	f106 0909 	add.w	r9, r6, #9
  42f822:	e008      	b.n	42f836 <d_print_comp_inner+0x1022>
  42f824:	3101      	adds	r1, #1
  42f826:	45b1      	cmp	r9, r6
  42f828:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42f82c:	54e5      	strb	r5, [r4, r3]
  42f82e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42f832:	f43f a904 	beq.w	42ea3e <d_print_comp_inner+0x22a>
  42f836:	29ff      	cmp	r1, #255	@ 0xff
  42f838:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42f83c:	460b      	mov	r3, r1
  42f83e:	d1f1      	bne.n	42f824 <d_print_comp_inner+0x1010>
  42f840:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42f844:	4620      	mov	r0, r4
  42f846:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42f84a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42f84e:	4798      	blx	r3
  42f850:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42f854:	2101      	movs	r1, #1
  42f856:	3301      	adds	r3, #1
  42f858:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42f85c:	2300      	movs	r3, #0
  42f85e:	e7e2      	b.n	42f826 <d_print_comp_inner+0x1012>
  42f860:	6913      	ldr	r3, [r2, #16]
  42f862:	781a      	ldrb	r2, [r3, #0]
  42f864:	2a3b      	cmp	r2, #59	@ 0x3b
  42f866:	f47f a859 	bne.w	42e91c <d_print_comp_inner+0x108>
  42f86a:	691b      	ldr	r3, [r3, #16]
  42f86c:	781b      	ldrb	r3, [r3, #0]
  42f86e:	2b3c      	cmp	r3, #60	@ 0x3c
  42f870:	f47f a854 	bne.w	42e91c <d_print_comp_inner+0x108>
  42f874:	465a      	mov	r2, fp
  42f876:	2111      	movs	r1, #17
  42f878:	f002 fb1a 	bl	431eb0 <d_maybe_print_fold_expression>
  42f87c:	2800      	cmp	r0, #0
  42f87e:	f47f a850 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42f882:	465a      	mov	r2, fp
  42f884:	2111      	movs	r1, #17
  42f886:	4620      	mov	r0, r4
  42f888:	f002 fc48 	bl	43211c <d_maybe_print_designated_init>
  42f88c:	2800      	cmp	r0, #0
  42f88e:	f47f a848 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42f892:	4915      	ldr	r1, [pc, #84]	@ (42f8e8 <d_print_comp_inner+0x10d4>)
  42f894:	e9db 8303 	ldrd	r8, r3, [fp, #12]
  42f898:	f8d8 200c 	ldr.w	r2, [r8, #12]
  42f89c:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
  42f8a0:	6810      	ldr	r0, [r2, #0]
  42f8a2:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
  42f8a6:	f7e0 fdab 	bl	410400 <strcmp>
  42f8aa:	2800      	cmp	r0, #0
  42f8ac:	f041 8212 	bne.w	430cd4 <d_print_comp_inner+0x24c0>
  42f8b0:	4632      	mov	r2, r6
  42f8b2:	4620      	mov	r0, r4
  42f8b4:	2111      	movs	r1, #17
  42f8b6:	f002 fa7f 	bl	431db8 <d_print_subexpr>
  42f8ba:	4642      	mov	r2, r8
  42f8bc:	4620      	mov	r0, r4
  42f8be:	2111      	movs	r1, #17
  42f8c0:	f002 f88a 	bl	4319d8 <d_print_expr_op>
  42f8c4:	4620      	mov	r0, r4
  42f8c6:	463a      	mov	r2, r7
  42f8c8:	2111      	movs	r1, #17
  42f8ca:	f002 fa75 	bl	431db8 <d_print_subexpr>
  42f8ce:	4907      	ldr	r1, [pc, #28]	@ (42f8ec <d_print_comp_inner+0x10d8>)
  42f8d0:	4620      	mov	r0, r4
  42f8d2:	f7fc fd5d 	bl	42c390 <d_append_string>
  42f8d6:	e69c      	b.n	42f612 <d_print_comp_inner+0xdfe>
  42f8d8:	00435423 	.word	0x00435423
  42f8dc:	00435363 	.word	0x00435363
  42f8e0:	004353b8 	.word	0x004353b8
  42f8e4:	00435144 	.word	0x00435144
  42f8e8:	0043537c 	.word	0x0043537c
  42f8ec:	00435380 	.word	0x00435380
  42f8f0:	6913      	ldr	r3, [r2, #16]
  42f8f2:	781b      	ldrb	r3, [r3, #0]
  42f8f4:	2b39      	cmp	r3, #57	@ 0x39
  42f8f6:	f47f a811 	bne.w	42e91c <d_print_comp_inner+0x108>
  42f8fa:	68d2      	ldr	r2, [r2, #12]
  42f8fc:	68d3      	ldr	r3, [r2, #12]
  42f8fe:	681b      	ldr	r3, [r3, #0]
  42f900:	7859      	ldrb	r1, [r3, #1]
  42f902:	2963      	cmp	r1, #99	@ 0x63
  42f904:	f000 87ca 	beq.w	43089c <d_print_comp_inner+0x2088>
  42f908:	465a      	mov	r2, fp
  42f90a:	2111      	movs	r1, #17
  42f90c:	4620      	mov	r0, r4
  42f90e:	f002 facf 	bl	431eb0 <d_maybe_print_fold_expression>
  42f912:	2800      	cmp	r0, #0
  42f914:	f47f a805 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42f918:	465a      	mov	r2, fp
  42f91a:	2111      	movs	r1, #17
  42f91c:	4620      	mov	r0, r4
  42f91e:	f002 fbfd 	bl	43211c <d_maybe_print_designated_init>
  42f922:	2800      	cmp	r0, #0
  42f924:	f47e affd 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42f928:	f8db 300c 	ldr.w	r3, [fp, #12]
  42f92c:	781a      	ldrb	r2, [r3, #0]
  42f92e:	2a32      	cmp	r2, #50	@ 0x32
  42f930:	f001 81a9 	beq.w	430c86 <d_print_comp_inner+0x2472>
  42f934:	68db      	ldr	r3, [r3, #12]
  42f936:	49cd      	ldr	r1, [pc, #820]	@ (42fc6c <d_print_comp_inner+0x1458>)
  42f938:	6818      	ldr	r0, [r3, #0]
  42f93a:	f7e0 fd61 	bl	410400 <strcmp>
  42f93e:	f8db 3010 	ldr.w	r3, [fp, #16]
  42f942:	68da      	ldr	r2, [r3, #12]
  42f944:	b918      	cbnz	r0, 42f94e <d_print_comp_inner+0x113a>
  42f946:	7813      	ldrb	r3, [r2, #0]
  42f948:	2b03      	cmp	r3, #3
  42f94a:	f001 81ae 	beq.w	430caa <d_print_comp_inner+0x2496>
  42f94e:	2111      	movs	r1, #17
  42f950:	4620      	mov	r0, r4
  42f952:	f002 fa31 	bl	431db8 <d_print_subexpr>
  42f956:	f8db 600c 	ldr.w	r6, [fp, #12]
  42f95a:	49c5      	ldr	r1, [pc, #788]	@ (42fc70 <d_print_comp_inner+0x145c>)
  42f95c:	68f3      	ldr	r3, [r6, #12]
  42f95e:	681f      	ldr	r7, [r3, #0]
  42f960:	4638      	mov	r0, r7
  42f962:	f7e0 fd4d 	bl	410400 <strcmp>
  42f966:	2800      	cmp	r0, #0
  42f968:	f001 817c 	beq.w	430c64 <d_print_comp_inner+0x2450>
  42f96c:	49bf      	ldr	r1, [pc, #764]	@ (42fc6c <d_print_comp_inner+0x1458>)
  42f96e:	4638      	mov	r0, r7
  42f970:	f7e0 fd46 	bl	410400 <strcmp>
  42f974:	2800      	cmp	r0, #0
  42f976:	f041 81a6 	bne.w	430cc6 <d_print_comp_inner+0x24b2>
  42f97a:	f8db 3010 	ldr.w	r3, [fp, #16]
  42f97e:	2111      	movs	r1, #17
  42f980:	4620      	mov	r0, r4
  42f982:	691a      	ldr	r2, [r3, #16]
  42f984:	f002 fa18 	bl	431db8 <d_print_subexpr>
  42f988:	f8db 300c 	ldr.w	r3, [fp, #12]
  42f98c:	781a      	ldrb	r2, [r3, #0]
  42f98e:	2a32      	cmp	r2, #50	@ 0x32
  42f990:	f47e afc7 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42f994:	68db      	ldr	r3, [r3, #12]
  42f996:	689a      	ldr	r2, [r3, #8]
  42f998:	2a01      	cmp	r2, #1
  42f99a:	f47e afc2 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42f99e:	685b      	ldr	r3, [r3, #4]
  42f9a0:	781b      	ldrb	r3, [r3, #0]
  42f9a2:	2b3e      	cmp	r3, #62	@ 0x3e
  42f9a4:	f47e afbd 	bne.w	42e922 <d_print_comp_inner+0x10e>
  42f9a8:	2129      	movs	r1, #41	@ 0x29
  42f9aa:	4620      	mov	r0, r4
  42f9ac:	b017      	add	sp, #92	@ 0x5c
  42f9ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42f9b2:	f7fc bcb1 	b.w	42c318 <d_append_char>
  42f9b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42f9ba:	29ff      	cmp	r1, #255	@ 0xff
  42f9bc:	f000 86ae 	beq.w	43071c <d_print_comp_inner+0x1f08>
  42f9c0:	1c4a      	adds	r2, r1, #1
  42f9c2:	237e      	movs	r3, #126	@ 0x7e
  42f9c4:	e419      	b.n	42f1fa <d_print_comp_inner+0x9e6>
  42f9c6:	2111      	movs	r1, #17
  42f9c8:	68d2      	ldr	r2, [r2, #12]
  42f9ca:	f001 f9e7 	bl	430d9c <d_print_comp>
  42f9ce:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f9d2:	29ff      	cmp	r1, #255	@ 0xff
  42f9d4:	f000 8680 	beq.w	4306d8 <d_print_comp_inner+0x1ec4>
  42f9d8:	1c4a      	adds	r2, r1, #1
  42f9da:	2328      	movs	r3, #40	@ 0x28
  42f9dc:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  42f9e0:	4620      	mov	r0, r4
  42f9e2:	5463      	strb	r3, [r4, r1]
  42f9e4:	2111      	movs	r1, #17
  42f9e6:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42f9ea:	f8db 2010 	ldr.w	r2, [fp, #16]
  42f9ee:	f001 f9d5 	bl	430d9c <d_print_comp>
  42f9f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42f9f6:	29ff      	cmp	r1, #255	@ 0xff
  42f9f8:	f47f aed3 	bne.w	42f7a2 <d_print_comp_inner+0xf8e>
  42f9fc:	2500      	movs	r5, #0
  42f9fe:	4620      	mov	r0, r4
  42fa00:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  42fa04:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  42fa08:	4798      	blx	r3
  42fa0a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fa0e:	2201      	movs	r2, #1
  42fa10:	4629      	mov	r1, r5
  42fa12:	4413      	add	r3, r2
  42fa14:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fa18:	e6c4      	b.n	42f7a4 <d_print_comp_inner+0xf90>
  42fa1a:	4e96      	ldr	r6, [pc, #600]	@ (42fc74 <d_print_comp_inner+0x1460>)
  42fa1c:	2111      	movs	r1, #17
  42fa1e:	68d2      	ldr	r2, [r2, #12]
  42fa20:	f04f 0800 	mov.w	r8, #0
  42fa24:	f001 f9ba 	bl	430d9c <d_print_comp>
  42fa28:	f106 0905 	add.w	r9, r6, #5
  42fa2c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42fa30:	e008      	b.n	42fa44 <d_print_comp_inner+0x1230>
  42fa32:	3101      	adds	r1, #1
  42fa34:	45b1      	cmp	r9, r6
  42fa36:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fa3a:	54e5      	strb	r5, [r4, r3]
  42fa3c:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42fa40:	f000 81fb 	beq.w	42fe3a <d_print_comp_inner+0x1626>
  42fa44:	29ff      	cmp	r1, #255	@ 0xff
  42fa46:	f816 5b01 	ldrb.w	r5, [r6], #1
  42fa4a:	460b      	mov	r3, r1
  42fa4c:	d1f1      	bne.n	42fa32 <d_print_comp_inner+0x121e>
  42fa4e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fa52:	4620      	mov	r0, r4
  42fa54:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fa58:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42fa5c:	4798      	blx	r3
  42fa5e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fa62:	2101      	movs	r1, #1
  42fa64:	3301      	adds	r3, #1
  42fa66:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fa6a:	2300      	movs	r3, #0
  42fa6c:	e7e2      	b.n	42fa34 <d_print_comp_inner+0x1220>
  42fa6e:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
  42fa72:	f8d2 a00c 	ldr.w	sl, [r2, #12]
  42fa76:	2f00      	cmp	r7, #0
  42fa78:	f040 83ac 	bne.w	4301d4 <d_print_comp_inner+0x19c0>
  42fa7c:	4651      	mov	r1, sl
  42fa7e:	f7fc fcb9 	bl	42c3f4 <d_find_pack>
  42fa82:	2800      	cmp	r0, #0
  42fa84:	f000 83a6 	beq.w	4301d4 <d_print_comp_inner+0x19c0>
  42fa88:	46bb      	mov	fp, r7
  42fa8a:	e005      	b.n	42fa98 <d_print_comp_inner+0x1284>
  42fa8c:	68c3      	ldr	r3, [r0, #12]
  42fa8e:	b133      	cbz	r3, 42fa9e <d_print_comp_inner+0x128a>
  42fa90:	6900      	ldr	r0, [r0, #16]
  42fa92:	f10b 0b01 	add.w	fp, fp, #1
  42fa96:	b130      	cbz	r0, 42faa6 <d_print_comp_inner+0x1292>
  42fa98:	7803      	ldrb	r3, [r0, #0]
  42fa9a:	2b2f      	cmp	r3, #47	@ 0x2f
  42fa9c:	d0f6      	beq.n	42fa8c <d_print_comp_inner+0x1278>
  42fa9e:	f1bb 0f00 	cmp.w	fp, #0
  42faa2:	f43e af3e 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42faa6:	f04f 0800 	mov.w	r8, #0
  42faaa:	f8c4 7124 	str.w	r7, [r4, #292]	@ 0x124
  42faae:	3701      	adds	r7, #1
  42fab0:	4652      	mov	r2, sl
  42fab2:	2111      	movs	r1, #17
  42fab4:	4620      	mov	r0, r4
  42fab6:	f001 f971 	bl	430d9c <d_print_comp>
  42faba:	455f      	cmp	r7, fp
  42fabc:	f43e af31 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42fac0:	4d6d      	ldr	r5, [pc, #436]	@ (42fc78 <d_print_comp_inner+0x1464>)
  42fac2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42fac6:	f105 0902 	add.w	r9, r5, #2
  42faca:	e007      	b.n	42fadc <d_print_comp_inner+0x12c8>
  42facc:	3101      	adds	r1, #1
  42face:	454d      	cmp	r5, r9
  42fad0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fad4:	54e6      	strb	r6, [r4, r3]
  42fad6:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42fada:	d0e6      	beq.n	42faaa <d_print_comp_inner+0x1296>
  42fadc:	29ff      	cmp	r1, #255	@ 0xff
  42fade:	f815 6b01 	ldrb.w	r6, [r5], #1
  42fae2:	460b      	mov	r3, r1
  42fae4:	d1f2      	bne.n	42facc <d_print_comp_inner+0x12b8>
  42fae6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42faea:	4620      	mov	r0, r4
  42faec:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42faf0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42faf4:	4798      	blx	r3
  42faf6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fafa:	2101      	movs	r1, #1
  42fafc:	3301      	adds	r3, #1
  42fafe:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fb02:	2300      	movs	r3, #0
  42fb04:	e7e3      	b.n	42face <d_print_comp_inner+0x12ba>
  42fb06:	4e5d      	ldr	r6, [pc, #372]	@ (42fc7c <d_print_comp_inner+0x1468>)
  42fb08:	f04f 0800 	mov.w	r8, #0
  42fb0c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42fb10:	f106 091a 	add.w	r9, r6, #26
  42fb14:	e008      	b.n	42fb28 <d_print_comp_inner+0x1314>
  42fb16:	3101      	adds	r1, #1
  42fb18:	454e      	cmp	r6, r9
  42fb1a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fb1e:	54e5      	strb	r5, [r4, r3]
  42fb20:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42fb24:	f43e af15 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42fb28:	29ff      	cmp	r1, #255	@ 0xff
  42fb2a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42fb2e:	460b      	mov	r3, r1
  42fb30:	d1f1      	bne.n	42fb16 <d_print_comp_inner+0x1302>
  42fb32:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fb36:	4620      	mov	r0, r4
  42fb38:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fb3c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42fb40:	4798      	blx	r3
  42fb42:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fb46:	2101      	movs	r1, #1
  42fb48:	3301      	adds	r3, #1
  42fb4a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fb4e:	2300      	movs	r3, #0
  42fb50:	e7e2      	b.n	42fb18 <d_print_comp_inner+0x1304>
  42fb52:	4e4b      	ldr	r6, [pc, #300]	@ (42fc80 <d_print_comp_inner+0x146c>)
  42fb54:	f04f 0800 	mov.w	r8, #0
  42fb58:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42fb5c:	f106 090e 	add.w	r9, r6, #14
  42fb60:	e008      	b.n	42fb74 <d_print_comp_inner+0x1360>
  42fb62:	3101      	adds	r1, #1
  42fb64:	454e      	cmp	r6, r9
  42fb66:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fb6a:	54e5      	strb	r5, [r4, r3]
  42fb6c:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42fb70:	f43e aeef 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42fb74:	29ff      	cmp	r1, #255	@ 0xff
  42fb76:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42fb7a:	460b      	mov	r3, r1
  42fb7c:	d1f1      	bne.n	42fb62 <d_print_comp_inner+0x134e>
  42fb7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fb82:	4620      	mov	r0, r4
  42fb84:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fb88:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42fb8c:	4798      	blx	r3
  42fb8e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fb92:	2101      	movs	r1, #1
  42fb94:	3301      	adds	r3, #1
  42fb96:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fb9a:	2300      	movs	r3, #0
  42fb9c:	e7e2      	b.n	42fb64 <d_print_comp_inner+0x1350>
  42fb9e:	4e39      	ldr	r6, [pc, #228]	@ (42fc84 <d_print_comp_inner+0x1470>)
  42fba0:	f04f 0800 	mov.w	r8, #0
  42fba4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42fba8:	f106 091d 	add.w	r9, r6, #29
  42fbac:	e008      	b.n	42fbc0 <d_print_comp_inner+0x13ac>
  42fbae:	3101      	adds	r1, #1
  42fbb0:	454e      	cmp	r6, r9
  42fbb2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fbb6:	54e5      	strb	r5, [r4, r3]
  42fbb8:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42fbbc:	f43e aec9 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42fbc0:	29ff      	cmp	r1, #255	@ 0xff
  42fbc2:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42fbc6:	460b      	mov	r3, r1
  42fbc8:	d1f1      	bne.n	42fbae <d_print_comp_inner+0x139a>
  42fbca:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fbce:	4620      	mov	r0, r4
  42fbd0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fbd4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42fbd8:	4798      	blx	r3
  42fbda:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fbde:	2101      	movs	r1, #1
  42fbe0:	3301      	adds	r3, #1
  42fbe2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fbe6:	2300      	movs	r3, #0
  42fbe8:	e7e2      	b.n	42fbb0 <d_print_comp_inner+0x139c>
  42fbea:	68d2      	ldr	r2, [r2, #12]
  42fbec:	2111      	movs	r1, #17
  42fbee:	f001 f8d5 	bl	430d9c <d_print_comp>
  42fbf2:	2111      	movs	r1, #17
  42fbf4:	f8db 2010 	ldr.w	r2, [fp, #16]
  42fbf8:	f7fe beae 	b.w	42e958 <d_print_comp_inner+0x144>
  42fbfc:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42fc00:	7b15      	ldrb	r5, [r2, #12]
  42fc02:	29ff      	cmp	r1, #255	@ 0xff
  42fc04:	f000 8176 	beq.w	42fef4 <d_print_comp_inner+0x16e0>
  42fc08:	1c4b      	adds	r3, r1, #1
  42fc0a:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  42fc0e:	5465      	strb	r5, [r4, r1]
  42fc10:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42fc14:	f7fe be85 	b.w	42e922 <d_print_comp_inner+0x10e>
  42fc18:	4e1b      	ldr	r6, [pc, #108]	@ (42fc88 <d_print_comp_inner+0x1474>)
  42fc1a:	2111      	movs	r1, #17
  42fc1c:	68d2      	ldr	r2, [r2, #12]
  42fc1e:	f04f 0800 	mov.w	r8, #0
  42fc22:	f001 f8bb 	bl	430d9c <d_print_comp>
  42fc26:	f106 0908 	add.w	r9, r6, #8
  42fc2a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42fc2e:	e008      	b.n	42fc42 <d_print_comp_inner+0x142e>
  42fc30:	3101      	adds	r1, #1
  42fc32:	45b1      	cmp	r9, r6
  42fc34:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fc38:	54e5      	strb	r5, [r4, r3]
  42fc3a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42fc3e:	f000 80fc 	beq.w	42fe3a <d_print_comp_inner+0x1626>
  42fc42:	29ff      	cmp	r1, #255	@ 0xff
  42fc44:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42fc48:	460b      	mov	r3, r1
  42fc4a:	d1f1      	bne.n	42fc30 <d_print_comp_inner+0x141c>
  42fc4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fc50:	4620      	mov	r0, r4
  42fc52:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fc56:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42fc5a:	4798      	blx	r3
  42fc5c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fc60:	2101      	movs	r1, #1
  42fc62:	3301      	adds	r3, #1
  42fc64:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fc68:	2300      	movs	r3, #0
  42fc6a:	e7e2      	b.n	42fc32 <d_print_comp_inner+0x141e>
  42fc6c:	00435374 	.word	0x00435374
  42fc70:	00435378 	.word	0x00435378
  42fc74:	004351ac 	.word	0x004351ac
  42fc78:	004351b4 	.word	0x004351b4
  42fc7c:	0043533b 	.word	0x0043533b
  42fc80:	004353a7 	.word	0x004353a7
  42fc84:	004353d7 	.word	0x004353d7
  42fc88:	00435433 	.word	0x00435433
  42fc8c:	4ec7      	ldr	r6, [pc, #796]	@ (42ffac <d_print_comp_inner+0x1798>)
  42fc8e:	f04f 0800 	mov.w	r8, #0
  42fc92:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42fc96:	f106 0916 	add.w	r9, r6, #22
  42fc9a:	e008      	b.n	42fcae <d_print_comp_inner+0x149a>
  42fc9c:	3101      	adds	r1, #1
  42fc9e:	454e      	cmp	r6, r9
  42fca0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fca4:	54e5      	strb	r5, [r4, r3]
  42fca6:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42fcaa:	f43e ae52 	beq.w	42e952 <d_print_comp_inner+0x13e>
  42fcae:	29ff      	cmp	r1, #255	@ 0xff
  42fcb0:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  42fcb4:	460b      	mov	r3, r1
  42fcb6:	d1f1      	bne.n	42fc9c <d_print_comp_inner+0x1488>
  42fcb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fcbc:	4620      	mov	r0, r4
  42fcbe:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fcc2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42fcc6:	4798      	blx	r3
  42fcc8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fccc:	2101      	movs	r1, #1
  42fcce:	3301      	adds	r3, #1
  42fcd0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fcd4:	2300      	movs	r3, #0
  42fcd6:	e7e2      	b.n	42fc9e <d_print_comp_inner+0x148a>
  42fcd8:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
  42fcdc:	2b00      	cmp	r3, #0
  42fcde:	f43e ae20 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42fce2:	442b      	add	r3, r5
  42fce4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42fce8:	3d01      	subs	r5, #1
  42fcea:	f04f 0800 	mov.w	r8, #0
  42fcee:	1e5f      	subs	r7, r3, #1
  42fcf0:	e008      	b.n	42fd04 <d_print_comp_inner+0x14f0>
  42fcf2:	3101      	adds	r1, #1
  42fcf4:	42af      	cmp	r7, r5
  42fcf6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fcfa:	54e6      	strb	r6, [r4, r3]
  42fcfc:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42fd00:	f43e ae0f 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42fd04:	29ff      	cmp	r1, #255	@ 0xff
  42fd06:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  42fd0a:	460b      	mov	r3, r1
  42fd0c:	d1f1      	bne.n	42fcf2 <d_print_comp_inner+0x14de>
  42fd0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fd12:	4620      	mov	r0, r4
  42fd14:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fd18:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42fd1c:	4798      	blx	r3
  42fd1e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fd22:	2101      	movs	r1, #1
  42fd24:	3301      	adds	r3, #1
  42fd26:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fd2a:	2300      	movs	r3, #0
  42fd2c:	e7e2      	b.n	42fcf4 <d_print_comp_inner+0x14e0>
  42fd2e:	68d2      	ldr	r2, [r2, #12]
  42fd30:	e9d2 5300 	ldrd	r5, r3, [r2]
  42fd34:	2b00      	cmp	r3, #0
  42fd36:	f43e adf4 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42fd3a:	442b      	add	r3, r5
  42fd3c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  42fd40:	3d01      	subs	r5, #1
  42fd42:	f04f 0800 	mov.w	r8, #0
  42fd46:	1e5f      	subs	r7, r3, #1
  42fd48:	e008      	b.n	42fd5c <d_print_comp_inner+0x1548>
  42fd4a:	3101      	adds	r1, #1
  42fd4c:	42af      	cmp	r7, r5
  42fd4e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fd52:	54e6      	strb	r6, [r4, r3]
  42fd54:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42fd58:	f43e ade3 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42fd5c:	29ff      	cmp	r1, #255	@ 0xff
  42fd5e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  42fd62:	460b      	mov	r3, r1
  42fd64:	d1f1      	bne.n	42fd4a <d_print_comp_inner+0x1536>
  42fd66:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fd6a:	4620      	mov	r0, r4
  42fd6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fd70:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42fd74:	4798      	blx	r3
  42fd76:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fd7a:	2101      	movs	r1, #1
  42fd7c:	3301      	adds	r3, #1
  42fd7e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fd82:	2300      	movs	r3, #0
  42fd84:	e7e2      	b.n	42fd4c <d_print_comp_inner+0x1538>
  42fd86:	498a      	ldr	r1, [pc, #552]	@ (42ffb0 <d_print_comp_inner+0x179c>)
  42fd88:	4620      	mov	r0, r4
  42fd8a:	f7fc fb01 	bl	42c390 <d_append_string>
  42fd8e:	693a      	ldr	r2, [r7, #16]
  42fd90:	4988      	ldr	r1, [pc, #544]	@ (42ffb4 <d_print_comp_inner+0x17a0>)
  42fd92:	a806      	add	r0, sp, #24
  42fd94:	3201      	adds	r2, #1
  42fd96:	f002 fd05 	bl	4327a4 <sprintf>
  42fd9a:	a806      	add	r0, sp, #24
  42fd9c:	f7f1 f916 	bl	420fcc <strlen>
  42fda0:	4681      	mov	r9, r0
  42fda2:	2800      	cmp	r0, #0
  42fda4:	f000 8490 	beq.w	4306c8 <d_print_comp_inner+0x1eb4>
  42fda8:	ad06      	add	r5, sp, #24
  42fdaa:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42fdae:	f04f 0800 	mov.w	r8, #0
  42fdb2:	44a9      	add	r9, r5
  42fdb4:	e008      	b.n	42fdc8 <d_print_comp_inner+0x15b4>
  42fdb6:	3101      	adds	r1, #1
  42fdb8:	45a9      	cmp	r9, r5
  42fdba:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fdbe:	54e6      	strb	r6, [r4, r3]
  42fdc0:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42fdc4:	f000 8480 	beq.w	4306c8 <d_print_comp_inner+0x1eb4>
  42fdc8:	29ff      	cmp	r1, #255	@ 0xff
  42fdca:	f815 6b01 	ldrb.w	r6, [r5], #1
  42fdce:	460b      	mov	r3, r1
  42fdd0:	d1f1      	bne.n	42fdb6 <d_print_comp_inner+0x15a2>
  42fdd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fdd6:	4620      	mov	r0, r4
  42fdd8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fddc:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42fde0:	4798      	blx	r3
  42fde2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fde6:	2101      	movs	r1, #1
  42fde8:	3301      	adds	r3, #1
  42fdea:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fdee:	2300      	movs	r3, #0
  42fdf0:	e7e2      	b.n	42fdb8 <d_print_comp_inner+0x15a4>
  42fdf2:	4d71      	ldr	r5, [pc, #452]	@ (42ffb8 <d_print_comp_inner+0x17a4>)
  42fdf4:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42fdf8:	f105 0a02 	add.w	sl, r5, #2
  42fdfc:	e008      	b.n	42fe10 <d_print_comp_inner+0x15fc>
  42fdfe:	3101      	adds	r1, #1
  42fe00:	45aa      	cmp	sl, r5
  42fe02:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42fe06:	54e6      	strb	r6, [r4, r3]
  42fe08:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42fe0c:	f43f aa8b 	beq.w	42f326 <d_print_comp_inner+0xb12>
  42fe10:	29ff      	cmp	r1, #255	@ 0xff
  42fe12:	f815 6b01 	ldrb.w	r6, [r5], #1
  42fe16:	460b      	mov	r3, r1
  42fe18:	d1f1      	bne.n	42fdfe <d_print_comp_inner+0x15ea>
  42fe1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fe1e:	4620      	mov	r0, r4
  42fe20:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fe24:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
  42fe28:	4798      	blx	r3
  42fe2a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fe2e:	2101      	movs	r1, #1
  42fe30:	3301      	adds	r3, #1
  42fe32:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fe36:	2300      	movs	r3, #0
  42fe38:	e7e2      	b.n	42fe00 <d_print_comp_inner+0x15ec>
  42fe3a:	2111      	movs	r1, #17
  42fe3c:	f8db 2010 	ldr.w	r2, [fp, #16]
  42fe40:	4620      	mov	r0, r4
  42fe42:	f000 ffab 	bl	430d9c <d_print_comp>
  42fe46:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42fe4a:	29ff      	cmp	r1, #255	@ 0xff
  42fe4c:	f000 824c 	beq.w	4302e8 <d_print_comp_inner+0x1ad4>
  42fe50:	1c4a      	adds	r2, r1, #1
  42fe52:	235d      	movs	r3, #93	@ 0x5d
  42fe54:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  42fe58:	5463      	strb	r3, [r4, r1]
  42fe5a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  42fe5e:	f7fe bd60 	b.w	42e922 <d_print_comp_inner+0x10e>
  42fe62:	ab06      	add	r3, sp, #24
  42fe64:	68c2      	ldr	r2, [r0, #12]
  42fe66:	f8cd c018 	str.w	ip, [sp, #24]
  42fe6a:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  42fe6e:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
  42fe72:	e9cd b607 	strd	fp, r6, [sp, #28]
  42fe76:	9309      	str	r3, [sp, #36]	@ 0x24
  42fe78:	2a00      	cmp	r2, #0
  42fe7a:	f47e ad81 	bne.w	42e980 <d_print_comp_inner+0x16c>
  42fe7e:	f7fe bd7d 	b.w	42e97c <d_print_comp_inner+0x168>
  42fe82:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
  42fe86:	a806      	add	r0, sp, #24
  42fe88:	494a      	ldr	r1, [pc, #296]	@ (42ffb4 <d_print_comp_inner+0x17a0>)
  42fe8a:	f002 fc8b 	bl	4327a4 <sprintf>
  42fe8e:	a806      	add	r0, sp, #24
  42fe90:	f7f1 f89c 	bl	420fcc <strlen>
  42fe94:	b320      	cbz	r0, 42fee0 <d_print_comp_inner+0x16cc>
  42fe96:	ae06      	add	r6, sp, #24
  42fe98:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42fe9c:	f04f 0800 	mov.w	r8, #0
  42fea0:	eb06 0900 	add.w	r9, r6, r0
  42fea4:	e007      	b.n	42feb6 <d_print_comp_inner+0x16a2>
  42fea6:	3101      	adds	r1, #1
  42fea8:	454e      	cmp	r6, r9
  42feaa:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42feae:	54e5      	strb	r5, [r4, r3]
  42feb0:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  42feb4:	d014      	beq.n	42fee0 <d_print_comp_inner+0x16cc>
  42feb6:	29ff      	cmp	r1, #255	@ 0xff
  42feb8:	f816 5b01 	ldrb.w	r5, [r6], #1
  42febc:	460b      	mov	r3, r1
  42febe:	d1f2      	bne.n	42fea6 <d_print_comp_inner+0x1692>
  42fec0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fec4:	4620      	mov	r0, r4
  42fec6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42feca:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42fece:	4798      	blx	r3
  42fed0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42fed4:	2101      	movs	r1, #1
  42fed6:	3301      	adds	r3, #1
  42fed8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fedc:	2300      	movs	r3, #0
  42fede:	e7e3      	b.n	42fea8 <d_print_comp_inner+0x1694>
  42fee0:	f89b 5012 	ldrb.w	r5, [fp, #18]
  42fee4:	2d00      	cmp	r5, #0
  42fee6:	f43e ad1c 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42feea:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42feee:	29ff      	cmp	r1, #255	@ 0xff
  42fef0:	f47f ae8a 	bne.w	42fc08 <d_print_comp_inner+0x13f4>
  42fef4:	2600      	movs	r6, #0
  42fef6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42fefa:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42fefe:	4620      	mov	r0, r4
  42ff00:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
  42ff04:	4798      	blx	r3
  42ff06:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
  42ff0a:	2301      	movs	r3, #1
  42ff0c:	4631      	mov	r1, r6
  42ff0e:	441a      	add	r2, r3
  42ff10:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
  42ff14:	e679      	b.n	42fc0a <d_print_comp_inner+0x13f6>
  42ff16:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42ff1a:	29ff      	cmp	r1, #255	@ 0xff
  42ff1c:	d198      	bne.n	42fe50 <d_print_comp_inner+0x163c>
  42ff1e:	4620      	mov	r0, r4
  42ff20:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
  42ff24:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  42ff28:	4798      	blx	r3
  42ff2a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ff2e:	2201      	movs	r2, #1
  42ff30:	4639      	mov	r1, r7
  42ff32:	4413      	add	r3, r2
  42ff34:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42ff38:	e78b      	b.n	42fe52 <d_print_comp_inner+0x163e>
  42ff3a:	2111      	movs	r1, #17
  42ff3c:	f8db 200c 	ldr.w	r2, [fp, #12]
  42ff40:	4620      	mov	r0, r4
  42ff42:	f000 ff2b 	bl	430d9c <d_print_comp>
  42ff46:	491d      	ldr	r1, [pc, #116]	@ (42ffbc <d_print_comp_inner+0x17a8>)
  42ff48:	f7ff ba66 	b.w	42f418 <d_print_comp_inner+0xc04>
  42ff4c:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
  42ff50:	b133      	cbz	r3, 42ff60 <d_print_comp_inner+0x174c>
  42ff52:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
  42ff56:	aa06      	add	r2, sp, #24
  42ff58:	e9cd 1306 	strd	r1, r3, [sp, #24]
  42ff5c:	f8c4 2110 	str.w	r2, [r4, #272]	@ 0x110
  42ff60:	f8db 200c 	ldr.w	r2, [fp, #12]
  42ff64:	7813      	ldrb	r3, [r2, #0]
  42ff66:	2b04      	cmp	r3, #4
  42ff68:	f000 81cd 	beq.w	430306 <d_print_comp_inner+0x1af2>
  42ff6c:	2111      	movs	r1, #17
  42ff6e:	4620      	mov	r0, r4
  42ff70:	f000 ff14 	bl	430d9c <d_print_comp>
  42ff74:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
  42ff78:	2b00      	cmp	r3, #0
  42ff7a:	f43e acd2 	beq.w	42e922 <d_print_comp_inner+0x10e>
  42ff7e:	9b06      	ldr	r3, [sp, #24]
  42ff80:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  42ff84:	f7fe bccd 	b.w	42e922 <d_print_comp_inner+0x10e>
  42ff88:	f8db 200c 	ldr.w	r2, [fp, #12]
  42ff8c:	a806      	add	r0, sp, #24
  42ff8e:	4909      	ldr	r1, [pc, #36]	@ (42ffb4 <d_print_comp_inner+0x17a0>)
  42ff90:	3201      	adds	r2, #1
  42ff92:	f002 fc07 	bl	4327a4 <sprintf>
  42ff96:	a806      	add	r0, sp, #24
  42ff98:	f7f1 f818 	bl	420fcc <strlen>
  42ff9c:	b368      	cbz	r0, 42fffa <d_print_comp_inner+0x17e6>
  42ff9e:	ad06      	add	r5, sp, #24
  42ffa0:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42ffa4:	f04f 0800 	mov.w	r8, #0
  42ffa8:	182f      	adds	r7, r5, r0
  42ffaa:	e011      	b.n	42ffd0 <d_print_comp_inner+0x17bc>
  42ffac:	0043533f 	.word	0x0043533f
  42ffb0:	004351bc 	.word	0x004351bc
  42ffb4:	00435144 	.word	0x00435144
  42ffb8:	004351b4 	.word	0x004351b4
  42ffbc:	00435458 	.word	0x00435458
  42ffc0:	3101      	adds	r1, #1
  42ffc2:	42bd      	cmp	r5, r7
  42ffc4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  42ffc8:	54e6      	strb	r6, [r4, r3]
  42ffca:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  42ffce:	d016      	beq.n	42fffe <d_print_comp_inner+0x17ea>
  42ffd0:	29ff      	cmp	r1, #255	@ 0xff
  42ffd2:	f815 6b01 	ldrb.w	r6, [r5], #1
  42ffd6:	460b      	mov	r3, r1
  42ffd8:	d1f2      	bne.n	42ffc0 <d_print_comp_inner+0x17ac>
  42ffda:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  42ffde:	4620      	mov	r0, r4
  42ffe0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  42ffe4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  42ffe8:	4798      	blx	r3
  42ffea:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  42ffee:	2101      	movs	r1, #1
  42fff0:	3301      	adds	r3, #1
  42fff2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  42fff6:	2300      	movs	r3, #0
  42fff8:	e7e3      	b.n	42ffc2 <d_print_comp_inner+0x17ae>
  42fffa:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  42fffe:	29ff      	cmp	r1, #255	@ 0xff
  430000:	f47f ab59 	bne.w	42f6b6 <d_print_comp_inner+0xea2>
  430004:	2500      	movs	r5, #0
  430006:	4620      	mov	r0, r4
  430008:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  43000c:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  430010:	4798      	blx	r3
  430012:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430016:	2201      	movs	r2, #1
  430018:	4629      	mov	r1, r5
  43001a:	4413      	add	r3, r2
  43001c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430020:	f7ff bb4a 	b.w	42f6b8 <d_print_comp_inner+0xea4>
  430024:	f8db 2010 	ldr.w	r2, [fp, #16]
  430028:	4630      	mov	r0, r6
  43002a:	49ca      	ldr	r1, [pc, #808]	@ (430354 <d_print_comp_inner+0x1b40>)
  43002c:	3201      	adds	r2, #1
  43002e:	f002 fbb9 	bl	4327a4 <sprintf>
  430032:	4630      	mov	r0, r6
  430034:	f7f0 ffca 	bl	420fcc <strlen>
  430038:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  43003c:	2800      	cmp	r0, #0
  43003e:	d0de      	beq.n	42fffe <d_print_comp_inner+0x17ea>
  430040:	f04f 0800 	mov.w	r8, #0
  430044:	1837      	adds	r7, r6, r0
  430046:	e007      	b.n	430058 <d_print_comp_inner+0x1844>
  430048:	3101      	adds	r1, #1
  43004a:	42be      	cmp	r6, r7
  43004c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  430050:	54e5      	strb	r5, [r4, r3]
  430052:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  430056:	d0d2      	beq.n	42fffe <d_print_comp_inner+0x17ea>
  430058:	29ff      	cmp	r1, #255	@ 0xff
  43005a:	f816 5b01 	ldrb.w	r5, [r6], #1
  43005e:	460b      	mov	r3, r1
  430060:	d1f2      	bne.n	430048 <d_print_comp_inner+0x1834>
  430062:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430066:	4620      	mov	r0, r4
  430068:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  43006c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  430070:	4798      	blx	r3
  430072:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430076:	2101      	movs	r1, #1
  430078:	3301      	adds	r3, #1
  43007a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43007e:	2300      	movs	r3, #0
  430080:	e7e3      	b.n	43004a <d_print_comp_inner+0x1836>
  430082:	4eb5      	ldr	r6, [pc, #724]	@ (430358 <d_print_comp_inner+0x1b44>)
  430084:	2111      	movs	r1, #17
  430086:	f8db 200c 	ldr.w	r2, [fp, #12]
  43008a:	4620      	mov	r0, r4
  43008c:	f000 fe86 	bl	430d9c <d_print_comp>
  430090:	f106 0904 	add.w	r9, r6, #4
  430094:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  430098:	f04f 0800 	mov.w	r8, #0
  43009c:	e008      	b.n	4300b0 <d_print_comp_inner+0x189c>
  43009e:	3101      	adds	r1, #1
  4300a0:	45b1      	cmp	r9, r6
  4300a2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  4300a6:	54e5      	strb	r5, [r4, r3]
  4300a8:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  4300ac:	f43e acc7 	beq.w	42ea3e <d_print_comp_inner+0x22a>
  4300b0:	29ff      	cmp	r1, #255	@ 0xff
  4300b2:	f816 5b01 	ldrb.w	r5, [r6], #1
  4300b6:	460b      	mov	r3, r1
  4300b8:	d1f1      	bne.n	43009e <d_print_comp_inner+0x188a>
  4300ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4300be:	4620      	mov	r0, r4
  4300c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4300c4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  4300c8:	4798      	blx	r3
  4300ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4300ce:	2101      	movs	r1, #1
  4300d0:	3301      	adds	r3, #1
  4300d2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4300d6:	2300      	movs	r3, #0
  4300d8:	e7e2      	b.n	4300a0 <d_print_comp_inner+0x188c>
  4300da:	4ea0      	ldr	r6, [pc, #640]	@ (43035c <d_print_comp_inner+0x1b48>)
  4300dc:	2111      	movs	r1, #17
  4300de:	f8db 2010 	ldr.w	r2, [fp, #16]
  4300e2:	4620      	mov	r0, r4
  4300e4:	f000 fe5a 	bl	430d9c <d_print_comp>
  4300e8:	f106 0905 	add.w	r9, r6, #5
  4300ec:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  4300f0:	f04f 0800 	mov.w	r8, #0
  4300f4:	e008      	b.n	430108 <d_print_comp_inner+0x18f4>
  4300f6:	3101      	adds	r1, #1
  4300f8:	45b1      	cmp	r9, r6
  4300fa:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  4300fe:	54e5      	strb	r5, [r4, r3]
  430100:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  430104:	f43e ac25 	beq.w	42e952 <d_print_comp_inner+0x13e>
  430108:	29ff      	cmp	r1, #255	@ 0xff
  43010a:	f816 5b01 	ldrb.w	r5, [r6], #1
  43010e:	460b      	mov	r3, r1
  430110:	d1f1      	bne.n	4300f6 <d_print_comp_inner+0x18e2>
  430112:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430116:	4620      	mov	r0, r4
  430118:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  43011c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  430120:	4798      	blx	r3
  430122:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430126:	2101      	movs	r1, #1
  430128:	3301      	adds	r3, #1
  43012a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43012e:	2300      	movs	r3, #0
  430130:	e7e2      	b.n	4300f8 <d_print_comp_inner+0x18e4>
  430132:	f8d9 5004 	ldr.w	r5, [r9, #4]
  430136:	782b      	ldrb	r3, [r5, #0]
  430138:	3b61      	subs	r3, #97	@ 0x61
  43013a:	2b19      	cmp	r3, #25
  43013c:	f240 8178 	bls.w	430430 <d_print_comp_inner+0x1c1c>
  430140:	f10a 37ff 	add.w	r7, sl, #4294967295	@ 0xffffffff
  430144:	5deb      	ldrb	r3, [r5, r7]
  430146:	2b20      	cmp	r3, #32
  430148:	bf18      	it	ne
  43014a:	4657      	movne	r7, sl
  43014c:	2f00      	cmp	r7, #0
  43014e:	f43e abe8 	beq.w	42e922 <d_print_comp_inner+0x10e>
  430152:	3d01      	subs	r5, #1
  430154:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  430158:	f04f 0800 	mov.w	r8, #0
  43015c:	442f      	add	r7, r5
  43015e:	e008      	b.n	430172 <d_print_comp_inner+0x195e>
  430160:	3101      	adds	r1, #1
  430162:	42bd      	cmp	r5, r7
  430164:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  430168:	54e6      	strb	r6, [r4, r3]
  43016a:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  43016e:	f43e abd8 	beq.w	42e922 <d_print_comp_inner+0x10e>
  430172:	29ff      	cmp	r1, #255	@ 0xff
  430174:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  430178:	460b      	mov	r3, r1
  43017a:	d1f1      	bne.n	430160 <d_print_comp_inner+0x194c>
  43017c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430180:	4620      	mov	r0, r4
  430182:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  430186:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  43018a:	4798      	blx	r3
  43018c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430190:	2101      	movs	r1, #1
  430192:	3301      	adds	r3, #1
  430194:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430198:	2300      	movs	r3, #0
  43019a:	e7e2      	b.n	430162 <d_print_comp_inner+0x194e>
  43019c:	465a      	mov	r2, fp
  43019e:	2111      	movs	r1, #17
  4301a0:	4620      	mov	r0, r4
  4301a2:	f000 fe29 	bl	430df8 <d_print_mod>
  4301a6:	f7fe bbf3 	b.w	42e990 <d_print_comp_inner+0x17c>
  4301aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  4301ae:	29ff      	cmp	r1, #255	@ 0xff
  4301b0:	f101 0301 	add.w	r3, r1, #1
  4301b4:	f000 83e1 	beq.w	43097a <d_print_comp_inner+0x2166>
  4301b8:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  4301bc:	4620      	mov	r0, r4
  4301be:	f804 8001 	strb.w	r8, [r4, r1]
  4301c2:	2111      	movs	r1, #17
  4301c4:	f855 2c0c 	ldr.w	r2, [r5, #-12]
  4301c8:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
  4301cc:	f000 fe14 	bl	430df8 <d_print_mod>
  4301d0:	f7ff b9ae 	b.w	42f530 <d_print_comp_inner+0xd1c>
  4301d4:	2111      	movs	r1, #17
  4301d6:	4652      	mov	r2, sl
  4301d8:	4620      	mov	r0, r4
  4301da:	f001 fded 	bl	431db8 <d_print_subexpr>
  4301de:	4960      	ldr	r1, [pc, #384]	@ (430360 <d_print_comp_inner+0x1b4c>)
  4301e0:	f7ff b91a 	b.w	42f418 <d_print_comp_inner+0xc04>
  4301e4:	2a01      	cmp	r2, #1
  4301e6:	f63f a97f 	bhi.w	42f4e8 <d_print_comp_inner+0xcd4>
  4301ea:	68ed      	ldr	r5, [r5, #12]
  4301ec:	4672      	mov	r2, lr
  4301ee:	2d00      	cmp	r5, #0
  4301f0:	f000 85b3 	beq.w	430d5a <d_print_comp_inner+0x2546>
  4301f4:	2f04      	cmp	r7, #4
  4301f6:	f103 0310 	add.w	r3, r3, #16
  4301fa:	46bc      	mov	ip, r7
  4301fc:	f47f a95f 	bne.w	42f4be <d_print_comp_inner+0xcaa>
  430200:	2301      	movs	r3, #1
  430202:	e9c4 e345 	strd	lr, r3, [r4, #276]	@ 0x114
  430206:	f7fe bb8c 	b.w	42e922 <d_print_comp_inner+0x10e>
  43020a:	2e2f      	cmp	r6, #47	@ 0x2f
  43020c:	464f      	mov	r7, r9
  43020e:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
  430212:	f47e ac4f 	bne.w	42eab4 <d_print_comp_inner+0x2a0>
  430216:	68c2      	ldr	r2, [r0, #12]
  430218:	4683      	mov	fp, r0
  43021a:	f7fe bc4b 	b.w	42eab4 <d_print_comp_inner+0x2a0>
  43021e:	2b00      	cmp	r3, #0
  430220:	f000 811b 	beq.w	43045a <d_print_comp_inner+0x1c46>
  430224:	4e4f      	ldr	r6, [pc, #316]	@ (430364 <d_print_comp_inner+0x1b50>)
  430226:	f04f 0800 	mov.w	r8, #0
  43022a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  43022e:	f106 0905 	add.w	r9, r6, #5
  430232:	e008      	b.n	430246 <d_print_comp_inner+0x1a32>
  430234:	3101      	adds	r1, #1
  430236:	45b1      	cmp	r9, r6
  430238:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43023c:	54e5      	strb	r5, [r4, r3]
  43023e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
  430242:	f000 812b 	beq.w	43049c <d_print_comp_inner+0x1c88>
  430246:	29ff      	cmp	r1, #255	@ 0xff
  430248:	f816 5b01 	ldrb.w	r5, [r6], #1
  43024c:	460b      	mov	r3, r1
  43024e:	d1f1      	bne.n	430234 <d_print_comp_inner+0x1a20>
  430250:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430254:	4620      	mov	r0, r4
  430256:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  43025a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  43025e:	4798      	blx	r3
  430260:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430264:	2101      	movs	r1, #1
  430266:	3301      	adds	r3, #1
  430268:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43026c:	2300      	movs	r3, #0
  43026e:	e7e2      	b.n	430236 <d_print_comp_inner+0x1a22>
  430270:	493d      	ldr	r1, [pc, #244]	@ (430368 <d_print_comp_inner+0x1b54>)
  430272:	f7fc f88d 	bl	42c390 <d_append_string>
  430276:	462a      	mov	r2, r5
  430278:	4936      	ldr	r1, [pc, #216]	@ (430354 <d_print_comp_inner+0x1b40>)
  43027a:	a806      	add	r0, sp, #24
  43027c:	f002 fa92 	bl	4327a4 <sprintf>
  430280:	a806      	add	r0, sp, #24
  430282:	f7f0 fea3 	bl	420fcc <strlen>
  430286:	b318      	cbz	r0, 4302d0 <d_print_comp_inner+0x1abc>
  430288:	ad06      	add	r5, sp, #24
  43028a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  43028e:	f04f 0800 	mov.w	r8, #0
  430292:	182f      	adds	r7, r5, r0
  430294:	e007      	b.n	4302a6 <d_print_comp_inner+0x1a92>
  430296:	3101      	adds	r1, #1
  430298:	42af      	cmp	r7, r5
  43029a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43029e:	54e6      	strb	r6, [r4, r3]
  4302a0:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  4302a4:	d014      	beq.n	4302d0 <d_print_comp_inner+0x1abc>
  4302a6:	29ff      	cmp	r1, #255	@ 0xff
  4302a8:	f815 6b01 	ldrb.w	r6, [r5], #1
  4302ac:	460b      	mov	r3, r1
  4302ae:	d1f2      	bne.n	430296 <d_print_comp_inner+0x1a82>
  4302b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4302b4:	4620      	mov	r0, r4
  4302b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4302ba:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  4302be:	4798      	blx	r3
  4302c0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4302c4:	2101      	movs	r1, #1
  4302c6:	3301      	adds	r3, #1
  4302c8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4302cc:	2300      	movs	r3, #0
  4302ce:	e7e3      	b.n	430298 <d_print_comp_inner+0x1a84>
  4302d0:	217d      	movs	r1, #125	@ 0x7d
  4302d2:	f7ff bb6a 	b.w	42f9aa <d_print_comp_inner+0x1196>
  4302d6:	2700      	movs	r7, #0
  4302d8:	f7fe bb8d 	b.w	42e9f6 <d_print_comp_inner+0x1e2>
  4302dc:	2e54      	cmp	r6, #84	@ 0x54
  4302de:	f47e abae 	bne.w	42ea3e <d_print_comp_inner+0x22a>
  4302e2:	263a      	movs	r6, #58	@ 0x3a
  4302e4:	f7fe bbbf 	b.w	42ea66 <d_print_comp_inner+0x252>
  4302e8:	2500      	movs	r5, #0
  4302ea:	4620      	mov	r0, r4
  4302ec:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  4302f0:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  4302f4:	4798      	blx	r3
  4302f6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4302fa:	2201      	movs	r2, #1
  4302fc:	4629      	mov	r1, r5
  4302fe:	4413      	add	r3, r2
  430300:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430304:	e5a5      	b.n	42fe52 <d_print_comp_inner+0x163e>
  430306:	68d2      	ldr	r2, [r2, #12]
  430308:	2111      	movs	r1, #17
  43030a:	4620      	mov	r0, r4
  43030c:	f000 fd46 	bl	430d9c <d_print_comp>
  430310:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
  430314:	b113      	cbz	r3, 43031c <d_print_comp_inner+0x1b08>
  430316:	9b06      	ldr	r3, [sp, #24]
  430318:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  43031c:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
  430320:	2b3c      	cmp	r3, #60	@ 0x3c
  430322:	f000 843c 	beq.w	430b9e <d_print_comp_inner+0x238a>
  430326:	213c      	movs	r1, #60	@ 0x3c
  430328:	4620      	mov	r0, r4
  43032a:	f7fb fff5 	bl	42c318 <d_append_char>
  43032e:	f8db 300c 	ldr.w	r3, [fp, #12]
  430332:	2111      	movs	r1, #17
  430334:	4620      	mov	r0, r4
  430336:	691a      	ldr	r2, [r3, #16]
  430338:	f000 fd30 	bl	430d9c <d_print_comp>
  43033c:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
  430340:	2b3e      	cmp	r3, #62	@ 0x3e
  430342:	f000 8426 	beq.w	430b92 <d_print_comp_inner+0x237e>
  430346:	213e      	movs	r1, #62	@ 0x3e
  430348:	4620      	mov	r0, r4
  43034a:	f7fb ffe5 	bl	42c318 <d_append_char>
  43034e:	f7fe bae8 	b.w	42e922 <d_print_comp_inner+0x10e>
  430352:	bf00      	nop
  430354:	00435144 	.word	0x00435144
  430358:	00435244 	.word	0x00435244
  43035c:	00435308 	.word	0x00435308
  430360:	004353c4 	.word	0x004353c4
  430364:	004351d0 	.word	0x004351d0
  430368:	004353d0 	.word	0x004353d0
  43036c:	68f3      	ldr	r3, [r6, #12]
  43036e:	681f      	ldr	r7, [r3, #0]
  430370:	783b      	ldrb	r3, [r7, #0]
  430372:	f1b3 0261 	subs.w	r2, r3, #97	@ 0x61
  430376:	d103      	bne.n	430380 <d_print_comp_inner+0x1b6c>
  430378:	787a      	ldrb	r2, [r7, #1]
  43037a:	3a64      	subs	r2, #100	@ 0x64
  43037c:	bf08      	it	eq
  43037e:	78ba      	ldrbeq	r2, [r7, #2]
  430380:	7829      	ldrb	r1, [r5, #0]
  430382:	b912      	cbnz	r2, 43038a <d_print_comp_inner+0x1b76>
  430384:	2903      	cmp	r1, #3
  430386:	f000 843c 	beq.w	430c02 <d_print_comp_inner+0x23ee>
  43038a:	2939      	cmp	r1, #57	@ 0x39
  43038c:	f000 8451 	beq.w	430c32 <d_print_comp_inner+0x241e>
  430390:	2b73      	cmp	r3, #115	@ 0x73
  430392:	d11f      	bne.n	4303d4 <d_print_comp_inner+0x1bc0>
  430394:	787a      	ldrb	r2, [r7, #1]
  430396:	2a5a      	cmp	r2, #90	@ 0x5a
  430398:	f040 83b6 	bne.w	430b08 <d_print_comp_inner+0x22f4>
  43039c:	f897 8002 	ldrb.w	r8, [r7, #2]
  4303a0:	f1b8 0f00 	cmp.w	r8, #0
  4303a4:	f040 83b0 	bne.w	430b08 <d_print_comp_inner+0x22f4>
  4303a8:	4629      	mov	r1, r5
  4303aa:	4620      	mov	r0, r4
  4303ac:	f7fc f822 	bl	42c3f4 <d_find_pack>
  4303b0:	b930      	cbnz	r0, 4303c0 <d_print_comp_inner+0x1bac>
  4303b2:	e008      	b.n	4303c6 <d_print_comp_inner+0x1bb2>
  4303b4:	68c3      	ldr	r3, [r0, #12]
  4303b6:	b133      	cbz	r3, 4303c6 <d_print_comp_inner+0x1bb2>
  4303b8:	6900      	ldr	r0, [r0, #16]
  4303ba:	f108 0801 	add.w	r8, r8, #1
  4303be:	b110      	cbz	r0, 4303c6 <d_print_comp_inner+0x1bb2>
  4303c0:	7803      	ldrb	r3, [r0, #0]
  4303c2:	2b2f      	cmp	r3, #47	@ 0x2f
  4303c4:	d0f6      	beq.n	4303b4 <d_print_comp_inner+0x1ba0>
  4303c6:	4641      	mov	r1, r8
  4303c8:	4620      	mov	r0, r4
  4303ca:	b017      	add	sp, #92	@ 0x5c
  4303cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4303d0:	f7fc b89a 	b.w	42c508 <d_append_num>
  4303d4:	4632      	mov	r2, r6
  4303d6:	2111      	movs	r1, #17
  4303d8:	4620      	mov	r0, r4
  4303da:	f001 fafd 	bl	4319d8 <d_print_expr_op>
  4303de:	783b      	ldrb	r3, [r7, #0]
  4303e0:	2b67      	cmp	r3, #103	@ 0x67
  4303e2:	d107      	bne.n	4303f4 <d_print_comp_inner+0x1be0>
  4303e4:	787a      	ldrb	r2, [r7, #1]
  4303e6:	2a73      	cmp	r2, #115	@ 0x73
  4303e8:	d104      	bne.n	4303f4 <d_print_comp_inner+0x1be0>
  4303ea:	78ba      	ldrb	r2, [r7, #2]
  4303ec:	b912      	cbnz	r2, 4303f4 <d_print_comp_inner+0x1be0>
  4303ee:	462a      	mov	r2, r5
  4303f0:	f7fe bab1 	b.w	42e956 <d_print_comp_inner+0x142>
  4303f4:	2b73      	cmp	r3, #115	@ 0x73
  4303f6:	f47f a90c 	bne.w	42f612 <d_print_comp_inner+0xdfe>
  4303fa:	787b      	ldrb	r3, [r7, #1]
  4303fc:	2b74      	cmp	r3, #116	@ 0x74
  4303fe:	f47f a908 	bne.w	42f612 <d_print_comp_inner+0xdfe>
  430402:	78bb      	ldrb	r3, [r7, #2]
  430404:	2b00      	cmp	r3, #0
  430406:	f47f a904 	bne.w	42f612 <d_print_comp_inner+0xdfe>
  43040a:	2128      	movs	r1, #40	@ 0x28
  43040c:	4620      	mov	r0, r4
  43040e:	f7fb ff83 	bl	42c318 <d_append_char>
  430412:	2111      	movs	r1, #17
  430414:	462a      	mov	r2, r5
  430416:	4620      	mov	r0, r4
  430418:	f000 fcc0 	bl	430d9c <d_print_comp>
  43041c:	2129      	movs	r1, #41	@ 0x29
  43041e:	f7ff bac4 	b.w	42f9aa <d_print_comp_inner+0x1196>
  430422:	465a      	mov	r2, fp
  430424:	2111      	movs	r1, #17
  430426:	4620      	mov	r0, r4
  430428:	f000 fce6 	bl	430df8 <d_print_mod>
  43042c:	f7fe bace 	b.w	42e9cc <d_print_comp_inner+0x1b8>
  430430:	2120      	movs	r1, #32
  430432:	4620      	mov	r0, r4
  430434:	f7fb ff70 	bl	42c318 <d_append_char>
  430438:	f8d9 5004 	ldr.w	r5, [r9, #4]
  43043c:	e680      	b.n	430140 <d_print_comp_inner+0x192c>
  43043e:	2128      	movs	r1, #40	@ 0x28
  430440:	f7fb ff6a 	bl	42c318 <d_append_char>
  430444:	4620      	mov	r0, r4
  430446:	2111      	movs	r1, #17
  430448:	68f2      	ldr	r2, [r6, #12]
  43044a:	f000 fca7 	bl	430d9c <d_print_comp>
  43044e:	2129      	movs	r1, #41	@ 0x29
  430450:	4620      	mov	r0, r4
  430452:	f7fb ff61 	bl	42c318 <d_append_char>
  430456:	f7ff b8dc 	b.w	42f612 <d_print_comp_inner+0xdfe>
  43045a:	4659      	mov	r1, fp
  43045c:	f7fb ff7e 	bl	42c35c <d_lookup_template_argument>
  430460:	4602      	mov	r2, r0
  430462:	2800      	cmp	r0, #0
  430464:	f43e aa5a 	beq.w	42e91c <d_print_comp_inner+0x108>
  430468:	7803      	ldrb	r3, [r0, #0]
  43046a:	2b2f      	cmp	r3, #47	@ 0x2f
  43046c:	d109      	bne.n	430482 <d_print_comp_inner+0x1c6e>
  43046e:	f8d4 1124 	ldr.w	r1, [r4, #292]	@ 0x124
  430472:	2900      	cmp	r1, #0
  430474:	db05      	blt.n	430482 <d_print_comp_inner+0x1c6e>
  430476:	f7fb fedd 	bl	42c234 <d_index_template_argument.part.0>
  43047a:	4602      	mov	r2, r0
  43047c:	2800      	cmp	r0, #0
  43047e:	f43e aa4d 	beq.w	42e91c <d_print_comp_inner+0x108>
  430482:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
  430486:	2111      	movs	r1, #17
  430488:	4620      	mov	r0, r4
  43048a:	682b      	ldr	r3, [r5, #0]
  43048c:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  430490:	f000 fc84 	bl	430d9c <d_print_comp>
  430494:	f8c4 5110 	str.w	r5, [r4, #272]	@ 0x110
  430498:	f7fe ba43 	b.w	42e922 <d_print_comp_inner+0x10e>
  43049c:	f8db 200c 	ldr.w	r2, [fp, #12]
  4304a0:	a806      	add	r0, sp, #24
  4304a2:	49d7      	ldr	r1, [pc, #860]	@ (430800 <d_print_comp_inner+0x1fec>)
  4304a4:	3201      	adds	r2, #1
  4304a6:	f002 f97d 	bl	4327a4 <sprintf>
  4304aa:	a806      	add	r0, sp, #24
  4304ac:	f7f0 fd8e 	bl	420fcc <strlen>
  4304b0:	4607      	mov	r7, r0
  4304b2:	2800      	cmp	r0, #0
  4304b4:	f43e aa35 	beq.w	42e922 <d_print_comp_inner+0x10e>
  4304b8:	ad06      	add	r5, sp, #24
  4304ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  4304be:	f04f 0800 	mov.w	r8, #0
  4304c2:	442f      	add	r7, r5
  4304c4:	e008      	b.n	4304d8 <d_print_comp_inner+0x1cc4>
  4304c6:	3101      	adds	r1, #1
  4304c8:	42af      	cmp	r7, r5
  4304ca:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  4304ce:	54e6      	strb	r6, [r4, r3]
  4304d0:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  4304d4:	f43e aa25 	beq.w	42e922 <d_print_comp_inner+0x10e>
  4304d8:	29ff      	cmp	r1, #255	@ 0xff
  4304da:	f815 6b01 	ldrb.w	r6, [r5], #1
  4304de:	460b      	mov	r3, r1
  4304e0:	d1f1      	bne.n	4304c6 <d_print_comp_inner+0x1cb2>
  4304e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4304e6:	4620      	mov	r0, r4
  4304e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4304ec:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  4304f0:	4798      	blx	r3
  4304f2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4304f6:	2101      	movs	r1, #1
  4304f8:	3301      	adds	r3, #1
  4304fa:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4304fe:	2300      	movs	r3, #0
  430500:	e7e2      	b.n	4304c8 <d_print_comp_inner+0x1cb4>
  430502:	2b00      	cmp	r3, #0
  430504:	f43e aa0a 	beq.w	42e91c <d_print_comp_inner+0x108>
  430508:	781a      	ldrb	r2, [r3, #0]
  43050a:	2a5b      	cmp	r2, #91	@ 0x5b
  43050c:	d104      	bne.n	430518 <d_print_comp_inner+0x1d04>
  43050e:	68db      	ldr	r3, [r3, #12]
  430510:	2b00      	cmp	r3, #0
  430512:	f43e aa03 	beq.w	42e91c <d_print_comp_inner+0x108>
  430516:	781a      	ldrb	r2, [r3, #0]
  430518:	3a58      	subs	r2, #88	@ 0x58
  43051a:	2a02      	cmp	r2, #2
  43051c:	d932      	bls.n	430584 <d_print_comp_inner+0x1d70>
  43051e:	2301      	movs	r3, #1
  430520:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
  430524:	463a      	mov	r2, r7
  430526:	49b6      	ldr	r1, [pc, #728]	@ (430800 <d_print_comp_inner+0x1fec>)
  430528:	a806      	add	r0, sp, #24
  43052a:	f002 f93b 	bl	4327a4 <sprintf>
  43052e:	a806      	add	r0, sp, #24
  430530:	f7f0 fd4c 	bl	420fcc <strlen>
  430534:	2800      	cmp	r0, #0
  430536:	f43e a9f4 	beq.w	42e922 <d_print_comp_inner+0x10e>
  43053a:	ad06      	add	r5, sp, #24
  43053c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  430540:	f04f 0800 	mov.w	r8, #0
  430544:	182f      	adds	r7, r5, r0
  430546:	e008      	b.n	43055a <d_print_comp_inner+0x1d46>
  430548:	3101      	adds	r1, #1
  43054a:	42af      	cmp	r7, r5
  43054c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  430550:	54e6      	strb	r6, [r4, r3]
  430552:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  430556:	f43e a9e4 	beq.w	42e922 <d_print_comp_inner+0x10e>
  43055a:	29ff      	cmp	r1, #255	@ 0xff
  43055c:	f815 6b01 	ldrb.w	r6, [r5], #1
  430560:	460b      	mov	r3, r1
  430562:	d1f1      	bne.n	430548 <d_print_comp_inner+0x1d34>
  430564:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430568:	4620      	mov	r0, r4
  43056a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  43056e:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  430572:	4798      	blx	r3
  430574:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430578:	2101      	movs	r1, #1
  43057a:	3301      	adds	r3, #1
  43057c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430580:	2300      	movs	r3, #0
  430582:	e7e2      	b.n	43054a <d_print_comp_inner+0x1d36>
  430584:	4b9f      	ldr	r3, [pc, #636]	@ (430804 <d_print_comp_inner+0x1ff0>)
  430586:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
  43058a:	4628      	mov	r0, r5
  43058c:	f7f0 fd1e 	bl	420fcc <strlen>
  430590:	2800      	cmp	r0, #0
  430592:	d0c7      	beq.n	430524 <d_print_comp_inner+0x1d10>
  430594:	3d01      	subs	r5, #1
  430596:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  43059a:	f04f 0800 	mov.w	r8, #0
  43059e:	eb05 0900 	add.w	r9, r5, r0
  4305a2:	e007      	b.n	4305b4 <d_print_comp_inner+0x1da0>
  4305a4:	3101      	adds	r1, #1
  4305a6:	45a9      	cmp	r9, r5
  4305a8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  4305ac:	54e6      	strb	r6, [r4, r3]
  4305ae:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  4305b2:	d0b7      	beq.n	430524 <d_print_comp_inner+0x1d10>
  4305b4:	29ff      	cmp	r1, #255	@ 0xff
  4305b6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  4305ba:	460b      	mov	r3, r1
  4305bc:	d1f2      	bne.n	4305a4 <d_print_comp_inner+0x1d90>
  4305be:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4305c2:	4620      	mov	r0, r4
  4305c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4305c8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  4305cc:	4798      	blx	r3
  4305ce:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4305d2:	2101      	movs	r1, #1
  4305d4:	3301      	adds	r3, #1
  4305d6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4305da:	2300      	movs	r3, #0
  4305dc:	e7e3      	b.n	4305a6 <d_print_comp_inner+0x1d92>
  4305de:	2f07      	cmp	r7, #7
  4305e0:	f47e aa09 	bne.w	42e9f6 <d_print_comp_inner+0x1e2>
  4305e4:	f8db 3010 	ldr.w	r3, [fp, #16]
  4305e8:	7819      	ldrb	r1, [r3, #0]
  4305ea:	2900      	cmp	r1, #0
  4305ec:	f47e aa03 	bne.w	42e9f6 <d_print_comp_inner+0x1e2>
  4305f0:	6919      	ldr	r1, [r3, #16]
  4305f2:	2901      	cmp	r1, #1
  4305f4:	f47e a9ff 	bne.w	42e9f6 <d_print_comp_inner+0x1e2>
  4305f8:	2e3d      	cmp	r6, #61	@ 0x3d
  4305fa:	f47e a9fc 	bne.w	42e9f6 <d_print_comp_inner+0x1e2>
  4305fe:	68db      	ldr	r3, [r3, #12]
  430600:	781b      	ldrb	r3, [r3, #0]
  430602:	2b30      	cmp	r3, #48	@ 0x30
  430604:	f000 83bd 	beq.w	430d82 <d_print_comp_inner+0x256e>
  430608:	2b31      	cmp	r3, #49	@ 0x31
  43060a:	f47e a9f4 	bne.w	42e9f6 <d_print_comp_inner+0x1e2>
  43060e:	497e      	ldr	r1, [pc, #504]	@ (430808 <d_print_comp_inner+0x1ff4>)
  430610:	f7fe bf02 	b.w	42f418 <d_print_comp_inner+0xc04>
  430614:	2600      	movs	r6, #0
  430616:	4620      	mov	r0, r4
  430618:	5466      	strb	r6, [r4, r1]
  43061a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  43061e:	4798      	blx	r3
  430620:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430624:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
  430628:	3301      	adds	r3, #1
  43062a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43062e:	f7fe ba5b 	b.w	42eae8 <d_print_comp_inner+0x2d4>
  430632:	f8d8 8010 	ldr.w	r8, [r8, #16]
  430636:	f898 3000 	ldrb.w	r3, [r8]
  43063a:	2b48      	cmp	r3, #72	@ 0x48
  43063c:	f000 82a1 	beq.w	430b82 <d_print_comp_inner+0x236e>
  430640:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
  430644:	468a      	mov	sl, r1
  430646:	4665      	mov	r5, ip
  430648:	f898 3000 	ldrb.w	r3, [r8]
  43064c:	2b4e      	cmp	r3, #78	@ 0x4e
  43064e:	f1a3 011c 	sub.w	r1, r3, #28
  430652:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
  430656:	d007      	beq.n	430668 <d_print_comp_inner+0x1e54>
  430658:	d804      	bhi.n	430664 <d_print_comp_inner+0x1e50>
  43065a:	2904      	cmp	r1, #4
  43065c:	d904      	bls.n	430668 <d_print_comp_inner+0x1e54>
  43065e:	4651      	mov	r1, sl
  430660:	f7fe bf49 	b.w	42f4f6 <d_print_comp_inner+0xce2>
  430664:	2a01      	cmp	r2, #1
  430666:	d8fa      	bhi.n	43065e <d_print_comp_inner+0x1e4a>
  430668:	2f04      	cmp	r7, #4
  43066a:	46ae      	mov	lr, r5
  43066c:	f107 0701 	add.w	r7, r7, #1
  430670:	f43e a954 	beq.w	42e91c <d_print_comp_inner+0x108>
  430674:	f105 0c10 	add.w	ip, r5, #16
  430678:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  43067c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  430680:	2300      	movs	r3, #0
  430682:	612d      	str	r5, [r5, #16]
  430684:	f8ce 8004 	str.w	r8, [lr, #4]
  430688:	4665      	mov	r5, ip
  43068a:	f8ce 3008 	str.w	r3, [lr, #8]
  43068e:	f8d8 800c 	ldr.w	r8, [r8, #12]
  430692:	f8ce a00c 	str.w	sl, [lr, #12]
  430696:	f8c4 c114 	str.w	ip, [r4, #276]	@ 0x114
  43069a:	f1b8 0f00 	cmp.w	r8, #0
  43069e:	d1d3      	bne.n	430648 <d_print_comp_inner+0x1e34>
  4306a0:	f7fe b93c 	b.w	42e91c <d_print_comp_inner+0x108>
  4306a4:	2600      	movs	r6, #0
  4306a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4306aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4306ae:	4620      	mov	r0, r4
  4306b0:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
  4306b4:	4798      	blx	r3
  4306b6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4306ba:	2201      	movs	r2, #1
  4306bc:	4631      	mov	r1, r6
  4306be:	4413      	add	r3, r2
  4306c0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4306c4:	f7fe bfe7 	b.w	42f696 <d_print_comp_inner+0xe82>
  4306c8:	4950      	ldr	r1, [pc, #320]	@ (43080c <d_print_comp_inner+0x1ff8>)
  4306ca:	4620      	mov	r0, r4
  4306cc:	f7fb fe60 	bl	42c390 <d_append_string>
  4306d0:	68ff      	ldr	r7, [r7, #12]
  4306d2:	463a      	mov	r2, r7
  4306d4:	f7fe b93f 	b.w	42e956 <d_print_comp_inner+0x142>
  4306d8:	2600      	movs	r6, #0
  4306da:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4306de:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4306e2:	4620      	mov	r0, r4
  4306e4:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
  4306e8:	4798      	blx	r3
  4306ea:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4306ee:	2201      	movs	r2, #1
  4306f0:	4631      	mov	r1, r6
  4306f2:	4413      	add	r3, r2
  4306f4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4306f8:	f7ff b96f 	b.w	42f9da <d_print_comp_inner+0x11c6>
  4306fc:	2500      	movs	r5, #0
  4306fe:	4620      	mov	r0, r4
  430700:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  430704:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  430708:	4798      	blx	r3
  43070a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43070e:	2201      	movs	r2, #1
  430710:	4629      	mov	r1, r5
  430712:	4413      	add	r3, r2
  430714:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430718:	f7fe be15 	b.w	42f346 <d_print_comp_inner+0xb32>
  43071c:	2600      	movs	r6, #0
  43071e:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
  430722:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
  430726:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
  43072a:	4798      	blx	r3
  43072c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430730:	2201      	movs	r2, #1
  430732:	4631      	mov	r1, r6
  430734:	4413      	add	r3, r2
  430736:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43073a:	f7ff b942 	b.w	42f9c2 <d_print_comp_inner+0x11ae>
  43073e:	2600      	movs	r6, #0
  430740:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
  430744:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
  430748:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
  43074c:	4798      	blx	r3
  43074e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430752:	2201      	movs	r2, #1
  430754:	4631      	mov	r1, r6
  430756:	4413      	add	r3, r2
  430758:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43075c:	f7fe bdd3 	b.w	42f306 <d_print_comp_inner+0xaf2>
  430760:	2600      	movs	r6, #0
  430762:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430766:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  43076a:	4620      	mov	r0, r4
  43076c:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
  430770:	4798      	blx	r3
  430772:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430776:	2201      	movs	r2, #1
  430778:	4631      	mov	r1, r6
  43077a:	4413      	add	r3, r2
  43077c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430780:	f7fe bd3a 	b.w	42f1f8 <d_print_comp_inner+0x9e4>
  430784:	f04f 0800 	mov.w	r8, #0
  430788:	4620      	mov	r0, r4
  43078a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  43078e:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  430792:	4798      	blx	r3
  430794:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430798:	4641      	mov	r1, r8
  43079a:	3301      	adds	r3, #1
  43079c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4307a0:	2301      	movs	r3, #1
  4307a2:	f7fe b9ef 	b.w	42eb84 <d_print_comp_inner+0x370>
  4307a6:	2500      	movs	r5, #0
  4307a8:	4620      	mov	r0, r4
  4307aa:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  4307ae:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  4307b2:	4798      	blx	r3
  4307b4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4307b8:	4629      	mov	r1, r5
  4307ba:	3301      	adds	r3, #1
  4307bc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4307c0:	2301      	movs	r3, #1
  4307c2:	f7fe be5e 	b.w	42f482 <d_print_comp_inner+0xc6e>
  4307c6:	2120      	movs	r1, #32
  4307c8:	4620      	mov	r0, r4
  4307ca:	f7fb fda5 	bl	42c318 <d_append_char>
  4307ce:	f7fe be52 	b.w	42f476 <d_print_comp_inner+0xc62>
  4307d2:	2600      	movs	r6, #0
  4307d4:	4620      	mov	r0, r4
  4307d6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  4307da:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
  4307de:	4798      	blx	r3
  4307e0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4307e4:	4631      	mov	r1, r6
  4307e6:	3301      	adds	r3, #1
  4307e8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4307ec:	2301      	movs	r3, #1
  4307ee:	f7fe be31 	b.w	42f454 <d_print_comp_inner+0xc40>
  4307f2:	2120      	movs	r1, #32
  4307f4:	4620      	mov	r0, r4
  4307f6:	f7fb fd8f 	bl	42c318 <d_append_char>
  4307fa:	f7fe be25 	b.w	42f448 <d_print_comp_inner+0xc34>
  4307fe:	bf00      	nop
  430800:	00435144 	.word	0x00435144
  430804:	0043ce10 	.word	0x0043ce10
  430808:	004353a0 	.word	0x004353a0
  43080c:	004351cc 	.word	0x004351cc
  430810:	2600      	movs	r6, #0
  430812:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
  430816:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
  43081a:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
  43081e:	4798      	blx	r3
  430820:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430824:	2201      	movs	r2, #1
  430826:	4631      	mov	r1, r6
  430828:	4413      	add	r3, r2
  43082a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43082e:	f7fe bc68 	b.w	42f102 <d_print_comp_inner+0x8ee>
  430832:	215b      	movs	r1, #91	@ 0x5b
  430834:	4620      	mov	r0, r4
  430836:	f7fb fd6f 	bl	42c318 <d_append_char>
  43083a:	2111      	movs	r1, #17
  43083c:	f8db 2010 	ldr.w	r2, [fp, #16]
  430840:	4620      	mov	r0, r4
  430842:	f000 faab 	bl	430d9c <d_print_comp>
  430846:	215d      	movs	r1, #93	@ 0x5d
  430848:	f7ff b8af 	b.w	42f9aa <d_print_comp_inner+0x1196>
  43084c:	212d      	movs	r1, #45	@ 0x2d
  43084e:	4620      	mov	r0, r4
  430850:	f7fb fd62 	bl	42c318 <d_append_char>
  430854:	f7fe b8f0 	b.w	42ea38 <d_print_comp_inner+0x224>
  430858:	2600      	movs	r6, #0
  43085a:	4620      	mov	r0, r4
  43085c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  430860:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
  430864:	4798      	blx	r3
  430866:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43086a:	4631      	mov	r1, r6
  43086c:	3301      	adds	r3, #1
  43086e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430872:	2301      	movs	r3, #1
  430874:	f7fe b8d5 	b.w	42ea22 <d_print_comp_inner+0x20e>
  430878:	2600      	movs	r6, #0
  43087a:	4620      	mov	r0, r4
  43087c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  430880:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
  430884:	4798      	blx	r3
  430886:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43088a:	4631      	mov	r1, r6
  43088c:	f8db 200c 	ldr.w	r2, [fp, #12]
  430890:	3301      	adds	r3, #1
  430892:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430896:	2301      	movs	r3, #1
  430898:	f7fe b8b3 	b.w	42ea02 <d_print_comp_inner+0x1ee>
  43089c:	781b      	ldrb	r3, [r3, #0]
  43089e:	f1a3 0163 	sub.w	r1, r3, #99	@ 0x63
  4308a2:	2901      	cmp	r1, #1
  4308a4:	d903      	bls.n	4308ae <d_print_comp_inner+0x209a>
  4308a6:	3b72      	subs	r3, #114	@ 0x72
  4308a8:	2b01      	cmp	r3, #1
  4308aa:	f63f a82d 	bhi.w	42f908 <d_print_comp_inner+0x10f4>
  4308ae:	2111      	movs	r1, #17
  4308b0:	4620      	mov	r0, r4
  4308b2:	f001 f891 	bl	4319d8 <d_print_expr_op>
  4308b6:	213c      	movs	r1, #60	@ 0x3c
  4308b8:	4620      	mov	r0, r4
  4308ba:	f7fb fd2d 	bl	42c318 <d_append_char>
  4308be:	f8db 3010 	ldr.w	r3, [fp, #16]
  4308c2:	2111      	movs	r1, #17
  4308c4:	4620      	mov	r0, r4
  4308c6:	68da      	ldr	r2, [r3, #12]
  4308c8:	f000 fa68 	bl	430d9c <d_print_comp>
  4308cc:	49b8      	ldr	r1, [pc, #736]	@ (430bb0 <d_print_comp_inner+0x239c>)
  4308ce:	4620      	mov	r0, r4
  4308d0:	f7fb fd5e 	bl	42c390 <d_append_string>
  4308d4:	f8db 3010 	ldr.w	r3, [fp, #16]
  4308d8:	2111      	movs	r1, #17
  4308da:	4620      	mov	r0, r4
  4308dc:	691a      	ldr	r2, [r3, #16]
  4308de:	f000 fa5d 	bl	430d9c <d_print_comp>
  4308e2:	2129      	movs	r1, #41	@ 0x29
  4308e4:	f7ff b861 	b.w	42f9aa <d_print_comp_inner+0x1196>
  4308e8:	f8d0 7134 	ldr.w	r7, [r0, #308]	@ 0x134
  4308ec:	2f00      	cmp	r7, #0
  4308ee:	f340 820a 	ble.w	430d06 <d_print_comp_inner+0x24f2>
  4308f2:	f8d0 c130 	ldr.w	ip, [r0, #304]	@ 0x130
  4308f6:	464b      	mov	r3, r9
  4308f8:	4660      	mov	r0, ip
  4308fa:	e004      	b.n	430906 <d_print_comp_inner+0x20f2>
  4308fc:	429f      	cmp	r7, r3
  4308fe:	f100 0008 	add.w	r0, r0, #8
  430902:	f000 8200 	beq.w	430d06 <d_print_comp_inner+0x24f2>
  430906:	f85c 1033 	ldr.w	r1, [ip, r3, lsl #3]
  43090a:	3301      	adds	r3, #1
  43090c:	428a      	cmp	r2, r1
  43090e:	d1f5      	bne.n	4308fc <d_print_comp_inner+0x20e8>
  430910:	2800      	cmp	r0, #0
  430912:	f000 81f8 	beq.w	430d06 <d_print_comp_inner+0x24f2>
  430916:	f8d4 712c 	ldr.w	r7, [r4, #300]	@ 0x12c
  43091a:	2f00      	cmp	r7, #0
  43091c:	f000 8120 	beq.w	430b60 <d_print_comp_inner+0x234c>
  430920:	463b      	mov	r3, r7
  430922:	e007      	b.n	430934 <d_print_comp_inner+0x2120>
  430924:	4559      	cmp	r1, fp
  430926:	d101      	bne.n	43092c <d_print_comp_inner+0x2118>
  430928:	429f      	cmp	r7, r3
  43092a:	d106      	bne.n	43093a <d_print_comp_inner+0x2126>
  43092c:	685b      	ldr	r3, [r3, #4]
  43092e:	2b00      	cmp	r3, #0
  430930:	f000 8116 	beq.w	430b60 <d_print_comp_inner+0x234c>
  430934:	6819      	ldr	r1, [r3, #0]
  430936:	4291      	cmp	r1, r2
  430938:	d1f4      	bne.n	430924 <d_print_comp_inner+0x2110>
  43093a:	4611      	mov	r1, r2
  43093c:	4620      	mov	r0, r4
  43093e:	9200      	str	r2, [sp, #0]
  430940:	f7fb fd0c 	bl	42c35c <d_lookup_template_argument>
  430944:	9a00      	ldr	r2, [sp, #0]
  430946:	2800      	cmp	r0, #0
  430948:	f43d afe8 	beq.w	42e91c <d_print_comp_inner+0x108>
  43094c:	7803      	ldrb	r3, [r0, #0]
  43094e:	2b2f      	cmp	r3, #47	@ 0x2f
  430950:	f000 8177 	beq.w	430c42 <d_print_comp_inner+0x242e>
  430954:	464f      	mov	r7, r9
  430956:	f7fe b89e 	b.w	42ea96 <d_print_comp_inner+0x282>
  43095a:	2700      	movs	r7, #0
  43095c:	4620      	mov	r0, r4
  43095e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  430962:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
  430966:	4798      	blx	r3
  430968:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43096c:	4639      	mov	r1, r7
  43096e:	3301      	adds	r3, #1
  430970:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430974:	2301      	movs	r3, #1
  430976:	f7fe b87c 	b.w	42ea72 <d_print_comp_inner+0x25e>
  43097a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  43097e:	4620      	mov	r0, r4
  430980:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  430984:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
  430988:	4798      	blx	r3
  43098a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43098e:	4639      	mov	r1, r7
  430990:	3301      	adds	r3, #1
  430992:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430996:	2301      	movs	r3, #1
  430998:	e40e      	b.n	4301b8 <d_print_comp_inner+0x19a4>
  43099a:	213c      	movs	r1, #60	@ 0x3c
  43099c:	4620      	mov	r0, r4
  43099e:	9705      	str	r7, [sp, #20]
  4309a0:	f7fb fcba 	bl	42c318 <d_append_char>
  4309a4:	f8d7 a00c 	ldr.w	sl, [r7, #12]
  4309a8:	ae06      	add	r6, sp, #24
  4309aa:	f1ba 0f00 	cmp.w	sl, #0
  4309ae:	d063      	beq.n	430a78 <d_print_comp_inner+0x2264>
  4309b0:	4633      	mov	r3, r6
  4309b2:	4656      	mov	r6, sl
  4309b4:	f8cd b00c 	str.w	fp, [sp, #12]
  4309b8:	469a      	mov	sl, r3
  4309ba:	e9cd 7501 	strd	r7, r5, [sp, #4]
  4309be:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  4309c2:	1c5a      	adds	r2, r3, #1
  4309c4:	f8c4 2120 	str.w	r2, [r4, #288]	@ 0x120
  4309c8:	2b00      	cmp	r3, #0
  4309ca:	f040 8089 	bne.w	430ae0 <d_print_comp_inner+0x22cc>
  4309ce:	4632      	mov	r2, r6
  4309d0:	2111      	movs	r1, #17
  4309d2:	4620      	mov	r0, r4
  4309d4:	f000 f9e2 	bl	430d9c <d_print_comp>
  4309d8:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
  4309dc:	2bff      	cmp	r3, #255	@ 0xff
  4309de:	f000 8084 	beq.w	430aea <d_print_comp_inner+0x22d6>
  4309e2:	1c59      	adds	r1, r3, #1
  4309e4:	2220      	movs	r2, #32
  4309e6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  4309ea:	54e2      	strb	r2, [r4, r3]
  4309ec:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
  4309f0:	7833      	ldrb	r3, [r6, #0]
  4309f2:	2b5b      	cmp	r3, #91	@ 0x5b
  4309f4:	d101      	bne.n	4309fa <d_print_comp_inner+0x21e6>
  4309f6:	68f6      	ldr	r6, [r6, #12]
  4309f8:	7833      	ldrb	r3, [r6, #0]
  4309fa:	3b58      	subs	r3, #88	@ 0x58
  4309fc:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
  430a00:	9100      	str	r1, [sp, #0]
  430a02:	2b02      	cmp	r3, #2
  430a04:	f102 38ff 	add.w	r8, r2, #4294967295	@ 0xffffffff
  430a08:	d940      	bls.n	430a8c <d_print_comp_inner+0x2278>
  430a0a:	2301      	movs	r3, #1
  430a0c:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
  430a10:	4642      	mov	r2, r8
  430a12:	4968      	ldr	r1, [pc, #416]	@ (430bb4 <d_print_comp_inner+0x23a0>)
  430a14:	4650      	mov	r0, sl
  430a16:	f001 fec5 	bl	4327a4 <sprintf>
  430a1a:	4650      	mov	r0, sl
  430a1c:	f7f0 fad6 	bl	420fcc <strlen>
  430a20:	b310      	cbz	r0, 430a68 <d_print_comp_inner+0x2254>
  430a22:	eb0a 0800 	add.w	r8, sl, r0
  430a26:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  430a2a:	4655      	mov	r5, sl
  430a2c:	e007      	b.n	430a3e <d_print_comp_inner+0x222a>
  430a2e:	3101      	adds	r1, #1
  430a30:	45a8      	cmp	r8, r5
  430a32:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  430a36:	54e7      	strb	r7, [r4, r3]
  430a38:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
  430a3c:	d014      	beq.n	430a68 <d_print_comp_inner+0x2254>
  430a3e:	29ff      	cmp	r1, #255	@ 0xff
  430a40:	f815 7b01 	ldrb.w	r7, [r5], #1
  430a44:	460b      	mov	r3, r1
  430a46:	d1f2      	bne.n	430a2e <d_print_comp_inner+0x221a>
  430a48:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430a4c:	4620      	mov	r0, r4
  430a4e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  430a52:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
  430a56:	4798      	blx	r3
  430a58:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430a5c:	2101      	movs	r1, #1
  430a5e:	3301      	adds	r3, #1
  430a60:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430a64:	2300      	movs	r3, #0
  430a66:	e7e3      	b.n	430a30 <d_print_comp_inner+0x221c>
  430a68:	6936      	ldr	r6, [r6, #16]
  430a6a:	2e00      	cmp	r6, #0
  430a6c:	d1a7      	bne.n	4309be <d_print_comp_inner+0x21aa>
  430a6e:	f8dd b00c 	ldr.w	fp, [sp, #12]
  430a72:	4656      	mov	r6, sl
  430a74:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
  430a78:	213e      	movs	r1, #62	@ 0x3e
  430a7a:	4620      	mov	r0, r4
  430a7c:	f7fb fc4c 	bl	42c318 <d_append_char>
  430a80:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
  430a84:	693f      	ldr	r7, [r7, #16]
  430a86:	3301      	adds	r3, #1
  430a88:	f7fe b874 	b.w	42eb74 <d_print_comp_inner+0x360>
  430a8c:	4a4a      	ldr	r2, [pc, #296]	@ (430bb8 <d_print_comp_inner+0x23a4>)
  430a8e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  430a92:	4628      	mov	r0, r5
  430a94:	f7f0 fa9a 	bl	420fcc <strlen>
  430a98:	9900      	ldr	r1, [sp, #0]
  430a9a:	2800      	cmp	r0, #0
  430a9c:	d0b8      	beq.n	430a10 <d_print_comp_inner+0x21fc>
  430a9e:	3d01      	subs	r5, #1
  430aa0:	eb05 0b00 	add.w	fp, r5, r0
  430aa4:	e007      	b.n	430ab6 <d_print_comp_inner+0x22a2>
  430aa6:	3101      	adds	r1, #1
  430aa8:	455d      	cmp	r5, fp
  430aaa:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  430aae:	54e7      	strb	r7, [r4, r3]
  430ab0:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
  430ab4:	d0ac      	beq.n	430a10 <d_print_comp_inner+0x21fc>
  430ab6:	29ff      	cmp	r1, #255	@ 0xff
  430ab8:	f815 7f01 	ldrb.w	r7, [r5, #1]!
  430abc:	460b      	mov	r3, r1
  430abe:	d1f2      	bne.n	430aa6 <d_print_comp_inner+0x2292>
  430ac0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430ac4:	4620      	mov	r0, r4
  430ac6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  430aca:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
  430ace:	4798      	blx	r3
  430ad0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430ad4:	2101      	movs	r1, #1
  430ad6:	3301      	adds	r3, #1
  430ad8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430adc:	2300      	movs	r3, #0
  430ade:	e7e3      	b.n	430aa8 <d_print_comp_inner+0x2294>
  430ae0:	4936      	ldr	r1, [pc, #216]	@ (430bbc <d_print_comp_inner+0x23a8>)
  430ae2:	4620      	mov	r0, r4
  430ae4:	f7fb fc54 	bl	42c390 <d_append_string>
  430ae8:	e771      	b.n	4309ce <d_print_comp_inner+0x21ba>
  430aea:	4619      	mov	r1, r3
  430aec:	4620      	mov	r0, r4
  430aee:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
  430af2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  430af6:	4798      	blx	r3
  430af8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430afc:	2101      	movs	r1, #1
  430afe:	3301      	adds	r3, #1
  430b00:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430b04:	2300      	movs	r3, #0
  430b06:	e76d      	b.n	4309e4 <d_print_comp_inner+0x21d0>
  430b08:	2b73      	cmp	r3, #115	@ 0x73
  430b0a:	f47f ac63 	bne.w	4303d4 <d_print_comp_inner+0x1bc0>
  430b0e:	787b      	ldrb	r3, [r7, #1]
  430b10:	2b50      	cmp	r3, #80	@ 0x50
  430b12:	f47f ac5f 	bne.w	4303d4 <d_print_comp_inner+0x1bc0>
  430b16:	78bb      	ldrb	r3, [r7, #2]
  430b18:	2b00      	cmp	r3, #0
  430b1a:	f47f ac5b 	bne.w	4303d4 <d_print_comp_inner+0x1bc0>
  430b1e:	461e      	mov	r6, r3
  430b20:	e003      	b.n	430b2a <d_print_comp_inner+0x2316>
  430b22:	3601      	adds	r6, #1
  430b24:	692d      	ldr	r5, [r5, #16]
  430b26:	2d00      	cmp	r5, #0
  430b28:	d03f      	beq.n	430baa <d_print_comp_inner+0x2396>
  430b2a:	782b      	ldrb	r3, [r5, #0]
  430b2c:	2b2f      	cmp	r3, #47	@ 0x2f
  430b2e:	d13c      	bne.n	430baa <d_print_comp_inner+0x2396>
  430b30:	68eb      	ldr	r3, [r5, #12]
  430b32:	2b00      	cmp	r3, #0
  430b34:	d039      	beq.n	430baa <d_print_comp_inner+0x2396>
  430b36:	781a      	ldrb	r2, [r3, #0]
  430b38:	2a4c      	cmp	r2, #76	@ 0x4c
  430b3a:	d1f2      	bne.n	430b22 <d_print_comp_inner+0x230e>
  430b3c:	68d9      	ldr	r1, [r3, #12]
  430b3e:	4620      	mov	r0, r4
  430b40:	f7fb fc58 	bl	42c3f4 <d_find_pack>
  430b44:	4602      	mov	r2, r0
  430b46:	b148      	cbz	r0, 430b5c <d_print_comp_inner+0x2348>
  430b48:	2200      	movs	r2, #0
  430b4a:	e004      	b.n	430b56 <d_print_comp_inner+0x2342>
  430b4c:	68c1      	ldr	r1, [r0, #12]
  430b4e:	b129      	cbz	r1, 430b5c <d_print_comp_inner+0x2348>
  430b50:	6900      	ldr	r0, [r0, #16]
  430b52:	3201      	adds	r2, #1
  430b54:	b110      	cbz	r0, 430b5c <d_print_comp_inner+0x2348>
  430b56:	7801      	ldrb	r1, [r0, #0]
  430b58:	292f      	cmp	r1, #47	@ 0x2f
  430b5a:	d0f7      	beq.n	430b4c <d_print_comp_inner+0x2338>
  430b5c:	4416      	add	r6, r2
  430b5e:	e7e1      	b.n	430b24 <d_print_comp_inner+0x2310>
  430b60:	6843      	ldr	r3, [r0, #4]
  430b62:	4611      	mov	r1, r2
  430b64:	f8d4 8110 	ldr.w	r8, [r4, #272]	@ 0x110
  430b68:	4620      	mov	r0, r4
  430b6a:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  430b6e:	9200      	str	r2, [sp, #0]
  430b70:	f7fb fbf4 	bl	42c35c <d_lookup_template_argument>
  430b74:	2800      	cmp	r0, #0
  430b76:	f000 80f8 	beq.w	430d6a <d_print_comp_inner+0x2556>
  430b7a:	f04f 0901 	mov.w	r9, #1
  430b7e:	9a00      	ldr	r2, [sp, #0]
  430b80:	e6e4      	b.n	43094c <d_print_comp_inner+0x2138>
  430b82:	f8d8 800c 	ldr.w	r8, [r8, #12]
  430b86:	f1b8 0f00 	cmp.w	r8, #0
  430b8a:	f47f ad59 	bne.w	430640 <d_print_comp_inner+0x1e2c>
  430b8e:	f7fd bec5 	b.w	42e91c <d_print_comp_inner+0x108>
  430b92:	2120      	movs	r1, #32
  430b94:	4620      	mov	r0, r4
  430b96:	f7fb fbbf 	bl	42c318 <d_append_char>
  430b9a:	f7ff bbd4 	b.w	430346 <d_print_comp_inner+0x1b32>
  430b9e:	2120      	movs	r1, #32
  430ba0:	4620      	mov	r0, r4
  430ba2:	f7fb fbb9 	bl	42c318 <d_append_char>
  430ba6:	f7ff bbbe 	b.w	430326 <d_print_comp_inner+0x1b12>
  430baa:	4631      	mov	r1, r6
  430bac:	e40c      	b.n	4303c8 <d_print_comp_inner+0x1bb4>
  430bae:	bf00      	nop
  430bb0:	00435370 	.word	0x00435370
  430bb4:	00435144 	.word	0x00435144
  430bb8:	0043ce10 	.word	0x0043ce10
  430bbc:	004351b4 	.word	0x004351b4
  430bc0:	2e3e      	cmp	r6, #62	@ 0x3e
  430bc2:	f000 80d6 	beq.w	430d72 <d_print_comp_inner+0x255e>
  430bc6:	3f02      	subs	r7, #2
  430bc8:	f8db 2010 	ldr.w	r2, [fp, #16]
  430bcc:	2111      	movs	r1, #17
  430bce:	4620      	mov	r0, r4
  430bd0:	f000 f8e4 	bl	430d9c <d_print_comp>
  430bd4:	2f04      	cmp	r7, #4
  430bd6:	f63d aea4 	bhi.w	42e922 <d_print_comp_inner+0x10e>
  430bda:	e8df f007 	tbb	[pc, r7]
  430bde:	0c0f      	.short	0x0c0f
  430be0:	0609      	.short	0x0609
  430be2:	03          	.byte	0x03
  430be3:	00          	.byte	0x00
  430be4:	4968      	ldr	r1, [pc, #416]	@ (430d88 <d_print_comp_inner+0x2574>)
  430be6:	f7fe bc17 	b.w	42f418 <d_print_comp_inner+0xc04>
  430bea:	4968      	ldr	r1, [pc, #416]	@ (430d8c <d_print_comp_inner+0x2578>)
  430bec:	f7fe bc14 	b.w	42f418 <d_print_comp_inner+0xc04>
  430bf0:	4967      	ldr	r1, [pc, #412]	@ (430d90 <d_print_comp_inner+0x257c>)
  430bf2:	f7fe bc11 	b.w	42f418 <d_print_comp_inner+0xc04>
  430bf6:	216c      	movs	r1, #108	@ 0x6c
  430bf8:	f7fe bed7 	b.w	42f9aa <d_print_comp_inner+0x1196>
  430bfc:	2175      	movs	r1, #117	@ 0x75
  430bfe:	f7fe bed4 	b.w	42f9aa <d_print_comp_inner+0x1196>
  430c02:	68ea      	ldr	r2, [r5, #12]
  430c04:	7811      	ldrb	r1, [r2, #0]
  430c06:	2901      	cmp	r1, #1
  430c08:	f47f abc2 	bne.w	430390 <d_print_comp_inner+0x1b7c>
  430c0c:	6929      	ldr	r1, [r5, #16]
  430c0e:	7809      	ldrb	r1, [r1, #0]
  430c10:	2929      	cmp	r1, #41	@ 0x29
  430c12:	bf08      	it	eq
  430c14:	4615      	moveq	r5, r2
  430c16:	f7ff bbbb 	b.w	430390 <d_print_comp_inner+0x1b7c>
  430c1a:	6912      	ldr	r2, [r2, #16]
  430c1c:	2111      	movs	r1, #17
  430c1e:	f000 f8bd 	bl	430d9c <d_print_comp>
  430c22:	9b08      	ldr	r3, [sp, #32]
  430c24:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
  430c28:	2b00      	cmp	r3, #0
  430c2a:	f43e ada3 	beq.w	42f774 <d_print_comp_inner+0xf60>
  430c2e:	f7fd be78 	b.w	42e922 <d_print_comp_inner+0x10e>
  430c32:	68ea      	ldr	r2, [r5, #12]
  430c34:	2111      	movs	r1, #17
  430c36:	4620      	mov	r0, r4
  430c38:	f001 f8be 	bl	431db8 <d_print_subexpr>
  430c3c:	4632      	mov	r2, r6
  430c3e:	f7fe bcf1 	b.w	42f624 <d_print_comp_inner+0xe10>
  430c42:	f8d4 1124 	ldr.w	r1, [r4, #292]	@ 0x124
  430c46:	2900      	cmp	r1, #0
  430c48:	f6ff aadf 	blt.w	43020a <d_print_comp_inner+0x19f6>
  430c4c:	f7fb faf2 	bl	42c234 <d_index_template_argument.part.0>
  430c50:	2800      	cmp	r0, #0
  430c52:	f000 8086 	beq.w	430d62 <d_print_comp_inner+0x254e>
  430c56:	464f      	mov	r7, r9
  430c58:	7803      	ldrb	r3, [r0, #0]
  430c5a:	f7fd bf1c 	b.w	42ea96 <d_print_comp_inner+0x282>
  430c5e:	68d2      	ldr	r2, [r2, #12]
  430c60:	f7fd bf28 	b.w	42eab4 <d_print_comp_inner+0x2a0>
  430c64:	4620      	mov	r0, r4
  430c66:	215b      	movs	r1, #91	@ 0x5b
  430c68:	f7fb fb56 	bl	42c318 <d_append_char>
  430c6c:	f8db 3010 	ldr.w	r3, [fp, #16]
  430c70:	4620      	mov	r0, r4
  430c72:	2111      	movs	r1, #17
  430c74:	691a      	ldr	r2, [r3, #16]
  430c76:	f000 f891 	bl	430d9c <d_print_comp>
  430c7a:	215d      	movs	r1, #93	@ 0x5d
  430c7c:	4620      	mov	r0, r4
  430c7e:	f7fb fb4b 	bl	42c318 <d_append_char>
  430c82:	f7fe be81 	b.w	42f988 <d_print_comp_inner+0x1174>
  430c86:	68da      	ldr	r2, [r3, #12]
  430c88:	6891      	ldr	r1, [r2, #8]
  430c8a:	2901      	cmp	r1, #1
  430c8c:	f47e ae52 	bne.w	42f934 <d_print_comp_inner+0x1120>
  430c90:	6852      	ldr	r2, [r2, #4]
  430c92:	7812      	ldrb	r2, [r2, #0]
  430c94:	2a3e      	cmp	r2, #62	@ 0x3e
  430c96:	f47e ae4d 	bne.w	42f934 <d_print_comp_inner+0x1120>
  430c9a:	2128      	movs	r1, #40	@ 0x28
  430c9c:	4620      	mov	r0, r4
  430c9e:	f7fb fb3b 	bl	42c318 <d_append_char>
  430ca2:	f8db 300c 	ldr.w	r3, [fp, #12]
  430ca6:	f7fe be45 	b.w	42f934 <d_print_comp_inner+0x1120>
  430caa:	6913      	ldr	r3, [r2, #16]
  430cac:	781b      	ldrb	r3, [r3, #0]
  430cae:	2b29      	cmp	r3, #41	@ 0x29
  430cb0:	d002      	beq.n	430cb8 <d_print_comp_inner+0x24a4>
  430cb2:	2301      	movs	r3, #1
  430cb4:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
  430cb8:	68d2      	ldr	r2, [r2, #12]
  430cba:	2111      	movs	r1, #17
  430cbc:	4620      	mov	r0, r4
  430cbe:	f001 f87b 	bl	431db8 <d_print_subexpr>
  430cc2:	f7fe be48 	b.w	42f956 <d_print_comp_inner+0x1142>
  430cc6:	4632      	mov	r2, r6
  430cc8:	2111      	movs	r1, #17
  430cca:	4620      	mov	r0, r4
  430ccc:	f000 fe84 	bl	4319d8 <d_print_expr_op>
  430cd0:	f7fe be53 	b.w	42f97a <d_print_comp_inner+0x1166>
  430cd4:	492f      	ldr	r1, [pc, #188]	@ (430d94 <d_print_comp_inner+0x2580>)
  430cd6:	4620      	mov	r0, r4
  430cd8:	f7fb fb5a 	bl	42c390 <d_append_string>
  430cdc:	68f3      	ldr	r3, [r6, #12]
  430cde:	b143      	cbz	r3, 430cf2 <d_print_comp_inner+0x24de>
  430ce0:	2111      	movs	r1, #17
  430ce2:	4620      	mov	r0, r4
  430ce4:	4632      	mov	r2, r6
  430ce6:	f001 f867 	bl	431db8 <d_print_subexpr>
  430cea:	2120      	movs	r1, #32
  430cec:	4620      	mov	r0, r4
  430cee:	f7fb fb13 	bl	42c318 <d_append_char>
  430cf2:	463a      	mov	r2, r7
  430cf4:	2111      	movs	r1, #17
  430cf6:	4620      	mov	r0, r4
  430cf8:	f000 f850 	bl	430d9c <d_print_comp>
  430cfc:	2d00      	cmp	r5, #0
  430cfe:	f47e ac88 	bne.w	42f612 <d_print_comp_inner+0xdfe>
  430d02:	f7fd be0e 	b.w	42e922 <d_print_comp_inner+0x10e>
  430d06:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
  430d0a:	429f      	cmp	r7, r3
  430d0c:	f6bd ae06 	bge.w	42e91c <d_print_comp_inner+0x108>
  430d10:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
  430d14:	1c79      	adds	r1, r7, #1
  430d16:	f8d4 c110 	ldr.w	ip, [r4, #272]	@ 0x110
  430d1a:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
  430d1e:	f843 2037 	str.w	r2, [r3, r7, lsl #3]
  430d22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
  430d26:	3304      	adds	r3, #4
  430d28:	f1bc 0f00 	cmp.w	ip, #0
  430d2c:	d026      	beq.n	430d7c <d_print_comp_inner+0x2568>
  430d2e:	4696      	mov	lr, r2
  430d30:	4665      	mov	r5, ip
  430d32:	e9d4 7050 	ldrd	r7, r0, [r4, #320]	@ 0x140
  430d36:	e00c      	b.n	430d52 <d_print_comp_inner+0x253e>
  430d38:	f8d4 113c 	ldr.w	r1, [r4, #316]	@ 0x13c
  430d3c:	686a      	ldr	r2, [r5, #4]
  430d3e:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  430d42:	3701      	adds	r7, #1
  430d44:	f8c4 7140 	str.w	r7, [r4, #320]	@ 0x140
  430d48:	604a      	str	r2, [r1, #4]
  430d4a:	6019      	str	r1, [r3, #0]
  430d4c:	460b      	mov	r3, r1
  430d4e:	682d      	ldr	r5, [r5, #0]
  430d50:	b19d      	cbz	r5, 430d7a <d_print_comp_inner+0x2566>
  430d52:	42b8      	cmp	r0, r7
  430d54:	dcf0      	bgt.n	430d38 <d_print_comp_inner+0x2524>
  430d56:	f7fd bde1 	b.w	42e91c <d_print_comp_inner+0x108>
  430d5a:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  430d5e:	f7fd bddd 	b.w	42e91c <d_print_comp_inner+0x108>
  430d62:	f1b9 0f00 	cmp.w	r9, #0
  430d66:	f43d add9 	beq.w	42e91c <d_print_comp_inner+0x108>
  430d6a:	f8c4 8110 	str.w	r8, [r4, #272]	@ 0x110
  430d6e:	f7fd bdd5 	b.w	42e91c <d_print_comp_inner+0x108>
  430d72:	212d      	movs	r1, #45	@ 0x2d
  430d74:	f7fb fad0 	bl	42c318 <d_append_char>
  430d78:	e725      	b.n	430bc6 <d_print_comp_inner+0x23b2>
  430d7a:	4672      	mov	r2, lr
  430d7c:	2100      	movs	r1, #0
  430d7e:	6019      	str	r1, [r3, #0]
  430d80:	e5db      	b.n	43093a <d_print_comp_inner+0x2126>
  430d82:	4905      	ldr	r1, [pc, #20]	@ (430d98 <d_print_comp_inner+0x2584>)
  430d84:	f7fe bb48 	b.w	42f418 <d_print_comp_inner+0xc04>
  430d88:	00435394 	.word	0x00435394
  430d8c:	00435390 	.word	0x00435390
  430d90:	0043538c 	.word	0x0043538c
  430d94:	00435384 	.word	0x00435384
  430d98:	00435398 	.word	0x00435398

00430d9c <d_print_comp>:
  430d9c:	b530      	push	{r4, r5, lr}
  430d9e:	4605      	mov	r5, r0
  430da0:	b083      	sub	sp, #12
  430da2:	b31a      	cbz	r2, 430dec <d_print_comp+0x50>
  430da4:	6853      	ldr	r3, [r2, #4]
  430da6:	4614      	mov	r4, r2
  430da8:	2b01      	cmp	r3, #1
  430daa:	dc1f      	bgt.n	430dec <d_print_comp+0x50>
  430dac:	f8d0 111c 	ldr.w	r1, [r0, #284]	@ 0x11c
  430db0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
  430db4:	dc1a      	bgt.n	430dec <d_print_comp+0x50>
  430db6:	3301      	adds	r3, #1
  430db8:	3101      	adds	r1, #1
  430dba:	9200      	str	r2, [sp, #0]
  430dbc:	6053      	str	r3, [r2, #4]
  430dbe:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
  430dc2:	f8c0 111c 	str.w	r1, [r0, #284]	@ 0x11c
  430dc6:	2111      	movs	r1, #17
  430dc8:	f8c0 d12c 	str.w	sp, [r0, #300]	@ 0x12c
  430dcc:	9301      	str	r3, [sp, #4]
  430dce:	f7fd fd21 	bl	42e814 <d_print_comp_inner>
  430dd2:	6862      	ldr	r2, [r4, #4]
  430dd4:	f8d5 311c 	ldr.w	r3, [r5, #284]	@ 0x11c
  430dd8:	9901      	ldr	r1, [sp, #4]
  430dda:	3a01      	subs	r2, #1
  430ddc:	3b01      	subs	r3, #1
  430dde:	f8c5 112c 	str.w	r1, [r5, #300]	@ 0x12c
  430de2:	6062      	str	r2, [r4, #4]
  430de4:	f8c5 311c 	str.w	r3, [r5, #284]	@ 0x11c
  430de8:	b003      	add	sp, #12
  430dea:	bd30      	pop	{r4, r5, pc}
  430dec:	2301      	movs	r3, #1
  430dee:	f8c5 3118 	str.w	r3, [r5, #280]	@ 0x118
  430df2:	b003      	add	sp, #12
  430df4:	bd30      	pop	{r4, r5, pc}
  430df6:	bf00      	nop

00430df8 <d_print_mod>:
  430df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  430dfc:	7813      	ldrb	r3, [r2, #0]
  430dfe:	4615      	mov	r5, r2
  430e00:	4604      	mov	r4, r0
  430e02:	3b03      	subs	r3, #3
  430e04:	2b4e      	cmp	r3, #78	@ 0x4e
  430e06:	d850      	bhi.n	430eaa <d_print_mod+0xb2>
  430e08:	e8df f013 	tbh	[pc, r3, lsl #1]
  430e0c:	004f0118 	.word	0x004f0118
  430e10:	004f004f 	.word	0x004f004f
  430e14:	004f004f 	.word	0x004f004f
  430e18:	004f004f 	.word	0x004f004f
  430e1c:	004f004f 	.word	0x004f004f
  430e20:	004f004f 	.word	0x004f004f
  430e24:	004f004f 	.word	0x004f004f
  430e28:	004f004f 	.word	0x004f004f
  430e2c:	004f004f 	.word	0x004f004f
  430e30:	004f004f 	.word	0x004f004f
  430e34:	004f004f 	.word	0x004f004f
  430e38:	007b0055 	.word	0x007b0055
  430e3c:	005500a1 	.word	0x005500a1
  430e40:	00a1007b 	.word	0x00a1007b
  430e44:	00f800eb 	.word	0x00f800eb
  430e48:	02910105 	.word	0x02910105
  430e4c:	012c011e 	.word	0x012c011e
  430e50:	01750150 	.word	0x01750150
  430e54:	004f004f 	.word	0x004f004f
  430e58:	004f004f 	.word	0x004f004f
  430e5c:	004f019a 	.word	0x004f019a
  430e60:	004f01c9 	.word	0x004f01c9
  430e64:	004f004f 	.word	0x004f004f
  430e68:	004f004f 	.word	0x004f004f
  430e6c:	004f004f 	.word	0x004f004f
  430e70:	004f004f 	.word	0x004f004f
  430e74:	004f004f 	.word	0x004f004f
  430e78:	004f004f 	.word	0x004f004f
  430e7c:	004f004f 	.word	0x004f004f
  430e80:	004f004f 	.word	0x004f004f
  430e84:	004f004f 	.word	0x004f004f
  430e88:	004f004f 	.word	0x004f004f
  430e8c:	004f004f 	.word	0x004f004f
  430e90:	004f004f 	.word	0x004f004f
  430e94:	004f004f 	.word	0x004f004f
  430e98:	004f004f 	.word	0x004f004f
  430e9c:	004f004f 	.word	0x004f004f
  430ea0:	01ef004f 	.word	0x01ef004f
  430ea4:	022a004f 	.word	0x022a004f
  430ea8:	00c5      	.short	0x00c5
  430eaa:	462a      	mov	r2, r5
  430eac:	2111      	movs	r1, #17
  430eae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  430eb2:	f7ff bf73 	b.w	430d9c <d_print_comp>
  430eb6:	4dd1      	ldr	r5, [pc, #836]	@ (4311fc <d_print_mod+0x404>)
  430eb8:	f04f 0800 	mov.w	r8, #0
  430ebc:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  430ec0:	f105 0709 	add.w	r7, r5, #9
  430ec4:	e008      	b.n	430ed8 <d_print_mod+0xe0>
  430ec6:	3101      	adds	r1, #1
  430ec8:	42af      	cmp	r7, r5
  430eca:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  430ece:	54e6      	strb	r6, [r4, r3]
  430ed0:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  430ed4:	f000 80c4 	beq.w	431060 <d_print_mod+0x268>
  430ed8:	29ff      	cmp	r1, #255	@ 0xff
  430eda:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  430ede:	460b      	mov	r3, r1
  430ee0:	d1f1      	bne.n	430ec6 <d_print_mod+0xce>
  430ee2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430ee6:	4620      	mov	r0, r4
  430ee8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  430eec:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  430ef0:	4798      	blx	r3
  430ef2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430ef6:	2101      	movs	r1, #1
  430ef8:	3301      	adds	r3, #1
  430efa:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430efe:	2300      	movs	r3, #0
  430f00:	e7e2      	b.n	430ec8 <d_print_mod+0xd0>
  430f02:	4dbf      	ldr	r5, [pc, #764]	@ (431200 <d_print_mod+0x408>)
  430f04:	f04f 0800 	mov.w	r8, #0
  430f08:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  430f0c:	f105 0709 	add.w	r7, r5, #9
  430f10:	e008      	b.n	430f24 <d_print_mod+0x12c>
  430f12:	3101      	adds	r1, #1
  430f14:	42af      	cmp	r7, r5
  430f16:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  430f1a:	54e6      	strb	r6, [r4, r3]
  430f1c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  430f20:	f000 809e 	beq.w	431060 <d_print_mod+0x268>
  430f24:	29ff      	cmp	r1, #255	@ 0xff
  430f26:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  430f2a:	460b      	mov	r3, r1
  430f2c:	d1f1      	bne.n	430f12 <d_print_mod+0x11a>
  430f2e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430f32:	4620      	mov	r0, r4
  430f34:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  430f38:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  430f3c:	4798      	blx	r3
  430f3e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430f42:	2101      	movs	r1, #1
  430f44:	3301      	adds	r3, #1
  430f46:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430f4a:	2300      	movs	r3, #0
  430f4c:	e7e2      	b.n	430f14 <d_print_mod+0x11c>
  430f4e:	4dad      	ldr	r5, [pc, #692]	@ (431204 <d_print_mod+0x40c>)
  430f50:	f04f 0800 	mov.w	r8, #0
  430f54:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  430f58:	1daf      	adds	r7, r5, #6
  430f5a:	e007      	b.n	430f6c <d_print_mod+0x174>
  430f5c:	3101      	adds	r1, #1
  430f5e:	42af      	cmp	r7, r5
  430f60:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  430f64:	54e6      	strb	r6, [r4, r3]
  430f66:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  430f6a:	d079      	beq.n	431060 <d_print_mod+0x268>
  430f6c:	29ff      	cmp	r1, #255	@ 0xff
  430f6e:	f815 6b01 	ldrb.w	r6, [r5], #1
  430f72:	460b      	mov	r3, r1
  430f74:	d1f2      	bne.n	430f5c <d_print_mod+0x164>
  430f76:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430f7a:	4620      	mov	r0, r4
  430f7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  430f80:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  430f84:	4798      	blx	r3
  430f86:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430f8a:	2101      	movs	r1, #1
  430f8c:	3301      	adds	r3, #1
  430f8e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430f92:	2300      	movs	r3, #0
  430f94:	e7e3      	b.n	430f5e <d_print_mod+0x166>
  430f96:	4e9c      	ldr	r6, [pc, #624]	@ (431208 <d_print_mod+0x410>)
  430f98:	f04f 0800 	mov.w	r8, #0
  430f9c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  430fa0:	f106 0906 	add.w	r9, r6, #6
  430fa4:	e008      	b.n	430fb8 <d_print_mod+0x1c0>
  430fa6:	3101      	adds	r1, #1
  430fa8:	454e      	cmp	r6, r9
  430faa:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  430fae:	54e7      	strb	r7, [r4, r3]
  430fb0:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
  430fb4:	f000 8179 	beq.w	4312aa <d_print_mod+0x4b2>
  430fb8:	29ff      	cmp	r1, #255	@ 0xff
  430fba:	f816 7b01 	ldrb.w	r7, [r6], #1
  430fbe:	460b      	mov	r3, r1
  430fc0:	d1f1      	bne.n	430fa6 <d_print_mod+0x1ae>
  430fc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  430fc6:	4620      	mov	r0, r4
  430fc8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  430fcc:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  430fd0:	4798      	blx	r3
  430fd2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  430fd6:	2101      	movs	r1, #1
  430fd8:	3301      	adds	r3, #1
  430fda:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  430fde:	2300      	movs	r3, #0
  430fe0:	e7e2      	b.n	430fa8 <d_print_mod+0x1b0>
  430fe2:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
  430fe6:	2bff      	cmp	r3, #255	@ 0xff
  430fe8:	f000 81de 	beq.w	4313a8 <d_print_mod+0x5b0>
  430fec:	2220      	movs	r2, #32
  430fee:	1c59      	adds	r1, r3, #1
  430ff0:	f8c0 1100 	str.w	r1, [r0, #256]	@ 0x100
  430ff4:	54c2      	strb	r2, [r0, r3]
  430ff6:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
  430ffa:	e027      	b.n	43104c <d_print_mod+0x254>
  430ffc:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
  431000:	2bff      	cmp	r3, #255	@ 0xff
  431002:	f000 81b2 	beq.w	43136a <d_print_mod+0x572>
  431006:	1c59      	adds	r1, r3, #1
  431008:	2220      	movs	r2, #32
  43100a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43100e:	54e2      	strb	r2, [r4, r3]
  431010:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
  431014:	e028      	b.n	431068 <d_print_mod+0x270>
  431016:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  43101a:	29ff      	cmp	r1, #255	@ 0xff
  43101c:	f000 81b4 	beq.w	431388 <d_print_mod+0x590>
  431020:	1c4a      	adds	r2, r1, #1
  431022:	2320      	movs	r3, #32
  431024:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  431028:	4620      	mov	r0, r4
  43102a:	5463      	strb	r3, [r4, r1]
  43102c:	2111      	movs	r1, #17
  43102e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  431032:	692a      	ldr	r2, [r5, #16]
  431034:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  431038:	f7ff beb0 	b.w	430d9c <d_print_comp>
  43103c:	68ea      	ldr	r2, [r5, #12]
  43103e:	2111      	movs	r1, #17
  431040:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  431044:	f7ff beaa 	b.w	430d9c <d_print_comp>
  431048:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  43104c:	29ff      	cmp	r1, #255	@ 0xff
  43104e:	f000 81bc 	beq.w	4313ca <d_print_mod+0x5d2>
  431052:	1c4a      	adds	r2, r1, #1
  431054:	2326      	movs	r3, #38	@ 0x26
  431056:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  43105a:	5463      	strb	r3, [r4, r1]
  43105c:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  431060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  431064:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  431068:	4d68      	ldr	r5, [pc, #416]	@ (43120c <d_print_mod+0x414>)
  43106a:	f04f 0800 	mov.w	r8, #0
  43106e:	1caf      	adds	r7, r5, #2
  431070:	e007      	b.n	431082 <d_print_mod+0x28a>
  431072:	3101      	adds	r1, #1
  431074:	42af      	cmp	r7, r5
  431076:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43107a:	54e6      	strb	r6, [r4, r3]
  43107c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  431080:	d0ee      	beq.n	431060 <d_print_mod+0x268>
  431082:	29ff      	cmp	r1, #255	@ 0xff
  431084:	f815 6b01 	ldrb.w	r6, [r5], #1
  431088:	460b      	mov	r3, r1
  43108a:	d1f2      	bne.n	431072 <d_print_mod+0x27a>
  43108c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  431090:	4620      	mov	r0, r4
  431092:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  431096:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  43109a:	4798      	blx	r3
  43109c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4310a0:	2101      	movs	r1, #1
  4310a2:	3301      	adds	r3, #1
  4310a4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4310a8:	2300      	movs	r3, #0
  4310aa:	e7e3      	b.n	431074 <d_print_mod+0x27c>
  4310ac:	4d58      	ldr	r5, [pc, #352]	@ (431210 <d_print_mod+0x418>)
  4310ae:	f04f 0800 	mov.w	r8, #0
  4310b2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  4310b6:	f105 0709 	add.w	r7, r5, #9
  4310ba:	e007      	b.n	4310cc <d_print_mod+0x2d4>
  4310bc:	3101      	adds	r1, #1
  4310be:	42bd      	cmp	r5, r7
  4310c0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  4310c4:	54e6      	strb	r6, [r4, r3]
  4310c6:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  4310ca:	d0c9      	beq.n	431060 <d_print_mod+0x268>
  4310cc:	29ff      	cmp	r1, #255	@ 0xff
  4310ce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  4310d2:	460b      	mov	r3, r1
  4310d4:	d1f2      	bne.n	4310bc <d_print_mod+0x2c4>
  4310d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4310da:	4620      	mov	r0, r4
  4310dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4310e0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  4310e4:	4798      	blx	r3
  4310e6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4310ea:	2101      	movs	r1, #1
  4310ec:	3301      	adds	r3, #1
  4310ee:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4310f2:	2300      	movs	r3, #0
  4310f4:	e7e3      	b.n	4310be <d_print_mod+0x2c6>
  4310f6:	4d47      	ldr	r5, [pc, #284]	@ (431214 <d_print_mod+0x41c>)
  4310f8:	f04f 0800 	mov.w	r8, #0
  4310fc:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  431100:	f105 070b 	add.w	r7, r5, #11
  431104:	e007      	b.n	431116 <d_print_mod+0x31e>
  431106:	3101      	adds	r1, #1
  431108:	42af      	cmp	r7, r5
  43110a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43110e:	54e6      	strb	r6, [r4, r3]
  431110:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  431114:	d0a4      	beq.n	431060 <d_print_mod+0x268>
  431116:	29ff      	cmp	r1, #255	@ 0xff
  431118:	f815 6b01 	ldrb.w	r6, [r5], #1
  43111c:	460b      	mov	r3, r1
  43111e:	d1f2      	bne.n	431106 <d_print_mod+0x30e>
  431120:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  431124:	4620      	mov	r0, r4
  431126:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  43112a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  43112e:	4798      	blx	r3
  431130:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  431134:	2101      	movs	r1, #1
  431136:	3301      	adds	r3, #1
  431138:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43113c:	2300      	movs	r3, #0
  43113e:	e7e3      	b.n	431108 <d_print_mod+0x310>
  431140:	f890 3104 	ldrb.w	r3, [r0, #260]	@ 0x104
  431144:	2b28      	cmp	r3, #40	@ 0x28
  431146:	f040 80e6 	bne.w	431316 <d_print_mod+0x51e>
  43114a:	68ea      	ldr	r2, [r5, #12]
  43114c:	2111      	movs	r1, #17
  43114e:	4d32      	ldr	r5, [pc, #200]	@ (431218 <d_print_mod+0x420>)
  431150:	4620      	mov	r0, r4
  431152:	f7ff fe23 	bl	430d9c <d_print_comp>
  431156:	f04f 0800 	mov.w	r8, #0
  43115a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  43115e:	1cef      	adds	r7, r5, #3
  431160:	e008      	b.n	431174 <d_print_mod+0x37c>
  431162:	3101      	adds	r1, #1
  431164:	42af      	cmp	r7, r5
  431166:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43116a:	54e6      	strb	r6, [r4, r3]
  43116c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  431170:	f43f af76 	beq.w	431060 <d_print_mod+0x268>
  431174:	29ff      	cmp	r1, #255	@ 0xff
  431176:	f815 6b01 	ldrb.w	r6, [r5], #1
  43117a:	460b      	mov	r3, r1
  43117c:	d1f1      	bne.n	431162 <d_print_mod+0x36a>
  43117e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  431182:	4620      	mov	r0, r4
  431184:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  431188:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  43118c:	4798      	blx	r3
  43118e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  431192:	2101      	movs	r1, #1
  431194:	3301      	adds	r3, #1
  431196:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43119a:	2300      	movs	r3, #0
  43119c:	e7e2      	b.n	431164 <d_print_mod+0x36c>
  43119e:	4e1f      	ldr	r6, [pc, #124]	@ (43121c <d_print_mod+0x424>)
  4311a0:	f04f 0800 	mov.w	r8, #0
  4311a4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  4311a8:	f106 090a 	add.w	r9, r6, #10
  4311ac:	e008      	b.n	4311c0 <d_print_mod+0x3c8>
  4311ae:	3101      	adds	r1, #1
  4311b0:	454e      	cmp	r6, r9
  4311b2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  4311b6:	54e7      	strb	r7, [r4, r3]
  4311b8:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
  4311bc:	f000 8099 	beq.w	4312f2 <d_print_mod+0x4fa>
  4311c0:	29ff      	cmp	r1, #255	@ 0xff
  4311c2:	f816 7b01 	ldrb.w	r7, [r6], #1
  4311c6:	460b      	mov	r3, r1
  4311c8:	d1f1      	bne.n	4311ae <d_print_mod+0x3b6>
  4311ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4311ce:	4620      	mov	r0, r4
  4311d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4311d4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  4311d8:	4798      	blx	r3
  4311da:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4311de:	2101      	movs	r1, #1
  4311e0:	3301      	adds	r3, #1
  4311e2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4311e6:	2300      	movs	r3, #0
  4311e8:	e7e2      	b.n	4311b0 <d_print_mod+0x3b8>
  4311ea:	4d0d      	ldr	r5, [pc, #52]	@ (431220 <d_print_mod+0x428>)
  4311ec:	f04f 0800 	mov.w	r8, #0
  4311f0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  4311f4:	f105 0711 	add.w	r7, r5, #17
  4311f8:	e01d      	b.n	431236 <d_print_mod+0x43e>
  4311fa:	bf00      	nop
  4311fc:	0043545f 	.word	0x0043545f
  431200:	0043546b 	.word	0x0043546b
  431204:	00435478 	.word	0x00435478
  431208:	004354a0 	.word	0x004354a0
  43120c:	004354a8 	.word	0x004354a8
  431210:	004354ab 	.word	0x004354ab
  431214:	004354b8 	.word	0x004354b8
  431218:	004354c4 	.word	0x004354c4
  43121c:	004354c8 	.word	0x004354c8
  431220:	0043547f 	.word	0x0043547f
  431224:	3101      	adds	r1, #1
  431226:	42af      	cmp	r7, r5
  431228:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43122c:	54e6      	strb	r6, [r4, r3]
  43122e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  431232:	f43f af15 	beq.w	431060 <d_print_mod+0x268>
  431236:	29ff      	cmp	r1, #255	@ 0xff
  431238:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  43123c:	460b      	mov	r3, r1
  43123e:	d1f1      	bne.n	431224 <d_print_mod+0x42c>
  431240:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  431244:	4620      	mov	r0, r4
  431246:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  43124a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  43124e:	4798      	blx	r3
  431250:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  431254:	2101      	movs	r1, #1
  431256:	3301      	adds	r3, #1
  431258:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43125c:	2300      	movs	r3, #0
  43125e:	e7e2      	b.n	431226 <d_print_mod+0x42e>
  431260:	4e70      	ldr	r6, [pc, #448]	@ (431424 <d_print_mod+0x62c>)
  431262:	f04f 0800 	mov.w	r8, #0
  431266:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  43126a:	f106 0909 	add.w	r9, r6, #9
  43126e:	e007      	b.n	431280 <d_print_mod+0x488>
  431270:	3101      	adds	r1, #1
  431272:	45b1      	cmp	r9, r6
  431274:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  431278:	54e7      	strb	r7, [r4, r3]
  43127a:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
  43127e:	d014      	beq.n	4312aa <d_print_mod+0x4b2>
  431280:	29ff      	cmp	r1, #255	@ 0xff
  431282:	f816 7f01 	ldrb.w	r7, [r6, #1]!
  431286:	460b      	mov	r3, r1
  431288:	d1f2      	bne.n	431270 <d_print_mod+0x478>
  43128a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  43128e:	4620      	mov	r0, r4
  431290:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  431294:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  431298:	4798      	blx	r3
  43129a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43129e:	2101      	movs	r1, #1
  4312a0:	3301      	adds	r3, #1
  4312a2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4312a6:	2300      	movs	r3, #0
  4312a8:	e7e3      	b.n	431272 <d_print_mod+0x47a>
  4312aa:	692a      	ldr	r2, [r5, #16]
  4312ac:	2a00      	cmp	r2, #0
  4312ae:	f43f aed7 	beq.w	431060 <d_print_mod+0x268>
  4312b2:	29ff      	cmp	r1, #255	@ 0xff
  4312b4:	d047      	beq.n	431346 <d_print_mod+0x54e>
  4312b6:	1c48      	adds	r0, r1, #1
  4312b8:	2328      	movs	r3, #40	@ 0x28
  4312ba:	f8c4 0100 	str.w	r0, [r4, #256]	@ 0x100
  4312be:	4620      	mov	r0, r4
  4312c0:	5463      	strb	r3, [r4, r1]
  4312c2:	2111      	movs	r1, #17
  4312c4:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  4312c8:	f7ff fd68 	bl	430d9c <d_print_comp>
  4312cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  4312d0:	29ff      	cmp	r1, #255	@ 0xff
  4312d2:	d117      	bne.n	431304 <d_print_mod+0x50c>
  4312d4:	2500      	movs	r5, #0
  4312d6:	4620      	mov	r0, r4
  4312d8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  4312dc:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  4312e0:	4798      	blx	r3
  4312e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4312e6:	2201      	movs	r2, #1
  4312e8:	4629      	mov	r1, r5
  4312ea:	4413      	add	r3, r2
  4312ec:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4312f0:	e009      	b.n	431306 <d_print_mod+0x50e>
  4312f2:	2111      	movs	r1, #17
  4312f4:	68ea      	ldr	r2, [r5, #12]
  4312f6:	4620      	mov	r0, r4
  4312f8:	f7ff fd50 	bl	430d9c <d_print_comp>
  4312fc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  431300:	29ff      	cmp	r1, #255	@ 0xff
  431302:	d0e7      	beq.n	4312d4 <d_print_mod+0x4dc>
  431304:	1c4a      	adds	r2, r1, #1
  431306:	2329      	movs	r3, #41	@ 0x29
  431308:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  43130c:	5463      	strb	r3, [r4, r1]
  43130e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  431312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  431316:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  43131a:	29ff      	cmp	r1, #255	@ 0xff
  43131c:	d064      	beq.n	4313e8 <d_print_mod+0x5f0>
  43131e:	1c4a      	adds	r2, r1, #1
  431320:	2320      	movs	r3, #32
  431322:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  431326:	5463      	strb	r3, [r4, r1]
  431328:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  43132c:	e70d      	b.n	43114a <d_print_mod+0x352>
  43132e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  431332:	29ff      	cmp	r1, #255	@ 0xff
  431334:	d068      	beq.n	431408 <d_print_mod+0x610>
  431336:	1c4a      	adds	r2, r1, #1
  431338:	232a      	movs	r3, #42	@ 0x2a
  43133a:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  43133e:	5463      	strb	r3, [r4, r1]
  431340:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  431344:	e68c      	b.n	431060 <d_print_mod+0x268>
  431346:	2600      	movs	r6, #0
  431348:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  43134c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  431350:	4620      	mov	r0, r4
  431352:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
  431356:	4798      	blx	r3
  431358:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43135c:	2001      	movs	r0, #1
  43135e:	692a      	ldr	r2, [r5, #16]
  431360:	4631      	mov	r1, r6
  431362:	4403      	add	r3, r0
  431364:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  431368:	e7a6      	b.n	4312b8 <d_print_mod+0x4c0>
  43136a:	2500      	movs	r5, #0
  43136c:	4619      	mov	r1, r3
  43136e:	e9d0 6242 	ldrd	r6, r2, [r0, #264]	@ 0x108
  431372:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
  431376:	47b0      	blx	r6
  431378:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
  43137c:	2101      	movs	r1, #1
  43137e:	462b      	mov	r3, r5
  431380:	440a      	add	r2, r1
  431382:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
  431386:	e63f      	b.n	431008 <d_print_mod+0x210>
  431388:	2600      	movs	r6, #0
  43138a:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
  43138e:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
  431392:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
  431396:	4798      	blx	r3
  431398:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43139c:	2201      	movs	r2, #1
  43139e:	4631      	mov	r1, r6
  4313a0:	4413      	add	r3, r2
  4313a2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4313a6:	e63c      	b.n	431022 <d_print_mod+0x22a>
  4313a8:	2000      	movs	r0, #0
  4313aa:	4619      	mov	r1, r3
  4313ac:	e9d4 5242 	ldrd	r5, r2, [r4, #264]	@ 0x108
  4313b0:	f884 00ff 	strb.w	r0, [r4, #255]	@ 0xff
  4313b4:	4620      	mov	r0, r4
  4313b6:	47a8      	blx	r5
  4313b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4313bc:	2101      	movs	r1, #1
  4313be:	2220      	movs	r2, #32
  4313c0:	440b      	add	r3, r1
  4313c2:	7022      	strb	r2, [r4, #0]
  4313c4:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4313c8:	e643      	b.n	431052 <d_print_mod+0x25a>
  4313ca:	2500      	movs	r5, #0
  4313cc:	4620      	mov	r0, r4
  4313ce:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  4313d2:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  4313d6:	4798      	blx	r3
  4313d8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4313dc:	2201      	movs	r2, #1
  4313de:	4629      	mov	r1, r5
  4313e0:	4413      	add	r3, r2
  4313e2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4313e6:	e635      	b.n	431054 <d_print_mod+0x25c>
  4313e8:	2600      	movs	r6, #0
  4313ea:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
  4313ee:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
  4313f2:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
  4313f6:	4798      	blx	r3
  4313f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4313fc:	2201      	movs	r2, #1
  4313fe:	4631      	mov	r1, r6
  431400:	4413      	add	r3, r2
  431402:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  431406:	e78b      	b.n	431320 <d_print_mod+0x528>
  431408:	2500      	movs	r5, #0
  43140a:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
  43140e:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
  431412:	4798      	blx	r3
  431414:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  431418:	2201      	movs	r2, #1
  43141a:	4629      	mov	r1, r5
  43141c:	4413      	add	r3, r2
  43141e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  431422:	e789      	b.n	431338 <d_print_mod+0x540>
  431424:	00435493 	.word	0x00435493

00431428 <d_print_function_type>:
  431428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  43142c:	4604      	mov	r4, r0
  43142e:	4616      	mov	r6, r2
  431430:	461d      	mov	r5, r3
  431432:	2b00      	cmp	r3, #0
  431434:	d061      	beq.n	4314fa <d_print_function_type+0xd2>
  431436:	2001      	movs	r0, #1
  431438:	4f6a      	ldr	r7, [pc, #424]	@ (4315e4 <d_print_function_type+0x1bc>)
  43143a:	689a      	ldr	r2, [r3, #8]
  43143c:	2a00      	cmp	r2, #0
  43143e:	d15c      	bne.n	4314fa <d_print_function_type+0xd2>
  431440:	685a      	ldr	r2, [r3, #4]
  431442:	7811      	ldrb	r1, [r2, #0]
  431444:	3919      	subs	r1, #25
  431446:	b2c9      	uxtb	r1, r1
  431448:	2912      	cmp	r1, #18
  43144a:	fa00 f201 	lsl.w	r2, r0, r1
  43144e:	d851      	bhi.n	4314f4 <d_print_function_type+0xcc>
  431450:	423a      	tst	r2, r7
  431452:	d178      	bne.n	431546 <d_print_function_type+0x11e>
  431454:	f412 6f60 	tst.w	r2, #3584	@ 0xe00
  431458:	d04c      	beq.n	4314f4 <d_print_function_type+0xcc>
  43145a:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
  43145e:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
  431462:	2a28      	cmp	r2, #40	@ 0x28
  431464:	d171      	bne.n	43154a <d_print_function_type+0x122>
  431466:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  43146a:	29ff      	cmp	r1, #255	@ 0xff
  43146c:	d07d      	beq.n	43156a <d_print_function_type+0x142>
  43146e:	1c4b      	adds	r3, r1, #1
  431470:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  431474:	f04f 0800 	mov.w	r8, #0
  431478:	2328      	movs	r3, #40	@ 0x28
  43147a:	462a      	mov	r2, r5
  43147c:	4620      	mov	r0, r4
  43147e:	5463      	strb	r3, [r4, r1]
  431480:	2111      	movs	r1, #17
  431482:	f8d4 7114 	ldr.w	r7, [r4, #276]	@ 0x114
  431486:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  43148a:	4643      	mov	r3, r8
  43148c:	f8c4 8114 	str.w	r8, [r4, #276]	@ 0x114
  431490:	f000 f8aa 	bl	4315e8 <d_print_mod_list>
  431494:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  431498:	29ff      	cmp	r1, #255	@ 0xff
  43149a:	f000 8084 	beq.w	4315a6 <d_print_function_type+0x17e>
  43149e:	1c4b      	adds	r3, r1, #1
  4314a0:	2229      	movs	r2, #41	@ 0x29
  4314a2:	2bff      	cmp	r3, #255	@ 0xff
  4314a4:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  4314a8:	5462      	strb	r2, [r4, r1]
  4314aa:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
  4314ae:	d032      	beq.n	431516 <d_print_function_type+0xee>
  4314b0:	2228      	movs	r2, #40	@ 0x28
  4314b2:	1c59      	adds	r1, r3, #1
  4314b4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  4314b8:	54e2      	strb	r2, [r4, r3]
  4314ba:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
  4314be:	6932      	ldr	r2, [r6, #16]
  4314c0:	b12a      	cbz	r2, 4314ce <d_print_function_type+0xa6>
  4314c2:	2111      	movs	r1, #17
  4314c4:	4620      	mov	r0, r4
  4314c6:	f7ff fc69 	bl	430d9c <d_print_comp>
  4314ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  4314ce:	29ff      	cmp	r1, #255	@ 0xff
  4314d0:	d05a      	beq.n	431588 <d_print_function_type+0x160>
  4314d2:	1c4b      	adds	r3, r1, #1
  4314d4:	2029      	movs	r0, #41	@ 0x29
  4314d6:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  4314da:	462a      	mov	r2, r5
  4314dc:	2301      	movs	r3, #1
  4314de:	5460      	strb	r0, [r4, r1]
  4314e0:	2111      	movs	r1, #17
  4314e2:	f884 0104 	strb.w	r0, [r4, #260]	@ 0x104
  4314e6:	4620      	mov	r0, r4
  4314e8:	f000 f87e 	bl	4315e8 <d_print_mod_list>
  4314ec:	f8c4 7114 	str.w	r7, [r4, #276]	@ 0x114
  4314f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4314f4:	681b      	ldr	r3, [r3, #0]
  4314f6:	2b00      	cmp	r3, #0
  4314f8:	d19f      	bne.n	43143a <d_print_function_type+0x12>
  4314fa:	2300      	movs	r3, #0
  4314fc:	f8d4 7114 	ldr.w	r7, [r4, #276]	@ 0x114
  431500:	462a      	mov	r2, r5
  431502:	2111      	movs	r1, #17
  431504:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
  431508:	4620      	mov	r0, r4
  43150a:	f000 f86d 	bl	4315e8 <d_print_mod_list>
  43150e:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
  431512:	2bff      	cmp	r3, #255	@ 0xff
  431514:	d1cc      	bne.n	4314b0 <d_print_function_type+0x88>
  431516:	4619      	mov	r1, r3
  431518:	2300      	movs	r3, #0
  43151a:	4620      	mov	r0, r4
  43151c:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
  431520:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  431524:	4798      	blx	r3
  431526:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43152a:	2101      	movs	r1, #1
  43152c:	3301      	adds	r3, #1
  43152e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  431532:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  431536:	2328      	movs	r3, #40	@ 0x28
  431538:	7023      	strb	r3, [r4, #0]
  43153a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  43153e:	6932      	ldr	r2, [r6, #16]
  431540:	2a00      	cmp	r2, #0
  431542:	d1be      	bne.n	4314c2 <d_print_function_type+0x9a>
  431544:	e7c5      	b.n	4314d2 <d_print_function_type+0xaa>
  431546:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
  43154a:	2b20      	cmp	r3, #32
  43154c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  431550:	d08b      	beq.n	43146a <d_print_function_type+0x42>
  431552:	29ff      	cmp	r1, #255	@ 0xff
  431554:	d036      	beq.n	4315c4 <d_print_function_type+0x19c>
  431556:	1c4a      	adds	r2, r1, #1
  431558:	2320      	movs	r3, #32
  43155a:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  43155e:	5463      	strb	r3, [r4, r1]
  431560:	4611      	mov	r1, r2
  431562:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  431566:	29ff      	cmp	r1, #255	@ 0xff
  431568:	d181      	bne.n	43146e <d_print_function_type+0x46>
  43156a:	2700      	movs	r7, #0
  43156c:	4620      	mov	r0, r4
  43156e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  431572:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
  431576:	4798      	blx	r3
  431578:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43157c:	4639      	mov	r1, r7
  43157e:	3301      	adds	r3, #1
  431580:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  431584:	2301      	movs	r3, #1
  431586:	e773      	b.n	431470 <d_print_function_type+0x48>
  431588:	2600      	movs	r6, #0
  43158a:	4620      	mov	r0, r4
  43158c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  431590:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
  431594:	4798      	blx	r3
  431596:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  43159a:	4631      	mov	r1, r6
  43159c:	3301      	adds	r3, #1
  43159e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4315a2:	2301      	movs	r3, #1
  4315a4:	e796      	b.n	4314d4 <d_print_function_type+0xac>
  4315a6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  4315aa:	4620      	mov	r0, r4
  4315ac:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  4315b0:	4798      	blx	r3
  4315b2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4315b6:	3301      	adds	r3, #1
  4315b8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4315bc:	2329      	movs	r3, #41	@ 0x29
  4315be:	7023      	strb	r3, [r4, #0]
  4315c0:	2301      	movs	r3, #1
  4315c2:	e775      	b.n	4314b0 <d_print_function_type+0x88>
  4315c4:	2300      	movs	r3, #0
  4315c6:	4620      	mov	r0, r4
  4315c8:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
  4315cc:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  4315d0:	4798      	blx	r3
  4315d2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4315d6:	2220      	movs	r2, #32
  4315d8:	2101      	movs	r1, #1
  4315da:	3301      	adds	r3, #1
  4315dc:	7022      	strb	r2, [r4, #0]
  4315de:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4315e2:	e744      	b.n	43146e <d_print_function_type+0x46>
  4315e4:	00043107 	.word	0x00043107

004315e8 <d_print_mod_list>:
  4315e8:	2a00      	cmp	r2, #0
  4315ea:	f000 80c0 	beq.w	43176e <d_print_mod_list+0x186>
  4315ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4315f2:	4605      	mov	r5, r0
  4315f4:	b088      	sub	sp, #32
  4315f6:	4614      	mov	r4, r2
  4315f8:	461e      	mov	r6, r3
  4315fa:	2701      	movs	r7, #1
  4315fc:	f8d5 2118 	ldr.w	r2, [r5, #280]	@ 0x118
  431600:	bb02      	cbnz	r2, 431644 <d_print_mod_list+0x5c>
  431602:	68a2      	ldr	r2, [r4, #8]
  431604:	bb0a      	cbnz	r2, 43164a <d_print_mod_list+0x62>
  431606:	6862      	ldr	r2, [r4, #4]
  431608:	7811      	ldrb	r1, [r2, #0]
  43160a:	b936      	cbnz	r6, 43161a <d_print_mod_list+0x32>
  43160c:	294e      	cmp	r1, #78	@ 0x4e
  43160e:	d01c      	beq.n	43164a <d_print_mod_list+0x62>
  431610:	d81f      	bhi.n	431652 <d_print_mod_list+0x6a>
  431612:	f1a1 031c 	sub.w	r3, r1, #28
  431616:	2b04      	cmp	r3, #4
  431618:	d917      	bls.n	43164a <d_print_mod_list+0x62>
  43161a:	68e3      	ldr	r3, [r4, #12]
  43161c:	2929      	cmp	r1, #41	@ 0x29
  43161e:	f8d5 8110 	ldr.w	r8, [r5, #272]	@ 0x110
  431622:	60a7      	str	r7, [r4, #8]
  431624:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
  431628:	d01e      	beq.n	431668 <d_print_mod_list+0x80>
  43162a:	292a      	cmp	r1, #42	@ 0x2a
  43162c:	d026      	beq.n	43167c <d_print_mod_list+0x94>
  43162e:	2902      	cmp	r1, #2
  431630:	d02e      	beq.n	431690 <d_print_mod_list+0xa8>
  431632:	2111      	movs	r1, #17
  431634:	4628      	mov	r0, r5
  431636:	f7ff fbdf 	bl	430df8 <d_print_mod>
  43163a:	6824      	ldr	r4, [r4, #0]
  43163c:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
  431640:	2c00      	cmp	r4, #0
  431642:	d1db      	bne.n	4315fc <d_print_mod_list+0x14>
  431644:	b008      	add	sp, #32
  431646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  43164a:	6824      	ldr	r4, [r4, #0]
  43164c:	2c00      	cmp	r4, #0
  43164e:	d1d5      	bne.n	4315fc <d_print_mod_list+0x14>
  431650:	e7f8      	b.n	431644 <d_print_mod_list+0x5c>
  431652:	3950      	subs	r1, #80	@ 0x50
  431654:	2901      	cmp	r1, #1
  431656:	d9f8      	bls.n	43164a <d_print_mod_list+0x62>
  431658:	2301      	movs	r3, #1
  43165a:	f8d5 8110 	ldr.w	r8, [r5, #272]	@ 0x110
  43165e:	60a3      	str	r3, [r4, #8]
  431660:	68e3      	ldr	r3, [r4, #12]
  431662:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
  431666:	e7e4      	b.n	431632 <d_print_mod_list+0x4a>
  431668:	6823      	ldr	r3, [r4, #0]
  43166a:	2111      	movs	r1, #17
  43166c:	4628      	mov	r0, r5
  43166e:	f7ff fedb 	bl	431428 <d_print_function_type>
  431672:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
  431676:	b008      	add	sp, #32
  431678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  43167c:	6823      	ldr	r3, [r4, #0]
  43167e:	2111      	movs	r1, #17
  431680:	4628      	mov	r0, r5
  431682:	f000 f8d1 	bl	431828 <d_print_array_type>
  431686:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
  43168a:	b008      	add	sp, #32
  43168c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  431690:	2300      	movs	r3, #0
  431692:	f8d5 7114 	ldr.w	r7, [r5, #276]	@ 0x114
  431696:	4e60      	ldr	r6, [pc, #384]	@ (431818 <d_print_mod_list+0x230>)
  431698:	2111      	movs	r1, #17
  43169a:	68d2      	ldr	r2, [r2, #12]
  43169c:	4628      	mov	r0, r5
  43169e:	f8c5 3114 	str.w	r3, [r5, #276]	@ 0x114
  4316a2:	f106 0902 	add.w	r9, r6, #2
  4316a6:	f7ff fb79 	bl	430d9c <d_print_comp>
  4316aa:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
  4316ae:	f8c5 7114 	str.w	r7, [r5, #276]	@ 0x114
  4316b2:	e007      	b.n	4316c4 <d_print_mod_list+0xdc>
  4316b4:	3101      	adds	r1, #1
  4316b6:	454e      	cmp	r6, r9
  4316b8:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
  4316bc:	54ef      	strb	r7, [r5, r3]
  4316be:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
  4316c2:	d014      	beq.n	4316ee <d_print_mod_list+0x106>
  4316c4:	29ff      	cmp	r1, #255	@ 0xff
  4316c6:	f816 7b01 	ldrb.w	r7, [r6], #1
  4316ca:	460b      	mov	r3, r1
  4316cc:	d1f2      	bne.n	4316b4 <d_print_mod_list+0xcc>
  4316ce:	f04f 0a00 	mov.w	sl, #0
  4316d2:	4628      	mov	r0, r5
  4316d4:	e9d5 3242 	ldrd	r3, r2, [r5, #264]	@ 0x108
  4316d8:	f885 a0ff 	strb.w	sl, [r5, #255]	@ 0xff
  4316dc:	4798      	blx	r3
  4316de:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
  4316e2:	4653      	mov	r3, sl
  4316e4:	2101      	movs	r1, #1
  4316e6:	3201      	adds	r2, #1
  4316e8:	f8c5 2128 	str.w	r2, [r5, #296]	@ 0x128
  4316ec:	e7e3      	b.n	4316b6 <d_print_mod_list+0xce>
  4316ee:	6863      	ldr	r3, [r4, #4]
  4316f0:	691c      	ldr	r4, [r3, #16]
  4316f2:	7823      	ldrb	r3, [r4, #0]
  4316f4:	2b48      	cmp	r3, #72	@ 0x48
  4316f6:	d017      	beq.n	431728 <d_print_mod_list+0x140>
  4316f8:	2b4e      	cmp	r3, #78	@ 0x4e
  4316fa:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
  4316fe:	f1a3 011c 	sub.w	r1, r3, #28
  431702:	d00e      	beq.n	431722 <d_print_mod_list+0x13a>
  431704:	d80b      	bhi.n	43171e <d_print_mod_list+0x136>
  431706:	2904      	cmp	r1, #4
  431708:	d90b      	bls.n	431722 <d_print_mod_list+0x13a>
  43170a:	4622      	mov	r2, r4
  43170c:	2111      	movs	r1, #17
  43170e:	4628      	mov	r0, r5
  431710:	f7ff fb44 	bl	430d9c <d_print_comp>
  431714:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
  431718:	b008      	add	sp, #32
  43171a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  43171e:	2a01      	cmp	r2, #1
  431720:	d8f3      	bhi.n	43170a <d_print_mod_list+0x122>
  431722:	68e4      	ldr	r4, [r4, #12]
  431724:	7823      	ldrb	r3, [r4, #0]
  431726:	e7e7      	b.n	4316f8 <d_print_mod_list+0x110>
  431728:	4e3c      	ldr	r6, [pc, #240]	@ (43181c <d_print_mod_list+0x234>)
  43172a:	f04f 0900 	mov.w	r9, #0
  43172e:	f106 0a0d 	add.w	sl, r6, #13
  431732:	e007      	b.n	431744 <d_print_mod_list+0x15c>
  431734:	3101      	adds	r1, #1
  431736:	4556      	cmp	r6, sl
  431738:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
  43173c:	54ef      	strb	r7, [r5, r3]
  43173e:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
  431742:	d015      	beq.n	431770 <d_print_mod_list+0x188>
  431744:	29ff      	cmp	r1, #255	@ 0xff
  431746:	f816 7b01 	ldrb.w	r7, [r6], #1
  43174a:	460b      	mov	r3, r1
  43174c:	d1f2      	bne.n	431734 <d_print_mod_list+0x14c>
  43174e:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
  431752:	4628      	mov	r0, r5
  431754:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
  431758:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
  43175c:	4798      	blx	r3
  43175e:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
  431762:	2101      	movs	r1, #1
  431764:	3301      	adds	r3, #1
  431766:	f8c5 3128 	str.w	r3, [r5, #296]	@ 0x128
  43176a:	2300      	movs	r3, #0
  43176c:	e7e3      	b.n	431736 <d_print_mod_list+0x14e>
  43176e:	4770      	bx	lr
  431770:	6922      	ldr	r2, [r4, #16]
  431772:	a801      	add	r0, sp, #4
  431774:	492a      	ldr	r1, [pc, #168]	@ (431820 <d_print_mod_list+0x238>)
  431776:	3201      	adds	r2, #1
  431778:	f001 f814 	bl	4327a4 <sprintf>
  43177c:	a801      	add	r0, sp, #4
  43177e:	f7ef fc25 	bl	420fcc <strlen>
  431782:	4682      	mov	sl, r0
  431784:	b318      	cbz	r0, 4317ce <d_print_mod_list+0x1e6>
  431786:	ae01      	add	r6, sp, #4
  431788:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
  43178c:	f04f 0900 	mov.w	r9, #0
  431790:	44b2      	add	sl, r6
  431792:	e007      	b.n	4317a4 <d_print_mod_list+0x1bc>
  431794:	3101      	adds	r1, #1
  431796:	4556      	cmp	r6, sl
  431798:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
  43179c:	54ef      	strb	r7, [r5, r3]
  43179e:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
  4317a2:	d016      	beq.n	4317d2 <d_print_mod_list+0x1ea>
  4317a4:	29ff      	cmp	r1, #255	@ 0xff
  4317a6:	f816 7b01 	ldrb.w	r7, [r6], #1
  4317aa:	460b      	mov	r3, r1
  4317ac:	d1f2      	bne.n	431794 <d_print_mod_list+0x1ac>
  4317ae:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
  4317b2:	4628      	mov	r0, r5
  4317b4:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
  4317b8:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
  4317bc:	4798      	blx	r3
  4317be:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
  4317c2:	2101      	movs	r1, #1
  4317c4:	3301      	adds	r3, #1
  4317c6:	f8c5 3128 	str.w	r3, [r5, #296]	@ 0x128
  4317ca:	2300      	movs	r3, #0
  4317cc:	e7e3      	b.n	431796 <d_print_mod_list+0x1ae>
  4317ce:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
  4317d2:	4e14      	ldr	r6, [pc, #80]	@ (431824 <d_print_mod_list+0x23c>)
  4317d4:	f04f 0900 	mov.w	r9, #0
  4317d8:	f106 0a03 	add.w	sl, r6, #3
  4317dc:	e007      	b.n	4317ee <d_print_mod_list+0x206>
  4317de:	3101      	adds	r1, #1
  4317e0:	4556      	cmp	r6, sl
  4317e2:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
  4317e6:	54ef      	strb	r7, [r5, r3]
  4317e8:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
  4317ec:	d099      	beq.n	431722 <d_print_mod_list+0x13a>
  4317ee:	29ff      	cmp	r1, #255	@ 0xff
  4317f0:	f816 7b01 	ldrb.w	r7, [r6], #1
  4317f4:	460b      	mov	r3, r1
  4317f6:	d1f2      	bne.n	4317de <d_print_mod_list+0x1f6>
  4317f8:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
  4317fc:	4628      	mov	r0, r5
  4317fe:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
  431802:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
  431806:	4798      	blx	r3
  431808:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
  43180c:	2101      	movs	r1, #1
  43180e:	3301      	adds	r3, #1
  431810:	f8c5 3128 	str.w	r3, [r5, #296]	@ 0x128
  431814:	2300      	movs	r3, #0
  431816:	e7e3      	b.n	4317e0 <d_print_mod_list+0x1f8>
  431818:	004351b8 	.word	0x004351b8
  43181c:	004351bc 	.word	0x004351bc
  431820:	00435144 	.word	0x00435144
  431824:	004351cc 	.word	0x004351cc

00431828 <d_print_array_type>:
  431828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  43182c:	4604      	mov	r4, r0
  43182e:	4616      	mov	r6, r2
  431830:	b39b      	cbz	r3, 43189a <d_print_array_type+0x72>
  431832:	461f      	mov	r7, r3
  431834:	e001      	b.n	43183a <d_print_array_type+0x12>
  431836:	681b      	ldr	r3, [r3, #0]
  431838:	b353      	cbz	r3, 431890 <d_print_array_type+0x68>
  43183a:	689d      	ldr	r5, [r3, #8]
  43183c:	2d00      	cmp	r5, #0
  43183e:	d1fa      	bne.n	431836 <d_print_array_type+0xe>
  431840:	685b      	ldr	r3, [r3, #4]
  431842:	781b      	ldrb	r3, [r3, #0]
  431844:	2b2a      	cmp	r3, #42	@ 0x2a
  431846:	d15e      	bne.n	431906 <d_print_array_type+0xde>
  431848:	2111      	movs	r1, #17
  43184a:	462b      	mov	r3, r5
  43184c:	463a      	mov	r2, r7
  43184e:	4620      	mov	r0, r4
  431850:	f7ff feca 	bl	4315e8 <d_print_mod_list>
  431854:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  431858:	29ff      	cmp	r1, #255	@ 0xff
  43185a:	d02b      	beq.n	4318b4 <d_print_array_type+0x8c>
  43185c:	225b      	movs	r2, #91	@ 0x5b
  43185e:	1c4b      	adds	r3, r1, #1
  431860:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  431864:	5462      	strb	r2, [r4, r1]
  431866:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
  43186a:	68f2      	ldr	r2, [r6, #12]
  43186c:	b12a      	cbz	r2, 43187a <d_print_array_type+0x52>
  43186e:	2111      	movs	r1, #17
  431870:	4620      	mov	r0, r4
  431872:	f7ff fa93 	bl	430d9c <d_print_comp>
  431876:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
  43187a:	2bff      	cmp	r3, #255	@ 0xff
  43187c:	d033      	beq.n	4318e6 <d_print_array_type+0xbe>
  43187e:	1c59      	adds	r1, r3, #1
  431880:	225d      	movs	r2, #93	@ 0x5d
  431882:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  431886:	54e2      	strb	r2, [r4, r3]
  431888:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
  43188c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  431890:	463a      	mov	r2, r7
  431892:	2111      	movs	r1, #17
  431894:	4620      	mov	r0, r4
  431896:	f7ff fea7 	bl	4315e8 <d_print_mod_list>
  43189a:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
  43189e:	2bff      	cmp	r3, #255	@ 0xff
  4318a0:	d072      	beq.n	431988 <d_print_array_type+0x160>
  4318a2:	1c59      	adds	r1, r3, #1
  4318a4:	2220      	movs	r2, #32
  4318a6:	29ff      	cmp	r1, #255	@ 0xff
  4318a8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  4318ac:	54e2      	strb	r2, [r4, r3]
  4318ae:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
  4318b2:	d1d3      	bne.n	43185c <d_print_array_type+0x34>
  4318b4:	2200      	movs	r2, #0
  4318b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4318ba:	4620      	mov	r0, r4
  4318bc:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
  4318c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4318c4:	4798      	blx	r3
  4318c6:	215b      	movs	r1, #91	@ 0x5b
  4318c8:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
  4318cc:	2301      	movs	r3, #1
  4318ce:	7021      	strb	r1, [r4, #0]
  4318d0:	f884 1104 	strb.w	r1, [r4, #260]	@ 0x104
  4318d4:	18d1      	adds	r1, r2, r3
  4318d6:	68f2      	ldr	r2, [r6, #12]
  4318d8:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  4318dc:	f8c4 1128 	str.w	r1, [r4, #296]	@ 0x128
  4318e0:	2a00      	cmp	r2, #0
  4318e2:	d1c4      	bne.n	43186e <d_print_array_type+0x46>
  4318e4:	e7cb      	b.n	43187e <d_print_array_type+0x56>
  4318e6:	2500      	movs	r5, #0
  4318e8:	4619      	mov	r1, r3
  4318ea:	4620      	mov	r0, r4
  4318ec:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  4318f0:	e9d4 6242 	ldrd	r6, r2, [r4, #264]	@ 0x108
  4318f4:	47b0      	blx	r6
  4318f6:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
  4318fa:	2101      	movs	r1, #1
  4318fc:	462b      	mov	r3, r5
  4318fe:	440a      	add	r2, r1
  431900:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
  431904:	e7bc      	b.n	431880 <d_print_array_type+0x58>
  431906:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 4319d4 <d_print_array_type+0x1ac>
  43190a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  43190e:	f108 0a02 	add.w	sl, r8, #2
  431912:	e008      	b.n	431926 <d_print_array_type+0xfe>
  431914:	3101      	adds	r1, #1
  431916:	45c2      	cmp	sl, r8
  431918:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43191c:	f804 9003 	strb.w	r9, [r4, r3]
  431920:	f884 9104 	strb.w	r9, [r4, #260]	@ 0x104
  431924:	d01d      	beq.n	431962 <d_print_array_type+0x13a>
  431926:	29ff      	cmp	r1, #255	@ 0xff
  431928:	f818 9b01 	ldrb.w	r9, [r8], #1
  43192c:	460b      	mov	r3, r1
  43192e:	d1f1      	bne.n	431914 <d_print_array_type+0xec>
  431930:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  431934:	4620      	mov	r0, r4
  431936:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  43193a:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  43193e:	4798      	blx	r3
  431940:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  431944:	2101      	movs	r1, #1
  431946:	45c2      	cmp	sl, r8
  431948:	f103 0301 	add.w	r3, r3, #1
  43194c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  431950:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  431954:	f04f 0300 	mov.w	r3, #0
  431958:	f804 9003 	strb.w	r9, [r4, r3]
  43195c:	f884 9104 	strb.w	r9, [r4, #260]	@ 0x104
  431960:	d1e1      	bne.n	431926 <d_print_array_type+0xfe>
  431962:	2111      	movs	r1, #17
  431964:	2300      	movs	r3, #0
  431966:	463a      	mov	r2, r7
  431968:	4620      	mov	r0, r4
  43196a:	f7ff fe3d 	bl	4315e8 <d_print_mod_list>
  43196e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  431972:	29ff      	cmp	r1, #255	@ 0xff
  431974:	d01b      	beq.n	4319ae <d_print_array_type+0x186>
  431976:	1c4b      	adds	r3, r1, #1
  431978:	2229      	movs	r2, #41	@ 0x29
  43197a:	2bff      	cmp	r3, #255	@ 0xff
  43197c:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  431980:	5462      	strb	r2, [r4, r1]
  431982:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
  431986:	d18c      	bne.n	4318a2 <d_print_array_type+0x7a>
  431988:	2200      	movs	r2, #0
  43198a:	4619      	mov	r1, r3
  43198c:	f8d4 5108 	ldr.w	r5, [r4, #264]	@ 0x108
  431990:	4620      	mov	r0, r4
  431992:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
  431996:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  43199a:	47a8      	blx	r5
  43199c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4319a0:	2101      	movs	r1, #1
  4319a2:	2220      	movs	r2, #32
  4319a4:	440b      	add	r3, r1
  4319a6:	7022      	strb	r2, [r4, #0]
  4319a8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4319ac:	e756      	b.n	43185c <d_print_array_type+0x34>
  4319ae:	2200      	movs	r2, #0
  4319b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4319b4:	4620      	mov	r0, r4
  4319b6:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
  4319ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4319be:	4798      	blx	r3
  4319c0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4319c4:	f242 0229 	movw	r2, #8233	@ 0x2029
  4319c8:	2102      	movs	r1, #2
  4319ca:	3301      	adds	r3, #1
  4319cc:	8022      	strh	r2, [r4, #0]
  4319ce:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4319d2:	e743      	b.n	43185c <d_print_array_type+0x34>
  4319d4:	004353c0 	.word	0x004353c0

004319d8 <d_print_expr_op>:
  4319d8:	7811      	ldrb	r1, [r2, #0]
  4319da:	2932      	cmp	r1, #50	@ 0x32
  4319dc:	d002      	beq.n	4319e4 <d_print_expr_op+0xc>
  4319de:	2111      	movs	r1, #17
  4319e0:	f7ff b9dc 	b.w	430d9c <d_print_comp>
  4319e4:	68d3      	ldr	r3, [r2, #12]
  4319e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4319ea:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
  4319ee:	b36f      	cbz	r7, 431a4c <d_print_expr_op+0x74>
  4319f0:	442f      	add	r7, r5
  4319f2:	4604      	mov	r4, r0
  4319f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  4319f8:	3d01      	subs	r5, #1
  4319fa:	3f01      	subs	r7, #1
  4319fc:	f04f 0800 	mov.w	r8, #0
  431a00:	e007      	b.n	431a12 <d_print_expr_op+0x3a>
  431a02:	3101      	adds	r1, #1
  431a04:	42bd      	cmp	r5, r7
  431a06:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  431a0a:	54e6      	strb	r6, [r4, r3]
  431a0c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  431a10:	d01c      	beq.n	431a4c <d_print_expr_op+0x74>
  431a12:	29ff      	cmp	r1, #255	@ 0xff
  431a14:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  431a18:	460b      	mov	r3, r1
  431a1a:	d1f2      	bne.n	431a02 <d_print_expr_op+0x2a>
  431a1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  431a20:	4620      	mov	r0, r4
  431a22:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  431a26:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  431a2a:	4798      	blx	r3
  431a2c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  431a30:	2101      	movs	r1, #1
  431a32:	42bd      	cmp	r5, r7
  431a34:	f103 0301 	add.w	r3, r3, #1
  431a38:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  431a3c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  431a40:	f04f 0300 	mov.w	r3, #0
  431a44:	54e6      	strb	r6, [r4, r3]
  431a46:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  431a4a:	d1e2      	bne.n	431a12 <d_print_expr_op+0x3a>
  431a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00431a50 <d_demangle_callback.constprop.0>:
  431a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  431a54:	b0e9      	sub	sp, #420	@ 0x1a4
  431a56:	4605      	mov	r5, r0
  431a58:	7803      	ldrb	r3, [r0, #0]
  431a5a:	af00      	add	r7, sp, #0
  431a5c:	2b5f      	cmp	r3, #95	@ 0x5f
  431a5e:	e9c7 2100 	strd	r2, r1, [r7]
  431a62:	f000 8128 	beq.w	431cb6 <d_demangle_callback.constprop.0+0x266>
  431a66:	2208      	movs	r2, #8
  431a68:	499d      	ldr	r1, [pc, #628]	@ (431ce0 <d_demangle_callback.constprop.0+0x290>)
  431a6a:	4628      	mov	r0, r5
  431a6c:	f7ef f96c 	bl	420d48 <strncmp>
  431a70:	2800      	cmp	r0, #0
  431a72:	d07a      	beq.n	431b6a <d_demangle_callback.constprop.0+0x11a>
  431a74:	2300      	movs	r3, #0
  431a76:	469a      	mov	sl, r3
  431a78:	2b00      	cmp	r3, #0
  431a7a:	f1aa 0902 	sub.w	r9, sl, #2
  431a7e:	f04f 0301 	mov.w	r3, #1
  431a82:	f04f 0811 	mov.w	r8, #17
  431a86:	fa5f f989 	uxtb.w	r9, r9
  431a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  431a8c:	bf14      	ite	ne
  431a8e:	2345      	movne	r3, #69	@ 0x45
  431a90:	2346      	moveq	r3, #70	@ 0x46
  431a92:	60bb      	str	r3, [r7, #8]
  431a94:	4628      	mov	r0, r5
  431a96:	f7ef fa99 	bl	420fcc <strlen>
  431a9a:	2300      	movs	r3, #0
  431a9c:	0041      	lsls	r1, r0, #1
  431a9e:	182a      	adds	r2, r5, r0
  431aa0:	613d      	str	r5, [r7, #16]
  431aa2:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
  431aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  431aa8:	617a      	str	r2, [r7, #20]
  431aaa:	62b9      	str	r1, [r7, #40]	@ 0x28
  431aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  431aae:	e9c7 8506 	strd	r8, r5, [r7, #24]
  431ab2:	e9c7 300c 	strd	r3, r0, [r7, #48]	@ 0x30
  431ab6:	e9c7 330e 	strd	r3, r3, [r7, #56]	@ 0x38
  431aba:	e9c7 3310 	strd	r3, r3, [r7, #64]	@ 0x40
  431abe:	f200 80f4 	bhi.w	431caa <d_demangle_callback.constprop.0+0x25a>
  431ac2:	0083      	lsls	r3, r0, #2
  431ac4:	466e      	mov	r6, sp
  431ac6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  431aca:	f1ba 0f01 	cmp.w	sl, #1
  431ace:	f103 0307 	add.w	r3, r3, #7
  431ad2:	eba6 02c0 	sub.w	r2, r6, r0, lsl #3
  431ad6:	f023 0307 	bic.w	r3, r3, #7
  431ada:	4695      	mov	sp, r2
  431adc:	46eb      	mov	fp, sp
  431ade:	ebad 0d03 	sub.w	sp, sp, r3
  431ae2:	f8c7 b020 	str.w	fp, [r7, #32]
  431ae6:	f8c7 d02c 	str.w	sp, [r7, #44]	@ 0x2c
  431aea:	d061      	beq.n	431bb0 <d_demangle_callback.constprop.0+0x160>
  431aec:	f1b9 0f01 	cmp.w	r9, #1
  431af0:	d856      	bhi.n	431ba0 <d_demangle_callback.constprop.0+0x150>
  431af2:	7aeb      	ldrb	r3, [r5, #11]
  431af4:	f105 040b 	add.w	r4, r5, #11
  431af8:	2b5f      	cmp	r3, #95	@ 0x5f
  431afa:	61fc      	str	r4, [r7, #28]
  431afc:	d103      	bne.n	431b06 <d_demangle_callback.constprop.0+0xb6>
  431afe:	7b2b      	ldrb	r3, [r5, #12]
  431b00:	2b5a      	cmp	r3, #90	@ 0x5a
  431b02:	f000 80bc 	beq.w	431c7e <d_demangle_callback.constprop.0+0x22e>
  431b06:	4620      	mov	r0, r4
  431b08:	60f9      	str	r1, [r7, #12]
  431b0a:	f7ef fa5f 	bl	420fcc <strlen>
  431b0e:	68f9      	ldr	r1, [r7, #12]
  431b10:	2900      	cmp	r1, #0
  431b12:	f000 80c7 	beq.w	431ca4 <d_demangle_callback.constprop.0+0x254>
  431b16:	2300      	movs	r3, #0
  431b18:	2101      	movs	r1, #1
  431b1a:	e9cb 3301 	strd	r3, r3, [fp, #4]
  431b1e:	6279      	str	r1, [r7, #36]	@ 0x24
  431b20:	2800      	cmp	r0, #0
  431b22:	f000 80bf 	beq.w	431ca4 <d_demangle_callback.constprop.0+0x254>
  431b26:	f88b 3000 	strb.w	r3, [fp]
  431b2a:	e9cb 4003 	strd	r4, r0, [fp, #12]
  431b2e:	465a      	mov	r2, fp
  431b30:	2300      	movs	r3, #0
  431b32:	68b9      	ldr	r1, [r7, #8]
  431b34:	f107 0010 	add.w	r0, r7, #16
  431b38:	f7fa f9a2 	bl	42be80 <d_make_comp>
  431b3c:	4683      	mov	fp, r0
  431b3e:	4620      	mov	r0, r4
  431b40:	f7ef fa44 	bl	420fcc <strlen>
  431b44:	1823      	adds	r3, r4, r0
  431b46:	61fb      	str	r3, [r7, #28]
  431b48:	5c23      	ldrb	r3, [r4, r0]
  431b4a:	b933      	cbnz	r3, 431b5a <d_demangle_callback.constprop.0+0x10a>
  431b4c:	fabb f48b 	clz	r4, fp
  431b50:	0964      	lsrs	r4, r4, #5
  431b52:	f1bb 0f00 	cmp.w	fp, #0
  431b56:	f040 80c5 	bne.w	431ce4 <d_demangle_callback.constprop.0+0x294>
  431b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
  431b5c:	3301      	adds	r3, #1
  431b5e:	f040 80b2 	bne.w	431cc6 <d_demangle_callback.constprop.0+0x276>
  431b62:	2300      	movs	r3, #0
  431b64:	64bb      	str	r3, [r7, #72]	@ 0x48
  431b66:	46b5      	mov	sp, r6
  431b68:	e794      	b.n	431a94 <d_demangle_callback.constprop.0+0x44>
  431b6a:	7a2a      	ldrb	r2, [r5, #8]
  431b6c:	2a5f      	cmp	r2, #95	@ 0x5f
  431b6e:	bf18      	it	ne
  431b70:	2a2e      	cmpne	r2, #46	@ 0x2e
  431b72:	bf0c      	ite	eq
  431b74:	2301      	moveq	r3, #1
  431b76:	2300      	movne	r3, #0
  431b78:	2a24      	cmp	r2, #36	@ 0x24
  431b7a:	bf08      	it	eq
  431b7c:	f043 0301 	orreq.w	r3, r3, #1
  431b80:	b163      	cbz	r3, 431b9c <d_demangle_callback.constprop.0+0x14c>
  431b82:	7a6a      	ldrb	r2, [r5, #9]
  431b84:	2a49      	cmp	r2, #73	@ 0x49
  431b86:	bf18      	it	ne
  431b88:	2a44      	cmpne	r2, #68	@ 0x44
  431b8a:	bf0c      	ite	eq
  431b8c:	2301      	moveq	r3, #1
  431b8e:	2300      	movne	r3, #0
  431b90:	d104      	bne.n	431b9c <d_demangle_callback.constprop.0+0x14c>
  431b92:	7aa9      	ldrb	r1, [r5, #10]
  431b94:	295f      	cmp	r1, #95	@ 0x5f
  431b96:	f000 8107 	beq.w	431da8 <d_demangle_callback.constprop.0+0x358>
  431b9a:	4603      	mov	r3, r0
  431b9c:	469a      	mov	sl, r3
  431b9e:	e76b      	b.n	431a78 <d_demangle_callback.constprop.0+0x28>
  431ba0:	f107 0010 	add.w	r0, r7, #16
  431ba4:	f7fa fe42 	bl	42c82c <d_type>
  431ba8:	69fb      	ldr	r3, [r7, #28]
  431baa:	4683      	mov	fp, r0
  431bac:	781b      	ldrb	r3, [r3, #0]
  431bae:	e7cc      	b.n	431b4a <d_demangle_callback.constprop.0+0xfa>
  431bb0:	782b      	ldrb	r3, [r5, #0]
  431bb2:	2b5f      	cmp	r3, #95	@ 0x5f
  431bb4:	d1d1      	bne.n	431b5a <d_demangle_callback.constprop.0+0x10a>
  431bb6:	1c6b      	adds	r3, r5, #1
  431bb8:	61fb      	str	r3, [r7, #28]
  431bba:	786b      	ldrb	r3, [r5, #1]
  431bbc:	2b5a      	cmp	r3, #90	@ 0x5a
  431bbe:	d1cc      	bne.n	431b5a <d_demangle_callback.constprop.0+0x10a>
  431bc0:	1cab      	adds	r3, r5, #2
  431bc2:	61fb      	str	r3, [r7, #28]
  431bc4:	78ab      	ldrb	r3, [r5, #2]
  431bc6:	2b47      	cmp	r3, #71	@ 0x47
  431bc8:	f000 80e5 	beq.w	431d96 <d_demangle_callback.constprop.0+0x346>
  431bcc:	2b54      	cmp	r3, #84	@ 0x54
  431bce:	f000 80e2 	beq.w	431d96 <d_demangle_callback.constprop.0+0x346>
  431bd2:	4651      	mov	r1, sl
  431bd4:	f107 0010 	add.w	r0, r7, #16
  431bd8:	f7fc fa12 	bl	42e000 <d_encoding.part.0>
  431bdc:	4683      	mov	fp, r0
  431bde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
  431be2:	07c2      	lsls	r2, r0, #31
  431be4:	780b      	ldrb	r3, [r1, #0]
  431be6:	d5b0      	bpl.n	431b4a <d_demangle_callback.constprop.0+0xfa>
  431be8:	2b2e      	cmp	r3, #46	@ 0x2e
  431bea:	d1ae      	bne.n	431b4a <d_demangle_callback.constprop.0+0xfa>
  431bec:	784b      	ldrb	r3, [r1, #1]
  431bee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
  431bf2:	2a19      	cmp	r2, #25
  431bf4:	d905      	bls.n	431c02 <d_demangle_callback.constprop.0+0x1b2>
  431bf6:	2b5f      	cmp	r3, #95	@ 0x5f
  431bf8:	d003      	beq.n	431c02 <d_demangle_callback.constprop.0+0x1b2>
  431bfa:	3b30      	subs	r3, #48	@ 0x30
  431bfc:	2b09      	cmp	r3, #9
  431bfe:	f200 80d0 	bhi.w	431da2 <d_demangle_callback.constprop.0+0x352>
  431c02:	788b      	ldrb	r3, [r1, #2]
  431c04:	1c8c      	adds	r4, r1, #2
  431c06:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
  431c0a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
  431c0e:	2a19      	cmp	r2, #25
  431c10:	bf88      	it	hi
  431c12:	2809      	cmphi	r0, #9
  431c14:	d809      	bhi.n	431c2a <d_demangle_callback.constprop.0+0x1da>
  431c16:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  431c1a:	f1a3 0061 	sub.w	r0, r3, #97	@ 0x61
  431c1e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
  431c22:	2a09      	cmp	r2, #9
  431c24:	bf88      	it	hi
  431c26:	2819      	cmphi	r0, #25
  431c28:	d9f5      	bls.n	431c16 <d_demangle_callback.constprop.0+0x1c6>
  431c2a:	2b5f      	cmp	r3, #95	@ 0x5f
  431c2c:	d0f3      	beq.n	431c16 <d_demangle_callback.constprop.0+0x1c6>
  431c2e:	2b2e      	cmp	r3, #46	@ 0x2e
  431c30:	d111      	bne.n	431c56 <d_demangle_callback.constprop.0+0x206>
  431c32:	7863      	ldrb	r3, [r4, #1]
  431c34:	3b30      	subs	r3, #48	@ 0x30
  431c36:	2b09      	cmp	r3, #9
  431c38:	d80d      	bhi.n	431c56 <d_demangle_callback.constprop.0+0x206>
  431c3a:	78a3      	ldrb	r3, [r4, #2]
  431c3c:	3402      	adds	r4, #2
  431c3e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
  431c42:	2a09      	cmp	r2, #9
  431c44:	d8f3      	bhi.n	431c2e <d_demangle_callback.constprop.0+0x1de>
  431c46:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  431c4a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
  431c4e:	2a09      	cmp	r2, #9
  431c50:	d9f9      	bls.n	431c46 <d_demangle_callback.constprop.0+0x1f6>
  431c52:	2b2e      	cmp	r3, #46	@ 0x2e
  431c54:	d0ed      	beq.n	431c32 <d_demangle_callback.constprop.0+0x1e2>
  431c56:	1a62      	subs	r2, r4, r1
  431c58:	f107 0010 	add.w	r0, r7, #16
  431c5c:	61fc      	str	r4, [r7, #28]
  431c5e:	f7fa f98b 	bl	42bf78 <d_make_name>
  431c62:	465a      	mov	r2, fp
  431c64:	4603      	mov	r3, r0
  431c66:	214f      	movs	r1, #79	@ 0x4f
  431c68:	f107 0010 	add.w	r0, r7, #16
  431c6c:	f7fa f908 	bl	42be80 <d_make_comp>
  431c70:	7823      	ldrb	r3, [r4, #0]
  431c72:	4683      	mov	fp, r0
  431c74:	2b2e      	cmp	r3, #46	@ 0x2e
  431c76:	f47f af68 	bne.w	431b4a <d_demangle_callback.constprop.0+0xfa>
  431c7a:	4621      	mov	r1, r4
  431c7c:	e7b6      	b.n	431bec <d_demangle_callback.constprop.0+0x19c>
  431c7e:	f105 030d 	add.w	r3, r5, #13
  431c82:	f107 0010 	add.w	r0, r7, #16
  431c86:	61fb      	str	r3, [r7, #28]
  431c88:	7b6b      	ldrb	r3, [r5, #13]
  431c8a:	2b47      	cmp	r3, #71	@ 0x47
  431c8c:	d022      	beq.n	431cd4 <d_demangle_callback.constprop.0+0x284>
  431c8e:	f1a3 0154 	sub.w	r1, r3, #84	@ 0x54
  431c92:	fab1 f181 	clz	r1, r1
  431c96:	0949      	lsrs	r1, r1, #5
  431c98:	b9e1      	cbnz	r1, 431cd4 <d_demangle_callback.constprop.0+0x284>
  431c9a:	f7fc f9b1 	bl	42e000 <d_encoding.part.0>
  431c9e:	69fc      	ldr	r4, [r7, #28]
  431ca0:	4683      	mov	fp, r0
  431ca2:	e744      	b.n	431b2e <d_demangle_callback.constprop.0+0xde>
  431ca4:	f04f 0b00 	mov.w	fp, #0
  431ca8:	e741      	b.n	431b2e <d_demangle_callback.constprop.0+0xde>
  431caa:	4618      	mov	r0, r3
  431cac:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
  431cb0:	46bd      	mov	sp, r7
  431cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  431cb6:	7843      	ldrb	r3, [r0, #1]
  431cb8:	2b5a      	cmp	r3, #90	@ 0x5a
  431cba:	f47f aed4 	bne.w	431a66 <d_demangle_callback.constprop.0+0x16>
  431cbe:	2300      	movs	r3, #0
  431cc0:	f04f 0a01 	mov.w	sl, #1
  431cc4:	e6d8      	b.n	431a78 <d_demangle_callback.constprop.0+0x28>
  431cc6:	2000      	movs	r0, #0
  431cc8:	46b5      	mov	sp, r6
  431cca:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
  431cce:	46bd      	mov	sp, r7
  431cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  431cd4:	f7fc fa14 	bl	42e100 <d_special_name>
  431cd8:	69fc      	ldr	r4, [r7, #28]
  431cda:	4683      	mov	fp, r0
  431cdc:	e727      	b.n	431b2e <d_demangle_callback.constprop.0+0xde>
  431cde:	bf00      	nop
  431ce0:	00435148 	.word	0x00435148
  431ce4:	687b      	ldr	r3, [r7, #4]
  431ce6:	f107 0550 	add.w	r5, r7, #80	@ 0x50
  431cea:	2000      	movs	r0, #0
  431cec:	2100      	movs	r1, #0
  431cee:	f8c5 3108 	str.w	r3, [r5, #264]	@ 0x108
  431cf2:	683b      	ldr	r3, [r7, #0]
  431cf4:	f8c5 4100 	str.w	r4, [r5, #256]	@ 0x100
  431cf8:	f8c5 310c 	str.w	r3, [r5, #268]	@ 0x10c
  431cfc:	f885 4104 	strb.w	r4, [r5, #260]	@ 0x104
  431d00:	f8c5 4120 	str.w	r4, [r5, #288]	@ 0x120
  431d04:	f8c5 412c 	str.w	r4, [r5, #300]	@ 0x12c
  431d08:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
  431d0c:	4659      	mov	r1, fp
  431d0e:	4628      	mov	r0, r5
  431d10:	e9c7 4461 	strd	r4, r4, [r7, #388]	@ 0x184
  431d14:	e9c5 4444 	strd	r4, r4, [r5, #272]	@ 0x110
  431d18:	e9c5 4449 	strd	r4, r4, [r5, #292]	@ 0x124
  431d1c:	e9c5 4446 	strd	r4, r4, [r5, #280]	@ 0x118
  431d20:	f7fa f9f2 	bl	42c108 <d_count_templates_scopes>
  431d24:	f8d5 311c 	ldr.w	r3, [r5, #284]	@ 0x11c
  431d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
  431d2c:	da01      	bge.n	431d32 <d_demangle_callback.constprop.0+0x2e2>
  431d2e:	f8c5 411c 	str.w	r4, [r5, #284]	@ 0x11c
  431d32:	f8d5 1138 	ldr.w	r1, [r5, #312]	@ 0x138
  431d36:	46e8      	mov	r8, sp
  431d38:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
  431d3c:	2400      	movs	r4, #0
  431d3e:	2901      	cmp	r1, #1
  431d40:	465a      	mov	r2, fp
  431d42:	fb01 f303 	mul.w	r3, r1, r3
  431d46:	4628      	mov	r0, r5
  431d48:	bfb8      	it	lt
  431d4a:	2101      	movlt	r1, #1
  431d4c:	2b01      	cmp	r3, #1
  431d4e:	eba8 01c1 	sub.w	r1, r8, r1, lsl #3
  431d52:	468d      	mov	sp, r1
  431d54:	f04f 0111 	mov.w	r1, #17
  431d58:	46ec      	mov	ip, sp
  431d5a:	e9c5 3451 	strd	r3, r4, [r5, #324]	@ 0x144
  431d5e:	bfb8      	it	lt
  431d60:	2301      	movlt	r3, #1
  431d62:	f8c5 c130 	str.w	ip, [r5, #304]	@ 0x130
  431d66:	ebac 03c3 	sub.w	r3, ip, r3, lsl #3
  431d6a:	469d      	mov	sp, r3
  431d6c:	f8c5 d13c 	str.w	sp, [r5, #316]	@ 0x13c
  431d70:	f7ff f814 	bl	430d9c <d_print_comp>
  431d74:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
  431d78:	46c5      	mov	sp, r8
  431d7a:	4628      	mov	r0, r5
  431d7c:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
  431d80:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
  431d84:	546c      	strb	r4, [r5, r1]
  431d86:	4798      	blx	r3
  431d88:	f8d5 0118 	ldr.w	r0, [r5, #280]	@ 0x118
  431d8c:	46b5      	mov	sp, r6
  431d8e:	fab0 f080 	clz	r0, r0
  431d92:	0940      	lsrs	r0, r0, #5
  431d94:	e799      	b.n	431cca <d_demangle_callback.constprop.0+0x27a>
  431d96:	f107 0010 	add.w	r0, r7, #16
  431d9a:	f7fc f9b1 	bl	42e100 <d_special_name>
  431d9e:	4683      	mov	fp, r0
  431da0:	e71d      	b.n	431bde <d_demangle_callback.constprop.0+0x18e>
  431da2:	69fb      	ldr	r3, [r7, #28]
  431da4:	781b      	ldrb	r3, [r3, #0]
  431da6:	e6d0      	b.n	431b4a <d_demangle_callback.constprop.0+0xfa>
  431da8:	2a49      	cmp	r2, #73	@ 0x49
  431daa:	bf16      	itet	ne
  431dac:	f04f 0a03 	movne.w	sl, #3
  431db0:	f04f 0a02 	moveq.w	sl, #2
  431db4:	2300      	movne	r3, #0
  431db6:	e65f      	b.n	431a78 <d_demangle_callback.constprop.0+0x28>

00431db8 <d_print_subexpr>:
  431db8:	b570      	push	{r4, r5, r6, lr}
  431dba:	7813      	ldrb	r3, [r2, #0]
  431dbc:	b082      	sub	sp, #8
  431dbe:	4615      	mov	r5, r2
  431dc0:	4604      	mov	r4, r0
  431dc2:	2b01      	cmp	r3, #1
  431dc4:	d907      	bls.n	431dd6 <d_print_subexpr+0x1e>
  431dc6:	f1a3 0631 	sub.w	r6, r3, #49	@ 0x31
  431dca:	fab6 f686 	clz	r6, r6
  431dce:	0976      	lsrs	r6, r6, #5
  431dd0:	b90e      	cbnz	r6, 431dd6 <d_print_subexpr+0x1e>
  431dd2:	2b06      	cmp	r3, #6
  431dd4:	d136      	bne.n	431e44 <d_print_subexpr+0x8c>
  431dd6:	686b      	ldr	r3, [r5, #4]
  431dd8:	2b01      	cmp	r3, #1
  431dda:	dc2e      	bgt.n	431e3a <d_print_subexpr+0x82>
  431ddc:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
  431de0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
  431de4:	dc29      	bgt.n	431e3a <d_print_subexpr+0x82>
  431de6:	2601      	movs	r6, #1
  431de8:	3301      	adds	r3, #1
  431dea:	3201      	adds	r2, #1
  431dec:	2111      	movs	r1, #17
  431dee:	4620      	mov	r0, r4
  431df0:	606b      	str	r3, [r5, #4]
  431df2:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
  431df6:	f8c4 211c 	str.w	r2, [r4, #284]	@ 0x11c
  431dfa:	462a      	mov	r2, r5
  431dfc:	f8c4 d12c 	str.w	sp, [r4, #300]	@ 0x12c
  431e00:	9301      	str	r3, [sp, #4]
  431e02:	9500      	str	r5, [sp, #0]
  431e04:	f7fc fd06 	bl	42e814 <d_print_comp_inner>
  431e08:	686a      	ldr	r2, [r5, #4]
  431e0a:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
  431e0e:	9901      	ldr	r1, [sp, #4]
  431e10:	3a01      	subs	r2, #1
  431e12:	3b01      	subs	r3, #1
  431e14:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
  431e18:	606a      	str	r2, [r5, #4]
  431e1a:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
  431e1e:	b956      	cbnz	r6, 431e36 <d_print_subexpr+0x7e>
  431e20:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  431e24:	29ff      	cmp	r1, #255	@ 0xff
  431e26:	d024      	beq.n	431e72 <d_print_subexpr+0xba>
  431e28:	1c4a      	adds	r2, r1, #1
  431e2a:	2329      	movs	r3, #41	@ 0x29
  431e2c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  431e30:	5463      	strb	r3, [r4, r1]
  431e32:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  431e36:	b002      	add	sp, #8
  431e38:	bd70      	pop	{r4, r5, r6, pc}
  431e3a:	2301      	movs	r3, #1
  431e3c:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
  431e40:	b002      	add	sp, #8
  431e42:	bd70      	pop	{r4, r5, r6, pc}
  431e44:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
  431e48:	2bff      	cmp	r3, #255	@ 0xff
  431e4a:	d021      	beq.n	431e90 <d_print_subexpr+0xd8>
  431e4c:	1c59      	adds	r1, r3, #1
  431e4e:	2228      	movs	r2, #40	@ 0x28
  431e50:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  431e54:	54e2      	strb	r2, [r4, r3]
  431e56:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
  431e5a:	686b      	ldr	r3, [r5, #4]
  431e5c:	2b01      	cmp	r3, #1
  431e5e:	dc04      	bgt.n	431e6a <d_print_subexpr+0xb2>
  431e60:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
  431e64:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
  431e68:	dd20      	ble.n	431eac <d_print_subexpr+0xf4>
  431e6a:	2301      	movs	r3, #1
  431e6c:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
  431e70:	e7d8      	b.n	431e24 <d_print_subexpr+0x6c>
  431e72:	2500      	movs	r5, #0
  431e74:	4620      	mov	r0, r4
  431e76:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  431e7a:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  431e7e:	4798      	blx	r3
  431e80:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  431e84:	2201      	movs	r2, #1
  431e86:	4629      	mov	r1, r5
  431e88:	4413      	add	r3, r2
  431e8a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  431e8e:	e7cc      	b.n	431e2a <d_print_subexpr+0x72>
  431e90:	4619      	mov	r1, r3
  431e92:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
  431e96:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
  431e9a:	4798      	blx	r3
  431e9c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
  431ea0:	2101      	movs	r1, #1
  431ea2:	4633      	mov	r3, r6
  431ea4:	440a      	add	r2, r1
  431ea6:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
  431eaa:	e7d0      	b.n	431e4e <d_print_subexpr+0x96>
  431eac:	2600      	movs	r6, #0
  431eae:	e79b      	b.n	431de8 <d_print_subexpr+0x30>

00431eb0 <d_maybe_print_fold_expression>:
  431eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  431eb4:	68d3      	ldr	r3, [r2, #12]
  431eb6:	68db      	ldr	r3, [r3, #12]
  431eb8:	681b      	ldr	r3, [r3, #0]
  431eba:	7819      	ldrb	r1, [r3, #0]
  431ebc:	2966      	cmp	r1, #102	@ 0x66
  431ebe:	d166      	bne.n	431f8e <d_maybe_print_fold_expression+0xde>
  431ec0:	6912      	ldr	r2, [r2, #16]
  431ec2:	4604      	mov	r4, r0
  431ec4:	f8d0 7124 	ldr.w	r7, [r0, #292]	@ 0x124
  431ec8:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
  431ecc:	f89a 2000 	ldrb.w	r2, [sl]
  431ed0:	2a3c      	cmp	r2, #60	@ 0x3c
  431ed2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  431ed6:	bf08      	it	eq
  431ed8:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
  431edc:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
  431ee0:	bf18      	it	ne
  431ee2:	f04f 0900 	movne.w	r9, #0
  431ee6:	785b      	ldrb	r3, [r3, #1]
  431ee8:	2b6c      	cmp	r3, #108	@ 0x6c
  431eea:	f000 809d 	beq.w	432028 <d_maybe_print_fold_expression+0x178>
  431eee:	d851      	bhi.n	431f94 <d_maybe_print_fold_expression+0xe4>
  431ef0:	2b4c      	cmp	r3, #76	@ 0x4c
  431ef2:	d002      	beq.n	431efa <d_maybe_print_fold_expression+0x4a>
  431ef4:	2b52      	cmp	r3, #82	@ 0x52
  431ef6:	f040 8092 	bne.w	43201e <d_maybe_print_fold_expression+0x16e>
  431efa:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  431efe:	29ff      	cmp	r1, #255	@ 0xff
  431f00:	f000 80f7 	beq.w	4320f2 <d_maybe_print_fold_expression+0x242>
  431f04:	1c4b      	adds	r3, r1, #1
  431f06:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  431f0a:	2328      	movs	r3, #40	@ 0x28
  431f0c:	4652      	mov	r2, sl
  431f0e:	4620      	mov	r0, r4
  431f10:	5463      	strb	r3, [r4, r1]
  431f12:	2111      	movs	r1, #17
  431f14:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  431f18:	f04f 0a00 	mov.w	sl, #0
  431f1c:	4d7c      	ldr	r5, [pc, #496]	@ (432110 <d_maybe_print_fold_expression+0x260>)
  431f1e:	f7ff ff4b 	bl	431db8 <d_print_subexpr>
  431f22:	2111      	movs	r1, #17
  431f24:	4642      	mov	r2, r8
  431f26:	4620      	mov	r0, r4
  431f28:	f105 0b03 	add.w	fp, r5, #3
  431f2c:	f7ff fd54 	bl	4319d8 <d_print_expr_op>
  431f30:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  431f34:	e007      	b.n	431f46 <d_maybe_print_fold_expression+0x96>
  431f36:	3101      	adds	r1, #1
  431f38:	45ab      	cmp	fp, r5
  431f3a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  431f3e:	54e6      	strb	r6, [r4, r3]
  431f40:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  431f44:	d01c      	beq.n	431f80 <d_maybe_print_fold_expression+0xd0>
  431f46:	29ff      	cmp	r1, #255	@ 0xff
  431f48:	f815 6b01 	ldrb.w	r6, [r5], #1
  431f4c:	460b      	mov	r3, r1
  431f4e:	d1f2      	bne.n	431f36 <d_maybe_print_fold_expression+0x86>
  431f50:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  431f54:	4620      	mov	r0, r4
  431f56:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  431f5a:	f884 a0ff 	strb.w	sl, [r4, #255]	@ 0xff
  431f5e:	4798      	blx	r3
  431f60:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  431f64:	2101      	movs	r1, #1
  431f66:	45ab      	cmp	fp, r5
  431f68:	f103 0301 	add.w	r3, r3, #1
  431f6c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  431f70:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  431f74:	f04f 0300 	mov.w	r3, #0
  431f78:	54e6      	strb	r6, [r4, r3]
  431f7a:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  431f7e:	d1e2      	bne.n	431f46 <d_maybe_print_fold_expression+0x96>
  431f80:	4642      	mov	r2, r8
  431f82:	2111      	movs	r1, #17
  431f84:	4620      	mov	r0, r4
  431f86:	f7ff fd27 	bl	4319d8 <d_print_expr_op>
  431f8a:	464a      	mov	r2, r9
  431f8c:	e07f      	b.n	43208e <d_maybe_print_fold_expression+0x1de>
  431f8e:	2000      	movs	r0, #0
  431f90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  431f94:	2b72      	cmp	r3, #114	@ 0x72
  431f96:	d142      	bne.n	43201e <d_maybe_print_fold_expression+0x16e>
  431f98:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  431f9c:	29ff      	cmp	r1, #255	@ 0xff
  431f9e:	f000 809a 	beq.w	4320d6 <d_maybe_print_fold_expression+0x226>
  431fa2:	1c4b      	adds	r3, r1, #1
  431fa4:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  431fa8:	2328      	movs	r3, #40	@ 0x28
  431faa:	4652      	mov	r2, sl
  431fac:	4620      	mov	r0, r4
  431fae:	5463      	strb	r3, [r4, r1]
  431fb0:	2111      	movs	r1, #17
  431fb2:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  431fb6:	4d57      	ldr	r5, [pc, #348]	@ (432114 <d_maybe_print_fold_expression+0x264>)
  431fb8:	f7ff fefe 	bl	431db8 <d_print_subexpr>
  431fbc:	4642      	mov	r2, r8
  431fbe:	2111      	movs	r1, #17
  431fc0:	4620      	mov	r0, r4
  431fc2:	f105 0904 	add.w	r9, r5, #4
  431fc6:	f7ff fd07 	bl	4319d8 <d_print_expr_op>
  431fca:	f04f 0800 	mov.w	r8, #0
  431fce:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  431fd2:	e007      	b.n	431fe4 <d_maybe_print_fold_expression+0x134>
  431fd4:	3101      	adds	r1, #1
  431fd6:	45a9      	cmp	r9, r5
  431fd8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  431fdc:	54e6      	strb	r6, [r4, r3]
  431fde:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  431fe2:	d01c      	beq.n	43201e <d_maybe_print_fold_expression+0x16e>
  431fe4:	29ff      	cmp	r1, #255	@ 0xff
  431fe6:	f815 6b01 	ldrb.w	r6, [r5], #1
  431fea:	460b      	mov	r3, r1
  431fec:	d1f2      	bne.n	431fd4 <d_maybe_print_fold_expression+0x124>
  431fee:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  431ff2:	4620      	mov	r0, r4
  431ff4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  431ff8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  431ffc:	4798      	blx	r3
  431ffe:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  432002:	2101      	movs	r1, #1
  432004:	45a9      	cmp	r9, r5
  432006:	f103 0301 	add.w	r3, r3, #1
  43200a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43200e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  432012:	f04f 0300 	mov.w	r3, #0
  432016:	54e6      	strb	r6, [r4, r3]
  432018:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  43201c:	d1e2      	bne.n	431fe4 <d_maybe_print_fold_expression+0x134>
  43201e:	2001      	movs	r0, #1
  432020:	f8c4 7124 	str.w	r7, [r4, #292]	@ 0x124
  432024:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  432028:	4d3b      	ldr	r5, [pc, #236]	@ (432118 <d_maybe_print_fold_expression+0x268>)
  43202a:	f04f 0900 	mov.w	r9, #0
  43202e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
  432032:	f105 0b04 	add.w	fp, r5, #4
  432036:	e007      	b.n	432048 <d_maybe_print_fold_expression+0x198>
  432038:	3101      	adds	r1, #1
  43203a:	455d      	cmp	r5, fp
  43203c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  432040:	54e6      	strb	r6, [r4, r3]
  432042:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  432046:	d01c      	beq.n	432082 <d_maybe_print_fold_expression+0x1d2>
  432048:	29ff      	cmp	r1, #255	@ 0xff
  43204a:	f815 6b01 	ldrb.w	r6, [r5], #1
  43204e:	460b      	mov	r3, r1
  432050:	d1f2      	bne.n	432038 <d_maybe_print_fold_expression+0x188>
  432052:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  432056:	4620      	mov	r0, r4
  432058:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  43205c:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
  432060:	4798      	blx	r3
  432062:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  432066:	2101      	movs	r1, #1
  432068:	455d      	cmp	r5, fp
  43206a:	f103 0301 	add.w	r3, r3, #1
  43206e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  432072:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  432076:	f04f 0300 	mov.w	r3, #0
  43207a:	54e6      	strb	r6, [r4, r3]
  43207c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
  432080:	d1e2      	bne.n	432048 <d_maybe_print_fold_expression+0x198>
  432082:	4642      	mov	r2, r8
  432084:	2111      	movs	r1, #17
  432086:	4620      	mov	r0, r4
  432088:	f7ff fca6 	bl	4319d8 <d_print_expr_op>
  43208c:	4652      	mov	r2, sl
  43208e:	2111      	movs	r1, #17
  432090:	4620      	mov	r0, r4
  432092:	f7ff fe91 	bl	431db8 <d_print_subexpr>
  432096:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  43209a:	29ff      	cmp	r1, #255	@ 0xff
  43209c:	d00a      	beq.n	4320b4 <d_maybe_print_fold_expression+0x204>
  43209e:	1c4a      	adds	r2, r1, #1
  4320a0:	2329      	movs	r3, #41	@ 0x29
  4320a2:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  4320a6:	2001      	movs	r0, #1
  4320a8:	5463      	strb	r3, [r4, r1]
  4320aa:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  4320ae:	f8c4 7124 	str.w	r7, [r4, #292]	@ 0x124
  4320b2:	e7b7      	b.n	432024 <d_maybe_print_fold_expression+0x174>
  4320b4:	2500      	movs	r5, #0
  4320b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4320ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4320be:	4620      	mov	r0, r4
  4320c0:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  4320c4:	4798      	blx	r3
  4320c6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4320ca:	2201      	movs	r2, #1
  4320cc:	4629      	mov	r1, r5
  4320ce:	4413      	add	r3, r2
  4320d0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4320d4:	e7e4      	b.n	4320a0 <d_maybe_print_fold_expression+0x1f0>
  4320d6:	2500      	movs	r5, #0
  4320d8:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
  4320dc:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
  4320e0:	4798      	blx	r3
  4320e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4320e6:	4629      	mov	r1, r5
  4320e8:	3301      	adds	r3, #1
  4320ea:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4320ee:	2301      	movs	r3, #1
  4320f0:	e758      	b.n	431fa4 <d_maybe_print_fold_expression+0xf4>
  4320f2:	2500      	movs	r5, #0
  4320f4:	4620      	mov	r0, r4
  4320f6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  4320fa:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  4320fe:	4798      	blx	r3
  432100:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  432104:	4629      	mov	r1, r5
  432106:	3301      	adds	r3, #1
  432108:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43210c:	2301      	movs	r3, #1
  43210e:	e6fa      	b.n	431f06 <d_maybe_print_fold_expression+0x56>
  432110:	004353c4 	.word	0x004353c4
  432114:	004354dc 	.word	0x004354dc
  432118:	004354d4 	.word	0x004354d4

0043211c <d_maybe_print_designated_init>:
  43211c:	7813      	ldrb	r3, [r2, #0]
  43211e:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
  432122:	2b38      	cmp	r3, #56	@ 0x38
  432124:	d15e      	bne.n	4321e4 <d_maybe_print_designated_init+0xc8>
  432126:	68d3      	ldr	r3, [r2, #12]
  432128:	68db      	ldr	r3, [r3, #12]
  43212a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  43212e:	681e      	ldr	r6, [r3, #0]
  432130:	7833      	ldrb	r3, [r6, #0]
  432132:	2b64      	cmp	r3, #100	@ 0x64
  432134:	d002      	beq.n	43213c <d_maybe_print_designated_init+0x20>
  432136:	2000      	movs	r0, #0
  432138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  43213c:	f896 c001 	ldrb.w	ip, [r6, #1]
  432140:	4604      	mov	r4, r0
  432142:	f00c 03df 	and.w	r3, ip, #223	@ 0xdf
  432146:	2b58      	cmp	r3, #88	@ 0x58
  432148:	d006      	beq.n	432158 <d_maybe_print_designated_init+0x3c>
  43214a:	f1ac 0069 	sub.w	r0, ip, #105	@ 0x69
  43214e:	fab0 f080 	clz	r0, r0
  432152:	0940      	lsrs	r0, r0, #5
  432154:	2800      	cmp	r0, #0
  432156:	d0ef      	beq.n	432138 <d_maybe_print_designated_init+0x1c>
  432158:	6913      	ldr	r3, [r2, #16]
  43215a:	f1bc 0f69 	cmp.w	ip, #105	@ 0x69
  43215e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  432162:	e9d3 5703 	ldrd	r5, r7, [r3, #12]
  432166:	d03f      	beq.n	4321e8 <d_maybe_print_designated_init+0xcc>
  432168:	29ff      	cmp	r1, #255	@ 0xff
  43216a:	f000 8089 	beq.w	432280 <d_maybe_print_designated_init+0x164>
  43216e:	1c4b      	adds	r3, r1, #1
  432170:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  432174:	235b      	movs	r3, #91	@ 0x5b
  432176:	5463      	strb	r3, [r4, r1]
  432178:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  43217c:	462a      	mov	r2, r5
  43217e:	2111      	movs	r1, #17
  432180:	4620      	mov	r0, r4
  432182:	f7fe fe0b 	bl	430d9c <d_print_comp>
  432186:	7873      	ldrb	r3, [r6, #1]
  432188:	2b58      	cmp	r3, #88	@ 0x58
  43218a:	d042      	beq.n	432212 <d_maybe_print_designated_init+0xf6>
  43218c:	2b69      	cmp	r3, #105	@ 0x69
  43218e:	d00b      	beq.n	4321a8 <d_maybe_print_designated_init+0x8c>
  432190:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  432194:	29ff      	cmp	r1, #255	@ 0xff
  432196:	f000 8094 	beq.w	4322c2 <d_maybe_print_designated_init+0x1a6>
  43219a:	1c4a      	adds	r2, r1, #1
  43219c:	235d      	movs	r3, #93	@ 0x5d
  43219e:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  4321a2:	5463      	strb	r3, [r4, r1]
  4321a4:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  4321a8:	783b      	ldrb	r3, [r7, #0]
  4321aa:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
  4321ae:	2b38      	cmp	r3, #56	@ 0x38
  4321b0:	d105      	bne.n	4321be <d_maybe_print_designated_init+0xa2>
  4321b2:	68fb      	ldr	r3, [r7, #12]
  4321b4:	68db      	ldr	r3, [r3, #12]
  4321b6:	681b      	ldr	r3, [r3, #0]
  4321b8:	781a      	ldrb	r2, [r3, #0]
  4321ba:	2a64      	cmp	r2, #100	@ 0x64
  4321bc:	d01c      	beq.n	4321f8 <d_maybe_print_designated_init+0xdc>
  4321be:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  4321c2:	29ff      	cmp	r1, #255	@ 0xff
  4321c4:	d06c      	beq.n	4322a0 <d_maybe_print_designated_init+0x184>
  4321c6:	1c4a      	adds	r2, r1, #1
  4321c8:	233d      	movs	r3, #61	@ 0x3d
  4321ca:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
  4321ce:	4620      	mov	r0, r4
  4321d0:	463a      	mov	r2, r7
  4321d2:	5463      	strb	r3, [r4, r1]
  4321d4:	2111      	movs	r1, #17
  4321d6:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
  4321da:	f7ff fded 	bl	431db8 <d_print_subexpr>
  4321de:	2001      	movs	r0, #1
  4321e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4321e4:	2000      	movs	r0, #0
  4321e6:	4770      	bx	lr
  4321e8:	29ff      	cmp	r1, #255	@ 0xff
  4321ea:	d07b      	beq.n	4322e4 <d_maybe_print_designated_init+0x1c8>
  4321ec:	1c4b      	adds	r3, r1, #1
  4321ee:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  4321f2:	232e      	movs	r3, #46	@ 0x2e
  4321f4:	5463      	strb	r3, [r4, r1]
  4321f6:	e7bf      	b.n	432178 <d_maybe_print_designated_init+0x5c>
  4321f8:	785b      	ldrb	r3, [r3, #1]
  4321fa:	f003 02df 	and.w	r2, r3, #223	@ 0xdf
  4321fe:	2a58      	cmp	r2, #88	@ 0x58
  432200:	d001      	beq.n	432206 <d_maybe_print_designated_init+0xea>
  432202:	2b69      	cmp	r3, #105	@ 0x69
  432204:	d1db      	bne.n	4321be <d_maybe_print_designated_init+0xa2>
  432206:	463a      	mov	r2, r7
  432208:	2111      	movs	r1, #17
  43220a:	4620      	mov	r0, r4
  43220c:	f7fe fdc6 	bl	430d9c <d_print_comp>
  432210:	e7e5      	b.n	4321de <d_maybe_print_designated_init+0xc2>
  432212:	4d3c      	ldr	r5, [pc, #240]	@ (432304 <d_maybe_print_designated_init+0x1e8>)
  432214:	f04f 0900 	mov.w	r9, #0
  432218:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
  43221c:	f105 0a05 	add.w	sl, r5, #5
  432220:	e008      	b.n	432234 <d_maybe_print_designated_init+0x118>
  432222:	3101      	adds	r1, #1
  432224:	45aa      	cmp	sl, r5
  432226:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43222a:	f804 8003 	strb.w	r8, [r4, r3]
  43222e:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
  432232:	d01d      	beq.n	432270 <d_maybe_print_designated_init+0x154>
  432234:	29ff      	cmp	r1, #255	@ 0xff
  432236:	f815 8b01 	ldrb.w	r8, [r5], #1
  43223a:	460b      	mov	r3, r1
  43223c:	d1f1      	bne.n	432222 <d_maybe_print_designated_init+0x106>
  43223e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  432242:	4620      	mov	r0, r4
  432244:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  432248:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
  43224c:	4798      	blx	r3
  43224e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  432252:	2101      	movs	r1, #1
  432254:	45aa      	cmp	sl, r5
  432256:	f103 0301 	add.w	r3, r3, #1
  43225a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
  43225e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  432262:	f04f 0300 	mov.w	r3, #0
  432266:	f804 8003 	strb.w	r8, [r4, r3]
  43226a:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
  43226e:	d1e1      	bne.n	432234 <d_maybe_print_designated_init+0x118>
  432270:	68fa      	ldr	r2, [r7, #12]
  432272:	2111      	movs	r1, #17
  432274:	4620      	mov	r0, r4
  432276:	f7fe fd91 	bl	430d9c <d_print_comp>
  43227a:	693f      	ldr	r7, [r7, #16]
  43227c:	7873      	ldrb	r3, [r6, #1]
  43227e:	e785      	b.n	43218c <d_maybe_print_designated_init+0x70>
  432280:	f04f 0800 	mov.w	r8, #0
  432284:	4620      	mov	r0, r4
  432286:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  43228a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  43228e:	4798      	blx	r3
  432290:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  432294:	4641      	mov	r1, r8
  432296:	3301      	adds	r3, #1
  432298:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  43229c:	2301      	movs	r3, #1
  43229e:	e767      	b.n	432170 <d_maybe_print_designated_init+0x54>
  4322a0:	2500      	movs	r5, #0
  4322a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4322a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4322aa:	4620      	mov	r0, r4
  4322ac:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  4322b0:	4798      	blx	r3
  4322b2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4322b6:	2201      	movs	r2, #1
  4322b8:	4629      	mov	r1, r5
  4322ba:	4413      	add	r3, r2
  4322bc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4322c0:	e782      	b.n	4321c8 <d_maybe_print_designated_init+0xac>
  4322c2:	2500      	movs	r5, #0
  4322c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  4322c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
  4322cc:	4620      	mov	r0, r4
  4322ce:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
  4322d2:	4798      	blx	r3
  4322d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4322d8:	2201      	movs	r2, #1
  4322da:	4629      	mov	r1, r5
  4322dc:	4413      	add	r3, r2
  4322de:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  4322e2:	e75b      	b.n	43219c <d_maybe_print_designated_init+0x80>
  4322e4:	f04f 0800 	mov.w	r8, #0
  4322e8:	4620      	mov	r0, r4
  4322ea:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
  4322ee:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
  4322f2:	4798      	blx	r3
  4322f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
  4322f8:	4641      	mov	r1, r8
  4322fa:	3301      	adds	r3, #1
  4322fc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
  432300:	2301      	movs	r3, #1
  432302:	e774      	b.n	4321ee <d_maybe_print_designated_init+0xd2>
  432304:	004354e4 	.word	0x004354e4

00432308 <__cxa_demangle>:
  432308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  43230c:	461d      	mov	r5, r3
  43230e:	b084      	sub	sp, #16
  432310:	2800      	cmp	r0, #0
  432312:	d039      	beq.n	432388 <__cxa_demangle+0x80>
  432314:	460c      	mov	r4, r1
  432316:	4617      	mov	r7, r2
  432318:	b109      	cbz	r1, 43231e <__cxa_demangle+0x16>
  43231a:	2a00      	cmp	r2, #0
  43231c:	d034      	beq.n	432388 <__cxa_demangle+0x80>
  43231e:	2300      	movs	r3, #0
  432320:	466a      	mov	r2, sp
  432322:	4928      	ldr	r1, [pc, #160]	@ (4323c4 <__cxa_demangle+0xbc>)
  432324:	e9cd 3300 	strd	r3, r3, [sp]
  432328:	e9cd 3302 	strd	r3, r3, [sp, #8]
  43232c:	f7ff fb90 	bl	431a50 <d_demangle_callback.constprop.0>
  432330:	2800      	cmp	r0, #0
  432332:	d03b      	beq.n	4323ac <__cxa_demangle+0xa4>
  432334:	9b03      	ldr	r3, [sp, #12]
  432336:	9e00      	ldr	r6, [sp, #0]
  432338:	b1d3      	cbz	r3, 432370 <__cxa_demangle+0x68>
  43233a:	2e00      	cmp	r6, #0
  43233c:	d03f      	beq.n	4323be <__cxa_demangle+0xb6>
  43233e:	f04f 0801 	mov.w	r8, #1
  432342:	b384      	cbz	r4, 4323a6 <__cxa_demangle+0x9e>
  432344:	4630      	mov	r0, r6
  432346:	f7ee fe41 	bl	420fcc <strlen>
  43234a:	683b      	ldr	r3, [r7, #0]
  43234c:	4298      	cmp	r0, r3
  43234e:	d224      	bcs.n	43239a <__cxa_demangle+0x92>
  432350:	1c42      	adds	r2, r0, #1
  432352:	4631      	mov	r1, r6
  432354:	4620      	mov	r0, r4
  432356:	f7de f931 	bl	4105bc <memcpy>
  43235a:	4630      	mov	r0, r6
  43235c:	4626      	mov	r6, r4
  43235e:	f000 f971 	bl	432644 <free>
  432362:	b10d      	cbz	r5, 432368 <__cxa_demangle+0x60>
  432364:	2300      	movs	r3, #0
  432366:	602b      	str	r3, [r5, #0]
  432368:	4630      	mov	r0, r6
  43236a:	b004      	add	sp, #16
  43236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  432370:	f8dd 8008 	ldr.w	r8, [sp, #8]
  432374:	2e00      	cmp	r6, #0
  432376:	d1e4      	bne.n	432342 <__cxa_demangle+0x3a>
  432378:	b155      	cbz	r5, 432390 <__cxa_demangle+0x88>
  43237a:	f1b8 0f01 	cmp.w	r8, #1
  43237e:	d11a      	bne.n	4323b6 <__cxa_demangle+0xae>
  432380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  432384:	602b      	str	r3, [r5, #0]
  432386:	e003      	b.n	432390 <__cxa_demangle+0x88>
  432388:	b115      	cbz	r5, 432390 <__cxa_demangle+0x88>
  43238a:	f06f 0302 	mvn.w	r3, #2
  43238e:	602b      	str	r3, [r5, #0]
  432390:	2600      	movs	r6, #0
  432392:	4630      	mov	r0, r6
  432394:	b004      	add	sp, #16
  432396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  43239a:	4620      	mov	r0, r4
  43239c:	f000 f952 	bl	432644 <free>
  4323a0:	f8c7 8000 	str.w	r8, [r7]
  4323a4:	e7dd      	b.n	432362 <__cxa_demangle+0x5a>
  4323a6:	2f00      	cmp	r7, #0
  4323a8:	d1fa      	bne.n	4323a0 <__cxa_demangle+0x98>
  4323aa:	e7da      	b.n	432362 <__cxa_demangle+0x5a>
  4323ac:	9800      	ldr	r0, [sp, #0]
  4323ae:	f000 f949 	bl	432644 <free>
  4323b2:	2d00      	cmp	r5, #0
  4323b4:	d0ec      	beq.n	432390 <__cxa_demangle+0x88>
  4323b6:	f06f 0301 	mvn.w	r3, #1
  4323ba:	602b      	str	r3, [r5, #0]
  4323bc:	e7e8      	b.n	432390 <__cxa_demangle+0x88>
  4323be:	2d00      	cmp	r5, #0
  4323c0:	d1de      	bne.n	432380 <__cxa_demangle+0x78>
  4323c2:	e7e5      	b.n	432390 <__cxa_demangle+0x88>
  4323c4:	0042c251 	.word	0x0042c251

004323c8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
  4323c8:	7803      	ldrb	r3, [r0, #0]
  4323ca:	2b47      	cmp	r3, #71	@ 0x47
  4323cc:	d001      	beq.n	4323d2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
  4323ce:	2000      	movs	r0, #0
  4323d0:	4770      	bx	lr
  4323d2:	7843      	ldrb	r3, [r0, #1]
  4323d4:	2b4e      	cmp	r3, #78	@ 0x4e
  4323d6:	d1fa      	bne.n	4323ce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
  4323d8:	7883      	ldrb	r3, [r0, #2]
  4323da:	2b55      	cmp	r3, #85	@ 0x55
  4323dc:	d1f7      	bne.n	4323ce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
  4323de:	78c3      	ldrb	r3, [r0, #3]
  4323e0:	2b43      	cmp	r3, #67	@ 0x43
  4323e2:	d1f4      	bne.n	4323ce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
  4323e4:	7903      	ldrb	r3, [r0, #4]
  4323e6:	2b43      	cmp	r3, #67	@ 0x43
  4323e8:	d1f1      	bne.n	4323ce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
  4323ea:	7943      	ldrb	r3, [r0, #5]
  4323ec:	2b2b      	cmp	r3, #43	@ 0x2b
  4323ee:	d1ee      	bne.n	4323ce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
  4323f0:	7983      	ldrb	r3, [r0, #6]
  4323f2:	2b2b      	cmp	r3, #43	@ 0x2b
  4323f4:	d1eb      	bne.n	4323ce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
  4323f6:	79c0      	ldrb	r0, [r0, #7]
  4323f8:	2801      	cmp	r0, #1
  4323fa:	bf8c      	ite	hi
  4323fc:	2000      	movhi	r0, #0
  4323fe:	2001      	movls	r0, #1
  432400:	4770      	bx	lr
  432402:	bf00      	nop

00432404 <__cxa_call_terminate>:
  432404:	b510      	push	{r4, lr}
  432406:	b130      	cbz	r0, 432416 <__cxa_call_terminate+0x12>
  432408:	4604      	mov	r4, r0
  43240a:	f000 f875 	bl	4324f8 <__cxa_begin_catch>
  43240e:	4620      	mov	r0, r4
  432410:	f7ff ffda 	bl	4323c8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
  432414:	b908      	cbnz	r0, 43241a <__cxa_call_terminate+0x16>
  432416:	f7f9 fa41 	bl	42b89c <_ZSt9terminatev>
  43241a:	f854 0c14 	ldr.w	r0, [r4, #-20]
  43241e:	f7f9 fa35 	bl	42b88c <_ZN10__cxxabiv111__terminateEPFvvE>
  432422:	bf00      	nop

00432424 <__cxa_call_unexpected>:
  432424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  432428:	b083      	sub	sp, #12
  43242a:	4602      	mov	r2, r0
  43242c:	f7ff ffcc 	bl	4323c8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
  432430:	b138      	cbz	r0, 432442 <__cxa_call_unexpected+0x1e>
  432432:	f8d2 a028 	ldr.w	sl, [r2, #40]	@ 0x28
  432436:	2600      	movs	r6, #0
  432438:	e952 8406 	ldrd	r8, r4, [r2, #-24]
  43243c:	e9d2 750c 	ldrd	r7, r5, [r2, #48]	@ 0x30
  432440:	e005      	b.n	43244e <__cxa_call_unexpected+0x2a>
  432442:	4604      	mov	r4, r0
  432444:	2601      	movs	r6, #1
  432446:	4680      	mov	r8, r0
  432448:	4605      	mov	r5, r0
  43244a:	4607      	mov	r7, r0
  43244c:	4682      	mov	sl, r0
  43244e:	4610      	mov	r0, r2
  432450:	f000 f852 	bl	4324f8 <__cxa_begin_catch>
  432454:	b10e      	cbz	r6, 43245a <__cxa_call_unexpected+0x36>
  432456:	f7f9 fa2d 	bl	42b8b4 <_ZSt10unexpectedv>
  43245a:	4640      	mov	r0, r8
  43245c:	f7f9 fa26 	bl	42b8ac <_ZN10__cxxabiv112__unexpectedEPFvvE>
  432460:	f000 f84a 	bl	4324f8 <__cxa_begin_catch>
  432464:	b10e      	cbz	r6, 43246a <__cxa_call_unexpected+0x46>
  432466:	f7f9 fa19 	bl	42b89c <_ZSt9terminatev>
  43246a:	f7f8 ff2b 	bl	42b2c4 <__cxa_get_globals_fast>
  43246e:	6803      	ldr	r3, [r0, #0]
  432470:	f027 0803 	bic.w	r8, r7, #3
  432474:	f04f 0900 	mov.w	r9, #0
  432478:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
  43247c:	f103 0b20 	add.w	fp, r3, #32
  432480:	2a01      	cmp	r2, #1
  432482:	bf0c      	ite	eq
  432484:	681a      	ldreq	r2, [r3, #0]
  432486:	f103 0278 	addne.w	r2, r3, #120	@ 0x78
  43248a:	9200      	str	r2, [sp, #0]
  43248c:	45ca      	cmp	sl, r9
  43248e:	dd1a      	ble.n	4324c6 <__cxa_call_unexpected+0xa2>
  432490:	682f      	ldr	r7, [r5, #0]
  432492:	b107      	cbz	r7, 432496 <__cxa_call_unexpected+0x72>
  432494:	442f      	add	r7, r5
  432496:	466b      	mov	r3, sp
  432498:	2200      	movs	r2, #0
  43249a:	4639      	mov	r1, r7
  43249c:	4658      	mov	r0, fp
  43249e:	f7f8 fe3b 	bl	42b118 <__cxa_type_match>
  4324a2:	b108      	cbz	r0, 4324a8 <__cxa_call_unexpected+0x84>
  4324a4:	f7f9 fa76 	bl	42b994 <__cxa_rethrow>
  4324a8:	683b      	ldr	r3, [r7, #0]
  4324aa:	aa01      	add	r2, sp, #4
  4324ac:	9001      	str	r0, [sp, #4]
  4324ae:	4638      	mov	r0, r7
  4324b0:	490e      	ldr	r1, [pc, #56]	@ (4324ec <__cxa_call_unexpected+0xc8>)
  4324b2:	691f      	ldr	r7, [r3, #16]
  4324b4:	2301      	movs	r3, #1
  4324b6:	47b8      	blx	r7
  4324b8:	2800      	cmp	r0, #0
  4324ba:	bf18      	it	ne
  4324bc:	4606      	movne	r6, r0
  4324be:	f109 0901 	add.w	r9, r9, #1
  4324c2:	4445      	add	r5, r8
  4324c4:	e7e2      	b.n	43248c <__cxa_call_unexpected+0x68>
  4324c6:	b146      	cbz	r6, 4324da <__cxa_call_unexpected+0xb6>
  4324c8:	2004      	movs	r0, #4
  4324ca:	f7f8 fd77 	bl	42afbc <__cxa_allocate_exception>
  4324ce:	4b08      	ldr	r3, [pc, #32]	@ (4324f0 <__cxa_call_unexpected+0xcc>)
  4324d0:	4a08      	ldr	r2, [pc, #32]	@ (4324f4 <__cxa_call_unexpected+0xd0>)
  4324d2:	4906      	ldr	r1, [pc, #24]	@ (4324ec <__cxa_call_unexpected+0xc8>)
  4324d4:	6003      	str	r3, [r0, #0]
  4324d6:	f7f9 fa41 	bl	42b95c <__cxa_throw>
  4324da:	4620      	mov	r0, r4
  4324dc:	f7f9 f9d6 	bl	42b88c <_ZN10__cxxabiv111__terminateEPFvvE>
  4324e0:	f000 f848 	bl	432574 <__cxa_end_catch>
  4324e4:	f000 f846 	bl	432574 <__cxa_end_catch>
  4324e8:	f7f8 fe10 	bl	42b10c <__cxa_end_cleanup>
  4324ec:	0043cc30 	.word	0x0043cc30
  4324f0:	0043cc98 	.word	0x0043cc98
  4324f4:	0042b2a1 	.word	0x0042b2a1

004324f8 <__cxa_begin_catch>:
  4324f8:	b538      	push	{r3, r4, r5, lr}
  4324fa:	4604      	mov	r4, r0
  4324fc:	f7f8 fee6 	bl	42b2cc <__cxa_get_globals>
  432500:	6805      	ldr	r5, [r0, #0]
  432502:	4622      	mov	r2, r4
  432504:	f812 3920 	ldrb.w	r3, [r2], #-32
  432508:	2b47      	cmp	r3, #71	@ 0x47
  43250a:	d003      	beq.n	432514 <__cxa_begin_catch+0x1c>
  43250c:	bb85      	cbnz	r5, 432570 <__cxa_begin_catch+0x78>
  43250e:	6002      	str	r2, [r0, #0]
  432510:	4628      	mov	r0, r5
  432512:	bd38      	pop	{r3, r4, r5, pc}
  432514:	7863      	ldrb	r3, [r4, #1]
  432516:	2b4e      	cmp	r3, #78	@ 0x4e
  432518:	d1f8      	bne.n	43250c <__cxa_begin_catch+0x14>
  43251a:	78a3      	ldrb	r3, [r4, #2]
  43251c:	2b55      	cmp	r3, #85	@ 0x55
  43251e:	d1f5      	bne.n	43250c <__cxa_begin_catch+0x14>
  432520:	78e3      	ldrb	r3, [r4, #3]
  432522:	2b43      	cmp	r3, #67	@ 0x43
  432524:	d1f2      	bne.n	43250c <__cxa_begin_catch+0x14>
  432526:	7923      	ldrb	r3, [r4, #4]
  432528:	2b43      	cmp	r3, #67	@ 0x43
  43252a:	d1ef      	bne.n	43250c <__cxa_begin_catch+0x14>
  43252c:	7963      	ldrb	r3, [r4, #5]
  43252e:	2b2b      	cmp	r3, #43	@ 0x2b
  432530:	d1ec      	bne.n	43250c <__cxa_begin_catch+0x14>
  432532:	79a3      	ldrb	r3, [r4, #6]
  432534:	2b2b      	cmp	r3, #43	@ 0x2b
  432536:	d1e9      	bne.n	43250c <__cxa_begin_catch+0x14>
  432538:	79e3      	ldrb	r3, [r4, #7]
  43253a:	2b01      	cmp	r3, #1
  43253c:	d8e6      	bhi.n	43250c <__cxa_begin_catch+0x14>
  43253e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  432542:	2b00      	cmp	r3, #0
  432544:	db11      	blt.n	43256a <__cxa_begin_catch+0x72>
  432546:	3301      	adds	r3, #1
  432548:	f844 3c0c 	str.w	r3, [r4, #-12]
  43254c:	4295      	cmp	r5, r2
  43254e:	6843      	ldr	r3, [r0, #4]
  432550:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
  432554:	6043      	str	r3, [r0, #4]
  432556:	d002      	beq.n	43255e <__cxa_begin_catch+0x66>
  432558:	f844 5c10 	str.w	r5, [r4, #-16]
  43255c:	6002      	str	r2, [r0, #0]
  43255e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  432560:	4620      	mov	r0, r4
  432562:	f000 fc1b 	bl	432d9c <_Unwind_Complete>
  432566:	4628      	mov	r0, r5
  432568:	bd38      	pop	{r3, r4, r5, pc}
  43256a:	f1c3 0301 	rsb	r3, r3, #1
  43256e:	e7eb      	b.n	432548 <__cxa_begin_catch+0x50>
  432570:	f7f9 f994 	bl	42b89c <_ZSt9terminatev>

00432574 <__cxa_end_catch>:
  432574:	b508      	push	{r3, lr}
  432576:	f7f8 fea5 	bl	42b2c4 <__cxa_get_globals_fast>
  43257a:	4602      	mov	r2, r0
  43257c:	6800      	ldr	r0, [r0, #0]
  43257e:	b370      	cbz	r0, 4325de <__cxa_end_catch+0x6a>
  432580:	f890 1020 	ldrb.w	r1, [r0, #32]
  432584:	2947      	cmp	r1, #71	@ 0x47
  432586:	d006      	beq.n	432596 <__cxa_end_catch+0x22>
  432588:	2100      	movs	r1, #0
  43258a:	3020      	adds	r0, #32
  43258c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  432590:	6011      	str	r1, [r2, #0]
  432592:	f000 bc05 	b.w	432da0 <_Unwind_DeleteException>
  432596:	f890 1021 	ldrb.w	r1, [r0, #33]	@ 0x21
  43259a:	294e      	cmp	r1, #78	@ 0x4e
  43259c:	d1f4      	bne.n	432588 <__cxa_end_catch+0x14>
  43259e:	f890 1022 	ldrb.w	r1, [r0, #34]	@ 0x22
  4325a2:	2955      	cmp	r1, #85	@ 0x55
  4325a4:	d1f0      	bne.n	432588 <__cxa_end_catch+0x14>
  4325a6:	f890 1023 	ldrb.w	r1, [r0, #35]	@ 0x23
  4325aa:	2943      	cmp	r1, #67	@ 0x43
  4325ac:	d1ec      	bne.n	432588 <__cxa_end_catch+0x14>
  4325ae:	f890 1024 	ldrb.w	r1, [r0, #36]	@ 0x24
  4325b2:	2943      	cmp	r1, #67	@ 0x43
  4325b4:	d1e8      	bne.n	432588 <__cxa_end_catch+0x14>
  4325b6:	f890 1025 	ldrb.w	r1, [r0, #37]	@ 0x25
  4325ba:	292b      	cmp	r1, #43	@ 0x2b
  4325bc:	d1e4      	bne.n	432588 <__cxa_end_catch+0x14>
  4325be:	f890 1026 	ldrb.w	r1, [r0, #38]	@ 0x26
  4325c2:	292b      	cmp	r1, #43	@ 0x2b
  4325c4:	d1e0      	bne.n	432588 <__cxa_end_catch+0x14>
  4325c6:	f890 1027 	ldrb.w	r1, [r0, #39]	@ 0x27
  4325ca:	2901      	cmp	r1, #1
  4325cc:	d8dc      	bhi.n	432588 <__cxa_end_catch+0x14>
  4325ce:	6941      	ldr	r1, [r0, #20]
  4325d0:	2900      	cmp	r1, #0
  4325d2:	db05      	blt.n	4325e0 <__cxa_end_catch+0x6c>
  4325d4:	3901      	subs	r1, #1
  4325d6:	d008      	beq.n	4325ea <__cxa_end_catch+0x76>
  4325d8:	1c4b      	adds	r3, r1, #1
  4325da:	d00d      	beq.n	4325f8 <__cxa_end_catch+0x84>
  4325dc:	6141      	str	r1, [r0, #20]
  4325de:	bd08      	pop	{r3, pc}
  4325e0:	3101      	adds	r1, #1
  4325e2:	d1fb      	bne.n	4325dc <__cxa_end_catch+0x68>
  4325e4:	6903      	ldr	r3, [r0, #16]
  4325e6:	6013      	str	r3, [r2, #0]
  4325e8:	e7f8      	b.n	4325dc <__cxa_end_catch+0x68>
  4325ea:	6901      	ldr	r1, [r0, #16]
  4325ec:	3020      	adds	r0, #32
  4325ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  4325f2:	6011      	str	r1, [r2, #0]
  4325f4:	f000 bbd4 	b.w	432da0 <_Unwind_DeleteException>
  4325f8:	f7f9 f950 	bl	42b89c <_ZSt9terminatev>

004325fc <__cxa_current_exception_type>:
  4325fc:	b508      	push	{r3, lr}
  4325fe:	f7f8 fe65 	bl	42b2cc <__cxa_get_globals>
  432602:	6800      	ldr	r0, [r0, #0]
  432604:	b130      	cbz	r0, 432614 <__cxa_current_exception_type+0x18>
  432606:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
  43260a:	2b01      	cmp	r3, #1
  43260c:	d101      	bne.n	432612 <__cxa_current_exception_type+0x16>
  43260e:	6800      	ldr	r0, [r0, #0]
  432610:	3878      	subs	r0, #120	@ 0x78
  432612:	6800      	ldr	r0, [r0, #0]
  432614:	bd08      	pop	{r3, pc}
  432616:	bf00      	nop

00432618 <getenv>:
  432618:	b500      	push	{lr}
  43261a:	b083      	sub	sp, #12
  43261c:	4b04      	ldr	r3, [pc, #16]	@ (432630 <getenv+0x18>)
  43261e:	4601      	mov	r1, r0
  432620:	aa01      	add	r2, sp, #4
  432622:	6818      	ldr	r0, [r3, #0]
  432624:	f7ee fed6 	bl	4213d4 <_findenv_r>
  432628:	b003      	add	sp, #12
  43262a:	f85d fb04 	ldr.w	pc, [sp], #4
  43262e:	bf00      	nop
  432630:	2000a4d8 	.word	0x2000a4d8

00432634 <malloc>:
  432634:	4b02      	ldr	r3, [pc, #8]	@ (432640 <malloc+0xc>)
  432636:	4601      	mov	r1, r0
  432638:	6818      	ldr	r0, [r3, #0]
  43263a:	f7ee bf0b 	b.w	421454 <_malloc_r>
  43263e:	bf00      	nop
  432640:	2000a4d8 	.word	0x2000a4d8

00432644 <free>:
  432644:	4b02      	ldr	r3, [pc, #8]	@ (432650 <free+0xc>)
  432646:	4601      	mov	r1, r0
  432648:	6818      	ldr	r0, [r3, #0]
  43264a:	f7ee bdc7 	b.w	4211dc <_free_r>
  43264e:	bf00      	nop
  432650:	2000a4d8 	.word	0x2000a4d8

00432654 <realloc>:
  432654:	4b02      	ldr	r3, [pc, #8]	@ (432660 <realloc+0xc>)
  432656:	460a      	mov	r2, r1
  432658:	4601      	mov	r1, r0
  43265a:	6818      	ldr	r0, [r3, #0]
  43265c:	f7f1 b83c 	b.w	4236d8 <_realloc_r>
  432660:	2000a4d8 	.word	0x2000a4d8

00432664 <_strtoul_l.isra.0>:
  432664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  432668:	4680      	mov	r8, r0
  43266a:	460c      	mov	r4, r1
  43266c:	4845      	ldr	r0, [pc, #276]	@ (432784 <_strtoul_l.isra.0+0x120>)
  43266e:	4626      	mov	r6, r4
  432670:	f814 eb01 	ldrb.w	lr, [r4], #1
  432674:	f810 c00e 	ldrb.w	ip, [r0, lr]
  432678:	f01c 0c08 	ands.w	ip, ip, #8
  43267c:	d1f7      	bne.n	43266e <_strtoul_l.isra.0+0xa>
  43267e:	f1be 0f2d 	cmp.w	lr, #45	@ 0x2d
  432682:	d05b      	beq.n	43273c <_strtoul_l.isra.0+0xd8>
  432684:	f1be 0f2b 	cmp.w	lr, #43	@ 0x2b
  432688:	d03a      	beq.n	432700 <_strtoul_l.isra.0+0x9c>
  43268a:	4665      	mov	r5, ip
  43268c:	f033 0010 	bics.w	r0, r3, #16
  432690:	d03e      	beq.n	432710 <_strtoul_l.isra.0+0xac>
  432692:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
  432696:	469a      	mov	sl, r3
  432698:	fbb7 f7f3 	udiv	r7, r7, r3
  43269c:	fb03 f907 	mul.w	r9, r3, r7
  4326a0:	ea6f 0909 	mvn.w	r9, r9
  4326a4:	2600      	movs	r6, #0
  4326a6:	4630      	mov	r0, r6
  4326a8:	e00e      	b.n	4326c8 <_strtoul_l.isra.0+0x64>
  4326aa:	f1ae 0c37 	sub.w	ip, lr, #55	@ 0x37
  4326ae:	4563      	cmp	r3, ip
  4326b0:	dd1d      	ble.n	4326ee <_strtoul_l.isra.0+0x8a>
  4326b2:	2e00      	cmp	r6, #0
  4326b4:	db04      	blt.n	4326c0 <_strtoul_l.isra.0+0x5c>
  4326b6:	42b8      	cmp	r0, r7
  4326b8:	d802      	bhi.n	4326c0 <_strtoul_l.isra.0+0x5c>
  4326ba:	d133      	bne.n	432724 <_strtoul_l.isra.0+0xc0>
  4326bc:	45cc      	cmp	ip, r9
  4326be:	dd31      	ble.n	432724 <_strtoul_l.isra.0+0xc0>
  4326c0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
  4326c4:	f814 eb01 	ldrb.w	lr, [r4], #1
  4326c8:	f1ae 0c30 	sub.w	ip, lr, #48	@ 0x30
  4326cc:	f1bc 0f09 	cmp.w	ip, #9
  4326d0:	d9ed      	bls.n	4326ae <_strtoul_l.isra.0+0x4a>
  4326d2:	f1ae 0c41 	sub.w	ip, lr, #65	@ 0x41
  4326d6:	f1bc 0f19 	cmp.w	ip, #25
  4326da:	d9e6      	bls.n	4326aa <_strtoul_l.isra.0+0x46>
  4326dc:	f1ae 0c61 	sub.w	ip, lr, #97	@ 0x61
  4326e0:	f1bc 0f19 	cmp.w	ip, #25
  4326e4:	d803      	bhi.n	4326ee <_strtoul_l.isra.0+0x8a>
  4326e6:	f1ae 0c57 	sub.w	ip, lr, #87	@ 0x57
  4326ea:	4563      	cmp	r3, ip
  4326ec:	dce1      	bgt.n	4326b2 <_strtoul_l.isra.0+0x4e>
  4326ee:	1c73      	adds	r3, r6, #1
  4326f0:	d01c      	beq.n	43272c <_strtoul_l.isra.0+0xc8>
  4326f2:	b105      	cbz	r5, 4326f6 <_strtoul_l.isra.0+0x92>
  4326f4:	4240      	negs	r0, r0
  4326f6:	b10a      	cbz	r2, 4326fc <_strtoul_l.isra.0+0x98>
  4326f8:	b9f6      	cbnz	r6, 432738 <_strtoul_l.isra.0+0xd4>
  4326fa:	6011      	str	r1, [r2, #0]
  4326fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  432700:	f033 0010 	bics.w	r0, r3, #16
  432704:	f894 e000 	ldrb.w	lr, [r4]
  432708:	4665      	mov	r5, ip
  43270a:	f106 0402 	add.w	r4, r6, #2
  43270e:	d1c0      	bne.n	432692 <_strtoul_l.isra.0+0x2e>
  432710:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
  432714:	d017      	beq.n	432746 <_strtoul_l.isra.0+0xe2>
  432716:	bb6b      	cbnz	r3, 432774 <_strtoul_l.isra.0+0x110>
  432718:	230a      	movs	r3, #10
  43271a:	f04f 0905 	mov.w	r9, #5
  43271e:	4f1a      	ldr	r7, [pc, #104]	@ (432788 <_strtoul_l.isra.0+0x124>)
  432720:	469a      	mov	sl, r3
  432722:	e7bf      	b.n	4326a4 <_strtoul_l.isra.0+0x40>
  432724:	fb00 c00a 	mla	r0, r0, sl, ip
  432728:	2601      	movs	r6, #1
  43272a:	e7cb      	b.n	4326c4 <_strtoul_l.isra.0+0x60>
  43272c:	2322      	movs	r3, #34	@ 0x22
  43272e:	4630      	mov	r0, r6
  432730:	f8c8 3000 	str.w	r3, [r8]
  432734:	2a00      	cmp	r2, #0
  432736:	d0e1      	beq.n	4326fc <_strtoul_l.isra.0+0x98>
  432738:	1e61      	subs	r1, r4, #1
  43273a:	e7de      	b.n	4326fa <_strtoul_l.isra.0+0x96>
  43273c:	f894 e000 	ldrb.w	lr, [r4]
  432740:	2501      	movs	r5, #1
  432742:	1cb4      	adds	r4, r6, #2
  432744:	e7a2      	b.n	43268c <_strtoul_l.isra.0+0x28>
  432746:	7820      	ldrb	r0, [r4, #0]
  432748:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
  43274c:	2858      	cmp	r0, #88	@ 0x58
  43274e:	d007      	beq.n	432760 <_strtoul_l.isra.0+0xfc>
  432750:	b983      	cbnz	r3, 432774 <_strtoul_l.isra.0+0x110>
  432752:	2308      	movs	r3, #8
  432754:	f04f 0907 	mov.w	r9, #7
  432758:	f06f 4760 	mvn.w	r7, #3758096384	@ 0xe0000000
  43275c:	469a      	mov	sl, r3
  43275e:	e7a1      	b.n	4326a4 <_strtoul_l.isra.0+0x40>
  432760:	2310      	movs	r3, #16
  432762:	f894 e001 	ldrb.w	lr, [r4, #1]
  432766:	f04f 090f 	mov.w	r9, #15
  43276a:	3402      	adds	r4, #2
  43276c:	f06f 4770 	mvn.w	r7, #4026531840	@ 0xf0000000
  432770:	469a      	mov	sl, r3
  432772:	e797      	b.n	4326a4 <_strtoul_l.isra.0+0x40>
  432774:	2310      	movs	r3, #16
  432776:	f04f 090f 	mov.w	r9, #15
  43277a:	f06f 4770 	mvn.w	r7, #4026531840	@ 0xf0000000
  43277e:	469a      	mov	sl, r3
  432780:	e790      	b.n	4326a4 <_strtoul_l.isra.0+0x40>
  432782:	bf00      	nop
  432784:	0043c531 	.word	0x0043c531
  432788:	19999999 	.word	0x19999999

0043278c <strtoul>:
  43278c:	b410      	push	{r4}
  43278e:	4c04      	ldr	r4, [pc, #16]	@ (4327a0 <strtoul+0x14>)
  432790:	4613      	mov	r3, r2
  432792:	460a      	mov	r2, r1
  432794:	4601      	mov	r1, r0
  432796:	6820      	ldr	r0, [r4, #0]
  432798:	f85d 4b04 	ldr.w	r4, [sp], #4
  43279c:	f7ff bf62 	b.w	432664 <_strtoul_l.isra.0>
  4327a0:	2000a4d8 	.word	0x2000a4d8

004327a4 <sprintf>:
  4327a4:	b40e      	push	{r1, r2, r3}
  4327a6:	b530      	push	{r4, r5, lr}
  4327a8:	b09c      	sub	sp, #112	@ 0x70
  4327aa:	4601      	mov	r1, r0
  4327ac:	4d0c      	ldr	r5, [pc, #48]	@ (4327e0 <sprintf+0x3c>)
  4327ae:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
  4327b2:	ab1f      	add	r3, sp, #124	@ 0x7c
  4327b4:	9102      	str	r1, [sp, #8]
  4327b6:	9106      	str	r1, [sp, #24]
  4327b8:	490a      	ldr	r1, [pc, #40]	@ (4327e4 <sprintf+0x40>)
  4327ba:	f853 2b04 	ldr.w	r2, [r3], #4
  4327be:	9105      	str	r1, [sp, #20]
  4327c0:	a902      	add	r1, sp, #8
  4327c2:	6828      	ldr	r0, [r5, #0]
  4327c4:	9301      	str	r3, [sp, #4]
  4327c6:	9404      	str	r4, [sp, #16]
  4327c8:	9407      	str	r4, [sp, #28]
  4327ca:	f7ef f905 	bl	4219d8 <_svfprintf_r>
  4327ce:	2200      	movs	r2, #0
  4327d0:	9b02      	ldr	r3, [sp, #8]
  4327d2:	701a      	strb	r2, [r3, #0]
  4327d4:	b01c      	add	sp, #112	@ 0x70
  4327d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  4327da:	b003      	add	sp, #12
  4327dc:	4770      	bx	lr
  4327de:	bf00      	nop
  4327e0:	2000a4d8 	.word	0x2000a4d8
  4327e4:	ffff0208 	.word	0xffff0208

004327e8 <fputc>:
  4327e8:	4b14      	ldr	r3, [pc, #80]	@ (43283c <fputc+0x54>)
  4327ea:	b570      	push	{r4, r5, r6, lr}
  4327ec:	681e      	ldr	r6, [r3, #0]
  4327ee:	4605      	mov	r5, r0
  4327f0:	460c      	mov	r4, r1
  4327f2:	b10e      	cbz	r6, 4327f8 <fputc+0x10>
  4327f4:	6b73      	ldr	r3, [r6, #52]	@ 0x34
  4327f6:	b1e3      	cbz	r3, 432832 <fputc+0x4a>
  4327f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  4327fa:	07d8      	lsls	r0, r3, #31
  4327fc:	d402      	bmi.n	432804 <fputc+0x1c>
  4327fe:	89a3      	ldrh	r3, [r4, #12]
  432800:	0599      	lsls	r1, r3, #22
  432802:	d512      	bpl.n	43282a <fputc+0x42>
  432804:	4622      	mov	r2, r4
  432806:	4629      	mov	r1, r5
  432808:	4630      	mov	r0, r6
  43280a:	f000 f8c1 	bl	432990 <_putc_r>
  43280e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  432810:	4605      	mov	r5, r0
  432812:	07da      	lsls	r2, r3, #31
  432814:	d402      	bmi.n	43281c <fputc+0x34>
  432816:	89a3      	ldrh	r3, [r4, #12]
  432818:	059b      	lsls	r3, r3, #22
  43281a:	d501      	bpl.n	432820 <fputc+0x38>
  43281c:	4628      	mov	r0, r5
  43281e:	bd70      	pop	{r4, r5, r6, pc}
  432820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  432822:	f7ee fb85 	bl	420f30 <__retarget_lock_release_recursive>
  432826:	4628      	mov	r0, r5
  432828:	bd70      	pop	{r4, r5, r6, pc}
  43282a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  43282c:	f7ee fb7e 	bl	420f2c <__retarget_lock_acquire_recursive>
  432830:	e7e8      	b.n	432804 <fputc+0x1c>
  432832:	4630      	mov	r0, r6
  432834:	f7ed feb6 	bl	4205a4 <__sinit>
  432838:	e7de      	b.n	4327f8 <fputc+0x10>
  43283a:	bf00      	nop
  43283c:	2000a4d8 	.word	0x2000a4d8

00432840 <_fputs_r>:
  432840:	b530      	push	{r4, r5, lr}
  432842:	b087      	sub	sp, #28
  432844:	4605      	mov	r5, r0
  432846:	4608      	mov	r0, r1
  432848:	4614      	mov	r4, r2
  43284a:	9101      	str	r1, [sp, #4]
  43284c:	f7ee fbbe 	bl	420fcc <strlen>
  432850:	aa01      	add	r2, sp, #4
  432852:	2301      	movs	r3, #1
  432854:	9005      	str	r0, [sp, #20]
  432856:	9002      	str	r0, [sp, #8]
  432858:	e9cd 2303 	strd	r2, r3, [sp, #12]
  43285c:	b10d      	cbz	r5, 432862 <_fputs_r+0x22>
  43285e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
  432860:	b353      	cbz	r3, 4328b8 <_fputs_r+0x78>
  432862:	6e62      	ldr	r2, [r4, #100]	@ 0x64
  432864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  432868:	07d2      	lsls	r2, r2, #31
  43286a:	d401      	bmi.n	432870 <_fputs_r+0x30>
  43286c:	0598      	lsls	r0, r3, #22
  43286e:	d51d      	bpl.n	4328ac <_fputs_r+0x6c>
  432870:	0499      	lsls	r1, r3, #18
  432872:	d406      	bmi.n	432882 <_fputs_r+0x42>
  432874:	6e62      	ldr	r2, [r4, #100]	@ 0x64
  432876:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
  43287a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  43287e:	81a3      	strh	r3, [r4, #12]
  432880:	6662      	str	r2, [r4, #100]	@ 0x64
  432882:	aa03      	add	r2, sp, #12
  432884:	4628      	mov	r0, r5
  432886:	4621      	mov	r1, r4
  432888:	f7ed feee 	bl	420668 <__sfvwrite_r>
  43288c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  43288e:	4605      	mov	r5, r0
  432890:	07da      	lsls	r2, r3, #31
  432892:	d402      	bmi.n	43289a <_fputs_r+0x5a>
  432894:	89a3      	ldrh	r3, [r4, #12]
  432896:	059b      	lsls	r3, r3, #22
  432898:	d502      	bpl.n	4328a0 <_fputs_r+0x60>
  43289a:	4628      	mov	r0, r5
  43289c:	b007      	add	sp, #28
  43289e:	bd30      	pop	{r4, r5, pc}
  4328a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  4328a2:	f7ee fb45 	bl	420f30 <__retarget_lock_release_recursive>
  4328a6:	4628      	mov	r0, r5
  4328a8:	b007      	add	sp, #28
  4328aa:	bd30      	pop	{r4, r5, pc}
  4328ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  4328ae:	f7ee fb3d 	bl	420f2c <__retarget_lock_acquire_recursive>
  4328b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4328b6:	e7db      	b.n	432870 <_fputs_r+0x30>
  4328b8:	4628      	mov	r0, r5
  4328ba:	f7ed fe73 	bl	4205a4 <__sinit>
  4328be:	e7d0      	b.n	432862 <_fputs_r+0x22>

004328c0 <fputs>:
  4328c0:	4b02      	ldr	r3, [pc, #8]	@ (4328cc <fputs+0xc>)
  4328c2:	460a      	mov	r2, r1
  4328c4:	4601      	mov	r1, r0
  4328c6:	6818      	ldr	r0, [r3, #0]
  4328c8:	f7ff bfba 	b.w	432840 <_fputs_r>
  4328cc:	2000a4d8 	.word	0x2000a4d8

004328d0 <_fwrite_r>:
  4328d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4328d4:	b086      	sub	sp, #24
  4328d6:	fb02 f503 	mul.w	r5, r2, r3
  4328da:	4698      	mov	r8, r3
  4328dc:	4617      	mov	r7, r2
  4328de:	ab01      	add	r3, sp, #4
  4328e0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  4328e2:	4606      	mov	r6, r0
  4328e4:	9101      	str	r1, [sp, #4]
  4328e6:	9303      	str	r3, [sp, #12]
  4328e8:	2301      	movs	r3, #1
  4328ea:	9502      	str	r5, [sp, #8]
  4328ec:	9505      	str	r5, [sp, #20]
  4328ee:	9304      	str	r3, [sp, #16]
  4328f0:	b110      	cbz	r0, 4328f8 <_fwrite_r+0x28>
  4328f2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  4328f4:	2b00      	cmp	r3, #0
  4328f6:	d038      	beq.n	43296a <_fwrite_r+0x9a>
  4328f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  4328fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4328fe:	07d8      	lsls	r0, r3, #31
  432900:	d401      	bmi.n	432906 <_fwrite_r+0x36>
  432902:	0591      	lsls	r1, r2, #22
  432904:	d526      	bpl.n	432954 <_fwrite_r+0x84>
  432906:	0493      	lsls	r3, r2, #18
  432908:	d406      	bmi.n	432918 <_fwrite_r+0x48>
  43290a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  43290c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
  432910:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  432914:	81a2      	strh	r2, [r4, #12]
  432916:	6663      	str	r3, [r4, #100]	@ 0x64
  432918:	4630      	mov	r0, r6
  43291a:	aa03      	add	r2, sp, #12
  43291c:	4621      	mov	r1, r4
  43291e:	f7ed fea3 	bl	420668 <__sfvwrite_r>
  432922:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  432924:	b178      	cbz	r0, 432946 <_fwrite_r+0x76>
  432926:	07da      	lsls	r2, r3, #31
  432928:	d506      	bpl.n	432938 <_fwrite_r+0x68>
  43292a:	9b05      	ldr	r3, [sp, #20]
  43292c:	1ae8      	subs	r0, r5, r3
  43292e:	fbb0 f0f7 	udiv	r0, r0, r7
  432932:	b006      	add	sp, #24
  432934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  432938:	89a3      	ldrh	r3, [r4, #12]
  43293a:	059b      	lsls	r3, r3, #22
  43293c:	d4f5      	bmi.n	43292a <_fwrite_r+0x5a>
  43293e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  432940:	f7ee faf6 	bl	420f30 <__retarget_lock_release_recursive>
  432944:	e7f1      	b.n	43292a <_fwrite_r+0x5a>
  432946:	07d8      	lsls	r0, r3, #31
  432948:	d402      	bmi.n	432950 <_fwrite_r+0x80>
  43294a:	89a3      	ldrh	r3, [r4, #12]
  43294c:	0599      	lsls	r1, r3, #22
  43294e:	d507      	bpl.n	432960 <_fwrite_r+0x90>
  432950:	4640      	mov	r0, r8
  432952:	e7ee      	b.n	432932 <_fwrite_r+0x62>
  432954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  432956:	f7ee fae9 	bl	420f2c <__retarget_lock_acquire_recursive>
  43295a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  43295e:	e7d2      	b.n	432906 <_fwrite_r+0x36>
  432960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  432962:	f7ee fae5 	bl	420f30 <__retarget_lock_release_recursive>
  432966:	4640      	mov	r0, r8
  432968:	e7e3      	b.n	432932 <_fwrite_r+0x62>
  43296a:	f7ed fe1b 	bl	4205a4 <__sinit>
  43296e:	e7c3      	b.n	4328f8 <_fwrite_r+0x28>

00432970 <fwrite>:
  432970:	4694      	mov	ip, r2
  432972:	460a      	mov	r2, r1
  432974:	4601      	mov	r1, r0
  432976:	b530      	push	{r4, r5, lr}
  432978:	461c      	mov	r4, r3
  43297a:	b083      	sub	sp, #12
  43297c:	4d03      	ldr	r5, [pc, #12]	@ (43298c <fwrite+0x1c>)
  43297e:	4663      	mov	r3, ip
  432980:	6828      	ldr	r0, [r5, #0]
  432982:	9400      	str	r4, [sp, #0]
  432984:	f7ff ffa4 	bl	4328d0 <_fwrite_r>
  432988:	b003      	add	sp, #12
  43298a:	bd30      	pop	{r4, r5, pc}
  43298c:	2000a4d8 	.word	0x2000a4d8

00432990 <_putc_r>:
  432990:	b570      	push	{r4, r5, r6, lr}
  432992:	460e      	mov	r6, r1
  432994:	4605      	mov	r5, r0
  432996:	4614      	mov	r4, r2
  432998:	b110      	cbz	r0, 4329a0 <_putc_r+0x10>
  43299a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  43299c:	2b00      	cmp	r3, #0
  43299e:	d02f      	beq.n	432a00 <_putc_r+0x70>
  4329a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  4329a2:	07d8      	lsls	r0, r3, #31
  4329a4:	d402      	bmi.n	4329ac <_putc_r+0x1c>
  4329a6:	89a3      	ldrh	r3, [r4, #12]
  4329a8:	0599      	lsls	r1, r3, #22
  4329aa:	d520      	bpl.n	4329ee <_putc_r+0x5e>
  4329ac:	68a3      	ldr	r3, [r4, #8]
  4329ae:	3b01      	subs	r3, #1
  4329b0:	2b00      	cmp	r3, #0
  4329b2:	60a3      	str	r3, [r4, #8]
  4329b4:	da19      	bge.n	4329ea <_putc_r+0x5a>
  4329b6:	69a2      	ldr	r2, [r4, #24]
  4329b8:	4293      	cmp	r3, r2
  4329ba:	db0f      	blt.n	4329dc <_putc_r+0x4c>
  4329bc:	b2f0      	uxtb	r0, r6
  4329be:	280a      	cmp	r0, #10
  4329c0:	d00c      	beq.n	4329dc <_putc_r+0x4c>
  4329c2:	6823      	ldr	r3, [r4, #0]
  4329c4:	4605      	mov	r5, r0
  4329c6:	1c5a      	adds	r2, r3, #1
  4329c8:	6022      	str	r2, [r4, #0]
  4329ca:	701e      	strb	r6, [r3, #0]
  4329cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
  4329ce:	07da      	lsls	r2, r3, #31
  4329d0:	d402      	bmi.n	4329d8 <_putc_r+0x48>
  4329d2:	89a3      	ldrh	r3, [r4, #12]
  4329d4:	059b      	lsls	r3, r3, #22
  4329d6:	d50e      	bpl.n	4329f6 <_putc_r+0x66>
  4329d8:	4628      	mov	r0, r5
  4329da:	bd70      	pop	{r4, r5, r6, pc}
  4329dc:	4628      	mov	r0, r5
  4329de:	4622      	mov	r2, r4
  4329e0:	4631      	mov	r1, r6
  4329e2:	f7f1 f889 	bl	423af8 <__swbuf_r>
  4329e6:	4605      	mov	r5, r0
  4329e8:	e7f0      	b.n	4329cc <_putc_r+0x3c>
  4329ea:	b2f0      	uxtb	r0, r6
  4329ec:	e7e9      	b.n	4329c2 <_putc_r+0x32>
  4329ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  4329f0:	f7ee fa9c 	bl	420f2c <__retarget_lock_acquire_recursive>
  4329f4:	e7da      	b.n	4329ac <_putc_r+0x1c>
  4329f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  4329f8:	f7ee fa9a 	bl	420f30 <__retarget_lock_release_recursive>
  4329fc:	4628      	mov	r0, r5
  4329fe:	bd70      	pop	{r4, r5, r6, pc}
  432a00:	f7ed fdd0 	bl	4205a4 <__sinit>
  432a04:	e7cc      	b.n	4329a0 <_putc_r+0x10>
  432a06:	bf00      	nop

00432a08 <selfrel_offset31>:
  432a08:	6803      	ldr	r3, [r0, #0]
  432a0a:	005a      	lsls	r2, r3, #1
  432a0c:	bf4c      	ite	mi
  432a0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
  432a12:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
  432a16:	4418      	add	r0, r3
  432a18:	4770      	bx	lr
  432a1a:	bf00      	nop

00432a1c <search_EIT_table>:
  432a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  432a20:	b329      	cbz	r1, 432a6e <search_EIT_table+0x52>
  432a22:	f101 3aff 	add.w	sl, r1, #4294967295	@ 0xffffffff
  432a26:	4680      	mov	r8, r0
  432a28:	4691      	mov	r9, r2
  432a2a:	2500      	movs	r5, #0
  432a2c:	4656      	mov	r6, sl
  432a2e:	19a9      	adds	r1, r5, r6
  432a30:	bf48      	it	mi
  432a32:	3101      	addmi	r1, #1
  432a34:	1049      	asrs	r1, r1, #1
  432a36:	eb08 07c1 	add.w	r7, r8, r1, lsl #3
  432a3a:	00cc      	lsls	r4, r1, #3
  432a3c:	4638      	mov	r0, r7
  432a3e:	f7ff ffe3 	bl	432a08 <selfrel_offset31>
  432a42:	458a      	cmp	sl, r1
  432a44:	d00d      	beq.n	432a62 <search_EIT_table+0x46>
  432a46:	3408      	adds	r4, #8
  432a48:	4548      	cmp	r0, r9
  432a4a:	eb08 0004 	add.w	r0, r8, r4
  432a4e:	d80a      	bhi.n	432a66 <search_EIT_table+0x4a>
  432a50:	f7ff ffda 	bl	432a08 <selfrel_offset31>
  432a54:	3801      	subs	r0, #1
  432a56:	1c4d      	adds	r5, r1, #1
  432a58:	4548      	cmp	r0, r9
  432a5a:	d3e8      	bcc.n	432a2e <search_EIT_table+0x12>
  432a5c:	4638      	mov	r0, r7
  432a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  432a62:	4548      	cmp	r0, r9
  432a64:	d9fa      	bls.n	432a5c <search_EIT_table+0x40>
  432a66:	428d      	cmp	r5, r1
  432a68:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
  432a6c:	d1df      	bne.n	432a2e <search_EIT_table+0x12>
  432a6e:	2700      	movs	r7, #0
  432a70:	4638      	mov	r0, r7
  432a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  432a76:	bf00      	nop

00432a78 <__gnu_unwind_get_pr_addr>:
  432a78:	2801      	cmp	r0, #1
  432a7a:	d009      	beq.n	432a90 <__gnu_unwind_get_pr_addr+0x18>
  432a7c:	2802      	cmp	r0, #2
  432a7e:	d005      	beq.n	432a8c <__gnu_unwind_get_pr_addr+0x14>
  432a80:	2800      	cmp	r0, #0
  432a82:	4b04      	ldr	r3, [pc, #16]	@ (432a94 <__gnu_unwind_get_pr_addr+0x1c>)
  432a84:	bf14      	ite	ne
  432a86:	2000      	movne	r0, #0
  432a88:	4618      	moveq	r0, r3
  432a8a:	4770      	bx	lr
  432a8c:	4802      	ldr	r0, [pc, #8]	@ (432a98 <__gnu_unwind_get_pr_addr+0x20>)
  432a8e:	4770      	bx	lr
  432a90:	4802      	ldr	r0, [pc, #8]	@ (432a9c <__gnu_unwind_get_pr_addr+0x24>)
  432a92:	4770      	bx	lr
  432a94:	00433171 	.word	0x00433171
  432a98:	00433181 	.word	0x00433181
  432a9c:	00433179 	.word	0x00433179

00432aa0 <get_eit_entry>:
  432aa0:	4b22      	ldr	r3, [pc, #136]	@ (432b2c <get_eit_entry+0x8c>)
  432aa2:	b530      	push	{r4, r5, lr}
  432aa4:	4604      	mov	r4, r0
  432aa6:	b083      	sub	sp, #12
  432aa8:	1e8d      	subs	r5, r1, #2
  432aaa:	b343      	cbz	r3, 432afe <get_eit_entry+0x5e>
  432aac:	a901      	add	r1, sp, #4
  432aae:	4628      	mov	r0, r5
  432ab0:	f3af 8000 	nop.w
  432ab4:	b1f0      	cbz	r0, 432af4 <get_eit_entry+0x54>
  432ab6:	9901      	ldr	r1, [sp, #4]
  432ab8:	462a      	mov	r2, r5
  432aba:	f7ff ffaf 	bl	432a1c <search_EIT_table>
  432abe:	4601      	mov	r1, r0
  432ac0:	b1c0      	cbz	r0, 432af4 <get_eit_entry+0x54>
  432ac2:	f7ff ffa1 	bl	432a08 <selfrel_offset31>
  432ac6:	684b      	ldr	r3, [r1, #4]
  432ac8:	64a0      	str	r0, [r4, #72]	@ 0x48
  432aca:	2b01      	cmp	r3, #1
  432acc:	d02a      	beq.n	432b24 <get_eit_entry+0x84>
  432ace:	2b00      	cmp	r3, #0
  432ad0:	f101 0004 	add.w	r0, r1, #4
  432ad4:	db24      	blt.n	432b20 <get_eit_entry+0x80>
  432ad6:	f7ff ff97 	bl	432a08 <selfrel_offset31>
  432ada:	2300      	movs	r3, #0
  432adc:	6523      	str	r3, [r4, #80]	@ 0x50
  432ade:	6803      	ldr	r3, [r0, #0]
  432ae0:	64e0      	str	r0, [r4, #76]	@ 0x4c
  432ae2:	2b00      	cmp	r3, #0
  432ae4:	db11      	blt.n	432b0a <get_eit_entry+0x6a>
  432ae6:	f7ff ff8f 	bl	432a08 <selfrel_offset31>
  432aea:	4603      	mov	r3, r0
  432aec:	2000      	movs	r0, #0
  432aee:	6123      	str	r3, [r4, #16]
  432af0:	b003      	add	sp, #12
  432af2:	bd30      	pop	{r4, r5, pc}
  432af4:	2300      	movs	r3, #0
  432af6:	2009      	movs	r0, #9
  432af8:	6123      	str	r3, [r4, #16]
  432afa:	b003      	add	sp, #12
  432afc:	bd30      	pop	{r4, r5, pc}
  432afe:	480c      	ldr	r0, [pc, #48]	@ (432b30 <get_eit_entry+0x90>)
  432b00:	490c      	ldr	r1, [pc, #48]	@ (432b34 <get_eit_entry+0x94>)
  432b02:	1a09      	subs	r1, r1, r0
  432b04:	10c9      	asrs	r1, r1, #3
  432b06:	9101      	str	r1, [sp, #4]
  432b08:	e7d6      	b.n	432ab8 <get_eit_entry+0x18>
  432b0a:	f3c3 6003 	ubfx	r0, r3, #24, #4
  432b0e:	f7ff ffb3 	bl	432a78 <__gnu_unwind_get_pr_addr>
  432b12:	1e03      	subs	r3, r0, #0
  432b14:	bf0c      	ite	eq
  432b16:	2009      	moveq	r0, #9
  432b18:	2000      	movne	r0, #0
  432b1a:	6123      	str	r3, [r4, #16]
  432b1c:	b003      	add	sp, #12
  432b1e:	bd30      	pop	{r4, r5, pc}
  432b20:	2301      	movs	r3, #1
  432b22:	e7db      	b.n	432adc <get_eit_entry+0x3c>
  432b24:	2300      	movs	r3, #0
  432b26:	2005      	movs	r0, #5
  432b28:	e7e1      	b.n	432aee <get_eit_entry+0x4e>
  432b2a:	bf00      	nop
  432b2c:	00000000 	.word	0x00000000
  432b30:	0043d768 	.word	0x0043d768
  432b34:	0043d948 	.word	0x0043d948

00432b38 <restore_non_core_regs>:
  432b38:	6803      	ldr	r3, [r0, #0]
  432b3a:	07da      	lsls	r2, r3, #31
  432b3c:	b510      	push	{r4, lr}
  432b3e:	4604      	mov	r4, r0
  432b40:	d406      	bmi.n	432b50 <restore_non_core_regs+0x18>
  432b42:	079b      	lsls	r3, r3, #30
  432b44:	f100 0050 	add.w	r0, r0, #80	@ 0x50
  432b48:	d509      	bpl.n	432b5e <restore_non_core_regs+0x26>
  432b4a:	f7dd ffcf 	bl	410aec <__gnu_Unwind_Restore_VFP_D>
  432b4e:	6823      	ldr	r3, [r4, #0]
  432b50:	0759      	lsls	r1, r3, #29
  432b52:	d509      	bpl.n	432b68 <restore_non_core_regs+0x30>
  432b54:	071a      	lsls	r2, r3, #28
  432b56:	d50e      	bpl.n	432b76 <restore_non_core_regs+0x3e>
  432b58:	06db      	lsls	r3, r3, #27
  432b5a:	d513      	bpl.n	432b84 <restore_non_core_regs+0x4c>
  432b5c:	bd10      	pop	{r4, pc}
  432b5e:	f7dd ffbd 	bl	410adc <__gnu_Unwind_Restore_VFP>
  432b62:	6823      	ldr	r3, [r4, #0]
  432b64:	0759      	lsls	r1, r3, #29
  432b66:	d4f5      	bmi.n	432b54 <restore_non_core_regs+0x1c>
  432b68:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
  432b6c:	f7dd ffc6 	bl	410afc <__gnu_Unwind_Restore_VFP_D_16_to_31>
  432b70:	6823      	ldr	r3, [r4, #0]
  432b72:	071a      	lsls	r2, r3, #28
  432b74:	d4f0      	bmi.n	432b58 <restore_non_core_regs+0x20>
  432b76:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
  432b7a:	f7dd ffc7 	bl	410b0c <__gnu_Unwind_Restore_WMMXD>
  432b7e:	6823      	ldr	r3, [r4, #0]
  432b80:	06db      	lsls	r3, r3, #27
  432b82:	d4eb      	bmi.n	432b5c <restore_non_core_regs+0x24>
  432b84:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
  432b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  432b8c:	f7de b802 	b.w	410b94 <__gnu_Unwind_Restore_WMMXC>

00432b90 <_Unwind_decode_typeinfo_ptr.constprop.0>:
  432b90:	4603      	mov	r3, r0
  432b92:	6800      	ldr	r0, [r0, #0]
  432b94:	b100      	cbz	r0, 432b98 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
  432b96:	4418      	add	r0, r3
  432b98:	4770      	bx	lr
  432b9a:	bf00      	nop

00432b9c <_Unwind_DebugHook>:
  432b9c:	4770      	bx	lr
  432b9e:	bf00      	nop

00432ba0 <unwind_phase2>:
  432ba0:	b570      	push	{r4, r5, r6, lr}
  432ba2:	4604      	mov	r4, r0
  432ba4:	460e      	mov	r6, r1
  432ba6:	6c31      	ldr	r1, [r6, #64]	@ 0x40
  432ba8:	4620      	mov	r0, r4
  432baa:	f7ff ff79 	bl	432aa0 <get_eit_entry>
  432bae:	4605      	mov	r5, r0
  432bb0:	b998      	cbnz	r0, 432bda <unwind_phase2+0x3a>
  432bb2:	f8d6 c040 	ldr.w	ip, [r6, #64]	@ 0x40
  432bb6:	4632      	mov	r2, r6
  432bb8:	6923      	ldr	r3, [r4, #16]
  432bba:	4621      	mov	r1, r4
  432bbc:	2001      	movs	r0, #1
  432bbe:	f8c4 c014 	str.w	ip, [r4, #20]
  432bc2:	4798      	blx	r3
  432bc4:	2808      	cmp	r0, #8
  432bc6:	d0ee      	beq.n	432ba6 <unwind_phase2+0x6>
  432bc8:	2807      	cmp	r0, #7
  432bca:	d106      	bne.n	432bda <unwind_phase2+0x3a>
  432bcc:	4628      	mov	r0, r5
  432bce:	6c31      	ldr	r1, [r6, #64]	@ 0x40
  432bd0:	f7ff ffe4 	bl	432b9c <_Unwind_DebugHook>
  432bd4:	1d30      	adds	r0, r6, #4
  432bd6:	f7dd ff75 	bl	410ac4 <__restore_core_regs>
  432bda:	f7ec fadd 	bl	41f198 <abort>
  432bde:	bf00      	nop

00432be0 <unwind_phase2_forced>:
  432be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  432be4:	f101 0c04 	add.w	ip, r1, #4
  432be8:	f5ad 7d78 	sub.w	sp, sp, #992	@ 0x3e0
  432bec:	68c7      	ldr	r7, [r0, #12]
  432bee:	4606      	mov	r6, r0
  432bf0:	f8d0 8018 	ldr.w	r8, [r0, #24]
  432bf4:	4614      	mov	r4, r2
  432bf6:	f10d 0e14 	add.w	lr, sp, #20
  432bfa:	ad04      	add	r5, sp, #16
  432bfc:	f04f 0900 	mov.w	r9, #0
  432c00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  432c04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  432c08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  432c0c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  432c10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  432c14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
  432c18:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
  432c1c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
  432c20:	f8c5 9000 	str.w	r9, [r5]
  432c24:	e023      	b.n	432c6e <unwind_phase2_forced+0x8e>
  432c26:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
  432c28:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
  432c2c:	4629      	mov	r1, r5
  432c2e:	a87e      	add	r0, sp, #504	@ 0x1f8
  432c30:	6173      	str	r3, [r6, #20]
  432c32:	f7dd fcc3 	bl	4105bc <memcpy>
  432c36:	6933      	ldr	r3, [r6, #16]
  432c38:	aa7e      	add	r2, sp, #504	@ 0x1f8
  432c3a:	4631      	mov	r1, r6
  432c3c:	4650      	mov	r0, sl
  432c3e:	4798      	blx	r3
  432c40:	9b8c      	ldr	r3, [sp, #560]	@ 0x230
  432c42:	4621      	mov	r1, r4
  432c44:	4681      	mov	r9, r0
  432c46:	9303      	str	r3, [sp, #12]
  432c48:	4632      	mov	r2, r6
  432c4a:	9c03      	ldr	r4, [sp, #12]
  432c4c:	4633      	mov	r3, r6
  432c4e:	2001      	movs	r0, #1
  432c50:	64ac      	str	r4, [r5, #72]	@ 0x48
  432c52:	e9cd 5800 	strd	r5, r8, [sp]
  432c56:	47b8      	blx	r7
  432c58:	4604      	mov	r4, r0
  432c5a:	bb28      	cbnz	r0, 432ca8 <unwind_phase2_forced+0xc8>
  432c5c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
  432c60:	a97e      	add	r1, sp, #504	@ 0x1f8
  432c62:	4628      	mov	r0, r5
  432c64:	f7dd fcaa 	bl	4105bc <memcpy>
  432c68:	f1b9 0f08 	cmp.w	r9, #8
  432c6c:	d119      	bne.n	432ca2 <unwind_phase2_forced+0xc2>
  432c6e:	3409      	adds	r4, #9
  432c70:	6c29      	ldr	r1, [r5, #64]	@ 0x40
  432c72:	4630      	mov	r0, r6
  432c74:	f7ff ff14 	bl	432aa0 <get_eit_entry>
  432c78:	4681      	mov	r9, r0
  432c7a:	fa5f fa84 	uxtb.w	sl, r4
  432c7e:	2800      	cmp	r0, #0
  432c80:	d0d1      	beq.n	432c26 <unwind_phase2_forced+0x46>
  432c82:	6bac      	ldr	r4, [r5, #56]	@ 0x38
  432c84:	4633      	mov	r3, r6
  432c86:	4632      	mov	r2, r6
  432c88:	f04a 0110 	orr.w	r1, sl, #16
  432c8c:	64ac      	str	r4, [r5, #72]	@ 0x48
  432c8e:	2001      	movs	r0, #1
  432c90:	e9cd 5800 	strd	r5, r8, [sp]
  432c94:	47b8      	blx	r7
  432c96:	b938      	cbnz	r0, 432ca8 <unwind_phase2_forced+0xc8>
  432c98:	4648      	mov	r0, r9
  432c9a:	f50d 7d78 	add.w	sp, sp, #992	@ 0x3e0
  432c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  432ca2:	f1b9 0f07 	cmp.w	r9, #7
  432ca6:	d006      	beq.n	432cb6 <unwind_phase2_forced+0xd6>
  432ca8:	f04f 0909 	mov.w	r9, #9
  432cac:	4648      	mov	r0, r9
  432cae:	f50d 7d78 	add.w	sp, sp, #992	@ 0x3e0
  432cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  432cb6:	4620      	mov	r0, r4
  432cb8:	6c29      	ldr	r1, [r5, #64]	@ 0x40
  432cba:	f7ff ff6f 	bl	432b9c <_Unwind_DebugHook>
  432cbe:	a805      	add	r0, sp, #20
  432cc0:	f7dd ff00 	bl	410ac4 <__restore_core_regs>

00432cc4 <__gnu_Unwind_RaiseException>:
  432cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  432cc6:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
  432cc8:	b0fb      	sub	sp, #492	@ 0x1ec
  432cca:	f101 0c04 	add.w	ip, r1, #4
  432cce:	460e      	mov	r6, r1
  432cd0:	640b      	str	r3, [r1, #64]	@ 0x40
  432cd2:	ac01      	add	r4, sp, #4
  432cd4:	4605      	mov	r5, r0
  432cd6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
  432cda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  432cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  432ce0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  432ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  432ce6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
  432cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  432cec:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
  432cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  432cf4:	9700      	str	r7, [sp, #0]
  432cf6:	e006      	b.n	432d06 <__gnu_Unwind_RaiseException+0x42>
  432cf8:	692b      	ldr	r3, [r5, #16]
  432cfa:	466a      	mov	r2, sp
  432cfc:	4629      	mov	r1, r5
  432cfe:	4798      	blx	r3
  432d00:	2808      	cmp	r0, #8
  432d02:	4604      	mov	r4, r0
  432d04:	d108      	bne.n	432d18 <__gnu_Unwind_RaiseException+0x54>
  432d06:	9910      	ldr	r1, [sp, #64]	@ 0x40
  432d08:	4628      	mov	r0, r5
  432d0a:	f7ff fec9 	bl	432aa0 <get_eit_entry>
  432d0e:	2800      	cmp	r0, #0
  432d10:	d0f2      	beq.n	432cf8 <__gnu_Unwind_RaiseException+0x34>
  432d12:	2009      	movs	r0, #9
  432d14:	b07b      	add	sp, #492	@ 0x1ec
  432d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  432d18:	4668      	mov	r0, sp
  432d1a:	f7ff ff0d 	bl	432b38 <restore_non_core_regs>
  432d1e:	2c06      	cmp	r4, #6
  432d20:	d1f7      	bne.n	432d12 <__gnu_Unwind_RaiseException+0x4e>
  432d22:	4631      	mov	r1, r6
  432d24:	4628      	mov	r0, r5
  432d26:	f7ff ff3b 	bl	432ba0 <unwind_phase2>
  432d2a:	bf00      	nop

00432d2c <__gnu_Unwind_ForcedUnwind>:
  432d2c:	b410      	push	{r4}
  432d2e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
  432d30:	60c1      	str	r1, [r0, #12]
  432d32:	4619      	mov	r1, r3
  432d34:	6182      	str	r2, [r0, #24]
  432d36:	2200      	movs	r2, #0
  432d38:	641c      	str	r4, [r3, #64]	@ 0x40
  432d3a:	bc10      	pop	{r4}
  432d3c:	f7ff bf50 	b.w	432be0 <unwind_phase2_forced>

00432d40 <__gnu_Unwind_Resume>:
  432d40:	b570      	push	{r4, r5, r6, lr}
  432d42:	6943      	ldr	r3, [r0, #20]
  432d44:	68c6      	ldr	r6, [r0, #12]
  432d46:	640b      	str	r3, [r1, #64]	@ 0x40
  432d48:	b9ae      	cbnz	r6, 432d76 <__gnu_Unwind_Resume+0x36>
  432d4a:	6903      	ldr	r3, [r0, #16]
  432d4c:	460a      	mov	r2, r1
  432d4e:	4604      	mov	r4, r0
  432d50:	460d      	mov	r5, r1
  432d52:	4601      	mov	r1, r0
  432d54:	2002      	movs	r0, #2
  432d56:	4798      	blx	r3
  432d58:	2807      	cmp	r0, #7
  432d5a:	d005      	beq.n	432d68 <__gnu_Unwind_Resume+0x28>
  432d5c:	2808      	cmp	r0, #8
  432d5e:	d10f      	bne.n	432d80 <__gnu_Unwind_Resume+0x40>
  432d60:	4629      	mov	r1, r5
  432d62:	4620      	mov	r0, r4
  432d64:	f7ff ff1c 	bl	432ba0 <unwind_phase2>
  432d68:	4630      	mov	r0, r6
  432d6a:	6c29      	ldr	r1, [r5, #64]	@ 0x40
  432d6c:	f7ff ff16 	bl	432b9c <_Unwind_DebugHook>
  432d70:	1d28      	adds	r0, r5, #4
  432d72:	f7dd fea7 	bl	410ac4 <__restore_core_regs>
  432d76:	2201      	movs	r2, #1
  432d78:	f7ff ff32 	bl	432be0 <unwind_phase2_forced>
  432d7c:	f7ec fa0c 	bl	41f198 <abort>
  432d80:	f7ec fa0a 	bl	41f198 <abort>

00432d84 <__gnu_Unwind_Resume_or_Rethrow>:
  432d84:	68c2      	ldr	r2, [r0, #12]
  432d86:	b132      	cbz	r2, 432d96 <__gnu_Unwind_Resume_or_Rethrow+0x12>
  432d88:	f8d1 c03c 	ldr.w	ip, [r1, #60]	@ 0x3c
  432d8c:	2200      	movs	r2, #0
  432d8e:	f8c1 c040 	str.w	ip, [r1, #64]	@ 0x40
  432d92:	f7ff bf25 	b.w	432be0 <unwind_phase2_forced>
  432d96:	f7ff bf95 	b.w	432cc4 <__gnu_Unwind_RaiseException>
  432d9a:	bf00      	nop

00432d9c <_Unwind_Complete>:
  432d9c:	4770      	bx	lr
  432d9e:	bf00      	nop

00432da0 <_Unwind_DeleteException>:
  432da0:	6883      	ldr	r3, [r0, #8]
  432da2:	4601      	mov	r1, r0
  432da4:	b10b      	cbz	r3, 432daa <_Unwind_DeleteException+0xa>
  432da6:	2001      	movs	r0, #1
  432da8:	4718      	bx	r3
  432daa:	4770      	bx	lr

00432dac <_Unwind_VRS_Get>:
  432dac:	2905      	cmp	r1, #5
  432dae:	d815      	bhi.n	432ddc <_Unwind_VRS_Get+0x30>
  432db0:	e8df f001 	tbb	[pc, r1]
  432db4:	0314030a 	.word	0x0314030a
  432db8:	0503      	.short	0x0503
  432dba:	2001      	movs	r0, #1
  432dbc:	4770      	bx	lr
  432dbe:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  432dc0:	2000      	movs	r0, #0
  432dc2:	9a00      	ldr	r2, [sp, #0]
  432dc4:	6013      	str	r3, [r2, #0]
  432dc6:	4770      	bx	lr
  432dc8:	b943      	cbnz	r3, 432ddc <_Unwind_VRS_Get+0x30>
  432dca:	2a0f      	cmp	r2, #15
  432dcc:	d806      	bhi.n	432ddc <_Unwind_VRS_Get+0x30>
  432dce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  432dd2:	2000      	movs	r0, #0
  432dd4:	6853      	ldr	r3, [r2, #4]
  432dd6:	9a00      	ldr	r2, [sp, #0]
  432dd8:	6013      	str	r3, [r2, #0]
  432dda:	4770      	bx	lr
  432ddc:	2002      	movs	r0, #2
  432dde:	4770      	bx	lr

00432de0 <_Unwind_GetGR>:
  432de0:	b510      	push	{r4, lr}
  432de2:	b084      	sub	sp, #16
  432de4:	2300      	movs	r3, #0
  432de6:	460a      	mov	r2, r1
  432de8:	ac03      	add	r4, sp, #12
  432dea:	4619      	mov	r1, r3
  432dec:	9400      	str	r4, [sp, #0]
  432dee:	f7ff ffdd 	bl	432dac <_Unwind_VRS_Get>
  432df2:	9803      	ldr	r0, [sp, #12]
  432df4:	b004      	add	sp, #16
  432df6:	bd10      	pop	{r4, pc}

00432df8 <_Unwind_VRS_Set>:
  432df8:	2905      	cmp	r1, #5
  432dfa:	d815      	bhi.n	432e28 <_Unwind_VRS_Set+0x30>
  432dfc:	e8df f001 	tbb	[pc, r1]
  432e00:	0314030a 	.word	0x0314030a
  432e04:	0503      	.short	0x0503
  432e06:	2001      	movs	r0, #1
  432e08:	4770      	bx	lr
  432e0a:	9b00      	ldr	r3, [sp, #0]
  432e0c:	681b      	ldr	r3, [r3, #0]
  432e0e:	6443      	str	r3, [r0, #68]	@ 0x44
  432e10:	2000      	movs	r0, #0
  432e12:	4770      	bx	lr
  432e14:	b943      	cbnz	r3, 432e28 <_Unwind_VRS_Set+0x30>
  432e16:	2a0f      	cmp	r2, #15
  432e18:	d806      	bhi.n	432e28 <_Unwind_VRS_Set+0x30>
  432e1a:	9b00      	ldr	r3, [sp, #0]
  432e1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  432e20:	2000      	movs	r0, #0
  432e22:	681b      	ldr	r3, [r3, #0]
  432e24:	6053      	str	r3, [r2, #4]
  432e26:	4770      	bx	lr
  432e28:	2002      	movs	r0, #2
  432e2a:	4770      	bx	lr

00432e2c <_Unwind_SetGR>:
  432e2c:	b510      	push	{r4, lr}
  432e2e:	b084      	sub	sp, #16
  432e30:	2300      	movs	r3, #0
  432e32:	ac03      	add	r4, sp, #12
  432e34:	9203      	str	r2, [sp, #12]
  432e36:	460a      	mov	r2, r1
  432e38:	4619      	mov	r1, r3
  432e3a:	9400      	str	r4, [sp, #0]
  432e3c:	f7ff ffdc 	bl	432df8 <_Unwind_VRS_Set>
  432e40:	b004      	add	sp, #16
  432e42:	bd10      	pop	{r4, pc}

00432e44 <__gnu_Unwind_Backtrace>:
  432e44:	b5f0      	push	{r4, r5, r6, r7, lr}
  432e46:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
  432e48:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
  432e4c:	1d14      	adds	r4, r2, #4
  432e4e:	4606      	mov	r6, r0
  432e50:	6413      	str	r3, [r2, #64]	@ 0x40
  432e52:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
  432e56:	460d      	mov	r5, r1
  432e58:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
  432e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  432e5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  432e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  432e64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  432e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  432e6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  432e6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  432e72:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  432e76:	9716      	str	r7, [sp, #88]	@ 0x58
  432e78:	e010      	b.n	432e9c <__gnu_Unwind_Backtrace+0x58>
  432e7a:	f7ff ffd7 	bl	432e2c <_Unwind_SetGR>
  432e7e:	4629      	mov	r1, r5
  432e80:	a816      	add	r0, sp, #88	@ 0x58
  432e82:	47b0      	blx	r6
  432e84:	4603      	mov	r3, r0
  432e86:	aa16      	add	r2, sp, #88	@ 0x58
  432e88:	4669      	mov	r1, sp
  432e8a:	2008      	movs	r0, #8
  432e8c:	b983      	cbnz	r3, 432eb0 <__gnu_Unwind_Backtrace+0x6c>
  432e8e:	9b04      	ldr	r3, [sp, #16]
  432e90:	4798      	blx	r3
  432e92:	2805      	cmp	r0, #5
  432e94:	4604      	mov	r4, r0
  432e96:	d00c      	beq.n	432eb2 <__gnu_Unwind_Backtrace+0x6e>
  432e98:	2809      	cmp	r0, #9
  432e9a:	d00a      	beq.n	432eb2 <__gnu_Unwind_Backtrace+0x6e>
  432e9c:	9926      	ldr	r1, [sp, #152]	@ 0x98
  432e9e:	4668      	mov	r0, sp
  432ea0:	f7ff fdfe 	bl	432aa0 <get_eit_entry>
  432ea4:	4603      	mov	r3, r0
  432ea6:	466a      	mov	r2, sp
  432ea8:	210c      	movs	r1, #12
  432eaa:	a816      	add	r0, sp, #88	@ 0x58
  432eac:	2b00      	cmp	r3, #0
  432eae:	d0e4      	beq.n	432e7a <__gnu_Unwind_Backtrace+0x36>
  432eb0:	2409      	movs	r4, #9
  432eb2:	a816      	add	r0, sp, #88	@ 0x58
  432eb4:	f7ff fe40 	bl	432b38 <restore_non_core_regs>
  432eb8:	4620      	mov	r0, r4
  432eba:	f50d 7d11 	add.w	sp, sp, #580	@ 0x244
  432ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00432ec0 <__gnu_unwind_pr_common>:
  432ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  432ec4:	4616      	mov	r6, r2
  432ec6:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
  432ec8:	b089      	sub	sp, #36	@ 0x24
  432eca:	460d      	mov	r5, r1
  432ecc:	f852 1b04 	ldr.w	r1, [r2], #4
  432ed0:	f000 0c03 	and.w	ip, r0, #3
  432ed4:	9206      	str	r2, [sp, #24]
  432ed6:	2b00      	cmp	r3, #0
  432ed8:	d07c      	beq.n	432fd4 <__gnu_unwind_pr_common+0x114>
  432eda:	0c0c      	lsrs	r4, r1, #16
  432edc:	0409      	lsls	r1, r1, #16
  432ede:	f88d 401d 	strb.w	r4, [sp, #29]
  432ee2:	b2e4      	uxtb	r4, r4
  432ee4:	9105      	str	r1, [sp, #20]
  432ee6:	2102      	movs	r1, #2
  432ee8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
  432eec:	f1bc 0f02 	cmp.w	ip, #2
  432ef0:	f88d 101c 	strb.w	r1, [sp, #28]
  432ef4:	6d29      	ldr	r1, [r5, #80]	@ 0x50
  432ef6:	bf08      	it	eq
  432ef8:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
  432efa:	f011 0801 	ands.w	r8, r1, #1
  432efe:	d009      	beq.n	432f14 <__gnu_unwind_pr_common+0x54>
  432f00:	a905      	add	r1, sp, #20
  432f02:	4630      	mov	r0, r6
  432f04:	f000 fad4 	bl	4334b0 <__gnu_unwind_execute>
  432f08:	2800      	cmp	r0, #0
  432f0a:	d15b      	bne.n	432fc4 <__gnu_unwind_pr_common+0x104>
  432f0c:	2008      	movs	r0, #8
  432f0e:	b009      	add	sp, #36	@ 0x24
  432f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  432f14:	6817      	ldr	r7, [r2, #0]
  432f16:	2f00      	cmp	r7, #0
  432f18:	d0f2      	beq.n	432f00 <__gnu_unwind_pr_common+0x40>
  432f1a:	f000 0108 	and.w	r1, r0, #8
  432f1e:	46bb      	mov	fp, r7
  432f20:	469a      	mov	sl, r3
  432f22:	4667      	mov	r7, ip
  432f24:	9101      	str	r1, [sp, #4]
  432f26:	f8cd 8008 	str.w	r8, [sp, #8]
  432f2a:	f1ba 0f02 	cmp.w	sl, #2
  432f2e:	d04d      	beq.n	432fcc <__gnu_unwind_pr_common+0x10c>
  432f30:	f8b2 b000 	ldrh.w	fp, [r2]
  432f34:	f102 0904 	add.w	r9, r2, #4
  432f38:	8854      	ldrh	r4, [r2, #2]
  432f3a:	f024 0201 	bic.w	r2, r4, #1
  432f3e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  432f40:	0064      	lsls	r4, r4, #1
  432f42:	210f      	movs	r1, #15
  432f44:	eb02 0803 	add.w	r8, r2, r3
  432f48:	4630      	mov	r0, r6
  432f4a:	f7ff ff49 	bl	432de0 <_Unwind_GetGR>
  432f4e:	f004 0402 	and.w	r4, r4, #2
  432f52:	f00b 0301 	and.w	r3, fp, #1
  432f56:	4580      	cmp	r8, r0
  432f58:	ea43 0304 	orr.w	r3, r3, r4
  432f5c:	d82c      	bhi.n	432fb8 <__gnu_unwind_pr_common+0xf8>
  432f5e:	f02b 0b01 	bic.w	fp, fp, #1
  432f62:	2b01      	cmp	r3, #1
  432f64:	44c3      	add	fp, r8
  432f66:	d072      	beq.n	43304e <__gnu_unwind_pr_common+0x18e>
  432f68:	2b02      	cmp	r3, #2
  432f6a:	d039      	beq.n	432fe0 <__gnu_unwind_pr_common+0x120>
  432f6c:	bb53      	cbnz	r3, 432fc4 <__gnu_unwind_pr_common+0x104>
  432f6e:	b117      	cbz	r7, 432f76 <__gnu_unwind_pr_common+0xb6>
  432f70:	4583      	cmp	fp, r0
  432f72:	f200 80c8 	bhi.w	433106 <__gnu_unwind_pr_common+0x246>
  432f76:	f109 0204 	add.w	r2, r9, #4
  432f7a:	f8d2 b000 	ldr.w	fp, [r2]
  432f7e:	f1bb 0f00 	cmp.w	fp, #0
  432f82:	d1d2      	bne.n	432f2a <__gnu_unwind_pr_common+0x6a>
  432f84:	a905      	add	r1, sp, #20
  432f86:	4630      	mov	r0, r6
  432f88:	f8dd 8008 	ldr.w	r8, [sp, #8]
  432f8c:	f000 fa90 	bl	4334b0 <__gnu_unwind_execute>
  432f90:	b9c0      	cbnz	r0, 432fc4 <__gnu_unwind_pr_common+0x104>
  432f92:	f1b8 0f00 	cmp.w	r8, #0
  432f96:	d0b9      	beq.n	432f0c <__gnu_unwind_pr_common+0x4c>
  432f98:	210f      	movs	r1, #15
  432f9a:	4630      	mov	r0, r6
  432f9c:	f7ff ff20 	bl	432de0 <_Unwind_GetGR>
  432fa0:	210e      	movs	r1, #14
  432fa2:	4602      	mov	r2, r0
  432fa4:	4630      	mov	r0, r6
  432fa6:	f7ff ff41 	bl	432e2c <_Unwind_SetGR>
  432faa:	4a70      	ldr	r2, [pc, #448]	@ (43316c <__gnu_unwind_pr_common+0x2ac>)
  432fac:	210f      	movs	r1, #15
  432fae:	4630      	mov	r0, r6
  432fb0:	f7ff ff3c 	bl	432e2c <_Unwind_SetGR>
  432fb4:	2007      	movs	r0, #7
  432fb6:	e006      	b.n	432fc6 <__gnu_unwind_pr_common+0x106>
  432fb8:	2b01      	cmp	r3, #1
  432fba:	d066      	beq.n	43308a <__gnu_unwind_pr_common+0x1ca>
  432fbc:	2b02      	cmp	r3, #2
  432fbe:	d025      	beq.n	43300c <__gnu_unwind_pr_common+0x14c>
  432fc0:	2b00      	cmp	r3, #0
  432fc2:	d0d8      	beq.n	432f76 <__gnu_unwind_pr_common+0xb6>
  432fc4:	2009      	movs	r0, #9
  432fc6:	b009      	add	sp, #36	@ 0x24
  432fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  432fcc:	6854      	ldr	r4, [r2, #4]
  432fce:	f102 0908 	add.w	r9, r2, #8
  432fd2:	e7b2      	b.n	432f3a <__gnu_unwind_pr_common+0x7a>
  432fd4:	0209      	lsls	r1, r1, #8
  432fd6:	f88d 301d 	strb.w	r3, [sp, #29]
  432fda:	9105      	str	r1, [sp, #20]
  432fdc:	2103      	movs	r1, #3
  432fde:	e785      	b.n	432eec <__gnu_unwind_pr_common+0x2c>
  432fe0:	f8d9 4000 	ldr.w	r4, [r9]
  432fe4:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
  432fe8:	b9b7      	cbnz	r7, 433018 <__gnu_unwind_pr_common+0x158>
  432fea:	4583      	cmp	fp, r0
  432fec:	d905      	bls.n	432ffa <__gnu_unwind_pr_common+0x13a>
  432fee:	9b01      	ldr	r3, [sp, #4]
  432ff0:	2b00      	cmp	r3, #0
  432ff2:	d064      	beq.n	4330be <__gnu_unwind_pr_common+0x1fe>
  432ff4:	f1b8 0f00 	cmp.w	r8, #0
  432ff8:	d061      	beq.n	4330be <__gnu_unwind_pr_common+0x1fe>
  432ffa:	2c00      	cmp	r4, #0
  432ffc:	da01      	bge.n	433002 <__gnu_unwind_pr_common+0x142>
  432ffe:	f109 0904 	add.w	r9, r9, #4
  433002:	f108 0301 	add.w	r3, r8, #1
  433006:	eb09 0283 	add.w	r2, r9, r3, lsl #2
  43300a:	e7b6      	b.n	432f7a <__gnu_unwind_pr_common+0xba>
  43300c:	f8d9 4000 	ldr.w	r4, [r9]
  433010:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
  433014:	2f00      	cmp	r7, #0
  433016:	d0f0      	beq.n	432ffa <__gnu_unwind_pr_common+0x13a>
  433018:	f8d5 b020 	ldr.w	fp, [r5, #32]
  43301c:	210d      	movs	r1, #13
  43301e:	4630      	mov	r0, r6
  433020:	f7ff fede 	bl	432de0 <_Unwind_GetGR>
  433024:	4583      	cmp	fp, r0
  433026:	d1e8      	bne.n	432ffa <__gnu_unwind_pr_common+0x13a>
  433028:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
  43302a:	4591      	cmp	r9, r2
  43302c:	d1e5      	bne.n	432ffa <__gnu_unwind_pr_common+0x13a>
  43302e:	2400      	movs	r4, #0
  433030:	2204      	movs	r2, #4
  433032:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
  433036:	e9c5 420b 	strd	r4, r2, [r5, #44]	@ 0x2c
  43303a:	444a      	add	r2, r9
  43303c:	636a      	str	r2, [r5, #52]	@ 0x34
  43303e:	f8d9 2000 	ldr.w	r2, [r9]
  433042:	42a2      	cmp	r2, r4
  433044:	f2c0 808d 	blt.w	433162 <__gnu_unwind_pr_common+0x2a2>
  433048:	2301      	movs	r3, #1
  43304a:	9302      	str	r3, [sp, #8]
  43304c:	e7d9      	b.n	433002 <__gnu_unwind_pr_common+0x142>
  43304e:	b9f7      	cbnz	r7, 43308e <__gnu_unwind_pr_common+0x1ce>
  433050:	4583      	cmp	fp, r0
  433052:	d917      	bls.n	433084 <__gnu_unwind_pr_common+0x1c4>
  433054:	f8d9 3004 	ldr.w	r3, [r9, #4]
  433058:	f8d9 2000 	ldr.w	r2, [r9]
  43305c:	1c99      	adds	r1, r3, #2
  43305e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
  433062:	d0af      	beq.n	432fc4 <__gnu_unwind_pr_common+0x104>
  433064:	f105 0458 	add.w	r4, r5, #88	@ 0x58
  433068:	3301      	adds	r3, #1
  43306a:	9404      	str	r4, [sp, #16]
  43306c:	d072      	beq.n	433154 <__gnu_unwind_pr_common+0x294>
  43306e:	f109 0004 	add.w	r0, r9, #4
  433072:	f7ff fd8d 	bl	432b90 <_Unwind_decode_typeinfo_ptr.constprop.0>
  433076:	ab04      	add	r3, sp, #16
  433078:	4601      	mov	r1, r0
  43307a:	4628      	mov	r0, r5
  43307c:	f7f8 f84c 	bl	42b118 <__cxa_type_match>
  433080:	2800      	cmp	r0, #0
  433082:	d153      	bne.n	43312c <__gnu_unwind_pr_common+0x26c>
  433084:	f109 0208 	add.w	r2, r9, #8
  433088:	e777      	b.n	432f7a <__gnu_unwind_pr_common+0xba>
  43308a:	2f00      	cmp	r7, #0
  43308c:	d0fa      	beq.n	433084 <__gnu_unwind_pr_common+0x1c4>
  43308e:	6a2c      	ldr	r4, [r5, #32]
  433090:	210d      	movs	r1, #13
  433092:	4630      	mov	r0, r6
  433094:	f7ff fea4 	bl	432de0 <_Unwind_GetGR>
  433098:	4284      	cmp	r4, r0
  43309a:	d1f3      	bne.n	433084 <__gnu_unwind_pr_common+0x1c4>
  43309c:	6aab      	ldr	r3, [r5, #40]	@ 0x28
  43309e:	4599      	cmp	r9, r3
  4330a0:	d1f0      	bne.n	433084 <__gnu_unwind_pr_common+0x1c4>
  4330a2:	4648      	mov	r0, r9
  4330a4:	f7ff fcb0 	bl	432a08 <selfrel_offset31>
  4330a8:	210f      	movs	r1, #15
  4330aa:	4602      	mov	r2, r0
  4330ac:	4630      	mov	r0, r6
  4330ae:	f7ff febd 	bl	432e2c <_Unwind_SetGR>
  4330b2:	462a      	mov	r2, r5
  4330b4:	2100      	movs	r1, #0
  4330b6:	4630      	mov	r0, r6
  4330b8:	f7ff feb8 	bl	432e2c <_Unwind_SetGR>
  4330bc:	e77a      	b.n	432fb4 <__gnu_unwind_pr_common+0xf4>
  4330be:	f105 0358 	add.w	r3, r5, #88	@ 0x58
  4330c2:	9703      	str	r7, [sp, #12]
  4330c4:	f109 0b04 	add.w	fp, r9, #4
  4330c8:	2400      	movs	r4, #0
  4330ca:	461f      	mov	r7, r3
  4330cc:	e00c      	b.n	4330e8 <__gnu_unwind_pr_common+0x228>
  4330ce:	4658      	mov	r0, fp
  4330d0:	2200      	movs	r2, #0
  4330d2:	9704      	str	r7, [sp, #16]
  4330d4:	f7ff fd5c 	bl	432b90 <_Unwind_decode_typeinfo_ptr.constprop.0>
  4330d8:	ab04      	add	r3, sp, #16
  4330da:	4601      	mov	r1, r0
  4330dc:	4628      	mov	r0, r5
  4330de:	f10b 0b04 	add.w	fp, fp, #4
  4330e2:	f7f8 f819 	bl	42b118 <__cxa_type_match>
  4330e6:	bb88      	cbnz	r0, 43314c <__gnu_unwind_pr_common+0x28c>
  4330e8:	4544      	cmp	r4, r8
  4330ea:	f104 0401 	add.w	r4, r4, #1
  4330ee:	d1ee      	bne.n	4330ce <__gnu_unwind_pr_common+0x20e>
  4330f0:	210d      	movs	r1, #13
  4330f2:	4630      	mov	r0, r6
  4330f4:	f7ff fe74 	bl	432de0 <_Unwind_GetGR>
  4330f8:	9b04      	ldr	r3, [sp, #16]
  4330fa:	4602      	mov	r2, r0
  4330fc:	2006      	movs	r0, #6
  4330fe:	622a      	str	r2, [r5, #32]
  433100:	e9c5 3909 	strd	r3, r9, [r5, #36]	@ 0x24
  433104:	e75f      	b.n	432fc6 <__gnu_unwind_pr_common+0x106>
  433106:	4648      	mov	r0, r9
  433108:	f7ff fc7e 	bl	432a08 <selfrel_offset31>
  43310c:	f109 0204 	add.w	r2, r9, #4
  433110:	4604      	mov	r4, r0
  433112:	4628      	mov	r0, r5
  433114:	63aa      	str	r2, [r5, #56]	@ 0x38
  433116:	f7f8 f857 	bl	42b1c8 <__cxa_begin_cleanup>
  43311a:	2800      	cmp	r0, #0
  43311c:	f43f af52 	beq.w	432fc4 <__gnu_unwind_pr_common+0x104>
  433120:	4622      	mov	r2, r4
  433122:	210f      	movs	r1, #15
  433124:	4630      	mov	r0, r6
  433126:	f7ff fe81 	bl	432e2c <_Unwind_SetGR>
  43312a:	e743      	b.n	432fb4 <__gnu_unwind_pr_common+0xf4>
  43312c:	4604      	mov	r4, r0
  43312e:	210d      	movs	r1, #13
  433130:	4630      	mov	r0, r6
  433132:	9e04      	ldr	r6, [sp, #16]
  433134:	f7ff fe54 	bl	432de0 <_Unwind_GetGR>
  433138:	2c02      	cmp	r4, #2
  43313a:	6228      	str	r0, [r5, #32]
  43313c:	d102      	bne.n	433144 <__gnu_unwind_pr_common+0x284>
  43313e:	62ee      	str	r6, [r5, #44]	@ 0x2c
  433140:	f105 062c 	add.w	r6, r5, #44	@ 0x2c
  433144:	2006      	movs	r0, #6
  433146:	e9c5 6909 	strd	r6, r9, [r5, #36]	@ 0x24
  43314a:	e73c      	b.n	432fc6 <__gnu_unwind_pr_common+0x106>
  43314c:	9f03      	ldr	r7, [sp, #12]
  43314e:	f8d9 4000 	ldr.w	r4, [r9]
  433152:	e752      	b.n	432ffa <__gnu_unwind_pr_common+0x13a>
  433154:	4630      	mov	r0, r6
  433156:	210d      	movs	r1, #13
  433158:	f7ff fe42 	bl	432de0 <_Unwind_GetGR>
  43315c:	4626      	mov	r6, r4
  43315e:	6228      	str	r0, [r5, #32]
  433160:	e7f0      	b.n	433144 <__gnu_unwind_pr_common+0x284>
  433162:	f108 0201 	add.w	r2, r8, #1
  433166:	eb09 0082 	add.w	r0, r9, r2, lsl #2
  43316a:	e79b      	b.n	4330a4 <__gnu_unwind_pr_common+0x1e4>
  43316c:	00432425 	.word	0x00432425

00433170 <__aeabi_unwind_cpp_pr0>:
  433170:	2300      	movs	r3, #0
  433172:	f7ff bea5 	b.w	432ec0 <__gnu_unwind_pr_common>
  433176:	bf00      	nop

00433178 <__aeabi_unwind_cpp_pr1>:
  433178:	2301      	movs	r3, #1
  43317a:	f7ff bea1 	b.w	432ec0 <__gnu_unwind_pr_common>
  43317e:	bf00      	nop

00433180 <__aeabi_unwind_cpp_pr2>:
  433180:	2302      	movs	r3, #2
  433182:	f7ff be9d 	b.w	432ec0 <__gnu_unwind_pr_common>
  433186:	bf00      	nop

00433188 <_Unwind_VRS_Pop>:
  433188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  43318c:	4605      	mov	r5, r0
  43318e:	b0c4      	sub	sp, #272	@ 0x110
  433190:	4614      	mov	r4, r2
  433192:	2905      	cmp	r1, #5
  433194:	f200 80b4 	bhi.w	433300 <_Unwind_VRS_Pop+0x178>
  433198:	e8df f001 	tbb	[pc, r1]
  43319c:	69b2290f 	.word	0x69b2290f
  4331a0:	038f      	.short	0x038f
  4331a2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
  4331a4:	2c00      	cmp	r4, #0
  4331a6:	f040 80ab 	bne.w	433300 <_Unwind_VRS_Pop+0x178>
  4331aa:	f853 2b04 	ldr.w	r2, [r3], #4
  4331ae:	6442      	str	r2, [r0, #68]	@ 0x44
  4331b0:	6383      	str	r3, [r0, #56]	@ 0x38
  4331b2:	2000      	movs	r0, #0
  4331b4:	b044      	add	sp, #272	@ 0x110
  4331b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4331ba:	2b00      	cmp	r3, #0
  4331bc:	f040 80a0 	bne.w	433300 <_Unwind_VRS_Pop+0x178>
  4331c0:	fa1f fc84 	uxth.w	ip, r4
  4331c4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  4331c6:	2601      	movs	r6, #1
  4331c8:	1d2f      	adds	r7, r5, #4
  4331ca:	fa06 f103 	lsl.w	r1, r6, r3
  4331ce:	4602      	mov	r2, r0
  4331d0:	ea11 0f0c 	tst.w	r1, ip
  4331d4:	d004      	beq.n	4331e0 <_Unwind_VRS_Pop+0x58>
  4331d6:	f852 1b04 	ldr.w	r1, [r2], #4
  4331da:	4610      	mov	r0, r2
  4331dc:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
  4331e0:	3301      	adds	r3, #1
  4331e2:	2b10      	cmp	r3, #16
  4331e4:	d1f1      	bne.n	4331ca <_Unwind_VRS_Pop+0x42>
  4331e6:	04a2      	lsls	r2, r4, #18
  4331e8:	d4e3      	bmi.n	4331b2 <_Unwind_VRS_Pop+0x2a>
  4331ea:	63a8      	str	r0, [r5, #56]	@ 0x38
  4331ec:	e7e1      	b.n	4331b2 <_Unwind_VRS_Pop+0x2a>
  4331ee:	f003 02fb 	and.w	r2, r3, #251	@ 0xfb
  4331f2:	0c26      	lsrs	r6, r4, #16
  4331f4:	b2a4      	uxth	r4, r4
  4331f6:	2a01      	cmp	r2, #1
  4331f8:	f040 8082 	bne.w	433300 <_Unwind_VRS_Pop+0x178>
  4331fc:	2b01      	cmp	r3, #1
  4331fe:	eb06 0804 	add.w	r8, r6, r4
  433202:	f000 80c2 	beq.w	43338a <_Unwind_VRS_Pop+0x202>
  433206:	f1b8 0f20 	cmp.w	r8, #32
  43320a:	d879      	bhi.n	433300 <_Unwind_VRS_Pop+0x178>
  43320c:	2e0f      	cmp	r6, #15
  43320e:	d979      	bls.n	433304 <_Unwind_VRS_Pop+0x17c>
  433210:	2c00      	cmp	r4, #0
  433212:	d0ce      	beq.n	4331b2 <_Unwind_VRS_Pop+0x2a>
  433214:	6802      	ldr	r2, [r0, #0]
  433216:	9301      	str	r3, [sp, #4]
  433218:	0753      	lsls	r3, r2, #29
  43321a:	d505      	bpl.n	433228 <_Unwind_VRS_Pop+0xa0>
  43321c:	f022 0204 	bic.w	r2, r2, #4
  433220:	f840 2bd8 	str.w	r2, [r0], #216
  433224:	f7dd fc6e 	bl	410b04 <__gnu_Unwind_Save_VFP_D_16_to_31>
  433228:	af02      	add	r7, sp, #8
  43322a:	0064      	lsls	r4, r4, #1
  43322c:	4638      	mov	r0, r7
  43322e:	f7dd fc69 	bl	410b04 <__gnu_Unwind_Save_VFP_D_16_to_31>
  433232:	f1a6 0210 	sub.w	r2, r6, #16
  433236:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
  433238:	1e60      	subs	r0, r4, #1
  43323a:	9b01      	ldr	r3, [sp, #4]
  43323c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  433240:	1c44      	adds	r4, r0, #1
  433242:	1f10      	subs	r0, r2, #4
  433244:	eb01 0284 	add.w	r2, r1, r4, lsl #2
  433248:	f851 4b04 	ldr.w	r4, [r1], #4
  43324c:	4291      	cmp	r1, r2
  43324e:	f840 4f04 	str.w	r4, [r0, #4]!
  433252:	d1f9      	bne.n	433248 <_Unwind_VRS_Pop+0xc0>
  433254:	2b01      	cmp	r3, #1
  433256:	f000 80ca 	beq.w	4333ee <_Unwind_VRS_Pop+0x266>
  43325a:	2e0f      	cmp	r6, #15
  43325c:	63a9      	str	r1, [r5, #56]	@ 0x38
  43325e:	d802      	bhi.n	433266 <_Unwind_VRS_Pop+0xde>
  433260:	a822      	add	r0, sp, #136	@ 0x88
  433262:	f7dd fc43 	bl	410aec <__gnu_Unwind_Restore_VFP_D>
  433266:	4638      	mov	r0, r7
  433268:	f7dd fc48 	bl	410afc <__gnu_Unwind_Restore_VFP_D_16_to_31>
  43326c:	e7a1      	b.n	4331b2 <_Unwind_VRS_Pop+0x2a>
  43326e:	2b03      	cmp	r3, #3
  433270:	d146      	bne.n	433300 <_Unwind_VRS_Pop+0x178>
  433272:	fa1f f884 	uxth.w	r8, r4
  433276:	0c26      	lsrs	r6, r4, #16
  433278:	eb08 4414 	add.w	r4, r8, r4, lsr #16
  43327c:	2c10      	cmp	r4, #16
  43327e:	d83f      	bhi.n	433300 <_Unwind_VRS_Pop+0x178>
  433280:	6803      	ldr	r3, [r0, #0]
  433282:	071f      	lsls	r7, r3, #28
  433284:	f100 80ab 	bmi.w	4333de <_Unwind_VRS_Pop+0x256>
  433288:	af22      	add	r7, sp, #136	@ 0x88
  43328a:	4638      	mov	r0, r7
  43328c:	f7dd fc60 	bl	410b50 <__gnu_Unwind_Save_WMMXD>
  433290:	6bac      	ldr	r4, [r5, #56]	@ 0x38
  433292:	ea4f 0148 	mov.w	r1, r8, lsl #1
  433296:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
  43329a:	1e4a      	subs	r2, r1, #1
  43329c:	b141      	cbz	r1, 4332b0 <_Unwind_VRS_Pop+0x128>
  43329e:	1ae0      	subs	r0, r4, r3
  4332a0:	3a01      	subs	r2, #1
  4332a2:	5819      	ldr	r1, [r3, r0]
  4332a4:	1c56      	adds	r6, r2, #1
  4332a6:	f843 1b04 	str.w	r1, [r3], #4
  4332aa:	d1f9      	bne.n	4332a0 <_Unwind_VRS_Pop+0x118>
  4332ac:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
  4332b0:	4638      	mov	r0, r7
  4332b2:	63ac      	str	r4, [r5, #56]	@ 0x38
  4332b4:	f7dd fc2a 	bl	410b0c <__gnu_Unwind_Restore_WMMXD>
  4332b8:	e77b      	b.n	4331b2 <_Unwind_VRS_Pop+0x2a>
  4332ba:	bb0b      	cbnz	r3, 433300 <_Unwind_VRS_Pop+0x178>
  4332bc:	2c10      	cmp	r4, #16
  4332be:	d81f      	bhi.n	433300 <_Unwind_VRS_Pop+0x178>
  4332c0:	6803      	ldr	r3, [r0, #0]
  4332c2:	06d8      	lsls	r0, r3, #27
  4332c4:	f100 8083 	bmi.w	4333ce <_Unwind_VRS_Pop+0x246>
  4332c8:	af22      	add	r7, sp, #136	@ 0x88
  4332ca:	4638      	mov	r0, r7
  4332cc:	f7dd fc6c 	bl	410ba8 <__gnu_Unwind_Save_WMMXC>
  4332d0:	6bae      	ldr	r6, [r5, #56]	@ 0x38
  4332d2:	4639      	mov	r1, r7
  4332d4:	2300      	movs	r3, #0
  4332d6:	f04f 0c01 	mov.w	ip, #1
  4332da:	fa0c f203 	lsl.w	r2, ip, r3
  4332de:	4630      	mov	r0, r6
  4332e0:	3301      	adds	r3, #1
  4332e2:	4222      	tst	r2, r4
  4332e4:	d003      	beq.n	4332ee <_Unwind_VRS_Pop+0x166>
  4332e6:	f850 2b04 	ldr.w	r2, [r0], #4
  4332ea:	4606      	mov	r6, r0
  4332ec:	600a      	str	r2, [r1, #0]
  4332ee:	2b04      	cmp	r3, #4
  4332f0:	f101 0104 	add.w	r1, r1, #4
  4332f4:	d1f1      	bne.n	4332da <_Unwind_VRS_Pop+0x152>
  4332f6:	4638      	mov	r0, r7
  4332f8:	63ae      	str	r6, [r5, #56]	@ 0x38
  4332fa:	f7dd fc4b 	bl	410b94 <__gnu_Unwind_Restore_WMMXC>
  4332fe:	e758      	b.n	4331b2 <_Unwind_VRS_Pop+0x2a>
  433300:	2002      	movs	r0, #2
  433302:	e757      	b.n	4331b4 <_Unwind_VRS_Pop+0x2c>
  433304:	6802      	ldr	r2, [r0, #0]
  433306:	f1b8 0f10 	cmp.w	r8, #16
  43330a:	f002 0001 	and.w	r0, r2, #1
  43330e:	f240 8089 	bls.w	433424 <_Unwind_VRS_Pop+0x29c>
  433312:	b158      	cbz	r0, 43332c <_Unwind_VRS_Pop+0x1a4>
  433314:	f022 0201 	bic.w	r2, r2, #1
  433318:	4628      	mov	r0, r5
  43331a:	9301      	str	r3, [sp, #4]
  43331c:	f042 0202 	orr.w	r2, r2, #2
  433320:	f840 2b50 	str.w	r2, [r0], #80
  433324:	f7dd fbe6 	bl	410af4 <__gnu_Unwind_Save_VFP_D>
  433328:	682a      	ldr	r2, [r5, #0]
  43332a:	9b01      	ldr	r3, [sp, #4]
  43332c:	0751      	lsls	r1, r2, #29
  43332e:	f1a8 0810 	sub.w	r8, r8, #16
  433332:	f100 8088 	bmi.w	433446 <_Unwind_VRS_Pop+0x2be>
  433336:	9301      	str	r3, [sp, #4]
  433338:	af22      	add	r7, sp, #136	@ 0x88
  43333a:	4638      	mov	r0, r7
  43333c:	f7dd fbda 	bl	410af4 <__gnu_Unwind_Save_VFP_D>
  433340:	a802      	add	r0, sp, #8
  433342:	f7dd fbdf 	bl	410b04 <__gnu_Unwind_Save_VFP_D_16_to_31>
  433346:	f1c6 0110 	rsb	r1, r6, #16
  43334a:	6baa      	ldr	r2, [r5, #56]	@ 0x38
  43334c:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
  433350:	0049      	lsls	r1, r1, #1
  433352:	9b01      	ldr	r3, [sp, #4]
  433354:	3901      	subs	r1, #1
  433356:	3101      	adds	r1, #1
  433358:	3804      	subs	r0, #4
  43335a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  43335e:	f852 4b04 	ldr.w	r4, [r2], #4
  433362:	4291      	cmp	r1, r2
  433364:	f840 4f04 	str.w	r4, [r0, #4]!
  433368:	d1f9      	bne.n	43335e <_Unwind_VRS_Pop+0x1d6>
  43336a:	f1b8 0f00 	cmp.w	r8, #0
  43336e:	d04f      	beq.n	433410 <_Unwind_VRS_Pop+0x288>
  433370:	ea4f 0248 	mov.w	r2, r8, lsl #1
  433374:	2e10      	cmp	r6, #16
  433376:	af02      	add	r7, sp, #8
  433378:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
  43337c:	4632      	mov	r2, r6
  43337e:	bf38      	it	cc
  433380:	2210      	movcc	r2, #16
  433382:	3a10      	subs	r2, #16
  433384:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  433388:	e75a      	b.n	433240 <_Unwind_VRS_Pop+0xb8>
  43338a:	f1b8 0f10 	cmp.w	r8, #16
  43338e:	d8b7      	bhi.n	433300 <_Unwind_VRS_Pop+0x178>
  433390:	2e10      	cmp	r6, #16
  433392:	d0b5      	beq.n	433300 <_Unwind_VRS_Pop+0x178>
  433394:	6801      	ldr	r1, [r0, #0]
  433396:	07ca      	lsls	r2, r1, #31
  433398:	d530      	bpl.n	4333fc <_Unwind_VRS_Pop+0x274>
  43339a:	f021 0103 	bic.w	r1, r1, #3
  43339e:	4628      	mov	r0, r5
  4333a0:	9301      	str	r3, [sp, #4]
  4333a2:	f840 1b50 	str.w	r1, [r0], #80
  4333a6:	f7dd fb9d 	bl	410ae4 <__gnu_Unwind_Save_VFP>
  4333aa:	9b01      	ldr	r3, [sp, #4]
  4333ac:	2b01      	cmp	r3, #1
  4333ae:	d025      	beq.n	4333fc <_Unwind_VRS_Pop+0x274>
  4333b0:	af22      	add	r7, sp, #136	@ 0x88
  4333b2:	9301      	str	r3, [sp, #4]
  4333b4:	4638      	mov	r0, r7
  4333b6:	f7dd fb9d 	bl	410af4 <__gnu_Unwind_Save_VFP_D>
  4333ba:	6baa      	ldr	r2, [r5, #56]	@ 0x38
  4333bc:	b374      	cbz	r4, 43341c <_Unwind_VRS_Pop+0x294>
  4333be:	9b01      	ldr	r3, [sp, #4]
  4333c0:	0064      	lsls	r4, r4, #1
  4333c2:	f04f 0800 	mov.w	r8, #0
  4333c6:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
  4333ca:	1e61      	subs	r1, r4, #1
  4333cc:	e7c3      	b.n	433356 <_Unwind_VRS_Pop+0x1ce>
  4333ce:	f023 0310 	bic.w	r3, r3, #16
  4333d2:	f505 70ec 	add.w	r0, r5, #472	@ 0x1d8
  4333d6:	602b      	str	r3, [r5, #0]
  4333d8:	f7dd fbe6 	bl	410ba8 <__gnu_Unwind_Save_WMMXC>
  4333dc:	e774      	b.n	4332c8 <_Unwind_VRS_Pop+0x140>
  4333de:	f023 0308 	bic.w	r3, r3, #8
  4333e2:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
  4333e6:	602b      	str	r3, [r5, #0]
  4333e8:	f7dd fbb2 	bl	410b50 <__gnu_Unwind_Save_WMMXD>
  4333ec:	e74c      	b.n	433288 <_Unwind_VRS_Pop+0x100>
  4333ee:	af22      	add	r7, sp, #136	@ 0x88
  4333f0:	3204      	adds	r2, #4
  4333f2:	4638      	mov	r0, r7
  4333f4:	63aa      	str	r2, [r5, #56]	@ 0x38
  4333f6:	f7dd fb71 	bl	410adc <__gnu_Unwind_Restore_VFP>
  4333fa:	e6da      	b.n	4331b2 <_Unwind_VRS_Pop+0x2a>
  4333fc:	af22      	add	r7, sp, #136	@ 0x88
  4333fe:	9301      	str	r3, [sp, #4]
  433400:	4638      	mov	r0, r7
  433402:	f7dd fb6f 	bl	410ae4 <__gnu_Unwind_Save_VFP>
  433406:	6baa      	ldr	r2, [r5, #56]	@ 0x38
  433408:	9b01      	ldr	r3, [sp, #4]
  43340a:	2c00      	cmp	r4, #0
  43340c:	d0f0      	beq.n	4333f0 <_Unwind_VRS_Pop+0x268>
  43340e:	e7d7      	b.n	4333c0 <_Unwind_VRS_Pop+0x238>
  433410:	2b01      	cmp	r3, #1
  433412:	d0ed      	beq.n	4333f0 <_Unwind_VRS_Pop+0x268>
  433414:	2e0f      	cmp	r6, #15
  433416:	63a9      	str	r1, [r5, #56]	@ 0x38
  433418:	f63f aecb 	bhi.w	4331b2 <_Unwind_VRS_Pop+0x2a>
  43341c:	4638      	mov	r0, r7
  43341e:	f7dd fb65 	bl	410aec <__gnu_Unwind_Restore_VFP_D>
  433422:	e6c6      	b.n	4331b2 <_Unwind_VRS_Pop+0x2a>
  433424:	4611      	mov	r1, r2
  433426:	2800      	cmp	r0, #0
  433428:	d0c2      	beq.n	4333b0 <_Unwind_VRS_Pop+0x228>
  43342a:	2b05      	cmp	r3, #5
  43342c:	d1b5      	bne.n	43339a <_Unwind_VRS_Pop+0x212>
  43342e:	f022 0201 	bic.w	r2, r2, #1
  433432:	4628      	mov	r0, r5
  433434:	9301      	str	r3, [sp, #4]
  433436:	f042 0202 	orr.w	r2, r2, #2
  43343a:	f840 2b50 	str.w	r2, [r0], #80
  43343e:	f7dd fb59 	bl	410af4 <__gnu_Unwind_Save_VFP_D>
  433442:	9b01      	ldr	r3, [sp, #4]
  433444:	e7b4      	b.n	4333b0 <_Unwind_VRS_Pop+0x228>
  433446:	f022 0204 	bic.w	r2, r2, #4
  43344a:	4628      	mov	r0, r5
  43344c:	9301      	str	r3, [sp, #4]
  43344e:	f840 2bd8 	str.w	r2, [r0], #216
  433452:	f7dd fb57 	bl	410b04 <__gnu_Unwind_Save_VFP_D_16_to_31>
  433456:	e76f      	b.n	433338 <_Unwind_VRS_Pop+0x1b0>

00433458 <next_unwind_byte>:
  433458:	7a02      	ldrb	r2, [r0, #8]
  43345a:	4603      	mov	r3, r0
  43345c:	b98a      	cbnz	r2, 433482 <next_unwind_byte+0x2a>
  43345e:	7a42      	ldrb	r2, [r0, #9]
  433460:	b1b2      	cbz	r2, 433490 <next_unwind_byte+0x38>
  433462:	6841      	ldr	r1, [r0, #4]
  433464:	3a01      	subs	r2, #1
  433466:	f04f 0c03 	mov.w	ip, #3
  43346a:	b410      	push	{r4}
  43346c:	7242      	strb	r2, [r0, #9]
  43346e:	1d0c      	adds	r4, r1, #4
  433470:	6808      	ldr	r0, [r1, #0]
  433472:	f883 c008 	strb.w	ip, [r3, #8]
  433476:	0202      	lsls	r2, r0, #8
  433478:	605c      	str	r4, [r3, #4]
  43347a:	0e00      	lsrs	r0, r0, #24
  43347c:	bc10      	pop	{r4}
  43347e:	601a      	str	r2, [r3, #0]
  433480:	4770      	bx	lr
  433482:	6800      	ldr	r0, [r0, #0]
  433484:	3a01      	subs	r2, #1
  433486:	721a      	strb	r2, [r3, #8]
  433488:	0202      	lsls	r2, r0, #8
  43348a:	0e00      	lsrs	r0, r0, #24
  43348c:	601a      	str	r2, [r3, #0]
  43348e:	4770      	bx	lr
  433490:	20b0      	movs	r0, #176	@ 0xb0
  433492:	4770      	bx	lr

00433494 <_Unwind_GetGR.constprop.0>:
  433494:	b510      	push	{r4, lr}
  433496:	b084      	sub	sp, #16
  433498:	2300      	movs	r3, #0
  43349a:	220c      	movs	r2, #12
  43349c:	ac03      	add	r4, sp, #12
  43349e:	4619      	mov	r1, r3
  4334a0:	9400      	str	r4, [sp, #0]
  4334a2:	f7ff fc83 	bl	432dac <_Unwind_VRS_Get>
  4334a6:	9803      	ldr	r0, [sp, #12]
  4334a8:	b004      	add	sp, #16
  4334aa:	bd10      	pop	{r4, pc}

004334ac <unwind_UCB_from_context>:
  4334ac:	f7ff bff2 	b.w	433494 <_Unwind_GetGR.constprop.0>

004334b0 <__gnu_unwind_execute>:
  4334b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4334b4:	f04f 0800 	mov.w	r8, #0
  4334b8:	b085      	sub	sp, #20
  4334ba:	4606      	mov	r6, r0
  4334bc:	460d      	mov	r5, r1
  4334be:	4628      	mov	r0, r5
  4334c0:	f7ff ffca 	bl	433458 <next_unwind_byte>
  4334c4:	28b0      	cmp	r0, #176	@ 0xb0
  4334c6:	4604      	mov	r4, r0
  4334c8:	f000 811e 	beq.w	433708 <__gnu_unwind_execute+0x258>
  4334cc:	0607      	lsls	r7, r0, #24
  4334ce:	d538      	bpl.n	433542 <__gnu_unwind_execute+0x92>
  4334d0:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
  4334d4:	2ba0      	cmp	r3, #160	@ 0xa0
  4334d6:	f000 8083 	beq.w	4335e0 <__gnu_unwind_execute+0x130>
  4334da:	d80c      	bhi.n	4334f6 <__gnu_unwind_execute+0x46>
  4334dc:	2b80      	cmp	r3, #128	@ 0x80
  4334de:	d05e      	beq.n	43359e <__gnu_unwind_execute+0xee>
  4334e0:	2b90      	cmp	r3, #144	@ 0x90
  4334e2:	d104      	bne.n	4334ee <__gnu_unwind_execute+0x3e>
  4334e4:	f000 030d 	and.w	r3, r0, #13
  4334e8:	2b0d      	cmp	r3, #13
  4334ea:	f040 808f 	bne.w	43360c <__gnu_unwind_execute+0x15c>
  4334ee:	2009      	movs	r0, #9
  4334f0:	b005      	add	sp, #20
  4334f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4334f6:	2bb0      	cmp	r3, #176	@ 0xb0
  4334f8:	d068      	beq.n	4335cc <__gnu_unwind_execute+0x11c>
  4334fa:	2bc0      	cmp	r3, #192	@ 0xc0
  4334fc:	d13e      	bne.n	43357c <__gnu_unwind_execute+0xcc>
  4334fe:	28c6      	cmp	r0, #198	@ 0xc6
  433500:	f000 80ef 	beq.w	4336e2 <__gnu_unwind_execute+0x232>
  433504:	28c7      	cmp	r0, #199	@ 0xc7
  433506:	f000 8104 	beq.w	433712 <__gnu_unwind_execute+0x262>
  43350a:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
  43350e:	2bc0      	cmp	r3, #192	@ 0xc0
  433510:	f000 8111 	beq.w	433736 <__gnu_unwind_execute+0x286>
  433514:	28c8      	cmp	r0, #200	@ 0xc8
  433516:	f000 811c 	beq.w	433752 <__gnu_unwind_execute+0x2a2>
  43351a:	28c9      	cmp	r0, #201	@ 0xc9
  43351c:	d1e7      	bne.n	4334ee <__gnu_unwind_execute+0x3e>
  43351e:	4628      	mov	r0, r5
  433520:	f7ff ff9a 	bl	433458 <next_unwind_byte>
  433524:	0302      	lsls	r2, r0, #12
  433526:	f000 000f 	and.w	r0, r0, #15
  43352a:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
  43352e:	3001      	adds	r0, #1
  433530:	4302      	orrs	r2, r0
  433532:	2101      	movs	r1, #1
  433534:	2305      	movs	r3, #5
  433536:	4630      	mov	r0, r6
  433538:	f7ff fe26 	bl	433188 <_Unwind_VRS_Pop>
  43353c:	2800      	cmp	r0, #0
  43353e:	d0be      	beq.n	4334be <__gnu_unwind_execute+0xe>
  433540:	e7d5      	b.n	4334ee <__gnu_unwind_execute+0x3e>
  433542:	0083      	lsls	r3, r0, #2
  433544:	f10d 0908 	add.w	r9, sp, #8
  433548:	220d      	movs	r2, #13
  43354a:	4630      	mov	r0, r6
  43354c:	b2db      	uxtb	r3, r3
  43354e:	f8cd 9000 	str.w	r9, [sp]
  433552:	1d1f      	adds	r7, r3, #4
  433554:	2300      	movs	r3, #0
  433556:	4619      	mov	r1, r3
  433558:	f7ff fc28 	bl	432dac <_Unwind_VRS_Get>
  43355c:	9b02      	ldr	r3, [sp, #8]
  43355e:	0660      	lsls	r0, r4, #25
  433560:	f04f 020d 	mov.w	r2, #13
  433564:	4630      	mov	r0, r6
  433566:	f8cd 9000 	str.w	r9, [sp]
  43356a:	bf4c      	ite	mi
  43356c:	1bdf      	submi	r7, r3, r7
  43356e:	18ff      	addpl	r7, r7, r3
  433570:	2300      	movs	r3, #0
  433572:	9702      	str	r7, [sp, #8]
  433574:	4619      	mov	r1, r3
  433576:	f7ff fc3f 	bl	432df8 <_Unwind_VRS_Set>
  43357a:	e7a0      	b.n	4334be <__gnu_unwind_execute+0xe>
  43357c:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
  433580:	2bd0      	cmp	r3, #208	@ 0xd0
  433582:	d1b4      	bne.n	4334ee <__gnu_unwind_execute+0x3e>
  433584:	f000 0207 	and.w	r2, r0, #7
  433588:	2305      	movs	r3, #5
  43358a:	2101      	movs	r1, #1
  43358c:	4630      	mov	r0, r6
  43358e:	3201      	adds	r2, #1
  433590:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
  433594:	f7ff fdf8 	bl	433188 <_Unwind_VRS_Pop>
  433598:	2800      	cmp	r0, #0
  43359a:	d090      	beq.n	4334be <__gnu_unwind_execute+0xe>
  43359c:	e7a7      	b.n	4334ee <__gnu_unwind_execute+0x3e>
  43359e:	0224      	lsls	r4, r4, #8
  4335a0:	4628      	mov	r0, r5
  4335a2:	f7ff ff59 	bl	433458 <next_unwind_byte>
  4335a6:	4320      	orrs	r0, r4
  4335a8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
  4335ac:	d09f      	beq.n	4334ee <__gnu_unwind_execute+0x3e>
  4335ae:	0104      	lsls	r4, r0, #4
  4335b0:	2300      	movs	r3, #0
  4335b2:	4630      	mov	r0, r6
  4335b4:	b2a2      	uxth	r2, r4
  4335b6:	4619      	mov	r1, r3
  4335b8:	f7ff fde6 	bl	433188 <_Unwind_VRS_Pop>
  4335bc:	2800      	cmp	r0, #0
  4335be:	d196      	bne.n	4334ee <__gnu_unwind_execute+0x3e>
  4335c0:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
  4335c4:	bf18      	it	ne
  4335c6:	f04f 0801 	movne.w	r8, #1
  4335ca:	e778      	b.n	4334be <__gnu_unwind_execute+0xe>
  4335cc:	f1a0 03b1 	sub.w	r3, r0, #177	@ 0xb1
  4335d0:	2b04      	cmp	r3, #4
  4335d2:	f200 80da 	bhi.w	43378a <__gnu_unwind_execute+0x2da>
  4335d6:	e8df f003 	tbb	[pc, r3]
  4335da:	507b      	.short	0x507b
  4335dc:	333d      	.short	0x333d
  4335de:	2a          	.byte	0x2a
  4335df:	00          	.byte	0x00
  4335e0:	43c3      	mvns	r3, r0
  4335e2:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
  4335e6:	0701      	lsls	r1, r0, #28
  4335e8:	f003 0307 	and.w	r3, r3, #7
  4335ec:	fa42 f203 	asr.w	r2, r2, r3
  4335f0:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
  4335f4:	d501      	bpl.n	4335fa <__gnu_unwind_execute+0x14a>
  4335f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
  4335fa:	2300      	movs	r3, #0
  4335fc:	4630      	mov	r0, r6
  4335fe:	4619      	mov	r1, r3
  433600:	f7ff fdc2 	bl	433188 <_Unwind_VRS_Pop>
  433604:	2800      	cmp	r0, #0
  433606:	f43f af5a 	beq.w	4334be <__gnu_unwind_execute+0xe>
  43360a:	e770      	b.n	4334ee <__gnu_unwind_execute+0x3e>
  43360c:	af02      	add	r7, sp, #8
  43360e:	2300      	movs	r3, #0
  433610:	f000 020f 	and.w	r2, r0, #15
  433614:	4630      	mov	r0, r6
  433616:	4619      	mov	r1, r3
  433618:	9700      	str	r7, [sp, #0]
  43361a:	f7ff fbc7 	bl	432dac <_Unwind_VRS_Get>
  43361e:	2300      	movs	r3, #0
  433620:	220d      	movs	r2, #13
  433622:	4630      	mov	r0, r6
  433624:	4619      	mov	r1, r3
  433626:	9700      	str	r7, [sp, #0]
  433628:	f7ff fbe6 	bl	432df8 <_Unwind_VRS_Set>
  43362c:	e747      	b.n	4334be <__gnu_unwind_execute+0xe>
  43362e:	aa03      	add	r2, sp, #12
  433630:	2300      	movs	r3, #0
  433632:	4630      	mov	r0, r6
  433634:	9200      	str	r2, [sp, #0]
  433636:	4619      	mov	r1, r3
  433638:	220d      	movs	r2, #13
  43363a:	f7ff fbb7 	bl	432dac <_Unwind_VRS_Get>
  43363e:	e73e      	b.n	4334be <__gnu_unwind_execute+0xe>
  433640:	2300      	movs	r3, #0
  433642:	2105      	movs	r1, #5
  433644:	4630      	mov	r0, r6
  433646:	461a      	mov	r2, r3
  433648:	f7ff fd9e 	bl	433188 <_Unwind_VRS_Pop>
  43364c:	2800      	cmp	r0, #0
  43364e:	f43f af36 	beq.w	4334be <__gnu_unwind_execute+0xe>
  433652:	e74c      	b.n	4334ee <__gnu_unwind_execute+0x3e>
  433654:	4628      	mov	r0, r5
  433656:	f7ff feff 	bl	433458 <next_unwind_byte>
  43365a:	2301      	movs	r3, #1
  43365c:	0302      	lsls	r2, r0, #12
  43365e:	f000 000f 	and.w	r0, r0, #15
  433662:	4619      	mov	r1, r3
  433664:	3001      	adds	r0, #1
  433666:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
  43366a:	4302      	orrs	r2, r0
  43366c:	4630      	mov	r0, r6
  43366e:	f7ff fd8b 	bl	433188 <_Unwind_VRS_Pop>
  433672:	2800      	cmp	r0, #0
  433674:	f43f af23 	beq.w	4334be <__gnu_unwind_execute+0xe>
  433678:	e739      	b.n	4334ee <__gnu_unwind_execute+0x3e>
  43367a:	2300      	movs	r3, #0
  43367c:	f10d 0908 	add.w	r9, sp, #8
  433680:	220d      	movs	r2, #13
  433682:	4630      	mov	r0, r6
  433684:	4619      	mov	r1, r3
  433686:	f8cd 9000 	str.w	r9, [sp]
  43368a:	f7ff fb8f 	bl	432dac <_Unwind_VRS_Get>
  43368e:	4628      	mov	r0, r5
  433690:	f7ff fee2 	bl	433458 <next_unwind_byte>
  433694:	0602      	lsls	r2, r0, #24
  433696:	9c02      	ldr	r4, [sp, #8]
  433698:	f04f 0702 	mov.w	r7, #2
  43369c:	d50a      	bpl.n	4336b4 <__gnu_unwind_execute+0x204>
  43369e:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
  4336a2:	40b8      	lsls	r0, r7
  4336a4:	3707      	adds	r7, #7
  4336a6:	4404      	add	r4, r0
  4336a8:	4628      	mov	r0, r5
  4336aa:	9402      	str	r4, [sp, #8]
  4336ac:	f7ff fed4 	bl	433458 <next_unwind_byte>
  4336b0:	0603      	lsls	r3, r0, #24
  4336b2:	d4f4      	bmi.n	43369e <__gnu_unwind_execute+0x1ee>
  4336b4:	40b8      	lsls	r0, r7
  4336b6:	f504 7401 	add.w	r4, r4, #516	@ 0x204
  4336ba:	2300      	movs	r3, #0
  4336bc:	220d      	movs	r2, #13
  4336be:	4420      	add	r0, r4
  4336c0:	f8cd 9000 	str.w	r9, [sp]
  4336c4:	4619      	mov	r1, r3
  4336c6:	9002      	str	r0, [sp, #8]
  4336c8:	4630      	mov	r0, r6
  4336ca:	f7ff fb95 	bl	432df8 <_Unwind_VRS_Set>
  4336ce:	e6f6      	b.n	4334be <__gnu_unwind_execute+0xe>
  4336d0:	4628      	mov	r0, r5
  4336d2:	f7ff fec1 	bl	433458 <next_unwind_byte>
  4336d6:	1e43      	subs	r3, r0, #1
  4336d8:	4602      	mov	r2, r0
  4336da:	b2db      	uxtb	r3, r3
  4336dc:	2b0e      	cmp	r3, #14
  4336de:	d98c      	bls.n	4335fa <__gnu_unwind_execute+0x14a>
  4336e0:	e705      	b.n	4334ee <__gnu_unwind_execute+0x3e>
  4336e2:	4628      	mov	r0, r5
  4336e4:	f7ff feb8 	bl	433458 <next_unwind_byte>
  4336e8:	2303      	movs	r3, #3
  4336ea:	0302      	lsls	r2, r0, #12
  4336ec:	f000 000f 	and.w	r0, r0, #15
  4336f0:	4619      	mov	r1, r3
  4336f2:	3001      	adds	r0, #1
  4336f4:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
  4336f8:	4302      	orrs	r2, r0
  4336fa:	4630      	mov	r0, r6
  4336fc:	f7ff fd44 	bl	433188 <_Unwind_VRS_Pop>
  433700:	2800      	cmp	r0, #0
  433702:	f43f aedc 	beq.w	4334be <__gnu_unwind_execute+0xe>
  433706:	e6f2      	b.n	4334ee <__gnu_unwind_execute+0x3e>
  433708:	f1b8 0f00 	cmp.w	r8, #0
  43370c:	d02d      	beq.n	43376a <__gnu_unwind_execute+0x2ba>
  43370e:	2000      	movs	r0, #0
  433710:	e6ee      	b.n	4334f0 <__gnu_unwind_execute+0x40>
  433712:	4628      	mov	r0, r5
  433714:	f7ff fea0 	bl	433458 <next_unwind_byte>
  433718:	1e43      	subs	r3, r0, #1
  43371a:	4602      	mov	r2, r0
  43371c:	b2db      	uxtb	r3, r3
  43371e:	2b0e      	cmp	r3, #14
  433720:	f63f aee5 	bhi.w	4334ee <__gnu_unwind_execute+0x3e>
  433724:	2300      	movs	r3, #0
  433726:	2104      	movs	r1, #4
  433728:	4630      	mov	r0, r6
  43372a:	f7ff fd2d 	bl	433188 <_Unwind_VRS_Pop>
  43372e:	2800      	cmp	r0, #0
  433730:	f43f aec5 	beq.w	4334be <__gnu_unwind_execute+0xe>
  433734:	e6db      	b.n	4334ee <__gnu_unwind_execute+0x3e>
  433736:	f000 020f 	and.w	r2, r0, #15
  43373a:	2303      	movs	r3, #3
  43373c:	4630      	mov	r0, r6
  43373e:	3201      	adds	r2, #1
  433740:	4619      	mov	r1, r3
  433742:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
  433746:	f7ff fd1f 	bl	433188 <_Unwind_VRS_Pop>
  43374a:	2800      	cmp	r0, #0
  43374c:	f43f aeb7 	beq.w	4334be <__gnu_unwind_execute+0xe>
  433750:	e6cd      	b.n	4334ee <__gnu_unwind_execute+0x3e>
  433752:	4628      	mov	r0, r5
  433754:	f7ff fe80 	bl	433458 <next_unwind_byte>
  433758:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
  43375c:	f000 030f 	and.w	r3, r0, #15
  433760:	3210      	adds	r2, #16
  433762:	3301      	adds	r3, #1
  433764:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
  433768:	e6e3      	b.n	433532 <__gnu_unwind_execute+0x82>
  43376a:	ac02      	add	r4, sp, #8
  43376c:	4643      	mov	r3, r8
  43376e:	4641      	mov	r1, r8
  433770:	220e      	movs	r2, #14
  433772:	4630      	mov	r0, r6
  433774:	9400      	str	r4, [sp, #0]
  433776:	f7ff fb19 	bl	432dac <_Unwind_VRS_Get>
  43377a:	220f      	movs	r2, #15
  43377c:	4643      	mov	r3, r8
  43377e:	4641      	mov	r1, r8
  433780:	4630      	mov	r0, r6
  433782:	9400      	str	r4, [sp, #0]
  433784:	f7ff fb38 	bl	432df8 <_Unwind_VRS_Set>
  433788:	e7c1      	b.n	43370e <__gnu_unwind_execute+0x25e>
  43378a:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
  43378e:	2bb4      	cmp	r3, #180	@ 0xb4
  433790:	f43f aead 	beq.w	4334ee <__gnu_unwind_execute+0x3e>
  433794:	f000 0207 	and.w	r2, r0, #7
  433798:	2301      	movs	r3, #1
  43379a:	4630      	mov	r0, r6
  43379c:	441a      	add	r2, r3
  43379e:	4619      	mov	r1, r3
  4337a0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
  4337a4:	f7ff fcf0 	bl	433188 <_Unwind_VRS_Pop>
  4337a8:	2800      	cmp	r0, #0
  4337aa:	f43f ae88 	beq.w	4334be <__gnu_unwind_execute+0xe>
  4337ae:	e69e      	b.n	4334ee <__gnu_unwind_execute+0x3e>

004337b0 <__gnu_unwind_frame>:
  4337b0:	4602      	mov	r2, r0
  4337b2:	2303      	movs	r3, #3
  4337b4:	4608      	mov	r0, r1
  4337b6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
  4337b8:	b510      	push	{r4, lr}
  4337ba:	b084      	sub	sp, #16
  4337bc:	3208      	adds	r2, #8
  4337be:	f88d 300c 	strb.w	r3, [sp, #12]
  4337c2:	a901      	add	r1, sp, #4
  4337c4:	f852 3c04 	ldr.w	r3, [r2, #-4]
  4337c8:	021c      	lsls	r4, r3, #8
  4337ca:	0e1b      	lsrs	r3, r3, #24
  4337cc:	e9cd 4201 	strd	r4, r2, [sp, #4]
  4337d0:	f88d 300d 	strb.w	r3, [sp, #13]
  4337d4:	f7ff fe6c 	bl	4334b0 <__gnu_unwind_execute>
  4337d8:	b004      	add	sp, #16
  4337da:	bd10      	pop	{r4, pc}

004337dc <_Unwind_GetRegionStart>:
  4337dc:	b508      	push	{r3, lr}
  4337de:	f7ff fe65 	bl	4334ac <unwind_UCB_from_context>
  4337e2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
  4337e4:	bd08      	pop	{r3, pc}
  4337e6:	bf00      	nop

004337e8 <_Unwind_GetLanguageSpecificData>:
  4337e8:	b508      	push	{r3, lr}
  4337ea:	f7ff fe5f 	bl	4334ac <unwind_UCB_from_context>
  4337ee:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
  4337f0:	79c3      	ldrb	r3, [r0, #7]
  4337f2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4337f6:	3008      	adds	r0, #8
  4337f8:	bd08      	pop	{r3, pc}
  4337fa:	bf00      	nop

004337fc <_Unwind_GetDataRelBase>:
  4337fc:	b508      	push	{r3, lr}
  4337fe:	f7eb fccb 	bl	41f198 <abort>

00433802 <_Unwind_GetTextRelBase>:
  433802:	b508      	push	{r3, lr}
  433804:	f7ff fffa 	bl	4337fc <_Unwind_GetDataRelBase>

00433808 <pvTasklessPortMalloc>:
    if (enableSuspendResume)
        vTaskSuspendAll();
    {
        /* If this is the first call to malloc then the heap will require
        initialisation to setup the list of free blocks. */
        if (pxEnd == NULL) {
  433808:	4b50      	ldr	r3, [pc, #320]	@ (43394c <pvTasklessPortMalloc+0x144>)
    return pvReturn;
}

void *pvPortMalloc(size_t xWantedSize) { return prvPortMalloc(xWantedSize, 1); }

void *pvTasklessPortMalloc(size_t xWantedSize) { return prvPortMalloc(xWantedSize, 0); }
  43380a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (pxEnd == NULL) {
  43380e:	681e      	ldr	r6, [r3, #0]
  433810:	2e00      	cmp	r6, #0
  433812:	d060      	beq.n	4338d6 <pvTasklessPortMalloc+0xce>
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
  433814:	4b4e      	ldr	r3, [pc, #312]	@ (433950 <pvTasklessPortMalloc+0x148>)
  433816:	681d      	ldr	r5, [r3, #0]
  433818:	4228      	tst	r0, r5
  43381a:	d12b      	bne.n	433874 <pvTasklessPortMalloc+0x6c>
            if (xWantedSize > 0) {
  43381c:	b350      	cbz	r0, 433874 <pvTasklessPortMalloc+0x6c>
                xWantedSize += xHeapStructSize;
  43381e:	f100 0408 	add.w	r4, r0, #8
                if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
  433822:	0740      	lsls	r0, r0, #29
                    xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
  433824:	bf1c      	itt	ne
  433826:	f024 0407 	bicne.w	r4, r4, #7
  43382a:	3408      	addne	r4, #8
            if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
  43382c:	b314      	cbz	r4, 433874 <pvTasklessPortMalloc+0x6c>
  43382e:	f8df e134 	ldr.w	lr, [pc, #308]	@ 433964 <pvTasklessPortMalloc+0x15c>
  433832:	f8de 7000 	ldr.w	r7, [lr]
  433836:	42bc      	cmp	r4, r7
  433838:	d81c      	bhi.n	433874 <pvTasklessPortMalloc+0x6c>
                pxBlock = xStart.pxNextFreeBlock;
  43383a:	4b46      	ldr	r3, [pc, #280]	@ (433954 <pvTasklessPortMalloc+0x14c>)
                pxPreviousBlock = &xStart;
  43383c:	469c      	mov	ip, r3
                pxBlock = xStart.pxNextFreeBlock;
  43383e:	681b      	ldr	r3, [r3, #0]
                while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
  433840:	e003      	b.n	43384a <pvTasklessPortMalloc+0x42>
  433842:	681a      	ldr	r2, [r3, #0]
  433844:	b122      	cbz	r2, 433850 <pvTasklessPortMalloc+0x48>
                    pxPreviousBlock = pxBlock;
  433846:	469c      	mov	ip, r3
                    pxBlock = pxBlock->pxNextFreeBlock;
  433848:	4613      	mov	r3, r2
                while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
  43384a:	6859      	ldr	r1, [r3, #4]
  43384c:	428c      	cmp	r4, r1
  43384e:	d8f8      	bhi.n	433842 <pvTasklessPortMalloc+0x3a>
                if (pxBlock != pxEnd) {
  433850:	42b3      	cmp	r3, r6
  433852:	d00f      	beq.n	433874 <pvTasklessPortMalloc+0x6c>
                    pvReturn =
  433854:	4618      	mov	r0, r3
                    if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
  433856:	eba1 0804 	sub.w	r8, r1, r4
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  43385a:	f850 2b08 	ldr.w	r2, [r0], #8
                    if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
  43385e:	f1b8 0f10 	cmp.w	r8, #16
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  433862:	f8cc 2000 	str.w	r2, [ip]
                    if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
  433866:	d924      	bls.n	4338b2 <pvTasklessPortMalloc+0xaa>
                        pxNewBlockLink = (void *)(((uint8_t *)pxBlock) + xWantedSize);
  433868:	191a      	adds	r2, r3, r4
                        configASSERT((((size_t)pxNewBlockLink) & portBYTE_ALIGNMENT_MASK) == 0);
  43386a:	0751      	lsls	r1, r2, #29
  43386c:	d007      	beq.n	43387e <pvTasklessPortMalloc+0x76>
  43386e:	f000 f901 	bl	433a74 <ulSetInterruptMask>
  433872:	e7fe      	b.n	433872 <pvTasklessPortMalloc+0x6a>
            vApplicationMallocFailedHook();
  433874:	f000 f95e 	bl	433b34 <vApplicationMallocFailedHook>
  433878:	2000      	movs	r0, #0
void *pvTasklessPortMalloc(size_t xWantedSize) { return prvPortMalloc(xWantedSize, 0); }
  43387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BlockLink_t *pxIterator;
    uint8_t *puc;

    /* Iterate through the list until a block is found that has a higher address
    than the block being inserted. */
    for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
  43387e:	4935      	ldr	r1, [pc, #212]	@ (433954 <pvTasklessPortMalloc+0x14c>)
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
  433880:	f8c2 8004 	str.w	r8, [r2, #4]
                        pxBlock->xBlockSize = xWantedSize;
  433884:	605c      	str	r4, [r3, #4]
    for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
  433886:	468c      	mov	ip, r1
  433888:	6809      	ldr	r1, [r1, #0]
  43388a:	428a      	cmp	r2, r1
  43388c:	d8fb      	bhi.n	433886 <pvTasklessPortMalloc+0x7e>
    }

    /* Do the block being inserted, and the block it is being inserted after
    make a contiguous block of memory? */
    puc = (uint8_t *)pxIterator;
    if ((puc + pxIterator->xBlockSize) == (uint8_t *)pxBlockToInsert) {
  43388e:	f8dc 9004 	ldr.w	r9, [ip, #4]
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  433892:	f8d2 8004 	ldr.w	r8, [r2, #4]
    if ((puc + pxIterator->xBlockSize) == (uint8_t *)pxBlockToInsert) {
  433896:	eb0c 0a09 	add.w	sl, ip, r9
  43389a:	4552      	cmp	r2, sl
  43389c:	d03f      	beq.n	43391e <pvTasklessPortMalloc+0x116>
    }

    /* Do the block being inserted, and the block it is being inserted before
    make a contiguous block of memory? */
    puc = (uint8_t *)pxBlockToInsert;
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
  43389e:	eb02 0908 	add.w	r9, r2, r8
  4338a2:	4549      	cmp	r1, r9
  4338a4:	d045      	beq.n	433932 <pvTasklessPortMalloc+0x12a>
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
        } else {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    } else {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  4338a6:	6011      	str	r1, [r2, #0]
  4338a8:	4621      	mov	r1, r4

    /* If the block being inserted plugged a gab, so was merged with the block
    before and the block after, then it's pxNextFreeBlock pointer will have
    already been set, and should not be set here as that would make it point
    to itself. */
    if (pxIterator != pxBlockToInsert) {
  4338aa:	4594      	cmp	ip, r2
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4338ac:	bf18      	it	ne
  4338ae:	f8cc 2000 	strne.w	r2, [ip]
                    if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
  4338b2:	4a29      	ldr	r2, [pc, #164]	@ (433958 <pvTasklessPortMalloc+0x150>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  4338b4:	1a7f      	subs	r7, r7, r1
                    if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
  4338b6:	6814      	ldr	r4, [r2, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
  4338b8:	4329      	orrs	r1, r5
                    if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
  4338ba:	42a7      	cmp	r7, r4
                    pxBlock->pxNextFreeBlock = NULL;
  4338bc:	f04f 0400 	mov.w	r4, #0
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
  4338c0:	bf38      	it	cc
  4338c2:	6017      	strcc	r7, [r2, #0]
                    pxBlock->pxNextFreeBlock = NULL;
  4338c4:	e9c3 4100 	strd	r4, r1, [r3]
    configASSERT((((size_t)pvReturn) & (size_t)portBYTE_ALIGNMENT_MASK) == 0);
  4338c8:	0743      	lsls	r3, r0, #29
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  4338ca:	f8ce 7000 	str.w	r7, [lr]
    configASSERT((((size_t)pvReturn) & (size_t)portBYTE_ALIGNMENT_MASK) == 0);
  4338ce:	d0d4      	beq.n	43387a <pvTasklessPortMalloc+0x72>
  4338d0:	f000 f8d0 	bl	433a74 <ulSetInterruptMask>
  4338d4:	e7fe      	b.n	4338d4 <pvTasklessPortMalloc+0xcc>
    size_t xTotalHeapSize = ucHeapSize;
  4338d6:	4921      	ldr	r1, [pc, #132]	@ (43395c <pvTasklessPortMalloc+0x154>)
    uxAddress = (size_t)ucHeap;
  4338d8:	4a21      	ldr	r2, [pc, #132]	@ (433960 <pvTasklessPortMalloc+0x158>)
    if ((uxAddress & portBYTE_ALIGNMENT_MASK) != 0) {
  4338da:	6809      	ldr	r1, [r1, #0]
  4338dc:	0754      	lsls	r4, r2, #29
        uxAddress += (portBYTE_ALIGNMENT - 1);
  4338de:	eb02 0601 	add.w	r6, r2, r1
    xStart.xBlockSize = (size_t)0;
  4338e2:	f04f 0100 	mov.w	r1, #0
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
  4338e6:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
        uxAddress += (portBYTE_ALIGNMENT - 1);
  4338ea:	bf18      	it	ne
  4338ec:	3207      	addne	r2, #7
    uxAddress -= xHeapStructSize;
  4338ee:	f1a6 0608 	sub.w	r6, r6, #8
        uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
  4338f2:	bf18      	it	ne
  4338f4:	f022 0207 	bicne.w	r2, r2, #7
    uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
  4338f8:	f026 0607 	bic.w	r6, r6, #7
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  4338fc:	4f16      	ldr	r7, [pc, #88]	@ (433958 <pvTasklessPortMalloc+0x150>)
    pxEnd = (void *)uxAddress;
  4338fe:	601e      	str	r6, [r3, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - (size_t)pxFirstFreeBlock;
  433900:	1ab3      	subs	r3, r6, r2
    xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
  433902:	4d14      	ldr	r5, [pc, #80]	@ (433954 <pvTasklessPortMalloc+0x14c>)
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  433904:	603b      	str	r3, [r7, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  433906:	4f17      	ldr	r7, [pc, #92]	@ (433964 <pvTasklessPortMalloc+0x15c>)
    xStart.xBlockSize = (size_t)0;
  433908:	6069      	str	r1, [r5, #4]
    xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
  43390a:	602a      	str	r2, [r5, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
  43390c:	603b      	str	r3, [r7, #0]
    pxEnd->pxNextFreeBlock = NULL;
  43390e:	e9c6 1100 	strd	r1, r1, [r6]
    pxFirstFreeBlock->xBlockSize = uxAddress - (size_t)pxFirstFreeBlock;
  433912:	6053      	str	r3, [r2, #4]
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
  433914:	4b0e      	ldr	r3, [pc, #56]	@ (433950 <pvTasklessPortMalloc+0x148>)
}
  433916:	4625      	mov	r5, r4
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
  433918:	6016      	str	r6, [r2, #0]
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
  43391a:	601c      	str	r4, [r3, #0]
}
  43391c:	e77c      	b.n	433818 <pvTasklessPortMalloc+0x10>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  43391e:	44c8      	add	r8, r9
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
  433920:	eb0c 0208 	add.w	r2, ip, r8
  433924:	4291      	cmp	r1, r2
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  433926:	f8cc 8004 	str.w	r8, [ip, #4]
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
  43392a:	d001      	beq.n	433930 <pvTasklessPortMalloc+0x128>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  43392c:	6859      	ldr	r1, [r3, #4]
  43392e:	e7c0      	b.n	4338b2 <pvTasklessPortMalloc+0xaa>
        pxBlockToInsert = pxIterator;
  433930:	4662      	mov	r2, ip
        if (pxIterator->pxNextFreeBlock != pxEnd) {
  433932:	428e      	cmp	r6, r1
  433934:	d006      	beq.n	433944 <pvTasklessPortMalloc+0x13c>
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  433936:	684c      	ldr	r4, [r1, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  433938:	6809      	ldr	r1, [r1, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  43393a:	4444      	add	r4, r8
  43393c:	6054      	str	r4, [r2, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  43393e:	6011      	str	r1, [r2, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
  433940:	6859      	ldr	r1, [r3, #4]
  433942:	e7b2      	b.n	4338aa <pvTasklessPortMalloc+0xa2>
  433944:	6859      	ldr	r1, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
  433946:	6016      	str	r6, [r2, #0]
  433948:	e7af      	b.n	4338aa <pvTasklessPortMalloc+0xa2>
  43394a:	bf00      	nop
  43394c:	2004e94c 	.word	0x2004e94c
  433950:	2004e940 	.word	0x2004e940
  433954:	2004e950 	.word	0x2004e950
  433958:	2004e944 	.word	0x2004e944
  43395c:	2000a010 	.word	0x2000a010
  433960:	2000aa54 	.word	0x2000aa54
  433964:	2004e948 	.word	0x2004e948

00433968 <vTasklessPortFree>:
    if (pv != NULL) {
  433968:	2800      	cmp	r0, #0
  43396a:	d03d      	beq.n	4339e8 <vTasklessPortFree+0x80>
        configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
  43396c:	4a21      	ldr	r2, [pc, #132]	@ (4339f4 <vTasklessPortFree+0x8c>)
void vTasklessPortFree(void *pv) { prvPortFree(pv, 0); }
  43396e:	b538      	push	{r3, r4, r5, lr}
        configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
  433970:	6812      	ldr	r2, [r2, #0]
  433972:	f850 4c04 	ldr.w	r4, [r0, #-4]
  433976:	4214      	tst	r4, r2
  433978:	d005      	beq.n	433986 <vTasklessPortFree+0x1e>
        configASSERT(pxLink->pxNextFreeBlock == NULL);
  43397a:	f850 1c08 	ldr.w	r1, [r0, #-8]
  43397e:	b129      	cbz	r1, 43398c <vTasklessPortFree+0x24>
  433980:	f000 f878 	bl	433a74 <ulSetInterruptMask>
  433984:	e7fe      	b.n	433984 <vTasklessPortFree+0x1c>
        configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
  433986:	f000 f875 	bl	433a74 <ulSetInterruptMask>
  43398a:	e7fe      	b.n	43398a <vTasklessPortFree+0x22>
                    xFreeBytesRemaining += pxLink->xBlockSize;
  43398c:	4d1a      	ldr	r5, [pc, #104]	@ (4339f8 <vTasklessPortFree+0x90>)
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
  43398e:	ea24 0402 	bic.w	r4, r4, r2
                    xFreeBytesRemaining += pxLink->xBlockSize;
  433992:	682a      	ldr	r2, [r5, #0]
    for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
  433994:	4b19      	ldr	r3, [pc, #100]	@ (4339fc <vTasklessPortFree+0x94>)
                    xFreeBytesRemaining += pxLink->xBlockSize;
  433996:	1911      	adds	r1, r2, r4
  433998:	6029      	str	r1, [r5, #0]
        puc -= xHeapStructSize;
  43399a:	f1a0 0208 	sub.w	r2, r0, #8
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
  43399e:	f840 4c04 	str.w	r4, [r0, #-4]
    for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
  4339a2:	4619      	mov	r1, r3
  4339a4:	681b      	ldr	r3, [r3, #0]
  4339a6:	429a      	cmp	r2, r3
  4339a8:	d8fb      	bhi.n	4339a2 <vTasklessPortFree+0x3a>
    if ((puc + pxIterator->xBlockSize) == (uint8_t *)pxBlockToInsert) {
  4339aa:	684d      	ldr	r5, [r1, #4]
  4339ac:	eb01 0e05 	add.w	lr, r1, r5
  4339b0:	4572      	cmp	r2, lr
  4339b2:	d009      	beq.n	4339c8 <vTasklessPortFree+0x60>
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
  4339b4:	eb02 0c04 	add.w	ip, r2, r4
  4339b8:	4563      	cmp	r3, ip
  4339ba:	d016      	beq.n	4339ea <vTasklessPortFree+0x82>
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
  4339bc:	f840 3c08 	str.w	r3, [r0, #-8]
    if (pxIterator != pxBlockToInsert) {
  4339c0:	4291      	cmp	r1, r2
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
  4339c2:	bf18      	it	ne
  4339c4:	600a      	strne	r2, [r1, #0]
void vTasklessPortFree(void *pv) { prvPortFree(pv, 0); }
  4339c6:	bd38      	pop	{r3, r4, r5, pc}
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4339c8:	442c      	add	r4, r5
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
  4339ca:	190a      	adds	r2, r1, r4
  4339cc:	4293      	cmp	r3, r2
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
  4339ce:	604c      	str	r4, [r1, #4]
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
  4339d0:	d1f9      	bne.n	4339c6 <vTasklessPortFree+0x5e>
        if (pxIterator->pxNextFreeBlock != pxEnd) {
  4339d2:	480b      	ldr	r0, [pc, #44]	@ (433a00 <vTasklessPortFree+0x98>)
        pxBlockToInsert = pxIterator;
  4339d4:	460a      	mov	r2, r1
        if (pxIterator->pxNextFreeBlock != pxEnd) {
  4339d6:	6800      	ldr	r0, [r0, #0]
  4339d8:	4283      	cmp	r3, r0
  4339da:	d0f4      	beq.n	4339c6 <vTasklessPortFree+0x5e>
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4339dc:	e9d3 3000 	ldrd	r3, r0, [r3]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4339e0:	4420      	add	r0, r4
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4339e2:	6013      	str	r3, [r2, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
  4339e4:	6050      	str	r0, [r2, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
  4339e6:	e7eb      	b.n	4339c0 <vTasklessPortFree+0x58>
  4339e8:	4770      	bx	lr
        if (pxIterator->pxNextFreeBlock != pxEnd) {
  4339ea:	4d05      	ldr	r5, [pc, #20]	@ (433a00 <vTasklessPortFree+0x98>)
  4339ec:	682d      	ldr	r5, [r5, #0]
  4339ee:	42ab      	cmp	r3, r5
  4339f0:	d1f4      	bne.n	4339dc <vTasklessPortFree+0x74>
  4339f2:	e7e3      	b.n	4339bc <vTasklessPortFree+0x54>
  4339f4:	2004e940 	.word	0x2004e940
  4339f8:	2004e948 	.word	0x2004e948
  4339fc:	2004e950 	.word	0x2004e950
  433a00:	2004e94c 	.word	0x2004e94c

00433a04 <am_iomaster1_isr>:
//
//! IOM ISRs
//! Take over correct IOM ISR.
//
//*****************************************************************************
void iom_isr(void) {
  433a04:	b510      	push	{r4, lr}
    uint32_t ui32Status;
    // ns_lp_printf("IOM1 ISR\n");
    uint32_t foo = am_hal_iom_interrupt_status_get(ns_spi_config.iomHandle, true, &ui32Status);
  433a06:	4c0d      	ldr	r4, [pc, #52]	@ (433a3c <am_iomaster1_isr+0x38>)
void iom_isr(void) {
  433a08:	b082      	sub	sp, #8
    uint32_t foo = am_hal_iom_interrupt_status_get(ns_spi_config.iomHandle, true, &ui32Status);
  433a0a:	2101      	movs	r1, #1
  433a0c:	aa01      	add	r2, sp, #4
  433a0e:	6860      	ldr	r0, [r4, #4]
  433a10:	f000 faa2 	bl	433f58 <am_hal_iom_interrupt_status_get>
    // ns_lp_printf("IOM1 ISR %d, status %d\n", foo, ui32Status);
    if (!am_hal_iom_interrupt_status_get(ns_spi_config.iomHandle, true, &ui32Status)) {
  433a14:	2101      	movs	r1, #1
  433a16:	6860      	ldr	r0, [r4, #4]
  433a18:	aa01      	add	r2, sp, #4
  433a1a:	f000 fa9d 	bl	433f58 <am_hal_iom_interrupt_status_get>
  433a1e:	b908      	cbnz	r0, 433a24 <am_iomaster1_isr+0x20>
        if (ui32Status) {
  433a20:	9901      	ldr	r1, [sp, #4]
  433a22:	b909      	cbnz	r1, 433a28 <am_iomaster1_isr+0x24>
            am_hal_iom_interrupt_clear(ns_spi_config.iomHandle, ui32Status);
            am_hal_iom_interrupt_service(ns_spi_config.iomHandle, ui32Status);
        }
    }
}
  433a24:	b002      	add	sp, #8
  433a26:	bd10      	pop	{r4, pc}
            am_hal_iom_interrupt_clear(ns_spi_config.iomHandle, ui32Status);
  433a28:	6860      	ldr	r0, [r4, #4]
  433a2a:	f000 fab9 	bl	433fa0 <am_hal_iom_interrupt_clear>
            am_hal_iom_interrupt_service(ns_spi_config.iomHandle, ui32Status);
  433a2e:	9901      	ldr	r1, [sp, #4]
  433a30:	6860      	ldr	r0, [r4, #4]
  433a32:	f000 facb 	bl	433fcc <am_hal_iom_interrupt_service>
}
  433a36:	b002      	add	sp, #8
  433a38:	bd10      	pop	{r4, pc}
  433a3a:	bf00      	nop
  433a3c:	2004e958 	.word	0x2004e958

00433a40 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
  433a40:	4a0b      	ldr	r2, [pc, #44]	@ (433a70 <pxCurrentTCBConst2>)
  433a42:	6811      	ldr	r1, [r2, #0]
  433a44:	6808      	ldr	r0, [r1, #0]
  433a46:	c806      	ldmia	r0!, {r1, r2}
  433a48:	f381 880b 	msr	PSPLIM, r1
  433a4c:	2102      	movs	r1, #2
  433a4e:	f381 8814 	msr	CONTROL, r1
  433a52:	3020      	adds	r0, #32
  433a54:	f380 8809 	msr	PSP, r0
  433a58:	f3bf 8f6f 	isb	sy
  433a5c:	f04f 0000 	mov.w	r0, #0
  433a60:	f380 8811 	msr	BASEPRI, r0
  433a64:	4710      	bx	r2
  433a66:	bf00      	nop
  433a68:	f3af 8000 	nop.w
  433a6c:	f3af 8000 	nop.w

00433a70 <pxCurrentTCBConst2>:
  433a70:	2004ea0c 	.word	0x2004ea0c

00433a74 <ulSetInterruptMask>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
  433a74:	f3ef 8011 	mrs	r0, BASEPRI
  433a78:	f04f 0130 	mov.w	r1, #48	@ 0x30
  433a7c:	f381 8811 	msr	BASEPRI, r1
  433a80:	f3bf 8f4f 	dsb	sy
  433a84:	f3bf 8f6f 	isb	sy
  433a88:	4770      	bx	lr
  433a8a:	bf00      	nop

00433a8c <vClearInterruptMask>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
  433a8c:	f380 8811 	msr	BASEPRI, r0
  433a90:	f3bf 8f4f 	dsb	sy
  433a94:	f3bf 8f6f 	isb	sy
  433a98:	4770      	bx	lr
  433a9a:	bf00      	nop
  433a9c:	0000      	movs	r0, r0
	...

00433aa0 <PendSV_Handler>:
}
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
  433aa0:	f3ef 8009 	mrs	r0, PSP
  433aa4:	f01e 0f10 	tst.w	lr, #16
  433aa8:	bf08      	it	eq
  433aaa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  433aae:	f3ef 820b 	mrs	r2, PSPLIM
  433ab2:	4673      	mov	r3, lr
  433ab4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
  433ab8:	4a11      	ldr	r2, [pc, #68]	@ (433b00 <pxCurrentTCBConst>)
  433aba:	6811      	ldr	r1, [r2, #0]
  433abc:	6008      	str	r0, [r1, #0]
  433abe:	f04f 0030 	mov.w	r0, #48	@ 0x30
  433ac2:	f380 8811 	msr	BASEPRI, r0
  433ac6:	f3bf 8f4f 	dsb	sy
  433aca:	f3bf 8f6f 	isb	sy
  433ace:	f000 f981 	bl	433dd4 <vTaskSwitchContext>
  433ad2:	f04f 0000 	mov.w	r0, #0
  433ad6:	f380 8811 	msr	BASEPRI, r0
  433ada:	4a09      	ldr	r2, [pc, #36]	@ (433b00 <pxCurrentTCBConst>)
  433adc:	6811      	ldr	r1, [r2, #0]
  433ade:	6808      	ldr	r0, [r1, #0]
  433ae0:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
  433ae4:	f013 0f10 	tst.w	r3, #16
  433ae8:	bf08      	it	eq
  433aea:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  433aee:	f382 880b 	msr	PSPLIM, r2
  433af2:	f380 8809 	msr	PSP, r0
  433af6:	4718      	bx	r3
  433af8:	f3af 8000 	nop.w
  433afc:	f3af 8000 	nop.w

00433b00 <pxCurrentTCBConst>:
  433b00:	2004ea0c 	.word	0x2004ea0c
	...

00433b10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
  433b10:	f01e 0f04 	tst.w	lr, #4
  433b14:	bf0c      	ite	eq
  433b16:	f3ef 8008 	mrseq	r0, MSP
  433b1a:	f3ef 8009 	mrsne	r0, PSP
  433b1e:	4904      	ldr	r1, [pc, #16]	@ (433b30 <svchandler_address_const>)
  433b20:	4708      	bx	r1
  433b22:	bf00      	nop
  433b24:	f3af 8000 	nop.w
  433b28:	f3af 8000 	nop.w
  433b2c:	f3af 8000 	nop.w

00433b30 <svchandler_address_const>:
  433b30:	00433e15 	.word	0x00433e15

00433b34 <vApplicationMallocFailedHook>:
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1)
  433b34:	e7fe      	b.n	433b34 <vApplicationMallocFailedHook>
  433b36:	bf00      	nop

00433b38 <vApplicationStackOverflowHook>:
    // Run time stack overflow checking is performed if
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1) {
        __asm("BKPT #0\n"); // Break into the debugger
  433b38:	be00      	bkpt	0x0000
    while (1) {
  433b3a:	e7fd      	b.n	433b38 <vApplicationStackOverflowHook>

00433b3c <vTaskSwitchContext.part.0>:
    }

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
  433b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
         * switch. */
        xYieldPending = pdTRUE;
    }
    else
    {
        xYieldPending = pdFALSE;
  433b3e:	2500      	movs	r5, #0
  433b40:	4c3c      	ldr	r4, [pc, #240]	@ (433c34 <vTaskSwitchContext.part.0+0xf8>)
        xTicks = xTickCount;
  433b42:	493d      	ldr	r1, [pc, #244]	@ (433c38 <vTaskSwitchContext.part.0+0xfc>)
        xYieldPending = pdFALSE;
  433b44:	6025      	str	r5, [r4, #0]
        #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
                portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
            #else
                ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
  433b46:	4b3d      	ldr	r3, [pc, #244]	@ (433c3c <vTaskSwitchContext.part.0+0x100>)
        xTicks = xTickCount;
  433b48:	6809      	ldr	r1, [r1, #0]
             * stored in ulTaskSwitchedInTime.  Note that there is no overflow
             * protection here so count values are only valid until the timer
             * overflows.  The guard against negative values is to protect
             * against suspect run time stat counter implementations - which
             * are provided by the application, not the kernel. */
            if( ulTotalRunTime > ulTaskSwitchedInTime )
  433b4a:	4a3d      	ldr	r2, [pc, #244]	@ (433c40 <vTaskSwitchContext.part.0+0x104>)
                ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
  433b4c:	6019      	str	r1, [r3, #0]
            if( ulTotalRunTime > ulTaskSwitchedInTime )
  433b4e:	6810      	ldr	r0, [r2, #0]
  433b50:	6819      	ldr	r1, [r3, #0]
            {
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
  433b52:	4c3c      	ldr	r4, [pc, #240]	@ (433c44 <vTaskSwitchContext.part.0+0x108>)
            if( ulTotalRunTime > ulTaskSwitchedInTime )
  433b54:	4281      	cmp	r1, r0
  433b56:	d905      	bls.n	433b64 <vTaskSwitchContext.part.0+0x28>
                pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
  433b58:	681e      	ldr	r6, [r3, #0]
  433b5a:	6825      	ldr	r5, [r4, #0]
  433b5c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
  433b5e:	1a09      	subs	r1, r1, r0
  433b60:	4431      	add	r1, r6
  433b62:	64e9      	str	r1, [r5, #76]	@ 0x4c
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            ulTaskSwitchedInTime = ulTotalRunTime;
  433b64:	6819      	ldr	r1, [r3, #0]
        }
        #endif /* configGENERATE_RUN_TIME_STATS */

        /* Check for stack overflow, if configured. */
        taskCHECK_FOR_STACK_OVERFLOW();
  433b66:	6823      	ldr	r3, [r4, #0]
            ulTaskSwitchedInTime = ulTotalRunTime;
  433b68:	6011      	str	r1, [r2, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
  433b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  433b6c:	681a      	ldr	r2, [r3, #0]
  433b6e:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
  433b72:	d103      	bne.n	433b7c <vTaskSwitchContext.part.0+0x40>
  433b74:	685a      	ldr	r2, [r3, #4]
  433b76:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
  433b7a:	d051      	beq.n	433c20 <vTaskSwitchContext.part.0+0xe4>
  433b7c:	6820      	ldr	r0, [r4, #0]
  433b7e:	6821      	ldr	r1, [r4, #0]
  433b80:	3134      	adds	r1, #52	@ 0x34
  433b82:	f7ff ffd9 	bl	433b38 <vApplicationStackOverflowHook>
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  433b86:	4e30      	ldr	r6, [pc, #192]	@ (433c48 <vTaskSwitchContext.part.0+0x10c>)
            pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
  433b88:	4d30      	ldr	r5, [pc, #192]	@ (433c4c <vTaskSwitchContext.part.0+0x110>)
  433b8a:	6822      	ldr	r2, [r4, #0]
  433b8c:	6829      	ldr	r1, [r5, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  433b8e:	6833      	ldr	r3, [r6, #0]
            pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
  433b90:	6591      	str	r1, [r2, #88]	@ 0x58
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  433b92:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  433b96:	4a2e      	ldr	r2, [pc, #184]	@ (433c50 <vTaskSwitchContext.part.0+0x114>)
  433b98:	0080      	lsls	r0, r0, #2
  433b9a:	5810      	ldr	r0, [r2, r0]
  433b9c:	0099      	lsls	r1, r3, #2
  433b9e:	bb58      	cbnz	r0, 433bf8 <vTaskSwitchContext.part.0+0xbc>
  433ba0:	b333      	cbz	r3, 433bf0 <vTaskSwitchContext.part.0+0xb4>
  433ba2:	1e58      	subs	r0, r3, #1
  433ba4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
  433ba8:	0089      	lsls	r1, r1, #2
  433baa:	5857      	ldr	r7, [r2, r1]
  433bac:	0081      	lsls	r1, r0, #2
  433bae:	bb17      	cbnz	r7, 433bf6 <vTaskSwitchContext.part.0+0xba>
  433bb0:	b1f0      	cbz	r0, 433bf0 <vTaskSwitchContext.part.0+0xb4>
  433bb2:	1e98      	subs	r0, r3, #2
  433bb4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
  433bb8:	0089      	lsls	r1, r1, #2
  433bba:	5857      	ldr	r7, [r2, r1]
  433bbc:	0081      	lsls	r1, r0, #2
  433bbe:	b9d7      	cbnz	r7, 433bf6 <vTaskSwitchContext.part.0+0xba>
  433bc0:	b1b0      	cbz	r0, 433bf0 <vTaskSwitchContext.part.0+0xb4>
  433bc2:	1ed8      	subs	r0, r3, #3
  433bc4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
  433bc8:	0089      	lsls	r1, r1, #2
  433bca:	5857      	ldr	r7, [r2, r1]
  433bcc:	0081      	lsls	r1, r0, #2
  433bce:	b997      	cbnz	r7, 433bf6 <vTaskSwitchContext.part.0+0xba>
  433bd0:	b170      	cbz	r0, 433bf0 <vTaskSwitchContext.part.0+0xb4>
  433bd2:	1f18      	subs	r0, r3, #4
  433bd4:	eb00 0180 	add.w	r1, r0, r0, lsl #2
  433bd8:	0089      	lsls	r1, r1, #2
  433bda:	5857      	ldr	r7, [r2, r1]
  433bdc:	0081      	lsls	r1, r0, #2
  433bde:	b957      	cbnz	r7, 433bf6 <vTaskSwitchContext.part.0+0xba>
  433be0:	b130      	cbz	r0, 433bf0 <vTaskSwitchContext.part.0+0xb4>
  433be2:	3b05      	subs	r3, #5
  433be4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  433be8:	0080      	lsls	r0, r0, #2
  433bea:	5810      	ldr	r0, [r2, r0]
  433bec:	0099      	lsls	r1, r3, #2
  433bee:	b918      	cbnz	r0, 433bf8 <vTaskSwitchContext.part.0+0xbc>
  433bf0:	f7ff ff40 	bl	433a74 <ulSetInterruptMask>
  433bf4:	e7fe      	b.n	433bf4 <vTaskSwitchContext.part.0+0xb8>
  433bf6:	4603      	mov	r3, r0
  433bf8:	4419      	add	r1, r3
  433bfa:	eb02 0081 	add.w	r0, r2, r1, lsl #2
  433bfe:	4602      	mov	r2, r0
  433c00:	6841      	ldr	r1, [r0, #4]
  433c02:	3208      	adds	r2, #8
  433c04:	6849      	ldr	r1, [r1, #4]
  433c06:	4291      	cmp	r1, r2
  433c08:	6041      	str	r1, [r0, #4]
  433c0a:	bf08      	it	eq
  433c0c:	6849      	ldreq	r1, [r1, #4]
  433c0e:	68ca      	ldr	r2, [r1, #12]
  433c10:	bf08      	it	eq
  433c12:	6041      	streq	r1, [r0, #4]
  433c14:	6022      	str	r2, [r4, #0]
  433c16:	6033      	str	r3, [r6, #0]
        traceTASK_SWITCHED_IN();

        /* After the new task is switched in, update the global errno. */
        #if ( configUSE_POSIX_ERRNO == 1 )
        {
            FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
  433c18:	6823      	ldr	r3, [r4, #0]
  433c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
  433c1c:	602b      	str	r3, [r5, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
  433c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        taskCHECK_FOR_STACK_OVERFLOW();
  433c20:	689a      	ldr	r2, [r3, #8]
  433c22:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
  433c26:	d1a9      	bne.n	433b7c <vTaskSwitchContext.part.0+0x40>
  433c28:	68db      	ldr	r3, [r3, #12]
  433c2a:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
  433c2e:	d1a5      	bne.n	433b7c <vTaskSwitchContext.part.0+0x40>
  433c30:	e7a9      	b.n	433b86 <vTaskSwitchContext.part.0+0x4a>
  433c32:	bf00      	nop
  433c34:	2004e98c 	.word	0x2004e98c
  433c38:	2004e998 	.word	0x2004e998
  433c3c:	2004e978 	.word	0x2004e978
  433c40:	2004e97c 	.word	0x2004e97c
  433c44:	2004ea0c 	.word	0x2004ea0c
  433c48:	2004e994 	.word	0x2004e994
  433c4c:	2004e99c 	.word	0x2004e99c
  433c50:	2004e9a8 	.word	0x2004e9a8

00433c54 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
  433c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  433c58:	4b4d      	ldr	r3, [pc, #308]	@ (433d90 <xTaskIncrementTick.part.0+0x13c>)
BaseType_t xTaskIncrementTick( void )
  433c5a:	b083      	sub	sp, #12
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  433c5c:	681e      	ldr	r6, [r3, #0]
  433c5e:	3601      	adds	r6, #1
        xTickCount = xConstTickCount;
  433c60:	601e      	str	r6, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  433c62:	2e00      	cmp	r6, #0
  433c64:	d062      	beq.n	433d2c <xTaskIncrementTick.part.0+0xd8>
  433c66:	4a4b      	ldr	r2, [pc, #300]	@ (433d94 <xTaskIncrementTick.part.0+0x140>)
        if( xConstTickCount >= xNextTaskUnblockTime )
  433c68:	6813      	ldr	r3, [r2, #0]
  433c6a:	429e      	cmp	r6, r3
  433c6c:	d375      	bcc.n	433d5a <xTaskIncrementTick.part.0+0x106>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  433c6e:	4f4a      	ldr	r7, [pc, #296]	@ (433d98 <xTaskIncrementTick.part.0+0x144>)
  433c70:	683b      	ldr	r3, [r7, #0]
  433c72:	681b      	ldr	r3, [r3, #0]
  433c74:	2b00      	cmp	r3, #0
  433c76:	f000 8089 	beq.w	433d8c <xTaskIncrementTick.part.0+0x138>
    BaseType_t xSwitchRequired = pdFALSE;
  433c7a:	f04f 0e00 	mov.w	lr, #0
  433c7e:	46b3      	mov	fp, r6
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  433c80:	46f0      	mov	r8, lr
                    prvAddTaskToReadyList( pxTCB );
  433c82:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 433db0 <xTaskIncrementTick.part.0+0x15c>
  433c86:	4d45      	ldr	r5, [pc, #276]	@ (433d9c <xTaskIncrementTick.part.0+0x148>)
  433c88:	9201      	str	r2, [sp, #4]
  433c8a:	e043      	b.n	433d14 <xTaskIncrementTick.part.0+0xc0>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  433c8c:	6958      	ldr	r0, [r3, #20]
  433c8e:	e9d3 2602 	ldrd	r2, r6, [r3, #8]
  433c92:	6096      	str	r6, [r2, #8]
  433c94:	6072      	str	r2, [r6, #4]
  433c96:	6842      	ldr	r2, [r0, #4]
  433c98:	428a      	cmp	r2, r1
  433c9a:	6802      	ldr	r2, [r0, #0]
  433c9c:	bf08      	it	eq
  433c9e:	6046      	streq	r6, [r0, #4]
  433ca0:	3a01      	subs	r2, #1
  433ca2:	f8c3 8014 	str.w	r8, [r3, #20]
  433ca6:	6002      	str	r2, [r0, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  433ca8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
  433caa:	b160      	cbz	r0, 433cc6 <xTaskIncrementTick.part.0+0x72>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  433cac:	e9d3 2607 	ldrd	r2, r6, [r3, #28]
  433cb0:	6096      	str	r6, [r2, #8]
  433cb2:	6072      	str	r2, [r6, #4]
  433cb4:	6842      	ldr	r2, [r0, #4]
  433cb6:	42a2      	cmp	r2, r4
  433cb8:	6802      	ldr	r2, [r0, #0]
  433cba:	bf08      	it	eq
  433cbc:	6046      	streq	r6, [r0, #4]
  433cbe:	3a01      	subs	r2, #1
  433cc0:	f8c3 8028 	str.w	r8, [r3, #40]	@ 0x28
  433cc4:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
  433cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  433cc8:	f8d9 4000 	ldr.w	r4, [r9]
  433ccc:	eb02 0082 	add.w	r0, r2, r2, lsl #2
  433cd0:	eb05 0c80 	add.w	ip, r5, r0, lsl #2
  433cd4:	f8dc 6004 	ldr.w	r6, [ip, #4]
  433cd8:	42a2      	cmp	r2, r4
  433cda:	bf88      	it	hi
  433cdc:	f8c9 2000 	strhi.w	r2, [r9]
  433ce0:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
  433ce4:	f8d6 a008 	ldr.w	sl, [r6, #8]
  433ce8:	609e      	str	r6, [r3, #8]
  433cea:	f8c3 a00c 	str.w	sl, [r3, #12]
  433cee:	3401      	adds	r4, #1
  433cf0:	f8ca 1004 	str.w	r1, [sl, #4]
  433cf4:	60b1      	str	r1, [r6, #8]
  433cf6:	f8c3 c014 	str.w	ip, [r3, #20]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  433cfa:	4b29      	ldr	r3, [pc, #164]	@ (433da0 <xTaskIncrementTick.part.0+0x14c>)
                    prvAddTaskToReadyList( pxTCB );
  433cfc:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  433d00:	6819      	ldr	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  433d02:	683b      	ldr	r3, [r7, #0]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
  433d04:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  433d06:	681b      	ldr	r3, [r3, #0]
                            xSwitchRequired = pdTRUE;
  433d08:	428a      	cmp	r2, r1
  433d0a:	bf88      	it	hi
  433d0c:	f04f 0e01 	movhi.w	lr, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  433d10:	2b00      	cmp	r3, #0
  433d12:	d036      	beq.n	433d82 <xTaskIncrementTick.part.0+0x12e>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
  433d14:	683b      	ldr	r3, [r7, #0]
  433d16:	68db      	ldr	r3, [r3, #12]
  433d18:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  433d1a:	6858      	ldr	r0, [r3, #4]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
  433d1c:	1d19      	adds	r1, r3, #4
                    if( xConstTickCount < xItemValue )
  433d1e:	4583      	cmp	fp, r0
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
  433d20:	f103 0418 	add.w	r4, r3, #24
                    if( xConstTickCount < xItemValue )
  433d24:	d2b2      	bcs.n	433c8c <xTaskIncrementTick.part.0+0x38>
                        xNextTaskUnblockTime = xItemValue;
  433d26:	9a01      	ldr	r2, [sp, #4]
  433d28:	6010      	str	r0, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
  433d2a:	e018      	b.n	433d5e <xTaskIncrementTick.part.0+0x10a>
            taskSWITCH_DELAYED_LISTS();
  433d2c:	4b1a      	ldr	r3, [pc, #104]	@ (433d98 <xTaskIncrementTick.part.0+0x144>)
  433d2e:	681a      	ldr	r2, [r3, #0]
  433d30:	6812      	ldr	r2, [r2, #0]
  433d32:	bb1a      	cbnz	r2, 433d7c <xTaskIncrementTick.part.0+0x128>
  433d34:	4a1b      	ldr	r2, [pc, #108]	@ (433da4 <xTaskIncrementTick.part.0+0x150>)
  433d36:	6818      	ldr	r0, [r3, #0]
  433d38:	6814      	ldr	r4, [r2, #0]
  433d3a:	491b      	ldr	r1, [pc, #108]	@ (433da8 <xTaskIncrementTick.part.0+0x154>)
  433d3c:	601c      	str	r4, [r3, #0]
  433d3e:	6010      	str	r0, [r2, #0]
  433d40:	680a      	ldr	r2, [r1, #0]
  433d42:	3201      	adds	r2, #1
  433d44:	600a      	str	r2, [r1, #0]
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  433d46:	681a      	ldr	r2, [r3, #0]
  433d48:	6812      	ldr	r2, [r2, #0]
  433d4a:	b98a      	cbnz	r2, 433d70 <xTaskIncrementTick.part.0+0x11c>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
  433d4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  433d50:	4a10      	ldr	r2, [pc, #64]	@ (433d94 <xTaskIncrementTick.part.0+0x140>)
  433d52:	6013      	str	r3, [r2, #0]
        if( xConstTickCount >= xNextTaskUnblockTime )
  433d54:	6813      	ldr	r3, [r2, #0]
  433d56:	429e      	cmp	r6, r3
  433d58:	d289      	bcs.n	433c6e <xTaskIncrementTick.part.0+0x1a>
    BaseType_t xSwitchRequired = pdFALSE;
  433d5a:	f04f 0e00 	mov.w	lr, #0
            if( xYieldPending != pdFALSE )
  433d5e:	4b13      	ldr	r3, [pc, #76]	@ (433dac <xTaskIncrementTick.part.0+0x158>)
  433d60:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
  433d62:	2b00      	cmp	r3, #0
}
  433d64:	bf0c      	ite	eq
  433d66:	4670      	moveq	r0, lr
  433d68:	2001      	movne	r0, #1
  433d6a:	b003      	add	sp, #12
  433d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
  433d70:	681b      	ldr	r3, [r3, #0]
  433d72:	4a08      	ldr	r2, [pc, #32]	@ (433d94 <xTaskIncrementTick.part.0+0x140>)
  433d74:	68db      	ldr	r3, [r3, #12]
  433d76:	681b      	ldr	r3, [r3, #0]
  433d78:	6013      	str	r3, [r2, #0]
    }
}
  433d7a:	e775      	b.n	433c68 <xTaskIncrementTick.part.0+0x14>
            taskSWITCH_DELAYED_LISTS();
  433d7c:	f7ff fe7a 	bl	433a74 <ulSetInterruptMask>
  433d80:	e7fe      	b.n	433d80 <xTaskIncrementTick.part.0+0x12c>
  433d82:	9a01      	ldr	r2, [sp, #4]
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  433d84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  433d88:	6013      	str	r3, [r2, #0]
                    break;
  433d8a:	e7e8      	b.n	433d5e <xTaskIncrementTick.part.0+0x10a>
    BaseType_t xSwitchRequired = pdFALSE;
  433d8c:	469e      	mov	lr, r3
  433d8e:	e7f9      	b.n	433d84 <xTaskIncrementTick.part.0+0x130>
  433d90:	2004e998 	.word	0x2004e998
  433d94:	2004e984 	.word	0x2004e984
  433d98:	2004e9a4 	.word	0x2004e9a4
  433d9c:	2004e9a8 	.word	0x2004e9a8
  433da0:	2004ea0c 	.word	0x2004ea0c
  433da4:	2004e9a0 	.word	0x2004e9a0
  433da8:	2004e988 	.word	0x2004e988
  433dac:	2004e98c 	.word	0x2004e98c
  433db0:	2004e994 	.word	0x2004e994

00433db4 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  433db4:	4b05      	ldr	r3, [pc, #20]	@ (433dcc <xTaskIncrementTick+0x18>)
  433db6:	681b      	ldr	r3, [r3, #0]
  433db8:	b90b      	cbnz	r3, 433dbe <xTaskIncrementTick+0xa>
  433dba:	f7ff bf4b 	b.w	433c54 <xTaskIncrementTick.part.0>
        ++xPendedTicks;
  433dbe:	4a04      	ldr	r2, [pc, #16]	@ (433dd0 <xTaskIncrementTick+0x1c>)
}
  433dc0:	2000      	movs	r0, #0
        ++xPendedTicks;
  433dc2:	6813      	ldr	r3, [r2, #0]
  433dc4:	3301      	adds	r3, #1
  433dc6:	6013      	str	r3, [r2, #0]
}
  433dc8:	4770      	bx	lr
  433dca:	bf00      	nop
  433dcc:	2004e980 	.word	0x2004e980
  433dd0:	2004e990 	.word	0x2004e990

00433dd4 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  433dd4:	4b04      	ldr	r3, [pc, #16]	@ (433de8 <vTaskSwitchContext+0x14>)
  433dd6:	681b      	ldr	r3, [r3, #0]
  433dd8:	b11b      	cbz	r3, 433de2 <vTaskSwitchContext+0xe>
        xYieldPending = pdTRUE;
  433dda:	2201      	movs	r2, #1
  433ddc:	4b03      	ldr	r3, [pc, #12]	@ (433dec <vTaskSwitchContext+0x18>)
  433dde:	601a      	str	r2, [r3, #0]
}
  433de0:	4770      	bx	lr
  433de2:	f7ff beab 	b.w	433b3c <vTaskSwitchContext.part.0>
  433de6:	bf00      	nop
  433de8:	2004e980 	.word	0x2004e980
  433dec:	2004e98c 	.word	0x2004e98c

00433df0 <SysTick_Handler>:
    }
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
  433df0:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
  433df2:	f7ff fe3f 	bl	433a74 <ulSetInterruptMask>
  433df6:	4604      	mov	r4, r0
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
  433df8:	f7ff ffdc 	bl	433db4 <xTaskIncrementTick>
  433dfc:	b128      	cbz	r0, 433e0a <SysTick_Handler+0x1a>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  433dfe:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
  433e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
  433e06:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
  433e0a:	4620      	mov	r0, r4
}
  433e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
  433e10:	f7ff be3c 	b.w	433a8c <vClearInterruptMask>

00433e14 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
  433e14:	b508      	push	{r3, lr}
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
  433e16:	6983      	ldr	r3, [r0, #24]

    switch( ucSVCNumber )
  433e18:	f813 3c02 	ldrb.w	r3, [r3, #-2]
  433e1c:	2b02      	cmp	r3, #2
  433e1e:	d002      	beq.n	433e26 <vPortSVCHandler_C+0x12>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
  433e20:	f7ff fe28 	bl	433a74 <ulSetInterruptMask>
  433e24:	e7fe      	b.n	433e24 <vPortSVCHandler_C+0x10>
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
  433e26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
  433e2a:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	@ 0xd88
  433e2e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
  433e32:	f8c3 2d88 	str.w	r2, [r3, #3464]	@ 0xd88
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
  433e36:	f8d3 2f34 	ldr.w	r2, [r3, #3892]	@ 0xf34
  433e3a:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
  433e3e:	f8c3 2f34 	str.w	r2, [r3, #3892]	@ 0xf34
    }
}
  433e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            vRestoreContextOfFirstTask();
  433e46:	f7ff bdfb 	b.w	433a40 <vRestoreContextOfFirstTask>
  433e4a:	bf00      	nop

00433e4c <internal_iom_reset_on_error>:
  433e4c:	2300      	movs	r3, #0
  433e4e:	b570      	push	{r4, r5, r6, lr}
  433e50:	6844      	ldr	r4, [r0, #4]
  433e52:	050e      	lsls	r6, r1, #20
  433e54:	f504 2480 	add.w	r4, r4, #262144	@ 0x40000
  433e58:	f104 0450 	add.w	r4, r4, #80	@ 0x50
  433e5c:	ea4f 3404 	mov.w	r4, r4, lsl #12
  433e60:	f8d0 0864 	ldr.w	r0, [r0, #2148]	@ 0x864
  433e64:	f8d4 5200 	ldr.w	r5, [r4, #512]	@ 0x200
  433e68:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
  433e6c:	d52a      	bpl.n	433ec4 <internal_iom_reset_on_error+0x78>
  433e6e:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
  433e72:	079a      	lsls	r2, r3, #30
  433e74:	d45d      	bmi.n	433f32 <internal_iom_reset_on_error+0xe6>
  433e76:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
  433e7a:	079b      	lsls	r3, r3, #30
  433e7c:	d508      	bpl.n	433e90 <internal_iom_reset_on_error+0x44>
  433e7e:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
  433e82:	f3c3 4307 	ubfx	r3, r3, #16, #8
  433e86:	2b03      	cmp	r3, #3
  433e88:	d9f5      	bls.n	433e76 <internal_iom_reset_on_error+0x2a>
  433e8a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  433e8e:	e7f6      	b.n	433e7e <internal_iom_reset_on_error+0x32>
  433e90:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
  433e94:	f003 0306 	and.w	r3, r3, #6
  433e98:	2b04      	cmp	r3, #4
  433e9a:	d1f9      	bne.n	433e90 <internal_iom_reset_on_error+0x44>
  433e9c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
  433ea0:	f413 0f7f 	tst.w	r3, #16711680	@ 0xff0000
  433ea4:	d00e      	beq.n	433ec4 <internal_iom_reset_on_error+0x78>
  433ea6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
  433eaa:	f3c3 4307 	ubfx	r3, r3, #16, #8
  433eae:	2b03      	cmp	r3, #3
  433eb0:	d9f4      	bls.n	433e9c <internal_iom_reset_on_error+0x50>
  433eb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
  433eb6:	e7f6      	b.n	433ea6 <internal_iom_reset_on_error+0x5a>
  433eb8:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
  433ebc:	f003 0306 	and.w	r3, r3, #6
  433ec0:	2b04      	cmp	r3, #4
  433ec2:	d1f9      	bne.n	433eb8 <internal_iom_reset_on_error+0x6c>
  433ec4:	f411 7f04 	tst.w	r1, #528	@ 0x210
  433ec8:	d02c      	beq.n	433f24 <internal_iom_reset_on_error+0xd8>
  433eca:	f8d4 6388 	ldr.w	r6, [r4, #904]	@ 0x388
  433ece:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
  433ed2:	f003 0306 	and.w	r3, r3, #6
  433ed6:	2b04      	cmp	r3, #4
  433ed8:	d1f9      	bne.n	433ece <internal_iom_reset_on_error+0x82>
  433eda:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
  433ede:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  433ee2:	f023 0310 	bic.w	r3, r3, #16
  433ee6:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
  433eea:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
  433eee:	0040      	lsls	r0, r0, #1
  433ef0:	f023 0302 	bic.w	r3, r3, #2
  433ef4:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  433ef8:	f8d4 3388 	ldr.w	r3, [r4, #904]	@ 0x388
  433efc:	f043 0302 	orr.w	r3, r3, #2
  433f00:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
  433f04:	f7f3 fcb2 	bl	42786c <am_hal_delay_us>
  433f08:	f8c4 6388 	str.w	r6, [r4, #904]	@ 0x388
  433f0c:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
  433f10:	f043 0302 	orr.w	r3, r3, #2
  433f14:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
  433f18:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
  433f1c:	f043 0310 	orr.w	r3, r3, #16
  433f20:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
  433f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  433f28:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
  433f2c:	f8c4 5200 	str.w	r5, [r4, #512]	@ 0x200
  433f30:	bd70      	pop	{r4, r5, r6, pc}
  433f32:	f8d4 221c 	ldr.w	r2, [r4, #540]	@ 0x21c
  433f36:	2a00      	cmp	r2, #0
  433f38:	d0be      	beq.n	433eb8 <internal_iom_reset_on_error+0x6c>
  433f3a:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
  433f3e:	f3c3 2307 	ubfx	r3, r3, #8, #8
  433f42:	2b03      	cmp	r3, #3
  433f44:	d9f9      	bls.n	433f3a <internal_iom_reset_on_error+0xee>
  433f46:	4b03      	ldr	r3, [pc, #12]	@ (433f54 <internal_iom_reset_on_error+0x108>)
  433f48:	2a04      	cmp	r2, #4
  433f4a:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
  433f4e:	d9b3      	bls.n	433eb8 <internal_iom_reset_on_error+0x6c>
  433f50:	3a04      	subs	r2, #4
  433f52:	e7f0      	b.n	433f36 <internal_iom_reset_on_error+0xea>
  433f54:	deadbeef 	.word	0xdeadbeef

00433f58 <am_hal_iom_interrupt_status_get>:
  433f58:	b1e0      	cbz	r0, 433f94 <am_hal_iom_interrupt_status_get+0x3c>
  433f5a:	6803      	ldr	r3, [r0, #0]
  433f5c:	b410      	push	{r4}
  433f5e:	4c0f      	ldr	r4, [pc, #60]	@ (433f9c <am_hal_iom_interrupt_status_get+0x44>)
  433f60:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
  433f64:	42a3      	cmp	r3, r4
  433f66:	d111      	bne.n	433f8c <am_hal_iom_interrupt_status_get+0x34>
  433f68:	b1b2      	cbz	r2, 433f98 <am_hal_iom_interrupt_status_get+0x40>
  433f6a:	6843      	ldr	r3, [r0, #4]
  433f6c:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
  433f70:	3350      	adds	r3, #80	@ 0x50
  433f72:	031b      	lsls	r3, r3, #12
  433f74:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
  433f78:	b921      	cbnz	r1, 433f84 <am_hal_iom_interrupt_status_get+0x2c>
  433f7a:	2000      	movs	r0, #0
  433f7c:	6014      	str	r4, [r2, #0]
  433f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  433f82:	4770      	bx	lr
  433f84:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
  433f88:	401c      	ands	r4, r3
  433f8a:	e7f6      	b.n	433f7a <am_hal_iom_interrupt_status_get+0x22>
  433f8c:	2002      	movs	r0, #2
  433f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
  433f92:	4770      	bx	lr
  433f94:	2002      	movs	r0, #2
  433f96:	4770      	bx	lr
  433f98:	2006      	movs	r0, #6
  433f9a:	e7f0      	b.n	433f7e <am_hal_iom_interrupt_status_get+0x26>
  433f9c:	01123456 	.word	0x01123456

00433fa0 <am_hal_iom_interrupt_clear>:
  433fa0:	b180      	cbz	r0, 433fc4 <am_hal_iom_interrupt_clear+0x24>
  433fa2:	6803      	ldr	r3, [r0, #0]
  433fa4:	4a08      	ldr	r2, [pc, #32]	@ (433fc8 <am_hal_iom_interrupt_clear+0x28>)
  433fa6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
  433faa:	4293      	cmp	r3, r2
  433fac:	d10a      	bne.n	433fc4 <am_hal_iom_interrupt_clear+0x24>
  433fae:	6843      	ldr	r3, [r0, #4]
  433fb0:	2000      	movs	r0, #0
  433fb2:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
  433fb6:	3350      	adds	r3, #80	@ 0x50
  433fb8:	031b      	lsls	r3, r3, #12
  433fba:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  433fbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
  433fc2:	4770      	bx	lr
  433fc4:	2002      	movs	r0, #2
  433fc6:	4770      	bx	lr
  433fc8:	01123456 	.word	0x01123456

00433fcc <am_hal_iom_interrupt_service>:
  433fcc:	2800      	cmp	r0, #0
  433fce:	f000 80ba 	beq.w	434146 <am_hal_iom_interrupt_service+0x17a>
  433fd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  433fd6:	6803      	ldr	r3, [r0, #0]
  433fd8:	4aae      	ldr	r2, [pc, #696]	@ (434294 <am_hal_iom_interrupt_service+0x2c8>)
  433fda:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
  433fde:	4293      	cmp	r3, r2
  433fe0:	4604      	mov	r4, r0
  433fe2:	b085      	sub	sp, #20
  433fe4:	f040 80a2 	bne.w	43412c <am_hal_iom_interrupt_service+0x160>
  433fe8:	f890 383c 	ldrb.w	r3, [r0, #2108]	@ 0x83c
  433fec:	460d      	mov	r5, r1
  433fee:	6847      	ldr	r7, [r0, #4]
  433ff0:	2b00      	cmp	r3, #0
  433ff2:	f040 809f 	bne.w	434134 <am_hal_iom_interrupt_service+0x168>
  433ff6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  433ff8:	2b00      	cmp	r3, #0
  433ffa:	f000 80a2 	beq.w	434142 <am_hal_iom_interrupt_service+0x176>
  433ffe:	f8d0 0828 	ldr.w	r0, [r0, #2088]	@ 0x828
  434002:	2800      	cmp	r0, #0
  434004:	f000 8081 	beq.w	43410a <am_hal_iom_interrupt_service+0x13e>
  434008:	4669      	mov	r1, sp
  43400a:	f000 f987 	bl	43431c <am_hal_cmdq_get_status>
  43400e:	2800      	cmp	r0, #0
  434010:	d17c      	bne.n	43410c <am_hal_iom_interrupt_service+0x140>
  434012:	f884 0834 	strb.w	r0, [r4, #2100]	@ 0x834
  434016:	9800      	ldr	r0, [sp, #0]
  434018:	69e3      	ldr	r3, [r4, #28]
  43401a:	1ac0      	subs	r0, r0, r3
  43401c:	3001      	adds	r0, #1
  43401e:	e010      	b.n	434042 <am_hal_iom_interrupt_service+0x76>
  434020:	f894 2834 	ldrb.w	r2, [r4, #2100]	@ 0x834
  434024:	f002 08ff 	and.w	r8, r2, #255	@ 0xff
  434028:	b96a      	cbnz	r2, 434046 <am_hal_iom_interrupt_service+0x7a>
  43402a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  43402c:	3301      	adds	r3, #1
  43402e:	3a01      	subs	r2, #1
  434030:	b2de      	uxtb	r6, r3
  434032:	61e3      	str	r3, [r4, #28]
  434034:	6262      	str	r2, [r4, #36]	@ 0x24
  434036:	eb04 0686 	add.w	r6, r4, r6, lsl #2
  43403a:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
  43403c:	2a00      	cmp	r2, #0
  43403e:	f040 8112 	bne.w	434266 <am_hal_iom_interrupt_service+0x29a>
  434042:	3801      	subs	r0, #1
  434044:	d1ec      	bne.n	434020 <am_hal_iom_interrupt_service+0x54>
  434046:	f894 2834 	ldrb.w	r2, [r4, #2100]	@ 0x834
  43404a:	2a00      	cmp	r2, #0
  43404c:	d159      	bne.n	434102 <am_hal_iom_interrupt_service+0x136>
  43404e:	f644 227c 	movw	r2, #19068	@ 0x4a7c
  434052:	ea15 0902 	ands.w	r9, r5, r2
  434056:	d054      	beq.n	434102 <am_hal_iom_interrupt_service+0x136>
  434058:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  43405a:	3301      	adds	r3, #1
  43405c:	61e3      	str	r3, [r4, #28]
  43405e:	3a01      	subs	r2, #1
  434060:	b2db      	uxtb	r3, r3
  434062:	6262      	str	r2, [r4, #36]	@ 0x24
  434064:	eb04 0683 	add.w	r6, r4, r3, lsl #2
  434068:	f507 2880 	add.w	r8, r7, #262144	@ 0x40000
  43406c:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
  43406e:	f108 0850 	add.w	r8, r8, #80	@ 0x50
  434072:	ea4f 3808 	mov.w	r8, r8, lsl #12
  434076:	b1d3      	cbz	r3, 4340ae <am_hal_iom_interrupt_service+0xe2>
  434078:	f8d8 2204 	ldr.w	r2, [r8, #516]	@ 0x204
  43407c:	f8d6 0428 	ldr.w	r0, [r6, #1064]	@ 0x428
  434080:	4315      	orrs	r5, r2
  434082:	f015 0f6c 	tst.w	r5, #108	@ 0x6c
  434086:	f040 80fd 	bne.w	434284 <am_hal_iom_interrupt_service+0x2b8>
  43408a:	05aa      	lsls	r2, r5, #22
  43408c:	f100 80fd 	bmi.w	43428a <am_hal_iom_interrupt_service+0x2be>
  434090:	06ea      	lsls	r2, r5, #27
  434092:	f100 80fc 	bmi.w	43428e <am_hal_iom_interrupt_service+0x2c2>
  434096:	f415 4f90 	tst.w	r5, #18432	@ 0x4800
  43409a:	bf14      	ite	ne
  43409c:	2101      	movne	r1, #1
  43409e:	2100      	moveq	r1, #0
  4340a0:	4798      	blx	r3
  4340a2:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
  4340a6:	2b02      	cmp	r3, #2
  4340a8:	bf1c      	itt	ne
  4340aa:	2300      	movne	r3, #0
  4340ac:	62b3      	strne	r3, [r6, #40]	@ 0x28
  4340ae:	2200      	movs	r2, #0
  4340b0:	f8d8 3228 	ldr.w	r3, [r8, #552]	@ 0x228
  4340b4:	4649      	mov	r1, r9
  4340b6:	f023 0301 	bic.w	r3, r3, #1
  4340ba:	f8c8 3228 	str.w	r3, [r8, #552]	@ 0x228
  4340be:	f8d8 3218 	ldr.w	r3, [r8, #536]	@ 0x218
  4340c2:	4620      	mov	r0, r4
  4340c4:	f023 0301 	bic.w	r3, r3, #1
  4340c8:	f8c8 3218 	str.w	r3, [r8, #536]	@ 0x218
  4340cc:	f8c8 2224 	str.w	r2, [r8, #548]	@ 0x224
  4340d0:	f7ff febc 	bl	433e4c <internal_iom_reset_on_error>
  4340d4:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
  4340d8:	f000 f972 	bl	4343c0 <am_hal_cmdq_error_resume>
  4340dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  4340de:	b183      	cbz	r3, 434102 <am_hal_iom_interrupt_service+0x136>
  4340e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  4340e2:	b953      	cbnz	r3, 4340fa <am_hal_iom_interrupt_service+0x12e>
  4340e4:	6863      	ldr	r3, [r4, #4]
  4340e6:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
  4340ea:	3350      	adds	r3, #80	@ 0x50
  4340ec:	031b      	lsls	r3, r3, #12
  4340ee:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
  4340f2:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
  4340f6:	e9c2 3200 	strd	r3, r2, [r2]
  4340fa:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
  4340fe:	f000 f8cf 	bl	4342a0 <am_hal_cmdq_enable>
  434102:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  434104:	2b00      	cmp	r3, #0
  434106:	f000 80a9 	beq.w	43425c <am_hal_iom_interrupt_service+0x290>
  43410a:	2000      	movs	r0, #0
  43410c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  43410e:	b973      	cbnz	r3, 43412e <am_hal_iom_interrupt_service+0x162>
  434110:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  434114:	f507 2780 	add.w	r7, r7, #262144	@ 0x40000
  434118:	6962      	ldr	r2, [r4, #20]
  43411a:	3750      	adds	r7, #80	@ 0x50
  43411c:	033f      	lsls	r7, r7, #12
  43411e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  434122:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
  434126:	f8c7 2200 	str.w	r2, [r7, #512]	@ 0x200
  43412a:	e000      	b.n	43412e <am_hal_iom_interrupt_service+0x162>
  43412c:	2002      	movs	r0, #2
  43412e:	b005      	add	sp, #20
  434130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  434134:	f640 0301 	movw	r3, #2049	@ 0x801
  434138:	6981      	ldr	r1, [r0, #24]
  43413a:	4329      	orrs	r1, r5
  43413c:	4219      	tst	r1, r3
  43413e:	6181      	str	r1, [r0, #24]
  434140:	d103      	bne.n	43414a <am_hal_iom_interrupt_service+0x17e>
  434142:	2000      	movs	r0, #0
  434144:	e7f3      	b.n	43412e <am_hal_iom_interrupt_service+0x162>
  434146:	2002      	movs	r0, #2
  434148:	4770      	bx	lr
  43414a:	f507 2780 	add.w	r7, r7, #262144	@ 0x40000
  43414e:	3750      	adds	r7, #80	@ 0x50
  434150:	033f      	lsls	r7, r7, #12
  434152:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
  434156:	07db      	lsls	r3, r3, #31
  434158:	d43f      	bmi.n	4341da <am_hal_iom_interrupt_service+0x20e>
  43415a:	f8d4 3850 	ldr.w	r3, [r4, #2128]	@ 0x850
  43415e:	f8d4 0848 	ldr.w	r0, [r4, #2120]	@ 0x848
  434162:	3301      	adds	r3, #1
  434164:	fbb3 f6f0 	udiv	r6, r3, r0
  434168:	f8c4 3850 	str.w	r3, [r4, #2128]	@ 0x850
  43416c:	fb00 3316 	mls	r3, r0, r6, r3
  434170:	f8d4 2840 	ldr.w	r2, [r4, #2112]	@ 0x840
  434174:	f8d4 5854 	ldr.w	r5, [r4, #2132]	@ 0x854
  434178:	3a01      	subs	r2, #1
  43417a:	eb05 1543 	add.w	r5, r5, r3, lsl #5
  43417e:	f8c4 2840 	str.w	r2, [r4, #2112]	@ 0x840
  434182:	69aa      	ldr	r2, [r5, #24]
  434184:	b19a      	cbz	r2, 4341ae <am_hal_iom_interrupt_service+0x1e2>
  434186:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
  43418a:	69e8      	ldr	r0, [r5, #28]
  43418c:	430b      	orrs	r3, r1
  43418e:	f013 0f6c 	tst.w	r3, #108	@ 0x6c
  434192:	d160      	bne.n	434256 <am_hal_iom_interrupt_service+0x28a>
  434194:	059e      	lsls	r6, r3, #22
  434196:	d471      	bmi.n	43427c <am_hal_iom_interrupt_service+0x2b0>
  434198:	06de      	lsls	r6, r3, #27
  43419a:	d471      	bmi.n	434280 <am_hal_iom_interrupt_service+0x2b4>
  43419c:	f413 4f90 	tst.w	r3, #18432	@ 0x4800
  4341a0:	bf14      	ite	ne
  4341a2:	2101      	movne	r1, #1
  4341a4:	2100      	moveq	r1, #0
  4341a6:	4790      	blx	r2
  4341a8:	2300      	movs	r3, #0
  4341aa:	69a1      	ldr	r1, [r4, #24]
  4341ac:	61ab      	str	r3, [r5, #24]
  4341ae:	f644 237c 	movw	r3, #19068	@ 0x4a7c
  4341b2:	4019      	ands	r1, r3
  4341b4:	d116      	bne.n	4341e4 <am_hal_iom_interrupt_service+0x218>
  4341b6:	f8d4 3840 	ldr.w	r3, [r4, #2112]	@ 0x840
  4341ba:	bb03      	cbnz	r3, 4341fe <am_hal_iom_interrupt_service+0x232>
  4341bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
  4341c0:	f884 383c 	strb.w	r3, [r4, #2108]	@ 0x83c
  4341c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
  4341c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  4341cc:	f023 0301 	bic.w	r3, r3, #1
  4341d0:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
  4341d4:	f8c7 2238 	str.w	r2, [r7, #568]	@ 0x238
  4341d8:	e7b3      	b.n	434142 <am_hal_iom_interrupt_service+0x176>
  4341da:	f644 637c 	movw	r3, #20092	@ 0x4e7c
  4341de:	4219      	tst	r1, r3
  4341e0:	d0af      	beq.n	434142 <am_hal_iom_interrupt_service+0x176>
  4341e2:	e7ba      	b.n	43415a <am_hal_iom_interrupt_service+0x18e>
  4341e4:	2200      	movs	r2, #0
  4341e6:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
  4341ea:	4620      	mov	r0, r4
  4341ec:	f023 0301 	bic.w	r3, r3, #1
  4341f0:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
  4341f4:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
  4341f8:	f7ff fe28 	bl	433e4c <internal_iom_reset_on_error>
  4341fc:	e7db      	b.n	4341b6 <am_hal_iom_interrupt_service+0x1ea>
  4341fe:	f8d4 2850 	ldr.w	r2, [r4, #2128]	@ 0x850
  434202:	f8d4 1848 	ldr.w	r1, [r4, #2120]	@ 0x848
  434206:	3201      	adds	r2, #1
  434208:	fbb2 f6f1 	udiv	r6, r2, r1
  43420c:	2500      	movs	r5, #0
  43420e:	fb01 2216 	mls	r2, r1, r6, r2
  434212:	f8d4 0854 	ldr.w	r0, [r4, #2132]	@ 0x854
  434216:	6863      	ldr	r3, [r4, #4]
  434218:	eb00 1142 	add.w	r1, r0, r2, lsl #5
  43421c:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
  434220:	0152      	lsls	r2, r2, #5
  434222:	5880      	ldr	r0, [r0, r2]
  434224:	3350      	adds	r3, #80	@ 0x50
  434226:	031b      	lsls	r3, r3, #12
  434228:	f8c7 5224 	str.w	r5, [r7, #548]	@ 0x224
  43422c:	e9d1 2601 	ldrd	r2, r6, [r1, #4]
  434230:	61a5      	str	r5, [r4, #24]
  434232:	f8c3 0128 	str.w	r0, [r3, #296]	@ 0x128
  434236:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
  43423a:	694a      	ldr	r2, [r1, #20]
  43423c:	e9d1 4003 	ldrd	r4, r0, [r1, #12]
  434240:	f8c3 5218 	str.w	r5, [r3, #536]	@ 0x218
  434244:	f8c3 621c 	str.w	r6, [r3, #540]	@ 0x21c
  434248:	f8c3 4220 	str.w	r4, [r3, #544]	@ 0x220
  43424c:	f8c3 0218 	str.w	r0, [r3, #536]	@ 0x218
  434250:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  434254:	e775      	b.n	434142 <am_hal_iom_interrupt_service+0x176>
  434256:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  43425a:	e7a4      	b.n	4341a6 <am_hal_iom_interrupt_service+0x1da>
  43425c:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
  434260:	f000 f842 	bl	4342e8 <am_hal_cmdq_disable>
  434264:	e751      	b.n	43410a <am_hal_iom_interrupt_service+0x13e>
  434266:	4641      	mov	r1, r8
  434268:	f8d6 0428 	ldr.w	r0, [r6, #1064]	@ 0x428
  43426c:	4790      	blx	r2
  43426e:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
  434272:	2b02      	cmp	r3, #2
  434274:	bf18      	it	ne
  434276:	f8c6 8028 	strne.w	r8, [r6, #40]	@ 0x28
  43427a:	e6cc      	b.n	434016 <am_hal_iom_interrupt_service+0x4a>
  43427c:	4906      	ldr	r1, [pc, #24]	@ (434298 <am_hal_iom_interrupt_service+0x2cc>)
  43427e:	e792      	b.n	4341a6 <am_hal_iom_interrupt_service+0x1da>
  434280:	4906      	ldr	r1, [pc, #24]	@ (43429c <am_hal_iom_interrupt_service+0x2d0>)
  434282:	e790      	b.n	4341a6 <am_hal_iom_interrupt_service+0x1da>
  434284:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  434288:	e70a      	b.n	4340a0 <am_hal_iom_interrupt_service+0xd4>
  43428a:	4903      	ldr	r1, [pc, #12]	@ (434298 <am_hal_iom_interrupt_service+0x2cc>)
  43428c:	e708      	b.n	4340a0 <am_hal_iom_interrupt_service+0xd4>
  43428e:	4903      	ldr	r1, [pc, #12]	@ (43429c <am_hal_iom_interrupt_service+0x2d0>)
  434290:	e706      	b.n	4340a0 <am_hal_iom_interrupt_service+0xd4>
  434292:	bf00      	nop
  434294:	01123456 	.word	0x01123456
  434298:	08000001 	.word	0x08000001
  43429c:	08000002 	.word	0x08000002

004342a0 <am_hal_cmdq_enable>:
  4342a0:	b1c0      	cbz	r0, 4342d4 <am_hal_cmdq_enable+0x34>
  4342a2:	6803      	ldr	r3, [r0, #0]
  4342a4:	4a0e      	ldr	r2, [pc, #56]	@ (4342e0 <am_hal_cmdq_enable+0x40>)
  4342a6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
  4342aa:	4293      	cmp	r3, r2
  4342ac:	d112      	bne.n	4342d4 <am_hal_cmdq_enable+0x34>
  4342ae:	78c3      	ldrb	r3, [r0, #3]
  4342b0:	079b      	lsls	r3, r3, #30
  4342b2:	d40d      	bmi.n	4342d0 <am_hal_cmdq_enable+0x30>
  4342b4:	4b0b      	ldr	r3, [pc, #44]	@ (4342e4 <am_hal_cmdq_enable+0x44>)
  4342b6:	6882      	ldr	r2, [r0, #8]
  4342b8:	429a      	cmp	r2, r3
  4342ba:	d80d      	bhi.n	4342d8 <am_hal_cmdq_enable+0x38>
  4342bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  4342be:	681a      	ldr	r2, [r3, #0]
  4342c0:	6813      	ldr	r3, [r2, #0]
  4342c2:	f043 0301 	orr.w	r3, r3, #1
  4342c6:	6013      	str	r3, [r2, #0]
  4342c8:	78c3      	ldrb	r3, [r0, #3]
  4342ca:	f043 0302 	orr.w	r3, r3, #2
  4342ce:	70c3      	strb	r3, [r0, #3]
  4342d0:	2000      	movs	r0, #0
  4342d2:	4770      	bx	lr
  4342d4:	2002      	movs	r0, #2
  4342d6:	4770      	bx	lr
  4342d8:	f3bf 8f5f 	dmb	sy
  4342dc:	e7ee      	b.n	4342bc <am_hal_cmdq_enable+0x1c>
  4342de:	bf00      	nop
  4342e0:	01cdcdcd 	.word	0x01cdcdcd
  4342e4:	2007ffff 	.word	0x2007ffff

004342e8 <am_hal_cmdq_disable>:
  4342e8:	b1a0      	cbz	r0, 434314 <am_hal_cmdq_disable+0x2c>
  4342ea:	6803      	ldr	r3, [r0, #0]
  4342ec:	4a0a      	ldr	r2, [pc, #40]	@ (434318 <am_hal_cmdq_disable+0x30>)
  4342ee:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
  4342f2:	4293      	cmp	r3, r2
  4342f4:	d10e      	bne.n	434314 <am_hal_cmdq_disable+0x2c>
  4342f6:	78c3      	ldrb	r3, [r0, #3]
  4342f8:	079b      	lsls	r3, r3, #30
  4342fa:	d509      	bpl.n	434310 <am_hal_cmdq_disable+0x28>
  4342fc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
  4342fe:	681a      	ldr	r2, [r3, #0]
  434300:	6813      	ldr	r3, [r2, #0]
  434302:	f023 0301 	bic.w	r3, r3, #1
  434306:	6013      	str	r3, [r2, #0]
  434308:	78c3      	ldrb	r3, [r0, #3]
  43430a:	f023 0302 	bic.w	r3, r3, #2
  43430e:	70c3      	strb	r3, [r0, #3]
  434310:	2000      	movs	r0, #0
  434312:	4770      	bx	lr
  434314:	2002      	movs	r0, #2
  434316:	4770      	bx	lr
  434318:	01cdcdcd 	.word	0x01cdcdcd

0043431c <am_hal_cmdq_get_status>:
  43431c:	2800      	cmp	r0, #0
  43431e:	d04a      	beq.n	4343b6 <am_hal_cmdq_get_status+0x9a>
  434320:	b5f0      	push	{r4, r5, r6, r7, lr}
  434322:	6803      	ldr	r3, [r0, #0]
  434324:	4a25      	ldr	r2, [pc, #148]	@ (4343bc <am_hal_cmdq_get_status+0xa0>)
  434326:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
  43432a:	4293      	cmp	r3, r2
  43432c:	4604      	mov	r4, r0
  43432e:	b083      	sub	sp, #12
  434330:	d13b      	bne.n	4343aa <am_hal_cmdq_get_status+0x8e>
  434332:	460d      	mov	r5, r1
  434334:	2900      	cmp	r1, #0
  434336:	d03b      	beq.n	4343b0 <am_hal_cmdq_get_status+0x94>
  434338:	f7f4 fa84 	bl	428844 <am_hal_interrupt_master_disable>
  43433c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  43433e:	6a22      	ldr	r2, [r4, #32]
  434340:	689e      	ldr	r6, [r3, #8]
  434342:	6859      	ldr	r1, [r3, #4]
  434344:	4613      	mov	r3, r2
  434346:	9001      	str	r0, [sp, #4]
  434348:	6830      	ldr	r0, [r6, #0]
  43434a:	f360 0307 	bfi	r3, r0, #0, #8
  43434e:	429a      	cmp	r2, r3
  434350:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
  434354:	bfb8      	it	lt
  434356:	4613      	movlt	r3, r2
  434358:	61e3      	str	r3, [r4, #28]
  43435a:	680b      	ldr	r3, [r1, #0]
  43435c:	9801      	ldr	r0, [sp, #4]
  43435e:	60e3      	str	r3, [r4, #12]
  434360:	f7f4 fa74 	bl	42884c <am_hal_interrupt_master_set>
  434364:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
  434368:	6a22      	ldr	r2, [r4, #32]
  43436a:	2000      	movs	r0, #0
  43436c:	428e      	cmp	r6, r1
  43436e:	bf0c      	ite	eq
  434370:	4617      	moveq	r7, r2
  434372:	1e57      	subne	r7, r2, #1
  434374:	69e3      	ldr	r3, [r4, #28]
  434376:	602b      	str	r3, [r5, #0]
  434378:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  43437a:	60aa      	str	r2, [r5, #8]
  43437c:	e9d3 6106 	ldrd	r6, r1, [r3, #24]
  434380:	e9d3 4208 	ldrd	r4, r2, [r3, #32]
  434384:	606f      	str	r7, [r5, #4]
  434386:	6833      	ldr	r3, [r6, #0]
  434388:	420b      	tst	r3, r1
  43438a:	bf14      	ite	ne
  43438c:	2101      	movne	r1, #1
  43438e:	4601      	moveq	r1, r0
  434390:	4213      	tst	r3, r2
  434392:	bf14      	ite	ne
  434394:	2201      	movne	r2, #1
  434396:	4602      	moveq	r2, r0
  434398:	4223      	tst	r3, r4
  43439a:	bf14      	ite	ne
  43439c:	2301      	movne	r3, #1
  43439e:	4603      	moveq	r3, r0
  4343a0:	7329      	strb	r1, [r5, #12]
  4343a2:	736a      	strb	r2, [r5, #13]
  4343a4:	73ab      	strb	r3, [r5, #14]
  4343a6:	b003      	add	sp, #12
  4343a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4343aa:	2002      	movs	r0, #2
  4343ac:	b003      	add	sp, #12
  4343ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4343b0:	2006      	movs	r0, #6
  4343b2:	b003      	add	sp, #12
  4343b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4343b6:	2002      	movs	r0, #2
  4343b8:	4770      	bx	lr
  4343ba:	bf00      	nop
  4343bc:	01cdcdcd 	.word	0x01cdcdcd

004343c0 <am_hal_cmdq_error_resume>:
  4343c0:	2800      	cmp	r0, #0
  4343c2:	d036      	beq.n	434432 <am_hal_cmdq_error_resume+0x72>
  4343c4:	6803      	ldr	r3, [r0, #0]
  4343c6:	4a1e      	ldr	r2, [pc, #120]	@ (434440 <am_hal_cmdq_error_resume+0x80>)
  4343c8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
  4343cc:	4293      	cmp	r3, r2
  4343ce:	d130      	bne.n	434432 <am_hal_cmdq_error_resume+0x72>
  4343d0:	78c3      	ldrb	r3, [r0, #3]
  4343d2:	079b      	lsls	r3, r3, #30
  4343d4:	d52f      	bpl.n	434436 <am_hal_cmdq_error_resume+0x76>
  4343d6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
  4343d8:	b470      	push	{r4, r5, r6}
  4343da:	e9d2 1400 	ldrd	r1, r4, [r2]
  4343de:	680b      	ldr	r3, [r1, #0]
  4343e0:	6895      	ldr	r5, [r2, #8]
  4343e2:	f023 0301 	bic.w	r3, r3, #1
  4343e6:	600b      	str	r3, [r1, #0]
  4343e8:	6826      	ldr	r6, [r4, #0]
  4343ea:	6833      	ldr	r3, [r6, #0]
  4343ec:	4632      	mov	r2, r6
  4343ee:	f023 0101 	bic.w	r1, r3, #1
  4343f2:	42a9      	cmp	r1, r5
  4343f4:	d021      	beq.n	43443a <am_hal_cmdq_error_resume+0x7a>
  4343f6:	42a3      	cmp	r3, r4
  4343f8:	f102 0108 	add.w	r1, r2, #8
  4343fc:	d009      	beq.n	434412 <am_hal_cmdq_error_resume+0x52>
  4343fe:	6893      	ldr	r3, [r2, #8]
  434400:	f023 0201 	bic.w	r2, r3, #1
  434404:	42aa      	cmp	r2, r5
  434406:	d00a      	beq.n	43441e <am_hal_cmdq_error_resume+0x5e>
  434408:	460a      	mov	r2, r1
  43440a:	42a3      	cmp	r3, r4
  43440c:	f102 0108 	add.w	r1, r2, #8
  434410:	d1f5      	bne.n	4343fe <am_hal_cmdq_error_resume+0x3e>
  434412:	6851      	ldr	r1, [r2, #4]
  434414:	680b      	ldr	r3, [r1, #0]
  434416:	f023 0201 	bic.w	r2, r3, #1
  43441a:	42aa      	cmp	r2, r5
  43441c:	d1f4      	bne.n	434408 <am_hal_cmdq_error_resume+0x48>
  43441e:	460e      	mov	r6, r1
  434420:	600d      	str	r5, [r1, #0]
  434422:	6026      	str	r6, [r4, #0]
  434424:	78c3      	ldrb	r3, [r0, #3]
  434426:	bc70      	pop	{r4, r5, r6}
  434428:	f023 0302 	bic.w	r3, r3, #2
  43442c:	70c3      	strb	r3, [r0, #3]
  43442e:	2000      	movs	r0, #0
  434430:	4770      	bx	lr
  434432:	2002      	movs	r0, #2
  434434:	4770      	bx	lr
  434436:	2000      	movs	r0, #0
  434438:	4770      	bx	lr
  43443a:	4631      	mov	r1, r6
  43443c:	e7f0      	b.n	434420 <am_hal_cmdq_error_resume+0x60>
  43443e:	bf00      	nop
  434440:	01cdcdcd 	.word	0x01cdcdcd
  434444:	00000007 	.word	0x00000007
  434448:	00000007 	.word	0x00000007
  43444c:	01000701 	.word	0x01000701
  434450:	00000001 	.word	0x00000001
  434454:	6e61656d 	.word	0x6e61656d
  434458:	00203a73 	.word	0x00203a73
  43445c:	73697861 	.word	0x73697861
  434460:	6925203a 	.word	0x6925203a
  434464:	0000000a 	.word	0x0000000a
  434468:	00206625 	.word	0x00206625
  43446c:	79617247 	.word	0x79617247
  434470:	6c616373 	.word	0x6c616373
  434474:	00000065 	.word	0x00000065
  434478:	00727470 	.word	0x00727470
  43447c:	64696f76 	.word	0x64696f76
  434480:	6e617b20 	.word	0x6e617b20
  434484:	6d796e6f 	.word	0x6d796e6f
  434488:	7d73756f 	.word	0x7d73756f
  43448c:	69653a3a 	.word	0x69653a3a
  434490:	696c615f 	.word	0x696c615f
  434494:	64656e67 	.word	0x64656e67
  434498:	6572665f 	.word	0x6572665f
  43449c:	6f762865 	.word	0x6f762865
  4344a0:	292a6469 	.word	0x292a6469
  4344a4:	00000000 	.word	0x00000000
  4344a8:	2f637273 	.word	0x2f637273
  4344ac:	65676465 	.word	0x65676465
  4344b0:	706d692d 	.word	0x706d692d
  4344b4:	65736c75 	.word	0x65736c75
  4344b8:	6764652f 	.word	0x6764652f
  4344bc:	6d692d65 	.word	0x6d692d65
  4344c0:	736c7570 	.word	0x736c7570
  4344c4:	64732d65 	.word	0x64732d65
  4344c8:	6c632f6b 	.word	0x6c632f6b
  4344cc:	69737361 	.word	0x69737361
  4344d0:	72656966 	.word	0x72656966
  4344d4:	5f69652f 	.word	0x5f69652f
  4344d8:	67696c61 	.word	0x67696c61
  4344dc:	5f64656e 	.word	0x5f64656e
  4344e0:	6c6c616d 	.word	0x6c6c616d
  4344e4:	682e636f 	.word	0x682e636f
  4344e8:	00000000 	.word	0x00000000
  4344ec:	696c6128 	.word	0x696c6128
  4344f0:	26206e67 	.word	0x26206e67
  4344f4:	6c612820 	.word	0x6c612820
  4344f8:	206e6769 	.word	0x206e6769
  4344fc:	2931202d 	.word	0x2931202d
  434500:	3d3d2029 	.word	0x3d3d2029
  434504:	00003020 	.word	0x00003020
  434508:	64696f76 	.word	0x64696f76
  43450c:	617b202a 	.word	0x617b202a
  434510:	796e6f6e 	.word	0x796e6f6e
  434514:	73756f6d 	.word	0x73756f6d
  434518:	653a3a7d 	.word	0x653a3a7d
  43451c:	6c615f69 	.word	0x6c615f69
  434520:	656e6769 	.word	0x656e6769
  434524:	61635f64 	.word	0x61635f64
  434528:	636f6c6c 	.word	0x636f6c6c
  43452c:	7a697328 	.word	0x7a697328
  434530:	2c745f65 	.word	0x2c745f65
  434534:	7a697320 	.word	0x7a697320
  434538:	29745f65 	.word	0x29745f65
  43453c:	00000000 	.word	0x00000000
  434540:	6c696146 	.word	0x6c696146
  434544:	74206465 	.word	0x74206465
  434548:	6e69206f 	.word	0x6e69206f
  43454c:	61697469 	.word	0x61697469
  434550:	657a696c 	.word	0x657a696c
  434554:	65687420 	.word	0x65687420
  434558:	646f6d20 	.word	0x646f6d20
  43455c:	28206c65 	.word	0x28206c65
  434560:	6f727265 	.word	0x6f727265
  434564:	6f632072 	.word	0x6f632072
  434568:	25206564 	.word	0x25206564
  43456c:	000a2964 	.word	0x000a2964
  434570:	74636576 	.word	0x74636576
  434574:	3a3a726f 	.word	0x3a3a726f
  434578:	725f4d5f 	.word	0x725f4d5f
  43457c:	6c6c6165 	.word	0x6c6c6165
  434580:	695f636f 	.word	0x695f636f
  434584:	7265736e 	.word	0x7265736e
  434588:	00000074 	.word	0x00000074
  43458c:	3a525245 	.word	0x3a525245
  434590:	756f5720 	.word	0x756f5720
  434594:	7720646c 	.word	0x7720646c
  434598:	65746972 	.word	0x65746972
  43459c:	74756f20 	.word	0x74756f20
  4345a0:	65646973 	.word	0x65646973
  4345a4:	61656620 	.word	0x61656620
  4345a8:	65727574 	.word	0x65727574
  4345ac:	66756220 	.word	0x66756220
  4345b0:	0a726566 	.word	0x0a726566
  4345b4:	00000000 	.word	0x00000000
  4345b8:	4f464e49 	.word	0x4f464e49
  4345bc:	00000000 	.word	0x00000000
  4345c0:	203a7325 	.word	0x203a7325
  4345c4:	00000000 	.word	0x00000000
  4345c8:	75706d49 	.word	0x75706d49
  4345cc:	2065736c 	.word	0x2065736c
  4345d0:	6e69616d 	.word	0x6e69616d
  4345d4:	6e696174 	.word	0x6e696174
  4345d8:	74732073 	.word	0x74732073
  4345dc:	2e657461 	.word	0x2e657461
  4345e0:	6c614320 	.word	0x6c614320
  4345e4:	7572206c 	.word	0x7572206c
  4345e8:	6c635f6e 	.word	0x6c635f6e
  4345ec:	69737361 	.word	0x69737361
  4345f0:	72656966 	.word	0x72656966
  4345f4:	696e695f 	.word	0x696e695f
  4345f8:	20292874 	.word	0x20292874
  4345fc:	72206f74 	.word	0x72206f74
  434600:	74657365 	.word	0x74657365
  434604:	61747320 	.word	0x61747320
  434608:	28206574 	.word	0x28206574
  43460c:	2e672e65 	.word	0x2e672e65
  434610:	20666920 	.word	0x20666920
  434614:	61746164 	.word	0x61746164
  434618:	72747320 	.word	0x72747320
  43461c:	206d6165 	.word	0x206d6165
  434620:	69207369 	.word	0x69207369
  434624:	7265746e 	.word	0x7265746e
  434628:	74707572 	.word	0x74707572
  43462c:	292e6465 	.word	0x292e6465
  434630:	0000000a 	.word	0x0000000a
  434634:	3a525245 	.word	0x3a525245
  434638:	69614620 	.word	0x69614620
  43463c:	2064656c 	.word	0x2064656c
  434640:	72206f74 	.word	0x72206f74
  434644:	44206e75 	.word	0x44206e75
  434648:	70205053 	.word	0x70205053
  43464c:	65636f72 	.word	0x65636f72
  434650:	28207373 	.word	0x28207373
  434654:	0a296425 	.word	0x0a296425
  434658:	00000000 	.word	0x00000000
  43465c:	74616546 	.word	0x74616546
  434660:	73657275 	.word	0x73657275
  434664:	64252820 	.word	0x64252820
  434668:	2e736d20 	.word	0x2e736d20
  43466c:	00203a29 	.word	0x00203a29
  434670:	6e6e7552 	.word	0x6e6e7552
  434674:	20676e69 	.word	0x20676e69
  434678:	75706d69 	.word	0x75706d69
  43467c:	2e65736c 	.word	0x2e65736c
  434680:	000a2e2e 	.word	0x000a2e2e
  434684:	3a525245 	.word	0x3a525245
  434688:	6e614320 	.word	0x6e614320
  43468c:	20746f6e 	.word	0x20746f6e
  434690:	646e6168 	.word	0x646e6168
  434694:	6920656c 	.word	0x6920656c
  434698:	7475706e 	.word	0x7475706e
  43469c:	70797420 	.word	0x70797420
  4346a0:	25282065 	.word	0x25282065
  4346a4:	000a2964 	.word	0x000a2964
  4346a8:	3a525245 	.word	0x3a525245
  4346ac:	706e6920 	.word	0x706e6920
  4346b0:	74207475 	.word	0x74207475
  4346b4:	6f736e65 	.word	0x6f736e65
  4346b8:	61682072 	.word	0x61682072
  4346bc:	69732073 	.word	0x69732073
  4346c0:	2520657a 	.word	0x2520657a
  4346c4:	79622064 	.word	0x79622064
  4346c8:	2c736574 	.word	0x2c736574
  4346cc:	74756220 	.word	0x74756220
  4346d0:	706e6920 	.word	0x706e6920
  4346d4:	6d207475 	.word	0x6d207475
  4346d8:	69727461 	.word	0x69727461
  4346dc:	61682078 	.word	0x61682078
  4346e0:	61682073 	.word	0x61682073
  4346e4:	69732073 	.word	0x69732073
  4346e8:	2520657a 	.word	0x2520657a
  4346ec:	79622064 	.word	0x79622064
  4346f0:	0a736574 	.word	0x0a736574
  4346f4:	00000000 	.word	0x00000000
  4346f8:	3a525245 	.word	0x3a525245
  4346fc:	74756f20 	.word	0x74756f20
  434700:	20747570 	.word	0x20747570
  434704:	736e6574 	.word	0x736e6574
  434708:	6820726f 	.word	0x6820726f
  43470c:	73207361 	.word	0x73207361
  434710:	20657a69 	.word	0x20657a69
  434714:	202c6425 	.word	0x202c6425
  434718:	20747562 	.word	0x20747562
  43471c:	75706e69 	.word	0x75706e69
  434720:	616d2074 	.word	0x616d2074
  434724:	78697274 	.word	0x78697274
  434728:	73616820 	.word	0x73616820
  43472c:	73616820 	.word	0x73616820
  434730:	7a697320 	.word	0x7a697320
  434734:	64252065 	.word	0x64252065
  434738:	0000000a 	.word	0x0000000a
  43473c:	3a525245 	.word	0x3a525245
  434740:	6e614320 	.word	0x6e614320
  434744:	20746f6e 	.word	0x20746f6e
  434748:	646e6168 	.word	0x646e6168
  43474c:	6f20656c 	.word	0x6f20656c
  434750:	75707475 	.word	0x75707475
  434754:	79742074 	.word	0x79742074
  434758:	28206570 	.word	0x28206570
  43475c:	0a296425 	.word	0x0a296425
  434760:	00000000 	.word	0x00000000
  434764:	74636576 	.word	0x74636576
  434768:	3a3a726f 	.word	0x3a3a726f
  43476c:	645f4d5f 	.word	0x645f4d5f
  434770:	75616665 	.word	0x75616665
  434774:	615f746c 	.word	0x615f746c
  434778:	6e657070 	.word	0x6e657070
  43477c:	00000064 	.word	0x00000064
  434780:	3a525245 	.word	0x3a525245
  434784:	626f4d20 	.word	0x626f4d20
  434788:	4e656c69 	.word	0x4e656c69
  43478c:	53207465 	.word	0x53207465
  434790:	69204453 	.word	0x69204453
  434794:	6f6e2073 	.word	0x6f6e2073
  434798:	75732074 	.word	0x75732074
  43479c:	726f7070 	.word	0x726f7070
  4347a0:	20646574 	.word	0x20646574
  4347a4:	45206e69 	.word	0x45206e69
  4347a8:	6f204e4f 	.word	0x6f204e4f
  4347ac:	65542072 	.word	0x65542072
  4347b0:	726f736e 	.word	0x726f736e
  4347b4:	776f6c46 	.word	0x776f6c46
  4347b8:	74694c20 	.word	0x74694c20
  4347bc:	694d2065 	.word	0x694d2065
  4347c0:	0a6f7263 	.word	0x0a6f7263
  4347c4:	00000000 	.word	0x00000000
  4347c8:	3a525245 	.word	0x3a525245
  4347cc:	766e4920 	.word	0x766e4920
  4347d0:	64696c61 	.word	0x64696c61
  4347d4:	74756f20 	.word	0x74756f20
  4347d8:	20747570 	.word	0x20747570
  4347dc:	65707974 	.word	0x65707974
  4347e0:	64252820 	.word	0x64252820
  4347e4:	6f662029 	.word	0x6f662029
  4347e8:	4f592072 	.word	0x4f592072
  4347ec:	35764f4c 	.word	0x35764f4c
  4347f0:	73616c20 	.word	0x73616c20
  4347f4:	616c2074 	.word	0x616c2074
  4347f8:	0a726579 	.word	0x0a726579
  4347fc:	00000000 	.word	0x00000000
  434800:	3a525245 	.word	0x3a525245
  434804:	4c4f5920 	.word	0x4c4f5920
  434808:	6420584f 	.word	0x6420584f
  43480c:	2073656f 	.word	0x2073656f
  434810:	20746f6e 	.word	0x20746f6e
  434814:	70707573 	.word	0x70707573
  434818:	2074726f 	.word	0x2074726f
  43481c:	6e617571 	.word	0x6e617571
  434820:	657a6974 	.word	0x657a6974
  434824:	6e692064 	.word	0x6e692064
  434828:	65726566 	.word	0x65726566
  43482c:	0a65636e 	.word	0x0a65636e
  434830:	00000000 	.word	0x00000000
  434834:	3a525245 	.word	0x3a525245
  434838:	4c4f5920 	.word	0x4c4f5920
  43483c:	2037564f 	.word	0x2037564f
  434840:	73656f64 	.word	0x73656f64
  434844:	746f6e20 	.word	0x746f6e20
  434848:	70757320 	.word	0x70757320
  43484c:	74726f70 	.word	0x74726f70
  434850:	61757120 	.word	0x61757120
  434854:	7a69746e 	.word	0x7a69746e
  434858:	69206465 	.word	0x69206465
  43485c:	7265666e 	.word	0x7265666e
  434860:	65636e65 	.word	0x65636e65
  434864:	0000000a 	.word	0x0000000a
  434868:	3a525245 	.word	0x3a525245
  43486c:	766e4920 	.word	0x766e4920
  434870:	64696c61 	.word	0x64696c61
  434874:	74756f20 	.word	0x74756f20
  434878:	20747570 	.word	0x20747570
  43487c:	65707974 	.word	0x65707974
  434880:	64252820 	.word	0x64252820
  434884:	6f662029 	.word	0x6f662029
  434888:	41542072 	.word	0x41542072
  43488c:	616c204f 	.word	0x616c204f
  434890:	6c207473 	.word	0x6c207473
  434894:	72657961 	.word	0x72657961
  434898:	0000000a 	.word	0x0000000a
  43489c:	3a525245 	.word	0x3a525245
  4348a0:	766e4920 	.word	0x766e4920
  4348a4:	64696c61 	.word	0x64696c61
  4348a8:	74756f20 	.word	0x74756f20
  4348ac:	20747570 	.word	0x20747570
  4348b0:	65707974 	.word	0x65707974
  4348b4:	64252820 	.word	0x64252820
  4348b8:	6f662029 	.word	0x6f662029
  4348bc:	41542072 	.word	0x41542072
  4348c0:	4f59204f 	.word	0x4f59204f
  4348c4:	33764f4c 	.word	0x33764f4c
  4348c8:	79616c20 	.word	0x79616c20
  4348cc:	000a7265 	.word	0x000a7265
  4348d0:	3a525245 	.word	0x3a525245
  4348d4:	766e4920 	.word	0x766e4920
  4348d8:	64696c61 	.word	0x64696c61
  4348dc:	74756f20 	.word	0x74756f20
  4348e0:	20747570 	.word	0x20747570
  4348e4:	65707974 	.word	0x65707974
  4348e8:	64252820 	.word	0x64252820
  4348ec:	6f662029 	.word	0x6f662029
  4348f0:	41542072 	.word	0x41542072
  4348f4:	4f59204f 	.word	0x4f59204f
  4348f8:	34764f4c 	.word	0x34764f4c
  4348fc:	79616c20 	.word	0x79616c20
  434900:	000a7265 	.word	0x000a7265
  434904:	3a525245 	.word	0x3a525245
  434908:	736e5520 	.word	0x736e5520
  43490c:	6f707075 	.word	0x6f707075
  434910:	64657472 	.word	0x64657472
  434914:	6a626f20 	.word	0x6a626f20
  434918:	20746365 	.word	0x20746365
  43491c:	65746564 	.word	0x65746564
  434920:	6f697463 	.word	0x6f697463
  434924:	616c206e 	.word	0x616c206e
  434928:	6c207473 	.word	0x6c207473
  43492c:	72657961 	.word	0x72657961
  434930:	64252820 	.word	0x64252820
  434934:	00000a29 	.word	0x00000a29
  434938:	093a7325 	.word	0x093a7325
  43493c:	00000000 	.word	0x00000000
  434940:	64657250 	.word	0x64657250
  434944:	69746369 	.word	0x69746369
  434948:	20736e6f 	.word	0x20736e6f
  43494c:	6d697428 	.word	0x6d697428
  434950:	25203a65 	.word	0x25203a65
  434954:	736d2064 	.word	0x736d2064
  434958:	0a3a292e 	.word	0x0a3a292e
  43495c:	00000000 	.word	0x00000000
  434960:	65726f43 	.word	0x65726f43
  434964:	696e6920 	.word	0x696e6920
  434968:	61662074 	.word	0x61662074
  43496c:	64656c69 	.word	0x64656c69
  434970:	00000a2e 	.word	0x00000a2e
  434974:	65776f50 	.word	0x65776f50
  434978:	6f632072 	.word	0x6f632072
  43497c:	6769666e 	.word	0x6769666e
  434980:	69616620 	.word	0x69616620
  434984:	2e64656c 	.word	0x2e64656c
  434988:	0000000a 	.word	0x0000000a
  43498c:	656d6954 	.word	0x656d6954
  434990:	6e492072 	.word	0x6e492072
  434994:	46207469 	.word	0x46207469
  434998:	656c6961 	.word	0x656c6961
  43499c:	00000a64 	.word	0x00000a64
  4349a0:	3a525245 	.word	0x3a525245
  4349a4:	69614620 	.word	0x69614620
  4349a8:	2064656c 	.word	0x2064656c
  4349ac:	72206f74 	.word	0x72206f74
  4349b0:	63206e75 	.word	0x63206e75
  4349b4:	7373616c 	.word	0x7373616c
  4349b8:	65696669 	.word	0x65696669
  4349bc:	25282072 	.word	0x25282072
  4349c0:	000a2964 	.word	0x000a2964
  4349c4:	69626d41 	.word	0x69626d41
  4349c8:	00000071 	.word	0x00000071
  4349cc:	65636146 	.word	0x65636146
  4349d0:	74656420 	.word	0x74656420
  4349d4:	69746365 	.word	0x69746365
  4349d8:	2d206e6f 	.word	0x2d206e6f
  4349dc:	4d4f4620 	.word	0x4d4f4620
  4349e0:	202d204f 	.word	0x202d204f
  4349e4:	65626d45 	.word	0x65626d45
  4349e8:	64656464 	.word	0x64656464
  4349ec:	6c6e4f20 	.word	0x6c6e4f20
  4349f0:	20656e69 	.word	0x20656e69
  4349f4:	666e6f43 	.word	0x666e6f43
  4349f8:	6e657265 	.word	0x6e657265
  4349fc:	00006563 	.word	0x00006563
  434a00:	67616d49 	.word	0x67616d49
  434a04:	61642065 	.word	0x61642065
  434a08:	202c6174 	.word	0x202c6174
  434a0c:	67616d49 	.word	0x67616d49
  434a10:	4f202c65 	.word	0x4f202c65
  434a14:	63656a62 	.word	0x63656a62
  434a18:	65442074 	.word	0x65442074
  434a1c:	74636574 	.word	0x74636574
  434a20:	206e6f69 	.word	0x206e6f69
  434a24:	616d4928 	.word	0x616d4928
  434a28:	29736567 	.word	0x29736567
  434a2c:	20332320 	.word	0x20332320
  434a30:	6f6c4328 	.word	0x6f6c4328
  434a34:	6f20656e 	.word	0x6f20656e
  434a38:	65762066 	.word	0x65762066
  434a3c:	6f697372 	.word	0x6f697372
  434a40:	3223206e 	.word	0x3223206e
  434a44:	00000029 	.word	0x00000029
  434a48:	67616d69 	.word	0x67616d69
  434a4c:	00000065 	.word	0x00000065
  434a50:	65636166 	.word	0x65636166
  434a54:	00000000 	.word	0x00000000
  434a58:	6f707865 	.word	0x6f707865
  434a5c:	746e656e 	.word	0x746e656e
  434a60:	203d3e20 	.word	0x203d3e20
  434a64:	00000030 	.word	0x00000030
  434a68:	65746e49 	.word	0x65746e49
  434a6c:	54726567 	.word	0x54726567
  434a70:	20657079 	.word	0x20657079
  434a74:	6d6d6567 	.word	0x6d6d6567
  434a78:	70776f6c 	.word	0x70776f6c
  434a7c:	6f523a3a 	.word	0x6f523a3a
  434a80:	69646e75 	.word	0x69646e75
  434a84:	6944676e 	.word	0x6944676e
  434a88:	65646976 	.word	0x65646976
  434a8c:	4f507942 	.word	0x4f507942
  434a90:	6e492854 	.word	0x6e492854
  434a94:	65676574 	.word	0x65676574
  434a98:	70795472 	.word	0x70795472
  434a9c:	69202c65 	.word	0x69202c65
  434aa0:	2029746e 	.word	0x2029746e
  434aa4:	7469775b 	.word	0x7469775b
  434aa8:	6e492068 	.word	0x6e492068
  434aac:	65676574 	.word	0x65676574
  434ab0:	70795472 	.word	0x70795472
  434ab4:	203d2065 	.word	0x203d2065
  434ab8:	676e6f6c 	.word	0x676e6f6c
  434abc:	746e6920 	.word	0x746e6920
  434ac0:	0000005d 	.word	0x0000005d
  434ac4:	2f637273 	.word	0x2f637273
  434ac8:	65676465 	.word	0x65676465
  434acc:	706d692d 	.word	0x706d692d
  434ad0:	65736c75 	.word	0x65736c75
  434ad4:	6764652f 	.word	0x6764652f
  434ad8:	6d692d65 	.word	0x6d692d65
  434adc:	736c7570 	.word	0x736c7570
  434ae0:	64732d65 	.word	0x64732d65
  434ae4:	68742f6b 	.word	0x68742f6b
  434ae8:	5f647269 	.word	0x5f647269
  434aec:	74726170 	.word	0x74726170
  434af0:	65672f79 	.word	0x65672f79
  434af4:	6f6c6d6d 	.word	0x6f6c6d6d
  434af8:	662f7077 	.word	0x662f7077
  434afc:	64657869 	.word	0x64657869
  434b00:	6e696f70 	.word	0x6e696f70
  434b04:	69662f74 	.word	0x69662f74
  434b08:	70646578 	.word	0x70646578
  434b0c:	746e696f 	.word	0x746e696f
  434b10:	0000682e 	.word	0x0000682e
  434b14:	6f707865 	.word	0x6f707865
  434b18:	746e656e 	.word	0x746e656e
  434b1c:	203d3c20 	.word	0x203d3c20
  434b20:	00003133 	.word	0x00003133
  434b24:	00006625 	.word	0x00006625
  434b28:	3a525245 	.word	0x3a525245
  434b2c:	74654720 	.word	0x74654720
  434b30:	736e6554 	.word	0x736e6554
  434b34:	6320726f 	.word	0x6320726f
  434b38:	656c6c61 	.word	0x656c6c61
  434b3c:	65622064 	.word	0x65622064
  434b40:	646e6f79 	.word	0x646e6f79
  434b44:	58414d20 	.word	0x58414d20
  434b48:	4c46545f 	.word	0x4c46545f
  434b4c:	4156455f 	.word	0x4156455f
  434b50:	4f435f4c 	.word	0x4f435f4c
  434b54:	20544e55 	.word	0x20544e55
  434b58:	29642528 	.word	0x29642528
  434b5c:	0000000a 	.word	0x0000000a
  434b60:	3a525245 	.word	0x3a525245
  434b64:	69614620 	.word	0x69614620
  434b68:	2064656c 	.word	0x2064656c
  434b6c:	61206f74 	.word	0x61206f74
  434b70:	636f6c6c 	.word	0x636f6c6c
  434b74:	20657461 	.word	0x20657461
  434b78:	73726570 	.word	0x73726570
  434b7c:	65747369 	.word	0x65747369
  434b80:	6220746e 	.word	0x6220746e
  434b84:	65666675 	.word	0x65666675
  434b88:	666f2072 	.word	0x666f2072
  434b8c:	7a697320 	.word	0x7a697320
  434b90:	64252065 	.word	0x64252065
  434b94:	6f64202c 	.word	0x6f64202c
  434b98:	6e207365 	.word	0x6e207365
  434b9c:	6620746f 	.word	0x6620746f
  434ba0:	69207469 	.word	0x69207469
  434ba4:	6574206e 	.word	0x6574206e
  434ba8:	726f736e 	.word	0x726f736e
  434bac:	65726120 	.word	0x65726120
  434bb0:	6120616e 	.word	0x6120616e
  434bb4:	7220646e 	.word	0x7220646e
  434bb8:	68636165 	.word	0x68636165
  434bbc:	45206465 	.word	0x45206465
  434bc0:	414d5f49 	.word	0x414d5f49
  434bc4:	564f5f58 	.word	0x564f5f58
  434bc8:	4c465245 	.word	0x4c465245
  434bcc:	425f574f 	.word	0x425f574f
  434bd0:	45464655 	.word	0x45464655
  434bd4:	4f435f52 	.word	0x4f435f52
  434bd8:	0a544e55 	.word	0x0a544e55
  434bdc:	00000000 	.word	0x00000000
  434be0:	3a525245 	.word	0x3a525245
  434be4:	69614620 	.word	0x69614620
  434be8:	2064656c 	.word	0x2064656c
  434bec:	61206f74 	.word	0x61206f74
  434bf0:	636f6c6c 	.word	0x636f6c6c
  434bf4:	20657461 	.word	0x20657461
  434bf8:	73726570 	.word	0x73726570
  434bfc:	65747369 	.word	0x65747369
  434c00:	6220746e 	.word	0x6220746e
  434c04:	65666675 	.word	0x65666675
  434c08:	666f2072 	.word	0x666f2072
  434c0c:	7a697320 	.word	0x7a697320
  434c10:	64252065 	.word	0x64252065
  434c14:	0000000a 	.word	0x0000000a
  434c18:	3a525245 	.word	0x3a525245
  434c1c:	74654720 	.word	0x74654720
  434c20:	736e6554 	.word	0x736e6554
  434c24:	6320726f 	.word	0x6320726f
  434c28:	656c6c61 	.word	0x656c6c61
  434c2c:	65622064 	.word	0x65622064
  434c30:	646e6f79 	.word	0x646e6f79
  434c34:	58414d20 	.word	0x58414d20
  434c38:	4c46545f 	.word	0x4c46545f
  434c3c:	4e45545f 	.word	0x4e45545f
  434c40:	5f524f53 	.word	0x5f524f53
  434c44:	4e554f43 	.word	0x4e554f43
  434c48:	25282054 	.word	0x25282054
  434c4c:	000a2964 	.word	0x000a2964
  434c50:	3a525245 	.word	0x3a525245
  434c54:	69614620 	.word	0x69614620
  434c58:	2064656c 	.word	0x2064656c
  434c5c:	61206f74 	.word	0x61206f74
  434c60:	636f6c6c 	.word	0x636f6c6c
  434c64:	20657461 	.word	0x20657461
  434c68:	61726373 	.word	0x61726373
  434c6c:	20686374 	.word	0x20686374
  434c70:	66667562 	.word	0x66667562
  434c74:	6f207265 	.word	0x6f207265
  434c78:	69732066 	.word	0x69732066
  434c7c:	2520657a 	.word	0x2520657a
  434c80:	72202c64 	.word	0x72202c64
  434c84:	68636165 	.word	0x68636165
  434c88:	45206465 	.word	0x45206465
  434c8c:	414d5f49 	.word	0x414d5f49
  434c90:	43535f58 	.word	0x43535f58
  434c94:	43544152 	.word	0x43544152
  434c98:	55425f48 	.word	0x55425f48
  434c9c:	52454646 	.word	0x52454646
  434ca0:	554f435f 	.word	0x554f435f
  434ca4:	000a544e 	.word	0x000a544e
  434ca8:	3a525245 	.word	0x3a525245
  434cac:	69614620 	.word	0x69614620
  434cb0:	2064656c 	.word	0x2064656c
  434cb4:	61206f74 	.word	0x61206f74
  434cb8:	636f6c6c 	.word	0x636f6c6c
  434cbc:	20657461 	.word	0x20657461
  434cc0:	61726373 	.word	0x61726373
  434cc4:	20686374 	.word	0x20686374
  434cc8:	66667562 	.word	0x66667562
  434ccc:	6f207265 	.word	0x6f207265
  434cd0:	69732066 	.word	0x69732066
  434cd4:	2520657a 	.word	0x2520657a
  434cd8:	00000a64 	.word	0x00000a64
  434cdc:	3a525245 	.word	0x3a525245
  434ce0:	6e657420 	.word	0x6e657420
  434ce4:	20726f73 	.word	0x20726f73
  434ce8:	6e657261 	.word	0x6e657261
  434cec:	73692061 	.word	0x73692061
  434cf0:	6f6f7420 	.word	0x6f6f7420
  434cf4:	616d7320 	.word	0x616d7320
  434cf8:	202c6c6c 	.word	0x202c6c6c
  434cfc:	73656f64 	.word	0x73656f64
  434d00:	746f6e20 	.word	0x746f6e20
  434d04:	74696620 	.word	0x74696620
  434d08:	646f6d20 	.word	0x646f6d20
  434d0c:	2d206c65 	.word	0x2d206c65
  434d10:	65766520 	.word	0x65766520
  434d14:	6977206e 	.word	0x6977206e
  434d18:	756f6874 	.word	0x756f6874
  434d1c:	63732074 	.word	0x63732074
  434d20:	63746172 	.word	0x63746172
  434d24:	75622068 	.word	0x75622068
  434d28:	72656666 	.word	0x72656666
  434d2c:	00000a73 	.word	0x00000a73
  434d30:	7566202c 	.word	0x7566202c
  434d34:	6974636e 	.word	0x6974636e
  434d38:	203a6e6f 	.word	0x203a6e6f
  434d3c:	00000000 	.word	0x00000000
  434d40:	65737361 	.word	0x65737361
  434d44:	6f697472 	.word	0x6f697472
  434d48:	2522206e 	.word	0x2522206e
  434d4c:	66202273 	.word	0x66202273
  434d50:	656c6961 	.word	0x656c6961
  434d54:	66203a64 	.word	0x66203a64
  434d58:	20656c69 	.word	0x20656c69
  434d5c:	22732522 	.word	0x22732522
  434d60:	696c202c 	.word	0x696c202c
  434d64:	2520656e 	.word	0x2520656e
  434d68:	25732564 	.word	0x25732564
  434d6c:	00000a73 	.word	0x00000a73
  434d70:	33323130 	.word	0x33323130
  434d74:	37363534 	.word	0x37363534
  434d78:	42413938 	.word	0x42413938
  434d7c:	46454443 	.word	0x46454443
  434d80:	00000000 	.word	0x00000000
  434d84:	33323130 	.word	0x33323130
  434d88:	37363534 	.word	0x37363534
  434d8c:	62613938 	.word	0x62613938
  434d90:	66656463 	.word	0x66656463
  434d94:	00000000 	.word	0x00000000
  434d98:	6c756e28 	.word	0x6c756e28
  434d9c:	0000296c 	.word	0x0000296c
  434da0:	435f434c 	.word	0x435f434c
  434da4:	414c4c4f 	.word	0x414c4c4f
  434da8:	00004554 	.word	0x00004554
  434dac:	435f434c 	.word	0x435f434c
  434db0:	45505954 	.word	0x45505954
  434db4:	00000000 	.word	0x00000000
  434db8:	4d5f434c 	.word	0x4d5f434c
  434dbc:	54454e4f 	.word	0x54454e4f
  434dc0:	00595241 	.word	0x00595241
  434dc4:	4e5f434c 	.word	0x4e5f434c
  434dc8:	52454d55 	.word	0x52454d55
  434dcc:	00004349 	.word	0x00004349
  434dd0:	545f434c 	.word	0x545f434c
  434dd4:	00454d49 	.word	0x00454d49
  434dd8:	4d5f434c 	.word	0x4d5f434c
  434ddc:	41535345 	.word	0x41535345
  434de0:	00534547 	.word	0x00534547
  434de4:	00464e49 	.word	0x00464e49
  434de8:	00666e69 	.word	0x00666e69
  434dec:	004e414e 	.word	0x004e414e
  434df0:	006e616e 	.word	0x006e616e
  434df4:	69666e49 	.word	0x69666e49
  434df8:	7974696e 	.word	0x7974696e
  434dfc:	00000000 	.word	0x00000000
  434e00:	004e614e 	.word	0x004e614e
  434e04:	6c6c6142 	.word	0x6c6c6142
  434e08:	7320636f 	.word	0x7320636f
  434e0c:	65636375 	.word	0x65636375
  434e10:	64656465 	.word	0x64656465
  434e14:	00000000 	.word	0x00000000
  434e18:	6c6f562f 	.word	0x6c6f562f
  434e1c:	73656d75 	.word	0x73656d75
  434e20:	7461642f 	.word	0x7461642f
  434e24:	656a2f61 	.word	0x656a2f61
  434e28:	6e696b6e 	.word	0x6e696b6e
  434e2c:	6f772f73 	.word	0x6f772f73
  434e30:	70736b72 	.word	0x70736b72
  434e34:	2f656361 	.word	0x2f656361
  434e38:	2d554e47 	.word	0x2d554e47
  434e3c:	6c6f6f74 	.word	0x6c6f6f74
  434e40:	69616863 	.word	0x69616863
  434e44:	72612f6e 	.word	0x72612f6e
  434e48:	33312d6d 	.word	0x33312d6d
  434e4c:	6372732f 	.word	0x6372732f
  434e50:	77656e2f 	.word	0x77656e2f
  434e54:	2d62696c 	.word	0x2d62696c
  434e58:	77677963 	.word	0x77677963
  434e5c:	6e2f6e69 	.word	0x6e2f6e69
  434e60:	696c7765 	.word	0x696c7765
  434e64:	696c2f62 	.word	0x696c2f62
  434e68:	732f6362 	.word	0x732f6362
  434e6c:	696c6474 	.word	0x696c6474
  434e70:	74642f62 	.word	0x74642f62
  434e74:	632e616f 	.word	0x632e616f
  434e78:	00000000 	.word	0x00000000
  434e7c:	6c6f562f 	.word	0x6c6f562f
  434e80:	73656d75 	.word	0x73656d75
  434e84:	7461642f 	.word	0x7461642f
  434e88:	656a2f61 	.word	0x656a2f61
  434e8c:	6e696b6e 	.word	0x6e696b6e
  434e90:	6f772f73 	.word	0x6f772f73
  434e94:	70736b72 	.word	0x70736b72
  434e98:	2f656361 	.word	0x2f656361
  434e9c:	2d554e47 	.word	0x2d554e47
  434ea0:	6c6f6f74 	.word	0x6c6f6f74
  434ea4:	69616863 	.word	0x69616863
  434ea8:	72612f6e 	.word	0x72612f6e
  434eac:	33312d6d 	.word	0x33312d6d
  434eb0:	6372732f 	.word	0x6372732f
  434eb4:	77656e2f 	.word	0x77656e2f
  434eb8:	2d62696c 	.word	0x2d62696c
  434ebc:	77677963 	.word	0x77677963
  434ec0:	6e2f6e69 	.word	0x6e2f6e69
  434ec4:	696c7765 	.word	0x696c7765
  434ec8:	696c2f62 	.word	0x696c2f62
  434ecc:	732f6362 	.word	0x732f6362
  434ed0:	696c6474 	.word	0x696c6474
  434ed4:	706d2f62 	.word	0x706d2f62
  434ed8:	2e636572 	.word	0x2e636572
  434edc:	00000063 	.word	0x00000063
  434ee0:	74746553 	.word	0x74746553
  434ee4:	20676e69 	.word	0x20676e69
  434ee8:	20555043 	.word	0x20555043
  434eec:	66726550 	.word	0x66726550
  434ef0:	646f6d20 	.word	0x646f6d20
  434ef4:	6f742065 	.word	0x6f742065
  434ef8:	67694820 	.word	0x67694820
  434efc:	65502068 	.word	0x65502068
  434f00:	726f6672 	.word	0x726f6672
  434f04:	636e616d 	.word	0x636e616d
  434f08:	00000a65 	.word	0x00000a65
  434f0c:	20746553 	.word	0x20746553
  434f10:	20555043 	.word	0x20555043
  434f14:	66726550 	.word	0x66726550
  434f18:	646f6d20 	.word	0x646f6d20
  434f1c:	6f742065 	.word	0x6f742065
  434f20:	67694820 	.word	0x67694820
  434f24:	65502068 	.word	0x65502068
  434f28:	726f6672 	.word	0x726f6672
  434f2c:	636e616d 	.word	0x636e616d
  434f30:	65722065 	.word	0x65722065
  434f34:	203d2074 	.word	0x203d2074
  434f38:	000a6425 	.word	0x000a6425
  434f3c:	74746553 	.word	0x74746553
  434f40:	20676e69 	.word	0x20676e69
  434f44:	20555043 	.word	0x20555043
  434f48:	66726550 	.word	0x66726550
  434f4c:	646f6d20 	.word	0x646f6d20
  434f50:	6f742065 	.word	0x6f742065
  434f54:	776f4c20 	.word	0x776f4c20
  434f58:	776f5020 	.word	0x776f5020
  434f5c:	000a7265 	.word	0x000a7265
  434f60:	20746553 	.word	0x20746553
  434f64:	20555043 	.word	0x20555043
  434f68:	66726550 	.word	0x66726550
  434f6c:	646f6d20 	.word	0x646f6d20
  434f70:	6f742065 	.word	0x6f742065
  434f74:	776f4c20 	.word	0x776f4c20
  434f78:	776f5020 	.word	0x776f5020
  434f7c:	72207265 	.word	0x72207265
  434f80:	3d207465 	.word	0x3d207465
  434f84:	0a642520 	.word	0x0a642520
  434f88:	00000000 	.word	0x00000000
  434f8c:	20746553 	.word	0x20746553
  434f90:	20555043 	.word	0x20555043
  434f94:	66726550 	.word	0x66726550
  434f98:	646f6d20 	.word	0x646f6d20
  434f9c:	61662065 	.word	0x61662065
  434fa0:	64656c69 	.word	0x64656c69
  434fa4:	0000002e 	.word	0x0000002e
  434fa8:	4e524157 	.word	0x4e524157
  434fac:	20474e49 	.word	0x20474e49
  434fb0:	706d6554 	.word	0x706d6554
  434fb4:	6e206f43 	.word	0x6e206f43
  434fb8:	7320746f 	.word	0x7320746f
  434fbc:	6f707075 	.word	0x6f707075
  434fc0:	64657472 	.word	0x64657472
  434fc4:	00000a2e 	.word	0x00000a2e
  434fc8:	6c696146 	.word	0x6c696146
  434fcc:	74206465 	.word	0x74206465
  434fd0:	6f63206f 	.word	0x6f63206f
  434fd4:	6769666e 	.word	0x6769666e
  434fd8:	20657275 	.word	0x20657275
  434fdc:	454d4954 	.word	0x454d4954
  434fe0:	2c642552 	.word	0x2c642552
  434fe4:	74657220 	.word	0x74657220
  434fe8:	206e7275 	.word	0x206e7275
  434fec:	756c6176 	.word	0x756c6176
  434ff0:	64253d65 	.word	0x64253d65
  434ff4:	00000a0d 	.word	0x00000a0d
  434ff8:	5f646162 	.word	0x5f646162
  434ffc:	636e7566 	.word	0x636e7566
  435000:	6e6f6974 	.word	0x6e6f6974
  435004:	6c61635f 	.word	0x6c61635f
  435008:	0000006c 	.word	0x0000006c
  43500c:	42494c47 	.word	0x42494c47
  435010:	5f585843 	.word	0x5f585843
  435014:	414e5554 	.word	0x414e5554
  435018:	53454c42 	.word	0x53454c42
  43501c:	00000000 	.word	0x00000000
  435020:	5f6a626f 	.word	0x5f6a626f
  435024:	657a6973 	.word	0x657a6973
  435028:	00000000 	.word	0x00000000
  43502c:	5f6a626f 	.word	0x5f6a626f
  435030:	6e756f63 	.word	0x6e756f63
  435034:	00000074 	.word	0x00000074
  435038:	62696c67 	.word	0x62696c67
  43503c:	2e787863 	.word	0x2e787863
  435040:	705f6865 	.word	0x705f6865
  435044:	006c6f6f 	.word	0x006c6f6f
  435048:	3a647473 	.word	0x3a647473
  43504c:	6378653a 	.word	0x6378653a
  435050:	69747065 	.word	0x69747065
  435054:	00006e6f 	.word	0x00006e6f
  435058:	3a647473 	.word	0x3a647473
  43505c:	6461623a 	.word	0x6461623a
  435060:	6378655f 	.word	0x6378655f
  435064:	69747065 	.word	0x69747065
  435068:	00006e6f 	.word	0x00006e6f
  43506c:	6d726574 	.word	0x6d726574
  435070:	74616e69 	.word	0x74616e69
  435074:	61632065 	.word	0x61632065
  435078:	64656c6c 	.word	0x64656c6c
  43507c:	63657220 	.word	0x63657220
  435080:	69737275 	.word	0x69737275
  435084:	796c6576 	.word	0x796c6576
  435088:	0000000a 	.word	0x0000000a
  43508c:	6d726574 	.word	0x6d726574
  435090:	74616e69 	.word	0x74616e69
  435094:	61632065 	.word	0x61632065
  435098:	64656c6c 	.word	0x64656c6c
  43509c:	74666120 	.word	0x74666120
  4350a0:	74207265 	.word	0x74207265
  4350a4:	776f7268 	.word	0x776f7268
  4350a8:	20676e69 	.word	0x20676e69
  4350ac:	69206e61 	.word	0x69206e61
  4350b0:	6174736e 	.word	0x6174736e
  4350b4:	2065636e 	.word	0x2065636e
  4350b8:	2720666f 	.word	0x2720666f
  4350bc:	00000000 	.word	0x00000000
  4350c0:	00000a27 	.word	0x00000a27
  4350c4:	6d726574 	.word	0x6d726574
  4350c8:	74616e69 	.word	0x74616e69
  4350cc:	61632065 	.word	0x61632065
  4350d0:	64656c6c 	.word	0x64656c6c
  4350d4:	74697720 	.word	0x74697720
  4350d8:	74756f68 	.word	0x74756f68
  4350dc:	206e6120 	.word	0x206e6120
  4350e0:	69746361 	.word	0x69746361
  4350e4:	65206576 	.word	0x65206576
  4350e8:	70656378 	.word	0x70656378
  4350ec:	6e6f6974 	.word	0x6e6f6974
  4350f0:	0000000a 	.word	0x0000000a
  4350f4:	68772020 	.word	0x68772020
  4350f8:	29287461 	.word	0x29287461
  4350fc:	0020203a 	.word	0x0020203a
  435100:	69736162 	.word	0x69736162
  435104:	74735f63 	.word	0x74735f63
  435108:	676e6972 	.word	0x676e6972
  43510c:	535f3a3a 	.word	0x535f3a3a
  435110:	6e6f635f 	.word	0x6e6f635f
  435114:	75727473 	.word	0x75727473
  435118:	6e207463 	.word	0x6e207463
  43511c:	206c6c75 	.word	0x206c6c75
  435120:	20746f6e 	.word	0x20746f6e
  435124:	696c6176 	.word	0x696c6176
  435128:	00000064 	.word	0x00000064
  43512c:	69736162 	.word	0x69736162
  435130:	74735f63 	.word	0x74735f63
  435134:	676e6972 	.word	0x676e6972
  435138:	535f3a3a 	.word	0x535f3a3a
  43513c:	6572635f 	.word	0x6572635f
  435140:	00657461 	.word	0x00657461
  435144:	00006425 	.word	0x00006425
  435148:	4f4c475f 	.word	0x4f4c475f
  43514c:	5f4c4142 	.word	0x5f4c4142
  435150:	00000000 	.word	0x00000000
  435154:	6f6e6128 	.word	0x6f6e6128
  435158:	6f6d796e 	.word	0x6f6d796e
  43515c:	6e207375 	.word	0x6e207375
  435160:	73656d61 	.word	0x73656d61
  435164:	65636170 	.word	0x65636170
  435168:	00000029 	.word	0x00000029
  43516c:	6f747561 	.word	0x6f747561
  435170:	00000000 	.word	0x00000000
  435174:	6c636564 	.word	0x6c636564
  435178:	65707974 	.word	0x65707974
  43517c:	74756128 	.word	0x74756128
  435180:	0000296f 	.word	0x0000296f
  435184:	69727473 	.word	0x69727473
  435188:	6c20676e 	.word	0x6c20676e
  43518c:	72657469 	.word	0x72657469
  435190:	00006c61 	.word	0x00006c61
  435194:	00647473 	.word	0x00647473
  435198:	6c636564 	.word	0x6c636564
  43519c:	65707974 	.word	0x65707974
  4351a0:	6c756e28 	.word	0x6c756e28
  4351a4:	7274706c 	.word	0x7274706c
  4351a8:	00000029 	.word	0x00000029
  4351ac:	6962615b 	.word	0x6962615b
  4351b0:	0000003a 	.word	0x0000003a
  4351b4:	0000202c 	.word	0x0000202c
  4351b8:	00003a3a 	.word	0x00003a3a
  4351bc:	6665647b 	.word	0x6665647b
  4351c0:	746c7561 	.word	0x746c7561
  4351c4:	67726120 	.word	0x67726120
  4351c8:	00000023 	.word	0x00000023
  4351cc:	003a3a7d 	.word	0x003a3a7d
  4351d0:	6f747561 	.word	0x6f747561
  4351d4:	0000003a 	.word	0x0000003a
  4351d8:	706d6574 	.word	0x706d6574
  4351dc:	6574616c 	.word	0x6574616c
  4351e0:	72617020 	.word	0x72617020
  4351e4:	74656d61 	.word	0x74656d61
  4351e8:	6f207265 	.word	0x6f207265
  4351ec:	63656a62 	.word	0x63656a62
  4351f0:	6f662074 	.word	0x6f662074
  4351f4:	00002072 	.word	0x00002072
  4351f8:	74696e69 	.word	0x74696e69
  4351fc:	696c6169 	.word	0x696c6169
  435200:	2072657a 	.word	0x2072657a
  435204:	20726f66 	.word	0x20726f66
  435208:	75646f6d 	.word	0x75646f6d
  43520c:	0020656c 	.word	0x0020656c
  435210:	62617476 	.word	0x62617476
  435214:	6620656c 	.word	0x6620656c
  435218:	0020726f 	.word	0x0020726f
  43521c:	20545456 	.word	0x20545456
  435220:	20726f66 	.word	0x20726f66
  435224:	00000000 	.word	0x00000000
  435228:	736e6f63 	.word	0x736e6f63
  43522c:	63757274 	.word	0x63757274
  435230:	6e6f6974 	.word	0x6e6f6974
  435234:	61747620 	.word	0x61747620
  435238:	20656c62 	.word	0x20656c62
  43523c:	20726f66 	.word	0x20726f66
  435240:	00000000 	.word	0x00000000
  435244:	2d6e692d 	.word	0x2d6e692d
  435248:	00000000 	.word	0x00000000
  43524c:	65707974 	.word	0x65707974
  435250:	6f666e69 	.word	0x6f666e69
  435254:	726f6620 	.word	0x726f6620
  435258:	00000020 	.word	0x00000020
  43525c:	65707974 	.word	0x65707974
  435260:	6f666e69 	.word	0x6f666e69
  435264:	6d616e20 	.word	0x6d616e20
  435268:	6f662065 	.word	0x6f662065
  43526c:	00002072 	.word	0x00002072
  435270:	65707974 	.word	0x65707974
  435274:	6f666e69 	.word	0x6f666e69
  435278:	206e6620 	.word	0x206e6620
  43527c:	20726f66 	.word	0x20726f66
  435280:	00000000 	.word	0x00000000
  435284:	2d6e6f6e 	.word	0x2d6e6f6e
  435288:	74726976 	.word	0x74726976
  43528c:	206c6175 	.word	0x206c6175
  435290:	6e756874 	.word	0x6e756874
  435294:	6f74206b 	.word	0x6f74206b
  435298:	00000020 	.word	0x00000020
  43529c:	61766f63 	.word	0x61766f63
  4352a0:	6e616972 	.word	0x6e616972
  4352a4:	65722074 	.word	0x65722074
  4352a8:	6e727574 	.word	0x6e727574
  4352ac:	75687420 	.word	0x75687420
  4352b0:	74206b6e 	.word	0x74206b6e
  4352b4:	0000206f 	.word	0x0000206f
  4352b8:	6176616a 	.word	0x6176616a
  4352bc:	616c4320 	.word	0x616c4320
  4352c0:	66207373 	.word	0x66207373
  4352c4:	0020726f 	.word	0x0020726f
  4352c8:	72617567 	.word	0x72617567
  4352cc:	61762064 	.word	0x61762064
  4352d0:	62616972 	.word	0x62616972
  4352d4:	6620656c 	.word	0x6620656c
  4352d8:	0020726f 	.word	0x0020726f
  4352dc:	20534c54 	.word	0x20534c54
  4352e0:	74696e69 	.word	0x74696e69
  4352e4:	6e756620 	.word	0x6e756620
  4352e8:	6f697463 	.word	0x6f697463
  4352ec:	6f66206e 	.word	0x6f66206e
  4352f0:	00002072 	.word	0x00002072
  4352f4:	20534c54 	.word	0x20534c54
  4352f8:	70617277 	.word	0x70617277
  4352fc:	20726570 	.word	0x20726570
  435300:	636e7566 	.word	0x636e7566
  435304:	6e6f6974 	.word	0x6e6f6974
  435308:	726f6620 	.word	0x726f6620
  43530c:	00000020 	.word	0x00000020
  435310:	65666572 	.word	0x65666572
  435314:	636e6572 	.word	0x636e6572
  435318:	65742065 	.word	0x65742065
  43531c:	726f706d 	.word	0x726f706d
  435320:	20797261 	.word	0x20797261
  435324:	00000023 	.word	0x00000023
  435328:	64646968 	.word	0x64646968
  43532c:	61206e65 	.word	0x61206e65
  435330:	7361696c 	.word	0x7361696c
  435334:	726f6620 	.word	0x726f6620
  435338:	00000020 	.word	0x00000020
  43533c:	2d6e6f6e 	.word	0x2d6e6f6e
  435340:	6e617274 	.word	0x6e617274
  435344:	74636173 	.word	0x74636173
  435348:	206e6f69 	.word	0x206e6f69
  43534c:	6e6f6c63 	.word	0x6e6f6c63
  435350:	6f662065 	.word	0x6f662065
  435354:	00002072 	.word	0x00002072
  435358:	7265706f 	.word	0x7265706f
  43535c:	726f7461 	.word	0x726f7461
  435360:	00000000 	.word	0x00000000
  435364:	7265706f 	.word	0x7265706f
  435368:	726f7461 	.word	0x726f7461
  43536c:	00000020 	.word	0x00000020
  435370:	0000283e 	.word	0x0000283e
  435374:	00006c63 	.word	0x00006c63
  435378:	00007869 	.word	0x00007869
  43537c:	00007571 	.word	0x00007571
  435380:	00203a20 	.word	0x00203a20
  435384:	2077656e 	.word	0x2077656e
  435388:	00000000 	.word	0x00000000
  43538c:	00006c75 	.word	0x00006c75
  435390:	00006c6c 	.word	0x00006c6c
  435394:	006c6c75 	.word	0x006c6c75
  435398:	736c6166 	.word	0x736c6166
  43539c:	00000065 	.word	0x00000065
  4353a0:	65757274 	.word	0x65757274
  4353a4:	00000000 	.word	0x00000000
  4353a8:	6176616a 	.word	0x6176616a
  4353ac:	73657220 	.word	0x73657220
  4353b0:	6372756f 	.word	0x6372756f
  4353b4:	00002065 	.word	0x00002065
  4353b8:	6c636564 	.word	0x6c636564
  4353bc:	65707974 	.word	0x65707974
  4353c0:	00002820 	.word	0x00002820
  4353c4:	002e2e2e 	.word	0x002e2e2e
  4353c8:	73696874 	.word	0x73696874
  4353cc:	00000000 	.word	0x00000000
  4353d0:	7261707b 	.word	0x7261707b
  4353d4:	0000236d 	.word	0x0000236d
  4353d8:	626f6c67 	.word	0x626f6c67
  4353dc:	63206c61 	.word	0x63206c61
  4353e0:	74736e6f 	.word	0x74736e6f
  4353e4:	74637572 	.word	0x74637572
  4353e8:	2073726f 	.word	0x2073726f
  4353ec:	6579656b 	.word	0x6579656b
  4353f0:	6f742064 	.word	0x6f742064
  4353f4:	00000020 	.word	0x00000020
  4353f8:	626f6c67 	.word	0x626f6c67
  4353fc:	64206c61 	.word	0x64206c61
  435400:	72747365 	.word	0x72747365
  435404:	6f746375 	.word	0x6f746375
  435408:	6b207372 	.word	0x6b207372
  43540c:	64657965 	.word	0x64657965
  435410:	206f7420 	.word	0x206f7420
  435414:	00000000 	.word	0x00000000
  435418:	6d616c7b 	.word	0x6d616c7b
  43541c:	00616462 	.word	0x00616462
  435420:	00002329 	.word	0x00002329
  435424:	6e6e757b 	.word	0x6e6e757b
  435428:	64656d61 	.word	0x64656d61
  43542c:	70797420 	.word	0x70797420
  435430:	00002365 	.word	0x00002365
  435434:	6c635b20 	.word	0x6c635b20
  435438:	20656e6f 	.word	0x20656e6f
  43543c:	00000000 	.word	0x00000000
  435440:	65707974 	.word	0x65707974
  435444:	656d616e 	.word	0x656d616e
  435448:	00000000 	.word	0x00000000
  43544c:	706d6574 	.word	0x706d6574
  435450:	6574616c 	.word	0x6574616c
  435454:	00000000 	.word	0x00000000
  435458:	616c6320 	.word	0x616c6320
  43545c:	00007373 	.word	0x00007373
  435460:	73657220 	.word	0x73657220
  435464:	63697274 	.word	0x63697274
  435468:	00000074 	.word	0x00000074
  43546c:	6c6f7620 	.word	0x6c6f7620
  435470:	6c697461 	.word	0x6c697461
  435474:	00000065 	.word	0x00000065
  435478:	6e6f6320 	.word	0x6e6f6320
  43547c:	00007473 	.word	0x00007473
  435480:	61727420 	.word	0x61727420
  435484:	6361736e 	.word	0x6361736e
  435488:	6e6f6974 	.word	0x6e6f6974
  43548c:	6661735f 	.word	0x6661735f
  435490:	00000065 	.word	0x00000065
  435494:	656f6e20 	.word	0x656f6e20
  435498:	70656378 	.word	0x70656378
  43549c:	00000074 	.word	0x00000074
  4354a0:	72687420 	.word	0x72687420
  4354a4:	0000776f 	.word	0x0000776f
  4354a8:	00002626 	.word	0x00002626
  4354ac:	6f435f20 	.word	0x6f435f20
  4354b0:	656c706d 	.word	0x656c706d
  4354b4:	00000078 	.word	0x00000078
  4354b8:	6d495f20 	.word	0x6d495f20
  4354bc:	6e696761 	.word	0x6e696761
  4354c0:	00797261 	.word	0x00797261
  4354c4:	002a3a3a 	.word	0x002a3a3a
  4354c8:	765f5f20 	.word	0x765f5f20
  4354cc:	6f746365 	.word	0x6f746365
  4354d0:	00002872 	.word	0x00002872
  4354d4:	2e2e2e28 	.word	0x2e2e2e28
  4354d8:	00000000 	.word	0x00000000
  4354dc:	292e2e2e 	.word	0x292e2e2e
  4354e0:	00000000 	.word	0x00000000
  4354e4:	2e2e2e20 	.word	0x2e2e2e20
  4354e8:	00000020 	.word	0x00000020
  4354ec:	00005424 	.word	0x00005424
  4354f0:	00004e24 	.word	0x00004e24
  4354f4:	00545424 	.word	0x00545424
  4354f8:	3a647473 	.word	0x3a647473
  4354fc:	6c6c613a 	.word	0x6c6c613a
  435500:	7461636f 	.word	0x7461636f
  435504:	0000726f 	.word	0x0000726f
  435508:	6f6c6c61 	.word	0x6f6c6c61
  43550c:	6f746163 	.word	0x6f746163
  435510:	00000072 	.word	0x00000072
  435514:	3a647473 	.word	0x3a647473
  435518:	7361623a 	.word	0x7361623a
  43551c:	735f6369 	.word	0x735f6369
  435520:	6e697274 	.word	0x6e697274
  435524:	00000067 	.word	0x00000067
  435528:	69736162 	.word	0x69736162
  43552c:	74735f63 	.word	0x74735f63
  435530:	676e6972 	.word	0x676e6972
  435534:	00000000 	.word	0x00000000
  435538:	3a647473 	.word	0x3a647473
  43553c:	7274733a 	.word	0x7274733a
  435540:	00676e69 	.word	0x00676e69
  435544:	3a647473 	.word	0x3a647473
  435548:	7361623a 	.word	0x7361623a
  43554c:	735f6369 	.word	0x735f6369
  435550:	6e697274 	.word	0x6e697274
  435554:	68633c67 	.word	0x68633c67
  435558:	202c7261 	.word	0x202c7261
  43555c:	3a647473 	.word	0x3a647473
  435560:	6168633a 	.word	0x6168633a
  435564:	72745f72 	.word	0x72745f72
  435568:	73746961 	.word	0x73746961
  43556c:	6168633c 	.word	0x6168633c
  435570:	202c3e72 	.word	0x202c3e72
  435574:	3a647473 	.word	0x3a647473
  435578:	6c6c613a 	.word	0x6c6c613a
  43557c:	7461636f 	.word	0x7461636f
  435580:	633c726f 	.word	0x633c726f
  435584:	3e726168 	.word	0x3e726168
  435588:	00003e20 	.word	0x00003e20
  43558c:	3a647473 	.word	0x3a647473
  435590:	7473693a 	.word	0x7473693a
  435594:	6d616572 	.word	0x6d616572
  435598:	00000000 	.word	0x00000000
  43559c:	3a647473 	.word	0x3a647473
  4355a0:	7361623a 	.word	0x7361623a
  4355a4:	695f6369 	.word	0x695f6369
  4355a8:	65727473 	.word	0x65727473
  4355ac:	633c6d61 	.word	0x633c6d61
  4355b0:	2c726168 	.word	0x2c726168
  4355b4:	64747320 	.word	0x64747320
  4355b8:	68633a3a 	.word	0x68633a3a
  4355bc:	745f7261 	.word	0x745f7261
  4355c0:	74696172 	.word	0x74696172
  4355c4:	68633c73 	.word	0x68633c73
  4355c8:	203e7261 	.word	0x203e7261
  4355cc:	0000003e 	.word	0x0000003e
  4355d0:	69736162 	.word	0x69736162
  4355d4:	73695f63 	.word	0x73695f63
  4355d8:	61657274 	.word	0x61657274
  4355dc:	0000006d 	.word	0x0000006d
  4355e0:	3a647473 	.word	0x3a647473
  4355e4:	74736f3a 	.word	0x74736f3a
  4355e8:	6d616572 	.word	0x6d616572
  4355ec:	00000000 	.word	0x00000000
  4355f0:	3a647473 	.word	0x3a647473
  4355f4:	7361623a 	.word	0x7361623a
  4355f8:	6f5f6369 	.word	0x6f5f6369
  4355fc:	65727473 	.word	0x65727473
  435600:	633c6d61 	.word	0x633c6d61
  435604:	2c726168 	.word	0x2c726168
  435608:	64747320 	.word	0x64747320
  43560c:	68633a3a 	.word	0x68633a3a
  435610:	745f7261 	.word	0x745f7261
  435614:	74696172 	.word	0x74696172
  435618:	68633c73 	.word	0x68633c73
  43561c:	203e7261 	.word	0x203e7261
  435620:	0000003e 	.word	0x0000003e
  435624:	69736162 	.word	0x69736162
  435628:	736f5f63 	.word	0x736f5f63
  43562c:	61657274 	.word	0x61657274
  435630:	0000006d 	.word	0x0000006d
  435634:	3a647473 	.word	0x3a647473
  435638:	736f693a 	.word	0x736f693a
  43563c:	61657274 	.word	0x61657274
  435640:	0000006d 	.word	0x0000006d
  435644:	3a647473 	.word	0x3a647473
  435648:	7361623a 	.word	0x7361623a
  43564c:	695f6369 	.word	0x695f6369
  435650:	7274736f 	.word	0x7274736f
  435654:	3c6d6165 	.word	0x3c6d6165
  435658:	72616863 	.word	0x72616863
  43565c:	7473202c 	.word	0x7473202c
  435660:	633a3a64 	.word	0x633a3a64
  435664:	5f726168 	.word	0x5f726168
  435668:	69617274 	.word	0x69617274
  43566c:	633c7374 	.word	0x633c7374
  435670:	3e726168 	.word	0x3e726168
  435674:	00003e20 	.word	0x00003e20
  435678:	69736162 	.word	0x69736162
  43567c:	6f695f63 	.word	0x6f695f63
  435680:	65727473 	.word	0x65727473
  435684:	00006d61 	.word	0x00006d61
  435688:	00004e61 	.word	0x00004e61
  43568c:	00003d26 	.word	0x00003d26
  435690:	00005361 	.word	0x00005361
  435694:	0000003d 	.word	0x0000003d
  435698:	00006161 	.word	0x00006161
  43569c:	00006461 	.word	0x00006461
  4356a0:	00000026 	.word	0x00000026
  4356a4:	00006e61 	.word	0x00006e61
  4356a8:	67696c61 	.word	0x67696c61
  4356ac:	20666f6e 	.word	0x20666f6e
  4356b0:	00000000 	.word	0x00000000
  4356b4:	00007761 	.word	0x00007761
  4356b8:	615f6f63 	.word	0x615f6f63
  4356bc:	74696177 	.word	0x74696177
  4356c0:	00000020 	.word	0x00000020
  4356c4:	00007a61 	.word	0x00007a61
  4356c8:	00006363 	.word	0x00006363
  4356cc:	736e6f63 	.word	0x736e6f63
  4356d0:	61635f74 	.word	0x61635f74
  4356d4:	00007473 	.word	0x00007473
  4356d8:	00002928 	.word	0x00002928
  4356dc:	00006d63 	.word	0x00006d63
  4356e0:	0000002c 	.word	0x0000002c
  4356e4:	00006f63 	.word	0x00006f63
  4356e8:	0000007e 	.word	0x0000007e
  4356ec:	00005664 	.word	0x00005664
  4356f0:	00003d2f 	.word	0x00003d2f
  4356f4:	00005864 	.word	0x00005864
  4356f8:	2e2e2e5b 	.word	0x2e2e2e5b
  4356fc:	00003d5d 	.word	0x00003d5d
  435700:	00006164 	.word	0x00006164
  435704:	656c6564 	.word	0x656c6564
  435708:	5d5b6574 	.word	0x5d5b6574
  43570c:	00000020 	.word	0x00000020
  435710:	00006364 	.word	0x00006364
  435714:	616e7964 	.word	0x616e7964
  435718:	5f63696d 	.word	0x5f63696d
  43571c:	74736163 	.word	0x74736163
  435720:	00000000 	.word	0x00000000
  435724:	00006564 	.word	0x00006564
  435728:	0000002a 	.word	0x0000002a
  43572c:	00006964 	.word	0x00006964
  435730:	00006c64 	.word	0x00006c64
  435734:	656c6564 	.word	0x656c6564
  435738:	00206574 	.word	0x00206574
  43573c:	00007364 	.word	0x00007364
  435740:	00002a2e 	.word	0x00002a2e
  435744:	00007464 	.word	0x00007464
  435748:	00007664 	.word	0x00007664
  43574c:	0000002f 	.word	0x0000002f
  435750:	00007864 	.word	0x00007864
  435754:	00004f65 	.word	0x00004f65
  435758:	00003d5e 	.word	0x00003d5e
  43575c:	00006f65 	.word	0x00006f65
  435760:	0000005e 	.word	0x0000005e
  435764:	00007165 	.word	0x00007165
  435768:	00003d3d 	.word	0x00003d3d
  43576c:	00004c66 	.word	0x00004c66
  435770:	00005266 	.word	0x00005266
  435774:	00006c66 	.word	0x00006c66
  435778:	00007266 	.word	0x00007266
  43577c:	00006567 	.word	0x00006567
  435780:	00003d3e 	.word	0x00003d3e
  435784:	00007367 	.word	0x00007367
  435788:	00007467 	.word	0x00007467
  43578c:	00005d5b 	.word	0x00005d5b
  435790:	0000536c 	.word	0x0000536c
  435794:	003d3c3c 	.word	0x003d3c3c
  435798:	00003d3c 	.word	0x00003d3c
  43579c:	0000696c 	.word	0x0000696c
  4357a0:	7265706f 	.word	0x7265706f
  4357a4:	726f7461 	.word	0x726f7461
  4357a8:	00202222 	.word	0x00202222
  4357ac:	0000736c 	.word	0x0000736c
  4357b0:	00003c3c 	.word	0x00003c3c
  4357b4:	0000746c 	.word	0x0000746c
  4357b8:	0000003c 	.word	0x0000003c
  4357bc:	0000496d 	.word	0x0000496d
  4357c0:	00003d2d 	.word	0x00003d2d
  4357c4:	00004c6d 	.word	0x00004c6d
  4357c8:	00003d2a 	.word	0x00003d2a
  4357cc:	0000696d 	.word	0x0000696d
  4357d0:	0000002d 	.word	0x0000002d
  4357d4:	00006c6d 	.word	0x00006c6d
  4357d8:	00006d6d 	.word	0x00006d6d
  4357dc:	00002d2d 	.word	0x00002d2d
  4357e0:	0000616e 	.word	0x0000616e
  4357e4:	5b77656e 	.word	0x5b77656e
  4357e8:	0000005d 	.word	0x0000005d
  4357ec:	0000656e 	.word	0x0000656e
  4357f0:	00003d21 	.word	0x00003d21
  4357f4:	0000746e 	.word	0x0000746e
  4357f8:	00000021 	.word	0x00000021
  4357fc:	0000776e 	.word	0x0000776e
  435800:	0077656e 	.word	0x0077656e
  435804:	0000526f 	.word	0x0000526f
  435808:	00003d7c 	.word	0x00003d7c
  43580c:	00006f6f 	.word	0x00006f6f
  435810:	00007c7c 	.word	0x00007c7c
  435814:	0000007c 	.word	0x0000007c
  435818:	00004c70 	.word	0x00004c70
  43581c:	00003d2b 	.word	0x00003d2b
  435820:	00006c70 	.word	0x00006c70
  435824:	0000002b 	.word	0x0000002b
  435828:	00006d70 	.word	0x00006d70
  43582c:	002a3e2d 	.word	0x002a3e2d
  435830:	00007070 	.word	0x00007070
  435834:	00002b2b 	.word	0x00002b2b
  435838:	00007370 	.word	0x00007370
  43583c:	00007470 	.word	0x00007470
  435840:	00003e2d 	.word	0x00003e2d
  435844:	0000003f 	.word	0x0000003f
  435848:	00004d72 	.word	0x00004d72
  43584c:	00003d25 	.word	0x00003d25
  435850:	00005372 	.word	0x00005372
  435854:	003d3e3e 	.word	0x003d3e3e
  435858:	00006372 	.word	0x00006372
  43585c:	6e696572 	.word	0x6e696572
  435860:	70726574 	.word	0x70726574
  435864:	5f746572 	.word	0x5f746572
  435868:	74736163 	.word	0x74736163
  43586c:	00000000 	.word	0x00000000
  435870:	00006d72 	.word	0x00006d72
  435874:	00000025 	.word	0x00000025
  435878:	00007372 	.word	0x00007372
  43587c:	00003e3e 	.word	0x00003e3e
  435880:	00005073 	.word	0x00005073
  435884:	657a6973 	.word	0x657a6973
  435888:	2e2e666f 	.word	0x2e2e666f
  43588c:	0000002e 	.word	0x0000002e
  435890:	00005a73 	.word	0x00005a73
  435894:	00006373 	.word	0x00006373
  435898:	74617473 	.word	0x74617473
  43589c:	635f6369 	.word	0x635f6369
  4358a0:	00747361 	.word	0x00747361
  4358a4:	003e3d3c 	.word	0x003e3d3c
  4358a8:	657a6973 	.word	0x657a6973
  4358ac:	0020666f 	.word	0x0020666f
  4358b0:	00007a73 	.word	0x00007a73
  4358b4:	00007274 	.word	0x00007274
  4358b8:	6f726874 	.word	0x6f726874
  4358bc:	00000077 	.word	0x00000077
  4358c0:	00007774 	.word	0x00007774
  4358c4:	6f726874 	.word	0x6f726874
  4358c8:	00002077 	.word	0x00002077
  4358cc:	6e676973 	.word	0x6e676973
  4358d0:	63206465 	.word	0x63206465
  4358d4:	00726168 	.word	0x00726168
  4358d8:	6c6f6f62 	.word	0x6c6f6f62
  4358dc:	00000000 	.word	0x00000000
  4358e0:	6c6f6f62 	.word	0x6c6f6f62
  4358e4:	006e6165 	.word	0x006e6165
  4358e8:	72616863 	.word	0x72616863
  4358ec:	00000000 	.word	0x00000000
  4358f0:	65747962 	.word	0x65747962
  4358f4:	00000000 	.word	0x00000000
  4358f8:	62756f64 	.word	0x62756f64
  4358fc:	0000656c 	.word	0x0000656c
  435900:	676e6f6c 	.word	0x676e6f6c
  435904:	756f6420 	.word	0x756f6420
  435908:	00656c62 	.word	0x00656c62
  43590c:	616f6c66 	.word	0x616f6c66
  435910:	00000074 	.word	0x00000074
  435914:	6c665f5f 	.word	0x6c665f5f
  435918:	3174616f 	.word	0x3174616f
  43591c:	00003832 	.word	0x00003832
  435920:	69736e75 	.word	0x69736e75
  435924:	64656e67 	.word	0x64656e67
  435928:	61686320 	.word	0x61686320
  43592c:	00000072 	.word	0x00000072
  435930:	00746e69 	.word	0x00746e69
  435934:	69736e75 	.word	0x69736e75
  435938:	64656e67 	.word	0x64656e67
  43593c:	746e6920 	.word	0x746e6920
  435940:	00000000 	.word	0x00000000
  435944:	69736e75 	.word	0x69736e75
  435948:	64656e67 	.word	0x64656e67
  43594c:	00000000 	.word	0x00000000
  435950:	676e6f6c 	.word	0x676e6f6c
  435954:	00000000 	.word	0x00000000
  435958:	69736e75 	.word	0x69736e75
  43595c:	64656e67 	.word	0x64656e67
  435960:	6e6f6c20 	.word	0x6e6f6c20
  435964:	00000067 	.word	0x00000067
  435968:	6e695f5f 	.word	0x6e695f5f
  43596c:	38323174 	.word	0x38323174
  435970:	00000000 	.word	0x00000000
  435974:	69736e75 	.word	0x69736e75
  435978:	64656e67 	.word	0x64656e67
  43597c:	695f5f20 	.word	0x695f5f20
  435980:	3231746e 	.word	0x3231746e
  435984:	00000038 	.word	0x00000038
  435988:	726f6873 	.word	0x726f6873
  43598c:	00000074 	.word	0x00000074
  435990:	69736e75 	.word	0x69736e75
  435994:	64656e67 	.word	0x64656e67
  435998:	6f687320 	.word	0x6f687320
  43599c:	00007472 	.word	0x00007472
  4359a0:	64696f76 	.word	0x64696f76
  4359a4:	00000000 	.word	0x00000000
  4359a8:	61686377 	.word	0x61686377
  4359ac:	00745f72 	.word	0x00745f72
  4359b0:	676e6f6c 	.word	0x676e6f6c
  4359b4:	6e6f6c20 	.word	0x6e6f6c20
  4359b8:	00000067 	.word	0x00000067
  4359bc:	69736e75 	.word	0x69736e75
  4359c0:	64656e67 	.word	0x64656e67
  4359c4:	6e6f6c20 	.word	0x6e6f6c20
  4359c8:	6f6c2067 	.word	0x6f6c2067
  4359cc:	0000676e 	.word	0x0000676e
  4359d0:	69636564 	.word	0x69636564
  4359d4:	336c616d 	.word	0x336c616d
  4359d8:	00000032 	.word	0x00000032
  4359dc:	69636564 	.word	0x69636564
  4359e0:	366c616d 	.word	0x366c616d
  4359e4:	00000034 	.word	0x00000034
  4359e8:	69636564 	.word	0x69636564
  4359ec:	316c616d 	.word	0x316c616d
  4359f0:	00003832 	.word	0x00003832
  4359f4:	666c6168 	.word	0x666c6168
  4359f8:	00000000 	.word	0x00000000
  4359fc:	72616863 	.word	0x72616863
  435a00:	00745f38 	.word	0x00745f38
  435a04:	72616863 	.word	0x72616863
  435a08:	745f3631 	.word	0x745f3631
  435a0c:	00000000 	.word	0x00000000
  435a10:	72616863 	.word	0x72616863
  435a14:	745f3233 	.word	0x745f3233
  435a18:	00000000 	.word	0x00000000
  435a1c:	6f6c465f 	.word	0x6f6c465f
  435a20:	00007461 	.word	0x00007461
  435a24:	3a647473 	.word	0x3a647473
  435a28:	6c66623a 	.word	0x6c66623a
  435a2c:	3174616f 	.word	0x3174616f
  435a30:	00745f36 	.word	0x00745f36

00435a34 <_ZTSFijjPfE>:
  435a34:	6a6a6946 00456650                       FijjPfE.

00435a3c <_ZTIFijjPfE>:
  435a3c:	0043caa4 00435a34                       ..C.4ZC.

00435a44 <_ZTSPFijjPfE>:
  435a44:	6a694650 4566506a 00000000              PFijjPfE....

00435a50 <_ZTIPFijjPfE>:
  435a50:	0043cb38 00435a44 00000000 00435a3c     8.C.DZC.....<ZC.

00435a60 <_ZTSZN14SignalWithAxes10get_signalEvEUljjPfE_>:
  435a60:	34314e5a 6e676953 69576c61 78416874     ZN14SignalWithAx
  435a70:	30317365 5f746567 6e676973 76456c61     es10get_signalEv
  435a80:	6a6c5545 4566506a 0000005f              EUljjPfE_...

00435a8c <_ZTIZN14SignalWithAxes10get_signalEvEUljjPfE_>:
  435a8c:	0043ca44 00435a60                       D.C.`ZC.

00435a94 <_ZL13ns_pwr_config>:
  435a94:	0043c774 01010002 00010100 00000000     t.C.............

00435aa4 <_ZL16impulse_522036_0>:
  435aa4:	0007f734 004349c4 004349cc 00000001     4....IC..IC.....
  435ab4:	00434a00 00000013 00002400 00002400     .JC......$...$..
  435ac4:	00000001 00002400 00000060 00000060     .....$..`...`...
  435ad4:	00000001 3f800000 00000000 00000001     .......?........
  435ae4:	2000a014 0000000a 0000000c 00000000     ... ............
  435af4:	00000120 00000001 00435b24 00000000      .......$[C.....
  435b04:	00000000 00000302 00434a48 00000900     ........HJC.....
  435b14:	00010004 2000a04c 00000000 3e4ccccd     ....L.. ......L>

00435b24 <_ZL18ei_learning_blocks>:
  435b24:	00000007 00000000 00417189 00435b48     .........qA.H[C.
  435b34:	00000000 00435b44 00000001 00000120     ....D[C..... ...

00435b44 <_ZL26ei_learning_block_7_inputs>:
  435b44:	00000003                                ....

00435b48 <_ZL26ei_learning_block_config_7>:
  435b48:	00030001 00000007 01000201 00000002     ................
  435b58:	3f000000 00000101 00435b64              ...?....d[C.

00435b64 <_ZL24ei_config_tflite_graph_7>:
  435b64:	00000001 0041edad 0041f075 0041f0e9     ......A.u.A...A.
  435b74:	0041efe9 0041f031                       ..A.1.A.

00435b7c <_ZN6tflite23kConvQuantizedDimensionE>:
  435b7c:	00000000                                ....

00435b80 <_ZN6tflite17kConvOutputTensorE>:
  435b80:	00000000                                ....

00435b84 <_ZN6tflite15kConvBiasTensorE>:
  435b84:	00000002                                ....

00435b88 <_ZN6tflite18kConvWeightsTensorE>:
  435b88:	00000001                                ....

00435b8c <_ZN6tflite16kConvInputTensorE>:
  435b8c:	00000000                                ....

00435b90 <_ZN6tflite32kDepthwiseConvQuantizedDimensionE>:
  435b90:	00000003                                ....

00435b94 <_ZN6tflite26kDepthwiseConvOutputTensorE>:
  435b94:	00000000                                ....

00435b98 <_ZN6tflite24kDepthwiseConvBiasTensorE>:
  435b98:	00000002                                ....

00435b9c <_ZN6tflite27kDepthwiseConvWeightsTensorE>:
  435b9c:	00000001                                ....

00435ba0 <_ZN6tflite25kDepthwiseConvInputTensorE>:
  435ba0:	00000000                                ....

00435ba4 <_ZTSN6tflite12MicroContextE>:
  435ba4:	6674364e 6574696c 694d3231 436f7263     N6tflite12MicroC
  435bb4:	65746e6f 00457478                       ontextE.

00435bbc <_ZTIN6tflite12MicroContextE>:
  435bbc:	0043ca44 00435ba4                       D.C..[C.

00435bc4 <_ZTVN6tflite12MicroContextE>:
  435bc4:	00000000 00435bbc 0041e43d 0041e491     .....[C.=.A...A.
  435bd4:	0041e441 0041e4a1 0041e449 0041e451     A.A...A.I.A.Q.A.
  435be4:	0041e4f9 0041e545 0041e4ad 0041e471     ..A.E.A...A.q.A.
  435bf4:	0041e479                                y.A.

00435bf8 <_ZTIN12_GLOBAL__N_115EonMicroContextE>:
  435bf8:	0043cb90 00435c04 00435bbc              ..C..\C..[C.

00435c04 <_ZTSN12_GLOBAL__N_115EonMicroContextE>:
  435c04:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
  435c14:	6f453531 63694d6e 6f436f72 7865746e     15EonMicroContex
  435c24:	00004574                                tE..

00435c28 <_ZTVN12_GLOBAL__N_115EonMicroContextE>:
  435c28:	00000000 00435bf8 0041e791 0041e7a5     .....[C...A...A.
  435c38:	0041ea49 0041eba9 0041e6b5 0041ec75     I.A...A...A.u.A.
  435c48:	0041e4f9 0041e545 0041e4ad 0041e6d1     ..A.E.A...A...A.
  435c58:	0041e98d                                ..A.

00435c5c <_ZN12_GLOBAL__N_1L25tflTensors_subgraph_indexE>:
  435c5c:	00000000 00000048 00000000              ....H.......

00435c68 <_ZN12_GLOBAL__N_18used_opsE>:
  435c68:	02000100 00010300 02000100 00010300     ................
  435c78:	02000100 02000100 04000000 00000000     ................

00435c88 <_ZN12_GLOBAL__N_110tensorDataE>:
  435c88:	00000902 20014110 0043c4fc 00002400     .....A. ..C..$..
  435c98:	00000001 0043c4e0 00000201 0043c4c0     ......C.......C.
  435ca8:	0043c4a8 00000020 00000000 00000000     ..C. ...........
  435cb8:	00000901 0043c460 0043c444 00000048     ....`.C.D.C.H...
  435cc8:	00000001 0043c3f0 00000201 0043c3d0     ......C.......C.
  435cd8:	0043c3bc 00000020 00000001 0043c368     ..C. .......h.C.
  435ce8:	00000901 0043c320 0043c304 00000048     .... .C...C.H...
  435cf8:	00000001 0043c2b0 00000201 0043c290     ......C.......C.
  435d08:	0043c284 00000020 00000001 0043c230     ..C. .......0.C.
  435d18:	00000901 0043c1f0 0043c1d4 00000040     ......C...C.@...
  435d28:	00000001 0043c180 00000201 0043c160     ......C.....`.C.
  435d38:	0043c154 00000020 00000001 0043c100     T.C. .........C.
  435d48:	00000901 0043bf80 0043bf64 00000180     ......C.d.C.....
  435d58:	00000001 0043bdd0 00000201 0043bd10     ......C.......C.
  435d68:	0043bd04 000000c0 00000001 0043bb70     ..C.........p.C.
  435d78:	00000901 0043b9c0 0043b9a4 000001b0     ......C...C.....
  435d88:	00000001 0043b810 00000201 0043b750     ......C.....P.C.
  435d98:	0043b744 000000c0 00000001 0043b5b0     D.C...........C.
  435da8:	00000901 0043b430 0043b414 00000180     ....0.C...C.....
  435db8:	00000001 0043b3c0 00000201 0043b3a0     ......C.......C.
  435dc8:	0043b394 00000020 00000001 0043b340     ..C. .......@.C.
  435dd8:	00000901 0043b1c0 0043b1a4 00000180     ......C...C.....
  435de8:	00000001 0043b010 00000201 0043af50     ......C.....P.C.
  435df8:	0043af44 000000c0 00000001 0043adb0     D.C...........C.
  435e08:	00000901 0043ac00 0043abe4 000001b0     ......C...C.....
  435e18:	00000001 0043aa50 00000201 0043a990     ....P.C.......C.
  435e28:	0043a984 000000c0 00000001 0043a7f0     ..C...........C.
  435e38:	00000901 0043a670 0043a654 00000180     ....p.C.T.C.....
  435e48:	00000001 0043a600 00000201 0043a5e0     ......C.......C.
  435e58:	0043a5d4 00000020 00000001 0043a580     ..C. .........C.
  435e68:	00000901 0043a400 0043a3e4 00000180     ......C...C.....
  435e78:	00000001 0043a250 00000201 0043a190     ....P.C.......C.
  435e88:	0043a184 000000c0 00000001 00439ff0     ..C...........C.
  435e98:	00000901 00439e40 00439e24 000001b0     ....@.C.$.C.....
  435ea8:	00000001 00439c90 00000201 00439bd0     ......C.......C.
  435eb8:	00439bc4 000000c0 00000001 00439a30     ..C.........0.C.
  435ec8:	00000901 004398b0 00439894 00000180     ......C...C.....
  435ed8:	00000001 00439840 00000201 00439820     ....@.C..... .C.
  435ee8:	00439814 00000020 00000001 004397c0     ..C. .........C.
  435ef8:	00000901 00439640 00439624 00000180     ....@.C.$.C.....
  435f08:	00000001 00439490 00000201 004393d0     ......C.......C.
  435f18:	004393c4 000000c0 00000001 00439230     ..C.........0.C.
  435f28:	00000901 00439080 00439064 000001b0     ......C.d.C.....
  435f38:	00000001 00438ed0 00000201 00438e10     ......C.......C.
  435f48:	00438e04 000000c0 00000001 00438c70     ..C.........p.C.
  435f58:	00000901 00438af0 00438ad4 00000180     ......C...C.....
  435f68:	00000001 00438a80 00000201 00438a60     ......C.....`.C.
  435f78:	00438a54 00000020 00000001 00438a00     T.C. .........C.
  435f88:	00000901 00438880 00438864 00000180     ......C.d.C.....
  435f98:	00000001 004386d0 00000201 00438610     ......C.......C.
  435fa8:	00438604 000000c0 00000001 00438470     ..C.........p.C.
  435fb8:	00000901 004382c0 004382a4 000001b0     ......C...C.....
  435fc8:	00000001 00438110 00000201 00438050     ......C.....P.C.
  435fd8:	00438044 000000c0 00000001 00437eb0     D.C..........~C.
  435fe8:	00000901 00437d30 00437d14 00000180     ....0}C..}C.....
  435ff8:	00000001 00437cc0 00000201 00437ca0     .....|C......|C.
  436008:	00437c94 00000020 00000001 00437c40     .|C. .......@|C.
  436018:	00000901 00437ac0 00437aa4 00000180     .....zC..zC.....
  436028:	00000001 00437910 00000201 00437850     .....yC.....PxC.
  436038:	00437844 000000c0 00000001 004376b0     DxC..........vC.
  436048:	00000901 004370b0 00437094 00000600     .....pC..pC.....
  436058:	00000001 00436f80 00000201 00436f00     .....oC......oC.
  436068:	00436ef4 00000080 00000001 00436de0     .nC..........mC.
  436078:	00000901 00436da0 00436d84 00000040     .....mC..mC.@...
  436088:	00000001 00436d60 00000201 00436d58     ....`mC.....XmC.
  436098:	00436d50 00000008 00000001 00436d2c     PmC.........,mC.
  4360a8:	00000902 2001d110 00436d18 00004800     ....... .mC..H..
  4360b8:	00000001 00436cfc 00000902 20014110     .....lC......A. 
  4360c8:	00436ce8 00004800 00000001 00436ccc     .lC..H.......lC.
  4360d8:	00000902 20018910 00436cb8 00004800     ....... .lC..H..
  4360e8:	00000001 00436c9c 00000902 20014110     .....lC......A. 
  4360f8:	00436c88 00004800 00000001 00436c6c     .lC..H......llC.
  436108:	00000902 20030340 00436c58 0001b000     ....@.. XlC.....
  436118:	00000001 00436c3c 00000902 20014110     ....<lC......A. 
  436128:	00436c28 0001c230 00000001 00436c0c     (lC.0........lC.
  436138:	00000902 20030340 00436bf8 00006c00     ....@.. .kC..l..
  436148:	00000001 00436bdc 00000902 20021910     .....kC........ 
  436158:	00436bc8 00001200 00000001 00436bac     .kC..........kC.
  436168:	00000902 2001ad10 00436b98 00006c00     ....... .kC..l..
  436178:	00000001 00436b7c 00000902 20014110     ....|kC......A. 
  436188:	00436b68 00006c00 00000001 00436b4c     hkC..l......LkC.
  436198:	00000902 2001ad10 00436b38 00001200     ....... 8kC.....
  4361a8:	00000001 00436b1c 00000902 20014110     .....kC......A. 
  4361b8:	00436b08 00001200 00000001 00436aec     .kC..........jC.
  4361c8:	00000902 2001b640 00436ad8 00006c00     ....@.. .jC..l..
  4361d8:	00000001 00436abc 00000902 20014110     .....jC......A. 
  4361e8:	00436aa8 00007530 00000001 00436a8c     .jC.0u.......jC.
  4361f8:	00000902 2001b640 00436a78 00001b00     ....@.. xjC.....
  436208:	00000001 00436a5c 00000902 20017b90     ....\jC......{. 
  436218:	00436a48 00000480 00000001 00436a2c     HjC.........,jC.
  436228:	00000902 20015c10 00436a18 00001b00     .....\. .jC.....
  436238:	00000001 004369fc 00000902 20014110     .....iC......A. 
  436248:	004369e8 00001b00 00000001 004369cc     .iC..........iC.
  436258:	00000902 20015c10 004369b8 00000480     .....\. .iC.....
  436268:	00000001 0043699c 00000902 20017710     .....iC......w. 
  436278:	00436988 00000480 00000001 0043696c     .iC.........liC.
  436288:	00000902 20015c10 00436958 00001b00     .....\. XiC.....
  436298:	00000001 0043693c 00000902 20014110     ....<iC......A. 
  4362a8:	00436928 00001b00 00000001 0043690c     (iC..........iC.
  4362b8:	00000902 20016090 004368f8 00000480     .....`. .hC.....
  4362c8:	00000001 004368dc 00000902 20015c10     .....hC......\. 
  4362d8:	004368c8 00000480 00000001 004368ac     .hC..........hC.
  4362e8:	00000902 20014110 00436898 00001b00     .....A. .hC.....
  4362f8:	00000001 0043687c 00000902 20015c10     ....|hC......\. 
  436308:	00436868 00001200 00000001 0043684c     hhC.........LhC.
  436318:	00000902 20014230 00436838 00000120     ....0B. 8hC. ...
  436328:	00000001 0043681c 00000902 20014110     .....hC......A. 
  436338:	00436808 00000120 00000001 004367ec     .hC. ........gC.

00436348 <_ZN12_GLOBAL__N_12g0L9outputs27E>:
  436348:	00000001 00000047                       ....G...

00436350 <_ZN12_GLOBAL__N_12g0L8inputs27E>:
  436350:	00000001 00000046                       ....F...

00436358 <_ZN12_GLOBAL__N_12g0L8opdata27E>:
  436358:	3f800000                                ...?

0043635c <_ZN12_GLOBAL__N_12g0L9outputs26E>:
  43635c:	00000001 00000046                       ....F...

00436364 <_ZN12_GLOBAL__N_12g0L8inputs26E>:
  436364:	00000003 00000045 0000002a 0000002b     ....E...*...+...

00436374 <_ZN12_GLOBAL__N_12g0L8opdata26E>:
  436374:	00000002 00000001 00000001 00000000     ................
  436384:	00000001 00000001                       ........

0043638c <_ZN12_GLOBAL__N_12g0L9outputs25E>:
  43638c:	00000001 00000045                       ....E...

00436394 <_ZN12_GLOBAL__N_12g0L8inputs25E>:
  436394:	00000003 00000044 00000028 00000029     ....D...(...)...

004363a4 <_ZN12_GLOBAL__N_12g0L8opdata25E>:
  4363a4:	00000002 00000001 00000001 00000001     ................
  4363b4:	00000001 00000001                       ........

004363bc <_ZN12_GLOBAL__N_12g0L9outputs24E>:
  4363bc:	00000001 00000044                       ....D...

004363c4 <_ZN12_GLOBAL__N_12g0L8inputs24E>:
  4363c4:	00000003 00000043 00000026 00000027     ....C...&...'...

004363d4 <_ZN12_GLOBAL__N_12g0L8opdata24E>:
  4363d4:	00000001 00000001 00000001 00000003     ................
  4363e4:	00000001 00000001                       ........

004363ec <_ZN12_GLOBAL__N_12g0L9outputs23E>:
  4363ec:	00000001 00000043                       ....C...

004363f4 <_ZN12_GLOBAL__N_12g0L8inputs23E>:
  4363f4:	00000002 0000003f 00000042              ....?...B...

00436400 <_ZN12_GLOBAL__N_12g0L8opdata23E>:
  436400:	00000000                                ....

00436404 <_ZN12_GLOBAL__N_12g0L9outputs22E>:
  436404:	00000001 00000042                       ....B...

0043640c <_ZN12_GLOBAL__N_12g0L8inputs22E>:
  43640c:	00000003 00000041 00000024 00000025     ....A...$...%...

0043641c <_ZN12_GLOBAL__N_12g0L8opdata22E>:
  43641c:	00000001 00000001 00000001 00000000     ................
  43642c:	00000001 00000001                       ........

00436434 <_ZN12_GLOBAL__N_12g0L9outputs21E>:
  436434:	00000001 00000041                       ....A...

0043643c <_ZN12_GLOBAL__N_12g0L8inputs21E>:
  43643c:	00000003 00000040 00000022 00000023     ....@..."...#...

0043644c <_ZN12_GLOBAL__N_12g0L8opdata21E>:
  43644c:	00000001 00000001 00000001 00000001     ................
  43645c:	00000003 00000001 00000001              ............

00436468 <_ZN12_GLOBAL__N_12g0L9outputs20E>:
  436468:	00000001 00000040                       ....@...

00436470 <_ZN12_GLOBAL__N_12g0L8inputs20E>:
  436470:	00000003 0000003f 00000020 00000021     ....?... ...!...

00436480 <_ZN12_GLOBAL__N_12g0L8opdata20E>:
  436480:	00000001 00000001 00000001 00000003     ................
  436490:	00000001 00000001                       ........

00436498 <_ZN12_GLOBAL__N_12g0L9outputs19E>:
  436498:	00000001 0000003f                       ....?...

004364a0 <_ZN12_GLOBAL__N_12g0L8inputs19E>:
  4364a0:	00000002 0000003b 0000003e              ....;...>...

004364ac <_ZN12_GLOBAL__N_12g0L8opdata19E>:
  4364ac:	00000000                                ....

004364b0 <_ZN12_GLOBAL__N_12g0L9outputs18E>:
  4364b0:	00000001 0000003e                       ....>...

004364b8 <_ZN12_GLOBAL__N_12g0L8inputs18E>:
  4364b8:	00000003 0000003d 0000001e 0000001f     ....=...........

004364c8 <_ZN12_GLOBAL__N_12g0L8opdata18E>:
  4364c8:	00000001 00000001 00000001 00000000     ................
  4364d8:	00000001 00000001                       ........

004364e0 <_ZN12_GLOBAL__N_12g0L9outputs17E>:
  4364e0:	00000001 0000003d                       ....=...

004364e8 <_ZN12_GLOBAL__N_12g0L8inputs17E>:
  4364e8:	00000003 0000003c 0000001c 0000001d     ....<...........

004364f8 <_ZN12_GLOBAL__N_12g0L8opdata17E>:
  4364f8:	00000001 00000001 00000001 00000001     ................
  436508:	00000003 00000001 00000001              ............

00436514 <_ZN12_GLOBAL__N_12g0L9outputs16E>:
  436514:	00000001 0000003c                       ....<...

0043651c <_ZN12_GLOBAL__N_12g0L8inputs16E>:
  43651c:	00000003 0000003b 0000001a 0000001b     ....;...........

0043652c <_ZN12_GLOBAL__N_12g0L8opdata16E>:
  43652c:	00000001 00000001 00000001 00000003     ................
  43653c:	00000001 00000001                       ........

00436544 <_ZN12_GLOBAL__N_12g0L9outputs15E>:
  436544:	00000001 0000003b                       ....;...

0043654c <_ZN12_GLOBAL__N_12g0L8inputs15E>:
  43654c:	00000003 0000003a 00000018 00000019     ....:...........

0043655c <_ZN12_GLOBAL__N_12g0L8opdata15E>:
  43655c:	00000001 00000001 00000001 00000000     ................
  43656c:	00000001 00000001                       ........

00436574 <_ZN12_GLOBAL__N_12g0L9outputs14E>:
  436574:	00000001 0000003a                       ....:...

0043657c <_ZN12_GLOBAL__N_12g0L8inputs14E>:
  43657c:	00000003 00000039 00000016 00000017     ....9...........

0043658c <_ZN12_GLOBAL__N_12g0L8opdata14E>:
  43658c:	00000002 00000002 00000002 00000001     ................
  43659c:	00000003 00000001 00000001              ............

004365a8 <_ZN12_GLOBAL__N_12g0L9outputs13E>:
  4365a8:	00000001 00000039                       ....9...

004365b0 <_ZN12_GLOBAL__N_12g0L8inputs13E>:
  4365b0:	00000002 00000038 00000001              ....8.......

004365bc <_ZN12_GLOBAL__N_12g0L9outputs12E>:
  4365bc:	00000001 00000038                       ....8...

004365c4 <_ZN12_GLOBAL__N_12g0L8inputs12E>:
  4365c4:	00000003 00000037 00000014 00000015     ....7...........

004365d4 <_ZN12_GLOBAL__N_12g0L8opdata12E>:
  4365d4:	00000001 00000001 00000001 00000003     ................
  4365e4:	00000001 00000001                       ........

004365ec <_ZN12_GLOBAL__N_12g0L9outputs11E>:
  4365ec:	00000001 00000037                       ....7...

004365f4 <_ZN12_GLOBAL__N_12g0L8inputs11E>:
  4365f4:	00000002 00000033 00000036              ....3...6...

00436600 <_ZN12_GLOBAL__N_12g0L8opdata11E>:
  436600:	00000000                                ....

00436604 <_ZN12_GLOBAL__N_12g0L9outputs10E>:
  436604:	00000001 00000036                       ....6...

0043660c <_ZN12_GLOBAL__N_12g0L8inputs10E>:
  43660c:	00000003 00000035 00000012 00000013     ....5...........

0043661c <_ZN12_GLOBAL__N_12g0L8opdata10E>:
  43661c:	00000001 00000001 00000001 00000000     ................
  43662c:	00000001 00000001                       ........

00436634 <_ZN12_GLOBAL__N_12g0L8outputs9E>:
  436634:	00000001 00000035                       ....5...

0043663c <_ZN12_GLOBAL__N_12g0L7inputs9E>:
  43663c:	00000003 00000034 00000010 00000011     ....4...........

0043664c <_ZN12_GLOBAL__N_12g0L7opdata9E>:
  43664c:	00000001 00000001 00000001 00000001     ................
  43665c:	00000003 00000001 00000001              ............

00436668 <_ZN12_GLOBAL__N_12g0L8outputs8E>:
  436668:	00000001 00000034                       ....4...

00436670 <_ZN12_GLOBAL__N_12g0L7inputs8E>:
  436670:	00000003 00000033 0000000e 0000000f     ....3...........

00436680 <_ZN12_GLOBAL__N_12g0L7opdata8E>:
  436680:	00000001 00000001 00000001 00000003     ................
  436690:	00000001 00000001                       ........

00436698 <_ZN12_GLOBAL__N_12g0L8outputs7E>:
  436698:	00000001 00000033                       ....3...

004366a0 <_ZN12_GLOBAL__N_12g0L7inputs7E>:
  4366a0:	00000003 00000032 0000000c 0000000d     ....2...........

004366b0 <_ZN12_GLOBAL__N_12g0L7opdata7E>:
  4366b0:	00000001 00000001 00000001 00000000     ................
  4366c0:	00000001 00000001                       ........

004366c8 <_ZN12_GLOBAL__N_12g0L8outputs6E>:
  4366c8:	00000001 00000032                       ....2...

004366d0 <_ZN12_GLOBAL__N_12g0L7inputs6E>:
  4366d0:	00000003 00000031 0000000a 0000000b     ....1...........

004366e0 <_ZN12_GLOBAL__N_12g0L7opdata6E>:
  4366e0:	00000002 00000002 00000002 00000001     ................
  4366f0:	00000003 00000001 00000001              ............

004366fc <_ZN12_GLOBAL__N_12g0L8outputs5E>:
  4366fc:	00000001 00000031                       ....1...

00436704 <_ZN12_GLOBAL__N_12g0L7inputs5E>:
  436704:	00000002 00000030 00000001              ....0.......

00436710 <_ZN12_GLOBAL__N_12g0L8outputs4E>:
  436710:	00000001 00000030                       ....0...

00436718 <_ZN12_GLOBAL__N_12g0L7inputs4E>:
  436718:	00000003 0000002f 00000008 00000009     ..../...........

00436728 <_ZN12_GLOBAL__N_12g0L7opdata4E>:
  436728:	00000001 00000001 00000001 00000003     ................
  436738:	00000001 00000001                       ........

00436740 <_ZN12_GLOBAL__N_12g0L8outputs3E>:
  436740:	00000001 0000002f                       ..../...

00436748 <_ZN12_GLOBAL__N_12g0L7inputs3E>:
  436748:	00000002 0000002c 0000002e              ....,.......

00436754 <_ZN12_GLOBAL__N_12g0L7opdata3E>:
  436754:	00000000                                ....

00436758 <_ZN12_GLOBAL__N_12g0L8outputs2E>:
  436758:	00000001 0000002e                       ........

00436760 <_ZN12_GLOBAL__N_12g0L7inputs2E>:
  436760:	00000003 0000002d 00000006 00000007     ....-...........

00436770 <_ZN12_GLOBAL__N_12g0L7opdata2E>:
  436770:	00000001 00000001 00000001 00000000     ................
  436780:	00000001 00000001                       ........

00436788 <_ZN12_GLOBAL__N_12g0L8outputs1E>:
  436788:	00000001 0000002d                       ....-...

00436790 <_ZN12_GLOBAL__N_12g0L7inputs1E>:
  436790:	00000003 0000002c 00000004 00000005     ....,...........

004367a0 <_ZN12_GLOBAL__N_12g0L7opdata1E>:
  4367a0:	00000001 00000001 00000001 00000001     ................
  4367b0:	00000003 00000001 00000001              ............

004367bc <_ZN12_GLOBAL__N_12g0L8outputs0E>:
  4367bc:	00000001 0000002c                       ....,...

004367c4 <_ZN12_GLOBAL__N_12g0L7inputs0E>:
  4367c4:	00000003 00000000 00000002 00000003     ................

004367d4 <_ZN12_GLOBAL__N_12g0L7opdata0E>:
  4367d4:	00000001 00000002 00000002 00000003     ................
  4367e4:	00000001 00000001                       ........

004367ec <_ZN12_GLOBAL__N_12g0L7quant71E>:
  4367ec:	00436800 004367f8 00000000              .hC..gC.....

004367f8 <_ZN12_GLOBAL__N_12g0L12quant71_zeroE>:
  4367f8:	00000001 ffffff80                       ........

00436800 <_ZN12_GLOBAL__N_12g0L13quant71_scaleE>:
  436800:	00000001 3b800000                       .......;

00436808 <_ZN12_GLOBAL__N_12g0L18tensor_dimension71E>:
  436808:	00000004 00000001 0000000c 0000000c     ................
  436818:	00000002                                ....

0043681c <_ZN12_GLOBAL__N_12g0L7quant70E>:
  43681c:	00436830 00436828 00000000              0hC.(hC.....

00436828 <_ZN12_GLOBAL__N_12g0L12quant70_zeroE>:
  436828:	00000001 fffffff1                       ........

00436830 <_ZN12_GLOBAL__N_12g0L13quant70_scaleE>:
  436830:	00000001 3d573d6a                       ....j=W=

00436838 <_ZN12_GLOBAL__N_12g0L18tensor_dimension70E>:
  436838:	00000004 00000001 0000000c 0000000c     ................
  436848:	00000002                                ....

0043684c <_ZN12_GLOBAL__N_12g0L7quant69E>:
  43684c:	00436860 00436858 00000000              `hC.XhC.....

00436858 <_ZN12_GLOBAL__N_12g0L12quant69_zeroE>:
  436858:	00000001 ffffff80                       ........

00436860 <_ZN12_GLOBAL__N_12g0L13quant69_scaleE>:
  436860:	00000001 3cb2fba7                       .......<

00436868 <_ZN12_GLOBAL__N_12g0L18tensor_dimension69E>:
  436868:	00000004 00000001 0000000c 0000000c     ................
  436878:	00000020                                 ...

0043687c <_ZN12_GLOBAL__N_12g0L7quant68E>:
  43687c:	00436890 00436888 00000000              .hC..hC.....

00436888 <_ZN12_GLOBAL__N_12g0L12quant68_zeroE>:
  436888:	00000001 ffffff80                       ........

00436890 <_ZN12_GLOBAL__N_12g0L13quant68_scaleE>:
  436890:	00000001 3ca2355b                       ....[5.<

00436898 <_ZN12_GLOBAL__N_12g0L18tensor_dimension68E>:
  436898:	00000004 00000001 0000000c 0000000c     ................
  4368a8:	00000030                                0...

004368ac <_ZN12_GLOBAL__N_12g0L7quant67E>:
  4368ac:	004368c0 004368b8 00000000              .hC..hC.....

004368b8 <_ZN12_GLOBAL__N_12g0L12quant67_zeroE>:
  4368b8:	00000001 fffffffe                       ........

004368c0 <_ZN12_GLOBAL__N_12g0L13quant67_scaleE>:
  4368c0:	00000001 3da2c462                       ....b..=

004368c8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension67E>:
  4368c8:	00000004 00000001 0000000c 0000000c     ................
  4368d8:	00000008                                ....

004368dc <_ZN12_GLOBAL__N_12g0L7quant66E>:
  4368dc:	004368f0 004368e8 00000000              .hC..hC.....

004368e8 <_ZN12_GLOBAL__N_12g0L12quant66_zeroE>:
  4368e8:	00000001 00000005                       ........

004368f0 <_ZN12_GLOBAL__N_12g0L13quant66_scaleE>:
  4368f0:	00000001 3d3c1d9e                       ......<=

004368f8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension66E>:
  4368f8:	00000004 00000001 0000000c 0000000c     ................
  436908:	00000008                                ....

0043690c <_ZN12_GLOBAL__N_12g0L7quant65E>:
  43690c:	00436920 00436918 00000000               iC..iC.....

00436918 <_ZN12_GLOBAL__N_12g0L12quant65_zeroE>:
  436918:	00000001 ffffff80                       ........

00436920 <_ZN12_GLOBAL__N_12g0L13quant65_scaleE>:
  436920:	00000001 3cc0c0c1                       .......<

00436928 <_ZN12_GLOBAL__N_12g0L18tensor_dimension65E>:
  436928:	00000004 00000001 0000000c 0000000c     ................
  436938:	00000030                                0...

0043693c <_ZN12_GLOBAL__N_12g0L7quant64E>:
  43693c:	00436950 00436948 00000000              PiC.HiC.....

00436948 <_ZN12_GLOBAL__N_12g0L12quant64_zeroE>:
  436948:	00000001 ffffff80                       ........

00436950 <_ZN12_GLOBAL__N_12g0L13quant64_scaleE>:
  436950:	00000001 3c94eb8d                       .......<

00436958 <_ZN12_GLOBAL__N_12g0L18tensor_dimension64E>:
  436958:	00000004 00000001 0000000c 0000000c     ................
  436968:	00000030                                0...

0043696c <_ZN12_GLOBAL__N_12g0L7quant63E>:
  43696c:	00436980 00436978 00000000              .iC.xiC.....

00436978 <_ZN12_GLOBAL__N_12g0L12quant63_zeroE>:
  436978:	00000001 00000001                       ........

00436980 <_ZN12_GLOBAL__N_12g0L13quant63_scaleE>:
  436980:	00000001 3d68d66e                       ....n.h=

00436988 <_ZN12_GLOBAL__N_12g0L18tensor_dimension63E>:
  436988:	00000004 00000001 0000000c 0000000c     ................
  436998:	00000008                                ....

0043699c <_ZN12_GLOBAL__N_12g0L7quant62E>:
  43699c:	004369b0 004369a8 00000000              .iC..iC.....

004369a8 <_ZN12_GLOBAL__N_12g0L12quant62_zeroE>:
  4369a8:	00000001 fffffff1                       ........

004369b0 <_ZN12_GLOBAL__N_12g0L13quant62_scaleE>:
  4369b0:	00000001 3d353145                       ....E15=

004369b8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension62E>:
  4369b8:	00000004 00000001 0000000c 0000000c     ................
  4369c8:	00000008                                ....

004369cc <_ZN12_GLOBAL__N_12g0L7quant61E>:
  4369cc:	004369e0 004369d8 00000000              .iC..iC.....

004369d8 <_ZN12_GLOBAL__N_12g0L12quant61_zeroE>:
  4369d8:	00000001 ffffff80                       ........

004369e0 <_ZN12_GLOBAL__N_12g0L13quant61_scaleE>:
  4369e0:	00000001 3cc0c0c1                       .......<

004369e8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension61E>:
  4369e8:	00000004 00000001 0000000c 0000000c     ................
  4369f8:	00000030                                0...

004369fc <_ZN12_GLOBAL__N_12g0L7quant60E>:
  4369fc:	00436a10 00436a08 00000000              .jC..jC.....

00436a08 <_ZN12_GLOBAL__N_12g0L12quant60_zeroE>:
  436a08:	00000001 ffffff80                       ........

00436a10 <_ZN12_GLOBAL__N_12g0L13quant60_scaleE>:
  436a10:	00000001 3ca9c6b3                       .......<

00436a18 <_ZN12_GLOBAL__N_12g0L18tensor_dimension60E>:
  436a18:	00000004 00000001 0000000c 0000000c     ................
  436a28:	00000030                                0...

00436a2c <_ZN12_GLOBAL__N_12g0L7quant59E>:
  436a2c:	00436a40 00436a38 00000000              @jC.8jC.....

00436a38 <_ZN12_GLOBAL__N_12g0L12quant59_zeroE>:
  436a38:	00000001 fffffffb                       ........

00436a40 <_ZN12_GLOBAL__N_12g0L13quant59_scaleE>:
  436a40:	00000001 3d5084e9                       ......P=

00436a48 <_ZN12_GLOBAL__N_12g0L18tensor_dimension59E>:
  436a48:	00000004 00000001 0000000c 0000000c     ................
  436a58:	00000008                                ....

00436a5c <_ZN12_GLOBAL__N_12g0L7quant58E>:
  436a5c:	00436a70 00436a68 00000000              pjC.hjC.....

00436a68 <_ZN12_GLOBAL__N_12g0L12quant58_zeroE>:
  436a68:	00000001 ffffff80                       ........

00436a70 <_ZN12_GLOBAL__N_12g0L13quant58_scaleE>:
  436a70:	00000001 3cc0c0c1                       .......<

00436a78 <_ZN12_GLOBAL__N_12g0L18tensor_dimension58E>:
  436a78:	00000004 00000001 0000000c 0000000c     ................
  436a88:	00000030                                0...

00436a8c <_ZN12_GLOBAL__N_12g0L7quant57E>:
  436a8c:	00436aa0 00436a98 00000000              .jC..jC.....

00436a98 <_ZN12_GLOBAL__N_12g0L12quant57_zeroE>:
  436a98:	00000001 ffffff80                       ........

00436aa0 <_ZN12_GLOBAL__N_12g0L13quant57_scaleE>:
  436aa0:	00000001 3cc0c0c1                       .......<

00436aa8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension57E>:
  436aa8:	00000004 00000001 00000019 00000019     ................
  436ab8:	00000030                                0...

00436abc <_ZN12_GLOBAL__N_12g0L7quant56E>:
  436abc:	00436ad0 00436ac8 00000000              .jC..jC.....

00436ac8 <_ZN12_GLOBAL__N_12g0L12quant56_zeroE>:
  436ac8:	00000001 ffffff80                       ........

00436ad0 <_ZN12_GLOBAL__N_12g0L13quant56_scaleE>:
  436ad0:	00000001 3cc0c0c1                       .......<

00436ad8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension56E>:
  436ad8:	00000004 00000001 00000018 00000018     ................
  436ae8:	00000030                                0...

00436aec <_ZN12_GLOBAL__N_12g0L7quant55E>:
  436aec:	00436b00 00436af8 00000000              .kC..jC.....

00436af8 <_ZN12_GLOBAL__N_12g0L12quant55_zeroE>:
  436af8:	00000001 ffffffee                       ........

00436b00 <_ZN12_GLOBAL__N_12g0L13quant55_scaleE>:
  436b00:	00000001 3dd08007                       .......=

00436b08 <_ZN12_GLOBAL__N_12g0L18tensor_dimension55E>:
  436b08:	00000004 00000001 00000018 00000018     ................
  436b18:	00000008                                ....

00436b1c <_ZN12_GLOBAL__N_12g0L7quant54E>:
  436b1c:	00436b30 00436b28 00000000              0kC.(kC.....

00436b28 <_ZN12_GLOBAL__N_12g0L12quant54_zeroE>:
  436b28:	00000001 ffffffe9                       ........

00436b30 <_ZN12_GLOBAL__N_12g0L13quant54_scaleE>:
  436b30:	00000001 3dcaca7c                       ....|..=

00436b38 <_ZN12_GLOBAL__N_12g0L18tensor_dimension54E>:
  436b38:	00000004 00000001 00000018 00000018     ................
  436b48:	00000008                                ....

00436b4c <_ZN12_GLOBAL__N_12g0L7quant53E>:
  436b4c:	00436b60 00436b58 00000000              `kC.XkC.....

00436b58 <_ZN12_GLOBAL__N_12g0L12quant53_zeroE>:
  436b58:	00000001 ffffff80                       ........

00436b60 <_ZN12_GLOBAL__N_12g0L13quant53_scaleE>:
  436b60:	00000001 3cc0c0c1                       .......<

00436b68 <_ZN12_GLOBAL__N_12g0L18tensor_dimension53E>:
  436b68:	00000004 00000001 00000018 00000018     ................
  436b78:	00000030                                0...

00436b7c <_ZN12_GLOBAL__N_12g0L7quant52E>:
  436b7c:	00436b90 00436b88 00000000              .kC..kC.....

00436b88 <_ZN12_GLOBAL__N_12g0L12quant52_zeroE>:
  436b88:	00000001 ffffff80                       ........

00436b90 <_ZN12_GLOBAL__N_12g0L13quant52_scaleE>:
  436b90:	00000001 3cc0c0c1                       .......<

00436b98 <_ZN12_GLOBAL__N_12g0L18tensor_dimension52E>:
  436b98:	00000004 00000001 00000018 00000018     ................
  436ba8:	00000030                                0...

00436bac <_ZN12_GLOBAL__N_12g0L7quant51E>:
  436bac:	00436bc0 00436bb8 00000000              .kC..kC.....

00436bb8 <_ZN12_GLOBAL__N_12g0L12quant51_zeroE>:
  436bb8:	00000001 00000006                       ........

00436bc0 <_ZN12_GLOBAL__N_12g0L13quant51_scaleE>:
  436bc0:	00000001 3d557863                       ....cxU=

00436bc8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension51E>:
  436bc8:	00000004 00000001 00000018 00000018     ................
  436bd8:	00000008                                ....

00436bdc <_ZN12_GLOBAL__N_12g0L7quant50E>:
  436bdc:	00436bf0 00436be8 00000000              .kC..kC.....

00436be8 <_ZN12_GLOBAL__N_12g0L12quant50_zeroE>:
  436be8:	00000001 ffffff80                       ........

00436bf0 <_ZN12_GLOBAL__N_12g0L13quant50_scaleE>:
  436bf0:	00000001 3cc0c0c1                       .......<

00436bf8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension50E>:
  436bf8:	00000004 00000001 00000018 00000018     ................
  436c08:	00000030                                0...

00436c0c <_ZN12_GLOBAL__N_12g0L7quant49E>:
  436c0c:	00436c20 00436c18 00000000               lC..lC.....

00436c18 <_ZN12_GLOBAL__N_12g0L12quant49_zeroE>:
  436c18:	00000001 ffffff80                       ........

00436c20 <_ZN12_GLOBAL__N_12g0L13quant49_scaleE>:
  436c20:	00000001 3cc0c0c1                       .......<

00436c28 <_ZN12_GLOBAL__N_12g0L18tensor_dimension49E>:
  436c28:	00000004 00000001 00000031 00000031     ........1...1...
  436c38:	00000030                                0...

00436c3c <_ZN12_GLOBAL__N_12g0L7quant48E>:
  436c3c:	00436c50 00436c48 00000000              PlC.HlC.....

00436c48 <_ZN12_GLOBAL__N_12g0L12quant48_zeroE>:
  436c48:	00000001 ffffff80                       ........

00436c50 <_ZN12_GLOBAL__N_12g0L13quant48_scaleE>:
  436c50:	00000001 3cc0c0c1                       .......<

00436c58 <_ZN12_GLOBAL__N_12g0L18tensor_dimension48E>:
  436c58:	00000004 00000001 00000030 00000030     ........0...0...
  436c68:	00000030                                0...

00436c6c <_ZN12_GLOBAL__N_12g0L7quant47E>:
  436c6c:	00436c80 00436c78 00000000              .lC.xlC.....

00436c78 <_ZN12_GLOBAL__N_12g0L12quant47_zeroE>:
  436c78:	00000001 ffffffff                       ........

00436c80 <_ZN12_GLOBAL__N_12g0L13quant47_scaleE>:
  436c80:	00000001 3d979155                       ....U..=

00436c88 <_ZN12_GLOBAL__N_12g0L18tensor_dimension47E>:
  436c88:	00000004 00000001 00000030 00000030     ........0...0...
  436c98:	00000008                                ....

00436c9c <_ZN12_GLOBAL__N_12g0L7quant46E>:
  436c9c:	00436cb0 00436ca8 00000000              .lC..lC.....

00436ca8 <_ZN12_GLOBAL__N_12g0L12quant46_zeroE>:
  436ca8:	00000001 0000001c                       ........

00436cb0 <_ZN12_GLOBAL__N_12g0L13quant46_scaleE>:
  436cb0:	00000001 3d76c942                       ....B.v=

00436cb8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension46E>:
  436cb8:	00000004 00000001 00000030 00000030     ........0...0...
  436cc8:	00000008                                ....

00436ccc <_ZN12_GLOBAL__N_12g0L7quant45E>:
  436ccc:	00436ce0 00436cd8 00000000              .lC..lC.....

00436cd8 <_ZN12_GLOBAL__N_12g0L12quant45_zeroE>:
  436cd8:	00000001 ffffff80                       ........

00436ce0 <_ZN12_GLOBAL__N_12g0L13quant45_scaleE>:
  436ce0:	00000001 3cc0c0c1                       .......<

00436ce8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension45E>:
  436ce8:	00000004 00000001 00000030 00000030     ........0...0...
  436cf8:	00000008                                ....

00436cfc <_ZN12_GLOBAL__N_12g0L7quant44E>:
  436cfc:	00436d10 00436d08 00000000              .mC..mC.....

00436d08 <_ZN12_GLOBAL__N_12g0L12quant44_zeroE>:
  436d08:	00000001 ffffff80                       ........

00436d10 <_ZN12_GLOBAL__N_12g0L13quant44_scaleE>:
  436d10:	00000001 3cc0c0c1                       .......<

00436d18 <_ZN12_GLOBAL__N_12g0L18tensor_dimension44E>:
  436d18:	00000004 00000001 00000030 00000030     ........0...0...
  436d28:	00000008                                ....

00436d2c <_ZN12_GLOBAL__N_12g0L7quant43E>:
  436d2c:	00436d44 00436d38 00000000              DmC.8mC.....

00436d38 <_ZN12_GLOBAL__N_12g0L12quant43_zeroE>:
  436d38:	00000002 00000000 00000000              ............

00436d44 <_ZN12_GLOBAL__N_12g0L13quant43_scaleE>:
  436d44:	00000002 38a6c4a5 38a4a951              .......8Q..8

00436d50 <_ZN12_GLOBAL__N_12g0L18tensor_dimension43E>:
  436d50:	00000001 00000002                       ........

00436d58 <_ZN12_GLOBAL__N_12g0L13tensor_data43E>:
  436d58:	0000e67f ffff19f6                       ........

00436d60 <_ZN12_GLOBAL__N_12g0L7quant42E>:
  436d60:	00436d78 00436d6c 00000000              xmC.lmC.....

00436d6c <_ZN12_GLOBAL__N_12g0L12quant42_zeroE>:
  436d6c:	00000002 00000000 00000000              ............

00436d78 <_ZN12_GLOBAL__N_12g0L13quant42_scaleE>:
  436d78:	00000002 3b6e876e 3b6b8407              ....n.n;..k;

00436d84 <_ZN12_GLOBAL__N_12g0L18tensor_dimension42E>:
  436d84:	00000004 00000002 00000001 00000001     ................
  436d94:	00000020 00000000 00000000               ...........

00436da0 <_ZN12_GLOBAL__N_12g0L13tensor_data42E>:
  436da0:	c5e7e0c5 087f095d d7b0b32e f77fed55     ....].......U...
  436db0:	125df89f d67ae45a a51465dc 1715abbb     ..].Z.z..e......
  436dc0:	bc9a7f61 ce0e6519 3c92a03d 482307be     a....e..=..<..#H
  436dd0:	4c5963ad 34dbf6bf a8b3fc68 99735a40     .cYL...4h...@Zs.

00436de0 <_ZN12_GLOBAL__N_12g0L7quant41E>:
  436de0:	00436e70 00436dec 00000000              pnC..mC.....

00436dec <_ZN12_GLOBAL__N_12g0L12quant41_zeroE>:
  436dec:	00000020 00000000 00000000 00000000      ...............
	...

00436e70 <_ZN12_GLOBAL__N_12g0L13quant41_scaleE>:
  436e70:	00000020 383eb062 383a6d7a 3842393e      ...b.>8zm:8>9B8
  436e80:	3834b876 383aa060 383e8d9d 383714c9     v.48`.:8..>8..78
  436e90:	382ef38a 383b52ca 382fc81f 3849fe27     ...8.R;8../8'.I8
  436ea0:	3837ba26 383266e8 383d1d5f 383b15b9     &.78.f28_.=8..;8
  436eb0:	383f3614 3838a9a5 383a03b8 383ec266     .6?8..88..:8f.>8
  436ec0:	38333346 38338d17 3833e69e 385c3fd5     F338..38..38.?\8
  436ed0:	383776f6 38403486 3832137e 3831d50d     .v78.4@8~.28..18
  436ee0:	38329824 38399a5a 383e05b7 383ac171     $.28Z.98..>8q.:8
  436ef0:	382d9a28                                (.-8

00436ef4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension41E>:
  436ef4:	00000001 00000020 00000000              .... .......

00436f00 <_ZN12_GLOBAL__N_12g0L13tensor_data41E>:
  436f00:	000001dd 000001e5 000002c6 fffffe54     ............T...
  436f10:	000001f0 00000159 00000212 fffffec7     ....Y...........
  436f20:	fffffd35 ffffff2f 000002c6 000001aa     5.../...........
  436f30:	00000085 0000015c 0000019e fffffee0     ....\...........
  436f40:	fffffed6 000001fb fffffe79 0000017b     ........y...{...
  436f50:	fffffe80 fffffdc9 00000482 00000157     ............W...
  436f60:	00000153 ffffff92 ffffff27 ffffff90     S.......'.......
  436f70:	00000151 000001df 0000018c fffffe8a     Q...............

00436f80 <_ZN12_GLOBAL__N_12g0L7quant40E>:
  436f80:	00437010 00436f8c 00000000              .pC..oC.....

00436f8c <_ZN12_GLOBAL__N_12g0L12quant40_zeroE>:
  436f8c:	00000020 00000000 00000000 00000000      ...............
	...

00437010 <_ZN12_GLOBAL__N_12g0L13quant40_scaleE>:
  437010:	00000020 3b167969 3b131c91 3b194371      ...iy.;...;qC.;
  437020:	3b0e9bab 3b1344bb 3b165df9 3b10788b     ...;.D.;.].;.x.;
  437030:	3b0a0e37 3b13d185 3b0ab5f7 3b1f64e8     7..;...;...;.d.;
  437040:	3b10fb09 3b0cc74a 3b153b64 3b13a155     ...;J..;d;.;U..;
  437050:	3b16e2e9 3b11b806 3b12c91d 3b1687a0     ...;...;...;...;
  437060:	3b0d688e 3b0daf6e 3b0df614 3b2dccf2     .h.;n..;...;..-;
  437070:	3b10c604 3b17abb2 3b0c8577 3b0c5431     ...;...;w..;1T.;
  437080:	3b0cee24 3b1275f7 3b15f2bc 3b135ed3     $..;.u.;...;.^.;
  437090:	3b08fdac                                ...;

00437094 <_ZN12_GLOBAL__N_12g0L18tensor_dimension40E>:
  437094:	00000004 00000020 00000001 00000001     .... ...........
  4370a4:	00000030 00000000 00000000              0...........

004370b0 <_ZN12_GLOBAL__N_12g0L13tensor_data40E>:
  4370b0:	b12b4821 520b19c5 b495eb01 42d67fa4     !H+....R.......B
  4370c0:	10266729 22e1a6e7 7ef7a877 0e56bd47     )g&...."w..~G.V.
  4370d0:	c7265ca8 f1aa19f2 ba76e1aa 70bcf957     .\&.......v.W..p
  4370e0:	2c550850 7f0bbe26 4cb4492c a7239c92     P.U,&...,I.L..#.
  4370f0:	ea15e3c4 baac5f70 c6d2013a c5f03764     ....p_..:...d7..
  437100:	b5a7a99b 0fd4c32d 1bfd790e 2bdf0834     ....-....y..4..+
  437110:	a7b5eb10 154f1ddb ddc9e41e 94c55e3b     ......O.....;^..
  437120:	2ddd38d2 252fdcbb d2e943b4 2cc1f2f5     .8.-../%.C.....,
  437130:	1743e741 52d31abf 547fe73e 344f09ce     A.C....R>..T..O4
  437140:	a63d64a8 494c6968 ba2b0f66 7a6d286b     .d=.hiLIf.+.k(mz
  437150:	68bf4881 02a84dae 0e9a4d67 6fcb1f34     .H.h.M..gM..4..o
  437160:	9a191c98 c1a5d399 1bb8ce9c d9d88ba9     ................
  437170:	fb5f29ae d9ee114b cfa4491f a42768c1     .)_.K....I...h'.
  437180:	bce53041 ea9256ab 326294ed 297f9712     A0...V....b2...)
  437190:	cecd319e 9e92fa69 a1a16a75 deda5cfb     .1..i...uj...\..
  4371a0:	c9d773a4 44d8ed24 2d3aaff9 697528b3     .s..$..D..:-.(ui
  4371b0:	fe6e7f8c 72cf0e76 cad2389a 05492deb     ..n.v..r.8...-I.
  4371c0:	3e4946ae d6c4c771 c3f60357 fa0f7c74     .FI>q...W...t|..
  4371d0:	9f0af878 9d3fe797 7f285621 7eecbc3d     x.....?.!V(.=..~
  4371e0:	632d68b7 23617892 9ca035c7 390aa5d5     .h-c.xa#.5.....9
  4371f0:	564f12b4 3e0ed194 0a5532a9 eaa1599a     ..OV...>.2U..Y..
  437200:	81c4334f badbe370 ddf6a314 4e6873cb     O3..p........shN
  437210:	37cdfa4f bdf1974b 7244b66a 0aeed998     O..7K...j.Dr....
  437220:	d747cf84 ab00fb7b 5aba208c c4a4b507     ..G.{.... .Z....
  437230:	e781c3bb 8fe0f836 926e8958 ee8190da     ....6...X.n.....
  437240:	b24e440f b9523059 9b0295b7 f08ea6ab     .DN.Y0R.........
  437250:	6397eac7 acbe8d81 db1b17e3 51e1bcf0     ...c...........Q
  437260:	5016dadb 21553d1b 3c492c07 e8dc376e     ...P.=U!.,I<n7..
  437270:	a8b3bf11 e516559e 35e1bba3 33dc8141     .....U.....5A..3
  437280:	e277bead bcb5fbdf 09005b6c ec203c27     ..w.....l[..'< .
  437290:	b9bb38af b48e55de 4d619d41 0b482806     .8...U..A.aM.(H.
  4372a0:	2ab61d7f 56edd605 ebf66c1e a800c1a4     ...*...V.l......
  4372b0:	af77324b 7b44be78 442d1e58 11082df2     K2w.x.D{X.-D.-..
  4372c0:	aec3415d aee00367 fe2e3db4 a23fbf20     ]A..g....=.. .?.
  4372d0:	d6f85490 b84adede 62376baf 330a3a11     .T....J..k7b.:.3
  4372e0:	bb905b28 b6cd7f14 8a75a13d eda32664     ([......=.u.d&..
  4372f0:	7fa6e6ad aabdc80b 32e0f8df 4fc997b4     ...........2...O
  437300:	7d1bd745 334ade94 0fc46ff9 545b9b6e     E..}..J3.o..n.[T
  437310:	ab03db40 4d5a9f0b b9355d61 6cc9f72a     @.....ZMa]5.*..l
  437320:	b45c1b41 c9322674 251c9e28 343264fa     A.\.t&2.(..%.d24
  437330:	620f3d4b b7f6f57f bce0b370 fdd2a62a     K=.b....p...*...
  437340:	fb208bd0 1d4d944d 3f4ec6f8 3c48f94a     .. .M.M...N?J.H<
  437350:	3d61c9db fa19b240 c2e74d04 29ec7607     ..a=@....M...v.)
  437360:	a4f5eba1 ded22e00 1f53f1e2 dc56b652     ..........S.R.V.
  437370:	1f7d63e7 a6ab5124 1d7b7f72 d702be5a     .c}.$Q..r.{.Z...
  437380:	b4fd3917 2e0556a3 d46cca84 dbd1bfee     .9...V....l.....
  437390:	0d9854d8 e1c0a3dd 695df8f8 1881a8e8     .T........]i....
  4373a0:	dfce5c34 8ed36bdf c06674c2 9aa32650     4\...k...tf.P&..
  4373b0:	779514f6 6a62b853 b45625d0 e18154c8     ...wS.bj.%V..T..
  4373c0:	dfbe4f35 0c93e584 12c3b664 1f6c5ec7     5O......d....^l.
  4373d0:	0b11cec5 3f855bed c74e1b2b c091ef96     .....[.?+.N.....
  4373e0:	d99762f4 6fdd2eed f568e929 b72b70e3     .b.....o).h..p+.
  4373f0:	4fef5818 f4c8f71b bbcd13a3 a14c38e0     .X.O.........8L.
  437400:	2fe6d635 2bead12e a2e97fe0 a2b61c7b     5../...+....{...
  437410:	e48a8849 97890839 aea727c7 161457fa     I...9....'...W..
  437420:	d1ac5111 1d102ca4 9521eb18 891a81e2     .Q...,....!.....
  437430:	bb6747e0 a4bbd919 c0691099 bf5c1ee3     .Gg.......i...\.
  437440:	539d444c 0eca5677 db08e36d ce7e584d     LD.SwV..m...MX~.
  437450:	7de7a423 7f21b3ac ec14fc57 927a345a     #..}..!.W...Z4z.
  437460:	5aaae93d 13bfed99 2e38304c 6c9c37e6     =..Z....L08..7.l
  437470:	40e5a2f2 2b521361 fb16aebd a3fa9edd     ...@a.R+........
  437480:	266cbeeb e0628138 11b37385 01c6a7ff     ..l&8.b..s......
  437490:	bb546a38 188a0f6b eb9c8266 cdce0c29     8jT.k...f...)...
  4374a0:	a96a7245 cdabcade 9d1273e6 9899b4bf     Erj......s......
  4374b0:	91ade5dc c66e37dc ee492168 036d95c4     .....7n.h!I...m.
  4374c0:	66622392 1b82a087 07ce3803 448165ae     .#bf.....8...e.D
  4374d0:	f548c6fc 4b62aea7 1d0be61e a3e728da     ..H...bK.....(..
  4374e0:	4fb00ec3 5706783e 2fe8158f c2cdbee2     ...O>x.W.../....
  4374f0:	48347fd8 cfe6af23 0bcbf4e5 e17ceb50     ..4H#.......P.|.
  437500:	da1001de 134812a9 9a3ca421 cb4c6092     ......H.!.<..`L.
  437510:	203f3220 ff426c3c c6a4d044 7d025aa1      2? <lB.D....Z.}
  437520:	ed71bd40 ab517602 926c377f 6da504a6     @.q..vQ..7l....m
  437530:	69785c03 72a0f44a 61b2ab0a c0020a1e     .\xiJ..r...a....
  437540:	5ecf31ea 28eeef7f d0b149f6 ef6c7e62     .1.^...(.I..b~l.
  437550:	eefad468 aab1db18 2bb7770e c33d53df     h........w.+.S=.
  437560:	57f3f7e9 2f9613fa 333f39db 98584c98     ...W.../.9?3.LX.
  437570:	0395eedb 65e06c43 b5d9a116 42914245     ....Cl.e....EB.B
  437580:	7f64bcb9 79943a82 0d48678e 8d82a2ec     ..d..:.y.gH.....
  437590:	fafaad4f d3699056 01a1d82b ea24b4d2     O...V.i.+.....$.
  4375a0:	aaa70878 6049c52f 303fd9f3 d1c8f515     x.../.I`..?0....
  4375b0:	7a2e38f0 728160fd 98de0364 0e7d36f5     .8.z.`.rd....6}.
  4375c0:	7b852c3b fb04e0de f6df5e9d cc534e86     ;,.{.....^...NS.
  4375d0:	88f18628 9c5839e3 3cd54e8d 8143bd61     (....9X..N.<a.C.
  4375e0:	6e26a375 d3ae3b74 42e23923 b473a147     u.&nt;..#9.BG.s.
  4375f0:	52d67990 009b6b15 599ac747 911fbb49     .y.R.k..G..YI...
  437600:	693255b7 ac0e546f 7f3ec258 30f220d2     .U2ioT..X.>.. .0
  437610:	c9e013d3 7adb6c2e 3c00eea6 06f9787c     .....l.z...<|x..
  437620:	102ff01e 992512f3 b8d3f5dc dcbefa4e     ../...%.....N...
  437630:	71c9685a abb0c729 e792d16c 27d066de     Zh.q)...l....f.'
  437640:	00747290 e11eadf2 15f4dd7f 089a47c0     .rt..........G..
  437650:	c9ada1b9 0b3e6749 451e30bd 819d4165     ....Ig>..0.EeA..
  437660:	0f5a785f b97eb7fb 16d9411f 3410db5a     _xZ...~..A..Z..4
  437670:	201ddff6 e955e1ae 9fbdacfc e0df7d5c     ... ..U.....\}..
  437680:	d7497f27 a363f3b3 b741bfa1 1c5e9fa7     '.I...c...A...^.
  437690:	1ada30f9 0464d0e2 bae35b3a 43374fe5     .0....d.:[...O7C
  4376a0:	6d3a265f a9ee732f 2c9969f7 f82b6715     _&:m/s...i.,.g+.

004376b0 <_ZN12_GLOBAL__N_12g0L7quant39E>:
  4376b0:	00437780 004376bc 00000000              .wC..vC.....

004376bc <_ZN12_GLOBAL__N_12g0L12quant39_zeroE>:
  4376bc:	00000030 00000000 00000000 00000000     0...............
	...

00437780 <_ZN12_GLOBAL__N_12g0L13quant39_scaleE>:
  437780:	00000030 3970a758 397e8f19 393fb770     0...X.p9..~9p.?9
  437790:	398e8fdf 39290742 39829d40 3928ca78     ...9B.)9@..9x.(9
  4377a0:	3911f3b2 391e5066 39441a21 398736ad     ...9fP.9!.D9.6.9
  4377b0:	38b6ee17 39358b9b 39289190 39077cb0     ...8..59..(9.|.9
  4377c0:	391c3ee3 397116fd 3903d296 3969d4d1     .>.9..q9...9..i9
  4377d0:	39337bd7 392d9269 38392121 387fbf8e     .{39i.-9!!98...8
  4377e0:	3984e761 395e25b8 3927ad48 396305b5     a..9.%^9H.'9..c9
  4377f0:	395ccd39 397b8b4f 393be62a 39109306     9.\9O.{9*.;9...9
  437800:	38b5ff88 394edd50 39a05831 38d3804e     ...8P.N91X.9N..8
  437810:	3938cd2c 38dfaaed 3968bb72 398ab2ba     ,.89...8r.h9...9
  437820:	39891967 3922cdde 39788ea2 38a2cdc3     g..9.."9..x9...8
  437830:	3996faf9 3997394b 3955b0e3 395502eb     ...9K9.9..U9..U9
  437840:	39138e4c                                L..9

00437844 <_ZN12_GLOBAL__N_12g0L18tensor_dimension39E>:
  437844:	00000001 00000030 00000000              ....0.......

00437850 <_ZN12_GLOBAL__N_12g0L13tensor_data39E>:
  437850:	000005c7 fffffab7 00000f83 000007af     ................
  437860:	00000c84 000000ab 000007af 0000157e     ............~...
  437870:	fffff4e0 fffff89b fffffb21 00002303     ........!....#..
  437880:	00000e46 00000ee9 000019db fffff170     F...........p...
  437890:	fffff5f4 00001ec8 00000b20 000011e4     ........ .......
  4378a0:	00001302 00005fdf 00003dca 00000340     ....._...=..@...
  4378b0:	fffff8ed 00000640 fffffe56 fffffbaa     ....@...V.......
  4378c0:	00000750 00000946 0000133c 00002729     P...F...<...)'..
  4378d0:	fffffc3c 000000ef 000022dc 00000d08     <........"......
  4378e0:	00001f6b 000009d9 0000053d fffffa6b     k.......=...k...
  4378f0:	00000f39 fffff864 00002e28 fffffe56     9...d...(...V...
  437900:	00000180 00000aad fffff6f1 00001510     ................

00437910 <_ZN12_GLOBAL__N_12g0L7quant38E>:
  437910:	004379e0 0043791c 00000000              .yC..yC.....

0043791c <_ZN12_GLOBAL__N_12g0L12quant38_zeroE>:
  43791c:	00000030 00000000 00000000 00000000     0...............
	...

004379e0 <_ZN12_GLOBAL__N_12g0L13quant38_scaleE>:
  4379e0:	00000030 3b3d3ffe 3b482f61 3b16c40d     0....?=;a/H;...;
  4379f0:	3b6038ad 3b04ec80 3b4d6e14 3b04bcb2     .8`;...;.nM;...;
  437a00:	3ae58d97 3af8ff08 3b1a36ef 3b54a9ef     ...:...:.6.;..T;
  437a10:	3a8fdb2a 3b0ec466 3b048ff2 3ad5180c     *..:f..;...;...:
  437a20:	3af5be37 3b3d97ca 3acf549a 3b37e286     7..:..=;.T.:..7;
  437a30:	3b0d255d 3b087f34 3a1195f0 3a491ece     ]%.;4..;...:..I:
  437a40:	3b5107f1 3b2eb253 3b03dc6d 3b3287be     ..Q;S..;m..;..2;
  437a50:	3b2da36a 3b45d072 3b13c386 3ae362e9     j.-;r.E;...;.b.:
  437a60:	3a8f1f90 3b22ad9c 3b7c3090 3aa6530f     ...:..";.0|;.S.:
  437a70:	3b1153ea 3aafe466 3b370541 3b5a24f3     .S.;f..:A.7;.$Z;
  437a80:	3b57a12b 3b000775 3b43771b 3a800760     +.W;u..;.wC;`..:
  437a90:	3b6d7639 3b6dd83c 3b280be7 3b278318     9vm;<.m;..(;..';
  437aa0:	3ae81363                                c..:

00437aa4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension38E>:
  437aa4:	00000004 00000030 00000001 00000001     ....0...........
  437ab4:	00000008 00000000 00000000              ............

00437ac0 <_ZN12_GLOBAL__N_12g0L13tensor_data38E>:
  437ac0:	ef7f0df2 a9fe36fd bb44c95b 127fb8ec     .....6..[.D.....
  437ad0:	b6463937 e57f17c2 eb071a02 097fc113     79F.............
  437ae0:	e1d1d97f 45e2c89e fe7f4821 da17d913     .......E!H......
  437af0:	7fe97169 5f1b15b4 2705ffea dc81901c     iq....._...'....
  437b00:	4dda3e73 cd811ec1 32d5e97f a61ad304     s>.M.......2....
  437b10:	09f41342 0c267fe7 8c00ec7f 49c2c15b     B.....&.....[..I
  437b20:	da506dc1 7fa9440d 0eb1027f aa16b715     .mP..D..........
  437b30:	efff206c f1b91c81 d796061b 746ace81     l ............jt
  437b40:	026dcefe debdce7f f75df11c fdb4c87f     ..m.......].....
  437b50:	377fda77 fdd81bdc b9443054 d40e81cf     w..7....T0D.....
  437b60:	7f40db35 50abc407 81bff25a 6906c631     5.@....PZ...1..i
  437b70:	c5b981c2 b87fcf42 d21c12ef e4098196     ....B...........
  437b80:	35400c7f 4aa0e2f3 b2e73153 7fedf8f0     ..@5...JS1......
  437b90:	8119e3a7 a7d0fd6d c5f37f70 0a1f430e     ....m...p....C..
  437ba0:	0f067f23 6fedd5fa 6c6b1377 3381e52b     #......ow.kl+..3
  437bb0:	69be9d7f 54b3062d 3212aa5f 3e818aad     ...i-..T_..2...>
  437bc0:	811cb899 97d0e559 181bfd1c 2c7fbb1a     ....Y..........,
  437bd0:	a36248b7 67b9b37f 6b0e0fb9 ea267f05     .Hb....g...k..&.
  437be0:	81e0235f 2f17f52c 02f12524 2d3e7fbf     _#..,../$%....>-
  437bf0:	6c14bee9 7f043310 2881000b 42e3d9fd     ...l.3.....(...B
  437c00:	08a91448 7fc334cd cf18ff2c fded818c     H....4..,.......
  437c10:	70ae40b4 81de59f0 81de00ef b5f604f0     .@.p.Y..........
  437c20:	4e21214e 21c67f13 16ea5107 f5b0df7f     N!!N...!.Q......
  437c30:	7ffba638 60d1255b f137a0f6 202c187f     8...[%.`..7..., 

00437c40 <_ZN12_GLOBAL__N_12g0L7quant37E>:
  437c40:	00437c70 00437c4c 00000000              p|C.L|C.....

00437c4c <_ZN12_GLOBAL__N_12g0L12quant37_zeroE>:
  437c4c:	00000008 00000000 00000000 00000000     ................
	...

00437c70 <_ZN12_GLOBAL__N_12g0L13quant37_scaleE>:
  437c70:	00000008 39527656 3945db64 38a95356     ....VvR9d.E9VS.8
  437c80:	38fb02a0 38ee503e 391b4229 38d728b9     ...8>P.8)B.9.(.8
  437c90:	390e268d                                .&.9

00437c94 <_ZN12_GLOBAL__N_12g0L18tensor_dimension37E>:
  437c94:	00000001 00000008 00000000              ............

00437ca0 <_ZN12_GLOBAL__N_12g0L13tensor_data37E>:
  437ca0:	ffffdeb6 fffff263 000006b7 ffffdbb8     ....c...........
  437cb0:	00000b93 fffff4b8 00002159 000024d0     ........Y!...$..

00437cc0 <_ZN12_GLOBAL__N_12g0L7quant36E>:
  437cc0:	00437cf0 00437ccc 00000000              .|C..|C.....

00437ccc <_ZN12_GLOBAL__N_12g0L12quant36_zeroE>:
  437ccc:	00000008 00000000 00000000 00000000     ................
	...

00437cf0 <_ZN12_GLOBAL__N_12g0L13quant36_scaleE>:
  437cf0:	00000008 3c0bc295 3c0363b0 3b60e2ae     .......<.c.<..`;
  437d00:	3ba6afbe 3b9e4149 3bce33de 3b8ee10b     ...;IA.;.3.;...;
  437d10:	3bbccb33                                3..;

00437d14 <_ZN12_GLOBAL__N_12g0L18tensor_dimension36E>:
  437d14:	00000004 00000008 00000001 00000001     ................
  437d24:	00000030 00000000 00000000              0...........

00437d30 <_ZN12_GLOBAL__N_12g0L13tensor_data36E>:
  437d30:	e413ec7f 25073b1c 0635a773 cd0f40d1     .....;.%s.5..@..
  437d40:	ebece012 e20bc507 d4dbd7c4 22df56e1     .............V."
  437d50:	dd0bd217 0dc1c23a 01b0e716 d535e239     ....:.......9.5.
  437d60:	3af80031 1f123934 06ffb241 f4dc172a     1..:49..A...*...
  437d70:	fcbbd5de 4c31d106 29fcbefd 7fc837e7     ......1L...).7..
  437d80:	eaeb2ce8 ebf7f1c6 2bdcefd1 ac08fc15     .,.........+....
  437d90:	23aee9d9 33f0e7b6 dda7ac9e f7812cd7     ...#...3.....,..
  437da0:	e723b148 f9ed516f 9d135429 fc320dd3     H.#.oQ..)T....2.
  437db0:	ba4020e0 6245fe3b fd245cd1 43d440b0     . @.;.Eb.\$..@.C
  437dc0:	25f2effa 29f807ec e281534a 47e7ea13     ...%...)JS.....G
  437dd0:	2cfeedcc 0d4901e7 30d30704 e6d51edf     ...,..I....0....
  437de0:	0e1d160a 0724fb2e 143e4fc3 d6def21d     ......$..O>.....
  437df0:	d30fb8e1 bcc36104 2247cc05 17ebe5c0     .....a....G"....
  437e00:	29e80c42 e97ae3b2 09fbeb9d 3defef15     B..)..z........=
  437e10:	34e42ac7 19f628dc 29d824d6 02f0347f     .*.4.(...$.).4..
  437e20:	813abdbf c8de12e9 48cd48f8 0d3416b3     ..:......H.H..4.
  437e30:	11443749 c2ed011d d300ba2e b627d7f3     I7D...........'.
  437e40:	fd39d9fb 3a291dee e5140f5e 21e5f8f2     ..9...):^......!
  437e50:	192abdc6 bf05bfc3 2c89159a 1538d717     ..*........,..8.
  437e60:	7f0c18e0 364c00f1 1936f2b9 c2e7d80f     ......L6..6.....
  437e70:	aa473fe2 df3f49d9 c35440c1 0ae0d7fb     .?G..I?..@T.....
  437e80:	ef0dfd13 d8d81609 1d5de081 061fea0a     ..........].....
  437e90:	f0012b11 d5f10fd5 0fdb0026 d1e3e9f7     .+......&.......
  437ea0:	08e2cea1 01e6e435 ea2c0334 1028d713     ....5...4.,...(.

00437eb0 <_ZN12_GLOBAL__N_12g0L7quant35E>:
  437eb0:	00437f80 00437ebc 00000000              ..C..~C.....

00437ebc <_ZN12_GLOBAL__N_12g0L12quant35_zeroE>:
  437ebc:	00000030 00000000 00000000 00000000     0...............
	...

00437f80 <_ZN12_GLOBAL__N_12g0L13quant35_scaleE>:
  437f80:	00000030 39760044 392406b7 38b9edc8     0...D.v9..$9...8
  437f90:	38d66bab 393d9f54 38f69194 3982fffd     .k.8T.=9...8...9
  437fa0:	38f98d62 39187c00 39be1718 399946d1     b..8.|.9...9.F.9
  437fb0:	386e32ea 397786b9 3899c46c 3913588b     .2n8..w9l..8.X.9
  437fc0:	3937b111 38ebe094 38fdf02c 3907efce     ..79...8,..8...9
  437fd0:	396965bb 38abfdd7 391ec739 394af743     .ei9...89..9C.J9
  437fe0:	393657de 3920654c 399c526b 395c3fb1     .W69Le 9kR.9.?\9
  437ff0:	39c01ebd 38d84804 38a31879 3941ccbf     ...9.H.8y..8..A9
  438000:	39483f66 38b1f701 39970a46 38a6cee5     f?H9...8F..9...8
  438010:	3911fd16 3902f9b4 38a64bf9 38a16b0b     ...9...9.K.8.k.8
  438020:	38a4fd2b 39594fa6 38d1ef9a 3952dd81     +..8.OY9...8..R9
  438030:	39220e13 3915489a 389d9de9 38ebb5bb     .."9.H.9...8...8
  438040:	3917074f                                O..9

00438044 <_ZN12_GLOBAL__N_12g0L18tensor_dimension35E>:
  438044:	00000001 00000030 00000000              ....0.......

00438050 <_ZN12_GLOBAL__N_12g0L13tensor_data35E>:
  438050:	fffff53a fffffc13 00002da6 000004ff     :........-......
  438060:	fffffd09 ffffe510 fffffbb1 0000358f     .............5..
  438070:	00001826 fffff139 ffffeb96 ffffe498     &...9...........
  438080:	fffffe8c 00004a3c 0000294b fffffebd     ....<J..K)......
  438090:	000018f1 ffffe863 00000cbc fffff5ac     ....c...........
  4380a0:	000040df ffffef71 fffff994 fffffadb     .@..q...........
  4380b0:	0000114b ffffeebb 00000105 fffff938     K...........8...
  4380c0:	00001fdb ffff84df ffffef7a 00000127     ........z...'...
  4380d0:	fffff0d5 fffff674 fffffc06 fffff8ca     ....t...........
  4380e0:	00002bcf ffffe9bb ffffff6a ffffc212     .+......j.......
  4380f0:	fffff9cf 00001d67 ffffe766 fffffbd8     ....g...f.......
  438100:	00000bc8 ffffe5b9 00002a52 fffff178     ........R*..x...

00438110 <_ZN12_GLOBAL__N_12g0L7quant34E>:
  438110:	004381e0 0043811c 00000003              ..C...C.....

0043811c <_ZN12_GLOBAL__N_12g0L12quant34_zeroE>:
  43811c:	00000030 00000000 00000000 00000000     0...............
	...

004381e0 <_ZN12_GLOBAL__N_12g0L13quant34_scaleE>:
  4381e0:	00000030 3c53716f 3c0cfbe9 3b9fcf4d     0...oqS<...<M..;
  4381f0:	3bb84c8d 3c22fc05 3bd3ee56 3c6131c9     .L.;.."<V..;.1a<
  438200:	3bd67ed7 3c031045 3ca362f6 3c83be98     .~.;E..<.b.<...<
  438210:	3b4cbcab 3c54c10b 3b842a8e 3bfd4b37     ..L;..T<.*.;7K.;
  438220:	3c1de30b 3bcabdd3 3bda43e7 3be9ae57     ...<...;.C.;W..;
  438230:	3c489c29 3b93d495 3c087926 3c2e7416     ).H<...;&y.<.t.<
  438240:	3c1cba56 3c09dd0e 3c865cae 3c3d4efa     V..<...<.\.<.N=<
  438250:	3ca5219b 3bb9e5fc 3b8c2f23 3c269335     .!.<...;#/.;5.&<
  438260:	3c2c1dfa 3b98f6ee 3c81d27b 3b8f600b     ..,<...;{..<.`.;
  438270:	3bfaf5ec 3be126fb 3b8eef83 3b8abe08     ...;.&.;...;...;
  438280:	3b8dcfbe 3c3ac895 3bb471c4 3c353e3f     ...;..:<.q.;?>5<
  438290:	3c0b4a29 3c004ffb 3b87799a 3bca98ff     )J.<.O.<.y.;...;
  4382a0:	3c01cfef                                ...<

004382a4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension34E>:
  4382a4:	00000004 00000001 00000003 00000003     ................
  4382b4:	00000030 00000000 00000000              0...........

004382c0 <_ZN12_GLOBAL__N_12g0L13tensor_data34E>:
  4382c0:	39ef5050 10c90302 0f23c329 2ae28807     PP.9....).#....*
  4382d0:	0ab8276b eceb1550 fb161d43 ccf51dcd     k'..P...C.......
  4382e0:	1b6c0e7f 217f0fdc cf994bb5 03daa71e     ..l....!.K......
  4382f0:	5dad7f68 81be3a0d 2b7f1f36 faeaebe8     h..].:..6..+....
  438300:	23af7fc5 e52c7f3f 7f0b0517 81ed6a81     ...#?.,......j..
  438310:	5318e3fe 23687fb8 ff53b881 59812608     ...S..h#..S..&.Y
  438320:	27fc3337 1bd9ff04 0d22b620 ece3af02     73.'.... .".....
  438330:	feddf35e 27e81c48 f80d3d31 e0ee03fc     ^...H..'1=......
  438340:	135a0f66 056c18f0 483e4ad5 ee0a6d22     f.Z...l..J>H"m..
  438350:	5b81d0e7 e03e3416 7fd42e24 b3e9f27f     ...[.4>.$.......
  438360:	f8474ce0 9c161193 0a113e17 321e79f7     .LG......>...y.2
  438370:	21227f38 56caf6a6 815c0250 7ff3980d     8."!...VP.\.....
  438380:	81cd9d27 a97f0a7f 4e057f81 ea7f7f92     '..........N....
  438390:	7f124a81 fb7f0220 b1257f81 5d813c9b     .J.. .....%..<.]
  4383a0:	7a249f4c 7fe6367f 03eaba78 2dfbbc6c     L.$z.6..x...l..-
  4383b0:	398bd6ee e92e7fee 4cdc1f23 eaddfbee     ...9....#..L....
  4383c0:	dd7f55bc 7fb91b81 1a131504 26296f3a     .U..........:o)&
  4383d0:	81defefd 2400dccc 7cf4442d 54dc7ff9     .......$-D.|...T
  4383e0:	0e00ece0 06f10af6 0f04f41f 21dda719     ...............!
  4383f0:	070b0d5c fdfc0cc6 fbf6fe16 08320dff     \.............2.
  438400:	ff7f0d15 334847f2 df7f4911 f6f482ca     .....GH3.I......
  438410:	21b4fc81 f6c6fc81 46b4721a 7feedae9     ...!.....r.F....
  438420:	e6a832ac e20919ba e38136ed 10467fc4     .2.......6....F.
  438430:	171ce91b 3ec43ee5 e18681c5 678e5081     .....>.>.....P.g
  438440:	1107ece5 02f20209 f9f8d817 05e1aef8     ................
  438450:	125fe462 2206f9bd f1f4ef15 0a300e0b     b._...."......0.
  438460:	20510d1b 136c43fb 31c74914 d7f175e4     ..Q .Cl..I.1.u..

00438470 <_ZN12_GLOBAL__N_12g0L7quant33E>:
  438470:	00438540 0043847c 00000000              @.C.|.C.....

0043847c <_ZN12_GLOBAL__N_12g0L12quant33_zeroE>:
  43847c:	00000030 00000000 00000000 00000000     0...............
	...

00438540 <_ZN12_GLOBAL__N_12g0L13quant33_scaleE>:
  438540:	00000030 37c2b7a8 390acfef 3935384e     0......7...9N859
  438550:	3945ff6b 393b3edb 393cd00e 38fa72f0     k.E9.>;9..<9.r.8
  438560:	3923abb9 38ed4a5e 38d743c2 388065ba     ..#9^J.8.C.8.e.8
  438570:	391d4bf3 38b6752a 392eb625 39198d8c     .K.9*u.8%..9...9
  438580:	392b3361 38e2a95b 3959e2cb 38a1e0d9     a3+9[..8..Y9...8
  438590:	3935f013 3909f3ce 3901744d 391c605e     ..59...9Mt.9^`.9
  4385a0:	38e7dcd8 3935d875 394105fb 39377c71     ...8u.59..A9q|79
  4385b0:	388b4811 3962f1f6 390085e1 393955ae     .H.8..b9...9.U99
  4385c0:	3894b182 393f9b6c 391c7fac 390f09ea     ...8l.?9...9...9
  4385d0:	397c57d2 395fb028 3916c958 39554b9a     .W|9(._9X..9.KU9
  4385e0:	3938c9df 38855583 394cd8f9 389553c6     ..89.U.8..L9.S.8
  4385f0:	390e0ead 3918b9fd 392d260f 3909146b     ...9...9.&-9k..9
  438600:	3910efaf                                ...9

00438604 <_ZN12_GLOBAL__N_12g0L18tensor_dimension33E>:
  438604:	00000001 00000030 00000000              ....0.......

00438610 <_ZN12_GLOBAL__N_12g0L13tensor_data33E>:
  438610:	0000bbf5 00001788 00000686 000004f7     ................
  438620:	00000fce 00000a9f 00001a90 00001053     ............S...
  438630:	00001015 ffffe3a5 0000418d 000005e6     .........A......
  438640:	00002432 000008d7 00001232 0000094e     2$......2...N...
  438650:	00001b57 fffffc7d 00002f26 0000004a     W...}...&/..J...
  438660:	000013ce fffffcea 00000ea7 0000188c     ................
  438670:	00000896 fffff2bc 00000973 0000380c     ........s....8..
  438680:	00000371 000017b3 000006f8 0000335d     q...........]3..
  438690:	000002b8 00001489 fffffd3e fffff9ba     ........>.......
  4386a0:	000009ba 000009af 00000092 000007f0     ................
  4386b0:	00003a4b fffffc4b 00002f3b 00000c71     K:..K...;/..q...
  4386c0:	0000068a 000011b0 0000120e fffff625     ............%...

004386d0 <_ZN12_GLOBAL__N_12g0L7quant32E>:
  4386d0:	004387a0 004386dc 00000000              ..C...C.....

004386dc <_ZN12_GLOBAL__N_12g0L12quant32_zeroE>:
  4386dc:	00000030 00000000 00000000 00000000     0...............
	...

004387a0 <_ZN12_GLOBAL__N_12g0L13quant32_scaleE>:
  4387a0:	00000030 39d61670 3b189f01 3b473f5a     0...p..9...;Z?G;
  4387b0:	3b59b1bd 3b4ddf5a 3b4f9877 3b09ae81     ..Y;Z.M;w.O;...;
  4387c0:	3b33f3da 3b0272ab 3aecadce 3a8d2b91     ..3;.r.;...:.+.:
  4387d0:	3b2cf1c1 3ac89bbb 3b401771 3b28d403     ..,;...:q.@;..(;
  4387e0:	3b3c3b45 3af935a5 3b6f8f98 3ab1fb54     E;<;.5.:..o;T..:
  4387f0:	3b480967 3b17acfa 3b0e550e 3b2beebc     g.H;...;.U.;..+;
  438800:	3afeed96 3b47ef6f 3b54399e 3b49bd33     ...:o.G;.9T;3.I;
  438810:	3a992316 3b798579 3b0d4eea 3b4bc584     .#.:y.y;.N.;..K;
  438820:	3aa37c37 3b52aafe 3b2c1127 3b1d449e     7|.:..R;'.,;.D.;
  438830:	3b8ab910 3b75f0b8 3b25c95b 3b6a837f     ...;..u;[.%;..j;
  438840:	3b4b2bcc 3a929912 3b6139bb 3aa42e9f     .+K;...:.9a;...:
  438850:	3b1c3063 3b27eb68 3b3e5f8f 3b16b75e     c0.;h.';._>;^..;
  438860:	3b1f5ab6                                .Z.;

00438864 <_ZN12_GLOBAL__N_12g0L18tensor_dimension32E>:
  438864:	00000004 00000030 00000001 00000001     ....0...........
  438874:	00000008 00000000 00000000              ............

00438880 <_ZN12_GLOBAL__N_12g0L13tensor_data32E>:
  438880:	e9f02281 d3011f3d efddcd01 0e0981ce     ."..=...........
  438890:	cb0241c0 7fba2bc7 ef32293e e82681cb     .A...+..>)2...&.
  4388a0:	2398330e 22225681 d7262de6 f9bb81a2     .3.#.V"".-&.....
  4388b0:	e15f7fcc d616dcc0 442502f3 34018107     .._.......%D...4
  4388c0:	47b31b7f f38cb8b3 b3bfda69 7fd6e604     ...G....i.......
  4388d0:	7f08fe99 971a510a f1341518 5b7f700b     .....Q....4..p.[
  4388e0:	9aca9cbb 2beed17f 39f1f7e2 4b33810d     .......+...9..3K
  4388f0:	146e4b45 da9e8149 3e7f43d6 ba240ff2     EKn.I....C.>..$.
  438900:	ba31dca8 fbcb057f fecfd624 28ee7ff7     ..1.....$......(
  438910:	ce447fe9 a7592acd 7f4f7108 192e19ee     ..D..*Y..qO.....
  438920:	81480a0a ee45ffbd 812253a4 017b4378     ..H...E..S".xC{.
  438930:	41acdc4e 7fc4d32e d481b32a 61c0f142     N..A....*...B..a
  438940:	0ca8eb2b 7f8c29c7 0a3be9ee d7aaf37f     +....)....;.....
  438950:	e47f7205 ba41e7e2 b9762cd3 815f0c0a     .r....A..,v..._.
  438960:	7f54ef49 6d22dd48 155d4147 50811dcd     I.T.H."mGA]....P
  438970:	39b1fa2f 32d9d781 c66b7f12 877031ac     /..9...2..k..1p.
  438980:	1ef7f33f d8207f6b 0881df19 47dfeb0e     ?...k. ........G
  438990:	8113cb16 0bf745fd f66011ea eafb810b     .....E....`.....
  4389a0:	81dd10f6 d6120bf3 a6edf63a b3ca7fb1     ........:.......
  4389b0:	5ee7c84b 7fe9213f 491d517f fed358f1     K..^?!...Q.I.X..
  4389c0:	e4819029 6abc0a15 9a81c6fb e9d5b0fb     )......j........
  4389d0:	7f4d7145 3119dfb2 909ae47f 4026d2b6     EqM....1......&@
  4389e0:	a9754e03 814bfa9a 3881182b 420f1cd4     .Nu...K.+..8...B
  4389f0:	81b7d62e 35dcdf18 ba7e8155 0c0deb50     .......5U.~.P...

00438a00 <_ZN12_GLOBAL__N_12g0L7quant31E>:
  438a00:	00438a30 00438a0c 00000000              0.C...C.....

00438a0c <_ZN12_GLOBAL__N_12g0L12quant31_zeroE>:
  438a0c:	00000008 00000000 00000000 00000000     ................
	...

00438a30 <_ZN12_GLOBAL__N_12g0L13quant31_scaleE>:
  438a30:	00000008 392e28df 38956706 389bc198     .....(.9.g.8...8
  438a40:	388cbbc5 38a75e43 38a2c200 388e1ed3     ...8C^.8...8...8
  438a50:	38aa7ae4                                .z.8

00438a54 <_ZN12_GLOBAL__N_12g0L18tensor_dimension31E>:
  438a54:	00000001 00000008 00000000              ............

00438a60 <_ZN12_GLOBAL__N_12g0L13tensor_data31E>:
  438a60:	ffffd3bd ffff79ca 000009c7 00001d38     .....y......8...
  438a70:	ffffc2bf 00000152 ffff90b5 fffff9d3     ....R...........

00438a80 <_ZN12_GLOBAL__N_12g0L7quant30E>:
  438a80:	00438ab0 00438a8c 00000000              ..C...C.....

00438a8c <_ZN12_GLOBAL__N_12g0L12quant30_zeroE>:
  438a8c:	00000008 00000000 00000000 00000000     ................
	...

00438ab0 <_ZN12_GLOBAL__N_12g0L13quant30_scaleE>:
  438ab0:	00000008 3be74e48 3b466cd4 3b4edd1e     ....HN.;.lF;..N;
  438ac0:	3b3ae962 3b5e4931 3b5829a8 3b3cc0f0     b.:;1I^;.)X;..<;
  438ad0:	3b626b37                                7kb;

00438ad4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension30E>:
  438ad4:	00000004 00000008 00000001 00000001     ................
  438ae4:	00000030 00000000 00000000              0...........

00438af0 <_ZN12_GLOBAL__N_12g0L13tensor_data30E>:
  438af0:	38ac3734 dc9f1b0a d7f9eb05 012bfceb     47.8..........+.
  438b00:	e42df230 fd30d915 0fefe20b fce702ee     0.-...0.........
  438b10:	0c111635 e4223a7f e5fcea02 cb121b53     5....:".....S...
  438b20:	000c1e45 e6f2571a b3d4421f 2f0eea6e     E....W...B..n../
  438b30:	a6182813 3a2ee57f 12281831 4b36c21c     .(.....:1.(...6K
  438b40:	72076d40 1d181a40 1a220d53 b86f2d19     @m.r@...S."..-o.
  438b50:	7f5511f2 31fb17cc bf0c421f 271968da     ..U....1.B...h.'
  438b60:	0045a6b6 add135fa f51bd8e2 f3fa1a97     ..E..5..........
  438b70:	d5a8dee2 e8b2150b 11dcc2e2 16e4b73c     ............<...
  438b80:	fab537eb 4007b60e 0ad2b365 3b08eaf6     .7.....@e......;
  438b90:	eaed0c15 26ba10f8 f228dee7 ca25e43c     .......&..(.<.%.
  438ba0:	cddfe926 0fb3fa81 f723c2e5 dbf40cc8     &.........#.....
  438bb0:	ee1dee39 41174ac0 2733c781 bbbac945     9....J.A..3'E...
  438bc0:	e43b4559 26f1a00d 83d407d9 2358cac3     YE;....&......X#
  438bd0:	5770fc56 1f353f42 e4cf280f c85f4357     V.pWB?5..(..WC_.
  438be0:	5b12481d a2d2171f 05f81ea2 bf28421d     .H.[.........B(.
  438bf0:	25e3634d b7e9c0ec 3dd5b69a 2ce82c02     Mc.%.......=.,.,
  438c00:	0946aafa 8fda7fdd dbf4daf6 61dbf4f5     ..F............a
  438c10:	7ff9306f 4d1715aa 604fa51a d0e8db5c     o0.....M..O`\...
  438c20:	1ab91444 02deeb50 d7cf4a0c 424cd312     D...P....J....LB
  438c30:	6603d80e 0e00b26d 3f9755a9 ce697338     ...fm....U.?8si.
  438c40:	287f0e19 09a641d9 f5f563de fa0f3b2f     ...(.A...c../;..
  438c50:	04c7f5cc d10025f4 f3342af7 f210fe00     .....%...*4.....
  438c60:	2243f0a9 f524fc5d d2e4e1eb 170ce404     ..C"].$.........

00438c70 <_ZN12_GLOBAL__N_12g0L7quant29E>:
  438c70:	00438d40 00438c7c 00000000              @.C.|.C.....

00438c7c <_ZN12_GLOBAL__N_12g0L12quant29_zeroE>:
  438c7c:	00000030 00000000 00000000 00000000     0...............
	...

00438d40 <_ZN12_GLOBAL__N_12g0L13quant29_scaleE>:
  438d40:	00000030 38cef595 38b02bf9 3a674abf     0......8.+.8.Jg:
  438d50:	3963fa42 3921ae2b 39046a13 3903cff2     B.c9+.!9.j.9...9
  438d60:	39cd6497 38ddacec 39c6784d 394c379c     .d.9...8Mx.9.7L9
  438d70:	38d62974 393846bd 38bb3775 390711a9     t).8.F89u7.8...9
  438d80:	38bdae19 38b4cb4e 3878d953 39cc416c     ...8N..8S.x8lA.9
  438d90:	388885ce 38c82742 39a72394 39349465     ...8B'.8.#.9e.49
  438da0:	3934d7c3 398c6241 3980ce09 3962598c     ..49Ab.9...9.Yb9
  438db0:	3989d0cb 39803613 3936fdc3 390b118b     ...9.6.9..69...9
  438dc0:	38f41388 38b98057 3947b63e 39274ce5     ...8W..8>.G9.L'9
  438dd0:	38cc88ab 3a253f8d 39249eb9 390fc277     ...8.?%:..$9w..9
  438de0:	39e1db17 393225a3 391f7172 3948478f     ...9.%29rq.9.GH9
  438df0:	39249431 3940b175 38913375 3905a722     1.$9u.@9u3.8"..9
  438e00:	394d66a6                                .fM9

00438e04 <_ZN12_GLOBAL__N_12g0L18tensor_dimension29E>:
  438e04:	00000001 00000030 00000000              ....0.......

00438e10 <_ZN12_GLOBAL__N_12g0L13tensor_data29E>:
  438e10:	00002cdf ffffbf71 fffffb7a 00000b49     .,..q...z...I...
  438e20:	00000176 00003163 00000a8e fffff87a     v...c1......z...
  438e30:	ffffdea9 000007d2 fffff2fe ffffef9f     ................
  438e40:	ffffe824 ffffcd2c 000018aa 000000b6     $...,...........
  438e50:	ffffdef8 00006e90 fffff36b ffffcf5a     .....n..k...Z...
  438e60:	00003b11 00000558 fffffcaf fffff92d     .;..X.......-...
  438e70:	00000043 00000135 ffffeeca 0000071a     C...5...........
  438e80:	fffffe74 00000756 00000085 000047c3     t...V........G..
  438e90:	000049ac fffffd97 00001280 00004a36     .I..........6J..
  438ea0:	fffffd0e 00003c0e 00000552 fffffc4d     .....<..R...M...
  438eb0:	fffff3ef ffffe206 0000031c 00000b3d     ............=...
  438ec0:	00000b86 00005f86 000031d8 ffffedc6     ....._...1......

00438ed0 <_ZN12_GLOBAL__N_12g0L7quant28E>:
  438ed0:	00438fa0 00438edc 00000003              ..C...C.....

00438edc <_ZN12_GLOBAL__N_12g0L12quant28_zeroE>:
  438edc:	00000030 00000000 00000000 00000000     0...............
	...

00438fa0 <_ZN12_GLOBAL__N_12g0L13quant28_scaleE>:
  438fa0:	00000030 3b9c089c 3b84d265 3d2e60fc     0......;e..;.`.=
  438fb0:	3c2be148 3bf3cae6 3bc7a9d0 3bc6c168     H.+<...;...;h..;
  438fc0:	3c9ada49 3ba720ef 3c95a219 3c19f75e     I..<. .;...<^..<
  438fd0:	3ba176c4 3c0aeea2 3b8d2622 3bcbaa8a     .v.;...<"&.;...;
  438fe0:	3b8f0198 3b884e8d 3b3b9d9a 3c99fec4     ...;.N.;..;;...<
  438ff0:	3b4ddbaf 3b96e703 3c7c0601 3c082527     ..M;...;..|<'%.<
  439000:	3c0857f1 3c53ae22 3c42387c 3c2aa71c     .W.<".S<|8B<..*<
  439010:	3c4fcec4 3c415358 3c09f69b 3bd1b26b     ..O<XSA<...<k..;
  439020:	3bb80473 3b8bdb11 3c1691ce 3bfc444e     s..;...;...<ND.;
  439030:	3b9a347b 3cf92c29 3bf839a6 3bd8c53f     {4.;),.<.9.;?..;
  439040:	3caa47c5 3c064fa2 3bf06b4f 3c16ff5d     .G.<.O.<Ok.;]..<
  439050:	3bf829c5 3c114726 3b5af1a3 3bc987e5     .).;&G.<..Z;...;
  439060:	3c1adbd7                                ...<

00439064 <_ZN12_GLOBAL__N_12g0L18tensor_dimension28E>:
  439064:	00000004 00000001 00000003 00000003     ................
  439074:	00000030 00000000 00000000              0...........

00439080 <_ZN12_GLOBAL__N_12g0L13tensor_data28E>:
  439080:	072b00c5 0a1cc67f ff221dfe 0cb71402     ..+.......".....
  439090:	2ef1e056 fad504db ca2802ea b2287fe1     V.........(...(.
  4390a0:	9f7b6bc7 e681c609 c1ebf812 2181c2fe     .k{............!
  4390b0:	1efa5ad2 f177b4f1 7f360c46 27ea7f2f     .Z....w.F.6./..'
  4390c0:	440ab65b 8f69e3d6 11a32efe 8172a0e1     [..D..i.......r.
  4390d0:	c40dad81 1899e1c6 810cefce 3923921b     ..............#9
  4390e0:	fd05f9ee 000fc52d dc111614 17b709ed     ....-...........
  4390f0:	32f3d734 04c5fae1 8f25ff17 b4cd2fd9     4..2......%../..
  439100:	ae6afc01 0ab0dc0a d2f80618 ea84a9f4     ..j.............
  439110:	c2fb7881 f912b7fe 3e4a111c 22c15b4e     .x........J>N[."
  439120:	6a11817f e5a5bce8 07e8f981 be5bfef1     ...j..........[.
  439130:	bd937fb9 3f1abf22 36a222a0 db0481f8     ...."..?.".6....
  439140:	7f7f6e12 7f8156cd 58d9817f 927f607f     .n...V.....X.`..
  439150:	0f7faccf 077f7f81 7f4d6758 fe7fac7f     ........XgM.....
  439160:	81e398b3 455b7f7f 43dd7fc5 84003e7f     ......[E...C.>..
  439170:	cfe737c8 eb0788b8 3f700301 7acd6425     .7........p?%d.z
  439180:	7ffb905f e199a527 10ecf119 d0490cf6     _...'.........I.
  439190:	ae81deeb 812db111 457f1ebc 7ff495e9     ......-....E....
  4391a0:	f605f2f6 0519d818 337f1a22 6ddffc01     ........"..3...m
  4391b0:	01d6c856 2fd1fee8 e4def2f4 0a043e0d     V....../.....>..
  4391c0:	38c722df db28cedc 08f4f555 dd0906ea     .".8..(.U.......
  4391d0:	140b7fcf ba4e819d c245134b 7fc720c9     ......N.K.E.. ..
  4391e0:	6fff0f4a 7f5309b9 027f8113 b2dcce16     J..o..S.........
  4391f0:	afb8c7f9 271ac8c1 1ad2347f faa7cae2     .......'.4......
  439200:	ff18ea29 0d0ad8e7 274e152e 3adc0315     ).........N'...:
  439210:	13cfd12a 2cc5f6e7 bde5ed0f 0ff2fb0c     *......,........
  439220:	37ebfee9 053ae5dd 03220134 1913caee     ...7..:.4.".....

00439230 <_ZN12_GLOBAL__N_12g0L7quant27E>:
  439230:	00439300 0043923c 00000000              ..C.<.C.....

0043923c <_ZN12_GLOBAL__N_12g0L12quant27_zeroE>:
  43923c:	00000030 00000000 00000000 00000000     0...............
	...

00439300 <_ZN12_GLOBAL__N_12g0L13quant27_scaleE>:
  439300:	00000030 398e5ab1 390517ca 38eb03f3     0....Z.9...9...8
  439310:	392d0e3a 39310452 38e86433 3943ae46     :.-9R.193d.8F.C9
  439320:	38c4f910 38987f6f 390744e6 3951e60a     ...8o..8.D.9..Q9
  439330:	395a942b 39401e25 390a8ee9 393c5ae5     +.Z9%.@9...9.Z<9
  439340:	391126a3 394332ee 38f8d395 38eb6fa5     .&.9.2C9...8.o.8
  439350:	3924d64b 396a7715 38a1ec94 3965b92b     K.$9.wj9...8+.e9
  439360:	390563e5 388fe6f8 38e83078 391e77b4     .c.9...8x0.8.w.9
  439370:	38ba0315 3902b355 39168683 39a399c0     ...8U..9...9...9
  439380:	38b7adcb 3985a147 390f0944 38d02336     ...8G..9D..96#.8
  439390:	3911078f 3817ddd4 389feedf 390f37f6     ...9...8...8.7.9
  4393a0:	38a89c56 3912cf13 39917fed 390b1650     V..8...9...9P..9
  4393b0:	3905de2b 393ee19e 3932f812 3947921c     +..9..>9..29..G9
  4393c0:	38ec4cd7                                .L.8

004393c4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension27E>:
  4393c4:	00000001 00000030 00000000              ....0.......

004393d0 <_ZN12_GLOBAL__N_12g0L13tensor_data27E>:
  4393d0:	0000024a 00001780 ffffe5e2 00000e71     J...........q...
  4393e0:	00000bb5 000017f1 00000a44 0000252e     ........D....%..
  4393f0:	000031a6 000016a7 fffff88a ffffff8b     .1..............
  439400:	00000548 000012b4 00000b12 fffffc4d     H...........M...
  439410:	ffffff8f 0000184b 00002032 000001a2     ....K...2 ......
  439420:	0000088d 00002b57 000009d5 00001591     ....W+..........
  439430:	000032ea 000020c5 00000696 00002959     .2... ......Y)..
  439440:	000008e1 00001622 fffffa12 00002528     ....".......(%..
  439450:	00000551 00001504 000019bd 0000159a     Q...............
  439460:	0000a48e 00002ea0 000011c2 0000305c     ............\0..
  439470:	000009d3 0000025a 00001521 000007c3     ....Z...!.......
  439480:	00000d5a 00000772 00000864 00000d29     Z...r...d...)...

00439490 <_ZN12_GLOBAL__N_12g0L7quant26E>:
  439490:	00439560 0043949c 00000000              `.C...C.....

0043949c <_ZN12_GLOBAL__N_12g0L12quant26_zeroE>:
  43949c:	00000030 00000000 00000000 00000000     0...............
	...

00439560 <_ZN12_GLOBAL__N_12g0L13quant26_scaleE>:
  439560:	00000030 3baec4de 3b23661a 3b1043c9     0......;.f#;.C.;
  439570:	3b54760e 3b595310 3b0ea76e 3b703cfb     .vT;.SY;n..;.<p;
  439580:	3af1d317 3abb38e6 3b261211 3b80d8c5     ...:.8.:..&;...;
  439590:	3b862cd4 3b6bdd28 3b2a1bce 3b673e91     .,.;(.k;..*;.>g;
  4395a0:	3b3233d6 3b6fa58d 3b18be24 3b1085e5     .32;..o;$..;...;
  4395b0:	3b4a5f0c 3b8fed50 3ac6cb87 3b8d0426     ._J;P..;...:&..;
  4395c0:	3b23c389 3ab0ab61 3b0e87ad 3b428d2a     ..#;a..:...;*.B;
  4395d0:	3ae45e2d 3b20762f 3b38cd01 3bc8da6d     -^.:/v ;..8;m..;
  4395e0:	3ae180e1 3ba40ee5 3b2f9b31 3aff880e     ...:...;1./;...:
  4395f0:	3b320daf 3a3a727f 3ac459c3 3b2fd485     ..2;.r::.Y.:../;
  439600:	3acf0110 3b343cec 3bb2a175 3b2ac20a     ...:.<4;u..;..*;
  439610:	3b2459a7 3b6a588e 3b5bb89c 3b750393     .Y$;.Xj;..[;..u;
  439620:	3b110dad                                ...;

00439624 <_ZN12_GLOBAL__N_12g0L18tensor_dimension26E>:
  439624:	00000004 00000030 00000001 00000001     ....0...........
  439634:	00000008 00000000 00000000              ............

00439640 <_ZN12_GLOBAL__N_12g0L13tensor_data26E>:
  439640:	1bdc81b2 cd34f4db a92b7ff1 60bda609     ......4...+....`
  439650:	0721b981 ea1c094c cd81db00 30e6d122     ..!.L......."..0
  439660:	e86f9dc9 0038bf7f a73142ec 7fc61e5f     ..o...8..B1._...
  439670:	46375b81 8c2205cd 1d3ff22e 68f98133     .[7F.."...?.3..h
  439680:	ddfb4aff b67f6a12 c8087f55 66d5bbb6     .J...j..U......f
  439690:	0619f31d b88124e8 c0930cb6 422a107f     .....$........*B
  4396a0:	03de2c5e 0812587f 30f38881 044231a6     ^,...X.....0.1B.
  4396b0:	78a25cf1 21f07fc6 b0eac0f7 3ae7427f     .\.x...!.....B.:
  4396c0:	3202a842 8127f12a 6781b6b5 8f4e5903     B..2*.'....g.YN.
  4396d0:	037fee47 e3ad98d8 261d7fe1 d5c18d6c     G..........&l...
  4396e0:	d581f3bc fefcf81f 3936ed83 cb7f96a3     ..........69....
  4396f0:	bc81f935 32fbf3e1 f17f29eb a3fc219f     5......2.)...!..
  439700:	7f6774a3 cc0b5b7f 28b581cd ff3520c5     .tg..[.....(. 5.
  439710:	c0887a74 31baed81 16b9393d eedf1381     tz.....1=9......
  439720:	b91e4cec 818b584d b2fbf726 cd0d0381     .L..MX..&.......
  439730:	7f2101af f0db112c acf99413 96bb3281     ..!.,........2..
  439740:	f517f981 1304e30a 9f81c632 13d005f6     ........2.......
  439750:	f97d5c3a ab59bd81 050f1663 c981de9c     :\}...Y.c.......
  439760:	d157017f 574bf401 f5f46973 2781514e     ..W...KWsi..NQ.'
  439770:	7f6a58d9 c0183de1 de7f2f21 11dccc4e     .Xj..=..!/..N...
  439780:	101b2948 ce2381be 7f14d01c 470348eb     H)....#......H.G
  439790:	d15790f3 1870da7f cf8bdc02 7dab237f     ..W...p......#.}
  4397a0:	f67fe66a 11c723fc e2131eec 53e781ab     j....#.........S
  4397b0:	214c53c7 8131e6ff 7f0af51d 474c88f3     .SL!..1.......LG

004397c0 <_ZN12_GLOBAL__N_12g0L7quant25E>:
  4397c0:	004397f0 004397cc 00000000              ..C...C.....

004397cc <_ZN12_GLOBAL__N_12g0L12quant25_zeroE>:
  4397cc:	00000008 00000000 00000000 00000000     ................
	...

004397f0 <_ZN12_GLOBAL__N_12g0L13quant25_scaleE>:
  4397f0:	00000008 38ddef64 39093c9c 38dc4c09     ....d..8.<.9.L.8
  439800:	38efd455 3901f86e 38d66427 3950d99e     U..8n..9'd.8..P9
  439810:	39622e52                                R.b9

00439814 <_ZN12_GLOBAL__N_12g0L18tensor_dimension25E>:
  439814:	00000001 00000008 00000000              ............

00439820 <_ZN12_GLOBAL__N_12g0L13tensor_data25E>:
  439820:	00001306 fffff845 00003641 ffffe6ab     ....E...A6......
  439830:	ffffcf2e ffffc772 ffffdc67 fffff836     ....r...g...6...

00439840 <_ZN12_GLOBAL__N_12g0L7quant24E>:
  439840:	00439870 0043984c 00000000              p.C.L.C.....

0043984c <_ZN12_GLOBAL__N_12g0L12quant24_zeroE>:
  43984c:	00000008 00000000 00000000 00000000     ................
	...

00439870 <_ZN12_GLOBAL__N_12g0L13quant24_scaleE>:
  439870:	00000008 3b9360f8 3bb6447f 3b924a7e     .....`.;.D.;~J.;
  439880:	3b9f4300 3bac9df2 3b8e5e82 3c0ab083     .C.;...;.^.;...<
  439890:	3c1632c2                                .2.<

00439894 <_ZN12_GLOBAL__N_12g0L18tensor_dimension24E>:
  439894:	00000004 00000008 00000001 00000001     ................
  4398a4:	00000030 00000000 00000000              0...........

004398b0 <_ZN12_GLOBAL__N_12g0L13tensor_data24E>:
  4398b0:	cc2be5ea 5a415132 36e9d064 eb0ae7e1     ..+.2QAZd..6....
  4398c0:	cb0a2a26 d8ad11e1 b611f41d 1a2915d8     &*............).
  4398d0:	0b3c291a 04b6d26f fce1bbc8 3481a8ba     .)<.o..........4
  4398e0:	34d7fdf3 edd70a01 5a121bc4 7fe506e6     ...4.......Z....
  4398f0:	e00c3a29 15b8ebd4 a9eef911 bac4f733     ):..........3...
  439900:	c7e3e03d d4342323 d62e4704 eacadb00     =...##4..G......
  439910:	fde2bc06 0b0512de eef30c6d 0521b6e1     ........m.....!.
  439920:	f9e7c5fe 1f07309b e6d82d09 d32ad8e6     .....0...-....*.
  439930:	34cf1d9f e9ee40b8 2bfde77f d7c4281b     ...4.@.....+.(..
  439940:	3b5a94de f1ed9b18 cc357781 13e90a32     ..Z;.....w5.2...
  439950:	29e12338 c21f5047 1d3c510d 0f0fbae1     8#.)GP...Q<.....
  439960:	073304eb 27d8adf2 bd16f3e3 18fa0fb4     ..3....'........
  439970:	4af034f5 fc070522 442e50ca 0d3c1703     .4.J"....P.D..<.
  439980:	f3f79e07 39a3f255 1b1ce748 cef61833     ....U..9H...3...
  439990:	0f057fce 1712e63e e7fe29e4 12dfcd00     ....>....)......
  4399a0:	bcfbffea 1d781d81 e6eb4011 e33efd9a     ......x..@....>.
  4399b0:	b1ca25b0 26fe6b01 12fd1e65 cb78f3eb     .%...k.&e.....x.
  4399c0:	5a4a67f4 285a34eb 24e6ddea 391e36bf     .gJZ.4Z(...$.6.9
  4399d0:	1cf7eb05 0412c7c8 082df31b 3a25eace     ..........-...%:
  4399e0:	c509c205 e3ffea48 290b000a 7f09052e     ....H......)....
  4399f0:	19f5f32b 1017f801 cfe32702 29edebfd     +........'.....)
  439a00:	fbd6f0e7 0b06e604 00180428 01010af7     ........(.......
  439a10:	fe02f81c e6090ac6 f5ccfb00 1d10eef2     ................
  439a20:	091bf710 d8f57fec dfd100d9 f6bb3f15     .............?..

00439a30 <_ZN12_GLOBAL__N_12g0L7quant23E>:
  439a30:	00439b00 00439a3c 00000000              ..C.<.C.....

00439a3c <_ZN12_GLOBAL__N_12g0L12quant23_zeroE>:
  439a3c:	00000030 00000000 00000000 00000000     0...............
	...

00439b00 <_ZN12_GLOBAL__N_12g0L13quant23_scaleE>:
  439b00:	00000030 398792c2 38e45897 38e097cc     0......9.X.8...8
  439b10:	38cde939 387d8149 3918b476 38ecd720     9..8I.}8v..9 ..8
  439b20:	38bda9b7 39863b25 38830505 390940d0     ...8%;.9...8.@.9
  439b30:	38cfc7f7 38b66487 394aa3a3 38b1d1e1     ...8.d.8..J9...8
  439b40:	38a3c1fd 38a7d0dc 39202609 39ca00ad     ...8...8.& 9...9
  439b50:	3896c10b 387a3be5 38a8ea95 38c61a79     ...8.;z8...8y..8
  439b60:	39198b6d 38b8ab89 38d47249 393acd70     m..9...8Ir.8p.:9
  439b70:	3943eff1 38fae35f 39438650 3911cb12     ..C9_..8P.C9...9
  439b80:	38b94989 388bec3d 38d59ff3 38a10b9a     .I.8=..8...8...8
  439b90:	38af20ea 38c60da0 38c82ac0 38b8ec7b     . .8...8.*.8{..8
  439ba0:	38b60e46 390ad8f6 3954262a 3899eb67     F..8...9*&T9g..8
  439bb0:	38bd268c 39576247 391b89fd 3981f5a1     .&.8GbW9...9...9
  439bc0:	38fa9c18                                ...8

00439bc4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension23E>:
  439bc4:	00000001 00000030 00000000              ....0.......

00439bd0 <_ZN12_GLOBAL__N_12g0L13tensor_data23E>:
  439bd0:	fffffe6e 000065e8 000062e6 fffff9df     n....e...b......
  439be0:	ffffff93 ffffc795 00005d6e 00004555     ........n]..UE..
  439bf0:	ffffdb12 0000037a fffff928 000046ca     ....z...(....F..
  439c00:	00004c0b ffffbed6 ffffd1f8 fffff8e4     .L..............
  439c10:	ffffff1b 00006bca fffffd0d 00000076     .....k......v...
  439c20:	0000a707 00002e41 ffffdc99 ffffe442     ....A.......B...
  439c30:	00003f9a 00002e4c fffff59b fffff6fb     .?..L...........
  439c40:	ffffeea6 fffffe00 0000788a 0000017a     .........x..z...
  439c50:	ffffee43 00002a16 00003a26 000039ad     C....*..&:...9..
  439c60:	fffff1b7 0000a40a ffffeead fffffbb3     ................
  439c70:	000064c2 fffffd04 fffff565 00003974     .d......e...t9..
  439c80:	ffffff1e fffffcaf ffffe2d5 00003978     ............x9..

00439c90 <_ZN12_GLOBAL__N_12g0L7quant22E>:
  439c90:	00439d60 00439c9c 00000003              `.C...C.....

00439c9c <_ZN12_GLOBAL__N_12g0L12quant22_zeroE>:
  439c9c:	00000030 00000000 00000000 00000000     0...............
	...

00439d60 <_ZN12_GLOBAL__N_12g0L13quant22_scaleE>:
  439d60:	00000030 3c340eea 3b97a2d4 3b9524cd     0.....4<...;.$.;
  439d70:	3b88bce0 3b2857da 3bcacfac 3b9d46db     ...;.W(;...;.F.;
  439d80:	3b7be567 3c32468d 3b2e02aa 3bb64a14     g.{;.F2<...;.J.;
  439d90:	3b89faca 3b723d83 3c0690aa 3b6c2abe     ...;.=r;...<.*l;
  439da0:	3b597da4 3b5ee164 3bd4b284 3c862473     .}Y;d.^;...;s$.<
  439db0:	3b483862 3b262bc6 3b60578e 3b838d94     b8H;.+&;.W`;...;
  439dc0:	3bcbed2c 3b7543d1 3b8d13e4 3bf818d8     ,..;.Cu;...;...;
  439dd0:	3c021d56 3ba69afd 3c01d731 3bc1a1b3     V..<...;1..<...;
  439de0:	3b7615a9 3b39d5c1 3b8ddc37 3b55e368     ..v;..9;7..;h.U;
  439df0:	3b6897b6 3b83850c 3b84ec63 3b759a13     ..h;...;c..;..u;
  439e00:	3b71caf4 3bb86826 3c0ce158 3b4c6ca5     ..q;&h.;X..<.lL;
  439e10:	3b7b3732 3c0f0743 3bce9344 3c2c9a3a     27{;C..<D..;:.,<
  439e20:	3ba66ba8                                .k.;

00439e24 <_ZN12_GLOBAL__N_12g0L18tensor_dimension22E>:
  439e24:	00000004 00000001 00000003 00000003     ................
  439e34:	00000030 00000000 00000000              0...........

00439e40 <_ZN12_GLOBAL__N_12g0L13tensor_data22E>:
  439e40:	26ddc73f b1af3257 bf712f04 29614fce     ?..&W2.../q..Oa)
  439e50:	4e38b73b 462c99ac 4b52eec8 3dc17070     ;.8N..,F..RKpp.=
  439e60:	b587b530 114bb84c a82349b0 b9496e41     0...L.K..I#.AnI.
  439e70:	48c7b649 88a93c6a 94704113 477862a9     I..Hj<...Ap..bxG
  439e80:	6047a53b 65448db4 6361ceb4 56b67f79     ;.G`..De..acy..V
  439e90:	9c818c43 2b52b160 9a274993 ad517c55     C...`.R+.I'.U|Q.
  439ea0:	19d8e22c cfe3022c d7261214 1c3328b5     ,...,.....&..(3.
  439eb0:	0d19e712 2f21b5fb 3022f8e0 11ed4340     ......!/.."0@C..
  439ec0:	cbbfcb20 2016e719 e10d2cdc c7172429      ...... .,..)$..
  439ed0:	4abd9e2f a181546a a3656658 4a775fb5     /..JjT..Xfe.._wJ
  439ee0:	7f37a06c 66488389 6479b298 5aae7b72     l.7...Hf..ydr{.Z
  439ef0:	8f8b875e 48729a56 84647f9c af337559     ^...V.rH..d.Yu3.
  439f00:	7f818133 81837f7f 817f7f7f 7f7f7f81     3...............
  439f10:	7e38817f 7f7f8181 7f7f8181 7f816b7f     ..8~.........k..
  439f20:	8192817f 7f7f817f 817f7481 81397f7f     .........t....9.
  439f30:	42b3bf02 bec32036 ba2e2f46 38322ab7     ...B6 ..F/...*28
  439f40:	2014e01e 3a3cb1e3 410df0b8 19df074a     ... ..<:...AJ...
  439f50:	d2b99d37 4224d726 cc3531e5 a916002f     7...&.$B.15./...
  439f60:	37d7c9e0 ffb82a19 bf263796 32432fc7     ...7.*...7&../C2
  439f70:	3ab1ed35 2b27d4e0 2443c2af 20c5212a     5..:..'+..C$*!. 
  439f80:	d6cfb72d 5533cb26 c44353de e89a0916     -...&.3U.SC.....
  439f90:	55b5b281 05bb4822 bb2e3eae 4c41329e     ...U"H...>...2AL
  439fa0:	3d81e442 2b44b4cc 373ad196 29affe20     B..=..D+..:7 ..)
  439fb0:	bae59240 6e3ac438 ac6a5ae8 bc81ee27     @...8.:n.Zj.'...
  439fc0:	3bd6f0c1 f9001915 e22123a0 27201bd9     ...;.....#!... '
  439fd0:	17baf910 251ef8f6 25fe0bd8 0ae4ee1f     .......%...%....
  439fe0:	e4fcdb1a 3309f311 f12b2800 d3cde606     .......3.(+.....

00439ff0 <_ZN12_GLOBAL__N_12g0L7quant21E>:
  439ff0:	0043a0c0 00439ffc 00000000              ..C...C.....

00439ffc <_ZN12_GLOBAL__N_12g0L12quant21_zeroE>:
  439ffc:	00000030 00000000 00000000 00000000     0...............
	...

0043a0c0 <_ZN12_GLOBAL__N_12g0L13quant21_scaleE>:
  43a0c0:	00000030 399e2b56 3928058c 392d8e5e     0...V+.9..(9^.-9
  43a0d0:	3999a335 3a045374 38c3a6c9 3989276d     5..9tS.:...8m'.9
  43a0e0:	398238d0 38de013c 39d031e6 3972354c     .8.9<..8.1.9L5r9
  43a0f0:	3997a54a 3932568a 39953ed0 39dbd8ca     J..9.V29.>.9...9
  43a100:	396130a5 398b624c 390347b7 3929c91a     .0a9Lb.9.G.9..)9
  43a110:	39c77fb5 39bdad03 3992a1a3 399f1755     ...9...9...9U..9
  43a120:	39986972 39acd23b 3956f5b9 39742776     ri.9;..9..V9v't9
  43a130:	3965f479 398de186 394ea601 38d209bf     y.e9...9..N9...8
  43a140:	3981b97e 39b351a2 39a42441 3992f9c6     ~..9.Q.9A$.9...9
  43a150:	39a7cad0 396b2ef3 38dafc8d 39c6db8d     ...9..k9...8...9
  43a160:	398bfaa2 3914ff4a 39151842 39c29d54     ...9J..9B..9T..9
  43a170:	399ab1b7 3995afaf 3977fd29 38cc9aed     ...9...9).w9...8
  43a180:	3931276b                                k'19

0043a184 <_ZN12_GLOBAL__N_12g0L18tensor_dimension21E>:
  43a184:	00000001 00000030 00000000              ....0.......

0043a190 <_ZN12_GLOBAL__N_12g0L13tensor_data21E>:
  43a190:	fffff945 00001542 000012d8 fffffd17     E...B...........
  43a1a0:	0000005e 0000263f 00000ce7 00000679     ^...?&......y...
  43a1b0:	000026a7 00000576 fffff8e3 000006cd     .&..v...........
  43a1c0:	00000ee8 000006d1 ffffff1c 0000032b     ............+...
  43a1d0:	fffffaa3 00001e4b fffff4f3 fffffcf7     ....K...........
  43a1e0:	0000041a 000003b3 0000018b fffffe4c     ............L...
  43a1f0:	00000110 00000a7b fffff808 fffffa4c     ....{.......L...
  43a200:	fffffc67 fffff75c 00002be7 00000a3b     g...\....+..;...
  43a210:	000002c5 00000434 00000195 000004b5     ....4...........
  43a220:	00000591 000021ec 00000493 000001bb     .....!..........
  43a230:	00001b16 fffff8d6 0000022e 0000054f     ............O...
  43a240:	fffff904 fffff82d 00002ad5 00000c25     ....-....*..%...

0043a250 <_ZN12_GLOBAL__N_12g0L7quant20E>:
  43a250:	0043a320 0043a25c 00000000               .C.\.C.....

0043a25c <_ZN12_GLOBAL__N_12g0L12quant20_zeroE>:
  43a25c:	00000030 00000000 00000000 00000000     0...............
	...

0043a320 <_ZN12_GLOBAL__N_12g0L13quant20_scaleE>:
  43a320:	00000030 3b4233f4 3ace4cc5 3ad5185d     0....3B;.L.:]..:
  43a330:	3b3ca388 3ba278dc 3a703969 3b286669     ..<;.x.;i9p:if(;
  43a340:	3b1fe382 3a884a69 3b7fa012 3b14b195     ...;iJ.:...;...;
  43a350:	3b3a3172 3adaf76d 3b373efb 3b86f742     r1:;m..:.>7;B..;
  43a360:	3b0a3eff 3b2b2356 3aa13021 3ad07732     .>.;V#+;!0.:2w.:
  43a370:	3b74f2b7 3b68e321 3b34095a 3b4355b7     ..t;!.h;Z.4;.UC;
  43a380:	3b3b224a 3b54315e 3b03f738 3b15e369     J";;^1T;8..;i..;
  43a390:	3b0d2bdc 3b2e3430 3afdb9fd 3a80f1b5     .+.;04.;...:...:
  43a3a0:	3b1f472f 3b5c2bb9 3b498930 3b347592     /G.;.+\;0.I;.u4;
  43a3b0:	3b4e04a7 3b106190 3a86700d 3b74292a     ..N;.a.;.p.:*)t;
  43a3c0:	3b2bde60 3ab6f0fc 3ab70fa4 3b6ef37b     `.+;...:...:{.n;
  43a3d0:	3b3defaa 3b37c990 3b183e15 3a7b37be     ..=;..7;.>.;.7{:
  43a3e0:	3ad9833f                                ?..:

0043a3e4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension20E>:
  43a3e4:	00000004 00000030 00000001 00000001     ....0...........
  43a3f4:	00000008 00000000 00000000              ............

0043a400 <_ZN12_GLOBAL__N_12g0L13tensor_data20E>:
  43a400:	08ce182b 1a8135dd f985c001 967febf5     +....5..........
  43a410:	cfb5d184 f88134e1 f611d8c0 e79481ec     .....4..........
  43a420:	0fd781d3 d8d9183a 2f5bdb44 a1b83a81     ....:...D.[/.:..
  43a430:	e0c38124 acd53df2 c8caaae8 11ff814b     $....=......K...
  43a440:	37293926 7ff8d01b 05d0c7e7 f57fed2c     &9)7........,...
  43a450:	11810ee3 9a5b111d 03dedf07 37051681     ......[........7
  43a460:	2ee34867 f3557faf ee17f8d0 42008128     gH....U.....(..B
  43a470:	2905d29c 8186420b 062d5b3b c37c2d81     ...).B..;[-..-|.
  43a480:	470bc201 8103b2f3 f3177fb0 b2accec5     ...G............
  43a490:	85937f59 b1976665 0bf54ce5 a1bc0b81     Y...ef...L......
  43a4a0:	0b09fe81 33631815 1332f9dd 158197a7     ......c3..2.....
  43a4b0:	f9d0ddfd 3d020681 f4ef043b 50ac3f7f     .......=;....?.P
  43a4c0:	1dd5077f f90608a9 6535c519 681681d1     ..........5e...h
  43a4d0:	400e7f1c e91de754 f0446889 6104b77f     ...@T....hD....a
  43a4e0:	dfbdb7b4 ed168156 2928ecc6 41b5aa7f     ....V.....()...A
  43a4f0:	948d2b7f b8aea0b4 4524051c 02240a81     .+........$E..$.
  43a500:	2a2f137f 3959c7e0 08d3227f 2f19c288     ../*..Y9."...../
  43a510:	16e8f62a b4107fd6 dcf1207f 7b209d22     *........ ..". {
  43a520:	9d46d3d8 8152ece1 3141b751 8125f572     ..F...R.Q.A1r.%.
  43a530:	e5077f45 4c1914e9 49b2fe1a 7fb4bfe4     E......L...I....
  43a540:	dffbe3f1 271a811a c4812be7 8c426e5c     .......'.+..\nB.
  43a550:	0cddcc1a 3b207f48 1ddf35fb be3aa981     ....H. ;.5....:.
  43a560:	ddf3cb81 b3873637 14ca3cc7 7fb8fa21     ....76...<..!...
  43a570:	fe7f31e6 29d2c8cf ced98b81 63d7756b     .1.....)....ku.c

0043a580 <_ZN12_GLOBAL__N_12g0L7quant19E>:
  43a580:	0043a5b0 0043a58c 00000000              ..C...C.....

0043a58c <_ZN12_GLOBAL__N_12g0L12quant19_zeroE>:
  43a58c:	00000008 00000000 00000000 00000000     ................
	...

0043a5b0 <_ZN12_GLOBAL__N_12g0L13quant19_scaleE>:
  43a5b0:	00000008 39131b18 390d8976 39195845     .......9v..9EX.9
  43a5c0:	396252d0 3907708a 3914f505 38a4612d     .Rb9.p.9...9-a.8
  43a5d0:	38f1a446                                F..8

0043a5d4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension19E>:
  43a5d4:	00000001 00000008 00000000              ............

0043a5e0 <_ZN12_GLOBAL__N_12g0L13tensor_data19E>:
  43a5e0:	00002994 00003bcc 000010ef 00000bf7     .)...;..........
  43a5f0:	000007ae ffffcebf 00001830 ffffe26c     ........0...l...

0043a600 <_ZN12_GLOBAL__N_12g0L7quant18E>:
  43a600:	0043a630 0043a60c 00000000              0.C...C.....

0043a60c <_ZN12_GLOBAL__N_12g0L12quant18_zeroE>:
  43a60c:	00000008 00000000 00000000 00000000     ................
	...

0043a630 <_ZN12_GLOBAL__N_12g0L13quant18_scaleE>:
  43a630:	00000008 3bc35ffc 3bbbfa91 3bcba93c     ....._.;...;<..;
  43a640:	3c164afe 3bb3e177 3bc5d56a 3b5a510f     .J.<w..;j..;.QZ;
  43a650:	3ba07716                                .w.;

0043a654 <_ZN12_GLOBAL__N_12g0L18tensor_dimension18E>:
  43a654:	00000004 00000008 00000001 00000001     ................
  43a664:	00000030 00000000 00000000              0...........

0043a670 <_ZN12_GLOBAL__N_12g0L13tensor_data18E>:
  43a670:	4467d327 061ad61b 11e336fb 062cb0ca     '.gD.....6....,.
  43a680:	45e03d96 e5034ad6 e043cefe 6be51be9     .=.E.J....C....k
  43a690:	aae1f3c1 f6dccec0 0a813ef3 341a1b35     .........>..5..4
  43a6a0:	fc3de1c5 ded91ce2 e702f52f 17fe13ec     ..=...../.......
  43a6b0:	f8151306 e9b8e6c9 dae4dc1b 81f6bb19     ................
  43a6c0:	b6bdc2fe 19e5a6d4 9355f430 fde4f4ce     ........0.U.....
  43a6d0:	28f758c3 dc10080e 5449d64e ca1c1160     .X.(....N.IT`...
  43a6e0:	1f0afd61 7f0f14f2 eb0cd796 aceb55fa     a............U..
  43a6f0:	b003ffec f1db07e8 f81ab358 f3018c1a     ........X.......
  43a700:	22c7eb3e 8c05ad53 a9c9fce2 14f67fe6     >.."S...........
  43a710:	d6c2eed7 ccf95020 be35286f c335a81b     .... P..o(5...5.
  43a720:	b86f3c33 30e60ed6 1bb65816 220a1dfa     3<o....0.X....."
  43a730:	48d61ec8 d61de663 22bdfcd6 c104ecd6     ...Hc......"....
  43a740:	d4dc4509 bfba25d3 dd14f910 3ce2d725     .E...%......%..<
  43a750:	b7b952f8 fbdac3c2 167fc641 c9c75405     .R......A....T..
  43a760:	f4550337 253514fa fc46007f c01c3744     7.U...5%..F.D7..
  43a770:	d61d21f1 290cb5c4 2b1aee12 e910e2d4     .!.....)...+....
  43a780:	3bee32e7 cee2ff33 261d45f6 0547f7f1     .2.;3....E.&..G.
  43a790:	0ff2c1fd 0afef81f 3769eed2 30dc435a     ..........i7ZC.0
  43a7a0:	02ed8174 209edaf5 fbe042b7 cd42cfec     t...... .B....B.
  43a7b0:	e9b90c5c 0b3902d6 b6fdbd47 18d53296     \.....9.G....2..
  43a7c0:	e2c5ecf3 f9006a12 9a81c8fc d4c1382d     .....j......-8..
  43a7d0:	1b6e19df f341b7f4 59b5e574 aee4fbd7     ..n...A.t..Y....
  43a7e0:	753344d1 d9e9c35e ef2cfdea ca06e9f9     .D3u^.....,.....

0043a7f0 <_ZN12_GLOBAL__N_12g0L7quant17E>:
  43a7f0:	0043a8c0 0043a7fc 00000000              ..C...C.....

0043a7fc <_ZN12_GLOBAL__N_12g0L12quant17_zeroE>:
  43a7fc:	00000030 00000000 00000000 00000000     0...............
	...

0043a8c0 <_ZN12_GLOBAL__N_12g0L13quant17_scaleE>:
  43a8c0:	00000030 399d2fd2 39037526 3a1a80b9     0..../.9&u.9...:
  43a8d0:	392f2248 39509c20 399631a6 397969d2     H"/9 .P9.1.9.iy9
  43a8e0:	39525f27 39ac9f48 392f6bd6 39d8fb80     '_R9H..9.k/9...9
  43a8f0:	39575db8 390ab345 39078b46 39045b8c     .]W9E..9F..9.[.9
  43a900:	39e8365f 3982dc36 38c91faf 3922ad9e     _6.96..9...8.."9
  43a910:	3a07d411 398213b9 39ab81b9 394bced0     ...:...9...9..K9
  43a920:	3a53c4c4 398a42ae 399ca9bf 39478449     ..S:.B.9...9I.G9
  43a930:	39461e9a 396fb65b 394a5a1e 39bc0c61     ..F9[.o9.ZJ9a..9
  43a940:	3a083067 39e62f2a 38e3c6db 3a05ead1     g0.:*/.9...8...:
  43a950:	394d86a9 3946b1a1 38c07c2f 3a005fa2     ..M9..F9/|.8._.:
  43a960:	3a4f7053 395bc2af 3a45659b 3a1a01aa     SpO:..[9.eE:...:
  43a970:	394308be 39571fad 390a7ae8 3945d376     ..C9..W9.z.9v.E9
  43a980:	39753912                                .9u9

0043a984 <_ZN12_GLOBAL__N_12g0L18tensor_dimension17E>:
  43a984:	00000001 00000030 00000000              ....0.......

0043a990 <_ZN12_GLOBAL__N_12g0L13tensor_data17E>:
  43a990:	000001bf 00000a01 000000b8 ffffffe3     ................
  43a9a0:	ffffffb0 0000252e 00000168 fffff04e     .....%..h...N...
  43a9b0:	ffffe913 00000054 ffffe3a5 0000015e     ....T.......^...
  43a9c0:	ffffee0a ffffe63e fffffe0f 000000da     ....>...........
  43a9d0:	ffffdd6c 00003cbd fffff325 0000029c     l....<..%.......
  43a9e0:	fffffe23 ffffff23 00000048 000002c3     #...#...H.......
  43a9f0:	0000506e 000000dd fffffcf6 fffffbe0     nP..............
  43aa00:	fffffe21 fffffda2 000002d5 ffffde8e     !...............
  43aa10:	fffffbd7 0000321f 000001c0 000019d0     .....2..........
  43aa20:	ffffff1c ffffef6b ffffffe5 fffffd2d     ....k.......-...
  43aa30:	ffffef34 fffffff1 00000eca 00001285     4...............
  43aa40:	fffffb66 00001ce4 000007bd fffff6b1     f...............

0043aa50 <_ZN12_GLOBAL__N_12g0L7quant16E>:
  43aa50:	0043ab20 0043aa5c 00000003               .C.\.C.....

0043aa5c <_ZN12_GLOBAL__N_12g0L12quant16_zeroE>:
  43aa5c:	00000030 00000000 00000000 00000000     0...............
	...

0043ab20 <_ZN12_GLOBAL__N_12g0L13quant16_scaleE>:
  43ab20:	00000030 3c50c382 3bae9796 3ccd32f6     0.....P<...;.2.<
  43ab30:	3be89987 3c0a87ad 3c4779f0 3c25a045     ...;...<.yG<E.%<
  43ab40:	3c0bb330 3c65438b 3be8fb38 3c901703     0..<.Ce<8..;...<
  43ab50:	3c0f043c 3bb83618 3bb404f9 3bafc996     <..<.6.;...;...;
  43ab60:	3c9a341b 3c2dcc77 3b858f0a 3bd80e95     .4.<w.-<...;...;
  43ab70:	3cb465a7 3c2cc232 3c63c84a 3c075756     .e.<2.,<J.c<VW.<
  43ab80:	3d0ca0aa 3c37a08f 3c501172 3c047dd8     ...=..7<r.P<.}.<
  43ab90:	3c039052 3c1f2f18 3c065fd8 3c79c071     R..<./.<._.<q.y<
  43aba0:	3cb4e049 3c98db52 3b97420d 3cb1dbde     I..<R..<.B.;...<
  43abb0:	3c087b6c 3c03f1f5 3b7fa4ee 3caa7f03     l{.<...<...;...<
  43abc0:	3d09c097 3c11ef48 3d031579 3ccc8a35     ...=H..<y..=5..<
  43abd0:	3c0183ce 3c0edb09 3bb7eb3c 3c035e6c     ...<...<<..;l^.<
  43abe0:	3c22d7e6                                .."<

0043abe4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension16E>:
  43abe4:	00000004 00000001 00000003 00000003     ................
  43abf4:	00000030 00000000 00000000              0...........

0043ac00 <_ZN12_GLOBAL__N_12g0L13tensor_data16E>:
  43ac00:	e627cff4 f3f2fd7f 07f827e4 d87f1640     ..'......'..@...
  43ac10:	eee3e912 19b6efe4 d1173189 feeb13f8     .........1......
  43ac20:	03111ce2 fa1e3b54 00f20f4b d8cdfb9c     ....T;..K.......
  43ac30:	e5ba9602 1326fbd3 7f43f912 7fbb42f3     ......&...C..B..
  43ac40:	ce2db5fd 51a681ad 6c19ac81 0c7f2511     ..-....Q...l.%..
  43ac50:	26d08a81 0e70aa7f f7e8f43e 0143f4cc     ...&..p.>.....C.
  43ac60:	7ff3ed0b fca90631 eaebd3ea d0bc0331     ....1.......1...
  43ac70:	f5011211 0cdc03fc 23e6bfd2 fca42003     ...........#. ..
  43ac80:	1513460f 02814d06 1cf7fa1b 2fc10381     .F...M........./
  43ac90:	fa7fb987 164bdbd4 0b0b5916 1f67202f     ......K..Y../ g.
  43aca0:	265a8126 d731f758 c81deef5 3420351b     &.Z&X.1......5 4
  43acb0:	7f019a29 8ed8310a aded591f 12b9ad25     )....1...Y..%...
  43acc0:	b8bbb77f 7f7f81ff ce7f0b7f d5d82181     .............!..
  43acd0:	7f7f8e7f 817f527f e46fe7fd 7f817f7f     .....R....o.....
  43ace0:	987f8623 7f9d7fbe 817f8181 877f816f     #...........o...
  43acf0:	490d8ef3 0dcbf3e6 31dd81f6 2abc0f4f     ...I.......1O..*
  43ad00:	10030114 e727eafa 4c810301 14500ac4     ......'....L..P.
  43ad10:	d4ed98f2 0d75083e 04d53219 7fbee941     ....>.u..2..A...
  43ad20:	e21d77f4 f1d00d48 00fd0fe7 06620c3a     .w..H.......:.b.
  43ad30:	cff602ec 09f90bf2 001cf2e4 fdee98d3     ................
  43ad40:	20eb30fc 6a0f32c9 0bfe1010 d5e7011a     .0. .2.j........
  43ad50:	12d45cfd 1efbdb1b da1b0721 b1b97f28     .\......!...(...
  43ad60:	b05fe901 30f74ecf 7f077f3f 01eb98c3     .._..N.0?.......
  43ad70:	00a88164 83e5dbbf 51c7e82d 0b0a1539     d.......-..Q9...
  43ad80:	22f27f0e febf061a faf7eaed fab8fe36     ..."........6...
  43ad90:	e5e10dfc fef704f4 11da19cf 0411b72a     ............*...
  43ada0:	edff3909 020b3fd4 ef02f8e1 22f50712     .9...?........."

0043adb0 <_ZN12_GLOBAL__N_12g0L7quant15E>:
  43adb0:	0043ae80 0043adbc 00000000              ..C...C.....

0043adbc <_ZN12_GLOBAL__N_12g0L12quant15_zeroE>:
  43adbc:	00000030 00000000 00000000 00000000     0...............
	...

0043ae80 <_ZN12_GLOBAL__N_12g0L13quant15_scaleE>:
  43ae80:	00000030 38f9182d 396aa349 38161afb     0...-..8I.j9...8
  43ae90:	395f7d54 398cd376 390e4549 3949165a     T}_9v..9IE.9Z.I9
  43aea0:	39f75557 3973d3ac 396abccf 38e86f7d     WU.9..s9..j9}o.8
  43aeb0:	39a153cd 39466eb6 394ecb5c 392ddc41     .S.9.nF9\.N9A.-9
  43aec0:	3932b4d5 39266f79 393e4e38 39ace7fa     ..29yo&98N>9...9
  43aed0:	3915d5f2 3974767e 3997e146 396c1f54     ...9~vt9F..9T.l9
  43aee0:	38a544a0 385b67e2 394148ae 396f8ab7     .D.8.g[8.HA9..o9
  43aef0:	3999356e 3a02f36c 390badb5 390a7dda     n5.9l..:...9.}.9
  43af00:	38ac69ac 38a0c60b 391a35cf 38da5bed     .i.8...8.5.9.[.8
  43af10:	392baa5d 399680e3 3936a5a7 38d61a00     ].+9...9..69...8
  43af20:	39084150 395212d7 3895c757 38a722b9     PA.9..R9W..8.".8
  43af30:	394e512b 390658c7 399ef5a6 393d2099     +QN9.X.9...9. =9
  43af40:	397aea66                                f.z9

0043af44 <_ZN12_GLOBAL__N_12g0L18tensor_dimension15E>:
  43af44:	00000001 00000030 00000000              ....0.......

0043af50 <_ZN12_GLOBAL__N_12g0L13tensor_data15E>:
  43af50:	00001c31 00000952 00008e09 fffff75f     1...R......._...
  43af60:	fffffa7c 00001eb3 fffffcc6 00000491     |...............
  43af70:	00000a23 000000a3 00001ef6 0000025d     #...........]...
  43af80:	00000b32 00000efb 00000cf7 000011ca     2...............
  43af90:	00000c24 00000bbb fffffc6c 0000186d     $.......l...m...
  43afa0:	0000060c 00000187 00000592 00003176     ............v1..
  43afb0:	00007497 000011d2 00000d2d fffffaec     .t......-.......
  43afc0:	ffffff3a 00001859 00001a47 00002f43     :...Y...G...C/..
  43afd0:	000031f0 000016d7 0000233c fffffaf8     .1......<#......
  43afe0:	0000026f 000008e4 000021f5 00001a9a     o........!......
  43aff0:	000002f0 000037c7 000036ad 00000f32     .....7...6..2...
  43b000:	00001b5c 000007c4 0000110d 00000346     \...........F...

0043b010 <_ZN12_GLOBAL__N_12g0L7quant14E>:
  43b010:	0043b0e0 0043b01c 00000000              ..C...C.....

0043b01c <_ZN12_GLOBAL__N_12g0L12quant14_zeroE>:
  43b01c:	00000030 00000000 00000000 00000000     0...............
	...

0043b0e0 <_ZN12_GLOBAL__N_12g0L13quant14_scaleE>:
  43b0e0:	00000030 3b155c5d 3b8cb141 3a3402cc     0...]\.;A..;..4:
  43b0f0:	3b8601fa 3ba8e201 3b2a9d82 3b712666     ...;...;..*;f&q;
  43b100:	3c144e09 3b9233c8 3b8cc08f 3b0b5f31     .N.<.3.;...;1_.;
  43b110:	3bc177f9 3b6df75a 3b77fe7b 3b507fa5     .w.;Z.m;{.w;..P;
  43b120:	3b564f62 3b47982c 3b64385d 3bcf5ab3     bOV;,.G;]8d;.Z.;
  43b130:	3b33b002 3b929569 3bb6239a 3b8d9522     ..3;i..;.#.;"..;
  43b140:	3ac631c9 3a838f1d 3b67cabb 3b8fa207     .1.:...:..g;...;
  43b150:	3bb7bb87 3c1d0a4d 3b2781ba 3b261555     ...;M..<..';U.&;
  43b160:	3acec33c 3ac0cdf9 3b38eefc 3b02ee71     <..:...:..8;q..;
  43b170:	3b4dddcf 3bb47d02 3b5b0931 3b0060e8     ..M;.}.;1.[;.`.;
  43b180:	3b2366ba 3b7bed37 3ab39e7f 3ac86f22     .f#;7.{;...:"o.:
  43b190:	3b776bf2 3b211cdc 3bbea10e 3b62cea6     .kw;..!;...;..b;
  43b1a0:	3b9673eb                                .s.;

0043b1a4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension14E>:
  43b1a4:	00000004 00000030 00000001 00000001     ....0...........
  43b1b4:	00000008 00000000 00000000              ............

0043b1c0 <_ZN12_GLOBAL__N_12g0L13tensor_data14E>:
  43b1c0:	811027ec 7a1808a6 fdef0a5e 177f2eb1     .'.....z^.......
  43b1d0:	eadf72f6 81d252d9 7fadb33e eb01ce82     .r...R..>.......
  43b1e0:	f435bb2d 1c32fa81 a7f831ee 09e2fa81     -.5...2..1......
  43b1f0:	292eeb32 8bfadd7f 7f191f0a 17fcf61a     2..)............
  43b200:	d50f1d19 e00c7f21 17f21473 417fc8c8     ....!...s......A
  43b210:	ddb649fe c74d7f08 6681d9ec 4bee1fc5     .I....M....f...K
  43b220:	3035afa1 09d38121 331f2429 d90c7fc9     ..50!...)$.3....
  43b230:	0a0c8a0d 73819dba 0cf52da3 ce81fa69     .......s.-..i...
  43b240:	81a1575a 20677d3d 2d837f9a 8c13ecfa     ZW..=}g ...-....
  43b250:	7fa0ff26 c2d5dff8 1c090c74 337f09d2     &.......t......3
  43b260:	7fa9b72a c1e2e82e 9a7f2f1a 9820e529     *......../..). .
  43b270:	3881dfb3 71ff26ea 291b174b da3a7781     ...8.&.qK..).w:.
  43b280:	508100f2 422e1ed9 7fb4df29 f2e0f933     ...P...B)...3...
  43b290:	a87f14b7 f93e18f2 047f4ebd 1344f715     ......>..N....D.
  43b2a0:	8125a2cc eaff0de8 59f2b5b3 3dee81fb     ..%........Y...=
  43b2b0:	e97a2c81 1b46252f 815731c4 3c2210d2     .,z./%F..1W..."<
  43b2c0:	876152aa 7f07fc0f 30c67602 e3811418     .Ra......v.0....
  43b2d0:	937f075e d82f8fa4 6d25f65a 8114b753     ^...../.Z.%mS...
  43b2e0:	997f3e18 9422ed19 476dcdc9 f15b8102     .>...."...mG..[.
  43b2f0:	314d0450 187fcaea 09eeb329 40450281     P.M1....).....E@
  43b300:	668124d9 6eb92bcd 05d1ef91 10a80b7f     .$.f.+.n........
  43b310:	e1e846ac c7932a7f 7fdf7b7b 4f3396fe     .F...*..{{....3O
  43b320:	0e691900 df198127 4e7fb8fa 108befe3     ..i.'......N....
  43b330:	40878134 ef0016a8 f92ae79b e481224b     4..@......*.K"..

0043b340 <_ZN12_GLOBAL__N_12g0L7quant13E>:
  43b340:	0043b370 0043b34c 00000000              p.C.L.C.....

0043b34c <_ZN12_GLOBAL__N_12g0L12quant13_zeroE>:
  43b34c:	00000008 00000000 00000000 00000000     ................
	...

0043b370 <_ZN12_GLOBAL__N_12g0L13quant13_scaleE>:
  43b370:	00000008 391b7530 38fa350e 390244fd     ....0u.9.5.8.D.9
  43b380:	38862414 392d8e6c 38fd0e08 38f9bf7d     .$.8l.-9...8}..8
  43b390:	390027b7                                .'.9

0043b394 <_ZN12_GLOBAL__N_12g0L18tensor_dimension13E>:
  43b394:	00000001 00000008 00000000              ............

0043b3a0 <_ZN12_GLOBAL__N_12g0L13tensor_data13E>:
  43b3a0:	ffffcfd4 000004fd ffffc51d 000003bf     ................
  43b3b0:	00000b6c fffff0b0 00002a7d 000003cd     l.......}*......

0043b3c0 <_ZN12_GLOBAL__N_12g0L7quant12E>:
  43b3c0:	0043b3f0 0043b3cc 00000000              ..C...C.....

0043b3cc <_ZN12_GLOBAL__N_12g0L12quant12_zeroE>:
  43b3cc:	00000008 00000000 00000000 00000000     ................
	...

0043b3f0 <_ZN12_GLOBAL__N_12g0L13quant12_scaleE>:
  43b3f0:	00000008 3bce77a4 3ba6273b 3bad03a0     .....w.;;'.;...;
  43b400:	3b3227ea 3be68127 3ba80b51 3ba5d929     .'2;'..;Q..;)..;
  43b410:	3baa34bf                                .4.;

0043b414 <_ZN12_GLOBAL__N_12g0L18tensor_dimension12E>:
  43b414:	00000004 00000008 00000001 00000001     ................
  43b424:	00000030 00000000 00000000              0...........

0043b430 <_ZN12_GLOBAL__N_12g0L13tensor_data12E>:
  43b430:	46d96a2e 0be7fbfd e404c03f cbe0050b     .j.F....?.......
  43b440:	1020ec00 07dee2c8 fb191112 1de90e11     .. .............
  43b450:	81710ac2 74f41aea 010e0fe5 d51a28f2     ..q....t.....(..
  43b460:	361fd2ff e8ecf3f0 2a5ed72c b1d40a12     ...6....,.^*....
  43b470:	0c10277f f2231fba ccdea7cf db28c9f2     .'....#.......(.
  43b480:	0be2e6f5 d053f107 28c524ef 320f3f4e     ......S..$.(N?.2
  43b490:	f3f5e84a 483c696a e3fef8e3 1b372ef7     J...ji<H......7.
  43b4a0:	c13fdfe7 3bd5cfd6 1771a7a9 0fc8bc3b     ..?....;..q.;...
  43b4b0:	10635481 14f9f8f3 c70e3d1a d73712ea     .Tc......=....7.
  43b4c0:	f50ede4d 31177e77 3b20e6dc 1a492b81     M...w~.1.. ;.+I.
  43b4d0:	944a0909 582312a8 1836db0b f703c930     ..J...#X..6.0...
  43b4e0:	88be3c87 d044dd19 e48da135 3df32dc2     .<....D.5....-.=
  43b4f0:	d9e22927 edecf7f5 f4f5fa05 313deade     ')............=1
  43b500:	27def0d6 05f2f51b 35fdd9cd 1ceb0bf3     ...'.......5....
  43b510:	8119f1e1 35091af7 e7f3f305 ed530027     .......5....'.S.
  43b520:	35aa3640 1bfb0304 eacac9b1 1d2b171f     @6.5..........+.
  43b530:	7f28c229 32cacfbe 40dce71e 02c71c1e     ).(....2...@....
  43b540:	ffc905fc 42eb0ffc d5f84e12 c5121c7a     .......B.N..z...
  43b550:	d016b8df b6b1d8d7 2a8cbfdf 585fcccb     ...........*.._X
  43b560:	ed150981 0b433611 56b8f7f4 492adcb0     .....6C....V..*I
  43b570:	2457c90e a9f42b19 0fe2c5f4 3ef5efd6     ..W$.+.........>
  43b580:	29ee134b 05090d0d eff4f852 ebf3063c     K..)....R...<...
  43b590:	ffe3f8cb e5eaec02 fe0e8145 13eb6301     ........E....c..
  43b5a0:	d2c618b6 171b1af1 efdd451a e62a1fd4     .........E....*.

0043b5b0 <_ZN12_GLOBAL__N_12g0L7quant11E>:
  43b5b0:	0043b680 0043b5bc 00000000              ..C...C.....

0043b5bc <_ZN12_GLOBAL__N_12g0L12quant11_zeroE>:
  43b5bc:	00000030 00000000 00000000 00000000     0...............
	...

0043b680 <_ZN12_GLOBAL__N_12g0L13quant11_scaleE>:
  43b680:	00000030 38d04ca9 39108be6 3a1e0842     0....L.8...9B..:
  43b690:	389d5e28 3a020eed 3a2b2ea3 39349ce0     (^.8...:..+:..49
  43b6a0:	393148a1 388f524b 3957b664 39e66306     .H19KR.8d.W9.c.9
  43b6b0:	39825e58 395c5b26 392f92a9 38686eca     X^.9&[\9../9.nh8
  43b6c0:	386c1502 38e61464 39e3edd0 388a2455     ..l8d..8...9U$.8
  43b6d0:	38c03080 3874ae1e 3a14ef7f 3a870d1a     .0.8..t8...:...:
  43b6e0:	39605e30 387a27c6 39092bf4 38c06c1e     0^`9.'z8.+.9.l.8
  43b6f0:	38e90433 392e6ae4 390616d8 39d02233     3..8.j.9...93".9
  43b700:	399a39ed 38d208d9 397b8de4 38a0835b     .9.9...8..{9[..8
  43b710:	3899e3f7 399abc82 39be0a44 38e17eb0     ...8...9D..9.~.8
  43b720:	394c982c 38b7a558 395f0dc0 38f5cfc4     ,.L9X..8.._9...8
  43b730:	39b30d75 38a9980c 3974c877 38c7c81a     u..9...8w.t9...8
  43b740:	3a0a40fb                                .@.:

0043b744 <_ZN12_GLOBAL__N_12g0L18tensor_dimension11E>:
  43b744:	00000001 00000030 00000000              ....0.......

0043b750 <_ZN12_GLOBAL__N_12g0L13tensor_data11E>:
  43b750:	00000272 0000220c 000000c8 fffffb1b     r...."..........
  43b760:	0000027c 000000da 00001c28 00001cbf     |.......(.......
  43b770:	000000fc ffffe4d3 fffffec7 0000026f     ............o...
  43b780:	00001bc2 000011f7 00005fc8 00004438     ........._..8D..
  43b790:	fffffcdc fffffac4 0000043b 00001aaa     ........;.......
  43b7a0:	00004435 0000036a fffffba3 ffffff83     5D..j...........
  43b7b0:	00001181 00000188 00001141 00004a05     ........A....J..
  43b7c0:	00001917 00002fee ffffffc1 0000078a     ...../..........
  43b7d0:	fffffb06 fffff563 ffffface 000001db     ....c...........
  43b7e0:	0000005d 000000b2 ffffff35 000010d5     ].......5.......
  43b7f0:	000018dc 000012ea ffffe7a5 0000021e     ................
  43b800:	000013b1 fffffbf9 0000257a ffffff18     ........z%......

0043b810 <_ZN12_GLOBAL__N_12g0L7quant10E>:
  43b810:	0043b8e0 0043b81c 00000003              ..C...C.....

0043b81c <_ZN12_GLOBAL__N_12g0L12quant10_zeroE>:
  43b81c:	00000030 00000000 00000000 00000000     0...............
	...

0043b8e0 <_ZN12_GLOBAL__N_12g0L13quant10_scaleE>:
  43b8e0:	00000030 3b8a52e8 3bbff9cd 3cd1e2f8     0....R.;...;...<
  43b8f0:	3b51010d 3cacbbd2 3ce359f0 3befe059     ..Q;...<.Y.<Y..;
  43b900:	3beb7476 3b3e594b 3c0f3f1e 3c98fdc2     vt.;KY>;.?.<...<
  43b910:	3c2d254d 3c125487 3be92ec8 3b1a5992     M%-<.T.<...;.Y.;
  43b920:	3b1cc5f3 3b98c98a 3c975bec 3b377841     ...;...;.[.<Ax7;
  43b930:	3b7f406a 3b227ba0 3cc5ce14 3d335d66     j@.;.{";...<f]3=
  43b940:	3c14fe8c 3b261e69 3bb62e60 3b7f8f97     ...<i.&;`..;...;
  43b950:	3b9abcca 3be7a5f7 3bb21657 3c8a36b6     ...;...;W..;.6.<
  43b960:	3c4cd4ef 3b8b79e0 3c270c39 3b552e75     ..L<.y.;9.'<u.U;
  43b970:	3b4c62c4 3c4d825d 3c7c65a2 3b95be21     .bL;].M<.e|<!..;
  43b980:	3c07dd0d 3b73e798 3c141f21 3ba33bf8     ...<..s;!..<.;.;
  43b990:	3c6dcddf 3b613df0 3c228d1f 3b84aae1     ..m<.=a;.."<...;
  43b9a0:	3cb79e4d                                M..<

0043b9a4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension10E>:
  43b9a4:	00000004 00000001 00000003 00000003     ................
  43b9b4:	00000030 00000000 00000000              0...........

0043b9c0 <_ZN12_GLOBAL__N_12g0L13tensor_data10E>:
  43b9c0:	48a4aeef afb103aa d7783c32 c9b209fb     ...H....2<x.....
  43b9d0:	d421a46a b4e490f6 81035e4c 4d38df06     j.!.....L^....8M
  43b9e0:	123d4536 0e254857 2b17f081 a0e33ec6     6E=.WH%....+.>..
  43b9f0:	4626f761 0cc72b81 3b7d6d64 9b81b7f2     a.&F.+..dm};....
  43ba00:	ae60d878 257f7e91 8a30567f 7399d8b5     x.`..~.%.V0....s
  43ba10:	68667f5d b63a57ed cc0cada3 6ad966b7     ].fh.W:......f.j
  43ba20:	3d38fa6b fae20cb1 e10b4c19 d1d9fdb7     k.8=.....L......
  43ba30:	f138532e 49b6e1c2 cf1d141f 261ae3ff     .S8....I.......&
  43ba40:	440c5e2e f42f1bfe 0d05f7c4 fcfc6ce0     .^.D../......l..
  43ba50:	536f8127 8181b758 d1654673 a38bfe02     '.oSX...sFe.....
  43ba60:	96317f5c 811e70df 92716f65 51bb8c03     \.1..p..eoq....Q
  43ba70:	3463fc6c 023f7a1e 6165e6ee 748f798c     l.c4.z?...ea.y.t
  43ba80:	7f01f37f 08a78179 397f7f7f 818281dc     ....y......9....
  43ba90:	817f407f 379a8181 8f7f7f71 7f7f8181     .@.....7q.......
  43baa0:	7f7f017f 817f7ffc ac7f8101 818a7f81     ................
  43bab0:	3f81f861 fad6c557 f214511b dce0fd81     a..?W....Q......
  43bac0:	e0449329 3e4504b1 d0002a2f 1ce0b8f5     ).D...E>/*......
  43bad0:	4a1af82b fa4c1503 f834f6e4 0dd451ba     +..J..L...4..Q..
  43bae0:	1e0bb841 aeb341fc 2e1e111f ebce060a     A....A..........
  43baf0:	c214dc19 a60ffdf5 f44a2a19 120a920d     .........*J.....
  43bb00:	103eaa3b 01091b81 8152f617 f3a739ac     ;.>.......R..9..
  43bb10:	39060536 00da5c06 811d3717 e1cba9f1     6..9.\...7......
  43bb20:	a033f62a 22e9f2dc da4b2f1d 0ee28fad     *.3...."./K.....
  43bb30:	1d3fa83a d0392314 646dba75 10814b83     :.?..#9.u.md.K..
  43bb40:	2efaf4e0 fde327ea 29d91108 05e9feba     .....'.....)....
  43bb50:	f8191c0c 1c1015da 00161711 f00cd0fc     ................
  43bb60:	140ed1ff 082ae90b f4150038 fce758d8     ......*.8....X..

0043bb70 <_ZN12_GLOBAL__N_12g0L6quant9E>:
  43bb70:	0043bc40 0043bb7c 00000000              @.C.|.C.....

0043bb7c <_ZN12_GLOBAL__N_12g0L11quant9_zeroE>:
  43bb7c:	00000030 00000000 00000000 00000000     0...............
	...

0043bc40 <_ZN12_GLOBAL__N_12g0L12quant9_scaleE>:
  43bc40:	00000030 39b7cf59 3a05ec5f 38aa7d28     0...Y..9_..:(}.8
  43bc50:	3a417d41 39f53413 39c52974 3ac12095     A}A:.4.9t).9. .:
  43bc60:	3a61f1a1 3a712c22 3a084452 3917de90     ..a:",q:RD.:...9
  43bc70:	39d4c6a1 39d073b0 3a7d8e8a 3a0b86cd     ...9.s.9..}:...:
  43bc80:	3ac91540 3a7e9afe 39a12854 3a82551e     @..:..~:T(.9.U.:
  43bc90:	3acafb6d 3a490d45 39c7adae 38eda692     m..:E.I:...9...8
  43bca0:	39cf6110 3a90080a 3a4014b5 3a6232b4     .a.9...:..@:.2b:
  43bcb0:	39ddb1b0 3a67b832 3a2f2dfd 399202cd     ...92.g:.-/:...9
  43bcc0:	3a030219 3a3a06b3 3981a3a0 39c2d485     ...:..::...9...9
  43bcd0:	39a5e364 39e61a8b 3aa3d13f 39fb1d1c     d..9...9?..:...9
  43bce0:	3a0aeadf 3aa845f6 3a09613e 3a469b2c     ...:.E.:>a.:,.F:
  43bcf0:	39780e28 3aad3a89 3a170458 3a0f2860     (.x9.:.:X..:`(.:
  43bd00:	39dde08e                                ...9

0043bd04 <_ZN12_GLOBAL__N_12g0L17tensor_dimension9E>:
  43bd04:	00000001 00000030 00000000              ....0.......

0043bd10 <_ZN12_GLOBAL__N_12g0L12tensor_data9E>:
  43bd10:	00002e4e 0000138b 000037b8 0000087d     N........7..}...
  43bd20:	0000105b 0000125b ffffee90 0000120d     [...[...........
  43bd30:	00000adf fffff4dd fffff1ee 00001511     ................
  43bd40:	fffff2e3 ffffecbe 00001e73 00000726     ........s...&...
  43bd50:	fffff799 000008d5 fffff892 00000caf     ................
  43bd60:	ffffffd8 000011e4 00000726 fffff5a0     ........&.......
  43bd70:	fffffebe ffffec4a 00000aff ffffee74     ....J.......t...
  43bd80:	0000106f 00002026 00000276 00000290     o...& ..v.......
  43bd90:	00001fc0 00002b7b 0000215c 000013aa     ....{+..\!......
  43bda0:	00001805 ffffed0d 000002d5 000013b5     ................
  43bdb0:	fffffc92 ffffed74 0000106d 0000077e     ....t...m...~...
  43bdc0:	0000011f ffffe5c9 ffffced5 000009b5     ................

0043bdd0 <_ZN12_GLOBAL__N_12g0L6quant8E>:
  43bdd0:	0043bea0 0043bddc 00000000              ..C...C.....

0043bddc <_ZN12_GLOBAL__N_12g0L11quant8_zeroE>:
  43bddc:	00000030 00000000 00000000 00000000     0...............
	...

0043bea0 <_ZN12_GLOBAL__N_12g0L12quant8_scaleE>:
  43bea0:	00000030 3b9b3a93 3be232ca 3a8ffaa5     0....:.;.2.;...:
  43beb0:	3c23672f 3bcf1376 3ba68130 3ca318ec     /g#<v..;0..;...<
  43bec0:	3c3ecfaa 3c4babfb 3be6281c 3b004139     ..><..K<.(.;9A.;
  43bed0:	3bb3b0d5 3bb00a03 3c562169 3beba98f     ...;...;i!V<...;
  43bee0:	3ca9d0e7 3c57041f 3b881943 3c5c2228     ...<..W<C..;("\<
  43bef0:	3cab6b7b 3c29ca2a 3ba8a13e 3ac8b29b     {k.<*.)<>..;...:
  43bf00:	3baf2217 3c734565 3c2236b3 3c3f069f     .".;eEs<.6"<..?<
  43bf10:	3bbb38e4 3c43b053 3c13f0c1 3b769d53     .8.;S.C<...<S.v;
  43bf20:	3bdd4652 3c1d19b5 3b5af65e 3ba48913     RF.;...<^.Z;...;
  43bf30:	3b8c1803 3bc252fe 3c8a584d 3bd4113b     ...;.R.;MX.<;..;
  43bf40:	3beaa232 3c8e1ba5 3be8095a 3c27b96b     2..;...<Z..;k.'<
  43bf50:	3b517c05 3c924af7 3bff11df 3bf1cba0     .|Q;.J.<...;...;
  43bf60:	3bbb6079                                y`.;

0043bf64 <_ZN12_GLOBAL__N_12g0L17tensor_dimension8E>:
  43bf64:	00000004 00000030 00000001 00000001     ....0...........
  43bf74:	00000008 00000000 00000000              ............

0043bf80 <_ZN12_GLOBAL__N_12g0L12tensor_data8E>:
  43bf80:	81199697 fffcfdc1 fe62f181 0f0519d0     ..........b.....
  43bf90:	7f1af018 fbeee51a f5e5bd97 e0d57f24     ............$...
  43bfa0:	fdf4e3fb b88109f9 01f4dcfd be810cf2     ................
  43bfb0:	f510087f fc0112bd 06f2e581 0a000c45     ............E...
  43bfc0:	f6f52b17 142b81e2 f9f3144b 7ff9fee9     .+....+.K.......
  43bfd0:	0b83fa74 7f2efba5 de076881 100dbd5a     t........h..Z...
  43bfe0:	0b93df7f eaf8fd34 f20e0b7f f40518e2     ....4...........
  43bff0:	ef67af81 88daf643 f9004f1f 0ced81f4     ..g.C....O......
  43c000:	020ac1f5 070b7f0a f7ba8820 eece7fde     ........ .......
  43c010:	eff3ec28 f47f1bed 81fc17fd f4fe25f8     (............%..
  43c020:	0a4de2b0 81ff6738 ea25f7ee aa810af0     ..M.8g....%.....
  43c030:	7f08f243 2d33f3ee f887f07f 0409e520     C.....3-.... ...
  43c040:	231e14df af810107 06ac0b7f 1906f80f     ...#............
  43c050:	81e037ff fc0318e6 0396127f 501a3593     .7...........5.P
  43c060:	0feceb81 20fc0837 83f081f7 ecf01bf6     ....7.. ........
  43c070:	1e7f5cfe 22709626 2f81f9b1 675ee403     .\..&.p".../..^g
  43c080:	810285fa eef50bf3 8e00810f e6041006     ................
  43c090:	a220d2e7 4b7fc927 04390781 601ae893     .. .'..K..9....`
  43c0a0:	fb720f81 29de0ed5 f8fb0d7f 0e0213b7     ..r....)........
  43c0b0:	275002b7 7f32ca41 fc49fb81 05f70cbb     ..P'A.2...I.....
  43c0c0:	f0291ffd 337ff41b 02b7f47f f7090d37     ..)....3....7...
  43c0d0:	fa2081f0 ebfc0711 f77f6a05 0744a527     .. ......j..'.D.
  43c0e0:	6ffff707 00008103 f921e07f 030967c0     ...o......!..g..
  43c0f0:	6bf47f0a 281a7ffe e30b22f2 487fda1b     ...k...(.".....H

0043c100 <_ZN12_GLOBAL__N_12g0L6quant7E>:
  43c100:	0043c130 0043c10c 00000000              0.C...C.....

0043c10c <_ZN12_GLOBAL__N_12g0L11quant7_zeroE>:
  43c10c:	00000008 00000000 00000000 00000000     ................
	...

0043c130 <_ZN12_GLOBAL__N_12g0L12quant7_scaleE>:
  43c130:	00000008 3893f352 38fb5f06 38b7a75f     ....R..8._.8_..8
  43c140:	38625a97 38fff480 394f1ed2 38cf755c     .Zb8...8..O9\u.8
  43c150:	3935ec9b                                ..59

0043c154 <_ZN12_GLOBAL__N_12g0L17tensor_dimension7E>:
  43c154:	00000001 00000008 00000000              ............

0043c160 <_ZN12_GLOBAL__N_12g0L12tensor_data7E>:
  43c160:	00001078 ffffec86 fffffe8f 00000e58     x...........X...
  43c170:	00000914 000002bb fffff271 00000bd1     ........q.......

0043c180 <_ZN12_GLOBAL__N_12g0L6quant6E>:
  43c180:	0043c1b0 0043c18c 00000000              ..C...C.....

0043c18c <_ZN12_GLOBAL__N_12g0L11quant6_zeroE>:
  43c18c:	00000008 00000000 00000000 00000000     ................
	...

0043c1b0 <_ZN12_GLOBAL__N_12g0L12quant6_scaleE>:
  43c1b0:	00000008 3b447f28 3ba6ed1a 3b73ea4a     ....(.D;...;J.s;
  43c1c0:	3b165028 3ba9f85d 3c098a77 3b89c3ef     (P.;]..;w..<...;
  43c1d0:	3bf19e3d                                =..;

0043c1d4 <_ZN12_GLOBAL__N_12g0L17tensor_dimension6E>:
  43c1d4:	00000004 00000008 00000001 00000001     ................
  43c1e4:	00000008 00000000 00000000              ............

0043c1f0 <_ZN12_GLOBAL__N_12g0L12tensor_data6E>:
  43c1f0:	dfd500e9 fa8125ed 7ffc6115 ddf5f80a     .....%...a......
  43c200:	c4dbfd7f ca6231ba ab2a8109 391caa0d     .....1b...*....9
  43c210:	f7c4007e cf81fc1d 2804dd02 09008102     ~..........(....
  43c220:	0270ea7f 07fce16d fda1fe81 0523069e     ..p.m.........#.

0043c230 <_ZN12_GLOBAL__N_12g0L6quant5E>:
  43c230:	0043c260 0043c23c 00000000              `.C.<.C.....

0043c23c <_ZN12_GLOBAL__N_12g0L11quant5_zeroE>:
  43c23c:	00000008 00000000 00000000 00000000     ................
	...

0043c260 <_ZN12_GLOBAL__N_12g0L12quant5_scaleE>:
  43c260:	00000008 3993616d 39d09389 396cfbf6     ....ma.9...9..l9
  43c270:	39b7067c 3974ae08 39a6ea9b 3a9b9291     |..9..t9...9...:
  43c280:	3b419265                                e.A;

0043c284 <_ZN12_GLOBAL__N_12g0L17tensor_dimension5E>:
  43c284:	00000001 00000008 00000000              ............

0043c290 <_ZN12_GLOBAL__N_12g0L12tensor_data5E>:
  43c290:	ffffd437 0000298e 00000196 ffffd0c5     7....)..........
  43c2a0:	fffffc50 ffffc946 0000015f 0000005f     P...F..._..._...

0043c2b0 <_ZN12_GLOBAL__N_12g0L6quant4E>:
  43c2b0:	0043c2e0 0043c2bc 00000003              ..C...C.....

0043c2bc <_ZN12_GLOBAL__N_12g0L11quant4_zeroE>:
  43c2bc:	00000008 00000000 00000000 00000000     ................
	...

0043c2e0 <_ZN12_GLOBAL__N_12g0L12quant4_scaleE>:
  43c2e0:	00000008 3c43bd65 3c8a81f9 3c1d5f51     ....e.C<...<Q_.<
  43c2f0:	3c73149d 3c227b91 3c5daf96 3d4e9ea8     ..s<.{"<..]<..N=
  43c300:	3e008b37                                7..>

0043c304 <_ZN12_GLOBAL__N_12g0L17tensor_dimension4E>:
  43c304:	00000004 00000001 00000003 00000003     ................
  43c314:	00000008 00000000 00000000              ............

0043c320 <_ZN12_GLOBAL__N_12g0L12tensor_data4E>:
  43c320:	110d0201 1e080207 7fdb0106 1dfb01ed     ................
  43c330:	11f500fd 15fa02fe e77ffffd 2b90017f     ...............+
  43c340:	0597817f 81f17fa8 e90e01e4 297f01fd     ...............)
  43c350:	04090103 250f010b fdd20505 9bf603f3     .......%........
  43c360:	00f702fb 28fafe02                       .......(

0043c368 <_ZN12_GLOBAL__N_12g0L6quant3E>:
  43c368:	0043c398 0043c374 00000000              ..C.t.C.....

0043c374 <_ZN12_GLOBAL__N_12g0L11quant3_zeroE>:
  43c374:	00000008 00000000 00000000 00000000     ................
	...

0043c398 <_ZN12_GLOBAL__N_12g0L12quant3_scaleE>:
  43c398:	00000008 3921d548 393e2693 39142a63     ....H.!9.&>9c*.9
  43c3a8:	38bd4bfc 397b3b4b 39a181aa 374b86b1     .K.8K;{9...9..K7
  43c3b8:	37e76270                                pb.7

0043c3bc <_ZN12_GLOBAL__N_12g0L17tensor_dimension3E>:
  43c3bc:	00000001 00000008 00000000 00000000     ................
  43c3cc:	00000000                                ....

0043c3d0 <_ZN12_GLOBAL__N_12g0L12tensor_data3E>:
  43c3d0:	0000417d 00002d54 00000252 000073f0     }A..T-..R....s..
  43c3e0:	00000a7a 00001e07 00013dd6 00000928     z........=..(...

0043c3f0 <_ZN12_GLOBAL__N_12g0L6quant2E>:
  43c3f0:	0043c420 0043c3fc 00000000               .C...C.....

0043c3fc <_ZN12_GLOBAL__N_12g0L11quant2_zeroE>:
  43c3fc:	00000008 00000000 00000000 00000000     ................
	...

0043c420 <_ZN12_GLOBAL__N_12g0L12quant2_scaleE>:
  43c420:	00000008 3d213372 3d3d686c 3d139638     ....r3!=lh==8..=
  43c430:	3cbc8eaf 3d7a400f 3da0e028 3b4abb2a     ...<.@z=(..=*.J;
  43c440:	3be67b0d                                .{.;

0043c444 <_ZN12_GLOBAL__N_12g0L17tensor_dimension2E>:
  43c444:	00000004 00000008 00000003 00000003     ................
  43c454:	00000001 00000000 00000000              ............

0043c460 <_ZN12_GLOBAL__N_12g0L12tensor_data2E>:
  43c460:	810831c7 2ed6ff78 237f39ff 08d4b1bd     .1..x....9.#....
  43c470:	1b1e05d7 814534d1 2ac62015 4a351435     .....4E.. .*5.5J
  43c480:	c681b01a 102fcb04 db046f81 00c8021f     ....../..o......
  43c490:	01027f00 adf000b5 fe81ea02 2b0bcef5     ...............+
  43c4a0:	fcec1d81 f348e5f4                       ......H.

0043c4a8 <_ZN12_GLOBAL__N_12g0L17tensor_dimension1E>:
  43c4a8:	00000002 00000004 00000002 00000000     ................
	...

0043c4c0 <_ZN12_GLOBAL__N_12g0L12tensor_data1E>:
	...
  43c4cc:	00000001 00000000 00000001 00000000     ................
  43c4dc:	00000000                                ....

0043c4e0 <_ZN12_GLOBAL__N_12g0L6quant0E>:
  43c4e0:	0043c4f4 0043c4ec 00000000              ..C...C.....

0043c4ec <_ZN12_GLOBAL__N_12g0L11quant0_zeroE>:
  43c4ec:	00000001 ffffff80                       ........

0043c4f4 <_ZN12_GLOBAL__N_12g0L12quant0_scaleE>:
  43c4f4:	00000001 3b808081                       .......;

0043c4fc <_ZN12_GLOBAL__N_12g0L17tensor_dimension0E>:
  43c4fc:	00000004 00000001 00000060 00000060     ........`...`...
  43c50c:	00000001                                ....

0043c510 <zeroes.0>:
  43c510:	30303030 30303030 30303030 30303030     0000000000000000

0043c520 <blanks.1>:
  43c520:	20202020 20202020 20202020 20202020                     

0043c530 <_ctype_>:
  43c530:	20202000 20202020 28282020 20282828     .         ((((( 
  43c540:	20202020 20202020 20202020 20202020                     
  43c550:	10108820 10101010 10101010 10101010      ...............
  43c560:	04040410 04040404 10040404 10101010     ................
  43c570:	41411010 41414141 01010101 01010101     ..AAAAAA........
  43c580:	01010101 01010101 01010101 10101010     ................
  43c590:	42421010 42424242 02020202 02020202     ..BBBBBB........
  43c5a0:	02020202 02020202 02020202 10101010     ................
  43c5b0:	00000020 00000000 00000000 00000000      ...............
	...

0043c634 <zeroes.0>:
  43c634:	30303030 30303030 30303030 30303030     0000000000000000

0043c644 <blanks.1>:
  43c644:	20202020 20202020 20202020 20202020                     

0043c654 <p05.0>:
  43c654:	00000005 00000019 0000007d              ........}...

0043c660 <__mprec_bigtens>:
  43c660:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  43c670:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  43c680:	7f73bf3c 75154fdd                       <.s..O.u

0043c688 <__mprec_tens>:
  43c688:	00000000 3ff00000 00000000 40240000     .......?......$@
  43c698:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  43c6a8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  43c6b8:	00000000 412e8480 00000000 416312d0     .......A......cA
  43c6c8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  43c6d8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  43c6e8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  43c6f8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  43c708:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  43c718:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  43c728:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  43c738:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  43c748:	79d99db4 44ea7843                       ...yCx.D

0043c750 <ns_core_V1_0_0>:
  43c750:	00ca0000 00000001 00000000              ............

0043c75c <ns_power_current_version>:
  43c75c:	00ca0007 00000001 00000000              ............

0043c768 <ns_power_oldest_supported_version>:
  43c768:	00ca0007 00000000 00000001              ............

0043c774 <ns_power_V1_0_0>:
  43c774:	00ca0007 00000001 00000000              ............

0043c780 <ns_timer_current_version>:
  43c780:	00ca0002 00000001 00000000              ............

0043c78c <ns_timer_oldest_supported_version>:
  43c78c:	00ca0002 00000000 00000001              ............

0043c798 <ns_timer_V1_0_0>:
  43c798:	00ca0002 00000001 00000000              ............

0043c7a4 <g_DefaultSRAMCfg>:
  43c7a4:	00000007 00000007                       ........

0043c7ac <am_hal_pwrctrl_peripheral_control>:
  43c7ac:	40021004 00000001 40021008 00000001     ...@.......@....
  43c7bc:	40021004 10000000 40021008 10000000     ...@.......@....
  43c7cc:	40021004 20000000 40021008 20000000     ...@... ...@... 
  43c7dc:	40021004 00000002 40021008 0000001e     ...@.......@....
  43c7ec:	40021004 00000004 40021008 0000001e     ...@.......@....
  43c7fc:	40021004 00000008 40021008 0000001e     ...@.......@....
  43c80c:	40021004 00000010 40021008 0000001e     ...@.......@....
  43c81c:	40021004 00000020 40021008 000001e0     ...@ ......@....
  43c82c:	40021004 00000040 40021008 000001e0     ...@@......@....
  43c83c:	40021004 00000080 40021008 000001e0     ...@.......@....
  43c84c:	40021004 00000100 40021008 000001e0     ...@.......@....
  43c85c:	40021004 00000200 40021008 00001e00     ...@.......@....
  43c86c:	40021004 00000400 40021008 00001e00     ...@.......@....
  43c87c:	40021004 00000800 40021008 00001e00     ...@.......@....
  43c88c:	40021004 00001000 40021008 00001e00     ...@.......@....
  43c89c:	40021004 00002000 40021008 00002000     ...@. .....@. ..
  43c8ac:	40021004 00004000 40021008 00004000     ...@.@.....@.@..
  43c8bc:	40021004 00008000 40021008 00008000     ...@.......@....
  43c8cc:	40021004 00010000 40021008 00010000     ...@.......@....
  43c8dc:	40021004 00020000 40021008 00020000     ...@.......@....
  43c8ec:	40021004 00040000 40021008 00040000     ...@.......@....
  43c8fc:	40021004 00080000 40021008 00080000     ...@.......@....
  43c90c:	40021004 00100000 40021008 00100000     ...@.......@....
  43c91c:	40021004 00200000 40021008 00200000     ...@.. ....@.. .
  43c92c:	40021004 00400000 40021008 00400000     ...@..@....@..@.
  43c93c:	40021004 00800000 40021008 00800000     ...@.......@....
  43c94c:	40021004 01000000 40021008 01000000     ...@.......@....
  43c95c:	40021004 02000000 40021008 02000000     ...@.......@....
  43c96c:	40021004 04000000 40021008 04000000     ...@.......@....
  43c97c:	40021004 08000000 40021008 08000000     ...@.......@....
  43c98c:	4002100c 00000004 40021010 00000004     ...@.......@....
  43c99c:	4002100c 00000040 40021010 00000040     ...@@......@@...
  43c9ac:	4002100c 00000080 40021010 00000080     ...@.......@....
  43c9bc:	4002100c 00000400 40021010 00000400     ...@.......@....
  43c9cc:	00000000                                ....

0043c9d0 <g_ui32DSpintbl>:
  43c9d0:	8fc007e6 e3f3ffff 81ffffff ffffffff     ................
  43c9e0:	f00fc07f 00000001 00000189 00000000     ................

0043c9f0 <g_ui32CfgDSExt>:
  43c9f0:	00000000 00003fe0 000003ff 1ffbfe00     .....?..........
  43ca00:	0007c000 00000000 00000000              ............

0043ca0c <_ZTSN10__cxxabiv117__class_type_infoE>:
  43ca0c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
  43ca1c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
  43ca2c:	00000045                                E...

0043ca30 <_ZTIN10__cxxabiv117__class_type_infoE>:
  43ca30:	0043cb90 0043ca0c 0043cbc4              ..C...C...C.

0043ca3c <_ZTVN10__cxxabiv117__class_type_infoE>:
  43ca3c:	00000000 0043ca30 0042aac5 0042aad9     ....0.C...B...B.
  43ca4c:	0042adcd 0042adcd 0042ab55 0042aa81     ..B...B.U.B...B.
  43ca5c:	0042ab39 0042aaf5 0042aab9              9.B...B...B.

0043ca68 <_ZTSN10__cxxabiv120__function_type_infoE>:
  43ca68:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
  43ca78:	6e75665f 6f697463 79745f6e 695f6570     _function_type_i
  43ca88:	456f666e 00000000                       nfoE....

0043ca90 <_ZTIN10__cxxabiv120__function_type_infoE>:
  43ca90:	0043cb90 0043ca68 0043cbc4              ..C.h.C...C.

0043ca9c <_ZTVN10__cxxabiv120__function_type_infoE>:
  43ca9c:	00000000 0043ca90 0042ab85 0042ab99     ......C...B...B.
  43caac:	0042adcd 0042ab81 0042add5 0042add1     ..B...B...B...B.

0043cabc <_ZTSN9__gnu_cxx20recursive_init_errorE>:
  43cabc:	5f5f394e 5f756e67 32787863 63657230     N9__gnu_cxx20rec
  43cacc:	69737275 695f6576 5f74696e 6f727265     ursive_init_erro
  43cadc:	00004572                                rE..

0043cae0 <_ZTIN9__gnu_cxx20recursive_init_errorE>:
  43cae0:	0043cb90 0043cabc 0043cc14              ..C...C...C.

0043caec <_ZTVN9__gnu_cxx20recursive_init_errorE>:
  43caec:	00000000 0043cae0 0042abf5 0042ac09     ......C...B...B.
  43cafc:	0042b2a5                                ..B.

0043cb00 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
  43cb00:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
  43cb10:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
  43cb20:	00456f66                                foE.

0043cb24 <_ZTIN10__cxxabiv119__pointer_type_infoE>:
  43cb24:	0043cb90 0043cb00 0043cd34              ..C...C.4.C.

0043cb30 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
  43cb30:	00000000 0043cb24 0042ac35 0042ac49     ....$.C.5.B.I.B.
  43cb40:	0042ac31 0042adcd 0042ba79 0042add1     1.B...B.y.B...B.
  43cb50:	0042ac65                                e.B.

0043cb54 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
  43cb54:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
  43cb64:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
  43cb74:	456f666e 00000000                       nfoE....

0043cb7c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
  43cb7c:	0043cb90 0043cb54 0043ca30              ..C.T.C.0.C.

0043cb88 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
  43cb88:	00000000 0043cb7c 0042acad 0042acc1     ....|.C...B...B.
  43cb98:	0042adcd 0042adcd 0042ab55 0042aa81     ..B...B.U.B...B.
  43cba8:	0042ad9d 0042ad19 0042acdd              ..B...B...B.

0043cbb4 <_ZTSSt9type_info>:
  43cbb4:	74397453 5f657079 6f666e69 00000000     St9type_info....

0043cbc4 <_ZTISt9type_info>:
  43cbc4:	0043ca44 0043cbb4                       D.C...C.

0043cbcc <_ZTSSt17bad_function_call>:
  43cbcc:	37317453 5f646162 636e7566 6e6f6974     St17bad_function
  43cbdc:	6c61635f 0000006c                       _call...

0043cbe4 <_ZTISt17bad_function_call>:
  43cbe4:	0043cb90 0043cbcc 0043cc14              ..C...C...C.

0043cbf0 <_ZTVSt17bad_function_call>:
  43cbf0:	00000000 0043cbe4 0042ae95 0042aea9     ......C...B...B.
  43cc00:	0042ae8d                                ..B.

0043cc04 <_ZTSSt9exception>:
  43cc04:	65397453 70656378 6e6f6974 00000000     St9exception....

0043cc14 <_ZTISt9exception>:
  43cc14:	0043ca44 0043cc04                       D.C...C.

0043cc1c <_ZTSSt13bad_exception>:
  43cc1c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
  43cc2c:	0000006e                                n...

0043cc30 <_ZTISt13bad_exception>:
  43cc30:	0043cb90 0043cc1c 0043cc14              ..C...C...C.

0043cc3c <_ZTSN10__cxxabiv115__forced_unwindE>:
  43cc3c:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
  43cc4c:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

0043cc5c <_ZTIN10__cxxabiv115__forced_unwindE>:
  43cc5c:	0043ca44 0043cc3c                       D.C.<.C.

0043cc64 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
  43cc64:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
  43cc74:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
  43cc84:	00456e6f                                onE.

0043cc88 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
  43cc88:	0043ca44 0043cc64                       D.C.d.C.

0043cc90 <_ZTVSt13bad_exception>:
  43cc90:	00000000 0043cc30 0042b2a1 0042b2b5     ....0.C...B...B.
  43cca0:	0042b2ad                                ..B.

0043cca4 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
  43cca4:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
  43ccb4:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
  43ccc4:	6e695f65 00456f66                       e_infoE.

0043cccc <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
  43cccc:	0043cb90 0043cca4 0043cbc4              ..C...C...C.

0043ccd8 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
  43ccd8:	00000000 0043cccc 0042ba05 0042ba19     ......C...B...B.
  43cce8:	0042adcd 0042adcd 0042add5 0042add1     ..B...B...B...B.

0043ccf8 <_ZTSDn>:
  43ccf8:	00006e44                                Dn..

0043ccfc <_ZTIDn>:
  43ccfc:	0043cce0 0043ccf8                       ..C...C.

0043cd04 <_ZTSv>:
  43cd04:	00000076                                v...

0043cd08 <_ZTIv>:
  43cd08:	0043cce0 0043cd04                       ..C...C.

0043cd10 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
  43cd10:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
  43cd20:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
  43cd30:	00000045                                E...

0043cd34 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
  43cd34:	0043cb90 0043cd10 0043cbc4              ..C...C...C.

0043cd40 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
  43cd40:	00000000 0043cd34 0042ba49 0042ba5d     ....4.C.I.B.].B.
  43cd50:	0042adcd 0042adcd 0042ba79 0042add1     ..B...B.y.B...B.
  43cd60:	0042ba35                                5.B.

0043cd64 <_ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE2pm>:
  43cd64:	ffffffff                                ....

0043cd68 <_ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE3pmf>:
	...

0043cd70 <_ZTSN10__cxxabiv129__pointer_to_member_type_infoE>:
  43cd70:	5f30314e 7878635f 76696261 5f393231     N10__cxxabiv129_
  43cd80:	696f705f 7265746e 5f6f745f 626d656d     _pointer_to_memb
  43cd90:	745f7265 5f657079 6f666e69 00000045     er_type_infoE...

0043cda0 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>:
  43cda0:	0043cb90 0043cd70 0043cd34              ..C.p.C.4.C.

0043cdac <_ZTSSt11logic_error>:
  43cdac:	31317453 69676f6c 72655f63 00726f72     St11logic_error.

0043cdbc <_ZTISt11logic_error>:
  43cdbc:	0043cb90 0043cdac 0043cc14              ..C...C...C.

0043cdc8 <_ZTSSt12length_error>:
  43cdc8:	32317453 676e656c 655f6874 726f7272     St12length_error
  43cdd8:	00000000                                ....

0043cddc <_ZTISt12length_error>:
  43cddc:	0043cb90 0043cdc8 0043cdbc              ..C...C...C.

0043cde8 <_ZTVSt11logic_error>:
  43cde8:	00000000 0043cdbc 0042bc85 0042bd05     ......C...B...B.
  43cdf8:	0042bc81                                ..B.

0043cdfc <_ZTVSt12length_error>:
  43cdfc:	00000000 0043cddc 0042bcc5 0042bd4d     ......C...B.M.B.
  43ce0c:	0042bc81                                ..B.

0043ce10 <CSWTCH.176>:
  43ce10:	004354ec 004354f0 004354f4              .TC..TC..TC.

0043ce1c <standard_subs>:
  43ce1c:	00000074 00435194 00000003 00435194     t....QC......QC.
  43ce2c:	00000003 00000000 00000000 00000061     ............a...
  43ce3c:	004354f8 0000000e 004354f8 0000000e     .TC......TC.....
  43ce4c:	00435508 00000009 00000062 00435514     .UC.....b....UC.
  43ce5c:	00000011 00435514 00000011 00435528     .....UC.....(UC.
  43ce6c:	0000000c 00000073 00435538 0000000b     ....s...8UC.....
  43ce7c:	00435544 00000046 00435528 0000000c     DUC.F...(UC.....
  43ce8c:	00000069 0043558c 0000000c 0043559c     i....UC......UC.
  43ce9c:	00000031 004355d0 0000000d 0000006f     1....UC.....o...
  43ceac:	004355e0 0000000c 004355f0 00000031     .UC......UC.1...
  43cebc:	00435624 0000000d 00000064 00435634     $VC.....d...4VC.
  43cecc:	0000000d 00435644 00000032 00435678     ....DVC.2...xVC.
  43cedc:	0000000e                                ....

0043cee0 <cplus_demangle_operators>:
  43cee0:	00435688 0043568c 00000002 00000002     .VC..VC.........
  43cef0:	00435690 00435694 00000001 00000002     .VC..VC.........
  43cf00:	00435698 004354a8 00000002 00000002     .VC..TC.........
  43cf10:	0043569c 004356a0 00000001 00000001     .VC..VC.........
  43cf20:	004356a4 004356a0 00000001 00000002     .VC..VC.........
  43cf30:	00435a20 004356a8 00000008 00000001      ZC..VC.........
  43cf40:	004356b4 004356b8 00000009 00000001     .VC..VC.........
  43cf50:	004356c4 004356a8 00000008 00000001     .VC..VC.........
  43cf60:	004356c8 004356cc 0000000a 00000002     .VC..VC.........
  43cf70:	00435374 004356d8 00000002 00000002     tSC..VC.........
  43cf80:	004356dc 004356e0 00000001 00000002     .VC..VC.........
  43cf90:	004356e4 004356e8 00000001 00000001     .VC..VC.........
  43cfa0:	004356ec 004356f0 00000002 00000002     .VC..VC.........
  43cfb0:	004356f4 004356f8 00000006 00000003     .VC..VC.........
  43cfc0:	00435700 00435704 00000009 00000001     .WC..WC.........
  43cfd0:	00435710 00435714 0000000c 00000002     .WC..WC.........
  43cfe0:	00435724 00435728 00000001 00000001     $WC.(WC.........
  43cff0:	0043572c 00435694 00000001 00000002     ,WC..VC.........
  43d000:	00435730 00435734 00000007 00000001     0WC.4WC.........
  43d010:	0043573c 00435740 00000002 00000002     <WC.@WC.........
  43d020:	00435744 0043588c 00000001 00000002     DWC..XC.........
  43d030:	00435748 0043574c 00000001 00000002     HWC.LWC.........
  43d040:	00435750 004356fc 00000002 00000002     PWC..VC.........
  43d050:	00435754 00435758 00000002 00000002     TWC.XWC.........
  43d060:	0043575c 00435760 00000001 00000002     \WC.`WC.........
  43d070:	00435764 00435768 00000002 00000002     dWC.hWC.........
  43d080:	0043576c 004353c4 00000003 00000003     lWC..SC.........
  43d090:	00435770 004353c4 00000003 00000003     pWC..SC.........
  43d0a0:	00435774 004353c4 00000003 00000002     tWC..SC.........
  43d0b0:	00435778 004353c4 00000003 00000002     xWC..SC.........
  43d0c0:	0043577c 00435780 00000002 00000002     |WC..WC.........
  43d0d0:	00435784 004351b8 00000002 00000001     .WC..QC.........
  43d0e0:	00435788 004355cc 00000001 00000002     .WC..UC.........
  43d0f0:	00435378 0043578c 00000002 00000002     xSC..WC.........
  43d100:	00435790 00435794 00000003 00000002     .WC..WC.........
  43d110:	004358fc 00435798 00000002 00000002     .XC..WC.........
  43d120:	0043579c 004357a0 0000000b 00000001     .WC..WC.........
  43d130:	004357ac 004357b0 00000002 00000002     .WC..WC.........
  43d140:	004357b4 004357b8 00000001 00000002     .WC..WC.........
  43d150:	004357bc 004357c0 00000002 00000002     .WC..WC.........
  43d160:	004357c4 004357c8 00000002 00000002     .WC..WC.........
  43d170:	004357cc 004357d0 00000001 00000002     .WC..WC.........
  43d180:	004357d4 00435728 00000001 00000002     .WC.(WC.........
  43d190:	004357d8 004357dc 00000002 00000001     .WC..WC.........
  43d1a0:	004357e0 004357e4 00000005 00000003     .WC..WC.........
  43d1b0:	004357ec 004357f0 00000002 00000002     .WC..WC.........
  43d1c0:	004359cc 004357d0 00000001 00000001     .YC..WC.........
  43d1d0:	004357f4 004357f8 00000001 00000001     .WC..WC.........
  43d1e0:	004357fc 00435800 00000003 00000003     .WC..XC.........
  43d1f0:	00435804 00435808 00000002 00000002     .XC..XC.........
  43d200:	0043580c 00435810 00000002 00000002     .XC..XC.........
  43d210:	00435504 00435814 00000001 00000002     .UC..XC.........
  43d220:	00435818 0043581c 00000002 00000002     .XC..XC.........
  43d230:	00435820 00435824 00000001 00000002      XC.$XC.........
  43d240:	00435828 0043582c 00000003 00000002     (XC.,XC.........
  43d250:	00435830 00435834 00000002 00000001     0XC.4XC.........
  43d260:	00435838 00435824 00000001 00000001     8XC.$XC.........
  43d270:	0043583c 00435840 00000002 00000002     <XC.@XC.........
  43d280:	0043537c 00435844 00000001 00000003     |SC.DXC.........
  43d290:	00435848 0043584c 00000002 00000002     HXC.LXC.........
  43d2a0:	00435850 00435854 00000003 00000002     PXC.TXC.........
  43d2b0:	00435858 0043585c 00000010 00000002     XXC.\XC.........
  43d2c0:	00435870 00435874 00000001 00000002     pXC.tXC.........
  43d2d0:	00435878 0043587c 00000002 00000002     xXC.|XC.........
  43d2e0:	00435880 00435884 00000009 00000001     .XC..XC.........
  43d2f0:	00435890 00435884 00000009 00000001     .XC..XC.........
  43d300:	00435894 00435898 0000000b 00000002     .XC..XC.........
  43d310:	0043545c 004358a4 00000003 00000002     \TC..XC.........
  43d320:	004356d4 004358a8 00000007 00000001     .VC..XC.........
  43d330:	004358b0 004358a8 00000007 00000001     .XC..XC.........
  43d340:	004358b4 004358b8 00000005 00000000     .XC..XC.........
  43d350:	004358c0 004358c4 00000006 00000001     .XC..XC.........
	...

0043d370 <cplus_demangle_builtin_types>:
  43d370:	004358cc 0000000b 004358cc 0000000b     .XC......XC.....
  43d380:	00000000 004358d8 00000004 004358e0     .....XC......XC.
  43d390:	00000007 00000007 004358e8 00000004     .........XC.....
  43d3a0:	004358f0 00000004 00000000 004358f8     .XC..........XC.
  43d3b0:	00000006 004358f8 00000006 00000008     .....XC.........
  43d3c0:	00435900 0000000b 00435900 0000000b     .YC......YC.....
  43d3d0:	00000008 0043590c 00000005 0043590c     .....YC......YC.
  43d3e0:	00000005 00000008 00435914 0000000a     .........YC.....
  43d3f0:	00435914 0000000a 00000008 00435920     .YC......... YC.
  43d400:	0000000d 00435920 0000000d 00000000     .... YC.........
  43d410:	00435930 00000003 00435930 00000003     0YC.....0YC.....
  43d420:	00000001 00435934 0000000c 00435944     ....4YC.....DYC.
  43d430:	00000008 00000002 00000000 00000000     ................
	...
  43d44c:	00435950 00000004 00435950 00000004     PYC.....PYC.....
  43d45c:	00000003 00435958 0000000d 00435958     ....XYC.....XYC.
  43d46c:	0000000d 00000004 00435968 00000008     ........hYC.....
  43d47c:	00435968 00000008 00000000 00435974     hYC.........tYC.
  43d48c:	00000011 00435974 00000011 00000000     ....tYC.........
	...
  43d4d8:	00435988 00000005 00435988 00000005     .YC......YC.....
  43d4e8:	00000000 00435990 0000000e 00435990     .....YC......YC.
  43d4f8:	0000000e 00000000 00000000 00000000     ................
	...
  43d514:	004359a0 00000004 004359a0 00000004     .YC......YC.....
  43d524:	00000009 004359a8 00000007 004358e8     .....YC......XC.
  43d534:	00000004 00000000 004359b0 00000009     .........YC.....
  43d544:	00435950 00000004 00000005 004359bc     PYC..........YC.
  43d554:	00000012 004359bc 00000012 00000006     .....YC.........
  43d564:	004353c4 00000003 004353c4 00000003     .SC......SC.....
  43d574:	00000000 004359d0 00000009 004359d0     .....YC......YC.
  43d584:	00000009 00000000 004359dc 00000009     .........YC.....
  43d594:	004359dc 00000009 00000000 004359e8     .YC..........YC.
  43d5a4:	0000000a 004359e8 0000000a 00000000     .....YC.........
  43d5b4:	004359f4 00000004 004359f4 00000004     .YC......YC.....
  43d5c4:	00000008 004359fc 00000007 004359fc     .....YC......YC.
  43d5d4:	00000007 00000000 00435a04 00000008     .........ZC.....
  43d5e4:	00435a04 00000008 00000000 00435a10     .ZC..........ZC.
  43d5f4:	00000008 00435a10 00000008 00000000     .....ZC.........
  43d604:	00435198 00000011 00435198 00000011     .QC......QC.....
  43d614:	00000000 00435a1c 00000006 00435a1c     .....ZC......ZC.
  43d624:	00000006 00000008 00435a24 0000000f     ........$ZC.....
  43d634:	00435a24 0000000f 00000008              $ZC.........

Disassembly of section .itcm_text:

00000000 <br_util_delay_cycles>:
        }
        ei_printf("\n");
        return ei::EIDSP_OK;
    }

    int extract(ei::signal_t *signal, ei::matrix_t *output_matrix, void *config_ptr, const float frequency) override {
   0:	3801      	subs	r0, #1
   2:	f47f affd 	bne.w	0 <br_util_delay_cycles>
   6:	4770      	bx	lr

00000008 <internal_hal_read_word>:
   8:	6800      	ldr	r0, [r0, #0]
   a:	4770      	bx	lr

0000000c <internal_hal_read_words>:
        using namespace ei;

        ei_dsp_config_flatten_t config = *((ei_dsp_config_flatten_t*)config_ptr);

        uint32_t expected_matrix_size = 0;
        if (config.average) expected_matrix_size += config.axes;
   c:	f850 3b04 	ldr.w	r3, [r0], #4
        ei_dsp_config_flatten_t config = *((ei_dsp_config_flatten_t*)config_ptr);
  10:	f841 3b04 	str.w	r3, [r1], #4
        if (config.average) expected_matrix_size += config.axes;
  14:	3a01      	subs	r2, #1
    int extract(ei::signal_t *signal, ei::matrix_t *output_matrix, void *config_ptr, const float frequency) override {
  16:	f47f aff9 	bne.w	c <internal_hal_read_words>
        if (config.average) expected_matrix_size += config.axes;
  1a:	4770      	bx	lr
