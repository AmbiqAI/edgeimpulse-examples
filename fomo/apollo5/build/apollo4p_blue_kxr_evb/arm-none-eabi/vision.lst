
build/apollo4p_blue_kxr_evb/arm-none-eabi/vision.axf:     file format elf32-littlearm


Disassembly of section .text:

00018000 <g_am_pfnVectors>:
   18000:	00 80 00 10 cd 96 01 00 c1 96 01 00 c5 96 01 00     ................
   18010:	c5 96 01 00 c5 96 01 00 c5 96 01 00 00 00 00 00     ................
	...
   1802c:	a1 fb 02 00 c9 96 01 00 00 00 00 00 11 fc 02 00     ................
   1803c:	75 fc 02 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     u...............
   1804c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1805c:	a9 c8 03 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1806c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1807c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1808c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1809c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   180ac:	99 ff 02 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   180bc:	c9 96 01 00 1d fd 02 00 3d fd 02 00 c9 96 01 00     ........=.......
   180cc:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   180dc:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   180ec:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   180fc:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1810c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1811c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1812c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1813c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1814c:	c9 96 01 00 c5 c2 02 00 ed c2 02 00 15 c3 02 00     ................
   1815c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1816c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1817c:	c9 96 01 00 c9 96 01 00 c9 96 01 00 c9 96 01 00     ................
   1818c:	c9 96 01 00                                         ....

00018190 <__Patchable>:
	...

00018200 <strcmp>:
   18200:	7802      	ldrb	r2, [r0, #0]
   18202:	780b      	ldrb	r3, [r1, #0]
   18204:	2a01      	cmp	r2, #1
   18206:	bf28      	it	cs
   18208:	429a      	cmpcs	r2, r3
   1820a:	f040 80d8 	bne.w	183be <strcmp+0x1be>
   1820e:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   18212:	ea40 0401 	orr.w	r4, r0, r1
   18216:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1821a:	f06f 0c00 	mvn.w	ip, #0
   1821e:	ea4f 7244 	mov.w	r2, r4, lsl #29
   18222:	b31a      	cbz	r2, 1826c <strcmp+0x6c>
   18224:	ea80 0401 	eor.w	r4, r0, r1
   18228:	f014 0f07 	tst.w	r4, #7
   1822c:	d16b      	bne.n	18306 <strcmp+0x106>
   1822e:	f000 0407 	and.w	r4, r0, #7
   18232:	f020 0007 	bic.w	r0, r0, #7
   18236:	f004 0503 	and.w	r5, r4, #3
   1823a:	f021 0107 	bic.w	r1, r1, #7
   1823e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   18242:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   18246:	f014 0f04 	tst.w	r4, #4
   1824a:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   1824e:	fa0c f405 	lsl.w	r4, ip, r5
   18252:	ea62 0204 	orn	r2, r2, r4
   18256:	ea66 0604 	orn	r6, r6, r4
   1825a:	d00b      	beq.n	18274 <strcmp+0x74>
   1825c:	ea63 0304 	orn	r3, r3, r4
   18260:	4662      	mov	r2, ip
   18262:	ea67 0704 	orn	r7, r7, r4
   18266:	4666      	mov	r6, ip
   18268:	e004      	b.n	18274 <strcmp+0x74>
   1826a:	bf00      	nop
   1826c:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   18270:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   18274:	fa82 f54c 	uadd8	r5, r2, ip
   18278:	ea82 0406 	eor.w	r4, r2, r6
   1827c:	faa4 f48c 	sel	r4, r4, ip
   18280:	bb6c      	cbnz	r4, 182de <strcmp+0xde>
   18282:	fa83 f54c 	uadd8	r5, r3, ip
   18286:	ea83 0507 	eor.w	r5, r3, r7
   1828a:	faa5 f58c 	sel	r5, r5, ip
   1828e:	b995      	cbnz	r5, 182b6 <strcmp+0xb6>
   18290:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   18294:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   18298:	fa82 f54c 	uadd8	r5, r2, ip
   1829c:	ea82 0406 	eor.w	r4, r2, r6
   182a0:	faa4 f48c 	sel	r4, r4, ip
   182a4:	fa83 f54c 	uadd8	r5, r3, ip
   182a8:	ea83 0507 	eor.w	r5, r3, r7
   182ac:	faa5 f58c 	sel	r5, r5, ip
   182b0:	4325      	orrs	r5, r4
   182b2:	d0db      	beq.n	1826c <strcmp+0x6c>
   182b4:	b99c      	cbnz	r4, 182de <strcmp+0xde>
   182b6:	ba2d      	rev	r5, r5
   182b8:	fab5 f485 	clz	r4, r5
   182bc:	f024 0407 	bic.w	r4, r4, #7
   182c0:	fa27 f104 	lsr.w	r1, r7, r4
   182c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   182c8:	fa23 f304 	lsr.w	r3, r3, r4
   182cc:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
   182d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
   182d4:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   182d8:	eba0 0001 	sub.w	r0, r0, r1
   182dc:	4770      	bx	lr
   182de:	ba24      	rev	r4, r4
   182e0:	fab4 f484 	clz	r4, r4
   182e4:	f024 0407 	bic.w	r4, r4, #7
   182e8:	fa26 f104 	lsr.w	r1, r6, r4
   182ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   182f0:	fa22 f204 	lsr.w	r2, r2, r4
   182f4:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
   182f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
   182fc:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18300:	eba0 0001 	sub.w	r0, r0, r1
   18304:	4770      	bx	lr
   18306:	f014 0f03 	tst.w	r4, #3
   1830a:	d13c      	bne.n	18386 <strcmp+0x186>
   1830c:	f010 0403 	ands.w	r4, r0, #3
   18310:	d128      	bne.n	18364 <strcmp+0x164>
   18312:	f850 2b08 	ldr.w	r2, [r0], #8
   18316:	f851 3b08 	ldr.w	r3, [r1], #8
   1831a:	fa82 f54c 	uadd8	r5, r2, ip
   1831e:	ea82 0503 	eor.w	r5, r2, r3
   18322:	faa5 f58c 	sel	r5, r5, ip
   18326:	b95d      	cbnz	r5, 18340 <strcmp+0x140>
   18328:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1832c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   18330:	fa82 f54c 	uadd8	r5, r2, ip
   18334:	ea82 0503 	eor.w	r5, r2, r3
   18338:	faa5 f58c 	sel	r5, r5, ip
   1833c:	2d00      	cmp	r5, #0
   1833e:	d0e8      	beq.n	18312 <strcmp+0x112>
   18340:	ba2d      	rev	r5, r5
   18342:	fab5 f485 	clz	r4, r5
   18346:	f024 0407 	bic.w	r4, r4, #7
   1834a:	fa23 f104 	lsr.w	r1, r3, r4
   1834e:	fa22 f204 	lsr.w	r2, r2, r4
   18352:	f002 00ff 	and.w	r0, r2, #255	@ 0xff
   18356:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
   1835a:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1835e:	eba0 0001 	sub.w	r0, r0, r1
   18362:	4770      	bx	lr
   18364:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   18368:	f020 0003 	bic.w	r0, r0, #3
   1836c:	f850 2b08 	ldr.w	r2, [r0], #8
   18370:	f021 0103 	bic.w	r1, r1, #3
   18374:	f851 3b08 	ldr.w	r3, [r1], #8
   18378:	fa0c f404 	lsl.w	r4, ip, r4
   1837c:	ea62 0204 	orn	r2, r2, r4
   18380:	ea63 0304 	orn	r3, r3, r4
   18384:	e7c9      	b.n	1831a <strcmp+0x11a>
   18386:	f010 0403 	ands.w	r4, r0, #3
   1838a:	d01d      	beq.n	183c8 <strcmp+0x1c8>
   1838c:	eba1 0104 	sub.w	r1, r1, r4
   18390:	f020 0003 	bic.w	r0, r0, #3
   18394:	07e4      	lsls	r4, r4, #31
   18396:	f850 2b04 	ldr.w	r2, [r0], #4
   1839a:	d006      	beq.n	183aa <strcmp+0x1aa>
   1839c:	d212      	bcs.n	183c4 <strcmp+0x1c4>
   1839e:	788b      	ldrb	r3, [r1, #2]
   183a0:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   183a4:	1ae4      	subs	r4, r4, r3
   183a6:	d106      	bne.n	183b6 <strcmp+0x1b6>
   183a8:	b12b      	cbz	r3, 183b6 <strcmp+0x1b6>
   183aa:	78cb      	ldrb	r3, [r1, #3]
   183ac:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   183b0:	1ae4      	subs	r4, r4, r3
   183b2:	d100      	bne.n	183b6 <strcmp+0x1b6>
   183b4:	b933      	cbnz	r3, 183c4 <strcmp+0x1c4>
   183b6:	4620      	mov	r0, r4
   183b8:	f85d 4b10 	ldr.w	r4, [sp], #16
   183bc:	4770      	bx	lr
   183be:	eba2 0003 	sub.w	r0, r2, r3
   183c2:	4770      	bx	lr
   183c4:	f101 0104 	add.w	r1, r1, #4
   183c8:	f850 2b04 	ldr.w	r2, [r0], #4
   183cc:	07cc      	lsls	r4, r1, #31
   183ce:	f021 0103 	bic.w	r1, r1, #3
   183d2:	f851 3b04 	ldr.w	r3, [r1], #4
   183d6:	d848      	bhi.n	1846a <strcmp+0x26a>
   183d8:	d224      	bcs.n	18424 <strcmp+0x224>
   183da:	f022 447f 	bic.w	r4, r2, #4278190080	@ 0xff000000
   183de:	fa82 f54c 	uadd8	r5, r2, ip
   183e2:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   183e6:	faa5 f58c 	sel	r5, r5, ip
   183ea:	d10a      	bne.n	18402 <strcmp+0x202>
   183ec:	b965      	cbnz	r5, 18408 <strcmp+0x208>
   183ee:	f851 3b04 	ldr.w	r3, [r1], #4
   183f2:	ea84 0402 	eor.w	r4, r4, r2
   183f6:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   183fa:	d10e      	bne.n	1841a <strcmp+0x21a>
   183fc:	f850 2b04 	ldr.w	r2, [r0], #4
   18400:	e7eb      	b.n	183da <strcmp+0x1da>
   18402:	ea4f 2313 	mov.w	r3, r3, lsr #8
   18406:	e055      	b.n	184b4 <strcmp+0x2b4>
   18408:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
   1840c:	d14d      	bne.n	184aa <strcmp+0x2aa>
   1840e:	7808      	ldrb	r0, [r1, #0]
   18410:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   18414:	f1c0 0000 	rsb	r0, r0, #0
   18418:	4770      	bx	lr
   1841a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1841e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
   18422:	e047      	b.n	184b4 <strcmp+0x2b4>
   18424:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   18428:	fa82 f54c 	uadd8	r5, r2, ip
   1842c:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   18430:	faa5 f58c 	sel	r5, r5, ip
   18434:	d10a      	bne.n	1844c <strcmp+0x24c>
   18436:	b965      	cbnz	r5, 18452 <strcmp+0x252>
   18438:	f851 3b04 	ldr.w	r3, [r1], #4
   1843c:	ea84 0402 	eor.w	r4, r4, r2
   18440:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   18444:	d10c      	bne.n	18460 <strcmp+0x260>
   18446:	f850 2b04 	ldr.w	r2, [r0], #4
   1844a:	e7eb      	b.n	18424 <strcmp+0x224>
   1844c:	ea4f 4313 	mov.w	r3, r3, lsr #16
   18450:	e030      	b.n	184b4 <strcmp+0x2b4>
   18452:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   18456:	d128      	bne.n	184aa <strcmp+0x2aa>
   18458:	880b      	ldrh	r3, [r1, #0]
   1845a:	ea4f 4212 	mov.w	r2, r2, lsr #16
   1845e:	e029      	b.n	184b4 <strcmp+0x2b4>
   18460:	ea4f 4212 	mov.w	r2, r2, lsr #16
   18464:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   18468:	e024      	b.n	184b4 <strcmp+0x2b4>
   1846a:	f002 04ff 	and.w	r4, r2, #255	@ 0xff
   1846e:	fa82 f54c 	uadd8	r5, r2, ip
   18472:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   18476:	faa5 f58c 	sel	r5, r5, ip
   1847a:	d10a      	bne.n	18492 <strcmp+0x292>
   1847c:	b965      	cbnz	r5, 18498 <strcmp+0x298>
   1847e:	f851 3b04 	ldr.w	r3, [r1], #4
   18482:	ea84 0402 	eor.w	r4, r4, r2
   18486:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   1848a:	d109      	bne.n	184a0 <strcmp+0x2a0>
   1848c:	f850 2b04 	ldr.w	r2, [r0], #4
   18490:	e7eb      	b.n	1846a <strcmp+0x26a>
   18492:	ea4f 6313 	mov.w	r3, r3, lsr #24
   18496:	e00d      	b.n	184b4 <strcmp+0x2b4>
   18498:	f015 0fff 	tst.w	r5, #255	@ 0xff
   1849c:	d105      	bne.n	184aa <strcmp+0x2aa>
   1849e:	680b      	ldr	r3, [r1, #0]
   184a0:	ea4f 2212 	mov.w	r2, r2, lsr #8
   184a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
   184a8:	e004      	b.n	184b4 <strcmp+0x2b4>
   184aa:	f04f 0000 	mov.w	r0, #0
   184ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   184b2:	4770      	bx	lr
   184b4:	ba12      	rev	r2, r2
   184b6:	ba1b      	rev	r3, r3
   184b8:	fa82 f44c 	uadd8	r4, r2, ip
   184bc:	ea82 0403 	eor.w	r4, r2, r3
   184c0:	faa4 f58c 	sel	r5, r4, ip
   184c4:	fab5 f485 	clz	r4, r5
   184c8:	fa02 f204 	lsl.w	r2, r2, r4
   184cc:	fa03 f304 	lsl.w	r3, r3, r4
   184d0:	ea4f 6012 	mov.w	r0, r2, lsr #24
   184d4:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   184d8:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   184dc:	4770      	bx	lr
   184de:	bf00      	nop

000184e0 <memchr>:
   184e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
   184e4:	2a10      	cmp	r2, #16
   184e6:	db2b      	blt.n	18540 <memchr+0x60>
   184e8:	f010 0f07 	tst.w	r0, #7
   184ec:	d008      	beq.n	18500 <memchr+0x20>
   184ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   184f2:	3a01      	subs	r2, #1
   184f4:	428b      	cmp	r3, r1
   184f6:	d02d      	beq.n	18554 <memchr+0x74>
   184f8:	f010 0f07 	tst.w	r0, #7
   184fc:	b342      	cbz	r2, 18550 <memchr+0x70>
   184fe:	d1f6      	bne.n	184ee <memchr+0xe>
   18500:	b4f0      	push	{r4, r5, r6, r7}
   18502:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   18506:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1850a:	f022 0407 	bic.w	r4, r2, #7
   1850e:	f07f 0700 	mvns.w	r7, #0
   18512:	2300      	movs	r3, #0
   18514:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   18518:	3c08      	subs	r4, #8
   1851a:	ea85 0501 	eor.w	r5, r5, r1
   1851e:	ea86 0601 	eor.w	r6, r6, r1
   18522:	fa85 f547 	uadd8	r5, r5, r7
   18526:	faa3 f587 	sel	r5, r3, r7
   1852a:	fa86 f647 	uadd8	r6, r6, r7
   1852e:	faa5 f687 	sel	r6, r5, r7
   18532:	b98e      	cbnz	r6, 18558 <memchr+0x78>
   18534:	d1ee      	bne.n	18514 <memchr+0x34>
   18536:	bcf0      	pop	{r4, r5, r6, r7}
   18538:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
   1853c:	f002 0207 	and.w	r2, r2, #7
   18540:	b132      	cbz	r2, 18550 <memchr+0x70>
   18542:	f810 3b01 	ldrb.w	r3, [r0], #1
   18546:	3a01      	subs	r2, #1
   18548:	ea83 0301 	eor.w	r3, r3, r1
   1854c:	b113      	cbz	r3, 18554 <memchr+0x74>
   1854e:	d1f8      	bne.n	18542 <memchr+0x62>
   18550:	2000      	movs	r0, #0
   18552:	4770      	bx	lr
   18554:	3801      	subs	r0, #1
   18556:	4770      	bx	lr
   18558:	2d00      	cmp	r5, #0
   1855a:	bf06      	itte	eq
   1855c:	4635      	moveq	r5, r6
   1855e:	3803      	subeq	r0, #3
   18560:	3807      	subne	r0, #7
   18562:	f015 0f01 	tst.w	r5, #1
   18566:	d107      	bne.n	18578 <memchr+0x98>
   18568:	3001      	adds	r0, #1
   1856a:	f415 7f80 	tst.w	r5, #256	@ 0x100
   1856e:	bf02      	ittt	eq
   18570:	3001      	addeq	r0, #1
   18572:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
   18576:	3001      	addeq	r0, #1
   18578:	bcf0      	pop	{r4, r5, r6, r7}
   1857a:	3801      	subs	r0, #1
   1857c:	4770      	bx	lr
   1857e:	bf00      	nop

00018580 <memcpy>:
   18580:	4684      	mov	ip, r0
   18582:	ea41 0300 	orr.w	r3, r1, r0
   18586:	f013 0303 	ands.w	r3, r3, #3
   1858a:	d16d      	bne.n	18668 <memcpy+0xe8>
   1858c:	3a40      	subs	r2, #64	@ 0x40
   1858e:	d341      	bcc.n	18614 <memcpy+0x94>
   18590:	f851 3b04 	ldr.w	r3, [r1], #4
   18594:	f840 3b04 	str.w	r3, [r0], #4
   18598:	f851 3b04 	ldr.w	r3, [r1], #4
   1859c:	f840 3b04 	str.w	r3, [r0], #4
   185a0:	f851 3b04 	ldr.w	r3, [r1], #4
   185a4:	f840 3b04 	str.w	r3, [r0], #4
   185a8:	f851 3b04 	ldr.w	r3, [r1], #4
   185ac:	f840 3b04 	str.w	r3, [r0], #4
   185b0:	f851 3b04 	ldr.w	r3, [r1], #4
   185b4:	f840 3b04 	str.w	r3, [r0], #4
   185b8:	f851 3b04 	ldr.w	r3, [r1], #4
   185bc:	f840 3b04 	str.w	r3, [r0], #4
   185c0:	f851 3b04 	ldr.w	r3, [r1], #4
   185c4:	f840 3b04 	str.w	r3, [r0], #4
   185c8:	f851 3b04 	ldr.w	r3, [r1], #4
   185cc:	f840 3b04 	str.w	r3, [r0], #4
   185d0:	f851 3b04 	ldr.w	r3, [r1], #4
   185d4:	f840 3b04 	str.w	r3, [r0], #4
   185d8:	f851 3b04 	ldr.w	r3, [r1], #4
   185dc:	f840 3b04 	str.w	r3, [r0], #4
   185e0:	f851 3b04 	ldr.w	r3, [r1], #4
   185e4:	f840 3b04 	str.w	r3, [r0], #4
   185e8:	f851 3b04 	ldr.w	r3, [r1], #4
   185ec:	f840 3b04 	str.w	r3, [r0], #4
   185f0:	f851 3b04 	ldr.w	r3, [r1], #4
   185f4:	f840 3b04 	str.w	r3, [r0], #4
   185f8:	f851 3b04 	ldr.w	r3, [r1], #4
   185fc:	f840 3b04 	str.w	r3, [r0], #4
   18600:	f851 3b04 	ldr.w	r3, [r1], #4
   18604:	f840 3b04 	str.w	r3, [r0], #4
   18608:	f851 3b04 	ldr.w	r3, [r1], #4
   1860c:	f840 3b04 	str.w	r3, [r0], #4
   18610:	3a40      	subs	r2, #64	@ 0x40
   18612:	d2bd      	bcs.n	18590 <memcpy+0x10>
   18614:	3230      	adds	r2, #48	@ 0x30
   18616:	d311      	bcc.n	1863c <memcpy+0xbc>
   18618:	f851 3b04 	ldr.w	r3, [r1], #4
   1861c:	f840 3b04 	str.w	r3, [r0], #4
   18620:	f851 3b04 	ldr.w	r3, [r1], #4
   18624:	f840 3b04 	str.w	r3, [r0], #4
   18628:	f851 3b04 	ldr.w	r3, [r1], #4
   1862c:	f840 3b04 	str.w	r3, [r0], #4
   18630:	f851 3b04 	ldr.w	r3, [r1], #4
   18634:	f840 3b04 	str.w	r3, [r0], #4
   18638:	3a10      	subs	r2, #16
   1863a:	d2ed      	bcs.n	18618 <memcpy+0x98>
   1863c:	320c      	adds	r2, #12
   1863e:	d305      	bcc.n	1864c <memcpy+0xcc>
   18640:	f851 3b04 	ldr.w	r3, [r1], #4
   18644:	f840 3b04 	str.w	r3, [r0], #4
   18648:	3a04      	subs	r2, #4
   1864a:	d2f9      	bcs.n	18640 <memcpy+0xc0>
   1864c:	3204      	adds	r2, #4
   1864e:	d008      	beq.n	18662 <memcpy+0xe2>
   18650:	07d2      	lsls	r2, r2, #31
   18652:	bf1c      	itt	ne
   18654:	f811 3b01 	ldrbne.w	r3, [r1], #1
   18658:	f800 3b01 	strbne.w	r3, [r0], #1
   1865c:	d301      	bcc.n	18662 <memcpy+0xe2>
   1865e:	880b      	ldrh	r3, [r1, #0]
   18660:	8003      	strh	r3, [r0, #0]
   18662:	4660      	mov	r0, ip
   18664:	4770      	bx	lr
   18666:	bf00      	nop
   18668:	2a08      	cmp	r2, #8
   1866a:	d313      	bcc.n	18694 <memcpy+0x114>
   1866c:	078b      	lsls	r3, r1, #30
   1866e:	d08d      	beq.n	1858c <memcpy+0xc>
   18670:	f010 0303 	ands.w	r3, r0, #3
   18674:	d08a      	beq.n	1858c <memcpy+0xc>
   18676:	f1c3 0304 	rsb	r3, r3, #4
   1867a:	1ad2      	subs	r2, r2, r3
   1867c:	07db      	lsls	r3, r3, #31
   1867e:	bf1c      	itt	ne
   18680:	f811 3b01 	ldrbne.w	r3, [r1], #1
   18684:	f800 3b01 	strbne.w	r3, [r0], #1
   18688:	d380      	bcc.n	1858c <memcpy+0xc>
   1868a:	f831 3b02 	ldrh.w	r3, [r1], #2
   1868e:	f820 3b02 	strh.w	r3, [r0], #2
   18692:	e77b      	b.n	1858c <memcpy+0xc>
   18694:	3a04      	subs	r2, #4
   18696:	d3d9      	bcc.n	1864c <memcpy+0xcc>
   18698:	3a01      	subs	r2, #1
   1869a:	f811 3b01 	ldrb.w	r3, [r1], #1
   1869e:	f800 3b01 	strb.w	r3, [r0], #1
   186a2:	d2f9      	bcs.n	18698 <memcpy+0x118>
   186a4:	780b      	ldrb	r3, [r1, #0]
   186a6:	7003      	strb	r3, [r0, #0]
   186a8:	784b      	ldrb	r3, [r1, #1]
   186aa:	7043      	strb	r3, [r0, #1]
   186ac:	788b      	ldrb	r3, [r1, #2]
   186ae:	7083      	strb	r3, [r0, #2]
   186b0:	4660      	mov	r0, ip
   186b2:	4770      	bx	lr
	...

000186c0 <strlen>:
   186c0:	b430      	push	{r4, r5}
   186c2:	f890 f000 	pld	[r0]
   186c6:	f020 0107 	bic.w	r1, r0, #7
   186ca:	f06f 0c00 	mvn.w	ip, #0
   186ce:	f010 0407 	ands.w	r4, r0, #7
   186d2:	f891 f020 	pld	[r1, #32]
   186d6:	f040 8048 	bne.w	1876a <strlen+0xaa>
   186da:	f04f 0400 	mov.w	r4, #0
   186de:	f06f 0007 	mvn.w	r0, #7
   186e2:	e9d1 2300 	ldrd	r2, r3, [r1]
   186e6:	f891 f040 	pld	[r1, #64]	@ 0x40
   186ea:	f100 0008 	add.w	r0, r0, #8
   186ee:	fa82 f24c 	uadd8	r2, r2, ip
   186f2:	faa4 f28c 	sel	r2, r4, ip
   186f6:	fa83 f34c 	uadd8	r3, r3, ip
   186fa:	faa2 f38c 	sel	r3, r2, ip
   186fe:	bb4b      	cbnz	r3, 18754 <strlen+0x94>
   18700:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   18704:	fa82 f24c 	uadd8	r2, r2, ip
   18708:	f100 0008 	add.w	r0, r0, #8
   1870c:	faa4 f28c 	sel	r2, r4, ip
   18710:	fa83 f34c 	uadd8	r3, r3, ip
   18714:	faa2 f38c 	sel	r3, r2, ip
   18718:	b9e3      	cbnz	r3, 18754 <strlen+0x94>
   1871a:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   1871e:	fa82 f24c 	uadd8	r2, r2, ip
   18722:	f100 0008 	add.w	r0, r0, #8
   18726:	faa4 f28c 	sel	r2, r4, ip
   1872a:	fa83 f34c 	uadd8	r3, r3, ip
   1872e:	faa2 f38c 	sel	r3, r2, ip
   18732:	b97b      	cbnz	r3, 18754 <strlen+0x94>
   18734:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   18738:	f101 0120 	add.w	r1, r1, #32
   1873c:	fa82 f24c 	uadd8	r2, r2, ip
   18740:	f100 0008 	add.w	r0, r0, #8
   18744:	faa4 f28c 	sel	r2, r4, ip
   18748:	fa83 f34c 	uadd8	r3, r3, ip
   1874c:	faa2 f38c 	sel	r3, r2, ip
   18750:	2b00      	cmp	r3, #0
   18752:	d0c6      	beq.n	186e2 <strlen+0x22>
   18754:	2a00      	cmp	r2, #0
   18756:	bf04      	itt	eq
   18758:	3004      	addeq	r0, #4
   1875a:	461a      	moveq	r2, r3
   1875c:	ba12      	rev	r2, r2
   1875e:	fab2 f282 	clz	r2, r2
   18762:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   18766:	bc30      	pop	{r4, r5}
   18768:	4770      	bx	lr
   1876a:	e9d1 2300 	ldrd	r2, r3, [r1]
   1876e:	f004 0503 	and.w	r5, r4, #3
   18772:	f1c4 0000 	rsb	r0, r4, #0
   18776:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1877a:	f014 0f04 	tst.w	r4, #4
   1877e:	f891 f040 	pld	[r1, #64]	@ 0x40
   18782:	fa0c f505 	lsl.w	r5, ip, r5
   18786:	ea62 0205 	orn	r2, r2, r5
   1878a:	bf1c      	itt	ne
   1878c:	ea63 0305 	ornne	r3, r3, r5
   18790:	4662      	movne	r2, ip
   18792:	f04f 0400 	mov.w	r4, #0
   18796:	e7aa      	b.n	186ee <strlen+0x2e>

00018798 <__aeabi_drsub>:
   18798:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
   1879c:	e002      	b.n	187a4 <__adddf3>
   1879e:	bf00      	nop

000187a0 <__aeabi_dsub>:
   187a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

000187a4 <__adddf3>:
   187a4:	b530      	push	{r4, r5, lr}
   187a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   187aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   187ae:	ea94 0f05 	teq	r4, r5
   187b2:	bf08      	it	eq
   187b4:	ea90 0f02 	teqeq	r0, r2
   187b8:	bf1f      	itttt	ne
   187ba:	ea54 0c00 	orrsne.w	ip, r4, r0
   187be:	ea55 0c02 	orrsne.w	ip, r5, r2
   187c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   187c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   187ca:	f000 80e2 	beq.w	18992 <__adddf3+0x1ee>
   187ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
   187d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   187d6:	bfb8      	it	lt
   187d8:	426d      	neglt	r5, r5
   187da:	dd0c      	ble.n	187f6 <__adddf3+0x52>
   187dc:	442c      	add	r4, r5
   187de:	ea80 0202 	eor.w	r2, r0, r2
   187e2:	ea81 0303 	eor.w	r3, r1, r3
   187e6:	ea82 0000 	eor.w	r0, r2, r0
   187ea:	ea83 0101 	eor.w	r1, r3, r1
   187ee:	ea80 0202 	eor.w	r2, r0, r2
   187f2:	ea81 0303 	eor.w	r3, r1, r3
   187f6:	2d36      	cmp	r5, #54	@ 0x36
   187f8:	bf88      	it	hi
   187fa:	bd30      	pophi	{r4, r5, pc}
   187fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
   18800:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18804:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
   18808:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1880c:	d002      	beq.n	18814 <__adddf3+0x70>
   1880e:	4240      	negs	r0, r0
   18810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18814:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
   18818:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1881c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   18820:	d002      	beq.n	18828 <__adddf3+0x84>
   18822:	4252      	negs	r2, r2
   18824:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18828:	ea94 0f05 	teq	r4, r5
   1882c:	f000 80a7 	beq.w	1897e <__adddf3+0x1da>
   18830:	f1a4 0401 	sub.w	r4, r4, #1
   18834:	f1d5 0e20 	rsbs	lr, r5, #32
   18838:	db0d      	blt.n	18856 <__adddf3+0xb2>
   1883a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1883e:	fa22 f205 	lsr.w	r2, r2, r5
   18842:	1880      	adds	r0, r0, r2
   18844:	f141 0100 	adc.w	r1, r1, #0
   18848:	fa03 f20e 	lsl.w	r2, r3, lr
   1884c:	1880      	adds	r0, r0, r2
   1884e:	fa43 f305 	asr.w	r3, r3, r5
   18852:	4159      	adcs	r1, r3
   18854:	e00e      	b.n	18874 <__adddf3+0xd0>
   18856:	f1a5 0520 	sub.w	r5, r5, #32
   1885a:	f10e 0e20 	add.w	lr, lr, #32
   1885e:	2a01      	cmp	r2, #1
   18860:	fa03 fc0e 	lsl.w	ip, r3, lr
   18864:	bf28      	it	cs
   18866:	f04c 0c02 	orrcs.w	ip, ip, #2
   1886a:	fa43 f305 	asr.w	r3, r3, r5
   1886e:	18c0      	adds	r0, r0, r3
   18870:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   18874:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
   18878:	d507      	bpl.n	1888a <__adddf3+0xe6>
   1887a:	f04f 0e00 	mov.w	lr, #0
   1887e:	f1dc 0c00 	rsbs	ip, ip, #0
   18882:	eb7e 0000 	sbcs.w	r0, lr, r0
   18886:	eb6e 0101 	sbc.w	r1, lr, r1
   1888a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
   1888e:	d31b      	bcc.n	188c8 <__adddf3+0x124>
   18890:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
   18894:	d30c      	bcc.n	188b0 <__adddf3+0x10c>
   18896:	0849      	lsrs	r1, r1, #1
   18898:	ea5f 0030 	movs.w	r0, r0, rrx
   1889c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   188a0:	f104 0401 	add.w	r4, r4, #1
   188a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   188a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
   188ac:	f080 809a 	bcs.w	189e4 <__adddf3+0x240>
   188b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
   188b4:	bf08      	it	eq
   188b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   188ba:	f150 0000 	adcs.w	r0, r0, #0
   188be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   188c2:	ea41 0105 	orr.w	r1, r1, r5
   188c6:	bd30      	pop	{r4, r5, pc}
   188c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   188cc:	4140      	adcs	r0, r0
   188ce:	eb41 0101 	adc.w	r1, r1, r1
   188d2:	3c01      	subs	r4, #1
   188d4:	bf28      	it	cs
   188d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
   188da:	d2e9      	bcs.n	188b0 <__adddf3+0x10c>
   188dc:	f091 0f00 	teq	r1, #0
   188e0:	bf04      	itt	eq
   188e2:	4601      	moveq	r1, r0
   188e4:	2000      	moveq	r0, #0
   188e6:	fab1 f381 	clz	r3, r1
   188ea:	bf08      	it	eq
   188ec:	3320      	addeq	r3, #32
   188ee:	f1a3 030b 	sub.w	r3, r3, #11
   188f2:	f1b3 0220 	subs.w	r2, r3, #32
   188f6:	da0c      	bge.n	18912 <__adddf3+0x16e>
   188f8:	320c      	adds	r2, #12
   188fa:	dd08      	ble.n	1890e <__adddf3+0x16a>
   188fc:	f102 0c14 	add.w	ip, r2, #20
   18900:	f1c2 020c 	rsb	r2, r2, #12
   18904:	fa01 f00c 	lsl.w	r0, r1, ip
   18908:	fa21 f102 	lsr.w	r1, r1, r2
   1890c:	e00c      	b.n	18928 <__adddf3+0x184>
   1890e:	f102 0214 	add.w	r2, r2, #20
   18912:	bfd8      	it	le
   18914:	f1c2 0c20 	rsble	ip, r2, #32
   18918:	fa01 f102 	lsl.w	r1, r1, r2
   1891c:	fa20 fc0c 	lsr.w	ip, r0, ip
   18920:	bfdc      	itt	le
   18922:	ea41 010c 	orrle.w	r1, r1, ip
   18926:	4090      	lslle	r0, r2
   18928:	1ae4      	subs	r4, r4, r3
   1892a:	bfa2      	ittt	ge
   1892c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   18930:	4329      	orrge	r1, r5
   18932:	bd30      	popge	{r4, r5, pc}
   18934:	ea6f 0404 	mvn.w	r4, r4
   18938:	3c1f      	subs	r4, #31
   1893a:	da1c      	bge.n	18976 <__adddf3+0x1d2>
   1893c:	340c      	adds	r4, #12
   1893e:	dc0e      	bgt.n	1895e <__adddf3+0x1ba>
   18940:	f104 0414 	add.w	r4, r4, #20
   18944:	f1c4 0220 	rsb	r2, r4, #32
   18948:	fa20 f004 	lsr.w	r0, r0, r4
   1894c:	fa01 f302 	lsl.w	r3, r1, r2
   18950:	ea40 0003 	orr.w	r0, r0, r3
   18954:	fa21 f304 	lsr.w	r3, r1, r4
   18958:	ea45 0103 	orr.w	r1, r5, r3
   1895c:	bd30      	pop	{r4, r5, pc}
   1895e:	f1c4 040c 	rsb	r4, r4, #12
   18962:	f1c4 0220 	rsb	r2, r4, #32
   18966:	fa20 f002 	lsr.w	r0, r0, r2
   1896a:	fa01 f304 	lsl.w	r3, r1, r4
   1896e:	ea40 0003 	orr.w	r0, r0, r3
   18972:	4629      	mov	r1, r5
   18974:	bd30      	pop	{r4, r5, pc}
   18976:	fa21 f004 	lsr.w	r0, r1, r4
   1897a:	4629      	mov	r1, r5
   1897c:	bd30      	pop	{r4, r5, pc}
   1897e:	f094 0f00 	teq	r4, #0
   18982:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
   18986:	bf06      	itte	eq
   18988:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
   1898c:	3401      	addeq	r4, #1
   1898e:	3d01      	subne	r5, #1
   18990:	e74e      	b.n	18830 <__adddf3+0x8c>
   18992:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   18996:	bf18      	it	ne
   18998:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1899c:	d029      	beq.n	189f2 <__adddf3+0x24e>
   1899e:	ea94 0f05 	teq	r4, r5
   189a2:	bf08      	it	eq
   189a4:	ea90 0f02 	teqeq	r0, r2
   189a8:	d005      	beq.n	189b6 <__adddf3+0x212>
   189aa:	ea54 0c00 	orrs.w	ip, r4, r0
   189ae:	bf04      	itt	eq
   189b0:	4619      	moveq	r1, r3
   189b2:	4610      	moveq	r0, r2
   189b4:	bd30      	pop	{r4, r5, pc}
   189b6:	ea91 0f03 	teq	r1, r3
   189ba:	bf1e      	ittt	ne
   189bc:	2100      	movne	r1, #0
   189be:	2000      	movne	r0, #0
   189c0:	bd30      	popne	{r4, r5, pc}
   189c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   189c6:	d105      	bne.n	189d4 <__adddf3+0x230>
   189c8:	0040      	lsls	r0, r0, #1
   189ca:	4149      	adcs	r1, r1
   189cc:	bf28      	it	cs
   189ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
   189d2:	bd30      	pop	{r4, r5, pc}
   189d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
   189d8:	bf3c      	itt	cc
   189da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
   189de:	bd30      	popcc	{r4, r5, pc}
   189e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
   189e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
   189e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
   189ec:	f04f 0000 	mov.w	r0, #0
   189f0:	bd30      	pop	{r4, r5, pc}
   189f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   189f6:	bf1a      	itte	ne
   189f8:	4619      	movne	r1, r3
   189fa:	4610      	movne	r0, r2
   189fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   18a00:	bf1c      	itt	ne
   18a02:	460b      	movne	r3, r1
   18a04:	4602      	movne	r2, r0
   18a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18a0a:	bf06      	itte	eq
   18a0c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   18a10:	ea91 0f03 	teqeq	r1, r3
   18a14:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
   18a18:	bd30      	pop	{r4, r5, pc}
   18a1a:	bf00      	nop

00018a1c <__aeabi_ui2d>:
   18a1c:	f090 0f00 	teq	r0, #0
   18a20:	bf04      	itt	eq
   18a22:	2100      	moveq	r1, #0
   18a24:	4770      	bxeq	lr
   18a26:	b530      	push	{r4, r5, lr}
   18a28:	f44f 6480 	mov.w	r4, #1024	@ 0x400
   18a2c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
   18a30:	f04f 0500 	mov.w	r5, #0
   18a34:	f04f 0100 	mov.w	r1, #0
   18a38:	e750      	b.n	188dc <__adddf3+0x138>
   18a3a:	bf00      	nop

00018a3c <__aeabi_i2d>:
   18a3c:	f090 0f00 	teq	r0, #0
   18a40:	bf04      	itt	eq
   18a42:	2100      	moveq	r1, #0
   18a44:	4770      	bxeq	lr
   18a46:	b530      	push	{r4, r5, lr}
   18a48:	f44f 6480 	mov.w	r4, #1024	@ 0x400
   18a4c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
   18a50:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
   18a54:	bf48      	it	mi
   18a56:	4240      	negmi	r0, r0
   18a58:	f04f 0100 	mov.w	r1, #0
   18a5c:	e73e      	b.n	188dc <__adddf3+0x138>
   18a5e:	bf00      	nop

00018a60 <__aeabi_f2d>:
   18a60:	0042      	lsls	r2, r0, #1
   18a62:	ea4f 01e2 	mov.w	r1, r2, asr #3
   18a66:	ea4f 0131 	mov.w	r1, r1, rrx
   18a6a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   18a6e:	bf1f      	itttt	ne
   18a70:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
   18a74:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
   18a78:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
   18a7c:	4770      	bxne	lr
   18a7e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
   18a82:	bf08      	it	eq
   18a84:	4770      	bxeq	lr
   18a86:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
   18a8a:	bf04      	itt	eq
   18a8c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
   18a90:	4770      	bxeq	lr
   18a92:	b530      	push	{r4, r5, lr}
   18a94:	f44f 7460 	mov.w	r4, #896	@ 0x380
   18a98:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
   18a9c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
   18aa0:	e71c      	b.n	188dc <__adddf3+0x138>
   18aa2:	bf00      	nop

00018aa4 <__aeabi_ul2d>:
   18aa4:	ea50 0201 	orrs.w	r2, r0, r1
   18aa8:	bf08      	it	eq
   18aaa:	4770      	bxeq	lr
   18aac:	b530      	push	{r4, r5, lr}
   18aae:	f04f 0500 	mov.w	r5, #0
   18ab2:	e00a      	b.n	18aca <__aeabi_l2d+0x16>

00018ab4 <__aeabi_l2d>:
   18ab4:	ea50 0201 	orrs.w	r2, r0, r1
   18ab8:	bf08      	it	eq
   18aba:	4770      	bxeq	lr
   18abc:	b530      	push	{r4, r5, lr}
   18abe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
   18ac2:	d502      	bpl.n	18aca <__aeabi_l2d+0x16>
   18ac4:	4240      	negs	r0, r0
   18ac6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18aca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
   18ace:	f104 0432 	add.w	r4, r4, #50	@ 0x32
   18ad2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   18ad6:	f43f aed8 	beq.w	1888a <__adddf3+0xe6>
   18ada:	f04f 0203 	mov.w	r2, #3
   18ade:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18ae2:	bf18      	it	ne
   18ae4:	3203      	addne	r2, #3
   18ae6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18aea:	bf18      	it	ne
   18aec:	3203      	addne	r2, #3
   18aee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   18af2:	f1c2 0320 	rsb	r3, r2, #32
   18af6:	fa00 fc03 	lsl.w	ip, r0, r3
   18afa:	fa20 f002 	lsr.w	r0, r0, r2
   18afe:	fa01 fe03 	lsl.w	lr, r1, r3
   18b02:	ea40 000e 	orr.w	r0, r0, lr
   18b06:	fa21 f102 	lsr.w	r1, r1, r2
   18b0a:	4414      	add	r4, r2
   18b0c:	e6bd      	b.n	1888a <__adddf3+0xe6>
   18b0e:	bf00      	nop

00018b10 <__aeabi_dmul>:
   18b10:	b570      	push	{r4, r5, r6, lr}
   18b12:	f04f 0cff 	mov.w	ip, #255	@ 0xff
   18b16:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
   18b1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18b1e:	bf1d      	ittte	ne
   18b20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18b24:	ea94 0f0c 	teqne	r4, ip
   18b28:	ea95 0f0c 	teqne	r5, ip
   18b2c:	f000 f8de 	bleq	18cec <__aeabi_dmul+0x1dc>
   18b30:	442c      	add	r4, r5
   18b32:	ea81 0603 	eor.w	r6, r1, r3
   18b36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   18b3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   18b3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   18b42:	bf18      	it	ne
   18b44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   18b48:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
   18b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
   18b50:	d038      	beq.n	18bc4 <__aeabi_dmul+0xb4>
   18b52:	fba0 ce02 	umull	ip, lr, r0, r2
   18b56:	f04f 0500 	mov.w	r5, #0
   18b5a:	fbe1 e502 	umlal	lr, r5, r1, r2
   18b5e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
   18b62:	fbe0 e503 	umlal	lr, r5, r0, r3
   18b66:	f04f 0600 	mov.w	r6, #0
   18b6a:	fbe1 5603 	umlal	r5, r6, r1, r3
   18b6e:	f09c 0f00 	teq	ip, #0
   18b72:	bf18      	it	ne
   18b74:	f04e 0e01 	orrne.w	lr, lr, #1
   18b78:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
   18b7c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
   18b80:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
   18b84:	d204      	bcs.n	18b90 <__aeabi_dmul+0x80>
   18b86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   18b8a:	416d      	adcs	r5, r5
   18b8c:	eb46 0606 	adc.w	r6, r6, r6
   18b90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   18b94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   18b98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   18b9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   18ba0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   18ba4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
   18ba8:	bf88      	it	hi
   18baa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
   18bae:	d81e      	bhi.n	18bee <__aeabi_dmul+0xde>
   18bb0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
   18bb4:	bf08      	it	eq
   18bb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   18bba:	f150 0000 	adcs.w	r0, r0, #0
   18bbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18bc2:	bd70      	pop	{r4, r5, r6, pc}
   18bc4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
   18bc8:	ea46 0101 	orr.w	r1, r6, r1
   18bcc:	ea40 0002 	orr.w	r0, r0, r2
   18bd0:	ea81 0103 	eor.w	r1, r1, r3
   18bd4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   18bd8:	bfc2      	ittt	gt
   18bda:	ebd4 050c 	rsbsgt	r5, r4, ip
   18bde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18be2:	bd70      	popgt	{r4, r5, r6, pc}
   18be4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
   18be8:	f04f 0e00 	mov.w	lr, #0
   18bec:	3c01      	subs	r4, #1
   18bee:	f300 80ab 	bgt.w	18d48 <__aeabi_dmul+0x238>
   18bf2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
   18bf6:	bfde      	ittt	le
   18bf8:	2000      	movle	r0, #0
   18bfa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
   18bfe:	bd70      	pople	{r4, r5, r6, pc}
   18c00:	f1c4 0400 	rsb	r4, r4, #0
   18c04:	3c20      	subs	r4, #32
   18c06:	da35      	bge.n	18c74 <__aeabi_dmul+0x164>
   18c08:	340c      	adds	r4, #12
   18c0a:	dc1b      	bgt.n	18c44 <__aeabi_dmul+0x134>
   18c0c:	f104 0414 	add.w	r4, r4, #20
   18c10:	f1c4 0520 	rsb	r5, r4, #32
   18c14:	fa00 f305 	lsl.w	r3, r0, r5
   18c18:	fa20 f004 	lsr.w	r0, r0, r4
   18c1c:	fa01 f205 	lsl.w	r2, r1, r5
   18c20:	ea40 0002 	orr.w	r0, r0, r2
   18c24:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
   18c28:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
   18c2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18c30:	fa21 f604 	lsr.w	r6, r1, r4
   18c34:	eb42 0106 	adc.w	r1, r2, r6
   18c38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18c3c:	bf08      	it	eq
   18c3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18c42:	bd70      	pop	{r4, r5, r6, pc}
   18c44:	f1c4 040c 	rsb	r4, r4, #12
   18c48:	f1c4 0520 	rsb	r5, r4, #32
   18c4c:	fa00 f304 	lsl.w	r3, r0, r4
   18c50:	fa20 f005 	lsr.w	r0, r0, r5
   18c54:	fa01 f204 	lsl.w	r2, r1, r4
   18c58:	ea40 0002 	orr.w	r0, r0, r2
   18c5c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
   18c60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18c64:	f141 0100 	adc.w	r1, r1, #0
   18c68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18c6c:	bf08      	it	eq
   18c6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18c72:	bd70      	pop	{r4, r5, r6, pc}
   18c74:	f1c4 0520 	rsb	r5, r4, #32
   18c78:	fa00 f205 	lsl.w	r2, r0, r5
   18c7c:	ea4e 0e02 	orr.w	lr, lr, r2
   18c80:	fa20 f304 	lsr.w	r3, r0, r4
   18c84:	fa01 f205 	lsl.w	r2, r1, r5
   18c88:	ea43 0302 	orr.w	r3, r3, r2
   18c8c:	fa21 f004 	lsr.w	r0, r1, r4
   18c90:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
   18c94:	fa21 f204 	lsr.w	r2, r1, r4
   18c98:	ea20 0002 	bic.w	r0, r0, r2
   18c9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   18ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18ca4:	bf08      	it	eq
   18ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18caa:	bd70      	pop	{r4, r5, r6, pc}
   18cac:	f094 0f00 	teq	r4, #0
   18cb0:	d10f      	bne.n	18cd2 <__aeabi_dmul+0x1c2>
   18cb2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
   18cb6:	0040      	lsls	r0, r0, #1
   18cb8:	eb41 0101 	adc.w	r1, r1, r1
   18cbc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
   18cc0:	bf08      	it	eq
   18cc2:	3c01      	subeq	r4, #1
   18cc4:	d0f7      	beq.n	18cb6 <__aeabi_dmul+0x1a6>
   18cc6:	ea41 0106 	orr.w	r1, r1, r6
   18cca:	f095 0f00 	teq	r5, #0
   18cce:	bf18      	it	ne
   18cd0:	4770      	bxne	lr
   18cd2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
   18cd6:	0052      	lsls	r2, r2, #1
   18cd8:	eb43 0303 	adc.w	r3, r3, r3
   18cdc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
   18ce0:	bf08      	it	eq
   18ce2:	3d01      	subeq	r5, #1
   18ce4:	d0f7      	beq.n	18cd6 <__aeabi_dmul+0x1c6>
   18ce6:	ea43 0306 	orr.w	r3, r3, r6
   18cea:	4770      	bx	lr
   18cec:	ea94 0f0c 	teq	r4, ip
   18cf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18cf4:	bf18      	it	ne
   18cf6:	ea95 0f0c 	teqne	r5, ip
   18cfa:	d00c      	beq.n	18d16 <__aeabi_dmul+0x206>
   18cfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18d00:	bf18      	it	ne
   18d02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18d06:	d1d1      	bne.n	18cac <__aeabi_dmul+0x19c>
   18d08:	ea81 0103 	eor.w	r1, r1, r3
   18d0c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
   18d10:	f04f 0000 	mov.w	r0, #0
   18d14:	bd70      	pop	{r4, r5, r6, pc}
   18d16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18d1a:	bf06      	itte	eq
   18d1c:	4610      	moveq	r0, r2
   18d1e:	4619      	moveq	r1, r3
   18d20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18d24:	d019      	beq.n	18d5a <__aeabi_dmul+0x24a>
   18d26:	ea94 0f0c 	teq	r4, ip
   18d2a:	d102      	bne.n	18d32 <__aeabi_dmul+0x222>
   18d2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18d30:	d113      	bne.n	18d5a <__aeabi_dmul+0x24a>
   18d32:	ea95 0f0c 	teq	r5, ip
   18d36:	d105      	bne.n	18d44 <__aeabi_dmul+0x234>
   18d38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18d3c:	bf1c      	itt	ne
   18d3e:	4610      	movne	r0, r2
   18d40:	4619      	movne	r1, r3
   18d42:	d10a      	bne.n	18d5a <__aeabi_dmul+0x24a>
   18d44:	ea81 0103 	eor.w	r1, r1, r3
   18d48:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
   18d4c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
   18d50:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
   18d54:	f04f 0000 	mov.w	r0, #0
   18d58:	bd70      	pop	{r4, r5, r6, pc}
   18d5a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
   18d5e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
   18d62:	bd70      	pop	{r4, r5, r6, pc}

00018d64 <__aeabi_ddiv>:
   18d64:	b570      	push	{r4, r5, r6, lr}
   18d66:	f04f 0cff 	mov.w	ip, #255	@ 0xff
   18d6a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
   18d6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18d72:	bf1d      	ittte	ne
   18d74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18d78:	ea94 0f0c 	teqne	r4, ip
   18d7c:	ea95 0f0c 	teqne	r5, ip
   18d80:	f000 f8a7 	bleq	18ed2 <__aeabi_ddiv+0x16e>
   18d84:	eba4 0405 	sub.w	r4, r4, r5
   18d88:	ea81 0e03 	eor.w	lr, r1, r3
   18d8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18d90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18d94:	f000 8088 	beq.w	18ea8 <__aeabi_ddiv+0x144>
   18d98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18d9c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
   18da0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   18da4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   18da8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   18dac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   18db0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   18db4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   18db8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
   18dbc:	429d      	cmp	r5, r3
   18dbe:	bf08      	it	eq
   18dc0:	4296      	cmpeq	r6, r2
   18dc2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
   18dc6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
   18dca:	d202      	bcs.n	18dd2 <__aeabi_ddiv+0x6e>
   18dcc:	085b      	lsrs	r3, r3, #1
   18dce:	ea4f 0232 	mov.w	r2, r2, rrx
   18dd2:	1ab6      	subs	r6, r6, r2
   18dd4:	eb65 0503 	sbc.w	r5, r5, r3
   18dd8:	085b      	lsrs	r3, r3, #1
   18dda:	ea4f 0232 	mov.w	r2, r2, rrx
   18dde:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
   18de2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
   18de6:	ebb6 0e02 	subs.w	lr, r6, r2
   18dea:	eb75 0e03 	sbcs.w	lr, r5, r3
   18dee:	bf22      	ittt	cs
   18df0:	1ab6      	subcs	r6, r6, r2
   18df2:	4675      	movcs	r5, lr
   18df4:	ea40 000c 	orrcs.w	r0, r0, ip
   18df8:	085b      	lsrs	r3, r3, #1
   18dfa:	ea4f 0232 	mov.w	r2, r2, rrx
   18dfe:	ebb6 0e02 	subs.w	lr, r6, r2
   18e02:	eb75 0e03 	sbcs.w	lr, r5, r3
   18e06:	bf22      	ittt	cs
   18e08:	1ab6      	subcs	r6, r6, r2
   18e0a:	4675      	movcs	r5, lr
   18e0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18e10:	085b      	lsrs	r3, r3, #1
   18e12:	ea4f 0232 	mov.w	r2, r2, rrx
   18e16:	ebb6 0e02 	subs.w	lr, r6, r2
   18e1a:	eb75 0e03 	sbcs.w	lr, r5, r3
   18e1e:	bf22      	ittt	cs
   18e20:	1ab6      	subcs	r6, r6, r2
   18e22:	4675      	movcs	r5, lr
   18e24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18e28:	085b      	lsrs	r3, r3, #1
   18e2a:	ea4f 0232 	mov.w	r2, r2, rrx
   18e2e:	ebb6 0e02 	subs.w	lr, r6, r2
   18e32:	eb75 0e03 	sbcs.w	lr, r5, r3
   18e36:	bf22      	ittt	cs
   18e38:	1ab6      	subcs	r6, r6, r2
   18e3a:	4675      	movcs	r5, lr
   18e3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18e40:	ea55 0e06 	orrs.w	lr, r5, r6
   18e44:	d018      	beq.n	18e78 <__aeabi_ddiv+0x114>
   18e46:	ea4f 1505 	mov.w	r5, r5, lsl #4
   18e4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18e4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18e52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   18e56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   18e5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18e5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18e62:	d1c0      	bne.n	18de6 <__aeabi_ddiv+0x82>
   18e64:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
   18e68:	d10b      	bne.n	18e82 <__aeabi_ddiv+0x11e>
   18e6a:	ea41 0100 	orr.w	r1, r1, r0
   18e6e:	f04f 0000 	mov.w	r0, #0
   18e72:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
   18e76:	e7b6      	b.n	18de6 <__aeabi_ddiv+0x82>
   18e78:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
   18e7c:	bf04      	itt	eq
   18e7e:	4301      	orreq	r1, r0
   18e80:	2000      	moveq	r0, #0
   18e82:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
   18e86:	bf88      	it	hi
   18e88:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
   18e8c:	f63f aeaf 	bhi.w	18bee <__aeabi_dmul+0xde>
   18e90:	ebb5 0c03 	subs.w	ip, r5, r3
   18e94:	bf04      	itt	eq
   18e96:	ebb6 0c02 	subseq.w	ip, r6, r2
   18e9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   18e9e:	f150 0000 	adcs.w	r0, r0, #0
   18ea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   18ea6:	bd70      	pop	{r4, r5, r6, pc}
   18ea8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
   18eac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   18eb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   18eb4:	bfc2      	ittt	gt
   18eb6:	ebd4 050c 	rsbsgt	r5, r4, ip
   18eba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18ebe:	bd70      	popgt	{r4, r5, r6, pc}
   18ec0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
   18ec4:	f04f 0e00 	mov.w	lr, #0
   18ec8:	3c01      	subs	r4, #1
   18eca:	e690      	b.n	18bee <__aeabi_dmul+0xde>
   18ecc:	ea45 0e06 	orr.w	lr, r5, r6
   18ed0:	e68d      	b.n	18bee <__aeabi_dmul+0xde>
   18ed2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18ed6:	ea94 0f0c 	teq	r4, ip
   18eda:	bf08      	it	eq
   18edc:	ea95 0f0c 	teqeq	r5, ip
   18ee0:	f43f af3b 	beq.w	18d5a <__aeabi_dmul+0x24a>
   18ee4:	ea94 0f0c 	teq	r4, ip
   18ee8:	d10a      	bne.n	18f00 <__aeabi_ddiv+0x19c>
   18eea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18eee:	f47f af34 	bne.w	18d5a <__aeabi_dmul+0x24a>
   18ef2:	ea95 0f0c 	teq	r5, ip
   18ef6:	f47f af25 	bne.w	18d44 <__aeabi_dmul+0x234>
   18efa:	4610      	mov	r0, r2
   18efc:	4619      	mov	r1, r3
   18efe:	e72c      	b.n	18d5a <__aeabi_dmul+0x24a>
   18f00:	ea95 0f0c 	teq	r5, ip
   18f04:	d106      	bne.n	18f14 <__aeabi_ddiv+0x1b0>
   18f06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   18f0a:	f43f aefd 	beq.w	18d08 <__aeabi_dmul+0x1f8>
   18f0e:	4610      	mov	r0, r2
   18f10:	4619      	mov	r1, r3
   18f12:	e722      	b.n	18d5a <__aeabi_dmul+0x24a>
   18f14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18f18:	bf18      	it	ne
   18f1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18f1e:	f47f aec5 	bne.w	18cac <__aeabi_dmul+0x19c>
   18f22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   18f26:	f47f af0d 	bne.w	18d44 <__aeabi_dmul+0x234>
   18f2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18f2e:	f47f aeeb 	bne.w	18d08 <__aeabi_dmul+0x1f8>
   18f32:	e712      	b.n	18d5a <__aeabi_dmul+0x24a>

00018f34 <__gedf2>:
   18f34:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
   18f38:	e006      	b.n	18f48 <__cmpdf2+0x4>
   18f3a:	bf00      	nop

00018f3c <__ledf2>:
   18f3c:	f04f 0c01 	mov.w	ip, #1
   18f40:	e002      	b.n	18f48 <__cmpdf2+0x4>
   18f42:	bf00      	nop

00018f44 <__cmpdf2>:
   18f44:	f04f 0c01 	mov.w	ip, #1
   18f48:	f84d cd04 	str.w	ip, [sp, #-4]!
   18f4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18f50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18f58:	bf18      	it	ne
   18f5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18f5e:	d01b      	beq.n	18f98 <__cmpdf2+0x54>
   18f60:	b001      	add	sp, #4
   18f62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18f66:	bf0c      	ite	eq
   18f68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   18f6c:	ea91 0f03 	teqne	r1, r3
   18f70:	bf02      	ittt	eq
   18f72:	ea90 0f02 	teqeq	r0, r2
   18f76:	2000      	moveq	r0, #0
   18f78:	4770      	bxeq	lr
   18f7a:	f110 0f00 	cmn.w	r0, #0
   18f7e:	ea91 0f03 	teq	r1, r3
   18f82:	bf58      	it	pl
   18f84:	4299      	cmppl	r1, r3
   18f86:	bf08      	it	eq
   18f88:	4290      	cmpeq	r0, r2
   18f8a:	bf2c      	ite	cs
   18f8c:	17d8      	asrcs	r0, r3, #31
   18f8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   18f92:	f040 0001 	orr.w	r0, r0, #1
   18f96:	4770      	bx	lr
   18f98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18f9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18fa0:	d102      	bne.n	18fa8 <__cmpdf2+0x64>
   18fa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   18fa6:	d107      	bne.n	18fb8 <__cmpdf2+0x74>
   18fa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   18fac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18fb0:	d1d6      	bne.n	18f60 <__cmpdf2+0x1c>
   18fb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   18fb6:	d0d3      	beq.n	18f60 <__cmpdf2+0x1c>
   18fb8:	f85d 0b04 	ldr.w	r0, [sp], #4
   18fbc:	4770      	bx	lr
   18fbe:	bf00      	nop

00018fc0 <__aeabi_cdrcmple>:
   18fc0:	4684      	mov	ip, r0
   18fc2:	4610      	mov	r0, r2
   18fc4:	4662      	mov	r2, ip
   18fc6:	468c      	mov	ip, r1
   18fc8:	4619      	mov	r1, r3
   18fca:	4663      	mov	r3, ip
   18fcc:	e000      	b.n	18fd0 <__aeabi_cdcmpeq>
   18fce:	bf00      	nop

00018fd0 <__aeabi_cdcmpeq>:
   18fd0:	b501      	push	{r0, lr}
   18fd2:	f7ff ffb7 	bl	18f44 <__cmpdf2>
   18fd6:	2800      	cmp	r0, #0
   18fd8:	bf48      	it	mi
   18fda:	f110 0f00 	cmnmi.w	r0, #0
   18fde:	bd01      	pop	{r0, pc}

00018fe0 <__aeabi_dcmpeq>:
   18fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
   18fe4:	f7ff fff4 	bl	18fd0 <__aeabi_cdcmpeq>
   18fe8:	bf0c      	ite	eq
   18fea:	2001      	moveq	r0, #1
   18fec:	2000      	movne	r0, #0
   18fee:	f85d fb08 	ldr.w	pc, [sp], #8
   18ff2:	bf00      	nop

00018ff4 <__aeabi_dcmplt>:
   18ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
   18ff8:	f7ff ffea 	bl	18fd0 <__aeabi_cdcmpeq>
   18ffc:	bf34      	ite	cc
   18ffe:	2001      	movcc	r0, #1
   19000:	2000      	movcs	r0, #0
   19002:	f85d fb08 	ldr.w	pc, [sp], #8
   19006:	bf00      	nop

00019008 <__aeabi_dcmple>:
   19008:	f84d ed08 	str.w	lr, [sp, #-8]!
   1900c:	f7ff ffe0 	bl	18fd0 <__aeabi_cdcmpeq>
   19010:	bf94      	ite	ls
   19012:	2001      	movls	r0, #1
   19014:	2000      	movhi	r0, #0
   19016:	f85d fb08 	ldr.w	pc, [sp], #8
   1901a:	bf00      	nop

0001901c <__aeabi_dcmpge>:
   1901c:	f84d ed08 	str.w	lr, [sp, #-8]!
   19020:	f7ff ffce 	bl	18fc0 <__aeabi_cdrcmple>
   19024:	bf94      	ite	ls
   19026:	2001      	movls	r0, #1
   19028:	2000      	movhi	r0, #0
   1902a:	f85d fb08 	ldr.w	pc, [sp], #8
   1902e:	bf00      	nop

00019030 <__aeabi_dcmpgt>:
   19030:	f84d ed08 	str.w	lr, [sp, #-8]!
   19034:	f7ff ffc4 	bl	18fc0 <__aeabi_cdrcmple>
   19038:	bf34      	ite	cc
   1903a:	2001      	movcc	r0, #1
   1903c:	2000      	movcs	r0, #0
   1903e:	f85d fb08 	ldr.w	pc, [sp], #8
   19042:	bf00      	nop

00019044 <__aeabi_dcmpun>:
   19044:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   19048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1904c:	d102      	bne.n	19054 <__aeabi_dcmpun+0x10>
   1904e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   19052:	d10a      	bne.n	1906a <__aeabi_dcmpun+0x26>
   19054:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   19058:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1905c:	d102      	bne.n	19064 <__aeabi_dcmpun+0x20>
   1905e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   19062:	d102      	bne.n	1906a <__aeabi_dcmpun+0x26>
   19064:	f04f 0000 	mov.w	r0, #0
   19068:	4770      	bx	lr
   1906a:	f04f 0001 	mov.w	r0, #1
   1906e:	4770      	bx	lr

00019070 <__aeabi_d2iz>:
   19070:	ea4f 0241 	mov.w	r2, r1, lsl #1
   19074:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
   19078:	d215      	bcs.n	190a6 <__aeabi_d2iz+0x36>
   1907a:	d511      	bpl.n	190a0 <__aeabi_d2iz+0x30>
   1907c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
   19080:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   19084:	d912      	bls.n	190ac <__aeabi_d2iz+0x3c>
   19086:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1908a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
   1908e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   19092:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
   19096:	fa23 f002 	lsr.w	r0, r3, r2
   1909a:	bf18      	it	ne
   1909c:	4240      	negne	r0, r0
   1909e:	4770      	bx	lr
   190a0:	f04f 0000 	mov.w	r0, #0
   190a4:	4770      	bx	lr
   190a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   190aa:	d105      	bne.n	190b8 <__aeabi_d2iz+0x48>
   190ac:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
   190b0:	bf08      	it	eq
   190b2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
   190b6:	4770      	bx	lr
   190b8:	f04f 0000 	mov.w	r0, #0
   190bc:	4770      	bx	lr
   190be:	bf00      	nop

000190c0 <__aeabi_d2f>:
   190c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   190c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
   190c8:	bf24      	itt	cs
   190ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
   190ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
   190d2:	d90d      	bls.n	190f0 <__aeabi_d2f+0x30>
   190d4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
   190d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   190dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   190e0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
   190e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   190e8:	bf08      	it	eq
   190ea:	f020 0001 	biceq.w	r0, r0, #1
   190ee:	4770      	bx	lr
   190f0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
   190f4:	d121      	bne.n	1913a <__aeabi_d2f+0x7a>
   190f6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
   190fa:	bfbc      	itt	lt
   190fc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
   19100:	4770      	bxlt	lr
   19102:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
   19106:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1910a:	f1c2 0218 	rsb	r2, r2, #24
   1910e:	f1c2 0c20 	rsb	ip, r2, #32
   19112:	fa10 f30c 	lsls.w	r3, r0, ip
   19116:	fa20 f002 	lsr.w	r0, r0, r2
   1911a:	bf18      	it	ne
   1911c:	f040 0001 	orrne.w	r0, r0, #1
   19120:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   19124:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   19128:	fa03 fc0c 	lsl.w	ip, r3, ip
   1912c:	ea40 000c 	orr.w	r0, r0, ip
   19130:	fa23 f302 	lsr.w	r3, r3, r2
   19134:	ea4f 0343 	mov.w	r3, r3, lsl #1
   19138:	e7cc      	b.n	190d4 <__aeabi_d2f+0x14>
   1913a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1913e:	d107      	bne.n	19150 <__aeabi_d2f+0x90>
   19140:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   19144:	bf1e      	ittt	ne
   19146:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
   1914a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
   1914e:	4770      	bxne	lr
   19150:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
   19154:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
   19158:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
   1915c:	4770      	bx	lr
   1915e:	bf00      	nop

00019160 <__aeabi_ldivmod>:
   19160:	b97b      	cbnz	r3, 19182 <__aeabi_ldivmod+0x22>
   19162:	b972      	cbnz	r2, 19182 <__aeabi_ldivmod+0x22>
   19164:	2900      	cmp	r1, #0
   19166:	bfbe      	ittt	lt
   19168:	2000      	movlt	r0, #0
   1916a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
   1916e:	e006      	blt.n	1917e <__aeabi_ldivmod+0x1e>
   19170:	bf08      	it	eq
   19172:	2800      	cmpeq	r0, #0
   19174:	bf1c      	itt	ne
   19176:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
   1917a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
   1917e:	f000 b857 	b.w	19230 <__aeabi_idiv0>
   19182:	f1ad 0c08 	sub.w	ip, sp, #8
   19186:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1918a:	2900      	cmp	r1, #0
   1918c:	db09      	blt.n	191a2 <__aeabi_ldivmod+0x42>
   1918e:	2b00      	cmp	r3, #0
   19190:	db1a      	blt.n	191c8 <__aeabi_ldivmod+0x68>
   19192:	f012 facb 	bl	2b72c <__udivmoddi4>
   19196:	f8dd e004 	ldr.w	lr, [sp, #4]
   1919a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1919e:	b004      	add	sp, #16
   191a0:	4770      	bx	lr
   191a2:	4240      	negs	r0, r0
   191a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   191a8:	2b00      	cmp	r3, #0
   191aa:	db1b      	blt.n	191e4 <__aeabi_ldivmod+0x84>
   191ac:	f012 fabe 	bl	2b72c <__udivmoddi4>
   191b0:	f8dd e004 	ldr.w	lr, [sp, #4]
   191b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191b8:	b004      	add	sp, #16
   191ba:	4240      	negs	r0, r0
   191bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   191c0:	4252      	negs	r2, r2
   191c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191c6:	4770      	bx	lr
   191c8:	4252      	negs	r2, r2
   191ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191ce:	f012 faad 	bl	2b72c <__udivmoddi4>
   191d2:	f8dd e004 	ldr.w	lr, [sp, #4]
   191d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191da:	b004      	add	sp, #16
   191dc:	4240      	negs	r0, r0
   191de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   191e2:	4770      	bx	lr
   191e4:	4252      	negs	r2, r2
   191e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191ea:	f012 fa9f 	bl	2b72c <__udivmoddi4>
   191ee:	f8dd e004 	ldr.w	lr, [sp, #4]
   191f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191f6:	b004      	add	sp, #16
   191f8:	4252      	negs	r2, r2
   191fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   191fe:	4770      	bx	lr

00019200 <__aeabi_uldivmod>:
   19200:	b953      	cbnz	r3, 19218 <__aeabi_uldivmod+0x18>
   19202:	b94a      	cbnz	r2, 19218 <__aeabi_uldivmod+0x18>
   19204:	2900      	cmp	r1, #0
   19206:	bf08      	it	eq
   19208:	2800      	cmpeq	r0, #0
   1920a:	bf1c      	itt	ne
   1920c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
   19210:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
   19214:	f000 b80c 	b.w	19230 <__aeabi_idiv0>
   19218:	f1ad 0c08 	sub.w	ip, sp, #8
   1921c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   19220:	f012 fa84 	bl	2b72c <__udivmoddi4>
   19224:	f8dd e004 	ldr.w	lr, [sp, #4]
   19228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1922c:	b004      	add	sp, #16
   1922e:	4770      	bx	lr

00019230 <__aeabi_idiv0>:
   19230:	4770      	bx	lr
   19232:	bf00      	nop

00019234 <__aeabi_d2uiz>:
   19234:	004a      	lsls	r2, r1, #1
   19236:	d211      	bcs.n	1925c <__aeabi_d2uiz+0x28>
   19238:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
   1923c:	d211      	bcs.n	19262 <__aeabi_d2uiz+0x2e>
   1923e:	d50d      	bpl.n	1925c <__aeabi_d2uiz+0x28>
   19240:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
   19244:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   19248:	d40e      	bmi.n	19268 <__aeabi_d2uiz+0x34>
   1924a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1924e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
   19252:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   19256:	fa23 f002 	lsr.w	r0, r3, r2
   1925a:	4770      	bx	lr
   1925c:	f04f 0000 	mov.w	r0, #0
   19260:	4770      	bx	lr
   19262:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   19266:	d102      	bne.n	1926e <__aeabi_d2uiz+0x3a>
   19268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1926c:	4770      	bx	lr
   1926e:	f04f 0000 	mov.w	r0, #0
   19272:	4770      	bx	lr

00019274 <__restore_core_regs>:
   19274:	f100 0134 	add.w	r1, r0, #52	@ 0x34
   19278:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1927c:	469c      	mov	ip, r3
   1927e:	46a6      	mov	lr, r4
   19280:	f84c 5d04 	str.w	r5, [ip, #-4]!
   19284:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   19288:	46e5      	mov	sp, ip
   1928a:	bd00      	pop	{pc}

0001928c <__gnu_Unwind_Restore_VFP>:
   1928c:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
   19290:	4770      	bx	lr
   19292:	bf00      	nop

00019294 <__gnu_Unwind_Save_VFP>:
   19294:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
   19298:	4770      	bx	lr
   1929a:	bf00      	nop

0001929c <__gnu_Unwind_Restore_VFP_D>:
   1929c:	ec90 0b20 	vldmia	r0, {d0-d15}
   192a0:	4770      	bx	lr
   192a2:	bf00      	nop

000192a4 <__gnu_Unwind_Save_VFP_D>:
   192a4:	ec80 0b20 	vstmia	r0, {d0-d15}
   192a8:	4770      	bx	lr
   192aa:	bf00      	nop

000192ac <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   192ac:	ecd0 0b20 	vldmia	r0, {d16-d31}
   192b0:	4770      	bx	lr
   192b2:	bf00      	nop

000192b4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   192b4:	ecc0 0b20 	vstmia	r0, {d16-d31}
   192b8:	4770      	bx	lr
   192ba:	bf00      	nop

000192bc <__gnu_Unwind_Restore_WMMXD>:
   192bc:	ecf0 0102 	ldfe	f0, [r0], #8
   192c0:	ecf0 1102 	ldfe	f1, [r0], #8
   192c4:	ecf0 2102 	ldfe	f2, [r0], #8
   192c8:	ecf0 3102 	ldfe	f3, [r0], #8
   192cc:	ecf0 4102 	ldfe	f4, [r0], #8
   192d0:	ecf0 5102 	ldfe	f5, [r0], #8
   192d4:	ecf0 6102 	ldfe	f6, [r0], #8
   192d8:	ecf0 7102 	ldfe	f7, [r0], #8
   192dc:	ecf0 8102 	ldfp	f0, [r0], #8
   192e0:	ecf0 9102 	ldfp	f1, [r0], #8
   192e4:	ecf0 a102 	ldfp	f2, [r0], #8
   192e8:	ecf0 b102 	ldfp	f3, [r0], #8
   192ec:	ecf0 c102 	ldfp	f4, [r0], #8
   192f0:	ecf0 d102 	ldfp	f5, [r0], #8
   192f4:	ecf0 e102 	ldfp	f6, [r0], #8
   192f8:	ecf0 f102 	ldfp	f7, [r0], #8
   192fc:	4770      	bx	lr
   192fe:	bf00      	nop

00019300 <__gnu_Unwind_Save_WMMXD>:
   19300:	ece0 0102 	stfe	f0, [r0], #8
   19304:	ece0 1102 	stfe	f1, [r0], #8
   19308:	ece0 2102 	stfe	f2, [r0], #8
   1930c:	ece0 3102 	stfe	f3, [r0], #8
   19310:	ece0 4102 	stfe	f4, [r0], #8
   19314:	ece0 5102 	stfe	f5, [r0], #8
   19318:	ece0 6102 	stfe	f6, [r0], #8
   1931c:	ece0 7102 	stfe	f7, [r0], #8
   19320:	ece0 8102 	stfp	f0, [r0], #8
   19324:	ece0 9102 	stfp	f1, [r0], #8
   19328:	ece0 a102 	stfp	f2, [r0], #8
   1932c:	ece0 b102 	stfp	f3, [r0], #8
   19330:	ece0 c102 	stfp	f4, [r0], #8
   19334:	ece0 d102 	stfp	f5, [r0], #8
   19338:	ece0 e102 	stfp	f6, [r0], #8
   1933c:	ece0 f102 	stfp	f7, [r0], #8
   19340:	4770      	bx	lr
   19342:	bf00      	nop

00019344 <__gnu_Unwind_Restore_WMMXC>:
   19344:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   19348:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1934c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   19350:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   19354:	4770      	bx	lr
   19356:	bf00      	nop

00019358 <__gnu_Unwind_Save_WMMXC>:
   19358:	fca0 8101 	stc2	1, cr8, [r0], #4
   1935c:	fca0 9101 	stc2	1, cr9, [r0], #4
   19360:	fca0 a101 	stc2	1, cr10, [r0], #4
   19364:	fca0 b101 	stc2	1, cr11, [r0], #4
   19368:	4770      	bx	lr
   1936a:	bf00      	nop

0001936c <_Unwind_RaiseException>:
   1936c:	46ec      	mov	ip, sp
   1936e:	b500      	push	{lr}
   19370:	e92d 5000 	stmdb	sp!, {ip, lr}
   19374:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   19378:	f04f 0300 	mov.w	r3, #0
   1937c:	e92d 000c 	stmdb	sp!, {r2, r3}
   19380:	a901      	add	r1, sp, #4
   19382:	f022 fcdd 	bl	3bd40 <__gnu_Unwind_RaiseException>
   19386:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
   1938a:	b012      	add	sp, #72	@ 0x48
   1938c:	4770      	bx	lr
   1938e:	bf00      	nop

00019390 <_Unwind_Resume>:
   19390:	46ec      	mov	ip, sp
   19392:	b500      	push	{lr}
   19394:	e92d 5000 	stmdb	sp!, {ip, lr}
   19398:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1939c:	f04f 0300 	mov.w	r3, #0
   193a0:	e92d 000c 	stmdb	sp!, {r2, r3}
   193a4:	a901      	add	r1, sp, #4
   193a6:	f022 fd07 	bl	3bdb8 <__gnu_Unwind_Resume>
   193aa:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
   193ae:	b012      	add	sp, #72	@ 0x48
   193b0:	4770      	bx	lr
   193b2:	bf00      	nop

000193b4 <_Unwind_Resume_or_Rethrow>:
   193b4:	46ec      	mov	ip, sp
   193b6:	b500      	push	{lr}
   193b8:	e92d 5000 	stmdb	sp!, {ip, lr}
   193bc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   193c0:	f04f 0300 	mov.w	r3, #0
   193c4:	e92d 000c 	stmdb	sp!, {r2, r3}
   193c8:	a901      	add	r1, sp, #4
   193ca:	f022 fd17 	bl	3bdfc <__gnu_Unwind_Resume_or_Rethrow>
   193ce:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
   193d2:	b012      	add	sp, #72	@ 0x48
   193d4:	4770      	bx	lr
   193d6:	bf00      	nop

000193d8 <_Unwind_ForcedUnwind>:
   193d8:	46ec      	mov	ip, sp
   193da:	b500      	push	{lr}
   193dc:	e92d 5000 	stmdb	sp!, {ip, lr}
   193e0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   193e4:	f04f 0300 	mov.w	r3, #0
   193e8:	e92d 000c 	stmdb	sp!, {r2, r3}
   193ec:	ab01      	add	r3, sp, #4
   193ee:	f022 fcdb 	bl	3bda8 <__gnu_Unwind_ForcedUnwind>
   193f2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
   193f6:	b012      	add	sp, #72	@ 0x48
   193f8:	4770      	bx	lr
   193fa:	bf00      	nop

000193fc <_Unwind_Backtrace>:
   193fc:	46ec      	mov	ip, sp
   193fe:	b500      	push	{lr}
   19400:	e92d 5000 	stmdb	sp!, {ip, lr}
   19404:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   19408:	f04f 0300 	mov.w	r3, #0
   1940c:	e92d 000c 	stmdb	sp!, {r2, r3}
   19410:	aa01      	add	r2, sp, #4
   19412:	f022 fd53 	bl	3bebc <__gnu_Unwind_Backtrace>
   19416:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
   1941a:	b012      	add	sp, #72	@ 0x48
   1941c:	4770      	bx	lr
   1941e:	bf00      	nop

00019420 <prvInsertBlockIntoFreeList>:
    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert) {
   19420:	b410      	push	{r4}
    BlockLink_t *pxIterator;
    uint8_t *puc;

    /* Iterate through the list until a block is found that has a higher address
    than the block being inserted. */
    for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
   19422:	4b15      	ldr	r3, [pc, #84]	@ (19478 <prvInsertBlockIntoFreeList+0x58>)
   19424:	461a      	mov	r2, r3
   19426:	681b      	ldr	r3, [r3, #0]
   19428:	4283      	cmp	r3, r0
   1942a:	d3fb      	bcc.n	19424 <prvInsertBlockIntoFreeList+0x4>
    }

    /* Do the block being inserted, and the block it is being inserted after
    make a contiguous block of memory? */
    puc = (uint8_t *)pxIterator;
    if ((puc + pxIterator->xBlockSize) == (uint8_t *)pxBlockToInsert) {
   1942c:	6854      	ldr	r4, [r2, #4]
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   1942e:	6841      	ldr	r1, [r0, #4]
    if ((puc + pxIterator->xBlockSize) == (uint8_t *)pxBlockToInsert) {
   19430:	eb02 0c04 	add.w	ip, r2, r4
   19434:	4560      	cmp	r0, ip
   19436:	d013      	beq.n	19460 <prvInsertBlockIntoFreeList+0x40>
    }

    /* Do the block being inserted, and the block it is being inserted before
    make a contiguous block of memory? */
    puc = (uint8_t *)pxBlockToInsert;
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
   19438:	1844      	adds	r4, r0, r1
   1943a:	42a3      	cmp	r3, r4
   1943c:	d006      	beq.n	1944c <prvInsertBlockIntoFreeList+0x2c>
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
        } else {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
        }
    } else {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   1943e:	6003      	str	r3, [r0, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
    before and the block after, then it's pxNextFreeBlock pointer will have
    already been set, and should not be set here as that would make it point
    to itself. */
    if (pxIterator != pxBlockToInsert) {
   19440:	4282      	cmp	r2, r0
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
   19442:	bf18      	it	ne
   19444:	6010      	strne	r0, [r2, #0]
    } else {
        mtCOVERAGE_TEST_MARKER();
    }
}
   19446:	f85d 4b04 	ldr.w	r4, [sp], #4
   1944a:	4770      	bx	lr
        if (pxIterator->pxNextFreeBlock != pxEnd) {
   1944c:	4c0b      	ldr	r4, [pc, #44]	@ (1947c <prvInsertBlockIntoFreeList+0x5c>)
   1944e:	6824      	ldr	r4, [r4, #0]
   19450:	42a3      	cmp	r3, r4
   19452:	d0f4      	beq.n	1943e <prvInsertBlockIntoFreeList+0x1e>
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   19454:	e9d3 3400 	ldrd	r3, r4, [r3]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   19458:	4421      	add	r1, r4
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   1945a:	6003      	str	r3, [r0, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   1945c:	6041      	str	r1, [r0, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   1945e:	e7ef      	b.n	19440 <prvInsertBlockIntoFreeList+0x20>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   19460:	4421      	add	r1, r4
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
   19462:	1850      	adds	r0, r2, r1
   19464:	4283      	cmp	r3, r0
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   19466:	6051      	str	r1, [r2, #4]
    if ((puc + pxBlockToInsert->xBlockSize) == (uint8_t *)pxIterator->pxNextFreeBlock) {
   19468:	d1ed      	bne.n	19446 <prvInsertBlockIntoFreeList+0x26>
        if (pxIterator->pxNextFreeBlock != pxEnd) {
   1946a:	4804      	ldr	r0, [pc, #16]	@ (1947c <prvInsertBlockIntoFreeList+0x5c>)
   1946c:	6800      	ldr	r0, [r0, #0]
   1946e:	4283      	cmp	r3, r0
   19470:	d0e9      	beq.n	19446 <prvInsertBlockIntoFreeList+0x26>
        pxBlockToInsert = pxIterator;
   19472:	4610      	mov	r0, r2
   19474:	e7ee      	b.n	19454 <prvInsertBlockIntoFreeList+0x34>
   19476:	bf00      	nop
   19478:	1000cc80 	.word	0x1000cc80
   1947c:	1000cc7c 	.word	0x1000cc7c

00019480 <prvPortMalloc>:
void *prvPortMalloc(size_t xWantedSize, uint8_t enableSuspendResume) {
   19480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19484:	4604      	mov	r4, r0
    if (enableSuspendResume)
   19486:	460d      	mov	r5, r1
   19488:	2900      	cmp	r1, #0
   1948a:	d149      	bne.n	19520 <prvPortMalloc+0xa0>
        if (pxEnd == NULL) {
   1948c:	484a      	ldr	r0, [pc, #296]	@ (195b8 <prvPortMalloc+0x138>)
   1948e:	6803      	ldr	r3, [r0, #0]
   19490:	2b00      	cmp	r3, #0
   19492:	d058      	beq.n	19546 <prvPortMalloc+0xc6>
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   19494:	4b49      	ldr	r3, [pc, #292]	@ (195bc <prvPortMalloc+0x13c>)
   19496:	681f      	ldr	r7, [r3, #0]
   19498:	423c      	tst	r4, r7
   1949a:	d13a      	bne.n	19512 <prvPortMalloc+0x92>
            if (xWantedSize > 0) {
   1949c:	2c00      	cmp	r4, #0
   1949e:	d038      	beq.n	19512 <prvPortMalloc+0x92>
                xWantedSize += xHeapStructSize;
   194a0:	f104 0c08 	add.w	ip, r4, #8
                if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
   194a4:	0761      	lsls	r1, r4, #29
                    xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
   194a6:	bf1c      	itt	ne
   194a8:	f02c 0c07 	bicne.w	ip, ip, #7
   194ac:	f10c 0c08 	addne.w	ip, ip, #8
            if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
   194b0:	f1bc 0f00 	cmp.w	ip, #0
   194b4:	d02c      	beq.n	19510 <prvPortMalloc+0x90>
   194b6:	4e42      	ldr	r6, [pc, #264]	@ (195c0 <prvPortMalloc+0x140>)
   194b8:	f8d6 8000 	ldr.w	r8, [r6]
   194bc:	45e0      	cmp	r8, ip
   194be:	d327      	bcc.n	19510 <prvPortMalloc+0x90>
                pxBlock = xStart.pxNextFreeBlock;
   194c0:	4940      	ldr	r1, [pc, #256]	@ (195c4 <prvPortMalloc+0x144>)
   194c2:	680c      	ldr	r4, [r1, #0]
                while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
   194c4:	e003      	b.n	194ce <prvPortMalloc+0x4e>
   194c6:	6823      	ldr	r3, [r4, #0]
   194c8:	b123      	cbz	r3, 194d4 <prvPortMalloc+0x54>
                    pxPreviousBlock = pxBlock;
   194ca:	4621      	mov	r1, r4
                    pxBlock = pxBlock->pxNextFreeBlock;
   194cc:	461c      	mov	r4, r3
                while ((pxBlock->xBlockSize < xWantedSize) && (pxBlock->pxNextFreeBlock != NULL)) {
   194ce:	6862      	ldr	r2, [r4, #4]
   194d0:	4562      	cmp	r2, ip
   194d2:	d3f8      	bcc.n	194c6 <prvPortMalloc+0x46>
                if (pxBlock != pxEnd) {
   194d4:	6803      	ldr	r3, [r0, #0]
   194d6:	42a3      	cmp	r3, r4
   194d8:	d01a      	beq.n	19510 <prvPortMalloc+0x90>
                    pvReturn =
   194da:	680b      	ldr	r3, [r1, #0]
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   194dc:	6820      	ldr	r0, [r4, #0]
   194de:	6008      	str	r0, [r1, #0]
                    pvReturn =
   194e0:	f103 0908 	add.w	r9, r3, #8
                    if ((pxBlock->xBlockSize - xWantedSize) > heapMINIMUM_BLOCK_SIZE) {
   194e4:	eba2 030c 	sub.w	r3, r2, ip
   194e8:	2b10      	cmp	r3, #16
   194ea:	d827      	bhi.n	1953c <prvPortMalloc+0xbc>
                    if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
   194ec:	4936      	ldr	r1, [pc, #216]	@ (195c8 <prvPortMalloc+0x148>)
   194ee:	6808      	ldr	r0, [r1, #0]
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
   194f0:	eba8 0302 	sub.w	r3, r8, r2
                    if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
   194f4:	4283      	cmp	r3, r0
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
   194f6:	6033      	str	r3, [r6, #0]
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   194f8:	bf38      	it	cc
   194fa:	600b      	strcc	r3, [r1, #0]
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
   194fc:	433a      	orrs	r2, r7
                    pxBlock->pxNextFreeBlock = NULL;
   194fe:	2300      	movs	r3, #0
   19500:	e9c4 3200 	strd	r3, r2, [r4]
    if (enableSuspendResume) {
   19504:	2d00      	cmp	r5, #0
   19506:	d154      	bne.n	195b2 <prvPortMalloc+0x132>
    configASSERT((((size_t)pvReturn) & (size_t)portBYTE_ALIGNMENT_MASK) == 0);
   19508:	f019 0f07 	tst.w	r9, #7
   1950c:	d005      	beq.n	1951a <prvPortMalloc+0x9a>
   1950e:	e7fe      	b.n	1950e <prvPortMalloc+0x8e>
    if (enableSuspendResume) {
   19510:	b98d      	cbnz	r5, 19536 <prvPortMalloc+0xb6>
            vApplicationMallocFailedHook();
   19512:	f014 fc37 	bl	2dd84 <vApplicationMallocFailedHook>
   19516:	f04f 0900 	mov.w	r9, #0
}
   1951a:	4648      	mov	r0, r9
   1951c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vTaskSuspendAll();
   19520:	f014 fe10 	bl	2e144 <vTaskSuspendAll>
        if (pxEnd == NULL) {
   19524:	4824      	ldr	r0, [pc, #144]	@ (195b8 <prvPortMalloc+0x138>)
   19526:	6803      	ldr	r3, [r0, #0]
   19528:	b16b      	cbz	r3, 19546 <prvPortMalloc+0xc6>
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   1952a:	4b24      	ldr	r3, [pc, #144]	@ (195bc <prvPortMalloc+0x13c>)
   1952c:	681f      	ldr	r7, [r3, #0]
   1952e:	423c      	tst	r4, r7
   19530:	d101      	bne.n	19536 <prvPortMalloc+0xb6>
            if (xWantedSize > 0) {
   19532:	2c00      	cmp	r4, #0
   19534:	d1b4      	bne.n	194a0 <prvPortMalloc+0x20>
        (void)xTaskResumeAll();
   19536:	f014 fe0d 	bl	2e154 <xTaskResumeAll>
        if (pvReturn == NULL) {
   1953a:	e7ea      	b.n	19512 <prvPortMalloc+0x92>
                        pxNewBlockLink = (void *)(((uint8_t *)pxBlock) + xWantedSize);
   1953c:	eb04 000c 	add.w	r0, r4, ip
                        configASSERT((((size_t)pxNewBlockLink) & portBYTE_ALIGNMENT_MASK) == 0);
   19540:	0742      	lsls	r2, r0, #29
   19542:	d02f      	beq.n	195a4 <prvPortMalloc+0x124>
   19544:	e7fe      	b.n	19544 <prvPortMalloc+0xc4>
    size_t xTotalHeapSize = ucHeapSize;
   19546:	4b21      	ldr	r3, [pc, #132]	@ (195cc <prvPortMalloc+0x14c>)
    uxAddress = (size_t)ucHeap;
   19548:	4a21      	ldr	r2, [pc, #132]	@ (195d0 <prvPortMalloc+0x150>)
    if ((uxAddress & portBYTE_ALIGNMENT_MASK) != 0) {
   1954a:	681b      	ldr	r3, [r3, #0]
   1954c:	0756      	lsls	r6, r2, #29
   1954e:	4413      	add	r3, r2
   19550:	d002      	beq.n	19558 <prvPortMalloc+0xd8>
        uxAddress += (portBYTE_ALIGNMENT - 1);
   19552:	3207      	adds	r2, #7
        uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
   19554:	f022 0207 	bic.w	r2, r2, #7
    xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
   19558:	4f1a      	ldr	r7, [pc, #104]	@ (195c4 <prvPortMalloc+0x144>)
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   1955a:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 195c8 <prvPortMalloc+0x148>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   1955e:	4e18      	ldr	r6, [pc, #96]	@ (195c0 <prvPortMalloc+0x140>)
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
   19560:	f8df c058 	ldr.w	ip, [pc, #88]	@ 195bc <prvPortMalloc+0x13c>
    xStart.pxNextFreeBlock = (void *)pucAlignedHeap;
   19564:	603a      	str	r2, [r7, #0]
    uxAddress -= xHeapStructSize;
   19566:	3b08      	subs	r3, #8
    uxAddress &= ~((size_t)portBYTE_ALIGNMENT_MASK);
   19568:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = (size_t)0;
   1956c:	2100      	movs	r1, #0
   1956e:	6079      	str	r1, [r7, #4]
    pxEnd = (void *)uxAddress;
   19570:	6003      	str	r3, [r0, #0]
    pxEnd->pxNextFreeBlock = NULL;
   19572:	e9c3 1100 	strd	r1, r1, [r3]
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
   19576:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   1957a:	6013      	str	r3, [r2, #0]
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   1957c:	428c      	cmp	r4, r1
    pxFirstFreeBlock->xBlockSize = uxAddress - (size_t)pxFirstFreeBlock;
   1957e:	eba3 0302 	sub.w	r3, r3, r2
   19582:	6053      	str	r3, [r2, #4]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   19584:	f8ce 3000 	str.w	r3, [lr]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   19588:	6033      	str	r3, [r6, #0]
    xBlockAllocatedBit = ((size_t)1) << ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
   1958a:	f8cc 7000 	str.w	r7, [ip]
        if ((xWantedSize & xBlockAllocatedBit) == 0) {
   1958e:	dbbf      	blt.n	19510 <prvPortMalloc+0x90>
            if (xWantedSize > 0) {
   19590:	d0be      	beq.n	19510 <prvPortMalloc+0x90>
                xWantedSize += xHeapStructSize;
   19592:	f104 0c08 	add.w	ip, r4, #8
                if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
   19596:	0764      	lsls	r4, r4, #29
   19598:	d08e      	beq.n	194b8 <prvPortMalloc+0x38>
                    xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
   1959a:	f02c 0c07 	bic.w	ip, ip, #7
   1959e:	f10c 0c08 	add.w	ip, ip, #8
            if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
   195a2:	e789      	b.n	194b8 <prvPortMalloc+0x38>
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   195a4:	6043      	str	r3, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
   195a6:	f8c4 c004 	str.w	ip, [r4, #4]
                        prvInsertBlockIntoFreeList(pxNewBlockLink);
   195aa:	f7ff ff39 	bl	19420 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
   195ae:	6862      	ldr	r2, [r4, #4]
   195b0:	e79c      	b.n	194ec <prvPortMalloc+0x6c>
        (void)xTaskResumeAll();
   195b2:	f014 fdcf 	bl	2e154 <xTaskResumeAll>
        if (pvReturn == NULL) {
   195b6:	e7a7      	b.n	19508 <prvPortMalloc+0x88>
   195b8:	1000cc7c 	.word	0x1000cc7c
   195bc:	1000cc70 	.word	0x1000cc70
   195c0:	1000cc78 	.word	0x1000cc78
   195c4:	1000cc80 	.word	0x1000cc80
   195c8:	1000cc74 	.word	0x1000cc74
   195cc:	1000c074 	.word	0x1000c074
   195d0:	1000eca8 	.word	0x1000eca8

000195d4 <pvTasklessPortMalloc>:
void *pvTasklessPortMalloc(size_t xWantedSize) { return prvPortMalloc(xWantedSize, 0); }
   195d4:	2100      	movs	r1, #0
   195d6:	f7ff bf53 	b.w	19480 <prvPortMalloc>
   195da:	bf00      	nop

000195dc <vTasklessPortFree>:
    if (pv != NULL) {
   195dc:	b150      	cbz	r0, 195f4 <vTasklessPortFree+0x18>
        configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
   195de:	4a0b      	ldr	r2, [pc, #44]	@ (1960c <vTasklessPortFree+0x30>)
   195e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
   195e4:	6812      	ldr	r2, [r2, #0]
   195e6:	4213      	tst	r3, r2
   195e8:	d100      	bne.n	195ec <vTasklessPortFree+0x10>
   195ea:	e7fe      	b.n	195ea <vTasklessPortFree+0xe>
        configASSERT(pxLink->pxNextFreeBlock == NULL);
   195ec:	f850 1c08 	ldr.w	r1, [r0, #-8]
   195f0:	b109      	cbz	r1, 195f6 <vTasklessPortFree+0x1a>
   195f2:	e7fe      	b.n	195f2 <vTasklessPortFree+0x16>
void vTasklessPortFree(void *pv) { prvPortFree(pv, 0); }
   195f4:	4770      	bx	lr
                    xFreeBytesRemaining += pxLink->xBlockSize;
   195f6:	4906      	ldr	r1, [pc, #24]	@ (19610 <vTasklessPortFree+0x34>)
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
   195f8:	ea23 0302 	bic.w	r3, r3, r2
                    xFreeBytesRemaining += pxLink->xBlockSize;
   195fc:	680a      	ldr	r2, [r1, #0]
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
   195fe:	f840 3c04 	str.w	r3, [r0, #-4]
                    xFreeBytesRemaining += pxLink->xBlockSize;
   19602:	441a      	add	r2, r3
                    prvInsertBlockIntoFreeList(((BlockLink_t *)pxLink));
   19604:	3808      	subs	r0, #8
                    xFreeBytesRemaining += pxLink->xBlockSize;
   19606:	600a      	str	r2, [r1, #0]
                    prvInsertBlockIntoFreeList(((BlockLink_t *)pxLink));
   19608:	f7ff bf0a 	b.w	19420 <prvInsertBlockIntoFreeList>
   1960c:	1000cc70 	.word	0x1000cc70
   19610:	1000cc78 	.word	0x1000cc78

00019614 <ns_core_check_api>:
 * param oldest
 * param newest
 * return uint32_t
 */
extern uint32_t ns_core_check_api(
    const ns_core_api_t *submitted, const ns_core_api_t *oldest, const ns_core_api_t *newest) {
   19614:	b510      	push	{r4, lr}

    if (submitted->apiId != newest->apiId) {
   19616:	6813      	ldr	r3, [r2, #0]
   19618:	6804      	ldr	r4, [r0, #0]
   1961a:	429c      	cmp	r4, r3
   1961c:	d124      	bne.n	19668 <ns_core_check_api+0x54>
    uint64_t cMinor = (uint64_t)c->minor;
   1961e:	88c3      	ldrh	r3, [r0, #6]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   19620:	f8b0 c004 	ldrh.w	ip, [r0, #4]
   19624:	8900      	ldrh	r0, [r0, #8]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   19626:	f8b1 e008 	ldrh.w	lr, [r1, #8]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   1962a:	041b      	lsls	r3, r3, #16
   1962c:	1818      	adds	r0, r3, r0
    uint64_t nMinor = (uint64_t)n->minor;
   1962e:	88cb      	ldrh	r3, [r1, #6]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   19630:	8889      	ldrh	r1, [r1, #4]
   19632:	ea4f 4303 	mov.w	r3, r3, lsl #16
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   19636:	f14c 0c00 	adc.w	ip, ip, #0
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   1963a:	eb13 030e 	adds.w	r3, r3, lr
   1963e:	f141 0100 	adc.w	r1, r1, #0
    } else if (c64 < n64) {
   19642:	4298      	cmp	r0, r3
   19644:	eb7c 0101 	sbcs.w	r1, ip, r1
   19648:	d30e      	bcc.n	19668 <ns_core_check_api+0x54>
    uint64_t nMinor = (uint64_t)n->minor;
   1964a:	88d3      	ldrh	r3, [r2, #6]
    uint64_t n64 = (nMajor << 32) + (nMinor << 16) + n->revision;
   1964c:	8891      	ldrh	r1, [r2, #4]
   1964e:	8912      	ldrh	r2, [r2, #8]
   19650:	041b      	lsls	r3, r3, #16
   19652:	189b      	adds	r3, r3, r2
   19654:	f141 0200 	adc.w	r2, r1, #0
    } else if (c64 < n64) {
   19658:	4283      	cmp	r3, r0
   1965a:	eb72 020c 	sbcs.w	r2, r2, ip
   1965e:	bf34      	ite	cc
   19660:	2001      	movcc	r0, #1
   19662:	2000      	movcs	r0, #0
   19664:	0040      	lsls	r0, r0, #1
        // submitted version is higher than newest supported version
        return NS_STATUS_INVALID_VERSION;
    }

    return NS_STATUS_SUCCESS;
}
   19666:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_VERSION;
   19668:	2002      	movs	r0, #2
}
   1966a:	bd10      	pop	{r4, pc}

0001966c <ns_core_init>:
uint32_t ns_core_init(ns_core_config_t *cfg) {
#ifndef NS_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if (cfg == NULL) {
   1966c:	b300      	cbz	r0, 196b0 <ns_core_init+0x44>
        return NS_STATUS_INVALID_HANDLE;
    }

    // check API version
    if (ns_core_check_api(cfg->api, &ns_core_oldest_supported_version, &ns_core_current_version)) {
   1966e:	6802      	ldr	r2, [r0, #0]
    if (submitted->apiId != newest->apiId) {
   19670:	6813      	ldr	r3, [r2, #0]
   19672:	f5b3 0f4a 	cmp.w	r3, #13238272	@ 0xca0000
   19676:	d119      	bne.n	196ac <ns_core_init+0x40>
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   19678:	8913      	ldrh	r3, [r2, #8]
    uint64_t cMinor = (uint64_t)c->minor;
   1967a:	88d1      	ldrh	r1, [r2, #6]
    uint64_t cMajor = (uint64_t)c->major;
   1967c:	f8b2 c004 	ldrh.w	ip, [r2, #4]
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   19680:	2000      	movs	r0, #0
    } else if (c64 < n64) {
   19682:	3b01      	subs	r3, #1
uint32_t ns_core_init(ns_core_config_t *cfg) {
   19684:	b510      	push	{r4, lr}
    uint64_t c64 = (cMajor << 32) + (cMinor << 16) + c->revision;
   19686:	ea4f 4101 	mov.w	r1, r1, lsl #16
    } else if (c64 < n64) {
   1968a:	f140 3eff 	adc.w	lr, r0, #4294967295	@ 0xffffffff
   1968e:	181b      	adds	r3, r3, r0
   19690:	185b      	adds	r3, r3, r1
   19692:	eb4c 030e 	adc.w	r3, ip, lr
   19696:	b93b      	cbnz	r3, 196a8 <ns_core_init+0x3c>
        return NS_STATUS_INVALID_VERSION;
    }
#endif
    g_ns_state.api = cfg->api;
   19698:	4b06      	ldr	r3, [pc, #24]	@ (196b4 <ns_core_init+0x48>)
    g_ns_state.initialized = true;
   1969a:	4907      	ldr	r1, [pc, #28]	@ (196b8 <ns_core_init+0x4c>)
   1969c:	6099      	str	r1, [r3, #8]
   1969e:	2401      	movs	r4, #1
   196a0:	e9c3 2400 	strd	r2, r4, [r3]
    g_ns_state.itmPrintWantsToBeEnabled = false;
    g_ns_state.itmPrintCurrentlyEnabled = false;
    g_ns_state.uartPrintWantsToBeEnabled = false;
    g_ns_state.uartPrintCurrentlyEnabled = false;
   196a4:	8198      	strh	r0, [r3, #12]
    g_ns_state.tempcoCurrentlyEnabled = false;
    g_ns_state.cryptoWantsToBeEnabled = true; // reset state of Crypto is 'on'
    g_ns_state.cryptoCurrentlyEnabled = true;
    g_ns_state.ap3BurstModeInitialized = false;
    return NS_STATUS_SUCCESS;
}
   196a6:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_VERSION;
   196a8:	2002      	movs	r0, #2
}
   196aa:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_VERSION;
   196ac:	2002      	movs	r0, #2
}
   196ae:	4770      	bx	lr
        return NS_STATUS_INVALID_HANDLE;
   196b0:	2001      	movs	r0, #1
   196b2:	4770      	bx	lr
   196b4:	1000cc88 	.word	0x1000cc88
   196b8:	00010100 	.word	0x00010100

000196bc <ns_core_fail_loop>:

void ns_core_fail_loop() {
    while (1)
   196bc:	e7fe      	b.n	196bc <ns_core_fail_loop>
   196be:	bf00      	nop

000196c0 <NMI_Handler>:
//*****************************************************************************
void NMI_Handler(void) {
    //
    // Go into an infinite loop.
    //
    while (1) {
   196c0:	e7fe      	b.n	196c0 <NMI_Handler>
   196c2:	bf00      	nop

000196c4 <BusFault_Handler>:
//*****************************************************************************
void HardFault_Handler(void) {
    //
    // Go into an infinite loop.
    //
    while (1) {
   196c4:	e7fe      	b.n	196c4 <BusFault_Handler>
   196c6:	bf00      	nop

000196c8 <DebugMon_Handler>:
//*****************************************************************************
void am_default_isr(void) {
    //
    // Go into an infinite loop.
    //
    while (1) {
   196c8:	e7fe      	b.n	196c8 <DebugMon_Handler>
   196ca:	bf00      	nop

000196cc <Reset_Handler>:
    __asm("    ldr    r0, =0xE000ED08\n"
   196cc:	4816      	ldr	r0, [pc, #88]	@ (19728 <zero_loop+0x14>)
   196ce:	4917      	ldr	r1, [pc, #92]	@ (1972c <zero_loop+0x18>)
   196d0:	6001      	str	r1, [r0, #0]
    __asm("    ldr    sp, [r1]");
   196d2:	f8d1 d000 	ldr.w	sp, [r1]
    __asm("ldr  r0, =0xE000ED88\n"
   196d6:	4816      	ldr	r0, [pc, #88]	@ (19730 <zero_loop+0x1c>)
   196d8:	6801      	ldr	r1, [r0, #0]
   196da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
   196de:	6001      	str	r1, [r0, #0]
   196e0:	f3bf 8f4f 	dsb	sy
   196e4:	f3bf 8f6f 	isb	sy
    __asm("    ldr     r0, =_init_data\n"
   196e8:	4812      	ldr	r0, [pc, #72]	@ (19734 <zero_loop+0x20>)
   196ea:	4913      	ldr	r1, [pc, #76]	@ (19738 <zero_loop+0x24>)
   196ec:	4a13      	ldr	r2, [pc, #76]	@ (1973c <zero_loop+0x28>)

000196ee <copy_loop>:
   196ee:	f850 3b04 	ldr.w	r3, [r0], #4
   196f2:	f841 3b04 	str.w	r3, [r1], #4
   196f6:	4291      	cmp	r1, r2
   196f8:	dbf9      	blt.n	196ee <copy_loop>
    __asm("    ldr     r0, =_init_data_sram\n"
   196fa:	4811      	ldr	r0, [pc, #68]	@ (19740 <zero_loop+0x2c>)
   196fc:	4911      	ldr	r1, [pc, #68]	@ (19744 <zero_loop+0x30>)
   196fe:	4a12      	ldr	r2, [pc, #72]	@ (19748 <zero_loop+0x34>)

00019700 <copy_loop_sram>:
   19700:	f850 3b04 	ldr.w	r3, [r0], #4
   19704:	f841 3b04 	str.w	r3, [r1], #4
   19708:	4291      	cmp	r1, r2
   1970a:	dbf9      	blt.n	19700 <copy_loop_sram>
    __asm("    ldr     r0, =_sbss\n"
   1970c:	480f      	ldr	r0, [pc, #60]	@ (1974c <zero_loop+0x38>)
   1970e:	4910      	ldr	r1, [pc, #64]	@ (19750 <zero_loop+0x3c>)
   19710:	f04f 0200 	mov.w	r2, #0

00019714 <zero_loop>:
   19714:	4288      	cmp	r0, r1
   19716:	bfb8      	it	lt
   19718:	f840 2b04 	strlt.w	r2, [r0], #4
   1971c:	dbfa      	blt.n	19714 <zero_loop>
    __libc_init_array();
   1971e:	f00d fbf1 	bl	26f04 <__libc_init_array>
    main();
   19722:	f006 fc87 	bl	20034 <main>
    __asm("    bkpt     ");
   19726:	be00      	bkpt	0x0000
}
   19728:	e000ed08 	.word	0xe000ed08
   1972c:	00018000 	.word	0x00018000
   19730:	e000ed88 	.word	0xe000ed88
   19734:	00048d54 	.word	0x00048d54
   19738:	1000c000 	.word	0x1000c000
   1973c:	1000cc70 	.word	0x1000cc70
   19740:	000499c4 	.word	0x000499c4
   19744:	10060000 	.word	0x10060000
   19748:	1007d800 	.word	0x1007d800
   1974c:	1000cc70 	.word	0x1000cc70
   19750:	1005dac0 	.word	0x1005dac0

00019754 <_init>:
extern void _init(void) { ; }
   19754:	4770      	bx	lr
   19756:	bf00      	nop

00019758 <_fini>:
extern void _fini(void) { ; }
   19758:	4770      	bx	lr
   1975a:	bf00      	nop

0001975c <arm_elementwise_add_s16>:
                                            const int32_t out_mult,
                                            const int32_t out_shift,
                                            const int32_t out_activation_min,
                                            const int32_t out_activation_max,
                                            const int32_t block_size)
{
   1975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19760:	b097      	sub	sp, #92	@ 0x5c
   19762:	4686      	mov	lr, r0
   19764:	f8dd b0ac 	ldr.w	fp, [sp, #172]	@ 0xac
   19768:	9301      	str	r3, [sp, #4]
    int32_t sum;
    int32_t two_halfword_1, two_halfword_2;
    int16_t sum_1, sum_2;
    int32_t loop_count = block_size / 2;

    while (loop_count > 0)
   1976a:	f1bb 0f01 	cmp.w	fp, #1
{
   1976e:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	@ 0x90
   19772:	9820      	ldr	r0, [sp, #128]	@ 0x80
   19774:	f8dd 9088 	ldr.w	r9, [sp, #136]	@ 0x88
   19778:	f8dd 809c 	ldr.w	r8, [sp, #156]	@ 0x9c
   1977c:	468a      	mov	sl, r1
    int32_t loop_count = block_size / 2;
   1977e:	eb0b 73db 	add.w	r3, fp, fp, lsr #31
    while (loop_count > 0)
   19782:	f340 819a 	ble.w	19aba <arm_elementwise_add_s16+0x35e>
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19786:	4242      	negs	r2, r0
   19788:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
   1978c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   1978e:	910a      	str	r1, [sp, #40]	@ 0x28
   19790:	4256      	negs	r6, r2
   19792:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
   19794:	4257      	negs	r7, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
   19796:	2201      	movs	r2, #1
   19798:	fa02 f101 	lsl.w	r1, r2, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1979c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   197a0:	3901      	subs	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197a2:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   197a6:	9104      	str	r1, [sp, #16]
   197a8:	fa02 f106 	lsl.w	r1, r2, r6
   197ac:	40ba      	lsls	r2, r7
   197ae:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
   197b2:	3a01      	subs	r2, #1
    q31_t threshold = remainder_mask >> 1;
   197b4:	9904      	ldr	r1, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
   197b6:	9206      	str	r2, [sp, #24]
    q31_t threshold = remainder_mask >> 1;
   197b8:	1052      	asrs	r2, r2, #1
   197ba:	1049      	asrs	r1, r1, #1
   197bc:	9207      	str	r2, [sp, #28]
        threshold++;
   197be:	3201      	adds	r2, #1
    q31_t threshold = remainder_mask >> 1;
   197c0:	9105      	str	r1, [sp, #20]
        threshold++;
   197c2:	9208      	str	r2, [sp, #32]
    q31_t threshold = remainder_mask >> 1;
   197c4:	4661      	mov	r1, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197c6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    const q31_t remainder_mask = (1 << exponent) - 1;
   197c8:	f8cd c008 	str.w	ip, [sp, #8]
    q31_t threshold = remainder_mask >> 1;
   197cc:	1049      	asrs	r1, r1, #1
   197ce:	9103      	str	r1, [sp, #12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197d0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
        threshold++;
   197d4:	9905      	ldr	r1, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197d6:	920e      	str	r2, [sp, #56]	@ 0x38
   197d8:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
        threshold++;
   197dc:	3101      	adds	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197de:	920f      	str	r2, [sp, #60]	@ 0x3c
   197e0:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
        threshold++;
   197e2:	910b      	str	r1, [sp, #44]	@ 0x2c
   197e4:	9903      	ldr	r1, [sp, #12]
   197e6:	9611      	str	r6, [sp, #68]	@ 0x44
   197e8:	105b      	asrs	r3, r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197ea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   197ee:	e9cd ae0c 	strd	sl, lr, [sp, #48]	@ 0x30
   197f2:	e9cd ea14 	strd	lr, sl, [sp, #80]	@ 0x50
        threshold++;
   197f6:	3101      	adds	r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   197f8:	9210      	str	r2, [sp, #64]	@ 0x40
   197fa:	46c8      	mov	r8, r9
   197fc:	009a      	lsls	r2, r3, #2
   197fe:	f8dd 909c 	ldr.w	r9, [sp, #156]	@ 0x9c
        threshold++;
   19802:	9109      	str	r1, [sp, #36]	@ 0x24
   19804:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   19808:	9312      	str	r3, [sp, #72]	@ 0x48
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1980a:	f04f 0c00 	mov.w	ip, #0
   1980e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   19812:	9213      	str	r2, [sp, #76]	@ 0x4c
    memcpy(&val, *in_q15, 4);
   19814:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   19816:	980c      	ldr	r0, [sp, #48]	@ 0x30
   19818:	f852 1b04 	ldr.w	r1, [r2], #4
   1981c:	920d      	str	r2, [sp, #52]	@ 0x34
   1981e:	f850 2b04 	ldr.w	r2, [r0], #4
   19822:	900c      	str	r0, [sp, #48]	@ 0x30
    {
        two_halfword_1 = arm_nn_read_q15x2_ia(&input_1_vect);
        two_halfword_2 = arm_nn_read_q15x2_ia(&input_2_vect);

        input_1 = (int16_t)(two_halfword_1 & 0xFFFF) << left_shift;
   19824:	fa0f fa81 	sxth.w	sl, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19828:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   1982a:	fa0a fa04 	lsl.w	sl, sl, r4
   1982e:	fa0a fa00 	lsl.w	sl, sl, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19832:	9801      	ldr	r0, [sp, #4]
   19834:	461d      	mov	r5, r3
   19836:	46e6      	mov	lr, ip
   19838:	fbca 5e00 	smlal	r5, lr, sl, r0
    result = (int32_t)(mult.long_long >> 31);
   1983c:	0fe8      	lsrs	r0, r5, #31
    q31_t threshold = remainder_mask >> 1;
   1983e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
    result = (int32_t)(mult.long_long >> 31);
   19840:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19844:	fa50 fe05 	asrs.w	lr, r0, r5
    int32_t remainder = remainder_mask & dividend;
   19848:	9d04      	ldr	r5, [sp, #16]
   1984a:	ea00 0605 	and.w	r6, r0, r5
    q31_t threshold = remainder_mask >> 1;
   1984e:	9805      	ldr	r0, [sp, #20]
   19850:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
   19852:	bf58      	it	pl
   19854:	4682      	movpl	sl, r0
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);
        input_2 = (int16_t)(two_halfword_2 & 0xFFFF) << left_shift;
   19856:	fa0f fb82 	sxth.w	fp, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1985a:	980e      	ldr	r0, [sp, #56]	@ 0x38
    q31_t threshold = remainder_mask >> 1;
   1985c:	bf48      	it	mi
   1985e:	46aa      	movmi	sl, r5
   19860:	fa0b fb04 	lsl.w	fp, fp, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19864:	fa0b fb00 	lsl.w	fp, fp, r0
    if (remainder > threshold)
   19868:	45b2      	cmp	sl, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1986a:	4618      	mov	r0, r3
   1986c:	46e2      	mov	sl, ip
   1986e:	fbcb 0a08 	smlal	r0, sl, fp, r8
    q31_t threshold = remainder_mask >> 1;
   19872:	9d11      	ldr	r5, [sp, #68]	@ 0x44
    result = (int32_t)(mult.long_long >> 31);
   19874:	ea4f 70d0 	mov.w	r0, r0, lsr #31
   19878:	ea40 004a 	orr.w	r0, r0, sl, lsl #1
        result++;
   1987c:	bfb8      	it	lt
   1987e:	f10e 0e01 	addlt.w	lr, lr, #1
    q31_t threshold = remainder_mask >> 1;
   19882:	fa50 fa05 	asrs.w	sl, r0, r5
    int32_t remainder = remainder_mask & dividend;
   19886:	9d02      	ldr	r5, [sp, #8]
   19888:	ea00 0605 	and.w	r6, r0, r5
    q31_t threshold = remainder_mask >> 1;
   1988c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   1988e:	9803      	ldr	r0, [sp, #12]
   19890:	bf4c      	ite	mi
   19892:	46ab      	movmi	fp, r5
   19894:	4683      	movpl	fp, r0
    if (remainder > threshold)
   19896:	45b3      	cmp	fp, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19898:	9810      	ldr	r0, [sp, #64]	@ 0x40
    int32_t remainder = remainder_mask & dividend;
   1989a:	9d06      	ldr	r5, [sp, #24]
        result++;
   1989c:	bfb8      	it	lt
   1989e:	f10a 0a01 	addlt.w	sl, sl, #1
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);
        sum = input_1 + input_2;
   198a2:	44f2      	add	sl, lr
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   198a4:	fa0a fa00 	lsl.w	sl, sl, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   198a8:	469e      	mov	lr, r3
   198aa:	4660      	mov	r0, ip
   198ac:	fbca e009 	smlal	lr, r0, sl, r9
    result = (int32_t)(mult.long_long >> 31);
   198b0:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   198b4:	ea4e 0e40 	orr.w	lr, lr, r0, lsl #1
    q31_t threshold = remainder_mask >> 1;
   198b8:	fa5e f007 	asrs.w	r0, lr, r7
    int32_t remainder = remainder_mask & dividend;
   198bc:	ea05 0e0e 	and.w	lr, r5, lr
    q31_t threshold = remainder_mask >> 1;
   198c0:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
        sum = arm_nn_requantize(sum, out_mult, out_shift);
        sum = MAX(sum, out_activation_min);
        sum = MIN(sum, out_activation_max);
        sum_1 = (int16_t)sum;

        input_1 = (int16_t)(two_halfword_1 >> 16) << left_shift;
   198c4:	ea4f 4121 	mov.w	r1, r1, asr #16
   198c8:	bf48      	it	mi
   198ca:	46aa      	movmi	sl, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   198cc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
    q31_t threshold = remainder_mask >> 1;
   198ce:	bf58      	it	pl
   198d0:	46b2      	movpl	sl, r6
   198d2:	40a1      	lsls	r1, r4
    if (remainder > threshold)
   198d4:	45f2      	cmp	sl, lr
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   198d6:	fa01 f105 	lsl.w	r1, r1, r5
        sum = MAX(sum, out_activation_min);
   198da:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
    q31_t threshold = remainder_mask >> 1;
   198dc:	9e05      	ldr	r6, [sp, #20]
        result++;
   198de:	bfb8      	it	lt
   198e0:	3001      	addlt	r0, #1
   198e2:	42a8      	cmp	r0, r5
   198e4:	bfb8      	it	lt
   198e6:	4628      	movlt	r0, r5
        sum = MIN(sum, out_activation_max);
   198e8:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
   198ea:	42a8      	cmp	r0, r5
   198ec:	bfa8      	it	ge
   198ee:	4628      	movge	r0, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   198f0:	9d01      	ldr	r5, [sp, #4]
   198f2:	469e      	mov	lr, r3
   198f4:	46e2      	mov	sl, ip
   198f6:	fbc1 ea05 	smlal	lr, sl, r1, r5
    result = (int32_t)(mult.long_long >> 31);
   198fa:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    int32_t remainder = remainder_mask & dividend;
   198fe:	9d04      	ldr	r5, [sp, #16]
    q31_t threshold = remainder_mask >> 1;
   19900:	990a      	ldr	r1, [sp, #40]	@ 0x28
    result = (int32_t)(mult.long_long >> 31);
   19902:	ea4e 0e4a 	orr.w	lr, lr, sl, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19906:	fa5e f101 	asrs.w	r1, lr, r1
    int32_t remainder = remainder_mask & dividend;
   1990a:	ea05 0e0e 	and.w	lr, r5, lr
    q31_t threshold = remainder_mask >> 1;
   1990e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
   19910:	bf54      	ite	pl
   19912:	46b2      	movpl	sl, r6
   19914:	46aa      	movmi	sl, r5
    if (remainder > threshold)
   19916:	45f2      	cmp	sl, lr
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);
        input_2 = (int16_t)(two_halfword_2 >> 16) << left_shift;
   19918:	ea4f 4a22 	mov.w	sl, r2, asr #16
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1991c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    q31_t threshold = remainder_mask >> 1;
   1991e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
   19920:	fa0a fa04 	lsl.w	sl, sl, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19924:	fa0a fa02 	lsl.w	sl, sl, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19928:	46e6      	mov	lr, ip
   1992a:	461a      	mov	r2, r3
   1992c:	fbca 2e08 	smlal	r2, lr, sl, r8
    result = (int32_t)(mult.long_long >> 31);
   19930:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   19934:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
        result++;
   19938:	bfb8      	it	lt
   1993a:	3101      	addlt	r1, #1
    q31_t threshold = remainder_mask >> 1;
   1993c:	fa52 fe05 	asrs.w	lr, r2, r5
    int32_t remainder = remainder_mask & dividend;
   19940:	9d02      	ldr	r5, [sp, #8]
   19942:	ea02 0205 	and.w	r2, r2, r5
    q31_t threshold = remainder_mask >> 1;
   19946:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   19948:	9e03      	ldr	r6, [sp, #12]
   1994a:	bf4c      	ite	mi
   1994c:	46aa      	movmi	sl, r5
   1994e:	46b2      	movpl	sl, r6
    if (remainder > threshold)
   19950:	4592      	cmp	sl, r2
        result++;
   19952:	bfb8      	it	lt
   19954:	f10e 0e01 	addlt.w	lr, lr, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19958:	9a10      	ldr	r2, [sp, #64]	@ 0x40
    int32_t remainder = remainder_mask & dividend;
   1995a:	9d06      	ldr	r5, [sp, #24]
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);
        sum = input_1 + input_2;
   1995c:	448e      	add	lr, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1995e:	fa0e fe02 	lsl.w	lr, lr, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19962:	4661      	mov	r1, ip
   19964:	461a      	mov	r2, r3
   19966:	fbce 2109 	smlal	r2, r1, lr, r9
    result = (int32_t)(mult.long_long >> 31);
   1996a:	0fd2      	lsrs	r2, r2, #31
   1996c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19970:	fa52 f107 	asrs.w	r1, r2, r7
    int32_t remainder = remainder_mask & dividend;
   19974:	ea02 0205 	and.w	r2, r2, r5
    q31_t threshold = remainder_mask >> 1;
   19978:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
   1997c:	bf4c      	ite	mi
   1997e:	46ae      	movmi	lr, r5
   19980:	46b6      	movpl	lr, r6
    if (remainder > threshold)
   19982:	4596      	cmp	lr, r2
        sum = arm_nn_requantize(sum, out_mult, out_shift);
        sum = MAX(sum, out_activation_min);
   19984:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
        result++;
   19986:	bfb8      	it	lt
   19988:	3101      	addlt	r1, #1
   1998a:	4291      	cmp	r1, r2
   1998c:	bfb8      	it	lt
   1998e:	4611      	movlt	r1, r2
        sum = MIN(sum, out_activation_max);
   19990:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
        sum_1 = (int16_t)sum;
   19992:	b200      	sxth	r0, r0
        sum = MIN(sum, out_activation_max);
   19994:	4291      	cmp	r1, r2
   19996:	bfa8      	it	ge
   19998:	4611      	movge	r1, r2
        sum_2 = (int16_t)sum;

        arm_nn_write_q15x2_ia(&output, PACK_Q15x2_32x1(sum_1, sum_2));
   1999a:	b280      	uxth	r0, r0
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;

    memcpy(*dest_q15, &val, 4);
   1999c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   1999e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   199a2:	f842 0b04 	str.w	r0, [r2], #4
   199a6:	9225      	str	r2, [sp, #148]	@ 0x94
    while (loop_count > 0)
   199a8:	9925      	ldr	r1, [sp, #148]	@ 0x94
   199aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   199ac:	428a      	cmp	r2, r1
   199ae:	f47f af31 	bne.w	19814 <arm_elementwise_add_s16+0xb8>
   199b2:	e9dd 2e13 	ldrd	r2, lr, [sp, #76]	@ 0x4c
   199b6:	f8cd 909c 	str.w	r9, [sp, #156]	@ 0x9c
   199ba:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
   199be:	9820      	ldr	r0, [sp, #128]	@ 0x80
   199c0:	f8dd b0ac 	ldr.w	fp, [sp, #172]	@ 0xac
   199c4:	46c1      	mov	r9, r8
   199c6:	f8dd 809c 	ldr.w	r8, [sp, #156]	@ 0x9c
   199ca:	4492      	add	sl, r2
   199cc:	4496      	add	lr, r2

        loop_count--;
    }
    loop_count = block_size & 0x1;

    while (loop_count > 0)
   199ce:	f01b 0f01 	tst.w	fp, #1
   199d2:	d06e      	beq.n	19ab2 <arm_elementwise_add_s16+0x356>
    {
        /* C = A + B */
        input_1 = *input_1_vect++ << left_shift;
        input_2 = *input_2_vect++ << left_shift;
   199d4:	f9ba 3000 	ldrsh.w	r3, [sl]
        input_1 = *input_1_vect++ << left_shift;
   199d8:	f9be 2000 	ldrsh.w	r2, [lr]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   199dc:	9d01      	ldr	r5, [sp, #4]
   199de:	40a2      	lsls	r2, r4
        input_2 = *input_2_vect++ << left_shift;
   199e0:	fa03 f404 	lsl.w	r4, r3, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   199e4:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   199e8:	409a      	lsls	r2, r3
   199ea:	4240      	negs	r0, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   199ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   199f0:	2100      	movs	r1, #0
   199f2:	fbc2 3105 	smlal	r3, r1, r2, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   199f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   199fa:	2201      	movs	r2, #1
   199fc:	4082      	lsls	r2, r0
    result = (int32_t)(mult.long_long >> 31);
   199fe:	0fdb      	lsrs	r3, r3, #31
   19a00:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19a04:	3a01      	subs	r2, #1
    q31_t threshold = remainder_mask >> 1;
   19a06:	1051      	asrs	r1, r2, #1
    int32_t remainder = remainder_mask & dividend;
   19a08:	ea03 0502 	and.w	r5, r3, r2
    if (result < 0)
   19a0c:	fa53 f200 	asrs.w	r2, r3, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a10:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   19a12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19a16:	fa04 f403 	lsl.w	r4, r4, r3
   19a1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
        threshold++;
   19a1c:	bf48      	it	mi
   19a1e:	3101      	addmi	r1, #1
    if (remainder > threshold)
   19a20:	428d      	cmp	r5, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a22:	f1c3 0000 	rsb	r0, r3, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19a26:	f04f 0100 	mov.w	r1, #0
   19a2a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   19a2e:	fbc4 3109 	smlal	r3, r1, r4, r9
    result = (int32_t)(mult.long_long >> 31);
   19a32:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    result = (int32_t)(mult.long_long >> 31);
   19a3a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19a3e:	f04f 0101 	mov.w	r1, #1
   19a42:	fa01 f100 	lsl.w	r1, r1, r0
   19a46:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
        result++;
   19a4a:	bfc8      	it	gt
   19a4c:	3201      	addgt	r2, #1
    int32_t remainder = remainder_mask & dividend;
   19a4e:	ea03 0401 	and.w	r4, r3, r1
    if (result < 0)
   19a52:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
   19a54:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   19a58:	bf48      	it	mi
   19a5a:	3101      	addmi	r1, #1
    if (remainder > threshold)
   19a5c:	428c      	cmp	r4, r1
        result++;
   19a5e:	bfc8      	it	gt
   19a60:	3301      	addgt	r3, #1

        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   19a62:	4413      	add	r3, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a64:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
   19a66:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   19a6a:	4093      	lsls	r3, r2
   19a6c:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19a6e:	2000      	movs	r0, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a70:	4251      	negs	r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19a72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   19a76:	fbc3 2008 	smlal	r2, r0, r3, r8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19a7a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    result = (int32_t)(mult.long_long >> 31);
   19a7e:	0fd3      	lsrs	r3, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   19a80:	2201      	movs	r2, #1
   19a82:	408a      	lsls	r2, r1
    result = (int32_t)(mult.long_long >> 31);
   19a84:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19a88:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
   19a8a:	ea03 0002 	and.w	r0, r3, r2
    if (result < 0)
   19a8e:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
   19a90:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   19a94:	bf48      	it	mi
   19a96:	3201      	addmi	r2, #1
    if (remainder > threshold)
   19a98:	4290      	cmp	r0, r2
        sum = arm_nn_requantize(sum, out_mult, out_shift);

        sum = MAX(sum, out_activation_min);
   19a9a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
        result++;
   19a9c:	bfc8      	it	gt
   19a9e:	3301      	addgt	r3, #1
   19aa0:	4293      	cmp	r3, r2
   19aa2:	bfb8      	it	lt
   19aa4:	4613      	movlt	r3, r2
        sum = MIN(sum, out_activation_max);
   19aa6:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
   19aa8:	4293      	cmp	r3, r2
   19aaa:	bfa8      	it	ge
   19aac:	4613      	movge	r3, r2

        *output++ = (int16_t)sum;
   19aae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   19ab0:	8013      	strh	r3, [r2, #0]
        /* Decrement loop counter */
        loop_count--;
    }

    return (ARM_CMSIS_NN_SUCCESS);
}
   19ab2:	2000      	movs	r0, #0
   19ab4:	b017      	add	sp, #92	@ 0x5c
   19ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (loop_count > 0)
   19aba:	9512      	str	r5, [sp, #72]	@ 0x48
   19abc:	e787      	b.n	199ce <arm_elementwise_add_s16+0x272>
   19abe:	bf00      	nop

00019ac0 <arm_elementwise_add_s8>:
                                           const int32_t out_mult,
                                           const int32_t out_shift,
                                           const int32_t out_activation_min,
                                           const int32_t out_activation_max,
                                           const int32_t block_size)
{
   19ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ac4:	b09b      	sub	sp, #108	@ 0x6c
   19ac6:	e9dd 9e2b 	ldrd	r9, lr, [sp, #172]	@ 0xac
   19aca:	9301      	str	r3, [sp, #4]

    int32_t offset_1_packed, offset_2_packed;

    int8_t r1, r2, r3, r4;

    offset_1_packed = (input_1_offset << 16U) | (input_1_offset & 0x0FFFFL);
   19acc:	b293      	uxth	r3, r2
   19ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   19ad2:	9315      	str	r3, [sp, #84]	@ 0x54
    offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);
   19ad4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
{
   19ad6:	9217      	str	r2, [sp, #92]	@ 0x5c
    offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);
   19ad8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
{
   19ada:	9010      	str	r0, [sp, #64]	@ 0x40
    offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);
   19adc:	b29b      	uxth	r3, r3
   19ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   19ae2:	9316      	str	r3, [sp, #88]	@ 0x58

    loop_count = block_size >> 2;
   19ae4:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
{
   19ae6:	f8dd c090 	ldr.w	ip, [sp, #144]	@ 0x90
   19aea:	9d28      	ldr	r5, [sp, #160]	@ 0xa0
   19aec:	9118      	str	r1, [sp, #96]	@ 0x60
    loop_count = block_size >> 2;
   19aee:	109b      	asrs	r3, r3, #2

    while (loop_count > 0)
   19af0:	2b00      	cmp	r3, #0
{
   19af2:	e9dd b026 	ldrd	fp, r0, [sp, #152]	@ 0x98
    while (loop_count > 0)
   19af6:	f340 82b5 	ble.w	1a064 <arm_elementwise_add_s8+0x5a4>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19afa:	f1cc 0800 	rsb	r8, ip, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   19afe:	2201      	movs	r2, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19b00:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
   19b04:	4247      	negs	r7, r0
   19b06:	f1ce 0600 	rsb	r6, lr, #0
   19b0a:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   19b0e:	468a      	mov	sl, r1
   19b10:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   19b14:	fa02 f108 	lsl.w	r1, r2, r8
   19b18:	1e4c      	subs	r4, r1, #1
   19b1a:	fa02 f107 	lsl.w	r1, r2, r7
   19b1e:	40b2      	lsls	r2, r6
   19b20:	3a01      	subs	r2, #1
   19b22:	9202      	str	r2, [sp, #8]
    q31_t threshold = remainder_mask >> 1;
   19b24:	9a02      	ldr	r2, [sp, #8]
    const q31_t remainder_mask = (1 << exponent) - 1;
   19b26:	9408      	str	r4, [sp, #32]
    q31_t threshold = remainder_mask >> 1;
   19b28:	1052      	asrs	r2, r2, #1
   19b2a:	9203      	str	r2, [sp, #12]
        threshold++;
   19b2c:	9a03      	ldr	r2, [sp, #12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19b2e:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
    const q31_t remainder_mask = (1 << exponent) - 1;
   19b32:	3901      	subs	r1, #1
    q31_t threshold = remainder_mask >> 1;
   19b34:	1064      	asrs	r4, r4, #1
        threshold++;
   19b36:	3201      	adds	r2, #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19b38:	9105      	str	r1, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
   19b3a:	9409      	str	r4, [sp, #36]	@ 0x24
   19b3c:	1049      	asrs	r1, r1, #1
        threshold++;
   19b3e:	3401      	adds	r4, #1
   19b40:	940a      	str	r4, [sp, #40]	@ 0x28
   19b42:	9204      	str	r2, [sp, #16]
   19b44:	1c4c      	adds	r4, r1, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19b46:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
        threshold++;
   19b4a:	9407      	str	r4, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19b4c:	920b      	str	r2, [sp, #44]	@ 0x2c
   19b4e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
    q31_t threshold = remainder_mask >> 1;
   19b50:	9106      	str	r1, [sp, #24]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19b52:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
   19b56:	920c      	str	r2, [sp, #48]	@ 0x30
   19b58:	ea2c 72ec 	bic.w	r2, ip, ip, asr #31
   19b5c:	920d      	str	r2, [sp, #52]	@ 0x34
   19b5e:	009a      	lsls	r2, r3, #2
   19b60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   19b64:	9314      	str	r3, [sp, #80]	@ 0x50
   19b66:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
   19b68:	9312      	str	r3, [sp, #72]	@ 0x48
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19b6a:	e9cd 670e 	strd	r6, r7, [sp, #56]	@ 0x38
   19b6e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   19b72:	2400      	movs	r4, #0
   19b74:	9219      	str	r2, [sp, #100]	@ 0x64
   19b76:	464f      	mov	r7, r9
    memcpy(&val, *in_q7, 4);
   19b78:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   19b7a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
   19b7c:	f852 1b04 	ldr.w	r1, [r2], #4
   19b80:	9210      	str	r2, [sp, #64]	@ 0x40
   19b82:	f850 2b04 	ldr.w	r2, [r0], #4
   19b86:	9013      	str	r0, [sp, #76]	@ 0x4c
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
   19b88:	ea4f 2c31 	mov.w	ip, r1, ror #8
   19b8c:	ea4f 2032 	mov.w	r0, r2, ror #8

__STATIC_FORCEINLINE uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   19b90:	9e15      	ldr	r6, [sp, #84]	@ 0x54

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   19b92:	fa2f f181 	sxtb16	r1, r1
   19b96:	fa2f fc8c 	sxtb16	ip, ip
   19b9a:	fa2f f282 	sxtb16	r2, r2
   19b9e:	fa2f f080 	sxtb16	r0, r0
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   19ba2:	fa9c fc06 	sadd16	ip, ip, r6
   19ba6:	fa91 f106 	sadd16	r1, r1, r6
   19baa:	9e16      	ldr	r6, [sp, #88]	@ 0x58
   19bac:	fa90 f006 	sadd16	r0, r0, r6
   19bb0:	fa92 f206 	sadd16	r2, r2, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19bb4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   19bb6:	9211      	str	r2, [sp, #68]	@ 0x44

        a_2 = __SADD16(a_2, offset_2_packed);
        b_2 = __SADD16(b_2, offset_2_packed);

        /* Sum 1 */
        input_1 = (b_1 & 0x0FFFF) << left_shift;
   19bb8:	fa1f fa81 	uxth.w	sl, r1
   19bbc:	fa0a fa05 	lsl.w	sl, sl, r5
   19bc0:	fa0a fa06 	lsl.w	sl, sl, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19bc4:	9e01      	ldr	r6, [sp, #4]

        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);

        input_2 = (b_2 & 0x0FFFF) << left_shift;
   19bc6:	f8bd b044 	ldrh.w	fp, [sp, #68]	@ 0x44
   19bca:	469e      	mov	lr, r3
   19bcc:	46a1      	mov	r9, r4
   19bce:	fbca e906 	smlal	lr, r9, sl, r6
    result = (int32_t)(mult.long_long >> 31);
   19bd2:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    int32_t remainder = remainder_mask & dividend;
   19bd6:	9e08      	ldr	r6, [sp, #32]
    result = (int32_t)(mult.long_long >> 31);
   19bd8:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19bdc:	fa5e f908 	asrs.w	r9, lr, r8
    int32_t remainder = remainder_mask & dividend;
   19be0:	ea0e 0e06 	and.w	lr, lr, r6
    q31_t threshold = remainder_mask >> 1;
   19be4:	e9dd 2609 	ldrd	r2, r6, [sp, #36]	@ 0x24
   19be8:	bf58      	it	pl
   19bea:	4692      	movpl	sl, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19bec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   19bee:	fa0b fb05 	lsl.w	fp, fp, r5
   19bf2:	fa0b fb02 	lsl.w	fp, fp, r2
    q31_t threshold = remainder_mask >> 1;
   19bf6:	bf48      	it	mi
   19bf8:	46b2      	movmi	sl, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19bfa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
    if (remainder > threshold)
   19bfc:	45d6      	cmp	lr, sl
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19bfe:	469e      	mov	lr, r3
   19c00:	46a2      	mov	sl, r4
   19c02:	fbcb ea02 	smlal	lr, sl, fp, r2
    result = (int32_t)(mult.long_long >> 31);
   19c06:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    q31_t threshold = remainder_mask >> 1;
   19c0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    result = (int32_t)(mult.long_long >> 31);
   19c0c:	ea4e 0e4a 	orr.w	lr, lr, sl, lsl #1
        result++;
   19c10:	bfc8      	it	gt
   19c12:	f109 0901 	addgt.w	r9, r9, #1
    q31_t threshold = remainder_mask >> 1;
   19c16:	fa5e fa02 	asrs.w	sl, lr, r2
    int32_t remainder = remainder_mask & dividend;
   19c1a:	9a05      	ldr	r2, [sp, #20]
   19c1c:	ea0e 0e02 	and.w	lr, lr, r2
    q31_t threshold = remainder_mask >> 1;
   19c20:	e9dd 6206 	ldrd	r6, r2, [sp, #24]
   19c24:	bf4c      	ite	mi
   19c26:	4693      	movmi	fp, r2
   19c28:	46b3      	movpl	fp, r6
    if (remainder > threshold)
   19c2a:	45de      	cmp	lr, fp
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19c2c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        result++;
   19c2e:	bfc8      	it	gt
   19c30:	f10a 0a01 	addgt.w	sl, sl, #1
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   19c34:	44ca      	add	sl, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19c36:	fa0a fa02 	lsl.w	sl, sl, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19c3a:	469e      	mov	lr, r3
   19c3c:	46a1      	mov	r9, r4
   19c3e:	fbca e907 	smlal	lr, r9, sl, r7
    q31_t threshold = remainder_mask >> 1;
   19c42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    result = (int32_t)(mult.long_long >> 31);
   19c44:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   19c48:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19c4c:	fa5e f902 	asrs.w	r9, lr, r2
    int32_t remainder = remainder_mask & dividend;
   19c50:	9a02      	ldr	r2, [sp, #8]
   19c52:	ea0e 0e02 	and.w	lr, lr, r2
    q31_t threshold = remainder_mask >> 1;
   19c56:	e9dd 6203 	ldrd	r6, r2, [sp, #12]
        sum = MAX(sum, out_activation_min);
        sum = MIN(sum, out_activation_max);
        r1 = (q7_t)sum;

        /* Sum 3 */
        input_1 = ((b_1 >> 16) & 0x0FFFF) << left_shift;
   19c5a:	ea4f 4111 	mov.w	r1, r1, lsr #16
   19c5e:	bf48      	it	mi
   19c60:	4692      	movmi	sl, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19c62:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    q31_t threshold = remainder_mask >> 1;
   19c64:	bf58      	it	pl
   19c66:	46b2      	movpl	sl, r6
   19c68:	40a9      	lsls	r1, r5
    if (remainder > threshold)
   19c6a:	45d6      	cmp	lr, sl
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19c6c:	fa01 f102 	lsl.w	r1, r1, r2
        sum += out_offset;
   19c70:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
        result++;
   19c72:	bfc8      	it	gt
   19c74:	f109 0901 	addgt.w	r9, r9, #1
   19c78:	4491      	add	r9, r2
        sum = MAX(sum, out_activation_min);
   19c7a:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   19c7c:	4591      	cmp	r9, r2
   19c7e:	bfb8      	it	lt
   19c80:	4691      	movlt	r9, r2
        sum = MIN(sum, out_activation_max);
   19c82:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
   19c84:	4591      	cmp	r9, r2
   19c86:	bfa8      	it	ge
   19c88:	4691      	movge	r9, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19c8a:	9a01      	ldr	r2, [sp, #4]
        r1 = (q7_t)sum;
   19c8c:	fa4f fb89 	sxtb.w	fp, r9
   19c90:	469e      	mov	lr, r3
   19c92:	46a1      	mov	r9, r4
   19c94:	fbc1 e902 	smlal	lr, r9, r1, r2
    result = (int32_t)(mult.long_long >> 31);
   19c98:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    int32_t remainder = remainder_mask & dividend;
   19c9c:	9a08      	ldr	r2, [sp, #32]
    result = (int32_t)(mult.long_long >> 31);
   19c9e:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19ca2:	fa5e f108 	asrs.w	r1, lr, r8
    int32_t remainder = remainder_mask & dividend;
   19ca6:	ea0e 0e02 	and.w	lr, lr, r2
    q31_t threshold = remainder_mask >> 1;
   19caa:	e9dd 6209 	ldrd	r6, r2, [sp, #36]	@ 0x24
   19cae:	bf48      	it	mi
   19cb0:	4691      	movmi	r9, r2
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);

        input_2 = ((b_2 >> 16) & 0x0FFFF) << left_shift;
   19cb2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   19cb4:	bf58      	it	pl
   19cb6:	46b1      	movpl	r9, r6
    if (remainder > threshold)
   19cb8:	45ce      	cmp	lr, r9
   19cba:	ea4f 4912 	mov.w	r9, r2, lsr #16
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19cbe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19cc0:	9e26      	ldr	r6, [sp, #152]	@ 0x98
   19cc2:	fa09 f905 	lsl.w	r9, r9, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19cc6:	fa09 f902 	lsl.w	r9, r9, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19cca:	46a6      	mov	lr, r4
   19ccc:	461a      	mov	r2, r3
   19cce:	fbc9 2e06 	smlal	r2, lr, r9, r6
    result = (int32_t)(mult.long_long >> 31);
   19cd2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    q31_t threshold = remainder_mask >> 1;
   19cd6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
    result = (int32_t)(mult.long_long >> 31);
   19cd8:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
        result++;
   19cdc:	bfc8      	it	gt
   19cde:	3101      	addgt	r1, #1
    q31_t threshold = remainder_mask >> 1;
   19ce0:	fa52 fe06 	asrs.w	lr, r2, r6
    int32_t remainder = remainder_mask & dividend;
   19ce4:	9e05      	ldr	r6, [sp, #20]
   19ce6:	ea02 0a06 	and.w	sl, r2, r6
    q31_t threshold = remainder_mask >> 1;
   19cea:	e9dd 2606 	ldrd	r2, r6, [sp, #24]
   19cee:	bf4c      	ite	mi
   19cf0:	46b1      	movmi	r9, r6
   19cf2:	4691      	movpl	r9, r2
    if (remainder > threshold)
   19cf4:	45ca      	cmp	sl, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19cf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    int32_t remainder = remainder_mask & dividend;
   19cf8:	9e02      	ldr	r6, [sp, #8]
        result++;
   19cfa:	bfc8      	it	gt
   19cfc:	f10e 0e01 	addgt.w	lr, lr, #1
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   19d00:	448e      	add	lr, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19d02:	fa0e fe02 	lsl.w	lr, lr, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19d06:	4619      	mov	r1, r3
   19d08:	4622      	mov	r2, r4
   19d0a:	fbce 1207 	smlal	r1, r2, lr, r7
    result = (int32_t)(mult.long_long >> 31);
   19d0e:	0fc9      	lsrs	r1, r1, #31
   19d10:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19d14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    int32_t remainder = remainder_mask & dividend;
   19d16:	ea01 0906 	and.w	r9, r1, r6
    q31_t threshold = remainder_mask >> 1;
   19d1a:	fa51 f202 	asrs.w	r2, r1, r2
   19d1e:	e9dd 1603 	ldrd	r1, r6, [sp, #12]
   19d22:	bf4c      	ite	mi
   19d24:	46b6      	movmi	lr, r6
   19d26:	468e      	movpl	lr, r1
    if (remainder > threshold)
   19d28:	45f1      	cmp	r9, lr
        sum = arm_nn_requantize(sum, out_mult, out_shift);
        sum += out_offset;
   19d2a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19d2c:	9e01      	ldr	r6, [sp, #4]
        result++;
   19d2e:	bfc8      	it	gt
   19d30:	3201      	addgt	r2, #1
   19d32:	440a      	add	r2, r1
        sum = MAX(sum, out_activation_min);
   19d34:	992d      	ldr	r1, [sp, #180]	@ 0xb4
   19d36:	428a      	cmp	r2, r1
   19d38:	bfb8      	it	lt
   19d3a:	460a      	movlt	r2, r1
        sum = MIN(sum, out_activation_max);
   19d3c:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   19d3e:	428a      	cmp	r2, r1
   19d40:	bfa8      	it	ge
   19d42:	460a      	movge	r2, r1
        r3 = (q7_t)sum;

        /* Sum 2 */
        input_1 = (a_1 & 0x0FFFF) << left_shift;
   19d44:	fa1f f98c 	uxth.w	r9, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19d48:	990d      	ldr	r1, [sp, #52]	@ 0x34
   19d4a:	fa09 f905 	lsl.w	r9, r9, r5
   19d4e:	fa09 f901 	lsl.w	r9, r9, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19d52:	46a6      	mov	lr, r4
   19d54:	4619      	mov	r1, r3
   19d56:	fbc9 1e06 	smlal	r1, lr, r9, r6
    result = (int32_t)(mult.long_long >> 31);
   19d5a:	0fc9      	lsrs	r1, r1, #31
    int32_t remainder = remainder_mask & dividend;
   19d5c:	9e08      	ldr	r6, [sp, #32]
        r3 = (q7_t)sum;
   19d5e:	b252      	sxtb	r2, r2
    result = (int32_t)(mult.long_long >> 31);
   19d60:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19d64:	fa51 fe08 	asrs.w	lr, r1, r8
   19d68:	9211      	str	r2, [sp, #68]	@ 0x44
    int32_t remainder = remainder_mask & dividend;
   19d6a:	ea01 0106 	and.w	r1, r1, r6
    q31_t threshold = remainder_mask >> 1;
   19d6e:	e9dd 2609 	ldrd	r2, r6, [sp, #36]	@ 0x24
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);

        input_2 = (a_2 & 0x0FFFF) << left_shift;
   19d72:	fa1f fa80 	uxth.w	sl, r0
   19d76:	bf58      	it	pl
   19d78:	4691      	movpl	r9, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19d7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   19d7c:	fa0a fa05 	lsl.w	sl, sl, r5
   19d80:	fa0a fa02 	lsl.w	sl, sl, r2
    q31_t threshold = remainder_mask >> 1;
   19d84:	bf48      	it	mi
   19d86:	46b1      	movmi	r9, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19d88:	9a26      	ldr	r2, [sp, #152]	@ 0x98
    if (remainder > threshold)
   19d8a:	4549      	cmp	r1, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19d8c:	4619      	mov	r1, r3
   19d8e:	46a1      	mov	r9, r4
   19d90:	fbca 1902 	smlal	r1, r9, sl, r2
    result = (int32_t)(mult.long_long >> 31);
   19d94:	ea4f 71d1 	mov.w	r1, r1, lsr #31
    q31_t threshold = remainder_mask >> 1;
   19d98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    result = (int32_t)(mult.long_long >> 31);
   19d9a:	ea41 0149 	orr.w	r1, r1, r9, lsl #1
        result++;
   19d9e:	bfc8      	it	gt
   19da0:	f10e 0e01 	addgt.w	lr, lr, #1
    q31_t threshold = remainder_mask >> 1;
   19da4:	fa51 f902 	asrs.w	r9, r1, r2
    int32_t remainder = remainder_mask & dividend;
   19da8:	9a05      	ldr	r2, [sp, #20]
   19daa:	ea01 0102 	and.w	r1, r1, r2
    q31_t threshold = remainder_mask >> 1;
   19dae:	e9dd 6206 	ldrd	r6, r2, [sp, #24]
   19db2:	bf4c      	ite	mi
   19db4:	4692      	movmi	sl, r2
   19db6:	46b2      	movpl	sl, r6
    if (remainder > threshold)
   19db8:	4551      	cmp	r1, sl
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19dba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        result++;
   19dbc:	bfc8      	it	gt
   19dbe:	f109 0901 	addgt.w	r9, r9, #1
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   19dc2:	44f1      	add	r9, lr
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19dc4:	fa09 f902 	lsl.w	r9, r9, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19dc8:	469e      	mov	lr, r3
   19dca:	4621      	mov	r1, r4
   19dcc:	fbc9 e107 	smlal	lr, r1, r9, r7
    q31_t threshold = remainder_mask >> 1;
   19dd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    result = (int32_t)(mult.long_long >> 31);
   19dd2:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   19dd6:	ea4e 0e41 	orr.w	lr, lr, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19dda:	fa5e f102 	asrs.w	r1, lr, r2
    int32_t remainder = remainder_mask & dividend;
   19dde:	9a02      	ldr	r2, [sp, #8]
   19de0:	ea0e 0e02 	and.w	lr, lr, r2
    q31_t threshold = remainder_mask >> 1;
   19de4:	e9dd 6203 	ldrd	r6, r2, [sp, #12]
        sum = MAX(sum, out_activation_min);
        sum = MIN(sum, out_activation_max);
        r2 = (q7_t)sum;

        /* Sum 4 */
        input_1 = ((a_1 >> 16) & 0x0FFFF) << left_shift;
   19de8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   19dec:	bf48      	it	mi
   19dee:	4691      	movmi	r9, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19df0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    q31_t threshold = remainder_mask >> 1;
   19df2:	bf58      	it	pl
   19df4:	46b1      	movpl	r9, r6
   19df6:	fa0c fc05 	lsl.w	ip, ip, r5
    if (remainder > threshold)
   19dfa:	45ce      	cmp	lr, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19dfc:	fa0c fc02 	lsl.w	ip, ip, r2
        sum += out_offset;
   19e00:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
        result++;
   19e02:	bfc8      	it	gt
   19e04:	3101      	addgt	r1, #1
   19e06:	4411      	add	r1, r2
        sum = MAX(sum, out_activation_min);
   19e08:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   19e0a:	4291      	cmp	r1, r2
   19e0c:	bfb8      	it	lt
   19e0e:	4611      	movlt	r1, r2
        sum = MIN(sum, out_activation_max);
   19e10:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
   19e12:	4291      	cmp	r1, r2
   19e14:	bfa8      	it	ge
   19e16:	4611      	movge	r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19e18:	9a01      	ldr	r2, [sp, #4]
   19e1a:	469e      	mov	lr, r3
   19e1c:	46a1      	mov	r9, r4
   19e1e:	fbcc e902 	smlal	lr, r9, ip, r2
    result = (int32_t)(mult.long_long >> 31);
   19e22:	ea4f 7ede 	mov.w	lr, lr, lsr #31
    int32_t remainder = remainder_mask & dividend;
   19e26:	9a08      	ldr	r2, [sp, #32]
    result = (int32_t)(mult.long_long >> 31);
   19e28:	ea4e 0e49 	orr.w	lr, lr, r9, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19e2c:	fa5e fc08 	asrs.w	ip, lr, r8
    int32_t remainder = remainder_mask & dividend;
   19e30:	ea0e 0e02 	and.w	lr, lr, r2
    q31_t threshold = remainder_mask >> 1;
   19e34:	e9dd 6209 	ldrd	r6, r2, [sp, #36]	@ 0x24
   19e38:	bf4c      	ite	mi
   19e3a:	4691      	movmi	r9, r2
   19e3c:	46b1      	movpl	r9, r6
    if (remainder > threshold)
   19e3e:	45ce      	cmp	lr, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19e40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);

        input_2 = ((a_2 >> 16) & 0x0FFFF) << left_shift;
   19e42:	ea4f 4910 	mov.w	r9, r0, lsr #16
   19e46:	fa09 f905 	lsl.w	r9, r9, r5
   19e4a:	fa09 f902 	lsl.w	r9, r9, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19e4e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   19e50:	4618      	mov	r0, r3
   19e52:	46a6      	mov	lr, r4
   19e54:	fbc9 0e02 	smlal	r0, lr, r9, r2
    result = (int32_t)(mult.long_long >> 31);
   19e58:	ea4f 70d0 	mov.w	r0, r0, lsr #31
    q31_t threshold = remainder_mask >> 1;
   19e5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    result = (int32_t)(mult.long_long >> 31);
   19e5e:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
        result++;
   19e62:	bfc8      	it	gt
   19e64:	f10c 0c01 	addgt.w	ip, ip, #1
    q31_t threshold = remainder_mask >> 1;
   19e68:	fa50 fe02 	asrs.w	lr, r0, r2
    int32_t remainder = remainder_mask & dividend;
   19e6c:	9a05      	ldr	r2, [sp, #20]
   19e6e:	ea00 0002 	and.w	r0, r0, r2
    q31_t threshold = remainder_mask >> 1;
   19e72:	e9dd 6206 	ldrd	r6, r2, [sp, #24]
   19e76:	bf4c      	ite	mi
   19e78:	4691      	movmi	r9, r2
   19e7a:	46b1      	movpl	r9, r6
    if (remainder > threshold)
   19e7c:	4548      	cmp	r0, r9
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19e7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        result++;
   19e80:	bfc8      	it	gt
   19e82:	f10e 0e01 	addgt.w	lr, lr, #1
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   19e86:	44e6      	add	lr, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19e88:	fa0e fe02 	lsl.w	lr, lr, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19e8c:	4618      	mov	r0, r3
   19e8e:	46a4      	mov	ip, r4
   19e90:	fbce 0c07 	smlal	r0, ip, lr, r7
    q31_t threshold = remainder_mask >> 1;
   19e94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    result = (int32_t)(mult.long_long >> 31);
   19e96:	0fc0      	lsrs	r0, r0, #31
   19e98:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19e9c:	fa50 fc02 	asrs.w	ip, r0, r2
    int32_t remainder = remainder_mask & dividend;
   19ea0:	9a02      	ldr	r2, [sp, #8]
   19ea2:	ea00 0002 	and.w	r0, r0, r2
    q31_t threshold = remainder_mask >> 1;
   19ea6:	e9dd 6203 	ldrd	r6, r2, [sp, #12]
   19eaa:	bf4c      	ite	mi
   19eac:	4696      	movmi	lr, r2
   19eae:	46b6      	movpl	lr, r6
        sum += out_offset;
        sum = MAX(sum, out_activation_min);
        sum = MIN(sum, out_activation_max);
        r4 = (q7_t)sum;

        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19eb0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
    if (remainder > threshold)
   19eb2:	4570      	cmp	r0, lr
        sum += out_offset;
   19eb4:	982a      	ldr	r0, [sp, #168]	@ 0xa8
        result++;
   19eb6:	bfc8      	it	gt
   19eb8:	f10c 0c01 	addgt.w	ip, ip, #1
        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19ebc:	0412      	lsls	r2, r2, #16
        sum += out_offset;
   19ebe:	4484      	add	ip, r0
        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19ec0:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
   19ec4:	fa5f f08b 	uxtb.w	r0, fp
   19ec8:	4310      	orrs	r0, r2
        sum = MAX(sum, out_activation_min);
   19eca:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   19ecc:	4594      	cmp	ip, r2
   19ece:	bfb8      	it	lt
   19ed0:	4694      	movlt	ip, r2
        r2 = (q7_t)sum;
   19ed2:	b249      	sxtb	r1, r1
        sum = MIN(sum, out_activation_max);
   19ed4:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19ed6:	0209      	lsls	r1, r1, #8
        sum = MIN(sum, out_activation_max);
   19ed8:	4594      	cmp	ip, r2
        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19eda:	b289      	uxth	r1, r1
        sum = MIN(sum, out_activation_max);
   19edc:	bfa8      	it	ge
   19ede:	4694      	movge	ip, r2
        arm_nn_write_q7x4_ia(&output, PACK_Q7x4_32x1(r1, r2, r3, r4));
   19ee0:	4301      	orrs	r1, r0
    memcpy(*in, &value, 4);
   19ee2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   19ee4:	ea41 610c 	orr.w	r1, r1, ip, lsl #24
   19ee8:	f842 1b04 	str.w	r1, [r2], #4
    while (loop_count > 0)
   19eec:	9914      	ldr	r1, [sp, #80]	@ 0x50
   19eee:	9212      	str	r2, [sp, #72]	@ 0x48
   19ef0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   19ef2:	428a      	cmp	r2, r1
   19ef4:	f47f ae40 	bne.w	19b78 <arm_elementwise_add_s8+0xb8>
   19ef8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   19efa:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
   19efc:	f8dd c090 	ldr.w	ip, [sp, #144]	@ 0x90
   19f00:	f8dd e0b0 	ldr.w	lr, [sp, #176]	@ 0xb0
   19f04:	4413      	add	r3, r2
   19f06:	9329      	str	r3, [sp, #164]	@ 0xa4
   19f08:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   19f0a:	e9dd b026 	ldrd	fp, r0, [sp, #152]	@ 0x98
   19f0e:	4413      	add	r3, r2
   19f10:	46b9      	mov	r9, r7
   19f12:	9318      	str	r3, [sp, #96]	@ 0x60
    loop_count = block_size & 0x3;
#else
    loop_count = block_size;
#endif

    while (loop_count > 0)
   19f14:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
   19f16:	f013 0303 	ands.w	r3, r3, #3
   19f1a:	f000 809f 	beq.w	1a05c <arm_elementwise_add_s8+0x59c>
   19f1e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19f20:	f8cd 90ac 	str.w	r9, [sp, #172]	@ 0xac
   19f24:	18d3      	adds	r3, r2, r3
   19f26:	9309      	str	r3, [sp, #36]	@ 0x24
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19f28:	ea2c 73ec 	bic.w	r3, ip, ip, asr #31
   19f2c:	930c      	str	r3, [sp, #48]	@ 0x30
   19f2e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   19f32:	f1cc 0700 	rsb	r7, ip, #0
   19f36:	930b      	str	r3, [sp, #44]	@ 0x2c
   19f38:	ea2e 73ee 	bic.w	r3, lr, lr, asr #31
   19f3c:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   19f40:	4246      	negs	r6, r0
   19f42:	930a      	str	r3, [sp, #40]	@ 0x28
    const q31_t remainder_mask = (1 << exponent) - 1;
   19f44:	2301      	movs	r3, #1
   19f46:	fa03 f207 	lsl.w	r2, r3, r7
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19f4a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   19f4e:	f1ce 0a00 	rsb	sl, lr, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
   19f52:	1e51      	subs	r1, r2, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19f54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   19f58:	fa03 f206 	lsl.w	r2, r3, r6
   19f5c:	3a01      	subs	r2, #1
   19f5e:	fa03 f30a 	lsl.w	r3, r3, sl
   19f62:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
    q31_t threshold = remainder_mask >> 1;
   19f66:	1053      	asrs	r3, r2, #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19f68:	9204      	str	r2, [sp, #16]
    q31_t threshold = remainder_mask >> 1;
   19f6a:	ea4f 0861 	mov.w	r8, r1, asr #1
   19f6e:	ea4f 026e 	mov.w	r2, lr, asr #1
   19f72:	9305      	str	r3, [sp, #20]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19f74:	e9cd 670d 	strd	r6, r7, [sp, #52]	@ 0x34
        threshold++;
   19f78:	3301      	adds	r3, #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   19f7a:	9107      	str	r1, [sp, #28]
        threshold++;
   19f7c:	9306      	str	r3, [sp, #24]
   19f7e:	f108 0101 	add.w	r1, r8, #1
   19f82:	1c53      	adds	r3, r2, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19f84:	f8dd c0a4 	ldr.w	ip, [sp, #164]	@ 0xa4
   19f88:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
    q31_t threshold = remainder_mask >> 1;
   19f8c:	9202      	str	r2, [sp, #8]
        threshold++;
   19f8e:	9108      	str	r1, [sp, #32]
   19f90:	9303      	str	r3, [sp, #12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19f92:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
   19f96:	2400      	movs	r4, #0
   19f98:	f8cd b098 	str.w	fp, [sp, #152]	@ 0x98
    {
        /* C = A + B */

        input_1 = (*input_1_vect++ + input_1_offset) << left_shift;
   19f9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   19f9e:	f912 3b01 	ldrsb.w	r3, [r2], #1
   19fa2:	9214      	str	r2, [sp, #80]	@ 0x50
   19fa4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   19fa6:	4413      	add	r3, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19fa8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   19faa:	40ab      	lsls	r3, r5
   19fac:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19fae:	9a01      	ldr	r2, [sp, #4]
   19fb0:	4606      	mov	r6, r0
   19fb2:	4621      	mov	r1, r4
   19fb4:	fbc3 6102 	smlal	r6, r1, r3, r2
    result = (int32_t)(mult.long_long >> 31);
   19fb8:	0ff2      	lsrs	r2, r6, #31
   19fba:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
        input_2 = (*input_2_vect++ + input_2_offset) << left_shift;
   19fbe:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   19fc0:	f919 1b01 	ldrsb.w	r1, [r9], #1
   19fc4:	4419      	add	r1, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   19fc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   19fc8:	40a9      	lsls	r1, r5
   19fca:	4099      	lsls	r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   19fcc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   19fce:	4606      	mov	r6, r0
   19fd0:	46a3      	mov	fp, r4
   19fd2:	fbc1 6b03 	smlal	r6, fp, r1, r3
    result = (int32_t)(mult.long_long >> 31);
   19fd6:	0ff3      	lsrs	r3, r6, #31
    q31_t threshold = remainder_mask >> 1;
   19fd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
    int32_t remainder = remainder_mask & dividend;
   19fda:	9e07      	ldr	r6, [sp, #28]
    q31_t threshold = remainder_mask >> 1;
   19fdc:	fa52 f101 	asrs.w	r1, r2, r1
    int32_t remainder = remainder_mask & dividend;
   19fe0:	ea02 0206 	and.w	r2, r2, r6
    q31_t threshold = remainder_mask >> 1;
   19fe4:	9e08      	ldr	r6, [sp, #32]
    result = (int32_t)(mult.long_long >> 31);
   19fe6:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    q31_t threshold = remainder_mask >> 1;
   19fea:	bf4c      	ite	mi
   19fec:	46b3      	movmi	fp, r6
   19fee:	46c3      	movpl	fp, r8
    if (remainder > threshold)
   19ff0:	4593      	cmp	fp, r2
    int32_t remainder = remainder_mask & dividend;
   19ff2:	9e04      	ldr	r6, [sp, #16]
    q31_t threshold = remainder_mask >> 1;
   19ff4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
        result++;
   19ff6:	bfb8      	it	lt
   19ff8:	3101      	addlt	r1, #1
    q31_t threshold = remainder_mask >> 1;
   19ffa:	fa53 f202 	asrs.w	r2, r3, r2
    int32_t remainder = remainder_mask & dividend;
   19ffe:	ea03 0306 	and.w	r3, r3, r6
    q31_t threshold = remainder_mask >> 1;
   1a002:	e9dd 7605 	ldrd	r7, r6, [sp, #20]
   1a006:	bf4c      	ite	mi
   1a008:	46b3      	movmi	fp, r6
   1a00a:	46bb      	movpl	fp, r7
    if (remainder > threshold)
   1a00c:	459b      	cmp	fp, r3
        result++;
   1a00e:	bfb8      	it	lt
   1a010:	3201      	addlt	r2, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a014:	9e2b      	ldr	r6, [sp, #172]	@ 0xac

        input_1 = arm_nn_requantize(input_1, input_1_mult, input_1_shift);
        input_2 = arm_nn_requantize(input_2, input_2_mult, input_2_shift);

        sum = input_1 + input_2;
   1a016:	440a      	add	r2, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a018:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a01a:	4621      	mov	r1, r4
   1a01c:	4603      	mov	r3, r0
   1a01e:	fbc2 3106 	smlal	r3, r1, r2, r6
    result = (int32_t)(mult.long_long >> 31);
   1a022:	0fdb      	lsrs	r3, r3, #31
   1a024:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
   1a028:	e9dd 6102 	ldrd	r6, r1, [sp, #8]
   1a02c:	fa53 f20a 	asrs.w	r2, r3, sl
   1a030:	bf58      	it	pl
   1a032:	4631      	movpl	r1, r6
    int32_t remainder = remainder_mask & dividend;
   1a034:	ea0e 0303 	and.w	r3, lr, r3
    if (remainder > threshold)
   1a038:	4299      	cmp	r1, r3
        sum = arm_nn_requantize(sum, out_mult, out_shift);
        sum += out_offset;
   1a03a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
        result++;
   1a03c:	bfb8      	it	lt
   1a03e:	3201      	addlt	r2, #1
   1a040:	441a      	add	r2, r3

        sum = MAX(sum, out_activation_min);
   1a042:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1a044:	429a      	cmp	r2, r3
   1a046:	bfb8      	it	lt
   1a048:	461a      	movlt	r2, r3
        sum = MIN(sum, out_activation_max);
   1a04a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   1a04c:	429a      	cmp	r2, r3
   1a04e:	bfa8      	it	ge
   1a050:	461a      	movge	r2, r3

        *output++ = (q7_t)sum;
   1a052:	f80c 2b01 	strb.w	r2, [ip], #1
    while (loop_count > 0)
   1a056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1a058:	4563      	cmp	r3, ip
   1a05a:	d19f      	bne.n	19f9c <arm_elementwise_add_s8+0x4dc>
    }

#endif /* ARM_MATH_MVEI */

    return (ARM_CMSIS_NN_SUCCESS);
}
   1a05c:	2000      	movs	r0, #0
   1a05e:	b01b      	add	sp, #108	@ 0x6c
   1a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (loop_count > 0)
   1a064:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1a066:	9314      	str	r3, [sp, #80]	@ 0x50
   1a068:	e754      	b.n	19f14 <arm_elementwise_add_s8+0x454>
   1a06a:	bf00      	nop

0001a06c <arm_convolve_1_x_n_s8>:
                                          const q7_t *filter_data,
                                          const cmsis_nn_dims *bias_dims,
                                          const int32_t *bias_data,
                                          const cmsis_nn_dims *output_dims,
                                          q7_t *output_data)
{
   1a06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    (void)bias_dims;
    arm_cmsis_nn_status status = ARM_CMSIS_NN_SUCCESS;
    /* The wrapper API is the ultimate reference for argument check */
    if ((input_dims->h != 1) || (output_dims->w % 4 != 0) || conv_params->dilation.w != 1)
   1a070:	685d      	ldr	r5, [r3, #4]
{
   1a072:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
    if ((input_dims->h != 1) || (output_dims->w % 4 != 0) || conv_params->dilation.w != 1)
   1a076:	2d01      	cmp	r5, #1
{
   1a078:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   1a07c:	e9dd e80a 	ldrd	lr, r8, [sp, #40]	@ 0x28
   1a080:	e9dd 940c 	ldrd	r9, r4, [sp, #48]	@ 0x30
    if ((input_dims->h != 1) || (output_dims->w % 4 != 0) || conv_params->dilation.w != 1)
   1a084:	d110      	bne.n	1a0a8 <arm_convolve_1_x_n_s8+0x3c>
   1a086:	68a5      	ldr	r5, [r4, #8]
   1a088:	07ad      	lsls	r5, r5, #30
   1a08a:	d10d      	bne.n	1a0a8 <arm_convolve_1_x_n_s8+0x3c>
   1a08c:	698d      	ldr	r5, [r1, #24]
   1a08e:	2d01      	cmp	r5, #1
   1a090:	d10a      	bne.n	1a0a8 <arm_convolve_1_x_n_s8+0x3c>
        /* Advance to the next batch */
        input_data += (input_x * input_ch);
    }

#else
    status = arm_convolve_s8(ctx,
   1a092:	e9cd 4a0d 	strd	r4, sl, [sp, #52]	@ 0x34
   1a096:	e9cd 890b 	strd	r8, r9, [sp, #44]	@ 0x2c
   1a09a:	e9cd 7e09 	strd	r7, lr, [sp, #36]	@ 0x24
   1a09e:	9608      	str	r6, [sp, #32]
#endif

out:
    /* Return to application */
    return status;
}
   1a0a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    status = arm_convolve_s8(ctx,
   1a0a4:	f000 bc00 	b.w	1a8a8 <arm_convolve_s8>
}
   1a0a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1a0ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a0b0 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if !defined(ARM_MATH_MVEI)
    return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
   1a0b0:	f000 bdd2 	b.w	1ac58 <arm_convolve_s8_get_buffer_size>

0001a0b4 <arm_convolve_1x1_s8_fast>:
                                             const cmsis_nn_dims *bias_dims,
                                             const int32_t *bias_data,
                                             const cmsis_nn_dims *output_dims,
                                             q7_t *output_data)
{
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
   1a0b4:	6908      	ldr	r0, [r1, #16]
   1a0b6:	2800      	cmp	r0, #0
   1a0b8:	d12e      	bne.n	1a118 <arm_convolve_1x1_s8_fast+0x64>
{
   1a0ba:	b530      	push	{r4, r5, lr}
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
   1a0bc:	694c      	ldr	r4, [r1, #20]
{
   1a0be:	b08b      	sub	sp, #44	@ 0x2c
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
   1a0c0:	bb3c      	cbnz	r4, 1a112 <arm_convolve_1x1_s8_fast+0x5e>
   1a0c2:	6888      	ldr	r0, [r1, #8]
   1a0c4:	2801      	cmp	r0, #1
   1a0c6:	d124      	bne.n	1a112 <arm_convolve_1x1_s8_fast+0x5e>
   1a0c8:	68c8      	ldr	r0, [r1, #12]
   1a0ca:	2801      	cmp	r0, #1
   1a0cc:	d121      	bne.n	1a112 <arm_convolve_1x1_s8_fast+0x5e>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
   1a0ce:	6a48      	ldr	r0, [r1, #36]	@ 0x24
   1a0d0:	9008      	str	r0, [sp, #32]
   1a0d2:	6a08      	ldr	r0, [r1, #32]
   1a0d4:	9007      	str	r0, [sp, #28]
   1a0d6:	e9d1 0500 	ldrd	r0, r5, [r1]
   1a0da:	9506      	str	r5, [sp, #24]
   1a0dc:	e9d3 1502 	ldrd	r1, r5, [r3, #8]
   1a0e0:	e9cd 5004 	strd	r5, r0, [sp, #16]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
   1a0e4:	e9d3 0500 	ldrd	r0, r5, [r3]
   1a0e8:	fb05 f301 	mul.w	r3, r5, r1
    arm_nn_mat_mult_nt_t_s8(input_data,
   1a0ec:	e9d2 2100 	ldrd	r2, r1, [r2]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
   1a0f0:	fb00 f303 	mul.w	r3, r0, r3
    arm_nn_mat_mult_nt_t_s8(input_data,
   1a0f4:	e9cd 1301 	strd	r1, r3, [sp, #4]
   1a0f8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
   1a0fa:	9200      	str	r2, [sp, #0]
   1a0fc:	68ed      	ldr	r5, [r5, #12]
   1a0fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   1a100:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   1a102:	9910      	ldr	r1, [sp, #64]	@ 0x40
   1a104:	980e      	ldr	r0, [sp, #56]	@ 0x38
   1a106:	9503      	str	r5, [sp, #12]
   1a108:	f003 f84a 	bl	1d1a0 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
   1a10c:	4620      	mov	r0, r4
}
   1a10e:	b00b      	add	sp, #44	@ 0x2c
   1a110:	bd30      	pop	{r4, r5, pc}
        return ARM_CMSIS_NN_ARG_ERROR;
   1a112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1a116:	e7fa      	b.n	1a10e <arm_convolve_1x1_s8_fast+0x5a>
   1a118:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
   1a11c:	4770      	bx	lr
   1a11e:	bf00      	nop

0001a120 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
   1a120:	2000      	movs	r0, #0
   1a122:	4770      	bx	lr

0001a124 <arm_convolve_fast_s16>:
                                          const q7_t *filter_data,
                                          const cmsis_nn_dims *bias_dims,
                                          const int64_t *bias_data,
                                          const cmsis_nn_dims *output_dims,
                                          q15_t *output_data)
{
   1a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a128:	b0b1      	sub	sp, #196	@ 0xc4
   1a12a:	461f      	mov	r7, r3
   1a12c:	f8dd 90ec 	ldr.w	r9, [sp, #236]	@ 0xec
   1a130:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
   1a132:	4680      	mov	r8, r0
   1a134:	4615      	mov	r5, r2
    (void)bias_dims;
    if (filter_dims->w * filter_dims->h * input_dims->c >= 512)
   1a136:	68d8      	ldr	r0, [r3, #12]
   1a138:	e9d9 3201 	ldrd	r3, r2, [r9, #4]
{
   1a13c:	460c      	mov	r4, r1
    if (filter_dims->w * filter_dims->h * input_dims->c >= 512)
   1a13e:	fb03 f102 	mul.w	r1, r3, r2
   1a142:	fb00 f101 	mul.w	r1, r0, r1
   1a146:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   1a14a:	9317      	str	r3, [sp, #92]	@ 0x5c
   1a14c:	f280 81da 	bge.w	1a504 <arm_convolve_fast_s16+0x3e0>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
    }

    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1a150:	f8d8 e000 	ldr.w	lr, [r8]
   1a154:	f1be 0f00 	cmp.w	lr, #0
   1a158:	f000 81c7 	beq.w	1a4ea <arm_convolve_fast_s16+0x3c6>
        return ARM_CMSIS_NN_ARG_ERROR;
    }
    q15_t *buffer_a = (q15_t *)ctx->buf;

    const int32_t input_batches = input_dims->n;
    const int32_t input_x = input_dims->w;
   1a15c:	68bb      	ldr	r3, [r7, #8]
   1a15e:	9307      	str	r3, [sp, #28]
    const int32_t input_y = input_dims->h;
    const int32_t input_ch = input_dims->c;
    const int32_t kernel_x = filter_dims->w;
    const int32_t kernel_y = filter_dims->h;
    const int32_t output_x = output_dims->w;
   1a160:	68b3      	ldr	r3, [r6, #8]
   1a162:	9310      	str	r3, [sp, #64]	@ 0x40
    const int32_t output_y = output_dims->h;
   1a164:	6873      	ldr	r3, [r6, #4]
   1a166:	9318      	str	r3, [sp, #96]	@ 0x60
    const int32_t output_ch = output_dims->c;
   1a168:	68f3      	ldr	r3, [r6, #12]
   1a16a:	9316      	str	r3, [sp, #88]	@ 0x58

    const int32_t pad_x = conv_params->padding.w;
   1a16c:	6923      	ldr	r3, [r4, #16]
   1a16e:	931e      	str	r3, [sp, #120]	@ 0x78
    const int32_t pad_y = conv_params->padding.h;
    const int32_t stride_x = conv_params->stride.w;
   1a170:	68a3      	ldr	r3, [r4, #8]
   1a172:	9311      	str	r3, [sp, #68]	@ 0x44
    const int32_t stride_y = conv_params->stride.h;
   1a174:	68e3      	ldr	r3, [r4, #12]
   1a176:	931f      	str	r3, [sp, #124]	@ 0x7c

    const int16_t out_activation_min = conv_params->activation.min;
   1a178:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
    const int32_t input_batches = input_dims->n;
   1a17c:	f8d7 8000 	ldr.w	r8, [r7]
    const int16_t out_activation_min = conv_params->activation.min;
   1a180:	9319      	str	r3, [sp, #100]	@ 0x64
    const int16_t out_activation_max = conv_params->activation.max;
   1a182:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
   1a186:	931a      	str	r3, [sp, #104]	@ 0x68
    int32_t *output_mult = quant_params->multiplier;
   1a188:	682b      	ldr	r3, [r5, #0]
   1a18a:	931b      	str	r3, [sp, #108]	@ 0x6c
    int32_t *output_shift = quant_params->shift;

    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a18c:	f1b8 0f00 	cmp.w	r8, #0
    int32_t *output_shift = quant_params->shift;
   1a190:	686b      	ldr	r3, [r5, #4]
    const int32_t input_y = input_dims->h;
   1a192:	f8d7 9004 	ldr.w	r9, [r7, #4]
    const int32_t pad_y = conv_params->padding.h;
   1a196:	f8d4 c014 	ldr.w	ip, [r4, #20]
    int32_t *output_shift = quant_params->shift;
   1a19a:	931c      	str	r3, [sp, #112]	@ 0x70
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a19c:	f340 815e 	ble.w	1a45c <arm_convolve_fast_s16+0x338>
                        }
                        two_column_buf += input_ch;
                    }
                }
                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a1a0:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
   1a1a2:	9b07      	ldr	r3, [sp, #28]
   1a1a4:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
   1a1a6:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
   1a1aa:	fb07 f100 	mul.w	r1, r7, r0
   1a1ae:	fb02 f501 	mul.w	r5, r2, r1
   1a1b2:	fb0c f103 	mul.w	r1, ip, r3
   1a1b6:	4249      	negs	r1, r1
   1a1b8:	1b89      	subs	r1, r1, r6
   1a1ba:	fb00 f101 	mul.w	r1, r0, r1

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   1a1be:	f3c5 048f 	ubfx	r4, r5, #2, #16
   1a1c2:	0049      	lsls	r1, r1, #1
   1a1c4:	9129      	str	r1, [sp, #164]	@ 0xa4
   1a1c6:	1e61      	subs	r1, r4, #1
   1a1c8:	b289      	uxth	r1, r1
   1a1ca:	9420      	str	r4, [sp, #128]	@ 0x80
   1a1cc:	1c4c      	adds	r4, r1, #1
                    sum = __SMLAD(ker_a2, ip_b2, sum);

                    col_count--;
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   1a1ce:	fb10 f107 	smulbb	r1, r0, r7
   1a1d2:	fb11 f102 	smulbb	r1, r1, r2
   1a1d6:	f001 0103 	and.w	r1, r1, #3
   1a1da:	9125      	str	r1, [sp, #148]	@ 0x94
        (void)output_mult;
        (void)output_shift;
        return ARM_CMSIS_NN_ARG_ERROR;
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
   1a1dc:	fb03 f109 	mul.w	r1, r3, r9
   1a1e0:	fb00 f101 	mul.w	r1, r0, r1
   1a1e4:	0049      	lsls	r1, r1, #1
        output_data += (output_x * output_y * output_ch);
   1a1e6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
        input_data += (input_x * input_y * input_ch);
   1a1e8:	9121      	str	r1, [sp, #132]	@ 0x84
        output_data += (output_x * output_y * output_ch);
   1a1ea:	9918      	ldr	r1, [sp, #96]	@ 0x60
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a1ec:	951d      	str	r5, [sp, #116]	@ 0x74
        output_data += (output_x * output_y * output_ch);
   1a1ee:	fb07 f101 	mul.w	r1, r7, r1
   1a1f2:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   1a1f4:	f8cd e050 	str.w	lr, [sp, #80]	@ 0x50
   1a1f8:	fb07 f101 	mul.w	r1, r7, r1
   1a1fc:	0049      	lsls	r1, r1, #1
   1a1fe:	9123      	str	r1, [sp, #140]	@ 0x8c
   1a200:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   1a202:	fb01 f103 	mul.w	r1, r1, r3
   1a206:	fb00 f101 	mul.w	r1, r0, r1
   1a20a:	0049      	lsls	r1, r1, #1
   1a20c:	9128      	str	r1, [sp, #160]	@ 0xa0
   1a20e:	9911      	ldr	r1, [sp, #68]	@ 0x44
   1a210:	fb01 f100 	mul.w	r1, r1, r0
   1a214:	0049      	lsls	r1, r1, #1
   1a216:	9113      	str	r1, [sp, #76]	@ 0x4c
   1a218:	fb03 f100 	mul.w	r1, r3, r0
   1a21c:	004b      	lsls	r3, r1, #1
   1a21e:	930b      	str	r3, [sp, #44]	@ 0x2c
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a220:	eb0e 0385 	add.w	r3, lr, r5, lsl #2
   1a224:	9312      	str	r3, [sp, #72]	@ 0x48
   1a226:	4273      	negs	r3, r6
   1a228:	9326      	str	r3, [sp, #152]	@ 0x98
   1a22a:	007b      	lsls	r3, r7, #1
   1a22c:	9327      	str	r3, [sp, #156]	@ 0x9c
   1a22e:	00a3      	lsls	r3, r4, #2
   1a230:	9324      	str	r3, [sp, #144]	@ 0x90
   1a232:	eb0e 03c4 	add.w	r3, lr, r4, lsl #3
   1a236:	9322      	str	r3, [sp, #136]	@ 0x88
                            arm_memset_q7((q7_t *)two_column_buf, 0, sizeof(q15_t) * input_ch);
   1a238:	ea4f 0a40 	mov.w	sl, r0, lsl #1
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a23c:	2400      	movs	r4, #0
   1a23e:	4613      	mov	r3, r2
   1a240:	46c8      	mov	r8, r9
   1a242:	4666      	mov	r6, ip
        for (int32_t i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a244:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1a246:	2a00      	cmp	r2, #0
   1a248:	f340 80fb 	ble.w	1a442 <arm_convolve_fast_s16+0x31e>
   1a24c:	9929      	ldr	r1, [sp, #164]	@ 0xa4
   1a24e:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
        q15_t *out = output_data;
   1a250:	f8dd c100 	ldr.w	ip, [sp, #256]	@ 0x100
        q15_t *two_column_buf = buffer_a;
   1a254:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
   1a258:	e9cd 642b 	strd	r6, r4, [sp, #172]	@ 0xac
   1a25c:	440a      	add	r2, r1
   1a25e:	4271      	negs	r1, r6
   1a260:	910f      	str	r1, [sp, #60]	@ 0x3c
   1a262:	4617      	mov	r7, r2
        for (int32_t i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a264:	2100      	movs	r1, #0
            for (int32_t i_out_x = 0; i_out_x < output_x; i_out_x++)
   1a266:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   1a268:	2a00      	cmp	r2, #0
   1a26a:	dd58      	ble.n	1a31e <arm_convolve_fast_s16+0x1fa>
   1a26c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
   1a26e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
   1a270:	932d      	str	r3, [sp, #180]	@ 0xb4
   1a272:	1a9e      	subs	r6, r3, r2
                for (int32_t i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y;
   1a274:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   1a276:	9209      	str	r2, [sp, #36]	@ 0x24
   1a278:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   1a27a:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
   1a27e:	e9cd 172e 	strd	r1, r7, [sp, #184]	@ 0xb8
   1a282:	4402      	add	r2, r0
   1a284:	463d      	mov	r5, r7
            for (int32_t i_out_x = 0; i_out_x < output_x; i_out_x++)
   1a286:	2400      	movs	r4, #0
   1a288:	920a      	str	r2, [sp, #40]	@ 0x28
                for (int32_t i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y;
   1a28a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   1a28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1a28e:	429a      	cmp	r2, r3
   1a290:	da31      	bge.n	1a2f6 <arm_convolve_fast_s16+0x1d2>
   1a292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1a294:	940d      	str	r4, [sp, #52]	@ 0x34
   1a296:	1af3      	subs	r3, r6, r3
   1a298:	fb0a f303 	mul.w	r3, sl, r3
   1a29c:	930c      	str	r3, [sp, #48]	@ 0x30
   1a29e:	462f      	mov	r7, r5
   1a2a0:	464b      	mov	r3, r9
   1a2a2:	950e      	str	r5, [sp, #56]	@ 0x38
   1a2a4:	4691      	mov	r9, r2
                    for (int32_t i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   1a2a6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   1a2a8:	42b4      	cmp	r4, r6
   1a2aa:	da1a      	bge.n	1a2e2 <arm_convolve_fast_s16+0x1be>
   1a2ac:	461d      	mov	r5, r3
   1a2ae:	9708      	str	r7, [sp, #32]
   1a2b0:	469b      	mov	fp, r3
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
   1a2b2:	45c8      	cmp	r8, r9
    memset(dst, val, block_size);
   1a2b4:	4652      	mov	r2, sl
   1a2b6:	f04f 0100 	mov.w	r1, #0
   1a2ba:	4628      	mov	r0, r5
   1a2bc:	dd06      	ble.n	1a2cc <arm_convolve_fast_s16+0x1a8>
   1a2be:	ea59 0c04 	orrs.w	ip, r9, r4
   1a2c2:	d403      	bmi.n	1a2cc <arm_convolve_fast_s16+0x1a8>
   1a2c4:	9b07      	ldr	r3, [sp, #28]
   1a2c6:	42a3      	cmp	r3, r4
   1a2c8:	f300 80cc 	bgt.w	1a464 <arm_convolve_fast_s16+0x340>
   1a2cc:	f00c fcfa 	bl	26cc4 <memset>
                         i_ker_x++)
   1a2d0:	3401      	adds	r4, #1
                    for (int32_t i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   1a2d2:	42b4      	cmp	r4, r6
                        two_column_buf += input_ch;
   1a2d4:	4455      	add	r5, sl
                    for (int32_t i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x;
   1a2d6:	4457      	add	r7, sl
   1a2d8:	d1eb      	bne.n	1a2b2 <arm_convolve_fast_s16+0x18e>
   1a2da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   1a2dc:	9f08      	ldr	r7, [sp, #32]
   1a2de:	465b      	mov	r3, fp
   1a2e0:	4413      	add	r3, r2
                for (int32_t i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y;
   1a2e2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   1a2e4:	4417      	add	r7, r2
   1a2e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
                     i_ker_y++)
   1a2e8:	f109 0901 	add.w	r9, r9, #1
                for (int32_t i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y;
   1a2ec:	4591      	cmp	r9, r2
   1a2ee:	d1da      	bne.n	1a2a6 <arm_convolve_fast_s16+0x182>
   1a2f0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
   1a2f2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
   1a2f4:	4699      	mov	r9, r3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a2f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   1a2f8:	454b      	cmp	r3, r9
   1a2fa:	f000 80b7 	beq.w	1a46c <arm_convolve_fast_s16+0x348>
            for (int32_t i_out_x = 0; i_out_x < output_x; i_out_x++)
   1a2fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1a300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1a302:	441e      	add	r6, r3
   1a304:	441a      	add	r2, r3
   1a306:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1a308:	9209      	str	r2, [sp, #36]	@ 0x24
   1a30a:	441d      	add	r5, r3
   1a30c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1a30e:	3401      	adds	r4, #1
   1a310:	42a3      	cmp	r3, r4
   1a312:	d1ba      	bne.n	1a28a <arm_convolve_fast_s16+0x166>
   1a314:	e9dd 172e 	ldrd	r1, r7, [sp, #184]	@ 0xb8
   1a318:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1a31a:	f8dd c054 	ldr.w	ip, [sp, #84]	@ 0x54
        for (int32_t i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a31e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
   1a320:	981f      	ldr	r0, [sp, #124]	@ 0x7c
   1a322:	4417      	add	r7, r2
   1a324:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   1a326:	4402      	add	r2, r0
   1a328:	920f      	str	r2, [sp, #60]	@ 0x3c
   1a32a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1a32c:	3101      	adds	r1, #1
   1a32e:	428a      	cmp	r2, r1
   1a330:	d199      	bne.n	1a266 <arm_convolve_fast_s16+0x142>
        if (two_column_buf != buffer_a)
   1a332:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   1a334:	454a      	cmp	r2, r9
   1a336:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	@ 0xac
   1a33a:	f000 8082 	beq.w	1a442 <arm_convolve_fast_s16+0x31e>
            for (i = 0; i < output_ch; i++)
   1a33e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1a340:	2a00      	cmp	r2, #0
   1a342:	dd7e      	ble.n	1a442 <arm_convolve_fast_s16+0x31e>
   1a344:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
   1a346:	f8dd b0f8 	ldr.w	fp, [sp, #248]	@ 0xf8
            const q7_t *ker_a = filter_data;
   1a34a:	983c      	ldr	r0, [sp, #240]	@ 0xf0
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a34c:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
   1a350:	f1a2 0e04 	sub.w	lr, r2, #4
   1a354:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   1a356:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
   1a35a:	f1a2 0904 	sub.w	r9, r2, #4
   1a35e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   1a360:	940c      	str	r4, [sp, #48]	@ 0x30
   1a362:	4462      	add	r2, ip
   1a364:	9208      	str	r2, [sp, #32]
   1a366:	469a      	mov	sl, r3
                while (col_count)
   1a368:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   1a36a:	2b00      	cmp	r3, #0
   1a36c:	f000 80b9 	beq.w	1a4e2 <arm_convolve_fast_s16+0x3be>
   1a370:	9b24      	ldr	r3, [sp, #144]	@ 0x90
                const q15_t *ip_as_col = buffer_a;
   1a372:	9914      	ldr	r1, [sp, #80]	@ 0x50
                q31_t sum = 0;
   1a374:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
   1a378:	18c7      	adds	r7, r0, r3
   1a37a:	2300      	movs	r3, #0
    memcpy(&val, *in_q7, 4);
   1a37c:	f850 2b04 	ldr.w	r2, [r0], #4

__STATIC_FORCEINLINE uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1a380:	fa2f f492 	sxtb16	r4, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1a384:	fa2f f282 	sxtb16	r2, r2
    memcpy(&val, *in_q15, 4);
   1a388:	f8d1 a000 	ldr.w	sl, [r1]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1a38c:	eac4 4822 	pkhtb	r8, r4, r2, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1a390:	eac2 4204 	pkhbt	r2, r2, r4, lsl #16

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1a394:	fb22 320a 	smlad	r2, r2, sl, r3
    memcpy(&val, *in_q15, 4);
   1a398:	684b      	ldr	r3, [r1, #4]
    *in_q15 += 2;
   1a39a:	3108      	adds	r1, #8
   1a39c:	fb28 2303 	smlad	r3, r8, r3, r2
                while (col_count)
   1a3a0:	4287      	cmp	r7, r0
   1a3a2:	d1eb      	bne.n	1a37c <arm_convolve_fast_s16+0x258>
   1a3a4:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
   1a3a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
                while (col_count)
   1a3aa:	9925      	ldr	r1, [sp, #148]	@ 0x94
   1a3ac:	2900      	cmp	r1, #0
   1a3ae:	f000 8096 	beq.w	1a4de <arm_convolve_fast_s16+0x3ba>
   1a3b2:	1878      	adds	r0, r7, r1
                    sum += ker_a1 * ip_b1;
   1a3b4:	f917 1b01 	ldrsb.w	r1, [r7], #1
   1a3b8:	f832 4b02 	ldrh.w	r4, [r2], #2
                while (col_count)
   1a3bc:	42b8      	cmp	r0, r7
                    sum += ker_a1 * ip_b1;
   1a3be:	fb14 3301 	smlabb	r3, r4, r1, r3
                while (col_count)
   1a3c2:	d1f7      	bne.n	1a3b4 <arm_convolve_fast_s16+0x290>
                if (bias_data)
   1a3c4:	993e      	ldr	r1, [sp, #248]	@ 0xf8
                    q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[i]);
   1a3c6:	f85e 2f04 	ldr.w	r2, [lr, #4]!
                    sum = arm_nn_requantize_s64(acc_64, reduced_multiplier, output_shift[i]);
   1a3ca:	f859 8f04 	ldr.w	r8, [r9, #4]!
                if (bias_data)
   1a3ce:	2900      	cmp	r1, #0
   1a3d0:	d066      	beq.n	1a4a0 <arm_convolve_fast_s16+0x37c>
                    q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[i]);
   1a3d2:	494e      	ldr	r1, [pc, #312]	@ (1a50c <arm_convolve_fast_s16+0x3e8>)
   1a3d4:	428a      	cmp	r2, r1
   1a3d6:	dc5f      	bgt.n	1a498 <arm_convolve_fast_s16+0x374>
   1a3d8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
   1a3dc:	1417      	asrs	r7, r2, #16
   1a3de:	17d1      	asrs	r1, r2, #31
                    q63_t acc_64 = sum + bias_data[i];
   1a3e0:	f8db 2000 	ldr.w	r2, [fp]
   1a3e4:	189a      	adds	r2, r3, r2
   1a3e6:	fb02 f401 	mul.w	r4, r2, r1
   1a3ea:	f8db 1004 	ldr.w	r1, [fp, #4]
   1a3ee:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   1a3f2:	fb07 4101 	mla	r1, r7, r1, r4
   1a3f6:	fba2 7207 	umull	r7, r2, r2, r7
   1a3fa:	188b      	adds	r3, r1, r2
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1a3fc:	f1c8 020e 	rsb	r2, r8, #14
   1a400:	f108 0812 	add.w	r8, r8, #18
   1a404:	40d7      	lsrs	r7, r2
   1a406:	fa03 f808 	lsl.w	r8, r3, r8
   1a40a:	3a20      	subs	r2, #32
   1a40c:	ea47 0708 	orr.w	r7, r7, r8
   1a410:	bf5c      	itt	pl
   1a412:	fa43 f202 	asrpl.w	r2, r3, r2
   1a416:	4317      	orrpl	r7, r2
    result = (result + 1) >> 1;             // Last shift position and insert round
   1a418:	1c7b      	adds	r3, r7, #1
   1a41a:	105b      	asrs	r3, r3, #1
                sum = MAX(sum, out_activation_min);
   1a41c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   1a41e:	4293      	cmp	r3, r2
   1a420:	bfb8      	it	lt
   1a422:	4613      	movlt	r3, r2
                sum = MIN(sum, out_activation_max);
   1a424:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   1a426:	4293      	cmp	r3, r2
   1a428:	bfa8      	it	ge
   1a42a:	4613      	movge	r3, r2
                *out++ = (q15_t)sum;
   1a42c:	f82c 3b02 	strh.w	r3, [ip], #2
            for (i = 0; i < output_ch; i++)
   1a430:	9b08      	ldr	r3, [sp, #32]
   1a432:	459c      	cmp	ip, r3
   1a434:	f10b 0b08 	add.w	fp, fp, #8
   1a438:	d196      	bne.n	1a368 <arm_convolve_fast_s16+0x244>
   1a43a:	4653      	mov	r3, sl
   1a43c:	e9dd a809 	ldrd	sl, r8, [sp, #36]	@ 0x24
   1a440:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
        input_data += (input_x * input_y * input_ch);
   1a442:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
   1a444:	9921      	ldr	r1, [sp, #132]	@ 0x84
   1a446:	440a      	add	r2, r1
   1a448:	923a      	str	r2, [sp, #232]	@ 0xe8
        output_data += (output_x * output_y * output_ch);
   1a44a:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   1a44c:	9a40      	ldr	r2, [sp, #256]	@ 0x100
   1a44e:	440a      	add	r2, r1
   1a450:	9240      	str	r2, [sp, #256]	@ 0x100
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a452:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
   1a454:	3401      	adds	r4, #1
   1a456:	42a2      	cmp	r2, r4
   1a458:	f47f aef4 	bne.w	1a244 <arm_convolve_fast_s16+0x120>
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
   1a45c:	2000      	movs	r0, #0
}
   1a45e:	b031      	add	sp, #196	@ 0xc4
   1a460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memcpy(dst, src, block_size);
   1a464:	4639      	mov	r1, r7
   1a466:	f7fe f88b 	bl	18580 <memcpy>
}
   1a46a:	e731      	b.n	1a2d0 <arm_convolve_fast_s16+0x1ac>
                    out = arm_nn_mat_mult_kernel_s16(filter_data,
   1a46c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1a46e:	9305      	str	r3, [sp, #20]
   1a470:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
   1a472:	9304      	str	r3, [sp, #16]
   1a474:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   1a476:	9303      	str	r3, [sp, #12]
   1a478:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   1a47a:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
   1a47e:	9302      	str	r3, [sp, #8]
   1a480:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1a482:	9301      	str	r3, [sp, #4]
   1a484:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   1a486:	9300      	str	r3, [sp, #0]
   1a488:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1a48a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1a48c:	983c      	ldr	r0, [sp, #240]	@ 0xf0
   1a48e:	4649      	mov	r1, r9
   1a490:	f002 fb6e 	bl	1cb70 <arm_nn_mat_mult_kernel_s16>
   1a494:	9015      	str	r0, [sp, #84]	@ 0x54
                    two_column_buf = buffer_a;
   1a496:	e732      	b.n	1a2fe <arm_convolve_fast_s16+0x1da>
   1a498:	f647 77ff 	movw	r7, #32767	@ 0x7fff
   1a49c:	2100      	movs	r1, #0
   1a49e:	e79f      	b.n	1a3e0 <arm_convolve_fast_s16+0x2bc>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a4a0:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
   1a4a4:	408b      	lsls	r3, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a4a6:	993e      	ldr	r1, [sp, #248]	@ 0xf8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a4a8:	f1c8 0800 	rsb	r8, r8, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1a4ac:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
   1a4b0:	fbc3 7102 	smlal	r7, r1, r3, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1a4b4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a4b8:	2201      	movs	r2, #1
    result = (int32_t)(mult.long_long >> 31);
   1a4ba:	0ffb      	lsrs	r3, r7, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a4bc:	fa02 f208 	lsl.w	r2, r2, r8
    result = (int32_t)(mult.long_long >> 31);
   1a4c0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1a4c4:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
   1a4c6:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
   1a4ca:	fa53 f308 	asrs.w	r3, r3, r8
    q31_t threshold = remainder_mask >> 1;
   1a4ce:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   1a4d2:	bf48      	it	mi
   1a4d4:	3201      	addmi	r2, #1
    if (remainder > threshold)
   1a4d6:	4291      	cmp	r1, r2
        result++;
   1a4d8:	bfc8      	it	gt
   1a4da:	3301      	addgt	r3, #1
   1a4dc:	e79e      	b.n	1a41c <arm_convolve_fast_s16+0x2f8>
                while (col_count)
   1a4de:	4638      	mov	r0, r7
   1a4e0:	e770      	b.n	1a3c4 <arm_convolve_fast_s16+0x2a0>
                const q15_t *ip_as_col = buffer_a;
   1a4e2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
                q31_t sum = 0;
   1a4e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
                while (col_count)
   1a4e6:	4607      	mov	r7, r0
   1a4e8:	e75f      	b.n	1a3aa <arm_convolve_fast_s16+0x286>
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1a4ea:	4649      	mov	r1, r9
   1a4ec:	4638      	mov	r0, r7
   1a4ee:	f000 fbb3 	bl	1ac58 <arm_convolve_s8_get_buffer_size>
   1a4f2:	2800      	cmp	r0, #0
   1a4f4:	dc06      	bgt.n	1a504 <arm_convolve_fast_s16+0x3e0>
    const int32_t kernel_y = filter_dims->h;
   1a4f6:	e9d9 3201 	ldrd	r3, r2, [r9, #4]
    q15_t *buffer_a = (q15_t *)ctx->buf;
   1a4fa:	f8d8 e000 	ldr.w	lr, [r8]
    const int32_t input_ch = input_dims->c;
   1a4fe:	68f8      	ldr	r0, [r7, #12]
    const int32_t kernel_y = filter_dims->h;
   1a500:	9317      	str	r3, [sp, #92]	@ 0x5c
   1a502:	e62b      	b.n	1a15c <arm_convolve_fast_s16+0x38>
        return ARM_CMSIS_NN_ARG_ERROR;
   1a504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1a508:	e7a9      	b.n	1a45e <arm_convolve_fast_s16+0x33a>
   1a50a:	bf00      	nop
   1a50c:	7ffeffff 	.word	0x7ffeffff

0001a510 <arm_convolve_fast_s16_get_buffer_size>:

int32_t arm_convolve_fast_s16_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   1a510:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1a514:	68c0      	ldr	r0, [r0, #12]
   1a516:	fb02 f000 	mul.w	r0, r2, r0
   1a51a:	fb03 f000 	mul.w	r0, r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   1a51e:	0080      	lsls	r0, r0, #2
   1a520:	4770      	bx	lr
   1a522:	bf00      	nop

0001a524 <arm_convolve_s16>:
                                     const q7_t *filter_data,
                                     const cmsis_nn_dims *bias_dims,
                                     const int64_t *bias_data,
                                     const cmsis_nn_dims *output_dims,
                                     q15_t *output_data)
{
   1a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a528:	b0bb      	sub	sp, #236	@ 0xec
   1a52a:	461d      	mov	r5, r3
   1a52c:	9e45      	ldr	r6, [sp, #276]	@ 0x114
   1a52e:	9b49      	ldr	r3, [sp, #292]	@ 0x124
    (void)bias_dims;
    (void)ctx;

    const int32_t input_batches = input_dims->n;
    const int32_t input_x = input_dims->w;
   1a530:	68af      	ldr	r7, [r5, #8]
    const int32_t input_batches = input_dims->n;
   1a532:	682c      	ldr	r4, [r5, #0]
    const int32_t input_y = input_dims->h;
    const int32_t input_ch = input_dims->c;
   1a534:	f8d5 b00c 	ldr.w	fp, [r5, #12]
    const int32_t input_x = input_dims->w;
   1a538:	970e      	str	r7, [sp, #56]	@ 0x38
    const int32_t input_y = input_dims->h;
   1a53a:	686f      	ldr	r7, [r5, #4]
    const int32_t kernel_x = filter_dims->w;
   1a53c:	68b5      	ldr	r5, [r6, #8]
    const int32_t kernel_y = filter_dims->h;
   1a53e:	6876      	ldr	r6, [r6, #4]
   1a540:	9618      	str	r6, [sp, #96]	@ 0x60
    const int32_t output_x = output_dims->w;
   1a542:	689e      	ldr	r6, [r3, #8]
   1a544:	9610      	str	r6, [sp, #64]	@ 0x40
    const int32_t output_y = output_dims->h;
    const int32_t output_ch = output_dims->c;

    const int32_t pad_x = conv_params->padding.w;
   1a546:	690e      	ldr	r6, [r1, #16]
   1a548:	9619      	str	r6, [sp, #100]	@ 0x64
    const int32_t pad_y = conv_params->padding.h;
   1a54a:	694e      	ldr	r6, [r1, #20]
   1a54c:	961a      	str	r6, [sp, #104]	@ 0x68
    const int32_t stride_x = conv_params->stride.w;
   1a54e:	688e      	ldr	r6, [r1, #8]
   1a550:	961e      	str	r6, [sp, #120]	@ 0x78
    const int32_t stride_y = conv_params->stride.h;
   1a552:	68ce      	ldr	r6, [r1, #12]
    const int32_t input_y = input_dims->h;
   1a554:	9717      	str	r7, [sp, #92]	@ 0x5c
    const int32_t kernel_x = filter_dims->w;
   1a556:	950f      	str	r5, [sp, #60]	@ 0x3c
    const int32_t dilation_x = conv_params->dilation.w;
    const int32_t dilation_y = conv_params->dilation.h;
   1a558:	69cf      	ldr	r7, [r1, #28]
    const int32_t output_y = output_dims->h;
   1a55a:	685d      	ldr	r5, [r3, #4]
    const int32_t stride_y = conv_params->stride.h;
   1a55c:	961f      	str	r6, [sp, #124]	@ 0x7c
    const int32_t dilation_x = conv_params->dilation.w;
   1a55e:	698e      	ldr	r6, [r1, #24]
    const int32_t output_y = output_dims->h;
   1a560:	9511      	str	r5, [sp, #68]	@ 0x44
{
   1a562:	9846      	ldr	r0, [sp, #280]	@ 0x118
   1a564:	f8dd 8128 	ldr.w	r8, [sp, #296]	@ 0x128
    const int32_t output_ch = output_dims->c;
   1a568:	68dd      	ldr	r5, [r3, #12]
    const int32_t dilation_x = conv_params->dilation.w;
   1a56a:	9612      	str	r6, [sp, #72]	@ 0x48
    const int32_t dilation_y = conv_params->dilation.h;
   1a56c:	9713      	str	r7, [sp, #76]	@ 0x4c

    const int32_t out_activation_min = conv_params->activation.min;
   1a56e:	6a0e      	ldr	r6, [r1, #32]
    const int32_t out_activation_max = conv_params->activation.max;
   1a570:	6a49      	ldr	r1, [r1, #36]	@ 0x24
    const int32_t out_activation_min = conv_params->activation.min;
   1a572:	9620      	str	r6, [sp, #128]	@ 0x80
    const int32_t out_activation_max = conv_params->activation.max;
   1a574:	9121      	str	r1, [sp, #132]	@ 0x84
    int32_t *output_mult = quant_params->multiplier;
    int32_t *output_shift = quant_params->shift;
   1a576:	e9d2 6100 	ldrd	r6, r1, [r2]

    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a57a:	2c00      	cmp	r4, #0
    int32_t *output_shift = quant_params->shift;
   1a57c:	9122      	str	r1, [sp, #136]	@ 0x88
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a57e:	f340 8185 	ble.w	1a88c <arm_convolve_s16+0x368>
                    output_data[i_out_ch + (i_out_y * output_x + i_out_x) * output_ch] = (int16_t)conv_out;
                }
            }
        }
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
   1a582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   1a584:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1a586:	990f      	ldr	r1, [sp, #60]	@ 0x3c
   1a588:	fb03 f302 	mul.w	r3, r3, r2
   1a58c:	fb0b f303 	mul.w	r3, fp, r3
   1a590:	1e47      	subs	r7, r0, #1
   1a592:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        output_data += (output_x * output_y * output_ch);
   1a596:	e9dd 0310 	ldrd	r0, r3, [sp, #64]	@ 0x40
   1a59a:	fb03 f300 	mul.w	r3, r3, r0
   1a59e:	fb05 f303 	mul.w	r3, r5, r3
   1a5a2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
   1a5a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   1a5a8:	fb01 f303 	mul.w	r3, r1, r3
   1a5ac:	fb0b f303 	mul.w	r3, fp, r3
   1a5b0:	9329      	str	r3, [sp, #164]	@ 0xa4
   1a5b2:	fb05 f300 	mul.w	r3, r5, r0
   1a5b6:	0058      	lsls	r0, r3, #1
   1a5b8:	fb0b f302 	mul.w	r3, fp, r2
   1a5bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
   1a5be:	9028      	str	r0, [sp, #160]	@ 0xa0
   1a5c0:	fb02 f203 	mul.w	r2, r2, r3
   1a5c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   1a5c6:	9208      	str	r2, [sp, #32]
   1a5c8:	fb0b f903 	mul.w	r9, fp, r3
   1a5cc:	006b      	lsls	r3, r5, #1
   1a5ce:	ea4f 024b 	mov.w	r2, fp, lsl #1
   1a5d2:	9327      	str	r3, [sp, #156]	@ 0x9c
   1a5d4:	fb01 f30b 	mul.w	r3, r1, fp
   1a5d8:	9309      	str	r3, [sp, #36]	@ 0x24
   1a5da:	4629      	mov	r1, r5
   1a5dc:	4610      	mov	r0, r2
   1a5de:	ea4f 0a49 	mov.w	sl, r9, lsl #1
   1a5e2:	4642      	mov	r2, r8
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a5e4:	2300      	movs	r3, #0
   1a5e6:	4665      	mov	r5, ip
   1a5e8:	46b8      	mov	r8, r7
        for (int32_t i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
   1a5ea:	2900      	cmp	r1, #0
   1a5ec:	f340 8146 	ble.w	1a87c <arm_convolve_s16+0x358>
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
   1a5f0:	2700      	movs	r7, #0
   1a5f2:	970c      	str	r7, [sp, #48]	@ 0x30
   1a5f4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
   1a5f6:	9430      	str	r4, [sp, #192]	@ 0xc0
   1a5f8:	427f      	negs	r7, r7
   1a5fa:	9701      	str	r7, [sp, #4]
        for (int32_t i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
   1a5fc:	2700      	movs	r7, #0
   1a5fe:	970b      	str	r7, [sp, #44]	@ 0x2c
   1a600:	9f44      	ldr	r7, [sp, #272]	@ 0x110
   1a602:	9331      	str	r3, [sp, #196]	@ 0xc4
   1a604:	19c7      	adds	r7, r0, r7
   1a606:	f1a6 0c04 	sub.w	ip, r6, #4
   1a60a:	970a      	str	r7, [sp, #40]	@ 0x28
   1a60c:	9f01      	ldr	r7, [sp, #4]
   1a60e:	f8cd c074 	str.w	ip, [sp, #116]	@ 0x74
   1a612:	e9cd 5e2e 	strd	r5, lr, [sp, #184]	@ 0xb8
   1a616:	460c      	mov	r4, r1
   1a618:	46d6      	mov	lr, sl
   1a61a:	46ca      	mov	sl, r9
   1a61c:	4691      	mov	r9, r2
            const q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[i_out_ch]);
   1a61e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   1a620:	f852 3f04 	ldr.w	r3, [r2, #4]!
   1a624:	921d      	str	r2, [sp, #116]	@ 0x74
   1a626:	4a9e      	ldr	r2, [pc, #632]	@ (1a8a0 <arm_convolve_s16+0x37c>)
   1a628:	4293      	cmp	r3, r2
   1a62a:	bfda      	itte	le
   1a62c:	f503 4300 	addle.w	r3, r3, #32768	@ 0x8000
   1a630:	141b      	asrle	r3, r3, #16
   1a632:	f647 73ff 	movwgt	r3, #32767	@ 0x7fff
   1a636:	930d      	str	r3, [sp, #52]	@ 0x34
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
   1a638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1a63a:	2b00      	cmp	r3, #0
   1a63c:	f340 810b 	ble.w	1a856 <arm_convolve_s16+0x332>
   1a640:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1a642:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
    const q63_t new_val = val * reduced_multiplier;
   1a644:	f8cd 9128 	str.w	r9, [sp, #296]	@ 0x128
   1a648:	3b01      	subs	r3, #1
   1a64a:	4413      	add	r3, r2
   1a64c:	9316      	str	r3, [sp, #88]	@ 0x58
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a64e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
   1a650:	9714      	str	r7, [sp, #80]	@ 0x50
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a652:	425b      	negs	r3, r3
   1a654:	9324      	str	r3, [sp, #144]	@ 0x90
   1a656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1a658:	9734      	str	r7, [sp, #208]	@ 0xd0
   1a65a:	eb09 0243 	add.w	r2, r9, r3, lsl #1
   1a65e:	9215      	str	r2, [sp, #84]	@ 0x54
   1a660:	9a48      	ldr	r2, [sp, #288]	@ 0x120
   1a662:	9035      	str	r0, [sp, #212]	@ 0xd4
   1a664:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a668:	932a      	str	r3, [sp, #168]	@ 0xa8
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
   1a66a:	2300      	movs	r3, #0
   1a66c:	931b      	str	r3, [sp, #108]	@ 0x6c
   1a66e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   1a670:	17da      	asrs	r2, r3, #31
   1a672:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
   1a676:	e9cd 4632 	strd	r4, r6, [sp, #200]	@ 0xc8
   1a67a:	46f1      	mov	r9, lr
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a67c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1a67e:	2b00      	cmp	r3, #0
   1a680:	f340 80d0 	ble.w	1a824 <arm_convolve_s16+0x300>
   1a684:	9812      	ldr	r0, [sp, #72]	@ 0x48
   1a686:	9919      	ldr	r1, [sp, #100]	@ 0x64
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1a688:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   1a68a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    const q63_t new_val = val * reduced_multiplier;
   1a68c:	f8dd c054 	ldr.w	ip, [sp, #84]	@ 0x54
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1a690:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
                    const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1a694:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1a696:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1a698:	fb92 f6f3 	sdiv	r6, r2, r3
   1a69c:	4401      	add	r1, r0
   1a69e:	1e4f      	subs	r7, r1, #1
   1a6a0:	9914      	ldr	r1, [sp, #80]	@ 0x50
   1a6a2:	980e      	ldr	r0, [sp, #56]	@ 0x38
                    const int32_t ker_y_start = MAX(0, start_y_max);
   1a6a4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   1a6a8:	fb06 1103 	mla	r1, r6, r3, r1
   1a6ac:	fb00 f101 	mul.w	r1, r0, r1
   1a6b0:	9125      	str	r1, [sp, #148]	@ 0x94
                    const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
   1a6b2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
   1a6b4:	4411      	add	r1, r2
   1a6b6:	fb91 f1f3 	sdiv	r1, r1, r3
                    const int32_t ker_y_end = MIN(kernel_y, end_min_y);
   1a6ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   1a6bc:	4299      	cmp	r1, r3
   1a6be:	bfa8      	it	ge
   1a6c0:	4619      	movge	r1, r3
   1a6c2:	f1c5 030e 	rsb	r3, r5, #14
   1a6c6:	9323      	str	r3, [sp, #140]	@ 0x8c
   1a6c8:	f105 0312 	add.w	r3, r5, #18
   1a6cc:	932b      	str	r3, [sp, #172]	@ 0xac
   1a6ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a6d0:	9d24      	ldr	r5, [sp, #144]	@ 0x90
                    const int32_t ker_y_end = MIN(kernel_y, end_min_y);
   1a6d2:	9107      	str	r1, [sp, #28]
   1a6d4:	fb03 f306 	mul.w	r3, r3, r6
   1a6d8:	9326      	str	r3, [sp, #152]	@ 0x98
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a6da:	2300      	movs	r3, #0
   1a6dc:	931c      	str	r3, [sp, #112]	@ 0x70
   1a6de:	462b      	mov	r3, r5
   1a6e0:	4635      	mov	r5, r6
   1a6e2:	461e      	mov	r6, r3
                    const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1a6e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1a6e6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   1a6e8:	eb03 0e07 	add.w	lr, r3, r7
                    const int32_t ker_x_end = MIN(kernel_x, end_min_x);
   1a6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
                    const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1a6ee:	fb9e fef2 	sdiv	lr, lr, r2
                    const int32_t ker_x_end = MIN(kernel_x, end_min_x);
   1a6f2:	459e      	cmp	lr, r3
   1a6f4:	bfa8      	it	ge
   1a6f6:	469e      	movge	lr, r3
                    const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1a6f8:	fb97 f3f2 	sdiv	r3, r7, r2
                    const int32_t ker_x_start = MAX(0, start_x_max);
   1a6fc:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
                    for (int32_t i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1a700:	9b07      	ldr	r3, [sp, #28]
                    const int32_t ker_x_start = MAX(0, start_x_max);
   1a702:	9102      	str	r1, [sp, #8]
                    for (int32_t i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1a704:	429d      	cmp	r5, r3
   1a706:	f280 80c5 	bge.w	1a894 <arm_convolve_s16+0x370>
   1a70a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   1a70c:	f8cd 8004 	str.w	r8, [sp, #4]
   1a710:	18f3      	adds	r3, r6, r3
   1a712:	fb01 3302 	mla	r3, r1, r2, r3
   1a716:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   1a718:	188a      	adds	r2, r1, r2
   1a71a:	990c      	ldr	r1, [sp, #48]	@ 0x30
   1a71c:	e9cd 7c38 	strd	r7, ip, [sp, #224]	@ 0xe0
   1a720:	fb0b 1202 	mla	r2, fp, r2, r1
   1a724:	462c      	mov	r4, r5
   1a726:	e9cd 5636 	strd	r5, r6, [sp, #216]	@ 0xd8
   1a72a:	4615      	mov	r5, r2
   1a72c:	fb0b f303 	mul.w	r3, fp, r3
   1a730:	4622      	mov	r2, r4
                    int64_t conv_out_acc = 0;
   1a732:	2000      	movs	r0, #0
   1a734:	2100      	movs	r1, #0
   1a736:	462c      	mov	r4, r5
                        for (int32_t i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1a738:	9d02      	ldr	r5, [sp, #8]
   1a73a:	4575      	cmp	r5, lr
   1a73c:	da25      	bge.n	1a78a <arm_convolve_s16+0x266>
   1a73e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
   1a740:	9406      	str	r4, [sp, #24]
   1a742:	e9cd 3204 	strd	r3, r2, [sp, #16]
   1a746:	eb05 0643 	add.w	r6, r5, r3, lsl #1
   1a74a:	9d02      	ldr	r5, [sp, #8]
   1a74c:	46a4      	mov	ip, r4
   1a74e:	461f      	mov	r7, r3
                            for (int32_t i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1a750:	f1bb 0f00 	cmp.w	fp, #0
   1a754:	dd10      	ble.n	1a778 <arm_convolve_s16+0x254>
   1a756:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   1a758:	9a01      	ldr	r2, [sp, #4]
   1a75a:	eb03 0347 	add.w	r3, r3, r7, lsl #1
   1a75e:	46b8      	mov	r8, r7
   1a760:	4462      	add	r2, ip
   1a762:	462f      	mov	r7, r5
                                conv_out_acc += input_data[(in_row * input_x + in_col) * input_ch + i_input_ch] *
   1a764:	f933 5b02 	ldrsh.w	r5, [r3], #2
   1a768:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
                            for (int32_t i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1a76c:	429e      	cmp	r6, r3
                                conv_out_acc += input_data[(in_row * input_x + in_col) * input_ch + i_input_ch] *
   1a76e:	fbc5 0184 	smlalbb	r0, r1, r5, r4
                            for (int32_t i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1a772:	d1f7      	bne.n	1a764 <arm_convolve_s16+0x240>
   1a774:	463d      	mov	r5, r7
   1a776:	4647      	mov	r7, r8
                        for (int32_t i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1a778:	3501      	adds	r5, #1
   1a77a:	45ae      	cmp	lr, r5
   1a77c:	4457      	add	r7, sl
   1a77e:	44dc      	add	ip, fp
   1a780:	444e      	add	r6, r9
   1a782:	d1e5      	bne.n	1a750 <arm_convolve_s16+0x22c>
   1a784:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   1a788:	9c06      	ldr	r4, [sp, #24]
                    for (int32_t i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1a78a:	9d08      	ldr	r5, [sp, #32]
   1a78c:	442b      	add	r3, r5
   1a78e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   1a790:	442c      	add	r4, r5
   1a792:	9d07      	ldr	r5, [sp, #28]
   1a794:	3201      	adds	r2, #1
   1a796:	4295      	cmp	r5, r2
   1a798:	d1ce      	bne.n	1a738 <arm_convolve_s16+0x214>
   1a79a:	e9dd 5636 	ldrd	r5, r6, [sp, #216]	@ 0xd8
   1a79e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1a7a2:	e9dd 7c38 	ldrd	r7, ip, [sp, #224]	@ 0xe0
   1a7a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
                    if (bias_data)
   1a7aa:	9b48      	ldr	r3, [sp, #288]	@ 0x120
   1a7ac:	b14b      	cbz	r3, 1a7c2 <arm_convolve_s16+0x29e>
                        conv_out_acc += bias_data[i_out_ch];
   1a7ae:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
   1a7b0:	9902      	ldr	r1, [sp, #8]
   1a7b2:	6813      	ldr	r3, [r2, #0]
   1a7b4:	6852      	ldr	r2, [r2, #4]
   1a7b6:	18cb      	adds	r3, r1, r3
   1a7b8:	9903      	ldr	r1, [sp, #12]
   1a7ba:	eb42 0201 	adc.w	r2, r2, r1
   1a7be:	e9cd 3202 	strd	r3, r2, [sp, #8]
    const q63_t new_val = val * reduced_multiplier;
   1a7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1a7c6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
   1a7c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   1a7ca:	fb00 f303 	mul.w	r3, r0, r3
   1a7ce:	fb02 3101 	mla	r1, r2, r1, r3
   1a7d2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1a7d4:	9a02      	ldr	r2, [sp, #8]
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1a7d6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
    const q63_t new_val = val * reduced_multiplier;
   1a7d8:	fba2 2303 	umull	r2, r3, r2, r3
   1a7dc:	440b      	add	r3, r1
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1a7de:	992b      	ldr	r1, [sp, #172]	@ 0xac
   1a7e0:	40c2      	lsrs	r2, r0
   1a7e2:	fa03 f101 	lsl.w	r1, r3, r1
   1a7e6:	430a      	orrs	r2, r1
   1a7e8:	f1b0 0120 	subs.w	r1, r0, #32
   1a7ec:	bf5c      	itt	pl
   1a7ee:	fa43 f101 	asrpl.w	r1, r3, r1
   1a7f2:	430a      	orrpl	r2, r1
    result = (result + 1) >> 1;             // Last shift position and insert round
   1a7f4:	1c53      	adds	r3, r2, #1
                    conv_out = MAX(conv_out, out_activation_min);
   1a7f6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   1a7f8:	105b      	asrs	r3, r3, #1
   1a7fa:	4293      	cmp	r3, r2
   1a7fc:	bfb8      	it	lt
   1a7fe:	4613      	movlt	r3, r2
                    conv_out = MIN(conv_out, out_activation_max);
   1a800:	9a21      	ldr	r2, [sp, #132]	@ 0x84
   1a802:	4293      	cmp	r3, r2
   1a804:	bfa8      	it	ge
   1a806:	4613      	movge	r3, r2
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a808:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
                    output_data[i_out_ch + (i_out_y * output_x + i_out_x) * output_ch] = (int16_t)conv_out;
   1a80a:	f8ac 3000 	strh.w	r3, [ip]
                for (int32_t base_idx_x = -pad_x, i_out_x = 0; i_out_x < output_x; base_idx_x += stride_x, i_out_x++)
   1a80e:	4416      	add	r6, r2
   1a810:	1abf      	subs	r7, r7, r2
   1a812:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   1a814:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1a816:	4494      	add	ip, r2
   1a818:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   1a81a:	3301      	adds	r3, #1
   1a81c:	429a      	cmp	r2, r3
   1a81e:	931c      	str	r3, [sp, #112]	@ 0x70
   1a820:	f47f af60 	bne.w	1a6e4 <arm_convolve_s16+0x1c0>
            for (int32_t base_idx_y = -pad_y, i_out_y = 0; i_out_y < output_y; base_idx_y += stride_y, i_out_y++)
   1a824:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   1a826:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   1a828:	9828      	ldr	r0, [sp, #160]	@ 0xa0
   1a82a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   1a82c:	440a      	add	r2, r1
   1a82e:	9214      	str	r2, [sp, #80]	@ 0x50
   1a830:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   1a832:	4402      	add	r2, r0
   1a834:	9215      	str	r2, [sp, #84]	@ 0x54
   1a836:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1a838:	1a52      	subs	r2, r2, r1
   1a83a:	9216      	str	r2, [sp, #88]	@ 0x58
   1a83c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   1a83e:	3301      	adds	r3, #1
   1a840:	429a      	cmp	r2, r3
   1a842:	931b      	str	r3, [sp, #108]	@ 0x6c
   1a844:	f47f af1a 	bne.w	1a67c <arm_convolve_s16+0x158>
   1a848:	e9dd 4632 	ldrd	r4, r6, [sp, #200]	@ 0xc8
   1a84c:	46ce      	mov	lr, r9
   1a84e:	9f34      	ldr	r7, [sp, #208]	@ 0xd0
   1a850:	f8dd 9128 	ldr.w	r9, [sp, #296]	@ 0x128
   1a854:	9835      	ldr	r0, [sp, #212]	@ 0xd4
        for (int32_t i_out_ch = 0; i_out_ch < output_ch; i_out_ch++)
   1a856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1a858:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   1a85a:	9929      	ldr	r1, [sp, #164]	@ 0xa4
   1a85c:	3301      	adds	r3, #1
   1a85e:	440a      	add	r2, r1
   1a860:	429c      	cmp	r4, r3
   1a862:	930b      	str	r3, [sp, #44]	@ 0x2c
   1a864:	920c      	str	r2, [sp, #48]	@ 0x30
   1a866:	f47f aeda 	bne.w	1a61e <arm_convolve_s16+0xfa>
   1a86a:	4621      	mov	r1, r4
   1a86c:	e9dd 4330 	ldrd	r4, r3, [sp, #192]	@ 0xc0
   1a870:	464a      	mov	r2, r9
   1a872:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   1a874:	46d1      	mov	r9, sl
   1a876:	46f2      	mov	sl, lr
   1a878:	f8dd e0bc 	ldr.w	lr, [sp, #188]	@ 0xbc
        input_data += (input_x * input_y * input_ch);
   1a87c:	9f44      	ldr	r7, [sp, #272]	@ 0x110
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a87e:	3301      	adds	r3, #1
        input_data += (input_x * input_y * input_ch);
   1a880:	442f      	add	r7, r5
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a882:	429c      	cmp	r4, r3
        input_data += (input_x * input_y * input_ch);
   1a884:	9744      	str	r7, [sp, #272]	@ 0x110
        output_data += (output_x * output_y * output_ch);
   1a886:	4472      	add	r2, lr
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1a888:	f47f aeaf 	bne.w	1a5ea <arm_convolve_s16+0xc6>
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
}
   1a88c:	2000      	movs	r0, #0
   1a88e:	b03b      	add	sp, #236	@ 0xec
   1a890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    int64_t conv_out_acc = 0;
   1a894:	2300      	movs	r3, #0
   1a896:	2400      	movs	r4, #0
   1a898:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1a89c:	e785      	b.n	1a7aa <arm_convolve_s16+0x286>
   1a89e:	bf00      	nop
   1a8a0:	7ffeffff 	.word	0x7ffeffff

0001a8a4 <arm_convolve_s16_get_buffer_size>:
int32_t arm_convolve_s16_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
    (void)input_dims;
    (void)filter_dims;
    return 0;
}
   1a8a4:	2000      	movs	r0, #0
   1a8a6:	4770      	bx	lr

0001a8a8 <arm_convolve_s8>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
   1a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8ac:	b0b7      	sub	sp, #220	@ 0xdc
    (void)bias_dims;

    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1a8ae:	6807      	ldr	r7, [r0, #0]
{
   1a8b0:	9d45      	ldr	r5, [sp, #276]	@ 0x114
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1a8b2:	971c      	str	r7, [sp, #112]	@ 0x70
{
   1a8b4:	4610      	mov	r0, r2
   1a8b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
   1a8b8:	461c      	mov	r4, r3
   1a8ba:	460e      	mov	r6, r1
    // implementation of  arm_nn_mat_mult_s8
    col_length = (col_length + 7) / 8;
    // 4 -> number of im2col buffers, 8 -> 8 elements per Q register
    return 4 * col_length * 8 * (int32_t)sizeof(int8_t);
#else
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   1a8bc:	68db      	ldr	r3, [r3, #12]
   1a8be:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1a8c2:	2f00      	cmp	r7, #0
   1a8c4:	f000 81be 	beq.w	1ac44 <arm_convolve_s8+0x39c>
    const uint16_t output_ch = output_dims->c;
   1a8c8:	68ef      	ldr	r7, [r5, #12]
   1a8ca:	9709      	str	r7, [sp, #36]	@ 0x24
    const uint16_t input_y = input_dims->h;
   1a8cc:	e9d4 9e01 	ldrd	r9, lr, [r4, #4]
    const int32_t input_batches = input_dims->n;
   1a8d0:	6827      	ldr	r7, [r4, #0]
    const uint16_t pad_x = conv_params->padding.w;
   1a8d2:	6934      	ldr	r4, [r6, #16]
   1a8d4:	9428      	str	r4, [sp, #160]	@ 0xa0
    const uint16_t pad_y = conv_params->padding.h;
   1a8d6:	6974      	ldr	r4, [r6, #20]
   1a8d8:	9429      	str	r4, [sp, #164]	@ 0xa4
    const uint16_t stride_y = conv_params->stride.h;
   1a8da:	e9d6 b402 	ldrd	fp, r4, [r6, #8]
   1a8de:	942a      	str	r4, [sp, #168]	@ 0xa8
    const int32_t input_offset = conv_params->input_offset;
   1a8e0:	6834      	ldr	r4, [r6, #0]
    const int32_t input_batches = input_dims->n;
   1a8e2:	9724      	str	r7, [sp, #144]	@ 0x90
    const int32_t input_offset = conv_params->input_offset;
   1a8e4:	942e      	str	r4, [sp, #184]	@ 0xb8
    const int32_t out_offset = conv_params->output_offset;
   1a8e6:	6874      	ldr	r4, [r6, #4]
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1a8e8:	9f24      	ldr	r7, [sp, #144]	@ 0x90
    const int32_t out_offset = conv_params->output_offset;
   1a8ea:	941e      	str	r4, [sp, #120]	@ 0x78
    const int32_t out_activation_min = conv_params->activation.min;
   1a8ec:	6a34      	ldr	r4, [r6, #32]
   1a8ee:	941f      	str	r4, [sp, #124]	@ 0x7c
    const int32_t out_activation_max = conv_params->activation.max;
   1a8f0:	6a74      	ldr	r4, [r6, #36]	@ 0x24
    const uint16_t output_ch = output_dims->c;
   1a8f2:	f8bd a024 	ldrh.w	sl, [sp, #36]	@ 0x24
    const int32_t out_activation_max = conv_params->activation.max;
   1a8f6:	9420      	str	r4, [sp, #128]	@ 0x80
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1a8f8:	2f00      	cmp	r7, #0
    int32_t *output_mult = quant_params->multiplier;
   1a8fa:	6804      	ldr	r4, [r0, #0]
    int32_t *output_shift = quant_params->shift;
   1a8fc:	6840      	ldr	r0, [r0, #4]
    int32_t *output_mult = quant_params->multiplier;
   1a8fe:	9421      	str	r4, [sp, #132]	@ 0x84
    const uint16_t output_y = output_dims->h;
   1a900:	e9d5 c801 	ldrd	ip, r8, [r5, #4]
    int32_t *output_shift = quant_params->shift;
   1a904:	9022      	str	r0, [sp, #136]	@ 0x88
    const uint16_t input_ch = input_dims->c;
   1a906:	b29c      	uxth	r4, r3
    const uint16_t kernel_x = filter_dims->w;
   1a908:	b288      	uxth	r0, r1
    const uint16_t kernel_y = filter_dims->h;
   1a90a:	b295      	uxth	r5, r2
    const uint16_t output_ch = output_dims->c;
   1a90c:	f8cd a094 	str.w	sl, [sp, #148]	@ 0x94
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1a910:	f340 8167 	ble.w	1abe2 <arm_convolve_s8+0x33a>
   1a914:	fa1f fa81 	uxth.w	sl, r1
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1a918:	fb10 f005 	smulbb	r0, r0, r5
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1a91c:	b299      	uxth	r1, r3
   1a91e:	fa1f f389 	uxth.w	r3, r9
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1a922:	fb10 f004 	smulbb	r0, r0, r4
   1a926:	b292      	uxth	r2, r2
   1a928:	9308      	str	r3, [sp, #32]
   1a92a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
   1a92e:	900b      	str	r0, [sp, #44]	@ 0x2c
   1a930:	9326      	str	r3, [sp, #152]	@ 0x98
   1a932:	fa1f f08b 	uxth.w	r0, fp
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a936:	fb0a f302 	mul.w	r3, sl, r2
   1a93a:	fb01 f303 	mul.w	r3, r1, r3
   1a93e:	9018      	str	r0, [sp, #96]	@ 0x60
   1a940:	981c      	ldr	r0, [sp, #112]	@ 0x70
   1a942:	920e      	str	r2, [sp, #56]	@ 0x38
   1a944:	fa1f f48c 	uxth.w	r4, ip
   1a948:	fa1f f788 	uxth.w	r7, r8
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   1a94c:	f3c3 028f 	ubfx	r2, r3, #2, #16
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a950:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
   1a954:	9427      	str	r4, [sp, #156]	@ 0x9c
   1a956:	1e53      	subs	r3, r2, #1
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
   1a958:	922f      	str	r2, [sp, #188]	@ 0xbc
        output_data += (output_x * output_y * output_ch);
   1a95a:	fb07 f204 	mul.w	r2, r7, r4
   1a95e:	9c26      	ldr	r4, [sp, #152]	@ 0x98
   1a960:	981c      	ldr	r0, [sp, #112]	@ 0x70
   1a962:	9717      	str	r7, [sp, #92]	@ 0x5c
   1a964:	fb04 f402 	mul.w	r4, r4, r2
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1a968:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        output_data += (output_x * output_y * output_ch);
   1a96a:	942d      	str	r4, [sp, #180]	@ 0xb4
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1a96c:	b294      	uxth	r4, r2
   1a96e:	fa1f f58e 	uxth.w	r5, lr
   1a972:	9423      	str	r4, [sp, #140]	@ 0x8c
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   1a974:	f002 0403 	and.w	r4, r2, #3
        input_data += (input_x * input_y * input_ch);
   1a978:	9a08      	ldr	r2, [sp, #32]
   1a97a:	950a      	str	r5, [sp, #40]	@ 0x28
   1a97c:	fb05 f501 	mul.w	r5, r5, r1
                col_count = input_ch * kernel_y * kernel_x & 0x3;
   1a980:	9430      	str	r4, [sp, #192]	@ 0xc0
        input_data += (input_x * input_y * input_ch);
   1a982:	fb05 f402 	mul.w	r4, r5, r2
   1a986:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1a988:	9531      	str	r5, [sp, #196]	@ 0xc4
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1a98a:	ea4f 0b41 	mov.w	fp, r1, lsl #1
   1a98e:	fb02 f201 	mul.w	r2, r2, r1
   1a992:	b29b      	uxth	r3, r3
   1a994:	3301      	adds	r3, #1
   1a996:	921a      	str	r2, [sp, #104]	@ 0x68
   1a998:	fb0a f20b 	mul.w	r2, sl, fp
   1a99c:	9212      	str	r2, [sp, #72]	@ 0x48
   1a99e:	9d46      	ldr	r5, [sp, #280]	@ 0x118
   1a9a0:	9113      	str	r1, [sp, #76]	@ 0x4c
   1a9a2:	009a      	lsls	r2, r3, #2
   1a9a4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1a9a8:	f8cd c064 	str.w	ip, [sp, #100]	@ 0x64
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1a9ac:	2700      	movs	r7, #0
        input_data += (input_x * input_y * input_ch);
   1a9ae:	9432      	str	r4, [sp, #200]	@ 0xc8
   1a9b0:	922b      	str	r2, [sp, #172]	@ 0xac
   1a9b2:	932c      	str	r3, [sp, #176]	@ 0xb0
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1a9b4:	46d9      	mov	r9, fp
   1a9b6:	46d0      	mov	r8, sl
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a9b8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
        const uint16_t dilation_y = conv_params->dilation.h;
   1a9ba:	e9d6 2106 	ldrd	r2, r1, [r6, #24]
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a9be:	2b00      	cmp	r3, #0
   1a9c0:	f000 8104 	beq.w	1abcc <arm_convolve_s8+0x324>
   1a9c4:	fa1f fa82 	uxth.w	sl, r2
   1a9c8:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
        q15_t *two_column_buf = buffer_a;
   1a9ca:	f8dd c070 	ldr.w	ip, [sp, #112]	@ 0x70
   1a9ce:	9546      	str	r5, [sp, #280]	@ 0x118
   1a9d0:	b28b      	uxth	r3, r1
   1a9d2:	9310      	str	r3, [sp, #64]	@ 0x40
   1a9d4:	fb02 f303 	mul.w	r3, r2, r3
   1a9d8:	9311      	str	r3, [sp, #68]	@ 0x44
   1a9da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1a9dc:	e9cd 7633 	strd	r7, r6, [sp, #204]	@ 0xcc
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   1a9e0:	2400      	movs	r4, #0
   1a9e2:	fb0a f303 	mul.w	r3, sl, r3
        q7_t *out = output_data;
   1a9e6:	46ae      	mov	lr, r5
   1a9e8:	9309      	str	r3, [sp, #36]	@ 0x24
   1a9ea:	4625      	mov	r5, r4
   1a9ec:	4644      	mov	r4, r8
   1a9ee:	46c8      	mov	r8, r9
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   1a9f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1a9f2:	2b00      	cmp	r3, #0
   1a9f4:	d063      	beq.n	1aabe <arm_convolve_s8+0x216>
                const int32_t base_idx_y = stride_y * i_out_y - pad_y;
   1a9f6:	f8bd 20a8 	ldrh.w	r2, [sp, #168]	@ 0xa8
   1a9fa:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	@ 0xa4
   1a9fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1aa00:	9813      	ldr	r0, [sp, #76]	@ 0x4c
                            arm_q7_to_q15_with_offset(
   1aa02:	f8cd e074 	str.w	lr, [sp, #116]	@ 0x74
                const int32_t base_idx_y = stride_y * i_out_y - pad_y;
   1aa06:	fb05 f202 	mul.w	r2, r5, r2
   1aa0a:	eba2 0b01 	sub.w	fp, r2, r1
   1aa0e:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	@ 0xa0
                            arm_q7_to_q15_with_offset(
   1aa12:	9535      	str	r5, [sp, #212]	@ 0xd4
   1aa14:	fb0b f103 	mul.w	r1, fp, r3
   1aa18:	9b40      	ldr	r3, [sp, #256]	@ 0x100
   1aa1a:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
   1aa1e:	1a89      	subs	r1, r1, r2
   1aa20:	fb00 3701 	mla	r7, r0, r1, r3
   1aa24:	4253      	negs	r3, r2
   1aa26:	930f      	str	r3, [sp, #60]	@ 0x3c
   1aa28:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	@ 0xb8
   1aa2c:	9314      	str	r3, [sp, #80]	@ 0x50
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   1aa2e:	2600      	movs	r6, #0
                for (i_ker_y = 0; i_ker_y < kernel_y; i_ker_y++)
   1aa30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1aa32:	b39b      	cbz	r3, 1aa9c <arm_convolve_s8+0x1f4>
   1aa34:	e9cd 7615 	strd	r7, r6, [sp, #84]	@ 0x54
   1aa38:	f8dd b06c 	ldr.w	fp, [sp, #108]	@ 0x6c
   1aa3c:	4639      	mov	r1, r7
   1aa3e:	2200      	movs	r2, #0
                    for (i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1aa40:	b314      	cbz	r4, 1aa88 <arm_convolve_s8+0x1e0>
   1aa42:	e9cd 210b 	strd	r2, r1, [sp, #44]	@ 0x2c
   1aa46:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
   1aa48:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
   1aa4c:	4689      	mov	r9, r1
   1aa4e:	4666      	mov	r6, ip
   1aa50:	2500      	movs	r5, #0
                        if (k_y < 0 || k_y >= input_y || k_x < 0 || k_x >= input_x)
   1aa52:	9b08      	ldr	r3, [sp, #32]
   1aa54:	459b      	cmp	fp, r3
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1aa56:	4642      	mov	r2, r8
                        if (k_y < 0 || k_y >= input_y || k_x < 0 || k_x >= input_x)
   1aa58:	d205      	bcs.n	1aa66 <arm_convolve_s8+0x1be>
   1aa5a:	2f00      	cmp	r7, #0
   1aa5c:	db03      	blt.n	1aa66 <arm_convolve_s8+0x1be>
   1aa5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1aa60:	429f      	cmp	r7, r3
   1aa62:	f2c0 80c2 	blt.w	1abea <arm_convolve_s8+0x342>
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
   1aa66:	2100      	movs	r1, #0
   1aa68:	4630      	mov	r0, r6
   1aa6a:	f00c f92b 	bl	26cc4 <memset>
                    for (i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1aa6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1aa70:	3501      	adds	r5, #1
   1aa72:	42ac      	cmp	r4, r5
                        two_column_buf += input_ch;
   1aa74:	4446      	add	r6, r8
                    for (i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1aa76:	4499      	add	r9, r3
   1aa78:	4457      	add	r7, sl
   1aa7a:	d1ea      	bne.n	1aa52 <arm_convolve_s8+0x1aa>
   1aa7c:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
   1aa80:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   1aa82:	e9dd 210b 	ldrd	r2, r1, [sp, #44]	@ 0x2c
   1aa86:	449c      	add	ip, r3
                for (i_ker_y = 0; i_ker_y < kernel_y; i_ker_y++)
   1aa88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1aa8a:	4419      	add	r1, r3
   1aa8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1aa8e:	449b      	add	fp, r3
   1aa90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1aa92:	3201      	adds	r2, #1
   1aa94:	429a      	cmp	r2, r3
   1aa96:	d1d3      	bne.n	1aa40 <arm_convolve_s8+0x198>
   1aa98:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	@ 0x54
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
   1aa9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1aa9e:	4563      	cmp	r3, ip
   1aaa0:	f000 80aa 	beq.w	1abf8 <arm_convolve_s8+0x350>
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
   1aaa4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   1aaa6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1aaa8:	441f      	add	r7, r3
   1aaaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   1aaac:	4413      	add	r3, r2
   1aaae:	930f      	str	r3, [sp, #60]	@ 0x3c
   1aab0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1aab2:	3601      	adds	r6, #1
   1aab4:	42b3      	cmp	r3, r6
   1aab6:	d1bb      	bne.n	1aa30 <arm_convolve_s8+0x188>
   1aab8:	f8dd e074 	ldr.w	lr, [sp, #116]	@ 0x74
   1aabc:	9d35      	ldr	r5, [sp, #212]	@ 0xd4
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
   1aabe:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   1aac0:	3501      	adds	r5, #1
   1aac2:	429d      	cmp	r5, r3
   1aac4:	db94      	blt.n	1a9f0 <arm_convolve_s8+0x148>
        if (two_column_buf != buffer_a)
   1aac6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1aac8:	9d46      	ldr	r5, [sp, #280]	@ 0x118
   1aaca:	4563      	cmp	r3, ip
   1aacc:	46c1      	mov	r9, r8
   1aace:	e9dd 7633 	ldrd	r7, r6, [sp, #204]	@ 0xcc
   1aad2:	46a0      	mov	r8, r4
   1aad4:	d07a      	beq.n	1abcc <arm_convolve_s8+0x324>
            for (i = 0; i < output_ch; i++)
   1aad6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   1aad8:	2a00      	cmp	r2, #0
   1aada:	d077      	beq.n	1abcc <arm_convolve_s8+0x324>
   1aadc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
            const q7_t *ker_a = filter_data;
   1aade:	f8dd c108 	ldr.w	ip, [sp, #264]	@ 0x108
    const q31_t remainder_mask = (1 << exponent) - 1;
   1aae2:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
   1aae6:	f1a3 0b04 	sub.w	fp, r3, #4
   1aaea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   1aaec:	4472      	add	r2, lr
   1aaee:	f1a3 0a04 	sub.w	sl, r3, #4
   1aaf2:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   1aaf4:	9209      	str	r2, [sp, #36]	@ 0x24
   1aaf6:	46a1      	mov	r9, r4
   1aaf8:	463c      	mov	r4, r7
                if (bias_data)
   1aafa:	9a44      	ldr	r2, [sp, #272]	@ 0x110
   1aafc:	2a00      	cmp	r2, #0
   1aafe:	f000 8095 	beq.w	1ac2c <arm_convolve_s8+0x384>
                while (col_count)
   1ab02:	992f      	ldr	r1, [sp, #188]	@ 0xbc
                    sum = bias_data[i];
   1ab04:	681a      	ldr	r2, [r3, #0]
                while (col_count)
   1ab06:	2900      	cmp	r1, #0
   1ab08:	f000 8095 	beq.w	1ac36 <arm_convolve_s8+0x38e>
   1ab0c:	992b      	ldr	r1, [sp, #172]	@ 0xac
                const q15_t *ip_as_col = buffer_a;
   1ab0e:	981c      	ldr	r0, [sp, #112]	@ 0x70
   1ab10:	e9cd 3e0c 	strd	r3, lr, [sp, #48]	@ 0x30
   1ab14:	eb0c 0701 	add.w	r7, ip, r1
    memcpy(&val, *in_q7, 4);
   1ab18:	f85c 3b04 	ldr.w	r3, [ip], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1ab1c:	fa2f f193 	sxtb16	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1ab20:	fa2f f383 	sxtb16	r3, r3
    memcpy(&val, *in_q15, 4);
   1ab24:	f8d0 8000 	ldr.w	r8, [r0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1ab28:	eac1 4e23 	pkhtb	lr, r1, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1ab2c:	eac3 4301 	pkhbt	r3, r3, r1, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1ab30:	fb23 2308 	smlad	r3, r3, r8, r2
    memcpy(&val, *in_q15, 4);
   1ab34:	6842      	ldr	r2, [r0, #4]
    *in_q15 += 2;
   1ab36:	3008      	adds	r0, #8
   1ab38:	fb2e 3202 	smlad	r2, lr, r2, r3
                while (col_count)
   1ab3c:	4567      	cmp	r7, ip
   1ab3e:	d1eb      	bne.n	1ab18 <arm_convolve_s8+0x270>
                while (col_count)
   1ab40:	9830      	ldr	r0, [sp, #192]	@ 0xc0
   1ab42:	992c      	ldr	r1, [sp, #176]	@ 0xb0
   1ab44:	e9dd 3e0c 	ldrd	r3, lr, [sp, #48]	@ 0x30
   1ab48:	2800      	cmp	r0, #0
   1ab4a:	d079      	beq.n	1ac40 <arm_convolve_s8+0x398>
   1ab4c:	eb07 0c00 	add.w	ip, r7, r0
                    sum += ker_a1 * ip_b1;
   1ab50:	f917 0b01 	ldrsb.w	r0, [r7], #1
   1ab54:	f831 8b02 	ldrh.w	r8, [r1], #2
                while (col_count)
   1ab58:	45bc      	cmp	ip, r7
                    sum += ker_a1 * ip_b1;
   1ab5a:	fb18 2200 	smlabb	r2, r8, r0, r2
                while (col_count)
   1ab5e:	d1f7      	bne.n	1ab50 <arm_convolve_s8+0x2a8>
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
   1ab60:	f85a 7f04 	ldr.w	r7, [sl, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ab64:	f85b 0f04 	ldr.w	r0, [fp, #4]!
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ab68:	ea27 71e7 	bic.w	r1, r7, r7, asr #31
   1ab6c:	fa02 f101 	lsl.w	r1, r2, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ab70:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ab74:	427a      	negs	r2, r7
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ab76:	2700      	movs	r7, #0
   1ab78:	fbc1 8700 	smlal	r8, r7, r1, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ab7c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ab80:	4641      	mov	r1, r8
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ab82:	2001      	movs	r0, #1
   1ab84:	4090      	lsls	r0, r2
    result = (int32_t)(mult.long_long >> 31);
   1ab86:	0fc9      	lsrs	r1, r1, #31
   1ab88:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ab8c:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
   1ab8e:	ea01 0700 	and.w	r7, r1, r0
    if (result < 0)
   1ab92:	4111      	asrs	r1, r2
    q31_t threshold = remainder_mask >> 1;
   1ab94:	ea4f 0060 	mov.w	r0, r0, asr #1
        threshold++;
   1ab98:	bf48      	it	mi
   1ab9a:	3001      	addmi	r0, #1
    if (remainder > threshold)
   1ab9c:	4287      	cmp	r7, r0
                sum += out_offset;
   1ab9e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
        result++;
   1aba0:	bfc8      	it	gt
   1aba2:	3101      	addgt	r1, #1
   1aba4:	440a      	add	r2, r1
                sum = MAX(sum, out_activation_min);
   1aba6:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   1aba8:	428a      	cmp	r2, r1
   1abaa:	bfb8      	it	lt
   1abac:	460a      	movlt	r2, r1
                sum = MIN(sum, out_activation_max);
   1abae:	9920      	ldr	r1, [sp, #128]	@ 0x80
   1abb0:	428a      	cmp	r2, r1
   1abb2:	bfa8      	it	ge
   1abb4:	460a      	movge	r2, r1
                *out++ = (q7_t)sum;
   1abb6:	f80e 2b01 	strb.w	r2, [lr], #1
            for (i = 0; i < output_ch; i++)
   1abba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1abbc:	4572      	cmp	r2, lr
   1abbe:	f103 0304 	add.w	r3, r3, #4
   1abc2:	d19a      	bne.n	1aafa <arm_convolve_s8+0x252>
   1abc4:	46c8      	mov	r8, r9
   1abc6:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
   1abca:	4627      	mov	r7, r4
        input_data += (input_x * input_y * input_ch);
   1abcc:	9b40      	ldr	r3, [sp, #256]	@ 0x100
   1abce:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
   1abd0:	4413      	add	r3, r2
   1abd2:	9340      	str	r3, [sp, #256]	@ 0x100
        output_data += (output_x * output_y * output_ch);
   1abd4:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1abd6:	441d      	add	r5, r3
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1abd8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   1abda:	3701      	adds	r7, #1
   1abdc:	42bb      	cmp	r3, r7
   1abde:	f47f aeeb 	bne.w	1a9b8 <arm_convolve_s8+0x110>
    return ARM_CMSIS_NN_SUCCESS;
   1abe2:	2000      	movs	r0, #0
}
   1abe4:	b037      	add	sp, #220	@ 0xdc
   1abe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            arm_q7_to_q15_with_offset(
   1abea:	e9dd 2313 	ldrd	r2, r3, [sp, #76]	@ 0x4c
   1abee:	4631      	mov	r1, r6
   1abf0:	4648      	mov	r0, r9
   1abf2:	f002 fea1 	bl	1d938 <arm_q7_to_q15_with_offset>
   1abf6:	e73a      	b.n	1aa6e <arm_convolve_s8+0x1c6>
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1abf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   1abfa:	9306      	str	r3, [sp, #24]
   1abfc:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   1abfe:	9305      	str	r3, [sp, #20]
   1ac00:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   1ac02:	9304      	str	r3, [sp, #16]
   1ac04:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
   1ac06:	9301      	str	r3, [sp, #4]
   1ac08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
   1ac0a:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
   1ac0c:	9300      	str	r3, [sp, #0]
   1ac0e:	f9bd 3080 	ldrsh.w	r3, [sp, #128]	@ 0x80
   1ac12:	9303      	str	r3, [sp, #12]
   1ac14:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	@ 0x7c
   1ac18:	9302      	str	r3, [sp, #8]
   1ac1a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   1ac1c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   1ac1e:	9842      	ldr	r0, [sp, #264]	@ 0x108
   1ac20:	4629      	mov	r1, r5
   1ac22:	f001 fd51 	bl	1c6c8 <arm_nn_mat_mult_kernel_s8_s16>
                    two_column_buf = buffer_a;
   1ac26:	46ac      	mov	ip, r5
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
   1ac28:	901d      	str	r0, [sp, #116]	@ 0x74
                    two_column_buf = buffer_a;
   1ac2a:	e73b      	b.n	1aaa4 <arm_convolve_s8+0x1fc>
                while (col_count)
   1ac2c:	992f      	ldr	r1, [sp, #188]	@ 0xbc
                q31_t sum = 0;
   1ac2e:	9a44      	ldr	r2, [sp, #272]	@ 0x110
                while (col_count)
   1ac30:	2900      	cmp	r1, #0
   1ac32:	f47f af6b 	bne.w	1ab0c <arm_convolve_s8+0x264>
                while (col_count)
   1ac36:	9830      	ldr	r0, [sp, #192]	@ 0xc0
                const q15_t *ip_as_col = buffer_a;
   1ac38:	991c      	ldr	r1, [sp, #112]	@ 0x70
                while (col_count)
   1ac3a:	4667      	mov	r7, ip
                while (col_count)
   1ac3c:	2800      	cmp	r0, #0
   1ac3e:	d185      	bne.n	1ab4c <arm_convolve_s8+0x2a4>
   1ac40:	46bc      	mov	ip, r7
   1ac42:	e78d      	b.n	1ab60 <arm_convolve_s8+0x2b8>
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   1ac44:	fb01 f703 	mul.w	r7, r1, r3
   1ac48:	fb02 f707 	mul.w	r7, r2, r7
    if (ctx->buf == NULL && arm_convolve_s8_get_buffer_size(input_dims, filter_dims) > 0)
   1ac4c:	2f00      	cmp	r7, #0
   1ac4e:	f77f ae3b 	ble.w	1a8c8 <arm_convolve_s8+0x20>
        return ARM_CMSIS_NN_ARG_ERROR;
   1ac52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1ac56:	e7c5      	b.n	1abe4 <arm_convolve_s8+0x33c>

0001ac58 <arm_convolve_s8_get_buffer_size>:
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
   1ac58:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1ac5c:	68c0      	ldr	r0, [r0, #12]
   1ac5e:	fb02 f000 	mul.w	r0, r2, r0
   1ac62:	fb03 f000 	mul.w	r0, r3, r0
#endif
}
   1ac66:	0080      	lsls	r0, r0, #2
   1ac68:	4770      	bx	lr
   1ac6a:	bf00      	nop

0001ac6c <arm_convolve_wrapper_s16>:
                                             const q7_t *filter_data,
                                             const cmsis_nn_dims *bias_dims,
                                             const int64_t *bias_data,
                                             const cmsis_nn_dims *output_dims,
                                             q15_t *output_data)
{
   1ac6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac70:	b085      	sub	sp, #20
   1ac72:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	@ 0x48
   1ac76:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
   1ac78:	f8dd 9050 	ldr.w	r9, [sp, #80]	@ 0x50
   1ac7c:	9002      	str	r0, [sp, #8]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
   1ac7e:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
   1ac82:	fb06 fb05 	mul.w	fp, r6, r5
   1ac86:	68de      	ldr	r6, [r3, #12]
{
   1ac88:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
   1ac8a:	9203      	str	r2, [sp, #12]
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
   1ac8c:	fb06 fb0b 	mul.w	fp, r6, fp
   1ac90:	f5bb 7f00 	cmp.w	fp, #512	@ 0x200
{
   1ac94:	e9dd 6a10 	ldrd	r6, sl, [sp, #64]	@ 0x40
   1ac98:	469e      	mov	lr, r3
   1ac9a:	468c      	mov	ip, r1
   1ac9c:	9501      	str	r5, [sp, #4]
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
   1ac9e:	da05      	bge.n	1acac <arm_convolve_wrapper_s16+0x40>
   1aca0:	698d      	ldr	r5, [r1, #24]
   1aca2:	2d01      	cmp	r5, #1
   1aca4:	d102      	bne.n	1acac <arm_convolve_wrapper_s16+0x40>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
   1aca6:	69cd      	ldr	r5, [r1, #28]
   1aca8:	2d01      	cmp	r5, #1
   1acaa:	d010      	beq.n	1acce <arm_convolve_wrapper_s16+0x62>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s16(ctx,
   1acac:	9b01      	ldr	r3, [sp, #4]
   1acae:	9a03      	ldr	r2, [sp, #12]
   1acb0:	9802      	ldr	r0, [sp, #8]
   1acb2:	930e      	str	r3, [sp, #56]	@ 0x38
   1acb4:	4661      	mov	r1, ip
   1acb6:	4673      	mov	r3, lr
   1acb8:	e9cd 8913 	strd	r8, r9, [sp, #76]	@ 0x4c
   1acbc:	e9cd a711 	strd	sl, r7, [sp, #68]	@ 0x44
   1acc0:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
                            bias_dims,
                            bias_data,
                            output_dims,
                            output_data);
#endif
}
   1acc4:	b005      	add	sp, #20
   1acc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s16(ctx,
   1acca:	f7ff bc2b 	b.w	1a524 <arm_convolve_s16>
        return arm_convolve_fast_s16(ctx,
   1acce:	e9cd 460f 	strd	r4, r6, [sp, #60]	@ 0x3c
   1acd2:	9c01      	ldr	r4, [sp, #4]
   1acd4:	940e      	str	r4, [sp, #56]	@ 0x38
   1acd6:	e9cd 8913 	strd	r8, r9, [sp, #76]	@ 0x4c
   1acda:	e9cd a711 	strd	sl, r7, [sp, #68]	@ 0x44
}
   1acde:	b005      	add	sp, #20
   1ace0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_fast_s16(ctx,
   1ace4:	f7ff ba1e 	b.w	1a124 <arm_convolve_fast_s16>

0001ace8 <arm_convolve_wrapper_s16_get_buffer_size>:

int32_t arm_convolve_wrapper_s16_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                 const cmsis_nn_dims *input_dims,
                                                 const cmsis_nn_dims *filter_dims,
                                                 const cmsis_nn_dims *output_dims)
{
   1ace8:	468c      	mov	ip, r1
    (void)conv_params;
    (void)output_dims;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    if (filter_dims->w * filter_dims->h * input_dims->c < 512 &&
   1acea:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
   1acee:	fb01 f303 	mul.w	r3, r1, r3
   1acf2:	f8dc 100c 	ldr.w	r1, [ip, #12]
   1acf6:	fb01 f303 	mul.w	r3, r1, r3
   1acfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
   1acfe:	da02      	bge.n	1ad06 <arm_convolve_wrapper_s16_get_buffer_size+0x1e>
   1ad00:	6983      	ldr	r3, [r0, #24]
   1ad02:	2b01      	cmp	r3, #1
   1ad04:	d003      	beq.n	1ad0e <arm_convolve_wrapper_s16_get_buffer_size+0x26>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
    {
        return arm_convolve_fast_s16_get_buffer_size(input_dims, filter_dims);
    }

    return arm_convolve_s16_get_buffer_size(input_dims, filter_dims);
   1ad06:	4611      	mov	r1, r2
   1ad08:	4660      	mov	r0, ip
   1ad0a:	f7ff bdcb 	b.w	1a8a4 <arm_convolve_s16_get_buffer_size>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
   1ad0e:	69c3      	ldr	r3, [r0, #28]
   1ad10:	2b01      	cmp	r3, #1
   1ad12:	d1f8      	bne.n	1ad06 <arm_convolve_wrapper_s16_get_buffer_size+0x1e>
        return arm_convolve_fast_s16_get_buffer_size(input_dims, filter_dims);
   1ad14:	4611      	mov	r1, r2
   1ad16:	4660      	mov	r0, ip
   1ad18:	f7ff bbfa 	b.w	1a510 <arm_convolve_fast_s16_get_buffer_size>

0001ad1c <arm_convolve_wrapper_s8>:
                                            const q7_t *filter_data,
                                            const cmsis_nn_dims *bias_dims,
                                            const int32_t *bias_data,
                                            const cmsis_nn_dims *output_dims,
                                            q7_t *output_data)
{
   1ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
   1ad20:	690d      	ldr	r5, [r1, #16]
{
   1ad22:	b083      	sub	sp, #12
   1ad24:	e9dd 470c 	ldrd	r4, r7, [sp, #48]	@ 0x30
   1ad28:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	@ 0x38
   1ad2c:	e9dd 9610 	ldrd	r9, r6, [sp, #64]	@ 0x40
   1ad30:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
   1ad34:	9000      	str	r0, [sp, #0]
   1ad36:	468c      	mov	ip, r1
   1ad38:	9201      	str	r2, [sp, #4]
   1ad3a:	469e      	mov	lr, r3
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
   1ad3c:	b90d      	cbnz	r5, 1ad42 <arm_convolve_wrapper_s8+0x26>
   1ad3e:	694d      	ldr	r5, [r1, #20]
   1ad40:	b1ed      	cbz	r5, 1ad7e <arm_convolve_wrapper_s8+0x62>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((input_dims->h == 1) && (output_dims->w % 4 == 0) && conv_params->dilation.w == 1 && (filter_dims->h == 1))
   1ad42:	f8de 3004 	ldr.w	r3, [lr, #4]
   1ad46:	2b01      	cmp	r3, #1
   1ad48:	d109      	bne.n	1ad5e <arm_convolve_wrapper_s8+0x42>
   1ad4a:	68b3      	ldr	r3, [r6, #8]
   1ad4c:	079b      	lsls	r3, r3, #30
   1ad4e:	d106      	bne.n	1ad5e <arm_convolve_wrapper_s8+0x42>
   1ad50:	f8dc 3018 	ldr.w	r3, [ip, #24]
   1ad54:	2b01      	cmp	r3, #1
   1ad56:	d102      	bne.n	1ad5e <arm_convolve_wrapper_s8+0x42>
   1ad58:	687b      	ldr	r3, [r7, #4]
   1ad5a:	2b01      	cmp	r3, #1
   1ad5c:	d02d      	beq.n	1adba <arm_convolve_wrapper_s8+0x9e>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
   1ad5e:	9a01      	ldr	r2, [sp, #4]
   1ad60:	9800      	ldr	r0, [sp, #0]
   1ad62:	940c      	str	r4, [sp, #48]	@ 0x30
   1ad64:	4673      	mov	r3, lr
   1ad66:	4661      	mov	r1, ip
   1ad68:	e9cd 6811 	strd	r6, r8, [sp, #68]	@ 0x44
   1ad6c:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1ad70:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	@ 0x34
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
   1ad74:	b003      	add	sp, #12
   1ad76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
   1ad7a:	f7ff bd95 	b.w	1a8a8 <arm_convolve_s8>
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
   1ad7e:	688d      	ldr	r5, [r1, #8]
   1ad80:	2d01      	cmp	r5, #1
   1ad82:	d1de      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
   1ad84:	68cd      	ldr	r5, [r1, #12]
   1ad86:	2d01      	cmp	r5, #1
   1ad88:	d1db      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
   1ad8a:	68bd      	ldr	r5, [r7, #8]
   1ad8c:	2d01      	cmp	r5, #1
   1ad8e:	d1d8      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
   1ad90:	687d      	ldr	r5, [r7, #4]
   1ad92:	2d01      	cmp	r5, #1
   1ad94:	d1d5      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
   1ad96:	698d      	ldr	r5, [r1, #24]
   1ad98:	2d01      	cmp	r5, #1
   1ad9a:	d1d2      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
   1ad9c:	69cd      	ldr	r5, [r1, #28]
   1ad9e:	2d01      	cmp	r5, #1
   1ada0:	d1cf      	bne.n	1ad42 <arm_convolve_wrapper_s8+0x26>
        return arm_convolve_1x1_s8_fast(ctx,
   1ada2:	e9cd 6811 	strd	r6, r8, [sp, #68]	@ 0x44
   1ada6:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1adaa:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	@ 0x34
   1adae:	940c      	str	r4, [sp, #48]	@ 0x30
}
   1adb0:	b003      	add	sp, #12
   1adb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
   1adb6:	f7ff b97d 	b.w	1a0b4 <arm_convolve_1x1_s8_fast>
        return arm_convolve_1_x_n_s8(ctx,
   1adba:	9a01      	ldr	r2, [sp, #4]
   1adbc:	9800      	ldr	r0, [sp, #0]
   1adbe:	940c      	str	r4, [sp, #48]	@ 0x30
   1adc0:	4673      	mov	r3, lr
   1adc2:	4661      	mov	r1, ip
   1adc4:	e9cd 6811 	strd	r6, r8, [sp, #68]	@ 0x44
   1adc8:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1adcc:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	@ 0x34
}
   1add0:	b003      	add	sp, #12
   1add2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
   1add6:	f7ff b949 	b.w	1a06c <arm_convolve_1_x_n_s8>
   1adda:	bf00      	nop

0001addc <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
   1addc:	4684      	mov	ip, r0
   1adde:	4608      	mov	r0, r1
   1ade0:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
   1ade2:	f8dc 2010 	ldr.w	r2, [ip, #16]
   1ade6:	b912      	cbnz	r2, 1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   1ade8:	f8dc 2014 	ldr.w	r2, [ip, #20]
   1adec:	b172      	cbz	r2, 1ae0c <arm_convolve_wrapper_s8_get_buffer_size+0x30>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
    }
    else if ((input_dims->h == 1) && (output_dims->w % 4 == 0) && (conv_params->dilation.w == 1) &&
   1adee:	6842      	ldr	r2, [r0, #4]
   1adf0:	2a01      	cmp	r2, #1
   1adf2:	d109      	bne.n	1ae08 <arm_convolve_wrapper_s8_get_buffer_size+0x2c>
   1adf4:	689b      	ldr	r3, [r3, #8]
   1adf6:	079b      	lsls	r3, r3, #30
   1adf8:	d106      	bne.n	1ae08 <arm_convolve_wrapper_s8_get_buffer_size+0x2c>
   1adfa:	f8dc 3018 	ldr.w	r3, [ip, #24]
   1adfe:	2b01      	cmp	r3, #1
   1ae00:	d102      	bne.n	1ae08 <arm_convolve_wrapper_s8_get_buffer_size+0x2c>
   1ae02:	684b      	ldr	r3, [r1, #4]
   1ae04:	2b01      	cmp	r3, #1
   1ae06:	d019      	beq.n	1ae3c <arm_convolve_wrapper_s8_get_buffer_size+0x60>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
   1ae08:	f7ff bf26 	b.w	1ac58 <arm_convolve_s8_get_buffer_size>
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (conv_params->stride.w == 1) &&
   1ae0c:	f8dc 2008 	ldr.w	r2, [ip, #8]
   1ae10:	2a01      	cmp	r2, #1
   1ae12:	d1ec      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   1ae14:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1ae18:	2a01      	cmp	r2, #1
   1ae1a:	d1e8      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1) &&
   1ae1c:	688a      	ldr	r2, [r1, #8]
   1ae1e:	2a01      	cmp	r2, #1
   1ae20:	d1e5      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   1ae22:	684a      	ldr	r2, [r1, #4]
   1ae24:	2a01      	cmp	r2, #1
   1ae26:	d1e2      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
   1ae28:	f8dc 2018 	ldr.w	r2, [ip, #24]
   1ae2c:	2a01      	cmp	r2, #1
   1ae2e:	d1de      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (conv_params->dilation.w == 1 && conv_params->dilation.h == 1))
   1ae30:	f8dc 201c 	ldr.w	r2, [ip, #28]
   1ae34:	2a01      	cmp	r2, #1
   1ae36:	d1da      	bne.n	1adee <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
   1ae38:	f7ff b972 	b.w	1a120 <arm_convolve_1x1_s8_fast_get_buffer_size>
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
   1ae3c:	f7ff b938 	b.w	1a0b0 <arm_convolve_1_x_n_s8_get_buffer_size>

0001ae40 <arm_depthwise_conv_3x3_s8>:
                                              const q7_t *kernel,
                                              const cmsis_nn_dims *bias_dims,
                                              const int32_t *bias,
                                              const cmsis_nn_dims *output_dims,
                                              q7_t *output)
{
   1ae40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae44:	461e      	mov	r6, r3
   1ae46:	460b      	mov	r3, r1
   1ae48:	b0a9      	sub	sp, #164	@ 0xa4
   1ae4a:	4614      	mov	r4, r2
    const int32_t input_y = input_dims->h;
    const int32_t input_ch = input_dims->c;
    const int32_t output_ch = output_dims->c;
    const int32_t pad_x = dw_conv_params->padding.w;
    const int32_t pad_y = dw_conv_params->padding.h;
    const int32_t stride_x = dw_conv_params->stride.w;
   1ae4c:	68d8      	ldr	r0, [r3, #12]
{
   1ae4e:	9937      	ldr	r1, [sp, #220]	@ 0xdc
    const int32_t stride_x = dw_conv_params->stride.w;
   1ae50:	901a      	str	r0, [sp, #104]	@ 0x68
    const int32_t stride_y = dw_conv_params->stride.h;
    const int32_t *output_shift = quant_params->shift;
   1ae52:	6860      	ldr	r0, [r4, #4]
   1ae54:	9018      	str	r0, [sp, #96]	@ 0x60
    const int32_t *output_mult = quant_params->multiplier;
   1ae56:	6820      	ldr	r0, [r4, #0]
    const int32_t input_ch = input_dims->c;
   1ae58:	f8d6 900c 	ldr.w	r9, [r6, #12]
    const int32_t input_offset = dw_conv_params->input_offset;
    const int32_t output_activation_min = dw_conv_params->activation.min;
    const int32_t output_activation_max = dw_conv_params->activation.max;

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
   1ae5c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    const int32_t *output_mult = quant_params->multiplier;
   1ae60:	9017      	str	r0, [sp, #92]	@ 0x5c
    const int32_t output_x = output_dims->w;
   1ae62:	6888      	ldr	r0, [r1, #8]
   1ae64:	9019      	str	r0, [sp, #100]	@ 0x64
    const int32_t output_offset = dw_conv_params->output_offset;
   1ae66:	6858      	ldr	r0, [r3, #4]
    const int32_t pad_x = dw_conv_params->padding.w;
   1ae68:	695f      	ldr	r7, [r3, #20]
    const int32_t pad_y = dw_conv_params->padding.h;
   1ae6a:	699a      	ldr	r2, [r3, #24]
    const int32_t stride_y = dw_conv_params->stride.h;
   1ae6c:	f8d3 c010 	ldr.w	ip, [r3, #16]
    const int32_t output_y = output_dims->h;
   1ae70:	6849      	ldr	r1, [r1, #4]
    const int32_t input_offset = dw_conv_params->input_offset;
   1ae72:	f8d3 b000 	ldr.w	fp, [r3]
    const int32_t output_offset = dw_conv_params->output_offset;
   1ae76:	9012      	str	r0, [sp, #72]	@ 0x48
    if (input_ch != output_ch)
   1ae78:	45f1      	cmp	r9, lr
    const int32_t output_activation_min = dw_conv_params->activation.min;
   1ae7a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
    const int32_t output_activation_max = dw_conv_params->activation.max;
   1ae7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
{
   1ae7e:	9d33      	ldr	r5, [sp, #204]	@ 0xcc
    const int32_t pad_x = dw_conv_params->padding.w;
   1ae80:	9723      	str	r7, [sp, #140]	@ 0x8c
    const int32_t input_y = input_dims->h;
   1ae82:	e9d6 6a01 	ldrd	r6, sl, [r6, #4]
    const int32_t output_y = output_dims->h;
   1ae86:	9124      	str	r1, [sp, #144]	@ 0x90
    const int32_t output_activation_min = dw_conv_params->activation.min;
   1ae88:	900f      	str	r0, [sp, #60]	@ 0x3c
    const int32_t output_activation_max = dw_conv_params->activation.max;
   1ae8a:	9310      	str	r3, [sp, #64]	@ 0x40
    if (input_ch != output_ch)
   1ae8c:	f040 827b 	bne.w	1b386 <arm_depthwise_conv_3x3_s8+0x546>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
    }
    /* Check input constraints pad_x <= 1 */
    if (pad_x > 1 || filter_dims->w != 3 || filter_dims->h != 3)
   1ae90:	2f01      	cmp	r7, #1
   1ae92:	f300 8278 	bgt.w	1b386 <arm_depthwise_conv_3x3_s8+0x546>
   1ae96:	68ab      	ldr	r3, [r5, #8]
   1ae98:	2b03      	cmp	r3, #3
   1ae9a:	f040 8274 	bne.w	1b386 <arm_depthwise_conv_3x3_s8+0x546>
   1ae9e:	686b      	ldr	r3, [r5, #4]
   1aea0:	2b03      	cmp	r3, #3
   1aea2:	f040 8270 	bne.w	1b386 <arm_depthwise_conv_3x3_s8+0x546>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
    }
    const int32_t *bias_base = bias;
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1aea6:	2900      	cmp	r1, #0
   1aea8:	f1c2 0700 	rsb	r7, r2, #0
   1aeac:	f340 825d 	ble.w	1b36a <arm_depthwise_conv_3x3_s8+0x52a>
   1aeb0:	eb06 0e02 	add.w	lr, r6, r2
   1aeb4:	4611      	mov	r1, r2
   1aeb6:	f1a9 0204 	sub.w	r2, r9, #4
   1aeba:	0893      	lsrs	r3, r2, #2
   1aebc:	f022 0203 	bic.w	r2, r2, #3
   1aec0:	921d      	str	r2, [sp, #116]	@ 0x74
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1aec2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    const q31_t remainder_mask = (1 << exponent) - 1;
   1aec4:	f8cd a098 	str.w	sl, [sp, #152]	@ 0x98
   1aec8:	f1c2 0800 	rsb	r8, r2, #0
   1aecc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   1aece:	f8cd 900c 	str.w	r9, [sp, #12]
   1aed2:	3210      	adds	r2, #16
   1aed4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1aed8:	3301      	adds	r3, #1
   1aeda:	009b      	lsls	r3, r3, #2
   1aedc:	931c      	str	r3, [sp, #112]	@ 0x70
                    out_buff1 = *bias++;
                    out_buff2 = *bias++;
                    out_buff3 = *bias++;
                }

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1aede:	fb09 f30a 	mul.w	r3, r9, sl
   1aee2:	9301      	str	r3, [sp, #4]
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);

                    if ((input_x - in_w) >= 3)
                    {
                        in_val = arm_nn_read_q7x4(input_ptr + (input_ch << 1));
   1aee4:	ea4f 0349 	mov.w	r3, r9, lsl #1
   1aee8:	9309      	str	r3, [sp, #36]	@ 0x24
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
                    }

                    input_ptr += (input_ch * input_x);
                    kernel_ptr += (input_ch * 3);
   1aeea:	eb09 0349 	add.w	r3, r9, r9, lsl #1
   1aeee:	9307      	str	r3, [sp, #28]
   1aef0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   1aef2:	9211      	str	r2, [sp, #68]	@ 0x44
   1aef4:	fb03 f309 	mul.w	r3, r3, r9
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1aef8:	2500      	movs	r5, #0
   1aefa:	931b      	str	r3, [sp, #108]	@ 0x6c
   1aefc:	fb09 f308 	mul.w	r3, r9, r8
   1af00:	9325      	str	r3, [sp, #148]	@ 0x94
   1af02:	46e2      	mov	sl, ip
   1af04:	462e      	mov	r6, r5
   1af06:	f8cd 809c 	str.w	r8, [sp, #156]	@ 0x9c
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1af0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1af0c:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
   1af10:	2b00      	cmp	r3, #0
   1af12:	920e      	str	r2, [sp, #56]	@ 0x38
   1af14:	f340 821f 	ble.w	1b356 <arm_depthwise_conv_3x3_s8+0x516>
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
   1af18:	9b03      	ldr	r3, [sp, #12]
   1af1a:	9834      	ldr	r0, [sp, #208]	@ 0xd0
   1af1c:	9620      	str	r6, [sp, #128]	@ 0x80
   1af1e:	fb03 f302 	mul.w	r3, r3, r2
   1af22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1af26:	18c3      	adds	r3, r0, r3
   1af28:	9313      	str	r3, [sp, #76]	@ 0x4c
   1af2a:	9801      	ldr	r0, [sp, #4]
                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1af2c:	18bb      	adds	r3, r7, r2
   1af2e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   1af30:	fb00 2003 	mla	r0, r0, r3, r2
   1af34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   1af36:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   1af38:	4413      	add	r3, r2
   1af3a:	9300      	str	r3, [sp, #0]
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1af3c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   1af3e:	9304      	str	r3, [sp, #16]
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1af40:	4673      	mov	r3, lr
   1af42:	2b03      	cmp	r3, #3
   1af44:	e9cd a71e 	strd	sl, r7, [sp, #120]	@ 0x78
   1af48:	e9cd e121 	strd	lr, r1, [sp, #132]	@ 0x84
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1af4c:	f04f 0400 	mov.w	r4, #0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1af50:	bfa8      	it	ge
   1af52:	2303      	movge	r3, #3
   1af54:	9302      	str	r3, [sp, #8]
   1af56:	9414      	str	r4, [sp, #80]	@ 0x50
            for (; in_ch <= (input_ch - 4); in_ch += 4)
   1af58:	9b03      	ldr	r3, [sp, #12]
   1af5a:	2b03      	cmp	r3, #3
   1af5c:	f340 8210 	ble.w	1b380 <arm_depthwise_conv_3x3_s8+0x540>
   1af60:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
   1af62:	f8dd a060 	ldr.w	sl, [sp, #96]	@ 0x60
            bias = bias_base;
   1af66:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
   1af68:	442b      	add	r3, r5
   1af6a:	9308      	str	r3, [sp, #32]
   1af6c:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
   1af6e:	eb03 0e00 	add.w	lr, r3, r0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1af72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1af74:	9305      	str	r3, [sp, #20]
            bias = bias_base;
   1af76:	e9cd 5015 	strd	r5, r0, [sp, #84]	@ 0x54
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1af7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
            bias = bias_base;
   1af7c:	f8cd e018 	str.w	lr, [sp, #24]
   1af80:	f8dd e048 	ldr.w	lr, [sp, #72]	@ 0x48
   1af84:	4699      	mov	r9, r3
                if (bias)
   1af86:	2a00      	cmp	r2, #0
   1af88:	f000 81f3 	beq.w	1b372 <arm_depthwise_conv_3x3_s8+0x532>
                    out_buff1 = *bias++;
   1af8c:	e9d2 5400 	ldrd	r5, r4, [r2]
                    out_buff3 = *bias++;
   1af90:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   1af94:	3210      	adds	r2, #16
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1af96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1af98:	9e02      	ldr	r6, [sp, #8]
   1af9a:	42b3      	cmp	r3, r6
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
   1af9c:	e9dd 7c05 	ldrd	r7, ip, [sp, #20]
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1afa0:	da6b      	bge.n	1b07a <arm_depthwise_conv_3x3_s8+0x23a>
   1afa2:	e9cd 2e0a 	strd	r2, lr, [sp, #40]	@ 0x28
   1afa6:	e9cd a90c 	strd	sl, r9, [sp, #48]	@ 0x30
   1afaa:	4698      	mov	r8, r3
   1afac:	4666      	mov	r6, ip
                    if (ker_w_start == 0)
   1afae:	9b04      	ldr	r3, [sp, #16]
   1afb0:	2b00      	cmp	r3, #0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1afb2:	f108 0801 	add.w	r8, r8, #1
                    if (ker_w_start == 0)
   1afb6:	db1a      	blt.n	1afee <arm_depthwise_conv_3x3_s8+0x1ae>
    memcpy(&val, in_q7, 4);
   1afb8:	6833      	ldr	r3, [r6, #0]
   1afba:	683a      	ldr	r2, [r7, #0]
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1afbc:	fa4b f983 	sxtab	r9, fp, r3
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1afc0:	f343 2e07 	sbfx	lr, r3, #8, #8
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1afc4:	fa4f fa82 	sxtb.w	sl, r2
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1afc8:	44de      	add	lr, fp
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1afca:	f343 4c07 	sbfx	ip, r3, #16, #8
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1afce:	fb0a 5509 	mla	r5, sl, r9, r5
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1afd2:	f342 2907 	sbfx	r9, r2, #8, #8
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1afd6:	44dc      	add	ip, fp
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1afd8:	eb0b 6323 	add.w	r3, fp, r3, asr #24
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1afdc:	fb09 440e 	mla	r4, r9, lr, r4
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1afe0:	f342 4e07 	sbfx	lr, r2, #16, #8
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1afe4:	1612      	asrs	r2, r2, #24
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1afe6:	fb0e 000c 	mla	r0, lr, ip, r0
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1afea:	fb02 1103 	mla	r1, r2, r3, r1
   1afee:	9a03      	ldr	r2, [sp, #12]
   1aff0:	58b3      	ldr	r3, [r6, r2]
   1aff2:	58ba      	ldr	r2, [r7, r2]
                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1aff4:	fa4b f983 	sxtab	r9, fp, r3
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1aff8:	f343 2e07 	sbfx	lr, r3, #8, #8
                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1affc:	fa4f fa82 	sxtb.w	sl, r2
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b000:	44de      	add	lr, fp
                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1b002:	fb0a 5509 	mla	r5, sl, r9, r5
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b006:	f342 2907 	sbfx	r9, r2, #8, #8
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b00a:	f343 4c07 	sbfx	ip, r3, #16, #8
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b00e:	fb09 440e 	mla	r4, r9, lr, r4
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1b012:	eb0b 6323 	add.w	r3, fp, r3, asr #24
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b016:	f342 4e07 	sbfx	lr, r2, #16, #8
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1b01a:	1612      	asrs	r2, r2, #24
   1b01c:	fb02 1103 	mla	r1, r2, r3, r1
                    if ((input_x - in_w) >= 3)
   1b020:	9b00      	ldr	r3, [sp, #0]
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b022:	44dc      	add	ip, fp
                    if ((input_x - in_w) >= 3)
   1b024:	2b02      	cmp	r3, #2
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b026:	fb0e 000c 	mla	r0, lr, ip, r0
                    if ((input_x - in_w) >= 3)
   1b02a:	dd1b      	ble.n	1b064 <arm_depthwise_conv_3x3_s8+0x224>
   1b02c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1b02e:	5993      	ldr	r3, [r2, r6]
   1b030:	59d2      	ldr	r2, [r2, r7]
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1b032:	fa4b f983 	sxtab	r9, fp, r3
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b036:	f343 2e07 	sbfx	lr, r3, #8, #8
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1b03a:	fa4f fa82 	sxtb.w	sl, r2
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b03e:	44de      	add	lr, fp
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b040:	f343 4c07 	sbfx	ip, r3, #16, #8
                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
   1b044:	fb0a 5509 	mla	r5, sl, r9, r5
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b048:	f342 2907 	sbfx	r9, r2, #8, #8
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b04c:	44dc      	add	ip, fp
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1b04e:	eb0b 6323 	add.w	r3, fp, r3, asr #24
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
   1b052:	fb09 440e 	mla	r4, r9, lr, r4
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b056:	f342 4e07 	sbfx	lr, r2, #16, #8
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1b05a:	1612      	asrs	r2, r2, #24
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
   1b05c:	fb0e 000c 	mla	r0, lr, ip, r0
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
   1b060:	fb02 1103 	mla	r1, r2, r3, r1
                    input_ptr += (input_ch * input_x);
   1b064:	9b01      	ldr	r3, [sp, #4]
   1b066:	441e      	add	r6, r3
                    kernel_ptr += (input_ch * 3);
   1b068:	9b07      	ldr	r3, [sp, #28]
   1b06a:	441f      	add	r7, r3
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b06c:	9b02      	ldr	r3, [sp, #8]
   1b06e:	4598      	cmp	r8, r3
   1b070:	d19d      	bne.n	1afae <arm_depthwise_conv_3x3_s8+0x16e>
   1b072:	e9dd 2e0a 	ldrd	r2, lr, [sp, #40]	@ 0x28
   1b076:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	@ 0x30
                }

                out_buff0 = arm_nn_requantize(out_buff0, output_mult[in_ch + 0], output_shift[in_ch + 0]);
   1b07a:	f8da 6000 	ldr.w	r6, [sl]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b07e:	f8d9 3000 	ldr.w	r3, [r9]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b082:	ea26 7ce6 	bic.w	ip, r6, r6, asr #31
   1b086:	fa05 fc0c 	lsl.w	ip, r5, ip
   1b08a:	4276      	negs	r6, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b08c:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
   1b090:	2700      	movs	r7, #0
   1b092:	fbcc 5703 	smlal	r5, r7, ip, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b096:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b09a:	2301      	movs	r3, #1
   1b09c:	40b3      	lsls	r3, r6
    result = (int32_t)(mult.long_long >> 31);
   1b09e:	0fed      	lsrs	r5, r5, #31
   1b0a0:	ea45 0547 	orr.w	r5, r5, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b0a4:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1b0a6:	ea05 0703 	and.w	r7, r5, r3
    if (result < 0)
   1b0aa:	4135      	asrs	r5, r6
    q31_t threshold = remainder_mask >> 1;
   1b0ac:	ea4f 0363 	mov.w	r3, r3, asr #1
                out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch + 1]);
   1b0b0:	f8da 6004 	ldr.w	r6, [sl, #4]
        threshold++;
   1b0b4:	bf48      	it	mi
   1b0b6:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b0b8:	429f      	cmp	r7, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b0ba:	ea26 7ce6 	bic.w	ip, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b0be:	f8d9 3004 	ldr.w	r3, [r9, #4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b0c2:	fa04 fc0c 	lsl.w	ip, r4, ip
   1b0c6:	f1c6 0600 	rsb	r6, r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b0ca:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
   1b0ce:	f04f 0700 	mov.w	r7, #0
   1b0d2:	fbcc 4703 	smlal	r4, r7, ip, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b0d6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b0da:	f04f 0301 	mov.w	r3, #1
   1b0de:	fa03 f306 	lsl.w	r3, r3, r6
    result = (int32_t)(mult.long_long >> 31);
   1b0e2:	ea4f 74d4 	mov.w	r4, r4, lsr #31
   1b0e6:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b0ea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1b0ee:	ea04 0703 	and.w	r7, r4, r3
        result++;
   1b0f2:	bfc8      	it	gt
   1b0f4:	3501      	addgt	r5, #1
    q31_t threshold = remainder_mask >> 1;
   1b0f6:	105b      	asrs	r3, r3, #1
    if (result < 0)
   1b0f8:	4134      	asrs	r4, r6
                out_buff2 = arm_nn_requantize(out_buff2, output_mult[in_ch + 2], output_shift[in_ch + 2]);
   1b0fa:	f8da 6008 	ldr.w	r6, [sl, #8]
        threshold++;
   1b0fe:	bf48      	it	mi
   1b100:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b102:	429f      	cmp	r7, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b104:	ea26 7ce6 	bic.w	ip, r6, r6, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b108:	f8d9 3008 	ldr.w	r3, [r9, #8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b10c:	fa00 fc0c 	lsl.w	ip, r0, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b110:	f04f 0700 	mov.w	r7, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b114:	f1c6 0000 	rsb	r0, r6, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b118:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
   1b11c:	fbcc 6703 	smlal	r6, r7, ip, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b120:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    result = (int32_t)(mult.long_long >> 31);
   1b124:	ea4f 73d6 	mov.w	r3, r6, lsr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b128:	f04f 0601 	mov.w	r6, #1
    result = (int32_t)(mult.long_long >> 31);
   1b12c:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b130:	fa06 f700 	lsl.w	r7, r6, r0
   1b134:	f107 37ff 	add.w	r7, r7, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1b138:	ea03 0c07 	and.w	ip, r3, r7
        result++;
   1b13c:	bfc8      	it	gt
   1b13e:	3401      	addgt	r4, #1
    q31_t threshold = remainder_mask >> 1;
   1b140:	4137      	asrs	r7, r6
    if (result < 0)
   1b142:	fa53 f600 	asrs.w	r6, r3, r0
                out_buff3 = arm_nn_requantize(out_buff3, output_mult[in_ch + 3], output_shift[in_ch + 3]);
   1b146:	f8da 000c 	ldr.w	r0, [sl, #12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b14a:	f8d9 300c 	ldr.w	r3, [r9, #12]
        threshold++;
   1b14e:	bf48      	it	mi
   1b150:	3701      	addmi	r7, #1
    if (remainder > threshold)
   1b152:	45bc      	cmp	ip, r7
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b154:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
   1b158:	fa01 f707 	lsl.w	r7, r1, r7
   1b15c:	f1c0 0000 	rsb	r0, r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b160:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1b164:	f04f 0c00 	mov.w	ip, #0
   1b168:	fbc7 1c03 	smlal	r1, ip, r7, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b16c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b170:	f04f 0301 	mov.w	r3, #1
   1b174:	fa03 f300 	lsl.w	r3, r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1b178:	ea4f 71d1 	mov.w	r1, r1, lsr #31
   1b17c:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b180:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
        result++;
   1b184:	bfc8      	it	gt
   1b186:	3601      	addgt	r6, #1
    int32_t remainder = remainder_mask & dividend;
   1b188:	ea01 0703 	and.w	r7, r1, r3
    if (result < 0)
   1b18c:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   1b18e:	ea4f 0363 	mov.w	r3, r3, asr #1
                out_buff0 += output_offset;
                out_buff1 += output_offset;
                out_buff2 += output_offset;
                out_buff3 += output_offset;

                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
   1b192:	980f      	ldr	r0, [sp, #60]	@ 0x3c
        threshold++;
   1b194:	bf48      	it	mi
   1b196:	3301      	addmi	r3, #1
                out_buff0 += output_offset;
   1b198:	4475      	add	r5, lr
    if (remainder > threshold)
   1b19a:	429f      	cmp	r7, r3
                out_buff1 += output_offset;
   1b19c:	4474      	add	r4, lr
                out_buff2 += output_offset;
   1b19e:	eb0e 0306 	add.w	r3, lr, r6
        result++;
   1b1a2:	bfc8      	it	gt
   1b1a4:	3101      	addgt	r1, #1
                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
   1b1a6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
   1b1a8:	4285      	cmp	r5, r0
   1b1aa:	bfb8      	it	lt
   1b1ac:	4605      	movlt	r5, r0
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
   1b1ae:	4284      	cmp	r4, r0
   1b1b0:	bfb8      	it	lt
   1b1b2:	4604      	movlt	r4, r0
                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
   1b1b4:	42b5      	cmp	r5, r6
   1b1b6:	bfa8      	it	ge
   1b1b8:	4635      	movge	r5, r6
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
   1b1ba:	4283      	cmp	r3, r0
   1b1bc:	bfb8      	it	lt
   1b1be:	4603      	movlt	r3, r0
                out_buff3 += output_offset;
   1b1c0:	4471      	add	r1, lr
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
   1b1c2:	42b4      	cmp	r4, r6
   1b1c4:	bfa8      	it	ge
   1b1c6:	4634      	movge	r4, r6
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
   1b1c8:	4281      	cmp	r1, r0
   1b1ca:	bfb8      	it	lt
   1b1cc:	4601      	movlt	r1, r0
            for (; in_ch <= (input_ch - 4); in_ch += 4)
   1b1ce:	9806      	ldr	r0, [sp, #24]
   1b1d0:	3004      	adds	r0, #4
   1b1d2:	9006      	str	r0, [sp, #24]
   1b1d4:	9805      	ldr	r0, [sp, #20]
   1b1d6:	3004      	adds	r0, #4
   1b1d8:	9005      	str	r0, [sp, #20]

                output[out_idx++] = (int8_t)out_buff0;
   1b1da:	2000      	movs	r0, #0
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
   1b1dc:	42b3      	cmp	r3, r6
                output[out_idx++] = (int8_t)out_buff0;
   1b1de:	f365 0007 	bfi	r0, r5, #0, #8
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
   1b1e2:	bfa8      	it	ge
   1b1e4:	4633      	movge	r3, r6
                output[out_idx++] = (int8_t)out_buff0;
   1b1e6:	f364 200f 	bfi	r0, r4, #8, #8
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
   1b1ea:	42b1      	cmp	r1, r6
   1b1ec:	bfa8      	it	ge
   1b1ee:	4631      	movge	r1, r6
                output[out_idx++] = (int8_t)out_buff0;
   1b1f0:	f363 4017 	bfi	r0, r3, #16, #8
   1b1f4:	9b08      	ldr	r3, [sp, #32]
   1b1f6:	f361 601f 	bfi	r0, r1, #24, #8
   1b1fa:	f843 0b04 	str.w	r0, [r3], #4
   1b1fe:	9308      	str	r3, [sp, #32]
            for (; in_ch <= (input_ch - 4); in_ch += 4)
   1b200:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1b202:	f109 0910 	add.w	r9, r9, #16
   1b206:	454b      	cmp	r3, r9
   1b208:	f10a 0a10 	add.w	sl, sl, #16
   1b20c:	f47f aebb 	bne.w	1af86 <arm_depthwise_conv_3x3_s8+0x146>
   1b210:	e9dd 5015 	ldrd	r5, r0, [sp, #84]	@ 0x54
   1b214:	991d      	ldr	r1, [sp, #116]	@ 0x74
   1b216:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
   1b218:	1d2b      	adds	r3, r5, #4
   1b21a:	18cd      	adds	r5, r1, r3
                output[out_idx++] = (int8_t)out_buff2;
                output[out_idx++] = (int8_t)out_buff3;
            }

            // Leftover
            for (; in_ch < input_ch; ++in_ch)
   1b21c:	9b03      	ldr	r3, [sp, #12]
   1b21e:	42b3      	cmp	r3, r6
   1b220:	f340 8084 	ble.w	1b32c <arm_depthwise_conv_3x3_s8+0x4ec>
   1b224:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
   1b226:	9938      	ldr	r1, [sp, #224]	@ 0xe0
                if (bias)
                {
                    out_buff = *bias++;
                }

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1b228:	f8dd a008 	ldr.w	sl, [sp, #8]
   1b22c:	960d      	str	r6, [sp, #52]	@ 0x34
   1b22e:	eb04 0c86 	add.w	ip, r4, r6, lsl #2
   1b232:	9c18      	ldr	r4, [sp, #96]	@ 0x60
   1b234:	f8cd c014 	str.w	ip, [sp, #20]
   1b238:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
   1b23c:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
   1b23e:	f8cd e018 	str.w	lr, [sp, #24]
   1b242:	194f      	adds	r7, r1, r5
   1b244:	e9cd 500b 	strd	r5, r0, [sp, #44]	@ 0x2c
   1b248:	eb04 0800 	add.w	r8, r4, r0
   1b24c:	46b9      	mov	r9, r7
   1b24e:	f8dd c01c 	ldr.w	ip, [sp, #28]
   1b252:	9f09      	ldr	r7, [sp, #36]	@ 0x24
   1b254:	f8dd e010 	ldr.w	lr, [sp, #16]
   1b258:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
   1b25c:	4698      	mov	r8, r3
                if (bias)
   1b25e:	2a00      	cmp	r2, #0
   1b260:	f000 808c 	beq.w	1b37c <arm_depthwise_conv_3x3_s8+0x53c>
                    out_buff = *bias++;
   1b264:	f852 3b04 	ldr.w	r3, [r2], #4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b268:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
   1b26a:	4555      	cmp	r5, sl
   1b26c:	da25      	bge.n	1b2ba <arm_depthwise_conv_3x3_s8+0x47a>
                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1b26e:	990a      	ldr	r1, [sp, #40]	@ 0x28
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b270:	9208      	str	r2, [sp, #32]
                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1b272:	1988      	adds	r0, r1, r6
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
   1b274:	9913      	ldr	r1, [sp, #76]	@ 0x4c
   1b276:	1871      	adds	r1, r6, r1
                {
                    if (ker_w_start == 0)
   1b278:	f1be 0f00 	cmp.w	lr, #0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b27c:	f105 0501 	add.w	r5, r5, #1
                    if (ker_w_start == 0)
   1b280:	db06      	blt.n	1b290 <arm_depthwise_conv_3x3_s8+0x450>
                    {
                        out_buff += (*(input_ptr) + input_offset) * *(kernel_ptr);
   1b282:	f990 2000 	ldrsb.w	r2, [r0]
   1b286:	f991 4000 	ldrsb.w	r4, [r1]
   1b28a:	445a      	add	r2, fp
   1b28c:	fb04 3302 	mla	r3, r4, r2, r3
                    }

                    out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch);
   1b290:	f910 2008 	ldrsb.w	r2, [r0, r8]
   1b294:	f911 4008 	ldrsb.w	r4, [r1, r8]
   1b298:	445a      	add	r2, fp
   1b29a:	fb04 3302 	mla	r3, r4, r2, r3

                    if ((input_x - in_w) >= 3)
   1b29e:	9a00      	ldr	r2, [sp, #0]
   1b2a0:	2a02      	cmp	r2, #2
   1b2a2:	dd04      	ble.n	1b2ae <arm_depthwise_conv_3x3_s8+0x46e>
                    {
                        out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr + (input_ch << 1));
   1b2a4:	57c2      	ldrsb	r2, [r0, r7]
   1b2a6:	57cc      	ldrsb	r4, [r1, r7]
   1b2a8:	445a      	add	r2, fp
   1b2aa:	fb04 3302 	mla	r3, r4, r2, r3
                    }

                    input_ptr += (input_ch * input_x);
   1b2ae:	9a01      	ldr	r2, [sp, #4]
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b2b0:	4555      	cmp	r5, sl
                    input_ptr += (input_ch * input_x);
   1b2b2:	4410      	add	r0, r2
                    kernel_ptr += (input_ch * 3);
   1b2b4:	4461      	add	r1, ip
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
   1b2b6:	d1df      	bne.n	1b278 <arm_depthwise_conv_3x3_s8+0x438>
   1b2b8:	9a08      	ldr	r2, [sp, #32]
                }

                out_buff = arm_nn_requantize(out_buff, output_mult[in_ch], output_shift[in_ch]);
   1b2ba:	9806      	ldr	r0, [sp, #24]
   1b2bc:	f850 1b04 	ldr.w	r1, [r0], #4
   1b2c0:	9006      	str	r0, [sp, #24]
   1b2c2:	9805      	ldr	r0, [sp, #20]
   1b2c4:	f850 4b04 	ldr.w	r4, [r0], #4
   1b2c8:	9005      	str	r0, [sp, #20]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b2ca:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   1b2ce:	fa03 f000 	lsl.w	r0, r3, r0
   1b2d2:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b2d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1b2d8:	2500      	movs	r5, #0
   1b2da:	fbc0 3504 	smlal	r3, r5, r0, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b2de:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b2e2:	2001      	movs	r0, #1
   1b2e4:	4088      	lsls	r0, r1
    result = (int32_t)(mult.long_long >> 31);
   1b2e6:	0fdb      	lsrs	r3, r3, #31
   1b2e8:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b2ec:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
   1b2ee:	ea03 0400 	and.w	r4, r3, r0
    if (result < 0)
   1b2f2:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
   1b2f4:	ea4f 0060 	mov.w	r0, r0, asr #1
        threshold++;
   1b2f8:	bf48      	it	mi
   1b2fa:	3001      	addmi	r0, #1
                out_buff += output_offset;
   1b2fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
    if (remainder > threshold)
   1b2fe:	4284      	cmp	r4, r0
        result++;
   1b300:	bfc8      	it	gt
   1b302:	3301      	addgt	r3, #1
   1b304:	440b      	add	r3, r1
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
   1b306:	990f      	ldr	r1, [sp, #60]	@ 0x3c
   1b308:	428b      	cmp	r3, r1
   1b30a:	bfb8      	it	lt
   1b30c:	460b      	movlt	r3, r1
   1b30e:	9910      	ldr	r1, [sp, #64]	@ 0x40
            for (; in_ch < input_ch; ++in_ch)
   1b310:	3601      	adds	r6, #1
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
   1b312:	428b      	cmp	r3, r1
   1b314:	bfa8      	it	ge
   1b316:	460b      	movge	r3, r1
            for (; in_ch < input_ch; ++in_ch)
   1b318:	45b0      	cmp	r8, r6
                output[out_idx++] = (int8_t)out_buff;
   1b31a:	f809 3b01 	strb.w	r3, [r9], #1
            for (; in_ch < input_ch; ++in_ch)
   1b31e:	d19e      	bne.n	1b25e <arm_depthwise_conv_3x3_s8+0x41e>
   1b320:	e9dd 500b 	ldrd	r5, r0, [sp, #44]	@ 0x2c
   1b324:	9b03      	ldr	r3, [sp, #12]
   1b326:	990d      	ldr	r1, [sp, #52]	@ 0x34
   1b328:	442b      	add	r3, r5
   1b32a:	1a5d      	subs	r5, r3, r1
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1b32c:	9a04      	ldr	r2, [sp, #16]
   1b32e:	991a      	ldr	r1, [sp, #104]	@ 0x68
   1b330:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   1b332:	440a      	add	r2, r1
   1b334:	9204      	str	r2, [sp, #16]
   1b336:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
   1b338:	4410      	add	r0, r2
   1b33a:	9a00      	ldr	r2, [sp, #0]
   1b33c:	1a52      	subs	r2, r2, r1
   1b33e:	9200      	str	r2, [sp, #0]
   1b340:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   1b342:	3301      	adds	r3, #1
   1b344:	429a      	cmp	r2, r3
   1b346:	9314      	str	r3, [sp, #80]	@ 0x50
   1b348:	f47f ae06 	bne.w	1af58 <arm_depthwise_conv_3x3_s8+0x118>
   1b34c:	e9dd a71e 	ldrd	sl, r7, [sp, #120]	@ 0x78
   1b350:	e9dd 6e20 	ldrd	r6, lr, [sp, #128]	@ 0x80
   1b354:	9922      	ldr	r1, [sp, #136]	@ 0x88
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1b356:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   1b358:	3601      	adds	r6, #1
   1b35a:	42b3      	cmp	r3, r6
   1b35c:	4457      	add	r7, sl
   1b35e:	eba1 010a 	sub.w	r1, r1, sl
   1b362:	ebae 0e0a 	sub.w	lr, lr, sl
   1b366:	f47f add0 	bne.w	1af0a <arm_depthwise_conv_3x3_s8+0xca>
            }
        }
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
   1b36a:	2000      	movs	r0, #0
}
   1b36c:	b029      	add	sp, #164	@ 0xa4
   1b36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                int32_t out_buff3 = 0;
   1b372:	4611      	mov	r1, r2
                int32_t out_buff2 = 0;
   1b374:	4610      	mov	r0, r2
                int32_t out_buff1 = 0;
   1b376:	4614      	mov	r4, r2
                int32_t out_buff0 = 0;
   1b378:	4615      	mov	r5, r2
   1b37a:	e60c      	b.n	1af96 <arm_depthwise_conv_3x3_s8+0x156>
                int32_t out_buff = 0;
   1b37c:	4613      	mov	r3, r2
   1b37e:	e773      	b.n	1b268 <arm_depthwise_conv_3x3_s8+0x428>
            bias = bias_base;
   1b380:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
            int32_t in_ch = 0;
   1b382:	2600      	movs	r6, #0
   1b384:	e74a      	b.n	1b21c <arm_depthwise_conv_3x3_s8+0x3dc>
        return ARM_CMSIS_NN_ARG_ERROR;
   1b386:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1b38a:	e7ef      	b.n	1b36c <arm_depthwise_conv_3x3_s8+0x52c>

0001b38c <arm_depthwise_conv_s16>:
                                           const q7_t *kernel,
                                           const cmsis_nn_dims *bias_dims,
                                           const int64_t *bias,
                                           const cmsis_nn_dims *output_dims,
                                           q15_t *output)
{
   1b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b390:	b0bb      	sub	sp, #236	@ 0xec
   1b392:	4618      	mov	r0, r3
   1b394:	f8dd c114 	ldr.w	ip, [sp, #276]	@ 0x114
   1b398:	8805      	ldrh	r5, [r0, #0]

    depthwise_conv_s16_generic_s16(input,
                                   input_dims->n,
                                   input_dims->w,
                                   input_dims->h,
                                   input_dims->c,
   1b39a:	f8d0 b00c 	ldr.w	fp, [r0, #12]
                                   kernel,
                                   dw_conv_params->ch_mult,
   1b39e:	f8d1 a008 	ldr.w	sl, [r1, #8]
    depthwise_conv_s16_generic_s16(input,
   1b3a2:	f8b1 9018 	ldrh.w	r9, [r1, #24]
   1b3a6:	f8b1 8010 	ldrh.w	r8, [r1, #16]
{
   1b3aa:	9e49      	ldr	r6, [sp, #292]	@ 0x124
                                   input_dims->h,
   1b3ac:	e9d0 e401 	ldrd	lr, r4, [r0, #4]
                                   filter_dims->w,
   1b3b0:	f8dc 0008 	ldr.w	r0, [ip, #8]
   1b3b4:	9001      	str	r0, [sp, #4]
{
   1b3b6:	4617      	mov	r7, r2
                                   filter_dims->h,
   1b3b8:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1b3bc:	900f      	str	r0, [sp, #60]	@ 0x3c
    const uint16_t dilation_y = dw_conv_params->dilation.h;
   1b3be:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
    depthwise_conv_s16_generic_s16(input,
   1b3c2:	8988      	ldrh	r0, [r1, #12]
   1b3c4:	9010      	str	r0, [sp, #64]	@ 0x40
                                   dw_conv_params->padding.h,
                                   dw_conv_params->stride.w,
                                   dw_conv_params->stride.h,
                                   bias,
                                   output,
                                   quant_params->shift,
   1b3c6:	6878      	ldr	r0, [r7, #4]
    depthwise_conv_s16_generic_s16(input,
   1b3c8:	f8b1 c014 	ldrh.w	ip, [r1, #20]
                                   quant_params->shift,
   1b3cc:	9011      	str	r0, [sp, #68]	@ 0x44
                                   quant_params->multiplier,
                                   output_dims->w,
                                   output_dims->h,
                                   dw_conv_params->activation.min,
   1b3ce:	6a48      	ldr	r0, [r1, #36]	@ 0x24
                                   dw_conv_params->activation.max,
   1b3d0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
   1b3d2:	9114      	str	r1, [sp, #80]	@ 0x50
    const uint16_t dilation_x = dw_conv_params->dilation.w;
   1b3d4:	b299      	uxth	r1, r3
                                   quant_params->multiplier,
   1b3d6:	683f      	ldr	r7, [r7, #0]
    const uint16_t dilation_x = dw_conv_params->dilation.w;
   1b3d8:	9115      	str	r1, [sp, #84]	@ 0x54
    const uint16_t dilation_y = dw_conv_params->dilation.h;
   1b3da:	b291      	uxth	r1, r2
                                   quant_params->multiplier,
   1b3dc:	9712      	str	r7, [sp, #72]	@ 0x48
                                   dw_conv_params->activation.min,
   1b3de:	9013      	str	r0, [sp, #76]	@ 0x4c
                                   output_dims->h,
   1b3e0:	e9d6 6701 	ldrd	r6, r7, [r6, #4]
    const uint16_t dilation_y = dw_conv_params->dilation.h;
   1b3e4:	9116      	str	r1, [sp, #88]	@ 0x58
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1b3e6:	2d00      	cmp	r5, #0
   1b3e8:	f000 81ac 	beq.w	1b744 <arm_depthwise_conv_s16+0x3b8>
   1b3ec:	b2a1      	uxth	r1, r4
   1b3ee:	b29c      	uxth	r4, r3
   1b3f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1b3f4:	9305      	str	r3, [sp, #20]
   1b3f6:	b290      	uxth	r0, r2
   1b3f8:	fa1f fe8e 	uxth.w	lr, lr
   1b3fc:	f1c9 0200 	rsb	r2, r9, #0
   1b400:	f1cc 0300 	rsb	r3, ip, #0
   1b404:	fa1f fb8b 	uxth.w	fp, fp
   1b408:	fa1f f982 	uxth.w	r9, r2
   1b40c:	b29a      	uxth	r2, r3
        input += (input_x * input_y * input_ch);
   1b40e:	fb0e f301 	mul.w	r3, lr, r1
   1b412:	fb0b f303 	mul.w	r3, fp, r3
   1b416:	9227      	str	r2, [sp, #156]	@ 0x9c
   1b418:	460a      	mov	r2, r1
   1b41a:	910b      	str	r1, [sp, #44]	@ 0x2c
   1b41c:	0059      	lsls	r1, r3, #1
   1b41e:	fb02 f30b 	mul.w	r3, r2, fp
   1b422:	fb00 f303 	mul.w	r3, r0, r3
   1b426:	005a      	lsls	r2, r3, #1
   1b428:	fb04 f30b 	mul.w	r3, r4, fp
   1b42c:	fa1f fa8a 	uxth.w	sl, sl
   1b430:	9007      	str	r0, [sp, #28]
   1b432:	0058      	lsls	r0, r3, #1
   1b434:	9b05      	ldr	r3, [sp, #20]
   1b436:	921d      	str	r2, [sp, #116]	@ 0x74
   1b438:	901e      	str	r0, [sp, #120]	@ 0x78
                                int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
   1b43a:	fb0b f20a 	mul.w	r2, fp, sl
   1b43e:	ea4f 008a 	mov.w	r0, sl, lsl #2
   1b442:	fb03 f302 	mul.w	r3, r3, r2
   1b446:	901f      	str	r0, [sp, #124]	@ 0x7c
   1b448:	ea4f 004a 	mov.w	r0, sl, lsl #1
   1b44c:	920a      	str	r2, [sp, #40]	@ 0x28
   1b44e:	9018      	str	r0, [sp, #96]	@ 0x60
   1b450:	931b      	str	r3, [sp, #108]	@ 0x6c
   1b452:	9404      	str	r4, [sp, #16]
   1b454:	b2b6      	uxth	r6, r6
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1b456:	2300      	movs	r3, #0
   1b458:	f8cd b020 	str.w	fp, [sp, #32]
   1b45c:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
   1b460:	460a      	mov	r2, r1
   1b462:	4670      	mov	r0, lr
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1b464:	2e00      	cmp	r6, #0
   1b466:	f000 8166 	beq.w	1b736 <arm_depthwise_conv_s16+0x3aa>
   1b46a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
   1b46e:	910d      	str	r1, [sp, #52]	@ 0x34
   1b470:	e9cd 7528 	strd	r7, r5, [sp, #160]	@ 0xa0
   1b474:	fa1f fb87 	uxth.w	fp, r7
   1b478:	461d      	mov	r5, r3
   1b47a:	46cc      	mov	ip, r9
   1b47c:	f04f 0a00 	mov.w	sl, #0
   1b480:	4614      	mov	r4, r2
   1b482:	464b      	mov	r3, r9
            const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   1b484:	fa0f f28c 	sxth.w	r2, ip
   1b488:	9217      	str	r2, [sp, #92]	@ 0x5c
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1b48a:	f1bb 0f00 	cmp.w	fp, #0
   1b48e:	f000 8145 	beq.w	1b71c <arm_depthwise_conv_s16+0x390>
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1b492:	9f07      	ldr	r7, [sp, #28]
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1b494:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
   1b498:	2a00      	cmp	r2, #0
                            ker_y_start = MAX(0, -base_idx_y);
   1b49a:	f1c2 0e00 	rsb	lr, r2, #0
   1b49e:	bfd4      	ite	le
   1b4a0:	4671      	movle	r1, lr
   1b4a2:	2100      	movgt	r1, #0
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1b4a4:	eba7 0e02 	sub.w	lr, r7, r2
   1b4a8:	911a      	str	r1, [sp, #104]	@ 0x68
   1b4aa:	1a81      	subs	r1, r0, r2
   1b4ac:	f10e 32ff 	add.w	r2, lr, #4294967295	@ 0xffffffff
   1b4b0:	9226      	str	r2, [sp, #152]	@ 0x98
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1b4b2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   1b4b4:	f8dd e09c 	ldr.w	lr, [sp, #156]	@ 0x9c
   1b4b8:	9124      	str	r1, [sp, #144]	@ 0x90
   1b4ba:	428a      	cmp	r2, r1
   1b4bc:	bfa8      	it	ge
   1b4be:	460a      	movge	r2, r1
   1b4c0:	46a8      	mov	r8, r5
   1b4c2:	4619      	mov	r1, r3
   1b4c4:	4605      	mov	r5, r0
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1b4c6:	f04f 0900 	mov.w	r9, #0
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1b4ca:	9225      	str	r2, [sp, #148]	@ 0x94
   1b4cc:	4627      	mov	r7, r4
   1b4ce:	4660      	mov	r0, ip
   1b4d0:	4653      	mov	r3, sl
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1b4d2:	9a08      	ldr	r2, [sp, #32]
                const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   1b4d4:	fa0f fa8e 	sxth.w	sl, lr
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1b4d8:	2a00      	cmp	r2, #0
   1b4da:	f000 810e 	beq.w	1b6fa <arm_depthwise_conv_s16+0x36e>
   1b4de:	f1ba 0f00 	cmp.w	sl, #0
                            ker_x_start = MAX(0, -base_idx_x);
   1b4e2:	f1ca 0200 	rsb	r2, sl, #0
   1b4e6:	bfc8      	it	gt
   1b4e8:	2200      	movgt	r2, #0
   1b4ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
   1b4ec:	9219      	str	r2, [sp, #100]	@ 0x64
   1b4ee:	2200      	movs	r2, #0
   1b4f0:	9206      	str	r2, [sp, #24]
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1b4f2:	9201      	str	r2, [sp, #4]
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   1b4f4:	9a05      	ldr	r2, [sp, #20]
   1b4f6:	f8cd b0b4 	str.w	fp, [sp, #180]	@ 0xb4
   1b4fa:	eba4 0c0a 	sub.w	ip, r4, sl
   1b4fe:	4562      	cmp	r2, ip
   1b500:	bfa8      	it	ge
   1b502:	4662      	movge	r2, ip
   1b504:	9222      	str	r2, [sp, #136]	@ 0x88
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1b506:	9a04      	ldr	r2, [sp, #16]
   1b508:	f8cd c008 	str.w	ip, [sp, #8]
   1b50c:	e9cd 392b 	strd	r3, r9, [sp, #172]	@ 0xac
   1b510:	eba2 020a 	sub.w	r2, r2, sl
                            ker_x_start = MAX(0, -base_idx_x);
   1b514:	f06f 0403 	mvn.w	r4, #3
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1b518:	9223      	str	r2, [sp, #140]	@ 0x8c
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1b51a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1b51c:	2b00      	cmp	r3, #0
   1b51e:	f000 80da 	beq.w	1b6d6 <arm_depthwise_conv_s16+0x34a>
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1b522:	9b04      	ldr	r3, [sp, #16]
   1b524:	9a02      	ldr	r2, [sp, #8]
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1b526:	9034      	str	r0, [sp, #208]	@ 0xd0
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1b528:	eb03 0902 	add.w	r9, r3, r2
   1b52c:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
   1b530:	9321      	str	r3, [sp, #132]	@ 0x84
   1b532:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   1b534:	9a18      	ldr	r2, [sp, #96]	@ 0x60
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1b536:	f8dd 9018 	ldr.w	r9, [sp, #24]
   1b53a:	4423      	add	r3, r4
   1b53c:	9309      	str	r3, [sp, #36]	@ 0x24
   1b53e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1b540:	eb03 0b04 	add.w	fp, r3, r4
   1b544:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
   1b546:	4413      	add	r3, r2
   1b548:	931c      	str	r3, [sp, #112]	@ 0x70
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1b54a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   1b54c:	e9cd 872e 	strd	r8, r7, [sp, #184]	@ 0xb8
   1b550:	e9cd 4e32 	strd	r4, lr, [sp, #200]	@ 0xc8
   1b554:	e9cd 5630 	strd	r5, r6, [sp, #192]	@ 0xc0
   1b558:	3b01      	subs	r3, #1
   1b55a:	9e02      	ldr	r6, [sp, #8]
   1b55c:	9320      	str	r3, [sp, #128]	@ 0x80
   1b55e:	468c      	mov	ip, r1
                        const q31_t reduced_multiplier = REDUCE_MULTIPLIER(output_mult[idx_out_ch]);
   1b560:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1b562:	f852 3f04 	ldr.w	r3, [r2, #4]!
   1b566:	9209      	str	r2, [sp, #36]	@ 0x24
   1b568:	4a85      	ldr	r2, [pc, #532]	@ (1b780 <arm_depthwise_conv_s16+0x3f4>)
   1b56a:	4293      	cmp	r3, r2
   1b56c:	f300 80ee 	bgt.w	1b74c <arm_depthwise_conv_s16+0x3c0>
   1b570:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
   1b574:	141f      	asrs	r7, r3, #16
   1b576:	17db      	asrs	r3, r3, #31
   1b578:	930c      	str	r3, [sp, #48]	@ 0x30
                        if (dilation_x > 1)
   1b57a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1b57c:	2b01      	cmp	r3, #1
   1b57e:	f240 80ed 	bls.w	1b75c <arm_depthwise_conv_s16+0x3d0>
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1b582:	9b04      	ldr	r3, [sp, #16]
   1b584:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   1b586:	fb92 f4f3 	sdiv	r4, r2, r3
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1b58a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
   1b58c:	fb92 f5f3 	sdiv	r5, r2, r3
                            ker_x_end = MIN(kernel_x, end_min_x);
   1b590:	9b05      	ldr	r3, [sp, #20]
   1b592:	429d      	cmp	r5, r3
   1b594:	bfa8      	it	ge
   1b596:	461d      	movge	r5, r3
                        if (dilation_y > 1)
   1b598:	9b16      	ldr	r3, [sp, #88]	@ 0x58
   1b59a:	2b01      	cmp	r3, #1
                            ker_x_start = MAX(0, start_x_max);
   1b59c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
                        if (dilation_y > 1)
   1b5a0:	f240 80e2 	bls.w	1b768 <arm_depthwise_conv_s16+0x3dc>
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
   1b5a4:	9b07      	ldr	r3, [sp, #28]
   1b5a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
   1b5a8:	1898      	adds	r0, r3, r2
                            ker_y_end = MIN(kernel_y, end_min_y);
   1b5aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
   1b5ac:	3801      	subs	r0, #1
   1b5ae:	fb90 f0f3 	sdiv	r0, r0, r3
                            ker_y_end = MIN(kernel_y, end_min_y);
   1b5b2:	4290      	cmp	r0, r2
   1b5b4:	bfa8      	it	ge
   1b5b6:	4610      	movge	r0, r2
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1b5b8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   1b5ba:	fb92 f1f3 	sdiv	r1, r2, r3
                        if (bias)
   1b5be:	9b48      	ldr	r3, [sp, #288]	@ 0x120
                            ker_y_start = MAX(0, start_y_max);
   1b5c0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                        if (bias)
   1b5c4:	2b00      	cmp	r3, #0
   1b5c6:	f000 80d5 	beq.w	1b774 <arm_depthwise_conv_s16+0x3e8>
                            acc_0 = bias[idx_out_ch];
   1b5ca:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b5d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1b5d6:	4288      	cmp	r0, r1
   1b5d8:	dd45      	ble.n	1b666 <arm_depthwise_conv_s16+0x2da>
   1b5da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1b5dc:	9a07      	ldr	r2, [sp, #28]
   1b5de:	fb02 3801 	mla	r8, r2, r1, r3
   1b5e2:	9b04      	ldr	r3, [sp, #16]
   1b5e4:	9a08      	ldr	r2, [sp, #32]
   1b5e6:	fb03 ae04 	mla	lr, r3, r4, sl
   1b5ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1b5ec:	fb03 ee08 	mla	lr, r3, r8, lr
   1b5f0:	9b01      	ldr	r3, [sp, #4]
   1b5f2:	fb02 3e0e 	mla	lr, r2, lr, r3
   1b5f6:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   1b5f8:	eb03 084e 	add.w	r8, r3, lr, lsl #1
   1b5fc:	9b05      	ldr	r3, [sp, #20]
   1b5fe:	fb03 4e01 	mla	lr, r3, r1, r4
   1b602:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1b604:	fb03 9e0e 	mla	lr, r3, lr, r9
   1b608:	9b46      	ldr	r3, [sp, #280]	@ 0x118
   1b60a:	e9cd b935 	strd	fp, r9, [sp, #212]	@ 0xd4
   1b60e:	449e      	add	lr, r3
   1b610:	46bb      	mov	fp, r7
   1b612:	4653      	mov	r3, sl
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1b614:	42a5      	cmp	r5, r4
   1b616:	dd19      	ble.n	1b64c <arm_depthwise_conv_s16+0x2c0>
   1b618:	e9cd 3137 	strd	r3, r1, [sp, #220]	@ 0xdc
   1b61c:	46f2      	mov	sl, lr
   1b61e:	46c1      	mov	r9, r8
   1b620:	4627      	mov	r7, r4
   1b622:	9439      	str	r4, [sp, #228]	@ 0xe4
   1b624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
                                acc_0 += input[idx_0] * kernel[ker_idx_0];
   1b626:	f99a 1000 	ldrsb.w	r1, [sl]
   1b62a:	f8b9 2000 	ldrh.w	r2, [r9]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1b62e:	449a      	add	sl, r3
                                acc_0 += input[idx_0] * kernel[ker_idx_0];
   1b630:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1b634:	fbc2 3481 	smlalbb	r3, r4, r2, r1
   1b638:	e9cd 3402 	strd	r3, r4, [sp, #8]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1b63c:	3701      	adds	r7, #1
   1b63e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
   1b640:	42af      	cmp	r7, r5
   1b642:	4499      	add	r9, r3
   1b644:	d1ee      	bne.n	1b624 <arm_depthwise_conv_s16+0x298>
   1b646:	e9dd 3137 	ldrd	r3, r1, [sp, #220]	@ 0xdc
   1b64a:	9c39      	ldr	r4, [sp, #228]	@ 0xe4
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1b64c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   1b64e:	3101      	adds	r1, #1
   1b650:	4490      	add	r8, r2
   1b652:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
   1b654:	4281      	cmp	r1, r0
   1b656:	4496      	add	lr, r2
   1b658:	d1dc      	bne.n	1b614 <arm_depthwise_conv_s16+0x288>
   1b65a:	465f      	mov	r7, fp
   1b65c:	f8dd 90d8 	ldr.w	r9, [sp, #216]	@ 0xd8
   1b660:	f8dd b0d4 	ldr.w	fp, [sp, #212]	@ 0xd4
   1b664:	469a      	mov	sl, r3
   1b666:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   1b66a:	990c      	ldr	r1, [sp, #48]	@ 0x30
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1b66c:	f85b 0f04 	ldr.w	r0, [fp, #4]!
    const q63_t new_val = val * reduced_multiplier;
   1b670:	fb04 f101 	mul.w	r1, r4, r1
   1b674:	fb07 1105 	mla	r1, r7, r5, r1
   1b678:	fba4 3207 	umull	r3, r2, r4, r7
   1b67c:	440a      	add	r2, r1
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1b67e:	f1c0 010e 	rsb	r1, r0, #14
   1b682:	3012      	adds	r0, #18
   1b684:	40cb      	lsrs	r3, r1
   1b686:	fa02 f000 	lsl.w	r0, r2, r0
   1b68a:	3920      	subs	r1, #32
   1b68c:	bf58      	it	pl
   1b68e:	fa42 f101 	asrpl.w	r1, r2, r1
   1b692:	ea43 0300 	orr.w	r3, r3, r0
   1b696:	bf58      	it	pl
   1b698:	430b      	orrpl	r3, r1
                        result = MAX(result, output_activation_min);
   1b69a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
    result = (result + 1) >> 1;             // Last shift position and insert round
   1b69c:	3301      	adds	r3, #1
   1b69e:	105b      	asrs	r3, r3, #1
   1b6a0:	4293      	cmp	r3, r2
   1b6a2:	bfb8      	it	lt
   1b6a4:	4613      	movlt	r3, r2
                        result = MIN(result, output_activation_max);
   1b6a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   1b6a8:	4293      	cmp	r3, r2
   1b6aa:	bfa8      	it	ge
   1b6ac:	4613      	movge	r3, r2
                        *output++ = (int16_t)result;
   1b6ae:	9a4a      	ldr	r2, [sp, #296]	@ 0x128
   1b6b0:	f822 3b02 	strh.w	r3, [r2], #2
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1b6b4:	4613      	mov	r3, r2
                        *output++ = (int16_t)result;
   1b6b6:	924a      	str	r2, [sp, #296]	@ 0x128
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1b6b8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   1b6ba:	4293      	cmp	r3, r2
   1b6bc:	f109 0901 	add.w	r9, r9, #1
   1b6c0:	f47f af4e 	bne.w	1b560 <arm_depthwise_conv_s16+0x1d4>
   1b6c4:	e9dd 872e 	ldrd	r8, r7, [sp, #184]	@ 0xb8
   1b6c8:	e9dd 4e32 	ldrd	r4, lr, [sp, #200]	@ 0xc8
   1b6cc:	9602      	str	r6, [sp, #8]
   1b6ce:	9d30      	ldr	r5, [sp, #192]	@ 0xc0
   1b6d0:	9834      	ldr	r0, [sp, #208]	@ 0xd0
   1b6d2:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
   1b6d4:	4661      	mov	r1, ip
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1b6d6:	9b01      	ldr	r3, [sp, #4]
   1b6d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   1b6da:	3301      	adds	r3, #1
   1b6dc:	9301      	str	r3, [sp, #4]
   1b6de:	9b06      	ldr	r3, [sp, #24]
   1b6e0:	4413      	add	r3, r2
   1b6e2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
   1b6e4:	9306      	str	r3, [sp, #24]
   1b6e6:	4414      	add	r4, r2
   1b6e8:	9b01      	ldr	r3, [sp, #4]
   1b6ea:	9a08      	ldr	r2, [sp, #32]
   1b6ec:	429a      	cmp	r2, r3
   1b6ee:	f47f af14 	bne.w	1b51a <arm_depthwise_conv_s16+0x18e>
   1b6f2:	e9dd 392b 	ldrd	r3, r9, [sp, #172]	@ 0xac
   1b6f6:	f8dd b0b4 	ldr.w	fp, [sp, #180]	@ 0xb4
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1b6fa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   1b6fc:	f109 0901 	add.w	r9, r9, #1
   1b700:	4472      	add	r2, lr
   1b702:	45d9      	cmp	r9, fp
   1b704:	fa1f fe82 	uxth.w	lr, r2
   1b708:	f47f aee3 	bne.w	1b4d2 <arm_depthwise_conv_s16+0x146>
   1b70c:	4684      	mov	ip, r0
   1b70e:	4628      	mov	r0, r5
   1b710:	4645      	mov	r5, r8
   1b712:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
   1b716:	469a      	mov	sl, r3
   1b718:	463c      	mov	r4, r7
   1b71a:	460b      	mov	r3, r1
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1b71c:	f10a 0a01 	add.w	sl, sl, #1
   1b720:	44c4      	add	ip, r8
   1b722:	45b2      	cmp	sl, r6
   1b724:	fa1f fc8c 	uxth.w	ip, ip
   1b728:	f47f aeac 	bne.w	1b484 <arm_depthwise_conv_s16+0xf8>
   1b72c:	4699      	mov	r9, r3
   1b72e:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
   1b730:	462b      	mov	r3, r5
   1b732:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
   1b734:	4622      	mov	r2, r4
        input += (input_x * input_y * input_ch);
   1b736:	9944      	ldr	r1, [sp, #272]	@ 0x110
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1b738:	3301      	adds	r3, #1
        input += (input_x * input_y * input_ch);
   1b73a:	4411      	add	r1, r2
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1b73c:	429d      	cmp	r5, r3
        input += (input_x * input_y * input_ch);
   1b73e:	9144      	str	r1, [sp, #272]	@ 0x110
    for (int i_batch = 0; i_batch < input_batches; i_batch++)
   1b740:	f47f ae90 	bne.w	1b464 <arm_depthwise_conv_s16+0xd8>
                                   dilation_x,
                                   dilation_y);

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
}
   1b744:	2000      	movs	r0, #0
   1b746:	b03b      	add	sp, #236	@ 0xec
   1b748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b74c:	2300      	movs	r3, #0
   1b74e:	930c      	str	r3, [sp, #48]	@ 0x30
                        if (dilation_x > 1)
   1b750:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1b752:	2b01      	cmp	r3, #1
   1b754:	f647 77ff 	movw	r7, #32767	@ 0x7fff
   1b758:	f63f af13 	bhi.w	1b582 <arm_depthwise_conv_s16+0x1f6>
                        if (dilation_y > 1)
   1b75c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   1b75e:	9d22      	ldr	r5, [sp, #136]	@ 0x88
                            ker_x_start = MAX(0, -base_idx_x);
   1b760:	9c19      	ldr	r4, [sp, #100]	@ 0x64
                        if (dilation_y > 1)
   1b762:	2b01      	cmp	r3, #1
   1b764:	f63f af1e 	bhi.w	1b5a4 <arm_depthwise_conv_s16+0x218>
                        if (bias)
   1b768:	9b48      	ldr	r3, [sp, #288]	@ 0x120
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1b76a:	9825      	ldr	r0, [sp, #148]	@ 0x94
                            ker_y_start = MAX(0, -base_idx_y);
   1b76c:	991a      	ldr	r1, [sp, #104]	@ 0x68
                        if (bias)
   1b76e:	2b00      	cmp	r3, #0
   1b770:	f47f af2b 	bne.w	1b5ca <arm_depthwise_conv_s16+0x23e>
                        int64_t acc_0 = 0;
   1b774:	2200      	movs	r2, #0
   1b776:	2300      	movs	r3, #0
   1b778:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b77c:	e72b      	b.n	1b5d6 <arm_depthwise_conv_s16+0x24a>
   1b77e:	bf00      	nop
   1b780:	7ffeffff 	.word	0x7ffeffff

0001b784 <depthwise_conv_s8_mult_4>:
                         const int32_t output_y,
                         const int32_t output_offset,
                         const int32_t input_offset,
                         const int32_t output_activation_min,
                         const int32_t output_activation_max)
{
   1b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b788:	b0a3      	sub	sp, #140	@ 0x8c
   1b78a:	4688      	mov	r8, r1
   1b78c:	9932      	ldr	r1, [sp, #200]	@ 0xc8
   1b78e:	f8dd b0b4 	ldr.w	fp, [sp, #180]	@ 0xb4
   1b792:	9f31      	ldr	r7, [sp, #196]	@ 0xc4
   1b794:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
   1b796:	901a      	str	r0, [sp, #104]	@ 0x68
   1b798:	4699      	mov	r9, r3
    const int32_t *bias_base = bias;
    const int32_t *mult_base = output_mult;
    const int32_t *shift_base = output_shift;
    const int8_t *kernel_base = kernel;

    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1b79a:	424b      	negs	r3, r1
   1b79c:	930e      	str	r3, [sp, #56]	@ 0x38
   1b79e:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
   1b7a0:	2b00      	cmp	r3, #0
   1b7a2:	f340 81db 	ble.w	1bb5c <depthwise_conv_s8_mult_4+0x3d8>
   1b7a6:	eb01 0e02 	add.w	lr, r1, r2
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1b7aa:	427a      	negs	r2, r7
   1b7ac:	fb09 f202 	mul.w	r2, r9, r2
   1b7b0:	9214      	str	r2, [sp, #80]	@ 0x50
                        out_buff[3] = *bias++;
                    }

                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
                    {
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
   1b7b2:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
   1b7b4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   1b7b6:	fb0b f202 	mul.w	r2, fp, r2
   1b7ba:	9203      	str	r2, [sp, #12]
                        kernel = kernel_base + mult_tile + ker_idx;
                        int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + in_ch;
   1b7bc:	fb09 f208 	mul.w	r2, r9, r8
   1b7c0:	3b01      	subs	r3, #1
   1b7c2:	9204      	str	r2, [sp, #16]
   1b7c4:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
   1b7c6:	089b      	lsrs	r3, r3, #2
   1b7c8:	fb02 f209 	mul.w	r2, r2, r9
   1b7cc:	3301      	adds	r3, #1
   1b7ce:	9215      	str	r2, [sp, #84]	@ 0x54
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b7d0:	46da      	mov	sl, fp
   1b7d2:	011a      	lsls	r2, r3, #4
   1b7d4:	46cb      	mov	fp, r9
   1b7d6:	009b      	lsls	r3, r3, #2
   1b7d8:	f8dd 90f0 	ldr.w	r9, [sp, #240]	@ 0xf0
   1b7dc:	9219      	str	r2, [sp, #100]	@ 0x64
    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1b7de:	2400      	movs	r4, #0
   1b7e0:	4672      	mov	r2, lr
   1b7e2:	9318      	str	r3, [sp, #96]	@ 0x60
   1b7e4:	46be      	mov	lr, r7
   1b7e6:	4647      	mov	r7, r8
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1b7e8:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
   1b7ea:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
   1b7ee:	2b00      	cmp	r3, #0
   1b7f0:	950c      	str	r5, [sp, #48]	@ 0x30
   1b7f2:	f340 81a7 	ble.w	1bb44 <depthwise_conv_s8_mult_4+0x3c0>
   1b7f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1b7f8:	9804      	ldr	r0, [sp, #16]
   1b7fa:	f8dd 8050 	ldr.w	r8, [sp, #80]	@ 0x50
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   1b7fe:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
   1b802:	442b      	add	r3, r5
   1b804:	fb00 f303 	mul.w	r3, r0, r3
   1b808:	9317      	str	r3, [sp, #92]	@ 0x5c
   1b80a:	eb07 030e 	add.w	r3, r7, lr
   1b80e:	9310      	str	r3, [sp, #64]	@ 0x40
   1b810:	9b03      	ldr	r3, [sp, #12]
   1b812:	9634      	str	r6, [sp, #208]	@ 0xd0
   1b814:	fb05 f303 	mul.w	r3, r5, r3
   1b818:	9316      	str	r3, [sp, #88]	@ 0x58
   1b81a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
   1b81c:	941b      	str	r4, [sp, #108]	@ 0x6c
   1b81e:	4293      	cmp	r3, r2
   1b820:	e9cd 211c 	strd	r2, r1, [sp, #112]	@ 0x70
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1b824:	f04f 0c00 	mov.w	ip, #0
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   1b828:	bfa8      	it	ge
   1b82a:	4613      	movge	r3, r2
   1b82c:	463e      	mov	r6, r7
   1b82e:	46c8      	mov	r8, r9
   1b830:	4670      	mov	r0, lr
   1b832:	46d1      	mov	r9, sl
   1b834:	9302      	str	r3, [sp, #8]
   1b836:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
   1b83a:	4677      	mov	r7, lr
   1b83c:	46da      	mov	sl, fp
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   1b83e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1b842:	f1b9 0f00 	cmp.w	r9, #0
   1b846:	9305      	str	r3, [sp, #20]
   1b848:	f340 8162 	ble.w	1bb10 <depthwise_conv_s8_mult_4+0x38c>
   1b84c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
   1b84e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
            output_shift = shift_base;
   1b850:	f8dd e0dc 	ldr.w	lr, [sp, #220]	@ 0xdc
   1b854:	440a      	add	r2, r1
   1b856:	920b      	str	r2, [sp, #44]	@ 0x2c
   1b858:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1b85a:	fb03 2209 	mla	r2, r3, r9, r2
   1b85e:	9211      	str	r2, [sp, #68]	@ 0x44
   1b860:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   1b862:	fb03 230a 	mla	r3, r3, sl, r2
   1b866:	9306      	str	r3, [sp, #24]
            output_mult = mult_base;
   1b868:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
   1b86a:	930f      	str	r3, [sp, #60]	@ 0x3c
            bias = bias_base;
   1b86c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
#pragma clang loop unroll(disable)
#endif
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b86e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
            bias = bias_base;
   1b870:	9309      	str	r3, [sp, #36]	@ 0x24
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b872:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1b874:	4293      	cmp	r3, r2
   1b876:	bfa8      	it	ge
   1b878:	4613      	movge	r3, r2
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   1b87a:	2100      	movs	r1, #0
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b87c:	469b      	mov	fp, r3
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
   1b87e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   1b880:	2b00      	cmp	r3, #0
   1b882:	f340 8139 	ble.w	1baf8 <depthwise_conv_s8_mult_4+0x374>
   1b886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   1b888:	9c11      	ldr	r4, [sp, #68]	@ 0x44
   1b88a:	9731      	str	r7, [sp, #196]	@ 0xc4
   1b88c:	f103 0210 	add.w	r2, r3, #16
   1b890:	f10e 0310 	add.w	r3, lr, #16
   1b894:	9307      	str	r3, [sp, #28]
   1b896:	2300      	movs	r3, #0
   1b898:	9308      	str	r3, [sp, #32]
   1b89a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
   1b89c:	e9cd 1e1e 	strd	r1, lr, [sp, #120]	@ 0x78
   1b8a0:	e9cd 0620 	strd	r0, r6, [sp, #128]	@ 0x80
   1b8a4:	4423      	add	r3, r4
   1b8a6:	930d      	str	r3, [sp, #52]	@ 0x34
                    if (bias)
   1b8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1b8aa:	2b00      	cmp	r3, #0
   1b8ac:	f000 8159 	beq.w	1bb62 <depthwise_conv_s8_mult_4+0x3de>
                        out_buff[1] = *bias++;
   1b8b0:	e9d3 7600 	ldrd	r7, r6, [r3]
                        out_buff[3] = *bias++;
   1b8b4:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
   1b8b8:	3310      	adds	r3, #16
   1b8ba:	9309      	str	r3, [sp, #36]	@ 0x24
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   1b8bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
   1b8be:	9b02      	ldr	r3, [sp, #8]
   1b8c0:	4299      	cmp	r1, r3
   1b8c2:	da34      	bge.n	1b92e <depthwise_conv_s8_mult_4+0x1aa>
   1b8c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   1b8c6:	9808      	ldr	r0, [sp, #32]
   1b8c8:	920a      	str	r2, [sp, #40]	@ 0x28
   1b8ca:	1818      	adds	r0, r3, r0
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b8cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   1b8ce:	460a      	mov	r2, r1
   1b8d0:	4686      	mov	lr, r0
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b8d2:	9805      	ldr	r0, [sp, #20]
                        kernel = kernel_base + mult_tile + ker_idx;
   1b8d4:	f8cd e000 	str.w	lr, [sp]
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b8d8:	4558      	cmp	r0, fp
   1b8da:	da1f      	bge.n	1b91c <depthwise_conv_s8_mult_4+0x198>
   1b8dc:	9906      	ldr	r1, [sp, #24]
   1b8de:	9200      	str	r2, [sp, #0]
   1b8e0:	eb01 0c03 	add.w	ip, r1, r3
   1b8e4:	9301      	str	r3, [sp, #4]
   1b8e6:	4671      	mov	r1, lr
                             ++ker_w, kernel += output_ch)
                        {
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
   1b8e8:	f99c 3000 	ldrsb.w	r3, [ip]
                            out_buff[0] += in_val * kernel[0];
   1b8ec:	f991 2000 	ldrsb.w	r2, [r1]
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
   1b8f0:	4443      	add	r3, r8
                            out_buff[0] += in_val * kernel[0];
   1b8f2:	fb03 7702 	mla	r7, r3, r2, r7
                            out_buff[1] += in_val * kernel[1];
   1b8f6:	f991 2001 	ldrsb.w	r2, [r1, #1]
   1b8fa:	fb03 6602 	mla	r6, r3, r2, r6
                            out_buff[2] += in_val * kernel[2];
   1b8fe:	f991 2002 	ldrsb.w	r2, [r1, #2]
                             ++ker_w, kernel += output_ch)
   1b902:	3001      	adds	r0, #1
                            out_buff[2] += in_val * kernel[2];
   1b904:	fb03 5502 	mla	r5, r3, r2, r5
                            out_buff[3] += in_val * kernel[3];
   1b908:	f991 2003 	ldrsb.w	r2, [r1, #3]
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b90c:	4558      	cmp	r0, fp
   1b90e:	44d4      	add	ip, sl
                            out_buff[3] += in_val * kernel[3];
   1b910:	fb03 4402 	mla	r4, r3, r2, r4
                             ++ker_w, kernel += output_ch)
   1b914:	4449      	add	r1, r9
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
   1b916:	d1e7      	bne.n	1b8e8 <depthwise_conv_s8_mult_4+0x164>
   1b918:	e9dd 2300 	ldrd	r2, r3, [sp]
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
   1b91c:	9903      	ldr	r1, [sp, #12]
   1b91e:	448e      	add	lr, r1
   1b920:	9904      	ldr	r1, [sp, #16]
   1b922:	440b      	add	r3, r1
   1b924:	9902      	ldr	r1, [sp, #8]
   1b926:	3201      	adds	r2, #1
   1b928:	428a      	cmp	r2, r1
   1b92a:	d1d2      	bne.n	1b8d2 <depthwise_conv_s8_mult_4+0x14e>
   1b92c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
                    res = vmaxq_s32(res, vdupq_n_s32(output_activation_min));
                    res = vminq_s32(res, vdupq_n_s32(output_activation_max));
                    vstrbq_s32(output, res);
                    output += 4;
#else
                    out_buff[0] = arm_nn_requantize(out_buff[0], *output_mult++, *output_shift++);
   1b92e:	9b07      	ldr	r3, [sp, #28]
   1b930:	f853 1c10 	ldr.w	r1, [r3, #-16]
   1b934:	f852 3c10 	ldr.w	r3, [r2, #-16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b938:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   1b93c:	4087      	lsls	r7, r0
   1b93e:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b940:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
   1b944:	f04f 0e00 	mov.w	lr, #0
   1b948:	fbc7 0e03 	smlal	r0, lr, r7, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b94c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b950:	2301      	movs	r3, #1
   1b952:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   1b954:	0fc0      	lsrs	r0, r0, #31
   1b956:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b95a:	3b01      	subs	r3, #1
    if (result < 0)
   1b95c:	fa50 fe01 	asrs.w	lr, r0, r1
    int32_t remainder = remainder_mask & dividend;
   1b960:	ea00 0703 	and.w	r7, r0, r3
    q31_t threshold = remainder_mask >> 1;
   1b964:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1b968:	bf48      	it	mi
   1b96a:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b96c:	429f      	cmp	r7, r3
                    out_buff[1] = arm_nn_requantize(out_buff[1], *output_mult++, *output_shift++);
   1b96e:	9b07      	ldr	r3, [sp, #28]
   1b970:	f853 1c0c 	ldr.w	r1, [r3, #-12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b974:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b978:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   1b97c:	fa06 f600 	lsl.w	r6, r6, r0
   1b980:	f1c1 0100 	rsb	r1, r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b984:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
   1b988:	f04f 0700 	mov.w	r7, #0
   1b98c:	fbc6 0703 	smlal	r0, r7, r6, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b990:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b994:	f04f 0301 	mov.w	r3, #1
   1b998:	fa03 f301 	lsl.w	r3, r3, r1
    result = (int32_t)(mult.long_long >> 31);
   1b99c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
   1b9a0:	ea40 0047 	orr.w	r0, r0, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b9a4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1b9a8:	ea00 0603 	and.w	r6, r0, r3
        result++;
   1b9ac:	bfc8      	it	gt
   1b9ae:	f10e 0e01 	addgt.w	lr, lr, #1
    q31_t threshold = remainder_mask >> 1;
   1b9b2:	105b      	asrs	r3, r3, #1
    if (result < 0)
   1b9b4:	fa50 f701 	asrs.w	r7, r0, r1
        threshold++;
   1b9b8:	bf48      	it	mi
   1b9ba:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1b9bc:	429e      	cmp	r6, r3
                    out_buff[2] = arm_nn_requantize(out_buff[2], *output_mult++, *output_shift++);
   1b9be:	9b07      	ldr	r3, [sp, #28]
   1b9c0:	f853 1c08 	ldr.w	r1, [r3, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b9c4:	f852 3c08 	ldr.w	r3, [r2, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b9c8:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
   1b9cc:	fa05 f606 	lsl.w	r6, r5, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1b9d0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
   1b9d4:	f04f 0500 	mov.w	r5, #0
   1b9d8:	fbc6 0503 	smlal	r0, r5, r6, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1b9dc:	f1c1 0100 	rsb	r1, r1, #0
   1b9e0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    result = (int32_t)(mult.long_long >> 31);
   1b9e4:	ea4f 73d0 	mov.w	r3, r0, lsr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b9e8:	f04f 0001 	mov.w	r0, #1
   1b9ec:	fa00 f001 	lsl.w	r0, r0, r1
    result = (int32_t)(mult.long_long >> 31);
   1b9f0:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1b9f4:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1b9f8:	ea03 0600 	and.w	r6, r3, r0
        result++;
   1b9fc:	bfc8      	it	gt
   1b9fe:	3701      	addgt	r7, #1
    q31_t threshold = remainder_mask >> 1;
   1ba00:	1040      	asrs	r0, r0, #1
    if (result < 0)
   1ba02:	fa53 f501 	asrs.w	r5, r3, r1
                    out_buff[3] = arm_nn_requantize(out_buff[3], *output_mult++, *output_shift++);
   1ba06:	9b07      	ldr	r3, [sp, #28]
        threshold++;
   1ba08:	bf48      	it	mi
   1ba0a:	3001      	addmi	r0, #1
    if (remainder > threshold)
   1ba0c:	4286      	cmp	r6, r0
   1ba0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ba12:	f852 3c04 	ldr.w	r3, [r2, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ba16:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   1ba1a:	fa04 f401 	lsl.w	r4, r4, r1
   1ba1e:	f1c0 0000 	rsb	r0, r0, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ba22:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1ba26:	f04f 0600 	mov.w	r6, #0
   1ba2a:	fbc3 1604 	smlal	r1, r6, r3, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ba2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ba32:	f04f 0301 	mov.w	r3, #1
   1ba36:	fa03 f300 	lsl.w	r3, r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1ba3a:	ea4f 71d1 	mov.w	r1, r1, lsr #31
   1ba3e:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ba42:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1ba46:	ea01 0403 	and.w	r4, r1, r3
        result++;
   1ba4a:	bfc8      	it	gt
   1ba4c:	3501      	addgt	r5, #1
    q31_t threshold = remainder_mask >> 1;
   1ba4e:	105b      	asrs	r3, r3, #1
    if (result < 0)
   1ba50:	4101      	asrs	r1, r0
        threshold++;
   1ba52:	bf48      	it	mi
   1ba54:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1ba56:	429c      	cmp	r4, r3

                    out_buff[0] += output_offset;
   1ba58:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
   1ba5a:	eb03 000e 	add.w	r0, r3, lr
                    out_buff[1] += output_offset;
                    out_buff[2] += output_offset;
                    out_buff[3] += output_offset;

                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
   1ba5e:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
        result++;
   1ba60:	bfc8      	it	gt
   1ba62:	3101      	addgt	r1, #1
   1ba64:	4298      	cmp	r0, r3
   1ba66:	bfb8      	it	lt
   1ba68:	4618      	movlt	r0, r3
                    out_buff[1] += output_offset;
   1ba6a:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
   1ba6c:	19dc      	adds	r4, r3, r7
                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
   1ba6e:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
   1ba70:	4298      	cmp	r0, r3
   1ba72:	bfa8      	it	ge
   1ba74:	4618      	movge	r0, r3
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
   1ba76:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
   1ba78:	429c      	cmp	r4, r3
   1ba7a:	bfb8      	it	lt
   1ba7c:	461c      	movlt	r4, r3
                    out_buff[2] += output_offset;
   1ba7e:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
   1ba80:	442b      	add	r3, r5
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
   1ba82:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
   1ba84:	42ac      	cmp	r4, r5
   1ba86:	bfa8      	it	ge
   1ba88:	462c      	movge	r4, r5
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
   1ba8a:	9d3d      	ldr	r5, [sp, #244]	@ 0xf4
   1ba8c:	42ab      	cmp	r3, r5
   1ba8e:	bfb8      	it	lt
   1ba90:	462b      	movlt	r3, r5
                    out_buff[3] += output_offset;
   1ba92:	9d3b      	ldr	r5, [sp, #236]	@ 0xec
   1ba94:	4429      	add	r1, r5
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
   1ba96:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
   1ba98:	42ab      	cmp	r3, r5
   1ba9a:	bfa8      	it	ge
   1ba9c:	462b      	movge	r3, r5
                    out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_max);
   1ba9e:	9d3d      	ldr	r5, [sp, #244]	@ 0xf4
   1baa0:	42a9      	cmp	r1, r5
   1baa2:	bfb8      	it	lt
   1baa4:	4629      	movlt	r1, r5
   1baa6:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
   1baa8:	42a9      	cmp	r1, r5
   1baaa:	bfa8      	it	ge
   1baac:	4629      	movge	r1, r5
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
   1baae:	9d07      	ldr	r5, [sp, #28]
   1bab0:	3510      	adds	r5, #16
   1bab2:	9507      	str	r5, [sp, #28]

                    *output++ = (int8_t)out_buff[0];
   1bab4:	2500      	movs	r5, #0
   1bab6:	f360 0507 	bfi	r5, r0, #0, #8
   1baba:	f364 250f 	bfi	r5, r4, #8, #8
   1babe:	f363 4517 	bfi	r5, r3, #16, #8
   1bac2:	f361 651f 	bfi	r5, r1, #24, #8
   1bac6:	9b08      	ldr	r3, [sp, #32]
   1bac8:	9936      	ldr	r1, [sp, #216]	@ 0xd8
   1baca:	50cd      	str	r5, [r1, r3]
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
   1bacc:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   1bace:	3304      	adds	r3, #4
   1bad0:	4299      	cmp	r1, r3
   1bad2:	f102 0210 	add.w	r2, r2, #16
   1bad6:	9308      	str	r3, [sp, #32]
   1bad8:	f73f aee6 	bgt.w	1b8a8 <depthwise_conv_s8_mult_4+0x124>
   1badc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   1bade:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   1bae0:	9f31      	ldr	r7, [sp, #196]	@ 0xc4
   1bae2:	e9dd 1e1e 	ldrd	r1, lr, [sp, #120]	@ 0x78
   1bae6:	4413      	add	r3, r2
   1bae8:	930f      	str	r3, [sp, #60]	@ 0x3c
   1baea:	4496      	add	lr, r2
   1baec:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
   1baee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1baf0:	e9dd 0620 	ldrd	r0, r6, [sp, #128]	@ 0x80
   1baf4:	4413      	add	r3, r2
   1baf6:	9336      	str	r3, [sp, #216]	@ 0xd8
                 ++in_ch, out_ch += ch_mult)
   1baf8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   1bafa:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
                 ++in_ch, out_ch += ch_mult)
   1bafc:	4419      	add	r1, r3
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
   1bafe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1bb00:	3301      	adds	r3, #1
   1bb02:	930b      	str	r3, [sp, #44]	@ 0x2c
   1bb04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1bb06:	4589      	cmp	r9, r1
   1bb08:	4413      	add	r3, r2
   1bb0a:	9311      	str	r3, [sp, #68]	@ 0x44
   1bb0c:	f73f aeb7 	bgt.w	1b87e <depthwise_conv_s8_mult_4+0xfa>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
   1bb10:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
   1bb12:	9915      	ldr	r1, [sp, #84]	@ 0x54
   1bb14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1bb16:	1a80      	subs	r0, r0, r2
   1bb18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   1bb1a:	440a      	add	r2, r1
   1bb1c:	9212      	str	r2, [sp, #72]	@ 0x48
   1bb1e:	9933      	ldr	r1, [sp, #204]	@ 0xcc
   1bb20:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   1bb22:	1a52      	subs	r2, r2, r1
   1bb24:	9210      	str	r2, [sp, #64]	@ 0x40
   1bb26:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
   1bb28:	3301      	adds	r3, #1
   1bb2a:	429a      	cmp	r2, r3
   1bb2c:	9313      	str	r3, [sp, #76]	@ 0x4c
   1bb2e:	f47f ae86 	bne.w	1b83e <depthwise_conv_s8_mult_4+0xba>
   1bb32:	e9dd 421b 	ldrd	r4, r2, [sp, #108]	@ 0x6c
   1bb36:	46be      	mov	lr, r7
   1bb38:	991d      	ldr	r1, [sp, #116]	@ 0x74
   1bb3a:	4637      	mov	r7, r6
   1bb3c:	9e34      	ldr	r6, [sp, #208]	@ 0xd0
   1bb3e:	46d3      	mov	fp, sl
   1bb40:	46ca      	mov	sl, r9
   1bb42:	46c1      	mov	r9, r8
    for (int32_t in_h = -pad_y, out_h = 0; out_h < output_y; in_h += stride_y, ++out_h)
   1bb44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1bb46:	4433      	add	r3, r6
   1bb48:	930e      	str	r3, [sp, #56]	@ 0x38
   1bb4a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
   1bb4c:	3401      	adds	r4, #1
   1bb4e:	42a3      	cmp	r3, r4
   1bb50:	eba1 0106 	sub.w	r1, r1, r6
   1bb54:	eba2 0206 	sub.w	r2, r2, r6
   1bb58:	f47f ae46 	bne.w	1b7e8 <depthwise_conv_s8_mult_4+0x64>
#endif
                }
            }
        }
    }
}
   1bb5c:	b023      	add	sp, #140	@ 0x8c
   1bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    int32_t out_buff[4] = {0, 0, 0, 0};
   1bb62:	9f09      	ldr	r7, [sp, #36]	@ 0x24
   1bb64:	463c      	mov	r4, r7
   1bb66:	463d      	mov	r5, r7
   1bb68:	463e      	mov	r6, r7
   1bb6a:	e6a7      	b.n	1b8bc <depthwise_conv_s8_mult_4+0x138>

0001bb6c <arm_depthwise_conv_s8>:
                                          const q7_t *kernel,
                                          const cmsis_nn_dims *bias_dims,
                                          const int32_t *bias,
                                          const cmsis_nn_dims *output_dims,
                                          q7_t *output)
{
   1bb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb70:	469c      	mov	ip, r3
   1bb72:	b0cb      	sub	sp, #300	@ 0x12c
   1bb74:	4691      	mov	r9, r2
    const uint16_t dilation_y = dw_conv_params->dilation.h;

    (void)bias_dims;
    (void)ctx;

    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bb76:	f8dc 0000 	ldr.w	r0, [ip]
{
   1bb7a:	9f55      	ldr	r7, [sp, #340]	@ 0x154
   1bb7c:	f8dd 8164 	ldr.w	r8, [sp, #356]	@ 0x164
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bb80:	9017      	str	r0, [sp, #92]	@ 0x5c
                                 dw_conv_params->padding.h,
                                 dw_conv_params->stride.w,
                                 dw_conv_params->stride.h,
                                 bias,
                                 output,
                                 quant_params->shift,
   1bb82:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1bb86:	9024      	str	r0, [sp, #144]	@ 0x90
                                 filter_dims->h,
   1bb88:	e9d7 7a01 	ldrd	r7, sl, [r7, #4]
                                 quant_params->multiplier,
   1bb8c:	f8d9 0000 	ldr.w	r0, [r9]
   1bb90:	9025      	str	r0, [sp, #148]	@ 0x94
{
   1bb92:	460c      	mov	r4, r1
                                 output_dims->w,
   1bb94:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1bb98:	9026      	str	r0, [sp, #152]	@ 0x98
                                 output_dims->h,
   1bb9a:	f8d8 0004 	ldr.w	r0, [r8, #4]
                                 filter_dims->h,
   1bb9e:	971a      	str	r7, [sp, #104]	@ 0x68
                                 output_dims->h,
   1bba0:	901d      	str	r0, [sp, #116]	@ 0x74
                                 dw_conv_params->padding.w,
   1bba2:	6967      	ldr	r7, [r4, #20]
                                 dw_conv_params->output_offset,
   1bba4:	6860      	ldr	r0, [r4, #4]
                                 dw_conv_params->padding.w,
   1bba6:	971b      	str	r7, [sp, #108]	@ 0x6c
    const uint16_t dilation_y = dw_conv_params->dilation.h;
   1bba8:	e9d1 5607 	ldrd	r5, r6, [r1, #28]
                                 dw_conv_params->padding.h,
   1bbac:	69a7      	ldr	r7, [r4, #24]
                                 dw_conv_params->output_offset,
   1bbae:	9027      	str	r0, [sp, #156]	@ 0x9c
                                 dw_conv_params->input_offset,
   1bbb0:	6820      	ldr	r0, [r4, #0]
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bbb2:	688b      	ldr	r3, [r1, #8]
                                 dw_conv_params->padding.h,
   1bbb4:	9723      	str	r7, [sp, #140]	@ 0x8c
                                 input_dims->h,
   1bbb6:	e9dc 2101 	ldrd	r2, r1, [ip, #4]
                                 dw_conv_params->stride.h,
   1bbba:	e9d4 b703 	ldrd	fp, r7, [r4, #12]
                                 input_dims->c,
   1bbbe:	f8dc c00c 	ldr.w	ip, [ip, #12]
                                 dw_conv_params->input_offset,
   1bbc2:	9028      	str	r0, [sp, #160]	@ 0xa0
                                 dw_conv_params->activation.min,
   1bbc4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
   1bbc6:	9029      	str	r0, [sp, #164]	@ 0xa4
                                 dw_conv_params->activation.max);
   1bbc8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
   1bbca:	902a      	str	r0, [sp, #168]	@ 0xa8
    const uint16_t dilation_x = dw_conv_params->dilation.w;
   1bbcc:	b2a8      	uxth	r0, r5
   1bbce:	902d      	str	r0, [sp, #180]	@ 0xb4
    const uint16_t dilation_y = dw_conv_params->dilation.h;
   1bbd0:	b2b0      	uxth	r0, r6
   1bbd2:	902e      	str	r0, [sp, #184]	@ 0xb8
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bbd4:	0798      	lsls	r0, r3, #30
   1bbd6:	d103      	bne.n	1bbe0 <arm_depthwise_conv_s8+0x74>
   1bbd8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
   1bbda:	2801      	cmp	r0, #1
   1bbdc:	f000 81b8 	beq.w	1bf50 <arm_depthwise_conv_s8+0x3e4>
    }
    else
    {
        depthwise_conv_s8_generic(input,
   1bbe0:	f8bd 005c 	ldrh.w	r0, [sp, #92]	@ 0x5c
   1bbe4:	9017      	str	r0, [sp, #92]	@ 0x5c
   1bbe6:	fa1f fb8b 	uxth.w	fp, fp
   1bbea:	b2bc      	uxth	r4, r7
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bbec:	2800      	cmp	r0, #0
   1bbee:	f000 819c 	beq.w	1bf2a <arm_depthwise_conv_s8+0x3be>
   1bbf2:	fa1f f78c 	uxth.w	r7, ip
   1bbf6:	9716      	str	r7, [sp, #88]	@ 0x58
   1bbf8:	fa1f fe82 	uxth.w	lr, r2
                                int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
   1bbfc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1bbfe:	981b      	ldr	r0, [sp, #108]	@ 0x6c
   1bc00:	fa1f f983 	uxth.w	r9, r3
   1bc04:	b28b      	uxth	r3, r1
   1bc06:	fa1f f18a 	uxth.w	r1, sl
   1bc0a:	931c      	str	r3, [sp, #112]	@ 0x70
   1bc0c:	9119      	str	r1, [sp, #100]	@ 0x64
   1bc0e:	b2a9      	uxth	r1, r5
   1bc10:	fb09 f502 	mul.w	r5, r9, r2
   1bc14:	951b      	str	r5, [sp, #108]	@ 0x6c
        input += (input_x * input_y * input_ch);
   1bc16:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
   1bc18:	9115      	str	r1, [sp, #84]	@ 0x54
   1bc1a:	4243      	negs	r3, r0
   1bc1c:	b29f      	uxth	r7, r3
   1bc1e:	fb05 f30e 	mul.w	r3, r5, lr
   1bc22:	f8bd 0068 	ldrh.w	r0, [sp, #104]	@ 0x68
   1bc26:	902c      	str	r0, [sp, #176]	@ 0xb0
   1bc28:	b2b6      	uxth	r6, r6
   1bc2a:	fb02 fc03 	mul.w	ip, r2, r3
   1bc2e:	fb05 f302 	mul.w	r3, r5, r2
   1bc32:	fb06 f003 	mul.w	r0, r6, r3
   1bc36:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
   1bc38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1bc3a:	9034      	str	r0, [sp, #208]	@ 0xd0
   1bc3c:	ea4f 0089 	mov.w	r0, r9, lsl #2
   1bc40:	9035      	str	r0, [sp, #212]	@ 0xd4
   1bc42:	fb03 f005 	mul.w	r0, r3, r5
   1bc46:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1bc48:	9033      	str	r0, [sp, #204]	@ 0xcc
   1bc4a:	fb03 f302 	mul.w	r3, r3, r2
    int i_out = 0;
   1bc4e:	f04f 0a00 	mov.w	sl, #0
   1bc52:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
   1bc56:	9817      	ldr	r0, [sp, #92]	@ 0x5c
   1bc58:	9330      	str	r3, [sp, #192]	@ 0xc0
   1bc5a:	46d8      	mov	r8, fp
   1bc5c:	9618      	str	r6, [sp, #96]	@ 0x60
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bc5e:	4652      	mov	r2, sl
   1bc60:	4625      	mov	r5, r4
   1bc62:	46cb      	mov	fp, r9
   1bc64:	4673      	mov	r3, lr
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1bc66:	2900      	cmp	r1, #0
   1bc68:	f000 8158 	beq.w	1bf1c <arm_depthwise_conv_s8+0x3b0>
   1bc6c:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
    const q31_t remainder_mask = (1 << exponent) - 1;
   1bc6e:	921a      	str	r2, [sp, #104]	@ 0x68
   1bc70:	4264      	negs	r4, r4
   1bc72:	fa1f fe84 	uxth.w	lr, r4
   1bc76:	f8bd 4098 	ldrh.w	r4, [sp, #152]	@ 0x98
   1bc7a:	9422      	str	r4, [sp, #136]	@ 0x88
   1bc7c:	2400      	movs	r4, #0
   1bc7e:	9420      	str	r4, [sp, #128]	@ 0x80
   1bc80:	461a      	mov	r2, r3
   1bc82:	903d      	str	r0, [sp, #244]	@ 0xf4
   1bc84:	4664      	mov	r4, ip
   1bc86:	4673      	mov	r3, lr
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1bc88:	9822      	ldr	r0, [sp, #136]	@ 0x88
            const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   1bc8a:	b21e      	sxth	r6, r3
   1bc8c:	962f      	str	r6, [sp, #188]	@ 0xbc
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1bc8e:	2800      	cmp	r0, #0
   1bc90:	f000 8138 	beq.w	1bf04 <arm_depthwise_conv_s8+0x398>
   1bc94:	2e00      	cmp	r6, #0
                            ker_y_start = MAX(0, -base_idx_y);
   1bc96:	f1c6 0c00 	rsb	ip, r6, #0
   1bc9a:	bfd4      	ite	le
   1bc9c:	4660      	movle	r0, ip
   1bc9e:	2000      	movgt	r0, #0
   1bca0:	9032      	str	r0, [sp, #200]	@ 0xc8
   1bca2:	1b90      	subs	r0, r2, r6
   1bca4:	902b      	str	r0, [sp, #172]	@ 0xac
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1bca6:	9818      	ldr	r0, [sp, #96]	@ 0x60
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1bca8:	f8dd e068 	ldr.w	lr, [sp, #104]	@ 0x68
   1bcac:	953e      	str	r5, [sp, #248]	@ 0xf8
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1bcae:	eba0 0c06 	sub.w	ip, r0, r6
   1bcb2:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
   1bcb6:	963c      	str	r6, [sp, #240]	@ 0xf0
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1bcb8:	e9dd 062b 	ldrd	r0, r6, [sp, #172]	@ 0xac
   1bcbc:	4286      	cmp	r6, r0
   1bcbe:	bfa8      	it	ge
   1bcc0:	4606      	movge	r6, r0
   1bcc2:	963b      	str	r6, [sp, #236]	@ 0xec
   1bcc4:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
   1bcc8:	46bc      	mov	ip, r7
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1bcca:	f04f 0900 	mov.w	r9, #0
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1bcce:	f8cd b05c 	str.w	fp, [sp, #92]	@ 0x5c
   1bcd2:	4616      	mov	r6, r2
   1bcd4:	46a2      	mov	sl, r4
   1bcd6:	460d      	mov	r5, r1
   1bcd8:	4618      	mov	r0, r3
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1bcda:	9b16      	ldr	r3, [sp, #88]	@ 0x58
                const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   1bcdc:	fa0f fb8c 	sxth.w	fp, ip
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1bce0:	2b00      	cmp	r3, #0
   1bce2:	f000 80fa 	beq.w	1beda <arm_depthwise_conv_s8+0x36e>
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1bce6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   1bce8:	f1bb 0f00 	cmp.w	fp, #0
                            ker_x_start = MAX(0, -base_idx_x);
   1bcec:	f1cb 0100 	rsb	r1, fp, #0
   1bcf0:	bfd4      	ite	le
   1bcf2:	460b      	movle	r3, r1
   1bcf4:	2300      	movgt	r3, #0
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1bcf6:	eba2 040b 	sub.w	r4, r2, fp
   1bcfa:	1e62      	subs	r2, r4, #1
   1bcfc:	9331      	str	r3, [sp, #196]	@ 0xc4
   1bcfe:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1bd00:	923a      	str	r2, [sp, #232]	@ 0xe8
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   1bd02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   1bd04:	eba3 030b 	sub.w	r3, r3, fp
   1bd08:	429a      	cmp	r2, r3
                            ker_x_start = MAX(0, -base_idx_x);
   1bd0a:	f04f 0100 	mov.w	r1, #0
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   1bd0e:	bfa8      	it	ge
   1bd10:	461a      	movge	r2, r3
   1bd12:	e9cd 893f 	strd	r8, r9, [sp, #252]	@ 0xfc
   1bd16:	9239      	str	r2, [sp, #228]	@ 0xe4
   1bd18:	9338      	str	r3, [sp, #224]	@ 0xe0
                            ker_x_start = MAX(0, -base_idx_x);
   1bd1a:	f06f 0403 	mvn.w	r4, #3
   1bd1e:	460a      	mov	r2, r1
   1bd20:	4689      	mov	r9, r1
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1bd22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1bd24:	2b00      	cmp	r3, #0
   1bd26:	f000 80cf 	beq.w	1bec8 <arm_depthwise_conv_s8+0x35c>
   1bd2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1bd2c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1bd2e:	46c8      	mov	r8, r9
   1bd30:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
   1bd34:	995a      	ldr	r1, [sp, #360]	@ 0x168
   1bd36:	4449      	add	r1, r9
   1bd38:	911f      	str	r1, [sp, #124]	@ 0x7c
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1bd3a:	9915      	ldr	r1, [sp, #84]	@ 0x54
   1bd3c:	eb01 0903 	add.w	r9, r1, r3
   1bd40:	f109 33ff 	add.w	r3, r9, #4294967295	@ 0xffffffff
   1bd44:	9336      	str	r3, [sp, #216]	@ 0xd8
   1bd46:	9b25      	ldr	r3, [sp, #148]	@ 0x94
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
   1bd48:	992b      	ldr	r1, [sp, #172]	@ 0xac
   1bd4a:	4423      	add	r3, r4
   1bd4c:	931e      	str	r3, [sp, #120]	@ 0x78
   1bd4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   1bd50:	4423      	add	r3, r4
   1bd52:	931d      	str	r3, [sp, #116]	@ 0x74
   1bd54:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1bd56:	eb03 0908 	add.w	r9, r3, r8
   1bd5a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   1bd5c:	e9cd ae41 	strd	sl, lr, [sp, #260]	@ 0x104
   1bd60:	e9cd 6543 	strd	r6, r5, [sp, #268]	@ 0x10c
   1bd64:	e9cd 0445 	strd	r0, r4, [sp, #276]	@ 0x114
   1bd68:	440b      	add	r3, r1
   1bd6a:	9337      	str	r3, [sp, #220]	@ 0xdc
                        if (dilation_x > 1)
   1bd6c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1bd6e:	2b01      	cmp	r3, #1
   1bd70:	f240 80df 	bls.w	1bf32 <arm_depthwise_conv_s8+0x3c6>
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1bd74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1bd76:	993a      	ldr	r1, [sp, #232]	@ 0xe8
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1bd78:	9836      	ldr	r0, [sp, #216]	@ 0xd8
                            const int32_t start_x_max = (-base_idx_x + dilation_x - 1) / dilation_x;
   1bd7a:	fb91 f1f3 	sdiv	r1, r1, r3
                            const int32_t end_min_x = (input_x - base_idx_x + dilation_x - 1) / dilation_x;
   1bd7e:	fb90 f4f3 	sdiv	r4, r0, r3
                            ker_x_end = MIN(kernel_x, end_min_x);
   1bd82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1bd84:	429c      	cmp	r4, r3
   1bd86:	bfa8      	it	ge
   1bd88:	461c      	movge	r4, r3
                        if (dilation_y > 1)
   1bd8a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
                            ker_x_end = MIN(kernel_x, end_min_x);
   1bd8c:	9421      	str	r4, [sp, #132]	@ 0x84
                        if (dilation_y > 1)
   1bd8e:	2b01      	cmp	r3, #1
                            ker_x_start = MAX(0, start_x_max);
   1bd90:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                        if (dilation_y > 1)
   1bd94:	f240 80d4 	bls.w	1bf40 <arm_depthwise_conv_s8+0x3d4>
                            ker_y_end = MIN(kernel_y, end_min_y);
   1bd98:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
                            const int32_t end_min_y = (input_y - base_idx_y + dilation_y - 1) / dilation_y;
   1bd9a:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
   1bd9c:	1e58      	subs	r0, r3, #1
   1bd9e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   1bda0:	fb90 f0f3 	sdiv	r0, r0, r3
                            ker_y_end = MIN(kernel_y, end_min_y);
   1bda4:	42a8      	cmp	r0, r5
   1bda6:	bfa8      	it	ge
   1bda8:	4628      	movge	r0, r5
                            const int32_t start_y_max = (-base_idx_y + dilation_y - 1) / dilation_y;
   1bdaa:	9d3c      	ldr	r5, [sp, #240]	@ 0xf0
   1bdac:	fb95 f3f3 	sdiv	r3, r5, r3
                        if (bias)
   1bdb0:	9d58      	ldr	r5, [sp, #352]	@ 0x160
                            ker_y_start = MAX(0, start_y_max);
   1bdb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
                        if (bias)
   1bdb6:	2d00      	cmp	r5, #0
   1bdb8:	f000 80c8 	beq.w	1bf4c <arm_depthwise_conv_s8+0x3e0>
                            acc_0 = bias[idx_out_ch];
   1bdbc:	f855 5028 	ldr.w	r5, [r5, r8, lsl #2]
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1bdc0:	4298      	cmp	r0, r3
   1bdc2:	dd40      	ble.n	1be46 <arm_depthwise_conv_s8+0x2da>
   1bdc4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
   1bdc6:	9e2f      	ldr	r6, [sp, #188]	@ 0xbc
   1bdc8:	fb04 6a03 	mla	sl, r4, r3, r6
   1bdcc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
   1bdce:	fb04 be01 	mla	lr, r4, r1, fp
   1bdd2:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
   1bdd4:	fb04 ee0a 	mla	lr, r4, sl, lr
   1bdd8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
   1bdda:	fb04 2e0e 	mla	lr, r4, lr, r2
   1bdde:	9c54      	ldr	r4, [sp, #336]	@ 0x150
   1bde0:	eb04 0a0e 	add.w	sl, r4, lr
   1bde4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
   1bde6:	fb04 1e03 	mla	lr, r4, r3, r1
   1bdea:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
   1bdec:	fb04 8e0e 	mla	lr, r4, lr, r8
   1bdf0:	9c56      	ldr	r4, [sp, #344]	@ 0x158
   1bdf2:	44a6      	add	lr, r4
   1bdf4:	9c21      	ldr	r4, [sp, #132]	@ 0x84
   1bdf6:	e9cd b247 	strd	fp, r2, [sp, #284]	@ 0x11c
   1bdfa:	46c3      	mov	fp, r8
   1bdfc:	46e0      	mov	r8, ip
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1bdfe:	428c      	cmp	r4, r1
   1be00:	dd15      	ble.n	1be2e <arm_depthwise_conv_s8+0x2c2>
   1be02:	46f4      	mov	ip, lr
   1be04:	4656      	mov	r6, sl
   1be06:	460a      	mov	r2, r1
   1be08:	9321      	str	r3, [sp, #132]	@ 0x84
   1be0a:	9149      	str	r1, [sp, #292]	@ 0x124
   1be0c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
                                acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
   1be0e:	f996 3000 	ldrsb.w	r3, [r6]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1be12:	440e      	add	r6, r1
                                acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
   1be14:	9928      	ldr	r1, [sp, #160]	@ 0xa0
   1be16:	440b      	add	r3, r1
   1be18:	f99c 1000 	ldrsb.w	r1, [ip]
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1be1c:	3201      	adds	r2, #1
                                acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
   1be1e:	fb01 5503 	mla	r5, r1, r3, r5
                            for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
   1be22:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   1be24:	42a2      	cmp	r2, r4
   1be26:	449c      	add	ip, r3
   1be28:	d1f0      	bne.n	1be0c <arm_depthwise_conv_s8+0x2a0>
   1be2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
   1be2c:	9949      	ldr	r1, [sp, #292]	@ 0x124
                        for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1be2e:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
   1be30:	3301      	adds	r3, #1
   1be32:	4492      	add	sl, r2
   1be34:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
   1be36:	4283      	cmp	r3, r0
   1be38:	4496      	add	lr, r2
   1be3a:	d1e0      	bne.n	1bdfe <arm_depthwise_conv_s8+0x292>
   1be3c:	46c4      	mov	ip, r8
   1be3e:	9a48      	ldr	r2, [sp, #288]	@ 0x120
   1be40:	46d8      	mov	r8, fp
   1be42:	f8dd b11c 	ldr.w	fp, [sp, #284]	@ 0x11c
                        acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
   1be46:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1be48:	991e      	ldr	r1, [sp, #120]	@ 0x78
   1be4a:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1be4e:	931d      	str	r3, [sp, #116]	@ 0x74
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1be50:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1be54:	f851 3f04 	ldr.w	r3, [r1, #4]!
   1be58:	911e      	str	r1, [sp, #120]	@ 0x78
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1be5a:	fa05 f404 	lsl.w	r4, r5, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1be5e:	2100      	movs	r1, #0
   1be60:	f04f 4580 	mov.w	r5, #1073741824	@ 0x40000000
   1be64:	fbc4 5103 	smlal	r5, r1, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1be68:	4240      	negs	r0, r0
    result = (int32_t)(mult.long_long >> 31);
   1be6a:	0feb      	lsrs	r3, r5, #31
   1be6c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1be70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1be74:	2101      	movs	r1, #1
   1be76:	4081      	lsls	r1, r0
   1be78:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1be7a:	ea03 0401 	and.w	r4, r3, r1
    if (result < 0)
   1be7e:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
   1be80:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1be84:	bf48      	it	mi
   1be86:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1be88:	428c      	cmp	r4, r1
                        acc_0 += output_offset;
   1be8a:	9927      	ldr	r1, [sp, #156]	@ 0x9c
        result++;
   1be8c:	bfc8      	it	gt
   1be8e:	3301      	addgt	r3, #1
   1be90:	440b      	add	r3, r1
                        acc_0 = MAX(acc_0, output_activation_min);
   1be92:	9929      	ldr	r1, [sp, #164]	@ 0xa4
   1be94:	428b      	cmp	r3, r1
   1be96:	bfb8      	it	lt
   1be98:	460b      	movlt	r3, r1
                        acc_0 = MIN(acc_0, output_activation_max);
   1be9a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
   1be9c:	428b      	cmp	r3, r1
   1be9e:	bfa8      	it	ge
   1bea0:	460b      	movge	r3, r1
                        output[i_out++] = acc_0;
   1bea2:	991f      	ldr	r1, [sp, #124]	@ 0x7c
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1bea4:	f108 0801 	add.w	r8, r8, #1
                        output[i_out++] = acc_0;
   1bea8:	f801 3f01 	strb.w	r3, [r1, #1]!
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1beac:	45c1      	cmp	r9, r8
                        output[i_out++] = acc_0;
   1beae:	911f      	str	r1, [sp, #124]	@ 0x7c
                    for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
   1beb0:	f47f af5c 	bne.w	1bd6c <arm_depthwise_conv_s8+0x200>
   1beb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
   1beb6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1beb8:	e9dd ae41 	ldrd	sl, lr, [sp, #260]	@ 0x104
   1bebc:	e9dd 6543 	ldrd	r6, r5, [sp, #268]	@ 0x10c
   1bec0:	e9dd 0445 	ldrd	r0, r4, [sp, #276]	@ 0x114
   1bec4:	4419      	add	r1, r3
   1bec6:	911a      	str	r1, [sp, #104]	@ 0x68
                for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
   1bec8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
   1beca:	441c      	add	r4, r3
   1becc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
   1bece:	3201      	adds	r2, #1
   1bed0:	4293      	cmp	r3, r2
   1bed2:	f47f af26 	bne.w	1bd22 <arm_depthwise_conv_s8+0x1b6>
   1bed6:	e9dd 893f 	ldrd	r8, r9, [sp, #252]	@ 0xfc
            for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1beda:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   1bedc:	f109 0901 	add.w	r9, r9, #1
   1bee0:	eb08 010c 	add.w	r1, r8, ip
   1bee4:	4599      	cmp	r9, r3
   1bee6:	fa1f fc81 	uxth.w	ip, r1
   1beea:	f47f aef6 	bne.w	1bcda <arm_depthwise_conv_s8+0x16e>
   1beee:	4629      	mov	r1, r5
   1bef0:	f8dd b05c 	ldr.w	fp, [sp, #92]	@ 0x5c
   1bef4:	9d3e      	ldr	r5, [sp, #248]	@ 0xf8
   1bef6:	4654      	mov	r4, sl
   1bef8:	4632      	mov	r2, r6
   1befa:	f8dd a068 	ldr.w	sl, [sp, #104]	@ 0x68
   1befe:	f8cd e068 	str.w	lr, [sp, #104]	@ 0x68
   1bf02:	4603      	mov	r3, r0
        for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1bf04:	9e20      	ldr	r6, [sp, #128]	@ 0x80
   1bf06:	3601      	adds	r6, #1
   1bf08:	442b      	add	r3, r5
   1bf0a:	428e      	cmp	r6, r1
   1bf0c:	9620      	str	r6, [sp, #128]	@ 0x80
   1bf0e:	b29b      	uxth	r3, r3
   1bf10:	f47f aeba 	bne.w	1bc88 <arm_depthwise_conv_s8+0x11c>
   1bf14:	4613      	mov	r3, r2
   1bf16:	983d      	ldr	r0, [sp, #244]	@ 0xf4
   1bf18:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   1bf1a:	46a4      	mov	ip, r4
        input += (input_x * input_y * input_ch);
   1bf1c:	9c54      	ldr	r4, [sp, #336]	@ 0x150
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bf1e:	3201      	adds	r2, #1
        input += (input_x * input_y * input_ch);
   1bf20:	4464      	add	r4, ip
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bf22:	4282      	cmp	r2, r0
        input += (input_x * input_y * input_ch);
   1bf24:	9454      	str	r4, [sp, #336]	@ 0x150
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bf26:	f47f ae9e 	bne.w	1bc66 <arm_depthwise_conv_s8+0xfa>
                                  dilation_y);
    }

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
}
   1bf2a:	2000      	movs	r0, #0
   1bf2c:	b04b      	add	sp, #300	@ 0x12c
   1bf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            ker_x_end = MIN(kernel_x, input_x - base_idx_x);
   1bf32:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
   1bf34:	9321      	str	r3, [sp, #132]	@ 0x84
                        if (dilation_y > 1)
   1bf36:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
                            ker_x_start = MAX(0, -base_idx_x);
   1bf38:	9931      	ldr	r1, [sp, #196]	@ 0xc4
                        if (dilation_y > 1)
   1bf3a:	2b01      	cmp	r3, #1
   1bf3c:	f63f af2c 	bhi.w	1bd98 <arm_depthwise_conv_s8+0x22c>
                        if (bias)
   1bf40:	9d58      	ldr	r5, [sp, #352]	@ 0x160
                            ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1bf42:	983b      	ldr	r0, [sp, #236]	@ 0xec
                            ker_y_start = MAX(0, -base_idx_y);
   1bf44:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
                        if (bias)
   1bf46:	2d00      	cmp	r5, #0
   1bf48:	f47f af38 	bne.w	1bdbc <arm_depthwise_conv_s8+0x250>
                        int32_t acc_0 = 0;
   1bf4c:	9d58      	ldr	r5, [sp, #352]	@ 0x160
   1bf4e:	e737      	b.n	1bdc0 <arm_depthwise_conv_s8+0x254>
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bf50:	2d01      	cmp	r5, #1
   1bf52:	d003      	beq.n	1bf5c <arm_depthwise_conv_s8+0x3f0>
        depthwise_conv_s8_generic(input,
   1bf54:	fa1f fb8b 	uxth.w	fp, fp
   1bf58:	b2bc      	uxth	r4, r7
    for (i_batch = 0; i_batch < input_batches; i_batch++)
   1bf5a:	e64a      	b.n	1bbf2 <arm_depthwise_conv_s8+0x86>
    if (dw_conv_params->ch_mult % 4 == 0 && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1bf5c:	2e01      	cmp	r6, #1
   1bf5e:	d1f9      	bne.n	1bf54 <arm_depthwise_conv_s8+0x3e8>
        depthwise_conv_s8_mult_4(input,
   1bf60:	9824      	ldr	r0, [sp, #144]	@ 0x90
   1bf62:	900b      	str	r0, [sp, #44]	@ 0x2c
   1bf64:	985a      	ldr	r0, [sp, #360]	@ 0x168
   1bf66:	900a      	str	r0, [sp, #40]	@ 0x28
   1bf68:	9302      	str	r3, [sp, #8]
   1bf6a:	9858      	ldr	r0, [sp, #352]	@ 0x160
   1bf6c:	9b56      	ldr	r3, [sp, #344]	@ 0x158
   1bf6e:	9300      	str	r3, [sp, #0]
   1bf70:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   1bf72:	9312      	str	r3, [sp, #72]	@ 0x48
   1bf74:	e9cd 7008 	strd	r7, r0, [sp, #32]
   1bf78:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
   1bf7a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
   1bf7c:	9006      	str	r0, [sp, #24]
   1bf7e:	9311      	str	r3, [sp, #68]	@ 0x44
   1bf80:	981b      	ldr	r0, [sp, #108]	@ 0x6c
   1bf82:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
   1bf84:	9005      	str	r0, [sp, #20]
   1bf86:	9310      	str	r3, [sp, #64]	@ 0x40
   1bf88:	981a      	ldr	r0, [sp, #104]	@ 0x68
   1bf8a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   1bf8c:	930f      	str	r3, [sp, #60]	@ 0x3c
   1bf8e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   1bf90:	930e      	str	r3, [sp, #56]	@ 0x38
   1bf92:	e9cd a003 	strd	sl, r0, [sp, #12]
   1bf96:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   1bf98:	930d      	str	r3, [sp, #52]	@ 0x34
   1bf9a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   1bf9c:	f8cd b01c 	str.w	fp, [sp, #28]
   1bfa0:	930c      	str	r3, [sp, #48]	@ 0x30
   1bfa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1bfa6:	9301      	str	r3, [sp, #4]
   1bfa8:	9854      	ldr	r0, [sp, #336]	@ 0x150
   1bfaa:	4663      	mov	r3, ip
   1bfac:	f7ff fbea 	bl	1b784 <depthwise_conv_s8_mult_4>
   1bfb0:	e7bb      	b.n	1bf2a <arm_depthwise_conv_s8+0x3be>
   1bfb2:	bf00      	nop

0001bfb4 <arm_depthwise_conv_s8_opt>:
                                              const q7_t *kernel,
                                              const cmsis_nn_dims *bias_dims,
                                              const int32_t *bias,
                                              const cmsis_nn_dims *output_dims,
                                              q7_t *output)
{
   1bfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfb8:	b0b9      	sub	sp, #228	@ 0xe4
   1bfba:	461d      	mov	r5, r3
   1bfbc:	460b      	mov	r3, r1
   1bfbe:	9947      	ldr	r1, [sp, #284]	@ 0x11c

    const int32_t input_ch = input_dims->c;
   1bfc0:	68ec      	ldr	r4, [r5, #12]
    const int32_t output_ch = output_dims->c;
   1bfc2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
   1bfc6:	9e43      	ldr	r6, [sp, #268]	@ 0x10c

    /* Check depth multiplier is 1 */
    if (input_ch != output_ch)
   1bfc8:	4564      	cmp	r4, ip
   1bfca:	f040 8308 	bne.w	1c5de <arm_depthwise_conv_s8_opt+0x62a>
    {
        return ARM_CMSIS_NN_ARG_ERROR;
    }

    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
   1bfce:	6800      	ldr	r0, [r0, #0]
{
#if defined(ARM_MATH_MVEI)
    (void)input_dims;
    return (4 * CH_IN_BLOCK_MVE * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int8_t);
#elif defined(ARM_MATH_DSP)
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   1bfd0:	68b7      	ldr	r7, [r6, #8]
   1bfd2:	6876      	ldr	r6, [r6, #4]
    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
   1bfd4:	9008      	str	r0, [sp, #32]
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   1bfd6:	9710      	str	r7, [sp, #64]	@ 0x40
   1bfd8:	961c      	str	r6, [sp, #112]	@ 0x70
    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
   1bfda:	2800      	cmp	r0, #0
   1bfdc:	f000 82f7 	beq.w	1c5ce <arm_depthwise_conv_s8_opt+0x61a>
    const int32_t output_x = output_dims->w;
   1bfe0:	e9d1 a101 	ldrd	sl, r1, [r1, #4]
    const int32_t input_y = input_dims->h;
   1bfe4:	f8d5 9004 	ldr.w	r9, [r5, #4]
    const int32_t output_x = output_dims->w;
   1bfe8:	911f      	str	r1, [sp, #124]	@ 0x7c
    const int32_t input_x = input_dims->w;
   1bfea:	68a9      	ldr	r1, [r5, #8]
    const int32_t *output_shift = quant_params->shift;
   1bfec:	6855      	ldr	r5, [r2, #4]
    const int32_t *output_mult = quant_params->multiplier;
   1bfee:	6812      	ldr	r2, [r2, #0]
   1bff0:	921e      	str	r2, [sp, #120]	@ 0x78
    const int32_t output_offset = dw_conv_params->output_offset;
   1bff2:	685a      	ldr	r2, [r3, #4]
    const int32_t input_x = input_dims->w;
   1bff4:	9121      	str	r1, [sp, #132]	@ 0x84
    const int32_t output_offset = dw_conv_params->output_offset;
   1bff6:	9205      	str	r2, [sp, #20]
    const int32_t pad_x = dw_conv_params->padding.w;
   1bff8:	6959      	ldr	r1, [r3, #20]
    const int32_t input_offset = dw_conv_params->input_offset;
   1bffa:	681a      	ldr	r2, [r3, #0]
    const int32_t pad_x = dw_conv_params->padding.w;
   1bffc:	9131      	str	r1, [sp, #196]	@ 0xc4
    const int32_t stride_y = dw_conv_params->stride.h;
   1bffe:	e9d3 7003 	ldrd	r7, r0, [r3, #12]
    const int32_t pad_y = dw_conv_params->padding.h;
   1c002:	6999      	ldr	r1, [r3, #24]
    const int32_t input_offset = dw_conv_params->input_offset;
   1c004:	9224      	str	r2, [sp, #144]	@ 0x90
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1c006:	f1ba 0f00 	cmp.w	sl, #0
    const int32_t output_activation_min = dw_conv_params->activation.min;
   1c00a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
    const int32_t output_activation_max = dw_conv_params->activation.max;
   1c00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    const int32_t *output_shift = quant_params->shift;
   1c00e:	951d      	str	r5, [sp, #116]	@ 0x74
    const int32_t output_activation_min = dw_conv_params->activation.min;
   1c010:	9206      	str	r2, [sp, #24]
    const int32_t output_activation_max = dw_conv_params->activation.max;
   1c012:	9307      	str	r3, [sp, #28]
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1c014:	f340 82aa 	ble.w	1c56c <arm_depthwise_conv_s8_opt+0x5b8>
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c018:	9b10      	ldr	r3, [sp, #64]	@ 0x40
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   1c01a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c01c:	fb04 f303 	mul.w	r3, r4, r3
            row_count = output_ch / 4;
   1c020:	f1bc 0f00 	cmp.w	ip, #0
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c024:	932c      	str	r3, [sp, #176]	@ 0xb0
            row_count = output_ch / 4;
   1c026:	4663      	mov	r3, ip
   1c028:	bfb8      	it	lt
   1c02a:	f10c 0303 	addlt.w	r3, ip, #3
   1c02e:	f3c3 068f 	ubfx	r6, r3, #2, #16
   1c032:	424b      	negs	r3, r1
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   1c034:	9910      	ldr	r1, [sp, #64]	@ 0x40
            row_count = output_ch / 4;
   1c036:	9620      	str	r6, [sp, #128]	@ 0x80
   1c038:	b29b      	uxth	r3, r3
   1c03a:	9301      	str	r3, [sp, #4]
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   1c03c:	fb01 f302 	mul.w	r3, r1, r2
   1c040:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   1c044:	fa1f fe80 	uxth.w	lr, r0
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   1c048:	f3c3 004f 	ubfx	r0, r3, #1, #16
   1c04c:	1e73      	subs	r3, r6, #1
   1c04e:	b29b      	uxth	r3, r3
   1c050:	1e42      	subs	r2, r0, #1
   1c052:	009d      	lsls	r5, r3, #2
   1c054:	9013      	str	r0, [sp, #76]	@ 0x4c
   1c056:	b290      	uxth	r0, r2
   1c058:	1c5a      	adds	r2, r3, #1
                col_count = (kernel_x * kernel_y) & 0x1;
   1c05a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1c05c:	9523      	str	r5, [sp, #140]	@ 0x8c
   1c05e:	fb11 f303 	smulbb	r3, r1, r3
   1c062:	3901      	subs	r1, #1
   1c064:	fb04 f101 	mul.w	r1, r4, r1
   1c068:	9115      	str	r1, [sp, #84]	@ 0x54
   1c06a:	00b1      	lsls	r1, r6, #2
   1c06c:	b28e      	uxth	r6, r1
   1c06e:	b299      	uxth	r1, r3
   1c070:	f003 0301 	and.w	r3, r3, #1
   1c074:	9314      	str	r3, [sp, #80]	@ 0x50
   1c076:	9b21      	ldr	r3, [sp, #132]	@ 0x84
   1c078:	9129      	str	r1, [sp, #164]	@ 0xa4
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
   1c07a:	ea4f 0b44 	mov.w	fp, r4, lsl #1
                    col_pos += input_ch << 1;
   1c07e:	00a5      	lsls	r5, r4, #2
   1c080:	fb04 f303 	mul.w	r3, r4, r3
   1c084:	9312      	str	r3, [sp, #72]	@ 0x48
   1c086:	fb00 b30b 	mla	r3, r0, fp, fp
   1c08a:	fb00 5005 	mla	r0, r0, r5, r5
   1c08e:	9016      	str	r0, [sp, #88]	@ 0x58
   1c090:	981e      	ldr	r0, [sp, #120]	@ 0x78
   1c092:	9901      	ldr	r1, [sp, #4]
   1c094:	9504      	str	r5, [sp, #16]
   1c096:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   1c09a:	9027      	str	r0, [sp, #156]	@ 0x9c
   1c09c:	981d      	ldr	r0, [sp, #116]	@ 0x74
   1c09e:	9628      	str	r6, [sp, #160]	@ 0xa0
   1c0a0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   1c0a4:	0092      	lsls	r2, r2, #2
   1c0a6:	463d      	mov	r5, r7
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1c0a8:	2600      	movs	r6, #0
   1c0aa:	4657      	mov	r7, sl
   1c0ac:	9317      	str	r3, [sp, #92]	@ 0x5c
   1c0ae:	46da      	mov	sl, fp
   1c0b0:	9026      	str	r0, [sp, #152]	@ 0x98
   1c0b2:	46cb      	mov	fp, r9
   1c0b4:	9225      	str	r2, [sp, #148]	@ 0x94
   1c0b6:	46f0      	mov	r8, lr
   1c0b8:	46a1      	mov	r9, r4
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c0ba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   1c0bc:	b20a      	sxth	r2, r1
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c0be:	2b00      	cmp	r3, #0
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
   1c0c0:	921b      	str	r2, [sp, #108]	@ 0x6c
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c0c2:	f340 824c 	ble.w	1c55e <arm_depthwise_conv_s8_opt+0x5aa>
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c0c6:	982c      	ldr	r0, [sp, #176]	@ 0xb0
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c0c8:	912a      	str	r1, [sp, #168]	@ 0xa8
            const int ker_y_start = MAX(0, -base_idx_y);
   1c0ca:	4253      	negs	r3, r2
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c0cc:	fb00 f003 	mul.w	r0, r0, r3
            const int ker_y_start = MAX(0, -base_idx_y);
   1c0d0:	9330      	str	r3, [sp, #192]	@ 0xc0
   1c0d2:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c0d4:	902e      	str	r0, [sp, #184]	@ 0xb8
   1c0d6:	425b      	negs	r3, r3
   1c0d8:	b29b      	uxth	r3, r3
   1c0da:	9318      	str	r3, [sp, #96]	@ 0x60
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1c0dc:	ebab 0302 	sub.w	r3, fp, r2
   1c0e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   1c0e2:	4293      	cmp	r3, r2
   1c0e4:	bfa8      	it	ge
   1c0e6:	4613      	movge	r3, r2
   1c0e8:	932d      	str	r3, [sp, #180]	@ 0xb4
   1c0ea:	ebab 0301 	sub.w	r3, fp, r1
   1c0ee:	4293      	cmp	r3, r2
   1c0f0:	bfa8      	it	ge
   1c0f2:	4613      	movge	r3, r2
   1c0f4:	932b      	str	r3, [sp, #172]	@ 0xac
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c0f6:	0043      	lsls	r3, r0, #1
   1c0f8:	932f      	str	r3, [sp, #188]	@ 0xbc
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   1c0fa:	b2ab      	uxth	r3, r5
   1c0fc:	9322      	str	r3, [sp, #136]	@ 0x88
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c0fe:	e9cd cb32 	strd	ip, fp, [sp, #200]	@ 0xc8
            row_count = output_ch & 0x3;
   1c102:	f00c 0303 	and.w	r3, ip, #3
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c106:	e9cd 5734 	strd	r5, r7, [sp, #208]	@ 0xd0
   1c10a:	e9cd 6836 	strd	r6, r8, [sp, #216]	@ 0xd8
            row_count = output_ch & 0x3;
   1c10e:	931a      	str	r3, [sp, #104]	@ 0x68
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c110:	2300      	movs	r3, #0
   1c112:	9319      	str	r3, [sp, #100]	@ 0x64
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
   1c114:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	@ 0x60
   1c118:	930a      	str	r3, [sp, #40]	@ 0x28
            const int ker_y_start = MAX(0, -base_idx_y);
   1c11a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   1c11c:	2b00      	cmp	r3, #0
   1c11e:	f340 8231 	ble.w	1c584 <arm_depthwise_conv_s8_opt+0x5d0>
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1c122:	e9dd 232a 	ldrd	r2, r3, [sp, #168]	@ 0xa8
            const int ker_y_start = MAX(0, -base_idx_y);
   1c126:	2100      	movs	r1, #0
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1c128:	9309      	str	r3, [sp, #36]	@ 0x24
            int32_t index = 0;
   1c12a:	4688      	mov	r8, r1
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1c12c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   1c12e:	4299      	cmp	r1, r3
   1c130:	da43      	bge.n	1c1ba <arm_depthwise_conv_s8_opt+0x206>
   1c132:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1c134:	9821      	ldr	r0, [sp, #132]	@ 0x84
   1c136:	9c42      	ldr	r4, [sp, #264]	@ 0x108
   1c138:	440a      	add	r2, r1
   1c13a:	fb00 3202 	mla	r2, r0, r2, r3
   1c13e:	fb09 4202 	mla	r2, r9, r2, r4
   1c142:	9c10      	ldr	r4, [sp, #64]	@ 0x40
   1c144:	191f      	adds	r7, r3, r4
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
   1c146:	f9bd 3090 	ldrsh.w	r3, [sp, #144]	@ 0x90
   1c14a:	9301      	str	r3, [sp, #4]
   1c14c:	4683      	mov	fp, r0
   1c14e:	4643      	mov	r3, r8
   1c150:	4690      	mov	r8, r2
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1c152:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   1c154:	2a00      	cmp	r2, #0
   1c156:	dd29      	ble.n	1c1ac <arm_depthwise_conv_s8_opt+0x1f8>
   1c158:	9a08      	ldr	r2, [sp, #32]
   1c15a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
   1c15c:	e9cd 8102 	strd	r8, r1, [sp, #8]
   1c160:	4646      	mov	r6, r8
   1c162:	eb02 0543 	add.w	r5, r2, r3, lsl #1
   1c166:	4698      	mov	r8, r3
   1c168:	e006      	b.n	1c178 <arm_depthwise_conv_s8_opt+0x1c4>
   1c16a:	3401      	adds	r4, #1
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
   1c16c:	f00a fdaa 	bl	26cc4 <memset>
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1c170:	42bc      	cmp	r4, r7
   1c172:	4455      	add	r5, sl
   1c174:	444e      	add	r6, r9
   1c176:	d012      	beq.n	1c19e <arm_depthwise_conv_s8_opt+0x1ea>
                    if (idx_x < 0 || idx_x >= input_x)
   1c178:	2c00      	cmp	r4, #0
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
   1c17a:	4652      	mov	r2, sl
   1c17c:	f04f 0100 	mov.w	r1, #0
   1c180:	4628      	mov	r0, r5
                    if (idx_x < 0 || idx_x >= input_x)
   1c182:	dbf2      	blt.n	1c16a <arm_depthwise_conv_s8_opt+0x1b6>
   1c184:	45a3      	cmp	fp, r4
   1c186:	ddf0      	ble.n	1c16a <arm_depthwise_conv_s8_opt+0x1b6>
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
   1c188:	4629      	mov	r1, r5
   1c18a:	4630      	mov	r0, r6
   1c18c:	9b01      	ldr	r3, [sp, #4]
   1c18e:	464a      	mov	r2, r9
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1c190:	3401      	adds	r4, #1
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
   1c192:	f001 fbd1 	bl	1d938 <arm_q7_to_q15_with_offset>
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
   1c196:	42bc      	cmp	r4, r7
   1c198:	4455      	add	r5, sl
   1c19a:	444e      	add	r6, r9
   1c19c:	d1ec      	bne.n	1c178 <arm_depthwise_conv_s8_opt+0x1c4>
   1c19e:	4643      	mov	r3, r8
   1c1a0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   1c1a2:	9903      	ldr	r1, [sp, #12]
   1c1a4:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1c1a8:	444b      	add	r3, r9
   1c1aa:	4413      	add	r3, r2
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
   1c1ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   1c1ae:	4490      	add	r8, r2
   1c1b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1c1b2:	3101      	adds	r1, #1
   1c1b4:	428a      	cmp	r2, r1
   1c1b6:	d1cc      	bne.n	1c152 <arm_depthwise_conv_s8_opt+0x19e>
   1c1b8:	4698      	mov	r8, r3
            if (diff != 0)
   1c1ba:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   1c1bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1c1be:	1a9a      	subs	r2, r3, r2
   1c1c0:	f040 81ed 	bne.w	1c59e <arm_depthwise_conv_s8_opt+0x5ea>
            while (row_count)
   1c1c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   1c1c6:	2b00      	cmp	r3, #0
   1c1c8:	f000 81f7 	beq.w	1c5ba <arm_depthwise_conv_s8_opt+0x606>
   1c1cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c1ce:	f8cd a008 	str.w	sl, [sp, #8]
   1c1d2:	f103 0208 	add.w	r2, r3, #8
   1c1d6:	9b48      	ldr	r3, [sp, #288]	@ 0x120
   1c1d8:	f8cd 900c 	str.w	r9, [sp, #12]
   1c1dc:	4413      	add	r3, r2
   1c1de:	9311      	str	r3, [sp, #68]	@ 0x44
   1c1e0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
            bias = bias_start_pos;
   1c1e2:	9a46      	ldr	r2, [sp, #280]	@ 0x118
   1c1e4:	f103 0510 	add.w	r5, r3, #16
   1c1e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   1c1ea:	f103 0110 	add.w	r1, r3, #16
   1c1ee:	9b48      	ldr	r3, [sp, #288]	@ 0x120
            row_shift = 0;
   1c1f0:	f04f 0e00 	mov.w	lr, #0
   1c1f4:	f103 0c04 	add.w	ip, r3, #4
   1c1f8:	4692      	mov	sl, r2
   1c1fa:	46f3      	mov	fp, lr
   1c1fc:	4662      	mov	r2, ip
   1c1fe:	46ac      	mov	ip, r5
   1c200:	460d      	mov	r5, r1
                if (bias)
   1c202:	f1ba 0f00 	cmp.w	sl, #0
   1c206:	f000 81b5 	beq.w	1c574 <arm_depthwise_conv_s8_opt+0x5c0>
                    sum_4 = *bias++;
   1c20a:	e9da e302 	ldrd	lr, r3, [sl, #8]
                    sum_2 = *bias++;
   1c20e:	e9da 9800 	ldrd	r9, r8, [sl]
                    sum_4 = *bias++;
   1c212:	9301      	str	r3, [sp, #4]
   1c214:	f10a 0a10 	add.w	sl, sl, #16
                q15_t *col_pos = col_buffer_start + row_shift;
   1c218:	9b08      	ldr	r3, [sp, #32]
                while (col_count)
   1c21a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
                q15_t *col_pos = col_buffer_start + row_shift;
   1c21c:	eb03 064b 	add.w	r6, r3, fp, lsl #1
                const q7_t *row_pos = kernel + row_shift;
   1c220:	9b44      	ldr	r3, [sp, #272]	@ 0x110
                row_shift += 4;
   1c222:	f10b 0104 	add.w	r1, fp, #4
                const q7_t *row_pos = kernel + row_shift;
   1c226:	445b      	add	r3, fp
                row_shift += 4;
   1c228:	fa1f fb81 	uxth.w	fp, r1
                while (col_count)
   1c22c:	2800      	cmp	r0, #0
   1c22e:	d04e      	beq.n	1c2ce <arm_depthwise_conv_s8_opt+0x31a>
   1c230:	9902      	ldr	r1, [sp, #8]
                uint16_t col_count = (kernel_x * kernel_y) / 2;
   1c232:	950f      	str	r5, [sp, #60]	@ 0x3c
   1c234:	e9cd a209 	strd	sl, r2, [sp, #36]	@ 0x24
   1c238:	e9cd b60b 	strd	fp, r6, [sp, #44]	@ 0x2c
   1c23c:	e9cd 3c0d 	strd	r3, ip, [sp, #52]	@ 0x34
   1c240:	1874      	adds	r4, r6, r1
                const q7_t *row_pos = kernel + row_shift;
   1c242:	461f      	mov	r7, r3
   1c244:	9a02      	ldr	r2, [sp, #8]
    memcpy(&val, in_q7, 4);
   1c246:	9b03      	ldr	r3, [sp, #12]
   1c248:	6839      	ldr	r1, [r7, #0]
   1c24a:	58fb      	ldr	r3, [r7, r3]
    memcpy(&val, in_q15, 4);
   1c24c:	6826      	ldr	r6, [r4, #0]
   1c24e:	eba4 0c02 	sub.w	ip, r4, r2
  return (op1 >> op2) | (op1 << (32U - op2));
   1c252:	ea4f 2531 	mov.w	r5, r1, ror #8
   1c256:	f8dc b000 	ldr.w	fp, [ip]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1c25a:	fa2f f181 	sxtb16	r1, r1
                    op_c = __PKHBT(op_b, op_a, 16);
   1c25e:	eac6 4a0b 	pkhbt	sl, r6, fp, lsl #16
  return (op1 >> op2) | (op1 << (32U - op2));
   1c262:	ea4f 2233 	mov.w	r2, r3, ror #8
                    op_a = __PKHTB(op_b, op_a, 16);
   1c266:	eac6 462b 	pkhtb	r6, r6, fp, asr #16
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1c26a:	fa2f f383 	sxtb16	r3, r3
   1c26e:	fa2f f585 	sxtb16	r5, r5
   1c272:	fa2f f282 	sxtb16	r2, r2
                    op_b = __PKHBT(ip_b2, ip_a2, 16);
   1c276:	eac3 4b01 	pkhbt	fp, r3, r1, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1c27a:	fb2a 990b 	smlad	r9, sl, fp, r9
                    op_b = __PKHBT(ip_b1, ip_a1, 16);
   1c27e:	eac5 4a02 	pkhbt	sl, r5, r2, lsl #16
   1c282:	fb26 880a 	smlad	r8, r6, sl, r8
   1c286:	f8dc 6004 	ldr.w	r6, [ip, #4]
                    op_b = __PKHTB(ip_a2, ip_b2, 16);
   1c28a:	eac1 4323 	pkhtb	r3, r1, r3, asr #16
   1c28e:	6861      	ldr	r1, [r4, #4]
                    op_c = __PKHBT(op_b, op_a, 16);
   1c290:	eac1 4c06 	pkhbt	ip, r1, r6, lsl #16
                    op_a = __PKHTB(op_b, op_a, 16);
   1c294:	eac1 4126 	pkhtb	r1, r1, r6, asr #16
   1c298:	fb2c ee03 	smlad	lr, ip, r3, lr
   1c29c:	9b01      	ldr	r3, [sp, #4]
                    op_b = __PKHTB(ip_a1, ip_b1, 16);
   1c29e:	eac2 4225 	pkhtb	r2, r2, r5, asr #16
   1c2a2:	fb21 3302 	smlad	r3, r1, r2, r3
                    row_pos += input_ch << 1;
   1c2a6:	9a02      	ldr	r2, [sp, #8]
   1c2a8:	9301      	str	r3, [sp, #4]
                    col_count--;
   1c2aa:	3801      	subs	r0, #1
                while (col_count)
   1c2ac:	9b04      	ldr	r3, [sp, #16]
                    col_count--;
   1c2ae:	b280      	uxth	r0, r0
                    row_pos += input_ch << 1;
   1c2b0:	4417      	add	r7, r2
                while (col_count)
   1c2b2:	441c      	add	r4, r3
   1c2b4:	2800      	cmp	r0, #0
   1c2b6:	d1c5      	bne.n	1c244 <arm_depthwise_conv_s8_opt+0x290>
   1c2b8:	e9dd 3c0d 	ldrd	r3, ip, [sp, #52]	@ 0x34
   1c2bc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
   1c2be:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
   1c2c0:	e9dd b60b 	ldrd	fp, r6, [sp, #44]	@ 0x2c
   1c2c4:	440b      	add	r3, r1
   1c2c6:	e9dd a209 	ldrd	sl, r2, [sp, #36]	@ 0x24
   1c2ca:	9916      	ldr	r1, [sp, #88]	@ 0x58
   1c2cc:	440e      	add	r6, r1
                while (col_count)
   1c2ce:	9914      	ldr	r1, [sp, #80]	@ 0x50
   1c2d0:	b1a9      	cbz	r1, 1c2fe <arm_depthwise_conv_s8_opt+0x34a>
                    sum += row_pos[0] * col_pos[0];
   1c2d2:	f993 1000 	ldrsb.w	r1, [r3]
   1c2d6:	8830      	ldrh	r0, [r6, #0]
   1c2d8:	fb10 9901 	smlabb	r9, r0, r1, r9
                    sum_2 += row_pos[1] * col_pos[1];
   1c2dc:	f993 1001 	ldrsb.w	r1, [r3, #1]
   1c2e0:	8870      	ldrh	r0, [r6, #2]
   1c2e2:	fb10 8801 	smlabb	r8, r0, r1, r8
                    sum_3 += row_pos[2] * col_pos[2];
   1c2e6:	f993 1002 	ldrsb.w	r1, [r3, #2]
   1c2ea:	88b0      	ldrh	r0, [r6, #4]
                    sum_4 += row_pos[3] * col_pos[3];
   1c2ec:	f993 3003 	ldrsb.w	r3, [r3, #3]
                    sum_3 += row_pos[2] * col_pos[2];
   1c2f0:	fb10 ee01 	smlabb	lr, r0, r1, lr
                    sum_4 += row_pos[3] * col_pos[3];
   1c2f4:	9801      	ldr	r0, [sp, #4]
   1c2f6:	88f1      	ldrh	r1, [r6, #6]
   1c2f8:	fb11 0303 	smlabb	r3, r1, r3, r0
   1c2fc:	9301      	str	r3, [sp, #4]
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
   1c2fe:	f855 0c10 	ldr.w	r0, [r5, #-16]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c302:	f85c 3c10 	ldr.w	r3, [ip, #-16]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c306:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   1c30a:	fa09 f404 	lsl.w	r4, r9, r4
   1c30e:	4240      	negs	r0, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c310:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1c314:	2600      	movs	r6, #0
   1c316:	fbc4 1603 	smlal	r1, r6, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c31a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c31e:	2301      	movs	r3, #1
   1c320:	4083      	lsls	r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1c322:	0fc9      	lsrs	r1, r1, #31
   1c324:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c328:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c32a:	ea01 0403 	and.w	r4, r1, r3
    if (result < 0)
   1c32e:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   1c330:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c334:	bf48      	it	mi
   1c336:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c338:	429c      	cmp	r4, r3
                sum += output_offset;
   1c33a:	9b05      	ldr	r3, [sp, #20]
        result++;
   1c33c:	bfc8      	it	gt
   1c33e:	3101      	addgt	r1, #1
   1c340:	4419      	add	r1, r3
                sum = MAX(sum, output_activation_min);
   1c342:	9b06      	ldr	r3, [sp, #24]
   1c344:	4299      	cmp	r1, r3
   1c346:	bfb8      	it	lt
   1c348:	4619      	movlt	r1, r3
                sum = MIN(sum, output_activation_max);
   1c34a:	9b07      	ldr	r3, [sp, #28]
   1c34c:	4299      	cmp	r1, r3
   1c34e:	bfa8      	it	ge
   1c350:	4619      	movge	r1, r3
                *output++ = (q7_t)sum;
   1c352:	f802 1c04 	strb.w	r1, [r2, #-4]
                sum_2 = arm_nn_requantize(sum_2, *output_mult++, *output_shift++);
   1c356:	f855 0c0c 	ldr.w	r0, [r5, #-12]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c35a:	f85c 3c0c 	ldr.w	r3, [ip, #-12]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c35e:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   1c362:	fa08 f404 	lsl.w	r4, r8, r4
   1c366:	4240      	negs	r0, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c368:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1c36c:	2600      	movs	r6, #0
   1c36e:	fbc4 1603 	smlal	r1, r6, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c372:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c376:	2301      	movs	r3, #1
   1c378:	4083      	lsls	r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1c37a:	0fc9      	lsrs	r1, r1, #31
   1c37c:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c380:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c382:	ea01 0403 	and.w	r4, r1, r3
    if (result < 0)
   1c386:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   1c388:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c38c:	bf48      	it	mi
   1c38e:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c390:	429c      	cmp	r4, r3
                sum_2 += output_offset;
   1c392:	9b05      	ldr	r3, [sp, #20]
        result++;
   1c394:	bfc8      	it	gt
   1c396:	3101      	addgt	r1, #1
   1c398:	4419      	add	r1, r3
                sum_2 = MAX(sum_2, output_activation_min);
   1c39a:	9b06      	ldr	r3, [sp, #24]
   1c39c:	4299      	cmp	r1, r3
   1c39e:	bfb8      	it	lt
   1c3a0:	4619      	movlt	r1, r3
                sum_2 = MIN(sum_2, output_activation_max);
   1c3a2:	9b07      	ldr	r3, [sp, #28]
   1c3a4:	4299      	cmp	r1, r3
   1c3a6:	bfa8      	it	ge
   1c3a8:	4619      	movge	r1, r3
                *output++ = (q7_t)sum_2;
   1c3aa:	f802 1c03 	strb.w	r1, [r2, #-3]
                sum_3 = arm_nn_requantize(sum_3, *output_mult++, *output_shift++);
   1c3ae:	f855 0c08 	ldr.w	r0, [r5, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c3b2:	f85c 3c08 	ldr.w	r3, [ip, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c3b6:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   1c3ba:	fa0e f404 	lsl.w	r4, lr, r4
   1c3be:	4240      	negs	r0, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c3c0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1c3c4:	2600      	movs	r6, #0
   1c3c6:	fbc4 1603 	smlal	r1, r6, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c3ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c3ce:	2301      	movs	r3, #1
   1c3d0:	4083      	lsls	r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1c3d2:	0fc9      	lsrs	r1, r1, #31
   1c3d4:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c3d8:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c3da:	ea01 0403 	and.w	r4, r1, r3
    if (result < 0)
   1c3de:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   1c3e0:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c3e4:	bf48      	it	mi
   1c3e6:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c3e8:	429c      	cmp	r4, r3
                sum_3 += output_offset;
   1c3ea:	9b05      	ldr	r3, [sp, #20]
        result++;
   1c3ec:	bfc8      	it	gt
   1c3ee:	3101      	addgt	r1, #1
   1c3f0:	4419      	add	r1, r3
                sum_3 = MAX(sum_3, output_activation_min);
   1c3f2:	9b06      	ldr	r3, [sp, #24]
   1c3f4:	4299      	cmp	r1, r3
   1c3f6:	bfb8      	it	lt
   1c3f8:	4619      	movlt	r1, r3
                sum_3 = MIN(sum_3, output_activation_max);
   1c3fa:	9b07      	ldr	r3, [sp, #28]
   1c3fc:	4299      	cmp	r1, r3
   1c3fe:	bfa8      	it	ge
   1c400:	4619      	movge	r1, r3
                *output++ = (q7_t)sum_3;
   1c402:	f802 1c02 	strb.w	r1, [r2, #-2]
                sum_4 = arm_nn_requantize(sum_4, *output_mult++, *output_shift++);
   1c406:	f855 0c04 	ldr.w	r0, [r5, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c40a:	9901      	ldr	r1, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c40c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c410:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
   1c414:	40a1      	lsls	r1, r4
   1c416:	460c      	mov	r4, r1
   1c418:	4240      	negs	r0, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c41a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
   1c41e:	2600      	movs	r6, #0
   1c420:	fbc4 1603 	smlal	r1, r6, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c424:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c428:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1c42a:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c42c:	4083      	lsls	r3, r0
    result = (int32_t)(mult.long_long >> 31);
   1c42e:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c432:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c434:	ea01 0403 	and.w	r4, r1, r3
    if (result < 0)
   1c438:	4101      	asrs	r1, r0
    q31_t threshold = remainder_mask >> 1;
   1c43a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c43e:	bf48      	it	mi
   1c440:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c442:	429c      	cmp	r4, r3
                sum_4 += output_offset;
   1c444:	9b05      	ldr	r3, [sp, #20]
        result++;
   1c446:	bfc8      	it	gt
   1c448:	3101      	addgt	r1, #1
   1c44a:	4419      	add	r1, r3
                sum_4 = MAX(sum_4, output_activation_min);
   1c44c:	9b06      	ldr	r3, [sp, #24]
   1c44e:	4299      	cmp	r1, r3
   1c450:	bfb8      	it	lt
   1c452:	4619      	movlt	r1, r3
                sum_4 = MIN(sum_4, output_activation_max);
   1c454:	9b07      	ldr	r3, [sp, #28]
   1c456:	4299      	cmp	r1, r3
   1c458:	bfa8      	it	ge
   1c45a:	4619      	movge	r1, r3
            while (row_count)
   1c45c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
                *output++ = (q7_t)sum_4;
   1c45e:	f802 1c01 	strb.w	r1, [r2, #-1]
            while (row_count)
   1c462:	3204      	adds	r2, #4
   1c464:	4293      	cmp	r3, r2
   1c466:	f10c 0c10 	add.w	ip, ip, #16
   1c46a:	f105 0510 	add.w	r5, r5, #16
   1c46e:	f47f aec8 	bne.w	1c202 <arm_depthwise_conv_s8_opt+0x24e>
   1c472:	9b48      	ldr	r3, [sp, #288]	@ 0x120
   1c474:	9925      	ldr	r1, [sp, #148]	@ 0x94
   1c476:	f8dd e098 	ldr.w	lr, [sp, #152]	@ 0x98
   1c47a:	4652      	mov	r2, sl
   1c47c:	e9dd c627 	ldrd	ip, r6, [sp, #156]	@ 0x9c
   1c480:	e9dd a902 	ldrd	sl, r9, [sp, #8]
   1c484:	440b      	add	r3, r1
   1c486:	9348      	str	r3, [sp, #288]	@ 0x120
            while (row_count)
   1c488:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   1c48a:	2b00      	cmp	r3, #0
   1c48c:	d054      	beq.n	1c538 <arm_depthwise_conv_s8_opt+0x584>
   1c48e:	18f1      	adds	r1, r6, r3
   1c490:	fa1f f881 	uxth.w	r8, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c494:	46c3      	mov	fp, r8
   1c496:	9f48      	ldr	r7, [sp, #288]	@ 0x120
   1c498:	46b0      	mov	r8, r6
   1c49a:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
                q15_t *col_pos = col_buffer_start + row_shift;
   1c49c:	4643      	mov	r3, r8
                if (bias)
   1c49e:	2a00      	cmp	r2, #0
   1c4a0:	d06e      	beq.n	1c580 <arm_depthwise_conv_s8_opt+0x5cc>
                    sum = *bias++;
   1c4a2:	f852 4b04 	ldr.w	r4, [r2], #4
                row_shift += 1;
   1c4a6:	f108 0801 	add.w	r8, r8, #1
   1c4aa:	fa1f f888 	uxth.w	r8, r8
                for (int i = 0; i < col_count; i++)
   1c4ae:	b18e      	cbz	r6, 1c4d4 <arm_depthwise_conv_s8_opt+0x520>
   1c4b0:	9944      	ldr	r1, [sp, #272]	@ 0x110
   1c4b2:	9201      	str	r2, [sp, #4]
   1c4b4:	18c8      	adds	r0, r1, r3
   1c4b6:	9908      	ldr	r1, [sp, #32]
   1c4b8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1c4bc:	2100      	movs	r1, #0
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
   1c4be:	f990 2000 	ldrsb.w	r2, [r0]
   1c4c2:	881d      	ldrh	r5, [r3, #0]
                for (int i = 0; i < col_count; i++)
   1c4c4:	3101      	adds	r1, #1
   1c4c6:	428e      	cmp	r6, r1
   1c4c8:	4448      	add	r0, r9
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
   1c4ca:	fb15 4402 	smlabb	r4, r5, r2, r4
                for (int i = 0; i < col_count; i++)
   1c4ce:	4453      	add	r3, sl
   1c4d0:	d1f5      	bne.n	1c4be <arm_depthwise_conv_s8_opt+0x50a>
   1c4d2:	9a01      	ldr	r2, [sp, #4]
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
   1c4d4:	f85e 1b04 	ldr.w	r1, [lr], #4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c4d8:	f85c 5b04 	ldr.w	r5, [ip], #4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c4dc:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   1c4e0:	fa04 f000 	lsl.w	r0, r4, r0
   1c4e4:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c4e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1c4ea:	2400      	movs	r4, #0
   1c4ec:	fbc0 3405 	smlal	r3, r4, r0, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c4f0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c4f4:	2001      	movs	r0, #1
   1c4f6:	4088      	lsls	r0, r1
    result = (int32_t)(mult.long_long >> 31);
   1c4f8:	0fdb      	lsrs	r3, r3, #31
   1c4fa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c4fe:	3801      	subs	r0, #1
    int32_t remainder = remainder_mask & dividend;
   1c500:	ea03 0400 	and.w	r4, r3, r0
    if (result < 0)
   1c504:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
   1c506:	ea4f 0060 	mov.w	r0, r0, asr #1
        threshold++;
   1c50a:	bf48      	it	mi
   1c50c:	3001      	addmi	r0, #1
                sum += output_offset;
   1c50e:	9905      	ldr	r1, [sp, #20]
    if (remainder > threshold)
   1c510:	4284      	cmp	r4, r0
        result++;
   1c512:	bfc8      	it	gt
   1c514:	3301      	addgt	r3, #1
   1c516:	440b      	add	r3, r1
                sum = MAX(sum, output_activation_min);
   1c518:	9906      	ldr	r1, [sp, #24]
   1c51a:	428b      	cmp	r3, r1
   1c51c:	bfb8      	it	lt
   1c51e:	460b      	movlt	r3, r1
                sum = MIN(sum, output_activation_max);
   1c520:	9907      	ldr	r1, [sp, #28]
   1c522:	428b      	cmp	r3, r1
   1c524:	bfa8      	it	ge
   1c526:	460b      	movge	r3, r1
            while (row_count)
   1c528:	45d8      	cmp	r8, fp
                *output++ = (q7_t)sum;
   1c52a:	f807 3b01 	strb.w	r3, [r7], #1
            while (row_count)
   1c52e:	d1b5      	bne.n	1c49c <arm_depthwise_conv_s8_opt+0x4e8>
   1c530:	9b48      	ldr	r3, [sp, #288]	@ 0x120
   1c532:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   1c534:	4413      	add	r3, r2
   1c536:	9348      	str	r3, [sp, #288]	@ 0x120
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
   1c538:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   1c53a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   1c53c:	441a      	add	r2, r3
   1c53e:	b292      	uxth	r2, r2
   1c540:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1c542:	9218      	str	r2, [sp, #96]	@ 0x60
   1c544:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
   1c546:	3301      	adds	r3, #1
   1c548:	429a      	cmp	r2, r3
   1c54a:	9319      	str	r3, [sp, #100]	@ 0x64
   1c54c:	f47f ade2 	bne.w	1c114 <arm_depthwise_conv_s8_opt+0x160>
   1c550:	e9dd cb32 	ldrd	ip, fp, [sp, #200]	@ 0xc8
   1c554:	e9dd 5734 	ldrd	r5, r7, [sp, #208]	@ 0xd0
   1c558:	e9dd 6836 	ldrd	r6, r8, [sp, #216]	@ 0xd8
   1c55c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
   1c55e:	3601      	adds	r6, #1
   1c560:	eb08 0301 	add.w	r3, r8, r1
   1c564:	42b7      	cmp	r7, r6
   1c566:	b299      	uxth	r1, r3
   1c568:	f47f ada7 	bne.w	1c0ba <arm_depthwise_conv_s8_opt+0x106>
    return ARM_CMSIS_NN_SUCCESS;
   1c56c:	2000      	movs	r0, #0
}
   1c56e:	b039      	add	sp, #228	@ 0xe4
   1c570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                q31_t sum_4 = 0;
   1c574:	f8cd a004 	str.w	sl, [sp, #4]
                q31_t sum_3 = 0;
   1c578:	46d6      	mov	lr, sl
                q31_t sum_2 = 0;
   1c57a:	46d0      	mov	r8, sl
                q31_t sum = 0;
   1c57c:	46d1      	mov	r9, sl
   1c57e:	e64b      	b.n	1c218 <arm_depthwise_conv_s8_opt+0x264>
                q31_t sum = 0;
   1c580:	4614      	mov	r4, r2
   1c582:	e790      	b.n	1c4a6 <arm_depthwise_conv_s8_opt+0x4f2>
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
   1c584:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   1c586:	9309      	str	r3, [sp, #36]	@ 0x24
            if (ker_y_start != 0)
   1c588:	d01c      	beq.n	1c5c4 <arm_depthwise_conv_s8_opt+0x610>
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
   1c58a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
   1c58c:	9808      	ldr	r0, [sp, #32]
   1c58e:	2100      	movs	r1, #0
   1c590:	f00a fb98 	bl	26cc4 <memset>
   1c594:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
   1c596:	9930      	ldr	r1, [sp, #192]	@ 0xc0
                index += (kernel_x * input_ch) * ker_y_start;
   1c598:	f8dd 80b8 	ldr.w	r8, [sp, #184]	@ 0xb8
   1c59c:	e5c6      	b.n	1c12c <arm_depthwise_conv_s8_opt+0x178>
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * diff * sizeof(q15_t));
   1c59e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
   1c5a0:	fb03 f202 	mul.w	r2, r3, r2
   1c5a4:	9b08      	ldr	r3, [sp, #32]
   1c5a6:	0052      	lsls	r2, r2, #1
   1c5a8:	eb03 0048 	add.w	r0, r3, r8, lsl #1
   1c5ac:	2100      	movs	r1, #0
   1c5ae:	f00a fb89 	bl	26cc4 <memset>
            while (row_count)
   1c5b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   1c5b4:	2b00      	cmp	r3, #0
   1c5b6:	f47f ae09 	bne.w	1c1cc <arm_depthwise_conv_s8_opt+0x218>
            output_shift = out_shift_start_pos;
   1c5ba:	e9dd ec1d 	ldrd	lr, ip, [sp, #116]	@ 0x74
            row_shift = 0;
   1c5be:	9e20      	ldr	r6, [sp, #128]	@ 0x80
            bias = bias_start_pos;
   1c5c0:	9a46      	ldr	r2, [sp, #280]	@ 0x118
   1c5c2:	e761      	b.n	1c488 <arm_depthwise_conv_s8_opt+0x4d4>
   1c5c4:	f8dd 806c 	ldr.w	r8, [sp, #108]	@ 0x6c
   1c5c8:	4642      	mov	r2, r8
   1c5ca:	4641      	mov	r1, r8
   1c5cc:	e5ae      	b.n	1c12c <arm_depthwise_conv_s8_opt+0x178>
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   1c5ce:	fb07 f004 	mul.w	r0, r7, r4
   1c5d2:	fb06 f000 	mul.w	r0, r6, r0
   1c5d6:	0040      	lsls	r0, r0, #1
    if (ctx->buf == NULL && arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims) > 0)
   1c5d8:	2800      	cmp	r0, #0
   1c5da:	f77f ad01 	ble.w	1bfe0 <arm_depthwise_conv_s8_opt+0x2c>
        return ARM_CMSIS_NN_ARG_ERROR;
   1c5de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   1c5e2:	e7c4      	b.n	1c56e <arm_depthwise_conv_s8_opt+0x5ba>

0001c5e4 <arm_depthwise_conv_s8_opt_get_buffer_size>:
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
   1c5e4:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
   1c5e8:	68c0      	ldr	r0, [r0, #12]
   1c5ea:	fb02 f000 	mul.w	r0, r2, r0
   1c5ee:	fb03 f000 	mul.w	r0, r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
   1c5f2:	0040      	lsls	r0, r0, #1
   1c5f4:	4770      	bx	lr
   1c5f6:	bf00      	nop

0001c5f8 <arm_depthwise_conv_wrapper_s8>:
                                                  const q7_t *filter,
                                                  const cmsis_nn_dims *bias_dims,
                                                  const int32_t *bias,
                                                  const cmsis_nn_dims *output_dims,
                                                  q7_t *output)
{
   1c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    arm_cmsis_nn_status status = ARM_CMSIS_NN_SUCCESS;
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c5fc:	688d      	ldr	r5, [r1, #8]
{
   1c5fe:	b083      	sub	sp, #12
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c600:	2d01      	cmp	r5, #1
{
   1c602:	e9dd 460c 	ldrd	r4, r6, [sp, #48]	@ 0x30
   1c606:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	@ 0x38
   1c60a:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	@ 0x40
   1c60e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
   1c610:	9000      	str	r0, [sp, #0]
   1c612:	468c      	mov	ip, r1
   1c614:	9201      	str	r2, [sp, #4]
   1c616:	469e      	mov	lr, r3
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c618:	d102      	bne.n	1c620 <arm_depthwise_conv_wrapper_s8+0x28>
   1c61a:	681d      	ldr	r5, [r3, #0]
   1c61c:	2d01      	cmp	r5, #1
   1c61e:	d00f      	beq.n	1c640 <arm_depthwise_conv_wrapper_s8+0x48>
                                               output);
        }
    }
    else
    {
        status = arm_depthwise_conv_s8(ctx,
   1c620:	9a01      	ldr	r2, [sp, #4]
   1c622:	9800      	ldr	r0, [sp, #0]
   1c624:	940c      	str	r4, [sp, #48]	@ 0x30
   1c626:	4673      	mov	r3, lr
   1c628:	4661      	mov	r1, ip
   1c62a:	e9cd 8711 	strd	r8, r7, [sp, #68]	@ 0x44
   1c62e:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1c632:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	@ 0x34
                                       output);
    }

    /* Return to application */
    return status;
}
   1c636:	b003      	add	sp, #12
   1c638:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        status = arm_depthwise_conv_s8(ctx,
   1c63c:	f7ff ba96 	b.w	1bb6c <arm_depthwise_conv_s8>
    if (1 == dw_conv_params->ch_mult && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c640:	69cd      	ldr	r5, [r1, #28]
   1c642:	2d01      	cmp	r5, #1
   1c644:	d1ec      	bne.n	1c620 <arm_depthwise_conv_wrapper_s8+0x28>
   1c646:	6a0d      	ldr	r5, [r1, #32]
   1c648:	2d01      	cmp	r5, #1
   1c64a:	d1e9      	bne.n	1c620 <arm_depthwise_conv_wrapper_s8+0x28>
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1) &&
   1c64c:	68b5      	ldr	r5, [r6, #8]
   1c64e:	2d03      	cmp	r5, #3
   1c650:	d102      	bne.n	1c658 <arm_depthwise_conv_wrapper_s8+0x60>
   1c652:	6875      	ldr	r5, [r6, #4]
   1c654:	2d03      	cmp	r5, #3
   1c656:	d00f      	beq.n	1c678 <arm_depthwise_conv_wrapper_s8+0x80>
            status = arm_depthwise_conv_s8_opt(ctx,
   1c658:	9a01      	ldr	r2, [sp, #4]
   1c65a:	9800      	ldr	r0, [sp, #0]
   1c65c:	940c      	str	r4, [sp, #48]	@ 0x30
   1c65e:	4673      	mov	r3, lr
   1c660:	4661      	mov	r1, ip
   1c662:	e9cd 8711 	strd	r8, r7, [sp, #68]	@ 0x44
   1c666:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1c66a:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	@ 0x34
}
   1c66e:	b003      	add	sp, #12
   1c670:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            status = arm_depthwise_conv_s8_opt(ctx,
   1c674:	f7ff bc9e 	b.w	1bfb4 <arm_depthwise_conv_s8_opt>
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1) &&
   1c678:	698d      	ldr	r5, [r1, #24]
   1c67a:	2d01      	cmp	r5, #1
   1c67c:	dcec      	bgt.n	1c658 <arm_depthwise_conv_wrapper_s8+0x60>
   1c67e:	694d      	ldr	r5, [r1, #20]
   1c680:	2d01      	cmp	r5, #1
   1c682:	dce9      	bgt.n	1c658 <arm_depthwise_conv_wrapper_s8+0x60>
            status = arm_depthwise_conv_3x3_s8(ctx,
   1c684:	e9cd 8711 	strd	r8, r7, [sp, #68]	@ 0x44
   1c688:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
   1c68c:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	@ 0x34
   1c690:	940c      	str	r4, [sp, #48]	@ 0x30
}
   1c692:	b003      	add	sp, #12
   1c694:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            status = arm_depthwise_conv_3x3_s8(ctx,
   1c698:	f7fe bbd2 	b.w	1ae40 <arm_depthwise_conv_3x3_s8>

0001c69c <arm_depthwise_conv_wrapper_s8_get_buffer_size>:
                                                      const cmsis_nn_dims *output_dims)
{
    (void)dw_conv_params;
    int32_t size = 0;

    if (input_dims->c == output_dims->c && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c69c:	68db      	ldr	r3, [r3, #12]
{
   1c69e:	468c      	mov	ip, r1
    if (input_dims->c == output_dims->c && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c6a0:	68c9      	ldr	r1, [r1, #12]
   1c6a2:	4299      	cmp	r1, r3
   1c6a4:	d001      	beq.n	1c6aa <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xe>
    {
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
    }

    return size;
}
   1c6a6:	2000      	movs	r0, #0
   1c6a8:	4770      	bx	lr
    if (input_dims->c == output_dims->c && input_dims->n == 1 && dw_conv_params->dilation.w == 1 &&
   1c6aa:	f8dc 3000 	ldr.w	r3, [ip]
   1c6ae:	2b01      	cmp	r3, #1
   1c6b0:	d1f9      	bne.n	1c6a6 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xa>
   1c6b2:	69c3      	ldr	r3, [r0, #28]
   1c6b4:	2b01      	cmp	r3, #1
   1c6b6:	d1f6      	bne.n	1c6a6 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xa>
   1c6b8:	6a03      	ldr	r3, [r0, #32]
   1c6ba:	2b01      	cmp	r3, #1
   1c6bc:	d1f3      	bne.n	1c6a6 <arm_depthwise_conv_wrapper_s8_get_buffer_size+0xa>
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
   1c6be:	4611      	mov	r1, r2
   1c6c0:	4660      	mov	r0, ip
   1c6c2:	f7ff bf8f 	b.w	1c5e4 <arm_depthwise_conv_s8_opt_get_buffer_size>
   1c6c6:	bf00      	nop

0001c6c8 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
   1c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6cc:	b097      	sub	sp, #92	@ 0x5c
   1c6ce:	469e      	mov	lr, r3
   1c6d0:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	@ 0x88
   1c6d4:	9302      	str	r3, [sp, #8]
   1c6d6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
   1c6da:	9303      	str	r3, [sp, #12]
#if !defined(ARM_MATH_MVEI)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
   1c6dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
{
   1c6de:	f8dd a080 	ldr.w	sl, [sp, #128]	@ 0x80
   1c6e2:	910b      	str	r1, [sp, #44]	@ 0x2c
   1c6e4:	4691      	mov	r9, r2
   1c6e6:	4683      	mov	fp, r0
    q7_t *out_1 = out_0 + output_ch;
   1c6e8:	eb03 0802 	add.w	r8, r3, r2
{
   1c6ec:	f8bd 0090 	ldrh.w	r0, [sp, #144]	@ 0x90
   1c6f0:	9005      	str	r0, [sp, #20]
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
   1c6f2:	0852      	lsrs	r2, r2, #1
   1c6f4:	f000 8176 	beq.w	1c9e4 <arm_nn_mat_mult_kernel_s8_s16+0x31c>
   1c6f8:	460d      	mov	r5, r1
   1c6fa:	1e51      	subs	r1, r2, #1
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1c6fc:	eb05 0640 	add.w	r6, r5, r0, lsl #1
            ch_1_out_0 = *bias;
            ch_1_out_1 = *bias++;
        }

#if defined(ARM_MATH_DSP)
        uint16_t col_count = num_col_a / 4;
   1c700:	0883      	lsrs	r3, r0, #2
   1c702:	4604      	mov	r4, r0
   1c704:	b289      	uxth	r1, r1
   1c706:	f108 0004 	add.w	r0, r8, #4
   1c70a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
   1c70e:	930d      	str	r3, [sp, #52]	@ 0x34
   1c710:	910c      	str	r1, [sp, #48]	@ 0x30
   1c712:	3b01      	subs	r3, #1
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
   1c714:	f004 0103 	and.w	r1, r4, #3
   1c718:	b29b      	uxth	r3, r3
   1c71a:	910e      	str	r1, [sp, #56]	@ 0x38
   1c71c:	9926      	ldr	r1, [sp, #152]	@ 0x98
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1c71e:	960f      	str	r6, [sp, #60]	@ 0x3c
   1c720:	3301      	adds	r3, #1
   1c722:	0098      	lsls	r0, r3, #2
   1c724:	3102      	adds	r1, #2
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c726:	e9cd 2812 	strd	r2, r8, [sp, #72]	@ 0x48
   1c72a:	e9cd 9e14 	strd	r9, lr, [sp, #80]	@ 0x50
   1c72e:	9104      	str	r1, [sp, #16]
   1c730:	f10a 0c08 	add.w	ip, sl, #8
   1c734:	f108 0102 	add.w	r1, r8, #2
   1c738:	f10e 0708 	add.w	r7, lr, #8
   1c73c:	9006      	str	r0, [sp, #24]
   1c73e:	f8dd a094 	ldr.w	sl, [sp, #148]	@ 0x94
   1c742:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
   1c746:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   1c74a:	9011      	str	r0, [sp, #68]	@ 0x44
   1c74c:	9310      	str	r3, [sp, #64]	@ 0x40
   1c74e:	4638      	mov	r0, r7
   1c750:	460e      	mov	r6, r1
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1c752:	9b05      	ldr	r3, [sp, #20]
   1c754:	eb0b 0103 	add.w	r1, fp, r3
        if (bias)
   1c758:	f1ba 0f00 	cmp.w	sl, #0
   1c75c:	f000 81ef 	beq.w	1cb3e <arm_nn_mat_mult_kernel_s8_s16+0x476>
        while (col_count)
   1c760:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
            ch_1_out_0 = *bias;
   1c762:	e9da 3800 	ldrd	r3, r8, [sl]
            ch_1_out_1 = *bias++;
   1c766:	f10a 0a08 	add.w	sl, sl, #8
        while (col_count)
   1c76a:	2a00      	cmp	r2, #0
   1c76c:	f000 81ed 	beq.w	1cb4a <arm_nn_mat_mult_kernel_s8_s16+0x482>
   1c770:	9a06      	ldr	r2, [sp, #24]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1c772:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
        const q15_t *ip_b0 = input_b;
   1c774:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1c776:	9100      	str	r1, [sp, #0]
   1c778:	e9cd 0c07 	strd	r0, ip, [sp, #28]
   1c77c:	e9cd 6109 	strd	r6, r1, [sp, #36]	@ 0x24
   1c780:	445a      	add	r2, fp
   1c782:	9201      	str	r2, [sp, #4]
        while (col_count)
   1c784:	46c1      	mov	r9, r8
   1c786:	461a      	mov	r2, r3
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1c788:	f8cd a094 	str.w	sl, [sp, #148]	@ 0x94
    memcpy(&val, *in_q15, 4);
   1c78c:	f8d4 e000 	ldr.w	lr, [r4]
   1c790:	f8d5 c000 	ldr.w	ip, [r5]
    memcpy(&val, *in_q7, 4);
   1c794:	f85b 0b04 	ldr.w	r0, [fp], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1c798:	fa2f f690 	sxtb16	r6, r0, ror #8
   1c79c:	9f00      	ldr	r7, [sp, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1c79e:	fa2f f080 	sxtb16	r0, r0
   1c7a2:	f857 1b04 	ldr.w	r1, [r7], #4
   1c7a6:	9700      	str	r7, [sp, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1c7a8:	eac6 4720 	pkhtb	r7, r6, r0, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1c7ac:	eac0 4006 	pkhbt	r0, r0, r6, lsl #16
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1c7b0:	fa2f fa91 	sxtb16	sl, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1c7b4:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1c7b8:	eaca 4621 	pkhtb	r6, sl, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1c7bc:	eac1 410a 	pkhbt	r1, r1, sl, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1c7c0:	fb20 330e 	smlad	r3, r0, lr, r3
   1c7c4:	fb20 220c 	smlad	r2, r0, ip, r2
   1c7c8:	fb21 880e 	smlad	r8, r1, lr, r8
   1c7cc:	fb21 910c 	smlad	r1, r1, ip, r9
    memcpy(&val, *in_q15, 4);
   1c7d0:	6860      	ldr	r0, [r4, #4]
   1c7d2:	f8d5 9004 	ldr.w	r9, [r5, #4]
    *in_q15 += 2;
   1c7d6:	3408      	adds	r4, #8
   1c7d8:	3508      	adds	r5, #8
   1c7da:	fb27 3300 	smlad	r3, r7, r0, r3
   1c7de:	fb27 2209 	smlad	r2, r7, r9, r2
   1c7e2:	fb26 8800 	smlad	r8, r6, r0, r8
   1c7e6:	fb26 1909 	smlad	r9, r6, r9, r1
        while (col_count)
   1c7ea:	9901      	ldr	r1, [sp, #4]
   1c7ec:	4559      	cmp	r1, fp
   1c7ee:	d1cd      	bne.n	1c78c <arm_nn_mat_mult_kernel_s8_s16+0xc4>
        while (col_count)
   1c7f0:	e9dd 6109 	ldrd	r6, r1, [sp, #36]	@ 0x24
   1c7f4:	9c06      	ldr	r4, [sp, #24]
   1c7f6:	f8dd a094 	ldr.w	sl, [sp, #148]	@ 0x94
   1c7fa:	4421      	add	r1, r4
   1c7fc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
   1c7fe:	e9dd 0c07 	ldrd	r0, ip, [sp, #28]
        while (col_count)
   1c802:	e9dd 7e10 	ldrd	r7, lr, [sp, #64]	@ 0x40
        while (col_count)
   1c806:	2c00      	cmp	r4, #0
   1c808:	f000 81aa 	beq.w	1cb60 <arm_nn_mat_mult_kernel_s8_s16+0x498>
   1c80c:	9d01      	ldr	r5, [sp, #4]
   1c80e:	e9cd 0c00 	strd	r0, ip, [sp]
   1c812:	eb05 0b04 	add.w	fp, r5, r4
   1c816:	4628      	mov	r0, r5
            q7_t a0 = *ip_a0++;
   1c818:	f910 cb01 	ldrsb.w	ip, [r0], #1
            q15_t b0 = *ip_b0++;
   1c81c:	f937 5b02 	ldrsh.w	r5, [r7], #2
            q7_t a1 = *ip_a1++;
   1c820:	f911 4b01 	ldrsb.w	r4, [r1], #1
            ch_0_out_0 += a0 * b0;
   1c824:	fb05 330c 	mla	r3, r5, ip, r3
            ch_1_out_0 += a1 * b0;
   1c828:	fb05 8804 	mla	r8, r5, r4, r8
            q15_t b1 = *ip_b1++;
   1c82c:	f93e 5b02 	ldrsh.w	r5, [lr], #2
        while (col_count)
   1c830:	4583      	cmp	fp, r0
            ch_0_out_1 += a0 * b1;
   1c832:	fb05 220c 	mla	r2, r5, ip, r2
            ch_1_out_1 += a1 * b1;
   1c836:	fb05 9904 	mla	r9, r5, r4, r9
        while (col_count)
   1c83a:	d1ed      	bne.n	1c818 <arm_nn_mat_mult_kernel_s8_s16+0x150>
   1c83c:	e9dd 0c00 	ldrd	r0, ip, [sp]
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   1c840:	f850 4c08 	ldr.w	r4, [r0, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c844:	f85c 1c08 	ldr.w	r1, [ip, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c848:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
   1c84c:	fa03 f505 	lsl.w	r5, r3, r5
   1c850:	4264      	negs	r4, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c852:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1c856:	2700      	movs	r7, #0
   1c858:	fbc5 3701 	smlal	r3, r7, r5, r1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c85c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c860:	2101      	movs	r1, #1
   1c862:	40a1      	lsls	r1, r4
    result = (int32_t)(mult.long_long >> 31);
   1c864:	0fdb      	lsrs	r3, r3, #31
   1c866:	ea43 0347 	orr.w	r3, r3, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c86a:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1c86c:	ea03 0501 	and.w	r5, r3, r1
    if (result < 0)
   1c870:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
   1c872:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1c876:	bf48      	it	mi
   1c878:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1c87a:	428d      	cmp	r5, r1
        ch_0_out_0 += out_offset;
   1c87c:	9921      	ldr	r1, [sp, #132]	@ 0x84
        result++;
   1c87e:	bfc8      	it	gt
   1c880:	3301      	addgt	r3, #1
   1c882:	440b      	add	r3, r1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1c884:	9902      	ldr	r1, [sp, #8]
   1c886:	428b      	cmp	r3, r1
   1c888:	bfb8      	it	lt
   1c88a:	460b      	movlt	r3, r1
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1c88c:	9903      	ldr	r1, [sp, #12]
   1c88e:	428b      	cmp	r3, r1
   1c890:	bfa8      	it	ge
   1c892:	460b      	movge	r3, r1
        *out_0++ = (q7_t)ch_0_out_0;
   1c894:	9904      	ldr	r1, [sp, #16]
   1c896:	f801 3c02 	strb.w	r3, [r1, #-2]
        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   1c89a:	f850 1c08 	ldr.w	r1, [r0, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c89e:	f85c 3c08 	ldr.w	r3, [ip, #-8]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c8a2:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1c8a6:	fa02 f404 	lsl.w	r4, r2, r4
   1c8aa:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c8ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1c8b0:	2500      	movs	r5, #0
   1c8b2:	fbc4 2503 	smlal	r2, r5, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c8b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c8ba:	2301      	movs	r3, #1
   1c8bc:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   1c8be:	0fd2      	lsrs	r2, r2, #31
   1c8c0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c8c4:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c8c6:	ea02 0403 	and.w	r4, r2, r3
    if (result < 0)
   1c8ca:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
   1c8cc:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c8d0:	bf48      	it	mi
   1c8d2:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c8d4:	429c      	cmp	r4, r3
        ch_0_out_1 += out_offset;
   1c8d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
        result++;
   1c8d8:	bfc8      	it	gt
   1c8da:	3201      	addgt	r2, #1
   1c8dc:	441a      	add	r2, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1c8de:	9b02      	ldr	r3, [sp, #8]
   1c8e0:	429a      	cmp	r2, r3
   1c8e2:	bfb8      	it	lt
   1c8e4:	461a      	movlt	r2, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1c8e6:	9b03      	ldr	r3, [sp, #12]
   1c8e8:	429a      	cmp	r2, r3
   1c8ea:	bfa8      	it	ge
   1c8ec:	461a      	movge	r2, r3
        *out_1++ = (q7_t)ch_0_out_1;
   1c8ee:	f806 2c02 	strb.w	r2, [r6, #-2]
        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
   1c8f2:	f850 1c04 	ldr.w	r1, [r0, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c8f6:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c8fa:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1c8fe:	fa08 f404 	lsl.w	r4, r8, r4
   1c902:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c904:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1c908:	2500      	movs	r5, #0
   1c90a:	fbc4 2503 	smlal	r2, r5, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c90e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c912:	2301      	movs	r3, #1
   1c914:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   1c916:	0fd2      	lsrs	r2, r2, #31
   1c918:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c91c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c91e:	ea02 0403 	and.w	r4, r2, r3
    if (result < 0)
   1c922:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
   1c924:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c928:	bf48      	it	mi
   1c92a:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c92c:	429c      	cmp	r4, r3
        ch_1_out_0 += out_offset;
   1c92e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
        result++;
   1c930:	bfc8      	it	gt
   1c932:	3201      	addgt	r2, #1
   1c934:	441a      	add	r2, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   1c936:	9b02      	ldr	r3, [sp, #8]
   1c938:	429a      	cmp	r2, r3
   1c93a:	bfb8      	it	lt
   1c93c:	461a      	movlt	r2, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
   1c93e:	9b03      	ldr	r3, [sp, #12]
   1c940:	429a      	cmp	r2, r3
   1c942:	bfa8      	it	ge
   1c944:	461a      	movge	r2, r3
        *out_0++ = (q7_t)ch_1_out_0;
   1c946:	9b04      	ldr	r3, [sp, #16]
   1c948:	f803 2c01 	strb.w	r2, [r3, #-1]
        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
   1c94c:	f850 1c04 	ldr.w	r1, [r0, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c950:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c954:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1c958:	fa09 f404 	lsl.w	r4, r9, r4
   1c95c:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1c95e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1c962:	2500      	movs	r5, #0
   1c964:	fbc4 2503 	smlal	r2, r5, r4, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1c968:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c96c:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1c96e:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c970:	408b      	lsls	r3, r1
    result = (int32_t)(mult.long_long >> 31);
   1c972:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1c976:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1c978:	ea02 0403 	and.w	r4, r2, r3
    if (result < 0)
   1c97c:	410a      	asrs	r2, r1
    q31_t threshold = remainder_mask >> 1;
   1c97e:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1c982:	bf48      	it	mi
   1c984:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1c986:	429c      	cmp	r4, r3
        ch_1_out_1 += out_offset;
   1c988:	9b21      	ldr	r3, [sp, #132]	@ 0x84
        result++;
   1c98a:	bfc8      	it	gt
   1c98c:	3201      	addgt	r2, #1
   1c98e:	441a      	add	r2, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
   1c990:	9b02      	ldr	r3, [sp, #8]
   1c992:	429a      	cmp	r2, r3
   1c994:	bfb8      	it	lt
   1c996:	461a      	movlt	r2, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
   1c998:	9b03      	ldr	r3, [sp, #12]
   1c99a:	429a      	cmp	r2, r3
   1c99c:	bfa8      	it	ge
   1c99e:	461a      	movge	r2, r3
        ip_a0 += num_col_a;
   1c9a0:	9b05      	ldr	r3, [sp, #20]
        *out_1++ = (q7_t)ch_1_out_1;
   1c9a2:	f806 2c01 	strb.w	r2, [r6, #-1]
        ip_a0 += num_col_a;
   1c9a6:	449b      	add	fp, r3
    while (row_count)
   1c9a8:	9b04      	ldr	r3, [sp, #16]
   1c9aa:	3302      	adds	r3, #2
   1c9ac:	9304      	str	r3, [sp, #16]
   1c9ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   1c9b0:	3602      	adds	r6, #2
   1c9b2:	42b3      	cmp	r3, r6
   1c9b4:	f10c 0c08 	add.w	ip, ip, #8
   1c9b8:	f100 0008 	add.w	r0, r0, #8
   1c9bc:	f47f aec9 	bne.w	1c752 <arm_nn_mat_mult_kernel_s8_s16+0x8a>
   1c9c0:	e9dd 2812 	ldrd	r2, r8, [sp, #72]	@ 0x48
   1c9c4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   1c9c6:	f8cd a094 	str.w	sl, [sp, #148]	@ 0x94
   1c9ca:	e9dd 9e14 	ldrd	r9, lr, [sp, #80]	@ 0x50
   1c9ce:	f8dd a080 	ldr.w	sl, [sp, #128]	@ 0x80
   1c9d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1c9d6:	9326      	str	r3, [sp, #152]	@ 0x98
   1c9d8:	eb08 0842 	add.w	r8, r8, r2, lsl #1
   1c9dc:	eb0a 0ac2 	add.w	sl, sl, r2, lsl #3
   1c9e0:	eb0e 0ec2 	add.w	lr, lr, r2, lsl #3
    if (output_ch & 0x1)
   1c9e4:	f019 0f01 	tst.w	r9, #1
   1c9e8:	f000 80a3 	beq.w	1cb32 <arm_nn_mat_mult_kernel_s8_s16+0x46a>
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1c9ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1c9ee:	9a05      	ldr	r2, [sp, #20]
   1c9f0:	eb03 0742 	add.w	r7, r3, r2, lsl #1
        if (bias)
   1c9f4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   1c9f6:	2b00      	cmp	r3, #0
   1c9f8:	f000 80b5 	beq.w	1cb66 <arm_nn_mat_mult_kernel_s8_s16+0x49e>
            ch_0_out_0 = *bias;
   1c9fc:	681b      	ldr	r3, [r3, #0]
        while (col_count)
   1c9fe:	9a05      	ldr	r2, [sp, #20]
   1ca00:	0896      	lsrs	r6, r2, #2
   1ca02:	f000 80b2 	beq.w	1cb6a <arm_nn_mat_mult_kernel_s8_s16+0x4a2>
   1ca06:	e9cd 6800 	strd	r6, r8, [sp]
        const q15_t *ip_b0 = input_b;
   1ca0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
   1ca0c:	eb0b 0c86 	add.w	ip, fp, r6, lsl #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1ca10:	463d      	mov	r5, r7
        while (col_count)
   1ca12:	4618      	mov	r0, r3
    memcpy(&val, *in_q7, 4);
   1ca14:	f85b 2b04 	ldr.w	r2, [fp], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1ca18:	fa2f f692 	sxtb16	r6, r2, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1ca1c:	fa2f f282 	sxtb16	r2, r2
    memcpy(&val, *in_q15, 4);
   1ca20:	f8d4 8000 	ldr.w	r8, [r4]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1ca24:	eac6 4122 	pkhtb	r1, r6, r2, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1ca28:	eac2 4206 	pkhbt	r2, r2, r6, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1ca2c:	fb22 3308 	smlad	r3, r2, r8, r3
    memcpy(&val, *in_q15, 4);
   1ca30:	682e      	ldr	r6, [r5, #0]
   1ca32:	fb22 0206 	smlad	r2, r2, r6, r0
   1ca36:	6866      	ldr	r6, [r4, #4]
   1ca38:	6868      	ldr	r0, [r5, #4]
    *in_q15 += 2;
   1ca3a:	3408      	adds	r4, #8
   1ca3c:	3508      	adds	r5, #8
   1ca3e:	fb21 3306 	smlad	r3, r1, r6, r3
   1ca42:	fb21 2000 	smlad	r0, r1, r0, r2
   1ca46:	45dc      	cmp	ip, fp
   1ca48:	d1e4      	bne.n	1ca14 <arm_nn_mat_mult_kernel_s8_s16+0x34c>
   1ca4a:	e9dd 6800 	ldrd	r6, r8, [sp]
   1ca4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   1ca50:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   1ca54:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
   1ca58:	920b      	str	r2, [sp, #44]	@ 0x2c
#else
        uint16_t col_count = num_col_a;
#endif
        while (col_count)
   1ca5a:	9a05      	ldr	r2, [sp, #20]
   1ca5c:	f012 0203 	ands.w	r2, r2, #3
   1ca60:	d00d      	beq.n	1ca7e <arm_nn_mat_mult_kernel_s8_s16+0x3b6>
   1ca62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
   1ca64:	4462      	add	r2, ip
        {
            q7_t a0 = *ip_a0++;
   1ca66:	f91c 1b01 	ldrsb.w	r1, [ip], #1
            q15_t b0 = *ip_b0++;
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
   1ca6a:	f834 5b02 	ldrh.w	r5, [r4], #2
   1ca6e:	fb15 3301 	smlabb	r3, r5, r1, r3
            ch_0_out_1 += a0 * b1;
   1ca72:	f837 5b02 	ldrh.w	r5, [r7], #2
        while (col_count)
   1ca76:	4594      	cmp	ip, r2
            ch_0_out_1 += a0 * b1;
   1ca78:	fb15 0001 	smlabb	r0, r5, r1, r0
        while (col_count)
   1ca7c:	d1f3      	bne.n	1ca66 <arm_nn_mat_mult_kernel_s8_s16+0x39e>
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
   1ca7e:	f8de 1000 	ldr.w	r1, [lr]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ca82:	f8da 2000 	ldr.w	r2, [sl]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ca86:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   1ca8a:	fa03 f404 	lsl.w	r4, r3, r4
   1ca8e:	4249      	negs	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1ca90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1ca94:	2500      	movs	r5, #0
   1ca96:	fbc4 3502 	smlal	r3, r5, r4, r2
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1ca9a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1ca9e:	2201      	movs	r2, #1
   1caa0:	408a      	lsls	r2, r1
    result = (int32_t)(mult.long_long >> 31);
   1caa2:	0fdb      	lsrs	r3, r3, #31
   1caa4:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1caa8:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
   1caaa:	ea03 0402 	and.w	r4, r3, r2
    if (result < 0)
   1caae:	410b      	asrs	r3, r1
    q31_t threshold = remainder_mask >> 1;
   1cab0:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
   1cab4:	bf48      	it	mi
   1cab6:	3201      	addmi	r2, #1
    if (remainder > threshold)
   1cab8:	4294      	cmp	r4, r2
        ch_0_out_0 += out_offset;
   1caba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cabc:	9903      	ldr	r1, [sp, #12]
        result++;
   1cabe:	bfc8      	it	gt
   1cac0:	3301      	addgt	r3, #1
        ch_0_out_0 += out_offset;
   1cac2:	4413      	add	r3, r2
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1cac4:	9a02      	ldr	r2, [sp, #8]
   1cac6:	4293      	cmp	r3, r2
   1cac8:	bfb8      	it	lt
   1caca:	4613      	movlt	r3, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cacc:	428b      	cmp	r3, r1
        *out_0++ = (q7_t)ch_0_out_0;
   1cace:	9a26      	ldr	r2, [sp, #152]	@ 0x98
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cad0:	bfa8      	it	ge
   1cad2:	460b      	movge	r3, r1
        *out_0++ = (q7_t)ch_0_out_0;
   1cad4:	f802 3b01 	strb.w	r3, [r2], #1

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
   1cad8:	f8de 4000 	ldr.w	r4, [lr]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1cadc:	f8da 5000 	ldr.w	r5, [sl]
        *out_0++ = (q7_t)ch_0_out_0;
   1cae0:	9226      	str	r2, [sp, #152]	@ 0x98
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1cae2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   1cae6:	4098      	lsls	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1cae8:	2100      	movs	r1, #0
   1caea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1caee:	fbc0 3105 	smlal	r3, r1, r0, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1caf2:	4264      	negs	r4, r4
    result = (int32_t)(mult.long_long >> 31);
   1caf4:	0fdb      	lsrs	r3, r3, #31
   1caf6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1cafa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1cafe:	2101      	movs	r1, #1
   1cb00:	40a1      	lsls	r1, r4
   1cb02:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1cb04:	ea03 0001 	and.w	r0, r3, r1
    if (result < 0)
   1cb08:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
   1cb0a:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
   1cb0e:	bf48      	it	mi
   1cb10:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1cb12:	4288      	cmp	r0, r1
        ch_0_out_1 += out_offset;
   1cb14:	9921      	ldr	r1, [sp, #132]	@ 0x84
        result++;
   1cb16:	bfc8      	it	gt
   1cb18:	3301      	addgt	r3, #1
   1cb1a:	440b      	add	r3, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1cb1c:	9902      	ldr	r1, [sp, #8]
   1cb1e:	4299      	cmp	r1, r3
   1cb20:	bfb8      	it	lt
   1cb22:	4619      	movlt	r1, r3
   1cb24:	460b      	mov	r3, r1
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1cb26:	9903      	ldr	r1, [sp, #12]
   1cb28:	4299      	cmp	r1, r3
   1cb2a:	bfa8      	it	ge
   1cb2c:	4619      	movge	r1, r3
        *out_1++ = (q7_t)ch_0_out_1;
   1cb2e:	f888 1000 	strb.w	r1, [r8]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
   1cb32:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   1cb34:	eb03 0009 	add.w	r0, r3, r9
   1cb38:	b017      	add	sp, #92	@ 0x5c
   1cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (col_count)
   1cb3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
        q31_t ch_1_out_0 = 0;
   1cb40:	46d0      	mov	r8, sl
        q31_t ch_0_out_0 = 0;
   1cb42:	4653      	mov	r3, sl
        while (col_count)
   1cb44:	2a00      	cmp	r2, #0
   1cb46:	f47f ae13 	bne.w	1c770 <arm_nn_mat_mult_kernel_s8_s16+0xa8>
        while (col_count)
   1cb4a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cb4c:	f8dd e03c 	ldr.w	lr, [sp, #60]	@ 0x3c
        const q15_t *ip_b0 = input_b;
   1cb50:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
        while (col_count)
   1cb52:	f8cd b004 	str.w	fp, [sp, #4]
   1cb56:	46c1      	mov	r9, r8
   1cb58:	461a      	mov	r2, r3
        while (col_count)
   1cb5a:	2c00      	cmp	r4, #0
   1cb5c:	f47f ae56 	bne.w	1c80c <arm_nn_mat_mult_kernel_s8_s16+0x144>
   1cb60:	f8dd b004 	ldr.w	fp, [sp, #4]
   1cb64:	e66c      	b.n	1c840 <arm_nn_mat_mult_kernel_s8_s16+0x178>
        q31_t ch_0_out_0 = 0;
   1cb66:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   1cb68:	e749      	b.n	1c9fe <arm_nn_mat_mult_kernel_s8_s16+0x336>
        while (col_count)
   1cb6a:	46dc      	mov	ip, fp
   1cb6c:	4618      	mov	r0, r3
   1cb6e:	e774      	b.n	1ca5a <arm_nn_mat_mult_kernel_s8_s16+0x392>

0001cb70 <arm_nn_mat_mult_kernel_s16>:
                                  const int16_t activation_min,
                                  const int16_t activation_max,
                                  const int32_t num_col_a,
                                  const int64_t *const output_bias,
                                  q15_t *out_0)
{
   1cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb74:	b097      	sub	sp, #92	@ 0x5c
   1cb76:	460f      	mov	r7, r1
   1cb78:	f9bd 4084 	ldrsh.w	r4, [sp, #132]	@ 0x84
   1cb7c:	9e25      	ldr	r6, [sp, #148]	@ 0x94
   1cb7e:	910a      	str	r1, [sp, #40]	@ 0x28

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    /* set up the second output pointers */
    q15_t *out_1 = out_0 + output_ch;
    const int64_t *bias = output_bias;
    uint16_t row_count = output_ch / 2;
   1cb80:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
{
   1cb84:	4680      	mov	r8, r0
   1cb86:	9405      	str	r4, [sp, #20]
   1cb88:	4618      	mov	r0, r3
   1cb8a:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
   1cb8e:	f8dd a080 	ldr.w	sl, [sp, #128]	@ 0x80
   1cb92:	9406      	str	r4, [sp, #24]
    uint16_t row_count = output_ch / 2;
   1cb94:	f3c1 034f 	ubfx	r3, r1, #1, #16
    q15_t *out_1 = out_0 + output_ch;
   1cb98:	ea4f 0b42 	mov.w	fp, r2, lsl #1
   1cb9c:	eb06 0942 	add.w	r9, r6, r2, lsl #1
    const q7_t *ip_a0 = input_a;

    /* this loop over rows in A */
    while (row_count)
   1cba0:	2b00      	cmp	r3, #0
   1cba2:	f000 817a 	beq.w	1ce9a <arm_nn_mat_mult_kernel_s16+0x32a>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cba6:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1cba8:	9015      	str	r0, [sp, #84]	@ 0x54
   1cbaa:	104d      	asrs	r5, r1, #1
   1cbac:	eb07 0144 	add.w	r1, r7, r4, lsl #1
   1cbb0:	910c      	str	r1, [sp, #48]	@ 0x30
        q31_t ch_0_out_0 = 0;
        q31_t ch_0_out_1 = 0;
        q31_t ch_1_out_0 = 0;
        q31_t ch_1_out_1 = 0;

        uint16_t col_count = num_col_a / 4;
   1cbb2:	2c00      	cmp	r4, #0
   1cbb4:	4621      	mov	r1, r4
   1cbb6:	bfb8      	it	lt
   1cbb8:	3103      	addlt	r1, #3
   1cbba:	f3c1 048f 	ubfx	r4, r1, #2, #16
   1cbbe:	3b01      	subs	r3, #1
   1cbc0:	b299      	uxth	r1, r3
   1cbc2:	940b      	str	r4, [sp, #44]	@ 0x2c
   1cbc4:	1e63      	subs	r3, r4, #1
   1cbc6:	f100 0410 	add.w	r4, r0, #16
   1cbca:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   1cbce:	910d      	str	r1, [sp, #52]	@ 0x34
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

            col_count--;
        } /* while over col_count */
        col_count = num_col_a & 0x3;
   1cbd0:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   1cbd2:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
   1cbd6:	f001 0103 	and.w	r1, r1, #3
   1cbda:	910e      	str	r1, [sp, #56]	@ 0x38
   1cbdc:	1d31      	adds	r1, r6, #4
   1cbde:	b29b      	uxth	r3, r3
   1cbe0:	9104      	str	r1, [sp, #16]
   1cbe2:	f109 0104 	add.w	r1, r9, #4
   1cbe6:	3301      	adds	r3, #1
   1cbe8:	9103      	str	r1, [sp, #12]
   1cbea:	f10a 0108 	add.w	r1, sl, #8
   1cbee:	9102      	str	r1, [sp, #8]
   1cbf0:	0099      	lsls	r1, r3, #2
   1cbf2:	9107      	str	r1, [sp, #28]
   1cbf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
   1cbf6:	9625      	str	r6, [sp, #148]	@ 0x94
   1cbf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1cbfc:	9110      	str	r1, [sp, #64]	@ 0x40
   1cbfe:	990c      	ldr	r1, [sp, #48]	@ 0x30
   1cc00:	e9cd 9213 	strd	r9, r2, [sp, #76]	@ 0x4c
   1cc04:	e9cd b511 	strd	fp, r5, [sp, #68]	@ 0x44
   1cc08:	f100 0708 	add.w	r7, r0, #8
   1cc0c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1cc10:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
   1cc14:	930f      	str	r3, [sp, #60]	@ 0x3c
   1cc16:	4638      	mov	r0, r7
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1cc18:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   1cc1a:	eb08 0103 	add.w	r1, r8, r3
        while (col_count)
   1cc1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1cc20:	2b00      	cmp	r3, #0
   1cc22:	f000 8276 	beq.w	1d112 <arm_nn_mat_mult_kernel_s16+0x5a2>
   1cc26:	9b07      	ldr	r3, [sp, #28]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cc28:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
        const q15_t *ip_b0 = input_b;
   1cc2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
        const q7_t *ip_a1 = ip_a0 + num_col_a;
   1cc2c:	9100      	str	r1, [sp, #0]
        q31_t ch_0_out_0 = 0;
   1cc2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
        q31_t ch_1_out_1 = 0;
   1cc32:	f04f 0a00 	mov.w	sl, #0
   1cc36:	4443      	add	r3, r8
   1cc38:	9301      	str	r3, [sp, #4]
        q31_t ch_1_out_0 = 0;
   1cc3a:	46d1      	mov	r9, sl
        q31_t ch_0_out_1 = 0;
   1cc3c:	4652      	mov	r2, sl
        q31_t ch_0_out_0 = 0;
   1cc3e:	4653      	mov	r3, sl
   1cc40:	f8cd b090 	str.w	fp, [sp, #144]	@ 0x90
    memcpy(&val, *in_q15, 4);
   1cc44:	f8d4 e000 	ldr.w	lr, [r4]
   1cc48:	f8d5 c000 	ldr.w	ip, [r5]
    memcpy(&val, *in_q7, 4);
   1cc4c:	f858 0b04 	ldr.w	r0, [r8], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1cc50:	fa2f f690 	sxtb16	r6, r0, ror #8
   1cc54:	9f00      	ldr	r7, [sp, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1cc56:	fa2f f080 	sxtb16	r0, r0
   1cc5a:	f857 1b04 	ldr.w	r1, [r7], #4
   1cc5e:	9700      	str	r7, [sp, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1cc60:	eac6 4720 	pkhtb	r7, r6, r0, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1cc64:	eac0 4006 	pkhbt	r0, r0, r6, lsl #16
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1cc68:	fa2f fb91 	sxtb16	fp, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1cc6c:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1cc70:	eacb 4621 	pkhtb	r6, fp, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1cc74:	eac1 410b 	pkhbt	r1, r1, fp, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1cc78:	fb20 330e 	smlad	r3, r0, lr, r3
   1cc7c:	fb20 220c 	smlad	r2, r0, ip, r2
   1cc80:	fb21 990e 	smlad	r9, r1, lr, r9
   1cc84:	fb21 a10c 	smlad	r1, r1, ip, sl
    memcpy(&val, *in_q15, 4);
   1cc88:	6860      	ldr	r0, [r4, #4]
   1cc8a:	f8d5 a004 	ldr.w	sl, [r5, #4]
    *in_q15 += 2;
   1cc8e:	3408      	adds	r4, #8
   1cc90:	3508      	adds	r5, #8
   1cc92:	fb27 3300 	smlad	r3, r7, r0, r3
   1cc96:	fb27 220a 	smlad	r2, r7, sl, r2
   1cc9a:	fb26 9900 	smlad	r9, r6, r0, r9
   1cc9e:	fb26 1a0a 	smlad	sl, r6, sl, r1
        while (col_count)
   1cca2:	9901      	ldr	r1, [sp, #4]
   1cca4:	4588      	cmp	r8, r1
   1cca6:	d1cd      	bne.n	1cc44 <arm_nn_mat_mult_kernel_s16+0xd4>
   1cca8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1ccac:	9c07      	ldr	r4, [sp, #28]
   1ccae:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
   1ccb2:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	@ 0x3c
   1ccb6:	4421      	add	r1, r4
        while (col_count)
   1ccb8:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
   1ccba:	2d00      	cmp	r5, #0
   1ccbc:	f000 8224 	beq.w	1d108 <arm_nn_mat_mult_kernel_s16+0x598>
   1ccc0:	9c01      	ldr	r4, [sp, #4]
   1ccc2:	eb04 0805 	add.w	r8, r4, r5
        {
            q7_t a0 = *ip_a0++;
   1ccc6:	f914 eb01 	ldrsb.w	lr, [r4], #1
            q15_t b0 = *ip_b0++;
   1ccca:	f937 6b02 	ldrsh.w	r6, [r7], #2
            q7_t a1 = *ip_a1++;
   1ccce:	f911 5b01 	ldrsb.w	r5, [r1], #1
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
   1ccd2:	fb06 330e 	mla	r3, r6, lr, r3
            ch_0_out_1 += a0 * b1;
            ch_1_out_0 += a1 * b0;
   1ccd6:	fb06 9905 	mla	r9, r6, r5, r9
            q15_t b1 = *ip_b1++;
   1ccda:	f93c 6b02 	ldrsh.w	r6, [ip], #2
        while (col_count)
   1ccde:	4544      	cmp	r4, r8
            ch_0_out_1 += a0 * b1;
   1cce0:	fb06 220e 	mla	r2, r6, lr, r2
            ch_1_out_1 += a1 * b1;
   1cce4:	fb06 aa05 	mla	sl, r6, r5, sl
        while (col_count)
   1cce8:	d1ed      	bne.n	1ccc6 <arm_nn_mat_mult_kernel_s16+0x156>
            col_count--;
        } /* while over col_count */
        if (bias)
        {
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1ccea:	9902      	ldr	r1, [sp, #8]
            q63_t acc_64 = ch_0_out_0 + *bias;
            ch_0_out_0 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
   1ccec:	f850 5c08 	ldr.w	r5, [r0, #-8]
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1ccf0:	f851 4c08 	ldr.w	r4, [r1, #-8]
        if (bias)
   1ccf4:	f1bb 0f00 	cmp.w	fp, #0
   1ccf8:	f000 818c 	beq.w	1d014 <arm_nn_mat_mult_kernel_s16+0x4a4>
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1ccfc:	49c4      	ldr	r1, [pc, #784]	@ (1d010 <arm_nn_mat_mult_kernel_s16+0x4a0>)
   1ccfe:	428c      	cmp	r4, r1
   1cd00:	f300 8180 	bgt.w	1d004 <arm_nn_mat_mult_kernel_s16+0x494>
   1cd04:	f504 4400 	add.w	r4, r4, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
   1cd08:	17e1      	asrs	r1, r4, #31
   1cd0a:	1426      	asrs	r6, r4, #16
   1cd0c:	9100      	str	r1, [sp, #0]
            q63_t acc_64 = ch_0_out_0 + *bias;
   1cd0e:	e9db 1c00 	ldrd	r1, ip, [fp]
   1cd12:	9c00      	ldr	r4, [sp, #0]
   1cd14:	185f      	adds	r7, r3, r1
   1cd16:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
   1cd1a:	fb07 fe04 	mul.w	lr, r7, r4
   1cd1e:	fb06 ee03 	mla	lr, r6, r3, lr
   1cd22:	fba7 3706 	umull	r3, r7, r7, r6
   1cd26:	4477      	add	r7, lr
   1cd28:	463c      	mov	r4, r7
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cd2a:	f1c5 070e 	rsb	r7, r5, #14
   1cd2e:	3512      	adds	r5, #18
   1cd30:	fa04 fe05 	lsl.w	lr, r4, r5
   1cd34:	40fb      	lsrs	r3, r7
   1cd36:	ea43 030e 	orr.w	r3, r3, lr
   1cd3a:	f1b7 0e20 	subs.w	lr, r7, #32
   1cd3e:	bf58      	it	pl
   1cd40:	fa44 fe0e 	asrpl.w	lr, r4, lr
    const q63_t new_val = val * reduced_multiplier;
   1cd44:	9c00      	ldr	r4, [sp, #0]
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cd46:	bf58      	it	pl
   1cd48:	ea43 030e 	orrpl.w	r3, r3, lr
            acc_64 = ch_0_out_1 + *bias++;
   1cd4c:	1851      	adds	r1, r2, r1
   1cd4e:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
    const q63_t new_val = val * reduced_multiplier;
   1cd52:	fb01 f404 	mul.w	r4, r1, r4
   1cd56:	fb06 440c 	mla	r4, r6, ip, r4
   1cd5a:	fba1 1606 	umull	r1, r6, r1, r6
   1cd5e:	4426      	add	r6, r4
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cd60:	40f9      	lsrs	r1, r7
   1cd62:	fa06 f505 	lsl.w	r5, r6, r5
   1cd66:	3f20      	subs	r7, #32
   1cd68:	ea41 0105 	orr.w	r1, r1, r5
   1cd6c:	bf58      	it	pl
   1cd6e:	fa46 f707 	asrpl.w	r7, r6, r7
        {
            ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
            ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
            out_mult++;
        }
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1cd72:	9a05      	ldr	r2, [sp, #20]
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q15_t)ch_0_out_0;
   1cd74:	9c04      	ldr	r4, [sp, #16]
   1cd76:	bf58      	it	pl
   1cd78:	4339      	orrpl	r1, r7
    result = (result + 1) >> 1;             // Last shift position and insert round
   1cd7a:	3301      	adds	r3, #1
   1cd7c:	105b      	asrs	r3, r3, #1
   1cd7e:	3101      	adds	r1, #1
   1cd80:	1049      	asrs	r1, r1, #1
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1cd82:	4293      	cmp	r3, r2
   1cd84:	bfb8      	it	lt
   1cd86:	4613      	movlt	r3, r2

        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1cd88:	4291      	cmp	r1, r2
   1cd8a:	bfb8      	it	lt
   1cd8c:	4611      	movlt	r1, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cd8e:	9a06      	ldr	r2, [sp, #24]
   1cd90:	4293      	cmp	r3, r2
   1cd92:	bfa8      	it	ge
   1cd94:	4613      	movge	r3, r2
        *out_0++ = (q15_t)ch_0_out_0;
   1cd96:	f824 3c04 	strh.w	r3, [r4, #-4]
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1cd9a:	4291      	cmp	r1, r2
        *out_1++ = (q15_t)ch_0_out_1;
   1cd9c:	9b03      	ldr	r3, [sp, #12]
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1cd9e:	bfa8      	it	ge
   1cda0:	4611      	movge	r1, r2
        *out_1++ = (q15_t)ch_0_out_1;
   1cda2:	f823 1c04 	strh.w	r1, [r3, #-4]
        out_shift++;

        if (bias)
        {
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1cda6:	9b02      	ldr	r3, [sp, #8]
   1cda8:	f853 4c04 	ldr.w	r4, [r3, #-4]
   1cdac:	4b98      	ldr	r3, [pc, #608]	@ (1d010 <arm_nn_mat_mult_kernel_s16+0x4a0>)
   1cdae:	429c      	cmp	r4, r3
   1cdb0:	f340 8123 	ble.w	1cffa <arm_nn_mat_mult_kernel_s16+0x48a>
   1cdb4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
   1cdb8:	2400      	movs	r4, #0
            q63_t acc_64 = ch_1_out_0 + *bias;
   1cdba:	e9db 1c02 	ldrd	r1, ip, [fp, #8]
   1cdbe:	eb19 0501 	adds.w	r5, r9, r1
   1cdc2:	eb4c 72e9 	adc.w	r2, ip, r9, asr #31
    const q63_t new_val = val * reduced_multiplier;
   1cdc6:	fb05 f704 	mul.w	r7, r5, r4
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cdca:	f850 6c04 	ldr.w	r6, [r0, #-4]
    const q63_t new_val = val * reduced_multiplier;
   1cdce:	fb03 7702 	mla	r7, r3, r2, r7
   1cdd2:	fba5 2503 	umull	r2, r5, r5, r3
   1cdd6:	442f      	add	r7, r5
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cdd8:	f1c6 050e 	rsb	r5, r6, #14
   1cddc:	3612      	adds	r6, #18
   1cdde:	fa07 fe06 	lsl.w	lr, r7, r6
   1cde2:	40ea      	lsrs	r2, r5
   1cde4:	ea42 020e 	orr.w	r2, r2, lr
   1cde8:	f1b5 0e20 	subs.w	lr, r5, #32
   1cdec:	bf5c      	itt	pl
   1cdee:	fa47 fe0e 	asrpl.w	lr, r7, lr
   1cdf2:	ea42 020e 	orrpl.w	r2, r2, lr
            ch_1_out_0 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
            acc_64 = ch_1_out_1 + *bias++;
   1cdf6:	eb1a 0101 	adds.w	r1, sl, r1
   1cdfa:	eb4c 7cea 	adc.w	ip, ip, sl, asr #31
    const q63_t new_val = val * reduced_multiplier;
   1cdfe:	fb01 f404 	mul.w	r4, r1, r4
   1ce02:	fb03 440c 	mla	r4, r3, ip, r4
   1ce06:	fba1 3103 	umull	r3, r1, r1, r3
   1ce0a:	4421      	add	r1, r4
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1ce0c:	40eb      	lsrs	r3, r5
   1ce0e:	fa01 f606 	lsl.w	r6, r1, r6
   1ce12:	3d20      	subs	r5, #32
   1ce14:	ea43 0306 	orr.w	r3, r3, r6
   1ce18:	bf5c      	itt	pl
   1ce1a:	fa41 f505 	asrpl.w	r5, r1, r5
   1ce1e:	432b      	orrpl	r3, r5
    result = (result + 1) >> 1;             // Last shift position and insert round
   1ce20:	3201      	adds	r2, #1
   1ce22:	1c5e      	adds	r6, r3, #1
   1ce24:	1052      	asrs	r2, r2, #1
   1ce26:	f10b 0b10 	add.w	fp, fp, #16
   1ce2a:	1076      	asrs	r6, r6, #1
        {
            ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
            ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
            out_mult++;
        }
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   1ce2c:	9b05      	ldr	r3, [sp, #20]
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
        *out_0++ = (q15_t)ch_1_out_0;
   1ce2e:	9904      	ldr	r1, [sp, #16]
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
   1ce30:	429a      	cmp	r2, r3
   1ce32:	bfb8      	it	lt
   1ce34:	461a      	movlt	r2, r3

        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
   1ce36:	429e      	cmp	r6, r3
   1ce38:	bfb8      	it	lt
   1ce3a:	461e      	movlt	r6, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
   1ce3c:	9b06      	ldr	r3, [sp, #24]
   1ce3e:	429a      	cmp	r2, r3
   1ce40:	bfa8      	it	ge
   1ce42:	461a      	movge	r2, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
   1ce44:	429e      	cmp	r6, r3
   1ce46:	bfa8      	it	ge
   1ce48:	461e      	movge	r6, r3
        *out_1++ = (q15_t)ch_1_out_1;
   1ce4a:	9b03      	ldr	r3, [sp, #12]
        *out_0++ = (q15_t)ch_1_out_0;
   1ce4c:	f821 2c02 	strh.w	r2, [r1, #-2]
    while (row_count)
   1ce50:	3304      	adds	r3, #4
        *out_1++ = (q15_t)ch_1_out_1;
   1ce52:	f823 6c06 	strh.w	r6, [r3, #-6]
    while (row_count)
   1ce56:	9303      	str	r3, [sp, #12]
   1ce58:	9b02      	ldr	r3, [sp, #8]
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
   1ce5a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    while (row_count)
   1ce5c:	3308      	adds	r3, #8
   1ce5e:	9302      	str	r3, [sp, #8]
   1ce60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   1ce62:	3008      	adds	r0, #8
        ip_a0 += num_col_a;
   1ce64:	4490      	add	r8, r2
    while (row_count)
   1ce66:	4283      	cmp	r3, r0
   1ce68:	f101 0204 	add.w	r2, r1, #4
   1ce6c:	9204      	str	r2, [sp, #16]
   1ce6e:	f47f aed3 	bne.w	1cc18 <arm_nn_mat_mult_kernel_s16+0xa8>
   1ce72:	e9dd 5912 	ldrd	r5, r9, [sp, #72]	@ 0x48
   1ce76:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
   1ce7a:	f8dd a080 	ldr.w	sl, [sp, #128]	@ 0x80
   1ce7e:	9e25      	ldr	r6, [sp, #148]	@ 0x94
   1ce80:	f8cd b090 	str.w	fp, [sp, #144]	@ 0x90
   1ce84:	b2ad      	uxth	r5, r5
   1ce86:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
   1ce8a:	eb0a 0ac5 	add.w	sl, sl, r5, lsl #3
   1ce8e:	eb06 0685 	add.w	r6, r6, r5, lsl #2
   1ce92:	eb09 0985 	add.w	r9, r9, r5, lsl #2
   1ce96:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
   1ce9a:	07d3      	lsls	r3, r2, #31
   1ce9c:	f140 80a8 	bpl.w	1cff0 <arm_nn_mat_mult_kernel_s16+0x480>

        q31_t ch_0_out_0 = 0;
        q31_t ch_0_out_1 = 0;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
   1cea0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cea2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
        while (col_count)
   1cea4:	f3c3 028f 	ubfx	r2, r3, #2, #16
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cea8:	eb04 0743 	add.w	r7, r4, r3, lsl #1
        uint16_t col_count = num_col_a >> 2;
   1ceac:	109b      	asrs	r3, r3, #2
        while (col_count)
   1ceae:	2a00      	cmp	r2, #0
   1ceb0:	f000 813e 	beq.w	1d130 <arm_nn_mat_mult_kernel_s16+0x5c0>
        q31_t ch_0_out_0 = 0;
   1ceb4:	e9cd b900 	strd	fp, r9, [sp]
   1ceb8:	fa1f fe83 	uxth.w	lr, r3
        q31_t ch_0_out_1 = 0;
   1cebc:	2200      	movs	r2, #0
   1cebe:	eb08 0c8e 	add.w	ip, r8, lr, lsl #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1cec2:	463d      	mov	r5, r7
        q31_t ch_0_out_0 = 0;
   1cec4:	4611      	mov	r1, r2
   1cec6:	9702      	str	r7, [sp, #8]
    memcpy(&val, *in_q7, 4);
   1cec8:	f858 3b04 	ldr.w	r3, [r8], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1cecc:	fa2f f993 	sxtb16	r9, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1ced0:	fa2f f383 	sxtb16	r3, r3
    memcpy(&val, *in_q15, 4);
   1ced4:	f8d4 b000 	ldr.w	fp, [r4]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
   1ced8:	eac9 4723 	pkhtb	r7, r9, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
   1cedc:	eac3 4309 	pkhbt	r3, r3, r9, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1cee0:	fb23 110b 	smlad	r1, r3, fp, r1
    memcpy(&val, *in_q15, 4);
   1cee4:	f8d5 9000 	ldr.w	r9, [r5]
   1cee8:	fb23 2309 	smlad	r3, r3, r9, r2
   1ceec:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1cef0:	686a      	ldr	r2, [r5, #4]
    *in_q15 += 2;
   1cef2:	3408      	adds	r4, #8
   1cef4:	3508      	adds	r5, #8
   1cef6:	fb27 1109 	smlad	r1, r7, r9, r1
   1cefa:	fb27 3202 	smlad	r2, r7, r2, r3
        while (col_count)
   1cefe:	45e0      	cmp	r8, ip
   1cf00:	d1e2      	bne.n	1cec8 <arm_nn_mat_mult_kernel_s16+0x358>
   1cf02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1cf04:	9f02      	ldr	r7, [sp, #8]
   1cf06:	e9dd b900 	ldrd	fp, r9, [sp]
   1cf0a:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   1cf0e:	eb07 07ce 	add.w	r7, r7, lr, lsl #3
   1cf12:	930a      	str	r3, [sp, #40]	@ 0x28
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
   1cf14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   1cf16:	f013 0303 	ands.w	r3, r3, #3
   1cf1a:	d00d      	beq.n	1cf38 <arm_nn_mat_mult_kernel_s16+0x3c8>
   1cf1c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
   1cf1e:	4463      	add	r3, ip
        {
            q7_t a0 = *ip_a0++;
   1cf20:	f91c 4b01 	ldrsb.w	r4, [ip], #1
            q15_t b0 = *ip_b0++;
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
   1cf24:	f835 eb02 	ldrh.w	lr, [r5], #2
   1cf28:	fb1e 1104 	smlabb	r1, lr, r4, r1
            ch_0_out_1 += a0 * b1;
   1cf2c:	f837 eb02 	ldrh.w	lr, [r7], #2
        while (col_count)
   1cf30:	459c      	cmp	ip, r3
            ch_0_out_1 += a0 * b1;
   1cf32:	fb1e 2204 	smlabb	r2, lr, r4, r2
        while (col_count)
   1cf36:	d1f3      	bne.n	1cf20 <arm_nn_mat_mult_kernel_s16+0x3b0>
            col_count--;
        }
        if (bias)
   1cf38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
        {
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1cf3a:	f8da 5000 	ldr.w	r5, [sl]
            q63_t acc_64 = ch_0_out_0 + *bias;
            ch_0_out_0 = arm_nn_requantize_s64(acc_64, reduced_multiplier, *out_shift);
   1cf3e:	6804      	ldr	r4, [r0, #0]
        if (bias)
   1cf40:	2b00      	cmp	r3, #0
   1cf42:	f000 80f8 	beq.w	1d136 <arm_nn_mat_mult_kernel_s16+0x5c6>
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1cf46:	4b32      	ldr	r3, [pc, #200]	@ (1d010 <arm_nn_mat_mult_kernel_s16+0x4a0>)
   1cf48:	429d      	cmp	r5, r3
   1cf4a:	f340 80ec 	ble.w	1d126 <arm_nn_mat_mult_kernel_s16+0x5b6>
   1cf4e:	f647 77ff 	movw	r7, #32767	@ 0x7fff
   1cf52:	2000      	movs	r0, #0
            q63_t acc_64 = ch_0_out_0 + *bias;
   1cf54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   1cf56:	9d24      	ldr	r5, [sp, #144]	@ 0x90
   1cf58:	681b      	ldr	r3, [r3, #0]
   1cf5a:	f8d5 c004 	ldr.w	ip, [r5, #4]
   1cf5e:	18cd      	adds	r5, r1, r3
   1cf60:	eb4c 71e1 	adc.w	r1, ip, r1, asr #31
    const q63_t new_val = val * reduced_multiplier;
   1cf64:	fb05 fe00 	mul.w	lr, r5, r0
   1cf68:	fb07 ee01 	mla	lr, r7, r1, lr
   1cf6c:	fba5 1507 	umull	r1, r5, r5, r7
   1cf70:	44ae      	add	lr, r5
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cf72:	f1c4 050e 	rsb	r5, r4, #14
   1cf76:	3412      	adds	r4, #18
   1cf78:	fa0e f804 	lsl.w	r8, lr, r4
   1cf7c:	40e9      	lsrs	r1, r5
   1cf7e:	ea41 0108 	orr.w	r1, r1, r8
   1cf82:	f1b5 0820 	subs.w	r8, r5, #32
   1cf86:	bf5c      	itt	pl
   1cf88:	fa4e f808 	asrpl.w	r8, lr, r8
   1cf8c:	ea41 0108 	orrpl.w	r1, r1, r8
            acc_64 = ch_0_out_1 + *bias++;
   1cf90:	18d3      	adds	r3, r2, r3
   1cf92:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
    const q63_t new_val = val * reduced_multiplier;
   1cf96:	fb03 f000 	mul.w	r0, r3, r0
   1cf9a:	fb07 000c 	mla	r0, r7, ip, r0
   1cf9e:	fba3 3707 	umull	r3, r7, r3, r7
   1cfa2:	4438      	add	r0, r7
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
   1cfa4:	fa23 f205 	lsr.w	r2, r3, r5
   1cfa8:	fa00 f404 	lsl.w	r4, r0, r4
   1cfac:	3d20      	subs	r5, #32
   1cfae:	ea42 0204 	orr.w	r2, r2, r4
   1cfb2:	bf5c      	itt	pl
   1cfb4:	fa40 f505 	asrpl.w	r5, r0, r5
   1cfb8:	432a      	orrpl	r2, r5
    result = (result + 1) >> 1;             // Last shift position and insert round
   1cfba:	3101      	adds	r1, #1
   1cfbc:	3201      	adds	r2, #1
   1cfbe:	104b      	asrs	r3, r1, #1
   1cfc0:	1052      	asrs	r2, r2, #1
        else
        {
            ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
            ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
        }
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1cfc2:	9c05      	ldr	r4, [sp, #20]
   1cfc4:	429c      	cmp	r4, r3
   1cfc6:	4621      	mov	r1, r4
   1cfc8:	bfb8      	it	lt
   1cfca:	4619      	movlt	r1, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
        *out_0++ = (q15_t)ch_0_out_0;

        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1cfcc:	4623      	mov	r3, r4
   1cfce:	4294      	cmp	r4, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cfd0:	9c06      	ldr	r4, [sp, #24]
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1cfd2:	bfb8      	it	lt
   1cfd4:	4613      	movlt	r3, r2
        *out_0++ = (q15_t)ch_0_out_0;
   1cfd6:	4630      	mov	r0, r6
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1cfd8:	428c      	cmp	r4, r1
   1cfda:	4622      	mov	r2, r4
   1cfdc:	bfa8      	it	ge
   1cfde:	460a      	movge	r2, r1
        *out_0++ = (q15_t)ch_0_out_0;
   1cfe0:	f820 2b02 	strh.w	r2, [r0], #2
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1cfe4:	429c      	cmp	r4, r3
   1cfe6:	bfa8      	it	ge
   1cfe8:	461c      	movge	r4, r3
        *out_1++ = (q15_t)ch_0_out_1;
   1cfea:	f8a9 4000 	strh.w	r4, [r9]
        *out_0++ = (q15_t)ch_0_out_0;
   1cfee:	4606      	mov	r6, r0
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
   1cff0:	eb06 000b 	add.w	r0, r6, fp
   1cff4:	b017      	add	sp, #92	@ 0x5c
   1cff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1cffa:	f504 4400 	add.w	r4, r4, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
   1cffe:	1423      	asrs	r3, r4, #16
   1d000:	17e4      	asrs	r4, r4, #31
   1d002:	e6da      	b.n	1cdba <arm_nn_mat_mult_kernel_s16+0x24a>
   1d004:	2100      	movs	r1, #0
   1d006:	f647 76ff 	movw	r6, #32767	@ 0x7fff
   1d00a:	9100      	str	r1, [sp, #0]
   1d00c:	e67f      	b.n	1cd0e <arm_nn_mat_mult_kernel_s16+0x19e>
   1d00e:	bf00      	nop
   1d010:	7ffeffff 	.word	0x7ffeffff
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d014:	ea25 77e5 	bic.w	r7, r5, r5, asr #31
   1d018:	fa03 f107 	lsl.w	r1, r3, r7
   1d01c:	426d      	negs	r5, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d01e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1d022:	465e      	mov	r6, fp
   1d024:	fbc1 3604 	smlal	r3, r6, r1, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d028:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d02c:	2101      	movs	r1, #1
   1d02e:	40a9      	lsls	r1, r5
    result = (int32_t)(mult.long_long >> 31);
   1d030:	0fdb      	lsrs	r3, r3, #31
   1d032:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d036:	3901      	subs	r1, #1
    q31_t threshold = remainder_mask >> 1;
   1d038:	104e      	asrs	r6, r1, #1
    int32_t remainder = remainder_mask & dividend;
   1d03a:	ea03 0c01 	and.w	ip, r3, r1
    if (result < 0)
   1d03e:	412b      	asrs	r3, r5
        threshold++;
   1d040:	bf4c      	ite	mi
   1d042:	f106 0e01 	addmi.w	lr, r6, #1
    q31_t threshold = remainder_mask >> 1;
   1d046:	46b6      	movpl	lr, r6
    if (remainder > threshold)
   1d048:	45f4      	cmp	ip, lr
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d04a:	fa02 f207 	lsl.w	r2, r2, r7
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d04e:	f04f 0c00 	mov.w	ip, #0
   1d052:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
   1d056:	fbc2 7c04 	smlal	r7, ip, r2, r4
    result = (int32_t)(mult.long_long >> 31);
   1d05a:	ea4f 77d7 	mov.w	r7, r7, lsr #31
   1d05e:	ea47 074c 	orr.w	r7, r7, ip, lsl #1
        result++;
   1d062:	bfc8      	it	gt
   1d064:	3301      	addgt	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1d066:	4039      	ands	r1, r7
    if (result < 0)
   1d068:	412f      	asrs	r7, r5
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
   1d06a:	9a05      	ldr	r2, [sp, #20]
        threshold++;
   1d06c:	bf48      	it	mi
   1d06e:	3601      	addmi	r6, #1
    if (remainder > threshold)
   1d070:	42b1      	cmp	r1, r6
        result++;
   1d072:	bfc8      	it	gt
   1d074:	3701      	addgt	r7, #1
   1d076:	4293      	cmp	r3, r2
   1d078:	bfb8      	it	lt
   1d07a:	4613      	movlt	r3, r2
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
   1d07c:	4297      	cmp	r7, r2
   1d07e:	bfb8      	it	lt
   1d080:	4617      	movlt	r7, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1d082:	9a06      	ldr	r2, [sp, #24]
        *out_0++ = (q15_t)ch_0_out_0;
   1d084:	9904      	ldr	r1, [sp, #16]
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
   1d086:	4293      	cmp	r3, r2
   1d088:	bfa8      	it	ge
   1d08a:	4613      	movge	r3, r2
        *out_0++ = (q15_t)ch_0_out_0;
   1d08c:	f821 3c04 	strh.w	r3, [r1, #-4]
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1d090:	4297      	cmp	r7, r2
        *out_1++ = (q15_t)ch_0_out_1;
   1d092:	9b03      	ldr	r3, [sp, #12]
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
   1d094:	bfa8      	it	ge
   1d096:	4617      	movge	r7, r2
        *out_1++ = (q15_t)ch_0_out_1;
   1d098:	f823 7c04 	strh.w	r7, [r3, #-4]
            ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
   1d09c:	9a02      	ldr	r2, [sp, #8]
   1d09e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1d0a2:	f852 cc04 	ldr.w	ip, [r2, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d0a6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   1d0aa:	fa09 f105 	lsl.w	r1, r9, r5
   1d0ae:	425b      	negs	r3, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d0b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1d0b4:	2400      	movs	r4, #0
   1d0b6:	fbc1 240c 	smlal	r2, r4, r1, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d0ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d0be:	2101      	movs	r1, #1
    result = (int32_t)(mult.long_long >> 31);
   1d0c0:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d0c2:	4099      	lsls	r1, r3
    result = (int32_t)(mult.long_long >> 31);
   1d0c4:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d0c8:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
   1d0ca:	ea02 0601 	and.w	r6, r2, r1
    if (result < 0)
   1d0ce:	411a      	asrs	r2, r3
    q31_t threshold = remainder_mask >> 1;
   1d0d0:	ea4f 0461 	mov.w	r4, r1, asr #1
    if (result < 0)
   1d0d4:	d41b      	bmi.n	1d10e <arm_nn_mat_mult_kernel_s16+0x59e>
    q31_t threshold = remainder_mask >> 1;
   1d0d6:	4627      	mov	r7, r4
    if (remainder > threshold)
   1d0d8:	42be      	cmp	r6, r7
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d0da:	fa0a f505 	lsl.w	r5, sl, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d0de:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
   1d0e2:	f04f 0700 	mov.w	r7, #0
   1d0e6:	fbc5 670c 	smlal	r6, r7, r5, ip
    result = (int32_t)(mult.long_long >> 31);
   1d0ea:	ea4f 76d6 	mov.w	r6, r6, lsr #31
   1d0ee:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
    int32_t remainder = remainder_mask & dividend;
   1d0f2:	ea01 0106 	and.w	r1, r1, r6
        result++;
   1d0f6:	bfc8      	it	gt
   1d0f8:	3201      	addgt	r2, #1
    if (result < 0)
   1d0fa:	411e      	asrs	r6, r3
        threshold++;
   1d0fc:	bf48      	it	mi
   1d0fe:	3401      	addmi	r4, #1
    if (remainder > threshold)
   1d100:	42a1      	cmp	r1, r4
        result++;
   1d102:	bfc8      	it	gt
   1d104:	3601      	addgt	r6, #1
            out_mult++;
   1d106:	e691      	b.n	1ce2c <arm_nn_mat_mult_kernel_s16+0x2bc>
        while (col_count)
   1d108:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1d10c:	e5ed      	b.n	1ccea <arm_nn_mat_mult_kernel_s16+0x17a>
        threshold++;
   1d10e:	1c67      	adds	r7, r4, #1
   1d110:	e7e2      	b.n	1d0d8 <arm_nn_mat_mult_kernel_s16+0x568>
        q31_t ch_1_out_1 = 0;
   1d112:	e9dd 730a 	ldrd	r7, r3, [sp, #40]	@ 0x28
        const q15_t *ip_b1 = ip_b0 + num_col_a;
   1d116:	f8dd c030 	ldr.w	ip, [sp, #48]	@ 0x30
        while (col_count)
   1d11a:	f8cd 8004 	str.w	r8, [sp, #4]
        q31_t ch_1_out_1 = 0;
   1d11e:	469a      	mov	sl, r3
        q31_t ch_1_out_0 = 0;
   1d120:	4699      	mov	r9, r3
        q31_t ch_0_out_1 = 0;
   1d122:	461a      	mov	r2, r3
   1d124:	e5c8      	b.n	1ccb8 <arm_nn_mat_mult_kernel_s16+0x148>
            q31_t reduced_multiplier = REDUCE_MULTIPLIER(*out_mult);
   1d126:	f505 4000 	add.w	r0, r5, #32768	@ 0x8000
    const q63_t new_val = val * reduced_multiplier;
   1d12a:	1407      	asrs	r7, r0, #16
   1d12c:	17c0      	asrs	r0, r0, #31
   1d12e:	e711      	b.n	1cf54 <arm_nn_mat_mult_kernel_s16+0x3e4>
        while (col_count)
   1d130:	46c4      	mov	ip, r8
        q31_t ch_0_out_0 = 0;
   1d132:	4611      	mov	r1, r2
   1d134:	e6ee      	b.n	1cf14 <arm_nn_mat_mult_kernel_s16+0x3a4>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d136:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d13a:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d13e:	469c      	mov	ip, r3
   1d140:	9b24      	ldr	r3, [sp, #144]	@ 0x90
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d142:	4081      	lsls	r1, r0
   1d144:	4264      	negs	r4, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d146:	fbc1 c305 	smlal	ip, r3, r1, r5
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d14a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d14e:	2701      	movs	r7, #1
    result = (int32_t)(mult.long_long >> 31);
   1d150:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d154:	40a7      	lsls	r7, r4
    result = (int32_t)(mult.long_long >> 31);
   1d156:	ea4c 0c43 	orr.w	ip, ip, r3, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d15a:	3f01      	subs	r7, #1
    q31_t threshold = remainder_mask >> 1;
   1d15c:	1079      	asrs	r1, r7, #1
    if (result < 0)
   1d15e:	fa5c f304 	asrs.w	r3, ip, r4
    int32_t remainder = remainder_mask & dividend;
   1d162:	ea0c 0e07 	and.w	lr, ip, r7
        threshold++;
   1d166:	bf4c      	ite	mi
   1d168:	f101 0c01 	addmi.w	ip, r1, #1
    q31_t threshold = remainder_mask >> 1;
   1d16c:	468c      	movpl	ip, r1
    if (remainder > threshold)
   1d16e:	45e6      	cmp	lr, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d170:	fa02 f000 	lsl.w	r0, r2, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d174:	f04f 0c00 	mov.w	ip, #0
   1d178:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1d17c:	fbc0 2c05 	smlal	r2, ip, r0, r5
    result = (int32_t)(mult.long_long >> 31);
   1d180:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   1d184:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
    int32_t remainder = remainder_mask & dividend;
   1d188:	ea07 0702 	and.w	r7, r7, r2
        result++;
   1d18c:	bfc8      	it	gt
   1d18e:	3301      	addgt	r3, #1
    if (result < 0)
   1d190:	4122      	asrs	r2, r4
        threshold++;
   1d192:	bf48      	it	mi
   1d194:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1d196:	428f      	cmp	r7, r1
        result++;
   1d198:	bfc8      	it	gt
   1d19a:	3201      	addgt	r2, #1
   1d19c:	e711      	b.n	1cfc2 <arm_nn_mat_mult_kernel_s16+0x452>
   1d19e:	bf00      	nop

0001d1a0 <arm_nn_mat_mult_nt_t_s8>:
                                            const int32_t rhs_cols,
                                            const int32_t lhs_offset,
                                            const int32_t dst_offset,
                                            const int32_t activation_min,
                                            const int32_t activation_max)
{
   1d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1a4:	b0a5      	sub	sp, #148	@ 0x94
   1d1a6:	4699      	mov	r9, r3
   1d1a8:	f8dd b0c4 	ldr.w	fp, [sp, #196]	@ 0xc4
   1d1ac:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
   1d1ae:	f8dd a0cc 	ldr.w	sl, [sp, #204]	@ 0xcc
   1d1b2:	901c      	str	r0, [sp, #112]	@ 0x70
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1d1b4:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
   1d1b8:	f1bb 0f01 	cmp.w	fp, #1
{
   1d1bc:	460d      	mov	r5, r1
   1d1be:	9220      	str	r2, [sp, #128]	@ 0x80
   1d1c0:	992f      	ldr	r1, [sp, #188]	@ 0xbc
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1d1c2:	931d      	str	r3, [sp, #116]	@ 0x74
   1d1c4:	f340 8238 	ble.w	1d638 <arm_nn_mat_mult_nt_t_s8+0x498>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
   1d1c8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
   1d1ca:	9f32      	ldr	r7, [sp, #200]	@ 0xc8

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
   1d1cc:	950f      	str	r5, [sp, #60]	@ 0x3c
        int32_t lhs_rows_idx = lhs_rows >> 1;
   1d1ce:	1058      	asrs	r0, r3, #1
   1d1d0:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
   1d1d2:	3b10      	subs	r3, #16
   1d1d4:	f023 030f 	bic.w	r3, r3, #15
   1d1d8:	3310      	adds	r3, #16
   1d1da:	930e      	str	r3, [sp, #56]	@ 0x38
   1d1dc:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
   1d1de:	1e5e      	subs	r6, r3, #1
   1d1e0:	fb0b f300 	mul.w	r3, fp, r0
   1d1e4:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
   1d1e8:	eb05 0e06 	add.w	lr, r5, r6
   1d1ec:	9614      	str	r6, [sp, #80]	@ 0x50
   1d1ee:	931f      	str	r3, [sp, #124]	@ 0x7c
   1d1f0:	1d26      	adds	r6, r4, #4
   1d1f2:	f06f 0303 	mvn.w	r3, #3
   1d1f6:	1bdb      	subs	r3, r3, r7
   1d1f8:	9607      	str	r6, [sp, #28]
   1d1fa:	1d0e      	adds	r6, r1, #4
   1d1fc:	461a      	mov	r2, r3
   1d1fe:	9606      	str	r6, [sp, #24]
        rhs += 2 * rhs_cols;
   1d200:	007b      	lsls	r3, r7, #1
   1d202:	ea4f 064b 	mov.w	r6, fp, lsl #1
   1d206:	9f30      	ldr	r7, [sp, #192]	@ 0xc0
   1d208:	9612      	str	r6, [sp, #72]	@ 0x48
   1d20a:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
   1d20c:	9321      	str	r3, [sp, #132]	@ 0x84
   1d20e:	f007 0701 	and.w	r7, r7, #1
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1d212:	f04f 0800 	mov.w	r8, #0
   1d216:	e9cd 5922 	strd	r5, r9, [sp, #136]	@ 0x88
   1d21a:	971e      	str	r7, [sp, #120]	@ 0x78
   1d21c:	3604      	adds	r6, #4
   1d21e:	eb09 070b 	add.w	r7, r9, fp
   1d222:	f8dd 9080 	ldr.w	r9, [sp, #128]	@ 0x80
   1d226:	f8dd b0c8 	ldr.w	fp, [sp, #200]	@ 0xc8
   1d22a:	9602      	str	r6, [sp, #8]
   1d22c:	e9cd e815 	strd	lr, r8, [sp, #84]	@ 0x54
   1d230:	469c      	mov	ip, r3
   1d232:	46d0      	mov	r8, sl
   1d234:	4686      	mov	lr, r0
   1d236:	4692      	mov	sl, r2
   1d238:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
        for (int32_t x = 0; x < rhs_cols; ++x)
   1d23a:	f1bb 0f00 	cmp.w	fp, #0
   1d23e:	eba7 0303 	sub.w	r3, r7, r3
   1d242:	9308      	str	r3, [sp, #32]
   1d244:	f340 836d 	ble.w	1d922 <arm_nn_mat_mult_nt_t_s8+0x782>
   1d248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   1d24a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
        q31_t lhs_offset_contribution1 = 0;
   1d24c:	2200      	movs	r2, #0
   1d24e:	3b01      	subs	r3, #1
        for (int32_t x = 0; x < rhs_cols; ++x)
   1d250:	4628      	mov	r0, r5
        q31_t lhs_offset_contribution0 = 0;
   1d252:	4611      	mov	r1, r2
            lhs_offset_contribution0 += rhs[x];
   1d254:	f913 4f01 	ldrsb.w	r4, [r3, #1]!
   1d258:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
   1d25a:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
        for (int32_t x = 0; x < rhs_cols; ++x)
   1d25e:	429d      	cmp	r5, r3
            lhs_offset_contribution1 += rhs[x + rhs_cols];
   1d260:	4422      	add	r2, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
   1d262:	d1f7      	bne.n	1d254 <arm_nn_mat_mult_nt_t_s8+0xb4>
        lhs_offset_contribution0 *= lhs_offset;
   1d264:	fb01 f308 	mul.w	r3, r1, r8
   1d268:	9310      	str	r3, [sp, #64]	@ 0x40
        lhs_offset_contribution1 *= lhs_offset;
   1d26a:	fb02 f308 	mul.w	r3, r2, r8
   1d26e:	9311      	str	r3, [sp, #68]	@ 0x44
        if (bias)
   1d270:	f1b9 0f00 	cmp.w	r9, #0
   1d274:	d00c      	beq.n	1d290 <arm_nn_mat_mult_nt_t_s8+0xf0>
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
   1d276:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1d278:	9911      	ldr	r1, [sp, #68]	@ 0x44
   1d27a:	f109 0304 	add.w	r3, r9, #4
   1d27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d282:	4419      	add	r1, r3
            lhs_offset_contribution0 += bias[rhs_rows_idx];
   1d284:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   1d288:	9a10      	ldr	r2, [sp, #64]	@ 0x40
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
   1d28a:	9111      	str	r1, [sp, #68]	@ 0x44
            lhs_offset_contribution0 += bias[rhs_rows_idx];
   1d28c:	441a      	add	r2, r3
   1d28e:	9210      	str	r2, [sp, #64]	@ 0x40
        while (lhs_rows_idx)
   1d290:	f1be 0f00 	cmp.w	lr, #0
   1d294:	f000 8343 	beq.w	1d91e <arm_nn_mat_mult_nt_t_s8+0x77e>
   1d298:	1c7b      	adds	r3, r7, #1
   1d29a:	930a      	str	r3, [sp, #40]	@ 0x28
   1d29c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
   1d2a0:	e9cd ce17 	strd	ip, lr, [sp, #92]	@ 0x5c
   1d2a4:	4413      	add	r3, r2
   1d2a6:	e9cd 7919 	strd	r7, r9, [sp, #100]	@ 0x64
   1d2aa:	9313      	str	r3, [sp, #76]	@ 0x4c
   1d2ac:	f1ab 0504 	sub.w	r5, fp, #4
   1d2b0:	f10b 0308 	add.w	r3, fp, #8
        const q7_t *lhs_ptr = &lhs[0];
   1d2b4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
   1d2b6:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
        int32_t lhs_rows_idx = lhs_rows >> 1;
   1d2ba:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
   1d2be:	9301      	str	r3, [sp, #4]
   1d2c0:	f8cd 80cc 	str.w	r8, [sp, #204]	@ 0xcc
   1d2c4:	46aa      	mov	sl, r5
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1d2c6:	f1bb 0f0f 	cmp.w	fp, #15
   1d2ca:	f340 821a 	ble.w	1d702 <arm_nn_mat_mult_nt_t_s8+0x562>
   1d2ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            q31_t res10 = lhs_offset_contribution0;
   1d2d0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
            const q7_t *rhs_ptr = &rhs[0];
   1d2d2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
   1d2d4:	18e3      	adds	r3, r4, r3
   1d2d6:	9303      	str	r3, [sp, #12]
            q31_t res11 = lhs_offset_contribution1;
   1d2d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
            q31_t res10 = lhs_offset_contribution0;
   1d2da:	4632      	mov	r2, r6
            q31_t res11 = lhs_offset_contribution1;
   1d2dc:	4619      	mov	r1, r3
    memcpy(&val, *in_q7, 4);
   1d2de:	6838      	ldr	r0, [r7, #0]
   1d2e0:	f8d4 c000 	ldr.w	ip, [r4]
    memcpy(&val, in_q7, 4);
   1d2e4:	f857 500b 	ldr.w	r5, [r7, fp]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d2e8:	fa2f fe80 	sxtb16	lr, r0
   1d2ec:	fa2f f88c 	sxtb16	r8, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d2f0:	fa2f f090 	sxtb16	r0, r0, ror #8
   1d2f4:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d2f8:	fb28 660e 	smlad	r6, r8, lr, r6
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d2fc:	fa2f f985 	sxtb16	r9, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d300:	fb2c 6600 	smlad	r6, ip, r0, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d304:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d308:	fb28 3809 	smlad	r8, r8, r9, r3
   1d30c:	fb2c 8c05 	smlad	ip, ip, r5, r8
   1d310:	f854 300b 	ldr.w	r3, [r4, fp]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d314:	fa2f f883 	sxtb16	r8, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d318:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d31c:	fb28 2e0e 	smlad	lr, r8, lr, r2
   1d320:	fb28 1809 	smlad	r8, r8, r9, r1
   1d324:	fb23 ee00 	smlad	lr, r3, r0, lr
    memcpy(&val, *in_q7, 4);
   1d328:	6878      	ldr	r0, [r7, #4]
   1d32a:	fb23 8105 	smlad	r1, r3, r5, r8
    memcpy(&val, in_q7, 4);
   1d32e:	9b02      	ldr	r3, [sp, #8]
    memcpy(&val, *in_q7, 4);
   1d330:	6862      	ldr	r2, [r4, #4]
    memcpy(&val, in_q7, 4);
   1d332:	58fb      	ldr	r3, [r7, r3]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d334:	fa2f f580 	sxtb16	r5, r0
   1d338:	fa2f f882 	sxtb16	r8, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d33c:	fa2f f090 	sxtb16	r0, r0, ror #8
   1d340:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d344:	fb28 6605 	smlad	r6, r8, r5, r6
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d348:	fa2f f983 	sxtb16	r9, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d34c:	fb22 6600 	smlad	r6, r2, r0, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d350:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d354:	fb28 c809 	smlad	r8, r8, r9, ip
   1d358:	fb22 8c03 	smlad	ip, r2, r3, r8
   1d35c:	9a02      	ldr	r2, [sp, #8]
   1d35e:	58a2      	ldr	r2, [r4, r2]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d360:	fa2f f882 	sxtb16	r8, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d364:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d368:	fb28 e505 	smlad	r5, r8, r5, lr
   1d36c:	fb28 1809 	smlad	r8, r8, r9, r1
   1d370:	fb22 5500 	smlad	r5, r2, r0, r5
    memcpy(&val, *in_q7, 4);
   1d374:	68b9      	ldr	r1, [r7, #8]
   1d376:	fb22 8203 	smlad	r2, r2, r3, r8
    memcpy(&val, in_q7, 4);
   1d37a:	9b01      	ldr	r3, [sp, #4]
    memcpy(&val, *in_q7, 4);
   1d37c:	68a0      	ldr	r0, [r4, #8]
    memcpy(&val, in_q7, 4);
   1d37e:	58fb      	ldr	r3, [r7, r3]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d380:	fa2f f881 	sxtb16	r8, r1
   1d384:	fa2f fe80 	sxtb16	lr, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d388:	fa2f f191 	sxtb16	r1, r1, ror #8
   1d38c:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d390:	fb2e 6608 	smlad	r6, lr, r8, r6
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d394:	fa2f f983 	sxtb16	r9, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d398:	fb20 6601 	smlad	r6, r0, r1, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d39c:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d3a0:	fb2e ce09 	smlad	lr, lr, r9, ip
   1d3a4:	fb20 ee03 	smlad	lr, r0, r3, lr
   1d3a8:	9801      	ldr	r0, [sp, #4]
   1d3aa:	5820      	ldr	r0, [r4, r0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d3ac:	fa2f fc80 	sxtb16	ip, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d3b0:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d3b4:	fb2c 5808 	smlad	r8, ip, r8, r5
   1d3b8:	fb2c 2509 	smlad	r5, ip, r9, r2
   1d3bc:	fb20 8c01 	smlad	ip, r0, r1, r8
    memcpy(&val, *in_q7, 4);
   1d3c0:	68fa      	ldr	r2, [r7, #12]
    *in_q7 += 4;
   1d3c2:	3710      	adds	r7, #16
   1d3c4:	fb20 5003 	smlad	r0, r0, r3, r5
    memcpy(&val, *in_q7, 4);
   1d3c8:	68e3      	ldr	r3, [r4, #12]
    memcpy(&val, in_q7, 4);
   1d3ca:	f857 500a 	ldr.w	r5, [r7, sl]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d3ce:	fa2f f882 	sxtb16	r8, r2
    *in_q7 += 4;
   1d3d2:	3410      	adds	r4, #16
   1d3d4:	fa2f f183 	sxtb16	r1, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d3d8:	fa2f f292 	sxtb16	r2, r2, ror #8
   1d3dc:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d3e0:	fb21 6608 	smlad	r6, r1, r8, r6
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d3e4:	fa2f f985 	sxtb16	r9, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d3e8:	fb23 6602 	smlad	r6, r3, r2, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d3ec:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d3f0:	fb21 e109 	smlad	r1, r1, r9, lr
   1d3f4:	fb23 1305 	smlad	r3, r3, r5, r1
    memcpy(&val, in_q7, 4);
   1d3f8:	f854 100a 	ldr.w	r1, [r4, sl]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d3fc:	fa2f fe81 	sxtb16	lr, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d400:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d404:	fb2e c808 	smlad	r8, lr, r8, ip
   1d408:	fb2e 0e09 	smlad	lr, lr, r9, r0
   1d40c:	fb21 8202 	smlad	r2, r1, r2, r8
   1d410:	fb21 e105 	smlad	r1, r1, r5, lr
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1d414:	9803      	ldr	r0, [sp, #12]
   1d416:	4284      	cmp	r4, r0
   1d418:	f47f af61 	bne.w	1d2de <arm_nn_mat_mult_nt_t_s8+0x13e>
   1d41c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
   1d41e:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d420:	45bb      	cmp	fp, r7
   1d422:	dd1e      	ble.n	1d462 <arm_nn_mat_mult_nt_t_s8+0x2c2>
   1d424:	9c14      	ldr	r4, [sp, #80]	@ 0x50
   1d426:	eb00 0e04 	add.w	lr, r0, r4
   1d42a:	9c03      	ldr	r4, [sp, #12]
   1d42c:	3801      	subs	r0, #1
   1d42e:	ebae 0e07 	sub.w	lr, lr, r7
   1d432:	3c01      	subs	r4, #1
                q7_t rhs_value0 = rhs_ptr[0];
   1d434:	f910 8f01 	ldrsb.w	r8, [r0, #1]!
                q7_t lhs_value = lhs_ptr[0];
   1d438:	f914 5f01 	ldrsb.w	r5, [r4, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
   1d43c:	f910 c00b 	ldrsb.w	ip, [r0, fp]
                res00 += lhs_value * rhs_value0;
   1d440:	fb05 6608 	mla	r6, r5, r8, r6
                res01 += lhs_value * rhs_value1;
   1d444:	fb05 330c 	mla	r3, r5, ip, r3
                lhs_value = lhs_ptr[rhs_cols];
   1d448:	f914 500b 	ldrsb.w	r5, [r4, fp]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d44c:	4586      	cmp	lr, r0
                res10 += lhs_value * rhs_value0;
   1d44e:	fb08 2205 	mla	r2, r8, r5, r2
                res11 += lhs_value * rhs_value1;
   1d452:	fb0c 1105 	mla	r1, ip, r5, r1
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d456:	d1ed      	bne.n	1d434 <arm_nn_mat_mult_nt_t_s8+0x294>
   1d458:	9803      	ldr	r0, [sp, #12]
   1d45a:	ebab 0707 	sub.w	r7, fp, r7
   1d45e:	4438      	add	r0, r7
   1d460:	9003      	str	r0, [sp, #12]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   1d462:	9806      	ldr	r0, [sp, #24]
   1d464:	f850 5c04 	ldr.w	r5, [r0, #-4]
   1d468:	9807      	ldr	r0, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d46a:	ea25 79e5 	bic.w	r9, r5, r5, asr #31
   1d46e:	f850 7c04 	ldr.w	r7, [r0, #-4]
   1d472:	970b      	str	r7, [sp, #44]	@ 0x2c
   1d474:	fa06 f609 	lsl.w	r6, r6, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d478:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
   1d47c:	2000      	movs	r0, #0
   1d47e:	fbc6 4007 	smlal	r4, r0, r6, r7
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d482:	426d      	negs	r5, r5
    result = (int32_t)(mult.long_long >> 31);
   1d484:	0fe4      	lsrs	r4, r4, #31
   1d486:	ea44 0440 	orr.w	r4, r4, r0, lsl #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d48a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d48e:	2001      	movs	r0, #1
   1d490:	fa00 f705 	lsl.w	r7, r0, r5
   1d494:	3f01      	subs	r7, #1
    int32_t remainder = remainder_mask & dividend;
   1d496:	ea04 0007 	and.w	r0, r4, r7
    q31_t threshold = remainder_mask >> 1;
   1d49a:	ea4f 0e67 	mov.w	lr, r7, asr #1
    if (result < 0)
   1d49e:	412c      	asrs	r4, r5
   1d4a0:	9405      	str	r4, [sp, #20]
        threshold++;
   1d4a2:	bf4c      	ite	mi
   1d4a4:	f10e 0401 	addmi.w	r4, lr, #1
    q31_t threshold = remainder_mask >> 1;
   1d4a8:	4674      	movpl	r4, lr
    if (remainder > threshold)
   1d4aa:	42a0      	cmp	r0, r4
   1d4ac:	dd02      	ble.n	1d4b4 <arm_nn_mat_mult_nt_t_s8+0x314>
        result++;
   1d4ae:	9805      	ldr	r0, [sp, #20]
   1d4b0:	3001      	adds	r0, #1
   1d4b2:	9005      	str	r0, [sp, #20]
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   1d4b4:	9806      	ldr	r0, [sp, #24]
   1d4b6:	6804      	ldr	r4, [r0, #0]
   1d4b8:	9807      	ldr	r0, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d4ba:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   1d4be:	6800      	ldr	r0, [r0, #0]
   1d4c0:	900c      	str	r0, [sp, #48]	@ 0x30
   1d4c2:	fa03 f30c 	lsl.w	r3, r3, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d4c6:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
   1d4ca:	2600      	movs	r6, #0
   1d4cc:	fbc3 8600 	smlal	r8, r6, r3, r0
   1d4d0:	4640      	mov	r0, r8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d4d2:	4264      	negs	r4, r4
   1d4d4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d4d8:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1d4da:	0fc0      	lsrs	r0, r0, #31
   1d4dc:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d4e0:	fa03 f604 	lsl.w	r6, r3, r4
   1d4e4:	3e01      	subs	r6, #1
    int32_t remainder = remainder_mask & dividend;
   1d4e6:	ea00 0306 	and.w	r3, r0, r6
   1d4ea:	930d      	str	r3, [sp, #52]	@ 0x34
    q31_t threshold = remainder_mask >> 1;
   1d4ec:	1073      	asrs	r3, r6, #1
    if (result < 0)
   1d4ee:	4120      	asrs	r0, r4
    q31_t threshold = remainder_mask >> 1;
   1d4f0:	9304      	str	r3, [sp, #16]
        threshold++;
   1d4f2:	bf4c      	ite	mi
   1d4f4:	f103 0801 	addmi.w	r8, r3, #1
    q31_t threshold = remainder_mask >> 1;
   1d4f8:	f8dd 8010 	ldrpl.w	r8, [sp, #16]
    if (remainder > threshold)
   1d4fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   1d4fe:	4543      	cmp	r3, r8
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d500:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d502:	fa02 f209 	lsl.w	r2, r2, r9
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d506:	f04f 4880 	mov.w	r8, #1073741824	@ 0x40000000
   1d50a:	f04f 0900 	mov.w	r9, #0
   1d50e:	fbc2 8903 	smlal	r8, r9, r2, r3
   1d512:	4643      	mov	r3, r8
    result = (int32_t)(mult.long_long >> 31);
   1d514:	ea4f 73d3 	mov.w	r3, r3, lsr #31
   1d518:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
   1d51c:	ea07 0703 	and.w	r7, r7, r3
        result++;
   1d520:	bfc8      	it	gt
   1d522:	3001      	addgt	r0, #1
    if (result < 0)
   1d524:	412b      	asrs	r3, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d526:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d528:	fa01 fc0c 	lsl.w	ip, r1, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d52c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
   1d530:	f04f 0100 	mov.w	r1, #0
   1d534:	fbcc 2105 	smlal	r2, r1, ip, r5
        threshold++;
   1d538:	bf48      	it	mi
   1d53a:	f10e 0e01 	addmi.w	lr, lr, #1
    result = (int32_t)(mult.long_long >> 31);
   1d53e:	0fd2      	lsrs	r2, r2, #31
    if (remainder > threshold)
   1d540:	4577      	cmp	r7, lr
    result = (int32_t)(mult.long_long >> 31);
   1d542:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
        result++;
   1d546:	bfc8      	it	gt
   1d548:	3301      	addgt	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1d54a:	4016      	ands	r6, r2
    if (result < 0)
   1d54c:	4122      	asrs	r2, r4
   1d54e:	d502      	bpl.n	1d556 <arm_nn_mat_mult_nt_t_s8+0x3b6>
        threshold++;
   1d550:	9904      	ldr	r1, [sp, #16]
   1d552:	3101      	adds	r1, #1
   1d554:	9104      	str	r1, [sp, #16]
    if (remainder > threshold)
   1d556:	9904      	ldr	r1, [sp, #16]
            res00 += dst_offset;
   1d558:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
   1d55a:	428e      	cmp	r6, r1
   1d55c:	9905      	ldr	r1, [sp, #20]
        result++;
   1d55e:	bfc8      	it	gt
   1d560:	3201      	addgt	r2, #1
   1d562:	4421      	add	r1, r4
            res01 += dst_offset;
   1d564:	4420      	add	r0, r4
            res10 += dst_offset;
   1d566:	4423      	add	r3, r4
            res11 += dst_offset;
   1d568:	4422      	add	r2, r4
            res00 = MAX(res00, activation_min);
   1d56a:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
   1d56c:	42a1      	cmp	r1, r4
   1d56e:	bfb8      	it	lt
   1d570:	4621      	movlt	r1, r4
            res01 = MAX(res01, activation_min);
   1d572:	42a0      	cmp	r0, r4
   1d574:	bfb8      	it	lt
   1d576:	4620      	movlt	r0, r4
            res10 = MAX(res10, activation_min);
   1d578:	42a3      	cmp	r3, r4
   1d57a:	bfb8      	it	lt
   1d57c:	4623      	movlt	r3, r4
            res11 = MAX(res11, activation_min);
   1d57e:	42a2      	cmp	r2, r4
   1d580:	bfb8      	it	lt
   1d582:	4622      	movlt	r2, r4
            res00 = MIN(res00, activation_max);
   1d584:	9c36      	ldr	r4, [sp, #216]	@ 0xd8
   1d586:	42a1      	cmp	r1, r4
   1d588:	bfa8      	it	ge
   1d58a:	4621      	movge	r1, r4
            dst_ptr[0] = (q7_t)res00;
   1d58c:	9c08      	ldr	r4, [sp, #32]
   1d58e:	7021      	strb	r1, [r4, #0]
            res01 = MIN(res01, activation_max);
   1d590:	9936      	ldr	r1, [sp, #216]	@ 0xd8
   1d592:	4288      	cmp	r0, r1
   1d594:	bfa8      	it	ge
   1d596:	4608      	movge	r0, r1
            dst_ptr[1] = (q7_t)res01;
   1d598:	7060      	strb	r0, [r4, #1]
            res10 = MIN(res10, activation_max);
   1d59a:	9836      	ldr	r0, [sp, #216]	@ 0xd8
   1d59c:	4283      	cmp	r3, r0
   1d59e:	bfa8      	it	ge
   1d5a0:	4603      	movge	r3, r0
            dst_ptr[0] = (q7_t)res10;
   1d5a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1d5a4:	f800 3c01 	strb.w	r3, [r0, #-1]
            res11 = MIN(res11, activation_max);
   1d5a8:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
   1d5aa:	429a      	cmp	r2, r3
   1d5ac:	bfa8      	it	ge
   1d5ae:	461a      	movge	r2, r3
            dst_ptr[1] = (q7_t)res11;
   1d5b0:	7002      	strb	r2, [r0, #0]
            dst_ptr += rhs_rows;
   1d5b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
            dst_ptr[1] = (q7_t)res11;
   1d5b4:	4603      	mov	r3, r0
        while (lhs_rows_idx)
   1d5b6:	4413      	add	r3, r2
   1d5b8:	930a      	str	r3, [sp, #40]	@ 0x28
   1d5ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
            dst_ptr[1] = (q7_t)res01;
   1d5bc:	4621      	mov	r1, r4
            lhs_ptr += rhs_cols;
   1d5be:	9c03      	ldr	r4, [sp, #12]
   1d5c0:	4411      	add	r1, r2
        while (lhs_rows_idx)
   1d5c2:	3b01      	subs	r3, #1
   1d5c4:	9108      	str	r1, [sp, #32]
            lhs_ptr += rhs_cols;
   1d5c6:	445c      	add	r4, fp
        while (lhs_rows_idx)
   1d5c8:	9309      	str	r3, [sp, #36]	@ 0x24
   1d5ca:	f47f ae7c 	bne.w	1d2c6 <arm_nn_mat_mult_nt_t_s8+0x126>
   1d5ce:	e9dd 7919 	ldrd	r7, r9, [sp, #100]	@ 0x64
   1d5d2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
   1d5d4:	f8dd 80cc 	ldr.w	r8, [sp, #204]	@ 0xcc
   1d5d8:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
   1d5dc:	e9dd ce17 	ldrd	ip, lr, [sp, #92]	@ 0x5c
   1d5e0:	443b      	add	r3, r7
   1d5e2:	9308      	str	r3, [sp, #32]
        if (lhs_rows % 2)
   1d5e4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
   1d5e6:	2b00      	cmp	r3, #0
   1d5e8:	f040 8093 	bne.w	1d712 <arm_nn_mat_mult_nt_t_s8+0x572>
        rhs += 2 * rhs_cols;
   1d5ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1d5ee:	9b16      	ldr	r3, [sp, #88]	@ 0x58
        rhs += 2 * rhs_cols;
   1d5f0:	4462      	add	r2, ip
   1d5f2:	920f      	str	r2, [sp, #60]	@ 0x3c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
   1d5f4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   1d5f6:	4462      	add	r2, ip
   1d5f8:	9215      	str	r2, [sp, #84]	@ 0x54
   1d5fa:	9a07      	ldr	r2, [sp, #28]
   1d5fc:	3208      	adds	r2, #8
   1d5fe:	9207      	str	r2, [sp, #28]
   1d600:	9a06      	ldr	r2, [sp, #24]
   1d602:	3208      	adds	r2, #8
   1d604:	9206      	str	r2, [sp, #24]
   1d606:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   1d608:	3302      	adds	r3, #2
   1d60a:	4293      	cmp	r3, r2
   1d60c:	9316      	str	r3, [sp, #88]	@ 0x58
   1d60e:	f107 0702 	add.w	r7, r7, #2
   1d612:	f6ff ae11 	blt.w	1d238 <arm_nn_mat_mult_nt_t_s8+0x98>
   1d616:	f8dd b0c4 	ldr.w	fp, [sp, #196]	@ 0xc4
   1d61a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
   1d61c:	e9dd 5922 	ldrd	r5, r9, [sp, #136]	@ 0x88
   1d620:	f1ab 0302 	sub.w	r3, fp, #2
   1d624:	085b      	lsrs	r3, r3, #1
   1d626:	e9dd 412e 	ldrd	r4, r1, [sp, #184]	@ 0xb8
   1d62a:	fb03 2202 	mla	r2, r3, r2, r2
   1d62e:	3301      	adds	r3, #1
   1d630:	46c2      	mov	sl, r8
   1d632:	4415      	add	r5, r2
   1d634:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        dst += 2;
    }

    if (rhs_rows % 2)
   1d638:	f01b 0f01 	tst.w	fp, #1
   1d63c:	d05d      	beq.n	1d6fa <arm_nn_mat_mult_nt_t_s8+0x55a>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1d63e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
   1d640:	2b00      	cmp	r3, #0
   1d642:	dd5a      	ble.n	1d6fa <arm_nn_mat_mult_nt_t_s8+0x55a>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
   1d644:	9a20      	ldr	r2, [sp, #128]	@ 0x80
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d646:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
   1d64a:	f10b 4380 	add.w	r3, fp, #1073741824	@ 0x40000000
   1d64e:	3b01      	subs	r3, #1
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   1d650:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1d654:	2000      	movs	r0, #0
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   1d656:	eb01 0483 	add.w	r4, r1, r3, lsl #2
   1d65a:	f8dd b0c8 	ldr.w	fp, [sp, #200]	@ 0xc8
   1d65e:	9501      	str	r5, [sp, #4]
                res00 = bias[rhs_rows - 1];
   1d660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1d664:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   1d666:	9302      	str	r3, [sp, #8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d668:	f04f 4e80 	mov.w	lr, #1073741824	@ 0x40000000
   1d66c:	4680      	mov	r8, r0
            if (bias)
   1d66e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   1d670:	2b00      	cmp	r3, #0
   1d672:	f000 815a 	beq.w	1d92a <arm_nn_mat_mult_nt_t_s8+0x78a>
                res00 = bias[rhs_rows - 1];
   1d676:	9b02      	ldr	r3, [sp, #8]
   1d678:	6819      	ldr	r1, [r3, #0]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d67a:	f1bb 0f00 	cmp.w	fp, #0
   1d67e:	dd0c      	ble.n	1d69a <arm_nn_mat_mult_nt_t_s8+0x4fa>
   1d680:	9b01      	ldr	r3, [sp, #4]
   1d682:	eb02 070b 	add.w	r7, r2, fp
   1d686:	1e5d      	subs	r5, r3, #1
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1d688:	f912 3b01 	ldrsb.w	r3, [r2], #1
                q31_t rhs_value = rhs_ptr[0];
   1d68c:	f915 6f01 	ldrsb.w	r6, [r5, #1]!
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
   1d690:	4453      	add	r3, sl
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d692:	42ba      	cmp	r2, r7
                res00 += lhs_value * rhs_value;
   1d694:	fb06 1103 	mla	r1, r6, r3, r1
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d698:	d1f6      	bne.n	1d688 <arm_nn_mat_mult_nt_t_s8+0x4e8>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
   1d69a:	6825      	ldr	r5, [r4, #0]
   1d69c:	f8dc 3000 	ldr.w	r3, [ip]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d6a0:	ea25 76e5 	bic.w	r6, r5, r5, asr #31
   1d6a4:	fa01 f606 	lsl.w	r6, r1, r6
   1d6a8:	426d      	negs	r5, r5
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d6aa:	4671      	mov	r1, lr
   1d6ac:	4647      	mov	r7, r8
   1d6ae:	fbc6 1703 	smlal	r1, r7, r6, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d6b2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d6b6:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1d6b8:	0fc9      	lsrs	r1, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d6ba:	40ab      	lsls	r3, r5
    result = (int32_t)(mult.long_long >> 31);
   1d6bc:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d6c0:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
   1d6c2:	ea01 0603 	and.w	r6, r1, r3
    if (result < 0)
   1d6c6:	4129      	asrs	r1, r5
    q31_t threshold = remainder_mask >> 1;
   1d6c8:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1d6cc:	bf48      	it	mi
   1d6ce:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1d6d0:	429e      	cmp	r6, r3

            // Add offset
            res00 += dst_offset;
   1d6d2:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
        result++;
   1d6d4:	bfc8      	it	gt
   1d6d6:	3101      	addgt	r1, #1
   1d6d8:	440b      	add	r3, r1

            // Clamp the result
            res00 = MAX(res00, activation_min);
   1d6da:	9935      	ldr	r1, [sp, #212]	@ 0xd4
   1d6dc:	428b      	cmp	r3, r1
   1d6de:	bfb8      	it	lt
   1d6e0:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
   1d6e2:	9936      	ldr	r1, [sp, #216]	@ 0xd8
   1d6e4:	428b      	cmp	r3, r1
   1d6e6:	bfa8      	it	ge
   1d6e8:	460b      	movge	r3, r1

            dst_ptr[0] = (q7_t)res00;
   1d6ea:	f889 3000 	strb.w	r3, [r9]
            dst_ptr += rhs_rows;
   1d6ee:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
   1d6f0:	4499      	add	r9, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
   1d6f2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
   1d6f4:	3001      	adds	r0, #1
   1d6f6:	4283      	cmp	r3, r0
   1d6f8:	d1b9      	bne.n	1d66e <arm_nn_mat_mult_nt_t_s8+0x4ce>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
}
   1d6fa:	2000      	movs	r0, #0
   1d6fc:	b025      	add	sp, #148	@ 0x94
   1d6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            q31_t res11 = lhs_offset_contribution1;
   1d702:	9b11      	ldr	r3, [sp, #68]	@ 0x44
            q31_t res10 = lhs_offset_contribution0;
   1d704:	9e10      	ldr	r6, [sp, #64]	@ 0x40
            const q7_t *rhs_ptr = &rhs[0];
   1d706:	980f      	ldr	r0, [sp, #60]	@ 0x3c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1d708:	9403      	str	r4, [sp, #12]
            q31_t res11 = lhs_offset_contribution1;
   1d70a:	4619      	mov	r1, r3
            q31_t res10 = lhs_offset_contribution0;
   1d70c:	4632      	mov	r2, r6
            int32_t rhs_cols_idx = 0;
   1d70e:	2700      	movs	r7, #0
   1d710:	e686      	b.n	1d420 <arm_nn_mat_mult_nt_t_s8+0x280>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1d712:	f1bb 0f0f 	cmp.w	fp, #15
   1d716:	f340 810a 	ble.w	1d92e <arm_nn_mat_mult_nt_t_s8+0x78e>
   1d71a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   1d71c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1d71e:	f8cd c004 	str.w	ip, [sp, #4]
   1d722:	18a6      	adds	r6, r4, r2
   1d724:	e9cd 7904 	strd	r7, r9, [sp, #16]
   1d728:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	@ 0x40
   1d72c:	3305      	adds	r3, #5
   1d72e:	f8cd e00c 	str.w	lr, [sp, #12]
   1d732:	f8cd b0c8 	str.w	fp, [sp, #200]	@ 0xc8
    memcpy(&val, *in_q7, 4);
   1d736:	f85a e003 	ldr.w	lr, [sl, r3]
    memcpy(&val, in_q7, 4);
   1d73a:	f853 5c04 	ldr.w	r5, [r3, #-4]
    memcpy(&val, *in_q7, 4);
   1d73e:	6820      	ldr	r0, [r4, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d740:	fa2f fb8e 	sxtb16	fp, lr
   1d744:	eb0a 0703 	add.w	r7, sl, r3
   1d748:	fa2f fc80 	sxtb16	ip, r0
   1d74c:	fa2f f985 	sxtb16	r9, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d750:	fa2f fe9e 	sxtb16	lr, lr, ror #8
   1d754:	fa2f f090 	sxtb16	r0, r0, ror #8
   1d758:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d75c:	fb2c 1b0b 	smlad	fp, ip, fp, r1
   1d760:	fb20 b10e 	smlad	r1, r0, lr, fp
   1d764:	fb2c 2c09 	smlad	ip, ip, r9, r2
   1d768:	fb20 c005 	smlad	r0, r0, r5, ip
   1d76c:	687d      	ldr	r5, [r7, #4]
    memcpy(&val, in_q7, 4);
   1d76e:	f8d3 c000 	ldr.w	ip, [r3]
    memcpy(&val, *in_q7, 4);
   1d772:	6862      	ldr	r2, [r4, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d774:	fa2f fb85 	sxtb16	fp, r5
   1d778:	fa2f fe82 	sxtb16	lr, r2
   1d77c:	fa2f f98c 	sxtb16	r9, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d780:	fa2f f595 	sxtb16	r5, r5, ror #8
   1d784:	fa2f f292 	sxtb16	r2, r2, ror #8
   1d788:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d78c:	fb2e 1b0b 	smlad	fp, lr, fp, r1
   1d790:	fb22 b505 	smlad	r5, r2, r5, fp
   1d794:	fb2e 0e09 	smlad	lr, lr, r9, r0
   1d798:	fb22 e20c 	smlad	r2, r2, ip, lr
   1d79c:	f8d7 9008 	ldr.w	r9, [r7, #8]
    memcpy(&val, in_q7, 4);
   1d7a0:	f8d3 e004 	ldr.w	lr, [r3, #4]
    memcpy(&val, *in_q7, 4);
   1d7a4:	f8d4 c008 	ldr.w	ip, [r4, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d7a8:	fa2f f089 	sxtb16	r0, r9
   1d7ac:	fa2f f18c 	sxtb16	r1, ip
   1d7b0:	fa2f fb8e 	sxtb16	fp, lr
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d7b4:	fa2f f999 	sxtb16	r9, r9, ror #8
   1d7b8:	fa2f fc9c 	sxtb16	ip, ip, ror #8
   1d7bc:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d7c0:	fb21 5000 	smlad	r0, r1, r0, r5
   1d7c4:	fb2c 0009 	smlad	r0, ip, r9, r0
   1d7c8:	fb21 210b 	smlad	r1, r1, fp, r2
   1d7cc:	fb2c 150e 	smlad	r5, ip, lr, r1
   1d7d0:	68f9      	ldr	r1, [r7, #12]
   1d7d2:	68e2      	ldr	r2, [r4, #12]
    memcpy(&val, in_q7, 4);
   1d7d4:	689f      	ldr	r7, [r3, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
   1d7d6:	fa2f f981 	sxtb16	r9, r1
    *in_q7 += 4;
   1d7da:	3410      	adds	r4, #16
   1d7dc:	fa2f fc82 	sxtb16	ip, r2
   1d7e0:	fa2f fe87 	sxtb16	lr, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
   1d7e4:	fa2f f191 	sxtb16	r1, r1, ror #8
   1d7e8:	fa2f f292 	sxtb16	r2, r2, ror #8
   1d7ec:	fa2f f797 	sxtb16	r7, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
   1d7f0:	fb2c 0909 	smlad	r9, ip, r9, r0
   1d7f4:	fb22 9101 	smlad	r1, r2, r1, r9
   1d7f8:	fb2c 5c0e 	smlad	ip, ip, lr, r5
   1d7fc:	fb22 c207 	smlad	r2, r2, r7, ip
   1d800:	42b4      	cmp	r4, r6
   1d802:	f103 0310 	add.w	r3, r3, #16
   1d806:	d196      	bne.n	1d736 <arm_nn_mat_mult_nt_t_s8+0x596>
   1d808:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
   1d80c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
   1d810:	e9dd 7904 	ldrd	r7, r9, [sp, #16]
   1d814:	f8dd c004 	ldr.w	ip, [sp, #4]
   1d818:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1d81c:	f8dd b0c8 	ldr.w	fp, [sp, #200]	@ 0xc8
   1d820:	441a      	add	r2, r3
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d822:	459b      	cmp	fp, r3
   1d824:	dd19      	ble.n	1d85a <arm_nn_mat_mult_nt_t_s8+0x6ba>
   1d826:	ebab 0303 	sub.w	r3, fp, r3
   1d82a:	18f4      	adds	r4, r6, r3
   1d82c:	e9dd 0510 	ldrd	r0, r5, [sp, #64]	@ 0x40
   1d830:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   1d832:	f8cd c004 	str.w	ip, [sp, #4]
   1d836:	1e51      	subs	r1, r2, #1
   1d838:	441a      	add	r2, r3
                q7_t lhs_value = lhs_ptr[0];
   1d83a:	f916 3b01 	ldrsb.w	r3, [r6], #1
                res00 += lhs_value * rhs_value0;
   1d83e:	f911 cf01 	ldrsb.w	ip, [r1, #1]!
   1d842:	fb13 000c 	smlabb	r0, r3, ip, r0
                res01 += lhs_value * rhs_value1;
   1d846:	f912 cf01 	ldrsb.w	ip, [r2, #1]!
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d84a:	42a6      	cmp	r6, r4
                res01 += lhs_value * rhs_value1;
   1d84c:	fb13 550c 	smlabb	r5, r3, ip, r5
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
   1d850:	d1f3      	bne.n	1d83a <arm_nn_mat_mult_nt_t_s8+0x69a>
   1d852:	e9cd 0510 	strd	r0, r5, [sp, #64]	@ 0x40
   1d856:	f8dd c004 	ldr.w	ip, [sp, #4]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
   1d85a:	9b06      	ldr	r3, [sp, #24]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d85c:	9810      	ldr	r0, [sp, #64]	@ 0x40
   1d85e:	f853 2c04 	ldr.w	r2, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d862:	9b07      	ldr	r3, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d864:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d868:	f853 3c04 	ldr.w	r3, [r3, #-4]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d86c:	4088      	lsls	r0, r1
   1d86e:	4601      	mov	r1, r0
   1d870:	4252      	negs	r2, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d872:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
   1d876:	2000      	movs	r0, #0
   1d878:	fbc1 4003 	smlal	r4, r0, r1, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d87c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d880:	2301      	movs	r3, #1
    result = (int32_t)(mult.long_long >> 31);
   1d882:	0fe1      	lsrs	r1, r4, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d884:	4093      	lsls	r3, r2
    result = (int32_t)(mult.long_long >> 31);
   1d886:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d88a:	3b01      	subs	r3, #1
    if (result < 0)
   1d88c:	fa51 f502 	asrs.w	r5, r1, r2
    int32_t remainder = remainder_mask & dividend;
   1d890:	ea01 0003 	and.w	r0, r1, r3
    q31_t threshold = remainder_mask >> 1;
   1d894:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
   1d898:	bf48      	it	mi
   1d89a:	3301      	addmi	r3, #1
    if (remainder > threshold)
   1d89c:	4298      	cmp	r0, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
   1d89e:	9b06      	ldr	r3, [sp, #24]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d8a0:	9811      	ldr	r0, [sp, #68]	@ 0x44
   1d8a2:	681a      	ldr	r2, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d8a4:	9b07      	ldr	r3, [sp, #28]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d8a6:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d8aa:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d8ac:	fa00 f001 	lsl.w	r0, r0, r1
   1d8b0:	4601      	mov	r1, r0
   1d8b2:	f1c2 0200 	rsb	r2, r2, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
   1d8b6:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
   1d8ba:	f04f 0000 	mov.w	r0, #0
   1d8be:	fbc1 4003 	smlal	r4, r0, r1, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
   1d8c2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d8c6:	f04f 0101 	mov.w	r1, #1
   1d8ca:	fa01 f102 	lsl.w	r1, r1, r2
    result = (int32_t)(mult.long_long >> 31);
   1d8ce:	ea4f 73d4 	mov.w	r3, r4, lsr #31
   1d8d2:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
   1d8d6:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1d8da:	ea03 0001 	and.w	r0, r3, r1
        result++;
   1d8de:	bfc8      	it	gt
   1d8e0:	3501      	addgt	r5, #1
    q31_t threshold = remainder_mask >> 1;
   1d8e2:	1049      	asrs	r1, r1, #1
    if (result < 0)
   1d8e4:	4113      	asrs	r3, r2
        threshold++;
   1d8e6:	bf48      	it	mi
   1d8e8:	3101      	addmi	r1, #1
    if (remainder > threshold)
   1d8ea:	4288      	cmp	r0, r1
            res01 += dst_offset;
   1d8ec:	9934      	ldr	r1, [sp, #208]	@ 0xd0
            res00 += dst_offset;
   1d8ee:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
        result++;
   1d8f0:	bfc8      	it	gt
   1d8f2:	3301      	addgt	r3, #1
            res01 += dst_offset;
   1d8f4:	440b      	add	r3, r1
            res00 = MAX(res00, activation_min);
   1d8f6:	9935      	ldr	r1, [sp, #212]	@ 0xd4
            res00 += dst_offset;
   1d8f8:	442a      	add	r2, r5
            res00 = MAX(res00, activation_min);
   1d8fa:	428a      	cmp	r2, r1
   1d8fc:	bfb8      	it	lt
   1d8fe:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
   1d900:	428b      	cmp	r3, r1
   1d902:	bfb8      	it	lt
   1d904:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
   1d906:	9936      	ldr	r1, [sp, #216]	@ 0xd8
   1d908:	428a      	cmp	r2, r1
   1d90a:	bfa8      	it	ge
   1d90c:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
   1d90e:	9908      	ldr	r1, [sp, #32]
   1d910:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
   1d912:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
   1d914:	4293      	cmp	r3, r2
   1d916:	bfa8      	it	ge
   1d918:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
   1d91a:	704b      	strb	r3, [r1, #1]
   1d91c:	e666      	b.n	1d5ec <arm_nn_mat_mult_nt_t_s8+0x44c>
        const q7_t *lhs_ptr = &lhs[0];
   1d91e:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
   1d920:	e660      	b.n	1d5e4 <arm_nn_mat_mult_nt_t_s8+0x444>
        for (int32_t x = 0; x < rhs_cols; ++x)
   1d922:	2300      	movs	r3, #0
   1d924:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
   1d928:	e4a2      	b.n	1d270 <arm_nn_mat_mult_nt_t_s8+0xd0>
            q31_t res00 = 0;
   1d92a:	9920      	ldr	r1, [sp, #128]	@ 0x80
   1d92c:	e6a5      	b.n	1d67a <arm_nn_mat_mult_nt_t_s8+0x4da>
            const q7_t *rhs_ptr = &rhs[0];
   1d92e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
   1d930:	4626      	mov	r6, r4
            int32_t rhs_cols_idx = 0;
   1d932:	2300      	movs	r3, #0
   1d934:	e775      	b.n	1d822 <arm_nn_mat_mult_nt_t_s8+0x682>
   1d936:	bf00      	nop

0001d938 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
   1d938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
   1d93c:	eac3 4603 	pkhbt	r6, r3, r3, lsl #16
    while (block_cnt > 0)
   1d940:	ea5f 0892 	movs.w	r8, r2, lsr #2
   1d944:	d025      	beq.n	1d992 <arm_q7_to_q15_with_offset+0x5a>
   1d946:	eb00 0588 	add.w	r5, r0, r8, lsl #2
   1d94a:	460c      	mov	r4, r1
    memcpy(&val, *in_q7, 4);
   1d94c:	f850 cb04 	ldr.w	ip, [r0], #4
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1d950:	fa26 fe8c 	sxtab16	lr, r6, ip
    *dest_q15 += 2;
   1d954:	3408      	adds	r4, #8
   1d956:	4285      	cmp	r5, r0
  return (op1 >> op2) | (op1 << (32U - op2));
   1d958:	ea4f 2c3c 	mov.w	ip, ip, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
   1d95c:	fa26 fc8c 	sxtab16	ip, r6, ip

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
   1d960:	eacc 472e 	pkhtb	r7, ip, lr, asr #16
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
   1d964:	eace 4e0c 	pkhbt	lr, lr, ip, lsl #16
    memcpy(*dest_q15, &val, 4);
   1d968:	f844 7c04 	str.w	r7, [r4, #-4]
   1d96c:	f844 ec08 	str.w	lr, [r4, #-8]
    while (block_cnt > 0)
   1d970:	d1ec      	bne.n	1d94c <arm_q7_to_q15_with_offset+0x14>
   1d972:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
   1d976:	f012 0203 	ands.w	r2, r2, #3
   1d97a:	d008      	beq.n	1d98e <arm_q7_to_q15_with_offset+0x56>
    {
        *dst++ = (q15_t)*src++ + offset;
   1d97c:	b29b      	uxth	r3, r3
   1d97e:	442a      	add	r2, r5
   1d980:	f915 0b01 	ldrsb.w	r0, [r5], #1
   1d984:	4418      	add	r0, r3
    while (block_cnt > 0)
   1d986:	4295      	cmp	r5, r2
        *dst++ = (q15_t)*src++ + offset;
   1d988:	f821 0b02 	strh.w	r0, [r1], #2
    while (block_cnt > 0)
   1d98c:	d1f8      	bne.n	1d980 <arm_q7_to_q15_with_offset+0x48>

        /* Decrement the loop counter */
        block_cnt--;
    }
}
   1d98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (block_cnt > 0)
   1d992:	4605      	mov	r5, r0
   1d994:	e7ef      	b.n	1d976 <arm_q7_to_q15_with_offset+0x3e>
   1d996:	bf00      	nop

0001d998 <arm_nn_softmax_common_s8>:
                              const int32_t mult,
                              const int32_t shift,
                              const int32_t diff_min,
                              const bool int16_output,
                              void *output)
{
   1d998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d99c:	b09d      	sub	sp, #116	@ 0x74
   1d99e:	9302      	str	r3, [sp, #8]
   1d9a0:	f89d 30a0 	ldrb.w	r3, [sp, #160]	@ 0xa0
   1d9a4:	931a      	str	r3, [sp, #104]	@ 0x68
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   1d9a6:	1e0b      	subs	r3, r1, #0
   1d9a8:	931b      	str	r3, [sp, #108]	@ 0x6c
   1d9aa:	f340 8467 	ble.w	1e27c <arm_nn_softmax_common_s8+0x8e4>
   1d9ae:	4693      	mov	fp, r2
   1d9b0:	1e53      	subs	r3, r2, #1
   1d9b2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
    q63_t mult = 1 << 30;
   1d9b4:	f8df c38c 	ldr.w	ip, [pc, #908]	@ 1dd44 <arm_nn_softmax_common_s8+0x3ac>
   1d9b8:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
   1d9bc:	18c3      	adds	r3, r0, r3
   1d9be:	9301      	str	r3, [sp, #4]
   1d9c0:	3a01      	subs	r2, #1
   1d9c2:	1e43      	subs	r3, r0, #1
   1d9c4:	f04f 0a00 	mov.w	sl, #0
   1d9c8:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
   1d9cc:	4699      	mov	r9, r3
   1d9ce:	4693      	mov	fp, r2
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;

        for (col = 1; col < row_size; ++col)
   1d9d0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
        int8_t max = *input;
   1d9d2:	f999 e001 	ldrsb.w	lr, [r9, #1]
        for (col = 1; col < row_size; ++col)
   1d9d6:	2a01      	cmp	r2, #1
   1d9d8:	f109 0301 	add.w	r3, r9, #1
   1d9dc:	f340 84da 	ble.w	1e394 <arm_nn_softmax_common_s8+0x9fc>
   1d9e0:	9901      	ldr	r1, [sp, #4]
        {
            max = MAX(max, input[col]);
   1d9e2:	f913 2f01 	ldrsb.w	r2, [r3, #1]!
   1d9e6:	4596      	cmp	lr, r2
   1d9e8:	bfb8      	it	lt
   1d9ea:	4696      	movlt	lr, r2
        for (col = 1; col < row_size; ++col)
   1d9ec:	428b      	cmp	r3, r1
   1d9ee:	d1f8      	bne.n	1d9e2 <arm_nn_softmax_common_s8+0x4a>
        }

        int32_t diff = 0;
        int32_t sum = 0;
   1d9f0:	2300      	movs	r3, #0
   1d9f2:	e9cd 3e03 	strd	r3, lr, [sp, #12]
   1d9f6:	e9cd 9b11 	strd	r9, fp, [sp, #68]	@ 0x44

            bits_over_unit = ACCUM_BITS - headroom + 23;

            for (col = 0; col < row_size; ++col)
            {
                diff = input[col] - max;
   1d9fa:	464e      	mov	r6, r9
   1d9fc:	e086      	b.n	1db0c <arm_nn_softmax_common_s8+0x174>
    result = (int32_t)(mult / (1ll << 31));
   1d9fe:	48c6      	ldr	r0, [pc, #792]	@ (1dd18 <arm_nn_softmax_common_s8+0x380>)
   1da00:	fbc3 2400 	smlal	r2, r4, r3, r0
   1da04:	2c00      	cmp	r4, #0
   1da06:	da05      	bge.n	1da14 <arm_nn_softmax_common_s8+0x7c>
   1da08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1da0c:	18d3      	adds	r3, r2, r3
   1da0e:	461a      	mov	r2, r3
   1da10:	f144 0400 	adc.w	r4, r4, #0
   1da14:	0fd2      	lsrs	r2, r2, #31
   1da16:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    int32_t result = 1895147668 +
   1da1a:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
    mult = mult + (q63_t)m1 * m2;
   1da1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1da22:	2000      	movs	r0, #0
   1da24:	4cbd      	ldr	r4, [pc, #756]	@ (1dd1c <arm_nn_softmax_common_s8+0x384>)
    SELECT_IF_NON_ZERO(1672461947)
   1da26:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
    int32_t result = 1895147668 +
   1da28:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
   1da2c:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
    mult = mult + (q63_t)m1 * m2;
   1da30:	4699      	mov	r9, r3
   1da32:	4680      	mov	r8, r0
   1da34:	fbc2 9804 	smlal	r9, r8, r2, r4
   1da38:	464c      	mov	r4, r9
    result = (int32_t)(mult / (1ll << 31));
   1da3a:	0fe4      	lsrs	r4, r4, #31
   1da3c:	ea44 0448 	orr.w	r4, r4, r8, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   1da40:	4015      	ands	r5, r2
   1da42:	fb04 fe0e 	mul.w	lr, r4, lr
    SELECT_IF_NON_ZERO(1302514674)
   1da46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
    SELECT_IF_NON_ZERO(1672461947)
   1da48:	ea8e 0e05 	eor.w	lr, lr, r5
    SELECT_IF_NON_ZERO(1302514674)
   1da4c:	ea02 040e 	and.w	r4, r2, lr
    mult = mult + (q63_t)m1 * m2;
   1da50:	4ab3      	ldr	r2, [pc, #716]	@ (1dd20 <arm_nn_softmax_common_s8+0x388>)
   1da52:	4698      	mov	r8, r3
   1da54:	4605      	mov	r5, r0
   1da56:	fbce 8502 	smlal	r8, r5, lr, r2
   1da5a:	4642      	mov	r2, r8
    result = (int32_t)(mult / (1ll << 31));
   1da5c:	0fd2      	lsrs	r2, r2, #31
   1da5e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   1da62:	fb02 f707 	mul.w	r7, r2, r7
    mult = mult + (q63_t)m1 * m2;
   1da66:	4aaf      	ldr	r2, [pc, #700]	@ (1dd24 <arm_nn_softmax_common_s8+0x38c>)
    SELECT_IF_NON_ZERO(1302514674)
   1da68:	4067      	eors	r7, r4
    mult = mult + (q63_t)m1 * m2;
   1da6a:	469e      	mov	lr, r3
   1da6c:	4605      	mov	r5, r0
   1da6e:	fbc7 e502 	smlal	lr, r5, r7, r2
   1da72:	4672      	mov	r2, lr
    SELECT_IF_NON_ZERO(790015084)
   1da74:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
    result = (int32_t)(mult / (1ll << 31));
   1da76:	0fd2      	lsrs	r2, r2, #31
   1da78:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   1da7c:	403c      	ands	r4, r7
   1da7e:	fb02 f101 	mul.w	r1, r2, r1
    mult = mult + (q63_t)m1 * m2;
   1da82:	4fa9      	ldr	r7, [pc, #676]	@ (1dd28 <arm_nn_softmax_common_s8+0x390>)
    SELECT_IF_NON_ZERO(790015084)
   1da84:	4061      	eors	r1, r4
    mult = mult + (q63_t)m1 * m2;
   1da86:	461a      	mov	r2, r3
   1da88:	4605      	mov	r5, r0
    SELECT_IF_NON_ZERO(290630308)
   1da8a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
    mult = mult + (q63_t)m1 * m2;
   1da8c:	fbc1 2507 	smlal	r2, r5, r1, r7
    SELECT_IF_NON_ZERO(290630308)
   1da90:	400c      	ands	r4, r1
    result = (int32_t)(mult / (1ll << 31));
   1da92:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(290630308)
   1da94:	9906      	ldr	r1, [sp, #24]
    mult = mult + (q63_t)m1 * m2;
   1da96:	4fa5      	ldr	r7, [pc, #660]	@ (1dd2c <arm_nn_softmax_common_s8+0x394>)
    result = (int32_t)(mult / (1ll << 31));
   1da98:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   1da9c:	fb02 f101 	mul.w	r1, r2, r1
   1daa0:	460a      	mov	r2, r1
   1daa2:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
   1daa4:	4619      	mov	r1, r3
   1daa6:	4605      	mov	r5, r0
    SELECT_IF_NON_ZERO(39332535)
   1daa8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
    mult = mult + (q63_t)m1 * m2;
   1daaa:	fbc2 1507 	smlal	r1, r5, r2, r7
    SELECT_IF_NON_ZERO(39332535)
   1daae:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   1dab0:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(39332535)
   1dab2:	9a08      	ldr	r2, [sp, #32]
    mult = mult + (q63_t)m1 * m2;
   1dab4:	4f9e      	ldr	r7, [pc, #632]	@ (1dd30 <arm_nn_softmax_common_s8+0x398>)
    result = (int32_t)(mult / (1ll << 31));
   1dab6:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   1daba:	fb01 f202 	mul.w	r2, r1, r2
   1dabe:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
   1dac0:	4619      	mov	r1, r3
   1dac2:	4605      	mov	r5, r0
    SELECT_IF_NON_ZERO(720401)
   1dac4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
    mult = mult + (q63_t)m1 * m2;
   1dac6:	fbc2 1507 	smlal	r1, r5, r2, r7
    SELECT_IF_NON_ZERO(720401)
   1daca:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   1dacc:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(720401)
   1dace:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    result = (int32_t)(mult / (1ll << 31));
   1dad0:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(720401)
   1dad4:	fb01 f202 	mul.w	r2, r1, r2
   1dad8:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
   1dada:	21f2      	movs	r1, #242	@ 0xf2
    SELECT_IF_NON_ZERO(242)
   1dadc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
    mult = mult + (q63_t)m1 * m2;
   1dade:	fbc2 3001 	smlal	r3, r0, r2, r1
    SELECT_IF_NON_ZERO(242)
   1dae2:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   1dae4:	0fdb      	lsrs	r3, r3, #31
    SELECT_IF_NON_ZERO(242)
   1dae6:	9a05      	ldr	r2, [sp, #20]
    result = (int32_t)(mult / (1ll << 31));
   1dae8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
   1daec:	fb03 f202 	mul.w	r2, r3, r2
   1daf0:	4613      	mov	r3, r2
   1daf2:	4063      	eors	r3, r4
    if (remainder > threshold)
   1daf4:	051c      	lsls	r4, r3, #20
    result = dividend >> exponent;
   1daf6:	ea4f 3223 	mov.w	r2, r3, asr #12
    if (remainder > threshold)
   1dafa:	f100 8441 	bmi.w	1e380 <arm_nn_softmax_common_s8+0x9e8>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
   1dafe:	9b03      	ldr	r3, [sp, #12]
   1db00:	4413      	add	r3, r2
   1db02:	9303      	str	r3, [sp, #12]
        for (col = 0; col < row_size; ++col)
   1db04:	9b01      	ldr	r3, [sp, #4]
   1db06:	429e      	cmp	r6, r3
   1db08:	f000 8122 	beq.w	1dd50 <arm_nn_softmax_common_s8+0x3b8>
            diff = input[col] - max;
   1db0c:	9a04      	ldr	r2, [sp, #16]
   1db0e:	f916 3f01 	ldrsb.w	r3, [r6, #1]!
   1db12:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
   1db14:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   1db16:	429a      	cmp	r2, r3
   1db18:	dcf4      	bgt.n	1db04 <arm_nn_softmax_common_s8+0x16c>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
   1db1a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
    if ((m1 < 0) ^ (m2 < 0))
   1db1c:	9902      	ldr	r1, [sp, #8]
   1db1e:	4093      	lsls	r3, r2
   1db20:	ea81 0203 	eor.w	r2, r1, r3
    q63_t mult = 1 << 30;
   1db24:	2a00      	cmp	r2, #0
   1db26:	bfb5      	itete	lt
   1db28:	4660      	movlt	r0, ip
   1db2a:	f04f 4080 	movge.w	r0, #1073741824	@ 0x40000000
   1db2e:	f04f 32ff 	movlt.w	r2, #4294967295	@ 0xffffffff
   1db32:	2200      	movge	r2, #0
    result = (int32_t)(mult / (1ll << 31));
   1db34:	fbc1 0203 	smlal	r0, r2, r1, r3
   1db38:	2a00      	cmp	r2, #0
   1db3a:	da04      	bge.n	1db46 <arm_nn_softmax_common_s8+0x1ae>
   1db3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   1db40:	1840      	adds	r0, r0, r1
   1db42:	f142 0200 	adc.w	r2, r2, #0
   1db46:	0fc0      	lsrs	r0, r0, #31
   1db48:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   1db4c:	9a02      	ldr	r2, [sp, #8]
   1db4e:	429a      	cmp	r2, r3
   1db50:	f000 80bb 	beq.w	1dcca <arm_nn_softmax_common_s8+0x332>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   1db54:	f040 417f 	orr.w	r1, r0, #4278190080	@ 0xff000000
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   1db58:	014c      	lsls	r4, r1, #5
    const int32_t remainder = val_mod_minus_quarter - val;
   1db5a:	1a09      	subs	r1, r1, r0
    SELECT_IF_NON_ZERO(39332535)
   1db5c:	f3c1 7200 	ubfx	r2, r1, #28, #1
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   1db60:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
    mult = mult + (q63_t)m1 * m2;
   1db64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1db68:	f04f 0b00 	mov.w	fp, #0
    SELECT_IF_NON_ZERO(720401)
   1db6c:	f3c1 7540 	ubfx	r5, r1, #29, #1
    result = (int32_t)(mult / (1ll << 31));
   1db70:	fbc4 3b04 	smlal	r3, fp, r4, r4
    SELECT_IF_NON_ZERO(39332535)
   1db74:	9208      	str	r2, [sp, #32]
   1db76:	3a01      	subs	r2, #1
   1db78:	9210      	str	r2, [sp, #64]	@ 0x40
    result = (int32_t)(mult / (1ll << 31));
   1db7a:	f1bb 0f00 	cmp.w	fp, #0
   1db7e:	f105 32ff 	add.w	r2, r5, #4294967295	@ 0xffffffff
    SELECT_IF_NON_ZERO(720401)
   1db82:	950e      	str	r5, [sp, #56]	@ 0x38
   1db84:	920f      	str	r2, [sp, #60]	@ 0x3c
    result = (int32_t)(mult / (1ll << 31));
   1db86:	da05      	bge.n	1db94 <arm_nn_softmax_common_s8+0x1fc>
   1db88:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   1db8c:	189a      	adds	r2, r3, r2
   1db8e:	4613      	mov	r3, r2
   1db90:	f14b 0b00 	adc.w	fp, fp, #0
   1db94:	0fdb      	lsrs	r3, r3, #31
   1db96:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    mult = mult + (q63_t)m1 * m2;
   1db9a:	fba3 2703 	umull	r2, r7, r3, r3
    result = (int32_t)(mult / (1ll << 31));
   1db9e:	ea4f 7beb 	mov.w	fp, fp, asr #31
    mult = mult + (q63_t)m1 * m2;
   1dba2:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
   1dba6:	fb03 fe0b 	mul.w	lr, r3, fp
    result = (int32_t)(mult / (1ll << 31));
   1dbaa:	eb47 074e 	adc.w	r7, r7, lr, lsl #1
   1dbae:	2f00      	cmp	r7, #0
   1dbb0:	9307      	str	r3, [sp, #28]
   1dbb2:	da06      	bge.n	1dbc2 <arm_nn_softmax_common_s8+0x22a>
   1dbb4:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
   1dbb8:	eb12 0e0e 	adds.w	lr, r2, lr
   1dbbc:	4672      	mov	r2, lr
   1dbbe:	f147 0700 	adc.w	r7, r7, #0
    SELECT_IF_NON_ZERO(242)
   1dbc2:	f3c1 7580 	ubfx	r5, r1, #30, #1
    result = (int32_t)(mult / (1ll << 31));
   1dbc6:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(242)
   1dbc8:	9505      	str	r5, [sp, #20]
    result = (int32_t)(mult / (1ll << 31));
   1dbca:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   1dbce:	f3c1 6ec0 	ubfx	lr, r1, #27, #1
   1dbd2:	9d05      	ldr	r5, [sp, #20]
   1dbd4:	f8cd e018 	str.w	lr, [sp, #24]
    mult = mult + (q63_t)m1 * m2;
   1dbd8:	17e7      	asrs	r7, r4, #31
   1dbda:	fb04 fb0b 	mul.w	fp, r4, fp
   1dbde:	fb03 bb07 	mla	fp, r3, r7, fp
    if ((m1 < 0) ^ (m2 < 0))
   1dbe2:	ea83 0a04 	eor.w	sl, r3, r4
    mult = mult + (q63_t)m1 * m2;
   1dbe6:	fba4 8303 	umull	r8, r3, r4, r3
   1dbea:	445b      	add	r3, fp
   1dbec:	f105 3bff 	add.w	fp, r5, #4294967295	@ 0xffffffff
   1dbf0:	9d06      	ldr	r5, [sp, #24]
   1dbf2:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
    SELECT_IF_NON_ZERO(1302514674)
   1dbf6:	f3c1 6740 	ubfx	r7, r1, #25, #1
   1dbfa:	3d01      	subs	r5, #1
    SELECT_IF_NON_ZERO(1672461947)
   1dbfc:	f3c1 6e00 	ubfx	lr, r1, #24, #1
   1dc00:	950c      	str	r5, [sp, #48]	@ 0x30
   1dc02:	1e7d      	subs	r5, r7, #1
    SELECT_IF_NON_ZERO(790015084)
   1dc04:	f3c1 6180 	ubfx	r1, r1, #26, #1
   1dc08:	950d      	str	r5, [sp, #52]	@ 0x34
   1dc0a:	f10e 35ff 	add.w	r5, lr, #4294967295	@ 0xffffffff
    q31_t threshold = remainder_mask >> 1;
   1dc0e:	ea5f 09a2 	movs.w	r9, r2, asr #2
   1dc12:	950a      	str	r5, [sp, #40]	@ 0x28
   1dc14:	f101 35ff 	add.w	r5, r1, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1dc18:	f002 0203 	and.w	r2, r2, #3
   1dc1c:	950b      	str	r5, [sp, #44]	@ 0x2c
    q31_t threshold = remainder_mask >> 1;
   1dc1e:	bf4c      	ite	mi
   1dc20:	f04f 0b02 	movmi.w	fp, #2
   1dc24:	f04f 0b01 	movpl.w	fp, #1
    if (remainder > threshold)
   1dc28:	4593      	cmp	fp, r2
        result++;
   1dc2a:	bfb8      	it	lt
   1dc2c:	f109 0901 	addlt.w	r9, r9, #1
    q63_t mult = 1 << 30;
   1dc30:	f1ba 0f00 	cmp.w	sl, #0
   1dc34:	bfb5      	itete	lt
   1dc36:	4662      	movlt	r2, ip
   1dc38:	f04f 4280 	movge.w	r2, #1073741824	@ 0x40000000
   1dc3c:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
   1dc40:	f04f 0a00 	movge.w	sl, #0
    mult = mult + (q63_t)m1 * m2;
   1dc44:	eb12 0208 	adds.w	r2, r2, r8
    result = (int32_t)(mult / (1ll << 31));
   1dc48:	eb43 0a0a 	adc.w	sl, r3, sl
   1dc4c:	f1ba 0f00 	cmp.w	sl, #0
   1dc50:	da05      	bge.n	1dc5e <arm_nn_softmax_common_s8+0x2c6>
   1dc52:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1dc56:	18d3      	adds	r3, r2, r3
   1dc58:	461a      	mov	r2, r3
   1dc5a:	f14a 0a00 	adc.w	sl, sl, #0
   1dc5e:	0fd2      	lsrs	r2, r2, #31
    if ((m1 < 0) ^ (m2 < 0))
   1dc60:	4b34      	ldr	r3, [pc, #208]	@ (1dd34 <arm_nn_softmax_common_s8+0x39c>)
    result = (int32_t)(mult / (1ll << 31));
   1dc62:	4d34      	ldr	r5, [pc, #208]	@ (1dd34 <arm_nn_softmax_common_s8+0x39c>)
   1dc64:	ea42 024a 	orr.w	r2, r2, sl, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1dc68:	444a      	add	r2, r9
    if ((m1 < 0) ^ (m2 < 0))
   1dc6a:	4053      	eors	r3, r2
    q63_t mult = 1 << 30;
   1dc6c:	2b00      	cmp	r3, #0
   1dc6e:	bfb5      	itete	lt
   1dc70:	4663      	movlt	r3, ip
   1dc72:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
   1dc76:	f04f 38ff 	movlt.w	r8, #4294967295	@ 0xffffffff
   1dc7a:	f04f 0800 	movge.w	r8, #0
    result = (int32_t)(mult / (1ll << 31));
   1dc7e:	fbc2 3805 	smlal	r3, r8, r2, r5
   1dc82:	f1b8 0f00 	cmp.w	r8, #0
   1dc86:	da05      	bge.n	1dc94 <arm_nn_softmax_common_s8+0x2fc>
   1dc88:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   1dc8c:	189a      	adds	r2, r3, r2
   1dc8e:	4613      	mov	r3, r2
   1dc90:	f148 0800 	adc.w	r8, r8, #0
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1dc94:	9d07      	ldr	r5, [sp, #28]
    result = (int32_t)(mult / (1ll << 31));
   1dc96:	0fdb      	lsrs	r3, r3, #31
   1dc98:	ea43 0348 	orr.w	r3, r3, r8, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1dc9c:	441d      	add	r5, r3
    if (result < 0)
   1dc9e:	106b      	asrs	r3, r5, #1
   1dca0:	d402      	bmi.n	1dca8 <arm_nn_softmax_common_s8+0x310>
    if (remainder > threshold)
   1dca2:	07ed      	lsls	r5, r5, #31
        result++;
   1dca4:	bf48      	it	mi
   1dca6:	3301      	addmi	r3, #1
    if ((m1 < 0) ^ (m2 < 0))
   1dca8:	4a1b      	ldr	r2, [pc, #108]	@ (1dd18 <arm_nn_softmax_common_s8+0x380>)
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1dcaa:	4423      	add	r3, r4
    if ((m1 < 0) ^ (m2 < 0))
   1dcac:	405a      	eors	r2, r3
    q63_t mult = 1 << 30;
   1dcae:	2a00      	cmp	r2, #0
   1dcb0:	bfb5      	itete	lt
   1dcb2:	4662      	movlt	r2, ip
   1dcb4:	f04f 4280 	movge.w	r2, #1073741824	@ 0x40000000
   1dcb8:	f04f 34ff 	movlt.w	r4, #4294967295	@ 0xffffffff
   1dcbc:	2400      	movge	r4, #0
    mask = MASK_IF_ZERO(val);
   1dcbe:	2800      	cmp	r0, #0
   1dcc0:	f47f ae9d 	bne.w	1d9fe <arm_nn_softmax_common_s8+0x66>
   1dcc4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
        result++;
   1dcc8:	e719      	b.n	1dafe <arm_nn_softmax_common_s8+0x166>
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   1dcca:	9b02      	ldr	r3, [sp, #8]
   1dccc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
   1dcd0:	f47f af40 	bne.w	1db54 <arm_nn_softmax_common_s8+0x1bc>
   1dcd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   1dcd8:	2200      	movs	r2, #0
   1dcda:	4b17      	ldr	r3, [pc, #92]	@ (1dd38 <arm_nn_softmax_common_s8+0x3a0>)
   1dcdc:	9110      	str	r1, [sp, #64]	@ 0x40
   1dcde:	460d      	mov	r5, r1
   1dce0:	e9cd 210e 	strd	r2, r1, [sp, #56]	@ 0x38
   1dce4:	e9cd 2108 	strd	r2, r1, [sp, #32]
   1dce8:	9307      	str	r3, [sp, #28]
   1dcea:	910c      	str	r1, [sp, #48]	@ 0x30
   1dcec:	910d      	str	r1, [sp, #52]	@ 0x34
   1dcee:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
   1dcf2:	4c12      	ldr	r4, [pc, #72]	@ (1dd3c <arm_nn_softmax_common_s8+0x3a4>)
   1dcf4:	f8df a050 	ldr.w	sl, [pc, #80]	@ 1dd48 <arm_nn_softmax_common_s8+0x3b0>
   1dcf8:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 1dd4c <arm_nn_softmax_common_s8+0x3b4>
   1dcfc:	4b10      	ldr	r3, [pc, #64]	@ (1dd40 <arm_nn_softmax_common_s8+0x3a8>)
   1dcfe:	9205      	str	r2, [sp, #20]
        result = NN_Q31_MAX;
   1dd00:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   1dd04:	f44f 3900 	mov.w	r9, #131072	@ 0x20000
   1dd08:	4617      	mov	r7, r2
   1dd0a:	9206      	str	r2, [sp, #24]
   1dd0c:	4611      	mov	r1, r2
   1dd0e:	4696      	mov	lr, r2
    q31_t threshold = remainder_mask >> 1;
   1dd10:	f04f 0b01 	mov.w	fp, #1
   1dd14:	e788      	b.n	1dc28 <arm_nn_softmax_common_s8+0x290>
   1dd16:	bf00      	nop
   1dd18:	70f5a894 	.word	0x70f5a894
   1dd1c:	63afbe7b 	.word	0x63afbe7b
   1dd20:	4da2cbf2 	.word	0x4da2cbf2
   1dd24:	2f16ac6c 	.word	0x2f16ac6c
   1dd28:	1152aaa4 	.word	0x1152aaa4
   1dd2c:	02582ab7 	.word	0x02582ab7
   1dd30:	000afe11 	.word	0x000afe11
   1dd34:	2aaaaaab 	.word	0x2aaaaaab
   1dd38:	01fffff8 	.word	0x01fffff8
   1dd3c:	0fffffe0 	.word	0x0fffffe0
   1dd40:	001fffff 	.word	0x001fffff
   1dd44:	c0000001 	.word	0xc0000001
   1dd48:	0e000018 	.word	0x0e000018
   1dd4c:	40000100 	.word	0x40000100
  if (value == 0U)
   1dd50:	9b03      	ldr	r3, [sp, #12]
   1dd52:	f8dd e010 	ldr.w	lr, [sp, #16]
   1dd56:	2b00      	cmp	r3, #0
   1dd58:	e9dd 9b11 	ldrd	r9, fp, [sp, #68]	@ 0x44
   1dd5c:	f000 831c 	beq.w	1e398 <arm_nn_softmax_common_s8+0xa00>
  return __builtin_clz(value);
   1dd60:	fab3 f883 	clz	r8, r3
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
   1dd64:	f340 82b8 	ble.w	1e2d8 <arm_nn_softmax_common_s8+0x940>
   1dd68:	fa03 f208 	lsl.w	r2, r3, r8
   1dd6c:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   1dd70:	f112 4300 	adds.w	r3, r2, #2147483648	@ 0x80000000
    const int64_t sum = (int64_t)val + (int64_t)NN_Q31_MAX;
   1dd74:	ea4f 72e2 	mov.w	r2, r2, asr #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   1dd78:	f142 0200 	adc.w	r2, r2, #0
   1dd7c:	085b      	lsrs	r3, r3, #1
   1dd7e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    mult = mult + (q63_t)m1 * m2;
   1dd82:	486e      	ldr	r0, [pc, #440]	@ (1df3c <arm_nn_softmax_common_s8+0x5a4>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   1dd84:	1052      	asrs	r2, r2, #1
    mult = mult + (q63_t)m1 * m2;
   1dd86:	425c      	negs	r4, r3
   1dd88:	fb00 4402 	mla	r4, r0, r2, r4
   1dd8c:	fba3 1000 	umull	r1, r0, r3, r0
   1dd90:	eb11 010c 	adds.w	r1, r1, ip
   1dd94:	4420      	add	r0, r4
    result = (int32_t)(mult / (1ll << 31));
   1dd96:	f160 0000 	sbc.w	r0, r0, #0
   1dd9a:	2800      	cmp	r0, #0
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
   1dd9c:	461d      	mov	r5, r3
    result = (int32_t)(mult / (1ll << 31));
   1dd9e:	da05      	bge.n	1ddac <arm_nn_softmax_common_s8+0x414>
   1dda0:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
   1dda4:	190c      	adds	r4, r1, r4
   1dda6:	4621      	mov	r1, r4
   1dda8:	f140 0000 	adc.w	r0, r0, #0
   1ddac:	0fc9      	lsrs	r1, r1, #31
   1ddae:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
   1ddb2:	f101 315a 	add.w	r1, r1, #1515870810	@ 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
   1ddb6:	17c8      	asrs	r0, r1, #31
   1ddb8:	fb01 f602 	mul.w	r6, r1, r2
   1ddbc:	fb03 6600 	mla	r6, r3, r0, r6
   1ddc0:	fba1 0403 	umull	r0, r4, r1, r3
   1ddc4:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
   1ddc8:	eb46 0404 	adc.w	r4, r6, r4
    result = (int32_t)(mult / (1ll << 31));
   1ddcc:	0fc0      	lsrs	r0, r0, #31
   1ddce:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1ddd2:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   1ddd6:	ea91 0f00 	teq	r1, r0
    mult = mult + (q63_t)m1 * m2;
   1ddda:	fb81 6700 	smull	r6, r7, r1, r0
    if ((m1 < 0) ^ (m2 < 0))
   1ddde:	f140 8285 	bpl.w	1e2ec <arm_nn_softmax_common_s8+0x954>
        mult = 1 - mult;
   1dde2:	4660      	mov	r0, ip
   1dde4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   1dde8:	1980      	adds	r0, r0, r6
    result = (int32_t)(mult / (1ll << 31));
   1ddea:	eb44 0407 	adc.w	r4, r4, r7
   1ddee:	2c00      	cmp	r4, #0
   1ddf0:	da05      	bge.n	1ddfe <arm_nn_softmax_common_s8+0x466>
   1ddf2:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
   1ddf6:	1986      	adds	r6, r0, r6
   1ddf8:	4630      	mov	r0, r6
   1ddfa:	f144 0400 	adc.w	r4, r4, #0
   1ddfe:	0fc0      	lsrs	r0, r0, #31
   1de00:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1de04:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
   1de08:	ea85 0001 	eor.w	r0, r5, r1
    q63_t mult = 1 << 30;
   1de0c:	2800      	cmp	r0, #0
    mult = mult + (q63_t)m1 * m2;
   1de0e:	fb01 f402 	mul.w	r4, r1, r2
   1de12:	ea4f 70e1 	mov.w	r0, r1, asr #31
   1de16:	fb03 4400 	mla	r4, r3, r0, r4
    q63_t mult = 1 << 30;
   1de1a:	bfb8      	it	lt
   1de1c:	4666      	movlt	r6, ip
    mult = mult + (q63_t)m1 * m2;
   1de1e:	fba1 0a03 	umull	r0, sl, r1, r3
    q63_t mult = 1 << 30;
   1de22:	bfaa      	itet	ge
   1de24:	f04f 4680 	movge.w	r6, #1073741824	@ 0x40000000
   1de28:	f04f 37ff 	movlt.w	r7, #4294967295	@ 0xffffffff
   1de2c:	2700      	movge	r7, #0
    mult = mult + (q63_t)m1 * m2;
   1de2e:	4454      	add	r4, sl
   1de30:	1980      	adds	r0, r0, r6
    result = (int32_t)(mult / (1ll << 31));
   1de32:	eb44 0407 	adc.w	r4, r4, r7
   1de36:	2c00      	cmp	r4, #0
   1de38:	f2c0 82a5 	blt.w	1e386 <arm_nn_softmax_common_s8+0x9ee>
   1de3c:	0fc0      	lsrs	r0, r0, #31
   1de3e:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1de42:	f1c0 5400 	rsb	r4, r0, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   1de46:	ea81 0004 	eor.w	r0, r1, r4
    q63_t mult = 1 << 30;
   1de4a:	2800      	cmp	r0, #0
   1de4c:	bfb5      	itete	lt
   1de4e:	4660      	movlt	r0, ip
   1de50:	f04f 4080 	movge.w	r0, #1073741824	@ 0x40000000
   1de54:	f04f 36ff 	movlt.w	r6, #4294967295	@ 0xffffffff
   1de58:	2600      	movge	r6, #0
    result = (int32_t)(mult / (1ll << 31));
   1de5a:	fbc1 0604 	smlal	r0, r6, r1, r4
   1de5e:	2e00      	cmp	r6, #0
   1de60:	da05      	bge.n	1de6e <arm_nn_softmax_common_s8+0x4d6>
   1de62:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
   1de66:	1904      	adds	r4, r0, r4
   1de68:	4620      	mov	r0, r4
   1de6a:	f146 0600 	adc.w	r6, r6, #0
   1de6e:	0fc0      	lsrs	r0, r0, #31
   1de70:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1de74:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
   1de78:	f280 823c 	bge.w	1e2f4 <arm_nn_softmax_common_s8+0x95c>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   1de7c:	f1b0 4f60 	cmp.w	r0, #3758096384	@ 0xe0000000
   1de80:	f300 82c3 	bgt.w	1e40a <arm_nn_softmax_common_s8+0xa72>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1de84:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
    mult = mult + (q63_t)m1 * m2;
   1de88:	17c1      	asrs	r1, r0, #31
    if ((m1 < 0) ^ (m2 < 0))
   1de8a:	ea95 0f00 	teq	r5, r0
    mult = mult + (q63_t)m1 * m2;
   1de8e:	fb03 f401 	mul.w	r4, r3, r1
    if ((m1 < 0) ^ (m2 < 0))
   1de92:	f100 82a3 	bmi.w	1e3dc <arm_nn_softmax_common_s8+0xa44>
    mult = mult + (q63_t)m1 * m2;
   1de96:	fb00 4202 	mla	r2, r0, r2, r4
   1de9a:	fba3 3400 	umull	r3, r4, r3, r0
   1de9e:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
    result = (int32_t)(mult / (1ll << 31));
   1dea2:	eb42 0404 	adc.w	r4, r2, r4
   1dea6:	2c00      	cmp	r4, #0
   1dea8:	da05      	bge.n	1deb6 <arm_nn_softmax_common_s8+0x51e>
   1deaa:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   1deae:	189a      	adds	r2, r3, r2
   1deb0:	4613      	mov	r3, r2
   1deb2:	f144 0400 	adc.w	r4, r4, #0
   1deb6:	0fdb      	lsrs	r3, r3, #31
   1deb8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1debc:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
    mult = mult + (q63_t)m1 * m2;
   1dec0:	fb03 f101 	mul.w	r1, r3, r1
   1dec4:	17da      	asrs	r2, r3, #31
   1dec6:	fb00 1102 	mla	r1, r0, r2, r1
   1deca:	fba3 3200 	umull	r3, r2, r3, r0
   1dece:	eb13 030c 	adds.w	r3, r3, ip
   1ded2:	440a      	add	r2, r1
    result = (int32_t)(mult / (1ll << 31));
   1ded4:	f162 0200 	sbc.w	r2, r2, #0
   1ded8:	2a00      	cmp	r2, #0
   1deda:	da05      	bge.n	1dee8 <arm_nn_softmax_common_s8+0x550>
   1dedc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   1dee0:	1859      	adds	r1, r3, r1
   1dee2:	460b      	mov	r3, r1
   1dee4:	f142 0200 	adc.w	r2, r2, #0
   1dee8:	0fdb      	lsrs	r3, r3, #31
   1deea:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   1deee:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
   1def2:	f300 829e 	bgt.w	1e432 <arm_nn_softmax_common_s8+0xa9a>
    int32_t result = val << exp;
   1def6:	0042      	lsls	r2, r0, #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1def8:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
    int32_t result = val << exp;
   1defc:	9212      	str	r2, [sp, #72]	@ 0x48
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   1defe:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
   1df02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   1df04:	bfd8      	it	le
   1df06:	f04f 4300 	movle.w	r3, #2147483648	@ 0x80000000
   1df0a:	9312      	str	r3, [sp, #72]	@ 0x48
        if (int16_output)
   1df0c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   1df0e:	2b00      	cmp	r3, #0
   1df10:	f040 81b4 	bne.w	1e27c <arm_nn_softmax_common_s8+0x8e4>
            for (col = 0; col < row_size; ++col)
   1df14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
            bits_over_unit = ACCUM_BITS - headroom + 23;
   1df16:	f1c8 0223 	rsb	r2, r8, #35	@ 0x23
            for (col = 0; col < row_size; ++col)
   1df1a:	2b00      	cmp	r3, #0
            bits_over_unit = ACCUM_BITS - headroom + 23;
   1df1c:	9213      	str	r2, [sp, #76]	@ 0x4c
            for (col = 0; col < row_size; ++col)
   1df1e:	f340 81a0 	ble.w	1e262 <arm_nn_softmax_common_s8+0x8ca>
    const q31_t remainder_mask = (1 << exponent) - 1;
   1df22:	2301      	movs	r3, #1
   1df24:	4093      	lsls	r3, r2
   1df26:	3b01      	subs	r3, #1
   1df28:	9314      	str	r3, [sp, #80]	@ 0x50
    q31_t threshold = remainder_mask >> 1;
   1df2a:	105b      	asrs	r3, r3, #1
                diff = input[col] - max;
   1df2c:	e9cd 9b18 	strd	r9, fp, [sp, #96]	@ 0x60
   1df30:	9315      	str	r3, [sp, #84]	@ 0x54
   1df32:	46ca      	mov	sl, r9
   1df34:	f8cd e018 	str.w	lr, [sp, #24]
   1df38:	e182      	b.n	1e240 <arm_nn_softmax_common_s8+0x8a8>
   1df3a:	bf00      	nop
   1df3c:	c3c3c3c4 	.word	0xc3c3c3c4
                if (diff >= diff_min)
                {
                    const int32_t res =
                        DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) +
   1df40:	9a26      	ldr	r2, [sp, #152]	@ 0x98
    if ((m1 < 0) ^ (m2 < 0))
   1df42:	9902      	ldr	r1, [sp, #8]
   1df44:	4093      	lsls	r3, r2
   1df46:	ea81 0203 	eor.w	r2, r1, r3
    q63_t mult = 1 << 30;
   1df4a:	2a00      	cmp	r2, #0
   1df4c:	bfb5      	itete	lt
   1df4e:	4666      	movlt	r6, ip
   1df50:	f04f 4680 	movge.w	r6, #1073741824	@ 0x40000000
   1df54:	f04f 32ff 	movlt.w	r2, #4294967295	@ 0xffffffff
   1df58:	2200      	movge	r2, #0
    result = (int32_t)(mult / (1ll << 31));
   1df5a:	fbc1 6203 	smlal	r6, r2, r1, r3
   1df5e:	2a00      	cmp	r2, #0
   1df60:	da05      	bge.n	1df6e <arm_nn_softmax_common_s8+0x5d6>
   1df62:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   1df66:	1871      	adds	r1, r6, r1
   1df68:	460e      	mov	r6, r1
   1df6a:	f142 0200 	adc.w	r2, r2, #0
   1df6e:	0ff6      	lsrs	r6, r6, #31
   1df70:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   1df74:	9a02      	ldr	r2, [sp, #8]
   1df76:	429a      	cmp	r2, r3
   1df78:	f000 8183 	beq.w	1e282 <arm_nn_softmax_common_s8+0x8ea>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
   1df7c:	f046 427f 	orr.w	r2, r6, #4278190080	@ 0xff000000
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   1df80:	0150      	lsls	r0, r2, #5
    const int32_t remainder = val_mod_minus_quarter - val;
   1df82:	1b92      	subs	r2, r2, r6
    SELECT_IF_NON_ZERO(39332535)
   1df84:	f3c2 7100 	ubfx	r1, r2, #28, #1
    SELECT_IF_NON_ZERO(720401)
   1df88:	f3c2 7740 	ubfx	r7, r2, #29, #1
    SELECT_IF_NON_ZERO(39332535)
   1df8c:	9110      	str	r1, [sp, #64]	@ 0x40
   1df8e:	3901      	subs	r1, #1
   1df90:	910f      	str	r1, [sp, #60]	@ 0x3c
   1df92:	1e79      	subs	r1, r7, #1
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
   1df94:	f100 5080 	add.w	r0, r0, #268435456	@ 0x10000000
    mult = mult + (q63_t)m1 * m2;
   1df98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1df9c:	2500      	movs	r5, #0
   1df9e:	910d      	str	r1, [sp, #52]	@ 0x34
    SELECT_IF_NON_ZERO(242)
   1dfa0:	f3c2 7180 	ubfx	r1, r2, #30, #1
    result = (int32_t)(mult / (1ll << 31));
   1dfa4:	fbc0 3500 	smlal	r3, r5, r0, r0
    SELECT_IF_NON_ZERO(242)
   1dfa8:	9105      	str	r1, [sp, #20]
    SELECT_IF_NON_ZERO(1302514674)
   1dfaa:	f3c2 6140 	ubfx	r1, r2, #25, #1
   1dfae:	9104      	str	r1, [sp, #16]
    result = (int32_t)(mult / (1ll << 31));
   1dfb0:	2d00      	cmp	r5, #0
    SELECT_IF_NON_ZERO(290630308)
   1dfb2:	f3c2 61c0 	ubfx	r1, r2, #27, #1
    SELECT_IF_NON_ZERO(720401)
   1dfb6:	970e      	str	r7, [sp, #56]	@ 0x38
    SELECT_IF_NON_ZERO(790015084)
   1dfb8:	f3c2 6480 	ubfx	r4, r2, #26, #1
    SELECT_IF_NON_ZERO(290630308)
   1dfbc:	9103      	str	r1, [sp, #12]
    result = (int32_t)(mult / (1ll << 31));
   1dfbe:	da05      	bge.n	1dfcc <arm_nn_softmax_common_s8+0x634>
   1dfc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   1dfc4:	1859      	adds	r1, r3, r1
   1dfc6:	460b      	mov	r3, r1
   1dfc8:	f145 0500 	adc.w	r5, r5, #0
   1dfcc:	0fdb      	lsrs	r3, r3, #31
   1dfce:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    mult = mult + (q63_t)m1 * m2;
   1dfd2:	fba3 1703 	umull	r1, r7, r3, r3
    result = (int32_t)(mult / (1ll << 31));
   1dfd6:	17ed      	asrs	r5, r5, #31
    mult = mult + (q63_t)m1 * m2;
   1dfd8:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
   1dfdc:	fb03 fe05 	mul.w	lr, r3, r5
    result = (int32_t)(mult / (1ll << 31));
   1dfe0:	eb47 074e 	adc.w	r7, r7, lr, lsl #1
   1dfe4:	2f00      	cmp	r7, #0
   1dfe6:	930c      	str	r3, [sp, #48]	@ 0x30
   1dfe8:	da06      	bge.n	1dff8 <arm_nn_softmax_common_s8+0x660>
   1dfea:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
   1dfee:	eb11 0e0e 	adds.w	lr, r1, lr
   1dff2:	4671      	mov	r1, lr
   1dff4:	f147 0700 	adc.w	r7, r7, #0
    mask = MASK_IF_ZERO(val);
   1dff8:	fab6 f686 	clz	r6, r6
   1dffc:	0976      	lsrs	r6, r6, #5
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   1dffe:	2e00      	cmp	r6, #0
   1e000:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
    mult = mult + (q63_t)m1 * m2;
   1e004:	fb00 f505 	mul.w	r5, r0, r5
   1e008:	960b      	str	r6, [sp, #44]	@ 0x2c
   1e00a:	ea4f 76e0 	mov.w	r6, r0, asr #31
   1e00e:	fb03 5506 	mla	r5, r3, r6, r5
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   1e012:	bf14      	ite	ne
   1e014:	f06f 4600 	mvnne.w	r6, #2147483648	@ 0x80000000
   1e018:	2600      	moveq	r6, #0
   1e01a:	9607      	str	r6, [sp, #28]
    if ((m1 < 0) ^ (m2 < 0))
   1e01c:	ea83 0900 	eor.w	r9, r3, r0
    mult = mult + (q63_t)m1 * m2;
   1e020:	fba0 6303 	umull	r6, r3, r0, r3
   1e024:	442b      	add	r3, r5
   1e026:	9d05      	ldr	r5, [sp, #20]
   1e028:	9611      	str	r6, [sp, #68]	@ 0x44
   1e02a:	3d01      	subs	r5, #1
   1e02c:	9508      	str	r5, [sp, #32]
   1e02e:	9d04      	ldr	r5, [sp, #16]
   1e030:	1e6e      	subs	r6, r5, #1
   1e032:	1e65      	subs	r5, r4, #1
    result = (int32_t)(mult / (1ll << 31));
   1e034:	0fc9      	lsrs	r1, r1, #31
   1e036:	9509      	str	r5, [sp, #36]	@ 0x24
   1e038:	9d03      	ldr	r5, [sp, #12]
   1e03a:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    q31_t threshold = remainder_mask >> 1;
   1e03e:	ea5f 0ea1 	movs.w	lr, r1, asr #2
    SELECT_IF_NON_ZERO(1672461947)
   1e042:	f3c2 6200 	ubfx	r2, r2, #24, #1
   1e046:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
   1e04a:	f001 0103 	and.w	r1, r1, #3
   1e04e:	f102 37ff 	add.w	r7, r2, #4294967295	@ 0xffffffff
   1e052:	950a      	str	r5, [sp, #40]	@ 0x28
    q31_t threshold = remainder_mask >> 1;
   1e054:	bf4c      	ite	mi
   1e056:	f04f 0802 	movmi.w	r8, #2
   1e05a:	f04f 0801 	movpl.w	r8, #1
    if (remainder > threshold)
   1e05e:	4588      	cmp	r8, r1
    mult = mult + (q63_t)m1 * m2;
   1e060:	9d11      	ldr	r5, [sp, #68]	@ 0x44
        result++;
   1e062:	bfb8      	it	lt
   1e064:	f10e 0e01 	addlt.w	lr, lr, #1
    q63_t mult = 1 << 30;
   1e068:	f1b9 0f00 	cmp.w	r9, #0
   1e06c:	bfb5      	itete	lt
   1e06e:	4661      	movlt	r1, ip
   1e070:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
   1e074:	f04f 39ff 	movlt.w	r9, #4294967295	@ 0xffffffff
   1e078:	f04f 0900 	movge.w	r9, #0
    mult = mult + (q63_t)m1 * m2;
   1e07c:	1949      	adds	r1, r1, r5
    result = (int32_t)(mult / (1ll << 31));
   1e07e:	eb43 0909 	adc.w	r9, r3, r9
   1e082:	f1b9 0f00 	cmp.w	r9, #0
   1e086:	da05      	bge.n	1e094 <arm_nn_softmax_common_s8+0x6fc>
   1e088:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1e08c:	18cb      	adds	r3, r1, r3
   1e08e:	4619      	mov	r1, r3
   1e090:	f149 0900 	adc.w	r9, r9, #0
   1e094:	0fc9      	lsrs	r1, r1, #31
    if ((m1 < 0) ^ (m2 < 0))
   1e096:	4bc2      	ldr	r3, [pc, #776]	@ (1e3a0 <arm_nn_softmax_common_s8+0xa08>)
    result = (int32_t)(mult / (1ll << 31));
   1e098:	4dc1      	ldr	r5, [pc, #772]	@ (1e3a0 <arm_nn_softmax_common_s8+0xa08>)
   1e09a:	ea41 0149 	orr.w	r1, r1, r9, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1e09e:	4471      	add	r1, lr
    if ((m1 < 0) ^ (m2 < 0))
   1e0a0:	404b      	eors	r3, r1
    q63_t mult = 1 << 30;
   1e0a2:	2b00      	cmp	r3, #0
   1e0a4:	bfb5      	itete	lt
   1e0a6:	4663      	movlt	r3, ip
   1e0a8:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
   1e0ac:	f04f 3eff 	movlt.w	lr, #4294967295	@ 0xffffffff
   1e0b0:	f04f 0e00 	movge.w	lr, #0
    result = (int32_t)(mult / (1ll << 31));
   1e0b4:	fbc1 3e05 	smlal	r3, lr, r1, r5
   1e0b8:	f1be 0f00 	cmp.w	lr, #0
   1e0bc:	da05      	bge.n	1e0ca <arm_nn_softmax_common_s8+0x732>
   1e0be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   1e0c2:	1859      	adds	r1, r3, r1
   1e0c4:	460b      	mov	r3, r1
   1e0c6:	f14e 0e00 	adc.w	lr, lr, #0
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1e0ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
    result = (int32_t)(mult / (1ll << 31));
   1e0cc:	0fdb      	lsrs	r3, r3, #31
   1e0ce:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1e0d2:	4419      	add	r1, r3
    if (result < 0)
   1e0d4:	104b      	asrs	r3, r1, #1
   1e0d6:	d402      	bmi.n	1e0de <arm_nn_softmax_common_s8+0x746>
    if (remainder > threshold)
   1e0d8:	07c9      	lsls	r1, r1, #31
        result++;
   1e0da:	bf48      	it	mi
   1e0dc:	3301      	addmi	r3, #1
    if ((m1 < 0) ^ (m2 < 0))
   1e0de:	49b1      	ldr	r1, [pc, #708]	@ (1e3a4 <arm_nn_softmax_common_s8+0xa0c>)
    result = (int32_t)(mult / (1ll << 31));
   1e0e0:	4db0      	ldr	r5, [pc, #704]	@ (1e3a4 <arm_nn_softmax_common_s8+0xa0c>)
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
   1e0e2:	4403      	add	r3, r0
    if ((m1 < 0) ^ (m2 < 0))
   1e0e4:	4059      	eors	r1, r3
    q63_t mult = 1 << 30;
   1e0e6:	2900      	cmp	r1, #0
   1e0e8:	bfb5      	itete	lt
   1e0ea:	4661      	movlt	r1, ip
   1e0ec:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
   1e0f0:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
   1e0f4:	2000      	movge	r0, #0
    result = (int32_t)(mult / (1ll << 31));
   1e0f6:	fbc3 1005 	smlal	r1, r0, r3, r5
   1e0fa:	2800      	cmp	r0, #0
   1e0fc:	da05      	bge.n	1e10a <arm_nn_softmax_common_s8+0x772>
   1e0fe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1e102:	18cb      	adds	r3, r1, r3
   1e104:	4619      	mov	r1, r3
   1e106:	f140 0000 	adc.w	r0, r0, #0
   1e10a:	0fc9      	lsrs	r1, r1, #31
   1e10c:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    int32_t result = 1895147668 +
   1e110:	f101 41e2 	add.w	r1, r1, #1895825408	@ 0x71000000
    mult = mult + (q63_t)m1 * m2;
   1e114:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
   1e118:	2000      	movs	r0, #0
   1e11a:	4da3      	ldr	r5, [pc, #652]	@ (1e3a8 <arm_nn_softmax_common_s8+0xa10>)
    int32_t result = 1895147668 +
   1e11c:	f5a1 2125 	sub.w	r1, r1, #675840	@ 0xa5000
   1e120:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
    mult = mult + (q63_t)m1 * m2;
   1e124:	469e      	mov	lr, r3
   1e126:	4680      	mov	r8, r0
   1e128:	fbc1 e805 	smlal	lr, r8, r1, r5
    result = (int32_t)(mult / (1ll << 31));
   1e12c:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   1e130:	ea4e 0e48 	orr.w	lr, lr, r8, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
   1e134:	400f      	ands	r7, r1
    mult = mult + (q63_t)m1 * m2;
   1e136:	4d9d      	ldr	r5, [pc, #628]	@ (1e3ac <arm_nn_softmax_common_s8+0xa14>)
    SELECT_IF_NON_ZERO(1672461947)
   1e138:	fb0e f202 	mul.w	r2, lr, r2
   1e13c:	407a      	eors	r2, r7
    mult = mult + (q63_t)m1 * m2;
   1e13e:	4619      	mov	r1, r3
   1e140:	4607      	mov	r7, r0
   1e142:	fbc2 1705 	smlal	r1, r7, r2, r5
    SELECT_IF_NON_ZERO(1302514674)
   1e146:	4016      	ands	r6, r2
    result = (int32_t)(mult / (1ll << 31));
   1e148:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(1302514674)
   1e14a:	9a04      	ldr	r2, [sp, #16]
    SELECT_IF_NON_ZERO(790015084)
   1e14c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
    result = (int32_t)(mult / (1ll << 31));
   1e14e:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
   1e152:	fb01 f202 	mul.w	r2, r1, r2
    mult = mult + (q63_t)m1 * m2;
   1e156:	4f96      	ldr	r7, [pc, #600]	@ (1e3b0 <arm_nn_softmax_common_s8+0xa18>)
    SELECT_IF_NON_ZERO(1302514674)
   1e158:	4072      	eors	r2, r6
    mult = mult + (q63_t)m1 * m2;
   1e15a:	4619      	mov	r1, r3
   1e15c:	4606      	mov	r6, r0
   1e15e:	fbc2 1607 	smlal	r1, r6, r2, r7
    result = (int32_t)(mult / (1ll << 31));
   1e162:	0fc9      	lsrs	r1, r1, #31
   1e164:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    SELECT_IF_NON_ZERO(790015084)
   1e168:	4015      	ands	r5, r2
    mult = mult + (q63_t)m1 * m2;
   1e16a:	4e92      	ldr	r6, [pc, #584]	@ (1e3b4 <arm_nn_softmax_common_s8+0xa1c>)
    SELECT_IF_NON_ZERO(790015084)
   1e16c:	fb01 f404 	mul.w	r4, r1, r4
   1e170:	406c      	eors	r4, r5
    mult = mult + (q63_t)m1 * m2;
   1e172:	461a      	mov	r2, r3
   1e174:	4605      	mov	r5, r0
    SELECT_IF_NON_ZERO(290630308)
   1e176:	990a      	ldr	r1, [sp, #40]	@ 0x28
    mult = mult + (q63_t)m1 * m2;
   1e178:	fbc4 2506 	smlal	r2, r5, r4, r6
    SELECT_IF_NON_ZERO(290630308)
   1e17c:	4021      	ands	r1, r4
    result = (int32_t)(mult / (1ll << 31));
   1e17e:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(290630308)
   1e180:	9c03      	ldr	r4, [sp, #12]
    mult = mult + (q63_t)m1 * m2;
   1e182:	4e8d      	ldr	r6, [pc, #564]	@ (1e3b8 <arm_nn_softmax_common_s8+0xa20>)
    result = (int32_t)(mult / (1ll << 31));
   1e184:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    SELECT_IF_NON_ZERO(290630308)
   1e188:	fb02 f404 	mul.w	r4, r2, r4
   1e18c:	4622      	mov	r2, r4
   1e18e:	404a      	eors	r2, r1
    mult = mult + (q63_t)m1 * m2;
   1e190:	4605      	mov	r5, r0
   1e192:	4619      	mov	r1, r3
    SELECT_IF_NON_ZERO(39332535)
   1e194:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
    mult = mult + (q63_t)m1 * m2;
   1e196:	fbc2 1506 	smlal	r1, r5, r2, r6
    SELECT_IF_NON_ZERO(39332535)
   1e19a:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   1e19c:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(39332535)
   1e19e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
    mult = mult + (q63_t)m1 * m2;
   1e1a0:	4e86      	ldr	r6, [pc, #536]	@ (1e3bc <arm_nn_softmax_common_s8+0xa24>)
    result = (int32_t)(mult / (1ll << 31));
   1e1a2:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(39332535)
   1e1a6:	fb01 f202 	mul.w	r2, r1, r2
   1e1aa:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
   1e1ac:	4619      	mov	r1, r3
   1e1ae:	4605      	mov	r5, r0
    SELECT_IF_NON_ZERO(720401)
   1e1b0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
    mult = mult + (q63_t)m1 * m2;
   1e1b2:	fbc2 1506 	smlal	r1, r5, r2, r6
    SELECT_IF_NON_ZERO(720401)
   1e1b6:	4014      	ands	r4, r2
    result = (int32_t)(mult / (1ll << 31));
   1e1b8:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(720401)
   1e1ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    result = (int32_t)(mult / (1ll << 31));
   1e1bc:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    SELECT_IF_NON_ZERO(720401)
   1e1c0:	fb01 f202 	mul.w	r2, r1, r2
   1e1c4:	4611      	mov	r1, r2
   1e1c6:	4061      	eors	r1, r4
    SELECT_IF_NON_ZERO(242)
   1e1c8:	9a08      	ldr	r2, [sp, #32]
    mult = mult + (q63_t)m1 * m2;
   1e1ca:	24f2      	movs	r4, #242	@ 0xf2
   1e1cc:	fbc1 3004 	smlal	r3, r0, r1, r4
    SELECT_IF_NON_ZERO(242)
   1e1d0:	400a      	ands	r2, r1
    result = (int32_t)(mult / (1ll << 31));
   1e1d2:	0fdb      	lsrs	r3, r3, #31
    SELECT_IF_NON_ZERO(242)
   1e1d4:	9905      	ldr	r1, [sp, #20]
    result = (int32_t)(mult / (1ll << 31));
   1e1d6:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
   1e1da:	fb03 f101 	mul.w	r1, r3, r1
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   1e1de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    if ((m1 < 0) ^ (m2 < 0))
   1e1e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
    SELECT_IF_NON_ZERO(242)
   1e1e2:	404a      	eors	r2, r1
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
   1e1e4:	401a      	ands	r2, r3
   1e1e6:	9b07      	ldr	r3, [sp, #28]
   1e1e8:	405a      	eors	r2, r3
    if ((m1 < 0) ^ (m2 < 0))
   1e1ea:	ea82 0300 	eor.w	r3, r2, r0
    q63_t mult = 1 << 30;
   1e1ee:	2b00      	cmp	r3, #0
   1e1f0:	bfb5      	itete	lt
   1e1f2:	4663      	movlt	r3, ip
   1e1f4:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
   1e1f8:	f04f 31ff 	movlt.w	r1, #4294967295	@ 0xffffffff
   1e1fc:	2100      	movge	r1, #0
    result = (int32_t)(mult / (1ll << 31));
   1e1fe:	fbc2 3100 	smlal	r3, r1, r2, r0
   1e202:	2900      	cmp	r1, #0
   1e204:	da05      	bge.n	1e212 <arm_nn_softmax_common_s8+0x87a>
   1e206:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   1e20a:	189a      	adds	r2, r3, r2
   1e20c:	4613      	mov	r3, r2
   1e20e:	f141 0100 	adc.w	r1, r1, #0
    if (result < 0)
   1e212:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
    result = (int32_t)(mult / (1ll << 31));
   1e214:	0fdb      	lsrs	r3, r3, #31
   1e216:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    if (result < 0)
   1e21a:	fa53 f202 	asrs.w	r2, r3, r2
   1e21e:	d417      	bmi.n	1e250 <arm_nn_softmax_common_s8+0x8b8>
    int32_t remainder = remainder_mask & dividend;
   1e220:	9914      	ldr	r1, [sp, #80]	@ 0x50
   1e222:	400b      	ands	r3, r1
    if (remainder > threshold)
   1e224:	9915      	ldr	r1, [sp, #84]	@ 0x54
   1e226:	4299      	cmp	r1, r3
   1e228:	da51      	bge.n	1e2ce <arm_nn_softmax_common_s8+0x936>
                    const int32_t res =
   1e22a:	f1a2 037f 	sub.w	r3, r2, #127	@ 0x7f
                        NN_Q7_MIN;
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
   1e22e:	2b7e      	cmp	r3, #126	@ 0x7e
   1e230:	bfd4      	ite	le
   1e232:	b25b      	sxtble	r3, r3
   1e234:	237f      	movgt	r3, #127	@ 0x7f
   1e236:	f80b 3f01 	strb.w	r3, [fp, #1]!
            for (col = 0; col < row_size; ++col)
   1e23a:	9b01      	ldr	r3, [sp, #4]
   1e23c:	4553      	cmp	r3, sl
   1e23e:	d00e      	beq.n	1e25e <arm_nn_softmax_common_s8+0x8c6>
                diff = input[col] - max;
   1e240:	9a06      	ldr	r2, [sp, #24]
   1e242:	f91a 3f01 	ldrsb.w	r3, [sl, #1]!
   1e246:	1a9b      	subs	r3, r3, r2
                if (diff >= diff_min)
   1e248:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   1e24a:	429a      	cmp	r2, r3
   1e24c:	f77f ae78 	ble.w	1df40 <arm_nn_softmax_common_s8+0x5a8>
   1e250:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
   1e254:	f80b 3f01 	strb.w	r3, [fp, #1]!
            for (col = 0; col < row_size; ++col)
   1e258:	9b01      	ldr	r3, [sp, #4]
   1e25a:	4553      	cmp	r3, sl
   1e25c:	d1f0      	bne.n	1e240 <arm_nn_softmax_common_s8+0x8a8>
   1e25e:	e9dd 9b18 	ldrd	r9, fp, [sp, #96]	@ 0x60
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
   1e262:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   1e264:	9901      	ldr	r1, [sp, #4]
   1e266:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1e268:	4411      	add	r1, r2
   1e26a:	4491      	add	r9, r2
   1e26c:	4493      	add	fp, r2
   1e26e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
   1e270:	9101      	str	r1, [sp, #4]
   1e272:	3301      	adds	r3, #1
   1e274:	429a      	cmp	r2, r3
   1e276:	9317      	str	r3, [sp, #92]	@ 0x5c
   1e278:	f47f abaa 	bne.w	1d9d0 <arm_nn_softmax_common_s8+0x38>
            }
        }

        input += row_size;
    }
}
   1e27c:	b01d      	add	sp, #116	@ 0x74
   1e27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
   1e282:	9b02      	ldr	r3, [sp, #8]
   1e284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
   1e288:	f47f ae78 	bne.w	1df7c <arm_nn_softmax_common_s8+0x5e4>
   1e28c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   1e290:	4b4b      	ldr	r3, [pc, #300]	@ (1e3c0 <arm_nn_softmax_common_s8+0xa28>)
   1e292:	930c      	str	r3, [sp, #48]	@ 0x30
   1e294:	2400      	movs	r4, #0
   1e296:	4615      	mov	r5, r2
   1e298:	4b4a      	ldr	r3, [pc, #296]	@ (1e3c4 <arm_nn_softmax_common_s8+0xa2c>)
   1e29a:	920f      	str	r2, [sp, #60]	@ 0x3c
   1e29c:	e9cd 240d 	strd	r2, r4, [sp, #52]	@ 0x34
   1e2a0:	e9cd 4207 	strd	r4, r2, [sp, #28]
   1e2a4:	9311      	str	r3, [sp, #68]	@ 0x44
   1e2a6:	920b      	str	r2, [sp, #44]	@ 0x2c
   1e2a8:	e9cd 4404 	strd	r4, r4, [sp, #16]
   1e2ac:	e9cd 5509 	strd	r5, r5, [sp, #36]	@ 0x24
   1e2b0:	4845      	ldr	r0, [pc, #276]	@ (1e3c8 <arm_nn_softmax_common_s8+0xa30>)
   1e2b2:	f8df 9124 	ldr.w	r9, [pc, #292]	@ 1e3d8 <arm_nn_softmax_common_s8+0xa40>
   1e2b6:	4b45      	ldr	r3, [pc, #276]	@ (1e3cc <arm_nn_softmax_common_s8+0xa34>)
   1e2b8:	9410      	str	r4, [sp, #64]	@ 0x40
   1e2ba:	9403      	str	r4, [sp, #12]
   1e2bc:	4621      	mov	r1, r4
   1e2be:	f44f 3e00 	mov.w	lr, #131072	@ 0x20000
   1e2c2:	4622      	mov	r2, r4
   1e2c4:	462f      	mov	r7, r5
   1e2c6:	462e      	mov	r6, r5
    q31_t threshold = remainder_mask >> 1;
   1e2c8:	f04f 0801 	mov.w	r8, #1
   1e2cc:	e6c7      	b.n	1e05e <arm_nn_softmax_common_s8+0x6c6>
                    const int32_t res =
   1e2ce:	f1a2 0380 	sub.w	r3, r2, #128	@ 0x80
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
   1e2d2:	2a00      	cmp	r2, #0
   1e2d4:	d1ab      	bne.n	1e22e <arm_nn_softmax_common_s8+0x896>
   1e2d6:	e7ae      	b.n	1e236 <arm_nn_softmax_common_s8+0x89e>
   1e2d8:	f04f 0800 	mov.w	r8, #0
    mask = MASK_IF_ZERO(val);
   1e2dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
   1e2e0:	4f3b      	ldr	r7, [pc, #236]	@ (1e3d0 <arm_nn_softmax_common_s8+0xa38>)
   1e2e2:	4e3c      	ldr	r6, [pc, #240]	@ (1e3d4 <arm_nn_softmax_common_s8+0xa3c>)
   1e2e4:	462b      	mov	r3, r5
   1e2e6:	462a      	mov	r2, r5
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
   1e2e8:	f04f 315a 	mov.w	r1, #1515870810	@ 0x5a5a5a5a
    q63_t mult = 1 << 30;
   1e2ec:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
   1e2f0:	2400      	movs	r4, #0
   1e2f2:	e579      	b.n	1dde8 <arm_nn_softmax_common_s8+0x450>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e2f4:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e2f8:	4408      	add	r0, r1
    mult = mult + (q63_t)m1 * m2;
   1e2fa:	17c1      	asrs	r1, r0, #31
    if ((m1 < 0) ^ (m2 < 0))
   1e2fc:	4045      	eors	r5, r0
    mult = mult + (q63_t)m1 * m2;
   1e2fe:	fb00 f202 	mul.w	r2, r0, r2
    q63_t mult = 1 << 30;
   1e302:	2d00      	cmp	r5, #0
    mult = mult + (q63_t)m1 * m2;
   1e304:	fb03 2201 	mla	r2, r3, r1, r2
   1e308:	fba0 3103 	umull	r3, r1, r0, r3
   1e30c:	440a      	add	r2, r1
    q63_t mult = 1 << 30;
   1e30e:	bfb5      	itete	lt
   1e310:	4661      	movlt	r1, ip
   1e312:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
   1e316:	f04f 34ff 	movlt.w	r4, #4294967295	@ 0xffffffff
   1e31a:	2400      	movge	r4, #0
    mult = mult + (q63_t)m1 * m2;
   1e31c:	1859      	adds	r1, r3, r1
    result = (int32_t)(mult / (1ll << 31));
   1e31e:	eb42 0404 	adc.w	r4, r2, r4
   1e322:	2c00      	cmp	r4, #0
   1e324:	da05      	bge.n	1e332 <arm_nn_softmax_common_s8+0x99a>
   1e326:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1e32a:	18cb      	adds	r3, r1, r3
   1e32c:	4619      	mov	r1, r3
   1e32e:	f144 0400 	adc.w	r4, r4, #0
   1e332:	0fc9      	lsrs	r1, r1, #31
   1e334:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e338:	f1c1 5200 	rsb	r2, r1, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   1e33c:	ea80 0302 	eor.w	r3, r0, r2
    q63_t mult = 1 << 30;
   1e340:	2b00      	cmp	r3, #0
   1e342:	bfb5      	itete	lt
   1e344:	4663      	movlt	r3, ip
   1e346:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
   1e34a:	f04f 31ff 	movlt.w	r1, #4294967295	@ 0xffffffff
   1e34e:	2100      	movge	r1, #0
    result = (int32_t)(mult / (1ll << 31));
   1e350:	fbc0 3102 	smlal	r3, r1, r0, r2
   1e354:	2900      	cmp	r1, #0
   1e356:	da05      	bge.n	1e364 <arm_nn_softmax_common_s8+0x9cc>
   1e358:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   1e35c:	189a      	adds	r2, r3, r2
   1e35e:	4613      	mov	r3, r2
   1e360:	f141 0100 	adc.w	r1, r1, #0
   1e364:	0fdb      	lsrs	r3, r3, #31
   1e366:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e36a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
   1e36e:	db51      	blt.n	1e414 <arm_nn_softmax_common_s8+0xa7c>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e370:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1e374:	4418      	add	r0, r3
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e376:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
   1e37a:	db48      	blt.n	1e40e <arm_nn_softmax_common_s8+0xa76>
   1e37c:	9312      	str	r3, [sp, #72]	@ 0x48
   1e37e:	e5c5      	b.n	1df0c <arm_nn_softmax_common_s8+0x574>
        result++;
   1e380:	3201      	adds	r2, #1
   1e382:	f7ff bbbc 	b.w	1dafe <arm_nn_softmax_common_s8+0x166>
    result = (int32_t)(mult / (1ll << 31));
   1e386:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
   1e38a:	1986      	adds	r6, r0, r6
   1e38c:	4630      	mov	r0, r6
   1e38e:	f144 0400 	adc.w	r4, r4, #0
   1e392:	e553      	b.n	1de3c <arm_nn_softmax_common_s8+0x4a4>
        for (col = 0; col < row_size; ++col)
   1e394:	f43f ab2c 	beq.w	1d9f0 <arm_nn_softmax_common_s8+0x58>
        const int32_t headroom = __CLZ(sum);
   1e398:	f04f 0820 	mov.w	r8, #32
   1e39c:	e79e      	b.n	1e2dc <arm_nn_softmax_common_s8+0x944>
   1e39e:	bf00      	nop
   1e3a0:	2aaaaaab 	.word	0x2aaaaaab
   1e3a4:	70f5a894 	.word	0x70f5a894
   1e3a8:	63afbe7b 	.word	0x63afbe7b
   1e3ac:	4da2cbf2 	.word	0x4da2cbf2
   1e3b0:	2f16ac6c 	.word	0x2f16ac6c
   1e3b4:	1152aaa4 	.word	0x1152aaa4
   1e3b8:	02582ab7 	.word	0x02582ab7
   1e3bc:	000afe11 	.word	0x000afe11
   1e3c0:	01fffff8 	.word	0x01fffff8
   1e3c4:	40000100 	.word	0x40000100
   1e3c8:	0fffffe0 	.word	0x0fffffe0
   1e3cc:	001fffff 	.word	0x001fffff
   1e3d0:	0b4b4b4b 	.word	0x0b4b4b4b
   1e3d4:	9a5a5a5a 	.word	0x9a5a5a5a
   1e3d8:	0e000018 	.word	0x0e000018
    mult = mult + (q63_t)m1 * m2;
   1e3dc:	fb00 4402 	mla	r4, r0, r2, r4
   1e3e0:	fba3 3200 	umull	r3, r2, r3, r0
   1e3e4:	eb13 030c 	adds.w	r3, r3, ip
   1e3e8:	4422      	add	r2, r4
    result = (int32_t)(mult / (1ll << 31));
   1e3ea:	f162 0200 	sbc.w	r2, r2, #0
   1e3ee:	2a00      	cmp	r2, #0
   1e3f0:	da05      	bge.n	1e3fe <arm_nn_softmax_common_s8+0xa66>
   1e3f2:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
   1e3f6:	191c      	adds	r4, r3, r4
   1e3f8:	4623      	mov	r3, r4
   1e3fa:	f142 0200 	adc.w	r2, r2, #0
   1e3fe:	0fdb      	lsrs	r3, r3, #31
   1e400:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e404:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
   1e408:	e55a      	b.n	1dec0 <arm_nn_softmax_common_s8+0x528>
    int32_t result = val << exp;
   1e40a:	0080      	lsls	r0, r0, #2
   1e40c:	e774      	b.n	1e2f8 <arm_nn_softmax_common_s8+0x960>
   1e40e:	0043      	lsls	r3, r0, #1
   1e410:	9312      	str	r3, [sp, #72]	@ 0x48
   1e412:	e57b      	b.n	1df0c <arm_nn_softmax_common_s8+0x574>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
   1e414:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
   1e418:	f77f ad6d 	ble.w	1def6 <arm_nn_softmax_common_s8+0x55e>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e41c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    int32_t result = val << exp;
   1e420:	005a      	lsls	r2, r3, #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
    int32_t result = val << exp;
   1e426:	9212      	str	r2, [sp, #72]	@ 0x48
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e428:	f6ff ad69 	blt.w	1defe <arm_nn_softmax_common_s8+0x566>
   1e42c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   1e430:	e7a4      	b.n	1e37c <arm_nn_softmax_common_s8+0x9e4>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
   1e432:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    int32_t result = val << exp;
   1e436:	005a      	lsls	r2, r3, #1
   1e438:	9212      	str	r2, [sp, #72]	@ 0x48
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
   1e43a:	e560      	b.n	1defe <arm_nn_softmax_common_s8+0x566>

0001e43c <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
   1e43c:	b510      	push	{r4, lr}
   1e43e:	b084      	sub	sp, #16
   1e440:	9c06      	ldr	r4, [sp, #24]

        input += row_size;
        output += row_size;
    }
#else
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, false, (void *)output);
   1e442:	9400      	str	r4, [sp, #0]
{
   1e444:	9c07      	ldr	r4, [sp, #28]
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, false, (void *)output);
   1e446:	9401      	str	r4, [sp, #4]
{
   1e448:	9c08      	ldr	r4, [sp, #32]
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, false, (void *)output);
   1e44a:	9403      	str	r4, [sp, #12]
   1e44c:	2400      	movs	r4, #0
   1e44e:	9402      	str	r4, [sp, #8]
   1e450:	f7ff faa2 	bl	1d998 <arm_nn_softmax_common_s8>
#endif
}
   1e454:	b004      	add	sp, #16
   1e456:	bd10      	pop	{r4, pc}

0001e458 <_ZL21ei_cube_check_overlapP4cubeiiiif>:

/**
 * Checks whether a new section overlaps with a cube,
 * and if so, will **update the cube**
 */
__attribute__((unused)) static bool ei_cube_check_overlap(ei_classifier_cube_t *c, int x, int y, int width, int height, float confidence) {
   1e458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bool is_overlapping = !(c->x + c->width < x || c->y + c->height < y || c->x > x + width || c->y > y + height);
   1e45c:	6804      	ldr	r4, [r0, #0]
   1e45e:	6885      	ldr	r5, [r0, #8]
   1e460:	eb04 0e05 	add.w	lr, r4, r5
   1e464:	458e      	cmp	lr, r1
   1e466:	d332      	bcc.n	1e4ce <_ZL21ei_cube_check_overlapP4cubeiiiif+0x76>
   1e468:	6846      	ldr	r6, [r0, #4]
   1e46a:	f8d0 800c 	ldr.w	r8, [r0, #12]
   1e46e:	eb06 0708 	add.w	r7, r6, r8
   1e472:	4297      	cmp	r7, r2
   1e474:	d32b      	bcc.n	1e4ce <_ZL21ei_cube_check_overlapP4cubeiiiif+0x76>
   1e476:	eb03 0901 	add.w	r9, r3, r1
   1e47a:	454c      	cmp	r4, r9
   1e47c:	d827      	bhi.n	1e4ce <_ZL21ei_cube_check_overlapP4cubeiiiif+0x76>
   1e47e:	9b07      	ldr	r3, [sp, #28]
   1e480:	eb02 0c03 	add.w	ip, r2, r3
   1e484:	4566      	cmp	r6, ip
   1e486:	d822      	bhi.n	1e4ce <_ZL21ei_cube_check_overlapP4cubeiiiif+0x76>
    if (!is_overlapping) return false;

    // if we overlap, but the x of the new box is lower than the x of the current box
    if (x < c->x) {
   1e488:	428c      	cmp	r4, r1
   1e48a:	d903      	bls.n	1e494 <_ZL21ei_cube_check_overlapP4cubeiiiif+0x3c>
        // update x to match new box and make width larger (by the diff between the boxes)
        c->x = x;
   1e48c:	6001      	str	r1, [r0, #0]
        // update y to match new box and make height larger (by the diff between the boxes)
        c->y = y;
        c->height += c->y - y;
    }
    // if we overlap, and x+width of the new box is higher than the x+width of the current box
    if (x + width > c->x + c->width) {
   1e48e:	eb05 0e01 	add.w	lr, r5, r1
   1e492:	460c      	mov	r4, r1
    if (y < c->y) {
   1e494:	4296      	cmp	r6, r2
   1e496:	d903      	bls.n	1e4a0 <_ZL21ei_cube_check_overlapP4cubeiiiif+0x48>
        c->y = y;
   1e498:	6042      	str	r2, [r0, #4]
        // just make the box wider
        c->width += (x + width) - (c->x + c->width);
    }
    // if we overlap, and y+height of the new box is higher than the y+height of the current box
    if (y + height > c->y + c->height) {
   1e49a:	eb08 0702 	add.w	r7, r8, r2
   1e49e:	4616      	mov	r6, r2
    if (x + width > c->x + c->width) {
   1e4a0:	45f1      	cmp	r9, lr
        c->width += (x + width) - (c->x + c->width);
   1e4a2:	bf88      	it	hi
   1e4a4:	eba9 0304 	subhi.w	r3, r9, r4
        // just make the box higher
        c->height += (y + height) - (c->y + c->height);
    }
    // if the new box has higher confidence, then override confidence of the whole box
    if (confidence > c->confidence) {
   1e4a8:	edd0 7a04 	vldr	s15, [r0, #16]
        c->width += (x + width) - (c->x + c->width);
   1e4ac:	bf88      	it	hi
   1e4ae:	6083      	strhi	r3, [r0, #8]
    if (y + height > c->y + c->height) {
   1e4b0:	45bc      	cmp	ip, r7
        c->height += (y + height) - (c->y + c->height);
   1e4b2:	bf88      	it	hi
   1e4b4:	ebac 0606 	subhi.w	r6, ip, r6
    if (confidence > c->confidence) {
   1e4b8:	eef4 7ac0 	vcmpe.f32	s15, s0
        c->height += (y + height) - (c->y + c->height);
   1e4bc:	bf88      	it	hi
   1e4be:	60c6      	strhi	r6, [r0, #12]
    if (confidence > c->confidence) {
   1e4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e4c4:	d501      	bpl.n	1e4ca <_ZL21ei_cube_check_overlapP4cubeiiiif+0x72>
        c->confidence = confidence;
   1e4c6:	ed80 0a04 	vstr	s0, [r0, #16]
    }
    return true;
   1e4ca:	2001      	movs	r0, #1
   1e4cc:	e000      	b.n	1e4d0 <_ZL21ei_cube_check_overlapP4cubeiiiif+0x78>
    if (!is_overlapping) return false;
   1e4ce:	2000      	movs	r0, #0
}
   1e4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e4d4 <_Z20picture_dma_completeP13ns_camera_cfg>:
uint32_t buffer_length = 0;
static uint32_t bufferOffset = 0;

void picture_dma_complete(ns_camera_config_t *cfg) {
    // ns_lp_printf("DMA Complete CB\n");
    dmaComplete = true;
   1e4d4:	4b01      	ldr	r3, [pc, #4]	@ (1e4dc <_Z20picture_dma_completeP13ns_camera_cfg+0x8>)
   1e4d6:	2201      	movs	r2, #1
   1e4d8:	701a      	strb	r2, [r3, #0]
}
   1e4da:	4770      	bx	lr
   1e4dc:	1000cca1 	.word	0x1000cca1

0001e4e0 <_Z22picture_taken_completeP13ns_camera_cfg>:

void picture_taken_complete(ns_camera_config_t *cfg) {
    pictureTaken = true;
   1e4e0:	4b01      	ldr	r3, [pc, #4]	@ (1e4e8 <_Z22picture_taken_completeP13ns_camera_cfg+0x8>)
   1e4e2:	2201      	movs	r2, #1
   1e4e4:	701a      	strb	r2, [r3, #0]
    // ns_lp_printf("Picture taken CB\n");
}
   1e4e6:	4770      	bx	lr
   1e4e8:	1000cca0 	.word	0x1000cca0

0001e4ec <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   1e4ec:	b410      	push	{r4}
   1e4ee:	468c      	mov	ip, r1
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   1e4f0:	6804      	ldr	r4, [r0, #0]
   1e4f2:	f8dc 0000 	ldr.w	r0, [ip]
   1e4f6:	4611      	mov	r1, r2
   1e4f8:	681a      	ldr	r2, [r3, #0]
   1e4fa:	6809      	ldr	r1, [r1, #0]
   1e4fc:	4623      	mov	r3, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   1e4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e502:	4718      	bx	r3

0001e504 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj>:
__attribute__((unused)) void * ei_aligned_calloc(size_t align, size_t size)
{
	void * ptr = NULL;

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
   1e504:	1e43      	subs	r3, r0, #1
   1e506:	4203      	tst	r3, r0
{
   1e508:	b510      	push	{r4, lr}
	assert((align & (align - 1)) == 0);
   1e50a:	d114      	bne.n	1e536 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x32>

	if(align && size)
   1e50c:	4604      	mov	r4, r0
   1e50e:	b180      	cbz	r0, 1e532 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
   1e510:	b179      	cbz	r1, 1e532 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
		void * p = ei_calloc(size + hdr_size, 1);
   1e512:	1c48      	adds	r0, r1, #1
   1e514:	4420      	add	r0, r4
   1e516:	2101      	movs	r1, #1
   1e518:	f006 f99e 	bl	24858 <_Z9ei_callocjj>

		if(p)
   1e51c:	4602      	mov	r2, r0
   1e51e:	b140      	cbz	r0, 1e532 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x2e>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
   1e520:	1c63      	adds	r3, r4, #1
   1e522:	4403      	add	r3, r0
   1e524:	4264      	negs	r4, r4
   1e526:	ea03 0004 	and.w	r0, r3, r4

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
   1e52a:	1a82      	subs	r2, r0, r2
   1e52c:	f820 2c02 	strh.w	r2, [r0, #-2]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
}
   1e530:	bd10      	pop	{r4, pc}
	void * ptr = NULL;
   1e532:	2000      	movs	r0, #0
}
   1e534:	bd10      	pop	{r4, pc}
	assert((align & (align - 1)) == 0);
   1e536:	4b03      	ldr	r3, [pc, #12]	@ (1e544 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x40>)
   1e538:	4a03      	ldr	r2, [pc, #12]	@ (1e548 <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x44>)
   1e53a:	4804      	ldr	r0, [pc, #16]	@ (1e54c <_ZN12_GLOBAL__N_117ei_aligned_callocEjj+0x48>)
   1e53c:	2137      	movs	r1, #55	@ 0x37
   1e53e:	f006 fe1b 	bl	25178 <__assert_func>
   1e542:	bf00      	nop
   1e544:	0003efbc 	.word	0x0003efbc
   1e548:	0003efd8 	.word	0x0003efd8
   1e54c:	0003f010 	.word	0x0003f010

0001e550 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
   1e550:	b508      	push	{r3, lr}
	assert(ptr);
   1e552:	b130      	cbz	r0, 1e562 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x12>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
   1e554:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
   1e558:	1ac0      	subs	r0, r0, r3
}
   1e55a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
   1e55e:	f006 b989 	b.w	24874 <_Z7ei_freePv>
	assert(ptr);
   1e562:	4b03      	ldr	r3, [pc, #12]	@ (1e570 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
   1e564:	4a03      	ldr	r2, [pc, #12]	@ (1e574 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
   1e566:	4804      	ldr	r0, [pc, #16]	@ (1e578 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
   1e568:	215a      	movs	r1, #90	@ 0x5a
   1e56a:	f006 fe05 	bl	25178 <__assert_func>
   1e56e:	bf00      	nop
   1e570:	0003f054 	.word	0x0003f054
   1e574:	0003f058 	.word	0x0003f058
   1e578:	0003f010 	.word	0x0003f010

0001e57c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	switch (__op)
   1e57c:	b152      	cbz	r2, 1e594 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x18>
   1e57e:	2a01      	cmp	r2, #1
   1e580:	d102      	bne.n	1e588 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   1e582:	6001      	str	r1, [r0, #0]
      }
   1e584:	2000      	movs	r0, #0
   1e586:	4770      	bx	lr
	  switch (__op)
   1e588:	2a02      	cmp	r2, #2
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
   1e58a:	bf04      	itt	eq
   1e58c:	680b      	ldreq	r3, [r1, #0]
   1e58e:	6003      	streq	r3, [r0, #0]
      }
   1e590:	2000      	movs	r0, #0
   1e592:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   1e594:	4b01      	ldr	r3, [pc, #4]	@ (1e59c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x20>)
   1e596:	6003      	str	r3, [r0, #0]
      }
   1e598:	2000      	movs	r0, #0
   1e59a:	4770      	bx	lr
   1e59c:	000408c4 	.word	0x000408c4

0001e5a0 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   1e5a0:	b152      	cbz	r2, 1e5b8 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x18>
   1e5a2:	2a01      	cmp	r2, #1
   1e5a4:	d102      	bne.n	1e5ac <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   1e5a6:	6001      	str	r1, [r0, #0]
      }
   1e5a8:	2000      	movs	r0, #0
   1e5aa:	4770      	bx	lr
	  switch (__op)
   1e5ac:	2a02      	cmp	r2, #2
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
   1e5ae:	bf04      	itt	eq
   1e5b0:	680b      	ldreq	r3, [r1, #0]
   1e5b2:	6003      	streq	r3, [r0, #0]
      }
   1e5b4:	2000      	movs	r0, #0
   1e5b6:	4770      	bx	lr
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
   1e5b8:	4b01      	ldr	r3, [pc, #4]	@ (1e5c0 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x20>)
   1e5ba:	6003      	str	r3, [r0, #0]
      }
   1e5bc:	2000      	movs	r0, #0
   1e5be:	4770      	bx	lr
   1e5c0:	00040888 	.word	0x00040888

0001e5c4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0>:
 * @param      output             Pointer to output tensor
 * @param      micro_tensor_arena Pointer to the arena that will be allocated
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_setup(
   1e5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    TfLiteTensor* output,
    TfLiteTensor* output_labels,
    TfLiteTensor* output_scores,
    ei_unique_ptr_t& p_tensor_arena) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
   1e5c8:	6985      	ldr	r5, [r0, #24]
static EI_IMPULSE_ERROR inference_tflite_setup(
   1e5ca:	460e      	mov	r6, r1
   1e5cc:	4698      	mov	r8, r3
   1e5ce:	4604      	mov	r4, r0
   1e5d0:	4617      	mov	r7, r2

    *ctx_start_us = ei_read_timer_us();
   1e5d2:	f006 f90d 	bl	247f0 <_Z16ei_read_timer_usv>

    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
   1e5d6:	686b      	ldr	r3, [r5, #4]
    *ctx_start_us = ei_read_timer_us();
   1e5d8:	e9c6 0100 	strd	r0, r1, [r6]
    TfLiteStatus init_status = graph_config->model_init(ei_aligned_calloc);
   1e5dc:	4813      	ldr	r0, [pc, #76]	@ (1e62c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x68>)
   1e5de:	4798      	blx	r3
    if (init_status != kTfLiteOk) {
   1e5e0:	b9e8      	cbnz	r0, 1e61e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x5a>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    }

    TfLiteStatus status;

    status = graph_config->model_input(0, input);
   1e5e2:	692b      	ldr	r3, [r5, #16]
   1e5e4:	4639      	mov	r1, r7
   1e5e6:	4798      	blx	r3
    if (status != kTfLiteOk) {
   1e5e8:	b9b0      	cbnz	r0, 1e618 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x54>
        return EI_IMPULSE_TFLITE_ERROR;
    }
    status = graph_config->model_output(block_config->output_data_tensor, output);
   1e5ea:	696b      	ldr	r3, [r5, #20]
   1e5ec:	7aa0      	ldrb	r0, [r4, #10]
   1e5ee:	4641      	mov	r1, r8
   1e5f0:	4798      	blx	r3
    if (status != kTfLiteOk) {
   1e5f2:	b988      	cbnz	r0, 1e618 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x54>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
   1e5f4:	f994 3009 	ldrsb.w	r3, [r4, #9]
   1e5f8:	2b01      	cmp	r3, #1
   1e5fa:	d002      	beq.n	1e602 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x3e>
        if (status != kTfLiteOk) {
            return EI_IMPULSE_TFLITE_ERROR;
        }
    }

    return EI_IMPULSE_OK;
   1e5fc:	2000      	movs	r0, #0
}
   1e5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = graph_config->model_output(block_config->output_score_tensor, output_scores);
   1e602:	696b      	ldr	r3, [r5, #20]
   1e604:	7b20      	ldrb	r0, [r4, #12]
   1e606:	9907      	ldr	r1, [sp, #28]
   1e608:	4798      	blx	r3
        if (status != kTfLiteOk) {
   1e60a:	b928      	cbnz	r0, 1e618 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x54>
        status = graph_config->model_output(block_config->output_labels_tensor, output_labels);
   1e60c:	696b      	ldr	r3, [r5, #20]
   1e60e:	7ae0      	ldrb	r0, [r4, #11]
   1e610:	9906      	ldr	r1, [sp, #24]
   1e612:	4798      	blx	r3
        if (status != kTfLiteOk) {
   1e614:	2800      	cmp	r0, #0
   1e616:	d0f1      	beq.n	1e5fc <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x38>
        return EI_IMPULSE_TFLITE_ERROR;
   1e618:	f06f 0002 	mvn.w	r0, #2
   1e61c:	e7ef      	b.n	1e5fe <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x3a>
   1e61e:	4601      	mov	r1, r0
        ei_printf("Failed to initialize the model (error code %d)\n", init_status);
   1e620:	4803      	ldr	r0, [pc, #12]	@ (1e630 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x6c>)
   1e622:	f006 f8ed 	bl	24800 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
   1e626:	f06f 0005 	mvn.w	r0, #5
   1e62a:	e7e8      	b.n	1e5fe <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0+0x3a>
   1e62c:	0001e505 	.word	0x0001e505
   1e630:	0003f084 	.word	0x0003f084

0001e634 <__tcf_1>:
#endif

      _GLIBCXX20_CONSTEXPR
      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
   1e634:	4b03      	ldr	r3, [pc, #12]	@ (1e644 <__tcf_1+0x10>)
   1e636:	6818      	ldr	r0, [r3, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   1e638:	b118      	cbz	r0, 1e642 <__tcf_1+0xe>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1e63a:	6899      	ldr	r1, [r3, #8]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1e63c:	1a09      	subs	r1, r1, r0
   1e63e:	f012 bdff 	b.w	31240 <_ZdlPvj>
    }
}

__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
    std::vector<ei_classifier_cube_t*> bbs;
    static std::vector<ei_impulse_result_bounding_box_t> results;
   1e642:	4770      	bx	lr
   1e644:	100180b0 	.word	0x100180b0

0001e648 <_Z11ei_get_datajjPf>:
static bool debug_nn = false;

// #define FEAT_TEST
int ei_get_data(size_t offset, size_t length, float *out_ptr) {
    uint32_t outindex = 0;
    for (int i = offset; i < offset+length; i++) {
   1e648:	4401      	add	r1, r0
   1e64a:	4281      	cmp	r1, r0
   1e64c:	d931      	bls.n	1e6b2 <_Z11ei_get_datajjPf+0x6a>
int ei_get_data(size_t offset, size_t length, float *out_ptr) {
   1e64e:	b570      	push	{r4, r5, r6, lr}
   1e650:	4c19      	ldr	r4, [pc, #100]	@ (1e6b8 <_Z11ei_get_datajjPf+0x70>)
   1e652:	f104 3eff 	add.w	lr, r4, #4294967295	@ 0xffffffff
        #ifdef GRAYSCALE
            float pix = (grayScaleBuffer[offset + i]<<16)+(grayScaleBuffer[offset + i]<<8)+grayScaleBuffer[offset + i];
        #else
            // Convert RGB565 to RGB888 to pix
            // Grab the 565 pixel at offset + i
            uint16_t pixel = (camBuffer[i * 2 +1] << 8) | camBuffer[i * 2];
   1e656:	f814 3010 	ldrb.w	r3, [r4, r0, lsl #1]
   1e65a:	f81e c010 	ldrb.w	ip, [lr, r0, lsl #1]
   1e65e:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
    *r = ( r5 * 527 + 23 ) >> 6;
   1e662:	ea4f 23dc 	mov.w	r3, ip, lsr #11
    *g = ( g6 * 259 + 33 ) >> 6;
   1e666:	f3cc 1545 	ubfx	r5, ip, #5, #6
    *r = ( r5 * 527 + 23 ) >> 6;
   1e66a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    *g = ( g6 * 259 + 33 ) >> 6;
   1e66e:	eb05 16c5 	add.w	r6, r5, r5, lsl #7
    *r = ( r5 * 527 + 23 ) >> 6;
   1e672:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    *g = ( g6 * 259 + 33 ) >> 6;
   1e676:	eb05 0546 	add.w	r5, r5, r6, lsl #1
    *r = ( r5 * 527 + 23 ) >> 6;
   1e67a:	3317      	adds	r3, #23
    *b = ( b5 * 527 + 23 ) >> 6;
   1e67c:	f00c 0c1f 	and.w	ip, ip, #31
    *g = ( g6 * 259 + 33 ) >> 6;
   1e680:	3521      	adds	r5, #33	@ 0x21
    *r = ( r5 * 527 + 23 ) >> 6;
   1e682:	119b      	asrs	r3, r3, #6
    *b = ( b5 * 527 + 23 ) >> 6;
   1e684:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
    *g = ( g6 * 259 + 33 ) >> 6;
   1e688:	11ad      	asrs	r5, r5, #6
            uint8_t r, g, b;
            r565_to_rgb(pixel, &r, &g, &b);
            float pix = (r << 16) + (g << 8) + b;
   1e68a:	041b      	lsls	r3, r3, #16
    *b = ( b5 * 527 + 23 ) >> 6;
   1e68c:	ebcc 1c4c 	rsb	ip, ip, ip, lsl #5
            float pix = (r << 16) + (g << 8) + b;
   1e690:	eb03 2305 	add.w	r3, r3, r5, lsl #8
    *b = ( b5 * 527 + 23 ) >> 6;
   1e694:	f10c 0c17 	add.w	ip, ip, #23
            float pix = (r << 16) + (g << 8) + b;
   1e698:	eb03 13ac 	add.w	r3, r3, ip, asr #6
   1e69c:	ee07 3a90 	vmov	s15, r3
    for (int i = offset; i < offset+length; i++) {
   1e6a0:	3001      	adds	r0, #1
            float pix = (r << 16) + (g << 8) + b;
   1e6a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (int i = offset; i < offset+length; i++) {
   1e6a6:	4281      	cmp	r1, r0
            float pix = (r << 16) + (g << 8) + b;
   1e6a8:	ece2 7a01 	vstmia	r2!, {s15}
    for (int i = offset; i < offset+length; i++) {
   1e6ac:	d8d3      	bhi.n	1e656 <_Z11ei_get_datajjPf+0xe>
        #endif
        #endif
        out_ptr[outindex++] = pix;
    }
    return 0;
}
   1e6ae:	2000      	movs	r0, #0
   1e6b0:	bd70      	pop	{r4, r5, r6, pc}
   1e6b2:	2000      	movs	r0, #0
   1e6b4:	4770      	bx	lr
   1e6b6:	bf00      	nop
   1e6b8:	10060001 	.word	0x10060001

0001e6bc <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   1e6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
            return this->get_data(offset, length, out_ptr);
   1e6c0:	6804      	ldr	r4, [r0, #0]
   1e6c2:	f8d3 8000 	ldr.w	r8, [r3]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
   1e6c6:	68e3      	ldr	r3, [r4, #12]
   1e6c8:	68a0      	ldr	r0, [r4, #8]
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
   1e6ca:	6812      	ldr	r2, [r2, #0]
   1e6cc:	fbb2 faf0 	udiv	sl, r2, r0
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
   1e6d0:	6a1a      	ldr	r2, [r3, #32]
   1e6d2:	6809      	ldr	r1, [r1, #0]
   1e6d4:	fbb1 f9f0 	udiv	r9, r1, r0
   1e6d8:	fb02 f909 	mul.w	r9, r2, r9

        size_t out_ptr_ix = 0;

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   1e6dc:	fb02 9a0a 	mla	sl, r2, sl, r9
   1e6e0:	45d1      	cmp	r9, sl
   1e6e2:	b087      	sub	sp, #28
        size_t out_ptr_ix = 0;
   1e6e4:	bf38      	it	cc
   1e6e6:	f04f 0b00 	movcc.w	fp, #0
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   1e6ea:	d22c      	bcs.n	1e746 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x8a>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
   1e6ec:	b338      	cbz	r0, 1e73e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x82>
   1e6ee:	eb08 068b 	add.w	r6, r8, fp, lsl #2
   1e6f2:	2500      	movs	r5, #0
   1e6f4:	2701      	movs	r7, #1
   1e6f6:	f8cd 8004 	str.w	r8, [sp, #4]
   1e6fa:	e006      	b.n	1e70a <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x4e>
   1e6fc:	68a0      	ldr	r0, [r4, #8]
   1e6fe:	1c6b      	adds	r3, r5, #1
   1e700:	4283      	cmp	r3, r0
   1e702:	f106 0604 	add.w	r6, r6, #4
   1e706:	d214      	bcs.n	1e732 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x76>
   1e708:	461d      	mov	r5, r3
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
   1e70a:	e9d4 0300 	ldrd	r0, r3, [r4]
   1e70e:	5d5b      	ldrb	r3, [r3, r5]
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
   1e710:	6882      	ldr	r2, [r0, #8]
   1e712:	9605      	str	r6, [sp, #20]
   1e714:	444b      	add	r3, r9
   1e716:	e9cd 3703 	strd	r3, r7, [sp, #12]
   1e71a:	b1c2      	cbz	r2, 1e74e <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x92>
	  __throw_bad_function_call();
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   1e71c:	f8d0 800c 	ldr.w	r8, [r0, #12]
   1e720:	ab05      	add	r3, sp, #20
   1e722:	aa04      	add	r2, sp, #16
   1e724:	a903      	add	r1, sp, #12
   1e726:	47c0      	blx	r8
                if (r != 0) {
   1e728:	2800      	cmp	r0, #0
   1e72a:	d0e7      	beq.n	1e6fc <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x40>
      }
   1e72c:	b007      	add	sp, #28
   1e72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e732:	f10b 0b01 	add.w	fp, fp, #1
   1e736:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1e73a:	68e3      	ldr	r3, [r4, #12]
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
   1e73c:	44ab      	add	fp, r5
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
   1e73e:	6a1a      	ldr	r2, [r3, #32]
   1e740:	4491      	add	r9, r2
   1e742:	45ca      	cmp	sl, r9
   1e744:	d8d2      	bhi.n	1e6ec <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x30>
                    return r;
                }
            }
        }

        return 0;
   1e746:	2000      	movs	r0, #0
   1e748:	b007      	add	sp, #28
   1e74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_bad_function_call();
   1e74e:	f015 fbc1 	bl	33ed4 <_ZSt25__throw_bad_function_callv>
   1e752:	bf00      	nop

0001e754 <_Z11msgReceivedPKhmPv>:
void msgReceived(const uint8_t *buffer, uint32_t length, void *args) {
   1e754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    settings.contrast = buffer[0];
   1e758:	f990 7000 	ldrsb.w	r7, [r0]
    settings.brightness = buffer[1];
   1e75c:	f990 6001 	ldrsb.w	r6, [r0, #1]
    settings.ev = buffer[2];
   1e760:	f990 5002 	ldrsb.w	r5, [r0, #2]
void msgReceived(const uint8_t *buffer, uint32_t length, void *args) {
   1e764:	4604      	mov	r4, r0
   1e766:	4688      	mov	r8, r1
    ns_lp_printf("Received camera settings: contrast %d, brightness %d, ev %d\n", settings.contrast, settings.brightness, settings.ev);
   1e768:	482e      	ldr	r0, [pc, #184]	@ (1e824 <_Z11msgReceivedPKhmPv+0xd0>)
   1e76a:	462b      	mov	r3, r5
   1e76c:	4632      	mov	r2, r6
   1e76e:	4639      	mov	r1, r7
   1e770:	f00d faee 	bl	2bd50 <ns_lp_printf>
    if (in > 3) {
   1e774:	2f03      	cmp	r7, #3
   1e776:	dc11      	bgt.n	1e79c <_Z11msgReceivedPKhmPv+0x48>
    } else if (in < -3) {
   1e778:	1cf9      	adds	r1, r7, #3
   1e77a:	da40      	bge.n	1e7fe <_Z11msgReceivedPKhmPv+0xaa>
    setContrast(camera, (CAM_CONTRAST_LEVEL)mapCameraValuesToArducamScale(contrast));
   1e77c:	482a      	ldr	r0, [pc, #168]	@ (1e828 <_Z11msgReceivedPKhmPv+0xd4>)
   1e77e:	2106      	movs	r1, #6
   1e780:	f00e fce2 	bl	2d148 <setContrast>
    if (in > 3) {
   1e784:	2e03      	cmp	r6, #3
   1e786:	dd0f      	ble.n	1e7a8 <_Z11msgReceivedPKhmPv+0x54>
   1e788:	2105      	movs	r1, #5
    setBrightness(camera, (CAM_BRIGHTNESS_LEVEL) mapCameraValuesToArducamScale(brightness));
   1e78a:	4827      	ldr	r0, [pc, #156]	@ (1e828 <_Z11msgReceivedPKhmPv+0xd4>)
   1e78c:	f00e fce0 	bl	2d150 <setBrightness>
    if (in > 3) {
   1e790:	2d03      	cmp	r5, #3
   1e792:	dc11      	bgt.n	1e7b8 <_Z11msgReceivedPKhmPv+0x64>
    } else if (in < -3) {
   1e794:	1ceb      	adds	r3, r5, #3
   1e796:	da1a      	bge.n	1e7ce <_Z11msgReceivedPKhmPv+0x7a>
   1e798:	2106      	movs	r1, #6
        return abs(in) * 2;
   1e79a:	e00e      	b.n	1e7ba <_Z11msgReceivedPKhmPv+0x66>
   1e79c:	2105      	movs	r1, #5
    setContrast(camera, (CAM_CONTRAST_LEVEL)mapCameraValuesToArducamScale(contrast));
   1e79e:	4822      	ldr	r0, [pc, #136]	@ (1e828 <_Z11msgReceivedPKhmPv+0xd4>)
   1e7a0:	f00e fcd2 	bl	2d148 <setContrast>
    if (in > 3) {
   1e7a4:	2e03      	cmp	r6, #3
   1e7a6:	dcef      	bgt.n	1e788 <_Z11msgReceivedPKhmPv+0x34>
    } else if (in < -3) {
   1e7a8:	1cf2      	adds	r2, r6, #3
   1e7aa:	da1c      	bge.n	1e7e6 <_Z11msgReceivedPKhmPv+0x92>
    setBrightness(camera, (CAM_BRIGHTNESS_LEVEL) mapCameraValuesToArducamScale(brightness));
   1e7ac:	481e      	ldr	r0, [pc, #120]	@ (1e828 <_Z11msgReceivedPKhmPv+0xd4>)
   1e7ae:	2106      	movs	r1, #6
   1e7b0:	f00e fcce 	bl	2d150 <setBrightness>
    if (in > 3) {
   1e7b4:	2d03      	cmp	r5, #3
   1e7b6:	dded      	ble.n	1e794 <_Z11msgReceivedPKhmPv+0x40>
   1e7b8:	2105      	movs	r1, #5
    setEV(camera, (CAM_EV_LEVEL) mapCameraValuesToArducamScale(ev));
   1e7ba:	481b      	ldr	r0, [pc, #108]	@ (1e828 <_Z11msgReceivedPKhmPv+0xd4>)
   1e7bc:	f00e fcc0 	bl	2d140 <setEV>
    ns_lp_printf("Received %d bytes: %s\n", length, buffer);
   1e7c0:	4622      	mov	r2, r4
   1e7c2:	4641      	mov	r1, r8
   1e7c4:	4819      	ldr	r0, [pc, #100]	@ (1e82c <_Z11msgReceivedPKhmPv+0xd8>)
}
   1e7c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ns_lp_printf("Received %d bytes: %s\n", length, buffer);
   1e7ca:	f00d bac1 	b.w	2bd50 <ns_lp_printf>
    if (in == 0) {
   1e7ce:	b315      	cbz	r5, 1e816 <_Z11msgReceivedPKhmPv+0xc2>
        return (abs(in) * 2) - 1;
   1e7d0:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
   1e7d4:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
   1e7d8:	0049      	lsls	r1, r1, #1
    } else if (in < 0) {
   1e7da:	2d00      	cmp	r5, #0
        return (abs(in) * 2) - 1;
   1e7dc:	b2c9      	uxtb	r1, r1
    } else if (in < 0) {
   1e7de:	dbec      	blt.n	1e7ba <_Z11msgReceivedPKhmPv+0x66>
        return (abs(in) * 2) - 1;
   1e7e0:	3901      	subs	r1, #1
   1e7e2:	b2c9      	uxtb	r1, r1
   1e7e4:	e7e9      	b.n	1e7ba <_Z11msgReceivedPKhmPv+0x66>
    if (in == 0) {
   1e7e6:	b1d6      	cbz	r6, 1e81e <_Z11msgReceivedPKhmPv+0xca>
        return (abs(in) * 2) - 1;
   1e7e8:	ea86 71e6 	eor.w	r1, r6, r6, asr #31
   1e7ec:	eba1 71e6 	sub.w	r1, r1, r6, asr #31
   1e7f0:	0049      	lsls	r1, r1, #1
    } else if (in < 0) {
   1e7f2:	2e00      	cmp	r6, #0
        return (abs(in) * 2) - 1;
   1e7f4:	b2c9      	uxtb	r1, r1
    } else if (in < 0) {
   1e7f6:	dbc8      	blt.n	1e78a <_Z11msgReceivedPKhmPv+0x36>
        return (abs(in) * 2) - 1;
   1e7f8:	3901      	subs	r1, #1
   1e7fa:	b2c9      	uxtb	r1, r1
   1e7fc:	e7c5      	b.n	1e78a <_Z11msgReceivedPKhmPv+0x36>
    if (in == 0) {
   1e7fe:	b167      	cbz	r7, 1e81a <_Z11msgReceivedPKhmPv+0xc6>
        return (abs(in) * 2) - 1;
   1e800:	ea87 71e7 	eor.w	r1, r7, r7, asr #31
   1e804:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
   1e808:	0049      	lsls	r1, r1, #1
    } else if (in < 0) {
   1e80a:	2f00      	cmp	r7, #0
        return (abs(in) * 2) - 1;
   1e80c:	b2c9      	uxtb	r1, r1
    } else if (in < 0) {
   1e80e:	dbc6      	blt.n	1e79e <_Z11msgReceivedPKhmPv+0x4a>
        return (abs(in) * 2) - 1;
   1e810:	3901      	subs	r1, #1
   1e812:	b2c9      	uxtb	r1, r1
   1e814:	e7c3      	b.n	1e79e <_Z11msgReceivedPKhmPv+0x4a>
        return 0;
   1e816:	4629      	mov	r1, r5
   1e818:	e7cf      	b.n	1e7ba <_Z11msgReceivedPKhmPv+0x66>
   1e81a:	4639      	mov	r1, r7
   1e81c:	e7bf      	b.n	1e79e <_Z11msgReceivedPKhmPv+0x4a>
   1e81e:	4631      	mov	r1, r6
   1e820:	e7b3      	b.n	1e78a <_Z11msgReceivedPKhmPv+0x36>
   1e822:	bf00      	nop
   1e824:	0003f0b4 	.word	0x0003f0b4
   1e828:	10052938 	.word	0x10052938
   1e82c:	0003f0f4 	.word	0x0003f0f4

0001e830 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
   1e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e834:	ed2d 8b04 	vpush	{d8-d9}
   1e838:	b087      	sub	sp, #28
   1e83a:	4680      	mov	r8, r0
   1e83c:	4689      	mov	r9, r1
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1e83e:	6950      	ldr	r0, [r2, #20]
   1e840:	494a      	ldr	r1, [pc, #296]	@ (1e96c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x13c>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
   1e842:	f8d2 a008 	ldr.w	sl, [r2, #8]
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
   1e846:	f8cd 9004 	str.w	r9, [sp, #4]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1e84a:	f7f9 fcd9 	bl	18200 <strcmp>
#else
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
   1e84e:	f8d8 b010 	ldr.w	fp, [r8, #16]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1e852:	2800      	cmp	r0, #0
   1e854:	bf14      	ite	ne
   1e856:	2603      	movne	r6, #3
   1e858:	2601      	moveq	r6, #1
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1e85a:	f1bb 0f00 	cmp.w	fp, #0
   1e85e:	d076      	beq.n	1e94e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11e>
   1e860:	f04f 0900 	mov.w	r9, #0

        for (size_t jx = 0; jx < elements_to_read; jx++) {
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   1e864:	ed9f 8a42 	vldr	s16, [pc, #264]	@ 1e970 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x140>
                output_matrix->buffer[output_ix++] = b;
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1e868:	eddf 9a42 	vldr	s19, [pc, #264]	@ 1e974 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x144>
   1e86c:	ed9f 9a42 	vldr	s18, [pc, #264]	@ 1e978 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x148>
   1e870:	eddf 8a42 	vldr	s17, [pc, #264]	@ 1e97c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14c>
    size_t output_ix = 0;
   1e874:	f8cd a000 	str.w	sl, [sp]
   1e878:	464c      	mov	r4, r9
        if (a_buffer) {
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   1e87a:	9b00      	ldr	r3, [sp, #0]
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
   1e87c:	f5bb 6f80 	cmp.w	fp, #1024	@ 0x400
   1e880:	465d      	mov	r5, fp
   1e882:	bf28      	it	cs
   1e884:	f44f 6580 	movcs.w	r5, #1024	@ 0x400
   1e888:	fb05 f003 	mul.w	r0, r5, r3
   1e88c:	2101      	movs	r1, #1
   1e88e:	0080      	lsls	r0, r0, #2
   1e890:	f005 ffe2 	bl	24858 <_Z9ei_callocjj>
        if (!input_matrix.buffer) {
   1e894:	4682      	mov	sl, r0
   1e896:	2800      	cmp	r0, #0
   1e898:	d05f      	beq.n	1e95a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12a>
	if (_M_empty())
   1e89a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e89e:	9005      	str	r0, [sp, #20]
   1e8a0:	e9cd 9503 	strd	r9, r5, [sp, #12]
   1e8a4:	2b00      	cmp	r3, #0
   1e8a6:	d05e      	beq.n	1e966 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x136>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   1e8a8:	f8d8 700c 	ldr.w	r7, [r8, #12]
   1e8ac:	ab05      	add	r3, sp, #20
   1e8ae:	aa04      	add	r2, sp, #16
   1e8b0:	a903      	add	r1, sp, #12
   1e8b2:	4640      	mov	r0, r8
   1e8b4:	47b8      	blx	r7
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e8b6:	f1bb 0f00 	cmp.w	fp, #0
   1e8ba:	d03d      	beq.n	1e938 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x108>
                output_matrix->buffer[output_ix++] = r;
   1e8bc:	9b01      	ldr	r3, [sp, #4]
   1e8be:	4650      	mov	r0, sl
   1e8c0:	681f      	ldr	r7, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e8c2:	2200      	movs	r2, #0
   1e8c4:	e00c      	b.n	1e8e0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb0>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1e8c6:	ee27 7a29 	vmul.f32	s14, s14, s19
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e8ca:	3201      	adds	r2, #1
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1e8cc:	eea6 7a89 	vfma.f32	s14, s13, s18
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e8d0:	4295      	cmp	r5, r2
                output_matrix->buffer[output_ix++] = r;
   1e8d2:	f104 0401 	add.w	r4, r4, #1
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1e8d6:	eea7 7aa8 	vfma.f32	s14, s15, s17
                output_matrix->buffer[output_ix++] = v;
   1e8da:	ed81 7a00 	vstr	s14, [r1]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e8de:	d92b      	bls.n	1e938 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x108>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   1e8e0:	ecf0 7a01 	vldmia	r0!, {s15}
   1e8e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (channel_count == 3) {
   1e8e8:	2e03      	cmp	r6, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   1e8ea:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   1e8ee:	f3c3 4c07 	ubfx	ip, r3, #16, #8
   1e8f2:	ee07 ca90 	vmov	s15, ip
   1e8f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   1e8fa:	f3c3 2c07 	ubfx	ip, r3, #8, #8
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   1e8fe:	b2db      	uxtb	r3, r3
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
   1e900:	ee67 6a88 	vmul.f32	s13, s15, s16
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   1e904:	ee07 ca10 	vmov	s14, ip
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   1e908:	ee07 3a90 	vmov	s15, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   1e90c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   1e910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
   1e914:	ee27 7a08 	vmul.f32	s14, s14, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
   1e918:	ee67 7a88 	vmul.f32	s15, s15, s16
                output_matrix->buffer[output_ix++] = r;
   1e91c:	eb07 0184 	add.w	r1, r7, r4, lsl #2
            if (channel_count == 3) {
   1e920:	d1d1      	bne.n	1e8c6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e922:	3201      	adds	r2, #1
   1e924:	4295      	cmp	r5, r2
                output_matrix->buffer[output_ix++] = r;
   1e926:	edc1 6a00 	vstr	s13, [r1]
                output_matrix->buffer[output_ix++] = g;
   1e92a:	ed81 7a01 	vstr	s14, [r1, #4]
                output_matrix->buffer[output_ix++] = b;
   1e92e:	f104 0403 	add.w	r4, r4, #3
   1e932:	edc1 7a02 	vstr	s15, [r1, #8]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1e936:	d8d3      	bhi.n	1e8e0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb0>
        }
    }

    ~ei_matrix() {
        if (buffer && buffer_managed_by_me) {
            ei_free(buffer);
   1e938:	4650      	mov	r0, sl
   1e93a:	f005 ff9b 	bl	24874 <_Z7ei_freePv>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1e93e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1e942:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
   1e946:	454b      	cmp	r3, r9
            }
        }

        bytes_left -= elements_to_read;
   1e948:	ebab 0b05 	sub.w	fp, fp, r5
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1e94c:	d895      	bhi.n	1e87a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4a>
    }

    return EIDSP_OK;
   1e94e:	2000      	movs	r0, #0
}
   1e950:	b007      	add	sp, #28
   1e952:	ecbd 8b04 	vpop	{d8-d9}
   1e956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
   1e95a:	4809      	ldr	r0, [pc, #36]	@ (1e980 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x150>)
}
   1e95c:	b007      	add	sp, #28
   1e95e:	ecbd 8b04 	vpop	{d8-d9}
   1e962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  __throw_bad_function_call();
   1e966:	f015 fab5 	bl	33ed4 <_ZSt25__throw_bad_function_callv>
   1e96a:	bf00      	nop
   1e96c:	0003f128 	.word	0x0003f128
   1e970:	3b808081 	.word	0x3b808081
   1e974:	3f1645a2 	.word	0x3f1645a2
   1e978:	3e991687 	.word	0x3e991687
   1e97c:	3de978d5 	.word	0x3de978d5
   1e980:	fffffc16 	.word	0xfffffc16

0001e984 <run_postprocessing>:
}

extern "C" EI_IMPULSE_ERROR run_postprocessing(ei_impulse_handle_t *handle,
                                               ei_impulse_result_t *result,
                                               bool debug) {
    if (!handle) {
   1e984:	b1f8      	cbz	r0, 1e9c6 <run_postprocessing+0x42>
                                               bool debug) {
   1e986:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        return EI_IMPULSE_OUT_OF_MEMORY;
    }
    auto impulse = handle->impulse;
   1e98a:	6905      	ldr	r5, [r0, #16]

    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
   1e98c:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
   1e98e:	4606      	mov	r6, r0
   1e990:	b1b3      	cbz	r3, 1e9c0 <run_postprocessing+0x3c>
   1e992:	460f      	mov	r7, r1
   1e994:	4690      	mov	r8, r2
   1e996:	2400      	movs	r4, #0
   1e998:	e002      	b.n	1e9a0 <run_postprocessing+0x1c>
   1e99a:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
   1e99c:	42a3      	cmp	r3, r4
   1e99e:	d90f      	bls.n	1e9c0 <run_postprocessing+0x3c>

        EI_IMPULSE_ERROR res = impulse->postprocessing_blocks[i].postprocess_fn(handle, result, impulse->postprocessing_blocks[i].config, debug);
   1e9a0:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
   1e9a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1e9a6:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
   1e9aa:	e9dc 9203 	ldrd	r9, r2, [ip, #12]
   1e9ae:	4643      	mov	r3, r8
   1e9b0:	4639      	mov	r1, r7
   1e9b2:	4630      	mov	r0, r6
   1e9b4:	47c8      	blx	r9
    for (size_t i = 0; i < impulse->postprocessing_blocks_size; i++) {
   1e9b6:	3401      	adds	r4, #1
        if (res != EI_IMPULSE_OK) {
   1e9b8:	2800      	cmp	r0, #0
   1e9ba:	d0ee      	beq.n	1e99a <run_postprocessing+0x16>
            return res;
        }
    }

    return EI_IMPULSE_OK;
}
   1e9bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return EI_IMPULSE_OK;
   1e9c0:	2000      	movs	r0, #0
}
   1e9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return EI_IMPULSE_OUT_OF_MEMORY;
   1e9c6:	f06f 000a 	mvn.w	r0, #10
}
   1e9ca:	4770      	bx	lr

0001e9cc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>:
    ei_feature_t *fmatrix,
    TfLiteTensor *input,
    uint32_t* input_block_ids,
    uint32_t input_block_ids_size,
    size_t mtx_size
) {
   1e9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9d0:	b083      	sub	sp, #12
   1e9d2:	460d      	mov	r5, r1
   1e9d4:	9001      	str	r0, [sp, #4]
    size_t matrix_els = 0;
    uint32_t input_idx = 0;

    for (size_t i = 0; i < input_block_ids_size; i++) {
   1e9d6:	469b      	mov	fp, r3
   1e9d8:	2b00      	cmp	r3, #0
   1e9da:	f000 8089 	beq.w	1eaf0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x124>
   1e9de:	2700      	movs	r7, #0
    uint32_t input_idx = 0;
   1e9e0:	463e      	mov	r6, r7
    size_t matrix_els = 0;
   1e9e2:	46b8      	mov	r8, r7
        if (!find_mtx_by_idx(fmatrix, &matrix, cur_mtx, mtx_size)) {
            ei_printf("ERR: Cannot find matrix with id %zu\n", cur_mtx);
            return EI_IMPULSE_INVALID_SIZE;
        }
#else
        ei::matrix_t* matrix = fmatrix[0].matrix;
   1e9e4:	9b01      	ldr	r3, [sp, #4]
#endif

        matrix_els += matrix->rows * matrix->cols;

        switch (input->type) {
   1e9e6:	7f29      	ldrb	r1, [r5, #28]
        ei::matrix_t* matrix = fmatrix[0].matrix;
   1e9e8:	681c      	ldr	r4, [r3, #0]
        matrix_els += matrix->rows * matrix->cols;
   1e9ea:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
        switch (input->type) {
   1e9ee:	2903      	cmp	r1, #3
        matrix_els += matrix->rows * matrix->cols;
   1e9f0:	fb02 f303 	mul.w	r3, r2, r3
   1e9f4:	4498      	add	r8, r3
        switch (input->type) {
   1e9f6:	d00b      	beq.n	1ea10 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x44>
   1e9f8:	2909      	cmp	r1, #9
   1e9fa:	d04b      	beq.n	1ea94 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xc8>
   1e9fc:	2901      	cmp	r1, #1
   1e9fe:	d036      	beq.n	1ea6e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xa2>
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
                        pre_cast_quantize(val, input->params.scale, input->params.zero_point, false));            }
                break;
            }
            default: {
                ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
   1ea00:	4841      	ldr	r0, [pc, #260]	@ (1eb08 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x13c>)
   1ea02:	f005 fefd 	bl	24800 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
   1ea06:	f06f 000c 	mvn.w	r0, #12
            (int)input->bytes, (int)matrix_els);
        return EI_IMPULSE_INVALID_SIZE;
    }

    return EI_IMPULSE_OK;
}
   1ea0a:	b003      	add	sp, #12
   1ea0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1ea10:	f04f 0900 	mov.w	r9, #0
   1ea14:	b1f3      	cbz	r3, 1ea54 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x88>
                    float val = (float)matrix->buffer[ix];
   1ea16:	6823      	ldr	r3, [r4, #0]
static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {

    int32_t max_value = is_signed ? 127 : 255;
    int32_t min_value = is_signed ? -128 : 0;
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
   1ea18:	edd5 7a02 	vldr	s15, [r5, #8]
   1ea1c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
   1ea20:	ed93 0a00 	vldr	s0, [r3]
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   1ea24:	ee80 0a27 	vdiv.f32	s0, s0, s15
   1ea28:	f006 fa72 	bl	24f10 <roundf>
   1ea2c:	68ea      	ldr	r2, [r5, #12]
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
   1ea2e:	692b      	ldr	r3, [r5, #16]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1ea30:	f109 0901 	add.w	r9, r9, #1
   1ea34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1ea38:	ee10 0a10 	vmov	r0, s0
   1ea3c:	4410      	add	r0, r2
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
   1ea3e:	f380 0208 	usat	r2, #8, r0
   1ea42:	559a      	strb	r2, [r3, r6]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1ea44:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1ea48:	fb02 f303 	mul.w	r3, r2, r3
   1ea4c:	454b      	cmp	r3, r9
                    input->data.uint8[input_idx++] = static_cast<uint8_t>(
   1ea4e:	f106 0601 	add.w	r6, r6, #1
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1ea52:	d8e0      	bhi.n	1ea16 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x4a>
    for (size_t i = 0; i < input_block_ids_size; i++) {
   1ea54:	3701      	adds	r7, #1
   1ea56:	45bb      	cmp	fp, r7
   1ea58:	d1c4      	bne.n	1e9e4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x18>
    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
   1ea5a:	69a9      	ldr	r1, [r5, #24]
   1ea5c:	ebb8 0f91 	cmp.w	r8, r1, lsr #2
   1ea60:	d001      	beq.n	1ea66 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x9a>
   1ea62:	4541      	cmp	r1, r8
   1ea64:	d14e      	bne.n	1eb04 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x138>
    return EI_IMPULSE_OK;
   1ea66:	2000      	movs	r0, #0
}
   1ea68:	b003      	add	sp, #12
   1ea6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1ea6e:	2b00      	cmp	r3, #0
   1ea70:	d0f0      	beq.n	1ea54 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x88>
   1ea72:	6822      	ldr	r2, [r4, #0]
   1ea74:	6929      	ldr	r1, [r5, #16]
   1ea76:	eb02 0483 	add.w	r4, r2, r3, lsl #2
   1ea7a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
                    input->data.f[input_idx++] = matrix->buffer[ix];
   1ea7e:	f852 0b04 	ldr.w	r0, [r2], #4
   1ea82:	f841 0b04 	str.w	r0, [r1], #4
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1ea86:	4294      	cmp	r4, r2
   1ea88:	d1f9      	bne.n	1ea7e <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xb2>
    for (size_t i = 0; i < input_block_ids_size; i++) {
   1ea8a:	3701      	adds	r7, #1
   1ea8c:	45bb      	cmp	fp, r7
   1ea8e:	441e      	add	r6, r3
   1ea90:	d1a8      	bne.n	1e9e4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x18>
   1ea92:	e7e2      	b.n	1ea5a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8e>
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1ea94:	2b00      	cmp	r3, #0
   1ea96:	d0dd      	beq.n	1ea54 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x88>
   1ea98:	f04f 0a00 	mov.w	sl, #0
                    input->data.int8[input_idx++] = static_cast<int8_t>(
   1ea9c:	f06f 097f 	mvn.w	r9, #127	@ 0x7f
                    float val = (float)matrix->buffer[ix];
   1eaa0:	6823      	ldr	r3, [r4, #0]
   1eaa2:	edd5 7a02 	vldr	s15, [r5, #8]
   1eaa6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
   1eaaa:	ed93 0a00 	vldr	s0, [r3]
   1eaae:	ee80 0a27 	vdiv.f32	s0, s0, s15
   1eab2:	f006 fa2d 	bl	24f10 <roundf>
   1eab6:	68eb      	ldr	r3, [r5, #12]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eab8:	f10a 0a01 	add.w	sl, sl, #1
   1eabc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   1eac0:	ee10 2a10 	vmov	r2, s0
   1eac4:	441a      	add	r2, r3
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
   1eac6:	2a7f      	cmp	r2, #127	@ 0x7f
   1eac8:	bfa8      	it	ge
   1eaca:	227f      	movge	r2, #127	@ 0x7f
                    input->data.int8[input_idx++] = static_cast<int8_t>(
   1eacc:	454a      	cmp	r2, r9
   1eace:	692b      	ldr	r3, [r5, #16]
   1ead0:	bfb8      	it	lt
   1ead2:	464a      	movlt	r2, r9
   1ead4:	559a      	strb	r2, [r3, r6]
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1ead6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1eada:	fb02 f303 	mul.w	r3, r2, r3
   1eade:	4553      	cmp	r3, sl
                    input->data.int8[input_idx++] = static_cast<int8_t>(
   1eae0:	f106 0601 	add.w	r6, r6, #1
                for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
   1eae4:	d8dc      	bhi.n	1eaa0 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0xd4>
    for (size_t i = 0; i < input_block_ids_size; i++) {
   1eae6:	3701      	adds	r7, #1
   1eae8:	45bb      	cmp	fp, r7
   1eaea:	f47f af7b 	bne.w	1e9e4 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x18>
   1eaee:	e7b4      	b.n	1ea5a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x8e>
    if (input->bytes / 4 != matrix_els && input->bytes != matrix_els) {
   1eaf0:	6989      	ldr	r1, [r1, #24]
   1eaf2:	088b      	lsrs	r3, r1, #2
   1eaf4:	d0b7      	beq.n	1ea66 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x9a>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
   1eaf6:	4805      	ldr	r0, [pc, #20]	@ (1eb0c <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x140>)
   1eaf8:	465a      	mov	r2, fp
   1eafa:	f005 fe81 	bl	24800 <_Z9ei_printfPKcz>
        return EI_IMPULSE_INVALID_SIZE;
   1eafe:	f06f 0017 	mvn.w	r0, #23
   1eb02:	e782      	b.n	1ea0a <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x3e>
        ei_printf("ERR: input tensor has size %d bytes, but input matrix has has size %d bytes\n",
   1eb04:	46c3      	mov	fp, r8
   1eb06:	e7f6      	b.n	1eaf6 <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj+0x12a>
   1eb08:	0003f134 	.word	0x0003f134
   1eb0c:	0003f158 	.word	0x0003f158

0001eb10 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>:
}

EI_IMPULSE_ERROR fill_output_matrix_from_tensor(
    TfLiteTensor *output,
    matrix_t *output_matrix
) {
   1eb10:	b510      	push	{r4, lr}
   1eb12:	460b      	mov	r3, r1
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
   1eb14:	e9d1 2401 	ldrd	r2, r4, [r1, #4]

    switch (output->type) {
   1eb18:	7f01      	ldrb	r1, [r0, #28]
   1eb1a:	2903      	cmp	r1, #3
    const size_t matrix_els = output_matrix->rows * output_matrix->cols;
   1eb1c:	fb02 f404 	mul.w	r4, r2, r4
    switch (output->type) {
   1eb20:	d02f      	beq.n	1eb82 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x72>
   1eb22:	2909      	cmp	r1, #9
   1eb24:	d00b      	beq.n	1eb3e <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2e>
   1eb26:	2901      	cmp	r1, #1
   1eb28:	d125      	bne.n	1eb76 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x66>
        case kTfLiteFloat32: {
            if (output->bytes / 4 != matrix_els) {
   1eb2a:	6982      	ldr	r2, [r0, #24]
   1eb2c:	ebb4 0f92 	cmp.w	r4, r2, lsr #2
   1eb30:	d143      	bne.n	1ebba <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xaa>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
                    (int)output->bytes / 4, (int)matrix_els);
                return EI_IMPULSE_INVALID_SIZE;
            }

            memcpy(output_matrix->buffer, output->data.f, output->bytes);
   1eb32:	6901      	ldr	r1, [r0, #16]
   1eb34:	6818      	ldr	r0, [r3, #0]
   1eb36:	f7f9 fd23 	bl	18580 <memcpy>
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
        }
    }

    return EI_IMPULSE_OK;
   1eb3a:	2000      	movs	r0, #0
}
   1eb3c:	bd10      	pop	{r4, pc}
            if (output->bytes != matrix_els) {
   1eb3e:	6981      	ldr	r1, [r0, #24]
   1eb40:	42a1      	cmp	r1, r4
   1eb42:	d145      	bne.n	1ebd0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xc0>
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1eb44:	2900      	cmp	r1, #0
   1eb46:	d0f8      	beq.n	1eb3a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
   1eb48:	6902      	ldr	r2, [r0, #16]
   1eb4a:	68c4      	ldr	r4, [r0, #12]
   1eb4c:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
   1eb50:	6819      	ldr	r1, [r3, #0]
   1eb52:	4494      	add	ip, r2
   1eb54:	3a01      	subs	r2, #1
   1eb56:	f912 3f01 	ldrsb.w	r3, [r2, #1]!
   1eb5a:	ed90 7a02 	vldr	s14, [r0, #8]
   1eb5e:	1b1b      	subs	r3, r3, r4
   1eb60:	ee07 3a90 	vmov	s15, r3
   1eb64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1eb68:	4562      	cmp	r2, ip
                float value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
   1eb6a:	ee67 7a87 	vmul.f32	s15, s15, s14
                output_matrix->buffer[ix] = value;
   1eb6e:	ece1 7a01 	vstmia	r1!, {s15}
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1eb72:	d1f0      	bne.n	1eb56 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x46>
   1eb74:	e7e1      	b.n	1eb3a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
            ei_printf("ERR: Cannot handle output type (%d)\n", output->type);
   1eb76:	4819      	ldr	r0, [pc, #100]	@ (1ebdc <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xcc>)
   1eb78:	f005 fe42 	bl	24800 <_Z9ei_printfPKcz>
            return EI_IMPULSE_OUTPUT_TENSOR_WAS_NULL;
   1eb7c:	f06f 000d 	mvn.w	r0, #13
}
   1eb80:	bd10      	pop	{r4, pc}
            if (output->bytes != matrix_els) {
   1eb82:	6981      	ldr	r1, [r0, #24]
   1eb84:	42a1      	cmp	r1, r4
   1eb86:	d123      	bne.n	1ebd0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xc0>
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1eb88:	2900      	cmp	r1, #0
   1eb8a:	d0d6      	beq.n	1eb3a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
   1eb8c:	6902      	ldr	r2, [r0, #16]
   1eb8e:	68c4      	ldr	r4, [r0, #12]
   1eb90:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
   1eb94:	6819      	ldr	r1, [r3, #0]
   1eb96:	4494      	add	ip, r2
   1eb98:	3a01      	subs	r2, #1
   1eb9a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1eb9e:	ed90 7a02 	vldr	s14, [r0, #8]
   1eba2:	1b1b      	subs	r3, r3, r4
   1eba4:	ee07 3a90 	vmov	s15, r3
   1eba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1ebac:	4594      	cmp	ip, r2
                float value = static_cast<float>(output->data.uint8[ix] - output->params.zero_point) * output->params.scale;
   1ebae:	ee67 7a87 	vmul.f32	s15, s15, s14
                output_matrix->buffer[ix] = value;
   1ebb2:	ece1 7a01 	vstmia	r1!, {s15}
            for (size_t ix = 0; ix < output->bytes; ix++) {
   1ebb6:	d1f0      	bne.n	1eb9a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x8a>
   1ebb8:	e7bf      	b.n	1eb3a <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0x2a>
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
   1ebba:	1e11      	subs	r1, r2, #0
   1ebbc:	bfb8      	it	lt
   1ebbe:	3103      	addlt	r1, #3
   1ebc0:	4807      	ldr	r0, [pc, #28]	@ (1ebe0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd0>)
   1ebc2:	4622      	mov	r2, r4
   1ebc4:	1089      	asrs	r1, r1, #2
   1ebc6:	f005 fe1b 	bl	24800 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
   1ebca:	f06f 0017 	mvn.w	r0, #23
}
   1ebce:	bd10      	pop	{r4, pc}
                ei_printf("ERR: output tensor has size %d, but input matrix has has size %d\n",
   1ebd0:	4803      	ldr	r0, [pc, #12]	@ (1ebe0 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xd0>)
   1ebd2:	4622      	mov	r2, r4
   1ebd4:	f005 fe14 	bl	24800 <_Z9ei_printfPKcz>
                return EI_IMPULSE_INVALID_SIZE;
   1ebd8:	e7f7      	b.n	1ebca <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE+0xba>
   1ebda:	bf00      	nop
   1ebdc:	0003f1ec 	.word	0x0003f1ec
   1ebe0:	0003f1a8 	.word	0x0003f1a8

0001ebe4 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    ei_impulse_handle_t *handle,
    ei_feature_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
   1ebe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebe8:	4606      	mov	r6, r0
    auto& impulse = handle->impulse;
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
   1ebea:	6900      	ldr	r0, [r0, #16]
{
   1ebec:	4698      	mov	r8, r3
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
   1ebee:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
   1ebf2:	b085      	sub	sp, #20
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
   1ebf4:	b323      	cbz	r3, 1ec40 <run_inference+0x5c>
   1ebf6:	460f      	mov	r7, r1
   1ebf8:	4615      	mov	r5, r2
   1ebfa:	2400      	movs	r4, #0
   1ebfc:	e004      	b.n	1ec08 <run_inference+0x24>
   1ebfe:	6930      	ldr	r0, [r6, #16]
   1ec00:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
   1ec04:	42a3      	cmp	r3, r4
   1ec06:	d91b      	bls.n	1ec40 <run_inference+0x5c>

        ei_learning_block_t block = impulse->learning_blocks[ix];
   1ec08:	6d83      	ldr	r3, [r0, #88]	@ 0x58
   1ec0a:	eb03 1c44 	add.w	ip, r3, r4, lsl #5
        }
#endif

        result->copy_output = block.keep_output;

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
   1ec0e:	4622      	mov	r2, r4
        ei_learning_block_t block = impulse->learning_blocks[ix];
   1ec10:	f8dc a00c 	ldr.w	sl, [ip, #12]
   1ec14:	f89c e018 	ldrb.w	lr, [ip, #24]
        result->copy_output = block.keep_output;
   1ec18:	f89c b004 	ldrb.w	fp, [ip, #4]
        ei_learning_block_t block = impulse->learning_blocks[ix];
   1ec1c:	f8dc 3014 	ldr.w	r3, [ip, #20]
   1ec20:	f8dc 9008 	ldr.w	r9, [ip, #8]
        result->copy_output = block.keep_output;
   1ec24:	f885 b040 	strb.w	fp, [r5, #64]	@ 0x40
        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, ix, (uint32_t*)block.input_block_ids, block.input_block_ids_size, result, block.config, debug);
   1ec28:	4639      	mov	r1, r7
   1ec2a:	e9cd a802 	strd	sl, r8, [sp, #8]
   1ec2e:	e9cd e500 	strd	lr, r5, [sp]
   1ec32:	47c8      	blx	r9
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
   1ec34:	3401      	adds	r4, #1
        if (res != EI_IMPULSE_OK) {
   1ec36:	2800      	cmp	r0, #0
   1ec38:	d0e1      	beq.n	1ebfe <run_inference+0x1a>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
}
   1ec3a:	b005      	add	sp, #20
   1ec3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   1ec40:	f005 fdd4 	bl	247ec <_Z29ei_run_impulse_check_canceledv>
    return EI_IMPULSE_OK;
   1ec44:	1c83      	adds	r3, r0, #2
   1ec46:	bf18      	it	ne
   1ec48:	2000      	movne	r0, #0
}
   1ec4a:	b005      	add	sp, #20
   1ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ec50 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
   1ec50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec54:	e9d0 7500 	ldrd	r7, r5, [r0]
   1ec58:	4689      	mov	r9, r1
   1ec5a:	4693      	mov	fp, r2
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   1ec5c:	f06f 4160 	mvn.w	r1, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1ec60:	1bea      	subs	r2, r5, r7
	if (max_size() - size() < __n)
   1ec62:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
   1ec66:	b083      	sub	sp, #12
   1ec68:	d05d      	beq.n	1ed26 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd6>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
   1ec6a:	42af      	cmp	r7, r5
   1ec6c:	4604      	mov	r4, r0
   1ec6e:	ea4f 03a2 	mov.w	r3, r2, asr #2
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   1ec72:	eba9 0a07 	sub.w	sl, r9, r7
   1ec76:	d03f      	beq.n	1ecf8 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa8>
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1ec78:	ebb3 0f43 	cmp.w	r3, r3, lsl #1
	const size_type __len = size() + (std::max)(size(), __n);
   1ec7c:	ea4f 0643 	mov.w	r6, r3, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1ec80:	d819      	bhi.n	1ecb6 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x66>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1ec82:	46b0      	mov	r8, r6
   1ec84:	2e00      	cmp	r6, #0
   1ec86:	d149      	bne.n	1ed1c <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
      template<typename _Up, typename... _Args>
	__attribute__((__always_inline__))
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1ec88:	f8db 3000 	ldr.w	r3, [fp]
   1ec8c:	f848 300a 	str.w	r3, [r8, sl]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   1ec90:	f10a 0b04 	add.w	fp, sl, #4
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
   1ec94:	eba5 0309 	sub.w	r3, r5, r9
   1ec98:	44c3      	add	fp, r8
      if (__count > 0)
   1ec9a:	f1ba 0f00 	cmp.w	sl, #0
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
	}
      return __result + __count;
   1ec9e:	eb0b 0503 	add.w	r5, fp, r3
      if (__count > 0)
   1eca2:	dc15      	bgt.n	1ecd0 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x80>
   1eca4:	2b00      	cmp	r3, #0
   1eca6:	dc0d      	bgt.n	1ecc4 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x74>
	if (__p)
   1eca8:	b9df      	cbnz	r7, 1ece2 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x92>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
   1ecaa:	e9c4 8500 	strd	r8, r5, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1ecae:	60a6      	str	r6, [r4, #8]
    }
   1ecb0:	b003      	add	sp, #12
   1ecb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecb6:	4e1d      	ldr	r6, [pc, #116]	@ (1ed2c <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xdc>)
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ecb8:	4630      	mov	r0, r6
   1ecba:	f012 fabb 	bl	31234 <_Znwj>
   1ecbe:	4680      	mov	r8, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1ecc0:	4406      	add	r6, r0
   1ecc2:	e7e1      	b.n	1ec88 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x38>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1ecc4:	461a      	mov	r2, r3
   1ecc6:	4649      	mov	r1, r9
   1ecc8:	4658      	mov	r0, fp
   1ecca:	f7f9 fc59 	bl	18580 <memcpy>
   1ecce:	e7eb      	b.n	1eca8 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x58>
   1ecd0:	4652      	mov	r2, sl
   1ecd2:	4639      	mov	r1, r7
   1ecd4:	4640      	mov	r0, r8
   1ecd6:	9301      	str	r3, [sp, #4]
   1ecd8:	f007 ff74 	bl	26bc4 <memmove>
      if (__count > 0)
   1ecdc:	9b01      	ldr	r3, [sp, #4]
   1ecde:	2b00      	cmp	r3, #0
   1ece0:	dc11      	bgt.n	1ed06 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb6>
		    this->_M_impl._M_end_of_storage - __old_start);
   1ece2:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ece4:	4638      	mov	r0, r7
   1ece6:	1bc9      	subs	r1, r1, r7
   1ece8:	f012 faaa 	bl	31240 <_ZdlPvj>
      this->_M_impl._M_finish = __new_finish;
   1ecec:	e9c4 8500 	strd	r8, r5, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1ecf0:	60a6      	str	r6, [r4, #8]
    }
   1ecf2:	b003      	add	sp, #12
   1ecf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ecf8:	3301      	adds	r3, #1
   1ecfa:	d2dc      	bcs.n	1ecb6 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x66>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1ecfc:	428b      	cmp	r3, r1
   1ecfe:	bf28      	it	cs
   1ed00:	460b      	movcs	r3, r1
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ed02:	009e      	lsls	r6, r3, #2
   1ed04:	e7d8      	b.n	1ecb8 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x68>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1ed06:	4649      	mov	r1, r9
   1ed08:	461a      	mov	r2, r3
   1ed0a:	4658      	mov	r0, fp
   1ed0c:	f7f9 fc38 	bl	18580 <memcpy>
		    this->_M_impl._M_end_of_storage - __old_start);
   1ed10:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ed12:	4638      	mov	r0, r7
   1ed14:	1bc9      	subs	r1, r1, r7
   1ed16:	f012 fa93 	bl	31240 <_ZdlPvj>
   1ed1a:	e7e7      	b.n	1ecec <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9c>
   1ed1c:	42b1      	cmp	r1, r6
   1ed1e:	bf28      	it	cs
   1ed20:	4631      	movcs	r1, r6
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ed22:	008e      	lsls	r6, r1, #2
   1ed24:	e7c8      	b.n	1ecb8 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x68>
	  __throw_length_error(__N(__s));
   1ed26:	4802      	ldr	r0, [pc, #8]	@ (1ed30 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe0>)
   1ed28:	f015 f8a0 	bl	33e6c <_ZSt20__throw_length_errorPKc>
   1ed2c:	7ffffffc 	.word	0x7ffffffc
   1ed30:	0003f10c 	.word	0x0003f10c

0001ed34 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0>:
__attribute__((unused)) static void ei_handle_cube(std::vector<ei_classifier_cube_t*> *cubes, int x, int y, float vf, const char *label, float detection_threshold) {
   1ed34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      : _M_current(__i) { }
   1ed38:	6804      	ldr	r4, [r0, #0]
   1ed3a:	f8d0 9004 	ldr.w	r9, [r0, #4]
   1ed3e:	ed2d 8b02 	vpush	{d8}
    for (auto c : *cubes) {
   1ed42:	454c      	cmp	r4, r9
__attribute__((unused)) static void ei_handle_cube(std::vector<ei_classifier_cube_t*> *cubes, int x, int y, float vf, const char *label, float detection_threshold) {
   1ed44:	b085      	sub	sp, #20
   1ed46:	4683      	mov	fp, r0
   1ed48:	eeb0 8a40 	vmov.f32	s16, s0
   1ed4c:	4688      	mov	r8, r1
   1ed4e:	4616      	mov	r6, r2
   1ed50:	461f      	mov	r7, r3
    for (auto c : *cubes) {
   1ed52:	d018      	beq.n	1ed86 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x52>
        if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   1ed54:	f04f 0a01 	mov.w	sl, #1
    for (auto c : *cubes) {
   1ed58:	f854 5b04 	ldr.w	r5, [r4], #4
        if (strcmp(c->label, label) != 0) continue;
   1ed5c:	4639      	mov	r1, r7
   1ed5e:	6968      	ldr	r0, [r5, #20]
   1ed60:	f7f9 fa4e 	bl	18200 <strcmp>
   1ed64:	4684      	mov	ip, r0
        if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   1ed66:	2301      	movs	r3, #1
   1ed68:	eeb0 0a48 	vmov.f32	s0, s16
   1ed6c:	4632      	mov	r2, r6
   1ed6e:	4641      	mov	r1, r8
   1ed70:	4628      	mov	r0, r5
        if (strcmp(c->label, label) != 0) continue;
   1ed72:	f1bc 0f00 	cmp.w	ip, #0
   1ed76:	d104      	bne.n	1ed82 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x4e>
        if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   1ed78:	f8cd a000 	str.w	sl, [sp]
   1ed7c:	f7ff fb6c 	bl	1e458 <_ZL21ei_cube_check_overlapP4cubeiiiif>
   1ed80:	b9c0      	cbnz	r0, 1edb4 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x80>
    for (auto c : *cubes) {
   1ed82:	45a1      	cmp	r9, r4
   1ed84:	d1e8      	bne.n	1ed58 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x24>
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
   1ed86:	2018      	movs	r0, #24
   1ed88:	f012 fa54 	bl	31234 <_Znwj>
        cube->width = 1;
   1ed8c:	2301      	movs	r3, #1
   1ed8e:	e9c0 6301 	strd	r6, r3, [r0, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1ed92:	f8db 1004 	ldr.w	r1, [fp, #4]
   1ed96:	60c3      	str	r3, [r0, #12]
   1ed98:	f8db 3008 	ldr.w	r3, [fp, #8]
        ei_classifier_cube_t *cube = new ei_classifier_cube_t();
   1ed9c:	9003      	str	r0, [sp, #12]
   1ed9e:	4299      	cmp	r1, r3
        cube->x = x;
   1eda0:	f8c0 8000 	str.w	r8, [r0]
        cube->label = label;
   1eda4:	6147      	str	r7, [r0, #20]
        cube->confidence = vf;
   1eda6:	ed80 8a04 	vstr	s16, [r0, #16]
   1edaa:	d008      	beq.n	1edbe <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x8a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1edac:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
   1edb0:	f8cb 1004 	str.w	r1, [fp, #4]
}
   1edb4:	b005      	add	sp, #20
   1edb6:	ecbd 8b02 	vpop	{d8}
   1edba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), __x);
   1edbe:	aa03      	add	r2, sp, #12
   1edc0:	4658      	mov	r0, fp
   1edc2:	f7ff ff45 	bl	1ec50 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
   1edc6:	e7f5      	b.n	1edb4 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0+0x80>

0001edc8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   1edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edcc:	e9d0 6500 	ldrd	r6, r5, [r0]
   1edd0:	4692      	mov	sl, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1edd2:	1bab      	subs	r3, r5, r6
   1edd4:	4a38      	ldr	r2, [pc, #224]	@ (1eeb8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf0>)
   1edd6:	10db      	asrs	r3, r3, #3
   1edd8:	fb02 f303 	mul.w	r3, r2, r3
	if (max_size() - size() < __n)
   1eddc:	4a37      	ldr	r2, [pc, #220]	@ (1eebc <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf4>)
   1edde:	4293      	cmp	r3, r2
   1ede0:	b083      	sub	sp, #12
   1ede2:	d066      	beq.n	1eeb2 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xea>
   1ede4:	42ae      	cmp	r6, r5
   1ede6:	4604      	mov	r4, r0
   1ede8:	4688      	mov	r8, r1
    { return __lhs.base() - __rhs.base(); }
   1edea:	eba1 0906 	sub.w	r9, r1, r6
   1edee:	d043      	beq.n	1ee78 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1edf0:	ebb3 0f43 	cmp.w	r3, r3, lsl #1
	const size_type __len = size() + (std::max)(size(), __n);
   1edf4:	ea4f 0143 	mov.w	r1, r3, lsl #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1edf8:	d823      	bhi.n	1ee42 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   1edfa:	2900      	cmp	r1, #0
   1edfc:	d151      	bne.n	1eea2 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xda>
   1edfe:	468b      	mov	fp, r1
   1ee00:	460f      	mov	r7, r1
   1ee02:	46d4      	mov	ip, sl
	      ++__new_finish;
   1ee04:	f109 0a18 	add.w	sl, r9, #24
      ptrdiff_t __count = __last - __first;
   1ee08:	eba5 0508 	sub.w	r5, r5, r8
   1ee0c:	44ba      	add	sl, r7
      return __result + __count;
   1ee0e:	eb0a 0305 	add.w	r3, sl, r5
   1ee12:	9301      	str	r3, [sp, #4]
   1ee14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1ee18:	eb07 0e09 	add.w	lr, r7, r9
   1ee1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ee20:	e89c 0003 	ldmia.w	ip, {r0, r1}
      if (__count > 0)
   1ee24:	f1b9 0f00 	cmp.w	r9, #0
   1ee28:	e88e 0003 	stmia.w	lr, {r0, r1}
   1ee2c:	dc17      	bgt.n	1ee5e <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
   1ee2e:	2d00      	cmp	r5, #0
   1ee30:	dc0f      	bgt.n	1ee52 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8a>
	if (__p)
   1ee32:	b9de      	cbnz	r6, 1ee6c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>
      this->_M_impl._M_finish = __new_finish;
   1ee34:	9b01      	ldr	r3, [sp, #4]
      this->_M_impl._M_start = __new_start;
   1ee36:	6027      	str	r7, [r4, #0]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1ee38:	e9c4 3b01 	strd	r3, fp, [r4, #4]
    }
   1ee3c:	b003      	add	sp, #12
   1ee3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee42:	f8df b080 	ldr.w	fp, [pc, #128]	@ 1eec4 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xfc>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ee46:	4658      	mov	r0, fp
   1ee48:	f012 f9f4 	bl	31234 <_Znwj>
   1ee4c:	4607      	mov	r7, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
   1ee4e:	4483      	add	fp, r0
   1ee50:	e7d7      	b.n	1ee02 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3a>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1ee52:	462a      	mov	r2, r5
   1ee54:	4641      	mov	r1, r8
   1ee56:	4650      	mov	r0, sl
   1ee58:	f7f9 fb92 	bl	18580 <memcpy>
   1ee5c:	e7e9      	b.n	1ee32 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
   1ee5e:	464a      	mov	r2, r9
   1ee60:	4631      	mov	r1, r6
   1ee62:	4638      	mov	r0, r7
   1ee64:	f007 feae 	bl	26bc4 <memmove>
      if (__count > 0)
   1ee68:	2d00      	cmp	r5, #0
   1ee6a:	dc0f      	bgt.n	1ee8c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xc4>
		    this->_M_impl._M_end_of_storage - __old_start);
   1ee6c:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ee6e:	4630      	mov	r0, r6
   1ee70:	1b89      	subs	r1, r1, r6
   1ee72:	f012 f9e5 	bl	31240 <_ZdlPvj>
   1ee76:	e7dd      	b.n	1ee34 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
   1ee78:	3301      	adds	r3, #1
   1ee7a:	d2e2      	bcs.n	1ee42 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7a>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1ee7c:	4293      	cmp	r3, r2
   1ee7e:	bf28      	it	cs
   1ee80:	4613      	movcs	r3, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1ee82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ee86:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1ee8a:	e7dc      	b.n	1ee46 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1ee8c:	4641      	mov	r1, r8
   1ee8e:	462a      	mov	r2, r5
   1ee90:	4650      	mov	r0, sl
   1ee92:	f7f9 fb75 	bl	18580 <memcpy>
   1ee96:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1ee98:	4630      	mov	r0, r6
   1ee9a:	1b89      	subs	r1, r1, r6
   1ee9c:	f012 f9d0 	bl	31240 <_ZdlPvj>
   1eea0:	e7c8      	b.n	1ee34 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
   1eea2:	4291      	cmp	r1, r2
   1eea4:	bf28      	it	cs
   1eea6:	4611      	movcs	r1, r2
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1eea8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1eeac:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
   1eeb0:	e7c9      	b.n	1ee46 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x7e>
	  __throw_length_error(__N(__s));
   1eeb2:	4803      	ldr	r0, [pc, #12]	@ (1eec0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf8>)
   1eeb4:	f014 ffda 	bl	33e6c <_ZSt20__throw_length_errorPKc>
   1eeb8:	aaaaaaab 	.word	0xaaaaaaab
   1eebc:	05555555 	.word	0x05555555
   1eec0:	0003f10c 	.word	0x0003f10c
   1eec4:	7ffffff8 	.word	0x7ffffff8

0001eec8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj>:
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
   1eec8:	2900      	cmp	r1, #0
   1eeca:	d06b      	beq.n	1efa4 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xdc>
    vector<_Tp, _Alloc>::
   1eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);
   1eed0:	e9d0 8301 	ldrd	r8, r3, [r0, #4]
   1eed4:	4a59      	ldr	r2, [pc, #356]	@ (1f03c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x174>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1eed6:	6807      	ldr	r7, [r0, #0]
   1eed8:	eba3 0308 	sub.w	r3, r3, r8
   1eedc:	10db      	asrs	r3, r3, #3
   1eede:	fb02 f303 	mul.w	r3, r2, r3

	  if (__size > max_size() || __navail > max_size() - __size)
	    __builtin_unreachable();

	  if (__navail >= __n)
   1eee2:	4299      	cmp	r1, r3
    vector<_Tp, _Alloc>::
   1eee4:	b083      	sub	sp, #12
   1eee6:	4605      	mov	r5, r0
   1eee8:	460c      	mov	r4, r1
	  if (__navail >= __n)
   1eeea:	d94c      	bls.n	1ef86 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xbe>
   1eeec:	eba8 0807 	sub.w	r8, r8, r7
	  if (__size > max_size() || __navail > max_size() - __size)
   1eef0:	4b53      	ldr	r3, [pc, #332]	@ (1f040 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x178>)
   1eef2:	ea4f 06e8 	mov.w	r6, r8, asr #3
   1eef6:	fb02 f606 	mul.w	r6, r2, r6
   1eefa:	1b9a      	subs	r2, r3, r6
	if (max_size() - size() < __n)
   1eefc:	428a      	cmp	r2, r1
   1eefe:	f0c0 809a 	bcc.w	1f036 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x16e>
   1ef02:	42b1      	cmp	r1, r6
	      __first = std::fill_n(__first, __n - 1, *__val);
   1ef04:	f101 3bff 	add.w	fp, r1, #4294967295	@ 0xffffffff
	const size_type __len = size() + (std::max)(size(), __n);
   1ef08:	eb01 0906 	add.w	r9, r1, r6
   1ef0c:	d877      	bhi.n	1effe <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x136>
   1ef0e:	0076      	lsls	r6, r6, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1ef10:	429e      	cmp	r6, r3
   1ef12:	bf28      	it	cs
   1ef14:	461e      	movcs	r6, r3
   1ef16:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   1ef1a:	00f3      	lsls	r3, r6, #3
   1ef1c:	4618      	mov	r0, r3
   1ef1e:	9301      	str	r3, [sp, #4]
   1ef20:	f012 f988 	bl	31234 <_Znwj>
	      pointer __new_start(this->_M_allocate(__len));
	      if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
		{
		  __try
		    {
		      std::__uninitialized_default_n_a(__new_start + __size,
   1ef24:	eb00 0608 	add.w	r6, r0, r8
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
	  return;
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
   1ef28:	2200      	movs	r2, #0
	       std::random_access_iterator_tag)
    {
#if __cplusplus >= 201103L
      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
#endif
      if (__n <= 0)
   1ef2a:	2c01      	cmp	r4, #1
   1ef2c:	f840 2008 	str.w	r2, [r0, r8]
   1ef30:	4682      	mov	sl, r0
   1ef32:	e9c6 2201 	strd	r2, r2, [r6, #4]
   1ef36:	e9c6 2203 	strd	r2, r2, [r6, #12]
   1ef3a:	6172      	str	r2, [r6, #20]
   1ef3c:	d054      	beq.n	1efe8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x120>
	      ++__first;
   1ef3e:	f106 0e18 	add.w	lr, r6, #24
	return __first;

      __glibcxx_requires_can_increment(__first, __n);

      std::__fill_a(__first, __first + __n, __value);
   1ef42:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   1ef46:	eb0e 0bcb 	add.w	fp, lr, fp, lsl #3
	*__first = __value;
   1ef4a:	46b4      	mov	ip, r6
   1ef4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1ef50:	4674      	mov	r4, lr
   1ef52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1ef54:	e89c 0003 	ldmia.w	ip, {r0, r1}
      for (; __first != __last; ++__first)
   1ef58:	f10e 0e18 	add.w	lr, lr, #24
   1ef5c:	45f3      	cmp	fp, lr
	*__first = __value;
   1ef5e:	e884 0003 	stmia.w	r4, {r0, r1}
      for (; __first != __last; ++__first)
   1ef62:	d1f2      	bne.n	1ef4a <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x82>
      if (__count > 0)
   1ef64:	f1b8 0f00 	cmp.w	r8, #0
   1ef68:	d13e      	bne.n	1efe8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x120>
	if (__p)
   1ef6a:	2f00      	cmp	r7, #0
   1ef6c:	d160      	bne.n	1f030 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x168>
	      _GLIBCXX_ASAN_ANNOTATE_REINIT;
	      _M_deallocate(__old_start,
			    this->_M_impl._M_end_of_storage - __old_start);
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1ef6e:	9e01      	ldr	r6, [sp, #4]
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1ef70:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1ef74:	eb0a 03c9 	add.w	r3, sl, r9, lsl #3
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1ef78:	4456      	add	r6, sl
	      this->_M_impl._M_finish = __new_start + __size + __n;
   1ef7a:	e9c5 a300 	strd	sl, r3, [r5]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
   1ef7e:	60ae      	str	r6, [r5, #8]
	    }
	}
    }
   1ef80:	b003      	add	sp, #12
   1ef82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef86:	2300      	movs	r3, #0
      if (__n <= 0)
   1ef88:	1e4c      	subs	r4, r1, #1
   1ef8a:	e9c8 3300 	strd	r3, r3, [r8]
   1ef8e:	e9c8 3302 	strd	r3, r3, [r8, #8]
   1ef92:	e9c8 3304 	strd	r3, r3, [r8, #16]
	      ++__first;
   1ef96:	f108 0718 	add.w	r7, r8, #24
   1ef9a:	d104      	bne.n	1efa6 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xde>
	      this->_M_impl._M_finish =
   1ef9c:	606f      	str	r7, [r5, #4]
    }
   1ef9e:	b003      	add	sp, #12
   1efa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efa4:	4770      	bx	lr
      std::__fill_a(__first, __first + __n, __value);
   1efa6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1efaa:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
   1efae:	463e      	mov	r6, r7
	*__first = __value;
   1efb0:	46c6      	mov	lr, r8
   1efb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1efb6:	46b4      	mov	ip, r6
   1efb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1efbc:	e89e 0003 	ldmia.w	lr, {r0, r1}
      for (; __first != __last; ++__first)
   1efc0:	3618      	adds	r6, #24
   1efc2:	42b4      	cmp	r4, r6
	*__first = __value;
   1efc4:	e88c 0003 	stmia.w	ip, {r0, r1}
      for (; __first != __last; ++__first)
   1efc8:	d1f2      	bne.n	1efb0 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xe8>
   1efca:	eba4 0308 	sub.w	r3, r4, r8
   1efce:	4a1d      	ldr	r2, [pc, #116]	@ (1f044 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x17c>)
   1efd0:	3b30      	subs	r3, #48	@ 0x30
   1efd2:	08db      	lsrs	r3, r3, #3
   1efd4:	fb02 f303 	mul.w	r3, r2, r3
   1efd8:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
   1efdc:	3301      	adds	r3, #1
   1efde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1efe2:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
   1efe6:	e7d9      	b.n	1ef9c <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xd4>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
   1efe8:	4639      	mov	r1, r7
   1efea:	4642      	mov	r2, r8
   1efec:	4650      	mov	r0, sl
   1efee:	f007 fde9 	bl	26bc4 <memmove>
			    this->_M_impl._M_end_of_storage - __old_start);
   1eff2:	68a9      	ldr	r1, [r5, #8]
   1eff4:	1bc9      	subs	r1, r1, r7
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1eff6:	4638      	mov	r0, r7
   1eff8:	f012 f922 	bl	31240 <_ZdlPvj>
   1effc:	e7b7      	b.n	1ef6e <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0xa6>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   1effe:	454b      	cmp	r3, r9
   1f000:	bf28      	it	cs
   1f002:	464b      	movcs	r3, r9
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
   1f004:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   1f008:	00f3      	lsls	r3, r6, #3
   1f00a:	4618      	mov	r0, r3
   1f00c:	9301      	str	r3, [sp, #4]
   1f00e:	f012 f911 	bl	31234 <_Znwj>
		      std::__uninitialized_default_n_a(__new_start + __size,
   1f012:	eb00 0608 	add.w	r6, r0, r8
   1f016:	2200      	movs	r2, #0
   1f018:	f840 2008 	str.w	r2, [r0, r8]
   1f01c:	4682      	mov	sl, r0
   1f01e:	e9c6 2201 	strd	r2, r2, [r6, #4]
   1f022:	e9c6 2203 	strd	r2, r2, [r6, #12]
   1f026:	6172      	str	r2, [r6, #20]
      if (__n <= 0)
   1f028:	f1bb 0f00 	cmp.w	fp, #0
   1f02c:	d09a      	beq.n	1ef64 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x9c>
   1f02e:	e786      	b.n	1ef3e <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x76>
			    this->_M_impl._M_end_of_storage - __old_start);
   1f030:	68a9      	ldr	r1, [r5, #8]
   1f032:	1bc9      	subs	r1, r1, r7
   1f034:	e7df      	b.n	1eff6 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x12e>
	  __throw_length_error(__N(__s));
   1f036:	4804      	ldr	r0, [pc, #16]	@ (1f048 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj+0x180>)
   1f038:	f014 ff18 	bl	33e6c <_ZSt20__throw_length_errorPKc>
   1f03c:	aaaaaaab 	.word	0xaaaaaaab
   1f040:	05555555 	.word	0x05555555
   1f044:	0aaaaaab 	.word	0x0aaaaaab
   1f048:	0003f2dc 	.word	0x0003f2dc
   1f04c:	00000000 	.word	0x00000000

0001f050 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>:
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   1f050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f054:	ed2d 8b02 	vpush	{d8}
	: _M_start(), _M_finish(), _M_end_of_storage()
   1f058:	ed9f 8b83 	vldr	d8, [pc, #524]	@ 1f268 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x218>
   1f05c:	b09b      	sub	sp, #108	@ 0x6c
   1f05e:	ed8d 8b10 	vstr	d8, [sp, #64]	@ 0x40
    static std::vector<ei_impulse_result_bounding_box_t> results;
   1f062:	f8df 9218 	ldr.w	r9, [pc, #536]	@ 1f27c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x22c>
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   1f066:	920a      	str	r2, [sp, #40]	@ 0x28
   1f068:	4698      	mov	r8, r3
   1f06a:	2300      	movs	r3, #0
   1f06c:	9312      	str	r3, [sp, #72]	@ 0x48
    static std::vector<ei_impulse_result_bounding_box_t> results;
   1f06e:	f8d9 7000 	ldr.w	r7, [r9]
   1f072:	f3bf 8f5b 	dmb	ish
   1f076:	f017 0701 	ands.w	r7, r7, #1
__attribute__((unused)) static void fill_result_struct_from_cubes(ei_impulse_result_t *result, std::vector<ei_classifier_cube_t*> *cubes, int out_width_factor, uint32_t object_detection_count) {
   1f07a:	4604      	mov	r4, r0
   1f07c:	460e      	mov	r6, r1
    static std::vector<ei_impulse_result_bounding_box_t> results;
   1f07e:	f000 80cd 	beq.w	1f21c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1cc>
   1f082:	4d7b      	ldr	r5, [pc, #492]	@ (1f270 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x220>)
	_M_deallocate(_M_impl._M_start,
   1f084:	9910      	ldr	r1, [sp, #64]	@ 0x40
   1f086:	9105      	str	r1, [sp, #20]
      // _M_assign_aux.
      _GLIBCXX20_CONSTEXPR
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1f088:	e9d5 3200 	ldrd	r3, r2, [r5]
   1f08c:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
   1f08e:	bf18      	it	ne
   1f090:	606b      	strne	r3, [r5, #4]
      : _M_current(__i) { }
   1f092:	e9d6 3200 	ldrd	r3, r2, [r6]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1f096:	9912      	ldr	r1, [sp, #72]	@ 0x48
   1f098:	9207      	str	r2, [sp, #28]
    int added_boxes_count = 0;
    results.clear();
    for (auto sc : *cubes) {
   1f09a:	4293      	cmp	r3, r2
   1f09c:	9108      	str	r1, [sp, #32]
   1f09e:	f000 80df 	beq.w	1f260 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x210>
    int added_boxes_count = 0;
   1f0a2:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
   1f0a6:	9303      	str	r3, [sp, #12]
   1f0a8:	2300      	movs	r3, #0
   1f0aa:	9306      	str	r3, [sp, #24]
   1f0ac:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
   1f0b0:	9509      	str	r5, [sp, #36]	@ 0x24
    for (auto sc : *cubes) {
   1f0b2:	9b03      	ldr	r3, [sp, #12]
   1f0b4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
   1f0b6:	f853 5b04 	ldr.w	r5, [r3], #4
   1f0ba:	9303      	str	r3, [sp, #12]
        int width = sc->width;
        int height = sc->height;
        const char *label = sc->label;
        float vf = sc->confidence;

        for (auto c : bbs) {
   1f0bc:	9b05      	ldr	r3, [sp, #20]
        float vf = sc->confidence;
   1f0be:	ed95 8a04 	vldr	s16, [r5, #16]
        const char *label = sc->label;
   1f0c2:	696f      	ldr	r7, [r5, #20]
    for (auto sc : *cubes) {
   1f0c4:	950f      	str	r5, [sp, #60]	@ 0x3c
        for (auto c : bbs) {
   1f0c6:	429e      	cmp	r6, r3
        int y = sc->y;
   1f0c8:	e9d5 9a00 	ldrd	r9, sl, [r5]
        int height = sc->height;
   1f0cc:	e9d5 b802 	ldrd	fp, r8, [r5, #8]
        for (auto c : bbs) {
   1f0d0:	d017      	beq.n	1f102 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xb2>
   1f0d2:	461c      	mov	r4, r3
   1f0d4:	9504      	str	r5, [sp, #16]
   1f0d6:	f854 5b04 	ldr.w	r5, [r4], #4
            // not cube for same class? continue
            if (strcmp(c->label, label) != 0) continue;
   1f0da:	4639      	mov	r1, r7
   1f0dc:	6968      	ldr	r0, [r5, #20]
   1f0de:	f7f9 f88f 	bl	18200 <strcmp>
   1f0e2:	b958      	cbnz	r0, 1f0fc <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xac>

            if (ei_cube_check_overlap(c, x, y, width, height, vf)) {
   1f0e4:	eeb0 0a48 	vmov.f32	s0, s16
   1f0e8:	f8cd 8000 	str.w	r8, [sp]
   1f0ec:	465b      	mov	r3, fp
   1f0ee:	4652      	mov	r2, sl
   1f0f0:	4649      	mov	r1, r9
   1f0f2:	4628      	mov	r0, r5
   1f0f4:	f7ff f9b0 	bl	1e458 <_ZL21ei_cube_check_overlapP4cubeiiiif>
   1f0f8:	2800      	cmp	r0, #0
   1f0fa:	d12f      	bne.n	1f15c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x10c>
        for (auto c : bbs) {
   1f0fc:	42a6      	cmp	r6, r4
   1f0fe:	d1ea      	bne.n	1f0d6 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x86>
   1f100:	9d04      	ldr	r5, [sp, #16]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1f102:	9b08      	ldr	r3, [sp, #32]
   1f104:	429e      	cmp	r6, r3
   1f106:	d05f      	beq.n	1f1c8 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x178>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   1f108:	4633      	mov	r3, r6
   1f10a:	f843 5b04 	str.w	r5, [r3], #4
	    ++this->_M_impl._M_finish;
   1f10e:	9311      	str	r3, [sp, #68]	@ 0x44

        bbs.push_back(sc);

        ei_impulse_result_bounding_box_t tmp = {
            .label = sc->label,
            .x = (uint32_t)(sc->x * out_width_factor),
   1f110:	990a      	ldr	r1, [sp, #40]	@ 0x28
   1f112:	682b      	ldr	r3, [r5, #0]
            .y = (uint32_t)(sc->y * out_width_factor),
            .width = (uint32_t)(sc->width * out_width_factor),
            .height = (uint32_t)(sc->height * out_width_factor),
            .value = sc->confidence
        };
   1f114:	9714      	str	r7, [sp, #80]	@ 0x50
            .x = (uint32_t)(sc->x * out_width_factor),
   1f116:	fb01 f303 	mul.w	r3, r1, r3
        };
   1f11a:	9315      	str	r3, [sp, #84]	@ 0x54
            .y = (uint32_t)(sc->y * out_width_factor),
   1f11c:	686b      	ldr	r3, [r5, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   1f11e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
        };
   1f120:	692a      	ldr	r2, [r5, #16]
   1f122:	687c      	ldr	r4, [r7, #4]
   1f124:	9219      	str	r2, [sp, #100]	@ 0x64
            .y = (uint32_t)(sc->y * out_width_factor),
   1f126:	fb01 f303 	mul.w	r3, r1, r3
        };
   1f12a:	9316      	str	r3, [sp, #88]	@ 0x58
            .width = (uint32_t)(sc->width * out_width_factor),
   1f12c:	68ab      	ldr	r3, [r5, #8]
   1f12e:	fb01 f303 	mul.w	r3, r1, r3
        };
   1f132:	9317      	str	r3, [sp, #92]	@ 0x5c
            .height = (uint32_t)(sc->height * out_width_factor),
   1f134:	68eb      	ldr	r3, [r5, #12]
   1f136:	fb01 f303 	mul.w	r3, r1, r3
        };
   1f13a:	9318      	str	r3, [sp, #96]	@ 0x60
   1f13c:	68bb      	ldr	r3, [r7, #8]
   1f13e:	429c      	cmp	r4, r3
   1f140:	d03c      	beq.n	1f1bc <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x16c>
   1f142:	ad14      	add	r5, sp, #80	@ 0x50
   1f144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
   1f146:	f104 0618 	add.w	r6, r4, #24
   1f14a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f14c:	e895 0003 	ldmia.w	r5, {r0, r1}
   1f150:	e884 0003 	stmia.w	r4, {r0, r1}
   1f154:	607e      	str	r6, [r7, #4]

        results.push_back(tmp);
        added_boxes_count++;
   1f156:	9b06      	ldr	r3, [sp, #24]
   1f158:	3301      	adds	r3, #1
   1f15a:	9306      	str	r3, [sp, #24]
    for (auto sc : *cubes) {
   1f15c:	9b07      	ldr	r3, [sp, #28]
   1f15e:	9a03      	ldr	r2, [sp, #12]
   1f160:	4293      	cmp	r3, r2
   1f162:	d1a6      	bne.n	1f0b2 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x62>
    }

    // if we didn't detect min required objects, fill the rest with fixed value
    if (added_boxes_count < object_detection_count) {
   1f164:	e9dd 460b 	ldrd	r4, r6, [sp, #44]	@ 0x2c
   1f168:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
   1f16c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   1f16e:	9f06      	ldr	r7, [sp, #24]
   1f170:	45b8      	cmp	r8, r7
   1f172:	d839      	bhi.n	1f1e8 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x198>
   1f174:	e9d6 3700 	ldrd	r3, r7, [r6]
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
            results[ix].value = 0.0f;
        }
    }

    for (auto c : *cubes) {
   1f178:	429f      	cmp	r7, r3
   1f17a:	bf18      	it	ne
   1f17c:	461e      	movne	r6, r3
   1f17e:	d007      	beq.n	1f190 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x140>
   1f180:	f856 0b04 	ldr.w	r0, [r6], #4
        delete c;
   1f184:	2118      	movs	r1, #24
   1f186:	b108      	cbz	r0, 1f18c <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x13c>
   1f188:	f012 f85a 	bl	31240 <_ZdlPvj>
    for (auto c : *cubes) {
   1f18c:	42b7      	cmp	r7, r6
   1f18e:	d1f7      	bne.n	1f180 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x130>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f190:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f194:	1a9b      	subs	r3, r3, r2
    }

    result->bounding_boxes = results.data();
   1f196:	6022      	str	r2, [r4, #0]
   1f198:	4a36      	ldr	r2, [pc, #216]	@ (1f274 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x224>)
   1f19a:	10db      	asrs	r3, r3, #3
   1f19c:	fb02 f303 	mul.w	r3, r2, r3
    result->bounding_boxes_count = results.size();
   1f1a0:	6063      	str	r3, [r4, #4]
	if (__p)
   1f1a2:	9b05      	ldr	r3, [sp, #20]
   1f1a4:	b1db      	cbz	r3, 1f1de <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x18e>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
   1f1a6:	9b05      	ldr	r3, [sp, #20]
   1f1a8:	9a08      	ldr	r2, [sp, #32]
   1f1aa:	4618      	mov	r0, r3
   1f1ac:	1ad1      	subs	r1, r2, r3
}
   1f1ae:	b01b      	add	sp, #108	@ 0x6c
   1f1b0:	ecbd 8b02 	vpop	{d8}
   1f1b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1b8:	f012 b842 	b.w	31240 <_ZdlPvj>
	  _M_realloc_insert(end(), __x);
   1f1bc:	482c      	ldr	r0, [pc, #176]	@ (1f270 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x220>)
   1f1be:	4621      	mov	r1, r4
   1f1c0:	aa14      	add	r2, sp, #80	@ 0x50
   1f1c2:	f7ff fe01 	bl	1edc8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   1f1c6:	e7c6      	b.n	1f156 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x106>
   1f1c8:	9908      	ldr	r1, [sp, #32]
   1f1ca:	aa0f      	add	r2, sp, #60	@ 0x3c
   1f1cc:	a810      	add	r0, sp, #64	@ 0x40
   1f1ce:	f7ff fd3f 	bl	1ec50 <_ZNSt6vectorIP4cubeSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	_M_deallocate(_M_impl._M_start,
   1f1d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1f1d4:	9305      	str	r3, [sp, #20]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1f1d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
            .label = sc->label,
   1f1d8:	696f      	ldr	r7, [r5, #20]
   1f1da:	9308      	str	r3, [sp, #32]
   1f1dc:	e798      	b.n	1f110 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0xc0>
}
   1f1de:	b01b      	add	sp, #108	@ 0x6c
   1f1e0:	ecbd 8b02 	vpop	{d8}
   1f1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   1f1e8:	e9d5 0200 	ldrd	r0, r2, [r5]
   1f1ec:	4b21      	ldr	r3, [pc, #132]	@ (1f274 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x224>)
   1f1ee:	1a11      	subs	r1, r2, r0
   1f1f0:	10c9      	asrs	r1, r1, #3
   1f1f2:	fb03 f101 	mul.w	r1, r3, r1
	if (__new_size > size())
   1f1f6:	4588      	cmp	r8, r1
   1f1f8:	d82b      	bhi.n	1f252 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x202>
	else if (__new_size < size())
   1f1fa:	d320      	bcc.n	1f23e <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1ee>
   1f1fc:	ea4f 0348 	mov.w	r3, r8, lsl #1
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
   1f200:	eb03 0208 	add.w	r2, r3, r8
   1f204:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   1f208:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
   1f20c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
            results[ix].value = 0.0f;
   1f210:	2100      	movs	r1, #0
   1f212:	6159      	str	r1, [r3, #20]
        for (size_t ix = added_boxes_count; ix < object_detection_count; ix++) {
   1f214:	3318      	adds	r3, #24
   1f216:	429a      	cmp	r2, r3
   1f218:	d1fb      	bne.n	1f212 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1c2>
   1f21a:	e7ab      	b.n	1f174 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x124>
    static std::vector<ei_impulse_result_bounding_box_t> results;
   1f21c:	4648      	mov	r0, r9
   1f21e:	f014 fcd1 	bl	33bc4 <__cxa_guard_acquire>
	: _M_start(), _M_finish(), _M_end_of_storage()
   1f222:	4d13      	ldr	r5, [pc, #76]	@ (1f270 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x220>)
   1f224:	2800      	cmp	r0, #0
   1f226:	f43f af2d 	beq.w	1f084 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x34>
   1f22a:	4813      	ldr	r0, [pc, #76]	@ (1f278 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x228>)
   1f22c:	60af      	str	r7, [r5, #8]
   1f22e:	ed85 8b00 	vstr	d8, [r5]
   1f232:	f005 ffc1 	bl	251b8 <atexit>
   1f236:	4648      	mov	r0, r9
   1f238:	f014 fce0 	bl	33bfc <__cxa_guard_release>
   1f23c:	e722      	b.n	1f084 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x34>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   1f23e:	eb08 0148 	add.w	r1, r8, r8, lsl #1
   1f242:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1f246:	428a      	cmp	r2, r1
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
   1f248:	ea4f 0348 	mov.w	r3, r8, lsl #1
	if (size_type __n = this->_M_impl._M_finish - __pos)
   1f24c:	d0d8      	beq.n	1f200 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1b0>
	    this->_M_impl._M_finish = __pos;
   1f24e:	6069      	str	r1, [r5, #4]
   1f250:	e7d6      	b.n	1f200 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1b0>
	  _M_default_append(__new_size - size());
   1f252:	4807      	ldr	r0, [pc, #28]	@ (1f270 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x220>)
   1f254:	eba8 0101 	sub.w	r1, r8, r1
   1f258:	f7ff fe36 	bl	1eec8 <_ZNSt6vectorI32ei_impulse_result_bounding_box_tSaIS0_EE17_M_default_appendEj>
	return *(this->_M_impl._M_start + __n);
   1f25c:	6828      	ldr	r0, [r5, #0]
   1f25e:	e7cd      	b.n	1f1fc <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x1ac>
    for (auto sc : *cubes) {
   1f260:	2700      	movs	r7, #0
   1f262:	e785      	b.n	1f170 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim+0x120>
   1f264:	f3af 8000 	nop.w
	...
   1f270:	100180b0 	.word	0x100180b0
   1f274:	aaaaaaab 	.word	0xaaaaaaab
   1f278:	0001e635 	.word	0x0001e635
   1f27c:	100180ac 	.word	0x100180ac

0001f280 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
   1f280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f284:	ed2d 8b04 	vpush	{d8-d9}
    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;

    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
   1f288:	788b      	ldrb	r3, [r1, #2]
) {
   1f28a:	b089      	sub	sp, #36	@ 0x24
    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
   1f28c:	2b03      	cmp	r3, #3
) {
   1f28e:	f89d 9060 	ldrb.w	r9, [sp, #96]	@ 0x60
   1f292:	4607      	mov	r7, r0
    if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_OBJECT_DETECTION) {
   1f294:	d00b      	beq.n	1f2ae <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2e>
                    block_config->object_detection_last_layer);
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
            }
        }
    }
    else if (block_config->classification_mode == EI_CLASSIFIER_CLASSIFICATION_MODE_VISUAL_ANOMALY)
   1f296:	2b05      	cmp	r3, #5
   1f298:	d003      	beq.n	1f2a2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
        }
    }
    // if we copy the output, we don't need to process it as classification
    else
    {
        if (!result->copy_output) {
   1f29a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
   1f29c:	f893 6040 	ldrb.w	r6, [r3, #64]	@ 0x40
   1f2a0:	b1c6      	cbz	r6, 1f2d4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x54>
                    fill_res = fill_result_struct_f32_fomo(
   1f2a2:	2000      	movs	r0, #0
            }
        }
    }

    return fill_res;
}
   1f2a4:	b009      	add	sp, #36	@ 0x24
   1f2a6:	ecbd 8b04 	vpop	{d8-d9}
   1f2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2ae:	4688      	mov	r8, r1
        switch (block_config->object_detection_last_layer) {
   1f2b0:	f991 1009 	ldrsb.w	r1, [r1, #9]
   1f2b4:	1e4b      	subs	r3, r1, #1
   1f2b6:	2b09      	cmp	r3, #9
   1f2b8:	f200 8185 	bhi.w	1f5c6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x346>
   1f2bc:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f2c0:	0090008c 	.word	0x0090008c
   1f2c4:	00750064 	.word	0x00750064
   1f2c8:	00f00064 	.word	0x00f00064
   1f2cc:	00500050 	.word	0x00500050
   1f2d0:	007d00f9 	.word	0x007d00f9
            if (int8_output) {
   1f2d4:	7f10      	ldrb	r0, [r2, #28]
                    fill_res = fill_result_struct_i8_fomo(
   1f2d6:	6911      	ldr	r1, [r2, #16]
                                                                      ei_impulse_result_t *result,
                                                                      int8_t *data,
                                                                      float zero_point,
                                                                      float scale,
                                                                      bool debug) {
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f2d8:	f8b7 5072 	ldrh.w	r5, [r7, #114]	@ 0x72
            if (int8_output) {
   1f2dc:	2809      	cmp	r0, #9
   1f2de:	d017      	beq.n	1f310 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x90>
#ifdef EI_DSP_RESULT_OVERRIDE
    uint32_t stop_count = EI_DSP_RESULT_OVERRIDE;
#else
    uint32_t stop_count = impulse->label_count;
#endif
    for (uint32_t ix = 0; ix < stop_count; ix++) {
   1f2e0:	2d00      	cmp	r5, #0
   1f2e2:	d0de      	beq.n	1f2a2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>

        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
   1f2e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
   1f2e6:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
   1f2e8:	4688      	mov	r8, r1
        float value = data[ix];
   1f2ea:	ecb8 8a01 	vldmia	r8!, {s16}
        if (debug) {
   1f2ee:	ea4f 0a86 	mov.w	sl, r6, lsl #2
   1f2f2:	f1b9 0f00 	cmp.w	r9, #0
   1f2f6:	f040 80ec 	bne.w	1f4d2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x252>
    for (uint32_t ix = 0; ix < stop_count; ix++) {
   1f2fa:	3601      	adds	r6, #1
            ei_printf_float(value);
            ei_printf("\n");
        }
// For testing purposes, we will have more values than labels
#ifndef EI_DSP_RESULT_OVERRIDE
        result->classification[ix].label = impulse->categories[ix];
   1f2fc:	f853 200a 	ldr.w	r2, [r3, sl]
   1f300:	60a2      	str	r2, [r4, #8]
    for (uint32_t ix = 0; ix < stop_count; ix++) {
   1f302:	42b5      	cmp	r5, r6
#endif
        result->classification[ix].value = value;
   1f304:	ed84 8a03 	vstr	s16, [r4, #12]
    for (uint32_t ix = 0; ix < stop_count; ix++) {
   1f308:	f104 0408 	add.w	r4, r4, #8
   1f30c:	d8ed      	bhi.n	1f2ea <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x6a>
   1f30e:	e7c8      	b.n	1f2a2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f310:	2d00      	cmp	r5, #0
   1f312:	d0c6      	beq.n	1f2a2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
                fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
   1f314:	edd2 8a03 	vldr	s17, [r2, #12]
   1f318:	ed92 9a02 	vldr	s18, [r2, #8]
            ei_printf("%s:\t", impulse->categories[ix]);
   1f31c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
   1f31e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f322:	4634      	mov	r4, r6
   1f324:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
   1f328:	461e      	mov	r6, r3
        float value = static_cast<float>(data[ix] - zero_point) * scale;
   1f32a:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
   1f32e:	ee08 3a10 	vmov	s16, r3
   1f332:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   1f336:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   1f33a:	ee38 8a68 	vsub.f32	s16, s16, s17
   1f33e:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
   1f342:	f1b9 0f00 	cmp.w	r9, #0
   1f346:	f040 80d2 	bne.w	1f4ee <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x26e>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f34a:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
   1f34c:	f852 300a 	ldr.w	r3, [r2, sl]
   1f350:	60b3      	str	r3, [r6, #8]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f352:	42ac      	cmp	r4, r5
        result->classification[ix].value = value;
   1f354:	ed86 8a03 	vstr	s16, [r6, #12]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
   1f358:	f106 0608 	add.w	r6, r6, #8
   1f35c:	d3e5      	bcc.n	1f32a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xaa>
   1f35e:	e7a0      	b.n	1f2a2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
                if (output->type == kTfLiteInt8) {
   1f360:	7f11      	ldrb	r1, [r2, #28]
   1f362:	1e4b      	subs	r3, r1, #1
   1f364:	b2db      	uxtb	r3, r3
   1f366:	2b08      	cmp	r3, #8
   1f368:	f200 8121 	bhi.w	1f5ae <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x32e>
   1f36c:	f240 1205 	movw	r2, #261	@ 0x105
   1f370:	fa22 f303 	lsr.w	r3, r2, r3
   1f374:	07d8      	lsls	r0, r3, #31
   1f376:	f140 811a 	bpl.w	1f5ae <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x32e>
                    fill_res = fill_result_struct_quantized_yolov5(
   1f37a:	f06f 0014 	mvn.w	r0, #20
}
   1f37e:	b009      	add	sp, #36	@ 0x24
   1f380:	ecbd 8b04 	vpop	{d8-d9}
   1f384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (output->type == kTfLiteInt8) {
   1f388:	7f11      	ldrb	r1, [r2, #28]
   1f38a:	1e4b      	subs	r3, r1, #1
   1f38c:	b2db      	uxtb	r3, r3
   1f38e:	2b08      	cmp	r3, #8
   1f390:	d805      	bhi.n	1f39e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x11e>
   1f392:	f240 1205 	movw	r2, #261	@ 0x105
   1f396:	fa22 f303 	lsr.w	r3, r2, r3
   1f39a:	07dc      	lsls	r4, r3, #31
   1f39c:	d4ed      	bmi.n	1f37a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfa>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
   1f39e:	488c      	ldr	r0, [pc, #560]	@ (1f5d0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x350>)
   1f3a0:	f005 fa2e 	bl	24800 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f3a4:	f06f 0009 	mvn.w	r0, #9
   1f3a8:	e77c      	b.n	1f2a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x24>
                if (block_config->quantized == 1) {
   1f3aa:	f898 3014 	ldrb.w	r3, [r8, #20]
   1f3ae:	2b00      	cmp	r3, #0
   1f3b0:	d0e3      	beq.n	1f37a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfa>
                    ei_printf("ERR: YOLOX does not support quantized inference\n");
   1f3b2:	4888      	ldr	r0, [pc, #544]	@ (1f5d4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x354>)
   1f3b4:	f005 fa24 	bl	24800 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f3b8:	e7f4      	b.n	1f3a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
                if (output->type == kTfLiteInt8) {
   1f3ba:	7f11      	ldrb	r1, [r2, #28]
   1f3bc:	1e4b      	subs	r3, r1, #1
   1f3be:	b2db      	uxtb	r3, r3
   1f3c0:	2b08      	cmp	r3, #8
   1f3c2:	d805      	bhi.n	1f3d0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x150>
   1f3c4:	f240 1205 	movw	r2, #261	@ 0x105
   1f3c8:	fa22 f303 	lsr.w	r3, r2, r3
   1f3cc:	07db      	lsls	r3, r3, #31
   1f3ce:	d4d4      	bmi.n	1f37a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfa>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv4 layer\n", output->type);
   1f3d0:	4881      	ldr	r0, [pc, #516]	@ (1f5d8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x358>)
   1f3d2:	f005 fa15 	bl	24800 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f3d6:	e7e5      	b.n	1f3a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
   1f3d8:	4880      	ldr	r0, [pc, #512]	@ (1f5dc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x35c>)
   1f3da:	f005 fa11 	bl	24800 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f3de:	e7e1      	b.n	1f3a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
                    fill_res = fill_result_struct_i8_fomo(
   1f3e0:	6913      	ldr	r3, [r2, #16]
   1f3e2:	9301      	str	r3, [sp, #4]
                if (int8_output) {
   1f3e4:	7f13      	ldrb	r3, [r2, #28]
                        impulse->fomo_output_size,
   1f3e6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
    int out_width_factor = impulse->input_width / out_width;
   1f3e8:	6abc      	ldr	r4, [r7, #40]	@ 0x28
   1f3ea:	fbb4 f4f0 	udiv	r4, r4, r0
                if (int8_output) {
   1f3ee:	2b09      	cmp	r3, #9
   1f3f0:	f000 808d 	beq.w	1f50e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x28e>
	: _M_start(), _M_finish(), _M_end_of_storage()
   1f3f4:	2100      	movs	r1, #0
   1f3f6:	2200      	movs	r2, #0
   1f3f8:	2300      	movs	r3, #0
   1f3fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f3fe:	9106      	str	r1, [sp, #24]
    for (size_t y = 0; y < out_width; y++) {
   1f400:	2800      	cmp	r0, #0
   1f402:	f000 80d8 	beq.w	1f5b6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x336>
   1f406:	f8b7 5072 	ldrh.w	r5, [r7, #114]	@ 0x72
   1f40a:	e9cd 0402 	strd	r0, r4, [sp, #8]
   1f40e:	46ac      	mov	ip, r5
   1f410:	468a      	mov	sl, r1
   1f412:	f10d 0910 	add.w	r9, sp, #16
   1f416:	460d      	mov	r5, r1
        for (size_t x = 0; x < out_height; x++) {
   1f418:	f04f 0b00 	mov.w	fp, #0
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   1f41c:	eb0b 0605 	add.w	r6, fp, r5
   1f420:	fb0c 6606 	mla	r6, ip, r6, r6
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   1f424:	f1bc 0f00 	cmp.w	ip, #0
   1f428:	d01e      	beq.n	1f468 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1e8>
   1f42a:	9b01      	ldr	r3, [sp, #4]
   1f42c:	3601      	adds	r6, #1
   1f42e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1f432:	2401      	movs	r4, #1
                float vf = data[loc+ix];
   1f434:	ecb6 0a01 	vldmia	r6!, {s0}
    if (vf < detection_threshold) return;
   1f438:	edd8 7a04 	vldr	s15, [r8, #16]
   1f43c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   1f440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f444:	4652      	mov	r2, sl
   1f446:	4659      	mov	r1, fp
   1f448:	4648      	mov	r0, r9
   1f44a:	d408      	bmi.n	1f45e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1de>
                ei_handle_cube(&cubes, x, y, vf, impulse->categories[ix - 1], block_config->threshold);
   1f44c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
   1f44e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1f452:	f853 3c04 	ldr.w	r3, [r3, #-4]
   1f456:	f7ff fc6d 	bl	1ed34 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0>
   1f45a:	f8b7 c072 	ldrh.w	ip, [r7, #114]	@ 0x72
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   1f45e:	3401      	adds	r4, #1
   1f460:	f10c 0301 	add.w	r3, ip, #1
   1f464:	429c      	cmp	r4, r3
   1f466:	d3e5      	bcc.n	1f434 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1b4>
        for (size_t x = 0; x < out_height; x++) {
   1f468:	9b02      	ldr	r3, [sp, #8]
   1f46a:	f10b 0b01 	add.w	fp, fp, #1
   1f46e:	459b      	cmp	fp, r3
   1f470:	d1d4      	bne.n	1f41c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x19c>
    for (size_t y = 0; y < out_width; y++) {
   1f472:	f10a 0a01 	add.w	sl, sl, #1
   1f476:	45da      	cmp	sl, fp
   1f478:	445d      	add	r5, fp
   1f47a:	d1cd      	bne.n	1f418 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x198>
    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);
   1f47c:	9c03      	ldr	r4, [sp, #12]
   1f47e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
   1f482:	9817      	ldr	r0, [sp, #92]	@ 0x5c
		      _M_impl._M_end_of_storage - _M_impl._M_start);
   1f484:	9d06      	ldr	r5, [sp, #24]
   1f486:	4622      	mov	r2, r4
	_M_deallocate(_M_impl._M_start,
   1f488:	9c04      	ldr	r4, [sp, #16]
   1f48a:	4649      	mov	r1, r9
   1f48c:	f7ff fde0 	bl	1f050 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>
	if (__p)
   1f490:	2c00      	cmp	r4, #0
   1f492:	f43f af06 	beq.w	1f2a2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
   1f496:	1b29      	subs	r1, r5, r4
   1f498:	4620      	mov	r0, r4
   1f49a:	f011 fed1 	bl	31240 <_ZdlPvj>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
   1f49e:	e700      	b.n	1f2a2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
                if (block_config->quantized == 1) {
   1f4a0:	f898 3014 	ldrb.w	r3, [r8, #20]
   1f4a4:	2b00      	cmp	r3, #0
   1f4a6:	f43f af68 	beq.w	1f37a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfa>
                    ei_printf("ERR: YOLOV7 does not support quantized inference\n");
   1f4aa:	484d      	ldr	r0, [pc, #308]	@ (1f5e0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x360>)
   1f4ac:	f005 f9a8 	bl	24800 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f4b0:	e778      	b.n	1f3a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
                if (output->type == kTfLiteInt8) {
   1f4b2:	7f11      	ldrb	r1, [r2, #28]
   1f4b4:	1e4b      	subs	r3, r1, #1
   1f4b6:	b2db      	uxtb	r3, r3
   1f4b8:	2b08      	cmp	r3, #8
   1f4ba:	d806      	bhi.n	1f4ca <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x24a>
   1f4bc:	f240 1205 	movw	r2, #261	@ 0x105
   1f4c0:	fa22 f303 	lsr.w	r3, r2, r3
   1f4c4:	07da      	lsls	r2, r3, #31
   1f4c6:	f53f af58 	bmi.w	1f37a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xfa>
                    ei_printf("ERR: Invalid output type (%d) for TAO YOLOv3 layer\n", output->type);
   1f4ca:	4846      	ldr	r0, [pc, #280]	@ (1f5e4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x364>)
   1f4cc:	f005 f998 	bl	24800 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f4d0:	e768      	b.n	1f3a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
            ei_printf("%s:\t", impulse->categories[ix]);
   1f4d2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1f4d6:	4844      	ldr	r0, [pc, #272]	@ (1f5e8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
   1f4d8:	f005 f992 	bl	24800 <_Z9ei_printfPKcz>
            ei_printf_float(value);
   1f4dc:	eeb0 0a48 	vmov.f32	s0, s16
   1f4e0:	f005 f9aa 	bl	24838 <_Z15ei_printf_floatf>
            ei_printf("\n");
   1f4e4:	4841      	ldr	r0, [pc, #260]	@ (1f5ec <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>)
   1f4e6:	f005 f98b 	bl	24800 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
   1f4ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
   1f4ec:	e705      	b.n	1f2fa <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x7a>
            ei_printf("%s:\t", impulse->categories[ix]);
   1f4ee:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
   1f4f2:	483d      	ldr	r0, [pc, #244]	@ (1f5e8 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x368>)
   1f4f4:	f005 f984 	bl	24800 <_Z9ei_printfPKcz>
            ei_printf_float(value);
   1f4f8:	eeb0 0a48 	vmov.f32	s0, s16
   1f4fc:	f005 f99c 	bl	24838 <_Z15ei_printf_floatf>
            ei_printf("\n");
   1f500:	483a      	ldr	r0, [pc, #232]	@ (1f5ec <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x36c>)
   1f502:	f005 f97d 	bl	24800 <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
   1f506:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
   1f508:	f8b7 5072 	ldrh.w	r5, [r7, #114]	@ 0x72
   1f50c:	e71d      	b.n	1f34a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0xca>
                    fill_res = fill_result_struct_i8_fomo(
   1f50e:	ed92 8a03 	vldr	s16, [r2, #12]
   1f512:	edd2 8a02 	vldr	s17, [r2, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
   1f516:	2100      	movs	r1, #0
   1f518:	2200      	movs	r2, #0
   1f51a:	2300      	movs	r3, #0
   1f51c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f520:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   1f524:	9106      	str	r1, [sp, #24]
    for (size_t y = 0; y < out_width; y++) {
   1f526:	2800      	cmp	r0, #0
   1f528:	d045      	beq.n	1f5b6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x336>
   1f52a:	f8b7 5072 	ldrh.w	r5, [r7, #114]	@ 0x72
   1f52e:	e9cd 0402 	strd	r0, r4, [sp, #8]
   1f532:	46ac      	mov	ip, r5
   1f534:	468a      	mov	sl, r1
   1f536:	f10d 0910 	add.w	r9, sp, #16
   1f53a:	460d      	mov	r5, r1
        for (size_t x = 0; x < out_height; x++) {
   1f53c:	f04f 0b00 	mov.w	fp, #0
            size_t loc = ((y * out_height) + x) * (impulse->label_count + 1);
   1f540:	eb0b 0605 	add.w	r6, fp, r5
   1f544:	fb0c 6606 	mla	r6, ip, r6, r6
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   1f548:	f1bc 0f00 	cmp.w	ip, #0
   1f54c:	d024      	beq.n	1f598 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x318>
   1f54e:	9b01      	ldr	r3, [sp, #4]
   1f550:	2401      	movs	r4, #1
   1f552:	441e      	add	r6, r3
                float vf = static_cast<float>(v - zero_point) * scale;
   1f554:	f916 3f01 	ldrsb.w	r3, [r6, #1]!
    if (vf < detection_threshold) return;
   1f558:	edd8 7a04 	vldr	s15, [r8, #16]
                float vf = static_cast<float>(v - zero_point) * scale;
   1f55c:	ee00 3a10 	vmov	s0, r3
   1f560:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   1f564:	4652      	mov	r2, sl
   1f566:	ee30 0a48 	vsub.f32	s0, s0, s16
   1f56a:	4659      	mov	r1, fp
   1f56c:	ee20 0a28 	vmul.f32	s0, s0, s17
    if (vf < detection_threshold) return;
   1f570:	4648      	mov	r0, r9
   1f572:	eeb4 0ae7 	vcmpe.f32	s0, s15
   1f576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f57a:	d408      	bmi.n	1f58e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x30e>
                ei_handle_cube(&cubes, x, y, vf, impulse->categories[ix - 1], block_config->threshold);
   1f57c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
   1f57e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1f582:	f853 3c04 	ldr.w	r3, [r3, #-4]
   1f586:	f7ff fbd5 	bl	1ed34 <_ZL14ei_handle_cubePSt6vectorIP4cubeSaIS1_EEiifPKcf.part.0>
   1f58a:	f8b7 c072 	ldrh.w	ip, [r7, #114]	@ 0x72
            for (size_t ix = 1; ix < impulse->label_count + 1; ix++) {
   1f58e:	3401      	adds	r4, #1
   1f590:	f10c 0301 	add.w	r3, ip, #1
   1f594:	429c      	cmp	r4, r3
   1f596:	d3dd      	bcc.n	1f554 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2d4>
        for (size_t x = 0; x < out_height; x++) {
   1f598:	9b02      	ldr	r3, [sp, #8]
   1f59a:	f10b 0b01 	add.w	fp, fp, #1
   1f59e:	459b      	cmp	fp, r3
   1f5a0:	d1ce      	bne.n	1f540 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2c0>
    for (size_t y = 0; y < out_width; y++) {
   1f5a2:	f10a 0a01 	add.w	sl, sl, #1
   1f5a6:	45da      	cmp	sl, fp
   1f5a8:	445d      	add	r5, fp
   1f5aa:	d1c7      	bne.n	1f53c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x2bc>
   1f5ac:	e766      	b.n	1f47c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x1fc>
                    ei_printf("ERR: Invalid output type (%d) for TAO last layer\n", output->type);
   1f5ae:	4810      	ldr	r0, [pc, #64]	@ (1f5f0 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x370>)
   1f5b0:	f005 f926 	bl	24800 <_Z9ei_printfPKcz>
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f5b4:	e6f6      	b.n	1f3a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
    fill_result_struct_from_cubes(result, &cubes, out_width_factor, impulse->object_detection_count);
   1f5b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
   1f5ba:	9817      	ldr	r0, [sp, #92]	@ 0x5c
   1f5bc:	4622      	mov	r2, r4
   1f5be:	a904      	add	r1, sp, #16
   1f5c0:	f7ff fd46 	bl	1f050 <_ZL29fill_result_struct_from_cubesP19ei_impulse_result_tPSt6vectorIP4cubeSaIS3_EEim>
      _M_deallocate(pointer __p, size_t __n)
   1f5c4:	e66d      	b.n	1f2a2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x22>
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
   1f5c6:	480b      	ldr	r0, [pc, #44]	@ (1f5f4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x374>)
   1f5c8:	f005 f91a 	bl	24800 <_Z9ei_printfPKcz>
                return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
   1f5cc:	e6ea      	b.n	1f3a4 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb+0x124>
   1f5ce:	bf00      	nop
   1f5d0:	0003f340 	.word	0x0003f340
   1f5d4:	0003f378 	.word	0x0003f378
   1f5d8:	0003f448 	.word	0x0003f448
   1f5dc:	0003f2f8 	.word	0x0003f2f8
   1f5e0:	0003f3ac 	.word	0x0003f3ac
   1f5e4:	0003f414 	.word	0x0003f414
   1f5e8:	0003f4b0 	.word	0x0003f4b0
   1f5ec:	0003f2c4 	.word	0x0003f2c4
   1f5f0:	0003f3e0 	.word	0x0003f3e0
   1f5f4:	0003f47c 	.word	0x0003f47c

0001f5f8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(
   1f5f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f5fc:	4699      	mov	r9, r3
    ei_impulse_result_t *result,
    bool debug) {

    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;

    if (graph_config->model_invoke() != kTfLiteOk) {
   1f5fe:	698b      	ldr	r3, [r1, #24]
static EI_IMPULSE_ERROR inference_tflite_run(
   1f600:	b085      	sub	sp, #20
    if (graph_config->model_invoke() != kTfLiteOk) {
   1f602:	689b      	ldr	r3, [r3, #8]
static EI_IMPULSE_ERROR inference_tflite_run(
   1f604:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
   1f606:	f89d 8040 	ldrb.w	r8, [sp, #64]	@ 0x40
   1f60a:	460c      	mov	r4, r1
   1f60c:	4607      	mov	r7, r0
   1f60e:	4615      	mov	r5, r2
    if (graph_config->model_invoke() != kTfLiteOk) {
   1f610:	4798      	blx	r3
   1f612:	bb50      	cbnz	r0, 1f66a <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x72>
        return EI_IMPULSE_TFLITE_ERROR;
    }

    uint64_t ctx_end_us = ei_read_timer_us();
   1f614:	f005 f8ec 	bl	247f0 <_Z16ei_read_timer_usv>

    result->timing.classification_us = ctx_end_us - ctx_start_us;
   1f618:	1b40      	subs	r0, r0, r5
   1f61a:	eb61 0109 	sbc.w	r1, r1, r9
   1f61e:	e9c6 010c 	strd	r0, r1, [r6, #48]	@ 0x30
    result->timing.classification = (int)(result->timing.classification_us / 1000);
   1f622:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   1f626:	2300      	movs	r3, #0
   1f628:	f7f9 fd9a 	bl	19160 <__aeabi_ldivmod>
   1f62c:	6230      	str	r0, [r6, #32]

    // Read the predicted y value from the model's output tensor
    if (debug) {
   1f62e:	f1b8 0f00 	cmp.w	r8, #0
   1f632:	d115      	bne.n	1f660 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x68>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
    }

    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
   1f634:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1f636:	9300      	str	r3, [sp, #0]
   1f638:	4621      	mov	r1, r4
   1f63a:	e9cd 6801 	strd	r6, r8, [sp, #4]
   1f63e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
   1f642:	4638      	mov	r0, r7
   1f644:	f7ff fe1c 	bl	1f280 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP39ei_learning_block_config_tflite_graph_tP12TfLiteTensorS5_S5_P19ei_impulse_result_tb>
        impulse, block_config, output, labels_tensor, scores_tensor, result, debug);

    if (fill_res != EI_IMPULSE_OK) {
   1f648:	4604      	mov	r4, r0
   1f64a:	b928      	cbnz	r0, 1f658 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x60>
        return fill_res;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   1f64c:	f005 f8ce 	bl	247ec <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
   1f650:	3002      	adds	r0, #2
   1f652:	bf08      	it	eq
   1f654:	f06f 0401 	mvneq.w	r4, #1
    }

    return EI_IMPULSE_OK;
}
   1f658:	4620      	mov	r0, r4
   1f65a:	b005      	add	sp, #20
   1f65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
   1f660:	4601      	mov	r1, r0
   1f662:	4803      	ldr	r0, [pc, #12]	@ (1f670 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x78>)
   1f664:	f005 f8cc 	bl	24800 <_Z9ei_printfPKcz>
   1f668:	e7e4      	b.n	1f634 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x3c>
        return EI_IMPULSE_TFLITE_ERROR;
   1f66a:	f06f 0402 	mvn.w	r4, #2
   1f66e:	e7f3      	b.n	1f658 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0+0x60>
   1f670:	0003f4b8 	.word	0x0003f4b8

0001f674 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>:
EI_IMPULSE_ERROR run_nn_inference_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false) {
   1f674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f678:	ed2d 8b0a 	vpush	{d8-d12}
   1f67c:	b0c1      	sub	sp, #260	@ 0x104
   1f67e:	4699      	mov	r9, r3
   1f680:	4617      	mov	r7, r2
   1f682:	f89d 3150 	ldrb.w	r3, [sp, #336]	@ 0x150
   1f686:	9311      	str	r3, [sp, #68]	@ 0x44
   1f688:	910b      	str	r1, [sp, #44]	@ 0x2c

    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
   1f68a:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1f68e:	9312      	str	r3, [sp, #72]	@ 0x48

    memset(result, 0, sizeof(ei_impulse_result_t));
   1f690:	2248      	movs	r2, #72	@ 0x48
   1f692:	2100      	movs	r1, #0
    bool debug = false) {
   1f694:	4606      	mov	r6, r0
    memset(result, 0, sizeof(ei_impulse_result_t));
   1f696:	4638      	mov	r0, r7
   1f698:	f007 fb14 	bl	26cc4 <memset>
    TfLiteTensor output_scores;
    TfLiteTensor output_labels;

    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
   1f69c:	ab30      	add	r3, sp, #192	@ 0xc0
   1f69e:	9301      	str	r3, [sp, #4]
   1f6a0:	ab38      	add	r3, sp, #224	@ 0xe0
   1f6a2:	9300      	str	r3, [sp, #0]
   1f6a4:	aa20      	add	r2, sp, #128	@ 0x80
   1f6a6:	ab28      	add	r3, sp, #160	@ 0xa0
   1f6a8:	a91e      	add	r1, sp, #120	@ 0x78
   1f6aa:	4648      	mov	r0, r9
   1f6ac:	f7fe ff8a 	bl	1e5c4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0>
        &input, &output,
        &output_labels,
        &output_scores,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
   1f6b0:	4604      	mov	r4, r0
   1f6b2:	2800      	cmp	r0, #0
   1f6b4:	f040 8149 	bne.w	1f94a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2d6>
        return init_res;
    }

    if (input.type != TfLiteType::kTfLiteInt8 && input.type != TfLiteType::kTfLiteUInt8) {
   1f6b8:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
   1f6bc:	2b09      	cmp	r3, #9
   1f6be:	d002      	beq.n	1f6c6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x52>
   1f6c0:	2b03      	cmp	r3, #3
   1f6c2:	f040 8255 	bne.w	1fb70 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4fc>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
   1f6c6:	f005 f893 	bl	247f0 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input.data.int8);
   1f6ca:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
   1f6ce:	69b3      	ldr	r3, [r6, #24]
   1f6d0:	9319      	str	r3, [sp, #100]	@ 0x64
    uint64_t dsp_start_us = ei_read_timer_us();
   1f6d2:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
   1f6d6:	f1bb 0f00 	cmp.w	fp, #0
   1f6da:	f000 8241 	beq.w	1fb60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4ec>
            buffer = a_buffer;
            buffer_managed_by_me = false;
   1f6de:	2300      	movs	r3, #0
   1f6e0:	9313      	str	r3, [sp, #76]	@ 0x4c

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
   1f6e2:	6c33      	ldr	r3, [r6, #64]	@ 0x40
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
   1f6e4:	6db2      	ldr	r2, [r6, #88]	@ 0x58
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
   1f6e6:	68db      	ldr	r3, [r3, #12]
   1f6e8:	eddd 7a23 	vldr	s15, [sp, #140]	@ 0x8c

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, float scale, float zero_point, const float frequency,
                                                             int image_scaling) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1f6ec:	6958      	ldr	r0, [r3, #20]
   1f6ee:	49d4      	ldr	r1, [pc, #848]	@ (1fa40 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3cc>)
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
   1f6f0:	6915      	ldr	r5, [r2, #16]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
   1f6f2:	f8d3 a008 	ldr.w	sl, [r3, #8]
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input.params.scale, input.params.zero_point,
   1f6f6:	eddd 9a22 	vldr	s19, [sp, #136]	@ 0x88
   1f6fa:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1f6fe:	f7f8 fd7f 	bl	18200 <strcmp>
#else
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
   1f702:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1f704:	2800      	cmp	r0, #0
    size_t bytes_left = signal->total_length;
   1f706:	691a      	ldr	r2, [r3, #16]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
   1f708:	bf14      	ite	ne
   1f70a:	2303      	movne	r3, #3
   1f70c:	2301      	moveq	r3, #1
   1f70e:	9308      	str	r3, [sp, #32]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1f710:	2a00      	cmp	r2, #0
   1f712:	f000 80e5 	beq.w	1f8e0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x26c>
   1f716:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
   1f71a:	ee87 9aa9 	vdiv.f32	s18, s15, s19
   1f71e:	e9cd 6716 	strd	r6, r7, [sp, #88]	@ 0x58
    size_t output_ix = 0;
   1f722:	2400      	movs	r4, #0
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1f724:	940c      	str	r4, [sp, #48]	@ 0x30
   1f726:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
   1f72a:	4690      	mov	r8, r2
   1f72c:	f8cd 9060 	str.w	r9, [sp, #96]	@ 0x60
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
                }
            }
            else {
                // fast code path
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1f730:	eddf cac4 	vldr	s25, [pc, #784]	@ 1fa44 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3d0>
                        b -= 128.0f;
                    }

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1f734:	eddf bac4 	vldr	s23, [pc, #784]	@ 1fa48 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3d4>
   1f738:	ed9f bac4 	vldr	s22, [pc, #784]	@ 1fa4c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3d8>
   1f73c:	eddf aac4 	vldr	s21, [pc, #784]	@ 1fa50 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3dc>
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   1f740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
   1f742:	f5b8 6f80 	cmp.w	r8, #1024	@ 0x400
   1f746:	4646      	mov	r6, r8
   1f748:	bf28      	it	cs
   1f74a:	f44f 6680 	movcs.w	r6, #1024	@ 0x400
   1f74e:	fb03 f006 	mul.w	r0, r3, r6
   1f752:	0080      	lsls	r0, r0, #2
   1f754:	2101      	movs	r1, #1
   1f756:	f005 f87f 	bl	24858 <_Z9ei_callocjj>
        if (!input_matrix.buffer) {
   1f75a:	900a      	str	r0, [sp, #40]	@ 0x28
   1f75c:	2800      	cmp	r0, #0
   1f75e:	f000 81cc 	beq.w	1fafa <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x486>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
   1f762:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   1f764:	e9cd 361b 	strd	r3, r6, [sp, #108]	@ 0x6c
   1f768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1f76a:	931d      	str	r3, [sp, #116]	@ 0x74
	if (_M_empty())
   1f76c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1f76e:	689b      	ldr	r3, [r3, #8]
   1f770:	2b00      	cmp	r3, #0
   1f772:	f000 8200 	beq.w	1fb76 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x502>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   1f776:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1f778:	ab1d      	add	r3, sp, #116	@ 0x74
   1f77a:	68c7      	ldr	r7, [r0, #12]
   1f77c:	aa1c      	add	r2, sp, #112	@ 0x70
   1f77e:	a91b      	add	r1, sp, #108	@ 0x6c
   1f780:	47b8      	blx	r7
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1f782:	f1b8 0f00 	cmp.w	r8, #0
   1f786:	f000 8099 	beq.w	1f8bc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x248>
   1f78a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
   1f78c:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1f790:	ed9f aab0 	vldr	s20, [pc, #704]	@ 1fa54 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e0>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1f794:	46a8      	mov	r8, r5
   1f796:	f04f 0a00 	mov.w	sl, #0
   1f79a:	4622      	mov	r2, r4
   1f79c:	463d      	mov	r5, r7
   1f79e:	e033      	b.n	1f808 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x194>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1f7a0:	eef4 9a6c 	vcmp.f32	s19, s25
   1f7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f7a8:	f040 80d5 	bne.w	1f956 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2e2>
   1f7ac:	eef4 8a4a 	vcmp.f32	s17, s20
   1f7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f7b4:	f040 80cf 	bne.w	1f956 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2e2>
   1f7b8:	f1b8 0f00 	cmp.w	r8, #0
   1f7bc:	f040 80f3 	bne.w	1f9a6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x332>
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
   1f7c0:	f249 6245 	movw	r2, #38469	@ 0x9645
   1f7c4:	fb02 fc0c 	mul.w	ip, r2, ip
   1f7c8:	f644 428b 	movw	r2, #19595	@ 0x4c8b
   1f7cc:	fb02 cc0e 	mla	ip, r2, lr, ip
   1f7d0:	f641 522f 	movw	r2, #7471	@ 0x1d2f
   1f7d4:	fb02 cc04 	mla	ip, r2, r4, ip
                    gray >>= 16; // scale down to int8_t
   1f7d8:	ea4f 432c 	mov.w	r3, ip, asr #16
   1f7dc:	ee07 3a90 	vmov	s15, r3
                    gray += zero_point;
   1f7e0:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 1fa5c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e8>
   1f7e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1f7e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1f7ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1f7f0:	ee17 2a90 	vmov	r2, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
   1f7f4:	f302 0207 	ssat	r2, #8, r2
   1f7f8:	b252      	sxtb	r2, r2
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1f7fa:	f10a 0a01 	add.w	sl, sl, #1
   1f7fe:	4556      	cmp	r6, sl
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
   1f800:	f889 2000 	strb.w	r2, [r9]
   1f804:	463a      	mov	r2, r7
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1f806:	d955      	bls.n	1f8b4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x240>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   1f808:	ecf5 7a01 	vldmia	r5!, {s15}
            if (channel_count == 3) {
   1f80c:	9b08      	ldr	r3, [sp, #32]
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   1f80e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
            if (channel_count == 3) {
   1f812:	2b03      	cmp	r3, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
   1f814:	ee17 4a90 	vmov	r4, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1f818:	f102 0701 	add.w	r7, r2, #1
                    int32_t r = static_cast<int32_t>(pixel >> 16 & 0xff);
   1f81c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
   1f820:	f3c4 2c07 	ubfx	ip, r4, #8, #8
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1f824:	eb0b 0902 	add.w	r9, fp, r2
                    int32_t b = static_cast<int32_t>(pixel & 0xff);
   1f828:	b2e4      	uxtb	r4, r4
            if (channel_count == 3) {
   1f82a:	d1b9      	bne.n	1f7a0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x12c>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1f82c:	ee07 ea90 	vmov	s15, lr
   1f830:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1f834:	ee07 ca90 	vmov	s15, ip
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1f838:	eef4 9a6c 	vcmp.f32	s19, s25
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1f83c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1f840:	ee07 4a90 	vmov	s15, r4
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1f844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1f848:	eeb8 cae7 	vcvt.f32.s32	s24, s15
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1f84c:	f040 80c6 	bne.w	1f9dc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x368>
   1f850:	eef4 8a4a 	vcmp.f32	s17, s20
   1f854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f858:	f040 80c0 	bne.w	1f9dc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x368>
   1f85c:	f1b8 0f00 	cmp.w	r8, #0
   1f860:	f040 810a 	bne.w	1fa78 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x404>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1f864:	eddf 7a7d 	vldr	s15, [pc, #500]	@ 1fa5c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e8>
   1f868:	ee70 6a67 	vsub.f32	s13, s0, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1f86c:	ee38 8a67 	vsub.f32	s16, s16, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1f870:	ee3c ca67 	vsub.f32	s24, s24, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1f874:	eefd 7ae6 	vcvt.s32.f32	s15, s13
   1f878:	edcd 7a07 	vstr	s15, [sp, #28]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1f87c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1f880:	f99d 401c 	ldrsb.w	r4, [sp, #28]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1f884:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1f888:	eefd 7acc 	vcvt.s32.f32	s15, s24
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1f88c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	@ 0x24
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1f890:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
   1f894:	f99d c040 	ldrsb.w	ip, [sp, #64]	@ 0x40
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1f898:	930d      	str	r3, [sp, #52]	@ 0x34
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1f89a:	f10a 0a01 	add.w	sl, sl, #1
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1f89e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
   1f8a0:	f889 4000 	strb.w	r4, [r9]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1f8a4:	4556      	cmp	r6, sl
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
   1f8a6:	f80b 3007 	strb.w	r3, [fp, r7]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
   1f8aa:	f102 0203 	add.w	r2, r2, #3
   1f8ae:	f889 c002 	strb.w	ip, [r9, #2]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
   1f8b2:	d8a9      	bhi.n	1f808 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x194>
   1f8b4:	4645      	mov	r5, r8
   1f8b6:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
   1f8ba:	4614      	mov	r4, r2
            ei_free(buffer);
   1f8bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1f8be:	f004 ffd9 	bl	24874 <_Z7ei_freePv>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1f8c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   1f8c4:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
   1f8c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1f8ca:	920c      	str	r2, [sp, #48]	@ 0x30
   1f8cc:	691b      	ldr	r3, [r3, #16]
   1f8ce:	429a      	cmp	r2, r3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
                }
            }
        }

        bytes_left -= elements_to_read;
   1f8d0:	eba8 0806 	sub.w	r8, r8, r6
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
   1f8d4:	f4ff af34 	bcc.w	1f740 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xcc>
   1f8d8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	@ 0x58
   1f8dc:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
        return EI_IMPULSE_DSP_ERROR;
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   1f8e0:	f004 ff84 	bl	247ec <_Z29ei_run_impulse_check_canceledv>
   1f8e4:	1c83      	adds	r3, r0, #2
   1f8e6:	4604      	mov	r4, r0
   1f8e8:	d028      	beq.n	1f93c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2c8>
        return EI_IMPULSE_CANCELED;
    }

    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
   1f8ea:	f004 ff81 	bl	247f0 <_Z16ei_read_timer_usv>
   1f8ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   1f8f0:	1ac0      	subs	r0, r0, r3
   1f8f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   1f8f4:	eb61 0103 	sbc.w	r1, r1, r3
   1f8f8:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   1f8fc:	2300      	movs	r3, #0
   1f8fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   1f902:	f7f9 fc2d 	bl	19160 <__aeabi_ldivmod>

    if (debug) {
   1f906:	9b11      	ldr	r3, [sp, #68]	@ 0x44
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   1f908:	61f8      	str	r0, [r7, #28]
    if (debug) {
   1f90a:	2b00      	cmp	r3, #0
   1f90c:	f040 8105 	bne.w	1fb1a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4a6>
            ei_printf(" ");
        }
        ei_printf("\n");
    }

    ctx_start_us = ei_read_timer_us();
   1f910:	f004 ff6e 	bl	247f0 <_Z16ei_read_timer_usv>
   1f914:	460b      	mov	r3, r1

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   1f916:	9911      	ldr	r1, [sp, #68]	@ 0x44
   1f918:	e9cd 7103 	strd	r7, r1, [sp, #12]
   1f91c:	a930      	add	r1, sp, #192	@ 0xc0
   1f91e:	9102      	str	r1, [sp, #8]
   1f920:	a938      	add	r1, sp, #224	@ 0xe0
   1f922:	9101      	str	r1, [sp, #4]
   1f924:	a928      	add	r1, sp, #160	@ 0xa0
    ctx_start_us = ei_read_timer_us();
   1f926:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   1f928:	9100      	str	r1, [sp, #0]
   1f92a:	4630      	mov	r0, r6
   1f92c:	4649      	mov	r1, r9
   1f92e:	f7ff fe63 	bl	1f5f8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
        &output_scores,
        static_cast<uint8_t*>(p_tensor_arena.get()),
        result,
        debug);

    graph_config->model_reset(ei_aligned_free);
   1f932:	9b12      	ldr	r3, [sp, #72]	@ 0x48
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   1f934:	4604      	mov	r4, r0
    graph_config->model_reset(ei_aligned_free);
   1f936:	68db      	ldr	r3, [r3, #12]
   1f938:	4847      	ldr	r0, [pc, #284]	@ (1fa58 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e4>)
   1f93a:	4798      	blx	r3
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
   1f93c:	f1bb 0f00 	cmp.w	fp, #0
   1f940:	d003      	beq.n	1f94a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2d6>
   1f942:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   1f944:	2b00      	cmp	r3, #0
   1f946:	f040 80df 	bne.w	1fb08 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x494>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
   1f94a:	4620      	mov	r0, r4
   1f94c:	b041      	add	sp, #260	@ 0x104
   1f94e:	ecbd 8b0a 	vpop	{d8-d12}
   1f952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    float r = static_cast<float>(pixel >> 16 & 0xff);
   1f956:	ee07 ea90 	vmov	s15, lr
                    float b = static_cast<float>(pixel & 0xff);
   1f95a:	ee07 4a10 	vmov	s14, r4
                    float r = static_cast<float>(pixel >> 16 & 0xff);
   1f95e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   1f962:	ee07 ca90 	vmov	s15, ip
                    float b = static_cast<float>(pixel & 0xff);
   1f966:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   1f96a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1f96e:	f1b8 0f00 	cmp.w	r8, #0
   1f972:	d124      	bne.n	1f9be <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x34a>
                        r /= 255.0f;
   1f974:	ee66 6aac 	vmul.f32	s13, s13, s25
                        g /= 255.0f;
   1f978:	ee67 7aac 	vmul.f32	s15, s15, s25
                        b /= 255.0f;
   1f97c:	ee27 7a2c 	vmul.f32	s14, s14, s25
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
   1f980:	ee27 0aab 	vmul.f32	s0, s15, s23
   1f984:	eea6 0a8b 	vfma.f32	s0, s13, s22
   1f988:	eea7 0a2a 	vfma.f32	s0, s14, s21
   1f98c:	ee29 0a00 	vmul.f32	s0, s18, s0
   1f990:	f005 fabe 	bl	24f10 <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
   1f994:	ee38 0a80 	vadd.f32	s0, s17, s0
   1f998:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1f99c:	edcd 7a07 	vstr	s15, [sp, #28]
   1f9a0:	f99d 201c 	ldrsb.w	r2, [sp, #28]
   1f9a4:	e729      	b.n	1f7fa <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x186>
                    float r = static_cast<float>(pixel >> 16 & 0xff);
   1f9a6:	ee07 ea90 	vmov	s15, lr
                    float b = static_cast<float>(pixel & 0xff);
   1f9aa:	ee07 4a10 	vmov	s14, r4
                    float r = static_cast<float>(pixel >> 16 & 0xff);
   1f9ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   1f9b2:	ee07 ca90 	vmov	s15, ip
                    float b = static_cast<float>(pixel & 0xff);
   1f9b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
   1f9ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
   1f9be:	f1b8 0f02 	cmp.w	r8, #2
   1f9c2:	d068      	beq.n	1fa96 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x422>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
   1f9c4:	f1b8 0f04 	cmp.w	r8, #4
   1f9c8:	d1da      	bne.n	1f980 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x30c>
                        r -= 128.0f;
   1f9ca:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 1fa5c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e8>
   1f9ce:	ee76 6ac6 	vsub.f32	s13, s13, s12
                        g -= 128.0f;
   1f9d2:	ee77 7ac6 	vsub.f32	s15, s15, s12
                        b -= 128.0f;
   1f9d6:	ee37 7a46 	vsub.f32	s14, s14, s12
   1f9da:	e7d1      	b.n	1f980 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x30c>
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
   1f9dc:	f1b8 0f00 	cmp.w	r8, #0
   1f9e0:	d14a      	bne.n	1fa78 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x404>
                        r /= 255.0f;
   1f9e2:	ee20 0a2c 	vmul.f32	s0, s0, s25
                        g /= 255.0f;
   1f9e6:	ee28 8a2c 	vmul.f32	s16, s16, s25
                        b /= 255.0f;
   1f9ea:	ee2c ca2c 	vmul.f32	s24, s24, s25
   1f9ee:	ee29 0a00 	vmul.f32	s0, s18, s0
   1f9f2:	9209      	str	r2, [sp, #36]	@ 0x24
   1f9f4:	f005 fa8c 	bl	24f10 <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
   1f9f8:	ee78 7a80 	vadd.f32	s15, s17, s0
   1f9fc:	ee29 0a08 	vmul.f32	s0, s18, s16
   1fa00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1fa04:	edcd 7a07 	vstr	s15, [sp, #28]
   1fa08:	f005 fa82 	bl	24f10 <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
   1fa0c:	ee78 7a80 	vadd.f32	s15, s17, s0
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
   1fa10:	f99d 401c 	ldrsb.w	r4, [sp, #28]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
   1fa14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1fa18:	ee29 0a0c 	vmul.f32	s0, s18, s24
   1fa1c:	edcd 7a07 	vstr	s15, [sp, #28]
   1fa20:	f99d 301c 	ldrsb.w	r3, [sp, #28]
   1fa24:	930d      	str	r3, [sp, #52]	@ 0x34
   1fa26:	f005 fa73 	bl	24f10 <roundf>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
   1fa2a:	ee38 0a80 	vadd.f32	s0, s17, s0
   1fa2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1fa30:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1fa34:	edcd 7a07 	vstr	s15, [sp, #28]
   1fa38:	f99d c01c 	ldrsb.w	ip, [sp, #28]
   1fa3c:	e72d      	b.n	1f89a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x226>
   1fa3e:	bf00      	nop
   1fa40:	0003f128 	.word	0x0003f128
   1fa44:	3b808081 	.word	0x3b808081
   1fa48:	3f1645a2 	.word	0x3f1645a2
   1fa4c:	3e991687 	.word	0x3e991687
   1fa50:	3de978d5 	.word	0x3de978d5
   1fa54:	c3000000 	.word	0xc3000000
   1fa58:	0001e551 	.word	0x0001e551
   1fa5c:	43000000 	.word	0x43000000
   1fa60:	bef851ec 	.word	0xbef851ec
   1fa64:	bee978d5 	.word	0xbee978d5
   1fa68:	408bbced 	.word	0x408bbced
   1fa6c:	becfdf3b 	.word	0xbecfdf3b
   1fa70:	408edb6d 	.word	0x408edb6d
   1fa74:	408e38e4 	.word	0x408e38e4
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
   1fa78:	f1b8 0f02 	cmp.w	r8, #2
   1fa7c:	d024      	beq.n	1fac8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x454>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_MIN128_127) {
   1fa7e:	f1b8 0f04 	cmp.w	r8, #4
   1fa82:	d1b4      	bne.n	1f9ee <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37a>
                        r -= 128.0f;
   1fa84:	ed5f 7a0b 	vldr	s15, [pc, #-44]	@ 1fa5c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3e8>
   1fa88:	ee30 0a67 	vsub.f32	s0, s0, s15
                        g -= 128.0f;
   1fa8c:	ee38 8a67 	vsub.f32	s16, s16, s15
                        b -= 128.0f;
   1fa90:	ee3c ca67 	vsub.f32	s24, s24, s15
   1fa94:	e7ab      	b.n	1f9ee <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37a>
                        r = (r - torch_mean[0]) / torch_std[0];
   1fa96:	ed1f 5a0e 	vldr	s10, [pc, #-56]	@ 1fa60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3ec>
                        g = (g - torch_mean[1]) / torch_std[1];
   1fa9a:	ed5f 5a0e 	vldr	s11, [pc, #-56]	@ 1fa64 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f0>
                        b = (b - torch_mean[2]) / torch_std[2];
   1fa9e:	ed1f 6a0d 	vldr	s12, [pc, #-52]	@ 1fa6c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f8>
                        r = (r - torch_mean[0]) / torch_std[0];
   1faa2:	eea6 5aac 	vfma.f32	s10, s13, s25
                        g = (g - torch_mean[1]) / torch_std[1];
   1faa6:	eee7 5aac 	vfma.f32	s11, s15, s25
                        b = (b - torch_mean[2]) / torch_std[2];
   1faaa:	eea7 6a2c 	vfma.f32	s12, s14, s25
                        r = (r - torch_mean[0]) / torch_std[0];
   1faae:	ed5f 6a12 	vldr	s13, [pc, #-72]	@ 1fa68 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f4>
                        g = (g - torch_mean[1]) / torch_std[1];
   1fab2:	ed5f 7a11 	vldr	s15, [pc, #-68]	@ 1fa70 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3fc>
                        b = (b - torch_mean[2]) / torch_std[2];
   1fab6:	ed1f 7a11 	vldr	s14, [pc, #-68]	@ 1fa74 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x400>
                        r = (r - torch_mean[0]) / torch_std[0];
   1faba:	ee65 6a26 	vmul.f32	s13, s10, s13
                        g = (g - torch_mean[1]) / torch_std[1];
   1fabe:	ee65 7aa7 	vmul.f32	s15, s11, s15
                        b = (b - torch_mean[2]) / torch_std[2];
   1fac2:	ee26 7a07 	vmul.f32	s14, s12, s14
   1fac6:	e75b      	b.n	1f980 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x30c>
                        r = (r - torch_mean[0]) / torch_std[0];
   1fac8:	ed1f 6a1b 	vldr	s12, [pc, #-108]	@ 1fa60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3ec>
                        g = (g - torch_mean[1]) / torch_std[1];
   1facc:	ed1f 7a1b 	vldr	s14, [pc, #-108]	@ 1fa64 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f0>
                        b = (b - torch_mean[2]) / torch_std[2];
   1fad0:	ed5f 7a1a 	vldr	s15, [pc, #-104]	@ 1fa6c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f8>
                        r = (r - torch_mean[0]) / torch_std[0];
   1fad4:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 1fa68 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3f4>
                        g = (g - torch_mean[1]) / torch_std[1];
   1fad8:	eea8 7a2c 	vfma.f32	s14, s16, s25
                        b = (b - torch_mean[2]) / torch_std[2];
   1fadc:	eeec 7a2c 	vfma.f32	s15, s24, s25
                        r = (r - torch_mean[0]) / torch_std[0];
   1fae0:	eea0 6a2c 	vfma.f32	s12, s0, s25
                        g = (g - torch_mean[1]) / torch_std[1];
   1fae4:	ed1f 8a1e 	vldr	s16, [pc, #-120]	@ 1fa70 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3fc>
                        b = (b - torch_mean[2]) / torch_std[2];
   1fae8:	ed1f ca1e 	vldr	s24, [pc, #-120]	@ 1fa74 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x400>
                        r = (r - torch_mean[0]) / torch_std[0];
   1faec:	ee26 0a26 	vmul.f32	s0, s12, s13
                        g = (g - torch_mean[1]) / torch_std[1];
   1faf0:	ee27 8a08 	vmul.f32	s16, s14, s16
                        b = (b - torch_mean[2]) / torch_std[2];
   1faf4:	ee27 ca8c 	vmul.f32	s24, s15, s24
   1faf8:	e779      	b.n	1f9ee <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37a>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
   1fafa:	4920      	ldr	r1, [pc, #128]	@ (1fb7c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x508>)
   1fafc:	4820      	ldr	r0, [pc, #128]	@ (1fb80 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x50c>)
   1fafe:	f004 fe7f 	bl	24800 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
   1fb02:	f06f 0404 	mvn.w	r4, #4
   1fb06:	e719      	b.n	1f93c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2c8>
            ei_free(buffer);
   1fb08:	4658      	mov	r0, fp
   1fb0a:	f004 feb3 	bl	24874 <_Z7ei_freePv>
}
   1fb0e:	4620      	mov	r0, r4
   1fb10:	b041      	add	sp, #260	@ 0x104
   1fb12:	ecbd 8b0a 	vpop	{d8-d12}
   1fb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei_printf("Features (%d ms.): ", result->timing.dsp);
   1fb1a:	4601      	mov	r1, r0
   1fb1c:	4819      	ldr	r0, [pc, #100]	@ (1fb84 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x510>)
   1fb1e:	f004 fe6f 	bl	24800 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
   1fb22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   1fb24:	b1c3      	cbz	r3, 1fb58 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4e4>
   1fb26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
            ei_printf(" ");
   1fb28:	4d17      	ldr	r5, [pc, #92]	@ (1fb88 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x514>)
   1fb2a:	1e5c      	subs	r4, r3, #1
   1fb2c:	445c      	add	r4, fp
   1fb2e:	f10b 38ff 	add.w	r8, fp, #4294967295	@ 0xffffffff
            ei_printf_float((features_matrix.buffer[ix] - input.params.zero_point) * input.params.scale);
   1fb32:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
   1fb36:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   1fb38:	ed9d 0a22 	vldr	s0, [sp, #136]	@ 0x88
   1fb3c:	1a9b      	subs	r3, r3, r2
   1fb3e:	ee07 3a90 	vmov	s15, r3
   1fb42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1fb46:	ee27 0a80 	vmul.f32	s0, s15, s0
   1fb4a:	f004 fe75 	bl	24838 <_Z15ei_printf_floatf>
            ei_printf(" ");
   1fb4e:	4628      	mov	r0, r5
   1fb50:	f004 fe56 	bl	24800 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
   1fb54:	4544      	cmp	r4, r8
   1fb56:	d1ec      	bne.n	1fb32 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x4be>
        ei_printf("\n");
   1fb58:	480c      	ldr	r0, [pc, #48]	@ (1fb8c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x518>)
   1fb5a:	f004 fe51 	bl	24800 <_Z9ei_printfPKcz>
   1fb5e:	e6d7      	b.n	1f910 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x29c>
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
   1fb60:	4618      	mov	r0, r3
   1fb62:	2101      	movs	r1, #1
   1fb64:	f004 fe78 	bl	24858 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   1fb68:	2301      	movs	r3, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
   1fb6a:	4683      	mov	fp, r0
            buffer_managed_by_me = true;
   1fb6c:	9313      	str	r3, [sp, #76]	@ 0x4c
   1fb6e:	e5b8      	b.n	1f6e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x6e>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
   1fb70:	f06f 0408 	mvn.w	r4, #8
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      _GLIBCXX23_CONSTEXPR
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
   1fb74:	e6e9      	b.n	1f94a <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2d6>
	  __throw_bad_function_call();
   1fb76:	f014 f9ad 	bl	33ed4 <_ZSt25__throw_bad_function_callv>
   1fb7a:	bf00      	nop
   1fb7c:	fffffc16 	.word	0xfffffc16
   1fb80:	0003f28c 	.word	0x0003f28c
   1fb84:	0003f4d8 	.word	0x0003f4d8
   1fb88:	00040308 	.word	0x00040308
   1fb8c:	0003f2c4 	.word	0x0003f2c4

0001fb90 <process_impulse>:
 */
extern "C" EI_IMPULSE_ERROR process_impulse(ei_impulse_handle_t *handle,
                                            signal_t *signal,
                                            ei_impulse_result_t *result,
                                            bool debug = false)
{
   1fb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb94:	b0a5      	sub	sp, #148	@ 0x94
   1fb96:	9103      	str	r1, [sp, #12]
   1fb98:	930e      	str	r3, [sp, #56]	@ 0x38
    if(!handle) {
   1fb9a:	2800      	cmp	r0, #0
   1fb9c:	f000 8236 	beq.w	2000c <process_impulse+0x47c>
        return EI_IMPULSE_INFERENCE_ERROR;
    }

#if (EI_CLASSIFIER_QUANTIZATION_ENABLED == 1 && (EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TENSAIFLOW || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_ONNX_TIDL)) || EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_DRPAI
    // Shortcut for quantized image models
    ei_learning_block_t block = handle->impulse->learning_blocks[0];
   1fba0:	6905      	ldr	r5, [r0, #16]
   1fba2:	4698      	mov	r8, r3
   1fba4:	f895 3064 	ldrb.w	r3, [r5, #100]	@ 0x64
   1fba8:	3b02      	subs	r3, #2
   1fbaa:	4617      	mov	r7, r2
   1fbac:	b2db      	uxtb	r3, r3
   1fbae:	6daa      	ldr	r2, [r5, #88]	@ 0x58
   1fbb0:	2b09      	cmp	r3, #9
   1fbb2:	4604      	mov	r4, r0
   1fbb4:	e9d2 0602 	ldrd	r0, r6, [r2, #8]
/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized(const ei_impulse_t *impulse, ei_learning_block_t block_ptr) {

    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
   1fbb8:	d829      	bhi.n	1fc0e <process_impulse+0x7e>
   1fbba:	f240 2229 	movw	r2, #553	@ 0x229
   1fbbe:	fa22 f303 	lsr.w	r3, r2, r3
   1fbc2:	07da      	lsls	r2, r3, #31
   1fbc4:	d523      	bpl.n	1fc0e <process_impulse+0x7e>
    {
        return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
    }

    // visual anomaly also needs to go through the normal path
    if (impulse->has_anomaly){
   1fbc6:	4689      	mov	r9, r1
   1fbc8:	f895 1071 	ldrb.w	r1, [r5, #113]	@ 0x71
   1fbcc:	b9f9      	cbnz	r1, 1fc0e <process_impulse+0x7e>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

        // Check if we have tflite graph
    if (block_ptr.infer_fn != run_nn_inference) {
   1fbce:	4baa      	ldr	r3, [pc, #680]	@ (1fe78 <process_impulse+0x2e8>)
   1fbd0:	4298      	cmp	r0, r3
   1fbd2:	d11c      	bne.n	1fc0e <process_impulse+0x7e>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    // Check if we have a quantized NN Input layer (input is always quantized for DRP-AI)
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)block_ptr.config;
    if (block_config->quantized != 1) {
   1fbd4:	7d33      	ldrb	r3, [r6, #20]
   1fbd6:	b1d3      	cbz	r3, 1fc0e <process_impulse+0x7e>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    // And if we have one DSP block which operates on images...
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
   1fbd8:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
   1fbdc:	2b01      	cmp	r3, #1
   1fbde:	d116      	bne.n	1fc0e <process_impulse+0x7e>
   1fbe0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
   1fbe2:	689a      	ldr	r2, [r3, #8]
   1fbe4:	4ba5      	ldr	r3, [pc, #660]	@ (1fe7c <process_impulse+0x2ec>)
   1fbe6:	429a      	cmp	r2, r3
   1fbe8:	d111      	bne.n	1fc0e <process_impulse+0x7e>
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    memset(result, 0, sizeof(ei_impulse_result_t));
   1fbea:	2248      	movs	r2, #72	@ 0x48
   1fbec:	4638      	mov	r0, r7
   1fbee:	f007 f869 	bl	26cc4 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, impulse->learning_blocks[0].config, debug);
   1fbf2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
   1fbf4:	463a      	mov	r2, r7
   1fbf6:	68db      	ldr	r3, [r3, #12]
   1fbf8:	f8cd 8000 	str.w	r8, [sp]
   1fbfc:	4649      	mov	r1, r9
   1fbfe:	4628      	mov	r0, r5
   1fc00:	f7ff fd38 	bl	1f674 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>
   1fc04:	4683      	mov	fp, r0
}
   1fc06:	4658      	mov	r0, fp
   1fc08:	b025      	add	sp, #148	@ 0x94
   1fc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    memset(result, 0, sizeof(ei_impulse_result_t));
   1fc0e:	2100      	movs	r1, #0
   1fc10:	2248      	movs	r2, #72	@ 0x48
   1fc12:	4638      	mov	r0, r7
   1fc14:	f007 f856 	bl	26cc4 <memset>
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
   1fc18:	6923      	ldr	r3, [r4, #16]
   1fc1a:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
   1fc1e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
   1fc22:	18d6      	adds	r6, r2, r3
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
   1fc24:	00f5      	lsls	r5, r6, #3
   1fc26:	4628      	mov	r0, r5
    uint32_t block_num = handle->impulse->dsp_blocks_size + handle->impulse->learning_blocks_size;
   1fc28:	9610      	str	r6, [sp, #64]	@ 0x40
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
   1fc2a:	f011 fb05 	bl	31238 <_Znaj>
    memset(features, 0, sizeof(ei_feature_t) * block_num);
   1fc2e:	462a      	mov	r2, r5
   1fc30:	2100      	movs	r1, #0
    std::unique_ptr<ei_feature_t[]> features_ptr(new ei_feature_t[block_num]);
   1fc32:	900c      	str	r0, [sp, #48]	@ 0x30
    memset(features, 0, sizeof(ei_feature_t) * block_num);
   1fc34:	f007 f846 	bl	26cc4 <memset>
    std::unique_ptr<ei::matrix_t> *matrix_ptrs = new std::unique_ptr<ei::matrix_t>[block_num];
   1fc38:	1cb3      	adds	r3, r6, #2
   1fc3a:	009b      	lsls	r3, r3, #2
   1fc3c:	4618      	mov	r0, r3
   1fc3e:	930d      	str	r3, [sp, #52]	@ 0x34
   1fc40:	f011 fafa 	bl	31238 <_Znaj>
   1fc44:	2304      	movs	r3, #4
   1fc46:	6003      	str	r3, [r0, #0]
   1fc48:	f100 0308 	add.w	r3, r0, #8
   1fc4c:	900a      	str	r0, [sp, #40]	@ 0x28
   1fc4e:	6046      	str	r6, [r0, #4]
   1fc50:	930b      	str	r3, [sp, #44]	@ 0x2c
   1fc52:	b12e      	cbz	r6, 1fc60 <process_impulse+0xd0>

  template<size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   1fc54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1fc56:	980b      	ldr	r0, [sp, #44]	@ 0x2c
   1fc58:	009a      	lsls	r2, r3, #2
   1fc5a:	2100      	movs	r1, #0
   1fc5c:	f007 f832 	bl	26cc4 <memset>
    uint64_t dsp_start_us = ei_read_timer_us();
   1fc60:	f004 fdc6 	bl	247f0 <_Z16ei_read_timer_usv>
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
   1fc64:	6923      	ldr	r3, [r4, #16]
    uint64_t dsp_start_us = ei_read_timer_us();
   1fc66:	9111      	str	r1, [sp, #68]	@ 0x44
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
   1fc68:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
    uint64_t dsp_start_us = ei_read_timer_us();
   1fc6c:	4606      	mov	r6, r0
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
   1fc6e:	2a00      	cmp	r2, #0
   1fc70:	f000 809f 	beq.w	1fdb2 <process_impulse+0x222>
   1fc74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   1fc76:	3204      	adds	r2, #4
   1fc78:	9204      	str	r2, [sp, #16]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   1fc7a:	e9cd 7012 	strd	r7, r0, [sp, #72]	@ 0x48
   1fc7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   1fc80:	f04f 0900 	mov.w	r9, #0
   1fc84:	f102 0804 	add.w	r8, r2, #4
   1fc88:	46cb      	mov	fp, r9
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
   1fc8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
   1fc8c:	ea4f 1249 	mov.w	r2, r9, lsl #5
   1fc90:	4611      	mov	r1, r2
   1fc92:	9209      	str	r2, [sp, #36]	@ 0x24
   1fc94:	eb03 1249 	add.w	r2, r3, r9, lsl #5
   1fc98:	585f      	ldr	r7, [r3, r1]
   1fc9a:	f8d2 a014 	ldr.w	sl, [r2, #20]
   1fc9e:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
   1fca2:	9308      	str	r3, [sp, #32]
   1fca4:	68d3      	ldr	r3, [r2, #12]
   1fca6:	9307      	str	r3, [sp, #28]
   1fca8:	6913      	ldr	r3, [r2, #16]
   1fcaa:	9306      	str	r3, [sp, #24]
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
   1fcac:	2010      	movs	r0, #16
        ei_model_dsp_t block = handle->impulse->dsp_blocks[ix];
   1fcae:	69d3      	ldr	r3, [r2, #28]
   1fcb0:	9305      	str	r3, [sp, #20]
        matrix_ptrs[ix] = std::unique_ptr<ei::matrix_t>(new ei::matrix_t(1, block.n_output_features));
   1fcb2:	f011 fabf 	bl	31234 <_Znwj>
   1fcb6:	2101      	movs	r1, #1
   1fcb8:	4606      	mov	r6, r0
   1fcba:	00a8      	lsls	r0, r5, #2
   1fcbc:	f004 fdcc 	bl	24858 <_Z9ei_callocjj>
            buffer_managed_by_me = true;
   1fcc0:	f04f 0301 	mov.w	r3, #1
   1fcc4:	7333      	strb	r3, [r6, #12]
        rows = n_rows;
   1fcc6:	2301      	movs	r3, #1
        cols = n_cols;
   1fcc8:	e9c6 3501 	strd	r3, r5, [r6, #4]
      const _Dp& _M_deleter() const noexcept { return std::get<1>(_M_t); }

      _GLIBCXX23_CONSTEXPR
      void reset(pointer __p) noexcept
      {
	const pointer __old_p = _M_ptr();
   1fccc:	9b04      	ldr	r3, [sp, #16]
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
   1fcce:	6030      	str	r0, [r6, #0]
   1fcd0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1fcd4:	9304      	str	r3, [sp, #16]
	_M_ptr() = __p;
   1fcd6:	601e      	str	r6, [r3, #0]
	if (__old_p)
   1fcd8:	b14a      	cbz	r2, 1fcee <process_impulse+0x15e>
        if (buffer && buffer_managed_by_me) {
   1fcda:	6810      	ldr	r0, [r2, #0]
   1fcdc:	b118      	cbz	r0, 1fce6 <process_impulse+0x156>
   1fcde:	7b11      	ldrb	r1, [r2, #12]
   1fce0:	2900      	cmp	r1, #0
   1fce2:	f040 8105 	bne.w	1fef0 <process_impulse+0x360>
	delete __ptr;
   1fce6:	4610      	mov	r0, r2
   1fce8:	2110      	movs	r1, #16
   1fcea:	f011 faa9 	bl	31240 <_ZdlPvj>
        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
   1fcee:	6922      	ldr	r2, [r4, #16]
        features[ix].blockId = block.blockId;
   1fcf0:	f8c8 7000 	str.w	r7, [r8]
        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
   1fcf4:	6991      	ldr	r1, [r2, #24]
        features[ix].matrix = matrix_ptrs[ix].get();
   1fcf6:	f848 6c04 	str.w	r6, [r8, #-4]
        if (out_features_index + block.n_output_features > handle->impulse->nn_input_frame_size) {
   1fcfa:	44ab      	add	fp, r5
   1fcfc:	458b      	cmp	fp, r1
   1fcfe:	f200 8107 	bhi.w	1ff10 <process_impulse+0x380>
      : _Function_base() { }
   1fd02:	ad1f      	add	r5, sp, #124	@ 0x7c
   1fd04:	2100      	movs	r1, #0
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
   1fd06:	9b06      	ldr	r3, [sp, #24]
   1fd08:	60a9      	str	r1, [r5, #8]
   1fd0a:	931c      	str	r3, [sp, #112]	@ 0x70
   1fd0c:	9b03      	ldr	r3, [sp, #12]
   1fd0e:	931b      	str	r3, [sp, #108]	@ 0x6c
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
   1fd10:	6a13      	ldr	r3, [r2, #32]
   1fd12:	911f      	str	r1, [sp, #124]	@ 0x7c
   1fd14:	459a      	cmp	sl, r3
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
   1fd16:	e9cd a21d 	strd	sl, r2, [sp, #116]	@ 0x74
   1fd1a:	6069      	str	r1, [r5, #4]
   1fd1c:	9122      	str	r1, [sp, #136]	@ 0x88
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
   1fd1e:	d07d      	beq.n	1fe1c <process_impulse+0x28c>
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   1fd20:	4857      	ldr	r0, [pc, #348]	@ (1fe80 <process_impulse+0x2f0>)
	: _Function_base()
   1fd22:	9118      	str	r1, [sp, #96]	@ 0x60
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   1fd24:	a91b      	add	r1, sp, #108	@ 0x6c
      __b = _GLIBCXX_MOVE(__tmp);
   1fd26:	9021      	str	r0, [sp, #132]	@ 0x84
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   1fd28:	9117      	str	r1, [sp, #92]	@ 0x5c
      __b = _GLIBCXX_MOVE(__tmp);
   1fd2a:	4856      	ldr	r0, [pc, #344]	@ (1fe84 <process_impulse+0x2f4>)
   1fd2c:	9022      	str	r0, [sp, #136]	@ 0x88
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   1fd2e:	a917      	add	r1, sp, #92	@ 0x5c
   1fd30:	c903      	ldmia	r1, {r0, r1}
   1fd32:	af15      	add	r7, sp, #84	@ 0x54
   1fd34:	e887 0003 	stmia.w	r7, {r0, r1}
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
   1fd38:	9903      	ldr	r1, [sp, #12]
   1fd3a:	6909      	ldr	r1, [r1, #16]
   1fd3c:	fbb1 f1f3 	udiv	r1, r1, r3
   1fd40:	fb0a f101 	mul.w	r1, sl, r1
   1fd44:	9123      	str	r1, [sp, #140]	@ 0x8c
      __b = _GLIBCXX_MOVE(__tmp);
   1fd46:	e897 0003 	ldmia.w	r7, {r0, r1}
        if (block.factory) { // ie, if we're using state
   1fd4a:	9b05      	ldr	r3, [sp, #20]
   1fd4c:	e885 0003 	stmia.w	r5, {r0, r1}
        return &wrapped_signal;
   1fd50:	462f      	mov	r7, r5
   1fd52:	2b00      	cmp	r3, #0
   1fd54:	d066      	beq.n	1fe24 <process_impulse+0x294>
            if (!has_printed) {
   1fd56:	4e4c      	ldr	r6, [pc, #304]	@ (1fe88 <process_impulse+0x2f8>)
   1fd58:	7833      	ldrb	r3, [r6, #0]
   1fd5a:	2b00      	cmp	r3, #0
   1fd5c:	f000 8098 	beq.w	1fe90 <process_impulse+0x300>
            dsp_handles[ix] = nullptr;
        }
    }

    DspHandle* get_dsp_handle(size_t ix) {
        if (dsp_handles[ix] == nullptr) {
   1fd60:	68a6      	ldr	r6, [r4, #8]
   1fd62:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
   1fd66:	2800      	cmp	r0, #0
   1fd68:	f000 80a2 	beq.w	1feb0 <process_impulse+0x320>
                ret = dsp_handle->extract(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
   1fd6c:	6922      	ldr	r2, [r4, #16]
   1fd6e:	9b07      	ldr	r3, [sp, #28]
   1fd70:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
   1fd74:	6802      	ldr	r2, [r0, #0]
   1fd76:	4639      	mov	r1, r7
   1fd78:	6856      	ldr	r6, [r2, #4]
   1fd7a:	f858 2c04 	ldr.w	r2, [r8, #-4]
   1fd7e:	47b0      	blx	r6
        if (ret != EIDSP_OK) {
   1fd80:	2800      	cmp	r0, #0
   1fd82:	d158      	bne.n	1fe36 <process_impulse+0x2a6>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
   1fd84:	f004 fd32 	bl	247ec <_Z29ei_run_impulse_check_canceledv>
   1fd88:	1c83      	adds	r3, r0, #2
   1fd8a:	f000 80ed 	beq.w	1ff68 <process_impulse+0x3d8>
      if (_M_manager)
   1fd8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
   1fd90:	b11b      	cbz	r3, 1fd9a <process_impulse+0x20a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   1fd92:	2203      	movs	r2, #3
   1fd94:	4629      	mov	r1, r5
   1fd96:	4628      	mov	r0, r5
   1fd98:	4798      	blx	r3
    for (size_t ix = 0; ix < handle->impulse->dsp_blocks_size; ix++) {
   1fd9a:	6923      	ldr	r3, [r4, #16]
   1fd9c:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
   1fda0:	f109 0901 	add.w	r9, r9, #1
   1fda4:	454a      	cmp	r2, r9
   1fda6:	f108 0808 	add.w	r8, r8, #8
   1fdaa:	f63f af6e 	bhi.w	1fc8a <process_impulse+0xfa>
   1fdae:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	@ 0x48
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
   1fdb2:	f004 fd1d 	bl	247f0 <_Z16ei_read_timer_usv>
   1fdb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   1fdb8:	1b80      	subs	r0, r0, r6
   1fdba:	eb61 0103 	sbc.w	r1, r1, r3
   1fdbe:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   1fdc2:	2300      	movs	r3, #0
   1fdc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
   1fdc8:	f7f9 f9ca 	bl	19160 <__aeabi_ldivmod>
    if (debug) {
   1fdcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
   1fdce:	61f8      	str	r0, [r7, #28]
    if (debug) {
   1fdd0:	2b00      	cmp	r3, #0
   1fdd2:	f040 80ea 	bne.w	1ffaa <process_impulse+0x41a>
    EI_IMPULSE_ERROR res = run_inference(handle, features, result, debug);
   1fdd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   1fdd8:	990c      	ldr	r1, [sp, #48]	@ 0x30
   1fdda:	463a      	mov	r2, r7
   1fddc:	4620      	mov	r0, r4
   1fdde:	f7fe ff01 	bl	1ebe4 <run_inference>
    delete[] matrix_ptrs;
   1fde2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1fde4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   1fde6:	eb03 0a02 	add.w	sl, r3, r2
   1fdea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1fdec:	4553      	cmp	r3, sl
   1fdee:	f000 8084 	beq.w	1fefa <process_impulse+0x36a>
   1fdf2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   1fdf4:	e005      	b.n	1fe02 <process_impulse+0x272>
   1fdf6:	2110      	movs	r1, #16
   1fdf8:	4628      	mov	r0, r5
   1fdfa:	f011 fa21 	bl	31240 <_ZdlPvj>
   1fdfe:	4556      	cmp	r6, sl
   1fe00:	d07b      	beq.n	1fefa <process_impulse+0x36a>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   1fe02:	f85a 5d04 	ldr.w	r5, [sl, #-4]!
   1fe06:	2d00      	cmp	r5, #0
   1fe08:	d0f9      	beq.n	1fdfe <process_impulse+0x26e>
   1fe0a:	6828      	ldr	r0, [r5, #0]
   1fe0c:	2800      	cmp	r0, #0
   1fe0e:	d0f2      	beq.n	1fdf6 <process_impulse+0x266>
   1fe10:	7b2b      	ldrb	r3, [r5, #12]
   1fe12:	2b00      	cmp	r3, #0
   1fe14:	d0ef      	beq.n	1fdf6 <process_impulse+0x266>
            ei_free(buffer);
   1fe16:	f004 fd2d 	bl	24874 <_Z7ei_freePv>
   1fe1a:	e7ec      	b.n	1fdf6 <process_impulse+0x266>
        if (block.factory) { // ie, if we're using state
   1fe1c:	9b05      	ldr	r3, [sp, #20]
            return this->_original_signal;
   1fe1e:	9f03      	ldr	r7, [sp, #12]
   1fe20:	2b00      	cmp	r3, #0
   1fe22:	d198      	bne.n	1fd56 <process_impulse+0x1c6>
            ret = block.extract_fn(internal_signal, features[ix].matrix, block.config, handle->impulse->frequency);
   1fe24:	ed92 0a0e 	vldr	s0, [r2, #56]	@ 0x38
   1fe28:	9b08      	ldr	r3, [sp, #32]
   1fe2a:	9a07      	ldr	r2, [sp, #28]
   1fe2c:	4631      	mov	r1, r6
   1fe2e:	4638      	mov	r0, r7
   1fe30:	4798      	blx	r3
        if (ret != EIDSP_OK) {
   1fe32:	2800      	cmp	r0, #0
   1fe34:	d0a6      	beq.n	1fd84 <process_impulse+0x1f4>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
   1fe36:	4601      	mov	r1, r0
   1fe38:	4814      	ldr	r0, [pc, #80]	@ (1fe8c <process_impulse+0x2fc>)
   1fe3a:	f004 fce1 	bl	24800 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
   1fe3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1fe40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   1fe42:	189f      	adds	r7, r3, r2
   1fe44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1fe46:	42bb      	cmp	r3, r7
   1fe48:	f000 8087 	beq.w	1ff5a <process_impulse+0x3ca>
   1fe4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   1fe4e:	e005      	b.n	1fe5c <process_impulse+0x2cc>
	delete __ptr;
   1fe50:	2110      	movs	r1, #16
   1fe52:	4620      	mov	r0, r4
   1fe54:	f011 f9f4 	bl	31240 <_ZdlPvj>
   1fe58:	42be      	cmp	r6, r7
   1fe5a:	d07e      	beq.n	1ff5a <process_impulse+0x3ca>
	if (__ptr != nullptr)
   1fe5c:	f857 4d04 	ldr.w	r4, [r7, #-4]!
   1fe60:	2c00      	cmp	r4, #0
   1fe62:	d0f9      	beq.n	1fe58 <process_impulse+0x2c8>
        if (buffer && buffer_managed_by_me) {
   1fe64:	6820      	ldr	r0, [r4, #0]
   1fe66:	2800      	cmp	r0, #0
   1fe68:	d0f2      	beq.n	1fe50 <process_impulse+0x2c0>
   1fe6a:	7b23      	ldrb	r3, [r4, #12]
   1fe6c:	2b00      	cmp	r3, #0
   1fe6e:	d0ef      	beq.n	1fe50 <process_impulse+0x2c0>
            ei_free(buffer);
   1fe70:	f004 fd00 	bl	24874 <_Z7ei_freePv>
   1fe74:	e7ec      	b.n	1fe50 <process_impulse+0x2c0>
   1fe76:	bf00      	nop
   1fe78:	00020501 	.word	0x00020501
   1fe7c:	0001e831 	.word	0x0001e831
   1fe80:	0001e57d 	.word	0x0001e57d
   1fe84:	0001e6bd 	.word	0x0001e6bd
   1fe88:	100180a8 	.word	0x100180a8
   1fe8c:	0003f28c 	.word	0x0003f28c
                EI_LOGI("Impulse maintains state. Call run_classifier_init() to reset state (e.g. if data stream is interrupted.)\n");
   1fe90:	4960      	ldr	r1, [pc, #384]	@ (20014 <process_impulse+0x484>)
   1fe92:	4861      	ldr	r0, [pc, #388]	@ (20018 <process_impulse+0x488>)
   1fe94:	f004 fcb4 	bl	24800 <_Z9ei_printfPKcz>
   1fe98:	4860      	ldr	r0, [pc, #384]	@ (2001c <process_impulse+0x48c>)
   1fe9a:	f004 fcb1 	bl	24800 <_Z9ei_printfPKcz>
                has_printed = true;
   1fe9e:	f04f 0301 	mov.w	r3, #1
   1fea2:	7033      	strb	r3, [r6, #0]
   1fea4:	68a6      	ldr	r6, [r4, #8]
   1fea6:	f856 0029 	ldr.w	r0, [r6, r9, lsl #2]
   1feaa:	2800      	cmp	r0, #0
   1feac:	f47f af5e 	bne.w	1fd6c <process_impulse+0x1dc>
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config, impulse->frequency);
   1feb0:	6863      	ldr	r3, [r4, #4]
   1feb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   1feb4:	ed93 0a0e 	vldr	s0, [r3, #56]	@ 0x38
   1feb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
   1feba:	4413      	add	r3, r2
   1febc:	69da      	ldr	r2, [r3, #28]
   1febe:	68d8      	ldr	r0, [r3, #12]
   1fec0:	4790      	blx	r2
        }
        return dsp_handles[ix];
   1fec2:	68a3      	ldr	r3, [r4, #8]
            dsp_handles[ix] = impulse->dsp_blocks[ix].factory(impulse->dsp_blocks[ix].config, impulse->frequency);
   1fec4:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
        return dsp_handles[ix];
   1fec8:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
            if(dsp_handle) {
   1fecc:	2800      	cmp	r0, #0
   1fece:	f47f af4d 	bne.w	1fd6c <process_impulse+0x1dc>
                return EI_IMPULSE_OUT_OF_MEMORY;
   1fed2:	f06f 0b0a 	mvn.w	fp, #10
      if (_M_manager)
   1fed6:	9c21      	ldr	r4, [sp, #132]	@ 0x84
   1fed8:	b11c      	cbz	r4, 1fee2 <process_impulse+0x352>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   1feda:	2203      	movs	r2, #3
   1fedc:	4629      	mov	r1, r5
   1fede:	4628      	mov	r0, r5
   1fee0:	47a0      	blx	r4
	  delete [] __ptr;
   1fee2:	980c      	ldr	r0, [sp, #48]	@ 0x30
   1fee4:	f011 f9ae 	bl	31244 <_ZdaPv>
}
   1fee8:	4658      	mov	r0, fp
   1feea:	b025      	add	sp, #148	@ 0x94
   1feec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fef0:	920f      	str	r2, [sp, #60]	@ 0x3c
   1fef2:	f004 fcbf 	bl	24874 <_Z7ei_freePv>
   1fef6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   1fef8:	e6f5      	b.n	1fce6 <process_impulse+0x156>
    delete[] matrix_ptrs;
   1fefa:	990d      	ldr	r1, [sp, #52]	@ 0x34
   1fefc:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1fefe:	f011 f9a3 	bl	31248 <_ZdaPvj>
    res = run_postprocessing(handle, result, debug);
   1ff02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   1ff04:	4639      	mov	r1, r7
   1ff06:	4620      	mov	r0, r4
   1ff08:	f7fe fd3c 	bl	1e984 <run_postprocessing>
   1ff0c:	4683      	mov	fp, r0
    return res;
   1ff0e:	e7e8      	b.n	1fee2 <process_impulse+0x352>
            ei_printf("ERR: Would write outside feature buffer\n");
   1ff10:	4843      	ldr	r0, [pc, #268]	@ (20020 <process_impulse+0x490>)
   1ff12:	f004 fc75 	bl	24800 <_Z9ei_printfPKcz>
            delete[] matrix_ptrs;
   1ff16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1ff18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   1ff1a:	189d      	adds	r5, r3, r2
   1ff1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1ff1e:	42ab      	cmp	r3, r5
   1ff20:	d014      	beq.n	1ff4c <process_impulse+0x3bc>
   1ff22:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   1ff24:	e005      	b.n	1ff32 <process_impulse+0x3a2>
	delete __ptr;
   1ff26:	2110      	movs	r1, #16
   1ff28:	4620      	mov	r0, r4
   1ff2a:	f011 f989 	bl	31240 <_ZdlPvj>
   1ff2e:	42ae      	cmp	r6, r5
   1ff30:	d00c      	beq.n	1ff4c <process_impulse+0x3bc>
	if (__ptr != nullptr)
   1ff32:	f855 4d04 	ldr.w	r4, [r5, #-4]!
   1ff36:	2c00      	cmp	r4, #0
   1ff38:	d0f9      	beq.n	1ff2e <process_impulse+0x39e>
        if (buffer && buffer_managed_by_me) {
   1ff3a:	6820      	ldr	r0, [r4, #0]
   1ff3c:	2800      	cmp	r0, #0
   1ff3e:	d0f2      	beq.n	1ff26 <process_impulse+0x396>
   1ff40:	7b23      	ldrb	r3, [r4, #12]
   1ff42:	2b00      	cmp	r3, #0
   1ff44:	d0ef      	beq.n	1ff26 <process_impulse+0x396>
            ei_free(buffer);
   1ff46:	f004 fc95 	bl	24874 <_Z7ei_freePv>
   1ff4a:	e7ec      	b.n	1ff26 <process_impulse+0x396>
   1ff4c:	990d      	ldr	r1, [sp, #52]	@ 0x34
   1ff4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1ff50:	f011 f97a 	bl	31248 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
   1ff54:	f06f 0b04 	mvn.w	fp, #4
   1ff58:	e7c3      	b.n	1fee2 <process_impulse+0x352>
            delete[] matrix_ptrs;
   1ff5a:	990d      	ldr	r1, [sp, #52]	@ 0x34
   1ff5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1ff5e:	f011 f973 	bl	31248 <_ZdaPvj>
            return EI_IMPULSE_DSP_ERROR;
   1ff62:	f06f 0b04 	mvn.w	fp, #4
   1ff66:	e7b6      	b.n	1fed6 <process_impulse+0x346>
            delete[] matrix_ptrs;
   1ff68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   1ff6a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   1ff6c:	189f      	adds	r7, r3, r2
   1ff6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   1ff70:	42bb      	cmp	r3, r7
   1ff72:	4683      	mov	fp, r0
   1ff74:	d014      	beq.n	1ffa0 <process_impulse+0x410>
   1ff76:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   1ff78:	e005      	b.n	1ff86 <process_impulse+0x3f6>
	delete __ptr;
   1ff7a:	2110      	movs	r1, #16
   1ff7c:	4620      	mov	r0, r4
   1ff7e:	f011 f95f 	bl	31240 <_ZdlPvj>
   1ff82:	42be      	cmp	r6, r7
   1ff84:	d00c      	beq.n	1ffa0 <process_impulse+0x410>
	if (__ptr != nullptr)
   1ff86:	f857 4d04 	ldr.w	r4, [r7, #-4]!
   1ff8a:	2c00      	cmp	r4, #0
   1ff8c:	d0f9      	beq.n	1ff82 <process_impulse+0x3f2>
        if (buffer && buffer_managed_by_me) {
   1ff8e:	6820      	ldr	r0, [r4, #0]
   1ff90:	2800      	cmp	r0, #0
   1ff92:	d0f2      	beq.n	1ff7a <process_impulse+0x3ea>
   1ff94:	7b23      	ldrb	r3, [r4, #12]
   1ff96:	2b00      	cmp	r3, #0
   1ff98:	d0ef      	beq.n	1ff7a <process_impulse+0x3ea>
            ei_free(buffer);
   1ff9a:	f004 fc6b 	bl	24874 <_Z7ei_freePv>
   1ff9e:	e7ec      	b.n	1ff7a <process_impulse+0x3ea>
   1ffa0:	990d      	ldr	r1, [sp, #52]	@ 0x34
   1ffa2:	980a      	ldr	r0, [sp, #40]	@ 0x28
   1ffa4:	f011 f950 	bl	31248 <_ZdaPvj>
            return EI_IMPULSE_CANCELED;
   1ffa8:	e795      	b.n	1fed6 <process_impulse+0x346>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
   1ffaa:	4601      	mov	r1, r0
   1ffac:	481d      	ldr	r0, [pc, #116]	@ (20024 <process_impulse+0x494>)
   1ffae:	f004 fc27 	bl	24800 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
   1ffb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   1ffb4:	b333      	cbz	r3, 20004 <process_impulse+0x474>
                ei_printf(" ");
   1ffb6:	4d1c      	ldr	r5, [pc, #112]	@ (20028 <process_impulse+0x498>)
            ei_printf("\n");
   1ffb8:	4e1c      	ldr	r6, [pc, #112]	@ (2002c <process_impulse+0x49c>)
        for (size_t ix = 0; ix < block_num; ix++) {
   1ffba:	f8dd a040 	ldr.w	sl, [sp, #64]	@ 0x40
   1ffbe:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
   1ffc2:	f04f 0b00 	mov.w	fp, #0
            if (features[ix].matrix == nullptr) {
   1ffc6:	f859 303b 	ldr.w	r3, [r9, fp, lsl #3]
   1ffca:	b1bb      	cbz	r3, 1fffc <process_impulse+0x46c>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
   1ffcc:	689a      	ldr	r2, [r3, #8]
   1ffce:	f04f 0800 	mov.w	r8, #0
   1ffd2:	b182      	cbz	r2, 1fff6 <process_impulse+0x466>
                ei_printf_float(features[ix].matrix->buffer[jx]);
   1ffd4:	681b      	ldr	r3, [r3, #0]
   1ffd6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   1ffda:	ed93 0a00 	vldr	s0, [r3]
   1ffde:	f004 fc2b 	bl	24838 <_Z15ei_printf_floatf>
                ei_printf(" ");
   1ffe2:	4628      	mov	r0, r5
   1ffe4:	f004 fc0c 	bl	24800 <_Z9ei_printfPKcz>
            for (size_t jx = 0; jx < features[ix].matrix->cols; jx++) {
   1ffe8:	f859 303b 	ldr.w	r3, [r9, fp, lsl #3]
   1ffec:	689a      	ldr	r2, [r3, #8]
   1ffee:	f108 0801 	add.w	r8, r8, #1
   1fff2:	4542      	cmp	r2, r8
   1fff4:	d8ee      	bhi.n	1ffd4 <process_impulse+0x444>
            ei_printf("\n");
   1fff6:	4630      	mov	r0, r6
   1fff8:	f004 fc02 	bl	24800 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < block_num; ix++) {
   1fffc:	f10b 0b01 	add.w	fp, fp, #1
   20000:	45da      	cmp	sl, fp
   20002:	d1e0      	bne.n	1ffc6 <process_impulse+0x436>
        ei_printf("Running impulse...\n");
   20004:	480a      	ldr	r0, [pc, #40]	@ (20030 <process_impulse+0x4a0>)
   20006:	f004 fbfb 	bl	24800 <_Z9ei_printfPKcz>
   2000a:	e6e4      	b.n	1fdd6 <process_impulse+0x246>
        return EI_IMPULSE_INFERENCE_ERROR;
   2000c:	f06f 0b15 	mvn.w	fp, #21
   20010:	e5f9      	b.n	1fc06 <process_impulse+0x76>
   20012:	bf00      	nop
   20014:	0003f4ec 	.word	0x0003f4ec
   20018:	0003f4f4 	.word	0x0003f4f4
   2001c:	0003f4fc 	.word	0x0003f4fc
   20020:	0003f214 	.word	0x0003f214
   20024:	0003f4d8 	.word	0x0003f4d8
   20028:	00040308 	.word	0x00040308
   2002c:	0003f2c4 	.word	0x0003f2c4
   20030:	0003f2c8 	.word	0x0003f2c8

00020034 <main>:

int main(void) {
   20034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20038:	ed2d 8b02 	vpush	{d8}
    // int err;
    ns_core_config_t ns_core_cfg = {.api = &ns_core_V1_0_0};
   2003c:	4aaf      	ldr	r2, [pc, #700]	@ (202fc <main+0x2c8>)
int main(void) {
   2003e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
    usb_handle_t usb_handle = NULL;
   20042:	2300      	movs	r3, #0

    // Power configuration (mem, cache, peripherals, clock)
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
   20044:	a807      	add	r0, sp, #28
    usb_handle_t usb_handle = NULL;
   20046:	e9cd 2307 	strd	r2, r3, [sp, #28]
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
   2004a:	f7f9 fb0f 	bl	1966c <ns_core_init>
   2004e:	2800      	cmp	r0, #0
   20050:	f040 8225 	bne.w	2049e <main+0x46a>
    NS_TRY(ns_power_config(&ns_pwr_config), "Power config failed.\n");
   20054:	48aa      	ldr	r0, [pc, #680]	@ (20300 <main+0x2cc>)
   20056:	f00b feb3 	bl	2bdc0 <ns_power_config>
   2005a:	2800      	cmp	r0, #0
   2005c:	f040 8237 	bne.w	204ce <main+0x49a>
    am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE);
   20060:	2002      	movs	r0, #2
   20062:	f012 f92d 	bl	322c0 <am_hal_pwrctrl_mcu_mode_select>

    ns_itm_printf_enable();
   20066:	f00b fe43 	bl	2bcf0 <ns_itm_printf_enable>
    ns_interrupt_master_enable();
   2006a:	f011 ffa5 	bl	31fb8 <am_hal_interrupt_master_enable>

    elapsedTime = 0;
   2006e:	4ba5      	ldr	r3, [pc, #660]	@ (20304 <main+0x2d0>)
    NS_TRY(ns_timer_init(&ei_tickTimer), "Timer Init Failed\n");
   20070:	48a5      	ldr	r0, [pc, #660]	@ (20308 <main+0x2d4>)
    elapsedTime = 0;
   20072:	2200      	movs	r2, #0
   20074:	601a      	str	r2, [r3, #0]
    NS_TRY(ns_timer_init(&ei_tickTimer), "Timer Init Failed\n");
   20076:	f00c f901 	bl	2c27c <ns_timer_init>
   2007a:	2800      	cmp	r0, #0
   2007c:	f040 8221 	bne.w	204c2 <main+0x48e>

    // NS_TRY(ns_peripheral_button_init(&button_config), "Button Init Failed\n");

    // WebUSB Setup
    webusb_register_raw_cb(msgReceived, NULL);
   20080:	48a2      	ldr	r0, [pc, #648]	@ (2030c <main+0x2d8>)
    webUsbConfig.rx_buffer = my_rx_ff_buf;
   20082:	4ca3      	ldr	r4, [pc, #652]	@ (20310 <main+0x2dc>)
    webusb_register_raw_cb(msgReceived, NULL);
   20084:	2100      	movs	r1, #0
   20086:	f00b fe2d 	bl	2bce4 <webusb_register_raw_cb>
    webUsbConfig.rx_buffer = my_rx_ff_buf;
   2008a:	48a2      	ldr	r0, [pc, #648]	@ (20314 <main+0x2e0>)
    webUsbConfig.rx_bufferLength = MY_RX_BUFSIZE;
    webUsbConfig.tx_buffer = my_tx_ff_buf;
   2008c:	4aa2      	ldr	r2, [pc, #648]	@ (20318 <main+0x2e4>)
    webUsbConfig.rx_buffer = my_rx_ff_buf;
   2008e:	6084      	str	r4, [r0, #8]
    webUsbConfig.rx_bufferLength = MY_RX_BUFSIZE;
   20090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    webUsbConfig.tx_bufferLength = MY_TX_BUFSIZE;
    NS_TRY(ns_usb_init(&webUsbConfig, &usb_handle), "USB Init Failed\n");
   20094:	a908      	add	r1, sp, #32
    webUsbConfig.rx_bufferLength = MY_RX_BUFSIZE;
   20096:	8183      	strh	r3, [r0, #12]
    webUsbConfig.tx_buffer = my_tx_ff_buf;
   20098:	6102      	str	r2, [r0, #16]
    webUsbConfig.tx_bufferLength = MY_TX_BUFSIZE;
   2009a:	8283      	strh	r3, [r0, #20]
    NS_TRY(ns_usb_init(&webUsbConfig, &usb_handle), "USB Init Failed\n");
   2009c:	f00d f8c6 	bl	2d22c <ns_usb_init>
   200a0:	2800      	cmp	r0, #0
   200a2:	f040 8208 	bne.w	204b6 <main+0x482>
    ns_lp_printf("USB Init Success\n");
   200a6:	489d      	ldr	r0, [pc, #628]	@ (2031c <main+0x2e8>)
   200a8:	f00b fe52 	bl	2bd50 <ns_lp_printf>

    // Camera Setup
    NS_TRY(ns_camera_init(&camera_config), "Camera Stop Failed\n");
   200ac:	489c      	ldr	r0, [pc, #624]	@ (20320 <main+0x2ec>)
   200ae:	f00c fa11 	bl	2c4d4 <ns_camera_init>
   200b2:	2800      	cmp	r0, #0
   200b4:	f040 81f9 	bne.w	204aa <main+0x476>

    ns_lp_printf("Camera Init Success\n");
   200b8:	489a      	ldr	r0, [pc, #616]	@ (20324 <main+0x2f0>)
        metadata.results[result_index].confidence = bb.value * 100;
   200ba:	eddf 8a9b 	vldr	s17, [pc, #620]	@ 20328 <main+0x2f4>
    ns_lp_printf("Camera Init Success\n");
   200be:	f00b fe47 	bl	2bd50 <ns_lp_printf>
	: _Function_base()
   200c2:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
    ns_stop_camera(&camera_config);
   200c6:	4896      	ldr	r0, [pc, #600]	@ (20320 <main+0x2ec>)
   200c8:	f00c fac2 	bl	2c650 <ns_stop_camera>
   200cc:	2300      	movs	r3, #0
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
   200ce:	4a97      	ldr	r2, [pc, #604]	@ (2032c <main+0x2f8>)
   200d0:	f8c9 2000 	str.w	r2, [r9]
	: _Function_base()
   200d4:	9322      	str	r3, [sp, #136]	@ 0x88
   200d6:	9323      	str	r3, [sp, #140]	@ 0x8c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   200d8:	e899 0003 	ldmia.w	r9, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   200dc:	4a94      	ldr	r2, [pc, #592]	@ (20330 <main+0x2fc>)
   200de:	920b      	str	r2, [sp, #44]	@ 0x2c
   200e0:	4a94      	ldr	r2, [pc, #592]	@ (20334 <main+0x300>)
   200e2:	920c      	str	r2, [sp, #48]	@ 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   200e4:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38

    // EI Init
    signal_t signal_fomo;
    
    // signal_fomo.total_length = impulse_517398_0.input_width * impulse_517398_0.input_height;
    signal_fomo.total_length = impulse_522036_0.input_width * impulse_522036_0.input_height;
   200e8:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
      __b = _GLIBCXX_MOVE(__tmp);
   200ec:	ac09      	add	r4, sp, #36	@ 0x24
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   200ee:	e88b 0003 	stmia.w	fp, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   200f2:	e884 0003 	stmia.w	r4, {r0, r1}
   200f6:	920d      	str	r2, [sp, #52]	@ 0x34
    signal_fomo.get_data = &ei_get_data;
    ei_impulse_result_t result_fomo = { 0 };
   200f8:	4658      	mov	r0, fp
   200fa:	2248      	movs	r2, #72	@ 0x48
   200fc:	f006 fde2 	bl	26cc4 <memset>
    // while(1) {
    //     ns_deep_sleep();
    // }


    ns_lp_printf("📸 TinyVision Demo\n\n");
   20100:	488d      	ldr	r0, [pc, #564]	@ (20338 <main+0x304>)
   20102:	f00b fe25 	bl	2bd50 <ns_lp_printf>

    ns_start_camera(&camera_config);
   20106:	4886      	ldr	r0, [pc, #536]	@ (20320 <main+0x2ec>)
   20108:	f00c fa84 	bl	2c614 <ns_start_camera>
    setBrightness(&camera, CAM_BRIGHTNESS_LEVEL_2);
   2010c:	2103      	movs	r1, #3
   2010e:	488b      	ldr	r0, [pc, #556]	@ (2033c <main+0x308>)
   20110:	f00d f81e 	bl	2d150 <setBrightness>
    setEV(&camera, CAM_EV_LEVEL_3);
   20114:	2105      	movs	r1, #5
   20116:	4889      	ldr	r0, [pc, #548]	@ (2033c <main+0x308>)
   20118:	f00d f812 	bl	2d140 <setEV>
    setContrast(&camera, CAM_CONTRAST_LEVEL_3);
   2011c:	2105      	movs	r1, #5
   2011e:	4887      	ldr	r0, [pc, #540]	@ (2033c <main+0x308>)
   20120:	f00d f812 	bl	2d148 <setContrast>
    setAutoExposure(&camera, true); 
   20124:	2101      	movs	r1, #1
   20126:	4885      	ldr	r0, [pc, #532]	@ (2033c <main+0x308>)
   20128:	f00c fffe 	bl	2d128 <setAutoExposure>
    ns_delay_us(100000);
   2012c:	4884      	ldr	r0, [pc, #528]	@ (20340 <main+0x30c>)
   2012e:	f013 f99d 	bl	3346c <am_hal_delay_us>
    camera_config.imageMode = CAM_IMAGE_MODE;
   20132:	4a7b      	ldr	r2, [pc, #492]	@ (20320 <main+0x2ec>)
   20134:	f240 230a 	movw	r3, #522	@ 0x20a
    int err = ns_press_shutter_button(cfg);
   20138:	4610      	mov	r0, r2
    camera_config.imageMode = CAM_IMAGE_MODE;
   2013a:	f8a2 300d 	strh.w	r3, [r2, #13]
    int err = ns_press_shutter_button(cfg);
   2013e:	f00c fa8f 	bl	2c660 <ns_press_shutter_button>
    EI_IMPULSE_ERROR err;
    bool bb_found;
    ei_impulse_result_bounding_box_t bb;

    while (1) {
        ns_delay_us(1000);
   20142:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   20146:	f013 f991 	bl	3346c <am_hal_delay_us>
        switch (state) {
        case TAKING_RGB_IMAGE:
            if (pictureTaken) {
   2014a:	4b7e      	ldr	r3, [pc, #504]	@ (20344 <main+0x310>)
   2014c:	781b      	ldrb	r3, [r3, #0]
   2014e:	b94b      	cbnz	r3, 20164 <main+0x130>
                dmaComplete = false;
                state = TAKING_RGB_IMAGE;
            }
            break;
        }
        ns_deep_sleep();
   20150:	f00b fe52 	bl	2bdf8 <ns_deep_sleep>
        ns_delay_us(1000);
   20154:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   20158:	f013 f988 	bl	3346c <am_hal_delay_us>
            if (pictureTaken) {
   2015c:	4b79      	ldr	r3, [pc, #484]	@ (20344 <main+0x310>)
   2015e:	781b      	ldrb	r3, [r3, #0]
   20160:	2b00      	cmp	r3, #0
   20162:	d0f5      	beq.n	20150 <main+0x11c>
    uint32_t camLength = ns_start_dma_read(&camera_config, camBuffer, &bufferOffset, CAM_BUFF_SIZE);
   20164:	4a78      	ldr	r2, [pc, #480]	@ (20348 <main+0x314>)
   20166:	4979      	ldr	r1, [pc, #484]	@ (2034c <main+0x318>)
   20168:	486d      	ldr	r0, [pc, #436]	@ (20320 <main+0x2ec>)
   2016a:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
   2016e:	f00c faa9 	bl	2c6c4 <ns_start_dma_read>
    bufferOffset = 0;
   20172:	4a75      	ldr	r2, [pc, #468]	@ (20348 <main+0x314>)
   20174:	2300      	movs	r3, #0
   20176:	6013      	str	r3, [r2, #0]
                pictureTaken = false;
   20178:	4a72      	ldr	r2, [pc, #456]	@ (20344 <main+0x310>)
   2017a:	7013      	strb	r3, [r2, #0]
                buffer_length = start_rgb_dma();
   2017c:	4a74      	ldr	r2, [pc, #464]	@ (20350 <main+0x31c>)
   2017e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
   20182:	6013      	str	r3, [r2, #0]
        ns_deep_sleep();
   20184:	f00b fe38 	bl	2bdf8 <ns_deep_sleep>
        ns_delay_us(1000);
   20188:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   2018c:	f013 f96e 	bl	3346c <am_hal_delay_us>
            if (dmaComplete) {
   20190:	4b70      	ldr	r3, [pc, #448]	@ (20354 <main+0x320>)
   20192:	781b      	ldrb	r3, [r3, #0]
   20194:	2b00      	cmp	r3, #0
   20196:	d0f5      	beq.n	20184 <main+0x150>
    int err = ns_press_shutter_button(cfg);
   20198:	4861      	ldr	r0, [pc, #388]	@ (20320 <main+0x2ec>)
    camera_config.imageMode = NS_CAM_IMAGE_MODE_320X320;
   2019a:	f44f 7386 	mov.w	r3, #268	@ 0x10c
   2019e:	f8a0 300d 	strh.w	r3, [r0, #13]
    int err = ns_press_shutter_button(cfg);
   201a2:	f00c fa5d 	bl	2c660 <ns_press_shutter_button>
                dmaComplete = false;
   201a6:	4b6b      	ldr	r3, [pc, #428]	@ (20354 <main+0x320>)
   201a8:	2400      	movs	r4, #0
   201aa:	701c      	strb	r4, [r3, #0]
        ns_deep_sleep();
   201ac:	f00b fe24 	bl	2bdf8 <ns_deep_sleep>
        ns_delay_us(1000);
   201b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   201b4:	f013 f95a 	bl	3346c <am_hal_delay_us>
    ei_impulse_handle_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
    return process_impulse(impulse, signal, result, debug);
   201b8:	a909      	add	r1, sp, #36	@ 0x24
   201ba:	4867      	ldr	r0, [pc, #412]	@ (20358 <main+0x324>)
   201bc:	4623      	mov	r3, r4
   201be:	465a      	mov	r2, fp
   201c0:	f7ff fce6 	bl	1fb90 <process_impulse>
            if (err != EI_IMPULSE_OK) {
   201c4:	4601      	mov	r1, r0
   201c6:	2800      	cmp	r0, #0
   201c8:	f000 8125 	beq.w	20416 <main+0x3e2>
                ns_lp_printf("ERR: Failed to run classifier (%d)\n", err);
   201cc:	4863      	ldr	r0, [pc, #396]	@ (2035c <main+0x328>)
   201ce:	f00b fdbf 	bl	2bd50 <ns_lp_printf>
        ns_deep_sleep();
   201d2:	f00b fe11 	bl	2bdf8 <ns_deep_sleep>
        ns_delay_us(1000);
   201d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   201da:	f013 f947 	bl	3346c <am_hal_delay_us>
            if (pictureTaken) {
   201de:	4b59      	ldr	r3, [pc, #356]	@ (20344 <main+0x310>)
   201e0:	781b      	ldrb	r3, [r3, #0]
   201e2:	2b00      	cmp	r3, #0
   201e4:	d0f5      	beq.n	201d2 <main+0x19e>
    uint32_t camLength = ns_start_dma_read(&camera_config, jpgBuffer, &bufferOffset, CAM_BUFF_SIZE);
   201e6:	4a58      	ldr	r2, [pc, #352]	@ (20348 <main+0x314>)
   201e8:	495d      	ldr	r1, [pc, #372]	@ (20360 <main+0x32c>)
   201ea:	484d      	ldr	r0, [pc, #308]	@ (20320 <main+0x2ec>)
   201ec:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
   201f0:	f00c fa68 	bl	2c6c4 <ns_start_dma_read>
                buffer_length = start_jpg_dma();
   201f4:	4b56      	ldr	r3, [pc, #344]	@ (20350 <main+0x31c>)
                pictureTaken = false;
   201f6:	4a53      	ldr	r2, [pc, #332]	@ (20344 <main+0x310>)
                buffer_length = start_jpg_dma();
   201f8:	6018      	str	r0, [r3, #0]
                pictureTaken = false;
   201fa:	2300      	movs	r3, #0
   201fc:	7013      	strb	r3, [r2, #0]
    bufferOffset = 1;
   201fe:	4a52      	ldr	r2, [pc, #328]	@ (20348 <main+0x314>)
   20200:	2301      	movs	r3, #1
   20202:	6013      	str	r3, [r2, #0]
        ns_deep_sleep();
   20204:	f00b fdf8 	bl	2bdf8 <ns_deep_sleep>
        ns_delay_us(1000);
   20208:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   2020c:	f013 f92e 	bl	3346c <am_hal_delay_us>
            if (dmaComplete) {
   20210:	4b50      	ldr	r3, [pc, #320]	@ (20354 <main+0x320>)
   20212:	781b      	ldrb	r3, [r3, #0]
   20214:	2b00      	cmp	r3, #0
   20216:	d0f5      	beq.n	20204 <main+0x1d0>
                dmaComplete = false;
   20218:	4a4e      	ldr	r2, [pc, #312]	@ (20354 <main+0x320>)
        if (jpgBuffer[index] != 0) {
   2021a:	4951      	ldr	r1, [pc, #324]	@ (20360 <main+0x32c>)
                dmaComplete = false;
   2021c:	2300      	movs	r3, #0
   2021e:	7013      	strb	r3, [r2, #0]
                    buffer_length = chop_off_trailing_zeros(buffer_length); // Remove trailing zeros, calc new length
   20220:	4b4b      	ldr	r3, [pc, #300]	@ (20350 <main+0x31c>)
   20222:	6818      	ldr	r0, [r3, #0]
    for (index = length - 1; index >= 0; index--) {
   20224:	1e43      	subs	r3, r0, #1
        if (jpgBuffer[index] != 0) {
   20226:	5cca      	ldrb	r2, [r1, r3]
   20228:	b932      	cbnz	r2, 20238 <main+0x204>
   2022a:	18ca      	adds	r2, r1, r3
   2022c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   20230:	4618      	mov	r0, r3
    for (index = length - 1; index >= 0; index--) {
   20232:	3b01      	subs	r3, #1
        if (jpgBuffer[index] != 0) {
   20234:	2900      	cmp	r1, #0
   20236:	d0f9      	beq.n	2022c <main+0x1f8>
    camera_config.imageMode = CAM_IMAGE_MODE;
   20238:	4a39      	ldr	r2, [pc, #228]	@ (20320 <main+0x2ec>)
                    buffer_length = chop_off_trailing_zeros(buffer_length); // Remove trailing zeros, calc new length
   2023a:	4c45      	ldr	r4, [pc, #276]	@ (20350 <main+0x31c>)
    camera_config.imageMode = CAM_IMAGE_MODE;
   2023c:	f240 230a 	movw	r3, #522	@ 0x20a
                    buffer_length = chop_off_trailing_zeros(buffer_length); // Remove trailing zeros, calc new length
   20240:	6020      	str	r0, [r4, #0]
    int err = ns_press_shutter_button(cfg);
   20242:	4610      	mov	r0, r2
    camera_config.imageMode = CAM_IMAGE_MODE;
   20244:	f8a2 300d 	strh.w	r3, [r2, #13]
    int err = ns_press_shutter_button(cfg);
   20248:	f00c fa0a 	bl	2c660 <ns_press_shutter_button>
    int offset = bufferOffset;
   2024c:	4b3e      	ldr	r3, [pc, #248]	@ (20348 <main+0x314>)
                render_image(buffer_length, &result_fomo, jpgBuffer);
   2024e:	6825      	ldr	r5, [r4, #0]
    int offset = bufferOffset;
   20250:	681e      	ldr	r6, [r3, #0]
    ns_lp_printf("Rendering image len = %d inf is 0x%x, offset is %d\n",camLength, inf,offset);
   20252:	4844      	ldr	r0, [pc, #272]	@ (20364 <main+0x330>)
   20254:	4633      	mov	r3, r6
   20256:	465a      	mov	r2, fp
   20258:	4629      	mov	r1, r5
   2025a:	f00b fd79 	bl	2bd50 <ns_lp_printf>
    while (remaining > 0) {
   2025e:	2d00      	cmp	r5, #0
   20260:	dd32      	ble.n	202c8 <main+0x294>
            data.mode = 1;
   20262:	2701      	movs	r7, #1
            data.descriptor = LAST_CHUNK;
   20264:	f04f 0802 	mov.w	r8, #2
        int chunkSize = remaining > MAX_WEBUSB_CHUNK ? MAX_WEBUSB_CHUNK : remaining;
   20268:	f5b5 7fff 	cmp.w	r5, #510	@ 0x1fe
   2026c:	462c      	mov	r4, r5
   2026e:	bfa8      	it	ge
   20270:	f44f 74ff 	movge.w	r4, #510	@ 0x1fe
        if (offset == 0) {
   20274:	1e33      	subs	r3, r6, #0
   20276:	bf18      	it	ne
   20278:	2301      	movne	r3, #1
   2027a:	f889 3000 	strb.w	r3, [r9]
        memcpy(data.buffer, &buff[offset], chunkSize);
   2027e:	4b38      	ldr	r3, [pc, #224]	@ (20360 <main+0x32c>)
            data.mode = 1;
   20280:	f889 7001 	strb.w	r7, [r9, #1]
        memcpy(data.buffer, &buff[offset], chunkSize);
   20284:	1999      	adds	r1, r3, r6
   20286:	4622      	mov	r2, r4
   20288:	f10d 0086 	add.w	r0, sp, #134	@ 0x86
   2028c:	f7f8 f978 	bl	18580 <memcpy>
        if (remaining == 0) {
   20290:	1b2d      	subs	r5, r5, r4
        webusb_send_data((uint8_t *)&data, chunkSize + WEBUSB_HEADER_SIZE);
   20292:	f104 0102 	add.w	r1, r4, #2
   20296:	4648      	mov	r0, r9
        offset += chunkSize;
   20298:	4426      	add	r6, r4
            data.descriptor = LAST_CHUNK;
   2029a:	bf08      	it	eq
   2029c:	f889 8000 	strbeq.w	r8, [r9]
        while (tud_vendor_write_available() < 4096) {
   202a0:	2466      	movs	r4, #102	@ 0x66
        webusb_send_data((uint8_t *)&data, chunkSize + WEBUSB_HEADER_SIZE);
   202a2:	f00b fcf5 	bl	2bc90 <webusb_send_data>
        while (tud_vendor_write_available() < 4096) {
   202a6:	e004      	b.n	202b2 <main+0x27e>
            ns_delay_us(200);
   202a8:	f013 f8e0 	bl	3346c <am_hal_delay_us>
            if (numr++ > 100) {
   202ac:	3c01      	subs	r4, #1
   202ae:	f000 80ef 	beq.w	20490 <main+0x45c>
  return tud_vendor_n_write_str(0, str);
}

static inline uint32_t tud_vendor_write_available (void)
{
  return tud_vendor_n_write_available(0);
   202b2:	2000      	movs	r0, #0
   202b4:	f00f fb8c 	bl	2f9d0 <tud_vendor_n_write_available>
   202b8:	4603      	mov	r3, r0
        while (tud_vendor_write_available() < 4096) {
   202ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
            ns_delay_us(200);
   202be:	f04f 00c8 	mov.w	r0, #200	@ 0xc8
        while (tud_vendor_write_available() < 4096) {
   202c2:	d3f1      	bcc.n	202a8 <main+0x274>
    while (remaining > 0) {
   202c4:	2d00      	cmp	r5, #0
   202c6:	dccf      	bgt.n	20268 <main+0x234>
  return tud_vendor_n_write_flush(0);
   202c8:	2000      	movs	r0, #0
   202ca:	f00f fb1f 	bl	2f90c <tud_vendor_n_write_flush>
    metadata.inference_latency = inf->timing.classification;
   202ce:	f8db 1020 	ldr.w	r1, [fp, #32]
   202d2:	f889 1002 	strb.w	r1, [r9, #2]
    metadata.descriptor = 3;
   202d6:	f243 2303 	movw	r3, #12803	@ 0x3203
    ns_lp_printf("Inference latency: %d\n", metadata.inference_latency);
   202da:	4823      	ldr	r0, [pc, #140]	@ (20368 <main+0x334>)
    metadata.descriptor = 3;
   202dc:	f8a9 3000 	strh.w	r3, [r9]
    ns_lp_printf("Inference latency: %d\n", metadata.inference_latency);
   202e0:	b2c9      	uxtb	r1, r1
   202e2:	f00b fd35 	bl	2bd50 <ns_lp_printf>
    for (size_t ix = 0; ix < inf->bounding_boxes_count; ix++) {
   202e6:	f8db 3004 	ldr.w	r3, [fp, #4]
    int result_index = 0;
   202ea:	469a      	mov	sl, r3
    for (size_t ix = 0; ix < inf->bounding_boxes_count; ix++) {
   202ec:	2b00      	cmp	r3, #0
   202ee:	d07a      	beq.n	203e6 <main+0x3b2>
   202f0:	f04f 0800 	mov.w	r8, #0
   202f4:	ac22      	add	r4, sp, #136	@ 0x88
    int result_index = 0;
   202f6:	46c2      	mov	sl, r8
   202f8:	e060      	b.n	203bc <main+0x388>
   202fa:	bf00      	nop
   202fc:	0003ef98 	.word	0x0003ef98
   20300:	000408cc 	.word	0x000408cc
   20304:	1000cca4 	.word	0x1000cca4
   20308:	1000c040 	.word	0x1000c040
   2030c:	0001e755 	.word	0x0001e755
   20310:	1000dca8 	.word	0x1000dca8
   20314:	1000c050 	.word	0x1000c050
   20318:	1000cca8 	.word	0x1000cca8
   2031c:	0003f5bc 	.word	0x0003f5bc
   20320:	1000c000 	.word	0x1000c000
   20324:	0003f5e4 	.word	0x0003f5e4
   20328:	42c80000 	.word	0x42c80000
   2032c:	0001e649 	.word	0x0001e649
   20330:	0001e5a1 	.word	0x0001e5a1
   20334:	0001e4ed 	.word	0x0001e4ed
   20338:	0003f5fc 	.word	0x0003f5fc
   2033c:	10052938 	.word	0x10052938
   20340:	000186a0 	.word	0x000186a0
   20344:	1000cca0 	.word	0x1000cca0
   20348:	1000cc98 	.word	0x1000cc98
   2034c:	10060000 	.word	0x10060000
   20350:	1000cc9c 	.word	0x1000cc9c
   20354:	1000cca1 	.word	0x1000cca1
   20358:	100180bc 	.word	0x100180bc
   2035c:	0003f614 	.word	0x0003f614
   20360:	10064800 	.word	0x10064800
   20364:	0003f688 	.word	0x0003f688
   20368:	0003f6bc 	.word	0x0003f6bc
            ns_lp_printf("bb.value %f\n", bb.value);
   2036c:	f7f8 fb78 	bl	18a60 <__aeabi_f2d>
   20370:	460b      	mov	r3, r1
   20372:	4602      	mov	r2, r0
   20374:	4859      	ldr	r0, [pc, #356]	@ (204dc <main+0x4a8>)
   20376:	f00b fceb 	bl	2bd50 <ns_lp_printf>
        strncpy(metadata.results[result_index].id, bb.label, 20);
   2037a:	2214      	movs	r2, #20
   2037c:	4620      	mov	r0, r4
   2037e:	9904      	ldr	r1, [sp, #16]
   20380:	f006 fd38 	bl	26df4 <strncpy>
        metadata.results[result_index].x = bb.x;
   20384:	9a05      	ldr	r2, [sp, #20]
   20386:	2300      	movs	r3, #0
   20388:	f366 0307 	bfi	r3, r6, #0, #8
   2038c:	f362 230f 	bfi	r3, r2, #8, #8
        metadata.results[result_index].confidence = bb.value * 100;
   20390:	ee28 8a28 	vmul.f32	s16, s16, s17
        metadata.results[result_index].x = bb.x;
   20394:	f365 4317 	bfi	r3, r5, #16, #8
   20398:	f367 631f 	bfi	r3, r7, #24, #8
   2039c:	6163      	str	r3, [r4, #20]
        metadata.results[result_index].confidence = bb.value * 100;
   2039e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
    for (size_t ix = 0; ix < inf->bounding_boxes_count; ix++) {
   203a2:	f8db 2004 	ldr.w	r2, [fp, #4]
        metadata.results[result_index].confidence = bb.value * 100;
   203a6:	ee17 3a90 	vmov	r3, s15
        result_index++;
   203aa:	f10a 0a01 	add.w	sl, sl, #1
    for (size_t ix = 0; ix < inf->bounding_boxes_count; ix++) {
   203ae:	4592      	cmp	sl, r2
        metadata.results[result_index].confidence = bb.value * 100;
   203b0:	7623      	strb	r3, [r4, #24]
    for (size_t ix = 0; ix < inf->bounding_boxes_count; ix++) {
   203b2:	f108 0818 	add.w	r8, r8, #24
   203b6:	f104 0419 	add.w	r4, r4, #25
   203ba:	d214      	bcs.n	203e6 <main+0x3b2>
        auto bb = inf->bounding_boxes[ix];
   203bc:	f8db 2000 	ldr.w	r2, [fp]
   203c0:	eb02 0308 	add.w	r3, r2, r8
   203c4:	ed93 8a05 	vldr	s16, [r3, #20]
   203c8:	f852 2008 	ldr.w	r2, [r2, r8]
   203cc:	9204      	str	r2, [sp, #16]
   203ce:	e9d3 6501 	ldrd	r6, r5, [r3, #4]
        if (bb.value == 0.0f) {
   203d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
   203d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        auto bb = inf->bounding_boxes[ix];
   203da:	9505      	str	r5, [sp, #20]
            ns_lp_printf("bb.value %f\n", bb.value);
   203dc:	ee18 0a10 	vmov	r0, s16
        auto bb = inf->bounding_boxes[ix];
   203e0:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
        if (bb.value == 0.0f) {
   203e4:	d1c2      	bne.n	2036c <main+0x338>
    webusb_send_data((uint8_t *)&metadata, sizeof(usb_metadata_t));
   203e6:	2181      	movs	r1, #129	@ 0x81
   203e8:	4648      	mov	r0, r9
    metadata.num_results = result_index;
   203ea:	f889 a003 	strb.w	sl, [r9, #3]
    webusb_send_data((uint8_t *)&metadata, sizeof(usb_metadata_t));
   203ee:	f00b fc4f 	bl	2bc90 <webusb_send_data>
   203f2:	2000      	movs	r0, #0
   203f4:	f00f fa8a 	bl	2f90c <tud_vendor_n_write_flush>
   203f8:	e001      	b.n	203fe <main+0x3ca>
        ns_delay_us(200);
   203fa:	f013 f837 	bl	3346c <am_hal_delay_us>
  return tud_vendor_n_write_available(0);
   203fe:	2000      	movs	r0, #0
   20400:	f00f fae6 	bl	2f9d0 <tud_vendor_n_write_available>
    while (tud_vendor_write_available() < MAX_WEBUSB_FRAME) {
   20404:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
        ns_delay_us(200);
   20408:	f04f 00c8 	mov.w	r0, #200	@ 0xc8
    while (tud_vendor_write_available() < MAX_WEBUSB_FRAME) {
   2040c:	d3f5      	bcc.n	203fa <main+0x3c6>
                dmaComplete = false;
   2040e:	4a34      	ldr	r2, [pc, #208]	@ (204e0 <main+0x4ac>)
   20410:	2300      	movs	r3, #0
   20412:	7013      	strb	r3, [r2, #0]
                state = TAKING_RGB_IMAGE;
   20414:	e69c      	b.n	20150 <main+0x11c>
                bb_found = result_fomo.bounding_boxes[0].value > 0;
   20416:	f8db 5000 	ldr.w	r5, [fp]
                for (size_t ix = 0; ix < result_fomo.bounding_boxes_count; ix++) {
   2041a:	f8db 3004 	ldr.w	r3, [fp, #4]
                bb_found = result_fomo.bounding_boxes[0].value > 0;
   2041e:	ed95 8a05 	vldr	s16, [r5, #20]
                for (size_t ix = 0; ix < result_fomo.bounding_boxes_count; ix++) {
   20422:	b35b      	cbz	r3, 2047c <main+0x448>
                    ns_lp_printf("    %s (%f) [ x: %u, y: %u, width: %u, height: %u ]\n", bb.label, bb.value, bb.x, bb.y, bb.width, bb.height);
   20424:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 204fc <main+0x4c8>
                for (size_t ix = 0; ix < result_fomo.bounding_boxes_count; ix++) {
   20428:	4604      	mov	r4, r0
   2042a:	eef0 7a48 	vmov.f32	s15, s16
   2042e:	4606      	mov	r6, r0
   20430:	e004      	b.n	2043c <main+0x408>
                    bb = result_fomo.bounding_boxes[ix];
   20432:	f8db 5000 	ldr.w	r5, [fp]
   20436:	192b      	adds	r3, r5, r4
   20438:	edd3 7a05 	vldr	s15, [r3, #20]
                    if (bb.value == 0) {
   2043c:	eef5 7a40 	vcmp.f32	s15, #0.0
   20440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    ns_lp_printf("    %s (%f) [ x: %u, y: %u, width: %u, height: %u ]\n", bb.label, bb.value, bb.x, bb.y, bb.width, bb.height);
   20444:	ee17 0a90 	vmov	r0, s15
                    bb = result_fomo.bounding_boxes[ix];
   20448:	eb05 0704 	add.w	r7, r5, r4
                    if (bb.value == 0) {
   2044c:	d00f      	beq.n	2046e <main+0x43a>
                    ns_lp_printf("    %s (%f) [ x: %u, y: %u, width: %u, height: %u ]\n", bb.label, bb.value, bb.x, bb.y, bb.width, bb.height);
   2044e:	f7f8 fb07 	bl	18a60 <__aeabi_f2d>
   20452:	4602      	mov	r2, r0
   20454:	6938      	ldr	r0, [r7, #16]
   20456:	460b      	mov	r3, r1
   20458:	5929      	ldr	r1, [r5, r4]
   2045a:	9003      	str	r0, [sp, #12]
   2045c:	68f8      	ldr	r0, [r7, #12]
   2045e:	9002      	str	r0, [sp, #8]
   20460:	68b8      	ldr	r0, [r7, #8]
   20462:	9001      	str	r0, [sp, #4]
   20464:	6878      	ldr	r0, [r7, #4]
   20466:	9000      	str	r0, [sp, #0]
   20468:	4640      	mov	r0, r8
   2046a:	f00b fc71 	bl	2bd50 <ns_lp_printf>
                for (size_t ix = 0; ix < result_fomo.bounding_boxes_count; ix++) {
   2046e:	f8db 3004 	ldr.w	r3, [fp, #4]
   20472:	3601      	adds	r6, #1
   20474:	42b3      	cmp	r3, r6
   20476:	f104 0418 	add.w	r4, r4, #24
   2047a:	d8da      	bhi.n	20432 <main+0x3fe>
                if (!bb_found) {
   2047c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   20480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20484:	f63f aea5 	bhi.w	201d2 <main+0x19e>
                    ns_lp_printf("    No objects found\n");
   20488:	4816      	ldr	r0, [pc, #88]	@ (204e4 <main+0x4b0>)
   2048a:	f00b fc61 	bl	2bd50 <ns_lp_printf>
   2048e:	e6a0      	b.n	201d2 <main+0x19e>
  return tud_vendor_n_write_flush(0);
   20490:	4620      	mov	r0, r4
   20492:	f00f fa3b 	bl	2f90c <tud_vendor_n_write_flush>
    while (remaining > 0) {
   20496:	2d00      	cmp	r5, #0
   20498:	f73f aee6 	bgt.w	20268 <main+0x234>
   2049c:	e714      	b.n	202c8 <main+0x294>
    NS_TRY(ns_core_init(&ns_core_cfg), "Core init failed.\n");
   2049e:	4812      	ldr	r0, [pc, #72]	@ (204e8 <main+0x4b4>)
   204a0:	f00b fc56 	bl	2bd50 <ns_lp_printf>
   204a4:	f7f9 f90a 	bl	196bc <ns_core_fail_loop>
   204a8:	e5d4      	b.n	20054 <main+0x20>
    NS_TRY(ns_camera_init(&camera_config), "Camera Stop Failed\n");
   204aa:	4810      	ldr	r0, [pc, #64]	@ (204ec <main+0x4b8>)
   204ac:	f00b fc50 	bl	2bd50 <ns_lp_printf>
   204b0:	f7f9 f904 	bl	196bc <ns_core_fail_loop>
   204b4:	e600      	b.n	200b8 <main+0x84>
    NS_TRY(ns_usb_init(&webUsbConfig, &usb_handle), "USB Init Failed\n");
   204b6:	480e      	ldr	r0, [pc, #56]	@ (204f0 <main+0x4bc>)
   204b8:	f00b fc4a 	bl	2bd50 <ns_lp_printf>
   204bc:	f7f9 f8fe 	bl	196bc <ns_core_fail_loop>
   204c0:	e5f1      	b.n	200a6 <main+0x72>
    NS_TRY(ns_timer_init(&ei_tickTimer), "Timer Init Failed\n");
   204c2:	480c      	ldr	r0, [pc, #48]	@ (204f4 <main+0x4c0>)
   204c4:	f00b fc44 	bl	2bd50 <ns_lp_printf>
   204c8:	f7f9 f8f8 	bl	196bc <ns_core_fail_loop>
   204cc:	e5d8      	b.n	20080 <main+0x4c>
    NS_TRY(ns_power_config(&ns_pwr_config), "Power config failed.\n");
   204ce:	480a      	ldr	r0, [pc, #40]	@ (204f8 <main+0x4c4>)
   204d0:	f00b fc3e 	bl	2bd50 <ns_lp_printf>
   204d4:	f7f9 f8f2 	bl	196bc <ns_core_fail_loop>
   204d8:	e5c2      	b.n	20060 <main+0x2c>
   204da:	bf00      	nop
   204dc:	0003f6d4 	.word	0x0003f6d4
   204e0:	1000cca1 	.word	0x1000cca1
   204e4:	0003f670 	.word	0x0003f670
   204e8:	0003f568 	.word	0x0003f568
   204ec:	0003f5d0 	.word	0x0003f5d0
   204f0:	0003f5a8 	.word	0x0003f5a8
   204f4:	0003f594 	.word	0x0003f594
   204f8:	0003f57c 	.word	0x0003f57c
   204fc:	0003f638 	.word	0x0003f638

00020500 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb>:
{
   20500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20504:	b0a9      	sub	sp, #164	@ 0xa4
   20506:	4691      	mov	r9, r2
   20508:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
   2050c:	f89d a0d4 	ldrb.w	sl, [sp, #212]	@ 0xd4
    ei_config_tflite_eon_graph_t *graph_config = (ei_config_tflite_eon_graph_t*)block_config->graph_config;
   20510:	f8d8 b018 	ldr.w	fp, [r8, #24]
{
   20514:	461f      	mov	r7, r3
   20516:	4605      	mov	r5, r0
   20518:	460e      	mov	r6, r1
    uint64_t ctx_start_us = ei_read_timer_us();
   2051a:	f004 f969 	bl	247f0 <_Z16ei_read_timer_usv>
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
   2051e:	ab18      	add	r3, sp, #96	@ 0x60
   20520:	9301      	str	r3, [sp, #4]
   20522:	ab20      	add	r3, sp, #128	@ 0x80
   20524:	9300      	str	r3, [sp, #0]
   20526:	aa08      	add	r2, sp, #32
   20528:	ab10      	add	r3, sp, #64	@ 0x40
   2052a:	a906      	add	r1, sp, #24
   2052c:	4640      	mov	r0, r8
   2052e:	f7fe f849 	bl	1e5c4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyP12TfLiteTensorS3_S3_S3_RSt10unique_ptrIvPFvPvEE.isra.0>
    if (init_res != EI_IMPULSE_OK) {
   20532:	4604      	mov	r4, r0
   20534:	b118      	cbz	r0, 2053e <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x3e>
}
   20536:	4620      	mov	r0, r4
   20538:	b029      	add	sp, #164	@ 0xa4
   2053a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    size_t mtx_size = impulse->dsp_blocks_size + impulse->learning_blocks_size;
   2053e:	f895 0054 	ldrb.w	r0, [r5, #84]	@ 0x54
   20542:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
   20546:	4403      	add	r3, r0
    auto input_res = fill_input_tensor_from_matrix(fmatrix, &input, input_block_ids, input_block_ids_size, mtx_size);
   20548:	9300      	str	r3, [sp, #0]
   2054a:	463a      	mov	r2, r7
   2054c:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
   2054e:	a908      	add	r1, sp, #32
   20550:	4630      	mov	r0, r6
   20552:	f7fe fa3b 	bl	1e9cc <_Z29fill_input_tensor_from_matrixP12ei_feature_tP12TfLiteTensorPmmj>
    if (input_res != EI_IMPULSE_OK) {
   20556:	4604      	mov	r4, r0
   20558:	2800      	cmp	r0, #0
   2055a:	d1ec      	bne.n	20536 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x36>
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   2055c:	ab18      	add	r3, sp, #96	@ 0x60
   2055e:	9302      	str	r3, [sp, #8]
   20560:	ab20      	add	r3, sp, #128	@ 0x80
   20562:	9301      	str	r3, [sp, #4]
   20564:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
   20566:	9303      	str	r3, [sp, #12]
   20568:	ab10      	add	r3, sp, #64	@ 0x40
   2056a:	9300      	str	r3, [sp, #0]
   2056c:	f8cd a010 	str.w	sl, [sp, #16]
   20570:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   20574:	4641      	mov	r1, r8
   20576:	4628      	mov	r0, r5
   20578:	f7ff f83e 	bl	1f5f8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PhP19ei_impulse_result_tb.constprop.0>
    if (result->copy_output) {
   2057c:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
   2057e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
    EI_IMPULSE_ERROR run_res = inference_tflite_run(
   20582:	4604      	mov	r4, r0
    if (result->copy_output) {
   20584:	b93b      	cbnz	r3, 20596 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x96>
    graph_config->model_reset(ei_aligned_free);
   20586:	f8db 300c 	ldr.w	r3, [fp, #12]
   2058a:	4809      	ldr	r0, [pc, #36]	@ (205b0 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0xb0>)
   2058c:	4798      	blx	r3
}
   2058e:	4620      	mov	r0, r4
   20590:	b029      	add	sp, #164	@ 0xa4
   20592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        auto output_res = fill_output_matrix_from_tensor(&output, fmatrix[impulse->dsp_blocks_size + learn_block_index].matrix);
   20596:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
   2059a:	444b      	add	r3, r9
   2059c:	a810      	add	r0, sp, #64	@ 0x40
   2059e:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
   205a2:	f7fe fab5 	bl	1eb10 <_Z30fill_output_matrix_from_tensorP12TfLiteTensorPN2ei9ei_matrixE>
        if (output_res != EI_IMPULSE_OK) {
   205a6:	2800      	cmp	r0, #0
   205a8:	d0ed      	beq.n	20586 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x86>
            return output_res;
   205aa:	4604      	mov	r4, r0
   205ac:	e7c3      	b.n	20536 <_Z16run_nn_inferencePK10ei_impulseP12ei_feature_tmPmmP19ei_impulse_result_tPvb+0x36>
   205ae:	bf00      	nop
   205b0:	0001e551 	.word	0x0001e551

000205b4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        //         // ns_lp_printf("    No objects found\n");
        //     }
        // }
    //     ns_deep_sleep();
    // }
   205b4:	b570      	push	{r4, r5, r6, lr}
        : impulse(impulse)
   205b6:	4c06      	ldr	r4, [pc, #24]	@ (205d0 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1c>)
   205b8:	4d06      	ldr	r5, [pc, #24]	@ (205d4 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x20>)
   205ba:	6065      	str	r5, [r4, #4]
   205bc:	2600      	movs	r6, #0
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
   205be:	2004      	movs	r0, #4
        : impulse(impulse)
   205c0:	7326      	strb	r6, [r4, #12]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
   205c2:	f004 f947 	bl	24854 <_Z9ei_mallocj>
            dsp_handles[ix] = nullptr;
   205c6:	6006      	str	r6, [r0, #0]
        dsp_handles = (_dsp_handle_ptr_t*)ei_malloc(sizeof(_dsp_handle_ptr_t)*num_dsp_blocks);
   205c8:	60a0      	str	r0, [r4, #8]
};

class ei_impulse_handle_t {
public:
    ei_impulse_handle_t(const ei_impulse_t *impulse)
        : state(impulse), impulse(impulse) {};
   205ca:	6125      	str	r5, [r4, #16]
   205cc:	bd70      	pop	{r4, r5, r6, pc}
   205ce:	bf00      	nop
   205d0:	100180bc 	.word	0x100180bc
   205d4:	000408dc 	.word	0x000408dc

000205d8 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
   205d8:	b570      	push	{r4, r5, r6, lr}
        ei_free(dsp_handles);
   205da:	4d0e      	ldr	r5, [pc, #56]	@ (20614 <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x3c>)
   205dc:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
   205e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
   205e4:	b18b      	cbz	r3, 2060a <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
   205e6:	2400      	movs	r4, #0
                dsp_handles[ix] = nullptr;
   205e8:	4626      	mov	r6, r4
            if (dsp_handles[ix] != nullptr) {
   205ea:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
                delete dsp_handles[ix];
   205ee:	4618      	mov	r0, r3
            if (dsp_handles[ix] != nullptr) {
   205f0:	b12b      	cbz	r3, 205fe <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
                delete dsp_handles[ix];
   205f2:	681b      	ldr	r3, [r3, #0]
   205f4:	68db      	ldr	r3, [r3, #12]
   205f6:	4798      	blx	r3
                dsp_handles[ix] = nullptr;
   205f8:	68aa      	ldr	r2, [r5, #8]
   205fa:	f842 6024 	str.w	r6, [r2, r4, lsl #2]
        for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
   205fe:	686b      	ldr	r3, [r5, #4]
   20600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
   20604:	3401      	adds	r4, #1
   20606:	429c      	cmp	r4, r3
   20608:	d3ef      	bcc.n	205ea <_GLOBAL__sub_D__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x12>
   2060a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ei_free(dsp_handles);
   2060e:	4610      	mov	r0, r2
   20610:	f004 b930 	b.w	24874 <_Z7ei_freePv>
   20614:	100180bc 	.word	0x100180bc

00020618 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   20618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   2061a:	7f10      	ldrb	r0, [r2, #28]
   2061c:	2807      	cmp	r0, #7
                                               int32_t* act_max) {
   2061e:	ed2d 8b04 	vpush	{d8-d9}
   20622:	461c      	mov	r4, r3
   20624:	d056      	beq.n	206d4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xbc>
   20626:	2809      	cmp	r0, #9
   20628:	d013      	beq.n	20652 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3a>
   2062a:	2803      	cmp	r0, #3
   2062c:	d14e      	bne.n	206cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
  if (output->type == kTfLiteUInt8) {
   2062e:	26ff      	movs	r6, #255	@ 0xff
   20630:	2500      	movs	r5, #0
  if (activation == kTfLiteActRelu) {
   20632:	2901      	cmp	r1, #1
   20634:	ed92 8a02 	vldr	s16, [r2, #8]
   20638:	68d7      	ldr	r7, [r2, #12]
   2063a:	d013      	beq.n	20664 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
  } else if (activation == kTfLiteActRelu6) {
   2063c:	2903      	cmp	r1, #3
   2063e:	d04d      	beq.n	206dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc4>
  } else if (activation == kTfLiteActReluN1To1) {
   20640:	2902      	cmp	r1, #2
   20642:	d02d      	beq.n	206a0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x88>
    *act_max = qmax;
   20644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    *act_min = qmin;
   20646:	6025      	str	r5, [r4, #0]
    *act_max = qmax;
   20648:	601e      	str	r6, [r3, #0]
    TF_LITE_ENSURE(context, false);
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
   2064a:	ecbd 8b04 	vpop	{d8-d9}
  return kTfLiteOk;
   2064e:	2000      	movs	r0, #0
}
   20650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (activation == kTfLiteActRelu) {
   20652:	2901      	cmp	r1, #1
   20654:	ed92 8a02 	vldr	s16, [r2, #8]
   20658:	68d7      	ldr	r7, [r2, #12]
  if (output->type == kTfLiteUInt8) {
   2065a:	f04f 067f 	mov.w	r6, #127	@ 0x7f
   2065e:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
  if (activation == kTfLiteActRelu) {
   20662:	d1eb      	bne.n	2063c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x24>
   20664:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 20770 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x158>
   20668:	f004 fc52 	bl	24f10 <roundf>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   2066c:	eddf 7a41 	vldr	s15, [pc, #260]	@ 20774 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x15c>
   20670:	eeb4 0ae7 	vcmpe.f32	s0, s15
   20674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20678:	db28      	blt.n	206cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
   2067a:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 20778 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x160>
   2067e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   20682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20686:	d821      	bhi.n	206cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
  q = zero_point + static_cast<int32_t>(tmp);
   20688:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   2068c:	ee17 3a90 	vmov	r3, s15
   20690:	443b      	add	r3, r7
      if (__a < __b)
   20692:	42ab      	cmp	r3, r5
   20694:	bfb8      	it	lt
   20696:	462b      	movlt	r3, r5
    *act_min = std::max(qmin, tmp_q);
   20698:	6023      	str	r3, [r4, #0]
    *act_max = qmax;
   2069a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2069c:	601e      	str	r6, [r3, #0]
   2069e:	e7d4      	b.n	2064a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
  const float tmp = TfLiteRound(f / scale);
   206a0:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
   206a4:	eec7 8a88 	vdiv.f32	s17, s15, s16
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   206a8:	ed9f 8a32 	vldr	s16, [pc, #200]	@ 20774 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x15c>
   206ac:	eeb0 0a68 	vmov.f32	s0, s17
   206b0:	f004 fc2e 	bl	24f10 <roundf>
   206b4:	eeb4 0ac8 	vcmpe.f32	s0, s16
   206b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   206bc:	db06      	blt.n	206cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
   206be:	ed9f 9a2e 	vldr	s18, [pc, #184]	@ 20778 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x160>
   206c2:	eeb4 0ac9 	vcmpe.f32	s0, s18
   206c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   206ca:	d93d      	bls.n	20748 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x130>
}
   206cc:	ecbd 8b04 	vpop	{d8-d9}
  if (output->type == kTfLiteUInt8) {
   206d0:	2001      	movs	r0, #1
}
   206d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (output->type == kTfLiteUInt8) {
   206d4:	4d29      	ldr	r5, [pc, #164]	@ (2077c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x164>)
   206d6:	f647 76ff 	movw	r6, #32767	@ 0x7fff
   206da:	e7aa      	b.n	20632 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x1a>
   206dc:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 20770 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x158>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   206e0:	eddf 8a24 	vldr	s17, [pc, #144]	@ 20774 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x15c>
   206e4:	f004 fc14 	bl	24f10 <roundf>
   206e8:	eeb4 0ae8 	vcmpe.f32	s0, s17
   206ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   206f0:	dbec      	blt.n	206cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
   206f2:	ed9f 9a21 	vldr	s18, [pc, #132]	@ 20778 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x160>
   206f6:	eeb4 0ac9 	vcmpe.f32	s0, s18
   206fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   206fe:	d8e5      	bhi.n	206cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
  q = zero_point + static_cast<int32_t>(tmp);
   20700:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  const float tmp = TfLiteRound(f / scale);
   20704:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
  q = zero_point + static_cast<int32_t>(tmp);
   20708:	ee17 3a90 	vmov	r3, s15
   2070c:	443b      	add	r3, r7
   2070e:	42ab      	cmp	r3, r5
   20710:	bfb8      	it	lt
   20712:	462b      	movlt	r3, r5
   20714:	ee80 0a08 	vdiv.f32	s0, s0, s16
    *act_min = std::max(qmin, tmp_q);
   20718:	6023      	str	r3, [r4, #0]
   2071a:	f004 fbf9 	bl	24f10 <roundf>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   2071e:	eeb4 0ae8 	vcmpe.f32	s0, s17
   20722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20726:	dbd1      	blt.n	206cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
   20728:	eeb4 0ac9 	vcmpe.f32	s0, s18
   2072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   20730:	d8cc      	bhi.n	206cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
  q = zero_point + static_cast<int32_t>(tmp);
   20732:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    *act_max = std::min(qmax, tmp_q);
   20736:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  q = zero_point + static_cast<int32_t>(tmp);
   20738:	ee17 3a90 	vmov	r3, s15
   2073c:	443b      	add	r3, r7
      if (__b < __a)
   2073e:	42b3      	cmp	r3, r6
   20740:	bfa8      	it	ge
   20742:	4633      	movge	r3, r6
    *act_max = std::min(qmax, tmp_q);
   20744:	6013      	str	r3, [r2, #0]
   20746:	e780      	b.n	2064a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
  q = zero_point + static_cast<int32_t>(tmp);
   20748:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   2074c:	eeb1 0a68 	vneg.f32	s0, s17
   20750:	ee17 3a90 	vmov	r3, s15
   20754:	443b      	add	r3, r7
      if (__a < __b)
   20756:	42ab      	cmp	r3, r5
   20758:	bfb8      	it	lt
   2075a:	462b      	movlt	r3, r5
    *act_min = std::max(qmin, tmp_q);
   2075c:	6023      	str	r3, [r4, #0]
   2075e:	f004 fbd7 	bl	24f10 <roundf>
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
   20762:	eeb4 0ac8 	vcmpe.f32	s0, s16
   20766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2076a:	dadd      	bge.n	20728 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x110>
   2076c:	e7ae      	b.n	206cc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
   2076e:	bf00      	nop
   20770:	00000000 	.word	0x00000000
   20774:	cf000000 	.word	0xcf000000
   20778:	4f000000 	.word	0x4f000000
   2077c:	ffff8000 	.word	0xffff8000

00020780 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0>:
TfLiteStatus PopulateConvolutionQuantizationParams(
   20780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20784:	ed2d 8b02 	vpush	{d8}
   20788:	b093      	sub	sp, #76	@ 0x4c
   2078a:	4615      	mov	r5, r2
   2078c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
   2078e:	930b      	str	r3, [sp, #44]	@ 0x2c
   20790:	e9cd 2006 	strd	r2, r0, [sp, #24]
   20794:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
   20796:	9208      	str	r2, [sp, #32]
   20798:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   2079a:	920c      	str	r2, [sp, #48]	@ 0x30
   2079c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
   2079e:	920d      	str	r2, [sp, #52]	@ 0x34
  const auto* affine_quantization =
   207a0:	686b      	ldr	r3, [r5, #4]
TfLiteStatus PopulateConvolutionQuantizationParams(
   207a2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
   207a4:	9209      	str	r2, [sp, #36]	@ 0x24
   207a6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   207a8:	f8dd b098 	ldr.w	fp, [sp, #152]	@ 0x98
   207ac:	920a      	str	r2, [sp, #40]	@ 0x28
   207ae:	e9dd 6724 	ldrd	r6, r7, [sp, #144]	@ 0x90
  TF_LITE_ENSURE(context, affine_quantization);
   207b2:	b19b      	cbz	r3, 207dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   207b4:	681a      	ldr	r2, [r3, #0]
   207b6:	9205      	str	r2, [sp, #20]
   207b8:	b182      	cbz	r2, 207dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   207ba:	9a05      	ldr	r2, [sp, #20]
   207bc:	f8d2 a000 	ldr.w	sl, [r2]
  if (is_per_channel) {
   207c0:	f1ba 0f01 	cmp.w	sl, #1
   207c4:	460c      	mov	r4, r1
   207c6:	dd0f      	ble.n	207e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x68>
    TF_LITE_ENSURE(context,
   207c8:	7f0a      	ldrb	r2, [r1, #28]
   207ca:	2a09      	cmp	r2, #9
   207cc:	d001      	beq.n	207d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x52>
   207ce:	2a07      	cmp	r2, #7
   207d0:	d104      	bne.n	207dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
    TF_LITE_ENSURE(context,
   207d2:	7f2a      	ldrb	r2, [r5, #28]
   207d4:	2a09      	cmp	r2, #9
   207d6:	d06e      	beq.n	208b6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x136>
   207d8:	2a12      	cmp	r2, #18
   207da:	d06c      	beq.n	208b6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x136>
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   207dc:	2001      	movs	r0, #1
}
   207de:	b013      	add	sp, #76	@ 0x4c
   207e0:	ecbd 8b02 	vpop	{d8}
   207e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const float output_scale = output->params.scale;
   207e8:	9b06      	ldr	r3, [sp, #24]
  const float input_scale = input->params.scale;
   207ea:	f8d1 8008 	ldr.w	r8, [r1, #8]
  const float output_scale = output->params.scale;
   207ee:	6898      	ldr	r0, [r3, #8]
  for (int i = 0; i < num_channels; ++i) {
   207f0:	f1bb 0f00 	cmp.w	fp, #0
   207f4:	dd44      	ble.n	20880 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x100>
                                          static_cast<double>(output_scale);
   207f6:	f7f8 f933 	bl	18a60 <__aeabi_f2d>
   207fa:	4602      	mov	r2, r0
   207fc:	460b      	mov	r3, r1
   207fe:	2000      	movs	r0, #0
   20800:	4965      	ldr	r1, [pc, #404]	@ (20998 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x218>)
   20802:	f7f8 faaf 	bl	18d64 <__aeabi_ddiv>
   20806:	4602      	mov	r2, r0
   20808:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   2080a:	4640      	mov	r0, r8
   2080c:	e9cd 2300 	strd	r2, r3, [sp]
   20810:	f7f8 f926 	bl	18a60 <__aeabi_f2d>
   20814:	9b05      	ldr	r3, [sp, #20]
   20816:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2081a:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
   2081e:	f1a6 0804 	sub.w	r8, r6, #4
   20822:	f1a7 0904 	sub.w	r9, r7, #4
  for (int i = 0; i < num_channels; ++i) {
   20826:	2600      	movs	r6, #0
   20828:	1d1f      	adds	r7, r3, #4
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   2082a:	f1ba 0f01 	cmp.w	sl, #1
   2082e:	bfd6      	itet	le
   20830:	9b05      	ldrle	r3, [sp, #20]
   20832:	683d      	ldrgt	r5, [r7, #0]
   20834:	685d      	ldrle	r5, [r3, #4]
    const double effective_output_scale = static_cast<double>(input_scale) *
   20836:	e9dd 0100 	ldrd	r0, r1, [sp]
   2083a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2083e:	f7f8 f967 	bl	18b10 <__aeabi_dmul>
   20842:	4602      	mov	r2, r0
    const double filter_scale = static_cast<double>(scale);
   20844:	4628      	mov	r0, r5
    const double effective_output_scale = static_cast<double>(input_scale) *
   20846:	4614      	mov	r4, r2
   20848:	460d      	mov	r5, r1
    const double filter_scale = static_cast<double>(scale);
   2084a:	f7f8 f909 	bl	18a60 <__aeabi_f2d>
   2084e:	460b      	mov	r3, r1
   20850:	4602      	mov	r2, r0
    const double effective_output_scale = static_cast<double>(input_scale) *
   20852:	4629      	mov	r1, r5
   20854:	4620      	mov	r0, r4
   20856:	f7f8 f95b 	bl	18b10 <__aeabi_dmul>
   2085a:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   2085e:	a911      	add	r1, sp, #68	@ 0x44
   20860:	a810      	add	r0, sp, #64	@ 0x40
   20862:	f000 f927 	bl	20ab4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  for (int i = 0; i < num_channels; ++i) {
   20866:	3601      	adds	r6, #1
    per_channel_multiplier[i] = significand;
   20868:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2086a:	f848 3f04 	str.w	r3, [r8, #4]!
  for (int i = 0; i < num_channels; ++i) {
   2086e:	45b3      	cmp	fp, r6
    per_channel_shift[i] = channel_shift;
   20870:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   20872:	f849 3f04 	str.w	r3, [r9, #4]!
  for (int i = 0; i < num_channels; ++i) {
   20876:	f107 0704 	add.w	r7, r7, #4
   2087a:	d1d6      	bne.n	2082a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0xaa>
   2087c:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	@ 0x38
  if (input->type == kTfLiteUInt8) {
   20880:	7f23      	ldrb	r3, [r4, #28]
   20882:	2b03      	cmp	r3, #3
   20884:	d025      	beq.n	208d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x152>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   20886:	2b09      	cmp	r3, #9
   20888:	d813      	bhi.n	208b2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x132>
   2088a:	f44f 7022 	mov.w	r0, #648	@ 0x288
   2088e:	40d8      	lsrs	r0, r3
   20890:	f010 0001 	ands.w	r0, r0, #1
   20894:	d0a3      	beq.n	207de <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   20896:	9b08      	ldr	r3, [sp, #32]
   20898:	e9dd 2006 	ldrd	r2, r0, [sp, #24]
   2089c:	7819      	ldrb	r1, [r3, #0]
   2089e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   208a0:	931e      	str	r3, [sp, #120]	@ 0x78
   208a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
}
   208a4:	b013      	add	sp, #76	@ 0x4c
   208a6:	ecbd 8b02 	vpop	{d8}
   208aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   208ae:	f7ff beb3 	b.w	20618 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   208b2:	2000      	movs	r0, #0
   208b4:	e793      	b.n	207de <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5e>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
   208b6:	45da      	cmp	sl, fp
   208b8:	d190      	bne.n	207dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
    TF_LITE_ENSURE_EQ(
   208ba:	689a      	ldr	r2, [r3, #8]
   208bc:	696b      	ldr	r3, [r5, #20]
   208be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   208c2:	685b      	ldr	r3, [r3, #4]
   208c4:	459a      	cmp	sl, r3
   208c6:	d189      	bne.n	207dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
  const float output_scale = output->params.scale;
   208c8:	9b06      	ldr	r3, [sp, #24]
  const float input_scale = input->params.scale;
   208ca:	f8d4 8008 	ldr.w	r8, [r4, #8]
  const float output_scale = output->params.scale;
   208ce:	6898      	ldr	r0, [r3, #8]
  for (int i = 0; i < num_channels; ++i) {
   208d0:	e791      	b.n	207f6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x76>
                                     static_cast<double>(filter->params.scale);
   208d2:	edd5 8a02 	vldr	s17, [r5, #8]
  if (bias) {
   208d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
  const double input_product_scale = static_cast<double>(input->params.scale) *
   208d8:	ed94 8a02 	vldr	s16, [r4, #8]
  if (bias) {
   208dc:	b38d      	cbz	r5, 20942 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x1c2>
  const double input_product_scale = static_cast<double>(input->params.scale) *
   208de:	ee18 0a10 	vmov	r0, s16
   208e2:	f7f8 f8bd 	bl	18a60 <__aeabi_f2d>
   208e6:	4606      	mov	r6, r0
                                     static_cast<double>(filter->params.scale);
   208e8:	ee18 0a90 	vmov	r0, s17
  const double input_product_scale = static_cast<double>(input->params.scale) *
   208ec:	460f      	mov	r7, r1
                                     static_cast<double>(filter->params.scale);
   208ee:	f7f8 f8b7 	bl	18a60 <__aeabi_f2d>
   208f2:	4602      	mov	r2, r0
   208f4:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   208f6:	4630      	mov	r0, r6
   208f8:	4639      	mov	r1, r7
   208fa:	f7f8 f909 	bl	18b10 <__aeabi_dmul>
   208fe:	4606      	mov	r6, r0
    const double bias_scale = static_cast<double>(bias->params.scale);
   20900:	68a8      	ldr	r0, [r5, #8]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   20902:	460f      	mov	r7, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
   20904:	f7f8 f8ac 	bl	18a60 <__aeabi_f2d>
   20908:	4602      	mov	r2, r0
   2090a:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   2090c:	4630      	mov	r0, r6
   2090e:	4639      	mov	r1, r7
   20910:	f7f7 ff46 	bl	187a0 <__aeabi_dsub>
   20914:	460b      	mov	r3, r1
    const double output_scale = static_cast<double>(output->params.scale);
   20916:	9906      	ldr	r1, [sp, #24]
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   20918:	4602      	mov	r2, r0
    const double output_scale = static_cast<double>(output->params.scale);
   2091a:	6888      	ldr	r0, [r1, #8]
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   2091c:	4616      	mov	r6, r2
   2091e:	f023 4700 	bic.w	r7, r3, #2147483648	@ 0x80000000
   20922:	f7f8 f89d 	bl	18a60 <__aeabi_f2d>
   20926:	4602      	mov	r2, r0
   20928:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   2092a:	4630      	mov	r0, r6
   2092c:	4639      	mov	r1, r7
   2092e:	f7f8 fa19 	bl	18d64 <__aeabi_ddiv>
   20932:	a317      	add	r3, pc, #92	@ (adr r3, 20990 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x210>)
   20934:	e9d3 2300 	ldrd	r2, r3, [r3]
   20938:	f7f8 fb7a 	bl	19030 <__aeabi_dcmpgt>
   2093c:	2800      	cmp	r0, #0
   2093e:	f47f af4d 	bne.w	207dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
      static_cast<double>(input->params.scale * filter->params.scale);
   20942:	ee28 8a28 	vmul.f32	s16, s16, s17
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   20946:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   2094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2094e:	f53f af45 	bmi.w	207dc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x5c>
  const double input_product_scale =
   20952:	ee18 0a10 	vmov	r0, s16
   20956:	f7f8 f883 	bl	18a60 <__aeabi_f2d>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   2095a:	9b06      	ldr	r3, [sp, #24]
  const double input_product_scale =
   2095c:	4606      	mov	r6, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   2095e:	6898      	ldr	r0, [r3, #8]
  const double input_product_scale =
   20960:	460f      	mov	r7, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   20962:	f7f8 f87d 	bl	18a60 <__aeabi_f2d>
   20966:	4602      	mov	r2, r0
   20968:	460b      	mov	r3, r1
   2096a:	4630      	mov	r0, r6
   2096c:	4639      	mov	r1, r7
   2096e:	f7f8 f9f9 	bl	18d64 <__aeabi_ddiv>
   20972:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   20976:	a911      	add	r1, sp, #68	@ 0x44
   20978:	980c      	ldr	r0, [sp, #48]	@ 0x30
   2097a:	f000 f89b 	bl	20ab4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
   2097e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   20980:	990d      	ldr	r1, [sp, #52]	@ 0x34
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   20982:	7f23      	ldrb	r3, [r4, #28]
    *shift = -exponent;
   20984:	4252      	negs	r2, r2
   20986:	600a      	str	r2, [r1, #0]
   20988:	e77d      	b.n	20886 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0+0x106>
   2098a:	bf00      	nop
   2098c:	f3af 8000 	nop.w
   20990:	47ae147b 	.word	0x47ae147b
   20994:	3f947ae1 	.word	0x3f947ae1
   20998:	3ff00000 	.word	0x3ff00000

0002099c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>:
    int num_channels) {
   2099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   209a0:	f891 e000 	ldrb.w	lr, [r1]
    int num_channels) {
   209a4:	b083      	sub	sp, #12
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   209a6:	f1be 0f01 	cmp.w	lr, #1
    int num_channels) {
   209aa:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
   209ac:	9401      	str	r4, [sp, #4]
   209ae:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	@ 0x3c
   209b2:	e9dd 450d 	ldrd	r4, r5, [sp, #52]	@ 0x34
   209b6:	e9dd 8911 	ldrd	r8, r9, [sp, #68]	@ 0x44
   209ba:	e9dd ab13 	ldrd	sl, fp, [sp, #76]	@ 0x4c
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   209be:	d104      	bne.n	209ca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x2e>
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   209c0:	f892 c000 	ldrb.w	ip, [r2]
   209c4:	f1bc 0f01 	cmp.w	ip, #1
   209c8:	d003      	beq.n	209d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i+0x36>
}
   209ca:	2001      	movs	r0, #1
   209cc:	b003      	add	sp, #12
   209ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209d2:	e9cd 450d 	strd	r4, r5, [sp, #52]	@ 0x34
   209d6:	9c01      	ldr	r4, [sp, #4]
   209d8:	940c      	str	r4, [sp, #48]	@ 0x30
   209da:	e9cd ab13 	strd	sl, fp, [sp, #76]	@ 0x4c
   209de:	e9cd 8911 	strd	r8, r9, [sp, #68]	@ 0x44
   209e2:	e9cd 670f 	strd	r6, r7, [sp, #60]	@ 0x3c
   209e6:	b003      	add	sp, #12
   209e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209ec:	f7ff bec8 	b.w	20780 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i.part.0>

000209f0 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   209f0:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   209f2:	6949      	ldr	r1, [r1, #20]
   209f4:	6940      	ldr	r0, [r0, #20]
   209f6:	f003 fed7 	bl	247a8 <TfLiteIntArrayEqual>
}
   209fa:	3800      	subs	r0, #0
   209fc:	bf18      	it	ne
   209fe:	2001      	movne	r0, #1
   20a00:	bd08      	pop	{r3, pc}
   20a02:	bf00      	nop

00020a04 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
  for (int i = 0; i < num_elements; i += 2) {
   20a04:	2900      	cmp	r1, #0
   20a06:	dd23      	ble.n	20a50 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x4c>
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20a08:	7803      	ldrb	r3, [r0, #0]
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
   20a0a:	2901      	cmp	r1, #1
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20a0c:	f343 0303 	sbfx	r3, r3, #0, #4
   20a10:	7013      	strb	r3, [r2, #0]
    if (i + 1 == num_elements) break;
   20a12:	d01d      	beq.n	20a50 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x4c>
                             int8_t* dst_buffer) {
   20a14:	b530      	push	{r4, r5, lr}
  for (int i = 0; i < num_elements; i += 2) {
   20a16:	2300      	movs	r3, #0
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20a18:	4604      	mov	r4, r0
   20a1a:	1c55      	adds	r5, r2, #1
   20a1c:	e007      	b.n	20a2e <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x2a>
   20a1e:	f810 c00c 	ldrb.w	ip, [r0, ip]
    if (i + 1 == num_elements) break;
   20a22:	4571      	cmp	r1, lr
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20a24:	f34c 0c03 	sbfx	ip, ip, #0, #4
   20a28:	f802 c003 	strb.w	ip, [r2, r3]
    if (i + 1 == num_elements) break;
   20a2c:	d00f      	beq.n	20a4e <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x4a>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
   20a2e:	f994 c000 	ldrsb.w	ip, [r4]
   20a32:	ea4f 1c2c 	mov.w	ip, ip, asr #4
   20a36:	f805 c003 	strb.w	ip, [r5, r3]
  for (int i = 0; i < num_elements; i += 2) {
   20a3a:	469e      	mov	lr, r3
   20a3c:	3302      	adds	r3, #2
   20a3e:	4299      	cmp	r1, r3
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20a40:	ea4f 0c63 	mov.w	ip, r3, asr #1
    if (i + 1 == num_elements) break;
   20a44:	f10e 0e03 	add.w	lr, lr, #3
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
   20a48:	eb00 0463 	add.w	r4, r0, r3, asr #1
  for (int i = 0; i < num_elements; i += 2) {
   20a4c:	dce7      	bgt.n	20a1e <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x1a>
  }
}
   20a4e:	bd30      	pop	{r4, r5, pc}
   20a50:	4770      	bx	lr
   20a52:	bf00      	nop

00020a54 <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0>:
constexpr uint32_t kFractionShift = 22;
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
   20a54:	b538      	push	{r3, r4, r5, lr}
   20a56:	4605      	mov	r5, r0
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
   20a58:	4608      	mov	r0, r1
void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
   20a5a:	460c      	mov	r4, r1
  const double q = std::frexp(double_multiplier, shift);
   20a5c:	f004 fa7e 	bl	24f5c <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
   20a60:	2200      	movs	r2, #0
   20a62:	4b13      	ldr	r3, [pc, #76]	@ (20ab0 <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0+0x5c>)
  const double q = std::frexp(double_multiplier, shift);
   20a64:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
   20a68:	f7f8 f852 	bl	18b10 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
   20a6c:	ec41 0b10 	vmov	d0, r0, r1
   20a70:	f004 fb2a 	bl	250c8 <round>
   20a74:	ec51 0b10 	vmov	r0, r1, d0
   20a78:	f00a fe22 	bl	2b6c0 <__aeabi_d2lz>
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1LL << 31));
   20a7c:	f04f 4e00 	mov.w	lr, #2147483648	@ 0x80000000
   20a80:	f04f 0c00 	mov.w	ip, #0
   20a84:	4586      	cmp	lr, r0
   20a86:	eb7c 0201 	sbcs.w	r2, ip, r1
   20a8a:	db0f      	blt.n	20aac <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0+0x58>
  if (q_fixed == (1LL << 31)) {
   20a8c:	4561      	cmp	r1, ip
   20a8e:	bf08      	it	eq
   20a90:	4570      	cmpeq	r0, lr
    q_fixed /= 2;
    ++*shift;
   20a92:	6822      	ldr	r2, [r4, #0]
   20a94:	4603      	mov	r3, r0
  if (q_fixed == (1LL << 31)) {
   20a96:	d103      	bne.n	20aa0 <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0+0x4c>
    ++*shift;
   20a98:	3201      	adds	r2, #1
   20a9a:	6022      	str	r2, [r4, #0]
    q_fixed /= 2;
   20a9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
   20aa0:	321f      	adds	r2, #31
    *shift = 0;
   20aa2:	bfbc      	itt	lt
   20aa4:	2300      	movlt	r3, #0
   20aa6:	6023      	strlt	r3, [r4, #0]
  if (*shift > 30) {
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   20aa8:	602b      	str	r3, [r5, #0]
}
   20aaa:	bd38      	pop	{r3, r4, r5, pc}
  TFLITE_CHECK(q_fixed <= (1LL << 31));
   20aac:	f004 fb5c 	bl	25168 <abort>
   20ab0:	41e00000 	.word	0x41e00000

00020ab4 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
                        int* shift) {
   20ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20ab6:	ec55 4b10 	vmov	r4, r5, d0
   20aba:	4606      	mov	r6, r0
   20abc:	460f      	mov	r7, r1
  if (double_multiplier == 0.) {
   20abe:	2200      	movs	r2, #0
   20ac0:	2300      	movs	r3, #0
   20ac2:	4620      	mov	r0, r4
   20ac4:	4629      	mov	r1, r5
   20ac6:	f7f8 fa8b 	bl	18fe0 <__aeabi_dcmpeq>
   20aca:	b118      	cbz	r0, 20ad4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x20>
    *quantized_multiplier = 0;
   20acc:	2300      	movs	r3, #0
   20ace:	6033      	str	r3, [r6, #0]
    *shift = 0;
   20ad0:	603b      	str	r3, [r7, #0]
}
   20ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20ad4:	ec45 4b10 	vmov	d0, r4, r5
   20ad8:	4639      	mov	r1, r7
   20ada:	4630      	mov	r0, r6
   20adc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20ae0:	f7ff bfb8 	b.w	20a54 <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0>

00020ae4 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:
  TFLITE_CHECK_GE(*left_shift, 0);
}

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
   20ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ae6:	ec55 4b10 	vmov	r4, r5, d0
   20aea:	b083      	sub	sp, #12
   20aec:	4607      	mov	r7, r0
   20aee:	460e      	mov	r6, r1
  TFLITE_CHECK_LT(double_multiplier, 1.);
   20af0:	4b0d      	ldr	r3, [pc, #52]	@ (20b28 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x44>)
   20af2:	2200      	movs	r2, #0
   20af4:	4620      	mov	r0, r4
   20af6:	4629      	mov	r1, r5
   20af8:	f7f8 fa7c 	bl	18ff4 <__aeabi_dcmplt>
   20afc:	b190      	cbz	r0, 20b24 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x40>
  TFLITE_CHECK_GT(double_multiplier, 0.);
   20afe:	2200      	movs	r2, #0
   20b00:	2300      	movs	r3, #0
   20b02:	4620      	mov	r0, r4
   20b04:	4629      	mov	r1, r5
   20b06:	f7f8 fa93 	bl	19030 <__aeabi_dcmpgt>
   20b0a:	b158      	cbz	r0, 20b24 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x40>
  if (double_multiplier == 0.) {
   20b0c:	ec45 4b10 	vmov	d0, r4, r5
   20b10:	a901      	add	r1, sp, #4
   20b12:	4638      	mov	r0, r7
   20b14:	f7ff ff9e 	bl	20a54 <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
  TFLITE_CHECK_LE(shift, 0);
   20b18:	9b01      	ldr	r3, [sp, #4]
   20b1a:	2b00      	cmp	r3, #0
   20b1c:	dc02      	bgt.n	20b24 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x40>
  *left_shift = shift;
   20b1e:	6033      	str	r3, [r6, #0]
}
   20b20:	b003      	add	sp, #12
   20b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TFLITE_CHECK_LT(double_multiplier, 1.);
   20b24:	f004 fb20 	bl	25168 <abort>
   20b28:	3ff00000 	.word	0x3ff00000
   20b2c:	00000000 	.word	0x00000000

00020b30 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
   20b30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      0) {
    input_beta_real_multiplier = max_real_multiplier;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier =
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
   20b34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
   20b38:	ed2d 8b02 	vpush	{d8}
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
   20b3c:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
   20b40:	ec57 6b10 	vmov	r6, r7, d0
   20b44:	ec59 8b11 	vmov	r8, r9, d1
   20b48:	4692      	mov	sl, r2
   20b4a:	468b      	mov	fp, r1
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
   20b4c:	f7f7 ff76 	bl	18a3c <__aeabi_i2d>
   20b50:	4642      	mov	r2, r8
   20b52:	4604      	mov	r4, r0
   20b54:	460d      	mov	r5, r1
   20b56:	464b      	mov	r3, r9
   20b58:	4630      	mov	r0, r6
   20b5a:	4639      	mov	r1, r7
   20b5c:	f7f7 ffd8 	bl	18b10 <__aeabi_dmul>
   20b60:	4602      	mov	r2, r0
   20b62:	460b      	mov	r3, r1
   20b64:	4620      	mov	r0, r4
   20b66:	4629      	mov	r1, r5
   20b68:	f7f7 ffd2 	bl	18b10 <__aeabi_dmul>
   20b6c:	4602      	mov	r2, r0
   20b6e:	460b      	mov	r3, r1
   20b70:	ec43 2b18 	vmov	d8, r2, r3
      if (__b < __a)
   20b74:	a310      	add	r3, pc, #64	@ (adr r3, 20bb8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
   20b76:	e9d3 2300 	ldrd	r2, r3, [r3]
   20b7a:	f7f8 fa59 	bl	19030 <__aeabi_dcmpgt>
   20b7e:	b9b0      	cbnz	r0, 20bae <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x7e>
  TFLITE_CHECK_GT(double_multiplier, 1.);
   20b80:	4b0f      	ldr	r3, [pc, #60]	@ (20bc0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x90>)
   20b82:	ec51 0b18 	vmov	r0, r1, d8
   20b86:	2200      	movs	r2, #0
   20b88:	f7f8 fa52 	bl	19030 <__aeabi_dcmpgt>
   20b8c:	b190      	cbz	r0, 20bb4 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x84>
  if (double_multiplier == 0.) {
   20b8e:	eeb0 0a48 	vmov.f32	s0, s16
   20b92:	eef0 0a68 	vmov.f32	s1, s17
   20b96:	4651      	mov	r1, sl
   20b98:	4658      	mov	r0, fp
   20b9a:	f7ff ff5b 	bl	20a54 <_ZN6tflite18QuantizeMultiplierEdPlPi.part.0>
  TFLITE_CHECK_GE(*left_shift, 0);
   20b9e:	f8da 3000 	ldr.w	r3, [sl]
   20ba2:	2b00      	cmp	r3, #0
   20ba4:	db06      	blt.n	20bb4 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x84>
                       max_real_multiplier);
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
                                   quantized_multiplier, left_shift);
}
   20ba6:	ecbd 8b02 	vpop	{d8}
   20baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __b;
   20bae:	ed9f 8b02 	vldr	d8, [pc, #8]	@ 20bb8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>
   20bb2:	e7ec      	b.n	20b8e <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x5e>
  TFLITE_CHECK_GT(double_multiplier, 1.);
   20bb4:	f004 fad8 	bl	25168 <abort>
   20bb8:	ffc00000 	.word	0xffc00000
   20bbc:	41dfffff 	.word	0x41dfffff
   20bc0:	3ff00000 	.word	0x3ff00000

00020bc4 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   20bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   20bc8:	2401      	movs	r4, #1
                         int total_signed_bits) {
   20bca:	4607      	mov	r7, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   20bcc:	fa04 f000 	lsl.w	r0, r4, r0
   20bd0:	3801      	subs	r0, #1
                         int total_signed_bits) {
   20bd2:	460e      	mov	r6, r1
   20bd4:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   20bd6:	f7f7 ff31 	bl	18a3c <__aeabi_i2d>
      (1LL << (total_signed_bits - input_integer_bits)) /
   20bda:	1bed      	subs	r5, r5, r7
      1.0 * ((1 << input_integer_bits) - 1) *
   20bdc:	4689      	mov	r9, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
   20bde:	f1c5 0320 	rsb	r3, r5, #32
   20be2:	f1a5 0120 	sub.w	r1, r5, #32
   20be6:	fa24 f303 	lsr.w	r3, r4, r3
   20bea:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   20bee:	4680      	mov	r8, r0
   20bf0:	4319      	orrs	r1, r3
   20bf2:	fa04 f005 	lsl.w	r0, r4, r5
   20bf6:	f7f7 ff5d 	bl	18ab4 <__aeabi_l2d>
   20bfa:	4602      	mov	r2, r0
   20bfc:	460b      	mov	r3, r1
   20bfe:	4640      	mov	r0, r8
   20c00:	4649      	mov	r1, r9
   20c02:	f7f7 ff85 	bl	18b10 <__aeabi_dmul>
      (1LL << input_left_shift);
   20c06:	f1c6 0320 	rsb	r3, r6, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   20c0a:	4689      	mov	r9, r1
      (1LL << input_left_shift);
   20c0c:	f1a6 0120 	sub.w	r1, r6, #32
   20c10:	fa24 f303 	lsr.w	r3, r4, r3
   20c14:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   20c18:	4680      	mov	r8, r0
      (1LL << (total_signed_bits - input_integer_bits)) /
   20c1a:	4319      	orrs	r1, r3
   20c1c:	fa04 f006 	lsl.w	r0, r4, r6
   20c20:	f7f7 ff48 	bl	18ab4 <__aeabi_l2d>
   20c24:	4602      	mov	r2, r0
   20c26:	460b      	mov	r3, r1
  const double max_input_rescaled =
   20c28:	4640      	mov	r0, r8
   20c2a:	4649      	mov	r1, r9
   20c2c:	f7f8 f89a 	bl	18d64 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   20c30:	ec41 0b10 	vmov	d0, r0, r1
   20c34:	f004 f9c4 	bl	24fc0 <floor>
   20c38:	ec51 0b10 	vmov	r0, r1, d0
   20c3c:	f7f8 fa18 	bl	19070 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   20c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020c44 <_ZN6tflite7InitAddEP13TfLiteContextPKcj>:
}

}  // namespace

void* InitAdd(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   20c44:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   20c46:	b10b      	cbz	r3, 20c4c <_ZN6tflite7InitAddEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   20c48:	213c      	movs	r1, #60	@ 0x3c
   20c4a:	4718      	bx	r3
void* InitAdd(TfLiteContext* context, const char* buffer, size_t length) {
   20c4c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   20c4e:	f004 fa8b 	bl	25168 <abort>
   20c52:	bf00      	nop
   20c54:	0000      	movs	r0, r0
	...

00020c58 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus PrepareAdd(TfLiteContext* context, TfLiteNode* node) {
   20c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c5c:	ed2d 8b06 	vpush	{d8-d10}
  TFLITE_DCHECK(node->user_data != nullptr);
   20c60:	68cb      	ldr	r3, [r1, #12]
TfLiteStatus PrepareAdd(TfLiteContext* context, TfLiteNode* node) {
   20c62:	b089      	sub	sp, #36	@ 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
   20c64:	2b00      	cmp	r3, #0
   20c66:	f000 8113 	beq.w	20e90 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x238>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   20c6a:	690b      	ldr	r3, [r1, #16]
   20c6c:	468a      	mov	sl, r1
   20c6e:	2b00      	cmp	r3, #0
   20c70:	f000 810e 	beq.w	20e90 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x238>

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
  return reinterpret_cast<MicroContext*>(context->impl_);
   20c74:	6884      	ldr	r4, [r0, #8]

  MicroContext* micro_context = GetMicroContext(context);

  TfLiteTensor* input1 =
      micro_context->AllocateTempInputTensor(node, kInputTensor1);
   20c76:	6823      	ldr	r3, [r4, #0]
   20c78:	4607      	mov	r7, r0
   20c7a:	699b      	ldr	r3, [r3, #24]
   20c7c:	2200      	movs	r2, #0
   20c7e:	4620      	mov	r0, r4
   20c80:	4798      	blx	r3
  TF_LITE_ENSURE(context, input1 != nullptr);
   20c82:	4605      	mov	r5, r0
   20c84:	2800      	cmp	r0, #0
   20c86:	d044      	beq.n	20d12 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>
  TfLiteTensor* input2 =
      micro_context->AllocateTempInputTensor(node, kInputTensor2);
   20c88:	6823      	ldr	r3, [r4, #0]
   20c8a:	2201      	movs	r2, #1
   20c8c:	699b      	ldr	r3, [r3, #24]
   20c8e:	4651      	mov	r1, sl
   20c90:	4620      	mov	r0, r4
   20c92:	4798      	blx	r3
  TF_LITE_ENSURE(context, input2 != nullptr);
   20c94:	4606      	mov	r6, r0
   20c96:	2800      	cmp	r0, #0
   20c98:	d03b      	beq.n	20d12 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kOutputTensor);
   20c9a:	6823      	ldr	r3, [r4, #0]
   20c9c:	2200      	movs	r2, #0
   20c9e:	69db      	ldr	r3, [r3, #28]
   20ca0:	4651      	mov	r1, sl
   20ca2:	4620      	mov	r0, r4
   20ca4:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   20ca6:	4680      	mov	r8, r0
   20ca8:	2800      	cmp	r0, #0
   20caa:	d032      	beq.n	20d12 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>

  if (input1->type == kTfLiteInt16) {
   20cac:	7f2b      	ldrb	r3, [r5, #28]
   20cae:	2b07      	cmp	r3, #7
   20cb0:	d105      	bne.n	20cbe <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x66>
    TF_LITE_ENSURE_EQ(context, input1->params.zero_point, 0);
   20cb2:	68eb      	ldr	r3, [r5, #12]
   20cb4:	bb6b      	cbnz	r3, 20d12 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>
    TF_LITE_ENSURE_EQ(context, input2->params.zero_point, 0);
   20cb6:	68f3      	ldr	r3, [r6, #12]
   20cb8:	bb5b      	cbnz	r3, 20d12 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   20cba:	68c3      	ldr	r3, [r0, #12]
   20cbc:	bb4b      	cbnz	r3, 20d12 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xba>
  }

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
   20cbe:	e9da 9303 	ldrd	r9, r3, [sl, #12]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   20cc2:	4631      	mov	r1, r6
   20cc4:	4628      	mov	r0, r5
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
   20cc6:	9305      	str	r3, [sp, #20]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   20cc8:	f7ff fe92 	bl	209f0 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
   20ccc:	f898 301c 	ldrb.w	r3, [r8, #28]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   20cd0:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
   20cd4:	2b09      	cmp	r3, #9
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   20cd6:	f889 0000 	strb.w	r0, [r9]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteInt16) {
   20cda:	f000 80a3 	beq.w	20e24 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1cc>
   20cde:	2b07      	cmp	r3, #7
   20ce0:	d01d      	beq.n	20d1e <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xc6>
  } else if (output->type == kTfLiteFloat32) {
   20ce2:	2b01      	cmp	r3, #1
   20ce4:	f000 80ae 	beq.w	20e44 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x1ec>

  TF_LITE_ENSURE_STATUS(
      CalculateOpData(context, params, input1, input2, output, data));

  micro_context->DeallocateTempTfLiteTensor(input1);
   20ce8:	6823      	ldr	r3, [r4, #0]
   20cea:	4629      	mov	r1, r5
   20cec:	4620      	mov	r0, r4
   20cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   20cf0:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input2);
   20cf2:	6823      	ldr	r3, [r4, #0]
   20cf4:	4631      	mov	r1, r6
   20cf6:	4620      	mov	r0, r4
   20cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   20cfa:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   20cfc:	6823      	ldr	r3, [r4, #0]
   20cfe:	4620      	mov	r0, r4
   20d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   20d02:	4641      	mov	r1, r8
   20d04:	4798      	blx	r3

  return kTfLiteOk;
   20d06:	2000      	movs	r0, #0
}
   20d08:	b009      	add	sp, #36	@ 0x24
   20d0a:	ecbd 8b06 	vpop	{d8-d10}
   20d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(context, input1 != nullptr);
   20d12:	2001      	movs	r0, #1
}
   20d14:	b009      	add	sp, #36	@ 0x24
   20d16:	ecbd 8b06 	vpop	{d8-d10}
   20d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    data->input1_offset = -input1->params.zero_point;
   20d1e:	68eb      	ldr	r3, [r5, #12]
    data->output_offset = output->params.zero_point;
   20d20:	f8d8 200c 	ldr.w	r2, [r8, #12]
   20d24:	ed9f 7b5c 	vldr	d7, [pc, #368]	@ 20e98 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x240>
    data->input1_offset = -input1->params.zero_point;
   20d28:	425b      	negs	r3, r3
   20d2a:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
    data->input2_offset = -input2->params.zero_point;
   20d2e:	68f3      	ldr	r3, [r6, #12]
    data->output_offset = output->params.zero_point;
   20d30:	ed8d 7b06 	vstr	d7, [sp, #24]
    data->input2_offset = -input2->params.zero_point;
   20d34:	425b      	negs	r3, r3
   20d36:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   20d3a:	230f      	movs	r3, #15
      if (__a < __b)
   20d3c:	ed96 8a02 	vldr	s16, [r6, #8]
   20d40:	ed95 aa02 	vldr	s20, [r5, #8]
    data->output_offset = output->params.zero_point;
   20d44:	f8c9 2030 	str.w	r2, [r9, #48]	@ 0x30
   20d48:	eeb4 aac8 	vcmpe.f32	s20, s16
   20d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        2 * static_cast<double>(
   20d50:	bfb4      	ite	lt
   20d52:	ee18 0a10 	vmovlt	r0, s16
   20d56:	ee1a 0a10 	vmovge	r0, s20
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   20d5a:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
        2 * static_cast<double>(
   20d5e:	f7f7 fe7f 	bl	18a60 <__aeabi_f2d>
   20d62:	4682      	mov	sl, r0
   20d64:	468b      	mov	fp, r1
    const double real_input1_multiplier =
   20d66:	4652      	mov	r2, sl
   20d68:	465b      	mov	r3, fp
   20d6a:	494f      	ldr	r1, [pc, #316]	@ (20ea8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x250>)
   20d6c:	2000      	movs	r0, #0
   20d6e:	f7f7 fff9 	bl	18d64 <__aeabi_ddiv>
    const double real_input2_multiplier =
   20d72:	e9cd 0102 	strd	r0, r1, [sp, #8]
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
   20d76:	ee18 0a10 	vmov	r0, s16
   20d7a:	f7f7 fe71 	bl	18a60 <__aeabi_f2d>
    const double real_input2_multiplier =
   20d7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20d82:	f7f7 fec5 	bl	18b10 <__aeabi_dmul>
                std::max(input1->params.scale, input2->params.scale));
   20d86:	4652      	mov	r2, sl
   20d88:	465b      	mov	r3, fp
    const double real_input2_multiplier =
   20d8a:	ec41 0b19 	vmov	d9, r0, r1
                std::max(input1->params.scale, input2->params.scale));
   20d8e:	4650      	mov	r0, sl
   20d90:	4659      	mov	r1, fp
   20d92:	f7f7 fd07 	bl	187a4 <__adddf3>
   20d96:	4682      	mov	sl, r0
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
   20d98:	f8d8 0008 	ldr.w	r0, [r8, #8]
                std::max(input1->params.scale, input2->params.scale));
   20d9c:	468b      	mov	fp, r1
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
   20d9e:	f7f7 fe5f 	bl	18a60 <__aeabi_f2d>
   20da2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   20da6:	f7f7 feb3 	bl	18b10 <__aeabi_dmul>
   20daa:	4602      	mov	r2, r0
   20dac:	460b      	mov	r3, r1
    const double real_output_multiplier =
   20dae:	4650      	mov	r0, sl
   20db0:	4659      	mov	r1, fp
   20db2:	f7f7 ffd7 	bl	18d64 <__aeabi_ddiv>
   20db6:	ec41 0b18 	vmov	d8, r0, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
   20dba:	ee1a 0a10 	vmov	r0, s20
   20dbe:	f7f7 fe4f 	bl	18a60 <__aeabi_f2d>
    const double real_input1_multiplier =
   20dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20dc6:	f7f7 fea3 	bl	18b10 <__aeabi_dmul>
    QuantizeMultiplierSmallerThanOneExp(
   20dca:	f109 0b04 	add.w	fp, r9, #4
   20dce:	f109 0a14 	add.w	sl, r9, #20
    const double real_input1_multiplier =
   20dd2:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplierSmallerThanOneExp(
   20dd6:	4659      	mov	r1, fp
   20dd8:	4650      	mov	r0, sl
   20dda:	f7ff fe83 	bl	20ae4 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    QuantizeMultiplierSmallerThanOneExp(
   20dde:	eeb0 0a49 	vmov.f32	s0, s18
   20de2:	eef0 0a69 	vmov.f32	s1, s19
   20de6:	f109 0108 	add.w	r1, r9, #8
   20dea:	f109 0018 	add.w	r0, r9, #24
   20dee:	f7ff fe79 	bl	20ae4 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    QuantizeMultiplierSmallerThanOneExp(
   20df2:	eeb0 0a48 	vmov.f32	s0, s16
   20df6:	eef0 0a68 	vmov.f32	s1, s17
   20dfa:	f109 0120 	add.w	r1, r9, #32
   20dfe:	f109 001c 	add.w	r0, r9, #28
   20e02:	f7ff fe6f 	bl	20ae4 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   20e06:	9b05      	ldr	r3, [sp, #20]
   20e08:	7819      	ldrb	r1, [r3, #0]
   20e0a:	f109 0310 	add.w	r3, r9, #16
   20e0e:	9300      	str	r3, [sp, #0]
   20e10:	4638      	mov	r0, r7
   20e12:	f109 030c 	add.w	r3, r9, #12
   20e16:	4642      	mov	r2, r8
   20e18:	f7ff fbfe 	bl	20618 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
   20e1c:	2800      	cmp	r0, #0
   20e1e:	f43f af63 	beq.w	20ce8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x90>
   20e22:	e777      	b.n	20d14 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xbc>
    data->input1_offset = -input1->params.zero_point;
   20e24:	68eb      	ldr	r3, [r5, #12]
    data->output_offset = output->params.zero_point;
   20e26:	f8d8 200c 	ldr.w	r2, [r8, #12]
    data->input1_offset = -input1->params.zero_point;
   20e2a:	425b      	negs	r3, r3
    data->output_offset = output->params.zero_point;
   20e2c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 20ea0 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x248>
    data->input1_offset = -input1->params.zero_point;
   20e30:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
    data->input2_offset = -input2->params.zero_point;
   20e34:	68f3      	ldr	r3, [r6, #12]
   20e36:	425b      	negs	r3, r3
   20e38:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
    data->output_offset = output->params.zero_point;
   20e3c:	ed8d 7b06 	vstr	d7, [sp, #24]
    data->left_shift = (output->type == kTfLiteInt16) ? 15 : 20;
   20e40:	2314      	movs	r3, #20
   20e42:	e77b      	b.n	20d3c <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0xe4>
    CalculateActivationRange(params->activation,
   20e44:	9b05      	ldr	r3, [sp, #20]
   20e46:	781b      	ldrb	r3, [r3, #0]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
   20e48:	2b01      	cmp	r3, #1
   20e4a:	d00b      	beq.n	20e64 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x20c>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
   20e4c:	2b03      	cmp	r3, #3
   20e4e:	d010      	beq.n	20e72 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x21a>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
   20e50:	2b02      	cmp	r3, #2
   20e52:	d015      	beq.n	20e80 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x228>
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
   20e54:	f46f 0300 	mvn.w	r3, #8388608	@ 0x800000
   20e58:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
    *activation_max = std::numeric_limits<T>::max();
   20e5c:	4b13      	ldr	r3, [pc, #76]	@ (20eac <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x254>)
   20e5e:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
  TF_LITE_ENSURE_STATUS(
   20e62:	e741      	b.n	20ce8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x90>
    *activation_min = 0;
   20e64:	2300      	movs	r3, #0
   20e66:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
    *activation_max = std::numeric_limits<T>::max();
   20e6a:	4b10      	ldr	r3, [pc, #64]	@ (20eac <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x254>)
   20e6c:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
   20e70:	e73a      	b.n	20ce8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x90>
    *activation_min = 0;
   20e72:	2300      	movs	r3, #0
   20e74:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
    *activation_max = 6;
   20e78:	4b0d      	ldr	r3, [pc, #52]	@ (20eb0 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x258>)
   20e7a:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
   20e7e:	e733      	b.n	20ce8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x90>
    *activation_min = -1;
   20e80:	4b0c      	ldr	r3, [pc, #48]	@ (20eb4 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x25c>)
   20e82:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
    *activation_max = 1;
   20e86:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
   20e8a:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
   20e8e:	e72b      	b.n	20ce8 <_ZN6tflite10PrepareAddEP13TfLiteContextP10TfLiteNode+0x90>
  TFLITE_DCHECK(node->user_data != nullptr);
   20e90:	f004 f96a 	bl	25168 <abort>
   20e94:	f3af 8000 	nop.w
   20e98:	00000000 	.word	0x00000000
   20e9c:	40e00000 	.word	0x40e00000
   20ea0:	00000000 	.word	0x00000000
   20ea4:	41300000 	.word	0x41300000
   20ea8:	3fe00000 	.word	0x3fe00000
   20eac:	7f7fffff 	.word	0x7f7fffff
   20eb0:	40c00000 	.word	0x40c00000
   20eb4:	bf800000 	.word	0xbf800000

00020eb8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
   20eb8:	b508      	push	{r3, lr}
  assert(exponent >= 0);
  assert(exponent <= 31);
   20eba:	4a03      	ldr	r2, [pc, #12]	@ (20ec8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0+0x10>)
   20ebc:	4b03      	ldr	r3, [pc, #12]	@ (20ecc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0+0x14>)
   20ebe:	4804      	ldr	r0, [pc, #16]	@ (20ed0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0+0x18>)
   20ec0:	f240 1167 	movw	r1, #359	@ 0x167
   20ec4:	f004 f958 	bl	25178 <__assert_func>
   20ec8:	0003f788 	.word	0x0003f788
   20ecc:	0003f778 	.word	0x0003f778
   20ed0:	0003f7e4 	.word	0x0003f7e4

00020ed4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>:
      }
    }
  }
}

inline int8_t AddFunc(int8_t x, int8_t y, const ArithmeticParams& params) {
   20ed4:	b538      	push	{r3, r4, r5, lr}
  const int32_t input1_val = params.input1_offset + x;
   20ed6:	6853      	ldr	r3, [r2, #4]
  const int32_t input2_val = params.input2_offset + y;
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
   20ed8:	6994      	ldr	r4, [r2, #24]
  const int32_t input1_val = params.input1_offset + x;
   20eda:	4418      	add	r0, r3
  const int32_t input2_val = params.input2_offset + y;
   20edc:	6893      	ldr	r3, [r2, #8]
   20ede:	4419      	add	r1, r3
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
  const int32_t scaled_input1_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
   20ee0:	69d3      	ldr	r3, [r2, #28]
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
   20ee2:	40a0      	lsls	r0, r4
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   20ee4:	4283      	cmp	r3, r0
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
   20ee6:	fa01 f104 	lsl.w	r1, r1, r4
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
   20eea:	6a14      	ldr	r4, [r2, #32]
   20eec:	f000 80a2 	beq.w	21034 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x160>
  std::int64_t ab_64 = a_64 * b_64;
   20ef0:	fb80 0303 	smull	r0, r3, r0, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   20ef4:	2b00      	cmp	r3, #0
   20ef6:	db70      	blt.n	20fda <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x106>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   20ef8:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
   20efc:	f143 0c00 	adc.w	ip, r3, #0
   20f00:	0fc3      	lsrs	r3, r0, #31
   20f02:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
  assert(exponent >= 0);
   20f06:	2c00      	cmp	r4, #0
#else
inline int32_t MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32_t x, int32_t quantized_multiplier, int left_shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
   20f08:	f1c4 0000 	rsb	r0, r4, #0
   20f0c:	f300 80a6 	bgt.w	2105c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x188>
  assert(exponent <= 31);
   20f10:	341f      	adds	r4, #31
   20f12:	f2c0 80aa 	blt.w	2106a <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x196>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   20f16:	2401      	movs	r4, #1
   20f18:	4084      	lsls	r4, r0
   20f1a:	3c01      	subs	r4, #1
  return a ? BitNot(zero) : zero;
   20f1c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
  return a >> offset;
   20f20:	fa43 f000 	asr.w	r0, r3, r0
  return a & b;
   20f24:	4023      	ands	r3, r4
  return a + b;
   20f26:	eb0c 0464 	add.w	r4, ip, r4, asr #1
   20f2a:	42a3      	cmp	r3, r4
   20f2c:	bfc8      	it	gt
   20f2e:	3001      	addgt	r0, #1
  const int32_t scaled_input2_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input2_val, params.input2_multiplier, params.input2_shift);
   20f30:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	@ 0x24
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   20f34:	428b      	cmp	r3, r1
   20f36:	f000 8084 	beq.w	21042 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x16e>
  std::int64_t ab_64 = a_64 * b_64;
   20f3a:	fb81 1303 	smull	r1, r3, r1, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   20f3e:	2b00      	cmp	r3, #0
   20f40:	db5a      	blt.n	20ff8 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x124>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   20f42:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
   20f46:	f143 0300 	adc.w	r3, r3, #0
   20f4a:	0fc9      	lsrs	r1, r1, #31
   20f4c:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
  assert(exponent >= 0);
   20f50:	2c00      	cmp	r4, #0
   20f52:	f1c4 0300 	rsb	r3, r4, #0
   20f56:	f300 8081 	bgt.w	2105c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x188>
  assert(exponent <= 31);
   20f5a:	341f      	adds	r4, #31
   20f5c:	f2c0 8085 	blt.w	2106a <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x196>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   20f60:	2401      	movs	r4, #1
   20f62:	409c      	lsls	r4, r3
   20f64:	3c01      	subs	r4, #1
  return a >> offset;
   20f66:	ea4f 0c64 	mov.w	ip, r4, asr #1
   20f6a:	fa41 f303 	asr.w	r3, r1, r3
  return a & b;
   20f6e:	400c      	ands	r4, r1
  return a + b;
   20f70:	eb0c 7cd1 	add.w	ip, ip, r1, lsr #31
   20f74:	4564      	cmp	r4, ip
   20f76:	bfd4      	ite	le
   20f78:	4619      	movle	r1, r3
   20f7a:	1c59      	addgt	r1, r3, #1
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
  const int32_t raw_output =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          raw_sum, params.output_multiplier, params.output_shift) +
   20f7c:	6913      	ldr	r3, [r2, #16]
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
   20f7e:	4401      	add	r1, r0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   20f80:	428b      	cmp	r3, r1
          raw_sum, params.output_multiplier, params.output_shift) +
   20f82:	6950      	ldr	r0, [r2, #20]
   20f84:	d064      	beq.n	21050 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x17c>
  std::int64_t ab_64 = a_64 * b_64;
   20f86:	fb83 3101 	smull	r3, r1, r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   20f8a:	2900      	cmp	r1, #0
   20f8c:	db43      	blt.n	21016 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x142>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   20f8e:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
   20f92:	f141 0100 	adc.w	r1, r1, #0
   20f96:	0fdb      	lsrs	r3, r3, #31
   20f98:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  assert(exponent >= 0);
   20f9c:	2800      	cmp	r0, #0
   20f9e:	f1c0 0400 	rsb	r4, r0, #0
   20fa2:	dc5b      	bgt.n	2105c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x188>
  assert(exponent <= 31);
   20fa4:	301f      	adds	r0, #31
   20fa6:	db60      	blt.n	2106a <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x196>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   20fa8:	2101      	movs	r1, #1
   20faa:	40a1      	lsls	r1, r4
   20fac:	3901      	subs	r1, #1
  return a & b;
   20fae:	ea01 0c03 	and.w	ip, r1, r3
  return a >> offset;
   20fb2:	1049      	asrs	r1, r1, #1
   20fb4:	fa43 f004 	asr.w	r0, r3, r4
  return a + b;
   20fb8:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
   20fbc:	458c      	cmp	ip, r1
   20fbe:	bfc8      	it	gt
   20fc0:	3001      	addgt	r0, #1
   20fc2:	68d4      	ldr	r4, [r2, #12]
      if (__b < __a)
   20fc4:	e9d2 130b 	ldrd	r1, r3, [r2, #44]	@ 0x2c
   20fc8:	4420      	add	r0, r4
      if (__a < __b)
   20fca:	4288      	cmp	r0, r1
   20fcc:	bfb8      	it	lt
   20fce:	4608      	movlt	r0, r1
      if (__b < __a)
   20fd0:	4298      	cmp	r0, r3
   20fd2:	bfa8      	it	ge
   20fd4:	4618      	movge	r0, r3
      params.output_offset;
  const int32_t clamped_output =
      std::min(params.quantized_activation_max,
               std::max(params.quantized_activation_min, raw_output));
  return static_cast<int8_t>(clamped_output);
}
   20fd6:	b240      	sxtb	r0, r0
   20fd8:	bd38      	pop	{r3, r4, r5, pc}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   20fda:	4d25      	ldr	r5, [pc, #148]	@ (21070 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x19c>)
   20fdc:	1940      	adds	r0, r0, r5
   20fde:	f163 0300 	sbc.w	r3, r3, #0
   20fe2:	2b00      	cmp	r3, #0
   20fe4:	da04      	bge.n	20ff0 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x11c>
   20fe6:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
   20fea:	1940      	adds	r0, r0, r5
   20fec:	f143 0300 	adc.w	r3, r3, #0
   20ff0:	0fc0      	lsrs	r0, r0, #31
   20ff2:	ea40 0343 	orr.w	r3, r0, r3, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   20ff6:	e786      	b.n	20f06 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x32>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   20ff8:	4d1d      	ldr	r5, [pc, #116]	@ (21070 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x19c>)
   20ffa:	1949      	adds	r1, r1, r5
   20ffc:	f163 0300 	sbc.w	r3, r3, #0
   21000:	2b00      	cmp	r3, #0
   21002:	da04      	bge.n	2100e <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x13a>
   21004:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
   21008:	1949      	adds	r1, r1, r5
   2100a:	f143 0300 	adc.w	r3, r3, #0
   2100e:	0fc9      	lsrs	r1, r1, #31
   21010:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   21014:	e79c      	b.n	20f50 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x7c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21016:	4c16      	ldr	r4, [pc, #88]	@ (21070 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x19c>)
   21018:	191b      	adds	r3, r3, r4
   2101a:	f161 0100 	sbc.w	r1, r1, #0
   2101e:	2900      	cmp	r1, #0
   21020:	da04      	bge.n	2102c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x158>
   21022:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
   21026:	191b      	adds	r3, r3, r4
   21028:	f141 0100 	adc.w	r1, r1, #0
   2102c:	0fdb      	lsrs	r3, r3, #31
   2102e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   21032:	e7b3      	b.n	20f9c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xc8>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
   21038:	f47f af5a 	bne.w	20ef0 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   2103c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   21040:	e761      	b.n	20f06 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x32>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21042:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
   21046:	f47f af78 	bne.w	20f3a <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x66>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   2104a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   2104e:	e77f      	b.n	20f50 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x7c>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
   21054:	d197      	bne.n	20f86 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xb2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   21056:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   2105a:	e79f      	b.n	20f9c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0xc8>
  assert(exponent >= 0);
   2105c:	4b05      	ldr	r3, [pc, #20]	@ (21074 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1a0>)
   2105e:	4a06      	ldr	r2, [pc, #24]	@ (21078 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1a4>)
   21060:	4806      	ldr	r0, [pc, #24]	@ (2107c <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE+0x1a8>)
   21062:	f44f 71b3 	mov.w	r1, #358	@ 0x166
   21066:	f004 f887 	bl	25178 <__assert_func>
   2106a:	f7ff ff25 	bl	20eb8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0>
   2106e:	bf00      	nop
   21070:	c0000001 	.word	0xc0000001
   21074:	0003f834 	.word	0x0003f834
   21078:	0003f788 	.word	0x0003f788
   2107c:	0003f7e4 	.word	0x0003f7e4

00021080 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
   21080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
               0;
  }

  ~RuntimeShape() {}

  int32_t DimensionsCount() const { return size_; }
   21084:	f8d0 c000 	ldr.w	ip, [r0]
   21088:	f8d1 8000 	ldr.w	r8, [r1]
      if (__a < __b)
   2108c:	45c4      	cmp	ip, r8
   2108e:	4665      	mov	r5, ip
   21090:	b08c      	sub	sp, #48	@ 0x30
   21092:	bfb8      	it	lt
   21094:	4645      	movlt	r5, r8
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   21096:	2304      	movs	r3, #4
      : size_(new_shape_size) {
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
    const int size_increase = new_shape_size - shape.DimensionsCount();
    for (int i = 0; i < size_increase; ++i) {
   21098:	ebb5 060c 	subs.w	r6, r5, ip
                                   tflite::ArithmeticParams* params) {
   2109c:	460f      	mov	r7, r1
   2109e:	4614      	mov	r4, r2
      : size_(new_shape_size) {
   210a0:	9500      	str	r5, [sp, #0]
  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   210a2:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < size_increase; ++i) {
   210a4:	f000 810e 	beq.w	212c4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x244>
    TFLITE_DCHECK_LT(i, size_);
   210a8:	2d00      	cmp	r5, #0
   210aa:	f340 80fe 	ble.w	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   210ae:	466a      	mov	r2, sp
    for (int i = 0; i < size_increase; ++i) {
   210b0:	2300      	movs	r3, #0
    dims_[i] = val;
   210b2:	2101      	movs	r1, #1
   210b4:	e002      	b.n	210bc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x3c>
    TFLITE_DCHECK_LT(i, size_);
   210b6:	42ab      	cmp	r3, r5
   210b8:	f000 80f7 	beq.w	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    for (int i = 0; i < size_increase; ++i) {
   210bc:	3301      	adds	r3, #1
   210be:	429e      	cmp	r6, r3
    dims_[i] = val;
   210c0:	f842 1f04 	str.w	r1, [r2, #4]!
    for (int i = 0; i < size_increase; ++i) {
   210c4:	d1f7      	bne.n	210b6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x36>
      SetDim(i, pad_value);
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   210c6:	f10d 0904 	add.w	r9, sp, #4
   210ca:	ea4f 028c 	mov.w	r2, ip, lsl #2
   210ce:	1d01      	adds	r1, r0, #4
   210d0:	eb09 0086 	add.w	r0, r9, r6, lsl #2
   210d4:	f7f7 fa54 	bl	18580 <memcpy>
    for (int i = 0; i < size_increase; ++i) {
   210d8:	ebb5 0208 	subs.w	r2, r5, r8
      : size_(new_shape_size) {
   210dc:	9506      	str	r5, [sp, #24]
    for (int i = 0; i < size_increase; ++i) {
   210de:	f000 80ca 	beq.w	21276 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1f6>
   210e2:	ab06      	add	r3, sp, #24
   210e4:	2000      	movs	r0, #0
    dims_[i] = val;
   210e6:	2101      	movs	r1, #1
   210e8:	e002      	b.n	210f0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x70>
    TFLITE_DCHECK_LT(i, size_);
   210ea:	42a8      	cmp	r0, r5
   210ec:	f000 80dd 	beq.w	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    for (int i = 0; i < size_increase; ++i) {
   210f0:	3001      	adds	r0, #1
   210f2:	4290      	cmp	r0, r2
    dims_[i] = val;
   210f4:	f843 1f04 	str.w	r1, [r3, #4]!
    for (int i = 0; i < size_increase; ++i) {
   210f8:	d1f7      	bne.n	210ea <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x6a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   210fa:	ae07      	add	r6, sp, #28
   210fc:	ea4f 0288 	mov.w	r2, r8, lsl #2
   21100:	1d39      	adds	r1, r7, #4
   21102:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   21106:	f7f7 fa3b 	bl	18580 <memcpy>
    return this->size_ == comp.size_ &&
   2110a:	9f00      	ldr	r7, [sp, #0]
   2110c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   21110:	4547      	cmp	r7, r8
   21112:	f000 80bc 	beq.w	2128e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x20e>
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
    return false;
  }

  for (int i = dims_count - 1; i >= 0; --i) {
   21116:	1e6b      	subs	r3, r5, #1
    TFLITE_DCHECK_LT(i, size_);
   21118:	42bb      	cmp	r3, r7
   2111a:	f280 80c6 	bge.w	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    return dims_[i];
   2111e:	aa0c      	add	r2, sp, #48	@ 0x30
   21120:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    TFLITE_DCHECK_LT(i, size_);
   21124:	4543      	cmp	r3, r8
    return dims_[i];
   21126:	f852 1c2c 	ldr.w	r1, [r2, #-44]
    TFLITE_DCHECK_LT(i, size_);
   2112a:	f280 80be 	bge.w	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   2112e:	aa06      	add	r2, sp, #24
   21130:	00ae      	lsls	r6, r5, #2
   21132:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   21136:	469c      	mov	ip, r3
   21138:	eb0d 0585 	add.w	r5, sp, r5, lsl #2
    return dims_[i];
   2113c:	f852 0904 	ldr.w	r0, [r2], #-4
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
   21140:	4281      	cmp	r1, r0
   21142:	f000 80b4 	beq.w	212ae <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22e>
      continue;
    } else if (extended_shape0.Dims(i) == 1) {
   21146:	2901      	cmp	r1, #1
   21148:	f000 8090 	beq.w	2126c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ec>
      params->broadcast_category =
          BroadcastableOpCategory::kFirstInputBroadcastsFast;
      break;
    } else if (extended_shape1.Dims(i) == 1) {
   2114c:	2801      	cmp	r0, #1
   2114e:	f040 8089 	bne.w	21264 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
   21152:	f10d 0c18 	add.w	ip, sp, #24
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
   21156:	46ea      	mov	sl, sp
   21158:	2203      	movs	r2, #3
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
  params->broadcast_shape[0] = 1;
   2115a:	f04f 0801 	mov.w	r8, #1
   2115e:	f04f 0901 	mov.w	r9, #1
      params->broadcast_category =
   21162:	7022      	strb	r2, [r4, #0]
  params->broadcast_shape[1] = 1;
  params->broadcast_shape[2] = 1;
  params->broadcast_shape[3] = 1;
  params->broadcast_shape[4] = 1;
   21164:	2201      	movs	r2, #1
   21166:	eb0a 0706 	add.w	r7, sl, r6
  params->broadcast_shape[0] = 1;
   2116a:	e9c4 8914 	strd	r8, r9, [r4, #80]	@ 0x50
   2116e:	e9c4 8916 	strd	r8, r9, [r4, #88]	@ 0x58
    TFLITE_DCHECK_LT(i, size_);
   21172:	f8dc 1000 	ldr.w	r1, [ip]
  params->broadcast_shape[4] = 1;
   21176:	6622      	str	r2, [r4, #96]	@ 0x60
   21178:	4466      	add	r6, ip
   2117a:	e006      	b.n	2118a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x10a>
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
    params->broadcast_shape[4] *= shape_b->Dims(i);
   2117c:	6e22      	ldr	r2, [r4, #96]	@ 0x60
    --i;
   2117e:	3b01      	subs	r3, #1
    params->broadcast_shape[4] *= shape_b->Dims(i);
   21180:	fb05 f202 	mul.w	r2, r5, r2
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   21184:	1c5d      	adds	r5, r3, #1
    params->broadcast_shape[4] *= shape_b->Dims(i);
   21186:	6622      	str	r2, [r4, #96]	@ 0x60
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   21188:	d06c      	beq.n	21264 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>
   2118a:	428b      	cmp	r3, r1
   2118c:	f280 808d 	bge.w	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   21190:	f8da 2000 	ldr.w	r2, [sl]
    return dims_[i];
   21194:	f856 e904 	ldr.w	lr, [r6], #-4
    TFLITE_DCHECK_LT(i, size_);
   21198:	4293      	cmp	r3, r2
   2119a:	f280 8086 	bge.w	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    return dims_[i];
   2119e:	f857 5904 	ldr.w	r5, [r7], #-4
   211a2:	4575      	cmp	r5, lr
   211a4:	d0ea      	beq.n	2117c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xfc>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).  If it is input_b
  // that has the unit dimension, the next two loops are not entered.
  while (i >= 0 && shape_a->Dims(i) == 1) {
   211a6:	1c9e      	adds	r6, r3, #2
   211a8:	eb0a 0786 	add.w	r7, sl, r6, lsl #2
   211ac:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
   211b0:	e00a      	b.n	211c8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x148>
    TFLITE_DCHECK_LT(i, size_);
   211b2:	4293      	cmp	r3, r2
   211b4:	da79      	bge.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    params->broadcast_shape[3] *= shape_b->Dims(i);
   211b6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
   211b8:	f857 5d04 	ldr.w	r5, [r7, #-4]!
    --i;
   211bc:	3b01      	subs	r3, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   211be:	fb00 f505 	mul.w	r5, r0, r5
  while (i >= 0 && shape_a->Dims(i) == 1) {
   211c2:	1c58      	adds	r0, r3, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   211c4:	65e5      	str	r5, [r4, #92]	@ 0x5c
  while (i >= 0 && shape_a->Dims(i) == 1) {
   211c6:	d04d      	beq.n	21264 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>
   211c8:	428b      	cmp	r3, r1
   211ca:	da6e      	bge.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   211cc:	f856 5d04 	ldr.w	r5, [r6, #-4]!
   211d0:	2d01      	cmp	r5, #1
   211d2:	d0ee      	beq.n	211b2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x132>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   211d4:	f103 0e02 	add.w	lr, r3, #2
   211d8:	eb0a 078e 	add.w	r7, sl, lr, lsl #2
   211dc:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
   211e0:	e006      	b.n	211f0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x170>
    params->broadcast_shape[2] *= shape_a->Dims(i);
   211e2:	6da5      	ldr	r5, [r4, #88]	@ 0x58
    --i;
   211e4:	3b01      	subs	r3, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   211e6:	fb06 f505 	mul.w	r5, r6, r5
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   211ea:	1c5e      	adds	r6, r3, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   211ec:	65a5      	str	r5, [r4, #88]	@ 0x58
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   211ee:	d039      	beq.n	21264 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>
   211f0:	428b      	cmp	r3, r1
   211f2:	da5a      	bge.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   211f4:	4293      	cmp	r3, r2
    return dims_[i];
   211f6:	f85e 5d04 	ldr.w	r5, [lr, #-4]!
    TFLITE_DCHECK_LT(i, size_);
   211fa:	da56      	bge.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   211fc:	f857 6d04 	ldr.w	r6, [r7, #-4]!
   21200:	42ae      	cmp	r6, r5
   21202:	d0ee      	beq.n	211e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x162>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).
  while (i >= 0 && shape_b->Dims(i) == 1) {
   21204:	1c9e      	adds	r6, r3, #2
   21206:	eb0c 0786 	add.w	r7, ip, r6, lsl #2
   2120a:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
   2120e:	e00a      	b.n	21226 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1a6>
   21210:	4299      	cmp	r1, r3
   21212:	dd4a      	ble.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    params->broadcast_shape[1] *= shape_a->Dims(i);
   21214:	6d60      	ldr	r0, [r4, #84]	@ 0x54
   21216:	f857 5d04 	ldr.w	r5, [r7, #-4]!
    --i;
   2121a:	3b01      	subs	r3, #1
    params->broadcast_shape[1] *= shape_a->Dims(i);
   2121c:	fb00 f505 	mul.w	r5, r0, r5
   21220:	6565      	str	r5, [r4, #84]	@ 0x54
  while (i >= 0 && shape_b->Dims(i) == 1) {
   21222:	1c5d      	adds	r5, r3, #1
   21224:	d01e      	beq.n	21264 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>
   21226:	429a      	cmp	r2, r3
   21228:	dd3f      	ble.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   2122a:	f856 5d04 	ldr.w	r5, [r6, #-4]!
   2122e:	2d01      	cmp	r5, #1
   21230:	d0ee      	beq.n	21210 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x190>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   21232:	1c9e      	adds	r6, r3, #2
   21234:	eb0a 0786 	add.w	r7, sl, r6, lsl #2
   21238:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
   2123c:	e006      	b.n	2124c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1cc>
    params->broadcast_shape[0] *= shape_b->Dims(i);
   2123e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
    --i;
   21240:	3b01      	subs	r3, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   21242:	fb00 f505 	mul.w	r5, r0, r5
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   21246:	1c58      	adds	r0, r3, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   21248:	6525      	str	r5, [r4, #80]	@ 0x50
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   2124a:	d00b      	beq.n	21264 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e4>
   2124c:	428b      	cmp	r3, r1
   2124e:	da2c      	bge.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   21250:	4293      	cmp	r3, r2
    return dims_[i];
   21252:	f856 5d04 	ldr.w	r5, [r6, #-4]!
    TFLITE_DCHECK_LT(i, size_);
   21256:	da28      	bge.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    return dims_[i];
   21258:	f857 0d04 	ldr.w	r0, [r7, #-4]!
   2125c:	42a8      	cmp	r0, r5
   2125e:	d0ee      	beq.n	2123e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1be>
  }

  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   21260:	2304      	movs	r3, #4
   21262:	7023      	strb	r3, [r4, #0]
      return true;
   21264:	2001      	movs	r0, #1
  }
  return true;
}
   21266:	b00c      	add	sp, #48	@ 0x30
   21268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  const RuntimeShape* shape_b =
   2126c:	a806      	add	r0, sp, #24
  const RuntimeShape* shape_a =
   2126e:	46ec      	mov	ip, sp
  const RuntimeShape* shape_b =
   21270:	4682      	mov	sl, r0
   21272:	2202      	movs	r2, #2
   21274:	e771      	b.n	2115a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xda>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   21276:	ae07      	add	r6, sp, #28
   21278:	ea4f 0288 	mov.w	r2, r8, lsl #2
   2127c:	1d39      	adds	r1, r7, #4
   2127e:	4630      	mov	r0, r6
   21280:	f7f7 f97e 	bl	18580 <memcpy>
    return this->size_ == comp.size_ &&
   21284:	9f00      	ldr	r7, [sp, #0]
   21286:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2128a:	4547      	cmp	r7, r8
   2128c:	d10a      	bne.n	212a4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x224>
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
   2128e:	4631      	mov	r1, r6
   21290:	4648      	mov	r0, r9
   21292:	00ba      	lsls	r2, r7, #2
   21294:	f005 fbfa 	bl	26a8c <memcmp>
    return this->size_ == comp.size_ &&
   21298:	b920      	cbnz	r0, 212a4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x224>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   2129a:	2301      	movs	r3, #1
   2129c:	7023      	strb	r3, [r4, #0]
}
   2129e:	b00c      	add	sp, #48	@ 0x30
   212a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (int i = dims_count - 1; i >= 0; --i) {
   212a4:	1e6b      	subs	r3, r5, #1
   212a6:	f57f af37 	bpl.w	21118 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x98>
    TFLITE_DCHECK_LT(i, size_);
   212aa:	f003 ff5d 	bl	25168 <abort>
   212ae:	f1bc 0c01 	subs.w	ip, ip, #1
   212b2:	d3fa      	bcc.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    TFLITE_DCHECK_LT(i, size_);
   212b4:	45bc      	cmp	ip, r7
   212b6:	daf8      	bge.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
   212b8:	45c4      	cmp	ip, r8
    return dims_[i];
   212ba:	f855 1d04 	ldr.w	r1, [r5, #-4]!
    TFLITE_DCHECK_LT(i, size_);
   212be:	f6ff af3d 	blt.w	2113c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xbc>
   212c2:	e7f2      	b.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   212c4:	eb0d 0903 	add.w	r9, sp, r3
   212c8:	ea4f 028c 	mov.w	r2, ip, lsl #2
   212cc:	18c1      	adds	r1, r0, r3
   212ce:	4648      	mov	r0, r9
   212d0:	f7f7 f956 	bl	18580 <memcpy>
    for (int i = 0; i < size_increase; ++i) {
   212d4:	ebb5 0208 	subs.w	r2, r5, r8
      : size_(new_shape_size) {
   212d8:	9506      	str	r5, [sp, #24]
    for (int i = 0; i < size_increase; ++i) {
   212da:	d0cc      	beq.n	21276 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1f6>
    TFLITE_DCHECK_LT(i, size_);
   212dc:	2d00      	cmp	r5, #0
   212de:	f73f af00 	bgt.w	210e2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x62>
   212e2:	e7e2      	b.n	212aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22a>

000212e4 <_ZN6tflite12Register_ADDEv>:
                                                   input1, input2, output));

  return kTfLiteOk;
}

TfLiteRegistration Register_ADD() {
   212e4:	b510      	push	{r4, lr}
   212e6:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(InitAdd, PrepareAdd, EvalAdd);
   212e8:	2100      	movs	r1, #0
   212ea:	9100      	str	r1, [sp, #0]
   212ec:	4b04      	ldr	r3, [pc, #16]	@ (21300 <_ZN6tflite12Register_ADDEv+0x1c>)
   212ee:	4a05      	ldr	r2, [pc, #20]	@ (21304 <_ZN6tflite12Register_ADDEv+0x20>)
   212f0:	4905      	ldr	r1, [pc, #20]	@ (21308 <_ZN6tflite12Register_ADDEv+0x24>)
TfLiteRegistration Register_ADD() {
   212f2:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(InitAdd, PrepareAdd, EvalAdd);
   212f4:	f002 f928 	bl	23548 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   212f8:	4620      	mov	r0, r4
   212fa:	b002      	add	sp, #8
   212fc:	bd10      	pop	{r4, pc}
   212fe:	bf00      	nop
   21300:	000224e5 	.word	0x000224e5
   21304:	00020c59 	.word	0x00020c59
   21308:	00020c45 	.word	0x00020c45

0002130c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
    desc_stride *= input_shape.Dims(i);
  }
}

template <int N>
inline void NdArrayDescsForElementwiseBroadcast(
   2130c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21310:	b08d      	sub	sp, #52	@ 0x34
    const RuntimeShape& input0_shape, const RuntimeShape& input1_shape,
    NdArrayDesc<N>* desc0_out, NdArrayDesc<N>* desc1_out) {
  TFLITE_DCHECK(desc0_out != nullptr);
   21312:	2a00      	cmp	r2, #0
   21314:	f000 8081 	beq.w	2141a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
   21318:	461d      	mov	r5, r3
  TFLITE_DCHECK(desc1_out != nullptr);
   2131a:	2b00      	cmp	r3, #0
   2131c:	d07d      	beq.n	2141a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
   2131e:	4614      	mov	r4, r2
  int32_t DimensionsCount() const { return size_; }
   21320:	6802      	ldr	r2, [r0, #0]
      : size_(new_shape_size) {
   21322:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21324:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   21326:	9300      	str	r3, [sp, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21328:	dc77      	bgt.n	2141a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    for (int i = 0; i < size_increase; ++i) {
   2132a:	1a9b      	subs	r3, r3, r2
   2132c:	460e      	mov	r6, r1
   2132e:	d00d      	beq.n	2134c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x40>
   21330:	46ee      	mov	lr, sp
   21332:	f04f 0c00 	mov.w	ip, #0
    dims_[i] = val;
   21336:	2701      	movs	r7, #1
   21338:	e002      	b.n	21340 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x34>
    TFLITE_DCHECK_LT(i, size_);
   2133a:	f1bc 0f04 	cmp.w	ip, #4
   2133e:	d06c      	beq.n	2141a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    for (int i = 0; i < size_increase; ++i) {
   21340:	f10c 0c01 	add.w	ip, ip, #1
   21344:	4563      	cmp	r3, ip
    dims_[i] = val;
   21346:	f84e 7f04 	str.w	r7, [lr, #4]!
    for (int i = 0; i < size_increase; ++i) {
   2134a:	d1f6      	bne.n	2133a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x2e>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   2134c:	1d01      	adds	r1, r0, #4
   2134e:	a801      	add	r0, sp, #4
   21350:	0092      	lsls	r2, r2, #2
   21352:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   21356:	f7f7 f913 	bl	18580 <memcpy>
  int32_t DimensionsCount() const { return size_; }
   2135a:	6832      	ldr	r2, [r6, #0]
      : size_(new_shape_size) {
   2135c:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2135e:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   21360:	9306      	str	r3, [sp, #24]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21362:	dc5a      	bgt.n	2141a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    for (int i = 0; i < size_increase; ++i) {
   21364:	f1d2 0004 	rsbs	r0, r2, #4
   21368:	d00e      	beq.n	21388 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x7c>
   2136a:	f10d 0e18 	add.w	lr, sp, #24
   2136e:	f04f 0c00 	mov.w	ip, #0
    dims_[i] = val;
   21372:	2301      	movs	r3, #1
   21374:	e002      	b.n	2137c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x70>
    TFLITE_DCHECK_LT(i, size_);
   21376:	f1bc 0f04 	cmp.w	ip, #4
   2137a:	d04e      	beq.n	2141a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    for (int i = 0; i < size_increase; ++i) {
   2137c:	f10c 0c01 	add.w	ip, ip, #1
   21380:	4560      	cmp	r0, ip
    dims_[i] = val;
   21382:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (int i = 0; i < size_increase; ++i) {
   21386:	d1f6      	bne.n	21376 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x6a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   21388:	ab07      	add	r3, sp, #28
   2138a:	1d31      	adds	r1, r6, #4
   2138c:	0092      	lsls	r2, r2, #2
   2138e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21392:	f7f7 f8f5 	bl	18580 <memcpy>
  for (int i = N - 1; i >= 0; --i) {
   21396:	f104 0c10 	add.w	ip, r4, #16
    TFLITE_DCHECK_LT(i, size_);
   2139a:	9e00      	ldr	r6, [sp, #0]
   2139c:	f10d 0e14 	add.w	lr, sp, #20
   213a0:	4662      	mov	r2, ip
  int desc_stride = 1;
   213a2:	2301      	movs	r3, #1
  for (int i = N - 1; i >= 0; --i) {
   213a4:	2103      	movs	r1, #3
   213a6:	42b1      	cmp	r1, r6
   213a8:	da37      	bge.n	2141a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    return dims_[i];
   213aa:	f85e 0d04 	ldr.w	r0, [lr, #-4]!
    desc_out->extents[i] = input_shape.Dims(i);
   213ae:	f842 0d04 	str.w	r0, [r2, #-4]!
  for (int i = N - 1; i >= 0; --i) {
   213b2:	3901      	subs	r1, #1
   213b4:	1c4f      	adds	r7, r1, #1
    desc_out->strides[i] = desc_stride;
   213b6:	6113      	str	r3, [r2, #16]
    desc_stride *= input_shape.Dims(i);
   213b8:	fb00 f303 	mul.w	r3, r0, r3
  for (int i = N - 1; i >= 0; --i) {
   213bc:	d1f3      	bne.n	213a6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x9a>
   213be:	f105 0e10 	add.w	lr, r5, #16
    TFLITE_DCHECK_LT(i, size_);
   213c2:	9f06      	ldr	r7, [sp, #24]
   213c4:	f10d 082c 	add.w	r8, sp, #44	@ 0x2c
   213c8:	4672      	mov	r2, lr
  int desc_stride = 1;
   213ca:	2301      	movs	r3, #1
  for (int i = N - 1; i >= 0; --i) {
   213cc:	2103      	movs	r1, #3
   213ce:	42b9      	cmp	r1, r7
   213d0:	da23      	bge.n	2141a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    return dims_[i];
   213d2:	f858 0d04 	ldr.w	r0, [r8, #-4]!
    desc_out->extents[i] = input_shape.Dims(i);
   213d6:	f842 0d04 	str.w	r0, [r2, #-4]!
  for (int i = N - 1; i >= 0; --i) {
   213da:	3901      	subs	r1, #1
    desc_out->strides[i] = desc_stride;
   213dc:	6113      	str	r3, [r2, #16]
    desc_stride *= input_shape.Dims(i);
   213de:	fb00 f303 	mul.w	r3, r0, r3
  for (int i = N - 1; i >= 0; --i) {
   213e2:	1c48      	adds	r0, r1, #1
   213e4:	d1f3      	bne.n	213ce <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xc2>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
   213e6:	2100      	movs	r1, #0
   213e8:	f10d 0818 	add.w	r8, sp, #24
   213ec:	4668      	mov	r0, sp
      if (extent0 == 1) {
        desc0_out->strides[i] = 0;
        desc0_out->extents[i] = extent1;
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
        desc1_out->strides[i] = 0;
   213ee:	4689      	mov	r9, r1
    TFLITE_DCHECK_LT(i, size_);
   213f0:	428f      	cmp	r7, r1
    return dims_[i];
   213f2:	f850 3f04 	ldr.w	r3, [r0, #4]!
    TFLITE_DCHECK_LT(i, size_);
   213f6:	d010      	beq.n	2141a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
    return dims_[i];
   213f8:	f858 2f04 	ldr.w	r2, [r8, #4]!
    if (extent0 != extent1) {
   213fc:	429a      	cmp	r2, r3
   213fe:	d007      	beq.n	21410 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x104>
      if (extent0 == 1) {
   21400:	2b01      	cmp	r3, #1
   21402:	d00c      	beq.n	2141e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x112>
        TFLITE_DCHECK_EQ(extent1, 1);
   21404:	2a01      	cmp	r2, #1
   21406:	d108      	bne.n	2141a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10e>
        desc1_out->strides[i] = 0;
   21408:	f84e 9021 	str.w	r9, [lr, r1, lsl #2]
        desc1_out->extents[i] = extent0;
   2140c:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
  for (int i = 0; i < N; ++i) {
   21410:	3101      	adds	r1, #1
   21412:	2904      	cmp	r1, #4
   21414:	d00a      	beq.n	2142c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x120>
    TFLITE_DCHECK_LT(i, size_);
   21416:	42b1      	cmp	r1, r6
   21418:	d1ea      	bne.n	213f0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe4>
  TFLITE_DCHECK(desc0_out != nullptr);
   2141a:	f003 fea5 	bl	25168 <abort>
        desc0_out->strides[i] = 0;
   2141e:	f84c 9021 	str.w	r9, [ip, r1, lsl #2]
        desc0_out->extents[i] = extent1;
   21422:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
  for (int i = 0; i < N; ++i) {
   21426:	3101      	adds	r1, #1
   21428:	2904      	cmp	r1, #4
   2142a:	d1f4      	bne.n	21416 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x10a>
      }
    }
  }
}
   2142c:	b00d      	add	sp, #52	@ 0x34
   2142e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21432:	bf00      	nop

00021434 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
void EvalAddFloat(TfLiteContext* context, TfLiteNode* node,
   21434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21438:	ed2d 8b02 	vpush	{d8}
  SetActivationParams(data->output_activation_min_f32,
   2143c:	ed90 8a0d 	vldr	s16, [r0, #52]	@ 0x34
                      data->output_activation_max_f32, &op_params);
   21440:	edd0 8a0e 	vldr	s17, [r0, #56]	@ 0x38
  if (data->requires_broadcast) {
   21444:	7800      	ldrb	r0, [r0, #0]
void EvalAddFloat(TfLiteContext* context, TfLiteNode* node,
   21446:	b0d9      	sub	sp, #356	@ 0x164
   21448:	460e      	mov	r6, r1
   2144a:	4615      	mov	r5, r2
   2144c:	461c      	mov	r4, r3
  if (data->requires_broadcast) {
   2144e:	2800      	cmp	r0, #0
   21450:	f000 8114 	beq.w	2167c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x248>
        op_params, tflite::micro::GetTensorShape(input1),
   21454:	a83c      	add	r0, sp, #240	@ 0xf0
   21456:	f002 f8a9 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
   2145a:	2e00      	cmp	r6, #0
   2145c:	f000 8183 	beq.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  return reinterpret_cast<const T*>(tensor->data.raw);
   21460:	6833      	ldr	r3, [r6, #0]
   21462:	9312      	str	r3, [sp, #72]	@ 0x48
        tflite::micro::GetTensorShape(input2),
   21464:	4629      	mov	r1, r5
   21466:	a836      	add	r0, sp, #216	@ 0xd8
   21468:	f002 f8a0 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2146c:	2d00      	cmp	r5, #0
   2146e:	f000 817a 	beq.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  return reinterpret_cast<const T*>(tensor->data.raw);
   21472:	682b      	ldr	r3, [r5, #0]
   21474:	9313      	str	r3, [sp, #76]	@ 0x4c
        tflite::micro::GetTensorShape(output),
   21476:	4621      	mov	r1, r4
   21478:	a830      	add	r0, sp, #192	@ 0xc0
   2147a:	f002 f897 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2147e:	2c00      	cmp	r4, #0
   21480:	f000 8171 	beq.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  return reinterpret_cast<T*>(tensor->data.raw);
   21484:	6823      	ldr	r3, [r4, #0]
   21486:	9314      	str	r3, [sp, #80]	@ 0x50
                   const RuntimeShape& input1_shape, const T* input1_data,
                   const RuntimeShape& input2_shape, const T* input2_data,
                   const RuntimeShape& output_shape, T* output_data) {
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   21488:	aa48      	add	r2, sp, #288	@ 0x120
   2148a:	ab50      	add	r3, sp, #320	@ 0x140
   2148c:	a936      	add	r1, sp, #216	@ 0xd8
   2148e:	a83c      	add	r0, sp, #240	@ 0xf0
   21490:	f7ff ff3c 	bl	2130c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32_t DimensionsCount() const { return size_; }
   21494:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
      : size_(new_shape_size) {
   21496:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21498:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   2149a:	9342      	str	r3, [sp, #264]	@ 0x108
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2149c:	f300 8163 	bgt.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
    for (int i = 0; i < size_increase; ++i) {
   214a0:	1a98      	subs	r0, r3, r2
   214a2:	d00b      	beq.n	214bc <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x88>
   214a4:	a942      	add	r1, sp, #264	@ 0x108
   214a6:	2300      	movs	r3, #0
    dims_[i] = val;
   214a8:	2401      	movs	r4, #1
   214aa:	e002      	b.n	214b2 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x7e>
    TFLITE_DCHECK_LT(i, size_);
   214ac:	2b04      	cmp	r3, #4
   214ae:	f000 815a 	beq.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
    for (int i = 0; i < size_increase; ++i) {
   214b2:	3301      	adds	r3, #1
   214b4:	4298      	cmp	r0, r3
    dims_[i] = val;
   214b6:	f841 4f04 	str.w	r4, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   214ba:	d1f7      	bne.n	214ac <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x78>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   214bc:	ab43      	add	r3, sp, #268	@ 0x10c
   214be:	0092      	lsls	r2, r2, #2
   214c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   214c4:	a931      	add	r1, sp, #196	@ 0xc4
   214c6:	f7f7 f85b 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   214ca:	9d42      	ldr	r5, [sp, #264]	@ 0x108
   214cc:	2d00      	cmp	r5, #0
   214ce:	f340 814a 	ble.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
   214d2:	9a57      	ldr	r2, [sp, #348]	@ 0x15c
    return dims_[i];
   214d4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
   214d6:	9845      	ldr	r0, [sp, #276]	@ 0x114
   214d8:	931a      	str	r3, [sp, #104]	@ 0x68
   214da:	ea4f 0a82 	mov.w	sl, r2, lsl #2
   214de:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   214e0:	9a4f      	ldr	r2, [sp, #316]	@ 0x13c
   214e2:	f8dd 9118 	ldr.w	r9, [sp, #280]	@ 0x118
   214e6:	f8dd 814c 	ldr.w	r8, [sp, #332]	@ 0x14c
   214ea:	9007      	str	r0, [sp, #28]
   214ec:	ea4f 0b82 	mov.w	fp, r2, lsl #2
   214f0:	fb00 f203 	mul.w	r2, r0, r3
   214f4:	fb09 fc02 	mul.w	ip, r9, r2
   214f8:	9a48      	ldr	r2, [sp, #288]	@ 0x120
   214fa:	9202      	str	r2, [sp, #8]
   214fc:	9a49      	ldr	r2, [sp, #292]	@ 0x124
   214fe:	9203      	str	r2, [sp, #12]
   21500:	9a4a      	ldr	r2, [sp, #296]	@ 0x128
   21502:	9204      	str	r2, [sp, #16]
   21504:	9a4b      	ldr	r2, [sp, #300]	@ 0x12c
   21506:	9205      	str	r2, [sp, #20]
   21508:	9a4d      	ldr	r2, [sp, #308]	@ 0x134
   2150a:	9208      	str	r2, [sp, #32]
   2150c:	9a4e      	ldr	r2, [sp, #312]	@ 0x138
   2150e:	9215      	str	r2, [sp, #84]	@ 0x54
   21510:	9a50      	ldr	r2, [sp, #320]	@ 0x140
   21512:	9206      	str	r2, [sp, #24]
   21514:	9a55      	ldr	r2, [sp, #340]	@ 0x154
   21516:	9209      	str	r2, [sp, #36]	@ 0x24
   21518:	9a56      	ldr	r2, [sp, #344]	@ 0x158
   2151a:	9216      	str	r2, [sp, #88]	@ 0x58
   2151c:	2100      	movs	r1, #0
   2151e:	9a54      	ldr	r2, [sp, #336]	@ 0x150
   21520:	9119      	str	r1, [sp, #100]	@ 0x64
   21522:	e9dd 7651 	ldrd	r7, r6, [sp, #324]	@ 0x144
   21526:	921b      	str	r2, [sp, #108]	@ 0x6c
   21528:	9a4c      	ldr	r2, [sp, #304]	@ 0x130
   2152a:	921c      	str	r2, [sp, #112]	@ 0x70
   2152c:	fb09 f200 	mul.w	r2, r9, r0
   21530:	920a      	str	r2, [sp, #40]	@ 0x28
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   21532:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   21534:	468e      	mov	lr, r1
   21536:	4572      	cmp	r2, lr
   21538:	4664      	mov	r4, ip
   2153a:	e9cd 1117 	strd	r1, r1, [sp, #92]	@ 0x5c
   2153e:	46bc      	mov	ip, r7
   21540:	465f      	mov	r7, fp
   21542:	46b3      	mov	fp, r6
   21544:	f340 8095 	ble.w	21672 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x23e>
    TFLITE_DCHECK_LT(i, size_);
   21548:	2d01      	cmp	r5, #1
   2154a:	f000 810c 	beq.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2154e:	2b00      	cmp	r3, #0
   21550:	dd7e      	ble.n	21650 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x21c>
   21552:	2d02      	cmp	r5, #2
   21554:	f000 8107 	beq.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
   21558:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
   2155c:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
   2155e:	941d      	str	r4, [sp, #116]	@ 0x74
   21560:	2000      	movs	r0, #0
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   21562:	9c07      	ldr	r4, [sp, #28]
   21564:	2c00      	cmp	r4, #0
   21566:	dd69      	ble.n	2163c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x208>
   21568:	2d03      	cmp	r5, #3
   2156a:	f000 80fc 	beq.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
   2156e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
   21572:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
   21576:	e9cd 160d 	strd	r1, r6, [sp, #52]	@ 0x34
   2157a:	9611      	str	r6, [sp, #68]	@ 0x44
   2157c:	2400      	movs	r4, #0
   2157e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   21580:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   21582:	eb03 0682 	add.w	r6, r3, r2, lsl #2
   21586:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   21588:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   2158a:	9601      	str	r6, [sp, #4]
   2158c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   21590:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   21592:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   21594:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21598:	2300      	movs	r3, #0
   2159a:	e03a      	b.n	21612 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1de>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   2159c:	9e02      	ldr	r6, [sp, #8]
   2159e:	4576      	cmp	r6, lr
   215a0:	f340 80e1 	ble.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   215a4:	9e03      	ldr	r6, [sp, #12]
   215a6:	4286      	cmp	r6, r0
   215a8:	f340 80dd 	ble.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   215ac:	9e04      	ldr	r6, [sp, #16]
   215ae:	42a6      	cmp	r6, r4
   215b0:	f340 80d9 	ble.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   215b4:	9e05      	ldr	r6, [sp, #20]
   215b6:	429e      	cmp	r6, r3
   215b8:	f340 80d5 	ble.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   215bc:	9e06      	ldr	r6, [sp, #24]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax<T>(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   215be:	edd2 7a00 	vldr	s15, [r2]
   215c2:	4576      	cmp	r6, lr
   215c4:	f340 80cf 	ble.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   215c8:	4584      	cmp	ip, r0
   215ca:	f340 80cc 	ble.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   215ce:	45a3      	cmp	fp, r4
   215d0:	f340 80c9 	ble.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   215d4:	4598      	cmp	r8, r3
   215d6:	f340 80c6 	ble.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
              ActivationFunctionWithMinMax<T>(
   215da:	ed91 7a00 	vldr	s14, [r1]
   215de:	ee77 7a87 	vadd.f32	s15, s15, s14
// allow that as long as the corresponding index is also 0. It is upto the
// calling ops to ensure that they perform verification checks on tensor shapes
// if they don't support a particular behavior.

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   215e2:	443a      	add	r2, r7
   215e4:	eef4 7ac8 	vcmpe.f32	s15, s16
   215e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   215ec:	bfb8      	it	lt
   215ee:	eef0 7a48 	vmovlt.f32	s15, s16
      if (__b < __a)
   215f2:	eef4 7ae8 	vcmpe.f32	s15, s17
   215f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   215fa:	bf88      	it	hi
   215fc:	eef0 7a68 	vmovhi.f32	s15, s17
   21600:	2d04      	cmp	r5, #4
   21602:	4451      	add	r1, sl
   21604:	f040 80af 	bne.w	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   21608:	9e01      	ldr	r6, [sp, #4]
   2160a:	ece6 7a01 	vstmia	r6!, {s15}
   2160e:	9601      	str	r6, [sp, #4]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21610:	3301      	adds	r3, #1
   21612:	4599      	cmp	r9, r3
   21614:	dcc2      	bgt.n	2159c <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x168>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   21616:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   21618:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   2161a:	444b      	add	r3, r9
   2161c:	9311      	str	r3, [sp, #68]	@ 0x44
   2161e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   21620:	4413      	add	r3, r2
   21622:	9310      	str	r3, [sp, #64]	@ 0x40
   21624:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   21626:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   21628:	4413      	add	r3, r2
   2162a:	930f      	str	r3, [sp, #60]	@ 0x3c
   2162c:	9b07      	ldr	r3, [sp, #28]
   2162e:	3401      	adds	r4, #1
   21630:	429c      	cmp	r4, r3
   21632:	dba4      	blt.n	2157e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x14a>
   21634:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	@ 0x2c
   21638:	e9dd 160d 	ldrd	r1, r6, [sp, #52]	@ 0x34
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2163c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
   2163e:	4426      	add	r6, r4
   21640:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   21642:	3001      	adds	r0, #1
    TFLITE_DCHECK_LT(i, size_);
   21644:	4421      	add	r1, r4
   21646:	9c08      	ldr	r4, [sp, #32]
   21648:	4298      	cmp	r0, r3
   2164a:	4422      	add	r2, r4
   2164c:	db89      	blt.n	21562 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x12e>
   2164e:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   21650:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   21652:	991b      	ldr	r1, [sp, #108]	@ 0x6c
   21654:	4422      	add	r2, r4
   21656:	9217      	str	r2, [sp, #92]	@ 0x5c
   21658:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   2165a:	440a      	add	r2, r1
   2165c:	9218      	str	r2, [sp, #96]	@ 0x60
   2165e:	991c      	ldr	r1, [sp, #112]	@ 0x70
   21660:	9a19      	ldr	r2, [sp, #100]	@ 0x64
   21662:	440a      	add	r2, r1
   21664:	9219      	str	r2, [sp, #100]	@ 0x64
   21666:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
   21668:	f10e 0e01 	add.w	lr, lr, #1
   2166c:	4572      	cmp	r2, lr
   2166e:	f73f af6b 	bgt.w	21548 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x114>
}
   21672:	b059      	add	sp, #356	@ 0x164
   21674:	ecbd 8b02 	vpop	{d8}
   21678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   2167c:	a82a      	add	r0, sp, #168	@ 0xa8
   2167e:	f001 ff95 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   21682:	2e00      	cmp	r6, #0
   21684:	d06f      	beq.n	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
                       tflite::micro::GetTensorShape(input2),
   21686:	4629      	mov	r1, r5
   21688:	a824      	add	r0, sp, #144	@ 0x90
  return reinterpret_cast<const T*>(tensor->data.raw);
   2168a:	6836      	ldr	r6, [r6, #0]
   2168c:	f001 ff8e 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   21690:	2d00      	cmp	r5, #0
   21692:	d068      	beq.n	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
                       tflite::micro::GetTensorShape(output),
   21694:	4621      	mov	r1, r4
   21696:	a81e      	add	r0, sp, #120	@ 0x78
  return reinterpret_cast<const T*>(tensor->data.raw);
   21698:	682d      	ldr	r5, [r5, #0]
   2169a:	f001 ff87 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2169e:	2c00      	cmp	r4, #0
   216a0:	d061      	beq.n	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
    for (int i = 0; i < size_; i++) {
   216a2:	992a      	ldr	r1, [sp, #168]	@ 0xa8
  return reinterpret_cast<T*>(tensor->data.raw);
   216a4:	6827      	ldr	r7, [r4, #0]
   216a6:	2900      	cmp	r1, #0
   216a8:	dd4c      	ble.n	21744 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x310>
   216aa:	aa2a      	add	r2, sp, #168	@ 0xa8
   216ac:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int buffer_size = 1;
   216b0:	2301      	movs	r3, #1
      buffer_size *= dims_data[i];
   216b2:	f852 0f04 	ldr.w	r0, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   216b6:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
   216b8:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
   216bc:	d1f9      	bne.n	216b2 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x27e>
   216be:	9924      	ldr	r1, [sp, #144]	@ 0x90
   216c0:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
   216c2:	2900      	cmp	r1, #0
   216c4:	dd47      	ble.n	21756 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x322>
   216c6:	aa24      	add	r2, sp, #144	@ 0x90
   216c8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int buffer_size = 1;
   216cc:	2001      	movs	r0, #1
      buffer_size *= dims_data[i];
   216ce:	f852 cf04 	ldr.w	ip, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   216d2:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
   216d4:	fb0c f000 	mul.w	r0, ip, r0
    for (int i = 0; i < size_; i++) {
   216d8:	d1f9      	bne.n	216ce <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x29a>
   216da:	2c00      	cmp	r4, #0
   216dc:	dd3f      	ble.n	2175e <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32a>
   216de:	aa1e      	add	r2, sp, #120	@ 0x78
    int buffer_size = 1;
   216e0:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   216e2:	f04f 0c00 	mov.w	ip, #0
      buffer_size *= dims_data[i];
   216e6:	f852 ef04 	ldr.w	lr, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   216ea:	f10c 0c01 	add.w	ip, ip, #1
   216ee:	45a4      	cmp	ip, r4
      buffer_size *= dims_data[i];
   216f0:	fb0e f101 	mul.w	r1, lr, r1
    for (int i = 0; i < size_; i++) {
   216f4:	dbf7      	blt.n	216e6 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2b2>
                                const RuntimeShape& check_shape_0,
                                const RuntimeShape& check_shape_1) {
  const int size_1 = shape.FlatSize();
  const int size_2 = check_shape_0.FlatSize();
  const int size_3 = check_shape_1.FlatSize();
  TFLITE_CHECK_EQ(size_1, size_2);
   216f6:	4298      	cmp	r0, r3
   216f8:	d135      	bne.n	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  TFLITE_CHECK_EQ(size_2, size_3);
   216fa:	428b      	cmp	r3, r1
   216fc:	d133      	bne.n	21766 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x332>
  for (int i = 0; i < flat_size; ++i) {
   216fe:	2b00      	cmp	r3, #0
   21700:	ddb7      	ble.n	21672 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x23e>
   21702:	4632      	mov	r2, r6
   21704:	4639      	mov	r1, r7
   21706:	eb06 0383 	add.w	r3, r6, r3, lsl #2
        input1_data[i] + input2_data[i], activation_min, activation_max);
   2170a:	ecf2 7a01 	vldmia	r2!, {s15}
   2170e:	ecb5 7a01 	vldmia	r5!, {s14}
    output_data[i] = ActivationFunctionWithMinMax(
   21712:	ee77 7a87 	vadd.f32	s15, s15, s14
      if (__a < __b)
   21716:	eef4 7ac8 	vcmpe.f32	s15, s16
   2171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2171e:	bfb8      	it	lt
   21720:	eef0 7a48 	vmovlt.f32	s15, s16
      if (__b < __a)
   21724:	eef4 7ae8 	vcmpe.f32	s15, s17
   21728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2172c:	bf88      	it	hi
   2172e:	eef0 7a68 	vmovhi.f32	s15, s17
  for (int i = 0; i < flat_size; ++i) {
   21732:	429a      	cmp	r2, r3
    output_data[i] = ActivationFunctionWithMinMax(
   21734:	ece1 7a01 	vstmia	r1!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   21738:	d1e7      	bne.n	2170a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2d6>
}
   2173a:	b059      	add	sp, #356	@ 0x164
   2173c:	ecbd 8b02 	vpop	{d8}
   21740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21744:	9924      	ldr	r1, [sp, #144]	@ 0x90
   21746:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
   21748:	2900      	cmp	r1, #0
    int buffer_size = 1;
   2174a:	f04f 0301 	mov.w	r3, #1
    for (int i = 0; i < size_; i++) {
   2174e:	dcba      	bgt.n	216c6 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x292>
   21750:	2c00      	cmp	r4, #0
   21752:	dc02      	bgt.n	2175a <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x326>
   21754:	e7d5      	b.n	21702 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ce>
   21756:	2c00      	cmp	r4, #0
   21758:	dd03      	ble.n	21762 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32e>
    int buffer_size = 1;
   2175a:	2001      	movs	r0, #1
   2175c:	e7bf      	b.n	216de <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2aa>
   2175e:	2101      	movs	r1, #1
   21760:	e7c9      	b.n	216f6 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2c2>
  TFLITE_CHECK_EQ(size_1, size_2);
   21762:	2b01      	cmp	r3, #1
   21764:	d0cd      	beq.n	21702 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ce>
  TFLITE_DCHECK(tensor != nullptr);
   21766:	f003 fcff 	bl	25168 <abort>
   2176a:	bf00      	nop

0002176c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
TfLiteStatus EvalAddQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   2176c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21770:	f5ad 7d03 	sub.w	sp, sp, #524	@ 0x20c
   21774:	461d      	mov	r5, r3
  op_params->left_shift = data->left_shift;
   21776:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   21778:	930f      	str	r3, [sp, #60]	@ 0x3c
   2177a:	936e      	str	r3, [sp, #440]	@ 0x1b8
  op_params->input1_offset = data->input1_offset;
   2177c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
   2177e:	9310      	str	r3, [sp, #64]	@ 0x40
   21780:	9369      	str	r3, [sp, #420]	@ 0x1a4
  op_params->input1_multiplier = data->input1_multiplier;
   21782:	6943      	ldr	r3, [r0, #20]
   21784:	9311      	str	r3, [sp, #68]	@ 0x44
   21786:	936f      	str	r3, [sp, #444]	@ 0x1bc
  op_params->input2_offset = data->input2_offset;
   21788:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
   2178a:	9312      	str	r3, [sp, #72]	@ 0x48
  SetActivationParams(data->output_activation_min, data->output_activation_max,
   2178c:	e9d0 ab03 	ldrd	sl, fp, [r0, #12]
  op_params->input2_offset = data->input2_offset;
   21790:	936a      	str	r3, [sp, #424]	@ 0x1a8
  op_params->input2_multiplier = data->input2_multiplier;
   21792:	6983      	ldr	r3, [r0, #24]
   21794:	9313      	str	r3, [sp, #76]	@ 0x4c
   21796:	9371      	str	r3, [sp, #452]	@ 0x1c4
  op_params->input2_shift = data->input2_shift;
   21798:	6883      	ldr	r3, [r0, #8]
  op_params->input1_shift = data->input1_shift;
   2179a:	6846      	ldr	r6, [r0, #4]
  op_params->output_offset = data->output_offset;
   2179c:	6b07      	ldr	r7, [r0, #48]	@ 0x30
  op_params->output_shift = data->output_shift;
   2179e:	f8d0 9020 	ldr.w	r9, [r0, #32]
  op_params->input2_shift = data->input2_shift;
   217a2:	9314      	str	r3, [sp, #80]	@ 0x50
TfLiteStatus EvalAddQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   217a4:	4614      	mov	r4, r2
  op_params->input2_shift = data->input2_shift;
   217a6:	9372      	str	r3, [sp, #456]	@ 0x1c8
  op_params->output_multiplier = data->output_multiplier;
   217a8:	69c3      	ldr	r3, [r0, #28]
   217aa:	9315      	str	r3, [sp, #84]	@ 0x54
      tflite::micro::GetTensorShape(input1),
   217ac:	a860      	add	r0, sp, #384	@ 0x180
TfLiteStatus EvalAddQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
   217ae:	4688      	mov	r8, r1
  op_params->output_multiplier = data->output_multiplier;
   217b0:	936c      	str	r3, [sp, #432]	@ 0x1b0
}

template <typename P>
inline void SetActivationParams(int32_t min, int32_t max, P* params) {
  params->quantized_activation_min = min;
  params->quantized_activation_max = max;
   217b2:	e9cd ab73 	strd	sl, fp, [sp, #460]	@ 0x1cc
  op_params->input1_shift = data->input1_shift;
   217b6:	9670      	str	r6, [sp, #448]	@ 0x1c0
  op_params->output_offset = data->output_offset;
   217b8:	976b      	str	r7, [sp, #428]	@ 0x1ac
  op_params->output_shift = data->output_shift;
   217ba:	f8cd 91b4 	str.w	r9, [sp, #436]	@ 0x1b4
      tflite::micro::GetTensorShape(input1),
   217be:	f001 fef5 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
   217c2:	4621      	mov	r1, r4
   217c4:	a858      	add	r0, sp, #352	@ 0x160
   217c6:	f001 fef1 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   217ca:	aa68      	add	r2, sp, #416	@ 0x1a0
   217cc:	a958      	add	r1, sp, #352	@ 0x160
   217ce:	a860      	add	r0, sp, #384	@ 0x180
   217d0:	f7ff fc56 	bl	21080 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
  if (need_broadcast) {
   217d4:	2800      	cmp	r0, #0
   217d6:	d16b      	bne.n	218b0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x144>
   217d8:	f1b8 0f00 	cmp.w	r8, #0
   217dc:	f000 8177 	beq.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  return reinterpret_cast<const T*>(tensor->data.raw);
   217e0:	f8d8 3000 	ldr.w	r3, [r8]
   217e4:	930d      	str	r3, [sp, #52]	@ 0x34
  TFLITE_DCHECK(tensor != nullptr);
   217e6:	2c00      	cmp	r4, #0
   217e8:	f000 8171 	beq.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  return reinterpret_cast<const T*>(tensor->data.raw);
   217ec:	6823      	ldr	r3, [r4, #0]
   217ee:	930e      	str	r3, [sp, #56]	@ 0x38
  TFLITE_DCHECK(tensor != nullptr);
   217f0:	2d00      	cmp	r5, #0
   217f2:	f000 816c 	beq.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  return reinterpret_cast<T*>(tensor->data.raw);
   217f6:	682b      	ldr	r3, [r5, #0]
        MatchingElementsSize(tflite::micro::GetTensorShape(input1),
   217f8:	4641      	mov	r1, r8
   217fa:	a83a      	add	r0, sp, #232	@ 0xe8
   217fc:	4698      	mov	r8, r3
   217fe:	f001 fed5 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(input2),
   21802:	4621      	mov	r1, r4
   21804:	a834      	add	r0, sp, #208	@ 0xd0
   21806:	f001 fed1 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output)));
   2180a:	4629      	mov	r1, r5
   2180c:	a82e      	add	r0, sp, #184	@ 0xb8
   2180e:	f001 fecd 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    for (int i = 0; i < size_; i++) {
   21812:	993a      	ldr	r1, [sp, #232]	@ 0xe8
   21814:	2900      	cmp	r1, #0
   21816:	f340 8147 	ble.w	21aa8 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x33c>
   2181a:	aa3a      	add	r2, sp, #232	@ 0xe8
   2181c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int buffer_size = 1;
   21820:	2301      	movs	r3, #1
      buffer_size *= dims_data[i];
   21822:	f852 0f04 	ldr.w	r0, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   21826:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
   21828:	fb00 f303 	mul.w	r3, r0, r3
    for (int i = 0; i < size_; i++) {
   2182c:	d1f9      	bne.n	21822 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb6>
   2182e:	9834      	ldr	r0, [sp, #208]	@ 0xd0
   21830:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   21832:	2800      	cmp	r0, #0
   21834:	f340 8142 	ble.w	21abc <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x350>
   21838:	aa34      	add	r2, sp, #208	@ 0xd0
   2183a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    int buffer_size = 1;
   2183e:	2101      	movs	r1, #1
      buffer_size *= dims_data[i];
   21840:	f852 4f04 	ldr.w	r4, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   21844:	4282      	cmp	r2, r0
      buffer_size *= dims_data[i];
   21846:	fb04 f101 	mul.w	r1, r4, r1
    for (int i = 0; i < size_; i++) {
   2184a:	d1f9      	bne.n	21840 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xd4>
   2184c:	2d00      	cmp	r5, #0
   2184e:	f340 8139 	ble.w	21ac4 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x358>
   21852:	aa2e      	add	r2, sp, #184	@ 0xb8
    int buffer_size = 1;
   21854:	2401      	movs	r4, #1
    for (int i = 0; i < size_; i++) {
   21856:	2000      	movs	r0, #0
   21858:	469c      	mov	ip, r3
      buffer_size *= dims_data[i];
   2185a:	f852 3f04 	ldr.w	r3, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   2185e:	3001      	adds	r0, #1
   21860:	42a8      	cmp	r0, r5
      buffer_size *= dims_data[i];
   21862:	fb03 f404 	mul.w	r4, r3, r4
    for (int i = 0; i < size_; i++) {
   21866:	dbf8      	blt.n	2185a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xee>
   21868:	4663      	mov	r3, ip
  TFLITE_CHECK_EQ(size_1, size_2);
   2186a:	4299      	cmp	r1, r3
   2186c:	f040 812f 	bne.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_CHECK_EQ(size_2, size_3);
   21870:	42a3      	cmp	r3, r4
   21872:	f040 812c 	bne.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
    arm_elementwise_add_s8(
   21876:	e9cd b30a 	strd	fp, r3, [sp, #40]	@ 0x28
   2187a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   2187c:	f8cd 8014 	str.w	r8, [sp, #20]
   21880:	e9cd 7306 	strd	r7, r3, [sp, #24]
   21884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   21886:	9304      	str	r3, [sp, #16]
   21888:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   2188a:	9303      	str	r3, [sp, #12]
   2188c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   2188e:	9302      	str	r3, [sp, #8]
   21890:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   21892:	e9cd 9a08 	strd	r9, sl, [sp, #32]
   21896:	e9cd 6300 	strd	r6, r3, [sp]
   2189a:	e9dd 010d 	ldrd	r0, r1, [sp, #52]	@ 0x34
   2189e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
   218a2:	f7f8 f90d 	bl	19ac0 <arm_elementwise_add_s8>
}
   218a6:	2000      	movs	r0, #0
   218a8:	f50d 7d03 	add.w	sp, sp, #524	@ 0x20c
   218ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        op_params, tflite::micro::GetTensorShape(input1),
   218b0:	4641      	mov	r1, r8
   218b2:	a84c      	add	r0, sp, #304	@ 0x130
   218b4:	f001 fe7a 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   218b8:	f1b8 0f00 	cmp.w	r8, #0
   218bc:	f000 8107 	beq.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  return reinterpret_cast<const T*>(tensor->data.raw);
   218c0:	f8d8 3000 	ldr.w	r3, [r8]
   218c4:	930e      	str	r3, [sp, #56]	@ 0x38
        tflite::micro::GetTensorShape(input2),
   218c6:	4621      	mov	r1, r4
   218c8:	a846      	add	r0, sp, #280	@ 0x118
   218ca:	f001 fe6f 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   218ce:	2c00      	cmp	r4, #0
   218d0:	f000 80fd 	beq.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  return reinterpret_cast<const T*>(tensor->data.raw);
   218d4:	6823      	ldr	r3, [r4, #0]
   218d6:	930f      	str	r3, [sp, #60]	@ 0x3c
        tflite::micro::GetTensorShape(output),
   218d8:	4629      	mov	r1, r5
   218da:	a840      	add	r0, sp, #256	@ 0x100
   218dc:	f001 fe66 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   218e0:	2d00      	cmp	r5, #0
   218e2:	f000 80f4 	beq.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   218e6:	ab60      	add	r3, sp, #384	@ 0x180
   218e8:	aa58      	add	r2, sp, #352	@ 0x160
   218ea:	a946      	add	r1, sp, #280	@ 0x118
   218ec:	a84c      	add	r0, sp, #304	@ 0x130
  return reinterpret_cast<T*>(tensor->data.raw);
   218ee:	682e      	ldr	r6, [r5, #0]
   218f0:	f7ff fd0c 	bl	2130c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32_t DimensionsCount() const { return size_; }
   218f4:	9a40      	ldr	r2, [sp, #256]	@ 0x100
      : size_(new_shape_size) {
   218f6:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   218f8:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   218fa:	9352      	str	r3, [sp, #328]	@ 0x148
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   218fc:	f300 80e7 	bgt.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
    for (int i = 0; i < size_increase; ++i) {
   21900:	1a98      	subs	r0, r3, r2
   21902:	d00b      	beq.n	2191c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1b0>
   21904:	a952      	add	r1, sp, #328	@ 0x148
   21906:	2300      	movs	r3, #0
    dims_[i] = val;
   21908:	2501      	movs	r5, #1
   2190a:	e002      	b.n	21912 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a6>
    TFLITE_DCHECK_LT(i, size_);
   2190c:	2b04      	cmp	r3, #4
   2190e:	f000 80de 	beq.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
    for (int i = 0; i < size_increase; ++i) {
   21912:	3301      	adds	r3, #1
   21914:	4298      	cmp	r0, r3
    dims_[i] = val;
   21916:	f841 5f04 	str.w	r5, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   2191a:	d1f7      	bne.n	2190c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a0>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   2191c:	ab53      	add	r3, sp, #332	@ 0x14c
   2191e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21922:	0092      	lsls	r2, r2, #2
   21924:	a941      	add	r1, sp, #260	@ 0x104
   21926:	f7f6 fe2b 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   2192a:	9b52      	ldr	r3, [sp, #328]	@ 0x148
   2192c:	9312      	str	r3, [sp, #72]	@ 0x48
   2192e:	2b00      	cmp	r3, #0
   21930:	f340 80cd 	ble.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
    return dims_[i];
   21934:	9a55      	ldr	r2, [sp, #340]	@ 0x154
   21936:	f8dd 8150 	ldr.w	r8, [sp, #336]	@ 0x150
   2193a:	f8dd 9158 	ldr.w	r9, [sp, #344]	@ 0x158
   2193e:	9853      	ldr	r0, [sp, #332]	@ 0x14c
   21940:	920d      	str	r2, [sp, #52]	@ 0x34
   21942:	fb02 f308 	mul.w	r3, r2, r8
   21946:	fb09 f103 	mul.w	r1, r9, r3
   2194a:	9b58      	ldr	r3, [sp, #352]	@ 0x160
   2194c:	931d      	str	r3, [sp, #116]	@ 0x74
   2194e:	9b59      	ldr	r3, [sp, #356]	@ 0x164
   21950:	931e      	str	r3, [sp, #120]	@ 0x78
   21952:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
   21954:	931f      	str	r3, [sp, #124]	@ 0x7c
   21956:	9b5b      	ldr	r3, [sp, #364]	@ 0x16c
   21958:	9320      	str	r3, [sp, #128]	@ 0x80
   2195a:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
   2195c:	9314      	str	r3, [sp, #80]	@ 0x50
   2195e:	9b5e      	ldr	r3, [sp, #376]	@ 0x178
   21960:	9310      	str	r3, [sp, #64]	@ 0x40
   21962:	9b5f      	ldr	r3, [sp, #380]	@ 0x17c
   21964:	9321      	str	r3, [sp, #132]	@ 0x84
   21966:	9b60      	ldr	r3, [sp, #384]	@ 0x180
   21968:	9322      	str	r3, [sp, #136]	@ 0x88
   2196a:	9b61      	ldr	r3, [sp, #388]	@ 0x184
   2196c:	9323      	str	r3, [sp, #140]	@ 0x8c
   2196e:	9b62      	ldr	r3, [sp, #392]	@ 0x188
   21970:	9324      	str	r3, [sp, #144]	@ 0x90
   21972:	9b63      	ldr	r3, [sp, #396]	@ 0x18c
   21974:	9325      	str	r3, [sp, #148]	@ 0x94
   21976:	9b65      	ldr	r3, [sp, #404]	@ 0x194
   21978:	9315      	str	r3, [sp, #84]	@ 0x54
   2197a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
   2197c:	9311      	str	r3, [sp, #68]	@ 0x44
   2197e:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
   21980:	9326      	str	r3, [sp, #152]	@ 0x98
   21982:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
   21984:	9327      	str	r3, [sp, #156]	@ 0x9c
   21986:	2500      	movs	r5, #0
   21988:	fb09 f302 	mul.w	r3, r9, r2
   2198c:	9c64      	ldr	r4, [sp, #400]	@ 0x190
   2198e:	9316      	str	r3, [sp, #88]	@ 0x58
   21990:	4684      	mov	ip, r0
   21992:	4632      	mov	r2, r6
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   21994:	951b      	str	r5, [sp, #108]	@ 0x6c
   21996:	4608      	mov	r0, r1
   21998:	462e      	mov	r6, r5
   2199a:	4647      	mov	r7, r8
   2199c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   2199e:	4563      	cmp	r3, ip
   219a0:	da81      	bge.n	218a6 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x13a>
    TFLITE_DCHECK_LT(i, size_);
   219a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   219a4:	2b01      	cmp	r3, #1
   219a6:	f000 8092 	beq.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   219aa:	2f00      	cmp	r7, #0
   219ac:	dd74      	ble.n	21a98 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x32c>
   219ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   219b0:	2b02      	cmp	r3, #2
   219b2:	f000 808c 	beq.w	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
   219b6:	e9cd c228 	strd	ip, r2, [sp, #160]	@ 0xa0
   219ba:	e9cd 062a 	strd	r0, r6, [sp, #168]	@ 0xa8
   219be:	e9cd 452c 	strd	r4, r5, [sp, #176]	@ 0xb0
   219c2:	46ab      	mov	fp, r5
   219c4:	46b2      	mov	sl, r6
   219c6:	4613      	mov	r3, r2
   219c8:	2100      	movs	r1, #0
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   219ca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   219cc:	2a00      	cmp	r2, #0
   219ce:	dd54      	ble.n	21a7a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x30e>
   219d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   219d2:	2a03      	cmp	r2, #3
   219d4:	d07b      	beq.n	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
   219d6:	465d      	mov	r5, fp
   219d8:	2400      	movs	r4, #0
   219da:	e9cd ab17 	strd	sl, fp, [sp, #92]	@ 0x5c
   219de:	9719      	str	r7, [sp, #100]	@ 0x64
   219e0:	46d3      	mov	fp, sl
   219e2:	461f      	mov	r7, r3
   219e4:	931a      	str	r3, [sp, #104]	@ 0x68
   219e6:	46a2      	mov	sl, r4
   219e8:	9113      	str	r1, [sp, #76]	@ 0x4c
   219ea:	462b      	mov	r3, r5
   219ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   219ee:	eb02 060b 	add.w	r6, r2, fp
   219f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   219f4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
   219f8:	18d5      	adds	r5, r2, r3
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   219fa:	2400      	movs	r4, #0
   219fc:	e02c      	b.n	21a58 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ec>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   219fe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   21a00:	931c      	str	r3, [sp, #112]	@ 0x70
   21a02:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   21a04:	4293      	cmp	r3, r2
   21a06:	da62      	bge.n	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   21a08:	991e      	ldr	r1, [sp, #120]	@ 0x78
   21a0a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
   21a0c:	4291      	cmp	r1, r2
   21a0e:	dd5e      	ble.n	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   21a10:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   21a12:	4551      	cmp	r1, sl
   21a14:	dd5b      	ble.n	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   21a16:	9920      	ldr	r1, [sp, #128]	@ 0x80
   21a18:	42a1      	cmp	r1, r4
   21a1a:	dd58      	ble.n	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   21a1c:	9922      	ldr	r1, [sp, #136]	@ 0x88
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
   21a1e:	f995 0000 	ldrsb.w	r0, [r5]
   21a22:	428b      	cmp	r3, r1
   21a24:	da53      	bge.n	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   21a26:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   21a28:	4293      	cmp	r3, r2
   21a2a:	dd50      	ble.n	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   21a2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   21a2e:	4553      	cmp	r3, sl
   21a30:	dd4d      	ble.n	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   21a32:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   21a34:	42a3      	cmp	r3, r4
   21a36:	dd4a      	ble.n	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
   21a38:	f996 1000 	ldrsb.w	r1, [r6]
   21a3c:	aa68      	add	r2, sp, #416	@ 0x1a0
   21a3e:	f7ff fa49 	bl	20ed4 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   21a42:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   21a44:	441e      	add	r6, r3
   21a46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
   21a48:	441d      	add	r5, r3
   21a4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   21a4c:	2b04      	cmp	r3, #4
   21a4e:	d13e      	bne.n	21ace <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x362>
   21a50:	f808 0f01 	strb.w	r0, [r8, #1]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21a54:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   21a56:	3401      	adds	r4, #1
   21a58:	45a1      	cmp	r9, r4
   21a5a:	dcd0      	bgt.n	219fe <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x292>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   21a5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   21a5e:	4493      	add	fp, r2
   21a60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   21a62:	4413      	add	r3, r2
   21a64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   21a66:	f10a 0a01 	add.w	sl, sl, #1
   21a6a:	4592      	cmp	sl, r2
   21a6c:	444f      	add	r7, r9
   21a6e:	dbbd      	blt.n	219ec <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x280>
   21a70:	e9dd ab17 	ldrd	sl, fp, [sp, #92]	@ 0x5c
   21a74:	e9dd 7319 	ldrd	r7, r3, [sp, #100]	@ 0x64
   21a78:	9913      	ldr	r1, [sp, #76]	@ 0x4c
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   21a7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   21a7c:	4413      	add	r3, r2
   21a7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   21a80:	3101      	adds	r1, #1
    TFLITE_DCHECK_LT(i, size_);
   21a82:	4492      	add	sl, r2
   21a84:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   21a86:	42b9      	cmp	r1, r7
   21a88:	4493      	add	fp, r2
   21a8a:	db9e      	blt.n	219ca <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x25e>
   21a8c:	e9dd c228 	ldrd	ip, r2, [sp, #160]	@ 0xa0
   21a90:	e9dd 062a 	ldrd	r0, r6, [sp, #168]	@ 0xa8
   21a94:	e9dd 452c 	ldrd	r4, r5, [sp, #176]	@ 0xb0
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   21a98:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   21a9a:	3301      	adds	r3, #1
   21a9c:	931b      	str	r3, [sp, #108]	@ 0x6c
   21a9e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   21aa0:	4402      	add	r2, r0
   21aa2:	4426      	add	r6, r4
   21aa4:	441d      	add	r5, r3
   21aa6:	e779      	b.n	2199c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x230>
    for (int i = 0; i < size_; i++) {
   21aa8:	9834      	ldr	r0, [sp, #208]	@ 0xd0
   21aaa:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   21aac:	2800      	cmp	r0, #0
    int buffer_size = 1;
   21aae:	f04f 0301 	mov.w	r3, #1
    for (int i = 0; i < size_; i++) {
   21ab2:	f73f aec1 	bgt.w	21838 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xcc>
   21ab6:	2d00      	cmp	r5, #0
   21ab8:	dc02      	bgt.n	21ac0 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x354>
   21aba:	e6dc      	b.n	21876 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
   21abc:	2d00      	cmp	r5, #0
   21abe:	dd03      	ble.n	21ac8 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x35c>
    int buffer_size = 1;
   21ac0:	2101      	movs	r1, #1
   21ac2:	e6c6      	b.n	21852 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe6>
   21ac4:	2401      	movs	r4, #1
   21ac6:	e6d0      	b.n	2186a <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfe>
  TFLITE_CHECK_EQ(size_1, size_2);
   21ac8:	2b01      	cmp	r3, #1
   21aca:	f43f aed4 	beq.w	21876 <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x10a>
  TFLITE_DCHECK(tensor != nullptr);
   21ace:	f003 fb4b 	bl	25168 <abort>
   21ad2:	bf00      	nop

00021ad4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_>:
// This function is used for 8-bit as well as for 16-bit, but the accumulator
// is 32-bit for both cases. The overflow does not happen due to the
// choice of the shift (20 or 15, accordingly - see add.cc for more comments).
template <typename T>
inline typename std::enable_if<is_small_integer<T>::value, void>::type
BroadcastAdd4DSlow(const ArithmeticParams& params,
   21ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ad8:	b0bb      	sub	sp, #236	@ 0xec
   21ada:	460d      	mov	r5, r1
   21adc:	9e45      	ldr	r6, [sp, #276]	@ 0x114
   21ade:	9211      	str	r2, [sp, #68]	@ 0x44
                   const RuntimeShape& input1_shape, const T* input1_data,
                   const RuntimeShape& input2_shape, const T* input2_data,
                   const RuntimeShape& output_shape, T* output_data) {
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   21ae0:	4619      	mov	r1, r3
   21ae2:	aa2a      	add	r2, sp, #168	@ 0xa8
   21ae4:	ab32      	add	r3, sp, #200	@ 0xc8
BroadcastAdd4DSlow(const ArithmeticParams& params,
   21ae6:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   21ae8:	4628      	mov	r0, r5
   21aea:	f7ff fc0f 	bl	2130c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32_t DimensionsCount() const { return size_; }
   21aee:	6832      	ldr	r2, [r6, #0]
      : size_(new_shape_size) {
   21af0:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21af2:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   21af4:	9324      	str	r3, [sp, #144]	@ 0x90
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21af6:	f300 81eb 	bgt.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
    for (int i = 0; i < size_increase; ++i) {
   21afa:	f1d2 0004 	rsbs	r0, r2, #4
   21afe:	4625      	mov	r5, r4
   21b00:	d00b      	beq.n	21b1a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x46>
   21b02:	a924      	add	r1, sp, #144	@ 0x90
   21b04:	2300      	movs	r3, #0
    dims_[i] = val;
   21b06:	2401      	movs	r4, #1
   21b08:	e002      	b.n	21b10 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3c>
    TFLITE_DCHECK_LT(i, size_);
   21b0a:	2b04      	cmp	r3, #4
   21b0c:	f000 81e0 	beq.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
    for (int i = 0; i < size_increase; ++i) {
   21b10:	3301      	adds	r3, #1
   21b12:	4298      	cmp	r0, r3
    dims_[i] = val;
   21b14:	f841 4f04 	str.w	r4, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   21b18:	d1f7      	bne.n	21b0a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x36>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   21b1a:	ab25      	add	r3, sp, #148	@ 0x94
   21b1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21b20:	0092      	lsls	r2, r2, #2
   21b22:	1d31      	adds	r1, r6, #4
   21b24:	f7f6 fd2c 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   21b28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   21b2a:	9302      	str	r3, [sp, #8]
   21b2c:	2b00      	cmp	r3, #0
   21b2e:	f340 81cf 	ble.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
   21b32:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
    return dims_[i];
   21b34:	9827      	ldr	r0, [sp, #156]	@ 0x9c
   21b36:	f8dd c098 	ldr.w	ip, [sp, #152]	@ 0x98
   21b3a:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
   21b3c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
   21b3e:	901f      	str	r0, [sp, #124]	@ 0x7c
   21b40:	005b      	lsls	r3, r3, #1
   21b42:	930b      	str	r3, [sp, #44]	@ 0x2c
   21b44:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
   21b46:	9701      	str	r7, [sp, #4]
   21b48:	005b      	lsls	r3, r3, #1
   21b4a:	930c      	str	r3, [sp, #48]	@ 0x30
   21b4c:	fb00 f30c 	mul.w	r3, r0, ip
   21b50:	fb07 f303 	mul.w	r3, r7, r3
   21b54:	931c      	str	r3, [sp, #112]	@ 0x70
   21b56:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   21b58:	9307      	str	r3, [sp, #28]
   21b5a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
   21b5c:	9308      	str	r3, [sp, #32]
   21b5e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
   21b60:	9309      	str	r3, [sp, #36]	@ 0x24
   21b62:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   21b64:	930a      	str	r3, [sp, #40]	@ 0x28
   21b66:	e9dd 632f 	ldrd	r6, r3, [sp, #188]	@ 0xbc
   21b6a:	9314      	str	r3, [sp, #80]	@ 0x50
   21b6c:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
   21b6e:	9303      	str	r3, [sp, #12]
   21b70:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
   21b72:	9304      	str	r3, [sp, #16]
   21b74:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
   21b76:	9305      	str	r3, [sp, #20]
   21b78:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
   21b7a:	9306      	str	r3, [sp, #24]
   21b7c:	e9dd 1337 	ldrd	r1, r3, [sp, #220]	@ 0xdc
   21b80:	9313      	str	r3, [sp, #76]	@ 0x4c
   21b82:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
   21b84:	931d      	str	r3, [sp, #116]	@ 0x74
   21b86:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   21b88:	931e      	str	r3, [sp, #120]	@ 0x78
   21b8a:	2200      	movs	r2, #0
   21b8c:	fb07 f300 	mul.w	r3, r7, r0
   21b90:	e9cd 1615 	strd	r1, r6, [sp, #84]	@ 0x54
   21b94:	4696      	mov	lr, r2
   21b96:	4619      	mov	r1, r3
   21b98:	4623      	mov	r3, r4
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   21b9a:	4573      	cmp	r3, lr
   21b9c:	46a8      	mov	r8, r5
   21b9e:	4692      	mov	sl, r2
   21ba0:	4666      	mov	r6, ip
   21ba2:	4691      	mov	r9, r2
   21ba4:	4615      	mov	r5, r2
   21ba6:	f340 8157 	ble.w	21e58 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x384>
    TFLITE_DCHECK_LT(i, size_);
   21baa:	9a02      	ldr	r2, [sp, #8]
   21bac:	2a01      	cmp	r2, #1
   21bae:	f000 818f 	beq.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   21bb2:	2e00      	cmp	r6, #0
   21bb4:	f340 8145 	ble.w	21e42 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x36e>
   21bb8:	9a02      	ldr	r2, [sp, #8]
   21bba:	2a02      	cmp	r2, #2
   21bbc:	f000 8188 	beq.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   21bc0:	e9cd 9a21 	strd	r9, sl, [sp, #132]	@ 0x84
   21bc4:	460a      	mov	r2, r1
   21bc6:	f8dd b07c 	ldr.w	fp, [sp, #124]	@ 0x7c
   21bca:	9320      	str	r3, [sp, #128]	@ 0x80
   21bcc:	4631      	mov	r1, r6
   21bce:	4628      	mov	r0, r5
   21bd0:	4654      	mov	r4, sl
   21bd2:	2700      	movs	r7, #0
   21bd4:	f04f 0c01 	mov.w	ip, #1
   21bd8:	464b      	mov	r3, r9
   21bda:	9523      	str	r5, [sp, #140]	@ 0x8c
   21bdc:	4616      	mov	r6, r2
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   21bde:	f1bb 0f00 	cmp.w	fp, #0
   21be2:	f340 811e 	ble.w	21e22 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x34e>
   21be6:	9a02      	ldr	r2, [sp, #8]
   21be8:	2a03      	cmp	r2, #3
   21bea:	f000 8171 	beq.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
   21bee:	9a46      	ldr	r2, [sp, #280]	@ 0x118
   21bf0:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
   21bf4:	e9cd 1017 	strd	r1, r0, [sp, #92]	@ 0x5c
   21bf8:	e9cd 4619 	strd	r4, r6, [sp, #100]	@ 0x64
   21bfc:	3a02      	subs	r2, #2
   21bfe:	9212      	str	r2, [sp, #72]	@ 0x48
   21c00:	46a1      	mov	r9, r4
   21c02:	4682      	mov	sl, r0
   21c04:	2500      	movs	r5, #0
   21c06:	461a      	mov	r2, r3
   21c08:	931b      	str	r3, [sp, #108]	@ 0x6c
   21c0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   21c0c:	f8cd 903c 	str.w	r9, [sp, #60]	@ 0x3c
   21c10:	eb03 0642 	add.w	r6, r3, r2, lsl #1
   21c14:	9b44      	ldr	r3, [sp, #272]	@ 0x110
   21c16:	9600      	str	r6, [sp, #0]
   21c18:	eb03 0449 	add.w	r4, r3, r9, lsl #1
   21c1c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   21c1e:	e9cd 2a0d 	strd	r2, sl, [sp, #52]	@ 0x34
   21c22:	eb03 004a 	add.w	r0, r3, sl, lsl #1
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21c26:	2100      	movs	r1, #0
   21c28:	e08f      	b.n	21d4a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x276>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21c2a:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
   21c2e:	f149 0900 	adc.w	r9, r9, #0
   21c32:	0fdb      	lsrs	r3, r3, #31
   21c34:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
  assert(exponent >= 0);
   21c38:	f1ba 0f00 	cmp.w	sl, #0
  return RoundingDivideByPOT(
   21c3c:	f1ca 0900 	rsb	r9, sl, #0
   21c40:	f300 80d4 	bgt.w	21dec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x318>
  assert(exponent <= 31);
   21c44:	f11a 0f1f 	cmn.w	sl, #31
   21c48:	f2c0 813b 	blt.w	21ec2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3ee>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   21c4c:	fa0c fa09 	lsl.w	sl, ip, r9
   21c50:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
  return a ? BitNot(zero) : zero;
   21c54:	ea4f 7bd3 	mov.w	fp, r3, lsr #31
  return a >> offset;
   21c58:	fa43 f909 	asr.w	r9, r3, r9
  return a + b;
   21c5c:	eb0b 0b6a 	add.w	fp, fp, sl, asr #1
  return a & b;
   21c60:	ea0a 0303 	and.w	r3, sl, r3
  return a + b;
   21c64:	455b      	cmp	r3, fp
   21c66:	bfc8      	it	gt
   21c68:	f109 0901 	addgt.w	r9, r9, #1
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
   21c6c:	e9d8 3a09 	ldrd	r3, sl, [r8, #36]	@ 0x24
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21c70:	4293      	cmp	r3, r2
   21c72:	f000 8118 	beq.w	21ea6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3d2>
  std::int64_t ab_64 = a_64 * b_64;
   21c76:	fb83 3202 	smull	r3, r2, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   21c7a:	2a00      	cmp	r2, #0
   21c7c:	f2c0 80ef 	blt.w	21e5e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x38a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21c80:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
   21c84:	f142 0200 	adc.w	r2, r2, #0
   21c88:	0fdb      	lsrs	r3, r3, #31
   21c8a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  assert(exponent >= 0);
   21c8e:	f1ba 0f00 	cmp.w	sl, #0
   21c92:	f1ca 0200 	rsb	r2, sl, #0
   21c96:	f300 80a9 	bgt.w	21dec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x318>
  assert(exponent <= 31);
   21c9a:	f11a 0f1f 	cmn.w	sl, #31
   21c9e:	f2c0 8110 	blt.w	21ec2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3ee>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   21ca2:	fa0c fa02 	lsl.w	sl, ip, r2
   21ca6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
  return a >> offset;
   21caa:	ea4f 0b6a 	mov.w	fp, sl, asr #1
   21cae:	fa43 f202 	asr.w	r2, r3, r2
  return a & b;
   21cb2:	ea0a 0a03 	and.w	sl, sl, r3
  return a + b;
   21cb6:	eb0b 7bd3 	add.w	fp, fp, r3, lsr #31
   21cba:	45da      	cmp	sl, fp
   21cbc:	bfc8      	it	gt
   21cbe:	3201      	addgt	r2, #1
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
   21cc0:	444a      	add	r2, r9
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
   21cc2:	e9d8 3904 	ldrd	r3, r9, [r8, #16]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21cc6:	4293      	cmp	r3, r2
   21cc8:	f000 80f4 	beq.w	21eb4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3e0>
  std::int64_t ab_64 = a_64 * b_64;
   21ccc:	fb82 3203 	smull	r3, r2, r2, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   21cd0:	2a00      	cmp	r2, #0
   21cd2:	f2c0 80d3 	blt.w	21e7c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3a8>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21cd6:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
   21cda:	f142 0200 	adc.w	r2, r2, #0
   21cde:	0fdb      	lsrs	r3, r3, #31
   21ce0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  assert(exponent >= 0);
   21ce4:	f1b9 0f00 	cmp.w	r9, #0
   21ce8:	f1c9 0200 	rsb	r2, r9, #0
   21cec:	dc7e      	bgt.n	21dec <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x318>
  assert(exponent <= 31);
   21cee:	f119 0f1f 	cmn.w	r9, #31
   21cf2:	f2c0 80e6 	blt.w	21ec2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3ee>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   21cf6:	fa0c f902 	lsl.w	r9, ip, r2
   21cfa:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
  return a ? BitNot(zero) : zero;
   21cfe:	ea4f 7ad3 	mov.w	sl, r3, lsr #31
  return a >> offset;
   21d02:	fa43 f202 	asr.w	r2, r3, r2
  return a + b;
   21d06:	eb0a 0a69 	add.w	sl, sl, r9, asr #1
  return a & b;
   21d0a:	ea09 0303 	and.w	r3, r9, r3
  return a + b;
   21d0e:	4553      	cmp	r3, sl
   21d10:	bfc8      	it	gt
   21d12:	3201      	addgt	r2, #1
   21d14:	f8d8 300c 	ldr.w	r3, [r8, #12]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   21d18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   21d1a:	441a      	add	r2, r3
      if (__a < __b)
   21d1c:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
   21d20:	429a      	cmp	r2, r3
   21d22:	bfb8      	it	lt
   21d24:	461a      	movlt	r2, r3
      if (__b < __a)
   21d26:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
   21d2a:	429a      	cmp	r2, r3
   21d2c:	bfa8      	it	ge
   21d2e:	461a      	movge	r2, r3
   21d30:	9b02      	ldr	r3, [sp, #8]
   21d32:	4434      	add	r4, r6
   21d34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
   21d36:	2b04      	cmp	r3, #4
   21d38:	4430      	add	r0, r6
              params.output_offset;
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   21d3a:	b212      	sxth	r2, r2
   21d3c:	f040 80c8 	bne.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
   21d40:	9b00      	ldr	r3, [sp, #0]
   21d42:	f823 2f02 	strh.w	r2, [r3, #2]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21d46:	3101      	adds	r1, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   21d48:	9300      	str	r3, [sp, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   21d4a:	9b01      	ldr	r3, [sp, #4]
   21d4c:	428b      	cmp	r3, r1
   21d4e:	dd54      	ble.n	21dfa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x326>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   21d50:	9a07      	ldr	r2, [sp, #28]
              params.input1_offset +
   21d52:	f8d8 3004 	ldr.w	r3, [r8, #4]
   21d56:	4572      	cmp	r2, lr
   21d58:	f340 80ba 	ble.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   21d5c:	9a08      	ldr	r2, [sp, #32]
   21d5e:	42ba      	cmp	r2, r7
   21d60:	f340 80b6 	ble.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   21d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   21d66:	42aa      	cmp	r2, r5
   21d68:	f340 80b2 	ble.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   21d6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   21d6e:	428a      	cmp	r2, r1
   21d70:	f340 80ae 	ble.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   21d74:	f9b0 9000 	ldrsh.w	r9, [r0]
              params.input2_offset +
   21d78:	f8d8 a008 	ldr.w	sl, [r8, #8]
          const int32_t input1_val =
   21d7c:	4499      	add	r9, r3
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   21d7e:	9b03      	ldr	r3, [sp, #12]
   21d80:	4573      	cmp	r3, lr
   21d82:	f340 80a5 	ble.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   21d86:	9b04      	ldr	r3, [sp, #16]
   21d88:	42bb      	cmp	r3, r7
   21d8a:	f340 80a1 	ble.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   21d8e:	9b05      	ldr	r3, [sp, #20]
   21d90:	42ab      	cmp	r3, r5
   21d92:	f340 809d 	ble.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   21d96:	9b06      	ldr	r3, [sp, #24]
   21d98:	428b      	cmp	r3, r1
   21d9a:	f340 8099 	ble.w	21ed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3fc>
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   21d9e:	f9b4 2000 	ldrsh.w	r2, [r4]
              input1_val * (1 << params.left_shift);
   21da2:	f8d8 3018 	ldr.w	r3, [r8, #24]
          const int32_t input2_val =
   21da6:	4452      	add	r2, sl
          const int32_t shifted_input1_val =
   21da8:	fa09 f903 	lsl.w	r9, r9, r3
          const int32_t shifted_input2_val =
   21dac:	409a      	lsls	r2, r3
                  params.input1_shift);
   21dae:	e9d8 3a07 	ldrd	r3, sl, [r8, #28]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21db2:	454b      	cmp	r3, r9
   21db4:	d071      	beq.n	21e9a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3c6>
  std::int64_t ab_64 = a_64 * b_64;
   21db6:	fb89 3903 	smull	r3, r9, r9, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   21dba:	f1b9 0f00 	cmp.w	r9, #0
   21dbe:	f6bf af34 	bge.w	21c2a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x156>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21dc2:	4e44      	ldr	r6, [pc, #272]	@ (21ed4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x400>)
   21dc4:	199b      	adds	r3, r3, r6
   21dc6:	f169 0900 	sbc.w	r9, r9, #0
   21dca:	f1b9 0f00 	cmp.w	r9, #0
   21dce:	da04      	bge.n	21dda <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x306>
   21dd0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
   21dd4:	199b      	adds	r3, r3, r6
   21dd6:	f149 0900 	adc.w	r9, r9, #0
   21dda:	0fdb      	lsrs	r3, r3, #31
  assert(exponent >= 0);
   21ddc:	f1ba 0f00 	cmp.w	sl, #0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21de0:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
  return RoundingDivideByPOT(
   21de4:	f1ca 0900 	rsb	r9, sl, #0
  assert(exponent >= 0);
   21de8:	f77f af2c 	ble.w	21c44 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x170>
   21dec:	4b3a      	ldr	r3, [pc, #232]	@ (21ed8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x404>)
   21dee:	4a3b      	ldr	r2, [pc, #236]	@ (21edc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x408>)
   21df0:	483b      	ldr	r0, [pc, #236]	@ (21ee0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x40c>)
   21df2:	f44f 71b3 	mov.w	r1, #358	@ 0x166
   21df6:	f003 f9bf 	bl	25178 <__assert_func>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   21dfa:	e9dd 2a0d 	ldrd	r2, sl, [sp, #52]	@ 0x34
   21dfe:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
   21e02:	441a      	add	r2, r3
   21e04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   21e06:	4499      	add	r9, r3
   21e08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   21e0a:	449a      	add	sl, r3
   21e0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   21e0e:	3501      	adds	r5, #1
   21e10:	429d      	cmp	r5, r3
   21e12:	f6ff aefa 	blt.w	21c0a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x136>
   21e16:	e9dd 1017 	ldrd	r1, r0, [sp, #92]	@ 0x5c
   21e1a:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
   21e1e:	469b      	mov	fp, r3
   21e20:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   21e22:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   21e24:	3701      	adds	r7, #1
    TFLITE_DCHECK_LT(i, size_);
   21e26:	4414      	add	r4, r2
   21e28:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   21e2a:	428f      	cmp	r7, r1
   21e2c:	4433      	add	r3, r6
   21e2e:	4410      	add	r0, r2
   21e30:	f6ff aed5 	blt.w	21bde <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x10a>
   21e34:	e9dd 9a21 	ldrd	r9, sl, [sp, #132]	@ 0x84
   21e38:	4632      	mov	r2, r6
   21e3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   21e3c:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
   21e3e:	460e      	mov	r6, r1
   21e40:	4611      	mov	r1, r2
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   21e42:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   21e44:	4491      	add	r9, r2
   21e46:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   21e48:	f10e 0e01 	add.w	lr, lr, #1
   21e4c:	4492      	add	sl, r2
   21e4e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
   21e50:	4573      	cmp	r3, lr
   21e52:	4415      	add	r5, r2
   21e54:	f73f aea9 	bgt.w	21baa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0xd6>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
   21e58:	b03b      	add	sp, #236	@ 0xec
   21e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21e5e:	4e1d      	ldr	r6, [pc, #116]	@ (21ed4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x400>)
   21e60:	199b      	adds	r3, r3, r6
   21e62:	f162 0200 	sbc.w	r2, r2, #0
   21e66:	2a00      	cmp	r2, #0
   21e68:	da04      	bge.n	21e74 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3a0>
   21e6a:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
   21e6e:	199b      	adds	r3, r3, r6
   21e70:	f142 0200 	adc.w	r2, r2, #0
   21e74:	0fdb      	lsrs	r3, r3, #31
   21e76:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   21e7a:	e708      	b.n	21c8e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1ba>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   21e7c:	4e15      	ldr	r6, [pc, #84]	@ (21ed4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x400>)
   21e7e:	199b      	adds	r3, r3, r6
   21e80:	f162 0200 	sbc.w	r2, r2, #0
   21e84:	2a00      	cmp	r2, #0
   21e86:	da04      	bge.n	21e92 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x3be>
   21e88:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
   21e8c:	199b      	adds	r3, r3, r6
   21e8e:	f142 0200 	adc.w	r2, r2, #0
   21e92:	0fdb      	lsrs	r3, r3, #31
   21e94:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   21e98:	e724      	b.n	21ce4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x210>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21e9a:	f1b9 4f00 	cmp.w	r9, #2147483648	@ 0x80000000
   21e9e:	d18a      	bne.n	21db6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x2e2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   21ea0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   21ea4:	e6c8      	b.n	21c38 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x164>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21ea6:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
   21eaa:	f47f aee4 	bne.w	21c76 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1a2>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   21eae:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   21eb2:	e6ec      	b.n	21c8e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1ba>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   21eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
   21eb8:	f47f af08 	bne.w	21ccc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x1f8>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   21ebc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   21ec0:	e710      	b.n	21ce4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x210>
  assert(exponent <= 31);
   21ec2:	4b08      	ldr	r3, [pc, #32]	@ (21ee4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x410>)
   21ec4:	4a05      	ldr	r2, [pc, #20]	@ (21edc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x408>)
   21ec6:	4806      	ldr	r0, [pc, #24]	@ (21ee0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_+0x40c>)
   21ec8:	f240 1167 	movw	r1, #359	@ 0x167
   21ecc:	f003 f954 	bl	25178 <__assert_func>
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   21ed0:	f003 f94a 	bl	25168 <abort>
   21ed4:	c0000001 	.word	0xc0000001
   21ed8:	0003f834 	.word	0x0003f834
   21edc:	0003f788 	.word	0x0003f788
   21ee0:	0003f7e4 	.word	0x0003f7e4
   21ee4:	0003f778 	.word	0x0003f778

00021ee8 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
TfLiteStatus EvalAddQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
   21ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21eec:	b0d5      	sub	sp, #340	@ 0x154
   21eee:	461d      	mov	r5, r3
  op_params->left_shift = data->left_shift;
   21ef0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   21ef2:	930d      	str	r3, [sp, #52]	@ 0x34
   21ef4:	9340      	str	r3, [sp, #256]	@ 0x100
  op_params->input1_offset = data->input1_offset;
   21ef6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
   21ef8:	930e      	str	r3, [sp, #56]	@ 0x38
   21efa:	933b      	str	r3, [sp, #236]	@ 0xec
  op_params->input1_multiplier = data->input1_multiplier;
   21efc:	6943      	ldr	r3, [r0, #20]
   21efe:	930f      	str	r3, [sp, #60]	@ 0x3c
   21f00:	9341      	str	r3, [sp, #260]	@ 0x104
  op_params->input2_offset = data->input2_offset;
   21f02:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
   21f04:	9310      	str	r3, [sp, #64]	@ 0x40
  SetActivationParams(data->output_activation_min, data->output_activation_max,
   21f06:	e9d0 ab03 	ldrd	sl, fp, [r0, #12]
  op_params->input2_offset = data->input2_offset;
   21f0a:	933c      	str	r3, [sp, #240]	@ 0xf0
  op_params->input2_multiplier = data->input2_multiplier;
   21f0c:	6983      	ldr	r3, [r0, #24]
   21f0e:	9311      	str	r3, [sp, #68]	@ 0x44
   21f10:	9343      	str	r3, [sp, #268]	@ 0x10c
  op_params->input2_shift = data->input2_shift;
   21f12:	6883      	ldr	r3, [r0, #8]
  op_params->input1_shift = data->input1_shift;
   21f14:	6846      	ldr	r6, [r0, #4]
  op_params->output_offset = data->output_offset;
   21f16:	6b07      	ldr	r7, [r0, #48]	@ 0x30
  op_params->output_shift = data->output_shift;
   21f18:	f8d0 9020 	ldr.w	r9, [r0, #32]
  op_params->input2_shift = data->input2_shift;
   21f1c:	9312      	str	r3, [sp, #72]	@ 0x48
TfLiteStatus EvalAddQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
   21f1e:	4614      	mov	r4, r2
  op_params->input2_shift = data->input2_shift;
   21f20:	9344      	str	r3, [sp, #272]	@ 0x110
  op_params->output_multiplier = data->output_multiplier;
   21f22:	69c3      	ldr	r3, [r0, #28]
   21f24:	9313      	str	r3, [sp, #76]	@ 0x4c
      tflite::micro::GetTensorShape(input1),
   21f26:	a834      	add	r0, sp, #208	@ 0xd0
TfLiteStatus EvalAddQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
   21f28:	4688      	mov	r8, r1
  op_params->output_multiplier = data->output_multiplier;
   21f2a:	933e      	str	r3, [sp, #248]	@ 0xf8
  params->quantized_activation_max = max;
   21f2c:	e9cd ab45 	strd	sl, fp, [sp, #276]	@ 0x114
  op_params->input1_shift = data->input1_shift;
   21f30:	9642      	str	r6, [sp, #264]	@ 0x108
  op_params->output_offset = data->output_offset;
   21f32:	973d      	str	r7, [sp, #244]	@ 0xf4
  op_params->output_shift = data->output_shift;
   21f34:	f8cd 90fc 	str.w	r9, [sp, #252]	@ 0xfc
      tflite::micro::GetTensorShape(input1),
   21f38:	f001 fb38 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::micro::GetTensorShape(input2), &op_params);
   21f3c:	4621      	mov	r1, r4
   21f3e:	a82e      	add	r0, sp, #184	@ 0xb8
   21f40:	f001 fb34 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   21f44:	aa3a      	add	r2, sp, #232	@ 0xe8
   21f46:	a92e      	add	r1, sp, #184	@ 0xb8
   21f48:	a834      	add	r0, sp, #208	@ 0xd0
   21f4a:	f7ff f899 	bl	21080 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
  if (need_broadcast) {
   21f4e:	2800      	cmp	r0, #0
   21f50:	d165      	bne.n	2201e <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x136>
   21f52:	f1b8 0f00 	cmp.w	r8, #0
   21f56:	f000 8099 	beq.w	2208c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
  return reinterpret_cast<const T*>(tensor->data.raw);
   21f5a:	f8d8 3000 	ldr.w	r3, [r8]
   21f5e:	9314      	str	r3, [sp, #80]	@ 0x50
  TFLITE_DCHECK(tensor != nullptr);
   21f60:	2c00      	cmp	r4, #0
   21f62:	f000 8093 	beq.w	2208c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
  return reinterpret_cast<const T*>(tensor->data.raw);
   21f66:	6823      	ldr	r3, [r4, #0]
   21f68:	9315      	str	r3, [sp, #84]	@ 0x54
  TFLITE_DCHECK(tensor != nullptr);
   21f6a:	2d00      	cmp	r5, #0
   21f6c:	f000 808e 	beq.w	2208c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
  return reinterpret_cast<T*>(tensor->data.raw);
   21f70:	682b      	ldr	r3, [r5, #0]
        MatchingElementsSize(tflite::micro::GetTensorShape(input1),
   21f72:	4641      	mov	r1, r8
   21f74:	a822      	add	r0, sp, #136	@ 0x88
   21f76:	4698      	mov	r8, r3
   21f78:	f001 fb18 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(input2),
   21f7c:	4621      	mov	r1, r4
   21f7e:	a81c      	add	r0, sp, #112	@ 0x70
   21f80:	f001 fb14 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output)));
   21f84:	a816      	add	r0, sp, #88	@ 0x58
   21f86:	4629      	mov	r1, r5
   21f88:	f001 fb10 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    for (int i = 0; i < size_; i++) {
   21f8c:	9822      	ldr	r0, [sp, #136]	@ 0x88
   21f8e:	2800      	cmp	r0, #0
   21f90:	dd68      	ble.n	22064 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x17c>
   21f92:	ab22      	add	r3, sp, #136	@ 0x88
   21f94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    int buffer_size = 1;
   21f98:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
   21f9a:	f853 1f04 	ldr.w	r1, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   21f9e:	4298      	cmp	r0, r3
      buffer_size *= dims_data[i];
   21fa0:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
   21fa4:	d1f9      	bne.n	21f9a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xb2>
   21fa6:	981c      	ldr	r0, [sp, #112]	@ 0x70
   21fa8:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
   21fac:	2800      	cmp	r0, #0
   21fae:	dd64      	ble.n	2207a <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x192>
   21fb0:	ab1c      	add	r3, sp, #112	@ 0x70
   21fb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    int buffer_size = 1;
   21fb6:	2401      	movs	r4, #1
      buffer_size *= dims_data[i];
   21fb8:	f853 1f04 	ldr.w	r1, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   21fbc:	4298      	cmp	r0, r3
      buffer_size *= dims_data[i];
   21fbe:	fb01 f404 	mul.w	r4, r1, r4
    for (int i = 0; i < size_; i++) {
   21fc2:	d1f9      	bne.n	21fb8 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xd0>
   21fc4:	f1bc 0f00 	cmp.w	ip, #0
   21fc8:	dd5c      	ble.n	22084 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x19c>
   21fca:	a916      	add	r1, sp, #88	@ 0x58
    int buffer_size = 1;
   21fcc:	2001      	movs	r0, #1
    for (int i = 0; i < size_; i++) {
   21fce:	2300      	movs	r3, #0
      buffer_size *= dims_data[i];
   21fd0:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (int i = 0; i < size_; i++) {
   21fd4:	3301      	adds	r3, #1
   21fd6:	459c      	cmp	ip, r3
      buffer_size *= dims_data[i];
   21fd8:	fb05 f000 	mul.w	r0, r5, r0
    for (int i = 0; i < size_; i++) {
   21fdc:	dcf8      	bgt.n	21fd0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe8>
  TFLITE_CHECK_EQ(size_1, size_2);
   21fde:	42a2      	cmp	r2, r4
   21fe0:	d154      	bne.n	2208c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
  TFLITE_CHECK_EQ(size_2, size_3);
   21fe2:	4282      	cmp	r2, r0
   21fe4:	d152      	bne.n	2208c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
    arm_elementwise_add_s16(
   21fe6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   21fe8:	f8cd 8014 	str.w	r8, [sp, #20]
   21fec:	e9cd 7306 	strd	r7, r3, [sp, #24]
   21ff0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   21ff2:	9304      	str	r3, [sp, #16]
   21ff4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   21ff6:	9303      	str	r3, [sp, #12]
   21ff8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   21ffa:	9302      	str	r3, [sp, #8]
   21ffc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   21ffe:	e9cd b20a 	strd	fp, r2, [sp, #40]	@ 0x28
   22002:	e9cd 6300 	strd	r6, r3, [sp]
   22006:	e9cd 9a08 	strd	r9, sl, [sp, #32]
   2200a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
   2200e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
   22012:	f7f7 fba3 	bl	1975c <arm_elementwise_add_s16>
}
   22016:	2000      	movs	r0, #0
   22018:	b055      	add	sp, #340	@ 0x154
   2201a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        op_params, tflite::micro::GetTensorShape(input1),
   2201e:	4641      	mov	r1, r8
   22020:	a834      	add	r0, sp, #208	@ 0xd0
   22022:	f001 fac3 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   22026:	f1b8 0f00 	cmp.w	r8, #0
   2202a:	d02f      	beq.n	2208c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
        tflite::micro::GetTensorShape(input2),
   2202c:	4621      	mov	r1, r4
   2202e:	a82e      	add	r0, sp, #184	@ 0xb8
  return reinterpret_cast<const T*>(tensor->data.raw);
   22030:	f8d8 6000 	ldr.w	r6, [r8]
   22034:	f001 faba 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   22038:	b344      	cbz	r4, 2208c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
  return reinterpret_cast<const T*>(tensor->data.raw);
   2203a:	6827      	ldr	r7, [r4, #0]
        tflite::micro::GetTensorShape(output),
   2203c:	ac28      	add	r4, sp, #160	@ 0xa0
   2203e:	4629      	mov	r1, r5
   22040:	4620      	mov	r0, r4
   22042:	f001 fab3 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   22046:	b30d      	cbz	r5, 2208c <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a4>
    reference_ops::BroadcastAdd4DSlow(
   22048:	e9cd 7400 	strd	r7, r4, [sp]
   2204c:	682b      	ldr	r3, [r5, #0]
   2204e:	9302      	str	r3, [sp, #8]
   22050:	a83a      	add	r0, sp, #232	@ 0xe8
   22052:	ab2e      	add	r3, sp, #184	@ 0xb8
   22054:	4632      	mov	r2, r6
   22056:	a934      	add	r1, sp, #208	@ 0xd0
   22058:	f7ff fd3c 	bl	21ad4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIsEENSt9enable_ifIXsrNS_16is_small_integerIT_EE5valueEvE4typeERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKS4_SD_SF_SD_PS4_>
}
   2205c:	2000      	movs	r0, #0
   2205e:	b055      	add	sp, #340	@ 0x154
   22060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22064:	981c      	ldr	r0, [sp, #112]	@ 0x70
   22066:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
   2206a:	2800      	cmp	r0, #0
    int buffer_size = 1;
   2206c:	f04f 0201 	mov.w	r2, #1
    for (int i = 0; i < size_; i++) {
   22070:	dc9e      	bgt.n	21fb0 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xc8>
   22072:	f1bc 0f00 	cmp.w	ip, #0
   22076:	dc03      	bgt.n	22080 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x198>
   22078:	e7b5      	b.n	21fe6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfe>
   2207a:	f1bc 0f00 	cmp.w	ip, #0
   2207e:	dd03      	ble.n	22088 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1a0>
    int buffer_size = 1;
   22080:	2401      	movs	r4, #1
   22082:	e7a2      	b.n	21fca <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe2>
   22084:	2001      	movs	r0, #1
   22086:	e7aa      	b.n	21fde <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf6>
  TFLITE_CHECK_EQ(size_1, size_2);
   22088:	2a01      	cmp	r2, #1
   2208a:	d0ac      	beq.n	21fe6 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xfe>
  TFLITE_DCHECK(tensor != nullptr);
   2208c:	f003 f86c 	bl	25168 <abort>

00022090 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>:
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   22090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  switch (output->type) {
   22094:	7a1e      	ldrb	r6, [r3, #8]
   22096:	2e07      	cmp	r6, #7
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   22098:	b0f9      	sub	sp, #484	@ 0x1e4
  switch (output->type) {
   2209a:	d00d      	beq.n	220b8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x28>
   2209c:	2e09      	cmp	r6, #9
   2209e:	d005      	beq.n	220ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1c>
   220a0:	2e02      	cmp	r6, #2
   220a2:	d00c      	beq.n	220be <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2e>
   220a4:	2001      	movs	r0, #1
}
   220a6:	b079      	add	sp, #484	@ 0x1e4
   220a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      EvalAddQuantizedInt8(context, node, params, data, input1, input2, output);
   220ac:	f7ff fb5e 	bl	2176c <_ZN6tflite12_GLOBAL__N_120EvalAddQuantizedInt8EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
  return kTfLiteOk;
   220b0:	2000      	movs	r0, #0
}
   220b2:	b079      	add	sp, #484	@ 0x1e4
   220b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      EvalAddQuantizedInt16(context, node, params, data, input1, input2,
   220b8:	f7ff ff16 	bl	21ee8 <_ZN6tflite12_GLOBAL__N_121EvalAddQuantizedInt16EP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
      break;
   220bc:	e7f8      	b.n	220b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
      op_params.left_shift = data->left_shift;
   220be:	461f      	mov	r7, r3
   220c0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   220c2:	9364      	str	r3, [sp, #400]	@ 0x190
      op_params.input1_offset = data->input1_offset;
   220c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
   220c6:	935f      	str	r3, [sp, #380]	@ 0x17c
      op_params.input1_multiplier = data->input1_multiplier;
   220c8:	6943      	ldr	r3, [r0, #20]
   220ca:	9365      	str	r3, [sp, #404]	@ 0x194
      op_params.input2_offset = data->input2_offset;
   220cc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
   220ce:	9360      	str	r3, [sp, #384]	@ 0x180
      op_params.input2_multiplier = data->input2_multiplier;
   220d0:	6983      	ldr	r3, [r0, #24]
   220d2:	9367      	str	r3, [sp, #412]	@ 0x19c
      op_params.output_offset = data->output_offset;
   220d4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
   220d6:	9361      	str	r3, [sp, #388]	@ 0x184
      op_params.output_multiplier = data->output_multiplier;
   220d8:	69c3      	ldr	r3, [r0, #28]
   220da:	9362      	str	r3, [sp, #392]	@ 0x188
      op_params.output_shift = data->output_shift;
   220dc:	6a03      	ldr	r3, [r0, #32]
   220de:	9363      	str	r3, [sp, #396]	@ 0x18c
   220e0:	4615      	mov	r5, r2
      SetActivationParams(data->output_activation_min, data->output_activation_max,
   220e2:	68c3      	ldr	r3, [r0, #12]
   220e4:	6902      	ldr	r2, [r0, #16]
      op_params.input1_shift = data->input1_shift;
   220e6:	6846      	ldr	r6, [r0, #4]
      op_params.input2_shift = data->input2_shift;
   220e8:	f8d0 8008 	ldr.w	r8, [r0, #8]
      SetActivationParams(data->output_activation_min, data->output_activation_max,
   220ec:	9309      	str	r3, [sp, #36]	@ 0x24
          tflite::micro::GetTensorShape(input1),
   220ee:	a856      	add	r0, sp, #344	@ 0x158
  params->quantized_activation_max = max;
   220f0:	e9cd 3269 	strd	r3, r2, [sp, #420]	@ 0x1a4
   220f4:	4689      	mov	r9, r1
      SetActivationParams(data->output_activation_min, data->output_activation_max,
   220f6:	9208      	str	r2, [sp, #32]
      op_params.input1_shift = data->input1_shift;
   220f8:	9666      	str	r6, [sp, #408]	@ 0x198
      op_params.input2_shift = data->input2_shift;
   220fa:	f8cd 81a0 	str.w	r8, [sp, #416]	@ 0x1a0
          tflite::micro::GetTensorShape(input1),
   220fe:	f001 fa55 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(input2), &op_params);
   22102:	4629      	mov	r1, r5
   22104:	a84e      	add	r0, sp, #312	@ 0x138
   22106:	f001 fa51 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   2210a:	a94e      	add	r1, sp, #312	@ 0x138
   2210c:	aa5e      	add	r2, sp, #376	@ 0x178
   2210e:	a856      	add	r0, sp, #344	@ 0x158
   22110:	f7fe ffb6 	bl	21080 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
            op_params, tflite::micro::GetTensorShape(input1),
   22114:	4649      	mov	r1, r9
      if (need_broadcast) {
   22116:	2800      	cmp	r0, #0
   22118:	f000 8119 	beq.w	2234e <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2be>
            op_params, tflite::micro::GetTensorShape(input1),
   2211c:	a842      	add	r0, sp, #264	@ 0x108
   2211e:	f001 fa45 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
   22122:	f1b9 0f00 	cmp.w	r9, #0
   22126:	f000 81c1 	beq.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  return reinterpret_cast<const T*>(tensor->data.raw);
   2212a:	f8d9 3000 	ldr.w	r3, [r9]
   2212e:	9302      	str	r3, [sp, #8]
            tflite::micro::GetTensorShape(input2),
   22130:	4629      	mov	r1, r5
   22132:	a83c      	add	r0, sp, #240	@ 0xf0
   22134:	f001 fa3a 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   22138:	2d00      	cmp	r5, #0
   2213a:	f000 81b7 	beq.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
            tflite::micro::GetTensorShape(output),
   2213e:	4639      	mov	r1, r7
   22140:	a836      	add	r0, sp, #216	@ 0xd8
  return reinterpret_cast<const T*>(tensor->data.raw);
   22142:	f8d5 b000 	ldr.w	fp, [r5]
   22146:	f001 fa31 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<T*>(tensor->data.raw);
   2214a:	683c      	ldr	r4, [r7, #0]
   2214c:	941b      	str	r4, [sp, #108]	@ 0x6c
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2214e:	ab56      	add	r3, sp, #344	@ 0x158
   22150:	aa4e      	add	r2, sp, #312	@ 0x138
   22152:	a93c      	add	r1, sp, #240	@ 0xf0
   22154:	a842      	add	r0, sp, #264	@ 0x108
   22156:	f7ff f8d9 	bl	2130c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  int32_t DimensionsCount() const { return size_; }
   2215a:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
      : size_(new_shape_size) {
   2215c:	2304      	movs	r3, #4
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2215e:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   22160:	9348      	str	r3, [sp, #288]	@ 0x120
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   22162:	f300 81a3 	bgt.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
    for (int i = 0; i < size_increase; ++i) {
   22166:	1a98      	subs	r0, r3, r2
   22168:	d00b      	beq.n	22182 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xf2>
   2216a:	a948      	add	r1, sp, #288	@ 0x120
   2216c:	2300      	movs	r3, #0
    dims_[i] = val;
   2216e:	2401      	movs	r4, #1
   22170:	e002      	b.n	22178 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe8>
    TFLITE_DCHECK_LT(i, size_);
   22172:	2b04      	cmp	r3, #4
   22174:	f000 819a 	beq.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
    for (int i = 0; i < size_increase; ++i) {
   22178:	3301      	adds	r3, #1
   2217a:	4298      	cmp	r0, r3
    dims_[i] = val;
   2217c:	f841 4f04 	str.w	r4, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   22180:	d1f7      	bne.n	22172 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0xe2>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   22182:	ab49      	add	r3, sp, #292	@ 0x124
   22184:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   22188:	0092      	lsls	r2, r2, #2
   2218a:	a937      	add	r1, sp, #220	@ 0xdc
   2218c:	f7f6 f9f8 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   22190:	9b48      	ldr	r3, [sp, #288]	@ 0x120
   22192:	9307      	str	r3, [sp, #28]
   22194:	2b00      	cmp	r3, #0
   22196:	f340 8189 	ble.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
   2219a:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
    return dims_[i];
   2219c:	f8dd 9130 	ldr.w	r9, [sp, #304]	@ 0x130
   221a0:	009b      	lsls	r3, r3, #2
   221a2:	e9dd 4a4a 	ldrd	r4, sl, [sp, #296]	@ 0x128
   221a6:	9312      	str	r3, [sp, #72]	@ 0x48
   221a8:	9b55      	ldr	r3, [sp, #340]	@ 0x154
   221aa:	009b      	lsls	r3, r3, #2
   221ac:	9313      	str	r3, [sp, #76]	@ 0x4c
   221ae:	fb0a f304 	mul.w	r3, sl, r4
   221b2:	fb09 f203 	mul.w	r2, r9, r3
   221b6:	9b49      	ldr	r3, [sp, #292]	@ 0x124
   221b8:	931c      	str	r3, [sp, #112]	@ 0x70
   221ba:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
   221bc:	930a      	str	r3, [sp, #40]	@ 0x28
   221be:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
   221c0:	930b      	str	r3, [sp, #44]	@ 0x2c
   221c2:	9b50      	ldr	r3, [sp, #320]	@ 0x140
   221c4:	930c      	str	r3, [sp, #48]	@ 0x30
   221c6:	9b51      	ldr	r3, [sp, #324]	@ 0x144
   221c8:	930d      	str	r3, [sp, #52]	@ 0x34
   221ca:	e9dd 3053 	ldrd	r3, r0, [sp, #332]	@ 0x14c
   221ce:	9003      	str	r0, [sp, #12]
   221d0:	9856      	ldr	r0, [sp, #344]	@ 0x158
   221d2:	900e      	str	r0, [sp, #56]	@ 0x38
   221d4:	9857      	ldr	r0, [sp, #348]	@ 0x15c
   221d6:	900f      	str	r0, [sp, #60]	@ 0x3c
   221d8:	9858      	ldr	r0, [sp, #352]	@ 0x160
   221da:	9010      	str	r0, [sp, #64]	@ 0x40
   221dc:	9859      	ldr	r0, [sp, #356]	@ 0x164
   221de:	9011      	str	r0, [sp, #68]	@ 0x44
   221e0:	985b      	ldr	r0, [sp, #364]	@ 0x16c
   221e2:	9014      	str	r0, [sp, #80]	@ 0x50
   221e4:	985c      	ldr	r0, [sp, #368]	@ 0x170
   221e6:	901d      	str	r0, [sp, #116]	@ 0x74
   221e8:	985a      	ldr	r0, [sp, #360]	@ 0x168
   221ea:	901e      	str	r0, [sp, #120]	@ 0x78
   221ec:	9852      	ldr	r0, [sp, #328]	@ 0x148
   221ee:	901f      	str	r0, [sp, #124]	@ 0x7c
   221f0:	2100      	movs	r1, #0
   221f2:	fb09 f00a 	mul.w	r0, r9, sl
   221f6:	9015      	str	r0, [sp, #84]	@ 0x54
   221f8:	46a6      	mov	lr, r4
   221fa:	4608      	mov	r0, r1
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   221fc:	9105      	str	r1, [sp, #20]
   221fe:	465d      	mov	r5, fp
   22200:	460c      	mov	r4, r1
   22202:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
   22204:	9f05      	ldr	r7, [sp, #20]
   22206:	42be      	cmp	r6, r7
   22208:	f77f af52 	ble.w	220b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
    TFLITE_DCHECK_LT(i, size_);
   2220c:	9e07      	ldr	r6, [sp, #28]
   2220e:	2e01      	cmp	r6, #1
   22210:	f000 814c 	beq.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   22214:	f1be 0f00 	cmp.w	lr, #0
   22218:	f340 8090 	ble.w	2233c <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x2ac>
   2221c:	9e07      	ldr	r6, [sp, #28]
   2221e:	2e02      	cmp	r6, #2
   22220:	f000 8144 	beq.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
   22224:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
   22226:	9301      	str	r3, [sp, #4]
   22228:	e9cd 4220 	strd	r4, r2, [sp, #128]	@ 0x80
   2222c:	e9cd 0122 	strd	r0, r1, [sp, #136]	@ 0x88
   22230:	4673      	mov	r3, lr
   22232:	f8dd e004 	ldr.w	lr, [sp, #4]
   22236:	f1a6 0b04 	sub.w	fp, r6, #4
   2223a:	4627      	mov	r7, r4
   2223c:	468c      	mov	ip, r1
   2223e:	f04f 0800 	mov.w	r8, #0
   22242:	4606      	mov	r6, r0
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   22244:	f1ba 0f00 	cmp.w	sl, #0
   22248:	dd68      	ble.n	2231c <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x28c>
   2224a:	9a07      	ldr	r2, [sp, #28]
   2224c:	2a03      	cmp	r2, #3
   2224e:	f000 812d 	beq.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
   22252:	e9cd 3e17 	strd	r3, lr, [sp, #92]	@ 0x5c
   22256:	e9cd 6c19 	strd	r6, ip, [sp, #100]	@ 0x64
   2225a:	4639      	mov	r1, r7
   2225c:	9716      	str	r7, [sp, #88]	@ 0x58
   2225e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
   22260:	f8cd 8010 	str.w	r8, [sp, #16]
   22264:	4634      	mov	r4, r6
   22266:	4660      	mov	r0, ip
   22268:	2200      	movs	r2, #0
   2226a:	9b02      	ldr	r3, [sp, #8]
   2226c:	9101      	str	r1, [sp, #4]
   2226e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   22272:	eb0b 0881 	add.w	r8, fp, r1, lsl #2
   22276:	eb05 0e84 	add.w	lr, r5, r4, lsl #2
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2227a:	2300      	movs	r3, #0
   2227c:	e03d      	b.n	222fa <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x26a>
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   2227e:	990a      	ldr	r1, [sp, #40]	@ 0x28
   22280:	9e05      	ldr	r6, [sp, #20]
   22282:	42b1      	cmp	r1, r6
   22284:	f340 8112 	ble.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   22288:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   2228a:	9904      	ldr	r1, [sp, #16]
   2228c:	428e      	cmp	r6, r1
   2228e:	f340 810d 	ble.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   22292:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
   22294:	42b2      	cmp	r2, r6
   22296:	f280 8109 	bge.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   2229a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   2229c:	429e      	cmp	r6, r3
   2229e:	f340 8105 	ble.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   222a2:	f8dc 6000 	ldr.w	r6, [ip]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   222a6:	9905      	ldr	r1, [sp, #20]
   222a8:	9606      	str	r6, [sp, #24]
   222aa:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
   222ac:	428e      	cmp	r6, r1
   222ae:	f340 80fd 	ble.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   222b2:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
   222b4:	9904      	ldr	r1, [sp, #16]
   222b6:	428e      	cmp	r6, r1
   222b8:	f340 80f8 	ble.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   222bc:	9910      	ldr	r1, [sp, #64]	@ 0x40
   222be:	428a      	cmp	r2, r1
   222c0:	f280 80f4 	bge.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   222c4:	9911      	ldr	r1, [sp, #68]	@ 0x44
   222c6:	4299      	cmp	r1, r3
   222c8:	f340 80f0 	ble.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   222cc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
              ActivationFunctionWithMinMax<T>(
   222ce:	9e06      	ldr	r6, [sp, #24]
   222d0:	448c      	add	ip, r1
   222d2:	f8de 1000 	ldr.w	r1, [lr]
   222d6:	440e      	add	r6, r1
      if (__a < __b)
   222d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
   222da:	428e      	cmp	r6, r1
   222dc:	bfb8      	it	lt
   222de:	460e      	movlt	r6, r1
      if (__b < __a)
   222e0:	9908      	ldr	r1, [sp, #32]
   222e2:	428e      	cmp	r6, r1
   222e4:	bfa8      	it	ge
   222e6:	460e      	movge	r6, r1
   222e8:	9912      	ldr	r1, [sp, #72]	@ 0x48
   222ea:	448e      	add	lr, r1
   222ec:	9907      	ldr	r1, [sp, #28]
   222ee:	2904      	cmp	r1, #4
   222f0:	f040 80dc 	bne.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   222f4:	f848 6f04 	str.w	r6, [r8, #4]!
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   222f8:	3301      	adds	r3, #1
   222fa:	4599      	cmp	r9, r3
   222fc:	dcbf      	bgt.n	2227e <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1ee>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   222fe:	9901      	ldr	r1, [sp, #4]
   22300:	9b03      	ldr	r3, [sp, #12]
   22302:	3201      	adds	r2, #1
   22304:	4552      	cmp	r2, sl
   22306:	4449      	add	r1, r9
   22308:	443c      	add	r4, r7
   2230a:	4418      	add	r0, r3
   2230c:	dbad      	blt.n	2226a <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1da>
   2230e:	e9dd 3e17 	ldrd	r3, lr, [sp, #92]	@ 0x5c
   22312:	e9dd 6c19 	ldrd	r6, ip, [sp, #100]	@ 0x64
   22316:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   22318:	f8dd 8010 	ldr.w	r8, [sp, #16]
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2231c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   2231e:	f108 0801 	add.w	r8, r8, #1
    TFLITE_DCHECK_LT(i, size_);
   22322:	4417      	add	r7, r2
   22324:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   22326:	4598      	cmp	r8, r3
   22328:	4416      	add	r6, r2
   2232a:	44f4      	add	ip, lr
   2232c:	db8a      	blt.n	22244 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x1b4>
   2232e:	e9dd 4220 	ldrd	r4, r2, [sp, #128]	@ 0x80
   22332:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	@ 0x88
   22336:	4676      	mov	r6, lr
   22338:	469e      	mov	lr, r3
   2233a:	4633      	mov	r3, r6
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2233c:	9e05      	ldr	r6, [sp, #20]
   2233e:	3601      	adds	r6, #1
   22340:	9605      	str	r6, [sp, #20]
   22342:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
   22344:	4430      	add	r0, r6
   22346:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
   22348:	4414      	add	r4, r2
   2234a:	4431      	add	r1, r6
   2234c:	e759      	b.n	22202 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x172>
        reference_ops::Add(op_params, tflite::micro::GetTensorShape(input1),
   2234e:	a830      	add	r0, sp, #192	@ 0xc0
   22350:	f001 f92c 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   22354:	f1b9 0f00 	cmp.w	r9, #0
   22358:	f000 80a8 	beq.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
                           tflite::micro::GetTensorShape(input2),
   2235c:	4629      	mov	r1, r5
   2235e:	a82a      	add	r0, sp, #168	@ 0xa8
  return reinterpret_cast<const T*>(tensor->data.raw);
   22360:	f8d9 4000 	ldr.w	r4, [r9]
   22364:	f001 f922 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   22368:	2d00      	cmp	r5, #0
   2236a:	f000 809f 	beq.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
                           tflite::micro::GetTensorShape(output),
   2236e:	a824      	add	r0, sp, #144	@ 0x90
   22370:	4639      	mov	r1, r7
  return reinterpret_cast<const T*>(tensor->data.raw);
   22372:	682d      	ldr	r5, [r5, #0]
   22374:	f001 f91a 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   22378:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   2237c:	4293      	cmp	r3, r2
  return reinterpret_cast<T*>(tensor->data.raw);
   2237e:	6838      	ldr	r0, [r7, #0]
   22380:	f300 8094 	bgt.w	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
    for (int i = 0; i < size_; i++) {
   22384:	9930      	ldr	r1, [sp, #192]	@ 0xc0
   22386:	2900      	cmp	r1, #0
   22388:	f340 8092 	ble.w	224b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x420>
   2238c:	aa30      	add	r2, sp, #192	@ 0xc0
   2238e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int buffer_size = 1;
   22392:	2301      	movs	r3, #1
      buffer_size *= dims_data[i];
   22394:	f852 7f04 	ldr.w	r7, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   22398:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
   2239a:	fb07 f303 	mul.w	r3, r7, r3
    for (int i = 0; i < size_; i++) {
   2239e:	d1f9      	bne.n	22394 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x304>
   223a0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
   223a2:	f8dd c090 	ldr.w	ip, [sp, #144]	@ 0x90
   223a6:	2900      	cmp	r1, #0
   223a8:	f340 8093 	ble.w	224d2 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x442>
   223ac:	aa2a      	add	r2, sp, #168	@ 0xa8
   223ae:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int buffer_size = 1;
   223b2:	2701      	movs	r7, #1
      buffer_size *= dims_data[i];
   223b4:	f852 ef04 	ldr.w	lr, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   223b8:	428a      	cmp	r2, r1
      buffer_size *= dims_data[i];
   223ba:	fb0e f707 	mul.w	r7, lr, r7
    for (int i = 0; i < size_; i++) {
   223be:	d1f9      	bne.n	223b4 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x324>
   223c0:	f1bc 0f00 	cmp.w	ip, #0
   223c4:	f340 8083 	ble.w	224ce <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x43e>
   223c8:	aa24      	add	r2, sp, #144	@ 0x90
    int buffer_size = 1;
   223ca:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
   223cc:	f04f 0e00 	mov.w	lr, #0
      buffer_size *= dims_data[i];
   223d0:	f852 9f04 	ldr.w	r9, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   223d4:	f10e 0e01 	add.w	lr, lr, #1
   223d8:	45e6      	cmp	lr, ip
      buffer_size *= dims_data[i];
   223da:	fb09 f101 	mul.w	r1, r9, r1
    for (int i = 0; i < size_; i++) {
   223de:	dbf7      	blt.n	223d0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x340>
  TFLITE_CHECK_EQ(size_1, size_2);
   223e0:	429f      	cmp	r7, r3
   223e2:	d163      	bne.n	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_CHECK_EQ(size_2, size_3);
   223e4:	4299      	cmp	r1, r3
   223e6:	d161      	bne.n	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK(input1_shift == 0 || params.input2_shift == 0);
   223e8:	2e00      	cmp	r6, #0
   223ea:	d059      	beq.n	224a0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x410>
   223ec:	f1b8 0f00 	cmp.w	r8, #0
   223f0:	d15c      	bne.n	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
  TFLITE_DCHECK_LE(input1_shift, 0);
   223f2:	2e00      	cmp	r6, #0
   223f4:	dc5a      	bgt.n	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
      input1_shift == 0 ? -params.input2_shift : -input1_shift;
   223f6:	4622      	mov	r2, r4
   223f8:	4276      	negs	r6, r6
      input1_shift == 0 ? input1_data : input2_data;
   223fa:	462c      	mov	r4, r5
  const int32_t* shift_input = input1_shift == 0 ? input2_data : input1_data;
   223fc:	4615      	mov	r5, r2
  for (int i = 0; i < flat_size; i++) {
   223fe:	2b00      	cmp	r3, #0
   22400:	f77f ae56 	ble.w	220b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
   22404:	2e1f      	cmp	r6, #31
    F0 input_ready_scaled = F0::FromRaw(not_shift_input[i]);
   22406:	f9b4 c000 	ldrsh.w	ip, [r4]
        gemmlowp::RoundingDivideByPOT(shift_input[i], input_right_shift));
   2240a:	682a      	ldr	r2, [r5, #0]
   2240c:	dc5d      	bgt.n	224ca <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x43a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   2240e:	2101      	movs	r1, #1
   22410:	40b1      	lsls	r1, r6
   22412:	3901      	subs	r1, #1
  return a ? BitNot(zero) : zero;
   22414:	0fd7      	lsrs	r7, r2, #31
  return a & b;
   22416:	ea02 0e01 	and.w	lr, r2, r1
  return a + b;
   2241a:	eb07 0761 	add.w	r7, r7, r1, asr #1
  return a >> offset;
   2241e:	4132      	asrs	r2, r6
  return a + b;
   22420:	4577      	cmp	r7, lr
   22422:	bfb8      	it	lt
   22424:	3201      	addlt	r2, #1
  std::int32_t sum = a32 + b32;
   22426:	fa0c fe82 	sxtah	lr, ip, r2
   2242a:	4f2d      	ldr	r7, [pc, #180]	@ (224e0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x450>)
   2242c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   2242e:	f647 7cff 	movw	ip, #32767	@ 0x7fff
   22432:	42ba      	cmp	r2, r7
   22434:	bfb8      	it	lt
   22436:	463a      	movlt	r2, r7
   22438:	45e6      	cmp	lr, ip
   2243a:	4690      	mov	r8, r2
   2243c:	bfa8      	it	ge
   2243e:	46e6      	movge	lr, ip
      if (__a < __b)
   22440:	45c6      	cmp	lr, r8
      if (__b < __a)
   22442:	9f08      	ldr	r7, [sp, #32]
      if (__a < __b)
   22444:	4672      	mov	r2, lr
   22446:	bfb8      	it	lt
   22448:	4642      	movlt	r2, r8
      if (__b < __a)
   2244a:	42ba      	cmp	r2, r7
   2244c:	bfa8      	it	ge
   2244e:	463a      	movge	r2, r7
  for (int i = 0; i < flat_size; i++) {
   22450:	2b01      	cmp	r3, #1
    output_data[i] = clamped_output;
   22452:	6002      	str	r2, [r0, #0]
  return a >> offset;
   22454:	ea4f 0e61 	mov.w	lr, r1, asr #1
  for (int i = 0; i < flat_size; i++) {
   22458:	f43f ae2a 	beq.w	220b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
   2245c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   22460:	3b04      	subs	r3, #4
   22462:	4647      	mov	r7, r8
   22464:	469b      	mov	fp, r3
        gemmlowp::RoundingDivideByPOT(shift_input[i], input_right_shift));
   22466:	f855 2f04 	ldr.w	r2, [r5, #4]!
  std::int32_t b32 = b;
   2246a:	f934 8f04 	ldrsh.w	r8, [r4, #4]!
   2246e:	9b08      	ldr	r3, [sp, #32]
  return a & b;
   22470:	ea02 0a01 	and.w	sl, r2, r1
  return a + b;
   22474:	eb0e 79d2 	add.w	r9, lr, r2, lsr #31
  return a >> offset;
   22478:	4132      	asrs	r2, r6
  return a + b;
   2247a:	45ca      	cmp	sl, r9
   2247c:	bfc8      	it	gt
   2247e:	3201      	addgt	r2, #1
  std::int32_t sum = a32 + b32;
   22480:	fa08 f282 	sxtah	r2, r8, r2
   22484:	4562      	cmp	r2, ip
   22486:	bfa8      	it	ge
   22488:	4662      	movge	r2, ip
      if (__a < __b)
   2248a:	42ba      	cmp	r2, r7
   2248c:	bfb8      	it	lt
   2248e:	463a      	movlt	r2, r7
      if (__b < __a)
   22490:	429a      	cmp	r2, r3
   22492:	bfa8      	it	ge
   22494:	461a      	movge	r2, r3
  for (int i = 0; i < flat_size; i++) {
   22496:	455c      	cmp	r4, fp
    output_data[i] = clamped_output;
   22498:	f840 2f04 	str.w	r2, [r0, #4]!
  for (int i = 0; i < flat_size; i++) {
   2249c:	d1e3      	bne.n	22466 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x3d6>
   2249e:	e607      	b.n	220b0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x20>
  TFLITE_DCHECK_LE(params.input2_shift, 0);
   224a0:	f1b8 0f00 	cmp.w	r8, #0
      input1_shift == 0 ? -params.input2_shift : -input1_shift;
   224a4:	bfd8      	it	le
   224a6:	f1c8 0600 	rsble	r6, r8, #0
  TFLITE_DCHECK_LE(params.input2_shift, 0);
   224aa:	dda8      	ble.n	223fe <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x36e>
  TFLITE_DCHECK(tensor != nullptr);
   224ac:	f002 fe5c 	bl	25168 <abort>
   224b0:	992a      	ldr	r1, [sp, #168]	@ 0xa8
   224b2:	f8dd c090 	ldr.w	ip, [sp, #144]	@ 0x90
   224b6:	2900      	cmp	r1, #0
    int buffer_size = 1;
   224b8:	f04f 0301 	mov.w	r3, #1
    for (int i = 0; i < size_; i++) {
   224bc:	f73f af76 	bgt.w	223ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x31c>
   224c0:	f1bc 0f00 	cmp.w	ip, #0
   224c4:	dd90      	ble.n	223e8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x358>
    int buffer_size = 1;
   224c6:	2701      	movs	r7, #1
   224c8:	e77e      	b.n	223c8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x338>
   224ca:	f7fe fcf5 	bl	20eb8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i.part.0>
   224ce:	2101      	movs	r1, #1
   224d0:	e786      	b.n	223e0 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x350>
    for (int i = 0; i < size_; i++) {
   224d2:	f1bc 0f00 	cmp.w	ip, #0
   224d6:	dcf6      	bgt.n	224c6 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x436>
  TFLITE_CHECK_EQ(size_1, size_2);
   224d8:	2b01      	cmp	r3, #1
   224da:	d085      	beq.n	223e8 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x358>
   224dc:	e7e6      	b.n	224ac <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0+0x41c>
   224de:	bf00      	nop
   224e0:	ffff8000 	.word	0xffff8000

000224e4 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EvalAdd(TfLiteContext* context, TfLiteNode* node) {
   224e4:	b570      	push	{r4, r5, r6, lr}
      tflite::micro::GetEvalInput(context, node, kInputTensor1);
   224e6:	2200      	movs	r2, #0
TfLiteStatus EvalAdd(TfLiteContext* context, TfLiteNode* node) {
   224e8:	4605      	mov	r5, r0
   224ea:	460c      	mov	r4, r1
      tflite::micro::GetEvalInput(context, node, kInputTensor1);
   224ec:	f001 f838 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
   224f0:	2201      	movs	r2, #1
   224f2:	4621      	mov	r1, r4
      tflite::micro::GetEvalInput(context, node, kInputTensor1);
   224f4:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
   224f6:	4628      	mov	r0, r5
   224f8:	f001 f832 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
   224fc:	2200      	movs	r2, #0
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
   224fe:	4603      	mov	r3, r0
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
   22500:	4621      	mov	r1, r4
   22502:	4628      	mov	r0, r5
      tflite::micro::GetEvalInput(context, node, kInputTensor2);
   22504:	461d      	mov	r5, r3
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
   22506:	f001 f845 	bl	23594 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
   2250a:	4603      	mov	r3, r0
  TFLITE_DCHECK(node->user_data != nullptr);
   2250c:	68e0      	ldr	r0, [r4, #12]
   2250e:	b1c0      	cbz	r0, 22542 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode+0x5e>
  if (output->type == kTfLiteFloat32) {
   22510:	7a1c      	ldrb	r4, [r3, #8]
   22512:	3c01      	subs	r4, #1
   22514:	2c08      	cmp	r4, #8
   22516:	d80c      	bhi.n	22532 <_ZN6tflite7EvalAddEP13TfLiteContextP10TfLiteNode+0x4e>
   22518:	e8df f004 	tbb	[pc, r4]
   2251c:	0b0b050d 	.word	0x0b0b050d
   22520:	0b050b0b 	.word	0x0b050b0b
   22524:	05          	.byte	0x05
   22525:	00          	.byte	0x00
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
   22526:	462a      	mov	r2, r5
   22528:	4631      	mov	r1, r6
}
   2252a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
   2252e:	f7ff bdaf 	b.w	22090 <_ZN6tflite12_GLOBAL__N_116EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
  if (output->type == kTfLiteFloat32) {
   22532:	2001      	movs	r0, #1
}
   22534:	bd70      	pop	{r4, r5, r6, pc}
    EvalAddFloat(context, node, params, data, input1, input2, output);
   22536:	462a      	mov	r2, r5
   22538:	4631      	mov	r1, r6
   2253a:	f7fe ff7b 	bl	21434 <_ZN6tflite12_GLOBAL__N_112EvalAddFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS0_6OpDataEPK16TfLiteEvalTensorSC_PSA_.isra.0>
  return kTfLiteOk;
   2253e:	2000      	movs	r0, #0
}
   22540:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
   22542:	f002 fe11 	bl	25168 <abort>
   22546:	bf00      	nop

00022548 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   22548:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2254a:	b10b      	cbz	r3, 22550 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   2254c:	213c      	movs	r1, #60	@ 0x3c
   2254e:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   22550:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   22552:	f002 fe09 	bl	25168 <abort>
   22556:	bf00      	nop

00022558 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   22558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   2255c:	f8d1 800c 	ldr.w	r8, [r1, #12]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   22560:	b0af      	sub	sp, #188	@ 0xbc
  TFLITE_DCHECK(node->user_data != nullptr);
   22562:	f1b8 0f00 	cmp.w	r8, #0
   22566:	f000 811b 	beq.w	227a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   2256a:	f8d1 9010 	ldr.w	r9, [r1, #16]
   2256e:	460d      	mov	r5, r1
   22570:	f1b9 0f00 	cmp.w	r9, #0
   22574:	f000 8114 	beq.w	227a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
   22578:	6884      	ldr	r4, [r0, #8]
  OpData* data = static_cast<OpData*>(node->user_data);

  MicroContext* micro_context = GetMicroContext(context);

  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   2257a:	4b8a      	ldr	r3, [pc, #552]	@ (227a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
   2257c:	681a      	ldr	r2, [r3, #0]
   2257e:	6823      	ldr	r3, [r4, #0]
   22580:	4607      	mov	r7, r0
   22582:	699b      	ldr	r3, [r3, #24]
   22584:	4620      	mov	r0, r4
   22586:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   22588:	4606      	mov	r6, r0
   2258a:	2800      	cmp	r0, #0
   2258c:	f000 80b0 	beq.w	226f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>
  TfLiteTensor* filter =
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
   22590:	4b85      	ldr	r3, [pc, #532]	@ (227a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
   22592:	681a      	ldr	r2, [r3, #0]
   22594:	6823      	ldr	r3, [r4, #0]
   22596:	4629      	mov	r1, r5
   22598:	699b      	ldr	r3, [r3, #24]
   2259a:	4620      	mov	r0, r4
   2259c:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
   2259e:	4682      	mov	sl, r0
   225a0:	2800      	cmp	r0, #0
   225a2:	f000 80a5 	beq.w	226f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>
  TfLiteTensor* output =
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
   225a6:	4b81      	ldr	r3, [pc, #516]	@ (227ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
   225a8:	681a      	ldr	r2, [r3, #0]
   225aa:	6823      	ldr	r3, [r4, #0]
   225ac:	4629      	mov	r1, r5
   225ae:	69db      	ldr	r3, [r3, #28]
   225b0:	4620      	mov	r0, r4
   225b2:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   225b4:	9008      	str	r0, [sp, #32]
   225b6:	2800      	cmp	r0, #0
   225b8:	f000 809a 	beq.w	226f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>
inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
  if (tensor == nullptr) {
    return RuntimeShape();
  }

  TfLiteIntArray* dims = tensor->dims;
   225bc:	6973      	ldr	r3, [r6, #20]
  const int dims_size = dims->size;
   225be:	930b      	str	r3, [sp, #44]	@ 0x2c
   225c0:	4619      	mov	r1, r3
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   225c2:	a819      	add	r0, sp, #100	@ 0x64
   225c4:	f851 3b04 	ldr.w	r3, [r1], #4
      : size_(dimensions_count) {
   225c8:	9318      	str	r3, [sp, #96]	@ 0x60
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   225ca:	009a      	lsls	r2, r3, #2
   225cc:	930a      	str	r3, [sp, #40]	@ 0x28
   225ce:	f7f5 ffd7 	bl	18580 <memcpy>
  TfLiteIntArray* dims = tensor->dims;
   225d2:	9a08      	ldr	r2, [sp, #32]
   225d4:	f8d2 b014 	ldr.w	fp, [r2, #20]
  const int dims_size = dims->size;
   225d8:	4659      	mov	r1, fp
   225da:	a81f      	add	r0, sp, #124	@ 0x7c
   225dc:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
   225e0:	921e      	str	r2, [sp, #120]	@ 0x78
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   225e2:	9209      	str	r2, [sp, #36]	@ 0x24
   225e4:	0092      	lsls	r2, r2, #2
   225e6:	f7f5 ffcb 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   225ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
   225ec:	2800      	cmp	r0, #0
   225ee:	f340 80d7 	ble.w	227a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
   225f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    return dims_[i];
   225f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
    TFLITE_DCHECK_LT(i, size_);
   225f6:	2b00      	cmp	r3, #0
   225f8:	f340 80d2 	ble.w	227a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   225fc:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   225fe:	4291      	cmp	r1, r2
   22600:	f040 80ce 	bne.w	227a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
  RuntimeShape output_shape = GetTensorShape(output);

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
  input_dims.h = input->dims->data[1];
   22604:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
   22606:	920c      	str	r2, [sp, #48]	@ 0x30
  input_dims.h = input->dims->data[1];
   22608:	6899      	ldr	r1, [r3, #8]
  input_dims.w = input->dims->data[2];
   2260a:	68db      	ldr	r3, [r3, #12]
  input_dims.h = input->dims->data[1];
   2260c:	910d      	str	r1, [sp, #52]	@ 0x34
   2260e:	2803      	cmp	r0, #3
  input_dims.w = input->dims->data[2];
   22610:	930e      	str	r3, [sp, #56]	@ 0x38
   22612:	f340 80c5 	ble.w	227a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>
   22616:	9909      	ldr	r1, [sp, #36]	@ 0x24
    return dims_[i];
   22618:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  input_dims.c = input_shape.Dims(3);
   2261a:	930f      	str	r3, [sp, #60]	@ 0x3c
    TFLITE_DCHECK_LT(i, size_);
   2261c:	2903      	cmp	r1, #3
   2261e:	f340 80bf 	ble.w	227a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x248>

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
  filter_dims.h = filter->dims->data[1];
   22622:	f8da 1014 	ldr.w	r1, [sl, #20]
  filter_dims.w = filter->dims->data[2];
  filter_dims.c = input_dims.c;

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
   22626:	9214      	str	r2, [sp, #80]	@ 0x50
  filter_dims.h = filter->dims->data[1];
   22628:	688a      	ldr	r2, [r1, #8]
   2262a:	9211      	str	r2, [sp, #68]	@ 0x44
  filter_dims.w = filter->dims->data[2];
   2262c:	68ca      	ldr	r2, [r1, #12]
  output_dims.h = output->dims->data[1];
  output_dims.w = output->dims->data[2];
  output_dims.c = output_shape.Dims(3);

  if (filter->type == kTfLiteInt4) {
   2262e:	f89a 001c 	ldrb.w	r0, [sl, #28]
  filter_dims.c = input_dims.c;
   22632:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  output_dims.h = output->dims->data[1];
   22636:	f8db 3008 	ldr.w	r3, [fp, #8]
   2263a:	9315      	str	r3, [sp, #84]	@ 0x54
  output_dims.w = output->dims->data[2];
   2263c:	f8db 300c 	ldr.w	r3, [fp, #12]
   22640:	9316      	str	r3, [sp, #88]	@ 0x58
  if (filter->type == kTfLiteInt4) {
   22642:	2812      	cmp	r0, #18
    return dims_[i];
   22644:	9b22      	ldr	r3, [sp, #136]	@ 0x88
  filter_dims.n = output_shape.Dims(3);
   22646:	9310      	str	r3, [sp, #64]	@ 0x40
  output_dims.c = output_shape.Dims(3);
   22648:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (filter->type == kTfLiteInt4) {
   2264a:	d06d      	beq.n	22728 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1d0>
            .FlatSize();
    context->RequestScratchBufferInArena(
        context, filter_size, &data->reference_op_data.filter_buffer_index);
  }

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   2264c:	7f33      	ldrb	r3, [r6, #28]
   2264e:	2b09      	cmp	r3, #9
   22650:	d053      	beq.n	226fa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a2>
   22652:	2b07      	cmp	r3, #7
   22654:	d051      	beq.n	226fa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a2>
    data->reference_op_data.per_channel_output_shift =
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
            context, num_channels * sizeof(int32_t)));
  }

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
   22656:	e9cd 3805 	strd	r3, r8, [sp, #20]
   2265a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
   2265c:	9304      	str	r3, [sp, #16]
   2265e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
   22660:	9303      	str	r3, [sp, #12]
   22662:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   22664:	9302      	str	r3, [sp, #8]
   22666:	9b12      	ldr	r3, [sp, #72]	@ 0x48
   22668:	9301      	str	r3, [sp, #4]
   2266a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2266c:	9300      	str	r3, [sp, #0]
   2266e:	4629      	mov	r1, r5
   22670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   22672:	464a      	mov	r2, r9
   22674:	4638      	mov	r0, r7
   22676:	f000 fa77 	bl	22b68 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
   2267a:	4605      	mov	r5, r0
   2267c:	2800      	cmp	r0, #0
   2267e:	d138      	bne.n	226f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   22680:	7f33      	ldrb	r3, [r6, #28]
   22682:	2b09      	cmp	r3, #9
   22684:	d014      	beq.n	226b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>
   22686:	2b07      	cmp	r3, #7
   22688:	d012      	beq.n	226b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>
    } else {
      data->buffer_idx = -1;
    }
  }

  micro_context->DeallocateTempTfLiteTensor(output);
   2268a:	6823      	ldr	r3, [r4, #0]
   2268c:	9908      	ldr	r1, [sp, #32]
   2268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   22690:	4620      	mov	r0, r4
   22692:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
   22694:	6823      	ldr	r3, [r4, #0]
   22696:	4631      	mov	r1, r6
   22698:	4620      	mov	r0, r4
   2269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   2269c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
   2269e:	6823      	ldr	r3, [r4, #0]
   226a0:	4620      	mov	r0, r4
   226a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   226a4:	4651      	mov	r1, sl
   226a6:	4798      	blx	r3

  return kTfLiteOk;
}
   226a8:	4628      	mov	r0, r5
   226aa:	b02f      	add	sp, #188	@ 0xbc
   226ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conv_params.output_offset = output->params.zero_point;
   226b0:	9a08      	ldr	r2, [sp, #32]
    conv_params.stride.h = params.stride_height;
   226b2:	f8d9 0008 	ldr.w	r0, [r9, #8]
    conv_params.input_offset = -input->params.zero_point;
   226b6:	68f1      	ldr	r1, [r6, #12]
    conv_params.output_offset = output->params.zero_point;
   226b8:	68d2      	ldr	r2, [r2, #12]
    conv_params.stride.h = params.stride_height;
   226ba:	9027      	str	r0, [sp, #156]	@ 0x9c
    conv_params.stride.w = params.stride_width;
   226bc:	f8d9 0004 	ldr.w	r0, [r9, #4]
   226c0:	9026      	str	r0, [sp, #152]	@ 0x98
    conv_params.dilation.h = params.dilation_height_factor;
   226c2:	f8d9 0014 	ldr.w	r0, [r9, #20]
   226c6:	902b      	str	r0, [sp, #172]	@ 0xac
    conv_params.dilation.w = params.dilation_width_factor;
   226c8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   226cc:	902a      	str	r0, [sp, #168]	@ 0xa8
    conv_params.padding.h = data->reference_op_data.padding.height;
   226ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
   226d2:	9029      	str	r0, [sp, #164]	@ 0xa4
    conv_params.padding.w = data->reference_op_data.padding.width;
   226d4:	f8d8 0000 	ldr.w	r0, [r8]
   226d8:	9028      	str	r0, [sp, #160]	@ 0xa0
    conv_params.input_offset = -input->params.zero_point;
   226da:	4248      	negs	r0, r1
    conv_params.output_offset = output->params.zero_point;
   226dc:	9225      	str	r2, [sp, #148]	@ 0x94
    conv_params.input_offset = -input->params.zero_point;
   226de:	9024      	str	r0, [sp, #144]	@ 0x90
    conv_params.activation.min = data->reference_op_data.output_activation_min;
   226e0:	e9d8 c00b 	ldrd	ip, r0, [r8, #44]	@ 0x2c
    if (input->type == kTfLiteInt8) {
   226e4:	2b09      	cmp	r3, #9
    conv_params.activation.min = data->reference_op_data.output_activation_min;
   226e6:	e9cd c02c 	strd	ip, r0, [sp, #176]	@ 0xb0
    if (input->type == kTfLiteInt8) {
   226ea:	d04a      	beq.n	22782 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   226ec:	430a      	orrs	r2, r1
   226ee:	d036      	beq.n	2275e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x206>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
   226f0:	2501      	movs	r5, #1
}
   226f2:	4628      	mov	r0, r5
   226f4:	b02f      	add	sp, #188	@ 0xbc
   226f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const int num_channels = filter->dims->data[kConvQuantizedDimension];
   226fa:	4b2d      	ldr	r3, [pc, #180]	@ (227b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x258>)
   226fc:	681a      	ldr	r2, [r3, #0]
   226fe:	f8da 3014 	ldr.w	r3, [sl, #20]
   22702:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
   22706:	4638      	mov	r0, r7
   22708:	6859      	ldr	r1, [r3, #4]
   2270a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
   2270c:	ea4f 0b81 	mov.w	fp, r1, lsl #2
   22710:	4659      	mov	r1, fp
   22712:	4798      	blx	r3
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
   22714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    data->reference_op_data.per_channel_output_multiplier =
   22716:	f8c8 0024 	str.w	r0, [r8, #36]	@ 0x24
        static_cast<int32_t*>(context->AllocatePersistentBuffer(
   2271a:	4659      	mov	r1, fp
   2271c:	4638      	mov	r0, r7
   2271e:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
   22720:	7f33      	ldrb	r3, [r6, #28]
    data->reference_op_data.per_channel_output_shift =
   22722:	f8c8 0028 	str.w	r0, [r8, #40]	@ 0x28
   22726:	e796      	b.n	22656 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
        RuntimeShape(filter->dims->size,
   22728:	f851 3b04 	ldr.w	r3, [r1], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   2272c:	9309      	str	r3, [sp, #36]	@ 0x24
   2272e:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   22732:	a825      	add	r0, sp, #148	@ 0x94
   22734:	465a      	mov	r2, fp
   22736:	f7f5 ff23 	bl	18580 <memcpy>
    for (int i = 0; i < size_; i++) {
   2273a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2273c:	2b00      	cmp	r3, #0
   2273e:	dd2d      	ble.n	2279c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>
   22740:	ab24      	add	r3, sp, #144	@ 0x90
   22742:	449b      	add	fp, r3
    int buffer_size = 1;
   22744:	2101      	movs	r1, #1
      buffer_size *= dims_data[i];
   22746:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   2274a:	459b      	cmp	fp, r3
      buffer_size *= dims_data[i];
   2274c:	fb02 f101 	mul.w	r1, r2, r1
    for (int i = 0; i < size_; i++) {
   22750:	d1f9      	bne.n	22746 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ee>
    context->RequestScratchBufferInArena(
   22752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
   22754:	f108 0234 	add.w	r2, r8, #52	@ 0x34
   22758:	4638      	mov	r0, r7
   2275a:	4798      	blx	r3
   2275c:	e776      	b.n	2264c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
      buf_size = arm_convolve_wrapper_s16_get_buffer_size(
   2275e:	a90c      	add	r1, sp, #48	@ 0x30
   22760:	ab14      	add	r3, sp, #80	@ 0x50
   22762:	aa10      	add	r2, sp, #64	@ 0x40
   22764:	a824      	add	r0, sp, #144	@ 0x90
   22766:	f7f8 fabf 	bl	1ace8 <arm_convolve_wrapper_s16_get_buffer_size>
   2276a:	4601      	mov	r1, r0
    if (buf_size > 0) {
   2276c:	2900      	cmp	r1, #0
   2276e:	dd10      	ble.n	22792 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x23a>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   22770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
   22772:	f108 0238 	add.w	r2, r8, #56	@ 0x38
   22776:	4638      	mov	r0, r7
   22778:	4798      	blx	r3
   2277a:	2800      	cmp	r0, #0
   2277c:	d085      	beq.n	2268a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x132>
   2277e:	4605      	mov	r5, r0
   22780:	e7b7      	b.n	226f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
      buf_size = arm_convolve_wrapper_s8_get_buffer_size(
   22782:	a90c      	add	r1, sp, #48	@ 0x30
   22784:	ab14      	add	r3, sp, #80	@ 0x50
   22786:	aa10      	add	r2, sp, #64	@ 0x40
   22788:	a824      	add	r0, sp, #144	@ 0x90
   2278a:	f7f8 fb27 	bl	1addc <arm_convolve_wrapper_s8_get_buffer_size>
   2278e:	4601      	mov	r1, r0
   22790:	e7ec      	b.n	2276c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x214>
      data->buffer_idx = -1;
   22792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   22796:	f8c8 3038 	str.w	r3, [r8, #56]	@ 0x38
   2279a:	e776      	b.n	2268a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x132>
   2279c:	2101      	movs	r1, #1
   2279e:	e7d8      	b.n	22752 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fa>
  TFLITE_DCHECK(node->user_data != nullptr);
   227a0:	f002 fce2 	bl	25168 <abort>
   227a4:	000409c4 	.word	0x000409c4
   227a8:	000409c0 	.word	0x000409c0
   227ac:	000409b8 	.word	0x000409b8
   227b0:	000409b4 	.word	0x000409b4

000227b4 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel16x8(
   227b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   227b8:	461e      	mov	r6, r3
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
  conv_params.dilation.w = params.dilation_width_factor;

  // Initialize cmsis_nn convolution parameters
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
   227ba:	6913      	ldr	r3, [r2, #16]
TfLiteStatus EvalQuantizedPerChannel16x8(
   227bc:	b0be      	sub	sp, #248	@ 0xf8
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
   227be:	425b      	negs	r3, r3
   227c0:	9334      	str	r3, [sp, #208]	@ 0xd0
  conv_params.dilation.h = params.dilation_height_factor;
   227c2:	694b      	ldr	r3, [r1, #20]
   227c4:	933b      	str	r3, [sp, #236]	@ 0xec
  conv_params.dilation.w = params.dilation_width_factor;
   227c6:	690b      	ldr	r3, [r1, #16]
   227c8:	933a      	str	r3, [sp, #232]	@ 0xe8
  conv_params.output_offset = data.reference_op_data.output_zero_point;
   227ca:	6993      	ldr	r3, [r2, #24]
   227cc:	9335      	str	r3, [sp, #212]	@ 0xd4
  conv_params.stride.h = params.stride_height;
   227ce:	688b      	ldr	r3, [r1, #8]
   227d0:	9337      	str	r3, [sp, #220]	@ 0xdc
  conv_params.stride.w = params.stride_width;
   227d2:	684b      	ldr	r3, [r1, #4]
   227d4:	9336      	str	r3, [sp, #216]	@ 0xd8
  conv_params.padding.h = data.reference_op_data.padding.height;
   227d6:	6853      	ldr	r3, [r2, #4]
   227d8:	9339      	str	r3, [sp, #228]	@ 0xe4
  conv_params.padding.w = data.reference_op_data.padding.width;
   227da:	6813      	ldr	r3, [r2, #0]
   227dc:	9338      	str	r3, [sp, #224]	@ 0xe0
  conv_params.activation.min = data.reference_op_data.output_activation_min;
   227de:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
TfLiteStatus EvalQuantizedPerChannel16x8(
   227e0:	f8dd 8118 	ldr.w	r8, [sp, #280]	@ 0x118
  conv_params.activation.min = data.reference_op_data.output_activation_min;
   227e4:	933c      	str	r3, [sp, #240]	@ 0xf0
  conv_params.activation.max = data.reference_op_data.output_activation_max;
   227e6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
   227e8:	933d      	str	r3, [sp, #244]	@ 0xf4
TfLiteStatus EvalQuantizedPerChannel16x8(
   227ea:	e9dd 5747 	ldrd	r5, r7, [sp, #284]	@ 0x11c

  // Initialize cmsis_nn per channel quantization parameters
  cmsis_nn_per_channel_quant_params quant_params;
  quant_params.multiplier = const_cast<int32_t*>(
      data.reference_op_data.per_channel_output_multiplier);
   227ee:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  quant_params.multiplier = const_cast<int32_t*>(
   227f0:	9309      	str	r3, [sp, #36]	@ 0x24
  quant_params.shift =
      const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);

  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   227f2:	4641      	mov	r1, r8
  quant_params.multiplier = const_cast<int32_t*>(
   227f4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
   227f6:	9308      	str	r3, [sp, #32]
TfLiteStatus EvalQuantizedPerChannel16x8(
   227f8:	4681      	mov	r9, r0
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   227fa:	a81c      	add	r0, sp, #112	@ 0x70
TfLiteStatus EvalQuantizedPerChannel16x8(
   227fc:	4614      	mov	r4, r2
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   227fe:	f000 fed5 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   22802:	4631      	mov	r1, r6
   22804:	a822      	add	r0, sp, #136	@ 0x88
   22806:	f000 fed1 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   2280a:	4639      	mov	r1, r7
   2280c:	a828      	add	r0, sp, #160	@ 0xa0
   2280e:	f000 fecd 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   22812:	4629      	mov	r1, r5
   22814:	a82e      	add	r0, sp, #184	@ 0xb8
   22816:	f000 fec9 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

  // Consistency check.
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   2281a:	e9dd 233c 	ldrd	r2, r3, [sp, #240]	@ 0xf0
   2281e:	429a      	cmp	r2, r3
   22820:	dc6e      	bgt.n	22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   22822:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   22824:	2b04      	cmp	r3, #4
   22826:	d16b      	bne.n	22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   22828:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   2282a:	2b04      	cmp	r3, #4
   2282c:	d168      	bne.n	22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2282e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
   22830:	2b04      	cmp	r3, #4
   22832:	d165      	bne.n	22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
    return dims_[i];
   22834:	9823      	ldr	r0, [sp, #140]	@ 0x8c
   22836:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
   22838:	4283      	cmp	r3, r0
   2283a:	d161      	bne.n	22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
   2283c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   2283e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   22840:	429a      	cmp	r2, r3
   22842:	d15d      	bne.n	22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
   22844:	f8dd e074 	ldr.w	lr, [sp, #116]	@ 0x74
   22848:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
   2284a:	4596      	cmp	lr, r2
   2284c:	d158      	bne.n	22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
  return tensor == nullptr ? nullptr
   2284e:	b18d      	cbz	r5, 22874 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc0>
  const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
   22850:	682a      	ldr	r2, [r5, #0]
   22852:	b17a      	cbz	r2, 22874 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc0>
    for (int i = 0; i < size_; i++) {
   22854:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
   22856:	2a00      	cmp	r2, #0
   22858:	dd50      	ble.n	228fc <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x148>
   2285a:	f10d 0cb8 	add.w	ip, sp, #184	@ 0xb8
   2285e:	eb0c 0a82 	add.w	sl, ip, r2, lsl #2
    int buffer_size = 1;
   22862:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
   22864:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    for (int i = 0; i < size_; i++) {
   22868:	45d4      	cmp	ip, sl
      buffer_size *= dims_data[i];
   2286a:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
   2286e:	d1f9      	bne.n	22864 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xb0>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   22870:	4596      	cmp	lr, r2
   22872:	d145      	bne.n	22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  // Input
  cmsis_nn_dims input_dims;
  input_dims.n = batch_size;
  input_dims.h = input_shape.Dims(1);
  input_dims.w = input_shape.Dims(2);
  input_dims.c = input_depth;
   22874:	930f      	str	r3, [sp, #60]	@ 0x3c
  // Filter
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_depth;
  filter_dims.h = filter_shape.Dims(1);
  filter_dims.w = filter_shape.Dims(2);
  filter_dims.c = input_depth;
   22876:	9313      	str	r3, [sp, #76]	@ 0x4c

  // Bias
  cmsis_nn_dims bias_dims;
  bias_dims.n = 1;
   22878:	2301      	movs	r3, #1
  bias_dims.h = 1;
   2287a:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  bias_dims.w = 1;
   2287e:	9316      	str	r3, [sp, #88]	@ 0x58
  output_dims.w = output_shape.Dims(2);
  output_dims.c = output_depth;

  // Initialize cmsis_nn context
  cmsis_nn_context ctx;
  ctx.buf = nullptr;
   22880:	2300      	movs	r3, #0
  ctx.size = 0;
   22882:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  input_dims.h = input_shape.Dims(1);
   22886:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   22888:	930d      	str	r3, [sp, #52]	@ 0x34
  input_dims.w = input_shape.Dims(2);
   2288a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   2288c:	930e      	str	r3, [sp, #56]	@ 0x38
  filter_dims.h = filter_shape.Dims(1);
   2288e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78

  if (data.buffer_idx > -1) {
   22890:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  filter_dims.h = filter_shape.Dims(1);
   22892:	9311      	str	r3, [sp, #68]	@ 0x44
  filter_dims.w = filter_shape.Dims(2);
   22894:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
   22896:	9312      	str	r3, [sp, #72]	@ 0x48
  output_dims.h = output_shape.Dims(1);
   22898:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   2289a:	9319      	str	r3, [sp, #100]	@ 0x64
  if (data.buffer_idx > -1) {
   2289c:	2900      	cmp	r1, #0
  output_dims.w = output_shape.Dims(2);
   2289e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
  input_dims.n = batch_size;
   228a0:	900c      	str	r0, [sp, #48]	@ 0x30
  output_dims.n = batch_size;
   228a2:	9018      	str	r0, [sp, #96]	@ 0x60
  filter_dims.n = output_depth;
   228a4:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
  bias_dims.c = output_depth;
   228a8:	f8cd e05c 	str.w	lr, [sp, #92]	@ 0x5c
  output_dims.c = output_depth;
   228ac:	f8cd e06c 	str.w	lr, [sp, #108]	@ 0x6c
  output_dims.w = output_shape.Dims(2);
   228b0:	931a      	str	r3, [sp, #104]	@ 0x68
  if (data.buffer_idx > -1) {
   228b2:	db04      	blt.n	228be <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x10a>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   228b4:	f8d9 3040 	ldr.w	r3, [r9, #64]	@ 0x40
   228b8:	4648      	mov	r0, r9
   228ba:	4798      	blx	r3
   228bc:	900a      	str	r0, [sp, #40]	@ 0x28
  TFLITE_DCHECK(tensor != nullptr);
   228be:	b1fe      	cbz	r6, 22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  return reinterpret_cast<const T*>(tensor->data.raw);
   228c0:	6833      	ldr	r3, [r6, #0]
  TFLITE_DCHECK(tensor != nullptr);
   228c2:	f1b8 0f00 	cmp.w	r8, #0
   228c6:	d01b      	beq.n	22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
  return reinterpret_cast<const T*>(tensor->data.raw);
   228c8:	f8d8 1000 	ldr.w	r1, [r8]
  return tensor == nullptr ? nullptr
   228cc:	b105      	cbz	r5, 228d0 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x11c>
   228ce:	682d      	ldr	r5, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
   228d0:	b1b7      	cbz	r7, 22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
    // Note: ctx.size is currently not used in cmsis_nn.
    // The buffer should be allocated in the Prepare function through
    // arm_convolve_wrapper_s8_get_buffer_size
  }

  TFLITE_DCHECK_EQ(
   228d2:	6838      	ldr	r0, [r7, #0]
   228d4:	9300      	str	r3, [sp, #0]
   228d6:	aa18      	add	r2, sp, #96	@ 0x60
   228d8:	e9cd 2005 	strd	r2, r0, [sp, #20]
   228dc:	a814      	add	r0, sp, #80	@ 0x50
   228de:	aa10      	add	r2, sp, #64	@ 0x40
   228e0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   228e4:	e9cd 0503 	strd	r0, r5, [sp, #12]
   228e8:	ab0c      	add	r3, sp, #48	@ 0x30
   228ea:	aa08      	add	r2, sp, #32
   228ec:	a934      	add	r1, sp, #208	@ 0xd0
   228ee:	a80a      	add	r0, sp, #40	@ 0x28
   228f0:	f7f8 f9bc 	bl	1ac6c <arm_convolve_wrapper_s16>
   228f4:	b920      	cbnz	r0, 22900 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x14c>
          tflite::micro::GetOptionalTensorData<int64_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int16_t>(output)),
      ARM_CMSIS_NN_SUCCESS);

  return kTfLiteOk;
}
   228f6:	b03e      	add	sp, #248	@ 0xf8
   228f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int buffer_size = 1;
   228fc:	2201      	movs	r2, #1
   228fe:	e7b7      	b.n	22870 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xbc>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   22900:	f002 fc32 	bl	25168 <abort>

00022904 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22908:	461e      	mov	r6, r3
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
   2290a:	6913      	ldr	r3, [r2, #16]
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   2290c:	b0be      	sub	sp, #248	@ 0xf8
  conv_params.input_offset = -data.reference_op_data.input_zero_point;
   2290e:	425b      	negs	r3, r3
   22910:	9334      	str	r3, [sp, #208]	@ 0xd0
  conv_params.dilation.h = params.dilation_height_factor;
   22912:	694b      	ldr	r3, [r1, #20]
   22914:	933b      	str	r3, [sp, #236]	@ 0xec
  conv_params.dilation.w = params.dilation_width_factor;
   22916:	690b      	ldr	r3, [r1, #16]
   22918:	933a      	str	r3, [sp, #232]	@ 0xe8
  conv_params.output_offset = data.reference_op_data.output_zero_point;
   2291a:	6993      	ldr	r3, [r2, #24]
   2291c:	9335      	str	r3, [sp, #212]	@ 0xd4
  conv_params.stride.h = params.stride_height;
   2291e:	688b      	ldr	r3, [r1, #8]
   22920:	9337      	str	r3, [sp, #220]	@ 0xdc
  conv_params.stride.w = params.stride_width;
   22922:	684b      	ldr	r3, [r1, #4]
   22924:	9336      	str	r3, [sp, #216]	@ 0xd8
  conv_params.padding.h = data.reference_op_data.padding.height;
   22926:	6853      	ldr	r3, [r2, #4]
   22928:	9339      	str	r3, [sp, #228]	@ 0xe4
  conv_params.padding.w = data.reference_op_data.padding.width;
   2292a:	6813      	ldr	r3, [r2, #0]
   2292c:	9338      	str	r3, [sp, #224]	@ 0xe0
  conv_params.activation.min = data.reference_op_data.output_activation_min;
   2292e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22930:	f8dd 8118 	ldr.w	r8, [sp, #280]	@ 0x118
  conv_params.activation.min = data.reference_op_data.output_activation_min;
   22934:	933c      	str	r3, [sp, #240]	@ 0xf0
  conv_params.activation.max = data.reference_op_data.output_activation_max;
   22936:	6b13      	ldr	r3, [r2, #48]	@ 0x30
   22938:	933d      	str	r3, [sp, #244]	@ 0xf4
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   2293a:	e9dd 5747 	ldrd	r5, r7, [sp, #284]	@ 0x11c
      data.reference_op_data.per_channel_output_multiplier);
   2293e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  quant_params.multiplier = const_cast<int32_t*>(
   22940:	9309      	str	r3, [sp, #36]	@ 0x24
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22942:	4641      	mov	r1, r8
  quant_params.multiplier = const_cast<int32_t*>(
   22944:	6a53      	ldr	r3, [r2, #36]	@ 0x24
   22946:	9308      	str	r3, [sp, #32]
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22948:	4681      	mov	r9, r0
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   2294a:	a81c      	add	r0, sp, #112	@ 0x70
TfLiteStatus EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   2294c:	4614      	mov	r4, r2
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   2294e:	f000 fe2d 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   22952:	4631      	mov	r1, r6
   22954:	a822      	add	r0, sp, #136	@ 0x88
   22956:	f000 fe29 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   2295a:	4639      	mov	r1, r7
   2295c:	a828      	add	r0, sp, #160	@ 0xa0
   2295e:	f000 fe25 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   22962:	4629      	mov	r1, r5
   22964:	a82e      	add	r0, sp, #184	@ 0xb8
   22966:	f000 fe21 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   2296a:	e9dd 233c 	ldrd	r2, r3, [sp, #240]	@ 0xf0
   2296e:	429a      	cmp	r2, r3
   22970:	dc6b      	bgt.n	22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   22972:	9b22      	ldr	r3, [sp, #136]	@ 0x88
   22974:	2b04      	cmp	r3, #4
   22976:	d168      	bne.n	22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   22978:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   2297a:	2b04      	cmp	r3, #4
   2297c:	d165      	bne.n	22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2297e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
   22980:	2b04      	cmp	r3, #4
   22982:	d162      	bne.n	22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
    return dims_[i];
   22984:	9823      	ldr	r0, [sp, #140]	@ 0x8c
   22986:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
   22988:	4283      	cmp	r3, r0
   2298a:	d15e      	bne.n	22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
   2298c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   2298e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   22990:	4293      	cmp	r3, r2
   22992:	d15a      	bne.n	22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
   22994:	f8dd e074 	ldr.w	lr, [sp, #116]	@ 0x74
   22998:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
   2299a:	4572      	cmp	r2, lr
   2299c:	d155      	bne.n	22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  return tensor == nullptr ? nullptr
   2299e:	b18d      	cbz	r5, 229c4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc0>
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
   229a0:	682a      	ldr	r2, [r5, #0]
   229a2:	b17a      	cbz	r2, 229c4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc0>
    for (int i = 0; i < size_; i++) {
   229a4:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
   229a6:	2a00      	cmp	r2, #0
   229a8:	dd4d      	ble.n	22a46 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x142>
   229aa:	f10d 0cb8 	add.w	ip, sp, #184	@ 0xb8
   229ae:	eb0c 0a82 	add.w	sl, ip, r2, lsl #2
    int buffer_size = 1;
   229b2:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
   229b4:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    for (int i = 0; i < size_; i++) {
   229b8:	45d4      	cmp	ip, sl
      buffer_size *= dims_data[i];
   229ba:	fb01 f202 	mul.w	r2, r1, r2
    for (int i = 0; i < size_; i++) {
   229be:	d1f9      	bne.n	229b4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xb0>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   229c0:	4572      	cmp	r2, lr
   229c2:	d142      	bne.n	22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  input_dims.c = input_depth;
   229c4:	930f      	str	r3, [sp, #60]	@ 0x3c
  filter_dims.c = input_depth;
   229c6:	9313      	str	r3, [sp, #76]	@ 0x4c
  bias_dims.n = 1;
   229c8:	2301      	movs	r3, #1
  bias_dims.h = 1;
   229ca:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  bias_dims.w = 1;
   229ce:	9316      	str	r3, [sp, #88]	@ 0x58
  ctx.buf = nullptr;
   229d0:	2300      	movs	r3, #0
  ctx.size = 0;
   229d2:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  input_dims.h = input_shape.Dims(1);
   229d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
   229d8:	930d      	str	r3, [sp, #52]	@ 0x34
  input_dims.w = input_shape.Dims(2);
   229da:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   229dc:	930e      	str	r3, [sp, #56]	@ 0x38
  filter_dims.h = filter_shape.Dims(1);
   229de:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  if (data.buffer_idx > -1) {
   229e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  filter_dims.h = filter_shape.Dims(1);
   229e2:	9311      	str	r3, [sp, #68]	@ 0x44
  filter_dims.w = filter_shape.Dims(2);
   229e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
   229e6:	9312      	str	r3, [sp, #72]	@ 0x48
  output_dims.h = output_shape.Dims(1);
   229e8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   229ea:	9319      	str	r3, [sp, #100]	@ 0x64
  if (data.buffer_idx > -1) {
   229ec:	2900      	cmp	r1, #0
  output_dims.w = output_shape.Dims(2);
   229ee:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
  input_dims.n = batch_size;
   229f0:	900c      	str	r0, [sp, #48]	@ 0x30
  output_dims.n = batch_size;
   229f2:	9018      	str	r0, [sp, #96]	@ 0x60
  filter_dims.n = output_depth;
   229f4:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
  bias_dims.c = output_depth;
   229f8:	f8cd e05c 	str.w	lr, [sp, #92]	@ 0x5c
  output_dims.c = output_depth;
   229fc:	f8cd e06c 	str.w	lr, [sp, #108]	@ 0x6c
  output_dims.w = output_shape.Dims(2);
   22a00:	931a      	str	r3, [sp, #104]	@ 0x68
  if (data.buffer_idx > -1) {
   22a02:	db04      	blt.n	22a0e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x10a>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   22a04:	f8d9 3040 	ldr.w	r3, [r9, #64]	@ 0x40
   22a08:	4648      	mov	r0, r9
   22a0a:	4798      	blx	r3
   22a0c:	900a      	str	r0, [sp, #40]	@ 0x28
  TFLITE_DCHECK(tensor != nullptr);
   22a0e:	b1e6      	cbz	r6, 22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  return reinterpret_cast<const T*>(tensor->data.raw);
   22a10:	6833      	ldr	r3, [r6, #0]
   22a12:	f8d8 1000 	ldr.w	r1, [r8]
  return tensor == nullptr ? nullptr
   22a16:	b105      	cbz	r5, 22a1a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x116>
   22a18:	682d      	ldr	r5, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
   22a1a:	b1b7      	cbz	r7, 22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
  TFLITE_DCHECK_EQ(
   22a1c:	6838      	ldr	r0, [r7, #0]
   22a1e:	9300      	str	r3, [sp, #0]
   22a20:	aa18      	add	r2, sp, #96	@ 0x60
   22a22:	e9cd 2005 	strd	r2, r0, [sp, #20]
   22a26:	a814      	add	r0, sp, #80	@ 0x50
   22a28:	aa10      	add	r2, sp, #64	@ 0x40
   22a2a:	e9cd 2101 	strd	r2, r1, [sp, #4]
   22a2e:	e9cd 0503 	strd	r0, r5, [sp, #12]
   22a32:	ab0c      	add	r3, sp, #48	@ 0x30
   22a34:	aa08      	add	r2, sp, #32
   22a36:	a934      	add	r1, sp, #208	@ 0xd0
   22a38:	a80a      	add	r0, sp, #40	@ 0x28
   22a3a:	f7f8 f96f 	bl	1ad1c <arm_convolve_wrapper_s8>
   22a3e:	b920      	cbnz	r0, 22a4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x146>
}
   22a40:	b03e      	add	sp, #248	@ 0xf8
   22a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int buffer_size = 1;
   22a46:	2201      	movs	r2, #1
   22a48:	e7ba      	b.n	229c0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xbc>
  TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
   22a4a:	f002 fb8d 	bl	25168 <abort>
   22a4e:	bf00      	nop

00022a50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

  return EvalQuantizedPerChannel16x8(context, node, params, data, input, filter,
                                     bias, output);
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   22a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   22a54:	4b36      	ldr	r3, [pc, #216]	@ (22b30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   22a56:	b088      	sub	sp, #32
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   22a58:	681a      	ldr	r2, [r3, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   22a5a:	460c      	mov	r4, r1
   22a5c:	4605      	mov	r5, r0
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   22a5e:	f000 fd7f 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
   22a62:	4b34      	ldr	r3, [pc, #208]	@ (22b34 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe4>)
   22a64:	4621      	mov	r1, r4
   22a66:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kConvInputTensor);
   22a68:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
   22a6a:	4628      	mov	r0, r5
   22a6c:	f000 fd78 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  return node->inputs == nullptr ? 0 : node->inputs->size;
   22a70:	f8d4 9000 	ldr.w	r9, [r4]
   22a74:	4680      	mov	r8, r0
   22a76:	f1b9 0f00 	cmp.w	r9, #0
   22a7a:	d005      	beq.n	22a88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
   22a7c:	f8d9 3000 	ldr.w	r3, [r9]
   22a80:	2b03      	cmp	r3, #3
   22a82:	d047      	beq.n	22b14 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>
   22a84:	f04f 0900 	mov.w	r9, #0
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
   22a88:	4b2b      	ldr	r3, [pc, #172]	@ (22b38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>)
   22a8a:	4621      	mov	r1, r4
   22a8c:	681a      	ldr	r2, [r3, #0]
   22a8e:	4628      	mov	r0, r5
   22a90:	f000 fd80 	bl	23594 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->builtin_data != nullptr);
   22a94:	f8d4 a010 	ldr.w	sl, [r4, #16]
      tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
   22a98:	4607      	mov	r7, r0
  TFLITE_DCHECK(node->builtin_data != nullptr);
   22a9a:	f1ba 0f00 	cmp.w	sl, #0
   22a9e:	d044      	beq.n	22b2a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda>
  const auto& params =
      *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
  TFLITE_DCHECK(node->user_data != nullptr);
   22aa0:	68e4      	ldr	r4, [r4, #12]
   22aa2:	2c00      	cmp	r4, #0
   22aa4:	d041      	beq.n	22b2a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   22aa6:	7a32      	ldrb	r2, [r6, #8]
   22aa8:	7a03      	ldrb	r3, [r0, #8]
   22aaa:	4293      	cmp	r3, r2
   22aac:	d003      	beq.n	22ab6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x66>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
   22aae:	2001      	movs	r0, #1
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   22ab0:	b008      	add	sp, #32
   22ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE_MSG(
   22ab6:	f898 2008 	ldrb.w	r2, [r8, #8]
   22aba:	4293      	cmp	r3, r2
   22abc:	d005      	beq.n	22aca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
   22abe:	2b07      	cmp	r3, #7
   22ac0:	d030      	beq.n	22b24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd4>
   22ac2:	2b09      	cmp	r3, #9
   22ac4:	d1f3      	bne.n	22aae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
   22ac6:	2a12      	cmp	r2, #18
   22ac8:	d1f1      	bne.n	22aae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
   22aca:	4643      	mov	r3, r8
   22acc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
   22ace:	4629      	mov	r1, r5
   22ad0:	a805      	add	r0, sp, #20
   22ad2:	f000 fd7d 	bl	235d0 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>
  switch (input->type) {  // Already know in/out types are same.
   22ad6:	7a33      	ldrb	r3, [r6, #8]
   22ad8:	2b07      	cmp	r3, #7
   22ada:	d010      	beq.n	22afe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xae>
   22adc:	2b09      	cmp	r3, #9
   22ade:	d1e6      	bne.n	22aae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
      switch (filter_int8.type) {
   22ae0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   22ae4:	2b09      	cmp	r3, #9
   22ae6:	d1e2      	bne.n	22aae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
          return EvalQuantizedPerChannel(context, node, params, data, input,
   22ae8:	ab05      	add	r3, sp, #20
   22aea:	9300      	str	r3, [sp, #0]
   22aec:	e9cd 9701 	strd	r9, r7, [sp, #4]
   22af0:	4633      	mov	r3, r6
   22af2:	4622      	mov	r2, r4
   22af4:	4651      	mov	r1, sl
   22af6:	4628      	mov	r0, r5
   22af8:	f7ff ff04 	bl	22904 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
                                         &filter_int8, bias, output);
   22afc:	e7d8      	b.n	22ab0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
      return EvalQuantizedPerChannel16x8(context, node, params, data, input,
   22afe:	e9cd 9701 	strd	r9, r7, [sp, #4]
   22b02:	f8cd 8000 	str.w	r8, [sp]
   22b06:	4633      	mov	r3, r6
   22b08:	4622      	mov	r2, r4
   22b0a:	4651      	mov	r1, sl
   22b0c:	4628      	mov	r0, r5
   22b0e:	f7ff fe51 	bl	227b4 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
                                         filter, bias, output);
   22b12:	e7cd      	b.n	22ab0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
          ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
   22b14:	4b09      	ldr	r3, [pc, #36]	@ (22b3c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>)
   22b16:	4621      	mov	r1, r4
   22b18:	681a      	ldr	r2, [r3, #0]
   22b1a:	4628      	mov	r0, r5
   22b1c:	f000 fd20 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   22b20:	4681      	mov	r9, r0
   22b22:	e7b1      	b.n	22a88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38>
  TF_LITE_ENSURE_MSG(
   22b24:	2a09      	cmp	r2, #9
   22b26:	d1c2      	bne.n	22aae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e>
   22b28:	e7cf      	b.n	22aca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   22b2a:	f002 fb1d 	bl	25168 <abort>
   22b2e:	bf00      	nop
   22b30:	000409c4 	.word	0x000409c4
   22b34:	000409c0 	.word	0x000409c0
   22b38:	000409b8 	.word	0x000409b8
   22b3c:	000409bc 	.word	0x000409bc

00022b40 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
   22b40:	b510      	push	{r4, lr}
   22b42:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
   22b44:	2100      	movs	r1, #0
   22b46:	9100      	str	r1, [sp, #0]
   22b48:	4b04      	ldr	r3, [pc, #16]	@ (22b5c <_ZN6tflite16Register_CONV_2DEv+0x1c>)
   22b4a:	4a05      	ldr	r2, [pc, #20]	@ (22b60 <_ZN6tflite16Register_CONV_2DEv+0x20>)
   22b4c:	4905      	ldr	r1, [pc, #20]	@ (22b64 <_ZN6tflite16Register_CONV_2DEv+0x24>)
TfLiteRegistration Register_CONV_2D() {
   22b4e:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
   22b50:	f000 fcfa 	bl	23548 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   22b54:	4620      	mov	r0, r4
   22b56:	b002      	add	sp, #8
   22b58:	bd10      	pop	{r4, pc}
   22b5a:	bf00      	nop
   22b5c:	00022a51 	.word	0x00022a51
   22b60:	00022559 	.word	0x00022559
   22b64:	00022549 	.word	0x00022549

00022b68 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
   22b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b6c:	4614      	mov	r4, r2
  bool has_bias = node->inputs->size == 3;
   22b6e:	680a      	ldr	r2, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   22b70:	6812      	ldr	r2, [r2, #0]
                                 OpDataConv* data) {
   22b72:	b08d      	sub	sp, #52	@ 0x34
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   22b74:	3a02      	subs	r2, #2
   22b76:	2a01      	cmp	r2, #1
                                 OpDataConv* data) {
   22b78:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
   22b7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   22b7e:	d903      	bls.n	22b88 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20>
   22b80:	2001      	movs	r0, #1
  micro_context->DeallocateTempTfLiteTensor(filter);
  micro_context->DeallocateTempTfLiteTensor(output);
  micro_context->DeallocateTempTfLiteTensor(bias);

  return kTfLiteOk;
}
   22b82:	b00d      	add	sp, #52	@ 0x34
   22b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   22b88:	684a      	ldr	r2, [r1, #4]
   22b8a:	6812      	ldr	r2, [r2, #0]
   22b8c:	2a01      	cmp	r2, #1
   22b8e:	468a      	mov	sl, r1
   22b90:	d1f6      	bne.n	22b80 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   22b92:	9917      	ldr	r1, [sp, #92]	@ 0x5c
      params.stride_height, params.stride_width, params.dilation_height_factor,
   22b94:	f8d4 c004 	ldr.w	ip, [r4, #4]
   22b98:	f8d4 e008 	ldr.w	lr, [r4, #8]
   22b9c:	4605      	mov	r5, r0
   22b9e:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   22ba2:	3901      	subs	r1, #1
   22ba4:	fb02 f101 	mul.w	r1, r2, r1
   22ba8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   22baa:	3a01      	subs	r2, #1
   22bac:	fb00 f202 	mul.w	r2, r0, r2
   22bb0:	3101      	adds	r1, #1
  auto padding = params.padding;
   22bb2:	7820      	ldrb	r0, [r4, #0]
   22bb4:	3201      	adds	r2, #1

  // TODO(b/186448822): This uses 0 since the function has no other way to
  // report error case
  if (stride == 0) return 0;
   22bb6:	f1bc 0f00 	cmp.w	ip, #0
   22bba:	d010      	beq.n	22bde <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x76>

  switch (padding) {
   22bbc:	2801      	cmp	r0, #1
   22bbe:	f000 809e 	beq.w	22cfe <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x196>
   22bc2:	2802      	cmp	r0, #2
   22bc4:	d11c      	bne.n	22c00 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x98>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
   22bc6:	eb0c 0003 	add.w	r0, ip, r3
   22bca:	1a40      	subs	r0, r0, r1
   22bcc:	fb90 f0fc 	sdiv	r0, r0, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22bd0:	3801      	subs	r0, #1
  if (stride == 0) return 0;
   22bd2:	f1be 0f00 	cmp.w	lr, #0
   22bd6:	d10c      	bne.n	22bf2 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x8a>
   22bd8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
   22bdc:	e013      	b.n	22c06 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
   22bde:	f1be 0f00 	cmp.w	lr, #0
   22be2:	d00d      	beq.n	22c00 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x98>
  switch (padding) {
   22be4:	2801      	cmp	r0, #1
   22be6:	f000 809b 	beq.w	22d20 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b8>
   22bea:	2802      	cmp	r0, #2
   22bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   22bf0:	d108      	bne.n	22c04 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9c>
      return (image_size + stride - effective_filter_size) / stride;
   22bf2:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   22bf4:	4477      	add	r7, lr
   22bf6:	1abf      	subs	r7, r7, r2
   22bf8:	fb97 f7fe 	sdiv	r7, r7, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22bfc:	3f01      	subs	r7, #1
      return (image_size + stride - effective_filter_size) / stride;
   22bfe:	e002      	b.n	22c06 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
   22c00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   22c04:	4607      	mov	r7, r0
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22c06:	fb00 110c 	mla	r1, r0, ip, r1
  int total_padding =
   22c0a:	1acb      	subs	r3, r1, r3
   22c0c:	9916      	ldr	r1, [sp, #88]	@ 0x58
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22c0e:	fb07 220e 	mla	r2, r7, lr, r2
  total_padding = total_padding > 0 ? total_padding : 0;
   22c12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   22c16:	68af      	ldr	r7, [r5, #8]
  int total_padding =
   22c18:	1a52      	subs	r2, r2, r1
  return total_padding / 2;
   22c1a:	1059      	asrs	r1, r3, #1
  *offset = total_padding % 2;
   22c1c:	f003 0301 	and.w	r3, r3, #1
  total_padding = total_padding > 0 ? total_padding : 0;
   22c20:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  data->padding = ComputePaddingHeightWidth(
   22c24:	60b3      	str	r3, [r6, #8]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   22c26:	683b      	ldr	r3, [r7, #0]
  data->padding = ComputePaddingHeightWidth(
   22c28:	6031      	str	r1, [r6, #0]
  return total_padding / 2;
   22c2a:	1051      	asrs	r1, r2, #1
  *offset = total_padding % 2;
   22c2c:	f002 0201 	and.w	r2, r2, #1
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   22c30:	699b      	ldr	r3, [r3, #24]
  data->padding = ComputePaddingHeightWidth(
   22c32:	6071      	str	r1, [r6, #4]
   22c34:	60f2      	str	r2, [r6, #12]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   22c36:	4651      	mov	r1, sl
   22c38:	2200      	movs	r2, #0
   22c3a:	4638      	mov	r0, r7
   22c3c:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   22c3e:	4680      	mov	r8, r0
   22c40:	2800      	cmp	r0, #0
   22c42:	d09d      	beq.n	22b80 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
   22c44:	683b      	ldr	r3, [r7, #0]
   22c46:	2201      	movs	r2, #1
   22c48:	699b      	ldr	r3, [r3, #24]
   22c4a:	4651      	mov	r1, sl
   22c4c:	4638      	mov	r0, r7
   22c4e:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
   22c50:	4681      	mov	r9, r0
   22c52:	2800      	cmp	r0, #0
   22c54:	d094      	beq.n	22b80 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
   22c56:	683b      	ldr	r3, [r7, #0]
   22c58:	4651      	mov	r1, sl
   22c5a:	699b      	ldr	r3, [r3, #24]
   22c5c:	2202      	movs	r2, #2
   22c5e:	4638      	mov	r0, r7
   22c60:	4798      	blx	r3
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
   22c62:	683b      	ldr	r3, [r7, #0]
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
   22c64:	900b      	str	r0, [sp, #44]	@ 0x2c
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
   22c66:	4651      	mov	r1, sl
   22c68:	69db      	ldr	r3, [r3, #28]
   22c6a:	2200      	movs	r2, #0
   22c6c:	4638      	mov	r0, r7
   22c6e:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   22c70:	4682      	mov	sl, r0
   22c72:	2800      	cmp	r0, #0
   22c74:	d084      	beq.n	22b80 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
  if (data_type != kTfLiteFloat32) {
   22c76:	f1bb 0f01 	cmp.w	fp, #1
   22c7a:	d01f      	beq.n	22cbc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x154>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
   22c7c:	f8d9 3014 	ldr.w	r3, [r9, #20]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   22c80:	340c      	adds	r4, #12
   22c82:	685b      	ldr	r3, [r3, #4]
   22c84:	9308      	str	r3, [sp, #32]
   22c86:	e9cd a400 	strd	sl, r4, [sp]
   22c8a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
   22c8c:	9307      	str	r3, [sp, #28]
   22c8e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
   22c90:	9306      	str	r3, [sp, #24]
   22c92:	f106 0330 	add.w	r3, r6, #48	@ 0x30
   22c96:	9305      	str	r3, [sp, #20]
   22c98:	f106 032c 	add.w	r3, r6, #44	@ 0x2c
   22c9c:	9304      	str	r3, [sp, #16]
   22c9e:	f106 0320 	add.w	r3, r6, #32
   22ca2:	9303      	str	r3, [sp, #12]
   22ca4:	f106 031c 	add.w	r3, r6, #28
   22ca8:	9302      	str	r3, [sp, #8]
   22caa:	4628      	mov	r0, r5
   22cac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   22cae:	464a      	mov	r2, r9
   22cb0:	4641      	mov	r1, r8
   22cb2:	f7fd fe73 	bl	2099c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
   22cb6:	2800      	cmp	r0, #0
   22cb8:	f47f af63 	bne.w	22b82 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a>
  micro_context->DeallocateTempTfLiteTensor(input);
   22cbc:	683b      	ldr	r3, [r7, #0]
  data->input_zero_point = input->params.zero_point;
   22cbe:	f8d8 200c 	ldr.w	r2, [r8, #12]
  micro_context->DeallocateTempTfLiteTensor(input);
   22cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  data->input_zero_point = input->params.zero_point;
   22cc4:	6132      	str	r2, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
   22cc6:	f8d9 200c 	ldr.w	r2, [r9, #12]
   22cca:	6172      	str	r2, [r6, #20]
  data->output_zero_point = output->params.zero_point;
   22ccc:	f8da 200c 	ldr.w	r2, [sl, #12]
   22cd0:	61b2      	str	r2, [r6, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
   22cd2:	4641      	mov	r1, r8
   22cd4:	4638      	mov	r0, r7
   22cd6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
   22cd8:	683b      	ldr	r3, [r7, #0]
   22cda:	4649      	mov	r1, r9
   22cdc:	4638      	mov	r0, r7
   22cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   22ce0:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   22ce2:	683b      	ldr	r3, [r7, #0]
   22ce4:	4651      	mov	r1, sl
   22ce6:	4638      	mov	r0, r7
   22ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   22cea:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(bias);
   22cec:	683b      	ldr	r3, [r7, #0]
   22cee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   22cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   22cf2:	4638      	mov	r0, r7
   22cf4:	4798      	blx	r3
  return kTfLiteOk;
   22cf6:	2000      	movs	r0, #0
}
   22cf8:	b00d      	add	sp, #52	@ 0x34
   22cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (image_size + stride - 1) / stride;
   22cfe:	eb0c 0003 	add.w	r0, ip, r3
   22d02:	3801      	subs	r0, #1
   22d04:	fb90 f0fc 	sdiv	r0, r0, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22d08:	3801      	subs	r0, #1
  if (stride == 0) return 0;
   22d0a:	f1be 0f00 	cmp.w	lr, #0
   22d0e:	f43f af63 	beq.w	22bd8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x70>
      return (image_size + stride - 1) / stride;
   22d12:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   22d14:	4477      	add	r7, lr
   22d16:	3f01      	subs	r7, #1
   22d18:	fb97 f7fe 	sdiv	r7, r7, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
   22d1c:	3f01      	subs	r7, #1
      return (image_size + stride - 1) / stride;
   22d1e:	e772      	b.n	22c06 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
  switch (padding) {
   22d20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   22d24:	e7f5      	b.n	22d12 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1aa>
   22d26:	bf00      	nop

00022d28 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
    const TfLiteEvalTensor* input, const TfLiteEvalTensor* filter,
    const TfLiteEvalTensor* bias, TfLiteEvalTensor* output)
    __attribute__((always_inline));

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   22d28:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   22d2a:	b10b      	cbz	r3, 22d30 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   22d2c:	213c      	movs	r1, #60	@ 0x3c
   22d2e:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   22d30:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   22d32:	f002 fa19 	bl	25168 <abort>
   22d36:	bf00      	nop

00022d38 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
          tflite::micro::GetOptionalTensorData<int32_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int8_t>(output)),
      ARM_CMSIS_NN_SUCCESS);
}

void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22d3c:	461e      	mov	r6, r3
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
   22d3e:	690b      	ldr	r3, [r1, #16]
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22d40:	b0c1      	sub	sp, #260	@ 0x104
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
   22d42:	425b      	negs	r3, r3
   22d44:	9335      	str	r3, [sp, #212]	@ 0xd4
  dw_conv_params->dilation.h = params.dilation_height_factor;
   22d46:	6983      	ldr	r3, [r0, #24]
   22d48:	933d      	str	r3, [sp, #244]	@ 0xf4
  dw_conv_params->dilation.w = params.dilation_width_factor;
   22d4a:	6943      	ldr	r3, [r0, #20]
   22d4c:	933c      	str	r3, [sp, #240]	@ 0xf0
  dw_conv_params->output_offset = data.reference_op_data.output_zero_point;
   22d4e:	698b      	ldr	r3, [r1, #24]
   22d50:	9336      	str	r3, [sp, #216]	@ 0xd8
  dw_conv_params->stride.h = params.stride_height;
   22d52:	6883      	ldr	r3, [r0, #8]
   22d54:	9339      	str	r3, [sp, #228]	@ 0xe4
  dw_conv_params->stride.w = params.stride_width;
   22d56:	6843      	ldr	r3, [r0, #4]
   22d58:	9338      	str	r3, [sp, #224]	@ 0xe0
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22d5a:	468c      	mov	ip, r1
  dw_conv_params->ch_mult = params.depth_multiplier;
   22d5c:	68c3      	ldr	r3, [r0, #12]
   22d5e:	9337      	str	r3, [sp, #220]	@ 0xdc
      data.reference_op_data.per_channel_output_multiplier;
   22d60:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
  quant_params->multiplier =
   22d62:	930a      	str	r3, [sp, #40]	@ 0x28
  dw_conv_params->padding.h = data.reference_op_data.padding.height;
   22d64:	f8dc 3004 	ldr.w	r3, [ip, #4]
   22d68:	933b      	str	r3, [sp, #236]	@ 0xec
  dw_conv_params->padding.w = data.reference_op_data.padding.width;
   22d6a:	f8dc 3000 	ldr.w	r3, [ip]
   22d6e:	933a      	str	r3, [sp, #232]	@ 0xe8
  dw_conv_params->activation.min = data.reference_op_data.output_activation_min;
   22d70:	f8dc 302c 	ldr.w	r3, [ip, #44]	@ 0x2c
   22d74:	933e      	str	r3, [sp, #248]	@ 0xf8
  dw_conv_params->activation.max = data.reference_op_data.output_activation_max;
   22d76:	f8dc 3030 	ldr.w	r3, [ip, #48]	@ 0x30
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22d7a:	9f49      	ldr	r7, [sp, #292]	@ 0x124
  dw_conv_params->activation.max = data.reference_op_data.output_activation_max;
   22d7c:	933f      	str	r3, [sp, #252]	@ 0xfc
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22d7e:	4615      	mov	r5, r2
  quant_params->multiplier =
   22d80:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
   22d84:	9309      	str	r3, [sp, #36]	@ 0x24
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22d86:	4631      	mov	r1, r6
   22d88:	a81d      	add	r0, sp, #116	@ 0x74
void EvalQuantizedPerChannel16x8(TfLiteContext* context, TfLiteNode* node,
   22d8a:	9c48      	ldr	r4, [sp, #288]	@ 0x120
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22d8c:	f000 fc0e 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   22d90:	4629      	mov	r1, r5
   22d92:	a823      	add	r0, sp, #140	@ 0x8c
   22d94:	f000 fc0a 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   22d98:	4639      	mov	r1, r7
   22d9a:	a829      	add	r0, sp, #164	@ 0xa4
   22d9c:	f000 fc06 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   22da0:	4621      	mov	r1, r4
   22da2:	a82f      	add	r0, sp, #188	@ 0xbc
   22da4:	f000 fc02 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
   22da8:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	@ 0xf8
   22dac:	429a      	cmp	r2, r3
   22dae:	dc6e      	bgt.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
    TFLITE_DCHECK_LT(i, size_);
   22db0:	f8dd 808c 	ldr.w	r8, [sp, #140]	@ 0x8c
   22db4:	f1b8 0f00 	cmp.w	r8, #0
   22db8:	dd69      	ble.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
   22dba:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
    return dims_[i];
   22dbc:	f8dd 9090 	ldr.w	r9, [sp, #144]	@ 0x90
    TFLITE_DCHECK_LT(i, size_);
   22dc0:	2b00      	cmp	r3, #0
   22dc2:	dd64      	ble.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
   22dc4:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
   22dc6:	454a      	cmp	r2, r9
   22dc8:	d161      	bne.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
   22dca:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
   22dcc:	2a03      	cmp	r2, #3
   22dce:	dd5e      	ble.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
   22dd0:	2b03      	cmp	r3, #3
    return dims_[i];
   22dd2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
    TFLITE_DCHECK_LT(i, size_);
   22dd4:	dd5b      	ble.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
   22dd6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   22dd8:	4293      	cmp	r3, r2
   22dda:	d158      	bne.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  return tensor == nullptr ? nullptr
   22ddc:	b18c      	cbz	r4, 22e02 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xca>
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
   22dde:	6823      	ldr	r3, [r4, #0]
   22de0:	b17b      	cbz	r3, 22e02 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xca>
    for (int i = 0; i < size_; i++) {
   22de2:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
   22de4:	2b00      	cmp	r3, #0
   22de6:	dd4f      	ble.n	22e88 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x150>
   22de8:	a82f      	add	r0, sp, #188	@ 0xbc
   22dea:	eb00 0e83 	add.w	lr, r0, r3, lsl #2
    int buffer_size = 1;
   22dee:	f04f 0c01 	mov.w	ip, #1
      buffer_size *= dims_data[i];
   22df2:	f850 1f04 	ldr.w	r1, [r0, #4]!
    for (int i = 0; i < size_; i++) {
   22df6:	4570      	cmp	r0, lr
      buffer_size *= dims_data[i];
   22df8:	fb01 fc0c 	mul.w	ip, r1, ip
    for (int i = 0; i < size_; i++) {
   22dfc:	d1f9      	bne.n	22df2 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xba>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   22dfe:	4562      	cmp	r2, ip
   22e00:	d145      	bne.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
    TFLITE_DCHECK_LT(i, size_);
   22e02:	f1b8 0f01 	cmp.w	r8, #1
  input_dims->n = batch_size;
   22e06:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
   22e0a:	d040      	beq.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  input_dims->h = input_shape.Dims(1);
   22e0c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
   22e0e:	930e      	str	r3, [sp, #56]	@ 0x38
   22e10:	f1b8 0f02 	cmp.w	r8, #2
   22e14:	d03b      	beq.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  input_dims->w = input_shape.Dims(2);
   22e16:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   22e18:	930f      	str	r3, [sp, #60]	@ 0x3c
   22e1a:	f1b8 0f03 	cmp.w	r8, #3
   22e1e:	d036      	beq.n	22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  PopulateDwConvParams(&dw_conv_params, &quant_params, &input_dims,
                       &filter_dims, &bias_dims, &output_dims, params, data,
                       input, filter, bias, output);

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
   22e20:	2300      	movs	r3, #0
  /* 'size' is unused */
  ctx.size = 0;
   22e22:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  bias_dims->n = 1;
   22e26:	2301      	movs	r3, #1
  bias_dims->h = 1;
   22e28:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
  bias_dims->w = 1;
   22e2c:	9317      	str	r3, [sp, #92]	@ 0x5c
  output_dims->h = output_shape.Dims(1);
   22e2e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
   22e30:	931a      	str	r3, [sp, #104]	@ 0x68
  output_dims->w = output_shape.Dims(2);
   22e32:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
   22e34:	931b      	str	r3, [sp, #108]	@ 0x6c
  input_dims->c = input_shape.Dims(3);
   22e36:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   22e38:	9310      	str	r3, [sp, #64]	@ 0x40
    return dims_[i];
   22e3a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
  filter_dims->n = filter_shape.Dims(0);
   22e3c:	9312      	str	r3, [sp, #72]	@ 0x48
   22e3e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
   22e40:	9313      	str	r3, [sp, #76]	@ 0x4c
   22e42:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
  output_dims->n = batch_size;
   22e44:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
  filter_dims->c = output_depth;
   22e48:	9214      	str	r2, [sp, #80]	@ 0x50
  bias_dims->c = output_depth;
   22e4a:	9218      	str	r2, [sp, #96]	@ 0x60
  output_dims->c = output_depth;
   22e4c:	921c      	str	r2, [sp, #112]	@ 0x70
  filter_dims->n = filter_shape.Dims(0);
   22e4e:	9311      	str	r3, [sp, #68]	@ 0x44
  TFLITE_DCHECK(tensor != nullptr);
   22e50:	b1ed      	cbz	r5, 22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  return reinterpret_cast<const T*>(tensor->data.raw);
   22e52:	682b      	ldr	r3, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
   22e54:	b1de      	cbz	r6, 22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
  return reinterpret_cast<const T*>(tensor->data.raw);
   22e56:	6831      	ldr	r1, [r6, #0]
  return tensor == nullptr ? nullptr
   22e58:	b104      	cbz	r4, 22e5c <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x124>
   22e5a:	6824      	ldr	r4, [r4, #0]
  TFLITE_DCHECK(tensor != nullptr);
   22e5c:	b1bf      	cbz	r7, 22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>

  TFLITE_DCHECK_EQ(
   22e5e:	6838      	ldr	r0, [r7, #0]
   22e60:	9300      	str	r3, [sp, #0]
   22e62:	aa19      	add	r2, sp, #100	@ 0x64
   22e64:	e9cd 2005 	strd	r2, r0, [sp, #20]
   22e68:	a815      	add	r0, sp, #84	@ 0x54
   22e6a:	aa11      	add	r2, sp, #68	@ 0x44
   22e6c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   22e70:	e9cd 0403 	strd	r0, r4, [sp, #12]
   22e74:	ab0d      	add	r3, sp, #52	@ 0x34
   22e76:	aa09      	add	r2, sp, #36	@ 0x24
   22e78:	a935      	add	r1, sp, #212	@ 0xd4
   22e7a:	a80b      	add	r0, sp, #44	@ 0x2c
   22e7c:	f7f8 fa86 	bl	1b38c <arm_depthwise_conv_s16>
   22e80:	b928      	cbnz	r0, 22e8e <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x156>
          tflite::micro::GetTensorData<int16_t>(input), &filter_dims,
          tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
          tflite::micro::GetOptionalTensorData<int64_t>(bias), &output_dims,
          tflite::micro::GetTensorData<int16_t>(output)),
      ARM_CMSIS_NN_SUCCESS);
}
   22e82:	b041      	add	sp, #260	@ 0x104
   22e84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int buffer_size = 1;
   22e88:	f04f 0c01 	mov.w	ip, #1
   22e8c:	e7b7      	b.n	22dfe <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc6>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
   22e8e:	f002 f96b 	bl	25168 <abort>
   22e92:	bf00      	nop

00022e94 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22e98:	461e      	mov	r6, r3
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
   22e9a:	6913      	ldr	r3, [r2, #16]
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22e9c:	b0c0      	sub	sp, #256	@ 0x100
  dw_conv_params->input_offset = -data.reference_op_data.input_zero_point;
   22e9e:	425b      	negs	r3, r3
   22ea0:	9335      	str	r3, [sp, #212]	@ 0xd4
  dw_conv_params->dilation.h = params.dilation_height_factor;
   22ea2:	698b      	ldr	r3, [r1, #24]
   22ea4:	933d      	str	r3, [sp, #244]	@ 0xf4
  dw_conv_params->dilation.w = params.dilation_width_factor;
   22ea6:	694b      	ldr	r3, [r1, #20]
   22ea8:	933c      	str	r3, [sp, #240]	@ 0xf0
  dw_conv_params->output_offset = data.reference_op_data.output_zero_point;
   22eaa:	6993      	ldr	r3, [r2, #24]
   22eac:	9336      	str	r3, [sp, #216]	@ 0xd8
  dw_conv_params->stride.h = params.stride_height;
   22eae:	688b      	ldr	r3, [r1, #8]
   22eb0:	9339      	str	r3, [sp, #228]	@ 0xe4
  dw_conv_params->stride.w = params.stride_width;
   22eb2:	684b      	ldr	r3, [r1, #4]
   22eb4:	9338      	str	r3, [sp, #224]	@ 0xe0
  dw_conv_params->ch_mult = params.depth_multiplier;
   22eb6:	68cb      	ldr	r3, [r1, #12]
   22eb8:	9337      	str	r3, [sp, #220]	@ 0xdc
      data.reference_op_data.per_channel_output_multiplier;
   22eba:	6a93      	ldr	r3, [r2, #40]	@ 0x28
  quant_params->multiplier =
   22ebc:	930a      	str	r3, [sp, #40]	@ 0x28
  dw_conv_params->padding.h = data.reference_op_data.padding.height;
   22ebe:	6853      	ldr	r3, [r2, #4]
   22ec0:	933b      	str	r3, [sp, #236]	@ 0xec
  dw_conv_params->padding.w = data.reference_op_data.padding.width;
   22ec2:	6813      	ldr	r3, [r2, #0]
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22ec4:	f8dd 9120 	ldr.w	r9, [sp, #288]	@ 0x120
  dw_conv_params->padding.w = data.reference_op_data.padding.width;
   22ec8:	933a      	str	r3, [sp, #232]	@ 0xe8
  dw_conv_params->activation.min = data.reference_op_data.output_activation_min;
   22eca:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
   22ecc:	933e      	str	r3, [sp, #248]	@ 0xf8
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22ece:	e9dd 5849 	ldrd	r5, r8, [sp, #292]	@ 0x124
  dw_conv_params->activation.max = data.reference_op_data.output_activation_max;
   22ed2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
   22ed4:	933f      	str	r3, [sp, #252]	@ 0xfc
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22ed6:	4649      	mov	r1, r9
  quant_params->multiplier =
   22ed8:	6a53      	ldr	r3, [r2, #36]	@ 0x24
   22eda:	9309      	str	r3, [sp, #36]	@ 0x24
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22edc:	4607      	mov	r7, r0
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22ede:	a81d      	add	r0, sp, #116	@ 0x74
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
   22ee0:	4614      	mov	r4, r2
  RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
   22ee2:	f000 fb63 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
   22ee6:	4631      	mov	r1, r6
   22ee8:	a823      	add	r0, sp, #140	@ 0x8c
   22eea:	f000 fb5f 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
   22eee:	4641      	mov	r1, r8
   22ef0:	a829      	add	r0, sp, #164	@ 0xa4
   22ef2:	f000 fb5b 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
   22ef6:	4629      	mov	r1, r5
   22ef8:	a82f      	add	r0, sp, #188	@ 0xbc
   22efa:	f000 fb57 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
   22efe:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	@ 0xf8
   22f02:	429a      	cmp	r2, r3
   22f04:	dc72      	bgt.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
    TFLITE_DCHECK_LT(i, size_);
   22f06:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   22f08:	2b00      	cmp	r3, #0
   22f0a:	dd6f      	ble.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
   22f0c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
    return dims_[i];
   22f0e:	9924      	ldr	r1, [sp, #144]	@ 0x90
    TFLITE_DCHECK_LT(i, size_);
   22f10:	2a00      	cmp	r2, #0
   22f12:	dd6b      	ble.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
   22f14:	982a      	ldr	r0, [sp, #168]	@ 0xa8
   22f16:	4288      	cmp	r0, r1
   22f18:	d168      	bne.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
   22f1a:	981d      	ldr	r0, [sp, #116]	@ 0x74
   22f1c:	2803      	cmp	r0, #3
   22f1e:	dd65      	ble.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
   22f20:	2a03      	cmp	r2, #3
    return dims_[i];
   22f22:	9821      	ldr	r0, [sp, #132]	@ 0x84
    TFLITE_DCHECK_LT(i, size_);
   22f24:	dd62      	ble.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
   22f26:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   22f28:	4282      	cmp	r2, r0
   22f2a:	d15f      	bne.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  return tensor == nullptr ? nullptr
   22f2c:	b19d      	cbz	r5, 22f56 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc2>
  if (tflite::micro::GetOptionalTensorData<int8_t>(bias)) {
   22f2e:	682a      	ldr	r2, [r5, #0]
   22f30:	b18a      	cbz	r2, 22f56 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xc2>
    for (int i = 0; i < size_; i++) {
   22f32:	f8dd a0bc 	ldr.w	sl, [sp, #188]	@ 0xbc
   22f36:	f1ba 0f00 	cmp.w	sl, #0
   22f3a:	dd54      	ble.n	22fe6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x152>
   22f3c:	aa2f      	add	r2, sp, #188	@ 0xbc
   22f3e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
    int buffer_size = 1;
   22f42:	f04f 0c01 	mov.w	ip, #1
      buffer_size *= dims_data[i];
   22f46:	f852 ef04 	ldr.w	lr, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   22f4a:	4552      	cmp	r2, sl
      buffer_size *= dims_data[i];
   22f4c:	fb0e fc0c 	mul.w	ip, lr, ip
    for (int i = 0; i < size_; i++) {
   22f50:	d1f9      	bne.n	22f46 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xb2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   22f52:	4560      	cmp	r0, ip
   22f54:	d14a      	bne.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
    TFLITE_DCHECK_LT(i, size_);
   22f56:	2b01      	cmp	r3, #1
  input_dims->n = batch_size;
   22f58:	910d      	str	r1, [sp, #52]	@ 0x34
   22f5a:	d047      	beq.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  input_dims->h = input_shape.Dims(1);
   22f5c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   22f5e:	920e      	str	r2, [sp, #56]	@ 0x38
   22f60:	2b02      	cmp	r3, #2
   22f62:	d043      	beq.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  input_dims->w = input_shape.Dims(2);
   22f64:	9a26      	ldr	r2, [sp, #152]	@ 0x98
   22f66:	920f      	str	r2, [sp, #60]	@ 0x3c
   22f68:	2b03      	cmp	r3, #3
   22f6a:	d03f      	beq.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  bias_dims->n = 1;
   22f6c:	2301      	movs	r3, #1
  bias_dims->h = 1;
   22f6e:	e9cd 3315 	strd	r3, r3, [sp, #84]	@ 0x54
  bias_dims->w = 1;
   22f72:	9317      	str	r3, [sp, #92]	@ 0x5c
  ctx.buf = nullptr;
   22f74:	2300      	movs	r3, #0
  ctx.size = 0;
   22f76:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  input_dims->c = input_shape.Dims(3);
   22f7a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   22f7c:	9310      	str	r3, [sp, #64]	@ 0x40
    return dims_[i];
   22f7e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
  filter_dims->n = filter_shape.Dims(0);
   22f80:	9312      	str	r3, [sp, #72]	@ 0x48
   22f82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
  output_dims->n = batch_size;
   22f84:	9119      	str	r1, [sp, #100]	@ 0x64
  filter_dims->n = filter_shape.Dims(0);
   22f86:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (data.buffer_idx > -1) {
   22f88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
  filter_dims->n = filter_shape.Dims(0);
   22f8a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
   22f8c:	9311      	str	r3, [sp, #68]	@ 0x44
  output_dims->h = output_shape.Dims(1);
   22f8e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
   22f90:	931a      	str	r3, [sp, #104]	@ 0x68
  if (data.buffer_idx > -1) {
   22f92:	2900      	cmp	r1, #0
  output_dims->w = output_shape.Dims(2);
   22f94:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
  filter_dims->c = output_depth;
   22f96:	9014      	str	r0, [sp, #80]	@ 0x50
  bias_dims->c = output_depth;
   22f98:	9018      	str	r0, [sp, #96]	@ 0x60
  output_dims->c = output_depth;
   22f9a:	901c      	str	r0, [sp, #112]	@ 0x70
  output_dims->w = output_shape.Dims(2);
   22f9c:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (data.buffer_idx > -1) {
   22f9e:	db03      	blt.n	22fa8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x114>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
   22fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
   22fa2:	4638      	mov	r0, r7
   22fa4:	4798      	blx	r3
   22fa6:	900b      	str	r0, [sp, #44]	@ 0x2c
  TFLITE_DCHECK(tensor != nullptr);
   22fa8:	b306      	cbz	r6, 22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  return reinterpret_cast<const T*>(tensor->data.raw);
   22faa:	6833      	ldr	r3, [r6, #0]
   22fac:	f8d9 1000 	ldr.w	r1, [r9]
  return tensor == nullptr ? nullptr
   22fb0:	b105      	cbz	r5, 22fb4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x120>
   22fb2:	682d      	ldr	r5, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
   22fb4:	f1b8 0f00 	cmp.w	r8, #0
   22fb8:	d018      	beq.n	22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
  TFLITE_DCHECK_EQ(
   22fba:	f8d8 0000 	ldr.w	r0, [r8]
   22fbe:	9300      	str	r3, [sp, #0]
   22fc0:	aa19      	add	r2, sp, #100	@ 0x64
   22fc2:	e9cd 2005 	strd	r2, r0, [sp, #20]
   22fc6:	a815      	add	r0, sp, #84	@ 0x54
   22fc8:	aa11      	add	r2, sp, #68	@ 0x44
   22fca:	e9cd 2101 	strd	r2, r1, [sp, #4]
   22fce:	e9cd 0503 	strd	r0, r5, [sp, #12]
   22fd2:	ab0d      	add	r3, sp, #52	@ 0x34
   22fd4:	aa09      	add	r2, sp, #36	@ 0x24
   22fd6:	a935      	add	r1, sp, #212	@ 0xd4
   22fd8:	a80b      	add	r0, sp, #44	@ 0x2c
   22fda:	f7f9 fb0d 	bl	1c5f8 <arm_depthwise_conv_wrapper_s8>
   22fde:	b928      	cbnz	r0, 22fec <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0x158>
}
   22fe0:	b040      	add	sp, #256	@ 0x100
   22fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int buffer_size = 1;
   22fe6:	f04f 0c01 	mov.w	ip, #1
   22fea:	e7b2      	b.n	22f52 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0+0xbe>
  TFLITE_DCHECK_LE(dw_conv_params->activation.min,
   22fec:	f002 f8bc 	bl	25168 <abort>

00022ff0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   22ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   22ff4:	f8d1 900c 	ldr.w	r9, [r1, #12]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   22ff8:	b089      	sub	sp, #36	@ 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
   22ffa:	f1b9 0f00 	cmp.w	r9, #0
   22ffe:	d057      	beq.n	230b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   23000:	f8d1 b010 	ldr.w	fp, [r1, #16]
   23004:	460c      	mov	r4, r1
   23006:	f1bb 0f00 	cmp.w	fp, #0
   2300a:	d051      	beq.n	230b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
  const auto& params =
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
  const OpData& data = *(static_cast<OpData*>(node->user_data));

  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
   2300c:	4b29      	ldr	r3, [pc, #164]	@ (230b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   2300e:	681a      	ldr	r2, [r3, #0]
   23010:	4605      	mov	r5, r0
   23012:	f000 fabf 	bl	23594 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
   23016:	4b28      	ldr	r3, [pc, #160]	@ (230b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
   23018:	4621      	mov	r1, r4
   2301a:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
   2301c:	4682      	mov	sl, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
   2301e:	4628      	mov	r0, r5
   23020:	f000 fa9e 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
   23024:	4b25      	ldr	r3, [pc, #148]	@ (230bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>)
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
   23026:	4606      	mov	r6, r0
      tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
   23028:	681a      	ldr	r2, [r3, #0]
   2302a:	4621      	mov	r1, r4
   2302c:	4628      	mov	r0, r5
   2302e:	f000 fa97 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   23032:	f8d4 8000 	ldr.w	r8, [r4]
   23036:	4607      	mov	r7, r0
   23038:	f1b8 0f00 	cmp.w	r8, #0
   2303c:	d005      	beq.n	2304a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
   2303e:	f8d8 3000 	ldr.w	r3, [r8]
   23042:	2b03      	cmp	r3, #3
   23044:	d02c      	beq.n	230a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
   23046:	f04f 0800 	mov.w	r8, #0
          : nullptr;

  TfLiteEvalTensor filter_int8 = tflite::micro::MakeUnpackedInt4Tensor(
   2304a:	463b      	mov	r3, r7
   2304c:	f8d9 2034 	ldr.w	r2, [r9, #52]	@ 0x34
   23050:	4629      	mov	r1, r5
   23052:	a805      	add	r0, sp, #20
   23054:	f000 fabc 	bl	235d0 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>
      context, data.reference_op_data.filter_buffer_index, filter);

  switch (input->type) {  // Already know in/out types are same.
   23058:	7a33      	ldrb	r3, [r6, #8]
   2305a:	2b07      	cmp	r3, #7
   2305c:	d014      	beq.n	23088 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
   2305e:	2b09      	cmp	r3, #9
   23060:	d003      	beq.n	2306a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
    case kTfLiteFloat32: {
#if EI_TFLITE_DISABLE_DEPTHWISE_CONV_2D_IN_F32
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
   23062:	2001      	movs	r0, #1
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   23064:	b009      	add	sp, #36	@ 0x24
   23066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (filter_int8.type) {
   2306a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2306e:	2b09      	cmp	r3, #9
   23070:	d1f7      	bne.n	23062 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
          EvalQuantizedPerChannel(context, node, params, data, input,
   23072:	ab05      	add	r3, sp, #20
   23074:	9300      	str	r3, [sp, #0]
   23076:	e9cd 8a01 	strd	r8, sl, [sp, #4]
   2307a:	4633      	mov	r3, r6
   2307c:	464a      	mov	r2, r9
   2307e:	4659      	mov	r1, fp
   23080:	4628      	mov	r0, r5
   23082:	f7ff ff07 	bl	22e94 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
      break;
   23086:	e007      	b.n	23098 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa8>
      EvalQuantizedPerChannel16x8(context, node, params, data, input, filter,
   23088:	e9cd 8a00 	strd	r8, sl, [sp]
   2308c:	463b      	mov	r3, r7
   2308e:	4632      	mov	r2, r6
   23090:	4649      	mov	r1, r9
   23092:	4658      	mov	r0, fp
   23094:	f7ff fe50 	bl	22d38 <_ZN6tflite12_GLOBAL__N_127EvalQuantizedPerChannel16x8EP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_.isra.0>
  return kTfLiteOk;
   23098:	2000      	movs	r0, #0
}
   2309a:	b009      	add	sp, #36	@ 0x24
   2309c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
   230a0:	4b07      	ldr	r3, [pc, #28]	@ (230c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd0>)
   230a2:	4621      	mov	r1, r4
   230a4:	681a      	ldr	r2, [r3, #0]
   230a6:	4628      	mov	r0, r5
   230a8:	f000 fa5a 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
   230ac:	4680      	mov	r8, r0
   230ae:	e7cc      	b.n	2304a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  TFLITE_DCHECK(node->user_data != nullptr);
   230b0:	f002 f85a 	bl	25168 <abort>
   230b4:	000409cc 	.word	0x000409cc
   230b8:	000409d8 	.word	0x000409d8
   230bc:	000409d4 	.word	0x000409d4
   230c0:	000409d0 	.word	0x000409d0

000230c4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   230c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   230c8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   230cc:	b0bd      	sub	sp, #244	@ 0xf4
  TFLITE_DCHECK(node->user_data != nullptr);
   230ce:	f1ba 0f00 	cmp.w	sl, #0
   230d2:	f000 812c 	beq.w	2332e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   230d6:	f8d1 b010 	ldr.w	fp, [r1, #16]
   230da:	460d      	mov	r5, r1
   230dc:	f1bb 0f00 	cmp.w	fp, #0
   230e0:	f000 8125 	beq.w	2332e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
   230e4:	6884      	ldr	r4, [r0, #8]
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvInputTensor);
   230e6:	4b93      	ldr	r3, [pc, #588]	@ (23334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x270>)
   230e8:	681a      	ldr	r2, [r3, #0]
   230ea:	6823      	ldr	r3, [r4, #0]
   230ec:	4680      	mov	r8, r0
   230ee:	699b      	ldr	r3, [r3, #24]
   230f0:	4620      	mov	r0, r4
   230f2:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   230f4:	4606      	mov	r6, r0
   230f6:	2800      	cmp	r0, #0
   230f8:	d060      	beq.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
      micro_context->AllocateTempInputTensor(node, kDepthwiseConvWeightsTensor);
   230fa:	4b8f      	ldr	r3, [pc, #572]	@ (23338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x274>)
   230fc:	681a      	ldr	r2, [r3, #0]
   230fe:	6823      	ldr	r3, [r4, #0]
   23100:	4629      	mov	r1, r5
   23102:	699b      	ldr	r3, [r3, #24]
   23104:	4620      	mov	r0, r4
   23106:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
   23108:	4607      	mov	r7, r0
   2310a:	2800      	cmp	r0, #0
   2310c:	d056      	beq.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
      micro_context->AllocateTempOutputTensor(node, kDepthwiseConvOutputTensor);
   2310e:	4b8b      	ldr	r3, [pc, #556]	@ (2333c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>)
   23110:	681a      	ldr	r2, [r3, #0]
   23112:	6823      	ldr	r3, [r4, #0]
   23114:	4629      	mov	r1, r5
   23116:	69db      	ldr	r3, [r3, #28]
   23118:	4620      	mov	r0, r4
   2311a:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   2311c:	4681      	mov	r9, r0
   2311e:	2800      	cmp	r0, #0
   23120:	d04c      	beq.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
  return t->dims->data[dim];
   23122:	6971      	ldr	r1, [r6, #20]
   23124:	697b      	ldr	r3, [r7, #20]
   23126:	68ca      	ldr	r2, [r1, #12]
   23128:	920f      	str	r2, [sp, #60]	@ 0x3c
   2312a:	688a      	ldr	r2, [r1, #8]
   2312c:	f8d0 c014 	ldr.w	ip, [r0, #20]
   23130:	920e      	str	r2, [sp, #56]	@ 0x38
   23132:	68da      	ldr	r2, [r3, #12]
  const TfLiteType data_type = input->type;
   23134:	7f30      	ldrb	r0, [r6, #28]
   23136:	920a      	str	r2, [sp, #40]	@ 0x28
   23138:	689a      	ldr	r2, [r3, #8]
   2313a:	920b      	str	r2, [sp, #44]	@ 0x2c
   2313c:	f8dc 200c 	ldr.w	r2, [ip, #12]
   23140:	920c      	str	r2, [sp, #48]	@ 0x30
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   23142:	2809      	cmp	r0, #9
   23144:	f8dc 2008 	ldr.w	r2, [ip, #8]
  const TfLiteType data_type = input->type;
   23148:	9009      	str	r0, [sp, #36]	@ 0x24
   2314a:	920d      	str	r2, [sp, #52]	@ 0x34
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   2314c:	d03b      	beq.n	231c6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x102>
   2314e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   23150:	2a07      	cmp	r2, #7
   23152:	d02d      	beq.n	231b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xec>
  if (filter->type == kTfLiteInt4) {
   23154:	7f3b      	ldrb	r3, [r7, #28]
   23156:	2b12      	cmp	r3, #18
   23158:	d063      	beq.n	23222 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15e>
  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
   2315a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2315c:	e9cd 3a05 	strd	r3, sl, [sp, #20]
   23160:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   23162:	9304      	str	r3, [sp, #16]
   23164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   23166:	9303      	str	r3, [sp, #12]
   23168:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2316a:	9302      	str	r3, [sp, #8]
   2316c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2316e:	9301      	str	r3, [sp, #4]
   23170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   23172:	9300      	str	r3, [sp, #0]
   23174:	4629      	mov	r1, r5
   23176:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   23178:	465a      	mov	r2, fp
   2317a:	4640      	mov	r0, r8
   2317c:	f000 f8f6 	bl	2336c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
   23180:	4605      	mov	r5, r0
   23182:	b9e0      	cbnz	r0, 231be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
  if (input->type == kTfLiteInt8) {
   23184:	7f33      	ldrb	r3, [r6, #28]
   23186:	2b09      	cmp	r3, #9
   23188:	d06f      	beq.n	2326a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a6>
  micro_context->DeallocateTempTfLiteTensor(output);
   2318a:	6823      	ldr	r3, [r4, #0]
   2318c:	4649      	mov	r1, r9
   2318e:	4620      	mov	r0, r4
   23190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23192:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
   23194:	6823      	ldr	r3, [r4, #0]
   23196:	4631      	mov	r1, r6
   23198:	4620      	mov	r0, r4
   2319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   2319c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
   2319e:	6823      	ldr	r3, [r4, #0]
   231a0:	4620      	mov	r0, r4
   231a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   231a4:	4639      	mov	r1, r7
   231a6:	4798      	blx	r3
}
   231a8:	4628      	mov	r0, r5
   231aa:	b03d      	add	sp, #244	@ 0xf4
   231ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   231b0:	783a      	ldrb	r2, [r7, #0]
   231b2:	2a01      	cmp	r2, #1
   231b4:	d102      	bne.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
   231b6:	68f2      	ldr	r2, [r6, #12]
   231b8:	2a00      	cmp	r2, #0
   231ba:	d04f      	beq.n	2325c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>
  TF_LITE_ENSURE(context, input != nullptr);
   231bc:	2501      	movs	r5, #1
}
   231be:	4628      	mov	r0, r5
   231c0:	b03d      	add	sp, #244	@ 0xf4
   231c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   231c6:	783a      	ldrb	r2, [r7, #0]
   231c8:	2a01      	cmp	r2, #1
   231ca:	d1f7      	bne.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    const auto* affine_quantization =
   231cc:	687a      	ldr	r2, [r7, #4]
    TF_LITE_ENSURE(context, affine_quantization);
   231ce:	2a00      	cmp	r2, #0
   231d0:	d0f4      	beq.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    TF_LITE_ENSURE(context, affine_quantization->scale);
   231d2:	6811      	ldr	r1, [r2, #0]
   231d4:	2900      	cmp	r1, #0
   231d6:	d0f1      	beq.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
   231d8:	6850      	ldr	r0, [r2, #4]
   231da:	2800      	cmp	r0, #0
   231dc:	d0ee      	beq.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    TF_LITE_ENSURE(
   231de:	680a      	ldr	r2, [r1, #0]
   231e0:	2a01      	cmp	r2, #1
   231e2:	d006      	beq.n	231f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
   231e4:	4956      	ldr	r1, [pc, #344]	@ (23340 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
   231e6:	6809      	ldr	r1, [r1, #0]
   231e8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   231ec:	6849      	ldr	r1, [r1, #4]
   231ee:	428a      	cmp	r2, r1
   231f0:	d1e4      	bne.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
   231f2:	6801      	ldr	r1, [r0, #0]
   231f4:	428a      	cmp	r2, r1
   231f6:	d1e1      	bne.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
    const int num_channels =
   231f8:	4a51      	ldr	r2, [pc, #324]	@ (23340 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
   231fa:	6812      	ldr	r2, [r2, #0]
   231fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
   23200:	4640      	mov	r0, r8
   23202:	6859      	ldr	r1, [r3, #4]
   23204:	f8d8 3034 	ldr.w	r3, [r8, #52]	@ 0x34
   23208:	0089      	lsls	r1, r1, #2
   2320a:	9110      	str	r1, [sp, #64]	@ 0x40
   2320c:	4798      	blx	r3
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
   2320e:	9910      	ldr	r1, [sp, #64]	@ 0x40
    data->reference_op_data.per_channel_output_multiplier =
   23210:	f8ca 0024 	str.w	r0, [sl, #36]	@ 0x24
        reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
   23214:	f8d8 3034 	ldr.w	r3, [r8, #52]	@ 0x34
   23218:	4640      	mov	r0, r8
   2321a:	4798      	blx	r3
    data->reference_op_data.per_channel_output_shift =
   2321c:	f8ca 0028 	str.w	r0, [sl, #40]	@ 0x28
   23220:	e798      	b.n	23154 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x90>
        RuntimeShape(filter->dims->size,
   23222:	6979      	ldr	r1, [r7, #20]
   23224:	f851 3b04 	ldr.w	r3, [r1], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   23228:	a832      	add	r0, sp, #200	@ 0xc8
   2322a:	009a      	lsls	r2, r3, #2
   2322c:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
   23230:	f7f5 f9a6 	bl	18580 <memcpy>
    for (int i = 0; i < size_; i++) {
   23234:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   23236:	2b00      	cmp	r3, #0
   23238:	dd15      	ble.n	23266 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a2>
   2323a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   2323c:	ab31      	add	r3, sp, #196	@ 0xc4
   2323e:	441a      	add	r2, r3
    int buffer_size = 1;
   23240:	2101      	movs	r1, #1
      buffer_size *= dims_data[i];
   23242:	f853 0f04 	ldr.w	r0, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   23246:	429a      	cmp	r2, r3
      buffer_size *= dims_data[i];
   23248:	fb00 f101 	mul.w	r1, r0, r1
    for (int i = 0; i < size_; i++) {
   2324c:	d1f9      	bne.n	23242 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x17e>
    context->RequestScratchBufferInArena(
   2324e:	f8d8 303c 	ldr.w	r3, [r8, #60]	@ 0x3c
   23252:	f10a 0234 	add.w	r2, sl, #52	@ 0x34
   23256:	4640      	mov	r0, r8
   23258:	4798      	blx	r3
   2325a:	e77e      	b.n	2315a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x96>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   2325c:	f8d9 200c 	ldr.w	r2, [r9, #12]
   23260:	2a00      	cmp	r2, #0
   23262:	d0b3      	beq.n	231cc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x108>
   23264:	e7aa      	b.n	231bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xf8>
   23266:	2101      	movs	r1, #1
   23268:	e7f1      	b.n	2324e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18a>
   2326a:	6971      	ldr	r1, [r6, #20]
   2326c:	f851 3b04 	ldr.w	r3, [r1], #4
      : size_(dimensions_count) {
   23270:	931f      	str	r3, [sp, #124]	@ 0x7c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   23272:	009a      	lsls	r2, r3, #2
   23274:	a820      	add	r0, sp, #128	@ 0x80
   23276:	9310      	str	r3, [sp, #64]	@ 0x40
   23278:	f7f5 f982 	bl	18580 <memcpy>
   2327c:	f8d9 1014 	ldr.w	r1, [r9, #20]
   23280:	f851 3b04 	ldr.w	r3, [r1], #4
      : size_(dimensions_count) {
   23284:	9325      	str	r3, [sp, #148]	@ 0x94
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   23286:	009a      	lsls	r2, r3, #2
   23288:	a826      	add	r0, sp, #152	@ 0x98
   2328a:	9311      	str	r3, [sp, #68]	@ 0x44
   2328c:	f7f5 f978 	bl	18580 <memcpy>
   23290:	6979      	ldr	r1, [r7, #20]
   23292:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
   23296:	922b      	str	r2, [sp, #172]	@ 0xac
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   23298:	9209      	str	r2, [sp, #36]	@ 0x24
   2329a:	a82c      	add	r0, sp, #176	@ 0xb0
   2329c:	0092      	lsls	r2, r2, #2
   2329e:	f7f5 f96f 	bl	18580 <memcpy>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   232a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   232a4:	2b04      	cmp	r3, #4
   232a6:	d142      	bne.n	2332e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   232a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   232aa:	2a04      	cmp	r2, #4
   232ac:	d13f      	bne.n	2332e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   232ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   232b0:	2b04      	cmp	r3, #4
   232b2:	d13c      	bne.n	2332e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
    return dims_[i];
   232b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
   232b6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
   232b8:	4293      	cmp	r3, r2
   232ba:	d138      	bne.n	2332e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
   232bc:	9929      	ldr	r1, [sp, #164]	@ 0xa4
   232be:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
   232c0:	428a      	cmp	r2, r1
   232c2:	d134      	bne.n	2332e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
   232c4:	2b01      	cmp	r3, #1
   232c6:	d132      	bne.n	2332e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26a>
    filter_dims.c = output_depth;
   232c8:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
    input_dims.n = batch_size;
   232cc:	9313      	str	r3, [sp, #76]	@ 0x4c
    filter_dims.n = 1;
   232ce:	9317      	str	r3, [sp, #92]	@ 0x5c
    output_dims.c = output_depth;
   232d0:	921e      	str	r2, [sp, #120]	@ 0x78
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
   232d2:	e9da 2300 	ldrd	r2, r3, [sl]
    input_dims.h = input_height;
   232d6:	990e      	ldr	r1, [sp, #56]	@ 0x38
   232d8:	9114      	str	r1, [sp, #80]	@ 0x50
    input_dims.w = input_width;
   232da:	990f      	ldr	r1, [sp, #60]	@ 0x3c
   232dc:	9115      	str	r1, [sp, #84]	@ 0x54
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
   232de:	e9cd 2336 	strd	r2, r3, [sp, #216]	@ 0xd8
    filter_dims.h = filter_height;
   232e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   232e4:	9118      	str	r1, [sp, #96]	@ 0x60
    dw_conv_params.dilation.w = params.dilation_width_factor;
   232e6:	e9db 2305 	ldrd	r2, r3, [fp, #20]
    filter_dims.w = filter_width;
   232ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
   232ec:	9119      	str	r1, [sp, #100]	@ 0x64
    output_dims.h = output_height;
   232ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
   232f0:	911c      	str	r1, [sp, #112]	@ 0x70
    dw_conv_params.dilation.w = params.dilation_width_factor;
   232f2:	e9cd 2338 	strd	r2, r3, [sp, #224]	@ 0xe0
    output_dims.w = output_width;
   232f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
    input_dims.c = input_shape.Dims(3);
   232f8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
    output_dims.w = output_width;
   232fa:	911d      	str	r1, [sp, #116]	@ 0x74
    input_dims.c = input_shape.Dims(3);
   232fc:	9316      	str	r3, [sp, #88]	@ 0x58
    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
   232fe:	a913      	add	r1, sp, #76	@ 0x4c
   23300:	ab1b      	add	r3, sp, #108	@ 0x6c
   23302:	aa17      	add	r2, sp, #92	@ 0x5c
   23304:	a831      	add	r0, sp, #196	@ 0xc4
   23306:	f7f9 f9c9 	bl	1c69c <arm_depthwise_conv_wrapper_s8_get_buffer_size>
    if (buf_size > 0) {
   2330a:	1e01      	subs	r1, r0, #0
   2330c:	dd0a      	ble.n	23324 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x260>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
   2330e:	f8d8 303c 	ldr.w	r3, [r8, #60]	@ 0x3c
   23312:	f10a 0238 	add.w	r2, sl, #56	@ 0x38
   23316:	4640      	mov	r0, r8
   23318:	4798      	blx	r3
   2331a:	2800      	cmp	r0, #0
   2331c:	f43f af35 	beq.w	2318a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
   23320:	4605      	mov	r5, r0
   23322:	e74c      	b.n	231be <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
      data->buffer_idx = -1;
   23324:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   23328:	f8ca 3038 	str.w	r3, [sl, #56]	@ 0x38
  ~RuntimeShape() {}
   2332c:	e72d      	b.n	2318a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TFLITE_DCHECK(node->user_data != nullptr);
   2332e:	f001 ff1b 	bl	25168 <abort>
   23332:	bf00      	nop
   23334:	000409d8 	.word	0x000409d8
   23338:	000409d4 	.word	0x000409d4
   2333c:	000409cc 	.word	0x000409cc
   23340:	000409c8 	.word	0x000409c8

00023344 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   23344:	b510      	push	{r4, lr}
   23346:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
   23348:	2100      	movs	r1, #0
   2334a:	9100      	str	r1, [sp, #0]
   2334c:	4b04      	ldr	r3, [pc, #16]	@ (23360 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x1c>)
   2334e:	4a05      	ldr	r2, [pc, #20]	@ (23364 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x20>)
   23350:	4905      	ldr	r1, [pc, #20]	@ (23368 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x24>)
TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   23352:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
   23354:	f000 f8f8 	bl	23548 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   23358:	4620      	mov	r0, r4
   2335a:	b002      	add	sp, #8
   2335c:	bd10      	pop	{r4, pc}
   2335e:	bf00      	nop
   23360:	00022ff1 	.word	0x00022ff1
   23364:	000230c5 	.word	0x000230c5
   23368:	00022d29 	.word	0x00022d29

0002336c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
   2336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23370:	4614      	mov	r4, r2
  bool has_bias = node->inputs->size == 3;
   23372:	680a      	ldr	r2, [r1, #0]
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   23374:	6812      	ldr	r2, [r2, #0]
    const TfLiteType data_type, OpDataConv* data) {
   23376:	b08d      	sub	sp, #52	@ 0x34
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   23378:	3a02      	subs	r2, #2
   2337a:	2a01      	cmp	r2, #1
    const TfLiteType data_type, OpDataConv* data) {
   2337c:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
   23380:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   23382:	d903      	bls.n	2338c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20>
   23384:	2001      	movs	r0, #1
  micro_context->DeallocateTempTfLiteTensor(filter);
  micro_context->DeallocateTempTfLiteTensor(bias);
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
   23386:	b00d      	add	sp, #52	@ 0x34
   23388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   2338c:	684a      	ldr	r2, [r1, #4]
   2338e:	6812      	ldr	r2, [r2, #0]
   23390:	2a01      	cmp	r2, #1
   23392:	468a      	mov	sl, r1
   23394:	d1f6      	bne.n	23384 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   23396:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
      params.stride_height, params.stride_width, params.dilation_height_factor,
   23398:	f8d4 c004 	ldr.w	ip, [r4, #4]
   2339c:	f8d4 e008 	ldr.w	lr, [r4, #8]
   233a0:	4605      	mov	r5, r0
   233a2:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
   233a6:	3a01      	subs	r2, #1
   233a8:	fb00 f202 	mul.w	r2, r0, r2
   233ac:	9818      	ldr	r0, [sp, #96]	@ 0x60
   233ae:	3801      	subs	r0, #1
   233b0:	fb01 f000 	mul.w	r0, r1, r0
   233b4:	3201      	adds	r2, #1
  auto padding = params.padding;
   233b6:	7821      	ldrb	r1, [r4, #0]
   233b8:	3001      	adds	r0, #1
  if (stride == 0) return 0;
   233ba:	f1bc 0f00 	cmp.w	ip, #0
   233be:	d010      	beq.n	233e2 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x76>
  switch (padding) {
   233c0:	2901      	cmp	r1, #1
   233c2:	f000 80a4 	beq.w	2350e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a2>
   233c6:	2902      	cmp	r1, #2
   233c8:	d11c      	bne.n	23404 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x98>
      return (image_size + stride - effective_filter_size) / stride;
   233ca:	eb0c 0103 	add.w	r1, ip, r3
   233ce:	1a89      	subs	r1, r1, r2
   233d0:	fb91 f1fc 	sdiv	r1, r1, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
   233d4:	3901      	subs	r1, #1
  if (stride == 0) return 0;
   233d6:	f1be 0f00 	cmp.w	lr, #0
   233da:	d10c      	bne.n	233f6 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x8a>
   233dc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
   233e0:	e013      	b.n	2340a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
   233e2:	f1be 0f00 	cmp.w	lr, #0
   233e6:	d00d      	beq.n	23404 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x98>
  switch (padding) {
   233e8:	2901      	cmp	r1, #1
   233ea:	f000 80a1 	beq.w	23530 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1c4>
   233ee:	2902      	cmp	r1, #2
   233f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   233f4:	d108      	bne.n	23408 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9c>
      return (image_size + stride - effective_filter_size) / stride;
   233f6:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   233f8:	4477      	add	r7, lr
   233fa:	1a3f      	subs	r7, r7, r0
   233fc:	fb97 f7fe 	sdiv	r7, r7, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
   23400:	3f01      	subs	r7, #1
      return (image_size + stride - effective_filter_size) / stride;
   23402:	e002      	b.n	2340a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
   23404:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   23408:	460f      	mov	r7, r1
      ((out_size - 1) * stride + effective_filter_size - in_size);
   2340a:	fb01 220c 	mla	r2, r1, ip, r2
   2340e:	fb07 000e 	mla	r0, r7, lr, r0
   23412:	68af      	ldr	r7, [r5, #8]
  int total_padding =
   23414:	1ad3      	subs	r3, r2, r3
   23416:	9a16      	ldr	r2, [sp, #88]	@ 0x58
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   23418:	6839      	ldr	r1, [r7, #0]
   2341a:	1a80      	subs	r0, r0, r2
  total_padding = total_padding > 0 ? total_padding : 0;
   2341c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23420:	f8d1 8018 	ldr.w	r8, [r1, #24]
   23424:	4a44      	ldr	r2, [pc, #272]	@ (23538 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1cc>)
  return total_padding / 2;
   23426:	1059      	asrs	r1, r3, #1
  total_padding = total_padding > 0 ? total_padding : 0;
   23428:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  *offset = total_padding % 2;
   2342c:	f003 0301 	and.w	r3, r3, #1
  data->padding = ComputePaddingHeightWidth(
   23430:	60b3      	str	r3, [r6, #8]
  return total_padding / 2;
   23432:	1043      	asrs	r3, r0, #1
  *offset = total_padding % 2;
   23434:	f000 0001 	and.w	r0, r0, #1
   23438:	6031      	str	r1, [r6, #0]
   2343a:	60f0      	str	r0, [r6, #12]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   2343c:	6812      	ldr	r2, [r2, #0]
  data->padding = ComputePaddingHeightWidth(
   2343e:	6073      	str	r3, [r6, #4]
      micro_context->AllocateTempInputTensor(node, kConvInputTensor);
   23440:	4651      	mov	r1, sl
   23442:	4638      	mov	r0, r7
   23444:	47c0      	blx	r8
  TF_LITE_ENSURE(context, input != nullptr);
   23446:	4680      	mov	r8, r0
   23448:	2800      	cmp	r0, #0
   2344a:	d09b      	beq.n	23384 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvWeightsTensor);
   2344c:	4b3b      	ldr	r3, [pc, #236]	@ (2353c <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d0>)
   2344e:	681a      	ldr	r2, [r3, #0]
   23450:	683b      	ldr	r3, [r7, #0]
   23452:	4651      	mov	r1, sl
   23454:	699b      	ldr	r3, [r3, #24]
   23456:	4638      	mov	r0, r7
   23458:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
   2345a:	4681      	mov	r9, r0
   2345c:	2800      	cmp	r0, #0
   2345e:	d091      	beq.n	23384 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
   23460:	4b37      	ldr	r3, [pc, #220]	@ (23540 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d4>)
   23462:	681a      	ldr	r2, [r3, #0]
   23464:	683b      	ldr	r3, [r7, #0]
   23466:	4651      	mov	r1, sl
   23468:	699b      	ldr	r3, [r3, #24]
   2346a:	4638      	mov	r0, r7
   2346c:	4798      	blx	r3
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
   2346e:	4b35      	ldr	r3, [pc, #212]	@ (23544 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>)
      micro_context->AllocateTempInputTensor(node, kConvBiasTensor);
   23470:	900b      	str	r0, [sp, #44]	@ 0x2c
      micro_context->AllocateTempOutputTensor(node, kConvOutputTensor);
   23472:	681a      	ldr	r2, [r3, #0]
   23474:	683b      	ldr	r3, [r7, #0]
   23476:	4651      	mov	r1, sl
   23478:	69db      	ldr	r3, [r3, #28]
   2347a:	4638      	mov	r0, r7
   2347c:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   2347e:	4682      	mov	sl, r0
   23480:	2800      	cmp	r0, #0
   23482:	f43f af7f 	beq.w	23384 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x18>
  if (data_type != kTfLiteFloat32) {
   23486:	f1bb 0f01 	cmp.w	fp, #1
   2348a:	d01f      	beq.n	234cc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x160>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
   2348c:	f8d9 3014 	ldr.w	r3, [r9, #20]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   23490:	3410      	adds	r4, #16
   23492:	691b      	ldr	r3, [r3, #16]
   23494:	9308      	str	r3, [sp, #32]
   23496:	e9cd a400 	strd	sl, r4, [sp]
   2349a:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
   2349c:	9307      	str	r3, [sp, #28]
   2349e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
   234a0:	9306      	str	r3, [sp, #24]
   234a2:	f106 0330 	add.w	r3, r6, #48	@ 0x30
   234a6:	9305      	str	r3, [sp, #20]
   234a8:	f106 032c 	add.w	r3, r6, #44	@ 0x2c
   234ac:	9304      	str	r3, [sp, #16]
   234ae:	f106 0320 	add.w	r3, r6, #32
   234b2:	9303      	str	r3, [sp, #12]
   234b4:	f106 031c 	add.w	r3, r6, #28
   234b8:	9302      	str	r3, [sp, #8]
   234ba:	4628      	mov	r0, r5
   234bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   234be:	464a      	mov	r2, r9
   234c0:	4641      	mov	r1, r8
   234c2:	f7fd fa6b 	bl	2099c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_S9_i>
   234c6:	2800      	cmp	r0, #0
   234c8:	f47f af5d 	bne.w	23386 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1a>
  micro_context->DeallocateTempTfLiteTensor(input);
   234cc:	683b      	ldr	r3, [r7, #0]
  data->input_zero_point = input->params.zero_point;
   234ce:	f8d8 200c 	ldr.w	r2, [r8, #12]
  micro_context->DeallocateTempTfLiteTensor(input);
   234d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  data->input_zero_point = input->params.zero_point;
   234d4:	6132      	str	r2, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
   234d6:	f8d9 200c 	ldr.w	r2, [r9, #12]
   234da:	6172      	str	r2, [r6, #20]
  data->output_zero_point = output->params.zero_point;
   234dc:	f8da 200c 	ldr.w	r2, [sl, #12]
   234e0:	61b2      	str	r2, [r6, #24]
  micro_context->DeallocateTempTfLiteTensor(input);
   234e2:	4641      	mov	r1, r8
   234e4:	4638      	mov	r0, r7
   234e6:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
   234e8:	683b      	ldr	r3, [r7, #0]
   234ea:	4649      	mov	r1, r9
   234ec:	4638      	mov	r0, r7
   234ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   234f0:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(bias);
   234f2:	683b      	ldr	r3, [r7, #0]
   234f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   234f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   234f8:	4638      	mov	r0, r7
   234fa:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   234fc:	683b      	ldr	r3, [r7, #0]
   234fe:	4638      	mov	r0, r7
   23500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23502:	4651      	mov	r1, sl
   23504:	4798      	blx	r3
  return kTfLiteOk;
   23506:	2000      	movs	r0, #0
}
   23508:	b00d      	add	sp, #52	@ 0x34
   2350a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return (image_size + stride - 1) / stride;
   2350e:	eb0c 0103 	add.w	r1, ip, r3
   23512:	3901      	subs	r1, #1
   23514:	fb91 f1fc 	sdiv	r1, r1, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
   23518:	3901      	subs	r1, #1
  if (stride == 0) return 0;
   2351a:	f1be 0f00 	cmp.w	lr, #0
   2351e:	f43f af5d 	beq.w	233dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x70>
      return (image_size + stride - 1) / stride;
   23522:	9f16      	ldr	r7, [sp, #88]	@ 0x58
   23524:	4477      	add	r7, lr
   23526:	3f01      	subs	r7, #1
   23528:	fb97 f7fe 	sdiv	r7, r7, lr
      ((out_size - 1) * stride + effective_filter_size - in_size);
   2352c:	3f01      	subs	r7, #1
      return (image_size + stride - 1) / stride;
   2352e:	e76c      	b.n	2340a <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x9e>
  switch (padding) {
   23530:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   23534:	e7f5      	b.n	23522 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1b6>
   23536:	bf00      	nop
   23538:	000409c4 	.word	0x000409c4
   2353c:	000409c0 	.word	0x000409c0
   23540:	000409bc 	.word	0x000409bc
   23544:	000409b8 	.word	0x000409b8

00023548 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
   23548:	e9c0 2302 	strd	r2, r3, [r0, #8]
   2354c:	6001      	str	r1, [r0, #0]
    void (*free)(TfLiteContext* context, void* buffer)) {
   2354e:	9b00      	ldr	r3, [sp, #0]
          /*registration_external=*/nullptr};
   23550:	6043      	str	r3, [r0, #4]
   23552:	2100      	movs	r1, #0
   23554:	e9c0 1104 	strd	r1, r1, [r0, #16]
   23558:	e9c0 1106 	strd	r1, r1, [r0, #24]
   2355c:	6201      	str	r1, [r0, #32]
}
   2355e:	4770      	bx	lr

00023560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:
  return context->GetEvalTensor(context, node->inputs->data[index]);
}

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
   23560:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   23562:	b1a8      	cbz	r0, 23590 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x30>
  TFLITE_DCHECK(node != nullptr);
   23564:	b1a1      	cbz	r1, 23590 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x30>
      context, index, node->inputs->size, node->inputs->data);
   23566:	6809      	ldr	r1, [r1, #0]
  const int tensor_index = ValidateTensorIndexing(
   23568:	468c      	mov	ip, r1
  if (index >= 0 && index < max_size) {
   2356a:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
   2356c:	f85c 4b04 	ldr.w	r4, [ip], #4
  if (index >= 0 && index < max_size) {
   23570:	db0c      	blt.n	2358c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
   23572:	42a2      	cmp	r2, r4
   23574:	da0a      	bge.n	2358c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
  if (tensor_index < 0) {
   23576:	f85c 4022 	ldr.w	r4, [ip, r2, lsl #2]
   2357a:	2c00      	cmp	r4, #0
   2357c:	db06      	blt.n	2358c <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
  return context->GetEvalTensor(context, node->inputs->data[index]);
   2357e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  return GetMutableEvalInput(context, node, index);
}
   23582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
   23586:	6d03      	ldr	r3, [r0, #80]	@ 0x50
   23588:	6849      	ldr	r1, [r1, #4]
   2358a:	4718      	bx	r3
}
   2358c:	2000      	movs	r0, #0
   2358e:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(context != nullptr);
   23590:	f001 fdea 	bl	25168 <abort>

00023594 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
   23594:	b130      	cbz	r0, 235a4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x10>
  TFLITE_DCHECK(node != nullptr);
   23596:	b129      	cbz	r1, 235a4 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x10>
  return context->GetEvalTensor(context, node->outputs->data[index]);
   23598:	6849      	ldr	r1, [r1, #4]
   2359a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
   2359c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   235a0:	6851      	ldr	r1, [r2, #4]
   235a2:	4718      	bx	r3
                                const TfLiteNode* node, int index) {
   235a4:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
   235a6:	f001 fddf 	bl	25168 <abort>
   235aa:	bf00      	nop

000235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
   235ac:	b510      	push	{r4, lr}
   235ae:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   235b0:	b151      	cbz	r1, 235c8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1c>
   235b2:	6849      	ldr	r1, [r1, #4]
   235b4:	b141      	cbz	r1, 235c8 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1c>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
   235b6:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
   235ba:	f840 2b04 	str.w	r2, [r0], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   235be:	0092      	lsls	r2, r2, #2
   235c0:	f7f4 ffde 	bl	18580 <memcpy>
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   235c4:	4620      	mov	r0, r4
   235c6:	bd10      	pop	{r4, pc}
  RuntimeShape() : size_(0) {}
   235c8:	2300      	movs	r3, #0
   235ca:	6023      	str	r3, [r4, #0]
   235cc:	4620      	mov	r0, r4
   235ce:	bd10      	pop	{r4, pc}

000235d0 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
   235d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   235d4:	461d      	mov	r5, r3
  if (tensor->type != kTfLiteInt4) {
   235d6:	7a1b      	ldrb	r3, [r3, #8]
   235d8:	2b12      	cmp	r3, #18
                                        const TfLiteEvalTensor* tensor) {
   235da:	b087      	sub	sp, #28
   235dc:	4604      	mov	r4, r0
  if (tensor->type != kTfLiteInt4) {
   235de:	d007      	beq.n	235f0 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x20>
    return *tensor;
   235e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   235e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
}
   235e8:	4620      	mov	r0, r4
   235ea:	b007      	add	sp, #28
   235ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      context->GetScratchBuffer(context, scratch_buffer_index));
   235f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
   235f2:	4608      	mov	r0, r1
   235f4:	4611      	mov	r1, r2
   235f6:	4798      	blx	r3
  return reinterpret_cast<const T*>(tensor->data.raw);
   235f8:	e9d5 8700 	ldrd	r8, r7, [r5]
   235fc:	4606      	mov	r6, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
   235fe:	b307      	cbz	r7, 23642 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x72>
  const int dims_size = dims->size;
   23600:	4639      	mov	r1, r7
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   23602:	a801      	add	r0, sp, #4
   23604:	f851 9b04 	ldr.w	r9, [r1], #4
   23608:	ea4f 0589 	mov.w	r5, r9, lsl #2
   2360c:	462a      	mov	r2, r5
   2360e:	f7f4 ffb7 	bl	18580 <memcpy>
    for (int i = 0; i < size_; i++) {
   23612:	f1b9 0f00 	cmp.w	r9, #0
   23616:	dd14      	ble.n	23642 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x72>
   23618:	466b      	mov	r3, sp
   2361a:	195a      	adds	r2, r3, r5
    int buffer_size = 1;
   2361c:	2101      	movs	r1, #1
      buffer_size *= dims_data[i];
   2361e:	f853 5f04 	ldr.w	r5, [r3, #4]!
    for (int i = 0; i < size_; i++) {
   23622:	4293      	cmp	r3, r2
      buffer_size *= dims_data[i];
   23624:	fb05 f101 	mul.w	r1, r5, r1
    for (int i = 0; i < size_; i++) {
   23628:	d1f9      	bne.n	2361e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x4e>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
   2362a:	4640      	mov	r0, r8
   2362c:	4632      	mov	r2, r6
   2362e:	f7fd f9e9 	bl	20a04 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
  return new_tensor;
   23632:	2309      	movs	r3, #9
}
   23634:	4620      	mov	r0, r4
  return new_tensor;
   23636:	e9c4 6700 	strd	r6, r7, [r4]
   2363a:	7223      	strb	r3, [r4, #8]
}
   2363c:	b007      	add	sp, #28
   2363e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    int buffer_size = 1;
   23642:	2101      	movs	r1, #1
   23644:	e7f1      	b.n	2362a <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x5a>
   23646:	bf00      	nop

00023648 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  PadParams params;
  int32_t output_zero_point;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   23648:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2364a:	b10b      	cbz	r3, 23650 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
   2364c:	2138      	movs	r1, #56	@ 0x38
   2364e:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   23650:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   23652:	f001 fd89 	bl	25168 <abort>
   23656:	bf00      	nop

00023658 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode>:
  return kTfLiteOk;
}

}  // namespace

TfLiteStatus PadPrepare(TfLiteContext* context, TfLiteNode* node) {
   23658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MicroContext* micro_context = GetMicroContext(context);

  TFLITE_DCHECK(node->user_data != nullptr);
   2365c:	68cc      	ldr	r4, [r1, #12]
   2365e:	6885      	ldr	r5, [r0, #8]
TfLiteStatus PadPrepare(TfLiteContext* context, TfLiteNode* node) {
   23660:	b08d      	sub	sp, #52	@ 0x34
  TFLITE_DCHECK(node->user_data != nullptr);
   23662:	2c00      	cmp	r4, #0
   23664:	f000 812c 	beq.w	238c0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x268>
  return node->inputs == nullptr ? 0 : node->inputs->size;
   23668:	680b      	ldr	r3, [r1, #0]
   2366a:	4689      	mov	r9, r1
   2366c:	b11b      	cbz	r3, 23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
   2366e:	681b      	ldr	r3, [r3, #0]
   23670:	3b02      	subs	r3, #2
   23672:	2b01      	cmp	r3, #1
   23674:	d903      	bls.n	2367e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x26>
   23676:	2001      	movs	r0, #1
    micro_context->DeallocateTempTfLiteTensor(constant_values);
  }
  micro_context->DeallocateTempTfLiteTensor(output);

  return kTfLiteOk;
}
   23678:	b00d      	add	sp, #52	@ 0x34
   2367a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return node->outputs == nullptr ? 0 : node->outputs->size;
   2367e:	684b      	ldr	r3, [r1, #4]
   23680:	2b00      	cmp	r3, #0
   23682:	d0f8      	beq.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
   23684:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   23686:	2e01      	cmp	r6, #1
   23688:	d1f5      	bne.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
      micro_context->AllocateTempInputTensor(node, /*index=*/0);
   2368a:	682b      	ldr	r3, [r5, #0]
   2368c:	2200      	movs	r2, #0
   2368e:	699b      	ldr	r3, [r3, #24]
   23690:	4628      	mov	r0, r5
   23692:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   23694:	4607      	mov	r7, r0
   23696:	2800      	cmp	r0, #0
   23698:	d0ed      	beq.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
      micro_context->AllocateTempInputTensor(node, /*index=*/1);
   2369a:	682b      	ldr	r3, [r5, #0]
   2369c:	4632      	mov	r2, r6
   2369e:	699b      	ldr	r3, [r3, #24]
   236a0:	4649      	mov	r1, r9
   236a2:	4628      	mov	r0, r5
   236a4:	4798      	blx	r3
  TF_LITE_ENSURE(context, paddings != nullptr);
   236a6:	4680      	mov	r8, r0
   236a8:	2800      	cmp	r0, #0
   236aa:	d0e4      	beq.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  return node->inputs == nullptr ? 0 : node->inputs->size;
   236ac:	f8d9 a000 	ldr.w	sl, [r9]
   236b0:	f1ba 0f00 	cmp.w	sl, #0
   236b4:	d006      	beq.n	236c4 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
          ? micro_context->AllocateTempInputTensor(node, /*index=*/2)
   236b6:	f8da 3000 	ldr.w	r3, [sl]
   236ba:	2b03      	cmp	r3, #3
   236bc:	f000 8081 	beq.w	237c2 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x16a>
   236c0:	f04f 0a00 	mov.w	sl, #0
      micro_context->AllocateTempOutputTensor(node, /*index=*/0);
   236c4:	682b      	ldr	r3, [r5, #0]
   236c6:	4649      	mov	r1, r9
   236c8:	69db      	ldr	r3, [r3, #28]
   236ca:	2200      	movs	r2, #0
   236cc:	4628      	mov	r0, r5
   236ce:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   236d0:	4681      	mov	r9, r0
   236d2:	2800      	cmp	r0, #0
   236d4:	d0cf      	beq.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  TF_LITE_ENSURE_EQ(context, input->type, output->type);
   236d6:	7f3b      	ldrb	r3, [r7, #28]
   236d8:	7f02      	ldrb	r2, [r0, #28]
   236da:	429a      	cmp	r2, r3
   236dc:	d1cb      	bne.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   236de:	697a      	ldr	r2, [r7, #20]
   236e0:	9201      	str	r2, [sp, #4]
   236e2:	6812      	ldr	r2, [r2, #0]
   236e4:	9202      	str	r2, [sp, #8]
  TF_LITE_ENSURE(context, NumDimensions(input) <=
   236e6:	2a05      	cmp	r2, #5
   236e8:	dcc5      	bgt.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  if (constant_values != nullptr) {
   236ea:	f1ba 0f00 	cmp.w	sl, #0
   236ee:	d021      	beq.n	23734 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xdc>
    TF_LITE_ENSURE_EQ(context, input->type, constant_values->type);
   236f0:	f89a 201c 	ldrb.w	r2, [sl, #28]
   236f4:	429a      	cmp	r2, r3
   236f6:	d1be      	bne.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  return NumElements(t->dims);
   236f8:	f8da 2014 	ldr.w	r2, [sl, #20]
  for (int i = 0; i < dims->size; ++i) {
   236fc:	f8d2 b000 	ldr.w	fp, [r2]
   23700:	f1bb 0f00 	cmp.w	fp, #0
   23704:	dd16      	ble.n	23734 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xdc>
  int64_t count = 1;
   23706:	2000      	movs	r0, #0
   23708:	4696      	mov	lr, r2
   2370a:	2101      	movs	r1, #1
  for (int i = 0; i < dims->size; ++i) {
   2370c:	4684      	mov	ip, r0
   2370e:	9403      	str	r4, [sp, #12]
    count *= dims->data[i];
   23710:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   23714:	17e2      	asrs	r2, r4, #31
   23716:	fb01 f202 	mul.w	r2, r1, r2
  for (int i = 0; i < dims->size; ++i) {
   2371a:	f10c 0c01 	add.w	ip, ip, #1
    count *= dims->data[i];
   2371e:	fb04 2200 	mla	r2, r4, r0, r2
  for (int i = 0; i < dims->size; ++i) {
   23722:	45dc      	cmp	ip, fp
    count *= dims->data[i];
   23724:	fba1 1004 	umull	r1, r0, r1, r4
   23728:	4410      	add	r0, r2
  for (int i = 0; i < dims->size; ++i) {
   2372a:	d1f1      	bne.n	23710 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
    TF_LITE_ENSURE_EQ(context, NumElements(constant_values), 1);
   2372c:	3901      	subs	r1, #1
   2372e:	4301      	orrs	r1, r0
   23730:	9c03      	ldr	r4, [sp, #12]
   23732:	d1a0      	bne.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
   23734:	f8d8 1014 	ldr.w	r1, [r8, #20]
   23738:	9304      	str	r3, [sp, #16]
   2373a:	f851 bb04 	ldr.w	fp, [r1], #4
   2373e:	9105      	str	r1, [sp, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   23740:	ea4f 038b 	mov.w	r3, fp, lsl #2
   23744:	a807      	add	r0, sp, #28
   23746:	461a      	mov	r2, r3
   23748:	9303      	str	r3, [sp, #12]
   2374a:	f7f4 ff19 	bl	18580 <memcpy>
    for (int i = 0; i < size_; i++) {
   2374e:	f1bb 0f00 	cmp.w	fp, #0
   23752:	dd90      	ble.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
   23754:	9b03      	ldr	r3, [sp, #12]
   23756:	3318      	adds	r3, #24
   23758:	eb0d 0c03 	add.w	ip, sp, r3
    int buffer_size = 1;
   2375c:	9b04      	ldr	r3, [sp, #16]
   2375e:	aa06      	add	r2, sp, #24
   23760:	2001      	movs	r0, #1
      buffer_size *= dims_data[i];
   23762:	f852 1f04 	ldr.w	r1, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   23766:	4562      	cmp	r2, ip
      buffer_size *= dims_data[i];
   23768:	fb01 f000 	mul.w	r0, r1, r0
    for (int i = 0; i < size_; i++) {
   2376c:	d1f9      	bne.n	23762 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x10a>
  TF_LITE_ENSURE_EQ(context, GetTensorShape(paddings).FlatSize(),
   2376e:	f8d9 1014 	ldr.w	r1, [r9, #20]
   23772:	680a      	ldr	r2, [r1, #0]
   23774:	9204      	str	r2, [sp, #16]
   23776:	ebb0 0f42 	cmp.w	r0, r2, lsl #1
   2377a:	f47f af7c 	bne.w	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  TF_LITE_ENSURE(context, IsConstantTensor(paddings));
   2377e:	f898 201d 	ldrb.w	r2, [r8, #29]
   23782:	2a01      	cmp	r2, #1
   23784:	f47f af77 	bne.w	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  for (int i = 0; i < output->dims->size; i++) {
   23788:	9804      	ldr	r0, [sp, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2378a:	f8d8 b010 	ldr.w	fp, [r8, #16]
   2378e:	2800      	cmp	r0, #0
   23790:	dd21      	ble.n	237d6 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x17e>
   23792:	f8dd e004 	ldr.w	lr, [sp, #4]
   23796:	9304      	str	r3, [sp, #16]
   23798:	2200      	movs	r2, #0
   2379a:	f10b 0c04 	add.w	ip, fp, #4
   2379e:	9401      	str	r4, [sp, #4]
   237a0:	e002      	b.n	237a8 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x150>
   237a2:	3201      	adds	r2, #1
   237a4:	4290      	cmp	r0, r2
   237a6:	d014      	beq.n	237d2 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x17a>
        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];
   237a8:	f85b 3032 	ldr.w	r3, [fp, r2, lsl #3]
   237ac:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   237b0:	441c      	add	r4, r3
    int expected_dim =
   237b2:	f85c 3032 	ldr.w	r3, [ip, r2, lsl #3]
   237b6:	4423      	add	r3, r4
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
   237b8:	f851 4f04 	ldr.w	r4, [r1, #4]!
   237bc:	429c      	cmp	r4, r3
   237be:	d0f0      	beq.n	237a2 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x14a>
   237c0:	e759      	b.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
          ? micro_context->AllocateTempInputTensor(node, /*index=*/2)
   237c2:	682b      	ldr	r3, [r5, #0]
   237c4:	2202      	movs	r2, #2
   237c6:	699b      	ldr	r3, [r3, #24]
   237c8:	4649      	mov	r1, r9
   237ca:	4628      	mov	r0, r5
   237cc:	4798      	blx	r3
   237ce:	4682      	mov	sl, r0
   237d0:	e778      	b.n	236c4 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   237d2:	9c01      	ldr	r4, [sp, #4]
   237d4:	9b04      	ldr	r3, [sp, #16]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   237d6:	9905      	ldr	r1, [sp, #20]
   237d8:	9301      	str	r3, [sp, #4]
  data->params.resizing_category = ResizingCategory::kGenericResize;
   237da:	2202      	movs	r2, #2
   237dc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
   237e0:	a807      	add	r0, sp, #28
   237e2:	9a03      	ldr	r2, [sp, #12]
   237e4:	f7f4 fecc 	bl	18580 <memcpy>
    for (int i = 0; i < size_; i++) {
   237e8:	9903      	ldr	r1, [sp, #12]
   237ea:	9b01      	ldr	r3, [sp, #4]
   237ec:	aa06      	add	r2, sp, #24
   237ee:	4411      	add	r1, r2
      buffer_size *= dims_data[i];
   237f0:	f852 0f04 	ldr.w	r0, [r2, #4]!
    for (int i = 0; i < size_; i++) {
   237f4:	4291      	cmp	r1, r2
      buffer_size *= dims_data[i];
   237f6:	fb00 f606 	mul.w	r6, r0, r6
    for (int i = 0; i < size_; i++) {
   237fa:	d1f9      	bne.n	237f0 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x198>
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   237fc:	2e08      	cmp	r6, #8
   237fe:	d046      	beq.n	2388e <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x236>
  data->params.left_padding_count = num_input_dimensions;
   23800:	9902      	ldr	r1, [sp, #8]
   23802:	b24a      	sxtb	r2, r1
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
   23804:	2900      	cmp	r1, #0
  data->params.left_padding_count = num_input_dimensions;
   23806:	7022      	strb	r2, [r4, #0]
  data->params.right_padding_count = num_input_dimensions;
   23808:	7622      	strb	r2, [r4, #24]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
   2380a:	dd0f      	ble.n	2382c <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1d4>
   2380c:	9a02      	ldr	r2, [sp, #8]
   2380e:	eb0b 0bc2 	add.w	fp, fp, r2, lsl #3
   23812:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    data->params.left_padding[idx] = paddings_data[idx * 2];
   23816:	f85b 1c08 	ldr.w	r1, [fp, #-8]
   2381a:	f842 1904 	str.w	r1, [r2], #-4
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
   2381e:	f85b 1c04 	ldr.w	r1, [fp, #-4]
   23822:	61d1      	str	r1, [r2, #28]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
   23824:	4294      	cmp	r4, r2
   23826:	f1ab 0b08 	sub.w	fp, fp, #8
   2382a:	d1f4      	bne.n	23816 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1be>
  if (input->type == kTfLiteInt8) {
   2382c:	2b09      	cmp	r3, #9
   2382e:	d018      	beq.n	23862 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x20a>
  micro_context->DeallocateTempTfLiteTensor(input);
   23830:	682b      	ldr	r3, [r5, #0]
   23832:	4639      	mov	r1, r7
   23834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23836:	4628      	mov	r0, r5
   23838:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(paddings);
   2383a:	682b      	ldr	r3, [r5, #0]
   2383c:	4641      	mov	r1, r8
   2383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23840:	4628      	mov	r0, r5
   23842:	4798      	blx	r3
  if (constant_values != nullptr) {
   23844:	f1ba 0f00 	cmp.w	sl, #0
   23848:	d004      	beq.n	23854 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1fc>
    micro_context->DeallocateTempTfLiteTensor(constant_values);
   2384a:	682b      	ldr	r3, [r5, #0]
   2384c:	4651      	mov	r1, sl
   2384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   23850:	4628      	mov	r0, r5
   23852:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   23854:	682b      	ldr	r3, [r5, #0]
   23856:	4628      	mov	r0, r5
   23858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   2385a:	4649      	mov	r1, r9
   2385c:	4798      	blx	r3
  return kTfLiteOk;
   2385e:	2000      	movs	r0, #0
   23860:	e70a      	b.n	23678 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x20>
      TF_LITE_ENSURE(context, output->params.zero_point >=
   23862:	f8d9 300c 	ldr.w	r3, [r9, #12]
    if (constant_values == nullptr) {
   23866:	f1ba 0f00 	cmp.w	sl, #0
   2386a:	d024      	beq.n	238b6 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x25e>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point,
   2386c:	f8da 200c 	ldr.w	r2, [sl, #12]
   23870:	429a      	cmp	r2, r3
   23872:	f47f af00 	bne.w	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
      TF_LITE_ENSURE_EQ(context, static_cast<double>(output->params.scale),
   23876:	ed99 7a02 	vldr	s14, [r9, #8]
   2387a:	edda 7a02 	vldr	s15, [sl, #8]
   2387e:	eeb4 7a67 	vcmp.f32	s14, s15
   23882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23886:	f47f aef6 	bne.w	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
    data->output_zero_point = output->params.zero_point;
   2388a:	6363      	str	r3, [r4, #52]	@ 0x34
   2388c:	e7d0      	b.n	23830 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1d8>
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   2388e:	f8db 2000 	ldr.w	r2, [fp]
   23892:	2a00      	cmp	r2, #0
   23894:	d1b4      	bne.n	23800 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
   23896:	f8db 2004 	ldr.w	r2, [fp, #4]
   2389a:	2a00      	cmp	r2, #0
   2389c:	d1b0      	bne.n	23800 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
   2389e:	f8db 2018 	ldr.w	r2, [fp, #24]
   238a2:	2a00      	cmp	r2, #0
   238a4:	d1ac      	bne.n	23800 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
      (paddings_data[6] == 0 && paddings_data[7] == 0)) {
   238a6:	f8db 201c 	ldr.w	r2, [fp, #28]
   238aa:	2a00      	cmp	r2, #0
   238ac:	d1a8      	bne.n	23800 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
    data->params.resizing_category = ResizingCategory::kImageStyle;
   238ae:	2201      	movs	r2, #1
   238b0:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
   238b4:	e7a4      	b.n	23800 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
      TF_LITE_ENSURE(context, output->params.zero_point >=
   238b6:	f103 0280 	add.w	r2, r3, #128	@ 0x80
   238ba:	2aff      	cmp	r2, #255	@ 0xff
   238bc:	d9e5      	bls.n	2388a <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x232>
   238be:	e6da      	b.n	23676 <_ZN6tflite10PadPrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  TFLITE_DCHECK(node->user_data != nullptr);
   238c0:	f001 fc52 	bl	25168 <abort>

000238c4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>:
// value.
//
// Note that two typenames are required, so that T=P=int32_t is considered a
// specialization distinct from P=int32_t.
template <typename T, typename P>
inline void PadImpl(const tflite::PadParams& op_params,
   238c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238c8:	b0a7      	sub	sp, #156	@ 0x9c
   238ca:	461c      	mov	r4, r3
   238cc:	9209      	str	r2, [sp, #36]	@ 0x24
  int32_t DimensionsCount() const { return size_; }
   238ce:	680a      	ldr	r2, [r1, #0]
   238d0:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
   238d2:	f8dd b0c4 	ldr.w	fp, [sp, #196]	@ 0xc4
      : size_(new_shape_size) {
   238d6:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   238d8:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   238da:	931a      	str	r3, [sp, #104]	@ 0x68
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   238dc:	f300 80f4 	bgt.w	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   238e0:	4605      	mov	r5, r0
   238e2:	f1d2 0005 	rsbs	r0, r2, #5
   238e6:	d00c      	beq.n	23902 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x3e>
   238e8:	af1a      	add	r7, sp, #104	@ 0x68
   238ea:	2300      	movs	r3, #0
    dims_[i] = val;
   238ec:	f04f 0c01 	mov.w	ip, #1
   238f0:	e002      	b.n	238f8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x34>
    TFLITE_DCHECK_LT(i, size_);
   238f2:	2b05      	cmp	r3, #5
   238f4:	f000 80e8 	beq.w	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   238f8:	3301      	adds	r3, #1
   238fa:	4298      	cmp	r0, r3
    dims_[i] = val;
   238fc:	f847 cf04 	str.w	ip, [r7, #4]!
    for (int i = 0; i < size_increase; ++i) {
   23900:	d1f7      	bne.n	238f2 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x2e>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   23902:	ab1b      	add	r3, sp, #108	@ 0x6c
   23904:	0092      	lsls	r2, r2, #2
   23906:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2390a:	3104      	adds	r1, #4
   2390c:	f7f4 fe38 	bl	18580 <memcpy>
  int32_t DimensionsCount() const { return size_; }
   23910:	6832      	ldr	r2, [r6, #0]
      : size_(new_shape_size) {
   23912:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23914:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   23916:	9320      	str	r3, [sp, #128]	@ 0x80
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23918:	f300 80d6 	bgt.w	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   2391c:	f1d2 0005 	rsbs	r0, r2, #5
   23920:	d00b      	beq.n	2393a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x76>
   23922:	a920      	add	r1, sp, #128	@ 0x80
   23924:	2300      	movs	r3, #0
    dims_[i] = val;
   23926:	2701      	movs	r7, #1
   23928:	e002      	b.n	23930 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x6c>
    TFLITE_DCHECK_LT(i, size_);
   2392a:	2b05      	cmp	r3, #5
   2392c:	f000 80cc 	beq.w	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23930:	3301      	adds	r3, #1
   23932:	4298      	cmp	r0, r3
    dims_[i] = val;
   23934:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   23938:	d1f7      	bne.n	2392a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x66>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   2393a:	ab21      	add	r3, sp, #132	@ 0x84
   2393c:	0092      	lsls	r2, r2, #2
   2393e:	1d31      	adds	r1, r6, #4
   23940:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23944:	f7f4 fe1c 	bl	18580 <memcpy>
                    T* output_data) {
  const RuntimeShape ext_input_shape =
      RuntimeShape::ExtendedShape(PadKernelMaxDimensionCount(), input_shape);
  const RuntimeShape ext_output_shape =
      RuntimeShape::ExtendedShape(PadKernelMaxDimensionCount(), output_shape);
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   23948:	f995 2000 	ldrsb.w	r2, [r5]
   2394c:	2a05      	cmp	r2, #5
   2394e:	f300 80bb 	bgt.w	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   23952:	f995 6018 	ldrsb.w	r6, [r5, #24]
   23956:	2e05      	cmp	r6, #5
   23958:	f300 80b6 	bgt.w	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>

  // Runtime calls are currently fixed at 5 dimensions. Copy inputs so we can
  // pad them to 5 dims (yes, we are "padding the padding").
  int left_padding_copy[PadKernelMaxDimensionCount()];
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
    left_padding_copy[i] = 0;
   2395c:	2300      	movs	r3, #0
   2395e:	2000      	movs	r0, #0
   23960:	2100      	movs	r1, #0
  }
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   23962:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
   23964:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
   23968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
   2396c:	9312      	str	r3, [sp, #72]	@ 0x48
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2396e:	dd08      	ble.n	23982 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0xbe>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
                      op_params.left_padding_count] = op_params.left_padding[i];
   23970:	f1c2 0005 	rsb	r0, r2, #5
   23974:	ab0e      	add	r3, sp, #56	@ 0x38
   23976:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2397a:	0092      	lsls	r2, r2, #2
   2397c:	1d29      	adds	r1, r5, #4
   2397e:	f7f4 fdff 	bl	18580 <memcpy>
  }
  int right_padding_copy[PadKernelMaxDimensionCount()];
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
    right_padding_copy[i] = 0;
   23982:	2300      	movs	r3, #0
   23984:	2200      	movs	r2, #0
   23986:	9318      	str	r3, [sp, #96]	@ 0x60
  }
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   23988:	2e00      	cmp	r6, #0
    right_padding_copy[i] = 0;
   2398a:	f04f 0300 	mov.w	r3, #0
   2398e:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
   23992:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   23996:	dd09      	ble.n	239ac <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0xe8>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
                       op_params.right_padding_count] =
   23998:	f1c6 0005 	rsb	r0, r6, #5
   2399c:	ab14      	add	r3, sp, #80	@ 0x50
   2399e:	f105 011c 	add.w	r1, r5, #28
   239a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   239a6:	00b2      	lsls	r2, r6, #2
   239a8:	f7f4 fdea 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   239ac:	9920      	ldr	r1, [sp, #128]	@ 0x80
   239ae:	2900      	cmp	r1, #0
   239b0:	f340 808a 	ble.w	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   239b4:	2901      	cmp	r1, #1
    return dims_[i];
   239b6:	9e21      	ldr	r6, [sp, #132]	@ 0x84
    TFLITE_DCHECK_LT(i, size_);
   239b8:	f000 8086 	beq.w	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   239bc:	2902      	cmp	r1, #2
    return dims_[i];
   239be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
    TFLITE_DCHECK_LT(i, size_);
   239c0:	f000 8082 	beq.w	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   239c4:	2903      	cmp	r1, #3
    return dims_[i];
   239c6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    TFLITE_DCHECK_LT(i, size_);
   239c8:	d07e      	beq.n	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   239ca:	2904      	cmp	r1, #4
    return dims_[i];
   239cc:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
    TFLITE_DCHECK_LT(i, size_);
   239d0:	d07a      	beq.n	23ac8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
  const int output_width = ext_output_shape.Dims(3);
  const int output_depth = ext_output_shape.Dims(4);

  const int left_b_padding = left_padding_copy[0];
  const int left_p_padding = left_padding_copy[1];
  const int left_h_padding = left_padding_copy[2];
   239d2:	9910      	ldr	r1, [sp, #64]	@ 0x40
   239d4:	9102      	str	r1, [sp, #8]
  const int left_w_padding = left_padding_copy[3];
   239d6:	9911      	ldr	r1, [sp, #68]	@ 0x44
   239d8:	9105      	str	r1, [sp, #20]
  const int left_d_padding = left_padding_copy[4];
   239da:	9912      	ldr	r1, [sp, #72]	@ 0x48
   239dc:	9108      	str	r1, [sp, #32]

  const int right_b_padding = right_padding_copy[0];
  const int right_p_padding = right_padding_copy[1];
   239de:	e9dd 5114 	ldrd	r5, r1, [sp, #80]	@ 0x50
   239e2:	910a      	str	r1, [sp, #40]	@ 0x28
  const int right_h_padding = right_padding_copy[2];
  const int right_w_padding = right_padding_copy[3];
   239e4:	e9dd 1016 	ldrd	r1, r0, [sp, #88]	@ 0x58

  const T pad_value = *pad_value_ptr;

  const T* in_ptr = input_data;
  T* out_ptr = output_data;
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   239e8:	2e00      	cmp	r6, #0
  const int right_w_padding = right_padding_copy[3];
   239ea:	9007      	str	r0, [sp, #28]
  const int right_d_padding = right_padding_copy[4];
   239ec:	9818      	ldr	r0, [sp, #96]	@ 0x60
    return dims_[i];
   239ee:	f8dd c094 	ldr.w	ip, [sp, #148]	@ 0x94
   239f2:	900b      	str	r0, [sp, #44]	@ 0x2c
  const int left_p_padding = left_padding_copy[1];
   239f4:	e9dd e90e 	ldrd	lr, r9, [sp, #56]	@ 0x38
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   239f8:	dd63      	ble.n	23ac2 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1fe>
    for (int out_p = 0; out_p < output_plane; ++out_p) {
      for (int out_h = 0; out_h < output_height; ++out_h) {
        for (int out_w = 0; out_w < output_width; ++out_w) {
          for (int out_d = 0; out_d < output_depth; ++out_d) {
            if (out_b < left_b_padding ||
                out_b >= output_batch - right_b_padding ||
   239fa:	1b75      	subs	r5, r6, r5
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   239fc:	2000      	movs	r0, #0
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   239fe:	2b00      	cmp	r3, #0
   23a00:	dd5c      	ble.n	23abc <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1f8>
                out_p < left_p_padding ||
                out_p >= output_plane - right_p_padding ||
   23a02:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23a04:	f04f 0800 	mov.w	r8, #0
                out_p >= output_plane - right_p_padding ||
   23a08:	1bdf      	subs	r7, r3, r7
   23a0a:	9701      	str	r7, [sp, #4]
   23a0c:	4647      	mov	r7, r8
      for (int out_h = 0; out_h < output_height; ++out_h) {
   23a0e:	2a00      	cmp	r2, #0
   23a10:	dd51      	ble.n	23ab6 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1f2>
   23a12:	e9cd 630c 	strd	r6, r3, [sp, #48]	@ 0x30
   23a16:	f04f 0800 	mov.w	r8, #0
   23a1a:	9106      	str	r1, [sp, #24]
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23a1c:	f1ba 0f00 	cmp.w	sl, #0
   23a20:	dd42      	ble.n	23aa8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1e4>
                out_h < left_h_padding ||
                out_h >= output_height - right_h_padding ||
   23a22:	9b06      	ldr	r3, [sp, #24]
   23a24:	1ad3      	subs	r3, r2, r3
   23a26:	e9cd 3203 	strd	r3, r2, [sp, #12]
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23a2a:	2600      	movs	r6, #0
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23a2c:	f1bc 0f00 	cmp.w	ip, #0
   23a30:	dd36      	ble.n	23aa0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1dc>
   23a32:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
   23a36:	2300      	movs	r3, #0
   23a38:	9600      	str	r6, [sp, #0]
   23a3a:	e027      	b.n	23a8c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
            if (out_b < left_b_padding ||
   23a3c:	4285      	cmp	r5, r0
   23a3e:	dd27      	ble.n	23a90 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_b >= output_batch - right_b_padding ||
   23a40:	45b9      	cmp	r9, r7
   23a42:	dc25      	bgt.n	23a90 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_p < left_p_padding ||
   23a44:	9901      	ldr	r1, [sp, #4]
   23a46:	42b9      	cmp	r1, r7
   23a48:	dd22      	ble.n	23a90 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_p >= output_plane - right_p_padding ||
   23a4a:	9902      	ldr	r1, [sp, #8]
   23a4c:	4541      	cmp	r1, r8
   23a4e:	dc1f      	bgt.n	23a90 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_h < left_h_padding ||
   23a50:	9903      	ldr	r1, [sp, #12]
   23a52:	4541      	cmp	r1, r8
   23a54:	dd1c      	ble.n	23a90 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_h >= output_height - right_h_padding ||
   23a56:	9905      	ldr	r1, [sp, #20]
   23a58:	9e00      	ldr	r6, [sp, #0]
   23a5a:	428e      	cmp	r6, r1
   23a5c:	db18      	blt.n	23a90 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_w < left_w_padding ||
                out_w >= output_width - right_w_padding ||
   23a5e:	9907      	ldr	r1, [sp, #28]
   23a60:	ebaa 0101 	sub.w	r1, sl, r1
                out_w < left_w_padding ||
   23a64:	428e      	cmp	r6, r1
   23a66:	da13      	bge.n	23a90 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_w >= output_width - right_w_padding ||
   23a68:	9908      	ldr	r1, [sp, #32]
   23a6a:	4299      	cmp	r1, r3
   23a6c:	dc10      	bgt.n	23a90 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
                out_d < left_d_padding ||
                out_d >= output_depth - right_d_padding) {
   23a6e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   23a70:	ebac 0101 	sub.w	r1, ip, r1
                out_d < left_d_padding ||
   23a74:	4299      	cmp	r1, r3
   23a76:	dd0b      	ble.n	23a90 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1cc>
              *out_ptr++ = pad_value;
            } else {
              *out_ptr++ = *in_ptr++;
   23a78:	9909      	ldr	r1, [sp, #36]	@ 0x24
   23a7a:	460e      	mov	r6, r1
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23a7c:	3301      	adds	r3, #1
              *out_ptr++ = *in_ptr++;
   23a7e:	f916 1b01 	ldrsb.w	r1, [r6], #1
   23a82:	f802 1f01 	strb.w	r1, [r2, #1]!
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23a86:	459c      	cmp	ip, r3
              *out_ptr++ = *in_ptr++;
   23a88:	9609      	str	r6, [sp, #36]	@ 0x24
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23a8a:	d007      	beq.n	23a9c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1d8>
            if (out_b < left_b_padding ||
   23a8c:	4586      	cmp	lr, r0
   23a8e:	ddd5      	ble.n	23a3c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x178>
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23a90:	3301      	adds	r3, #1
              *out_ptr++ = pad_value;
   23a92:	4621      	mov	r1, r4
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23a94:	459c      	cmp	ip, r3
   23a96:	f802 1f01 	strb.w	r1, [r2, #1]!
   23a9a:	d1f7      	bne.n	23a8c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
   23a9c:	9e00      	ldr	r6, [sp, #0]
   23a9e:	44e3      	add	fp, ip
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23aa0:	3601      	adds	r6, #1
   23aa2:	45b2      	cmp	sl, r6
   23aa4:	d1c2      	bne.n	23a2c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x168>
   23aa6:	9a04      	ldr	r2, [sp, #16]
      for (int out_h = 0; out_h < output_height; ++out_h) {
   23aa8:	f108 0801 	add.w	r8, r8, #1
   23aac:	4542      	cmp	r2, r8
   23aae:	d1b5      	bne.n	23a1c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x158>
   23ab0:	e9dd 630c 	ldrd	r6, r3, [sp, #48]	@ 0x30
   23ab4:	9906      	ldr	r1, [sp, #24]
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23ab6:	3701      	adds	r7, #1
   23ab8:	42bb      	cmp	r3, r7
   23aba:	d1a8      	bne.n	23a0e <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x14a>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23abc:	3001      	adds	r0, #1
   23abe:	4286      	cmp	r6, r0
   23ac0:	d19d      	bne.n	239fe <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x13a>
          }
        }
      }
    }
  }
}
   23ac2:	b027      	add	sp, #156	@ 0x9c
   23ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23ac8:	f001 fb4e 	bl	25168 <abort>

00023acc <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>:
inline void PadImpl(const tflite::PadParams& op_params,
   23acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ad0:	ed2d 8b02 	vpush	{d8}
   23ad4:	b0a7      	sub	sp, #156	@ 0x9c
   23ad6:	461d      	mov	r5, r3
   23ad8:	9209      	str	r2, [sp, #36]	@ 0x24
  int32_t DimensionsCount() const { return size_; }
   23ada:	680a      	ldr	r2, [r1, #0]
   23adc:	9e32      	ldr	r6, [sp, #200]	@ 0xc8
      : size_(new_shape_size) {
   23ade:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23ae0:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   23ae2:	931a      	str	r3, [sp, #104]	@ 0x68
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23ae4:	f300 80f4 	bgt.w	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23ae8:	4604      	mov	r4, r0
   23aea:	f1d2 0005 	rsbs	r0, r2, #5
   23aee:	eeb0 8a40 	vmov.f32	s16, s0
   23af2:	d00c      	beq.n	23b0e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x42>
   23af4:	af1a      	add	r7, sp, #104	@ 0x68
   23af6:	2300      	movs	r3, #0
    dims_[i] = val;
   23af8:	f04f 0c01 	mov.w	ip, #1
   23afc:	e002      	b.n	23b04 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x38>
    TFLITE_DCHECK_LT(i, size_);
   23afe:	2b05      	cmp	r3, #5
   23b00:	f000 80e6 	beq.w	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23b04:	3301      	adds	r3, #1
   23b06:	4298      	cmp	r0, r3
    dims_[i] = val;
   23b08:	f847 cf04 	str.w	ip, [r7, #4]!
    for (int i = 0; i < size_increase; ++i) {
   23b0c:	d1f7      	bne.n	23afe <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x32>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   23b0e:	ab1b      	add	r3, sp, #108	@ 0x6c
   23b10:	0092      	lsls	r2, r2, #2
   23b12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23b16:	3104      	adds	r1, #4
   23b18:	f7f4 fd32 	bl	18580 <memcpy>
  int32_t DimensionsCount() const { return size_; }
   23b1c:	682a      	ldr	r2, [r5, #0]
      : size_(new_shape_size) {
   23b1e:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23b20:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   23b22:	9320      	str	r3, [sp, #128]	@ 0x80
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23b24:	f300 80d4 	bgt.w	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23b28:	f1d2 0005 	rsbs	r0, r2, #5
   23b2c:	d00b      	beq.n	23b46 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x7a>
   23b2e:	a920      	add	r1, sp, #128	@ 0x80
   23b30:	2300      	movs	r3, #0
    dims_[i] = val;
   23b32:	2701      	movs	r7, #1
   23b34:	e002      	b.n	23b3c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x70>
    TFLITE_DCHECK_LT(i, size_);
   23b36:	2b05      	cmp	r3, #5
   23b38:	f000 80ca 	beq.w	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    for (int i = 0; i < size_increase; ++i) {
   23b3c:	3301      	adds	r3, #1
   23b3e:	4298      	cmp	r0, r3
    dims_[i] = val;
   23b40:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   23b44:	d1f7      	bne.n	23b36 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x6a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   23b46:	ab21      	add	r3, sp, #132	@ 0x84
   23b48:	0092      	lsls	r2, r2, #2
   23b4a:	1d29      	adds	r1, r5, #4
   23b4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23b50:	f7f4 fd16 	bl	18580 <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   23b54:	f994 2000 	ldrsb.w	r2, [r4]
   23b58:	2a05      	cmp	r2, #5
   23b5a:	f300 80b9 	bgt.w	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   23b5e:	f994 5018 	ldrsb.w	r5, [r4, #24]
   23b62:	2d05      	cmp	r5, #5
   23b64:	f300 80b4 	bgt.w	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
    left_padding_copy[i] = 0;
   23b68:	2300      	movs	r3, #0
   23b6a:	2000      	movs	r0, #0
   23b6c:	2100      	movs	r1, #0
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   23b6e:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
   23b70:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
   23b74:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
   23b78:	9312      	str	r3, [sp, #72]	@ 0x48
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   23b7a:	dd08      	ble.n	23b8e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0xc2>
                      op_params.left_padding_count] = op_params.left_padding[i];
   23b7c:	f1c2 0005 	rsb	r0, r2, #5
   23b80:	ab0e      	add	r3, sp, #56	@ 0x38
   23b82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23b86:	0092      	lsls	r2, r2, #2
   23b88:	1d21      	adds	r1, r4, #4
   23b8a:	f7f4 fcf9 	bl	18580 <memcpy>
    right_padding_copy[i] = 0;
   23b8e:	2300      	movs	r3, #0
   23b90:	2200      	movs	r2, #0
   23b92:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
   23b96:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
   23b9a:	2300      	movs	r3, #0
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   23b9c:	429d      	cmp	r5, r3
    right_padding_copy[i] = 0;
   23b9e:	9318      	str	r3, [sp, #96]	@ 0x60
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   23ba0:	dd09      	ble.n	23bb6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0xea>
                       op_params.right_padding_count] =
   23ba2:	f1c5 0005 	rsb	r0, r5, #5
   23ba6:	ab14      	add	r3, sp, #80	@ 0x50
   23ba8:	f104 011c 	add.w	r1, r4, #28
   23bac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23bb0:	00aa      	lsls	r2, r5, #2
   23bb2:	f7f4 fce5 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   23bb6:	9920      	ldr	r1, [sp, #128]	@ 0x80
   23bb8:	2900      	cmp	r1, #0
   23bba:	f340 8089 	ble.w	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23bbe:	2901      	cmp	r1, #1
    return dims_[i];
   23bc0:	9c21      	ldr	r4, [sp, #132]	@ 0x84
    TFLITE_DCHECK_LT(i, size_);
   23bc2:	f000 8085 	beq.w	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23bc6:	2902      	cmp	r1, #2
    return dims_[i];
   23bc8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
    TFLITE_DCHECK_LT(i, size_);
   23bca:	f000 8081 	beq.w	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23bce:	2903      	cmp	r1, #3
    return dims_[i];
   23bd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    TFLITE_DCHECK_LT(i, size_);
   23bd2:	d07d      	beq.n	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
   23bd4:	2904      	cmp	r1, #4
    return dims_[i];
   23bd6:	f8dd b090 	ldr.w	fp, [sp, #144]	@ 0x90
    TFLITE_DCHECK_LT(i, size_);
   23bda:	d079      	beq.n	23cd0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x204>
  const int left_h_padding = left_padding_copy[2];
   23bdc:	9910      	ldr	r1, [sp, #64]	@ 0x40
   23bde:	9102      	str	r1, [sp, #8]
  const int left_w_padding = left_padding_copy[3];
   23be0:	9911      	ldr	r1, [sp, #68]	@ 0x44
   23be2:	9105      	str	r1, [sp, #20]
  const int left_d_padding = left_padding_copy[4];
   23be4:	9912      	ldr	r1, [sp, #72]	@ 0x48
   23be6:	9108      	str	r1, [sp, #32]
  const int right_p_padding = right_padding_copy[1];
   23be8:	e9dd 1514 	ldrd	r1, r5, [sp, #80]	@ 0x50
   23bec:	950a      	str	r5, [sp, #40]	@ 0x28
  const int right_h_padding = right_padding_copy[2];
   23bee:	9d16      	ldr	r5, [sp, #88]	@ 0x58
   23bf0:	9506      	str	r5, [sp, #24]
  const int right_w_padding = right_padding_copy[3];
   23bf2:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
   23bf4:	9507      	str	r5, [sp, #28]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23bf6:	2c00      	cmp	r4, #0
  const int right_d_padding = right_padding_copy[4];
   23bf8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
    return dims_[i];
   23bfa:	9825      	ldr	r0, [sp, #148]	@ 0x94
   23bfc:	950b      	str	r5, [sp, #44]	@ 0x2c
  const int left_p_padding = left_padding_copy[1];
   23bfe:	e9dd c70e 	ldrd	ip, r7, [sp, #56]	@ 0x38
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23c02:	dd60      	ble.n	23cc6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1fa>
   23c04:	ea4f 0a80 	mov.w	sl, r0, lsl #2
                out_b >= output_batch - right_b_padding ||
   23c08:	eba4 0e01 	sub.w	lr, r4, r1
   23c0c:	46d1      	mov	r9, sl
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23c0e:	2100      	movs	r1, #0
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23c10:	2b00      	cmp	r3, #0
   23c12:	dd55      	ble.n	23cc0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1f4>
                out_p >= output_plane - right_p_padding ||
   23c14:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23c16:	f04f 0800 	mov.w	r8, #0
                out_p >= output_plane - right_p_padding ||
   23c1a:	eba3 0a05 	sub.w	sl, r3, r5
   23c1e:	4645      	mov	r5, r8
      for (int out_h = 0; out_h < output_height; ++out_h) {
   23c20:	2a00      	cmp	r2, #0
   23c22:	dd4a      	ble.n	23cba <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1ee>
   23c24:	e9cd 430c 	strd	r4, r3, [sp, #48]	@ 0x30
   23c28:	f04f 0800 	mov.w	r8, #0
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23c2c:	f1bb 0f00 	cmp.w	fp, #0
   23c30:	dd3d      	ble.n	23cae <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1e2>
                out_h >= output_height - right_h_padding ||
   23c32:	9b06      	ldr	r3, [sp, #24]
   23c34:	1ad3      	subs	r3, r2, r3
   23c36:	e9cd 3203 	strd	r3, r2, [sp, #12]
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23c3a:	2400      	movs	r4, #0
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23c3c:	2800      	cmp	r0, #0
   23c3e:	dd32      	ble.n	23ca6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1da>
   23c40:	4632      	mov	r2, r6
   23c42:	2300      	movs	r3, #0
   23c44:	9601      	str	r6, [sp, #4]
   23c46:	e023      	b.n	23c90 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c4>
            if (out_b < left_b_padding ||
   23c48:	458e      	cmp	lr, r1
   23c4a:	dd23      	ble.n	23c94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_b >= output_batch - right_b_padding ||
   23c4c:	42af      	cmp	r7, r5
   23c4e:	dc21      	bgt.n	23c94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_p < left_p_padding ||
   23c50:	45aa      	cmp	sl, r5
   23c52:	dd1f      	ble.n	23c94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_p >= output_plane - right_p_padding ||
   23c54:	9e02      	ldr	r6, [sp, #8]
   23c56:	4546      	cmp	r6, r8
   23c58:	dc1c      	bgt.n	23c94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_h < left_h_padding ||
   23c5a:	9e03      	ldr	r6, [sp, #12]
   23c5c:	4546      	cmp	r6, r8
   23c5e:	dd19      	ble.n	23c94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_h >= output_height - right_h_padding ||
   23c60:	9e05      	ldr	r6, [sp, #20]
   23c62:	42b4      	cmp	r4, r6
   23c64:	db16      	blt.n	23c94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_w >= output_width - right_w_padding ||
   23c66:	9e07      	ldr	r6, [sp, #28]
   23c68:	ebab 0606 	sub.w	r6, fp, r6
                out_w < left_w_padding ||
   23c6c:	42b4      	cmp	r4, r6
   23c6e:	da11      	bge.n	23c94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_w >= output_width - right_w_padding ||
   23c70:	9e08      	ldr	r6, [sp, #32]
   23c72:	429e      	cmp	r6, r3
   23c74:	dc0e      	bgt.n	23c94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
                out_d >= output_depth - right_d_padding) {
   23c76:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   23c78:	1b86      	subs	r6, r0, r6
                out_d < left_d_padding ||
   23c7a:	429e      	cmp	r6, r3
   23c7c:	dd0a      	ble.n	23c94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c8>
              *out_ptr++ = *in_ptr++;
   23c7e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23c80:	3301      	adds	r3, #1
              *out_ptr++ = *in_ptr++;
   23c82:	ecf6 7a01 	vldmia	r6!, {s15}
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23c86:	4298      	cmp	r0, r3
              *out_ptr++ = *in_ptr++;
   23c88:	9609      	str	r6, [sp, #36]	@ 0x24
   23c8a:	ece2 7a01 	vstmia	r2!, {s15}
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23c8e:	d008      	beq.n	23ca2 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1d6>
            if (out_b < left_b_padding ||
   23c90:	458c      	cmp	ip, r1
   23c92:	ddd9      	ble.n	23c48 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x17c>
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23c94:	3301      	adds	r3, #1
              *out_ptr++ = pad_value;
   23c96:	eef0 7a48 	vmov.f32	s15, s16
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23c9a:	4298      	cmp	r0, r3
   23c9c:	ece2 7a01 	vstmia	r2!, {s15}
   23ca0:	d1f6      	bne.n	23c90 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x1c4>
   23ca2:	9e01      	ldr	r6, [sp, #4]
   23ca4:	444e      	add	r6, r9
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23ca6:	3401      	adds	r4, #1
   23ca8:	45a3      	cmp	fp, r4
   23caa:	d1c7      	bne.n	23c3c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x170>
   23cac:	9a04      	ldr	r2, [sp, #16]
      for (int out_h = 0; out_h < output_height; ++out_h) {
   23cae:	f108 0801 	add.w	r8, r8, #1
   23cb2:	4542      	cmp	r2, r8
   23cb4:	d1ba      	bne.n	23c2c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x160>
   23cb6:	e9dd 430c 	ldrd	r4, r3, [sp, #48]	@ 0x30
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23cba:	3501      	adds	r5, #1
   23cbc:	42ab      	cmp	r3, r5
   23cbe:	d1af      	bne.n	23c20 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x154>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23cc0:	3101      	adds	r1, #1
   23cc2:	428c      	cmp	r4, r1
   23cc4:	d1a4      	bne.n	23c10 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0+0x144>
}
   23cc6:	b027      	add	sp, #156	@ 0x9c
   23cc8:	ecbd 8b02 	vpop	{d8}
   23ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23cd0:	f001 fa4a 	bl	25168 <abort>

00023cd4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   23cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23cd8:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
   23cdc:	68ce      	ldr	r6, [r1, #12]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   23cde:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
  TFLITE_DCHECK(node->user_data != nullptr);
   23ce2:	2e00      	cmp	r6, #0
   23ce4:	f000 8309 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  const TfLiteEvalTensor* input =
   23ce8:	4688      	mov	r8, r1
      tflite::micro::GetEvalInput(context, node, /*index=*/0);
   23cea:	2200      	movs	r2, #0
   23cec:	4605      	mov	r5, r0
   23cee:	f7ff fc37 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  return node->inputs == nullptr ? 0 : node->inputs->size;
   23cf2:	f8d8 2000 	ldr.w	r2, [r8]
   23cf6:	4607      	mov	r7, r0
   23cf8:	b11a      	cbz	r2, 23d02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e>
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
   23cfa:	6813      	ldr	r3, [r2, #0]
   23cfc:	2b03      	cmp	r3, #3
   23cfe:	d01b      	beq.n	23d38 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x64>
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
   23d00:	2200      	movs	r2, #0
   23d02:	4628      	mov	r0, r5
   23d04:	4641      	mov	r1, r8
   23d06:	f7ff fc45 	bl	23594 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (input->type) {
   23d0a:	7a3b      	ldrb	r3, [r7, #8]
   23d0c:	3b01      	subs	r3, #1
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
   23d0e:	4605      	mov	r5, r0
  switch (input->type) {
   23d10:	2b08      	cmp	r3, #8
   23d12:	d80a      	bhi.n	23d2a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56>
   23d14:	e8df f013 	tbh	[pc, r3, lsl #1]
   23d18:	005a0036 	.word	0x005a0036
   23d1c:	00090009 	.word	0x00090009
   23d20:	00090009 	.word	0x00090009
   23d24:	0009017a 	.word	0x0009017a
   23d28:	0296      	.short	0x0296
      return kTfLiteError;
   23d2a:	2001      	movs	r0, #1
}
   23d2c:	f50d 7d0b 	add.w	sp, sp, #556	@ 0x22c
   23d30:	ecbd 8b02 	vpop	{d8}
   23d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
   23d38:	2202      	movs	r2, #2
   23d3a:	4641      	mov	r1, r8
   23d3c:	4628      	mov	r0, r5
   23d3e:	f7ff fc0f 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
   23d42:	4641      	mov	r1, r8
          ? tflite::micro::GetEvalInput(context, node, /*index=*/2)
   23d44:	4604      	mov	r4, r0
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
   23d46:	2200      	movs	r2, #0
   23d48:	4628      	mov	r0, r5
   23d4a:	f7ff fc23 	bl	23594 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  switch (input->type) {
   23d4e:	7a3b      	ldrb	r3, [r7, #8]
   23d50:	3b01      	subs	r3, #1
      tflite::micro::GetEvalOutput(context, node, /*index=*/0);
   23d52:	4605      	mov	r5, r0
  switch (input->type) {
   23d54:	2b08      	cmp	r3, #8
   23d56:	d8e8      	bhi.n	23d2a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x56>
   23d58:	a201      	add	r2, pc, #4	@ (adr r2, 23d60 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>)
   23d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23d5e:	bf00      	nop
   23d60:	00024285 	.word	0x00024285
   23d64:	0002420f 	.word	0x0002420f
   23d68:	00023d2b 	.word	0x00023d2b
   23d6c:	00023d2b 	.word	0x00023d2b
   23d70:	00023d2b 	.word	0x00023d2b
   23d74:	00023d2b 	.word	0x00023d2b
   23d78:	00024277 	.word	0x00024277
   23d7c:	00023d2b 	.word	0x00023d2b
   23d80:	00023fc7 	.word	0x00023fc7
              ? 0.f
   23d84:	ed9f 8aaf 	vldr	s16, [pc, #700]	@ 24044 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x370>
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
   23d88:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
   23d8c:	2b01      	cmp	r3, #1
            data->params, tflite::micro::GetTensorShape(input),
   23d8e:	4639      	mov	r1, r7
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
   23d90:	f000 8243 	beq.w	2421a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x546>
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   23d94:	a836      	add	r0, sp, #216	@ 0xd8
   23d96:	f7ff fc09 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                           &pad_value, tflite::micro::GetTensorShape(output),
   23d9a:	4629      	mov	r1, r5
   23d9c:	a83c      	add	r0, sp, #240	@ 0xf0
   23d9e:	683c      	ldr	r4, [r7, #0]
   23da0:	f7ff fc04 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   23da4:	2d00      	cmp	r5, #0
   23da6:	f000 82a8 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
template <typename T, typename P>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const T* input_data,
                const P* pad_value_ptr, const RuntimeShape& output_shape,
                T* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   23daa:	682b      	ldr	r3, [r5, #0]
   23dac:	9300      	str	r3, [sp, #0]
   23dae:	eeb0 0a48 	vmov.f32	s0, s16
   23db2:	ab3c      	add	r3, sp, #240	@ 0xf0
   23db4:	4622      	mov	r2, r4
   23db6:	a936      	add	r1, sp, #216	@ 0xd8
   23db8:	4630      	mov	r0, r6
   23dba:	f7ff fe87 	bl	23acc <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>
  return kTfLiteOk;
   23dbe:	2000      	movs	r0, #0
}
   23dc0:	f50d 7d0b 	add.w	sp, sp, #556	@ 0x22c
   23dc4:	ecbd 8b02 	vpop	{d8}
   23dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ? 0
   23dcc:	2400      	movs	r4, #0
      reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   23dce:	4639      	mov	r1, r7
   23dd0:	a866      	add	r0, sp, #408	@ 0x198
   23dd2:	f7ff fbeb 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   23dd6:	683b      	ldr	r3, [r7, #0]
   23dd8:	930d      	str	r3, [sp, #52]	@ 0x34
                         &pad_value, tflite::micro::GetTensorShape(output),
   23dda:	4629      	mov	r1, r5
   23ddc:	a86c      	add	r0, sp, #432	@ 0x1b0
   23dde:	f7ff fbe5 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   23de2:	2d00      	cmp	r5, #0
   23de4:	f000 8289 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  int32_t DimensionsCount() const { return size_; }
   23de8:	9a66      	ldr	r2, [sp, #408]	@ 0x198
  return reinterpret_cast<T*>(tensor->data.raw);
   23dea:	682d      	ldr	r5, [r5, #0]
      : size_(new_shape_size) {
   23dec:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23dee:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   23df0:	937e      	str	r3, [sp, #504]	@ 0x1f8
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23df2:	f300 8282 	bgt.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   23df6:	1a98      	subs	r0, r3, r2
   23df8:	d00b      	beq.n	23e12 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13e>
   23dfa:	a97e      	add	r1, sp, #504	@ 0x1f8
   23dfc:	2300      	movs	r3, #0
    dims_[i] = val;
   23dfe:	2701      	movs	r7, #1
   23e00:	e002      	b.n	23e08 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x134>
    TFLITE_DCHECK_LT(i, size_);
   23e02:	2b05      	cmp	r3, #5
   23e04:	f000 8279 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   23e08:	3301      	adds	r3, #1
   23e0a:	4298      	cmp	r0, r3
    dims_[i] = val;
   23e0c:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   23e10:	d1f7      	bne.n	23e02 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12e>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   23e12:	ab7f      	add	r3, sp, #508	@ 0x1fc
   23e14:	0092      	lsls	r2, r2, #2
   23e16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23e1a:	a967      	add	r1, sp, #412	@ 0x19c
   23e1c:	f7f4 fbb0 	bl	18580 <memcpy>
  int32_t DimensionsCount() const { return size_; }
   23e20:	9a6c      	ldr	r2, [sp, #432]	@ 0x1b0
      : size_(new_shape_size) {
   23e22:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23e24:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   23e26:	9384      	str	r3, [sp, #528]	@ 0x210
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   23e28:	f300 8267 	bgt.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   23e2c:	f1d2 0005 	rsbs	r0, r2, #5
   23e30:	d00b      	beq.n	23e4a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
   23e32:	a984      	add	r1, sp, #528	@ 0x210
   23e34:	2300      	movs	r3, #0
    dims_[i] = val;
   23e36:	2701      	movs	r7, #1
   23e38:	e002      	b.n	23e40 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16c>
    TFLITE_DCHECK_LT(i, size_);
   23e3a:	2b05      	cmp	r3, #5
   23e3c:	f000 825d 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   23e40:	3301      	adds	r3, #1
   23e42:	4298      	cmp	r0, r3
    dims_[i] = val;
   23e44:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   23e48:	d1f7      	bne.n	23e3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x166>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   23e4a:	ab85      	add	r3, sp, #532	@ 0x214
   23e4c:	0092      	lsls	r2, r2, #2
   23e4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23e52:	a96d      	add	r1, sp, #436	@ 0x1b4
   23e54:	f7f4 fb94 	bl	18580 <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   23e58:	f996 2000 	ldrsb.w	r2, [r6]
   23e5c:	2a05      	cmp	r2, #5
   23e5e:	f300 824c 	bgt.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   23e62:	f996 7018 	ldrsb.w	r7, [r6, #24]
   23e66:	2f05      	cmp	r7, #5
   23e68:	f300 8247 	bgt.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    left_padding_copy[i] = 0;
   23e6c:	2300      	movs	r3, #0
   23e6e:	2000      	movs	r0, #0
   23e70:	2100      	movs	r1, #0
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   23e72:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
   23e74:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
   23e78:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
   23e7c:	9322      	str	r3, [sp, #136]	@ 0x88
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   23e7e:	dd08      	ble.n	23e92 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1be>
                      op_params.left_padding_count] = op_params.left_padding[i];
   23e80:	f1c2 0005 	rsb	r0, r2, #5
   23e84:	ab1e      	add	r3, sp, #120	@ 0x78
   23e86:	0092      	lsls	r2, r2, #2
   23e88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23e8c:	1d31      	adds	r1, r6, #4
   23e8e:	f7f4 fb77 	bl	18580 <memcpy>
    right_padding_copy[i] = 0;
   23e92:	2300      	movs	r3, #0
   23e94:	2200      	movs	r2, #0
   23e96:	9328      	str	r3, [sp, #160]	@ 0xa0
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   23e98:	2f00      	cmp	r7, #0
    right_padding_copy[i] = 0;
   23e9a:	f04f 0300 	mov.w	r3, #0
   23e9e:	e9cd 2324 	strd	r2, r3, [sp, #144]	@ 0x90
   23ea2:	e9cd 2326 	strd	r2, r3, [sp, #152]	@ 0x98
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   23ea6:	dd09      	ble.n	23ebc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e8>
                       op_params.right_padding_count] =
   23ea8:	f1c7 0005 	rsb	r0, r7, #5
   23eac:	ab24      	add	r3, sp, #144	@ 0x90
   23eae:	f106 011c 	add.w	r1, r6, #28
   23eb2:	00ba      	lsls	r2, r7, #2
   23eb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23eb8:	f7f4 fb62 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   23ebc:	9984      	ldr	r1, [sp, #528]	@ 0x210
   23ebe:	2900      	cmp	r1, #0
   23ec0:	f340 821b 	ble.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   23ec4:	2901      	cmp	r1, #1
    return dims_[i];
   23ec6:	9e85      	ldr	r6, [sp, #532]	@ 0x214
    TFLITE_DCHECK_LT(i, size_);
   23ec8:	f000 8217 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   23ecc:	2902      	cmp	r1, #2
    return dims_[i];
   23ece:	9a86      	ldr	r2, [sp, #536]	@ 0x218
    TFLITE_DCHECK_LT(i, size_);
   23ed0:	f000 8213 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   23ed4:	2903      	cmp	r1, #3
    return dims_[i];
   23ed6:	9b87      	ldr	r3, [sp, #540]	@ 0x21c
    TFLITE_DCHECK_LT(i, size_);
   23ed8:	f000 820f 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   23edc:	2904      	cmp	r1, #4
    return dims_[i];
   23ede:	9888      	ldr	r0, [sp, #544]	@ 0x220
    TFLITE_DCHECK_LT(i, size_);
   23ee0:	f000 820b 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  const int left_b_padding = left_padding_copy[0];
   23ee4:	991e      	ldr	r1, [sp, #120]	@ 0x78
   23ee6:	910b      	str	r1, [sp, #44]	@ 0x2c
  const int left_p_padding = left_padding_copy[1];
   23ee8:	991f      	ldr	r1, [sp, #124]	@ 0x7c
   23eea:	9107      	str	r1, [sp, #28]
  const int right_w_padding = right_padding_copy[3];
   23eec:	e9dd e726 	ldrd	lr, r7, [sp, #152]	@ 0x98
  const int left_h_padding = left_padding_copy[2];
   23ef0:	9920      	ldr	r1, [sp, #128]	@ 0x80
   23ef2:	9109      	str	r1, [sp, #36]	@ 0x24
  const int left_d_padding = left_padding_copy[4];
   23ef4:	e9dd 9121 	ldrd	r9, r1, [sp, #132]	@ 0x84
  const int right_w_padding = right_padding_copy[3];
   23ef8:	9708      	str	r7, [sp, #32]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23efa:	2e00      	cmp	r6, #0
  const int right_d_padding = right_padding_copy[4];
   23efc:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
  const int left_d_padding = left_padding_copy[4];
   23efe:	910c      	str	r1, [sp, #48]	@ 0x30
    return dims_[i];
   23f00:	f8dd 8224 	ldr.w	r8, [sp, #548]	@ 0x224
  const int right_d_padding = right_padding_copy[4];
   23f04:	970e      	str	r7, [sp, #56]	@ 0x38
  const int right_p_padding = right_padding_copy[1];
   23f06:	e9dd 1c24 	ldrd	r1, ip, [sp, #144]	@ 0x90
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23f0a:	f77f af58 	ble.w	23dbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
                out_b >= output_batch - right_b_padding ||
   23f0e:	1a71      	subs	r1, r6, r1
   23f10:	910f      	str	r1, [sp, #60]	@ 0x3c
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   23f12:	2100      	movs	r1, #0
   23f14:	910a      	str	r1, [sp, #40]	@ 0x28
   23f16:	ea4f 0a88 	mov.w	sl, r8, lsl #2
   23f1a:	4611      	mov	r1, r2
   23f1c:	46cb      	mov	fp, r9
   23f1e:	4672      	mov	r2, lr
   23f20:	4667      	mov	r7, ip
   23f22:	46b6      	mov	lr, r6
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23f24:	2900      	cmp	r1, #0
   23f26:	f340 81c7 	ble.w	242b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5e4>
                out_p >= output_plane - right_p_padding ||
   23f2a:	1bce      	subs	r6, r1, r7
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   23f2c:	f04f 0c00 	mov.w	ip, #0
                out_p >= output_plane - right_p_padding ||
   23f30:	9606      	str	r6, [sp, #24]
   23f32:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
      for (int out_h = 0; out_h < output_height; ++out_h) {
   23f36:	2b00      	cmp	r3, #0
   23f38:	f340 81b7 	ble.w	242aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5d6>
   23f3c:	2600      	movs	r6, #0
   23f3e:	9111      	str	r1, [sp, #68]	@ 0x44
   23f40:	46b9      	mov	r9, r7
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23f42:	2800      	cmp	r0, #0
   23f44:	f340 81ab 	ble.w	2429e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ca>
                out_h >= output_height - right_h_padding ||
   23f48:	eba3 0e02 	sub.w	lr, r3, r2
        for (int out_w = 0; out_w < output_width; ++out_w) {
   23f4c:	2100      	movs	r1, #0
                out_h >= output_height - right_h_padding ||
   23f4e:	f8cd e010 	str.w	lr, [sp, #16]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23f52:	f1b8 0f00 	cmp.w	r8, #0
   23f56:	f340 819e 	ble.w	24296 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c2>
   23f5a:	1f2f      	subs	r7, r5, #4
   23f5c:	9705      	str	r7, [sp, #20]
   23f5e:	f04f 0e00 	mov.w	lr, #0
   23f62:	9303      	str	r3, [sp, #12]
   23f64:	e029      	b.n	23fba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e6>
            if (out_b < left_b_padding ||
   23f66:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
   23f68:	42bb      	cmp	r3, r7
   23f6a:	da2a      	bge.n	23fc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_b >= output_batch - right_b_padding ||
   23f6c:	9f07      	ldr	r7, [sp, #28]
   23f6e:	4567      	cmp	r7, ip
   23f70:	dc27      	bgt.n	23fc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_p < left_p_padding ||
   23f72:	9f06      	ldr	r7, [sp, #24]
   23f74:	4567      	cmp	r7, ip
   23f76:	dd24      	ble.n	23fc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_p >= output_plane - right_p_padding ||
   23f78:	9f09      	ldr	r7, [sp, #36]	@ 0x24
   23f7a:	42b7      	cmp	r7, r6
   23f7c:	dc21      	bgt.n	23fc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_h < left_h_padding ||
   23f7e:	9f04      	ldr	r7, [sp, #16]
   23f80:	42b7      	cmp	r7, r6
   23f82:	dd1e      	ble.n	23fc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_h >= output_height - right_h_padding ||
   23f84:	4559      	cmp	r1, fp
   23f86:	db1c      	blt.n	23fc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_w >= output_width - right_w_padding ||
   23f88:	9f08      	ldr	r7, [sp, #32]
   23f8a:	1bc7      	subs	r7, r0, r7
                out_w < left_w_padding ||
   23f8c:	42b9      	cmp	r1, r7
   23f8e:	da18      	bge.n	23fc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_w >= output_width - right_w_padding ||
   23f90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   23f92:	459e      	cmp	lr, r3
   23f94:	db15      	blt.n	23fc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
                out_d >= output_depth - right_d_padding) {
   23f96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   23f98:	eba8 0703 	sub.w	r7, r8, r3
                out_d < left_d_padding ||
   23f9c:	45be      	cmp	lr, r7
   23f9e:	da10      	bge.n	23fc2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
              *out_ptr++ = *in_ptr++;
   23fa0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   23fa2:	f853 7b04 	ldr.w	r7, [r3], #4
   23fa6:	930d      	str	r3, [sp, #52]	@ 0x34
   23fa8:	9b05      	ldr	r3, [sp, #20]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   23faa:	f10e 0e01 	add.w	lr, lr, #1
   23fae:	f843 7f04 	str.w	r7, [r3, #4]!
   23fb2:	45f0      	cmp	r8, lr
   23fb4:	9305      	str	r3, [sp, #20]
   23fb6:	f000 816c 	beq.w	24292 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5be>
            if (out_b < left_b_padding ||
   23fba:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
   23fbe:	429f      	cmp	r7, r3
   23fc0:	ddd1      	ble.n	23f66 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
              *out_ptr++ = pad_value;
   23fc2:	4627      	mov	r7, r4
   23fc4:	e7f0      	b.n	23fa8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2d4>
      if (constant_values == nullptr) {
   23fc6:	2c00      	cmp	r4, #0
   23fc8:	f000 813c 	beq.w	24244 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x570>
        pad_value = *tflite::micro::GetTensorData<int8_t>(constant_values);
   23fcc:	6823      	ldr	r3, [r4, #0]
   23fce:	f993 4000 	ldrsb.w	r4, [r3]
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
   23fd2:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
   23fd6:	2b01      	cmp	r3, #1
            data->params, tflite::micro::GetTensorShape(input),
   23fd8:	4639      	mov	r1, r7
      if (data->params.resizing_category == ResizingCategory::kImageStyle) {
   23fda:	f000 8136 	beq.w	2424a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x576>
        reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   23fde:	a84e      	add	r0, sp, #312	@ 0x138
   23fe0:	f7ff fae4 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   23fe4:	f8d7 8000 	ldr.w	r8, [r7]
                           &pad_value, tflite::micro::GetTensorShape(output),
   23fe8:	af54      	add	r7, sp, #336	@ 0x150
   23fea:	4629      	mov	r1, r5
   23fec:	4638      	mov	r0, r7
   23fee:	f7ff fadd 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   23ff2:	2d00      	cmp	r5, #0
   23ff4:	f000 8181 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   23ff8:	682b      	ldr	r3, [r5, #0]
   23ffa:	4642      	mov	r2, r8
   23ffc:	e9cd 7300 	strd	r7, r3, [sp]
   24000:	a94e      	add	r1, sp, #312	@ 0x138
   24002:	4623      	mov	r3, r4
   24004:	4630      	mov	r0, r6
   24006:	f7ff fc5d 	bl	238c4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>
  ~RuntimeShape() {}
   2400a:	e6d8      	b.n	23dbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
              : *tflite::micro::GetTensorData<int16_t>(constant_values);
   2400c:	2400      	movs	r4, #0
      reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
   2400e:	4639      	mov	r1, r7
   24010:	a85a      	add	r0, sp, #360	@ 0x168
   24012:	f7ff facb 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   24016:	683b      	ldr	r3, [r7, #0]
   24018:	930d      	str	r3, [sp, #52]	@ 0x34
                         &pad_value, tflite::micro::GetTensorShape(output),
   2401a:	4629      	mov	r1, r5
   2401c:	a860      	add	r0, sp, #384	@ 0x180
   2401e:	f7ff fac5 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   24022:	2d00      	cmp	r5, #0
   24024:	f000 8169 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  int32_t DimensionsCount() const { return size_; }
   24028:	9a5a      	ldr	r2, [sp, #360]	@ 0x168
  return reinterpret_cast<T*>(tensor->data.raw);
   2402a:	682d      	ldr	r5, [r5, #0]
      : size_(new_shape_size) {
   2402c:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2402e:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   24030:	9372      	str	r3, [sp, #456]	@ 0x1c8
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   24032:	f300 8162 	bgt.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   24036:	1a98      	subs	r0, r3, r2
   24038:	d00e      	beq.n	24058 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x384>
   2403a:	a972      	add	r1, sp, #456	@ 0x1c8
   2403c:	2300      	movs	r3, #0
    dims_[i] = val;
   2403e:	2701      	movs	r7, #1
   24040:	e005      	b.n	2404e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37a>
   24042:	bf00      	nop
   24044:	00000000 	.word	0x00000000
    TFLITE_DCHECK_LT(i, size_);
   24048:	2b05      	cmp	r3, #5
   2404a:	f000 8156 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   2404e:	3301      	adds	r3, #1
   24050:	4298      	cmp	r0, r3
    dims_[i] = val;
   24052:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   24056:	d1f7      	bne.n	24048 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   24058:	ab73      	add	r3, sp, #460	@ 0x1cc
   2405a:	0092      	lsls	r2, r2, #2
   2405c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   24060:	a95b      	add	r1, sp, #364	@ 0x16c
   24062:	f7f4 fa8d 	bl	18580 <memcpy>
  int32_t DimensionsCount() const { return size_; }
   24066:	9a60      	ldr	r2, [sp, #384]	@ 0x180
      : size_(new_shape_size) {
   24068:	2305      	movs	r3, #5
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2406a:	429a      	cmp	r2, r3
      : size_(new_shape_size) {
   2406c:	9378      	str	r3, [sp, #480]	@ 0x1e0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2406e:	f300 8144 	bgt.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   24072:	f1d2 0005 	rsbs	r0, r2, #5
   24076:	d00b      	beq.n	24090 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3bc>
   24078:	a978      	add	r1, sp, #480	@ 0x1e0
   2407a:	2300      	movs	r3, #0
    dims_[i] = val;
   2407c:	2701      	movs	r7, #1
   2407e:	e002      	b.n	24086 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b2>
    TFLITE_DCHECK_LT(i, size_);
   24080:	2b05      	cmp	r3, #5
   24082:	f000 813a 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    for (int i = 0; i < size_increase; ++i) {
   24086:	3301      	adds	r3, #1
   24088:	4298      	cmp	r0, r3
    dims_[i] = val;
   2408a:	f841 7f04 	str.w	r7, [r1, #4]!
    for (int i = 0; i < size_increase; ++i) {
   2408e:	d1f7      	bne.n	24080 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ac>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   24090:	ab79      	add	r3, sp, #484	@ 0x1e4
   24092:	0092      	lsls	r2, r2, #2
   24094:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   24098:	a961      	add	r1, sp, #388	@ 0x184
   2409a:	f7f4 fa71 	bl	18580 <memcpy>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   2409e:	f996 2000 	ldrsb.w	r2, [r6]
   240a2:	2a05      	cmp	r2, #5
   240a4:	f300 8129 	bgt.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   240a8:	f996 7018 	ldrsb.w	r7, [r6, #24]
   240ac:	2f05      	cmp	r7, #5
   240ae:	f300 8124 	bgt.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
    left_padding_copy[i] = 0;
   240b2:	2300      	movs	r3, #0
   240b4:	2000      	movs	r0, #0
   240b6:	2100      	movs	r1, #0
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   240b8:	429a      	cmp	r2, r3
    left_padding_copy[i] = 0;
   240ba:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
   240be:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   240c2:	9316      	str	r3, [sp, #88]	@ 0x58
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   240c4:	dd08      	ble.n	240d8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x404>
                      op_params.left_padding_count] = op_params.left_padding[i];
   240c6:	f1c2 0005 	rsb	r0, r2, #5
   240ca:	ab12      	add	r3, sp, #72	@ 0x48
   240cc:	0092      	lsls	r2, r2, #2
   240ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   240d2:	1d31      	adds	r1, r6, #4
   240d4:	f7f4 fa54 	bl	18580 <memcpy>
    right_padding_copy[i] = 0;
   240d8:	2300      	movs	r3, #0
   240da:	2200      	movs	r2, #0
   240dc:	931c      	str	r3, [sp, #112]	@ 0x70
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   240de:	2f00      	cmp	r7, #0
    right_padding_copy[i] = 0;
   240e0:	f04f 0300 	mov.w	r3, #0
   240e4:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
   240e8:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   240ec:	dd09      	ble.n	24102 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x42e>
                       op_params.right_padding_count] =
   240ee:	f1c7 0005 	rsb	r0, r7, #5
   240f2:	ab18      	add	r3, sp, #96	@ 0x60
   240f4:	f106 011c 	add.w	r1, r6, #28
   240f8:	00ba      	lsls	r2, r7, #2
   240fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   240fe:	f7f4 fa3f 	bl	18580 <memcpy>
    TFLITE_DCHECK_LT(i, size_);
   24102:	9978      	ldr	r1, [sp, #480]	@ 0x1e0
   24104:	2900      	cmp	r1, #0
   24106:	f340 80f8 	ble.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   2410a:	2901      	cmp	r1, #1
    return dims_[i];
   2410c:	9e79      	ldr	r6, [sp, #484]	@ 0x1e4
    TFLITE_DCHECK_LT(i, size_);
   2410e:	f000 80f4 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   24112:	2902      	cmp	r1, #2
    return dims_[i];
   24114:	9a7a      	ldr	r2, [sp, #488]	@ 0x1e8
    TFLITE_DCHECK_LT(i, size_);
   24116:	f000 80f0 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   2411a:	2903      	cmp	r1, #3
    return dims_[i];
   2411c:	f8dd b1ec 	ldr.w	fp, [sp, #492]	@ 0x1ec
    TFLITE_DCHECK_LT(i, size_);
   24120:	f000 80eb 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   24124:	2904      	cmp	r1, #4
    return dims_[i];
   24126:	987c      	ldr	r0, [sp, #496]	@ 0x1f0
    TFLITE_DCHECK_LT(i, size_);
   24128:	f000 80e7 	beq.w	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  const int left_b_padding = left_padding_copy[0];
   2412c:	9912      	ldr	r1, [sp, #72]	@ 0x48
   2412e:	910b      	str	r1, [sp, #44]	@ 0x2c
  const int left_p_padding = left_padding_copy[1];
   24130:	9913      	ldr	r1, [sp, #76]	@ 0x4c
   24132:	9107      	str	r1, [sp, #28]
  const int right_w_padding = right_padding_copy[3];
   24134:	e9dd 731a 	ldrd	r7, r3, [sp, #104]	@ 0x68
  const int left_h_padding = left_padding_copy[2];
   24138:	9914      	ldr	r1, [sp, #80]	@ 0x50
   2413a:	9109      	str	r1, [sp, #36]	@ 0x24
  const int left_d_padding = left_padding_copy[4];
   2413c:	e9dd 9115 	ldrd	r9, r1, [sp, #84]	@ 0x54
  const int right_w_padding = right_padding_copy[3];
   24140:	9308      	str	r3, [sp, #32]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   24142:	2e00      	cmp	r6, #0
  const int right_d_padding = right_padding_copy[4];
   24144:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
  const int left_d_padding = left_padding_copy[4];
   24146:	910c      	str	r1, [sp, #48]	@ 0x30
    return dims_[i];
   24148:	f8dd 81f4 	ldr.w	r8, [sp, #500]	@ 0x1f4
  const int right_d_padding = right_padding_copy[4];
   2414c:	930e      	str	r3, [sp, #56]	@ 0x38
  const int right_p_padding = right_padding_copy[1];
   2414e:	e9dd 1c18 	ldrd	r1, ip, [sp, #96]	@ 0x60
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   24152:	f77f ae34 	ble.w	23dbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
                out_b >= output_batch - right_b_padding ||
   24156:	1a73      	subs	r3, r6, r1
   24158:	930f      	str	r3, [sp, #60]	@ 0x3c
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2415a:	2300      	movs	r3, #0
   2415c:	930a      	str	r3, [sp, #40]	@ 0x28
   2415e:	4611      	mov	r1, r2
   24160:	465b      	mov	r3, fp
   24162:	463a      	mov	r2, r7
   24164:	ea4f 0a48 	mov.w	sl, r8, lsl #1
   24168:	46b6      	mov	lr, r6
   2416a:	46cb      	mov	fp, r9
   2416c:	4667      	mov	r7, ip
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   2416e:	2900      	cmp	r1, #0
   24170:	f340 80bc 	ble.w	242ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x618>
                out_p >= output_plane - right_p_padding ||
   24174:	1bce      	subs	r6, r1, r7
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   24176:	f04f 0c00 	mov.w	ip, #0
                out_p >= output_plane - right_p_padding ||
   2417a:	9606      	str	r6, [sp, #24]
   2417c:	f8cd e040 	str.w	lr, [sp, #64]	@ 0x40
      for (int out_h = 0; out_h < output_height; ++out_h) {
   24180:	2b00      	cmp	r3, #0
   24182:	f340 80ac 	ble.w	242de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60a>
   24186:	2600      	movs	r6, #0
   24188:	9111      	str	r1, [sp, #68]	@ 0x44
   2418a:	46b9      	mov	r9, r7
        for (int out_w = 0; out_w < output_width; ++out_w) {
   2418c:	2800      	cmp	r0, #0
   2418e:	f340 80a0 	ble.w	242d2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fe>
                out_h >= output_height - right_h_padding ||
   24192:	eba3 0e02 	sub.w	lr, r3, r2
        for (int out_w = 0; out_w < output_width; ++out_w) {
   24196:	2100      	movs	r1, #0
                out_h >= output_height - right_h_padding ||
   24198:	f8cd e010 	str.w	lr, [sp, #16]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   2419c:	f1b8 0f00 	cmp.w	r8, #0
   241a0:	f340 8093 	ble.w	242ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f6>
   241a4:	1eaf      	subs	r7, r5, #2
   241a6:	9705      	str	r7, [sp, #20]
   241a8:	f04f 0e00 	mov.w	lr, #0
   241ac:	9303      	str	r3, [sp, #12]
   241ae:	e028      	b.n	24202 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52e>
            if (out_b < left_b_padding ||
   241b0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
   241b2:	429f      	cmp	r7, r3
   241b4:	dd29      	ble.n	2420a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_b >= output_batch - right_b_padding ||
   241b6:	9f07      	ldr	r7, [sp, #28]
   241b8:	4567      	cmp	r7, ip
   241ba:	dc26      	bgt.n	2420a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_p < left_p_padding ||
   241bc:	9f06      	ldr	r7, [sp, #24]
   241be:	4567      	cmp	r7, ip
   241c0:	dd23      	ble.n	2420a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_p >= output_plane - right_p_padding ||
   241c2:	9f09      	ldr	r7, [sp, #36]	@ 0x24
   241c4:	42b7      	cmp	r7, r6
   241c6:	dc20      	bgt.n	2420a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_h < left_h_padding ||
   241c8:	9f04      	ldr	r7, [sp, #16]
   241ca:	42b7      	cmp	r7, r6
   241cc:	dd1d      	ble.n	2420a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_h >= output_height - right_h_padding ||
   241ce:	458b      	cmp	fp, r1
   241d0:	dc1b      	bgt.n	2420a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_w >= output_width - right_w_padding ||
   241d2:	9f08      	ldr	r7, [sp, #32]
   241d4:	1bc7      	subs	r7, r0, r7
                out_w < left_w_padding ||
   241d6:	428f      	cmp	r7, r1
   241d8:	dd17      	ble.n	2420a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_w >= output_width - right_w_padding ||
   241da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   241dc:	4573      	cmp	r3, lr
   241de:	dc14      	bgt.n	2420a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
                out_d >= output_depth - right_d_padding) {
   241e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   241e2:	eba8 0703 	sub.w	r7, r8, r3
                out_d < left_d_padding ||
   241e6:	4577      	cmp	r7, lr
   241e8:	dd0f      	ble.n	2420a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x536>
              *out_ptr++ = *in_ptr++;
   241ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   241ec:	f933 7b02 	ldrsh.w	r7, [r3], #2
   241f0:	930d      	str	r3, [sp, #52]	@ 0x34
   241f2:	9b05      	ldr	r3, [sp, #20]
          for (int out_d = 0; out_d < output_depth; ++out_d) {
   241f4:	f10e 0e01 	add.w	lr, lr, #1
   241f8:	f823 7f02 	strh.w	r7, [r3, #2]!
   241fc:	45f0      	cmp	r8, lr
   241fe:	9305      	str	r3, [sp, #20]
   24200:	d061      	beq.n	242c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5f2>
            if (out_b < left_b_padding ||
   24202:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
   24206:	429f      	cmp	r7, r3
   24208:	ddd2      	ble.n	241b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4dc>
              *out_ptr++ = pad_value;
   2420a:	4627      	mov	r7, r4
   2420c:	e7f1      	b.n	241f2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x51e>
              ? 0
   2420e:	2c00      	cmp	r4, #0
   24210:	f43f addd 	beq.w	23dce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
   24214:	6823      	ldr	r3, [r4, #0]
   24216:	681c      	ldr	r4, [r3, #0]
   24218:	e5d9      	b.n	23dce <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
            data->params, tflite::micro::GetTensorShape(input),
   2421a:	a82a      	add	r0, sp, #168	@ 0xa8
   2421c:	f7ff f9c6 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorShape(output),
   24220:	4629      	mov	r1, r5
   24222:	a830      	add	r0, sp, #192	@ 0xc0
  return reinterpret_cast<const T*>(tensor->data.raw);
   24224:	683c      	ldr	r4, [r7, #0]
   24226:	f7ff f9c1 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2422a:	2d00      	cmp	r5, #0
   2422c:	d065      	beq.n	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   2422e:	682b      	ldr	r3, [r5, #0]
   24230:	9300      	str	r3, [sp, #0]
   24232:	eeb0 0a48 	vmov.f32	s0, s16
   24236:	ab30      	add	r3, sp, #192	@ 0xc0
   24238:	4622      	mov	r2, r4
   2423a:	a92a      	add	r1, sp, #168	@ 0xa8
   2423c:	4630      	mov	r0, r6
   2423e:	f7ff fc45 	bl	23acc <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>
  ~RuntimeShape() {}
   24242:	e5bc      	b.n	23dbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
        pad_value = static_cast<uint8_t>(data->output_zero_point);
   24244:	f996 4034 	ldrsb.w	r4, [r6, #52]	@ 0x34
   24248:	e6c3      	b.n	23fd2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fe>
            data->params, tflite::micro::GetTensorShape(input),
   2424a:	a842      	add	r0, sp, #264	@ 0x108
   2424c:	f7ff f9ae 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
   24250:	f8d7 8000 	ldr.w	r8, [r7]
            tflite::micro::GetTensorShape(output),
   24254:	af48      	add	r7, sp, #288	@ 0x120
   24256:	4629      	mov	r1, r5
   24258:	4638      	mov	r0, r7
   2425a:	f7ff f9a7 	bl	235ac <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
   2425e:	2d00      	cmp	r5, #0
   24260:	d04b      	beq.n	242fa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x626>
   24262:	682b      	ldr	r3, [r5, #0]
   24264:	4642      	mov	r2, r8
   24266:	e9cd 7300 	strd	r7, r3, [sp]
   2426a:	a942      	add	r1, sp, #264	@ 0x108
   2426c:	4623      	mov	r3, r4
   2426e:	4630      	mov	r0, r6
   24270:	f7ff fb28 	bl	238c4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_.isra.0>
   24274:	e5a3      	b.n	23dbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
              : *tflite::micro::GetTensorData<int16_t>(constant_values);
   24276:	2c00      	cmp	r4, #0
   24278:	f43f aec9 	beq.w	2400e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33a>
   2427c:	6823      	ldr	r3, [r4, #0]
   2427e:	f9b3 4000 	ldrsh.w	r4, [r3]
   24282:	e6c4      	b.n	2400e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x33a>
              ? 0.f
   24284:	2c00      	cmp	r4, #0
   24286:	f43f ad7d 	beq.w	23d84 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
   2428a:	6823      	ldr	r3, [r4, #0]
   2428c:	ed93 8a00 	vldr	s16, [r3]
   24290:	e57a      	b.n	23d88 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
   24292:	9b03      	ldr	r3, [sp, #12]
   24294:	4455      	add	r5, sl
        for (int out_w = 0; out_w < output_width; ++out_w) {
   24296:	3101      	adds	r1, #1
   24298:	4288      	cmp	r0, r1
   2429a:	f47f ae5a 	bne.w	23f52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27e>
      for (int out_h = 0; out_h < output_height; ++out_h) {
   2429e:	3601      	adds	r6, #1
   242a0:	42b3      	cmp	r3, r6
   242a2:	f47f ae4e 	bne.w	23f42 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26e>
   242a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
   242a8:	464f      	mov	r7, r9
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   242aa:	f10c 0c01 	add.w	ip, ip, #1
   242ae:	4561      	cmp	r1, ip
   242b0:	f47f ae41 	bne.w	23f36 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x262>
   242b4:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   242b8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
   242ba:	3601      	adds	r6, #1
   242bc:	45b6      	cmp	lr, r6
   242be:	960a      	str	r6, [sp, #40]	@ 0x28
   242c0:	f47f ae30 	bne.w	23f24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>
   242c4:	e57b      	b.n	23dbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
   242c6:	9b03      	ldr	r3, [sp, #12]
   242c8:	4455      	add	r5, sl
        for (int out_w = 0; out_w < output_width; ++out_w) {
   242ca:	3101      	adds	r1, #1
   242cc:	4288      	cmp	r0, r1
   242ce:	f47f af65 	bne.w	2419c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4c8>
      for (int out_h = 0; out_h < output_height; ++out_h) {
   242d2:	3601      	adds	r6, #1
   242d4:	42b3      	cmp	r3, r6
   242d6:	f47f af59 	bne.w	2418c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4b8>
   242da:	9911      	ldr	r1, [sp, #68]	@ 0x44
   242dc:	464f      	mov	r7, r9
    for (int out_p = 0; out_p < output_plane; ++out_p) {
   242de:	f10c 0c01 	add.w	ip, ip, #1
   242e2:	4561      	cmp	r1, ip
   242e4:	f47f af4c 	bne.w	24180 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4ac>
   242e8:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   242ec:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
   242ee:	3601      	adds	r6, #1
   242f0:	45b6      	cmp	lr, r6
   242f2:	960a      	str	r6, [sp, #40]	@ 0x28
   242f4:	f47f af3b 	bne.w	2416e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x49a>
   242f8:	e561      	b.n	23dbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
  TFLITE_DCHECK(node->user_data != nullptr);
   242fa:	f000 ff35 	bl	25168 <abort>
   242fe:	bf00      	nop

00024300 <_ZN6tflite12Register_PADEv>:

TfLiteRegistration Register_PAD() {
   24300:	b510      	push	{r4, lr}
   24302:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, PadPrepare, Eval);
   24304:	2100      	movs	r1, #0
   24306:	9100      	str	r1, [sp, #0]
   24308:	4b04      	ldr	r3, [pc, #16]	@ (2431c <_ZN6tflite12Register_PADEv+0x1c>)
   2430a:	4a05      	ldr	r2, [pc, #20]	@ (24320 <_ZN6tflite12Register_PADEv+0x20>)
   2430c:	4905      	ldr	r1, [pc, #20]	@ (24324 <_ZN6tflite12Register_PADEv+0x24>)
TfLiteRegistration Register_PAD() {
   2430e:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, PadPrepare, Eval);
   24310:	f7ff f91a 	bl	23548 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   24314:	4620      	mov	r0, r4
   24316:	b002      	add	sp, #8
   24318:	bd10      	pop	{r4, pc}
   2431a:	bf00      	nop
   2431c:	00023cd5 	.word	0x00023cd5
   24320:	00023659 	.word	0x00023659
   24324:	00023649 	.word	0x00023649

00024328 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   24328:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2432a:	b10b      	cbz	r3, 24330 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context,
   2432c:	2140      	movs	r1, #64	@ 0x40
   2432e:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   24330:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   24332:	f000 ff19 	bl	25168 <abort>
   24336:	bf00      	nop

00024338 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return ret_val;
}

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   24338:	b570      	push	{r4, r5, r6, lr}
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
   2433a:	2200      	movs	r2, #0
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   2433c:	b084      	sub	sp, #16
   2433e:	460c      	mov	r4, r1
   24340:	4606      	mov	r6, r0
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
   24342:	f7ff f90d 	bl	23560 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
   24346:	4621      	mov	r1, r4
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
   24348:	4605      	mov	r5, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
   2434a:	2200      	movs	r2, #0
   2434c:	4630      	mov	r0, r6
   2434e:	f7ff f921 	bl	23594 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
   24352:	68e4      	ldr	r4, [r4, #12]
   24354:	b1bc      	cbz	r4, 24386 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
  const CMSISNNSoftmaxParams op_data =
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);

  switch (input->type) {
   24356:	7a2b      	ldrb	r3, [r5, #8]
   24358:	2b09      	cmp	r3, #9
   2435a:	d002      	beq.n	24362 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2a>
    case kTfLiteFloat32: {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_F32
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
   2435c:	2001      	movs	r0, #1
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
}
   2435e:	b004      	add	sp, #16
   24360:	bd70      	pop	{r4, r5, r6, pc}
      if (output->type == kTfLiteInt8) {
   24362:	7a03      	ldrb	r3, [r0, #8]
   24364:	2b09      	cmp	r3, #9
   24366:	d1f9      	bne.n	2435c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x24>
        arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input),
   24368:	6806      	ldr	r6, [r0, #0]
   2436a:	68a3      	ldr	r3, [r4, #8]
   2436c:	6828      	ldr	r0, [r5, #0]
   2436e:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	@ 0x38
   24372:	9602      	str	r6, [sp, #8]
   24374:	69a5      	ldr	r5, [r4, #24]
   24376:	9501      	str	r5, [sp, #4]
   24378:	68e4      	ldr	r4, [r4, #12]
   2437a:	9400      	str	r4, [sp, #0]
   2437c:	f7fa f85e 	bl	1e43c <arm_softmax_s8>
      return kTfLiteOk;
   24380:	2000      	movs	r0, #0
}
   24382:	b004      	add	sp, #16
   24384:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(node->user_data != nullptr);
   24386:	f000 feef 	bl	25168 <abort>
   2438a:	bf00      	nop

0002438c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   2438c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24390:	680b      	ldr	r3, [r1, #0]
   24392:	6886      	ldr	r6, [r0, #8]
   24394:	b08f      	sub	sp, #60	@ 0x3c
   24396:	b113      	cbz	r3, 2439e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   24398:	681b      	ldr	r3, [r3, #0]
   2439a:	2b01      	cmp	r3, #1
   2439c:	d004      	beq.n	243a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c>
   2439e:	2401      	movs	r4, #1
}
   243a0:	4620      	mov	r0, r4
   243a2:	b00f      	add	sp, #60	@ 0x3c
   243a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return node->outputs == nullptr ? 0 : node->outputs->size;
   243a8:	684b      	ldr	r3, [r1, #4]
   243aa:	460c      	mov	r4, r1
   243ac:	2b00      	cmp	r3, #0
   243ae:	d0f6      	beq.n	2439e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   243b0:	681f      	ldr	r7, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   243b2:	2f01      	cmp	r7, #1
   243b4:	d1f3      	bne.n	2439e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
   243b6:	6833      	ldr	r3, [r6, #0]
   243b8:	4605      	mov	r5, r0
   243ba:	699b      	ldr	r3, [r3, #24]
   243bc:	2200      	movs	r2, #0
   243be:	4630      	mov	r0, r6
   243c0:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
   243c2:	4680      	mov	r8, r0
   243c4:	2800      	cmp	r0, #0
   243c6:	d0ea      	beq.n	2439e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   243c8:	6943      	ldr	r3, [r0, #20]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   243ca:	681b      	ldr	r3, [r3, #0]
   243cc:	2b00      	cmp	r3, #0
   243ce:	dde6      	ble.n	2439e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
   243d0:	6833      	ldr	r3, [r6, #0]
   243d2:	2200      	movs	r2, #0
   243d4:	69db      	ldr	r3, [r3, #28]
   243d6:	4621      	mov	r1, r4
   243d8:	4630      	mov	r0, r6
   243da:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
   243dc:	4681      	mov	r9, r0
   243de:	2800      	cmp	r0, #0
   243e0:	d0dd      	beq.n	2439e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
   243e2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
   243e6:	f1ba 0f00 	cmp.w	sl, #0
   243ea:	d0d8      	beq.n	2439e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
   243ec:	6923      	ldr	r3, [r4, #16]
   243ee:	f8cd a000 	str.w	sl, [sp]
   243f2:	4628      	mov	r0, r5
   243f4:	464a      	mov	r2, r9
   243f6:	4641      	mov	r1, r8
   243f8:	f000 f866 	bl	244c8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
  const int dims_size = dims->size;
   243fc:	f8d8 1014 	ldr.w	r1, [r8, #20]
   24400:	f851 5b04 	ldr.w	r5, [r1], #4
      : size_(dimensions_count) {
   24404:	9502      	str	r5, [sp, #8]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
   24406:	00aa      	lsls	r2, r5, #2
   24408:	4604      	mov	r4, r0
   2440a:	a803      	add	r0, sp, #12
   2440c:	f7f4 f8b8 	bl	18580 <memcpy>
   24410:	f8d9 1014 	ldr.w	r1, [r9, #20]
   24414:	f851 bb04 	ldr.w	fp, [r1], #4
   24418:	a809      	add	r0, sp, #36	@ 0x24
   2441a:	ea4f 028b 	mov.w	r2, fp, lsl #2
   2441e:	f7f4 f8af 	bl	18580 <memcpy>
  for (int i = 0; i < dims_count; ++i) {
   24422:	2d00      	cmp	r5, #0
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   24424:	f105 31ff 	add.w	r1, r5, #4294967295	@ 0xffffffff
   24428:	dd37      	ble.n	2449a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10e>
   2442a:	2300      	movs	r3, #0
    if (i != skip_dim) {
   2442c:	4299      	cmp	r1, r3
   2442e:	d00d      	beq.n	2444c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc0>
    return dims_[i];
   24430:	aa02      	add	r2, sp, #8
   24432:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    TFLITE_DCHECK_LT(i, size_);
   24436:	459b      	cmp	fp, r3
    return dims_[i];
   24438:	6850      	ldr	r0, [r2, #4]
   2443a:	ea4f 0283 	mov.w	r2, r3, lsl #2
    TFLITE_DCHECK_LT(i, size_);
   2443e:	dd2c      	ble.n	2449a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10e>
    return dims_[i];
   24440:	f10d 0c20 	add.w	ip, sp, #32
   24444:	4462      	add	r2, ip
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   24446:	6852      	ldr	r2, [r2, #4]
   24448:	4282      	cmp	r2, r0
   2444a:	d126      	bne.n	2449a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10e>
  for (int i = 0; i < dims_count; ++i) {
   2444c:	3301      	adds	r3, #1
   2444e:	42ab      	cmp	r3, r5
   24450:	d1ec      	bne.n	2442c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xa0>
   24452:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   24454:	4299      	cmp	r1, r3
   24456:	d005      	beq.n	24464 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xd8>
   24458:	aa02      	add	r2, sp, #8
   2445a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2445e:	6852      	ldr	r2, [r2, #4]
   24460:	fb02 f707 	mul.w	r7, r2, r7
  for (int i = 0; i < dims_count; ++i) {
   24464:	3301      	adds	r3, #1
   24466:	429d      	cmp	r5, r3
   24468:	d1f4      	bne.n	24454 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
   2446a:	ab0e      	add	r3, sp, #56	@ 0x38
   2446c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    TFLITE_DCHECK_LT(i, size_);
   24470:	4559      	cmp	r1, fp
    return dims_[i];
   24472:	f853 2c2c 	ldr.w	r2, [r3, #-44]
    TFLITE_DCHECK_LT(i, size_);
   24476:	da10      	bge.n	2449a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10e>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   24478:	f853 3c14 	ldr.w	r3, [r3, #-20]
   2447c:	4293      	cmp	r3, r2
   2447e:	d10c      	bne.n	2449a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x10e>
  op_data->row_size = depth;
   24480:	e9ca 730e 	strd	r7, r3, [sl, #56]	@ 0x38
  micro_context->DeallocateTempTfLiteTensor(input);
   24484:	6833      	ldr	r3, [r6, #0]
   24486:	4641      	mov	r1, r8
   24488:	4630      	mov	r0, r6
   2448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   2448c:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
   2448e:	6833      	ldr	r3, [r6, #0]
   24490:	4649      	mov	r1, r9
   24492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   24494:	4630      	mov	r0, r6
   24496:	4798      	blx	r3
  ~RuntimeShape() {}
   24498:	e782      	b.n	243a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
    TFLITE_DCHECK_LT(i, size_);
   2449a:	f000 fe65 	bl	25168 <abort>
   2449e:	bf00      	nop

000244a0 <_ZN6tflite16Register_SOFTMAXEv>:
  return kTfLiteOk;
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
   244a0:	b510      	push	{r4, lr}
   244a2:	b082      	sub	sp, #8
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
   244a4:	2100      	movs	r1, #0
   244a6:	9100      	str	r1, [sp, #0]
   244a8:	4b04      	ldr	r3, [pc, #16]	@ (244bc <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
   244aa:	4a05      	ldr	r2, [pc, #20]	@ (244c0 <_ZN6tflite16Register_SOFTMAXEv+0x20>)
   244ac:	4905      	ldr	r1, [pc, #20]	@ (244c4 <_ZN6tflite16Register_SOFTMAXEv+0x24>)
TfLiteRegistration Register_SOFTMAX() {
   244ae:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
   244b0:	f7ff f84a 	bl	23548 <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
   244b4:	4620      	mov	r0, r4
   244b6:	b002      	add	sp, #8
   244b8:	bd10      	pop	{r4, pc}
   244ba:	bf00      	nop
   244bc:	00024339 	.word	0x00024339
   244c0:	0002438d 	.word	0x0002438d
   244c4:	00024329 	.word	0x00024329

000244c8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:
  if (InitializeLutForInt16(context, input, output, op_data) != kTfLiteOk) {
    return kTfLiteError;
  }
#endif

  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
   244c8:	7f08      	ldrb	r0, [r1, #28]
   244ca:	2809      	cmp	r0, #9
   244cc:	d001      	beq.n	244d2 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xa>
    if (input->type == kTfLiteInt16) {
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
   244ce:	2001      	movs	r0, #1
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    op_data->beta = static_cast<double>(params->beta);
  }
  return kTfLiteOk;
}
   244d0:	4770      	bx	lr
                                    SoftmaxParams* op_data) {
   244d2:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (output->type == kTfLiteInt16) {
   244d4:	7f10      	ldrb	r0, [r2, #28]
                                    SoftmaxParams* op_data) {
   244d6:	ed2d 8b02 	vpush	{d8}
      if (output->type == kTfLiteInt16) {
   244da:	2807      	cmp	r0, #7
                                    SoftmaxParams* op_data) {
   244dc:	b083      	sub	sp, #12
   244de:	461f      	mov	r7, r3
      if (output->type == kTfLiteInt16) {
   244e0:	d006      	beq.n	244f0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   244e2:	2809      	cmp	r0, #9
   244e4:	d049      	beq.n	2457a <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xb2>
      return kTfLiteError;
   244e6:	2001      	movs	r0, #1
}
   244e8:	b003      	add	sp, #12
   244ea:	ecbd 8b02 	vpop	{d8}
   244ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
   244f0:	68d0      	ldr	r0, [r2, #12]
   244f2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
   244f6:	d1f6      	bne.n	244e6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
   244f8:	ed92 7a02 	vldr	s14, [r2, #8]
   244fc:	eddf 7a25 	vldr	s15, [pc, #148]	@ 24594 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xcc>
   24500:	eeb4 7ae7 	vcmpe.f32	s14, s15
   24504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24508:	bfcc      	ite	gt
   2450a:	ee77 7a67 	vsubgt.f32	s15, s14, s15
   2450e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
   24512:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 24598 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd0>
   24516:	eef4 7ac7 	vcmpe.f32	s15, s14
   2451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2451e:	dce2      	bgt.n	244e6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
      tflite::PreprocessSoftmaxScaling(
   24520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   24522:	6888      	ldr	r0, [r1, #8]
   24524:	f103 0608 	add.w	r6, r3, #8
   24528:	f7f4 fa9a 	bl	18a60 <__aeabi_f2d>
   2452c:	4604      	mov	r4, r0
   2452e:	6838      	ldr	r0, [r7, #0]
   24530:	460d      	mov	r5, r1
   24532:	f7f4 fa95 	bl	18a60 <__aeabi_f2d>
   24536:	ec45 4b18 	vmov	d8, r4, r5
   2453a:	ec41 0b10 	vmov	d0, r0, r1
   2453e:	eeb0 1a48 	vmov.f32	s2, s16
   24542:	eef0 1a68 	vmov.f32	s3, s17
   24546:	aa01      	add	r2, sp, #4
   24548:	4631      	mov	r1, r6
   2454a:	2005      	movs	r0, #5
   2454c:	f7fc faf0 	bl	20b30 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
   24550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   24552:	9901      	ldr	r1, [sp, #4]
   24554:	60d9      	str	r1, [r3, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   24556:	221f      	movs	r2, #31
   24558:	2005      	movs	r0, #5
   2455a:	f7fc fb33 	bl	20bc4 <_ZN6tflite20CalculateInputRadiusEiii>
   2455e:	f7f4 fa6d 	bl	18a3c <__aeabi_i2d>
   24562:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
      op_data->diff_min =
   24566:	f7f4 fd83 	bl	19070 <__aeabi_d2iz>
   2456a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   2456c:	4603      	mov	r3, r0
  return kTfLiteOk;
   2456e:	2000      	movs	r0, #0
      op_data->diff_min =
   24570:	6193      	str	r3, [r2, #24]
}
   24572:	b003      	add	sp, #12
   24574:	ecbd 8b02 	vpop	{d8}
   24578:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   2457a:	68d0      	ldr	r0, [r2, #12]
   2457c:	3080      	adds	r0, #128	@ 0x80
   2457e:	d1b2      	bne.n	244e6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   24580:	eddf 7a06 	vldr	s15, [pc, #24]	@ 2459c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd4>
   24584:	ed92 7a02 	vldr	s14, [r2, #8]
   24588:	eeb4 7a67 	vcmp.f32	s14, s15
   2458c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24590:	d0c6      	beq.n	24520 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x58>
   24592:	e7a8      	b.n	244e6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1e>
   24594:	37800000 	.word	0x37800000
   24598:	3283126f 	.word	0x3283126f
   2459c:	3b800000 	.word	0x3b800000

000245a0 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   245a0:	1e4b      	subs	r3, r1, #1
   245a2:	4418      	add	r0, r3
   245a4:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
   245a8:	fb01 f000 	mul.w	r0, r1, r0
   245ac:	4770      	bx	lr
   245ae:	bf00      	nop

000245b0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
      bytes, MicroArenaBufferAlignment());
}

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int subgraph_idx,
                                                         int* buffer_idx) {
   245b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   245b4:	4605      	mov	r5, r0
   245b6:	4688      	mov	r8, r1

  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
   245b8:	69c0      	ldr	r0, [r0, #28]
   245ba:	2104      	movs	r1, #4
                                                         int* buffer_idx) {
   245bc:	4617      	mov	r7, r2
   245be:	461e      	mov	r6, r3
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
   245c0:	f7ff ffee 	bl	245a0 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   245c4:	69a9      	ldr	r1, [r5, #24]
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
   245c6:	4684      	mov	ip, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   245c8:	b179      	cbz	r1, 245ea <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x3a>
   245ca:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   245ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  size_t current_node_request_count = 0;
   245d2:	2200      	movs	r2, #0
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   245d4:	f8dc 4004 	ldr.w	r4, [ip, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   245d8:	f10c 0c0c 	add.w	ip, ip, #12
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
   245dc:	3401      	adds	r4, #1
      ++current_node_request_count;
   245de:	bf08      	it	eq
   245e0:	3201      	addeq	r2, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
   245e2:	459c      	cmp	ip, r3
   245e4:	d1f6      	bne.n	245d4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x24>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
   245e6:	2a0b      	cmp	r2, #11
   245e8:	d80e      	bhi.n	24608 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x58>
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
   245ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   245ee:	f8cc 3004 	str.w	r3, [ip, #4]
  current_request->bytes = bytes;
   245f2:	f8cc 8000 	str.w	r8, [ip]
  current_request->subgraph_idx = subgraph_idx;
   245f6:	f8cc 7008 	str.w	r7, [ip, #8]
  *buffer_idx = scratch_buffer_request_count_;
   245fa:	6031      	str	r1, [r6, #0]
  ++scratch_buffer_request_count_;
   245fc:	69ab      	ldr	r3, [r5, #24]
   245fe:	3301      	adds	r3, #1
  return kTfLiteOk;
   24600:	2000      	movs	r0, #0
  ++scratch_buffer_request_count_;
   24602:	61ab      	str	r3, [r5, #24]
}
   24604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return kTfLiteError;
   24608:	2001      	movs	r0, #1
}
   2460a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2460e:	bf00      	nop

00024610 <_ZN6tflite12MicroContextD1Ev>:
namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}

MicroContext::~MicroContext() {}
   24610:	4770      	bx	lr
   24612:	bf00      	nop

00024614 <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
  return allocator_.AllocatePersistentBuffer(bytes);
   24614:	6840      	ldr	r0, [r0, #4]
   24616:	6803      	ldr	r3, [r0, #0]
   24618:	695b      	ldr	r3, [r3, #20]
   2461a:	4718      	bx	r3

0002461c <_ZN6tflite12MicroContext16GetScratchBufferEi>:
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroContext::GetScratchBuffer(int buffer_idx) {
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
  return handle->data;
   2461c:	6903      	ldr	r3, [r0, #16]
}
   2461e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   24622:	4770      	bx	lr

00024624 <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
   24624:	b530      	push	{r4, r5, lr}
   24626:	4602      	mov	r2, r0
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   24628:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
   2462c:	460b      	mov	r3, r1
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   2462e:	68d1      	ldr	r1, [r2, #12]
   24630:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
   24634:	b083      	sub	sp, #12
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   24636:	6804      	ldr	r4, [r0, #0]
   24638:	9500      	str	r5, [sp, #0]
   2463a:	6864      	ldr	r4, [r4, #4]
   2463c:	47a0      	blx	r4
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
}
   2463e:	b003      	add	sp, #12
   24640:	bd30      	pop	{r4, r5, pc}
   24642:	bf00      	nop

00024644 <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
  return allocator_.DeallocateTempTfLiteTensor(tensor);
   24644:	6840      	ldr	r0, [r0, #4]
   24646:	6803      	ldr	r3, [r0, #0]
   24648:	689b      	ldr	r3, [r3, #8]
   2464a:	4718      	bx	r3

0002464c <_ZN6tflite12MicroContext13GetEvalTensorEi>:
}

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
   2464c:	6883      	ldr	r3, [r0, #8]
              .tensors[tensor_idx];
   2464e:	e9d3 3204 	ldrd	r3, r2, [r3, #16]
   24652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   24656:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2465a:	6858      	ldr	r0, [r3, #4]
}
   2465c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   24660:	4770      	bx	lr
   24662:	bf00      	nop

00024664 <_ZN6tflite12MicroContextD0Ev>:
MicroContext::~MicroContext() {}
   24664:	b510      	push	{r4, lr}
   24666:	2118      	movs	r1, #24
   24668:	4604      	mov	r4, r0
   2466a:	f00c fde9 	bl	31240 <_ZdlPvj>
   2466e:	4620      	mov	r0, r4
   24670:	bd10      	pop	{r4, pc}
   24672:	bf00      	nop

00024674 <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:
                                                       int* buffer_idx) {
   24674:	4613      	mov	r3, r2
  return allocator_.RequestScratchBufferInArena(
   24676:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
   2467a:	6952      	ldr	r2, [r2, #20]
   2467c:	f7ff bf98 	b.w	245b0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>

00024680 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:
    const TfLiteNode* node, int index) {
   24680:	b530      	push	{r4, r5, lr}
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
   24682:	688b      	ldr	r3, [r1, #8]
  if (index >= 0 && index < max_size) {
   24684:	2a00      	cmp	r2, #0
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
   24686:	f853 4b04 	ldr.w	r4, [r3], #4
    const TfLiteNode* node, int index) {
   2468a:	b083      	sub	sp, #12
  if (index >= 0 && index < max_size) {
   2468c:	db1b      	blt.n	246c6 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x46>
   2468e:	4294      	cmp	r4, r2
   24690:	dd19      	ble.n	246c6 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x46>
    const int tensor_index = tensor_indices[index];
   24692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  if (tensor_index < 0) {
   24696:	2b00      	cmp	r3, #0
   24698:	db15      	blt.n	246c6 <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x46>
  return AllocateTempTfLiteTensor(tensor_index);
   2469a:	6802      	ldr	r2, [r0, #0]
   2469c:	4c0b      	ldr	r4, [pc, #44]	@ (246cc <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x4c>)
   2469e:	6952      	ldr	r2, [r2, #20]
   246a0:	42a2      	cmp	r2, r4
   246a2:	4601      	mov	r1, r0
   246a4:	d10a      	bne.n	246bc <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x3c>
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   246a6:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
   246aa:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   246ae:	6804      	ldr	r4, [r0, #0]
   246b0:	68c9      	ldr	r1, [r1, #12]
   246b2:	9500      	str	r5, [sp, #0]
   246b4:	6864      	ldr	r4, [r4, #4]
   246b6:	47a0      	blx	r4
}
   246b8:	b003      	add	sp, #12
   246ba:	bd30      	pop	{r4, r5, pc}
  return AllocateTempTfLiteTensor(tensor_index);
   246bc:	4619      	mov	r1, r3
}
   246be:	b003      	add	sp, #12
   246c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return AllocateTempTfLiteTensor(tensor_index);
   246c4:	4710      	bx	r2
    return nullptr;
   246c6:	2000      	movs	r0, #0
}
   246c8:	b003      	add	sp, #12
   246ca:	bd30      	pop	{r4, r5, pc}
   246cc:	00024625 	.word	0x00024625

000246d0 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:
                                                    int index) {
   246d0:	b530      	push	{r4, r5, lr}
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
   246d2:	680b      	ldr	r3, [r1, #0]
  if (index >= 0 && index < max_size) {
   246d4:	2a00      	cmp	r2, #0
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
   246d6:	f853 4b04 	ldr.w	r4, [r3], #4
                                                    int index) {
   246da:	b083      	sub	sp, #12
  if (index >= 0 && index < max_size) {
   246dc:	db1b      	blt.n	24716 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x46>
   246de:	4294      	cmp	r4, r2
   246e0:	dd19      	ble.n	24716 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x46>
    const int tensor_index = tensor_indices[index];
   246e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  if (tensor_index < 0) {
   246e6:	2b00      	cmp	r3, #0
   246e8:	db15      	blt.n	24716 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x46>
  return AllocateTempTfLiteTensor(tensor_index);
   246ea:	6802      	ldr	r2, [r0, #0]
   246ec:	4c0b      	ldr	r4, [pc, #44]	@ (2471c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x4c>)
   246ee:	6952      	ldr	r2, [r2, #20]
   246f0:	42a2      	cmp	r2, r4
   246f2:	4601      	mov	r1, r0
   246f4:	d10a      	bne.n	2470c <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x3c>
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   246f6:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
   246fa:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   246fe:	6804      	ldr	r4, [r0, #0]
   24700:	68c9      	ldr	r1, [r1, #12]
   24702:	9500      	str	r5, [sp, #0]
   24704:	6864      	ldr	r4, [r4, #4]
   24706:	47a0      	blx	r4
}
   24708:	b003      	add	sp, #12
   2470a:	bd30      	pop	{r4, r5, pc}
  return AllocateTempTfLiteTensor(tensor_index);
   2470c:	4619      	mov	r1, r3
}
   2470e:	b003      	add	sp, #12
   24710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return AllocateTempTfLiteTensor(tensor_index);
   24714:	4710      	bx	r2
    return nullptr;
   24716:	2000      	movs	r0, #0
}
   24718:	b003      	add	sp, #12
   2471a:	bd30      	pop	{r4, r5, pc}
   2471c:	00024625 	.word	0x00024625

00024720 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:
                                                     int index) {
   24720:	b530      	push	{r4, r5, lr}
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
   24722:	684b      	ldr	r3, [r1, #4]
  if (index >= 0 && index < max_size) {
   24724:	2a00      	cmp	r2, #0
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
   24726:	f853 4b04 	ldr.w	r4, [r3], #4
                                                     int index) {
   2472a:	b083      	sub	sp, #12
  if (index >= 0 && index < max_size) {
   2472c:	db1b      	blt.n	24766 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x46>
   2472e:	4294      	cmp	r4, r2
   24730:	dd19      	ble.n	24766 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x46>
    const int tensor_index = tensor_indices[index];
   24732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  if (tensor_index < 0) {
   24736:	2b00      	cmp	r3, #0
   24738:	db15      	blt.n	24766 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x46>
  return AllocateTempTfLiteTensor(tensor_index);
   2473a:	6802      	ldr	r2, [r0, #0]
   2473c:	4c0b      	ldr	r4, [pc, #44]	@ (2476c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x4c>)
   2473e:	6952      	ldr	r2, [r2, #20]
   24740:	42a2      	cmp	r2, r4
   24742:	4601      	mov	r1, r0
   24744:	d10a      	bne.n	2475c <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x3c>
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
   24746:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
   2474a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   2474e:	6804      	ldr	r4, [r0, #0]
   24750:	68c9      	ldr	r1, [r1, #12]
   24752:	9500      	str	r5, [sp, #0]
   24754:	6864      	ldr	r4, [r4, #4]
   24756:	47a0      	blx	r4
}
   24758:	b003      	add	sp, #12
   2475a:	bd30      	pop	{r4, r5, pc}
  return AllocateTempTfLiteTensor(tensor_index);
   2475c:	4619      	mov	r1, r3
}
   2475e:	b003      	add	sp, #12
   24760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return AllocateTempTfLiteTensor(tensor_index);
   24764:	4710      	bx	r2
    return nullptr;
   24766:	2000      	movs	r0, #0
}
   24768:	b003      	add	sp, #12
   2476a:	bd30      	pop	{r4, r5, pc}
   2476c:	00024625 	.word	0x00024625

00024770 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
    : allocator_(*allocator), graph_(*graph), model_(model) {}
   24770:	e9c0 3202 	strd	r3, r2, [r0, #8]
   24774:	6041      	str	r1, [r0, #4]
   24776:	4b03      	ldr	r3, [pc, #12]	@ (24784 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x14>)
   24778:	6003      	str	r3, [r0, #0]
   2477a:	2100      	movs	r1, #0
   2477c:	e9c0 1104 	strd	r1, r1, [r0, #16]
   24780:	4770      	bx	lr
   24782:	bf00      	nop
   24784:	00040a04 	.word	0x00040a04

00024788 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
   24788:	b40e      	push	{r1, r2, r3}
   2478a:	b500      	push	{lr}
   2478c:	b082      	sub	sp, #8
   2478e:	a903      	add	r1, sp, #12
   24790:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list args;
  va_start(args, format);
   24794:	9101      	str	r1, [sp, #4]
  Log(format, args);
   24796:	f000 f805 	bl	247a4 <_Z3LogPKcSt9__va_list>
  va_end(args);
}
   2479a:	b002      	add	sp, #8
   2479c:	f85d eb04 	ldr.w	lr, [sp], #4
   247a0:	b003      	add	sp, #12
   247a2:	4770      	bx	lr

000247a4 <_Z3LogPKcSt9__va_list>:
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
   247a4:	4770      	bx	lr
   247a6:	bf00      	nop

000247a8 <TfLiteIntArrayEqual>:
#endif
  return computed_size;
}

int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
  if (a == b) return 1;
   247a8:	4288      	cmp	r0, r1
   247aa:	d017      	beq.n	247dc <TfLiteIntArrayEqual+0x34>
  if (a == nullptr || b == nullptr) return 0;
   247ac:	b1c0      	cbz	r0, 247e0 <TfLiteIntArrayEqual+0x38>
   247ae:	b1c1      	cbz	r1, 247e2 <TfLiteIntArrayEqual+0x3a>
int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
   247b0:	b430      	push	{r4, r5}
}

int TfLiteIntArrayEqualsArray(const TfLiteIntArray* a, int b_size,
                              const int b_data[]) {
  if (a == nullptr) return (b_size == 0);
  if (a->size != b_size) return 0;
   247b2:	680b      	ldr	r3, [r1, #0]
   247b4:	6805      	ldr	r5, [r0, #0]
   247b6:	42ab      	cmp	r3, r5
   247b8:	d10d      	bne.n	247d6 <TfLiteIntArrayEqual+0x2e>
  int i = 0;
  for (; i < a->size; i++)
   247ba:	2d00      	cmp	r5, #0
   247bc:	dd13      	ble.n	247e6 <TfLiteIntArrayEqual+0x3e>
  int i = 0;
   247be:	2300      	movs	r3, #0
   247c0:	e001      	b.n	247c6 <TfLiteIntArrayEqual+0x1e>
  for (; i < a->size; i++)
   247c2:	429d      	cmp	r5, r3
   247c4:	d00f      	beq.n	247e6 <TfLiteIntArrayEqual+0x3e>
    if (a->data[i] != b_data[i]) return 0;
   247c6:	f850 4f04 	ldr.w	r4, [r0, #4]!
   247ca:	f851 2f04 	ldr.w	r2, [r1, #4]!
   247ce:	4294      	cmp	r4, r2
  for (; i < a->size; i++)
   247d0:	f103 0301 	add.w	r3, r3, #1
    if (a->data[i] != b_data[i]) return 0;
   247d4:	d0f5      	beq.n	247c2 <TfLiteIntArrayEqual+0x1a>
  if (a == nullptr || b == nullptr) return 0;
   247d6:	2000      	movs	r0, #0
}
   247d8:	bc30      	pop	{r4, r5}
   247da:	4770      	bx	lr
  if (a == b) return 1;
   247dc:	2001      	movs	r0, #1
   247de:	4770      	bx	lr
}
   247e0:	4770      	bx	lr
  if (a == nullptr || b == nullptr) return 0;
   247e2:	4608      	mov	r0, r1
   247e4:	4770      	bx	lr
  if (a == b) return 1;
   247e6:	2001      	movs	r0, #1
}
   247e8:	bc30      	pop	{r4, r5}
   247ea:	4770      	bx	lr

000247ec <_Z29ei_run_impulse_check_canceledv>:

extern ns_timer_config_t ei_tickTimer;

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
   247ec:	2000      	movs	r0, #0
   247ee:	4770      	bx	lr

000247f0 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return ns_us_ticker_read(&ei_tickTimer) / 1000L;
}

uint64_t ei_read_timer_us() {
   247f0:	b508      	push	{r3, lr}
    return ns_us_ticker_read(&ei_tickTimer);
   247f2:	4802      	ldr	r0, [pc, #8]	@ (247fc <_Z16ei_read_timer_usv+0xc>)
   247f4:	f007 fdf4 	bl	2c3e0 <ns_us_ticker_read>

}
   247f8:	2100      	movs	r1, #0
   247fa:	bd08      	pop	{r3, pc}
   247fc:	1000c040 	.word	0x1000c040

00024800 <_Z9ei_printfPKcz>:

__attribute__((weak)) void ei_printf(const char *format, ...) {
   24800:	b40f      	push	{r0, r1, r2, r3}
   24802:	b570      	push	{r4, r5, r6, lr}
   24804:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
   24808:	f50d 6483 	add.w	r4, sp, #1048	@ 0x418
    char buffer[1024] = {0};
   2480c:	f44f 6580 	mov.w	r5, #1024	@ 0x400
__attribute__((weak)) void ei_printf(const char *format, ...) {
   24810:	f854 6b04 	ldr.w	r6, [r4], #4
    char buffer[1024] = {0};
   24814:	462a      	mov	r2, r5
   24816:	2100      	movs	r1, #0
   24818:	a802      	add	r0, sp, #8
   2481a:	f002 fa53 	bl	26cc4 <memset>
    int length;
    va_list myargs;
    va_start(myargs, format);
    length = vsnprintf(buffer, sizeof(buffer), format, myargs);
   2481e:	4632      	mov	r2, r6
   24820:	4629      	mov	r1, r5
   24822:	a802      	add	r0, sp, #8
   24824:	4623      	mov	r3, r4
    va_start(myargs, format);
   24826:	9401      	str	r4, [sp, #4]
    length = vsnprintf(buffer, sizeof(buffer), format, myargs);
   24828:	f001 fef4 	bl	26614 <vsnprintf>
    va_end(myargs);

    if (length > 0) {
        //ei_usb_send((uint8_t *)buffer, length);
    }
}
   2482c:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
   24830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24834:	b004      	add	sp, #16
   24836:	4770      	bx	lr

00024838 <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
   24838:	b508      	push	{r3, lr}
   2483a:	ee10 0a10 	vmov	r0, s0
    ei_printf("%f", f);
   2483e:	f7f4 f90f 	bl	18a60 <__aeabi_f2d>
   24842:	4602      	mov	r2, r0
   24844:	460b      	mov	r3, r1
   24846:	4802      	ldr	r0, [pc, #8]	@ (24850 <_Z15ei_printf_floatf+0x18>)
   24848:	f7ff ffda 	bl	24800 <_Z9ei_printfPKcz>
}
   2484c:	bd08      	pop	{r3, pc}
   2484e:	bf00      	nop
   24850:	0003f844 	.word	0x0003f844

00024854 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    void *p = ns_malloc(size);
   24854:	f007 bcfc 	b.w	2c250 <ns_malloc>

00024858 <_Z9ei_callocjj>:
    return p;
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
   24858:	b510      	push	{r4, lr}
    void *ret = ns_malloc(nitems*size);
   2485a:	fb01 f400 	mul.w	r4, r1, r0
   2485e:	4620      	mov	r0, r4
   24860:	f007 fcf6 	bl	2c250 <ns_malloc>
    memset(ret, 0, nitems*size);
   24864:	4622      	mov	r2, r4
   24866:	2100      	movs	r1, #0
    void *ret = ns_malloc(nitems*size);
   24868:	4604      	mov	r4, r0
    memset(ret, 0, nitems*size);
   2486a:	f002 fa2b 	bl	26cc4 <memset>
    return ret;
}
   2486e:	4620      	mov	r0, r4
   24870:	bd10      	pop	{r4, pc}
   24872:	bf00      	nop

00024874 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
    // ns_lp_printf("free @ 0x%x\n", ptr);
    ns_free(ptr);
   24874:	f007 bcf8 	b.w	2c268 <ns_free>

00024878 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>:


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
   24878:	4a1c      	ldr	r2, [pc, #112]	@ (248ec <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x74>)
   2487a:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
   2487e:	eb02 0ccc 	add.w	ip, r2, ip, lsl #3
static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
   24882:	b430      	push	{r4, r5}
   24884:	460b      	mov	r3, r1
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   24886:	f8dc 4004 	ldr.w	r4, [ip, #4]
   2488a:	4d19      	ldr	r5, [pc, #100]	@ (248f0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x78>)
  tensor->type = tensorData[i].type;
   2488c:	f89c 1001 	ldrb.w	r1, [ip, #1]
   24890:	7719      	strb	r1, [r3, #28]
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   24892:	42ac      	cmp	r4, r5
  tensor->is_variable = false;
   24894:	f04f 0100 	mov.w	r1, #0
   24898:	7799      	strb	r1, [r3, #30]
  tensor->type = tensorData[i].type;
   2489a:	ea4f 0140 	mov.w	r1, r0, lsl #1
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   2489e:	d321      	bcc.n	248e4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x6c>
   248a0:	4d14      	ldr	r5, [pc, #80]	@ (248f4 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x7c>)
   248a2:	42ac      	cmp	r4, r5
   248a4:	bf34      	ite	cc
   248a6:	f04f 0c02 	movcc.w	ip, #2
   248aa:	f04f 0c01 	movcs.w	ip, #1
#endif
  tensor->bytes = tensorData[i].bytes;
   248ae:	4401      	add	r1, r0
   248b0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
   248b4:	f102 0110 	add.w	r1, r2, #16
   248b8:	c903      	ldmia	r1, {r0, r1}
   248ba:	e883 0003 	stmia.w	r3, {r0, r1}
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
   248be:	7819      	ldrb	r1, [r3, #0]
  tensor->bytes = tensorData[i].bytes;
   248c0:	68d5      	ldr	r5, [r2, #12]
  tensor->dims = tensorData[i].dims;
   248c2:	6890      	ldr	r0, [r2, #8]
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   248c4:	f883 c01d 	strb.w	ip, [r3, #29]
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
   248c8:	2901      	cmp	r1, #1
  tensor->bytes = tensorData[i].bytes;
   248ca:	619d      	str	r5, [r3, #24]
  tensor->data.data = tensorData[i].data;
   248cc:	611c      	str	r4, [r3, #16]
  tensor->dims = tensorData[i].dims;
   248ce:	6158      	str	r0, [r3, #20]
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
   248d0:	d106      	bne.n	248e0 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x68>
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
   248d2:	6952      	ldr	r2, [r2, #20]
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
   248d4:	e9d2 1200 	ldrd	r1, r2, [r2]
    tensor->params.scale = quant->scale->data[0];
   248d8:	6849      	ldr	r1, [r1, #4]
    tensor->params.zero_point = quant->zero_point->data[0];
   248da:	6852      	ldr	r2, [r2, #4]
   248dc:	60da      	str	r2, [r3, #12]
    tensor->params.scale = quant->scale->data[0];
   248de:	6099      	str	r1, [r3, #8]
  }

}
   248e0:	bc30      	pop	{r4, r5}
   248e2:	4770      	bx	lr
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
   248e4:	f04f 0c01 	mov.w	ip, #1
   248e8:	e7e1      	b.n	248ae <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor+0x36>
   248ea:	bf00      	nop
   248ec:	00040ab8 	.word	0x00040ab8
   248f0:	10018360 	.word	0x10018360
   248f4:	10052320 	.word	0x10052320

000248f8 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti>:

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
   248f8:	4b04      	ldr	r3, [pc, #16]	@ (2490c <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x14>)
   248fa:	681b      	ldr	r3, [r3, #0]
   248fc:	428b      	cmp	r3, r1
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
   248fe:	bfa3      	ittte	ge
   24900:	4b03      	ldrge	r3, [pc, #12]	@ (24910 <_ZN12_GLOBAL__N_1L20GetScratchBufferImplEP13TfLiteContexti+0x18>)
   24902:	eb03 03c1 	addge.w	r3, r3, r1, lsl #3
   24906:	6858      	ldrge	r0, [r3, #4]
    return NULL;
   24908:	2000      	movlt	r0, #0
}
   2490a:	4770      	bx	lr
   2490c:	100180d4 	.word	0x100180d4
   24910:	100180d8 	.word	0x100180d8

00024914 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi>:
  if (buffer_idx > (int)scratch_buffers_ix) {
   24914:	4b04      	ldr	r3, [pc, #16]	@ (24928 <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi+0x14>)
   24916:	681b      	ldr	r3, [r3, #0]
   24918:	4299      	cmp	r1, r3
  return scratch_buffers[buffer_idx].ptr;
   2491a:	bfdd      	ittte	le
   2491c:	4b03      	ldrle	r3, [pc, #12]	@ (2492c <_ZN12_GLOBAL__N_115EonMicroContext16GetScratchBufferEi+0x18>)
   2491e:	eb03 03c1 	addle.w	r3, r3, r1, lsl #3
   24922:	6858      	ldrle	r0, [r3, #4]
    return NULL;
   24924:	2000      	movgt	r0, #0
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
   24926:	4770      	bx	lr
   24928:	100180d4 	.word	0x100180d4
   2492c:	100180d8 	.word	0x100180d8

00024930 <_ZN12_GLOBAL__N_115EonMicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
   24930:	4770      	bx	lr
   24932:	bf00      	nop

00024934 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>:
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   24934:	4a1c      	ldr	r2, [pc, #112]	@ (249a8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x74>)
   24936:	4b1d      	ldr	r3, [pc, #116]	@ (249ac <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x78>)
   24938:	6812      	ldr	r2, [r2, #0]
   2493a:	481d      	ldr	r0, [pc, #116]	@ (249b0 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x7c>)
   2493c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                                       int tensor_idx) {
   24940:	b510      	push	{r4, lr}
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   24942:	eb01 0c03 	add.w	ip, r1, r3
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
   24946:	f647 7eff 	movw	lr, #32767	@ 0x7fff
   2494a:	4603      	mov	r3, r0
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
   2494c:	2100      	movs	r1, #0
    if (tflEvalTensors[ix].index == tensor_idx) {
   2494e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
   24952:	4562      	cmp	r2, ip
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
   24954:	f103 0310 	add.w	r3, r3, #16
    if (tflEvalTensors[ix].index == tensor_idx) {
   24958:	d009      	beq.n	2496e <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x3a>
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
   2495a:	4572      	cmp	r2, lr
   2495c:	d00a      	beq.n	24974 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x40>
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
   2495e:	3101      	adds	r1, #1
   24960:	2904      	cmp	r1, #4
   24962:	d1f4      	bne.n	2494e <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x1a>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
   24964:	4813      	ldr	r0, [pc, #76]	@ (249b4 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x80>)
   24966:	f7ff ff4b 	bl	24800 <_Z9ei_printfPKcz>
  return nullptr;
   2496a:	2000      	movs	r0, #0
}
   2496c:	bd10      	pop	{r4, pc}
      return &tflEvalTensors[ix].tensor;
   2496e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
}
   24972:	bd10      	pop	{r4, pc}
  tensor->type = tensorData[i].type;
   24974:	4c10      	ldr	r4, [pc, #64]	@ (249b8 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti+0x84>)
   24976:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
   2497a:	eb00 1201 	add.w	r2, r0, r1, lsl #4
   2497e:	010b      	lsls	r3, r1, #4
   24980:	ea4f 01ce 	mov.w	r1, lr, lsl #3
   24984:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
   24988:	3108      	adds	r1, #8
   2498a:	f89e e001 	ldrb.w	lr, [lr, #1]
   2498e:	f882 e008 	strb.w	lr, [r2, #8]
  tensor->dims = tensorData[i].dims;
   24992:	eb01 0e04 	add.w	lr, r1, r4
  tensor->data.data = tensorData[i].data;
   24996:	5861      	ldr	r1, [r4, r1]
   24998:	f85e 4c04 	ldr.w	r4, [lr, #-4]
   2499c:	50c4      	str	r4, [r0, r3]
      return &tflEvalTensors[ix].tensor;
   2499e:	4610      	mov	r0, r2
  tensor->data.data = tensorData[i].data;
   249a0:	6051      	str	r1, [r2, #4]
      tflEvalTensors[ix].index = tensor_idx;
   249a2:	f8a2 c00c 	strh.w	ip, [r2, #12]
}
   249a6:	bd10      	pop	{r4, pc}
   249a8:	10018174 	.word	0x10018174
   249ac:	00040a94 	.word	0x00040a94
   249b0:	1001822c 	.word	0x1001822c
   249b4:	0003f848 	.word	0x0003f848
   249b8:	00040ab8 	.word	0x00040ab8

000249bc <_ZN12_GLOBAL__N_115EonMicroContext13GetEvalTensorEi>:
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
   249bc:	2000      	movs	r0, #0
   249be:	f7ff bfb9 	b.w	24934 <_ZN12_GLOBAL__N_1L17GetEvalTensorImplEPK13TfLiteContexti>
   249c2:	bf00      	nop

000249c4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>:
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   249c4:	4a16      	ldr	r2, [pc, #88]	@ (24a20 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x5c>)
   249c6:	4817      	ldr	r0, [pc, #92]	@ (24a24 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x60>)
   249c8:	6812      	ldr	r2, [r2, #0]
                               int tensor_idx) {
   249ca:	b538      	push	{r3, r4, r5, lr}
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   249cc:	4b16      	ldr	r3, [pc, #88]	@ (24a28 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x64>)
   249ce:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
   249d2:	f647 75ff 	movw	r5, #32767	@ 0x7fff
  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;
   249d6:	440c      	add	r4, r1
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
   249d8:	4603      	mov	r3, r0
   249da:	2100      	movs	r1, #0
    if (tflTensors[ix].index == tensor_idx) {
   249dc:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
   249e0:	42a2      	cmp	r2, r4
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
   249e2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
    if (tflTensors[ix].index == tensor_idx) {
   249e6:	d00a      	beq.n	249fe <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x3a>
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
   249e8:	42aa      	cmp	r2, r5
   249ea:	d00e      	beq.n	24a0a <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x46>
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
   249ec:	3101      	adds	r1, #1
   249ee:	2904      	cmp	r1, #4
   249f0:	d1f4      	bne.n	249dc <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x18>
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
   249f2:	480e      	ldr	r0, [pc, #56]	@ (24a2c <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti+0x68>)
  return nullptr;
   249f4:	2500      	movs	r5, #0
  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
   249f6:	f7ff ff03 	bl	24800 <_Z9ei_printfPKcz>
}
   249fa:	4628      	mov	r0, r5
   249fc:	bd38      	pop	{r3, r4, r5, pc}
      return &tflTensors[ix].tensor;
   249fe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
   24a02:	eb00 0581 	add.w	r5, r0, r1, lsl #2
}
   24a06:	4628      	mov	r0, r5
   24a08:	bd38      	pop	{r3, r4, r5, pc}
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
   24a0a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   24a0e:	eb00 0583 	add.w	r5, r0, r3, lsl #2
   24a12:	4629      	mov	r1, r5
   24a14:	4620      	mov	r0, r4
   24a16:	f7ff ff2f 	bl	24878 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
      tflTensors[ix].index = tensor_idx;
   24a1a:	842c      	strh	r4, [r5, #32]
}
   24a1c:	4628      	mov	r0, r5
   24a1e:	bd38      	pop	{r3, r4, r5, pc}
   24a20:	10018174 	.word	0x10018174
   24a24:	1001826c 	.word	0x1001826c
   24a28:	00040a94 	.word	0x00040a94
   24a2c:	0003f880 	.word	0x0003f880

00024a30 <_ZN12_GLOBAL__N_115EonMicroContext24AllocateTempTfLiteTensorEi>:
    return GetTensorImpl(nullptr, tensor_index);
   24a30:	2000      	movs	r0, #0
   24a32:	f7ff bfc7 	b.w	249c4 <_ZN12_GLOBAL__N_1L13GetTensorImplEPK13TfLiteContexti>
   24a36:	bf00      	nop

00024a38 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>:
                                       size_t bytes) {
   24a38:	b538      	push	{r3, r4, r5, lr}
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;
   24a3a:	f011 030f 	ands.w	r3, r1, #15
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
   24a3e:	4d1c      	ldr	r5, [pc, #112]	@ (24ab0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x78>)
   24a40:	bf14      	ite	ne
   24a42:	f101 0210 	addne.w	r2, r1, #16
   24a46:	460a      	moveq	r2, r1
                                       size_t bytes) {
   24a48:	460c      	mov	r4, r1
  if (current_location - (bytes + align_bytes) < tensor_boundary) {
   24a4a:	491a      	ldr	r1, [pc, #104]	@ (24ab4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x7c>)
   24a4c:	bf18      	it	ne
   24a4e:	1ad2      	subne	r2, r2, r3
   24a50:	682b      	ldr	r3, [r5, #0]
   24a52:	6809      	ldr	r1, [r1, #0]
   24a54:	1a9a      	subs	r2, r3, r2
   24a56:	4291      	cmp	r1, r2
   24a58:	d911      	bls.n	24a7e <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x46>
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
   24a5a:	4d17      	ldr	r5, [pc, #92]	@ (24ab8 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x80>)
   24a5c:	682b      	ldr	r3, [r5, #0]
   24a5e:	2b09      	cmp	r3, #9
   24a60:	d81b      	bhi.n	24a9a <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x62>
    ptr = ei_calloc(bytes, 1);
   24a62:	2101      	movs	r1, #1
   24a64:	4620      	mov	r0, r4
   24a66:	f7ff fef7 	bl	24858 <_Z9ei_callocjj>
    if (ptr == NULL) {
   24a6a:	4603      	mov	r3, r0
   24a6c:	b1d8      	cbz	r0, 24aa6 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6e>
    overflow_buffers[overflow_buffers_ix++] = ptr;
   24a6e:	682a      	ldr	r2, [r5, #0]
   24a70:	4812      	ldr	r0, [pc, #72]	@ (24abc <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x84>)
   24a72:	1c51      	adds	r1, r2, #1
   24a74:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   24a78:	6029      	str	r1, [r5, #0]
}
   24a7a:	4618      	mov	r0, r3
   24a7c:	bd38      	pop	{r3, r4, r5, pc}
  current_location -= 15; // for alignment
   24a7e:	1b1b      	subs	r3, r3, r4
   24a80:	3b0f      	subs	r3, #15
  current_location += 16 - ((uintptr_t)(current_location) & 15);
   24a82:	f023 030f 	bic.w	r3, r3, #15
   24a86:	3310      	adds	r3, #16
  memset(ptr, 0, bytes);
   24a88:	4622      	mov	r2, r4
   24a8a:	2100      	movs	r1, #0
   24a8c:	4618      	mov	r0, r3
  current_location += 16 - ((uintptr_t)(current_location) & 15);
   24a8e:	602b      	str	r3, [r5, #0]
  memset(ptr, 0, bytes);
   24a90:	f002 f918 	bl	26cc4 <memset>
   24a94:	4603      	mov	r3, r0
}
   24a96:	4618      	mov	r0, r3
   24a98:	bd38      	pop	{r3, r4, r5, pc}
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
   24a9a:	4809      	ldr	r0, [pc, #36]	@ (24ac0 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x88>)
   24a9c:	4621      	mov	r1, r4
   24a9e:	f7ff feaf 	bl	24800 <_Z9ei_printfPKcz>
      return NULL;
   24aa2:	2300      	movs	r3, #0
   24aa4:	e7e9      	b.n	24a7a <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x42>
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
   24aa6:	4807      	ldr	r0, [pc, #28]	@ (24ac4 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x8c>)
   24aa8:	4621      	mov	r1, r4
   24aaa:	f7ff fea9 	bl	24800 <_Z9ei_printfPKcz>
      return NULL;
   24aae:	e7f8      	b.n	24aa2 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj+0x6a>
   24ab0:	10018354 	.word	0x10018354
   24ab4:	10018358 	.word	0x10018358
   24ab8:	10018148 	.word	0x10018148
   24abc:	1001814c 	.word	0x1001814c
   24ac0:	0003f8b8 	.word	0x0003f8b8
   24ac4:	0003f938 	.word	0x0003f938

00024ac8 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi>:
                                                int* buffer_idx) {
   24ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
   24aca:	4f10      	ldr	r7, [pc, #64]	@ (24b0c <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x44>)
   24acc:	683b      	ldr	r3, [r7, #0]
   24ace:	2b0d      	cmp	r3, #13
   24ad0:	d811      	bhi.n	24af6 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x2e>
  b.bytes = bytes;
   24ad2:	460e      	mov	r6, r1
  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
   24ad4:	4614      	mov	r4, r2
   24ad6:	f7ff ffaf 	bl	24a38 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
  if (!b.ptr) {
   24ada:	4603      	mov	r3, r0
   24adc:	b180      	cbz	r0, 24b00 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x38>
  scratch_buffers[scratch_buffers_ix] = b;
   24ade:	683d      	ldr	r5, [r7, #0]
  *buffer_idx = scratch_buffers_ix;
   24ae0:	6025      	str	r5, [r4, #0]
  scratch_buffers_ix++;
   24ae2:	1c6a      	adds	r2, r5, #1
   24ae4:	603a      	str	r2, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
   24ae6:	4a0a      	ldr	r2, [pc, #40]	@ (24b10 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x48>)
   24ae8:	f842 6035 	str.w	r6, [r2, r5, lsl #3]
   24aec:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  return kTfLiteOk;
   24af0:	2000      	movs	r0, #0
  scratch_buffers[scratch_buffers_ix] = b;
   24af2:	6053      	str	r3, [r2, #4]
}
   24af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
   24af6:	4807      	ldr	r0, [pc, #28]	@ (24b14 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x4c>)
   24af8:	f7ff fe82 	bl	24800 <_Z9ei_printfPKcz>
    return kTfLiteError;
   24afc:	2001      	movs	r0, #1
}
   24afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
   24b00:	4805      	ldr	r0, [pc, #20]	@ (24b18 <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x50>)
   24b02:	4631      	mov	r1, r6
   24b04:	f7ff fe7c 	bl	24800 <_Z9ei_printfPKcz>
    return kTfLiteError;
   24b08:	e7f8      	b.n	24afc <_ZN12_GLOBAL__N_1L31RequestScratchBufferInArenaImplEP13TfLiteContextjPi+0x34>
   24b0a:	bf00      	nop
   24b0c:	100180d4 	.word	0x100180d4
   24b10:	100180d8 	.word	0x100180d8
   24b14:	0003f970 	.word	0x0003f970
   24b18:	0003f9c8 	.word	0x0003f9c8

00024b1c <_ZN12_GLOBAL__N_115EonMicroContext24AllocatePersistentBufferEj>:
    return AllocatePersistentBufferImpl(nullptr, bytes);
   24b1c:	2000      	movs	r0, #0
   24b1e:	f7ff bf8b 	b.w	24a38 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
   24b22:	bf00      	nop

00024b24 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev>:
class EonMicroContext : public MicroContext {
   24b24:	b510      	push	{r4, lr}
   24b26:	4b03      	ldr	r3, [pc, #12]	@ (24b34 <_ZN12_GLOBAL__N_115EonMicroContextD1Ev+0x10>)
   24b28:	6003      	str	r3, [r0, #0]
   24b2a:	4604      	mov	r4, r0
   24b2c:	f7ff fd70 	bl	24610 <_ZN6tflite12MicroContextD1Ev>
   24b30:	4620      	mov	r0, r4
   24b32:	bd10      	pop	{r4, pc}
   24b34:	00040a68 	.word	0x00040a68

00024b38 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev>:
   24b38:	b510      	push	{r4, lr}
   24b3a:	4b05      	ldr	r3, [pc, #20]	@ (24b50 <_ZN12_GLOBAL__N_115EonMicroContextD0Ev+0x18>)
   24b3c:	6003      	str	r3, [r0, #0]
   24b3e:	4604      	mov	r4, r0
   24b40:	f7ff fd66 	bl	24610 <_ZN6tflite12MicroContextD1Ev>
   24b44:	4620      	mov	r0, r4
   24b46:	2118      	movs	r1, #24
   24b48:	f00c fb7a 	bl	31240 <_ZdlPvj>
   24b4c:	4620      	mov	r0, r4
   24b4e:	bd10      	pop	{r4, pc}
   24b50:	00040a68 	.word	0x00040a68

00024b54 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi>:
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
   24b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
   24b56:	4f10      	ldr	r7, [pc, #64]	@ (24b98 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x44>)
   24b58:	683b      	ldr	r3, [r7, #0]
   24b5a:	2b0d      	cmp	r3, #13
   24b5c:	d812      	bhi.n	24b84 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x30>
  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
   24b5e:	2000      	movs	r0, #0
   24b60:	460e      	mov	r6, r1
   24b62:	4614      	mov	r4, r2
   24b64:	f7ff ff68 	bl	24a38 <_ZN12_GLOBAL__N_1L28AllocatePersistentBufferImplEP13TfLiteContextj>
  if (!b.ptr) {
   24b68:	4603      	mov	r3, r0
   24b6a:	b180      	cbz	r0, 24b8e <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x3a>
  scratch_buffers[scratch_buffers_ix] = b;
   24b6c:	683d      	ldr	r5, [r7, #0]
  *buffer_idx = scratch_buffers_ix;
   24b6e:	6025      	str	r5, [r4, #0]
  scratch_buffers_ix++;
   24b70:	1c6a      	adds	r2, r5, #1
   24b72:	603a      	str	r2, [r7, #0]
  scratch_buffers[scratch_buffers_ix] = b;
   24b74:	4a09      	ldr	r2, [pc, #36]	@ (24b9c <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x48>)
   24b76:	f842 6035 	str.w	r6, [r2, r5, lsl #3]
   24b7a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  return kTfLiteOk;
   24b7e:	2000      	movs	r0, #0
  scratch_buffers[scratch_buffers_ix] = b;
   24b80:	6053      	str	r3, [r2, #4]
  }
   24b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
   24b84:	4806      	ldr	r0, [pc, #24]	@ (24ba0 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x4c>)
   24b86:	f7ff fe3b 	bl	24800 <_Z9ei_printfPKcz>
    return kTfLiteError;
   24b8a:	2001      	movs	r0, #1
  }
   24b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
   24b8e:	4805      	ldr	r0, [pc, #20]	@ (24ba4 <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x50>)
   24b90:	4631      	mov	r1, r6
   24b92:	f7ff fe35 	bl	24800 <_Z9ei_printfPKcz>
    return kTfLiteError;
   24b96:	e7f8      	b.n	24b8a <_ZN12_GLOBAL__N_115EonMicroContext27RequestScratchBufferInArenaEjPi+0x36>
   24b98:	100180d4 	.word	0x100180d4
   24b9c:	100180d8 	.word	0x100180d8
   24ba0:	0003f970 	.word	0x0003f970
   24ba4:	0003f9c8 	.word	0x0003f9c8

00024ba8 <_Z19tflite_learn_7_initPFPvjjE>:
};


} // namespace

TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
   24ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
   24bac:	4c76      	ldr	r4, [pc, #472]	@ (24d88 <_Z19tflite_learn_7_initPFPvjjE+0x1e0>)
   24bae:	4a77      	ldr	r2, [pc, #476]	@ (24d8c <_Z19tflite_learn_7_initPFPvjjE+0x1e4>)
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
   24bb0:	4f77      	ldr	r7, [pc, #476]	@ (24d90 <_Z19tflite_learn_7_initPFPvjjE+0x1e8>)
  tensor_boundary = tensor_arena;
   24bb2:	4e78      	ldr	r6, [pc, #480]	@ (24d94 <_Z19tflite_learn_7_initPFPvjjE+0x1ec>)
   24bb4:	4d78      	ldr	r5, [pc, #480]	@ (24d98 <_Z19tflite_learn_7_initPFPvjjE+0x1f0>)
TfLiteStatus tflite_learn_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
   24bb6:	b09b      	sub	sp, #108	@ 0x6c
  memset(tensor_arena, 0, kTensorArenaSize);
   24bb8:	2100      	movs	r1, #0
   24bba:	4620      	mov	r0, r4
   24bbc:	f002 f882 	bl	26cc4 <memset>
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   24bc0:	f10d 0b30 	add.w	fp, sp, #48	@ 0x30
   24bc4:	2300      	movs	r3, #0
  current_location = tensor_arena + kTensorArenaSize;
   24bc6:	4a75      	ldr	r2, [pc, #468]	@ (24d9c <_Z19tflite_learn_7_initPFPvjjE+0x1f4>)
   24bc8:	603a      	str	r2, [r7, #0]
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   24bca:	4619      	mov	r1, r3
   24bcc:	461a      	mov	r2, r3
   24bce:	4658      	mov	r0, fp
  tensor_boundary = tensor_arena;
   24bd0:	6034      	str	r4, [r6, #0]
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   24bd2:	f7ff fdcd 	bl	24770 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
   24bd6:	4b72      	ldr	r3, [pc, #456]	@ (24da0 <_Z19tflite_learn_7_initPFPvjjE+0x1f8>)
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }
   24bd8:	4a72      	ldr	r2, [pc, #456]	@ (24da4 <_Z19tflite_learn_7_initPFPvjjE+0x1fc>)
   24bda:	920c      	str	r2, [sp, #48]	@ 0x30
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
   24bdc:	4a72      	ldr	r2, [pc, #456]	@ (24da8 <_Z19tflite_learn_7_initPFPvjjE+0x200>)
   24bde:	635a      	str	r2, [r3, #52]	@ 0x34
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
   24be0:	4a72      	ldr	r2, [pc, #456]	@ (24dac <_Z19tflite_learn_7_initPFPvjjE+0x204>)
   24be2:	63da      	str	r2, [r3, #60]	@ 0x3c
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
   24be4:	4a72      	ldr	r2, [pc, #456]	@ (24db0 <_Z19tflite_learn_7_initPFPvjjE+0x208>)
   24be6:	641a      	str	r2, [r3, #64]	@ 0x40
  ctx.GetTensor = &GetTensorImpl;
   24be8:	4a72      	ldr	r2, [pc, #456]	@ (24db4 <_Z19tflite_learn_7_initPFPvjjE+0x20c>)
   24bea:	64da      	str	r2, [r3, #76]	@ 0x4c
  ctx.GetEvalTensor = &GetEvalTensorImpl;
   24bec:	4a72      	ldr	r2, [pc, #456]	@ (24db8 <_Z19tflite_learn_7_initPFPvjjE+0x210>)
   24bee:	651a      	str	r2, [r3, #80]	@ 0x50
  ctx.ReportError = &MicroContextReportOpError;
   24bf0:	4a72      	ldr	r2, [pc, #456]	@ (24dbc <_Z19tflite_learn_7_initPFPvjjE+0x214>)
   24bf2:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
   24bf4:	f8d6 8000 	ldr.w	r8, [r6]
  ctx.impl_ = static_cast<void*>(&micro_context_);
   24bf8:	f8c3 b008 	str.w	fp, [r3, #8]
  ctx.tensors_size = 72;
   24bfc:	2248      	movs	r2, #72	@ 0x48
   24bfe:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < 72; ++i) {
   24c00:	2400      	movs	r4, #0
    init_tflite_tensor(i, &tensor);
   24c02:	4620      	mov	r0, r4
   24c04:	a912      	add	r1, sp, #72	@ 0x48
   24c06:	f7ff fe37 	bl	24878 <_ZN12_GLOBAL__N_1L18init_tflite_tensorEjP12TfLiteTensor>
    if (tensor.allocation_type == kTfLiteArenaRw) {
   24c0a:	f89d 3065 	ldrb.w	r3, [sp, #101]	@ 0x65
   24c0e:	2b02      	cmp	r3, #2
  for (size_t i = 0; i < 72; ++i) {
   24c10:	f104 0401 	add.w	r4, r4, #1
    if (tensor.allocation_type == kTfLiteArenaRw) {
   24c14:	d106      	bne.n	24c24 <_Z19tflite_learn_7_initPFPvjjE+0x7c>
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
   24c16:	68ea      	ldr	r2, [r5, #12]
   24c18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
   24c1a:	4413      	add	r3, r2
      if (data_end_ptr > tensor_boundary) {
   24c1c:	4598      	cmp	r8, r3
        tensor_boundary = data_end_ptr;
   24c1e:	bf3c      	itt	cc
   24c20:	6033      	strcc	r3, [r6, #0]
   24c22:	4698      	movcc	r8, r3
  for (size_t i = 0; i < 72; ++i) {
   24c24:	2c48      	cmp	r4, #72	@ 0x48
   24c26:	f105 0518 	add.w	r5, r5, #24
   24c2a:	d1ea      	bne.n	24c02 <_Z19tflite_learn_7_initPFPvjjE+0x5a>
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
   24c2c:	683b      	ldr	r3, [r7, #0]
   24c2e:	4543      	cmp	r3, r8
   24c30:	f0c0 80a3 	bcc.w	24d7a <_Z19tflite_learn_7_initPFPvjjE+0x1d2>
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
   24c34:	a802      	add	r0, sp, #8
   24c36:	ad02      	add	r5, sp, #8
   24c38:	f7fd ff82 	bl	22b40 <_ZN6tflite16Register_CONV_2DEv>
   24c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   24c3e:	4e60      	ldr	r6, [pc, #384]	@ (24dc0 <_Z19tflite_learn_7_initPFPvjjE+0x218>)
   24c40:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 24dd0 <_Z19tflite_learn_7_initPFPvjjE+0x228>

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   24c44:	f8df a158 	ldr.w	sl, [pc, #344]	@ 24da0 <_Z19tflite_learn_7_initPFPvjjE+0x1f8>
  registrations[OP_CONV_2D] = Register_CONV_2D();
   24c48:	4634      	mov	r4, r6
   24c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   24c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   24c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
   24c50:	a802      	add	r0, sp, #8
  registrations[OP_CONV_2D] = Register_CONV_2D();
   24c52:	682b      	ldr	r3, [r5, #0]
   24c54:	6023      	str	r3, [r4, #0]
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
   24c56:	f7fe fb75 	bl	23344 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
   24c5a:	f10d 0c08 	add.w	ip, sp, #8
   24c5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24c62:	f106 0724 	add.w	r7, r6, #36	@ 0x24
   24c66:	682c      	ldr	r4, [r5, #0]
   24c68:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   24c6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24c6e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  registrations[OP_ADD] = Register_ADD();
   24c70:	a802      	add	r0, sp, #8
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
   24c72:	603c      	str	r4, [r7, #0]
  registrations[OP_ADD] = Register_ADD();
   24c74:	f7fc fb36 	bl	212e4 <_ZN6tflite12Register_ADDEv>
   24c78:	f10d 0c08 	add.w	ip, sp, #8
   24c7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24c80:	f106 0748 	add.w	r7, r6, #72	@ 0x48
   24c84:	682c      	ldr	r4, [r5, #0]
   24c86:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   24c88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24c8c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  registrations[OP_PAD] = Register_PAD();
   24c8e:	a802      	add	r0, sp, #8
  registrations[OP_ADD] = Register_ADD();
   24c90:	603c      	str	r4, [r7, #0]
  registrations[OP_PAD] = Register_PAD();
   24c92:	f7ff fb35 	bl	24300 <_ZN6tflite12Register_PADEv>
   24c96:	f10d 0c08 	add.w	ip, sp, #8
   24c9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24c9e:	f106 076c 	add.w	r7, r6, #108	@ 0x6c
   24ca2:	682c      	ldr	r4, [r5, #0]
   24ca4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   24ca6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24caa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   24cac:	a802      	add	r0, sp, #8
  registrations[OP_PAD] = Register_PAD();
   24cae:	603c      	str	r4, [r7, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   24cb0:	f7ff fbf6 	bl	244a0 <_ZN6tflite16Register_SOFTMAXEv>
   24cb4:	682b      	ldr	r3, [r5, #0]
    current_subgraph_index = g;
   24cb6:	4a43      	ldr	r2, [pc, #268]	@ (24dc4 <_Z19tflite_learn_7_initPFPvjjE+0x21c>)
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   24cb8:	9301      	str	r3, [sp, #4]
    current_subgraph_index = g;
   24cba:	2300      	movs	r3, #0
   24cbc:	6013      	str	r3, [r2, #0]
  registrations[OP_SOFTMAX] = Register_SOFTMAX();
   24cbe:	f10d 0c08 	add.w	ip, sp, #8
   24cc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24cc6:	f106 0e90 	add.w	lr, r6, #144	@ 0x90
   24cca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   24cce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   24cd2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   24cd6:	4d3c      	ldr	r5, [pc, #240]	@ (24dc8 <_Z19tflite_learn_7_initPFPvjjE+0x220>)
   24cd8:	9b01      	ldr	r3, [sp, #4]
   24cda:	f8ce 3000 	str.w	r3, [lr]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   24cde:	1c6f      	adds	r7, r5, #1
   24ce0:	f105 091c 	add.w	r9, r5, #28
    current_subgraph_index = g;
   24ce4:	4644      	mov	r4, r8
      if (registrations[used_ops[i]].init) {
   24ce6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   24cea:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   24cee:	2200      	movs	r2, #0
      if (registrations[used_ops[i]].init) {
   24cf0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   24cf4:	4650      	mov	r0, sl
      if (registrations[used_ops[i]].init) {
   24cf6:	b113      	cbz	r3, 24cfe <_Z19tflite_learn_7_initPFPvjjE+0x156>
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
   24cf8:	6921      	ldr	r1, [r4, #16]
   24cfa:	4798      	blx	r3
   24cfc:	60e0      	str	r0, [r4, #12]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   24cfe:	454d      	cmp	r5, r9
   24d00:	f104 041c 	add.w	r4, r4, #28
   24d04:	d1ef      	bne.n	24ce6 <_Z19tflite_learn_7_initPFPvjjE+0x13e>
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
   24d06:	4a2f      	ldr	r2, [pc, #188]	@ (24dc4 <_Z19tflite_learn_7_initPFPvjjE+0x21c>)
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   24d08:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 24dd4 <_Z19tflite_learn_7_initPFPvjjE+0x22c>
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
   24d0c:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 24dd8 <_Z19tflite_learn_7_initPFPvjjE+0x230>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
   24d10:	4c23      	ldr	r4, [pc, #140]	@ (24da0 <_Z19tflite_learn_7_initPFPvjjE+0x1f8>)
    current_subgraph_index = g;
   24d12:	2300      	movs	r3, #0
   24d14:	6013      	str	r3, [r2, #0]
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   24d16:	f107 051c 	add.w	r5, r7, #28
      if (registrations[used_ops[i]].prepare) {
   24d1a:	f817 3b01 	ldrb.w	r3, [r7], #1
   24d1e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24d22:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   24d26:	f647 72ff 	movw	r2, #32767	@ 0x7fff
      if (registrations[used_ops[i]].prepare) {
   24d2a:	689b      	ldr	r3, [r3, #8]
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
   24d2c:	4641      	mov	r1, r8
   24d2e:	4620      	mov	r0, r4
      if (registrations[used_ops[i]].prepare) {
   24d30:	b18b      	cbz	r3, 24d56 <_Z19tflite_learn_7_initPFPvjjE+0x1ae>
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   24d32:	f8aa 2020 	strh.w	r2, [sl, #32]
   24d36:	f8aa 2044 	strh.w	r2, [sl, #68]	@ 0x44
   24d3a:	f8aa 2068 	strh.w	r2, [sl, #104]	@ 0x68
   24d3e:	f8aa 208c 	strh.w	r2, [sl, #140]	@ 0x8c
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
   24d42:	f8a9 200c 	strh.w	r2, [r9, #12]
   24d46:	f8a9 201c 	strh.w	r2, [r9, #28]
   24d4a:	f8a9 202c 	strh.w	r2, [r9, #44]	@ 0x2c
   24d4e:	f8a9 203c 	strh.w	r2, [r9, #60]	@ 0x3c
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
   24d52:	4798      	blx	r3
        if (status != kTfLiteOk) {
   24d54:	b9b0      	cbnz	r0, 24d84 <_Z19tflite_learn_7_initPFPvjjE+0x1dc>
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
   24d56:	42af      	cmp	r7, r5
   24d58:	f108 081c 	add.w	r8, r8, #28
   24d5c:	d1dd      	bne.n	24d1a <_Z19tflite_learn_7_initPFPvjjE+0x172>
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;
   24d5e:	4a19      	ldr	r2, [pc, #100]	@ (24dc4 <_Z19tflite_learn_7_initPFPvjjE+0x21c>)
   24d60:	2300      	movs	r3, #0
   24d62:	6013      	str	r3, [r2, #0]

  return kTfLiteOk;
   24d64:	9301      	str	r3, [sp, #4]
class EonMicroContext : public MicroContext {
   24d66:	4658      	mov	r0, fp
   24d68:	4b0e      	ldr	r3, [pc, #56]	@ (24da4 <_Z19tflite_learn_7_initPFPvjjE+0x1fc>)
   24d6a:	930c      	str	r3, [sp, #48]	@ 0x30
   24d6c:	f7ff fc50 	bl	24610 <_ZN6tflite12MicroContextD1Ev>
}
   24d70:	9b01      	ldr	r3, [sp, #4]
   24d72:	4618      	mov	r0, r3
   24d74:	b01b      	add	sp, #108	@ 0x6c
   24d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
   24d7a:	4814      	ldr	r0, [pc, #80]	@ (24dcc <_Z19tflite_learn_7_initPFPvjjE+0x224>)
   24d7c:	f7ff fd40 	bl	24800 <_Z9ei_printfPKcz>
    return kTfLiteError;
   24d80:	2301      	movs	r3, #1
   24d82:	e7ef      	b.n	24d64 <_Z19tflite_learn_7_initPFPvjjE+0x1bc>
   24d84:	4603      	mov	r3, r0
   24d86:	e7ed      	b.n	24d64 <_Z19tflite_learn_7_initPFPvjjE+0x1bc>
   24d88:	10018360 	.word	0x10018360
   24d8c:	00039fc0 	.word	0x00039fc0
   24d90:	10018354 	.word	0x10018354
   24d94:	10018358 	.word	0x10018358
   24d98:	00040ab8 	.word	0x00040ab8
   24d9c:	10052320 	.word	0x10052320
   24da0:	100182fc 	.word	0x100182fc
   24da4:	00040a68 	.word	0x00040a68
   24da8:	00024a39 	.word	0x00024a39
   24dac:	00024ac9 	.word	0x00024ac9
   24db0:	000248f9 	.word	0x000248f9
   24db4:	000249c5 	.word	0x000249c5
   24db8:	00024935 	.word	0x00024935
   24dbc:	00024789 	.word	0x00024789
   24dc0:	10018178 	.word	0x10018178
   24dc4:	10018174 	.word	0x10018174
   24dc8:	00040a9b 	.word	0x00040a9b
   24dcc:	0003f9fc 	.word	0x0003f9fc
   24dd0:	1000c0b4 	.word	0x1000c0b4
   24dd4:	1001826c 	.word	0x1001826c
   24dd8:	1001822c 	.word	0x1001822c

00024ddc <_Z20tflite_learn_7_inputiP12TfLiteTensor>:
  tensor->quantization = tensorData[i].quantization;
   24ddc:	4a0d      	ldr	r2, [pc, #52]	@ (24e14 <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x38>)
    tensor->params.scale = quant->scale->data[0];
   24dde:	f8df c040 	ldr.w	ip, [pc, #64]	@ 24e20 <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x44>

TfLiteStatus tflite_learn_7_input(int index, TfLiteTensor *tensor) {
   24de2:	460b      	mov	r3, r1
  tensor->quantization = tensorData[i].quantization;
   24de4:	e892 0003 	ldmia.w	r2, {r0, r1}
  tensor->is_variable = false;
   24de8:	2200      	movs	r2, #0
  tensor->quantization = tensorData[i].quantization;
   24dea:	e883 0003 	stmia.w	r3, {r0, r1}
    tensor->params.zero_point = quant->zero_point->data[0];
   24dee:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
  tensor->is_variable = false;
   24df2:	779a      	strb	r2, [r3, #30]
    tensor->params.zero_point = quant->zero_point->data[0];
   24df4:	60d9      	str	r1, [r3, #12]
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}
   24df6:	4610      	mov	r0, r2
  tensor->dims = tensorData[i].dims;
   24df8:	4907      	ldr	r1, [pc, #28]	@ (24e18 <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x3c>)
  tensor->data.data = tensorData[i].data;
   24dfa:	4a08      	ldr	r2, [pc, #32]	@ (24e1c <_Z20tflite_learn_7_inputiP12TfLiteTensor+0x40>)
    tensor->params.scale = quant->scale->data[0];
   24dfc:	f8c3 c008 	str.w	ip, [r3, #8]
  tensor->data.data = tensorData[i].data;
   24e00:	e9c3 2104 	strd	r2, r1, [r3, #16]
  tensor->type = tensorData[i].type;
   24e04:	f240 2109 	movw	r1, #521	@ 0x209
  tensor->bytes = tensorData[i].bytes;
   24e08:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
  tensor->type = tensorData[i].type;
   24e0c:	8399      	strh	r1, [r3, #28]
  tensor->bytes = tensorData[i].bytes;
   24e0e:	619a      	str	r2, [r3, #24]
}
   24e10:	4770      	bx	lr
   24e12:	bf00      	nop
   24e14:	00040ac8 	.word	0x00040ac8
   24e18:	0004732c 	.word	0x0004732c
   24e1c:	10018360 	.word	0x10018360
   24e20:	3b808081 	.word	0x3b808081

00024e24 <_Z21tflite_learn_7_outputiP12TfLiteTensor>:
  tensor->quantization = tensorData[i].quantization;
   24e24:	4a0d      	ldr	r2, [pc, #52]	@ (24e5c <_Z21tflite_learn_7_outputiP12TfLiteTensor+0x38>)

TfLiteStatus tflite_learn_7_output(int index, TfLiteTensor *tensor) {
   24e26:	460b      	mov	r3, r1
  tensor->quantization = tensorData[i].quantization;
   24e28:	e892 0003 	ldmia.w	r2, {r0, r1}
  tensor->is_variable = false;
   24e2c:	2200      	movs	r2, #0
  tensor->quantization = tensorData[i].quantization;
   24e2e:	e883 0003 	stmia.w	r3, {r0, r1}
    tensor->params.zero_point = quant->zero_point->data[0];
   24e32:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
  tensor->is_variable = false;
   24e36:	779a      	strb	r2, [r3, #30]
    tensor->params.zero_point = quant->zero_point->data[0];
   24e38:	60d9      	str	r1, [r3, #12]
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}
   24e3a:	4610      	mov	r0, r2
  tensor->dims = tensorData[i].dims;
   24e3c:	4908      	ldr	r1, [pc, #32]	@ (24e60 <_Z21tflite_learn_7_outputiP12TfLiteTensor+0x3c>)
  tensor->data.data = tensorData[i].data;
   24e3e:	4a09      	ldr	r2, [pc, #36]	@ (24e64 <_Z21tflite_learn_7_outputiP12TfLiteTensor+0x40>)
    tensor->params.scale = quant->scale->data[0];
   24e40:	f04f 5c6e 	mov.w	ip, #998244352	@ 0x3b800000
  tensor->data.data = tensorData[i].data;
   24e44:	e9c3 2104 	strd	r2, r1, [r3, #16]
  tensor->type = tensorData[i].type;
   24e48:	f240 2109 	movw	r1, #521	@ 0x209
  tensor->bytes = tensorData[i].bytes;
   24e4c:	f44f 7290 	mov.w	r2, #288	@ 0x120
    tensor->params.scale = quant->scale->data[0];
   24e50:	f8c3 c008 	str.w	ip, [r3, #8]
  tensor->type = tensorData[i].type;
   24e54:	8399      	strh	r1, [r3, #28]
  tensor->bytes = tensorData[i].bytes;
   24e56:	619a      	str	r2, [r3, #24]
}
   24e58:	4770      	bx	lr
   24e5a:	bf00      	nop
   24e5c:	00041170 	.word	0x00041170
   24e60:	00041638 	.word	0x00041638
   24e64:	10018360 	.word	0x10018360

00024e68 <_Z21tflite_learn_7_invokev>:

TfLiteStatus tflite_learn_7_invoke() {
   24e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e6c:	f8df a060 	ldr.w	sl, [pc, #96]	@ 24ed0 <_Z21tflite_learn_7_invokev+0x68>
   24e70:	f8df b060 	ldr.w	fp, [pc, #96]	@ 24ed4 <_Z21tflite_learn_7_invokev+0x6c>
   24e74:	f8df 9060 	ldr.w	r9, [pc, #96]	@ 24ed8 <_Z21tflite_learn_7_invokev+0x70>
   24e78:	4d12      	ldr	r5, [pc, #72]	@ (24ec4 <_Z21tflite_learn_7_invokev+0x5c>)
   24e7a:	4f13      	ldr	r7, [pc, #76]	@ (24ec8 <_Z21tflite_learn_7_invokev+0x60>)
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   24e7c:	4e13      	ldr	r6, [pc, #76]	@ (24ecc <_Z21tflite_learn_7_invokev+0x64>)
   24e7e:	f10a 081c 	add.w	r8, sl, #28
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   24e82:	f647 74ff 	movw	r4, #32767	@ 0x7fff
   24e86:	e001      	b.n	24e8c <_Z21tflite_learn_7_invokev+0x24>
  for (size_t i = 0; i < 28; ++i) {
   24e88:	45d0      	cmp	r8, sl
   24e8a:	d019      	beq.n	24ec0 <_Z21tflite_learn_7_invokev+0x58>
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   24e8c:	f81a 3b01 	ldrb.w	r3, [sl], #1
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   24e90:	f8a9 4020 	strh.w	r4, [r9, #32]
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   24e94:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24e98:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   24e9c:	4659      	mov	r1, fp
   24e9e:	68db      	ldr	r3, [r3, #12]
    tflTensors[ix].index = TENSOR_IX_UNUSED;
   24ea0:	f8a9 4044 	strh.w	r4, [r9, #68]	@ 0x44
   24ea4:	f8a9 4068 	strh.w	r4, [r9, #104]	@ 0x68
   24ea8:	f8a9 408c 	strh.w	r4, [r9, #140]	@ 0x8c
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
   24eac:	81ac      	strh	r4, [r5, #12]
   24eae:	83ac      	strh	r4, [r5, #28]
   24eb0:	85ac      	strh	r4, [r5, #44]	@ 0x2c
   24eb2:	87ac      	strh	r4, [r5, #60]	@ 0x3c
    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);
   24eb4:	4630      	mov	r0, r6
   24eb6:	4798      	blx	r3
  for (size_t i = 0; i < 28; ++i) {
   24eb8:	f10b 0b1c 	add.w	fp, fp, #28
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
   24ebc:	2800      	cmp	r0, #0
   24ebe:	d0e3      	beq.n	24e88 <_Z21tflite_learn_7_invokev+0x20>
      return status;
    }
  }
  return kTfLiteOk;
}
   24ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ec4:	1001822c 	.word	0x1001822c
   24ec8:	10018178 	.word	0x10018178
   24ecc:	100182fc 	.word	0x100182fc
   24ed0:	00040a9c 	.word	0x00040a9c
   24ed4:	1000c0b4 	.word	0x1000c0b4
   24ed8:	1001826c 	.word	0x1001826c

00024edc <_Z20tflite_learn_7_resetPFvPvE>:

TfLiteStatus tflite_learn_7_reset( void (*free_fnc)(void* ptr) ) {
   24edc:	b570      	push	{r4, r5, r6, lr}

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   24ede:	4e09      	ldr	r6, [pc, #36]	@ (24f04 <_Z20tflite_learn_7_resetPFvPvE+0x28>)
  scratch_buffers_ix = 0;
   24ee0:	4a09      	ldr	r2, [pc, #36]	@ (24f08 <_Z20tflite_learn_7_resetPFvPvE+0x2c>)
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   24ee2:	6833      	ldr	r3, [r6, #0]
  scratch_buffers_ix = 0;
   24ee4:	2400      	movs	r4, #0
   24ee6:	6014      	str	r4, [r2, #0]
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   24ee8:	b143      	cbz	r3, 24efc <_Z20tflite_learn_7_resetPFvPvE+0x20>
   24eea:	4d08      	ldr	r5, [pc, #32]	@ (24f0c <_Z20tflite_learn_7_resetPFvPvE+0x30>)
    ei_free(overflow_buffers[ix]);
   24eec:	f855 0b04 	ldr.w	r0, [r5], #4
   24ef0:	f7ff fcc0 	bl	24874 <_Z7ei_freePv>
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
   24ef4:	6833      	ldr	r3, [r6, #0]
   24ef6:	3401      	adds	r4, #1
   24ef8:	42a3      	cmp	r3, r4
   24efa:	d8f7      	bhi.n	24eec <_Z20tflite_learn_7_resetPFvPvE+0x10>
  }
  overflow_buffers_ix = 0;
   24efc:	2000      	movs	r0, #0
   24efe:	6030      	str	r0, [r6, #0]
  return kTfLiteOk;
}
   24f00:	bd70      	pop	{r4, r5, r6, pc}
   24f02:	bf00      	nop
   24f04:	10018148 	.word	0x10018148
   24f08:	100180d4 	.word	0x100180d4
   24f0c:	1001814c 	.word	0x1001814c

00024f10 <roundf>:
   24f10:	ee10 3a10 	vmov	r3, s0
   24f14:	f3c3 52c7 	ubfx	r2, r3, #23, #8
   24f18:	3a7f      	subs	r2, #127	@ 0x7f
   24f1a:	2a16      	cmp	r2, #22
   24f1c:	4619      	mov	r1, r3
   24f1e:	dc15      	bgt.n	24f4c <roundf+0x3c>
   24f20:	2a00      	cmp	r2, #0
   24f22:	db0c      	blt.n	24f3e <roundf+0x2e>
   24f24:	480c      	ldr	r0, [pc, #48]	@ (24f58 <roundf+0x48>)
   24f26:	4110      	asrs	r0, r2
   24f28:	4218      	tst	r0, r3
   24f2a:	d005      	beq.n	24f38 <roundf+0x28>
   24f2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
   24f30:	4113      	asrs	r3, r2
   24f32:	440b      	add	r3, r1
   24f34:	ea23 0300 	bic.w	r3, r3, r0
   24f38:	ee00 3a10 	vmov	s0, r3
   24f3c:	4770      	bx	lr
   24f3e:	3201      	adds	r2, #1
   24f40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
   24f44:	d1f8      	bne.n	24f38 <roundf+0x28>
   24f46:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
   24f4a:	e7f5      	b.n	24f38 <roundf+0x28>
   24f4c:	2a80      	cmp	r2, #128	@ 0x80
   24f4e:	d1f3      	bne.n	24f38 <roundf+0x28>
   24f50:	ee30 0a00 	vadd.f32	s0, s0, s0
   24f54:	4770      	bx	lr
   24f56:	bf00      	nop
   24f58:	007fffff 	.word	0x007fffff

00024f5c <frexp>:
   24f5c:	b570      	push	{r4, r5, r6, lr}
   24f5e:	ec55 4b10 	vmov	r4, r5, d0
   24f62:	4606      	mov	r6, r0
   24f64:	4813      	ldr	r0, [pc, #76]	@ (24fb4 <frexp+0x58>)
   24f66:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
   24f6a:	2100      	movs	r1, #0
   24f6c:	4283      	cmp	r3, r0
   24f6e:	6031      	str	r1, [r6, #0]
   24f70:	d81d      	bhi.n	24fae <frexp+0x52>
   24f72:	4620      	mov	r0, r4
   24f74:	4318      	orrs	r0, r3
   24f76:	d01a      	beq.n	24fae <frexp+0x52>
   24f78:	480f      	ldr	r0, [pc, #60]	@ (24fb8 <frexp+0x5c>)
   24f7a:	4028      	ands	r0, r5
   24f7c:	462a      	mov	r2, r5
   24f7e:	b958      	cbnz	r0, 24f98 <frexp+0x3c>
   24f80:	4b0e      	ldr	r3, [pc, #56]	@ (24fbc <frexp+0x60>)
   24f82:	2200      	movs	r2, #0
   24f84:	4620      	mov	r0, r4
   24f86:	4629      	mov	r1, r5
   24f88:	f7f3 fdc2 	bl	18b10 <__aeabi_dmul>
   24f8c:	460a      	mov	r2, r1
   24f8e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
   24f92:	4604      	mov	r4, r0
   24f94:	f06f 0135 	mvn.w	r1, #53	@ 0x35
   24f98:	151b      	asrs	r3, r3, #20
   24f9a:	f36f 521e 	bfc	r2, #20, #11
   24f9e:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
   24fa2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
   24fa6:	440b      	add	r3, r1
   24fa8:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
   24fac:	6033      	str	r3, [r6, #0]
   24fae:	ec45 4b10 	vmov	d0, r4, r5
   24fb2:	bd70      	pop	{r4, r5, r6, pc}
   24fb4:	7fefffff 	.word	0x7fefffff
   24fb8:	7ff00000 	.word	0x7ff00000
   24fbc:	43500000 	.word	0x43500000

00024fc0 <floor>:
   24fc0:	ec51 0b10 	vmov	r0, r1, d0
   24fc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
   24fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24fcc:	f2a3 35ff 	subw	r5, r3, #1023	@ 0x3ff
   24fd0:	2d13      	cmp	r5, #19
   24fd2:	460c      	mov	r4, r1
   24fd4:	4606      	mov	r6, r0
   24fd6:	dc32      	bgt.n	2503e <floor+0x7e>
   24fd8:	2d00      	cmp	r5, #0
   24fda:	db20      	blt.n	2501e <floor+0x5e>
   24fdc:	4b38      	ldr	r3, [pc, #224]	@ (250c0 <floor+0x100>)
   24fde:	fa43 f805 	asr.w	r8, r3, r5
   24fe2:	ea01 0308 	and.w	r3, r1, r8
   24fe6:	4303      	orrs	r3, r0
   24fe8:	460f      	mov	r7, r1
   24fea:	d02d      	beq.n	25048 <floor+0x88>
   24fec:	a332      	add	r3, pc, #200	@ (adr r3, 250b8 <floor+0xf8>)
   24fee:	e9d3 2300 	ldrd	r2, r3, [r3]
   24ff2:	f7f3 fbd7 	bl	187a4 <__adddf3>
   24ff6:	2200      	movs	r2, #0
   24ff8:	2300      	movs	r3, #0
   24ffa:	f7f4 f819 	bl	19030 <__aeabi_dcmpgt>
   24ffe:	b140      	cbz	r0, 25012 <floor+0x52>
   25000:	2c00      	cmp	r4, #0
   25002:	da03      	bge.n	2500c <floor+0x4c>
   25004:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
   25008:	412b      	asrs	r3, r5
   2500a:	441f      	add	r7, r3
   2500c:	ea27 0408 	bic.w	r4, r7, r8
   25010:	2600      	movs	r6, #0
   25012:	4623      	mov	r3, r4
   25014:	4632      	mov	r2, r6
   25016:	ec43 2b10 	vmov	d0, r2, r3
   2501a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2501e:	a326      	add	r3, pc, #152	@ (adr r3, 250b8 <floor+0xf8>)
   25020:	e9d3 2300 	ldrd	r2, r3, [r3]
   25024:	f7f3 fbbe 	bl	187a4 <__adddf3>
   25028:	2200      	movs	r2, #0
   2502a:	2300      	movs	r3, #0
   2502c:	f7f4 f800 	bl	19030 <__aeabi_dcmpgt>
   25030:	2800      	cmp	r0, #0
   25032:	d0ee      	beq.n	25012 <floor+0x52>
   25034:	2c00      	cmp	r4, #0
   25036:	db2a      	blt.n	2508e <floor+0xce>
   25038:	2600      	movs	r6, #0
   2503a:	4634      	mov	r4, r6
   2503c:	e7e9      	b.n	25012 <floor+0x52>
   2503e:	2d33      	cmp	r5, #51	@ 0x33
   25040:	dd06      	ble.n	25050 <floor+0x90>
   25042:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
   25046:	d01b      	beq.n	25080 <floor+0xc0>
   25048:	ec41 0b10 	vmov	d0, r0, r1
   2504c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25050:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
   25054:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
   25058:	40df      	lsrs	r7, r3
   2505a:	4207      	tst	r7, r0
   2505c:	d0f4      	beq.n	25048 <floor+0x88>
   2505e:	a316      	add	r3, pc, #88	@ (adr r3, 250b8 <floor+0xf8>)
   25060:	e9d3 2300 	ldrd	r2, r3, [r3]
   25064:	f7f3 fb9e 	bl	187a4 <__adddf3>
   25068:	2200      	movs	r2, #0
   2506a:	2300      	movs	r3, #0
   2506c:	f7f3 ffe0 	bl	19030 <__aeabi_dcmpgt>
   25070:	2800      	cmp	r0, #0
   25072:	d0ce      	beq.n	25012 <floor+0x52>
   25074:	2c00      	cmp	r4, #0
   25076:	4633      	mov	r3, r6
   25078:	db10      	blt.n	2509c <floor+0xdc>
   2507a:	ea23 0607 	bic.w	r6, r3, r7
   2507e:	e7c8      	b.n	25012 <floor+0x52>
   25080:	4602      	mov	r2, r0
   25082:	460b      	mov	r3, r1
   25084:	f7f3 fb8e 	bl	187a4 <__adddf3>
   25088:	ec41 0b10 	vmov	d0, r0, r1
   2508c:	e7de      	b.n	2504c <floor+0x8c>
   2508e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
   25092:	4326      	orrs	r6, r4
   25094:	d10d      	bne.n	250b2 <floor+0xf2>
   25096:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
   2509a:	e7ba      	b.n	25012 <floor+0x52>
   2509c:	2d14      	cmp	r5, #20
   2509e:	d006      	beq.n	250ae <floor+0xee>
   250a0:	f1c5 0534 	rsb	r5, r5, #52	@ 0x34
   250a4:	2201      	movs	r2, #1
   250a6:	40aa      	lsls	r2, r5
   250a8:	4413      	add	r3, r2
   250aa:	42b3      	cmp	r3, r6
   250ac:	d2e5      	bcs.n	2507a <floor+0xba>
   250ae:	3401      	adds	r4, #1
   250b0:	e7e3      	b.n	2507a <floor+0xba>
   250b2:	4c04      	ldr	r4, [pc, #16]	@ (250c4 <floor+0x104>)
   250b4:	2600      	movs	r6, #0
   250b6:	e7ac      	b.n	25012 <floor+0x52>
   250b8:	8800759c 	.word	0x8800759c
   250bc:	7e37e43c 	.word	0x7e37e43c
   250c0:	000fffff 	.word	0x000fffff
   250c4:	bff00000 	.word	0xbff00000

000250c8 <round>:
   250c8:	ec53 2b10 	vmov	r2, r3, d0
   250cc:	f3c3 500a 	ubfx	r0, r3, #20, #11
   250d0:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
   250d4:	2913      	cmp	r1, #19
   250d6:	b510      	push	{r4, lr}
   250d8:	469c      	mov	ip, r3
   250da:	4696      	mov	lr, r2
   250dc:	dc19      	bgt.n	25112 <round+0x4a>
   250de:	2900      	cmp	r1, #0
   250e0:	db11      	blt.n	25106 <round+0x3e>
   250e2:	4820      	ldr	r0, [pc, #128]	@ (25164 <round+0x9c>)
   250e4:	4108      	asrs	r0, r1
   250e6:	ea00 0403 	and.w	r4, r0, r3
   250ea:	4314      	orrs	r4, r2
   250ec:	d016      	beq.n	2511c <round+0x54>
   250ee:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
   250f2:	410b      	asrs	r3, r1
   250f4:	4463      	add	r3, ip
   250f6:	ea23 0c00 	bic.w	ip, r3, r0
   250fa:	2100      	movs	r1, #0
   250fc:	4663      	mov	r3, ip
   250fe:	460a      	mov	r2, r1
   25100:	ec43 2b10 	vmov	d0, r2, r3
   25104:	bd10      	pop	{r4, pc}
   25106:	3101      	adds	r1, #1
   25108:	f003 4c00 	and.w	ip, r3, #2147483648	@ 0x80000000
   2510c:	d024      	beq.n	25158 <round+0x90>
   2510e:	2100      	movs	r1, #0
   25110:	e7f4      	b.n	250fc <round+0x34>
   25112:	2933      	cmp	r1, #51	@ 0x33
   25114:	dd05      	ble.n	25122 <round+0x5a>
   25116:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
   2511a:	d016      	beq.n	2514a <round+0x82>
   2511c:	ec43 2b10 	vmov	d0, r2, r3
   25120:	bd10      	pop	{r4, pc}
   25122:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
   25126:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
   2512a:	fa24 f000 	lsr.w	r0, r4, r0
   2512e:	4210      	tst	r0, r2
   25130:	d0f4      	beq.n	2511c <round+0x54>
   25132:	2301      	movs	r3, #1
   25134:	f1c1 0133 	rsb	r1, r1, #51	@ 0x33
   25138:	fa03 f101 	lsl.w	r1, r3, r1
   2513c:	eb11 010e 	adds.w	r1, r1, lr
   25140:	bf28      	it	cs
   25142:	449c      	addcs	ip, r3
   25144:	ea21 0100 	bic.w	r1, r1, r0
   25148:	e7d8      	b.n	250fc <round+0x34>
   2514a:	4610      	mov	r0, r2
   2514c:	4619      	mov	r1, r3
   2514e:	f7f3 fb29 	bl	187a4 <__adddf3>
   25152:	ec41 0b10 	vmov	d0, r0, r1
   25156:	bd10      	pop	{r4, pc}
   25158:	f04c 5c7f 	orr.w	ip, ip, #1069547520	@ 0x3fc00000
   2515c:	f44c 1c40 	orr.w	ip, ip, #3145728	@ 0x300000
   25160:	2100      	movs	r1, #0
   25162:	e7cb      	b.n	250fc <round+0x34>
   25164:	000fffff 	.word	0x000fffff

00025168 <abort>:
   25168:	b508      	push	{r3, lr}
   2516a:	2006      	movs	r0, #6
   2516c:	f001 fe76 	bl	26e5c <raise>
   25170:	2001      	movs	r0, #1
   25172:	f006 fc87 	bl	2ba84 <_exit>
   25176:	bf00      	nop

00025178 <__assert_func>:
   25178:	b500      	push	{lr}
   2517a:	4c0b      	ldr	r4, [pc, #44]	@ (251a8 <__assert_func+0x30>)
   2517c:	6825      	ldr	r5, [r4, #0]
   2517e:	4614      	mov	r4, r2
   25180:	68ee      	ldr	r6, [r5, #12]
   25182:	461a      	mov	r2, r3
   25184:	b085      	sub	sp, #20
   25186:	4603      	mov	r3, r0
   25188:	460d      	mov	r5, r1
   2518a:	b14c      	cbz	r4, 251a0 <__assert_func+0x28>
   2518c:	4907      	ldr	r1, [pc, #28]	@ (251ac <__assert_func+0x34>)
   2518e:	9500      	str	r5, [sp, #0]
   25190:	e9cd 1401 	strd	r1, r4, [sp, #4]
   25194:	4630      	mov	r0, r6
   25196:	4906      	ldr	r1, [pc, #24]	@ (251b0 <__assert_func+0x38>)
   25198:	f000 f814 	bl	251c4 <fiprintf>
   2519c:	f7ff ffe4 	bl	25168 <abort>
   251a0:	4904      	ldr	r1, [pc, #16]	@ (251b4 <__assert_func+0x3c>)
   251a2:	460c      	mov	r4, r1
   251a4:	e7f3      	b.n	2518e <__assert_func+0x16>
   251a6:	bf00      	nop
   251a8:	1000c53c 	.word	0x1000c53c
   251ac:	0003fa50 	.word	0x0003fa50
   251b0:	0003fa60 	.word	0x0003fa60
   251b4:	0003f4b4 	.word	0x0003f4b4

000251b8 <atexit>:
   251b8:	2300      	movs	r3, #0
   251ba:	4601      	mov	r1, r0
   251bc:	461a      	mov	r2, r3
   251be:	4618      	mov	r0, r3
   251c0:	f001 bf02 	b.w	26fc8 <__register_exitproc>

000251c4 <fiprintf>:
   251c4:	b40e      	push	{r1, r2, r3}
   251c6:	b510      	push	{r4, lr}
   251c8:	b083      	sub	sp, #12
   251ca:	ab05      	add	r3, sp, #20
   251cc:	4c06      	ldr	r4, [pc, #24]	@ (251e8 <fiprintf+0x24>)
   251ce:	f853 2b04 	ldr.w	r2, [r3], #4
   251d2:	9301      	str	r3, [sp, #4]
   251d4:	4601      	mov	r1, r0
   251d6:	6820      	ldr	r0, [r4, #0]
   251d8:	f000 f844 	bl	25264 <_vfiprintf_r>
   251dc:	b003      	add	sp, #12
   251de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   251e2:	b003      	add	sp, #12
   251e4:	4770      	bx	lr
   251e6:	bf00      	nop
   251e8:	1000c53c 	.word	0x1000c53c

000251ec <__sprint_r.part.0>:
   251ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   251f0:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
   251f2:	049c      	lsls	r4, r3, #18
   251f4:	4690      	mov	r8, r2
   251f6:	d52e      	bpl.n	25256 <__sprint_r.part.0+0x6a>
   251f8:	6893      	ldr	r3, [r2, #8]
   251fa:	6812      	ldr	r2, [r2, #0]
   251fc:	b34b      	cbz	r3, 25252 <__sprint_r.part.0+0x66>
   251fe:	460d      	mov	r5, r1
   25200:	4606      	mov	r6, r0
   25202:	f102 0908 	add.w	r9, r2, #8
   25206:	e959 2a02 	ldrd	r2, sl, [r9, #-8]
   2520a:	ea5f 079a 	movs.w	r7, sl, lsr #2
   2520e:	d016      	beq.n	2523e <__sprint_r.part.0+0x52>
   25210:	f1a2 0b04 	sub.w	fp, r2, #4
   25214:	2400      	movs	r4, #0
   25216:	e001      	b.n	2521c <__sprint_r.part.0+0x30>
   25218:	42a7      	cmp	r7, r4
   2521a:	d00e      	beq.n	2523a <__sprint_r.part.0+0x4e>
   2521c:	f85b 1f04 	ldr.w	r1, [fp, #4]!
   25220:	462a      	mov	r2, r5
   25222:	4630      	mov	r0, r6
   25224:	f001 fc9e 	bl	26b64 <_fputwc_r>
   25228:	1c43      	adds	r3, r0, #1
   2522a:	f104 0401 	add.w	r4, r4, #1
   2522e:	d1f3      	bne.n	25218 <__sprint_r.part.0+0x2c>
   25230:	2300      	movs	r3, #0
   25232:	e9c8 3301 	strd	r3, r3, [r8, #4]
   25236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2523a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2523e:	f02a 0a03 	bic.w	sl, sl, #3
   25242:	eba3 030a 	sub.w	r3, r3, sl
   25246:	f8c8 3008 	str.w	r3, [r8, #8]
   2524a:	f109 0908 	add.w	r9, r9, #8
   2524e:	2b00      	cmp	r3, #0
   25250:	d1d9      	bne.n	25206 <__sprint_r.part.0+0x1a>
   25252:	2000      	movs	r0, #0
   25254:	e7ec      	b.n	25230 <__sprint_r.part.0+0x44>
   25256:	f001 fa15 	bl	26684 <__sfvwrite_r>
   2525a:	2300      	movs	r3, #0
   2525c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   25260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025264 <_vfiprintf_r>:
   25264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25268:	b0c7      	sub	sp, #284	@ 0x11c
   2526a:	af16      	add	r7, sp, #88	@ 0x58
   2526c:	e9cd 2105 	strd	r2, r1, [sp, #20]
   25270:	4683      	mov	fp, r0
   25272:	2208      	movs	r2, #8
   25274:	2100      	movs	r1, #0
   25276:	4638      	mov	r0, r7
   25278:	461c      	mov	r4, r3
   2527a:	930a      	str	r3, [sp, #40]	@ 0x28
   2527c:	f001 fd22 	bl	26cc4 <memset>
   25280:	f1bb 0f00 	cmp.w	fp, #0
   25284:	d004      	beq.n	25290 <_vfiprintf_r+0x2c>
   25286:	f8db 3034 	ldr.w	r3, [fp, #52]	@ 0x34
   2528a:	2b00      	cmp	r3, #0
   2528c:	f000 86e2 	beq.w	26054 <_vfiprintf_r+0xdf0>
   25290:	9a06      	ldr	r2, [sp, #24]
   25292:	6e53      	ldr	r3, [r2, #100]	@ 0x64
   25294:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
   25298:	07de      	lsls	r6, r3, #31
   2529a:	d402      	bmi.n	252a2 <_vfiprintf_r+0x3e>
   2529c:	0595      	lsls	r5, r2, #22
   2529e:	f140 860e 	bpl.w	25ebe <_vfiprintf_r+0xc5a>
   252a2:	0490      	lsls	r0, r2, #18
   252a4:	d407      	bmi.n	252b6 <_vfiprintf_r+0x52>
   252a6:	9906      	ldr	r1, [sp, #24]
   252a8:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
   252aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
   252ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
   252b2:	818a      	strh	r2, [r1, #12]
   252b4:	664b      	str	r3, [r1, #100]	@ 0x64
   252b6:	0711      	lsls	r1, r2, #28
   252b8:	f140 80c8 	bpl.w	2544c <_vfiprintf_r+0x1e8>
   252bc:	9b06      	ldr	r3, [sp, #24]
   252be:	691b      	ldr	r3, [r3, #16]
   252c0:	2b00      	cmp	r3, #0
   252c2:	f000 80c3 	beq.w	2544c <_vfiprintf_r+0x1e8>
   252c6:	f002 031a 	and.w	r3, r2, #26
   252ca:	2b0a      	cmp	r3, #10
   252cc:	f000 80cd 	beq.w	2546a <_vfiprintf_r+0x206>
   252d0:	2300      	movs	r3, #0
   252d2:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
   252d6:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
   252da:	aa1d      	add	r2, sp, #116	@ 0x74
   252dc:	f8df a8f4 	ldr.w	sl, [pc, #2292]	@ 25bd4 <_vfiprintf_r+0x970>
   252e0:	930d      	str	r3, [sp, #52]	@ 0x34
   252e2:	921a      	str	r2, [sp, #104]	@ 0x68
   252e4:	4691      	mov	r9, r2
   252e6:	9310      	str	r3, [sp, #64]	@ 0x40
   252e8:	9307      	str	r3, [sp, #28]
   252ea:	9d05      	ldr	r5, [sp, #20]
   252ec:	f8da 40e4 	ldr.w	r4, [sl, #228]	@ 0xe4
   252f0:	f001 fde0 	bl	26eb4 <__locale_mb_cur_max>
   252f4:	9700      	str	r7, [sp, #0]
   252f6:	4603      	mov	r3, r0
   252f8:	462a      	mov	r2, r5
   252fa:	a914      	add	r1, sp, #80	@ 0x50
   252fc:	4658      	mov	r0, fp
   252fe:	47a0      	blx	r4
   25300:	2800      	cmp	r0, #0
   25302:	f000 80d1 	beq.w	254a8 <_vfiprintf_r+0x244>
   25306:	f2c0 80c7 	blt.w	25498 <_vfiprintf_r+0x234>
   2530a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   2530c:	2a25      	cmp	r2, #37	@ 0x25
   2530e:	4603      	mov	r3, r0
   25310:	d001      	beq.n	25316 <_vfiprintf_r+0xb2>
   25312:	441d      	add	r5, r3
   25314:	e7ea      	b.n	252ec <_vfiprintf_r+0x88>
   25316:	9b05      	ldr	r3, [sp, #20]
   25318:	1aee      	subs	r6, r5, r3
   2531a:	4604      	mov	r4, r0
   2531c:	f040 80c8 	bne.w	254b0 <_vfiprintf_r+0x24c>
   25320:	2300      	movs	r3, #0
   25322:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   25326:	7869      	ldrb	r1, [r5, #1]
   25328:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   2532c:	9308      	str	r3, [sp, #32]
   2532e:	1c6c      	adds	r4, r5, #1
   25330:	9204      	str	r2, [sp, #16]
   25332:	9302      	str	r3, [sp, #8]
   25334:	3401      	adds	r4, #1
   25336:	f1a1 0320 	sub.w	r3, r1, #32
   2533a:	2b5a      	cmp	r3, #90	@ 0x5a
   2533c:	f200 80fe 	bhi.w	2553c <_vfiprintf_r+0x2d8>
   25340:	e8df f013 	tbh	[pc, r3, lsl #1]
   25344:	00fc030a 	.word	0x00fc030a
   25348:	030400fc 	.word	0x030400fc
   2534c:	00fc00fc 	.word	0x00fc00fc
   25350:	006a00fc 	.word	0x006a00fc
   25354:	00fc00fc 	.word	0x00fc00fc
   25358:	0336020f 	.word	0x0336020f
   2535c:	021a00fc 	.word	0x021a00fc
   25360:	00fc031a 	.word	0x00fc031a
   25364:	005b0314 	.word	0x005b0314
   25368:	005b005b 	.word	0x005b005b
   2536c:	005b005b 	.word	0x005b005b
   25370:	005b005b 	.word	0x005b005b
   25374:	005b005b 	.word	0x005b005b
   25378:	00fc00fc 	.word	0x00fc00fc
   2537c:	00fc00fc 	.word	0x00fc00fc
   25380:	00fc00fc 	.word	0x00fc00fc
   25384:	00fc00fc 	.word	0x00fc00fc
   25388:	01c500fc 	.word	0x01c500fc
   2538c:	00fc025a 	.word	0x00fc025a
   25390:	00fc00fc 	.word	0x00fc00fc
   25394:	00fc00fc 	.word	0x00fc00fc
   25398:	00fc00fc 	.word	0x00fc00fc
   2539c:	00fc00fc 	.word	0x00fc00fc
   253a0:	022000fc 	.word	0x022000fc
   253a4:	00fc00fc 	.word	0x00fc00fc
   253a8:	019e00fc 	.word	0x019e00fc
   253ac:	027300fc 	.word	0x027300fc
   253b0:	00fc00fc 	.word	0x00fc00fc
   253b4:	00fc0603 	.word	0x00fc0603
   253b8:	00fc00fc 	.word	0x00fc00fc
   253bc:	00fc00fc 	.word	0x00fc00fc
   253c0:	00fc00fc 	.word	0x00fc00fc
   253c4:	00fc00fc 	.word	0x00fc00fc
   253c8:	01c500fc 	.word	0x01c500fc
   253cc:	00fc01ea 	.word	0x00fc01ea
   253d0:	00fc00fc 	.word	0x00fc00fc
   253d4:	01ea02c1 	.word	0x01ea02c1
   253d8:	00fc007e 	.word	0x00fc007e
   253dc:	00fc02fb 	.word	0x00fc02fb
   253e0:	062602ec 	.word	0x062602ec
   253e4:	007e02ca 	.word	0x007e02ca
   253e8:	019e00fc 	.word	0x019e00fc
   253ec:	0600007c 	.word	0x0600007c
   253f0:	00fc00fc 	.word	0x00fc00fc
   253f4:	00fc062a 	.word	0x00fc062a
   253f8:	007c      	.short	0x007c
   253fa:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
   253fe:	2200      	movs	r2, #0
   25400:	f814 1b01 	ldrb.w	r1, [r4], #1
   25404:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   25408:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   2540c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
   25410:	2b09      	cmp	r3, #9
   25412:	d9f5      	bls.n	25400 <_vfiprintf_r+0x19c>
   25414:	9208      	str	r2, [sp, #32]
   25416:	e78e      	b.n	25336 <_vfiprintf_r+0xd2>
   25418:	4658      	mov	r0, fp
   2541a:	f001 fd51 	bl	26ec0 <_localeconv_r>
   2541e:	6843      	ldr	r3, [r0, #4]
   25420:	9310      	str	r3, [sp, #64]	@ 0x40
   25422:	4618      	mov	r0, r3
   25424:	f7f3 f94c 	bl	186c0 <strlen>
   25428:	900f      	str	r0, [sp, #60]	@ 0x3c
   2542a:	4605      	mov	r5, r0
   2542c:	4658      	mov	r0, fp
   2542e:	f001 fd47 	bl	26ec0 <_localeconv_r>
   25432:	6883      	ldr	r3, [r0, #8]
   25434:	930e      	str	r3, [sp, #56]	@ 0x38
   25436:	2d00      	cmp	r5, #0
   25438:	f040 856a 	bne.w	25f10 <_vfiprintf_r+0xcac>
   2543c:	7821      	ldrb	r1, [r4, #0]
   2543e:	e779      	b.n	25334 <_vfiprintf_r+0xd0>
   25440:	9b02      	ldr	r3, [sp, #8]
   25442:	7821      	ldrb	r1, [r4, #0]
   25444:	f043 0320 	orr.w	r3, r3, #32
   25448:	9302      	str	r3, [sp, #8]
   2544a:	e773      	b.n	25334 <_vfiprintf_r+0xd0>
   2544c:	9d06      	ldr	r5, [sp, #24]
   2544e:	4658      	mov	r0, fp
   25450:	4629      	mov	r1, r5
   25452:	f001 fab9 	bl	269c8 <__swsetup_r>
   25456:	2800      	cmp	r0, #0
   25458:	f040 86da 	bne.w	26210 <_vfiprintf_r+0xfac>
   2545c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   25460:	f002 031a 	and.w	r3, r2, #26
   25464:	2b0a      	cmp	r3, #10
   25466:	f47f af33 	bne.w	252d0 <_vfiprintf_r+0x6c>
   2546a:	9906      	ldr	r1, [sp, #24]
   2546c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   25470:	2b00      	cmp	r3, #0
   25472:	f6ff af2d 	blt.w	252d0 <_vfiprintf_r+0x6c>
   25476:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
   25478:	07de      	lsls	r6, r3, #31
   2547a:	d402      	bmi.n	25482 <_vfiprintf_r+0x21e>
   2547c:	0595      	lsls	r5, r2, #22
   2547e:	f140 868e 	bpl.w	2619e <_vfiprintf_r+0xf3a>
   25482:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   25486:	4623      	mov	r3, r4
   25488:	4658      	mov	r0, fp
   2548a:	f000 feef 	bl	2626c <__sbprintf>
   2548e:	9007      	str	r0, [sp, #28]
   25490:	9807      	ldr	r0, [sp, #28]
   25492:	b047      	add	sp, #284	@ 0x11c
   25494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25498:	2208      	movs	r2, #8
   2549a:	2100      	movs	r1, #0
   2549c:	4638      	mov	r0, r7
   2549e:	f001 fc11 	bl	26cc4 <memset>
   254a2:	2301      	movs	r3, #1
   254a4:	441d      	add	r5, r3
   254a6:	e721      	b.n	252ec <_vfiprintf_r+0x88>
   254a8:	9b05      	ldr	r3, [sp, #20]
   254aa:	1aee      	subs	r6, r5, r3
   254ac:	4604      	mov	r4, r0
   254ae:	d012      	beq.n	254d6 <_vfiprintf_r+0x272>
   254b0:	9b05      	ldr	r3, [sp, #20]
   254b2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
   254b4:	e9c9 3600 	strd	r3, r6, [r9]
   254b8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   254ba:	3301      	adds	r3, #1
   254bc:	4432      	add	r2, r6
   254be:	2b07      	cmp	r3, #7
   254c0:	921c      	str	r2, [sp, #112]	@ 0x70
   254c2:	931b      	str	r3, [sp, #108]	@ 0x6c
   254c4:	dc11      	bgt.n	254ea <_vfiprintf_r+0x286>
   254c6:	f109 0908 	add.w	r9, r9, #8
   254ca:	9b07      	ldr	r3, [sp, #28]
   254cc:	4433      	add	r3, r6
   254ce:	9307      	str	r3, [sp, #28]
   254d0:	2c00      	cmp	r4, #0
   254d2:	f47f af25 	bne.w	25320 <_vfiprintf_r+0xbc>
   254d6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   254d8:	2b00      	cmp	r3, #0
   254da:	f040 867c 	bne.w	261d6 <_vfiprintf_r+0xf72>
   254de:	9b06      	ldr	r3, [sp, #24]
   254e0:	2200      	movs	r2, #0
   254e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   254e6:	921b      	str	r2, [sp, #108]	@ 0x6c
   254e8:	e01c      	b.n	25524 <_vfiprintf_r+0x2c0>
   254ea:	2a00      	cmp	r2, #0
   254ec:	f000 8441 	beq.w	25d72 <_vfiprintf_r+0xb0e>
   254f0:	9906      	ldr	r1, [sp, #24]
   254f2:	aa1a      	add	r2, sp, #104	@ 0x68
   254f4:	4658      	mov	r0, fp
   254f6:	f7ff fe79 	bl	251ec <__sprint_r.part.0>
   254fa:	b980      	cbnz	r0, 2551e <_vfiprintf_r+0x2ba>
   254fc:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25500:	e7e3      	b.n	254ca <_vfiprintf_r+0x266>
   25502:	9906      	ldr	r1, [sp, #24]
   25504:	aa1a      	add	r2, sp, #104	@ 0x68
   25506:	4658      	mov	r0, fp
   25508:	f7ff fe70 	bl	251ec <__sprint_r.part.0>
   2550c:	2800      	cmp	r0, #0
   2550e:	f000 80a2 	beq.w	25656 <_vfiprintf_r+0x3f2>
   25512:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   25514:	b11b      	cbz	r3, 2551e <_vfiprintf_r+0x2ba>
   25516:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   25518:	4658      	mov	r0, fp
   2551a:	f001 fdfb 	bl	27114 <_free_r>
   2551e:	9b06      	ldr	r3, [sp, #24]
   25520:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   25524:	9a06      	ldr	r2, [sp, #24]
   25526:	6e52      	ldr	r2, [r2, #100]	@ 0x64
   25528:	07d1      	lsls	r1, r2, #31
   2552a:	f140 809f 	bpl.w	2566c <_vfiprintf_r+0x408>
   2552e:	065b      	lsls	r3, r3, #25
   25530:	f100 867a 	bmi.w	26228 <_vfiprintf_r+0xfc4>
   25534:	9807      	ldr	r0, [sp, #28]
   25536:	b047      	add	sp, #284	@ 0x11c
   25538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2553c:	9405      	str	r4, [sp, #20]
   2553e:	2900      	cmp	r1, #0
   25540:	d0c9      	beq.n	254d6 <_vfiprintf_r+0x272>
   25542:	2300      	movs	r3, #0
   25544:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   25548:	2301      	movs	r3, #1
   2554a:	f88d 10b4 	strb.w	r1, [sp, #180]	@ 0xb4
   2554e:	9303      	str	r3, [sp, #12]
   25550:	9309      	str	r3, [sp, #36]	@ 0x24
   25552:	ac2d      	add	r4, sp, #180	@ 0xb4
   25554:	2300      	movs	r3, #0
   25556:	930b      	str	r3, [sp, #44]	@ 0x2c
   25558:	9304      	str	r3, [sp, #16]
   2555a:	4698      	mov	r8, r3
   2555c:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
   25560:	9b02      	ldr	r3, [sp, #8]
   25562:	1c50      	adds	r0, r2, #1
   25564:	f013 0384 	ands.w	r3, r3, #132	@ 0x84
   25568:	4601      	mov	r1, r0
   2556a:	930c      	str	r3, [sp, #48]	@ 0x30
   2556c:	d105      	bne.n	2557a <_vfiprintf_r+0x316>
   2556e:	9b08      	ldr	r3, [sp, #32]
   25570:	9d03      	ldr	r5, [sp, #12]
   25572:	1b5d      	subs	r5, r3, r5
   25574:	2d00      	cmp	r5, #0
   25576:	f300 8349 	bgt.w	25c0c <_vfiprintf_r+0x9a8>
   2557a:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   2557e:	b18b      	cbz	r3, 255a4 <_vfiprintf_r+0x340>
   25580:	2301      	movs	r3, #1
   25582:	f10c 0c01 	add.w	ip, ip, #1
   25586:	f8c9 3004 	str.w	r3, [r9, #4]
   2558a:	2907      	cmp	r1, #7
   2558c:	f10d 034b 	add.w	r3, sp, #75	@ 0x4b
   25590:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
   25594:	f8c9 3000 	str.w	r3, [r9]
   25598:	f300 82f8 	bgt.w	25b8c <_vfiprintf_r+0x928>
   2559c:	460a      	mov	r2, r1
   2559e:	f109 0908 	add.w	r9, r9, #8
   255a2:	3101      	adds	r1, #1
   255a4:	f1b8 0f00 	cmp.w	r8, #0
   255a8:	d01d      	beq.n	255e6 <_vfiprintf_r+0x382>
   255aa:	ab13      	add	r3, sp, #76	@ 0x4c
   255ac:	f10c 0c02 	add.w	ip, ip, #2
   255b0:	f8c9 3000 	str.w	r3, [r9]
   255b4:	2907      	cmp	r1, #7
   255b6:	f04f 0302 	mov.w	r3, #2
   255ba:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
   255be:	f8c9 3004 	str.w	r3, [r9, #4]
   255c2:	f340 8300 	ble.w	25bc6 <_vfiprintf_r+0x962>
   255c6:	f1bc 0f00 	cmp.w	ip, #0
   255ca:	f000 8452 	beq.w	25e72 <_vfiprintf_r+0xc0e>
   255ce:	9906      	ldr	r1, [sp, #24]
   255d0:	aa1a      	add	r2, sp, #104	@ 0x68
   255d2:	4658      	mov	r0, fp
   255d4:	f7ff fe0a 	bl	251ec <__sprint_r.part.0>
   255d8:	2800      	cmp	r0, #0
   255da:	d19a      	bne.n	25512 <_vfiprintf_r+0x2ae>
   255dc:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
   255e0:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   255e4:	1c51      	adds	r1, r2, #1
   255e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   255e8:	2b80      	cmp	r3, #128	@ 0x80
   255ea:	f000 8225 	beq.w	25a38 <_vfiprintf_r+0x7d4>
   255ee:	9b04      	ldr	r3, [sp, #16]
   255f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
   255f2:	1a1d      	subs	r5, r3, r0
   255f4:	2d00      	cmp	r5, #0
   255f6:	f300 827c 	bgt.w	25af2 <_vfiprintf_r+0x88e>
   255fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   255fc:	f8c9 4000 	str.w	r4, [r9]
   25600:	eb02 030c 	add.w	r3, r2, ip
   25604:	2907      	cmp	r1, #7
   25606:	e9cd 131b 	strd	r1, r3, [sp, #108]	@ 0x6c
   2560a:	f8c9 2004 	str.w	r2, [r9, #4]
   2560e:	f340 8210 	ble.w	25a32 <_vfiprintf_r+0x7ce>
   25612:	2b00      	cmp	r3, #0
   25614:	f000 8344 	beq.w	25ca0 <_vfiprintf_r+0xa3c>
   25618:	9906      	ldr	r1, [sp, #24]
   2561a:	aa1a      	add	r2, sp, #104	@ 0x68
   2561c:	4658      	mov	r0, fp
   2561e:	f7ff fde5 	bl	251ec <__sprint_r.part.0>
   25622:	2800      	cmp	r0, #0
   25624:	f47f af75 	bne.w	25512 <_vfiprintf_r+0x2ae>
   25628:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   2562a:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   2562e:	9a02      	ldr	r2, [sp, #8]
   25630:	0750      	lsls	r0, r2, #29
   25632:	d505      	bpl.n	25640 <_vfiprintf_r+0x3dc>
   25634:	9a08      	ldr	r2, [sp, #32]
   25636:	9903      	ldr	r1, [sp, #12]
   25638:	1a54      	subs	r4, r2, r1
   2563a:	2c00      	cmp	r4, #0
   2563c:	f300 833b 	bgt.w	25cb6 <_vfiprintf_r+0xa52>
   25640:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
   25644:	9803      	ldr	r0, [sp, #12]
   25646:	4281      	cmp	r1, r0
   25648:	bfac      	ite	ge
   2564a:	1852      	addge	r2, r2, r1
   2564c:	1812      	addlt	r2, r2, r0
   2564e:	9207      	str	r2, [sp, #28]
   25650:	2b00      	cmp	r3, #0
   25652:	f47f af56 	bne.w	25502 <_vfiprintf_r+0x29e>
   25656:	2300      	movs	r3, #0
   25658:	931b      	str	r3, [sp, #108]	@ 0x6c
   2565a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2565c:	b11b      	cbz	r3, 25666 <_vfiprintf_r+0x402>
   2565e:	4619      	mov	r1, r3
   25660:	4658      	mov	r0, fp
   25662:	f001 fd57 	bl	27114 <_free_r>
   25666:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   2566a:	e63e      	b.n	252ea <_vfiprintf_r+0x86>
   2566c:	059a      	lsls	r2, r3, #22
   2566e:	f53f af5e 	bmi.w	2552e <_vfiprintf_r+0x2ca>
   25672:	9c06      	ldr	r4, [sp, #24]
   25674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   25676:	f001 fc73 	bl	26f60 <__retarget_lock_release_recursive>
   2567a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2567e:	e756      	b.n	2552e <_vfiprintf_r+0x2ca>
   25680:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
   25682:	9405      	str	r4, [sp, #20]
   25684:	f856 4b04 	ldr.w	r4, [r6], #4
   25688:	2300      	movs	r3, #0
   2568a:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   2568e:	2c00      	cmp	r4, #0
   25690:	f000 84f8 	beq.w	26084 <_vfiprintf_r+0xe20>
   25694:	2953      	cmp	r1, #83	@ 0x53
   25696:	f000 849c 	beq.w	25fd2 <_vfiprintf_r+0xd6e>
   2569a:	9b02      	ldr	r3, [sp, #8]
   2569c:	f013 0510 	ands.w	r5, r3, #16
   256a0:	f040 8497 	bne.w	25fd2 <_vfiprintf_r+0xd6e>
   256a4:	9b04      	ldr	r3, [sp, #16]
   256a6:	2b00      	cmp	r3, #0
   256a8:	f2c0 8582 	blt.w	261b0 <_vfiprintf_r+0xf4c>
   256ac:	461a      	mov	r2, r3
   256ae:	4629      	mov	r1, r5
   256b0:	4620      	mov	r0, r4
   256b2:	f7f2 ff15 	bl	184e0 <memchr>
   256b6:	900b      	str	r0, [sp, #44]	@ 0x2c
   256b8:	2800      	cmp	r0, #0
   256ba:	f000 8575 	beq.w	261a8 <_vfiprintf_r+0xf44>
   256be:	1b03      	subs	r3, r0, r4
   256c0:	9309      	str	r3, [sp, #36]	@ 0x24
   256c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   256c6:	950b      	str	r5, [sp, #44]	@ 0x2c
   256c8:	9303      	str	r3, [sp, #12]
   256ca:	f000 bd39 	b.w	26140 <_vfiprintf_r+0xedc>
   256ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   256d0:	9405      	str	r4, [sp, #20]
   256d2:	2943      	cmp	r1, #67	@ 0x43
   256d4:	f103 0504 	add.w	r5, r3, #4
   256d8:	d003      	beq.n	256e2 <_vfiprintf_r+0x47e>
   256da:	9b02      	ldr	r3, [sp, #8]
   256dc:	06dc      	lsls	r4, r3, #27
   256de:	f140 845f 	bpl.w	25fa0 <_vfiprintf_r+0xd3c>
   256e2:	2208      	movs	r2, #8
   256e4:	2100      	movs	r1, #0
   256e6:	a818      	add	r0, sp, #96	@ 0x60
   256e8:	f001 faec 	bl	26cc4 <memset>
   256ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   256ee:	ac2d      	add	r4, sp, #180	@ 0xb4
   256f0:	681a      	ldr	r2, [r3, #0]
   256f2:	4621      	mov	r1, r4
   256f4:	ab18      	add	r3, sp, #96	@ 0x60
   256f6:	4658      	mov	r0, fp
   256f8:	f001 fc34 	bl	26f64 <_wcrtomb_r>
   256fc:	4603      	mov	r3, r0
   256fe:	3301      	adds	r3, #1
   25700:	9009      	str	r0, [sp, #36]	@ 0x24
   25702:	f000 857d 	beq.w	26200 <_vfiprintf_r+0xf9c>
   25706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   25708:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2570c:	9303      	str	r3, [sp, #12]
   2570e:	2300      	movs	r3, #0
   25710:	950a      	str	r5, [sp, #40]	@ 0x28
   25712:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   25716:	e71d      	b.n	25554 <_vfiprintf_r+0x2f0>
   25718:	9b02      	ldr	r3, [sp, #8]
   2571a:	9405      	str	r4, [sp, #20]
   2571c:	0698      	lsls	r0, r3, #26
   2571e:	d573      	bpl.n	25808 <_vfiprintf_r+0x5a4>
   25720:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25722:	3307      	adds	r3, #7
   25724:	f023 0307 	bic.w	r3, r3, #7
   25728:	4619      	mov	r1, r3
   2572a:	685a      	ldr	r2, [r3, #4]
   2572c:	f851 3b08 	ldr.w	r3, [r1], #8
   25730:	910a      	str	r1, [sp, #40]	@ 0x28
   25732:	4611      	mov	r1, r2
   25734:	2a00      	cmp	r2, #0
   25736:	f2c0 8140 	blt.w	259ba <_vfiprintf_r+0x756>
   2573a:	9a04      	ldr	r2, [sp, #16]
   2573c:	2a00      	cmp	r2, #0
   2573e:	f2c0 8149 	blt.w	259d4 <_vfiprintf_r+0x770>
   25742:	9a02      	ldr	r2, [sp, #8]
   25744:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   25748:	9202      	str	r2, [sp, #8]
   2574a:	ea53 0201 	orrs.w	r2, r3, r1
   2574e:	f040 8141 	bne.w	259d4 <_vfiprintf_r+0x770>
   25752:	9b04      	ldr	r3, [sp, #16]
   25754:	2b00      	cmp	r3, #0
   25756:	f040 853c 	bne.w	261d2 <_vfiprintf_r+0xf6e>
   2575a:	9303      	str	r3, [sp, #12]
   2575c:	9309      	str	r3, [sp, #36]	@ 0x24
   2575e:	ac46      	add	r4, sp, #280	@ 0x118
   25760:	e14a      	b.n	259f8 <_vfiprintf_r+0x794>
   25762:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25764:	f853 2b04 	ldr.w	r2, [r3], #4
   25768:	9208      	str	r2, [sp, #32]
   2576a:	2a00      	cmp	r2, #0
   2576c:	f280 839f 	bge.w	25eae <_vfiprintf_r+0xc4a>
   25770:	9a08      	ldr	r2, [sp, #32]
   25772:	930a      	str	r3, [sp, #40]	@ 0x28
   25774:	4252      	negs	r2, r2
   25776:	9208      	str	r2, [sp, #32]
   25778:	9b02      	ldr	r3, [sp, #8]
   2577a:	7821      	ldrb	r1, [r4, #0]
   2577c:	f043 0304 	orr.w	r3, r3, #4
   25780:	9302      	str	r3, [sp, #8]
   25782:	e5d7      	b.n	25334 <_vfiprintf_r+0xd0>
   25784:	9b02      	ldr	r3, [sp, #8]
   25786:	9405      	str	r4, [sp, #20]
   25788:	f043 0110 	orr.w	r1, r3, #16
   2578c:	f011 0220 	ands.w	r2, r1, #32
   25790:	f000 82f2 	beq.w	25d78 <_vfiprintf_r+0xb14>
   25794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25796:	3307      	adds	r3, #7
   25798:	f023 0307 	bic.w	r3, r3, #7
   2579c:	4618      	mov	r0, r3
   2579e:	685a      	ldr	r2, [r3, #4]
   257a0:	f850 3b08 	ldr.w	r3, [r0], #8
   257a4:	900a      	str	r0, [sp, #40]	@ 0x28
   257a6:	f421 6480 	bic.w	r4, r1, #1024	@ 0x400
   257aa:	9402      	str	r4, [sp, #8]
   257ac:	9c04      	ldr	r4, [sp, #16]
   257ae:	2000      	movs	r0, #0
   257b0:	4284      	cmp	r4, r0
   257b2:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
   257b6:	db63      	blt.n	25880 <_vfiprintf_r+0x61c>
   257b8:	ea53 0402 	orrs.w	r4, r3, r2
   257bc:	f421 6190 	bic.w	r1, r1, #1152	@ 0x480
   257c0:	f040 8446 	bne.w	26050 <_vfiprintf_r+0xdec>
   257c4:	9a02      	ldr	r2, [sp, #8]
   257c6:	9102      	str	r1, [sp, #8]
   257c8:	9b04      	ldr	r3, [sp, #16]
   257ca:	2b00      	cmp	r3, #0
   257cc:	d150      	bne.n	25870 <_vfiprintf_r+0x60c>
   257ce:	2800      	cmp	r0, #0
   257d0:	f040 8368 	bne.w	25ea4 <_vfiprintf_r+0xc40>
   257d4:	f012 0201 	ands.w	r2, r2, #1
   257d8:	9209      	str	r2, [sp, #36]	@ 0x24
   257da:	f000 836c 	beq.w	25eb6 <_vfiprintf_r+0xc52>
   257de:	2330      	movs	r3, #48	@ 0x30
   257e0:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
   257e4:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   257e8:	9203      	str	r2, [sp, #12]
   257ea:	f20d 1417 	addw	r4, sp, #279	@ 0x117
   257ee:	2b00      	cmp	r3, #0
   257f0:	f040 8107 	bne.w	25a02 <_vfiprintf_r+0x79e>
   257f4:	930b      	str	r3, [sp, #44]	@ 0x2c
   257f6:	e109      	b.n	25a0c <_vfiprintf_r+0x7a8>
   257f8:	9b02      	ldr	r3, [sp, #8]
   257fa:	9405      	str	r4, [sp, #20]
   257fc:	f043 0310 	orr.w	r3, r3, #16
   25800:	9302      	str	r3, [sp, #8]
   25802:	9b02      	ldr	r3, [sp, #8]
   25804:	0698      	lsls	r0, r3, #26
   25806:	d48b      	bmi.n	25720 <_vfiprintf_r+0x4bc>
   25808:	9902      	ldr	r1, [sp, #8]
   2580a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   2580c:	06c9      	lsls	r1, r1, #27
   2580e:	f852 3b04 	ldr.w	r3, [r2], #4
   25812:	f100 838c 	bmi.w	25f2e <_vfiprintf_r+0xcca>
   25816:	9902      	ldr	r1, [sp, #8]
   25818:	064e      	lsls	r6, r1, #25
   2581a:	f140 8446 	bpl.w	260aa <_vfiprintf_r+0xe46>
   2581e:	f343 31c0 	sbfx	r1, r3, #15, #1
   25822:	920a      	str	r2, [sp, #40]	@ 0x28
   25824:	b21b      	sxth	r3, r3
   25826:	460a      	mov	r2, r1
   25828:	e784      	b.n	25734 <_vfiprintf_r+0x4d0>
   2582a:	9b02      	ldr	r3, [sp, #8]
   2582c:	9405      	str	r4, [sp, #20]
   2582e:	f043 0210 	orr.w	r2, r3, #16
   25832:	f012 0120 	ands.w	r1, r2, #32
   25836:	f000 82ae 	beq.w	25d96 <_vfiprintf_r+0xb32>
   2583a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2583c:	3307      	adds	r3, #7
   2583e:	f023 0307 	bic.w	r3, r3, #7
   25842:	4618      	mov	r0, r3
   25844:	6859      	ldr	r1, [r3, #4]
   25846:	f850 3b08 	ldr.w	r3, [r0], #8
   2584a:	900a      	str	r0, [sp, #40]	@ 0x28
   2584c:	2000      	movs	r0, #0
   2584e:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
   25852:	9804      	ldr	r0, [sp, #16]
   25854:	2800      	cmp	r0, #0
   25856:	f2c0 82b2 	blt.w	25dbe <_vfiprintf_r+0xb5a>
   2585a:	f022 0080 	bic.w	r0, r2, #128	@ 0x80
   2585e:	9002      	str	r0, [sp, #8]
   25860:	ea53 0001 	orrs.w	r0, r3, r1
   25864:	f040 80b6 	bne.w	259d4 <_vfiprintf_r+0x770>
   25868:	9b04      	ldr	r3, [sp, #16]
   2586a:	2001      	movs	r0, #1
   2586c:	2b00      	cmp	r3, #0
   2586e:	d0ae      	beq.n	257ce <_vfiprintf_r+0x56a>
   25870:	2801      	cmp	r0, #1
   25872:	f000 84ae 	beq.w	261d2 <_vfiprintf_r+0xf6e>
   25876:	2300      	movs	r3, #0
   25878:	2802      	cmp	r0, #2
   2587a:	461a      	mov	r2, r3
   2587c:	f000 81af 	beq.w	25bde <_vfiprintf_r+0x97a>
   25880:	ac46      	add	r4, sp, #280	@ 0x118
   25882:	f003 0107 	and.w	r1, r3, #7
   25886:	08db      	lsrs	r3, r3, #3
   25888:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   2588c:	08d2      	lsrs	r2, r2, #3
   2588e:	3130      	adds	r1, #48	@ 0x30
   25890:	ea53 0502 	orrs.w	r5, r3, r2
   25894:	4620      	mov	r0, r4
   25896:	f804 1d01 	strb.w	r1, [r4, #-1]!
   2589a:	d1f2      	bne.n	25882 <_vfiprintf_r+0x61e>
   2589c:	9b02      	ldr	r3, [sp, #8]
   2589e:	07dd      	lsls	r5, r3, #31
   258a0:	f140 81ab 	bpl.w	25bfa <_vfiprintf_r+0x996>
   258a4:	2930      	cmp	r1, #48	@ 0x30
   258a6:	f000 81a8 	beq.w	25bfa <_vfiprintf_r+0x996>
   258aa:	2330      	movs	r3, #48	@ 0x30
   258ac:	9a04      	ldr	r2, [sp, #16]
   258ae:	f804 3c01 	strb.w	r3, [r4, #-1]
   258b2:	3802      	subs	r0, #2
   258b4:	ab46      	add	r3, sp, #280	@ 0x118
   258b6:	1a1b      	subs	r3, r3, r0
   258b8:	429a      	cmp	r2, r3
   258ba:	bfb8      	it	lt
   258bc:	461a      	movlt	r2, r3
   258be:	9309      	str	r3, [sp, #36]	@ 0x24
   258c0:	4604      	mov	r4, r0
   258c2:	9203      	str	r2, [sp, #12]
   258c4:	e098      	b.n	259f8 <_vfiprintf_r+0x794>
   258c6:	7821      	ldrb	r1, [r4, #0]
   258c8:	9b02      	ldr	r3, [sp, #8]
   258ca:	2968      	cmp	r1, #104	@ 0x68
   258cc:	f000 83ce 	beq.w	2606c <_vfiprintf_r+0xe08>
   258d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   258d4:	9302      	str	r3, [sp, #8]
   258d6:	e52d      	b.n	25334 <_vfiprintf_r+0xd0>
   258d8:	9b02      	ldr	r3, [sp, #8]
   258da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   258dc:	9405      	str	r4, [sp, #20]
   258de:	f043 0302 	orr.w	r3, r3, #2
   258e2:	9302      	str	r3, [sp, #8]
   258e4:	f852 3b04 	ldr.w	r3, [r2], #4
   258e8:	920a      	str	r2, [sp, #40]	@ 0x28
   258ea:	f647 0230 	movw	r2, #30768	@ 0x7830
   258ee:	f8ad 204c 	strh.w	r2, [sp, #76]	@ 0x4c
   258f2:	4ab7      	ldr	r2, [pc, #732]	@ (25bd0 <_vfiprintf_r+0x96c>)
   258f4:	920d      	str	r2, [sp, #52]	@ 0x34
   258f6:	2200      	movs	r2, #0
   258f8:	2100      	movs	r1, #0
   258fa:	f88d 104b 	strb.w	r1, [sp, #75]	@ 0x4b
   258fe:	9904      	ldr	r1, [sp, #16]
   25900:	2900      	cmp	r1, #0
   25902:	f2c0 816c 	blt.w	25bde <_vfiprintf_r+0x97a>
   25906:	9c02      	ldr	r4, [sp, #8]
   25908:	ea53 0002 	orrs.w	r0, r3, r2
   2590c:	f024 0180 	bic.w	r1, r4, #128	@ 0x80
   25910:	f040 8164 	bne.w	25bdc <_vfiprintf_r+0x978>
   25914:	4622      	mov	r2, r4
   25916:	9102      	str	r1, [sp, #8]
   25918:	2002      	movs	r0, #2
   2591a:	e755      	b.n	257c8 <_vfiprintf_r+0x564>
   2591c:	9b02      	ldr	r3, [sp, #8]
   2591e:	9405      	str	r4, [sp, #20]
   25920:	069c      	lsls	r4, r3, #26
   25922:	f140 82e0 	bpl.w	25ee6 <_vfiprintf_r+0xc82>
   25926:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25928:	9a07      	ldr	r2, [sp, #28]
   2592a:	681b      	ldr	r3, [r3, #0]
   2592c:	601a      	str	r2, [r3, #0]
   2592e:	17d2      	asrs	r2, r2, #31
   25930:	605a      	str	r2, [r3, #4]
   25932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25934:	3304      	adds	r3, #4
   25936:	930a      	str	r3, [sp, #40]	@ 0x28
   25938:	e4d7      	b.n	252ea <_vfiprintf_r+0x86>
   2593a:	7821      	ldrb	r1, [r4, #0]
   2593c:	9b02      	ldr	r3, [sp, #8]
   2593e:	296c      	cmp	r1, #108	@ 0x6c
   25940:	f000 838d 	beq.w	2605e <_vfiprintf_r+0xdfa>
   25944:	f043 0310 	orr.w	r3, r3, #16
   25948:	9302      	str	r3, [sp, #8]
   2594a:	e4f3      	b.n	25334 <_vfiprintf_r+0xd0>
   2594c:	9b02      	ldr	r3, [sp, #8]
   2594e:	7821      	ldrb	r1, [r4, #0]
   25950:	f043 0301 	orr.w	r3, r3, #1
   25954:	9302      	str	r3, [sp, #8]
   25956:	e4ed      	b.n	25334 <_vfiprintf_r+0xd0>
   25958:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   2595c:	7821      	ldrb	r1, [r4, #0]
   2595e:	2b00      	cmp	r3, #0
   25960:	f47f ace8 	bne.w	25334 <_vfiprintf_r+0xd0>
   25964:	2320      	movs	r3, #32
   25966:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   2596a:	e4e3      	b.n	25334 <_vfiprintf_r+0xd0>
   2596c:	9b02      	ldr	r3, [sp, #8]
   2596e:	7821      	ldrb	r1, [r4, #0]
   25970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   25974:	9302      	str	r3, [sp, #8]
   25976:	e4dd      	b.n	25334 <_vfiprintf_r+0xd0>
   25978:	4620      	mov	r0, r4
   2597a:	f810 1b01 	ldrb.w	r1, [r0], #1
   2597e:	292a      	cmp	r1, #42	@ 0x2a
   25980:	f000 845f 	beq.w	26242 <_vfiprintf_r+0xfde>
   25984:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
   25988:	2b09      	cmp	r3, #9
   2598a:	bf98      	it	ls
   2598c:	2200      	movls	r2, #0
   2598e:	f200 841b 	bhi.w	261c8 <_vfiprintf_r+0xf64>
   25992:	f810 1b01 	ldrb.w	r1, [r0], #1
   25996:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   2599a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   2599e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
   259a2:	2b09      	cmp	r3, #9
   259a4:	d9f5      	bls.n	25992 <_vfiprintf_r+0x72e>
   259a6:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   259aa:	9304      	str	r3, [sp, #16]
   259ac:	4604      	mov	r4, r0
   259ae:	e4c2      	b.n	25336 <_vfiprintf_r+0xd2>
   259b0:	232b      	movs	r3, #43	@ 0x2b
   259b2:	7821      	ldrb	r1, [r4, #0]
   259b4:	f88d 304b 	strb.w	r3, [sp, #75]	@ 0x4b
   259b8:	e4bc      	b.n	25334 <_vfiprintf_r+0xd0>
   259ba:	222d      	movs	r2, #45	@ 0x2d
   259bc:	f88d 204b 	strb.w	r2, [sp, #75]	@ 0x4b
   259c0:	9a04      	ldr	r2, [sp, #16]
   259c2:	425b      	negs	r3, r3
   259c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   259c8:	2a00      	cmp	r2, #0
   259ca:	db03      	blt.n	259d4 <_vfiprintf_r+0x770>
   259cc:	9a02      	ldr	r2, [sp, #8]
   259ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   259d2:	9202      	str	r2, [sp, #8]
   259d4:	2b0a      	cmp	r3, #10
   259d6:	f171 0200 	sbcs.w	r2, r1, #0
   259da:	f080 81f6 	bcs.w	25dca <_vfiprintf_r+0xb66>
   259de:	3330      	adds	r3, #48	@ 0x30
   259e0:	b2db      	uxtb	r3, r3
   259e2:	f88d 3117 	strb.w	r3, [sp, #279]	@ 0x117
   259e6:	9b04      	ldr	r3, [sp, #16]
   259e8:	2b01      	cmp	r3, #1
   259ea:	bfb8      	it	lt
   259ec:	2301      	movlt	r3, #1
   259ee:	9303      	str	r3, [sp, #12]
   259f0:	2301      	movs	r3, #1
   259f2:	9309      	str	r3, [sp, #36]	@ 0x24
   259f4:	f20d 1417 	addw	r4, sp, #279	@ 0x117
   259f8:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   259fc:	2b00      	cmp	r3, #0
   259fe:	f43f aef9 	beq.w	257f4 <_vfiprintf_r+0x590>
   25a02:	2300      	movs	r3, #0
   25a04:	930b      	str	r3, [sp, #44]	@ 0x2c
   25a06:	9b03      	ldr	r3, [sp, #12]
   25a08:	3301      	adds	r3, #1
   25a0a:	9303      	str	r3, [sp, #12]
   25a0c:	9b02      	ldr	r3, [sp, #8]
   25a0e:	f013 0802 	ands.w	r8, r3, #2
   25a12:	f43f ada3 	beq.w	2555c <_vfiprintf_r+0x2f8>
   25a16:	9b03      	ldr	r3, [sp, #12]
   25a18:	3302      	adds	r3, #2
   25a1a:	9303      	str	r3, [sp, #12]
   25a1c:	f04f 0802 	mov.w	r8, #2
   25a20:	e59c      	b.n	2555c <_vfiprintf_r+0x2f8>
   25a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   25a24:	941d      	str	r4, [sp, #116]	@ 0x74
   25a26:	2201      	movs	r2, #1
   25a28:	931e      	str	r3, [sp, #120]	@ 0x78
   25a2a:	931c      	str	r3, [sp, #112]	@ 0x70
   25a2c:	921b      	str	r2, [sp, #108]	@ 0x6c
   25a2e:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25a32:	f109 0908 	add.w	r9, r9, #8
   25a36:	e5fa      	b.n	2562e <_vfiprintf_r+0x3ca>
   25a38:	9b08      	ldr	r3, [sp, #32]
   25a3a:	9803      	ldr	r0, [sp, #12]
   25a3c:	1a1d      	subs	r5, r3, r0
   25a3e:	2d00      	cmp	r5, #0
   25a40:	f77f add5 	ble.w	255ee <_vfiprintf_r+0x38a>
   25a44:	2d10      	cmp	r5, #16
   25a46:	f340 83f4 	ble.w	26232 <_vfiprintf_r+0xfce>
   25a4a:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 25bd8 <_vfiprintf_r+0x974>
   25a4e:	4641      	mov	r1, r8
   25a50:	4663      	mov	r3, ip
   25a52:	46a0      	mov	r8, r4
   25a54:	46cc      	mov	ip, r9
   25a56:	2610      	movs	r6, #16
   25a58:	f8dd 9018 	ldr.w	r9, [sp, #24]
   25a5c:	460c      	mov	r4, r1
   25a5e:	e006      	b.n	25a6e <_vfiprintf_r+0x80a>
   25a60:	1c90      	adds	r0, r2, #2
   25a62:	f10c 0c08 	add.w	ip, ip, #8
   25a66:	460a      	mov	r2, r1
   25a68:	3d10      	subs	r5, #16
   25a6a:	2d10      	cmp	r5, #16
   25a6c:	dd1a      	ble.n	25aa4 <_vfiprintf_r+0x840>
   25a6e:	1c51      	adds	r1, r2, #1
   25a70:	3310      	adds	r3, #16
   25a72:	2907      	cmp	r1, #7
   25a74:	e9cc 4600 	strd	r4, r6, [ip]
   25a78:	e9cd 131b 	strd	r1, r3, [sp, #108]	@ 0x6c
   25a7c:	ddf0      	ble.n	25a60 <_vfiprintf_r+0x7fc>
   25a7e:	aa1a      	add	r2, sp, #104	@ 0x68
   25a80:	2b00      	cmp	r3, #0
   25a82:	d07e      	beq.n	25b82 <_vfiprintf_r+0x91e>
   25a84:	4649      	mov	r1, r9
   25a86:	4658      	mov	r0, fp
   25a88:	f7ff fbb0 	bl	251ec <__sprint_r.part.0>
   25a8c:	2800      	cmp	r0, #0
   25a8e:	f47f ad40 	bne.w	25512 <_vfiprintf_r+0x2ae>
   25a92:	e9dd 231b 	ldrd	r2, r3, [sp, #108]	@ 0x6c
   25a96:	3d10      	subs	r5, #16
   25a98:	2d10      	cmp	r5, #16
   25a9a:	f102 0001 	add.w	r0, r2, #1
   25a9e:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
   25aa2:	dce4      	bgt.n	25a6e <_vfiprintf_r+0x80a>
   25aa4:	46e1      	mov	r9, ip
   25aa6:	469c      	mov	ip, r3
   25aa8:	4623      	mov	r3, r4
   25aaa:	4644      	mov	r4, r8
   25aac:	4698      	mov	r8, r3
   25aae:	44ac      	add	ip, r5
   25ab0:	2807      	cmp	r0, #7
   25ab2:	e9cd 0c1b 	strd	r0, ip, [sp, #108]	@ 0x6c
   25ab6:	f8c9 8000 	str.w	r8, [r9]
   25aba:	f8c9 5004 	str.w	r5, [r9, #4]
   25abe:	f340 8206 	ble.w	25ece <_vfiprintf_r+0xc6a>
   25ac2:	f1bc 0f00 	cmp.w	ip, #0
   25ac6:	f000 8347 	beq.w	26158 <_vfiprintf_r+0xef4>
   25aca:	9906      	ldr	r1, [sp, #24]
   25acc:	aa1a      	add	r2, sp, #104	@ 0x68
   25ace:	4658      	mov	r0, fp
   25ad0:	f7ff fb8c 	bl	251ec <__sprint_r.part.0>
   25ad4:	2800      	cmp	r0, #0
   25ad6:	f47f ad1c 	bne.w	25512 <_vfiprintf_r+0x2ae>
   25ada:	9b04      	ldr	r3, [sp, #16]
   25adc:	9809      	ldr	r0, [sp, #36]	@ 0x24
   25ade:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
   25ae2:	1a1d      	subs	r5, r3, r0
   25ae4:	2d00      	cmp	r5, #0
   25ae6:	f102 0101 	add.w	r1, r2, #1
   25aea:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25aee:	f77f ad84 	ble.w	255fa <_vfiprintf_r+0x396>
   25af2:	2d10      	cmp	r5, #16
   25af4:	f8df 80e0 	ldr.w	r8, [pc, #224]	@ 25bd8 <_vfiprintf_r+0x974>
   25af8:	dd30      	ble.n	25b5c <_vfiprintf_r+0x8f8>
   25afa:	4663      	mov	r3, ip
   25afc:	2610      	movs	r6, #16
   25afe:	46cc      	mov	ip, r9
   25b00:	46a9      	mov	r9, r5
   25b02:	4625      	mov	r5, r4
   25b04:	9c06      	ldr	r4, [sp, #24]
   25b06:	e008      	b.n	25b1a <_vfiprintf_r+0x8b6>
   25b08:	1c91      	adds	r1, r2, #2
   25b0a:	f10c 0c08 	add.w	ip, ip, #8
   25b0e:	4602      	mov	r2, r0
   25b10:	f1a9 0910 	sub.w	r9, r9, #16
   25b14:	f1b9 0f10 	cmp.w	r9, #16
   25b18:	dd1c      	ble.n	25b54 <_vfiprintf_r+0x8f0>
   25b1a:	1c50      	adds	r0, r2, #1
   25b1c:	492e      	ldr	r1, [pc, #184]	@ (25bd8 <_vfiprintf_r+0x974>)
   25b1e:	3310      	adds	r3, #16
   25b20:	2807      	cmp	r0, #7
   25b22:	e9cc 1600 	strd	r1, r6, [ip]
   25b26:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
   25b2a:	dded      	ble.n	25b08 <_vfiprintf_r+0x8a4>
   25b2c:	aa1a      	add	r2, sp, #104	@ 0x68
   25b2e:	b31b      	cbz	r3, 25b78 <_vfiprintf_r+0x914>
   25b30:	4621      	mov	r1, r4
   25b32:	4658      	mov	r0, fp
   25b34:	f7ff fb5a 	bl	251ec <__sprint_r.part.0>
   25b38:	2800      	cmp	r0, #0
   25b3a:	f47f acea 	bne.w	25512 <_vfiprintf_r+0x2ae>
   25b3e:	e9dd 231b 	ldrd	r2, r3, [sp, #108]	@ 0x6c
   25b42:	f1a9 0910 	sub.w	r9, r9, #16
   25b46:	f1b9 0f10 	cmp.w	r9, #16
   25b4a:	f102 0101 	add.w	r1, r2, #1
   25b4e:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
   25b52:	dce2      	bgt.n	25b1a <_vfiprintf_r+0x8b6>
   25b54:	462c      	mov	r4, r5
   25b56:	464d      	mov	r5, r9
   25b58:	46e1      	mov	r9, ip
   25b5a:	469c      	mov	ip, r3
   25b5c:	44ac      	add	ip, r5
   25b5e:	2907      	cmp	r1, #7
   25b60:	e9cd 1c1b 	strd	r1, ip, [sp, #108]	@ 0x6c
   25b64:	f8c9 8000 	str.w	r8, [r9]
   25b68:	f8c9 5004 	str.w	r5, [r9, #4]
   25b6c:	f300 80ee 	bgt.w	25d4c <_vfiprintf_r+0xae8>
   25b70:	f109 0908 	add.w	r9, r9, #8
   25b74:	3101      	adds	r1, #1
   25b76:	e540      	b.n	255fa <_vfiprintf_r+0x396>
   25b78:	2101      	movs	r1, #1
   25b7a:	461a      	mov	r2, r3
   25b7c:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
   25b80:	e7c6      	b.n	25b10 <_vfiprintf_r+0x8ac>
   25b82:	2001      	movs	r0, #1
   25b84:	461a      	mov	r2, r3
   25b86:	f10d 0c74 	add.w	ip, sp, #116	@ 0x74
   25b8a:	e76d      	b.n	25a68 <_vfiprintf_r+0x804>
   25b8c:	f1bc 0f00 	cmp.w	ip, #0
   25b90:	d00d      	beq.n	25bae <_vfiprintf_r+0x94a>
   25b92:	9906      	ldr	r1, [sp, #24]
   25b94:	aa1a      	add	r2, sp, #104	@ 0x68
   25b96:	4658      	mov	r0, fp
   25b98:	f7ff fb28 	bl	251ec <__sprint_r.part.0>
   25b9c:	2800      	cmp	r0, #0
   25b9e:	f47f acb8 	bne.w	25512 <_vfiprintf_r+0x2ae>
   25ba2:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
   25ba6:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25baa:	1c51      	adds	r1, r2, #1
   25bac:	e4fa      	b.n	255a4 <_vfiprintf_r+0x340>
   25bae:	f1b8 0f00 	cmp.w	r8, #0
   25bb2:	f000 81c1 	beq.w	25f38 <_vfiprintf_r+0xcd4>
   25bb6:	2302      	movs	r3, #2
   25bb8:	931e      	str	r3, [sp, #120]	@ 0x78
   25bba:	469c      	mov	ip, r3
   25bbc:	ab13      	add	r3, sp, #76	@ 0x4c
   25bbe:	931d      	str	r3, [sp, #116]	@ 0x74
   25bc0:	2101      	movs	r1, #1
   25bc2:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25bc6:	460a      	mov	r2, r1
   25bc8:	f109 0908 	add.w	r9, r9, #8
   25bcc:	3101      	adds	r1, #1
   25bce:	e50a      	b.n	255e6 <_vfiprintf_r+0x382>
   25bd0:	0003faa4 	.word	0x0003faa4
   25bd4:	1000c3d0 	.word	0x1000c3d0
   25bd8:	00047340 	.word	0x00047340
   25bdc:	9102      	str	r1, [sp, #8]
   25bde:	980d      	ldr	r0, [sp, #52]	@ 0x34
   25be0:	ac46      	add	r4, sp, #280	@ 0x118
   25be2:	f003 010f 	and.w	r1, r3, #15
   25be6:	091b      	lsrs	r3, r3, #4
   25be8:	5c41      	ldrb	r1, [r0, r1]
   25bea:	f804 1d01 	strb.w	r1, [r4, #-1]!
   25bee:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   25bf2:	0912      	lsrs	r2, r2, #4
   25bf4:	ea53 0102 	orrs.w	r1, r3, r2
   25bf8:	d1f3      	bne.n	25be2 <_vfiprintf_r+0x97e>
   25bfa:	9a04      	ldr	r2, [sp, #16]
   25bfc:	ab46      	add	r3, sp, #280	@ 0x118
   25bfe:	1b1b      	subs	r3, r3, r4
   25c00:	429a      	cmp	r2, r3
   25c02:	bfb8      	it	lt
   25c04:	461a      	movlt	r2, r3
   25c06:	9309      	str	r3, [sp, #36]	@ 0x24
   25c08:	9203      	str	r2, [sp, #12]
   25c0a:	e6f5      	b.n	259f8 <_vfiprintf_r+0x794>
   25c0c:	2d10      	cmp	r5, #16
   25c0e:	f340 82d8 	ble.w	261c2 <_vfiprintf_r+0xf5e>
   25c12:	4649      	mov	r1, r9
   25c14:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
   25c18:	46a1      	mov	r9, r4
   25c1a:	4ebb      	ldr	r6, [pc, #748]	@ (25f08 <_vfiprintf_r+0xca4>)
   25c1c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   25c20:	2310      	movs	r3, #16
   25c22:	4664      	mov	r4, ip
   25c24:	e007      	b.n	25c36 <_vfiprintf_r+0x9d2>
   25c26:	f102 0e02 	add.w	lr, r2, #2
   25c2a:	3108      	adds	r1, #8
   25c2c:	4602      	mov	r2, r0
   25c2e:	3d10      	subs	r5, #16
   25c30:	2d10      	cmp	r5, #16
   25c32:	dd1a      	ble.n	25c6a <_vfiprintf_r+0xa06>
   25c34:	1c50      	adds	r0, r2, #1
   25c36:	3410      	adds	r4, #16
   25c38:	2807      	cmp	r0, #7
   25c3a:	e9c1 6300 	strd	r6, r3, [r1]
   25c3e:	e9cd 041b 	strd	r0, r4, [sp, #108]	@ 0x6c
   25c42:	ddf0      	ble.n	25c26 <_vfiprintf_r+0x9c2>
   25c44:	aa1a      	add	r2, sp, #104	@ 0x68
   25c46:	4641      	mov	r1, r8
   25c48:	4658      	mov	r0, fp
   25c4a:	b324      	cbz	r4, 25c96 <_vfiprintf_r+0xa32>
   25c4c:	f7ff face 	bl	251ec <__sprint_r.part.0>
   25c50:	2800      	cmp	r0, #0
   25c52:	f47f ac5e 	bne.w	25512 <_vfiprintf_r+0x2ae>
   25c56:	e9dd 241b 	ldrd	r2, r4, [sp, #108]	@ 0x6c
   25c5a:	3d10      	subs	r5, #16
   25c5c:	2d10      	cmp	r5, #16
   25c5e:	f102 0e01 	add.w	lr, r2, #1
   25c62:	a91d      	add	r1, sp, #116	@ 0x74
   25c64:	f04f 0310 	mov.w	r3, #16
   25c68:	dce4      	bgt.n	25c34 <_vfiprintf_r+0x9d0>
   25c6a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
   25c6e:	46a4      	mov	ip, r4
   25c70:	464c      	mov	r4, r9
   25c72:	4689      	mov	r9, r1
   25c74:	44ac      	add	ip, r5
   25c76:	f1be 0f07 	cmp.w	lr, #7
   25c7a:	e9cd ec1b 	strd	lr, ip, [sp, #108]	@ 0x6c
   25c7e:	f8c9 6000 	str.w	r6, [r9]
   25c82:	f8c9 5004 	str.w	r5, [r9, #4]
   25c86:	f300 80fa 	bgt.w	25e7e <_vfiprintf_r+0xc1a>
   25c8a:	f109 0908 	add.w	r9, r9, #8
   25c8e:	f10e 0101 	add.w	r1, lr, #1
   25c92:	4672      	mov	r2, lr
   25c94:	e471      	b.n	2557a <_vfiprintf_r+0x316>
   25c96:	4622      	mov	r2, r4
   25c98:	f04f 0e01 	mov.w	lr, #1
   25c9c:	a91d      	add	r1, sp, #116	@ 0x74
   25c9e:	e7c6      	b.n	25c2e <_vfiprintf_r+0x9ca>
   25ca0:	9a02      	ldr	r2, [sp, #8]
   25ca2:	931b      	str	r3, [sp, #108]	@ 0x6c
   25ca4:	0754      	lsls	r4, r2, #29
   25ca6:	d548      	bpl.n	25d3a <_vfiprintf_r+0xad6>
   25ca8:	9a08      	ldr	r2, [sp, #32]
   25caa:	9903      	ldr	r1, [sp, #12]
   25cac:	1a54      	subs	r4, r2, r1
   25cae:	2c00      	cmp	r4, #0
   25cb0:	dd43      	ble.n	25d3a <_vfiprintf_r+0xad6>
   25cb2:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25cb6:	2c10      	cmp	r4, #16
   25cb8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
   25cba:	f340 8296 	ble.w	261ea <_vfiprintf_r+0xf86>
   25cbe:	4e92      	ldr	r6, [pc, #584]	@ (25f08 <_vfiprintf_r+0xca4>)
   25cc0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   25cc4:	2510      	movs	r5, #16
   25cc6:	e006      	b.n	25cd6 <_vfiprintf_r+0xa72>
   25cc8:	1c88      	adds	r0, r1, #2
   25cca:	f109 0908 	add.w	r9, r9, #8
   25cce:	4611      	mov	r1, r2
   25cd0:	3c10      	subs	r4, #16
   25cd2:	2c10      	cmp	r4, #16
   25cd4:	dd19      	ble.n	25d0a <_vfiprintf_r+0xaa6>
   25cd6:	1c4a      	adds	r2, r1, #1
   25cd8:	3310      	adds	r3, #16
   25cda:	2a07      	cmp	r2, #7
   25cdc:	e9c9 6500 	strd	r6, r5, [r9]
   25ce0:	e9cd 231b 	strd	r2, r3, [sp, #108]	@ 0x6c
   25ce4:	ddf0      	ble.n	25cc8 <_vfiprintf_r+0xa64>
   25ce6:	aa1a      	add	r2, sp, #104	@ 0x68
   25ce8:	b313      	cbz	r3, 25d30 <_vfiprintf_r+0xacc>
   25cea:	4641      	mov	r1, r8
   25cec:	4658      	mov	r0, fp
   25cee:	f7ff fa7d 	bl	251ec <__sprint_r.part.0>
   25cf2:	2800      	cmp	r0, #0
   25cf4:	f47f ac0d 	bne.w	25512 <_vfiprintf_r+0x2ae>
   25cf8:	e9dd 131b 	ldrd	r1, r3, [sp, #108]	@ 0x6c
   25cfc:	3c10      	subs	r4, #16
   25cfe:	2c10      	cmp	r4, #16
   25d00:	f101 0001 	add.w	r0, r1, #1
   25d04:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25d08:	dce5      	bgt.n	25cd6 <_vfiprintf_r+0xa72>
   25d0a:	4423      	add	r3, r4
   25d0c:	2807      	cmp	r0, #7
   25d0e:	e9c9 6400 	strd	r6, r4, [r9]
   25d12:	e9cd 031b 	strd	r0, r3, [sp, #108]	@ 0x6c
   25d16:	f77f ac93 	ble.w	25640 <_vfiprintf_r+0x3dc>
   25d1a:	b173      	cbz	r3, 25d3a <_vfiprintf_r+0xad6>
   25d1c:	9906      	ldr	r1, [sp, #24]
   25d1e:	aa1a      	add	r2, sp, #104	@ 0x68
   25d20:	4658      	mov	r0, fp
   25d22:	f7ff fa63 	bl	251ec <__sprint_r.part.0>
   25d26:	2800      	cmp	r0, #0
   25d28:	f47f abf3 	bne.w	25512 <_vfiprintf_r+0x2ae>
   25d2c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   25d2e:	e487      	b.n	25640 <_vfiprintf_r+0x3dc>
   25d30:	2001      	movs	r0, #1
   25d32:	4619      	mov	r1, r3
   25d34:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25d38:	e7ca      	b.n	25cd0 <_vfiprintf_r+0xa6c>
   25d3a:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   25d3e:	9903      	ldr	r1, [sp, #12]
   25d40:	428a      	cmp	r2, r1
   25d42:	bfac      	ite	ge
   25d44:	189b      	addge	r3, r3, r2
   25d46:	185b      	addlt	r3, r3, r1
   25d48:	9307      	str	r3, [sp, #28]
   25d4a:	e484      	b.n	25656 <_vfiprintf_r+0x3f2>
   25d4c:	f1bc 0f00 	cmp.w	ip, #0
   25d50:	f43f ae67 	beq.w	25a22 <_vfiprintf_r+0x7be>
   25d54:	9906      	ldr	r1, [sp, #24]
   25d56:	aa1a      	add	r2, sp, #104	@ 0x68
   25d58:	4658      	mov	r0, fp
   25d5a:	f7ff fa47 	bl	251ec <__sprint_r.part.0>
   25d5e:	2800      	cmp	r0, #0
   25d60:	f47f abd7 	bne.w	25512 <_vfiprintf_r+0x2ae>
   25d64:	991b      	ldr	r1, [sp, #108]	@ 0x6c
   25d66:	f8dd c070 	ldr.w	ip, [sp, #112]	@ 0x70
   25d6a:	3101      	adds	r1, #1
   25d6c:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25d70:	e443      	b.n	255fa <_vfiprintf_r+0x396>
   25d72:	921b      	str	r2, [sp, #108]	@ 0x6c
   25d74:	f7ff bbc2 	b.w	254fc <_vfiprintf_r+0x298>
   25d78:	980a      	ldr	r0, [sp, #40]	@ 0x28
   25d7a:	f011 0410 	ands.w	r4, r1, #16
   25d7e:	f850 3b04 	ldr.w	r3, [r0], #4
   25d82:	f040 80ae 	bne.w	25ee2 <_vfiprintf_r+0xc7e>
   25d86:	f011 0540 	ands.w	r5, r1, #64	@ 0x40
   25d8a:	f000 80a6 	beq.w	25eda <_vfiprintf_r+0xc76>
   25d8e:	b29b      	uxth	r3, r3
   25d90:	4622      	mov	r2, r4
   25d92:	900a      	str	r0, [sp, #40]	@ 0x28
   25d94:	e507      	b.n	257a6 <_vfiprintf_r+0x542>
   25d96:	980a      	ldr	r0, [sp, #40]	@ 0x28
   25d98:	f012 0410 	ands.w	r4, r2, #16
   25d9c:	f850 3b04 	ldr.w	r3, [r0], #4
   25da0:	d105      	bne.n	25dae <_vfiprintf_r+0xb4a>
   25da2:	f012 0540 	ands.w	r5, r2, #64	@ 0x40
   25da6:	f000 8177 	beq.w	26098 <_vfiprintf_r+0xe34>
   25daa:	b29b      	uxth	r3, r3
   25dac:	4621      	mov	r1, r4
   25dae:	900a      	str	r0, [sp, #40]	@ 0x28
   25db0:	2000      	movs	r0, #0
   25db2:	f88d 004b 	strb.w	r0, [sp, #75]	@ 0x4b
   25db6:	9804      	ldr	r0, [sp, #16]
   25db8:	2800      	cmp	r0, #0
   25dba:	f6bf ad4e 	bge.w	2585a <_vfiprintf_r+0x5f6>
   25dbe:	2b0a      	cmp	r3, #10
   25dc0:	9202      	str	r2, [sp, #8]
   25dc2:	f171 0200 	sbcs.w	r2, r1, #0
   25dc6:	f4ff ae0a 	bcc.w	259de <_vfiprintf_r+0x77a>
   25dca:	9a02      	ldr	r2, [sp, #8]
   25dcc:	f8cd 900c 	str.w	r9, [sp, #12]
   25dd0:	ac46      	add	r4, sp, #280	@ 0x118
   25dd2:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
   25dd6:	46a1      	mov	r9, r4
   25dd8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
   25ddc:	4e4b      	ldr	r6, [pc, #300]	@ (25f0c <_vfiprintf_r+0xca8>)
   25dde:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
   25de2:	f04f 0c00 	mov.w	ip, #0
   25de6:	4614      	mov	r4, r2
   25de8:	e005      	b.n	25df6 <_vfiprintf_r+0xb92>
   25dea:	2b0a      	cmp	r3, #10
   25dec:	f171 0100 	sbcs.w	r1, r1, #0
   25df0:	d337      	bcc.n	25e62 <_vfiprintf_r+0xbfe>
   25df2:	4643      	mov	r3, r8
   25df4:	4629      	mov	r1, r5
   25df6:	185a      	adds	r2, r3, r1
   25df8:	f142 0200 	adc.w	r2, r2, #0
   25dfc:	fba6 0502 	umull	r0, r5, r6, r2
   25e00:	f025 0003 	bic.w	r0, r5, #3
   25e04:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   25e08:	1a12      	subs	r2, r2, r0
   25e0a:	1a98      	subs	r0, r3, r2
   25e0c:	f04f 35cc 	mov.w	r5, #3435973836	@ 0xcccccccc
   25e10:	f161 0e00 	sbc.w	lr, r1, #0
   25e14:	fb05 f500 	mul.w	r5, r5, r0
   25e18:	fb06 550e 	mla	r5, r6, lr, r5
   25e1c:	fba0 8006 	umull	r8, r0, r0, r6
   25e20:	4405      	add	r5, r0
   25e22:	f008 0e01 	and.w	lr, r8, #1
   25e26:	2005      	movs	r0, #5
   25e28:	fbae 0e00 	umull	r0, lr, lr, r0
   25e2c:	1880      	adds	r0, r0, r2
   25e2e:	ea4f 0858 	mov.w	r8, r8, lsr #1
   25e32:	3030      	adds	r0, #48	@ 0x30
   25e34:	f809 0c01 	strb.w	r0, [r9, #-1]
   25e38:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
   25e3c:	f10c 0c01 	add.w	ip, ip, #1
   25e40:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
   25e44:	086d      	lsrs	r5, r5, #1
   25e46:	2c00      	cmp	r4, #0
   25e48:	d0cf      	beq.n	25dea <_vfiprintf_r+0xb86>
   25e4a:	f89b 2000 	ldrb.w	r2, [fp]
   25e4e:	4562      	cmp	r2, ip
   25e50:	d1cb      	bne.n	25dea <_vfiprintf_r+0xb86>
   25e52:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
   25e56:	d0c8      	beq.n	25dea <_vfiprintf_r+0xb86>
   25e58:	2b0a      	cmp	r3, #10
   25e5a:	f171 0100 	sbcs.w	r1, r1, #0
   25e5e:	f080 815c 	bcs.w	2611a <_vfiprintf_r+0xeb6>
   25e62:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
   25e66:	464c      	mov	r4, r9
   25e68:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
   25e6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
   25e70:	e6c3      	b.n	25bfa <_vfiprintf_r+0x996>
   25e72:	2101      	movs	r1, #1
   25e74:	4662      	mov	r2, ip
   25e76:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25e7a:	f7ff bbb4 	b.w	255e6 <_vfiprintf_r+0x382>
   25e7e:	f1bc 0f00 	cmp.w	ip, #0
   25e82:	f000 8097 	beq.w	25fb4 <_vfiprintf_r+0xd50>
   25e86:	9906      	ldr	r1, [sp, #24]
   25e88:	aa1a      	add	r2, sp, #104	@ 0x68
   25e8a:	4658      	mov	r0, fp
   25e8c:	f7ff f9ae 	bl	251ec <__sprint_r.part.0>
   25e90:	2800      	cmp	r0, #0
   25e92:	f47f ab3e 	bne.w	25512 <_vfiprintf_r+0x2ae>
   25e96:	e9dd 2c1b 	ldrd	r2, ip, [sp, #108]	@ 0x6c
   25e9a:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25e9e:	1c51      	adds	r1, r2, #1
   25ea0:	f7ff bb6b 	b.w	2557a <_vfiprintf_r+0x316>
   25ea4:	9b04      	ldr	r3, [sp, #16]
   25ea6:	9303      	str	r3, [sp, #12]
   25ea8:	9309      	str	r3, [sp, #36]	@ 0x24
   25eaa:	ac46      	add	r4, sp, #280	@ 0x118
   25eac:	e5a4      	b.n	259f8 <_vfiprintf_r+0x794>
   25eae:	7821      	ldrb	r1, [r4, #0]
   25eb0:	930a      	str	r3, [sp, #40]	@ 0x28
   25eb2:	f7ff ba3f 	b.w	25334 <_vfiprintf_r+0xd0>
   25eb6:	9b04      	ldr	r3, [sp, #16]
   25eb8:	9303      	str	r3, [sp, #12]
   25eba:	ac46      	add	r4, sp, #280	@ 0x118
   25ebc:	e59c      	b.n	259f8 <_vfiprintf_r+0x794>
   25ebe:	9d06      	ldr	r5, [sp, #24]
   25ec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
   25ec2:	f001 f84b 	bl	26f5c <__retarget_lock_acquire_recursive>
   25ec6:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   25eca:	f7ff b9ea 	b.w	252a2 <_vfiprintf_r+0x3e>
   25ece:	f109 0908 	add.w	r9, r9, #8
   25ed2:	1c41      	adds	r1, r0, #1
   25ed4:	4602      	mov	r2, r0
   25ed6:	f7ff bb8a 	b.w	255ee <_vfiprintf_r+0x38a>
   25eda:	f411 7200 	ands.w	r2, r1, #512	@ 0x200
   25ede:	f040 8144 	bne.w	2616a <_vfiprintf_r+0xf06>
   25ee2:	900a      	str	r0, [sp, #40]	@ 0x28
   25ee4:	e45f      	b.n	257a6 <_vfiprintf_r+0x542>
   25ee6:	9b02      	ldr	r3, [sp, #8]
   25ee8:	06d8      	lsls	r0, r3, #27
   25eea:	f100 80c6 	bmi.w	2607a <_vfiprintf_r+0xe16>
   25eee:	9b02      	ldr	r3, [sp, #8]
   25ef0:	0659      	lsls	r1, r3, #25
   25ef2:	f100 8145 	bmi.w	26180 <_vfiprintf_r+0xf1c>
   25ef6:	9b02      	ldr	r3, [sp, #8]
   25ef8:	059a      	lsls	r2, r3, #22
   25efa:	f140 80be 	bpl.w	2607a <_vfiprintf_r+0xe16>
   25efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25f00:	9a07      	ldr	r2, [sp, #28]
   25f02:	681b      	ldr	r3, [r3, #0]
   25f04:	701a      	strb	r2, [r3, #0]
   25f06:	e514      	b.n	25932 <_vfiprintf_r+0x6ce>
   25f08:	00047350 	.word	0x00047350
   25f0c:	cccccccd 	.word	0xcccccccd
   25f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   25f12:	7821      	ldrb	r1, [r4, #0]
   25f14:	2b00      	cmp	r3, #0
   25f16:	f43f aa0d 	beq.w	25334 <_vfiprintf_r+0xd0>
   25f1a:	781b      	ldrb	r3, [r3, #0]
   25f1c:	2b00      	cmp	r3, #0
   25f1e:	f43f aa09 	beq.w	25334 <_vfiprintf_r+0xd0>
   25f22:	9b02      	ldr	r3, [sp, #8]
   25f24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
   25f28:	9302      	str	r3, [sp, #8]
   25f2a:	f7ff ba03 	b.w	25334 <_vfiprintf_r+0xd0>
   25f2e:	17d9      	asrs	r1, r3, #31
   25f30:	920a      	str	r2, [sp, #40]	@ 0x28
   25f32:	460a      	mov	r2, r1
   25f34:	f7ff bbfe 	b.w	25734 <_vfiprintf_r+0x4d0>
   25f38:	4662      	mov	r2, ip
   25f3a:	2101      	movs	r1, #1
   25f3c:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25f40:	f7ff bb51 	b.w	255e6 <_vfiprintf_r+0x382>
   25f44:	9a02      	ldr	r2, [sp, #8]
   25f46:	9405      	str	r4, [sp, #20]
   25f48:	e473      	b.n	25832 <_vfiprintf_r+0x5ce>
   25f4a:	4ba9      	ldr	r3, [pc, #676]	@ (261f0 <_vfiprintf_r+0xf8c>)
   25f4c:	9405      	str	r4, [sp, #20]
   25f4e:	930d      	str	r3, [sp, #52]	@ 0x34
   25f50:	9b02      	ldr	r3, [sp, #8]
   25f52:	f013 0220 	ands.w	r2, r3, #32
   25f56:	d064      	beq.n	26022 <_vfiprintf_r+0xdbe>
   25f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25f5a:	3307      	adds	r3, #7
   25f5c:	f023 0307 	bic.w	r3, r3, #7
   25f60:	4618      	mov	r0, r3
   25f62:	685a      	ldr	r2, [r3, #4]
   25f64:	f850 3b08 	ldr.w	r3, [r0], #8
   25f68:	900a      	str	r0, [sp, #40]	@ 0x28
   25f6a:	9c02      	ldr	r4, [sp, #8]
   25f6c:	07e6      	lsls	r6, r4, #31
   25f6e:	d50a      	bpl.n	25f86 <_vfiprintf_r+0xd22>
   25f70:	ea53 0002 	orrs.w	r0, r3, r2
   25f74:	d007      	beq.n	25f86 <_vfiprintf_r+0xd22>
   25f76:	f88d 104d 	strb.w	r1, [sp, #77]	@ 0x4d
   25f7a:	f044 0102 	orr.w	r1, r4, #2
   25f7e:	9102      	str	r1, [sp, #8]
   25f80:	2130      	movs	r1, #48	@ 0x30
   25f82:	f88d 104c 	strb.w	r1, [sp, #76]	@ 0x4c
   25f86:	9902      	ldr	r1, [sp, #8]
   25f88:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
   25f8c:	9102      	str	r1, [sp, #8]
   25f8e:	e4b3      	b.n	258f8 <_vfiprintf_r+0x694>
   25f90:	9902      	ldr	r1, [sp, #8]
   25f92:	9405      	str	r4, [sp, #20]
   25f94:	f7ff bbfa 	b.w	2578c <_vfiprintf_r+0x528>
   25f98:	4b96      	ldr	r3, [pc, #600]	@ (261f4 <_vfiprintf_r+0xf90>)
   25f9a:	9405      	str	r4, [sp, #20]
   25f9c:	930d      	str	r3, [sp, #52]	@ 0x34
   25f9e:	e7d7      	b.n	25f50 <_vfiprintf_r+0xcec>
   25fa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   25fa2:	681b      	ldr	r3, [r3, #0]
   25fa4:	f88d 30b4 	strb.w	r3, [sp, #180]	@ 0xb4
   25fa8:	2301      	movs	r3, #1
   25faa:	9303      	str	r3, [sp, #12]
   25fac:	9309      	str	r3, [sp, #36]	@ 0x24
   25fae:	ac2d      	add	r4, sp, #180	@ 0xb4
   25fb0:	f7ff bbad 	b.w	2570e <_vfiprintf_r+0x4aa>
   25fb4:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   25fb8:	2b00      	cmp	r3, #0
   25fba:	f000 80db 	beq.w	26174 <_vfiprintf_r+0xf10>
   25fbe:	2101      	movs	r1, #1
   25fc0:	f10d 034b 	add.w	r3, sp, #75	@ 0x4b
   25fc4:	911e      	str	r1, [sp, #120]	@ 0x78
   25fc6:	931d      	str	r3, [sp, #116]	@ 0x74
   25fc8:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   25fcc:	468c      	mov	ip, r1
   25fce:	f7ff bae5 	b.w	2559c <_vfiprintf_r+0x338>
   25fd2:	2208      	movs	r2, #8
   25fd4:	2100      	movs	r1, #0
   25fd6:	a818      	add	r0, sp, #96	@ 0x60
   25fd8:	9415      	str	r4, [sp, #84]	@ 0x54
   25fda:	f000 fe73 	bl	26cc4 <memset>
   25fde:	9b04      	ldr	r3, [sp, #16]
   25fe0:	2b00      	cmp	r3, #0
   25fe2:	db6d      	blt.n	260c0 <_vfiprintf_r+0xe5c>
   25fe4:	2500      	movs	r5, #0
   25fe6:	f8cd 900c 	str.w	r9, [sp, #12]
   25fea:	46a8      	mov	r8, r5
   25fec:	4699      	mov	r9, r3
   25fee:	e00e      	b.n	2600e <_vfiprintf_r+0xdaa>
   25ff0:	a92d      	add	r1, sp, #180	@ 0xb4
   25ff2:	4658      	mov	r0, fp
   25ff4:	f000 ffb6 	bl	26f64 <_wcrtomb_r>
   25ff8:	1c43      	adds	r3, r0, #1
   25ffa:	4440      	add	r0, r8
   25ffc:	f000 8100 	beq.w	26200 <_vfiprintf_r+0xf9c>
   26000:	4548      	cmp	r0, r9
   26002:	dc09      	bgt.n	26018 <_vfiprintf_r+0xdb4>
   26004:	f105 0504 	add.w	r5, r5, #4
   26008:	f000 8117 	beq.w	2623a <_vfiprintf_r+0xfd6>
   2600c:	4680      	mov	r8, r0
   2600e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
   26010:	5952      	ldr	r2, [r2, r5]
   26012:	ab18      	add	r3, sp, #96	@ 0x60
   26014:	2a00      	cmp	r2, #0
   26016:	d1eb      	bne.n	25ff0 <_vfiprintf_r+0xd8c>
   26018:	f8dd 900c 	ldr.w	r9, [sp, #12]
   2601c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
   26020:	e05c      	b.n	260dc <_vfiprintf_r+0xe78>
   26022:	9c02      	ldr	r4, [sp, #8]
   26024:	980a      	ldr	r0, [sp, #40]	@ 0x28
   26026:	f014 0410 	ands.w	r4, r4, #16
   2602a:	f850 3b04 	ldr.w	r3, [r0], #4
   2602e:	d10d      	bne.n	2604c <_vfiprintf_r+0xde8>
   26030:	9a02      	ldr	r2, [sp, #8]
   26032:	f012 0240 	ands.w	r2, r2, #64	@ 0x40
   26036:	d003      	beq.n	26040 <_vfiprintf_r+0xddc>
   26038:	b29b      	uxth	r3, r3
   2603a:	4622      	mov	r2, r4
   2603c:	900a      	str	r0, [sp, #40]	@ 0x28
   2603e:	e794      	b.n	25f6a <_vfiprintf_r+0xd06>
   26040:	9c02      	ldr	r4, [sp, #8]
   26042:	f414 7400 	ands.w	r4, r4, #512	@ 0x200
   26046:	f040 808d 	bne.w	26164 <_vfiprintf_r+0xf00>
   2604a:	4622      	mov	r2, r4
   2604c:	900a      	str	r0, [sp, #40]	@ 0x28
   2604e:	e78c      	b.n	25f6a <_vfiprintf_r+0xd06>
   26050:	9102      	str	r1, [sp, #8]
   26052:	e415      	b.n	25880 <_vfiprintf_r+0x61c>
   26054:	4658      	mov	r0, fp
   26056:	f000 fab3 	bl	265c0 <__sinit>
   2605a:	f7ff b919 	b.w	25290 <_vfiprintf_r+0x2c>
   2605e:	f043 0320 	orr.w	r3, r3, #32
   26062:	7861      	ldrb	r1, [r4, #1]
   26064:	9302      	str	r3, [sp, #8]
   26066:	3401      	adds	r4, #1
   26068:	f7ff b964 	b.w	25334 <_vfiprintf_r+0xd0>
   2606c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
   26070:	7861      	ldrb	r1, [r4, #1]
   26072:	9302      	str	r3, [sp, #8]
   26074:	3401      	adds	r4, #1
   26076:	f7ff b95d 	b.w	25334 <_vfiprintf_r+0xd0>
   2607a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2607c:	9a07      	ldr	r2, [sp, #28]
   2607e:	681b      	ldr	r3, [r3, #0]
   26080:	601a      	str	r2, [r3, #0]
   26082:	e456      	b.n	25932 <_vfiprintf_r+0x6ce>
   26084:	9b04      	ldr	r3, [sp, #16]
   26086:	4c5c      	ldr	r4, [pc, #368]	@ (261f8 <_vfiprintf_r+0xf94>)
   26088:	2b06      	cmp	r3, #6
   2608a:	bf28      	it	cs
   2608c:	2306      	movcs	r3, #6
   2608e:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
   26092:	9303      	str	r3, [sp, #12]
   26094:	f7ff ba5e 	b.w	25554 <_vfiprintf_r+0x2f0>
   26098:	f412 7100 	ands.w	r1, r2, #512	@ 0x200
   2609c:	f43f ae87 	beq.w	25dae <_vfiprintf_r+0xb4a>
   260a0:	b2db      	uxtb	r3, r3
   260a2:	4629      	mov	r1, r5
   260a4:	900a      	str	r0, [sp, #40]	@ 0x28
   260a6:	f7ff bbd1 	b.w	2584c <_vfiprintf_r+0x5e8>
   260aa:	9902      	ldr	r1, [sp, #8]
   260ac:	920a      	str	r2, [sp, #40]	@ 0x28
   260ae:	058d      	lsls	r5, r1, #22
   260b0:	bf4a      	itet	mi
   260b2:	f343 11c0 	sbfxmi	r1, r3, #7, #1
   260b6:	17d9      	asrpl	r1, r3, #31
   260b8:	b25b      	sxtbmi	r3, r3
   260ba:	460a      	mov	r2, r1
   260bc:	f7ff bb3a 	b.w	25734 <_vfiprintf_r+0x4d0>
   260c0:	ab18      	add	r3, sp, #96	@ 0x60
   260c2:	9300      	str	r3, [sp, #0]
   260c4:	2300      	movs	r3, #0
   260c6:	4619      	mov	r1, r3
   260c8:	aa15      	add	r2, sp, #84	@ 0x54
   260ca:	4658      	mov	r0, fp
   260cc:	f000 ff70 	bl	26fb0 <_wcsrtombs_r>
   260d0:	4603      	mov	r3, r0
   260d2:	3301      	adds	r3, #1
   260d4:	9009      	str	r0, [sp, #36]	@ 0x24
   260d6:	f000 8093 	beq.w	26200 <_vfiprintf_r+0xf9c>
   260da:	9415      	str	r4, [sp, #84]	@ 0x54
   260dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   260de:	b363      	cbz	r3, 2613a <_vfiprintf_r+0xed6>
   260e0:	2b63      	cmp	r3, #99	@ 0x63
   260e2:	dc53      	bgt.n	2618c <_vfiprintf_r+0xf28>
   260e4:	2300      	movs	r3, #0
   260e6:	930b      	str	r3, [sp, #44]	@ 0x2c
   260e8:	ac2d      	add	r4, sp, #180	@ 0xb4
   260ea:	2208      	movs	r2, #8
   260ec:	2100      	movs	r1, #0
   260ee:	a818      	add	r0, sp, #96	@ 0x60
   260f0:	f000 fde8 	bl	26cc4 <memset>
   260f4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   260f6:	ab18      	add	r3, sp, #96	@ 0x60
   260f8:	9300      	str	r3, [sp, #0]
   260fa:	aa15      	add	r2, sp, #84	@ 0x54
   260fc:	462b      	mov	r3, r5
   260fe:	4621      	mov	r1, r4
   26100:	4658      	mov	r0, fp
   26102:	f000 ff55 	bl	26fb0 <_wcsrtombs_r>
   26106:	4285      	cmp	r5, r0
   26108:	f040 80a6 	bne.w	26258 <_vfiprintf_r+0xff4>
   2610c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   2610e:	2300      	movs	r3, #0
   26110:	54a3      	strb	r3, [r4, r2]
   26112:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   26116:	9303      	str	r3, [sp, #12]
   26118:	e012      	b.n	26140 <_vfiprintf_r+0xedc>
   2611a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   2611c:	9910      	ldr	r1, [sp, #64]	@ 0x40
   2611e:	eba9 0903 	sub.w	r9, r9, r3
   26122:	461a      	mov	r2, r3
   26124:	4648      	mov	r0, r9
   26126:	f000 fe65 	bl	26df4 <strncpy>
   2612a:	f89b 3001 	ldrb.w	r3, [fp, #1]
   2612e:	b10b      	cbz	r3, 26134 <_vfiprintf_r+0xed0>
   26130:	f10b 0b01 	add.w	fp, fp, #1
   26134:	f04f 0c00 	mov.w	ip, #0
   26138:	e65b      	b.n	25df2 <_vfiprintf_r+0xb8e>
   2613a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2613c:	9303      	str	r3, [sp, #12]
   2613e:	930b      	str	r3, [sp, #44]	@ 0x2c
   26140:	f89d 304b 	ldrb.w	r3, [sp, #75]	@ 0x4b
   26144:	b11b      	cbz	r3, 2614e <_vfiprintf_r+0xeea>
   26146:	2300      	movs	r3, #0
   26148:	960a      	str	r6, [sp, #40]	@ 0x28
   2614a:	9304      	str	r3, [sp, #16]
   2614c:	e45b      	b.n	25a06 <_vfiprintf_r+0x7a2>
   2614e:	9304      	str	r3, [sp, #16]
   26150:	960a      	str	r6, [sp, #40]	@ 0x28
   26152:	4698      	mov	r8, r3
   26154:	f7ff ba02 	b.w	2555c <_vfiprintf_r+0x2f8>
   26158:	2101      	movs	r1, #1
   2615a:	4662      	mov	r2, ip
   2615c:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   26160:	f7ff ba45 	b.w	255ee <_vfiprintf_r+0x38a>
   26164:	b2db      	uxtb	r3, r3
   26166:	900a      	str	r0, [sp, #40]	@ 0x28
   26168:	e6ff      	b.n	25f6a <_vfiprintf_r+0xd06>
   2616a:	b2db      	uxtb	r3, r3
   2616c:	462a      	mov	r2, r5
   2616e:	900a      	str	r0, [sp, #40]	@ 0x28
   26170:	f7ff bb19 	b.w	257a6 <_vfiprintf_r+0x542>
   26174:	4662      	mov	r2, ip
   26176:	2101      	movs	r1, #1
   26178:	f10d 0974 	add.w	r9, sp, #116	@ 0x74
   2617c:	f7ff ba12 	b.w	255a4 <_vfiprintf_r+0x340>
   26180:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   26182:	9a07      	ldr	r2, [sp, #28]
   26184:	681b      	ldr	r3, [r3, #0]
   26186:	801a      	strh	r2, [r3, #0]
   26188:	f7ff bbd3 	b.w	25932 <_vfiprintf_r+0x6ce>
   2618c:	1c59      	adds	r1, r3, #1
   2618e:	4658      	mov	r0, fp
   26190:	f001 f8fc 	bl	2738c <_malloc_r>
   26194:	4604      	mov	r4, r0
   26196:	2800      	cmp	r0, #0
   26198:	d032      	beq.n	26200 <_vfiprintf_r+0xf9c>
   2619a:	900b      	str	r0, [sp, #44]	@ 0x2c
   2619c:	e7a5      	b.n	260ea <_vfiprintf_r+0xe86>
   2619e:	6d88      	ldr	r0, [r1, #88]	@ 0x58
   261a0:	f000 fede 	bl	26f60 <__retarget_lock_release_recursive>
   261a4:	f7ff b96d 	b.w	25482 <_vfiprintf_r+0x21e>
   261a8:	9b04      	ldr	r3, [sp, #16]
   261aa:	9303      	str	r3, [sp, #12]
   261ac:	9309      	str	r3, [sp, #36]	@ 0x24
   261ae:	e7c7      	b.n	26140 <_vfiprintf_r+0xedc>
   261b0:	4620      	mov	r0, r4
   261b2:	f7f2 fa85 	bl	186c0 <strlen>
   261b6:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   261ba:	9009      	str	r0, [sp, #36]	@ 0x24
   261bc:	950b      	str	r5, [sp, #44]	@ 0x2c
   261be:	9303      	str	r3, [sp, #12]
   261c0:	e7be      	b.n	26140 <_vfiprintf_r+0xedc>
   261c2:	4e0e      	ldr	r6, [pc, #56]	@ (261fc <_vfiprintf_r+0xf98>)
   261c4:	4686      	mov	lr, r0
   261c6:	e555      	b.n	25c74 <_vfiprintf_r+0xa10>
   261c8:	2300      	movs	r3, #0
   261ca:	4604      	mov	r4, r0
   261cc:	9304      	str	r3, [sp, #16]
   261ce:	f7ff b8b2 	b.w	25336 <_vfiprintf_r+0xd2>
   261d2:	2330      	movs	r3, #48	@ 0x30
   261d4:	e405      	b.n	259e2 <_vfiprintf_r+0x77e>
   261d6:	9906      	ldr	r1, [sp, #24]
   261d8:	aa1a      	add	r2, sp, #104	@ 0x68
   261da:	4658      	mov	r0, fp
   261dc:	f7ff f806 	bl	251ec <__sprint_r.part.0>
   261e0:	2800      	cmp	r0, #0
   261e2:	f43f a97c 	beq.w	254de <_vfiprintf_r+0x27a>
   261e6:	f7ff b99a 	b.w	2551e <_vfiprintf_r+0x2ba>
   261ea:	4e04      	ldr	r6, [pc, #16]	@ (261fc <_vfiprintf_r+0xf98>)
   261ec:	1c48      	adds	r0, r1, #1
   261ee:	e58c      	b.n	25d0a <_vfiprintf_r+0xaa6>
   261f0:	0003fa90 	.word	0x0003fa90
   261f4:	0003faa4 	.word	0x0003faa4
   261f8:	0003fab8 	.word	0x0003fab8
   261fc:	00047350 	.word	0x00047350
   26200:	9a06      	ldr	r2, [sp, #24]
   26202:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   26206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2620a:	8193      	strh	r3, [r2, #12]
   2620c:	f7ff b98a 	b.w	25524 <_vfiprintf_r+0x2c0>
   26210:	9b06      	ldr	r3, [sp, #24]
   26212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
   26214:	07db      	lsls	r3, r3, #31
   26216:	d407      	bmi.n	26228 <_vfiprintf_r+0xfc4>
   26218:	9b06      	ldr	r3, [sp, #24]
   2621a:	899b      	ldrh	r3, [r3, #12]
   2621c:	059f      	lsls	r7, r3, #22
   2621e:	d403      	bmi.n	26228 <_vfiprintf_r+0xfc4>
   26220:	9b06      	ldr	r3, [sp, #24]
   26222:	6d98      	ldr	r0, [r3, #88]	@ 0x58
   26224:	f000 fe9c 	bl	26f60 <__retarget_lock_release_recursive>
   26228:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   2622c:	9307      	str	r3, [sp, #28]
   2622e:	f7ff b981 	b.w	25534 <_vfiprintf_r+0x2d0>
   26232:	f8df 8034 	ldr.w	r8, [pc, #52]	@ 26268 <_vfiprintf_r+0x1004>
   26236:	4608      	mov	r0, r1
   26238:	e439      	b.n	25aae <_vfiprintf_r+0x84a>
   2623a:	e9dd 9303 	ldrd	r9, r3, [sp, #12]
   2623e:	9309      	str	r3, [sp, #36]	@ 0x24
   26240:	e74c      	b.n	260dc <_vfiprintf_r+0xe78>
   26242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   26244:	7861      	ldrb	r1, [r4, #1]
   26246:	f853 2b04 	ldr.w	r2, [r3], #4
   2624a:	930a      	str	r3, [sp, #40]	@ 0x28
   2624c:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   26250:	4604      	mov	r4, r0
   26252:	9204      	str	r2, [sp, #16]
   26254:	f7ff b86e 	b.w	25334 <_vfiprintf_r+0xd0>
   26258:	9a06      	ldr	r2, [sp, #24]
   2625a:	8993      	ldrh	r3, [r2, #12]
   2625c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26260:	8193      	strh	r3, [r2, #12]
   26262:	f7ff b956 	b.w	25512 <_vfiprintf_r+0x2ae>
   26266:	bf00      	nop
   26268:	00047340 	.word	0x00047340

0002626c <__sbprintf>:
   2626c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2626e:	461f      	mov	r7, r3
   26270:	898b      	ldrh	r3, [r1, #12]
   26272:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
   26276:	f023 0302 	bic.w	r3, r3, #2
   2627a:	f8ad 300c 	strh.w	r3, [sp, #12]
   2627e:	ab1a      	add	r3, sp, #104	@ 0x68
   26280:	9300      	str	r3, [sp, #0]
   26282:	9304      	str	r3, [sp, #16]
   26284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
   26288:	9302      	str	r3, [sp, #8]
   2628a:	9305      	str	r3, [sp, #20]
   2628c:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
   2628e:	9319      	str	r3, [sp, #100]	@ 0x64
   26290:	89cb      	ldrh	r3, [r1, #14]
   26292:	f8ad 300e 	strh.w	r3, [sp, #14]
   26296:	69cb      	ldr	r3, [r1, #28]
   26298:	9307      	str	r3, [sp, #28]
   2629a:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
   2629c:	9309      	str	r3, [sp, #36]	@ 0x24
   2629e:	4615      	mov	r5, r2
   262a0:	2300      	movs	r3, #0
   262a2:	4606      	mov	r6, r0
   262a4:	a816      	add	r0, sp, #88	@ 0x58
   262a6:	460c      	mov	r4, r1
   262a8:	9306      	str	r3, [sp, #24]
   262aa:	f000 fe53 	bl	26f54 <__retarget_lock_init_recursive>
   262ae:	462a      	mov	r2, r5
   262b0:	463b      	mov	r3, r7
   262b2:	4669      	mov	r1, sp
   262b4:	4630      	mov	r0, r6
   262b6:	f7fe ffd5 	bl	25264 <_vfiprintf_r>
   262ba:	1e05      	subs	r5, r0, #0
   262bc:	db07      	blt.n	262ce <__sbprintf+0x62>
   262be:	4669      	mov	r1, sp
   262c0:	4630      	mov	r0, r6
   262c2:	f000 f8af 	bl	26424 <_fflush_r>
   262c6:	2800      	cmp	r0, #0
   262c8:	bf18      	it	ne
   262ca:	f04f 35ff 	movne.w	r5, #4294967295	@ 0xffffffff
   262ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   262d2:	065b      	lsls	r3, r3, #25
   262d4:	d503      	bpl.n	262de <__sbprintf+0x72>
   262d6:	89a3      	ldrh	r3, [r4, #12]
   262d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   262dc:	81a3      	strh	r3, [r4, #12]
   262de:	9816      	ldr	r0, [sp, #88]	@ 0x58
   262e0:	f000 fe3a 	bl	26f58 <__retarget_lock_close_recursive>
   262e4:	4628      	mov	r0, r5
   262e6:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
   262ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000262ec <__sflush_r>:
   262ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   262f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   262f4:	0716      	lsls	r6, r2, #28
   262f6:	460c      	mov	r4, r1
   262f8:	4680      	mov	r8, r0
   262fa:	d44e      	bmi.n	2639a <__sflush_r+0xae>
   262fc:	6849      	ldr	r1, [r1, #4]
   262fe:	f442 6300 	orr.w	r3, r2, #2048	@ 0x800
   26302:	2900      	cmp	r1, #0
   26304:	81a3      	strh	r3, [r4, #12]
   26306:	dd63      	ble.n	263d0 <__sflush_r+0xe4>
   26308:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
   2630a:	2d00      	cmp	r5, #0
   2630c:	d042      	beq.n	26394 <__sflush_r+0xa8>
   2630e:	2100      	movs	r1, #0
   26310:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
   26314:	f8d8 6000 	ldr.w	r6, [r8]
   26318:	f8c8 1000 	str.w	r1, [r8]
   2631c:	69e1      	ldr	r1, [r4, #28]
   2631e:	d164      	bne.n	263ea <__sflush_r+0xfe>
   26320:	2301      	movs	r3, #1
   26322:	4640      	mov	r0, r8
   26324:	47a8      	blx	r5
   26326:	1c45      	adds	r5, r0, #1
   26328:	4602      	mov	r2, r0
   2632a:	d06e      	beq.n	2640a <__sflush_r+0x11e>
   2632c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26330:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
   26332:	69e1      	ldr	r1, [r4, #28]
   26334:	0758      	lsls	r0, r3, #29
   26336:	d505      	bpl.n	26344 <__sflush_r+0x58>
   26338:	6863      	ldr	r3, [r4, #4]
   2633a:	1ad2      	subs	r2, r2, r3
   2633c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
   2633e:	b10b      	cbz	r3, 26344 <__sflush_r+0x58>
   26340:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
   26342:	1ad2      	subs	r2, r2, r3
   26344:	2300      	movs	r3, #0
   26346:	4640      	mov	r0, r8
   26348:	47a8      	blx	r5
   2634a:	1c43      	adds	r3, r0, #1
   2634c:	d14f      	bne.n	263ee <__sflush_r+0x102>
   2634e:	f8d8 1000 	ldr.w	r1, [r8]
   26352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26356:	291d      	cmp	r1, #29
   26358:	d840      	bhi.n	263dc <__sflush_r+0xf0>
   2635a:	4a31      	ldr	r2, [pc, #196]	@ (26420 <__sflush_r+0x134>)
   2635c:	40ca      	lsrs	r2, r1
   2635e:	07d7      	lsls	r7, r2, #31
   26360:	d53c      	bpl.n	263dc <__sflush_r+0xf0>
   26362:	6922      	ldr	r2, [r4, #16]
   26364:	6022      	str	r2, [r4, #0]
   26366:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
   2636a:	81a2      	strh	r2, [r4, #12]
   2636c:	04dd      	lsls	r5, r3, #19
   2636e:	f04f 0200 	mov.w	r2, #0
   26372:	6062      	str	r2, [r4, #4]
   26374:	d501      	bpl.n	2637a <__sflush_r+0x8e>
   26376:	2900      	cmp	r1, #0
   26378:	d045      	beq.n	26406 <__sflush_r+0x11a>
   2637a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
   2637c:	f8c8 6000 	str.w	r6, [r8]
   26380:	b141      	cbz	r1, 26394 <__sflush_r+0xa8>
   26382:	f104 0340 	add.w	r3, r4, #64	@ 0x40
   26386:	4299      	cmp	r1, r3
   26388:	d002      	beq.n	26390 <__sflush_r+0xa4>
   2638a:	4640      	mov	r0, r8
   2638c:	f000 fec2 	bl	27114 <_free_r>
   26390:	2300      	movs	r3, #0
   26392:	6323      	str	r3, [r4, #48]	@ 0x30
   26394:	2000      	movs	r0, #0
   26396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2639a:	690e      	ldr	r6, [r1, #16]
   2639c:	2e00      	cmp	r6, #0
   2639e:	d0f9      	beq.n	26394 <__sflush_r+0xa8>
   263a0:	680d      	ldr	r5, [r1, #0]
   263a2:	600e      	str	r6, [r1, #0]
   263a4:	0792      	lsls	r2, r2, #30
   263a6:	bf0c      	ite	eq
   263a8:	694b      	ldreq	r3, [r1, #20]
   263aa:	2300      	movne	r3, #0
   263ac:	1bad      	subs	r5, r5, r6
   263ae:	608b      	str	r3, [r1, #8]
   263b0:	e00b      	b.n	263ca <__sflush_r+0xde>
   263b2:	462b      	mov	r3, r5
   263b4:	4632      	mov	r2, r6
   263b6:	69e1      	ldr	r1, [r4, #28]
   263b8:	6a67      	ldr	r7, [r4, #36]	@ 0x24
   263ba:	4640      	mov	r0, r8
   263bc:	47b8      	blx	r7
   263be:	f1b0 0c00 	subs.w	ip, r0, #0
   263c2:	eba5 050c 	sub.w	r5, r5, ip
   263c6:	4466      	add	r6, ip
   263c8:	dd06      	ble.n	263d8 <__sflush_r+0xec>
   263ca:	2d00      	cmp	r5, #0
   263cc:	dcf1      	bgt.n	263b2 <__sflush_r+0xc6>
   263ce:	e7e1      	b.n	26394 <__sflush_r+0xa8>
   263d0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
   263d2:	2900      	cmp	r1, #0
   263d4:	dc98      	bgt.n	26308 <__sflush_r+0x1c>
   263d6:	e7dd      	b.n	26394 <__sflush_r+0xa8>
   263d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   263dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   263e0:	81a3      	strh	r3, [r4, #12]
   263e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   263e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   263ea:	6d22      	ldr	r2, [r4, #80]	@ 0x50
   263ec:	e7a2      	b.n	26334 <__sflush_r+0x48>
   263ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   263f2:	6922      	ldr	r2, [r4, #16]
   263f4:	6022      	str	r2, [r4, #0]
   263f6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
   263fa:	81a2      	strh	r2, [r4, #12]
   263fc:	04db      	lsls	r3, r3, #19
   263fe:	f04f 0200 	mov.w	r2, #0
   26402:	6062      	str	r2, [r4, #4]
   26404:	d5b9      	bpl.n	2637a <__sflush_r+0x8e>
   26406:	6520      	str	r0, [r4, #80]	@ 0x50
   26408:	e7b7      	b.n	2637a <__sflush_r+0x8e>
   2640a:	f8d8 3000 	ldr.w	r3, [r8]
   2640e:	2b00      	cmp	r3, #0
   26410:	d08c      	beq.n	2632c <__sflush_r+0x40>
   26412:	2b1d      	cmp	r3, #29
   26414:	d001      	beq.n	2641a <__sflush_r+0x12e>
   26416:	2b16      	cmp	r3, #22
   26418:	d1de      	bne.n	263d8 <__sflush_r+0xec>
   2641a:	f8c8 6000 	str.w	r6, [r8]
   2641e:	e7b9      	b.n	26394 <__sflush_r+0xa8>
   26420:	20400001 	.word	0x20400001

00026424 <_fflush_r>:
   26424:	b538      	push	{r3, r4, r5, lr}
   26426:	460c      	mov	r4, r1
   26428:	4605      	mov	r5, r0
   2642a:	b108      	cbz	r0, 26430 <_fflush_r+0xc>
   2642c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2642e:	b303      	cbz	r3, 26472 <_fflush_r+0x4e>
   26430:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   26434:	b188      	cbz	r0, 2645a <_fflush_r+0x36>
   26436:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   26438:	07db      	lsls	r3, r3, #31
   2643a:	d401      	bmi.n	26440 <_fflush_r+0x1c>
   2643c:	0581      	lsls	r1, r0, #22
   2643e:	d50f      	bpl.n	26460 <_fflush_r+0x3c>
   26440:	4628      	mov	r0, r5
   26442:	4621      	mov	r1, r4
   26444:	f7ff ff52 	bl	262ec <__sflush_r>
   26448:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   2644a:	07da      	lsls	r2, r3, #31
   2644c:	4605      	mov	r5, r0
   2644e:	d402      	bmi.n	26456 <_fflush_r+0x32>
   26450:	89a3      	ldrh	r3, [r4, #12]
   26452:	059b      	lsls	r3, r3, #22
   26454:	d508      	bpl.n	26468 <_fflush_r+0x44>
   26456:	4628      	mov	r0, r5
   26458:	bd38      	pop	{r3, r4, r5, pc}
   2645a:	4605      	mov	r5, r0
   2645c:	4628      	mov	r0, r5
   2645e:	bd38      	pop	{r3, r4, r5, pc}
   26460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   26462:	f000 fd7b 	bl	26f5c <__retarget_lock_acquire_recursive>
   26466:	e7eb      	b.n	26440 <_fflush_r+0x1c>
   26468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   2646a:	f000 fd79 	bl	26f60 <__retarget_lock_release_recursive>
   2646e:	4628      	mov	r0, r5
   26470:	bd38      	pop	{r3, r4, r5, pc}
   26472:	f000 f8a5 	bl	265c0 <__sinit>
   26476:	e7db      	b.n	26430 <_fflush_r+0xc>

00026478 <stdio_exit_handler>:
   26478:	4a02      	ldr	r2, [pc, #8]	@ (26484 <stdio_exit_handler+0xc>)
   2647a:	4903      	ldr	r1, [pc, #12]	@ (26488 <stdio_exit_handler+0x10>)
   2647c:	4803      	ldr	r0, [pc, #12]	@ (2648c <stdio_exit_handler+0x14>)
   2647e:	f000 ba81 	b.w	26984 <_fwalk_sglue>
   26482:	bf00      	nop
   26484:	1000c3c4 	.word	0x1000c3c4
   26488:	00029551 	.word	0x00029551
   2648c:	1000c540 	.word	0x1000c540

00026490 <cleanup_stdio>:
   26490:	4b0c      	ldr	r3, [pc, #48]	@ (264c4 <cleanup_stdio+0x34>)
   26492:	6841      	ldr	r1, [r0, #4]
   26494:	4299      	cmp	r1, r3
   26496:	b510      	push	{r4, lr}
   26498:	4604      	mov	r4, r0
   2649a:	d001      	beq.n	264a0 <cleanup_stdio+0x10>
   2649c:	f003 f858 	bl	29550 <_fclose_r>
   264a0:	68a1      	ldr	r1, [r4, #8]
   264a2:	4b09      	ldr	r3, [pc, #36]	@ (264c8 <cleanup_stdio+0x38>)
   264a4:	4299      	cmp	r1, r3
   264a6:	d002      	beq.n	264ae <cleanup_stdio+0x1e>
   264a8:	4620      	mov	r0, r4
   264aa:	f003 f851 	bl	29550 <_fclose_r>
   264ae:	68e1      	ldr	r1, [r4, #12]
   264b0:	4b06      	ldr	r3, [pc, #24]	@ (264cc <cleanup_stdio+0x3c>)
   264b2:	4299      	cmp	r1, r3
   264b4:	d004      	beq.n	264c0 <cleanup_stdio+0x30>
   264b6:	4620      	mov	r0, r4
   264b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   264bc:	f003 b848 	b.w	29550 <_fclose_r>
   264c0:	bd10      	pop	{r4, pc}
   264c2:	bf00      	nop
   264c4:	10052320 	.word	0x10052320
   264c8:	10052388 	.word	0x10052388
   264cc:	100523f0 	.word	0x100523f0

000264d0 <global_stdio_init.part.0>:
   264d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   264d4:	4a31      	ldr	r2, [pc, #196]	@ (2659c <global_stdio_init.part.0+0xcc>)
   264d6:	4c32      	ldr	r4, [pc, #200]	@ (265a0 <global_stdio_init.part.0+0xd0>)
   264d8:	4932      	ldr	r1, [pc, #200]	@ (265a4 <global_stdio_init.part.0+0xd4>)
   264da:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 265b8 <global_stdio_init.part.0+0xe8>
   264de:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 265bc <global_stdio_init.part.0+0xec>
   264e2:	4f31      	ldr	r7, [pc, #196]	@ (265a8 <global_stdio_init.part.0+0xd8>)
   264e4:	6011      	str	r1, [r2, #0]
   264e6:	2500      	movs	r5, #0
   264e8:	2304      	movs	r3, #4
   264ea:	4629      	mov	r1, r5
   264ec:	2208      	movs	r2, #8
   264ee:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
   264f2:	e9c4 3503 	strd	r3, r5, [r4, #12]
   264f6:	4e2d      	ldr	r6, [pc, #180]	@ (265ac <global_stdio_init.part.0+0xdc>)
   264f8:	60a5      	str	r5, [r4, #8]
   264fa:	e9c4 5500 	strd	r5, r5, [r4]
   264fe:	e9c4 5505 	strd	r5, r5, [r4, #20]
   26502:	6665      	str	r5, [r4, #100]	@ 0x64
   26504:	f000 fbde 	bl	26cc4 <memset>
   26508:	f104 0058 	add.w	r0, r4, #88	@ 0x58
   2650c:	e9c4 4907 	strd	r4, r9, [r4, #28]
   26510:	e9c4 8709 	strd	r8, r7, [r4, #36]	@ 0x24
   26514:	62e6      	str	r6, [r4, #44]	@ 0x2c
   26516:	f000 fd1d 	bl	26f54 <__retarget_lock_init_recursive>
   2651a:	4629      	mov	r1, r5
   2651c:	4b24      	ldr	r3, [pc, #144]	@ (265b0 <global_stdio_init.part.0+0xe0>)
   2651e:	6763      	str	r3, [r4, #116]	@ 0x74
   26520:	2208      	movs	r2, #8
   26522:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
   26526:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
   2652a:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
   2652e:	6725      	str	r5, [r4, #112]	@ 0x70
   26530:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
   26534:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
   26538:	f000 fbc4 	bl	26cc4 <memset>
   2653c:	f104 0368 	add.w	r3, r4, #104	@ 0x68
   26540:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
   26544:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
   26548:	e9c4 9822 	strd	r9, r8, [r4, #136]	@ 0x88
   2654c:	e9c4 7624 	strd	r7, r6, [r4, #144]	@ 0x90
   26550:	f000 fd00 	bl	26f54 <__retarget_lock_init_recursive>
   26554:	4b17      	ldr	r3, [pc, #92]	@ (265b4 <global_stdio_init.part.0+0xe4>)
   26556:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
   2655a:	4629      	mov	r1, r5
   2655c:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
   26560:	2208      	movs	r2, #8
   26562:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
   26566:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
   2656a:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
   2656e:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
   26572:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
   26576:	f000 fba5 	bl	26cc4 <memset>
   2657a:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
   2657e:	e9c4 873d 	strd	r8, r7, [r4, #244]	@ 0xf4
   26582:	f8c4 90f0 	str.w	r9, [r4, #240]	@ 0xf0
   26586:	f504 7094 	add.w	r0, r4, #296	@ 0x128
   2658a:	f8c4 60fc 	str.w	r6, [r4, #252]	@ 0xfc
   2658e:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
   26592:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26596:	f000 bcdd 	b.w	26f54 <__retarget_lock_init_recursive>
   2659a:	bf00      	nop
   2659c:	10052458 	.word	0x10052458
   265a0:	10052320 	.word	0x10052320
   265a4:	00026479 	.word	0x00026479
   265a8:	000299b9 	.word	0x000299b9
   265ac:	000299dd 	.word	0x000299dd
   265b0:	00010009 	.word	0x00010009
   265b4:	00020012 	.word	0x00020012
   265b8:	00029955 	.word	0x00029955
   265bc:	00029979 	.word	0x00029979

000265c0 <__sinit>:
   265c0:	b510      	push	{r4, lr}
   265c2:	4604      	mov	r4, r0
   265c4:	480a      	ldr	r0, [pc, #40]	@ (265f0 <__sinit+0x30>)
   265c6:	f000 fcc9 	bl	26f5c <__retarget_lock_acquire_recursive>
   265ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   265cc:	b923      	cbnz	r3, 265d8 <__sinit+0x18>
   265ce:	4b09      	ldr	r3, [pc, #36]	@ (265f4 <__sinit+0x34>)
   265d0:	4a09      	ldr	r2, [pc, #36]	@ (265f8 <__sinit+0x38>)
   265d2:	681b      	ldr	r3, [r3, #0]
   265d4:	6362      	str	r2, [r4, #52]	@ 0x34
   265d6:	b123      	cbz	r3, 265e2 <__sinit+0x22>
   265d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   265dc:	4804      	ldr	r0, [pc, #16]	@ (265f0 <__sinit+0x30>)
   265de:	f000 bcbf 	b.w	26f60 <__retarget_lock_release_recursive>
   265e2:	f7ff ff75 	bl	264d0 <global_stdio_init.part.0>
   265e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   265ea:	4801      	ldr	r0, [pc, #4]	@ (265f0 <__sinit+0x30>)
   265ec:	f000 bcb8 	b.w	26f60 <__retarget_lock_release_recursive>
   265f0:	10052468 	.word	0x10052468
   265f4:	10052458 	.word	0x10052458
   265f8:	00026491 	.word	0x00026491

000265fc <__sfp_lock_acquire>:
   265fc:	4801      	ldr	r0, [pc, #4]	@ (26604 <__sfp_lock_acquire+0x8>)
   265fe:	f000 bcad 	b.w	26f5c <__retarget_lock_acquire_recursive>
   26602:	bf00      	nop
   26604:	10052468 	.word	0x10052468

00026608 <__sfp_lock_release>:
   26608:	4801      	ldr	r0, [pc, #4]	@ (26610 <__sfp_lock_release+0x8>)
   2660a:	f000 bca9 	b.w	26f60 <__retarget_lock_release_recursive>
   2660e:	bf00      	nop
   26610:	10052468 	.word	0x10052468

00026614 <vsnprintf>:
   26614:	b510      	push	{r4, lr}
   26616:	4c1a      	ldr	r4, [pc, #104]	@ (26680 <vsnprintf+0x6c>)
   26618:	2900      	cmp	r1, #0
   2661a:	6824      	ldr	r4, [r4, #0]
   2661c:	b09a      	sub	sp, #104	@ 0x68
   2661e:	db2a      	blt.n	26676 <vsnprintf+0x62>
   26620:	9000      	str	r0, [sp, #0]
   26622:	9004      	str	r0, [sp, #16]
   26624:	f44f 7002 	mov.w	r0, #520	@ 0x208
   26628:	f8ad 000c 	strh.w	r0, [sp, #12]
   2662c:	d013      	beq.n	26656 <vsnprintf+0x42>
   2662e:	3901      	subs	r1, #1
   26630:	f64f 70ff 	movw	r0, #65535	@ 0xffff
   26634:	9102      	str	r1, [sp, #8]
   26636:	9105      	str	r1, [sp, #20]
   26638:	f8ad 000e 	strh.w	r0, [sp, #14]
   2663c:	4669      	mov	r1, sp
   2663e:	4620      	mov	r0, r4
   26640:	f001 f96e 	bl	27920 <_svfprintf_r>
   26644:	1c42      	adds	r2, r0, #1
   26646:	da01      	bge.n	2664c <vsnprintf+0x38>
   26648:	238b      	movs	r3, #139	@ 0x8b
   2664a:	6023      	str	r3, [r4, #0]
   2664c:	9b00      	ldr	r3, [sp, #0]
   2664e:	2200      	movs	r2, #0
   26650:	701a      	strb	r2, [r3, #0]
   26652:	b01a      	add	sp, #104	@ 0x68
   26654:	bd10      	pop	{r4, pc}
   26656:	f64f 70ff 	movw	r0, #65535	@ 0xffff
   2665a:	9102      	str	r1, [sp, #8]
   2665c:	9105      	str	r1, [sp, #20]
   2665e:	f8ad 000e 	strh.w	r0, [sp, #14]
   26662:	4669      	mov	r1, sp
   26664:	4620      	mov	r0, r4
   26666:	f001 f95b 	bl	27920 <_svfprintf_r>
   2666a:	1c43      	adds	r3, r0, #1
   2666c:	da01      	bge.n	26672 <vsnprintf+0x5e>
   2666e:	238b      	movs	r3, #139	@ 0x8b
   26670:	6023      	str	r3, [r4, #0]
   26672:	b01a      	add	sp, #104	@ 0x68
   26674:	bd10      	pop	{r4, pc}
   26676:	238b      	movs	r3, #139	@ 0x8b
   26678:	6023      	str	r3, [r4, #0]
   2667a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2667e:	e7f8      	b.n	26672 <vsnprintf+0x5e>
   26680:	1000c53c 	.word	0x1000c53c

00026684 <__sfvwrite_r>:
   26684:	6893      	ldr	r3, [r2, #8]
   26686:	2b00      	cmp	r3, #0
   26688:	f000 80f8 	beq.w	2687c <__sfvwrite_r+0x1f8>
   2668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26690:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
   26694:	f01c 0f08 	tst.w	ip, #8
   26698:	b083      	sub	sp, #12
   2669a:	4690      	mov	r8, r2
   2669c:	4681      	mov	r9, r0
   2669e:	460c      	mov	r4, r1
   266a0:	d031      	beq.n	26706 <__sfvwrite_r+0x82>
   266a2:	690b      	ldr	r3, [r1, #16]
   266a4:	b37b      	cbz	r3, 26706 <__sfvwrite_r+0x82>
   266a6:	f01c 0702 	ands.w	r7, ip, #2
   266aa:	f8d8 6000 	ldr.w	r6, [r8]
   266ae:	d038      	beq.n	26722 <__sfvwrite_r+0x9e>
   266b0:	2700      	movs	r7, #0
   266b2:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
   266b6:	69e1      	ldr	r1, [r4, #28]
   266b8:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 26980 <__sfvwrite_r+0x2fc>
   266bc:	463d      	mov	r5, r7
   266be:	4555      	cmp	r5, sl
   266c0:	462b      	mov	r3, r5
   266c2:	463a      	mov	r2, r7
   266c4:	bf28      	it	cs
   266c6:	4653      	movcs	r3, sl
   266c8:	4648      	mov	r0, r9
   266ca:	b1c5      	cbz	r5, 266fe <__sfvwrite_r+0x7a>
   266cc:	47d8      	blx	fp
   266ce:	2800      	cmp	r0, #0
   266d0:	f340 80ca 	ble.w	26868 <__sfvwrite_r+0x1e4>
   266d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   266d8:	1a1b      	subs	r3, r3, r0
   266da:	4407      	add	r7, r0
   266dc:	1a2d      	subs	r5, r5, r0
   266de:	f8c8 3008 	str.w	r3, [r8, #8]
   266e2:	2b00      	cmp	r3, #0
   266e4:	f000 80b6 	beq.w	26854 <__sfvwrite_r+0x1d0>
   266e8:	4555      	cmp	r5, sl
   266ea:	462b      	mov	r3, r5
   266ec:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
   266f0:	69e1      	ldr	r1, [r4, #28]
   266f2:	bf28      	it	cs
   266f4:	4653      	movcs	r3, sl
   266f6:	463a      	mov	r2, r7
   266f8:	4648      	mov	r0, r9
   266fa:	2d00      	cmp	r5, #0
   266fc:	d1e6      	bne.n	266cc <__sfvwrite_r+0x48>
   266fe:	e9d6 7500 	ldrd	r7, r5, [r6]
   26702:	3608      	adds	r6, #8
   26704:	e7db      	b.n	266be <__sfvwrite_r+0x3a>
   26706:	4621      	mov	r1, r4
   26708:	4648      	mov	r0, r9
   2670a:	f000 f95d 	bl	269c8 <__swsetup_r>
   2670e:	2800      	cmp	r0, #0
   26710:	f040 80af 	bne.w	26872 <__sfvwrite_r+0x1ee>
   26714:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   26718:	f8d8 6000 	ldr.w	r6, [r8]
   2671c:	f01c 0702 	ands.w	r7, ip, #2
   26720:	d1c6      	bne.n	266b0 <__sfvwrite_r+0x2c>
   26722:	f01c 0a01 	ands.w	sl, ip, #1
   26726:	d163      	bne.n	267f0 <__sfvwrite_r+0x16c>
   26728:	6823      	ldr	r3, [r4, #0]
   2672a:	68a1      	ldr	r1, [r4, #8]
   2672c:	4657      	mov	r7, sl
   2672e:	4618      	mov	r0, r3
   26730:	468b      	mov	fp, r1
   26732:	2f00      	cmp	r7, #0
   26734:	d058      	beq.n	267e8 <__sfvwrite_r+0x164>
   26736:	f41c 7f00 	tst.w	ip, #512	@ 0x200
   2673a:	f000 80b5 	beq.w	268a8 <__sfvwrite_r+0x224>
   2673e:	42b9      	cmp	r1, r7
   26740:	460a      	mov	r2, r1
   26742:	f200 80e1 	bhi.w	26908 <__sfvwrite_r+0x284>
   26746:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
   2674a:	d02f      	beq.n	267ac <__sfvwrite_r+0x128>
   2674c:	6921      	ldr	r1, [r4, #16]
   2674e:	6962      	ldr	r2, [r4, #20]
   26750:	1a5d      	subs	r5, r3, r1
   26752:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   26756:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2675a:	1c6b      	adds	r3, r5, #1
   2675c:	1052      	asrs	r2, r2, #1
   2675e:	443b      	add	r3, r7
   26760:	4293      	cmp	r3, r2
   26762:	bf92      	itee	ls
   26764:	4693      	movls	fp, r2
   26766:	469b      	movhi	fp, r3
   26768:	461a      	movhi	r2, r3
   2676a:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
   2676e:	f000 80ea 	beq.w	26946 <__sfvwrite_r+0x2c2>
   26772:	4611      	mov	r1, r2
   26774:	4648      	mov	r0, r9
   26776:	f000 fe09 	bl	2738c <_malloc_r>
   2677a:	2800      	cmp	r0, #0
   2677c:	f000 80f9 	beq.w	26972 <__sfvwrite_r+0x2ee>
   26780:	462a      	mov	r2, r5
   26782:	6921      	ldr	r1, [r4, #16]
   26784:	9000      	str	r0, [sp, #0]
   26786:	f7f1 fefb 	bl	18580 <memcpy>
   2678a:	89a2      	ldrh	r2, [r4, #12]
   2678c:	9b00      	ldr	r3, [sp, #0]
   2678e:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
   26792:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
   26796:	81a2      	strh	r2, [r4, #12]
   26798:	1958      	adds	r0, r3, r5
   2679a:	ebab 0505 	sub.w	r5, fp, r5
   2679e:	f8c4 b014 	str.w	fp, [r4, #20]
   267a2:	6123      	str	r3, [r4, #16]
   267a4:	60a5      	str	r5, [r4, #8]
   267a6:	6020      	str	r0, [r4, #0]
   267a8:	46bb      	mov	fp, r7
   267aa:	463a      	mov	r2, r7
   267ac:	4651      	mov	r1, sl
   267ae:	9200      	str	r2, [sp, #0]
   267b0:	f000 fa08 	bl	26bc4 <memmove>
   267b4:	68a1      	ldr	r1, [r4, #8]
   267b6:	6823      	ldr	r3, [r4, #0]
   267b8:	9a00      	ldr	r2, [sp, #0]
   267ba:	eba1 010b 	sub.w	r1, r1, fp
   267be:	441a      	add	r2, r3
   267c0:	463d      	mov	r5, r7
   267c2:	60a1      	str	r1, [r4, #8]
   267c4:	6022      	str	r2, [r4, #0]
   267c6:	2700      	movs	r7, #0
   267c8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   267cc:	1b5b      	subs	r3, r3, r5
   267ce:	44aa      	add	sl, r5
   267d0:	f8c8 3008 	str.w	r3, [r8, #8]
   267d4:	2b00      	cmp	r3, #0
   267d6:	d03d      	beq.n	26854 <__sfvwrite_r+0x1d0>
   267d8:	6823      	ldr	r3, [r4, #0]
   267da:	68a1      	ldr	r1, [r4, #8]
   267dc:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   267e0:	4618      	mov	r0, r3
   267e2:	468b      	mov	fp, r1
   267e4:	2f00      	cmp	r7, #0
   267e6:	d1a6      	bne.n	26736 <__sfvwrite_r+0xb2>
   267e8:	e9d6 a700 	ldrd	sl, r7, [r6]
   267ec:	3608      	adds	r6, #8
   267ee:	e79e      	b.n	2672e <__sfvwrite_r+0xaa>
   267f0:	4638      	mov	r0, r7
   267f2:	46bb      	mov	fp, r7
   267f4:	463d      	mov	r5, r7
   267f6:	9700      	str	r7, [sp, #0]
   267f8:	2d00      	cmp	r5, #0
   267fa:	d041      	beq.n	26880 <__sfvwrite_r+0x1fc>
   267fc:	2800      	cmp	r0, #0
   267fe:	d046      	beq.n	2688e <__sfvwrite_r+0x20a>
   26800:	9a00      	ldr	r2, [sp, #0]
   26802:	6820      	ldr	r0, [r4, #0]
   26804:	68a1      	ldr	r1, [r4, #8]
   26806:	e9d4 7304 	ldrd	r7, r3, [r4, #16]
   2680a:	42aa      	cmp	r2, r5
   2680c:	bf28      	it	cs
   2680e:	462a      	movcs	r2, r5
   26810:	42b8      	cmp	r0, r7
   26812:	d904      	bls.n	2681e <__sfvwrite_r+0x19a>
   26814:	eb01 0a03 	add.w	sl, r1, r3
   26818:	4552      	cmp	r2, sl
   2681a:	f300 8085 	bgt.w	26928 <__sfvwrite_r+0x2a4>
   2681e:	4293      	cmp	r3, r2
   26820:	dc75      	bgt.n	2690e <__sfvwrite_r+0x28a>
   26822:	69e1      	ldr	r1, [r4, #28]
   26824:	6a67      	ldr	r7, [r4, #36]	@ 0x24
   26826:	465a      	mov	r2, fp
   26828:	4648      	mov	r0, r9
   2682a:	47b8      	blx	r7
   2682c:	f1b0 0a00 	subs.w	sl, r0, #0
   26830:	dd1a      	ble.n	26868 <__sfvwrite_r+0x1e4>
   26832:	9b00      	ldr	r3, [sp, #0]
   26834:	ebb3 030a 	subs.w	r3, r3, sl
   26838:	9300      	str	r3, [sp, #0]
   2683a:	d00f      	beq.n	2685c <__sfvwrite_r+0x1d8>
   2683c:	2001      	movs	r0, #1
   2683e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   26842:	eba3 030a 	sub.w	r3, r3, sl
   26846:	44d3      	add	fp, sl
   26848:	eba5 050a 	sub.w	r5, r5, sl
   2684c:	f8c8 3008 	str.w	r3, [r8, #8]
   26850:	2b00      	cmp	r3, #0
   26852:	d1d1      	bne.n	267f8 <__sfvwrite_r+0x174>
   26854:	2000      	movs	r0, #0
   26856:	b003      	add	sp, #12
   26858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2685c:	4621      	mov	r1, r4
   2685e:	4648      	mov	r0, r9
   26860:	f7ff fde0 	bl	26424 <_fflush_r>
   26864:	2800      	cmp	r0, #0
   26866:	d0ea      	beq.n	2683e <__sfvwrite_r+0x1ba>
   26868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2686c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26870:	81a3      	strh	r3, [r4, #12]
   26872:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   26876:	b003      	add	sp, #12
   26878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2687c:	2000      	movs	r0, #0
   2687e:	4770      	bx	lr
   26880:	6875      	ldr	r5, [r6, #4]
   26882:	4633      	mov	r3, r6
   26884:	3608      	adds	r6, #8
   26886:	2d00      	cmp	r5, #0
   26888:	d0fa      	beq.n	26880 <__sfvwrite_r+0x1fc>
   2688a:	f8d3 b000 	ldr.w	fp, [r3]
   2688e:	462a      	mov	r2, r5
   26890:	210a      	movs	r1, #10
   26892:	4658      	mov	r0, fp
   26894:	f7f1 fe24 	bl	184e0 <memchr>
   26898:	2800      	cmp	r0, #0
   2689a:	d067      	beq.n	2696c <__sfvwrite_r+0x2e8>
   2689c:	3001      	adds	r0, #1
   2689e:	eba0 030b 	sub.w	r3, r0, fp
   268a2:	9300      	str	r3, [sp, #0]
   268a4:	461a      	mov	r2, r3
   268a6:	e7ac      	b.n	26802 <__sfvwrite_r+0x17e>
   268a8:	6922      	ldr	r2, [r4, #16]
   268aa:	429a      	cmp	r2, r3
   268ac:	d314      	bcc.n	268d8 <__sfvwrite_r+0x254>
   268ae:	6962      	ldr	r2, [r4, #20]
   268b0:	42ba      	cmp	r2, r7
   268b2:	d811      	bhi.n	268d8 <__sfvwrite_r+0x254>
   268b4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
   268b8:	42bb      	cmp	r3, r7
   268ba:	bf28      	it	cs
   268bc:	463b      	movcs	r3, r7
   268be:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   268c0:	fb93 f3f2 	sdiv	r3, r3, r2
   268c4:	69e1      	ldr	r1, [r4, #28]
   268c6:	fb02 f303 	mul.w	r3, r2, r3
   268ca:	4648      	mov	r0, r9
   268cc:	4652      	mov	r2, sl
   268ce:	47a8      	blx	r5
   268d0:	1e05      	subs	r5, r0, #0
   268d2:	ddc9      	ble.n	26868 <__sfvwrite_r+0x1e4>
   268d4:	1b7f      	subs	r7, r7, r5
   268d6:	e777      	b.n	267c8 <__sfvwrite_r+0x144>
   268d8:	42b9      	cmp	r1, r7
   268da:	bf28      	it	cs
   268dc:	4639      	movcs	r1, r7
   268de:	460d      	mov	r5, r1
   268e0:	4618      	mov	r0, r3
   268e2:	460a      	mov	r2, r1
   268e4:	4651      	mov	r1, sl
   268e6:	f000 f96d 	bl	26bc4 <memmove>
   268ea:	68a1      	ldr	r1, [r4, #8]
   268ec:	6823      	ldr	r3, [r4, #0]
   268ee:	1b49      	subs	r1, r1, r5
   268f0:	442b      	add	r3, r5
   268f2:	60a1      	str	r1, [r4, #8]
   268f4:	6023      	str	r3, [r4, #0]
   268f6:	2900      	cmp	r1, #0
   268f8:	d1ec      	bne.n	268d4 <__sfvwrite_r+0x250>
   268fa:	4621      	mov	r1, r4
   268fc:	4648      	mov	r0, r9
   268fe:	f7ff fd91 	bl	26424 <_fflush_r>
   26902:	2800      	cmp	r0, #0
   26904:	d0e6      	beq.n	268d4 <__sfvwrite_r+0x250>
   26906:	e7af      	b.n	26868 <__sfvwrite_r+0x1e4>
   26908:	46bb      	mov	fp, r7
   2690a:	463a      	mov	r2, r7
   2690c:	e74e      	b.n	267ac <__sfvwrite_r+0x128>
   2690e:	4659      	mov	r1, fp
   26910:	9201      	str	r2, [sp, #4]
   26912:	f000 f957 	bl	26bc4 <memmove>
   26916:	9a01      	ldr	r2, [sp, #4]
   26918:	68a3      	ldr	r3, [r4, #8]
   2691a:	1a9b      	subs	r3, r3, r2
   2691c:	60a3      	str	r3, [r4, #8]
   2691e:	6823      	ldr	r3, [r4, #0]
   26920:	4413      	add	r3, r2
   26922:	6023      	str	r3, [r4, #0]
   26924:	4692      	mov	sl, r2
   26926:	e784      	b.n	26832 <__sfvwrite_r+0x1ae>
   26928:	4659      	mov	r1, fp
   2692a:	4652      	mov	r2, sl
   2692c:	f000 f94a 	bl	26bc4 <memmove>
   26930:	6823      	ldr	r3, [r4, #0]
   26932:	4453      	add	r3, sl
   26934:	6023      	str	r3, [r4, #0]
   26936:	4621      	mov	r1, r4
   26938:	4648      	mov	r0, r9
   2693a:	f7ff fd73 	bl	26424 <_fflush_r>
   2693e:	2800      	cmp	r0, #0
   26940:	f43f af77 	beq.w	26832 <__sfvwrite_r+0x1ae>
   26944:	e790      	b.n	26868 <__sfvwrite_r+0x1e4>
   26946:	4648      	mov	r0, r9
   26948:	f002 fe62 	bl	29610 <_realloc_r>
   2694c:	4603      	mov	r3, r0
   2694e:	2800      	cmp	r0, #0
   26950:	f47f af22 	bne.w	26798 <__sfvwrite_r+0x114>
   26954:	6921      	ldr	r1, [r4, #16]
   26956:	4648      	mov	r0, r9
   26958:	f000 fbdc 	bl	27114 <_free_r>
   2695c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26960:	220c      	movs	r2, #12
   26962:	f8c9 2000 	str.w	r2, [r9]
   26966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   2696a:	e77f      	b.n	2686c <__sfvwrite_r+0x1e8>
   2696c:	1c6a      	adds	r2, r5, #1
   2696e:	9200      	str	r2, [sp, #0]
   26970:	e747      	b.n	26802 <__sfvwrite_r+0x17e>
   26972:	220c      	movs	r2, #12
   26974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26978:	f8c9 2000 	str.w	r2, [r9]
   2697c:	e776      	b.n	2686c <__sfvwrite_r+0x1e8>
   2697e:	bf00      	nop
   26980:	7ffffc00 	.word	0x7ffffc00

00026984 <_fwalk_sglue>:
   26984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26988:	4607      	mov	r7, r0
   2698a:	4688      	mov	r8, r1
   2698c:	4616      	mov	r6, r2
   2698e:	f04f 0900 	mov.w	r9, #0
   26992:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   26996:	3d01      	subs	r5, #1
   26998:	d410      	bmi.n	269bc <_fwalk_sglue+0x38>
   2699a:	89a3      	ldrh	r3, [r4, #12]
   2699c:	2b01      	cmp	r3, #1
   2699e:	d908      	bls.n	269b2 <_fwalk_sglue+0x2e>
   269a0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   269a4:	3301      	adds	r3, #1
   269a6:	4621      	mov	r1, r4
   269a8:	4638      	mov	r0, r7
   269aa:	d002      	beq.n	269b2 <_fwalk_sglue+0x2e>
   269ac:	47c0      	blx	r8
   269ae:	ea49 0900 	orr.w	r9, r9, r0
   269b2:	3d01      	subs	r5, #1
   269b4:	1c6b      	adds	r3, r5, #1
   269b6:	f104 0468 	add.w	r4, r4, #104	@ 0x68
   269ba:	d1ee      	bne.n	2699a <_fwalk_sglue+0x16>
   269bc:	6836      	ldr	r6, [r6, #0]
   269be:	2e00      	cmp	r6, #0
   269c0:	d1e7      	bne.n	26992 <_fwalk_sglue+0xe>
   269c2:	4648      	mov	r0, r9
   269c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000269c8 <__swsetup_r>:
   269c8:	b538      	push	{r3, r4, r5, lr}
   269ca:	4b2f      	ldr	r3, [pc, #188]	@ (26a88 <__swsetup_r+0xc0>)
   269cc:	681b      	ldr	r3, [r3, #0]
   269ce:	4605      	mov	r5, r0
   269d0:	460c      	mov	r4, r1
   269d2:	b113      	cbz	r3, 269da <__swsetup_r+0x12>
   269d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   269d6:	2a00      	cmp	r2, #0
   269d8:	d04b      	beq.n	26a72 <__swsetup_r+0xaa>
   269da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   269de:	0718      	lsls	r0, r3, #28
   269e0:	d51c      	bpl.n	26a1c <__swsetup_r+0x54>
   269e2:	6922      	ldr	r2, [r4, #16]
   269e4:	b322      	cbz	r2, 26a30 <__swsetup_r+0x68>
   269e6:	f013 0101 	ands.w	r1, r3, #1
   269ea:	d007      	beq.n	269fc <__swsetup_r+0x34>
   269ec:	6961      	ldr	r1, [r4, #20]
   269ee:	2000      	movs	r0, #0
   269f0:	4249      	negs	r1, r1
   269f2:	60a0      	str	r0, [r4, #8]
   269f4:	61a1      	str	r1, [r4, #24]
   269f6:	b13a      	cbz	r2, 26a08 <__swsetup_r+0x40>
   269f8:	2000      	movs	r0, #0
   269fa:	bd38      	pop	{r3, r4, r5, pc}
   269fc:	0798      	lsls	r0, r3, #30
   269fe:	bf58      	it	pl
   26a00:	6961      	ldrpl	r1, [r4, #20]
   26a02:	60a1      	str	r1, [r4, #8]
   26a04:	2a00      	cmp	r2, #0
   26a06:	d1f7      	bne.n	269f8 <__swsetup_r+0x30>
   26a08:	0619      	lsls	r1, r3, #24
   26a0a:	bf58      	it	pl
   26a0c:	4610      	movpl	r0, r2
   26a0e:	d5f4      	bpl.n	269fa <__swsetup_r+0x32>
   26a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26a14:	81a3      	strh	r3, [r4, #12]
   26a16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   26a1a:	bd38      	pop	{r3, r4, r5, pc}
   26a1c:	06d9      	lsls	r1, r3, #27
   26a1e:	d52c      	bpl.n	26a7a <__swsetup_r+0xb2>
   26a20:	075a      	lsls	r2, r3, #29
   26a22:	d412      	bmi.n	26a4a <__swsetup_r+0x82>
   26a24:	6922      	ldr	r2, [r4, #16]
   26a26:	f043 0308 	orr.w	r3, r3, #8
   26a2a:	81a3      	strh	r3, [r4, #12]
   26a2c:	2a00      	cmp	r2, #0
   26a2e:	d1da      	bne.n	269e6 <__swsetup_r+0x1e>
   26a30:	f403 7120 	and.w	r1, r3, #640	@ 0x280
   26a34:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   26a38:	d0d5      	beq.n	269e6 <__swsetup_r+0x1e>
   26a3a:	4621      	mov	r1, r4
   26a3c:	4628      	mov	r0, r5
   26a3e:	f002 fd0d 	bl	2945c <__smakebuf_r>
   26a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26a46:	6922      	ldr	r2, [r4, #16]
   26a48:	e7cd      	b.n	269e6 <__swsetup_r+0x1e>
   26a4a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
   26a4c:	b151      	cbz	r1, 26a64 <__swsetup_r+0x9c>
   26a4e:	f104 0240 	add.w	r2, r4, #64	@ 0x40
   26a52:	4291      	cmp	r1, r2
   26a54:	d004      	beq.n	26a60 <__swsetup_r+0x98>
   26a56:	4628      	mov	r0, r5
   26a58:	f000 fb5c 	bl	27114 <_free_r>
   26a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26a60:	2200      	movs	r2, #0
   26a62:	6322      	str	r2, [r4, #48]	@ 0x30
   26a64:	6922      	ldr	r2, [r4, #16]
   26a66:	2100      	movs	r1, #0
   26a68:	e9c4 2100 	strd	r2, r1, [r4]
   26a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
   26a70:	e7d9      	b.n	26a26 <__swsetup_r+0x5e>
   26a72:	4618      	mov	r0, r3
   26a74:	f7ff fda4 	bl	265c0 <__sinit>
   26a78:	e7af      	b.n	269da <__swsetup_r+0x12>
   26a7a:	2209      	movs	r2, #9
   26a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26a80:	602a      	str	r2, [r5, #0]
   26a82:	81a3      	strh	r3, [r4, #12]
   26a84:	e7c7      	b.n	26a16 <__swsetup_r+0x4e>
   26a86:	bf00      	nop
   26a88:	1000c53c 	.word	0x1000c53c

00026a8c <memcmp>:
   26a8c:	2a03      	cmp	r2, #3
   26a8e:	b430      	push	{r4, r5}
   26a90:	d915      	bls.n	26abe <memcmp+0x32>
   26a92:	ea41 0400 	orr.w	r4, r1, r0
   26a96:	07a4      	lsls	r4, r4, #30
   26a98:	4684      	mov	ip, r0
   26a9a:	460b      	mov	r3, r1
   26a9c:	d004      	beq.n	26aa8 <memcmp+0x1c>
   26a9e:	1e54      	subs	r4, r2, #1
   26aa0:	e00f      	b.n	26ac2 <memcmp+0x36>
   26aa2:	3a04      	subs	r2, #4
   26aa4:	2a03      	cmp	r2, #3
   26aa6:	d908      	bls.n	26aba <memcmp+0x2e>
   26aa8:	4619      	mov	r1, r3
   26aaa:	4660      	mov	r0, ip
   26aac:	f853 4b04 	ldr.w	r4, [r3], #4
   26ab0:	f85c 5b04 	ldr.w	r5, [ip], #4
   26ab4:	42a5      	cmp	r5, r4
   26ab6:	d0f4      	beq.n	26aa2 <memcmp+0x16>
   26ab8:	e7f1      	b.n	26a9e <memcmp+0x12>
   26aba:	4660      	mov	r0, ip
   26abc:	4619      	mov	r1, r3
   26abe:	1e54      	subs	r4, r2, #1
   26ac0:	b17a      	cbz	r2, 26ae2 <memcmp+0x56>
   26ac2:	1e43      	subs	r3, r0, #1
   26ac4:	3901      	subs	r1, #1
   26ac6:	1902      	adds	r2, r0, r4
   26ac8:	e001      	b.n	26ace <memcmp+0x42>
   26aca:	429a      	cmp	r2, r3
   26acc:	d009      	beq.n	26ae2 <memcmp+0x56>
   26ace:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   26ad2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   26ad6:	4560      	cmp	r0, ip
   26ad8:	d0f7      	beq.n	26aca <memcmp+0x3e>
   26ada:	eba0 000c 	sub.w	r0, r0, ip
   26ade:	bc30      	pop	{r4, r5}
   26ae0:	4770      	bx	lr
   26ae2:	2000      	movs	r0, #0
   26ae4:	bc30      	pop	{r4, r5}
   26ae6:	4770      	bx	lr

00026ae8 <__fputwc>:
   26ae8:	b570      	push	{r4, r5, r6, lr}
   26aea:	b082      	sub	sp, #8
   26aec:	4606      	mov	r6, r0
   26aee:	460d      	mov	r5, r1
   26af0:	4614      	mov	r4, r2
   26af2:	f000 f9df 	bl	26eb4 <__locale_mb_cur_max>
   26af6:	2801      	cmp	r0, #1
   26af8:	d102      	bne.n	26b00 <__fputwc+0x18>
   26afa:	1e6b      	subs	r3, r5, #1
   26afc:	2bfe      	cmp	r3, #254	@ 0xfe
   26afe:	d926      	bls.n	26b4e <__fputwc+0x66>
   26b00:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
   26b04:	462a      	mov	r2, r5
   26b06:	a901      	add	r1, sp, #4
   26b08:	4630      	mov	r0, r6
   26b0a:	f000 fa2b 	bl	26f64 <_wcrtomb_r>
   26b0e:	1c43      	adds	r3, r0, #1
   26b10:	d020      	beq.n	26b54 <__fputwc+0x6c>
   26b12:	b178      	cbz	r0, 26b34 <__fputwc+0x4c>
   26b14:	68a3      	ldr	r3, [r4, #8]
   26b16:	f89d 1004 	ldrb.w	r1, [sp, #4]
   26b1a:	3b01      	subs	r3, #1
   26b1c:	2b00      	cmp	r3, #0
   26b1e:	60a3      	str	r3, [r4, #8]
   26b20:	da04      	bge.n	26b2c <__fputwc+0x44>
   26b22:	69a2      	ldr	r2, [r4, #24]
   26b24:	4293      	cmp	r3, r2
   26b26:	db08      	blt.n	26b3a <__fputwc+0x52>
   26b28:	290a      	cmp	r1, #10
   26b2a:	d006      	beq.n	26b3a <__fputwc+0x52>
   26b2c:	6823      	ldr	r3, [r4, #0]
   26b2e:	1c5a      	adds	r2, r3, #1
   26b30:	6022      	str	r2, [r4, #0]
   26b32:	7019      	strb	r1, [r3, #0]
   26b34:	4628      	mov	r0, r5
   26b36:	b002      	add	sp, #8
   26b38:	bd70      	pop	{r4, r5, r6, pc}
   26b3a:	4622      	mov	r2, r4
   26b3c:	4630      	mov	r0, r6
   26b3e:	f002 ff5f 	bl	29a00 <__swbuf_r>
   26b42:	3001      	adds	r0, #1
   26b44:	d1f6      	bne.n	26b34 <__fputwc+0x4c>
   26b46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   26b4a:	b002      	add	sp, #8
   26b4c:	bd70      	pop	{r4, r5, r6, pc}
   26b4e:	f88d 5004 	strb.w	r5, [sp, #4]
   26b52:	e7df      	b.n	26b14 <__fputwc+0x2c>
   26b54:	89a3      	ldrh	r3, [r4, #12]
   26b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   26b5a:	81a3      	strh	r3, [r4, #12]
   26b5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   26b60:	e7f3      	b.n	26b4a <__fputwc+0x62>
   26b62:	bf00      	nop

00026b64 <_fputwc_r>:
   26b64:	b530      	push	{r4, r5, lr}
   26b66:	4614      	mov	r4, r2
   26b68:	6e52      	ldr	r2, [r2, #100]	@ 0x64
   26b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26b6e:	4605      	mov	r5, r0
   26b70:	07d0      	lsls	r0, r2, #31
   26b72:	b083      	sub	sp, #12
   26b74:	d401      	bmi.n	26b7a <_fputwc_r+0x16>
   26b76:	059a      	lsls	r2, r3, #22
   26b78:	d51c      	bpl.n	26bb4 <_fputwc_r+0x50>
   26b7a:	0498      	lsls	r0, r3, #18
   26b7c:	d406      	bmi.n	26b8c <_fputwc_r+0x28>
   26b7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
   26b80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
   26b84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
   26b88:	81a3      	strh	r3, [r4, #12]
   26b8a:	6662      	str	r2, [r4, #100]	@ 0x64
   26b8c:	4622      	mov	r2, r4
   26b8e:	4628      	mov	r0, r5
   26b90:	f7ff ffaa 	bl	26ae8 <__fputwc>
   26b94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   26b96:	07da      	lsls	r2, r3, #31
   26b98:	4605      	mov	r5, r0
   26b9a:	d402      	bmi.n	26ba2 <_fputwc_r+0x3e>
   26b9c:	89a3      	ldrh	r3, [r4, #12]
   26b9e:	059b      	lsls	r3, r3, #22
   26ba0:	d502      	bpl.n	26ba8 <_fputwc_r+0x44>
   26ba2:	4628      	mov	r0, r5
   26ba4:	b003      	add	sp, #12
   26ba6:	bd30      	pop	{r4, r5, pc}
   26ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   26baa:	f000 f9d9 	bl	26f60 <__retarget_lock_release_recursive>
   26bae:	4628      	mov	r0, r5
   26bb0:	b003      	add	sp, #12
   26bb2:	bd30      	pop	{r4, r5, pc}
   26bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   26bb6:	9101      	str	r1, [sp, #4]
   26bb8:	f000 f9d0 	bl	26f5c <__retarget_lock_acquire_recursive>
   26bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   26bc0:	9901      	ldr	r1, [sp, #4]
   26bc2:	e7da      	b.n	26b7a <_fputwc_r+0x16>

00026bc4 <memmove>:
   26bc4:	4288      	cmp	r0, r1
   26bc6:	d90e      	bls.n	26be6 <memmove+0x22>
   26bc8:	188b      	adds	r3, r1, r2
   26bca:	4283      	cmp	r3, r0
   26bcc:	d90b      	bls.n	26be6 <memmove+0x22>
   26bce:	eb00 0c02 	add.w	ip, r0, r2
   26bd2:	2a00      	cmp	r2, #0
   26bd4:	d06e      	beq.n	26cb4 <memmove+0xf0>
   26bd6:	4662      	mov	r2, ip
   26bd8:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   26bdc:	f802 cd01 	strb.w	ip, [r2, #-1]!
   26be0:	4299      	cmp	r1, r3
   26be2:	d1f9      	bne.n	26bd8 <memmove+0x14>
   26be4:	4770      	bx	lr
   26be6:	2a0f      	cmp	r2, #15
   26be8:	d80f      	bhi.n	26c0a <memmove+0x46>
   26bea:	4603      	mov	r3, r0
   26bec:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
   26bf0:	2a00      	cmp	r2, #0
   26bf2:	d05f      	beq.n	26cb4 <memmove+0xf0>
   26bf4:	f10c 0c01 	add.w	ip, ip, #1
   26bf8:	3b01      	subs	r3, #1
   26bfa:	448c      	add	ip, r1
   26bfc:	f811 2b01 	ldrb.w	r2, [r1], #1
   26c00:	f803 2f01 	strb.w	r2, [r3, #1]!
   26c04:	4561      	cmp	r1, ip
   26c06:	d1f9      	bne.n	26bfc <memmove+0x38>
   26c08:	4770      	bx	lr
   26c0a:	ea40 0301 	orr.w	r3, r0, r1
   26c0e:	079b      	lsls	r3, r3, #30
   26c10:	d151      	bne.n	26cb6 <memmove+0xf2>
   26c12:	f1a2 0310 	sub.w	r3, r2, #16
   26c16:	b570      	push	{r4, r5, r6, lr}
   26c18:	f101 0c20 	add.w	ip, r1, #32
   26c1c:	f023 050f 	bic.w	r5, r3, #15
   26c20:	f101 0e10 	add.w	lr, r1, #16
   26c24:	f100 0410 	add.w	r4, r0, #16
   26c28:	44ac      	add	ip, r5
   26c2a:	091b      	lsrs	r3, r3, #4
   26c2c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   26c30:	f844 5c10 	str.w	r5, [r4, #-16]
   26c34:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   26c38:	f844 5c0c 	str.w	r5, [r4, #-12]
   26c3c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   26c40:	f844 5c08 	str.w	r5, [r4, #-8]
   26c44:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   26c48:	f844 5c04 	str.w	r5, [r4, #-4]
   26c4c:	f10e 0e10 	add.w	lr, lr, #16
   26c50:	45e6      	cmp	lr, ip
   26c52:	f104 0410 	add.w	r4, r4, #16
   26c56:	d1e9      	bne.n	26c2c <memmove+0x68>
   26c58:	3301      	adds	r3, #1
   26c5a:	f012 0f0c 	tst.w	r2, #12
   26c5e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   26c62:	f002 040f 	and.w	r4, r2, #15
   26c66:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   26c6a:	d028      	beq.n	26cbe <memmove+0xfa>
   26c6c:	3c04      	subs	r4, #4
   26c6e:	f024 0603 	bic.w	r6, r4, #3
   26c72:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   26c76:	441e      	add	r6, r3
   26c78:	1f1c      	subs	r4, r3, #4
   26c7a:	468e      	mov	lr, r1
   26c7c:	f85e 5b04 	ldr.w	r5, [lr], #4
   26c80:	f844 5f04 	str.w	r5, [r4, #4]!
   26c84:	42b4      	cmp	r4, r6
   26c86:	d1f9      	bne.n	26c7c <memmove+0xb8>
   26c88:	f10c 0401 	add.w	r4, ip, #1
   26c8c:	f002 0203 	and.w	r2, r2, #3
   26c90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   26c94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   26c98:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
   26c9c:	b14a      	cbz	r2, 26cb2 <memmove+0xee>
   26c9e:	f10c 0c01 	add.w	ip, ip, #1
   26ca2:	3b01      	subs	r3, #1
   26ca4:	448c      	add	ip, r1
   26ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
   26caa:	f803 2f01 	strb.w	r2, [r3, #1]!
   26cae:	4561      	cmp	r1, ip
   26cb0:	d1f9      	bne.n	26ca6 <memmove+0xe2>
   26cb2:	bd70      	pop	{r4, r5, r6, pc}
   26cb4:	4770      	bx	lr
   26cb6:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
   26cba:	4603      	mov	r3, r0
   26cbc:	e79a      	b.n	26bf4 <memmove+0x30>
   26cbe:	4622      	mov	r2, r4
   26cc0:	e7ea      	b.n	26c98 <memmove+0xd4>
   26cc2:	bf00      	nop

00026cc4 <memset>:
   26cc4:	0783      	lsls	r3, r0, #30
   26cc6:	b530      	push	{r4, r5, lr}
   26cc8:	d047      	beq.n	26d5a <memset+0x96>
   26cca:	1e54      	subs	r4, r2, #1
   26ccc:	2a00      	cmp	r2, #0
   26cce:	d03e      	beq.n	26d4e <memset+0x8a>
   26cd0:	b2ca      	uxtb	r2, r1
   26cd2:	4603      	mov	r3, r0
   26cd4:	e001      	b.n	26cda <memset+0x16>
   26cd6:	3c01      	subs	r4, #1
   26cd8:	d339      	bcc.n	26d4e <memset+0x8a>
   26cda:	f803 2b01 	strb.w	r2, [r3], #1
   26cde:	079d      	lsls	r5, r3, #30
   26ce0:	d1f9      	bne.n	26cd6 <memset+0x12>
   26ce2:	2c03      	cmp	r4, #3
   26ce4:	d92c      	bls.n	26d40 <memset+0x7c>
   26ce6:	b2cd      	uxtb	r5, r1
   26ce8:	eb05 2505 	add.w	r5, r5, r5, lsl #8
   26cec:	2c0f      	cmp	r4, #15
   26cee:	eb05 4505 	add.w	r5, r5, r5, lsl #16
   26cf2:	d935      	bls.n	26d60 <memset+0x9c>
   26cf4:	f1a4 0210 	sub.w	r2, r4, #16
   26cf8:	f022 0c0f 	bic.w	ip, r2, #15
   26cfc:	f103 0e10 	add.w	lr, r3, #16
   26d00:	44e6      	add	lr, ip
   26d02:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   26d06:	461a      	mov	r2, r3
   26d08:	e9c2 5500 	strd	r5, r5, [r2]
   26d0c:	e9c2 5502 	strd	r5, r5, [r2, #8]
   26d10:	3210      	adds	r2, #16
   26d12:	4572      	cmp	r2, lr
   26d14:	d1f8      	bne.n	26d08 <memset+0x44>
   26d16:	f10c 0201 	add.w	r2, ip, #1
   26d1a:	f014 0f0c 	tst.w	r4, #12
   26d1e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   26d22:	f004 0c0f 	and.w	ip, r4, #15
   26d26:	d013      	beq.n	26d50 <memset+0x8c>
   26d28:	f1ac 0304 	sub.w	r3, ip, #4
   26d2c:	f023 0303 	bic.w	r3, r3, #3
   26d30:	3304      	adds	r3, #4
   26d32:	4413      	add	r3, r2
   26d34:	f842 5b04 	str.w	r5, [r2], #4
   26d38:	4293      	cmp	r3, r2
   26d3a:	d1fb      	bne.n	26d34 <memset+0x70>
   26d3c:	f00c 0403 	and.w	r4, ip, #3
   26d40:	b12c      	cbz	r4, 26d4e <memset+0x8a>
   26d42:	b2c9      	uxtb	r1, r1
   26d44:	441c      	add	r4, r3
   26d46:	f803 1b01 	strb.w	r1, [r3], #1
   26d4a:	42a3      	cmp	r3, r4
   26d4c:	d1fb      	bne.n	26d46 <memset+0x82>
   26d4e:	bd30      	pop	{r4, r5, pc}
   26d50:	4664      	mov	r4, ip
   26d52:	4613      	mov	r3, r2
   26d54:	2c00      	cmp	r4, #0
   26d56:	d1f4      	bne.n	26d42 <memset+0x7e>
   26d58:	e7f9      	b.n	26d4e <memset+0x8a>
   26d5a:	4603      	mov	r3, r0
   26d5c:	4614      	mov	r4, r2
   26d5e:	e7c0      	b.n	26ce2 <memset+0x1e>
   26d60:	461a      	mov	r2, r3
   26d62:	46a4      	mov	ip, r4
   26d64:	e7e0      	b.n	26d28 <memset+0x64>
   26d66:	bf00      	nop

00026d68 <strncmp>:
   26d68:	2a00      	cmp	r2, #0
   26d6a:	d03e      	beq.n	26dea <strncmp+0x82>
   26d6c:	b530      	push	{r4, r5, lr}
   26d6e:	4684      	mov	ip, r0
   26d70:	4604      	mov	r4, r0
   26d72:	4308      	orrs	r0, r1
   26d74:	0780      	lsls	r0, r0, #30
   26d76:	460b      	mov	r3, r1
   26d78:	d12e      	bne.n	26dd8 <strncmp+0x70>
   26d7a:	2a03      	cmp	r2, #3
   26d7c:	d807      	bhi.n	26d8e <strncmp+0x26>
   26d7e:	e02b      	b.n	26dd8 <strncmp+0x70>
   26d80:	3a04      	subs	r2, #4
   26d82:	d025      	beq.n	26dd0 <strncmp+0x68>
   26d84:	f01e 3f80 	tst.w	lr, #2155905152	@ 0x80808080
   26d88:	d122      	bne.n	26dd0 <strncmp+0x68>
   26d8a:	2a03      	cmp	r2, #3
   26d8c:	d922      	bls.n	26dd4 <strncmp+0x6c>
   26d8e:	6820      	ldr	r0, [r4, #0]
   26d90:	4619      	mov	r1, r3
   26d92:	f853 5b04 	ldr.w	r5, [r3], #4
   26d96:	f1a0 3e01 	sub.w	lr, r0, #16843009	@ 0x1010101
   26d9a:	42a8      	cmp	r0, r5
   26d9c:	46a4      	mov	ip, r4
   26d9e:	ea2e 0e00 	bic.w	lr, lr, r0
   26da2:	f104 0404 	add.w	r4, r4, #4
   26da6:	d0eb      	beq.n	26d80 <strncmp+0x18>
   26da8:	f89c 0000 	ldrb.w	r0, [ip]
   26dac:	780c      	ldrb	r4, [r1, #0]
   26dae:	4284      	cmp	r4, r0
   26db0:	d11d      	bne.n	26dee <strncmp+0x86>
   26db2:	46e6      	mov	lr, ip
   26db4:	b168      	cbz	r0, 26dd2 <strncmp+0x6a>
   26db6:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   26dba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26dbe:	eba2 030e 	sub.w	r3, r2, lr
   26dc2:	42a0      	cmp	r0, r4
   26dc4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
   26dc8:	d111      	bne.n	26dee <strncmp+0x86>
   26dca:	eb1c 0303 	adds.w	r3, ip, r3
   26dce:	d1f1      	bne.n	26db4 <strncmp+0x4c>
   26dd0:	2000      	movs	r0, #0
   26dd2:	bd30      	pop	{r4, r5, pc}
   26dd4:	46a4      	mov	ip, r4
   26dd6:	4619      	mov	r1, r3
   26dd8:	f89c 0000 	ldrb.w	r0, [ip]
   26ddc:	780c      	ldrb	r4, [r1, #0]
   26dde:	42a0      	cmp	r0, r4
   26de0:	d105      	bne.n	26dee <strncmp+0x86>
   26de2:	2a01      	cmp	r2, #1
   26de4:	d0f4      	beq.n	26dd0 <strncmp+0x68>
   26de6:	46e6      	mov	lr, ip
   26de8:	e7e4      	b.n	26db4 <strncmp+0x4c>
   26dea:	4610      	mov	r0, r2
   26dec:	4770      	bx	lr
   26dee:	1b00      	subs	r0, r0, r4
   26df0:	bd30      	pop	{r4, r5, pc}
   26df2:	bf00      	nop

00026df4 <strncpy>:
   26df4:	ea40 0301 	orr.w	r3, r0, r1
   26df8:	079b      	lsls	r3, r3, #30
   26dfa:	b510      	push	{r4, lr}
   26dfc:	d101      	bne.n	26e02 <strncpy+0xe>
   26dfe:	2a03      	cmp	r2, #3
   26e00:	d817      	bhi.n	26e32 <strncpy+0x3e>
   26e02:	4684      	mov	ip, r0
   26e04:	f101 3eff 	add.w	lr, r1, #4294967295	@ 0xffffffff
   26e08:	e007      	b.n	26e1a <strncpy+0x26>
   26e0a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   26e0e:	f803 1b01 	strb.w	r1, [r3], #1
   26e12:	1e54      	subs	r4, r2, #1
   26e14:	b129      	cbz	r1, 26e22 <strncpy+0x2e>
   26e16:	469c      	mov	ip, r3
   26e18:	4622      	mov	r2, r4
   26e1a:	4663      	mov	r3, ip
   26e1c:	2a00      	cmp	r2, #0
   26e1e:	d1f4      	bne.n	26e0a <strncpy+0x16>
   26e20:	bd10      	pop	{r4, pc}
   26e22:	4494      	add	ip, r2
   26e24:	2c00      	cmp	r4, #0
   26e26:	d0fb      	beq.n	26e20 <strncpy+0x2c>
   26e28:	f803 1b01 	strb.w	r1, [r3], #1
   26e2c:	4563      	cmp	r3, ip
   26e2e:	d1fb      	bne.n	26e28 <strncpy+0x34>
   26e30:	bd10      	pop	{r4, pc}
   26e32:	468e      	mov	lr, r1
   26e34:	4684      	mov	ip, r0
   26e36:	f8de 4000 	ldr.w	r4, [lr]
   26e3a:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
   26e3e:	ea23 0304 	bic.w	r3, r3, r4
   26e42:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   26e46:	4671      	mov	r1, lr
   26e48:	f10e 0e04 	add.w	lr, lr, #4
   26e4c:	d1da      	bne.n	26e04 <strncpy+0x10>
   26e4e:	3a04      	subs	r2, #4
   26e50:	2a03      	cmp	r2, #3
   26e52:	f84c 4b04 	str.w	r4, [ip], #4
   26e56:	d8ee      	bhi.n	26e36 <strncpy+0x42>
   26e58:	4671      	mov	r1, lr
   26e5a:	e7d3      	b.n	26e04 <strncpy+0x10>

00026e5c <raise>:
   26e5c:	b538      	push	{r3, r4, r5, lr}
   26e5e:	4b14      	ldr	r3, [pc, #80]	@ (26eb0 <raise+0x54>)
   26e60:	281f      	cmp	r0, #31
   26e62:	681d      	ldr	r5, [r3, #0]
   26e64:	d81e      	bhi.n	26ea4 <raise+0x48>
   26e66:	f8d5 2118 	ldr.w	r2, [r5, #280]	@ 0x118
   26e6a:	4604      	mov	r4, r0
   26e6c:	b162      	cbz	r2, 26e88 <raise+0x2c>
   26e6e:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   26e72:	b14b      	cbz	r3, 26e88 <raise+0x2c>
   26e74:	2b01      	cmp	r3, #1
   26e76:	d005      	beq.n	26e84 <raise+0x28>
   26e78:	1c59      	adds	r1, r3, #1
   26e7a:	d00f      	beq.n	26e9c <raise+0x40>
   26e7c:	2100      	movs	r1, #0
   26e7e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
   26e82:	4798      	blx	r3
   26e84:	2000      	movs	r0, #0
   26e86:	bd38      	pop	{r3, r4, r5, pc}
   26e88:	4628      	mov	r0, r5
   26e8a:	f000 f833 	bl	26ef4 <_getpid_r>
   26e8e:	4622      	mov	r2, r4
   26e90:	4601      	mov	r1, r0
   26e92:	4628      	mov	r0, r5
   26e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26e98:	f000 b816 	b.w	26ec8 <_kill_r>
   26e9c:	2316      	movs	r3, #22
   26e9e:	602b      	str	r3, [r5, #0]
   26ea0:	2001      	movs	r0, #1
   26ea2:	bd38      	pop	{r3, r4, r5, pc}
   26ea4:	2316      	movs	r3, #22
   26ea6:	602b      	str	r3, [r5, #0]
   26ea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   26eac:	bd38      	pop	{r3, r4, r5, pc}
   26eae:	bf00      	nop
   26eb0:	1000c53c 	.word	0x1000c53c

00026eb4 <__locale_mb_cur_max>:
   26eb4:	4b01      	ldr	r3, [pc, #4]	@ (26ebc <__locale_mb_cur_max+0x8>)
   26eb6:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
   26eba:	4770      	bx	lr
   26ebc:	1000c3d0 	.word	0x1000c3d0

00026ec0 <_localeconv_r>:
   26ec0:	4800      	ldr	r0, [pc, #0]	@ (26ec4 <_localeconv_r+0x4>)
   26ec2:	4770      	bx	lr
   26ec4:	1000c4c0 	.word	0x1000c4c0

00026ec8 <_kill_r>:
   26ec8:	b570      	push	{r4, r5, r6, lr}
   26eca:	460c      	mov	r4, r1
   26ecc:	4d08      	ldr	r5, [pc, #32]	@ (26ef0 <_kill_r+0x28>)
   26ece:	4603      	mov	r3, r0
   26ed0:	2600      	movs	r6, #0
   26ed2:	4620      	mov	r0, r4
   26ed4:	4611      	mov	r1, r2
   26ed6:	461c      	mov	r4, r3
   26ed8:	602e      	str	r6, [r5, #0]
   26eda:	f004 fda5 	bl	2ba28 <_kill>
   26ede:	1c43      	adds	r3, r0, #1
   26ee0:	d000      	beq.n	26ee4 <_kill_r+0x1c>
   26ee2:	bd70      	pop	{r4, r5, r6, pc}
   26ee4:	682b      	ldr	r3, [r5, #0]
   26ee6:	2b00      	cmp	r3, #0
   26ee8:	d0fb      	beq.n	26ee2 <_kill_r+0x1a>
   26eea:	6023      	str	r3, [r4, #0]
   26eec:	bd70      	pop	{r4, r5, r6, pc}
   26eee:	bf00      	nop
   26ef0:	10052634 	.word	0x10052634

00026ef4 <_getpid_r>:
   26ef4:	f004 bd88 	b.w	2ba08 <_getpid>

00026ef8 <__errno>:
   26ef8:	4b01      	ldr	r3, [pc, #4]	@ (26f00 <__errno+0x8>)
   26efa:	6818      	ldr	r0, [r3, #0]
   26efc:	4770      	bx	lr
   26efe:	bf00      	nop
   26f00:	1000c53c 	.word	0x1000c53c

00026f04 <__libc_init_array>:
   26f04:	b570      	push	{r4, r5, r6, lr}
   26f06:	4b0f      	ldr	r3, [pc, #60]	@ (26f44 <__libc_init_array+0x40>)
   26f08:	4d0f      	ldr	r5, [pc, #60]	@ (26f48 <__libc_init_array+0x44>)
   26f0a:	42ab      	cmp	r3, r5
   26f0c:	eba3 0605 	sub.w	r6, r3, r5
   26f10:	d007      	beq.n	26f22 <__libc_init_array+0x1e>
   26f12:	10b6      	asrs	r6, r6, #2
   26f14:	2400      	movs	r4, #0
   26f16:	f855 3b04 	ldr.w	r3, [r5], #4
   26f1a:	3401      	adds	r4, #1
   26f1c:	4798      	blx	r3
   26f1e:	42a6      	cmp	r6, r4
   26f20:	d8f9      	bhi.n	26f16 <__libc_init_array+0x12>
   26f22:	f7f2 fc17 	bl	19754 <_init>
   26f26:	4d09      	ldr	r5, [pc, #36]	@ (26f4c <__libc_init_array+0x48>)
   26f28:	4b09      	ldr	r3, [pc, #36]	@ (26f50 <__libc_init_array+0x4c>)
   26f2a:	1b5e      	subs	r6, r3, r5
   26f2c:	42ab      	cmp	r3, r5
   26f2e:	ea4f 06a6 	mov.w	r6, r6, asr #2
   26f32:	d006      	beq.n	26f42 <__libc_init_array+0x3e>
   26f34:	2400      	movs	r4, #0
   26f36:	f855 3b04 	ldr.w	r3, [r5], #4
   26f3a:	3401      	adds	r4, #1
   26f3c:	4798      	blx	r3
   26f3e:	42a6      	cmp	r6, r4
   26f40:	d8f9      	bhi.n	26f36 <__libc_init_array+0x32>
   26f42:	bd70      	pop	{r4, r5, r6, pc}
   26f44:	00048d44 	.word	0x00048d44
   26f48:	00048d44 	.word	0x00048d44
   26f4c:	00048d44 	.word	0x00048d44
   26f50:	00048d50 	.word	0x00048d50

00026f54 <__retarget_lock_init_recursive>:
   26f54:	4770      	bx	lr
   26f56:	bf00      	nop

00026f58 <__retarget_lock_close_recursive>:
   26f58:	4770      	bx	lr
   26f5a:	bf00      	nop

00026f5c <__retarget_lock_acquire_recursive>:
   26f5c:	4770      	bx	lr
   26f5e:	bf00      	nop

00026f60 <__retarget_lock_release_recursive>:
   26f60:	4770      	bx	lr
   26f62:	bf00      	nop

00026f64 <_wcrtomb_r>:
   26f64:	b570      	push	{r4, r5, r6, lr}
   26f66:	4605      	mov	r5, r0
   26f68:	b084      	sub	sp, #16
   26f6a:	b15b      	cbz	r3, 26f84 <_wcrtomb_r+0x20>
   26f6c:	461c      	mov	r4, r3
   26f6e:	4b0f      	ldr	r3, [pc, #60]	@ (26fac <_wcrtomb_r+0x48>)
   26f70:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
   26f74:	4623      	mov	r3, r4
   26f76:	b169      	cbz	r1, 26f94 <_wcrtomb_r+0x30>
   26f78:	4628      	mov	r0, r5
   26f7a:	47b0      	blx	r6
   26f7c:	1c43      	adds	r3, r0, #1
   26f7e:	d00f      	beq.n	26fa0 <_wcrtomb_r+0x3c>
   26f80:	b004      	add	sp, #16
   26f82:	bd70      	pop	{r4, r5, r6, pc}
   26f84:	4b09      	ldr	r3, [pc, #36]	@ (26fac <_wcrtomb_r+0x48>)
   26f86:	f500 7482 	add.w	r4, r0, #260	@ 0x104
   26f8a:	f8d3 60e0 	ldr.w	r6, [r3, #224]	@ 0xe0
   26f8e:	4623      	mov	r3, r4
   26f90:	2900      	cmp	r1, #0
   26f92:	d1f1      	bne.n	26f78 <_wcrtomb_r+0x14>
   26f94:	460a      	mov	r2, r1
   26f96:	4628      	mov	r0, r5
   26f98:	a901      	add	r1, sp, #4
   26f9a:	47b0      	blx	r6
   26f9c:	1c43      	adds	r3, r0, #1
   26f9e:	d1ef      	bne.n	26f80 <_wcrtomb_r+0x1c>
   26fa0:	2200      	movs	r2, #0
   26fa2:	238a      	movs	r3, #138	@ 0x8a
   26fa4:	6022      	str	r2, [r4, #0]
   26fa6:	602b      	str	r3, [r5, #0]
   26fa8:	b004      	add	sp, #16
   26faa:	bd70      	pop	{r4, r5, r6, pc}
   26fac:	1000c3d0 	.word	0x1000c3d0

00026fb0 <_wcsrtombs_r>:
   26fb0:	b510      	push	{r4, lr}
   26fb2:	b082      	sub	sp, #8
   26fb4:	9c04      	ldr	r4, [sp, #16]
   26fb6:	e9cd 3400 	strd	r3, r4, [sp]
   26fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   26fbe:	f002 ff0b 	bl	29dd8 <_wcsnrtombs_r>
   26fc2:	b002      	add	sp, #8
   26fc4:	bd10      	pop	{r4, pc}
   26fc6:	bf00      	nop

00026fc8 <__register_exitproc>:
   26fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26fcc:	4d1b      	ldr	r5, [pc, #108]	@ (2703c <__register_exitproc+0x74>)
   26fce:	4606      	mov	r6, r0
   26fd0:	6828      	ldr	r0, [r5, #0]
   26fd2:	4698      	mov	r8, r3
   26fd4:	460f      	mov	r7, r1
   26fd6:	4691      	mov	r9, r2
   26fd8:	f7ff ffc0 	bl	26f5c <__retarget_lock_acquire_recursive>
   26fdc:	4b18      	ldr	r3, [pc, #96]	@ (27040 <__register_exitproc+0x78>)
   26fde:	681c      	ldr	r4, [r3, #0]
   26fe0:	b31c      	cbz	r4, 2702a <__register_exitproc+0x62>
   26fe2:	6828      	ldr	r0, [r5, #0]
   26fe4:	6865      	ldr	r5, [r4, #4]
   26fe6:	2d1f      	cmp	r5, #31
   26fe8:	dc22      	bgt.n	27030 <__register_exitproc+0x68>
   26fea:	b94e      	cbnz	r6, 27000 <__register_exitproc+0x38>
   26fec:	1c6b      	adds	r3, r5, #1
   26fee:	3502      	adds	r5, #2
   26ff0:	6063      	str	r3, [r4, #4]
   26ff2:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   26ff6:	f7ff ffb3 	bl	26f60 <__retarget_lock_release_recursive>
   26ffa:	2000      	movs	r0, #0
   26ffc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27000:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   27004:	2301      	movs	r3, #1
   27006:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
   2700a:	f8d4 2188 	ldr.w	r2, [r4, #392]	@ 0x188
   2700e:	40ab      	lsls	r3, r5
   27010:	431a      	orrs	r2, r3
   27012:	2e02      	cmp	r6, #2
   27014:	f8c4 2188 	str.w	r2, [r4, #392]	@ 0x188
   27018:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
   2701c:	d1e6      	bne.n	26fec <__register_exitproc+0x24>
   2701e:	f8d4 218c 	ldr.w	r2, [r4, #396]	@ 0x18c
   27022:	431a      	orrs	r2, r3
   27024:	f8c4 218c 	str.w	r2, [r4, #396]	@ 0x18c
   27028:	e7e0      	b.n	26fec <__register_exitproc+0x24>
   2702a:	4c06      	ldr	r4, [pc, #24]	@ (27044 <__register_exitproc+0x7c>)
   2702c:	601c      	str	r4, [r3, #0]
   2702e:	e7d8      	b.n	26fe2 <__register_exitproc+0x1a>
   27030:	f7ff ff96 	bl	26f60 <__retarget_lock_release_recursive>
   27034:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   27038:	e7e0      	b.n	26ffc <__register_exitproc+0x34>
   2703a:	bf00      	nop
   2703c:	1000c660 	.word	0x1000c660
   27040:	100525fc 	.word	0x100525fc
   27044:	1005246c 	.word	0x1005246c

00027048 <register_fini>:
   27048:	4b02      	ldr	r3, [pc, #8]	@ (27054 <register_fini+0xc>)
   2704a:	b113      	cbz	r3, 27052 <register_fini+0xa>
   2704c:	4802      	ldr	r0, [pc, #8]	@ (27058 <register_fini+0x10>)
   2704e:	f7fe b8b3 	b.w	251b8 <atexit>
   27052:	4770      	bx	lr
   27054:	00000000 	.word	0x00000000
   27058:	00029cb5 	.word	0x00029cb5

0002705c <_malloc_trim_r>:
   2705c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27060:	4606      	mov	r6, r0
   27062:	2008      	movs	r0, #8
   27064:	4689      	mov	r9, r1
   27066:	f002 fe17 	bl	29c98 <sysconf>
   2706a:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 27110 <_malloc_trim_r+0xb4>
   2706e:	4605      	mov	r5, r0
   27070:	4630      	mov	r0, r6
   27072:	f002 fa61 	bl	29538 <__malloc_lock>
   27076:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2707a:	685f      	ldr	r7, [r3, #4]
   2707c:	f027 0703 	bic.w	r7, r7, #3
   27080:	f1a7 0411 	sub.w	r4, r7, #17
   27084:	eba4 0409 	sub.w	r4, r4, r9
   27088:	442c      	add	r4, r5
   2708a:	fbb4 f4f5 	udiv	r4, r4, r5
   2708e:	3c01      	subs	r4, #1
   27090:	fb05 f404 	mul.w	r4, r5, r4
   27094:	42a5      	cmp	r5, r4
   27096:	dc08      	bgt.n	270aa <_malloc_trim_r+0x4e>
   27098:	2100      	movs	r1, #0
   2709a:	4630      	mov	r0, r6
   2709c:	f002 fdd4 	bl	29c48 <_sbrk_r>
   270a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   270a4:	443b      	add	r3, r7
   270a6:	4298      	cmp	r0, r3
   270a8:	d005      	beq.n	270b6 <_malloc_trim_r+0x5a>
   270aa:	4630      	mov	r0, r6
   270ac:	f002 fa4a 	bl	29544 <__malloc_unlock>
   270b0:	2000      	movs	r0, #0
   270b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   270b6:	4261      	negs	r1, r4
   270b8:	4630      	mov	r0, r6
   270ba:	f002 fdc5 	bl	29c48 <_sbrk_r>
   270be:	3001      	adds	r0, #1
   270c0:	d00f      	beq.n	270e2 <_malloc_trim_r+0x86>
   270c2:	4a11      	ldr	r2, [pc, #68]	@ (27108 <_malloc_trim_r+0xac>)
   270c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   270c8:	1b3f      	subs	r7, r7, r4
   270ca:	f047 0701 	orr.w	r7, r7, #1
   270ce:	605f      	str	r7, [r3, #4]
   270d0:	6813      	ldr	r3, [r2, #0]
   270d2:	4630      	mov	r0, r6
   270d4:	1b1b      	subs	r3, r3, r4
   270d6:	6013      	str	r3, [r2, #0]
   270d8:	f002 fa34 	bl	29544 <__malloc_unlock>
   270dc:	2001      	movs	r0, #1
   270de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   270e2:	2100      	movs	r1, #0
   270e4:	4630      	mov	r0, r6
   270e6:	f002 fdaf 	bl	29c48 <_sbrk_r>
   270ea:	f8d8 2008 	ldr.w	r2, [r8, #8]
   270ee:	1a83      	subs	r3, r0, r2
   270f0:	2b0f      	cmp	r3, #15
   270f2:	ddda      	ble.n	270aa <_malloc_trim_r+0x4e>
   270f4:	f043 0301 	orr.w	r3, r3, #1
   270f8:	6053      	str	r3, [r2, #4]
   270fa:	4b04      	ldr	r3, [pc, #16]	@ (2710c <_malloc_trim_r+0xb0>)
   270fc:	4902      	ldr	r1, [pc, #8]	@ (27108 <_malloc_trim_r+0xac>)
   270fe:	681b      	ldr	r3, [r3, #0]
   27100:	1ac0      	subs	r0, r0, r3
   27102:	6008      	str	r0, [r1, #0]
   27104:	e7d1      	b.n	270aa <_malloc_trim_r+0x4e>
   27106:	bf00      	nop
   27108:	10052600 	.word	0x10052600
   2710c:	1000c664 	.word	0x1000c664
   27110:	1000c670 	.word	0x1000c670

00027114 <_free_r>:
   27114:	2900      	cmp	r1, #0
   27116:	d07c      	beq.n	27212 <_free_r+0xfe>
   27118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2711c:	460c      	mov	r4, r1
   2711e:	4680      	mov	r8, r0
   27120:	f002 fa0a 	bl	29538 <__malloc_lock>
   27124:	f854 3c04 	ldr.w	r3, [r4, #-4]
   27128:	4f75      	ldr	r7, [pc, #468]	@ (27300 <_free_r+0x1ec>)
   2712a:	f1a4 0508 	sub.w	r5, r4, #8
   2712e:	f023 0101 	bic.w	r1, r3, #1
   27132:	1868      	adds	r0, r5, r1
   27134:	68be      	ldr	r6, [r7, #8]
   27136:	6842      	ldr	r2, [r0, #4]
   27138:	4286      	cmp	r6, r0
   2713a:	f022 0203 	bic.w	r2, r2, #3
   2713e:	f000 8083 	beq.w	27248 <_free_r+0x134>
   27142:	07de      	lsls	r6, r3, #31
   27144:	6042      	str	r2, [r0, #4]
   27146:	eb00 0c02 	add.w	ip, r0, r2
   2714a:	d433      	bmi.n	271b4 <_free_r+0xa0>
   2714c:	f854 4c08 	ldr.w	r4, [r4, #-8]
   27150:	f8dc 3004 	ldr.w	r3, [ip, #4]
   27154:	1b2d      	subs	r5, r5, r4
   27156:	4421      	add	r1, r4
   27158:	68ac      	ldr	r4, [r5, #8]
   2715a:	f107 0c08 	add.w	ip, r7, #8
   2715e:	4564      	cmp	r4, ip
   27160:	f003 0301 	and.w	r3, r3, #1
   27164:	d064      	beq.n	27230 <_free_r+0x11c>
   27166:	f8d5 e00c 	ldr.w	lr, [r5, #12]
   2716a:	f8c4 e00c 	str.w	lr, [r4, #12]
   2716e:	f8ce 4008 	str.w	r4, [lr, #8]
   27172:	2b00      	cmp	r3, #0
   27174:	f000 8081 	beq.w	2727a <_free_r+0x166>
   27178:	f041 0301 	orr.w	r3, r1, #1
   2717c:	606b      	str	r3, [r5, #4]
   2717e:	6001      	str	r1, [r0, #0]
   27180:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   27184:	d222      	bcs.n	271cc <_free_r+0xb8>
   27186:	6878      	ldr	r0, [r7, #4]
   27188:	08cb      	lsrs	r3, r1, #3
   2718a:	2201      	movs	r2, #1
   2718c:	0949      	lsrs	r1, r1, #5
   2718e:	3301      	adds	r3, #1
   27190:	408a      	lsls	r2, r1
   27192:	4302      	orrs	r2, r0
   27194:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   27198:	607a      	str	r2, [r7, #4]
   2719a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2719e:	3a08      	subs	r2, #8
   271a0:	e9c5 1202 	strd	r1, r2, [r5, #8]
   271a4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   271a8:	60cd      	str	r5, [r1, #12]
   271aa:	4640      	mov	r0, r8
   271ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   271b0:	f002 b9c8 	b.w	29544 <__malloc_unlock>
   271b4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   271b8:	07db      	lsls	r3, r3, #31
   271ba:	d52b      	bpl.n	27214 <_free_r+0x100>
   271bc:	f041 0301 	orr.w	r3, r1, #1
   271c0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   271c4:	f844 3c04 	str.w	r3, [r4, #-4]
   271c8:	6001      	str	r1, [r0, #0]
   271ca:	d3dc      	bcc.n	27186 <_free_r+0x72>
   271cc:	f5b1 6f20 	cmp.w	r1, #2560	@ 0xa00
   271d0:	ea4f 2351 	mov.w	r3, r1, lsr #9
   271d4:	d253      	bcs.n	2727e <_free_r+0x16a>
   271d6:	098b      	lsrs	r3, r1, #6
   271d8:	f103 0039 	add.w	r0, r3, #57	@ 0x39
   271dc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
   271e0:	00c3      	lsls	r3, r0, #3
   271e2:	18f8      	adds	r0, r7, r3
   271e4:	58fb      	ldr	r3, [r7, r3]
   271e6:	3808      	subs	r0, #8
   271e8:	4298      	cmp	r0, r3
   271ea:	d103      	bne.n	271f4 <_free_r+0xe0>
   271ec:	e061      	b.n	272b2 <_free_r+0x19e>
   271ee:	689b      	ldr	r3, [r3, #8]
   271f0:	4298      	cmp	r0, r3
   271f2:	d004      	beq.n	271fe <_free_r+0xea>
   271f4:	685a      	ldr	r2, [r3, #4]
   271f6:	f022 0203 	bic.w	r2, r2, #3
   271fa:	428a      	cmp	r2, r1
   271fc:	d8f7      	bhi.n	271ee <_free_r+0xda>
   271fe:	68d8      	ldr	r0, [r3, #12]
   27200:	e9c5 3002 	strd	r3, r0, [r5, #8]
   27204:	6085      	str	r5, [r0, #8]
   27206:	60dd      	str	r5, [r3, #12]
   27208:	4640      	mov	r0, r8
   2720a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2720e:	f002 b999 	b.w	29544 <__malloc_unlock>
   27212:	4770      	bx	lr
   27214:	4411      	add	r1, r2
   27216:	f107 0c08 	add.w	ip, r7, #8
   2721a:	6883      	ldr	r3, [r0, #8]
   2721c:	4563      	cmp	r3, ip
   2721e:	d03f      	beq.n	272a0 <_free_r+0x18c>
   27220:	68c2      	ldr	r2, [r0, #12]
   27222:	60da      	str	r2, [r3, #12]
   27224:	6093      	str	r3, [r2, #8]
   27226:	f041 0301 	orr.w	r3, r1, #1
   2722a:	606b      	str	r3, [r5, #4]
   2722c:	5069      	str	r1, [r5, r1]
   2722e:	e7a7      	b.n	27180 <_free_r+0x6c>
   27230:	2b00      	cmp	r3, #0
   27232:	d15f      	bne.n	272f4 <_free_r+0x1e0>
   27234:	440a      	add	r2, r1
   27236:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   2723a:	60cb      	str	r3, [r1, #12]
   2723c:	6099      	str	r1, [r3, #8]
   2723e:	f042 0301 	orr.w	r3, r2, #1
   27242:	606b      	str	r3, [r5, #4]
   27244:	50aa      	str	r2, [r5, r2]
   27246:	e7b0      	b.n	271aa <_free_r+0x96>
   27248:	07db      	lsls	r3, r3, #31
   2724a:	440a      	add	r2, r1
   2724c:	d407      	bmi.n	2725e <_free_r+0x14a>
   2724e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   27252:	1aed      	subs	r5, r5, r3
   27254:	441a      	add	r2, r3
   27256:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
   2725a:	60cb      	str	r3, [r1, #12]
   2725c:	6099      	str	r1, [r3, #8]
   2725e:	f042 0301 	orr.w	r3, r2, #1
   27262:	606b      	str	r3, [r5, #4]
   27264:	4b27      	ldr	r3, [pc, #156]	@ (27304 <_free_r+0x1f0>)
   27266:	60bd      	str	r5, [r7, #8]
   27268:	681b      	ldr	r3, [r3, #0]
   2726a:	4293      	cmp	r3, r2
   2726c:	d89d      	bhi.n	271aa <_free_r+0x96>
   2726e:	4b26      	ldr	r3, [pc, #152]	@ (27308 <_free_r+0x1f4>)
   27270:	4640      	mov	r0, r8
   27272:	6819      	ldr	r1, [r3, #0]
   27274:	f7ff fef2 	bl	2705c <_malloc_trim_r>
   27278:	e797      	b.n	271aa <_free_r+0x96>
   2727a:	4411      	add	r1, r2
   2727c:	e7cd      	b.n	2721a <_free_r+0x106>
   2727e:	2b14      	cmp	r3, #20
   27280:	d908      	bls.n	27294 <_free_r+0x180>
   27282:	2b54      	cmp	r3, #84	@ 0x54
   27284:	d81d      	bhi.n	272c2 <_free_r+0x1ae>
   27286:	0b0b      	lsrs	r3, r1, #12
   27288:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
   2728c:	f103 026e 	add.w	r2, r3, #110	@ 0x6e
   27290:	00c3      	lsls	r3, r0, #3
   27292:	e7a6      	b.n	271e2 <_free_r+0xce>
   27294:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
   27298:	f103 025b 	add.w	r2, r3, #91	@ 0x5b
   2729c:	00c3      	lsls	r3, r0, #3
   2729e:	e7a0      	b.n	271e2 <_free_r+0xce>
   272a0:	f041 0301 	orr.w	r3, r1, #1
   272a4:	e9c7 5504 	strd	r5, r5, [r7, #16]
   272a8:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   272ac:	606b      	str	r3, [r5, #4]
   272ae:	5069      	str	r1, [r5, r1]
   272b0:	e77b      	b.n	271aa <_free_r+0x96>
   272b2:	6879      	ldr	r1, [r7, #4]
   272b4:	1092      	asrs	r2, r2, #2
   272b6:	2401      	movs	r4, #1
   272b8:	fa04 f202 	lsl.w	r2, r4, r2
   272bc:	430a      	orrs	r2, r1
   272be:	607a      	str	r2, [r7, #4]
   272c0:	e79e      	b.n	27200 <_free_r+0xec>
   272c2:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
   272c6:	d806      	bhi.n	272d6 <_free_r+0x1c2>
   272c8:	0bcb      	lsrs	r3, r1, #15
   272ca:	f103 0078 	add.w	r0, r3, #120	@ 0x78
   272ce:	f103 0277 	add.w	r2, r3, #119	@ 0x77
   272d2:	00c3      	lsls	r3, r0, #3
   272d4:	e785      	b.n	271e2 <_free_r+0xce>
   272d6:	f240 5254 	movw	r2, #1364	@ 0x554
   272da:	4293      	cmp	r3, r2
   272dc:	d806      	bhi.n	272ec <_free_r+0x1d8>
   272de:	0c8b      	lsrs	r3, r1, #18
   272e0:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
   272e4:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
   272e8:	00c3      	lsls	r3, r0, #3
   272ea:	e77a      	b.n	271e2 <_free_r+0xce>
   272ec:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
   272f0:	227e      	movs	r2, #126	@ 0x7e
   272f2:	e776      	b.n	271e2 <_free_r+0xce>
   272f4:	f041 0301 	orr.w	r3, r1, #1
   272f8:	606b      	str	r3, [r5, #4]
   272fa:	6001      	str	r1, [r0, #0]
   272fc:	e755      	b.n	271aa <_free_r+0x96>
   272fe:	bf00      	nop
   27300:	1000c670 	.word	0x1000c670
   27304:	1000c668 	.word	0x1000c668
   27308:	10052630 	.word	0x10052630

0002730c <_findenv_r>:
   2730c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27310:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 27388 <_findenv_r+0x7c>
   27314:	4607      	mov	r7, r0
   27316:	460e      	mov	r6, r1
   27318:	4690      	mov	r8, r2
   2731a:	f003 fd45 	bl	2ada8 <__env_lock>
   2731e:	f8d9 5000 	ldr.w	r5, [r9]
   27322:	b14d      	cbz	r5, 27338 <_findenv_r+0x2c>
   27324:	7833      	ldrb	r3, [r6, #0]
   27326:	461c      	mov	r4, r3
   27328:	b16b      	cbz	r3, 27346 <_findenv_r+0x3a>
   2732a:	4634      	mov	r4, r6
   2732c:	e002      	b.n	27334 <_findenv_r+0x28>
   2732e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   27332:	b13b      	cbz	r3, 27344 <_findenv_r+0x38>
   27334:	2b3d      	cmp	r3, #61	@ 0x3d
   27336:	d1fa      	bne.n	2732e <_findenv_r+0x22>
   27338:	4638      	mov	r0, r7
   2733a:	f003 fd3b 	bl	2adb4 <__env_unlock>
   2733e:	2000      	movs	r0, #0
   27340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27344:	1ba4      	subs	r4, r4, r6
   27346:	6828      	ldr	r0, [r5, #0]
   27348:	2800      	cmp	r0, #0
   2734a:	d0f5      	beq.n	27338 <_findenv_r+0x2c>
   2734c:	4622      	mov	r2, r4
   2734e:	4631      	mov	r1, r6
   27350:	f7ff fd0a 	bl	26d68 <strncmp>
   27354:	b928      	cbnz	r0, 27362 <_findenv_r+0x56>
   27356:	6828      	ldr	r0, [r5, #0]
   27358:	5d03      	ldrb	r3, [r0, r4]
   2735a:	2b3d      	cmp	r3, #61	@ 0x3d
   2735c:	eb00 0a04 	add.w	sl, r0, r4
   27360:	d004      	beq.n	2736c <_findenv_r+0x60>
   27362:	f855 0f04 	ldr.w	r0, [r5, #4]!
   27366:	2800      	cmp	r0, #0
   27368:	d1f0      	bne.n	2734c <_findenv_r+0x40>
   2736a:	e7e5      	b.n	27338 <_findenv_r+0x2c>
   2736c:	f8d9 3000 	ldr.w	r3, [r9]
   27370:	1aeb      	subs	r3, r5, r3
   27372:	109b      	asrs	r3, r3, #2
   27374:	4638      	mov	r0, r7
   27376:	f8c8 3000 	str.w	r3, [r8]
   2737a:	f003 fd1b 	bl	2adb4 <__env_unlock>
   2737e:	f10a 0001 	add.w	r0, sl, #1
   27382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27386:	bf00      	nop
   27388:	1000ca78 	.word	0x1000ca78

0002738c <_malloc_r>:
   2738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27390:	f101 050b 	add.w	r5, r1, #11
   27394:	2d16      	cmp	r5, #22
   27396:	b083      	sub	sp, #12
   27398:	4606      	mov	r6, r0
   2739a:	d823      	bhi.n	273e4 <_malloc_r+0x58>
   2739c:	2910      	cmp	r1, #16
   2739e:	f200 80af 	bhi.w	27500 <_malloc_r+0x174>
   273a2:	f002 f8c9 	bl	29538 <__malloc_lock>
   273a6:	2510      	movs	r5, #16
   273a8:	2318      	movs	r3, #24
   273aa:	2002      	movs	r0, #2
   273ac:	4fb7      	ldr	r7, [pc, #732]	@ (2768c <_malloc_r+0x300>)
   273ae:	443b      	add	r3, r7
   273b0:	f1a3 0208 	sub.w	r2, r3, #8
   273b4:	685c      	ldr	r4, [r3, #4]
   273b6:	4294      	cmp	r4, r2
   273b8:	f000 811e 	beq.w	275f8 <_malloc_r+0x26c>
   273bc:	6863      	ldr	r3, [r4, #4]
   273be:	68e2      	ldr	r2, [r4, #12]
   273c0:	68a1      	ldr	r1, [r4, #8]
   273c2:	f023 0303 	bic.w	r3, r3, #3
   273c6:	60ca      	str	r2, [r1, #12]
   273c8:	4423      	add	r3, r4
   273ca:	4630      	mov	r0, r6
   273cc:	6091      	str	r1, [r2, #8]
   273ce:	685a      	ldr	r2, [r3, #4]
   273d0:	f042 0201 	orr.w	r2, r2, #1
   273d4:	605a      	str	r2, [r3, #4]
   273d6:	f002 f8b5 	bl	29544 <__malloc_unlock>
   273da:	3408      	adds	r4, #8
   273dc:	4620      	mov	r0, r4
   273de:	b003      	add	sp, #12
   273e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   273e4:	f035 0507 	bics.w	r5, r5, #7
   273e8:	f100 808a 	bmi.w	27500 <_malloc_r+0x174>
   273ec:	42a9      	cmp	r1, r5
   273ee:	f200 8087 	bhi.w	27500 <_malloc_r+0x174>
   273f2:	f002 f8a1 	bl	29538 <__malloc_lock>
   273f6:	f5b5 7ffc 	cmp.w	r5, #504	@ 0x1f8
   273fa:	f0c0 816e 	bcc.w	276da <_malloc_r+0x34e>
   273fe:	0a6b      	lsrs	r3, r5, #9
   27400:	f000 8082 	beq.w	27508 <_malloc_r+0x17c>
   27404:	2b04      	cmp	r3, #4
   27406:	f200 811d 	bhi.w	27644 <_malloc_r+0x2b8>
   2740a:	09ab      	lsrs	r3, r5, #6
   2740c:	f103 0039 	add.w	r0, r3, #57	@ 0x39
   27410:	f103 0e38 	add.w	lr, r3, #56	@ 0x38
   27414:	00c3      	lsls	r3, r0, #3
   27416:	4f9d      	ldr	r7, [pc, #628]	@ (2768c <_malloc_r+0x300>)
   27418:	443b      	add	r3, r7
   2741a:	f1a3 0c08 	sub.w	ip, r3, #8
   2741e:	685c      	ldr	r4, [r3, #4]
   27420:	45a4      	cmp	ip, r4
   27422:	d107      	bne.n	27434 <_malloc_r+0xa8>
   27424:	e00d      	b.n	27442 <_malloc_r+0xb6>
   27426:	2a00      	cmp	r2, #0
   27428:	68e1      	ldr	r1, [r4, #12]
   2742a:	f280 80df 	bge.w	275ec <_malloc_r+0x260>
   2742e:	458c      	cmp	ip, r1
   27430:	d007      	beq.n	27442 <_malloc_r+0xb6>
   27432:	460c      	mov	r4, r1
   27434:	6863      	ldr	r3, [r4, #4]
   27436:	f023 0303 	bic.w	r3, r3, #3
   2743a:	1b5a      	subs	r2, r3, r5
   2743c:	2a0f      	cmp	r2, #15
   2743e:	ddf2      	ble.n	27426 <_malloc_r+0x9a>
   27440:	4670      	mov	r0, lr
   27442:	f8df 8260 	ldr.w	r8, [pc, #608]	@ 276a4 <_malloc_r+0x318>
   27446:	693c      	ldr	r4, [r7, #16]
   27448:	4544      	cmp	r4, r8
   2744a:	f000 80bc 	beq.w	275c6 <_malloc_r+0x23a>
   2744e:	6863      	ldr	r3, [r4, #4]
   27450:	f023 0c03 	bic.w	ip, r3, #3
   27454:	ebac 0305 	sub.w	r3, ip, r5
   27458:	2b0f      	cmp	r3, #15
   2745a:	f300 8142 	bgt.w	276e2 <_malloc_r+0x356>
   2745e:	2b00      	cmp	r3, #0
   27460:	e9c7 8804 	strd	r8, r8, [r7, #16]
   27464:	f280 812d 	bge.w	276c2 <_malloc_r+0x336>
   27468:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
   2746c:	f8d7 e004 	ldr.w	lr, [r7, #4]
   27470:	f080 80c8 	bcs.w	27604 <_malloc_r+0x278>
   27474:	ea4f 01dc 	mov.w	r1, ip, lsr #3
   27478:	3101      	adds	r1, #1
   2747a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   2747e:	2301      	movs	r3, #1
   27480:	fa03 f30c 	lsl.w	r3, r3, ip
   27484:	f857 2031 	ldr.w	r2, [r7, r1, lsl #3]
   27488:	60a2      	str	r2, [r4, #8]
   2748a:	ea4e 0e03 	orr.w	lr, lr, r3
   2748e:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   27492:	3b08      	subs	r3, #8
   27494:	60e3      	str	r3, [r4, #12]
   27496:	f8c7 e004 	str.w	lr, [r7, #4]
   2749a:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
   2749e:	60d4      	str	r4, [r2, #12]
   274a0:	1083      	asrs	r3, r0, #2
   274a2:	f04f 0c01 	mov.w	ip, #1
   274a6:	fa0c fc03 	lsl.w	ip, ip, r3
   274aa:	45f4      	cmp	ip, lr
   274ac:	d832      	bhi.n	27514 <_malloc_r+0x188>
   274ae:	ea1c 0f0e 	tst.w	ip, lr
   274b2:	d108      	bne.n	274c6 <_malloc_r+0x13a>
   274b4:	f020 0003 	bic.w	r0, r0, #3
   274b8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   274bc:	ea1c 0f0e 	tst.w	ip, lr
   274c0:	f100 0004 	add.w	r0, r0, #4
   274c4:	d0f8      	beq.n	274b8 <_malloc_r+0x12c>
   274c6:	eb07 0ac0 	add.w	sl, r7, r0, lsl #3
   274ca:	46d6      	mov	lr, sl
   274cc:	4681      	mov	r9, r0
   274ce:	f8de 300c 	ldr.w	r3, [lr, #12]
   274d2:	e00b      	b.n	274ec <_malloc_r+0x160>
   274d4:	6859      	ldr	r1, [r3, #4]
   274d6:	f021 0103 	bic.w	r1, r1, #3
   274da:	1b4a      	subs	r2, r1, r5
   274dc:	2a0f      	cmp	r2, #15
   274de:	461c      	mov	r4, r3
   274e0:	68db      	ldr	r3, [r3, #12]
   274e2:	f300 80bb 	bgt.w	2765c <_malloc_r+0x2d0>
   274e6:	2a00      	cmp	r2, #0
   274e8:	f280 80de 	bge.w	276a8 <_malloc_r+0x31c>
   274ec:	459e      	cmp	lr, r3
   274ee:	d1f1      	bne.n	274d4 <_malloc_r+0x148>
   274f0:	f109 0901 	add.w	r9, r9, #1
   274f4:	f019 0f03 	tst.w	r9, #3
   274f8:	f10e 0e08 	add.w	lr, lr, #8
   274fc:	d1e7      	bne.n	274ce <_malloc_r+0x142>
   274fe:	e119      	b.n	27734 <_malloc_r+0x3a8>
   27500:	230c      	movs	r3, #12
   27502:	6033      	str	r3, [r6, #0]
   27504:	2400      	movs	r4, #0
   27506:	e769      	b.n	273dc <_malloc_r+0x50>
   27508:	f44f 7300 	mov.w	r3, #512	@ 0x200
   2750c:	2040      	movs	r0, #64	@ 0x40
   2750e:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
   27512:	e780      	b.n	27416 <_malloc_r+0x8a>
   27514:	68bc      	ldr	r4, [r7, #8]
   27516:	6863      	ldr	r3, [r4, #4]
   27518:	f023 0903 	bic.w	r9, r3, #3
   2751c:	45a9      	cmp	r9, r5
   2751e:	d303      	bcc.n	27528 <_malloc_r+0x19c>
   27520:	eba9 0305 	sub.w	r3, r9, r5
   27524:	2b0f      	cmp	r3, #15
   27526:	dc51      	bgt.n	275cc <_malloc_r+0x240>
   27528:	4b59      	ldr	r3, [pc, #356]	@ (27690 <_malloc_r+0x304>)
   2752a:	681b      	ldr	r3, [r3, #0]
   2752c:	2008      	movs	r0, #8
   2752e:	f103 0810 	add.w	r8, r3, #16
   27532:	eb04 0309 	add.w	r3, r4, r9
   27536:	9300      	str	r3, [sp, #0]
   27538:	f002 fbae 	bl	29c98 <sysconf>
   2753c:	4a55      	ldr	r2, [pc, #340]	@ (27694 <_malloc_r+0x308>)
   2753e:	6813      	ldr	r3, [r2, #0]
   27540:	3301      	adds	r3, #1
   27542:	44a8      	add	r8, r5
   27544:	4683      	mov	fp, r0
   27546:	d005      	beq.n	27554 <_malloc_r+0x1c8>
   27548:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
   2754c:	4480      	add	r8, r0
   2754e:	4243      	negs	r3, r0
   27550:	ea03 0808 	and.w	r8, r3, r8
   27554:	4641      	mov	r1, r8
   27556:	4630      	mov	r0, r6
   27558:	f002 fb76 	bl	29c48 <_sbrk_r>
   2755c:	f1b0 3fff 	cmp.w	r0, #4294967295	@ 0xffffffff
   27560:	4a4c      	ldr	r2, [pc, #304]	@ (27694 <_malloc_r+0x308>)
   27562:	4682      	mov	sl, r0
   27564:	f000 80d8 	beq.w	27718 <_malloc_r+0x38c>
   27568:	9b00      	ldr	r3, [sp, #0]
   2756a:	4283      	cmp	r3, r0
   2756c:	f200 80d2 	bhi.w	27714 <_malloc_r+0x388>
   27570:	4b49      	ldr	r3, [pc, #292]	@ (27698 <_malloc_r+0x30c>)
   27572:	6818      	ldr	r0, [r3, #0]
   27574:	4440      	add	r0, r8
   27576:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
   2757a:	6018      	str	r0, [r3, #0]
   2757c:	4684      	mov	ip, r0
   2757e:	f040 80fc 	bne.w	2777a <_malloc_r+0x3ee>
   27582:	ea1a 0f01 	tst.w	sl, r1
   27586:	f040 80f8 	bne.w	2777a <_malloc_r+0x3ee>
   2758a:	f8d7 a008 	ldr.w	sl, [r7, #8]
   2758e:	44c8      	add	r8, r9
   27590:	f048 0201 	orr.w	r2, r8, #1
   27594:	f8ca 2004 	str.w	r2, [sl, #4]
   27598:	4b40      	ldr	r3, [pc, #256]	@ (2769c <_malloc_r+0x310>)
   2759a:	6819      	ldr	r1, [r3, #0]
   2759c:	4281      	cmp	r1, r0
   2759e:	bf38      	it	cc
   275a0:	6018      	strcc	r0, [r3, #0]
   275a2:	4b3f      	ldr	r3, [pc, #252]	@ (276a0 <_malloc_r+0x314>)
   275a4:	6819      	ldr	r1, [r3, #0]
   275a6:	4281      	cmp	r1, r0
   275a8:	bf38      	it	cc
   275aa:	6018      	strcc	r0, [r3, #0]
   275ac:	4654      	mov	r4, sl
   275ae:	f022 0803 	bic.w	r8, r2, #3
   275b2:	45a8      	cmp	r8, r5
   275b4:	eba8 0305 	sub.w	r3, r8, r5
   275b8:	d301      	bcc.n	275be <_malloc_r+0x232>
   275ba:	2b0f      	cmp	r3, #15
   275bc:	dc06      	bgt.n	275cc <_malloc_r+0x240>
   275be:	4630      	mov	r0, r6
   275c0:	f001 ffc0 	bl	29544 <__malloc_unlock>
   275c4:	e79e      	b.n	27504 <_malloc_r+0x178>
   275c6:	f8d7 e004 	ldr.w	lr, [r7, #4]
   275ca:	e769      	b.n	274a0 <_malloc_r+0x114>
   275cc:	1962      	adds	r2, r4, r5
   275ce:	f043 0301 	orr.w	r3, r3, #1
   275d2:	f045 0501 	orr.w	r5, r5, #1
   275d6:	6065      	str	r5, [r4, #4]
   275d8:	4630      	mov	r0, r6
   275da:	60ba      	str	r2, [r7, #8]
   275dc:	6053      	str	r3, [r2, #4]
   275de:	f001 ffb1 	bl	29544 <__malloc_unlock>
   275e2:	3408      	adds	r4, #8
   275e4:	4620      	mov	r0, r4
   275e6:	b003      	add	sp, #12
   275e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275ec:	68a2      	ldr	r2, [r4, #8]
   275ee:	4423      	add	r3, r4
   275f0:	60d1      	str	r1, [r2, #12]
   275f2:	4630      	mov	r0, r6
   275f4:	608a      	str	r2, [r1, #8]
   275f6:	e6ea      	b.n	273ce <_malloc_r+0x42>
   275f8:	68dc      	ldr	r4, [r3, #12]
   275fa:	42a3      	cmp	r3, r4
   275fc:	f47f aede 	bne.w	273bc <_malloc_r+0x30>
   27600:	3002      	adds	r0, #2
   27602:	e71e      	b.n	27442 <_malloc_r+0xb6>
   27604:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
   27608:	ea4f 225c 	mov.w	r2, ip, lsr #9
   2760c:	d37b      	bcc.n	27706 <_malloc_r+0x37a>
   2760e:	2a14      	cmp	r2, #20
   27610:	f200 8112 	bhi.w	27838 <_malloc_r+0x4ac>
   27614:	f102 035c 	add.w	r3, r2, #92	@ 0x5c
   27618:	00db      	lsls	r3, r3, #3
   2761a:	325b      	adds	r2, #91	@ 0x5b
   2761c:	18f9      	adds	r1, r7, r3
   2761e:	58fb      	ldr	r3, [r7, r3]
   27620:	3908      	subs	r1, #8
   27622:	4299      	cmp	r1, r3
   27624:	d103      	bne.n	2762e <_malloc_r+0x2a2>
   27626:	e0ec      	b.n	27802 <_malloc_r+0x476>
   27628:	689b      	ldr	r3, [r3, #8]
   2762a:	4299      	cmp	r1, r3
   2762c:	d004      	beq.n	27638 <_malloc_r+0x2ac>
   2762e:	685a      	ldr	r2, [r3, #4]
   27630:	f022 0203 	bic.w	r2, r2, #3
   27634:	4562      	cmp	r2, ip
   27636:	d8f7      	bhi.n	27628 <_malloc_r+0x29c>
   27638:	68d9      	ldr	r1, [r3, #12]
   2763a:	e9c4 3102 	strd	r3, r1, [r4, #8]
   2763e:	608c      	str	r4, [r1, #8]
   27640:	60dc      	str	r4, [r3, #12]
   27642:	e72d      	b.n	274a0 <_malloc_r+0x114>
   27644:	2b14      	cmp	r3, #20
   27646:	d96a      	bls.n	2771e <_malloc_r+0x392>
   27648:	2b54      	cmp	r3, #84	@ 0x54
   2764a:	f200 80fe 	bhi.w	2784a <_malloc_r+0x4be>
   2764e:	0b2b      	lsrs	r3, r5, #12
   27650:	f103 006f 	add.w	r0, r3, #111	@ 0x6f
   27654:	f103 0e6e 	add.w	lr, r3, #110	@ 0x6e
   27658:	00c3      	lsls	r3, r0, #3
   2765a:	e6dc      	b.n	27416 <_malloc_r+0x8a>
   2765c:	f8d4 c008 	ldr.w	ip, [r4, #8]
   27660:	4630      	mov	r0, r6
   27662:	1966      	adds	r6, r4, r5
   27664:	f045 0501 	orr.w	r5, r5, #1
   27668:	6065      	str	r5, [r4, #4]
   2766a:	f8cc 300c 	str.w	r3, [ip, #12]
   2766e:	f8c3 c008 	str.w	ip, [r3, #8]
   27672:	f042 0301 	orr.w	r3, r2, #1
   27676:	e9c7 6604 	strd	r6, r6, [r7, #16]
   2767a:	e9c6 8802 	strd	r8, r8, [r6, #8]
   2767e:	6073      	str	r3, [r6, #4]
   27680:	5062      	str	r2, [r4, r1]
   27682:	f001 ff5f 	bl	29544 <__malloc_unlock>
   27686:	3408      	adds	r4, #8
   27688:	e6a8      	b.n	273dc <_malloc_r+0x50>
   2768a:	bf00      	nop
   2768c:	1000c670 	.word	0x1000c670
   27690:	10052630 	.word	0x10052630
   27694:	1000c664 	.word	0x1000c664
   27698:	10052600 	.word	0x10052600
   2769c:	1005262c 	.word	0x1005262c
   276a0:	10052628 	.word	0x10052628
   276a4:	1000c678 	.word	0x1000c678
   276a8:	4421      	add	r1, r4
   276aa:	4630      	mov	r0, r6
   276ac:	684a      	ldr	r2, [r1, #4]
   276ae:	f042 0201 	orr.w	r2, r2, #1
   276b2:	604a      	str	r2, [r1, #4]
   276b4:	f854 2f08 	ldr.w	r2, [r4, #8]!
   276b8:	60d3      	str	r3, [r2, #12]
   276ba:	609a      	str	r2, [r3, #8]
   276bc:	f001 ff42 	bl	29544 <__malloc_unlock>
   276c0:	e68c      	b.n	273dc <_malloc_r+0x50>
   276c2:	44a4      	add	ip, r4
   276c4:	4630      	mov	r0, r6
   276c6:	f8dc 3004 	ldr.w	r3, [ip, #4]
   276ca:	f043 0301 	orr.w	r3, r3, #1
   276ce:	f8cc 3004 	str.w	r3, [ip, #4]
   276d2:	f001 ff37 	bl	29544 <__malloc_unlock>
   276d6:	3408      	adds	r4, #8
   276d8:	e680      	b.n	273dc <_malloc_r+0x50>
   276da:	08e8      	lsrs	r0, r5, #3
   276dc:	f105 0308 	add.w	r3, r5, #8
   276e0:	e664      	b.n	273ac <_malloc_r+0x20>
   276e2:	1962      	adds	r2, r4, r5
   276e4:	f043 0101 	orr.w	r1, r3, #1
   276e8:	f045 0501 	orr.w	r5, r5, #1
   276ec:	6065      	str	r5, [r4, #4]
   276ee:	4630      	mov	r0, r6
   276f0:	e9c7 2204 	strd	r2, r2, [r7, #16]
   276f4:	e9c2 8802 	strd	r8, r8, [r2, #8]
   276f8:	6051      	str	r1, [r2, #4]
   276fa:	f844 300c 	str.w	r3, [r4, ip]
   276fe:	f001 ff21 	bl	29544 <__malloc_unlock>
   27702:	3408      	adds	r4, #8
   27704:	e66a      	b.n	273dc <_malloc_r+0x50>
   27706:	ea4f 129c 	mov.w	r2, ip, lsr #6
   2770a:	f102 0339 	add.w	r3, r2, #57	@ 0x39
   2770e:	00db      	lsls	r3, r3, #3
   27710:	3238      	adds	r2, #56	@ 0x38
   27712:	e783      	b.n	2761c <_malloc_r+0x290>
   27714:	42bc      	cmp	r4, r7
   27716:	d028      	beq.n	2776a <_malloc_r+0x3de>
   27718:	68bc      	ldr	r4, [r7, #8]
   2771a:	6862      	ldr	r2, [r4, #4]
   2771c:	e747      	b.n	275ae <_malloc_r+0x222>
   2771e:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
   27722:	f103 0e5b 	add.w	lr, r3, #91	@ 0x5b
   27726:	00c3      	lsls	r3, r0, #3
   27728:	e675      	b.n	27416 <_malloc_r+0x8a>
   2772a:	f85a 3908 	ldr.w	r3, [sl], #-8
   2772e:	4553      	cmp	r3, sl
   27730:	f040 80d9 	bne.w	278e6 <_malloc_r+0x55a>
   27734:	f010 0f03 	tst.w	r0, #3
   27738:	f100 30ff 	add.w	r0, r0, #4294967295	@ 0xffffffff
   2773c:	d1f5      	bne.n	2772a <_malloc_r+0x39e>
   2773e:	687b      	ldr	r3, [r7, #4]
   27740:	ea23 030c 	bic.w	r3, r3, ip
   27744:	607b      	str	r3, [r7, #4]
   27746:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   2774a:	459c      	cmp	ip, r3
   2774c:	f63f aee2 	bhi.w	27514 <_malloc_r+0x188>
   27750:	f1bc 0f00 	cmp.w	ip, #0
   27754:	d104      	bne.n	27760 <_malloc_r+0x3d4>
   27756:	e6dd      	b.n	27514 <_malloc_r+0x188>
   27758:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   2775c:	f109 0904 	add.w	r9, r9, #4
   27760:	ea1c 0f03 	tst.w	ip, r3
   27764:	d0f8      	beq.n	27758 <_malloc_r+0x3cc>
   27766:	4648      	mov	r0, r9
   27768:	e6ad      	b.n	274c6 <_malloc_r+0x13a>
   2776a:	4b60      	ldr	r3, [pc, #384]	@ (278ec <_malloc_r+0x560>)
   2776c:	6818      	ldr	r0, [r3, #0]
   2776e:	eb08 0c00 	add.w	ip, r8, r0
   27772:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
   27776:	f8c3 c000 	str.w	ip, [r3]
   2777a:	6810      	ldr	r0, [r2, #0]
   2777c:	3001      	adds	r0, #1
   2777e:	d06e      	beq.n	2785e <_malloc_r+0x4d2>
   27780:	9a00      	ldr	r2, [sp, #0]
   27782:	ebaa 0202 	sub.w	r2, sl, r2
   27786:	4462      	add	r2, ip
   27788:	601a      	str	r2, [r3, #0]
   2778a:	f01a 0207 	ands.w	r2, sl, #7
   2778e:	e9cd 2300 	strd	r2, r3, [sp]
   27792:	d040      	beq.n	27816 <_malloc_r+0x48a>
   27794:	f1c2 0208 	rsb	r2, r2, #8
   27798:	4492      	add	sl, r2
   2779a:	44d0      	add	r8, sl
   2779c:	ea08 0001 	and.w	r0, r8, r1
   277a0:	445a      	add	r2, fp
   277a2:	1a12      	subs	r2, r2, r0
   277a4:	ea02 0b01 	and.w	fp, r2, r1
   277a8:	4659      	mov	r1, fp
   277aa:	4630      	mov	r0, r6
   277ac:	f002 fa4c 	bl	29c48 <_sbrk_r>
   277b0:	1c42      	adds	r2, r0, #1
   277b2:	9b01      	ldr	r3, [sp, #4]
   277b4:	d06f      	beq.n	27896 <_malloc_r+0x50a>
   277b6:	eba0 000a 	sub.w	r0, r0, sl
   277ba:	eb00 080b 	add.w	r8, r0, fp
   277be:	6818      	ldr	r0, [r3, #0]
   277c0:	f8c7 a008 	str.w	sl, [r7, #8]
   277c4:	f048 0201 	orr.w	r2, r8, #1
   277c8:	4458      	add	r0, fp
   277ca:	42bc      	cmp	r4, r7
   277cc:	f8ca 2004 	str.w	r2, [sl, #4]
   277d0:	6018      	str	r0, [r3, #0]
   277d2:	f43f aee1 	beq.w	27598 <_malloc_r+0x20c>
   277d6:	f1b9 0f0f 	cmp.w	r9, #15
   277da:	d943      	bls.n	27864 <_malloc_r+0x4d8>
   277dc:	6861      	ldr	r1, [r4, #4]
   277de:	f1a9 020c 	sub.w	r2, r9, #12
   277e2:	f022 0207 	bic.w	r2, r2, #7
   277e6:	f001 0101 	and.w	r1, r1, #1
   277ea:	4311      	orrs	r1, r2
   277ec:	6061      	str	r1, [r4, #4]
   277ee:	f04f 0c05 	mov.w	ip, #5
   277f2:	18a1      	adds	r1, r4, r2
   277f4:	2a0f      	cmp	r2, #15
   277f6:	e9c1 cc01 	strd	ip, ip, [r1, #4]
   277fa:	d854      	bhi.n	278a6 <_malloc_r+0x51a>
   277fc:	f8da 2004 	ldr.w	r2, [sl, #4]
   27800:	e6ca      	b.n	27598 <_malloc_r+0x20c>
   27802:	1092      	asrs	r2, r2, #2
   27804:	f04f 0c01 	mov.w	ip, #1
   27808:	fa0c f202 	lsl.w	r2, ip, r2
   2780c:	ea4e 0e02 	orr.w	lr, lr, r2
   27810:	f8c7 e004 	str.w	lr, [r7, #4]
   27814:	e711      	b.n	2763a <_malloc_r+0x2ae>
   27816:	eb0a 0208 	add.w	r2, sl, r8
   2781a:	400a      	ands	r2, r1
   2781c:	ebab 0202 	sub.w	r2, fp, r2
   27820:	ea02 0b01 	and.w	fp, r2, r1
   27824:	4659      	mov	r1, fp
   27826:	4630      	mov	r0, r6
   27828:	f002 fa0e 	bl	29c48 <_sbrk_r>
   2782c:	1c43      	adds	r3, r0, #1
   2782e:	9b01      	ldr	r3, [sp, #4]
   27830:	d1c1      	bne.n	277b6 <_malloc_r+0x42a>
   27832:	f8dd b000 	ldr.w	fp, [sp]
   27836:	e7c2      	b.n	277be <_malloc_r+0x432>
   27838:	2a54      	cmp	r2, #84	@ 0x54
   2783a:	d817      	bhi.n	2786c <_malloc_r+0x4e0>
   2783c:	ea4f 321c 	mov.w	r2, ip, lsr #12
   27840:	f102 036f 	add.w	r3, r2, #111	@ 0x6f
   27844:	00db      	lsls	r3, r3, #3
   27846:	326e      	adds	r2, #110	@ 0x6e
   27848:	e6e8      	b.n	2761c <_malloc_r+0x290>
   2784a:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
   2784e:	d817      	bhi.n	27880 <_malloc_r+0x4f4>
   27850:	0beb      	lsrs	r3, r5, #15
   27852:	f103 0078 	add.w	r0, r3, #120	@ 0x78
   27856:	f103 0e77 	add.w	lr, r3, #119	@ 0x77
   2785a:	00c3      	lsls	r3, r0, #3
   2785c:	e5db      	b.n	27416 <_malloc_r+0x8a>
   2785e:	f8c2 a000 	str.w	sl, [r2]
   27862:	e792      	b.n	2778a <_malloc_r+0x3fe>
   27864:	2301      	movs	r3, #1
   27866:	f8ca 3004 	str.w	r3, [sl, #4]
   2786a:	e6a8      	b.n	275be <_malloc_r+0x232>
   2786c:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
   27870:	d824      	bhi.n	278bc <_malloc_r+0x530>
   27872:	ea4f 32dc 	mov.w	r2, ip, lsr #15
   27876:	f102 0378 	add.w	r3, r2, #120	@ 0x78
   2787a:	00db      	lsls	r3, r3, #3
   2787c:	3277      	adds	r2, #119	@ 0x77
   2787e:	e6cd      	b.n	2761c <_malloc_r+0x290>
   27880:	f240 5254 	movw	r2, #1364	@ 0x554
   27884:	4293      	cmp	r3, r2
   27886:	d824      	bhi.n	278d2 <_malloc_r+0x546>
   27888:	0cab      	lsrs	r3, r5, #18
   2788a:	f103 007d 	add.w	r0, r3, #125	@ 0x7d
   2788e:	f103 0e7c 	add.w	lr, r3, #124	@ 0x7c
   27892:	00c3      	lsls	r3, r0, #3
   27894:	e5bf      	b.n	27416 <_malloc_r+0x8a>
   27896:	9a00      	ldr	r2, [sp, #0]
   27898:	3a08      	subs	r2, #8
   2789a:	4490      	add	r8, r2
   2789c:	eba8 080a 	sub.w	r8, r8, sl
   278a0:	f04f 0b00 	mov.w	fp, #0
   278a4:	e78b      	b.n	277be <_malloc_r+0x432>
   278a6:	4630      	mov	r0, r6
   278a8:	f104 0108 	add.w	r1, r4, #8
   278ac:	9300      	str	r3, [sp, #0]
   278ae:	f7ff fc31 	bl	27114 <_free_r>
   278b2:	9b00      	ldr	r3, [sp, #0]
   278b4:	f8d7 a008 	ldr.w	sl, [r7, #8]
   278b8:	6818      	ldr	r0, [r3, #0]
   278ba:	e79f      	b.n	277fc <_malloc_r+0x470>
   278bc:	f240 5354 	movw	r3, #1364	@ 0x554
   278c0:	429a      	cmp	r2, r3
   278c2:	d80c      	bhi.n	278de <_malloc_r+0x552>
   278c4:	ea4f 429c 	mov.w	r2, ip, lsr #18
   278c8:	f102 037d 	add.w	r3, r2, #125	@ 0x7d
   278cc:	00db      	lsls	r3, r3, #3
   278ce:	327c      	adds	r2, #124	@ 0x7c
   278d0:	e6a4      	b.n	2761c <_malloc_r+0x290>
   278d2:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
   278d6:	207f      	movs	r0, #127	@ 0x7f
   278d8:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
   278dc:	e59b      	b.n	27416 <_malloc_r+0x8a>
   278de:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
   278e2:	227e      	movs	r2, #126	@ 0x7e
   278e4:	e69a      	b.n	2761c <_malloc_r+0x290>
   278e6:	687b      	ldr	r3, [r7, #4]
   278e8:	e72d      	b.n	27746 <_malloc_r+0x3ba>
   278ea:	bf00      	nop
   278ec:	10052600 	.word	0x10052600

000278f0 <__ascii_mbtowc>:
   278f0:	b082      	sub	sp, #8
   278f2:	b149      	cbz	r1, 27908 <__ascii_mbtowc+0x18>
   278f4:	b15a      	cbz	r2, 2790e <__ascii_mbtowc+0x1e>
   278f6:	b16b      	cbz	r3, 27914 <__ascii_mbtowc+0x24>
   278f8:	7813      	ldrb	r3, [r2, #0]
   278fa:	600b      	str	r3, [r1, #0]
   278fc:	7812      	ldrb	r2, [r2, #0]
   278fe:	1e10      	subs	r0, r2, #0
   27900:	bf18      	it	ne
   27902:	2001      	movne	r0, #1
   27904:	b002      	add	sp, #8
   27906:	4770      	bx	lr
   27908:	a901      	add	r1, sp, #4
   2790a:	2a00      	cmp	r2, #0
   2790c:	d1f3      	bne.n	278f6 <__ascii_mbtowc+0x6>
   2790e:	4610      	mov	r0, r2
   27910:	b002      	add	sp, #8
   27912:	4770      	bx	lr
   27914:	f06f 0001 	mvn.w	r0, #1
   27918:	e7f4      	b.n	27904 <__ascii_mbtowc+0x14>
   2791a:	bf00      	nop
   2791c:	0000      	movs	r0, r0
	...

00027920 <_svfprintf_r>:
   27920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27924:	b0d9      	sub	sp, #356	@ 0x164
   27926:	460c      	mov	r4, r1
   27928:	9109      	str	r1, [sp, #36]	@ 0x24
   2792a:	4615      	mov	r5, r2
   2792c:	930b      	str	r3, [sp, #44]	@ 0x2c
   2792e:	4683      	mov	fp, r0
   27930:	f7ff fac6 	bl	26ec0 <_localeconv_r>
   27934:	6803      	ldr	r3, [r0, #0]
   27936:	9316      	str	r3, [sp, #88]	@ 0x58
   27938:	4618      	mov	r0, r3
   2793a:	f7f0 fec1 	bl	186c0 <strlen>
   2793e:	2100      	movs	r1, #0
   27940:	9014      	str	r0, [sp, #80]	@ 0x50
   27942:	2208      	movs	r2, #8
   27944:	a828      	add	r0, sp, #160	@ 0xa0
   27946:	f7ff f9bd 	bl	26cc4 <memset>
   2794a:	89a3      	ldrh	r3, [r4, #12]
   2794c:	0619      	lsls	r1, r3, #24
   2794e:	d503      	bpl.n	27958 <_svfprintf_r+0x38>
   27950:	6923      	ldr	r3, [r4, #16]
   27952:	2b00      	cmp	r3, #0
   27954:	f000 875e 	beq.w	28814 <_svfprintf_r+0xef4>
   27958:	ed9f 7b7f 	vldr	d7, [pc, #508]	@ 27b58 <_svfprintf_r+0x238>
   2795c:	2300      	movs	r3, #0
   2795e:	e9cd 332d 	strd	r3, r3, [sp, #180]	@ 0xb4
   27962:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
   27966:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
   2796a:	aa2f      	add	r2, sp, #188	@ 0xbc
   2796c:	930e      	str	r3, [sp, #56]	@ 0x38
   2796e:	922c      	str	r2, [sp, #176]	@ 0xb0
   27970:	4614      	mov	r4, r2
   27972:	9315      	str	r3, [sp, #84]	@ 0x54
   27974:	931c      	str	r3, [sp, #112]	@ 0x70
   27976:	9319      	str	r3, [sp, #100]	@ 0x64
   27978:	9306      	str	r3, [sp, #24]
   2797a:	462e      	mov	r6, r5
   2797c:	46b2      	mov	sl, r6
   2797e:	4b78      	ldr	r3, [pc, #480]	@ (27b60 <_svfprintf_r+0x240>)
   27980:	f8d3 50e4 	ldr.w	r5, [r3, #228]	@ 0xe4
   27984:	f7ff fa96 	bl	26eb4 <__locale_mb_cur_max>
   27988:	aa28      	add	r2, sp, #160	@ 0xa0
   2798a:	4603      	mov	r3, r0
   2798c:	9200      	str	r2, [sp, #0]
   2798e:	a924      	add	r1, sp, #144	@ 0x90
   27990:	4652      	mov	r2, sl
   27992:	4658      	mov	r0, fp
   27994:	47a8      	blx	r5
   27996:	2800      	cmp	r0, #0
   27998:	f000 80b1 	beq.w	27afe <_svfprintf_r+0x1de>
   2799c:	f2c0 80a7 	blt.w	27aee <_svfprintf_r+0x1ce>
   279a0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
   279a2:	2a25      	cmp	r2, #37	@ 0x25
   279a4:	4603      	mov	r3, r0
   279a6:	d001      	beq.n	279ac <_svfprintf_r+0x8c>
   279a8:	449a      	add	sl, r3
   279aa:	e7e8      	b.n	2797e <_svfprintf_r+0x5e>
   279ac:	ebba 0706 	subs.w	r7, sl, r6
   279b0:	4605      	mov	r5, r0
   279b2:	f040 80a8 	bne.w	27b06 <_svfprintf_r+0x1e6>
   279b6:	2300      	movs	r3, #0
   279b8:	4619      	mov	r1, r3
   279ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   279be:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
   279c2:	9307      	str	r3, [sp, #28]
   279c4:	f10a 0a01 	add.w	sl, sl, #1
   279c8:	f89a 3000 	ldrb.w	r3, [sl]
   279cc:	9205      	str	r2, [sp, #20]
   279ce:	9104      	str	r1, [sp, #16]
   279d0:	f10a 0a01 	add.w	sl, sl, #1
   279d4:	f1a3 0220 	sub.w	r2, r3, #32
   279d8:	2a5a      	cmp	r2, #90	@ 0x5a
   279da:	f200 80c3 	bhi.w	27b64 <_svfprintf_r+0x244>
   279de:	e8df f012 	tbh	[pc, r2, lsl #1]
   279e2:	02f4      	.short	0x02f4
   279e4:	00c100c1 	.word	0x00c100c1
   279e8:	00c102ed 	.word	0x00c102ed
   279ec:	00c100c1 	.word	0x00c100c1
   279f0:	00c1006a 	.word	0x00c1006a
   279f4:	023f00c1 	.word	0x023f00c1
   279f8:	00c10251 	.word	0x00c10251
   279fc:	0306024a 	.word	0x0306024a
   27a00:	02ff00c1 	.word	0x02ff00c1
   27a04:	005b005b 	.word	0x005b005b
   27a08:	005b005b 	.word	0x005b005b
   27a0c:	005b005b 	.word	0x005b005b
   27a10:	005b005b 	.word	0x005b005b
   27a14:	00c1005b 	.word	0x00c1005b
   27a18:	00c100c1 	.word	0x00c100c1
   27a1c:	00c100c1 	.word	0x00c100c1
   27a20:	00c100c1 	.word	0x00c100c1
   27a24:	00c1013b 	.word	0x00c1013b
   27a28:	02d301be 	.word	0x02d301be
   27a2c:	013b013b 	.word	0x013b013b
   27a30:	00c1013b 	.word	0x00c1013b
   27a34:	00c100c1 	.word	0x00c100c1
   27a38:	02cc00c1 	.word	0x02cc00c1
   27a3c:	00c100c1 	.word	0x00c100c1
   27a40:	00c10288 	.word	0x00c10288
   27a44:	00c100c1 	.word	0x00c100c1
   27a48:	00c101e8 	.word	0x00c101e8
   27a4c:	00c10257 	.word	0x00c10257
   27a50:	06b200c1 	.word	0x06b200c1
   27a54:	00c100c1 	.word	0x00c100c1
   27a58:	00c100c1 	.word	0x00c100c1
   27a5c:	00c100c1 	.word	0x00c100c1
   27a60:	00c100c1 	.word	0x00c100c1
   27a64:	00c1013b 	.word	0x00c1013b
   27a68:	021a01be 	.word	0x021a01be
   27a6c:	013b013b 	.word	0x013b013b
   27a70:	02a0013b 	.word	0x02a0013b
   27a74:	007f021a 	.word	0x007f021a
   27a78:	02c200c1 	.word	0x02c200c1
   27a7c:	02b300c1 	.word	0x02b300c1
   27a80:	032206d8 	.word	0x032206d8
   27a84:	00c1007f 	.word	0x00c1007f
   27a88:	007c01e8 	.word	0x007c01e8
   27a8c:	00c106ae 	.word	0x00c106ae
   27a90:	06db00c1 	.word	0x06db00c1
   27a94:	007c00c1 	.word	0x007c00c1
   27a98:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   27a9c:	2100      	movs	r1, #0
   27a9e:	f81a 3b01 	ldrb.w	r3, [sl], #1
   27aa2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   27aa6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   27aaa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   27aae:	2a09      	cmp	r2, #9
   27ab0:	d9f5      	bls.n	27a9e <_svfprintf_r+0x17e>
   27ab2:	9107      	str	r1, [sp, #28]
   27ab4:	e78e      	b.n	279d4 <_svfprintf_r+0xb4>
   27ab6:	4658      	mov	r0, fp
   27ab8:	f7ff fa02 	bl	26ec0 <_localeconv_r>
   27abc:	6843      	ldr	r3, [r0, #4]
   27abe:	9319      	str	r3, [sp, #100]	@ 0x64
   27ac0:	4618      	mov	r0, r3
   27ac2:	f7f0 fdfd 	bl	186c0 <strlen>
   27ac6:	901c      	str	r0, [sp, #112]	@ 0x70
   27ac8:	4605      	mov	r5, r0
   27aca:	4658      	mov	r0, fp
   27acc:	f7ff f9f8 	bl	26ec0 <_localeconv_r>
   27ad0:	6883      	ldr	r3, [r0, #8]
   27ad2:	9317      	str	r3, [sp, #92]	@ 0x5c
   27ad4:	2d00      	cmp	r5, #0
   27ad6:	f040 85b7 	bne.w	28648 <_svfprintf_r+0xd28>
   27ada:	f89a 3000 	ldrb.w	r3, [sl]
   27ade:	e777      	b.n	279d0 <_svfprintf_r+0xb0>
   27ae0:	9b04      	ldr	r3, [sp, #16]
   27ae2:	f043 0320 	orr.w	r3, r3, #32
   27ae6:	9304      	str	r3, [sp, #16]
   27ae8:	f89a 3000 	ldrb.w	r3, [sl]
   27aec:	e770      	b.n	279d0 <_svfprintf_r+0xb0>
   27aee:	2208      	movs	r2, #8
   27af0:	2100      	movs	r1, #0
   27af2:	a828      	add	r0, sp, #160	@ 0xa0
   27af4:	f7ff f8e6 	bl	26cc4 <memset>
   27af8:	2301      	movs	r3, #1
   27afa:	449a      	add	sl, r3
   27afc:	e73f      	b.n	2797e <_svfprintf_r+0x5e>
   27afe:	ebba 0706 	subs.w	r7, sl, r6
   27b02:	4605      	mov	r5, r0
   27b04:	d010      	beq.n	27b28 <_svfprintf_r+0x208>
   27b06:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   27b08:	443b      	add	r3, r7
   27b0a:	932e      	str	r3, [sp, #184]	@ 0xb8
   27b0c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   27b0e:	3301      	adds	r3, #1
   27b10:	2b07      	cmp	r3, #7
   27b12:	e9c4 6700 	strd	r6, r7, [r4]
   27b16:	932d      	str	r3, [sp, #180]	@ 0xb4
   27b18:	dc15      	bgt.n	27b46 <_svfprintf_r+0x226>
   27b1a:	3408      	adds	r4, #8
   27b1c:	9b06      	ldr	r3, [sp, #24]
   27b1e:	443b      	add	r3, r7
   27b20:	9306      	str	r3, [sp, #24]
   27b22:	2d00      	cmp	r5, #0
   27b24:	f47f af47 	bne.w	279b6 <_svfprintf_r+0x96>
   27b28:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
   27b2a:	2b00      	cmp	r3, #0
   27b2c:	f041 8193 	bne.w	28e56 <_svfprintf_r+0x1536>
   27b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   27b32:	899b      	ldrh	r3, [r3, #12]
   27b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
   27b38:	2b00      	cmp	r3, #0
   27b3a:	f041 8392 	bne.w	29262 <_svfprintf_r+0x1942>
   27b3e:	9806      	ldr	r0, [sp, #24]
   27b40:	b059      	add	sp, #356	@ 0x164
   27b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b46:	9909      	ldr	r1, [sp, #36]	@ 0x24
   27b48:	aa2c      	add	r2, sp, #176	@ 0xb0
   27b4a:	4658      	mov	r0, fp
   27b4c:	f003 f938 	bl	2adc0 <__ssprint_r>
   27b50:	2800      	cmp	r0, #0
   27b52:	d1ed      	bne.n	27b30 <_svfprintf_r+0x210>
   27b54:	ac2f      	add	r4, sp, #188	@ 0xbc
   27b56:	e7e1      	b.n	27b1c <_svfprintf_r+0x1fc>
	...
   27b60:	1000c3d0 	.word	0x1000c3d0
   27b64:	930c      	str	r3, [sp, #48]	@ 0x30
   27b66:	2b00      	cmp	r3, #0
   27b68:	d0de      	beq.n	27b28 <_svfprintf_r+0x208>
   27b6a:	2200      	movs	r2, #0
   27b6c:	f88d 30fc 	strb.w	r3, [sp, #252]	@ 0xfc
   27b70:	2301      	movs	r3, #1
   27b72:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   27b76:	9302      	str	r3, [sp, #8]
   27b78:	920a      	str	r2, [sp, #40]	@ 0x28
   27b7a:	9308      	str	r3, [sp, #32]
   27b7c:	9205      	str	r2, [sp, #20]
   27b7e:	9212      	str	r2, [sp, #72]	@ 0x48
   27b80:	920f      	str	r2, [sp, #60]	@ 0x3c
   27b82:	920d      	str	r2, [sp, #52]	@ 0x34
   27b84:	ae3f      	add	r6, sp, #252	@ 0xfc
   27b86:	9b04      	ldr	r3, [sp, #16]
   27b88:	f013 0302 	ands.w	r3, r3, #2
   27b8c:	d002      	beq.n	27b94 <_svfprintf_r+0x274>
   27b8e:	9902      	ldr	r1, [sp, #8]
   27b90:	3102      	adds	r1, #2
   27b92:	9102      	str	r1, [sp, #8]
   27b94:	9904      	ldr	r1, [sp, #16]
   27b96:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   27b98:	f011 0884 	ands.w	r8, r1, #132	@ 0x84
   27b9c:	d105      	bne.n	27baa <_svfprintf_r+0x28a>
   27b9e:	9907      	ldr	r1, [sp, #28]
   27ba0:	9802      	ldr	r0, [sp, #8]
   27ba2:	1a0f      	subs	r7, r1, r0
   27ba4:	2f00      	cmp	r7, #0
   27ba6:	f300 80a1 	bgt.w	27cec <_svfprintf_r+0x3cc>
   27baa:	b16a      	cbz	r2, 27bc8 <_svfprintf_r+0x2a8>
   27bac:	2201      	movs	r2, #1
   27bae:	6062      	str	r2, [r4, #4]
   27bb0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   27bb2:	3201      	adds	r2, #1
   27bb4:	3501      	adds	r5, #1
   27bb6:	f10d 0187 	add.w	r1, sp, #135	@ 0x87
   27bba:	2a07      	cmp	r2, #7
   27bbc:	952e      	str	r5, [sp, #184]	@ 0xb8
   27bbe:	922d      	str	r2, [sp, #180]	@ 0xb4
   27bc0:	6021      	str	r1, [r4, #0]
   27bc2:	f300 83db 	bgt.w	2837c <_svfprintf_r+0xa5c>
   27bc6:	3408      	adds	r4, #8
   27bc8:	b16b      	cbz	r3, 27be6 <_svfprintf_r+0x2c6>
   27bca:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   27bcc:	aa22      	add	r2, sp, #136	@ 0x88
   27bce:	3301      	adds	r3, #1
   27bd0:	3502      	adds	r5, #2
   27bd2:	6022      	str	r2, [r4, #0]
   27bd4:	2b07      	cmp	r3, #7
   27bd6:	f04f 0202 	mov.w	r2, #2
   27bda:	952e      	str	r5, [sp, #184]	@ 0xb8
   27bdc:	932d      	str	r3, [sp, #180]	@ 0xb4
   27bde:	6062      	str	r2, [r4, #4]
   27be0:	f300 83c1 	bgt.w	28366 <_svfprintf_r+0xa46>
   27be4:	3408      	adds	r4, #8
   27be6:	f1b8 0f80 	cmp.w	r8, #128	@ 0x80
   27bea:	f000 82c4 	beq.w	28176 <_svfprintf_r+0x856>
   27bee:	9b05      	ldr	r3, [sp, #20]
   27bf0:	9a08      	ldr	r2, [sp, #32]
   27bf2:	1a9f      	subs	r7, r3, r2
   27bf4:	2f00      	cmp	r7, #0
   27bf6:	f300 82fe 	bgt.w	281f6 <_svfprintf_r+0x8d6>
   27bfa:	9b04      	ldr	r3, [sp, #16]
   27bfc:	05da      	lsls	r2, r3, #23
   27bfe:	f100 8224 	bmi.w	2804a <_svfprintf_r+0x72a>
   27c02:	9b08      	ldr	r3, [sp, #32]
   27c04:	6063      	str	r3, [r4, #4]
   27c06:	441d      	add	r5, r3
   27c08:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   27c0a:	6026      	str	r6, [r4, #0]
   27c0c:	3301      	adds	r3, #1
   27c0e:	2b07      	cmp	r3, #7
   27c10:	952e      	str	r5, [sp, #184]	@ 0xb8
   27c12:	932d      	str	r3, [sp, #180]	@ 0xb4
   27c14:	f300 833f 	bgt.w	28296 <_svfprintf_r+0x976>
   27c18:	3408      	adds	r4, #8
   27c1a:	9b04      	ldr	r3, [sp, #16]
   27c1c:	075a      	lsls	r2, r3, #29
   27c1e:	d505      	bpl.n	27c2c <_svfprintf_r+0x30c>
   27c20:	9b07      	ldr	r3, [sp, #28]
   27c22:	9a02      	ldr	r2, [sp, #8]
   27c24:	1a9e      	subs	r6, r3, r2
   27c26:	2e00      	cmp	r6, #0
   27c28:	f300 83b5 	bgt.w	28396 <_svfprintf_r+0xa76>
   27c2c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   27c30:	9902      	ldr	r1, [sp, #8]
   27c32:	428a      	cmp	r2, r1
   27c34:	bfac      	ite	ge
   27c36:	189b      	addge	r3, r3, r2
   27c38:	185b      	addlt	r3, r3, r1
   27c3a:	9306      	str	r3, [sp, #24]
   27c3c:	2d00      	cmp	r5, #0
   27c3e:	f040 830b 	bne.w	28258 <_svfprintf_r+0x938>
   27c42:	2300      	movs	r3, #0
   27c44:	932d      	str	r3, [sp, #180]	@ 0xb4
   27c46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   27c48:	b11b      	cbz	r3, 27c52 <_svfprintf_r+0x332>
   27c4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
   27c4c:	4658      	mov	r0, fp
   27c4e:	f7ff fa61 	bl	27114 <_free_r>
   27c52:	ac2f      	add	r4, sp, #188	@ 0xbc
   27c54:	4656      	mov	r6, sl
   27c56:	e691      	b.n	2797c <_svfprintf_r+0x5c>
   27c58:	930c      	str	r3, [sp, #48]	@ 0x30
   27c5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27c5c:	3307      	adds	r3, #7
   27c5e:	f023 0307 	bic.w	r3, r3, #7
   27c62:	ecb3 7b02 	vldmia	r3!, {d7}
   27c66:	ec58 7b17 	vmov	r7, r8, d7
   27c6a:	930b      	str	r3, [sp, #44]	@ 0x2c
   27c6c:	f028 4300 	bic.w	r3, r8, #2147483648	@ 0x80000000
   27c70:	931b      	str	r3, [sp, #108]	@ 0x6c
   27c72:	ed8d 7a1a 	vstr	s14, [sp, #104]	@ 0x68
   27c76:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
   27c7a:	4baf      	ldr	r3, [pc, #700]	@ (27f38 <_svfprintf_r+0x618>)
   27c7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   27c80:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
   27c84:	f7f1 f9de 	bl	19044 <__aeabi_dcmpun>
   27c88:	2800      	cmp	r0, #0
   27c8a:	f040 8502 	bne.w	28692 <_svfprintf_r+0xd72>
   27c8e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
   27c92:	4ba9      	ldr	r3, [pc, #676]	@ (27f38 <_svfprintf_r+0x618>)
   27c94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   27c98:	f7f1 f9b6 	bl	19008 <__aeabi_dcmple>
   27c9c:	2800      	cmp	r0, #0
   27c9e:	f040 84f8 	bne.w	28692 <_svfprintf_r+0xd72>
   27ca2:	2200      	movs	r2, #0
   27ca4:	2300      	movs	r3, #0
   27ca6:	4638      	mov	r0, r7
   27ca8:	4641      	mov	r1, r8
   27caa:	f7f1 f9a3 	bl	18ff4 <__aeabi_dcmplt>
   27cae:	2800      	cmp	r0, #0
   27cb0:	f041 8021 	bne.w	28cf6 <_svfprintf_r+0x13d6>
   27cb4:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   27cb8:	9b04      	ldr	r3, [sp, #16]
   27cba:	4ea0      	ldr	r6, [pc, #640]	@ (27f3c <_svfprintf_r+0x61c>)
   27cbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   27cc0:	9304      	str	r3, [sp, #16]
   27cc2:	4b9f      	ldr	r3, [pc, #636]	@ (27f40 <_svfprintf_r+0x620>)
   27cc4:	990c      	ldr	r1, [sp, #48]	@ 0x30
   27cc6:	2947      	cmp	r1, #71	@ 0x47
   27cc8:	bfd8      	it	le
   27cca:	461e      	movle	r6, r3
   27ccc:	2300      	movs	r3, #0
   27cce:	2103      	movs	r1, #3
   27cd0:	930a      	str	r3, [sp, #40]	@ 0x28
   27cd2:	9102      	str	r1, [sp, #8]
   27cd4:	9108      	str	r1, [sp, #32]
   27cd6:	9305      	str	r3, [sp, #20]
   27cd8:	9312      	str	r3, [sp, #72]	@ 0x48
   27cda:	930f      	str	r3, [sp, #60]	@ 0x3c
   27cdc:	930d      	str	r3, [sp, #52]	@ 0x34
   27cde:	2a00      	cmp	r2, #0
   27ce0:	f43f af51 	beq.w	27b86 <_svfprintf_r+0x266>
   27ce4:	9b02      	ldr	r3, [sp, #8]
   27ce6:	3301      	adds	r3, #1
   27ce8:	9302      	str	r3, [sp, #8]
   27cea:	e74c      	b.n	27b86 <_svfprintf_r+0x266>
   27cec:	4995      	ldr	r1, [pc, #596]	@ (27f44 <_svfprintf_r+0x624>)
   27cee:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   27cf0:	9113      	str	r1, [sp, #76]	@ 0x4c
   27cf2:	2f10      	cmp	r7, #16
   27cf4:	dd25      	ble.n	27d42 <_svfprintf_r+0x422>
   27cf6:	4621      	mov	r1, r4
   27cf8:	4628      	mov	r0, r5
   27cfa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   27cfc:	4d91      	ldr	r5, [pc, #580]	@ (27f44 <_svfprintf_r+0x624>)
   27cfe:	931d      	str	r3, [sp, #116]	@ 0x74
   27d00:	f04f 0910 	mov.w	r9, #16
   27d04:	e004      	b.n	27d10 <_svfprintf_r+0x3f0>
   27d06:	3f10      	subs	r7, #16
   27d08:	2f10      	cmp	r7, #16
   27d0a:	f101 0108 	add.w	r1, r1, #8
   27d0e:	dd15      	ble.n	27d3c <_svfprintf_r+0x41c>
   27d10:	3201      	adds	r2, #1
   27d12:	3010      	adds	r0, #16
   27d14:	2a07      	cmp	r2, #7
   27d16:	e9c1 5900 	strd	r5, r9, [r1]
   27d1a:	e9cd 202d 	strd	r2, r0, [sp, #180]	@ 0xb4
   27d1e:	ddf2      	ble.n	27d06 <_svfprintf_r+0x3e6>
   27d20:	aa2c      	add	r2, sp, #176	@ 0xb0
   27d22:	4621      	mov	r1, r4
   27d24:	4658      	mov	r0, fp
   27d26:	f003 f84b 	bl	2adc0 <__ssprint_r>
   27d2a:	2800      	cmp	r0, #0
   27d2c:	f040 829c 	bne.w	28268 <_svfprintf_r+0x948>
   27d30:	3f10      	subs	r7, #16
   27d32:	2f10      	cmp	r7, #16
   27d34:	e9dd 202d 	ldrd	r2, r0, [sp, #180]	@ 0xb4
   27d38:	a92f      	add	r1, sp, #188	@ 0xbc
   27d3a:	dce9      	bgt.n	27d10 <_svfprintf_r+0x3f0>
   27d3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
   27d3e:	460c      	mov	r4, r1
   27d40:	4605      	mov	r5, r0
   27d42:	3201      	adds	r2, #1
   27d44:	9913      	ldr	r1, [sp, #76]	@ 0x4c
   27d46:	6021      	str	r1, [r4, #0]
   27d48:	443d      	add	r5, r7
   27d4a:	2a07      	cmp	r2, #7
   27d4c:	e9cd 252d 	strd	r2, r5, [sp, #180]	@ 0xb4
   27d50:	6067      	str	r7, [r4, #4]
   27d52:	f300 86d4 	bgt.w	28afe <_svfprintf_r+0x11de>
   27d56:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   27d5a:	3408      	adds	r4, #8
   27d5c:	e725      	b.n	27baa <_svfprintf_r+0x28a>
   27d5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   27d60:	930c      	str	r3, [sp, #48]	@ 0x30
   27d62:	2b43      	cmp	r3, #67	@ 0x43
   27d64:	f102 0504 	add.w	r5, r2, #4
   27d68:	d003      	beq.n	27d72 <_svfprintf_r+0x452>
   27d6a:	9b04      	ldr	r3, [sp, #16]
   27d6c:	06da      	lsls	r2, r3, #27
   27d6e:	f140 8517 	bpl.w	287a0 <_svfprintf_r+0xe80>
   27d72:	2208      	movs	r2, #8
   27d74:	2100      	movs	r1, #0
   27d76:	a82a      	add	r0, sp, #168	@ 0xa8
   27d78:	f7fe ffa4 	bl	26cc4 <memset>
   27d7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27d7e:	ae3f      	add	r6, sp, #252	@ 0xfc
   27d80:	681a      	ldr	r2, [r3, #0]
   27d82:	4631      	mov	r1, r6
   27d84:	ab2a      	add	r3, sp, #168	@ 0xa8
   27d86:	4658      	mov	r0, fp
   27d88:	f7ff f8ec 	bl	26f64 <_wcrtomb_r>
   27d8c:	4603      	mov	r3, r0
   27d8e:	3301      	adds	r3, #1
   27d90:	9008      	str	r0, [sp, #32]
   27d92:	f001 8261 	beq.w	29258 <_svfprintf_r+0x1938>
   27d96:	9b08      	ldr	r3, [sp, #32]
   27d98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27d9c:	9302      	str	r3, [sp, #8]
   27d9e:	2200      	movs	r2, #0
   27da0:	950b      	str	r5, [sp, #44]	@ 0x2c
   27da2:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   27da6:	920a      	str	r2, [sp, #40]	@ 0x28
   27da8:	9205      	str	r2, [sp, #20]
   27daa:	9212      	str	r2, [sp, #72]	@ 0x48
   27dac:	920f      	str	r2, [sp, #60]	@ 0x3c
   27dae:	920d      	str	r2, [sp, #52]	@ 0x34
   27db0:	e6e9      	b.n	27b86 <_svfprintf_r+0x266>
   27db2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
   27db4:	930c      	str	r3, [sp, #48]	@ 0x30
   27db6:	f857 6b04 	ldr.w	r6, [r7], #4
   27dba:	2300      	movs	r3, #0
   27dbc:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
   27dc0:	2e00      	cmp	r6, #0
   27dc2:	f000 8516 	beq.w	287f2 <_svfprintf_r+0xed2>
   27dc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   27dc8:	2b53      	cmp	r3, #83	@ 0x53
   27dca:	f000 86bf 	beq.w	28b4c <_svfprintf_r+0x122c>
   27dce:	9b04      	ldr	r3, [sp, #16]
   27dd0:	f013 0310 	ands.w	r3, r3, #16
   27dd4:	930d      	str	r3, [sp, #52]	@ 0x34
   27dd6:	f040 86b9 	bne.w	28b4c <_svfprintf_r+0x122c>
   27dda:	9b05      	ldr	r3, [sp, #20]
   27ddc:	2b00      	cmp	r3, #0
   27dde:	f2c1 8045 	blt.w	28e6c <_svfprintf_r+0x154c>
   27de2:	990d      	ldr	r1, [sp, #52]	@ 0x34
   27de4:	461a      	mov	r2, r3
   27de6:	4630      	mov	r0, r6
   27de8:	f7f0 fb7a 	bl	184e0 <memchr>
   27dec:	900a      	str	r0, [sp, #40]	@ 0x28
   27dee:	2800      	cmp	r0, #0
   27df0:	f001 8266 	beq.w	292c0 <_svfprintf_r+0x19a0>
   27df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   27df6:	1b99      	subs	r1, r3, r6
   27df8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   27dfa:	9108      	str	r1, [sp, #32]
   27dfc:	9305      	str	r3, [sp, #20]
   27dfe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   27e02:	9312      	str	r3, [sp, #72]	@ 0x48
   27e04:	930f      	str	r3, [sp, #60]	@ 0x3c
   27e06:	930a      	str	r3, [sp, #40]	@ 0x28
   27e08:	2373      	movs	r3, #115	@ 0x73
   27e0a:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   27e0e:	970b      	str	r7, [sp, #44]	@ 0x2c
   27e10:	9102      	str	r1, [sp, #8]
   27e12:	930c      	str	r3, [sp, #48]	@ 0x30
   27e14:	e763      	b.n	27cde <_svfprintf_r+0x3be>
   27e16:	930c      	str	r3, [sp, #48]	@ 0x30
   27e18:	9b04      	ldr	r3, [sp, #16]
   27e1a:	069b      	lsls	r3, r3, #26
   27e1c:	f140 80bd 	bpl.w	27f9a <_svfprintf_r+0x67a>
   27e20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27e22:	3307      	adds	r3, #7
   27e24:	f023 0307 	bic.w	r3, r3, #7
   27e28:	461a      	mov	r2, r3
   27e2a:	6859      	ldr	r1, [r3, #4]
   27e2c:	f852 3b08 	ldr.w	r3, [r2], #8
   27e30:	920b      	str	r2, [sp, #44]	@ 0x2c
   27e32:	460a      	mov	r2, r1
   27e34:	2900      	cmp	r1, #0
   27e36:	f2c0 83ca 	blt.w	285ce <_svfprintf_r+0xcae>
   27e3a:	9905      	ldr	r1, [sp, #20]
   27e3c:	2900      	cmp	r1, #0
   27e3e:	f2c0 8283 	blt.w	28348 <_svfprintf_r+0xa28>
   27e42:	9904      	ldr	r1, [sp, #16]
   27e44:	f021 0580 	bic.w	r5, r1, #128	@ 0x80
   27e48:	ea53 0102 	orrs.w	r1, r3, r2
   27e4c:	f040 827d 	bne.w	2834a <_svfprintf_r+0xa2a>
   27e50:	9a05      	ldr	r2, [sp, #20]
   27e52:	2a00      	cmp	r2, #0
   27e54:	f040 827e 	bne.w	28354 <_svfprintf_r+0xa34>
   27e58:	9504      	str	r5, [sp, #16]
   27e5a:	9208      	str	r2, [sp, #32]
   27e5c:	ae58      	add	r6, sp, #352	@ 0x160
   27e5e:	e160      	b.n	28122 <_svfprintf_r+0x802>
   27e60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27e62:	f853 2b04 	ldr.w	r2, [r3], #4
   27e66:	9207      	str	r2, [sp, #28]
   27e68:	2a00      	cmp	r2, #0
   27e6a:	f280 83da 	bge.w	28622 <_svfprintf_r+0xd02>
   27e6e:	9a07      	ldr	r2, [sp, #28]
   27e70:	930b      	str	r3, [sp, #44]	@ 0x2c
   27e72:	4252      	negs	r2, r2
   27e74:	9207      	str	r2, [sp, #28]
   27e76:	9b04      	ldr	r3, [sp, #16]
   27e78:	f043 0304 	orr.w	r3, r3, #4
   27e7c:	9304      	str	r3, [sp, #16]
   27e7e:	f89a 3000 	ldrb.w	r3, [sl]
   27e82:	e5a5      	b.n	279d0 <_svfprintf_r+0xb0>
   27e84:	232b      	movs	r3, #43	@ 0x2b
   27e86:	f88d 3087 	strb.w	r3, [sp, #135]	@ 0x87
   27e8a:	f89a 3000 	ldrb.w	r3, [sl]
   27e8e:	e59f      	b.n	279d0 <_svfprintf_r+0xb0>
   27e90:	930c      	str	r3, [sp, #48]	@ 0x30
   27e92:	9b04      	ldr	r3, [sp, #16]
   27e94:	f043 0510 	orr.w	r5, r3, #16
   27e98:	f015 0220 	ands.w	r2, r5, #32
   27e9c:	f000 8372 	beq.w	28584 <_svfprintf_r+0xc64>
   27ea0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27ea2:	3307      	adds	r3, #7
   27ea4:	f023 0307 	bic.w	r3, r3, #7
   27ea8:	4619      	mov	r1, r3
   27eaa:	685a      	ldr	r2, [r3, #4]
   27eac:	f851 3b08 	ldr.w	r3, [r1], #8
   27eb0:	910b      	str	r1, [sp, #44]	@ 0x2c
   27eb2:	2101      	movs	r1, #1
   27eb4:	2000      	movs	r0, #0
   27eb6:	9e05      	ldr	r6, [sp, #20]
   27eb8:	f88d 0087 	strb.w	r0, [sp, #135]	@ 0x87
   27ebc:	2e00      	cmp	r6, #0
   27ebe:	f2c0 8119 	blt.w	280f4 <_svfprintf_r+0x7d4>
   27ec2:	f025 0080 	bic.w	r0, r5, #128	@ 0x80
   27ec6:	9004      	str	r0, [sp, #16]
   27ec8:	ea53 0002 	orrs.w	r0, r3, r2
   27ecc:	f040 8111 	bne.w	280f2 <_svfprintf_r+0x7d2>
   27ed0:	2e00      	cmp	r6, #0
   27ed2:	f040 8624 	bne.w	28b1e <_svfprintf_r+0x11fe>
   27ed6:	2900      	cmp	r1, #0
   27ed8:	f040 8380 	bne.w	285dc <_svfprintf_r+0xcbc>
   27edc:	f015 0301 	ands.w	r3, r5, #1
   27ee0:	9308      	str	r3, [sp, #32]
   27ee2:	f000 83a3 	beq.w	2862c <_svfprintf_r+0xd0c>
   27ee6:	2330      	movs	r3, #48	@ 0x30
   27ee8:	f88d 315f 	strb.w	r3, [sp, #351]	@ 0x15f
   27eec:	f20d 165f 	addw	r6, sp, #351	@ 0x15f
   27ef0:	e117      	b.n	28122 <_svfprintf_r+0x802>
   27ef2:	930c      	str	r3, [sp, #48]	@ 0x30
   27ef4:	9b04      	ldr	r3, [sp, #16]
   27ef6:	f043 0310 	orr.w	r3, r3, #16
   27efa:	9304      	str	r3, [sp, #16]
   27efc:	9b04      	ldr	r3, [sp, #16]
   27efe:	f013 0220 	ands.w	r2, r3, #32
   27f02:	f000 8355 	beq.w	285b0 <_svfprintf_r+0xc90>
   27f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27f08:	3307      	adds	r3, #7
   27f0a:	f023 0307 	bic.w	r3, r3, #7
   27f0e:	4619      	mov	r1, r3
   27f10:	685a      	ldr	r2, [r3, #4]
   27f12:	f851 3b08 	ldr.w	r3, [r1], #8
   27f16:	910b      	str	r1, [sp, #44]	@ 0x2c
   27f18:	9904      	ldr	r1, [sp, #16]
   27f1a:	f421 6580 	bic.w	r5, r1, #1024	@ 0x400
   27f1e:	2100      	movs	r1, #0
   27f20:	e7c8      	b.n	27eb4 <_svfprintf_r+0x594>
   27f22:	f89a 3000 	ldrb.w	r3, [sl]
   27f26:	2b68      	cmp	r3, #104	@ 0x68
   27f28:	f000 844e 	beq.w	287c8 <_svfprintf_r+0xea8>
   27f2c:	9a04      	ldr	r2, [sp, #16]
   27f2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   27f32:	9204      	str	r2, [sp, #16]
   27f34:	e54c      	b.n	279d0 <_svfprintf_r+0xb0>
   27f36:	bf00      	nop
   27f38:	7fefffff 	.word	0x7fefffff
   27f3c:	0003fb08 	.word	0x0003fb08
   27f40:	0003fb04 	.word	0x0003fb04
   27f44:	00047474 	.word	0x00047474
   27f48:	9b04      	ldr	r3, [sp, #16]
   27f4a:	069d      	lsls	r5, r3, #26
   27f4c:	f140 8390 	bpl.w	28670 <_svfprintf_r+0xd50>
   27f50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27f52:	9a06      	ldr	r2, [sp, #24]
   27f54:	681b      	ldr	r3, [r3, #0]
   27f56:	601a      	str	r2, [r3, #0]
   27f58:	17d2      	asrs	r2, r2, #31
   27f5a:	605a      	str	r2, [r3, #4]
   27f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   27f5e:	3304      	adds	r3, #4
   27f60:	930b      	str	r3, [sp, #44]	@ 0x2c
   27f62:	4656      	mov	r6, sl
   27f64:	e50a      	b.n	2797c <_svfprintf_r+0x5c>
   27f66:	f89a 3000 	ldrb.w	r3, [sl]
   27f6a:	2b6c      	cmp	r3, #108	@ 0x6c
   27f6c:	f000 8422 	beq.w	287b4 <_svfprintf_r+0xe94>
   27f70:	9a04      	ldr	r2, [sp, #16]
   27f72:	f042 0210 	orr.w	r2, r2, #16
   27f76:	9204      	str	r2, [sp, #16]
   27f78:	e52a      	b.n	279d0 <_svfprintf_r+0xb0>
   27f7a:	9b04      	ldr	r3, [sp, #16]
   27f7c:	f043 0308 	orr.w	r3, r3, #8
   27f80:	9304      	str	r3, [sp, #16]
   27f82:	f89a 3000 	ldrb.w	r3, [sl]
   27f86:	e523      	b.n	279d0 <_svfprintf_r+0xb0>
   27f88:	930c      	str	r3, [sp, #48]	@ 0x30
   27f8a:	9b04      	ldr	r3, [sp, #16]
   27f8c:	f043 0310 	orr.w	r3, r3, #16
   27f90:	9304      	str	r3, [sp, #16]
   27f92:	9b04      	ldr	r3, [sp, #16]
   27f94:	069b      	lsls	r3, r3, #26
   27f96:	f53f af43 	bmi.w	27e20 <_svfprintf_r+0x500>
   27f9a:	9904      	ldr	r1, [sp, #16]
   27f9c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   27f9e:	06cf      	lsls	r7, r1, #27
   27fa0:	f852 3b04 	ldr.w	r3, [r2], #4
   27fa4:	f100 834b 	bmi.w	2863e <_svfprintf_r+0xd1e>
   27fa8:	9904      	ldr	r1, [sp, #16]
   27faa:	064e      	lsls	r6, r1, #25
   27fac:	f140 8643 	bpl.w	28c36 <_svfprintf_r+0x1316>
   27fb0:	920b      	str	r2, [sp, #44]	@ 0x2c
   27fb2:	f343 32c0 	sbfx	r2, r3, #15, #1
   27fb6:	4611      	mov	r1, r2
   27fb8:	b21b      	sxth	r3, r3
   27fba:	e73b      	b.n	27e34 <_svfprintf_r+0x514>
   27fbc:	9b04      	ldr	r3, [sp, #16]
   27fbe:	f043 0301 	orr.w	r3, r3, #1
   27fc2:	9304      	str	r3, [sp, #16]
   27fc4:	f89a 3000 	ldrb.w	r3, [sl]
   27fc8:	e502      	b.n	279d0 <_svfprintf_r+0xb0>
   27fca:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   27fce:	f89a 3000 	ldrb.w	r3, [sl]
   27fd2:	2a00      	cmp	r2, #0
   27fd4:	f47f acfc 	bne.w	279d0 <_svfprintf_r+0xb0>
   27fd8:	2220      	movs	r2, #32
   27fda:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   27fde:	e4f7      	b.n	279d0 <_svfprintf_r+0xb0>
   27fe0:	9b04      	ldr	r3, [sp, #16]
   27fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   27fe6:	9304      	str	r3, [sp, #16]
   27fe8:	f89a 3000 	ldrb.w	r3, [sl]
   27fec:	e4f0      	b.n	279d0 <_svfprintf_r+0xb0>
   27fee:	4650      	mov	r0, sl
   27ff0:	f810 3b01 	ldrb.w	r3, [r0], #1
   27ff4:	2b2a      	cmp	r3, #42	@ 0x2a
   27ff6:	f001 81e5 	beq.w	293c4 <_svfprintf_r+0x1aa4>
   27ffa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   27ffe:	2a09      	cmp	r2, #9
   28000:	bf98      	it	ls
   28002:	2100      	movls	r1, #0
   28004:	f201 80e4 	bhi.w	291d0 <_svfprintf_r+0x18b0>
   28008:	f810 3b01 	ldrb.w	r3, [r0], #1
   2800c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   28010:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   28014:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
   28018:	2a09      	cmp	r2, #9
   2801a:	d9f5      	bls.n	28008 <_svfprintf_r+0x6e8>
   2801c:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
   28020:	9205      	str	r2, [sp, #20]
   28022:	4682      	mov	sl, r0
   28024:	e4d6      	b.n	279d4 <_svfprintf_r+0xb4>
   28026:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   28028:	9b04      	ldr	r3, [sp, #16]
   2802a:	f043 0502 	orr.w	r5, r3, #2
   2802e:	f852 3b04 	ldr.w	r3, [r2], #4
   28032:	920b      	str	r2, [sp, #44]	@ 0x2c
   28034:	f647 0230 	movw	r2, #30768	@ 0x7830
   28038:	f8ad 2088 	strh.w	r2, [sp, #136]	@ 0x88
   2803c:	2078      	movs	r0, #120	@ 0x78
   2803e:	4a9b      	ldr	r2, [pc, #620]	@ (282ac <_svfprintf_r+0x98c>)
   28040:	9215      	str	r2, [sp, #84]	@ 0x54
   28042:	2102      	movs	r1, #2
   28044:	2200      	movs	r2, #0
   28046:	900c      	str	r0, [sp, #48]	@ 0x30
   28048:	e734      	b.n	27eb4 <_svfprintf_r+0x594>
   2804a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2804c:	2b65      	cmp	r3, #101	@ 0x65
   2804e:	f340 8133 	ble.w	282b8 <_svfprintf_r+0x998>
   28052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   28056:	2200      	movs	r2, #0
   28058:	2300      	movs	r3, #0
   2805a:	f7f0 ffc1 	bl	18fe0 <__aeabi_dcmpeq>
   2805e:	2800      	cmp	r0, #0
   28060:	f000 81d2 	beq.w	28408 <_svfprintf_r+0xae8>
   28064:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28066:	4a92      	ldr	r2, [pc, #584]	@ (282b0 <_svfprintf_r+0x990>)
   28068:	6022      	str	r2, [r4, #0]
   2806a:	3301      	adds	r3, #1
   2806c:	3501      	adds	r5, #1
   2806e:	2201      	movs	r2, #1
   28070:	2b07      	cmp	r3, #7
   28072:	952e      	str	r5, [sp, #184]	@ 0xb8
   28074:	932d      	str	r3, [sp, #180]	@ 0xb4
   28076:	6062      	str	r2, [r4, #4]
   28078:	f300 855c 	bgt.w	28b34 <_svfprintf_r+0x1214>
   2807c:	3408      	adds	r4, #8
   2807e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   28080:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   28082:	4293      	cmp	r3, r2
   28084:	f280 82c8 	bge.w	28618 <_svfprintf_r+0xcf8>
   28088:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   2808a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   2808c:	441d      	add	r5, r3
   2808e:	e9c4 2300 	strd	r2, r3, [r4]
   28092:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28094:	952e      	str	r5, [sp, #184]	@ 0xb8
   28096:	3301      	adds	r3, #1
   28098:	2b07      	cmp	r3, #7
   2809a:	932d      	str	r3, [sp, #180]	@ 0xb4
   2809c:	f300 839e 	bgt.w	287dc <_svfprintf_r+0xebc>
   280a0:	3408      	adds	r4, #8
   280a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   280a4:	1e5e      	subs	r6, r3, #1
   280a6:	2e00      	cmp	r6, #0
   280a8:	f77f adb7 	ble.w	27c1a <_svfprintf_r+0x2fa>
   280ac:	2e10      	cmp	r6, #16
   280ae:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   280b0:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 282b4 <_svfprintf_r+0x994>
   280b4:	f340 80e5 	ble.w	28282 <_svfprintf_r+0x962>
   280b8:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
   280bc:	2710      	movs	r7, #16
   280be:	e004      	b.n	280ca <_svfprintf_r+0x7aa>
   280c0:	3408      	adds	r4, #8
   280c2:	3e10      	subs	r6, #16
   280c4:	2e10      	cmp	r6, #16
   280c6:	f340 80dc 	ble.w	28282 <_svfprintf_r+0x962>
   280ca:	3301      	adds	r3, #1
   280cc:	3510      	adds	r5, #16
   280ce:	2b07      	cmp	r3, #7
   280d0:	e9c4 9700 	strd	r9, r7, [r4]
   280d4:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   280d8:	ddf2      	ble.n	280c0 <_svfprintf_r+0x7a0>
   280da:	aa2c      	add	r2, sp, #176	@ 0xb0
   280dc:	4641      	mov	r1, r8
   280de:	4658      	mov	r0, fp
   280e0:	f002 fe6e 	bl	2adc0 <__ssprint_r>
   280e4:	2800      	cmp	r0, #0
   280e6:	f040 80bf 	bne.w	28268 <_svfprintf_r+0x948>
   280ea:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   280ee:	ac2f      	add	r4, sp, #188	@ 0xbc
   280f0:	e7e7      	b.n	280c2 <_svfprintf_r+0x7a2>
   280f2:	9d04      	ldr	r5, [sp, #16]
   280f4:	2901      	cmp	r1, #1
   280f6:	f000 8128 	beq.w	2834a <_svfprintf_r+0xa2a>
   280fa:	2902      	cmp	r1, #2
   280fc:	ae58      	add	r6, sp, #352	@ 0x160
   280fe:	d11f      	bne.n	28140 <_svfprintf_r+0x820>
   28100:	9815      	ldr	r0, [sp, #84]	@ 0x54
   28102:	f003 010f 	and.w	r1, r3, #15
   28106:	091b      	lsrs	r3, r3, #4
   28108:	5c41      	ldrb	r1, [r0, r1]
   2810a:	f806 1d01 	strb.w	r1, [r6, #-1]!
   2810e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   28112:	0912      	lsrs	r2, r2, #4
   28114:	ea53 0102 	orrs.w	r1, r3, r2
   28118:	d1f3      	bne.n	28102 <_svfprintf_r+0x7e2>
   2811a:	ab58      	add	r3, sp, #352	@ 0x160
   2811c:	1b9b      	subs	r3, r3, r6
   2811e:	9504      	str	r5, [sp, #16]
   28120:	9308      	str	r3, [sp, #32]
   28122:	9905      	ldr	r1, [sp, #20]
   28124:	9808      	ldr	r0, [sp, #32]
   28126:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   2812a:	4281      	cmp	r1, r0
   2812c:	f04f 0300 	mov.w	r3, #0
   28130:	bfb8      	it	lt
   28132:	4601      	movlt	r1, r0
   28134:	930a      	str	r3, [sp, #40]	@ 0x28
   28136:	9102      	str	r1, [sp, #8]
   28138:	9312      	str	r3, [sp, #72]	@ 0x48
   2813a:	930f      	str	r3, [sp, #60]	@ 0x3c
   2813c:	930d      	str	r3, [sp, #52]	@ 0x34
   2813e:	e5ce      	b.n	27cde <_svfprintf_r+0x3be>
   28140:	f003 0107 	and.w	r1, r3, #7
   28144:	08db      	lsrs	r3, r3, #3
   28146:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   2814a:	08d2      	lsrs	r2, r2, #3
   2814c:	3130      	adds	r1, #48	@ 0x30
   2814e:	ea53 0702 	orrs.w	r7, r3, r2
   28152:	4630      	mov	r0, r6
   28154:	f806 1d01 	strb.w	r1, [r6, #-1]!
   28158:	d1f2      	bne.n	28140 <_svfprintf_r+0x820>
   2815a:	07ef      	lsls	r7, r5, #31
   2815c:	d5dd      	bpl.n	2811a <_svfprintf_r+0x7fa>
   2815e:	2930      	cmp	r1, #48	@ 0x30
   28160:	d0db      	beq.n	2811a <_svfprintf_r+0x7fa>
   28162:	2330      	movs	r3, #48	@ 0x30
   28164:	3802      	subs	r0, #2
   28166:	f806 3c01 	strb.w	r3, [r6, #-1]
   2816a:	ab58      	add	r3, sp, #352	@ 0x160
   2816c:	1a1b      	subs	r3, r3, r0
   2816e:	9504      	str	r5, [sp, #16]
   28170:	9308      	str	r3, [sp, #32]
   28172:	4606      	mov	r6, r0
   28174:	e7d5      	b.n	28122 <_svfprintf_r+0x802>
   28176:	9b07      	ldr	r3, [sp, #28]
   28178:	9a02      	ldr	r2, [sp, #8]
   2817a:	1a9f      	subs	r7, r3, r2
   2817c:	2f00      	cmp	r7, #0
   2817e:	f77f ad36 	ble.w	27bee <_svfprintf_r+0x2ce>
   28182:	2f10      	cmp	r7, #16
   28184:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28186:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 282b4 <_svfprintf_r+0x994>
   2818a:	dd22      	ble.n	281d2 <_svfprintf_r+0x8b2>
   2818c:	462a      	mov	r2, r5
   2818e:	f04f 0810 	mov.w	r8, #16
   28192:	464d      	mov	r5, r9
   28194:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
   28198:	e004      	b.n	281a4 <_svfprintf_r+0x884>
   2819a:	3f10      	subs	r7, #16
   2819c:	2f10      	cmp	r7, #16
   2819e:	f104 0408 	add.w	r4, r4, #8
   281a2:	dd14      	ble.n	281ce <_svfprintf_r+0x8ae>
   281a4:	3301      	adds	r3, #1
   281a6:	3210      	adds	r2, #16
   281a8:	2b07      	cmp	r3, #7
   281aa:	e9c4 5800 	strd	r5, r8, [r4]
   281ae:	e9cd 322d 	strd	r3, r2, [sp, #180]	@ 0xb4
   281b2:	ddf2      	ble.n	2819a <_svfprintf_r+0x87a>
   281b4:	aa2c      	add	r2, sp, #176	@ 0xb0
   281b6:	4649      	mov	r1, r9
   281b8:	4658      	mov	r0, fp
   281ba:	f002 fe01 	bl	2adc0 <__ssprint_r>
   281be:	2800      	cmp	r0, #0
   281c0:	d152      	bne.n	28268 <_svfprintf_r+0x948>
   281c2:	3f10      	subs	r7, #16
   281c4:	2f10      	cmp	r7, #16
   281c6:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	@ 0xb4
   281ca:	ac2f      	add	r4, sp, #188	@ 0xbc
   281cc:	dcea      	bgt.n	281a4 <_svfprintf_r+0x884>
   281ce:	46a9      	mov	r9, r5
   281d0:	4615      	mov	r5, r2
   281d2:	3301      	adds	r3, #1
   281d4:	443d      	add	r5, r7
   281d6:	2b07      	cmp	r3, #7
   281d8:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   281dc:	f8c4 9000 	str.w	r9, [r4]
   281e0:	6067      	str	r7, [r4, #4]
   281e2:	f300 84db 	bgt.w	28b9c <_svfprintf_r+0x127c>
   281e6:	9b05      	ldr	r3, [sp, #20]
   281e8:	9a08      	ldr	r2, [sp, #32]
   281ea:	1a9f      	subs	r7, r3, r2
   281ec:	2f00      	cmp	r7, #0
   281ee:	f104 0408 	add.w	r4, r4, #8
   281f2:	f77f ad02 	ble.w	27bfa <_svfprintf_r+0x2da>
   281f6:	2f10      	cmp	r7, #16
   281f8:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   281fa:	f8df 90b8 	ldr.w	r9, [pc, #184]	@ 282b4 <_svfprintf_r+0x994>
   281fe:	dd1f      	ble.n	28240 <_svfprintf_r+0x920>
   28200:	462a      	mov	r2, r5
   28202:	f04f 0810 	mov.w	r8, #16
   28206:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   28208:	e004      	b.n	28214 <_svfprintf_r+0x8f4>
   2820a:	3f10      	subs	r7, #16
   2820c:	2f10      	cmp	r7, #16
   2820e:	f104 0408 	add.w	r4, r4, #8
   28212:	dd14      	ble.n	2823e <_svfprintf_r+0x91e>
   28214:	3301      	adds	r3, #1
   28216:	4927      	ldr	r1, [pc, #156]	@ (282b4 <_svfprintf_r+0x994>)
   28218:	3210      	adds	r2, #16
   2821a:	2b07      	cmp	r3, #7
   2821c:	e9c4 1800 	strd	r1, r8, [r4]
   28220:	e9cd 322d 	strd	r3, r2, [sp, #180]	@ 0xb4
   28224:	ddf1      	ble.n	2820a <_svfprintf_r+0x8ea>
   28226:	aa2c      	add	r2, sp, #176	@ 0xb0
   28228:	4629      	mov	r1, r5
   2822a:	4658      	mov	r0, fp
   2822c:	f002 fdc8 	bl	2adc0 <__ssprint_r>
   28230:	b9d0      	cbnz	r0, 28268 <_svfprintf_r+0x948>
   28232:	3f10      	subs	r7, #16
   28234:	2f10      	cmp	r7, #16
   28236:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	@ 0xb4
   2823a:	ac2f      	add	r4, sp, #188	@ 0xbc
   2823c:	dcea      	bgt.n	28214 <_svfprintf_r+0x8f4>
   2823e:	4615      	mov	r5, r2
   28240:	3301      	adds	r3, #1
   28242:	443d      	add	r5, r7
   28244:	2b07      	cmp	r3, #7
   28246:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   2824a:	f8c4 9000 	str.w	r9, [r4]
   2824e:	6067      	str	r7, [r4, #4]
   28250:	f300 818c 	bgt.w	2856c <_svfprintf_r+0xc4c>
   28254:	3408      	adds	r4, #8
   28256:	e4d0      	b.n	27bfa <_svfprintf_r+0x2da>
   28258:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2825a:	aa2c      	add	r2, sp, #176	@ 0xb0
   2825c:	4658      	mov	r0, fp
   2825e:	f002 fdaf 	bl	2adc0 <__ssprint_r>
   28262:	2800      	cmp	r0, #0
   28264:	f43f aced 	beq.w	27c42 <_svfprintf_r+0x322>
   28268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2826a:	2b00      	cmp	r3, #0
   2826c:	f43f ac60 	beq.w	27b30 <_svfprintf_r+0x210>
   28270:	990a      	ldr	r1, [sp, #40]	@ 0x28
   28272:	4658      	mov	r0, fp
   28274:	f7fe ff4e 	bl	27114 <_free_r>
   28278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2827a:	899b      	ldrh	r3, [r3, #12]
   2827c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
   28280:	e45a      	b.n	27b38 <_svfprintf_r+0x218>
   28282:	3301      	adds	r3, #1
   28284:	4435      	add	r5, r6
   28286:	2b07      	cmp	r3, #7
   28288:	f8c4 9000 	str.w	r9, [r4]
   2828c:	6066      	str	r6, [r4, #4]
   2828e:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   28292:	f77f acc1 	ble.w	27c18 <_svfprintf_r+0x2f8>
   28296:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28298:	aa2c      	add	r2, sp, #176	@ 0xb0
   2829a:	4658      	mov	r0, fp
   2829c:	f002 fd90 	bl	2adc0 <__ssprint_r>
   282a0:	2800      	cmp	r0, #0
   282a2:	d1e1      	bne.n	28268 <_svfprintf_r+0x948>
   282a4:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   282a6:	ac2f      	add	r4, sp, #188	@ 0xbc
   282a8:	e4b7      	b.n	27c1a <_svfprintf_r+0x2fa>
   282aa:	bf00      	nop
   282ac:	0003faa4 	.word	0x0003faa4
   282b0:	0003f840 	.word	0x0003f840
   282b4:	00047464 	.word	0x00047464
   282b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   282ba:	9f2d      	ldr	r7, [sp, #180]	@ 0xb4
   282bc:	2b01      	cmp	r3, #1
   282be:	f105 0501 	add.w	r5, r5, #1
   282c2:	f107 0701 	add.w	r7, r7, #1
   282c6:	f104 0808 	add.w	r8, r4, #8
   282ca:	f340 810b 	ble.w	284e4 <_svfprintf_r+0xbc4>
   282ce:	2301      	movs	r3, #1
   282d0:	2f07      	cmp	r7, #7
   282d2:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   282d6:	6026      	str	r6, [r4, #0]
   282d8:	6063      	str	r3, [r4, #4]
   282da:	f300 8183 	bgt.w	285e4 <_svfprintf_r+0xcc4>
   282de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   282e0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   282e2:	3701      	adds	r7, #1
   282e4:	441d      	add	r5, r3
   282e6:	2f07      	cmp	r7, #7
   282e8:	e9c8 2300 	strd	r2, r3, [r8]
   282ec:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   282f0:	f300 8185 	bgt.w	285fe <_svfprintf_r+0xcde>
   282f4:	f108 0808 	add.w	r8, r8, #8
   282f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   282fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   282fe:	1e5c      	subs	r4, r3, #1
   28300:	2200      	movs	r2, #0
   28302:	2300      	movs	r3, #0
   28304:	f7f0 fe6c 	bl	18fe0 <__aeabi_dcmpeq>
   28308:	2800      	cmp	r0, #0
   2830a:	f040 8104 	bne.w	28516 <_svfprintf_r+0xbf6>
   2830e:	3701      	adds	r7, #1
   28310:	3601      	adds	r6, #1
   28312:	4425      	add	r5, r4
   28314:	2f07      	cmp	r7, #7
   28316:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   2831a:	f8c8 6000 	str.w	r6, [r8]
   2831e:	f8c8 4004 	str.w	r4, [r8, #4]
   28322:	f300 80eb 	bgt.w	284fc <_svfprintf_r+0xbdc>
   28326:	f108 0808 	add.w	r8, r8, #8
   2832a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   2832c:	f8c8 3004 	str.w	r3, [r8, #4]
   28330:	3701      	adds	r7, #1
   28332:	441d      	add	r5, r3
   28334:	2f07      	cmp	r7, #7
   28336:	ab26      	add	r3, sp, #152	@ 0x98
   28338:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   2833c:	f8c8 3000 	str.w	r3, [r8]
   28340:	dca9      	bgt.n	28296 <_svfprintf_r+0x976>
   28342:	f108 0408 	add.w	r4, r8, #8
   28346:	e468      	b.n	27c1a <_svfprintf_r+0x2fa>
   28348:	9d04      	ldr	r5, [sp, #16]
   2834a:	2b0a      	cmp	r3, #10
   2834c:	f172 0100 	sbcs.w	r1, r2, #0
   28350:	f080 835e 	bcs.w	28a10 <_svfprintf_r+0x10f0>
   28354:	3330      	adds	r3, #48	@ 0x30
   28356:	f88d 315f 	strb.w	r3, [sp, #351]	@ 0x15f
   2835a:	2301      	movs	r3, #1
   2835c:	9504      	str	r5, [sp, #16]
   2835e:	9308      	str	r3, [sp, #32]
   28360:	f20d 165f 	addw	r6, sp, #351	@ 0x15f
   28364:	e6dd      	b.n	28122 <_svfprintf_r+0x802>
   28366:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28368:	aa2c      	add	r2, sp, #176	@ 0xb0
   2836a:	4658      	mov	r0, fp
   2836c:	f002 fd28 	bl	2adc0 <__ssprint_r>
   28370:	2800      	cmp	r0, #0
   28372:	f47f af79 	bne.w	28268 <_svfprintf_r+0x948>
   28376:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28378:	ac2f      	add	r4, sp, #188	@ 0xbc
   2837a:	e434      	b.n	27be6 <_svfprintf_r+0x2c6>
   2837c:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2837e:	9313      	str	r3, [sp, #76]	@ 0x4c
   28380:	aa2c      	add	r2, sp, #176	@ 0xb0
   28382:	4658      	mov	r0, fp
   28384:	f002 fd1c 	bl	2adc0 <__ssprint_r>
   28388:	2800      	cmp	r0, #0
   2838a:	f47f af6d 	bne.w	28268 <_svfprintf_r+0x948>
   2838e:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28390:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   28392:	ac2f      	add	r4, sp, #188	@ 0xbc
   28394:	e418      	b.n	27bc8 <_svfprintf_r+0x2a8>
   28396:	4ab4      	ldr	r2, [pc, #720]	@ (28668 <_svfprintf_r+0xd48>)
   28398:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   2839a:	9213      	str	r2, [sp, #76]	@ 0x4c
   2839c:	2e10      	cmp	r6, #16
   2839e:	dd1f      	ble.n	283e0 <_svfprintf_r+0xac0>
   283a0:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
   283a4:	2710      	movs	r7, #16
   283a6:	4691      	mov	r9, r2
   283a8:	e004      	b.n	283b4 <_svfprintf_r+0xa94>
   283aa:	3e10      	subs	r6, #16
   283ac:	2e10      	cmp	r6, #16
   283ae:	f104 0408 	add.w	r4, r4, #8
   283b2:	dd15      	ble.n	283e0 <_svfprintf_r+0xac0>
   283b4:	3301      	adds	r3, #1
   283b6:	3510      	adds	r5, #16
   283b8:	2b07      	cmp	r3, #7
   283ba:	e9c4 9700 	strd	r9, r7, [r4]
   283be:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   283c2:	ddf2      	ble.n	283aa <_svfprintf_r+0xa8a>
   283c4:	aa2c      	add	r2, sp, #176	@ 0xb0
   283c6:	4641      	mov	r1, r8
   283c8:	4658      	mov	r0, fp
   283ca:	f002 fcf9 	bl	2adc0 <__ssprint_r>
   283ce:	2800      	cmp	r0, #0
   283d0:	f47f af4a 	bne.w	28268 <_svfprintf_r+0x948>
   283d4:	3e10      	subs	r6, #16
   283d6:	2e10      	cmp	r6, #16
   283d8:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   283dc:	ac2f      	add	r4, sp, #188	@ 0xbc
   283de:	dce9      	bgt.n	283b4 <_svfprintf_r+0xa94>
   283e0:	3301      	adds	r3, #1
   283e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
   283e4:	4435      	add	r5, r6
   283e6:	2b07      	cmp	r3, #7
   283e8:	e9c4 2600 	strd	r2, r6, [r4]
   283ec:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   283f0:	f77f ac1c 	ble.w	27c2c <_svfprintf_r+0x30c>
   283f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
   283f6:	aa2c      	add	r2, sp, #176	@ 0xb0
   283f8:	4658      	mov	r0, fp
   283fa:	f002 fce1 	bl	2adc0 <__ssprint_r>
   283fe:	2800      	cmp	r0, #0
   28400:	f47f af32 	bne.w	28268 <_svfprintf_r+0x948>
   28404:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28406:	e411      	b.n	27c2c <_svfprintf_r+0x30c>
   28408:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   2840a:	2900      	cmp	r1, #0
   2840c:	f340 8351 	ble.w	28ab2 <_svfprintf_r+0x1192>
   28410:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
   28414:	4293      	cmp	r3, r2
   28416:	bfa8      	it	ge
   28418:	4613      	movge	r3, r2
   2841a:	2b00      	cmp	r3, #0
   2841c:	4698      	mov	r8, r3
   2841e:	dd0a      	ble.n	28436 <_svfprintf_r+0xb16>
   28420:	441d      	add	r5, r3
   28422:	e9c4 6300 	strd	r6, r3, [r4]
   28426:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28428:	952e      	str	r5, [sp, #184]	@ 0xb8
   2842a:	3301      	adds	r3, #1
   2842c:	2b07      	cmp	r3, #7
   2842e:	932d      	str	r3, [sp, #180]	@ 0xb4
   28430:	f300 8661 	bgt.w	290f6 <_svfprintf_r+0x17d6>
   28434:	3408      	adds	r4, #8
   28436:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
   28438:	f1b8 0f00 	cmp.w	r8, #0
   2843c:	bfa8      	it	ge
   2843e:	eba7 0708 	subge.w	r7, r7, r8
   28442:	2f00      	cmp	r7, #0
   28444:	f300 81f5 	bgt.w	28832 <_svfprintf_r+0xf12>
   28448:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2844a:	4433      	add	r3, r6
   2844c:	9305      	str	r3, [sp, #20]
   2844e:	9b04      	ldr	r3, [sp, #16]
   28450:	055f      	lsls	r7, r3, #21
   28452:	f100 8215 	bmi.w	28880 <_svfprintf_r+0xf60>
   28456:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   28458:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   2845a:	4293      	cmp	r3, r2
   2845c:	f2c0 82a0 	blt.w	289a0 <_svfprintf_r+0x1080>
   28460:	9a04      	ldr	r2, [sp, #16]
   28462:	07d0      	lsls	r0, r2, #31
   28464:	f100 829c 	bmi.w	289a0 <_svfprintf_r+0x1080>
   28468:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   2846a:	18b7      	adds	r7, r6, r2
   2846c:	1ad6      	subs	r6, r2, r3
   2846e:	9b05      	ldr	r3, [sp, #20]
   28470:	1aff      	subs	r7, r7, r3
   28472:	42b7      	cmp	r7, r6
   28474:	bfa8      	it	ge
   28476:	4637      	movge	r7, r6
   28478:	2f00      	cmp	r7, #0
   2847a:	dd0a      	ble.n	28492 <_svfprintf_r+0xb72>
   2847c:	6023      	str	r3, [r4, #0]
   2847e:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28480:	6067      	str	r7, [r4, #4]
   28482:	3301      	adds	r3, #1
   28484:	443d      	add	r5, r7
   28486:	2b07      	cmp	r3, #7
   28488:	952e      	str	r5, [sp, #184]	@ 0xb8
   2848a:	932d      	str	r3, [sp, #180]	@ 0xb4
   2848c:	f300 8665 	bgt.w	2915a <_svfprintf_r+0x183a>
   28490:	3408      	adds	r4, #8
   28492:	2f00      	cmp	r7, #0
   28494:	bfa8      	it	ge
   28496:	1bf6      	subge	r6, r6, r7
   28498:	2e00      	cmp	r6, #0
   2849a:	f77f abbe 	ble.w	27c1a <_svfprintf_r+0x2fa>
   2849e:	2e10      	cmp	r6, #16
   284a0:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   284a2:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 2866c <_svfprintf_r+0xd4c>
   284a6:	f77f aeec 	ble.w	28282 <_svfprintf_r+0x962>
   284aa:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
   284ae:	2710      	movs	r7, #16
   284b0:	e004      	b.n	284bc <_svfprintf_r+0xb9c>
   284b2:	3408      	adds	r4, #8
   284b4:	3e10      	subs	r6, #16
   284b6:	2e10      	cmp	r6, #16
   284b8:	f77f aee3 	ble.w	28282 <_svfprintf_r+0x962>
   284bc:	3301      	adds	r3, #1
   284be:	3510      	adds	r5, #16
   284c0:	2b07      	cmp	r3, #7
   284c2:	e9c4 9700 	strd	r9, r7, [r4]
   284c6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   284ca:	ddf2      	ble.n	284b2 <_svfprintf_r+0xb92>
   284cc:	aa2c      	add	r2, sp, #176	@ 0xb0
   284ce:	4641      	mov	r1, r8
   284d0:	4658      	mov	r0, fp
   284d2:	f002 fc75 	bl	2adc0 <__ssprint_r>
   284d6:	2800      	cmp	r0, #0
   284d8:	f47f aec6 	bne.w	28268 <_svfprintf_r+0x948>
   284dc:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   284e0:	ac2f      	add	r4, sp, #188	@ 0xbc
   284e2:	e7e7      	b.n	284b4 <_svfprintf_r+0xb94>
   284e4:	9b04      	ldr	r3, [sp, #16]
   284e6:	07d9      	lsls	r1, r3, #31
   284e8:	f53f aef1 	bmi.w	282ce <_svfprintf_r+0x9ae>
   284ec:	2301      	movs	r3, #1
   284ee:	2f07      	cmp	r7, #7
   284f0:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   284f4:	6026      	str	r6, [r4, #0]
   284f6:	6063      	str	r3, [r4, #4]
   284f8:	f77f af17 	ble.w	2832a <_svfprintf_r+0xa0a>
   284fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
   284fe:	aa2c      	add	r2, sp, #176	@ 0xb0
   28500:	4658      	mov	r0, fp
   28502:	f002 fc5d 	bl	2adc0 <__ssprint_r>
   28506:	2800      	cmp	r0, #0
   28508:	f47f aeae 	bne.w	28268 <_svfprintf_r+0x948>
   2850c:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   28510:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   28514:	e709      	b.n	2832a <_svfprintf_r+0xa0a>
   28516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   28518:	2b01      	cmp	r3, #1
   2851a:	f77f af06 	ble.w	2832a <_svfprintf_r+0xa0a>
   2851e:	2b11      	cmp	r3, #17
   28520:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 2866c <_svfprintf_r+0xd4c>
   28524:	f340 835c 	ble.w	28be0 <_svfprintf_r+0x12c0>
   28528:	f8cd a014 	str.w	sl, [sp, #20]
   2852c:	2610      	movs	r6, #16
   2852e:	46ca      	mov	sl, r9
   28530:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
   28534:	e005      	b.n	28542 <_svfprintf_r+0xc22>
   28536:	f108 0808 	add.w	r8, r8, #8
   2853a:	3c10      	subs	r4, #16
   2853c:	2c10      	cmp	r4, #16
   2853e:	f340 834c 	ble.w	28bda <_svfprintf_r+0x12ba>
   28542:	3701      	adds	r7, #1
   28544:	3510      	adds	r5, #16
   28546:	2f07      	cmp	r7, #7
   28548:	e9c8 a600 	strd	sl, r6, [r8]
   2854c:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   28550:	ddf1      	ble.n	28536 <_svfprintf_r+0xc16>
   28552:	aa2c      	add	r2, sp, #176	@ 0xb0
   28554:	4649      	mov	r1, r9
   28556:	4658      	mov	r0, fp
   28558:	f002 fc32 	bl	2adc0 <__ssprint_r>
   2855c:	2800      	cmp	r0, #0
   2855e:	f47f ae83 	bne.w	28268 <_svfprintf_r+0x948>
   28562:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   28566:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   2856a:	e7e6      	b.n	2853a <_svfprintf_r+0xc1a>
   2856c:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2856e:	aa2c      	add	r2, sp, #176	@ 0xb0
   28570:	4658      	mov	r0, fp
   28572:	f002 fc25 	bl	2adc0 <__ssprint_r>
   28576:	2800      	cmp	r0, #0
   28578:	f47f ae76 	bne.w	28268 <_svfprintf_r+0x948>
   2857c:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   2857e:	ac2f      	add	r4, sp, #188	@ 0xbc
   28580:	f7ff bb3b 	b.w	27bfa <_svfprintf_r+0x2da>
   28584:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   28586:	f015 0010 	ands.w	r0, r5, #16
   2858a:	f851 3b04 	ldr.w	r3, [r1], #4
   2858e:	d10c      	bne.n	285aa <_svfprintf_r+0xc8a>
   28590:	f015 0640 	ands.w	r6, r5, #64	@ 0x40
   28594:	d004      	beq.n	285a0 <_svfprintf_r+0xc80>
   28596:	910b      	str	r1, [sp, #44]	@ 0x2c
   28598:	b29b      	uxth	r3, r3
   2859a:	4602      	mov	r2, r0
   2859c:	2101      	movs	r1, #1
   2859e:	e489      	b.n	27eb4 <_svfprintf_r+0x594>
   285a0:	f415 7200 	ands.w	r2, r5, #512	@ 0x200
   285a4:	bf1c      	itt	ne
   285a6:	b2db      	uxtbne	r3, r3
   285a8:	4632      	movne	r2, r6
   285aa:	910b      	str	r1, [sp, #44]	@ 0x2c
   285ac:	2101      	movs	r1, #1
   285ae:	e481      	b.n	27eb4 <_svfprintf_r+0x594>
   285b0:	9804      	ldr	r0, [sp, #16]
   285b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   285b4:	f010 0010 	ands.w	r0, r0, #16
   285b8:	f851 3b04 	ldr.w	r3, [r1], #4
   285bc:	d13d      	bne.n	2863a <_svfprintf_r+0xd1a>
   285be:	9a04      	ldr	r2, [sp, #16]
   285c0:	f012 0540 	ands.w	r5, r2, #64	@ 0x40
   285c4:	d034      	beq.n	28630 <_svfprintf_r+0xd10>
   285c6:	b29b      	uxth	r3, r3
   285c8:	4602      	mov	r2, r0
   285ca:	910b      	str	r1, [sp, #44]	@ 0x2c
   285cc:	e4a4      	b.n	27f18 <_svfprintf_r+0x5f8>
   285ce:	425b      	negs	r3, r3
   285d0:	9d04      	ldr	r5, [sp, #16]
   285d2:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   285d6:	202d      	movs	r0, #45	@ 0x2d
   285d8:	2101      	movs	r1, #1
   285da:	e46c      	b.n	27eb6 <_svfprintf_r+0x596>
   285dc:	9b05      	ldr	r3, [sp, #20]
   285de:	9308      	str	r3, [sp, #32]
   285e0:	ae58      	add	r6, sp, #352	@ 0x160
   285e2:	e59e      	b.n	28122 <_svfprintf_r+0x802>
   285e4:	9909      	ldr	r1, [sp, #36]	@ 0x24
   285e6:	aa2c      	add	r2, sp, #176	@ 0xb0
   285e8:	4658      	mov	r0, fp
   285ea:	f002 fbe9 	bl	2adc0 <__ssprint_r>
   285ee:	2800      	cmp	r0, #0
   285f0:	f47f ae3a 	bne.w	28268 <_svfprintf_r+0x948>
   285f4:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   285f8:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   285fc:	e66f      	b.n	282de <_svfprintf_r+0x9be>
   285fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28600:	aa2c      	add	r2, sp, #176	@ 0xb0
   28602:	4658      	mov	r0, fp
   28604:	f002 fbdc 	bl	2adc0 <__ssprint_r>
   28608:	2800      	cmp	r0, #0
   2860a:	f47f ae2d 	bne.w	28268 <_svfprintf_r+0x948>
   2860e:	e9dd 752d 	ldrd	r7, r5, [sp, #180]	@ 0xb4
   28612:	f10d 08bc 	add.w	r8, sp, #188	@ 0xbc
   28616:	e66f      	b.n	282f8 <_svfprintf_r+0x9d8>
   28618:	9b04      	ldr	r3, [sp, #16]
   2861a:	07db      	lsls	r3, r3, #31
   2861c:	f57f aafd 	bpl.w	27c1a <_svfprintf_r+0x2fa>
   28620:	e532      	b.n	28088 <_svfprintf_r+0x768>
   28622:	930b      	str	r3, [sp, #44]	@ 0x2c
   28624:	f89a 3000 	ldrb.w	r3, [sl]
   28628:	f7ff b9d2 	b.w	279d0 <_svfprintf_r+0xb0>
   2862c:	ae58      	add	r6, sp, #352	@ 0x160
   2862e:	e578      	b.n	28122 <_svfprintf_r+0x802>
   28630:	9a04      	ldr	r2, [sp, #16]
   28632:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
   28636:	f040 8409 	bne.w	28e4c <_svfprintf_r+0x152c>
   2863a:	910b      	str	r1, [sp, #44]	@ 0x2c
   2863c:	e46c      	b.n	27f18 <_svfprintf_r+0x5f8>
   2863e:	920b      	str	r2, [sp, #44]	@ 0x2c
   28640:	17da      	asrs	r2, r3, #31
   28642:	4611      	mov	r1, r2
   28644:	f7ff bbf6 	b.w	27e34 <_svfprintf_r+0x514>
   28648:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
   2864a:	f89a 3000 	ldrb.w	r3, [sl]
   2864e:	2a00      	cmp	r2, #0
   28650:	f43f a9be 	beq.w	279d0 <_svfprintf_r+0xb0>
   28654:	7812      	ldrb	r2, [r2, #0]
   28656:	2a00      	cmp	r2, #0
   28658:	f43f a9ba 	beq.w	279d0 <_svfprintf_r+0xb0>
   2865c:	9a04      	ldr	r2, [sp, #16]
   2865e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
   28662:	9204      	str	r2, [sp, #16]
   28664:	f7ff b9b4 	b.w	279d0 <_svfprintf_r+0xb0>
   28668:	00047474 	.word	0x00047474
   2866c:	00047464 	.word	0x00047464
   28670:	9b04      	ldr	r3, [sp, #16]
   28672:	06d8      	lsls	r0, r3, #27
   28674:	f100 82ab 	bmi.w	28bce <_svfprintf_r+0x12ae>
   28678:	9b04      	ldr	r3, [sp, #16]
   2867a:	0659      	lsls	r1, r3, #25
   2867c:	f100 83e0 	bmi.w	28e40 <_svfprintf_r+0x1520>
   28680:	9b04      	ldr	r3, [sp, #16]
   28682:	059a      	lsls	r2, r3, #22
   28684:	f140 82a3 	bpl.w	28bce <_svfprintf_r+0x12ae>
   28688:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2868a:	9a06      	ldr	r2, [sp, #24]
   2868c:	681b      	ldr	r3, [r3, #0]
   2868e:	701a      	strb	r2, [r3, #0]
   28690:	e464      	b.n	27f5c <_svfprintf_r+0x63c>
   28692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   28696:	4602      	mov	r2, r0
   28698:	460b      	mov	r3, r1
   2869a:	f7f0 fcd3 	bl	19044 <__aeabi_dcmpun>
   2869e:	2800      	cmp	r0, #0
   286a0:	f040 861e 	bne.w	292e0 <_svfprintf_r+0x19c0>
   286a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   286a6:	2b61      	cmp	r3, #97	@ 0x61
   286a8:	f000 8531 	beq.w	2910e <_svfprintf_r+0x17ee>
   286ac:	2b41      	cmp	r3, #65	@ 0x41
   286ae:	f000 854e 	beq.w	2914e <_svfprintf_r+0x182e>
   286b2:	9b05      	ldr	r3, [sp, #20]
   286b4:	3301      	adds	r3, #1
   286b6:	f000 8402 	beq.w	28ebe <_svfprintf_r+0x159e>
   286ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   286bc:	f023 0320 	bic.w	r3, r3, #32
   286c0:	2b47      	cmp	r3, #71	@ 0x47
   286c2:	f000 85e1 	beq.w	29288 <_svfprintf_r+0x1968>
   286c6:	900a      	str	r0, [sp, #40]	@ 0x28
   286c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
   286cc:	9a04      	ldr	r2, [sp, #16]
   286ce:	2900      	cmp	r1, #0
   286d0:	f442 7980 	orr.w	r9, r2, #256	@ 0x100
   286d4:	f2c0 84f9 	blt.w	290ca <_svfprintf_r+0x17aa>
   286d8:	ed9d 7b10 	vldr	d7, [sp, #64]	@ 0x40
   286dc:	ed8d 7b1e 	vstr	d7, [sp, #120]	@ 0x78
   286e0:	2300      	movs	r3, #0
   286e2:	9313      	str	r3, [sp, #76]	@ 0x4c
   286e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   286e6:	3b41      	subs	r3, #65	@ 0x41
   286e8:	2b25      	cmp	r3, #37	@ 0x25
   286ea:	f200 8325 	bhi.w	28d38 <_svfprintf_r+0x1418>
   286ee:	e8df f013 	tbh	[pc, r3, lsl #1]
   286f2:	0429      	.short	0x0429
   286f4:	03230323 	.word	0x03230323
   286f8:	03ea0323 	.word	0x03ea0323
   286fc:	032304b5 	.word	0x032304b5
   28700:	03230323 	.word	0x03230323
   28704:	03230323 	.word	0x03230323
   28708:	03230323 	.word	0x03230323
   2870c:	03230323 	.word	0x03230323
   28710:	03230323 	.word	0x03230323
   28714:	03230323 	.word	0x03230323
   28718:	03230323 	.word	0x03230323
   2871c:	03230323 	.word	0x03230323
   28720:	03230323 	.word	0x03230323
   28724:	03230323 	.word	0x03230323
   28728:	03230323 	.word	0x03230323
   2872c:	03230323 	.word	0x03230323
   28730:	04290323 	.word	0x04290323
   28734:	03230323 	.word	0x03230323
   28738:	03ea0323 	.word	0x03ea0323
   2873c:	04b5      	.short	0x04b5
   2873e:	9d04      	ldr	r5, [sp, #16]
   28740:	930c      	str	r3, [sp, #48]	@ 0x30
   28742:	f7ff bba9 	b.w	27e98 <_svfprintf_r+0x578>
   28746:	930c      	str	r3, [sp, #48]	@ 0x30
   28748:	4bad      	ldr	r3, [pc, #692]	@ (28a00 <_svfprintf_r+0x10e0>)
   2874a:	9315      	str	r3, [sp, #84]	@ 0x54
   2874c:	9b04      	ldr	r3, [sp, #16]
   2874e:	f013 0220 	ands.w	r2, r3, #32
   28752:	f000 8133 	beq.w	289bc <_svfprintf_r+0x109c>
   28756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   28758:	3307      	adds	r3, #7
   2875a:	f023 0307 	bic.w	r3, r3, #7
   2875e:	4619      	mov	r1, r3
   28760:	685a      	ldr	r2, [r3, #4]
   28762:	f851 3b08 	ldr.w	r3, [r1], #8
   28766:	910b      	str	r1, [sp, #44]	@ 0x2c
   28768:	9804      	ldr	r0, [sp, #16]
   2876a:	07c1      	lsls	r1, r0, #31
   2876c:	d50b      	bpl.n	28786 <_svfprintf_r+0xe66>
   2876e:	ea53 0102 	orrs.w	r1, r3, r2
   28772:	d008      	beq.n	28786 <_svfprintf_r+0xe66>
   28774:	990c      	ldr	r1, [sp, #48]	@ 0x30
   28776:	f88d 1089 	strb.w	r1, [sp, #137]	@ 0x89
   2877a:	f040 0102 	orr.w	r1, r0, #2
   2877e:	9104      	str	r1, [sp, #16]
   28780:	2130      	movs	r1, #48	@ 0x30
   28782:	f88d 1088 	strb.w	r1, [sp, #136]	@ 0x88
   28786:	9904      	ldr	r1, [sp, #16]
   28788:	f421 6580 	bic.w	r5, r1, #1024	@ 0x400
   2878c:	2102      	movs	r1, #2
   2878e:	f7ff bb91 	b.w	27eb4 <_svfprintf_r+0x594>
   28792:	930c      	str	r3, [sp, #48]	@ 0x30
   28794:	f7ff bbb2 	b.w	27efc <_svfprintf_r+0x5dc>
   28798:	930c      	str	r3, [sp, #48]	@ 0x30
   2879a:	4b9a      	ldr	r3, [pc, #616]	@ (28a04 <_svfprintf_r+0x10e4>)
   2879c:	9315      	str	r3, [sp, #84]	@ 0x54
   2879e:	e7d5      	b.n	2874c <_svfprintf_r+0xe2c>
   287a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   287a2:	681b      	ldr	r3, [r3, #0]
   287a4:	f88d 30fc 	strb.w	r3, [sp, #252]	@ 0xfc
   287a8:	2301      	movs	r3, #1
   287aa:	9302      	str	r3, [sp, #8]
   287ac:	9308      	str	r3, [sp, #32]
   287ae:	ae3f      	add	r6, sp, #252	@ 0xfc
   287b0:	f7ff baf5 	b.w	27d9e <_svfprintf_r+0x47e>
   287b4:	9b04      	ldr	r3, [sp, #16]
   287b6:	f043 0320 	orr.w	r3, r3, #32
   287ba:	9304      	str	r3, [sp, #16]
   287bc:	f10a 0a01 	add.w	sl, sl, #1
   287c0:	f89a 3000 	ldrb.w	r3, [sl]
   287c4:	f7ff b904 	b.w	279d0 <_svfprintf_r+0xb0>
   287c8:	9b04      	ldr	r3, [sp, #16]
   287ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
   287ce:	9304      	str	r3, [sp, #16]
   287d0:	f10a 0a01 	add.w	sl, sl, #1
   287d4:	f89a 3000 	ldrb.w	r3, [sl]
   287d8:	f7ff b8fa 	b.w	279d0 <_svfprintf_r+0xb0>
   287dc:	9909      	ldr	r1, [sp, #36]	@ 0x24
   287de:	aa2c      	add	r2, sp, #176	@ 0xb0
   287e0:	4658      	mov	r0, fp
   287e2:	f002 faed 	bl	2adc0 <__ssprint_r>
   287e6:	2800      	cmp	r0, #0
   287e8:	f47f ad3e 	bne.w	28268 <_svfprintf_r+0x948>
   287ec:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   287ee:	ac2f      	add	r4, sp, #188	@ 0xbc
   287f0:	e457      	b.n	280a2 <_svfprintf_r+0x782>
   287f2:	9b05      	ldr	r3, [sp, #20]
   287f4:	960a      	str	r6, [sp, #40]	@ 0x28
   287f6:	2b06      	cmp	r3, #6
   287f8:	4631      	mov	r1, r6
   287fa:	bf28      	it	cs
   287fc:	2306      	movcs	r3, #6
   287fe:	9605      	str	r6, [sp, #20]
   28800:	4632      	mov	r2, r6
   28802:	9302      	str	r3, [sp, #8]
   28804:	4e80      	ldr	r6, [pc, #512]	@ (28a08 <_svfprintf_r+0x10e8>)
   28806:	970b      	str	r7, [sp, #44]	@ 0x2c
   28808:	9308      	str	r3, [sp, #32]
   2880a:	9112      	str	r1, [sp, #72]	@ 0x48
   2880c:	910f      	str	r1, [sp, #60]	@ 0x3c
   2880e:	910d      	str	r1, [sp, #52]	@ 0x34
   28810:	f7ff ba65 	b.w	27cde <_svfprintf_r+0x3be>
   28814:	2140      	movs	r1, #64	@ 0x40
   28816:	4658      	mov	r0, fp
   28818:	f7fe fdb8 	bl	2738c <_malloc_r>
   2881c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2881e:	6018      	str	r0, [r3, #0]
   28820:	6118      	str	r0, [r3, #16]
   28822:	2800      	cmp	r0, #0
   28824:	f000 8603 	beq.w	2942e <_svfprintf_r+0x1b0e>
   28828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   2882a:	2340      	movs	r3, #64	@ 0x40
   2882c:	6153      	str	r3, [r2, #20]
   2882e:	f7ff b893 	b.w	27958 <_svfprintf_r+0x38>
   28832:	2f10      	cmp	r7, #16
   28834:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28836:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 28a0c <_svfprintf_r+0x10ec>
   2883a:	f340 820b 	ble.w	28c54 <_svfprintf_r+0x1334>
   2883e:	4649      	mov	r1, r9
   28840:	462a      	mov	r2, r5
   28842:	46b1      	mov	r9, r6
   28844:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   28846:	f04f 0810 	mov.w	r8, #16
   2884a:	460e      	mov	r6, r1
   2884c:	e004      	b.n	28858 <_svfprintf_r+0xf38>
   2884e:	3408      	adds	r4, #8
   28850:	3f10      	subs	r7, #16
   28852:	2f10      	cmp	r7, #16
   28854:	f340 81fa 	ble.w	28c4c <_svfprintf_r+0x132c>
   28858:	3301      	adds	r3, #1
   2885a:	3210      	adds	r2, #16
   2885c:	2b07      	cmp	r3, #7
   2885e:	e9c4 6800 	strd	r6, r8, [r4]
   28862:	e9cd 322d 	strd	r3, r2, [sp, #180]	@ 0xb4
   28866:	ddf2      	ble.n	2884e <_svfprintf_r+0xf2e>
   28868:	aa2c      	add	r2, sp, #176	@ 0xb0
   2886a:	4629      	mov	r1, r5
   2886c:	4658      	mov	r0, fp
   2886e:	f002 faa7 	bl	2adc0 <__ssprint_r>
   28872:	2800      	cmp	r0, #0
   28874:	f47f acf8 	bne.w	28268 <_svfprintf_r+0x948>
   28878:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	@ 0xb4
   2887c:	ac2f      	add	r4, sp, #188	@ 0xbc
   2887e:	e7e7      	b.n	28850 <_svfprintf_r+0xf30>
   28880:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   28882:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
   28886:	eb06 0903 	add.w	r9, r6, r3
   2888a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   2888c:	f8dd a05c 	ldr.w	sl, [sp, #92]	@ 0x5c
   28890:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
   28894:	960d      	str	r6, [sp, #52]	@ 0x34
   28896:	2b00      	cmp	r3, #0
   28898:	4622      	mov	r2, r4
   2889a:	4629      	mov	r1, r5
   2889c:	9c05      	ldr	r4, [sp, #20]
   2889e:	9d09      	ldr	r5, [sp, #36]	@ 0x24
   288a0:	f8cd 9014 	str.w	r9, [sp, #20]
   288a4:	f8dd 9070 	ldr.w	r9, [sp, #112]	@ 0x70
   288a8:	dd31      	ble.n	2890e <_svfprintf_r+0xfee>
   288aa:	f1b8 0f00 	cmp.w	r8, #0
   288ae:	f340 813b 	ble.w	28b28 <_svfprintf_r+0x1208>
   288b2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
   288b6:	982d      	ldr	r0, [sp, #180]	@ 0xb4
   288b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   288ba:	3001      	adds	r0, #1
   288bc:	4449      	add	r1, r9
   288be:	2807      	cmp	r0, #7
   288c0:	e9c2 3900 	strd	r3, r9, [r2]
   288c4:	912e      	str	r1, [sp, #184]	@ 0xb8
   288c6:	902d      	str	r0, [sp, #180]	@ 0xb4
   288c8:	f300 8087 	bgt.w	289da <_svfprintf_r+0x10ba>
   288cc:	3208      	adds	r2, #8
   288ce:	9b05      	ldr	r3, [sp, #20]
   288d0:	f89a 0000 	ldrb.w	r0, [sl]
   288d4:	1b1f      	subs	r7, r3, r4
   288d6:	4287      	cmp	r7, r0
   288d8:	bfa8      	it	ge
   288da:	4607      	movge	r7, r0
   288dc:	2f00      	cmp	r7, #0
   288de:	dd0c      	ble.n	288fa <_svfprintf_r+0xfda>
   288e0:	982d      	ldr	r0, [sp, #180]	@ 0xb4
   288e2:	3001      	adds	r0, #1
   288e4:	4439      	add	r1, r7
   288e6:	2807      	cmp	r0, #7
   288e8:	e9c2 4700 	strd	r4, r7, [r2]
   288ec:	912e      	str	r1, [sp, #184]	@ 0xb8
   288ee:	902d      	str	r0, [sp, #180]	@ 0xb4
   288f0:	f300 8160 	bgt.w	28bb4 <_svfprintf_r+0x1294>
   288f4:	f89a 0000 	ldrb.w	r0, [sl]
   288f8:	3208      	adds	r2, #8
   288fa:	2f00      	cmp	r7, #0
   288fc:	bfac      	ite	ge
   288fe:	1bc6      	subge	r6, r0, r7
   28900:	4606      	movlt	r6, r0
   28902:	2e00      	cmp	r6, #0
   28904:	dc16      	bgt.n	28934 <_svfprintf_r+0x1014>
   28906:	4404      	add	r4, r0
   28908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   2890a:	2b00      	cmp	r3, #0
   2890c:	dccd      	bgt.n	288aa <_svfprintf_r+0xf8a>
   2890e:	f1b8 0f00 	cmp.w	r8, #0
   28912:	dcce      	bgt.n	288b2 <_svfprintf_r+0xf92>
   28914:	e9dd 630d 	ldrd	r6, r3, [sp, #52]	@ 0x34
   28918:	4620      	mov	r0, r4
   2891a:	18f3      	adds	r3, r6, r3
   2891c:	4298      	cmp	r0, r3
   2891e:	4614      	mov	r4, r2
   28920:	4602      	mov	r2, r0
   28922:	bf28      	it	cs
   28924:	461a      	movcs	r2, r3
   28926:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
   2892a:	460d      	mov	r5, r1
   2892c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
   28930:	9205      	str	r2, [sp, #20]
   28932:	e590      	b.n	28456 <_svfprintf_r+0xb36>
   28934:	2e10      	cmp	r6, #16
   28936:	982d      	ldr	r0, [sp, #180]	@ 0xb4
   28938:	4b34      	ldr	r3, [pc, #208]	@ (28a0c <_svfprintf_r+0x10ec>)
   2893a:	dd23      	ble.n	28984 <_svfprintf_r+0x1064>
   2893c:	9408      	str	r4, [sp, #32]
   2893e:	2710      	movs	r7, #16
   28940:	4634      	mov	r4, r6
   28942:	461e      	mov	r6, r3
   28944:	e004      	b.n	28950 <_svfprintf_r+0x1030>
   28946:	3c10      	subs	r4, #16
   28948:	2c10      	cmp	r4, #16
   2894a:	f102 0208 	add.w	r2, r2, #8
   2894e:	dd16      	ble.n	2897e <_svfprintf_r+0x105e>
   28950:	3001      	adds	r0, #1
   28952:	4b2e      	ldr	r3, [pc, #184]	@ (28a0c <_svfprintf_r+0x10ec>)
   28954:	3110      	adds	r1, #16
   28956:	2807      	cmp	r0, #7
   28958:	e9c2 3700 	strd	r3, r7, [r2]
   2895c:	e9cd 012d 	strd	r0, r1, [sp, #180]	@ 0xb4
   28960:	ddf1      	ble.n	28946 <_svfprintf_r+0x1026>
   28962:	aa2c      	add	r2, sp, #176	@ 0xb0
   28964:	4629      	mov	r1, r5
   28966:	4658      	mov	r0, fp
   28968:	f002 fa2a 	bl	2adc0 <__ssprint_r>
   2896c:	2800      	cmp	r0, #0
   2896e:	f47f ac7b 	bne.w	28268 <_svfprintf_r+0x948>
   28972:	3c10      	subs	r4, #16
   28974:	2c10      	cmp	r4, #16
   28976:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	@ 0xb4
   2897a:	aa2f      	add	r2, sp, #188	@ 0xbc
   2897c:	dce8      	bgt.n	28950 <_svfprintf_r+0x1030>
   2897e:	4633      	mov	r3, r6
   28980:	4626      	mov	r6, r4
   28982:	9c08      	ldr	r4, [sp, #32]
   28984:	6013      	str	r3, [r2, #0]
   28986:	3001      	adds	r0, #1
   28988:	4431      	add	r1, r6
   2898a:	2807      	cmp	r0, #7
   2898c:	e9cd 012d 	strd	r0, r1, [sp, #180]	@ 0xb4
   28990:	6056      	str	r6, [r2, #4]
   28992:	f300 83a2 	bgt.w	290da <_svfprintf_r+0x17ba>
   28996:	f89a 0000 	ldrb.w	r0, [sl]
   2899a:	3208      	adds	r2, #8
   2899c:	4404      	add	r4, r0
   2899e:	e7b3      	b.n	28908 <_svfprintf_r+0xfe8>
   289a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   289a2:	9916      	ldr	r1, [sp, #88]	@ 0x58
   289a4:	4415      	add	r5, r2
   289a6:	e9c4 1200 	strd	r1, r2, [r4]
   289aa:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
   289ac:	952e      	str	r5, [sp, #184]	@ 0xb8
   289ae:	3201      	adds	r2, #1
   289b0:	2a07      	cmp	r2, #7
   289b2:	922d      	str	r2, [sp, #180]	@ 0xb4
   289b4:	f300 83be 	bgt.w	29134 <_svfprintf_r+0x1814>
   289b8:	3408      	adds	r4, #8
   289ba:	e555      	b.n	28468 <_svfprintf_r+0xb48>
   289bc:	9804      	ldr	r0, [sp, #16]
   289be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
   289c0:	f010 0010 	ands.w	r0, r0, #16
   289c4:	f851 3b04 	ldr.w	r3, [r1], #4
   289c8:	d117      	bne.n	289fa <_svfprintf_r+0x10da>
   289ca:	9a04      	ldr	r2, [sp, #16]
   289cc:	f012 0540 	ands.w	r5, r2, #64	@ 0x40
   289d0:	d00e      	beq.n	289f0 <_svfprintf_r+0x10d0>
   289d2:	b29b      	uxth	r3, r3
   289d4:	4602      	mov	r2, r0
   289d6:	910b      	str	r1, [sp, #44]	@ 0x2c
   289d8:	e6c6      	b.n	28768 <_svfprintf_r+0xe48>
   289da:	aa2c      	add	r2, sp, #176	@ 0xb0
   289dc:	4629      	mov	r1, r5
   289de:	4658      	mov	r0, fp
   289e0:	f002 f9ee 	bl	2adc0 <__ssprint_r>
   289e4:	2800      	cmp	r0, #0
   289e6:	f47f ac3f 	bne.w	28268 <_svfprintf_r+0x948>
   289ea:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   289ec:	aa2f      	add	r2, sp, #188	@ 0xbc
   289ee:	e76e      	b.n	288ce <_svfprintf_r+0xfae>
   289f0:	9a04      	ldr	r2, [sp, #16]
   289f2:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
   289f6:	f040 821f 	bne.w	28e38 <_svfprintf_r+0x1518>
   289fa:	910b      	str	r1, [sp, #44]	@ 0x2c
   289fc:	e6b4      	b.n	28768 <_svfprintf_r+0xe48>
   289fe:	bf00      	nop
   28a00:	0003fa90 	.word	0x0003fa90
   28a04:	0003faa4 	.word	0x0003faa4
   28a08:	0003fab8 	.word	0x0003fab8
   28a0c:	00047464 	.word	0x00047464
   28a10:	2100      	movs	r1, #0
   28a12:	9408      	str	r4, [sp, #32]
   28a14:	f8df 931c 	ldr.w	r9, [pc, #796]	@ 28d34 <_svfprintf_r+0x1414>
   28a18:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
   28a1a:	f8cd a010 	str.w	sl, [sp, #16]
   28a1e:	f405 6780 	and.w	r7, r5, #1024	@ 0x400
   28a22:	ae58      	add	r6, sp, #352	@ 0x160
   28a24:	f04f 0805 	mov.w	r8, #5
   28a28:	9502      	str	r5, [sp, #8]
   28a2a:	468c      	mov	ip, r1
   28a2c:	e005      	b.n	28a3a <_svfprintf_r+0x111a>
   28a2e:	2b0a      	cmp	r3, #10
   28a30:	f172 0200 	sbcs.w	r2, r2, #0
   28a34:	d334      	bcc.n	28aa0 <_svfprintf_r+0x1180>
   28a36:	4653      	mov	r3, sl
   28a38:	462a      	mov	r2, r5
   28a3a:	1899      	adds	r1, r3, r2
   28a3c:	f141 0100 	adc.w	r1, r1, #0
   28a40:	fba9 0501 	umull	r0, r5, r9, r1
   28a44:	f025 0003 	bic.w	r0, r5, #3
   28a48:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   28a4c:	1a09      	subs	r1, r1, r0
   28a4e:	1a58      	subs	r0, r3, r1
   28a50:	f04f 35cc 	mov.w	r5, #3435973836	@ 0xcccccccc
   28a54:	f162 0e00 	sbc.w	lr, r2, #0
   28a58:	fb05 f500 	mul.w	r5, r5, r0
   28a5c:	fba0 a009 	umull	sl, r0, r0, r9
   28a60:	fb09 550e 	mla	r5, r9, lr, r5
   28a64:	f00a 0e01 	and.w	lr, sl, #1
   28a68:	4405      	add	r5, r0
   28a6a:	fbae 0e08 	umull	r0, lr, lr, r8
   28a6e:	1840      	adds	r0, r0, r1
   28a70:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
   28a74:	3030      	adds	r0, #48	@ 0x30
   28a76:	f806 0c01 	strb.w	r0, [r6, #-1]
   28a7a:	ea4a 7ac5 	orr.w	sl, sl, r5, lsl #31
   28a7e:	f10c 0c01 	add.w	ip, ip, #1
   28a82:	3e01      	subs	r6, #1
   28a84:	086d      	lsrs	r5, r5, #1
   28a86:	2f00      	cmp	r7, #0
   28a88:	d0d1      	beq.n	28a2e <_svfprintf_r+0x110e>
   28a8a:	7821      	ldrb	r1, [r4, #0]
   28a8c:	458c      	cmp	ip, r1
   28a8e:	d1ce      	bne.n	28a2e <_svfprintf_r+0x110e>
   28a90:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
   28a94:	d0cb      	beq.n	28a2e <_svfprintf_r+0x110e>
   28a96:	2b0a      	cmp	r3, #10
   28a98:	f172 0200 	sbcs.w	r2, r2, #0
   28a9c:	f080 80e7 	bcs.w	28c6e <_svfprintf_r+0x134e>
   28aa0:	9417      	str	r4, [sp, #92]	@ 0x5c
   28aa2:	f8dd a010 	ldr.w	sl, [sp, #16]
   28aa6:	9d02      	ldr	r5, [sp, #8]
   28aa8:	9c08      	ldr	r4, [sp, #32]
   28aaa:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
   28aae:	f7ff bb34 	b.w	2811a <_svfprintf_r+0x7fa>
   28ab2:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28ab4:	4a9e      	ldr	r2, [pc, #632]	@ (28d30 <_svfprintf_r+0x1410>)
   28ab6:	6022      	str	r2, [r4, #0]
   28ab8:	3301      	adds	r3, #1
   28aba:	3501      	adds	r5, #1
   28abc:	2201      	movs	r2, #1
   28abe:	2b07      	cmp	r3, #7
   28ac0:	952e      	str	r5, [sp, #184]	@ 0xb8
   28ac2:	932d      	str	r3, [sp, #180]	@ 0xb4
   28ac4:	6062      	str	r2, [r4, #4]
   28ac6:	f300 811b 	bgt.w	28d00 <_svfprintf_r+0x13e0>
   28aca:	3408      	adds	r4, #8
   28acc:	2900      	cmp	r1, #0
   28ace:	f040 8093 	bne.w	28bf8 <_svfprintf_r+0x12d8>
   28ad2:	9b04      	ldr	r3, [sp, #16]
   28ad4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   28ad6:	f003 0301 	and.w	r3, r3, #1
   28ada:	4313      	orrs	r3, r2
   28adc:	f43f a89d 	beq.w	27c1a <_svfprintf_r+0x2fa>
   28ae0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   28ae2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   28ae4:	441d      	add	r5, r3
   28ae6:	e9c4 2300 	strd	r2, r3, [r4]
   28aea:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28aec:	952e      	str	r5, [sp, #184]	@ 0xb8
   28aee:	3301      	adds	r3, #1
   28af0:	2b07      	cmp	r3, #7
   28af2:	932d      	str	r3, [sp, #180]	@ 0xb4
   28af4:	f300 81d6 	bgt.w	28ea4 <_svfprintf_r+0x1584>
   28af8:	f104 0208 	add.w	r2, r4, #8
   28afc:	e08d      	b.n	28c1a <_svfprintf_r+0x12fa>
   28afe:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28b00:	9313      	str	r3, [sp, #76]	@ 0x4c
   28b02:	aa2c      	add	r2, sp, #176	@ 0xb0
   28b04:	4658      	mov	r0, fp
   28b06:	f002 f95b 	bl	2adc0 <__ssprint_r>
   28b0a:	2800      	cmp	r0, #0
   28b0c:	f47f abac 	bne.w	28268 <_svfprintf_r+0x948>
   28b10:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   28b14:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28b16:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   28b18:	ac2f      	add	r4, sp, #188	@ 0xbc
   28b1a:	f7ff b846 	b.w	27baa <_svfprintf_r+0x28a>
   28b1e:	2901      	cmp	r1, #1
   28b20:	9d04      	ldr	r5, [sp, #16]
   28b22:	f47f aaea 	bne.w	280fa <_svfprintf_r+0x7da>
   28b26:	e415      	b.n	28354 <_svfprintf_r+0xa34>
   28b28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   28b2a:	3b01      	subs	r3, #1
   28b2c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
   28b30:	930f      	str	r3, [sp, #60]	@ 0x3c
   28b32:	e6c0      	b.n	288b6 <_svfprintf_r+0xf96>
   28b34:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28b36:	aa2c      	add	r2, sp, #176	@ 0xb0
   28b38:	4658      	mov	r0, fp
   28b3a:	f002 f941 	bl	2adc0 <__ssprint_r>
   28b3e:	2800      	cmp	r0, #0
   28b40:	f47f ab92 	bne.w	28268 <_svfprintf_r+0x948>
   28b44:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28b46:	ac2f      	add	r4, sp, #188	@ 0xbc
   28b48:	f7ff ba99 	b.w	2807e <_svfprintf_r+0x75e>
   28b4c:	f10d 08a8 	add.w	r8, sp, #168	@ 0xa8
   28b50:	2208      	movs	r2, #8
   28b52:	2100      	movs	r1, #0
   28b54:	4640      	mov	r0, r8
   28b56:	9625      	str	r6, [sp, #148]	@ 0x94
   28b58:	f7fe f8b4 	bl	26cc4 <memset>
   28b5c:	9b05      	ldr	r3, [sp, #20]
   28b5e:	2b00      	cmp	r3, #0
   28b60:	f2c0 8092 	blt.w	28c88 <_svfprintf_r+0x1368>
   28b64:	2500      	movs	r5, #0
   28b66:	9702      	str	r7, [sp, #8]
   28b68:	4699      	mov	r9, r3
   28b6a:	462f      	mov	r7, r5
   28b6c:	e00e      	b.n	28b8c <_svfprintf_r+0x126c>
   28b6e:	a93f      	add	r1, sp, #252	@ 0xfc
   28b70:	4658      	mov	r0, fp
   28b72:	f7fe f9f7 	bl	26f64 <_wcrtomb_r>
   28b76:	1c43      	adds	r3, r0, #1
   28b78:	4438      	add	r0, r7
   28b7a:	f000 838f 	beq.w	2929c <_svfprintf_r+0x197c>
   28b7e:	4548      	cmp	r0, r9
   28b80:	dc09      	bgt.n	28b96 <_svfprintf_r+0x1276>
   28b82:	f105 0504 	add.w	r5, r5, #4
   28b86:	f000 83bd 	beq.w	29304 <_svfprintf_r+0x19e4>
   28b8a:	4607      	mov	r7, r0
   28b8c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
   28b8e:	5952      	ldr	r2, [r2, r5]
   28b90:	4643      	mov	r3, r8
   28b92:	2a00      	cmp	r2, #0
   28b94:	d1eb      	bne.n	28b6e <_svfprintf_r+0x124e>
   28b96:	9708      	str	r7, [sp, #32]
   28b98:	9f02      	ldr	r7, [sp, #8]
   28b9a:	e083      	b.n	28ca4 <_svfprintf_r+0x1384>
   28b9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28b9e:	aa2c      	add	r2, sp, #176	@ 0xb0
   28ba0:	4658      	mov	r0, fp
   28ba2:	f002 f90d 	bl	2adc0 <__ssprint_r>
   28ba6:	2800      	cmp	r0, #0
   28ba8:	f47f ab5e 	bne.w	28268 <_svfprintf_r+0x948>
   28bac:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28bae:	ac2f      	add	r4, sp, #188	@ 0xbc
   28bb0:	f7ff b81d 	b.w	27bee <_svfprintf_r+0x2ce>
   28bb4:	aa2c      	add	r2, sp, #176	@ 0xb0
   28bb6:	4629      	mov	r1, r5
   28bb8:	4658      	mov	r0, fp
   28bba:	f002 f901 	bl	2adc0 <__ssprint_r>
   28bbe:	2800      	cmp	r0, #0
   28bc0:	f47f ab52 	bne.w	28268 <_svfprintf_r+0x948>
   28bc4:	f89a 0000 	ldrb.w	r0, [sl]
   28bc8:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   28bca:	aa2f      	add	r2, sp, #188	@ 0xbc
   28bcc:	e695      	b.n	288fa <_svfprintf_r+0xfda>
   28bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   28bd0:	9a06      	ldr	r2, [sp, #24]
   28bd2:	681b      	ldr	r3, [r3, #0]
   28bd4:	601a      	str	r2, [r3, #0]
   28bd6:	f7ff b9c1 	b.w	27f5c <_svfprintf_r+0x63c>
   28bda:	46d1      	mov	r9, sl
   28bdc:	f8dd a014 	ldr.w	sl, [sp, #20]
   28be0:	f8c8 9000 	str.w	r9, [r8]
   28be4:	3701      	adds	r7, #1
   28be6:	4425      	add	r5, r4
   28be8:	2f07      	cmp	r7, #7
   28bea:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
   28bee:	f8c8 4004 	str.w	r4, [r8, #4]
   28bf2:	f77f ab98 	ble.w	28326 <_svfprintf_r+0xa06>
   28bf6:	e481      	b.n	284fc <_svfprintf_r+0xbdc>
   28bf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   28bfa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
   28bfc:	441d      	add	r5, r3
   28bfe:	e9c4 2300 	strd	r2, r3, [r4]
   28c02:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
   28c04:	952e      	str	r5, [sp, #184]	@ 0xb8
   28c06:	3301      	adds	r3, #1
   28c08:	2b07      	cmp	r3, #7
   28c0a:	932d      	str	r3, [sp, #180]	@ 0xb4
   28c0c:	f300 814a 	bgt.w	28ea4 <_svfprintf_r+0x1584>
   28c10:	f104 0208 	add.w	r2, r4, #8
   28c14:	2900      	cmp	r1, #0
   28c16:	f2c0 82e0 	blt.w	291da <_svfprintf_r+0x18ba>
   28c1a:	990e      	ldr	r1, [sp, #56]	@ 0x38
   28c1c:	6016      	str	r6, [r2, #0]
   28c1e:	3301      	adds	r3, #1
   28c20:	440d      	add	r5, r1
   28c22:	2b07      	cmp	r3, #7
   28c24:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   28c28:	6051      	str	r1, [r2, #4]
   28c2a:	f73f ab34 	bgt.w	28296 <_svfprintf_r+0x976>
   28c2e:	f102 0408 	add.w	r4, r2, #8
   28c32:	f7fe bff2 	b.w	27c1a <_svfprintf_r+0x2fa>
   28c36:	9904      	ldr	r1, [sp, #16]
   28c38:	920b      	str	r2, [sp, #44]	@ 0x2c
   28c3a:	058d      	lsls	r5, r1, #22
   28c3c:	bf4a      	itet	mi
   28c3e:	f343 12c0 	sbfxmi	r2, r3, #7, #1
   28c42:	17da      	asrpl	r2, r3, #31
   28c44:	b25b      	sxtbmi	r3, r3
   28c46:	4611      	mov	r1, r2
   28c48:	f7ff b8f4 	b.w	27e34 <_svfprintf_r+0x514>
   28c4c:	4615      	mov	r5, r2
   28c4e:	4632      	mov	r2, r6
   28c50:	464e      	mov	r6, r9
   28c52:	4691      	mov	r9, r2
   28c54:	3301      	adds	r3, #1
   28c56:	443d      	add	r5, r7
   28c58:	2b07      	cmp	r3, #7
   28c5a:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   28c5e:	f8c4 9000 	str.w	r9, [r4]
   28c62:	6067      	str	r7, [r4, #4]
   28c64:	f300 8112 	bgt.w	28e8c <_svfprintf_r+0x156c>
   28c68:	3408      	adds	r4, #8
   28c6a:	f7ff bbed 	b.w	28448 <_svfprintf_r+0xb28>
   28c6e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
   28c70:	9919      	ldr	r1, [sp, #100]	@ 0x64
   28c72:	1af6      	subs	r6, r6, r3
   28c74:	461a      	mov	r2, r3
   28c76:	4630      	mov	r0, r6
   28c78:	f7fe f8bc 	bl	26df4 <strncpy>
   28c7c:	7863      	ldrb	r3, [r4, #1]
   28c7e:	b103      	cbz	r3, 28c82 <_svfprintf_r+0x1362>
   28c80:	3401      	adds	r4, #1
   28c82:	f04f 0c00 	mov.w	ip, #0
   28c86:	e6d6      	b.n	28a36 <_svfprintf_r+0x1116>
   28c88:	2300      	movs	r3, #0
   28c8a:	4619      	mov	r1, r3
   28c8c:	f8cd 8000 	str.w	r8, [sp]
   28c90:	aa25      	add	r2, sp, #148	@ 0x94
   28c92:	4658      	mov	r0, fp
   28c94:	f7fe f98c 	bl	26fb0 <_wcsrtombs_r>
   28c98:	4603      	mov	r3, r0
   28c9a:	3301      	adds	r3, #1
   28c9c:	9008      	str	r0, [sp, #32]
   28c9e:	f000 82fd 	beq.w	2929c <_svfprintf_r+0x197c>
   28ca2:	9625      	str	r6, [sp, #148]	@ 0x94
   28ca4:	9b08      	ldr	r3, [sp, #32]
   28ca6:	2b00      	cmp	r3, #0
   28ca8:	d036      	beq.n	28d18 <_svfprintf_r+0x13f8>
   28caa:	2b63      	cmp	r3, #99	@ 0x63
   28cac:	f300 80e4 	bgt.w	28e78 <_svfprintf_r+0x1558>
   28cb0:	2300      	movs	r3, #0
   28cb2:	930a      	str	r3, [sp, #40]	@ 0x28
   28cb4:	ae3f      	add	r6, sp, #252	@ 0xfc
   28cb6:	2208      	movs	r2, #8
   28cb8:	2100      	movs	r1, #0
   28cba:	4640      	mov	r0, r8
   28cbc:	f7fe f802 	bl	26cc4 <memset>
   28cc0:	9d08      	ldr	r5, [sp, #32]
   28cc2:	f8cd 8000 	str.w	r8, [sp]
   28cc6:	462b      	mov	r3, r5
   28cc8:	aa25      	add	r2, sp, #148	@ 0x94
   28cca:	4631      	mov	r1, r6
   28ccc:	4658      	mov	r0, fp
   28cce:	f7fe f96f 	bl	26fb0 <_wcsrtombs_r>
   28cd2:	4285      	cmp	r5, r0
   28cd4:	f040 83a5 	bne.w	29422 <_svfprintf_r+0x1b02>
   28cd8:	9908      	ldr	r1, [sp, #32]
   28cda:	970b      	str	r7, [sp, #44]	@ 0x2c
   28cdc:	2300      	movs	r3, #0
   28cde:	5473      	strb	r3, [r6, r1]
   28ce0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   28ce4:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   28ce8:	9305      	str	r3, [sp, #20]
   28cea:	9102      	str	r1, [sp, #8]
   28cec:	9312      	str	r3, [sp, #72]	@ 0x48
   28cee:	930f      	str	r3, [sp, #60]	@ 0x3c
   28cf0:	930d      	str	r3, [sp, #52]	@ 0x34
   28cf2:	f7fe bff4 	b.w	27cde <_svfprintf_r+0x3be>
   28cf6:	222d      	movs	r2, #45	@ 0x2d
   28cf8:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   28cfc:	f7fe bfdc 	b.w	27cb8 <_svfprintf_r+0x398>
   28d00:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28d02:	aa2c      	add	r2, sp, #176	@ 0xb0
   28d04:	4658      	mov	r0, fp
   28d06:	f002 f85b 	bl	2adc0 <__ssprint_r>
   28d0a:	2800      	cmp	r0, #0
   28d0c:	f47f aaac 	bne.w	28268 <_svfprintf_r+0x948>
   28d10:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   28d12:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28d14:	ac2f      	add	r4, sp, #188	@ 0xbc
   28d16:	e6d9      	b.n	28acc <_svfprintf_r+0x11ac>
   28d18:	9b08      	ldr	r3, [sp, #32]
   28d1a:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   28d1e:	970b      	str	r7, [sp, #44]	@ 0x2c
   28d20:	9302      	str	r3, [sp, #8]
   28d22:	9305      	str	r3, [sp, #20]
   28d24:	9312      	str	r3, [sp, #72]	@ 0x48
   28d26:	930f      	str	r3, [sp, #60]	@ 0x3c
   28d28:	930d      	str	r3, [sp, #52]	@ 0x34
   28d2a:	930a      	str	r3, [sp, #40]	@ 0x28
   28d2c:	f7fe bfd7 	b.w	27cde <_svfprintf_r+0x3be>
   28d30:	0003f840 	.word	0x0003f840
   28d34:	cccccccd 	.word	0xcccccccd
   28d38:	ab2a      	add	r3, sp, #168	@ 0xa8
   28d3a:	9301      	str	r3, [sp, #4]
   28d3c:	ab25      	add	r3, sp, #148	@ 0x94
   28d3e:	9300      	str	r3, [sp, #0]
   28d40:	2102      	movs	r1, #2
   28d42:	ab23      	add	r3, sp, #140	@ 0x8c
   28d44:	ed9d 0b1e 	vldr	d0, [sp, #120]	@ 0x78
   28d48:	9a05      	ldr	r2, [sp, #20]
   28d4a:	4658      	mov	r0, fp
   28d4c:	f001 f8ec 	bl	29f28 <_dtoa_r>
   28d50:	9b04      	ldr	r3, [sp, #16]
   28d52:	07d9      	lsls	r1, r3, #31
   28d54:	4606      	mov	r6, r0
   28d56:	f100 81fc 	bmi.w	29152 <_svfprintf_r+0x1832>
   28d5a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   28d5c:	1a1b      	subs	r3, r3, r0
   28d5e:	930e      	str	r3, [sp, #56]	@ 0x38
   28d60:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   28d62:	930d      	str	r3, [sp, #52]	@ 0x34
   28d64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   28d66:	1cda      	adds	r2, r3, #3
   28d68:	db03      	blt.n	28d72 <_svfprintf_r+0x1452>
   28d6a:	9a05      	ldr	r2, [sp, #20]
   28d6c:	429a      	cmp	r2, r3
   28d6e:	f280 818b 	bge.w	29088 <_svfprintf_r+0x1768>
   28d72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   28d74:	3b02      	subs	r3, #2
   28d76:	930c      	str	r3, [sp, #48]	@ 0x30
   28d78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   28d7a:	3b01      	subs	r3, #1
   28d7c:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
   28d80:	9323      	str	r3, [sp, #140]	@ 0x8c
   28d82:	2100      	movs	r1, #0
   28d84:	2b00      	cmp	r3, #0
   28d86:	bfb8      	it	lt
   28d88:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
   28d8a:	f88d 2098 	strb.w	r2, [sp, #152]	@ 0x98
   28d8e:	bfba      	itte	lt
   28d90:	f1c3 0301 	rsblt	r3, r3, #1
   28d94:	222d      	movlt	r2, #45	@ 0x2d
   28d96:	222b      	movge	r2, #43	@ 0x2b
   28d98:	2b09      	cmp	r3, #9
   28d9a:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
   28d9e:	f340 8265 	ble.w	2926c <_svfprintf_r+0x194c>
   28da2:	f10d 05af 	add.w	r5, sp, #175	@ 0xaf
   28da6:	4fb3      	ldr	r7, [pc, #716]	@ (29074 <_svfprintf_r+0x1754>)
   28da8:	462a      	mov	r2, r5
   28daa:	4610      	mov	r0, r2
   28dac:	fba7 1203 	umull	r1, r2, r7, r3
   28db0:	08d2      	lsrs	r2, r2, #3
   28db2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   28db6:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   28dba:	3130      	adds	r1, #48	@ 0x30
   28dbc:	f800 1c01 	strb.w	r1, [r0, #-1]
   28dc0:	4619      	mov	r1, r3
   28dc2:	2963      	cmp	r1, #99	@ 0x63
   28dc4:	4613      	mov	r3, r2
   28dc6:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
   28dca:	dcee      	bgt.n	28daa <_svfprintf_r+0x148a>
   28dcc:	3330      	adds	r3, #48	@ 0x30
   28dce:	f802 3c01 	strb.w	r3, [r2, #-1]
   28dd2:	1e83      	subs	r3, r0, #2
   28dd4:	42ab      	cmp	r3, r5
   28dd6:	f080 8321 	bcs.w	2941c <_svfprintf_r+0x1afc>
   28dda:	f10d 0299 	add.w	r2, sp, #153	@ 0x99
   28dde:	f813 1b01 	ldrb.w	r1, [r3], #1
   28de2:	f802 1f01 	strb.w	r1, [r2, #1]!
   28de6:	42ab      	cmp	r3, r5
   28de8:	d1f9      	bne.n	28dde <_svfprintf_r+0x14be>
   28dea:	ab58      	add	r3, sp, #352	@ 0x160
   28dec:	1a18      	subs	r0, r3, r0
   28dee:	f1a0 03ad 	sub.w	r3, r0, #173	@ 0xad
   28df2:	9318      	str	r3, [sp, #96]	@ 0x60
   28df4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   28df6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   28df8:	2b01      	cmp	r3, #1
   28dfa:	441a      	add	r2, r3
   28dfc:	9208      	str	r2, [sp, #32]
   28dfe:	f340 8258 	ble.w	292b2 <_svfprintf_r+0x1992>
   28e02:	9b08      	ldr	r3, [sp, #32]
   28e04:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   28e06:	4413      	add	r3, r2
   28e08:	9308      	str	r3, [sp, #32]
   28e0a:	9b04      	ldr	r3, [sp, #16]
   28e0c:	9a08      	ldr	r2, [sp, #32]
   28e0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
   28e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   28e16:	9304      	str	r3, [sp, #16]
   28e18:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   28e1c:	2300      	movs	r3, #0
   28e1e:	9312      	str	r3, [sp, #72]	@ 0x48
   28e20:	9202      	str	r2, [sp, #8]
   28e22:	930f      	str	r3, [sp, #60]	@ 0x3c
   28e24:	930d      	str	r3, [sp, #52]	@ 0x34
   28e26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   28e28:	2b00      	cmp	r3, #0
   28e2a:	f040 811b 	bne.w	29064 <_svfprintf_r+0x1744>
   28e2e:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   28e32:	9305      	str	r3, [sp, #20]
   28e34:	f7fe bf53 	b.w	27cde <_svfprintf_r+0x3be>
   28e38:	b2db      	uxtb	r3, r3
   28e3a:	462a      	mov	r2, r5
   28e3c:	910b      	str	r1, [sp, #44]	@ 0x2c
   28e3e:	e493      	b.n	28768 <_svfprintf_r+0xe48>
   28e40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   28e42:	9a06      	ldr	r2, [sp, #24]
   28e44:	681b      	ldr	r3, [r3, #0]
   28e46:	801a      	strh	r2, [r3, #0]
   28e48:	f7ff b888 	b.w	27f5c <_svfprintf_r+0x63c>
   28e4c:	b2db      	uxtb	r3, r3
   28e4e:	462a      	mov	r2, r5
   28e50:	910b      	str	r1, [sp, #44]	@ 0x2c
   28e52:	f7ff b861 	b.w	27f18 <_svfprintf_r+0x5f8>
   28e56:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   28e58:	aa2c      	add	r2, sp, #176	@ 0xb0
   28e5a:	4621      	mov	r1, r4
   28e5c:	4658      	mov	r0, fp
   28e5e:	f001 ffaf 	bl	2adc0 <__ssprint_r>
   28e62:	89a3      	ldrh	r3, [r4, #12]
   28e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
   28e68:	f7fe be66 	b.w	27b38 <_svfprintf_r+0x218>
   28e6c:	4630      	mov	r0, r6
   28e6e:	f7ef fc27 	bl	186c0 <strlen>
   28e72:	4601      	mov	r1, r0
   28e74:	f7fe bfc0 	b.w	27df8 <_svfprintf_r+0x4d8>
   28e78:	1c59      	adds	r1, r3, #1
   28e7a:	4658      	mov	r0, fp
   28e7c:	f7fe fa86 	bl	2738c <_malloc_r>
   28e80:	4606      	mov	r6, r0
   28e82:	2800      	cmp	r0, #0
   28e84:	f000 82db 	beq.w	2943e <_svfprintf_r+0x1b1e>
   28e88:	900a      	str	r0, [sp, #40]	@ 0x28
   28e8a:	e714      	b.n	28cb6 <_svfprintf_r+0x1396>
   28e8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28e8e:	aa2c      	add	r2, sp, #176	@ 0xb0
   28e90:	4658      	mov	r0, fp
   28e92:	f001 ff95 	bl	2adc0 <__ssprint_r>
   28e96:	2800      	cmp	r0, #0
   28e98:	f47f a9e6 	bne.w	28268 <_svfprintf_r+0x948>
   28e9c:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   28e9e:	ac2f      	add	r4, sp, #188	@ 0xbc
   28ea0:	f7ff bad2 	b.w	28448 <_svfprintf_r+0xb28>
   28ea4:	9909      	ldr	r1, [sp, #36]	@ 0x24
   28ea6:	aa2c      	add	r2, sp, #176	@ 0xb0
   28ea8:	4658      	mov	r0, fp
   28eaa:	f001 ff89 	bl	2adc0 <__ssprint_r>
   28eae:	2800      	cmp	r0, #0
   28eb0:	f47f a9da 	bne.w	28268 <_svfprintf_r+0x948>
   28eb4:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   28eb8:	9923      	ldr	r1, [sp, #140]	@ 0x8c
   28eba:	aa2f      	add	r2, sp, #188	@ 0xbc
   28ebc:	e6aa      	b.n	28c14 <_svfprintf_r+0x12f4>
   28ebe:	2306      	movs	r3, #6
   28ec0:	900a      	str	r0, [sp, #40]	@ 0x28
   28ec2:	9305      	str	r3, [sp, #20]
   28ec4:	e400      	b.n	286c8 <_svfprintf_r+0xda8>
   28ec6:	9b05      	ldr	r3, [sp, #20]
   28ec8:	2102      	movs	r1, #2
   28eca:	f103 0801 	add.w	r8, r3, #1
   28ece:	ab2a      	add	r3, sp, #168	@ 0xa8
   28ed0:	9301      	str	r3, [sp, #4]
   28ed2:	ab25      	add	r3, sp, #148	@ 0x94
   28ed4:	9300      	str	r3, [sp, #0]
   28ed6:	ed9d 0b1e 	vldr	d0, [sp, #120]	@ 0x78
   28eda:	ab23      	add	r3, sp, #140	@ 0x8c
   28edc:	4642      	mov	r2, r8
   28ede:	4658      	mov	r0, fp
   28ee0:	f001 f822 	bl	29f28 <_dtoa_r>
   28ee4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   28ee6:	f023 0720 	bic.w	r7, r3, #32
   28eea:	2f46      	cmp	r7, #70	@ 0x46
   28eec:	4606      	mov	r6, r0
   28eee:	eb00 0508 	add.w	r5, r0, r8
   28ef2:	bf18      	it	ne
   28ef4:	2745      	movne	r7, #69	@ 0x45
   28ef6:	d105      	bne.n	28f04 <_svfprintf_r+0x15e4>
   28ef8:	7833      	ldrb	r3, [r6, #0]
   28efa:	2b30      	cmp	r3, #48	@ 0x30
   28efc:	f000 813c 	beq.w	29178 <_svfprintf_r+0x1858>
   28f00:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   28f02:	441d      	add	r5, r3
   28f04:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	@ 0x78
   28f08:	2200      	movs	r2, #0
   28f0a:	2300      	movs	r3, #0
   28f0c:	f7f0 f868 	bl	18fe0 <__aeabi_dcmpeq>
   28f10:	2800      	cmp	r0, #0
   28f12:	f040 8159 	bne.w	291c8 <_svfprintf_r+0x18a8>
   28f16:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   28f18:	42ab      	cmp	r3, r5
   28f1a:	d206      	bcs.n	28f2a <_svfprintf_r+0x160a>
   28f1c:	2130      	movs	r1, #48	@ 0x30
   28f1e:	1c5a      	adds	r2, r3, #1
   28f20:	922a      	str	r2, [sp, #168]	@ 0xa8
   28f22:	7019      	strb	r1, [r3, #0]
   28f24:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   28f26:	429d      	cmp	r5, r3
   28f28:	d8f9      	bhi.n	28f1e <_svfprintf_r+0x15fe>
   28f2a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   28f2c:	920d      	str	r2, [sp, #52]	@ 0x34
   28f2e:	1b9b      	subs	r3, r3, r6
   28f30:	2f47      	cmp	r7, #71	@ 0x47
   28f32:	930e      	str	r3, [sp, #56]	@ 0x38
   28f34:	f43f af16 	beq.w	28d64 <_svfprintf_r+0x1444>
   28f38:	2f46      	cmp	r7, #70	@ 0x46
   28f3a:	f000 812b 	beq.w	29194 <_svfprintf_r+0x1874>
   28f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   28f40:	3b01      	subs	r3, #1
   28f42:	e71b      	b.n	28d7c <_svfprintf_r+0x145c>
   28f44:	a823      	add	r0, sp, #140	@ 0x8c
   28f46:	ed9d 0b1e 	vldr	d0, [sp, #120]	@ 0x78
   28f4a:	f7fc f807 	bl	24f5c <frexp>
   28f4e:	2200      	movs	r2, #0
   28f50:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
   28f54:	ec51 0b10 	vmov	r0, r1, d0
   28f58:	f7ef fdda 	bl	18b10 <__aeabi_dmul>
   28f5c:	4602      	mov	r2, r0
   28f5e:	460b      	mov	r3, r1
   28f60:	e9cd 2302 	strd	r2, r3, [sp, #8]
   28f64:	2200      	movs	r2, #0
   28f66:	2300      	movs	r3, #0
   28f68:	f7f0 f83a 	bl	18fe0 <__aeabi_dcmpeq>
   28f6c:	b108      	cbz	r0, 28f72 <_svfprintf_r+0x1652>
   28f6e:	2301      	movs	r3, #1
   28f70:	9323      	str	r3, [sp, #140]	@ 0x8c
   28f72:	9b05      	ldr	r3, [sp, #20]
   28f74:	4a40      	ldr	r2, [pc, #256]	@ (29078 <_svfprintf_r+0x1758>)
   28f76:	980c      	ldr	r0, [sp, #48]	@ 0x30
   28f78:	f8cd a020 	str.w	sl, [sp, #32]
   28f7c:	1e59      	subs	r1, r3, #1
   28f7e:	4b3f      	ldr	r3, [pc, #252]	@ (2907c <_svfprintf_r+0x175c>)
   28f80:	960d      	str	r6, [sp, #52]	@ 0x34
   28f82:	2861      	cmp	r0, #97	@ 0x61
   28f84:	bf08      	it	eq
   28f86:	461a      	moveq	r2, r3
   28f88:	4637      	mov	r7, r6
   28f8a:	46a0      	mov	r8, r4
   28f8c:	9205      	str	r2, [sp, #20]
   28f8e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
   28f92:	468a      	mov	sl, r1
   28f94:	4616      	mov	r6, r2
   28f96:	e009      	b.n	28fac <_svfprintf_r+0x168c>
   28f98:	2200      	movs	r2, #0
   28f9a:	2300      	movs	r3, #0
   28f9c:	f10a 39ff 	add.w	r9, sl, #4294967295	@ 0xffffffff
   28fa0:	f7f0 f81e 	bl	18fe0 <__aeabi_dcmpeq>
   28fa4:	2800      	cmp	r0, #0
   28fa6:	f040 81bb 	bne.w	29320 <_svfprintf_r+0x1a00>
   28faa:	46ca      	mov	sl, r9
   28fac:	4b34      	ldr	r3, [pc, #208]	@ (29080 <_svfprintf_r+0x1760>)
   28fae:	2200      	movs	r2, #0
   28fb0:	4620      	mov	r0, r4
   28fb2:	4629      	mov	r1, r5
   28fb4:	f7ef fdac 	bl	18b10 <__aeabi_dmul>
   28fb8:	460d      	mov	r5, r1
   28fba:	4604      	mov	r4, r0
   28fbc:	f7f0 f858 	bl	19070 <__aeabi_d2iz>
   28fc0:	4681      	mov	r9, r0
   28fc2:	f7ef fd3b 	bl	18a3c <__aeabi_i2d>
   28fc6:	4602      	mov	r2, r0
   28fc8:	460b      	mov	r3, r1
   28fca:	4620      	mov	r0, r4
   28fcc:	4629      	mov	r1, r5
   28fce:	f7ef fbe7 	bl	187a0 <__aeabi_dsub>
   28fd2:	f816 3009 	ldrb.w	r3, [r6, r9]
   28fd6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
   28fda:	463a      	mov	r2, r7
   28fdc:	4604      	mov	r4, r0
   28fde:	f807 3b01 	strb.w	r3, [r7], #1
   28fe2:	460d      	mov	r5, r1
   28fe4:	d1d8      	bne.n	28f98 <_svfprintf_r+0x1678>
   28fe6:	e9cd 4502 	strd	r4, r5, [sp, #8]
   28fea:	4b26      	ldr	r3, [pc, #152]	@ (29084 <_svfprintf_r+0x1764>)
   28fec:	f8dd a020 	ldr.w	sl, [sp, #32]
   28ff0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   28ff2:	4644      	mov	r4, r8
   28ff4:	4690      	mov	r8, r2
   28ff6:	2200      	movs	r2, #0
   28ff8:	464d      	mov	r5, r9
   28ffa:	f7f0 f819 	bl	19030 <__aeabi_dcmpgt>
   28ffe:	2800      	cmp	r0, #0
   29000:	f000 81ff 	beq.w	29402 <_svfprintf_r+0x1ae2>
   29004:	9b05      	ldr	r3, [sp, #20]
   29006:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
   2900a:	7bd9      	ldrb	r1, [r3, #15]
   2900c:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   29010:	4291      	cmp	r1, r2
   29012:	463b      	mov	r3, r7
   29014:	d109      	bne.n	2902a <_svfprintf_r+0x170a>
   29016:	2030      	movs	r0, #48	@ 0x30
   29018:	f803 0c01 	strb.w	r0, [r3, #-1]
   2901c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
   2901e:	1e5a      	subs	r2, r3, #1
   29020:	922a      	str	r2, [sp, #168]	@ 0xa8
   29022:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   29026:	4291      	cmp	r1, r2
   29028:	d0f6      	beq.n	29018 <_svfprintf_r+0x16f8>
   2902a:	2a39      	cmp	r2, #57	@ 0x39
   2902c:	bf0b      	itete	eq
   2902e:	9a05      	ldreq	r2, [sp, #20]
   29030:	3201      	addne	r2, #1
   29032:	7a92      	ldrbeq	r2, [r2, #10]
   29034:	b2d2      	uxtbne	r2, r2
   29036:	f803 2c01 	strb.w	r2, [r3, #-1]
   2903a:	463b      	mov	r3, r7
   2903c:	1b9b      	subs	r3, r3, r6
   2903e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   29040:	930e      	str	r3, [sp, #56]	@ 0x38
   29042:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   29044:	930d      	str	r3, [sp, #52]	@ 0x34
   29046:	2a61      	cmp	r2, #97	@ 0x61
   29048:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
   2904c:	9323      	str	r3, [sp, #140]	@ 0x8c
   2904e:	f000 81b3 	beq.w	293b8 <_svfprintf_r+0x1a98>
   29052:	2141      	movs	r1, #65	@ 0x41
   29054:	2250      	movs	r2, #80	@ 0x50
   29056:	910c      	str	r1, [sp, #48]	@ 0x30
   29058:	2101      	movs	r1, #1
   2905a:	e693      	b.n	28d84 <_svfprintf_r+0x1464>
   2905c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   29060:	2103      	movs	r1, #3
   29062:	e734      	b.n	28ece <_svfprintf_r+0x15ae>
   29064:	222d      	movs	r2, #45	@ 0x2d
   29066:	2300      	movs	r3, #0
   29068:	f88d 2087 	strb.w	r2, [sp, #135]	@ 0x87
   2906c:	9305      	str	r3, [sp, #20]
   2906e:	f7fe be39 	b.w	27ce4 <_svfprintf_r+0x3c4>
   29072:	bf00      	nop
   29074:	cccccccd 	.word	0xcccccccd
   29078:	0003fa90 	.word	0x0003fa90
   2907c:	0003faa4 	.word	0x0003faa4
   29080:	40300000 	.word	0x40300000
   29084:	3fe00000 	.word	0x3fe00000
   29088:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	@ 0x34
   2908c:	4293      	cmp	r3, r2
   2908e:	f300 80c4 	bgt.w	2921a <_svfprintf_r+0x18fa>
   29092:	9b04      	ldr	r3, [sp, #16]
   29094:	f013 0f01 	tst.w	r3, #1
   29098:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2909a:	f000 810f 	beq.w	292bc <_svfprintf_r+0x199c>
   2909e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   290a0:	4413      	add	r3, r2
   290a2:	9308      	str	r3, [sp, #32]
   290a4:	9b04      	ldr	r3, [sp, #16]
   290a6:	055f      	lsls	r7, r3, #21
   290a8:	d503      	bpl.n	290b2 <_svfprintf_r+0x1792>
   290aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   290ac:	2b00      	cmp	r3, #0
   290ae:	f300 8147 	bgt.w	29340 <_svfprintf_r+0x1a20>
   290b2:	9b08      	ldr	r3, [sp, #32]
   290b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   290b8:	9302      	str	r3, [sp, #8]
   290ba:	2367      	movs	r3, #103	@ 0x67
   290bc:	930c      	str	r3, [sp, #48]	@ 0x30
   290be:	2300      	movs	r3, #0
   290c0:	f8cd 9010 	str.w	r9, [sp, #16]
   290c4:	9312      	str	r3, [sp, #72]	@ 0x48
   290c6:	930f      	str	r3, [sp, #60]	@ 0x3c
   290c8:	e6ad      	b.n	28e26 <_svfprintf_r+0x1506>
   290ca:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
   290ce:	931f      	str	r3, [sp, #124]	@ 0x7c
   290d0:	232d      	movs	r3, #45	@ 0x2d
   290d2:	901e      	str	r0, [sp, #120]	@ 0x78
   290d4:	9313      	str	r3, [sp, #76]	@ 0x4c
   290d6:	f7ff bb05 	b.w	286e4 <_svfprintf_r+0xdc4>
   290da:	aa2c      	add	r2, sp, #176	@ 0xb0
   290dc:	4629      	mov	r1, r5
   290de:	4658      	mov	r0, fp
   290e0:	f001 fe6e 	bl	2adc0 <__ssprint_r>
   290e4:	2800      	cmp	r0, #0
   290e6:	f47f a8bf 	bne.w	28268 <_svfprintf_r+0x948>
   290ea:	f89a 0000 	ldrb.w	r0, [sl]
   290ee:	992e      	ldr	r1, [sp, #184]	@ 0xb8
   290f0:	aa2f      	add	r2, sp, #188	@ 0xbc
   290f2:	4404      	add	r4, r0
   290f4:	e408      	b.n	28908 <_svfprintf_r+0xfe8>
   290f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
   290f8:	aa2c      	add	r2, sp, #176	@ 0xb0
   290fa:	4658      	mov	r0, fp
   290fc:	f001 fe60 	bl	2adc0 <__ssprint_r>
   29100:	2800      	cmp	r0, #0
   29102:	f47f a8b1 	bne.w	28268 <_svfprintf_r+0x948>
   29106:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   29108:	ac2f      	add	r4, sp, #188	@ 0xbc
   2910a:	f7ff b994 	b.w	28436 <_svfprintf_r+0xb16>
   2910e:	2378      	movs	r3, #120	@ 0x78
   29110:	f88d 3089 	strb.w	r3, [sp, #137]	@ 0x89
   29114:	9b04      	ldr	r3, [sp, #16]
   29116:	f043 0302 	orr.w	r3, r3, #2
   2911a:	9304      	str	r3, [sp, #16]
   2911c:	2330      	movs	r3, #48	@ 0x30
   2911e:	f88d 3088 	strb.w	r3, [sp, #136]	@ 0x88
   29122:	9b05      	ldr	r3, [sp, #20]
   29124:	2b63      	cmp	r3, #99	@ 0x63
   29126:	f300 808e 	bgt.w	29246 <_svfprintf_r+0x1926>
   2912a:	2300      	movs	r3, #0
   2912c:	930a      	str	r3, [sp, #40]	@ 0x28
   2912e:	ae3f      	add	r6, sp, #252	@ 0xfc
   29130:	f7ff baca 	b.w	286c8 <_svfprintf_r+0xda8>
   29134:	9909      	ldr	r1, [sp, #36]	@ 0x24
   29136:	aa2c      	add	r2, sp, #176	@ 0xb0
   29138:	4658      	mov	r0, fp
   2913a:	f001 fe41 	bl	2adc0 <__ssprint_r>
   2913e:	2800      	cmp	r0, #0
   29140:	f47f a892 	bne.w	28268 <_svfprintf_r+0x948>
   29144:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   29146:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   29148:	ac2f      	add	r4, sp, #188	@ 0xbc
   2914a:	f7ff b98d 	b.w	28468 <_svfprintf_r+0xb48>
   2914e:	2358      	movs	r3, #88	@ 0x58
   29150:	e7de      	b.n	29110 <_svfprintf_r+0x17f0>
   29152:	9b05      	ldr	r3, [sp, #20]
   29154:	2747      	movs	r7, #71	@ 0x47
   29156:	18c5      	adds	r5, r0, r3
   29158:	e6d4      	b.n	28f04 <_svfprintf_r+0x15e4>
   2915a:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2915c:	aa2c      	add	r2, sp, #176	@ 0xb0
   2915e:	4658      	mov	r0, fp
   29160:	f001 fe2e 	bl	2adc0 <__ssprint_r>
   29164:	2800      	cmp	r0, #0
   29166:	f47f a87f 	bne.w	28268 <_svfprintf_r+0x948>
   2916a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
   2916c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2916e:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
   29170:	1b9e      	subs	r6, r3, r6
   29172:	ac2f      	add	r4, sp, #188	@ 0xbc
   29174:	f7ff b98d 	b.w	28492 <_svfprintf_r+0xb72>
   29178:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	@ 0x78
   2917c:	2200      	movs	r2, #0
   2917e:	2300      	movs	r3, #0
   29180:	f7ef ff2e 	bl	18fe0 <__aeabi_dcmpeq>
   29184:	2800      	cmp	r0, #0
   29186:	f000 8119 	beq.w	293bc <_svfprintf_r+0x1a9c>
   2918a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
   2918c:	930d      	str	r3, [sp, #52]	@ 0x34
   2918e:	441d      	add	r5, r3
   29190:	1bab      	subs	r3, r5, r6
   29192:	930e      	str	r3, [sp, #56]	@ 0x38
   29194:	9b04      	ldr	r3, [sp, #16]
   29196:	990d      	ldr	r1, [sp, #52]	@ 0x34
   29198:	9a05      	ldr	r2, [sp, #20]
   2919a:	f003 0301 	and.w	r3, r3, #1
   2919e:	2900      	cmp	r1, #0
   291a0:	ea43 0302 	orr.w	r3, r3, r2
   291a4:	f340 811a 	ble.w	293dc <_svfprintf_r+0x1abc>
   291a8:	2b00      	cmp	r3, #0
   291aa:	f040 80f2 	bne.w	29392 <_svfprintf_r+0x1a72>
   291ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   291b0:	9308      	str	r3, [sp, #32]
   291b2:	2366      	movs	r3, #102	@ 0x66
   291b4:	930c      	str	r3, [sp, #48]	@ 0x30
   291b6:	9b04      	ldr	r3, [sp, #16]
   291b8:	055b      	lsls	r3, r3, #21
   291ba:	f100 80c3 	bmi.w	29344 <_svfprintf_r+0x1a24>
   291be:	9b08      	ldr	r3, [sp, #32]
   291c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   291c4:	9302      	str	r3, [sp, #8]
   291c6:	e77a      	b.n	290be <_svfprintf_r+0x179e>
   291c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
   291ca:	920d      	str	r2, [sp, #52]	@ 0x34
   291cc:	462b      	mov	r3, r5
   291ce:	e6ae      	b.n	28f2e <_svfprintf_r+0x160e>
   291d0:	2200      	movs	r2, #0
   291d2:	4682      	mov	sl, r0
   291d4:	9205      	str	r2, [sp, #20]
   291d6:	f7fe bbfd 	b.w	279d4 <_svfprintf_r+0xb4>
   291da:	424f      	negs	r7, r1
   291dc:	3110      	adds	r1, #16
   291de:	f8df 9278 	ldr.w	r9, [pc, #632]	@ 29458 <_svfprintf_r+0x1b38>
   291e2:	bfb8      	it	lt
   291e4:	2410      	movlt	r4, #16
   291e6:	db04      	blt.n	291f2 <_svfprintf_r+0x18d2>
   291e8:	e021      	b.n	2922e <_svfprintf_r+0x190e>
   291ea:	3208      	adds	r2, #8
   291ec:	3f10      	subs	r7, #16
   291ee:	2f10      	cmp	r7, #16
   291f0:	dd1d      	ble.n	2922e <_svfprintf_r+0x190e>
   291f2:	3301      	adds	r3, #1
   291f4:	3510      	adds	r5, #16
   291f6:	2b07      	cmp	r3, #7
   291f8:	e9c2 9400 	strd	r9, r4, [r2]
   291fc:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   29200:	ddf3      	ble.n	291ea <_svfprintf_r+0x18ca>
   29202:	9909      	ldr	r1, [sp, #36]	@ 0x24
   29204:	aa2c      	add	r2, sp, #176	@ 0xb0
   29206:	4658      	mov	r0, fp
   29208:	f001 fdda 	bl	2adc0 <__ssprint_r>
   2920c:	2800      	cmp	r0, #0
   2920e:	f47f a82b 	bne.w	28268 <_svfprintf_r+0x948>
   29212:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   29216:	aa2f      	add	r2, sp, #188	@ 0xbc
   29218:	e7e8      	b.n	291ec <_svfprintf_r+0x18cc>
   2921a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2921c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
   2921e:	189a      	adds	r2, r3, r2
   29220:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   29222:	9208      	str	r2, [sp, #32]
   29224:	2b00      	cmp	r3, #0
   29226:	dd71      	ble.n	2930c <_svfprintf_r+0x19ec>
   29228:	2367      	movs	r3, #103	@ 0x67
   2922a:	930c      	str	r3, [sp, #48]	@ 0x30
   2922c:	e7c3      	b.n	291b6 <_svfprintf_r+0x1896>
   2922e:	3301      	adds	r3, #1
   29230:	443d      	add	r5, r7
   29232:	2b07      	cmp	r3, #7
   29234:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
   29238:	f8c2 9000 	str.w	r9, [r2]
   2923c:	6057      	str	r7, [r2, #4]
   2923e:	f300 80af 	bgt.w	293a0 <_svfprintf_r+0x1a80>
   29242:	3208      	adds	r2, #8
   29244:	e4e9      	b.n	28c1a <_svfprintf_r+0x12fa>
   29246:	1c59      	adds	r1, r3, #1
   29248:	4658      	mov	r0, fp
   2924a:	f7fe f89f 	bl	2738c <_malloc_r>
   2924e:	4606      	mov	r6, r0
   29250:	b110      	cbz	r0, 29258 <_svfprintf_r+0x1938>
   29252:	900a      	str	r0, [sp, #40]	@ 0x28
   29254:	f7ff ba38 	b.w	286c8 <_svfprintf_r+0xda8>
   29258:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   2925a:	8993      	ldrh	r3, [r2, #12]
   2925c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   29260:	8193      	strh	r3, [r2, #12]
   29262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   29266:	9306      	str	r3, [sp, #24]
   29268:	f7fe bc69 	b.w	27b3e <_svfprintf_r+0x21e>
   2926c:	2900      	cmp	r1, #0
   2926e:	d134      	bne.n	292da <_svfprintf_r+0x19ba>
   29270:	2230      	movs	r2, #48	@ 0x30
   29272:	f88d 209a 	strb.w	r2, [sp, #154]	@ 0x9a
   29276:	f10d 029b 	add.w	r2, sp, #155	@ 0x9b
   2927a:	3330      	adds	r3, #48	@ 0x30
   2927c:	f802 3b01 	strb.w	r3, [r2], #1
   29280:	ab26      	add	r3, sp, #152	@ 0x98
   29282:	1ad3      	subs	r3, r2, r3
   29284:	9318      	str	r3, [sp, #96]	@ 0x60
   29286:	e5b5      	b.n	28df4 <_svfprintf_r+0x14d4>
   29288:	9b05      	ldr	r3, [sp, #20]
   2928a:	2b00      	cmp	r3, #0
   2928c:	f47f aa1b 	bne.w	286c6 <_svfprintf_r+0xda6>
   29290:	9b05      	ldr	r3, [sp, #20]
   29292:	930a      	str	r3, [sp, #40]	@ 0x28
   29294:	2301      	movs	r3, #1
   29296:	9305      	str	r3, [sp, #20]
   29298:	f7ff ba16 	b.w	286c8 <_svfprintf_r+0xda8>
   2929c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2929e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   292a2:	2200      	movs	r2, #0
   292a4:	920a      	str	r2, [sp, #40]	@ 0x28
   292a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   292aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   292ac:	8193      	strh	r3, [r2, #12]
   292ae:	f7fe bfdb 	b.w	28268 <_svfprintf_r+0x948>
   292b2:	9b04      	ldr	r3, [sp, #16]
   292b4:	07db      	lsls	r3, r3, #31
   292b6:	f57f ada8 	bpl.w	28e0a <_svfprintf_r+0x14ea>
   292ba:	e5a2      	b.n	28e02 <_svfprintf_r+0x14e2>
   292bc:	9308      	str	r3, [sp, #32]
   292be:	e6f1      	b.n	290a4 <_svfprintf_r+0x1784>
   292c0:	9b05      	ldr	r3, [sp, #20]
   292c2:	9302      	str	r3, [sp, #8]
   292c4:	9308      	str	r3, [sp, #32]
   292c6:	2373      	movs	r3, #115	@ 0x73
   292c8:	f89d 2087 	ldrb.w	r2, [sp, #135]	@ 0x87
   292cc:	970b      	str	r7, [sp, #44]	@ 0x2c
   292ce:	9005      	str	r0, [sp, #20]
   292d0:	9012      	str	r0, [sp, #72]	@ 0x48
   292d2:	900f      	str	r0, [sp, #60]	@ 0x3c
   292d4:	930c      	str	r3, [sp, #48]	@ 0x30
   292d6:	f7fe bd02 	b.w	27cde <_svfprintf_r+0x3be>
   292da:	f10d 029a 	add.w	r2, sp, #154	@ 0x9a
   292de:	e7cc      	b.n	2927a <_svfprintf_r+0x195a>
   292e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   292e2:	4e5a      	ldr	r6, [pc, #360]	@ (2944c <_svfprintf_r+0x1b2c>)
   292e4:	2b00      	cmp	r3, #0
   292e6:	9b04      	ldr	r3, [sp, #16]
   292e8:	bfa8      	it	ge
   292ea:	f89d 2087 	ldrbge.w	r2, [sp, #135]	@ 0x87
   292ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   292f2:	bfb8      	it	lt
   292f4:	222d      	movlt	r2, #45	@ 0x2d
   292f6:	9304      	str	r3, [sp, #16]
   292f8:	bfb8      	it	lt
   292fa:	f88d 2087 	strblt.w	r2, [sp, #135]	@ 0x87
   292fe:	4b54      	ldr	r3, [pc, #336]	@ (29450 <_svfprintf_r+0x1b30>)
   29300:	f7fe bce0 	b.w	27cc4 <_svfprintf_r+0x3a4>
   29304:	9b05      	ldr	r3, [sp, #20]
   29306:	9f02      	ldr	r7, [sp, #8]
   29308:	9308      	str	r3, [sp, #32]
   2930a:	e4cb      	b.n	28ca4 <_svfprintf_r+0x1384>
   2930c:	f1c3 0301 	rsb	r3, r3, #1
   29310:	441a      	add	r2, r3
   29312:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   29316:	9302      	str	r3, [sp, #8]
   29318:	2367      	movs	r3, #103	@ 0x67
   2931a:	9208      	str	r2, [sp, #32]
   2931c:	930c      	str	r3, [sp, #48]	@ 0x30
   2931e:	e6ce      	b.n	290be <_svfprintf_r+0x179e>
   29320:	4651      	mov	r1, sl
   29322:	2900      	cmp	r1, #0
   29324:	f8dd a020 	ldr.w	sl, [sp, #32]
   29328:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
   2932a:	4644      	mov	r4, r8
   2932c:	f6ff ae85 	blt.w	2903a <_svfprintf_r+0x171a>
   29330:	1c4b      	adds	r3, r1, #1
   29332:	443b      	add	r3, r7
   29334:	2230      	movs	r2, #48	@ 0x30
   29336:	f807 2b01 	strb.w	r2, [r7], #1
   2933a:	429f      	cmp	r7, r3
   2933c:	d1fb      	bne.n	29336 <_svfprintf_r+0x1a16>
   2933e:	e67d      	b.n	2903c <_svfprintf_r+0x171c>
   29340:	2367      	movs	r3, #103	@ 0x67
   29342:	930c      	str	r3, [sp, #48]	@ 0x30
   29344:	9917      	ldr	r1, [sp, #92]	@ 0x5c
   29346:	780b      	ldrb	r3, [r1, #0]
   29348:	2bff      	cmp	r3, #255	@ 0xff
   2934a:	d074      	beq.n	29436 <_svfprintf_r+0x1b16>
   2934c:	2500      	movs	r5, #0
   2934e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   29350:	4628      	mov	r0, r5
   29352:	e003      	b.n	2935c <_svfprintf_r+0x1a3c>
   29354:	3001      	adds	r0, #1
   29356:	3101      	adds	r1, #1
   29358:	2bff      	cmp	r3, #255	@ 0xff
   2935a:	d008      	beq.n	2936e <_svfprintf_r+0x1a4e>
   2935c:	4293      	cmp	r3, r2
   2935e:	da06      	bge.n	2936e <_svfprintf_r+0x1a4e>
   29360:	1ad2      	subs	r2, r2, r3
   29362:	784b      	ldrb	r3, [r1, #1]
   29364:	2b00      	cmp	r3, #0
   29366:	d1f5      	bne.n	29354 <_svfprintf_r+0x1a34>
   29368:	780b      	ldrb	r3, [r1, #0]
   2936a:	3501      	adds	r5, #1
   2936c:	e7f4      	b.n	29358 <_svfprintf_r+0x1a38>
   2936e:	9117      	str	r1, [sp, #92]	@ 0x5c
   29370:	920d      	str	r2, [sp, #52]	@ 0x34
   29372:	900f      	str	r0, [sp, #60]	@ 0x3c
   29374:	9512      	str	r5, [sp, #72]	@ 0x48
   29376:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   29378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
   2937a:	991c      	ldr	r1, [sp, #112]	@ 0x70
   2937c:	f8cd 9010 	str.w	r9, [sp, #16]
   29380:	4413      	add	r3, r2
   29382:	9a08      	ldr	r2, [sp, #32]
   29384:	fb01 2303 	mla	r3, r1, r3, r2
   29388:	9308      	str	r3, [sp, #32]
   2938a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2938e:	9302      	str	r3, [sp, #8]
   29390:	e549      	b.n	28e26 <_svfprintf_r+0x1506>
   29392:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   29394:	441a      	add	r2, r3
   29396:	1853      	adds	r3, r2, r1
   29398:	9308      	str	r3, [sp, #32]
   2939a:	2366      	movs	r3, #102	@ 0x66
   2939c:	930c      	str	r3, [sp, #48]	@ 0x30
   2939e:	e70a      	b.n	291b6 <_svfprintf_r+0x1896>
   293a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
   293a2:	aa2c      	add	r2, sp, #176	@ 0xb0
   293a4:	4658      	mov	r0, fp
   293a6:	f001 fd0b 	bl	2adc0 <__ssprint_r>
   293aa:	2800      	cmp	r0, #0
   293ac:	f47e af5c 	bne.w	28268 <_svfprintf_r+0x948>
   293b0:	e9dd 352d 	ldrd	r3, r5, [sp, #180]	@ 0xb4
   293b4:	aa2f      	add	r2, sp, #188	@ 0xbc
   293b6:	e430      	b.n	28c1a <_svfprintf_r+0x12fa>
   293b8:	2270      	movs	r2, #112	@ 0x70
   293ba:	e64d      	b.n	29058 <_svfprintf_r+0x1738>
   293bc:	f1c8 0301 	rsb	r3, r8, #1
   293c0:	9323      	str	r3, [sp, #140]	@ 0x8c
   293c2:	e59e      	b.n	28f02 <_svfprintf_r+0x15e2>
   293c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
   293c6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   293ca:	f852 1b04 	ldr.w	r1, [r2], #4
   293ce:	920b      	str	r2, [sp, #44]	@ 0x2c
   293d0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   293d4:	4682      	mov	sl, r0
   293d6:	9105      	str	r1, [sp, #20]
   293d8:	f7fe bafa 	b.w	279d0 <_svfprintf_r+0xb0>
   293dc:	b92b      	cbnz	r3, 293ea <_svfprintf_r+0x1aca>
   293de:	2301      	movs	r3, #1
   293e0:	2266      	movs	r2, #102	@ 0x66
   293e2:	9302      	str	r3, [sp, #8]
   293e4:	920c      	str	r2, [sp, #48]	@ 0x30
   293e6:	9308      	str	r3, [sp, #32]
   293e8:	e669      	b.n	290be <_svfprintf_r+0x179e>
   293ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   293ec:	f103 0801 	add.w	r8, r3, #1
   293f0:	9b05      	ldr	r3, [sp, #20]
   293f2:	4443      	add	r3, r8
   293f4:	9308      	str	r3, [sp, #32]
   293f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   293fa:	9302      	str	r3, [sp, #8]
   293fc:	2366      	movs	r3, #102	@ 0x66
   293fe:	930c      	str	r3, [sp, #48]	@ 0x30
   29400:	e65d      	b.n	290be <_svfprintf_r+0x179e>
   29402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   29406:	4b13      	ldr	r3, [pc, #76]	@ (29454 <_svfprintf_r+0x1b34>)
   29408:	2200      	movs	r2, #0
   2940a:	f7ef fde9 	bl	18fe0 <__aeabi_dcmpeq>
   2940e:	2800      	cmp	r0, #0
   29410:	f43f ae13 	beq.w	2903a <_svfprintf_r+0x171a>
   29414:	07e8      	lsls	r0, r5, #31
   29416:	f57f ae10 	bpl.w	2903a <_svfprintf_r+0x171a>
   2941a:	e5f3      	b.n	29004 <_svfprintf_r+0x16e4>
   2941c:	2302      	movs	r3, #2
   2941e:	9318      	str	r3, [sp, #96]	@ 0x60
   29420:	e4e8      	b.n	28df4 <_svfprintf_r+0x14d4>
   29422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   29424:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   29428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2942c:	e73d      	b.n	292aa <_svfprintf_r+0x198a>
   2942e:	230c      	movs	r3, #12
   29430:	f8cb 3000 	str.w	r3, [fp]
   29434:	e715      	b.n	29262 <_svfprintf_r+0x1942>
   29436:	2300      	movs	r3, #0
   29438:	9312      	str	r3, [sp, #72]	@ 0x48
   2943a:	930f      	str	r3, [sp, #60]	@ 0x3c
   2943c:	e79b      	b.n	29376 <_svfprintf_r+0x1a56>
   2943e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   29440:	900a      	str	r0, [sp, #40]	@ 0x28
   29442:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   29446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2944a:	e72e      	b.n	292aa <_svfprintf_r+0x198a>
   2944c:	0003fb10 	.word	0x0003fb10
   29450:	0003fb0c 	.word	0x0003fb0c
   29454:	3fe00000 	.word	0x3fe00000
   29458:	00047464 	.word	0x00047464

0002945c <__smakebuf_r>:
   2945c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29460:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   29464:	460c      	mov	r4, r1
   29466:	0799      	lsls	r1, r3, #30
   29468:	b096      	sub	sp, #88	@ 0x58
   2946a:	d508      	bpl.n	2947e <__smakebuf_r+0x22>
   2946c:	f104 0343 	add.w	r3, r4, #67	@ 0x43
   29470:	2201      	movs	r2, #1
   29472:	e9c4 3204 	strd	r3, r2, [r4, #16]
   29476:	6023      	str	r3, [r4, #0]
   29478:	b016      	add	sp, #88	@ 0x58
   2947a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2947e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29482:	2900      	cmp	r1, #0
   29484:	4606      	mov	r6, r0
   29486:	db26      	blt.n	294d6 <__smakebuf_r+0x7a>
   29488:	466a      	mov	r2, sp
   2948a:	f000 fb89 	bl	29ba0 <_fstat_r>
   2948e:	2800      	cmp	r0, #0
   29490:	db1f      	blt.n	294d2 <__smakebuf_r+0x76>
   29492:	9d01      	ldr	r5, [sp, #4]
   29494:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
   29498:	f5a5 5500 	sub.w	r5, r5, #8192	@ 0x2000
   2949c:	fab5 f585 	clz	r5, r5
   294a0:	f44f 6880 	mov.w	r8, #1024	@ 0x400
   294a4:	096d      	lsrs	r5, r5, #5
   294a6:	f44f 6700 	mov.w	r7, #2048	@ 0x800
   294aa:	4641      	mov	r1, r8
   294ac:	4630      	mov	r0, r6
   294ae:	f7fd ff6d 	bl	2738c <_malloc_r>
   294b2:	b1e8      	cbz	r0, 294f0 <__smakebuf_r+0x94>
   294b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   294b8:	f8c4 8014 	str.w	r8, [r4, #20]
   294bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   294c0:	6020      	str	r0, [r4, #0]
   294c2:	6120      	str	r0, [r4, #16]
   294c4:	81a3      	strh	r3, [r4, #12]
   294c6:	bb3d      	cbnz	r5, 29518 <__smakebuf_r+0xbc>
   294c8:	433b      	orrs	r3, r7
   294ca:	81a3      	strh	r3, [r4, #12]
   294cc:	b016      	add	sp, #88	@ 0x58
   294ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   294d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   294d6:	f013 0580 	ands.w	r5, r3, #128	@ 0x80
   294da:	d019      	beq.n	29510 <__smakebuf_r+0xb4>
   294dc:	f04f 0840 	mov.w	r8, #64	@ 0x40
   294e0:	2500      	movs	r5, #0
   294e2:	4641      	mov	r1, r8
   294e4:	4630      	mov	r0, r6
   294e6:	462f      	mov	r7, r5
   294e8:	f7fd ff50 	bl	2738c <_malloc_r>
   294ec:	2800      	cmp	r0, #0
   294ee:	d1e1      	bne.n	294b4 <__smakebuf_r+0x58>
   294f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   294f4:	059a      	lsls	r2, r3, #22
   294f6:	d4bf      	bmi.n	29478 <__smakebuf_r+0x1c>
   294f8:	f023 0303 	bic.w	r3, r3, #3
   294fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
   29500:	f043 0302 	orr.w	r3, r3, #2
   29504:	2101      	movs	r1, #1
   29506:	e9c4 2104 	strd	r2, r1, [r4, #16]
   2950a:	81a3      	strh	r3, [r4, #12]
   2950c:	6022      	str	r2, [r4, #0]
   2950e:	e7b3      	b.n	29478 <__smakebuf_r+0x1c>
   29510:	f44f 6880 	mov.w	r8, #1024	@ 0x400
   29514:	462f      	mov	r7, r5
   29516:	e7c8      	b.n	294aa <__smakebuf_r+0x4e>
   29518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2951c:	4630      	mov	r0, r6
   2951e:	f000 fb55 	bl	29bcc <_isatty_r>
   29522:	b910      	cbnz	r0, 2952a <__smakebuf_r+0xce>
   29524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   29528:	e7ce      	b.n	294c8 <__smakebuf_r+0x6c>
   2952a:	89a3      	ldrh	r3, [r4, #12]
   2952c:	f023 0303 	bic.w	r3, r3, #3
   29530:	f043 0301 	orr.w	r3, r3, #1
   29534:	b21b      	sxth	r3, r3
   29536:	e7c7      	b.n	294c8 <__smakebuf_r+0x6c>

00029538 <__malloc_lock>:
   29538:	4801      	ldr	r0, [pc, #4]	@ (29540 <__malloc_lock+0x8>)
   2953a:	f7fd bd0f 	b.w	26f5c <__retarget_lock_acquire_recursive>
   2953e:	bf00      	nop
   29540:	10052460 	.word	0x10052460

00029544 <__malloc_unlock>:
   29544:	4801      	ldr	r0, [pc, #4]	@ (2954c <__malloc_unlock+0x8>)
   29546:	f7fd bd0b 	b.w	26f60 <__retarget_lock_release_recursive>
   2954a:	bf00      	nop
   2954c:	10052460 	.word	0x10052460

00029550 <_fclose_r>:
   29550:	b570      	push	{r4, r5, r6, lr}
   29552:	2900      	cmp	r1, #0
   29554:	d03f      	beq.n	295d6 <_fclose_r+0x86>
   29556:	4606      	mov	r6, r0
   29558:	460c      	mov	r4, r1
   2955a:	b110      	cbz	r0, 29562 <_fclose_r+0x12>
   2955c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2955e:	2b00      	cmp	r3, #0
   29560:	d03c      	beq.n	295dc <_fclose_r+0x8c>
   29562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   29564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   29568:	07dd      	lsls	r5, r3, #31
   2956a:	d432      	bmi.n	295d2 <_fclose_r+0x82>
   2956c:	0590      	lsls	r0, r2, #22
   2956e:	d538      	bpl.n	295e2 <_fclose_r+0x92>
   29570:	4621      	mov	r1, r4
   29572:	4630      	mov	r0, r6
   29574:	f7fc feba 	bl	262ec <__sflush_r>
   29578:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   2957a:	4605      	mov	r5, r0
   2957c:	b133      	cbz	r3, 2958c <_fclose_r+0x3c>
   2957e:	69e1      	ldr	r1, [r4, #28]
   29580:	4630      	mov	r0, r6
   29582:	4798      	blx	r3
   29584:	2800      	cmp	r0, #0
   29586:	bfb8      	it	lt
   29588:	f04f 35ff 	movlt.w	r5, #4294967295	@ 0xffffffff
   2958c:	89a3      	ldrh	r3, [r4, #12]
   2958e:	061a      	lsls	r2, r3, #24
   29590:	d439      	bmi.n	29606 <_fclose_r+0xb6>
   29592:	6b21      	ldr	r1, [r4, #48]	@ 0x30
   29594:	b141      	cbz	r1, 295a8 <_fclose_r+0x58>
   29596:	f104 0340 	add.w	r3, r4, #64	@ 0x40
   2959a:	4299      	cmp	r1, r3
   2959c:	d002      	beq.n	295a4 <_fclose_r+0x54>
   2959e:	4630      	mov	r0, r6
   295a0:	f7fd fdb8 	bl	27114 <_free_r>
   295a4:	2300      	movs	r3, #0
   295a6:	6323      	str	r3, [r4, #48]	@ 0x30
   295a8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
   295aa:	b121      	cbz	r1, 295b6 <_fclose_r+0x66>
   295ac:	4630      	mov	r0, r6
   295ae:	f7fd fdb1 	bl	27114 <_free_r>
   295b2:	2300      	movs	r3, #0
   295b4:	6463      	str	r3, [r4, #68]	@ 0x44
   295b6:	f7fd f821 	bl	265fc <__sfp_lock_acquire>
   295ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   295bc:	2200      	movs	r2, #0
   295be:	07db      	lsls	r3, r3, #31
   295c0:	81a2      	strh	r2, [r4, #12]
   295c2:	d51c      	bpl.n	295fe <_fclose_r+0xae>
   295c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   295c6:	f7fd fcc7 	bl	26f58 <__retarget_lock_close_recursive>
   295ca:	f7fd f81d 	bl	26608 <__sfp_lock_release>
   295ce:	4628      	mov	r0, r5
   295d0:	bd70      	pop	{r4, r5, r6, pc}
   295d2:	2a00      	cmp	r2, #0
   295d4:	d1cc      	bne.n	29570 <_fclose_r+0x20>
   295d6:	2500      	movs	r5, #0
   295d8:	4628      	mov	r0, r5
   295da:	bd70      	pop	{r4, r5, r6, pc}
   295dc:	f7fc fff0 	bl	265c0 <__sinit>
   295e0:	e7bf      	b.n	29562 <_fclose_r+0x12>
   295e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   295e4:	f7fd fcba 	bl	26f5c <__retarget_lock_acquire_recursive>
   295e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   295ec:	2b00      	cmp	r3, #0
   295ee:	d1bf      	bne.n	29570 <_fclose_r+0x20>
   295f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   295f2:	07d9      	lsls	r1, r3, #31
   295f4:	d4ef      	bmi.n	295d6 <_fclose_r+0x86>
   295f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   295f8:	f7fd fcb2 	bl	26f60 <__retarget_lock_release_recursive>
   295fc:	e7eb      	b.n	295d6 <_fclose_r+0x86>
   295fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   29600:	f7fd fcae 	bl	26f60 <__retarget_lock_release_recursive>
   29604:	e7de      	b.n	295c4 <_fclose_r+0x74>
   29606:	6921      	ldr	r1, [r4, #16]
   29608:	4630      	mov	r0, r6
   2960a:	f7fd fd83 	bl	27114 <_free_r>
   2960e:	e7c0      	b.n	29592 <_fclose_r+0x42>

00029610 <_realloc_r>:
   29610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29614:	4616      	mov	r6, r2
   29616:	2900      	cmp	r1, #0
   29618:	f000 8096 	beq.w	29748 <_realloc_r+0x138>
   2961c:	460c      	mov	r4, r1
   2961e:	4680      	mov	r8, r0
   29620:	f106 050b 	add.w	r5, r6, #11
   29624:	f7ff ff88 	bl	29538 <__malloc_lock>
   29628:	f854 1c04 	ldr.w	r1, [r4, #-4]
   2962c:	2d16      	cmp	r5, #22
   2962e:	f1a4 0908 	sub.w	r9, r4, #8
   29632:	f021 0703 	bic.w	r7, r1, #3
   29636:	d858      	bhi.n	296ea <_realloc_r+0xda>
   29638:	2510      	movs	r5, #16
   2963a:	42ae      	cmp	r6, r5
   2963c:	d858      	bhi.n	296f0 <_realloc_r+0xe0>
   2963e:	42af      	cmp	r7, r5
   29640:	da60      	bge.n	29704 <_realloc_r+0xf4>
   29642:	4bbe      	ldr	r3, [pc, #760]	@ (2993c <_realloc_r+0x32c>)
   29644:	689a      	ldr	r2, [r3, #8]
   29646:	eb09 0c07 	add.w	ip, r9, r7
   2964a:	4562      	cmp	r2, ip
   2964c:	f8dc 0004 	ldr.w	r0, [ip, #4]
   29650:	f000 8090 	beq.w	29774 <_realloc_r+0x164>
   29654:	f020 0301 	bic.w	r3, r0, #1
   29658:	4463      	add	r3, ip
   2965a:	685b      	ldr	r3, [r3, #4]
   2965c:	07db      	lsls	r3, r3, #31
   2965e:	d468      	bmi.n	29732 <_realloc_r+0x122>
   29660:	f020 0003 	bic.w	r0, r0, #3
   29664:	183b      	adds	r3, r7, r0
   29666:	429d      	cmp	r5, r3
   29668:	dd47      	ble.n	296fa <_realloc_r+0xea>
   2966a:	07cb      	lsls	r3, r1, #31
   2966c:	d412      	bmi.n	29694 <_realloc_r+0x84>
   2966e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   29672:	eba9 0b03 	sub.w	fp, r9, r3
   29676:	f8db 3004 	ldr.w	r3, [fp, #4]
   2967a:	f023 0203 	bic.w	r2, r3, #3
   2967e:	4410      	add	r0, r2
   29680:	eb00 0a07 	add.w	sl, r0, r7
   29684:	4555      	cmp	r5, sl
   29686:	f340 80f6 	ble.w	29876 <_realloc_r+0x266>
   2968a:	eb07 0a02 	add.w	sl, r7, r2
   2968e:	4555      	cmp	r5, sl
   29690:	f340 80cc 	ble.w	2982c <_realloc_r+0x21c>
   29694:	4631      	mov	r1, r6
   29696:	4640      	mov	r0, r8
   29698:	f7fd fe78 	bl	2738c <_malloc_r>
   2969c:	4606      	mov	r6, r0
   2969e:	2800      	cmp	r0, #0
   296a0:	f000 8120 	beq.w	298e4 <_realloc_r+0x2d4>
   296a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   296a8:	f023 0301 	bic.w	r3, r3, #1
   296ac:	444b      	add	r3, r9
   296ae:	f1a0 0208 	sub.w	r2, r0, #8
   296b2:	4293      	cmp	r3, r2
   296b4:	f000 80b4 	beq.w	29820 <_realloc_r+0x210>
   296b8:	1f3a      	subs	r2, r7, #4
   296ba:	2a24      	cmp	r2, #36	@ 0x24
   296bc:	f200 80d7 	bhi.w	2986e <_realloc_r+0x25e>
   296c0:	2a13      	cmp	r2, #19
   296c2:	f200 80a2 	bhi.w	2980a <_realloc_r+0x1fa>
   296c6:	4603      	mov	r3, r0
   296c8:	4622      	mov	r2, r4
   296ca:	6811      	ldr	r1, [r2, #0]
   296cc:	6019      	str	r1, [r3, #0]
   296ce:	6851      	ldr	r1, [r2, #4]
   296d0:	6059      	str	r1, [r3, #4]
   296d2:	6892      	ldr	r2, [r2, #8]
   296d4:	609a      	str	r2, [r3, #8]
   296d6:	4621      	mov	r1, r4
   296d8:	4640      	mov	r0, r8
   296da:	f7fd fd1b 	bl	27114 <_free_r>
   296de:	4640      	mov	r0, r8
   296e0:	f7ff ff30 	bl	29544 <__malloc_unlock>
   296e4:	4630      	mov	r0, r6
   296e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296ea:	f035 0507 	bics.w	r5, r5, #7
   296ee:	d5a4      	bpl.n	2963a <_realloc_r+0x2a>
   296f0:	230c      	movs	r3, #12
   296f2:	f8c8 3000 	str.w	r3, [r8]
   296f6:	2600      	movs	r6, #0
   296f8:	e018      	b.n	2972c <_realloc_r+0x11c>
   296fa:	461f      	mov	r7, r3
   296fc:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
   29700:	60d3      	str	r3, [r2, #12]
   29702:	609a      	str	r2, [r3, #8]
   29704:	f8d9 3004 	ldr.w	r3, [r9, #4]
   29708:	1b7a      	subs	r2, r7, r5
   2970a:	2a0f      	cmp	r2, #15
   2970c:	f003 0301 	and.w	r3, r3, #1
   29710:	eb09 0007 	add.w	r0, r9, r7
   29714:	d81d      	bhi.n	29752 <_realloc_r+0x142>
   29716:	433b      	orrs	r3, r7
   29718:	f8c9 3004 	str.w	r3, [r9, #4]
   2971c:	6843      	ldr	r3, [r0, #4]
   2971e:	f043 0301 	orr.w	r3, r3, #1
   29722:	6043      	str	r3, [r0, #4]
   29724:	4640      	mov	r0, r8
   29726:	f7ff ff0d 	bl	29544 <__malloc_unlock>
   2972a:	4626      	mov	r6, r4
   2972c:	4630      	mov	r0, r6
   2972e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29732:	07c9      	lsls	r1, r1, #31
   29734:	d4ae      	bmi.n	29694 <_realloc_r+0x84>
   29736:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2973a:	eba9 0b03 	sub.w	fp, r9, r3
   2973e:	f8db 3004 	ldr.w	r3, [fp, #4]
   29742:	f023 0203 	bic.w	r2, r3, #3
   29746:	e7a0      	b.n	2968a <_realloc_r+0x7a>
   29748:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2974c:	4611      	mov	r1, r2
   2974e:	f7fd be1d 	b.w	2738c <_malloc_r>
   29752:	eb09 0105 	add.w	r1, r9, r5
   29756:	432b      	orrs	r3, r5
   29758:	f042 0201 	orr.w	r2, r2, #1
   2975c:	f8c9 3004 	str.w	r3, [r9, #4]
   29760:	604a      	str	r2, [r1, #4]
   29762:	6843      	ldr	r3, [r0, #4]
   29764:	f043 0301 	orr.w	r3, r3, #1
   29768:	6043      	str	r3, [r0, #4]
   2976a:	3108      	adds	r1, #8
   2976c:	4640      	mov	r0, r8
   2976e:	f7fd fcd1 	bl	27114 <_free_r>
   29772:	e7d7      	b.n	29724 <_realloc_r+0x114>
   29774:	f020 0003 	bic.w	r0, r0, #3
   29778:	19c2      	adds	r2, r0, r7
   2977a:	f105 0c10 	add.w	ip, r5, #16
   2977e:	4562      	cmp	r2, ip
   29780:	f280 8091 	bge.w	298a6 <_realloc_r+0x296>
   29784:	07ca      	lsls	r2, r1, #31
   29786:	d485      	bmi.n	29694 <_realloc_r+0x84>
   29788:	f854 2c08 	ldr.w	r2, [r4, #-8]
   2978c:	eba9 0b02 	sub.w	fp, r9, r2
   29790:	f8db 2004 	ldr.w	r2, [fp, #4]
   29794:	f022 0203 	bic.w	r2, r2, #3
   29798:	4410      	add	r0, r2
   2979a:	eb00 0a07 	add.w	sl, r0, r7
   2979e:	45d4      	cmp	ip, sl
   297a0:	f73f af73 	bgt.w	2968a <_realloc_r+0x7a>
   297a4:	465e      	mov	r6, fp
   297a6:	f8db 100c 	ldr.w	r1, [fp, #12]
   297aa:	f856 0f08 	ldr.w	r0, [r6, #8]!
   297ae:	1f3a      	subs	r2, r7, #4
   297b0:	2a24      	cmp	r2, #36	@ 0x24
   297b2:	60c1      	str	r1, [r0, #12]
   297b4:	6088      	str	r0, [r1, #8]
   297b6:	f200 80ae 	bhi.w	29916 <_realloc_r+0x306>
   297ba:	2a13      	cmp	r2, #19
   297bc:	f240 80a9 	bls.w	29912 <_realloc_r+0x302>
   297c0:	6821      	ldr	r1, [r4, #0]
   297c2:	f8cb 1008 	str.w	r1, [fp, #8]
   297c6:	6861      	ldr	r1, [r4, #4]
   297c8:	f8cb 100c 	str.w	r1, [fp, #12]
   297cc:	2a1b      	cmp	r2, #27
   297ce:	f200 80a8 	bhi.w	29922 <_realloc_r+0x312>
   297d2:	3408      	adds	r4, #8
   297d4:	f10b 0210 	add.w	r2, fp, #16
   297d8:	6821      	ldr	r1, [r4, #0]
   297da:	6011      	str	r1, [r2, #0]
   297dc:	6861      	ldr	r1, [r4, #4]
   297de:	6051      	str	r1, [r2, #4]
   297e0:	68a1      	ldr	r1, [r4, #8]
   297e2:	6091      	str	r1, [r2, #8]
   297e4:	eb0b 0105 	add.w	r1, fp, r5
   297e8:	ebaa 0205 	sub.w	r2, sl, r5
   297ec:	f042 0201 	orr.w	r2, r2, #1
   297f0:	6099      	str	r1, [r3, #8]
   297f2:	604a      	str	r2, [r1, #4]
   297f4:	f8db 3004 	ldr.w	r3, [fp, #4]
   297f8:	f003 0301 	and.w	r3, r3, #1
   297fc:	432b      	orrs	r3, r5
   297fe:	4640      	mov	r0, r8
   29800:	f8cb 3004 	str.w	r3, [fp, #4]
   29804:	f7ff fe9e 	bl	29544 <__malloc_unlock>
   29808:	e790      	b.n	2972c <_realloc_r+0x11c>
   2980a:	6823      	ldr	r3, [r4, #0]
   2980c:	6003      	str	r3, [r0, #0]
   2980e:	6863      	ldr	r3, [r4, #4]
   29810:	6043      	str	r3, [r0, #4]
   29812:	2a1b      	cmp	r2, #27
   29814:	d83c      	bhi.n	29890 <_realloc_r+0x280>
   29816:	f104 0208 	add.w	r2, r4, #8
   2981a:	f100 0308 	add.w	r3, r0, #8
   2981e:	e754      	b.n	296ca <_realloc_r+0xba>
   29820:	f850 3c04 	ldr.w	r3, [r0, #-4]
   29824:	f023 0303 	bic.w	r3, r3, #3
   29828:	441f      	add	r7, r3
   2982a:	e76b      	b.n	29704 <_realloc_r+0xf4>
   2982c:	1f3a      	subs	r2, r7, #4
   2982e:	465e      	mov	r6, fp
   29830:	f8db 300c 	ldr.w	r3, [fp, #12]
   29834:	f856 1f08 	ldr.w	r1, [r6, #8]!
   29838:	2a24      	cmp	r2, #36	@ 0x24
   2983a:	60cb      	str	r3, [r1, #12]
   2983c:	6099      	str	r1, [r3, #8]
   2983e:	d822      	bhi.n	29886 <_realloc_r+0x276>
   29840:	2a13      	cmp	r2, #19
   29842:	d91e      	bls.n	29882 <_realloc_r+0x272>
   29844:	6823      	ldr	r3, [r4, #0]
   29846:	f8cb 3008 	str.w	r3, [fp, #8]
   2984a:	6863      	ldr	r3, [r4, #4]
   2984c:	f8cb 300c 	str.w	r3, [fp, #12]
   29850:	2a1b      	cmp	r2, #27
   29852:	d83b      	bhi.n	298cc <_realloc_r+0x2bc>
   29854:	3408      	adds	r4, #8
   29856:	f10b 0310 	add.w	r3, fp, #16
   2985a:	6822      	ldr	r2, [r4, #0]
   2985c:	601a      	str	r2, [r3, #0]
   2985e:	6862      	ldr	r2, [r4, #4]
   29860:	605a      	str	r2, [r3, #4]
   29862:	68a2      	ldr	r2, [r4, #8]
   29864:	609a      	str	r2, [r3, #8]
   29866:	4634      	mov	r4, r6
   29868:	4657      	mov	r7, sl
   2986a:	46d9      	mov	r9, fp
   2986c:	e74a      	b.n	29704 <_realloc_r+0xf4>
   2986e:	4621      	mov	r1, r4
   29870:	f7fd f9a8 	bl	26bc4 <memmove>
   29874:	e72f      	b.n	296d6 <_realloc_r+0xc6>
   29876:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
   2987a:	1f3a      	subs	r2, r7, #4
   2987c:	60cb      	str	r3, [r1, #12]
   2987e:	6099      	str	r1, [r3, #8]
   29880:	e7d5      	b.n	2982e <_realloc_r+0x21e>
   29882:	4633      	mov	r3, r6
   29884:	e7e9      	b.n	2985a <_realloc_r+0x24a>
   29886:	4621      	mov	r1, r4
   29888:	4630      	mov	r0, r6
   2988a:	f7fd f99b 	bl	26bc4 <memmove>
   2988e:	e7ea      	b.n	29866 <_realloc_r+0x256>
   29890:	68a3      	ldr	r3, [r4, #8]
   29892:	6083      	str	r3, [r0, #8]
   29894:	68e3      	ldr	r3, [r4, #12]
   29896:	60c3      	str	r3, [r0, #12]
   29898:	2a24      	cmp	r2, #36	@ 0x24
   2989a:	d027      	beq.n	298ec <_realloc_r+0x2dc>
   2989c:	f104 0210 	add.w	r2, r4, #16
   298a0:	f100 0310 	add.w	r3, r0, #16
   298a4:	e711      	b.n	296ca <_realloc_r+0xba>
   298a6:	eb09 0105 	add.w	r1, r9, r5
   298aa:	6099      	str	r1, [r3, #8]
   298ac:	1b53      	subs	r3, r2, r5
   298ae:	f043 0301 	orr.w	r3, r3, #1
   298b2:	604b      	str	r3, [r1, #4]
   298b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   298b8:	f003 0301 	and.w	r3, r3, #1
   298bc:	432b      	orrs	r3, r5
   298be:	4640      	mov	r0, r8
   298c0:	f844 3c04 	str.w	r3, [r4, #-4]
   298c4:	f7ff fe3e 	bl	29544 <__malloc_unlock>
   298c8:	4626      	mov	r6, r4
   298ca:	e72f      	b.n	2972c <_realloc_r+0x11c>
   298cc:	68a3      	ldr	r3, [r4, #8]
   298ce:	f8cb 3010 	str.w	r3, [fp, #16]
   298d2:	68e3      	ldr	r3, [r4, #12]
   298d4:	f8cb 3014 	str.w	r3, [fp, #20]
   298d8:	2a24      	cmp	r2, #36	@ 0x24
   298da:	d010      	beq.n	298fe <_realloc_r+0x2ee>
   298dc:	3410      	adds	r4, #16
   298de:	f10b 0318 	add.w	r3, fp, #24
   298e2:	e7ba      	b.n	2985a <_realloc_r+0x24a>
   298e4:	4640      	mov	r0, r8
   298e6:	f7ff fe2d 	bl	29544 <__malloc_unlock>
   298ea:	e704      	b.n	296f6 <_realloc_r+0xe6>
   298ec:	6923      	ldr	r3, [r4, #16]
   298ee:	6103      	str	r3, [r0, #16]
   298f0:	6961      	ldr	r1, [r4, #20]
   298f2:	6141      	str	r1, [r0, #20]
   298f4:	f104 0218 	add.w	r2, r4, #24
   298f8:	f100 0318 	add.w	r3, r0, #24
   298fc:	e6e5      	b.n	296ca <_realloc_r+0xba>
   298fe:	6923      	ldr	r3, [r4, #16]
   29900:	f8cb 3018 	str.w	r3, [fp, #24]
   29904:	6963      	ldr	r3, [r4, #20]
   29906:	f8cb 301c 	str.w	r3, [fp, #28]
   2990a:	3418      	adds	r4, #24
   2990c:	f10b 0320 	add.w	r3, fp, #32
   29910:	e7a3      	b.n	2985a <_realloc_r+0x24a>
   29912:	4632      	mov	r2, r6
   29914:	e760      	b.n	297d8 <_realloc_r+0x1c8>
   29916:	4621      	mov	r1, r4
   29918:	4630      	mov	r0, r6
   2991a:	f7fd f953 	bl	26bc4 <memmove>
   2991e:	4b07      	ldr	r3, [pc, #28]	@ (2993c <_realloc_r+0x32c>)
   29920:	e760      	b.n	297e4 <_realloc_r+0x1d4>
   29922:	68a1      	ldr	r1, [r4, #8]
   29924:	f8cb 1010 	str.w	r1, [fp, #16]
   29928:	68e1      	ldr	r1, [r4, #12]
   2992a:	f8cb 1014 	str.w	r1, [fp, #20]
   2992e:	2a24      	cmp	r2, #36	@ 0x24
   29930:	d006      	beq.n	29940 <_realloc_r+0x330>
   29932:	3410      	adds	r4, #16
   29934:	f10b 0218 	add.w	r2, fp, #24
   29938:	e74e      	b.n	297d8 <_realloc_r+0x1c8>
   2993a:	bf00      	nop
   2993c:	1000c670 	.word	0x1000c670
   29940:	6922      	ldr	r2, [r4, #16]
   29942:	f8cb 2018 	str.w	r2, [fp, #24]
   29946:	6962      	ldr	r2, [r4, #20]
   29948:	f8cb 201c 	str.w	r2, [fp, #28]
   2994c:	3418      	adds	r4, #24
   2994e:	f10b 0220 	add.w	r2, fp, #32
   29952:	e741      	b.n	297d8 <_realloc_r+0x1c8>

00029954 <__sread>:
   29954:	b510      	push	{r4, lr}
   29956:	460c      	mov	r4, r1
   29958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2995c:	f000 f95e 	bl	29c1c <_read_r>
   29960:	2800      	cmp	r0, #0
   29962:	db03      	blt.n	2996c <__sread+0x18>
   29964:	6d23      	ldr	r3, [r4, #80]	@ 0x50
   29966:	4403      	add	r3, r0
   29968:	6523      	str	r3, [r4, #80]	@ 0x50
   2996a:	bd10      	pop	{r4, pc}
   2996c:	89a3      	ldrh	r3, [r4, #12]
   2996e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
   29972:	81a3      	strh	r3, [r4, #12]
   29974:	bd10      	pop	{r4, pc}
   29976:	bf00      	nop

00029978 <__swrite>:
   29978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2997c:	460c      	mov	r4, r1
   2997e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   29982:	461f      	mov	r7, r3
   29984:	05cb      	lsls	r3, r1, #23
   29986:	4605      	mov	r5, r0
   29988:	4616      	mov	r6, r2
   2998a:	d40b      	bmi.n	299a4 <__swrite+0x2c>
   2998c:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
   29990:	81a1      	strh	r1, [r4, #12]
   29992:	463b      	mov	r3, r7
   29994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   29998:	4632      	mov	r2, r6
   2999a:	4628      	mov	r0, r5
   2999c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   299a0:	f000 b964 	b.w	29c6c <_write_r>
   299a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   299a8:	2302      	movs	r3, #2
   299aa:	2200      	movs	r2, #0
   299ac:	f000 f920 	bl	29bf0 <_lseek_r>
   299b0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   299b4:	e7ea      	b.n	2998c <__swrite+0x14>
   299b6:	bf00      	nop

000299b8 <__sseek>:
   299b8:	b510      	push	{r4, lr}
   299ba:	460c      	mov	r4, r1
   299bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   299c0:	f000 f916 	bl	29bf0 <_lseek_r>
   299c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   299c8:	1c42      	adds	r2, r0, #1
   299ca:	bf0e      	itee	eq
   299cc:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
   299d0:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
   299d4:	6520      	strne	r0, [r4, #80]	@ 0x50
   299d6:	81a3      	strh	r3, [r4, #12]
   299d8:	bd10      	pop	{r4, pc}
   299da:	bf00      	nop

000299dc <__sclose>:
   299dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   299e0:	f000 b8cc 	b.w	29b7c <_close_r>

000299e4 <__ascii_wctomb>:
   299e4:	b149      	cbz	r1, 299fa <__ascii_wctomb+0x16>
   299e6:	2aff      	cmp	r2, #255	@ 0xff
   299e8:	d802      	bhi.n	299f0 <__ascii_wctomb+0xc>
   299ea:	700a      	strb	r2, [r1, #0]
   299ec:	2001      	movs	r0, #1
   299ee:	4770      	bx	lr
   299f0:	238a      	movs	r3, #138	@ 0x8a
   299f2:	6003      	str	r3, [r0, #0]
   299f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   299f8:	4770      	bx	lr
   299fa:	4608      	mov	r0, r1
   299fc:	4770      	bx	lr
   299fe:	bf00      	nop

00029a00 <__swbuf_r>:
   29a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a02:	460d      	mov	r5, r1
   29a04:	4614      	mov	r4, r2
   29a06:	4606      	mov	r6, r0
   29a08:	b110      	cbz	r0, 29a10 <__swbuf_r+0x10>
   29a0a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   29a0c:	2b00      	cmp	r3, #0
   29a0e:	d04a      	beq.n	29aa6 <__swbuf_r+0xa6>
   29a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   29a14:	69a3      	ldr	r3, [r4, #24]
   29a16:	60a3      	str	r3, [r4, #8]
   29a18:	0710      	lsls	r0, r2, #28
   29a1a:	d51b      	bpl.n	29a54 <__swbuf_r+0x54>
   29a1c:	6923      	ldr	r3, [r4, #16]
   29a1e:	b1cb      	cbz	r3, 29a54 <__swbuf_r+0x54>
   29a20:	b2ed      	uxtb	r5, r5
   29a22:	0491      	lsls	r1, r2, #18
   29a24:	462f      	mov	r7, r5
   29a26:	d521      	bpl.n	29a6c <__swbuf_r+0x6c>
   29a28:	6822      	ldr	r2, [r4, #0]
   29a2a:	6961      	ldr	r1, [r4, #20]
   29a2c:	1ad3      	subs	r3, r2, r3
   29a2e:	4299      	cmp	r1, r3
   29a30:	dd28      	ble.n	29a84 <__swbuf_r+0x84>
   29a32:	3301      	adds	r3, #1
   29a34:	68a1      	ldr	r1, [r4, #8]
   29a36:	3901      	subs	r1, #1
   29a38:	60a1      	str	r1, [r4, #8]
   29a3a:	1c51      	adds	r1, r2, #1
   29a3c:	6021      	str	r1, [r4, #0]
   29a3e:	7015      	strb	r5, [r2, #0]
   29a40:	6962      	ldr	r2, [r4, #20]
   29a42:	429a      	cmp	r2, r3
   29a44:	d026      	beq.n	29a94 <__swbuf_r+0x94>
   29a46:	89a3      	ldrh	r3, [r4, #12]
   29a48:	07db      	lsls	r3, r3, #31
   29a4a:	d501      	bpl.n	29a50 <__swbuf_r+0x50>
   29a4c:	2d0a      	cmp	r5, #10
   29a4e:	d021      	beq.n	29a94 <__swbuf_r+0x94>
   29a50:	4638      	mov	r0, r7
   29a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29a54:	4621      	mov	r1, r4
   29a56:	4630      	mov	r0, r6
   29a58:	f7fc ffb6 	bl	269c8 <__swsetup_r>
   29a5c:	bb00      	cbnz	r0, 29aa0 <__swbuf_r+0xa0>
   29a5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   29a62:	6923      	ldr	r3, [r4, #16]
   29a64:	b2ed      	uxtb	r5, r5
   29a66:	0491      	lsls	r1, r2, #18
   29a68:	462f      	mov	r7, r5
   29a6a:	d4dd      	bmi.n	29a28 <__swbuf_r+0x28>
   29a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
   29a70:	81a2      	strh	r2, [r4, #12]
   29a72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
   29a74:	6961      	ldr	r1, [r4, #20]
   29a76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
   29a7a:	6662      	str	r2, [r4, #100]	@ 0x64
   29a7c:	6822      	ldr	r2, [r4, #0]
   29a7e:	1ad3      	subs	r3, r2, r3
   29a80:	4299      	cmp	r1, r3
   29a82:	dcd6      	bgt.n	29a32 <__swbuf_r+0x32>
   29a84:	4621      	mov	r1, r4
   29a86:	4630      	mov	r0, r6
   29a88:	f7fc fccc 	bl	26424 <_fflush_r>
   29a8c:	b940      	cbnz	r0, 29aa0 <__swbuf_r+0xa0>
   29a8e:	6822      	ldr	r2, [r4, #0]
   29a90:	2301      	movs	r3, #1
   29a92:	e7cf      	b.n	29a34 <__swbuf_r+0x34>
   29a94:	4621      	mov	r1, r4
   29a96:	4630      	mov	r0, r6
   29a98:	f7fc fcc4 	bl	26424 <_fflush_r>
   29a9c:	2800      	cmp	r0, #0
   29a9e:	d0d7      	beq.n	29a50 <__swbuf_r+0x50>
   29aa0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
   29aa4:	e7d4      	b.n	29a50 <__swbuf_r+0x50>
   29aa6:	f7fc fd8b 	bl	265c0 <__sinit>
   29aaa:	e7b1      	b.n	29a10 <__swbuf_r+0x10>

00029aac <strchr>:
   29aac:	f011 01ff 	ands.w	r1, r1, #255	@ 0xff
   29ab0:	4603      	mov	r3, r0
   29ab2:	f000 0203 	and.w	r2, r0, #3
   29ab6:	d039      	beq.n	29b2c <strchr+0x80>
   29ab8:	bb8a      	cbnz	r2, 29b1e <strchr+0x72>
   29aba:	6802      	ldr	r2, [r0, #0]
   29abc:	b510      	push	{r4, lr}
   29abe:	eb01 2e01 	add.w	lr, r1, r1, lsl #8
   29ac2:	eb0e 4e0e 	add.w	lr, lr, lr, lsl #16
   29ac6:	ea8e 0402 	eor.w	r4, lr, r2
   29aca:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
   29ace:	ea23 0302 	bic.w	r3, r3, r2
   29ad2:	f1a4 3201 	sub.w	r2, r4, #16843009	@ 0x1010101
   29ad6:	ea22 0204 	bic.w	r2, r2, r4
   29ada:	4313      	orrs	r3, r2
   29adc:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   29ae0:	d10f      	bne.n	29b02 <strchr+0x56>
   29ae2:	f850 4f04 	ldr.w	r4, [r0, #4]!
   29ae6:	ea84 0c0e 	eor.w	ip, r4, lr
   29aea:	f1a4 3301 	sub.w	r3, r4, #16843009	@ 0x1010101
   29aee:	f1ac 3201 	sub.w	r2, ip, #16843009	@ 0x1010101
   29af2:	ea23 0304 	bic.w	r3, r3, r4
   29af6:	ea22 020c 	bic.w	r2, r2, ip
   29afa:	4313      	orrs	r3, r2
   29afc:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   29b00:	d0ef      	beq.n	29ae2 <strchr+0x36>
   29b02:	7803      	ldrb	r3, [r0, #0]
   29b04:	b923      	cbnz	r3, 29b10 <strchr+0x64>
   29b06:	e036      	b.n	29b76 <strchr+0xca>
   29b08:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   29b0c:	2b00      	cmp	r3, #0
   29b0e:	d032      	beq.n	29b76 <strchr+0xca>
   29b10:	4299      	cmp	r1, r3
   29b12:	d1f9      	bne.n	29b08 <strchr+0x5c>
   29b14:	bd10      	pop	{r4, pc}
   29b16:	428a      	cmp	r2, r1
   29b18:	d028      	beq.n	29b6c <strchr+0xc0>
   29b1a:	079a      	lsls	r2, r3, #30
   29b1c:	d029      	beq.n	29b72 <strchr+0xc6>
   29b1e:	781a      	ldrb	r2, [r3, #0]
   29b20:	4618      	mov	r0, r3
   29b22:	3301      	adds	r3, #1
   29b24:	2a00      	cmp	r2, #0
   29b26:	d1f6      	bne.n	29b16 <strchr+0x6a>
   29b28:	4610      	mov	r0, r2
   29b2a:	4770      	bx	lr
   29b2c:	b9ca      	cbnz	r2, 29b62 <strchr+0xb6>
   29b2e:	6802      	ldr	r2, [r0, #0]
   29b30:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
   29b34:	ea23 0302 	bic.w	r3, r3, r2
   29b38:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   29b3c:	d108      	bne.n	29b50 <strchr+0xa4>
   29b3e:	f850 2f04 	ldr.w	r2, [r0, #4]!
   29b42:	f1a2 3301 	sub.w	r3, r2, #16843009	@ 0x1010101
   29b46:	ea23 0302 	bic.w	r3, r3, r2
   29b4a:	f013 3f80 	tst.w	r3, #2155905152	@ 0x80808080
   29b4e:	d0f6      	beq.n	29b3e <strchr+0x92>
   29b50:	7803      	ldrb	r3, [r0, #0]
   29b52:	b15b      	cbz	r3, 29b6c <strchr+0xc0>
   29b54:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   29b58:	2b00      	cmp	r3, #0
   29b5a:	d1fb      	bne.n	29b54 <strchr+0xa8>
   29b5c:	4770      	bx	lr
   29b5e:	0799      	lsls	r1, r3, #30
   29b60:	d005      	beq.n	29b6e <strchr+0xc2>
   29b62:	4618      	mov	r0, r3
   29b64:	f813 2b01 	ldrb.w	r2, [r3], #1
   29b68:	2a00      	cmp	r2, #0
   29b6a:	d1f8      	bne.n	29b5e <strchr+0xb2>
   29b6c:	4770      	bx	lr
   29b6e:	4618      	mov	r0, r3
   29b70:	e7dd      	b.n	29b2e <strchr+0x82>
   29b72:	4618      	mov	r0, r3
   29b74:	e7a1      	b.n	29aba <strchr+0xe>
   29b76:	4618      	mov	r0, r3
   29b78:	bd10      	pop	{r4, pc}
   29b7a:	bf00      	nop

00029b7c <_close_r>:
   29b7c:	b538      	push	{r3, r4, r5, lr}
   29b7e:	4d07      	ldr	r5, [pc, #28]	@ (29b9c <_close_r+0x20>)
   29b80:	2200      	movs	r2, #0
   29b82:	4604      	mov	r4, r0
   29b84:	4608      	mov	r0, r1
   29b86:	602a      	str	r2, [r5, #0]
   29b88:	f001 ff2e 	bl	2b9e8 <_close>
   29b8c:	1c43      	adds	r3, r0, #1
   29b8e:	d000      	beq.n	29b92 <_close_r+0x16>
   29b90:	bd38      	pop	{r3, r4, r5, pc}
   29b92:	682b      	ldr	r3, [r5, #0]
   29b94:	2b00      	cmp	r3, #0
   29b96:	d0fb      	beq.n	29b90 <_close_r+0x14>
   29b98:	6023      	str	r3, [r4, #0]
   29b9a:	bd38      	pop	{r3, r4, r5, pc}
   29b9c:	10052634 	.word	0x10052634

00029ba0 <_fstat_r>:
   29ba0:	b570      	push	{r4, r5, r6, lr}
   29ba2:	460c      	mov	r4, r1
   29ba4:	4d08      	ldr	r5, [pc, #32]	@ (29bc8 <_fstat_r+0x28>)
   29ba6:	4603      	mov	r3, r0
   29ba8:	2600      	movs	r6, #0
   29baa:	4620      	mov	r0, r4
   29bac:	4611      	mov	r1, r2
   29bae:	461c      	mov	r4, r3
   29bb0:	602e      	str	r6, [r5, #0]
   29bb2:	f001 ff21 	bl	2b9f8 <_fstat>
   29bb6:	1c43      	adds	r3, r0, #1
   29bb8:	d000      	beq.n	29bbc <_fstat_r+0x1c>
   29bba:	bd70      	pop	{r4, r5, r6, pc}
   29bbc:	682b      	ldr	r3, [r5, #0]
   29bbe:	2b00      	cmp	r3, #0
   29bc0:	d0fb      	beq.n	29bba <_fstat_r+0x1a>
   29bc2:	6023      	str	r3, [r4, #0]
   29bc4:	bd70      	pop	{r4, r5, r6, pc}
   29bc6:	bf00      	nop
   29bc8:	10052634 	.word	0x10052634

00029bcc <_isatty_r>:
   29bcc:	b538      	push	{r3, r4, r5, lr}
   29bce:	4d07      	ldr	r5, [pc, #28]	@ (29bec <_isatty_r+0x20>)
   29bd0:	2200      	movs	r2, #0
   29bd2:	4604      	mov	r4, r0
   29bd4:	4608      	mov	r0, r1
   29bd6:	602a      	str	r2, [r5, #0]
   29bd8:	f001 ff1e 	bl	2ba18 <_isatty>
   29bdc:	1c43      	adds	r3, r0, #1
   29bde:	d000      	beq.n	29be2 <_isatty_r+0x16>
   29be0:	bd38      	pop	{r3, r4, r5, pc}
   29be2:	682b      	ldr	r3, [r5, #0]
   29be4:	2b00      	cmp	r3, #0
   29be6:	d0fb      	beq.n	29be0 <_isatty_r+0x14>
   29be8:	6023      	str	r3, [r4, #0]
   29bea:	bd38      	pop	{r3, r4, r5, pc}
   29bec:	10052634 	.word	0x10052634

00029bf0 <_lseek_r>:
   29bf0:	b538      	push	{r3, r4, r5, lr}
   29bf2:	460c      	mov	r4, r1
   29bf4:	4d08      	ldr	r5, [pc, #32]	@ (29c18 <_lseek_r+0x28>)
   29bf6:	4684      	mov	ip, r0
   29bf8:	4611      	mov	r1, r2
   29bfa:	4620      	mov	r0, r4
   29bfc:	461a      	mov	r2, r3
   29bfe:	2300      	movs	r3, #0
   29c00:	602b      	str	r3, [r5, #0]
   29c02:	4664      	mov	r4, ip
   29c04:	f001 ff18 	bl	2ba38 <_lseek>
   29c08:	1c43      	adds	r3, r0, #1
   29c0a:	d000      	beq.n	29c0e <_lseek_r+0x1e>
   29c0c:	bd38      	pop	{r3, r4, r5, pc}
   29c0e:	682b      	ldr	r3, [r5, #0]
   29c10:	2b00      	cmp	r3, #0
   29c12:	d0fb      	beq.n	29c0c <_lseek_r+0x1c>
   29c14:	6023      	str	r3, [r4, #0]
   29c16:	bd38      	pop	{r3, r4, r5, pc}
   29c18:	10052634 	.word	0x10052634

00029c1c <_read_r>:
   29c1c:	b538      	push	{r3, r4, r5, lr}
   29c1e:	460c      	mov	r4, r1
   29c20:	4d08      	ldr	r5, [pc, #32]	@ (29c44 <_read_r+0x28>)
   29c22:	4684      	mov	ip, r0
   29c24:	4611      	mov	r1, r2
   29c26:	4620      	mov	r0, r4
   29c28:	461a      	mov	r2, r3
   29c2a:	2300      	movs	r3, #0
   29c2c:	602b      	str	r3, [r5, #0]
   29c2e:	4664      	mov	r4, ip
   29c30:	f001 ff0a 	bl	2ba48 <_read>
   29c34:	1c43      	adds	r3, r0, #1
   29c36:	d000      	beq.n	29c3a <_read_r+0x1e>
   29c38:	bd38      	pop	{r3, r4, r5, pc}
   29c3a:	682b      	ldr	r3, [r5, #0]
   29c3c:	2b00      	cmp	r3, #0
   29c3e:	d0fb      	beq.n	29c38 <_read_r+0x1c>
   29c40:	6023      	str	r3, [r4, #0]
   29c42:	bd38      	pop	{r3, r4, r5, pc}
   29c44:	10052634 	.word	0x10052634

00029c48 <_sbrk_r>:
   29c48:	b538      	push	{r3, r4, r5, lr}
   29c4a:	4d07      	ldr	r5, [pc, #28]	@ (29c68 <_sbrk_r+0x20>)
   29c4c:	2200      	movs	r2, #0
   29c4e:	4604      	mov	r4, r0
   29c50:	4608      	mov	r0, r1
   29c52:	602a      	str	r2, [r5, #0]
   29c54:	f001 ff00 	bl	2ba58 <_sbrk>
   29c58:	1c43      	adds	r3, r0, #1
   29c5a:	d000      	beq.n	29c5e <_sbrk_r+0x16>
   29c5c:	bd38      	pop	{r3, r4, r5, pc}
   29c5e:	682b      	ldr	r3, [r5, #0]
   29c60:	2b00      	cmp	r3, #0
   29c62:	d0fb      	beq.n	29c5c <_sbrk_r+0x14>
   29c64:	6023      	str	r3, [r4, #0]
   29c66:	bd38      	pop	{r3, r4, r5, pc}
   29c68:	10052634 	.word	0x10052634

00029c6c <_write_r>:
   29c6c:	b538      	push	{r3, r4, r5, lr}
   29c6e:	460c      	mov	r4, r1
   29c70:	4d08      	ldr	r5, [pc, #32]	@ (29c94 <_write_r+0x28>)
   29c72:	4684      	mov	ip, r0
   29c74:	4611      	mov	r1, r2
   29c76:	4620      	mov	r0, r4
   29c78:	461a      	mov	r2, r3
   29c7a:	2300      	movs	r3, #0
   29c7c:	602b      	str	r3, [r5, #0]
   29c7e:	4664      	mov	r4, ip
   29c80:	f001 fef8 	bl	2ba74 <_write>
   29c84:	1c43      	adds	r3, r0, #1
   29c86:	d000      	beq.n	29c8a <_write_r+0x1e>
   29c88:	bd38      	pop	{r3, r4, r5, pc}
   29c8a:	682b      	ldr	r3, [r5, #0]
   29c8c:	2b00      	cmp	r3, #0
   29c8e:	d0fb      	beq.n	29c88 <_write_r+0x1c>
   29c90:	6023      	str	r3, [r4, #0]
   29c92:	bd38      	pop	{r3, r4, r5, pc}
   29c94:	10052634 	.word	0x10052634

00029c98 <sysconf>:
   29c98:	2808      	cmp	r0, #8
   29c9a:	d102      	bne.n	29ca2 <sysconf+0xa>
   29c9c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
   29ca0:	4770      	bx	lr
   29ca2:	b508      	push	{r3, lr}
   29ca4:	f7fd f928 	bl	26ef8 <__errno>
   29ca8:	2316      	movs	r3, #22
   29caa:	6003      	str	r3, [r0, #0]
   29cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   29cb0:	bd08      	pop	{r3, pc}
   29cb2:	bf00      	nop

00029cb4 <__libc_fini_array>:
   29cb4:	b538      	push	{r3, r4, r5, lr}
   29cb6:	4d07      	ldr	r5, [pc, #28]	@ (29cd4 <__libc_fini_array+0x20>)
   29cb8:	4c07      	ldr	r4, [pc, #28]	@ (29cd8 <__libc_fini_array+0x24>)
   29cba:	1b2c      	subs	r4, r5, r4
   29cbc:	10a4      	asrs	r4, r4, #2
   29cbe:	d005      	beq.n	29ccc <__libc_fini_array+0x18>
   29cc0:	3c01      	subs	r4, #1
   29cc2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   29cc6:	4798      	blx	r3
   29cc8:	2c00      	cmp	r4, #0
   29cca:	d1f9      	bne.n	29cc0 <__libc_fini_array+0xc>
   29ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29cd0:	f7ef bd42 	b.w	19758 <_fini>
   29cd4:	00048d54 	.word	0x00048d54
   29cd8:	00048d50 	.word	0x00048d50

00029cdc <_wcsnrtombs_l>:
   29cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ce0:	b08b      	sub	sp, #44	@ 0x2c
   29ce2:	e9dd 7a15 	ldrd	r7, sl, [sp, #84]	@ 0x54
   29ce6:	4686      	mov	lr, r0
   29ce8:	461e      	mov	r6, r3
   29cea:	2f00      	cmp	r7, #0
   29cec:	d05a      	beq.n	29da4 <_wcsnrtombs_l+0xc8>
   29cee:	6815      	ldr	r5, [r2, #0]
   29cf0:	2900      	cmp	r1, #0
   29cf2:	d05c      	beq.n	29dae <_wcsnrtombs_l+0xd2>
   29cf4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
   29cf6:	2b00      	cmp	r3, #0
   29cf8:	d069      	beq.n	29dce <_wcsnrtombs_l+0xf2>
   29cfa:	1e74      	subs	r4, r6, #1
   29cfc:	b34e      	cbz	r6, 29d52 <_wcsnrtombs_l+0x76>
   29cfe:	3d04      	subs	r5, #4
   29d00:	e9cd 5e01 	strd	r5, lr, [sp, #4]
   29d04:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
   29d08:	9104      	str	r1, [sp, #16]
   29d0a:	2600      	movs	r6, #0
   29d0c:	9103      	str	r1, [sp, #12]
   29d0e:	9205      	str	r2, [sp, #20]
   29d10:	e00b      	b.n	29d2a <_wcsnrtombs_l+0x4e>
   29d12:	9b03      	ldr	r3, [sp, #12]
   29d14:	bb0b      	cbnz	r3, 29d5a <_wcsnrtombs_l+0x7e>
   29d16:	9b01      	ldr	r3, [sp, #4]
   29d18:	6818      	ldr	r0, [r3, #0]
   29d1a:	2800      	cmp	r0, #0
   29d1c:	d036      	beq.n	29d8c <_wcsnrtombs_l+0xb0>
   29d1e:	45dc      	cmp	ip, fp
   29d20:	d257      	bcs.n	29dd2 <_wcsnrtombs_l+0xf6>
   29d22:	3c01      	subs	r4, #1
   29d24:	1c63      	adds	r3, r4, #1
   29d26:	4666      	mov	r6, ip
   29d28:	d013      	beq.n	29d52 <_wcsnrtombs_l+0x76>
   29d2a:	9b01      	ldr	r3, [sp, #4]
   29d2c:	9802      	ldr	r0, [sp, #8]
   29d2e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   29d32:	9301      	str	r3, [sp, #4]
   29d34:	f8da 50e0 	ldr.w	r5, [sl, #224]	@ 0xe0
   29d38:	463b      	mov	r3, r7
   29d3a:	a907      	add	r1, sp, #28
   29d3c:	e9d7 9800 	ldrd	r9, r8, [r7]
   29d40:	47a8      	blx	r5
   29d42:	1c42      	adds	r2, r0, #1
   29d44:	d037      	beq.n	29db6 <_wcsnrtombs_l+0xda>
   29d46:	eb00 0c06 	add.w	ip, r0, r6
   29d4a:	45dc      	cmp	ip, fp
   29d4c:	d9e1      	bls.n	29d12 <_wcsnrtombs_l+0x36>
   29d4e:	e9c7 9800 	strd	r9, r8, [r7]
   29d52:	4630      	mov	r0, r6
   29d54:	b00b      	add	sp, #44	@ 0x2c
   29d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d5a:	2800      	cmp	r0, #0
   29d5c:	dd0e      	ble.n	29d7c <_wcsnrtombs_l+0xa0>
   29d5e:	9b04      	ldr	r3, [sp, #16]
   29d60:	9d01      	ldr	r5, [sp, #4]
   29d62:	4418      	add	r0, r3
   29d64:	1e5a      	subs	r2, r3, #1
   29d66:	a907      	add	r1, sp, #28
   29d68:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
   29d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
   29d70:	f802 3f01 	strb.w	r3, [r2, #1]!
   29d74:	4572      	cmp	r2, lr
   29d76:	d1f9      	bne.n	29d6c <_wcsnrtombs_l+0x90>
   29d78:	9501      	str	r5, [sp, #4]
   29d7a:	9004      	str	r0, [sp, #16]
   29d7c:	9b05      	ldr	r3, [sp, #20]
   29d7e:	681a      	ldr	r2, [r3, #0]
   29d80:	3204      	adds	r2, #4
   29d82:	601a      	str	r2, [r3, #0]
   29d84:	9b01      	ldr	r3, [sp, #4]
   29d86:	6818      	ldr	r0, [r3, #0]
   29d88:	2800      	cmp	r0, #0
   29d8a:	d1c8      	bne.n	29d1e <_wcsnrtombs_l+0x42>
   29d8c:	9903      	ldr	r1, [sp, #12]
   29d8e:	9a05      	ldr	r2, [sp, #20]
   29d90:	b101      	cbz	r1, 29d94 <_wcsnrtombs_l+0xb8>
   29d92:	6010      	str	r0, [r2, #0]
   29d94:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
   29d98:	2200      	movs	r2, #0
   29d9a:	4630      	mov	r0, r6
   29d9c:	603a      	str	r2, [r7, #0]
   29d9e:	b00b      	add	sp, #44	@ 0x2c
   29da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29da4:	6815      	ldr	r5, [r2, #0]
   29da6:	f500 7786 	add.w	r7, r0, #268	@ 0x10c
   29daa:	2900      	cmp	r1, #0
   29dac:	d1a2      	bne.n	29cf4 <_wcsnrtombs_l+0x18>
   29dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   29db2:	9314      	str	r3, [sp, #80]	@ 0x50
   29db4:	e7a1      	b.n	29cfa <_wcsnrtombs_l+0x1e>
   29db6:	f8dd e008 	ldr.w	lr, [sp, #8]
   29dba:	4606      	mov	r6, r0
   29dbc:	218a      	movs	r1, #138	@ 0x8a
   29dbe:	2200      	movs	r2, #0
   29dc0:	4630      	mov	r0, r6
   29dc2:	f8ce 1000 	str.w	r1, [lr]
   29dc6:	603a      	str	r2, [r7, #0]
   29dc8:	b00b      	add	sp, #44	@ 0x2c
   29dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29dce:	9e14      	ldr	r6, [sp, #80]	@ 0x50
   29dd0:	e7bf      	b.n	29d52 <_wcsnrtombs_l+0x76>
   29dd2:	4666      	mov	r6, ip
   29dd4:	e7bd      	b.n	29d52 <_wcsnrtombs_l+0x76>
   29dd6:	bf00      	nop

00029dd8 <_wcsnrtombs_r>:
   29dd8:	b510      	push	{r4, lr}
   29dda:	b084      	sub	sp, #16
   29ddc:	4c05      	ldr	r4, [pc, #20]	@ (29df4 <_wcsnrtombs_r+0x1c>)
   29dde:	9806      	ldr	r0, [sp, #24]
   29de0:	9000      	str	r0, [sp, #0]
   29de2:	9807      	ldr	r0, [sp, #28]
   29de4:	9001      	str	r0, [sp, #4]
   29de6:	4804      	ldr	r0, [pc, #16]	@ (29df8 <_wcsnrtombs_r+0x20>)
   29de8:	6800      	ldr	r0, [r0, #0]
   29dea:	9402      	str	r4, [sp, #8]
   29dec:	f7ff ff76 	bl	29cdc <_wcsnrtombs_l>
   29df0:	b004      	add	sp, #16
   29df2:	bd10      	pop	{r4, pc}
   29df4:	1000c3d0 	.word	0x1000c3d0
   29df8:	1000c53c 	.word	0x1000c53c

00029dfc <quorem>:
   29dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e00:	6903      	ldr	r3, [r0, #16]
   29e02:	690c      	ldr	r4, [r1, #16]
   29e04:	42a3      	cmp	r3, r4
   29e06:	b083      	sub	sp, #12
   29e08:	f2c0 808a 	blt.w	29f20 <quorem+0x124>
   29e0c:	3c01      	subs	r4, #1
   29e0e:	f101 0514 	add.w	r5, r1, #20
   29e12:	f100 0814 	add.w	r8, r0, #20
   29e16:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   29e1a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   29e1e:	3301      	adds	r3, #1
   29e20:	429a      	cmp	r2, r3
   29e22:	468e      	mov	lr, r1
   29e24:	4681      	mov	r9, r0
   29e26:	ea4f 0184 	mov.w	r1, r4, lsl #2
   29e2a:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   29e2e:	eb08 0a84 	add.w	sl, r8, r4, lsl #2
   29e32:	fbb2 f6f3 	udiv	r6, r2, r3
   29e36:	d33a      	bcc.n	29eae <quorem+0xb2>
   29e38:	e9cd 1500 	strd	r1, r5, [sp]
   29e3c:	2200      	movs	r2, #0
   29e3e:	46ac      	mov	ip, r5
   29e40:	4640      	mov	r0, r8
   29e42:	4613      	mov	r3, r2
   29e44:	f85c 1b04 	ldr.w	r1, [ip], #4
   29e48:	6805      	ldr	r5, [r0, #0]
   29e4a:	fa1f fb81 	uxth.w	fp, r1
   29e4e:	fb06 220b 	mla	r2, r6, fp, r2
   29e52:	0c09      	lsrs	r1, r1, #16
   29e54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   29e58:	fb06 bb01 	mla	fp, r6, r1, fp
   29e5c:	b292      	uxth	r2, r2
   29e5e:	b2a9      	uxth	r1, r5
   29e60:	1a89      	subs	r1, r1, r2
   29e62:	4419      	add	r1, r3
   29e64:	fa1f f38b 	uxth.w	r3, fp
   29e68:	ebc3 4321 	rsb	r3, r3, r1, asr #16
   29e6c:	eb03 4315 	add.w	r3, r3, r5, lsr #16
   29e70:	b289      	uxth	r1, r1
   29e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   29e76:	4567      	cmp	r7, ip
   29e78:	f840 1b04 	str.w	r1, [r0], #4
   29e7c:	ea4f 421b 	mov.w	r2, fp, lsr #16
   29e80:	ea4f 4323 	mov.w	r3, r3, asr #16
   29e84:	d2de      	bcs.n	29e44 <quorem+0x48>
   29e86:	e9dd 1500 	ldrd	r1, r5, [sp]
   29e8a:	f858 3001 	ldr.w	r3, [r8, r1]
   29e8e:	b973      	cbnz	r3, 29eae <quorem+0xb2>
   29e90:	f1aa 0a04 	sub.w	sl, sl, #4
   29e94:	45d0      	cmp	r8, sl
   29e96:	d304      	bcc.n	29ea2 <quorem+0xa6>
   29e98:	e007      	b.n	29eaa <quorem+0xae>
   29e9a:	45d0      	cmp	r8, sl
   29e9c:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
   29ea0:	d203      	bcs.n	29eaa <quorem+0xae>
   29ea2:	f85a 3904 	ldr.w	r3, [sl], #-4
   29ea6:	2b00      	cmp	r3, #0
   29ea8:	d0f7      	beq.n	29e9a <quorem+0x9e>
   29eaa:	f8c9 4010 	str.w	r4, [r9, #16]
   29eae:	4671      	mov	r1, lr
   29eb0:	4648      	mov	r0, r9
   29eb2:	f001 fa91 	bl	2b3d8 <__mcmp>
   29eb6:	2800      	cmp	r0, #0
   29eb8:	db2e      	blt.n	29f18 <quorem+0x11c>
   29eba:	4641      	mov	r1, r8
   29ebc:	2200      	movs	r2, #0
   29ebe:	f855 0b04 	ldr.w	r0, [r5], #4
   29ec2:	f8d1 c000 	ldr.w	ip, [r1]
   29ec6:	fa1f fe80 	uxth.w	lr, r0
   29eca:	fa1f f38c 	uxth.w	r3, ip
   29ece:	eba3 030e 	sub.w	r3, r3, lr
   29ed2:	4413      	add	r3, r2
   29ed4:	0c02      	lsrs	r2, r0, #16
   29ed6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
   29eda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
   29ede:	b29b      	uxth	r3, r3
   29ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   29ee4:	42af      	cmp	r7, r5
   29ee6:	f841 3b04 	str.w	r3, [r1], #4
   29eea:	ea4f 4222 	mov.w	r2, r2, asr #16
   29eee:	d2e6      	bcs.n	29ebe <quorem+0xc2>
   29ef0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   29ef4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   29ef8:	b96a      	cbnz	r2, 29f16 <quorem+0x11a>
   29efa:	3b04      	subs	r3, #4
   29efc:	4543      	cmp	r3, r8
   29efe:	d804      	bhi.n	29f0a <quorem+0x10e>
   29f00:	e007      	b.n	29f12 <quorem+0x116>
   29f02:	4598      	cmp	r8, r3
   29f04:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
   29f08:	d203      	bcs.n	29f12 <quorem+0x116>
   29f0a:	f853 2904 	ldr.w	r2, [r3], #-4
   29f0e:	2a00      	cmp	r2, #0
   29f10:	d0f7      	beq.n	29f02 <quorem+0x106>
   29f12:	f8c9 4010 	str.w	r4, [r9, #16]
   29f16:	3601      	adds	r6, #1
   29f18:	4630      	mov	r0, r6
   29f1a:	b003      	add	sp, #12
   29f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f20:	2000      	movs	r0, #0
   29f22:	b003      	add	sp, #12
   29f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029f28 <_dtoa_r>:
   29f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29f2c:	b09d      	sub	sp, #116	@ 0x74
   29f2e:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
   29f32:	9102      	str	r1, [sp, #8]
   29f34:	6b81      	ldr	r1, [r0, #56]	@ 0x38
   29f36:	9d26      	ldr	r5, [sp, #152]	@ 0x98
   29f38:	9004      	str	r0, [sp, #16]
   29f3a:	ed8d 0b06 	vstr	d0, [sp, #24]
   29f3e:	ec57 6b10 	vmov	r6, r7, d0
   29f42:	b149      	cbz	r1, 29f58 <_dtoa_r+0x30>
   29f44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
   29f46:	604a      	str	r2, [r1, #4]
   29f48:	2301      	movs	r3, #1
   29f4a:	4093      	lsls	r3, r2
   29f4c:	4604      	mov	r4, r0
   29f4e:	608b      	str	r3, [r1, #8]
   29f50:	f000 ffe0 	bl	2af14 <_Bfree>
   29f54:	2300      	movs	r3, #0
   29f56:	63a3      	str	r3, [r4, #56]	@ 0x38
   29f58:	f1b7 0900 	subs.w	r9, r7, #0
   29f5c:	bfb4      	ite	lt
   29f5e:	2301      	movlt	r3, #1
   29f60:	2300      	movge	r3, #0
   29f62:	602b      	str	r3, [r5, #0]
   29f64:	4b76      	ldr	r3, [pc, #472]	@ (2a140 <_dtoa_r+0x218>)
   29f66:	bfbc      	itt	lt
   29f68:	f029 4900 	biclt.w	r9, r9, #2147483648	@ 0x80000000
   29f6c:	f8cd 901c 	strlt.w	r9, [sp, #28]
   29f70:	ea33 0309 	bics.w	r3, r3, r9
   29f74:	f000 80aa 	beq.w	2a0cc <_dtoa_r+0x1a4>
   29f78:	ed9d 7b06 	vldr	d7, [sp, #24]
   29f7c:	2200      	movs	r2, #0
   29f7e:	ec51 0b17 	vmov	r0, r1, d7
   29f82:	2300      	movs	r3, #0
   29f84:	ed8d 7b00 	vstr	d7, [sp]
   29f88:	f7ef f82a 	bl	18fe0 <__aeabi_dcmpeq>
   29f8c:	4680      	mov	r8, r0
   29f8e:	b168      	cbz	r0, 29fac <_dtoa_r+0x84>
   29f90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   29f92:	2301      	movs	r3, #1
   29f94:	6013      	str	r3, [r2, #0]
   29f96:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   29f98:	b113      	cbz	r3, 29fa0 <_dtoa_r+0x78>
   29f9a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   29f9c:	4b69      	ldr	r3, [pc, #420]	@ (2a144 <_dtoa_r+0x21c>)
   29f9e:	6013      	str	r3, [r2, #0]
   29fa0:	4b69      	ldr	r3, [pc, #420]	@ (2a148 <_dtoa_r+0x220>)
   29fa2:	9305      	str	r3, [sp, #20]
   29fa4:	9805      	ldr	r0, [sp, #20]
   29fa6:	b01d      	add	sp, #116	@ 0x74
   29fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29fac:	ed9d 0b00 	vldr	d0, [sp]
   29fb0:	9804      	ldr	r0, [sp, #16]
   29fb2:	aa1a      	add	r2, sp, #104	@ 0x68
   29fb4:	a91b      	add	r1, sp, #108	@ 0x6c
   29fb6:	f001 faed 	bl	2b594 <__d2b>
   29fba:	ea5f 5519 	movs.w	r5, r9, lsr #20
   29fbe:	4682      	mov	sl, r0
   29fc0:	f040 809a 	bne.w	2a0f8 <_dtoa_r+0x1d0>
   29fc4:	e9dd 851a 	ldrd	r8, r5, [sp, #104]	@ 0x68
   29fc8:	4445      	add	r5, r8
   29fca:	f205 4332 	addw	r3, r5, #1074	@ 0x432
   29fce:	2b20      	cmp	r3, #32
   29fd0:	f340 838a 	ble.w	2a6e8 <_dtoa_r+0x7c0>
   29fd4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
   29fd8:	fa09 f903 	lsl.w	r9, r9, r3
   29fdc:	f205 4312 	addw	r3, r5, #1042	@ 0x412
   29fe0:	fa26 f303 	lsr.w	r3, r6, r3
   29fe4:	ea49 0003 	orr.w	r0, r9, r3
   29fe8:	f7ee fd18 	bl	18a1c <__aeabi_ui2d>
   29fec:	2301      	movs	r3, #1
   29fee:	3d01      	subs	r5, #1
   29ff0:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
   29ff4:	9312      	str	r3, [sp, #72]	@ 0x48
   29ff6:	4b55      	ldr	r3, [pc, #340]	@ (2a14c <_dtoa_r+0x224>)
   29ff8:	2200      	movs	r2, #0
   29ffa:	f7ee fbd1 	bl	187a0 <__aeabi_dsub>
   29ffe:	a34a      	add	r3, pc, #296	@ (adr r3, 2a128 <_dtoa_r+0x200>)
   2a000:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a004:	f7ee fd84 	bl	18b10 <__aeabi_dmul>
   2a008:	a349      	add	r3, pc, #292	@ (adr r3, 2a130 <_dtoa_r+0x208>)
   2a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a00e:	f7ee fbc9 	bl	187a4 <__adddf3>
   2a012:	4606      	mov	r6, r0
   2a014:	4628      	mov	r0, r5
   2a016:	460f      	mov	r7, r1
   2a018:	f7ee fd10 	bl	18a3c <__aeabi_i2d>
   2a01c:	a346      	add	r3, pc, #280	@ (adr r3, 2a138 <_dtoa_r+0x210>)
   2a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a022:	f7ee fd75 	bl	18b10 <__aeabi_dmul>
   2a026:	4602      	mov	r2, r0
   2a028:	460b      	mov	r3, r1
   2a02a:	4630      	mov	r0, r6
   2a02c:	4639      	mov	r1, r7
   2a02e:	f7ee fbb9 	bl	187a4 <__adddf3>
   2a032:	4606      	mov	r6, r0
   2a034:	460f      	mov	r7, r1
   2a036:	f7ef f81b 	bl	19070 <__aeabi_d2iz>
   2a03a:	2200      	movs	r2, #0
   2a03c:	4604      	mov	r4, r0
   2a03e:	9009      	str	r0, [sp, #36]	@ 0x24
   2a040:	2300      	movs	r3, #0
   2a042:	4630      	mov	r0, r6
   2a044:	4639      	mov	r1, r7
   2a046:	f7ee ffd5 	bl	18ff4 <__aeabi_dcmplt>
   2a04a:	2800      	cmp	r0, #0
   2a04c:	f040 8322 	bne.w	2a694 <_dtoa_r+0x76c>
   2a050:	9c09      	ldr	r4, [sp, #36]	@ 0x24
   2a052:	eba8 0805 	sub.w	r8, r8, r5
   2a056:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
   2a05a:	2c16      	cmp	r4, #22
   2a05c:	9308      	str	r3, [sp, #32]
   2a05e:	f200 818a 	bhi.w	2a376 <_dtoa_r+0x44e>
   2a062:	4b3b      	ldr	r3, [pc, #236]	@ (2a150 <_dtoa_r+0x228>)
   2a064:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2a068:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a06c:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a070:	f7ee ffc0 	bl	18ff4 <__aeabi_dcmplt>
   2a074:	2800      	cmp	r0, #0
   2a076:	d071      	beq.n	2a15c <_dtoa_r+0x234>
   2a078:	1e63      	subs	r3, r4, #1
   2a07a:	9309      	str	r3, [sp, #36]	@ 0x24
   2a07c:	2300      	movs	r3, #0
   2a07e:	9311      	str	r3, [sp, #68]	@ 0x44
   2a080:	9b08      	ldr	r3, [sp, #32]
   2a082:	2b00      	cmp	r3, #0
   2a084:	f2c0 817d 	blt.w	2a382 <_dtoa_r+0x45a>
   2a088:	2300      	movs	r3, #0
   2a08a:	930c      	str	r3, [sp, #48]	@ 0x30
   2a08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2a08e:	2b00      	cmp	r3, #0
   2a090:	da6a      	bge.n	2a168 <_dtoa_r+0x240>
   2a092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2a094:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   2a096:	930d      	str	r3, [sp, #52]	@ 0x34
   2a098:	1ad2      	subs	r2, r2, r3
   2a09a:	920c      	str	r2, [sp, #48]	@ 0x30
   2a09c:	425a      	negs	r2, r3
   2a09e:	2300      	movs	r3, #0
   2a0a0:	9309      	str	r3, [sp, #36]	@ 0x24
   2a0a2:	9b02      	ldr	r3, [sp, #8]
   2a0a4:	9210      	str	r2, [sp, #64]	@ 0x40
   2a0a6:	2b09      	cmp	r3, #9
   2a0a8:	d868      	bhi.n	2a17c <_dtoa_r+0x254>
   2a0aa:	2b05      	cmp	r3, #5
   2a0ac:	f340 8321 	ble.w	2a6f2 <_dtoa_r+0x7ca>
   2a0b0:	3b04      	subs	r3, #4
   2a0b2:	9302      	str	r3, [sp, #8]
   2a0b4:	2500      	movs	r5, #0
   2a0b6:	9b02      	ldr	r3, [sp, #8]
   2a0b8:	3b02      	subs	r3, #2
   2a0ba:	2b03      	cmp	r3, #3
   2a0bc:	f200 8636 	bhi.w	2ad2c <_dtoa_r+0xe04>
   2a0c0:	e8df f013 	tbh	[pc, r3, lsl #1]
   2a0c4:	046b046e 	.word	0x046b046e
   2a0c8:	04470463 	.word	0x04470463
   2a0cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
   2a0ce:	f3c9 0913 	ubfx	r9, r9, #0, #20
   2a0d2:	f242 730f 	movw	r3, #9999	@ 0x270f
   2a0d6:	ea59 0906 	orrs.w	r9, r9, r6
   2a0da:	6013      	str	r3, [r2, #0]
   2a0dc:	d11c      	bne.n	2a118 <_dtoa_r+0x1f0>
   2a0de:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   2a0e0:	2b00      	cmp	r3, #0
   2a0e2:	f000 8643 	beq.w	2ad6c <_dtoa_r+0xe44>
   2a0e6:	4b1b      	ldr	r3, [pc, #108]	@ (2a154 <_dtoa_r+0x22c>)
   2a0e8:	9305      	str	r3, [sp, #20]
   2a0ea:	3308      	adds	r3, #8
   2a0ec:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
   2a0ee:	9805      	ldr	r0, [sp, #20]
   2a0f0:	6013      	str	r3, [r2, #0]
   2a0f2:	b01d      	add	sp, #116	@ 0x74
   2a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0f8:	e9dd 1200 	ldrd	r1, r2, [sp]
   2a0fc:	f3c2 0313 	ubfx	r3, r2, #0, #20
   2a100:	4608      	mov	r0, r1
   2a102:	f043 517f 	orr.w	r1, r3, #1069547520	@ 0x3fc00000
   2a106:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
   2a10a:	f2a5 35ff 	subw	r5, r5, #1023	@ 0x3ff
   2a10e:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
   2a112:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
   2a116:	e76e      	b.n	29ff6 <_dtoa_r+0xce>
   2a118:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   2a11a:	2b00      	cmp	r3, #0
   2a11c:	f040 83f4 	bne.w	2a908 <_dtoa_r+0x9e0>
   2a120:	4b0d      	ldr	r3, [pc, #52]	@ (2a158 <_dtoa_r+0x230>)
   2a122:	9305      	str	r3, [sp, #20]
   2a124:	e73e      	b.n	29fa4 <_dtoa_r+0x7c>
   2a126:	bf00      	nop
   2a128:	636f4361 	.word	0x636f4361
   2a12c:	3fd287a7 	.word	0x3fd287a7
   2a130:	8b60c8b3 	.word	0x8b60c8b3
   2a134:	3fc68a28 	.word	0x3fc68a28
   2a138:	509f79fb 	.word	0x509f79fb
   2a13c:	3fd34413 	.word	0x3fd34413
   2a140:	7ff00000 	.word	0x7ff00000
   2a144:	0003f841 	.word	0x0003f841
   2a148:	0003f840 	.word	0x0003f840
   2a14c:	3ff80000 	.word	0x3ff80000
   2a150:	000474b8 	.word	0x000474b8
   2a154:	0003fb14 	.word	0x0003fb14
   2a158:	0003fb20 	.word	0x0003fb20
   2a15c:	f1b8 0f00 	cmp.w	r8, #0
   2a160:	f340 84a3 	ble.w	2aaaa <_dtoa_r+0xb82>
   2a164:	9011      	str	r0, [sp, #68]	@ 0x44
   2a166:	900c      	str	r0, [sp, #48]	@ 0x30
   2a168:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   2a16c:	4413      	add	r3, r2
   2a16e:	9308      	str	r3, [sp, #32]
   2a170:	2300      	movs	r3, #0
   2a172:	9310      	str	r3, [sp, #64]	@ 0x40
   2a174:	9b02      	ldr	r3, [sp, #8]
   2a176:	920d      	str	r2, [sp, #52]	@ 0x34
   2a178:	2b09      	cmp	r3, #9
   2a17a:	d996      	bls.n	2a0aa <_dtoa_r+0x182>
   2a17c:	2300      	movs	r3, #0
   2a17e:	2501      	movs	r5, #1
   2a180:	9302      	str	r3, [sp, #8]
   2a182:	950e      	str	r5, [sp, #56]	@ 0x38
   2a184:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
   2a188:	930b      	str	r3, [sp, #44]	@ 0x2c
   2a18a:	9b04      	ldr	r3, [sp, #16]
   2a18c:	f8cd b04c 	str.w	fp, [sp, #76]	@ 0x4c
   2a190:	2100      	movs	r1, #0
   2a192:	63d9      	str	r1, [r3, #60]	@ 0x3c
   2a194:	9804      	ldr	r0, [sp, #16]
   2a196:	f000 fe97 	bl	2aec8 <_Balloc>
   2a19a:	9005      	str	r0, [sp, #20]
   2a19c:	2800      	cmp	r0, #0
   2a19e:	f000 85ce 	beq.w	2ad3e <_dtoa_r+0xe16>
   2a1a2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   2a1a6:	f1bb 0f0e 	cmp.w	fp, #14
   2a1aa:	639a      	str	r2, [r3, #56]	@ 0x38
   2a1ac:	f200 8118 	bhi.w	2a3e0 <_dtoa_r+0x4b8>
   2a1b0:	2d00      	cmp	r5, #0
   2a1b2:	f000 8115 	beq.w	2a3e0 <_dtoa_r+0x4b8>
   2a1b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
   2a1b8:	2900      	cmp	r1, #0
   2a1ba:	f340 8446 	ble.w	2aa4a <_dtoa_r+0xb22>
   2a1be:	4bb3      	ldr	r3, [pc, #716]	@ (2a48c <_dtoa_r+0x564>)
   2a1c0:	f001 020f 	and.w	r2, r1, #15
   2a1c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2a1c8:	05c8      	lsls	r0, r1, #23
   2a1ca:	e9d3 8900 	ldrd	r8, r9, [r3]
   2a1ce:	ea4f 1521 	mov.w	r5, r1, asr #4
   2a1d2:	f140 8408 	bpl.w	2a9e6 <_dtoa_r+0xabe>
   2a1d6:	4bae      	ldr	r3, [pc, #696]	@ (2a490 <_dtoa_r+0x568>)
   2a1d8:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a1dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2a1e0:	f7ee fdc0 	bl	18d64 <__aeabi_ddiv>
   2a1e4:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   2a1e8:	f005 050f 	and.w	r5, r5, #15
   2a1ec:	2703      	movs	r7, #3
   2a1ee:	b17d      	cbz	r5, 2a210 <_dtoa_r+0x2e8>
   2a1f0:	4ea7      	ldr	r6, [pc, #668]	@ (2a490 <_dtoa_r+0x568>)
   2a1f2:	07e9      	lsls	r1, r5, #31
   2a1f4:	d508      	bpl.n	2a208 <_dtoa_r+0x2e0>
   2a1f6:	4640      	mov	r0, r8
   2a1f8:	4649      	mov	r1, r9
   2a1fa:	e9d6 2300 	ldrd	r2, r3, [r6]
   2a1fe:	f7ee fc87 	bl	18b10 <__aeabi_dmul>
   2a202:	3701      	adds	r7, #1
   2a204:	4680      	mov	r8, r0
   2a206:	4689      	mov	r9, r1
   2a208:	106d      	asrs	r5, r5, #1
   2a20a:	f106 0608 	add.w	r6, r6, #8
   2a20e:	d1f0      	bne.n	2a1f2 <_dtoa_r+0x2ca>
   2a210:	4642      	mov	r2, r8
   2a212:	464b      	mov	r3, r9
   2a214:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
   2a218:	f7ee fda4 	bl	18d64 <__aeabi_ddiv>
   2a21c:	4680      	mov	r8, r0
   2a21e:	4689      	mov	r9, r1
   2a220:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   2a222:	b143      	cbz	r3, 2a236 <_dtoa_r+0x30e>
   2a224:	4b9b      	ldr	r3, [pc, #620]	@ (2a494 <_dtoa_r+0x56c>)
   2a226:	2200      	movs	r2, #0
   2a228:	4640      	mov	r0, r8
   2a22a:	4649      	mov	r1, r9
   2a22c:	f7ee fee2 	bl	18ff4 <__aeabi_dcmplt>
   2a230:	2800      	cmp	r0, #0
   2a232:	f040 850b 	bne.w	2ac4c <_dtoa_r+0xd24>
   2a236:	4638      	mov	r0, r7
   2a238:	f7ee fc00 	bl	18a3c <__aeabi_i2d>
   2a23c:	4642      	mov	r2, r8
   2a23e:	464b      	mov	r3, r9
   2a240:	f7ee fc66 	bl	18b10 <__aeabi_dmul>
   2a244:	4b94      	ldr	r3, [pc, #592]	@ (2a498 <_dtoa_r+0x570>)
   2a246:	2200      	movs	r2, #0
   2a248:	f7ee faac 	bl	187a4 <__adddf3>
   2a24c:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
   2a250:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   2a254:	9315      	str	r3, [sp, #84]	@ 0x54
   2a256:	f1bb 0f00 	cmp.w	fp, #0
   2a25a:	f000 80a8 	beq.w	2a3ae <_dtoa_r+0x486>
   2a25e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2a260:	e9cd b318 	strd	fp, r3, [sp, #96]	@ 0x60
   2a264:	4649      	mov	r1, r9
   2a266:	4640      	mov	r0, r8
   2a268:	f7ee ff02 	bl	19070 <__aeabi_d2iz>
   2a26c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
   2a26e:	4b87      	ldr	r3, [pc, #540]	@ (2a48c <_dtoa_r+0x564>)
   2a270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2a274:	ed13 7b02 	vldr	d7, [r3, #-8]
   2a278:	4605      	mov	r5, r0
   2a27a:	ed8d 7b16 	vstr	d7, [sp, #88]	@ 0x58
   2a27e:	f7ee fbdd 	bl	18a3c <__aeabi_i2d>
   2a282:	460b      	mov	r3, r1
   2a284:	4602      	mov	r2, r0
   2a286:	4649      	mov	r1, r9
   2a288:	4640      	mov	r0, r8
   2a28a:	f7ee fa89 	bl	187a0 <__aeabi_dsub>
   2a28e:	9f05      	ldr	r7, [sp, #20]
   2a290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2a292:	3530      	adds	r5, #48	@ 0x30
   2a294:	1c7e      	adds	r6, r7, #1
   2a296:	b2ec      	uxtb	r4, r5
   2a298:	4680      	mov	r8, r0
   2a29a:	4689      	mov	r9, r1
   2a29c:	4635      	mov	r5, r6
   2a29e:	2b00      	cmp	r3, #0
   2a2a0:	f000 846c 	beq.w	2ab7c <_dtoa_r+0xc54>
   2a2a4:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
   2a2a8:	497c      	ldr	r1, [pc, #496]	@ (2a49c <_dtoa_r+0x574>)
   2a2aa:	2000      	movs	r0, #0
   2a2ac:	f7ee fd5a 	bl	18d64 <__aeabi_ddiv>
   2a2b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
   2a2b4:	f7ee fa74 	bl	187a0 <__aeabi_dsub>
   2a2b8:	703c      	strb	r4, [r7, #0]
   2a2ba:	4642      	mov	r2, r8
   2a2bc:	464b      	mov	r3, r9
   2a2be:	4604      	mov	r4, r0
   2a2c0:	460d      	mov	r5, r1
   2a2c2:	f7ee feb5 	bl	19030 <__aeabi_dcmpgt>
   2a2c6:	2800      	cmp	r0, #0
   2a2c8:	f040 84b8 	bne.w	2ac3c <_dtoa_r+0xd14>
   2a2cc:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
   2a2d0:	f8cd b058 	str.w	fp, [sp, #88]	@ 0x58
   2a2d4:	2700      	movs	r7, #0
   2a2d6:	46ab      	mov	fp, r5
   2a2d8:	46a2      	mov	sl, r4
   2a2da:	9d18      	ldr	r5, [sp, #96]	@ 0x60
   2a2dc:	e02a      	b.n	2a334 <_dtoa_r+0x40c>
   2a2de:	3701      	adds	r7, #1
   2a2e0:	42af      	cmp	r7, r5
   2a2e2:	f280 84fd 	bge.w	2ace0 <_dtoa_r+0xdb8>
   2a2e6:	4b6e      	ldr	r3, [pc, #440]	@ (2a4a0 <_dtoa_r+0x578>)
   2a2e8:	4650      	mov	r0, sl
   2a2ea:	4659      	mov	r1, fp
   2a2ec:	2200      	movs	r2, #0
   2a2ee:	f7ee fc0f 	bl	18b10 <__aeabi_dmul>
   2a2f2:	4b6b      	ldr	r3, [pc, #428]	@ (2a4a0 <_dtoa_r+0x578>)
   2a2f4:	2200      	movs	r2, #0
   2a2f6:	4682      	mov	sl, r0
   2a2f8:	468b      	mov	fp, r1
   2a2fa:	4640      	mov	r0, r8
   2a2fc:	4649      	mov	r1, r9
   2a2fe:	f7ee fc07 	bl	18b10 <__aeabi_dmul>
   2a302:	4689      	mov	r9, r1
   2a304:	4680      	mov	r8, r0
   2a306:	f7ee feb3 	bl	19070 <__aeabi_d2iz>
   2a30a:	4604      	mov	r4, r0
   2a30c:	f7ee fb96 	bl	18a3c <__aeabi_i2d>
   2a310:	4602      	mov	r2, r0
   2a312:	460b      	mov	r3, r1
   2a314:	4640      	mov	r0, r8
   2a316:	4649      	mov	r1, r9
   2a318:	f7ee fa42 	bl	187a0 <__aeabi_dsub>
   2a31c:	3430      	adds	r4, #48	@ 0x30
   2a31e:	f806 4b01 	strb.w	r4, [r6], #1
   2a322:	4652      	mov	r2, sl
   2a324:	465b      	mov	r3, fp
   2a326:	4680      	mov	r8, r0
   2a328:	4689      	mov	r9, r1
   2a32a:	f7ee fe63 	bl	18ff4 <__aeabi_dcmplt>
   2a32e:	2800      	cmp	r0, #0
   2a330:	f040 84d3 	bne.w	2acda <_dtoa_r+0xdb2>
   2a334:	4642      	mov	r2, r8
   2a336:	464b      	mov	r3, r9
   2a338:	4956      	ldr	r1, [pc, #344]	@ (2a494 <_dtoa_r+0x56c>)
   2a33a:	2000      	movs	r0, #0
   2a33c:	f7ee fa30 	bl	187a0 <__aeabi_dsub>
   2a340:	4652      	mov	r2, sl
   2a342:	465b      	mov	r3, fp
   2a344:	f7ee fe56 	bl	18ff4 <__aeabi_dcmplt>
   2a348:	2800      	cmp	r0, #0
   2a34a:	d0c8      	beq.n	2a2de <_dtoa_r+0x3b6>
   2a34c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   2a34e:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
   2a352:	9a05      	ldr	r2, [sp, #20]
   2a354:	4637      	mov	r7, r6
   2a356:	f103 0801 	add.w	r8, r3, #1
   2a35a:	e002      	b.n	2a362 <_dtoa_r+0x43a>
   2a35c:	4297      	cmp	r7, r2
   2a35e:	f000 849b 	beq.w	2ac98 <_dtoa_r+0xd70>
   2a362:	463e      	mov	r6, r7
   2a364:	f817 3d01 	ldrb.w	r3, [r7, #-1]!
   2a368:	2b39      	cmp	r3, #57	@ 0x39
   2a36a:	d0f7      	beq.n	2a35c <_dtoa_r+0x434>
   2a36c:	3301      	adds	r3, #1
   2a36e:	b2db      	uxtb	r3, r3
   2a370:	703b      	strb	r3, [r7, #0]
   2a372:	4645      	mov	r5, r8
   2a374:	e17d      	b.n	2a672 <_dtoa_r+0x74a>
   2a376:	2301      	movs	r3, #1
   2a378:	9311      	str	r3, [sp, #68]	@ 0x44
   2a37a:	9b08      	ldr	r3, [sp, #32]
   2a37c:	2b00      	cmp	r3, #0
   2a37e:	f6bf ae83 	bge.w	2a088 <_dtoa_r+0x160>
   2a382:	f1c8 0301 	rsb	r3, r8, #1
   2a386:	930c      	str	r3, [sp, #48]	@ 0x30
   2a388:	2300      	movs	r3, #0
   2a38a:	9308      	str	r3, [sp, #32]
   2a38c:	e67e      	b.n	2a08c <_dtoa_r+0x164>
   2a38e:	4638      	mov	r0, r7
   2a390:	f7ee fb54 	bl	18a3c <__aeabi_i2d>
   2a394:	4642      	mov	r2, r8
   2a396:	464b      	mov	r3, r9
   2a398:	f7ee fbba 	bl	18b10 <__aeabi_dmul>
   2a39c:	4b3e      	ldr	r3, [pc, #248]	@ (2a498 <_dtoa_r+0x570>)
   2a39e:	2200      	movs	r2, #0
   2a3a0:	f7ee fa00 	bl	187a4 <__adddf3>
   2a3a4:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
   2a3a8:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   2a3ac:	9315      	str	r3, [sp, #84]	@ 0x54
   2a3ae:	4b3d      	ldr	r3, [pc, #244]	@ (2a4a4 <_dtoa_r+0x57c>)
   2a3b0:	2200      	movs	r2, #0
   2a3b2:	4640      	mov	r0, r8
   2a3b4:	4649      	mov	r1, r9
   2a3b6:	f7ee f9f3 	bl	187a0 <__aeabi_dsub>
   2a3ba:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	@ 0x50
   2a3be:	4622      	mov	r2, r4
   2a3c0:	462b      	mov	r3, r5
   2a3c2:	4606      	mov	r6, r0
   2a3c4:	460f      	mov	r7, r1
   2a3c6:	f7ee fe33 	bl	19030 <__aeabi_dcmpgt>
   2a3ca:	2800      	cmp	r0, #0
   2a3cc:	f040 8473 	bne.w	2acb6 <_dtoa_r+0xd8e>
   2a3d0:	4630      	mov	r0, r6
   2a3d2:	4639      	mov	r1, r7
   2a3d4:	4622      	mov	r2, r4
   2a3d6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
   2a3da:	f7ee fe0b 	bl	18ff4 <__aeabi_dcmplt>
   2a3de:	bb28      	cbnz	r0, 2a42c <_dtoa_r+0x504>
   2a3e0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   2a3e2:	2b00      	cmp	r3, #0
   2a3e4:	f2c0 8090 	blt.w	2a508 <_dtoa_r+0x5e0>
   2a3e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2a3ea:	2a0e      	cmp	r2, #14
   2a3ec:	f300 808c 	bgt.w	2a508 <_dtoa_r+0x5e0>
   2a3f0:	4b26      	ldr	r3, [pc, #152]	@ (2a48c <_dtoa_r+0x564>)
   2a3f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2a3f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2a3f8:	ed93 7b00 	vldr	d7, [r3]
   2a3fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2a3fe:	2b00      	cmp	r3, #0
   2a400:	ed8d 7b02 	vstr	d7, [sp, #8]
   2a404:	da19      	bge.n	2a43a <_dtoa_r+0x512>
   2a406:	f1bb 0f00 	cmp.w	fp, #0
   2a40a:	dc16      	bgt.n	2a43a <_dtoa_r+0x512>
   2a40c:	d10e      	bne.n	2a42c <_dtoa_r+0x504>
   2a40e:	4b25      	ldr	r3, [pc, #148]	@ (2a4a4 <_dtoa_r+0x57c>)
   2a410:	2200      	movs	r2, #0
   2a412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2a416:	f7ee fb7b 	bl	18b10 <__aeabi_dmul>
   2a41a:	4602      	mov	r2, r0
   2a41c:	460b      	mov	r3, r1
   2a41e:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a422:	f7ee fdf1 	bl	19008 <__aeabi_dcmple>
   2a426:	2800      	cmp	r0, #0
   2a428:	f000 8445 	beq.w	2acb6 <_dtoa_r+0xd8e>
   2a42c:	2300      	movs	r3, #0
   2a42e:	9e05      	ldr	r6, [sp, #20]
   2a430:	9300      	str	r3, [sp, #0]
   2a432:	461f      	mov	r7, r3
   2a434:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2a436:	43dd      	mvns	r5, r3
   2a438:	e22d      	b.n	2a896 <_dtoa_r+0x96e>
   2a43a:	9b05      	ldr	r3, [sp, #20]
   2a43c:	1c5d      	adds	r5, r3, #1
   2a43e:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
   2a442:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a446:	463a      	mov	r2, r7
   2a448:	4643      	mov	r3, r8
   2a44a:	f7ee fc8b 	bl	18d64 <__aeabi_ddiv>
   2a44e:	f7ee fe0f 	bl	19070 <__aeabi_d2iz>
   2a452:	4606      	mov	r6, r0
   2a454:	f7ee faf2 	bl	18a3c <__aeabi_i2d>
   2a458:	463a      	mov	r2, r7
   2a45a:	4643      	mov	r3, r8
   2a45c:	f7ee fb58 	bl	18b10 <__aeabi_dmul>
   2a460:	4602      	mov	r2, r0
   2a462:	460b      	mov	r3, r1
   2a464:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a468:	f7ee f99a 	bl	187a0 <__aeabi_dsub>
   2a46c:	9a05      	ldr	r2, [sp, #20]
   2a46e:	f106 0330 	add.w	r3, r6, #48	@ 0x30
   2a472:	f1bb 0f01 	cmp.w	fp, #1
   2a476:	462f      	mov	r7, r5
   2a478:	7013      	strb	r3, [r2, #0]
   2a47a:	f000 8321 	beq.w	2aac0 <_dtoa_r+0xb98>
   2a47e:	2501      	movs	r5, #1
   2a480:	f8cd a000 	str.w	sl, [sp]
   2a484:	46a8      	mov	r8, r5
   2a486:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
   2a48a:	e02b      	b.n	2a4e4 <_dtoa_r+0x5bc>
   2a48c:	000474b8 	.word	0x000474b8
   2a490:	00047490 	.word	0x00047490
   2a494:	3ff00000 	.word	0x3ff00000
   2a498:	401c0000 	.word	0x401c0000
   2a49c:	3fe00000 	.word	0x3fe00000
   2a4a0:	40240000 	.word	0x40240000
   2a4a4:	40140000 	.word	0x40140000
   2a4a8:	464a      	mov	r2, r9
   2a4aa:	4653      	mov	r3, sl
   2a4ac:	4620      	mov	r0, r4
   2a4ae:	4629      	mov	r1, r5
   2a4b0:	f7ee fc58 	bl	18d64 <__aeabi_ddiv>
   2a4b4:	f7ee fddc 	bl	19070 <__aeabi_d2iz>
   2a4b8:	4606      	mov	r6, r0
   2a4ba:	f7ee fabf 	bl	18a3c <__aeabi_i2d>
   2a4be:	464a      	mov	r2, r9
   2a4c0:	4653      	mov	r3, sl
   2a4c2:	f7ee fb25 	bl	18b10 <__aeabi_dmul>
   2a4c6:	f108 0801 	add.w	r8, r8, #1
   2a4ca:	460b      	mov	r3, r1
   2a4cc:	4602      	mov	r2, r0
   2a4ce:	4629      	mov	r1, r5
   2a4d0:	4620      	mov	r0, r4
   2a4d2:	f7ee f965 	bl	187a0 <__aeabi_dsub>
   2a4d6:	f106 0330 	add.w	r3, r6, #48	@ 0x30
   2a4da:	45d8      	cmp	r8, fp
   2a4dc:	f807 3b01 	strb.w	r3, [r7], #1
   2a4e0:	f000 82ec 	beq.w	2aabc <_dtoa_r+0xb94>
   2a4e4:	4b84      	ldr	r3, [pc, #528]	@ (2a6f8 <_dtoa_r+0x7d0>)
   2a4e6:	2200      	movs	r2, #0
   2a4e8:	f7ee fb12 	bl	18b10 <__aeabi_dmul>
   2a4ec:	2200      	movs	r2, #0
   2a4ee:	2300      	movs	r3, #0
   2a4f0:	4604      	mov	r4, r0
   2a4f2:	460d      	mov	r5, r1
   2a4f4:	f7ee fd74 	bl	18fe0 <__aeabi_dcmpeq>
   2a4f8:	2800      	cmp	r0, #0
   2a4fa:	d0d5      	beq.n	2a4a8 <_dtoa_r+0x580>
   2a4fc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2a4fe:	f8dd a000 	ldr.w	sl, [sp]
   2a502:	3501      	adds	r5, #1
   2a504:	463e      	mov	r6, r7
   2a506:	e0b4      	b.n	2a672 <_dtoa_r+0x74a>
   2a508:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
   2a50a:	2a00      	cmp	r2, #0
   2a50c:	f040 80d8 	bne.w	2a6c0 <_dtoa_r+0x798>
   2a510:	2300      	movs	r3, #0
   2a512:	9e10      	ldr	r6, [sp, #64]	@ 0x40
   2a514:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
   2a516:	930e      	str	r3, [sp, #56]	@ 0x38
   2a518:	461f      	mov	r7, r3
   2a51a:	b165      	cbz	r5, 2a536 <_dtoa_r+0x60e>
   2a51c:	9a08      	ldr	r2, [sp, #32]
   2a51e:	2a00      	cmp	r2, #0
   2a520:	dd09      	ble.n	2a536 <_dtoa_r+0x60e>
   2a522:	990c      	ldr	r1, [sp, #48]	@ 0x30
   2a524:	42aa      	cmp	r2, r5
   2a526:	4613      	mov	r3, r2
   2a528:	bfa8      	it	ge
   2a52a:	462b      	movge	r3, r5
   2a52c:	1ac9      	subs	r1, r1, r3
   2a52e:	1aed      	subs	r5, r5, r3
   2a530:	1ad3      	subs	r3, r2, r3
   2a532:	910c      	str	r1, [sp, #48]	@ 0x30
   2a534:	9308      	str	r3, [sp, #32]
   2a536:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2a538:	b153      	cbz	r3, 2a550 <_dtoa_r+0x628>
   2a53a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2a53c:	b113      	cbz	r3, 2a544 <_dtoa_r+0x61c>
   2a53e:	2e00      	cmp	r6, #0
   2a540:	f040 82f7 	bne.w	2ab32 <_dtoa_r+0xc0a>
   2a544:	4651      	mov	r1, sl
   2a546:	9a10      	ldr	r2, [sp, #64]	@ 0x40
   2a548:	9804      	ldr	r0, [sp, #16]
   2a54a:	f000 fe73 	bl	2b234 <__pow5mult>
   2a54e:	4682      	mov	sl, r0
   2a550:	9804      	ldr	r0, [sp, #16]
   2a552:	2101      	movs	r1, #1
   2a554:	f000 fd8a 	bl	2b06c <__i2b>
   2a558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2a55a:	9000      	str	r0, [sp, #0]
   2a55c:	2b00      	cmp	r3, #0
   2a55e:	f040 81be 	bne.w	2a8de <_dtoa_r+0x9b6>
   2a562:	9b02      	ldr	r3, [sp, #8]
   2a564:	2b01      	cmp	r3, #1
   2a566:	f340 81d4 	ble.w	2a912 <_dtoa_r+0x9ea>
   2a56a:	2001      	movs	r0, #1
   2a56c:	9a08      	ldr	r2, [sp, #32]
   2a56e:	4410      	add	r0, r2
   2a570:	f010 001f 	ands.w	r0, r0, #31
   2a574:	f000 809b 	beq.w	2a6ae <_dtoa_r+0x786>
   2a578:	f1c0 0320 	rsb	r3, r0, #32
   2a57c:	2b04      	cmp	r3, #4
   2a57e:	f340 81e3 	ble.w	2a948 <_dtoa_r+0xa20>
   2a582:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a584:	f1c0 001c 	rsb	r0, r0, #28
   2a588:	4403      	add	r3, r0
   2a58a:	4402      	add	r2, r0
   2a58c:	930c      	str	r3, [sp, #48]	@ 0x30
   2a58e:	4405      	add	r5, r0
   2a590:	9208      	str	r2, [sp, #32]
   2a592:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a594:	2b00      	cmp	r3, #0
   2a596:	dd05      	ble.n	2a5a4 <_dtoa_r+0x67c>
   2a598:	4651      	mov	r1, sl
   2a59a:	9804      	ldr	r0, [sp, #16]
   2a59c:	461a      	mov	r2, r3
   2a59e:	f000 fea3 	bl	2b2e8 <__lshift>
   2a5a2:	4682      	mov	sl, r0
   2a5a4:	9b08      	ldr	r3, [sp, #32]
   2a5a6:	2b00      	cmp	r3, #0
   2a5a8:	dd05      	ble.n	2a5b6 <_dtoa_r+0x68e>
   2a5aa:	9900      	ldr	r1, [sp, #0]
   2a5ac:	9804      	ldr	r0, [sp, #16]
   2a5ae:	461a      	mov	r2, r3
   2a5b0:	f000 fe9a 	bl	2b2e8 <__lshift>
   2a5b4:	9000      	str	r0, [sp, #0]
   2a5b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
   2a5b8:	2b00      	cmp	r3, #0
   2a5ba:	f040 8175 	bne.w	2a8a8 <_dtoa_r+0x980>
   2a5be:	f1bb 0f00 	cmp.w	fp, #0
   2a5c2:	f340 814c 	ble.w	2a85e <_dtoa_r+0x936>
   2a5c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2a5c8:	2b00      	cmp	r3, #0
   2a5ca:	f040 80a4 	bne.w	2a716 <_dtoa_r+0x7ee>
   2a5ce:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2a5d0:	3501      	adds	r5, #1
   2a5d2:	f8dd 8014 	ldr.w	r8, [sp, #20]
   2a5d6:	9c00      	ldr	r4, [sp, #0]
   2a5d8:	f8dd 9010 	ldr.w	r9, [sp, #16]
   2a5dc:	2601      	movs	r6, #1
   2a5de:	e007      	b.n	2a5f0 <_dtoa_r+0x6c8>
   2a5e0:	4651      	mov	r1, sl
   2a5e2:	2300      	movs	r3, #0
   2a5e4:	220a      	movs	r2, #10
   2a5e6:	4648      	mov	r0, r9
   2a5e8:	f000 fc9e 	bl	2af28 <__multadd>
   2a5ec:	3601      	adds	r6, #1
   2a5ee:	4682      	mov	sl, r0
   2a5f0:	4621      	mov	r1, r4
   2a5f2:	4650      	mov	r0, sl
   2a5f4:	f7ff fc02 	bl	29dfc <quorem>
   2a5f8:	45b3      	cmp	fp, r6
   2a5fa:	f100 0030 	add.w	r0, r0, #48	@ 0x30
   2a5fe:	f808 0b01 	strb.w	r0, [r8], #1
   2a602:	dced      	bgt.n	2a5e0 <_dtoa_r+0x6b8>
   2a604:	f1bb 0f00 	cmp.w	fp, #0
   2a608:	9b05      	ldr	r3, [sp, #20]
   2a60a:	bfcc      	ite	gt
   2a60c:	465e      	movgt	r6, fp
   2a60e:	2601      	movle	r6, #1
   2a610:	4681      	mov	r9, r0
   2a612:	eb03 0b06 	add.w	fp, r3, r6
   2a616:	2400      	movs	r4, #0
   2a618:	4651      	mov	r1, sl
   2a61a:	2201      	movs	r2, #1
   2a61c:	9804      	ldr	r0, [sp, #16]
   2a61e:	f000 fe63 	bl	2b2e8 <__lshift>
   2a622:	9900      	ldr	r1, [sp, #0]
   2a624:	4682      	mov	sl, r0
   2a626:	f000 fed7 	bl	2b3d8 <__mcmp>
   2a62a:	2800      	cmp	r0, #0
   2a62c:	f340 81ee 	ble.w	2aa0c <_dtoa_r+0xae4>
   2a630:	9a05      	ldr	r2, [sp, #20]
   2a632:	e002      	b.n	2a63a <_dtoa_r+0x712>
   2a634:	4593      	cmp	fp, r2
   2a636:	f000 8203 	beq.w	2aa40 <_dtoa_r+0xb18>
   2a63a:	465e      	mov	r6, fp
   2a63c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
   2a640:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   2a644:	2b39      	cmp	r3, #57	@ 0x39
   2a646:	d0f5      	beq.n	2a634 <_dtoa_r+0x70c>
   2a648:	3301      	adds	r3, #1
   2a64a:	f88b 3000 	strb.w	r3, [fp]
   2a64e:	f8dd 8010 	ldr.w	r8, [sp, #16]
   2a652:	9900      	ldr	r1, [sp, #0]
   2a654:	4640      	mov	r0, r8
   2a656:	f000 fc5d 	bl	2af14 <_Bfree>
   2a65a:	b157      	cbz	r7, 2a672 <_dtoa_r+0x74a>
   2a65c:	b12c      	cbz	r4, 2a66a <_dtoa_r+0x742>
   2a65e:	42bc      	cmp	r4, r7
   2a660:	d003      	beq.n	2a66a <_dtoa_r+0x742>
   2a662:	4621      	mov	r1, r4
   2a664:	4640      	mov	r0, r8
   2a666:	f000 fc55 	bl	2af14 <_Bfree>
   2a66a:	9804      	ldr	r0, [sp, #16]
   2a66c:	4639      	mov	r1, r7
   2a66e:	f000 fc51 	bl	2af14 <_Bfree>
   2a672:	9804      	ldr	r0, [sp, #16]
   2a674:	4651      	mov	r1, sl
   2a676:	f000 fc4d 	bl	2af14 <_Bfree>
   2a67a:	2300      	movs	r3, #0
   2a67c:	7033      	strb	r3, [r6, #0]
   2a67e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   2a680:	601d      	str	r5, [r3, #0]
   2a682:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
   2a684:	2b00      	cmp	r3, #0
   2a686:	f43f ac8d 	beq.w	29fa4 <_dtoa_r+0x7c>
   2a68a:	9805      	ldr	r0, [sp, #20]
   2a68c:	601e      	str	r6, [r3, #0]
   2a68e:	b01d      	add	sp, #116	@ 0x74
   2a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a694:	4620      	mov	r0, r4
   2a696:	f7ee f9d1 	bl	18a3c <__aeabi_i2d>
   2a69a:	4632      	mov	r2, r6
   2a69c:	463b      	mov	r3, r7
   2a69e:	f7ee fc9f 	bl	18fe0 <__aeabi_dcmpeq>
   2a6a2:	2800      	cmp	r0, #0
   2a6a4:	f47f acd4 	bne.w	2a050 <_dtoa_r+0x128>
   2a6a8:	1e63      	subs	r3, r4, #1
   2a6aa:	9309      	str	r3, [sp, #36]	@ 0x24
   2a6ac:	e4d0      	b.n	2a050 <_dtoa_r+0x128>
   2a6ae:	231c      	movs	r3, #28
   2a6b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   2a6b2:	441a      	add	r2, r3
   2a6b4:	920c      	str	r2, [sp, #48]	@ 0x30
   2a6b6:	9a08      	ldr	r2, [sp, #32]
   2a6b8:	441a      	add	r2, r3
   2a6ba:	441d      	add	r5, r3
   2a6bc:	9208      	str	r2, [sp, #32]
   2a6be:	e768      	b.n	2a592 <_dtoa_r+0x66a>
   2a6c0:	9a02      	ldr	r2, [sp, #8]
   2a6c2:	2a01      	cmp	r2, #1
   2a6c4:	f340 81ad 	ble.w	2aa22 <_dtoa_r+0xafa>
   2a6c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2a6ca:	f10b 36ff 	add.w	r6, fp, #4294967295	@ 0xffffffff
   2a6ce:	42b3      	cmp	r3, r6
   2a6d0:	f2c0 8169 	blt.w	2a9a6 <_dtoa_r+0xa7e>
   2a6d4:	f1bb 0f00 	cmp.w	fp, #0
   2a6d8:	eba3 0606 	sub.w	r6, r3, r6
   2a6dc:	f280 82ef 	bge.w	2acbe <_dtoa_r+0xd96>
   2a6e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a6e2:	eba3 050b 	sub.w	r5, r3, fp
   2a6e6:	e16c      	b.n	2a9c2 <_dtoa_r+0xa9a>
   2a6e8:	f1c3 0320 	rsb	r3, r3, #32
   2a6ec:	fa06 f003 	lsl.w	r0, r6, r3
   2a6f0:	e47a      	b.n	29fe8 <_dtoa_r+0xc0>
   2a6f2:	2501      	movs	r5, #1
   2a6f4:	e4df      	b.n	2a0b6 <_dtoa_r+0x18e>
   2a6f6:	bf00      	nop
   2a6f8:	40240000 	.word	0x40240000
   2a6fc:	4639      	mov	r1, r7
   2a6fe:	2300      	movs	r3, #0
   2a700:	9804      	ldr	r0, [sp, #16]
   2a702:	220a      	movs	r2, #10
   2a704:	f000 fc10 	bl	2af28 <__multadd>
   2a708:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   2a70a:	2b00      	cmp	r3, #0
   2a70c:	4607      	mov	r7, r0
   2a70e:	f340 82ff 	ble.w	2ad10 <_dtoa_r+0xde8>
   2a712:	960d      	str	r6, [sp, #52]	@ 0x34
   2a714:	469b      	mov	fp, r3
   2a716:	2d00      	cmp	r5, #0
   2a718:	dd05      	ble.n	2a726 <_dtoa_r+0x7fe>
   2a71a:	4639      	mov	r1, r7
   2a71c:	9804      	ldr	r0, [sp, #16]
   2a71e:	462a      	mov	r2, r5
   2a720:	f000 fde2 	bl	2b2e8 <__lshift>
   2a724:	4607      	mov	r7, r0
   2a726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2a728:	2b00      	cmp	r3, #0
   2a72a:	f040 81e6 	bne.w	2aafa <_dtoa_r+0xbd2>
   2a72e:	46b8      	mov	r8, r7
   2a730:	9e05      	ldr	r6, [sp, #20]
   2a732:	1e73      	subs	r3, r6, #1
   2a734:	eb03 040b 	add.w	r4, r3, fp
   2a738:	9b06      	ldr	r3, [sp, #24]
   2a73a:	f003 0301 	and.w	r3, r3, #1
   2a73e:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
   2a742:	9c04      	ldr	r4, [sp, #16]
   2a744:	9900      	ldr	r1, [sp, #0]
   2a746:	4650      	mov	r0, sl
   2a748:	f7ff fb58 	bl	29dfc <quorem>
   2a74c:	4639      	mov	r1, r7
   2a74e:	4683      	mov	fp, r0
   2a750:	4650      	mov	r0, sl
   2a752:	f000 fe41 	bl	2b3d8 <__mcmp>
   2a756:	9900      	ldr	r1, [sp, #0]
   2a758:	4605      	mov	r5, r0
   2a75a:	4642      	mov	r2, r8
   2a75c:	4620      	mov	r0, r4
   2a75e:	f000 fe5d 	bl	2b41c <__mdiff>
   2a762:	68c3      	ldr	r3, [r0, #12]
   2a764:	f10b 0930 	add.w	r9, fp, #48	@ 0x30
   2a768:	4601      	mov	r1, r0
   2a76a:	bbab      	cbnz	r3, 2a7d8 <_dtoa_r+0x8b0>
   2a76c:	9009      	str	r0, [sp, #36]	@ 0x24
   2a76e:	4650      	mov	r0, sl
   2a770:	f000 fe32 	bl	2b3d8 <__mcmp>
   2a774:	9909      	ldr	r1, [sp, #36]	@ 0x24
   2a776:	9008      	str	r0, [sp, #32]
   2a778:	4620      	mov	r0, r4
   2a77a:	f000 fbcb 	bl	2af14 <_Bfree>
   2a77e:	9a08      	ldr	r2, [sp, #32]
   2a780:	2a00      	cmp	r2, #0
   2a782:	d154      	bne.n	2a82e <_dtoa_r+0x906>
   2a784:	9b02      	ldr	r3, [sp, #8]
   2a786:	b91b      	cbnz	r3, 2a790 <_dtoa_r+0x868>
   2a788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a78a:	2b00      	cmp	r3, #0
   2a78c:	f000 82ae 	beq.w	2acec <_dtoa_r+0xdc4>
   2a790:	2d00      	cmp	r5, #0
   2a792:	db3f      	blt.n	2a814 <_dtoa_r+0x8ec>
   2a794:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2a796:	46b3      	mov	fp, r6
   2a798:	429e      	cmp	r6, r3
   2a79a:	f80b 9b01 	strb.w	r9, [fp], #1
   2a79e:	f000 81c3 	beq.w	2ab28 <_dtoa_r+0xc00>
   2a7a2:	4651      	mov	r1, sl
   2a7a4:	2300      	movs	r3, #0
   2a7a6:	220a      	movs	r2, #10
   2a7a8:	4620      	mov	r0, r4
   2a7aa:	f000 fbbd 	bl	2af28 <__multadd>
   2a7ae:	4547      	cmp	r7, r8
   2a7b0:	4682      	mov	sl, r0
   2a7b2:	4639      	mov	r1, r7
   2a7b4:	f04f 0300 	mov.w	r3, #0
   2a7b8:	f04f 020a 	mov.w	r2, #10
   2a7bc:	4620      	mov	r0, r4
   2a7be:	d030      	beq.n	2a822 <_dtoa_r+0x8fa>
   2a7c0:	f000 fbb2 	bl	2af28 <__multadd>
   2a7c4:	4641      	mov	r1, r8
   2a7c6:	4607      	mov	r7, r0
   2a7c8:	2300      	movs	r3, #0
   2a7ca:	220a      	movs	r2, #10
   2a7cc:	4620      	mov	r0, r4
   2a7ce:	f000 fbab 	bl	2af28 <__multadd>
   2a7d2:	465e      	mov	r6, fp
   2a7d4:	4680      	mov	r8, r0
   2a7d6:	e7b5      	b.n	2a744 <_dtoa_r+0x81c>
   2a7d8:	9804      	ldr	r0, [sp, #16]
   2a7da:	f000 fb9b 	bl	2af14 <_Bfree>
   2a7de:	2d00      	cmp	r5, #0
   2a7e0:	db06      	blt.n	2a7f0 <_dtoa_r+0x8c8>
   2a7e2:	9b06      	ldr	r3, [sp, #24]
   2a7e4:	f003 0201 	and.w	r2, r3, #1
   2a7e8:	9b02      	ldr	r3, [sp, #8]
   2a7ea:	431d      	orrs	r5, r3
   2a7ec:	432a      	orrs	r2, r5
   2a7ee:	d129      	bne.n	2a844 <_dtoa_r+0x91c>
   2a7f0:	4651      	mov	r1, sl
   2a7f2:	2201      	movs	r2, #1
   2a7f4:	9804      	ldr	r0, [sp, #16]
   2a7f6:	f000 fd77 	bl	2b2e8 <__lshift>
   2a7fa:	9900      	ldr	r1, [sp, #0]
   2a7fc:	4682      	mov	sl, r0
   2a7fe:	f000 fdeb 	bl	2b3d8 <__mcmp>
   2a802:	2800      	cmp	r0, #0
   2a804:	f340 80f6 	ble.w	2a9f4 <_dtoa_r+0xacc>
   2a808:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
   2a80c:	f000 8249 	beq.w	2aca2 <_dtoa_r+0xd7a>
   2a810:	f10b 0931 	add.w	r9, fp, #49	@ 0x31
   2a814:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2a816:	f806 9b01 	strb.w	r9, [r6], #1
   2a81a:	463c      	mov	r4, r7
   2a81c:	3501      	adds	r5, #1
   2a81e:	4647      	mov	r7, r8
   2a820:	e715      	b.n	2a64e <_dtoa_r+0x726>
   2a822:	f000 fb81 	bl	2af28 <__multadd>
   2a826:	465e      	mov	r6, fp
   2a828:	4607      	mov	r7, r0
   2a82a:	4680      	mov	r8, r0
   2a82c:	e78a      	b.n	2a744 <_dtoa_r+0x81c>
   2a82e:	2d00      	cmp	r5, #0
   2a830:	f2c0 8293 	blt.w	2ad5a <_dtoa_r+0xe32>
   2a834:	9b02      	ldr	r3, [sp, #8]
   2a836:	431d      	orrs	r5, r3
   2a838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a83a:	431d      	orrs	r5, r3
   2a83c:	f000 828d 	beq.w	2ad5a <_dtoa_r+0xe32>
   2a840:	2a00      	cmp	r2, #0
   2a842:	dda7      	ble.n	2a794 <_dtoa_r+0x86c>
   2a844:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
   2a848:	f000 822b 	beq.w	2aca2 <_dtoa_r+0xd7a>
   2a84c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2a84e:	f109 0301 	add.w	r3, r9, #1
   2a852:	463c      	mov	r4, r7
   2a854:	f806 3b01 	strb.w	r3, [r6], #1
   2a858:	3501      	adds	r5, #1
   2a85a:	4647      	mov	r7, r8
   2a85c:	e6f7      	b.n	2a64e <_dtoa_r+0x726>
   2a85e:	9b02      	ldr	r3, [sp, #8]
   2a860:	2b02      	cmp	r3, #2
   2a862:	f77f aeb0 	ble.w	2a5c6 <_dtoa_r+0x69e>
   2a866:	f1bb 0f00 	cmp.w	fp, #0
   2a86a:	f040 8125 	bne.w	2aab8 <_dtoa_r+0xb90>
   2a86e:	9900      	ldr	r1, [sp, #0]
   2a870:	9804      	ldr	r0, [sp, #16]
   2a872:	465b      	mov	r3, fp
   2a874:	2205      	movs	r2, #5
   2a876:	f000 fb57 	bl	2af28 <__multadd>
   2a87a:	4601      	mov	r1, r0
   2a87c:	9000      	str	r0, [sp, #0]
   2a87e:	4650      	mov	r0, sl
   2a880:	f000 fdaa 	bl	2b3d8 <__mcmp>
   2a884:	2800      	cmp	r0, #0
   2a886:	f340 8117 	ble.w	2aab8 <_dtoa_r+0xb90>
   2a88a:	9e05      	ldr	r6, [sp, #20]
   2a88c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2a88e:	2331      	movs	r3, #49	@ 0x31
   2a890:	f806 3b01 	strb.w	r3, [r6], #1
   2a894:	3501      	adds	r5, #1
   2a896:	9900      	ldr	r1, [sp, #0]
   2a898:	9804      	ldr	r0, [sp, #16]
   2a89a:	f000 fb3b 	bl	2af14 <_Bfree>
   2a89e:	3501      	adds	r5, #1
   2a8a0:	2f00      	cmp	r7, #0
   2a8a2:	f47f aee2 	bne.w	2a66a <_dtoa_r+0x742>
   2a8a6:	e6e4      	b.n	2a672 <_dtoa_r+0x74a>
   2a8a8:	9900      	ldr	r1, [sp, #0]
   2a8aa:	4650      	mov	r0, sl
   2a8ac:	f000 fd94 	bl	2b3d8 <__mcmp>
   2a8b0:	2800      	cmp	r0, #0
   2a8b2:	f6bf ae84 	bge.w	2a5be <_dtoa_r+0x696>
   2a8b6:	4651      	mov	r1, sl
   2a8b8:	2300      	movs	r3, #0
   2a8ba:	9804      	ldr	r0, [sp, #16]
   2a8bc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
   2a8be:	220a      	movs	r2, #10
   2a8c0:	f000 fb32 	bl	2af28 <__multadd>
   2a8c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   2a8c6:	1e66      	subs	r6, r4, #1
   2a8c8:	4682      	mov	sl, r0
   2a8ca:	2b00      	cmp	r3, #0
   2a8cc:	f47f af16 	bne.w	2a6fc <_dtoa_r+0x7d4>
   2a8d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
   2a8d2:	2b00      	cmp	r3, #0
   2a8d4:	f340 8211 	ble.w	2acfa <_dtoa_r+0xdd2>
   2a8d8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2a8da:	469b      	mov	fp, r3
   2a8dc:	e679      	b.n	2a5d2 <_dtoa_r+0x6aa>
   2a8de:	4601      	mov	r1, r0
   2a8e0:	461a      	mov	r2, r3
   2a8e2:	9804      	ldr	r0, [sp, #16]
   2a8e4:	f000 fca6 	bl	2b234 <__pow5mult>
   2a8e8:	9b02      	ldr	r3, [sp, #8]
   2a8ea:	9000      	str	r0, [sp, #0]
   2a8ec:	2b01      	cmp	r3, #1
   2a8ee:	dd6e      	ble.n	2a9ce <_dtoa_r+0xaa6>
   2a8f0:	2300      	movs	r3, #0
   2a8f2:	9309      	str	r3, [sp, #36]	@ 0x24
   2a8f4:	9a00      	ldr	r2, [sp, #0]
   2a8f6:	6913      	ldr	r3, [r2, #16]
   2a8f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2a8fc:	6918      	ldr	r0, [r3, #16]
   2a8fe:	f000 fb63 	bl	2afc8 <__hi0bits>
   2a902:	f1c0 0020 	rsb	r0, r0, #32
   2a906:	e631      	b.n	2a56c <_dtoa_r+0x644>
   2a908:	4b98      	ldr	r3, [pc, #608]	@ (2ab6c <_dtoa_r+0xc44>)
   2a90a:	9305      	str	r3, [sp, #20]
   2a90c:	3303      	adds	r3, #3
   2a90e:	f7ff bbed 	b.w	2a0ec <_dtoa_r+0x1c4>
   2a912:	9b06      	ldr	r3, [sp, #24]
   2a914:	2b00      	cmp	r3, #0
   2a916:	f47f ae28 	bne.w	2a56a <_dtoa_r+0x642>
   2a91a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   2a91e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   2a922:	2b00      	cmp	r3, #0
   2a924:	f47f ae21 	bne.w	2a56a <_dtoa_r+0x642>
   2a928:	4b91      	ldr	r3, [pc, #580]	@ (2ab70 <_dtoa_r+0xc48>)
   2a92a:	4013      	ands	r3, r2
   2a92c:	b133      	cbz	r3, 2a93c <_dtoa_r+0xa14>
   2a92e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a930:	3301      	adds	r3, #1
   2a932:	930c      	str	r3, [sp, #48]	@ 0x30
   2a934:	9b08      	ldr	r3, [sp, #32]
   2a936:	3301      	adds	r3, #1
   2a938:	9308      	str	r3, [sp, #32]
   2a93a:	2301      	movs	r3, #1
   2a93c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   2a93e:	9309      	str	r3, [sp, #36]	@ 0x24
   2a940:	2a00      	cmp	r2, #0
   2a942:	f43f ae12 	beq.w	2a56a <_dtoa_r+0x642>
   2a946:	e7d5      	b.n	2a8f4 <_dtoa_r+0x9cc>
   2a948:	f43f ae23 	beq.w	2a592 <_dtoa_r+0x66a>
   2a94c:	f1c0 033c 	rsb	r3, r0, #60	@ 0x3c
   2a950:	e6ae      	b.n	2a6b0 <_dtoa_r+0x788>
   2a952:	2301      	movs	r3, #1
   2a954:	930e      	str	r3, [sp, #56]	@ 0x38
   2a956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   2a958:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2a95a:	4413      	add	r3, r2
   2a95c:	f103 0b01 	add.w	fp, r3, #1
   2a960:	465e      	mov	r6, fp
   2a962:	2e01      	cmp	r6, #1
   2a964:	9313      	str	r3, [sp, #76]	@ 0x4c
   2a966:	bfb8      	it	lt
   2a968:	2601      	movlt	r6, #1
   2a96a:	2e17      	cmp	r6, #23
   2a96c:	f340 81f9 	ble.w	2ad62 <_dtoa_r+0xe3a>
   2a970:	2201      	movs	r2, #1
   2a972:	2304      	movs	r3, #4
   2a974:	005b      	lsls	r3, r3, #1
   2a976:	f103 0014 	add.w	r0, r3, #20
   2a97a:	42b0      	cmp	r0, r6
   2a97c:	4611      	mov	r1, r2
   2a97e:	f102 0201 	add.w	r2, r2, #1
   2a982:	d9f7      	bls.n	2a974 <_dtoa_r+0xa4c>
   2a984:	9b04      	ldr	r3, [sp, #16]
   2a986:	63d9      	str	r1, [r3, #60]	@ 0x3c
   2a988:	e404      	b.n	2a194 <_dtoa_r+0x26c>
   2a98a:	2301      	movs	r3, #1
   2a98c:	930e      	str	r3, [sp, #56]	@ 0x38
   2a98e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
   2a990:	2e00      	cmp	r6, #0
   2a992:	dd36      	ble.n	2aa02 <_dtoa_r+0xada>
   2a994:	9613      	str	r6, [sp, #76]	@ 0x4c
   2a996:	46b3      	mov	fp, r6
   2a998:	e7e7      	b.n	2a96a <_dtoa_r+0xa42>
   2a99a:	2300      	movs	r3, #0
   2a99c:	930e      	str	r3, [sp, #56]	@ 0x38
   2a99e:	e7da      	b.n	2a956 <_dtoa_r+0xa2e>
   2a9a0:	2300      	movs	r3, #0
   2a9a2:	930e      	str	r3, [sp, #56]	@ 0x38
   2a9a4:	e7f3      	b.n	2a98e <_dtoa_r+0xa66>
   2a9a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2a9a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   2a9aa:	9610      	str	r6, [sp, #64]	@ 0x40
   2a9ac:	1af3      	subs	r3, r6, r3
   2a9ae:	441a      	add	r2, r3
   2a9b0:	9b08      	ldr	r3, [sp, #32]
   2a9b2:	9209      	str	r2, [sp, #36]	@ 0x24
   2a9b4:	445b      	add	r3, fp
   2a9b6:	9308      	str	r3, [sp, #32]
   2a9b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2a9ba:	461d      	mov	r5, r3
   2a9bc:	445b      	add	r3, fp
   2a9be:	930c      	str	r3, [sp, #48]	@ 0x30
   2a9c0:	2600      	movs	r6, #0
   2a9c2:	9804      	ldr	r0, [sp, #16]
   2a9c4:	2101      	movs	r1, #1
   2a9c6:	f000 fb51 	bl	2b06c <__i2b>
   2a9ca:	4607      	mov	r7, r0
   2a9cc:	e5a5      	b.n	2a51a <_dtoa_r+0x5f2>
   2a9ce:	9b06      	ldr	r3, [sp, #24]
   2a9d0:	2b00      	cmp	r3, #0
   2a9d2:	d18d      	bne.n	2a8f0 <_dtoa_r+0x9c8>
   2a9d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   2a9d8:	f3c1 0313 	ubfx	r3, r1, #0, #20
   2a9dc:	460a      	mov	r2, r1
   2a9de:	2b00      	cmp	r3, #0
   2a9e0:	d0a2      	beq.n	2a928 <_dtoa_r+0xa00>
   2a9e2:	9009      	str	r0, [sp, #36]	@ 0x24
   2a9e4:	e786      	b.n	2a8f4 <_dtoa_r+0x9cc>
   2a9e6:	ed9d 7b00 	vldr	d7, [sp]
   2a9ea:	2702      	movs	r7, #2
   2a9ec:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
   2a9f0:	f7ff bbfd 	b.w	2a1ee <_dtoa_r+0x2c6>
   2a9f4:	f47f af0e 	bne.w	2a814 <_dtoa_r+0x8ec>
   2a9f8:	f019 0f01 	tst.w	r9, #1
   2a9fc:	f47f af04 	bne.w	2a808 <_dtoa_r+0x8e0>
   2aa00:	e708      	b.n	2a814 <_dtoa_r+0x8ec>
   2aa02:	2301      	movs	r3, #1
   2aa04:	930b      	str	r3, [sp, #44]	@ 0x2c
   2aa06:	469b      	mov	fp, r3
   2aa08:	f7ff bbbf 	b.w	2a18a <_dtoa_r+0x262>
   2aa0c:	d103      	bne.n	2aa16 <_dtoa_r+0xaee>
   2aa0e:	f019 0f01 	tst.w	r9, #1
   2aa12:	f47f ae0d 	bne.w	2a630 <_dtoa_r+0x708>
   2aa16:	465e      	mov	r6, fp
   2aa18:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   2aa1c:	2b30      	cmp	r3, #48	@ 0x30
   2aa1e:	d0fa      	beq.n	2aa16 <_dtoa_r+0xaee>
   2aa20:	e615      	b.n	2a64e <_dtoa_r+0x726>
   2aa22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
   2aa24:	2a00      	cmp	r2, #0
   2aa26:	f000 809c 	beq.w	2ab62 <_dtoa_r+0xc3a>
   2aa2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
   2aa2e:	9a08      	ldr	r2, [sp, #32]
   2aa30:	9e10      	ldr	r6, [sp, #64]	@ 0x40
   2aa32:	441a      	add	r2, r3
   2aa34:	9208      	str	r2, [sp, #32]
   2aa36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   2aa38:	4615      	mov	r5, r2
   2aa3a:	441a      	add	r2, r3
   2aa3c:	920c      	str	r2, [sp, #48]	@ 0x30
   2aa3e:	e7c0      	b.n	2a9c2 <_dtoa_r+0xa9a>
   2aa40:	9a05      	ldr	r2, [sp, #20]
   2aa42:	2331      	movs	r3, #49	@ 0x31
   2aa44:	3501      	adds	r5, #1
   2aa46:	7013      	strb	r3, [r2, #0]
   2aa48:	e601      	b.n	2a64e <_dtoa_r+0x726>
   2aa4a:	f000 80fa 	beq.w	2ac42 <_dtoa_r+0xd1a>
   2aa4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2aa50:	4b48      	ldr	r3, [pc, #288]	@ (2ab74 <_dtoa_r+0xc4c>)
   2aa52:	4255      	negs	r5, r2
   2aa54:	f005 020f 	and.w	r2, r5, #15
   2aa58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2aa5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2aa60:	e9dd 0100 	ldrd	r0, r1, [sp]
   2aa64:	f7ee f854 	bl	18b10 <__aeabi_dmul>
   2aa68:	112d      	asrs	r5, r5, #4
   2aa6a:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   2aa6e:	f000 8158 	beq.w	2ad22 <_dtoa_r+0xdfa>
   2aa72:	4e41      	ldr	r6, [pc, #260]	@ (2ab78 <_dtoa_r+0xc50>)
   2aa74:	2300      	movs	r3, #0
   2aa76:	2702      	movs	r7, #2
   2aa78:	4680      	mov	r8, r0
   2aa7a:	4689      	mov	r9, r1
   2aa7c:	07ea      	lsls	r2, r5, #31
   2aa7e:	d509      	bpl.n	2aa94 <_dtoa_r+0xb6c>
   2aa80:	e9d6 2300 	ldrd	r2, r3, [r6]
   2aa84:	4640      	mov	r0, r8
   2aa86:	4649      	mov	r1, r9
   2aa88:	f7ee f842 	bl	18b10 <__aeabi_dmul>
   2aa8c:	3701      	adds	r7, #1
   2aa8e:	4680      	mov	r8, r0
   2aa90:	4689      	mov	r9, r1
   2aa92:	2301      	movs	r3, #1
   2aa94:	106d      	asrs	r5, r5, #1
   2aa96:	f106 0608 	add.w	r6, r6, #8
   2aa9a:	d1ef      	bne.n	2aa7c <_dtoa_r+0xb54>
   2aa9c:	2b00      	cmp	r3, #0
   2aa9e:	f47f abbf 	bne.w	2a220 <_dtoa_r+0x2f8>
   2aaa2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	@ 0x50
   2aaa6:	f7ff bbbb 	b.w	2a220 <_dtoa_r+0x2f8>
   2aaaa:	f1c8 0301 	rsb	r3, r8, #1
   2aaae:	9008      	str	r0, [sp, #32]
   2aab0:	930c      	str	r3, [sp, #48]	@ 0x30
   2aab2:	9011      	str	r0, [sp, #68]	@ 0x44
   2aab4:	f7ff bb58 	b.w	2a168 <_dtoa_r+0x240>
   2aab8:	9e05      	ldr	r6, [sp, #20]
   2aaba:	e4bb      	b.n	2a434 <_dtoa_r+0x50c>
   2aabc:	f8dd a000 	ldr.w	sl, [sp]
   2aac0:	4602      	mov	r2, r0
   2aac2:	460b      	mov	r3, r1
   2aac4:	f7ed fe6e 	bl	187a4 <__adddf3>
   2aac8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2aaca:	e9cd 0100 	strd	r0, r1, [sp]
   2aace:	3501      	adds	r5, #1
   2aad0:	4602      	mov	r2, r0
   2aad2:	460b      	mov	r3, r1
   2aad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2aad8:	46a8      	mov	r8, r5
   2aada:	f7ee fa8b 	bl	18ff4 <__aeabi_dcmplt>
   2aade:	b940      	cbnz	r0, 2aaf2 <_dtoa_r+0xbca>
   2aae0:	e9dd 2300 	ldrd	r2, r3, [sp]
   2aae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2aae8:	f7ee fa7a 	bl	18fe0 <__aeabi_dcmpeq>
   2aaec:	b118      	cbz	r0, 2aaf6 <_dtoa_r+0xbce>
   2aaee:	07f3      	lsls	r3, r6, #31
   2aaf0:	d501      	bpl.n	2aaf6 <_dtoa_r+0xbce>
   2aaf2:	9a05      	ldr	r2, [sp, #20]
   2aaf4:	e435      	b.n	2a362 <_dtoa_r+0x43a>
   2aaf6:	463e      	mov	r6, r7
   2aaf8:	e5bb      	b.n	2a672 <_dtoa_r+0x74a>
   2aafa:	6879      	ldr	r1, [r7, #4]
   2aafc:	9804      	ldr	r0, [sp, #16]
   2aafe:	f000 f9e3 	bl	2aec8 <_Balloc>
   2ab02:	4605      	mov	r5, r0
   2ab04:	2800      	cmp	r0, #0
   2ab06:	f000 8121 	beq.w	2ad4c <_dtoa_r+0xe24>
   2ab0a:	693b      	ldr	r3, [r7, #16]
   2ab0c:	3302      	adds	r3, #2
   2ab0e:	009a      	lsls	r2, r3, #2
   2ab10:	f107 010c 	add.w	r1, r7, #12
   2ab14:	300c      	adds	r0, #12
   2ab16:	f7ed fd33 	bl	18580 <memcpy>
   2ab1a:	9804      	ldr	r0, [sp, #16]
   2ab1c:	4629      	mov	r1, r5
   2ab1e:	2201      	movs	r2, #1
   2ab20:	f000 fbe2 	bl	2b2e8 <__lshift>
   2ab24:	4680      	mov	r8, r0
   2ab26:	e603      	b.n	2a730 <_dtoa_r+0x808>
   2ab28:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2ab2a:	463c      	mov	r4, r7
   2ab2c:	3501      	adds	r5, #1
   2ab2e:	4647      	mov	r7, r8
   2ab30:	e572      	b.n	2a618 <_dtoa_r+0x6f0>
   2ab32:	9c04      	ldr	r4, [sp, #16]
   2ab34:	4639      	mov	r1, r7
   2ab36:	4632      	mov	r2, r6
   2ab38:	4620      	mov	r0, r4
   2ab3a:	f000 fb7b 	bl	2b234 <__pow5mult>
   2ab3e:	4652      	mov	r2, sl
   2ab40:	4601      	mov	r1, r0
   2ab42:	4607      	mov	r7, r0
   2ab44:	4620      	mov	r0, r4
   2ab46:	f000 fabf 	bl	2b0c8 <__multiply>
   2ab4a:	4651      	mov	r1, sl
   2ab4c:	4680      	mov	r8, r0
   2ab4e:	4620      	mov	r0, r4
   2ab50:	f000 f9e0 	bl	2af14 <_Bfree>
   2ab54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
   2ab56:	1b9b      	subs	r3, r3, r6
   2ab58:	46c2      	mov	sl, r8
   2ab5a:	9310      	str	r3, [sp, #64]	@ 0x40
   2ab5c:	f43f acf8 	beq.w	2a550 <_dtoa_r+0x628>
   2ab60:	e4f0      	b.n	2a544 <_dtoa_r+0x61c>
   2ab62:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
   2ab64:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
   2ab68:	e761      	b.n	2aa2e <_dtoa_r+0xb06>
   2ab6a:	bf00      	nop
   2ab6c:	0003fb20 	.word	0x0003fb20
   2ab70:	7ff00000 	.word	0x7ff00000
   2ab74:	000474b8 	.word	0x000474b8
   2ab78:	00047490 	.word	0x00047490
   2ab7c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	@ 0x58
   2ab80:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
   2ab84:	f7ed ffc4 	bl	18b10 <__aeabi_dmul>
   2ab88:	9b05      	ldr	r3, [sp, #20]
   2ab8a:	701c      	strb	r4, [r3, #0]
   2ab8c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
   2ab8e:	2b01      	cmp	r3, #1
   2ab90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
   2ab94:	f000 80c3 	beq.w	2ad1e <_dtoa_r+0xdf6>
   2ab98:	9f18      	ldr	r7, [sp, #96]	@ 0x60
   2ab9a:	9b05      	ldr	r3, [sp, #20]
   2ab9c:	9612      	str	r6, [sp, #72]	@ 0x48
   2ab9e:	441f      	add	r7, r3
   2aba0:	4b7a      	ldr	r3, [pc, #488]	@ (2ad8c <_dtoa_r+0xe64>)
   2aba2:	2200      	movs	r2, #0
   2aba4:	4640      	mov	r0, r8
   2aba6:	4649      	mov	r1, r9
   2aba8:	f7ed ffb2 	bl	18b10 <__aeabi_dmul>
   2abac:	460d      	mov	r5, r1
   2abae:	4604      	mov	r4, r0
   2abb0:	f7ee fa5e 	bl	19070 <__aeabi_d2iz>
   2abb4:	4681      	mov	r9, r0
   2abb6:	f7ed ff41 	bl	18a3c <__aeabi_i2d>
   2abba:	f109 0930 	add.w	r9, r9, #48	@ 0x30
   2abbe:	4602      	mov	r2, r0
   2abc0:	460b      	mov	r3, r1
   2abc2:	4620      	mov	r0, r4
   2abc4:	4629      	mov	r1, r5
   2abc6:	f7ed fdeb 	bl	187a0 <__aeabi_dsub>
   2abca:	f806 9b01 	strb.w	r9, [r6], #1
   2abce:	42be      	cmp	r6, r7
   2abd0:	4680      	mov	r8, r0
   2abd2:	4689      	mov	r9, r1
   2abd4:	d1e4      	bne.n	2aba0 <_dtoa_r+0xc78>
   2abd6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
   2abd8:	4b6d      	ldr	r3, [pc, #436]	@ (2ad90 <_dtoa_r+0xe68>)
   2abda:	2200      	movs	r2, #0
   2abdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
   2abe0:	f7ed fde0 	bl	187a4 <__adddf3>
   2abe4:	4602      	mov	r2, r0
   2abe6:	460b      	mov	r3, r1
   2abe8:	4640      	mov	r0, r8
   2abea:	4649      	mov	r1, r9
   2abec:	f7ee fa20 	bl	19030 <__aeabi_dcmpgt>
   2abf0:	2800      	cmp	r0, #0
   2abf2:	d16c      	bne.n	2acce <_dtoa_r+0xda6>
   2abf4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
   2abf8:	4965      	ldr	r1, [pc, #404]	@ (2ad90 <_dtoa_r+0xe68>)
   2abfa:	2000      	movs	r0, #0
   2abfc:	f7ed fdd0 	bl	187a0 <__aeabi_dsub>
   2ac00:	4602      	mov	r2, r0
   2ac02:	460b      	mov	r3, r1
   2ac04:	4640      	mov	r0, r8
   2ac06:	4649      	mov	r1, r9
   2ac08:	f7ee f9f4 	bl	18ff4 <__aeabi_dcmplt>
   2ac0c:	b980      	cbnz	r0, 2ac30 <_dtoa_r+0xd08>
   2ac0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
   2ac10:	2b00      	cmp	r3, #0
   2ac12:	f6ff ac7d 	blt.w	2a510 <_dtoa_r+0x5e8>
   2ac16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2ac18:	2b0e      	cmp	r3, #14
   2ac1a:	f73f ac79 	bgt.w	2a510 <_dtoa_r+0x5e8>
   2ac1e:	4b5d      	ldr	r3, [pc, #372]	@ (2ad94 <_dtoa_r+0xe6c>)
   2ac20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   2ac22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ac26:	ed93 7b00 	vldr	d7, [r3]
   2ac2a:	ed8d 7b02 	vstr	d7, [sp, #8]
   2ac2e:	e406      	b.n	2a43e <_dtoa_r+0x516>
   2ac30:	463e      	mov	r6, r7
   2ac32:	3f01      	subs	r7, #1
   2ac34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   2ac38:	2b30      	cmp	r3, #48	@ 0x30
   2ac3a:	d0f9      	beq.n	2ac30 <_dtoa_r+0xd08>
   2ac3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
   2ac3e:	3501      	adds	r5, #1
   2ac40:	e517      	b.n	2a672 <_dtoa_r+0x74a>
   2ac42:	e9dd 8900 	ldrd	r8, r9, [sp]
   2ac46:	2702      	movs	r7, #2
   2ac48:	f7ff baea 	b.w	2a220 <_dtoa_r+0x2f8>
   2ac4c:	f1bb 0f00 	cmp.w	fp, #0
   2ac50:	f43f ab9d 	beq.w	2a38e <_dtoa_r+0x466>
   2ac54:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
   2ac56:	2c00      	cmp	r4, #0
   2ac58:	f77f abc2 	ble.w	2a3e0 <_dtoa_r+0x4b8>
   2ac5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   2ac5e:	3b01      	subs	r3, #1
   2ac60:	2200      	movs	r2, #0
   2ac62:	4640      	mov	r0, r8
   2ac64:	4649      	mov	r1, r9
   2ac66:	9319      	str	r3, [sp, #100]	@ 0x64
   2ac68:	4b48      	ldr	r3, [pc, #288]	@ (2ad8c <_dtoa_r+0xe64>)
   2ac6a:	f7ed ff51 	bl	18b10 <__aeabi_dmul>
   2ac6e:	4680      	mov	r8, r0
   2ac70:	4689      	mov	r9, r1
   2ac72:	1c78      	adds	r0, r7, #1
   2ac74:	f7ed fee2 	bl	18a3c <__aeabi_i2d>
   2ac78:	4642      	mov	r2, r8
   2ac7a:	464b      	mov	r3, r9
   2ac7c:	f7ed ff48 	bl	18b10 <__aeabi_dmul>
   2ac80:	4b45      	ldr	r3, [pc, #276]	@ (2ad98 <_dtoa_r+0xe70>)
   2ac82:	2200      	movs	r2, #0
   2ac84:	f7ed fd8e 	bl	187a4 <__adddf3>
   2ac88:	f1a1 7350 	sub.w	r3, r1, #54525952	@ 0x3400000
   2ac8c:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
   2ac90:	9418      	str	r4, [sp, #96]	@ 0x60
   2ac92:	9315      	str	r3, [sp, #84]	@ 0x54
   2ac94:	f7ff bae6 	b.w	2a264 <_dtoa_r+0x33c>
   2ac98:	f108 0801 	add.w	r8, r8, #1
   2ac9c:	2331      	movs	r3, #49	@ 0x31
   2ac9e:	f7ff bb67 	b.w	2a370 <_dtoa_r+0x448>
   2aca2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2aca4:	9a05      	ldr	r2, [sp, #20]
   2aca6:	46b3      	mov	fp, r6
   2aca8:	2339      	movs	r3, #57	@ 0x39
   2acaa:	463c      	mov	r4, r7
   2acac:	f80b 3b01 	strb.w	r3, [fp], #1
   2acb0:	3501      	adds	r5, #1
   2acb2:	4647      	mov	r7, r8
   2acb4:	e4c1      	b.n	2a63a <_dtoa_r+0x712>
   2acb6:	2300      	movs	r3, #0
   2acb8:	9300      	str	r3, [sp, #0]
   2acba:	461f      	mov	r7, r3
   2acbc:	e5e5      	b.n	2a88a <_dtoa_r+0x962>
   2acbe:	9b08      	ldr	r3, [sp, #32]
   2acc0:	445b      	add	r3, fp
   2acc2:	9308      	str	r3, [sp, #32]
   2acc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
   2acc6:	461d      	mov	r5, r3
   2acc8:	445b      	add	r3, fp
   2acca:	930c      	str	r3, [sp, #48]	@ 0x30
   2accc:	e679      	b.n	2a9c2 <_dtoa_r+0xa9a>
   2acce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
   2acd0:	9a05      	ldr	r2, [sp, #20]
   2acd2:	f103 0801 	add.w	r8, r3, #1
   2acd6:	f7ff bb44 	b.w	2a362 <_dtoa_r+0x43a>
   2acda:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
   2acde:	e7ad      	b.n	2ac3c <_dtoa_r+0xd14>
   2ace0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
   2ace4:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
   2ace8:	f7ff bb7a 	b.w	2a3e0 <_dtoa_r+0x4b8>
   2acec:	f1b9 0f39 	cmp.w	r9, #57	@ 0x39
   2acf0:	d0d7      	beq.n	2aca2 <_dtoa_r+0xd7a>
   2acf2:	2d00      	cmp	r5, #0
   2acf4:	f73f ad8c 	bgt.w	2a810 <_dtoa_r+0x8e8>
   2acf8:	e58c      	b.n	2a814 <_dtoa_r+0x8ec>
   2acfa:	9b02      	ldr	r3, [sp, #8]
   2acfc:	2b02      	cmp	r3, #2
   2acfe:	dc03      	bgt.n	2ad08 <_dtoa_r+0xde0>
   2ad00:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
   2ad02:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
   2ad06:	e464      	b.n	2a5d2 <_dtoa_r+0x6aa>
   2ad08:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
   2ad0c:	960d      	str	r6, [sp, #52]	@ 0x34
   2ad0e:	e5aa      	b.n	2a866 <_dtoa_r+0x93e>
   2ad10:	9b02      	ldr	r3, [sp, #8]
   2ad12:	2b02      	cmp	r3, #2
   2ad14:	dcf8      	bgt.n	2ad08 <_dtoa_r+0xde0>
   2ad16:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
   2ad1a:	960d      	str	r6, [sp, #52]	@ 0x34
   2ad1c:	e4fb      	b.n	2a716 <_dtoa_r+0x7ee>
   2ad1e:	4637      	mov	r7, r6
   2ad20:	e75a      	b.n	2abd8 <_dtoa_r+0xcb0>
   2ad22:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	@ 0x50
   2ad26:	2702      	movs	r7, #2
   2ad28:	f7ff ba7a 	b.w	2a220 <_dtoa_r+0x2f8>
   2ad2c:	9b04      	ldr	r3, [sp, #16]
   2ad2e:	2500      	movs	r5, #0
   2ad30:	63dd      	str	r5, [r3, #60]	@ 0x3c
   2ad32:	4629      	mov	r1, r5
   2ad34:	4618      	mov	r0, r3
   2ad36:	f000 f8c7 	bl	2aec8 <_Balloc>
   2ad3a:	9005      	str	r0, [sp, #20]
   2ad3c:	b9d0      	cbnz	r0, 2ad74 <_dtoa_r+0xe4c>
   2ad3e:	4b17      	ldr	r3, [pc, #92]	@ (2ad9c <_dtoa_r+0xe74>)
   2ad40:	4817      	ldr	r0, [pc, #92]	@ (2ada0 <_dtoa_r+0xe78>)
   2ad42:	2200      	movs	r2, #0
   2ad44:	f240 11af 	movw	r1, #431	@ 0x1af
   2ad48:	f7fa fa16 	bl	25178 <__assert_func>
   2ad4c:	4b13      	ldr	r3, [pc, #76]	@ (2ad9c <_dtoa_r+0xe74>)
   2ad4e:	4814      	ldr	r0, [pc, #80]	@ (2ada0 <_dtoa_r+0xe78>)
   2ad50:	462a      	mov	r2, r5
   2ad52:	f240 21ef 	movw	r1, #751	@ 0x2ef
   2ad56:	f7fa fa0f 	bl	25178 <__assert_func>
   2ad5a:	2a00      	cmp	r2, #0
   2ad5c:	f73f ad48 	bgt.w	2a7f0 <_dtoa_r+0x8c8>
   2ad60:	e558      	b.n	2a814 <_dtoa_r+0x8ec>
   2ad62:	9b04      	ldr	r3, [sp, #16]
   2ad64:	2100      	movs	r1, #0
   2ad66:	63d9      	str	r1, [r3, #60]	@ 0x3c
   2ad68:	f7ff ba14 	b.w	2a194 <_dtoa_r+0x26c>
   2ad6c:	4b0d      	ldr	r3, [pc, #52]	@ (2ada4 <_dtoa_r+0xe7c>)
   2ad6e:	9305      	str	r3, [sp, #20]
   2ad70:	f7ff b918 	b.w	29fa4 <_dtoa_r+0x7c>
   2ad74:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   2ad78:	639a      	str	r2, [r3, #56]	@ 0x38
   2ad7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   2ad7e:	2201      	movs	r2, #1
   2ad80:	950b      	str	r5, [sp, #44]	@ 0x2c
   2ad82:	9313      	str	r3, [sp, #76]	@ 0x4c
   2ad84:	920e      	str	r2, [sp, #56]	@ 0x38
   2ad86:	469b      	mov	fp, r3
   2ad88:	f7ff bb2a 	b.w	2a3e0 <_dtoa_r+0x4b8>
   2ad8c:	40240000 	.word	0x40240000
   2ad90:	3fe00000 	.word	0x3fe00000
   2ad94:	000474b8 	.word	0x000474b8
   2ad98:	401c0000 	.word	0x401c0000
   2ad9c:	0003fb24 	.word	0x0003fb24
   2ada0:	0003fb38 	.word	0x0003fb38
   2ada4:	0003fb14 	.word	0x0003fb14

0002ada8 <__env_lock>:
   2ada8:	4801      	ldr	r0, [pc, #4]	@ (2adb0 <__env_lock+0x8>)
   2adaa:	f7fc b8d7 	b.w	26f5c <__retarget_lock_acquire_recursive>
   2adae:	bf00      	nop
   2adb0:	1005245c 	.word	0x1005245c

0002adb4 <__env_unlock>:
   2adb4:	4801      	ldr	r0, [pc, #4]	@ (2adbc <__env_unlock+0x8>)
   2adb6:	f7fc b8d3 	b.w	26f60 <__retarget_lock_release_recursive>
   2adba:	bf00      	nop
   2adbc:	1005245c 	.word	0x1005245c

0002adc0 <__ssprint_r>:
   2adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2adc4:	6893      	ldr	r3, [r2, #8]
   2adc6:	6817      	ldr	r7, [r2, #0]
   2adc8:	b083      	sub	sp, #12
   2adca:	4692      	mov	sl, r2
   2adcc:	2b00      	cmp	r3, #0
   2adce:	d074      	beq.n	2aeba <__ssprint_r+0xfa>
   2add0:	f04f 0b00 	mov.w	fp, #0
   2add4:	688b      	ldr	r3, [r1, #8]
   2add6:	680a      	ldr	r2, [r1, #0]
   2add8:	4681      	mov	r9, r0
   2adda:	460c      	mov	r4, r1
   2addc:	465d      	mov	r5, fp
   2adde:	e045      	b.n	2ae6c <__ssprint_r+0xac>
   2ade0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2ade4:	f413 6f90 	tst.w	r3, #1152	@ 0x480
   2ade8:	d02c      	beq.n	2ae44 <__ssprint_r+0x84>
   2adea:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   2adee:	1a16      	subs	r6, r2, r0
   2adf0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   2adf4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2adf8:	1c71      	adds	r1, r6, #1
   2adfa:	1052      	asrs	r2, r2, #1
   2adfc:	4429      	add	r1, r5
   2adfe:	4291      	cmp	r1, r2
   2ae00:	bf92      	itee	ls
   2ae02:	4690      	movls	r8, r2
   2ae04:	4688      	movhi	r8, r1
   2ae06:	460a      	movhi	r2, r1
   2ae08:	055b      	lsls	r3, r3, #21
   2ae0a:	d539      	bpl.n	2ae80 <__ssprint_r+0xc0>
   2ae0c:	4611      	mov	r1, r2
   2ae0e:	4648      	mov	r0, r9
   2ae10:	f7fc fabc 	bl	2738c <_malloc_r>
   2ae14:	9001      	str	r0, [sp, #4]
   2ae16:	2800      	cmp	r0, #0
   2ae18:	d03d      	beq.n	2ae96 <__ssprint_r+0xd6>
   2ae1a:	4632      	mov	r2, r6
   2ae1c:	6921      	ldr	r1, [r4, #16]
   2ae1e:	f7ed fbaf 	bl	18580 <memcpy>
   2ae22:	89a2      	ldrh	r2, [r4, #12]
   2ae24:	9b01      	ldr	r3, [sp, #4]
   2ae26:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
   2ae2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
   2ae2e:	81a2      	strh	r2, [r4, #12]
   2ae30:	1998      	adds	r0, r3, r6
   2ae32:	eba8 0606 	sub.w	r6, r8, r6
   2ae36:	60a6      	str	r6, [r4, #8]
   2ae38:	f8c4 8014 	str.w	r8, [r4, #20]
   2ae3c:	6123      	str	r3, [r4, #16]
   2ae3e:	6020      	str	r0, [r4, #0]
   2ae40:	46a8      	mov	r8, r5
   2ae42:	462e      	mov	r6, r5
   2ae44:	4632      	mov	r2, r6
   2ae46:	4659      	mov	r1, fp
   2ae48:	f7fb febc 	bl	26bc4 <memmove>
   2ae4c:	f8da 1008 	ldr.w	r1, [sl, #8]
   2ae50:	68a3      	ldr	r3, [r4, #8]
   2ae52:	6822      	ldr	r2, [r4, #0]
   2ae54:	eba3 0308 	sub.w	r3, r3, r8
   2ae58:	4432      	add	r2, r6
   2ae5a:	1b49      	subs	r1, r1, r5
   2ae5c:	60a3      	str	r3, [r4, #8]
   2ae5e:	6022      	str	r2, [r4, #0]
   2ae60:	f8ca 1008 	str.w	r1, [sl, #8]
   2ae64:	b349      	cbz	r1, 2aeba <__ssprint_r+0xfa>
   2ae66:	e9d7 b500 	ldrd	fp, r5, [r7]
   2ae6a:	3708      	adds	r7, #8
   2ae6c:	4698      	mov	r8, r3
   2ae6e:	4610      	mov	r0, r2
   2ae70:	2d00      	cmp	r5, #0
   2ae72:	d0f8      	beq.n	2ae66 <__ssprint_r+0xa6>
   2ae74:	429d      	cmp	r5, r3
   2ae76:	461e      	mov	r6, r3
   2ae78:	d2b2      	bcs.n	2ade0 <__ssprint_r+0x20>
   2ae7a:	46a8      	mov	r8, r5
   2ae7c:	462e      	mov	r6, r5
   2ae7e:	e7e1      	b.n	2ae44 <__ssprint_r+0x84>
   2ae80:	4601      	mov	r1, r0
   2ae82:	4648      	mov	r0, r9
   2ae84:	f7fe fbc4 	bl	29610 <_realloc_r>
   2ae88:	4603      	mov	r3, r0
   2ae8a:	2800      	cmp	r0, #0
   2ae8c:	d1d0      	bne.n	2ae30 <__ssprint_r+0x70>
   2ae8e:	6921      	ldr	r1, [r4, #16]
   2ae90:	4648      	mov	r0, r9
   2ae92:	f7fc f93f 	bl	27114 <_free_r>
   2ae96:	89a3      	ldrh	r3, [r4, #12]
   2ae98:	220c      	movs	r2, #12
   2ae9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   2ae9e:	f8c9 2000 	str.w	r2, [r9]
   2aea2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2aea6:	81a3      	strh	r3, [r4, #12]
   2aea8:	2200      	movs	r2, #0
   2aeaa:	2300      	movs	r3, #0
   2aeac:	f8ca 2008 	str.w	r2, [sl, #8]
   2aeb0:	f8ca 3004 	str.w	r3, [sl, #4]
   2aeb4:	b003      	add	sp, #12
   2aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aeba:	2000      	movs	r0, #0
   2aebc:	2300      	movs	r3, #0
   2aebe:	f8ca 3004 	str.w	r3, [sl, #4]
   2aec2:	b003      	add	sp, #12
   2aec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002aec8 <_Balloc>:
   2aec8:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   2aeca:	b570      	push	{r4, r5, r6, lr}
   2aecc:	4605      	mov	r5, r0
   2aece:	460c      	mov	r4, r1
   2aed0:	b14b      	cbz	r3, 2aee6 <_Balloc+0x1e>
   2aed2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2aed6:	b180      	cbz	r0, 2aefa <_Balloc+0x32>
   2aed8:	6802      	ldr	r2, [r0, #0]
   2aeda:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2aede:	2300      	movs	r3, #0
   2aee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2aee4:	bd70      	pop	{r4, r5, r6, pc}
   2aee6:	2221      	movs	r2, #33	@ 0x21
   2aee8:	2104      	movs	r1, #4
   2aeea:	f000 fbb3 	bl	2b654 <_calloc_r>
   2aeee:	4603      	mov	r3, r0
   2aef0:	6468      	str	r0, [r5, #68]	@ 0x44
   2aef2:	2800      	cmp	r0, #0
   2aef4:	d1ed      	bne.n	2aed2 <_Balloc+0xa>
   2aef6:	2000      	movs	r0, #0
   2aef8:	bd70      	pop	{r4, r5, r6, pc}
   2aefa:	2101      	movs	r1, #1
   2aefc:	fa01 f604 	lsl.w	r6, r1, r4
   2af00:	1d72      	adds	r2, r6, #5
   2af02:	0092      	lsls	r2, r2, #2
   2af04:	4628      	mov	r0, r5
   2af06:	f000 fba5 	bl	2b654 <_calloc_r>
   2af0a:	2800      	cmp	r0, #0
   2af0c:	d0f3      	beq.n	2aef6 <_Balloc+0x2e>
   2af0e:	e9c0 4601 	strd	r4, r6, [r0, #4]
   2af12:	e7e4      	b.n	2aede <_Balloc+0x16>

0002af14 <_Bfree>:
   2af14:	b131      	cbz	r1, 2af24 <_Bfree+0x10>
   2af16:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   2af18:	684a      	ldr	r2, [r1, #4]
   2af1a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2af1e:	6008      	str	r0, [r1, #0]
   2af20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2af24:	4770      	bx	lr
   2af26:	bf00      	nop

0002af28 <__multadd>:
   2af28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2af2c:	690d      	ldr	r5, [r1, #16]
   2af2e:	4607      	mov	r7, r0
   2af30:	460e      	mov	r6, r1
   2af32:	461c      	mov	r4, r3
   2af34:	f101 0e14 	add.w	lr, r1, #20
   2af38:	2000      	movs	r0, #0
   2af3a:	f8de 1000 	ldr.w	r1, [lr]
   2af3e:	b28b      	uxth	r3, r1
   2af40:	fb02 4303 	mla	r3, r2, r3, r4
   2af44:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2af48:	0c09      	lsrs	r1, r1, #16
   2af4a:	fb02 cc01 	mla	ip, r2, r1, ip
   2af4e:	3001      	adds	r0, #1
   2af50:	b29b      	uxth	r3, r3
   2af52:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   2af56:	4285      	cmp	r5, r0
   2af58:	f84e 3b04 	str.w	r3, [lr], #4
   2af5c:	ea4f 441c 	mov.w	r4, ip, lsr #16
   2af60:	dceb      	bgt.n	2af3a <__multadd+0x12>
   2af62:	b13c      	cbz	r4, 2af74 <__multadd+0x4c>
   2af64:	68b3      	ldr	r3, [r6, #8]
   2af66:	42ab      	cmp	r3, r5
   2af68:	dd07      	ble.n	2af7a <__multadd+0x52>
   2af6a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   2af6e:	3501      	adds	r5, #1
   2af70:	615c      	str	r4, [r3, #20]
   2af72:	6135      	str	r5, [r6, #16]
   2af74:	4630      	mov	r0, r6
   2af76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2af7a:	6871      	ldr	r1, [r6, #4]
   2af7c:	4638      	mov	r0, r7
   2af7e:	3101      	adds	r1, #1
   2af80:	f7ff ffa2 	bl	2aec8 <_Balloc>
   2af84:	4680      	mov	r8, r0
   2af86:	b1a8      	cbz	r0, 2afb4 <__multadd+0x8c>
   2af88:	6932      	ldr	r2, [r6, #16]
   2af8a:	3202      	adds	r2, #2
   2af8c:	f106 010c 	add.w	r1, r6, #12
   2af90:	0092      	lsls	r2, r2, #2
   2af92:	300c      	adds	r0, #12
   2af94:	f7ed faf4 	bl	18580 <memcpy>
   2af98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
   2af9a:	6872      	ldr	r2, [r6, #4]
   2af9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2afa0:	6031      	str	r1, [r6, #0]
   2afa2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2afa6:	4646      	mov	r6, r8
   2afa8:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   2afac:	3501      	adds	r5, #1
   2afae:	615c      	str	r4, [r3, #20]
   2afb0:	6135      	str	r5, [r6, #16]
   2afb2:	e7df      	b.n	2af74 <__multadd+0x4c>
   2afb4:	4b02      	ldr	r3, [pc, #8]	@ (2afc0 <__multadd+0x98>)
   2afb6:	4803      	ldr	r0, [pc, #12]	@ (2afc4 <__multadd+0x9c>)
   2afb8:	4642      	mov	r2, r8
   2afba:	21ba      	movs	r1, #186	@ 0xba
   2afbc:	f7fa f8dc 	bl	25178 <__assert_func>
   2afc0:	0003fb24 	.word	0x0003fb24
   2afc4:	0003fb9c 	.word	0x0003fb9c

0002afc8 <__hi0bits>:
   2afc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
   2afcc:	4603      	mov	r3, r0
   2afce:	bf36      	itet	cc
   2afd0:	0403      	lslcc	r3, r0, #16
   2afd2:	2000      	movcs	r0, #0
   2afd4:	2010      	movcc	r0, #16
   2afd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
   2afda:	bf3c      	itt	cc
   2afdc:	021b      	lslcc	r3, r3, #8
   2afde:	3008      	addcc	r0, #8
   2afe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
   2afe4:	bf3c      	itt	cc
   2afe6:	011b      	lslcc	r3, r3, #4
   2afe8:	3004      	addcc	r0, #4
   2afea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
   2afee:	d303      	bcc.n	2aff8 <__hi0bits+0x30>
   2aff0:	2b00      	cmp	r3, #0
   2aff2:	db06      	blt.n	2b002 <__hi0bits+0x3a>
   2aff4:	3001      	adds	r0, #1
   2aff6:	4770      	bx	lr
   2aff8:	009b      	lsls	r3, r3, #2
   2affa:	d403      	bmi.n	2b004 <__hi0bits+0x3c>
   2affc:	005b      	lsls	r3, r3, #1
   2affe:	d403      	bmi.n	2b008 <__hi0bits+0x40>
   2b000:	2020      	movs	r0, #32
   2b002:	4770      	bx	lr
   2b004:	3002      	adds	r0, #2
   2b006:	4770      	bx	lr
   2b008:	3003      	adds	r0, #3
   2b00a:	4770      	bx	lr

0002b00c <__lo0bits>:
   2b00c:	6803      	ldr	r3, [r0, #0]
   2b00e:	f013 0207 	ands.w	r2, r3, #7
   2b012:	4601      	mov	r1, r0
   2b014:	d007      	beq.n	2b026 <__lo0bits+0x1a>
   2b016:	07da      	lsls	r2, r3, #31
   2b018:	d41f      	bmi.n	2b05a <__lo0bits+0x4e>
   2b01a:	0798      	lsls	r0, r3, #30
   2b01c:	d521      	bpl.n	2b062 <__lo0bits+0x56>
   2b01e:	085b      	lsrs	r3, r3, #1
   2b020:	600b      	str	r3, [r1, #0]
   2b022:	2001      	movs	r0, #1
   2b024:	4770      	bx	lr
   2b026:	b298      	uxth	r0, r3
   2b028:	b1a0      	cbz	r0, 2b054 <__lo0bits+0x48>
   2b02a:	4610      	mov	r0, r2
   2b02c:	b2da      	uxtb	r2, r3
   2b02e:	b90a      	cbnz	r2, 2b034 <__lo0bits+0x28>
   2b030:	3008      	adds	r0, #8
   2b032:	0a1b      	lsrs	r3, r3, #8
   2b034:	071a      	lsls	r2, r3, #28
   2b036:	bf04      	itt	eq
   2b038:	091b      	lsreq	r3, r3, #4
   2b03a:	3004      	addeq	r0, #4
   2b03c:	079a      	lsls	r2, r3, #30
   2b03e:	bf04      	itt	eq
   2b040:	089b      	lsreq	r3, r3, #2
   2b042:	3002      	addeq	r0, #2
   2b044:	07da      	lsls	r2, r3, #31
   2b046:	d403      	bmi.n	2b050 <__lo0bits+0x44>
   2b048:	085b      	lsrs	r3, r3, #1
   2b04a:	f100 0001 	add.w	r0, r0, #1
   2b04e:	d006      	beq.n	2b05e <__lo0bits+0x52>
   2b050:	600b      	str	r3, [r1, #0]
   2b052:	4770      	bx	lr
   2b054:	0c1b      	lsrs	r3, r3, #16
   2b056:	2010      	movs	r0, #16
   2b058:	e7e8      	b.n	2b02c <__lo0bits+0x20>
   2b05a:	2000      	movs	r0, #0
   2b05c:	4770      	bx	lr
   2b05e:	2020      	movs	r0, #32
   2b060:	4770      	bx	lr
   2b062:	089b      	lsrs	r3, r3, #2
   2b064:	600b      	str	r3, [r1, #0]
   2b066:	2002      	movs	r0, #2
   2b068:	4770      	bx	lr
   2b06a:	bf00      	nop

0002b06c <__i2b>:
   2b06c:	b538      	push	{r3, r4, r5, lr}
   2b06e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   2b070:	4604      	mov	r4, r0
   2b072:	460d      	mov	r5, r1
   2b074:	b14b      	cbz	r3, 2b08a <__i2b+0x1e>
   2b076:	6858      	ldr	r0, [r3, #4]
   2b078:	b1b0      	cbz	r0, 2b0a8 <__i2b+0x3c>
   2b07a:	6802      	ldr	r2, [r0, #0]
   2b07c:	605a      	str	r2, [r3, #4]
   2b07e:	2200      	movs	r2, #0
   2b080:	2301      	movs	r3, #1
   2b082:	e9c0 2303 	strd	r2, r3, [r0, #12]
   2b086:	6145      	str	r5, [r0, #20]
   2b088:	bd38      	pop	{r3, r4, r5, pc}
   2b08a:	2221      	movs	r2, #33	@ 0x21
   2b08c:	2104      	movs	r1, #4
   2b08e:	f000 fae1 	bl	2b654 <_calloc_r>
   2b092:	4603      	mov	r3, r0
   2b094:	6460      	str	r0, [r4, #68]	@ 0x44
   2b096:	2800      	cmp	r0, #0
   2b098:	d1ed      	bne.n	2b076 <__i2b+0xa>
   2b09a:	4b09      	ldr	r3, [pc, #36]	@ (2b0c0 <__i2b+0x54>)
   2b09c:	4809      	ldr	r0, [pc, #36]	@ (2b0c4 <__i2b+0x58>)
   2b09e:	2200      	movs	r2, #0
   2b0a0:	f240 1145 	movw	r1, #325	@ 0x145
   2b0a4:	f7fa f868 	bl	25178 <__assert_func>
   2b0a8:	221c      	movs	r2, #28
   2b0aa:	2101      	movs	r1, #1
   2b0ac:	4620      	mov	r0, r4
   2b0ae:	f000 fad1 	bl	2b654 <_calloc_r>
   2b0b2:	2800      	cmp	r0, #0
   2b0b4:	d0f1      	beq.n	2b09a <__i2b+0x2e>
   2b0b6:	2201      	movs	r2, #1
   2b0b8:	2302      	movs	r3, #2
   2b0ba:	e9c0 2301 	strd	r2, r3, [r0, #4]
   2b0be:	e7de      	b.n	2b07e <__i2b+0x12>
   2b0c0:	0003fb24 	.word	0x0003fb24
   2b0c4:	0003fb9c 	.word	0x0003fb9c

0002b0c8 <__multiply>:
   2b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b0cc:	f8d1 8010 	ldr.w	r8, [r1, #16]
   2b0d0:	6915      	ldr	r5, [r2, #16]
   2b0d2:	45a8      	cmp	r8, r5
   2b0d4:	b085      	sub	sp, #20
   2b0d6:	460e      	mov	r6, r1
   2b0d8:	4692      	mov	sl, r2
   2b0da:	db05      	blt.n	2b0e8 <__multiply+0x20>
   2b0dc:	462a      	mov	r2, r5
   2b0de:	4653      	mov	r3, sl
   2b0e0:	4645      	mov	r5, r8
   2b0e2:	468a      	mov	sl, r1
   2b0e4:	4690      	mov	r8, r2
   2b0e6:	461e      	mov	r6, r3
   2b0e8:	f8da 3008 	ldr.w	r3, [sl, #8]
   2b0ec:	f8da 1004 	ldr.w	r1, [sl, #4]
   2b0f0:	eb05 0408 	add.w	r4, r5, r8
   2b0f4:	42a3      	cmp	r3, r4
   2b0f6:	bfb8      	it	lt
   2b0f8:	3101      	addlt	r1, #1
   2b0fa:	f7ff fee5 	bl	2aec8 <_Balloc>
   2b0fe:	4684      	mov	ip, r0
   2b100:	2800      	cmp	r0, #0
   2b102:	f000 808b 	beq.w	2b21c <__multiply+0x154>
   2b106:	f100 0714 	add.w	r7, r0, #20
   2b10a:	eb07 0e84 	add.w	lr, r7, r4, lsl #2
   2b10e:	4577      	cmp	r7, lr
   2b110:	d205      	bcs.n	2b11e <__multiply+0x56>
   2b112:	463b      	mov	r3, r7
   2b114:	2200      	movs	r2, #0
   2b116:	f843 2b04 	str.w	r2, [r3], #4
   2b11a:	459e      	cmp	lr, r3
   2b11c:	d8fb      	bhi.n	2b116 <__multiply+0x4e>
   2b11e:	3614      	adds	r6, #20
   2b120:	eb06 0888 	add.w	r8, r6, r8, lsl #2
   2b124:	f10a 0914 	add.w	r9, sl, #20
   2b128:	4546      	cmp	r6, r8
   2b12a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   2b12e:	d266      	bcs.n	2b1fe <__multiply+0x136>
   2b130:	eba5 030a 	sub.w	r3, r5, sl
   2b134:	3b15      	subs	r3, #21
   2b136:	f023 0303 	bic.w	r3, r3, #3
   2b13a:	f10a 0a15 	add.w	sl, sl, #21
   2b13e:	3304      	adds	r3, #4
   2b140:	4555      	cmp	r5, sl
   2b142:	bf2c      	ite	cs
   2b144:	469b      	movcs	fp, r3
   2b146:	f04f 0b04 	movcc.w	fp, #4
   2b14a:	f8cd e008 	str.w	lr, [sp, #8]
   2b14e:	9403      	str	r4, [sp, #12]
   2b150:	46ae      	mov	lr, r5
   2b152:	46e2      	mov	sl, ip
   2b154:	e005      	b.n	2b162 <__multiply+0x9a>
   2b156:	0c09      	lsrs	r1, r1, #16
   2b158:	d12a      	bne.n	2b1b0 <__multiply+0xe8>
   2b15a:	45b0      	cmp	r8, r6
   2b15c:	f107 0704 	add.w	r7, r7, #4
   2b160:	d94a      	bls.n	2b1f8 <__multiply+0x130>
   2b162:	f856 1b04 	ldr.w	r1, [r6], #4
   2b166:	b28d      	uxth	r5, r1
   2b168:	2d00      	cmp	r5, #0
   2b16a:	d0f4      	beq.n	2b156 <__multiply+0x8e>
   2b16c:	46cc      	mov	ip, r9
   2b16e:	463c      	mov	r4, r7
   2b170:	2300      	movs	r3, #0
   2b172:	9601      	str	r6, [sp, #4]
   2b174:	f85c 0b04 	ldr.w	r0, [ip], #4
   2b178:	6821      	ldr	r1, [r4, #0]
   2b17a:	b286      	uxth	r6, r0
   2b17c:	b28a      	uxth	r2, r1
   2b17e:	0c00      	lsrs	r0, r0, #16
   2b180:	fb05 2206 	mla	r2, r5, r6, r2
   2b184:	0c09      	lsrs	r1, r1, #16
   2b186:	441a      	add	r2, r3
   2b188:	fb05 1100 	mla	r1, r5, r0, r1
   2b18c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2b190:	b292      	uxth	r2, r2
   2b192:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   2b196:	45e6      	cmp	lr, ip
   2b198:	f844 2b04 	str.w	r2, [r4], #4
   2b19c:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2b1a0:	d8e8      	bhi.n	2b174 <__multiply+0xac>
   2b1a2:	9e01      	ldr	r6, [sp, #4]
   2b1a4:	f847 300b 	str.w	r3, [r7, fp]
   2b1a8:	f856 1c04 	ldr.w	r1, [r6, #-4]
   2b1ac:	0c09      	lsrs	r1, r1, #16
   2b1ae:	d0d4      	beq.n	2b15a <__multiply+0x92>
   2b1b0:	683b      	ldr	r3, [r7, #0]
   2b1b2:	2200      	movs	r2, #0
   2b1b4:	4648      	mov	r0, r9
   2b1b6:	461d      	mov	r5, r3
   2b1b8:	463c      	mov	r4, r7
   2b1ba:	4694      	mov	ip, r2
   2b1bc:	8802      	ldrh	r2, [r0, #0]
   2b1be:	fb01 c202 	mla	r2, r1, r2, ip
   2b1c2:	eb02 4215 	add.w	r2, r2, r5, lsr #16
   2b1c6:	b29b      	uxth	r3, r3
   2b1c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b1cc:	f844 3b04 	str.w	r3, [r4], #4
   2b1d0:	f850 3b04 	ldr.w	r3, [r0], #4
   2b1d4:	6825      	ldr	r5, [r4, #0]
   2b1d6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2b1da:	b2ab      	uxth	r3, r5
   2b1dc:	fb01 330c 	mla	r3, r1, ip, r3
   2b1e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2b1e4:	4570      	cmp	r0, lr
   2b1e6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2b1ea:	d3e7      	bcc.n	2b1bc <__multiply+0xf4>
   2b1ec:	45b0      	cmp	r8, r6
   2b1ee:	f847 300b 	str.w	r3, [r7, fp]
   2b1f2:	f107 0704 	add.w	r7, r7, #4
   2b1f6:	d8b4      	bhi.n	2b162 <__multiply+0x9a>
   2b1f8:	e9dd e402 	ldrd	lr, r4, [sp, #8]
   2b1fc:	46d4      	mov	ip, sl
   2b1fe:	2c00      	cmp	r4, #0
   2b200:	dc02      	bgt.n	2b208 <__multiply+0x140>
   2b202:	e005      	b.n	2b210 <__multiply+0x148>
   2b204:	3c01      	subs	r4, #1
   2b206:	d003      	beq.n	2b210 <__multiply+0x148>
   2b208:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   2b20c:	2b00      	cmp	r3, #0
   2b20e:	d0f9      	beq.n	2b204 <__multiply+0x13c>
   2b210:	4660      	mov	r0, ip
   2b212:	f8cc 4010 	str.w	r4, [ip, #16]
   2b216:	b005      	add	sp, #20
   2b218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b21c:	4b03      	ldr	r3, [pc, #12]	@ (2b22c <__multiply+0x164>)
   2b21e:	4804      	ldr	r0, [pc, #16]	@ (2b230 <__multiply+0x168>)
   2b220:	4662      	mov	r2, ip
   2b222:	f44f 71b1 	mov.w	r1, #354	@ 0x162
   2b226:	f7f9 ffa7 	bl	25178 <__assert_func>
   2b22a:	bf00      	nop
   2b22c:	0003fb24 	.word	0x0003fb24
   2b230:	0003fb9c 	.word	0x0003fb9c

0002b234 <__pow5mult>:
   2b234:	f012 0303 	ands.w	r3, r2, #3
   2b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b23c:	4614      	mov	r4, r2
   2b23e:	4607      	mov	r7, r0
   2b240:	d12c      	bne.n	2b29c <__pow5mult+0x68>
   2b242:	460d      	mov	r5, r1
   2b244:	10a4      	asrs	r4, r4, #2
   2b246:	d01c      	beq.n	2b282 <__pow5mult+0x4e>
   2b248:	6c3e      	ldr	r6, [r7, #64]	@ 0x40
   2b24a:	b386      	cbz	r6, 2b2ae <__pow5mult+0x7a>
   2b24c:	07e3      	lsls	r3, r4, #31
   2b24e:	f04f 0800 	mov.w	r8, #0
   2b252:	d406      	bmi.n	2b262 <__pow5mult+0x2e>
   2b254:	1064      	asrs	r4, r4, #1
   2b256:	d014      	beq.n	2b282 <__pow5mult+0x4e>
   2b258:	6830      	ldr	r0, [r6, #0]
   2b25a:	b1a8      	cbz	r0, 2b288 <__pow5mult+0x54>
   2b25c:	4606      	mov	r6, r0
   2b25e:	07e3      	lsls	r3, r4, #31
   2b260:	d5f8      	bpl.n	2b254 <__pow5mult+0x20>
   2b262:	4632      	mov	r2, r6
   2b264:	4629      	mov	r1, r5
   2b266:	4638      	mov	r0, r7
   2b268:	f7ff ff2e 	bl	2b0c8 <__multiply>
   2b26c:	b135      	cbz	r5, 2b27c <__pow5mult+0x48>
   2b26e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
   2b270:	6869      	ldr	r1, [r5, #4]
   2b272:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   2b276:	602a      	str	r2, [r5, #0]
   2b278:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   2b27c:	1064      	asrs	r4, r4, #1
   2b27e:	4605      	mov	r5, r0
   2b280:	d1ea      	bne.n	2b258 <__pow5mult+0x24>
   2b282:	4628      	mov	r0, r5
   2b284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b288:	4632      	mov	r2, r6
   2b28a:	4631      	mov	r1, r6
   2b28c:	4638      	mov	r0, r7
   2b28e:	f7ff ff1b 	bl	2b0c8 <__multiply>
   2b292:	6030      	str	r0, [r6, #0]
   2b294:	f8c0 8000 	str.w	r8, [r0]
   2b298:	4606      	mov	r6, r0
   2b29a:	e7e0      	b.n	2b25e <__pow5mult+0x2a>
   2b29c:	3b01      	subs	r3, #1
   2b29e:	4a0f      	ldr	r2, [pc, #60]	@ (2b2dc <__pow5mult+0xa8>)
   2b2a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   2b2a4:	2300      	movs	r3, #0
   2b2a6:	f7ff fe3f 	bl	2af28 <__multadd>
   2b2aa:	4605      	mov	r5, r0
   2b2ac:	e7ca      	b.n	2b244 <__pow5mult+0x10>
   2b2ae:	2101      	movs	r1, #1
   2b2b0:	4638      	mov	r0, r7
   2b2b2:	f7ff fe09 	bl	2aec8 <_Balloc>
   2b2b6:	4606      	mov	r6, r0
   2b2b8:	b140      	cbz	r0, 2b2cc <__pow5mult+0x98>
   2b2ba:	2301      	movs	r3, #1
   2b2bc:	f240 2271 	movw	r2, #625	@ 0x271
   2b2c0:	e9c0 3204 	strd	r3, r2, [r0, #16]
   2b2c4:	2300      	movs	r3, #0
   2b2c6:	6438      	str	r0, [r7, #64]	@ 0x40
   2b2c8:	6003      	str	r3, [r0, #0]
   2b2ca:	e7bf      	b.n	2b24c <__pow5mult+0x18>
   2b2cc:	4b04      	ldr	r3, [pc, #16]	@ (2b2e0 <__pow5mult+0xac>)
   2b2ce:	4805      	ldr	r0, [pc, #20]	@ (2b2e4 <__pow5mult+0xb0>)
   2b2d0:	4632      	mov	r2, r6
   2b2d2:	f240 1145 	movw	r1, #325	@ 0x145
   2b2d6:	f7f9 ff4f 	bl	25178 <__assert_func>
   2b2da:	bf00      	nop
   2b2dc:	00047484 	.word	0x00047484
   2b2e0:	0003fb24 	.word	0x0003fb24
   2b2e4:	0003fb9c 	.word	0x0003fb9c

0002b2e8 <__lshift>:
   2b2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b2ec:	460c      	mov	r4, r1
   2b2ee:	4690      	mov	r8, r2
   2b2f0:	6927      	ldr	r7, [r4, #16]
   2b2f2:	68a3      	ldr	r3, [r4, #8]
   2b2f4:	6849      	ldr	r1, [r1, #4]
   2b2f6:	eb07 1762 	add.w	r7, r7, r2, asr #5
   2b2fa:	1c7d      	adds	r5, r7, #1
   2b2fc:	429d      	cmp	r5, r3
   2b2fe:	4606      	mov	r6, r0
   2b300:	ea4f 1962 	mov.w	r9, r2, asr #5
   2b304:	dd04      	ble.n	2b310 <__lshift+0x28>
   2b306:	005b      	lsls	r3, r3, #1
   2b308:	429d      	cmp	r5, r3
   2b30a:	f101 0101 	add.w	r1, r1, #1
   2b30e:	dcfa      	bgt.n	2b306 <__lshift+0x1e>
   2b310:	4630      	mov	r0, r6
   2b312:	f7ff fdd9 	bl	2aec8 <_Balloc>
   2b316:	4684      	mov	ip, r0
   2b318:	2800      	cmp	r0, #0
   2b31a:	d051      	beq.n	2b3c0 <__lshift+0xd8>
   2b31c:	f1b9 0f00 	cmp.w	r9, #0
   2b320:	f100 0014 	add.w	r0, r0, #20
   2b324:	dd0e      	ble.n	2b344 <__lshift+0x5c>
   2b326:	f109 0205 	add.w	r2, r9, #5
   2b32a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   2b32e:	4603      	mov	r3, r0
   2b330:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   2b334:	2100      	movs	r1, #0
   2b336:	f843 1b04 	str.w	r1, [r3], #4
   2b33a:	4293      	cmp	r3, r2
   2b33c:	d1fb      	bne.n	2b336 <__lshift+0x4e>
   2b33e:	f1ae 0314 	sub.w	r3, lr, #20
   2b342:	4418      	add	r0, r3
   2b344:	6921      	ldr	r1, [r4, #16]
   2b346:	f104 0314 	add.w	r3, r4, #20
   2b34a:	f018 081f 	ands.w	r8, r8, #31
   2b34e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2b352:	d02d      	beq.n	2b3b0 <__lshift+0xc8>
   2b354:	f1c8 0920 	rsb	r9, r8, #32
   2b358:	4686      	mov	lr, r0
   2b35a:	f04f 0a00 	mov.w	sl, #0
   2b35e:	681a      	ldr	r2, [r3, #0]
   2b360:	fa02 f208 	lsl.w	r2, r2, r8
   2b364:	ea42 020a 	orr.w	r2, r2, sl
   2b368:	f84e 2b04 	str.w	r2, [lr], #4
   2b36c:	f853 2b04 	ldr.w	r2, [r3], #4
   2b370:	4299      	cmp	r1, r3
   2b372:	fa22 fa09 	lsr.w	sl, r2, r9
   2b376:	d8f2      	bhi.n	2b35e <__lshift+0x76>
   2b378:	1b0b      	subs	r3, r1, r4
   2b37a:	3b15      	subs	r3, #21
   2b37c:	f023 0303 	bic.w	r3, r3, #3
   2b380:	3304      	adds	r3, #4
   2b382:	f104 0215 	add.w	r2, r4, #21
   2b386:	4291      	cmp	r1, r2
   2b388:	bf38      	it	cc
   2b38a:	2304      	movcc	r3, #4
   2b38c:	f840 a003 	str.w	sl, [r0, r3]
   2b390:	f1ba 0f00 	cmp.w	sl, #0
   2b394:	d100      	bne.n	2b398 <__lshift+0xb0>
   2b396:	463d      	mov	r5, r7
   2b398:	6c73      	ldr	r3, [r6, #68]	@ 0x44
   2b39a:	6862      	ldr	r2, [r4, #4]
   2b39c:	f8cc 5010 	str.w	r5, [ip, #16]
   2b3a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2b3a4:	6021      	str	r1, [r4, #0]
   2b3a6:	4660      	mov	r0, ip
   2b3a8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2b3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b3b0:	3804      	subs	r0, #4
   2b3b2:	f853 2b04 	ldr.w	r2, [r3], #4
   2b3b6:	f840 2f04 	str.w	r2, [r0, #4]!
   2b3ba:	4299      	cmp	r1, r3
   2b3bc:	d8f9      	bhi.n	2b3b2 <__lshift+0xca>
   2b3be:	e7ea      	b.n	2b396 <__lshift+0xae>
   2b3c0:	4b03      	ldr	r3, [pc, #12]	@ (2b3d0 <__lshift+0xe8>)
   2b3c2:	4804      	ldr	r0, [pc, #16]	@ (2b3d4 <__lshift+0xec>)
   2b3c4:	4662      	mov	r2, ip
   2b3c6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
   2b3ca:	f7f9 fed5 	bl	25178 <__assert_func>
   2b3ce:	bf00      	nop
   2b3d0:	0003fb24 	.word	0x0003fb24
   2b3d4:	0003fb9c 	.word	0x0003fb9c

0002b3d8 <__mcmp>:
   2b3d8:	690b      	ldr	r3, [r1, #16]
   2b3da:	4684      	mov	ip, r0
   2b3dc:	6900      	ldr	r0, [r0, #16]
   2b3de:	1ac0      	subs	r0, r0, r3
   2b3e0:	d116      	bne.n	2b410 <__mcmp+0x38>
   2b3e2:	f10c 0c14 	add.w	ip, ip, #20
   2b3e6:	3114      	adds	r1, #20
   2b3e8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   2b3ec:	b410      	push	{r4}
   2b3ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   2b3f2:	e001      	b.n	2b3f8 <__mcmp+0x20>
   2b3f4:	4594      	cmp	ip, r2
   2b3f6:	d208      	bcs.n	2b40a <__mcmp+0x32>
   2b3f8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   2b3fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2b400:	428c      	cmp	r4, r1
   2b402:	d0f7      	beq.n	2b3f4 <__mcmp+0x1c>
   2b404:	d205      	bcs.n	2b412 <__mcmp+0x3a>
   2b406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2b40a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b40e:	4770      	bx	lr
   2b410:	4770      	bx	lr
   2b412:	2001      	movs	r0, #1
   2b414:	f85d 4b04 	ldr.w	r4, [sp], #4
   2b418:	4770      	bx	lr
   2b41a:	bf00      	nop

0002b41c <__mdiff>:
   2b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b420:	4615      	mov	r5, r2
   2b422:	690a      	ldr	r2, [r1, #16]
   2b424:	692b      	ldr	r3, [r5, #16]
   2b426:	1ad2      	subs	r2, r2, r3
   2b428:	2a00      	cmp	r2, #0
   2b42a:	b083      	sub	sp, #12
   2b42c:	4688      	mov	r8, r1
   2b42e:	f040 8087 	bne.w	2b540 <__mdiff+0x124>
   2b432:	f101 0614 	add.w	r6, r1, #20
   2b436:	f105 0114 	add.w	r1, r5, #20
   2b43a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   2b43e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   2b442:	e001      	b.n	2b448 <__mdiff+0x2c>
   2b444:	429e      	cmp	r6, r3
   2b446:	d27e      	bcs.n	2b546 <__mdiff+0x12a>
   2b448:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2b44c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2b450:	4294      	cmp	r4, r2
   2b452:	d0f7      	beq.n	2b444 <__mdiff+0x28>
   2b454:	d375      	bcc.n	2b542 <__mdiff+0x126>
   2b456:	462b      	mov	r3, r5
   2b458:	2400      	movs	r4, #0
   2b45a:	4645      	mov	r5, r8
   2b45c:	4698      	mov	r8, r3
   2b45e:	6869      	ldr	r1, [r5, #4]
   2b460:	f7ff fd32 	bl	2aec8 <_Balloc>
   2b464:	4681      	mov	r9, r0
   2b466:	2800      	cmp	r0, #0
   2b468:	f000 8089 	beq.w	2b57e <__mdiff+0x162>
   2b46c:	692e      	ldr	r6, [r5, #16]
   2b46e:	60c4      	str	r4, [r0, #12]
   2b470:	f8d8 0010 	ldr.w	r0, [r8, #16]
   2b474:	f105 0b14 	add.w	fp, r5, #20
   2b478:	f108 0e14 	add.w	lr, r8, #20
   2b47c:	f109 0a14 	add.w	sl, r9, #20
   2b480:	f105 0210 	add.w	r2, r5, #16
   2b484:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   2b488:	eb0b 0186 	add.w	r1, fp, r6, lsl #2
   2b48c:	4657      	mov	r7, sl
   2b48e:	f04f 0c00 	mov.w	ip, #0
   2b492:	f8cd b004 	str.w	fp, [sp, #4]
   2b496:	f85e 4b04 	ldr.w	r4, [lr], #4
   2b49a:	f852 5f04 	ldr.w	r5, [r2, #4]!
   2b49e:	fa1f fb84 	uxth.w	fp, r4
   2b4a2:	b2ab      	uxth	r3, r5
   2b4a4:	eba3 030b 	sub.w	r3, r3, fp
   2b4a8:	0c24      	lsrs	r4, r4, #16
   2b4aa:	4463      	add	r3, ip
   2b4ac:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
   2b4b0:	eb04 4423 	add.w	r4, r4, r3, asr #16
   2b4b4:	b29b      	uxth	r3, r3
   2b4b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   2b4ba:	4570      	cmp	r0, lr
   2b4bc:	f847 3b04 	str.w	r3, [r7], #4
   2b4c0:	ea4f 4c24 	mov.w	ip, r4, asr #16
   2b4c4:	d8e7      	bhi.n	2b496 <__mdiff+0x7a>
   2b4c6:	eba0 0208 	sub.w	r2, r0, r8
   2b4ca:	f108 0815 	add.w	r8, r8, #21
   2b4ce:	4540      	cmp	r0, r8
   2b4d0:	f1a2 0215 	sub.w	r2, r2, #21
   2b4d4:	bf34      	ite	cc
   2b4d6:	2000      	movcc	r0, #0
   2b4d8:	2001      	movcs	r0, #1
   2b4da:	0892      	lsrs	r2, r2, #2
   2b4dc:	2800      	cmp	r0, #0
   2b4de:	f8dd b004 	ldr.w	fp, [sp, #4]
   2b4e2:	f102 0401 	add.w	r4, r2, #1
   2b4e6:	ea4f 0484 	mov.w	r4, r4, lsl #2
   2b4ea:	bf08      	it	eq
   2b4ec:	2404      	moveq	r4, #4
   2b4ee:	eb0b 0504 	add.w	r5, fp, r4
   2b4f2:	42a9      	cmp	r1, r5
   2b4f4:	4454      	add	r4, sl
   2b4f6:	d933      	bls.n	2b560 <__mdiff+0x144>
   2b4f8:	4627      	mov	r7, r4
   2b4fa:	4628      	mov	r0, r5
   2b4fc:	f850 3b04 	ldr.w	r3, [r0], #4
   2b500:	fa1c fe83 	uxtah	lr, ip, r3
   2b504:	0c1a      	lsrs	r2, r3, #16
   2b506:	4463      	add	r3, ip
   2b508:	eb02 422e 	add.w	r2, r2, lr, asr #16
   2b50c:	b29b      	uxth	r3, r3
   2b50e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2b512:	4281      	cmp	r1, r0
   2b514:	f847 3b04 	str.w	r3, [r7], #4
   2b518:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2b51c:	d8ee      	bhi.n	2b4fc <__mdiff+0xe0>
   2b51e:	3901      	subs	r1, #1
   2b520:	1b49      	subs	r1, r1, r5
   2b522:	f021 0103 	bic.w	r1, r1, #3
   2b526:	440c      	add	r4, r1
   2b528:	b923      	cbnz	r3, 2b534 <__mdiff+0x118>
   2b52a:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2b52e:	3e01      	subs	r6, #1
   2b530:	2b00      	cmp	r3, #0
   2b532:	d0fa      	beq.n	2b52a <__mdiff+0x10e>
   2b534:	4648      	mov	r0, r9
   2b536:	f8c9 6010 	str.w	r6, [r9, #16]
   2b53a:	b003      	add	sp, #12
   2b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b540:	da89      	bge.n	2b456 <__mdiff+0x3a>
   2b542:	2401      	movs	r4, #1
   2b544:	e78b      	b.n	2b45e <__mdiff+0x42>
   2b546:	2100      	movs	r1, #0
   2b548:	f7ff fcbe 	bl	2aec8 <_Balloc>
   2b54c:	4681      	mov	r9, r0
   2b54e:	b178      	cbz	r0, 2b570 <__mdiff+0x154>
   2b550:	2201      	movs	r2, #1
   2b552:	2300      	movs	r3, #0
   2b554:	e9c0 2304 	strd	r2, r3, [r0, #16]
   2b558:	4648      	mov	r0, r9
   2b55a:	b003      	add	sp, #12
   2b55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b560:	2800      	cmp	r0, #0
   2b562:	ea4f 0282 	mov.w	r2, r2, lsl #2
   2b566:	bf08      	it	eq
   2b568:	2200      	moveq	r2, #0
   2b56a:	eb0a 0402 	add.w	r4, sl, r2
   2b56e:	e7db      	b.n	2b528 <__mdiff+0x10c>
   2b570:	4b06      	ldr	r3, [pc, #24]	@ (2b58c <__mdiff+0x170>)
   2b572:	4807      	ldr	r0, [pc, #28]	@ (2b590 <__mdiff+0x174>)
   2b574:	464a      	mov	r2, r9
   2b576:	f240 2137 	movw	r1, #567	@ 0x237
   2b57a:	f7f9 fdfd 	bl	25178 <__assert_func>
   2b57e:	4b03      	ldr	r3, [pc, #12]	@ (2b58c <__mdiff+0x170>)
   2b580:	4803      	ldr	r0, [pc, #12]	@ (2b590 <__mdiff+0x174>)
   2b582:	464a      	mov	r2, r9
   2b584:	f240 2145 	movw	r1, #581	@ 0x245
   2b588:	f7f9 fdf6 	bl	25178 <__assert_func>
   2b58c:	0003fb24 	.word	0x0003fb24
   2b590:	0003fb9c 	.word	0x0003fb9c

0002b594 <__d2b>:
   2b594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b598:	460e      	mov	r6, r1
   2b59a:	b083      	sub	sp, #12
   2b59c:	2101      	movs	r1, #1
   2b59e:	ec59 8b10 	vmov	r8, r9, d0
   2b5a2:	4615      	mov	r5, r2
   2b5a4:	f7ff fc90 	bl	2aec8 <_Balloc>
   2b5a8:	4604      	mov	r4, r0
   2b5aa:	2800      	cmp	r0, #0
   2b5ac:	d046      	beq.n	2b63c <__d2b+0xa8>
   2b5ae:	f3c9 570a 	ubfx	r7, r9, #20, #11
   2b5b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2b5b6:	b10f      	cbz	r7, 2b5bc <__d2b+0x28>
   2b5b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
   2b5bc:	9301      	str	r3, [sp, #4]
   2b5be:	f1b8 0300 	subs.w	r3, r8, #0
   2b5c2:	d113      	bne.n	2b5ec <__d2b+0x58>
   2b5c4:	a801      	add	r0, sp, #4
   2b5c6:	f7ff fd21 	bl	2b00c <__lo0bits>
   2b5ca:	9b01      	ldr	r3, [sp, #4]
   2b5cc:	6163      	str	r3, [r4, #20]
   2b5ce:	2201      	movs	r2, #1
   2b5d0:	3020      	adds	r0, #32
   2b5d2:	6122      	str	r2, [r4, #16]
   2b5d4:	b30f      	cbz	r7, 2b61a <__d2b+0x86>
   2b5d6:	f2a7 4733 	subw	r7, r7, #1075	@ 0x433
   2b5da:	4407      	add	r7, r0
   2b5dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
   2b5e0:	6037      	str	r7, [r6, #0]
   2b5e2:	6028      	str	r0, [r5, #0]
   2b5e4:	4620      	mov	r0, r4
   2b5e6:	b003      	add	sp, #12
   2b5e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b5ec:	4668      	mov	r0, sp
   2b5ee:	9300      	str	r3, [sp, #0]
   2b5f0:	f7ff fd0c 	bl	2b00c <__lo0bits>
   2b5f4:	9b01      	ldr	r3, [sp, #4]
   2b5f6:	b1f8      	cbz	r0, 2b638 <__d2b+0xa4>
   2b5f8:	9900      	ldr	r1, [sp, #0]
   2b5fa:	f1c0 0220 	rsb	r2, r0, #32
   2b5fe:	fa03 f202 	lsl.w	r2, r3, r2
   2b602:	40c3      	lsrs	r3, r0
   2b604:	430a      	orrs	r2, r1
   2b606:	9301      	str	r3, [sp, #4]
   2b608:	2b00      	cmp	r3, #0
   2b60a:	6162      	str	r2, [r4, #20]
   2b60c:	bf0c      	ite	eq
   2b60e:	2201      	moveq	r2, #1
   2b610:	2202      	movne	r2, #2
   2b612:	61a3      	str	r3, [r4, #24]
   2b614:	6122      	str	r2, [r4, #16]
   2b616:	2f00      	cmp	r7, #0
   2b618:	d1dd      	bne.n	2b5d6 <__d2b+0x42>
   2b61a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2b61e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
   2b622:	6030      	str	r0, [r6, #0]
   2b624:	6918      	ldr	r0, [r3, #16]
   2b626:	f7ff fccf 	bl	2afc8 <__hi0bits>
   2b62a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2b62e:	6028      	str	r0, [r5, #0]
   2b630:	4620      	mov	r0, r4
   2b632:	b003      	add	sp, #12
   2b634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b638:	9a00      	ldr	r2, [sp, #0]
   2b63a:	e7e5      	b.n	2b608 <__d2b+0x74>
   2b63c:	4b03      	ldr	r3, [pc, #12]	@ (2b64c <__d2b+0xb8>)
   2b63e:	4804      	ldr	r0, [pc, #16]	@ (2b650 <__d2b+0xbc>)
   2b640:	4622      	mov	r2, r4
   2b642:	f240 310f 	movw	r1, #783	@ 0x30f
   2b646:	f7f9 fd97 	bl	25178 <__assert_func>
   2b64a:	bf00      	nop
   2b64c:	0003fb24 	.word	0x0003fb24
   2b650:	0003fb9c 	.word	0x0003fb9c

0002b654 <_calloc_r>:
   2b654:	b538      	push	{r3, r4, r5, lr}
   2b656:	fba1 1402 	umull	r1, r4, r1, r2
   2b65a:	bb54      	cbnz	r4, 2b6b2 <_calloc_r+0x5e>
   2b65c:	f7fb fe96 	bl	2738c <_malloc_r>
   2b660:	4605      	mov	r5, r0
   2b662:	b350      	cbz	r0, 2b6ba <_calloc_r+0x66>
   2b664:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2b668:	f022 0203 	bic.w	r2, r2, #3
   2b66c:	3a04      	subs	r2, #4
   2b66e:	2a24      	cmp	r2, #36	@ 0x24
   2b670:	d810      	bhi.n	2b694 <_calloc_r+0x40>
   2b672:	2a13      	cmp	r2, #19
   2b674:	d913      	bls.n	2b69e <_calloc_r+0x4a>
   2b676:	2a1b      	cmp	r2, #27
   2b678:	e9c0 4400 	strd	r4, r4, [r0]
   2b67c:	d916      	bls.n	2b6ac <_calloc_r+0x58>
   2b67e:	2a24      	cmp	r2, #36	@ 0x24
   2b680:	e9c0 4402 	strd	r4, r4, [r0, #8]
   2b684:	bf0a      	itet	eq
   2b686:	e9c0 4404 	strdeq	r4, r4, [r0, #16]
   2b68a:	f100 0210 	addne.w	r2, r0, #16
   2b68e:	f100 0218 	addeq.w	r2, r0, #24
   2b692:	e005      	b.n	2b6a0 <_calloc_r+0x4c>
   2b694:	4621      	mov	r1, r4
   2b696:	f7fb fb15 	bl	26cc4 <memset>
   2b69a:	4628      	mov	r0, r5
   2b69c:	bd38      	pop	{r3, r4, r5, pc}
   2b69e:	4602      	mov	r2, r0
   2b6a0:	2300      	movs	r3, #0
   2b6a2:	e9c2 3300 	strd	r3, r3, [r2]
   2b6a6:	6093      	str	r3, [r2, #8]
   2b6a8:	4628      	mov	r0, r5
   2b6aa:	bd38      	pop	{r3, r4, r5, pc}
   2b6ac:	f100 0208 	add.w	r2, r0, #8
   2b6b0:	e7f6      	b.n	2b6a0 <_calloc_r+0x4c>
   2b6b2:	f7fb fc21 	bl	26ef8 <__errno>
   2b6b6:	230c      	movs	r3, #12
   2b6b8:	6003      	str	r3, [r0, #0]
   2b6ba:	2500      	movs	r5, #0
   2b6bc:	4628      	mov	r0, r5
   2b6be:	bd38      	pop	{r3, r4, r5, pc}

0002b6c0 <__aeabi_d2lz>:
   2b6c0:	b538      	push	{r3, r4, r5, lr}
   2b6c2:	2200      	movs	r2, #0
   2b6c4:	2300      	movs	r3, #0
   2b6c6:	4604      	mov	r4, r0
   2b6c8:	460d      	mov	r5, r1
   2b6ca:	f7ed fc93 	bl	18ff4 <__aeabi_dcmplt>
   2b6ce:	b928      	cbnz	r0, 2b6dc <__aeabi_d2lz+0x1c>
   2b6d0:	4620      	mov	r0, r4
   2b6d2:	4629      	mov	r1, r5
   2b6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b6d8:	f000 b80a 	b.w	2b6f0 <__aeabi_d2ulz>
   2b6dc:	4620      	mov	r0, r4
   2b6de:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
   2b6e2:	f000 f805 	bl	2b6f0 <__aeabi_d2ulz>
   2b6e6:	4240      	negs	r0, r0
   2b6e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2b6ec:	bd38      	pop	{r3, r4, r5, pc}
   2b6ee:	bf00      	nop

0002b6f0 <__aeabi_d2ulz>:
   2b6f0:	b5d0      	push	{r4, r6, r7, lr}
   2b6f2:	4b0c      	ldr	r3, [pc, #48]	@ (2b724 <__aeabi_d2ulz+0x34>)
   2b6f4:	2200      	movs	r2, #0
   2b6f6:	4606      	mov	r6, r0
   2b6f8:	460f      	mov	r7, r1
   2b6fa:	f7ed fa09 	bl	18b10 <__aeabi_dmul>
   2b6fe:	f7ed fd99 	bl	19234 <__aeabi_d2uiz>
   2b702:	4604      	mov	r4, r0
   2b704:	f7ed f98a 	bl	18a1c <__aeabi_ui2d>
   2b708:	4b07      	ldr	r3, [pc, #28]	@ (2b728 <__aeabi_d2ulz+0x38>)
   2b70a:	2200      	movs	r2, #0
   2b70c:	f7ed fa00 	bl	18b10 <__aeabi_dmul>
   2b710:	4602      	mov	r2, r0
   2b712:	460b      	mov	r3, r1
   2b714:	4630      	mov	r0, r6
   2b716:	4639      	mov	r1, r7
   2b718:	f7ed f842 	bl	187a0 <__aeabi_dsub>
   2b71c:	f7ed fd8a 	bl	19234 <__aeabi_d2uiz>
   2b720:	4621      	mov	r1, r4
   2b722:	bdd0      	pop	{r4, r6, r7, pc}
   2b724:	3df00000 	.word	0x3df00000
   2b728:	41f00000 	.word	0x41f00000

0002b72c <__udivmoddi4>:
   2b72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b730:	9d08      	ldr	r5, [sp, #32]
   2b732:	460e      	mov	r6, r1
   2b734:	4604      	mov	r4, r0
   2b736:	460f      	mov	r7, r1
   2b738:	2b00      	cmp	r3, #0
   2b73a:	d14a      	bne.n	2b7d2 <__udivmoddi4+0xa6>
   2b73c:	4694      	mov	ip, r2
   2b73e:	458c      	cmp	ip, r1
   2b740:	fab2 f282 	clz	r2, r2
   2b744:	d960      	bls.n	2b808 <__udivmoddi4+0xdc>
   2b746:	b142      	cbz	r2, 2b75a <__udivmoddi4+0x2e>
   2b748:	f1c2 0320 	rsb	r3, r2, #32
   2b74c:	4097      	lsls	r7, r2
   2b74e:	fa20 f303 	lsr.w	r3, r0, r3
   2b752:	fa0c fc02 	lsl.w	ip, ip, r2
   2b756:	431f      	orrs	r7, r3
   2b758:	4094      	lsls	r4, r2
   2b75a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   2b75e:	fa1f f68c 	uxth.w	r6, ip
   2b762:	fbb7 f1fe 	udiv	r1, r7, lr
   2b766:	0c23      	lsrs	r3, r4, #16
   2b768:	fb0e 7711 	mls	r7, lr, r1, r7
   2b76c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   2b770:	fb01 f006 	mul.w	r0, r1, r6
   2b774:	4298      	cmp	r0, r3
   2b776:	d90a      	bls.n	2b78e <__udivmoddi4+0x62>
   2b778:	eb1c 0303 	adds.w	r3, ip, r3
   2b77c:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
   2b780:	f080 8115 	bcs.w	2b9ae <__udivmoddi4+0x282>
   2b784:	4298      	cmp	r0, r3
   2b786:	f240 8112 	bls.w	2b9ae <__udivmoddi4+0x282>
   2b78a:	3902      	subs	r1, #2
   2b78c:	4463      	add	r3, ip
   2b78e:	1a1b      	subs	r3, r3, r0
   2b790:	b2a4      	uxth	r4, r4
   2b792:	fbb3 f0fe 	udiv	r0, r3, lr
   2b796:	fb0e 3310 	mls	r3, lr, r0, r3
   2b79a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2b79e:	fb00 f606 	mul.w	r6, r0, r6
   2b7a2:	42a6      	cmp	r6, r4
   2b7a4:	d90a      	bls.n	2b7bc <__udivmoddi4+0x90>
   2b7a6:	eb1c 0404 	adds.w	r4, ip, r4
   2b7aa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
   2b7ae:	f080 8100 	bcs.w	2b9b2 <__udivmoddi4+0x286>
   2b7b2:	42a6      	cmp	r6, r4
   2b7b4:	f240 80fd 	bls.w	2b9b2 <__udivmoddi4+0x286>
   2b7b8:	4464      	add	r4, ip
   2b7ba:	3802      	subs	r0, #2
   2b7bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   2b7c0:	1ba4      	subs	r4, r4, r6
   2b7c2:	2100      	movs	r1, #0
   2b7c4:	b11d      	cbz	r5, 2b7ce <__udivmoddi4+0xa2>
   2b7c6:	40d4      	lsrs	r4, r2
   2b7c8:	2300      	movs	r3, #0
   2b7ca:	e9c5 4300 	strd	r4, r3, [r5]
   2b7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b7d2:	428b      	cmp	r3, r1
   2b7d4:	d905      	bls.n	2b7e2 <__udivmoddi4+0xb6>
   2b7d6:	b10d      	cbz	r5, 2b7dc <__udivmoddi4+0xb0>
   2b7d8:	e9c5 0100 	strd	r0, r1, [r5]
   2b7dc:	2100      	movs	r1, #0
   2b7de:	4608      	mov	r0, r1
   2b7e0:	e7f5      	b.n	2b7ce <__udivmoddi4+0xa2>
   2b7e2:	fab3 f183 	clz	r1, r3
   2b7e6:	2900      	cmp	r1, #0
   2b7e8:	d146      	bne.n	2b878 <__udivmoddi4+0x14c>
   2b7ea:	42b3      	cmp	r3, r6
   2b7ec:	d302      	bcc.n	2b7f4 <__udivmoddi4+0xc8>
   2b7ee:	4282      	cmp	r2, r0
   2b7f0:	f200 80f5 	bhi.w	2b9de <__udivmoddi4+0x2b2>
   2b7f4:	1a84      	subs	r4, r0, r2
   2b7f6:	eb66 0203 	sbc.w	r2, r6, r3
   2b7fa:	2001      	movs	r0, #1
   2b7fc:	4617      	mov	r7, r2
   2b7fe:	2d00      	cmp	r5, #0
   2b800:	d0e5      	beq.n	2b7ce <__udivmoddi4+0xa2>
   2b802:	e9c5 4700 	strd	r4, r7, [r5]
   2b806:	e7e2      	b.n	2b7ce <__udivmoddi4+0xa2>
   2b808:	2a00      	cmp	r2, #0
   2b80a:	f040 8093 	bne.w	2b934 <__udivmoddi4+0x208>
   2b80e:	eba1 030c 	sub.w	r3, r1, ip
   2b812:	ea4f 471c 	mov.w	r7, ip, lsr #16
   2b816:	fa1f fe8c 	uxth.w	lr, ip
   2b81a:	2101      	movs	r1, #1
   2b81c:	fbb3 f6f7 	udiv	r6, r3, r7
   2b820:	fb07 3016 	mls	r0, r7, r6, r3
   2b824:	0c23      	lsrs	r3, r4, #16
   2b826:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   2b82a:	fb0e f006 	mul.w	r0, lr, r6
   2b82e:	4298      	cmp	r0, r3
   2b830:	d908      	bls.n	2b844 <__udivmoddi4+0x118>
   2b832:	eb1c 0303 	adds.w	r3, ip, r3
   2b836:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
   2b83a:	d202      	bcs.n	2b842 <__udivmoddi4+0x116>
   2b83c:	4298      	cmp	r0, r3
   2b83e:	f200 80d0 	bhi.w	2b9e2 <__udivmoddi4+0x2b6>
   2b842:	4646      	mov	r6, r8
   2b844:	1a1b      	subs	r3, r3, r0
   2b846:	b2a4      	uxth	r4, r4
   2b848:	fbb3 f0f7 	udiv	r0, r3, r7
   2b84c:	fb07 3310 	mls	r3, r7, r0, r3
   2b850:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2b854:	fb0e fe00 	mul.w	lr, lr, r0
   2b858:	45a6      	cmp	lr, r4
   2b85a:	d908      	bls.n	2b86e <__udivmoddi4+0x142>
   2b85c:	eb1c 0404 	adds.w	r4, ip, r4
   2b860:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
   2b864:	d202      	bcs.n	2b86c <__udivmoddi4+0x140>
   2b866:	45a6      	cmp	lr, r4
   2b868:	f200 80b6 	bhi.w	2b9d8 <__udivmoddi4+0x2ac>
   2b86c:	4618      	mov	r0, r3
   2b86e:	eba4 040e 	sub.w	r4, r4, lr
   2b872:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   2b876:	e7a5      	b.n	2b7c4 <__udivmoddi4+0x98>
   2b878:	f1c1 0720 	rsb	r7, r1, #32
   2b87c:	408b      	lsls	r3, r1
   2b87e:	fa22 fc07 	lsr.w	ip, r2, r7
   2b882:	ea4c 0c03 	orr.w	ip, ip, r3
   2b886:	fa06 fe01 	lsl.w	lr, r6, r1
   2b88a:	fa20 f407 	lsr.w	r4, r0, r7
   2b88e:	fa26 f307 	lsr.w	r3, r6, r7
   2b892:	ea44 040e 	orr.w	r4, r4, lr
   2b896:	fa00 f801 	lsl.w	r8, r0, r1
   2b89a:	ea4f 401c 	mov.w	r0, ip, lsr #16
   2b89e:	ea4f 4914 	mov.w	r9, r4, lsr #16
   2b8a2:	fbb3 fef0 	udiv	lr, r3, r0
   2b8a6:	fa1f f68c 	uxth.w	r6, ip
   2b8aa:	fb00 331e 	mls	r3, r0, lr, r3
   2b8ae:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   2b8b2:	fb0e f906 	mul.w	r9, lr, r6
   2b8b6:	4599      	cmp	r9, r3
   2b8b8:	fa02 f201 	lsl.w	r2, r2, r1
   2b8bc:	d90b      	bls.n	2b8d6 <__udivmoddi4+0x1aa>
   2b8be:	eb1c 0303 	adds.w	r3, ip, r3
   2b8c2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
   2b8c6:	f080 8085 	bcs.w	2b9d4 <__udivmoddi4+0x2a8>
   2b8ca:	4599      	cmp	r9, r3
   2b8cc:	f240 8082 	bls.w	2b9d4 <__udivmoddi4+0x2a8>
   2b8d0:	f1ae 0e02 	sub.w	lr, lr, #2
   2b8d4:	4463      	add	r3, ip
   2b8d6:	eba3 0909 	sub.w	r9, r3, r9
   2b8da:	b2a4      	uxth	r4, r4
   2b8dc:	fbb9 f3f0 	udiv	r3, r9, r0
   2b8e0:	fb00 9913 	mls	r9, r0, r3, r9
   2b8e4:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
   2b8e8:	fb03 f606 	mul.w	r6, r3, r6
   2b8ec:	42a6      	cmp	r6, r4
   2b8ee:	d908      	bls.n	2b902 <__udivmoddi4+0x1d6>
   2b8f0:	eb1c 0404 	adds.w	r4, ip, r4
   2b8f4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
   2b8f8:	d268      	bcs.n	2b9cc <__udivmoddi4+0x2a0>
   2b8fa:	42a6      	cmp	r6, r4
   2b8fc:	d966      	bls.n	2b9cc <__udivmoddi4+0x2a0>
   2b8fe:	3b02      	subs	r3, #2
   2b900:	4464      	add	r4, ip
   2b902:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
   2b906:	1ba4      	subs	r4, r4, r6
   2b908:	fba0 e602 	umull	lr, r6, r0, r2
   2b90c:	42b4      	cmp	r4, r6
   2b90e:	4673      	mov	r3, lr
   2b910:	46b1      	mov	r9, r6
   2b912:	d352      	bcc.n	2b9ba <__udivmoddi4+0x28e>
   2b914:	d04f      	beq.n	2b9b6 <__udivmoddi4+0x28a>
   2b916:	b15d      	cbz	r5, 2b930 <__udivmoddi4+0x204>
   2b918:	ebb8 0203 	subs.w	r2, r8, r3
   2b91c:	eb64 0409 	sbc.w	r4, r4, r9
   2b920:	fa04 f707 	lsl.w	r7, r4, r7
   2b924:	fa22 f301 	lsr.w	r3, r2, r1
   2b928:	431f      	orrs	r7, r3
   2b92a:	40cc      	lsrs	r4, r1
   2b92c:	e9c5 7400 	strd	r7, r4, [r5]
   2b930:	2100      	movs	r1, #0
   2b932:	e74c      	b.n	2b7ce <__udivmoddi4+0xa2>
   2b934:	f1c2 0120 	rsb	r1, r2, #32
   2b938:	fa20 f301 	lsr.w	r3, r0, r1
   2b93c:	fa0c fc02 	lsl.w	ip, ip, r2
   2b940:	fa26 f101 	lsr.w	r1, r6, r1
   2b944:	4096      	lsls	r6, r2
   2b946:	4333      	orrs	r3, r6
   2b948:	ea4f 471c 	mov.w	r7, ip, lsr #16
   2b94c:	fa1f fe8c 	uxth.w	lr, ip
   2b950:	fbb1 f0f7 	udiv	r0, r1, r7
   2b954:	fb07 1610 	mls	r6, r7, r0, r1
   2b958:	0c19      	lsrs	r1, r3, #16
   2b95a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
   2b95e:	fb00 f60e 	mul.w	r6, r0, lr
   2b962:	428e      	cmp	r6, r1
   2b964:	fa04 f402 	lsl.w	r4, r4, r2
   2b968:	d908      	bls.n	2b97c <__udivmoddi4+0x250>
   2b96a:	eb1c 0101 	adds.w	r1, ip, r1
   2b96e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
   2b972:	d22d      	bcs.n	2b9d0 <__udivmoddi4+0x2a4>
   2b974:	428e      	cmp	r6, r1
   2b976:	d92b      	bls.n	2b9d0 <__udivmoddi4+0x2a4>
   2b978:	3802      	subs	r0, #2
   2b97a:	4461      	add	r1, ip
   2b97c:	1b89      	subs	r1, r1, r6
   2b97e:	b29b      	uxth	r3, r3
   2b980:	fbb1 f6f7 	udiv	r6, r1, r7
   2b984:	fb07 1116 	mls	r1, r7, r6, r1
   2b988:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2b98c:	fb06 f10e 	mul.w	r1, r6, lr
   2b990:	4299      	cmp	r1, r3
   2b992:	d908      	bls.n	2b9a6 <__udivmoddi4+0x27a>
   2b994:	eb1c 0303 	adds.w	r3, ip, r3
   2b998:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
   2b99c:	d214      	bcs.n	2b9c8 <__udivmoddi4+0x29c>
   2b99e:	4299      	cmp	r1, r3
   2b9a0:	d912      	bls.n	2b9c8 <__udivmoddi4+0x29c>
   2b9a2:	3e02      	subs	r6, #2
   2b9a4:	4463      	add	r3, ip
   2b9a6:	1a5b      	subs	r3, r3, r1
   2b9a8:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
   2b9ac:	e736      	b.n	2b81c <__udivmoddi4+0xf0>
   2b9ae:	4639      	mov	r1, r7
   2b9b0:	e6ed      	b.n	2b78e <__udivmoddi4+0x62>
   2b9b2:	4618      	mov	r0, r3
   2b9b4:	e702      	b.n	2b7bc <__udivmoddi4+0x90>
   2b9b6:	45f0      	cmp	r8, lr
   2b9b8:	d2ad      	bcs.n	2b916 <__udivmoddi4+0x1ea>
   2b9ba:	ebbe 0302 	subs.w	r3, lr, r2
   2b9be:	eb66 060c 	sbc.w	r6, r6, ip
   2b9c2:	3801      	subs	r0, #1
   2b9c4:	46b1      	mov	r9, r6
   2b9c6:	e7a6      	b.n	2b916 <__udivmoddi4+0x1ea>
   2b9c8:	4646      	mov	r6, r8
   2b9ca:	e7ec      	b.n	2b9a6 <__udivmoddi4+0x27a>
   2b9cc:	4603      	mov	r3, r0
   2b9ce:	e798      	b.n	2b902 <__udivmoddi4+0x1d6>
   2b9d0:	4640      	mov	r0, r8
   2b9d2:	e7d3      	b.n	2b97c <__udivmoddi4+0x250>
   2b9d4:	46d6      	mov	lr, sl
   2b9d6:	e77e      	b.n	2b8d6 <__udivmoddi4+0x1aa>
   2b9d8:	4464      	add	r4, ip
   2b9da:	3802      	subs	r0, #2
   2b9dc:	e747      	b.n	2b86e <__udivmoddi4+0x142>
   2b9de:	4608      	mov	r0, r1
   2b9e0:	e70d      	b.n	2b7fe <__udivmoddi4+0xd2>
   2b9e2:	3e02      	subs	r6, #2
   2b9e4:	4463      	add	r3, ip
   2b9e6:	e72d      	b.n	2b844 <__udivmoddi4+0x118>

0002b9e8 <_close>:
   2b9e8:	4b02      	ldr	r3, [pc, #8]	@ (2b9f4 <_close+0xc>)
   2b9ea:	2258      	movs	r2, #88	@ 0x58
   2b9ec:	601a      	str	r2, [r3, #0]
   2b9ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2b9f2:	4770      	bx	lr
   2b9f4:	10052634 	.word	0x10052634

0002b9f8 <_fstat>:
   2b9f8:	4b02      	ldr	r3, [pc, #8]	@ (2ba04 <_fstat+0xc>)
   2b9fa:	2258      	movs	r2, #88	@ 0x58
   2b9fc:	601a      	str	r2, [r3, #0]
   2b9fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2ba02:	4770      	bx	lr
   2ba04:	10052634 	.word	0x10052634

0002ba08 <_getpid>:
   2ba08:	4b02      	ldr	r3, [pc, #8]	@ (2ba14 <_getpid+0xc>)
   2ba0a:	2258      	movs	r2, #88	@ 0x58
   2ba0c:	601a      	str	r2, [r3, #0]
   2ba0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2ba12:	4770      	bx	lr
   2ba14:	10052634 	.word	0x10052634

0002ba18 <_isatty>:
   2ba18:	4b02      	ldr	r3, [pc, #8]	@ (2ba24 <_isatty+0xc>)
   2ba1a:	2258      	movs	r2, #88	@ 0x58
   2ba1c:	601a      	str	r2, [r3, #0]
   2ba1e:	2000      	movs	r0, #0
   2ba20:	4770      	bx	lr
   2ba22:	bf00      	nop
   2ba24:	10052634 	.word	0x10052634

0002ba28 <_kill>:
   2ba28:	4b02      	ldr	r3, [pc, #8]	@ (2ba34 <_kill+0xc>)
   2ba2a:	2258      	movs	r2, #88	@ 0x58
   2ba2c:	601a      	str	r2, [r3, #0]
   2ba2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2ba32:	4770      	bx	lr
   2ba34:	10052634 	.word	0x10052634

0002ba38 <_lseek>:
   2ba38:	4b02      	ldr	r3, [pc, #8]	@ (2ba44 <_lseek+0xc>)
   2ba3a:	2258      	movs	r2, #88	@ 0x58
   2ba3c:	601a      	str	r2, [r3, #0]
   2ba3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2ba42:	4770      	bx	lr
   2ba44:	10052634 	.word	0x10052634

0002ba48 <_read>:
   2ba48:	4b02      	ldr	r3, [pc, #8]	@ (2ba54 <_read+0xc>)
   2ba4a:	2258      	movs	r2, #88	@ 0x58
   2ba4c:	601a      	str	r2, [r3, #0]
   2ba4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2ba52:	4770      	bx	lr
   2ba54:	10052634 	.word	0x10052634

0002ba58 <_sbrk>:
   2ba58:	4a04      	ldr	r2, [pc, #16]	@ (2ba6c <_sbrk+0x14>)
   2ba5a:	4905      	ldr	r1, [pc, #20]	@ (2ba70 <_sbrk+0x18>)
   2ba5c:	6813      	ldr	r3, [r2, #0]
   2ba5e:	2b00      	cmp	r3, #0
   2ba60:	bf08      	it	eq
   2ba62:	460b      	moveq	r3, r1
   2ba64:	4418      	add	r0, r3
   2ba66:	6010      	str	r0, [r2, #0]
   2ba68:	4618      	mov	r0, r3
   2ba6a:	4770      	bx	lr
   2ba6c:	1005263c 	.word	0x1005263c
   2ba70:	10008000 	.word	0x10008000

0002ba74 <_write>:
   2ba74:	4b02      	ldr	r3, [pc, #8]	@ (2ba80 <_write+0xc>)
   2ba76:	2258      	movs	r2, #88	@ 0x58
   2ba78:	601a      	str	r2, [r3, #0]
   2ba7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2ba7e:	4770      	bx	lr
   2ba80:	10052634 	.word	0x10052634

0002ba84 <_exit>:
   2ba84:	e7fe      	b.n	2ba84 <_exit>
   2ba86:	bf00      	nop

0002ba88 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
    (void)itf;
    ns_usb_transaction_t rx;
    if (usb_config.rx_cb != NULL) {
   2ba88:	4b0c      	ldr	r3, [pc, #48]	@ (2babc <tud_cdc_rx_cb+0x34>)
   2ba8a:	699a      	ldr	r2, [r3, #24]
   2ba8c:	b192      	cbz	r2, 2bab4 <tud_cdc_rx_cb+0x2c>
void tud_cdc_rx_cb(uint8_t itf) {
   2ba8e:	b510      	push	{r4, lr}
        rx.handle = &usb_config;
        rx.rx_buffer = usb_config.rx_buffer;
   2ba90:	689c      	ldr	r4, [r3, #8]
        rx.tx_buffer = usb_config.tx_buffer;
   2ba92:	6919      	ldr	r1, [r3, #16]
void tud_cdc_rx_cb(uint8_t itf) {
   2ba94:	b084      	sub	sp, #16
        rx.rx_buffer = usb_config.rx_buffer;
   2ba96:	e9cd 3400 	strd	r3, r4, [sp]
        rx.status = AM_HAL_STATUS_SUCCESS;
   2ba9a:	2300      	movs	r3, #0
   2ba9c:	f88d 300c 	strb.w	r3, [sp, #12]
        rx.itf = itf;
   2baa0:	f88d 000d 	strb.w	r0, [sp, #13]
        rx.tx_buffer = usb_config.tx_buffer;
   2baa4:	9102      	str	r1, [sp, #8]
        usb_config.rx_cb(&rx);
   2baa6:	4668      	mov	r0, sp
   2baa8:	4790      	blx	r2
    }
    gGotUSBRx = 1;
   2baaa:	4b05      	ldr	r3, [pc, #20]	@ (2bac0 <tud_cdc_rx_cb+0x38>)
   2baac:	2201      	movs	r2, #1
   2baae:	701a      	strb	r2, [r3, #0]
    // ns_lp_printf("---rx---\n");
}
   2bab0:	b004      	add	sp, #16
   2bab2:	bd10      	pop	{r4, pc}
    gGotUSBRx = 1;
   2bab4:	4b02      	ldr	r3, [pc, #8]	@ (2bac0 <tud_cdc_rx_cb+0x38>)
   2bab6:	2201      	movs	r2, #1
   2bab8:	701a      	strb	r2, [r3, #0]
   2baba:	4770      	bx	lr
   2babc:	1000cb2c 	.word	0x1000cb2c
   2bac0:	10052a88 	.word	0x10052a88

0002bac4 <tud_cdc_tx_complete_cb>:

void tud_cdc_tx_complete_cb(uint8_t itf) {
    (void)itf;
    ns_usb_transaction_t rx;
    if (usb_config.tx_cb != NULL) {
   2bac4:	4b09      	ldr	r3, [pc, #36]	@ (2baec <tud_cdc_tx_complete_cb+0x28>)
   2bac6:	69da      	ldr	r2, [r3, #28]
   2bac8:	b17a      	cbz	r2, 2baea <tud_cdc_tx_complete_cb+0x26>
void tud_cdc_tx_complete_cb(uint8_t itf) {
   2baca:	b510      	push	{r4, lr}
        rx.handle = &usb_config;
        rx.rx_buffer = usb_config.rx_buffer;
   2bacc:	689c      	ldr	r4, [r3, #8]
        rx.tx_buffer = usb_config.tx_buffer;
   2bace:	6919      	ldr	r1, [r3, #16]
void tud_cdc_tx_complete_cb(uint8_t itf) {
   2bad0:	b084      	sub	sp, #16
        rx.rx_buffer = usb_config.rx_buffer;
   2bad2:	e9cd 3400 	strd	r3, r4, [sp]
        rx.status = AM_HAL_STATUS_SUCCESS;
   2bad6:	2300      	movs	r3, #0
        rx.itf = itf;
   2bad8:	f88d 000d 	strb.w	r0, [sp, #13]
        rx.tx_buffer = usb_config.tx_buffer;
   2badc:	9102      	str	r1, [sp, #8]
        rx.status = AM_HAL_STATUS_SUCCESS;
   2bade:	f88d 300c 	strb.w	r3, [sp, #12]
        usb_config.tx_cb(&rx);
   2bae2:	4668      	mov	r0, sp
   2bae4:	4790      	blx	r2
    }
    // ns_lp_printf("---tx---\n");
}
   2bae6:	b004      	add	sp, #16
   2bae8:	bd10      	pop	{r4, pc}
   2baea:	4770      	bx	lr
   2baec:	1000cb2c 	.word	0x1000cb2c

0002baf0 <tud_descriptor_device_cb>:

//*****************************************************************************
//! @brief Invoked when received GET DEVICE DESCRIPTOR
//! @return Application return pointer to descriptor
//*****************************************************************************
uint8_t const *tud_descriptor_device_cb(void) { return (uint8_t const *)&desc_device; }
   2baf0:	4800      	ldr	r0, [pc, #0]	@ (2baf4 <tud_descriptor_device_cb+0x4>)
   2baf2:	4770      	bx	lr
   2baf4:	0004773c 	.word	0x0004773c

0002baf8 <tud_descriptor_configuration_cb>:
//! @note Descriptor contents must exist long enough for transfer to complete
//!
//! @param index
//! @return Application return pointer to descriptor.
//*****************************************************************************
uint8_t const *tud_descriptor_configuration_cb(uint8_t index) {
   2baf8:	b508      	push	{r3, lr}
    (void)index; // for multiple configurations

#if TUD_OPT_HIGH_SPEED
    // Although we are highspeed, host may be fullspeed.
    return (tud_speed_get() == TUSB_SPEED_HIGH) ? desc_hs_configuration : desc_fs_configuration;
   2bafa:	f003 f821 	bl	2eb40 <tud_speed_get>
   2bafe:	4a03      	ldr	r2, [pc, #12]	@ (2bb0c <tud_descriptor_configuration_cb+0x14>)
   2bb00:	4b03      	ldr	r3, [pc, #12]	@ (2bb10 <tud_descriptor_configuration_cb+0x18>)
#else
    return desc_fs_configuration;
#endif
}
   2bb02:	2802      	cmp	r0, #2
   2bb04:	bf14      	ite	ne
   2bb06:	4610      	movne	r0, r2
   2bb08:	4618      	moveq	r0, r3
   2bb0a:	bd08      	pop	{r3, pc}
   2bb0c:	000476d4 	.word	0x000476d4
   2bb10:	00047670 	.word	0x00047670

0002bb14 <tud_descriptor_bos_cb>:
    TUD_BOS_WEBUSB_DESCRIPTOR(VENDOR_REQUEST_WEBUSB, 1),

    // Microsoft OS 2.0 descriptor
    TUD_BOS_MS_OS_20_DESCRIPTOR(MS_OS_20_DESC_LEN, VENDOR_REQUEST_MICROSOFT)};

uint8_t const *tud_descriptor_bos_cb(void) { return desc_bos; }
   2bb14:	4800      	ldr	r0, [pc, #0]	@ (2bb18 <tud_descriptor_bos_cb+0x4>)
   2bb16:	4770      	bx	lr
   2bb18:	00047634 	.word	0x00047634

0002bb1c <tud_descriptor_string_cb>:
//! @brief Invoked when received GET STRING DESCRIPTOR request
//!
//! @return Application return pointer to descriptor.
//
//*****************************************************************************
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
   2bb1c:	b538      	push	{r3, r4, r5, lr}
    (void)langid;

    uint8_t chr_count;

    if (index == 0) {
   2bb1e:	b950      	cbnz	r0, 2bb36 <tud_descriptor_string_cb+0x1a>
        memcpy(&_desc_str[1], usb_string_desc_arr[0], 2);
   2bb20:	4b1a      	ldr	r3, [pc, #104]	@ (2bb8c <tud_descriptor_string_cb+0x70>)
   2bb22:	4d1b      	ldr	r5, [pc, #108]	@ (2bb90 <tud_descriptor_string_cb+0x74>)
   2bb24:	681b      	ldr	r3, [r3, #0]
   2bb26:	881b      	ldrh	r3, [r3, #0]
   2bb28:	806b      	strh	r3, [r5, #2]
        chr_count = 1;
   2bb2a:	f44f 7c41 	mov.w	ip, #772	@ 0x304
    //
    // first byte is length (including header), second byte is string type
    //
    _desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * chr_count + 2);

    return _desc_str;
   2bb2e:	4818      	ldr	r0, [pc, #96]	@ (2bb90 <tud_descriptor_string_cb+0x74>)
    _desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * chr_count + 2);
   2bb30:	f8a5 c000 	strh.w	ip, [r5]
}
   2bb34:	bd38      	pop	{r3, r4, r5, pc}
        if (!(index < sizeof(usb_string_desc_arr) / sizeof(usb_string_desc_arr[0]))) {
   2bb36:	2805      	cmp	r0, #5
   2bb38:	d825      	bhi.n	2bb86 <tud_descriptor_string_cb+0x6a>
        const char *str = usb_string_desc_arr[index];
   2bb3a:	4b14      	ldr	r3, [pc, #80]	@ (2bb8c <tud_descriptor_string_cb+0x70>)
   2bb3c:	4d14      	ldr	r5, [pc, #80]	@ (2bb90 <tud_descriptor_string_cb+0x74>)
   2bb3e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
        chr_count = strlen(str);
   2bb42:	4620      	mov	r0, r4
   2bb44:	f7ec fdbc 	bl	186c0 <strlen>
   2bb48:	b2c0      	uxtb	r0, r0
        if (chr_count >= sizeof(_desc_str)) {
   2bb4a:	283f      	cmp	r0, #63	@ 0x3f
   2bb4c:	4686      	mov	lr, r0
   2bb4e:	bf28      	it	cs
   2bb50:	f04f 0e3f 	movcs.w	lr, #63	@ 0x3f
    _desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * chr_count + 2);
   2bb54:	f10e 0c01 	add.w	ip, lr, #1
   2bb58:	fa5f fc8c 	uxtb.w	ip, ip
   2bb5c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   2bb60:	f44c 7c40 	orr.w	ip, ip, #768	@ 0x300
        for (uint8_t i = 0; i < chr_count; i++) {
   2bb64:	2800      	cmp	r0, #0
   2bb66:	d0e2      	beq.n	2bb2e <tud_descriptor_string_cb+0x12>
   2bb68:	1e60      	subs	r0, r4, #1
   2bb6a:	462a      	mov	r2, r5
   2bb6c:	2300      	movs	r3, #0
            _desc_str[1 + i] = str[i];
   2bb6e:	3301      	adds	r3, #1
   2bb70:	b2db      	uxtb	r3, r3
   2bb72:	f810 1f01 	ldrb.w	r1, [r0, #1]!
   2bb76:	f822 1f02 	strh.w	r1, [r2, #2]!
        for (uint8_t i = 0; i < chr_count; i++) {
   2bb7a:	459e      	cmp	lr, r3
   2bb7c:	d8f7      	bhi.n	2bb6e <tud_descriptor_string_cb+0x52>
    return _desc_str;
   2bb7e:	4804      	ldr	r0, [pc, #16]	@ (2bb90 <tud_descriptor_string_cb+0x74>)
    _desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * chr_count + 2);
   2bb80:	f8a5 c000 	strh.w	ip, [r5]
    return _desc_str;
   2bb84:	e7d6      	b.n	2bb34 <tud_descriptor_string_cb+0x18>
            return NULL;
   2bb86:	2000      	movs	r0, #0
}
   2bb88:	bd38      	pop	{r3, r4, r5, pc}
   2bb8a:	bf00      	nop
   2bb8c:	1000ca7c 	.word	0x1000ca7c
   2bb90:	10052640 	.word	0x10052640

0002bb94 <tud_mount_cb>:
//--------------------------------------------------------------------+
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void) { webusb_connected = false; }
   2bb94:	4b01      	ldr	r3, [pc, #4]	@ (2bb9c <tud_mount_cb+0x8>)
   2bb96:	2200      	movs	r2, #0
   2bb98:	701a      	strb	r2, [r3, #0]
   2bb9a:	4770      	bx	lr
   2bb9c:	10052690 	.word	0x10052690

0002bba0 <tud_umount_cb>:

#ifndef TUSB_ADDED_FUNCTIONS
// Invoked when device is unmounted
void tud_umount_cb(void) { webusb_connected = false; }
   2bba0:	4b01      	ldr	r3, [pc, #4]	@ (2bba8 <tud_umount_cb+0x8>)
   2bba2:	2200      	movs	r2, #0
   2bba4:	701a      	strb	r2, [r3, #0]
   2bba6:	4770      	bx	lr
   2bba8:	10052690 	.word	0x10052690

0002bbac <tud_suspend_cb>:
// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en) {
    (void)remote_wakeup_en;
    webusb_connected = false;
   2bbac:	4b01      	ldr	r3, [pc, #4]	@ (2bbb4 <tud_suspend_cb+0x8>)
   2bbae:	2200      	movs	r2, #0
   2bbb0:	701a      	strb	r2, [r3, #0]
}
   2bbb2:	4770      	bx	lr
   2bbb4:	10052690 	.word	0x10052690

0002bbb8 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void) { webusb_connected = false; }
   2bbb8:	4b01      	ldr	r3, [pc, #4]	@ (2bbc0 <tud_resume_cb+0x8>)
   2bbba:	2200      	movs	r2, #0
   2bbbc:	701a      	strb	r2, [r3, #0]
   2bbbe:	4770      	bx	lr
   2bbc0:	10052690 	.word	0x10052690

0002bbc4 <tud_vendor_rx_cb>:

// Invoked when received new data
void tud_vendor_rx_cb(uint8_t itf) {
   2bbc4:	b570      	push	{r4, r5, r6, lr}
  return tud_vendor_n_available(0);
}

static inline uint32_t tud_vendor_read (void* buffer, uint32_t bufsize)
{
  return tud_vendor_n_read(0, buffer, bufsize);
   2bbc6:	4d16      	ldr	r5, [pc, #88]	@ (2bc20 <tud_vendor_rx_cb+0x5c>)
        BSTREAM_TO_UINT16(frame_header, p);

        // Skip frame header, then transfer buffer to callback function
        switch (frame_header) {
        case RX_ACORE_MSG:
            if (webusb_parameter.rx_msg_cb) {
   2bbc8:	4c16      	ldr	r4, [pc, #88]	@ (2bc24 <tud_vendor_rx_cb+0x60>)
                webusb_parameter.rx_msg_cb(
   2bbca:	1cae      	adds	r6, r5, #2
  return tud_vendor_n_available(0);
   2bbcc:	2000      	movs	r0, #0
   2bbce:	f003 fe59 	bl	2f884 <tud_vendor_n_available>
   2bbd2:	4603      	mov	r3, r0
  return tud_vendor_n_read(0, buffer, bufsize);
   2bbd4:	4912      	ldr	r1, [pc, #72]	@ (2bc20 <tud_vendor_rx_cb+0x5c>)
   2bbd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
   2bbda:	2000      	movs	r0, #0
    while (tud_vendor_available()) {
   2bbdc:	b1f3      	cbz	r3, 2bc1c <tud_vendor_rx_cb+0x58>
   2bbde:	f003 fe5d 	bl	2f89c <tud_vendor_n_read>
        BSTREAM_TO_UINT16(frame_header, p);
   2bbe2:	8829      	ldrh	r1, [r5, #0]
        switch (frame_header) {
   2bbe4:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
   2bbe8:	d008      	beq.n	2bbfc <tud_vendor_rx_cb+0x38>
   2bbea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   2bbee:	d00d      	beq.n	2bc0c <tud_vendor_rx_cb+0x48>
                webusb_parameter.rx_raw_cb(
                    p, bytes_rx - sizeof(frame_header), webusb_parameter.rx_raw_param);
            }
            break;
        default:
            ns_lp_printf("Error: Unsupported type of Rx Frame Header: %d\n", frame_header);
   2bbf0:	ba49      	rev16	r1, r1
   2bbf2:	480d      	ldr	r0, [pc, #52]	@ (2bc28 <tud_vendor_rx_cb+0x64>)
   2bbf4:	b289      	uxth	r1, r1
   2bbf6:	f000 f8ab 	bl	2bd50 <ns_lp_printf>
            break;
   2bbfa:	e7e7      	b.n	2bbcc <tud_vendor_rx_cb+0x8>
            if (webusb_parameter.rx_msg_cb) {
   2bbfc:	6823      	ldr	r3, [r4, #0]
                webusb_parameter.rx_msg_cb(
   2bbfe:	1e81      	subs	r1, r0, #2
   2bc00:	4630      	mov	r0, r6
            if (webusb_parameter.rx_msg_cb) {
   2bc02:	2b00      	cmp	r3, #0
   2bc04:	d0e2      	beq.n	2bbcc <tud_vendor_rx_cb+0x8>
                webusb_parameter.rx_msg_cb(
   2bc06:	68a2      	ldr	r2, [r4, #8]
   2bc08:	4798      	blx	r3
   2bc0a:	e7df      	b.n	2bbcc <tud_vendor_rx_cb+0x8>
            if (webusb_parameter.rx_raw_cb) {
   2bc0c:	6863      	ldr	r3, [r4, #4]
                webusb_parameter.rx_raw_cb(
   2bc0e:	1e81      	subs	r1, r0, #2
   2bc10:	4630      	mov	r0, r6
            if (webusb_parameter.rx_raw_cb) {
   2bc12:	2b00      	cmp	r3, #0
   2bc14:	d0da      	beq.n	2bbcc <tud_vendor_rx_cb+0x8>
                webusb_parameter.rx_raw_cb(
   2bc16:	68e2      	ldr	r2, [r4, #12]
   2bc18:	4798      	blx	r3
   2bc1a:	e7d7      	b.n	2bbcc <tud_vendor_rx_cb+0x8>
        }
    }
}
   2bc1c:	bd70      	pop	{r4, r5, r6, pc}
   2bc1e:	bf00      	nop
   2bc20:	10052694 	.word	0x10052694
   2bc24:	10052680 	.word	0x10052680
   2bc28:	0003fc3c 	.word	0x0003fc3c

0002bc2c <tud_vendor_control_xfer_cb>:
// (setup/data/ack) return false to stall control endpoint (e.g unsupported
// request)
bool tud_vendor_control_xfer_cb(
    uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
    // nothing to with DATA & ACK stage
    if (stage != CONTROL_STAGE_SETUP)
   2bc2c:	2901      	cmp	r1, #1
    uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
   2bc2e:	4694      	mov	ip, r2
    if (stage != CONTROL_STAGE_SETUP)
   2bc30:	d110      	bne.n	2bc54 <tud_vendor_control_xfer_cb+0x28>
        return true;
    switch (request->bmRequestType_bit.type) {
   2bc32:	7813      	ldrb	r3, [r2, #0]
   2bc34:	f3c3 1341 	ubfx	r3, r3, #5, #2
   2bc38:	2b01      	cmp	r3, #1
   2bc3a:	d00d      	beq.n	2bc58 <tud_vendor_control_xfer_cb+0x2c>
   2bc3c:	2b02      	cmp	r3, #2
   2bc3e:	d107      	bne.n	2bc50 <tud_vendor_control_xfer_cb+0x24>
    case TUSB_REQ_TYPE_VENDOR:
        switch (request->bRequest) {
   2bc40:	7853      	ldrb	r3, [r2, #1]
   2bc42:	2b01      	cmp	r3, #1
   2bc44:	d014      	beq.n	2bc70 <tud_vendor_control_xfer_cb+0x44>
   2bc46:	2b02      	cmp	r3, #2
   2bc48:	d102      	bne.n	2bc50 <tud_vendor_control_xfer_cb+0x24>
            // Get landing page url
            return tud_control_xfer(
                rhport, request, (void *)(uintptr_t)&desc_url, desc_url.bLength);

        case VENDOR_REQUEST_MICROSOFT:
            if (request->wIndex == DESC_MS_OS_20) {
   2bc4a:	8893      	ldrh	r3, [r2, #4]
   2bc4c:	2b07      	cmp	r3, #7
   2bc4e:	d014      	beq.n	2bc7a <tud_vendor_control_xfer_cb+0x4e>
   2bc50:	2000      	movs	r0, #0
        break;
    }

    // stall unknown request
    return false;
}
   2bc52:	4770      	bx	lr
        return true;
   2bc54:	2001      	movs	r0, #1
   2bc56:	4770      	bx	lr
        if (request->bRequest == WEBUSB_REQUEST_SET_CONTROL_LINE_STATE) {
   2bc58:	7853      	ldrb	r3, [r2, #1]
   2bc5a:	2b22      	cmp	r3, #34	@ 0x22
   2bc5c:	d1f8      	bne.n	2bc50 <tud_vendor_control_xfer_cb+0x24>
            if (request->wValue != 0) {
   2bc5e:	8853      	ldrh	r3, [r2, #2]
   2bc60:	4a08      	ldr	r2, [pc, #32]	@ (2bc84 <tud_vendor_control_xfer_cb+0x58>)
   2bc62:	3b00      	subs	r3, #0
   2bc64:	bf18      	it	ne
   2bc66:	2301      	movne	r3, #1
            return tud_control_status(rhport, request);
   2bc68:	4661      	mov	r1, ip
            if (request->wValue != 0) {
   2bc6a:	7013      	strb	r3, [r2, #0]
            return tud_control_status(rhport, request);
   2bc6c:	f003 bd40 	b.w	2f6f0 <tud_control_status>
            return tud_control_xfer(
   2bc70:	4a05      	ldr	r2, [pc, #20]	@ (2bc88 <tud_vendor_control_xfer_cb+0x5c>)
   2bc72:	2330      	movs	r3, #48	@ 0x30
   2bc74:	4661      	mov	r1, ip
   2bc76:	f003 bd53 	b.w	2f720 <tud_control_xfer>
                memcpy(&total_len, desc_ms_os_20 + 8, 2);
   2bc7a:	4a04      	ldr	r2, [pc, #16]	@ (2bc8c <tud_vendor_control_xfer_cb+0x60>)
                return tud_control_xfer(
   2bc7c:	4661      	mov	r1, ip
   2bc7e:	8913      	ldrh	r3, [r2, #8]
   2bc80:	f003 bd4e 	b.w	2f720 <tud_control_xfer>
   2bc84:	10052690 	.word	0x10052690
   2bc88:	00047750 	.word	0x00047750
   2bc8c:	00047580 	.word	0x00047580

0002bc90 <webusb_send_data>:
    // for (int i = 0; i < 5; i++) {
    //     ns_lp_printf("0x%02x ", buf[i]);
    // }
    // ns_lp_printf("\n");

    if (webusb_connected && buf) {
   2bc90:	4b12      	ldr	r3, [pc, #72]	@ (2bcdc <webusb_send_data+0x4c>)
uint32_t webusb_send_data(uint8_t *buf, uint32_t bufsize) {
   2bc92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (webusb_connected && buf) {
   2bc96:	781e      	ldrb	r6, [r3, #0]
   2bc98:	b196      	cbz	r6, 2bcc0 <webusb_send_data+0x30>
   2bc9a:	4607      	mov	r7, r0
   2bc9c:	b198      	cbz	r0, 2bcc6 <webusb_send_data+0x36>
   2bc9e:	4688      	mov	r8, r1
    uint32_t bufremain = bufsize;
   2bca0:	460c      	mov	r4, r1
   2bca2:	2529      	movs	r5, #41	@ 0x29
                ns_lp_printf("Warning: The number of rewriting is over %d\n", i);
                break;
            }

            // bytes_tx = tud_vendor_write_pkt((void *)(buf + bufsize - bufremain), bufremain);
            bytes_tx = tud_vendor_write((void *)(buf + bufsize - bufremain), bufremain);
   2bca4:	eba8 0604 	sub.w	r6, r8, r4
            if (i == REWRIT_NUMBER) {
   2bca8:	3d01      	subs	r5, #1
    tud_vendor_n_read_flush(0);
}

static inline uint32_t tud_vendor_write (void const* buffer, uint32_t bufsize)
{
  return tud_vendor_n_write(0, buffer, bufsize);
   2bcaa:	4622      	mov	r2, r4
   2bcac:	f04f 0000 	mov.w	r0, #0
   2bcb0:	eb07 0106 	add.w	r1, r7, r6
   2bcb4:	d00b      	beq.n	2bcce <webusb_send_data+0x3e>
   2bcb6:	f003 fe6f 	bl	2f998 <tud_vendor_n_write>
            // tud_vendor_write_flush();
            // ns_lp_printf("Sent %d of %d bytes\n", bytes_tx, bufsize);
            bufremain -= bytes_tx;

            i++;
        } while (bufremain);
   2bcba:	1a24      	subs	r4, r4, r0
   2bcbc:	d1f2      	bne.n	2bca4 <webusb_send_data+0x14>
   2bcbe:	4646      	mov	r6, r8
    if (bufremain) {
        // Collects the amount of data that has not been written
    }

    return bufsize - bufremain;
}
   2bcc0:	4630      	mov	r0, r6
   2bcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bcc6:	4606      	mov	r6, r0
   2bcc8:	4630      	mov	r0, r6
   2bcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ns_lp_printf("Warning: The number of rewriting is over %d\n", i);
   2bcce:	4804      	ldr	r0, [pc, #16]	@ (2bce0 <webusb_send_data+0x50>)
   2bcd0:	2128      	movs	r1, #40	@ 0x28
   2bcd2:	f000 f83d 	bl	2bd50 <ns_lp_printf>
}
   2bcd6:	4630      	mov	r0, r6
   2bcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bcdc:	10052690 	.word	0x10052690
   2bce0:	0003fc6c 	.word	0x0003fc6c

0002bce4 <webusb_register_raw_cb>:
    webusb_parameter.rx_msg_cb = cb;
    webusb_parameter.rx_msg_param = param;
}

void webusb_register_raw_cb(webusb_rx_cb cb, void *param) {
    webusb_parameter.rx_raw_cb = cb;
   2bce4:	4b01      	ldr	r3, [pc, #4]	@ (2bcec <webusb_register_raw_cb+0x8>)
   2bce6:	6058      	str	r0, [r3, #4]
    webusb_parameter.rx_raw_param = param;
   2bce8:	60d9      	str	r1, [r3, #12]
}
   2bcea:	4770      	bx	lr
   2bcec:	10052680 	.word	0x10052680

0002bcf0 <ns_itm_printf_enable>:

/**
 * @brief Wraps am_bsp_itm_printf_enable() to turn on crypto temporarily if needed
 *
 */
void ns_itm_printf_enable(void) {
   2bcf0:	b510      	push	{r4, lr}
    // Enable crypto only as long as needed
    if (g_ns_state.cryptoCurrentlyEnabled == false) {
   2bcf2:	4c0e      	ldr	r4, [pc, #56]	@ (2bd2c <ns_itm_printf_enable+0x3c>)
   2bcf4:	7aa3      	ldrb	r3, [r4, #10]
   2bcf6:	b143      	cbz	r3, 2bd0a <ns_itm_printf_enable+0x1a>
        am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_CRYPTO);
    }
    am_bsp_itm_printf_enable();
   2bcf8:	f007 fca6 	bl	33648 <am_bsp_itm_printf_enable>

    if (g_ns_state.cryptoWantsToBeEnabled == false) {
   2bcfc:	7a61      	ldrb	r1, [r4, #9]
   2bcfe:	b161      	cbz	r1, 2bd1a <ns_itm_printf_enable+0x2a>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
    }

    g_ns_state.itmPrintCurrentlyEnabled = true;
    g_ns_state.itmPrintWantsToBeEnabled = true;
   2bd00:	f240 1301 	movw	r3, #257	@ 0x101
   2bd04:	f8a4 3005 	strh.w	r3, [r4, #5]
}
   2bd08:	bd10      	pop	{r4, pc}
        am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_CRYPTO);
   2bd0a:	2014      	movs	r0, #20
   2bd0c:	f006 fcfa 	bl	32704 <am_hal_pwrctrl_periph_enable>
    am_bsp_itm_printf_enable();
   2bd10:	f007 fc9a 	bl	33648 <am_bsp_itm_printf_enable>
    if (g_ns_state.cryptoWantsToBeEnabled == false) {
   2bd14:	7a61      	ldrb	r1, [r4, #9]
   2bd16:	2900      	cmp	r1, #0
   2bd18:	d1f2      	bne.n	2bd00 <ns_itm_printf_enable+0x10>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
   2bd1a:	2001      	movs	r0, #1
   2bd1c:	f006 ff5e 	bl	32bdc <am_hal_pwrctrl_control>
    g_ns_state.itmPrintWantsToBeEnabled = true;
   2bd20:	f240 1301 	movw	r3, #257	@ 0x101
   2bd24:	f8a4 3005 	strh.w	r3, [r4, #5]
}
   2bd28:	bd10      	pop	{r4, pc}
   2bd2a:	bf00      	nop
   2bd2c:	1000cc88 	.word	0x1000cc88

0002bd30 <ns_cryptoless_itm_printf_disable>:
//! @brief Special disable doesn't turn disconnect SWO
//
//! @return 0 on success.
//
//*****************************************************************************
int32_t ns_cryptoless_itm_printf_disable(void) {
   2bd30:	b508      	push	{r3, lr}
    // Disable the ITM/TPIU
    am_hal_itm_disable();
   2bd32:	f006 f971 	bl	32018 <am_hal_itm_disable>

    // Detach the ITM interface from the STDIO driver.
    am_util_stdio_printf_init(0);
   2bd36:	2000      	movs	r0, #0
   2bd38:	f001 fb96 	bl	2d468 <am_util_stdio_printf_init>

    // Disconnect the SWO pin
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, am_hal_gpio_pincfg_disabled);
   2bd3c:	4b03      	ldr	r3, [pc, #12]	@ (2bd4c <ns_cryptoless_itm_printf_disable+0x1c>)
   2bd3e:	201c      	movs	r0, #28
   2bd40:	6819      	ldr	r1, [r3, #0]
   2bd42:	f006 f8b9 	bl	31eb8 <am_hal_gpio_pinconfig>

    return 0;
}
   2bd46:	2000      	movs	r0, #0
   2bd48:	bd08      	pop	{r3, pc}
   2bd4a:	bf00      	nop
   2bd4c:	000478e8 	.word	0x000478e8

0002bd50 <ns_lp_printf>:
 *

 * @param format
 * @param ...
 */
void ns_lp_printf(const char *format, ...) {
   2bd50:	b40f      	push	{r0, r1, r2, r3}
   2bd52:	b510      	push	{r4, lr}
    va_list myargs;

    if ((g_ns_state.uartPrintWantsToBeEnabled == false) &&
   2bd54:	4c16      	ldr	r4, [pc, #88]	@ (2bdb0 <ns_lp_printf+0x60>)
   2bd56:	7ae3      	ldrb	r3, [r4, #11]
void ns_lp_printf(const char *format, ...) {
   2bd58:	b082      	sub	sp, #8
    if ((g_ns_state.uartPrintWantsToBeEnabled == false) &&
   2bd5a:	b16b      	cbz	r3, 2bd78 <ns_lp_printf+0x28>
        (g_ns_state.itmPrintWantsToBeEnabled == false)) {
        // No print interface has been enabled, ns_lp_printf is a no-op
        return;
    }

    if ((g_ns_state.uartPrintWantsToBeEnabled) && (g_ns_state.uartPrintCurrentlyEnabled == false)) {
   2bd5c:	7b23      	ldrb	r3, [r4, #12]
   2bd5e:	b30b      	cbz	r3, 2bda4 <ns_lp_printf+0x54>
        am_bsp_uart_printf_enable();
        g_ns_state.uartPrintCurrentlyEnabled = true;
    } else if (
   2bd60:	7963      	ldrb	r3, [r4, #5]
   2bd62:	b963      	cbnz	r3, 2bd7e <ns_lp_printf+0x2e>
        (g_ns_state.itmPrintCurrentlyEnabled == false)) {
        ns_cryptoless_itm_printf_enable();
        g_ns_state.itmPrintCurrentlyEnabled = true;
    }

    va_start(myargs, format);
   2bd64:	a905      	add	r1, sp, #20
    am_util_stdio_vprintf(format, myargs);
   2bd66:	9804      	ldr	r0, [sp, #16]
    va_start(myargs, format);
   2bd68:	9101      	str	r1, [sp, #4]
    am_util_stdio_vprintf(format, myargs);
   2bd6a:	f001 fff3 	bl	2dd54 <am_util_stdio_vprintf>
    va_end(myargs);
}
   2bd6e:	b002      	add	sp, #8
   2bd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2bd74:	b004      	add	sp, #16
   2bd76:	4770      	bx	lr
    if ((g_ns_state.uartPrintWantsToBeEnabled == false) &&
   2bd78:	7963      	ldrb	r3, [r4, #5]
   2bd7a:	2b00      	cmp	r3, #0
   2bd7c:	d0f7      	beq.n	2bd6e <ns_lp_printf+0x1e>
        (g_ns_state.itmPrintWantsToBeEnabled == true) &&
   2bd7e:	79a3      	ldrb	r3, [r4, #6]
   2bd80:	2b00      	cmp	r3, #0
   2bd82:	d1ef      	bne.n	2bd64 <ns_lp_printf+0x14>
    am_hal_itm_enable();
   2bd84:	f006 f924 	bl	31fd0 <am_hal_itm_enable>
    am_hal_tpiu_enable(AM_HAL_TPIU_BAUD_1M);
   2bd88:	480a      	ldr	r0, [pc, #40]	@ (2bdb4 <ns_lp_printf+0x64>)
   2bd8a:	f007 fb39 	bl	33400 <am_hal_tpiu_enable>
    am_hal_gpio_pinconfig(AM_BSP_GPIO_ITM_SWO, g_AM_BSP_GPIO_ITM_SWO);
   2bd8e:	4b0a      	ldr	r3, [pc, #40]	@ (2bdb8 <ns_lp_printf+0x68>)
   2bd90:	201c      	movs	r0, #28
   2bd92:	6819      	ldr	r1, [r3, #0]
   2bd94:	f006 f890 	bl	31eb8 <am_hal_gpio_pinconfig>
    am_util_stdio_printf_init(am_hal_itm_print);
   2bd98:	4808      	ldr	r0, [pc, #32]	@ (2bdbc <ns_lp_printf+0x6c>)
   2bd9a:	f001 fb65 	bl	2d468 <am_util_stdio_printf_init>
        g_ns_state.itmPrintCurrentlyEnabled = true;
   2bd9e:	2301      	movs	r3, #1
   2bda0:	71a3      	strb	r3, [r4, #6]
   2bda2:	e7df      	b.n	2bd64 <ns_lp_printf+0x14>
        am_bsp_uart_printf_enable();
   2bda4:	f007 fc8e 	bl	336c4 <am_bsp_uart_printf_enable>
        g_ns_state.uartPrintCurrentlyEnabled = true;
   2bda8:	2301      	movs	r3, #1
   2bdaa:	7323      	strb	r3, [r4, #12]
   2bdac:	e7da      	b.n	2bd64 <ns_lp_printf+0x14>
   2bdae:	bf00      	nop
   2bdb0:	1000cc88 	.word	0x1000cc88
   2bdb4:	000f4240 	.word	0x000f4240
   2bdb8:	1000cc40 	.word	0x1000cc40
   2bdbc:	000320ed 	.word	0x000320ed

0002bdc0 <ns_power_config>:
// Main function for power configuration
uint32_t ns_power_config(const ns_power_config_t *pCfg) {
    uint32_t ui32ReturnStatus = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (pCfg == NULL) {
   2bdc0:	b188      	cbz	r0, 2bde6 <ns_power_config+0x26>
uint32_t ns_power_config(const ns_power_config_t *pCfg) {
   2bdc2:	b510      	push	{r4, lr}
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(
   2bdc4:	4a0a      	ldr	r2, [pc, #40]	@ (2bdf0 <ns_power_config+0x30>)
   2bdc6:	490b      	ldr	r1, [pc, #44]	@ (2bdf4 <ns_power_config+0x34>)
   2bdc8:	4604      	mov	r4, r0
   2bdca:	6800      	ldr	r0, [r0, #0]
   2bdcc:	f7ed fc22 	bl	19614 <ns_core_check_api>
   2bdd0:	b938      	cbnz	r0, 2bde2 <ns_power_config+0x22>
            pCfg->api, &ns_power_oldest_supported_version, &ns_power_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if (!ns_core_initialized()) {
   2bdd2:	f000 fa4d 	bl	2c270 <ns_core_initialized>
   2bdd6:	b140      	cbz	r0, 2bdea <ns_power_config+0x2a>
        // Power needs ns_core to be initialized first
        return NS_STATUS_INIT_FAILED;
    }
#endif

    ui32ReturnStatus = ns_power_platform_config(pCfg);
   2bdd8:	4620      	mov	r0, r4

    return ui32ReturnStatus;
}
   2bdda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui32ReturnStatus = ns_power_platform_config(pCfg);
   2bdde:	f000 b8b5 	b.w	2bf4c <ns_power_platform_config>
        return NS_STATUS_INVALID_VERSION;
   2bde2:	2002      	movs	r0, #2
}
   2bde4:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_HANDLE;
   2bde6:	2001      	movs	r0, #1
}
   2bde8:	4770      	bx	lr
        return NS_STATUS_INIT_FAILED;
   2bdea:	2004      	movs	r0, #4
}
   2bdec:	bd10      	pop	{r4, pc}
   2bdee:	bf00      	nop
   2bdf0:	00047784 	.word	0x00047784
   2bdf4:	00047790 	.word	0x00047790

0002bdf8 <ns_deep_sleep>:
 * systems as needed.
 *
 */
extern void ns_platform_deep_sleep(void);

void ns_deep_sleep(void) { ns_platform_deep_sleep(); }
   2bdf8:	f000 b93a 	b.w	2c070 <ns_platform_deep_sleep>

0002bdfc <ns_power_down_peripherals>:
//*****************************************************************************
//
// Internal method for turning off peripherals
//
//*****************************************************************************
void ns_power_down_peripherals(const ns_power_config_t *pCfg) {
   2bdfc:	b570      	push	{r4, r5, r6, lr}
   2bdfe:	4604      	mov	r4, r0

    //
    // Disable the XTAL.
    //
    am_hal_clkgen_control(AM_HAL_CLKGEN_CONTROL_RTC_SEL_LFRC, 0);
   2be00:	2100      	movs	r1, #0
   2be02:	2001      	movs	r0, #1
   2be04:	f005 fed6 	bl	31bb4 <am_hal_clkgen_control>

    //
    // Turn off the voltage comparator.
    //
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
   2be08:	4b4e      	ldr	r3, [pc, #312]	@ (2bf44 <ns_power_down_peripherals+0x148>)
    MCUCTRL->MRAMPWRCTRL_b.MRAMSLPEN = 0;
    MCUCTRL->MRAMPWRCTRL_b.MRAMLPREN = 1;
#endif
// return; ok
#ifdef AM_DEVICES_BLECTRLR_RESET_PIN
    if (pCfg->bNeedBluetooth == false) {
   2be0a:	7a26      	ldrb	r6, [r4, #8]
    VCOMP->PWDKEY = _VAL2FLD(VCOMP_PWDKEY_PWDKEY, VCOMP_PWDKEY_PWDKEY_Key);
   2be0c:	2537      	movs	r5, #55	@ 0x37
   2be0e:	609d      	str	r5, [r3, #8]
    if (pCfg->bNeedBluetooth == false) {
   2be10:	2e00      	cmp	r6, #0
   2be12:	d051      	beq.n	2beb8 <ns_power_down_peripherals+0xbc>
       // return; ok

    //
    // Disable all peripherals
    //
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOS);
   2be14:	2000      	movs	r0, #0
   2be16:	f006 fd45 	bl	328a4 <am_hal_pwrctrl_periph_disable>

    if (pCfg->bNeedIOM == false) {
   2be1a:	7aa3      	ldrb	r3, [r4, #10]
   2be1c:	2b00      	cmp	r3, #0
   2be1e:	d062      	beq.n	2bee6 <ns_power_down_peripherals+0xea>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM5);
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM6);
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM7);
    };

    if (pCfg->bNeedAlternativeUART == false) {
   2be20:	7ae3      	ldrb	r3, [r4, #11]
   2be22:	2b00      	cmp	r3, #0
   2be24:	d07a      	beq.n	2bf1c <ns_power_down_peripherals+0x120>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART0);
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART3);
    }

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART1);
   2be26:	200a      	movs	r0, #10
   2be28:	f006 fd3c 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART2);
   2be2c:	200b      	movs	r0, #11
   2be2e:	f006 fd39 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC);
   2be32:	200d      	movs	r0, #13
   2be34:	f006 fd36 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_MSPI0);
   2be38:	200e      	movs	r0, #14
   2be3a:	f006 fd33 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_MSPI1);
   2be3e:	200f      	movs	r0, #15
   2be40:	f006 fd30 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_MSPI2);
   2be44:	2010      	movs	r0, #16
   2be46:	f006 fd2d 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_GFX);
   2be4a:	2011      	movs	r0, #17
   2be4c:	f006 fd2a 	bl	328a4 <am_hal_pwrctrl_periph_disable>

#ifndef AM_PART_APOLLO4L
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DISP);
   2be50:	2012      	movs	r0, #18
   2be52:	f006 fd27 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DISPPHY);
   2be56:	2013      	movs	r0, #19
   2be58:	f006 fd24 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USB);
   2be5c:	2016      	movs	r0, #22
   2be5e:	f006 fd21 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USBPHY);
   2be62:	2017      	movs	r0, #23
   2be64:	f006 fd1e 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM1);
   2be68:	201c      	movs	r0, #28
   2be6a:	f006 fd1b 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM2);
   2be6e:	201d      	movs	r0, #29
   2be70:	f006 fd18 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM3);
   2be74:	201e      	movs	r0, #30
   2be76:	f006 fd15 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_I2S1);
   2be7a:	2020      	movs	r0, #32
   2be7c:	f006 fd12 	bl	328a4 <am_hal_pwrctrl_periph_disable>
#endif

    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_SDIO);
   2be80:	2015      	movs	r0, #21
   2be82:	f006 fd0f 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_DEBUG);
   2be86:	2018      	movs	r0, #24
   2be88:	f006 fd0c 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDREC);
   2be8c:	2019      	movs	r0, #25
   2be8e:	f006 fd09 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDPB);
   2be92:	201a      	movs	r0, #26
   2be94:	f006 fd06 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_PDM0);
   2be98:	201b      	movs	r0, #27
   2be9a:	f006 fd03 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_I2S0);
   2be9e:	201f      	movs	r0, #31
   2bea0:	f006 fd00 	bl	328a4 <am_hal_pwrctrl_periph_disable>
// return;
#ifndef AM_PART_APOLLO4L
    if (pCfg->bNeedAudAdc == false) {
   2bea4:	7963      	ldrb	r3, [r4, #5]
   2bea6:	2b00      	cmp	r3, #0
   2bea8:	d048      	beq.n	2bf3c <ns_power_down_peripherals+0x140>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDADC);
    }
#endif

    if (pCfg->bNeedCrypto == false) {
   2beaa:	79e1      	ldrb	r1, [r4, #7]
   2beac:	2900      	cmp	r1, #0
   2beae:	d041      	beq.n	2bf34 <ns_power_down_peripherals+0x138>
        // Power down Crypto.
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
    }
    // return;
    if (pCfg->bNeedBluetooth == false) {
   2beb0:	7a21      	ldrb	r1, [r4, #8]
   2beb2:	2900      	cmp	r1, #0
   2beb4:	d039      	beq.n	2bf2a <ns_power_down_peripherals+0x12e>
        // Since the only neuralSPOT examples needing freertos involve bluetooth,
        // use that flag for now.
        // XTAL powerdown
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_XTAL_PWDN_DEEPSLEEP, 0);
    }
}
   2beb6:	bd70      	pop	{r4, r5, r6, pc}
        am_hal_gpio_state_write(AM_DEVICES_BLECTRLR_RESET_PIN, AM_HAL_GPIO_OUTPUT_CLEAR);
   2beb8:	4631      	mov	r1, r6
   2beba:	4628      	mov	r0, r5
   2bebc:	f006 f828 	bl	31f10 <am_hal_gpio_state_write>
        am_hal_gpio_pinconfig(AM_DEVICES_BLECTRLR_RESET_PIN, am_hal_gpio_pincfg_output);
   2bec0:	4b21      	ldr	r3, [pc, #132]	@ (2bf48 <ns_power_down_peripherals+0x14c>)
   2bec2:	4628      	mov	r0, r5
   2bec4:	6819      	ldr	r1, [r3, #0]
   2bec6:	f005 fff7 	bl	31eb8 <am_hal_gpio_pinconfig>
        am_hal_gpio_state_write(AM_DEVICES_BLECTRLR_RESET_PIN, AM_HAL_GPIO_OUTPUT_SET);
   2beca:	2101      	movs	r1, #1
   2becc:	4628      	mov	r0, r5
   2bece:	f006 f81f 	bl	31f10 <am_hal_gpio_state_write>
        am_hal_gpio_state_write(AM_DEVICES_BLECTRLR_RESET_PIN, AM_HAL_GPIO_OUTPUT_CLEAR);
   2bed2:	4631      	mov	r1, r6
   2bed4:	4628      	mov	r0, r5
   2bed6:	f006 f81b 	bl	31f10 <am_hal_gpio_state_write>
    am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOS);
   2beda:	2000      	movs	r0, #0
   2bedc:	f006 fce2 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    if (pCfg->bNeedIOM == false) {
   2bee0:	7aa3      	ldrb	r3, [r4, #10]
   2bee2:	2b00      	cmp	r3, #0
   2bee4:	d19c      	bne.n	2be20 <ns_power_down_peripherals+0x24>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM0);
   2bee6:	2001      	movs	r0, #1
   2bee8:	f006 fcdc 	bl	328a4 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM1);
   2beec:	2002      	movs	r0, #2
   2beee:	f006 fcd9 	bl	328a4 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM2);
   2bef2:	2003      	movs	r0, #3
   2bef4:	f006 fcd6 	bl	328a4 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM3);
   2bef8:	2004      	movs	r0, #4
   2befa:	f006 fcd3 	bl	328a4 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM4);
   2befe:	2005      	movs	r0, #5
   2bf00:	f006 fcd0 	bl	328a4 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM5);
   2bf04:	2006      	movs	r0, #6
   2bf06:	f006 fccd 	bl	328a4 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM6);
   2bf0a:	2007      	movs	r0, #7
   2bf0c:	f006 fcca 	bl	328a4 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_IOM7);
   2bf10:	2008      	movs	r0, #8
   2bf12:	f006 fcc7 	bl	328a4 <am_hal_pwrctrl_periph_disable>
    if (pCfg->bNeedAlternativeUART == false) {
   2bf16:	7ae3      	ldrb	r3, [r4, #11]
   2bf18:	2b00      	cmp	r3, #0
   2bf1a:	d184      	bne.n	2be26 <ns_power_down_peripherals+0x2a>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART0);
   2bf1c:	2009      	movs	r0, #9
   2bf1e:	f006 fcc1 	bl	328a4 <am_hal_pwrctrl_periph_disable>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_UART3);
   2bf22:	200c      	movs	r0, #12
   2bf24:	f006 fcbe 	bl	328a4 <am_hal_pwrctrl_periph_disable>
   2bf28:	e77d      	b.n	2be26 <ns_power_down_peripherals+0x2a>
}
   2bf2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_XTAL_PWDN_DEEPSLEEP, 0);
   2bf2e:	2002      	movs	r0, #2
   2bf30:	f006 be54 	b.w	32bdc <am_hal_pwrctrl_control>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
   2bf34:	2001      	movs	r0, #1
   2bf36:	f006 fe51 	bl	32bdc <am_hal_pwrctrl_control>
   2bf3a:	e7b9      	b.n	2beb0 <ns_power_down_peripherals+0xb4>
        am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_AUDADC);
   2bf3c:	2021      	movs	r0, #33	@ 0x21
   2bf3e:	f006 fcb1 	bl	328a4 <am_hal_pwrctrl_periph_disable>
   2bf42:	e7b2      	b.n	2beaa <ns_power_down_peripherals+0xae>
   2bf44:	4000c000 	.word	0x4000c000
   2bf48:	000478ec 	.word	0x000478ec

0002bf4c <ns_power_platform_config>:

// Main function for power configuration
uint32_t ns_power_platform_config(const ns_power_config_t *pCfg) {
   2bf4c:	b570      	push	{r4, r5, r6, lr}
   2bf4e:	b084      	sub	sp, #16
    uint32_t ui32ReturnStatus = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (pCfg == NULL) {
   2bf50:	2800      	cmp	r0, #0
   2bf52:	d043      	beq.n	2bfdc <ns_power_platform_config+0x90>
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(
   2bf54:	4a3f      	ldr	r2, [pc, #252]	@ (2c054 <ns_power_platform_config+0x108>)
   2bf56:	4940      	ldr	r1, [pc, #256]	@ (2c058 <ns_power_platform_config+0x10c>)
   2bf58:	4604      	mov	r4, r0
   2bf5a:	6800      	ldr	r0, [r0, #0]
   2bf5c:	f7ed fb5a 	bl	19614 <ns_core_check_api>
   2bf60:	4605      	mov	r5, r0
   2bf62:	2800      	cmp	r0, #0
   2bf64:	d136      	bne.n	2bfd4 <ns_power_platform_config+0x88>
            pCfg->api, &ns_power_oldest_supported_version, &ns_power_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if (!ns_core_initialized()) {
   2bf66:	f000 f983 	bl	2c270 <ns_core_initialized>
   2bf6a:	2800      	cmp	r0, #0
   2bf6c:	d048      	beq.n	2c000 <ns_power_platform_config+0xb4>
        // Power needs ns_core to be initialized first
        return NS_STATUS_INIT_FAILED;
    }
#endif

    am_bsp_low_power_init();
   2bf6e:	f007 fb55 	bl	3361c <am_bsp_low_power_init>

    // configure SRAM & other memories
    if (pCfg->bNeedSharedSRAM == false) {
   2bf72:	79a3      	ldrb	r3, [r4, #6]
   2bf74:	2b00      	cmp	r3, #0
   2bf76:	d035      	beq.n	2bfe4 <ns_power_platform_config+0x98>
            .bActiveRAM = false,
            .bRetainRAM = false};
        am_hal_pwrctrl_dsp_memory_config(AM_HAL_DSP0, &sExtSRAMMemCfg);
#endif
    } else {
        am_hal_daxi_config_t DaxiConfigLongAging = {
   2bf78:	4b38      	ldr	r3, [pc, #224]	@ (2c05c <ns_power_platform_config+0x110>)
   2bf7a:	e893 0003 	ldmia.w	r3, {r0, r1}
                                                            // cycles.  Optimal for most use cases
                                                            // should be 256, 512, 1024, or 2048
            .eNumBuf = AM_HAL_DAXI_CONFIG_NUMBUF_32,
            .eNumFreeBuf = AM_HAL_DAXI_CONFIG_NUMFREEBUF_3,
        };
        am_hal_daxi_config(&DaxiConfigLongAging);
   2bf7e:	ae02      	add	r6, sp, #8
        am_hal_daxi_config_t DaxiConfigLongAging = {
   2bf80:	9002      	str	r0, [sp, #8]
        am_hal_daxi_config(&DaxiConfigLongAging);
   2bf82:	4630      	mov	r0, r6
        am_hal_daxi_config_t DaxiConfigLongAging = {
   2bf84:	f88d 100c 	strb.w	r1, [sp, #12]
        am_hal_daxi_config(&DaxiConfigLongAging);
   2bf88:	f005 fd52 	bl	31a30 <am_hal_daxi_config>
    }

    am_hal_cachectrl_config(&am_hal_cachectrl_defaults);
   2bf8c:	4834      	ldr	r0, [pc, #208]	@ (2c060 <ns_power_platform_config+0x114>)
   2bf8e:	f005 fd21 	bl	319d4 <am_hal_cachectrl_config>
    am_hal_cachectrl_enable();
   2bf92:	f005 fd41 	bl	31a18 <am_hal_cachectrl_enable>

    // configure peripherals
    ns_power_down_peripherals(pCfg);
   2bf96:	4620      	mov	r0, r4
   2bf98:	f7ff ff30 	bl	2bdfc <ns_power_down_peripherals>

    // Configure power mode
    if(ns_set_performance_mode(pCfg->eAIPowerMode) != NS_STATUS_SUCCESS) {
   2bf9c:	7923      	ldrb	r3, [r4, #4]
    if ((eAIPowerMode == NS_MAXIMUM_PERF) || (eAIPowerMode == NS_MEDIUM_PERF))
   2bf9e:	1e5a      	subs	r2, r3, #1
   2bfa0:	2a01      	cmp	r2, #1
   2bfa2:	d952      	bls.n	2c04a <ns_power_platform_config+0xfe>
    else if (eAIPowerMode == NS_MINIMUM_PERF)
   2bfa4:	bb83      	cbnz	r3, 2c008 <ns_power_platform_config+0xbc>
        am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_LOW_POWER);
   2bfa6:	2001      	movs	r0, #1
   2bfa8:	f006 f98a 	bl	322c0 <am_hal_pwrctrl_mcu_mode_select>
        return NS_STATUS_INVALID_CONFIG;
    }

    if (pCfg->b128kTCM == true) {
   2bfac:	7b23      	ldrb	r3, [r4, #12]
   2bfae:	2b00      	cmp	r3, #0
   2bfb0:	d141      	bne.n	2c036 <ns_power_platform_config+0xea>
            .bRetainNVM0 = false};

        am_hal_pwrctrl_mcu_memory_config(&McuMemCfg);
    }

    if (pCfg->bEnableTempCo) {
   2bfb2:	7b63      	ldrb	r3, [r4, #13]
   2bfb4:	bb53      	cbnz	r3, 2c00c <ns_power_platform_config+0xc0>
                ns_printf("ERROR TempCo init failed\n");
            }
        }
#endif
    }
    g_ns_state.cryptoWantsToBeEnabled = pCfg->bNeedCrypto;
   2bfb6:	79e1      	ldrb	r1, [r4, #7]
   2bfb8:	4a2a      	ldr	r2, [pc, #168]	@ (2c064 <ns_power_platform_config+0x118>)
    g_ns_state.cryptoCurrentlyEnabled = pCfg->bNeedCrypto;
    g_ns_state.itmPrintWantsToBeEnabled = pCfg->bNeedITM;
   2bfba:	7ba0      	ldrb	r0, [r4, #14]
   2bfbc:	7150      	strb	r0, [r2, #5]
    g_ns_state.cryptoWantsToBeEnabled = pCfg->bNeedCrypto;
   2bfbe:	f04f 0300 	mov.w	r3, #0
   2bfc2:	f361 0307 	bfi	r3, r1, #0, #8
   2bfc6:	f361 230f 	bfi	r3, r1, #8, #8

    return ui32ReturnStatus;
}
   2bfca:	4628      	mov	r0, r5
    g_ns_state.cryptoWantsToBeEnabled = pCfg->bNeedCrypto;
   2bfcc:	f8a2 3009 	strh.w	r3, [r2, #9]
}
   2bfd0:	b004      	add	sp, #16
   2bfd2:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_VERSION;
   2bfd4:	2502      	movs	r5, #2
}
   2bfd6:	4628      	mov	r0, r5
   2bfd8:	b004      	add	sp, #16
   2bfda:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_HANDLE;
   2bfdc:	2501      	movs	r5, #1
}
   2bfde:	4628      	mov	r0, r5
   2bfe0:	b004      	add	sp, #16
   2bfe2:	bd70      	pop	{r4, r5, r6, pc}
        am_hal_pwrctrl_sram_memcfg_t SRAMMemCfg = {
   2bfe4:	ae02      	add	r6, sp, #8
   2bfe6:	9502      	str	r5, [sp, #8]
        am_hal_pwrctrl_sram_config(&SRAMMemCfg);
   2bfe8:	4630      	mov	r0, r6
        am_hal_pwrctrl_sram_memcfg_t SRAMMemCfg = {
   2bfea:	80b5      	strh	r5, [r6, #4]
        am_hal_pwrctrl_sram_config(&SRAMMemCfg);
   2bfec:	f006 fa4c 	bl	32488 <am_hal_pwrctrl_sram_config>
        am_hal_pwrctrl_dsp_memory_config(AM_HAL_DSP0, &sExtSRAMMemCfg);
   2bff0:	4669      	mov	r1, sp
   2bff2:	4628      	mov	r0, r5
        am_hal_pwrctrl_dsp_memory_config_t sExtSRAMMemCfg = {
   2bff4:	9500      	str	r5, [sp, #0]
   2bff6:	f88d 5004 	strb.w	r5, [sp, #4]
        am_hal_pwrctrl_dsp_memory_config(AM_HAL_DSP0, &sExtSRAMMemCfg);
   2bffa:	f006 fa9d 	bl	32538 <am_hal_pwrctrl_dsp_memory_config>
   2bffe:	e7c5      	b.n	2bf8c <ns_power_platform_config+0x40>
        return NS_STATUS_INIT_FAILED;
   2c000:	2504      	movs	r5, #4
}
   2c002:	4628      	mov	r0, r5
   2c004:	b004      	add	sp, #16
   2c006:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_CONFIG;
   2c008:	2503      	movs	r5, #3
   2c00a:	e7e4      	b.n	2bfd6 <ns_power_platform_config+0x8a>
        ui32Ret = am_hal_mram_info_read(1, AM_REG_INFO1_TRIM_REV_O / 4, 1, &ui32TrimVer);
   2c00c:	2201      	movs	r2, #1
   2c00e:	4633      	mov	r3, r6
   2c010:	f240 41c4 	movw	r1, #1220	@ 0x4c4
   2c014:	4610      	mov	r0, r2
   2c016:	f006 f881 	bl	3211c <am_hal_mram_info_read>
        if ((ui32Ret == 0) && (ui32TrimVer != 0xFFFFFFFF) && (ui32TrimVer >= 6)) {
   2c01a:	2800      	cmp	r0, #0
   2c01c:	d1cb      	bne.n	2bfb6 <ns_power_platform_config+0x6a>
   2c01e:	9b02      	ldr	r3, [sp, #8]
   2c020:	3b06      	subs	r3, #6
   2c022:	3308      	adds	r3, #8
   2c024:	d8c7      	bhi.n	2bfb6 <ns_power_platform_config+0x6a>
            if (ns_tempco_init() != 0) {
   2c026:	f000 f8b3 	bl	2c190 <ns_tempco_init>
   2c02a:	2800      	cmp	r0, #0
   2c02c:	d0c3      	beq.n	2bfb6 <ns_power_platform_config+0x6a>
                ns_printf("ERROR TempCo init failed\n");
   2c02e:	480e      	ldr	r0, [pc, #56]	@ (2c068 <ns_power_platform_config+0x11c>)
   2c030:	f7ff fe8e 	bl	2bd50 <ns_lp_printf>
   2c034:	e7bf      	b.n	2bfb6 <ns_power_platform_config+0x6a>
        am_hal_pwrctrl_mcu_memory_config_t McuMemCfg = {
   2c036:	4b0d      	ldr	r3, [pc, #52]	@ (2c06c <ns_power_platform_config+0x120>)
   2c038:	e893 0003 	ldmia.w	r3, {r0, r1}
   2c03c:	9002      	str	r0, [sp, #8]
        am_hal_pwrctrl_mcu_memory_config(&McuMemCfg);
   2c03e:	4630      	mov	r0, r6
        am_hal_pwrctrl_mcu_memory_config_t McuMemCfg = {
   2c040:	f8ad 100c 	strh.w	r1, [sp, #12]
        am_hal_pwrctrl_mcu_memory_config(&McuMemCfg);
   2c044:	f006 f972 	bl	3232c <am_hal_pwrctrl_mcu_memory_config>
   2c048:	e7b3      	b.n	2bfb2 <ns_power_platform_config+0x66>
        am_hal_pwrctrl_mcu_mode_select(AM_HAL_PWRCTRL_MCU_MODE_HIGH_PERFORMANCE);
   2c04a:	2002      	movs	r0, #2
   2c04c:	f006 f938 	bl	322c0 <am_hal_pwrctrl_mcu_mode_select>
   2c050:	e7ac      	b.n	2bfac <ns_power_platform_config+0x60>
   2c052:	bf00      	nop
   2c054:	00047784 	.word	0x00047784
   2c058:	00047790 	.word	0x00047790
   2c05c:	0003ef80 	.word	0x0003ef80
   2c060:	000478dc 	.word	0x000478dc
   2c064:	1000cc88 	.word	0x1000cc88
   2c068:	0003fc9c 	.word	0x0003fc9c
   2c06c:	0003ef88 	.word	0x0003ef88

0002c070 <ns_platform_deep_sleep>:
/**
 * @brief Wraps am_hal_sysctrl_sleep to enable and disable
 * systems as needed.
 *
 */
void ns_platform_deep_sleep(void) {
   2c070:	b538      	push	{r3, r4, r5, lr}

    if (g_ns_state.uartPrintCurrentlyEnabled) {
   2c072:	4c16      	ldr	r4, [pc, #88]	@ (2c0cc <ns_platform_deep_sleep+0x5c>)
   2c074:	7b25      	ldrb	r5, [r4, #12]
   2c076:	bb25      	cbnz	r5, 2c0c2 <ns_platform_deep_sleep+0x52>
        am_bsp_uart_printf_disable();
        g_ns_state.uartPrintCurrentlyEnabled = false;
    } else if (g_ns_state.itmPrintCurrentlyEnabled) {
   2c078:	79a3      	ldrb	r3, [r4, #6]
   2c07a:	b943      	cbnz	r3, 2c08e <ns_platform_deep_sleep+0x1e>
        ns_cryptoless_itm_printf_disable();
        g_ns_state.itmPrintCurrentlyEnabled = false;
    }

    if (g_ns_state.cryptoCurrentlyEnabled) {
   2c07c:	7aa3      	ldrb	r3, [r4, #10]
   2c07e:	b963      	cbnz	r3, 2c09a <ns_platform_deep_sleep+0x2a>
    }

#if defined(NS_AMBIQSUITE_VERSION_R4_1_0) || defined(AM_PART_APOLLO4L)
    // TEMPCO not supported in this version
#else
    if (g_ns_state.tempcoCurrentlyEnabled) {
   2c080:	7a23      	ldrb	r3, [r4, #8]
   2c082:	b99b      	cbnz	r3, 2c0ac <ns_platform_deep_sleep+0x3c>

    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);

    if (g_ns_state.tempcoWantsToBeEnabled) { // isr turns ADC on
    }
}
   2c084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   2c088:	2001      	movs	r0, #1
   2c08a:	f007 b88d 	b.w	331a8 <am_hal_sysctrl_sleep>
        ns_cryptoless_itm_printf_disable();
   2c08e:	f7ff fe4f 	bl	2bd30 <ns_cryptoless_itm_printf_disable>
    if (g_ns_state.cryptoCurrentlyEnabled) {
   2c092:	7aa3      	ldrb	r3, [r4, #10]
        g_ns_state.itmPrintCurrentlyEnabled = false;
   2c094:	71a5      	strb	r5, [r4, #6]
    if (g_ns_state.cryptoCurrentlyEnabled) {
   2c096:	2b00      	cmp	r3, #0
   2c098:	d0f2      	beq.n	2c080 <ns_platform_deep_sleep+0x10>
        am_hal_pwrctrl_control(AM_HAL_PWRCTRL_CONTROL_CRYPTO_POWERDOWN, 0);
   2c09a:	2100      	movs	r1, #0
   2c09c:	2001      	movs	r0, #1
   2c09e:	f006 fd9d 	bl	32bdc <am_hal_pwrctrl_control>
        g_ns_state.cryptoCurrentlyEnabled = false;
   2c0a2:	2300      	movs	r3, #0
   2c0a4:	72a3      	strb	r3, [r4, #10]
    if (g_ns_state.tempcoCurrentlyEnabled) {
   2c0a6:	7a23      	ldrb	r3, [r4, #8]
   2c0a8:	2b00      	cmp	r3, #0
   2c0aa:	d0eb      	beq.n	2c084 <ns_platform_deep_sleep+0x14>
        am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2c0ac:	4b08      	ldr	r3, [pc, #32]	@ (2c0d0 <ns_platform_deep_sleep+0x60>)
   2c0ae:	2201      	movs	r2, #1
   2c0b0:	6818      	ldr	r0, [r3, #0]
   2c0b2:	2102      	movs	r1, #2
   2c0b4:	f005 fbec 	bl	31890 <am_hal_adc_power_control>
}
   2c0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_sysctrl_sleep(AM_HAL_SYSCTRL_SLEEP_DEEP);
   2c0bc:	2001      	movs	r0, #1
   2c0be:	f007 b873 	b.w	331a8 <am_hal_sysctrl_sleep>
        am_bsp_uart_printf_disable();
   2c0c2:	f007 fb35 	bl	33730 <am_bsp_uart_printf_disable>
        g_ns_state.uartPrintCurrentlyEnabled = false;
   2c0c6:	2300      	movs	r3, #0
   2c0c8:	7323      	strb	r3, [r4, #12]
   2c0ca:	e7d7      	b.n	2c07c <ns_platform_deep_sleep+0xc>
   2c0cc:	1000cc88 	.word	0x1000cc88
   2c0d0:	10052894 	.word	0x10052894

0002c0d4 <ns_tempco_callback>:

    return 0;
}

// timer ISR callback
static void ns_tempco_callback(ns_timer_config_t *c) {
   2c0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    // Power up, configure, and enable the ADC.
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, true);
   2c0d8:	4e28      	ldr	r6, [pc, #160]	@ (2c17c <ns_tempco_callback+0xa8>)
    uint32_t ux, ui32OneSample;

    ui32OneSample = 1;

    sSamples[0].ui32Sample = sSamples[1].ui32Sample = sSamples[2].ui32Sample =
        sSamples[3].ui32Sample = sSamples[4].ui32Sample = 0;
   2c0da:	4f29      	ldr	r7, [pc, #164]	@ (2c180 <ns_tempco_callback+0xac>)
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, true);
   2c0dc:	6830      	ldr	r0, [r6, #0]
   2c0de:	f8df a0ac 	ldr.w	sl, [pc, #172]	@ 2c18c <ns_tempco_callback+0xb8>
    ui32Cnt0 = _FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO);
   2c0e2:	4c28      	ldr	r4, [pc, #160]	@ (2c184 <ns_tempco_callback+0xb0>)
static void ns_tempco_callback(ns_timer_config_t *c) {
   2c0e4:	b084      	sub	sp, #16
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, true);
   2c0e6:	2201      	movs	r2, #1
   2c0e8:	2100      	movs	r1, #0
   2c0ea:	f005 fbd1 	bl	31890 <am_hal_adc_power_control>
    am_hal_adc_enable(g_ns_tempco_ADCHandle);
   2c0ee:	6830      	ldr	r0, [r6, #0]
   2c0f0:	f005 fa4e 	bl	31590 <am_hal_adc_enable>
        sSamples[3].ui32Sample = sSamples[4].ui32Sample = 0;
   2c0f4:	2300      	movs	r3, #0
    ui32OneSample = 1;
   2c0f6:	2201      	movs	r2, #1
    ux = 0;
   2c0f8:	4698      	mov	r8, r3
    ui32OneSample = 1;
   2c0fa:	9203      	str	r2, [sp, #12]
        sSamples[3].ui32Sample = sSamples[4].ui32Sample = 0;
   2c0fc:	623b      	str	r3, [r7, #32]
   2c0fe:	61bb      	str	r3, [r7, #24]
    sSamples[0].ui32Sample = sSamples[1].ui32Sample = sSamples[2].ui32Sample =
   2c100:	613b      	str	r3, [r7, #16]
   2c102:	60bb      	str	r3, [r7, #8]
   2c104:	603b      	str	r3, [r7, #0]
    while (ux < ui32NumSamples) {
   2c106:	4699      	mov	r9, r3
    ui32Cnt0 = _FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO);
   2c108:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
    while (_FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO) == ui32Cnt0) {
   2c10a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
   2c10c:	406b      	eors	r3, r5
   2c10e:	f013 6f7f 	tst.w	r3, #267386880	@ 0xff00000
   2c112:	d10a      	bne.n	2c12a <ns_tempco_callback+0x56>
        am_hal_adc_sw_trigger(g_ns_tempco_ADCHandle);
   2c114:	6830      	ldr	r0, [r6, #0]
   2c116:	f005 fba9 	bl	3186c <am_hal_adc_sw_trigger>
        am_hal_delay_us(1);
   2c11a:	2001      	movs	r0, #1
   2c11c:	f007 f9a6 	bl	3346c <am_hal_delay_us>
    while (_FLD2VAL(ADC_FIFO_COUNT, ADC->FIFO) == ui32Cnt0) {
   2c120:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
   2c122:	406b      	eors	r3, r5
   2c124:	f013 6f7f 	tst.w	r3, #267386880	@ 0xff00000
   2c128:	d0f4      	beq.n	2c114 <ns_tempco_callback+0x40>
        adc_trigger_wait();

        // Invalidate DAXI to make sure CPU sees the new data when loaded.
        am_hal_daxi_control(AM_HAL_DAXI_CONTROL_INVALIDATE, NULL);
   2c12a:	2100      	movs	r1, #0
   2c12c:	4608      	mov	r0, r1
        am_hal_adc_samples_read(g_ns_tempco_ADCHandle, true, NULL, &ui32OneSample, &sSamples[ux]);
   2c12e:	eb07 0509 	add.w	r5, r7, r9
        am_hal_daxi_control(AM_HAL_DAXI_CONTROL_INVALIDATE, NULL);
   2c132:	f005 fcc9 	bl	31ac8 <am_hal_daxi_control>
        am_hal_adc_samples_read(g_ns_tempco_ADCHandle, true, NULL, &ui32OneSample, &sSamples[ux]);
   2c136:	6830      	ldr	r0, [r6, #0]
   2c138:	9500      	str	r5, [sp, #0]
   2c13a:	2200      	movs	r2, #0
   2c13c:	ab03      	add	r3, sp, #12
   2c13e:	2101      	movs	r1, #1
   2c140:	f005 fa56 	bl	315f0 <am_hal_adc_samples_read>

        if (sSamples[ux].ui32Slot == g_ns_tempco_ui32TempcoADCslot) {
   2c144:	686a      	ldr	r2, [r5, #4]
   2c146:	f8da 3000 	ldr.w	r3, [sl]
   2c14a:	429a      	cmp	r2, r3
   2c14c:	d1dc      	bne.n	2c108 <ns_tempco_callback+0x34>
            // This is a temperature sample. Get the next sample.
            ux++;
   2c14e:	f108 0801 	add.w	r8, r8, #1
    while (ux < ui32NumSamples) {
   2c152:	f1b8 0f05 	cmp.w	r8, #5
   2c156:	d002      	beq.n	2c15e <ns_tempco_callback+0x8a>
   2c158:	ea4f 09c8 	mov.w	r9, r8, lsl #3
   2c15c:	e7d4      	b.n	2c108 <ns_tempco_callback+0x34>
        am_hal_pwrctrl_tempco_sample_handler(AM_HAL_TEMPCO_NUMSAMPLES, g_ns_tempco_sSamples);
   2c15e:	4908      	ldr	r1, [pc, #32]	@ (2c180 <ns_tempco_callback+0xac>)
   2c160:	4640      	mov	r0, r8
   2c162:	f006 fec5 	bl	32ef0 <am_hal_pwrctrl_tempco_sample_handler>
    g_ns_tempco_ui32TempcoIsrRet =
   2c166:	4b08      	ldr	r3, [pc, #32]	@ (2c188 <ns_tempco_callback+0xb4>)
        am_hal_pwrctrl_tempco_sample_handler(AM_HAL_TEMPCO_NUMSAMPLES, g_ns_tempco_sSamples);
   2c168:	4604      	mov	r4, r0
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2c16a:	6830      	ldr	r0, [r6, #0]
    g_ns_tempco_ui32TempcoIsrRet =
   2c16c:	601c      	str	r4, [r3, #0]
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2c16e:	2201      	movs	r2, #1
   2c170:	2102      	movs	r1, #2
}
   2c172:	b004      	add	sp, #16
   2c174:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_DEEPSLEEP, true);
   2c178:	f005 bb8a 	b.w	31890 <am_hal_adc_power_control>
   2c17c:	10052894 	.word	0x10052894
   2c180:	10052898 	.word	0x10052898
   2c184:	40038000 	.word	0x40038000
   2c188:	100528c4 	.word	0x100528c4
   2c18c:	100528c0 	.word	0x100528c0

0002c190 <ns_tempco_init>:
uint32_t ns_tempco_init(void) {
   2c190:	b530      	push	{r4, r5, lr}
    am_hal_adc_config_t sADC_Cfg = {
   2c192:	4b26      	ldr	r3, [pc, #152]	@ (2c22c <ns_tempco_init+0x9c>)
    if (am_hal_adc_initialize(0, &g_ns_tempco_ADCHandle) != AM_HAL_STATUS_SUCCESS) {
   2c194:	4c26      	ldr	r4, [pc, #152]	@ (2c230 <ns_tempco_init+0xa0>)
    g_ns_tempco_ui32TempcoADCslot = TEMPCO_ADC_TEMPERATURE_SLOT;
   2c196:	4d27      	ldr	r5, [pc, #156]	@ (2c234 <ns_tempco_init+0xa4>)
    am_hal_adc_config_t sADC_Cfg = {
   2c198:	e893 0003 	ldmia.w	r3, {r0, r1}
uint32_t ns_tempco_init(void) {
   2c19c:	b083      	sub	sp, #12
    am_hal_adc_config_t sADC_Cfg = {
   2c19e:	0c0a      	lsrs	r2, r1, #16
    g_ns_tempco_ui32TempcoADCslot = TEMPCO_ADC_TEMPERATURE_SLOT;
   2c1a0:	2305      	movs	r3, #5
    am_hal_adc_config_t sADC_Cfg = {
   2c1a2:	9000      	str	r0, [sp, #0]
   2c1a4:	f8ad 1004 	strh.w	r1, [sp, #4]
    if (am_hal_adc_initialize(0, &g_ns_tempco_ADCHandle) != AM_HAL_STATUS_SUCCESS) {
   2c1a8:	2000      	movs	r0, #0
   2c1aa:	4621      	mov	r1, r4
    am_hal_adc_config_t sADC_Cfg = {
   2c1ac:	f88d 2006 	strb.w	r2, [sp, #6]
    g_ns_tempco_ui32TempcoADCslot = TEMPCO_ADC_TEMPERATURE_SLOT;
   2c1b0:	602b      	str	r3, [r5, #0]
    if (am_hal_adc_initialize(0, &g_ns_tempco_ADCHandle) != AM_HAL_STATUS_SUCCESS) {
   2c1b2:	f005 f84b 	bl	3124c <am_hal_adc_initialize>
   2c1b6:	b9f0      	cbnz	r0, 2c1f6 <ns_tempco_init+0x66>
    if (am_hal_adc_power_control(g_ns_tempco_ADCHandle, AM_HAL_SYSCTRL_WAKE, false) !=
   2c1b8:	4602      	mov	r2, r0
   2c1ba:	4601      	mov	r1, r0
   2c1bc:	6820      	ldr	r0, [r4, #0]
   2c1be:	f005 fb67 	bl	31890 <am_hal_adc_power_control>
   2c1c2:	bb30      	cbnz	r0, 2c212 <ns_tempco_init+0x82>
    if (am_hal_adc_configure(g_ns_tempco_ADCHandle, (am_hal_adc_config_t *)&sADC_Cfg) !=
   2c1c4:	6820      	ldr	r0, [r4, #0]
   2c1c6:	4669      	mov	r1, sp
   2c1c8:	f005 f8d2 	bl	31370 <am_hal_adc_configure>
   2c1cc:	b9d0      	cbnz	r0, 2c204 <ns_tempco_init+0x74>
    ns_timer_init(&g_ns_tempcoTimer);
   2c1ce:	481a      	ldr	r0, [pc, #104]	@ (2c238 <ns_tempco_init+0xa8>)
   2c1d0:	f000 f854 	bl	2c27c <ns_timer_init>
    ui32Retval = am_hal_pwrctrl_tempco_init(g_ns_tempco_ADCHandle, g_ns_tempco_ui32TempcoADCslot);
   2c1d4:	6829      	ldr	r1, [r5, #0]
   2c1d6:	6820      	ldr	r0, [r4, #0]
   2c1d8:	f006 fe3a 	bl	32e50 <am_hal_pwrctrl_tempco_init>
    if (ui32Retval != AM_HAL_STATUS_SUCCESS) {
   2c1dc:	4605      	mov	r5, r0
   2c1de:	b9f8      	cbnz	r0, 2c220 <ns_tempco_init+0x90>
    am_hal_adc_enable(g_ns_tempco_ADCHandle);
   2c1e0:	6820      	ldr	r0, [r4, #0]
   2c1e2:	f005 f9d5 	bl	31590 <am_hal_adc_enable>
    g_ns_state.tempcoWantsToBeEnabled = true;
   2c1e6:	4b15      	ldr	r3, [pc, #84]	@ (2c23c <ns_tempco_init+0xac>)
   2c1e8:	f240 1201 	movw	r2, #257	@ 0x101
   2c1ec:	f8a3 2007 	strh.w	r2, [r3, #7]
}
   2c1f0:	4628      	mov	r0, r5
   2c1f2:	b003      	add	sp, #12
   2c1f4:	bd30      	pop	{r4, r5, pc}
        ns_printf("tempco_init() Error - reservation of the ADC instance failed.\n");
   2c1f6:	4812      	ldr	r0, [pc, #72]	@ (2c240 <ns_tempco_init+0xb0>)
   2c1f8:	f7ff fdaa 	bl	2bd50 <ns_lp_printf>
        return 1;
   2c1fc:	2501      	movs	r5, #1
}
   2c1fe:	4628      	mov	r0, r5
   2c200:	b003      	add	sp, #12
   2c202:	bd30      	pop	{r4, r5, pc}
        ns_printf("tempco_init() Error - configuring ADC failed.\n");
   2c204:	480f      	ldr	r0, [pc, #60]	@ (2c244 <ns_tempco_init+0xb4>)
   2c206:	f7ff fda3 	bl	2bd50 <ns_lp_printf>
        return 3;
   2c20a:	2503      	movs	r5, #3
}
   2c20c:	4628      	mov	r0, r5
   2c20e:	b003      	add	sp, #12
   2c210:	bd30      	pop	{r4, r5, pc}
        ns_printf("tempco_init() Error - ADC power on failed.\n");
   2c212:	480d      	ldr	r0, [pc, #52]	@ (2c248 <ns_tempco_init+0xb8>)
   2c214:	f7ff fd9c 	bl	2bd50 <ns_lp_printf>
        return 2;
   2c218:	2502      	movs	r5, #2
}
   2c21a:	4628      	mov	r0, r5
   2c21c:	b003      	add	sp, #12
   2c21e:	bd30      	pop	{r4, r5, pc}
        ns_printf("ERROR am_hal_pwrctrl_tempco_init() returned %d.\n", ui32Retval);
   2c220:	4629      	mov	r1, r5
   2c222:	480a      	ldr	r0, [pc, #40]	@ (2c24c <ns_tempco_init+0xbc>)
   2c224:	f7ff fd94 	bl	2bd50 <ns_lp_printf>
        return 4;
   2c228:	2504      	movs	r5, #4
   2c22a:	e7e1      	b.n	2c1f0 <ns_tempco_init+0x60>
   2c22c:	0003ef90 	.word	0x0003ef90
   2c230:	10052894 	.word	0x10052894
   2c234:	100528c0 	.word	0x100528c0
   2c238:	1000ca94 	.word	0x1000ca94
   2c23c:	1000cc88 	.word	0x1000cc88
   2c240:	0003fcb8 	.word	0x0003fcb8
   2c244:	0003fd24 	.word	0x0003fd24
   2c248:	0003fcf8 	.word	0x0003fcf8
   2c24c:	0003fd54 	.word	0x0003fd54

0002c250 <ns_malloc>:
/// Empty for now, but placeholder in case we need multi-heap support
uint8_t ns_malloc_init() { return 0; };

int total_allocated = 0;
/// Simple pvPortMalloc wrapper
void *ns_malloc(size_t size) {
   2c250:	b510      	push	{r4, lr}
    void *ptr = NULL;

    if (size > 0) {
   2c252:	4604      	mov	r4, r0
   2c254:	b108      	cbz	r0, 2c25a <ns_malloc+0xa>
        ptr = pvTasklessPortMalloc(size);
   2c256:	f7ed f9bd 	bl	195d4 <pvTasklessPortMalloc>
    } // else NULL if there was an error
    total_allocated += size;
   2c25a:	4a02      	ldr	r2, [pc, #8]	@ (2c264 <ns_malloc+0x14>)
   2c25c:	6813      	ldr	r3, [r2, #0]
   2c25e:	4423      	add	r3, r4
   2c260:	6013      	str	r3, [r2, #0]
    // ns_lp_printf("ns_malloc(%d) total %d returning 0x%x\n", size, total_allocated, ptr);
    return ptr;
}
   2c262:	bd10      	pop	{r4, pc}
   2c264:	100528c8 	.word	0x100528c8

0002c268 <ns_free>:

/// Simple vPortFree wrapper
void ns_free(void *ptr) {
    if (ptr) {
   2c268:	b108      	cbz	r0, 2c26e <ns_free+0x6>
        vTasklessPortFree(ptr);
   2c26a:	f7ed b9b7 	b.w	195dc <vTasklessPortFree>
    }
    // ns_lp_printf("ns_free(0x%x)\n", ptr);
}
   2c26e:	4770      	bx	lr

0002c270 <ns_core_initialized>:
const ns_core_api_t ns_timer_current_version = {
    .apiId = NS_TIMER_API_ID, .version = NS_TIMER_V1_0_0};

ns_timer_config_t *ns_timer_config[NS_TIMER_TEMPCO + 1];

extern bool ns_core_initialized(void) { return g_ns_state.initialized; }
   2c270:	4b01      	ldr	r3, [pc, #4]	@ (2c278 <ns_core_initialized+0x8>)
   2c272:	7918      	ldrb	r0, [r3, #4]
   2c274:	4770      	bx	lr
   2c276:	bf00      	nop
   2c278:	1000cc88 	.word	0x1000cc88

0002c27c <ns_timer_init>:

uint32_t ns_timer_init(ns_timer_config_t *cfg) {
    uint32_t ui32Status = AM_HAL_STATUS_SUCCESS;

#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
   2c27c:	b1b0      	cbz	r0, 2c2ac <ns_timer_init+0x30>
uint32_t ns_timer_init(ns_timer_config_t *cfg) {
   2c27e:	b510      	push	{r4, lr}
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(
   2c280:	4a0d      	ldr	r2, [pc, #52]	@ (2c2b8 <ns_timer_init+0x3c>)
   2c282:	490e      	ldr	r1, [pc, #56]	@ (2c2bc <ns_timer_init+0x40>)
   2c284:	4604      	mov	r4, r0
   2c286:	6800      	ldr	r0, [r0, #0]
   2c288:	f7ed f9c4 	bl	19614 <ns_core_check_api>
   2c28c:	b990      	cbnz	r0, 2c2b4 <ns_timer_init+0x38>
            cfg->api, &ns_timer_oldest_supported_version, &ns_timer_current_version)) {
        return NS_STATUS_INVALID_VERSION;
    }

    if (cfg->timer > NS_TIMER_TEMPCO) {
   2c28e:	7923      	ldrb	r3, [r4, #4]
   2c290:	2b03      	cmp	r3, #3
   2c292:	d80d      	bhi.n	2c2b0 <ns_timer_init+0x34>
        return NS_STATUS_INVALID_CONFIG;
    }
    if ((cfg->enableInterrupt) && (cfg->callback == NULL)) {
   2c294:	7962      	ldrb	r2, [r4, #5]
   2c296:	b10a      	cbz	r2, 2c29c <ns_timer_init+0x20>
   2c298:	68e2      	ldr	r2, [r4, #12]
   2c29a:	b14a      	cbz	r2, 2c2b0 <ns_timer_init+0x34>
        return NS_STATUS_INVALID_CONFIG;
    }
#endif

    ns_timer_config[cfg->timer] = cfg;
   2c29c:	4a08      	ldr	r2, [pc, #32]	@ (2c2c0 <ns_timer_init+0x44>)

    ui32Status = ns_timer_platform_init(cfg);
   2c29e:	4620      	mov	r0, r4
    ns_timer_config[cfg->timer] = cfg;
   2c2a0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

    return ui32Status;
}
   2c2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui32Status = ns_timer_platform_init(cfg);
   2c2a8:	f000 b848 	b.w	2c33c <ns_timer_platform_init>
        return NS_STATUS_INVALID_HANDLE;
   2c2ac:	2001      	movs	r0, #1
}
   2c2ae:	4770      	bx	lr
        return NS_STATUS_INVALID_CONFIG;
   2c2b0:	2003      	movs	r0, #3
}
   2c2b2:	bd10      	pop	{r4, pc}
        return NS_STATUS_INVALID_VERSION;
   2c2b4:	2002      	movs	r0, #2
}
   2c2b6:	bd10      	pop	{r4, pc}
   2c2b8:	000477a8 	.word	0x000477a8
   2c2bc:	000477b4 	.word	0x000477b4
   2c2c0:	100528cc 	.word	0x100528cc

0002c2c4 <am_timer01_isr>:
#include "am_util.h"
#include "ns_core.h"

extern ns_timer_config_t *ns_timer_config[NS_TIMER_TEMPCO + 1];

void am_timer01_isr(void) {
   2c2c4:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[1]->timer;
   2c2c6:	4c08      	ldr	r4, [pc, #32]	@ (2c2e8 <am_timer01_isr+0x24>)
   2c2c8:	6863      	ldr	r3, [r4, #4]
   2c2ca:	791d      	ldrb	r5, [r3, #4]
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
   2c2cc:	2002      	movs	r0, #2
   2c2ce:	006b      	lsls	r3, r5, #1
   2c2d0:	4098      	lsls	r0, r3
   2c2d2:	f007 f88f 	bl	333f4 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
   2c2d6:	4628      	mov	r0, r5
   2c2d8:	f007 f844 	bl	33364 <am_hal_timer_clear>

    ns_timer_config[1]->callback(ns_timer_config[1]);
   2c2dc:	6860      	ldr	r0, [r4, #4]
}
   2c2de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[1]->callback(ns_timer_config[1]);
   2c2e2:	68c3      	ldr	r3, [r0, #12]
   2c2e4:	4718      	bx	r3
   2c2e6:	bf00      	nop
   2c2e8:	100528cc 	.word	0x100528cc

0002c2ec <am_timer02_isr>:

void am_timer02_isr(void) {
   2c2ec:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[2]->timer;
   2c2ee:	4c08      	ldr	r4, [pc, #32]	@ (2c310 <am_timer02_isr+0x24>)
   2c2f0:	68a3      	ldr	r3, [r4, #8]
   2c2f2:	791d      	ldrb	r5, [r3, #4]
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
   2c2f4:	2002      	movs	r0, #2
   2c2f6:	006b      	lsls	r3, r5, #1
   2c2f8:	4098      	lsls	r0, r3
   2c2fa:	f007 f87b 	bl	333f4 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
   2c2fe:	4628      	mov	r0, r5
   2c300:	f007 f830 	bl	33364 <am_hal_timer_clear>

    ns_timer_config[2]->callback(ns_timer_config[2]);
   2c304:	68a0      	ldr	r0, [r4, #8]
}
   2c306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[2]->callback(ns_timer_config[2]);
   2c30a:	68c3      	ldr	r3, [r0, #12]
   2c30c:	4718      	bx	r3
   2c30e:	bf00      	nop
   2c310:	100528cc 	.word	0x100528cc

0002c314 <am_timer03_isr>:

void am_timer03_isr(void) {
   2c314:	b570      	push	{r4, r5, r6, lr}
    ns_timers_e timerNum = ns_timer_config[3]->timer;
   2c316:	4c08      	ldr	r4, [pc, #32]	@ (2c338 <am_timer03_isr+0x24>)
   2c318:	68e3      	ldr	r3, [r4, #12]
   2c31a:	791d      	ldrb	r5, [r3, #4]
    //
    // Clear the timer Interrupt (write to clear).
    //
    am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(timerNum, AM_HAL_TIMER_COMPARE1));
   2c31c:	2002      	movs	r0, #2
   2c31e:	006b      	lsls	r3, r5, #1
   2c320:	4098      	lsls	r0, r3
   2c322:	f007 f867 	bl	333f4 <am_hal_timer_interrupt_clear>
    am_hal_timer_clear(timerNum);
   2c326:	4628      	mov	r0, r5
   2c328:	f007 f81c 	bl	33364 <am_hal_timer_clear>

    ns_timer_config[2]->callback(ns_timer_config[3]);
   2c32c:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
}
   2c330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ns_timer_config[2]->callback(ns_timer_config[3]);
   2c334:	68db      	ldr	r3, [r3, #12]
   2c336:	4718      	bx	r3
   2c338:	100528cc 	.word	0x100528cc

0002c33c <ns_timer_platform_init>:

uint32_t ns_timer_platform_init(ns_timer_config_t *cfg) {
   2c33c:	b570      	push	{r4, r5, r6, lr}
   2c33e:	4604      	mov	r4, r0
   2c340:	b086      	sub	sp, #24

    am_hal_timer_config_t TimerConfig;

    // Set the timer configuration
    // The default timer configuration is HFRC_DIV16, EDGE, compares=0, no trig.
    am_hal_timer_default_config_set(&TimerConfig);
   2c342:	a801      	add	r0, sp, #4
   2c344:	f006 fffe 	bl	33344 <am_hal_timer_default_config_set>

    // modify the default
    if (cfg->timer == NS_TIMER_TEMPCO) {
   2c348:	7920      	ldrb	r0, [r4, #4]
   2c34a:	2803      	cmp	r0, #3
        TimerConfig.eInputClock = AM_HAL_TIMER_CLOCK_HFRC_DIV16;
   2c34c:	bf04      	itt	eq
   2c34e:	2301      	moveq	r3, #1
   2c350:	f88d 3004 	strbeq.w	r3, [sp, #4]
    }

    if ((cfg->enableInterrupt)) {
   2c354:	7963      	ldrb	r3, [r4, #5]
   2c356:	b143      	cbz	r3, 2c36a <ns_timer_platform_init+0x2e>
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
   2c358:	68a3      	ldr	r3, [r4, #8]
   2c35a:	4a1e      	ldr	r2, [pc, #120]	@ (2c3d4 <ns_timer_platform_init+0x98>)
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
   2c35c:	2102      	movs	r1, #2
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
   2c35e:	fba2 2303 	umull	r2, r3, r2, r3
   2c362:	40cb      	lsrs	r3, r1
        TimerConfig.eFunction = AM_HAL_TIMER_FN_UPCOUNT;
   2c364:	f88d 1005 	strb.w	r1, [sp, #5]
        TimerConfig.ui32Compare1 = cfg->periodInMicroseconds / 6; // 6 ticks per uS
   2c368:	9305      	str	r3, [sp, #20]
    }

    ui32Status = am_hal_timer_config(cfg->timer, &TimerConfig);
   2c36a:	a901      	add	r1, sp, #4
   2c36c:	f006 ff9a 	bl	332a4 <am_hal_timer_config>
    if (ui32Status != AM_HAL_STATUS_SUCCESS) {
   2c370:	4605      	mov	r5, r0
   2c372:	bb00      	cbnz	r0, 2c3b6 <ns_timer_platform_init+0x7a>
    }

    //
    // Stop and clear the timer.
    //
    am_hal_timer_clear(cfg->timer);
   2c374:	7920      	ldrb	r0, [r4, #4]
   2c376:	f006 fff5 	bl	33364 <am_hal_timer_clear>

    if ((cfg->enableInterrupt)) {
   2c37a:	7963      	ldrb	r3, [r4, #5]
   2c37c:	b913      	cbnz	r3, 2c384 <ns_timer_platform_init+0x48>
            NVIC_SetPriority(TIMER2_IRQn, AM_IRQ_PRIORITY_DEFAULT);
            NVIC_EnableIRQ(TIMER2_IRQn);
        }
    }
    return ui32Status;
}
   2c37e:	4628      	mov	r0, r5
   2c380:	b006      	add	sp, #24
   2c382:	bd70      	pop	{r4, r5, r6, pc}
        am_hal_timer_interrupt_clear(AM_HAL_TIMER_MASK(cfg->timer, AM_HAL_TIMER_COMPARE1));
   2c384:	7920      	ldrb	r0, [r4, #4]
   2c386:	2602      	movs	r6, #2
   2c388:	0040      	lsls	r0, r0, #1
   2c38a:	fa06 f000 	lsl.w	r0, r6, r0
   2c38e:	f007 f831 	bl	333f4 <am_hal_timer_interrupt_clear>
        am_hal_timer_interrupt_enable(AM_HAL_TIMER_MASK(cfg->timer, AM_HAL_TIMER_COMPARE1));
   2c392:	7920      	ldrb	r0, [r4, #4]
   2c394:	0040      	lsls	r0, r0, #1
   2c396:	fa06 f000 	lsl.w	r0, r6, r0
   2c39a:	f007 f821 	bl	333e0 <am_hal_timer_interrupt_enable>
        if (cfg->timer == NS_TIMER_INTERRUPT) {
   2c39e:	7923      	ldrb	r3, [r4, #4]
   2c3a0:	2b01      	cmp	r3, #1
   2c3a2:	d010      	beq.n	2c3c6 <ns_timer_platform_init+0x8a>
        } else if (cfg->timer == NS_TIMER_USB) {
   2c3a4:	2b02      	cmp	r3, #2
   2c3a6:	d1ea      	bne.n	2c37e <ns_timer_platform_init+0x42>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c3a8:	4b0b      	ldr	r3, [pc, #44]	@ (2c3d8 <ns_timer_platform_init+0x9c>)
   2c3aa:	2280      	movs	r2, #128	@ 0x80
   2c3ac:	f883 2345 	strb.w	r2, [r3, #837]	@ 0x345
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2c3b0:	2220      	movs	r2, #32
   2c3b2:	609a      	str	r2, [r3, #8]
    __COMPILER_BARRIER();
   2c3b4:	e7e3      	b.n	2c37e <ns_timer_platform_init+0x42>
        ns_lp_printf("Failed to configure TIMER%d, return value=%d\r\n", cfg->timer, ui32Status);
   2c3b6:	7921      	ldrb	r1, [r4, #4]
   2c3b8:	4808      	ldr	r0, [pc, #32]	@ (2c3dc <ns_timer_platform_init+0xa0>)
   2c3ba:	462a      	mov	r2, r5
   2c3bc:	f7ff fcc8 	bl	2bd50 <ns_lp_printf>
}
   2c3c0:	4628      	mov	r0, r5
   2c3c2:	b006      	add	sp, #24
   2c3c4:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2c3c6:	4b04      	ldr	r3, [pc, #16]	@ (2c3d8 <ns_timer_platform_init+0x9c>)
   2c3c8:	2210      	movs	r2, #16
   2c3ca:	609a      	str	r2, [r3, #8]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2c3cc:	2280      	movs	r2, #128	@ 0x80
   2c3ce:	f883 2344 	strb.w	r2, [r3, #836]	@ 0x344
   2c3d2:	e7d4      	b.n	2c37e <ns_timer_platform_init+0x42>
   2c3d4:	aaaaaaab 	.word	0xaaaaaaab
   2c3d8:	e000e100 	.word	0xe000e100
   2c3dc:	0003fd88 	.word	0x0003fd88

0002c3e0 <ns_us_ticker_read>:

uint32_t ns_us_ticker_read(ns_timer_config_t *cfg) {
#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
   2c3e0:	b140      	cbz	r0, 2c3f4 <ns_us_ticker_read+0x14>
uint32_t ns_us_ticker_read(ns_timer_config_t *cfg) {
   2c3e2:	b508      	push	{r3, lr}
        return 0xDEADBEEF;
    }
#endif
    return am_hal_timer_read(cfg->timer) / 6; // 6 ticks per uS
   2c3e4:	7900      	ldrb	r0, [r0, #4]
   2c3e6:	f006 ffe7 	bl	333b8 <am_hal_timer_read>
   2c3ea:	4b03      	ldr	r3, [pc, #12]	@ (2c3f8 <ns_us_ticker_read+0x18>)
   2c3ec:	fba3 3000 	umull	r3, r0, r3, r0
   2c3f0:	0880      	lsrs	r0, r0, #2
}
   2c3f2:	bd08      	pop	{r3, pc}
        return 0xDEADBEEF;
   2c3f4:	4801      	ldr	r0, [pc, #4]	@ (2c3fc <ns_us_ticker_read+0x1c>)
}
   2c3f6:	4770      	bx	lr
   2c3f8:	aaaaaaab 	.word	0xaaaaaaab
   2c3fc:	deadbeef 	.word	0xdeadbeef

0002c400 <ns_camera_buff_read_done>:
static uint32_t dma_offset;
static uint8_t *dma_cambuf;

bool ns_read_done = false;

void ns_camera_buff_read_done(ns_spi_config_t *cfg) {
   2c400:	b530      	push	{r4, r5, lr}
    // ns_printf("Chunk Read done for chunk starting at offset %d\n", dma_offset);

    // Calculate next chunk offset
    dma_offset += dma_current_chunk_length;
   2c402:	491b      	ldr	r1, [pc, #108]	@ (2c470 <ns_camera_buff_read_done+0x70>)
   2c404:	4d1b      	ldr	r5, [pc, #108]	@ (2c474 <ns_camera_buff_read_done+0x74>)
   2c406:	680b      	ldr	r3, [r1, #0]
   2c408:	682a      	ldr	r2, [r5, #0]

    // Check if we have more to read
    if (dma_offset < dma_total_requested_length) {
   2c40a:	4c1b      	ldr	r4, [pc, #108]	@ (2c478 <ns_camera_buff_read_done+0x78>)
    dma_offset += dma_current_chunk_length;
   2c40c:	4413      	add	r3, r2
    if (dma_offset < dma_total_requested_length) {
   2c40e:	6822      	ldr	r2, [r4, #0]
    dma_offset += dma_current_chunk_length;
   2c410:	600b      	str	r3, [r1, #0]
    if (dma_offset < dma_total_requested_length) {
   2c412:	4293      	cmp	r3, r2
void ns_camera_buff_read_done(ns_spi_config_t *cfg) {
   2c414:	b085      	sub	sp, #20
    if (dma_offset < dma_total_requested_length) {
   2c416:	d312      	bcc.n	2c43e <ns_camera_buff_read_done+0x3e>
        // ns_lp_printf("Starting next dma addr %d len %d\n", dma_offset, dma_current_chunk_length);
        ns_spi_read_dma(
            spiHandle, dma_offset + dma_cambuf, dma_current_chunk_length, ARDU_BURST_FIFO_READ, 1,
            camera.csPin);
    } else {
        ns_read_done = true;
   2c418:	4b18      	ldr	r3, [pc, #96]	@ (2c47c <ns_camera_buff_read_done+0x7c>)
        // ns_lp_printf("DMA Read done\n");
        if (ns_camera_config.dmaCompleteCb) {
   2c41a:	4819      	ldr	r0, [pc, #100]	@ (2c480 <ns_camera_buff_read_done+0x80>)
        ns_read_done = true;
   2c41c:	2101      	movs	r1, #1
   2c41e:	7019      	strb	r1, [r3, #0]
        if (ns_camera_config.dmaCompleteCb) {
   2c420:	6b03      	ldr	r3, [r0, #48]	@ 0x30
   2c422:	b10b      	cbz	r3, 2c428 <ns_camera_buff_read_done+0x28>
            ns_camera_config.dmaCompleteCb(&ns_camera_config);
   2c424:	4798      	blx	r3
        }
        if (camera.burstFirstFlag == 0) {
            camera.burstFirstFlag = 1;
        }
        camera.receivedLength -= dma_total_requested_length;
   2c426:	6822      	ldr	r2, [r4, #0]
        if (camera.burstFirstFlag == 0) {
   2c428:	4b16      	ldr	r3, [pc, #88]	@ (2c484 <ns_camera_buff_read_done+0x84>)
   2c42a:	7b99      	ldrb	r1, [r3, #14]
   2c42c:	b121      	cbz	r1, 2c438 <ns_camera_buff_read_done+0x38>
        camera.receivedLength -= dma_total_requested_length;
   2c42e:	6899      	ldr	r1, [r3, #8]
   2c430:	1a89      	subs	r1, r1, r2
   2c432:	6099      	str	r1, [r3, #8]
    }
}
   2c434:	b005      	add	sp, #20
   2c436:	bd30      	pop	{r4, r5, pc}
            camera.burstFirstFlag = 1;
   2c438:	2101      	movs	r1, #1
   2c43a:	7399      	strb	r1, [r3, #14]
   2c43c:	e7f7      	b.n	2c42e <ns_camera_buff_read_done+0x2e>
        ns_spi_read_dma(
   2c43e:	4912      	ldr	r1, [pc, #72]	@ (2c488 <ns_camera_buff_read_done+0x88>)
            camera.csPin);
   2c440:	4c10      	ldr	r4, [pc, #64]	@ (2c484 <ns_camera_buff_read_done+0x84>)
            spiHandle, dma_offset + dma_cambuf, dma_current_chunk_length, ARDU_BURST_FIFO_READ, 1,
   2c442:	6809      	ldr	r1, [r1, #0]
        ns_spi_read_dma(
   2c444:	4811      	ldr	r0, [pc, #68]	@ (2c48c <ns_camera_buff_read_done+0x8c>)
        dma_current_chunk_length = (dma_total_requested_length - dma_offset) > MAX_SPI_DMA_LEN
   2c446:	1ad2      	subs	r2, r2, r3
        ns_spi_read_dma(
   2c448:	4419      	add	r1, r3
                                       : (dma_total_requested_length - dma_offset);
   2c44a:	f640 73ff 	movw	r3, #4095	@ 0xfff
   2c44e:	429a      	cmp	r2, r3
   2c450:	bf28      	it	cs
   2c452:	461a      	movcs	r2, r3
        ns_spi_read_dma(
   2c454:	6823      	ldr	r3, [r4, #0]
   2c456:	6800      	ldr	r0, [r0, #0]
   2c458:	9303      	str	r3, [sp, #12]
   2c45a:	2301      	movs	r3, #1
   2c45c:	9302      	str	r3, [sp, #8]
   2c45e:	243c      	movs	r4, #60	@ 0x3c
        dma_current_chunk_length = (dma_total_requested_length - dma_offset) > MAX_SPI_DMA_LEN
   2c460:	602a      	str	r2, [r5, #0]
        ns_spi_read_dma(
   2c462:	2500      	movs	r5, #0
   2c464:	e9cd 4500 	strd	r4, r5, [sp]
   2c468:	f010 faa0 	bl	3c9ac <ns_spi_read_dma>
}
   2c46c:	b005      	add	sp, #20
   2c46e:	bd30      	pop	{r4, r5, pc}
   2c470:	100528e4 	.word	0x100528e4
   2c474:	100528e8 	.word	0x100528e8
   2c478:	100528ec 	.word	0x100528ec
   2c47c:	100528dc 	.word	0x100528dc
   2c480:	100528f4 	.word	0x100528f4
   2c484:	10052938 	.word	0x10052938
   2c488:	100528e0 	.word	0x100528e0
   2c48c:	10052934 	.word	0x10052934

0002c490 <ns_camera_check_picture_completion>:

void ns_camera_check_picture_completion(ns_timer_config_t *timer) {
   2c490:	b538      	push	{r3, r4, r5, lr}
    if (!nsCameraPictureBeingTaken) {
   2c492:	4c0d      	ldr	r4, [pc, #52]	@ (2c4c8 <ns_camera_check_picture_completion+0x38>)
   2c494:	7823      	ldrb	r3, [r4, #0]
   2c496:	b903      	cbnz	r3, 2c49a <ns_camera_check_picture_completion+0xa>
    if (ns_camera_config.pictureTakenCb) {
        // ns_lp_printf("Calling picture taken CB\n");
        ns_camera_config.pictureTakenCb(&ns_camera_config);
    }
    nsCameraPictureBeingTaken = false;
}
   2c498:	bd38      	pop	{r3, r4, r5, pc}
    if (getBit(&camera, NS_CAMERA_ARDUCHIP_TRIG, NS_CAMERA_CAP_DONE_MASK) == 0) {
   2c49a:	4d0c      	ldr	r5, [pc, #48]	@ (2c4cc <ns_camera_check_picture_completion+0x3c>)
   2c49c:	2204      	movs	r2, #4
   2c49e:	2144      	movs	r1, #68	@ 0x44
   2c4a0:	4628      	mov	r0, r5
   2c4a2:	f000 fe69 	bl	2d178 <getBit>
   2c4a6:	2800      	cmp	r0, #0
   2c4a8:	d0f6      	beq.n	2c498 <ns_camera_check_picture_completion+0x8>
    camera.receivedLength = readFifoLength(&camera);
   2c4aa:	4628      	mov	r0, r5
   2c4ac:	f000 fe60 	bl	2d170 <readFifoLength>
   2c4b0:	4603      	mov	r3, r0
    if (ns_camera_config.pictureTakenCb) {
   2c4b2:	4807      	ldr	r0, [pc, #28]	@ (2c4d0 <ns_camera_check_picture_completion+0x40>)
   2c4b4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
    camera.burstFirstFlag = 0;
   2c4b6:	2100      	movs	r1, #0
    camera.totalLength = camera.receivedLength;
   2c4b8:	e9c5 3301 	strd	r3, r3, [r5, #4]
    camera.burstFirstFlag = 0;
   2c4bc:	73a9      	strb	r1, [r5, #14]
    if (ns_camera_config.pictureTakenCb) {
   2c4be:	b102      	cbz	r2, 2c4c2 <ns_camera_check_picture_completion+0x32>
        ns_camera_config.pictureTakenCb(&ns_camera_config);
   2c4c0:	4790      	blx	r2
    nsCameraPictureBeingTaken = false;
   2c4c2:	2300      	movs	r3, #0
   2c4c4:	7023      	strb	r3, [r4, #0]
}
   2c4c6:	bd38      	pop	{r3, r4, r5, pc}
   2c4c8:	100528f0 	.word	0x100528f0
   2c4cc:	10052938 	.word	0x10052938
   2c4d0:	100528f4 	.word	0x100528f4

0002c4d4 <ns_camera_init>:
    .enableInterrupt = true,
    .periodInMicroseconds = 80000,
    .callback = ns_camera_check_picture_completion,
};

uint32_t ns_camera_init(ns_camera_config_t *cfg) {
   2c4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    // Only IOM1 is supported currently - check it
    // Check that buff size is sane
    // Check that picture mode is sane
    // Check that pix format is sane

    spiHandle = &cfg->spiConfig;
   2c4d6:	4a21      	ldr	r2, [pc, #132]	@ (2c55c <ns_camera_init+0x88>)
    cfg->spiConfig.cb = ns_camera_buff_read_done;
   2c4d8:	4b21      	ldr	r3, [pc, #132]	@ (2c560 <ns_camera_init+0x8c>)
    memcpy(&ns_camera_config, cfg, sizeof(ns_camera_config_t));
   2c4da:	4d22      	ldr	r5, [pc, #136]	@ (2c564 <ns_camera_init+0x90>)
    cfg->spiConfig.cb = ns_camera_buff_read_done;
   2c4dc:	62c3      	str	r3, [r0, #44]	@ 0x2c
    spiHandle = &cfg->spiConfig;
   2c4de:	f100 0610 	add.w	r6, r0, #16
uint32_t ns_camera_init(ns_camera_config_t *cfg) {
   2c4e2:	b093      	sub	sp, #76	@ 0x4c
   2c4e4:	4604      	mov	r4, r0
    spiHandle = &cfg->spiConfig;
   2c4e6:	6016      	str	r6, [r2, #0]
    memcpy(&ns_camera_config, cfg, sizeof(ns_camera_config_t));
   2c4e8:	4684      	mov	ip, r0
   2c4ea:	f100 0740 	add.w	r7, r0, #64	@ 0x40
   2c4ee:	f8dc 0000 	ldr.w	r0, [ip]
   2c4f2:	f8dc 1004 	ldr.w	r1, [ip, #4]
   2c4f6:	f8dc 2008 	ldr.w	r2, [ip, #8]
   2c4fa:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2c4fe:	46ae      	mov	lr, r5
   2c500:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   2c504:	f10c 0c10 	add.w	ip, ip, #16
   2c508:	45bc      	cmp	ip, r7
   2c50a:	4675      	mov	r5, lr
   2c50c:	d1ef      	bne.n	2c4ee <ns_camera_init+0x1a>

    am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_IOM1);
   2c50e:	2002      	movs	r0, #2
   2c510:	f006 f8f8 	bl	32704 <am_hal_pwrctrl_periph_enable>
    if (ns_spi_interface_init(&cfg->spiConfig, cfg->spiSpeed, AM_HAL_IOM_SPI_MODE_0)) {
   2c514:	68a1      	ldr	r1, [r4, #8]
   2c516:	2200      	movs	r2, #0
   2c518:	4630      	mov	r0, r6
   2c51a:	f010 f9e3 	bl	3c8e4 <ns_spi_interface_init>
   2c51e:	4605      	mov	r5, r0
   2c520:	b990      	cbnz	r0, 2c548 <ns_camera_init+0x74>
        return NS_STATUS_INIT_FAILED;
    }
    createArducamCamera(AM_BSP_IOM1_CS_CHNL); // inits camera global, other stuff
   2c522:	4601      	mov	r1, r0
   2c524:	4668      	mov	r0, sp
   2c526:	f000 fe2f 	bl	2d188 <createArducamCamera>

    // Start a polling timer is needed
    if (cfg->pictureTakenCb != NULL) {
   2c52a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c52c:	b11b      	cbz	r3, 2c536 <ns_camera_init+0x62>
        // ns_lp_printf("Starting camera timer\n");
        NS_TRY(ns_timer_init(&timerCfg), "Failed to init camera timer\n");
   2c52e:	480e      	ldr	r0, [pc, #56]	@ (2c568 <ns_camera_init+0x94>)
   2c530:	f7ff fea4 	bl	2c27c <ns_timer_init>
   2c534:	b960      	cbnz	r0, 2c550 <ns_camera_init+0x7c>
    }

    begin(&camera);
   2c536:	480d      	ldr	r0, [pc, #52]	@ (2c56c <ns_camera_init+0x98>)
   2c538:	f000 fdf2 	bl	2d120 <begin>
    lowPowerOn(&camera);
   2c53c:	480b      	ldr	r0, [pc, #44]	@ (2c56c <ns_camera_init+0x98>)
   2c53e:	f000 fe0b 	bl	2d158 <lowPowerOn>
    return NS_STATUS_SUCCESS;
}
   2c542:	4628      	mov	r0, r5
   2c544:	b013      	add	sp, #76	@ 0x4c
   2c546:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return NS_STATUS_INIT_FAILED;
   2c548:	2504      	movs	r5, #4
}
   2c54a:	4628      	mov	r0, r5
   2c54c:	b013      	add	sp, #76	@ 0x4c
   2c54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NS_TRY(ns_timer_init(&timerCfg), "Failed to init camera timer\n");
   2c550:	4807      	ldr	r0, [pc, #28]	@ (2c570 <ns_camera_init+0x9c>)
   2c552:	f7ff fbfd 	bl	2bd50 <ns_lp_printf>
   2c556:	f7ed f8b1 	bl	196bc <ns_core_fail_loop>
   2c55a:	e7ec      	b.n	2c536 <ns_camera_init+0x62>
   2c55c:	10052934 	.word	0x10052934
   2c560:	0002c401 	.word	0x0002c401
   2c564:	100528f4 	.word	0x100528f4
   2c568:	1000caa4 	.word	0x1000caa4
   2c56c:	10052938 	.word	0x10052938
   2c570:	0003fdb8 	.word	0x0003fdb8

0002c574 <arducam_spi_read>:

int arducam_spi_read(
    const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen, uint32_t csPin) {
   2c574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c578:	b085      	sub	sp, #20
   2c57a:	e9dd 9a0e 	ldrd	r9, sl, [sp, #56]	@ 0x38
    uint32_t err = 0;
    uint8_t *bufPtr = (uint8_t *)buf;
    uint32_t bytesLeft = bufLen;
    uint32_t chunkSize;
    while (bytesLeft) {
   2c57e:	460d      	mov	r5, r1
   2c580:	b1c1      	cbz	r1, 2c5b4 <arducam_spi_read+0x40>
   2c582:	f8df b038 	ldr.w	fp, [pc, #56]	@ 2c5bc <arducam_spi_read+0x48>
   2c586:	4606      	mov	r6, r0
   2c588:	4617      	mov	r7, r2
   2c58a:	4698      	mov	r8, r3
        chunkSize = bytesLeft > MAX_SPI_BUF_LEN ? MAX_SPI_BUF_LEN : bytesLeft;
   2c58c:	2d40      	cmp	r5, #64	@ 0x40
   2c58e:	462c      	mov	r4, r5
   2c590:	bf28      	it	cs
   2c592:	2440      	movcs	r4, #64	@ 0x40
        err = ns_spi_read(spiHandle, bufPtr, chunkSize, reg, regLen, csPin);
   2c594:	f8db 0000 	ldr.w	r0, [fp]
   2c598:	4631      	mov	r1, r6
   2c59a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
   2c59e:	e9cd 7800 	strd	r7, r8, [sp]
   2c5a2:	4622      	mov	r2, r4
   2c5a4:	f010 f9e2 	bl	3c96c <ns_spi_read>
    while (bytesLeft) {
   2c5a8:	1b2d      	subs	r5, r5, r4
        bufPtr += chunkSize;
   2c5aa:	4426      	add	r6, r4
    while (bytesLeft) {
   2c5ac:	d1ee      	bne.n	2c58c <arducam_spi_read+0x18>
        bytesLeft -= chunkSize;
    }
    return err;
}
   2c5ae:	b005      	add	sp, #20
   2c5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (bytesLeft) {
   2c5b4:	4608      	mov	r0, r1
}
   2c5b6:	b005      	add	sp, #20
   2c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c5bc:	10052934 	.word	0x10052934

0002c5c0 <arducam_spi_write>:

int arducam_spi_write(
    const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen, uint32_t csPin) {
   2c5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c5c4:	b085      	sub	sp, #20
   2c5c6:	e9dd 9a0e 	ldrd	r9, sl, [sp, #56]	@ 0x38
    uint8_t *bufPtr = (uint8_t *)buf;
    uint32_t bytesLeft = bufLen;
    uint32_t chunkSize;
    while (bytesLeft) {
   2c5ca:	b1b1      	cbz	r1, 2c5fa <arducam_spi_write+0x3a>
   2c5cc:	f8df b034 	ldr.w	fp, [pc, #52]	@ 2c604 <arducam_spi_write+0x44>
   2c5d0:	4606      	mov	r6, r0
   2c5d2:	4617      	mov	r7, r2
   2c5d4:	4698      	mov	r8, r3
   2c5d6:	460d      	mov	r5, r1
        chunkSize = bytesLeft > MAX_SPI_BUF_LEN ? MAX_SPI_BUF_LEN : bytesLeft;
   2c5d8:	2d40      	cmp	r5, #64	@ 0x40
   2c5da:	462c      	mov	r4, r5
   2c5dc:	bf28      	it	cs
   2c5de:	2440      	movcs	r4, #64	@ 0x40
        ns_spi_write(spiHandle, bufPtr, chunkSize, reg, regLen, csPin);
   2c5e0:	f8db 0000 	ldr.w	r0, [fp]
   2c5e4:	4631      	mov	r1, r6
   2c5e6:	e9cd 9a02 	strd	r9, sl, [sp, #8]
   2c5ea:	e9cd 7800 	strd	r7, r8, [sp]
   2c5ee:	4622      	mov	r2, r4
   2c5f0:	f010 fa0a 	bl	3ca08 <ns_spi_write>
    while (bytesLeft) {
   2c5f4:	1b2d      	subs	r5, r5, r4
        bufPtr += chunkSize;
   2c5f6:	4426      	add	r6, r4
    while (bytesLeft) {
   2c5f8:	d1ee      	bne.n	2c5d8 <arducam_spi_write+0x18>
        bytesLeft -= chunkSize;
    }
    return 0;
}
   2c5fa:	2000      	movs	r0, #0
   2c5fc:	b005      	add	sp, #20
   2c5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c602:	bf00      	nop
   2c604:	10052934 	.word	0x10052934

0002c608 <arducam_delay_ms>:

void arducam_delay_ms(uint16_t delay) { ns_delay_us(1000 * delay); }
   2c608:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
   2c60c:	fb03 f000 	mul.w	r0, r3, r0
   2c610:	f006 bf2c 	b.w	3346c <am_hal_delay_us>

0002c614 <ns_start_camera>:
    }
    camera->receivedLength -= length;
    return length;
}

uint32_t ns_start_camera(ns_camera_config_t *cfg) {
   2c614:	b510      	push	{r4, lr}
    /**
     * @brief Start camera and take out of standby
     *
     */
    lowPowerOff(&camera);
   2c616:	4c0d      	ldr	r4, [pc, #52]	@ (2c64c <ns_start_camera+0x38>)
   2c618:	4620      	mov	r0, r4
   2c61a:	f000 fda1 	bl	2d160 <lowPowerOff>
    ns_delay_us(1000);
   2c61e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   2c622:	f006 ff23 	bl	3346c <am_hal_delay_us>
    setBrightness(&camera, CAM_BRIGHTNESS_LEVEL_1);
   2c626:	2105      	movs	r1, #5
   2c628:	4620      	mov	r0, r4
   2c62a:	f000 fd91 	bl	2d150 <setBrightness>
    setAutoExposure(&camera, true);
   2c62e:	2101      	movs	r1, #1
   2c630:	4620      	mov	r0, r4
   2c632:	f000 fd79 	bl	2d128 <setAutoExposure>
    setAutoFocus(&camera, true);
   2c636:	2101      	movs	r1, #1
   2c638:	4620      	mov	r0, r4
   2c63a:	f000 fd7d 	bl	2d138 <setAutoFocus>
    setAutoISOSensitive(&camera, true);
   2c63e:	2101      	movs	r1, #1
   2c640:	4620      	mov	r0, r4
   2c642:	f000 fd75 	bl	2d130 <setAutoISOSensitive>

    return NS_STATUS_SUCCESS;
}
   2c646:	2000      	movs	r0, #0
   2c648:	bd10      	pop	{r4, pc}
   2c64a:	bf00      	nop
   2c64c:	10052938 	.word	0x10052938

0002c650 <ns_stop_camera>:
uint32_t ns_stop_camera(ns_camera_config_t *cfg) {
   2c650:	b508      	push	{r3, lr}
    /**
     * @brief Stop camera and put into low-power standby mode.
     *
     */
    lowPowerOn(&camera);
   2c652:	4802      	ldr	r0, [pc, #8]	@ (2c65c <ns_stop_camera+0xc>)
   2c654:	f000 fd80 	bl	2d158 <lowPowerOn>
    return NS_STATUS_SUCCESS;
}
   2c658:	2000      	movs	r0, #0
   2c65a:	bd08      	pop	{r3, pc}
   2c65c:	10052938 	.word	0x10052938

0002c660 <ns_press_shutter_button>:
}

// Arducam needs to be polled to check when a capture is done.
// Instead of a tight loop, we use a timer to poll the camera.
// This function just starts the timer and sets state.
uint32_t ns_press_shutter_button(ns_camera_config_t *cfg) {
   2c660:	b538      	push	{r3, r4, r5, lr}
    ns_image_pix_fmt_e pixel_format = cfg->imagePixFmt;
    ns_image_mode_e mode = cfg->imageMode;

    if (cfg->pictureTakenCb == NULL) {
   2c662:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2c664:	b343      	cbz	r3, 2c6b8 <ns_press_shutter_button+0x58>
        return NS_STATUS_INVALID_CONFIG;
    }

    if (camera.currentPixelFormat != pixel_format) {
   2c666:	4c15      	ldr	r4, [pc, #84]	@ (2c6bc <ns_press_shutter_button+0x5c>)
    ns_image_pix_fmt_e pixel_format = cfg->imagePixFmt;
   2c668:	7b82      	ldrb	r2, [r0, #14]
    if (camera.currentPixelFormat != pixel_format) {
   2c66a:	7c23      	ldrb	r3, [r4, #16]
    ns_image_mode_e mode = cfg->imageMode;
   2c66c:	7b45      	ldrb	r5, [r0, #13]
    if (camera.currentPixelFormat != pixel_format) {
   2c66e:	4293      	cmp	r3, r2
   2c670:	d116      	bne.n	2c6a0 <ns_press_shutter_button+0x40>
        camera.currentPixelFormat = pixel_format;
        ns_lp_printf("Setting pixel format to %d\n", pixel_format);
        writeReg(&camera, NS_CAM_REG_FORMAT, pixel_format); // set the data format
        waitI2cIdle(&camera);                               // Wait I2c Idle
    }

   2c672:	7c63      	ldrb	r3, [r4, #17]
   2c674:	42ab      	cmp	r3, r5
   2c676:	d109      	bne.n	2c68c <ns_press_shutter_button+0x2c>
    if (camera.currentPictureMode != mode) {
        camera.currentPictureMode = mode;
        ns_lp_printf("Setting capture mode to %d\n", mode);
        writeReg(&camera, NS_CAM_REG_CAPTURE_RESOLUTION, NS_CAM_SET_CAPTURE_MODE | mode);
        waitI2cIdle(&camera); // Wait I2c Idle
    }
   2c678:	4810      	ldr	r0, [pc, #64]	@ (2c6bc <ns_press_shutter_button+0x5c>)
   2c67a:	f000 faab 	bl	2cbd4 <cameraClearFifoFlag>

   2c67e:	480f      	ldr	r0, [pc, #60]	@ (2c6bc <ns_press_shutter_button+0x5c>)
   2c680:	f000 faa2 	bl	2cbc8 <cameraStartCapture>
    cameraClearFifoFlag(&camera);
   2c684:	4b0e      	ldr	r3, [pc, #56]	@ (2c6c0 <ns_press_shutter_button+0x60>)
   2c686:	2201      	movs	r2, #1
   2c688:	701a      	strb	r2, [r3, #0]
    cameraStartCapture(&camera);
   2c68a:	bd38      	pop	{r3, r4, r5, pc}
        camera.currentPictureMode = mode;
   2c68c:	462a      	mov	r2, r5
   2c68e:	2121      	movs	r1, #33	@ 0x21
   2c690:	480a      	ldr	r0, [pc, #40]	@ (2c6bc <ns_press_shutter_button+0x5c>)
    if (camera.currentPictureMode != mode) {
   2c692:	7465      	strb	r5, [r4, #17]
        camera.currentPictureMode = mode;
   2c694:	f000 fd68 	bl	2d168 <writeReg>
        ns_lp_printf("Setting capture mode to %d\n", mode);
   2c698:	4808      	ldr	r0, [pc, #32]	@ (2c6bc <ns_press_shutter_button+0x5c>)
   2c69a:	f000 fd71 	bl	2d180 <waitI2cIdle>
   2c69e:	e7eb      	b.n	2c678 <ns_press_shutter_button+0x18>
        ns_lp_printf("Setting pixel format to %d\n", pixel_format);
   2c6a0:	2120      	movs	r1, #32
   2c6a2:	4620      	mov	r0, r4
        camera.currentPixelFormat = pixel_format;
   2c6a4:	7422      	strb	r2, [r4, #16]
        ns_lp_printf("Setting pixel format to %d\n", pixel_format);
   2c6a6:	f000 fd5f 	bl	2d168 <writeReg>
        writeReg(&camera, NS_CAM_REG_FORMAT, pixel_format); // set the data format
   2c6aa:	4620      	mov	r0, r4
   2c6ac:	f000 fd68 	bl	2d180 <waitI2cIdle>

   2c6b0:	7c63      	ldrb	r3, [r4, #17]
   2c6b2:	42ab      	cmp	r3, r5
   2c6b4:	d0e0      	beq.n	2c678 <ns_press_shutter_button+0x18>
   2c6b6:	e7e9      	b.n	2c68c <ns_press_shutter_button+0x2c>
        return NS_STATUS_INVALID_CONFIG;
   2c6b8:	2003      	movs	r0, #3
    cameraStartCapture(&camera);
   2c6ba:	bd38      	pop	{r3, r4, r5, pc}
   2c6bc:	10052938 	.word	0x10052938
   2c6c0:	100528f0 	.word	0x100528f0

0002c6c4 <ns_start_dma_read>:
    /**
     * @brief Check if Arducam is still fetching frame
     *
     */
    return !cameraImageAvailable(&camera);
}
   2c6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c6c8:	4c20      	ldr	r4, [pc, #128]	@ (2c74c <ns_start_dma_read+0x88>)

uint32_t ns_start_dma_read(
    ns_camera_config_t *cfg, uint8_t *camBuf, uint32_t *buffer_offset, uint32_t bufLen) {
    // Wait for capture to complete
   2c6ca:	4d21      	ldr	r5, [pc, #132]	@ (2c750 <ns_start_dma_read+0x8c>)
}
   2c6cc:	b084      	sub	sp, #16
   2c6ce:	4680      	mov	r8, r0
   2c6d0:	460e      	mov	r6, r1
   2c6d2:	4617      	mov	r7, r2
uint32_t ns_start_dma_read(
   2c6d4:	e004      	b.n	2c6e0 <ns_start_dma_read+0x1c>
    ns_camera_config_t *cfg, uint8_t *camBuf, uint32_t *buffer_offset, uint32_t bufLen) {
   2c6d6:	f006 fec9 	bl	3346c <am_hal_delay_us>
    // Wait for capture to complete
   2c6da:	4628      	mov	r0, r5
   2c6dc:	f7ff fb38 	bl	2bd50 <ns_lp_printf>
     * @brief Check if Arducam is still fetching frame
   2c6e0:	4620      	mov	r0, r4
   2c6e2:	f000 f861 	bl	2c7a8 <cameraImageAvailable>
   2c6e6:	4603      	mov	r3, r0
    ns_camera_config_t *cfg, uint8_t *camBuf, uint32_t *buffer_offset, uint32_t bufLen) {
   2c6e8:	f242 7010 	movw	r0, #10000	@ 0x2710
uint32_t ns_start_dma_read(
   2c6ec:	2b00      	cmp	r3, #0
   2c6ee:	d0f2      	beq.n	2c6d6 <ns_start_dma_read+0x12>
    while (ns_is_camera_capturing()) {
        ns_delay_us(10000);
        ns_lp_printf("Waiting for camera capture\n"); // should never be here
    }
   2c6f0:	4816      	ldr	r0, [pc, #88]	@ (2c74c <ns_start_dma_read+0x88>)
        *buffer_offset = 1;
    } else {
        *buffer_offset = 0;
    }

    // Kick off DMA read
   2c6f2:	4d18      	ldr	r5, [pc, #96]	@ (2c754 <ns_start_dma_read+0x90>)
    }
   2c6f4:	f000 fa74 	bl	2cbe0 <cameraReadFifoLength>
    // Get FIFO length
   2c6f8:	f898 200e 	ldrb.w	r2, [r8, #14]
    ns_read_done = false;
    dma_cambuf = camBuf;
    dma_offset = 0;
    dma_current_chunk_length = (dma_total_requested_length > MAX_SPI_DMA_LEN)
                                   ? MAX_SPI_DMA_LEN
   2c6fc:	6821      	ldr	r1, [r4, #0]
    }
   2c6fe:	4c16      	ldr	r4, [pc, #88]	@ (2c758 <ns_start_dma_read+0x94>)
                                   ? MAX_SPI_DMA_LEN
   2c700:	9103      	str	r1, [sp, #12]
    // Get FIFO length
   2c702:	f1a2 0201 	sub.w	r2, r2, #1
    }
   2c706:	4603      	mov	r3, r0
    // Get FIFO length
   2c708:	fab2 f282 	clz	r2, r2
    }
   2c70c:	6023      	str	r3, [r4, #0]
    // Get FIFO length
   2c70e:	0952      	lsrs	r2, r2, #5

   2c710:	4b12      	ldr	r3, [pc, #72]	@ (2c75c <ns_start_dma_read+0x98>)
   2c712:	603a      	str	r2, [r7, #0]
    dma_offset = 0;
   2c714:	f640 72ff 	movw	r2, #4095	@ 0xfff

   2c718:	601e      	str	r6, [r3, #0]
    dma_offset = 0;
   2c71a:	4282      	cmp	r2, r0
    ns_read_done = false;
   2c71c:	4b10      	ldr	r3, [pc, #64]	@ (2c760 <ns_start_dma_read+0x9c>)
                                   ? MAX_SPI_DMA_LEN
   2c71e:	4911      	ldr	r1, [pc, #68]	@ (2c764 <ns_start_dma_read+0xa0>)
    }
   2c720:	4f11      	ldr	r7, [pc, #68]	@ (2c768 <ns_start_dma_read+0xa4>)
    dma_offset = 0;
   2c722:	bf28      	it	cs
   2c724:	4602      	movcs	r2, r0
    ns_read_done = false;
   2c726:	601a      	str	r2, [r3, #0]
                                   ? MAX_SPI_DMA_LEN
   2c728:	2301      	movs	r3, #1
   2c72a:	6808      	ldr	r0, [r1, #0]
   2c72c:	9302      	str	r3, [sp, #8]
    }
   2c72e:	2300      	movs	r3, #0
   2c730:	703b      	strb	r3, [r7, #0]
                                   ? MAX_SPI_DMA_LEN
   2c732:	4631      	mov	r1, r6
   2c734:	2700      	movs	r7, #0
   2c736:	263c      	movs	r6, #60	@ 0x3c
    // Kick off DMA read
   2c738:	602b      	str	r3, [r5, #0]
                                   ? MAX_SPI_DMA_LEN
   2c73a:	e9cd 6700 	strd	r6, r7, [sp]
   2c73e:	f010 f935 	bl	3c9ac <ns_spi_read_dma>
                                   : dma_total_requested_length;
    // ns_lp_printf("Starting DMA read of chunk size %d\n", dma_current_chunk_length);
    uint32_t err = ns_spi_read_dma(
        spiHandle, camBuf, dma_current_chunk_length, ARDU_BURST_FIFO_READ, 1, camera.csPin);
   2c742:	6820      	ldr	r0, [r4, #0]
   2c744:	b004      	add	sp, #16
   2c746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c74a:	bf00      	nop
   2c74c:	10052938 	.word	0x10052938
   2c750:	0003fdd8 	.word	0x0003fdd8
   2c754:	100528e4 	.word	0x100528e4
   2c758:	100528ec 	.word	0x100528ec
   2c75c:	100528e0 	.word	0x100528e0
   2c760:	100528e8 	.word	0x100528e8
   2c764:	10052934 	.word	0x10052934
   2c768:	100528dc 	.word	0x100528dc

0002c76c <cameraSetCapture>:
uint8_t busWrite(ArducamCamera *camera, int address, int value) {
    return camera->arducamCameraOp->busWrite(camera, address, value);
}

void startCapture(ArducamCamera *camera) { camera->arducamCameraOp->startCapture(camera); }
void clearFifoFlag(ArducamCamera *camera) { camera->arducamCameraOp->clearFifoFlag(camera); }
   2c76c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
void cameraSetCapture(ArducamCamera *camera) {
   2c76e:	b510      	push	{r4, lr}
   2c770:	4604      	mov	r4, r0
void clearFifoFlag(ArducamCamera *camera) { camera->arducamCameraOp->clearFifoFlag(camera); }
   2c772:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
   2c776:	4798      	blx	r3
void startCapture(ArducamCamera *camera) { camera->arducamCameraOp->startCapture(camera); }
   2c778:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c77a:	4620      	mov	r0, r4
   2c77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
   2c780:	4798      	blx	r3
uint32_t readFifoLength(ArducamCamera *camera) {
    return camera->arducamCameraOp->readFifoLength(camera);
}
uint8_t getBit(ArducamCamera *camera, uint8_t addr, uint8_t bit) {
    return camera->arducamCameraOp->getBit(camera, addr, bit);
   2c782:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c784:	2204      	movs	r2, #4
   2c786:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
   2c78a:	2144      	movs	r1, #68	@ 0x44
   2c78c:	4620      	mov	r0, r4
   2c78e:	4798      	blx	r3
    while (getBit(camera, ARDUCHIP_TRIG, CAP_DONE_MASK) == 0)
   2c790:	2800      	cmp	r0, #0
   2c792:	d0f6      	beq.n	2c782 <cameraSetCapture+0x16>
    return camera->arducamCameraOp->readFifoLength(camera);
   2c794:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c796:	4620      	mov	r0, r4
   2c798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
   2c79c:	4798      	blx	r3
    camera->burstFirstFlag = 0;
   2c79e:	2300      	movs	r3, #0
   2c7a0:	73a3      	strb	r3, [r4, #14]
    camera->totalLength = camera->receivedLength;
   2c7a2:	e9c4 0001 	strd	r0, r0, [r4, #4]
}
   2c7a6:	bd10      	pop	{r4, pc}

0002c7a8 <cameraImageAvailable>:
uint32_t cameraImageAvailable(ArducamCamera *camera) { return camera->receivedLength; }
   2c7a8:	6880      	ldr	r0, [r0, #8]
   2c7aa:	4770      	bx	lr

0002c7ac <cameraSetAutoFocus>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c7ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetAutoFocus(ArducamCamera *camera, uint8_t val) {
   2c7ae:	b510      	push	{r4, lr}
   2c7b0:	4604      	mov	r4, r0
   2c7b2:	460a      	mov	r2, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c7b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c7b6:	2129      	movs	r1, #41	@ 0x29
   2c7b8:	4798      	blx	r3
}
void setFifoBurst(ArducamCamera *camera) { camera->arducamCameraOp->setFifoBurst(camera); }
void setCapture(ArducamCamera *camera) { camera->arducamCameraOp->setCapture(camera); }
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c7ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c7bc:	4620      	mov	r0, r4
   2c7be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c7c2:	4798      	blx	r3
}
   2c7c4:	2000      	movs	r0, #0
   2c7c6:	bd10      	pop	{r4, pc}

0002c7c8 <cameraSetManualFocus>:
CamStatus cameraSetManualFocus(ArducamCamera *camera, uint16_t val) {
   2c7c8:	b538      	push	{r3, r4, r5, lr}
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c7ca:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetManualFocus(ArducamCamera *camera, uint16_t val) {
   2c7cc:	4604      	mov	r4, r0
   2c7ce:	460d      	mov	r5, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c7d0:	2236      	movs	r2, #54	@ 0x36
   2c7d2:	210b      	movs	r1, #11
   2c7d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c7d6:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c7d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c7da:	4620      	mov	r0, r4
   2c7dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c7e0:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c7e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c7e4:	2203      	movs	r2, #3
   2c7e6:	210c      	movs	r1, #12
   2c7e8:	4620      	mov	r0, r4
   2c7ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c7ec:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c7ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c7f0:	4620      	mov	r0, r4
   2c7f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c7f6:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c7f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c7fa:	f3c5 1205 	ubfx	r2, r5, #4, #6
   2c7fe:	210d      	movs	r1, #13
   2c800:	4620      	mov	r0, r4
   2c802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c804:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c806:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c808:	4620      	mov	r0, r4
   2c80a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c80e:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c810:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c812:	2236      	movs	r2, #54	@ 0x36
   2c814:	210b      	movs	r1, #11
   2c816:	4620      	mov	r0, r4
   2c818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c81a:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c81c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c81e:	4620      	mov	r0, r4
   2c820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c824:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c826:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c828:	2202      	movs	r2, #2
   2c82a:	210c      	movs	r1, #12
   2c82c:	4620      	mov	r0, r4
   2c82e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c830:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c832:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c834:	4620      	mov	r0, r4
   2c836:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c83a:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c83c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    uint8_t code_3_0 = (val << 4) & 0xF0;
   2c83e:	012a      	lsls	r2, r5, #4
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c840:	210d      	movs	r1, #13
   2c842:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
   2c846:	4620      	mov	r0, r4
   2c848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c84a:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c84c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c84e:	4620      	mov	r0, r4
   2c850:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c854:	4798      	blx	r3
}
   2c856:	2000      	movs	r0, #0
   2c858:	bd38      	pop	{r3, r4, r5, pc}
   2c85a:	bf00      	nop

0002c85c <cameraTakePicture>:
cameraTakePicture(ArducamCamera *camera, CAM_IMAGE_MODE mode, CAM_IMAGE_PIX_FMT pixel_format) {
   2c85c:	b538      	push	{r3, r4, r5, lr}
   2c85e:	460d      	mov	r5, r1
    if (camera->currentPixelFormat != pixel_format) {
   2c860:	7c01      	ldrb	r1, [r0, #16]
   2c862:	4291      	cmp	r1, r2
cameraTakePicture(ArducamCamera *camera, CAM_IMAGE_MODE mode, CAM_IMAGE_PIX_FMT pixel_format) {
   2c864:	4604      	mov	r4, r0
    if (camera->currentPixelFormat != pixel_format) {
   2c866:	d009      	beq.n	2c87c <cameraTakePicture+0x20>
        camera->currentPixelFormat = pixel_format;
   2c868:	7422      	strb	r2, [r4, #16]
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c86a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2c86c:	2120      	movs	r1, #32
   2c86e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c870:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c872:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c874:	4620      	mov	r0, r4
   2c876:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c87a:	4798      	blx	r3
    if (camera->currentPictureMode != mode) {
   2c87c:	7c63      	ldrb	r3, [r4, #17]
   2c87e:	42ab      	cmp	r3, r5
   2c880:	d00b      	beq.n	2c89a <cameraTakePicture+0x3e>
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c882:	6b63      	ldr	r3, [r4, #52]	@ 0x34
        camera->currentPictureMode = mode;
   2c884:	7465      	strb	r5, [r4, #17]
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c888:	4620      	mov	r0, r4
   2c88a:	462a      	mov	r2, r5
   2c88c:	2121      	movs	r1, #33	@ 0x21
   2c88e:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c892:	4620      	mov	r0, r4
   2c894:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c898:	4798      	blx	r3
void setCapture(ArducamCamera *camera) { camera->arducamCameraOp->setCapture(camera); }
   2c89a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c89c:	4620      	mov	r0, r4
   2c89e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
   2c8a2:	4798      	blx	r3
}
   2c8a4:	2000      	movs	r0, #0
   2c8a6:	bd38      	pop	{r3, r4, r5, pc}

0002c8a8 <cameratakeMultiPictures>:
    ArducamCamera *camera, CAM_IMAGE_MODE mode, CAM_IMAGE_PIX_FMT pixel_format, uint8_t num) {
   2c8a8:	b570      	push	{r4, r5, r6, lr}
    if (camera->currentPixelFormat != pixel_format) {
   2c8aa:	f890 c010 	ldrb.w	ip, [r0, #16]
   2c8ae:	4594      	cmp	ip, r2
    ArducamCamera *camera, CAM_IMAGE_MODE mode, CAM_IMAGE_PIX_FMT pixel_format, uint8_t num) {
   2c8b0:	4604      	mov	r4, r0
   2c8b2:	460d      	mov	r5, r1
   2c8b4:	461e      	mov	r6, r3
    if (camera->currentPixelFormat != pixel_format) {
   2c8b6:	d009      	beq.n	2c8cc <cameratakeMultiPictures+0x24>
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c8b8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2c8ba:	2120      	movs	r1, #32
   2c8bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        camera->currentPixelFormat = pixel_format;
   2c8be:	7422      	strb	r2, [r4, #16]
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c8c0:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c8c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c8c4:	4620      	mov	r0, r4
   2c8c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c8ca:	4798      	blx	r3
    if (camera->currentPictureMode != mode) {
   2c8cc:	7c61      	ldrb	r1, [r4, #17]
   2c8ce:	42a9      	cmp	r1, r5
   2c8d0:	d00b      	beq.n	2c8ea <cameratakeMultiPictures+0x42>
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c8d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c8d4:	4620      	mov	r0, r4
   2c8d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
        camera->currentPictureMode = mode;
   2c8d8:	7465      	strb	r5, [r4, #17]
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c8da:	462a      	mov	r2, r5
   2c8dc:	2121      	movs	r1, #33	@ 0x21
   2c8de:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c8e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c8e2:	4620      	mov	r0, r4
   2c8e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c8e8:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c8ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
   2c8ec:	4632      	mov	r2, r6
   2c8ee:	6f4b      	ldr	r3, [r1, #116]	@ 0x74
   2c8f0:	4620      	mov	r0, r4
   2c8f2:	2101      	movs	r1, #1
   2c8f4:	4798      	blx	r3
void setCapture(ArducamCamera *camera) { camera->arducamCameraOp->setCapture(camera); }
   2c8f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c8f8:	4620      	mov	r0, r4
   2c8fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
   2c8fe:	4798      	blx	r3
}
   2c900:	2000      	movs	r0, #0
   2c902:	bd70      	pop	{r4, r5, r6, pc}

0002c904 <cameraRegisterCallback>:
    camera->callBackFunction = function;
   2c904:	6381      	str	r1, [r0, #56]	@ 0x38
    camera->blockSize = size;
   2c906:	7302      	strb	r2, [r0, #12]
    camera->handle = handle;
   2c908:	63c3      	str	r3, [r0, #60]	@ 0x3c
}
   2c90a:	4770      	bx	lr

0002c90c <cameraStartPreview>:
CamStatus cameraStartPreview(ArducamCamera *camera, CAM_VIDEO_MODE mode) {
   2c90c:	b538      	push	{r3, r4, r5, lr}
    if (!camera->callBackFunction) {
   2c90e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    camera->previewMode = TRUE;
   2c910:	2201      	movs	r2, #1
   2c912:	73c2      	strb	r2, [r0, #15]
    if (!camera->callBackFunction) {
   2c914:	b1eb      	cbz	r3, 2c952 <cameraStartPreview+0x46>
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c916:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2c918:	4604      	mov	r4, r0
   2c91a:	460d      	mov	r5, r1
   2c91c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c91e:	2120      	movs	r1, #32
   2c920:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c922:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c924:	4620      	mov	r0, r4
   2c926:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c92a:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c92c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c92e:	2121      	movs	r1, #33	@ 0x21
   2c930:	f045 0280 	orr.w	r2, r5, #128	@ 0x80
   2c934:	4620      	mov	r0, r4
   2c936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c938:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c93a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c93c:	4620      	mov	r0, r4
   2c93e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c942:	4798      	blx	r3
void setCapture(ArducamCamera *camera) { camera->arducamCameraOp->setCapture(camera); }
   2c944:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c946:	4620      	mov	r0, r4
   2c948:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
   2c94c:	4798      	blx	r3
    return CAM_ERR_SUCCESS;
   2c94e:	2000      	movs	r0, #0
}
   2c950:	bd38      	pop	{r3, r4, r5, pc}
        return CAM_ERR_NO_CALLBACK;
   2c952:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
   2c956:	bd38      	pop	{r3, r4, r5, pc}

0002c958 <cameraStopPreview>:
CamStatus cameraStopPreview(ArducamCamera *camera) {
   2c958:	b538      	push	{r3, r4, r5, lr}
    if (camera->previewMode == TRUE && camera->handle != 0) {
   2c95a:	7bc3      	ldrb	r3, [r0, #15]
   2c95c:	2b01      	cmp	r3, #1
CamStatus cameraStopPreview(ArducamCamera *camera) {
   2c95e:	4604      	mov	r4, r0
    if (camera->previewMode == TRUE && camera->handle != 0) {
   2c960:	d014      	beq.n	2c98c <cameraStopPreview+0x34>
    camera->currentPictureMode = CAM_IMAGE_MODE_QVGA;
   2c962:	2201      	movs	r2, #1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c964:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->currentPictureMode = CAM_IMAGE_MODE_QVGA;
   2c966:	7462      	strb	r2, [r4, #17]
    camera->previewMode = FALSE;
   2c968:	f44f 7180 	mov.w	r1, #256	@ 0x100
   2c96c:	f8a4 100f 	strh.w	r1, [r4, #15]
    camera->receivedLength = 0;
   2c970:	2500      	movs	r5, #0
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c974:	2120      	movs	r1, #32
   2c976:	4620      	mov	r0, r4
    camera->totalLength = 0;
   2c978:	e9c4 5501 	strd	r5, r5, [r4, #4]
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c97c:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c97e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c980:	4620      	mov	r0, r4
   2c982:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c986:	4798      	blx	r3
}
   2c988:	4628      	mov	r0, r5
   2c98a:	bd38      	pop	{r3, r4, r5, pc}
    if (camera->previewMode == TRUE && camera->handle != 0) {
   2c98c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
   2c98e:	2b00      	cmp	r3, #0
   2c990:	d0e7      	beq.n	2c962 <cameraStopPreview+0xa>
        camera->handle();
   2c992:	4798      	blx	r3
   2c994:	e7e5      	b.n	2c962 <cameraStopPreview+0xa>
   2c996:	bf00      	nop

0002c998 <cameraSetImageQuality>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c998:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetImageQuality(ArducamCamera *camera, IMAGE_QUALITY qualtiy) {
   2c99a:	b510      	push	{r4, lr}
   2c99c:	4604      	mov	r4, r0
   2c99e:	460a      	mov	r2, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c9a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c9a2:	212a      	movs	r1, #42	@ 0x2a
   2c9a4:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c9a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c9a8:	4620      	mov	r0, r4
   2c9aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c9ae:	4798      	blx	r3
}
   2c9b0:	2000      	movs	r0, #0
   2c9b2:	bd10      	pop	{r4, pc}

0002c9b4 <cameraReset>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c9b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraReset(ArducamCamera *camera) {
   2c9b6:	b510      	push	{r4, lr}
   2c9b8:	4604      	mov	r4, r0
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c9ba:	2240      	movs	r2, #64	@ 0x40
   2c9bc:	2107      	movs	r1, #7
   2c9be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c9c0:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c9c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c9c4:	4620      	mov	r0, r4
   2c9c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c9ca:	4798      	blx	r3
    camera->currentPixelFormat = -1;
   2c9cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
   2c9d0:	8223      	strh	r3, [r4, #16]
}
   2c9d2:	2000      	movs	r0, #0
   2c9d4:	bd10      	pop	{r4, pc}
   2c9d6:	bf00      	nop

0002c9d8 <cameraSetAutoWhiteBalanceMode>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c9d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetAutoWhiteBalanceMode(ArducamCamera *camera, CAM_WHITE_BALANCE mode) {
   2c9da:	b510      	push	{r4, lr}
   2c9dc:	4604      	mov	r4, r0
   2c9de:	460a      	mov	r2, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c9e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2c9e2:	2126      	movs	r1, #38	@ 0x26
   2c9e4:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2c9e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2c9e8:	4620      	mov	r0, r4
   2c9ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2c9ee:	4798      	blx	r3
}
   2c9f0:	2000      	movs	r0, #0
   2c9f2:	bd10      	pop	{r4, pc}

0002c9f4 <cameraSetAutoWhiteBalance>:
    if (val == TRUE) {
   2c9f4:	f1a1 0201 	sub.w	r2, r1, #1
   2c9f8:	fab2 f282 	clz	r2, r2
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2c9fc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    if (val == TRUE) {
   2c9fe:	0952      	lsrs	r2, r2, #5
CamStatus cameraSetAutoWhiteBalance(ArducamCamera *camera, uint8_t val) {
   2ca00:	b510      	push	{r4, lr}
    if (val == TRUE) {
   2ca02:	01d2      	lsls	r2, r2, #7
CamStatus cameraSetAutoWhiteBalance(ArducamCamera *camera, uint8_t val) {
   2ca04:	4604      	mov	r4, r0
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ca06:	f042 0202 	orr.w	r2, r2, #2
   2ca0a:	2130      	movs	r1, #48	@ 0x30
   2ca0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ca0e:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ca10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ca12:	4620      	mov	r0, r4
   2ca14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ca18:	4798      	blx	r3
}
   2ca1a:	2000      	movs	r0, #0
   2ca1c:	bd10      	pop	{r4, pc}
   2ca1e:	bf00      	nop

0002ca20 <cameraSetAutoISOSensitive>:
    if (val == TRUE) {
   2ca20:	f1a1 0201 	sub.w	r2, r1, #1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ca24:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    if (val == TRUE) {
   2ca26:	fab2 f282 	clz	r2, r2
CamStatus cameraSetAutoISOSensitive(ArducamCamera *camera, uint8_t val) {
   2ca2a:	b510      	push	{r4, lr}
    if (val == TRUE) {
   2ca2c:	0952      	lsrs	r2, r2, #5
CamStatus cameraSetAutoISOSensitive(ArducamCamera *camera, uint8_t val) {
   2ca2e:	4604      	mov	r4, r0
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ca30:	01d2      	lsls	r2, r2, #7
   2ca32:	2130      	movs	r1, #48	@ 0x30
   2ca34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ca36:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ca38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ca3a:	4620      	mov	r0, r4
   2ca3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ca40:	4798      	blx	r3
}
   2ca42:	2000      	movs	r0, #0
   2ca44:	bd10      	pop	{r4, pc}
   2ca46:	bf00      	nop

0002ca48 <cameraSetISOSensitivity>:
CamStatus cameraSetISOSensitivity(ArducamCamera *camera, int iso_sense) {
   2ca48:	b538      	push	{r3, r4, r5, lr}
    if (camera->cameraId == SENSOR_3MP_1) {
   2ca4a:	7b43      	ldrb	r3, [r0, #13]
   2ca4c:	2b82      	cmp	r3, #130	@ 0x82
CamStatus cameraSetISOSensitivity(ArducamCamera *camera, int iso_sense) {
   2ca4e:	4604      	mov	r4, r0
    if (camera->cameraId == SENSOR_3MP_1) {
   2ca50:	d019      	beq.n	2ca86 <cameraSetISOSensitivity+0x3e>
    writeReg(camera, CAM_REG_MANUAL_GAIN_BIT_7_0, iso_sense & 0xff);
   2ca52:	b2cd      	uxtb	r5, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ca54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ca56:	f3c1 2207 	ubfx	r2, r1, #8, #8
   2ca5a:	4620      	mov	r0, r4
   2ca5c:	2131      	movs	r1, #49	@ 0x31
   2ca5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ca60:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ca62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ca64:	4620      	mov	r0, r4
   2ca66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ca6a:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ca6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ca6e:	2132      	movs	r1, #50	@ 0x32
   2ca70:	462a      	mov	r2, r5
   2ca72:	4620      	mov	r0, r4
   2ca74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ca76:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ca78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ca7a:	4620      	mov	r0, r4
   2ca7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ca80:	4798      	blx	r3
}
   2ca82:	2000      	movs	r0, #0
   2ca84:	bd38      	pop	{r3, r4, r5, pc}
        iso_sense = ov3640GainValue[iso_sense - 1];
   2ca86:	4b03      	ldr	r3, [pc, #12]	@ (2ca94 <cameraSetISOSensitivity+0x4c>)
   2ca88:	440b      	add	r3, r1
   2ca8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2ca8e:	460d      	mov	r5, r1
   2ca90:	e7e0      	b.n	2ca54 <cameraSetISOSensitivity+0xc>
   2ca92:	bf00      	nop
   2ca94:	1000cab4 	.word	0x1000cab4

0002ca98 <cameraSetAutoExposure>:
    if (val == TRUE) {
   2ca98:	f1a1 0201 	sub.w	r2, r1, #1
   2ca9c:	fab2 f282 	clz	r2, r2
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2caa0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    if (val == TRUE) {
   2caa2:	0952      	lsrs	r2, r2, #5
CamStatus cameraSetAutoExposure(ArducamCamera *camera, uint8_t val) {
   2caa4:	b510      	push	{r4, lr}
    if (val == TRUE) {
   2caa6:	01d2      	lsls	r2, r2, #7
CamStatus cameraSetAutoExposure(ArducamCamera *camera, uint8_t val) {
   2caa8:	4604      	mov	r4, r0
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2caaa:	f042 0201 	orr.w	r2, r2, #1
   2caae:	2130      	movs	r1, #48	@ 0x30
   2cab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cab2:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cab4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cab6:	4620      	mov	r0, r4
   2cab8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cabc:	4798      	blx	r3
}
   2cabe:	2000      	movs	r0, #0
   2cac0:	bd10      	pop	{r4, pc}
   2cac2:	bf00      	nop

0002cac4 <cameraSetAbsoluteExposure>:
CamStatus cameraSetAbsoluteExposure(ArducamCamera *camera, uint32_t exposure_time) {
   2cac4:	b538      	push	{r3, r4, r5, lr}
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cac6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetAbsoluteExposure(ArducamCamera *camera, uint32_t exposure_time) {
   2cac8:	4604      	mov	r4, r0
   2caca:	460d      	mov	r5, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cacc:	f3c1 4207 	ubfx	r2, r1, #16, #8
   2cad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cad2:	2133      	movs	r1, #51	@ 0x33
   2cad4:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cad6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cad8:	4620      	mov	r0, r4
   2cada:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cade:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cae0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cae2:	f3c5 2207 	ubfx	r2, r5, #8, #8
   2cae6:	2134      	movs	r1, #52	@ 0x34
   2cae8:	4620      	mov	r0, r4
   2caea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2caec:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2caee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2caf0:	4620      	mov	r0, r4
   2caf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2caf6:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2caf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cafa:	2135      	movs	r1, #53	@ 0x35
   2cafc:	b2ea      	uxtb	r2, r5
   2cafe:	4620      	mov	r0, r4
   2cb00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cb02:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cb04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cb06:	4620      	mov	r0, r4
   2cb08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cb0c:	4798      	blx	r3
}
   2cb0e:	2000      	movs	r0, #0
   2cb10:	bd38      	pop	{r3, r4, r5, pc}
   2cb12:	bf00      	nop

0002cb14 <cameraSetColorEffect>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cb14:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetColorEffect(ArducamCamera *camera, CAM_COLOR_FX effect) {
   2cb16:	b510      	push	{r4, lr}
   2cb18:	4604      	mov	r4, r0
   2cb1a:	460a      	mov	r2, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cb1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cb1e:	2127      	movs	r1, #39	@ 0x27
   2cb20:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cb22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cb24:	4620      	mov	r0, r4
   2cb26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cb2a:	4798      	blx	r3
}
   2cb2c:	2000      	movs	r0, #0
   2cb2e:	bd10      	pop	{r4, pc}

0002cb30 <cameraSetSaturation>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cb30:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetSaturation(ArducamCamera *camera, CAM_STAURATION_LEVEL level) {
   2cb32:	b510      	push	{r4, lr}
   2cb34:	4604      	mov	r4, r0
   2cb36:	460a      	mov	r2, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cb38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cb3a:	2124      	movs	r1, #36	@ 0x24
   2cb3c:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cb3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cb40:	4620      	mov	r0, r4
   2cb42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cb46:	4798      	blx	r3
}
   2cb48:	2000      	movs	r0, #0
   2cb4a:	bd10      	pop	{r4, pc}

0002cb4c <cameraSetEV>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cb4c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetEV(ArducamCamera *camera, CAM_EV_LEVEL level) {
   2cb4e:	b510      	push	{r4, lr}
   2cb50:	4604      	mov	r4, r0
   2cb52:	460a      	mov	r2, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cb54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cb56:	2125      	movs	r1, #37	@ 0x25
   2cb58:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cb5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cb5c:	4620      	mov	r0, r4
   2cb5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cb62:	4798      	blx	r3
}
   2cb64:	2000      	movs	r0, #0
   2cb66:	bd10      	pop	{r4, pc}

0002cb68 <cameraSetContrast>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cb68:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetContrast(ArducamCamera *camera, CAM_CONTRAST_LEVEL level) {
   2cb6a:	b510      	push	{r4, lr}
   2cb6c:	4604      	mov	r4, r0
   2cb6e:	460a      	mov	r2, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cb70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cb72:	2123      	movs	r1, #35	@ 0x23
   2cb74:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cb76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cb78:	4620      	mov	r0, r4
   2cb7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cb7e:	4798      	blx	r3
}
   2cb80:	2000      	movs	r0, #0
   2cb82:	bd10      	pop	{r4, pc}

0002cb84 <cameraSetSharpness>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cb84:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetSharpness(ArducamCamera *camera, CAM_SHARPNESS_LEVEL level) {
   2cb86:	b510      	push	{r4, lr}
   2cb88:	4604      	mov	r4, r0
   2cb8a:	460a      	mov	r2, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cb8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cb8e:	2128      	movs	r1, #40	@ 0x28
   2cb90:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cb92:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cb94:	4620      	mov	r0, r4
   2cb96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cb9a:	4798      	blx	r3
}
   2cb9c:	2000      	movs	r0, #0
   2cb9e:	bd10      	pop	{r4, pc}

0002cba0 <cameraSetBrightness>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cba0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraSetBrightness(ArducamCamera *camera, CAM_BRIGHTNESS_LEVEL level) {
   2cba2:	b510      	push	{r4, lr}
   2cba4:	4604      	mov	r4, r0
   2cba6:	460a      	mov	r2, r1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cbaa:	2122      	movs	r1, #34	@ 0x22
   2cbac:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cbae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cbb0:	4620      	mov	r0, r4
   2cbb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cbb6:	4798      	blx	r3
}
   2cbb8:	2000      	movs	r0, #0
   2cbba:	bd10      	pop	{r4, pc}

0002cbbc <cameraFlushFifo>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cbbc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2cbbe:	2280      	movs	r2, #128	@ 0x80
   2cbc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cbc2:	2107      	movs	r1, #7
   2cbc4:	4718      	bx	r3
   2cbc6:	bf00      	nop

0002cbc8 <cameraStartCapture>:
   2cbc8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2cbca:	2202      	movs	r2, #2
   2cbcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cbce:	2104      	movs	r1, #4
   2cbd0:	4718      	bx	r3
   2cbd2:	bf00      	nop

0002cbd4 <cameraClearFifoFlag>:
   2cbd4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2cbd6:	2201      	movs	r2, #1
   2cbd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cbda:	2104      	movs	r1, #4
   2cbdc:	4718      	bx	r3
   2cbde:	bf00      	nop

0002cbe0 <cameraReadFifoLength>:
    return camera->arducamCameraOp->readReg(camera, addr);
   2cbe0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
uint32_t cameraReadFifoLength(ArducamCamera *camera) {
   2cbe2:	b570      	push	{r4, r5, r6, lr}
    return camera->arducamCameraOp->readReg(camera, addr);
   2cbe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
uint32_t cameraReadFifoLength(ArducamCamera *camera) {
   2cbe6:	4605      	mov	r5, r0
    return camera->arducamCameraOp->readReg(camera, addr);
   2cbe8:	2145      	movs	r1, #69	@ 0x45
   2cbea:	4798      	blx	r3
   2cbec:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
   2cbee:	4606      	mov	r6, r0
   2cbf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2cbf2:	2146      	movs	r1, #70	@ 0x46
   2cbf4:	4628      	mov	r0, r5
   2cbf6:	4798      	blx	r3
   2cbf8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
   2cbfa:	4604      	mov	r4, r0
   2cbfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2cbfe:	2147      	movs	r1, #71	@ 0x47
   2cc00:	4628      	mov	r0, r5
   2cc02:	4798      	blx	r3
    length = ((len3 << 16) | (len2 << 8) | len1) & 0xffffff;
   2cc04:	0224      	lsls	r4, r4, #8
   2cc06:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
}
   2cc0a:	4330      	orrs	r0, r6
   2cc0c:	bd70      	pop	{r4, r5, r6, pc}
   2cc0e:	bf00      	nop

0002cc10 <cameraGetBit>:
    return camera->arducamCameraOp->readReg(camera, addr);
   2cc10:	6b43      	ldr	r3, [r0, #52]	@ 0x34
uint8_t cameraGetBit(ArducamCamera *camera, uint8_t addr, uint8_t bit) {
   2cc12:	b510      	push	{r4, lr}
    return camera->arducamCameraOp->readReg(camera, addr);
   2cc14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
uint8_t cameraGetBit(ArducamCamera *camera, uint8_t addr, uint8_t bit) {
   2cc16:	4614      	mov	r4, r2
    return camera->arducamCameraOp->readReg(camera, addr);
   2cc18:	4798      	blx	r3
}
   2cc1a:	4020      	ands	r0, r4
   2cc1c:	bd10      	pop	{r4, pc}
   2cc1e:	bf00      	nop

0002cc20 <cameraReadByte>:
    return camera->arducamCameraOp->busRead(camera, address);
   2cc20:	6b43      	ldr	r3, [r0, #52]	@ 0x34
uint8_t cameraReadByte(ArducamCamera *camera) {
   2cc22:	b510      	push	{r4, lr}
   2cc24:	4604      	mov	r4, r0
    return camera->arducamCameraOp->busRead(camera, address);
   2cc26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
   2cc28:	213d      	movs	r1, #61	@ 0x3d
   2cc2a:	4798      	blx	r3
    camera->receivedLength -= 1;
   2cc2c:	68a3      	ldr	r3, [r4, #8]
   2cc2e:	3b01      	subs	r3, #1
   2cc30:	60a3      	str	r3, [r4, #8]
}
   2cc32:	bd10      	pop	{r4, pc}

0002cc34 <cameraWriteReg>:
    return camera->arducamCameraOp->busWrite(camera, address, value);
   2cc34:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2cc36:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
   2cc3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
   2cc3e:	4718      	bx	r3

0002cc40 <cameraReadReg>:
    return camera->arducamCameraOp->busRead(camera, address);
   2cc40:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2cc42:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
   2cc46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
   2cc48:	4718      	bx	r3
   2cc4a:	bf00      	nop

0002cc4c <cameraWaitI2cIdle>:
void cameraWaitI2cIdle(ArducamCamera *camera) {
   2cc4c:	b510      	push	{r4, lr}
   2cc4e:	4604      	mov	r4, r0
    return camera->arducamCameraOp->readReg(camera, addr);
   2cc50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc52:	2144      	movs	r1, #68	@ 0x44
   2cc54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2cc56:	4620      	mov	r0, r4
   2cc58:	4798      	blx	r3
    while ((readReg(camera, CAM_REG_SENSOR_STATE) & 0X03) != CAM_REG_SENSOR_STATE_IDLE) {
   2cc5a:	f000 0003 	and.w	r0, r0, #3
   2cc5e:	2802      	cmp	r0, #2
   2cc60:	d1f6      	bne.n	2cc50 <cameraWaitI2cIdle+0x4>
}
   2cc62:	bd10      	pop	{r4, pc}

0002cc64 <cameraDebugWriteRegister>:
void cameraDebugWriteRegister(ArducamCamera *camera, uint8_t *buff) {
   2cc64:	b570      	push	{r4, r5, r6, lr}
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cc66:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    uint8_t register_low = buff[1];
   2cc68:	784e      	ldrb	r6, [r1, #1]
    uint8_t value = buff[2];
   2cc6a:	788d      	ldrb	r5, [r1, #2]
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cc6c:	780a      	ldrb	r2, [r1, #0]
   2cc6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
void cameraDebugWriteRegister(ArducamCamera *camera, uint8_t *buff) {
   2cc70:	4604      	mov	r4, r0
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cc72:	210b      	movs	r1, #11
   2cc74:	4798      	blx	r3
   2cc76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc78:	4632      	mov	r2, r6
   2cc7a:	4620      	mov	r0, r4
   2cc7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cc7e:	210c      	movs	r1, #12
   2cc80:	4798      	blx	r3
   2cc82:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cc84:	462a      	mov	r2, r5
   2cc86:	4620      	mov	r0, r4
   2cc88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
}
   2cc8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cc8e:	210d      	movs	r1, #13
   2cc90:	4718      	bx	r3
   2cc92:	bf00      	nop

0002cc94 <cameraGetAutoFocusSta>:
   2cc94:	6b43      	ldr	r3, [r0, #52]	@ 0x34
uint8_t cameraGetAutoFocusSta(ArducamCamera *camera) {
   2cc96:	b510      	push	{r4, lr}
   2cc98:	4604      	mov	r4, r0
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cc9a:	2230      	movs	r2, #48	@ 0x30
   2cc9c:	210b      	movs	r1, #11
   2cc9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cca0:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cca2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cca4:	4620      	mov	r0, r4
   2cca6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ccaa:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ccac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ccae:	2229      	movs	r2, #41	@ 0x29
   2ccb0:	210c      	movs	r1, #12
   2ccb2:	4620      	mov	r0, r4
   2ccb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ccb6:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ccb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ccba:	4620      	mov	r0, r4
   2ccbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ccc0:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ccc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ccc4:	2107      	movs	r1, #7
   2ccc6:	2201      	movs	r2, #1
   2ccc8:	4620      	mov	r0, r4
   2ccca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cccc:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ccce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ccd0:	4620      	mov	r0, r4
   2ccd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ccd6:	4798      	blx	r3
    arducamDelayMs(5);   // wait read finish
   2ccd8:	2005      	movs	r0, #5
   2ccda:	f7ff fc95 	bl	2c608 <arducam_delay_ms>
    return camera->arducamCameraOp->readReg(camera, addr);
   2ccde:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cce0:	4620      	mov	r0, r4
   2cce2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
}
   2cce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return camera->arducamCameraOp->readReg(camera, addr);
   2cce8:	2148      	movs	r1, #72	@ 0x48
   2ccea:	4718      	bx	r3

0002ccec <cameraBusRead>:
uint8_t cameraBusRead(ArducamCamera *camera, int address) {
   2ccec:	b500      	push	{lr}
   2ccee:	460a      	mov	r2, r1
    arducam_spi_read(value, 2, address, 1, camera->csPin);
   2ccf0:	6801      	ldr	r1, [r0, #0]
uint8_t cameraBusRead(ArducamCamera *camera, int address) {
   2ccf2:	b085      	sub	sp, #20
    arducam_spi_read(value, 2, address, 1, camera->csPin);
   2ccf4:	2301      	movs	r3, #1
   2ccf6:	e9cd 3100 	strd	r3, r1, [sp]
   2ccfa:	a803      	add	r0, sp, #12
   2ccfc:	17d3      	asrs	r3, r2, #31
   2ccfe:	2102      	movs	r1, #2
   2cd00:	f7ff fc38 	bl	2c574 <arducam_spi_read>
}
   2cd04:	f89d 000d 	ldrb.w	r0, [sp, #13]
   2cd08:	b005      	add	sp, #20
   2cd0a:	f85d fb04 	ldr.w	pc, [sp], #4
   2cd0e:	bf00      	nop

0002cd10 <cameraBusWrite>:
uint8_t cameraBusWrite(ArducamCamera *camera, int address, int value) {
   2cd10:	b510      	push	{r4, lr}
    arducam_spi_write(&value, 1, address, 1, camera->csPin);
   2cd12:	6803      	ldr	r3, [r0, #0]
uint8_t cameraBusWrite(ArducamCamera *camera, int address, int value) {
   2cd14:	b084      	sub	sp, #16
    arducam_spi_write(&value, 1, address, 1, camera->csPin);
   2cd16:	2401      	movs	r4, #1
   2cd18:	e9cd 4300 	strd	r4, r3, [sp]
uint8_t cameraBusWrite(ArducamCamera *camera, int address, int value) {
   2cd1c:	9203      	str	r2, [sp, #12]
    arducam_spi_write(&value, 1, address, 1, camera->csPin);
   2cd1e:	17cb      	asrs	r3, r1, #31
   2cd20:	460a      	mov	r2, r1
   2cd22:	a803      	add	r0, sp, #12
   2cd24:	4621      	mov	r1, r4
   2cd26:	f7ff fc4b 	bl	2c5c0 <arducam_spi_write>
}
   2cd2a:	4620      	mov	r0, r4
   2cd2c:	b004      	add	sp, #16
   2cd2e:	bd10      	pop	{r4, pc}

0002cd30 <cameraCaptureThread>:
    if (camera->previewMode) {
   2cd30:	7bc3      	ldrb	r3, [r0, #15]
   2cd32:	b173      	cbz	r3, 2cd52 <cameraCaptureThread+0x22>
void cameraCaptureThread(ArducamCamera *camera) {
   2cd34:	b510      	push	{r4, lr}
    return camera->arducamCameraOp->readBuff(camera, buff, length);
   2cd36:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2cd38:	490a      	ldr	r1, [pc, #40]	@ (2cd64 <cameraCaptureThread+0x34>)
   2cd3a:	7b02      	ldrb	r2, [r0, #12]
   2cd3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
   2cd3e:	4604      	mov	r4, r0
   2cd40:	4798      	blx	r3
        if (callBackLength != FALSE) {
   2cd42:	f010 01ff 	ands.w	r1, r0, #255	@ 0xff
   2cd46:	d005      	beq.n	2cd54 <cameraCaptureThread+0x24>
            camera->callBackFunction(callBackBuff, callBackLength);
   2cd48:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
   2cd4a:	4806      	ldr	r0, [pc, #24]	@ (2cd64 <cameraCaptureThread+0x34>)
}
   2cd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            camera->callBackFunction(callBackBuff, callBackLength);
   2cd50:	4718      	bx	r3
   2cd52:	4770      	bx	lr
void setCapture(ArducamCamera *camera) { camera->arducamCameraOp->setCapture(camera); }
   2cd54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cd56:	4620      	mov	r0, r4
   2cd58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
}
   2cd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void setCapture(ArducamCamera *camera) { camera->arducamCameraOp->setCapture(camera); }
   2cd60:	4718      	bx	r3
   2cd62:	bf00      	nop
   2cd64:	10052980 	.word	0x10052980

0002cd68 <cameraLowPowerOn>:
void cameraLowPowerOn(ArducamCamera *camera) {
   2cd68:	b570      	push	{r4, r5, r6, lr}
    if ((camera->cameraId == SENSOR_5MP_2) || (camera->cameraId == SENSOR_3MP_2)) {
   2cd6a:	7b43      	ldrb	r3, [r0, #13]
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cd6c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
    if ((camera->cameraId == SENSOR_5MP_2) || (camera->cameraId == SENSOR_3MP_2)) {
   2cd6e:	337d      	adds	r3, #125	@ 0x7d
   2cd70:	b2db      	uxtb	r3, r3
   2cd72:	2b01      	cmp	r3, #1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cd74:	6f55      	ldr	r5, [r2, #116]	@ 0x74
    if ((camera->cameraId == SENSOR_5MP_2) || (camera->cameraId == SENSOR_3MP_2)) {
   2cd76:	d905      	bls.n	2cd84 <cameraLowPowerOn+0x1c>
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cd78:	462b      	mov	r3, r5
   2cd7a:	2207      	movs	r2, #7
}
   2cd7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cd80:	2102      	movs	r1, #2
   2cd82:	4718      	bx	r3
   2cd84:	4604      	mov	r4, r0
   2cd86:	2200      	movs	r2, #0
   2cd88:	210b      	movs	r1, #11
   2cd8a:	47a8      	blx	r5
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cd8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cd8e:	4620      	mov	r0, r4
   2cd90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cd94:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cd96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cd98:	2228      	movs	r2, #40	@ 0x28
   2cd9a:	210c      	movs	r1, #12
   2cd9c:	4620      	mov	r0, r4
   2cd9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cda0:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cda2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cda4:	4620      	mov	r0, r4
   2cda6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cdaa:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cdac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cdae:	22d0      	movs	r2, #208	@ 0xd0
   2cdb0:	210e      	movs	r1, #14
   2cdb2:	4620      	mov	r0, r4
   2cdb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cdb6:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cdb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cdba:	4620      	mov	r0, r4
   2cdbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cdc0:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cdc2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cdc4:	2200      	movs	r2, #0
   2cdc6:	210d      	movs	r1, #13
   2cdc8:	4620      	mov	r0, r4
   2cdca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cdcc:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cdce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cdd0:	4620      	mov	r0, r4
   2cdd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cdd6:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cdd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cdda:	2200      	movs	r2, #0
   2cddc:	210b      	movs	r1, #11
   2cdde:	4620      	mov	r0, r4
   2cde0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cde2:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cde4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cde6:	4620      	mov	r0, r4
   2cde8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cdec:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cdee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cdf0:	222a      	movs	r2, #42	@ 0x2a
   2cdf2:	210c      	movs	r1, #12
   2cdf4:	4620      	mov	r0, r4
   2cdf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cdf8:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cdfa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cdfc:	4620      	mov	r0, r4
   2cdfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ce02:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ce04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce06:	2210      	movs	r2, #16
   2ce08:	210e      	movs	r1, #14
   2ce0a:	4620      	mov	r0, r4
   2ce0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ce0e:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ce10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce12:	4620      	mov	r0, r4
   2ce14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ce18:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ce1a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce1c:	227e      	movs	r2, #126	@ 0x7e
   2ce1e:	210d      	movs	r1, #13
   2ce20:	4620      	mov	r0, r4
   2ce22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ce24:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ce26:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce28:	4620      	mov	r0, r4
   2ce2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ce2e:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ce30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce32:	220f      	movs	r2, #15
   2ce34:	210b      	movs	r1, #11
   2ce36:	4620      	mov	r0, r4
   2ce38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ce3a:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ce3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce3e:	4620      	mov	r0, r4
   2ce40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ce44:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ce46:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce48:	2212      	movs	r2, #18
   2ce4a:	210c      	movs	r1, #12
   2ce4c:	4620      	mov	r0, r4
   2ce4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ce50:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ce52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce54:	4620      	mov	r0, r4
   2ce56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ce5a:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ce5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce5e:	2200      	movs	r2, #0
   2ce60:	210e      	movs	r1, #14
   2ce62:	4620      	mov	r0, r4
   2ce64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ce66:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ce68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce6a:	4620      	mov	r0, r4
   2ce6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ce70:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ce72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce74:	4620      	mov	r0, r4
   2ce76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ce78:	2201      	movs	r2, #1
   2ce7a:	210d      	movs	r1, #13
   2ce7c:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ce7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ce80:	4620      	mov	r0, r4
   2ce82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
}
   2ce86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ce8a:	4718      	bx	r3

0002ce8c <cameraLowPowerOff>:
void cameraLowPowerOff(ArducamCamera *camera) {
   2ce8c:	b570      	push	{r4, r5, r6, lr}
    if ((camera->cameraId == SENSOR_5MP_2) || (camera->cameraId == SENSOR_3MP_2)) {
   2ce8e:	7b43      	ldrb	r3, [r0, #13]
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ce90:	6b42      	ldr	r2, [r0, #52]	@ 0x34
    if ((camera->cameraId == SENSOR_5MP_2) || (camera->cameraId == SENSOR_3MP_2)) {
   2ce92:	337d      	adds	r3, #125	@ 0x7d
   2ce94:	b2db      	uxtb	r3, r3
   2ce96:	2b01      	cmp	r3, #1
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ce98:	6f55      	ldr	r5, [r2, #116]	@ 0x74
    if ((camera->cameraId == SENSOR_5MP_2) || (camera->cameraId == SENSOR_3MP_2)) {
   2ce9a:	d905      	bls.n	2cea8 <cameraLowPowerOff+0x1c>
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ce9c:	462b      	mov	r3, r5
   2ce9e:	2205      	movs	r2, #5
}
   2cea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cea4:	2102      	movs	r1, #2
   2cea6:	4718      	bx	r3
   2cea8:	4604      	mov	r4, r0
   2ceaa:	2200      	movs	r2, #0
   2ceac:	210b      	movs	r1, #11
   2ceae:	47a8      	blx	r5
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2ceb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ceb2:	4620      	mov	r0, r4
   2ceb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2ceb8:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ceba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cebc:	2228      	movs	r2, #40	@ 0x28
   2cebe:	210c      	movs	r1, #12
   2cec0:	4620      	mov	r0, r4
   2cec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cec4:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cec6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cec8:	4620      	mov	r0, r4
   2ceca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cece:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2ced0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2ced2:	22d0      	movs	r2, #208	@ 0xd0
   2ced4:	210e      	movs	r1, #14
   2ced6:	4620      	mov	r0, r4
   2ced8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2ceda:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cedc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cede:	4620      	mov	r0, r4
   2cee0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cee4:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cee6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cee8:	2200      	movs	r2, #0
   2ceea:	210d      	movs	r1, #13
   2ceec:	4620      	mov	r0, r4
   2ceee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cef0:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cef2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cef4:	4620      	mov	r0, r4
   2cef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cefa:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cefc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cefe:	2200      	movs	r2, #0
   2cf00:	210b      	movs	r1, #11
   2cf02:	4620      	mov	r0, r4
   2cf04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf06:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cf08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf0a:	4620      	mov	r0, r4
   2cf0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf10:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cf12:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf14:	222a      	movs	r2, #42	@ 0x2a
   2cf16:	210c      	movs	r1, #12
   2cf18:	4620      	mov	r0, r4
   2cf1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf1c:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cf1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf20:	4620      	mov	r0, r4
   2cf22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf26:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cf28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf2a:	2210      	movs	r2, #16
   2cf2c:	210e      	movs	r1, #14
   2cf2e:	4620      	mov	r0, r4
   2cf30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf32:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cf34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf36:	4620      	mov	r0, r4
   2cf38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf3c:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cf3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf40:	227e      	movs	r2, #126	@ 0x7e
   2cf42:	210d      	movs	r1, #13
   2cf44:	4620      	mov	r0, r4
   2cf46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf48:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cf4a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf4c:	4620      	mov	r0, r4
   2cf4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf52:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cf54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf56:	220f      	movs	r2, #15
   2cf58:	210b      	movs	r1, #11
   2cf5a:	4620      	mov	r0, r4
   2cf5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf5e:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cf60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf62:	4620      	mov	r0, r4
   2cf64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf68:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cf6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf6c:	2212      	movs	r2, #18
   2cf6e:	210c      	movs	r1, #12
   2cf70:	4620      	mov	r0, r4
   2cf72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf74:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cf76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf78:	4620      	mov	r0, r4
   2cf7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf7e:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cf80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf82:	2200      	movs	r2, #0
   2cf84:	210e      	movs	r1, #14
   2cf86:	4620      	mov	r0, r4
   2cf88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf8a:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cf8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf8e:	4620      	mov	r0, r4
   2cf90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2cf94:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2cf96:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cf98:	4620      	mov	r0, r4
   2cf9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2cf9c:	2200      	movs	r2, #0
   2cf9e:	210d      	movs	r1, #13
   2cfa0:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cfa2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2cfa4:	4620      	mov	r0, r4
   2cfa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
}
   2cfaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2cfae:	4718      	bx	r3

0002cfb0 <cameraReadBuff>:
{
   2cfb0:	b5f0      	push	{r4, r5, r6, r7, lr}

uint32_t imageAvailable(ArducamCamera *camera) {
    return camera->arducamCameraOp->imageAvailable(camera);
   2cfb2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
   2cfb4:	b083      	sub	sp, #12
    return camera->arducamCameraOp->imageAvailable(camera);
   2cfb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
{
   2cfb8:	4605      	mov	r5, r0
   2cfba:	460f      	mov	r7, r1
   2cfbc:	4616      	mov	r6, r2
    return camera->arducamCameraOp->imageAvailable(camera);
   2cfbe:	4798      	blx	r3
    if (imageAvailable(camera) == 0 || (length == 0)) {
   2cfc0:	4604      	mov	r4, r0
   2cfc2:	b108      	cbz	r0, 2cfc8 <cameraReadBuff+0x18>
   2cfc4:	b91e      	cbnz	r6, 2cfce <cameraReadBuff+0x1e>
        return 0;
   2cfc6:	4634      	mov	r4, r6
}
   2cfc8:	4620      	mov	r0, r4
   2cfca:	b003      	add	sp, #12
   2cfcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (camera->receivedLength < length) {
   2cfce:	68ac      	ldr	r4, [r5, #8]
    arducam_spi_read(buff, length, BURST_FIFO_READ, 1, camera->csPin);
   2cfd0:	682b      	ldr	r3, [r5, #0]
   2cfd2:	9301      	str	r3, [sp, #4]
    if (camera->receivedLength < length) {
   2cfd4:	42b4      	cmp	r4, r6
   2cfd6:	bf28      	it	cs
   2cfd8:	4634      	movcs	r4, r6
    arducam_spi_read(buff, length, BURST_FIFO_READ, 1, camera->csPin);
   2cfda:	2601      	movs	r6, #1
   2cfdc:	2300      	movs	r3, #0
   2cfde:	9600      	str	r6, [sp, #0]
   2cfe0:	4638      	mov	r0, r7
   2cfe2:	223c      	movs	r2, #60	@ 0x3c
   2cfe4:	4621      	mov	r1, r4
   2cfe6:	f7ff fac5 	bl	2c574 <arducam_spi_read>
    if (camera->burstFirstFlag == 0) {
   2cfea:	7bab      	ldrb	r3, [r5, #14]
   2cfec:	b903      	cbnz	r3, 2cff0 <cameraReadBuff+0x40>
        camera->burstFirstFlag = 1;
   2cfee:	73ae      	strb	r6, [r5, #14]
    camera->receivedLength -= length;
   2cff0:	68ab      	ldr	r3, [r5, #8]
}
   2cff2:	4620      	mov	r0, r4
    camera->receivedLength -= length;
   2cff4:	1b1b      	subs	r3, r3, r4
   2cff6:	60ab      	str	r3, [r5, #8]
}
   2cff8:	b003      	add	sp, #12
   2cffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002cffc <cameraCsHigh>:
void cameraCsHigh(ArducamCamera *camera) { arducamSpiCsPinHigh(camera->csPin); }
   2cffc:	4770      	bx	lr
   2cffe:	bf00      	nop

0002d000 <cameraCsLow>:
void cameraCsLow(ArducamCamera *camera) { arducamSpiCsPinLow(camera->csPin); }
   2d000:	4770      	bx	lr
   2d002:	bf00      	nop

0002d004 <cameraSetFifoBurst>:
void cameraSetFifoBurst(ArducamCamera *camera) {
   2d004:	4770      	bx	lr
   2d006:	bf00      	nop

0002d008 <cameraGetSensorConfig>:
    return camera->arducamCameraOp->readReg(camera, addr);
   2d008:	6b43      	ldr	r3, [r0, #52]	@ 0x34
void cameraGetSensorConfig(ArducamCamera *camera) {
   2d00a:	b510      	push	{r4, lr}
    return camera->arducamCameraOp->readReg(camera, addr);
   2d00c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d00e:	2140      	movs	r1, #64	@ 0x40
void cameraGetSensorConfig(ArducamCamera *camera) {
   2d010:	4604      	mov	r4, r0
    return camera->arducamCameraOp->readReg(camera, addr);
   2d012:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d014:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->cameraId = readReg(camera, CAM_REG_SENSOR_ID);
   2d016:	7360      	strb	r0, [r4, #13]
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d018:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d01c:	4620      	mov	r0, r4
   2d01e:	4798      	blx	r3
    switch (camera->cameraId) {
   2d020:	7b63      	ldrb	r3, [r4, #13]
   2d022:	2b83      	cmp	r3, #131	@ 0x83
   2d024:	d013      	beq.n	2d04e <cameraGetSensorConfig+0x46>
   2d026:	2b84      	cmp	r3, #132	@ 0x84
   2d028:	d016      	beq.n	2d058 <cameraGetSensorConfig+0x50>
   2d02a:	f1a3 0382 	sub.w	r3, r3, #130	@ 0x82
   2d02e:	fab3 f383 	clz	r3, r3
   2d032:	095b      	lsrs	r3, r3, #5
    camera->myCameraInfo = *CameraType[cameraIdx];
   2d034:	4a09      	ldr	r2, [pc, #36]	@ (2d05c <cameraGetSensorConfig+0x54>)
   2d036:	f104 0c14 	add.w	ip, r4, #20
   2d03a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   2d03e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2d040:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2d044:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2d048:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
   2d04c:	bd10      	pop	{r4, pc}
        CameraInfo_5MP.cameraId = "5MP_2";
   2d04e:	4b04      	ldr	r3, [pc, #16]	@ (2d060 <cameraGetSensorConfig+0x58>)
   2d050:	4a04      	ldr	r2, [pc, #16]	@ (2d064 <cameraGetSensorConfig+0x5c>)
   2d052:	601a      	str	r2, [r3, #0]
   2d054:	2300      	movs	r3, #0
   2d056:	e7ed      	b.n	2d034 <cameraGetSensorConfig+0x2c>
    switch (camera->cameraId) {
   2d058:	2301      	movs	r3, #1
   2d05a:	e7eb      	b.n	2d034 <cameraGetSensorConfig+0x2c>
   2d05c:	10052a80 	.word	0x10052a80
   2d060:	1000caf4 	.word	0x1000caf4
   2d064:	0003fdf4 	.word	0x0003fdf4

0002d068 <cameraBegin>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2d068:	6b43      	ldr	r3, [r0, #52]	@ 0x34
CamStatus cameraBegin(ArducamCamera *camera) {
   2d06a:	b510      	push	{r4, lr}
   2d06c:	4604      	mov	r4, r0
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2d06e:	2240      	movs	r2, #64	@ 0x40
   2d070:	2107      	movs	r1, #7
   2d072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d074:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d076:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d078:	4620      	mov	r0, r4
   2d07a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d07e:	4798      	blx	r3
    cameraGetSensorConfig(camera);
   2d080:	4620      	mov	r0, r4
   2d082:	f7ff ffc1 	bl	2d008 <cameraGetSensorConfig>
    if (camera->cameraId == SENSOR_5MP_2 || camera->cameraId == SENSOR_3MP_2) {
   2d086:	7b63      	ldrb	r3, [r4, #13]
   2d088:	337d      	adds	r3, #125	@ 0x7d
   2d08a:	b2db      	uxtb	r3, r3
   2d08c:	2b01      	cmp	r3, #1
   2d08e:	d803      	bhi.n	2d098 <cameraBegin+0x30>
        camera->myCameraInfo.exposureValueMax = 0xFFFF;
   2d090:	f64f 73ff 	movw	r3, #65535	@ 0xffff
   2d094:	6223      	str	r3, [r4, #32]
        camera->myCameraInfo.gainValueMax = 0xFFFF;
   2d096:	62a3      	str	r3, [r4, #40]	@ 0x28
    return camera->arducamCameraOp->readReg(camera, addr);
   2d098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d09a:	2141      	movs	r1, #65	@ 0x41
   2d09c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d09e:	4620      	mov	r0, r4
   2d0a0:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d0a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->verDateAndNumber[0] = readReg(camera, CAM_REG_YEAR_ID) & 0x3F; // year
   2d0a4:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
   2d0a8:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d0ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d0b0:	4620      	mov	r0, r4
   2d0b2:	4798      	blx	r3
    return camera->arducamCameraOp->readReg(camera, addr);
   2d0b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d0b6:	2142      	movs	r1, #66	@ 0x42
   2d0b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d0ba:	4620      	mov	r0, r4
   2d0bc:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d0be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->verDateAndNumber[1] = readReg(camera, CAM_REG_MONTH_ID) & 0x0F; // month
   2d0c0:	f000 000f 	and.w	r0, r0, #15
   2d0c4:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d0c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d0cc:	4620      	mov	r0, r4
   2d0ce:	4798      	blx	r3
    return camera->arducamCameraOp->readReg(camera, addr);
   2d0d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d0d2:	2143      	movs	r1, #67	@ 0x43
   2d0d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d0d6:	4620      	mov	r0, r4
   2d0d8:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d0da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->verDateAndNumber[2] = readReg(camera, CAM_REG_DAY_ID) & 0x1F; // day
   2d0dc:	f000 001f 	and.w	r0, r0, #31
   2d0e0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d0e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d0e8:	4620      	mov	r0, r4
   2d0ea:	4798      	blx	r3
    return camera->arducamCameraOp->readReg(camera, addr);
   2d0ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d0ee:	2149      	movs	r1, #73	@ 0x49
   2d0f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
   2d0f2:	4620      	mov	r0, r4
   2d0f4:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d0f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    camera->verDateAndNumber[3] = readReg(camera, CAM_REG_FPGA_VERSION_NUMBER) & 0xFF; // day
   2d0f8:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d0fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d100:	4620      	mov	r0, r4
   2d102:	4798      	blx	r3
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2d104:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d106:	f894 2032 	ldrb.w	r2, [r4, #50]	@ 0x32
   2d10a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d10c:	210a      	movs	r1, #10
   2d10e:	4620      	mov	r0, r4
   2d110:	4798      	blx	r3
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d112:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   2d114:	4620      	mov	r0, r4
   2d116:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d11a:	4798      	blx	r3
}
   2d11c:	2000      	movs	r0, #0
   2d11e:	bd10      	pop	{r4, pc}

0002d120 <begin>:
CamStatus begin(ArducamCamera *camera) { return camera->arducamCameraOp->begin(camera); }
   2d120:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d122:	685b      	ldr	r3, [r3, #4]
   2d124:	4718      	bx	r3
   2d126:	bf00      	nop

0002d128 <setAutoExposure>:
    return camera->arducamCameraOp->setAutoExposure(camera, val);
   2d128:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d12a:	69db      	ldr	r3, [r3, #28]
   2d12c:	4718      	bx	r3
   2d12e:	bf00      	nop

0002d130 <setAutoISOSensitive>:
    return camera->arducamCameraOp->setAutoISOSensitive(camera, val);
   2d130:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   2d134:	4718      	bx	r3
   2d136:	bf00      	nop

0002d138 <setAutoFocus>:
    return camera->arducamCameraOp->setAutoFocus(camera, val);
   2d138:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d13a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
   2d13c:	4718      	bx	r3
   2d13e:	bf00      	nop

0002d140 <setEV>:
    return camera->arducamCameraOp->setEV(camera, level);
   2d140:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
   2d144:	4718      	bx	r3
   2d146:	bf00      	nop

0002d148 <setContrast>:
    return camera->arducamCameraOp->setContrast(camera, level);
   2d148:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d14a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
   2d14c:	4718      	bx	r3
   2d14e:	bf00      	nop

0002d150 <setBrightness>:
    return camera->arducamCameraOp->setBrightness(camera, level);
   2d150:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
   2d154:	4718      	bx	r3
   2d156:	bf00      	nop

0002d158 <lowPowerOn>:
void lowPowerOn(ArducamCamera *camera) { camera->arducamCameraOp->lowPowerOn(camera); }
   2d158:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d15a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
   2d15e:	4718      	bx	r3

0002d160 <lowPowerOff>:
void lowPowerOff(ArducamCamera *camera) { camera->arducamCameraOp->lowPowerOff(camera); }
   2d160:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d162:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
   2d166:	4718      	bx	r3

0002d168 <writeReg>:
    camera->arducamCameraOp->writeReg(camera, addr, val);
   2d168:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d16a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
   2d16c:	4718      	bx	r3
   2d16e:	bf00      	nop

0002d170 <readFifoLength>:
    return camera->arducamCameraOp->readFifoLength(camera);
   2d170:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
   2d176:	4718      	bx	r3

0002d178 <getBit>:
    return camera->arducamCameraOp->getBit(camera, addr, bit);
   2d178:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d17a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
   2d17e:	4718      	bx	r3

0002d180 <waitI2cIdle>:
void waitI2cIdle(ArducamCamera *camera) { camera->arducamCameraOp->waitI2cIdle(camera); }
   2d180:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   2d182:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
   2d186:	4718      	bx	r3

0002d188 <createArducamCamera>:
    .setImageQuality = cameraSetImageQuality,
};

extern ArducamCamera camera;

ArducamCamera createArducamCamera(int CS) {
   2d188:	b538      	push	{r3, r4, r5, lr}
    CameraType[1] = &CameraInfo_3MP;
    // cameraDefaultInfo[0] = &DefaultState_5mp;
    // cameraDefaultInfo[1] = &DefaultState_3mp;
    camera.cameraId = FALSE;
    camera.currentPixelFormat = CAM_IMAGE_PIX_FMT_NONE;
    camera.currentPictureMode = CAM_IMAGE_MODE_NONE;
   2d18a:	4b0c      	ldr	r3, [pc, #48]	@ (2d1bc <createArducamCamera+0x34>)
    CameraType[0] = &CameraInfo_5MP;
   2d18c:	4d0c      	ldr	r5, [pc, #48]	@ (2d1c0 <createArducamCamera+0x38>)
    camera.burstFirstFlag = FALSE;
    camera.previewMode = FALSE;
    camera.csPin = CS;
   2d18e:	6019      	str	r1, [r3, #0]
    CameraType[0] = &CameraInfo_5MP;
   2d190:	4a0c      	ldr	r2, [pc, #48]	@ (2d1c4 <createArducamCamera+0x3c>)
    CameraType[1] = &CameraInfo_3MP;
   2d192:	490d      	ldr	r1, [pc, #52]	@ (2d1c8 <createArducamCamera+0x40>)
    CameraType[0] = &CameraInfo_5MP;
   2d194:	602a      	str	r2, [r5, #0]
    CameraType[1] = &CameraInfo_3MP;
   2d196:	6069      	str	r1, [r5, #4]
    camera.arducamCameraOp = &ArducamcameraOperations;
   2d198:	4a0c      	ldr	r2, [pc, #48]	@ (2d1cc <createArducamCamera+0x44>)
   2d19a:	635a      	str	r2, [r3, #52]	@ 0x34
    camera.currentPictureMode = CAM_IMAGE_MODE_NONE;
   2d19c:	2111      	movs	r1, #17
   2d19e:	7459      	strb	r1, [r3, #17]
    camera.currentSDK = &currentSDK;
   2d1a0:	4a0b      	ldr	r2, [pc, #44]	@ (2d1d0 <createArducamCamera+0x48>)
   2d1a2:	645a      	str	r2, [r3, #68]	@ 0x44
    camera.cameraId = FALSE;
   2d1a4:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
ArducamCamera createArducamCamera(int CS) {
   2d1a8:	4604      	mov	r4, r0
    camera.cameraId = FALSE;
   2d1aa:	f8c3 100d 	str.w	r1, [r3, #13]
    cameraInit(&camera);
    return camera;
   2d1ae:	2248      	movs	r2, #72	@ 0x48
   2d1b0:	4619      	mov	r1, r3
   2d1b2:	f7eb f9e5 	bl	18580 <memcpy>
}
   2d1b6:	4620      	mov	r0, r4
   2d1b8:	bd38      	pop	{r3, r4, r5, pc}
   2d1ba:	bf00      	nop
   2d1bc:	10052938 	.word	0x10052938
   2d1c0:	10052a80 	.word	0x10052a80
   2d1c4:	1000caf4 	.word	0x1000caf4
   2d1c8:	1000cad4 	.word	0x1000cad4
   2d1cc:	000477d8 	.word	0x000477d8
   2d1d0:	1000cb14 	.word	0x1000cb14

0002d1d4 <ns_usb_service_callback>:

uint8_t *ns_usb_get_rx_buffer() { return usb_config.rx_buffer; }

uint8_t *ns_usb_get_tx_buffer() { return usb_config.tx_buffer; }

static void ns_usb_service_callback(ns_timer_config_t *c) {
   2d1d4:	b510      	push	{r4, lr}
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
   2d1d6:	2100      	movs	r1, #0
   2d1d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   2d1dc:	f001 fd2c 	bl	2ec38 <tud_task_ext>
    // Invoked in ISR context
    // ns_lp_printf("U");
    tud_task();
    if (usb_config.service_cb != NULL) {
   2d1e0:	4b04      	ldr	r3, [pc, #16]	@ (2d1f4 <ns_usb_service_callback+0x20>)
   2d1e2:	6a1b      	ldr	r3, [r3, #32]
   2d1e4:	b123      	cbz	r3, 2d1f0 <ns_usb_service_callback+0x1c>
        usb_config.service_cb(gGotUSBRx);
   2d1e6:	4a04      	ldr	r2, [pc, #16]	@ (2d1f8 <ns_usb_service_callback+0x24>)
        // ns_lp_printf("got usb rx %d\n", gGotUSBRx);
    }
}
   2d1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        usb_config.service_cb(gGotUSBRx);
   2d1ec:	7810      	ldrb	r0, [r2, #0]
   2d1ee:	4718      	bx	r3
}
   2d1f0:	bd10      	pop	{r4, pc}
   2d1f2:	bf00      	nop
   2d1f4:	1000cb2c 	.word	0x1000cb2c
   2d1f8:	10052a88 	.word	0x10052a88

0002d1fc <ns_get_cdc_rx_bufferLength>:
uint32_t ns_get_cdc_rx_bufferLength() { return usb_config.rx_bufferLength; }
   2d1fc:	4b01      	ldr	r3, [pc, #4]	@ (2d204 <ns_get_cdc_rx_bufferLength+0x8>)
   2d1fe:	8998      	ldrh	r0, [r3, #12]
   2d200:	4770      	bx	lr
   2d202:	bf00      	nop
   2d204:	1000cb2c 	.word	0x1000cb2c

0002d208 <ns_get_cdc_tx_bufferLength>:
uint32_t ns_get_cdc_tx_bufferLength() { return usb_config.tx_bufferLength; }
   2d208:	4b01      	ldr	r3, [pc, #4]	@ (2d210 <ns_get_cdc_tx_bufferLength+0x8>)
   2d20a:	8a98      	ldrh	r0, [r3, #20]
   2d20c:	4770      	bx	lr
   2d20e:	bf00      	nop
   2d210:	1000cb2c 	.word	0x1000cb2c

0002d214 <ns_usb_get_rx_buffer>:
uint8_t *ns_usb_get_rx_buffer() { return usb_config.rx_buffer; }
   2d214:	4b01      	ldr	r3, [pc, #4]	@ (2d21c <ns_usb_get_rx_buffer+0x8>)
   2d216:	6898      	ldr	r0, [r3, #8]
   2d218:	4770      	bx	lr
   2d21a:	bf00      	nop
   2d21c:	1000cb2c 	.word	0x1000cb2c

0002d220 <ns_usb_get_tx_buffer>:
uint8_t *ns_usb_get_tx_buffer() { return usb_config.tx_buffer; }
   2d220:	4b01      	ldr	r3, [pc, #4]	@ (2d228 <ns_usb_get_tx_buffer+0x8>)
   2d222:	6918      	ldr	r0, [r3, #16]
   2d224:	4770      	bx	lr
   2d226:	bf00      	nop
   2d228:	1000cb2c 	.word	0x1000cb2c

0002d22c <ns_usb_init>:
    .timer = NS_TIMER_USB,
    .enableInterrupt = true,
    .periodInMicroseconds = 1000,
    .callback = ns_usb_service_callback};

uint32_t ns_usb_init(ns_usb_config_t *cfg, usb_handle_t *h) {
   2d22c:	b570      	push	{r4, r5, r6, lr}

#ifndef NS_DISABLE_API_VALIDATION
    if (cfg == NULL) {
   2d22e:	b320      	cbz	r0, 2d27a <ns_usb_init+0x4e>
        return NS_STATUS_INVALID_HANDLE;
    }

    if (ns_core_check_api(cfg->api, &ns_usb_oldest_supported_version, &ns_usb_current_version)) {
   2d230:	4a1a      	ldr	r2, [pc, #104]	@ (2d29c <ns_usb_init+0x70>)
   2d232:	460e      	mov	r6, r1
   2d234:	4604      	mov	r4, r0
   2d236:	491a      	ldr	r1, [pc, #104]	@ (2d2a0 <ns_usb_init+0x74>)
   2d238:	6800      	ldr	r0, [r0, #0]
   2d23a:	f7ec f9eb 	bl	19614 <ns_core_check_api>
   2d23e:	4605      	mov	r5, r0
   2d240:	bb08      	cbnz	r0, 2d286 <ns_usb_init+0x5a>
        return NS_STATUS_INVALID_VERSION;
    }

    if ((cfg->rx_buffer == NULL) || (cfg->tx_buffer == NULL)) {
   2d242:	68a2      	ldr	r2, [r4, #8]
   2d244:	b1e2      	cbz	r2, 2d280 <ns_usb_init+0x54>
   2d246:	6921      	ldr	r1, [r4, #16]
   2d248:	b1d1      	cbz	r1, 2d280 <ns_usb_init+0x54>
        return NS_STATUS_INVALID_CONFIG;
    }
#endif

    usb_config.deviceType = cfg->deviceType;
   2d24a:	4b16      	ldr	r3, [pc, #88]	@ (2d2a4 <ns_usb_init+0x78>)
   2d24c:	7920      	ldrb	r0, [r4, #4]
    usb_config.rx_buffer = cfg->rx_buffer;
   2d24e:	609a      	str	r2, [r3, #8]
    usb_config.rx_bufferLength = cfg->rx_bufferLength;
   2d250:	89a2      	ldrh	r2, [r4, #12]
   2d252:	819a      	strh	r2, [r3, #12]
    usb_config.tx_buffer = cfg->tx_buffer;
    usb_config.tx_bufferLength = cfg->tx_bufferLength;
   2d254:	8aa2      	ldrh	r2, [r4, #20]
   2d256:	829a      	strh	r2, [r3, #20]
    usb_config.rx_cb = cfg->rx_cb;
   2d258:	69a2      	ldr	r2, [r4, #24]
   2d25a:	619a      	str	r2, [r3, #24]
   2d25c:	69e2      	ldr	r2, [r4, #28]
   2d25e:	61da      	str	r2, [r3, #28]
   2d260:	6a22      	ldr	r2, [r4, #32]
    usb_config.deviceType = cfg->deviceType;
   2d262:	7118      	strb	r0, [r3, #4]
    usb_config.tx_buffer = cfg->tx_buffer;
   2d264:	6119      	str	r1, [r3, #16]
    usb_config.rx_cb = cfg->rx_cb;
   2d266:	621a      	str	r2, [r3, #32]
    usb_config.tx_cb = cfg->tx_cb;
    usb_config.service_cb = cfg->service_cb;
    *h = (void *)&usb_config;
   2d268:	6033      	str	r3, [r6, #0]
    tusb_init();
   2d26a:	f001 f9a7 	bl	2e5bc <tusb_init>

    // Set up a timer to service usb

    NS_TRY(ns_timer_init(&g_ns_usbTimer), "Timer Init Failed.\n");
   2d26e:	480e      	ldr	r0, [pc, #56]	@ (2d2a8 <ns_usb_init+0x7c>)
   2d270:	f7ff f804 	bl	2c27c <ns_timer_init>
   2d274:	b950      	cbnz	r0, 2d28c <ns_usb_init+0x60>

    return NS_STATUS_SUCCESS;
}
   2d276:	4628      	mov	r0, r5
   2d278:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_HANDLE;
   2d27a:	2501      	movs	r5, #1
}
   2d27c:	4628      	mov	r0, r5
   2d27e:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_CONFIG;
   2d280:	2503      	movs	r5, #3
}
   2d282:	4628      	mov	r0, r5
   2d284:	bd70      	pop	{r4, r5, r6, pc}
        return NS_STATUS_INVALID_VERSION;
   2d286:	2502      	movs	r5, #2
}
   2d288:	4628      	mov	r0, r5
   2d28a:	bd70      	pop	{r4, r5, r6, pc}
    NS_TRY(ns_timer_init(&g_ns_usbTimer), "Timer Init Failed.\n");
   2d28c:	4807      	ldr	r0, [pc, #28]	@ (2d2ac <ns_usb_init+0x80>)
   2d28e:	f7fe fd5f 	bl	2bd50 <ns_lp_printf>
   2d292:	f7ec fa13 	bl	196bc <ns_core_fail_loop>
}
   2d296:	4628      	mov	r0, r5
   2d298:	bd70      	pop	{r4, r5, r6, pc}
   2d29a:	bf00      	nop
   2d29c:	00047888 	.word	0x00047888
   2d2a0:	00047894 	.word	0x00047894
   2d2a4:	1000cb2c 	.word	0x1000cb2c
   2d2a8:	1000cb1c 	.word	0x1000cb1c
   2d2ac:	0003fe04 	.word	0x0003fe04

0002d2b0 <divu64_10>:
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   2d2b0:	2900      	cmp	r1, #0
   2d2b2:	d047      	beq.n	2d344 <divu64_10+0x94>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   2d2b4:	0843      	lsrs	r3, r0, #1
   2d2b6:	0882      	lsrs	r2, r0, #2
   2d2b8:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
   2d2bc:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   2d2c0:	189b      	adds	r3, r3, r2
   2d2c2:	ea4f 0291 	mov.w	r2, r1, lsr #2
   2d2c6:	eb42 0251 	adc.w	r2, r2, r1, lsr #1
        q64 += (q64 >> 4);
   2d2ca:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   2d2ce:	ea4c 7c02 	orr.w	ip, ip, r2, lsl #28
   2d2d2:	eb13 030c 	adds.w	r3, r3, ip
   2d2d6:	eb42 1212 	adc.w	r2, r2, r2, lsr #4
        q64 += (q64 >> 8);
   2d2da:	ea4f 2c13 	mov.w	ip, r3, lsr #8
   2d2de:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
   2d2e2:	eb13 030c 	adds.w	r3, r3, ip
   2d2e6:	eb42 2212 	adc.w	r2, r2, r2, lsr #8
        q64 += (q64 >> 16);
   2d2ea:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   2d2ee:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
   2d2f2:	eb13 030c 	adds.w	r3, r3, ip
   2d2f6:	eb42 4212 	adc.w	r2, r2, r2, lsr #16
        q64 += (q64 >> 32);
   2d2fa:	189b      	adds	r3, r3, r2
   2d2fc:	f142 0200 	adc.w	r2, r2, #0
        q64 >>= 3;
   2d300:	08db      	lsrs	r3, r3, #3
   2d302:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   2d306:	08d2      	lsrs	r2, r2, #3
        r64 = ui64Val - q64*10;
        return q64 + ((r64 + 6) >> 4);
   2d308:	3006      	adds	r0, #6
{
   2d30a:	b500      	push	{lr}
        r64 = ui64Val - q64*10;
   2d30c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   2d310:	ea4f 0e82 	mov.w	lr, r2, lsl #2
        return q64 + ((r64 + 6) >> 4);
   2d314:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   2d318:	ea4e 7e93 	orr.w	lr, lr, r3, lsr #30
   2d31c:	eb1c 0c03 	adds.w	ip, ip, r3
   2d320:	eb42 0e0e 	adc.w	lr, r2, lr
   2d324:	eb1c 0c0c 	adds.w	ip, ip, ip
   2d328:	eb4e 0e0e 	adc.w	lr, lr, lr
        return q64 + ((r64 + 6) >> 4);
   2d32c:	ebb0 000c 	subs.w	r0, r0, ip
   2d330:	eb61 010e 	sbc.w	r1, r1, lr
   2d334:	0900      	lsrs	r0, r0, #4
   2d336:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
   2d33a:	18c0      	adds	r0, r0, r3
   2d33c:	eb42 1111 	adc.w	r1, r2, r1, lsr #4
        q32 += (q32 >> 16);
        q32 >>= 3;
        r32 = ui32Val - q32*10;
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
    }
}
   2d340:	f85d fb04 	ldr.w	pc, [sp], #4
        q32 = (ui32Val>>1) + (ui32Val>>2);
   2d344:	0883      	lsrs	r3, r0, #2
   2d346:	eb03 0350 	add.w	r3, r3, r0, lsr #1
        q32 += (q32 >> 4);
   2d34a:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   2d34e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   2d352:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   2d356:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   2d358:	eb03 0283 	add.w	r2, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   2d35c:	3006      	adds	r0, #6
   2d35e:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
   2d362:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
   2d366:	4770      	bx	lr

0002d368 <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   2d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d36c:	b088      	sub	sp, #32
   2d36e:	ad01      	add	r5, sp, #4
   2d370:	4684      	mov	ip, r0
   2d372:	46ae      	mov	lr, r5
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   2d374:	2000      	movs	r0, #0
   2d376:	e040      	b.n	2d3fa <uint64_to_str+0x92>
        q64 = (ui64Val>>1) + (ui64Val>>2);
   2d378:	19f6      	adds	r6, r6, r7
   2d37a:	eb43 0391 	adc.w	r3, r3, r1, lsr #2
        q64 += (q64 >> 4);
   2d37e:	0937      	lsrs	r7, r6, #4
   2d380:	ea47 7703 	orr.w	r7, r7, r3, lsl #28
   2d384:	19bf      	adds	r7, r7, r6
   2d386:	eb43 1313 	adc.w	r3, r3, r3, lsr #4
        q64 += (q64 >> 8);
   2d38a:	0a3e      	lsrs	r6, r7, #8
   2d38c:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
   2d390:	19f7      	adds	r7, r6, r7
   2d392:	eb43 2313 	adc.w	r3, r3, r3, lsr #8
        q64 += (q64 >> 16);
   2d396:	0c3e      	lsrs	r6, r7, #16
   2d398:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   2d39c:	19f6      	adds	r6, r6, r7
   2d39e:	eb43 4313 	adc.w	r3, r3, r3, lsr #16
        q64 += (q64 >> 32);
   2d3a2:	199e      	adds	r6, r3, r6
   2d3a4:	f143 0300 	adc.w	r3, r3, #0
        q64 >>= 3;
   2d3a8:	08f6      	lsrs	r6, r6, #3
   2d3aa:	ea46 7643 	orr.w	r6, r6, r3, lsl #29
   2d3ae:	08db      	lsrs	r3, r3, #3
        return q64 + ((r64 + 6) >> 4);
   2d3b0:	f11c 0c06 	adds.w	ip, ip, #6
        r64 = ui64Val - q64*10;
   2d3b4:	ea4f 0786 	mov.w	r7, r6, lsl #2
   2d3b8:	ea4f 0883 	mov.w	r8, r3, lsl #2
        return q64 + ((r64 + 6) >> 4);
   2d3bc:	f141 0100 	adc.w	r1, r1, #0
        r64 = ui64Val - q64*10;
   2d3c0:	ea48 7896 	orr.w	r8, r8, r6, lsr #30
   2d3c4:	19bf      	adds	r7, r7, r6
   2d3c6:	eb43 0808 	adc.w	r8, r3, r8
   2d3ca:	19ff      	adds	r7, r7, r7
   2d3cc:	eb48 0808 	adc.w	r8, r8, r8
        return q64 + ((r64 + 6) >> 4);
   2d3d0:	ebbc 0c07 	subs.w	ip, ip, r7
   2d3d4:	eb61 0108 	sbc.w	r1, r1, r8
   2d3d8:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   2d3dc:	ea4c 7c01 	orr.w	ip, ip, r1, lsl #28
   2d3e0:	eb1c 0c06 	adds.w	ip, ip, r6
        u64Tmp = divu64_10(ui64Val);

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   2d3e4:	eb0c 068c 	add.w	r6, ip, ip, lsl #2
   2d3e8:	eba4 0446 	sub.w	r4, r4, r6, lsl #1

        tbuf[ix++] = uMod + '0';
   2d3ec:	f104 0430 	add.w	r4, r4, #48	@ 0x30
   2d3f0:	f80e 4b01 	strb.w	r4, [lr], #1
        return q64 + ((r64 + 6) >> 4);
   2d3f4:	eb43 1111 	adc.w	r1, r3, r1, lsr #4
        tbuf[ix++] = uMod + '0';
   2d3f8:	3001      	adds	r0, #1
        q64 = (ui64Val>>1) + (ui64Val>>2);
   2d3fa:	ea4f 069c 	mov.w	r6, ip, lsr #2
   2d3fe:	ea4f 075c 	mov.w	r7, ip, lsr #1
   2d402:	ea46 7681 	orr.w	r6, r6, r1, lsl #30
   2d406:	ea47 77c1 	orr.w	r7, r7, r1, lsl #31
   2d40a:	084b      	lsrs	r3, r1, #1
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   2d40c:	4664      	mov	r4, ip
    if ( ui64Val >> 32 )
   2d40e:	2900      	cmp	r1, #0
   2d410:	d1b2      	bne.n	2d378 <uint64_to_str+0x10>
        q32 = (ui32Val>>1) + (ui32Val>>2);
   2d412:	0863      	lsrs	r3, r4, #1
   2d414:	eb03 0394 	add.w	r3, r3, r4, lsr #2
        q32 += (q32 >> 4);
   2d418:	eb03 1313 	add.w	r3, r3, r3, lsr #4
        q32 += (q32 >> 8);
   2d41c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
        q32 += (q32 >> 16);
   2d420:	eb03 4313 	add.w	r3, r3, r3, lsr #16
        q32 >>= 3;
   2d424:	08db      	lsrs	r3, r3, #3
        r32 = ui32Val - q32*10;
   2d426:	eb03 0183 	add.w	r1, r3, r3, lsl #2
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   2d42a:	1da6      	adds	r6, r4, #6
   2d42c:	eba6 0641 	sub.w	r6, r6, r1, lsl #1
   2d430:	4621      	mov	r1, r4
   2d432:	eb03 1416 	add.w	r4, r3, r6, lsr #4
        uMod = ui64Val - (u64Tmp * 10);
   2d436:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2d43a:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
        tbuf[ix++] = uMod + '0';
   2d43e:	3330      	adds	r3, #48	@ 0x30
   2d440:	f80e 3b01 	strb.w	r3, [lr], #1
   2d444:	3001      	adds	r0, #1
        ui64Val = u64Tmp;
    } while ( ui64Val );
   2d446:	2c00      	cmp	r4, #0
   2d448:	d1e3      	bne.n	2d412 <uint64_to_str+0xaa>
    iNumDig = ix;

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   2d44a:	b152      	cbz	r2, 2d462 <uint64_to_str+0xfa>
   2d44c:	4606      	mov	r6, r0
   2d44e:	182b      	adds	r3, r5, r0
   2d450:	1e51      	subs	r1, r2, #1
    {
        while ( ix-- )
        {
            *pcBuf++ = tbuf[ix];
   2d452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2d456:	f801 4f01 	strb.w	r4, [r1, #1]!
        while ( ix-- )
   2d45a:	42ab      	cmp	r3, r5
   2d45c:	d1f9      	bne.n	2d452 <uint64_to_str+0xea>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   2d45e:	2300      	movs	r3, #0
   2d460:	5593      	strb	r3, [r2, r6]
    }

    return iNumDig;
}
   2d462:	b008      	add	sp, #32
   2d464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d468 <am_util_stdio_printf_init>:
    g_pfnCharPrint = pfnCharPrint;
   2d468:	4b01      	ldr	r3, [pc, #4]	@ (2d470 <am_util_stdio_printf_init+0x8>)
   2d46a:	6018      	str	r0, [r3, #0]
}
   2d46c:	4770      	bx	lr
   2d46e:	bf00      	nop
   2d470:	10052e8c 	.word	0x10052e8c

0002d474 <am_util_stdio_vsprintf>:
// Format data into string. (va_list implementation)
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   2d474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;

    while ( *pcFmt != 0x0 )
   2d478:	780b      	ldrb	r3, [r1, #0]
{
   2d47a:	b089      	sub	sp, #36	@ 0x24
   2d47c:	4604      	mov	r4, r0
    while ( *pcFmt != 0x0 )
   2d47e:	2b00      	cmp	r3, #0
   2d480:	f000 809b 	beq.w	2d5ba <am_util_stdio_vsprintf+0x146>
   2d484:	460d      	mov	r5, r1
   2d486:	4692      	mov	sl, r2
    uint32_t ui32NumChars, ui32CharCnt = 0;
   2d488:	2600      	movs	r6, #0
   2d48a:	e00b      	b.n	2d4a4 <am_util_stdio_vsprintf+0x30>
        if ( *pcFmt != '%' )
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   2d48c:	b124      	cbz	r4, 2d498 <am_util_stdio_vsprintf+0x24>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   2d48e:	2b0a      	cmp	r3, #10
   2d490:	f000 8088 	beq.w	2d5a4 <am_util_stdio_vsprintf+0x130>
                {
                    *pcBuf++ = '\r';
                    ++ui32CharCnt;
                }
                *pcBuf++ = *pcFmt;
   2d494:	f804 3b01 	strb.w	r3, [r4], #1
            }

            ++pcFmt;
            ++ui32CharCnt;
   2d498:	3601      	adds	r6, #1
            ++pcFmt;
   2d49a:	463d      	mov	r5, r7
    while ( *pcFmt != 0x0 )
   2d49c:	782b      	ldrb	r3, [r5, #0]
   2d49e:	2b00      	cmp	r3, #0
   2d4a0:	f000 808c 	beq.w	2d5bc <am_util_stdio_vsprintf+0x148>
        if ( *pcFmt != '%' )
   2d4a4:	2b25      	cmp	r3, #37	@ 0x25
            ++pcFmt;
   2d4a6:	f105 0701 	add.w	r7, r5, #1
        if ( *pcFmt != '%' )
   2d4aa:	d1ef      	bne.n	2d48c <am_util_stdio_vsprintf+0x18>
        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';

        if ( *pcFmt == '0' )
   2d4ac:	786a      	ldrb	r2, [r5, #1]
   2d4ae:	2a30      	cmp	r2, #48	@ 0x30
        {
            ui8PadChar = '0';
   2d4b0:	bf03      	ittte	eq
   2d4b2:	4691      	moveq	r9, r2
    if ( *pcStr == '-')
   2d4b4:	78aa      	ldrbeq	r2, [r5, #2]
            ++pcFmt;
   2d4b6:	1caf      	addeq	r7, r5, #2
        ui8PadChar = ' ';
   2d4b8:	f04f 0920 	movne.w	r9, #32
    if ( *pcStr == '-')
   2d4bc:	2a2d      	cmp	r2, #45	@ 0x2d
   2d4be:	f000 8084 	beq.w	2d5ca <am_util_stdio_vsprintf+0x156>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d4c2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
    uint32_t ui32Val = 0, uCnt = 0;
   2d4c6:	f04f 0c00 	mov.w	ip, #0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d4ca:	2b09      	cmp	r3, #9
   2d4cc:	463d      	mov	r5, r7
    bool bNeg = false;
   2d4ce:	46e6      	mov	lr, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d4d0:	f200 8086 	bhi.w	2d5e0 <am_util_stdio_vsprintf+0x16c>
   2d4d4:	4629      	mov	r1, r5
   2d4d6:	2300      	movs	r3, #0
        ui32Val *= 10;
   2d4d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        ui32Val += (*pcStr - '0');
   2d4dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   2d4e0:	4688      	mov	r8, r1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d4e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2d4e6:	f1a2 0030 	sub.w	r0, r2, #48	@ 0x30
   2d4ea:	2809      	cmp	r0, #9
        ui32Val += (*pcStr - '0');
   2d4ec:	f1a3 0330 	sub.w	r3, r3, #48	@ 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d4f0:	d9f2      	bls.n	2d4d8 <am_util_stdio_vsprintf+0x64>
   2d4f2:	f10c 0c01 	add.w	ip, ip, #1
   2d4f6:	ebac 0c05 	sub.w	ip, ip, r5
        ++uCnt;
   2d4fa:	44e0      	add	r8, ip

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
        pcFmt += ui32NumChars;
   2d4fc:	eb07 0508 	add.w	r5, r7, r8

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   2d500:	f817 2008 	ldrb.w	r2, [r7, r8]
    return bNeg ? -ui32Val : ui32Val;
   2d504:	f1be 0f00 	cmp.w	lr, #0
   2d508:	d000      	beq.n	2d50c <am_util_stdio_vsprintf+0x98>
   2d50a:	425b      	negs	r3, r3
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   2d50c:	2a73      	cmp	r2, #115	@ 0x73
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   2d50e:	4698      	mov	r8, r3
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   2d510:	f000 80f9 	beq.w	2d706 <am_util_stdio_vsprintf+0x292>
   2d514:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   2d518:	2a2e      	cmp	r2, #46	@ 0x2e
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   2d51a:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
        if (*pcFmt == '.')
   2d51e:	f000 80c3 	beq.w	2d6a8 <am_util_stdio_vsprintf+0x234>
        iPrecision = 6;             // printf() default precision for %f is 6
   2d522:	2706      	movs	r7, #6
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   2d524:	2a6c      	cmp	r2, #108	@ 0x6c
   2d526:	d104      	bne.n	2d532 <am_util_stdio_vsprintf+0xbe>
        {
            pcFmt++;
            if ( *pcFmt == 'l' )    // "ll" (long long)
   2d528:	786a      	ldrb	r2, [r5, #1]
   2d52a:	2a6c      	cmp	r2, #108	@ 0x6c
   2d52c:	f000 812f 	beq.w	2d78e <am_util_stdio_vsprintf+0x31a>
            pcFmt++;
   2d530:	3501      	adds	r5, #1
                pcFmt++;
                bLongLong = true;
            }
        }

        switch ( *pcFmt )
   2d532:	f1a2 0146 	sub.w	r1, r2, #70	@ 0x46
   2d536:	2932      	cmp	r1, #50	@ 0x32
   2d538:	d854      	bhi.n	2d5e4 <am_util_stdio_vsprintf+0x170>
   2d53a:	e8df f011 	tbh	[pc, r1, lsl #1]
   2d53e:	0059      	.short	0x0059
   2d540:	00530053 	.word	0x00530053
   2d544:	00530053 	.word	0x00530053
   2d548:	00530053 	.word	0x00530053
   2d54c:	00530053 	.word	0x00530053
   2d550:	00530053 	.word	0x00530053
   2d554:	00530053 	.word	0x00530053
   2d558:	00530053 	.word	0x00530053
   2d55c:	00530053 	.word	0x00530053
   2d560:	02750053 	.word	0x02750053
   2d564:	00530053 	.word	0x00530053
   2d568:	00530053 	.word	0x00530053
   2d56c:	00530053 	.word	0x00530053
   2d570:	00530053 	.word	0x00530053
   2d574:	00530053 	.word	0x00530053
   2d578:	01b100ab 	.word	0x01b100ab
   2d57c:	00590053 	.word	0x00590053
   2d580:	00530053 	.word	0x00530053
   2d584:	005301b1 	.word	0x005301b1
   2d588:	00530053 	.word	0x00530053
   2d58c:	00530053 	.word	0x00530053
   2d590:	00530053 	.word	0x00530053
   2d594:	00530053 	.word	0x00530053
   2d598:	005300e3 	.word	0x005300e3
   2d59c:	005301c2 	.word	0x005301c2
   2d5a0:	02980053 	.word	0x02980053
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   2d5a4:	4acf      	ldr	r2, [pc, #828]	@ (2d8e4 <am_util_stdio_vsprintf+0x470>)
   2d5a6:	7812      	ldrb	r2, [r2, #0]
   2d5a8:	2a00      	cmp	r2, #0
   2d5aa:	f43f af73 	beq.w	2d494 <am_util_stdio_vsprintf+0x20>
                    *pcBuf++ = '\r';
   2d5ae:	230d      	movs	r3, #13
   2d5b0:	f804 3b01 	strb.w	r3, [r4], #1
                    ++ui32CharCnt;
   2d5b4:	3601      	adds	r6, #1
                *pcBuf++ = *pcFmt;
   2d5b6:	782b      	ldrb	r3, [r5, #0]
   2d5b8:	e76c      	b.n	2d494 <am_util_stdio_vsprintf+0x20>
    uint32_t ui32NumChars, ui32CharCnt = 0;
   2d5ba:	461e      	mov	r6, r3
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   2d5bc:	b10c      	cbz	r4, 2d5c2 <am_util_stdio_vsprintf+0x14e>
    {
        *pcBuf = 0x0;
   2d5be:	2300      	movs	r3, #0
   2d5c0:	7023      	strb	r3, [r4, #0]
    }

    return (ui32CharCnt);
}
   2d5c2:	4630      	mov	r0, r6
   2d5c4:	b009      	add	sp, #36	@ 0x24
   2d5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d5ca:	787a      	ldrb	r2, [r7, #1]
   2d5cc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
        uCnt++;
   2d5d0:	f04f 0c01 	mov.w	ip, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d5d4:	2b09      	cmp	r3, #9
        pcStr++;
   2d5d6:	eb07 050c 	add.w	r5, r7, ip
        bNeg = true;
   2d5da:	46e6      	mov	lr, ip
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d5dc:	f67f af7a 	bls.w	2d4d4 <am_util_stdio_vsprintf+0x60>
   2d5e0:	2300      	movs	r3, #0
   2d5e2:	e78f      	b.n	2d504 <am_util_stdio_vsprintf+0x90>
                if ( pcBuf )
   2d5e4:	b10c      	cbz	r4, 2d5ea <am_util_stdio_vsprintf+0x176>
                    *pcBuf++ = *pcFmt;
   2d5e6:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
   2d5ea:	3601      	adds	r6, #1
        ++pcFmt;
   2d5ec:	3501      	adds	r5, #1
   2d5ee:	e755      	b.n	2d49c <am_util_stdio_vsprintf+0x28>
                if ( pcBuf )
   2d5f0:	2c00      	cmp	r4, #0
   2d5f2:	d0fb      	beq.n	2d5ec <am_util_stdio_vsprintf+0x178>
                    float fValue = va_arg(pArgs, double);
   2d5f4:	f10a 0a07 	add.w	sl, sl, #7
   2d5f8:	f02a 0a07 	bic.w	sl, sl, #7
   2d5fc:	e8fa 0102 	ldrd	r0, r1, [sl], #8
   2d600:	f7eb fd5e 	bl	190c0 <__aeabi_d2f>
   2d604:	ee07 0a90 	vmov	s15, r0
    if (fValue == 0.0f)
   2d608:	eef5 7a40 	vcmp.f32	s15, #0.0
                    *(uint32_t*)pcBuf = 20;
   2d60c:	2314      	movs	r3, #20
    if (fValue == 0.0f)
   2d60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    *(uint32_t*)pcBuf = 20;
   2d612:	6023      	str	r3, [r4, #0]
    if (fValue == 0.0f)
   2d614:	f000 81e1 	beq.w	2d9da <am_util_stdio_vsprintf+0x566>
    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   2d618:	f3c0 5cc7 	ubfx	ip, r0, #23, #8
   2d61c:	f1ac 017f 	sub.w	r1, ip, #127	@ 0x7f
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   2d620:	f3c0 0216 	ubfx	r2, r0, #0, #23
    if (iExp2 >= 31)
   2d624:	291e      	cmp	r1, #30
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   2d626:	f442 0e00 	orr.w	lr, r2, #8388608	@ 0x800000
    if (iExp2 >= 31)
   2d62a:	f300 8348 	bgt.w	2dcbe <am_util_stdio_vsprintf+0x84a>
    else if (iExp2 < -23)
   2d62e:	f111 0f17 	cmn.w	r1, #23
   2d632:	f2c0 81d2 	blt.w	2d9da <am_util_stdio_vsprintf+0x566>
    else if (iExp2 >= 23)
   2d636:	2916      	cmp	r1, #22
   2d638:	f340 81b5 	ble.w	2d9a6 <am_util_stdio_vsprintf+0x532>
    if (unFloatValue.I32 < 0)
   2d63c:	2800      	cmp	r0, #0
        *pcBuf++ = '-';
   2d63e:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
   2d640:	f2c0 825f 	blt.w	2db02 <am_util_stdio_vsprintf+0x68e>
        i32IntPart = i32Significand << (iExp2 - 23);
   2d644:	f1ac 0c96 	sub.w	ip, ip, #150	@ 0x96
   2d648:	fa0e f00c 	lsl.w	r0, lr, ip
            uint64_to_str(i32IntPart, pcBuf);
   2d64c:	17c1      	asrs	r1, r0, #31
   2d64e:	f7ff fe8b 	bl	2d368 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   2d652:	7813      	ldrb	r3, [r2, #0]
   2d654:	f04f 0800 	mov.w	r8, #0
   2d658:	2b00      	cmp	r3, #0
   2d65a:	f000 8366 	beq.w	2dd2a <am_util_stdio_vsprintf+0x8b6>
   2d65e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2d662:	2b00      	cmp	r3, #0
   2d664:	d1fb      	bne.n	2d65e <am_util_stdio_vsprintf+0x1ea>
    *pcBuf++ = '.';
   2d666:	232e      	movs	r3, #46	@ 0x2e
   2d668:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   2d66a:	f1b8 0f00 	cmp.w	r8, #0
   2d66e:	f040 8301 	bne.w	2dc74 <am_util_stdio_vsprintf+0x800>
        *pcBuf++ = '0';
   2d672:	1c91      	adds	r1, r2, #2
   2d674:	2330      	movs	r3, #48	@ 0x30
   2d676:	7053      	strb	r3, [r2, #1]
    return (pcBuf - pcBufInitial);
   2d678:	1b08      	subs	r0, r1, r4
    *pcBuf = 0x00;
   2d67a:	2300      	movs	r3, #0
                    if ( iVal < 0 )
   2d67c:	4298      	cmp	r0, r3
    *pcBuf = 0x00;
   2d67e:	700b      	strb	r3, [r1, #0]
                    if ( iVal < 0 )
   2d680:	f280 81ae 	bge.w	2d9e0 <am_util_stdio_vsprintf+0x56c>
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   2d684:	1c43      	adds	r3, r0, #1
   2d686:	f000 81a8 	beq.w	2d9da <am_util_stdio_vsprintf+0x566>
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   2d68a:	3002      	adds	r0, #2
   2d68c:	f000 8317 	beq.w	2dcbe <am_util_stdio_vsprintf+0x84a>
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   2d690:	4b95      	ldr	r3, [pc, #596]	@ (2d8e8 <am_util_stdio_vsprintf+0x474>)
                        iVal = 3;
   2d692:	e1a3      	b.n	2d9dc <am_util_stdio_vsprintf+0x568>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   2d694:	f10a 0304 	add.w	r3, sl, #4
                if ( pcBuf )
   2d698:	b11c      	cbz	r4, 2d6a2 <am_util_stdio_vsprintf+0x22e>
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   2d69a:	f8da 2000 	ldr.w	r2, [sl]
   2d69e:	f804 2b01 	strb.w	r2, [r4], #1
                ++ui32CharCnt;
   2d6a2:	3601      	adds	r6, #1
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   2d6a4:	469a      	mov	sl, r3
                break;
   2d6a6:	e7a1      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
    if ( *pcStr == '-')
   2d6a8:	786a      	ldrb	r2, [r5, #1]
   2d6aa:	2a2d      	cmp	r2, #45	@ 0x2d
            ++pcFmt;
   2d6ac:	f105 0c01 	add.w	ip, r5, #1
    if ( *pcStr == '-')
   2d6b0:	f000 8145 	beq.w	2d93e <am_util_stdio_vsprintf+0x4ca>
    uint32_t ui32Val = 0, uCnt = 0;
   2d6b4:	2700      	movs	r7, #0
   2d6b6:	4665      	mov	r5, ip
    bool bNeg = false;
   2d6b8:	9700      	str	r7, [sp, #0]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d6ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
   2d6be:	2909      	cmp	r1, #9
   2d6c0:	f200 82d6 	bhi.w	2dc70 <am_util_stdio_vsprintf+0x7fc>
   2d6c4:	4628      	mov	r0, r5
   2d6c6:	2100      	movs	r1, #0
   2d6c8:	f8cd 9004 	str.w	r9, [sp, #4]
        ui32Val *= 10;
   2d6cc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
        ui32Val += (*pcStr - '0');
   2d6d0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   2d6d4:	4686      	mov	lr, r0
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d6d6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2d6da:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
   2d6de:	f1b9 0f09 	cmp.w	r9, #9
        ui32Val += (*pcStr - '0');
   2d6e2:	f1a1 0130 	sub.w	r1, r1, #48	@ 0x30
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d6e6:	d9f1      	bls.n	2d6cc <am_util_stdio_vsprintf+0x258>
   2d6e8:	1c7a      	adds	r2, r7, #1
   2d6ea:	1b52      	subs	r2, r2, r5
        ++uCnt;
   2d6ec:	4496      	add	lr, r2
   2d6ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
        if ( *pcFmt == 'l' )
   2d6f2:	f81c 200e 	ldrb.w	r2, [ip, lr]
            pcFmt += ui32NumChars;
   2d6f6:	eb0c 050e 	add.w	r5, ip, lr
    return bNeg ? -ui32Val : ui32Val;
   2d6fa:	9800      	ldr	r0, [sp, #0]
   2d6fc:	b100      	cbz	r0, 2d700 <am_util_stdio_vsprintf+0x28c>
   2d6fe:	4249      	negs	r1, r1
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   2d700:	460f      	mov	r7, r1
            pcFmt += ui32NumChars;
   2d702:	e70f      	b.n	2d524 <am_util_stdio_vsprintf+0xb0>
        switch ( *pcFmt )
   2d704:	46d8      	mov	r8, fp
                pcStr = va_arg(pArgs, char *);
   2d706:	f85a bb04 	ldr.w	fp, [sl], #4
    if ( !pcBuf )
   2d70a:	f1bb 0f00 	cmp.w	fp, #0
   2d70e:	f000 816a 	beq.w	2d9e6 <am_util_stdio_vsprintf+0x572>
    while ( *pcBuf++ )
   2d712:	4658      	mov	r0, fp
   2d714:	f810 7b01 	ldrb.w	r7, [r0], #1
   2d718:	2f00      	cmp	r7, #0
   2d71a:	f000 81aa 	beq.w	2da72 <am_util_stdio_vsprintf+0x5fe>
   2d71e:	f7ea ffcf 	bl	186c0 <strlen>
                if ( iWidth > 0 )
   2d722:	f1b8 0f00 	cmp.w	r8, #0
   2d726:	f100 0101 	add.w	r1, r0, #1
   2d72a:	dd02      	ble.n	2d732 <am_util_stdio_vsprintf+0x2be>
                    if ( ui32strlen < iWidth )
   2d72c:	4588      	cmp	r8, r1
   2d72e:	f200 809f 	bhi.w	2d870 <am_util_stdio_vsprintf+0x3fc>
   2d732:	465b      	mov	r3, fp
                    if ( pcBuf )
   2d734:	2c00      	cmp	r4, #0
   2d736:	f000 80a7 	beq.w	2d888 <am_util_stdio_vsprintf+0x414>
                        *pcBuf++ = *pcStr;
   2d73a:	7027      	strb	r7, [r4, #0]
   2d73c:	461a      	mov	r2, r3
                while (*pcStr != 0x0)
   2d73e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
                        *pcBuf++ = *pcStr;
   2d742:	3401      	adds	r4, #1
                while (*pcStr != 0x0)
   2d744:	2f00      	cmp	r7, #0
   2d746:	d1f8      	bne.n	2d73a <am_util_stdio_vsprintf+0x2c6>
                if ( iWidth )
   2d748:	f1cb 0301 	rsb	r3, fp, #1
   2d74c:	4433      	add	r3, r6
                    ++ui32CharCnt;
   2d74e:	18d6      	adds	r6, r2, r3
                if ( iWidth )
   2d750:	f1b8 0f00 	cmp.w	r8, #0
   2d754:	f43f af4a 	beq.w	2d5ec <am_util_stdio_vsprintf+0x178>
                    iWidth = -iWidth;
   2d758:	f1c8 0300 	rsb	r3, r8, #0
                    if ( ui32strlen < iWidth )
   2d75c:	428b      	cmp	r3, r1
   2d75e:	f67f af45 	bls.w	2d5ec <am_util_stdio_vsprintf+0x178>
                        iWidth -= ui32strlen;
   2d762:	1a59      	subs	r1, r3, r1
    if ( i32NumChars <= 0 )
   2d764:	2900      	cmp	r1, #0
                        iWidth -= ui32strlen;
   2d766:	4688      	mov	r8, r1
    if ( i32NumChars <= 0 )
   2d768:	f340 81d6 	ble.w	2db18 <am_util_stdio_vsprintf+0x6a4>
    while ( i32NumChars-- )
   2d76c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
        if ( pcBuf )
   2d770:	b13c      	cbz	r4, 2d782 <am_util_stdio_vsprintf+0x30e>
   2d772:	4622      	mov	r2, r4
    while ( i32NumChars-- )
   2d774:	3b01      	subs	r3, #1
   2d776:	1c58      	adds	r0, r3, #1
            *pcBuf++ = cPadChar;
   2d778:	f882 9000 	strb.w	r9, [r2]
   2d77c:	f102 0201 	add.w	r2, r2, #1
    while ( i32NumChars-- )
   2d780:	d1f8      	bne.n	2d774 <am_util_stdio_vsprintf+0x300>
                        ui32CharCnt += iWidth;
   2d782:	440e      	add	r6, r1
                        pcBuf += pcBuf ? iWidth : 0;
   2d784:	2c00      	cmp	r4, #0
   2d786:	f43f af31 	beq.w	2d5ec <am_util_stdio_vsprintf+0x178>
   2d78a:	440c      	add	r4, r1
                        iWidth = 0;
   2d78c:	e72e      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
        switch ( *pcFmt )
   2d78e:	78aa      	ldrb	r2, [r5, #2]
   2d790:	f1a2 0146 	sub.w	r1, r2, #70	@ 0x46
                pcFmt++;
   2d794:	3502      	adds	r5, #2
        switch ( *pcFmt )
   2d796:	2932      	cmp	r1, #50	@ 0x32
   2d798:	f63f af24 	bhi.w	2d5e4 <am_util_stdio_vsprintf+0x170>
   2d79c:	a001      	add	r0, pc, #4	@ (adr r0, 2d7a4 <am_util_stdio_vsprintf+0x330>)
   2d79e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   2d7a2:	bf00      	nop
   2d7a4:	0002d5f1 	.word	0x0002d5f1
   2d7a8:	0002d5e5 	.word	0x0002d5e5
   2d7ac:	0002d5e5 	.word	0x0002d5e5
   2d7b0:	0002d5e5 	.word	0x0002d5e5
   2d7b4:	0002d5e5 	.word	0x0002d5e5
   2d7b8:	0002d5e5 	.word	0x0002d5e5
   2d7bc:	0002d5e5 	.word	0x0002d5e5
   2d7c0:	0002d5e5 	.word	0x0002d5e5
   2d7c4:	0002d5e5 	.word	0x0002d5e5
   2d7c8:	0002d5e5 	.word	0x0002d5e5
   2d7cc:	0002d5e5 	.word	0x0002d5e5
   2d7d0:	0002d5e5 	.word	0x0002d5e5
   2d7d4:	0002d5e5 	.word	0x0002d5e5
   2d7d8:	0002d5e5 	.word	0x0002d5e5
   2d7dc:	0002d5e5 	.word	0x0002d5e5
   2d7e0:	0002d5e5 	.word	0x0002d5e5
   2d7e4:	0002d5e5 	.word	0x0002d5e5
   2d7e8:	0002d5e5 	.word	0x0002d5e5
   2d7ec:	0002db1d 	.word	0x0002db1d
   2d7f0:	0002d5e5 	.word	0x0002d5e5
   2d7f4:	0002d5e5 	.word	0x0002d5e5
   2d7f8:	0002d5e5 	.word	0x0002d5e5
   2d7fc:	0002d5e5 	.word	0x0002d5e5
   2d800:	0002d5e5 	.word	0x0002d5e5
   2d804:	0002d5e5 	.word	0x0002d5e5
   2d808:	0002d5e5 	.word	0x0002d5e5
   2d80c:	0002d5e5 	.word	0x0002d5e5
   2d810:	0002d5e5 	.word	0x0002d5e5
   2d814:	0002d5e5 	.word	0x0002d5e5
   2d818:	0002d695 	.word	0x0002d695
   2d81c:	0002d8ed 	.word	0x0002d8ed
   2d820:	0002d5e5 	.word	0x0002d5e5
   2d824:	0002d5f1 	.word	0x0002d5f1
   2d828:	0002d5e5 	.word	0x0002d5e5
   2d82c:	0002d5e5 	.word	0x0002d5e5
   2d830:	0002d8ed 	.word	0x0002d8ed
   2d834:	0002d5e5 	.word	0x0002d5e5
   2d838:	0002d5e5 	.word	0x0002d5e5
   2d83c:	0002d5e5 	.word	0x0002d5e5
   2d840:	0002d5e5 	.word	0x0002d5e5
   2d844:	0002d5e5 	.word	0x0002d5e5
   2d848:	0002d5e5 	.word	0x0002d5e5
   2d84c:	0002d5e5 	.word	0x0002d5e5
   2d850:	0002d5e5 	.word	0x0002d5e5
   2d854:	0002d5e5 	.word	0x0002d5e5
   2d858:	0002d705 	.word	0x0002d705
   2d85c:	0002d5e5 	.word	0x0002d5e5
   2d860:	0002d92d 	.word	0x0002d92d
   2d864:	0002d5e5 	.word	0x0002d5e5
   2d868:	0002d5e5 	.word	0x0002d5e5
   2d86c:	0002db97 	.word	0x0002db97
                        iWidth -= ui32strlen;
   2d870:	eba8 0801 	sub.w	r8, r8, r1
    if ( i32NumChars <= 0 )
   2d874:	f1b8 0f00 	cmp.w	r8, #0
   2d878:	f300 8100 	bgt.w	2da7c <am_util_stdio_vsprintf+0x608>
                        pcBuf += pcBuf ? iWidth : 0;
   2d87c:	2c00      	cmp	r4, #0
   2d87e:	f040 80cf 	bne.w	2da20 <am_util_stdio_vsprintf+0x5ac>
   2d882:	465b      	mov	r3, fp
                        iWidth = 0;
   2d884:	f04f 0800 	mov.w	r8, #0
                while (*pcStr != 0x0)
   2d888:	461a      	mov	r2, r3
   2d88a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   2d88e:	2c00      	cmp	r4, #0
   2d890:	f43f af5a 	beq.w	2d748 <am_util_stdio_vsprintf+0x2d4>
   2d894:	461a      	mov	r2, r3
   2d896:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   2d89a:	2c00      	cmp	r4, #0
   2d89c:	d1f4      	bne.n	2d888 <am_util_stdio_vsprintf+0x414>
   2d89e:	e753      	b.n	2d748 <am_util_stdio_vsprintf+0x2d4>
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   2d8a0:	f85a 0b04 	ldr.w	r0, [sl], #4
   2d8a4:	17c1      	asrs	r1, r0, #31
                if ( i64Val < 0 )
   2d8a6:	2900      	cmp	r1, #0
   2d8a8:	db2a      	blt.n	2d900 <am_util_stdio_vsprintf+0x48c>
                    ui64Val = i64Val;
   2d8aa:	4684      	mov	ip, r0
   2d8ac:	4688      	mov	r8, r1
                if ( iWidth )
   2d8ae:	2b00      	cmp	r3, #0
   2d8b0:	f040 8191 	bne.w	2dbd6 <am_util_stdio_vsprintf+0x762>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2d8b4:	4622      	mov	r2, r4
   2d8b6:	f7ff fd57 	bl	2d368 <uint64_to_str>
                if ( pcBuf )
   2d8ba:	b104      	cbz	r4, 2d8be <am_util_stdio_vsprintf+0x44a>
                    pcBuf += iVal;
   2d8bc:	4404      	add	r4, r0
                ui32CharCnt += iVal;
   2d8be:	4406      	add	r6, r0
                break;
   2d8c0:	e694      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2d8c2:	f85a cb04 	ldr.w	ip, [sl], #4
   2d8c6:	f04f 0800 	mov.w	r8, #0
                if ( iWidth )
   2d8ca:	2b00      	cmp	r3, #0
   2d8cc:	d13c      	bne.n	2d948 <am_util_stdio_vsprintf+0x4d4>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2d8ce:	4660      	mov	r0, ip
   2d8d0:	4641      	mov	r1, r8
   2d8d2:	4622      	mov	r2, r4
   2d8d4:	f7ff fd48 	bl	2d368 <uint64_to_str>
                if ( pcBuf )
   2d8d8:	2c00      	cmp	r4, #0
   2d8da:	d1ef      	bne.n	2d8bc <am_util_stdio_vsprintf+0x448>
                    pcBuf += iVal;
   2d8dc:	2400      	movs	r4, #0
                ui32CharCnt += iVal;
   2d8de:	4406      	add	r6, r0
                break;
   2d8e0:	e684      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
   2d8e2:	bf00      	nop
   2d8e4:	10052a89 	.word	0x10052a89
   2d8e8:	003f2e3f 	.word	0x003f2e3f
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   2d8ec:	f10a 0a07 	add.w	sl, sl, #7
   2d8f0:	f02a 0a07 	bic.w	sl, sl, #7
   2d8f4:	f8da 1004 	ldr.w	r1, [sl, #4]
   2d8f8:	f85a 0b08 	ldr.w	r0, [sl], #8
                if ( i64Val < 0 )
   2d8fc:	2900      	cmp	r1, #0
   2d8fe:	dad4      	bge.n	2d8aa <am_util_stdio_vsprintf+0x436>
                    ui64Val = -i64Val;          // Get absolute value
   2d900:	f1d0 0c00 	rsbs	ip, r0, #0
   2d904:	eb61 0841 	sbc.w	r8, r1, r1, lsl #1
                if ( iWidth )
   2d908:	2b00      	cmp	r3, #0
   2d90a:	f040 81b8 	bne.w	2dc7e <am_util_stdio_vsprintf+0x80a>
                    ++ui32CharCnt;
   2d90e:	3601      	adds	r6, #1
                        if ( pcBuf )
   2d910:	2c00      	cmp	r4, #0
   2d912:	f000 81a3 	beq.w	2dc5c <am_util_stdio_vsprintf+0x7e8>
                            *pcBuf++ = '-';
   2d916:	4622      	mov	r2, r4
   2d918:	232d      	movs	r3, #45	@ 0x2d
   2d91a:	f802 3b01 	strb.w	r3, [r2], #1
                iVal = uint64_to_str(ui64Val, pcBuf);
   2d91e:	4660      	mov	r0, ip
   2d920:	4641      	mov	r1, r8
   2d922:	f7ff fd21 	bl	2d368 <uint64_to_str>
                            *pcBuf++ = '-';
   2d926:	4614      	mov	r4, r2
                    pcBuf += iVal;
   2d928:	4404      	add	r4, r0
   2d92a:	e7c8      	b.n	2d8be <am_util_stdio_vsprintf+0x44a>
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2d92c:	f10a 0a07 	add.w	sl, sl, #7
   2d930:	f02a 0a07 	bic.w	sl, sl, #7
   2d934:	f8da 8004 	ldr.w	r8, [sl, #4]
   2d938:	f85a cb08 	ldr.w	ip, [sl], #8
   2d93c:	e7c5      	b.n	2d8ca <am_util_stdio_vsprintf+0x456>
        uCnt++;
   2d93e:	2701      	movs	r7, #1
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2d940:	78aa      	ldrb	r2, [r5, #2]
        bNeg = true;
   2d942:	9700      	str	r7, [sp, #0]
        pcStr++;
   2d944:	3502      	adds	r5, #2
        uCnt++;
   2d946:	e6b8      	b.n	2d6ba <am_util_stdio_vsprintf+0x246>
    while ( ui64Val )
   2d948:	ea5c 0308 	orrs.w	r3, ip, r8
   2d94c:	f000 81e9 	beq.w	2dd22 <am_util_stdio_vsprintf+0x8ae>
    int iNDigits = ui64Val ? 0 : 1;
   2d950:	2700      	movs	r7, #0
   2d952:	9400      	str	r4, [sp, #0]
    while ( ui64Val )
   2d954:	4660      	mov	r0, ip
    int iNDigits = ui64Val ? 0 : 1;
   2d956:	463c      	mov	r4, r7
    while ( ui64Val )
   2d958:	4641      	mov	r1, r8
    int iNDigits = ui64Val ? 0 : 1;
   2d95a:	4667      	mov	r7, ip
        ui64Val = divu64_10(ui64Val);
   2d95c:	f7ff fca8 	bl	2d2b0 <divu64_10>
    while ( ui64Val )
   2d960:	ea50 0201 	orrs.w	r2, r0, r1
        ++iNDigits;
   2d964:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   2d968:	d1f8      	bne.n	2d95c <am_util_stdio_vsprintf+0x4e8>
   2d96a:	46bc      	mov	ip, r7
   2d96c:	4627      	mov	r7, r4
   2d96e:	9c00      	ldr	r4, [sp, #0]
                    iWidth -= ndigits_in_u64(ui64Val);
   2d970:	ebab 0707 	sub.w	r7, fp, r7
    if ( i32NumChars <= 0 )
   2d974:	2f00      	cmp	r7, #0
   2d976:	f340 8197 	ble.w	2dca8 <am_util_stdio_vsprintf+0x834>
    while ( i32NumChars-- )
   2d97a:	1e7b      	subs	r3, r7, #1
        if ( pcBuf )
   2d97c:	b13c      	cbz	r4, 2d98e <am_util_stdio_vsprintf+0x51a>
   2d97e:	4622      	mov	r2, r4
    while ( i32NumChars-- )
   2d980:	3b01      	subs	r3, #1
   2d982:	1c59      	adds	r1, r3, #1
            *pcBuf++ = cPadChar;
   2d984:	f882 9000 	strb.w	r9, [r2]
   2d988:	f102 0201 	add.w	r2, r2, #1
    while ( i32NumChars-- )
   2d98c:	d1f8      	bne.n	2d980 <am_util_stdio_vsprintf+0x50c>
                    ui32CharCnt += iWidth;
   2d98e:	443e      	add	r6, r7
                    pcBuf += pcBuf ? iWidth : 0;
   2d990:	2c00      	cmp	r4, #0
   2d992:	f000 8183 	beq.w	2dc9c <am_util_stdio_vsprintf+0x828>
   2d996:	443c      	add	r4, r7
                iVal = uint64_to_str(ui64Val, pcBuf);
   2d998:	4622      	mov	r2, r4
   2d99a:	4660      	mov	r0, ip
   2d99c:	4641      	mov	r1, r8
   2d99e:	f7ff fce3 	bl	2d368 <uint64_to_str>
                    pcBuf += iVal;
   2d9a2:	4404      	add	r4, r0
   2d9a4:	e78b      	b.n	2d8be <am_util_stdio_vsprintf+0x44a>
    else if (iExp2 >= 0)
   2d9a6:	2900      	cmp	r1, #0
   2d9a8:	db6b      	blt.n	2da82 <am_util_stdio_vsprintf+0x60e>
    if (unFloatValue.I32 < 0)
   2d9aa:	2800      	cmp	r0, #0
                    *pcBuf++ = '\r';
   2d9ac:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
   2d9ae:	da02      	bge.n	2d9b6 <am_util_stdio_vsprintf+0x542>
        *pcBuf++ = '-';
   2d9b0:	232d      	movs	r3, #45	@ 0x2d
   2d9b2:	f802 3b01 	strb.w	r3, [r2], #1
        i32IntPart = i32Significand >> (23 - iExp2);
   2d9b6:	f1c1 0117 	rsb	r1, r1, #23
   2d9ba:	fa4e f001 	asr.w	r0, lr, r1
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   2d9be:	f1ac 087e 	sub.w	r8, ip, #126	@ 0x7e
            uint64_to_str(i32IntPart, pcBuf);
   2d9c2:	17c1      	asrs	r1, r0, #31
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   2d9c4:	fa0e f808 	lsl.w	r8, lr, r8
            uint64_to_str(i32IntPart, pcBuf);
   2d9c8:	f7ff fcce 	bl	2d368 <uint64_to_str>
        while (*pcBuf)    // Get to end of new string
   2d9cc:	7813      	ldrb	r3, [r2, #0]
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   2d9ce:	f028 487f 	bic.w	r8, r8, #4278190080	@ 0xff000000
        while (*pcBuf)    // Get to end of new string
   2d9d2:	2b00      	cmp	r3, #0
   2d9d4:	f47f ae43 	bne.w	2d65e <am_util_stdio_vsprintf+0x1ea>
   2d9d8:	e645      	b.n	2d666 <am_util_stdio_vsprintf+0x1f2>
   2d9da:	4bc0      	ldr	r3, [pc, #768]	@ (2dcdc <am_util_stdio_vsprintf+0x868>)
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   2d9dc:	6023      	str	r3, [r4, #0]
   2d9de:	2003      	movs	r0, #3
                    ui32CharCnt += iVal;
   2d9e0:	4406      	add	r6, r0
                    pcBuf += iVal;
   2d9e2:	4404      	add	r4, r0
   2d9e4:	e602      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
                if ( iWidth > 0 )
   2d9e6:	f1b8 0f00 	cmp.w	r8, #0
   2d9ea:	f340 808e 	ble.w	2db0a <am_util_stdio_vsprintf+0x696>
    while ( i32NumChars-- )
   2d9ee:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
        return ui32RetVal;
   2d9f2:	4659      	mov	r1, fp
        if ( pcBuf )
   2d9f4:	b144      	cbz	r4, 2da08 <am_util_stdio_vsprintf+0x594>
   2d9f6:	4642      	mov	r2, r8
   2d9f8:	4623      	mov	r3, r4
    while ( i32NumChars-- )
   2d9fa:	3a01      	subs	r2, #1
   2d9fc:	1c57      	adds	r7, r2, #1
            *pcBuf++ = cPadChar;
   2d9fe:	f883 9000 	strb.w	r9, [r3]
   2da02:	f103 0301 	add.w	r3, r3, #1
    while ( i32NumChars-- )
   2da06:	d1f8      	bne.n	2d9fa <am_util_stdio_vsprintf+0x586>
                        ui32CharCnt += iWidth;
   2da08:	f108 0301 	add.w	r3, r8, #1
                while (*pcStr != 0x0)
   2da0c:	f89b 7000 	ldrb.w	r7, [fp]
                        ui32CharCnt += iWidth;
   2da10:	441e      	add	r6, r3
                        pcBuf += pcBuf ? iWidth : 0;
   2da12:	2c00      	cmp	r4, #0
   2da14:	f000 814a 	beq.w	2dcac <am_util_stdio_vsprintf+0x838>
   2da18:	441c      	add	r4, r3
                while (*pcStr != 0x0)
   2da1a:	2f00      	cmp	r7, #0
   2da1c:	f43f ade6 	beq.w	2d5ec <am_util_stdio_vsprintf+0x178>
   2da20:	465b      	mov	r3, fp
                        iWidth = 0;
   2da22:	f04f 0800 	mov.w	r8, #0
   2da26:	e688      	b.n	2d73a <am_util_stdio_vsprintf+0x2c6>
        switch ( *pcFmt )
   2da28:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2da2a:	f85a 2b04 	ldr.w	r2, [sl], #4
   2da2e:	2100      	movs	r1, #0
                if ( iWidth )
   2da30:	2b00      	cmp	r3, #0
   2da32:	d17e      	bne.n	2db32 <am_util_stdio_vsprintf+0x6be>
    if ( ui64Val == 0 )
   2da34:	ea52 0301 	orrs.w	r3, r2, r1
   2da38:	f040 80af 	bne.w	2db9a <am_util_stdio_vsprintf+0x726>
   2da3c:	2330      	movs	r3, #48	@ 0x30
   2da3e:	f88d 300c 	strb.w	r3, [sp, #12]
   2da42:	2001      	movs	r0, #1
    if (pcBuf)
   2da44:	2c00      	cmp	r4, #0
   2da46:	f43f af3a 	beq.w	2d8be <am_util_stdio_vsprintf+0x44a>
   2da4a:	f108 0801 	add.w	r8, r8, #1
   2da4e:	af03      	add	r7, sp, #12
   2da50:	eb07 0308 	add.w	r3, r7, r8
   2da54:	1e62      	subs	r2, r4, #1
            *pcBuf++ = tbuf[ix];
   2da56:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   2da5a:	f802 1f01 	strb.w	r1, [r2, #1]!
        while (ix--)
   2da5e:	42bb      	cmp	r3, r7
   2da60:	d1f9      	bne.n	2da56 <am_util_stdio_vsprintf+0x5e2>
        *pcBuf = 0;
   2da62:	2300      	movs	r3, #0
   2da64:	f804 3008 	strb.w	r3, [r4, r8]
                ui32CharCnt += iVal;
   2da68:	4406      	add	r6, r0
                    pcBuf += iVal;
   2da6a:	4404      	add	r4, r0
                break;
   2da6c:	e5be      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
        switch ( *pcFmt )
   2da6e:	2701      	movs	r7, #1
   2da70:	e7db      	b.n	2da2a <am_util_stdio_vsprintf+0x5b6>
                if ( iWidth > 0 )
   2da72:	f1b8 0f00 	cmp.w	r8, #0
   2da76:	f340 8135 	ble.w	2dce4 <am_util_stdio_vsprintf+0x870>
    uint32_t ui32RetVal = 0;
   2da7a:	4639      	mov	r1, r7
    while ( i32NumChars-- )
   2da7c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
   2da80:	e7b8      	b.n	2d9f4 <am_util_stdio_vsprintf+0x580>
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   2da82:	43c9      	mvns	r1, r1
    if (unFloatValue.I32 < 0)
   2da84:	2800      	cmp	r0, #0
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   2da86:	fa4e f801 	asr.w	r8, lr, r1
        *pcBuf++ = '-';
   2da8a:	4622      	mov	r2, r4
    if (unFloatValue.I32 < 0)
   2da8c:	f2c0 8130 	blt.w	2dcf0 <am_util_stdio_vsprintf+0x87c>
        *pcBuf++ = '0';
   2da90:	f642 6330 	movw	r3, #11824	@ 0x2e30
   2da94:	f822 3b02 	strh.w	r3, [r2], #2
   2da98:	2111      	movs	r1, #17
   2da9a:	2002      	movs	r0, #2
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   2da9c:	42b9      	cmp	r1, r7
   2da9e:	bfa8      	it	ge
   2daa0:	4639      	movge	r1, r7
        for (jx = 0; jx < iMax; jx++)
   2daa2:	2900      	cmp	r1, #0
   2daa4:	f340 813f 	ble.w	2dd26 <am_util_stdio_vsprintf+0x8b2>
   2daa8:	4411      	add	r1, r2
            i32FracPart *= 10;
   2daaa:	eb08 0888 	add.w	r8, r8, r8, lsl #2
            *pcBuf++ = (i32FracPart >> 24) + '0';
   2daae:	ea4f 53e8 	mov.w	r3, r8, asr #23
   2dab2:	3330      	adds	r3, #48	@ 0x30
   2dab4:	f802 3b01 	strb.w	r3, [r2], #1
            i32FracPart *= 10;
   2dab8:	ea4f 0848 	mov.w	r8, r8, lsl #1
        for (jx = 0; jx < iMax; jx++)
   2dabc:	4291      	cmp	r1, r2
            i32FracPart &= 0x00FFFFFF;
   2dabe:	f028 487f 	bic.w	r8, r8, #4278190080	@ 0xff000000
        for (jx = 0; jx < iMax; jx++)
   2dac2:	d1f2      	bne.n	2daaa <am_util_stdio_vsprintf+0x636>
    return (pcBuf - pcBufInitial);
   2dac4:	1b08      	subs	r0, r1, r4
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   2dac6:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   2daca:	f348 53c7 	sbfx	r3, r8, #23, #8
   2dace:	2b04      	cmp	r3, #4
   2dad0:	f77f add3 	ble.w	2d67a <am_util_stdio_vsprintf+0x206>
            pcBuftmp = pcBuf - 1;
   2dad4:	1e4b      	subs	r3, r1, #1
            while ( pcBuftmp >= pcBufInitial )
   2dad6:	429c      	cmp	r4, r3
   2dad8:	f63f adcf 	bhi.w	2d67a <am_util_stdio_vsprintf+0x206>
                    *pcBuftmp = '0';
   2dadc:	f04f 0e30 	mov.w	lr, #48	@ 0x30
   2dae0:	e004      	b.n	2daec <am_util_stdio_vsprintf+0x678>
   2dae2:	f883 e001 	strb.w	lr, [r3, #1]
            while ( pcBuftmp >= pcBufInitial )
   2dae6:	42bc      	cmp	r4, r7
   2dae8:	f43f adc7 	beq.w	2d67a <am_util_stdio_vsprintf+0x206>
                if ( *pcBuftmp == '.' )
   2daec:	781a      	ldrb	r2, [r3, #0]
   2daee:	2a2e      	cmp	r2, #46	@ 0x2e
   2daf0:	461f      	mov	r7, r3
   2daf2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
   2daf6:	d0f6      	beq.n	2dae6 <am_util_stdio_vsprintf+0x672>
                else if ( *pcBuftmp == '9' )
   2daf8:	2a39      	cmp	r2, #57	@ 0x39
   2dafa:	d0f2      	beq.n	2dae2 <am_util_stdio_vsprintf+0x66e>
                    *pcBuftmp += 1;
   2dafc:	3201      	adds	r2, #1
   2dafe:	703a      	strb	r2, [r7, #0]
                    break;
   2db00:	e5bb      	b.n	2d67a <am_util_stdio_vsprintf+0x206>
        *pcBuf++ = '-';
   2db02:	232d      	movs	r3, #45	@ 0x2d
   2db04:	f802 3b01 	strb.w	r3, [r2], #1
    if (i32IntPart == 0)
   2db08:	e59c      	b.n	2d644 <am_util_stdio_vsprintf+0x1d0>
    while ( *pcBuf++ )
   2db0a:	f89b 7000 	ldrb.w	r7, [fp]
                while (*pcStr != 0x0)
   2db0e:	2f00      	cmp	r7, #0
   2db10:	f000 80f7 	beq.w	2dd02 <am_util_stdio_vsprintf+0x88e>
   2db14:	4659      	mov	r1, fp
   2db16:	e60c      	b.n	2d732 <am_util_stdio_vsprintf+0x2be>
   2db18:	2100      	movs	r1, #0
   2db1a:	e633      	b.n	2d784 <am_util_stdio_vsprintf+0x310>
        switch ( *pcFmt )
   2db1c:	2700      	movs	r7, #0
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   2db1e:	f10a 0a07 	add.w	sl, sl, #7
   2db22:	f02a 0a07 	bic.w	sl, sl, #7
   2db26:	f8da 1004 	ldr.w	r1, [sl, #4]
   2db2a:	f85a 2b08 	ldr.w	r2, [sl], #8
                if ( iWidth )
   2db2e:	2b00      	cmp	r3, #0
   2db30:	d080      	beq.n	2da34 <am_util_stdio_vsprintf+0x5c0>
    while ( ui64Val )
   2db32:	ea52 0301 	orrs.w	r3, r2, r1
   2db36:	f000 80bd 	beq.w	2dcb4 <am_util_stdio_vsprintf+0x840>
   2db3a:	4613      	mov	r3, r2
   2db3c:	4608      	mov	r0, r1
    int iDigits = ui64Val ? 0 : 1;
   2db3e:	f04f 0c00 	mov.w	ip, #0
        ui64Val >>= 4;
   2db42:	091b      	lsrs	r3, r3, #4
   2db44:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
   2db48:	0900      	lsrs	r0, r0, #4
    while ( ui64Val )
   2db4a:	ea53 0e00 	orrs.w	lr, r3, r0
        ++iDigits;
   2db4e:	f10c 0c01 	add.w	ip, ip, #1
    while ( ui64Val )
   2db52:	d1f6      	bne.n	2db42 <am_util_stdio_vsprintf+0x6ce>
                    iWidth -= ndigits_in_hex(ui64Val);
   2db54:	ebab 0c0c 	sub.w	ip, fp, ip
    if ( i32NumChars <= 0 )
   2db58:	f1bc 0f00 	cmp.w	ip, #0
   2db5c:	f340 8085 	ble.w	2dc6a <am_util_stdio_vsprintf+0x7f6>
    while ( i32NumChars-- )
   2db60:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
        if ( pcBuf )
   2db64:	b14c      	cbz	r4, 2db7a <am_util_stdio_vsprintf+0x706>
   2db66:	4620      	mov	r0, r4
    while ( i32NumChars-- )
   2db68:	3b01      	subs	r3, #1
   2db6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
   2db6e:	4686      	mov	lr, r0
            *pcBuf++ = cPadChar;
   2db70:	f880 9000 	strb.w	r9, [r0]
   2db74:	f100 0001 	add.w	r0, r0, #1
    while ( i32NumChars-- )
   2db78:	d1f6      	bne.n	2db68 <am_util_stdio_vsprintf+0x6f4>
                    ui32CharCnt += iWidth;
   2db7a:	4466      	add	r6, ip
                    pcBuf += pcBuf ? iWidth : 0;
   2db7c:	2c00      	cmp	r4, #0
   2db7e:	d067      	beq.n	2dc50 <am_util_stdio_vsprintf+0x7dc>
    if ( ui64Val == 0 )
   2db80:	ea52 0301 	orrs.w	r3, r2, r1
                    pcBuf += pcBuf ? iWidth : 0;
   2db84:	4464      	add	r4, ip
    if ( ui64Val == 0 )
   2db86:	d108      	bne.n	2db9a <am_util_stdio_vsprintf+0x726>
   2db88:	2330      	movs	r3, #48	@ 0x30
   2db8a:	f88d 300c 	strb.w	r3, [sp, #12]
   2db8e:	f04f 0800 	mov.w	r8, #0
   2db92:	2001      	movs	r0, #1
   2db94:	e759      	b.n	2da4a <am_util_stdio_vsprintf+0x5d6>
        switch ( *pcFmt )
   2db96:	2701      	movs	r7, #1
   2db98:	e7c1      	b.n	2db1e <am_util_stdio_vsprintf+0x6aa>
   2db9a:	2f00      	cmp	r7, #0
   2db9c:	bf14      	ite	ne
   2db9e:	f04f 0c27 	movne.w	ip, #39	@ 0x27
   2dba2:	f04f 0c07 	moveq.w	ip, #7
   2dba6:	af03      	add	r7, sp, #12
    int iNumDig, ix = 0;
   2dba8:	f04f 0800 	mov.w	r8, #0
   2dbac:	e000      	b.n	2dbb0 <am_util_stdio_vsprintf+0x73c>
        tbuf[ix++] = cCh + '0';
   2dbae:	4680      	mov	r8, r0
        cCh = ui64Val & 0xf;
   2dbb0:	f002 030f 	and.w	r3, r2, #15
        if ( cCh > 9 )
   2dbb4:	2b09      	cmp	r3, #9
        ui64Val >>= 4;
   2dbb6:	ea4f 1012 	mov.w	r0, r2, lsr #4
            cCh += bLower ? 0x27 : 0x7;
   2dbba:	bf88      	it	hi
   2dbbc:	4463      	addhi	r3, ip
        ui64Val >>= 4;
   2dbbe:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
        tbuf[ix++] = cCh + '0';
   2dbc2:	3330      	adds	r3, #48	@ 0x30
        ui64Val >>= 4;
   2dbc4:	0909      	lsrs	r1, r1, #4
        tbuf[ix++] = cCh + '0';
   2dbc6:	f807 3b01 	strb.w	r3, [r7], #1
    while ( ui64Val )
   2dbca:	ea52 0301 	orrs.w	r3, r2, r1
        tbuf[ix++] = cCh + '0';
   2dbce:	f108 0001 	add.w	r0, r8, #1
    while ( ui64Val )
   2dbd2:	d1ec      	bne.n	2dbae <am_util_stdio_vsprintf+0x73a>
   2dbd4:	e736      	b.n	2da44 <am_util_stdio_vsprintf+0x5d0>
    while ( ui64Val )
   2dbd6:	ea50 0301 	orrs.w	r3, r0, r1
                    bNeg = false;
   2dbda:	bf18      	it	ne
   2dbdc:	2300      	movne	r3, #0
    while ( ui64Val )
   2dbde:	f000 80af 	beq.w	2dd40 <am_util_stdio_vsprintf+0x8cc>
    int iNDigits = ui64Val ? 0 : 1;
   2dbe2:	2700      	movs	r7, #0
   2dbe4:	e9cd 3400 	strd	r3, r4, [sp]
                    bNeg = false;
   2dbe8:	4660      	mov	r0, ip
    int iNDigits = ui64Val ? 0 : 1;
   2dbea:	463c      	mov	r4, r7
                    bNeg = false;
   2dbec:	4641      	mov	r1, r8
    int iNDigits = ui64Val ? 0 : 1;
   2dbee:	4667      	mov	r7, ip
        ui64Val = divu64_10(ui64Val);
   2dbf0:	f7ff fb5e 	bl	2d2b0 <divu64_10>
    while ( ui64Val )
   2dbf4:	ea50 0201 	orrs.w	r2, r0, r1
        ++iNDigits;
   2dbf8:	f104 0401 	add.w	r4, r4, #1
    while ( ui64Val )
   2dbfc:	d1f8      	bne.n	2dbf0 <am_util_stdio_vsprintf+0x77c>
                    iWidth -= ndigits_in_i64(ui64Val);
   2dbfe:	9b00      	ldr	r3, [sp, #0]
   2dc00:	46bc      	mov	ip, r7
   2dc02:	4627      	mov	r7, r4
   2dc04:	ebab 0707 	sub.w	r7, fp, r7
   2dc08:	9c01      	ldr	r4, [sp, #4]
                    if ( bNeg )
   2dc0a:	b12b      	cbz	r3, 2dc18 <am_util_stdio_vsprintf+0x7a4>
                        if ( ui8PadChar == '0' )
   2dc0c:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
                        --iWidth;
   2dc10:	f107 31ff 	add.w	r1, r7, #4294967295	@ 0xffffffff
                        if ( ui8PadChar == '0' )
   2dc14:	d055      	beq.n	2dcc2 <am_util_stdio_vsprintf+0x84e>
                        --iWidth;
   2dc16:	460f      	mov	r7, r1
    if ( i32NumChars <= 0 )
   2dc18:	2f00      	cmp	r7, #0
   2dc1a:	dd4e      	ble.n	2dcba <am_util_stdio_vsprintf+0x846>
    while ( i32NumChars-- )
   2dc1c:	3f01      	subs	r7, #1
        if ( pcBuf )
   2dc1e:	b144      	cbz	r4, 2dc32 <am_util_stdio_vsprintf+0x7be>
   2dc20:	4639      	mov	r1, r7
   2dc22:	4622      	mov	r2, r4
    while ( i32NumChars-- )
   2dc24:	3901      	subs	r1, #1
   2dc26:	1c48      	adds	r0, r1, #1
            *pcBuf++ = cPadChar;
   2dc28:	f882 9000 	strb.w	r9, [r2]
   2dc2c:	f102 0201 	add.w	r2, r2, #1
    while ( i32NumChars-- )
   2dc30:	d1f8      	bne.n	2dc24 <am_util_stdio_vsprintf+0x7b0>
                    ui32CharCnt += iWidth;
   2dc32:	1c7a      	adds	r2, r7, #1
   2dc34:	4416      	add	r6, r2
                    pcBuf += pcBuf ? iWidth : 0;
   2dc36:	b324      	cbz	r4, 2dc82 <am_util_stdio_vsprintf+0x80e>
   2dc38:	4414      	add	r4, r2
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   2dc3a:	b113      	cbz	r3, 2dc42 <am_util_stdio_vsprintf+0x7ce>
   2dc3c:	f1b9 0f20 	cmp.w	r9, #32
   2dc40:	d063      	beq.n	2dd0a <am_util_stdio_vsprintf+0x896>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2dc42:	4622      	mov	r2, r4
   2dc44:	4660      	mov	r0, ip
   2dc46:	4641      	mov	r1, r8
   2dc48:	f7ff fb8e 	bl	2d368 <uint64_to_str>
                    pcBuf += iVal;
   2dc4c:	4404      	add	r4, r0
   2dc4e:	e636      	b.n	2d8be <am_util_stdio_vsprintf+0x44a>
    if ( ui64Val == 0 )
   2dc50:	ea52 0301 	orrs.w	r3, r2, r1
   2dc54:	d1a1      	bne.n	2db9a <am_util_stdio_vsprintf+0x726>
   2dc56:	2001      	movs	r0, #1
                ui32CharCnt += iVal;
   2dc58:	4406      	add	r6, r0
                break;
   2dc5a:	e4c7      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2dc5c:	4660      	mov	r0, ip
   2dc5e:	4641      	mov	r1, r8
   2dc60:	4622      	mov	r2, r4
   2dc62:	f7ff fb81 	bl	2d368 <uint64_to_str>
                ui32CharCnt += iVal;
   2dc66:	4406      	add	r6, r0
                break;
   2dc68:	e4c0      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
   2dc6a:	f04f 0c00 	mov.w	ip, #0
   2dc6e:	e785      	b.n	2db7c <am_util_stdio_vsprintf+0x708>
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   2dc70:	2100      	movs	r1, #0
   2dc72:	e542      	b.n	2d6fa <am_util_stdio_vsprintf+0x286>
    *pcBuf++ = '.';
   2dc74:	3201      	adds	r2, #1
        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   2dc76:	1b10      	subs	r0, r2, r4
   2dc78:	f1c0 0113 	rsb	r1, r0, #19
   2dc7c:	e70e      	b.n	2da9c <am_util_stdio_vsprintf+0x628>
                    bNeg = true;
   2dc7e:	2301      	movs	r3, #1
   2dc80:	e7af      	b.n	2dbe2 <am_util_stdio_vsprintf+0x76e>
                    if ( bNeg  &&  (ui8PadChar == ' ') )
   2dc82:	2b00      	cmp	r3, #0
   2dc84:	d0ea      	beq.n	2dc5c <am_util_stdio_vsprintf+0x7e8>
   2dc86:	f1b9 0f20 	cmp.w	r9, #32
   2dc8a:	d051      	beq.n	2dd30 <am_util_stdio_vsprintf+0x8bc>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2dc8c:	2200      	movs	r2, #0
   2dc8e:	4660      	mov	r0, ip
   2dc90:	4641      	mov	r1, r8
   2dc92:	f7ff fb69 	bl	2d368 <uint64_to_str>
                ui32CharCnt += iVal;
   2dc96:	4614      	mov	r4, r2
   2dc98:	4406      	add	r6, r0
                break;
   2dc9a:	e4a7      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2dc9c:	4622      	mov	r2, r4
   2dc9e:	4660      	mov	r0, ip
   2dca0:	4641      	mov	r1, r8
   2dca2:	f7ff fb61 	bl	2d368 <uint64_to_str>
                if ( pcBuf )
   2dca6:	e619      	b.n	2d8dc <am_util_stdio_vsprintf+0x468>
   2dca8:	2700      	movs	r7, #0
   2dcaa:	e671      	b.n	2d990 <am_util_stdio_vsprintf+0x51c>
                while (*pcStr != 0x0)
   2dcac:	2f00      	cmp	r7, #0
   2dcae:	f47f ade8 	bne.w	2d882 <am_util_stdio_vsprintf+0x40e>
   2dcb2:	e49b      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
    int iDigits = ui64Val ? 0 : 1;
   2dcb4:	f04f 0c01 	mov.w	ip, #1
   2dcb8:	e74c      	b.n	2db54 <am_util_stdio_vsprintf+0x6e0>
   2dcba:	2200      	movs	r2, #0
   2dcbc:	e7bb      	b.n	2dc36 <am_util_stdio_vsprintf+0x7c2>
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   2dcbe:	4b08      	ldr	r3, [pc, #32]	@ (2dce0 <am_util_stdio_vsprintf+0x86c>)
   2dcc0:	e68c      	b.n	2d9dc <am_util_stdio_vsprintf+0x568>
                    ++ui32CharCnt;
   2dcc2:	3601      	adds	r6, #1
                            if ( pcBuf )
   2dcc4:	2c00      	cmp	r4, #0
   2dcc6:	d03f      	beq.n	2dd48 <am_util_stdio_vsprintf+0x8d4>
                                *pcBuf++ = '-';
   2dcc8:	4622      	mov	r2, r4
   2dcca:	202d      	movs	r0, #45	@ 0x2d
    if ( i32NumChars <= 0 )
   2dccc:	2900      	cmp	r1, #0
                                *pcBuf++ = '-';
   2dcce:	f802 0b01 	strb.w	r0, [r2], #1
    if ( i32NumChars <= 0 )
   2dcd2:	dd3d      	ble.n	2dd50 <am_util_stdio_vsprintf+0x8dc>
    while ( i32NumChars-- )
   2dcd4:	1eb9      	subs	r1, r7, #2
                                *pcBuf++ = '-';
   2dcd6:	4614      	mov	r4, r2
    while ( i32NumChars-- )
   2dcd8:	460f      	mov	r7, r1
   2dcda:	e7a3      	b.n	2dc24 <am_util_stdio_vsprintf+0x7b0>
   2dcdc:	00302e30 	.word	0x00302e30
   2dce0:	00232e23 	.word	0x00232e23
                if ( iWidth )
   2dce4:	f43f ac82 	beq.w	2d5ec <am_util_stdio_vsprintf+0x178>
                    iWidth = -iWidth;
   2dce8:	f1c8 0800 	rsb	r8, r8, #0
                    if ( ui32strlen < iWidth )
   2dcec:	4641      	mov	r1, r8
    if ( i32NumChars <= 0 )
   2dcee:	e53d      	b.n	2d76c <am_util_stdio_vsprintf+0x2f8>
        *pcBuf++ = '-';
   2dcf0:	f243 032d 	movw	r3, #12333	@ 0x302d
   2dcf4:	f822 3b03 	strh.w	r3, [r2], #3
    *pcBuf++ = '.';
   2dcf8:	232e      	movs	r3, #46	@ 0x2e
   2dcfa:	70a3      	strb	r3, [r4, #2]
   2dcfc:	2110      	movs	r1, #16
   2dcfe:	2003      	movs	r0, #3
   2dd00:	e6cc      	b.n	2da9c <am_util_stdio_vsprintf+0x628>
                if ( iWidth )
   2dd02:	f1b8 0f00 	cmp.w	r8, #0
   2dd06:	d1ef      	bne.n	2dce8 <am_util_stdio_vsprintf+0x874>
   2dd08:	e470      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
                            *pcBuf++ = '-';
   2dd0a:	4622      	mov	r2, r4
   2dd0c:	232d      	movs	r3, #45	@ 0x2d
   2dd0e:	f802 3b01 	strb.w	r3, [r2], #1
                iVal = uint64_to_str(ui64Val, pcBuf);
   2dd12:	4660      	mov	r0, ip
   2dd14:	4641      	mov	r1, r8
   2dd16:	f7ff fb27 	bl	2d368 <uint64_to_str>
                            *pcBuf++ = '-';
   2dd1a:	4614      	mov	r4, r2
                        ++ui32CharCnt;
   2dd1c:	3601      	adds	r6, #1
                    pcBuf += iVal;
   2dd1e:	4404      	add	r4, r0
   2dd20:	e5cd      	b.n	2d8be <am_util_stdio_vsprintf+0x44a>
    int iNDigits = ui64Val ? 0 : 1;
   2dd22:	2701      	movs	r7, #1
   2dd24:	e624      	b.n	2d970 <am_util_stdio_vsprintf+0x4fc>
    *pcBuf++ = '.';
   2dd26:	4611      	mov	r1, r2
   2dd28:	e6cd      	b.n	2dac6 <am_util_stdio_vsprintf+0x652>
   2dd2a:	232e      	movs	r3, #46	@ 0x2e
   2dd2c:	7013      	strb	r3, [r2, #0]
    if (i32FracPart == 0)
   2dd2e:	e4a0      	b.n	2d672 <am_util_stdio_vsprintf+0x1fe>
                iVal = uint64_to_str(ui64Val, pcBuf);
   2dd30:	4660      	mov	r0, ip
   2dd32:	4641      	mov	r1, r8
   2dd34:	4622      	mov	r2, r4
   2dd36:	f7ff fb17 	bl	2d368 <uint64_to_str>
                        ++ui32CharCnt;
   2dd3a:	3601      	adds	r6, #1
                ui32CharCnt += iVal;
   2dd3c:	4406      	add	r6, r0
                break;
   2dd3e:	e455      	b.n	2d5ec <am_util_stdio_vsprintf+0x178>
                    iWidth -= ndigits_in_i64(ui64Val);
   2dd40:	f10b 37ff 	add.w	r7, fp, #4294967295	@ 0xffffffff
                    bNeg = false;
   2dd44:	2300      	movs	r3, #0
   2dd46:	e767      	b.n	2dc18 <am_util_stdio_vsprintf+0x7a4>
    if ( i32NumChars <= 0 )
   2dd48:	2900      	cmp	r1, #0
   2dd4a:	dd9f      	ble.n	2dc8c <am_util_stdio_vsprintf+0x818>
    while ( i32NumChars-- )
   2dd4c:	3f02      	subs	r7, #2
   2dd4e:	e770      	b.n	2dc32 <am_util_stdio_vsprintf+0x7be>
                    pcBuf += pcBuf ? iWidth : 0;
   2dd50:	4614      	mov	r4, r2
   2dd52:	e776      	b.n	2dc42 <am_util_stdio_vsprintf+0x7ce>

0002dd54 <am_util_stdio_vprintf>:
    return ui32CharCnt;
}

uint32_t
am_util_stdio_vprintf(const char *pcFmt, va_list pArgs)
{
   2dd54:	b538      	push	{r3, r4, r5, lr}
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   2dd56:	4d09      	ldr	r5, [pc, #36]	@ (2dd7c <am_util_stdio_vprintf+0x28>)
   2dd58:	682b      	ldr	r3, [r5, #0]
   2dd5a:	b15b      	cbz	r3, 2dd74 <am_util_stdio_vprintf+0x20>
   2dd5c:	4604      	mov	r4, r0
   2dd5e:	460a      	mov	r2, r1
    {
        return 0;
    }

    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   2dd60:	4807      	ldr	r0, [pc, #28]	@ (2dd80 <am_util_stdio_vprintf+0x2c>)
   2dd62:	4621      	mov	r1, r4
   2dd64:	f7ff fb86 	bl	2d474 <am_util_stdio_vsprintf>

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   2dd68:	682a      	ldr	r2, [r5, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   2dd6a:	4604      	mov	r4, r0
    g_pfnCharPrint(g_prfbuf);
   2dd6c:	4804      	ldr	r0, [pc, #16]	@ (2dd80 <am_util_stdio_vprintf+0x2c>)
   2dd6e:	4790      	blx	r2

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
}
   2dd70:	4620      	mov	r0, r4
   2dd72:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   2dd74:	461c      	mov	r4, r3
}
   2dd76:	4620      	mov	r0, r4
   2dd78:	bd38      	pop	{r3, r4, r5, pc}
   2dd7a:	bf00      	nop
   2dd7c:	10052e8c 	.word	0x10052e8c
   2dd80:	10052a8c 	.word	0x10052a8c

0002dd84 <vApplicationMallocFailedHook>:
    // free memory available in the FreeRTOS heap.  pvPortMalloc() is called
    // internally by FreeRTOS API functions that create tasks, queues, software
    // timers, and semaphores.  The size of the FreeRTOS heap is set by the
    // configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h.
    //
    while (1)
   2dd84:	e7fe      	b.n	2dd84 <vApplicationMallocFailedHook>
   2dd86:	bf00      	nop

0002dd88 <vApplicationStackOverflowHook>:
    // Run time stack overflow checking is performed if
    // configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
    // function is called if a stack overflow is detected.
    //
    while (1) {
        __asm("BKPT #0\n"); // Break into the debugger
   2dd88:	be00      	bkpt	0x0000
    while (1) {
   2dd8a:	e7fd      	b.n	2dd88 <vApplicationStackOverflowHook>

0002dd8c <vTaskSwitchContext.part.0>:
         * switch. */
        xYieldPending = pdTRUE;
    }
    else
    {
        xYieldPending = pdFALSE;
   2dd8c:	4b2b      	ldr	r3, [pc, #172]	@ (2de3c <vTaskSwitchContext.part.0+0xb0>)
void vTaskSwitchContext( void )
   2dd8e:	b570      	push	{r4, r5, r6, lr}
        xYieldPending = pdFALSE;
   2dd90:	2200      	movs	r2, #0
            ulTaskSwitchedInTime = ulTotalRunTime;
        }
        #endif /* configGENERATE_RUN_TIME_STATS */

        /* Check for stack overflow, if configured. */
        taskCHECK_FOR_STACK_OVERFLOW();
   2dd92:	4c2b      	ldr	r4, [pc, #172]	@ (2de40 <vTaskSwitchContext.part.0+0xb4>)
        xYieldPending = pdFALSE;
   2dd94:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
   2dd96:	6823      	ldr	r3, [r4, #0]
   2dd98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
   2dd9a:	681a      	ldr	r2, [r3, #0]
   2dd9c:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
   2dda0:	d103      	bne.n	2ddaa <vTaskSwitchContext.part.0+0x1e>
   2dda2:	685a      	ldr	r2, [r3, #4]
   2dda4:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
   2dda8:	d03f      	beq.n	2de2a <vTaskSwitchContext.part.0+0x9e>
   2ddaa:	6820      	ldr	r0, [r4, #0]
   2ddac:	6821      	ldr	r1, [r4, #0]
   2ddae:	3134      	adds	r1, #52	@ 0x34
   2ddb0:	f7ff ffea 	bl	2dd88 <vApplicationStackOverflowHook>
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2ddb4:	4d23      	ldr	r5, [pc, #140]	@ (2de44 <vTaskSwitchContext.part.0+0xb8>)
   2ddb6:	4a24      	ldr	r2, [pc, #144]	@ (2de48 <vTaskSwitchContext.part.0+0xbc>)
   2ddb8:	682b      	ldr	r3, [r5, #0]
   2ddba:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   2ddbe:	0080      	lsls	r0, r0, #2
   2ddc0:	0099      	lsls	r1, r3, #2
   2ddc2:	5810      	ldr	r0, [r2, r0]
   2ddc4:	bb08      	cbnz	r0, 2de0a <vTaskSwitchContext.part.0+0x7e>
   2ddc6:	b1f3      	cbz	r3, 2de06 <vTaskSwitchContext.part.0+0x7a>
   2ddc8:	1e58      	subs	r0, r3, #1
   2ddca:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   2ddce:	0089      	lsls	r1, r1, #2
   2ddd0:	5856      	ldr	r6, [r2, r1]
   2ddd2:	0081      	lsls	r1, r0, #2
   2ddd4:	b9c6      	cbnz	r6, 2de08 <vTaskSwitchContext.part.0+0x7c>
   2ddd6:	b1b0      	cbz	r0, 2de06 <vTaskSwitchContext.part.0+0x7a>
   2ddd8:	1e98      	subs	r0, r3, #2
   2ddda:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   2ddde:	0089      	lsls	r1, r1, #2
   2dde0:	5856      	ldr	r6, [r2, r1]
   2dde2:	0081      	lsls	r1, r0, #2
   2dde4:	b986      	cbnz	r6, 2de08 <vTaskSwitchContext.part.0+0x7c>
   2dde6:	b170      	cbz	r0, 2de06 <vTaskSwitchContext.part.0+0x7a>
   2dde8:	1ed8      	subs	r0, r3, #3
   2ddea:	eb00 0180 	add.w	r1, r0, r0, lsl #2
   2ddee:	0089      	lsls	r1, r1, #2
   2ddf0:	5856      	ldr	r6, [r2, r1]
   2ddf2:	0081      	lsls	r1, r0, #2
   2ddf4:	b946      	cbnz	r6, 2de08 <vTaskSwitchContext.part.0+0x7c>
   2ddf6:	b130      	cbz	r0, 2de06 <vTaskSwitchContext.part.0+0x7a>
   2ddf8:	3b04      	subs	r3, #4
   2ddfa:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   2ddfe:	0080      	lsls	r0, r0, #2
   2de00:	0099      	lsls	r1, r3, #2
   2de02:	5810      	ldr	r0, [r2, r0]
   2de04:	b908      	cbnz	r0, 2de0a <vTaskSwitchContext.part.0+0x7e>
   2de06:	e7fe      	b.n	2de06 <vTaskSwitchContext.part.0+0x7a>
   2de08:	4603      	mov	r3, r0
   2de0a:	4419      	add	r1, r3
   2de0c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   2de10:	4602      	mov	r2, r0
   2de12:	6841      	ldr	r1, [r0, #4]
   2de14:	6849      	ldr	r1, [r1, #4]
   2de16:	6041      	str	r1, [r0, #4]
   2de18:	3208      	adds	r2, #8
   2de1a:	4291      	cmp	r1, r2
   2de1c:	bf04      	itt	eq
   2de1e:	6849      	ldreq	r1, [r1, #4]
   2de20:	6041      	streq	r1, [r0, #4]
   2de22:	68ca      	ldr	r2, [r1, #12]
   2de24:	6022      	str	r2, [r4, #0]
   2de26:	602b      	str	r3, [r5, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
   2de28:	bd70      	pop	{r4, r5, r6, pc}
        taskCHECK_FOR_STACK_OVERFLOW();
   2de2a:	689a      	ldr	r2, [r3, #8]
   2de2c:	f1b2 3fa5 	cmp.w	r2, #2779096485	@ 0xa5a5a5a5
   2de30:	d1bb      	bne.n	2ddaa <vTaskSwitchContext.part.0+0x1e>
   2de32:	68db      	ldr	r3, [r3, #12]
   2de34:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
   2de38:	d1b7      	bne.n	2ddaa <vTaskSwitchContext.part.0+0x1e>
   2de3a:	e7bb      	b.n	2ddb4 <vTaskSwitchContext.part.0+0x28>
   2de3c:	10052e9c 	.word	0x10052e9c
   2de40:	10052f1c 	.word	0x10052f1c
   2de44:	10052ea4 	.word	0x10052ea4
   2de48:	10052ecc 	.word	0x10052ecc

0002de4c <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
   2de4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   2de50:	4b4c      	ldr	r3, [pc, #304]	@ (2df84 <xTaskIncrementTick.part.0+0x138>)
   2de52:	681e      	ldr	r6, [r3, #0]
   2de54:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
   2de56:	b083      	sub	sp, #12
        xTickCount = xConstTickCount;
   2de58:	601e      	str	r6, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   2de5a:	2e00      	cmp	r6, #0
   2de5c:	d063      	beq.n	2df26 <xTaskIncrementTick.part.0+0xda>
   2de5e:	4a4a      	ldr	r2, [pc, #296]	@ (2df88 <xTaskIncrementTick.part.0+0x13c>)
        if( xConstTickCount >= xNextTaskUnblockTime )
   2de60:	6813      	ldr	r3, [r2, #0]
   2de62:	429e      	cmp	r6, r3
   2de64:	d364      	bcc.n	2df30 <xTaskIncrementTick.part.0+0xe4>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2de66:	4f49      	ldr	r7, [pc, #292]	@ (2df8c <xTaskIncrementTick.part.0+0x140>)
   2de68:	683b      	ldr	r3, [r7, #0]
   2de6a:	681b      	ldr	r3, [r3, #0]
   2de6c:	2b00      	cmp	r3, #0
   2de6e:	f000 8086 	beq.w	2df7e <xTaskIncrementTick.part.0+0x132>
    BaseType_t xSwitchRequired = pdFALSE;
   2de72:	f04f 0e00 	mov.w	lr, #0
                    prvAddTaskToReadyList( pxTCB );
   2de76:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 2dfa4 <xTaskIncrementTick.part.0+0x158>
   2de7a:	4d45      	ldr	r5, [pc, #276]	@ (2df90 <xTaskIncrementTick.part.0+0x144>)
   2de7c:	9201      	str	r2, [sp, #4]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   2de7e:	46f0      	mov	r8, lr
   2de80:	46b3      	mov	fp, r6
   2de82:	e043      	b.n	2df0c <xTaskIncrementTick.part.0+0xc0>
   2de84:	e9d3 2602 	ldrd	r2, r6, [r3, #8]
   2de88:	6958      	ldr	r0, [r3, #20]
   2de8a:	6096      	str	r6, [r2, #8]
   2de8c:	6072      	str	r2, [r6, #4]
   2de8e:	6842      	ldr	r2, [r0, #4]
   2de90:	428a      	cmp	r2, r1
   2de92:	6802      	ldr	r2, [r0, #0]
   2de94:	bf08      	it	eq
   2de96:	6046      	streq	r6, [r0, #4]
   2de98:	3a01      	subs	r2, #1
   2de9a:	f8c3 8014 	str.w	r8, [r3, #20]
   2de9e:	6002      	str	r2, [r0, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   2dea0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
   2dea2:	b160      	cbz	r0, 2debe <xTaskIncrementTick.part.0+0x72>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   2dea4:	e9d3 2607 	ldrd	r2, r6, [r3, #28]
   2dea8:	6096      	str	r6, [r2, #8]
   2deaa:	6072      	str	r2, [r6, #4]
   2deac:	6842      	ldr	r2, [r0, #4]
   2deae:	42a2      	cmp	r2, r4
   2deb0:	6802      	ldr	r2, [r0, #0]
   2deb2:	bf08      	it	eq
   2deb4:	6046      	streq	r6, [r0, #4]
   2deb6:	3a01      	subs	r2, #1
   2deb8:	f8c3 8028 	str.w	r8, [r3, #40]	@ 0x28
   2debc:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
   2debe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   2dec0:	f8d9 4000 	ldr.w	r4, [r9]
   2dec4:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   2dec8:	eb05 0c80 	add.w	ip, r5, r0, lsl #2
   2decc:	42a2      	cmp	r2, r4
   2dece:	f8dc 6004 	ldr.w	r6, [ip, #4]
   2ded2:	bf88      	it	hi
   2ded4:	f8c9 2000 	strhi.w	r2, [r9]
   2ded8:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
   2dedc:	f8d6 a008 	ldr.w	sl, [r6, #8]
   2dee0:	609e      	str	r6, [r3, #8]
   2dee2:	3401      	adds	r4, #1
   2dee4:	f8c3 a00c 	str.w	sl, [r3, #12]
   2dee8:	f8ca 1004 	str.w	r1, [sl, #4]
   2deec:	60b1      	str	r1, [r6, #8]
   2deee:	f8c3 c014 	str.w	ip, [r3, #20]
   2def2:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   2def6:	4b27      	ldr	r3, [pc, #156]	@ (2df94 <xTaskIncrementTick.part.0+0x148>)
   2def8:	6819      	ldr	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2defa:	683b      	ldr	r3, [r7, #0]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
   2defc:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2defe:	681b      	ldr	r3, [r3, #0]
                            xSwitchRequired = pdTRUE;
   2df00:	428a      	cmp	r2, r1
   2df02:	bf88      	it	hi
   2df04:	f04f 0e01 	movhi.w	lr, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2df08:	2b00      	cmp	r3, #0
   2df0a:	d033      	beq.n	2df74 <xTaskIncrementTick.part.0+0x128>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2df0c:	683b      	ldr	r3, [r7, #0]
   2df0e:	68db      	ldr	r3, [r3, #12]
   2df10:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   2df12:	6858      	ldr	r0, [r3, #4]
                    if( xConstTickCount < xItemValue )
   2df14:	4583      	cmp	fp, r0
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   2df16:	f103 0104 	add.w	r1, r3, #4
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   2df1a:	f103 0418 	add.w	r4, r3, #24
                    if( xConstTickCount < xItemValue )
   2df1e:	d2b1      	bcs.n	2de84 <xTaskIncrementTick.part.0+0x38>
                        xNextTaskUnblockTime = xItemValue;
   2df20:	9a01      	ldr	r2, [sp, #4]
   2df22:	6010      	str	r0, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
   2df24:	e006      	b.n	2df34 <xTaskIncrementTick.part.0+0xe8>
            taskSWITCH_DELAYED_LISTS();
   2df26:	4b19      	ldr	r3, [pc, #100]	@ (2df8c <xTaskIncrementTick.part.0+0x140>)
   2df28:	681a      	ldr	r2, [r3, #0]
   2df2a:	6812      	ldr	r2, [r2, #0]
   2df2c:	b15a      	cbz	r2, 2df46 <xTaskIncrementTick.part.0+0xfa>
   2df2e:	e7fe      	b.n	2df2e <xTaskIncrementTick.part.0+0xe2>
    BaseType_t xSwitchRequired = pdFALSE;
   2df30:	f04f 0e00 	mov.w	lr, #0
            if( xYieldPending != pdFALSE )
   2df34:	4b18      	ldr	r3, [pc, #96]	@ (2df98 <xTaskIncrementTick.part.0+0x14c>)
   2df36:	681b      	ldr	r3, [r3, #0]
                xSwitchRequired = pdTRUE;
   2df38:	2b00      	cmp	r3, #0
}
   2df3a:	bf0c      	ite	eq
   2df3c:	4670      	moveq	r0, lr
   2df3e:	2001      	movne	r0, #1
   2df40:	b003      	add	sp, #12
   2df42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            taskSWITCH_DELAYED_LISTS();
   2df46:	4a15      	ldr	r2, [pc, #84]	@ (2df9c <xTaskIncrementTick.part.0+0x150>)
   2df48:	6818      	ldr	r0, [r3, #0]
   2df4a:	6811      	ldr	r1, [r2, #0]
   2df4c:	6019      	str	r1, [r3, #0]
   2df4e:	4914      	ldr	r1, [pc, #80]	@ (2dfa0 <xTaskIncrementTick.part.0+0x154>)
   2df50:	6010      	str	r0, [r2, #0]
   2df52:	680a      	ldr	r2, [r1, #0]
   2df54:	3201      	adds	r2, #1
   2df56:	600a      	str	r2, [r1, #0]
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2df58:	681a      	ldr	r2, [r3, #0]
   2df5a:	6812      	ldr	r2, [r2, #0]
   2df5c:	b922      	cbnz	r2, 2df68 <xTaskIncrementTick.part.0+0x11c>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
   2df5e:	4a0a      	ldr	r2, [pc, #40]	@ (2df88 <xTaskIncrementTick.part.0+0x13c>)
   2df60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   2df64:	6013      	str	r3, [r2, #0]
   2df66:	e77b      	b.n	2de60 <xTaskIncrementTick.part.0+0x14>
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
   2df68:	681b      	ldr	r3, [r3, #0]
   2df6a:	4a07      	ldr	r2, [pc, #28]	@ (2df88 <xTaskIncrementTick.part.0+0x13c>)
   2df6c:	68db      	ldr	r3, [r3, #12]
   2df6e:	681b      	ldr	r3, [r3, #0]
   2df70:	6013      	str	r3, [r2, #0]
    }
}
   2df72:	e775      	b.n	2de60 <xTaskIncrementTick.part.0+0x14>
   2df74:	9a01      	ldr	r2, [sp, #4]
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2df76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   2df7a:	6013      	str	r3, [r2, #0]
                    break;
   2df7c:	e7da      	b.n	2df34 <xTaskIncrementTick.part.0+0xe8>
    BaseType_t xSwitchRequired = pdFALSE;
   2df7e:	469e      	mov	lr, r3
   2df80:	e7f9      	b.n	2df76 <xTaskIncrementTick.part.0+0x12a>
   2df82:	bf00      	nop
   2df84:	10052ea8 	.word	0x10052ea8
   2df88:	10052e94 	.word	0x10052e94
   2df8c:	10052ec8 	.word	0x10052ec8
   2df90:	10052ecc 	.word	0x10052ecc
   2df94:	10052f1c 	.word	0x10052f1c
   2df98:	10052e9c 	.word	0x10052e9c
   2df9c:	10052ec4 	.word	0x10052ec4
   2dfa0:	10052e98 	.word	0x10052e98
   2dfa4:	10052ea4 	.word	0x10052ea4

0002dfa8 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
   2dfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        --uxSchedulerSuspended;
   2dfac:	4e5b      	ldr	r6, [pc, #364]	@ (2e11c <xTaskResumeAll.part.0+0x174>)
BaseType_t xTaskResumeAll( void )
   2dfae:	b083      	sub	sp, #12
    taskENTER_CRITICAL();
   2dfb0:	f001 fe08 	bl	2fbc4 <vPortEnterCritical>
        --uxSchedulerSuspended;
   2dfb4:	6833      	ldr	r3, [r6, #0]
   2dfb6:	3b01      	subs	r3, #1
   2dfb8:	6033      	str	r3, [r6, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   2dfba:	6837      	ldr	r7, [r6, #0]
   2dfbc:	2f00      	cmp	r7, #0
   2dfbe:	f040 809e 	bne.w	2e0fe <xTaskResumeAll.part.0+0x156>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   2dfc2:	4b57      	ldr	r3, [pc, #348]	@ (2e120 <xTaskResumeAll.part.0+0x178>)
   2dfc4:	681b      	ldr	r3, [r3, #0]
   2dfc6:	2b00      	cmp	r3, #0
   2dfc8:	f000 8099 	beq.w	2e0fe <xTaskResumeAll.part.0+0x156>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   2dfcc:	f8df e168 	ldr.w	lr, [pc, #360]	@ 2e138 <xTaskResumeAll.part.0+0x190>
   2dfd0:	f8de 3000 	ldr.w	r3, [lr]
   2dfd4:	2b00      	cmp	r3, #0
   2dfd6:	f000 809e 	beq.w	2e116 <xTaskResumeAll.part.0+0x16e>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2dfda:	f8de 300c 	ldr.w	r3, [lr, #12]
                    prvAddTaskToReadyList( pxTCB );
   2dfde:	4a51      	ldr	r2, [pc, #324]	@ (2e124 <xTaskResumeAll.part.0+0x17c>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
   2dfe0:	68db      	ldr	r3, [r3, #12]
   2dfe2:	4c51      	ldr	r4, [pc, #324]	@ (2e128 <xTaskResumeAll.part.0+0x180>)
                    prvAddTaskToReadyList( pxTCB );
   2dfe4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
   2dfe6:	9401      	str	r4, [sp, #4]
   2dfe8:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   2dfec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   2dff0:	6a98      	ldr	r0, [r3, #40]	@ 0x28
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   2dff2:	6959      	ldr	r1, [r3, #20]
   2dff4:	f8df c144 	ldr.w	ip, [pc, #324]	@ 2e13c <xTaskResumeAll.part.0+0x194>
   2dff8:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 2e140 <xTaskResumeAll.part.0+0x198>
                        xYieldPending = pdTRUE;
   2dffc:	9700      	str	r7, [sp, #0]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   2dffe:	f103 0918 	add.w	r9, r3, #24
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   2e002:	1d1c      	adds	r4, r3, #4
   2e004:	e008      	b.n	2e018 <xTaskResumeAll.part.0+0x70>
                        xYieldPending = pdTRUE;
   2e006:	9901      	ldr	r1, [sp, #4]
   2e008:	2001      	movs	r0, #1
   2e00a:	6008      	str	r0, [r1, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   2e00c:	f8de 1000 	ldr.w	r1, [lr]
   2e010:	2900      	cmp	r1, #0
   2e012:	d03e      	beq.n	2e092 <xTaskResumeAll.part.0+0xea>
BaseType_t xTaskResumeAll( void )
   2e014:	4611      	mov	r1, r2
   2e016:	2000      	movs	r0, #0
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
   2e018:	6847      	ldr	r7, [r0, #4]
   2e01a:	e9d3 ba07 	ldrd	fp, sl, [r3, #28]
   2e01e:	454f      	cmp	r7, r9
   2e020:	f8cb a008 	str.w	sl, [fp, #8]
   2e024:	f8ca b004 	str.w	fp, [sl, #4]
   2e028:	bf08      	it	eq
   2e02a:	f8c0 a004 	streq.w	sl, [r0, #4]
   2e02e:	f8d0 a000 	ldr.w	sl, [r0]
   2e032:	9f00      	ldr	r7, [sp, #0]
   2e034:	629f      	str	r7, [r3, #40]	@ 0x28
   2e036:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
   2e03a:	f8c0 a000 	str.w	sl, [r0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
   2e03e:	e9d3 0a02 	ldrd	r0, sl, [r3, #8]
   2e042:	f8c0 a008 	str.w	sl, [r0, #8]
   2e046:	f8ca 0004 	str.w	r0, [sl, #4]
   2e04a:	6848      	ldr	r0, [r1, #4]
   2e04c:	42a0      	cmp	r0, r4
   2e04e:	6808      	ldr	r0, [r1, #0]
   2e050:	bf08      	it	eq
   2e052:	f8c1 a004 	streq.w	sl, [r1, #4]
   2e056:	3801      	subs	r0, #1
   2e058:	6008      	str	r0, [r1, #0]
                    prvAddTaskToReadyList( pxTCB );
   2e05a:	f8dc 1000 	ldr.w	r1, [ip]
   2e05e:	6850      	ldr	r0, [r2, #4]
   2e060:	6098      	str	r0, [r3, #8]
   2e062:	42a9      	cmp	r1, r5
   2e064:	bf38      	it	cc
   2e066:	f8cc 5000 	strcc.w	r5, [ip]
   2e06a:	6811      	ldr	r1, [r2, #0]
   2e06c:	f8d0 a008 	ldr.w	sl, [r0, #8]
   2e070:	f8c3 a00c 	str.w	sl, [r3, #12]
   2e074:	3101      	adds	r1, #1
   2e076:	f8ca 4004 	str.w	r4, [sl, #4]
   2e07a:	6084      	str	r4, [r0, #8]
   2e07c:	615a      	str	r2, [r3, #20]
   2e07e:	6011      	str	r1, [r2, #0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   2e080:	f8d8 1000 	ldr.w	r1, [r8]
   2e084:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
   2e086:	42a9      	cmp	r1, r5
   2e088:	d9bd      	bls.n	2e006 <xTaskResumeAll.part.0+0x5e>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   2e08a:	f8de 1000 	ldr.w	r1, [lr]
   2e08e:	2900      	cmp	r1, #0
   2e090:	d1c0      	bne.n	2e014 <xTaskResumeAll.part.0+0x6c>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   2e092:	4b26      	ldr	r3, [pc, #152]	@ (2e12c <xTaskResumeAll.part.0+0x184>)
   2e094:	681a      	ldr	r2, [r3, #0]
   2e096:	6812      	ldr	r2, [r2, #0]
   2e098:	2a00      	cmp	r2, #0
   2e09a:	d037      	beq.n	2e10c <xTaskResumeAll.part.0+0x164>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
   2e09c:	681a      	ldr	r2, [r3, #0]
   2e09e:	4b24      	ldr	r3, [pc, #144]	@ (2e130 <xTaskResumeAll.part.0+0x188>)
   2e0a0:	68d2      	ldr	r2, [r2, #12]
   2e0a2:	6812      	ldr	r2, [r2, #0]
   2e0a4:	601a      	str	r2, [r3, #0]
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
   2e0a6:	4d23      	ldr	r5, [pc, #140]	@ (2e134 <xTaskResumeAll.part.0+0x18c>)
   2e0a8:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
   2e0aa:	b1a4      	cbz	r4, 2e0d6 <xTaskResumeAll.part.0+0x12e>
                                xYieldPending = pdTRUE;
   2e0ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
   2e0b0:	2701      	movs	r7, #1
   2e0b2:	e006      	b.n	2e0c2 <xTaskResumeAll.part.0+0x11a>
   2e0b4:	f7ff feca 	bl	2de4c <xTaskIncrementTick.part.0>
                            if( xTaskIncrementTick() != pdFALSE )
   2e0b8:	b108      	cbz	r0, 2e0be <xTaskResumeAll.part.0+0x116>
                                xYieldPending = pdTRUE;
   2e0ba:	f8c8 7000 	str.w	r7, [r8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
   2e0be:	3c01      	subs	r4, #1
   2e0c0:	d008      	beq.n	2e0d4 <xTaskResumeAll.part.0+0x12c>
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   2e0c2:	6833      	ldr	r3, [r6, #0]
   2e0c4:	2b00      	cmp	r3, #0
   2e0c6:	d0f5      	beq.n	2e0b4 <xTaskResumeAll.part.0+0x10c>
        ++xPendedTicks;
   2e0c8:	682b      	ldr	r3, [r5, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
   2e0ca:	3c01      	subs	r4, #1
        ++xPendedTicks;
   2e0cc:	f103 0301 	add.w	r3, r3, #1
   2e0d0:	602b      	str	r3, [r5, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
   2e0d2:	d1f6      	bne.n	2e0c2 <xTaskResumeAll.part.0+0x11a>
                        xPendedTicks = 0;
   2e0d4:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
   2e0d6:	9b01      	ldr	r3, [sp, #4]
   2e0d8:	681b      	ldr	r3, [r3, #0]
   2e0da:	b183      	cbz	r3, 2e0fe <xTaskResumeAll.part.0+0x156>
                    taskYIELD_IF_USING_PREEMPTION();
   2e0dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2e0e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
   2e0e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
   2e0e8:	f3bf 8f4f 	dsb	sy
   2e0ec:	f3bf 8f6f 	isb	sy
    taskEXIT_CRITICAL();
   2e0f0:	f001 fd82 	bl	2fbf8 <vPortExitCritical>
                        xAlreadyYielded = pdTRUE;
   2e0f4:	2401      	movs	r4, #1
}
   2e0f6:	4620      	mov	r0, r4
   2e0f8:	b003      	add	sp, #12
   2e0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    taskEXIT_CRITICAL();
   2e0fe:	f001 fd7b 	bl	2fbf8 <vPortExitCritical>
    BaseType_t xAlreadyYielded = pdFALSE;
   2e102:	2400      	movs	r4, #0
}
   2e104:	4620      	mov	r0, r4
   2e106:	b003      	add	sp, #12
   2e108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xNextTaskUnblockTime = portMAX_DELAY;
   2e10c:	4b08      	ldr	r3, [pc, #32]	@ (2e130 <xTaskResumeAll.part.0+0x188>)
   2e10e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   2e112:	601a      	str	r2, [r3, #0]
   2e114:	e7c7      	b.n	2e0a6 <xTaskResumeAll.part.0+0xfe>
   2e116:	4b04      	ldr	r3, [pc, #16]	@ (2e128 <xTaskResumeAll.part.0+0x180>)
   2e118:	9301      	str	r3, [sp, #4]
   2e11a:	e7c4      	b.n	2e0a6 <xTaskResumeAll.part.0+0xfe>
   2e11c:	10052e90 	.word	0x10052e90
   2e120:	10052eac 	.word	0x10052eac
   2e124:	10052ecc 	.word	0x10052ecc
   2e128:	10052e9c 	.word	0x10052e9c
   2e12c:	10052ec8 	.word	0x10052ec8
   2e130:	10052e94 	.word	0x10052e94
   2e134:	10052ea0 	.word	0x10052ea0
   2e138:	10052eb0 	.word	0x10052eb0
   2e13c:	10052ea4 	.word	0x10052ea4
   2e140:	10052f1c 	.word	0x10052f1c

0002e144 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
   2e144:	4a02      	ldr	r2, [pc, #8]	@ (2e150 <vTaskSuspendAll+0xc>)
   2e146:	6813      	ldr	r3, [r2, #0]
   2e148:	3301      	adds	r3, #1
   2e14a:	6013      	str	r3, [r2, #0]
}
   2e14c:	4770      	bx	lr
   2e14e:	bf00      	nop
   2e150:	10052e90 	.word	0x10052e90

0002e154 <xTaskResumeAll>:
    configASSERT( uxSchedulerSuspended );
   2e154:	4b02      	ldr	r3, [pc, #8]	@ (2e160 <xTaskResumeAll+0xc>)
   2e156:	681b      	ldr	r3, [r3, #0]
   2e158:	b903      	cbnz	r3, 2e15c <xTaskResumeAll+0x8>
   2e15a:	e7fe      	b.n	2e15a <xTaskResumeAll+0x6>
   2e15c:	f7ff bf24 	b.w	2dfa8 <xTaskResumeAll.part.0>
   2e160:	10052e90 	.word	0x10052e90

0002e164 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   2e164:	4b05      	ldr	r3, [pc, #20]	@ (2e17c <xTaskIncrementTick+0x18>)
   2e166:	681b      	ldr	r3, [r3, #0]
   2e168:	b90b      	cbnz	r3, 2e16e <xTaskIncrementTick+0xa>
   2e16a:	f7ff be6f 	b.w	2de4c <xTaskIncrementTick.part.0>
        ++xPendedTicks;
   2e16e:	4a04      	ldr	r2, [pc, #16]	@ (2e180 <xTaskIncrementTick+0x1c>)
   2e170:	6813      	ldr	r3, [r2, #0]
   2e172:	3301      	adds	r3, #1
}
   2e174:	2000      	movs	r0, #0
        ++xPendedTicks;
   2e176:	6013      	str	r3, [r2, #0]
}
   2e178:	4770      	bx	lr
   2e17a:	bf00      	nop
   2e17c:	10052e90 	.word	0x10052e90
   2e180:	10052ea0 	.word	0x10052ea0

0002e184 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   2e184:	4b04      	ldr	r3, [pc, #16]	@ (2e198 <vTaskSwitchContext+0x14>)
   2e186:	681b      	ldr	r3, [r3, #0]
   2e188:	b11b      	cbz	r3, 2e192 <vTaskSwitchContext+0xe>
        xYieldPending = pdTRUE;
   2e18a:	4b04      	ldr	r3, [pc, #16]	@ (2e19c <vTaskSwitchContext+0x18>)
   2e18c:	2201      	movs	r2, #1
   2e18e:	601a      	str	r2, [r3, #0]
}
   2e190:	4770      	bx	lr
   2e192:	f7ff bdfb 	b.w	2dd8c <vTaskSwitchContext.part.0>
   2e196:	bf00      	nop
   2e198:	10052e90 	.word	0x10052e90
   2e19c:	10052e9c 	.word	0x10052e9c

0002e1a0 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
   2e1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e1a4:	4604      	mov	r4, r0
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
   2e1a6:	f000 fcd1 	bl	2eb4c <tud_mounted>
   2e1aa:	b910      	cbnz	r0, 2e1b2 <tud_cdc_n_write_flush+0x12>
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
   2e1ac:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
  }
}
   2e1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e1b2:	f000 fcd3 	bl	2eb5c <tud_suspended>
   2e1b6:	4606      	mov	r6, r0
   2e1b8:	2800      	cmp	r0, #0
   2e1ba:	d1f7      	bne.n	2e1ac <tud_cdc_n_write_flush+0xc>
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
   2e1bc:	f640 0338 	movw	r3, #2104	@ 0x838
   2e1c0:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 2e228 <tud_cdc_n_write_flush+0x88>
   2e1c4:	fb03 f404 	mul.w	r4, r3, r4
   2e1c8:	f104 0520 	add.w	r5, r4, #32
   2e1cc:	4445      	add	r5, r8
   2e1ce:	4628      	mov	r0, r5
   2e1d0:	f000 faac 	bl	2e72c <tu_fifo_count>
   2e1d4:	2800      	cmp	r0, #0
   2e1d6:	d0e9      	beq.n	2e1ac <tud_cdc_n_write_flush+0xc>
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
   2e1d8:	eb08 0704 	add.w	r7, r8, r4
   2e1dc:	4630      	mov	r0, r6
   2e1de:	78b9      	ldrb	r1, [r7, #2]
   2e1e0:	f001 fa34 	bl	2f64c <usbd_edpt_claim>
   2e1e4:	2800      	cmp	r0, #0
   2e1e6:	d0e1      	beq.n	2e1ac <tud_cdc_n_write_flush+0xc>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
   2e1e8:	f504 6487 	add.w	r4, r4, #1080	@ 0x438
   2e1ec:	4444      	add	r4, r8
   2e1ee:	4628      	mov	r0, r5
   2e1f0:	4621      	mov	r1, r4
   2e1f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
   2e1f6:	f000 fb1f 	bl	2e838 <tu_fifo_read_n>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
   2e1fa:	78b9      	ldrb	r1, [r7, #2]
  if ( count )
   2e1fc:	4605      	mov	r5, r0
   2e1fe:	b178      	cbz	r0, 2e220 <tud_cdc_n_write_flush+0x80>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
   2e200:	4603      	mov	r3, r0
   2e202:	4622      	mov	r2, r4
   2e204:	4630      	mov	r0, r6
   2e206:	f001 fa3d 	bl	2f684 <usbd_edpt_xfer>
   2e20a:	b938      	cbnz	r0, 2e21c <tud_cdc_n_write_flush+0x7c>
   2e20c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2e210:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2e214:	07db      	lsls	r3, r3, #31
   2e216:	d5c9      	bpl.n	2e1ac <tud_cdc_n_write_flush+0xc>
   2e218:	be00      	bkpt	0x0000
   2e21a:	e7c7      	b.n	2e1ac <tud_cdc_n_write_flush+0xc>
    return count;
   2e21c:	4628      	mov	r0, r5
   2e21e:	e7c6      	b.n	2e1ae <tud_cdc_n_write_flush+0xe>
    usbd_edpt_release(rhport, p_cdc->ep_in);
   2e220:	f001 fa22 	bl	2f668 <usbd_edpt_release>
    return 0;
   2e224:	e7c2      	b.n	2e1ac <tud_cdc_n_write_flush+0xc>
   2e226:	bf00      	nop
   2e228:	10052f20 	.word	0x10052f20

0002e22c <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
   2e22c:	b5f0      	push	{r4, r5, r6, r7, lr}
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
   2e22e:	4c18      	ldr	r4, [pc, #96]	@ (2e290 <cdcd_init+0x64>)
{
   2e230:	b083      	sub	sp, #12
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
   2e232:	f640 0238 	movw	r2, #2104	@ 0x838
   2e236:	2100      	movs	r1, #0
   2e238:	4620      	mov	r0, r4
   2e23a:	f7f8 fd43 	bl	26cc4 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
  
    p_cdc->wanted_char = (char) -1;
   2e23e:	23ff      	movs	r3, #255	@ 0xff
   2e240:	7163      	strb	r3, [r4, #5]
    
    // NS override of ff_buf, defined in neuralspot/ns_usb
    p_cdc->rx_ff_buf = ns_usb_get_rx_buffer();
   2e242:	f7fe ffe7 	bl	2d214 <ns_usb_get_rx_buffer>
   2e246:	6320      	str	r0, [r4, #48]	@ 0x30
    p_cdc->tx_ff_buf = ns_usb_get_tx_buffer();
   2e248:	f7fe ffea 	bl	2d220 <ns_usb_get_tx_buffer>

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
   2e24c:	f44f 4342 	mov.w	r3, #49664	@ 0xc200
   2e250:	2501      	movs	r5, #1
   2e252:	2600      	movs	r6, #0
   2e254:	80e3      	strh	r3, [r4, #6]
    p_cdc->line_coding.stop_bits = 0;
    p_cdc->line_coding.parity    = 0;
    p_cdc->line_coding.data_bits = 8;
   2e256:	2308      	movs	r3, #8

    // Config RX fifo
    // tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(ns_cdc_rx_ff_buf), 1, false);
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, ns_get_cdc_rx_bufferLength(), 1, false);
   2e258:	6b27      	ldr	r7, [r4, #48]	@ 0x30
    p_cdc->line_coding.stop_bits = 0;
   2e25a:	8166      	strh	r6, [r4, #10]
    p_cdc->line_coding.data_bits = 8;
   2e25c:	7323      	strb	r3, [r4, #12]
    p_cdc->tx_ff_buf = ns_usb_get_tx_buffer();
   2e25e:	6360      	str	r0, [r4, #52]	@ 0x34
    p_cdc->line_coding.bit_rate  = 115200;
   2e260:	8125      	strh	r5, [r4, #8]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, ns_get_cdc_rx_bufferLength(), 1, false);
   2e262:	f7fe ffcb 	bl	2d1fc <ns_get_cdc_rx_bufferLength>
   2e266:	462b      	mov	r3, r5
   2e268:	b282      	uxth	r2, r0
   2e26a:	4639      	mov	r1, r7
   2e26c:	9600      	str	r6, [sp, #0]
   2e26e:	f104 0010 	add.w	r0, r4, #16
   2e272:	f000 fa3d 	bl	2e6f0 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    // tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(ns_cdc_tx_ff_buf), 1, true);
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, ns_get_cdc_tx_bufferLength(), 1, true);
   2e276:	6b66      	ldr	r6, [r4, #52]	@ 0x34
   2e278:	f7fe ffc6 	bl	2d208 <ns_get_cdc_tx_bufferLength>
   2e27c:	9500      	str	r5, [sp, #0]
   2e27e:	b282      	uxth	r2, r0
   2e280:	462b      	mov	r3, r5
   2e282:	4631      	mov	r1, r6
   2e284:	f104 0020 	add.w	r0, r4, #32
   2e288:	f000 fa32 	bl	2e6f0 <tu_fifo_config>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
#endif
  }
}
   2e28c:	b003      	add	sp, #12
   2e28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e290:	10052f20 	.word	0x10052f20

0002e294 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
   2e294:	b510      	push	{r4, lr}

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
   2e296:	4c09      	ldr	r4, [pc, #36]	@ (2e2bc <cdcd_reset+0x28>)
   2e298:	2300      	movs	r3, #0
   2e29a:	6023      	str	r3, [r4, #0]
   2e29c:	7123      	strb	r3, [r4, #4]
    tu_fifo_clear(&p_cdc->rx_ff);
   2e29e:	f104 0010 	add.w	r0, r4, #16
    tu_fifo_clear(&p_cdc->tx_ff);
   2e2a2:	3420      	adds	r4, #32
    tu_fifo_clear(&p_cdc->rx_ff);
   2e2a4:	f000 fbde 	bl	2ea64 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
   2e2a8:	4620      	mov	r0, r4
   2e2aa:	f000 fbdb 	bl	2ea64 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
   2e2ae:	4620      	mov	r0, r4
   2e2b0:	2101      	movs	r1, #1
  }
}
   2e2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
   2e2b6:	f000 bbe1 	b.w	2ea7c <tu_fifo_set_overwritable>
   2e2ba:	bf00      	nop
   2e2bc:	10052f20 	.word	0x10052f20

0002e2c0 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
   2e2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
   2e2c4:	794b      	ldrb	r3, [r1, #5]
   2e2c6:	2b02      	cmp	r3, #2
{
   2e2c8:	b082      	sub	sp, #8
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
   2e2ca:	d004      	beq.n	2e2d6 <cdcd_open+0x16>
   2e2cc:	2500      	movs	r5, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
   2e2ce:	4628      	mov	r0, r5
   2e2d0:	b002      	add	sp, #8
   2e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
   2e2d6:	798b      	ldrb	r3, [r1, #6]
   2e2d8:	2b02      	cmp	r3, #2
   2e2da:	d1f7      	bne.n	2e2cc <cdcd_open+0xc>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
   2e2dc:	4f33      	ldr	r7, [pc, #204]	@ (2e3ac <cdcd_open+0xec>)
   2e2de:	78bb      	ldrb	r3, [r7, #2]
   2e2e0:	2b00      	cmp	r3, #0
   2e2e2:	d148      	bne.n	2e376 <cdcd_open+0xb6>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
   2e2e4:	788b      	ldrb	r3, [r1, #2]
   2e2e6:	703b      	strb	r3, [r7, #0]

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
   2e2e8:	780b      	ldrb	r3, [r1, #0]
   2e2ea:	18cc      	adds	r4, r1, r3
   2e2ec:	4606      	mov	r6, r0
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
   2e2ee:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
   2e2f0:	2924      	cmp	r1, #36	@ 0x24
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
   2e2f2:	f04f 0509 	mov.w	r5, #9
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
   2e2f6:	d10b      	bne.n	2e310 <cdcd_open+0x50>
   2e2f8:	2a08      	cmp	r2, #8
   2e2fa:	d802      	bhi.n	2e302 <cdcd_open+0x42>
   2e2fc:	e021      	b.n	2e342 <cdcd_open+0x82>
   2e2fe:	42aa      	cmp	r2, r5
   2e300:	d31f      	bcc.n	2e342 <cdcd_open+0x82>
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
   2e302:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
   2e304:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
   2e306:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
   2e308:	7861      	ldrb	r1, [r4, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
   2e30a:	2924      	cmp	r1, #36	@ 0x24
    drv_len += tu_desc_len(p_desc);
   2e30c:	b29d      	uxth	r5, r3
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
   2e30e:	d0f6      	beq.n	2e2fe <cdcd_open+0x3e>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
   2e310:	2905      	cmp	r1, #5
   2e312:	d038      	beq.n	2e386 <cdcd_open+0xc6>
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
   2e314:	2904      	cmp	r1, #4
   2e316:	d114      	bne.n	2e342 <cdcd_open+0x82>
   2e318:	7963      	ldrb	r3, [r4, #5]
   2e31a:	2b0a      	cmp	r3, #10
   2e31c:	d111      	bne.n	2e342 <cdcd_open+0x82>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
   2e31e:	4b24      	ldr	r3, [pc, #144]	@ (2e3b0 <cdcd_open+0xf0>)
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
   2e320:	f894 8000 	ldrb.w	r8, [r4]
   2e324:	9301      	str	r3, [sp, #4]
   2e326:	3301      	adds	r3, #1
   2e328:	9300      	str	r3, [sp, #0]
   2e32a:	2302      	movs	r3, #2
   2e32c:	4630      	mov	r0, r6
   2e32e:	eb04 0108 	add.w	r1, r4, r8
   2e332:	461a      	mov	r2, r3
   2e334:	f001 f918 	bl	2f568 <usbd_open_edpt_pair>
   2e338:	b1e8      	cbz	r0, 2e376 <cdcd_open+0xb6>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
   2e33a:	350e      	adds	r5, #14
   2e33c:	fa18 f585 	uxtah	r5, r8, r5
   2e340:	b2ad      	uxth	r5, r5
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
   2e342:	481c      	ldr	r0, [pc, #112]	@ (2e3b4 <cdcd_open+0xf4>)
   2e344:	f000 fa0e 	bl	2e764 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
   2e348:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
   2e34c:	d3bf      	bcc.n	2e2ce <cdcd_open+0xe>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
   2e34e:	78f9      	ldrb	r1, [r7, #3]
   2e350:	2000      	movs	r0, #0
   2e352:	f001 f97b 	bl	2f64c <usbd_edpt_claim>
   2e356:	2800      	cmp	r0, #0
   2e358:	d0b9      	beq.n	2e2ce <cdcd_open+0xe>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
   2e35a:	4816      	ldr	r0, [pc, #88]	@ (2e3b4 <cdcd_open+0xf4>)
   2e35c:	f000 fa02 	bl	2e764 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
   2e360:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
   2e364:	d31d      	bcc.n	2e3a2 <cdcd_open+0xe2>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
   2e366:	4a14      	ldr	r2, [pc, #80]	@ (2e3b8 <cdcd_open+0xf8>)
   2e368:	78f9      	ldrb	r1, [r7, #3]
   2e36a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
   2e36e:	2000      	movs	r0, #0
   2e370:	f001 f988 	bl	2f684 <usbd_edpt_xfer>
   2e374:	e7ab      	b.n	2e2ce <cdcd_open+0xe>
  TU_ASSERT(p_cdc, 0);
   2e376:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2e37a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2e37e:	07db      	lsls	r3, r3, #31
   2e380:	d5a4      	bpl.n	2e2cc <cdcd_open+0xc>
   2e382:	be00      	bkpt	0x0000
   2e384:	e7a2      	b.n	2e2cc <cdcd_open+0xc>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
   2e386:	4621      	mov	r1, r4
   2e388:	4630      	mov	r0, r6
   2e38a:	f001 f93b 	bl	2f604 <usbd_edpt_open>
   2e38e:	2800      	cmp	r0, #0
   2e390:	d0f1      	beq.n	2e376 <cdcd_open+0xb6>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
   2e392:	78a3      	ldrb	r3, [r4, #2]
   2e394:	707b      	strb	r3, [r7, #1]
   2e396:	7823      	ldrb	r3, [r4, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
   2e398:	441c      	add	r4, r3
    drv_len += tu_desc_len(p_desc);
   2e39a:	442b      	add	r3, r5
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
   2e39c:	7861      	ldrb	r1, [r4, #1]
   2e39e:	b29d      	uxth	r5, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
   2e3a0:	e7b8      	b.n	2e314 <cdcd_open+0x54>
    usbd_edpt_release(rhport, p_cdc->ep_out);
   2e3a2:	78f9      	ldrb	r1, [r7, #3]
   2e3a4:	2000      	movs	r0, #0
   2e3a6:	f001 f95f 	bl	2f668 <usbd_edpt_release>
   2e3aa:	e790      	b.n	2e2ce <cdcd_open+0xe>
   2e3ac:	10052f20 	.word	0x10052f20
   2e3b0:	10052f22 	.word	0x10052f22
   2e3b4:	10052f30 	.word	0x10052f30
   2e3b8:	10052f58 	.word	0x10052f58

0002e3bc <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
   2e3bc:	b538      	push	{r3, r4, r5, lr}
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
   2e3be:	7813      	ldrb	r3, [r2, #0]
   2e3c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
   2e3c4:	2b20      	cmp	r3, #32
   2e3c6:	d110      	bne.n	2e3ea <cdcd_control_xfer_cb+0x2e>
  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;

    if ( p_cdc->itf_num == request->wIndex ) break;
   2e3c8:	4694      	mov	ip, r2
   2e3ca:	4a28      	ldr	r2, [pc, #160]	@ (2e46c <cdcd_control_xfer_cb+0xb0>)
   2e3cc:	f8bc 3004 	ldrh.w	r3, [ip, #4]
   2e3d0:	f892 e000 	ldrb.w	lr, [r2]
   2e3d4:	459e      	cmp	lr, r3
   2e3d6:	d108      	bne.n	2e3ea <cdcd_control_xfer_cb+0x2e>
  }

  switch ( request->bRequest )
   2e3d8:	f89c 3001 	ldrb.w	r3, [ip, #1]
   2e3dc:	3b20      	subs	r3, #32
   2e3de:	2b03      	cmp	r3, #3
   2e3e0:	d803      	bhi.n	2e3ea <cdcd_control_xfer_cb+0x2e>
   2e3e2:	e8df f003 	tbb	[pc, r3]
   2e3e6:	160a      	.short	0x160a
   2e3e8:	041e      	.short	0x041e
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
   2e3ea:	2000      	movs	r0, #0

    default: return false; // stall unsupported request
  }

  return true;
}
   2e3ec:	bd38      	pop	{r3, r4, r5, pc}
      if (stage == CONTROL_STAGE_SETUP)
   2e3ee:	2901      	cmp	r1, #1
   2e3f0:	d02f      	beq.n	2e452 <cdcd_control_xfer_cb+0x96>
      else if (stage == CONTROL_STAGE_ACK)
   2e3f2:	2903      	cmp	r1, #3
   2e3f4:	d031      	beq.n	2e45a <cdcd_control_xfer_cb+0x9e>
  return true;
   2e3f6:	2001      	movs	r0, #1
}
   2e3f8:	bd38      	pop	{r3, r4, r5, pc}
      if (stage == CONTROL_STAGE_SETUP)
   2e3fa:	2901      	cmp	r1, #1
   2e3fc:	d00b      	beq.n	2e416 <cdcd_control_xfer_cb+0x5a>
      else if ( stage == CONTROL_STAGE_ACK)
   2e3fe:	2903      	cmp	r1, #3
   2e400:	d1f9      	bne.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
   2e402:	4b1b      	ldr	r3, [pc, #108]	@ (2e470 <cdcd_control_xfer_cb+0xb4>)
   2e404:	2b00      	cmp	r3, #0
   2e406:	d0f6      	beq.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
   2e408:	491a      	ldr	r1, [pc, #104]	@ (2e474 <cdcd_control_xfer_cb+0xb8>)
   2e40a:	2000      	movs	r0, #0
   2e40c:	f3af 8000 	nop.w
   2e410:	e7f1      	b.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
      if (stage == CONTROL_STAGE_SETUP)
   2e412:	2901      	cmp	r1, #1
   2e414:	d1ef      	bne.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
   2e416:	4a17      	ldr	r2, [pc, #92]	@ (2e474 <cdcd_control_xfer_cb+0xb8>)
   2e418:	2307      	movs	r3, #7
   2e41a:	4661      	mov	r1, ip
   2e41c:	f001 f980 	bl	2f720 <tud_control_xfer>
   2e420:	e7e9      	b.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
      if (stage == CONTROL_STAGE_SETUP)
   2e422:	2901      	cmp	r1, #1
   2e424:	d015      	beq.n	2e452 <cdcd_control_xfer_cb+0x96>
      else if (stage == CONTROL_STAGE_ACK)
   2e426:	2903      	cmp	r1, #3
   2e428:	d1e5      	bne.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
        bool const dtr = tu_bit_test(request->wValue, 0);
   2e42a:	f8bc 4002 	ldrh.w	r4, [ip, #2]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
   2e42e:	4812      	ldr	r0, [pc, #72]	@ (2e478 <cdcd_control_xfer_cb+0xbc>)
        p_cdc->line_state = (uint8_t) request->wValue;
   2e430:	7114      	strb	r4, [r2, #4]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
   2e432:	f004 0501 	and.w	r5, r4, #1
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
   2e436:	f085 0101 	eor.w	r1, r5, #1
   2e43a:	f000 fb1f 	bl	2ea7c <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
   2e43e:	4b0f      	ldr	r3, [pc, #60]	@ (2e47c <cdcd_control_xfer_cb+0xc0>)
   2e440:	2b00      	cmp	r3, #0
   2e442:	d0d8      	beq.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
   2e444:	f3c4 0240 	ubfx	r2, r4, #1, #1
   2e448:	4629      	mov	r1, r5
   2e44a:	2000      	movs	r0, #0
   2e44c:	f3af 8000 	nop.w
   2e450:	e7d1      	b.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
        tud_control_status(rhport, request);
   2e452:	4661      	mov	r1, ip
   2e454:	f001 f94c 	bl	2f6f0 <tud_control_status>
   2e458:	e7cd      	b.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
   2e45a:	4b09      	ldr	r3, [pc, #36]	@ (2e480 <cdcd_control_xfer_cb+0xc4>)
   2e45c:	2b00      	cmp	r3, #0
   2e45e:	d0ca      	beq.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
   2e460:	f8bc 1002 	ldrh.w	r1, [ip, #2]
   2e464:	2000      	movs	r0, #0
   2e466:	f3af 8000 	nop.w
   2e46a:	e7c4      	b.n	2e3f6 <cdcd_control_xfer_cb+0x3a>
   2e46c:	10052f20 	.word	0x10052f20
   2e470:	00000000 	.word	0x00000000
   2e474:	10052f26 	.word	0x10052f26
   2e478:	10052f40 	.word	0x10052f40
	...

0002e484 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
   2e484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e488:	4f45      	ldr	r7, [pc, #276]	@ (2e5a0 <cdcd_xfer_cb+0x11c>)

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
   2e48a:	78fa      	ldrb	r2, [r7, #3]
{
   2e48c:	460c      	mov	r4, r1
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
   2e48e:	42a2      	cmp	r2, r4
   2e490:	78b9      	ldrb	r1, [r7, #2]
{
   2e492:	4606      	mov	r6, r0
   2e494:	461d      	mov	r5, r3
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
   2e496:	d046      	beq.n	2e526 <cdcd_xfer_cb+0xa2>
   2e498:	42a1      	cmp	r1, r4
   2e49a:	d01c      	beq.n	2e4d6 <cdcd_xfer_cb+0x52>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
   2e49c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2e4a0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2e4a4:	07db      	lsls	r3, r3, #31
   2e4a6:	d500      	bpl.n	2e4aa <cdcd_xfer_cb+0x26>
   2e4a8:	be00      	bkpt	0x0000
   2e4aa:	2000      	movs	r0, #0
  }

  // nothing to do with notif endpoint for now

  return true;
}
   2e4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
   2e4b0:	4b3c      	ldr	r3, [pc, #240]	@ (2e5a4 <cdcd_xfer_cb+0x120>)
   2e4b2:	b123      	cbz	r3, 2e4be <cdcd_xfer_cb+0x3a>
   2e4b4:	483c      	ldr	r0, [pc, #240]	@ (2e5a8 <cdcd_xfer_cb+0x124>)
   2e4b6:	f000 f94b 	bl	2e750 <tu_fifo_empty>
   2e4ba:	2800      	cmp	r0, #0
   2e4bc:	d067      	beq.n	2e58e <cdcd_xfer_cb+0x10a>
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
   2e4be:	483a      	ldr	r0, [pc, #232]	@ (2e5a8 <cdcd_xfer_cb+0x124>)
   2e4c0:	f000 f950 	bl	2e764 <tu_fifo_remaining>
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf), );
   2e4c4:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
   2e4c8:	d305      	bcc.n	2e4d6 <cdcd_xfer_cb+0x52>
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out), );
   2e4ca:	78f9      	ldrb	r1, [r7, #3]
   2e4cc:	2000      	movs	r0, #0
   2e4ce:	f001 f8bd 	bl	2f64c <usbd_edpt_claim>
   2e4d2:	2800      	cmp	r0, #0
   2e4d4:	d14d      	bne.n	2e572 <cdcd_xfer_cb+0xee>
  if ( ep_addr == p_cdc->ep_in )
   2e4d6:	78bb      	ldrb	r3, [r7, #2]
   2e4d8:	42a3      	cmp	r3, r4
   2e4da:	d002      	beq.n	2e4e2 <cdcd_xfer_cb+0x5e>
  return true;
   2e4dc:	2001      	movs	r0, #1
}
   2e4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
   2e4e2:	4b32      	ldr	r3, [pc, #200]	@ (2e5ac <cdcd_xfer_cb+0x128>)
   2e4e4:	b113      	cbz	r3, 2e4ec <cdcd_xfer_cb+0x68>
   2e4e6:	2000      	movs	r0, #0
   2e4e8:	f7fd faec 	bl	2bac4 <tud_cdc_tx_complete_cb>
    if ( 0 == tud_cdc_n_write_flush(itf) )
   2e4ec:	2000      	movs	r0, #0
   2e4ee:	f7ff fe57 	bl	2e1a0 <tud_cdc_n_write_flush>
   2e4f2:	2800      	cmp	r0, #0
   2e4f4:	d1f2      	bne.n	2e4dc <cdcd_xfer_cb+0x58>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
   2e4f6:	482e      	ldr	r0, [pc, #184]	@ (2e5b0 <cdcd_xfer_cb+0x12c>)
   2e4f8:	f000 f918 	bl	2e72c <tu_fifo_count>
   2e4fc:	2800      	cmp	r0, #0
   2e4fe:	d1ed      	bne.n	2e4dc <cdcd_xfer_cb+0x58>
   2e500:	2d00      	cmp	r5, #0
   2e502:	d0eb      	beq.n	2e4dc <cdcd_xfer_cb+0x58>
   2e504:	f3c5 0508 	ubfx	r5, r5, #0, #9
   2e508:	2d00      	cmp	r5, #0
   2e50a:	d1e7      	bne.n	2e4dc <cdcd_xfer_cb+0x58>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
   2e50c:	78b9      	ldrb	r1, [r7, #2]
   2e50e:	4630      	mov	r0, r6
   2e510:	f001 f89c 	bl	2f64c <usbd_edpt_claim>
   2e514:	2800      	cmp	r0, #0
   2e516:	d0e1      	beq.n	2e4dc <cdcd_xfer_cb+0x58>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
   2e518:	78b9      	ldrb	r1, [r7, #2]
   2e51a:	462b      	mov	r3, r5
   2e51c:	462a      	mov	r2, r5
   2e51e:	4630      	mov	r0, r6
   2e520:	f001 f8b0 	bl	2f684 <usbd_edpt_xfer>
   2e524:	e7da      	b.n	2e4dc <cdcd_xfer_cb+0x58>
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, xferred_bytes);
   2e526:	b29a      	uxth	r2, r3
   2e528:	f107 0138 	add.w	r1, r7, #56	@ 0x38
   2e52c:	f107 0010 	add.w	r0, r7, #16
   2e530:	f000 fa30 	bl	2e994 <tu_fifo_write_n>
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
   2e534:	4b1f      	ldr	r3, [pc, #124]	@ (2e5b4 <cdcd_xfer_cb+0x130>)
   2e536:	2b00      	cmp	r3, #0
   2e538:	d0ba      	beq.n	2e4b0 <cdcd_xfer_cb+0x2c>
   2e53a:	797b      	ldrb	r3, [r7, #5]
   2e53c:	2bff      	cmp	r3, #255	@ 0xff
   2e53e:	d0b7      	beq.n	2e4b0 <cdcd_xfer_cb+0x2c>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
   2e540:	2d00      	cmp	r5, #0
   2e542:	d0b5      	beq.n	2e4b0 <cdcd_xfer_cb+0x2c>
   2e544:	f107 0837 	add.w	r8, r7, #55	@ 0x37
   2e548:	eb08 0a05 	add.w	sl, r8, r5
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
   2e54c:	f1a8 0927 	sub.w	r9, r8, #39	@ 0x27
   2e550:	e002      	b.n	2e558 <cdcd_xfer_cb+0xd4>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
   2e552:	45c2      	cmp	sl, r8
   2e554:	d0ac      	beq.n	2e4b0 <cdcd_xfer_cb+0x2c>
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
   2e556:	797b      	ldrb	r3, [r7, #5]
   2e558:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   2e55c:	429a      	cmp	r2, r3
   2e55e:	d1f8      	bne.n	2e552 <cdcd_xfer_cb+0xce>
   2e560:	4648      	mov	r0, r9
   2e562:	f000 f8f5 	bl	2e750 <tu_fifo_empty>
   2e566:	2800      	cmp	r0, #0
   2e568:	d1f3      	bne.n	2e552 <cdcd_xfer_cb+0xce>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
   2e56a:	7979      	ldrb	r1, [r7, #5]
   2e56c:	f3af 8000 	nop.w
   2e570:	e7ef      	b.n	2e552 <cdcd_xfer_cb+0xce>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
   2e572:	480d      	ldr	r0, [pc, #52]	@ (2e5a8 <cdcd_xfer_cb+0x124>)
   2e574:	f000 f8f6 	bl	2e764 <tu_fifo_remaining>
  if ( available >= sizeof(p_cdc->epout_buf) )
   2e578:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
   2e57c:	d30a      	bcc.n	2e594 <cdcd_xfer_cb+0x110>
    usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
   2e57e:	4a0e      	ldr	r2, [pc, #56]	@ (2e5b8 <cdcd_xfer_cb+0x134>)
   2e580:	78f9      	ldrb	r1, [r7, #3]
   2e582:	f44f 6380 	mov.w	r3, #1024	@ 0x400
   2e586:	2000      	movs	r0, #0
   2e588:	f001 f87c 	bl	2f684 <usbd_edpt_xfer>
   2e58c:	e7a3      	b.n	2e4d6 <cdcd_xfer_cb+0x52>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
   2e58e:	f7fd fa7b 	bl	2ba88 <tud_cdc_rx_cb>
   2e592:	e794      	b.n	2e4be <cdcd_xfer_cb+0x3a>
    usbd_edpt_release(rhport, p_cdc->ep_out);
   2e594:	78f9      	ldrb	r1, [r7, #3]
   2e596:	2000      	movs	r0, #0
   2e598:	f001 f866 	bl	2f668 <usbd_edpt_release>
   2e59c:	e79b      	b.n	2e4d6 <cdcd_xfer_cb+0x52>
   2e59e:	bf00      	nop
   2e5a0:	10052f20 	.word	0x10052f20
   2e5a4:	0002ba89 	.word	0x0002ba89
   2e5a8:	10052f30 	.word	0x10052f30
   2e5ac:	0002bac5 	.word	0x0002bac5
   2e5b0:	10052f40 	.word	0x10052f40
   2e5b4:	00000000 	.word	0x00000000
   2e5b8:	10052f58 	.word	0x10052f58

0002e5bc <tusb_init>:
//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+

bool tusb_init(void)
{
   2e5bc:	b508      	push	{r3, lr}
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
   2e5be:	2000      	movs	r0, #0
   2e5c0:	f000 fad4 	bl	2eb6c <tud_init>
   2e5c4:	b100      	cbz	r0, 2e5c8 <tusb_init+0xc>
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
}
   2e5c6:	bd08      	pop	{r3, pc}
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
   2e5c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2e5cc:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2e5d0:	07db      	lsls	r3, r3, #31
   2e5d2:	d5f8      	bpl.n	2e5c6 <tusb_init+0xa>
   2e5d4:	be00      	bkpt	0x0000
}
   2e5d6:	bd08      	pop	{r3, pc}

0002e5d8 <tu_edpt_claim>:
bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
   2e5d8:	7803      	ldrb	r3, [r0, #0]
{
   2e5da:	4602      	mov	r2, r0
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
   2e5dc:	f013 0001 	ands.w	r0, r3, #1
   2e5e0:	d113      	bne.n	2e60a <tu_edpt_claim+0x32>
   2e5e2:	7813      	ldrb	r3, [r2, #0]
   2e5e4:	f3c3 0180 	ubfx	r1, r3, #2, #1
   2e5e8:	075b      	lsls	r3, r3, #29
   2e5ea:	d40d      	bmi.n	2e608 <tu_edpt_claim+0x30>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
   2e5ec:	7813      	ldrb	r3, [r2, #0]
   2e5ee:	f013 0001 	ands.w	r0, r3, #1
   2e5f2:	d108      	bne.n	2e606 <tu_edpt_claim+0x2e>
   2e5f4:	7813      	ldrb	r3, [r2, #0]
   2e5f6:	075b      	lsls	r3, r3, #29
   2e5f8:	d406      	bmi.n	2e608 <tu_edpt_claim+0x30>
  if (available)
  {
    ep_state->claimed = 1;
   2e5fa:	7813      	ldrb	r3, [r2, #0]
   2e5fc:	f043 0304 	orr.w	r3, r3, #4
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
   2e600:	2001      	movs	r0, #1
    ep_state->claimed = 1;
   2e602:	7013      	strb	r3, [r2, #0]
   2e604:	4770      	bx	lr
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
   2e606:	4608      	mov	r0, r1
  }

  (void) osal_mutex_unlock(mutex);

  return available;
}
   2e608:	4770      	bx	lr
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
   2e60a:	2000      	movs	r0, #0
   2e60c:	4770      	bx	lr
   2e60e:	bf00      	nop

0002e610 <tu_edpt_release>:
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
   2e610:	7802      	ldrb	r2, [r0, #0]
{
   2e612:	4603      	mov	r3, r0
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
   2e614:	f3c2 0080 	ubfx	r0, r2, #2, #1
   2e618:	0752      	lsls	r2, r2, #29
   2e61a:	d400      	bmi.n	2e61e <tu_edpt_release+0xe>
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
}
   2e61c:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
   2e61e:	781a      	ldrb	r2, [r3, #0]
   2e620:	f012 0201 	ands.w	r2, r2, #1
   2e624:	d104      	bne.n	2e630 <tu_edpt_release+0x20>
    ep_state->claimed = 0;
   2e626:	7819      	ldrb	r1, [r3, #0]
   2e628:	f362 0182 	bfi	r1, r2, #2, #1
   2e62c:	7019      	strb	r1, [r3, #0]
   2e62e:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
   2e630:	2000      	movs	r0, #0
}
   2e632:	4770      	bx	lr

0002e634 <tu_edpt_validate>:
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
   2e634:	78c3      	ldrb	r3, [r0, #3]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
   2e636:	8882      	ldrh	r2, [r0, #4]
   2e638:	f003 0003 	and.w	r0, r3, #3
   2e63c:	2802      	cmp	r0, #2
   2e63e:	f3c2 020a 	ubfx	r2, r2, #0, #11
   2e642:	d01f      	beq.n	2e684 <tu_edpt_validate+0x50>
   2e644:	2803      	cmp	r0, #3
   2e646:	d003      	beq.n	2e650 <tu_edpt_validate+0x1c>
   2e648:	2801      	cmp	r0, #1
   2e64a:	d00a      	beq.n	2e662 <tu_edpt_validate+0x2e>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
      TU_ASSERT(max_packet_size <= spec_size);
   2e64c:	2000      	movs	r0, #0
   2e64e:	4770      	bx	lr
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
   2e650:	2902      	cmp	r1, #2
   2e652:	bf14      	ite	ne
   2e654:	2340      	movne	r3, #64	@ 0x40
   2e656:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
      TU_ASSERT(max_packet_size <= spec_size);
   2e65a:	4293      	cmp	r3, r2
   2e65c:	d309      	bcc.n	2e672 <tu_edpt_validate+0x3e>
    break;

    default: return false;
  }

  return true;
   2e65e:	2001      	movs	r0, #1
}
   2e660:	4770      	bx	lr
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
   2e662:	2902      	cmp	r1, #2
   2e664:	f240 33ff 	movw	r3, #1023	@ 0x3ff
   2e668:	bf08      	it	eq
   2e66a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
      TU_ASSERT(max_packet_size <= spec_size);
   2e66e:	4293      	cmp	r3, r2
   2e670:	d2f6      	bcs.n	2e660 <tu_edpt_validate+0x2c>
        TU_ASSERT(max_packet_size == 512);
   2e672:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2e676:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2e67a:	07db      	lsls	r3, r3, #31
   2e67c:	d5e6      	bpl.n	2e64c <tu_edpt_validate+0x18>
   2e67e:	be00      	bkpt	0x0000
      TU_ASSERT(max_packet_size <= spec_size);
   2e680:	2000      	movs	r0, #0
   2e682:	4770      	bx	lr
      if (speed == TUSB_SPEED_HIGH)
   2e684:	2902      	cmp	r1, #2
   2e686:	d002      	beq.n	2e68e <tu_edpt_validate+0x5a>
        TU_ASSERT(max_packet_size <= 64);
   2e688:	2a40      	cmp	r2, #64	@ 0x40
   2e68a:	d9e8      	bls.n	2e65e <tu_edpt_validate+0x2a>
   2e68c:	e7f1      	b.n	2e672 <tu_edpt_validate+0x3e>
        TU_ASSERT(max_packet_size == 512);
   2e68e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
   2e692:	d0e4      	beq.n	2e65e <tu_edpt_validate+0x2a>
   2e694:	e7ed      	b.n	2e672 <tu_edpt_validate+0x3e>
   2e696:	bf00      	nop

0002e698 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
   2e698:	440a      	add	r2, r1

  while( p_desc < desc_end )
   2e69a:	4291      	cmp	r1, r2
   2e69c:	d226      	bcs.n	2e6ec <tu_edpt_bind_driver+0x54>
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
   2e69e:	f891 c001 	ldrb.w	ip, [r1, #1]
   2e6a2:	f1bc 0f05 	cmp.w	ip, #5
   2e6a6:	d005      	beq.n	2e6b4 <tu_edpt_bind_driver+0x1c>
  return desc8 + desc8[DESC_OFFSET_LEN];
   2e6a8:	f891 c000 	ldrb.w	ip, [r1]
   2e6ac:	4461      	add	r1, ip
  while( p_desc < desc_end )
   2e6ae:	428a      	cmp	r2, r1
   2e6b0:	d8f5      	bhi.n	2e69e <tu_edpt_bind_driver+0x6>
   2e6b2:	4770      	bx	lr
{
   2e6b4:	b500      	push	{lr}
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
   2e6b6:	f891 c002 	ldrb.w	ip, [r1, #2]

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
   2e6ba:	f00c 0e7f 	and.w	lr, ip, #127	@ 0x7f
   2e6be:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
   2e6c2:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
   2e6c6:	f80e 300c 	strb.w	r3, [lr, ip]
   2e6ca:	f891 c000 	ldrb.w	ip, [r1]
   2e6ce:	4461      	add	r1, ip
  while( p_desc < desc_end )
   2e6d0:	428a      	cmp	r2, r1
   2e6d2:	d909      	bls.n	2e6e8 <tu_edpt_bind_driver+0x50>
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
   2e6d4:	f891 c001 	ldrb.w	ip, [r1, #1]
   2e6d8:	f1bc 0f05 	cmp.w	ip, #5
   2e6dc:	d0eb      	beq.n	2e6b6 <tu_edpt_bind_driver+0x1e>
   2e6de:	f891 c000 	ldrb.w	ip, [r1]
   2e6e2:	4461      	add	r1, ip
  while( p_desc < desc_end )
   2e6e4:	428a      	cmp	r2, r1
   2e6e6:	d8f5      	bhi.n	2e6d4 <tu_edpt_bind_driver+0x3c>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
   2e6e8:	f85d fb04 	ldr.w	pc, [sp], #4
   2e6ec:	4770      	bx	lr
   2e6ee:	bf00      	nop

0002e6f0 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
   2e6f0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
{
   2e6f4:	f89d c000 	ldrb.w	ip, [sp]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
   2e6f8:	d816      	bhi.n	2e728 <tu_fifo_config+0x38>
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer = (uint8_t*) buffer;
  f->depth  = depth;
  f->item_size = item_size;
   2e6fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
   2e6fe:	ea43 33cc 	orr.w	r3, r3, ip, lsl #15
  f->overwritable = overwritable;

  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  f->max_pointer_idx = 2*depth - 1;
   2e702:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   2e706:	fa1f fc8c 	uxth.w	ip, ip
  f->depth  = depth;
   2e70a:	8082      	strh	r2, [r0, #4]
  f->item_size = item_size;
   2e70c:	80c3      	strh	r3, [r0, #6]
  f->max_pointer_idx = 2*depth - 1;
   2e70e:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;

  f->rd_idx = f->wr_idx = 0;
   2e712:	2300      	movs	r3, #0
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
   2e714:	f1cc 0c00 	rsb	ip, ip, #0
  f->rd_idx = f->wr_idx = 0;
   2e718:	8183      	strh	r3, [r0, #12]
  f->buffer = (uint8_t*) buffer;
   2e71a:	6001      	str	r1, [r0, #0]
  f->max_pointer_idx = 2*depth - 1;
   2e71c:	8142      	strh	r2, [r0, #10]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
   2e71e:	f8a0 c008 	strh.w	ip, [r0, #8]
  f->rd_idx = f->wr_idx = 0;
   2e722:	81c3      	strh	r3, [r0, #14]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
   2e724:	2001      	movs	r0, #1
   2e726:	4770      	bx	lr
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
   2e728:	2000      	movs	r0, #0
}
   2e72a:	4770      	bx	lr

0002e72c <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
   2e72c:	8981      	ldrh	r1, [r0, #12]
   2e72e:	89c2      	ldrh	r2, [r0, #14]
   2e730:	b289      	uxth	r1, r1
   2e732:	b292      	uxth	r2, r2
{
   2e734:	4603      	mov	r3, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e736:	4291      	cmp	r1, r2
  uint16_t cnt = wAbs-rAbs;
   2e738:	eba1 0002 	sub.w	r0, r1, r2
   2e73c:	b280      	uxth	r0, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e73e:	d202      	bcs.n	2e746 <tu_fifo_count+0x1a>
   2e740:	891a      	ldrh	r2, [r3, #8]
   2e742:	1a80      	subs	r0, r0, r2
   2e744:	b280      	uxth	r0, r0

//------------- Min -------------//
TU_ATTR_ALWAYS_INLINE static inline uint8_t  tu_min8  (uint8_t  x, uint8_t y ) { return (x < y) ? x : y; }
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
   2e746:	889b      	ldrh	r3, [r3, #4]
}
   2e748:	4298      	cmp	r0, r3
   2e74a:	bf28      	it	cs
   2e74c:	4618      	movcs	r0, r3
   2e74e:	4770      	bx	lr

0002e750 <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
   2e750:	8982      	ldrh	r2, [r0, #12]
   2e752:	89c3      	ldrh	r3, [r0, #14]
   2e754:	b290      	uxth	r0, r2
   2e756:	b29b      	uxth	r3, r3
}
   2e758:	1ac0      	subs	r0, r0, r3
   2e75a:	fab0 f080 	clz	r0, r0
   2e75e:	0940      	lsrs	r0, r0, #5
   2e760:	4770      	bx	lr
   2e762:	bf00      	nop

0002e764 <tu_fifo_remaining>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
   2e764:	8981      	ldrh	r1, [r0, #12]
   2e766:	89c2      	ldrh	r2, [r0, #14]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
   2e768:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
   2e76c:	b289      	uxth	r1, r1
   2e76e:	b292      	uxth	r2, r2
  uint16_t cnt = wAbs-rAbs;
   2e770:	1a8b      	subs	r3, r1, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e772:	4291      	cmp	r1, r2
  uint16_t cnt = wAbs-rAbs;
   2e774:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e776:	d202      	bcs.n	2e77e <tu_fifo_remaining+0x1a>
   2e778:	8902      	ldrh	r2, [r0, #8]
   2e77a:	1a9b      	subs	r3, r3, r2
   2e77c:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
   2e77e:	ebac 0003 	sub.w	r0, ip, r3
}
   2e782:	b280      	uxth	r0, r0
   2e784:	4770      	bx	lr
   2e786:	bf00      	nop

0002e788 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
   2e788:	b538      	push	{r3, r4, r5, lr}
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
   2e78a:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
   2e78e:	89c3      	ldrh	r3, [r0, #14]
   2e790:	fa1f fc8c 	uxth.w	ip, ip
   2e794:	b29b      	uxth	r3, r3
  uint16_t cnt = wAbs-rAbs;
   2e796:	ebac 0503 	sub.w	r5, ip, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e79a:	459c      	cmp	ip, r3
{
   2e79c:	4604      	mov	r4, r0
  uint16_t cnt = wAbs-rAbs;
   2e79e:	b2ad      	uxth	r5, r5
{
   2e7a0:	4608      	mov	r0, r1
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e7a2:	d202      	bcs.n	2e7aa <tu_fifo_read+0x22>
   2e7a4:	8922      	ldrh	r2, [r4, #8]
   2e7a6:	1aad      	subs	r5, r5, r2
   2e7a8:	b2ad      	uxth	r5, r5
  if (cnt > f->depth)
   2e7aa:	88a2      	ldrh	r2, [r4, #4]
   2e7ac:	42aa      	cmp	r2, r5
   2e7ae:	d22f      	bcs.n	2e810 <tu_fifo_read+0x88>
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
   2e7b0:	4594      	cmp	ip, r2
   2e7b2:	d223      	bcs.n	2e7fc <tu_fifo_read+0x74>
    p = (p - offset) - f->non_used_index_space;
   2e7b4:	8921      	ldrh	r1, [r4, #8]
   2e7b6:	4411      	add	r1, r2
   2e7b8:	ebac 0c01 	sub.w	ip, ip, r1
   2e7bc:	fa1f fc8c 	uxth.w	ip, ip
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   2e7c0:	f8a4 c00e 	strh.w	ip, [r4, #14]
  while ( idx >= depth) idx -= depth;
   2e7c4:	4293      	cmp	r3, r2
   2e7c6:	d303      	bcc.n	2e7d0 <tu_fifo_read+0x48>
   2e7c8:	1a9b      	subs	r3, r3, r2
   2e7ca:	b29b      	uxth	r3, r3
   2e7cc:	429a      	cmp	r2, r3
   2e7ce:	d9fb      	bls.n	2e7c8 <tu_fifo_read+0x40>
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
   2e7d0:	88e2      	ldrh	r2, [r4, #6]
   2e7d2:	6821      	ldr	r1, [r4, #0]
   2e7d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
   2e7d8:	fb02 1103 	mla	r1, r2, r3, r1
   2e7dc:	f7e9 fed0 	bl	18580 <memcpy>

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
   2e7e0:	89e2      	ldrh	r2, [r4, #14]
   2e7e2:	b292      	uxth	r2, r2
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   2e7e4:	1c53      	adds	r3, r2, #1
   2e7e6:	b29b      	uxth	r3, r3
   2e7e8:	429a      	cmp	r2, r3
   2e7ea:	f04f 0001 	mov.w	r0, #1
   2e7ee:	d914      	bls.n	2e81a <tu_fifo_read+0x92>
   2e7f0:	2300      	movs	r3, #0
    p = (p + offset) + f->non_used_index_space;
   2e7f2:	8922      	ldrh	r2, [r4, #8]
   2e7f4:	4413      	add	r3, r2
   2e7f6:	b29b      	uxth	r3, r3
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
   2e7f8:	81e3      	strh	r3, [r4, #14]

  _ff_unlock(f->mutex_rd);
  return ret;
}
   2e7fa:	bd38      	pop	{r3, r4, r5, pc}
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
   2e7fc:	8961      	ldrh	r1, [r4, #10]
   2e7fe:	ebac 0c02 	sub.w	ip, ip, r2
   2e802:	fa1f fc8c 	uxth.w	ip, ip
   2e806:	4561      	cmp	r1, ip
   2e808:	d30c      	bcc.n	2e824 <tu_fifo_read+0x9c>
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   2e80a:	f8a4 c00e 	strh.w	ip, [r4, #14]
    cnt = f->depth;
   2e80e:	4615      	mov	r5, r2
  if (cnt == 0) return false;
   2e810:	2d00      	cmp	r5, #0
   2e812:	d1d7      	bne.n	2e7c4 <tu_fifo_read+0x3c>
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
   2e814:	89e3      	ldrh	r3, [r4, #14]
  if (cnt == 0) return false;
   2e816:	4628      	mov	r0, r5
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
   2e818:	b29b      	uxth	r3, r3
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   2e81a:	8962      	ldrh	r2, [r4, #10]
   2e81c:	429a      	cmp	r2, r3
   2e81e:	d3e8      	bcc.n	2e7f2 <tu_fifo_read+0x6a>
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
   2e820:	81e3      	strh	r3, [r4, #14]
}
   2e822:	bd38      	pop	{r3, r4, r5, pc}
    p = (p - offset) - f->non_used_index_space;
   2e824:	8921      	ldrh	r1, [r4, #8]
   2e826:	ebac 0c01 	sub.w	ip, ip, r1
   2e82a:	fa1f fc8c 	uxth.w	ip, ip
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   2e82e:	f8a4 c00e 	strh.w	ip, [r4, #14]
    cnt = f->depth;
   2e832:	4615      	mov	r5, r2
   2e834:	e7ec      	b.n	2e810 <tu_fifo_read+0x88>
   2e836:	bf00      	nop

0002e838 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
   2e838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
   2e83c:	8983      	ldrh	r3, [r0, #12]
   2e83e:	89c4      	ldrh	r4, [r0, #14]
   2e840:	b29b      	uxth	r3, r3
   2e842:	b2a4      	uxth	r4, r4
  uint16_t cnt = wAbs-rAbs;
   2e844:	1b1f      	subs	r7, r3, r4
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e846:	42a3      	cmp	r3, r4
{
   2e848:	4606      	mov	r6, r0
   2e84a:	4688      	mov	r8, r1
  uint16_t cnt = wAbs-rAbs;
   2e84c:	b2bf      	uxth	r7, r7
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e84e:	d202      	bcs.n	2e856 <tu_fifo_read_n+0x1e>
   2e850:	8901      	ldrh	r1, [r0, #8]
   2e852:	1a79      	subs	r1, r7, r1
   2e854:	b28f      	uxth	r7, r1
  if (cnt > f->depth)
   2e856:	88b5      	ldrh	r5, [r6, #4]
   2e858:	42bd      	cmp	r5, r7
   2e85a:	d240      	bcs.n	2e8de <tu_fifo_read_n+0xa6>
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
   2e85c:	42ab      	cmp	r3, r5
   2e85e:	d235      	bcs.n	2e8cc <tu_fifo_read_n+0x94>
    p = (p - offset) - f->non_used_index_space;
   2e860:	8931      	ldrh	r1, [r6, #8]
   2e862:	4429      	add	r1, r5
   2e864:	1a5b      	subs	r3, r3, r1
   2e866:	b29b      	uxth	r3, r3
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   2e868:	81f3      	strh	r3, [r6, #14]
    rAbs = f->rd_idx;
   2e86a:	89f4      	ldrh	r4, [r6, #14]
    cnt = f->depth;
   2e86c:	462f      	mov	r7, r5
    rAbs = f->rd_idx;
   2e86e:	b2a4      	uxth	r4, r4
  if (cnt < n) n = cnt;
   2e870:	4297      	cmp	r7, r2
   2e872:	bf28      	it	cs
   2e874:	4617      	movcs	r7, r2
  while ( idx >= depth) idx -= depth;
   2e876:	42a5      	cmp	r5, r4
   2e878:	d803      	bhi.n	2e882 <tu_fifo_read_n+0x4a>
   2e87a:	1b64      	subs	r4, r4, r5
   2e87c:	b2a4      	uxth	r4, r4
   2e87e:	42a5      	cmp	r5, r4
   2e880:	d9fb      	bls.n	2e87a <tu_fifo_read_n+0x42>
  uint16_t nLin_bytes = nLin * f->item_size;
   2e882:	f8b6 9006 	ldrh.w	r9, [r6, #6]
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
   2e886:	6831      	ldr	r1, [r6, #0]
  uint16_t const nLin = f->depth - rel;
   2e888:	1b2b      	subs	r3, r5, r4
   2e88a:	b29b      	uxth	r3, r3
  uint16_t nLin_bytes = nLin * f->item_size;
   2e88c:	f3c9 020e 	ubfx	r2, r9, #0, #15
      if ( n <= nLin )
   2e890:	429f      	cmp	r7, r3
  uint16_t nLin_bytes = nLin * f->item_size;
   2e892:	4691      	mov	r9, r2
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
   2e894:	fb02 1104 	mla	r1, r2, r4, r1
      if ( n <= nLin )
   2e898:	d92f      	bls.n	2e8fa <tu_fifo_read_n+0xc2>
  uint16_t nLin_bytes = nLin * f->item_size;
   2e89a:	fb13 f302 	smulbb	r3, r3, r2
        memcpy(app_buf, ff_buf, nLin_bytes);
   2e89e:	fa1f fa83 	uxth.w	sl, r3
   2e8a2:	4652      	mov	r2, sl
   2e8a4:	4640      	mov	r0, r8
   2e8a6:	f7e9 fe6b 	bl	18580 <memcpy>
  uint16_t const nWrap = n - nLin; // only used if wrapped
   2e8aa:	1b7b      	subs	r3, r7, r5
   2e8ac:	18e2      	adds	r2, r4, r3
  uint16_t nWrap_bytes = nWrap * f->item_size;
   2e8ae:	fb12 f209 	smulbb	r2, r2, r9
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
   2e8b2:	6831      	ldr	r1, [r6, #0]
   2e8b4:	eb08 000a 	add.w	r0, r8, sl
   2e8b8:	b292      	uxth	r2, r2
   2e8ba:	f7e9 fe61 	bl	18580 <memcpy>
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
   2e8be:	89f2      	ldrh	r2, [r6, #14]
   2e8c0:	b292      	uxth	r2, r2
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   2e8c2:	19d3      	adds	r3, r2, r7
   2e8c4:	b29b      	uxth	r3, r3
   2e8c6:	429a      	cmp	r2, r3
   2e8c8:	d810      	bhi.n	2e8ec <tu_fifo_read_n+0xb4>
   2e8ca:	e00c      	b.n	2e8e6 <tu_fifo_read_n+0xae>
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
   2e8cc:	8971      	ldrh	r1, [r6, #10]
   2e8ce:	1b5b      	subs	r3, r3, r5
   2e8d0:	b29b      	uxth	r3, r3
   2e8d2:	4299      	cmp	r1, r3
   2e8d4:	d317      	bcc.n	2e906 <tu_fifo_read_n+0xce>
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   2e8d6:	81f3      	strh	r3, [r6, #14]
    rAbs = f->rd_idx;
   2e8d8:	89f4      	ldrh	r4, [r6, #14]
    cnt = f->depth;
   2e8da:	462f      	mov	r7, r5
    rAbs = f->rd_idx;
   2e8dc:	b2a4      	uxth	r4, r4
  if (cnt == 0) return 0;
   2e8de:	2f00      	cmp	r7, #0
   2e8e0:	d1c6      	bne.n	2e870 <tu_fifo_read_n+0x38>
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
   2e8e2:	89f3      	ldrh	r3, [r6, #14]
   2e8e4:	b29b      	uxth	r3, r3
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   2e8e6:	8972      	ldrh	r2, [r6, #10]
   2e8e8:	429a      	cmp	r2, r3
   2e8ea:	d202      	bcs.n	2e8f2 <tu_fifo_read_n+0xba>
    p = (p + offset) + f->non_used_index_space;
   2e8ec:	8932      	ldrh	r2, [r6, #8]
   2e8ee:	4413      	add	r3, r2
   2e8f0:	b29b      	uxth	r3, r3
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
   2e8f2:	81f3      	strh	r3, [r6, #14]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
}
   2e8f4:	4638      	mov	r0, r7
   2e8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy(app_buf, ff_buf, n*f->item_size);
   2e8fa:	fb07 f202 	mul.w	r2, r7, r2
   2e8fe:	4640      	mov	r0, r8
   2e900:	f7e9 fe3e 	bl	18580 <memcpy>
   2e904:	e7db      	b.n	2e8be <tu_fifo_read_n+0x86>
    p = (p - offset) - f->non_used_index_space;
   2e906:	8931      	ldrh	r1, [r6, #8]
   2e908:	1a5b      	subs	r3, r3, r1
   2e90a:	b29b      	uxth	r3, r3
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
   2e90c:	81f3      	strh	r3, [r6, #14]
    rAbs = f->rd_idx;
   2e90e:	89f4      	ldrh	r4, [r6, #14]
    cnt = f->depth;
   2e910:	462f      	mov	r7, r5
    rAbs = f->rd_idx;
   2e912:	b2a4      	uxth	r4, r4
    cnt = f->depth;
   2e914:	e7e3      	b.n	2e8de <tu_fifo_read_n+0xa6>
   2e916:	bf00      	nop

0002e918 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
   2e918:	b538      	push	{r3, r4, r5, lr}
  _ff_lock(f->mutex_wr);

  uint16_t w = f->wr_idx;
   2e91a:	8985      	ldrh	r5, [r0, #12]

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) 
   2e91c:	89c2      	ldrh	r2, [r0, #14]
  uint16_t w = f->wr_idx;
   2e91e:	b2ad      	uxth	r5, r5
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) 
   2e920:	b292      	uxth	r2, r2
  uint16_t cnt = wAbs-rAbs;
   2e922:	1aab      	subs	r3, r5, r2
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e924:	42aa      	cmp	r2, r5
{
   2e926:	4604      	mov	r4, r0
  uint16_t cnt = wAbs-rAbs;
   2e928:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e92a:	d902      	bls.n	2e932 <tu_fifo_write+0x1a>
   2e92c:	8902      	ldrh	r2, [r0, #8]
   2e92e:	1a9b      	subs	r3, r3, r2
   2e930:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
   2e932:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) 
   2e934:	429a      	cmp	r2, r3
   2e936:	d028      	beq.n	2e98a <tu_fifo_write+0x72>
  while ( idx >= depth) idx -= depth;
   2e938:	4295      	cmp	r5, r2
   2e93a:	bf28      	it	cs
   2e93c:	462b      	movcs	r3, r5
   2e93e:	d316      	bcc.n	2e96e <tu_fifo_write+0x56>
   2e940:	1a9b      	subs	r3, r3, r2
   2e942:	b29b      	uxth	r3, r3
   2e944:	429a      	cmp	r2, r3
   2e946:	d9fb      	bls.n	2e940 <tu_fifo_write+0x28>
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
   2e948:	88e2      	ldrh	r2, [r4, #6]
   2e94a:	6820      	ldr	r0, [r4, #0]
   2e94c:	f3c2 020e 	ubfx	r2, r2, #0, #15
   2e950:	fb02 0003 	mla	r0, r2, r3, r0
   2e954:	f7e9 fe14 	bl	18580 <memcpy>
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   2e958:	1c6b      	adds	r3, r5, #1
   2e95a:	b29b      	uxth	r3, r3
   2e95c:	429d      	cmp	r5, r3
   2e95e:	d910      	bls.n	2e982 <tu_fifo_write+0x6a>
   2e960:	2300      	movs	r3, #0
    p = (p + offset) + f->non_used_index_space;
   2e962:	8922      	ldrh	r2, [r4, #8]
   2e964:	4413      	add	r3, r2
   2e966:	b29b      	uxth	r3, r3

  // Write data
  _ff_push(f, data, wRel);

  // Advance pointer
  f->wr_idx = advance_pointer(f, w, 1);
   2e968:	81a3      	strh	r3, [r4, #12]

  _ff_unlock(f->mutex_wr);

  return true;
   2e96a:	2001      	movs	r0, #1
}
   2e96c:	bd38      	pop	{r3, r4, r5, pc}
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
   2e96e:	88e2      	ldrh	r2, [r4, #6]
   2e970:	6820      	ldr	r0, [r4, #0]
   2e972:	f3c2 020e 	ubfx	r2, r2, #0, #15
   2e976:	fb05 0002 	mla	r0, r5, r2, r0
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   2e97a:	3501      	adds	r5, #1
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
   2e97c:	f7e9 fe00 	bl	18580 <memcpy>
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   2e980:	b2ab      	uxth	r3, r5
   2e982:	8962      	ldrh	r2, [r4, #10]
   2e984:	429a      	cmp	r2, r3
   2e986:	d2ef      	bcs.n	2e968 <tu_fifo_write+0x50>
   2e988:	e7eb      	b.n	2e962 <tu_fifo_write+0x4a>
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable ) 
   2e98a:	79e0      	ldrb	r0, [r4, #7]
   2e98c:	09c0      	lsrs	r0, r0, #7
   2e98e:	d1d3      	bne.n	2e938 <tu_fifo_write+0x20>
}
   2e990:	bd38      	pop	{r3, r4, r5, pc}
   2e992:	bf00      	nop

0002e994 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
   2e994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( n == 0 ) return 0;
   2e998:	4615      	mov	r5, r2
   2e99a:	2a00      	cmp	r2, #0
   2e99c:	d038      	beq.n	2ea10 <tu_fifo_write_n+0x7c>
   2e99e:	4606      	mov	r6, r0
   2e9a0:	468a      	mov	sl, r1
    buf8 = buf8 + (n - f->depth) * f->item_size;
   2e9a2:	88f2      	ldrh	r2, [r6, #6]
  if (!f->overwritable)
   2e9a4:	79f1      	ldrb	r1, [r6, #7]
  uint16_t w = f->wr_idx, r = f->rd_idx;
   2e9a6:	8987      	ldrh	r7, [r0, #12]
   2e9a8:	89c0      	ldrh	r0, [r0, #14]
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
   2e9aa:	88b3      	ldrh	r3, [r6, #4]
    buf8 = buf8 + (n - f->depth) * f->item_size;
   2e9ac:	f3c2 090e 	ubfx	r9, r2, #0, #15
  if (!f->overwritable)
   2e9b0:	09c9      	lsrs	r1, r1, #7
  uint16_t w = f->wr_idx, r = f->rd_idx;
   2e9b2:	b2bf      	uxth	r7, r7
   2e9b4:	b280      	uxth	r0, r0
    buf8 = buf8 + (n - f->depth) * f->item_size;
   2e9b6:	464a      	mov	r2, r9
  if (!f->overwritable)
   2e9b8:	d12d      	bne.n	2ea16 <tu_fifo_write_n+0x82>
  uint16_t cnt = wAbs-rAbs;
   2e9ba:	1a39      	subs	r1, r7, r0
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e9bc:	4287      	cmp	r7, r0
  uint16_t cnt = wAbs-rAbs;
   2e9be:	b289      	uxth	r1, r1
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2e9c0:	d346      	bcc.n	2ea50 <tu_fifo_write_n+0xbc>
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
   2e9c2:	1a59      	subs	r1, r3, r1
   2e9c4:	b289      	uxth	r1, r1
   2e9c6:	428d      	cmp	r5, r1
   2e9c8:	bf28      	it	cs
   2e9ca:	460d      	movcs	r5, r1
   2e9cc:	eba5 0803 	sub.w	r8, r5, r3
   2e9d0:	fa1f f888 	uxth.w	r8, r8
  while ( idx >= depth) idx -= depth;
   2e9d4:	429f      	cmp	r7, r3
   2e9d6:	463c      	mov	r4, r7
   2e9d8:	d303      	bcc.n	2e9e2 <tu_fifo_write_n+0x4e>
   2e9da:	1ae4      	subs	r4, r4, r3
   2e9dc:	b2a4      	uxth	r4, r4
   2e9de:	429c      	cmp	r4, r3
   2e9e0:	d2fb      	bcs.n	2e9da <tu_fifo_write_n+0x46>
  uint16_t const nLin = f->depth - rel;
   2e9e2:	1b1b      	subs	r3, r3, r4
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
   2e9e4:	6830      	ldr	r0, [r6, #0]
  uint16_t const nLin = f->depth - rel;
   2e9e6:	b29b      	uxth	r3, r3
      if(n <= nLin)
   2e9e8:	429d      	cmp	r5, r3
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
   2e9ea:	fb02 0004 	mla	r0, r2, r4, r0
      if(n <= nLin)
   2e9ee:	d81c      	bhi.n	2ea2a <tu_fifo_write_n+0x96>
        memcpy(ff_buf, app_buf, n*f->item_size);
   2e9f0:	fb05 f202 	mul.w	r2, r5, r2
   2e9f4:	4651      	mov	r1, sl
   2e9f6:	f7e9 fdc3 	bl	18580 <memcpy>
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
   2e9fa:	19eb      	adds	r3, r5, r7
   2e9fc:	b29b      	uxth	r3, r3
   2e9fe:	429f      	cmp	r7, r3
   2ea00:	d802      	bhi.n	2ea08 <tu_fifo_write_n+0x74>
   2ea02:	8972      	ldrh	r2, [r6, #10]
   2ea04:	429a      	cmp	r2, r3
   2ea06:	d202      	bcs.n	2ea0e <tu_fifo_write_n+0x7a>
    p = (p + offset) + f->non_used_index_space;
   2ea08:	8932      	ldrh	r2, [r6, #8]
   2ea0a:	4413      	add	r3, r2
   2ea0c:	b29b      	uxth	r3, r3
  f->wr_idx = advance_pointer(f, w, n);
   2ea0e:	81b3      	strh	r3, [r6, #12]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
}
   2ea10:	4628      	mov	r0, r5
   2ea12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (n >= f->depth)
   2ea16:	429d      	cmp	r5, r3
   2ea18:	d31e      	bcc.n	2ea58 <tu_fifo_write_n+0xc4>
    buf8 = buf8 + (n - f->depth) * f->item_size;
   2ea1a:	1aed      	subs	r5, r5, r3
   2ea1c:	fb09 aa05 	mla	sl, r9, r5, sl
    w = r;
   2ea20:	4607      	mov	r7, r0
    n = f->depth;
   2ea22:	461d      	mov	r5, r3
    buf8 = buf8 + (n - f->depth) * f->item_size;
   2ea24:	f04f 0800 	mov.w	r8, #0
   2ea28:	e7d4      	b.n	2e9d4 <tu_fifo_write_n+0x40>
  uint16_t nLin_bytes = nLin * f->item_size;
   2ea2a:	fb13 f309 	smulbb	r3, r3, r9
        memcpy(ff_buf, app_buf, nLin_bytes);
   2ea2e:	fa1f fb83 	uxth.w	fp, r3
   2ea32:	465a      	mov	r2, fp
   2ea34:	4651      	mov	r1, sl
   2ea36:	f7e9 fda3 	bl	18580 <memcpy>
  uint16_t const nWrap = n - nLin;
   2ea3a:	eb08 0204 	add.w	r2, r8, r4
  uint16_t nWrap_bytes = nWrap * f->item_size;
   2ea3e:	fb12 f209 	smulbb	r2, r2, r9
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
   2ea42:	6830      	ldr	r0, [r6, #0]
   2ea44:	eb0a 010b 	add.w	r1, sl, fp
   2ea48:	b292      	uxth	r2, r2
   2ea4a:	f7e9 fd99 	bl	18580 <memcpy>
   2ea4e:	e7d4      	b.n	2e9fa <tu_fifo_write_n+0x66>
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
   2ea50:	8930      	ldrh	r0, [r6, #8]
   2ea52:	1a09      	subs	r1, r1, r0
   2ea54:	b289      	uxth	r1, r1
   2ea56:	e7b4      	b.n	2e9c2 <tu_fifo_write_n+0x2e>
   2ea58:	eba5 0803 	sub.w	r8, r5, r3
   2ea5c:	fa1f f888 	uxth.w	r8, r8
   2ea60:	e7b8      	b.n	2e9d4 <tu_fifo_write_n+0x40>
   2ea62:	bf00      	nop

0002ea64 <tu_fifo_clear>:
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
  f->max_pointer_idx = 2*f->depth-1;
   2ea64:	8883      	ldrh	r3, [r0, #4]
   2ea66:	005b      	lsls	r3, r3, #1
   2ea68:	b29b      	uxth	r3, r3
  f->rd_idx = f->wr_idx = 0;
   2ea6a:	2200      	movs	r2, #0
  f->max_pointer_idx = 2*f->depth-1;
   2ea6c:	1e59      	subs	r1, r3, #1
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
   2ea6e:	425b      	negs	r3, r3
  f->rd_idx = f->wr_idx = 0;
   2ea70:	8182      	strh	r2, [r0, #12]
  f->max_pointer_idx = 2*f->depth-1;
   2ea72:	8141      	strh	r1, [r0, #10]
  f->rd_idx = f->wr_idx = 0;
   2ea74:	81c2      	strh	r2, [r0, #14]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
   2ea76:	8103      	strh	r3, [r0, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
   2ea78:	2001      	movs	r0, #1
   2ea7a:	4770      	bx	lr

0002ea7c <tu_fifo_set_overwritable>:
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
   2ea7c:	79c2      	ldrb	r2, [r0, #7]
{
   2ea7e:	4603      	mov	r3, r0
  f->overwritable = overwritable;
   2ea80:	f361 12c7 	bfi	r2, r1, #7, #1

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
}
   2ea84:	2001      	movs	r0, #1
  f->overwritable = overwritable;
   2ea86:	71da      	strb	r2, [r3, #7]
}
   2ea88:	4770      	bx	lr
   2ea8a:	bf00      	nop

0002ea8c <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
   2ea8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
   2ea90:	4d21      	ldr	r5, [pc, #132]	@ (2eb18 <configuration_reset+0x8c>)
    driver = &_usbd_driver[drvid - _app_driver_count];
   2ea92:	4f22      	ldr	r7, [pc, #136]	@ (2eb1c <configuration_reset+0x90>)
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
   2ea94:	782a      	ldrb	r2, [r5, #0]
    driver = &_app_driver[drvid];
   2ea96:	4e22      	ldr	r6, [pc, #136]	@ (2eb20 <configuration_reset+0x94>)
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
   2ea98:	f04f 0800 	mov.w	r8, #0
{
   2ea9c:	4604      	mov	r4, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
   2ea9e:	4643      	mov	r3, r8
   2eaa0:	e00f      	b.n	2eac2 <configuration_reset+0x36>
    driver = &_app_driver[drvid];
   2eaa2:	6833      	ldr	r3, [r6, #0]
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
   2eaa4:	eb13 03c1 	adds.w	r3, r3, r1, lsl #3
   2eaa8:	d02d      	beq.n	2eb06 <configuration_reset+0x7a>
    driver->reset(rhport);
   2eaaa:	685b      	ldr	r3, [r3, #4]
   2eaac:	4620      	mov	r0, r4
   2eaae:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
   2eab0:	782a      	ldrb	r2, [r5, #0]
   2eab2:	f108 0801 	add.w	r8, r8, #1
   2eab6:	fa5f f888 	uxtb.w	r8, r8
   2eaba:	1c51      	adds	r1, r2, #1
   2eabc:	4541      	cmp	r1, r8
   2eabe:	4643      	mov	r3, r8
   2eac0:	db09      	blt.n	2ead6 <configuration_reset+0x4a>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2eac2:	1a9b      	subs	r3, r3, r2
  if ( drvid < _app_driver_count ) {
   2eac4:	4542      	cmp	r2, r8
    driver = &_app_driver[drvid];
   2eac6:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    driver = &_usbd_driver[drvid - _app_driver_count];
   2eaca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if ( drvid < _app_driver_count ) {
   2eace:	d8e8      	bhi.n	2eaa2 <configuration_reset+0x16>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2ead0:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    TU_ASSERT(driver, );
   2ead4:	e7e9      	b.n	2eaaa <configuration_reset+0x1e>
  }

  tu_varclr(&_usbd_dev);
   2ead6:	4b13      	ldr	r3, [pc, #76]	@ (2eb24 <configuration_reset+0x98>)
   2ead8:	222b      	movs	r2, #43	@ 0x2b
   2eada:	2100      	movs	r1, #0
   2eadc:	4618      	mov	r0, r3
   2eade:	f7f8 f8f1 	bl	26cc4 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
   2eae2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   2eae6:	f8c0 2003 	str.w	r2, [r0, #3]
   2eaea:	f8c0 2007 	str.w	r2, [r0, #7]
   2eaee:	f8c0 200b 	str.w	r2, [r0, #11]
   2eaf2:	f8c0 200f 	str.w	r2, [r0, #15]
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
   2eaf6:	f8c0 2013 	str.w	r2, [r0, #19]
   2eafa:	f8c0 2017 	str.w	r2, [r0, #23]
   2eafe:	f8c0 201b 	str.w	r2, [r0, #27]
}
   2eb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TU_ASSERT(driver, );
   2eb06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2eb0a:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2eb0e:	07db      	lsls	r3, r3, #31
   2eb10:	d5f7      	bpl.n	2eb02 <configuration_reset+0x76>
   2eb12:	be00      	bkpt	0x0000
}
   2eb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2eb18:	1005381c 	.word	0x1005381c
   2eb1c:	000478ac 	.word	0x000478ac
   2eb20:	10053820 	.word	0x10053820
   2eb24:	10053824 	.word	0x10053824

0002eb28 <usbd_int_set>:

void usbd_int_set(bool enabled)
{
  if (enabled)
  {
    dcd_int_enable(_usbd_rhport);
   2eb28:	4b04      	ldr	r3, [pc, #16]	@ (2eb3c <usbd_int_set+0x14>)
   2eb2a:	781b      	ldrb	r3, [r3, #0]
  if (enabled)
   2eb2c:	b110      	cbz	r0, 2eb34 <usbd_int_set+0xc>
    dcd_int_enable(_usbd_rhport);
   2eb2e:	4618      	mov	r0, r3
   2eb30:	f001 b9dc 	b.w	2feec <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
   2eb34:	4618      	mov	r0, r3
   2eb36:	f001 b9e3 	b.w	2ff00 <dcd_int_disable>
   2eb3a:	bf00      	nop
   2eb3c:	1000cb64 	.word	0x1000cb64

0002eb40 <tud_speed_get>:
  return (tusb_speed_t) _usbd_dev.speed;
   2eb40:	4b01      	ldr	r3, [pc, #4]	@ (2eb48 <tud_speed_get+0x8>)
}
   2eb42:	7898      	ldrb	r0, [r3, #2]
   2eb44:	4770      	bx	lr
   2eb46:	bf00      	nop
   2eb48:	10053824 	.word	0x10053824

0002eb4c <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
   2eb4c:	4b02      	ldr	r3, [pc, #8]	@ (2eb58 <tud_mounted+0xc>)
   2eb4e:	7858      	ldrb	r0, [r3, #1]
}
   2eb50:	3800      	subs	r0, #0
   2eb52:	bf18      	it	ne
   2eb54:	2001      	movne	r0, #1
   2eb56:	4770      	bx	lr
   2eb58:	10053824 	.word	0x10053824

0002eb5c <tud_suspended>:
  return _usbd_dev.suspended;
   2eb5c:	4b02      	ldr	r3, [pc, #8]	@ (2eb68 <tud_suspended+0xc>)
   2eb5e:	7818      	ldrb	r0, [r3, #0]
}
   2eb60:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2eb64:	4770      	bx	lr
   2eb66:	bf00      	nop
   2eb68:	10053824 	.word	0x10053824

0002eb6c <tud_init>:
{
   2eb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return _usbd_rhport != RHPORT_INVALID;
   2eb70:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 2ec34 <tud_init+0xc8>
  if ( tud_inited() ) return true;
   2eb74:	f898 3000 	ldrb.w	r3, [r8]
   2eb78:	2bff      	cmp	r3, #255	@ 0xff
   2eb7a:	d002      	beq.n	2eb82 <tud_init+0x16>
   2eb7c:	2001      	movs	r0, #1
}
   2eb7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tu_varclr(&_usbd_dev);
   2eb82:	222b      	movs	r2, #43	@ 0x2b
   2eb84:	2100      	movs	r1, #0
   2eb86:	4605      	mov	r5, r0
   2eb88:	4822      	ldr	r0, [pc, #136]	@ (2ec14 <tud_init+0xa8>)
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
   2eb8a:	4c23      	ldr	r4, [pc, #140]	@ (2ec18 <tud_init+0xac>)
  tu_varclr(&_usbd_dev);
   2eb8c:	f7f8 f89a 	bl	26cc4 <memset>
  // enable dcd/hcd interrupt
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
   2eb90:	4822      	ldr	r0, [pc, #136]	@ (2ec1c <tud_init+0xb0>)
   2eb92:	f7ff ff67 	bl	2ea64 <tu_fifo_clear>
  _usbd_q = osal_queue_create(&_usbd_qdef);
   2eb96:	4a22      	ldr	r2, [pc, #136]	@ (2ec20 <tud_init+0xb4>)
  if ( usbd_app_driver_get_cb )
   2eb98:	4b22      	ldr	r3, [pc, #136]	@ (2ec24 <tud_init+0xb8>)
  _usbd_q = osal_queue_create(&_usbd_qdef);
   2eb9a:	4923      	ldr	r1, [pc, #140]	@ (2ec28 <tud_init+0xbc>)
   2eb9c:	6011      	str	r1, [r2, #0]
  if ( usbd_app_driver_get_cb )
   2eb9e:	b323      	cbz	r3, 2ebea <tud_init+0x7e>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
   2eba0:	4620      	mov	r0, r4
   2eba2:	f3af 8000 	nop.w
   2eba6:	4b21      	ldr	r3, [pc, #132]	@ (2ec2c <tud_init+0xc0>)
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
   2eba8:	7822      	ldrb	r2, [r4, #0]
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
   2ebaa:	6018      	str	r0, [r3, #0]
{
   2ebac:	f04f 0900 	mov.w	r9, #0
    driver = &_usbd_driver[drvid - _app_driver_count];
   2ebb0:	4f1f      	ldr	r7, [pc, #124]	@ (2ec30 <tud_init+0xc4>)
    driver = &_app_driver[drvid];
   2ebb2:	4e1e      	ldr	r6, [pc, #120]	@ (2ec2c <tud_init+0xc0>)
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
   2ebb4:	464b      	mov	r3, r9
   2ebb6:	e00e      	b.n	2ebd6 <tud_init+0x6a>
    driver = &_app_driver[drvid];
   2ebb8:	6833      	ldr	r3, [r6, #0]
    TU_ASSERT(driver);
   2ebba:	eb13 03c1 	adds.w	r3, r3, r1, lsl #3
   2ebbe:	d01f      	beq.n	2ec00 <tud_init+0x94>
    driver->init();
   2ebc0:	681b      	ldr	r3, [r3, #0]
   2ebc2:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
   2ebc4:	7822      	ldrb	r2, [r4, #0]
   2ebc6:	f109 0901 	add.w	r9, r9, #1
   2ebca:	fa5f f989 	uxtb.w	r9, r9
   2ebce:	1c51      	adds	r1, r2, #1
   2ebd0:	4549      	cmp	r1, r9
   2ebd2:	464b      	mov	r3, r9
   2ebd4:	db0b      	blt.n	2ebee <tud_init+0x82>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2ebd6:	1a9b      	subs	r3, r3, r2
  if ( drvid < _app_driver_count ) {
   2ebd8:	454a      	cmp	r2, r9
    driver = &_app_driver[drvid];
   2ebda:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    driver = &_usbd_driver[drvid - _app_driver_count];
   2ebde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if ( drvid < _app_driver_count ) {
   2ebe2:	d8e9      	bhi.n	2ebb8 <tud_init+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2ebe4:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    TU_ASSERT(driver);
   2ebe8:	e7ea      	b.n	2ebc0 <tud_init+0x54>
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
   2ebea:	7822      	ldrb	r2, [r4, #0]
   2ebec:	e7de      	b.n	2ebac <tud_init+0x40>
  dcd_init(rhport);
   2ebee:	4628      	mov	r0, r5
  _usbd_rhport = rhport;
   2ebf0:	f888 5000 	strb.w	r5, [r8]
  dcd_init(rhport);
   2ebf4:	f001 f9ea 	bl	2ffcc <dcd_init>
  dcd_int_enable(rhport);
   2ebf8:	4628      	mov	r0, r5
   2ebfa:	f001 f977 	bl	2feec <dcd_int_enable>
  return true;
   2ebfe:	e7bd      	b.n	2eb7c <tud_init+0x10>
    TU_ASSERT(driver);
   2ec00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2ec04:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2ec08:	07db      	lsls	r3, r3, #31
   2ec0a:	d500      	bpl.n	2ec0e <tud_init+0xa2>
   2ec0c:	be00      	bkpt	0x0000
   2ec0e:	2000      	movs	r0, #0
   2ec10:	e7b5      	b.n	2eb7e <tud_init+0x12>
   2ec12:	bf00      	nop
   2ec14:	10053824 	.word	0x10053824
   2ec18:	1005381c 	.word	0x1005381c
   2ec1c:	1000cb54 	.word	0x1000cb54
   2ec20:	10053758 	.word	0x10053758
   2ec24:	00000000 	.word	0x00000000
   2ec28:	1000cb50 	.word	0x1000cb50
   2ec2c:	10053820 	.word	0x10053820
   2ec30:	000478ac 	.word	0x000478ac
   2ec34:	1000cb64 	.word	0x1000cb64

0002ec38 <tud_task_ext>:
{
   2ec38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return _usbd_rhport != RHPORT_INVALID;
   2ec3c:	f8df a2c8 	ldr.w	sl, [pc, #712]	@ 2ef08 <tud_task_ext+0x2d0>
  if ( !tud_inited() ) return;
   2ec40:	f89a 3000 	ldrb.w	r3, [sl]
   2ec44:	2bff      	cmp	r3, #255	@ 0xff
{
   2ec46:	b08b      	sub	sp, #44	@ 0x2c
  if ( !tud_inited() ) return;
   2ec48:	f000 80da 	beq.w	2ee00 <tud_task_ext+0x1c8>
   2ec4c:	4da7      	ldr	r5, [pc, #668]	@ (2eeec <tud_task_ext+0x2b4>)
        if ( _usbd_dev.connected )
   2ec4e:	4ca8      	ldr	r4, [pc, #672]	@ (2eef0 <tud_task_ext+0x2b8>)
          if (tud_resume_cb) tud_resume_cb();
   2ec50:	f8df 92b8 	ldr.w	r9, [pc, #696]	@ 2ef0c <tud_task_ext+0x2d4>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
   2ec54:	f8df b2b8 	ldr.w	fp, [pc, #696]	@ 2ef10 <tud_task_ext+0x2d8>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
   2ec58:	682f      	ldr	r7, [r5, #0]
  qhdl->interrupt_set(false);
   2ec5a:	463e      	mov	r6, r7
   2ec5c:	2000      	movs	r0, #0
   2ec5e:	f856 3b04 	ldr.w	r3, [r6], #4
   2ec62:	4798      	blx	r3

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
   2ec64:	4630      	mov	r0, r6
   2ec66:	a907      	add	r1, sp, #28
   2ec68:	f7ff fd8e 	bl	2e788 <tu_fifo_read>
  qhdl->interrupt_set(true);
   2ec6c:	683b      	ldr	r3, [r7, #0]
  bool success = tu_fifo_read(&qhdl->ff, data);
   2ec6e:	4606      	mov	r6, r0
  qhdl->interrupt_set(true);
   2ec70:	2001      	movs	r0, #1
   2ec72:	4798      	blx	r3
   2ec74:	2e00      	cmp	r6, #0
   2ec76:	f000 80c3 	beq.w	2ee00 <tud_task_ext+0x1c8>
    switch ( event.event_id )
   2ec7a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   2ec7e:	3b01      	subs	r3, #1
   2ec80:	2b07      	cmp	r3, #7
   2ec82:	f200 80a6 	bhi.w	2edd2 <tud_task_ext+0x19a>
   2ec86:	e8df f003 	tbb	[pc, r3]
   2ec8a:	7f8c      	.short	0x7f8c
   2ec8c:	307496a4 	.word	0x307496a4
   2ec90:	040a      	.short	0x040a
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
   2ec92:	9b08      	ldr	r3, [sp, #32]
   2ec94:	2b00      	cmp	r3, #0
   2ec96:	d0df      	beq.n	2ec58 <tud_task_ext+0x20>
   2ec98:	9809      	ldr	r0, [sp, #36]	@ 0x24
   2ec9a:	4798      	blx	r3
   2ec9c:	e7dc      	b.n	2ec58 <tud_task_ext+0x20>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
   2ec9e:	f89d 1020 	ldrb.w	r1, [sp, #32]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
   2eca2:	f001 067f 	and.w	r6, r1, #127	@ 0x7f
        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
   2eca6:	eb04 0046 	add.w	r0, r4, r6, lsl #1
   2ecaa:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
   2ecae:	7fc3      	ldrb	r3, [r0, #31]
   2ecb0:	f023 0301 	bic.w	r3, r3, #1
   2ecb4:	77c3      	strb	r3, [r0, #31]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
   2ecb6:	7fc3      	ldrb	r3, [r0, #31]
   2ecb8:	f023 0304 	bic.w	r3, r3, #4
   2ecbc:	77c3      	strb	r3, [r0, #31]
        if ( 0 == epnum )
   2ecbe:	2e00      	cmp	r6, #0
   2ecc0:	f000 80ba 	beq.w	2ee38 <tud_task_ext+0x200>
  if ( drvid < _app_driver_count ) {
   2ecc4:	4a8b      	ldr	r2, [pc, #556]	@ (2eef4 <tud_task_ext+0x2bc>)
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
   2ecc6:	7cc3      	ldrb	r3, [r0, #19]
  if ( drvid < _app_driver_count ) {
   2ecc8:	7812      	ldrb	r2, [r2, #0]
   2ecca:	4293      	cmp	r3, r2
   2eccc:	f080 808a 	bcs.w	2ede4 <tud_task_ext+0x1ac>
    driver = &_app_driver[drvid];
   2ecd0:	4a89      	ldr	r2, [pc, #548]	@ (2eef8 <tud_task_ext+0x2c0>)
   2ecd2:	6812      	ldr	r2, [r2, #0]
   2ecd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2ecd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
          if ((_usbd_dev.connected == 0) && (driver == NULL))
   2ecdc:	7822      	ldrb	r2, [r4, #0]
   2ecde:	07d7      	lsls	r7, r2, #31
   2ece0:	f100 80c1 	bmi.w	2ee66 <tud_task_ext+0x22e>
   2ece4:	2b00      	cmp	r3, #0
   2ece6:	d0b7      	beq.n	2ec58 <tud_task_ext+0x20>
   2ece8:	e0b5      	b.n	2ee56 <tud_task_ext+0x21e>
        _usbd_dev.connected = 1;
   2ecea:	7823      	ldrb	r3, [r4, #0]
        if ( !process_control_request(event.rhport, &event.setup_received) )
   2ecec:	f89d 801c 	ldrb.w	r8, [sp, #28]
        _usbd_dev.connected = 1;
   2ecf0:	f043 0301 	orr.w	r3, r3, #1
   2ecf4:	7023      	strb	r3, [r4, #0]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
   2ecf6:	7fe3      	ldrb	r3, [r4, #31]
   2ecf8:	f023 0301 	bic.w	r3, r3, #1
   2ecfc:	77e3      	strb	r3, [r4, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
   2ecfe:	7fe3      	ldrb	r3, [r4, #31]
   2ed00:	f023 0304 	bic.w	r3, r3, #4
   2ed04:	77e3      	strb	r3, [r4, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
   2ed06:	f894 3020 	ldrb.w	r3, [r4, #32]
   2ed0a:	f023 0301 	bic.w	r3, r3, #1
   2ed0e:	f884 3020 	strb.w	r3, [r4, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
   2ed12:	f894 3020 	ldrb.w	r3, [r4, #32]
  usbd_control_set_complete_callback(NULL);
   2ed16:	2000      	movs	r0, #0
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
   2ed18:	f023 0304 	bic.w	r3, r3, #4
   2ed1c:	f884 3020 	strb.w	r3, [r4, #32]
  usbd_control_set_complete_callback(NULL);
   2ed20:	f000 fd40 	bl	2f7a4 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
   2ed24:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2ed28:	f003 0260 	and.w	r2, r3, #96	@ 0x60
   2ed2c:	2a60      	cmp	r2, #96	@ 0x60
   2ed2e:	d071      	beq.n	2ee14 <tud_task_ext+0x1dc>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
   2ed30:	2a40      	cmp	r2, #64	@ 0x40
   2ed32:	f000 809b 	beq.w	2ee6c <tud_task_ext+0x234>
  switch ( p_request->bmRequestType_bit.recipient )
   2ed36:	f003 031f 	and.w	r3, r3, #31
   2ed3a:	2b01      	cmp	r3, #1
   2ed3c:	f000 80a4 	beq.w	2ee88 <tud_task_ext+0x250>
   2ed40:	2b02      	cmp	r3, #2
   2ed42:	d060      	beq.n	2ee06 <tud_task_ext+0x1ce>
   2ed44:	2b00      	cmp	r3, #0
   2ed46:	d165      	bne.n	2ee14 <tud_task_ext+0x1dc>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
   2ed48:	2a20      	cmp	r2, #32
   2ed4a:	f000 8111 	beq.w	2ef70 <tud_task_ext+0x338>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
   2ed4e:	2a00      	cmp	r2, #0
   2ed50:	d160      	bne.n	2ee14 <tud_task_ext+0x1dc>
      switch ( p_request->bRequest )
   2ed52:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
   2ed56:	2b09      	cmp	r3, #9
   2ed58:	d85c      	bhi.n	2ee14 <tud_task_ext+0x1dc>
   2ed5a:	e8df f013 	tbh	[pc, r3, lsl #1]
   2ed5e:	014a      	.short	0x014a
   2ed60:	005b01c0 	.word	0x005b01c0
   2ed64:	005b01b2 	.word	0x005b01b2
   2ed68:	017b01a5 	.word	0x017b01a5
   2ed6c:	0170005b 	.word	0x0170005b
   2ed70:	015b      	.short	0x015b
        if ( _usbd_dev.connected )
   2ed72:	7823      	ldrb	r3, [r4, #0]
   2ed74:	07da      	lsls	r2, r3, #31
   2ed76:	f57f af6f 	bpl.w	2ec58 <tud_task_ext+0x20>
          if (tud_resume_cb) tud_resume_cb();
   2ed7a:	f1b9 0f00 	cmp.w	r9, #0
   2ed7e:	f43f af6b 	beq.w	2ec58 <tud_task_ext+0x20>
   2ed82:	f7fc ff19 	bl	2bbb8 <tud_resume_cb>
   2ed86:	e767      	b.n	2ec58 <tud_task_ext+0x20>
  configuration_reset(rhport);
   2ed88:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2ed8c:	f7ff fe7e 	bl	2ea8c <configuration_reset>
  usbd_control_reset();
   2ed90:	f000 fcfe 	bl	2f790 <usbd_control_reset>
        if (tud_umount_cb) tud_umount_cb();
   2ed94:	4b59      	ldr	r3, [pc, #356]	@ (2eefc <tud_task_ext+0x2c4>)
   2ed96:	2b00      	cmp	r3, #0
   2ed98:	f43f af5e 	beq.w	2ec58 <tud_task_ext+0x20>
   2ed9c:	f7fc ff00 	bl	2bba0 <tud_umount_cb>
   2eda0:	e75a      	b.n	2ec58 <tud_task_ext+0x20>
  configuration_reset(rhport);
   2eda2:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2eda6:	f7ff fe71 	bl	2ea8c <configuration_reset>
  usbd_control_reset();
   2edaa:	f000 fcf1 	bl	2f790 <usbd_control_reset>
        _usbd_dev.speed = event.bus_reset.speed;
   2edae:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2edb2:	70a3      	strb	r3, [r4, #2]
      break;
   2edb4:	e750      	b.n	2ec58 <tud_task_ext+0x20>
        if ( _usbd_dev.connected )
   2edb6:	7823      	ldrb	r3, [r4, #0]
   2edb8:	07d9      	lsls	r1, r3, #31
   2edba:	f57f af4d 	bpl.w	2ec58 <tud_task_ext+0x20>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
   2edbe:	f1bb 0f00 	cmp.w	fp, #0
   2edc2:	f43f af49 	beq.w	2ec58 <tud_task_ext+0x20>
   2edc6:	7820      	ldrb	r0, [r4, #0]
   2edc8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2edcc:	f7fc feee 	bl	2bbac <tud_suspend_cb>
   2edd0:	e742      	b.n	2ec58 <tud_task_ext+0x20>
        TU_BREAKPOINT();
   2edd2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2edd6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2edda:	07db      	lsls	r3, r3, #31
   2eddc:	f57f af3c 	bpl.w	2ec58 <tud_task_ext+0x20>
   2ede0:	be00      	bkpt	0x0000
  {
   2ede2:	e739      	b.n	2ec58 <tud_task_ext+0x20>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
   2ede4:	1c50      	adds	r0, r2, #1
   2ede6:	4298      	cmp	r0, r3
   2ede8:	da2e      	bge.n	2ee48 <tud_task_ext+0x210>
          if ((_usbd_dev.connected == 0) && (driver == NULL))
   2edea:	7823      	ldrb	r3, [r4, #0]
   2edec:	07de      	lsls	r6, r3, #31
   2edee:	f57f af33 	bpl.w	2ec58 <tud_task_ext+0x20>
          TU_ASSERT(driver, );
   2edf2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2edf6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2edfa:	07d8      	lsls	r0, r3, #31
   2edfc:	f100 80f7 	bmi.w	2efee <tud_task_ext+0x3b6>
}
   2ee00:	b00b      	add	sp, #44	@ 0x2c
   2ee02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
   2ee06:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
   2ee0a:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
   2ee0e:	2b05      	cmp	r3, #5
   2ee10:	f240 8080 	bls.w	2ef14 <tud_task_ext+0x2dc>
    default: TU_BREAKPOINT(); return false;
   2ee14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2ee18:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2ee1c:	07db      	lsls	r3, r3, #31
   2ee1e:	d500      	bpl.n	2ee22 <tud_task_ext+0x1ea>
   2ee20:	be00      	bkpt	0x0000
          dcd_edpt_stall(event.rhport, 0);
   2ee22:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2ee26:	2100      	movs	r1, #0
   2ee28:	f001 f8aa 	bl	2ff80 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
   2ee2c:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2ee30:	2180      	movs	r1, #128	@ 0x80
   2ee32:	f001 f8a5 	bl	2ff80 <dcd_edpt_stall>
   2ee36:	e70f      	b.n	2ec58 <tud_task_ext+0x20>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
   2ee38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2ee3a:	f89d 2021 	ldrb.w	r2, [sp, #33]	@ 0x21
   2ee3e:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2ee42:	f000 fcc1 	bl	2f7c8 <usbd_control_xfer_cb>
   2ee46:	e707      	b.n	2ec58 <tud_task_ext+0x20>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2ee48:	1a9b      	subs	r3, r3, r2
          if ((_usbd_dev.connected == 0) && (driver == NULL))
   2ee4a:	7822      	ldrb	r2, [r4, #0]
    driver = &_usbd_driver[drvid - _app_driver_count];
   2ee4c:	4a2c      	ldr	r2, [pc, #176]	@ (2ef00 <tud_task_ext+0x2c8>)
   2ee4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2ee52:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
   2ee56:	691e      	ldr	r6, [r3, #16]
   2ee58:	f89d 2021 	ldrb.w	r2, [sp, #33]	@ 0x21
   2ee5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
   2ee5e:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2ee62:	47b0      	blx	r6
   2ee64:	e6f8      	b.n	2ec58 <tud_task_ext+0x20>
          TU_ASSERT(driver, );
   2ee66:	2b00      	cmp	r3, #0
   2ee68:	d1f5      	bne.n	2ee56 <tud_task_ext+0x21e>
   2ee6a:	e7c2      	b.n	2edf2 <tud_task_ext+0x1ba>
    TU_VERIFY(tud_vendor_control_xfer_cb);
   2ee6c:	4825      	ldr	r0, [pc, #148]	@ (2ef04 <tud_task_ext+0x2cc>)
   2ee6e:	2800      	cmp	r0, #0
   2ee70:	d0d7      	beq.n	2ee22 <tud_task_ext+0x1ea>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
   2ee72:	f000 fc97 	bl	2f7a4 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
   2ee76:	4640      	mov	r0, r8
   2ee78:	aa08      	add	r2, sp, #32
   2ee7a:	2101      	movs	r1, #1
   2ee7c:	f7fc fed6 	bl	2bc2c <tud_vendor_control_xfer_cb>
        if ( !process_control_request(event.rhport, &event.setup_received) )
   2ee80:	2800      	cmp	r0, #0
   2ee82:	f47f aee9 	bne.w	2ec58 <tud_task_ext+0x20>
   2ee86:	e7cc      	b.n	2ee22 <tud_task_ext+0x1ea>
   2ee88:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
   2ee8c:	2b0f      	cmp	r3, #15
   2ee8e:	d8c8      	bhi.n	2ee22 <tud_task_ext+0x1ea>
  if ( drvid < _app_driver_count ) {
   2ee90:	4a18      	ldr	r2, [pc, #96]	@ (2eef4 <tud_task_ext+0x2bc>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
   2ee92:	4423      	add	r3, r4
  if ( drvid < _app_driver_count ) {
   2ee94:	7812      	ldrb	r2, [r2, #0]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
   2ee96:	78db      	ldrb	r3, [r3, #3]
  if ( drvid < _app_driver_count ) {
   2ee98:	4293      	cmp	r3, r2
   2ee9a:	d27d      	bcs.n	2ef98 <tud_task_ext+0x360>
    driver = &_app_driver[drvid];
   2ee9c:	4a16      	ldr	r2, [pc, #88]	@ (2eef8 <tud_task_ext+0x2c0>)
   2ee9e:	6816      	ldr	r6, [r2, #0]
   2eea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      TU_VERIFY(driver);
   2eea4:	eb16 06c3 	adds.w	r6, r6, r3, lsl #3
   2eea8:	d0bb      	beq.n	2ee22 <tud_task_ext+0x1ea>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
   2eeaa:	68f0      	ldr	r0, [r6, #12]
   2eeac:	f000 fc7a 	bl	2f7a4 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
   2eeb0:	68f3      	ldr	r3, [r6, #12]
   2eeb2:	aa08      	add	r2, sp, #32
   2eeb4:	2101      	movs	r1, #1
   2eeb6:	4640      	mov	r0, r8
   2eeb8:	4798      	blx	r3
      if ( !invoke_class_control(rhport, driver, p_request) )
   2eeba:	2800      	cmp	r0, #0
   2eebc:	f47f aecc 	bne.w	2ec58 <tud_task_ext+0x20>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
   2eec0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2eec4:	f013 0660 	ands.w	r6, r3, #96	@ 0x60
   2eec8:	d1ab      	bne.n	2ee22 <tud_task_ext+0x1ea>
        switch(p_request->bRequest)
   2eeca:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
   2eece:	3b0a      	subs	r3, #10
   2eed0:	2b01      	cmp	r3, #1
   2eed2:	d8a6      	bhi.n	2ee22 <tud_task_ext+0x1ea>
            usbd_control_set_complete_callback(NULL);
   2eed4:	f000 fc66 	bl	2f7a4 <usbd_control_set_complete_callback>
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
   2eed8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
   2eedc:	2b0a      	cmp	r3, #10
   2eede:	f000 81a1 	beq.w	2f224 <tud_task_ext+0x5ec>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
   2eee2:	a908      	add	r1, sp, #32
   2eee4:	4640      	mov	r0, r8
   2eee6:	f000 fc03 	bl	2f6f0 <tud_control_status>
   2eeea:	e6b5      	b.n	2ec58 <tud_task_ext+0x20>
   2eeec:	10053758 	.word	0x10053758
   2eef0:	10053824 	.word	0x10053824
   2eef4:	1005381c 	.word	0x1005381c
   2eef8:	10053820 	.word	0x10053820
   2eefc:	0002bba1 	.word	0x0002bba1
   2ef00:	000478ac 	.word	0x000478ac
   2ef04:	0002bc2d 	.word	0x0002bc2d
   2ef08:	1000cb64 	.word	0x1000cb64
   2ef0c:	0002bbb9 	.word	0x0002bbb9
   2ef10:	0002bbad 	.word	0x0002bbad
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
   2ef14:	eb04 0043 	add.w	r0, r4, r3, lsl #1
  if ( drvid < _app_driver_count ) {
   2ef18:	4ebb      	ldr	r6, [pc, #748]	@ (2f208 <tud_task_ext+0x5d0>)
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
   2ef1a:	eb00 10d1 	add.w	r0, r0, r1, lsr #7
  if ( drvid < _app_driver_count ) {
   2ef1e:	7836      	ldrb	r6, [r6, #0]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
   2ef20:	7cc0      	ldrb	r0, [r0, #19]
  if ( drvid < _app_driver_count ) {
   2ef22:	42b0      	cmp	r0, r6
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
   2ef24:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2ef28:	ea4f 1cd1 	mov.w	ip, r1, lsr #7
  if ( drvid < _app_driver_count ) {
   2ef2c:	d23f      	bcs.n	2efae <tud_task_ext+0x376>
    driver = &_app_driver[drvid];
   2ef2e:	4eb7      	ldr	r6, [pc, #732]	@ (2f20c <tud_task_ext+0x5d4>)
   2ef30:	6836      	ldr	r6, [r6, #0]
   2ef32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2ef36:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
   2ef3a:	2a00      	cmp	r2, #0
   2ef3c:	d14e      	bne.n	2efdc <tud_task_ext+0x3a4>
        switch ( p_request->bRequest )
   2ef3e:	f89d 2021 	ldrb.w	r2, [sp, #33]	@ 0x21
   2ef42:	f002 00fd 	and.w	r0, r2, #253	@ 0xfd
   2ef46:	2801      	cmp	r0, #1
   2ef48:	f000 8132 	beq.w	2f1b0 <tud_task_ext+0x578>
   2ef4c:	2a00      	cmp	r2, #0
   2ef4e:	f47f af61 	bne.w	2ee14 <tud_task_ext+0x1dc>
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
   2ef52:	4423      	add	r3, r4
   2ef54:	4463      	add	r3, ip
            tud_control_xfer(rhport, p_request, &status, 2);
   2ef56:	4640      	mov	r0, r8
  return _usbd_dev.ep_status[epnum][dir].stalled;
   2ef58:	7fdb      	ldrb	r3, [r3, #31]
   2ef5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
   2ef5e:	f8ad 301a 	strh.w	r3, [sp, #26]
            tud_control_xfer(rhport, p_request, &status, 2);
   2ef62:	f10d 021a 	add.w	r2, sp, #26
   2ef66:	2302      	movs	r3, #2
   2ef68:	a908      	add	r1, sp, #32
   2ef6a:	f000 fbd9 	bl	2f720 <tud_control_xfer>
          break;
   2ef6e:	e673      	b.n	2ec58 <tud_task_ext+0x20>
   2ef70:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
   2ef74:	2b0f      	cmp	r3, #15
   2ef76:	f63f af54 	bhi.w	2ee22 <tud_task_ext+0x1ea>
  if ( drvid < _app_driver_count ) {
   2ef7a:	4aa3      	ldr	r2, [pc, #652]	@ (2f208 <tud_task_ext+0x5d0>)
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
   2ef7c:	4423      	add	r3, r4
  if ( drvid < _app_driver_count ) {
   2ef7e:	7812      	ldrb	r2, [r2, #0]
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
   2ef80:	78db      	ldrb	r3, [r3, #3]
  if ( drvid < _app_driver_count ) {
   2ef82:	4293      	cmp	r3, r2
   2ef84:	f080 8109 	bcs.w	2f19a <tud_task_ext+0x562>
    driver = &_app_driver[drvid];
   2ef88:	4aa0      	ldr	r2, [pc, #640]	@ (2f20c <tud_task_ext+0x5d4>)
   2ef8a:	6816      	ldr	r6, [r2, #0]
   2ef8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        TU_VERIFY(driver);
   2ef90:	eb16 06c3 	adds.w	r6, r6, r3, lsl #3
   2ef94:	d116      	bne.n	2efc4 <tud_task_ext+0x38c>
   2ef96:	e744      	b.n	2ee22 <tud_task_ext+0x1ea>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
   2ef98:	1c51      	adds	r1, r2, #1
   2ef9a:	4299      	cmp	r1, r3
   2ef9c:	f6ff af41 	blt.w	2ee22 <tud_task_ext+0x1ea>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2efa0:	4e9b      	ldr	r6, [pc, #620]	@ (2f210 <tud_task_ext+0x5d8>)
   2efa2:	1a9b      	subs	r3, r3, r2
   2efa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2efa8:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
      TU_VERIFY(driver);
   2efac:	e77d      	b.n	2eeaa <tud_task_ext+0x272>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
   2efae:	1c77      	adds	r7, r6, #1
   2efb0:	4287      	cmp	r7, r0
   2efb2:	db17      	blt.n	2efe4 <tud_task_ext+0x3ac>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2efb4:	1b80      	subs	r0, r0, r6
   2efb6:	4e96      	ldr	r6, [pc, #600]	@ (2f210 <tud_task_ext+0x5d8>)
   2efb8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2efbc:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
   2efc0:	2a00      	cmp	r2, #0
   2efc2:	d0bc      	beq.n	2ef3e <tud_task_ext+0x306>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
   2efc4:	68f0      	ldr	r0, [r6, #12]
   2efc6:	f000 fbed 	bl	2f7a4 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
   2efca:	68f3      	ldr	r3, [r6, #12]
   2efcc:	4640      	mov	r0, r8
   2efce:	aa08      	add	r2, sp, #32
   2efd0:	2101      	movs	r1, #1
   2efd2:	4798      	blx	r3
        if ( !process_control_request(event.rhport, &event.setup_received) )
   2efd4:	2800      	cmp	r0, #0
   2efd6:	f47f ae3f 	bne.w	2ec58 <tud_task_ext+0x20>
   2efda:	e722      	b.n	2ee22 <tud_task_ext+0x1ea>
        TU_VERIFY(driver);
   2efdc:	2e00      	cmp	r6, #0
   2efde:	f43f af20 	beq.w	2ee22 <tud_task_ext+0x1ea>
   2efe2:	e7ef      	b.n	2efc4 <tud_task_ext+0x38c>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
   2efe4:	2a00      	cmp	r2, #0
   2efe6:	f47f af1c 	bne.w	2ee22 <tud_task_ext+0x1ea>
  usbd_class_driver_t const * driver = NULL;
   2efea:	4616      	mov	r6, r2
   2efec:	e7a7      	b.n	2ef3e <tud_task_ext+0x306>
          TU_ASSERT(driver, );
   2efee:	be00      	bkpt	0x0000
   2eff0:	e706      	b.n	2ee00 <tud_task_ext+0x1c8>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
   2eff2:	7822      	ldrb	r2, [r4, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
   2eff4:	2302      	movs	r3, #2
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
   2eff6:	fa22 f103 	lsr.w	r1, r2, r3
   2effa:	4019      	ands	r1, r3
   2effc:	f3c2 1240 	ubfx	r2, r2, #5, #1
   2f000:	430a      	orrs	r2, r1
   2f002:	f8ad 201a 	strh.w	r2, [sp, #26]
          tud_control_xfer(rhport, p_request, &status, 2);
   2f006:	4640      	mov	r0, r8
   2f008:	f10d 021a 	add.w	r2, sp, #26
   2f00c:	a908      	add	r1, sp, #32
   2f00e:	f000 fb87 	bl	2f720 <tud_control_xfer>
        break;
   2f012:	e621      	b.n	2ec58 <tud_task_ext+0x20>
          if (_usbd_dev.cfg_num != cfg_num)
   2f014:	7863      	ldrb	r3, [r4, #1]
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
   2f016:	f89d 6022 	ldrb.w	r6, [sp, #34]	@ 0x22
          if (_usbd_dev.cfg_num != cfg_num)
   2f01a:	429e      	cmp	r6, r3
   2f01c:	d009      	beq.n	2f032 <tud_task_ext+0x3fa>
            if ( _usbd_dev.cfg_num )
   2f01e:	7863      	ldrb	r3, [r4, #1]
   2f020:	2b00      	cmp	r3, #0
   2f022:	d16a      	bne.n	2f0fa <tud_task_ext+0x4c2>
            if ( cfg_num )
   2f024:	2e00      	cmp	r6, #0
   2f026:	f040 811b 	bne.w	2f260 <tud_task_ext+0x628>
              if ( tud_umount_cb ) tud_umount_cb();
   2f02a:	4b7a      	ldr	r3, [pc, #488]	@ (2f214 <tud_task_ext+0x5dc>)
   2f02c:	b10b      	cbz	r3, 2f032 <tud_task_ext+0x3fa>
   2f02e:	f7fc fdb7 	bl	2bba0 <tud_umount_cb>
          tud_control_status(rhport, p_request);
   2f032:	4640      	mov	r0, r8
   2f034:	a908      	add	r1, sp, #32
          _usbd_dev.cfg_num = cfg_num;
   2f036:	7066      	strb	r6, [r4, #1]
          tud_control_status(rhport, p_request);
   2f038:	f000 fb5a 	bl	2f6f0 <tud_control_status>
        break;
   2f03c:	e60c      	b.n	2ec58 <tud_task_ext+0x20>
          uint8_t cfg_num = _usbd_dev.cfg_num;
   2f03e:	7863      	ldrb	r3, [r4, #1]
   2f040:	f88d 301a 	strb.w	r3, [sp, #26]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
   2f044:	4640      	mov	r0, r8
   2f046:	2301      	movs	r3, #1
   2f048:	f10d 021a 	add.w	r2, sp, #26
   2f04c:	a908      	add	r1, sp, #32
   2f04e:	f000 fb67 	bl	2f720 <tud_control_xfer>
        break;
   2f052:	e601      	b.n	2ec58 <tud_task_ext+0x20>
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
   2f054:	f8bd 0022 	ldrh.w	r0, [sp, #34]	@ 0x22
  switch(desc_type)
   2f058:	0a03      	lsrs	r3, r0, #8
   2f05a:	3b01      	subs	r3, #1
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
   2f05c:	0a02      	lsrs	r2, r0, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
   2f05e:	b2c0      	uxtb	r0, r0
   2f060:	2b0e      	cmp	r3, #14
   2f062:	f63f aede 	bhi.w	2ee22 <tud_task_ext+0x1ea>
   2f066:	a101      	add	r1, pc, #4	@ (adr r1, 2f06c <tud_task_ext+0x434>)
   2f068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2f06c:	0002f139 	.word	0x0002f139
   2f070:	0002f10d 	.word	0x0002f10d
   2f074:	0002f177 	.word	0x0002f177
   2f078:	0002ee23 	.word	0x0002ee23
   2f07c:	0002ee23 	.word	0x0002ee23
   2f080:	0002f151 	.word	0x0002f151
   2f084:	0002f10d 	.word	0x0002f10d
   2f088:	0002ee23 	.word	0x0002ee23
   2f08c:	0002ee23 	.word	0x0002ee23
   2f090:	0002ee23 	.word	0x0002ee23
   2f094:	0002ee23 	.word	0x0002ee23
   2f098:	0002ee23 	.word	0x0002ee23
   2f09c:	0002ee23 	.word	0x0002ee23
   2f0a0:	0002ee23 	.word	0x0002ee23
   2f0a4:	0002f187 	.word	0x0002f187
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
   2f0a8:	a808      	add	r0, sp, #32
   2f0aa:	f000 fb81 	bl	2f7b0 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
   2f0ae:	f89d 1022 	ldrb.w	r1, [sp, #34]	@ 0x22
   2f0b2:	4640      	mov	r0, r8
   2f0b4:	f000 ff30 	bl	2ff18 <dcd_set_address>
          _usbd_dev.addressed = 1;
   2f0b8:	7823      	ldrb	r3, [r4, #0]
   2f0ba:	f043 0302 	orr.w	r3, r3, #2
   2f0be:	7023      	strb	r3, [r4, #0]
        break;
   2f0c0:	e5ca      	b.n	2ec58 <tud_task_ext+0x20>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
   2f0c2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
   2f0c6:	2b01      	cmp	r3, #1
   2f0c8:	f47f aeab 	bne.w	2ee22 <tud_task_ext+0x1ea>
          _usbd_dev.remote_wakeup_en = true;
   2f0cc:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
   2f0ce:	4640      	mov	r0, r8
          _usbd_dev.remote_wakeup_en = true;
   2f0d0:	f043 0308 	orr.w	r3, r3, #8
          tud_control_status(rhport, p_request);
   2f0d4:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = true;
   2f0d6:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
   2f0d8:	f000 fb0a 	bl	2f6f0 <tud_control_status>
        break;
   2f0dc:	e5bc      	b.n	2ec58 <tud_task_ext+0x20>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
   2f0de:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
   2f0e2:	2b01      	cmp	r3, #1
   2f0e4:	f47f ae9d 	bne.w	2ee22 <tud_task_ext+0x1ea>
          _usbd_dev.remote_wakeup_en = false;
   2f0e8:	7823      	ldrb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
   2f0ea:	4640      	mov	r0, r8
          _usbd_dev.remote_wakeup_en = false;
   2f0ec:	f023 0308 	bic.w	r3, r3, #8
          tud_control_status(rhport, p_request);
   2f0f0:	a908      	add	r1, sp, #32
          _usbd_dev.remote_wakeup_en = false;
   2f0f2:	7023      	strb	r3, [r4, #0]
          tud_control_status(rhport, p_request);
   2f0f4:	f000 fafc 	bl	2f6f0 <tud_control_status>
        break;
   2f0f8:	e5ae      	b.n	2ec58 <tud_task_ext+0x20>
              dcd_edpt_close_all(rhport);
   2f0fa:	4640      	mov	r0, r8
   2f0fc:	f000 ff32 	bl	2ff64 <dcd_edpt_close_all>
              uint8_t const speed = _usbd_dev.speed;
   2f100:	78a7      	ldrb	r7, [r4, #2]
              configuration_reset(rhport);
   2f102:	4640      	mov	r0, r8
   2f104:	f7ff fcc2 	bl	2ea8c <configuration_reset>
              _usbd_dev.speed = speed; // restore speed
   2f108:	70a7      	strb	r7, [r4, #2]
   2f10a:	e78b      	b.n	2f024 <tud_task_ext+0x3ec>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
   2f10c:	2a02      	cmp	r2, #2
   2f10e:	f000 814a 	beq.w	2f3a6 <tud_task_ext+0x76e>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
   2f112:	4b41      	ldr	r3, [pc, #260]	@ (2f218 <tud_task_ext+0x5e0>)
   2f114:	2b00      	cmp	r3, #0
   2f116:	f43f ae84 	beq.w	2ee22 <tud_task_ext+0x1ea>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
   2f11a:	f3af 8000 	nop.w
   2f11e:	4602      	mov	r2, r0
      TU_ASSERT(desc_config);
   2f120:	2a00      	cmp	r2, #0
   2f122:	f43f ae77 	beq.w	2ee14 <tud_task_ext+0x1dc>
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
   2f126:	8853      	ldrh	r3, [r2, #2]
   2f128:	4640      	mov	r0, r8
   2f12a:	a908      	add	r1, sp, #32
   2f12c:	f000 faf8 	bl	2f720 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
   2f130:	2800      	cmp	r0, #0
   2f132:	f47f ad91 	bne.w	2ec58 <tud_task_ext+0x20>
   2f136:	e674      	b.n	2ee22 <tud_task_ext+0x1ea>
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
   2f138:	f7fc fcda 	bl	2baf0 <tud_descriptor_device_cb>
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
   2f13c:	2312      	movs	r3, #18
      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
   2f13e:	4602      	mov	r2, r0
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
   2f140:	a908      	add	r1, sp, #32
   2f142:	4640      	mov	r0, r8
   2f144:	f000 faec 	bl	2f720 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
   2f148:	2800      	cmp	r0, #0
   2f14a:	f47f ad85 	bne.w	2ec58 <tud_task_ext+0x20>
   2f14e:	e668      	b.n	2ee22 <tud_task_ext+0x1ea>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
   2f150:	4b32      	ldr	r3, [pc, #200]	@ (2f21c <tud_task_ext+0x5e4>)
   2f152:	2b00      	cmp	r3, #0
   2f154:	f43f ae65 	beq.w	2ee22 <tud_task_ext+0x1ea>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
   2f158:	f3af 8000 	nop.w
      TU_VERIFY(desc_qualifier);
   2f15c:	4602      	mov	r2, r0
   2f15e:	2800      	cmp	r0, #0
   2f160:	f43f ae5f 	beq.w	2ee22 <tud_task_ext+0x1ea>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
   2f164:	7813      	ldrb	r3, [r2, #0]
   2f166:	4640      	mov	r0, r8
   2f168:	a908      	add	r1, sp, #32
   2f16a:	f000 fad9 	bl	2f720 <tud_control_xfer>
        if ( !process_control_request(event.rhport, &event.setup_received) )
   2f16e:	2800      	cmp	r0, #0
   2f170:	f47f ad72 	bne.w	2ec58 <tud_task_ext+0x20>
   2f174:	e655      	b.n	2ee22 <tud_task_ext+0x1ea>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
   2f176:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
   2f17a:	f7fc fccf 	bl	2bb1c <tud_descriptor_string_cb>
      TU_VERIFY(desc_str);
   2f17e:	4602      	mov	r2, r0
   2f180:	2800      	cmp	r0, #0
   2f182:	d1ef      	bne.n	2f164 <tud_task_ext+0x52c>
   2f184:	e64d      	b.n	2ee22 <tud_task_ext+0x1ea>
      if (!tud_descriptor_bos_cb) return false;
   2f186:	4b26      	ldr	r3, [pc, #152]	@ (2f220 <tud_task_ext+0x5e8>)
   2f188:	2b00      	cmp	r3, #0
   2f18a:	f43f ae4a 	beq.w	2ee22 <tud_task_ext+0x1ea>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
   2f18e:	f7fc fcc1 	bl	2bb14 <tud_descriptor_bos_cb>
      TU_ASSERT(desc_bos);
   2f192:	4602      	mov	r2, r0
   2f194:	2800      	cmp	r0, #0
   2f196:	d1c6      	bne.n	2f126 <tud_task_ext+0x4ee>
   2f198:	e63c      	b.n	2ee14 <tud_task_ext+0x1dc>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
   2f19a:	1c51      	adds	r1, r2, #1
   2f19c:	4299      	cmp	r1, r3
   2f19e:	f6ff ae40 	blt.w	2ee22 <tud_task_ext+0x1ea>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2f1a2:	4e1b      	ldr	r6, [pc, #108]	@ (2f210 <tud_task_ext+0x5d8>)
   2f1a4:	1a9b      	subs	r3, r3, r2
   2f1a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2f1aa:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
        TU_VERIFY(driver);
   2f1ae:	e709      	b.n	2efc4 <tud_task_ext+0x38c>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
   2f1b0:	f8bd 7022 	ldrh.w	r7, [sp, #34]	@ 0x22
   2f1b4:	b94f      	cbnz	r7, 2f1ca <tud_task_ext+0x592>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
   2f1b6:	2a01      	cmp	r2, #1
  rhport = _usbd_rhport;
   2f1b8:	f89a 0000 	ldrb.w	r0, [sl]
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
   2f1bc:	d03c      	beq.n	2f238 <tud_task_ext+0x600>
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
   2f1be:	18e7      	adds	r7, r4, r3
   2f1c0:	4467      	add	r7, ip
   2f1c2:	3718      	adds	r7, #24
   2f1c4:	79fb      	ldrb	r3, [r7, #7]
   2f1c6:	079b      	lsls	r3, r3, #30
   2f1c8:	d513      	bpl.n	2f1f2 <tud_task_ext+0x5ba>
            if (driver)
   2f1ca:	2e00      	cmp	r6, #0
   2f1cc:	f43f ad44 	beq.w	2ec58 <tud_task_ext+0x20>
  usbd_control_set_complete_callback(driver->control_xfer_cb);
   2f1d0:	68f0      	ldr	r0, [r6, #12]
   2f1d2:	f000 fae7 	bl	2f7a4 <usbd_control_set_complete_callback>
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
   2f1d6:	68f3      	ldr	r3, [r6, #12]
   2f1d8:	aa08      	add	r2, sp, #32
   2f1da:	2101      	movs	r1, #1
   2f1dc:	4640      	mov	r0, r8
   2f1de:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
   2f1e0:	2000      	movs	r0, #0
   2f1e2:	f000 fadf 	bl	2f7a4 <usbd_control_set_complete_callback>
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
   2f1e6:	f894 3020 	ldrb.w	r3, [r4, #32]
   2f1ea:	07da      	lsls	r2, r3, #31
   2f1ec:	f53f ad34 	bmi.w	2ec58 <tud_task_ext+0x20>
   2f1f0:	e677      	b.n	2eee2 <tud_task_ext+0x2aa>
    dcd_edpt_stall(rhport, ep_addr);
   2f1f2:	f000 fec5 	bl	2ff80 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
   2f1f6:	79fb      	ldrb	r3, [r7, #7]
   2f1f8:	f043 0302 	orr.w	r3, r3, #2
   2f1fc:	71fb      	strb	r3, [r7, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
   2f1fe:	79fb      	ldrb	r3, [r7, #7]
   2f200:	f043 0301 	orr.w	r3, r3, #1
   2f204:	71fb      	strb	r3, [r7, #7]
   2f206:	e7e0      	b.n	2f1ca <tud_task_ext+0x592>
   2f208:	1005381c 	.word	0x1005381c
   2f20c:	10053820 	.word	0x10053820
   2f210:	000478ac 	.word	0x000478ac
   2f214:	0002bba1 	.word	0x0002bba1
	...
   2f220:	0002bb15 	.word	0x0002bb15
              tud_control_xfer(rhport, p_request, &alternate, 1);
   2f224:	a908      	add	r1, sp, #32
   2f226:	4640      	mov	r0, r8
   2f228:	2301      	movs	r3, #1
   2f22a:	f10d 021a 	add.w	r2, sp, #26
              uint8_t alternate = 0;
   2f22e:	f88d 601a 	strb.w	r6, [sp, #26]
              tud_control_xfer(rhport, p_request, &alternate, 1);
   2f232:	f000 fa75 	bl	2f720 <tud_control_xfer>
   2f236:	e50f      	b.n	2ec58 <tud_task_ext+0x20>
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
   2f238:	4423      	add	r3, r4
   2f23a:	4463      	add	r3, ip
   2f23c:	f103 0218 	add.w	r2, r3, #24
   2f240:	7fdb      	ldrb	r3, [r3, #31]
   2f242:	079b      	lsls	r3, r3, #30
   2f244:	d5c1      	bpl.n	2f1ca <tud_task_ext+0x592>
   2f246:	9200      	str	r2, [sp, #0]
    dcd_edpt_clear_stall(rhport, ep_addr);
   2f248:	f000 fea0 	bl	2ff8c <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
   2f24c:	9a00      	ldr	r2, [sp, #0]
   2f24e:	79d3      	ldrb	r3, [r2, #7]
   2f250:	f367 0341 	bfi	r3, r7, #1, #1
   2f254:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
   2f256:	79d3      	ldrb	r3, [r2, #7]
   2f258:	f367 0300 	bfi	r3, r7, #0, #1
   2f25c:	71d3      	strb	r3, [r2, #7]
   2f25e:	e7b4      	b.n	2f1ca <tud_task_ext+0x592>
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
   2f260:	1e70      	subs	r0, r6, #1
   2f262:	b2c0      	uxtb	r0, r0
   2f264:	f7fc fc48 	bl	2baf8 <tud_descriptor_configuration_cb>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
   2f268:	4603      	mov	r3, r0
   2f26a:	2800      	cmp	r0, #0
   2f26c:	d06d      	beq.n	2f34a <tud_task_ext+0x712>
   2f26e:	7842      	ldrb	r2, [r0, #1]
   2f270:	2a02      	cmp	r2, #2
   2f272:	d16a      	bne.n	2f34a <tud_task_ext+0x712>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
   2f274:	79c1      	ldrb	r1, [r0, #7]
   2f276:	7820      	ldrb	r0, [r4, #0]
   2f278:	f3c1 1240 	ubfx	r2, r1, #5, #1
   2f27c:	0112      	lsls	r2, r2, #4
   2f27e:	f3c1 1180 	ubfx	r1, r1, #6, #1
   2f282:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
   2f286:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   2f28a:	4302      	orrs	r2, r0
   2f28c:	7022      	strb	r2, [r4, #0]
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
   2f28e:	885a      	ldrh	r2, [r3, #2]
   2f290:	f8cd 8008 	str.w	r8, [sp, #8]
   2f294:	189a      	adds	r2, r3, r2
   2f296:	9203      	str	r2, [sp, #12]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
   2f298:	f103 0709 	add.w	r7, r3, #9
  while( p_desc < desc_end )
   2f29c:	9604      	str	r6, [sp, #16]
   2f29e:	9b03      	ldr	r3, [sp, #12]
   2f2a0:	42bb      	cmp	r3, r7
   2f2a2:	d960      	bls.n	2f366 <tud_task_ext+0x72e>
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
   2f2a4:	787b      	ldrb	r3, [r7, #1]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
   2f2a6:	2b0b      	cmp	r3, #11
   2f2a8:	d058      	beq.n	2f35c <tud_task_ext+0x724>
    uint8_t assoc_itf_count = 1;
   2f2aa:	2101      	movs	r1, #1
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
   2f2ac:	2b04      	cmp	r3, #4
   2f2ae:	d14c      	bne.n	2f34a <tud_task_ext+0x712>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
   2f2b0:	9b03      	ldr	r3, [sp, #12]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
   2f2b2:	9105      	str	r1, [sp, #20]
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
   2f2b4:	1bdb      	subs	r3, r3, r7
   2f2b6:	b29b      	uxth	r3, r3
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
   2f2b8:	2600      	movs	r6, #0
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
   2f2ba:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
   2f2bc:	4b3c      	ldr	r3, [pc, #240]	@ (2f3b0 <tud_task_ext+0x778>)
   2f2be:	9600      	str	r6, [sp, #0]
   2f2c0:	4632      	mov	r2, r6
   2f2c2:	781b      	ldrb	r3, [r3, #0]
   2f2c4:	463e      	mov	r6, r7
   2f2c6:	4617      	mov	r7, r2
   2f2c8:	e019      	b.n	2f2fe <tud_task_ext+0x6c6>
    driver = &_app_driver[drvid];
   2f2ca:	4b3a      	ldr	r3, [pc, #232]	@ (2f3b4 <tud_task_ext+0x77c>)
   2f2cc:	681b      	ldr	r3, [r3, #0]
      TU_ASSERT(driver);
   2f2ce:	eb13 08c2 	adds.w	r8, r3, r2, lsl #3
   2f2d2:	d03a      	beq.n	2f34a <tud_task_ext+0x712>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
   2f2d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2f2d8:	9a01      	ldr	r2, [sp, #4]
   2f2da:	9802      	ldr	r0, [sp, #8]
   2f2dc:	4631      	mov	r1, r6
   2f2de:	4798      	blx	r3
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
   2f2e0:	2808      	cmp	r0, #8
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
   2f2e2:	4602      	mov	r2, r0
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
   2f2e4:	f107 0301 	add.w	r3, r7, #1
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
   2f2e8:	d902      	bls.n	2f2f0 <tud_task_ext+0x6b8>
   2f2ea:	9901      	ldr	r1, [sp, #4]
   2f2ec:	4281      	cmp	r1, r0
   2f2ee:	d213      	bcs.n	2f318 <tud_task_ext+0x6e0>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
   2f2f0:	b2df      	uxtb	r7, r3
   2f2f2:	4b2f      	ldr	r3, [pc, #188]	@ (2f3b0 <tud_task_ext+0x778>)
   2f2f4:	9700      	str	r7, [sp, #0]
   2f2f6:	781b      	ldrb	r3, [r3, #0]
   2f2f8:	1c5a      	adds	r2, r3, #1
   2f2fa:	4297      	cmp	r7, r2
   2f2fc:	dc25      	bgt.n	2f34a <tud_task_ext+0x712>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2f2fe:	9a00      	ldr	r2, [sp, #0]
  if ( drvid < _app_driver_count ) {
   2f300:	429f      	cmp	r7, r3
    driver = &_usbd_driver[drvid - _app_driver_count];
   2f302:	eba2 0803 	sub.w	r8, r2, r3
   2f306:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    driver = &_app_driver[drvid];
   2f30a:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  if ( drvid < _app_driver_count ) {
   2f30e:	d3dc      	bcc.n	2f2ca <tud_task_ext+0x692>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2f310:	4b29      	ldr	r3, [pc, #164]	@ (2f3b8 <tud_task_ext+0x780>)
   2f312:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
      TU_ASSERT(driver);
   2f316:	e7dd      	b.n	2f2d4 <tud_task_ext+0x69c>
        if ( assoc_itf_count == 1)
   2f318:	9905      	ldr	r1, [sp, #20]
   2f31a:	463b      	mov	r3, r7
   2f31c:	2901      	cmp	r1, #1
   2f31e:	4637      	mov	r7, r6
   2f320:	461e      	mov	r6, r3
   2f322:	d039      	beq.n	2f398 <tud_task_ext+0x760>
        for(uint8_t i=0; i<assoc_itf_count; i++)
   2f324:	b349      	cbz	r1, 2f37a <tud_task_ext+0x742>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
   2f326:	f897 e002 	ldrb.w	lr, [r7, #2]
   2f32a:	2300      	movs	r3, #0
   2f32c:	e003      	b.n	2f336 <tud_task_ext+0x6fe>
          _usbd_dev.itf2drv[itf_num] = drv_id;
   2f32e:	70c6      	strb	r6, [r0, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
   2f330:	b2d8      	uxtb	r0, r3
   2f332:	4288      	cmp	r0, r1
   2f334:	d221      	bcs.n	2f37a <tud_task_ext+0x742>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
   2f336:	eb0e 0003 	add.w	r0, lr, r3
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
   2f33a:	fa54 f080 	uxtab	r0, r4, r0
        for(uint8_t i=0; i<assoc_itf_count; i++)
   2f33e:	3301      	adds	r3, #1
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
   2f340:	f890 c003 	ldrb.w	ip, [r0, #3]
   2f344:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
   2f348:	d0f1      	beq.n	2f32e <tud_task_ext+0x6f6>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
   2f34a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2f34e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2f352:	07da      	lsls	r2, r3, #31
   2f354:	f57f ad5e 	bpl.w	2ee14 <tud_task_ext+0x1dc>
   2f358:	be00      	bkpt	0x0000
   2f35a:	e55b      	b.n	2ee14 <tud_task_ext+0x1dc>
  return desc8 + desc8[DESC_OFFSET_LEN];
   2f35c:	783b      	ldrb	r3, [r7, #0]
      assoc_itf_count = desc_iad->bInterfaceCount;
   2f35e:	78f9      	ldrb	r1, [r7, #3]
   2f360:	441f      	add	r7, r3
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
   2f362:	787b      	ldrb	r3, [r7, #1]
   2f364:	e7a2      	b.n	2f2ac <tud_task_ext+0x674>
              if ( tud_mount_cb ) tud_mount_cb();
   2f366:	4b15      	ldr	r3, [pc, #84]	@ (2f3bc <tud_task_ext+0x784>)
   2f368:	f8dd 8008 	ldr.w	r8, [sp, #8]
   2f36c:	9e04      	ldr	r6, [sp, #16]
   2f36e:	2b00      	cmp	r3, #0
   2f370:	f43f ae5f 	beq.w	2f032 <tud_task_ext+0x3fa>
   2f374:	f7fc fc0e 	bl	2bb94 <tud_mount_cb>
   2f378:	e65b      	b.n	2f032 <tud_task_ext+0x3fa>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
   2f37a:	4633      	mov	r3, r6
   2f37c:	4639      	mov	r1, r7
   2f37e:	4810      	ldr	r0, [pc, #64]	@ (2f3c0 <tud_task_ext+0x788>)
   2f380:	9201      	str	r2, [sp, #4]
   2f382:	f7ff f989 	bl	2e698 <tu_edpt_bind_driver>
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
   2f386:	4b0a      	ldr	r3, [pc, #40]	@ (2f3b0 <tud_task_ext+0x778>)
        p_desc += drv_len;
   2f388:	9a01      	ldr	r2, [sp, #4]
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
   2f38a:	781b      	ldrb	r3, [r3, #0]
        p_desc += drv_len;
   2f38c:	4417      	add	r7, r2
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
   2f38e:	9a00      	ldr	r2, [sp, #0]
   2f390:	3301      	adds	r3, #1
   2f392:	429a      	cmp	r2, r3
   2f394:	dd83      	ble.n	2f29e <tud_task_ext+0x666>
   2f396:	e7d8      	b.n	2f34a <tud_task_ext+0x712>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
   2f398:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2f39c:	4b09      	ldr	r3, [pc, #36]	@ (2f3c4 <tud_task_ext+0x78c>)
   2f39e:	4298      	cmp	r0, r3
   2f3a0:	bf08      	it	eq
   2f3a2:	2102      	moveq	r1, #2
   2f3a4:	e7bf      	b.n	2f326 <tud_task_ext+0x6ee>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
   2f3a6:	f7fc fba7 	bl	2baf8 <tud_descriptor_configuration_cb>
   2f3aa:	4602      	mov	r2, r0
   2f3ac:	e6b8      	b.n	2f120 <tud_task_ext+0x4e8>
   2f3ae:	bf00      	nop
   2f3b0:	1005381c 	.word	0x1005381c
   2f3b4:	10053820 	.word	0x10053820
   2f3b8:	000478ac 	.word	0x000478ac
   2f3bc:	0002bb95 	.word	0x0002bb95
   2f3c0:	10053837 	.word	0x10053837
   2f3c4:	0002e2c1 	.word	0x0002e2c1

0002f3c8 <dcd_event_handler>:
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
   2f3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (event->event_id) {
   2f3cc:	7843      	ldrb	r3, [r0, #1]
   2f3ce:	3b02      	subs	r3, #2
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
   2f3d0:	b084      	sub	sp, #16
   2f3d2:	4607      	mov	r7, r0
   2f3d4:	460c      	mov	r4, r1
  switch (event->event_id) {
   2f3d6:	2b03      	cmp	r3, #3
   2f3d8:	d812      	bhi.n	2f400 <dcd_event_handler+0x38>
   2f3da:	e8df f003 	tbb	[pc, r3]
   2f3de:	5502      	.short	0x5502
   2f3e0:	3b48      	.short	0x3b48
      _usbd_dev.connected = 0;
   2f3e2:	4b5b      	ldr	r3, [pc, #364]	@ (2f550 <dcd_event_handler+0x188>)
   2f3e4:	781a      	ldrb	r2, [r3, #0]
   2f3e6:	f022 0201 	bic.w	r2, r2, #1
   2f3ea:	701a      	strb	r2, [r3, #0]
      _usbd_dev.addressed = 0;
   2f3ec:	781a      	ldrb	r2, [r3, #0]
      _usbd_dev.cfg_num = 0;
   2f3ee:	2100      	movs	r1, #0
      _usbd_dev.addressed = 0;
   2f3f0:	f022 0202 	bic.w	r2, r2, #2
   2f3f4:	701a      	strb	r2, [r3, #0]
      _usbd_dev.cfg_num = 0;
   2f3f6:	7059      	strb	r1, [r3, #1]
      _usbd_dev.suspended = 0;
   2f3f8:	781a      	ldrb	r2, [r3, #0]
   2f3fa:	f361 0282 	bfi	r2, r1, #2, #1
   2f3fe:	701a      	strb	r2, [r3, #0]
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
   2f400:	4b54      	ldr	r3, [pc, #336]	@ (2f554 <dcd_event_handler+0x18c>)
   2f402:	681e      	ldr	r6, [r3, #0]

  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
   2f404:	b9bc      	cbnz	r4, 2f436 <dcd_event_handler+0x6e>
  qhdl->interrupt_set(false);
   2f406:	4635      	mov	r5, r6
   2f408:	4620      	mov	r0, r4
   2f40a:	f855 3b04 	ldr.w	r3, [r5], #4
   2f40e:	4798      	blx	r3
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
   2f410:	4628      	mov	r0, r5
   2f412:	4639      	mov	r1, r7
   2f414:	f7ff fa80 	bl	2e918 <tu_fifo_write>
  qhdl->interrupt_set(true);
   2f418:	6833      	ldr	r3, [r6, #0]
  bool success = tu_fifo_write(&qhdl->ff, data);
   2f41a:	4605      	mov	r5, r0
  qhdl->interrupt_set(true);
   2f41c:	2001      	movs	r0, #1
   2f41e:	4798      	blx	r3

  if (!in_isr) {
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
   2f420:	b185      	cbz	r5, 2f444 <dcd_event_handler+0x7c>
  if (tud_event_hook_cb) tud_event_hook_cb(event->rhport, event->event_id, in_isr);
   2f422:	4b4d      	ldr	r3, [pc, #308]	@ (2f558 <dcd_event_handler+0x190>)
   2f424:	b123      	cbz	r3, 2f430 <dcd_event_handler+0x68>
   2f426:	7879      	ldrb	r1, [r7, #1]
   2f428:	7838      	ldrb	r0, [r7, #0]
   2f42a:	4622      	mov	r2, r4
   2f42c:	f3af 8000 	nop.w
}
   2f430:	b004      	add	sp, #16
   2f432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool success = tu_fifo_write(&qhdl->ff, data);
   2f436:	4639      	mov	r1, r7
   2f438:	1d30      	adds	r0, r6, #4
   2f43a:	f7ff fa6d 	bl	2e918 <tu_fifo_write>
   2f43e:	4605      	mov	r5, r0
  TU_ASSERT(success);
   2f440:	2d00      	cmp	r5, #0
   2f442:	d1ee      	bne.n	2f422 <dcd_event_handler+0x5a>
   2f444:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2f448:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2f44c:	07db      	lsls	r3, r3, #31
   2f44e:	d5e8      	bpl.n	2f422 <dcd_event_handler+0x5a>
   2f450:	be00      	bkpt	0x0000
   2f452:	e7e6      	b.n	2f422 <dcd_event_handler+0x5a>
      if (_usbd_dev.connected) {
   2f454:	4b3e      	ldr	r3, [pc, #248]	@ (2f550 <dcd_event_handler+0x188>)
   2f456:	781a      	ldrb	r2, [r3, #0]
   2f458:	07d0      	lsls	r0, r2, #31
   2f45a:	d5e9      	bpl.n	2f430 <dcd_event_handler+0x68>
        _usbd_dev.suspended = 0;
   2f45c:	781a      	ldrb	r2, [r3, #0]
   2f45e:	f022 0204 	bic.w	r2, r2, #4
   2f462:	701a      	strb	r2, [r3, #0]
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
   2f464:	4b3b      	ldr	r3, [pc, #236]	@ (2f554 <dcd_event_handler+0x18c>)
   2f466:	681e      	ldr	r6, [r3, #0]
  if (!in_isr) {
   2f468:	2c00      	cmp	r4, #0
   2f46a:	d1e4      	bne.n	2f436 <dcd_event_handler+0x6e>
   2f46c:	e7cb      	b.n	2f406 <dcd_event_handler+0x3e>
      if (_usbd_dev.connected) {
   2f46e:	4b38      	ldr	r3, [pc, #224]	@ (2f550 <dcd_event_handler+0x188>)
   2f470:	781a      	ldrb	r2, [r3, #0]
   2f472:	07d5      	lsls	r5, r2, #31
   2f474:	d5dc      	bpl.n	2f430 <dcd_event_handler+0x68>
        _usbd_dev.suspended = 1;
   2f476:	781a      	ldrb	r2, [r3, #0]
   2f478:	f042 0204 	orr.w	r2, r2, #4
   2f47c:	701a      	strb	r2, [r3, #0]
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
   2f47e:	4b35      	ldr	r3, [pc, #212]	@ (2f554 <dcd_event_handler+0x18c>)
   2f480:	681e      	ldr	r6, [r3, #0]
   2f482:	2c00      	cmp	r4, #0
   2f484:	d1d7      	bne.n	2f436 <dcd_event_handler+0x6e>
   2f486:	e7be      	b.n	2f406 <dcd_event_handler+0x3e>
      if (_usbd_dev.suspended) {
   2f488:	4b31      	ldr	r3, [pc, #196]	@ (2f550 <dcd_event_handler+0x188>)
   2f48a:	781a      	ldrb	r2, [r3, #0]
   2f48c:	0751      	lsls	r1, r2, #29
   2f48e:	d423      	bmi.n	2f4d8 <dcd_event_handler+0x110>
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
   2f490:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 2f564 <dcd_event_handler+0x19c>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2f494:	4e31      	ldr	r6, [pc, #196]	@ (2f55c <dcd_event_handler+0x194>)
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
   2f496:	f898 2000 	ldrb.w	r2, [r8]
    driver = &_app_driver[drvid];
   2f49a:	4d31      	ldr	r5, [pc, #196]	@ (2f560 <dcd_event_handler+0x198>)
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
   2f49c:	2400      	movs	r4, #0
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
   2f49e:	4623      	mov	r3, r4
   2f4a0:	e010      	b.n	2f4c4 <dcd_event_handler+0xfc>
    driver = &_app_driver[drvid];
   2f4a2:	682b      	ldr	r3, [r5, #0]
        if (driver && driver->sof) {
   2f4a4:	eb13 03c1 	adds.w	r3, r3, r1, lsl #3
   2f4a8:	d004      	beq.n	2f4b4 <dcd_event_handler+0xec>
   2f4aa:	695b      	ldr	r3, [r3, #20]
   2f4ac:	b113      	cbz	r3, 2f4b4 <dcd_event_handler+0xec>
          driver->sof(event->rhport, event->sof.frame_count);
   2f4ae:	6879      	ldr	r1, [r7, #4]
   2f4b0:	7838      	ldrb	r0, [r7, #0]
   2f4b2:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
   2f4b4:	f898 2000 	ldrb.w	r2, [r8]
   2f4b8:	3401      	adds	r4, #1
   2f4ba:	b2e4      	uxtb	r4, r4
   2f4bc:	1c51      	adds	r1, r2, #1
   2f4be:	42a1      	cmp	r1, r4
   2f4c0:	4623      	mov	r3, r4
   2f4c2:	dbb5      	blt.n	2f430 <dcd_event_handler+0x68>
  if ( drvid < _app_driver_count ) {
   2f4c4:	4294      	cmp	r4, r2
    driver = &_app_driver[drvid];
   2f4c6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
  if ( drvid < _app_driver_count ) {
   2f4ca:	d3ea      	bcc.n	2f4a2 <dcd_event_handler+0xda>
    driver = &_usbd_driver[drvid - _app_driver_count];
   2f4cc:	1a9b      	subs	r3, r3, r2
   2f4ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2f4d2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
        if (driver && driver->sof) {
   2f4d6:	e7e8      	b.n	2f4aa <dcd_event_handler+0xe2>
        _usbd_dev.suspended = 0;
   2f4d8:	781a      	ldrb	r2, [r3, #0]
   2f4da:	f022 0204 	bic.w	r2, r2, #4
   2f4de:	701a      	strb	r2, [r3, #0]
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
   2f4e0:	4a1c      	ldr	r2, [pc, #112]	@ (2f554 <dcd_event_handler+0x18c>)
        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
   2f4e2:	2300      	movs	r3, #0
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
   2f4e4:	6816      	ldr	r6, [r2, #0]
        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
   2f4e6:	f8cd 3006 	str.w	r3, [sp, #6]
   2f4ea:	7802      	ldrb	r2, [r0, #0]
   2f4ec:	f8cd 300a 	str.w	r3, [sp, #10]
   2f4f0:	f8ad 300e 	strh.w	r3, [sp, #14]
   2f4f4:	2305      	movs	r3, #5
   2f4f6:	f88d 2004 	strb.w	r2, [sp, #4]
   2f4fa:	f88d 3005 	strb.w	r3, [sp, #5]
   2f4fe:	b184      	cbz	r4, 2f522 <dcd_event_handler+0x15a>
  bool success = tu_fifo_write(&qhdl->ff, data);
   2f500:	a901      	add	r1, sp, #4
   2f502:	1d30      	adds	r0, r6, #4
   2f504:	f7ff fa08 	bl	2e918 <tu_fifo_write>
   2f508:	4605      	mov	r5, r0
  TU_ASSERT(success);
   2f50a:	b1c5      	cbz	r5, 2f53e <dcd_event_handler+0x176>
  if (tud_event_hook_cb) tud_event_hook_cb(event->rhport, event->event_id, in_isr);
   2f50c:	4b12      	ldr	r3, [pc, #72]	@ (2f558 <dcd_event_handler+0x190>)
   2f50e:	2b00      	cmp	r3, #0
   2f510:	d0be      	beq.n	2f490 <dcd_event_handler+0xc8>
   2f512:	f89d 1005 	ldrb.w	r1, [sp, #5]
   2f516:	f89d 0004 	ldrb.w	r0, [sp, #4]
   2f51a:	4622      	mov	r2, r4
   2f51c:	f3af 8000 	nop.w
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
   2f520:	e7b6      	b.n	2f490 <dcd_event_handler+0xc8>
  qhdl->interrupt_set(false);
   2f522:	4635      	mov	r5, r6
   2f524:	4620      	mov	r0, r4
   2f526:	f855 3b04 	ldr.w	r3, [r5], #4
   2f52a:	4798      	blx	r3
  bool success = tu_fifo_write(&qhdl->ff, data);
   2f52c:	a901      	add	r1, sp, #4
   2f52e:	4628      	mov	r0, r5
   2f530:	f7ff f9f2 	bl	2e918 <tu_fifo_write>
  qhdl->interrupt_set(true);
   2f534:	6833      	ldr	r3, [r6, #0]
  bool success = tu_fifo_write(&qhdl->ff, data);
   2f536:	4605      	mov	r5, r0
  qhdl->interrupt_set(true);
   2f538:	2001      	movs	r0, #1
   2f53a:	4798      	blx	r3
}
   2f53c:	e7e5      	b.n	2f50a <dcd_event_handler+0x142>
  TU_ASSERT(success);
   2f53e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2f542:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2f546:	07da      	lsls	r2, r3, #31
   2f548:	d5e0      	bpl.n	2f50c <dcd_event_handler+0x144>
   2f54a:	be00      	bkpt	0x0000
   2f54c:	e7de      	b.n	2f50c <dcd_event_handler+0x144>
   2f54e:	bf00      	nop
   2f550:	10053824 	.word	0x10053824
   2f554:	10053758 	.word	0x10053758
   2f558:	00000000 	.word	0x00000000
   2f55c:	000478ac 	.word	0x000478ac
   2f560:	10053820 	.word	0x10053820
   2f564:	1005381c 	.word	0x1005381c

0002f568 <usbd_open_edpt_pair>:
{
   2f568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f56c:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  for(int i=0; i<ep_count; i++)
   2f570:	2a00      	cmp	r2, #0
   2f572:	d040      	beq.n	2f5f6 <usbd_open_edpt_pair+0x8e>
  rhport = _usbd_rhport;
   2f574:	4f21      	ldr	r7, [pc, #132]	@ (2f5fc <usbd_open_edpt_pair+0x94>)
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   2f576:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 2f600 <usbd_open_edpt_pair+0x98>
   2f57a:	460c      	mov	r4, r1
   2f57c:	461e      	mov	r6, r3
   2f57e:	4615      	mov	r5, r2
  for(int i=0; i<ep_count; i++)
   2f580:	f04f 0b00 	mov.w	fp, #0
   2f584:	e016      	b.n	2f5b4 <usbd_open_edpt_pair+0x4c>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   2f586:	f899 1002 	ldrb.w	r1, [r9, #2]
   2f58a:	f7ff f853 	bl	2e634 <tu_edpt_validate>
   2f58e:	b308      	cbz	r0, 2f5d4 <usbd_open_edpt_pair+0x6c>
  return dcd_edpt_open(rhport, desc_ep);
   2f590:	4621      	mov	r1, r4
   2f592:	4650      	mov	r0, sl
   2f594:	f000 fcd6 	bl	2ff44 <dcd_edpt_open>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
   2f598:	b318      	cbz	r0, 2f5e2 <usbd_open_edpt_pair+0x7a>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
   2f59a:	78a3      	ldrb	r3, [r4, #2]
   2f59c:	09da      	lsrs	r2, r3, #7
      (*ep_in) = desc_ep->bEndpointAddress;
   2f59e:	bf16      	itet	ne
   2f5a0:	9a0b      	ldrne	r2, [sp, #44]	@ 0x2c
      (*ep_out) = desc_ep->bEndpointAddress;
   2f5a2:	f888 3000 	strbeq.w	r3, [r8]
      (*ep_in) = desc_ep->bEndpointAddress;
   2f5a6:	7013      	strbne	r3, [r2, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
   2f5a8:	7823      	ldrb	r3, [r4, #0]
  for(int i=0; i<ep_count; i++)
   2f5aa:	f10b 0b01 	add.w	fp, fp, #1
   2f5ae:	45ab      	cmp	fp, r5
   2f5b0:	441c      	add	r4, r3
   2f5b2:	d020      	beq.n	2f5f6 <usbd_open_edpt_pair+0x8e>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
   2f5b4:	7863      	ldrb	r3, [r4, #1]
   2f5b6:	2b05      	cmp	r3, #5
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   2f5b8:	4620      	mov	r0, r4
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
   2f5ba:	d112      	bne.n	2f5e2 <usbd_open_edpt_pair+0x7a>
   2f5bc:	78e1      	ldrb	r1, [r4, #3]
   2f5be:	f001 0103 	and.w	r1, r1, #3
   2f5c2:	42b1      	cmp	r1, r6
   2f5c4:	d10d      	bne.n	2f5e2 <usbd_open_edpt_pair+0x7a>
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
   2f5c6:	78a3      	ldrb	r3, [r4, #2]
  rhport = _usbd_rhport;
   2f5c8:	f897 a000 	ldrb.w	sl, [r7]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
   2f5cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
   2f5d0:	2b05      	cmp	r3, #5
   2f5d2:	d9d8      	bls.n	2f586 <usbd_open_edpt_pair+0x1e>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   2f5d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2f5d8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2f5dc:	07da      	lsls	r2, r3, #31
   2f5de:	d500      	bpl.n	2f5e2 <usbd_open_edpt_pair+0x7a>
   2f5e0:	be00      	bkpt	0x0000
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
   2f5e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2f5e6:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2f5ea:	07db      	lsls	r3, r3, #31
   2f5ec:	d500      	bpl.n	2f5f0 <usbd_open_edpt_pair+0x88>
   2f5ee:	be00      	bkpt	0x0000
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
   2f5f0:	2000      	movs	r0, #0
}
   2f5f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
   2f5f6:	2001      	movs	r0, #1
}
   2f5f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f5fc:	1000cb64 	.word	0x1000cb64
   2f600:	10053824 	.word	0x10053824

0002f604 <usbd_edpt_open>:
{
   2f604:	b538      	push	{r3, r4, r5, lr}
   2f606:	788b      	ldrb	r3, [r1, #2]
  rhport = _usbd_rhport;
   2f608:	4a0e      	ldr	r2, [pc, #56]	@ (2f644 <usbd_edpt_open+0x40>)
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
   2f60a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
   2f60e:	2b05      	cmp	r3, #5
  rhport = _usbd_rhport;
   2f610:	7815      	ldrb	r5, [r2, #0]
  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
   2f612:	d908      	bls.n	2f626 <usbd_edpt_open+0x22>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   2f614:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2f618:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2f61c:	07db      	lsls	r3, r3, #31
   2f61e:	d500      	bpl.n	2f622 <usbd_edpt_open+0x1e>
   2f620:	be00      	bkpt	0x0000
}
   2f622:	2000      	movs	r0, #0
   2f624:	bd38      	pop	{r3, r4, r5, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
   2f626:	4b08      	ldr	r3, [pc, #32]	@ (2f648 <usbd_edpt_open+0x44>)
   2f628:	460c      	mov	r4, r1
   2f62a:	4608      	mov	r0, r1
   2f62c:	7899      	ldrb	r1, [r3, #2]
   2f62e:	f7ff f801 	bl	2e634 <tu_edpt_validate>
   2f632:	2800      	cmp	r0, #0
   2f634:	d0ee      	beq.n	2f614 <usbd_edpt_open+0x10>
  return dcd_edpt_open(rhport, desc_ep);
   2f636:	4621      	mov	r1, r4
   2f638:	4628      	mov	r0, r5
}
   2f63a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return dcd_edpt_open(rhport, desc_ep);
   2f63e:	f000 bc81 	b.w	2ff44 <dcd_edpt_open>
   2f642:	bf00      	nop
   2f644:	1000cb64 	.word	0x1000cb64
   2f648:	10053824 	.word	0x10053824

0002f64c <usbd_edpt_claim>:
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
   2f64c:	09cb      	lsrs	r3, r1, #7
   2f64e:	4805      	ldr	r0, [pc, #20]	@ (2f664 <usbd_edpt_claim+0x18>)
   2f650:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
   2f654:	331f      	adds	r3, #31
   2f656:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  return tu_edpt_claim(ep_state, _usbd_mutex);
   2f65a:	4418      	add	r0, r3
   2f65c:	2100      	movs	r1, #0
   2f65e:	f7fe bfbb 	b.w	2e5d8 <tu_edpt_claim>
   2f662:	bf00      	nop
   2f664:	10053824 	.word	0x10053824

0002f668 <usbd_edpt_release>:
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
   2f668:	09cb      	lsrs	r3, r1, #7
   2f66a:	4805      	ldr	r0, [pc, #20]	@ (2f680 <usbd_edpt_release+0x18>)
   2f66c:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
   2f670:	331f      	adds	r3, #31
   2f672:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  return tu_edpt_release(ep_state, _usbd_mutex);
   2f676:	4418      	add	r0, r3
   2f678:	2100      	movs	r1, #0
   2f67a:	f7fe bfc9 	b.w	2e610 <tu_edpt_release>
   2f67e:	bf00      	nop
   2f680:	10053824 	.word	0x10053824

0002f684 <usbd_edpt_xfer>:
{
   2f684:	b510      	push	{r4, lr}
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
   2f686:	4c18      	ldr	r4, [pc, #96]	@ (2f6e8 <usbd_edpt_xfer+0x64>)
  rhport = _usbd_rhport;
   2f688:	4818      	ldr	r0, [pc, #96]	@ (2f6ec <usbd_edpt_xfer+0x68>)
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
   2f68a:	f001 0e7f 	and.w	lr, r1, #127	@ 0x7f
   2f68e:	eb04 044e 	add.w	r4, r4, lr, lsl #1
   2f692:	eb04 14d1 	add.w	r4, r4, r1, lsr #7
   2f696:	3418      	adds	r4, #24
   2f698:	f894 c007 	ldrb.w	ip, [r4, #7]
  rhport = _usbd_rhport;
   2f69c:	7800      	ldrb	r0, [r0, #0]
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
   2f69e:	f01c 0f01 	tst.w	ip, #1
   2f6a2:	d008      	beq.n	2f6b6 <usbd_edpt_xfer+0x32>
   2f6a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2f6a8:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2f6ac:	07da      	lsls	r2, r3, #31
   2f6ae:	d500      	bpl.n	2f6b2 <usbd_edpt_xfer+0x2e>
    TU_BREAKPOINT();
   2f6b0:	be00      	bkpt	0x0000
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
   2f6b2:	2000      	movs	r0, #0
}
   2f6b4:	bd10      	pop	{r4, pc}
  _usbd_dev.ep_status[epnum][dir].busy = 1;
   2f6b6:	f894 c007 	ldrb.w	ip, [r4, #7]
   2f6ba:	f04c 0c01 	orr.w	ip, ip, #1
   2f6be:	f884 c007 	strb.w	ip, [r4, #7]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
   2f6c2:	f000 fc51 	bl	2ff68 <dcd_edpt_xfer>
   2f6c6:	2800      	cmp	r0, #0
   2f6c8:	d1f4      	bne.n	2f6b4 <usbd_edpt_xfer+0x30>
    _usbd_dev.ep_status[epnum][dir].busy = 0;
   2f6ca:	79e2      	ldrb	r2, [r4, #7]
   2f6cc:	f360 0200 	bfi	r2, r0, #0, #1
   2f6d0:	71e2      	strb	r2, [r4, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
   2f6d2:	79e2      	ldrb	r2, [r4, #7]
    TU_BREAKPOINT();
   2f6d4:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
   2f6d8:	f360 0282 	bfi	r2, r0, #2, #1
   2f6dc:	71e2      	strb	r2, [r4, #7]
    TU_BREAKPOINT();
   2f6de:	f8d1 3df0 	ldr.w	r3, [r1, #3568]	@ 0xdf0
   2f6e2:	07db      	lsls	r3, r3, #31
   2f6e4:	d5e5      	bpl.n	2f6b2 <usbd_edpt_xfer+0x2e>
   2f6e6:	e7e3      	b.n	2f6b0 <usbd_edpt_xfer+0x2c>
   2f6e8:	10053824 	.word	0x10053824
   2f6ec:	1000cb64 	.word	0x1000cb64

0002f6f0 <tud_control_status>:
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
}

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
   2f6f0:	b410      	push	{r4}
  _ctrl_xfer.request       = (*request);
   2f6f2:	4c0a      	ldr	r4, [pc, #40]	@ (2f71c <tud_control_status+0x2c>)
{
   2f6f4:	460a      	mov	r2, r1
   2f6f6:	4684      	mov	ip, r0
  _ctrl_xfer.request       = (*request);
   2f6f8:	6808      	ldr	r0, [r1, #0]
   2f6fa:	6849      	ldr	r1, [r1, #4]
   2f6fc:	4623      	mov	r3, r4
   2f6fe:	c303      	stmia	r3!, {r0, r1}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   2f700:	7811      	ldrb	r1, [r2, #0]
  _ctrl_xfer.buffer        = NULL;
   2f702:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   2f704:	43c9      	mvns	r1, r1
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
   2f706:	e9c4 3302 	strd	r3, r3, [r4, #8]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
   2f70a:	4660      	mov	r0, ip

  return _status_stage_xact(rhport, request);
}
   2f70c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
   2f710:	f001 0180 	and.w	r1, r1, #128	@ 0x80
   2f714:	461a      	mov	r2, r3
   2f716:	f7ff bfb5 	b.w	2f684 <usbd_edpt_xfer>
   2f71a:	bf00      	nop
   2f71c:	10053850 	.word	0x10053850

0002f720 <tud_control_xfer>:
}

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
   2f720:	b538      	push	{r3, r4, r5, lr}
  _ctrl_xfer.request       = (*request);
   2f722:	4c1a      	ldr	r4, [pc, #104]	@ (2f78c <tud_control_xfer+0x6c>)
{
   2f724:	468c      	mov	ip, r1
   2f726:	4605      	mov	r5, r0
  _ctrl_xfer.request       = (*request);
   2f728:	6808      	ldr	r0, [r1, #0]
   2f72a:	6849      	ldr	r1, [r1, #4]
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
   2f72c:	60a2      	str	r2, [r4, #8]
  _ctrl_xfer.request       = (*request);
   2f72e:	46a6      	mov	lr, r4
   2f730:	e8ae 0003 	stmia.w	lr!, {r0, r1}
  _ctrl_xfer.total_xferred = 0U;
   2f734:	2100      	movs	r1, #0
   2f736:	81e1      	strh	r1, [r4, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
   2f738:	f8bc 0006 	ldrh.w	r0, [ip, #6]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
   2f73c:	4283      	cmp	r3, r0
   2f73e:	bf28      	it	cs
   2f740:	4603      	movcs	r3, r0
   2f742:	81a3      	strh	r3, [r4, #12]

  if (request->wLength > 0U)
   2f744:	b188      	cbz	r0, 2f76a <tud_control_xfer+0x4a>
  {
    if(_ctrl_xfer.data_len > 0U)
   2f746:	b1f3      	cbz	r3, 2f786 <tud_control_xfer+0x66>
    {
      TU_ASSERT(buffer);
   2f748:	b132      	cbz	r2, 2f758 <tud_control_xfer+0x38>
  uint8_t ep_addr =  (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) ? EDPT_CTRL_IN : EDPT_CTRL_OUT;
   2f74a:	7821      	ldrb	r1, [r4, #0]
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_xfer.buffer : NULL, xact_len);
   2f74c:	4628      	mov	r0, r5
  uint8_t ep_addr =  (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) ? EDPT_CTRL_IN : EDPT_CTRL_OUT;
   2f74e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_xfer.buffer : NULL, xact_len);
   2f752:	f7ff ff97 	bl	2f684 <usbd_edpt_xfer>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
   2f756:	b9a0      	cbnz	r0, 2f782 <tud_control_xfer+0x62>
   2f758:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2f75c:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2f760:	07db      	lsls	r3, r3, #31
   2f762:	d500      	bpl.n	2f766 <tud_control_xfer+0x46>
   2f764:	be00      	bkpt	0x0000
      TU_ASSERT(buffer);
   2f766:	2000      	movs	r0, #0
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
   2f768:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   2f76a:	f89c 1000 	ldrb.w	r1, [ip]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
   2f76e:	4603      	mov	r3, r0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   2f770:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_xfer.buffer : NULL, xact_len);
   2f772:	461a      	mov	r2, r3
  uint8_t ep_addr =  (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) ? EDPT_CTRL_IN : EDPT_CTRL_OUT;
   2f774:	f001 0180 	and.w	r1, r1, #128	@ 0x80
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_xfer.buffer : NULL, xact_len);
   2f778:	4628      	mov	r0, r5
   2f77a:	f7ff ff83 	bl	2f684 <usbd_edpt_xfer>
    TU_ASSERT( _data_stage_xact(rhport) );
   2f77e:	2800      	cmp	r0, #0
   2f780:	d0ea      	beq.n	2f758 <tud_control_xfer+0x38>
  return true;
   2f782:	2001      	movs	r0, #1
}
   2f784:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ep_addr =  (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) ? EDPT_CTRL_IN : EDPT_CTRL_OUT;
   2f786:	7821      	ldrb	r1, [r4, #0]
   2f788:	e7f3      	b.n	2f772 <tud_control_xfer+0x52>
   2f78a:	bf00      	nop
   2f78c:	10053850 	.word	0x10053850

0002f790 <usbd_control_reset>:
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
  tu_varclr(&_ctrl_xfer);
   2f790:	4b03      	ldr	r3, [pc, #12]	@ (2f7a0 <usbd_control_reset+0x10>)
   2f792:	2200      	movs	r2, #0
   2f794:	e9c3 2200 	strd	r2, r2, [r3]
   2f798:	e9c3 2202 	strd	r2, r2, [r3, #8]
   2f79c:	611a      	str	r2, [r3, #16]
}
   2f79e:	4770      	bx	lr
   2f7a0:	10053850 	.word	0x10053850

0002f7a4 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
   2f7a4:	4b01      	ldr	r3, [pc, #4]	@ (2f7ac <usbd_control_set_complete_callback+0x8>)
   2f7a6:	6118      	str	r0, [r3, #16]
}
   2f7a8:	4770      	bx	lr
   2f7aa:	bf00      	nop
   2f7ac:	10053850 	.word	0x10053850

0002f7b0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
   2f7b0:	4603      	mov	r3, r0
  _ctrl_xfer.request       = (*request);
   2f7b2:	4a04      	ldr	r2, [pc, #16]	@ (2f7c4 <usbd_control_set_request+0x14>)
   2f7b4:	6859      	ldr	r1, [r3, #4]
   2f7b6:	6800      	ldr	r0, [r0, #0]
   2f7b8:	4613      	mov	r3, r2
   2f7ba:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
   2f7bc:	2300      	movs	r3, #0
  _ctrl_xfer.total_xferred = 0;
  _ctrl_xfer.data_len      = 0;
   2f7be:	e9c2 3302 	strd	r3, r3, [r2, #8]
}
   2f7c2:	4770      	bx	lr
   2f7c4:	10053850 	.word	0x10053850

0002f7c8 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
   2f7c8:	b538      	push	{r3, r4, r5, lr}
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
   2f7ca:	4c2c      	ldr	r4, [pc, #176]	@ (2f87c <usbd_control_xfer_cb+0xb4>)
   2f7cc:	f894 e000 	ldrb.w	lr, [r4]
   2f7d0:	09c9      	lsrs	r1, r1, #7
   2f7d2:	ebb1 1fde 	cmp.w	r1, lr, lsr #7
{
   2f7d6:	4605      	mov	r5, r0
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
   2f7d8:	d016      	beq.n	2f808 <usbd_control_xfer_cb+0x40>
  {
    TU_ASSERT(0 == xferred_bytes);
   2f7da:	b143      	cbz	r3, 2f7ee <usbd_control_xfer_cb+0x26>
    }

    if ( is_ok )
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
   2f7dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2f7e0:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2f7e4:	07db      	lsls	r3, r3, #31
   2f7e6:	d500      	bpl.n	2f7ea <usbd_control_xfer_cb+0x22>
   2f7e8:	be00      	bkpt	0x0000
    TU_ASSERT(0 == xferred_bytes);
   2f7ea:	2000      	movs	r0, #0
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
   2f7ec:	bd38      	pop	{r3, r4, r5, pc}
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
   2f7ee:	4b24      	ldr	r3, [pc, #144]	@ (2f880 <usbd_control_xfer_cb+0xb8>)
   2f7f0:	b113      	cbz	r3, 2f7f8 <usbd_control_xfer_cb+0x30>
   2f7f2:	4621      	mov	r1, r4
   2f7f4:	f3af 8000 	nop.w
    if (_ctrl_xfer.complete_cb)
   2f7f8:	6923      	ldr	r3, [r4, #16]
   2f7fa:	b11b      	cbz	r3, 2f804 <usbd_control_xfer_cb+0x3c>
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
   2f7fc:	4a1f      	ldr	r2, [pc, #124]	@ (2f87c <usbd_control_xfer_cb+0xb4>)
   2f7fe:	2103      	movs	r1, #3
   2f800:	4628      	mov	r0, r5
   2f802:	4798      	blx	r3
    return true;
   2f804:	2001      	movs	r0, #1
}
   2f806:	bd38      	pop	{r3, r4, r5, pc}
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
   2f808:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
   2f80c:	68a2      	ldr	r2, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
   2f80e:	88e1      	ldrh	r1, [r4, #6]
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
   2f810:	449c      	add	ip, r3
   2f812:	fa1f fc8c 	uxth.w	ip, ip
  _ctrl_xfer.buffer += xferred_bytes;
   2f816:	441a      	add	r2, r3
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
   2f818:	4561      	cmp	r1, ip
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
   2f81a:	f8a4 c00e 	strh.w	ip, [r4, #14]
  _ctrl_xfer.buffer += xferred_bytes;
   2f81e:	60a2      	str	r2, [r4, #8]
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
   2f820:	d001      	beq.n	2f826 <usbd_control_xfer_cb+0x5e>
   2f822:	2b3f      	cmp	r3, #63	@ 0x3f
   2f824:	d81b      	bhi.n	2f85e <usbd_control_xfer_cb+0x96>
    if ( _ctrl_xfer.complete_cb )
   2f826:	6923      	ldr	r3, [r4, #16]
   2f828:	b16b      	cbz	r3, 2f846 <usbd_control_xfer_cb+0x7e>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
   2f82a:	4a14      	ldr	r2, [pc, #80]	@ (2f87c <usbd_control_xfer_cb+0xb4>)
   2f82c:	2102      	movs	r1, #2
   2f82e:	4628      	mov	r0, r5
   2f830:	4798      	blx	r3
    if ( is_ok )
   2f832:	b940      	cbnz	r0, 2f846 <usbd_control_xfer_cb+0x7e>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
   2f834:	4601      	mov	r1, r0
   2f836:	4628      	mov	r0, r5
   2f838:	f000 fba2 	bl	2ff80 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
   2f83c:	2180      	movs	r1, #128	@ 0x80
   2f83e:	4628      	mov	r0, r5
   2f840:	f000 fb9e 	bl	2ff80 <dcd_edpt_stall>
   2f844:	e7de      	b.n	2f804 <usbd_control_xfer_cb+0x3c>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   2f846:	7821      	ldrb	r1, [r4, #0]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
   2f848:	2300      	movs	r3, #0
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
   2f84a:	43c9      	mvns	r1, r1
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
   2f84c:	461a      	mov	r2, r3
   2f84e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
   2f852:	4628      	mov	r0, r5
   2f854:	f7ff ff16 	bl	2f684 <usbd_edpt_xfer>
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
   2f858:	2800      	cmp	r0, #0
   2f85a:	d1d3      	bne.n	2f804 <usbd_control_xfer_cb+0x3c>
   2f85c:	e7be      	b.n	2f7dc <usbd_control_xfer_cb+0x14>
  uint16_t const xact_len = _ctrl_xfer.data_len - _ctrl_xfer.total_xferred;
   2f85e:	89a3      	ldrh	r3, [r4, #12]
   2f860:	eba3 030c 	sub.w	r3, r3, ip
   2f864:	b29b      	uxth	r3, r3
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_xfer.buffer : NULL, xact_len);
   2f866:	2b00      	cmp	r3, #0
   2f868:	bf08      	it	eq
   2f86a:	2200      	moveq	r2, #0
   2f86c:	f00e 0180 	and.w	r1, lr, #128	@ 0x80
   2f870:	f7ff ff08 	bl	2f684 <usbd_edpt_xfer>
    TU_ASSERT( _data_stage_xact(rhport) );
   2f874:	2800      	cmp	r0, #0
   2f876:	d1c5      	bne.n	2f804 <usbd_control_xfer_cb+0x3c>
   2f878:	e7b0      	b.n	2f7dc <usbd_control_xfer_cb+0x14>
   2f87a:	bf00      	nop
   2f87c:	10053850 	.word	0x10053850
   2f880:	00000000 	.word	0x00000000

0002f884 <tud_vendor_n_available>:
{
  return _vendord_itf[itf].ep_in && _vendord_itf[itf].ep_out;
}

uint32_t tud_vendor_n_available (uint8_t itf)
{
   2f884:	b508      	push	{r3, lr}
  return tu_fifo_count(&_vendord_itf[itf].rx_ff);
   2f886:	4b04      	ldr	r3, [pc, #16]	@ (2f898 <tud_vendor_n_available+0x14>)
   2f888:	f241 6224 	movw	r2, #5668	@ 0x1624
   2f88c:	fb02 3000 	mla	r0, r2, r0, r3
   2f890:	f7fe ff4c 	bl	2e72c <tu_fifo_count>
}
   2f894:	bd08      	pop	{r3, pc}
   2f896:	bf00      	nop
   2f898:	10053868 	.word	0x10053868

0002f89c <tud_vendor_n_read>:
}

uint32_t tud_vendor_n_read (uint8_t itf, void* buffer, uint32_t bufsize)
{
  vendord_interface_t* p_itf = &_vendord_itf[itf];
  uint32_t num_read = tu_fifo_read_n(&p_itf->rx_ff, buffer, (uint16_t) bufsize);
   2f89c:	f241 6324 	movw	r3, #5668	@ 0x1624
{
   2f8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f8a4:	fb03 f400 	mul.w	r4, r3, r0
  uint32_t num_read = tu_fifo_read_n(&p_itf->rx_ff, buffer, (uint16_t) bufsize);
   2f8a8:	4f17      	ldr	r7, [pc, #92]	@ (2f908 <tud_vendor_n_read+0x6c>)
   2f8aa:	1d25      	adds	r5, r4, #4
   2f8ac:	443d      	add	r5, r7
   2f8ae:	b292      	uxth	r2, r2
   2f8b0:	4628      	mov	r0, r5
   2f8b2:	f7fe ffc1 	bl	2e838 <tu_fifo_read_n>
  TU_VERIFY(usbd_edpt_claim(rhport, p_itf->ep_out), );
   2f8b6:	eb07 0804 	add.w	r8, r7, r4
  uint32_t num_read = tu_fifo_read_n(&p_itf->rx_ff, buffer, (uint16_t) bufsize);
   2f8ba:	4606      	mov	r6, r0
  TU_VERIFY(usbd_edpt_claim(rhport, p_itf->ep_out), );
   2f8bc:	f898 1002 	ldrb.w	r1, [r8, #2]
   2f8c0:	2000      	movs	r0, #0
   2f8c2:	f7ff fec3 	bl	2f64c <usbd_edpt_claim>
   2f8c6:	b910      	cbnz	r0, 2f8ce <tud_vendor_n_read+0x32>
  _prep_out_transaction(p_itf);
  return num_read;
}
   2f8c8:	4630      	mov	r0, r6
   2f8ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint16_t max_read = tu_fifo_remaining(&p_itf->rx_ff);
   2f8ce:	4628      	mov	r0, r5
   2f8d0:	f7fe ff48 	bl	2e764 <tu_fifo_remaining>
  if ( max_read >= CFG_TUD_VENDOR_EPSIZE )
   2f8d4:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
   2f8d8:	d30d      	bcc.n	2f8f6 <tud_vendor_n_read+0x5a>
    usbd_edpt_xfer(rhport, p_itf->ep_out, p_itf->epout_buf, CFG_TUD_VENDOR_EPSIZE);
   2f8da:	f504 5291 	add.w	r2, r4, #4640	@ 0x1220
   2f8de:	3204      	adds	r2, #4
   2f8e0:	f898 1002 	ldrb.w	r1, [r8, #2]
   2f8e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
   2f8e8:	443a      	add	r2, r7
   2f8ea:	2000      	movs	r0, #0
   2f8ec:	f7ff feca 	bl	2f684 <usbd_edpt_xfer>
}
   2f8f0:	4630      	mov	r0, r6
   2f8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    usbd_edpt_release(rhport, p_itf->ep_out);
   2f8f6:	f898 1002 	ldrb.w	r1, [r8, #2]
   2f8fa:	2000      	movs	r0, #0
   2f8fc:	f7ff feb4 	bl	2f668 <usbd_edpt_release>
}
   2f900:	4630      	mov	r0, r6
   2f902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f906:	bf00      	nop
   2f908:	10053864 	.word	0x10053864

0002f90c <tud_vendor_n_write_flush>:
  }
  return ret;
}

uint32_t tud_vendor_n_write_flush (uint8_t itf)
{
   2f90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f910:	4604      	mov	r4, r0
   2f912:	f7ff f91b 	bl	2eb4c <tud_mounted>
   2f916:	b910      	cbnz	r0, 2f91e <tud_vendor_n_write_flush+0x12>
  vendord_interface_t* p_itf = &_vendord_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
   2f918:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_itf->ep_in);
    return 0;
  }
}
   2f91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f91e:	f7ff f91d 	bl	2eb5c <tud_suspended>
   2f922:	4606      	mov	r6, r0
   2f924:	2800      	cmp	r0, #0
   2f926:	d1f7      	bne.n	2f918 <tud_vendor_n_write_flush+0xc>
  if ( !tu_fifo_count(&p_itf->tx_ff) ) return 0;
   2f928:	f241 6324 	movw	r3, #5668	@ 0x1624
   2f92c:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 2f994 <tud_vendor_n_write_flush+0x88>
   2f930:	fb03 f404 	mul.w	r4, r3, r4
   2f934:	f104 0514 	add.w	r5, r4, #20
   2f938:	4445      	add	r5, r8
   2f93a:	4628      	mov	r0, r5
   2f93c:	f7fe fef6 	bl	2e72c <tu_fifo_count>
   2f940:	2800      	cmp	r0, #0
   2f942:	d0e9      	beq.n	2f918 <tud_vendor_n_write_flush+0xc>
  TU_VERIFY( usbd_edpt_claim(rhport, p_itf->ep_in), 0 );
   2f944:	eb08 0704 	add.w	r7, r8, r4
   2f948:	4630      	mov	r0, r6
   2f94a:	7879      	ldrb	r1, [r7, #1]
   2f94c:	f7ff fe7e 	bl	2f64c <usbd_edpt_claim>
   2f950:	2800      	cmp	r0, #0
   2f952:	d0e1      	beq.n	2f918 <tud_vendor_n_write_flush+0xc>
  uint16_t const count = tu_fifo_read_n(&p_itf->tx_ff, p_itf->epin_buf, sizeof(p_itf->epin_buf));
   2f954:	f504 54a1 	add.w	r4, r4, #5152	@ 0x1420
   2f958:	3404      	adds	r4, #4
   2f95a:	4444      	add	r4, r8
   2f95c:	4628      	mov	r0, r5
   2f95e:	4621      	mov	r1, r4
   2f960:	f44f 7200 	mov.w	r2, #512	@ 0x200
   2f964:	f7fe ff68 	bl	2e838 <tu_fifo_read_n>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_itf->ep_in, p_itf->epin_buf, count), 0 );
   2f968:	7879      	ldrb	r1, [r7, #1]
  if ( count )
   2f96a:	4605      	mov	r5, r0
   2f96c:	b178      	cbz	r0, 2f98e <tud_vendor_n_write_flush+0x82>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_itf->ep_in, p_itf->epin_buf, count), 0 );
   2f96e:	4603      	mov	r3, r0
   2f970:	4622      	mov	r2, r4
   2f972:	4630      	mov	r0, r6
   2f974:	f7ff fe86 	bl	2f684 <usbd_edpt_xfer>
   2f978:	b938      	cbnz	r0, 2f98a <tud_vendor_n_write_flush+0x7e>
   2f97a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2f97e:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2f982:	07db      	lsls	r3, r3, #31
   2f984:	d5c8      	bpl.n	2f918 <tud_vendor_n_write_flush+0xc>
   2f986:	be00      	bkpt	0x0000
   2f988:	e7c6      	b.n	2f918 <tud_vendor_n_write_flush+0xc>
    return count;
   2f98a:	4628      	mov	r0, r5
   2f98c:	e7c5      	b.n	2f91a <tud_vendor_n_write_flush+0xe>
    usbd_edpt_release(rhport, p_itf->ep_in);
   2f98e:	f7ff fe6b 	bl	2f668 <usbd_edpt_release>
    return 0;
   2f992:	e7c1      	b.n	2f918 <tud_vendor_n_write_flush+0xc>
   2f994:	10053864 	.word	0x10053864

0002f998 <tud_vendor_n_write>:
{
   2f998:	b570      	push	{r4, r5, r6, lr}
  uint16_t ret = tu_fifo_write_n(&p_itf->tx_ff, buffer, (uint16_t) bufsize);
   2f99a:	4c0c      	ldr	r4, [pc, #48]	@ (2f9cc <tud_vendor_n_write+0x34>)
   2f99c:	f241 6324 	movw	r3, #5668	@ 0x1624
   2f9a0:	fb03 4400 	mla	r4, r3, r0, r4
   2f9a4:	b292      	uxth	r2, r2
{
   2f9a6:	4605      	mov	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_itf->tx_ff, buffer, (uint16_t) bufsize);
   2f9a8:	4620      	mov	r0, r4
   2f9aa:	f7fe fff3 	bl	2e994 <tu_fifo_write_n>
   2f9ae:	4606      	mov	r6, r0
  if (tu_fifo_count(&p_itf->tx_ff) >= CFG_TUD_VENDOR_EPSIZE) {
   2f9b0:	4620      	mov	r0, r4
   2f9b2:	f7fe febb 	bl	2e72c <tu_fifo_count>
   2f9b6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
   2f9ba:	d201      	bcs.n	2f9c0 <tud_vendor_n_write+0x28>
}
   2f9bc:	4630      	mov	r0, r6
   2f9be:	bd70      	pop	{r4, r5, r6, pc}
    tud_vendor_n_write_flush(itf);
   2f9c0:	4628      	mov	r0, r5
   2f9c2:	f7ff ffa3 	bl	2f90c <tud_vendor_n_write_flush>
}
   2f9c6:	4630      	mov	r0, r6
   2f9c8:	bd70      	pop	{r4, r5, r6, pc}
   2f9ca:	bf00      	nop
   2f9cc:	10053878 	.word	0x10053878

0002f9d0 <tud_vendor_n_write_available>:

uint32_t tud_vendor_n_write_available (uint8_t itf)
{
   2f9d0:	b508      	push	{r3, lr}
  return tu_fifo_remaining(&_vendord_itf[itf].tx_ff);
   2f9d2:	4b04      	ldr	r3, [pc, #16]	@ (2f9e4 <tud_vendor_n_write_available+0x14>)
   2f9d4:	f241 6224 	movw	r2, #5668	@ 0x1624
   2f9d8:	fb02 3000 	mla	r0, r2, r0, r3
   2f9dc:	f7fe fec2 	bl	2e764 <tu_fifo_remaining>
}
   2f9e0:	bd08      	pop	{r3, pc}
   2f9e2:	bf00      	nop
   2f9e4:	10053878 	.word	0x10053878

0002f9e8 <vendord_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void vendord_init(void)
{
   2f9e8:	b530      	push	{r4, r5, lr}
  tu_memclr(_vendord_itf, sizeof(_vendord_itf));
   2f9ea:	4c0f      	ldr	r4, [pc, #60]	@ (2fa28 <vendord_init+0x40>)
{
   2f9ec:	b083      	sub	sp, #12
  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
  {
    vendord_interface_t* p_itf = &_vendord_itf[i];

    // config fifo
    tu_fifo_config(&p_itf->rx_ff, p_itf->rx_ff_buf, CFG_TUD_VENDOR_RX_BUFSIZE, 1, false);
   2f9ee:	2500      	movs	r5, #0
  tu_memclr(_vendord_itf, sizeof(_vendord_itf));
   2f9f0:	f241 6224 	movw	r2, #5668	@ 0x1624
   2f9f4:	2100      	movs	r1, #0
   2f9f6:	4620      	mov	r0, r4
   2f9f8:	f7f7 f964 	bl	26cc4 <memset>
    tu_fifo_config(&p_itf->rx_ff, p_itf->rx_ff_buf, CFG_TUD_VENDOR_RX_BUFSIZE, 1, false);
   2f9fc:	f104 0124 	add.w	r1, r4, #36	@ 0x24
   2fa00:	2301      	movs	r3, #1
   2fa02:	9500      	str	r5, [sp, #0]
   2fa04:	f44f 7200 	mov.w	r2, #512	@ 0x200
   2fa08:	1d20      	adds	r0, r4, #4
   2fa0a:	f7fe fe71 	bl	2e6f0 <tu_fifo_config>
    tu_fifo_config(&p_itf->tx_ff, p_itf->tx_ff_buf, CFG_TUD_VENDOR_TX_BUFSIZE, 1, false);
   2fa0e:	2301      	movs	r3, #1
   2fa10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
   2fa14:	9500      	str	r5, [sp, #0]
   2fa16:	f504 7109 	add.w	r1, r4, #548	@ 0x224
   2fa1a:	f104 0014 	add.w	r0, r4, #20
   2fa1e:	f7fe fe67 	bl	2e6f0 <tu_fifo_config>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_itf->rx_ff, NULL, osal_mutex_create(&p_itf->rx_ff_mutex));
    tu_fifo_config_mutex(&p_itf->tx_ff, osal_mutex_create(&p_itf->tx_ff_mutex), NULL);
#endif
  }
}
   2fa22:	b003      	add	sp, #12
   2fa24:	bd30      	pop	{r4, r5, pc}
   2fa26:	bf00      	nop
   2fa28:	10053864 	.word	0x10053864

0002fa2c <vendord_reset>:

void vendord_reset(uint8_t rhport)
{
   2fa2c:	b510      	push	{r4, lr}

  for(uint8_t i=0; i<CFG_TUD_VENDOR; i++)
  {
    vendord_interface_t* p_itf = &_vendord_itf[i];

    tu_memclr(p_itf, ITF_MEM_RESET_SIZE);
   2fa2e:	4c06      	ldr	r4, [pc, #24]	@ (2fa48 <vendord_reset+0x1c>)
   2fa30:	4620      	mov	r0, r4
   2fa32:	2300      	movs	r3, #0
   2fa34:	f840 3b04 	str.w	r3, [r0], #4
    tu_fifo_clear(&p_itf->rx_ff);
   2fa38:	f7ff f814 	bl	2ea64 <tu_fifo_clear>
    tu_fifo_clear(&p_itf->tx_ff);
   2fa3c:	f104 0014 	add.w	r0, r4, #20
  }
}
   2fa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tu_fifo_clear(&p_itf->tx_ff);
   2fa44:	f7ff b80e 	b.w	2ea64 <tu_fifo_clear>
   2fa48:	10053864 	.word	0x10053864

0002fa4c <vendord_open>:

uint16_t vendord_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t max_len)
{
  TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == desc_itf->bInterfaceClass, 0);
   2fa4c:	794b      	ldrb	r3, [r1, #5]
   2fa4e:	2bff      	cmp	r3, #255	@ 0xff
   2fa50:	d001      	beq.n	2fa56 <vendord_open+0xa>
   2fa52:	2000      	movs	r0, #0

    if ( p_vendor->ep_in ) tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
  }

  return (uint16_t) ((uintptr_t) p_desc - (uintptr_t) desc_itf);
}
   2fa54:	4770      	bx	lr
{
   2fa56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ( _vendord_itf[i].ep_in == 0 && _vendord_itf[i].ep_out == 0 )
   2fa5a:	4e2d      	ldr	r6, [pc, #180]	@ (2fb10 <vendord_open+0xc4>)
  return desc8 + desc8[DESC_OFFSET_LEN];
   2fa5c:	780c      	ldrb	r4, [r1, #0]
   2fa5e:	7873      	ldrb	r3, [r6, #1]
   2fa60:	460d      	mov	r5, r1
{
   2fa62:	b082      	sub	sp, #8
    if ( _vendord_itf[i].ep_in == 0 && _vendord_itf[i].ep_out == 0 )
   2fa64:	78b1      	ldrb	r1, [r6, #2]
   2fa66:	b903      	cbnz	r3, 2fa6a <vendord_open+0x1e>
   2fa68:	b119      	cbz	r1, 2fa72 <vendord_open+0x26>
  TU_VERIFY(TUSB_CLASS_VENDOR_SPECIFIC == desc_itf->bInterfaceClass, 0);
   2fa6a:	2000      	movs	r0, #0
}
   2fa6c:	b002      	add	sp, #8
   2fa6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (desc_itf->bNumEndpoints)
   2fa72:	792f      	ldrb	r7, [r5, #4]
  p_vendor->itf_num = desc_itf->bInterfaceNumber;
   2fa74:	78ab      	ldrb	r3, [r5, #2]
   2fa76:	7033      	strb	r3, [r6, #0]
   2fa78:	442c      	add	r4, r5
  if (desc_itf->bNumEndpoints)
   2fa7a:	b307      	cbz	r7, 2fabe <vendord_open+0x72>
    while ( (TUSB_DESC_ENDPOINT != tu_desc_type(p_desc)) && (p_desc < desc_end) )
   2fa7c:	7863      	ldrb	r3, [r4, #1]
   2fa7e:	2b05      	cmp	r3, #5
   2fa80:	d00a      	beq.n	2fa98 <vendord_open+0x4c>
  uint8_t const * desc_end = p_desc + max_len;
   2fa82:	18a3      	adds	r3, r4, r2
    while ( (TUSB_DESC_ENDPOINT != tu_desc_type(p_desc)) && (p_desc < desc_end) )
   2fa84:	429c      	cmp	r4, r3
   2fa86:	d302      	bcc.n	2fa8e <vendord_open+0x42>
   2fa88:	e006      	b.n	2fa98 <vendord_open+0x4c>
   2fa8a:	42a3      	cmp	r3, r4
   2fa8c:	d904      	bls.n	2fa98 <vendord_open+0x4c>
   2fa8e:	7821      	ldrb	r1, [r4, #0]
   2fa90:	440c      	add	r4, r1
   2fa92:	7861      	ldrb	r1, [r4, #1]
   2fa94:	2905      	cmp	r1, #5
   2fa96:	d1f8      	bne.n	2fa8a <vendord_open+0x3e>
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_BULK, &p_vendor->ep_out, &p_vendor->ep_in), 0);
   2fa98:	463a      	mov	r2, r7
   2fa9a:	4f1e      	ldr	r7, [pc, #120]	@ (2fb14 <vendord_open+0xc8>)
   2fa9c:	9701      	str	r7, [sp, #4]
   2fa9e:	1c7b      	adds	r3, r7, #1
   2faa0:	9300      	str	r3, [sp, #0]
   2faa2:	4621      	mov	r1, r4
   2faa4:	2302      	movs	r3, #2
   2faa6:	f7ff fd5f 	bl	2f568 <usbd_open_edpt_pair>
   2faaa:	b320      	cbz	r0, 2faf6 <vendord_open+0xaa>
    if ( p_vendor->ep_out )
   2faac:	78b1      	ldrb	r1, [r6, #2]
    p_desc += desc_itf->bNumEndpoints*sizeof(tusb_desc_endpoint_t);
   2faae:	f895 8004 	ldrb.w	r8, [r5, #4]
    if ( p_vendor->ep_out )
   2fab2:	b969      	cbnz	r1, 2fad0 <vendord_open+0x84>
    if ( p_vendor->ep_in ) tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
   2fab4:	7873      	ldrb	r3, [r6, #1]
   2fab6:	b93b      	cbnz	r3, 2fac8 <vendord_open+0x7c>
    p_desc += desc_itf->bNumEndpoints*sizeof(tusb_desc_endpoint_t);
   2fab8:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
   2fabc:	4444      	add	r4, r8
  return (uint16_t) ((uintptr_t) p_desc - (uintptr_t) desc_itf);
   2fabe:	1b61      	subs	r1, r4, r5
   2fac0:	b288      	uxth	r0, r1
}
   2fac2:	b002      	add	sp, #8
   2fac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( p_vendor->ep_in ) tud_vendor_n_write_flush((uint8_t)(p_vendor - _vendord_itf));
   2fac8:	2000      	movs	r0, #0
   2faca:	f7ff ff1f 	bl	2f90c <tud_vendor_n_write_flush>
   2face:	e7f3      	b.n	2fab8 <vendord_open+0x6c>
  TU_VERIFY(usbd_edpt_claim(rhport, p_itf->ep_out), );
   2fad0:	2000      	movs	r0, #0
   2fad2:	f7ff fdbb 	bl	2f64c <usbd_edpt_claim>
   2fad6:	2800      	cmp	r0, #0
   2fad8:	d0ec      	beq.n	2fab4 <vendord_open+0x68>
  uint16_t max_read = tu_fifo_remaining(&p_itf->rx_ff);
   2fada:	1cf8      	adds	r0, r7, #3
   2fadc:	f7fe fe42 	bl	2e764 <tu_fifo_remaining>
  if ( max_read >= CFG_TUD_VENDOR_EPSIZE )
   2fae0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
   2fae4:	d30f      	bcc.n	2fb06 <vendord_open+0xba>
    usbd_edpt_xfer(rhport, p_itf->ep_out, p_itf->epout_buf, CFG_TUD_VENDOR_EPSIZE);
   2fae6:	4a0c      	ldr	r2, [pc, #48]	@ (2fb18 <vendord_open+0xcc>)
   2fae8:	78b1      	ldrb	r1, [r6, #2]
   2faea:	f44f 7300 	mov.w	r3, #512	@ 0x200
   2faee:	2000      	movs	r0, #0
   2faf0:	f7ff fdc8 	bl	2f684 <usbd_edpt_xfer>
   2faf4:	e7de      	b.n	2fab4 <vendord_open+0x68>
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_BULK, &p_vendor->ep_out, &p_vendor->ep_in), 0);
   2faf6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2fafa:	f8d3 3df0 	ldr.w	r3, [r3, #3568]	@ 0xdf0
   2fafe:	07db      	lsls	r3, r3, #31
   2fb00:	d5b3      	bpl.n	2fa6a <vendord_open+0x1e>
   2fb02:	be00      	bkpt	0x0000
   2fb04:	e7b1      	b.n	2fa6a <vendord_open+0x1e>
    usbd_edpt_release(rhport, p_itf->ep_out);
   2fb06:	78b1      	ldrb	r1, [r6, #2]
   2fb08:	2000      	movs	r0, #0
   2fb0a:	f7ff fdad 	bl	2f668 <usbd_edpt_release>
   2fb0e:	e7d1      	b.n	2fab4 <vendord_open+0x68>
   2fb10:	10053864 	.word	0x10053864
   2fb14:	10053865 	.word	0x10053865
   2fb18:	10054a88 	.word	0x10054a88

0002fb1c <vendord_xfer_cb>:

bool vendord_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
   2fb1c:	b510      	push	{r4, lr}

  for ( ; ; itf++, p_itf++)
  {
    if (itf >= TU_ARRAY_SIZE(_vendord_itf)) return false;

    if ( ( ep_addr == p_itf->ep_out ) || ( ep_addr == p_itf->ep_in ) ) break;
   2fb1e:	4c1b      	ldr	r4, [pc, #108]	@ (2fb8c <vendord_xfer_cb+0x70>)
   2fb20:	78a2      	ldrb	r2, [r4, #2]
   2fb22:	428a      	cmp	r2, r1
   2fb24:	d00f      	beq.n	2fb46 <vendord_xfer_cb+0x2a>
   2fb26:	7862      	ldrb	r2, [r4, #1]
   2fb28:	428a      	cmp	r2, r1
   2fb2a:	d10a      	bne.n	2fb42 <vendord_xfer_cb+0x26>

    _prep_out_transaction(p_itf);
  }
  else if ( ep_addr == p_itf->ep_in )
  {
    if (tud_vendor_tx_cb) tud_vendor_tx_cb(itf, (uint16_t) xferred_bytes);
   2fb2c:	4a18      	ldr	r2, [pc, #96]	@ (2fb90 <vendord_xfer_cb+0x74>)
   2fb2e:	b11a      	cbz	r2, 2fb38 <vendord_xfer_cb+0x1c>
   2fb30:	b299      	uxth	r1, r3
   2fb32:	2000      	movs	r0, #0
   2fb34:	f3af 8000 	nop.w
    // Send complete, try to send more if possible
    tud_vendor_n_write_flush(itf);
   2fb38:	2000      	movs	r0, #0
   2fb3a:	f7ff fee7 	bl	2f90c <tud_vendor_n_write_flush>
  }

  return true;
   2fb3e:	2001      	movs	r0, #1
}
   2fb40:	bd10      	pop	{r4, pc}
    if (itf >= TU_ARRAY_SIZE(_vendord_itf)) return false;
   2fb42:	2000      	movs	r0, #0
}
   2fb44:	bd10      	pop	{r4, pc}
    tu_fifo_write_n(&p_itf->rx_ff, p_itf->epout_buf, (uint16_t) xferred_bytes);
   2fb46:	b29a      	uxth	r2, r3
   2fb48:	4912      	ldr	r1, [pc, #72]	@ (2fb94 <vendord_xfer_cb+0x78>)
   2fb4a:	1d20      	adds	r0, r4, #4
   2fb4c:	f7fe ff22 	bl	2e994 <tu_fifo_write_n>
    if (tud_vendor_rx_cb) tud_vendor_rx_cb(itf);
   2fb50:	4b11      	ldr	r3, [pc, #68]	@ (2fb98 <vendord_xfer_cb+0x7c>)
   2fb52:	b113      	cbz	r3, 2fb5a <vendord_xfer_cb+0x3e>
   2fb54:	2000      	movs	r0, #0
   2fb56:	f7fc f835 	bl	2bbc4 <tud_vendor_rx_cb>
  TU_VERIFY(usbd_edpt_claim(rhport, p_itf->ep_out), );
   2fb5a:	78a1      	ldrb	r1, [r4, #2]
   2fb5c:	2000      	movs	r0, #0
   2fb5e:	f7ff fd75 	bl	2f64c <usbd_edpt_claim>
   2fb62:	2800      	cmp	r0, #0
   2fb64:	d0eb      	beq.n	2fb3e <vendord_xfer_cb+0x22>
  uint16_t max_read = tu_fifo_remaining(&p_itf->rx_ff);
   2fb66:	480d      	ldr	r0, [pc, #52]	@ (2fb9c <vendord_xfer_cb+0x80>)
   2fb68:	f7fe fdfc 	bl	2e764 <tu_fifo_remaining>
  if ( max_read >= CFG_TUD_VENDOR_EPSIZE )
   2fb6c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
   2fb70:	d307      	bcc.n	2fb82 <vendord_xfer_cb+0x66>
    usbd_edpt_xfer(rhport, p_itf->ep_out, p_itf->epout_buf, CFG_TUD_VENDOR_EPSIZE);
   2fb72:	4a08      	ldr	r2, [pc, #32]	@ (2fb94 <vendord_xfer_cb+0x78>)
   2fb74:	78a1      	ldrb	r1, [r4, #2]
   2fb76:	f44f 7300 	mov.w	r3, #512	@ 0x200
   2fb7a:	2000      	movs	r0, #0
   2fb7c:	f7ff fd82 	bl	2f684 <usbd_edpt_xfer>
   2fb80:	e7dd      	b.n	2fb3e <vendord_xfer_cb+0x22>
    usbd_edpt_release(rhport, p_itf->ep_out);
   2fb82:	78a1      	ldrb	r1, [r4, #2]
   2fb84:	2000      	movs	r0, #0
   2fb86:	f7ff fd6f 	bl	2f668 <usbd_edpt_release>
   2fb8a:	e7d8      	b.n	2fb3e <vendord_xfer_cb+0x22>
   2fb8c:	10053864 	.word	0x10053864
   2fb90:	00000000 	.word	0x00000000
   2fb94:	10054a88 	.word	0x10054a88
   2fb98:	0002bbc5 	.word	0x0002bbc5
   2fb9c:	10053868 	.word	0x10053868

0002fba0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   2fba0:	4b07      	ldr	r3, [pc, #28]	@ (2fbc0 <pxCurrentTCBConst2>)
   2fba2:	6819      	ldr	r1, [r3, #0]
   2fba4:	6808      	ldr	r0, [r1, #0]
   2fba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbaa:	f380 8809 	msr	PSP, r0
   2fbae:	f3bf 8f6f 	isb	sy
   2fbb2:	f04f 0000 	mov.w	r0, #0
   2fbb6:	f380 8811 	msr	BASEPRI, r0
   2fbba:	4770      	bx	lr
   2fbbc:	f3af 8000 	nop.w

0002fbc0 <pxCurrentTCBConst2>:
   2fbc0:	10052f1c 	.word	0x10052f1c

0002fbc4 <vPortEnterCritical>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
   2fbc4:	f04f 0380 	mov.w	r3, #128	@ 0x80
   2fbc8:	f383 8811 	msr	BASEPRI, r3
   2fbcc:	f3bf 8f6f 	isb	sy
   2fbd0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
   2fbd4:	4a07      	ldr	r2, [pc, #28]	@ (2fbf4 <vPortEnterCritical+0x30>)
   2fbd6:	6813      	ldr	r3, [r2, #0]
   2fbd8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   2fbda:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
   2fbdc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
   2fbde:	d000      	beq.n	2fbe2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
   2fbe0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   2fbe2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2fbe6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
   2fbea:	b2db      	uxtb	r3, r3
   2fbec:	2b00      	cmp	r3, #0
   2fbee:	d0f7      	beq.n	2fbe0 <vPortEnterCritical+0x1c>
   2fbf0:	e7fe      	b.n	2fbf0 <vPortEnterCritical+0x2c>
   2fbf2:	bf00      	nop
   2fbf4:	1000cb68 	.word	0x1000cb68

0002fbf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
   2fbf8:	4a04      	ldr	r2, [pc, #16]	@ (2fc0c <vPortExitCritical+0x14>)
   2fbfa:	6813      	ldr	r3, [r2, #0]
   2fbfc:	b12b      	cbz	r3, 2fc0a <vPortExitCritical+0x12>
	uxCriticalNesting--;
   2fbfe:	3b01      	subs	r3, #1
   2fc00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   2fc02:	b90b      	cbnz	r3, 2fc08 <vPortExitCritical+0x10>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
   2fc04:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
   2fc08:	4770      	bx	lr
	configASSERT( uxCriticalNesting );
   2fc0a:	e7fe      	b.n	2fc0a <vPortExitCritical+0x12>
   2fc0c:	1000cb68 	.word	0x1000cb68

0002fc10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   2fc10:	f3ef 8009 	mrs	r0, PSP
   2fc14:	f3bf 8f6f 	isb	sy
   2fc18:	4b15      	ldr	r3, [pc, #84]	@ (2fc70 <pxCurrentTCBConst>)
   2fc1a:	681a      	ldr	r2, [r3, #0]
   2fc1c:	f01e 0f10 	tst.w	lr, #16
   2fc20:	bf08      	it	eq
   2fc22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
   2fc26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc2a:	6010      	str	r0, [r2, #0]
   2fc2c:	e92d 0009 	stmdb	sp!, {r0, r3}
   2fc30:	f04f 0080 	mov.w	r0, #128	@ 0x80
   2fc34:	f380 8811 	msr	BASEPRI, r0
   2fc38:	f3bf 8f4f 	dsb	sy
   2fc3c:	f3bf 8f6f 	isb	sy
   2fc40:	f7fe faa0 	bl	2e184 <vTaskSwitchContext>
   2fc44:	f04f 0000 	mov.w	r0, #0
   2fc48:	f380 8811 	msr	BASEPRI, r0
   2fc4c:	bc09      	pop	{r0, r3}
   2fc4e:	6819      	ldr	r1, [r3, #0]
   2fc50:	6808      	ldr	r0, [r1, #0]
   2fc52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc56:	f01e 0f10 	tst.w	lr, #16
   2fc5a:	bf08      	it	eq
   2fc5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
   2fc60:	f380 8809 	msr	PSP, r0
   2fc64:	f3bf 8f6f 	isb	sy
   2fc68:	4770      	bx	lr
   2fc6a:	bf00      	nop
   2fc6c:	f3af 8000 	nop.w

0002fc70 <pxCurrentTCBConst>:
   2fc70:	10052f1c 	.word	0x10052f1c

0002fc74 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   2fc74:	b508      	push	{r3, lr}
	__asm volatile
   2fc76:	f04f 0380 	mov.w	r3, #128	@ 0x80
   2fc7a:	f383 8811 	msr	BASEPRI, r3
   2fc7e:	f3bf 8f6f 	isb	sy
   2fc82:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   2fc86:	f7fe fa6d 	bl	2e164 <xTaskIncrementTick>
   2fc8a:	b128      	cbz	r0, 2fc98 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   2fc8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2fc90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
   2fc94:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
   2fc98:	2300      	movs	r3, #0
   2fc9a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
   2fc9e:	bd08      	pop	{r3, pc}

0002fca0 <xPortStimerTickHandler>:
//
//
//*****************************************************************************
void
xPortStimerTickHandler(uint32_t delta)
{
   2fca0:	b570      	push	{r4, r5, r6, lr}

    curSTimer = am_hal_stimer_counter_get();
    //
    // Configure the STIMER->COMPARE_0
    //
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   2fca2:	4e1c      	ldr	r6, [pc, #112]	@ (2fd14 <xPortStimerTickHandler+0x74>)
{
   2fca4:	4604      	mov	r4, r0
    curSTimer = am_hal_stimer_counter_get();
   2fca6:	f003 f9fd 	bl	330a4 <am_hal_stimer_counter_get>
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   2fcaa:	6831      	ldr	r1, [r6, #0]
    curSTimer = am_hal_stimer_counter_get();
   2fcac:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, (ulTimerCountsForOneTick-delta));
   2fcae:	1b09      	subs	r1, r1, r4
   2fcb0:	2000      	movs	r0, #0
   2fcb2:	f003 fa07 	bl	330c4 <am_hal_stimer_compare_delta_set>
#ifdef AM_FREERTOS_STIMER_BACKUP
    am_hal_stimer_compare_delta_set(1, (ulTimerCountsForOneTick-delta+1));
   2fcb6:	6831      	ldr	r1, [r6, #0]
   2fcb8:	2001      	movs	r0, #1
   2fcba:	4401      	add	r1, r0
   2fcbc:	1b09      	subs	r1, r1, r4
   2fcbe:	f003 fa01 	bl	330c4 <am_hal_stimer_compare_delta_set>
#endif

    timerCounts = curSTimer - g_lastSTimerVal;
   2fcc2:	4915      	ldr	r1, [pc, #84]	@ (2fd18 <xPortStimerTickHandler+0x78>)
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   2fcc4:	6832      	ldr	r2, [r6, #0]
    timerCounts = curSTimer - g_lastSTimerVal;
   2fcc6:	680b      	ldr	r3, [r1, #0]
   2fcc8:	1aeb      	subs	r3, r5, r3
    numTicksElapsed = timerCounts/ulTimerCountsForOneTick;
   2fcca:	fbb3 f4f2 	udiv	r4, r3, r2
    remainder = timerCounts % ulTimerCountsForOneTick;
   2fcce:	fb02 3014 	mls	r0, r2, r4, r3
    g_lastSTimerVal = curSTimer - remainder;
   2fcd2:	1a2d      	subs	r5, r5, r0
   2fcd4:	600d      	str	r5, [r1, #0]
	__asm volatile
   2fcd6:	f3ef 8111 	mrs	r1, BASEPRI
   2fcda:	f04f 0080 	mov.w	r0, #128	@ 0x80
   2fcde:	f380 8811 	msr	BASEPRI, r0
   2fce2:	f3bf 8f6f 	isb	sy
   2fce6:	f3bf 8f4f 	dsb	sy
        //
        // Increment RTOS tick
        // Allowing for need to increment the tick more than one... to avoid accumulation of
        // error in case of interrupt latencies
        //
        while (numTicksElapsed--)
   2fcea:	429a      	cmp	r2, r3
   2fcec:	d80e      	bhi.n	2fd0c <xPortStimerTickHandler+0x6c>
    BaseType_t ctxtSwitchReqd = pdFALSE;
   2fcee:	2500      	movs	r5, #0
        {
            ctxtSwitchReqd = (( xTaskIncrementTick() != pdFALSE ) ? pdTRUE : ctxtSwitchReqd);
   2fcf0:	f7fe fa38 	bl	2e164 <xTaskIncrementTick>
   2fcf4:	2800      	cmp	r0, #0
   2fcf6:	bf18      	it	ne
   2fcf8:	2501      	movne	r5, #1
        while (numTicksElapsed--)
   2fcfa:	3c01      	subs	r4, #1
   2fcfc:	d1f8      	bne.n	2fcf0 <xPortStimerTickHandler+0x50>
        }
        if ( ctxtSwitchReqd != pdFALSE )
   2fcfe:	b12d      	cbz	r5, 2fd0c <xPortStimerTickHandler+0x6c>
            //
            // A context switch is required.  Context switching is
            // performed in the PendSV interrupt. Pend the PendSV
            // interrupt.
            //
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   2fd00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
   2fd04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
   2fd08:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
   2fd0c:	2300      	movs	r3, #0
   2fd0e:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR(0);
}
   2fd12:	bd70      	pop	{r4, r5, r6, pc}
   2fd14:	10054e8c 	.word	0x10054e8c
   2fd18:	10054e90 	.word	0x10054e90

0002fd1c <am_stimer_cmpr0_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr0_isr(void)
{
   2fd1c:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   2fd1e:	2000      	movs	r0, #0
   2fd20:	f003 fa36 	bl	33190 <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREA)
   2fd24:	07c3      	lsls	r3, r0, #31
   2fd26:	d400      	bmi.n	2fd2a <am_stimer_cmpr0_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(0);
    }
}
   2fd28:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   2fd2a:	2001      	movs	r0, #1
   2fd2c:	f003 fa2a 	bl	33184 <am_hal_stimer_int_clear>
}
   2fd30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(0);
   2fd34:	2000      	movs	r0, #0
   2fd36:	f7ff bfb3 	b.w	2fca0 <xPortStimerTickHandler>
   2fd3a:	bf00      	nop

0002fd3c <am_stimer_cmpr1_isr>:
// Interrupt handler for the STIMER module Compare 0.
//
//*****************************************************************************
void
am_stimer_cmpr1_isr(void)
{
   2fd3c:	b508      	push	{r3, lr}

    //
    // Check the timer interrupt status.
    //
    uint32_t ui32Status = am_hal_stimer_int_status_get(false);
   2fd3e:	2000      	movs	r0, #0
   2fd40:	f003 fa26 	bl	33190 <am_hal_stimer_int_status_get>
    if (ui32Status & AM_HAL_STIMER_INT_COMPAREB)
   2fd44:	0783      	lsls	r3, r0, #30
   2fd46:	d400      	bmi.n	2fd4a <am_stimer_cmpr1_isr+0xe>
        //
        // Run handlers for the various possible timer events.
        //
        xPortStimerTickHandler(1);
    }
}
   2fd48:	bd08      	pop	{r3, pc}
        am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREB);
   2fd4a:	2002      	movs	r0, #2
   2fd4c:	f003 fa1a 	bl	33184 <am_hal_stimer_int_clear>
        gNumCmpB++;
   2fd50:	4a04      	ldr	r2, [pc, #16]	@ (2fd64 <am_stimer_cmpr1_isr+0x28>)
   2fd52:	6813      	ldr	r3, [r2, #0]
        xPortStimerTickHandler(1);
   2fd54:	2001      	movs	r0, #1
        gNumCmpB++;
   2fd56:	4403      	add	r3, r0
   2fd58:	6013      	str	r3, [r2, #0]
}
   2fd5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        xPortStimerTickHandler(1);
   2fd5e:	f7ff bf9f 	b.w	2fca0 <xPortStimerTickHandler>
   2fd62:	bf00      	nop
   2fd64:	10054e88 	.word	0x10054e88

0002fd68 <dcd_usb_ep0_setup_callback>:
//!
//! @param setup
//*****************************************************************************
static void
dcd_usb_ep0_setup_callback(uint8_t *setup)
{
   2fd68:	b500      	push	{lr}
   2fd6a:	4602      	mov	r2, r0
   2fd6c:	b085      	sub	sp, #20
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
   2fd6e:	6851      	ldr	r1, [r2, #4]
   2fd70:	6800      	ldr	r0, [r0, #0]
   2fd72:	ab02      	add	r3, sp, #8
   2fd74:	c303      	stmia	r3!, {r0, r1}
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
   2fd76:	f44f 62c0 	mov.w	r2, #1536	@ 0x600

  dcd_event_handler(&event, in_isr);
   2fd7a:	2101      	movs	r1, #1
   2fd7c:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
   2fd7e:	9201      	str	r2, [sp, #4]
  dcd_event_handler(&event, in_isr);
   2fd80:	f7ff fb22 	bl	2f3c8 <dcd_event_handler>
    dcd_event_setup_received(0, setup, true);
}
   2fd84:	b005      	add	sp, #20
   2fd86:	f85d fb04 	ldr.w	pc, [sp], #4
   2fd8a:	bf00      	nop

0002fd8c <dcd_usb_dev_evt_callback>:
{
   2fd8c:	b510      	push	{r4, lr}
   2fd8e:	b084      	sub	sp, #16
    switch (eDevState)
   2fd90:	2803      	cmp	r0, #3
   2fd92:	d821      	bhi.n	2fdd8 <dcd_usb_dev_evt_callback+0x4c>
   2fd94:	e8df f000 	tbb	[pc, r0]
   2fd98:	22395002 	.word	0x22395002
            am_hal_usb_intr_usb_enable(pUSBHandle, USB_CFG2_SOFE_Msk | USB_CFG2_ResumeE_Msk | USB_CFG2_SuspendE_Msk |
   2fd9c:	4c2f      	ldr	r4, [pc, #188]	@ (2fe5c <dcd_usb_dev_evt_callback+0xd0>)
   2fd9e:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
   2fda2:	6820      	ldr	r0, [r4, #0]
   2fda4:	f000 fdfa 	bl	3099c <am_hal_usb_intr_usb_enable>
            am_hal_usb_ep_init(pUSBHandle, 0, 0, 64);
   2fda8:	2200      	movs	r2, #0
   2fdaa:	4611      	mov	r1, r2
   2fdac:	6820      	ldr	r0, [r4, #0]
   2fdae:	2340      	movs	r3, #64	@ 0x40
   2fdb0:	f000 fb66 	bl	30480 <am_hal_usb_ep_init>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
   2fdb4:	f44f 7480 	mov.w	r4, #256	@ 0x100
   2fdb8:	2300      	movs	r3, #0
  event.bus_reset.speed = speed;
   2fdba:	2202      	movs	r2, #2
  dcd_event_handler(&event, in_isr);
   2fdbc:	2101      	movs	r1, #1
   2fdbe:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
   2fdc0:	f8cd 3006 	str.w	r3, [sp, #6]
   2fdc4:	f8ad 4004 	strh.w	r4, [sp, #4]
   2fdc8:	f8ad 300e 	strh.w	r3, [sp, #14]
   2fdcc:	f8cd 300a 	str.w	r3, [sp, #10]
  event.bus_reset.speed = speed;
   2fdd0:	f88d 2008 	strb.w	r2, [sp, #8]
  dcd_event_handler(&event, in_isr);
   2fdd4:	f7ff faf8 	bl	2f3c8 <dcd_event_handler>
}
   2fdd8:	b004      	add	sp, #16
   2fdda:	bd10      	pop	{r4, pc}
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   2fddc:	2300      	movs	r3, #0
   2fdde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  dcd_event_handler(&event, in_isr);
   2fde2:	a801      	add	r0, sp, #4
   2fde4:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   2fde6:	f8cd 3006 	str.w	r3, [sp, #6]
   2fdea:	f8cd 300a 	str.w	r3, [sp, #10]
   2fdee:	f8ad 300e 	strh.w	r3, [sp, #14]
   2fdf2:	f8ad 2004 	strh.w	r2, [sp, #4]
  dcd_event_handler(&event, in_isr);
   2fdf6:	f7ff fae7 	bl	2f3c8 <dcd_event_handler>
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_SUSPENDED);
   2fdfa:	4b18      	ldr	r3, [pc, #96]	@ (2fe5c <dcd_usb_dev_evt_callback+0xd0>)
   2fdfc:	6818      	ldr	r0, [r3, #0]
   2fdfe:	2106      	movs	r1, #6
}
   2fe00:	b004      	add	sp, #16
   2fe02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_SUSPENDED);
   2fe06:	f000 ba87 	b.w	30318 <am_hal_usb_set_dev_state>
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   2fe0a:	2300      	movs	r3, #0
   2fe0c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
  dcd_event_handler(&event, in_isr);
   2fe10:	a801      	add	r0, sp, #4
   2fe12:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   2fe14:	f8cd 3006 	str.w	r3, [sp, #6]
   2fe18:	f8cd 300a 	str.w	r3, [sp, #10]
   2fe1c:	f8ad 300e 	strh.w	r3, [sp, #14]
   2fe20:	f8ad 2004 	strh.w	r2, [sp, #4]
  dcd_event_handler(&event, in_isr);
   2fe24:	f7ff fad0 	bl	2f3c8 <dcd_event_handler>
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_ACTIVE);
   2fe28:	4b0c      	ldr	r3, [pc, #48]	@ (2fe5c <dcd_usb_dev_evt_callback+0xd0>)
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_SUSPENDED);
   2fe2a:	6818      	ldr	r0, [r3, #0]
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_ACTIVE);
   2fe2c:	2104      	movs	r1, #4
}
   2fe2e:	b004      	add	sp, #16
   2fe30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_SUSPENDED);
   2fe34:	f000 ba70 	b.w	30318 <am_hal_usb_set_dev_state>
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   2fe38:	2300      	movs	r3, #0
   2fe3a:	f44f 7240 	mov.w	r2, #768	@ 0x300
  dcd_event_handler(&event, in_isr);
   2fe3e:	2101      	movs	r1, #1
   2fe40:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
   2fe42:	f8cd 3006 	str.w	r3, [sp, #6]
   2fe46:	f8cd 300a 	str.w	r3, [sp, #10]
   2fe4a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2fe4e:	f8ad 2004 	strh.w	r2, [sp, #4]
  dcd_event_handler(&event, in_isr);
   2fe52:	f7ff fab9 	bl	2f3c8 <dcd_event_handler>
}
   2fe56:	b004      	add	sp, #16
   2fe58:	bd10      	pop	{r4, pc}
   2fe5a:	bf00      	nop
   2fe5c:	10054e94 	.word	0x10054e94

0002fe60 <dcd_usb_ep_xfer_complete_callback>:
static void
dcd_usb_ep_xfer_complete_callback(const uint8_t ep_addr,
                                  const uint16_t xfer_len,
                                  am_hal_usb_xfer_code_e code,
                                  void *param)
{
   2fe60:	b500      	push	{lr}
    switch (code)
   2fe62:	2a02      	cmp	r2, #2
{
   2fe64:	b085      	sub	sp, #20
   2fe66:	4684      	mov	ip, r0
   2fe68:	460b      	mov	r3, r1
    switch (code)
   2fe6a:	d014      	beq.n	2fe96 <dcd_usb_ep_xfer_complete_callback+0x36>
   2fe6c:	2a04      	cmp	r2, #4
   2fe6e:	d00f      	beq.n	2fe90 <dcd_usb_ep_xfer_complete_callback+0x30>
   2fe70:	bb32      	cbnz	r2, 2fec0 <dcd_usb_ep_xfer_complete_callback+0x60>
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   2fe72:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
   2fe76:	f8ad 0004 	strh.w	r0, [sp, #4]

  event.xfer_complete.ep_addr = ep_addr;
  event.xfer_complete.len     = xferred_bytes;
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
   2fe7a:	2101      	movs	r1, #1
   2fe7c:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   2fe7e:	f8cd 2006 	str.w	r2, [sp, #6]
   2fe82:	f8ad 200a 	strh.w	r2, [sp, #10]
  event.xfer_complete.ep_addr = ep_addr;
   2fe86:	f88d c008 	strb.w	ip, [sp, #8]
    {
        case USB_XFER_DONE:
            dcd_event_xfer_complete(0, ep_addr, xfer_len, XFER_RESULT_SUCCESS, true);
   2fe8a:	9303      	str	r3, [sp, #12]
  dcd_event_handler(&event, in_isr);
   2fe8c:	f7ff fa9c 	bl	2f3c8 <dcd_event_handler>
            {
                dcd_event_xfer_complete(0, ep_addr, xfer_len, XFER_RESULT_FAILED, true);
            }
            break;
    }
}
   2fe90:	b005      	add	sp, #20
   2fe92:	f85d fb04 	ldr.w	pc, [sp], #4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   2fe96:	2100      	movs	r1, #0
   2fe98:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
   2fe9c:	f8cd 1006 	str.w	r1, [sp, #6]
   2fea0:	f8ad 100a 	strh.w	r1, [sp, #10]
   2fea4:	f8ad 0004 	strh.w	r0, [sp, #4]
  dcd_event_handler(&event, in_isr);
   2fea8:	2101      	movs	r1, #1
   2feaa:	a801      	add	r0, sp, #4
  event.xfer_complete.ep_addr = ep_addr;
   2feac:	f88d c008 	strb.w	ip, [sp, #8]
            dcd_event_xfer_complete(0, ep_addr, xfer_len, XFER_RESULT_STALLED, true);
   2feb0:	9303      	str	r3, [sp, #12]
  event.xfer_complete.result  = result;
   2feb2:	f88d 2009 	strb.w	r2, [sp, #9]
  dcd_event_handler(&event, in_isr);
   2feb6:	f7ff fa87 	bl	2f3c8 <dcd_event_handler>
}
   2feba:	b005      	add	sp, #20
   2febc:	f85d fb04 	ldr.w	pc, [sp], #4
            if (xfer_len)
   2fec0:	2900      	cmp	r1, #0
   2fec2:	d0e5      	beq.n	2fe90 <dcd_usb_ep_xfer_complete_callback+0x30>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   2fec4:	2200      	movs	r2, #0
   2fec6:	f8cd 2006 	str.w	r2, [sp, #6]
  event.xfer_complete.result  = result;
   2feca:	2101      	movs	r1, #1
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   2fecc:	f8ad 200a 	strh.w	r2, [sp, #10]
  event.xfer_complete.ep_addr = ep_addr;
   2fed0:	f88d 0008 	strb.w	r0, [sp, #8]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   2fed4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
  dcd_event_handler(&event, in_isr);
   2fed8:	a801      	add	r0, sp, #4
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
   2feda:	f8ad 2004 	strh.w	r2, [sp, #4]
                dcd_event_xfer_complete(0, ep_addr, xfer_len, XFER_RESULT_FAILED, true);
   2fede:	9303      	str	r3, [sp, #12]
  event.xfer_complete.result  = result;
   2fee0:	f88d 1009 	strb.w	r1, [sp, #9]
  dcd_event_handler(&event, in_isr);
   2fee4:	f7ff fa70 	bl	2f3c8 <dcd_event_handler>
}
   2fee8:	e7d2      	b.n	2fe90 <dcd_usb_ep_xfer_complete_callback+0x30>
   2feea:	bf00      	nop

0002feec <dcd_int_enable>:
   2feec:	4b03      	ldr	r3, [pc, #12]	@ (2fefc <dcd_int_enable+0x10>)
   2feee:	2280      	movs	r2, #128	@ 0x80
   2fef0:	f883 231b 	strb.w	r2, [r3, #795]	@ 0x31b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2fef4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   2fef8:	601a      	str	r2, [r3, #0]
dcd_int_enable(uint8_t rhport)
{
    (void) rhport;
    NVIC_SetPriority(USB0_IRQn, AM_IRQ_PRIORITY_DEFAULT);
    NVIC_EnableIRQ(USB0_IRQn);
}
   2fefa:	4770      	bx	lr
   2fefc:	e000e100 	.word	0xe000e100

0002ff00 <dcd_int_disable>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2ff00:	4b04      	ldr	r3, [pc, #16]	@ (2ff14 <dcd_int_disable+0x14>)
   2ff02:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   2ff06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2ff0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2ff0e:	f3bf 8f6f 	isb	sy
void
dcd_int_disable(uint8_t rhport)
{
    (void) rhport;
    NVIC_DisableIRQ(USB0_IRQn);
}
   2ff12:	4770      	bx	lr
   2ff14:	e000e100 	.word	0xe000e100

0002ff18 <dcd_set_address>:
//
//
//*****************************************************************************
void
dcd_set_address(uint8_t rhport, uint8_t dev_addr)
{
   2ff18:	b538      	push	{r3, r4, r5, lr}
              uint8_t *buffer,
              uint16_t total_bytes)
{
    (void) rhport;

    return am_hal_usb_ep_xfer(pUSBHandle,
   2ff1a:	4c09      	ldr	r4, [pc, #36]	@ (2ff40 <dcd_set_address+0x28>)
   2ff1c:	2300      	movs	r3, #0
{
   2ff1e:	460d      	mov	r5, r1
    return am_hal_usb_ep_xfer(pUSBHandle,
   2ff20:	461a      	mov	r2, r3
   2ff22:	6820      	ldr	r0, [r4, #0]
   2ff24:	2180      	movs	r1, #128	@ 0x80
   2ff26:	f000 fb5b 	bl	305e0 <am_hal_usb_ep_xfer>
    am_hal_usb_set_addr(pUSBHandle, dev_addr);
   2ff2a:	4629      	mov	r1, r5
   2ff2c:	6820      	ldr	r0, [r4, #0]
   2ff2e:	f000 f9db 	bl	302e8 <am_hal_usb_set_addr>
    am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_ADDRESSED);
   2ff32:	6820      	ldr	r0, [r4, #0]
   2ff34:	2101      	movs	r1, #1
}
   2ff36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    am_hal_usb_set_dev_state(pUSBHandle, AM_HAL_USB_DEV_STATE_ADDRESSED);
   2ff3a:	f000 b9ed 	b.w	30318 <am_hal_usb_set_dev_state>
   2ff3e:	bf00      	nop
   2ff40:	10054e94 	.word	0x10054e94

0002ff44 <dcd_edpt_open>:
{
   2ff44:	b508      	push	{r3, lr}
                              (uint8_t) (desc_edpt->bmAttributes.xfer),
   2ff46:	78ca      	ldrb	r2, [r1, #3]
    return am_hal_usb_ep_init((void *) pUSBHandle,
   2ff48:	4805      	ldr	r0, [pc, #20]	@ (2ff60 <dcd_edpt_open+0x1c>)
   2ff4a:	888b      	ldrh	r3, [r1, #4]
   2ff4c:	6800      	ldr	r0, [r0, #0]
   2ff4e:	7889      	ldrb	r1, [r1, #2]
   2ff50:	f002 0203 	and.w	r2, r2, #3
   2ff54:	f000 fa94 	bl	30480 <am_hal_usb_ep_init>
}
   2ff58:	fab0 f080 	clz	r0, r0
   2ff5c:	0940      	lsrs	r0, r0, #5
   2ff5e:	bd08      	pop	{r3, pc}
   2ff60:	10054e94 	.word	0x10054e94

0002ff64 <dcd_edpt_close_all>:
}
   2ff64:	4770      	bx	lr
   2ff66:	bf00      	nop

0002ff68 <dcd_edpt_xfer>:
    return am_hal_usb_ep_xfer(pUSBHandle,
   2ff68:	4804      	ldr	r0, [pc, #16]	@ (2ff7c <dcd_edpt_xfer+0x14>)
{
   2ff6a:	b508      	push	{r3, lr}
    return am_hal_usb_ep_xfer(pUSBHandle,
   2ff6c:	6800      	ldr	r0, [r0, #0]
   2ff6e:	f000 fb37 	bl	305e0 <am_hal_usb_ep_xfer>
                              ep_addr,
                              buffer,
                              total_bytes) == AM_HAL_STATUS_SUCCESS;
}
   2ff72:	fab0 f080 	clz	r0, r0
   2ff76:	0940      	lsrs	r0, r0, #5
   2ff78:	bd08      	pop	{r3, pc}
   2ff7a:	bf00      	nop
   2ff7c:	10054e94 	.word	0x10054e94

0002ff80 <dcd_edpt_stall>:
void
dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
    (void) rhport;

    am_hal_usb_ep_stall(pUSBHandle, ep_addr);
   2ff80:	4b01      	ldr	r3, [pc, #4]	@ (2ff88 <dcd_edpt_stall+0x8>)
   2ff82:	6818      	ldr	r0, [r3, #0]
   2ff84:	f000 b9fa 	b.w	3037c <am_hal_usb_ep_stall>
   2ff88:	10054e94 	.word	0x10054e94

0002ff8c <dcd_edpt_clear_stall>:
//
//*****************************************************************************
void
dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
    am_hal_usb_ep_clear_stall(pUSBHandle, ep_addr);
   2ff8c:	4b01      	ldr	r3, [pc, #4]	@ (2ff94 <dcd_edpt_clear_stall+0x8>)
   2ff8e:	6818      	ldr	r0, [r3, #0]
   2ff90:	f000 ba32 	b.w	303f8 <am_hal_usb_ep_clear_stall>
   2ff94:	10054e94 	.word	0x10054e94

0002ff98 <am_usb_isr>:
// the usb isr
//
//*****************************************************************************
void
am_usb_isr(void)
{
   2ff98:	b510      	push	{r4, lr}
    uint32_t ui32IntStatus[3];
    am_hal_usb_intr_status_get(pUSBHandle,
   2ff9a:	4c08      	ldr	r4, [pc, #32]	@ (2ffbc <am_usb_isr+0x24>)
{
   2ff9c:	b084      	sub	sp, #16
    am_hal_usb_intr_status_get(pUSBHandle,
   2ff9e:	ab03      	add	r3, sp, #12
   2ffa0:	aa02      	add	r2, sp, #8
   2ffa2:	a901      	add	r1, sp, #4
   2ffa4:	6820      	ldr	r0, [r4, #0]
   2ffa6:	f000 fcd5 	bl	30954 <am_hal_usb_intr_status_get>
                               &ui32IntStatus[0],
                               &ui32IntStatus[1],
                               &ui32IntStatus[2]);
    am_hal_usb_interrupt_service(pUSBHandle,
   2ffaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2ffae:	9901      	ldr	r1, [sp, #4]
   2ffb0:	6820      	ldr	r0, [r4, #0]
   2ffb2:	f000 fd41 	bl	30a38 <am_hal_usb_interrupt_service>
                                 ui32IntStatus[0],
                                 ui32IntStatus[1],
                                 ui32IntStatus[2]);
}
   2ffb6:	b004      	add	sp, #16
   2ffb8:	bd10      	pop	{r4, pc}
   2ffba:	bf00      	nop
   2ffbc:	10054e94 	.word	0x10054e94

0002ffc0 <dcd_connect>:
//*****************************************************************************
void
dcd_connect(uint8_t rhport)
{
    (void) rhport;
    am_hal_usb_attach(pUSBHandle);
   2ffc0:	4b01      	ldr	r3, [pc, #4]	@ (2ffc8 <dcd_connect+0x8>)
   2ffc2:	6818      	ldr	r0, [r3, #0]
   2ffc4:	f000 b9c6 	b.w	30354 <am_hal_usb_attach>
   2ffc8:	10054e94 	.word	0x10054e94

0002ffcc <dcd_init>:
{
   2ffcc:	b570      	push	{r4, r5, r6, lr}
    uint32_t initStat = am_hal_usb_initialize(0, (void *) &pUSBHandle);
   2ffce:	4d1e      	ldr	r5, [pc, #120]	@ (30048 <dcd_init+0x7c>)
{
   2ffd0:	4606      	mov	r6, r0
    uint32_t initStat = am_hal_usb_initialize(0, (void *) &pUSBHandle);
   2ffd2:	4629      	mov	r1, r5
   2ffd4:	2000      	movs	r0, #0
   2ffd6:	f000 f849 	bl	3006c <am_hal_usb_initialize>
    if (initStat != AM_HAL_STATUS_SUCCESS) return;
   2ffda:	b100      	cbz	r0, 2ffde <dcd_init+0x12>
}
   2ffdc:	bd70      	pop	{r4, r5, r6, pc}
    am_hal_usb_register_dev_evt_callback(pUSBHandle, dcd_usb_dev_evt_callback);
   2ffde:	4604      	mov	r4, r0
   2ffe0:	491a      	ldr	r1, [pc, #104]	@ (3004c <dcd_init+0x80>)
   2ffe2:	6828      	ldr	r0, [r5, #0]
   2ffe4:	f000 fcf2 	bl	309cc <am_hal_usb_register_dev_evt_callback>
    am_hal_usb_register_ep0_setup_received_callback(pUSBHandle, dcd_usb_ep0_setup_callback);
   2ffe8:	4919      	ldr	r1, [pc, #100]	@ (30050 <dcd_init+0x84>)
   2ffea:	6828      	ldr	r0, [r5, #0]
   2ffec:	f000 fd00 	bl	309f0 <am_hal_usb_register_ep0_setup_received_callback>
    am_hal_usb_register_ep_xfer_complete_callback(pUSBHandle, dcd_usb_ep_xfer_complete_callback);
   2fff0:	4918      	ldr	r1, [pc, #96]	@ (30054 <dcd_init+0x88>)
   2fff2:	6828      	ldr	r0, [r5, #0]
   2fff4:	f000 fd0e 	bl	30a14 <am_hal_usb_register_ep_xfer_complete_callback>
    am_hal_usb_power_control(pUSBHandle, AM_HAL_SYSCTRL_WAKE, false);
   2fff8:	4622      	mov	r2, r4
   2fffa:	4621      	mov	r1, r4
//! @return - none
//
//*****************************************************************************
static inline void am_hal_usb_enable_phy_reset_override(void)
{
    MCUCTRL->USBPHYRESET &= ~ (_VAL2FLD(MCUCTRL_USBPHYRESET_USBPHYPORRSTDIS, 0x1) |
   2fffc:	4c16      	ldr	r4, [pc, #88]	@ (30058 <dcd_init+0x8c>)
   2fffe:	6828      	ldr	r0, [r5, #0]
   30000:	f000 f856 	bl	300b0 <am_hal_usb_power_control>
   30004:	f8d4 3418 	ldr.w	r3, [r4, #1048]	@ 0x418
   30008:	f023 0303 	bic.w	r3, r3, #3
   3000c:	f8c4 3418 	str.w	r3, [r4, #1048]	@ 0x418
    am_bsp_external_vddusb33_switch(true);
   30010:	2001      	movs	r0, #1
   30012:	f003 fae3 	bl	335dc <am_bsp_external_vddusb33_switch>
    am_bsp_external_vddusb0p9_switch(true);
   30016:	2001      	movs	r0, #1
   30018:	f003 faf0 	bl	335fc <am_bsp_external_vddusb0p9_switch>
    am_util_delay_ms(50);
   3001c:	2032      	movs	r0, #50	@ 0x32
   3001e:	f000 f81f 	bl	30060 <am_util_delay_ms>
    USB->BCDETCRTL1 =
   30022:	4b0e      	ldr	r3, [pc, #56]	@ (3005c <dcd_init+0x90>)
    am_hal_usb_intr_usb_enable(pUSBHandle, USB_INTRUSB_Reset_Msk);
   30024:	6828      	ldr	r0, [r5, #0]
   30026:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
   3002a:	625a      	str	r2, [r3, #36]	@ 0x24
//! @return - none
//
//*****************************************************************************
static inline void am_hal_usb_disable_phy_reset_override(void)
{
    MCUCTRL->USBPHYRESET |= (_VAL2FLD(MCUCTRL_USBPHYRESET_USBPHYPORRSTDIS, 0x1) |
   3002c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	@ 0x418
   30030:	f043 0303 	orr.w	r3, r3, #3
   30034:	2104      	movs	r1, #4
   30036:	f8c4 3418 	str.w	r3, [r4, #1048]	@ 0x418
   3003a:	f000 fcaf 	bl	3099c <am_hal_usb_intr_usb_enable>
    dcd_connect(rhport);
   3003e:	4630      	mov	r0, r6
   30040:	f7ff ffbe 	bl	2ffc0 <dcd_connect>
}
   30044:	bd70      	pop	{r4, r5, r6, pc}
   30046:	bf00      	nop
   30048:	10054e94 	.word	0x10054e94
   3004c:	0002fd8d 	.word	0x0002fd8d
   30050:	0002fd69 	.word	0x0002fd69
   30054:	0002fe61 	.word	0x0002fe61
   30058:	40020000 	.word	0x40020000
   3005c:	400b2000 	.word	0x400b2000

00030060 <am_util_delay_ms>:
//*****************************************************************************
void
am_util_delay_ms(uint32_t ui32MilliSeconds)
{
#if defined(AM_PART_APOLLO4_API) || defined(AM_PART_APOLLO5_API)
    am_hal_delay_us( ui32MilliSeconds * 1000);
   30060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
   30064:	fb03 f000 	mul.w	r0, r3, r0
   30068:	f003 ba00 	b.w	3346c <am_hal_delay_us>

0003006c <am_hal_usb_initialize>:
{
    //
    // Check that the request module is in range.
    //
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Module >= AM_REG_USB_NUM_MODULES )
   3006c:	b9b0      	cbnz	r0, 3009c <am_hal_usb_initialize+0x30>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Check for valid arguments.
    //
    if ( !ppHandle )
   3006e:	b1c9      	cbz	r1, 300a4 <am_hal_usb_initialize+0x38>
    }

    //
    // Check if the handle is unallocated.
    //
    if ( g_am_hal_usb_states[ui32Module].prefix.s.bInit )
   30070:	4b0d      	ldr	r3, [pc, #52]	@ (300a8 <am_hal_usb_initialize+0x3c>)
   30072:	78d8      	ldrb	r0, [r3, #3]
   30074:	f3c0 0200 	ubfx	r2, r0, #0, #1
   30078:	f010 0001 	ands.w	r0, r0, #1
   3007c:	d110      	bne.n	300a0 <am_hal_usb_initialize+0x34>
{
   3007e:	b410      	push	{r4}

    //
    // Initialize the handle.
    //
    g_am_hal_usb_states[ui32Module].prefix.s.bInit   = true;
    g_am_hal_usb_states[ui32Module].prefix.s.magic   = AM_HAL_MAGIC_USB;
   30080:	681c      	ldr	r4, [r3, #0]
    g_am_hal_usb_states[ui32Module].ui32Module       = ui32Module;
    g_am_hal_usb_states[ui32Module].sRegState.bValid = false;
   30082:	711a      	strb	r2, [r3, #4]
    g_am_hal_usb_states[ui32Module].prefix.s.magic   = AM_HAL_MAGIC_USB;
   30084:	4a09      	ldr	r2, [pc, #36]	@ (300ac <am_hal_usb_initialize+0x40>)
    g_am_hal_usb_states[ui32Module].ui32Module       = ui32Module;
   30086:	f8c3 00f8 	str.w	r0, [r3, #248]	@ 0xf8
    g_am_hal_usb_states[ui32Module].prefix.s.magic   = AM_HAL_MAGIC_USB;
   3008a:	f004 4c7e 	and.w	ip, r4, #4261412864	@ 0xfe000000
   3008e:	ea4c 0202 	orr.w	r2, ip, r2
   30092:	601a      	str	r2, [r3, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_usb_initialize()
   30094:	f85d 4b04 	ldr.w	r4, [sp], #4
    *ppHandle = (void *)&g_am_hal_usb_states[ui32Module];
   30098:	600b      	str	r3, [r1, #0]
} // am_hal_usb_initialize()
   3009a:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   3009c:	2005      	movs	r0, #5
   3009e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   300a0:	2007      	movs	r0, #7
} // am_hal_usb_initialize()
   300a2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   300a4:	2006      	movs	r0, #6
   300a6:	4770      	bx	lr
   300a8:	10054e98 	.word	0x10054e98
   300ac:	01ea9e06 	.word	0x01ea9e06

000300b0 <am_hal_usb_power_control>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check to make sure this is a valid handle.
    //
    if ( !AM_HAL_USB_CHK_HANDLE(pHandle) )
   300b0:	2800      	cmp	r0, #0
   300b2:	f000 80a8 	beq.w	30206 <am_hal_usb_power_control+0x156>
{
   300b6:	b570      	push	{r4, r5, r6, lr}
    if ( !AM_HAL_USB_CHK_HANDLE(pHandle) )
   300b8:	6803      	ldr	r3, [r0, #0]
   300ba:	4615      	mov	r5, r2
   300bc:	4a86      	ldr	r2, [pc, #536]	@ (302d8 <am_hal_usb_power_control+0x228>)
   300be:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   300c2:	4293      	cmp	r3, r2
{
   300c4:	b084      	sub	sp, #16
   300c6:	4604      	mov	r4, r0
    if ( !AM_HAL_USB_CHK_HANDLE(pHandle) )
   300c8:	d127      	bne.n	3011a <am_hal_usb_power_control+0x6a>
    uint32_t ui32Status;
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Module >= AM_REG_USB_NUM_MODULES )
   300ca:	f8d0 00f8 	ldr.w	r0, [r0, #248]	@ 0xf8
   300ce:	bb38      	cbnz	r0, 30120 <am_hal_usb_power_control+0x70>
    USB_Type *pUSB = USBn(ui32Module);

    //
    // Decode the requested power state and update SCARD operation accordingly.
    //
    switch (ePowerState)
   300d0:	b359      	cbz	r1, 3012a <am_hal_usb_power_control+0x7a>
   300d2:	3901      	subs	r1, #1
   300d4:	2901      	cmp	r1, #1
   300d6:	d826      	bhi.n	30126 <am_hal_usb_power_control+0x76>
            }
            break;

        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if ( bRetainState )
   300d8:	2d00      	cmp	r5, #0
   300da:	f040 8096 	bne.w	3020a <am_hal_usb_power_control+0x15a>
//
//*****************************************************************************
uint32_t
am_hal_usb_intr_usb_clear(void *pHandle)
{
    volatile uint32_t tmp = 0;
   300de:	9502      	str	r5, [sp, #8]
    }
#endif
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *)pHandle;
    USB_Type *pUSB = USBn(pState->ui32Module);

    tmp = INTRUSB_Clear(pUSB);
   300e0:	4b7e      	ldr	r3, [pc, #504]	@ (302dc <am_hal_usb_power_control+0x22c>)
   300e2:	7a9a      	ldrb	r2, [r3, #10]
   300e4:	f002 020f 	and.w	r2, r2, #15
   300e8:	9202      	str	r2, [sp, #8]
    volatile uint32_t tmp = 0;
   300ea:	2100      	movs	r1, #0
    (void)tmp;
   300ec:	9a02      	ldr	r2, [sp, #8]
    volatile uint32_t tmp = 0;
   300ee:	9103      	str	r1, [sp, #12]
    tmp = INTRIN_Clear(pUSB);
   300f0:	885a      	ldrh	r2, [r3, #2]
   300f2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
   300f6:	9203      	str	r2, [sp, #12]
    (void)tmp;
   300f8:	9a03      	ldr	r2, [sp, #12]
    volatile uint32_t tmp = 0;
   300fa:	9101      	str	r1, [sp, #4]
    tmp = INTROUT_Clear(pUSB);
   300fc:	791b      	ldrb	r3, [r3, #4]
   300fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
   30102:	9301      	str	r3, [sp, #4]
    (void)tmp;
   30104:	9b01      	ldr	r3, [sp, #4]
            if ((ui32Status = am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USB)) == AM_HAL_STATUS_SUCCESS)
   30106:	2016      	movs	r0, #22
   30108:	f002 fbcc 	bl	328a4 <am_hal_pwrctrl_periph_disable>
   3010c:	b930      	cbnz	r0, 3011c <am_hal_usb_power_control+0x6c>
                ui32Status = am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USBPHY);
   3010e:	2017      	movs	r0, #23
}
   30110:	b004      	add	sp, #16
   30112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ui32Status = am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_USBPHY);
   30116:	f002 bbc5 	b.w	328a4 <am_hal_pwrctrl_periph_disable>
        return AM_HAL_STATUS_INVALID_HANDLE;
   3011a:	2002      	movs	r0, #2
}
   3011c:	b004      	add	sp, #16
   3011e:	bd70      	pop	{r4, r5, r6, pc}
        return AM_HAL_STATUS_OUT_OF_RANGE;
   30120:	2005      	movs	r0, #5
}
   30122:	b004      	add	sp, #16
   30124:	bd70      	pop	{r4, r5, r6, pc}
    switch (ePowerState)
   30126:	2006      	movs	r0, #6
   30128:	e7f8      	b.n	3011c <am_hal_usb_power_control+0x6c>
            if ( bRetainState && !pState->sRegState.bValid )
   3012a:	b11d      	cbz	r5, 30134 <am_hal_usb_power_control+0x84>
   3012c:	7923      	ldrb	r3, [r4, #4]
   3012e:	2b00      	cmp	r3, #0
   30130:	f000 80d0 	beq.w	302d4 <am_hal_usb_power_control+0x224>
            if ((ui32Status = am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_USB)) != AM_HAL_STATUS_SUCCESS)
   30134:	2016      	movs	r0, #22
   30136:	f002 fae5 	bl	32704 <am_hal_pwrctrl_periph_enable>
   3013a:	2800      	cmp	r0, #0
   3013c:	d1ee      	bne.n	3011c <am_hal_usb_power_control+0x6c>
            if ((ui32Status = am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_USBPHY)) != AM_HAL_STATUS_SUCCESS)
   3013e:	2017      	movs	r0, #23
   30140:	f002 fae0 	bl	32704 <am_hal_pwrctrl_periph_enable>
   30144:	2800      	cmp	r0, #0
   30146:	d1e9      	bne.n	3011c <am_hal_usb_power_control+0x6c>
            pUSB->SRAMCTRL = _VAL2FLD(USB_SRAMCTRL_WABL, 1)     |
   30148:	4a65      	ldr	r2, [pc, #404]	@ (302e0 <am_hal_usb_power_control+0x230>)
   3014a:	4b64      	ldr	r3, [pc, #400]	@ (302dc <am_hal_usb_power_control+0x22c>)
   3014c:	f242 7107 	movw	r1, #9991	@ 0x2707
   30150:	6051      	str	r1, [r2, #4]
            if ( bRetainState )
   30152:	2d00      	cmp	r5, #0
   30154:	d0e2      	beq.n	3011c <am_hal_usb_power_control+0x6c>
   30156:	4963      	ldr	r1, [pc, #396]	@ (302e4 <am_hal_usb_power_control+0x234>)
   30158:	f04f 6500 	mov.w	r5, #134217728	@ 0x8000000
   3015c:	f8c1 5080 	str.w	r5, [r1, #128]	@ 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   30160:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   30164:	f3bf 8f6f 	isb	sy
                pUSB->CFG0 = pState->sRegState.regCFG0;
   30168:	68a2      	ldr	r2, [r4, #8]
   3016a:	601a      	str	r2, [r3, #0]
                pUSB->CFG1 = pState->sRegState.regCFG1;
   3016c:	68e2      	ldr	r2, [r4, #12]
   3016e:	605a      	str	r2, [r3, #4]
                pUSB->CFG2 = pState->sRegState.regCFG2;
   30170:	6922      	ldr	r2, [r4, #16]
   30172:	609a      	str	r2, [r3, #8]
                    EP_INDEX_Set(pUSB, i);
   30174:	68da      	ldr	r2, [r3, #12]
   30176:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   3017a:	60da      	str	r2, [r3, #12]
   3017c:	68da      	ldr	r2, [r3, #12]
   3017e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
   30182:	60da      	str	r2, [r3, #12]
                    pUSB->IDX0 = pState->sRegState.regEndPoints[i-1].regIDX0;
   30184:	6962      	ldr	r2, [r4, #20]
   30186:	611a      	str	r2, [r3, #16]
                    pUSB->IDX1 = pState->sRegState.regEndPoints[i-1].regIDX1;
   30188:	69a2      	ldr	r2, [r4, #24]
   3018a:	615a      	str	r2, [r3, #20]
                    pUSB->IDX2 = pState->sRegState.regEndPoints[i-1].regIDX2;
   3018c:	69e2      	ldr	r2, [r4, #28]
   3018e:	619a      	str	r2, [r3, #24]
                    EP_INDEX_Set(pUSB, i);
   30190:	68da      	ldr	r2, [r3, #12]
   30192:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   30196:	60da      	str	r2, [r3, #12]
   30198:	68da      	ldr	r2, [r3, #12]
   3019a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
   3019e:	60da      	str	r2, [r3, #12]
                    pUSB->IDX0 = pState->sRegState.regEndPoints[i-1].regIDX0;
   301a0:	6a22      	ldr	r2, [r4, #32]
   301a2:	611a      	str	r2, [r3, #16]
                    pUSB->IDX1 = pState->sRegState.regEndPoints[i-1].regIDX1;
   301a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   301a6:	615a      	str	r2, [r3, #20]
                    pUSB->IDX2 = pState->sRegState.regEndPoints[i-1].regIDX2;
   301a8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
   301aa:	619a      	str	r2, [r3, #24]
                    EP_INDEX_Set(pUSB, i);
   301ac:	68da      	ldr	r2, [r3, #12]
   301ae:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   301b2:	60da      	str	r2, [r3, #12]
   301b4:	68da      	ldr	r2, [r3, #12]
   301b6:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
   301ba:	60da      	str	r2, [r3, #12]
                    pUSB->IDX0 = pState->sRegState.regEndPoints[i-1].regIDX0;
   301bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   301be:	611a      	str	r2, [r3, #16]
                    pUSB->IDX1 = pState->sRegState.regEndPoints[i-1].regIDX1;
   301c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
   301c2:	615a      	str	r2, [r3, #20]
                    pUSB->IDX2 = pState->sRegState.regEndPoints[i-1].regIDX2;
   301c4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
   301c6:	619a      	str	r2, [r3, #24]
                    EP_INDEX_Set(pUSB, i);
   301c8:	68da      	ldr	r2, [r3, #12]
   301ca:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   301ce:	60da      	str	r2, [r3, #12]
   301d0:	68da      	ldr	r2, [r3, #12]
   301d2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
   301d6:	60da      	str	r2, [r3, #12]
                    pUSB->IDX0 = pState->sRegState.regEndPoints[i-1].regIDX0;
   301d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
   301da:	611a      	str	r2, [r3, #16]
                    pUSB->IDX1 = pState->sRegState.regEndPoints[i-1].regIDX1;
   301dc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
   301de:	615a      	str	r2, [r3, #20]
                    pUSB->IDX2 = pState->sRegState.regEndPoints[i-1].regIDX2;
   301e0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
   301e2:	619a      	str	r2, [r3, #24]
                    EP_INDEX_Set(pUSB, i);
   301e4:	68da      	ldr	r2, [r3, #12]
   301e6:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   301ea:	60da      	str	r2, [r3, #12]
   301ec:	68da      	ldr	r2, [r3, #12]
   301ee:	f442 22a0 	orr.w	r2, r2, #327680	@ 0x50000
   301f2:	60da      	str	r2, [r3, #12]
                    pUSB->IDX0 = pState->sRegState.regEndPoints[i-1].regIDX0;
   301f4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
   301f6:	611a      	str	r2, [r3, #16]
                    pUSB->IDX1 = pState->sRegState.regEndPoints[i-1].regIDX1;
   301f8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
   301fa:	615a      	str	r2, [r3, #20]
                    pUSB->IDX2 = pState->sRegState.regEndPoints[i-1].regIDX2;
   301fc:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
   301fe:	619a      	str	r2, [r3, #24]
                pState->sRegState.bValid = false;
   30200:	7120      	strb	r0, [r4, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30202:	600d      	str	r5, [r1, #0]
    __COMPILER_BARRIER();
   30204:	e78a      	b.n	3011c <am_hal_usb_power_control+0x6c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   30206:	2002      	movs	r0, #2
}
   30208:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3020a:	4d36      	ldr	r5, [pc, #216]	@ (302e4 <am_hal_usb_power_control+0x234>)
   3020c:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
   30210:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   30214:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   30218:	f3bf 8f6f 	isb	sy
                pState->sRegState.regCFG0 = pUSB->CFG0;
   3021c:	4a2f      	ldr	r2, [pc, #188]	@ (302dc <am_hal_usb_power_control+0x22c>)
   3021e:	6811      	ldr	r1, [r2, #0]
   30220:	60a1      	str	r1, [r4, #8]
                pState->sRegState.regCFG1 = pUSB->CFG1;
   30222:	6851      	ldr	r1, [r2, #4]
   30224:	60e1      	str	r1, [r4, #12]
                pState->sRegState.regCFG2 = pUSB->CFG2;
   30226:	6891      	ldr	r1, [r2, #8]
   30228:	6121      	str	r1, [r4, #16]
                    EP_INDEX_Set(pUSB, i);
   3022a:	68d1      	ldr	r1, [r2, #12]
   3022c:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
   30230:	60d1      	str	r1, [r2, #12]
   30232:	68d1      	ldr	r1, [r2, #12]
   30234:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
   30238:	60d1      	str	r1, [r2, #12]
                    pState->sRegState.regEndPoints[i - 1].regIDX0 = pUSB->IDX0;
   3023a:	6911      	ldr	r1, [r2, #16]
   3023c:	6161      	str	r1, [r4, #20]
                    pState->sRegState.regEndPoints[i - 1].regIDX1 = pUSB->IDX1;
   3023e:	6951      	ldr	r1, [r2, #20]
   30240:	61a1      	str	r1, [r4, #24]
                    pState->sRegState.regEndPoints[i - 1].regIDX2 = pUSB->IDX2;
   30242:	6991      	ldr	r1, [r2, #24]
   30244:	61e1      	str	r1, [r4, #28]
                    EP_INDEX_Set(pUSB, i);
   30246:	68d1      	ldr	r1, [r2, #12]
   30248:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
   3024c:	60d1      	str	r1, [r2, #12]
   3024e:	68d1      	ldr	r1, [r2, #12]
   30250:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
   30254:	60d1      	str	r1, [r2, #12]
                    pState->sRegState.regEndPoints[i - 1].regIDX0 = pUSB->IDX0;
   30256:	6911      	ldr	r1, [r2, #16]
   30258:	6221      	str	r1, [r4, #32]
                    pState->sRegState.regEndPoints[i - 1].regIDX1 = pUSB->IDX1;
   3025a:	6951      	ldr	r1, [r2, #20]
   3025c:	6261      	str	r1, [r4, #36]	@ 0x24
                    pState->sRegState.regEndPoints[i - 1].regIDX2 = pUSB->IDX2;
   3025e:	6991      	ldr	r1, [r2, #24]
   30260:	62a1      	str	r1, [r4, #40]	@ 0x28
                    EP_INDEX_Set(pUSB, i);
   30262:	68d1      	ldr	r1, [r2, #12]
   30264:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
   30268:	60d1      	str	r1, [r2, #12]
   3026a:	68d1      	ldr	r1, [r2, #12]
   3026c:	f441 3140 	orr.w	r1, r1, #196608	@ 0x30000
   30270:	60d1      	str	r1, [r2, #12]
                    pState->sRegState.regEndPoints[i - 1].regIDX0 = pUSB->IDX0;
   30272:	6911      	ldr	r1, [r2, #16]
   30274:	62e1      	str	r1, [r4, #44]	@ 0x2c
                    pState->sRegState.regEndPoints[i - 1].regIDX1 = pUSB->IDX1;
   30276:	6951      	ldr	r1, [r2, #20]
   30278:	6321      	str	r1, [r4, #48]	@ 0x30
                    pState->sRegState.regEndPoints[i - 1].regIDX2 = pUSB->IDX2;
   3027a:	6991      	ldr	r1, [r2, #24]
   3027c:	6361      	str	r1, [r4, #52]	@ 0x34
                    EP_INDEX_Set(pUSB, i);
   3027e:	68d1      	ldr	r1, [r2, #12]
   30280:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
   30284:	60d1      	str	r1, [r2, #12]
   30286:	68d1      	ldr	r1, [r2, #12]
   30288:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
   3028c:	60d1      	str	r1, [r2, #12]
                    pState->sRegState.regEndPoints[i - 1].regIDX0 = pUSB->IDX0;
   3028e:	6911      	ldr	r1, [r2, #16]
   30290:	63a1      	str	r1, [r4, #56]	@ 0x38
                    pState->sRegState.regEndPoints[i - 1].regIDX1 = pUSB->IDX1;
   30292:	6951      	ldr	r1, [r2, #20]
   30294:	63e1      	str	r1, [r4, #60]	@ 0x3c
                    pState->sRegState.regEndPoints[i - 1].regIDX2 = pUSB->IDX2;
   30296:	6991      	ldr	r1, [r2, #24]
   30298:	6421      	str	r1, [r4, #64]	@ 0x40
                    EP_INDEX_Set(pUSB, i);
   3029a:	68d1      	ldr	r1, [r2, #12]
   3029c:	f421 2170 	bic.w	r1, r1, #983040	@ 0xf0000
   302a0:	60d1      	str	r1, [r2, #12]
   302a2:	68d1      	ldr	r1, [r2, #12]
   302a4:	f441 21a0 	orr.w	r1, r1, #327680	@ 0x50000
   302a8:	60d1      	str	r1, [r2, #12]
                    pState->sRegState.regEndPoints[i - 1].regIDX0 = pUSB->IDX0;
   302aa:	6911      	ldr	r1, [r2, #16]
   302ac:	6461      	str	r1, [r4, #68]	@ 0x44
                    pState->sRegState.regEndPoints[i - 1].regIDX1 = pUSB->IDX1;
   302ae:	6951      	ldr	r1, [r2, #20]
   302b0:	64a1      	str	r1, [r4, #72]	@ 0x48
                    pState->sRegState.regEndPoints[i - 1].regIDX2 = pUSB->IDX2;
   302b2:	6992      	ldr	r2, [r2, #24]
   302b4:	64e2      	str	r2, [r4, #76]	@ 0x4c
                pState->sRegState.bValid = true;
   302b6:	f04f 0c01 	mov.w	ip, #1
   302ba:	f884 c004 	strb.w	ip, [r4, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   302be:	602e      	str	r6, [r5, #0]
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   302c0:	6822      	ldr	r2, [r4, #0]
    volatile uint32_t tmp = 0;
   302c2:	9002      	str	r0, [sp, #8]
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   302c4:	f022 427e 	bic.w	r2, r2, #4261412864	@ 0xfe000000
   302c8:	429a      	cmp	r2, r3
    volatile uint32_t tmp = 0;
   302ca:	bf18      	it	ne
   302cc:	9001      	strne	r0, [sp, #4]
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   302ce:	f47f af1a 	bne.w	30106 <am_hal_usb_power_control+0x56>
   302d2:	e705      	b.n	300e0 <am_hal_usb_power_control+0x30>
                return AM_HAL_STATUS_INVALID_OPERATION;
   302d4:	2007      	movs	r0, #7
   302d6:	e721      	b.n	3011c <am_hal_usb_power_control+0x6c>
   302d8:	01ea9e06 	.word	0x01ea9e06
   302dc:	400b0000 	.word	0x400b0000
   302e0:	400b2000 	.word	0x400b2000
   302e4:	e000e100 	.word	0xe000e100

000302e8 <am_hal_usb_set_addr>:
        if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   302e8:	b178      	cbz	r0, 3030a <am_hal_usb_set_addr+0x22>
   302ea:	6803      	ldr	r3, [r0, #0]
   302ec:	4a08      	ldr	r2, [pc, #32]	@ (30310 <am_hal_usb_set_addr+0x28>)
   302ee:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   302f2:	4293      	cmp	r3, r2
   302f4:	d109      	bne.n	3030a <am_hal_usb_set_addr+0x22>
    FADDR_FuncAddr_Set(pUSB, ui8DevAddr);
   302f6:	4b07      	ldr	r3, [pc, #28]	@ (30314 <am_hal_usb_set_addr+0x2c>)
   302f8:	781a      	ldrb	r2, [r3, #0]
   302fa:	f002 0280 	and.w	r2, r2, #128	@ 0x80
   302fe:	701a      	strb	r2, [r3, #0]
   30300:	781a      	ldrb	r2, [r3, #0]
   30302:	430a      	orrs	r2, r1
    return AM_HAL_STATUS_SUCCESS;
   30304:	2000      	movs	r0, #0
    FADDR_FuncAddr_Set(pUSB, ui8DevAddr);
   30306:	701a      	strb	r2, [r3, #0]
    return AM_HAL_STATUS_SUCCESS;
   30308:	4770      	bx	lr
            return AM_HAL_STATUS_INVALID_HANDLE;
   3030a:	2002      	movs	r0, #2
}
   3030c:	4770      	bx	lr
   3030e:	bf00      	nop
   30310:	01ea9e06 	.word	0x01ea9e06
   30314:	400b0000 	.word	0x400b0000

00030318 <am_hal_usb_set_dev_state>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   30318:	b1b8      	cbz	r0, 3034a <am_hal_usb_set_dev_state+0x32>
{
   3031a:	b530      	push	{r4, r5, lr}
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   3031c:	6803      	ldr	r3, [r0, #0]
   3031e:	4a0c      	ldr	r2, [pc, #48]	@ (30350 <am_hal_usb_set_dev_state+0x38>)
   30320:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   30324:	4293      	cmp	r3, r2
{
   30326:	b083      	sub	sp, #12
   30328:	4604      	mov	r4, r0
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   3032a:	d002      	beq.n	30332 <am_hal_usb_set_dev_state+0x1a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   3032c:	2002      	movs	r0, #2
}
   3032e:	b003      	add	sp, #12
   30330:	bd30      	pop	{r4, r5, pc}
   30332:	460d      	mov	r5, r1
    AM_CRITICAL_BEGIN
   30334:	f001 fe44 	bl	31fc0 <am_hal_interrupt_master_disable>
   30338:	9001      	str	r0, [sp, #4]
    AM_CRITICAL_END
   3033a:	9801      	ldr	r0, [sp, #4]
    pState->eDevState = eDevState;
   3033c:	f884 5055 	strb.w	r5, [r4, #85]	@ 0x55
    AM_CRITICAL_END
   30340:	f001 fe42 	bl	31fc8 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   30344:	2000      	movs	r0, #0
}
   30346:	b003      	add	sp, #12
   30348:	bd30      	pop	{r4, r5, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
   3034a:	2002      	movs	r0, #2
}
   3034c:	4770      	bx	lr
   3034e:	bf00      	nop
   30350:	01ea9e06 	.word	0x01ea9e06

00030354 <am_hal_usb_attach>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   30354:	b160      	cbz	r0, 30370 <am_hal_usb_attach+0x1c>
   30356:	6803      	ldr	r3, [r0, #0]
   30358:	4a06      	ldr	r2, [pc, #24]	@ (30374 <am_hal_usb_attach+0x20>)
   3035a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3035e:	4293      	cmp	r3, r2
   30360:	d106      	bne.n	30370 <am_hal_usb_attach+0x1c>
    POWER_AMSPECIFIC_Set(pUSB);
   30362:	4a05      	ldr	r2, [pc, #20]	@ (30378 <am_hal_usb_attach+0x24>)
   30364:	7853      	ldrb	r3, [r2, #1]
   30366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
    return AM_HAL_STATUS_SUCCESS;
   3036a:	2000      	movs	r0, #0
    POWER_AMSPECIFIC_Set(pUSB);
   3036c:	7053      	strb	r3, [r2, #1]
    return AM_HAL_STATUS_SUCCESS;
   3036e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   30370:	2002      	movs	r0, #2
}
   30372:	4770      	bx	lr
   30374:	01ea9e06 	.word	0x01ea9e06
   30378:	400b0000 	.word	0x400b0000

0003037c <am_hal_usb_ep_stall>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   3037c:	b350      	cbz	r0, 303d4 <am_hal_usb_ep_stall+0x58>
   3037e:	6803      	ldr	r3, [r0, #0]
   30380:	4a1a      	ldr	r2, [pc, #104]	@ (303ec <am_hal_usb_ep_stall+0x70>)
   30382:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   30386:	4293      	cmp	r3, r2
   30388:	d124      	bne.n	303d4 <am_hal_usb_ep_stall+0x58>
    if (AM_HAL_USB_CHK_EP_NUM(ui8EpAddr))
   3038a:	f001 027f 	and.w	r2, r1, #127	@ 0x7f
   3038e:	2a05      	cmp	r2, #5
   30390:	d81e      	bhi.n	303d0 <am_hal_usb_ep_stall+0x54>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30392:	4b17      	ldr	r3, [pc, #92]	@ (303f0 <am_hal_usb_ep_stall+0x74>)
   30394:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
   30398:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   3039c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   303a0:	f3bf 8f6f 	isb	sy
    EP_INDEX_Set(pUSB, ui8EpNum);
   303a4:	4b13      	ldr	r3, [pc, #76]	@ (303f4 <am_hal_usb_ep_stall+0x78>)
   303a6:	68d8      	ldr	r0, [r3, #12]
   303a8:	f420 2070 	bic.w	r0, r0, #983040	@ 0xf0000
   303ac:	60d8      	str	r0, [r3, #12]
   303ae:	68d8      	ldr	r0, [r3, #12]
   303b0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   303b4:	60d8      	str	r0, [r3, #12]
    if (ui8EpNum == AM_HAL_USB_EP0_NUMBER)
   303b6:	b17a      	cbz	r2, 303d8 <am_hal_usb_ep_stall+0x5c>
        switch ( ui8EpDir )
   303b8:	09c9      	lsrs	r1, r1, #7
   303ba:	d112      	bne.n	303e2 <am_hal_usb_ep_stall+0x66>
                OUTCSRL_SendStall_Set(pUSB);
   303bc:	695a      	ldr	r2, [r3, #20]
   303be:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
   303c2:	615a      	str	r2, [r3, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   303c4:	4b0a      	ldr	r3, [pc, #40]	@ (303f0 <am_hal_usb_ep_stall+0x74>)
   303c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   303ca:	601a      	str	r2, [r3, #0]
    return AM_HAL_STATUS_SUCCESS;
   303cc:	2000      	movs	r0, #0
   303ce:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   303d0:	2006      	movs	r0, #6
}
   303d2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   303d4:	2002      	movs	r0, #2
   303d6:	4770      	bx	lr
        CSR0_ServicedOutPktRdyAndSendStall_Set(pUSB);
   303d8:	691a      	ldr	r2, [r3, #16]
   303da:	f442 02c0 	orr.w	r2, r2, #6291456	@ 0x600000
   303de:	611a      	str	r2, [r3, #16]
   303e0:	e7f0      	b.n	303c4 <am_hal_usb_ep_stall+0x48>
                INCSRL_SendStall_Set(pUSB);
   303e2:	691a      	ldr	r2, [r3, #16]
   303e4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
   303e8:	611a      	str	r2, [r3, #16]
                break;
   303ea:	e7eb      	b.n	303c4 <am_hal_usb_ep_stall+0x48>
   303ec:	01ea9e06 	.word	0x01ea9e06
   303f0:	e000e100 	.word	0xe000e100
   303f4:	400b0000 	.word	0x400b0000

000303f8 <am_hal_usb_ep_clear_stall>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle) )
   303f8:	b160      	cbz	r0, 30414 <am_hal_usb_ep_clear_stall+0x1c>
   303fa:	6803      	ldr	r3, [r0, #0]
   303fc:	4a1d      	ldr	r2, [pc, #116]	@ (30474 <am_hal_usb_ep_clear_stall+0x7c>)
   303fe:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   30402:	4293      	cmp	r3, r2
   30404:	d106      	bne.n	30414 <am_hal_usb_ep_clear_stall+0x1c>
    if (AM_HAL_USB_CHK_EP_NUM(ui8EpAddr))
   30406:	f001 027f 	and.w	r2, r1, #127	@ 0x7f
   3040a:	2a05      	cmp	r2, #5
   3040c:	d826      	bhi.n	3045c <am_hal_usb_ep_clear_stall+0x64>
    if (ui8EpNum == AM_HAL_USB_EP0_NUMBER)
   3040e:	b91a      	cbnz	r2, 30418 <am_hal_usb_ep_clear_stall+0x20>
        return AM_HAL_STATUS_SUCCESS;
   30410:	2000      	movs	r0, #0
   30412:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   30414:	2002      	movs	r0, #2
   30416:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30418:	4b17      	ldr	r3, [pc, #92]	@ (30478 <am_hal_usb_ep_clear_stall+0x80>)
   3041a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
   3041e:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   30422:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   30426:	f3bf 8f6f 	isb	sy
    EP_INDEX_Set(pUSB, ui8EpNum);
   3042a:	4b14      	ldr	r3, [pc, #80]	@ (3047c <am_hal_usb_ep_clear_stall+0x84>)
   3042c:	68d8      	ldr	r0, [r3, #12]
   3042e:	f420 2070 	bic.w	r0, r0, #983040	@ 0xf0000
   30432:	60d8      	str	r0, [r3, #12]
   30434:	68d8      	ldr	r0, [r3, #12]
    if (ui8EpDir == AM_HAL_USB_EP_DIR_IN)
   30436:	09c9      	lsrs	r1, r1, #7
    EP_INDEX_Set(pUSB, ui8EpNum);
   30438:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
   3043c:	60da      	str	r2, [r3, #12]
    if (ui8EpDir == AM_HAL_USB_EP_DIR_IN)
   3043e:	d10f      	bne.n	30460 <am_hal_usb_ep_clear_stall+0x68>
        OUTCSRL_SendStall_Clear(pUSB);
   30440:	695a      	ldr	r2, [r3, #20]
   30442:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
   30446:	615a      	str	r2, [r3, #20]
        OUTCSRL_ClrDataTog_Set(pUSB);
   30448:	695a      	ldr	r2, [r3, #20]
   3044a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
   3044e:	615a      	str	r2, [r3, #20]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30450:	4b09      	ldr	r3, [pc, #36]	@ (30478 <am_hal_usb_ep_clear_stall+0x80>)
   30452:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   30456:	601a      	str	r2, [r3, #0]
        return AM_HAL_STATUS_SUCCESS;
   30458:	2000      	movs	r0, #0
   3045a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   3045c:	2006      	movs	r0, #6
}
   3045e:	4770      	bx	lr
        INCSRL_SendStall_Clear(pUSB);
   30460:	691a      	ldr	r2, [r3, #16]
   30462:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
   30466:	611a      	str	r2, [r3, #16]
        INCSRL_ClrDataTog_Set(pUSB);
   30468:	691a      	ldr	r2, [r3, #16]
   3046a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
   3046e:	611a      	str	r2, [r3, #16]
   30470:	e7ee      	b.n	30450 <am_hal_usb_ep_clear_stall+0x58>
   30472:	bf00      	nop
   30474:	01ea9e06 	.word	0x01ea9e06
   30478:	e000e100 	.word	0xe000e100
   3047c:	400b0000 	.word	0x400b0000

00030480 <am_hal_usb_ep_init>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   30480:	2800      	cmp	r0, #0
   30482:	f000 80a1 	beq.w	305c8 <am_hal_usb_ep_init+0x148>
{
   30486:	b470      	push	{r4, r5, r6}
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   30488:	6804      	ldr	r4, [r0, #0]
   3048a:	4d53      	ldr	r5, [pc, #332]	@ (305d8 <am_hal_usb_ep_init+0x158>)
   3048c:	f024 447e 	bic.w	r4, r4, #4261412864	@ 0xfe000000
   30490:	42ac      	cmp	r4, r5
   30492:	d156      	bne.n	30542 <am_hal_usb_ep_init+0xc2>
    if (AM_HAL_USB_CHK_EP_NUM(ui8EpAddr))
   30494:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
   30498:	2d05      	cmp	r5, #5
   3049a:	d855      	bhi.n	30548 <am_hal_usb_ep_init+0xc8>
    bool hspeed = POWER_HSMode(pUSB);
   3049c:	4c4f      	ldr	r4, [pc, #316]	@ (305dc <am_hal_usb_ep_init+0x15c>)
   3049e:	7864      	ldrb	r4, [r4, #1]
    if ((ui16MaxPacket > am_hal_usb_fifo_size(EP_FIFO_SZ_64)) && !hspeed)
   304a0:	2b40      	cmp	r3, #64	@ 0x40
    bool hspeed = POWER_HSMode(pUSB);
   304a2:	b2e4      	uxtb	r4, r4
    if ((ui16MaxPacket > am_hal_usb_fifo_size(EP_FIFO_SZ_64)) && !hspeed)
   304a4:	d901      	bls.n	304aa <am_hal_usb_ep_init+0x2a>
   304a6:	06e6      	lsls	r6, r4, #27
   304a8:	d54e      	bpl.n	30548 <am_hal_usb_ep_init+0xc8>
    EP_INDEX_Set(pUSB, ui8EpNum);
   304aa:	4c4c      	ldr	r4, [pc, #304]	@ (305dc <am_hal_usb_ep_init+0x15c>)
   304ac:	68e6      	ldr	r6, [r4, #12]
   304ae:	f426 2670 	bic.w	r6, r6, #983040	@ 0xf0000
   304b2:	60e6      	str	r6, [r4, #12]
   304b4:	68e6      	ldr	r6, [r4, #12]
   304b6:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
   304ba:	60e6      	str	r6, [r4, #12]
    if (ui8EpNum == 0x0)
   304bc:	2d00      	cmp	r5, #0
   304be:	d07b      	beq.n	305b8 <am_hal_usb_ep_init+0x138>
    switch ( ui8EpDir )
   304c0:	09c9      	lsrs	r1, r1, #7
    return (am_hal_usb_ep_xfer_type_e)(attr & AM_HAL_USB_EP_XFER_MASK);
   304c2:	f002 0203 	and.w	r2, r2, #3
            pState->epin_maxpackets[ui8EpNum - 1] = ui16MaxPacket;
   304c6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    switch ( ui8EpDir )
   304ca:	d140      	bne.n	3054e <am_hal_usb_ep_init+0xce>
            OUTMAXP_MaxPayload_Set(pUSB, ui16MaxPacket);
   304cc:	6961      	ldr	r1, [r4, #20]
   304ce:	f36f 010a 	bfc	r1, #0, #11
   304d2:	6161      	str	r1, [r4, #20]
   304d4:	6961      	ldr	r1, [r4, #20]
   304d6:	4319      	orrs	r1, r3
   304d8:	6161      	str	r1, [r4, #20]
            if (am_hal_usb_ep_xfer_type(ui8EpAttr) == AM_HAL_USB_EP_XFER_ISOCHRONOUS)
   304da:	2a01      	cmp	r2, #1
                OUTCSRU_ISO_Set(pUSB);
   304dc:	6962      	ldr	r2, [r4, #20]
            pState->epout_maxpackets[ui8EpNum - 1] = ui16MaxPacket;
   304de:	f8a5 3062 	strh.w	r3, [r5, #98]	@ 0x62
                OUTCSRU_ISO_Set(pUSB);
   304e2:	bf0c      	ite	eq
   304e4:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
                OUTCSRU_ISO_Clear(pUSB);
   304e8:	f022 4280 	bicne.w	r2, r2, #1073741824	@ 0x40000000
   304ec:	6162      	str	r2, [r4, #20]
            OUTCSRL_ClrDataTog_Set(pUSB);
   304ee:	4a3b      	ldr	r2, [pc, #236]	@ (305dc <am_hal_usb_ep_init+0x15c>)
   304f0:	6951      	ldr	r1, [r2, #20]
   304f2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
   304f6:	6151      	str	r1, [r2, #20]
            if (OUTCSRL_OutPktRdy(pUSB))
   304f8:	6951      	ldr	r1, [r2, #20]
   304fa:	03c9      	lsls	r1, r1, #15
   304fc:	d503      	bpl.n	30506 <am_hal_usb_ep_init+0x86>
                OUTCSRL_FlushFIFO_Set(pUSB);
   304fe:	6951      	ldr	r1, [r2, #20]
   30500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
   30504:	6151      	str	r1, [r2, #20]
    while (tmp)
   30506:	0919      	lsrs	r1, r3, #4
   30508:	d004      	beq.n	30514 <am_hal_usb_ep_init+0x94>
   3050a:	fab1 f181 	clz	r1, r1
            OutFIFOsz_Set(pUSB, FIFO_SINGLE_PKTBUF, sz);
   3050e:	f1c1 0120 	rsb	r1, r1, #32
   30512:	0609      	lsls	r1, r1, #24
   30514:	4a31      	ldr	r2, [pc, #196]	@ (305dc <am_hal_usb_ep_init+0x15c>)
   30516:	6994      	ldr	r4, [r2, #24]
   30518:	f024 54f8 	bic.w	r4, r4, #520093696	@ 0x1f000000
   3051c:	6194      	str	r4, [r2, #24]
   3051e:	6994      	ldr	r4, [r2, #24]
   30520:	4321      	orrs	r1, r4
   30522:	6191      	str	r1, [r2, #24]
            OutFIFOadd_Set(pUSB, am_hal_usb_ep_fifo_addr(&pState->ui32Allocated, ui16MaxPacket));
   30524:	69d1      	ldr	r1, [r2, #28]
   30526:	f36f 411c 	bfc	r1, #16, #13
   3052a:	61d1      	str	r1, [r2, #28]
    uint32_t tmp = *ui32Allocated;
   3052c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
     *ui32Allocated += ui16PktSize / 8;
   3052e:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
   30532:	6503      	str	r3, [r0, #80]	@ 0x50
            OutFIFOadd_Set(pUSB, am_hal_usb_ep_fifo_addr(&pState->ui32Allocated, ui16MaxPacket));
   30534:	69d3      	ldr	r3, [r2, #28]
   30536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   3053a:	61d3      	str	r3, [r2, #28]
        return AM_HAL_STATUS_SUCCESS;
   3053c:	2000      	movs	r0, #0
}
   3053e:	bc70      	pop	{r4, r5, r6}
   30540:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   30542:	2002      	movs	r0, #2
}
   30544:	bc70      	pop	{r4, r5, r6}
   30546:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   30548:	2006      	movs	r0, #6
}
   3054a:	bc70      	pop	{r4, r5, r6}
   3054c:	4770      	bx	lr
            INMAXP_MaxPayload_Set(pUSB, ui16MaxPacket);
   3054e:	6921      	ldr	r1, [r4, #16]
   30550:	f36f 010a 	bfc	r1, #0, #11
   30554:	6121      	str	r1, [r4, #16]
   30556:	6921      	ldr	r1, [r4, #16]
   30558:	4319      	orrs	r1, r3
   3055a:	6121      	str	r1, [r4, #16]
            if (am_hal_usb_ep_xfer_type(ui8EpAttr) == AM_HAL_USB_EP_XFER_ISOCHRONOUS)
   3055c:	2a01      	cmp	r2, #1
                INCSRU_ISO_Set(pUSB);
   3055e:	6922      	ldr	r2, [r4, #16]
            pState->epin_maxpackets[ui8EpNum - 1] = ui16MaxPacket;
   30560:	f8a5 3058 	strh.w	r3, [r5, #88]	@ 0x58
                INCSRU_ISO_Set(pUSB);
   30564:	bf0c      	ite	eq
   30566:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
                INCSRU_ISO_Clear(pUSB);
   3056a:	f022 4280 	bicne.w	r2, r2, #1073741824	@ 0x40000000
   3056e:	6122      	str	r2, [r4, #16]
            INCSRL_ClrDataTog_Set(pUSB);
   30570:	4a1a      	ldr	r2, [pc, #104]	@ (305dc <am_hal_usb_ep_init+0x15c>)
   30572:	6911      	ldr	r1, [r2, #16]
   30574:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
   30578:	6111      	str	r1, [r2, #16]
            if (INCSRL_FIFONotEmpty(pUSB))
   3057a:	6911      	ldr	r1, [r2, #16]
   3057c:	038c      	lsls	r4, r1, #14
   3057e:	d425      	bmi.n	305cc <am_hal_usb_ep_init+0x14c>
    while (tmp)
   30580:	091a      	lsrs	r2, r3, #4
   30582:	d005      	beq.n	30590 <am_hal_usb_ep_init+0x110>
   30584:	fab2 f282 	clz	r2, r2
            InFIFOsz_Set(pUSB, FIFO_SINGLE_PKTBUF, sz);
   30588:	f1c2 0220 	rsb	r2, r2, #32
   3058c:	b2d2      	uxtb	r2, r2
   3058e:	0412      	lsls	r2, r2, #16
   30590:	4912      	ldr	r1, [pc, #72]	@ (305dc <am_hal_usb_ep_init+0x15c>)
   30592:	698c      	ldr	r4, [r1, #24]
   30594:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
   30598:	618c      	str	r4, [r1, #24]
   3059a:	698c      	ldr	r4, [r1, #24]
   3059c:	4322      	orrs	r2, r4
   3059e:	618a      	str	r2, [r1, #24]
            InFIFOadd_Set(pUSB, am_hal_usb_ep_fifo_addr(&pState->ui32Allocated, ui16MaxPacket));
   305a0:	69ca      	ldr	r2, [r1, #28]
   305a2:	f36f 020c 	bfc	r2, #0, #13
   305a6:	61ca      	str	r2, [r1, #28]
    uint32_t tmp = *ui32Allocated;
   305a8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
     *ui32Allocated += ui16PktSize / 8;
   305aa:	eb02 03d3 	add.w	r3, r2, r3, lsr #3
   305ae:	6503      	str	r3, [r0, #80]	@ 0x50
            InFIFOadd_Set(pUSB, am_hal_usb_ep_fifo_addr(&pState->ui32Allocated, ui16MaxPacket));
   305b0:	69cb      	ldr	r3, [r1, #28]
   305b2:	4313      	orrs	r3, r2
   305b4:	61cb      	str	r3, [r1, #28]
            break;
   305b6:	e7c1      	b.n	3053c <am_hal_usb_ep_init+0xbc>
        INTRINE_Enable(pUSB, 0x1 << 0x0);
   305b8:	88e2      	ldrh	r2, [r4, #6]
   305ba:	b292      	uxth	r2, r2
   305bc:	f042 0201 	orr.w	r2, r2, #1
   305c0:	80e2      	strh	r2, [r4, #6]
        pState->ep0_maxpacket = ui16MaxPacket;
   305c2:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58
        return AM_HAL_STATUS_SUCCESS;
   305c6:	e7b9      	b.n	3053c <am_hal_usb_ep_init+0xbc>
        return AM_HAL_STATUS_INVALID_HANDLE;
   305c8:	2002      	movs	r0, #2
}
   305ca:	4770      	bx	lr
                INCSRL_FlushFIFO_Set(pUSB);
   305cc:	6911      	ldr	r1, [r2, #16]
   305ce:	f441 2100 	orr.w	r1, r1, #524288	@ 0x80000
   305d2:	6111      	str	r1, [r2, #16]
   305d4:	e7d4      	b.n	30580 <am_hal_usb_ep_init+0x100>
   305d6:	bf00      	nop
   305d8:	01ea9e06 	.word	0x01ea9e06
   305dc:	400b0000 	.word	0x400b0000

000305e0 <am_hal_usb_ep_xfer>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   305e0:	2800      	cmp	r0, #0
   305e2:	f000 80e5 	beq.w	307b0 <am_hal_usb_ep_xfer+0x1d0>
{
   305e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   305ea:	6804      	ldr	r4, [r0, #0]
   305ec:	f024 4c7e 	bic.w	ip, r4, #4261412864	@ 0xfe000000
   305f0:	4cbd      	ldr	r4, [pc, #756]	@ (308e8 <am_hal_usb_ep_xfer+0x308>)
   305f2:	45a4      	cmp	ip, r4
   305f4:	d134      	bne.n	30660 <am_hal_usb_ep_xfer+0x80>
    if (AM_HAL_USB_CHK_EP_NUM(ui8EpAddr))
   305f6:	f001 047f 	and.w	r4, r1, #127	@ 0x7f
   305fa:	2c05      	cmp	r4, #5
   305fc:	f200 8083 	bhi.w	30706 <am_hal_usb_ep_xfer+0x126>
    return (addr & AM_HAL_USB_EP_DIR_IN_MASK) ? AM_HAL_USB_EP_DIR_IN : AM_HAL_USB_EP_DIR_OUT;
   30600:	09c9      	lsrs	r1, r1, #7
    if (ui8EpNum == AM_HAL_USB_EP0_NUMBER)
   30602:	bb84      	cbnz	r4, 30666 <am_hal_usb_ep_xfer+0x86>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30604:	4fb9      	ldr	r7, [pc, #740]	@ (308ec <am_hal_usb_ep_xfer+0x30c>)
   30606:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
   3060a:	f8c7 c080 	str.w	ip, [r7, #128]	@ 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   3060e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   30612:	f3bf 8f6f 	isb	sy
    EP_INDEX_Set(pUSB, ui8EpNum);
   30616:	4cb6      	ldr	r4, [pc, #728]	@ (308f0 <am_hal_usb_ep_xfer+0x310>)
    if (pState->ep0_xfer.flags.busy == 0x1)
   30618:	f890 5078 	ldrb.w	r5, [r0, #120]	@ 0x78
    EP_INDEX_Set(pUSB, ui8EpNum);
   3061c:	68e6      	ldr	r6, [r4, #12]
   3061e:	f426 2670 	bic.w	r6, r6, #983040	@ 0xf0000
   30622:	60e6      	str	r6, [r4, #12]
   30624:	68e6      	ldr	r6, [r4, #12]
   30626:	60e6      	str	r6, [r4, #12]
    if (pState->ep0_xfer.flags.busy == 0x1)
   30628:	07ee      	lsls	r6, r5, #31
   3062a:	f100 8151 	bmi.w	308d0 <am_hal_usb_ep_xfer+0x2f0>
        pState->ep0_xfer.flags.busy = 0x1;
   3062e:	f025 0605 	bic.w	r6, r5, #5
   30632:	008d      	lsls	r5, r1, #2
   30634:	f045 0501 	orr.w	r5, r5, #1
   30638:	4335      	orrs	r5, r6
   3063a:	f880 5078 	strb.w	r5, [r0, #120]	@ 0x78
    switch ( pState->eEP0State )
   3063e:	f890 5056 	ldrb.w	r5, [r0, #86]	@ 0x56
    maxpacket = pState->ep0_maxpacket;
   30642:	f8b0 6058 	ldrh.w	r6, [r0, #88]	@ 0x58
    pState->ep0_xfer.buf = pui8Buf;
   30646:	6702      	str	r2, [r0, #112]	@ 0x70
    pState->ep0_xfer.len = ui16Len;
   30648:	f8a0 3074 	strh.w	r3, [r0, #116]	@ 0x74
    switch ( pState->eEP0State )
   3064c:	2d00      	cmp	r5, #0
   3064e:	f000 80a4 	beq.w	3079a <am_hal_usb_ep_xfer+0x1ba>
   30652:	2d01      	cmp	r5, #1
   30654:	f000 80ae 	beq.w	307b4 <am_hal_usb_ep_xfer+0x1d4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30658:	f8c7 c000 	str.w	ip, [r7]
                return AM_HAL_STATUS_FAIL;
   3065c:	2001      	movs	r0, #1
   3065e:	e000      	b.n	30662 <am_hal_usb_ep_xfer+0x82>
        return AM_HAL_STATUS_INVALID_HANDLE;
   30660:	2002      	movs	r0, #2
}
   30662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30666:	f8df a284 	ldr.w	sl, [pc, #644]	@ 308ec <am_hal_usb_ep_xfer+0x30c>
   3066a:	f04f 6b00 	mov.w	fp, #134217728	@ 0x8000000
   3066e:	f8ca b080 	str.w	fp, [sl, #128]	@ 0x80
    am_hal_usb_ep_xfer_t *pXfer = &pState->ep_xfers[ui8EpNum - 1][ui8EpDir];
   30672:	1e67      	subs	r7, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
   30674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   30678:	f3bf 8f6f 	isb	sy
    EP_INDEX_Set(pUSB, ui8EpNum);
   3067c:	4d9c      	ldr	r5, [pc, #624]	@ (308f0 <am_hal_usb_ep_xfer+0x310>)
   3067e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
    if (pXfer->flags.busy == 0x1)
   30682:	eb07 0647 	add.w	r6, r7, r7, lsl #1
    EP_INDEX_Set(pUSB, ui8EpNum);
   30686:	f42c 2c70 	bic.w	ip, ip, #983040	@ 0xf0000
   3068a:	f8c5 c00c 	str.w	ip, [r5, #12]
    if (pXfer->flags.busy == 0x1)
   3068e:	00f6      	lsls	r6, r6, #3
   30690:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    EP_INDEX_Set(pUSB, ui8EpNum);
   30694:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    if (pXfer->flags.busy == 0x1)
   30698:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
   3069c:	4484      	add	ip, r0
    EP_INDEX_Set(pUSB, ui8EpNum);
   3069e:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
   306a2:	f8c5 e00c 	str.w	lr, [r5, #12]
    if (pXfer->flags.busy == 0x1)
   306a6:	f89c e084 	ldrb.w	lr, [ip, #132]	@ 0x84
   306aa:	f01e 0901 	ands.w	r9, lr, #1
   306ae:	ea4f 0847 	mov.w	r8, r7, lsl #1
   306b2:	f040 8109 	bne.w	308c8 <am_hal_usb_ep_xfer+0x2e8>
        pXfer->flags.busy = 0x1;
   306b6:	ea4f 0a81 	mov.w	sl, r1, lsl #2
   306ba:	f02e 0e05 	bic.w	lr, lr, #5
   306be:	f04a 0a01 	orr.w	sl, sl, #1
   306c2:	ea4a 0e0e 	orr.w	lr, sl, lr
   306c6:	f88c e084 	strb.w	lr, [ip, #132]	@ 0x84
            INTRINE_Enable(pUSB, 0x1 << ui8EpNum);
   306ca:	f04f 0c01 	mov.w	ip, #1
   306ce:	fa0c fc04 	lsl.w	ip, ip, r4
    switch (ui8EpDir)
   306d2:	b9d9      	cbnz	r1, 3070c <am_hal_usb_ep_xfer+0x12c>
            pXfer->len = ui16Len;
   306d4:	4649      	mov	r1, r9
   306d6:	f363 010f 	bfi	r1, r3, #0, #16
   306da:	f363 411f 	bfi	r1, r3, #16, #16
            OUTCSRL_OutPktRdy_Clear(pUSB);
   306de:	696b      	ldr	r3, [r5, #20]
            pXfer->buf = pui8Buf;
   306e0:	1984      	adds	r4, r0, r6
            OUTCSRL_OutPktRdy_Clear(pUSB);
   306e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
            pXfer->buf = pui8Buf;
   306e6:	67e2      	str	r2, [r4, #124]	@ 0x7c
            pXfer->len = ui16Len;
   306e8:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
            OUTCSRL_OutPktRdy_Clear(pUSB);
   306ec:	616b      	str	r3, [r5, #20]
            INTROUTE_Enable(pUSB, 0x1 << ui8EpNum);
   306ee:	7a2b      	ldrb	r3, [r5, #8]
   306f0:	ea43 030c 	orr.w	r3, r3, ip
   306f4:	b2db      	uxtb	r3, r3
   306f6:	722b      	strb	r3, [r5, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   306f8:	4b7c      	ldr	r3, [pc, #496]	@ (308ec <am_hal_usb_ep_xfer+0x30c>)
   306fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   306fe:	601a      	str	r2, [r3, #0]
    return AM_HAL_STATUS_SUCCESS;
   30700:	2000      	movs	r0, #0
}
   30702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   30706:	2006      	movs	r0, #6
}
   30708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            maxpacket  = pState->epin_maxpackets[ui8EpNum - 1];
   3070c:	eb00 0144 	add.w	r1, r0, r4, lsl #1
   30710:	f8b1 9058 	ldrh.w	r9, [r1, #88]	@ 0x58
            if (ui16Len < maxpacket)
   30714:	454b      	cmp	r3, r9
   30716:	f080 8097 	bcs.w	30848 <am_hal_usb_ep_xfer+0x268>
    for (int i = 0; i < Write32bitCount; i++)
   3071a:	089e      	lsrs	r6, r3, #2
   3071c:	f003 0903 	and.w	r9, r3, #3
   30720:	d00b      	beq.n	3073a <am_hal_usb_ep_xfer+0x15a>
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   30722:	4974      	ldr	r1, [pc, #464]	@ (308f4 <am_hal_usb_ep_xfer+0x314>)
   30724:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   30728:	1f11      	subs	r1, r2, #4
   3072a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
   3072e:	f851 5f04 	ldr.w	r5, [r1, #4]!
   30732:	f8ce 5000 	str.w	r5, [lr]
    for (int i = 0; i < Write32bitCount; i++)
   30736:	428e      	cmp	r6, r1
   30738:	d1f9      	bne.n	3072e <am_hal_usb_ep_xfer+0x14e>
    if (Write32bitRemain)
   3073a:	f1b9 0f00 	cmp.w	r9, #0
   3073e:	d013      	beq.n	30768 <am_hal_usb_ep_xfer+0x188>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30740:	f023 0103 	bic.w	r1, r3, #3
        volatile uint8_t *pui8FIFO = ((volatile uint8_t *)FIFOx_ADDR(pUSB, ui8EpNum));
   30744:	4d6b      	ldr	r5, [pc, #428]	@ (308f4 <am_hal_usb_ep_xfer+0x314>)
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30746:	5c56      	ldrb	r6, [r2, r1]
        volatile uint8_t *pui8FIFO = ((volatile uint8_t *)FIFOx_ADDR(pUSB, ui8EpNum));
   30748:	b224      	sxth	r4, r4
        for (int i = 0; i < Write32bitRemain; i++)
   3074a:	f1b9 0f01 	cmp.w	r9, #1
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3074e:	f805 6024 	strb.w	r6, [r5, r4, lsl #2]
        for (int i = 0; i < Write32bitRemain; i++)
   30752:	d009      	beq.n	30768 <am_hal_usb_ep_xfer+0x188>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30754:	4411      	add	r1, r2
        for (int i = 0; i < Write32bitRemain; i++)
   30756:	f1b9 0f03 	cmp.w	r9, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3075a:	784e      	ldrb	r6, [r1, #1]
   3075c:	f805 6024 	strb.w	r6, [r5, r4, lsl #2]
        for (int i = 0; i < Write32bitRemain; i++)
   30760:	d102      	bne.n	30768 <am_hal_usb_ep_xfer+0x188>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30762:	7889      	ldrb	r1, [r1, #2]
   30764:	f805 1024 	strb.w	r1, [r5, r4, lsl #2]
                pXfer->remaining = 0x0;
   30768:	eb08 0107 	add.w	r1, r8, r7
   3076c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   30770:	2400      	movs	r4, #0
   30772:	f8a1 408e 	strh.w	r4, [r1, #142]	@ 0x8e
            pXfer->buf = pui8Buf;
   30776:	44b8      	add	r8, r7
            INCSRL_InPktRdy_Set(pUSB);
   30778:	495d      	ldr	r1, [pc, #372]	@ (308f0 <am_hal_usb_ep_xfer+0x310>)
            pXfer->buf = pui8Buf;
   3077a:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
            pXfer->len = ui16Len;
   3077e:	f8a8 308c 	strh.w	r3, [r8, #140]	@ 0x8c
            INCSRL_InPktRdy_Set(pUSB);
   30782:	690b      	ldr	r3, [r1, #16]
            pXfer->buf = pui8Buf;
   30784:	f8c8 2088 	str.w	r2, [r8, #136]	@ 0x88
            INCSRL_InPktRdy_Set(pUSB);
   30788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
   3078c:	610b      	str	r3, [r1, #16]
            INTRINE_Enable(pUSB, 0x1 << ui8EpNum);
   3078e:	88cb      	ldrh	r3, [r1, #6]
   30790:	ea4c 0303 	orr.w	r3, ip, r3
   30794:	b29b      	uxth	r3, r3
   30796:	80cb      	strh	r3, [r1, #6]
            break;
   30798:	e7ae      	b.n	306f8 <am_hal_usb_ep_xfer+0x118>
            if ( (pState->bPendingInEndData || pState->bPendingOutEndData) && (ui16Len == 0) )
   3079a:	f8b0 2108 	ldrh.w	r2, [r0, #264]	@ 0x108
   3079e:	b112      	cbz	r2, 307a6 <am_hal_usb_ep_xfer+0x1c6>
   307a0:	2b00      	cmp	r3, #0
   307a2:	f000 808b 	beq.w	308bc <am_hal_usb_ep_xfer+0x2dc>
   307a6:	4b51      	ldr	r3, [pc, #324]	@ (308ec <am_hal_usb_ep_xfer+0x30c>)
   307a8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
   307ac:	601a      	str	r2, [r3, #0]
}
   307ae:	e755      	b.n	3065c <am_hal_usb_ep_xfer+0x7c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   307b0:	2002      	movs	r0, #2
}
   307b2:	4770      	bx	lr
            if (ui16Len == 0x0)
   307b4:	b95b      	cbnz	r3, 307ce <am_hal_usb_ep_xfer+0x1ee>
                if ( pState->bPendingOutEndData || pState->bPendingInEndData )
   307b6:	f8b0 2108 	ldrh.w	r2, [r0, #264]	@ 0x108
   307ba:	2a00      	cmp	r2, #0
   307bc:	d17e      	bne.n	308bc <am_hal_usb_ep_xfer+0x2dc>
                    CSR0_ServicedOutPktRdyAndDataEnd_Set(pUSB);
   307be:	6923      	ldr	r3, [r4, #16]
                    pState->eEP0State =
   307c0:	3104      	adds	r1, #4
                    CSR0_ServicedOutPktRdyAndDataEnd_Set(pUSB);
   307c2:	f443 0390 	orr.w	r3, r3, #4718592	@ 0x480000
   307c6:	6123      	str	r3, [r4, #16]
                    pState->eEP0State =
   307c8:	f880 1056 	strb.w	r1, [r0, #86]	@ 0x56
   307cc:	e794      	b.n	306f8 <am_hal_usb_ep_xfer+0x118>
                CSR0_ServicedOutPktRdy_Set(pUSB);
   307ce:	6925      	ldr	r5, [r4, #16]
   307d0:	f445 0580 	orr.w	r5, r5, #4194304	@ 0x400000
   307d4:	6125      	str	r5, [r4, #16]
                if (CSR0_SetupEnd(pUSB))
   307d6:	6925      	ldr	r5, [r4, #16]
   307d8:	02ed      	lsls	r5, r5, #11
   307da:	d503      	bpl.n	307e4 <am_hal_usb_ep_xfer+0x204>
                    CSR0_ServicedSetupEnd_Set(pUSB);
   307dc:	6925      	ldr	r5, [r4, #16]
   307de:	f445 0500 	orr.w	r5, r5, #8388608	@ 0x800000
   307e2:	6125      	str	r5, [r4, #16]
                switch ( ui8EpDir )
   307e4:	2900      	cmp	r1, #0
   307e6:	d076      	beq.n	308d6 <am_hal_usb_ep_xfer+0x2f6>
                        if (ui16Len < maxpacket)
   307e8:	42b3      	cmp	r3, r6
                        pState->bPendingOutEndData = true;
   307ea:	f880 1109 	strb.w	r1, [r0, #265]	@ 0x109
                        if (ui16Len < maxpacket)
   307ee:	f080 8083 	bcs.w	308f8 <am_hal_usb_ep_xfer+0x318>
                            pState->ep0_xfer.remaining = 0x0;
   307f2:	2400      	movs	r4, #0
                            pState->eEP0State = AM_HAL_USB_EP0_STATE_STATUS_TX;
   307f4:	2105      	movs	r1, #5
                            pState->ep0_xfer.remaining = 0x0;
   307f6:	f8a0 4076 	strh.w	r4, [r0, #118]	@ 0x76
    for (int i = 0; i < Write32bitCount; i++)
   307fa:	089c      	lsrs	r4, r3, #2
                            pState->eEP0State = AM_HAL_USB_EP0_STATE_STATUS_TX;
   307fc:	f880 1056 	strb.w	r1, [r0, #86]	@ 0x56
    Write32bitRemain  = ui32Count - Write32bitCount * sizeof(uint32_t);
   30800:	f003 0603 	and.w	r6, r3, #3
    for (int i = 0; i < Write32bitCount; i++)
   30804:	d008      	beq.n	30818 <am_hal_usb_ep_xfer+0x238>
   30806:	1f11      	subs	r1, r2, #4
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   30808:	4d39      	ldr	r5, [pc, #228]	@ (308f0 <am_hal_usb_ep_xfer+0x310>)
   3080a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
   3080e:	f851 0f04 	ldr.w	r0, [r1, #4]!
   30812:	6228      	str	r0, [r5, #32]
    for (int i = 0; i < Write32bitCount; i++)
   30814:	42a1      	cmp	r1, r4
   30816:	d1fa      	bne.n	3080e <am_hal_usb_ep_xfer+0x22e>
    if (Write32bitRemain)
   30818:	b186      	cbz	r6, 3083c <am_hal_usb_ep_xfer+0x25c>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3081a:	f023 0303 	bic.w	r3, r3, #3
   3081e:	4934      	ldr	r1, [pc, #208]	@ (308f0 <am_hal_usb_ep_xfer+0x310>)
   30820:	5cd0      	ldrb	r0, [r2, r3]
   30822:	f881 0020 	strb.w	r0, [r1, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   30826:	2e01      	cmp	r6, #1
   30828:	d008      	beq.n	3083c <am_hal_usb_ep_xfer+0x25c>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3082a:	4413      	add	r3, r2
        for (int i = 0; i < Write32bitRemain; i++)
   3082c:	2e03      	cmp	r6, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3082e:	785a      	ldrb	r2, [r3, #1]
   30830:	f881 2020 	strb.w	r2, [r1, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   30834:	d102      	bne.n	3083c <am_hal_usb_ep_xfer+0x25c>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30836:	789b      	ldrb	r3, [r3, #2]
   30838:	f881 3020 	strb.w	r3, [r1, #32]
                            CSR0_InPktRdyAndDataEnd_Set(pUSB);
   3083c:	4a2c      	ldr	r2, [pc, #176]	@ (308f0 <am_hal_usb_ep_xfer+0x310>)
   3083e:	6913      	ldr	r3, [r2, #16]
   30840:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
   30844:	6113      	str	r3, [r2, #16]
   30846:	e757      	b.n	306f8 <am_hal_usb_ep_xfer+0x118>
    for (int i = 0; i < Write32bitCount; i++)
   30848:	ea5f 0699 	movs.w	r6, r9, lsr #2
   3084c:	f009 0a03 	and.w	sl, r9, #3
   30850:	d00b      	beq.n	3086a <am_hal_usb_ep_xfer+0x28a>
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   30852:	4928      	ldr	r1, [pc, #160]	@ (308f4 <am_hal_usb_ep_xfer+0x314>)
   30854:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   30858:	1f11      	subs	r1, r2, #4
   3085a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
   3085e:	f851 5f04 	ldr.w	r5, [r1, #4]!
   30862:	f8ce 5000 	str.w	r5, [lr]
    for (int i = 0; i < Write32bitCount; i++)
   30866:	428e      	cmp	r6, r1
   30868:	d1f9      	bne.n	3085e <am_hal_usb_ep_xfer+0x27e>
    if (Write32bitRemain)
   3086a:	f1ba 0f00 	cmp.w	sl, #0
   3086e:	d013      	beq.n	30898 <am_hal_usb_ep_xfer+0x2b8>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30870:	f029 0103 	bic.w	r1, r9, #3
        volatile uint8_t *pui8FIFO = ((volatile uint8_t *)FIFOx_ADDR(pUSB, ui8EpNum));
   30874:	4d1f      	ldr	r5, [pc, #124]	@ (308f4 <am_hal_usb_ep_xfer+0x314>)
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30876:	5c56      	ldrb	r6, [r2, r1]
        volatile uint8_t *pui8FIFO = ((volatile uint8_t *)FIFOx_ADDR(pUSB, ui8EpNum));
   30878:	b224      	sxth	r4, r4
        for (int i = 0; i < Write32bitRemain; i++)
   3087a:	f1ba 0f01 	cmp.w	sl, #1
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3087e:	f805 6024 	strb.w	r6, [r5, r4, lsl #2]
        for (int i = 0; i < Write32bitRemain; i++)
   30882:	d009      	beq.n	30898 <am_hal_usb_ep_xfer+0x2b8>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30884:	4411      	add	r1, r2
        for (int i = 0; i < Write32bitRemain; i++)
   30886:	f1ba 0f03 	cmp.w	sl, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3088a:	784e      	ldrb	r6, [r1, #1]
   3088c:	f805 6024 	strb.w	r6, [r5, r4, lsl #2]
        for (int i = 0; i < Write32bitRemain; i++)
   30890:	d102      	bne.n	30898 <am_hal_usb_ep_xfer+0x2b8>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30892:	7889      	ldrb	r1, [r1, #2]
   30894:	f805 1024 	strb.w	r1, [r5, r4, lsl #2]
                pXfer->remaining = ui16Len - maxpacket;
   30898:	eb08 0107 	add.w	r1, r8, r7
   3089c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   308a0:	eba3 0409 	sub.w	r4, r3, r9
            if (ui16Len == maxpacket)
   308a4:	454b      	cmp	r3, r9
                pXfer->remaining = ui16Len - maxpacket;
   308a6:	f8a1 408e 	strh.w	r4, [r1, #142]	@ 0x8e
            if (ui16Len == maxpacket)
   308aa:	f47f af64 	bne.w	30776 <am_hal_usb_ep_xfer+0x196>
                pXfer->flags.zlp = 1;
   308ae:	f891 4090 	ldrb.w	r4, [r1, #144]	@ 0x90
   308b2:	f044 0402 	orr.w	r4, r4, #2
   308b6:	f881 4090 	strb.w	r4, [r1, #144]	@ 0x90
   308ba:	e75c      	b.n	30776 <am_hal_usb_ep_xfer+0x196>
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   308bc:	6703      	str	r3, [r0, #112]	@ 0x70
   308be:	6743      	str	r3, [r0, #116]	@ 0x74
   308c0:	6783      	str	r3, [r0, #120]	@ 0x78
                    pState->bPendingInEndData  = false;
   308c2:	f8a0 3108 	strh.w	r3, [r0, #264]	@ 0x108
   308c6:	e717      	b.n	306f8 <am_hal_usb_ep_xfer+0x118>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   308c8:	f8ca b000 	str.w	fp, [sl]
        return status;
   308cc:	2003      	movs	r0, #3
   308ce:	e6c8      	b.n	30662 <am_hal_usb_ep_xfer+0x82>
   308d0:	f8c7 c000 	str.w	ip, [r7]
}
   308d4:	e7fa      	b.n	308cc <am_hal_usb_ep_xfer+0x2ec>
                        pState->bPendingInEndData = true;
   308d6:	2101      	movs	r1, #1
                        pState->eEP0State = AM_HAL_USB_EP0_STATE_DATA_RX;
   308d8:	2202      	movs	r2, #2
                        pState->bPendingInEndData = true;
   308da:	f880 1108 	strb.w	r1, [r0, #264]	@ 0x108
                        pState->ep0_xfer.remaining = ui16Len;
   308de:	f8a0 3076 	strh.w	r3, [r0, #118]	@ 0x76
                        pState->eEP0State = AM_HAL_USB_EP0_STATE_DATA_RX;
   308e2:	f880 2056 	strb.w	r2, [r0, #86]	@ 0x56
                        break;
   308e6:	e707      	b.n	306f8 <am_hal_usb_ep_xfer+0x118>
   308e8:	01ea9e06 	.word	0x01ea9e06
   308ec:	e000e100 	.word	0xe000e100
   308f0:	400b0000 	.word	0x400b0000
   308f4:	400b0020 	.word	0x400b0020
                            pState->eEP0State = AM_HAL_USB_EP0_STATE_DATA_TX;
   308f8:	2103      	movs	r1, #3
                            pState->ep0_xfer.remaining = ui16Len - maxpacket;
   308fa:	1b9b      	subs	r3, r3, r6
   308fc:	f8a0 3076 	strh.w	r3, [r0, #118]	@ 0x76
                            pState->eEP0State = AM_HAL_USB_EP0_STATE_DATA_TX;
   30900:	f880 1056 	strb.w	r1, [r0, #86]	@ 0x56
    for (int i = 0; i < Write32bitCount; i++)
   30904:	08b0      	lsrs	r0, r6, #2
   30906:	ea06 0501 	and.w	r5, r6, r1
   3090a:	d008      	beq.n	3091e <am_hal_usb_ep_xfer+0x33e>
   3090c:	1f13      	subs	r3, r2, #4
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   3090e:	4c10      	ldr	r4, [pc, #64]	@ (30950 <am_hal_usb_ep_xfer+0x370>)
   30910:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   30914:	f853 1f04 	ldr.w	r1, [r3, #4]!
   30918:	6221      	str	r1, [r4, #32]
    for (int i = 0; i < Write32bitCount; i++)
   3091a:	4298      	cmp	r0, r3
   3091c:	d1fa      	bne.n	30914 <am_hal_usb_ep_xfer+0x334>
    if (Write32bitRemain)
   3091e:	b185      	cbz	r5, 30942 <am_hal_usb_ep_xfer+0x362>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30920:	f026 0603 	bic.w	r6, r6, #3
   30924:	4b0a      	ldr	r3, [pc, #40]	@ (30950 <am_hal_usb_ep_xfer+0x370>)
   30926:	5d91      	ldrb	r1, [r2, r6]
   30928:	f883 1020 	strb.w	r1, [r3, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   3092c:	2d01      	cmp	r5, #1
   3092e:	d008      	beq.n	30942 <am_hal_usb_ep_xfer+0x362>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30930:	4416      	add	r6, r2
        for (int i = 0; i < Write32bitRemain; i++)
   30932:	2d03      	cmp	r5, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30934:	7872      	ldrb	r2, [r6, #1]
   30936:	f883 2020 	strb.w	r2, [r3, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   3093a:	d102      	bne.n	30942 <am_hal_usb_ep_xfer+0x362>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3093c:	78b2      	ldrb	r2, [r6, #2]
   3093e:	f883 2020 	strb.w	r2, [r3, #32]
                            CSR0_InPktRdy_Set(pUSB);
   30942:	4a03      	ldr	r2, [pc, #12]	@ (30950 <am_hal_usb_ep_xfer+0x370>)
   30944:	6913      	ldr	r3, [r2, #16]
   30946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
   3094a:	6113      	str	r3, [r2, #16]
   3094c:	e6d4      	b.n	306f8 <am_hal_usb_ep_xfer+0x118>
   3094e:	bf00      	nop
   30950:	400b0000 	.word	0x400b0000

00030954 <am_hal_usb_intr_status_get>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   30954:	b1d8      	cbz	r0, 3098e <am_hal_usb_intr_status_get+0x3a>
   30956:	6800      	ldr	r0, [r0, #0]
{
   30958:	b410      	push	{r4}
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   3095a:	4c0e      	ldr	r4, [pc, #56]	@ (30994 <am_hal_usb_intr_status_get+0x40>)
   3095c:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
   30960:	42a0      	cmp	r0, r4
   30962:	d110      	bne.n	30986 <am_hal_usb_intr_status_get+0x32>
   *ui32IntrUsbStatus = INTRUSB_Get(pUSB);
   30964:	4c0c      	ldr	r4, [pc, #48]	@ (30998 <am_hal_usb_intr_status_get+0x44>)
   30966:	7aa0      	ldrb	r0, [r4, #10]
   30968:	f000 000f 	and.w	r0, r0, #15
   3096c:	6008      	str	r0, [r1, #0]
   *ui32IntrInStatus  = INTRIN_Get(pUSB);
   3096e:	8861      	ldrh	r1, [r4, #2]
   30970:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
   30974:	6011      	str	r1, [r2, #0]
   *ui32IntrOutStatus = INTROUT_Get(pUSB);
   30976:	7922      	ldrb	r2, [r4, #4]
}
   30978:	f85d 4b04 	ldr.w	r4, [sp], #4
   *ui32IntrOutStatus = INTROUT_Get(pUSB);
   3097c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
   return AM_HAL_STATUS_SUCCESS;
   30980:	2000      	movs	r0, #0
   *ui32IntrOutStatus = INTROUT_Get(pUSB);
   30982:	601a      	str	r2, [r3, #0]
}
   30984:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   30986:	2002      	movs	r0, #2
}
   30988:	f85d 4b04 	ldr.w	r4, [sp], #4
   3098c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   3098e:	2002      	movs	r0, #2
}
   30990:	4770      	bx	lr
   30992:	bf00      	nop
   30994:	01ea9e06 	.word	0x01ea9e06
   30998:	400b0000 	.word	0x400b0000

0003099c <am_hal_usb_intr_usb_enable>:
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   3099c:	b170      	cbz	r0, 309bc <am_hal_usb_intr_usb_enable+0x20>
   3099e:	6803      	ldr	r3, [r0, #0]
   309a0:	4a08      	ldr	r2, [pc, #32]	@ (309c4 <am_hal_usb_intr_usb_enable+0x28>)
   309a2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   309a6:	4293      	cmp	r3, r2
   309a8:	d108      	bne.n	309bc <am_hal_usb_intr_usb_enable+0x20>
    if (AM_HAL_USB_CHK_USB(ui32IntMask))
   309aa:	290f      	cmp	r1, #15
   309ac:	d808      	bhi.n	309c0 <am_hal_usb_intr_usb_enable+0x24>
    INTRUSBE_Enable(pUSB, ui32IntMask);
   309ae:	4a06      	ldr	r2, [pc, #24]	@ (309c8 <am_hal_usb_intr_usb_enable+0x2c>)
   309b0:	7ad3      	ldrb	r3, [r2, #11]
   309b2:	430b      	orrs	r3, r1
   309b4:	b2db      	uxtb	r3, r3
    return AM_HAL_STATUS_SUCCESS;
   309b6:	2000      	movs	r0, #0
    INTRUSBE_Enable(pUSB, ui32IntMask);
   309b8:	72d3      	strb	r3, [r2, #11]
    return AM_HAL_STATUS_SUCCESS;
   309ba:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   309bc:	2002      	movs	r0, #2
   309be:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   309c0:	2006      	movs	r0, #6
}
   309c2:	4770      	bx	lr
   309c4:	01ea9e06 	.word	0x01ea9e06
   309c8:	400b0000 	.word	0x400b0000

000309cc <am_hal_usb_register_dev_evt_callback>:
am_hal_usb_register_dev_evt_callback(void *pHandle, const am_hal_usb_dev_evt_callback cb)
{
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   309cc:	b150      	cbz	r0, 309e4 <am_hal_usb_register_dev_evt_callback+0x18>
   309ce:	6803      	ldr	r3, [r0, #0]
   309d0:	4a06      	ldr	r2, [pc, #24]	@ (309ec <am_hal_usb_register_dev_evt_callback+0x20>)
   309d2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   309d6:	4293      	cmp	r3, r2
   309d8:	d104      	bne.n	309e4 <am_hal_usb_register_dev_evt_callback+0x18>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif

    if (cb != NULL)
   309da:	b129      	cbz	r1, 309e8 <am_hal_usb_register_dev_evt_callback+0x1c>
    {
        pState->dev_evt_callback = cb;
   309dc:	f8c0 10fc 	str.w	r1, [r0, #252]	@ 0xfc
    else
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    return AM_HAL_STATUS_SUCCESS;
   309e0:	2000      	movs	r0, #0
   309e2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   309e4:	2002      	movs	r0, #2
   309e6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   309e8:	2006      	movs	r0, #6
}
   309ea:	4770      	bx	lr
   309ec:	01ea9e06 	.word	0x01ea9e06

000309f0 <am_hal_usb_register_ep0_setup_received_callback>:
am_hal_usb_register_ep0_setup_received_callback(void *pHandle, const am_hal_usb_ep0_setup_received_callback cb)
{
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   309f0:	b150      	cbz	r0, 30a08 <am_hal_usb_register_ep0_setup_received_callback+0x18>
   309f2:	6803      	ldr	r3, [r0, #0]
   309f4:	4a06      	ldr	r2, [pc, #24]	@ (30a10 <am_hal_usb_register_ep0_setup_received_callback+0x20>)
   309f6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   309fa:	4293      	cmp	r3, r2
   309fc:	d104      	bne.n	30a08 <am_hal_usb_register_ep0_setup_received_callback+0x18>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif

    if (cb != NULL)
   309fe:	b129      	cbz	r1, 30a0c <am_hal_usb_register_ep0_setup_received_callback+0x1c>
    {
        pState->ep0_setup_callback = cb;
   30a00:	f8c0 1100 	str.w	r1, [r0, #256]	@ 0x100
    else
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    return AM_HAL_STATUS_SUCCESS;
   30a04:	2000      	movs	r0, #0
   30a06:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   30a08:	2002      	movs	r0, #2
   30a0a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   30a0c:	2006      	movs	r0, #6
}
   30a0e:	4770      	bx	lr
   30a10:	01ea9e06 	.word	0x01ea9e06

00030a14 <am_hal_usb_register_ep_xfer_complete_callback>:
am_hal_usb_register_ep_xfer_complete_callback(void *pHandle, const am_hal_usb_ep_xfer_complete_callback cb)
{
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   30a14:	b150      	cbz	r0, 30a2c <am_hal_usb_register_ep_xfer_complete_callback+0x18>
   30a16:	6803      	ldr	r3, [r0, #0]
   30a18:	4a06      	ldr	r2, [pc, #24]	@ (30a34 <am_hal_usb_register_ep_xfer_complete_callback+0x20>)
   30a1a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   30a1e:	4293      	cmp	r3, r2
   30a20:	d104      	bne.n	30a2c <am_hal_usb_register_ep_xfer_complete_callback+0x18>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif

    if (cb != NULL)
   30a22:	b129      	cbz	r1, 30a30 <am_hal_usb_register_ep_xfer_complete_callback+0x1c>
    {
        pState->ep_xfer_complete_callback = cb;
   30a24:	f8c0 1104 	str.w	r1, [r0, #260]	@ 0x104
    else
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    return AM_HAL_STATUS_SUCCESS;
   30a28:	2000      	movs	r0, #0
   30a2a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   30a2c:	2002      	movs	r0, #2
   30a2e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   30a30:	2006      	movs	r0, #6
}
   30a32:	4770      	bx	lr
   30a34:	01ea9e06 	.word	0x01ea9e06

00030a38 <am_hal_usb_interrupt_service>:
void
am_hal_usb_interrupt_service(void *pHandle,
                             uint32_t ui32IntrUsbStatus,
                             uint32_t ui32IntrInStatus,
                             uint32_t ui32IntrOutStatus)
{
   30a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30a3c:	b089      	sub	sp, #36	@ 0x24
   30a3e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    uint8_t i;
    am_hal_usb_state_t *pState = (am_hal_usb_state_t *)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_USB_CHK_HANDLE(pHandle))
   30a42:	2800      	cmp	r0, #0
   30a44:	f000 80a6 	beq.w	30b94 <am_hal_usb_interrupt_service+0x15c>
   30a48:	6803      	ldr	r3, [r0, #0]
   30a4a:	4693      	mov	fp, r2
   30a4c:	4a92      	ldr	r2, [pc, #584]	@ (30c98 <am_hal_usb_interrupt_service+0x260>)
   30a4e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   30a52:	4293      	cmp	r3, r2
   30a54:	4682      	mov	sl, r0
   30a56:	f040 809d 	bne.w	30b94 <am_hal_usb_interrupt_service+0x15c>
#endif

    USB_Type *pUSB = USBn(pState->ui32Module);

    // Handling the resume interrupt
    if (ui32IntrUsbStatus & USB_INTRUSB_Resume_Msk)
   30a5a:	078a      	lsls	r2, r1, #30
   30a5c:	d50c      	bpl.n	30a78 <am_hal_usb_interrupt_service+0x40>
    {
        //
        // Turning XCVRs on
        //
        USBPHY->REG10 |= 0x2;
   30a5e:	4a8f      	ldr	r2, [pc, #572]	@ (30c9c <am_hal_usb_interrupt_service+0x264>)

        // Back to active state
        pState->eDevState = AM_HAL_USB_DEV_STATE_RESUMING;
        if (pState->dev_evt_callback)
   30a60:	f8d0 10fc 	ldr.w	r1, [r0, #252]	@ 0xfc
        USBPHY->REG10 |= 0x2;
   30a64:	6913      	ldr	r3, [r2, #16]
   30a66:	f043 0302 	orr.w	r3, r3, #2
   30a6a:	6113      	str	r3, [r2, #16]
        pState->eDevState = AM_HAL_USB_DEV_STATE_RESUMING;
   30a6c:	2303      	movs	r3, #3
   30a6e:	f880 3055 	strb.w	r3, [r0, #85]	@ 0x55
        if (pState->dev_evt_callback)
   30a72:	b109      	cbz	r1, 30a78 <am_hal_usb_interrupt_service+0x40>
        {
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_RESUME);
   30a74:	2002      	movs	r0, #2
   30a76:	4788      	blx	r1
        }
    }

    // Handling the reset interrupt
    if (ui32IntrUsbStatus & USB_INTRUSB_Reset_Msk)
   30a78:	9b02      	ldr	r3, [sp, #8]
   30a7a:	075b      	lsls	r3, r3, #29
   30a7c:	f100 8114 	bmi.w	30ca8 <am_hal_usb_interrupt_service+0x270>
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_BUS_RESET);
        }
    }

    // Handling the SOF interrupt
    if (ui32IntrUsbStatus & USB_INTRUSB_SOF_Msk)
   30a80:	f10a 037c 	add.w	r3, sl, #124	@ 0x7c
   30a84:	9304      	str	r3, [sp, #16]
   30a86:	9b02      	ldr	r3, [sp, #8]
   30a88:	071c      	lsls	r4, r3, #28
   30a8a:	f100 816a 	bmi.w	30d62 <am_hal_usb_interrupt_service+0x32a>
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_SOF);
        }
    }

    // Handling the EP0 interrupt
    if (ui32IntrInStatus & USB_INTRIN_EP0_Msk)
   30a8e:	f01b 0f01 	tst.w	fp, #1
   30a92:	f040 8171 	bne.w	30d78 <am_hal_usb_interrupt_service+0x340>
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30a96:	4f82      	ldr	r7, [pc, #520]	@ (30ca0 <am_hal_usb_interrupt_service+0x268>)
    EP_INDEX_Set(pUSB, ui8EpNum);
   30a98:	f8df 8208 	ldr.w	r8, [pc, #520]	@ 30ca4 <am_hal_usb_interrupt_service+0x26c>
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30a9c:	2401      	movs	r4, #1
   30a9e:	f10a 0588 	add.w	r5, sl, #136	@ 0x88
    maxpacket = pState->epin_maxpackets[ui8EpNum - 1];
   30aa2:	f10a 0958 	add.w	r9, sl, #88	@ 0x58
   30aa6:	e006      	b.n	30ab6 <am_hal_usb_interrupt_service+0x7e>
    {
        am_hal_usb_ep0_handling(pState, pUSB);
    }

    // Handling IN Endpoint one by one
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   30aa8:	3401      	adds	r4, #1
   30aaa:	2c06      	cmp	r4, #6
   30aac:	f105 0518 	add.w	r5, r5, #24
   30ab0:	f107 0704 	add.w	r7, r7, #4
   30ab4:	d071      	beq.n	30b9a <am_hal_usb_interrupt_service+0x162>
    {
        if (ui32IntrInStatus & (0x1 << i))
   30ab6:	2301      	movs	r3, #1
   30ab8:	fa03 f204 	lsl.w	r2, r3, r4
   30abc:	ea12 0f0b 	tst.w	r2, fp
   30ac0:	d0f2      	beq.n	30aa8 <am_hal_usb_interrupt_service+0x70>
    EP_INDEX_Set(pUSB, ui8EpNum);
   30ac2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    maxpacket = pState->epin_maxpackets[ui8EpNum - 1];
   30ac6:	f839 c014 	ldrh.w	ip, [r9, r4, lsl #1]
    EP_INDEX_Set(pUSB, ui8EpNum);
   30aca:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
   30ace:	f8c8 300c 	str.w	r3, [r8, #12]
   30ad2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   30ad6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   30ada:	f8c8 300c 	str.w	r3, [r8, #12]
    if (INCSRL_SentStall(pUSB))
   30ade:	f8d8 3010 	ldr.w	r3, [r8, #16]
   30ae2:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
        INCSRL_SentStall_Clear(pUSB);
   30ae6:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if (INCSRL_SentStall(pUSB))
   30aea:	f040 80cf 	bne.w	30c8c <am_hal_usb_interrupt_service+0x254>
    if (INCSRL_InPktRdy(pUSB) == 0x0)
   30aee:	03d8      	lsls	r0, r3, #15
   30af0:	d4da      	bmi.n	30aa8 <am_hal_usb_interrupt_service+0x70>
        if (pXfer->remaining == 0x0)
   30af2:	88eb      	ldrh	r3, [r5, #6]
   30af4:	2b00      	cmp	r3, #0
   30af6:	f000 8195 	beq.w	30e24 <am_hal_usb_interrupt_service+0x3ec>
        am_hal_usb_fifo_loading(pUSB, ui8EpNum, pXfer->buf + pXfer->len - pXfer->remaining, min);
   30afa:	88aa      	ldrh	r2, [r5, #4]
   30afc:	6829      	ldr	r1, [r5, #0]
        uint16_t min = pXfer->remaining < maxpacket ? pXfer->remaining : maxpacket;
   30afe:	459c      	cmp	ip, r3
   30b00:	46e6      	mov	lr, ip
        am_hal_usb_fifo_loading(pUSB, ui8EpNum, pXfer->buf + pXfer->len - pXfer->remaining, min);
   30b02:	eba2 0203 	sub.w	r2, r2, r3
        uint16_t min = pXfer->remaining < maxpacket ? pXfer->remaining : maxpacket;
   30b06:	bf28      	it	cs
   30b08:	469e      	movcs	lr, r3
        am_hal_usb_fifo_loading(pUSB, ui8EpNum, pXfer->buf + pXfer->len - pXfer->remaining, min);
   30b0a:	4411      	add	r1, r2
        uint16_t min = pXfer->remaining < maxpacket ? pXfer->remaining : maxpacket;
   30b0c:	fa1f f28e 	uxth.w	r2, lr
   30b10:	9201      	str	r2, [sp, #4]
    for (int i = 0; i < Write32bitCount; i++)
   30b12:	ea5f 009e 	movs.w	r0, lr, lsr #2
   30b16:	f00e 0203 	and.w	r2, lr, #3
   30b1a:	4616      	mov	r6, r2
   30b1c:	d00d      	beq.n	30b3a <am_hal_usb_interrupt_service+0x102>
   30b1e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   30b22:	3804      	subs	r0, #4
   30b24:	f8cd c014 	str.w	ip, [sp, #20]
   30b28:	1f0a      	subs	r2, r1, #4
   30b2a:	4684      	mov	ip, r0
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   30b2c:	f852 0f04 	ldr.w	r0, [r2, #4]!
   30b30:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < Write32bitCount; i++)
   30b32:	4562      	cmp	r2, ip
   30b34:	d1fa      	bne.n	30b2c <am_hal_usb_interrupt_service+0xf4>
   30b36:	f8dd c014 	ldr.w	ip, [sp, #20]
    if (Write32bitRemain)
   30b3a:	2e00      	cmp	r6, #0
   30b3c:	f040 819b 	bne.w	30e76 <am_hal_usb_interrupt_service+0x43e>
   30b40:	461a      	mov	r2, r3
        pXfer->remaining -= min;
   30b42:	9901      	ldr	r1, [sp, #4]
        INCSRL_InPktRdy_Set(pUSB);
   30b44:	4857      	ldr	r0, [pc, #348]	@ (30ca4 <am_hal_usb_interrupt_service+0x26c>)
        pXfer->remaining -= min;
   30b46:	1a52      	subs	r2, r2, r1
        INCSRL_InPktRdy_Set(pUSB);
   30b48:	6901      	ldr	r1, [r0, #16]
        pXfer->remaining -= min;
   30b4a:	b292      	uxth	r2, r2
        INCSRL_InPktRdy_Set(pUSB);
   30b4c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
   30b50:	6101      	str	r1, [r0, #16]
        pXfer->remaining -= min;
   30b52:	80ea      	strh	r2, [r5, #6]
        if (pXfer->remaining == 0x0 && min == maxpacket)
   30b54:	2a00      	cmp	r2, #0
   30b56:	d1a7      	bne.n	30aa8 <am_hal_usb_interrupt_service+0x70>
   30b58:	459c      	cmp	ip, r3
   30b5a:	d8a5      	bhi.n	30aa8 <am_hal_usb_interrupt_service+0x70>
            pXfer->flags.zlp = 1;
   30b5c:	1e63      	subs	r3, r4, #1
   30b5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   30b62:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
   30b66:	f893 2090 	ldrb.w	r2, [r3, #144]	@ 0x90
   30b6a:	f042 0202 	orr.w	r2, r2, #2
   30b6e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
   30b72:	e799      	b.n	30aa8 <am_hal_usb_interrupt_service+0x70>
            am_hal_usb_out_ep_handling(pState, pUSB, i);
        }
    }

    // Handing the suspend interrupt finally
    if (ui32IntrUsbStatus & USB_INTRUSB_Suspend_Msk)
   30b74:	9b02      	ldr	r3, [sp, #8]
   30b76:	07db      	lsls	r3, r3, #31
   30b78:	d50c      	bpl.n	30b94 <am_hal_usb_interrupt_service+0x15c>
    {
        //
        // Turning XCVRs off for more power saving
        //
        USBPHY->REG10 &= 0xFD;
   30b7a:	4a48      	ldr	r2, [pc, #288]	@ (30c9c <am_hal_usb_interrupt_service+0x264>)

        pState->eDevState = AM_HAL_USB_DEV_STATE_SUSPENDING;
        if (pState->dev_evt_callback)
   30b7c:	f8da 10fc 	ldr.w	r1, [sl, #252]	@ 0xfc
        USBPHY->REG10 &= 0xFD;
   30b80:	6913      	ldr	r3, [r2, #16]
        pState->eDevState = AM_HAL_USB_DEV_STATE_SUSPENDING;
   30b82:	2005      	movs	r0, #5
        USBPHY->REG10 &= 0xFD;
   30b84:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
   30b88:	6113      	str	r3, [r2, #16]
        pState->eDevState = AM_HAL_USB_DEV_STATE_SUSPENDING;
   30b8a:	f88a 0055 	strb.w	r0, [sl, #85]	@ 0x55
        if (pState->dev_evt_callback)
   30b8e:	2900      	cmp	r1, #0
   30b90:	f040 8108 	bne.w	30da4 <am_hal_usb_interrupt_service+0x36c>
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_SUSPEND);
        }
    }

    return;
}
   30b94:	b009      	add	sp, #36	@ 0x24
   30b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   30b9a:	4d41      	ldr	r5, [pc, #260]	@ (30ca0 <am_hal_usb_interrupt_service+0x268>)
   30b9c:	9e04      	ldr	r6, [sp, #16]
    EP_INDEX_Set(pUSB, ui8EpNum);
   30b9e:	4f41      	ldr	r7, [pc, #260]	@ (30ca4 <am_hal_usb_interrupt_service+0x26c>)
        if (ui32IntrOutStatus & (0x1 << i))
   30ba0:	f8dd 800c 	ldr.w	r8, [sp, #12]
   30ba4:	9501      	str	r5, [sp, #4]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   30ba6:	2401      	movs	r4, #1
        if (ui32IntrOutStatus & (0x1 << i))
   30ba8:	46a3      	mov	fp, r4
   30baa:	e007      	b.n	30bbc <am_hal_usb_interrupt_service+0x184>
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   30bac:	9b01      	ldr	r3, [sp, #4]
   30bae:	3401      	adds	r4, #1
   30bb0:	3304      	adds	r3, #4
   30bb2:	2c06      	cmp	r4, #6
   30bb4:	f106 0618 	add.w	r6, r6, #24
   30bb8:	9301      	str	r3, [sp, #4]
   30bba:	d0db      	beq.n	30b74 <am_hal_usb_interrupt_service+0x13c>
        if (ui32IntrOutStatus & (0x1 << i))
   30bbc:	fa0b f204 	lsl.w	r2, fp, r4
   30bc0:	ea12 0f08 	tst.w	r2, r8
   30bc4:	d0f2      	beq.n	30bac <am_hal_usb_interrupt_service+0x174>
    EP_INDEX_Set(pUSB, ui8EpNum);
   30bc6:	68fb      	ldr	r3, [r7, #12]
   30bc8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
   30bcc:	60fb      	str	r3, [r7, #12]
   30bce:	68fb      	ldr	r3, [r7, #12]
   30bd0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   30bd4:	60fb      	str	r3, [r7, #12]
    if (OUTCSRL_SentStall(pUSB))
   30bd6:	697b      	ldr	r3, [r7, #20]
   30bd8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
        OUTCSRL_SentStall_Clear(pUSB);
   30bdc:	697b      	ldr	r3, [r7, #20]
    if (OUTCSRL_SentStall(pUSB))
   30bde:	d151      	bne.n	30c84 <am_hal_usb_interrupt_service+0x24c>
    if (OUTCSRL_OutPktRdy(pUSB))
   30be0:	03d9      	lsls	r1, r3, #15
   30be2:	d5e3      	bpl.n	30bac <am_hal_usb_interrupt_service+0x174>
        count = OUTCOUNT(pUSB);
   30be4:	69bd      	ldr	r5, [r7, #24]
        if (pXfer->remaining < count)
   30be6:	88f1      	ldrh	r1, [r6, #6]
            am_hal_usb_fifo_unloading(pUSB, ui8EpNum, pXfer->buf + pXfer->len - pXfer->remaining, pXfer->remaining);
   30be8:	88b0      	ldrh	r0, [r6, #4]
        maxpacket = pState->epout_maxpackets[ui8EpNum - 1];
   30bea:	f10a 0c62 	add.w	ip, sl, #98	@ 0x62
        count = OUTCOUNT(pUSB);
   30bee:	f3c5 090c 	ubfx	r9, r5, #0, #13
        maxpacket = pState->epout_maxpackets[ui8EpNum - 1];
   30bf2:	f83c 3014 	ldrh.w	r3, [ip, r4, lsl #1]
   30bf6:	9303      	str	r3, [sp, #12]
        if (pXfer->remaining < count)
   30bf8:	4589      	cmp	r9, r1
            am_hal_usb_fifo_unloading(pUSB, ui8EpNum, pXfer->buf + pXfer->len - pXfer->remaining, pXfer->remaining);
   30bfa:	f8d6 c000 	ldr.w	ip, [r6]
   30bfe:	eba0 0001 	sub.w	r0, r0, r1
        count = OUTCOUNT(pUSB);
   30c02:	b2ab      	uxth	r3, r5
        if (pXfer->remaining < count)
   30c04:	f240 80d3 	bls.w	30dae <am_hal_usb_interrupt_service+0x376>
    for (int i = 0; i < Read32bitCount; i++)
   30c08:	ea5f 0e91 	movs.w	lr, r1, lsr #2
   30c0c:	f001 0903 	and.w	r9, r1, #3
   30c10:	d00c      	beq.n	30c2c <am_hal_usb_interrupt_service+0x1f4>
   30c12:	eb0c 0300 	add.w	r3, ip, r0
   30c16:	9d01      	ldr	r5, [sp, #4]
   30c18:	9203      	str	r2, [sp, #12]
   30c1a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   30c1e:	682a      	ldr	r2, [r5, #0]
   30c20:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < Read32bitCount; i++)
   30c24:	459e      	cmp	lr, r3
   30c26:	d1fa      	bne.n	30c1e <am_hal_usb_interrupt_service+0x1e6>
   30c28:	9a03      	ldr	r2, [sp, #12]
   30c2a:	9501      	str	r5, [sp, #4]
    if (Read32bitRemain)
   30c2c:	f1b9 0f00 	cmp.w	r9, #0
   30c30:	d011      	beq.n	30c56 <am_hal_usb_interrupt_service+0x21e>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30c32:	f021 0103 	bic.w	r1, r1, #3
   30c36:	4401      	add	r1, r0
   30c38:	9801      	ldr	r0, [sp, #4]
        for (int i = 0; i < Read32bitRemain; i++)
   30c3a:	f1b9 0f01 	cmp.w	r9, #1
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30c3e:	7803      	ldrb	r3, [r0, #0]
   30c40:	f80c 3001 	strb.w	r3, [ip, r1]
        for (int i = 0; i < Read32bitRemain; i++)
   30c44:	d007      	beq.n	30c56 <am_hal_usb_interrupt_service+0x21e>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30c46:	4461      	add	r1, ip
   30c48:	7803      	ldrb	r3, [r0, #0]
   30c4a:	704b      	strb	r3, [r1, #1]
        for (int i = 0; i < Read32bitRemain; i++)
   30c4c:	f1b9 0f03 	cmp.w	r9, #3
   30c50:	d101      	bne.n	30c56 <am_hal_usb_interrupt_service+0x21e>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30c52:	7803      	ldrb	r3, [r0, #0]
   30c54:	708b      	strb	r3, [r1, #2]
            pXfer->remaining = 0;
   30c56:	2300      	movs	r3, #0
   30c58:	80f3      	strh	r3, [r6, #6]
            INTROUTE_Disable(pUSB, 0x1 << ui8EpNum);
   30c5a:	4812      	ldr	r0, [pc, #72]	@ (30ca4 <am_hal_usb_interrupt_service+0x26c>)
   30c5c:	7a01      	ldrb	r1, [r0, #8]
   30c5e:	ea21 0202 	bic.w	r2, r1, r2
   30c62:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
   30c66:	7202      	strb	r2, [r0, #8]
            am_hal_usb_xfer_complete(pState, pXfer, ui8EpNum, pXfer->len - pXfer->remaining, USB_XFER_DONE, NULL);
   30c68:	88f2      	ldrh	r2, [r6, #6]
   30c6a:	88b1      	ldrh	r1, [r6, #4]
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30c6c:	2300      	movs	r3, #0
   30c6e:	6033      	str	r3, [r6, #0]
   30c70:	60b3      	str	r3, [r6, #8]
            am_hal_usb_xfer_complete(pState, pXfer, ui8EpNum, pXfer->len - pXfer->remaining, USB_XFER_DONE, NULL);
   30c72:	1a89      	subs	r1, r1, r2
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30c74:	6073      	str	r3, [r6, #4]
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   30c76:	f8da 5104 	ldr.w	r5, [sl, #260]	@ 0x104
   30c7a:	b289      	uxth	r1, r1
   30c7c:	461a      	mov	r2, r3
   30c7e:	b2e0      	uxtb	r0, r4
   30c80:	47a8      	blx	r5
            return;
   30c82:	e793      	b.n	30bac <am_hal_usb_interrupt_service+0x174>
        OUTCSRL_SentStall_Clear(pUSB);
   30c84:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
   30c88:	617b      	str	r3, [r7, #20]
        return;
   30c8a:	e78f      	b.n	30bac <am_hal_usb_interrupt_service+0x174>
        INCSRL_SentStall_Clear(pUSB);
   30c8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
   30c90:	f8c8 3010 	str.w	r3, [r8, #16]
        return;
   30c94:	e708      	b.n	30aa8 <am_hal_usb_interrupt_service+0x70>
   30c96:	bf00      	nop
   30c98:	01ea9e06 	.word	0x01ea9e06
   30c9c:	400b4000 	.word	0x400b4000
   30ca0:	400b0024 	.word	0x400b0024
   30ca4:	400b0000 	.word	0x400b0000
        if (pXfer->flags.busy == 0x1)
   30ca8:	f89a 2078 	ldrb.w	r2, [sl, #120]	@ 0x78
        pState->eDevState = AM_HAL_USB_DEV_STATE_INIT;
   30cac:	2300      	movs	r3, #0
        if (pXfer->flags.busy == 0x1)
   30cae:	07d7      	lsls	r7, r2, #31
        pState->eDevState = AM_HAL_USB_DEV_STATE_INIT;
   30cb0:	f88a 3055 	strb.w	r3, [sl, #85]	@ 0x55
        am_hal_usb_ep_xfer_t *pXfer = &pState->ep0_xfer;
   30cb4:	f10a 0570 	add.w	r5, sl, #112	@ 0x70
        if (pXfer->flags.busy == 0x1)
   30cb8:	f100 80c9 	bmi.w	30e4e <am_hal_usb_interrupt_service+0x416>
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   30cbc:	2700      	movs	r7, #0
   30cbe:	f10a 067c 	add.w	r6, sl, #124	@ 0x7c
   30cc2:	f88a 7056 	strb.w	r7, [sl, #86]	@ 0x56
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30cc6:	f8ca 7070 	str.w	r7, [sl, #112]	@ 0x70
   30cca:	f04f 0901 	mov.w	r9, #1
   30cce:	606f      	str	r7, [r5, #4]
   30cd0:	60af      	str	r7, [r5, #8]
        for (int i = 0; i < AM_HAL_USB_EP_MAX_NUMBER; i++)
   30cd2:	9604      	str	r6, [sp, #16]
   30cd4:	46b8      	mov	r8, r7
   30cd6:	9601      	str	r6, [sp, #4]
            for (int j = 0; j < 2; j++)
   30cd8:	9b01      	ldr	r3, [sp, #4]
   30cda:	19dc      	adds	r4, r3, r7
                if (pXfer->flags.busy)
   30cdc:	7a25      	ldrb	r5, [r4, #8]
   30cde:	f015 0501 	ands.w	r5, r5, #1
   30ce2:	d012      	beq.n	30d0a <am_hal_usb_interrupt_service+0x2d2>
   30ce4:	2500      	movs	r5, #0
                    am_hal_usb_xfer_complete(pState, pXfer, am_hal_usb_ep_addr(i + 1, j), pXfer->len - pXfer->remaining, USB_XFER_ABORT, NULL);
   30ce6:	88e3      	ldrh	r3, [r4, #6]
   30ce8:	88a1      	ldrh	r1, [r4, #4]
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30cea:	f8c4 8000 	str.w	r8, [r4]
                    am_hal_usb_xfer_complete(pState, pXfer, am_hal_usb_ep_addr(i + 1, j), pXfer->len - pXfer->remaining, USB_XFER_ABORT, NULL);
   30cee:	1ac9      	subs	r1, r1, r3
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30cf0:	f8c4 8008 	str.w	r8, [r4, #8]
   30cf4:	f8c4 8004 	str.w	r8, [r4, #4]
    return (uint8_t)(num | (dir ?  AM_HAL_USB_EP_DIR_IN_MASK : 0));
   30cf8:	ea49 10c5 	orr.w	r0, r9, r5, lsl #7
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   30cfc:	f8da 6104 	ldr.w	r6, [sl, #260]	@ 0x104
   30d00:	b289      	uxth	r1, r1
   30d02:	b2c0      	uxtb	r0, r0
   30d04:	2300      	movs	r3, #0
   30d06:	2204      	movs	r2, #4
   30d08:	47b0      	blx	r6
            for (int j = 0; j < 2; j++)
   30d0a:	340c      	adds	r4, #12
   30d0c:	b925      	cbnz	r5, 30d18 <am_hal_usb_interrupt_service+0x2e0>
                if (pXfer->flags.busy)
   30d0e:	7a23      	ldrb	r3, [r4, #8]
   30d10:	07de      	lsls	r6, r3, #31
   30d12:	f04f 0501 	mov.w	r5, #1
   30d16:	d4e6      	bmi.n	30ce6 <am_hal_usb_interrupt_service+0x2ae>
        for (int i = 0; i < AM_HAL_USB_EP_MAX_NUMBER; i++)
   30d18:	3718      	adds	r7, #24
   30d1a:	2f78      	cmp	r7, #120	@ 0x78
   30d1c:	f109 0901 	add.w	r9, r9, #1
   30d20:	d1da      	bne.n	30cd8 <am_hal_usb_interrupt_service+0x2a0>
        memset((void *)&pState->ep_xfers, 0x0, sizeof(pState->ep_xfers));
   30d22:	463a      	mov	r2, r7
   30d24:	9804      	ldr	r0, [sp, #16]
   30d26:	2100      	movs	r1, #0
   30d28:	f7f5 ffcc 	bl	26cc4 <memset>
        INTRINE_Disable(pUSB, AM_HAL_USB_EP_MASK);
   30d2c:	4ba9      	ldr	r3, [pc, #676]	@ (30fd4 <am_hal_usb_interrupt_service+0x59c>)
   30d2e:	2000      	movs	r0, #0
   30d30:	88da      	ldrh	r2, [r3, #6]
    *ui32Allocated = 8;
   30d32:	2208      	movs	r2, #8
   30d34:	f8ca 2050 	str.w	r2, [sl, #80]	@ 0x50
        INTRINE_Disable(pUSB, AM_HAL_USB_EP_MASK);
   30d38:	80d8      	strh	r0, [r3, #6]
        INTROUTE_Disable(pUSB, AM_HAL_USB_EP_MASK);
   30d3a:	7a1a      	ldrb	r2, [r3, #8]
   30d3c:	7218      	strb	r0, [r3, #8]
        INTRUSBE_SOF_Disable(pUSB);
   30d3e:	7ada      	ldrb	r2, [r3, #11]
   30d40:	f002 02f7 	and.w	r2, r2, #247	@ 0xf7
   30d44:	72da      	strb	r2, [r3, #11]
        INTRUSBE_Suspend_Enable(pUSB);
   30d46:	7ada      	ldrb	r2, [r3, #11]
   30d48:	f042 0201 	orr.w	r2, r2, #1
   30d4c:	72da      	strb	r2, [r3, #11]
        if (pState->dev_evt_callback)
   30d4e:	f8da 30fc 	ldr.w	r3, [sl, #252]	@ 0xfc
   30d52:	2b00      	cmp	r3, #0
   30d54:	f43f ae9b 	beq.w	30a8e <am_hal_usb_interrupt_service+0x56>
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_BUS_RESET);
   30d58:	4798      	blx	r3
    if (ui32IntrUsbStatus & USB_INTRUSB_SOF_Msk)
   30d5a:	9b02      	ldr	r3, [sp, #8]
   30d5c:	071c      	lsls	r4, r3, #28
   30d5e:	f57f ae96 	bpl.w	30a8e <am_hal_usb_interrupt_service+0x56>
        if (pState->dev_evt_callback)
   30d62:	f8da 30fc 	ldr.w	r3, [sl, #252]	@ 0xfc
   30d66:	2b00      	cmp	r3, #0
   30d68:	f43f ae91 	beq.w	30a8e <am_hal_usb_interrupt_service+0x56>
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_SOF);
   30d6c:	2001      	movs	r0, #1
   30d6e:	4798      	blx	r3
    if (ui32IntrInStatus & USB_INTRIN_EP0_Msk)
   30d70:	f01b 0f01 	tst.w	fp, #1
   30d74:	f43f ae8f 	beq.w	30a96 <am_hal_usb_interrupt_service+0x5e>
    EP_INDEX_Set(pUSB, AM_HAL_USB_EP0_NUMBER);
   30d78:	4b96      	ldr	r3, [pc, #600]	@ (30fd4 <am_hal_usb_interrupt_service+0x59c>)
    maxpacket = pState->ep0_maxpacket;
   30d7a:	f8ba 0058 	ldrh.w	r0, [sl, #88]	@ 0x58
    EP_INDEX_Set(pUSB, AM_HAL_USB_EP0_NUMBER);
   30d7e:	68da      	ldr	r2, [r3, #12]
   30d80:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
   30d84:	60da      	str	r2, [r3, #12]
   30d86:	68da      	ldr	r2, [r3, #12]
   30d88:	60da      	str	r2, [r3, #12]
    switch ( pState->eEP0State )
   30d8a:	f89a 3056 	ldrb.w	r3, [sl, #86]	@ 0x56
   30d8e:	2b05      	cmp	r3, #5
   30d90:	f63f ae81 	bhi.w	30a96 <am_hal_usb_interrupt_service+0x5e>
   30d94:	e8df f013 	tbh	[pc, r3, lsl #1]
   30d98:	01be015e 	.word	0x01be015e
   30d9c:	00d80177 	.word	0x00d80177
   30da0:	01200080 	.word	0x01200080
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_SUSPEND);
   30da4:	2003      	movs	r0, #3
}
   30da6:	b009      	add	sp, #36	@ 0x24
   30da8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            pState->dev_evt_callback(AM_HAL_USB_DEV_EVT_SUSPEND);
   30dac:	4708      	bx	r1
    Read32bitRemain  = ui32Count - Read32bitCount * sizeof(uint32_t);
   30dae:	f003 0303 	and.w	r3, r3, #3
    for (int i = 0; i < Read32bitCount; i++)
   30db2:	ea5f 0e99 	movs.w	lr, r9, lsr #2
   30db6:	9304      	str	r3, [sp, #16]
   30db8:	d00d      	beq.n	30dd6 <am_hal_usb_interrupt_service+0x39e>
   30dba:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
   30dbe:	9d01      	ldr	r5, [sp, #4]
   30dc0:	9205      	str	r2, [sp, #20]
   30dc2:	4486      	add	lr, r0
   30dc4:	eb0c 0300 	add.w	r3, ip, r0
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   30dc8:	682a      	ldr	r2, [r5, #0]
   30dca:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < Read32bitCount; i++)
   30dce:	4573      	cmp	r3, lr
   30dd0:	d1fa      	bne.n	30dc8 <am_hal_usb_interrupt_service+0x390>
   30dd2:	9a05      	ldr	r2, [sp, #20]
   30dd4:	9501      	str	r5, [sp, #4]
    if (Read32bitRemain)
   30dd6:	9b04      	ldr	r3, [sp, #16]
   30dd8:	b19b      	cbz	r3, 30e02 <am_hal_usb_interrupt_service+0x3ca>
        for (int i = 0; i < Read32bitRemain; i++)
   30dda:	4619      	mov	r1, r3
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30ddc:	9d01      	ldr	r5, [sp, #4]
   30dde:	f029 0303 	bic.w	r3, r9, #3
   30de2:	449c      	add	ip, r3
        for (int i = 0; i < Read32bitRemain; i++)
   30de4:	2901      	cmp	r1, #1
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30de6:	782b      	ldrb	r3, [r5, #0]
   30de8:	f80c 3000 	strb.w	r3, [ip, r0]
   30dec:	4484      	add	ip, r0
        for (int i = 0; i < Read32bitRemain; i++)
   30dee:	d007      	beq.n	30e00 <am_hal_usb_interrupt_service+0x3c8>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30df0:	782b      	ldrb	r3, [r5, #0]
   30df2:	f88c 3001 	strb.w	r3, [ip, #1]
        for (int i = 0; i < Read32bitRemain; i++)
   30df6:	2903      	cmp	r1, #3
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30df8:	bf04      	itt	eq
   30dfa:	782b      	ldrbeq	r3, [r5, #0]
   30dfc:	f88c 3002 	strbeq.w	r3, [ip, #2]
            pXfer->remaining -= count;
   30e00:	88f1      	ldrh	r1, [r6, #6]
   30e02:	eba1 0109 	sub.w	r1, r1, r9
   30e06:	b289      	uxth	r1, r1
   30e08:	80f1      	strh	r1, [r6, #6]
        if (pXfer->remaining == 0x0 || count < maxpacket)
   30e0a:	2900      	cmp	r1, #0
   30e0c:	f43f af25 	beq.w	30c5a <am_hal_usb_interrupt_service+0x222>
   30e10:	9b03      	ldr	r3, [sp, #12]
   30e12:	4599      	cmp	r9, r3
   30e14:	f4ff af21 	bcc.w	30c5a <am_hal_usb_interrupt_service+0x222>
        OUTCSRL_OutPktRdy_Clear(pUSB);
   30e18:	4a6e      	ldr	r2, [pc, #440]	@ (30fd4 <am_hal_usb_interrupt_service+0x59c>)
   30e1a:	6953      	ldr	r3, [r2, #20]
   30e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
   30e20:	6153      	str	r3, [r2, #20]
   30e22:	e6c3      	b.n	30bac <am_hal_usb_interrupt_service+0x174>
            INTRINE_Disable(pUSB, 0x1 << ui8EpNum);
   30e24:	f8b8 1006 	ldrh.w	r1, [r8, #6]
   30e28:	b289      	uxth	r1, r1
   30e2a:	ea21 0202 	bic.w	r2, r1, r2
   30e2e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
   30e32:	f8a8 2006 	strh.w	r2, [r8, #6]
            am_hal_usb_xfer_complete(pState, pXfer, ui8EpNum | AM_HAL_USB_EP_DIR_IN_MASK, pXfer->len, USB_XFER_DONE, NULL);
   30e36:	88a9      	ldrh	r1, [r5, #4]
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30e38:	602b      	str	r3, [r5, #0]
   30e3a:	60ab      	str	r3, [r5, #8]
   30e3c:	606b      	str	r3, [r5, #4]
            am_hal_usb_xfer_complete(pState, pXfer, ui8EpNum | AM_HAL_USB_EP_DIR_IN_MASK, pXfer->len, USB_XFER_DONE, NULL);
   30e3e:	f064 007f 	orn	r0, r4, #127	@ 0x7f
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   30e42:	f8da 6104 	ldr.w	r6, [sl, #260]	@ 0x104
   30e46:	b2c0      	uxtb	r0, r0
   30e48:	461a      	mov	r2, r3
   30e4a:	47b0      	blx	r6
            return;
   30e4c:	e62c      	b.n	30aa8 <am_hal_usb_interrupt_service+0x70>
            am_hal_usb_xfer_complete(pState, pXfer, am_hal_usb_ep_addr(0x0, pXfer->flags.dir), pXfer->len - pXfer->remaining, USB_XFER_ABORT, NULL);
   30e4e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   30e52:	f8ba 1074 	ldrh.w	r1, [sl, #116]	@ 0x74
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30e56:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   30e5a:	01d0      	lsls	r0, r2, #7
            am_hal_usb_xfer_complete(pState, pXfer, am_hal_usb_ep_addr(0x0, pXfer->flags.dir), pXfer->len - pXfer->remaining, USB_XFER_ABORT, NULL);
   30e5c:	f8ba 2076 	ldrh.w	r2, [sl, #118]	@ 0x76
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30e60:	606b      	str	r3, [r5, #4]
            am_hal_usb_xfer_complete(pState, pXfer, am_hal_usb_ep_addr(0x0, pXfer->flags.dir), pXfer->len - pXfer->remaining, USB_XFER_ABORT, NULL);
   30e62:	1a89      	subs	r1, r1, r2
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30e64:	60ab      	str	r3, [r5, #8]
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   30e66:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
   30e6a:	f000 0080 	and.w	r0, r0, #128	@ 0x80
   30e6e:	b289      	uxth	r1, r1
   30e70:	2204      	movs	r2, #4
   30e72:	47a0      	blx	r4
   30e74:	e722      	b.n	30cbc <am_hal_usb_interrupt_service+0x284>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30e76:	f02e 0203 	bic.w	r2, lr, #3
        for (int i = 0; i < Write32bitRemain; i++)
   30e7a:	f01e 0f02 	tst.w	lr, #2
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30e7e:	5c88      	ldrb	r0, [r1, r2]
   30e80:	7038      	strb	r0, [r7, #0]
        for (int i = 0; i < Write32bitRemain; i++)
   30e82:	d007      	beq.n	30e94 <am_hal_usb_interrupt_service+0x45c>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30e84:	4411      	add	r1, r2
        for (int i = 0; i < Write32bitRemain; i++)
   30e86:	2e03      	cmp	r6, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30e88:	784a      	ldrb	r2, [r1, #1]
   30e8a:	703a      	strb	r2, [r7, #0]
        for (int i = 0; i < Write32bitRemain; i++)
   30e8c:	4632      	mov	r2, r6
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30e8e:	bf04      	itt	eq
   30e90:	788a      	ldrbeq	r2, [r1, #2]
   30e92:	703a      	strbeq	r2, [r7, #0]
        pXfer->remaining -= min;
   30e94:	88ea      	ldrh	r2, [r5, #6]
   30e96:	e654      	b.n	30b42 <am_hal_usb_interrupt_service+0x10a>
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   30e98:	f8ba 3076 	ldrh.w	r3, [sl, #118]	@ 0x76
            if (CSR0_SentStall(pUSB))
   30e9c:	4a4d      	ldr	r2, [pc, #308]	@ (30fd4 <am_hal_usb_interrupt_service+0x59c>)
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   30e9e:	f8ba 1074 	ldrh.w	r1, [sl, #116]	@ 0x74
   30ea2:	1ac9      	subs	r1, r1, r3
            if (CSR0_SentStall(pUSB))
   30ea4:	6913      	ldr	r3, [r2, #16]
   30ea6:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   30eaa:	b289      	uxth	r1, r1
            if (CSR0_SentStall(pUSB))
   30eac:	f000 8153 	beq.w	31156 <am_hal_usb_interrupt_service+0x71e>
                CSR0_SentStall_Clear(pUSB);
   30eb0:	6913      	ldr	r3, [r2, #16]
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   30eb2:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
                CSR0_SentStall_Clear(pUSB);
   30eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
   30eba:	6113      	str	r3, [r2, #16]
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30ebc:	2300      	movs	r3, #0
   30ebe:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   30ec2:	f8ca 3074 	str.w	r3, [sl, #116]	@ 0x74
   30ec6:	f8ca 3078 	str.w	r3, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   30eca:	4618      	mov	r0, r3
   30ecc:	2202      	movs	r2, #2
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30ece:	f10a 0570 	add.w	r5, sl, #112	@ 0x70
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   30ed2:	47a0      	blx	r4
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   30ed4:	2300      	movs	r3, #0
    if (CSR0_OutPktRdy(pUSB))
   30ed6:	493f      	ldr	r1, [pc, #252]	@ (30fd4 <am_hal_usb_interrupt_service+0x59c>)
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   30ed8:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30edc:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   30ee0:	606b      	str	r3, [r5, #4]
   30ee2:	60ab      	str	r3, [r5, #8]
    if (CSR0_OutPktRdy(pUSB))
   30ee4:	690b      	ldr	r3, [r1, #16]
   30ee6:	03dd      	lsls	r5, r3, #15
   30ee8:	f57f add5 	bpl.w	30a96 <am_hal_usb_interrupt_service+0x5e>
        uint16_t count0 = COUNT0(pUSB);
   30eec:	698d      	ldr	r5, [r1, #24]
    Read32bitCount   = ui32Count / sizeof(uint32_t);
   30eee:	f3c5 048a 	ubfx	r4, r5, #2, #11
        am_hal_usb_fifo_unloading(pUSB, AM_HAL_USB_EP0_NUMBER, setup_req, count0);
   30ef2:	f3c5 060c 	ubfx	r6, r5, #0, #13
    Read32bitRemain  = ui32Count - Read32bitCount * sizeof(uint32_t);
   30ef6:	a806      	add	r0, sp, #24
   30ef8:	f005 0503 	and.w	r5, r5, #3
    for (int i = 0; i < Read32bitCount; i++)
   30efc:	b13c      	cbz	r4, 30f0e <am_hal_usb_interrupt_service+0x4d6>
   30efe:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   30f02:	4603      	mov	r3, r0
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   30f04:	6a0a      	ldr	r2, [r1, #32]
   30f06:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < Read32bitCount; i++)
   30f0a:	429c      	cmp	r4, r3
   30f0c:	d1fa      	bne.n	30f04 <am_hal_usb_interrupt_service+0x4cc>
    if (Read32bitRemain)
   30f0e:	b1a5      	cbz	r5, 30f3a <am_hal_usb_interrupt_service+0x502>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30f10:	f026 0303 	bic.w	r3, r6, #3
   30f14:	4a2f      	ldr	r2, [pc, #188]	@ (30fd4 <am_hal_usb_interrupt_service+0x59c>)
   30f16:	3320      	adds	r3, #32
   30f18:	446b      	add	r3, sp
   30f1a:	f892 1020 	ldrb.w	r1, [r2, #32]
   30f1e:	f803 1c08 	strb.w	r1, [r3, #-8]
        for (int i = 0; i < Read32bitRemain; i++)
   30f22:	2d01      	cmp	r5, #1
   30f24:	d009      	beq.n	30f3a <am_hal_usb_interrupt_service+0x502>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30f26:	f892 1020 	ldrb.w	r1, [r2, #32]
   30f2a:	f803 1c07 	strb.w	r1, [r3, #-7]
        for (int i = 0; i < Read32bitRemain; i++)
   30f2e:	2d03      	cmp	r5, #3
   30f30:	d103      	bne.n	30f3a <am_hal_usb_interrupt_service+0x502>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   30f32:	f892 2020 	ldrb.w	r2, [r2, #32]
   30f36:	f803 2c06 	strb.w	r2, [r3, #-6]
        pState->eEP0State = AM_HAL_USB_EP0_STATE_SETUP;
   30f3a:	2301      	movs	r3, #1
   30f3c:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
        pState->ep0_setup_callback(setup_req);
   30f40:	f8da 3100 	ldr.w	r3, [sl, #256]	@ 0x100
   30f44:	4798      	blx	r3
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   30f46:	e5a6      	b.n	30a96 <am_hal_usb_interrupt_service+0x5e>
            remaining = pState->ep0_xfer.remaining;
   30f48:	f8ba 4076 	ldrh.w	r4, [sl, #118]	@ 0x76
            index     = pState->ep0_xfer.len - remaining;
   30f4c:	f8ba 3074 	ldrh.w	r3, [sl, #116]	@ 0x74
            if (CSR0_SetupEnd(pUSB))
   30f50:	4a20      	ldr	r2, [pc, #128]	@ (30fd4 <am_hal_usb_interrupt_service+0x59c>)
            buf       = pState->ep0_xfer.buf;
   30f52:	f8da 5070 	ldr.w	r5, [sl, #112]	@ 0x70
            index     = pState->ep0_xfer.len - remaining;
   30f56:	1b1b      	subs	r3, r3, r4
   30f58:	b299      	uxth	r1, r3
            if (CSR0_SetupEnd(pUSB))
   30f5a:	6913      	ldr	r3, [r2, #16]
   30f5c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
                CSR0_ServicedSetupEnd_Set(pUSB);
   30f60:	6913      	ldr	r3, [r2, #16]
            if (CSR0_SetupEnd(pUSB))
   30f62:	f040 8127 	bne.w	311b4 <am_hal_usb_interrupt_service+0x77c>
            if (CSR0_SentStall(pUSB))
   30f66:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
                CSR0_SentStall_Clear(pUSB);
   30f6a:	6913      	ldr	r3, [r2, #16]
            if (CSR0_SentStall(pUSB))
   30f6c:	f040 8101 	bne.w	31172 <am_hal_usb_interrupt_service+0x73a>
            if (CSR0_InPktRdy(pUSB) == 0x0) //In data packet FIFO is empty
   30f70:	039e      	lsls	r6, r3, #14
   30f72:	f53f ad90 	bmi.w	30a96 <am_hal_usb_interrupt_service+0x5e>
                if (remaining <= maxpacket)
   30f76:	42a0      	cmp	r0, r4
   30f78:	f0c0 812c 	bcc.w	311d4 <am_hal_usb_interrupt_service+0x79c>
    for (int i = 0; i < Write32bitCount; i++)
   30f7c:	08a6      	lsrs	r6, r4, #2
   30f7e:	f004 0703 	and.w	r7, r4, #3
   30f82:	d007      	beq.n	30f94 <am_hal_usb_interrupt_service+0x55c>
   30f84:	186b      	adds	r3, r5, r1
   30f86:	eb03 0686 	add.w	r6, r3, r6, lsl #2
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   30f8a:	f853 0b04 	ldr.w	r0, [r3], #4
   30f8e:	6210      	str	r0, [r2, #32]
    for (int i = 0; i < Write32bitCount; i++)
   30f90:	429e      	cmp	r6, r3
   30f92:	d1fa      	bne.n	30f8a <am_hal_usb_interrupt_service+0x552>
    if (Write32bitRemain)
   30f94:	b18f      	cbz	r7, 30fba <am_hal_usb_interrupt_service+0x582>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30f96:	f024 0303 	bic.w	r3, r4, #3
   30f9a:	440b      	add	r3, r1
   30f9c:	4a0d      	ldr	r2, [pc, #52]	@ (30fd4 <am_hal_usb_interrupt_service+0x59c>)
   30f9e:	5ce9      	ldrb	r1, [r5, r3]
   30fa0:	f882 1020 	strb.w	r1, [r2, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   30fa4:	2f01      	cmp	r7, #1
   30fa6:	d008      	beq.n	30fba <am_hal_usb_interrupt_service+0x582>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30fa8:	442b      	add	r3, r5
        for (int i = 0; i < Write32bitRemain; i++)
   30faa:	2f03      	cmp	r7, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30fac:	7859      	ldrb	r1, [r3, #1]
   30fae:	f882 1020 	strb.w	r1, [r2, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   30fb2:	d102      	bne.n	30fba <am_hal_usb_interrupt_service+0x582>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   30fb4:	789b      	ldrb	r3, [r3, #2]
   30fb6:	f882 3020 	strb.w	r3, [r2, #32]
                    CSR0_InPktRdyAndDataEnd_Set(pUSB);
   30fba:	4a06      	ldr	r2, [pc, #24]	@ (30fd4 <am_hal_usb_interrupt_service+0x59c>)
                    pState->eEP0State = AM_HAL_USB_EP0_STATE_STATUS_TX;
   30fbc:	2305      	movs	r3, #5
   30fbe:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
                    CSR0_InPktRdyAndDataEnd_Set(pUSB);
   30fc2:	6913      	ldr	r3, [r2, #16]
                    pState->ep0_xfer.remaining = 0;
   30fc4:	2100      	movs	r1, #0
                    CSR0_InPktRdyAndDataEnd_Set(pUSB);
   30fc6:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
                    pState->ep0_xfer.remaining = 0;
   30fca:	f8aa 1076 	strh.w	r1, [sl, #118]	@ 0x76
                    CSR0_InPktRdyAndDataEnd_Set(pUSB);
   30fce:	6113      	str	r3, [r2, #16]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   30fd0:	e561      	b.n	30a96 <am_hal_usb_interrupt_service+0x5e>
   30fd2:	bf00      	nop
   30fd4:	400b0000 	.word	0x400b0000
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0 | AM_HAL_USB_EP_DIR_IN_MASK, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   30fd8:	f8ba 3076 	ldrh.w	r3, [sl, #118]	@ 0x76
            if (CSR0_SentStall(pUSB))
   30fdc:	4a94      	ldr	r2, [pc, #592]	@ (31230 <am_hal_usb_interrupt_service+0x7f8>)
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0 | AM_HAL_USB_EP_DIR_IN_MASK, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   30fde:	f8ba 1074 	ldrh.w	r1, [sl, #116]	@ 0x74
   30fe2:	1ac9      	subs	r1, r1, r3
            if (CSR0_SentStall(pUSB))
   30fe4:	6913      	ldr	r3, [r2, #16]
   30fe6:	f413 2380 	ands.w	r3, r3, #262144	@ 0x40000
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0 | AM_HAL_USB_EP_DIR_IN_MASK, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_STALL, NULL);
   30fea:	b289      	uxth	r1, r1
            if (CSR0_SentStall(pUSB))
   30fec:	f000 80a5 	beq.w	3113a <am_hal_usb_interrupt_service+0x702>
                CSR0_SentStall_Clear(pUSB);
   30ff0:	6913      	ldr	r3, [r2, #16]
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   30ff2:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
                CSR0_SentStall_Clear(pUSB);
   30ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
   30ffa:	6113      	str	r3, [r2, #16]
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   30ffc:	2300      	movs	r3, #0
   30ffe:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   31002:	f8ca 3074 	str.w	r3, [sl, #116]	@ 0x74
   31006:	f8ca 3078 	str.w	r3, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3100a:	2202      	movs	r2, #2
   3100c:	2080      	movs	r0, #128	@ 0x80
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3100e:	f10a 0570 	add.w	r5, sl, #112	@ 0x70
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   31012:	47a0      	blx	r4
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   31014:	2300      	movs	r3, #0
    if (CSR0_OutPktRdy(pUSB))
   31016:	4986      	ldr	r1, [pc, #536]	@ (31230 <am_hal_usb_interrupt_service+0x7f8>)
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   31018:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3101c:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   31020:	606b      	str	r3, [r5, #4]
   31022:	60ab      	str	r3, [r5, #8]
    if (CSR0_OutPktRdy(pUSB))
   31024:	690b      	ldr	r3, [r1, #16]
   31026:	03dc      	lsls	r4, r3, #15
   31028:	f57f ad35 	bpl.w	30a96 <am_hal_usb_interrupt_service+0x5e>
        uint16_t count0 = COUNT0(pUSB);
   3102c:	698d      	ldr	r5, [r1, #24]
    Read32bitCount   = ui32Count / sizeof(uint32_t);
   3102e:	f3c5 048a 	ubfx	r4, r5, #2, #11
        am_hal_usb_fifo_unloading(pUSB, AM_HAL_USB_EP0_NUMBER, setup_req, count0);
   31032:	f3c5 060c 	ubfx	r6, r5, #0, #13
    Read32bitRemain  = ui32Count - Read32bitCount * sizeof(uint32_t);
   31036:	a806      	add	r0, sp, #24
   31038:	f005 0503 	and.w	r5, r5, #3
    for (int i = 0; i < Read32bitCount; i++)
   3103c:	2c00      	cmp	r4, #0
   3103e:	f43f af66 	beq.w	30f0e <am_hal_usb_interrupt_service+0x4d6>
   31042:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   31046:	4603      	mov	r3, r0
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   31048:	6a0a      	ldr	r2, [r1, #32]
   3104a:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < Read32bitCount; i++)
   3104e:	42a3      	cmp	r3, r4
   31050:	d1fa      	bne.n	31048 <am_hal_usb_interrupt_service+0x610>
   31052:	e75c      	b.n	30f0e <am_hal_usb_interrupt_service+0x4d6>
    if (CSR0_OutPktRdy(pUSB))
   31054:	4976      	ldr	r1, [pc, #472]	@ (31230 <am_hal_usb_interrupt_service+0x7f8>)
   31056:	690b      	ldr	r3, [r1, #16]
   31058:	03d8      	lsls	r0, r3, #15
   3105a:	f57f ad1c 	bpl.w	30a96 <am_hal_usb_interrupt_service+0x5e>
        uint16_t count0 = COUNT0(pUSB);
   3105e:	698d      	ldr	r5, [r1, #24]
    Read32bitCount   = ui32Count / sizeof(uint32_t);
   31060:	f3c5 048a 	ubfx	r4, r5, #2, #11
        am_hal_usb_fifo_unloading(pUSB, AM_HAL_USB_EP0_NUMBER, setup_req, count0);
   31064:	f3c5 060c 	ubfx	r6, r5, #0, #13
    Read32bitRemain  = ui32Count - Read32bitCount * sizeof(uint32_t);
   31068:	a806      	add	r0, sp, #24
   3106a:	f005 0503 	and.w	r5, r5, #3
    for (int i = 0; i < Read32bitCount; i++)
   3106e:	2c00      	cmp	r4, #0
   31070:	f43f af4d 	beq.w	30f0e <am_hal_usb_interrupt_service+0x4d6>
   31074:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   31078:	4603      	mov	r3, r0
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   3107a:	6a0a      	ldr	r2, [r1, #32]
   3107c:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < Read32bitCount; i++)
   31080:	429c      	cmp	r4, r3
   31082:	d1fa      	bne.n	3107a <am_hal_usb_interrupt_service+0x642>
   31084:	e743      	b.n	30f0e <am_hal_usb_interrupt_service+0x4d6>
            remaining = pState->ep0_xfer.remaining;
   31086:	f8ba 4076 	ldrh.w	r4, [sl, #118]	@ 0x76
            index     = pState->ep0_xfer.len - remaining;
   3108a:	f8ba 3074 	ldrh.w	r3, [sl, #116]	@ 0x74
            if (CSR0_SetupEnd(pUSB))
   3108e:	4a68      	ldr	r2, [pc, #416]	@ (31230 <am_hal_usb_interrupt_service+0x7f8>)
            index     = pState->ep0_xfer.len - remaining;
   31090:	1b1b      	subs	r3, r3, r4
   31092:	b299      	uxth	r1, r3
            if (CSR0_SetupEnd(pUSB))
   31094:	6913      	ldr	r3, [r2, #16]
   31096:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
                CSR0_ServicedSetupEnd_Set(pUSB);
   3109a:	6913      	ldr	r3, [r2, #16]
            if (CSR0_SetupEnd(pUSB))
   3109c:	d16d      	bne.n	3117a <am_hal_usb_interrupt_service+0x742>
            if (CSR0_SentStall(pUSB))
   3109e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
                CSR0_SentStall_Clear(pUSB);
   310a2:	6913      	ldr	r3, [r2, #16]
            if (CSR0_SentStall(pUSB))
   310a4:	d165      	bne.n	31172 <am_hal_usb_interrupt_service+0x73a>
            if (CSR0_OutPktRdy(pUSB))
   310a6:	03df      	lsls	r7, r3, #15
   310a8:	f57f acf5 	bpl.w	30a96 <am_hal_usb_interrupt_service+0x5e>
                count0 = COUNT0(pUSB);
   310ac:	6997      	ldr	r7, [r2, #24]
                am_hal_usb_fifo_unloading(pUSB, 0x0, pState->ep0_xfer.buf + index, count0);
   310ae:	f8da 3070 	ldr.w	r3, [sl, #112]	@ 0x70
                count0 = COUNT0(pUSB);
   310b2:	f3c7 060c 	ubfx	r6, r7, #0, #13
                pState->ep0_xfer.remaining -= count0;
   310b6:	1ba4      	subs	r4, r4, r6
    for (int i = 0; i < Read32bitCount; i++)
   310b8:	08b5      	lsrs	r5, r6, #2
                am_hal_usb_fifo_unloading(pUSB, 0x0, pState->ep0_xfer.buf + index, count0);
   310ba:	440b      	add	r3, r1
                pState->ep0_xfer.remaining -= count0;
   310bc:	f8aa 4076 	strh.w	r4, [sl, #118]	@ 0x76
    Read32bitRemain  = ui32Count - Read32bitCount * sizeof(uint32_t);
   310c0:	f007 0703 	and.w	r7, r7, #3
    for (int i = 0; i < Read32bitCount; i++)
   310c4:	d008      	beq.n	310d8 <am_hal_usb_interrupt_service+0x6a0>
   310c6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   310ca:	3d04      	subs	r5, #4
   310cc:	1f19      	subs	r1, r3, #4
        *((uint32_t *)pucBuf + i) = *FIFOx_ADDR(pUSB, ui8EpNum);
   310ce:	6a14      	ldr	r4, [r2, #32]
   310d0:	f841 4f04 	str.w	r4, [r1, #4]!
    for (int i = 0; i < Read32bitCount; i++)
   310d4:	42a9      	cmp	r1, r5
   310d6:	d1fa      	bne.n	310ce <am_hal_usb_interrupt_service+0x696>
    if (Read32bitRemain)
   310d8:	b187      	cbz	r7, 310fc <am_hal_usb_interrupt_service+0x6c4>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   310da:	4a55      	ldr	r2, [pc, #340]	@ (31230 <am_hal_usb_interrupt_service+0x7f8>)
   310dc:	f026 0103 	bic.w	r1, r6, #3
   310e0:	f892 4020 	ldrb.w	r4, [r2, #32]
   310e4:	545c      	strb	r4, [r3, r1]
        for (int i = 0; i < Read32bitRemain; i++)
   310e6:	2f01      	cmp	r7, #1
   310e8:	d008      	beq.n	310fc <am_hal_usb_interrupt_service+0x6c4>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   310ea:	440b      	add	r3, r1
        for (int i = 0; i < Read32bitRemain; i++)
   310ec:	2f03      	cmp	r7, #3
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   310ee:	f892 1020 	ldrb.w	r1, [r2, #32]
   310f2:	7059      	strb	r1, [r3, #1]
        for (int i = 0; i < Read32bitRemain; i++)
   310f4:	d102      	bne.n	310fc <am_hal_usb_interrupt_service+0x6c4>
            pucBuf[Read32bitCount*sizeof(uint32_t) + i] = (uint8_t) *pui8FIFO;
   310f6:	f892 2020 	ldrb.w	r2, [r2, #32]
   310fa:	709a      	strb	r2, [r3, #2]
                if (count0 < maxpacket)
   310fc:	42b0      	cmp	r0, r6
   310fe:	f240 8091 	bls.w	31224 <am_hal_usb_interrupt_service+0x7ec>
                    CSR0_ServicedOutPktRdyAndDataEnd_Set(pUSB);
   31102:	4a4b      	ldr	r2, [pc, #300]	@ (31230 <am_hal_usb_interrupt_service+0x7f8>)
                    pState->eEP0State = AM_HAL_USB_EP0_STATE_STATUS_RX;
   31104:	2304      	movs	r3, #4
   31106:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
                    CSR0_ServicedOutPktRdyAndDataEnd_Set(pUSB);
   3110a:	6913      	ldr	r3, [r2, #16]
   3110c:	f443 0390 	orr.w	r3, r3, #4718592	@ 0x480000
   31110:	6113      	str	r3, [r2, #16]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   31112:	e4c0      	b.n	30a96 <am_hal_usb_interrupt_service+0x5e>
            if (CSR0_SentStall(pUSB))
   31114:	4b46      	ldr	r3, [pc, #280]	@ (31230 <am_hal_usb_interrupt_service+0x7f8>)
   31116:	691a      	ldr	r2, [r3, #16]
   31118:	0352      	lsls	r2, r2, #13
   3111a:	f57f acbc 	bpl.w	30a96 <am_hal_usb_interrupt_service+0x5e>
                CSR0_SentStall_Clear(pUSB);
   3111e:	691a      	ldr	r2, [r3, #16]
   31120:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
   31124:	611a      	str	r2, [r3, #16]
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   31126:	2300      	movs	r3, #0
   31128:	f88a 3056 	strb.w	r3, [sl, #86]	@ 0x56
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3112c:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   31130:	f8ca 3074 	str.w	r3, [sl, #116]	@ 0x74
   31134:	f8ca 3078 	str.w	r3, [sl, #120]	@ 0x78
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   31138:	e4ad      	b.n	30a96 <am_hal_usb_interrupt_service+0x5e>
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3113a:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3113e:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   31142:	f8ca 3074 	str.w	r3, [sl, #116]	@ 0x74
   31146:	f8ca 3078 	str.w	r3, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3114a:	461a      	mov	r2, r3
   3114c:	2080      	movs	r0, #128	@ 0x80
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3114e:	f10a 0570 	add.w	r5, sl, #112	@ 0x70
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   31152:	47a0      	blx	r4
   31154:	e75e      	b.n	31014 <am_hal_usb_interrupt_service+0x5dc>
   31156:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3115a:	f8ca 3070 	str.w	r3, [sl, #112]	@ 0x70
   3115e:	f8ca 3074 	str.w	r3, [sl, #116]	@ 0x74
   31162:	f8ca 3078 	str.w	r3, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   31166:	461a      	mov	r2, r3
   31168:	4618      	mov	r0, r3
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3116a:	f10a 0570 	add.w	r5, sl, #112	@ 0x70
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3116e:	47a0      	blx	r4
   31170:	e6b0      	b.n	30ed4 <am_hal_usb_interrupt_service+0x49c>
                CSR0_SentStall_Clear(pUSB);
   31172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
   31176:	6113      	str	r3, [r2, #16]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   31178:	e48d      	b.n	30a96 <am_hal_usb_interrupt_service+0x5e>
                CSR0_ServicedSetupEnd_Set(pUSB);
   3117a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
   3117e:	6113      	str	r3, [r2, #16]
                if (!CSR0_OutPktRdy(pUSB))
   31180:	6915      	ldr	r5, [r2, #16]
   31182:	f415 3580 	ands.w	r5, r5, #65536	@ 0x10000
   31186:	f47f ac86 	bne.w	30a96 <am_hal_usb_interrupt_service+0x5e>
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3118a:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   3118e:	f8ca 5070 	str.w	r5, [sl, #112]	@ 0x70
   31192:	f8ca 5074 	str.w	r5, [sl, #116]	@ 0x74
   31196:	f8ca 5078 	str.w	r5, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   3119a:	462b      	mov	r3, r5
   3119c:	2206      	movs	r2, #6
   3119e:	4628      	mov	r0, r5
                am_hal_usb_xfer_complete(pState, &pState->ep0_xfer, 0x0 | AM_HAL_USB_EP_DIR_IN_MASK, pState->ep0_xfer.len - pState->ep0_xfer.remaining, USB_XFER_ERROR, NULL);
   311a0:	f10a 0670 	add.w	r6, sl, #112	@ 0x70
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   311a4:	47a0      	blx	r4
    pState->eEP0State = AM_HAL_USB_EP0_STATE_IDLE;
   311a6:	f88a 5056 	strb.w	r5, [sl, #86]	@ 0x56
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   311aa:	f8ca 5070 	str.w	r5, [sl, #112]	@ 0x70
   311ae:	6075      	str	r5, [r6, #4]
   311b0:	60b5      	str	r5, [r6, #8]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   311b2:	e470      	b.n	30a96 <am_hal_usb_interrupt_service+0x5e>
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   311b4:	2500      	movs	r5, #0
                CSR0_ServicedSetupEnd_Set(pUSB);
   311b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
   311ba:	6113      	str	r3, [r2, #16]
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   311bc:	f8da 4104 	ldr.w	r4, [sl, #260]	@ 0x104
    memset((void *)pXfer, 0x0, sizeof(*pXfer));
   311c0:	f8ca 5070 	str.w	r5, [sl, #112]	@ 0x70
   311c4:	f8ca 5074 	str.w	r5, [sl, #116]	@ 0x74
   311c8:	f8ca 5078 	str.w	r5, [sl, #120]	@ 0x78
        pState->ep_xfer_complete_callback(ui8EpAddr, ui16XferLen, eXferCode, param);
   311cc:	462b      	mov	r3, r5
   311ce:	2206      	movs	r2, #6
   311d0:	2080      	movs	r0, #128	@ 0x80
   311d2:	e7e5      	b.n	311a0 <am_hal_usb_interrupt_service+0x768>
                    pState->ep0_xfer.remaining -= maxpacket;
   311d4:	1a24      	subs	r4, r4, r0
    for (int i = 0; i < Write32bitCount; i++)
   311d6:	0887      	lsrs	r7, r0, #2
                    pState->ep0_xfer.remaining -= maxpacket;
   311d8:	f8aa 4076 	strh.w	r4, [sl, #118]	@ 0x76
    Write32bitRemain  = ui32Count - Write32bitCount * sizeof(uint32_t);
   311dc:	f000 0403 	and.w	r4, r0, #3
    for (int i = 0; i < Write32bitCount; i++)
   311e0:	d007      	beq.n	311f2 <am_hal_usb_interrupt_service+0x7ba>
   311e2:	186b      	adds	r3, r5, r1
   311e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
        *FIFOx_ADDR(pUSB, ui8EpNum) = *((uint32_t *)pucBuf + i);
   311e8:	f853 6b04 	ldr.w	r6, [r3], #4
   311ec:	6216      	str	r6, [r2, #32]
    for (int i = 0; i < Write32bitCount; i++)
   311ee:	42bb      	cmp	r3, r7
   311f0:	d1fa      	bne.n	311e8 <am_hal_usb_interrupt_service+0x7b0>
    if (Write32bitRemain)
   311f2:	b18c      	cbz	r4, 31218 <am_hal_usb_interrupt_service+0x7e0>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   311f4:	f020 0303 	bic.w	r3, r0, #3
   311f8:	440b      	add	r3, r1
   311fa:	4a0d      	ldr	r2, [pc, #52]	@ (31230 <am_hal_usb_interrupt_service+0x7f8>)
   311fc:	5ce9      	ldrb	r1, [r5, r3]
   311fe:	f882 1020 	strb.w	r1, [r2, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   31202:	2c01      	cmp	r4, #1
   31204:	d008      	beq.n	31218 <am_hal_usb_interrupt_service+0x7e0>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   31206:	441d      	add	r5, r3
        for (int i = 0; i < Write32bitRemain; i++)
   31208:	2c03      	cmp	r4, #3
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   3120a:	786b      	ldrb	r3, [r5, #1]
   3120c:	f882 3020 	strb.w	r3, [r2, #32]
        for (int i = 0; i < Write32bitRemain; i++)
   31210:	d102      	bne.n	31218 <am_hal_usb_interrupt_service+0x7e0>
            *pui8FIFO = pucBuf[Write32bitCount*sizeof(uint32_t) + i];
   31212:	78ab      	ldrb	r3, [r5, #2]
   31214:	f882 3020 	strb.w	r3, [r2, #32]
                    CSR0_InPktRdy_Set(pUSB);
   31218:	4a05      	ldr	r2, [pc, #20]	@ (31230 <am_hal_usb_interrupt_service+0x7f8>)
   3121a:	6913      	ldr	r3, [r2, #16]
   3121c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
   31220:	6113      	str	r3, [r2, #16]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   31222:	e438      	b.n	30a96 <am_hal_usb_interrupt_service+0x5e>
                    CSR0_ServicedOutPktRdy_Set(pUSB);
   31224:	4a02      	ldr	r2, [pc, #8]	@ (31230 <am_hal_usb_interrupt_service+0x7f8>)
   31226:	6913      	ldr	r3, [r2, #16]
   31228:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
   3122c:	6113      	str	r3, [r2, #16]
    for (i = AM_HAL_USB_EP1_NUMBER; i <= AM_HAL_USB_EP_MAX_NUMBER; i++)
   3122e:	e432      	b.n	30a96 <am_hal_usb_interrupt_service+0x5e>
   31230:	400b0000 	.word	0x400b0000

00031234 <_Znwj>:
    erpc_free(ptr);
}

void *erpc_malloc(size_t size)
{
    void *p = ns_malloc(size);
   31234:	f7fb b80c 	b.w	2c250 <ns_malloc>

00031238 <_Znaj>:
void *operator new[](size_t count) THROW_BADALLOC
   31238:	f7fb b80a 	b.w	2c250 <ns_malloc>

0003123c <_ZdlPv>:
    return p;
}

void erpc_free(void *ptr)
{
    ns_free(ptr);
   3123c:	f7fb b814 	b.w	2c268 <ns_free>

00031240 <_ZdlPvj>:
   31240:	f7fb b812 	b.w	2c268 <ns_free>

00031244 <_ZdaPv>:
void operator delete[](void *ptr) THROW NOEXCEPT
   31244:	f7fb b810 	b.w	2c268 <ns_free>

00031248 <_ZdaPvj>:
void operator delete[](void *ptr, std::size_t count) THROW NOEXCEPT
   31248:	f7fb b80e 	b.w	2c268 <ns_free>

0003124c <am_hal_adc_initialize>:
   3124c:	2800      	cmp	r0, #0
   3124e:	d176      	bne.n	3133e <am_hal_adc_initialize+0xf2>
   31250:	2900      	cmp	r1, #0
   31252:	d076      	beq.n	31342 <am_hal_adc_initialize+0xf6>
   31254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31256:	4b3c      	ldr	r3, [pc, #240]	@ (31348 <am_hal_adc_initialize+0xfc>)
   31258:	78dd      	ldrb	r5, [r3, #3]
   3125a:	f015 0501 	ands.w	r5, r5, #1
   3125e:	d131      	bne.n	312c4 <am_hal_adc_initialize+0x78>
   31260:	681a      	ldr	r2, [r3, #0]
   31262:	483a      	ldr	r0, [pc, #232]	@ (3134c <am_hal_adc_initialize+0x100>)
   31264:	4c3a      	ldr	r4, [pc, #232]	@ (31350 <am_hal_adc_initialize+0x104>)
   31266:	f002 427e 	and.w	r2, r2, #4261412864	@ 0xfe000000
   3126a:	4302      	orrs	r2, r0
   3126c:	4839      	ldr	r0, [pc, #228]	@ (31354 <am_hal_adc_initialize+0x108>)
   3126e:	e9c3 2500 	strd	r2, r5, [r3]
   31272:	2201      	movs	r2, #1
   31274:	6005      	str	r5, [r0, #0]
   31276:	600b      	str	r3, [r1, #0]
   31278:	4610      	mov	r0, r2
   3127a:	4623      	mov	r3, r4
   3127c:	f44f 6198 	mov.w	r1, #1216	@ 0x4c0
   31280:	f000 ff4c 	bl	3211c <am_hal_mram_info_read>
   31284:	2201      	movs	r2, #1
   31286:	1d23      	adds	r3, r4, #4
   31288:	f240 41c1 	movw	r1, #1217	@ 0x4c1
   3128c:	4607      	mov	r7, r0
   3128e:	4610      	mov	r0, r2
   31290:	f000 ff44 	bl	3211c <am_hal_mram_info_read>
   31294:	2201      	movs	r2, #1
   31296:	f104 0308 	add.w	r3, r4, #8
   3129a:	4606      	mov	r6, r0
   3129c:	f240 41c2 	movw	r1, #1218	@ 0x4c2
   312a0:	4610      	mov	r0, r2
   312a2:	f000 ff3b 	bl	3211c <am_hal_mram_info_read>
   312a6:	6822      	ldr	r2, [r4, #0]
   312a8:	3201      	adds	r2, #1
   312aa:	d00d      	beq.n	312c8 <am_hal_adc_initialize+0x7c>
   312ac:	6862      	ldr	r2, [r4, #4]
   312ae:	3201      	adds	r2, #1
   312b0:	d00a      	beq.n	312c8 <am_hal_adc_initialize+0x7c>
   312b2:	68a2      	ldr	r2, [r4, #8]
   312b4:	3201      	adds	r2, #1
   312b6:	d007      	beq.n	312c8 <am_hal_adc_initialize+0x7c>
   312b8:	4330      	orrs	r0, r6
   312ba:	ea50 0307 	orrs.w	r3, r0, r7
   312be:	d103      	bne.n	312c8 <am_hal_adc_initialize+0x7c>
   312c0:	2501      	movs	r5, #1
   312c2:	e007      	b.n	312d4 <am_hal_adc_initialize+0x88>
   312c4:	2007      	movs	r0, #7
   312c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   312c8:	4923      	ldr	r1, [pc, #140]	@ (31358 <am_hal_adc_initialize+0x10c>)
   312ca:	4a24      	ldr	r2, [pc, #144]	@ (3135c <am_hal_adc_initialize+0x110>)
   312cc:	4b24      	ldr	r3, [pc, #144]	@ (31360 <am_hal_adc_initialize+0x114>)
   312ce:	6021      	str	r1, [r4, #0]
   312d0:	6062      	str	r2, [r4, #4]
   312d2:	60a3      	str	r3, [r4, #8]
   312d4:	4e23      	ldr	r6, [pc, #140]	@ (31364 <am_hal_adc_initialize+0x118>)
   312d6:	7325      	strb	r5, [r4, #12]
   312d8:	2201      	movs	r2, #1
   312da:	1d33      	adds	r3, r6, #4
   312dc:	f240 41ca 	movw	r1, #1226	@ 0x4ca
   312e0:	4610      	mov	r0, r2
   312e2:	f000 ff1b 	bl	3211c <am_hal_mram_info_read>
   312e6:	2201      	movs	r2, #1
   312e8:	4633      	mov	r3, r6
   312ea:	f240 41cb 	movw	r1, #1227	@ 0x4cb
   312ee:	4604      	mov	r4, r0
   312f0:	4610      	mov	r0, r2
   312f2:	f000 ff13 	bl	3211c <am_hal_mram_info_read>
   312f6:	4b1c      	ldr	r3, [pc, #112]	@ (31368 <am_hal_adc_initialize+0x11c>)
   312f8:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
   312fc:	f36f 0200 	bfc	r2, #0, #1
   31300:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
   31304:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
   31308:	f36f 0207 	bfc	r2, #0, #8
   3130c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
   31310:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
   31314:	2104      	movs	r1, #4
   31316:	f361 220f 	bfi	r2, r1, #8, #8
   3131a:	4320      	orrs	r0, r4
   3131c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
   31320:	d109      	bne.n	31336 <am_hal_adc_initialize+0xea>
   31322:	6873      	ldr	r3, [r6, #4]
   31324:	3301      	adds	r3, #1
   31326:	d006      	beq.n	31336 <am_hal_adc_initialize+0xea>
   31328:	6833      	ldr	r3, [r6, #0]
   3132a:	3301      	adds	r3, #1
   3132c:	d003      	beq.n	31336 <am_hal_adc_initialize+0xea>
   3132e:	4b0f      	ldr	r3, [pc, #60]	@ (3136c <am_hal_adc_initialize+0x120>)
   31330:	2201      	movs	r2, #1
   31332:	701a      	strb	r2, [r3, #0]
   31334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31336:	4b0d      	ldr	r3, [pc, #52]	@ (3136c <am_hal_adc_initialize+0x120>)
   31338:	2000      	movs	r0, #0
   3133a:	7018      	strb	r0, [r3, #0]
   3133c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3133e:	2005      	movs	r0, #5
   31340:	4770      	bx	lr
   31342:	2006      	movs	r0, #6
   31344:	4770      	bx	lr
   31346:	bf00      	nop
   31348:	10054fa8 	.word	0x10054fa8
   3134c:	01afafaf 	.word	0x01afafaf
   31350:	10055000 	.word	0x10055000
   31354:	10054fa4 	.word	0x10054fa4
   31358:	4395c000 	.word	0x4395c000
   3135c:	3f839874 	.word	0x3f839874
   31360:	bb8c47a1 	.word	0xbb8c47a1
   31364:	10054ff4 	.word	0x10054ff4
   31368:	40020000 	.word	0x40020000
   3136c:	10054fec 	.word	0x10054fec

00031370 <am_hal_adc_configure>:
   31370:	b390      	cbz	r0, 313d8 <am_hal_adc_configure+0x68>
   31372:	6803      	ldr	r3, [r0, #0]
   31374:	4a19      	ldr	r2, [pc, #100]	@ (313dc <am_hal_adc_configure+0x6c>)
   31376:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3137a:	4293      	cmp	r3, r2
   3137c:	d12c      	bne.n	313d8 <am_hal_adc_configure+0x68>
   3137e:	780b      	ldrb	r3, [r1, #0]
   31380:	2b02      	cmp	r3, #2
   31382:	d127      	bne.n	313d4 <am_hal_adc_configure+0x64>
   31384:	784b      	ldrb	r3, [r1, #1]
   31386:	7988      	ldrb	r0, [r1, #6]
   31388:	788a      	ldrb	r2, [r1, #2]
   3138a:	f891 c003 	ldrb.w	ip, [r1, #3]
   3138e:	051b      	lsls	r3, r3, #20
   31390:	0080      	lsls	r0, r0, #2
   31392:	f000 0004 	and.w	r0, r0, #4
   31396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
   3139a:	04d2      	lsls	r2, r2, #19
   3139c:	4303      	orrs	r3, r0
   3139e:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
   313a2:	7908      	ldrb	r0, [r1, #4]
   313a4:	4313      	orrs	r3, r2
   313a6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   313aa:	794a      	ldrb	r2, [r1, #5]
   313ac:	f40c 2ce0 	and.w	ip, ip, #458752	@ 0x70000
   313b0:	0101      	lsls	r1, r0, #4
   313b2:	ea43 030c 	orr.w	r3, r3, ip
   313b6:	f001 0110 	and.w	r1, r1, #16
   313ba:	00d2      	lsls	r2, r2, #3
   313bc:	430b      	orrs	r3, r1
   313be:	f002 0208 	and.w	r2, r2, #8
   313c2:	4313      	orrs	r3, r2
   313c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
   313c8:	4a05      	ldr	r2, [pc, #20]	@ (313e0 <am_hal_adc_configure+0x70>)
   313ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
   313ce:	6013      	str	r3, [r2, #0]
   313d0:	2000      	movs	r0, #0
   313d2:	4770      	bx	lr
   313d4:	2006      	movs	r0, #6
   313d6:	4770      	bx	lr
   313d8:	2002      	movs	r0, #2
   313da:	4770      	bx	lr
   313dc:	01afafaf 	.word	0x01afafaf
   313e0:	40038000 	.word	0x40038000

000313e4 <am_hal_adc_configure_slot>:
   313e4:	b378      	cbz	r0, 31446 <am_hal_adc_configure_slot+0x62>
   313e6:	6803      	ldr	r3, [r0, #0]
   313e8:	481a      	ldr	r0, [pc, #104]	@ (31454 <am_hal_adc_configure_slot+0x70>)
   313ea:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   313ee:	4283      	cmp	r3, r0
   313f0:	d129      	bne.n	31446 <am_hal_adc_configure_slot+0x62>
   313f2:	2907      	cmp	r1, #7
   313f4:	d829      	bhi.n	3144a <am_hal_adc_configure_slot+0x66>
   313f6:	b410      	push	{r4}
   313f8:	6854      	ldr	r4, [r2, #4]
   313fa:	2c3f      	cmp	r4, #63	@ 0x3f
   313fc:	d827      	bhi.n	3144e <am_hal_adc_configure_slot+0x6a>
   313fe:	7ad3      	ldrb	r3, [r2, #11]
   31400:	7810      	ldrb	r0, [r2, #0]
   31402:	f892 c008 	ldrb.w	ip, [r2, #8]
   31406:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   3140a:	7a94      	ldrb	r4, [r2, #10]
   3140c:	0600      	lsls	r0, r0, #24
   3140e:	f000 60e0 	and.w	r0, r0, #117440512	@ 0x7000000
   31412:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
   31416:	4303      	orrs	r3, r0
   31418:	7a50      	ldrb	r0, [r2, #9]
   3141a:	4a0f      	ldr	r2, [pc, #60]	@ (31458 <am_hal_adc_configure_slot+0x74>)
   3141c:	4c0f      	ldr	r4, [pc, #60]	@ (3145c <am_hal_adc_configure_slot+0x78>)
   3141e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   31422:	0200      	lsls	r0, r0, #8
   31424:	440a      	add	r2, r1
   31426:	f40c 3c40 	and.w	ip, ip, #196608	@ 0x30000
   3142a:	f400 6170 	and.w	r1, r0, #3840	@ 0xf00
   3142e:	ea43 030c 	orr.w	r3, r3, ip
   31432:	0092      	lsls	r2, r2, #2
   31434:	430b      	orrs	r3, r1
   31436:	6013      	str	r3, [r2, #0]
   31438:	6823      	ldr	r3, [r4, #0]
   3143a:	3301      	adds	r3, #1
   3143c:	2000      	movs	r0, #0
   3143e:	6023      	str	r3, [r4, #0]
   31440:	f85d 4b04 	ldr.w	r4, [sp], #4
   31444:	4770      	bx	lr
   31446:	2002      	movs	r0, #2
   31448:	4770      	bx	lr
   3144a:	2005      	movs	r0, #5
   3144c:	4770      	bx	lr
   3144e:	2006      	movs	r0, #6
   31450:	e7f6      	b.n	31440 <am_hal_adc_configure_slot+0x5c>
   31452:	bf00      	nop
   31454:	01afafaf 	.word	0x01afafaf
   31458:	1000e003 	.word	0x1000e003
   3145c:	10054fa4 	.word	0x10054fa4

00031460 <am_hal_adc_control>:
   31460:	b158      	cbz	r0, 3147a <am_hal_adc_control+0x1a>
   31462:	6803      	ldr	r3, [r0, #0]
   31464:	4841      	ldr	r0, [pc, #260]	@ (3156c <am_hal_adc_control+0x10c>)
   31466:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3146a:	4283      	cmp	r3, r0
   3146c:	d105      	bne.n	3147a <am_hal_adc_control+0x1a>
   3146e:	2903      	cmp	r1, #3
   31470:	d876      	bhi.n	31560 <am_hal_adc_control+0x100>
   31472:	e8df f001 	tbb	[pc, r1]
   31476:	2a18      	.short	0x2a18
   31478:	045e      	.short	0x045e
   3147a:	2002      	movs	r0, #2
   3147c:	4770      	bx	lr
   3147e:	2a00      	cmp	r2, #0
   31480:	d06e      	beq.n	31560 <am_hal_adc_control+0x100>
   31482:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 31570 <am_hal_adc_control+0x110>
   31486:	ed92 7a03 	vldr	s14, [r2, #12]
   3148a:	eeb4 7a67 	vcmp.f32	s14, s15
   3148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   31492:	d163      	bne.n	3155c <am_hal_adc_control+0xfc>
   31494:	4b37      	ldr	r3, [pc, #220]	@ (31574 <am_hal_adc_control+0x114>)
   31496:	6819      	ldr	r1, [r3, #0]
   31498:	6011      	str	r1, [r2, #0]
   3149a:	2000      	movs	r0, #0
   3149c:	685b      	ldr	r3, [r3, #4]
   3149e:	6090      	str	r0, [r2, #8]
   314a0:	60d0      	str	r0, [r2, #12]
   314a2:	6053      	str	r3, [r2, #4]
   314a4:	4770      	bx	lr
   314a6:	6853      	ldr	r3, [r2, #4]
   314a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
   314ac:	d25a      	bcs.n	31564 <am_hal_adc_control+0x104>
   314ae:	b410      	push	{r4}
   314b0:	6894      	ldr	r4, [r2, #8]
   314b2:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
   314b6:	d257      	bcs.n	31568 <am_hal_adc_control+0x108>
   314b8:	492f      	ldr	r1, [pc, #188]	@ (31578 <am_hal_adc_control+0x118>)
   314ba:	7812      	ldrb	r2, [r2, #0]
   314bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
   314be:	2000      	movs	r0, #0
   314c0:	630c      	str	r4, [r1, #48]	@ 0x30
   314c2:	634a      	str	r2, [r1, #52]	@ 0x34
   314c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   314c8:	4770      	bx	lr
   314ca:	2a00      	cmp	r2, #0
   314cc:	d048      	beq.n	31560 <am_hal_adc_control+0x100>
   314ce:	eddf 7a28 	vldr	s15, [pc, #160]	@ 31570 <am_hal_adc_control+0x110>
   314d2:	ed92 7a02 	vldr	s14, [r2, #8]
   314d6:	eeb4 7a67 	vcmp.f32	s14, s15
   314da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   314de:	d13d      	bne.n	3155c <am_hal_adc_control+0xfc>
   314e0:	4b26      	ldr	r3, [pc, #152]	@ (3157c <am_hal_adc_control+0x11c>)
   314e2:	edd2 6a00 	vldr	s13, [r2]
   314e6:	edd3 7a00 	vldr	s15, [r3]
   314ea:	eef5 7a40 	vcmp.f32	s15, #0.0
   314ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   314f2:	d110      	bne.n	31516 <am_hal_adc_control+0xb6>
   314f4:	4922      	ldr	r1, [pc, #136]	@ (31580 <am_hal_adc_control+0x120>)
   314f6:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 31584 <am_hal_adc_control+0x124>
   314fa:	ed91 7a01 	vldr	s14, [r1, #4]
   314fe:	edd1 5a02 	vldr	s11, [r1, #8]
   31502:	edd1 7a00 	vldr	s15, [r1]
   31506:	ee37 7a25 	vadd.f32	s14, s14, s11
   3150a:	ee27 7a06 	vmul.f32	s14, s14, s12
   3150e:	ee77 7a27 	vadd.f32	s15, s14, s15
   31512:	edc3 7a00 	vstr	s15, [r3]
   31516:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 31588 <am_hal_adc_control+0x128>
   3151a:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 3158c <am_hal_adc_control+0x12c>
   3151e:	ee26 7a87 	vmul.f32	s14, s13, s14
   31522:	2000      	movs	r0, #0
   31524:	ee77 7a87 	vadd.f32	s15, s15, s14
   31528:	ee77 7ac6 	vsub.f32	s15, s15, s12
   3152c:	edc2 7a01 	vstr	s15, [r2, #4]
   31530:	4770      	bx	lr
   31532:	b1aa      	cbz	r2, 31560 <am_hal_adc_control+0x100>
   31534:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 31570 <am_hal_adc_control+0x110>
   31538:	ed92 7a03 	vldr	s14, [r2, #12]
   3153c:	eeb4 7a67 	vcmp.f32	s14, s15
   31540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   31544:	d10a      	bne.n	3155c <am_hal_adc_control+0xfc>
   31546:	4b0e      	ldr	r3, [pc, #56]	@ (31580 <am_hal_adc_control+0x120>)
   31548:	6819      	ldr	r1, [r3, #0]
   3154a:	6011      	str	r1, [r2, #0]
   3154c:	6859      	ldr	r1, [r3, #4]
   3154e:	6051      	str	r1, [r2, #4]
   31550:	6899      	ldr	r1, [r3, #8]
   31552:	6091      	str	r1, [r2, #8]
   31554:	7b1b      	ldrb	r3, [r3, #12]
   31556:	60d3      	str	r3, [r2, #12]
   31558:	2000      	movs	r0, #0
   3155a:	4770      	bx	lr
   3155c:	2007      	movs	r0, #7
   3155e:	4770      	bx	lr
   31560:	2006      	movs	r0, #6
   31562:	4770      	bx	lr
   31564:	2005      	movs	r0, #5
   31566:	4770      	bx	lr
   31568:	2005      	movs	r0, #5
   3156a:	e7ab      	b.n	314c4 <am_hal_adc_control+0x64>
   3156c:	01afafaf 	.word	0x01afafaf
   31570:	c2f6e979 	.word	0xc2f6e979
   31574:	10054ff4 	.word	0x10054ff4
   31578:	40038000 	.word	0x40038000
   3157c:	10054ff0 	.word	0x10054ff0
   31580:	10055000 	.word	0x10055000
   31584:	c3910000 	.word	0xc3910000
   31588:	43910000 	.word	0x43910000
   3158c:	43889333 	.word	0x43889333

00031590 <am_hal_adc_enable>:
   31590:	b328      	cbz	r0, 315de <am_hal_adc_enable+0x4e>
   31592:	6803      	ldr	r3, [r0, #0]
   31594:	4a14      	ldr	r2, [pc, #80]	@ (315e8 <am_hal_adc_enable+0x58>)
   31596:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3159a:	4293      	cmp	r3, r2
   3159c:	d11f      	bne.n	315de <am_hal_adc_enable+0x4e>
   3159e:	78c3      	ldrb	r3, [r0, #3]
   315a0:	f013 0302 	ands.w	r3, r3, #2
   315a4:	d11d      	bne.n	315e2 <am_hal_adc_enable+0x52>
   315a6:	b410      	push	{r4}
   315a8:	4a10      	ldr	r2, [pc, #64]	@ (315ec <am_hal_adc_enable+0x5c>)
   315aa:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
   315ae:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
   315b2:	f8d2 4204 	ldr.w	r4, [r2, #516]	@ 0x204
   315b6:	6813      	ldr	r3, [r2, #0]
   315b8:	f043 0301 	orr.w	r3, r3, #1
   315bc:	6013      	str	r3, [r2, #0]
   315be:	78c3      	ldrb	r3, [r0, #3]
   315c0:	f043 0302 	orr.w	r3, r3, #2
   315c4:	70c3      	strb	r3, [r0, #3]
   315c6:	07a3      	lsls	r3, r4, #30
   315c8:	bf04      	itt	eq
   315ca:	2303      	moveq	r3, #3
   315cc:	f8c2 3208 	streq.w	r3, [r2, #520]	@ 0x208
   315d0:	4b06      	ldr	r3, [pc, #24]	@ (315ec <am_hal_adc_enable+0x5c>)
   315d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   315d6:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
   315da:	2000      	movs	r0, #0
   315dc:	4770      	bx	lr
   315de:	2002      	movs	r0, #2
   315e0:	4770      	bx	lr
   315e2:	2000      	movs	r0, #0
   315e4:	4770      	bx	lr
   315e6:	bf00      	nop
   315e8:	01afafaf 	.word	0x01afafaf
   315ec:	40038000 	.word	0x40038000

000315f0 <am_hal_adc_samples_read>:
   315f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   315f4:	9d07      	ldr	r5, [sp, #28]
   315f6:	2800      	cmp	r0, #0
   315f8:	f000 80a5 	beq.w	31746 <am_hal_adc_samples_read+0x156>
   315fc:	6804      	ldr	r4, [r0, #0]
   315fe:	4891      	ldr	r0, [pc, #580]	@ (31844 <am_hal_adc_samples_read+0x254>)
   31600:	f024 447e 	bic.w	r4, r4, #4261412864	@ 0xfe000000
   31604:	4284      	cmp	r4, r0
   31606:	f040 809e 	bne.w	31746 <am_hal_adc_samples_read+0x156>
   3160a:	2d00      	cmp	r5, #0
   3160c:	f000 8118 	beq.w	31840 <am_hal_adc_samples_read+0x250>
   31610:	2000      	movs	r0, #0
   31612:	681c      	ldr	r4, [r3, #0]
   31614:	6018      	str	r0, [r3, #0]
   31616:	2a00      	cmp	r2, #0
   31618:	f000 80ab 	beq.w	31772 <am_hal_adc_samples_read+0x182>
   3161c:	498a      	ldr	r1, [pc, #552]	@ (31848 <am_hal_adc_samples_read+0x258>)
   3161e:	68c8      	ldr	r0, [r1, #12]
   31620:	6909      	ldr	r1, [r1, #16]
   31622:	f3c1 2103 	ubfx	r1, r1, #8, #4
   31626:	2908      	cmp	r1, #8
   31628:	4987      	ldr	r1, [pc, #540]	@ (31848 <am_hal_adc_samples_read+0x258>)
   3162a:	f3c0 2e03 	ubfx	lr, r0, #8, #4
   3162e:	6949      	ldr	r1, [r1, #20]
   31630:	f1ae 0e08 	sub.w	lr, lr, #8
   31634:	fabe fe8e 	clz	lr, lr
   31638:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   3163c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   31640:	bf08      	it	eq
   31642:	f04e 0e02 	orreq.w	lr, lr, #2
   31646:	2908      	cmp	r1, #8
   31648:	497f      	ldr	r1, [pc, #508]	@ (31848 <am_hal_adc_samples_read+0x258>)
   3164a:	6989      	ldr	r1, [r1, #24]
   3164c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   31650:	bf08      	it	eq
   31652:	f04e 0e04 	orreq.w	lr, lr, #4
   31656:	2908      	cmp	r1, #8
   31658:	497b      	ldr	r1, [pc, #492]	@ (31848 <am_hal_adc_samples_read+0x258>)
   3165a:	69c9      	ldr	r1, [r1, #28]
   3165c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   31660:	bf08      	it	eq
   31662:	f04e 0e08 	orreq.w	lr, lr, #8
   31666:	2908      	cmp	r1, #8
   31668:	4977      	ldr	r1, [pc, #476]	@ (31848 <am_hal_adc_samples_read+0x258>)
   3166a:	6a09      	ldr	r1, [r1, #32]
   3166c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   31670:	bf08      	it	eq
   31672:	f04e 0e10 	orreq.w	lr, lr, #16
   31676:	2908      	cmp	r1, #8
   31678:	4973      	ldr	r1, [pc, #460]	@ (31848 <am_hal_adc_samples_read+0x258>)
   3167a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
   3167c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   31680:	bf08      	it	eq
   31682:	f04e 0e20 	orreq.w	lr, lr, #32
   31686:	2908      	cmp	r1, #8
   31688:	496f      	ldr	r1, [pc, #444]	@ (31848 <am_hal_adc_samples_read+0x258>)
   3168a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
   3168c:	f3c1 2103 	ubfx	r1, r1, #8, #4
   31690:	bf08      	it	eq
   31692:	f04e 0e40 	orreq.w	lr, lr, #64	@ 0x40
   31696:	2908      	cmp	r1, #8
   31698:	496c      	ldr	r1, [pc, #432]	@ (3184c <am_hal_adc_samples_read+0x25c>)
   3169a:	7809      	ldrb	r1, [r1, #0]
   3169c:	bf08      	it	eq
   3169e:	f04e 0e80 	orreq.w	lr, lr, #128	@ 0x80
   316a2:	2900      	cmp	r1, #0
   316a4:	d052      	beq.n	3174c <am_hal_adc_samples_read+0x15c>
   316a6:	eddf 3a6a 	vldr	s7, [pc, #424]	@ 31850 <am_hal_adc_samples_read+0x260>
   316aa:	ed9f 4a6a 	vldr	s8, [pc, #424]	@ 31854 <am_hal_adc_samples_read+0x264>
   316ae:	eddf 4a6a 	vldr	s9, [pc, #424]	@ 31858 <am_hal_adc_samples_read+0x268>
   316b2:	ed9f 5a6a 	vldr	s10, [pc, #424]	@ 3185c <am_hal_adc_samples_read+0x26c>
   316b6:	4e6a      	ldr	r6, [pc, #424]	@ (31860 <am_hal_adc_samples_read+0x270>)
   316b8:	f105 0108 	add.w	r1, r5, #8
   316bc:	1f10      	subs	r0, r2, #4
   316be:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
   316c2:	f240 45a6 	movw	r5, #1190	@ 0x4a6
   316c6:	f850 2f04 	ldr.w	r2, [r0, #4]!
   316ca:	f3c2 7702 	ubfx	r7, r2, #28, #3
   316ce:	f3c2 0213 	ubfx	r2, r2, #0, #20
   316d2:	ea4f 1c92 	mov.w	ip, r2, lsr #6
   316d6:	fa2e f807 	lsr.w	r8, lr, r7
   316da:	fb05 fc0c 	mul.w	ip, r5, ip
   316de:	f018 0f01 	tst.w	r8, #1
   316e2:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
   316e6:	ea4f 1292 	mov.w	r2, r2, lsr #6
   316ea:	d120      	bne.n	3172e <am_hal_adc_samples_read+0x13e>
   316ec:	ed96 6a01 	vldr	s12, [r6, #4]
   316f0:	edd6 6a00 	vldr	s13, [r6]
   316f4:	ee07 ca90 	vmov	s15, ip
   316f8:	ee35 6ac6 	vsub.f32	s12, s11, s12
   316fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   31700:	f640 72ff 	movw	r2, #4095	@ 0xfff
   31704:	ee87 7a86 	vdiv.f32	s14, s15, s12
   31708:	ee66 7aa3 	vmul.f32	s15, s13, s7
   3170c:	ee77 7a67 	vsub.f32	s15, s14, s15
   31710:	ee67 7a84 	vmul.f32	s15, s15, s8
   31714:	ee87 7aa4 	vdiv.f32	s14, s15, s9
   31718:	eeb4 7ac5 	vcmpe.f32	s14, s10
   3171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   31720:	dc05      	bgt.n	3172e <am_hal_adc_samples_read+0x13e>
   31722:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   31726:	ee17 2a90 	vmov	r2, s15
   3172a:	f3c2 020b 	ubfx	r2, r2, #0, #12
   3172e:	e941 2702 	strd	r2, r7, [r1, #-8]
   31732:	681a      	ldr	r2, [r3, #0]
   31734:	3201      	adds	r2, #1
   31736:	42a2      	cmp	r2, r4
   31738:	f101 0108 	add.w	r1, r1, #8
   3173c:	601a      	str	r2, [r3, #0]
   3173e:	d3c2      	bcc.n	316c6 <am_hal_adc_samples_read+0xd6>
   31740:	2000      	movs	r0, #0
   31742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   31746:	2002      	movs	r0, #2
   31748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3174c:	f105 0108 	add.w	r1, r5, #8
   31750:	1f10      	subs	r0, r2, #4
   31752:	f850 2f04 	ldr.w	r2, [r0, #4]!
   31756:	3108      	adds	r1, #8
   31758:	f3c2 158d 	ubfx	r5, r2, #6, #14
   3175c:	f3c2 7202 	ubfx	r2, r2, #28, #3
   31760:	e941 5204 	strd	r5, r2, [r1, #-16]
   31764:	681a      	ldr	r2, [r3, #0]
   31766:	3201      	adds	r2, #1
   31768:	4294      	cmp	r4, r2
   3176a:	601a      	str	r2, [r3, #0]
   3176c:	d8f1      	bhi.n	31752 <am_hal_adc_samples_read+0x162>
   3176e:	2000      	movs	r0, #0
   31770:	e7e7      	b.n	31742 <am_hal_adc_samples_read+0x152>
   31772:	4a36      	ldr	r2, [pc, #216]	@ (3184c <am_hal_adc_samples_read+0x25c>)
   31774:	ed9f 4a36 	vldr	s8, [pc, #216]	@ 31850 <am_hal_adc_samples_read+0x260>
   31778:	f892 c000 	ldrb.w	ip, [r2]
   3177c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 31854 <am_hal_adc_samples_read+0x264>
   31780:	ed9f 5a35 	vldr	s10, [pc, #212]	@ 31858 <am_hal_adc_samples_read+0x268>
   31784:	eddf 5a35 	vldr	s11, [pc, #212]	@ 3185c <am_hal_adc_samples_read+0x26c>
   31788:	4f2f      	ldr	r7, [pc, #188]	@ (31848 <am_hal_adc_samples_read+0x258>)
   3178a:	4e36      	ldr	r6, [pc, #216]	@ (31864 <am_hal_adc_samples_read+0x274>)
   3178c:	f8df e0d0 	ldr.w	lr, [pc, #208]	@ 31860 <am_hal_adc_samples_read+0x270>
   31790:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 31868 <am_hal_adc_samples_read+0x278>
   31794:	f105 0008 	add.w	r0, r5, #8
   31798:	e00e      	b.n	317b8 <am_hal_adc_samples_read+0x1c8>
   3179a:	f3c5 0213 	ubfx	r2, r5, #0, #20
   3179e:	f840 2c08 	str.w	r2, [r0, #-8]
   317a2:	681a      	ldr	r2, [r3, #0]
   317a4:	f015 6f7f 	tst.w	r5, #267386880	@ 0xff00000
   317a8:	f102 0201 	add.w	r2, r2, #1
   317ac:	601a      	str	r2, [r3, #0]
   317ae:	d0c7      	beq.n	31740 <am_hal_adc_samples_read+0x150>
   317b0:	42a2      	cmp	r2, r4
   317b2:	f100 0008 	add.w	r0, r0, #8
   317b6:	d2c3      	bcs.n	31740 <am_hal_adc_samples_read+0x150>
   317b8:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
   317ba:	f3c5 7902 	ubfx	r9, r5, #28, #3
   317be:	eb09 0206 	add.w	r2, r9, r6
   317c2:	0092      	lsls	r2, r2, #2
   317c4:	6812      	ldr	r2, [r2, #0]
   317c6:	f1bc 0f00 	cmp.w	ip, #0
   317ca:	d030      	beq.n	3182e <am_hal_adc_samples_read+0x23e>
   317cc:	f3c2 2203 	ubfx	r2, r2, #8, #4
   317d0:	2a08      	cmp	r2, #8
   317d2:	d02c      	beq.n	3182e <am_hal_adc_samples_read+0x23e>
   317d4:	f3c5 128d 	ubfx	r2, r5, #6, #14
   317d8:	f240 49a6 	movw	r9, #1190	@ 0x4a6
   317dc:	edde 7a01 	vldr	s15, [lr, #4]
   317e0:	ed9e 7a00 	vldr	s14, [lr]
   317e4:	fb09 f202 	mul.w	r2, r9, r2
   317e8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
   317ec:	0b12      	lsrs	r2, r2, #12
   317ee:	ee36 6a67 	vsub.f32	s12, s12, s15
   317f2:	ee07 2a90 	vmov	s15, r2
   317f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   317fa:	ee67 6a04 	vmul.f32	s13, s14, s8
   317fe:	ee87 7a86 	vdiv.f32	s14, s15, s12
   31802:	ee37 7a66 	vsub.f32	s14, s14, s13
   31806:	ee27 7a24 	vmul.f32	s14, s14, s9
   3180a:	eec7 7a05 	vdiv.f32	s15, s14, s10
   3180e:	eef4 7ae5 	vcmpe.f32	s15, s11
   31812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   31816:	dc11      	bgt.n	3183c <am_hal_adc_samples_read+0x24c>
   31818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   3181c:	ee17 2a90 	vmov	r2, s15
   31820:	0192      	lsls	r2, r2, #6
   31822:	f3c2 0211 	ubfx	r2, r2, #0, #18
   31826:	f362 0513 	bfi	r5, r2, #0, #20
   3182a:	f3c5 7902 	ubfx	r9, r5, #28, #3
   3182e:	f840 9c04 	str.w	r9, [r0, #-4]
   31832:	2900      	cmp	r1, #0
   31834:	d1b1      	bne.n	3179a <am_hal_adc_samples_read+0x1aa>
   31836:	f3c5 128d 	ubfx	r2, r5, #6, #14
   3183a:	e7b0      	b.n	3179e <am_hal_adc_samples_read+0x1ae>
   3183c:	4642      	mov	r2, r8
   3183e:	e7f2      	b.n	31826 <am_hal_adc_samples_read+0x236>
   31840:	2006      	movs	r0, #6
   31842:	e781      	b.n	31748 <am_hal_adc_samples_read+0x158>
   31844:	01afafaf 	.word	0x01afafaf
   31848:	40038000 	.word	0x40038000
   3184c:	10054fec 	.word	0x10054fec
   31850:	447a0000 	.word	0x447a0000
   31854:	45800000 	.word	0x45800000
   31858:	4494c000 	.word	0x4494c000
   3185c:	457ff000 	.word	0x457ff000
   31860:	10054ff4 	.word	0x10054ff4
   31864:	1000e003 	.word	0x1000e003
   31868:	0003ffc0 	.word	0x0003ffc0

0003186c <am_hal_adc_sw_trigger>:
   3186c:	b150      	cbz	r0, 31884 <am_hal_adc_sw_trigger+0x18>
   3186e:	6803      	ldr	r3, [r0, #0]
   31870:	4a05      	ldr	r2, [pc, #20]	@ (31888 <am_hal_adc_sw_trigger+0x1c>)
   31872:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   31876:	4293      	cmp	r3, r2
   31878:	d104      	bne.n	31884 <am_hal_adc_sw_trigger+0x18>
   3187a:	4b04      	ldr	r3, [pc, #16]	@ (3188c <am_hal_adc_sw_trigger+0x20>)
   3187c:	2237      	movs	r2, #55	@ 0x37
   3187e:	609a      	str	r2, [r3, #8]
   31880:	2000      	movs	r0, #0
   31882:	4770      	bx	lr
   31884:	2002      	movs	r0, #2
   31886:	4770      	bx	lr
   31888:	01afafaf 	.word	0x01afafaf
   3188c:	40038000 	.word	0x40038000

00031890 <am_hal_adc_power_control>:
   31890:	2800      	cmp	r0, #0
   31892:	f000 8081 	beq.w	31998 <am_hal_adc_power_control+0x108>
   31896:	b510      	push	{r4, lr}
   31898:	6803      	ldr	r3, [r0, #0]
   3189a:	4604      	mov	r4, r0
   3189c:	484b      	ldr	r0, [pc, #300]	@ (319cc <am_hal_adc_power_control+0x13c>)
   3189e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   318a2:	4283      	cmp	r3, r0
   318a4:	b082      	sub	sp, #8
   318a6:	d129      	bne.n	318fc <am_hal_adc_power_control+0x6c>
   318a8:	2900      	cmp	r1, #0
   318aa:	d02d      	beq.n	31908 <am_hal_adc_power_control+0x78>
   318ac:	3901      	subs	r1, #1
   318ae:	2901      	cmp	r1, #1
   318b0:	d827      	bhi.n	31902 <am_hal_adc_power_control+0x72>
   318b2:	b1ea      	cbz	r2, 318f0 <am_hal_adc_power_control+0x60>
   318b4:	4b46      	ldr	r3, [pc, #280]	@ (319d0 <am_hal_adc_power_control+0x140>)
   318b6:	68d9      	ldr	r1, [r3, #12]
   318b8:	6161      	str	r1, [r4, #20]
   318ba:	6919      	ldr	r1, [r3, #16]
   318bc:	61a1      	str	r1, [r4, #24]
   318be:	6959      	ldr	r1, [r3, #20]
   318c0:	61e1      	str	r1, [r4, #28]
   318c2:	6999      	ldr	r1, [r3, #24]
   318c4:	6221      	str	r1, [r4, #32]
   318c6:	69d9      	ldr	r1, [r3, #28]
   318c8:	6261      	str	r1, [r4, #36]	@ 0x24
   318ca:	6a19      	ldr	r1, [r3, #32]
   318cc:	62a1      	str	r1, [r4, #40]	@ 0x28
   318ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
   318d0:	62e1      	str	r1, [r4, #44]	@ 0x2c
   318d2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
   318d4:	6321      	str	r1, [r4, #48]	@ 0x30
   318d6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
   318d8:	6361      	str	r1, [r4, #52]	@ 0x34
   318da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
   318dc:	63a1      	str	r1, [r4, #56]	@ 0x38
   318de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
   318e0:	63e1      	str	r1, [r4, #60]	@ 0x3c
   318e2:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
   318e6:	6421      	str	r1, [r4, #64]	@ 0x40
   318e8:	681b      	ldr	r3, [r3, #0]
   318ea:	6123      	str	r3, [r4, #16]
   318ec:	2201      	movs	r2, #1
   318ee:	7322      	strb	r2, [r4, #12]
   318f0:	200d      	movs	r0, #13
   318f2:	f000 ffd7 	bl	328a4 <am_hal_pwrctrl_periph_disable>
   318f6:	2000      	movs	r0, #0
   318f8:	b002      	add	sp, #8
   318fa:	bd10      	pop	{r4, pc}
   318fc:	2002      	movs	r0, #2
   318fe:	b002      	add	sp, #8
   31900:	bd10      	pop	{r4, pc}
   31902:	2006      	movs	r0, #6
   31904:	b002      	add	sp, #8
   31906:	bd10      	pop	{r4, pc}
   31908:	2a00      	cmp	r2, #0
   3190a:	d047      	beq.n	3199c <am_hal_adc_power_control+0x10c>
   3190c:	7b23      	ldrb	r3, [r4, #12]
   3190e:	2b00      	cmp	r3, #0
   31910:	d05a      	beq.n	319c8 <am_hal_adc_power_control+0x138>
   31912:	200d      	movs	r0, #13
   31914:	9101      	str	r1, [sp, #4]
   31916:	f000 fef5 	bl	32704 <am_hal_pwrctrl_periph_enable>
   3191a:	4b2d      	ldr	r3, [pc, #180]	@ (319d0 <am_hal_adc_power_control+0x140>)
   3191c:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
   31920:	f240 30ff 	movw	r0, #1023	@ 0x3ff
   31924:	f360 2293 	bfi	r2, r0, #10, #10
   31928:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
   3192c:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
   31930:	f360 0209 	bfi	r2, r0, #0, #10
   31934:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
   31938:	6962      	ldr	r2, [r4, #20]
   3193a:	60da      	str	r2, [r3, #12]
   3193c:	69a2      	ldr	r2, [r4, #24]
   3193e:	611a      	str	r2, [r3, #16]
   31940:	69e2      	ldr	r2, [r4, #28]
   31942:	615a      	str	r2, [r3, #20]
   31944:	6a22      	ldr	r2, [r4, #32]
   31946:	619a      	str	r2, [r3, #24]
   31948:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   3194a:	61da      	str	r2, [r3, #28]
   3194c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
   3194e:	621a      	str	r2, [r3, #32]
   31950:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   31952:	625a      	str	r2, [r3, #36]	@ 0x24
   31954:	6b22      	ldr	r2, [r4, #48]	@ 0x30
   31956:	629a      	str	r2, [r3, #40]	@ 0x28
   31958:	6b62      	ldr	r2, [r4, #52]	@ 0x34
   3195a:	641a      	str	r2, [r3, #64]	@ 0x40
   3195c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
   3195e:	62da      	str	r2, [r3, #44]	@ 0x2c
   31960:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
   31962:	9901      	ldr	r1, [sp, #4]
   31964:	631a      	str	r2, [r3, #48]	@ 0x30
   31966:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
   3196a:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
   3196e:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
   31972:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
   31976:	6921      	ldr	r1, [r4, #16]
   31978:	6019      	str	r1, [r3, #0]
   3197a:	0792      	lsls	r2, r2, #30
   3197c:	d102      	bne.n	31984 <am_hal_adc_power_control+0xf4>
   3197e:	2203      	movs	r2, #3
   31980:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
   31984:	4a12      	ldr	r2, [pc, #72]	@ (319d0 <am_hal_adc_power_control+0x140>)
   31986:	f8c2 0200 	str.w	r0, [r2, #512]	@ 0x200
   3198a:	2300      	movs	r3, #0
   3198c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
   3198e:	f8c2 1200 	str.w	r1, [r2, #512]	@ 0x200
   31992:	4618      	mov	r0, r3
   31994:	7323      	strb	r3, [r4, #12]
   31996:	e7b2      	b.n	318fe <am_hal_adc_power_control+0x6e>
   31998:	2002      	movs	r0, #2
   3199a:	4770      	bx	lr
   3199c:	200d      	movs	r0, #13
   3199e:	9201      	str	r2, [sp, #4]
   319a0:	f000 feb0 	bl	32704 <am_hal_pwrctrl_periph_enable>
   319a4:	4b0a      	ldr	r3, [pc, #40]	@ (319d0 <am_hal_adc_power_control+0x140>)
   319a6:	9a01      	ldr	r2, [sp, #4]
   319a8:	f8d3 4118 	ldr.w	r4, [r3, #280]	@ 0x118
   319ac:	f240 31ff 	movw	r1, #1023	@ 0x3ff
   319b0:	f361 2493 	bfi	r4, r1, #10, #10
   319b4:	f8c3 4118 	str.w	r4, [r3, #280]	@ 0x118
   319b8:	4610      	mov	r0, r2
   319ba:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
   319be:	f361 0209 	bfi	r2, r1, #0, #10
   319c2:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
   319c6:	e79a      	b.n	318fe <am_hal_adc_power_control+0x6e>
   319c8:	2007      	movs	r0, #7
   319ca:	e798      	b.n	318fe <am_hal_adc_power_control+0x6e>
   319cc:	01afafaf 	.word	0x01afafaf
   319d0:	40038000 	.word	0x40038000

000319d4 <am_hal_cachectrl_config>:
   319d4:	b530      	push	{r4, r5, lr}
   319d6:	b083      	sub	sp, #12
   319d8:	4604      	mov	r4, r0
   319da:	f000 faf1 	bl	31fc0 <am_hal_interrupt_master_disable>
   319de:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
   319e2:	9001      	str	r0, [sp, #4]
   319e4:	682b      	ldr	r3, [r5, #0]
   319e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
   319ea:	602b      	str	r3, [r5, #0]
   319ec:	9801      	ldr	r0, [sp, #4]
   319ee:	f000 faeb 	bl	31fc8 <am_hal_interrupt_master_set>
   319f2:	7863      	ldrb	r3, [r4, #1]
   319f4:	7822      	ldrb	r2, [r4, #0]
   319f6:	78a1      	ldrb	r1, [r4, #2]
   319f8:	021b      	lsls	r3, r3, #8
   319fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
   319fe:	0112      	lsls	r2, r2, #4
   31a00:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   31a04:	b2d2      	uxtb	r2, r2
   31a06:	4313      	orrs	r3, r2
   31a08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
   31a0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
   31a10:	2000      	movs	r0, #0
   31a12:	602b      	str	r3, [r5, #0]
   31a14:	b003      	add	sp, #12
   31a16:	bd30      	pop	{r4, r5, pc}

00031a18 <am_hal_cachectrl_enable>:
   31a18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
   31a1c:	2000      	movs	r0, #0
   31a1e:	681a      	ldr	r2, [r3, #0]
   31a20:	f042 0201 	orr.w	r2, r2, #1
   31a24:	601a      	str	r2, [r3, #0]
   31a26:	689a      	ldr	r2, [r3, #8]
   31a28:	f042 0201 	orr.w	r2, r2, #1
   31a2c:	609a      	str	r2, [r3, #8]
   31a2e:	4770      	bx	lr

00031a30 <am_hal_daxi_config>:
   31a30:	b510      	push	{r4, lr}
   31a32:	b082      	sub	sp, #8
   31a34:	4604      	mov	r4, r0
   31a36:	f000 fac3 	bl	31fc0 <am_hal_interrupt_master_disable>
   31a3a:	9000      	str	r0, [sp, #0]
   31a3c:	f000 fac0 	bl	31fc0 <am_hal_interrupt_master_disable>
   31a40:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
   31a44:	9001      	str	r0, [sp, #4]
   31a46:	6d13      	ldr	r3, [r2, #80]	@ 0x50
   31a48:	0759      	lsls	r1, r3, #29
   31a4a:	d410      	bmi.n	31a6e <am_hal_daxi_config+0x3e>
   31a4c:	f3bf 8f4f 	dsb	sy
   31a50:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   31a52:	491b      	ldr	r1, [pc, #108]	@ (31ac0 <am_hal_daxi_config+0x90>)
   31a54:	f043 0301 	orr.w	r3, r3, #1
   31a58:	6553      	str	r3, [r2, #84]	@ 0x54
   31a5a:	680b      	ldr	r3, [r1, #0]
   31a5c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   31a5e:	075b      	lsls	r3, r3, #29
   31a60:	d5fc      	bpl.n	31a5c <am_hal_daxi_config+0x2c>
   31a62:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   31a64:	4916      	ldr	r1, [pc, #88]	@ (31ac0 <am_hal_daxi_config+0x90>)
   31a66:	f043 0302 	orr.w	r3, r3, #2
   31a6a:	6553      	str	r3, [r2, #84]	@ 0x54
   31a6c:	680b      	ldr	r3, [r1, #0]
   31a6e:	9801      	ldr	r0, [sp, #4]
   31a70:	f000 faaa 	bl	31fc8 <am_hal_interrupt_master_set>
   31a74:	b1fc      	cbz	r4, 31ab6 <am_hal_daxi_config+0x86>
   31a76:	7923      	ldrb	r3, [r4, #4]
   31a78:	78e1      	ldrb	r1, [r4, #3]
   31a7a:	7860      	ldrb	r0, [r4, #1]
   31a7c:	78a2      	ldrb	r2, [r4, #2]
   31a7e:	f003 0301 	and.w	r3, r3, #1
   31a82:	0209      	lsls	r1, r1, #8
   31a84:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
   31a88:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
   31a8c:	0412      	lsls	r2, r2, #16
   31a8e:	430b      	orrs	r3, r1
   31a90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
   31a94:	f402 12f8 	and.w	r2, r2, #2031616	@ 0x1f0000
   31a98:	490a      	ldr	r1, [pc, #40]	@ (31ac4 <am_hal_daxi_config+0x94>)
   31a9a:	4313      	orrs	r3, r2
   31a9c:	6503      	str	r3, [r0, #80]	@ 0x50
   31a9e:	6820      	ldr	r0, [r4, #0]
   31aa0:	6008      	str	r0, [r1, #0]
   31aa2:	7923      	ldrb	r3, [r4, #4]
   31aa4:	710b      	strb	r3, [r1, #4]
   31aa6:	4b06      	ldr	r3, [pc, #24]	@ (31ac0 <am_hal_daxi_config+0x90>)
   31aa8:	681b      	ldr	r3, [r3, #0]
   31aaa:	9800      	ldr	r0, [sp, #0]
   31aac:	f000 fa8c 	bl	31fc8 <am_hal_interrupt_master_set>
   31ab0:	2000      	movs	r0, #0
   31ab2:	b002      	add	sp, #8
   31ab4:	bd10      	pop	{r4, pc}
   31ab6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
   31aba:	2206      	movs	r2, #6
   31abc:	651a      	str	r2, [r3, #80]	@ 0x50
   31abe:	e7f2      	b.n	31aa6 <am_hal_daxi_config+0x76>
   31ac0:	47ff0000 	.word	0x47ff0000
   31ac4:	1000cb6c 	.word	0x1000cb6c

00031ac8 <am_hal_daxi_control>:
   31ac8:	b500      	push	{lr}
   31aca:	b085      	sub	sp, #20
   31acc:	2803      	cmp	r0, #3
   31ace:	d86a      	bhi.n	31ba6 <am_hal_daxi_control+0xde>
   31ad0:	e8df f000 	tbb	[pc, r0]
   31ad4:	02093555 	.word	0x02093555
   31ad8:	4834      	ldr	r0, [pc, #208]	@ (31bac <am_hal_daxi_control+0xe4>)
   31ada:	f7ff ffa9 	bl	31a30 <am_hal_daxi_config>
   31ade:	2000      	movs	r0, #0
   31ae0:	b005      	add	sp, #20
   31ae2:	f85d fb04 	ldr.w	pc, [sp], #4
   31ae6:	f000 fa6b 	bl	31fc0 <am_hal_interrupt_master_disable>
   31aea:	9002      	str	r0, [sp, #8]
   31aec:	f000 fa68 	bl	31fc0 <am_hal_interrupt_master_disable>
   31af0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
   31af4:	9003      	str	r0, [sp, #12]
   31af6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
   31af8:	0759      	lsls	r1, r3, #29
   31afa:	d410      	bmi.n	31b1e <am_hal_daxi_control+0x56>
   31afc:	f3bf 8f4f 	dsb	sy
   31b00:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   31b02:	492b      	ldr	r1, [pc, #172]	@ (31bb0 <am_hal_daxi_control+0xe8>)
   31b04:	f043 0301 	orr.w	r3, r3, #1
   31b08:	6553      	str	r3, [r2, #84]	@ 0x54
   31b0a:	680b      	ldr	r3, [r1, #0]
   31b0c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   31b0e:	075b      	lsls	r3, r3, #29
   31b10:	d5fc      	bpl.n	31b0c <am_hal_daxi_control+0x44>
   31b12:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   31b14:	4926      	ldr	r1, [pc, #152]	@ (31bb0 <am_hal_daxi_control+0xe8>)
   31b16:	f043 0302 	orr.w	r3, r3, #2
   31b1a:	6553      	str	r3, [r2, #84]	@ 0x54
   31b1c:	680b      	ldr	r3, [r1, #0]
   31b1e:	9803      	ldr	r0, [sp, #12]
   31b20:	f000 fa52 	bl	31fc8 <am_hal_interrupt_master_set>
   31b24:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
   31b28:	2106      	movs	r1, #6
   31b2a:	4b21      	ldr	r3, [pc, #132]	@ (31bb0 <am_hal_daxi_control+0xe8>)
   31b2c:	6511      	str	r1, [r2, #80]	@ 0x50
   31b2e:	681b      	ldr	r3, [r3, #0]
   31b30:	9802      	ldr	r0, [sp, #8]
   31b32:	f000 fa49 	bl	31fc8 <am_hal_interrupt_master_set>
   31b36:	2000      	movs	r0, #0
   31b38:	b005      	add	sp, #20
   31b3a:	f85d fb04 	ldr.w	pc, [sp], #4
   31b3e:	f000 fa3f 	bl	31fc0 <am_hal_interrupt_master_disable>
   31b42:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
   31b46:	9001      	str	r0, [sp, #4]
   31b48:	6d13      	ldr	r3, [r2, #80]	@ 0x50
   31b4a:	0758      	lsls	r0, r3, #29
   31b4c:	d410      	bmi.n	31b70 <am_hal_daxi_control+0xa8>
   31b4e:	f3bf 8f4f 	dsb	sy
   31b52:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   31b54:	4916      	ldr	r1, [pc, #88]	@ (31bb0 <am_hal_daxi_control+0xe8>)
   31b56:	f043 0301 	orr.w	r3, r3, #1
   31b5a:	6553      	str	r3, [r2, #84]	@ 0x54
   31b5c:	680b      	ldr	r3, [r1, #0]
   31b5e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   31b60:	0759      	lsls	r1, r3, #29
   31b62:	d5fc      	bpl.n	31b5e <am_hal_daxi_control+0x96>
   31b64:	6d53      	ldr	r3, [r2, #84]	@ 0x54
   31b66:	4912      	ldr	r1, [pc, #72]	@ (31bb0 <am_hal_daxi_control+0xe8>)
   31b68:	f043 0302 	orr.w	r3, r3, #2
   31b6c:	6553      	str	r3, [r2, #84]	@ 0x54
   31b6e:	680b      	ldr	r3, [r1, #0]
   31b70:	9801      	ldr	r0, [sp, #4]
   31b72:	f000 fa29 	bl	31fc8 <am_hal_interrupt_master_set>
   31b76:	2000      	movs	r0, #0
   31b78:	b005      	add	sp, #20
   31b7a:	f85d fb04 	ldr.w	pc, [sp], #4
   31b7e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
   31b82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
   31b84:	f3c2 0080 	ubfx	r0, r2, #2, #1
   31b88:	0752      	lsls	r2, r2, #29
   31b8a:	d40a      	bmi.n	31ba2 <am_hal_daxi_control+0xda>
   31b8c:	f3bf 8f4f 	dsb	sy
   31b90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
   31b92:	4907      	ldr	r1, [pc, #28]	@ (31bb0 <am_hal_daxi_control+0xe8>)
   31b94:	f042 0202 	orr.w	r2, r2, #2
   31b98:	655a      	str	r2, [r3, #84]	@ 0x54
   31b9a:	680b      	ldr	r3, [r1, #0]
   31b9c:	b005      	add	sp, #20
   31b9e:	f85d fb04 	ldr.w	pc, [sp], #4
   31ba2:	2000      	movs	r0, #0
   31ba4:	e79c      	b.n	31ae0 <am_hal_daxi_control+0x18>
   31ba6:	2006      	movs	r0, #6
   31ba8:	e79a      	b.n	31ae0 <am_hal_daxi_control+0x18>
   31baa:	bf00      	nop
   31bac:	1000cb6c 	.word	0x1000cb6c
   31bb0:	47ff0000 	.word	0x47ff0000

00031bb4 <am_hal_clkgen_control>:
   31bb4:	b570      	push	{r4, r5, r6, lr}
   31bb6:	460c      	mov	r4, r1
   31bb8:	2814      	cmp	r0, #20
   31bba:	f200 814f 	bhi.w	31e5c <am_hal_clkgen_control+0x2a8>
   31bbe:	e8df f010 	tbh	[pc, r0, lsl #1]
   31bc2:	013d      	.short	0x013d
   31bc4:	00ae00b9 	.word	0x00ae00b9
   31bc8:	011c00a6 	.word	0x011c00a6
   31bcc:	00c900c1 	.word	0x00c900c1
   31bd0:	0091009c 	.word	0x0091009c
   31bd4:	007d0087 	.word	0x007d0087
   31bd8:	00680073 	.word	0x00680073
   31bdc:	0053005d 	.word	0x0053005d
   31be0:	003f0049 	.word	0x003f0049
   31be4:	002a0035 	.word	0x002a0035
   31be8:	0015001f 	.word	0x0015001f
   31bec:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   31bf0:	2000      	movs	r0, #0
   31bf2:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
   31bf6:	f043 0303 	orr.w	r3, r3, #3
   31bfa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
   31bfe:	bd70      	pop	{r4, r5, r6, pc}
   31c00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31c04:	2102      	movs	r1, #2
   31c06:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   31c0a:	f361 0201 	bfi	r2, r1, #0, #2
   31c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   31c12:	2000      	movs	r0, #0
   31c14:	bd70      	pop	{r4, r5, r6, pc}
   31c16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31c1a:	2101      	movs	r1, #1
   31c1c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   31c20:	f361 0201 	bfi	r2, r1, #0, #2
   31c24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   31c28:	2000      	movs	r0, #0
   31c2a:	bd70      	pop	{r4, r5, r6, pc}
   31c2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31c30:	2000      	movs	r0, #0
   31c32:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   31c36:	f36f 0201 	bfc	r2, #0, #2
   31c3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   31c3e:	bd70      	pop	{r4, r5, r6, pc}
   31c40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31c44:	2000      	movs	r0, #0
   31c46:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   31c4a:	f36f 02c3 	bfc	r2, #3, #1
   31c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   31c52:	bd70      	pop	{r4, r5, r6, pc}
   31c54:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   31c58:	2000      	movs	r0, #0
   31c5a:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
   31c5e:	f043 0308 	orr.w	r3, r3, #8
   31c62:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
   31c66:	bd70      	pop	{r4, r5, r6, pc}
   31c68:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   31c6c:	2000      	movs	r0, #0
   31c6e:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
   31c72:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
   31c76:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
   31c7a:	bd70      	pop	{r4, r5, r6, pc}
   31c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31c80:	2102      	movs	r1, #2
   31c82:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   31c86:	f361 1205 	bfi	r2, r1, #4, #2
   31c8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   31c8e:	2000      	movs	r0, #0
   31c90:	bd70      	pop	{r4, r5, r6, pc}
   31c92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31c96:	2101      	movs	r1, #1
   31c98:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   31c9c:	f361 1205 	bfi	r2, r1, #4, #2
   31ca0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   31ca4:	2000      	movs	r0, #0
   31ca6:	bd70      	pop	{r4, r5, r6, pc}
   31ca8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31cac:	2000      	movs	r0, #0
   31cae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   31cb2:	f36f 1205 	bfc	r2, #4, #2
   31cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   31cba:	bd70      	pop	{r4, r5, r6, pc}
   31cbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31cc0:	2000      	movs	r0, #0
   31cc2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
   31cc6:	f36f 12c7 	bfc	r2, #7, #1
   31cca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
   31cce:	bd70      	pop	{r4, r5, r6, pc}
   31cd0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   31cd4:	2000      	movs	r0, #0
   31cd6:	f8d2 3084 	ldr.w	r3, [r2, #132]	@ 0x84
   31cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   31cde:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
   31ce2:	bd70      	pop	{r4, r5, r6, pc}
   31ce4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
   31cea:	0690      	lsls	r0, r2, #26
   31cec:	d50d      	bpl.n	31d0a <am_hal_clkgen_control+0x156>
   31cee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
   31cf0:	f36f 1245 	bfc	r2, #5, #1
   31cf4:	645a      	str	r2, [r3, #68]	@ 0x44
   31cf6:	2000      	movs	r0, #0
   31cf8:	bd70      	pop	{r4, r5, r6, pc}
   31cfa:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   31cfe:	6c53      	ldr	r3, [r2, #68]	@ 0x44
   31d00:	069d      	lsls	r5, r3, #26
   31d02:	f3c3 1440 	ubfx	r4, r3, #5, #1
   31d06:	f140 80ab 	bpl.w	31e60 <am_hal_clkgen_control+0x2ac>
   31d0a:	2000      	movs	r0, #0
   31d0c:	bd70      	pop	{r4, r5, r6, pc}
   31d0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31d12:	2000      	movs	r0, #0
   31d14:	6a1a      	ldr	r2, [r3, #32]
   31d16:	f36f 0200 	bfc	r2, #0, #1
   31d1a:	621a      	str	r2, [r3, #32]
   31d1c:	bd70      	pop	{r4, r5, r6, pc}
   31d1e:	2900      	cmp	r1, #0
   31d20:	f000 80a7 	beq.w	31e72 <am_hal_clkgen_control+0x2be>
   31d24:	680b      	ldr	r3, [r1, #0]
   31d26:	f043 0301 	orr.w	r3, r3, #1
   31d2a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   31d2e:	2000      	movs	r0, #0
   31d30:	6213      	str	r3, [r2, #32]
   31d32:	bd70      	pop	{r4, r5, r6, pc}
   31d34:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   31d38:	2000      	movs	r0, #0
   31d3a:	68d3      	ldr	r3, [r2, #12]
   31d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   31d40:	60d3      	str	r3, [r2, #12]
   31d42:	bd70      	pop	{r4, r5, r6, pc}
   31d44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31d48:	2000      	movs	r0, #0
   31d4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
   31d4c:	f36f 0200 	bfc	r2, #0, #1
   31d50:	649a      	str	r2, [r3, #72]	@ 0x48
   31d52:	bd70      	pop	{r4, r5, r6, pc}
   31d54:	2900      	cmp	r1, #0
   31d56:	f000 8081 	beq.w	31e5c <am_hal_clkgen_control+0x2a8>
   31d5a:	680b      	ldr	r3, [r1, #0]
   31d5c:	2b01      	cmp	r3, #1
   31d5e:	d17d      	bne.n	31e5c <am_hal_clkgen_control+0x2a8>
   31d60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31d64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
   31d66:	f36f 0200 	bfc	r2, #0, #1
   31d6a:	649a      	str	r2, [r3, #72]	@ 0x48
   31d6c:	7c0b      	ldrb	r3, [r1, #16]
   31d6e:	68ca      	ldr	r2, [r1, #12]
   31d70:	07d9      	lsls	r1, r3, #31
   31d72:	f140 8085 	bpl.w	31e80 <am_hal_clkgen_control+0x2cc>
   31d76:	f003 0307 	and.w	r3, r3, #7
   31d7a:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
   31d7e:	bf38      	it	cc
   31d80:	ea43 03c2 	orrcc.w	r3, r3, r2, lsl #3
   31d84:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   31d88:	493f      	ldr	r1, [pc, #252]	@ (31e88 <am_hal_clkgen_control+0x2d4>)
   31d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
   31d8c:	6862      	ldr	r2, [r4, #4]
   31d8e:	1e53      	subs	r3, r2, #1
   31d90:	428b      	cmp	r3, r1
   31d92:	d370      	bcc.n	31e76 <am_hal_clkgen_control+0x2c2>
   31d94:	493d      	ldr	r1, [pc, #244]	@ (31e8c <am_hal_clkgen_control+0x2d8>)
   31d96:	428b      	cmp	r3, r1
   31d98:	d274      	bcs.n	31e84 <am_hal_clkgen_control+0x2d0>
   31d9a:	f04f 0c08 	mov.w	ip, #8
   31d9e:	2600      	movs	r6, #0
   31da0:	2103      	movs	r1, #3
   31da2:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
   31da6:	ea4f 0e52 	mov.w	lr, r2, lsr #1
   31daa:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
   31dac:	f361 0301 	bfi	r3, r1, #0, #2
   31db0:	652b      	str	r3, [r5, #80]	@ 0x50
   31db2:	68a0      	ldr	r0, [r4, #8]
   31db4:	fba0 c10c 	umull	ip, r1, r0, ip
   31db8:	fb00 1106 	mla	r1, r0, r6, r1
   31dbc:	04c9      	lsls	r1, r1, #19
   31dbe:	ea4f 40cc 	mov.w	r0, ip, lsl #19
   31dc2:	eb10 000e 	adds.w	r0, r0, lr
   31dc6:	ea41 315c 	orr.w	r1, r1, ip, lsr #13
   31dca:	f04f 0300 	mov.w	r3, #0
   31dce:	f141 0100 	adc.w	r1, r1, #0
   31dd2:	f7e7 fa15 	bl	19200 <__aeabi_uldivmod>
   31dd6:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
   31dda:	f171 0300 	sbcs.w	r3, r1, #0
   31dde:	d251      	bcs.n	31e84 <am_hal_clkgen_control+0x2d0>
   31de0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
   31de2:	7c62      	ldrb	r2, [r4, #17]
   31de4:	f360 039e 	bfi	r3, r0, #2, #29
   31de8:	652b      	str	r3, [r5, #80]	@ 0x50
   31dea:	2a00      	cmp	r2, #0
   31dec:	d18d      	bne.n	31d0a <am_hal_clkgen_control+0x156>
   31dee:	6cab      	ldr	r3, [r5, #72]	@ 0x48
   31df0:	f043 0301 	orr.w	r3, r3, #1
   31df4:	64ab      	str	r3, [r5, #72]	@ 0x48
   31df6:	4610      	mov	r0, r2
   31df8:	bd70      	pop	{r4, r5, r6, pc}
   31dfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31dfe:	2005      	movs	r0, #5
   31e00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
   31e02:	f36f 0200 	bfc	r2, #0, #1
   31e06:	649a      	str	r2, [r3, #72]	@ 0x48
   31e08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
   31e0a:	f360 0202 	bfi	r2, r0, #0, #3
   31e0e:	64da      	str	r2, [r3, #76]	@ 0x4c
   31e10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
   31e12:	2102      	movs	r1, #2
   31e14:	f361 0201 	bfi	r2, r1, #0, #2
   31e18:	651a      	str	r2, [r3, #80]	@ 0x50
   31e1a:	b1bc      	cbz	r4, 31e4c <am_hal_clkgen_control+0x298>
   31e1c:	6822      	ldr	r2, [r4, #0]
   31e1e:	b1aa      	cbz	r2, 31e4c <am_hal_clkgen_control+0x298>
   31e20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
   31e22:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
   31e26:	f361 029e 	bfi	r2, r1, #2, #29
   31e2a:	651a      	str	r2, [r3, #80]	@ 0x50
   31e2c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
   31e30:	2000      	movs	r0, #0
   31e32:	6c93      	ldr	r3, [r2, #72]	@ 0x48
   31e34:	f043 0301 	orr.w	r3, r3, #1
   31e38:	6493      	str	r3, [r2, #72]	@ 0x48
   31e3a:	bd70      	pop	{r4, r5, r6, pc}
   31e3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31e40:	2000      	movs	r0, #0
   31e42:	68da      	ldr	r2, [r3, #12]
   31e44:	f36f 12c7 	bfc	r2, #7, #1
   31e48:	60da      	str	r2, [r3, #12]
   31e4a:	bd70      	pop	{r4, r5, r6, pc}
   31e4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
   31e50:	490f      	ldr	r1, [pc, #60]	@ (31e90 <am_hal_clkgen_control+0x2dc>)
   31e52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
   31e54:	f361 029e 	bfi	r2, r1, #2, #29
   31e58:	651a      	str	r2, [r3, #80]	@ 0x50
   31e5a:	e7e7      	b.n	31e2c <am_hal_clkgen_control+0x278>
   31e5c:	2006      	movs	r0, #6
   31e5e:	bd70      	pop	{r4, r5, r6, pc}
   31e60:	6c53      	ldr	r3, [r2, #68]	@ 0x44
   31e62:	f043 0320 	orr.w	r3, r3, #32
   31e66:	200a      	movs	r0, #10
   31e68:	6453      	str	r3, [r2, #68]	@ 0x44
   31e6a:	f001 faff 	bl	3346c <am_hal_delay_us>
   31e6e:	4620      	mov	r0, r4
   31e70:	bd70      	pop	{r4, r5, r6, pc}
   31e72:	4b08      	ldr	r3, [pc, #32]	@ (31e94 <am_hal_clkgen_control+0x2e0>)
   31e74:	e759      	b.n	31d2a <am_hal_clkgen_control+0x176>
   31e76:	f04f 0c04 	mov.w	ip, #4
   31e7a:	2600      	movs	r6, #0
   31e7c:	2102      	movs	r1, #2
   31e7e:	e790      	b.n	31da2 <am_hal_clkgen_control+0x1ee>
   31e80:	2307      	movs	r3, #7
   31e82:	e77f      	b.n	31d84 <am_hal_clkgen_control+0x1d0>
   31e84:	2005      	movs	r0, #5
   31e86:	bd70      	pop	{r4, r5, r6, pc}
   31e88:	02dc6c00 	.word	0x02dc6c00
   31e8c:	05b8d800 	.word	0x05b8d800
   31e90:	00189374 	.word	0x00189374
   31e94:	00a5b801 	.word	0x00a5b801

00031e98 <am_hal_gpio_pinconfig_get>:
   31e98:	287f      	cmp	r0, #127	@ 0x7f
   31e9a:	d809      	bhi.n	31eb0 <am_hal_gpio_pinconfig_get+0x18>
   31e9c:	b151      	cbz	r1, 31eb4 <am_hal_gpio_pinconfig_get+0x1c>
   31e9e:	0080      	lsls	r0, r0, #2
   31ea0:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
   31ea4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   31ea8:	2000      	movs	r0, #0
   31eaa:	681b      	ldr	r3, [r3, #0]
   31eac:	600b      	str	r3, [r1, #0]
   31eae:	4770      	bx	lr
   31eb0:	2005      	movs	r0, #5
   31eb2:	4770      	bx	lr
   31eb4:	2006      	movs	r0, #6
   31eb6:	4770      	bx	lr

00031eb8 <am_hal_gpio_pinconfig>:
   31eb8:	287f      	cmp	r0, #127	@ 0x7f
   31eba:	d81f      	bhi.n	31efc <am_hal_gpio_pinconfig+0x44>
   31ebc:	f3c1 2381 	ubfx	r3, r1, #10, #2
   31ec0:	2b01      	cmp	r3, #1
   31ec2:	b410      	push	{r4}
   31ec4:	d909      	bls.n	31eda <am_hal_gpio_pinconfig+0x22>
   31ec6:	4b10      	ldr	r3, [pc, #64]	@ (31f08 <am_hal_gpio_pinconfig+0x50>)
   31ec8:	0942      	lsrs	r2, r0, #5
   31eca:	f000 041f 	and.w	r4, r0, #31
   31ece:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   31ed2:	2301      	movs	r3, #1
   31ed4:	40a3      	lsls	r3, r4
   31ed6:	4213      	tst	r3, r2
   31ed8:	d012      	beq.n	31f00 <am_hal_gpio_pinconfig+0x48>
   31eda:	0080      	lsls	r0, r0, #2
   31edc:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
   31ee0:	4b0a      	ldr	r3, [pc, #40]	@ (31f0c <am_hal_gpio_pinconfig+0x54>)
   31ee2:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
   31ee6:	2200      	movs	r2, #0
   31ee8:	2473      	movs	r4, #115	@ 0x73
   31eea:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
   31eee:	6001      	str	r1, [r0, #0]
   31ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
   31ef4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   31ef8:	4610      	mov	r0, r2
   31efa:	4770      	bx	lr
   31efc:	2005      	movs	r0, #5
   31efe:	4770      	bx	lr
   31f00:	2007      	movs	r0, #7
   31f02:	f85d 4b04 	ldr.w	r4, [sp], #4
   31f06:	4770      	bx	lr
   31f08:	000478f4 	.word	0x000478f4
   31f0c:	40010000 	.word	0x40010000

00031f10 <am_hal_gpio_state_write>:
   31f10:	b510      	push	{r4, lr}
   31f12:	4604      	mov	r4, r0
   31f14:	b082      	sub	sp, #8
   31f16:	2905      	cmp	r1, #5
   31f18:	d80e      	bhi.n	31f38 <am_hal_gpio_state_write+0x28>
   31f1a:	e8df f001 	tbb	[pc, r1]
   31f1e:	2603      	.short	0x2603
   31f20:	103f3d28 	.word	0x103f3d28
   31f24:	4a1e      	ldr	r2, [pc, #120]	@ (31fa0 <am_hal_gpio_state_write+0x90>)
   31f26:	f3c4 1141 	ubfx	r1, r4, #5, #2
   31f2a:	2301      	movs	r3, #1
   31f2c:	f004 041f 	and.w	r4, r4, #31
   31f30:	fa03 f404 	lsl.w	r4, r3, r4
   31f34:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   31f38:	2000      	movs	r0, #0
   31f3a:	b002      	add	sp, #8
   31f3c:	bd10      	pop	{r4, pc}
   31f3e:	f000 f83f 	bl	31fc0 <am_hal_interrupt_master_disable>
   31f42:	f3c4 1141 	ubfx	r1, r4, #5, #2
   31f46:	4a17      	ldr	r2, [pc, #92]	@ (31fa4 <am_hal_gpio_state_write+0x94>)
   31f48:	9001      	str	r0, [sp, #4]
   31f4a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   31f4e:	2301      	movs	r3, #1
   31f50:	f004 041f 	and.w	r4, r4, #31
   31f54:	fa03 f404 	lsl.w	r4, r3, r4
   31f58:	4044      	eors	r4, r0
   31f5a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   31f5e:	9801      	ldr	r0, [sp, #4]
   31f60:	f000 f832 	bl	31fc8 <am_hal_interrupt_master_set>
   31f64:	2000      	movs	r0, #0
   31f66:	b002      	add	sp, #8
   31f68:	bd10      	pop	{r4, pc}
   31f6a:	4a0f      	ldr	r2, [pc, #60]	@ (31fa8 <am_hal_gpio_state_write+0x98>)
   31f6c:	e7db      	b.n	31f26 <am_hal_gpio_state_write+0x16>
   31f6e:	f000 f827 	bl	31fc0 <am_hal_interrupt_master_disable>
   31f72:	f3c4 1241 	ubfx	r2, r4, #5, #2
   31f76:	4b0d      	ldr	r3, [pc, #52]	@ (31fac <am_hal_gpio_state_write+0x9c>)
   31f78:	9000      	str	r0, [sp, #0]
   31f7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   31f7e:	f004 001f 	and.w	r0, r4, #31
   31f82:	2401      	movs	r4, #1
   31f84:	4084      	lsls	r4, r0
   31f86:	404c      	eors	r4, r1
   31f88:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   31f8c:	9800      	ldr	r0, [sp, #0]
   31f8e:	f000 f81b 	bl	31fc8 <am_hal_interrupt_master_set>
   31f92:	2000      	movs	r0, #0
   31f94:	b002      	add	sp, #8
   31f96:	bd10      	pop	{r4, pc}
   31f98:	4a05      	ldr	r2, [pc, #20]	@ (31fb0 <am_hal_gpio_state_write+0xa0>)
   31f9a:	e7c4      	b.n	31f26 <am_hal_gpio_state_write+0x16>
   31f9c:	4a05      	ldr	r2, [pc, #20]	@ (31fb4 <am_hal_gpio_state_write+0xa4>)
   31f9e:	e7c2      	b.n	31f26 <am_hal_gpio_state_write+0x16>
   31fa0:	40010234 	.word	0x40010234
   31fa4:	40010244 	.word	0x40010244
   31fa8:	40010224 	.word	0x40010224
   31fac:	40010214 	.word	0x40010214
   31fb0:	40010264 	.word	0x40010264
   31fb4:	40010254 	.word	0x40010254

00031fb8 <am_hal_interrupt_master_enable>:
   31fb8:	f3ef 8010 	mrs	r0, PRIMASK
   31fbc:	b662      	cpsie	i
   31fbe:	4770      	bx	lr

00031fc0 <am_hal_interrupt_master_disable>:
   31fc0:	f3ef 8010 	mrs	r0, PRIMASK
   31fc4:	b672      	cpsid	i
   31fc6:	4770      	bx	lr

00031fc8 <am_hal_interrupt_master_set>:
   31fc8:	f380 8810 	msr	PRIMASK, r0
   31fcc:	4770      	bx	lr
   31fce:	bf00      	nop

00031fd0 <am_hal_itm_enable>:
   31fd0:	4a0e      	ldr	r2, [pc, #56]	@ (3200c <am_hal_itm_enable+0x3c>)
   31fd2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   31fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
   31fda:	b410      	push	{r4}
   31fdc:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
   31fe0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   31fe4:	01db      	lsls	r3, r3, #7
   31fe6:	d5fb      	bpl.n	31fe0 <am_hal_itm_enable+0x10>
   31fe8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
   31fec:	4c08      	ldr	r4, [pc, #32]	@ (32010 <am_hal_itm_enable+0x40>)
   31fee:	4a09      	ldr	r2, [pc, #36]	@ (32014 <am_hal_itm_enable+0x44>)
   31ff0:	f8c3 4fb0 	str.w	r4, [r3, #4016]	@ 0xfb0
   31ff4:	200f      	movs	r0, #15
   31ff6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   31ffa:	f8c3 0e40 	str.w	r0, [r3, #3648]	@ 0xe40
   31ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
   32002:	f8c3 1e00 	str.w	r1, [r3, #3584]	@ 0xe00
   32006:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
   3200a:	4770      	bx	lr
   3200c:	e000ed00 	.word	0xe000ed00
   32010:	c5acce55 	.word	0xc5acce55
   32014:	00150511 	.word	0x00150511

00032018 <am_hal_itm_disable>:
   32018:	4b2f      	ldr	r3, [pc, #188]	@ (320d8 <am_hal_itm_disable+0xc0>)
   3201a:	f8d3 3250 	ldr.w	r3, [r3, #592]	@ 0x250
   3201e:	b510      	push	{r4, lr}
   32020:	b9cb      	cbnz	r3, 32056 <am_hal_itm_disable+0x3e>
   32022:	4a2e      	ldr	r2, [pc, #184]	@ (320dc <am_hal_itm_disable+0xc4>)
   32024:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   32028:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
   3202c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
   32030:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   32034:	01d9      	lsls	r1, r3, #7
   32036:	d5fb      	bpl.n	32030 <am_hal_itm_disable+0x18>
   32038:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
   3203c:	4c28      	ldr	r4, [pc, #160]	@ (320e0 <am_hal_itm_disable+0xc8>)
   3203e:	4a29      	ldr	r2, [pc, #164]	@ (320e4 <am_hal_itm_disable+0xcc>)
   32040:	f8c3 4fb0 	str.w	r4, [r3, #4016]	@ 0xfb0
   32044:	200f      	movs	r0, #15
   32046:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   3204a:	f8c3 0e40 	str.w	r0, [r3, #3648]	@ 0xe40
   3204e:	f8c3 1e00 	str.w	r1, [r3, #3584]	@ 0xe00
   32052:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
   32056:	f04f 4460 	mov.w	r4, #3758096384	@ 0xe0000000
   3205a:	f8d4 3e80 	ldr.w	r3, [r4, #3712]	@ 0xe80
   3205e:	021b      	lsls	r3, r3, #8
   32060:	d4fb      	bmi.n	3205a <am_hal_itm_disable+0x42>
   32062:	2032      	movs	r0, #50	@ 0x32
   32064:	f001 fa02 	bl	3346c <am_hal_delay_us>
   32068:	4b1d      	ldr	r3, [pc, #116]	@ (320e0 <am_hal_itm_disable+0xc8>)
   3206a:	491f      	ldr	r1, [pc, #124]	@ (320e8 <am_hal_itm_disable+0xd0>)
   3206c:	f8c4 3fb0 	str.w	r3, [r4, #4016]	@ 0xfb0
   32070:	2064      	movs	r0, #100	@ 0x64
   32072:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
   32076:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	@ 0xe80
   3207a:	f023 0301 	bic.w	r3, r3, #1
   3207e:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
   32082:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	@ 0xe80
   32086:	420b      	tst	r3, r1
   32088:	d1fb      	bne.n	32082 <am_hal_itm_disable+0x6a>
   3208a:	3801      	subs	r0, #1
   3208c:	d1f3      	bne.n	32076 <am_hal_itm_disable+0x5e>
   3208e:	4a13      	ldr	r2, [pc, #76]	@ (320dc <am_hal_itm_disable+0xc4>)
   32090:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   32094:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
   32098:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
   3209c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
   320a0:	f013 7380 	ands.w	r3, r3, #16777216	@ 0x1000000
   320a4:	d1fa      	bne.n	3209c <am_hal_itm_disable+0x84>
   320a6:	4a0c      	ldr	r2, [pc, #48]	@ (320d8 <am_hal_itm_disable+0xc0>)
   320a8:	f8d2 1250 	ldr.w	r1, [r2, #592]	@ 0x250
   320ac:	f363 0143 	bfi	r1, r3, #1, #3
   320b0:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
   320b4:	f8d2 1250 	ldr.w	r1, [r2, #592]	@ 0x250
   320b8:	f363 0100 	bfi	r1, r3, #0, #1
   320bc:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
   320c0:	f8d2 1250 	ldr.w	r1, [r2, #592]	@ 0x250
   320c4:	f363 310e 	bfi	r1, r3, #12, #3
   320c8:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
   320cc:	f8d2 3250 	ldr.w	r3, [r2, #592]	@ 0x250
   320d0:	2b00      	cmp	r3, #0
   320d2:	d1fb      	bne.n	320cc <am_hal_itm_disable+0xb4>
   320d4:	bd10      	pop	{r4, pc}
   320d6:	bf00      	nop
   320d8:	40020000 	.word	0x40020000
   320dc:	e000ed00 	.word	0xe000ed00
   320e0:	c5acce55 	.word	0xc5acce55
   320e4:	00150511 	.word	0x00150511
   320e8:	00800001 	.word	0x00800001

000320ec <am_hal_itm_print>:
   320ec:	7803      	ldrb	r3, [r0, #0]
   320ee:	b1a3      	cbz	r3, 3211a <am_hal_itm_print+0x2e>
   320f0:	4603      	mov	r3, r0
   320f2:	f1c0 0c01 	rsb	ip, r0, #1
   320f6:	eb0c 0103 	add.w	r1, ip, r3
   320fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   320fe:	2a00      	cmp	r2, #0
   32100:	d1f9      	bne.n	320f6 <am_hal_itm_print+0xa>
   32102:	4401      	add	r1, r0
   32104:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
   32108:	f810 cb01 	ldrb.w	ip, [r0], #1
   3210c:	6813      	ldr	r3, [r2, #0]
   3210e:	2b00      	cmp	r3, #0
   32110:	d0fc      	beq.n	3210c <am_hal_itm_print+0x20>
   32112:	4288      	cmp	r0, r1
   32114:	f882 c000 	strb.w	ip, [r2]
   32118:	d1f6      	bne.n	32108 <am_hal_itm_print+0x1c>
   3211a:	4770      	bx	lr

0003211c <am_hal_mram_info_read>:
   3211c:	b9c0      	cbnz	r0, 32150 <am_hal_mram_info_read+0x34>
   3211e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
   32122:	d228      	bcs.n	32176 <am_hal_mram_info_read+0x5a>
   32124:	1888      	adds	r0, r1, r2
   32126:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
   3212a:	d824      	bhi.n	32176 <am_hal_mram_info_read+0x5a>
   3212c:	f101 5184 	add.w	r1, r1, #276824064	@ 0x10800000
   32130:	0089      	lsls	r1, r1, #2
   32132:	b312      	cbz	r2, 3217a <am_hal_mram_info_read+0x5e>
   32134:	b410      	push	{r4}
   32136:	2000      	movs	r0, #0
   32138:	3001      	adds	r0, #1
   3213a:	680c      	ldr	r4, [r1, #0]
   3213c:	f843 4b04 	str.w	r4, [r3], #4
   32140:	4282      	cmp	r2, r0
   32142:	f101 0104 	add.w	r1, r1, #4
   32146:	d1f7      	bne.n	32138 <am_hal_mram_info_read+0x1c>
   32148:	2000      	movs	r0, #0
   3214a:	f85d 4b04 	ldr.w	r4, [sp], #4
   3214e:	4770      	bx	lr
   32150:	2801      	cmp	r0, #1
   32152:	d10e      	bne.n	32172 <am_hal_mram_info_read+0x56>
   32154:	f5a1 6090 	sub.w	r0, r1, #1152	@ 0x480
   32158:	f5b0 7fc0 	cmp.w	r0, #384	@ 0x180
   3215c:	d20b      	bcs.n	32176 <am_hal_mram_info_read+0x5a>
   3215e:	1888      	adds	r0, r1, r2
   32160:	f5b0 6fc0 	cmp.w	r0, #1536	@ 0x600
   32164:	d807      	bhi.n	32176 <am_hal_mram_info_read+0x5a>
   32166:	f101 5184 	add.w	r1, r1, #276824064	@ 0x10800000
   3216a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
   3216e:	0089      	lsls	r1, r1, #2
   32170:	e7df      	b.n	32132 <am_hal_mram_info_read+0x16>
   32172:	2001      	movs	r0, #1
   32174:	4770      	bx	lr
   32176:	2002      	movs	r0, #2
   32178:	4770      	bx	lr
   3217a:	2000      	movs	r0, #0
   3217c:	4770      	bx	lr
   3217e:	bf00      	nop

00032180 <tempco_set_trims.part.0>:
   32180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32184:	4c43      	ldr	r4, [pc, #268]	@ (32294 <tempco_set_trims.part.0+0x114>)
   32186:	6826      	ldr	r6, [r4, #0]
   32188:	4c43      	ldr	r4, [pc, #268]	@ (32298 <tempco_set_trims.part.0+0x118>)
   3218a:	6824      	ldr	r4, [r4, #0]
   3218c:	4406      	add	r6, r0
   3218e:	4404      	add	r4, r0
   32190:	4842      	ldr	r0, [pc, #264]	@ (3229c <tempco_set_trims.part.0+0x11c>)
   32192:	6800      	ldr	r0, [r0, #0]
   32194:	eb01 0800 	add.w	r8, r1, r0
   32198:	4941      	ldr	r1, [pc, #260]	@ (322a0 <tempco_set_trims.part.0+0x120>)
   3219a:	680f      	ldr	r7, [r1, #0]
   3219c:	4417      	add	r7, r2
   3219e:	4a41      	ldr	r2, [pc, #260]	@ (322a4 <tempco_set_trims.part.0+0x124>)
   321a0:	6812      	ldr	r2, [r2, #0]
   321a2:	eb03 0902 	add.w	r9, r3, r2
   321a6:	4a40      	ldr	r2, [pc, #256]	@ (322a8 <tempco_set_trims.part.0+0x128>)
   321a8:	6815      	ldr	r5, [r2, #0]
   321aa:	b083      	sub	sp, #12
   321ac:	441d      	add	r5, r3
   321ae:	f7ff ff07 	bl	31fc0 <am_hal_interrupt_master_disable>
   321b2:	4b3e      	ldr	r3, [pc, #248]	@ (322ac <tempco_set_trims.part.0+0x12c>)
   321b4:	9001      	str	r0, [sp, #4]
   321b6:	781b      	ldrb	r3, [r3, #0]
   321b8:	b91b      	cbnz	r3, 321c2 <tempco_set_trims.part.0+0x42>
   321ba:	4b3d      	ldr	r3, [pc, #244]	@ (322b0 <tempco_set_trims.part.0+0x130>)
   321bc:	6818      	ldr	r0, [r3, #0]
   321be:	1a36      	subs	r6, r6, r0
   321c0:	1a24      	subs	r4, r4, r0
   321c2:	4a3c      	ldr	r2, [pc, #240]	@ (322b4 <tempco_set_trims.part.0+0x134>)
   321c4:	4b3c      	ldr	r3, [pc, #240]	@ (322b8 <tempco_set_trims.part.0+0x138>)
   321c6:	6016      	str	r6, [r2, #0]
   321c8:	f1b8 0f00 	cmp.w	r8, #0
   321cc:	f386 0c06 	usat	ip, #6, r6
   321d0:	601c      	str	r4, [r3, #0]
   321d2:	f384 0006 	usat	r0, #6, r4
   321d6:	db51      	blt.n	3227c <tempco_set_trims.part.0+0xfc>
   321d8:	f1b8 0f3f 	cmp.w	r8, #63	@ 0x3f
   321dc:	d83f      	bhi.n	3225e <tempco_set_trims.part.0+0xde>
   321de:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
   321e2:	2f00      	cmp	r7, #0
   321e4:	db3f      	blt.n	32266 <tempco_set_trims.part.0+0xe6>
   321e6:	2f3f      	cmp	r7, #63	@ 0x3f
   321e8:	d84b      	bhi.n	32282 <tempco_set_trims.part.0+0x102>
   321ea:	f007 073f 	and.w	r7, r7, #63	@ 0x3f
   321ee:	f1b9 0f00 	cmp.w	r9, #0
   321f2:	db3d      	blt.n	32270 <tempco_set_trims.part.0+0xf0>
   321f4:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
   321f8:	d848      	bhi.n	3228c <tempco_set_trims.part.0+0x10c>
   321fa:	f009 097f 	and.w	r9, r9, #127	@ 0x7f
   321fe:	2d00      	cmp	r5, #0
   32200:	db3a      	blt.n	32278 <tempco_set_trims.part.0+0xf8>
   32202:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
   32206:	d23e      	bcs.n	32286 <tempco_set_trims.part.0+0x106>
   32208:	f3c5 0509 	ubfx	r5, r5, #0, #10
   3220c:	4b2b      	ldr	r3, [pc, #172]	@ (322bc <tempco_set_trims.part.0+0x13c>)
   3220e:	f8d3 236c 	ldr.w	r2, [r3, #876]	@ 0x36c
   32212:	f36c 5219 	bfi	r2, ip, #20, #6
   32216:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c
   3221a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
   3221e:	f360 0205 	bfi	r2, r0, #0, #6
   32222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
   32226:	f8d3 236c 	ldr.w	r2, [r3, #876]	@ 0x36c
   3222a:	f368 629f 	bfi	r2, r8, #26, #6
   3222e:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c
   32232:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
   32236:	f367 4297 	bfi	r2, r7, #18, #6
   3223a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
   3223e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
   32240:	f369 12cd 	bfi	r2, r9, #7, #7
   32244:	645a      	str	r2, [r3, #68]	@ 0x44
   32246:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
   3224a:	f365 0209 	bfi	r2, r5, #0, #10
   3224e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
   32252:	9801      	ldr	r0, [sp, #4]
   32254:	b003      	add	sp, #12
   32256:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3225a:	f7ff beb5 	b.w	31fc8 <am_hal_interrupt_master_set>
   3225e:	2f00      	cmp	r7, #0
   32260:	f04f 083f 	mov.w	r8, #63	@ 0x3f
   32264:	dabf      	bge.n	321e6 <tempco_set_trims.part.0+0x66>
   32266:	f1b9 0f00 	cmp.w	r9, #0
   3226a:	f04f 0700 	mov.w	r7, #0
   3226e:	dac1      	bge.n	321f4 <tempco_set_trims.part.0+0x74>
   32270:	2d00      	cmp	r5, #0
   32272:	f04f 0900 	mov.w	r9, #0
   32276:	dac4      	bge.n	32202 <tempco_set_trims.part.0+0x82>
   32278:	2500      	movs	r5, #0
   3227a:	e7c7      	b.n	3220c <tempco_set_trims.part.0+0x8c>
   3227c:	f04f 0800 	mov.w	r8, #0
   32280:	e7af      	b.n	321e2 <tempco_set_trims.part.0+0x62>
   32282:	273f      	movs	r7, #63	@ 0x3f
   32284:	e7b3      	b.n	321ee <tempco_set_trims.part.0+0x6e>
   32286:	f240 35ff 	movw	r5, #1023	@ 0x3ff
   3228a:	e7bf      	b.n	3220c <tempco_set_trims.part.0+0x8c>
   3228c:	f04f 097f 	mov.w	r9, #127	@ 0x7f
   32290:	e7b5      	b.n	321fe <tempco_set_trims.part.0+0x7e>
   32292:	bf00      	nop
   32294:	10055020 	.word	0x10055020
   32298:	1005502c 	.word	0x1005502c
   3229c:	10055028 	.word	0x10055028
   322a0:	10055030 	.word	0x10055030
   322a4:	10055034 	.word	0x10055034
   322a8:	10055024 	.word	0x10055024
   322ac:	10055014 	.word	0x10055014
   322b0:	1005503c 	.word	0x1005503c
   322b4:	1005501c 	.word	0x1005501c
   322b8:	10055018 	.word	0x10055018
   322bc:	40020000 	.word	0x40020000

000322c0 <am_hal_pwrctrl_mcu_mode_select>:
   322c0:	1e43      	subs	r3, r0, #1
   322c2:	2b01      	cmp	r3, #1
   322c4:	d829      	bhi.n	3231a <am_hal_pwrctrl_mcu_mode_select+0x5a>
   322c6:	2802      	cmp	r0, #2
   322c8:	b570      	push	{r4, r5, r6, lr}
   322ca:	4604      	mov	r4, r0
   322cc:	d015      	beq.n	322fa <am_hal_pwrctrl_mcu_mode_select+0x3a>
   322ce:	4b15      	ldr	r3, [pc, #84]	@ (32324 <am_hal_pwrctrl_mcu_mode_select+0x64>)
   322d0:	781a      	ldrb	r2, [r3, #0]
   322d2:	42a2      	cmp	r2, r4
   322d4:	d023      	beq.n	3231e <am_hal_pwrctrl_mcu_mode_select+0x5e>
   322d6:	4e14      	ldr	r6, [pc, #80]	@ (32328 <am_hal_pwrctrl_mcu_mode_select+0x68>)
   322d8:	701c      	strb	r4, [r3, #0]
   322da:	6833      	ldr	r3, [r6, #0]
   322dc:	f364 0301 	bfi	r3, r4, #0, #2
   322e0:	2505      	movs	r5, #5
   322e2:	6033      	str	r3, [r6, #0]
   322e4:	6833      	ldr	r3, [r6, #0]
   322e6:	075b      	lsls	r3, r3, #29
   322e8:	f04f 0001 	mov.w	r0, #1
   322ec:	d40e      	bmi.n	3230c <am_hal_pwrctrl_mcu_mode_select+0x4c>
   322ee:	f001 f8bd 	bl	3346c <am_hal_delay_us>
   322f2:	3d01      	subs	r5, #1
   322f4:	d1f6      	bne.n	322e4 <am_hal_pwrctrl_mcu_mode_select+0x24>
   322f6:	2004      	movs	r0, #4
   322f8:	bd70      	pop	{r4, r5, r6, pc}
   322fa:	4b0b      	ldr	r3, [pc, #44]	@ (32328 <am_hal_pwrctrl_mcu_mode_select+0x68>)
   322fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
   32300:	f3c3 1301 	ubfx	r3, r3, #4, #2
   32304:	2b03      	cmp	r3, #3
   32306:	d0e2      	beq.n	322ce <am_hal_pwrctrl_mcu_mode_select+0xe>
   32308:	2007      	movs	r0, #7
   3230a:	bd70      	pop	{r4, r5, r6, pc}
   3230c:	6830      	ldr	r0, [r6, #0]
   3230e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   32312:	1b00      	subs	r0, r0, r4
   32314:	bf18      	it	ne
   32316:	2001      	movne	r0, #1
   32318:	bd70      	pop	{r4, r5, r6, pc}
   3231a:	2006      	movs	r0, #6
   3231c:	4770      	bx	lr
   3231e:	2000      	movs	r0, #0
   32320:	bd70      	pop	{r4, r5, r6, pc}
   32322:	bf00      	nop
   32324:	1000cb71 	.word	0x1000cb71
   32328:	40021000 	.word	0x40021000

0003232c <am_hal_pwrctrl_mcu_memory_config>:
   3232c:	b570      	push	{r4, r5, r6, lr}
   3232e:	7803      	ldrb	r3, [r0, #0]
   32330:	2b01      	cmp	r3, #1
   32332:	b082      	sub	sp, #8
   32334:	4605      	mov	r5, r0
   32336:	d073      	beq.n	32420 <am_hal_pwrctrl_mcu_memory_config+0xf4>
   32338:	2b02      	cmp	r3, #2
   3233a:	d067      	beq.n	3240c <am_hal_pwrctrl_mcu_memory_config+0xe0>
   3233c:	2b00      	cmp	r3, #0
   3233e:	d05b      	beq.n	323f8 <am_hal_pwrctrl_mcu_memory_config+0xcc>
   32340:	4c4f      	ldr	r4, [pc, #316]	@ (32480 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   32342:	78aa      	ldrb	r2, [r5, #2]
   32344:	6963      	ldr	r3, [r4, #20]
   32346:	494f      	ldr	r1, [pc, #316]	@ (32484 <am_hal_pwrctrl_mcu_memory_config+0x158>)
   32348:	f362 0302 	bfi	r3, r2, #0, #3
   3234c:	6163      	str	r3, [r4, #20]
   3234e:	6963      	ldr	r3, [r4, #20]
   32350:	792a      	ldrb	r2, [r5, #4]
   32352:	f362 03c3 	bfi	r3, r2, #3, #1
   32356:	6163      	str	r3, [r4, #20]
   32358:	2601      	movs	r6, #1
   3235a:	6963      	ldr	r3, [r4, #20]
   3235c:	9600      	str	r6, [sp, #0]
   3235e:	223f      	movs	r2, #63	@ 0x3f
   32360:	2005      	movs	r0, #5
   32362:	f001 f8c7 	bl	334f4 <am_hal_delay_us_status_check>
   32366:	b940      	cbnz	r0, 3237a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   32368:	69a2      	ldr	r2, [r4, #24]
   3236a:	6963      	ldr	r3, [r4, #20]
   3236c:	f3c2 1200 	ubfx	r2, r2, #4, #1
   32370:	f3c3 1300 	ubfx	r3, r3, #4, #1
   32374:	429a      	cmp	r2, r3
   32376:	d002      	beq.n	3237e <am_hal_pwrctrl_mcu_memory_config+0x52>
   32378:	4630      	mov	r0, r6
   3237a:	b002      	add	sp, #8
   3237c:	bd70      	pop	{r4, r5, r6, pc}
   3237e:	69a2      	ldr	r2, [r4, #24]
   32380:	6963      	ldr	r3, [r4, #20]
   32382:	f3c2 1240 	ubfx	r2, r2, #5, #1
   32386:	f3c3 1340 	ubfx	r3, r3, #5, #1
   3238a:	429a      	cmp	r2, r3
   3238c:	d1f4      	bne.n	32378 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   3238e:	69a2      	ldr	r2, [r4, #24]
   32390:	6963      	ldr	r3, [r4, #20]
   32392:	f002 0207 	and.w	r2, r2, #7
   32396:	f003 0307 	and.w	r3, r3, #7
   3239a:	429a      	cmp	r2, r3
   3239c:	d1ec      	bne.n	32378 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   3239e:	69a2      	ldr	r2, [r4, #24]
   323a0:	6963      	ldr	r3, [r4, #20]
   323a2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   323a6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   323aa:	429a      	cmp	r2, r3
   323ac:	d1e4      	bne.n	32378 <am_hal_pwrctrl_mcu_memory_config+0x4c>
   323ae:	786b      	ldrb	r3, [r5, #1]
   323b0:	2b00      	cmp	r3, #0
   323b2:	d05f      	beq.n	32474 <am_hal_pwrctrl_mcu_memory_config+0x148>
   323b4:	69e3      	ldr	r3, [r4, #28]
   323b6:	f360 1304 	bfi	r3, r0, #4, #1
   323ba:	61e3      	str	r3, [r4, #28]
   323bc:	796b      	ldrb	r3, [r5, #5]
   323be:	2b00      	cmp	r3, #0
   323c0:	d052      	beq.n	32468 <am_hal_pwrctrl_mcu_memory_config+0x13c>
   323c2:	4b2f      	ldr	r3, [pc, #188]	@ (32480 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   323c4:	69da      	ldr	r2, [r3, #28]
   323c6:	f36f 02c3 	bfc	r2, #3, #1
   323ca:	61da      	str	r2, [r3, #28]
   323cc:	78eb      	ldrb	r3, [r5, #3]
   323ce:	2b07      	cmp	r3, #7
   323d0:	d8d3      	bhi.n	3237a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   323d2:	a201      	add	r2, pc, #4	@ (adr r2, 323d8 <am_hal_pwrctrl_mcu_memory_config+0xac>)
   323d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   323d8:	0003245d 	.word	0x0003245d
   323dc:	0003244f 	.word	0x0003244f
   323e0:	0003237b 	.word	0x0003237b
   323e4:	00032441 	.word	0x00032441
   323e8:	0003237b 	.word	0x0003237b
   323ec:	0003237b 	.word	0x0003237b
   323f0:	0003237b 	.word	0x0003237b
   323f4:	00032435 	.word	0x00032435
   323f8:	4a21      	ldr	r2, [pc, #132]	@ (32480 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   323fa:	6951      	ldr	r1, [r2, #20]
   323fc:	f363 1104 	bfi	r1, r3, #4, #1
   32400:	6151      	str	r1, [r2, #20]
   32402:	6951      	ldr	r1, [r2, #20]
   32404:	f363 1145 	bfi	r1, r3, #5, #1
   32408:	6151      	str	r1, [r2, #20]
   3240a:	e799      	b.n	32340 <am_hal_pwrctrl_mcu_memory_config+0x14>
   3240c:	4b1c      	ldr	r3, [pc, #112]	@ (32480 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   3240e:	695a      	ldr	r2, [r3, #20]
   32410:	f042 0210 	orr.w	r2, r2, #16
   32414:	615a      	str	r2, [r3, #20]
   32416:	695a      	ldr	r2, [r3, #20]
   32418:	f042 0220 	orr.w	r2, r2, #32
   3241c:	615a      	str	r2, [r3, #20]
   3241e:	e78f      	b.n	32340 <am_hal_pwrctrl_mcu_memory_config+0x14>
   32420:	4b17      	ldr	r3, [pc, #92]	@ (32480 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   32422:	695a      	ldr	r2, [r3, #20]
   32424:	f042 0210 	orr.w	r2, r2, #16
   32428:	615a      	str	r2, [r3, #20]
   3242a:	695a      	ldr	r2, [r3, #20]
   3242c:	f36f 1245 	bfc	r2, #5, #1
   32430:	615a      	str	r2, [r3, #20]
   32432:	e785      	b.n	32340 <am_hal_pwrctrl_mcu_memory_config+0x14>
   32434:	4b12      	ldr	r3, [pc, #72]	@ (32480 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   32436:	69da      	ldr	r2, [r3, #28]
   32438:	f36f 0202 	bfc	r2, #0, #3
   3243c:	61da      	str	r2, [r3, #28]
   3243e:	e79c      	b.n	3237a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   32440:	4b0f      	ldr	r3, [pc, #60]	@ (32480 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   32442:	69da      	ldr	r2, [r3, #28]
   32444:	2104      	movs	r1, #4
   32446:	f361 0202 	bfi	r2, r1, #0, #3
   3244a:	61da      	str	r2, [r3, #28]
   3244c:	e795      	b.n	3237a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   3244e:	4b0c      	ldr	r3, [pc, #48]	@ (32480 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   32450:	69da      	ldr	r2, [r3, #28]
   32452:	2106      	movs	r1, #6
   32454:	f361 0202 	bfi	r2, r1, #0, #3
   32458:	61da      	str	r2, [r3, #28]
   3245a:	e78e      	b.n	3237a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   3245c:	4a08      	ldr	r2, [pc, #32]	@ (32480 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   3245e:	69d3      	ldr	r3, [r2, #28]
   32460:	f043 0307 	orr.w	r3, r3, #7
   32464:	61d3      	str	r3, [r2, #28]
   32466:	e788      	b.n	3237a <am_hal_pwrctrl_mcu_memory_config+0x4e>
   32468:	4a05      	ldr	r2, [pc, #20]	@ (32480 <am_hal_pwrctrl_mcu_memory_config+0x154>)
   3246a:	69d3      	ldr	r3, [r2, #28]
   3246c:	f043 0308 	orr.w	r3, r3, #8
   32470:	61d3      	str	r3, [r2, #28]
   32472:	e7ab      	b.n	323cc <am_hal_pwrctrl_mcu_memory_config+0xa0>
   32474:	69e3      	ldr	r3, [r4, #28]
   32476:	f043 0310 	orr.w	r3, r3, #16
   3247a:	61e3      	str	r3, [r4, #28]
   3247c:	e79e      	b.n	323bc <am_hal_pwrctrl_mcu_memory_config+0x90>
   3247e:	bf00      	nop
   32480:	40021000 	.word	0x40021000
   32484:	40021018 	.word	0x40021018

00032488 <am_hal_pwrctrl_sram_config>:
   32488:	b570      	push	{r4, r5, r6, lr}
   3248a:	4c29      	ldr	r4, [pc, #164]	@ (32530 <am_hal_pwrctrl_sram_config+0xa8>)
   3248c:	7802      	ldrb	r2, [r0, #0]
   3248e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   32490:	4928      	ldr	r1, [pc, #160]	@ (32534 <am_hal_pwrctrl_sram_config+0xac>)
   32492:	f362 0301 	bfi	r3, r2, #0, #2
   32496:	b082      	sub	sp, #8
   32498:	6263      	str	r3, [r4, #36]	@ 0x24
   3249a:	2601      	movs	r6, #1
   3249c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   3249e:	9600      	str	r6, [sp, #0]
   324a0:	4605      	mov	r5, r0
   324a2:	2203      	movs	r2, #3
   324a4:	2005      	movs	r0, #5
   324a6:	f001 f825 	bl	334f4 <am_hal_delay_us_status_check>
   324aa:	b940      	cbnz	r0, 324be <am_hal_pwrctrl_sram_config+0x36>
   324ac:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
   324ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   324b0:	f002 0203 	and.w	r2, r2, #3
   324b4:	f003 0303 	and.w	r3, r3, #3
   324b8:	429a      	cmp	r2, r3
   324ba:	d002      	beq.n	324c2 <am_hal_pwrctrl_sram_config+0x3a>
   324bc:	4630      	mov	r0, r6
   324be:	b002      	add	sp, #8
   324c0:	bd70      	pop	{r4, r5, r6, pc}
   324c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   324c4:	786b      	ldrb	r3, [r5, #1]
   324c6:	f895 c002 	ldrb.w	ip, [r5, #2]
   324ca:	78ee      	ldrb	r6, [r5, #3]
   324cc:	7929      	ldrb	r1, [r5, #4]
   324ce:	f363 0283 	bfi	r2, r3, #2, #2
   324d2:	796b      	ldrb	r3, [r5, #5]
   324d4:	62e2      	str	r2, [r4, #44]	@ 0x2c
   324d6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   324d8:	f36c 1287 	bfi	r2, ip, #6, #2
   324dc:	62e2      	str	r2, [r4, #44]	@ 0x2c
   324de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   324e0:	f366 2209 	bfi	r2, r6, #8, #2
   324e4:	62e2      	str	r2, [r4, #44]	@ 0x2c
   324e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   324e8:	f361 1205 	bfi	r2, r1, #4, #2
   324ec:	62e2      	str	r2, [r4, #44]	@ 0x2c
   324ee:	2b03      	cmp	r3, #3
   324f0:	d8e5      	bhi.n	324be <am_hal_pwrctrl_sram_config+0x36>
   324f2:	e8df f003 	tbb	[pc, r3]
   324f6:	0f16      	.short	0x0f16
   324f8:	0208      	.short	0x0208
   324fa:	4b0d      	ldr	r3, [pc, #52]	@ (32530 <am_hal_pwrctrl_sram_config+0xa8>)
   324fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   324fe:	f36f 0201 	bfc	r2, #0, #2
   32502:	62da      	str	r2, [r3, #44]	@ 0x2c
   32504:	e7db      	b.n	324be <am_hal_pwrctrl_sram_config+0x36>
   32506:	4b0a      	ldr	r3, [pc, #40]	@ (32530 <am_hal_pwrctrl_sram_config+0xa8>)
   32508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   3250a:	2101      	movs	r1, #1
   3250c:	f361 0201 	bfi	r2, r1, #0, #2
   32510:	62da      	str	r2, [r3, #44]	@ 0x2c
   32512:	e7d4      	b.n	324be <am_hal_pwrctrl_sram_config+0x36>
   32514:	4b06      	ldr	r3, [pc, #24]	@ (32530 <am_hal_pwrctrl_sram_config+0xa8>)
   32516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   32518:	2102      	movs	r1, #2
   3251a:	f361 0201 	bfi	r2, r1, #0, #2
   3251e:	62da      	str	r2, [r3, #44]	@ 0x2c
   32520:	e7cd      	b.n	324be <am_hal_pwrctrl_sram_config+0x36>
   32522:	4a03      	ldr	r2, [pc, #12]	@ (32530 <am_hal_pwrctrl_sram_config+0xa8>)
   32524:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
   32526:	f043 0303 	orr.w	r3, r3, #3
   3252a:	62d3      	str	r3, [r2, #44]	@ 0x2c
   3252c:	e7c7      	b.n	324be <am_hal_pwrctrl_sram_config+0x36>
   3252e:	bf00      	nop
   32530:	40021000 	.word	0x40021000
   32534:	40021028 	.word	0x40021028

00032538 <am_hal_pwrctrl_dsp_memory_config>:
   32538:	b530      	push	{r4, r5, lr}
   3253a:	460c      	mov	r4, r1
   3253c:	b083      	sub	sp, #12
   3253e:	2800      	cmp	r0, #0
   32540:	d053      	beq.n	325ea <am_hal_pwrctrl_dsp_memory_config+0xb2>
   32542:	2801      	cmp	r0, #1
   32544:	d14e      	bne.n	325e4 <am_hal_pwrctrl_dsp_memory_config+0xac>
   32546:	780b      	ldrb	r3, [r1, #0]
   32548:	4a6b      	ldr	r2, [pc, #428]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3254a:	2b00      	cmp	r3, #0
   3254c:	f000 809d 	beq.w	3268a <am_hal_pwrctrl_dsp_memory_config+0x152>
   32550:	6f93      	ldr	r3, [r2, #120]	@ 0x78
   32552:	f043 0302 	orr.w	r3, r3, #2
   32556:	6793      	str	r3, [r2, #120]	@ 0x78
   32558:	78a3      	ldrb	r3, [r4, #2]
   3255a:	4a67      	ldr	r2, [pc, #412]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3255c:	2b00      	cmp	r3, #0
   3255e:	f000 809d 	beq.w	3269c <am_hal_pwrctrl_dsp_memory_config+0x164>
   32562:	6f93      	ldr	r3, [r2, #120]	@ 0x78
   32564:	f043 0301 	orr.w	r3, r3, #1
   32568:	6793      	str	r3, [r2, #120]	@ 0x78
   3256a:	4d63      	ldr	r5, [pc, #396]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3256c:	4963      	ldr	r1, [pc, #396]	@ (326fc <am_hal_pwrctrl_dsp_memory_config+0x1c4>)
   3256e:	6fab      	ldr	r3, [r5, #120]	@ 0x78
   32570:	2201      	movs	r2, #1
   32572:	9200      	str	r2, [sp, #0]
   32574:	2005      	movs	r0, #5
   32576:	2203      	movs	r2, #3
   32578:	f000 ffbc 	bl	334f4 <am_hal_delay_us_status_check>
   3257c:	bb98      	cbnz	r0, 325e6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   3257e:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
   32580:	6fab      	ldr	r3, [r5, #120]	@ 0x78
   32582:	f3c2 0240 	ubfx	r2, r2, #1, #1
   32586:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3258a:	429a      	cmp	r2, r3
   3258c:	f040 808b 	bne.w	326a6 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   32590:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
   32592:	6fab      	ldr	r3, [r5, #120]	@ 0x78
   32594:	f002 0201 	and.w	r2, r2, #1
   32598:	f003 0301 	and.w	r3, r3, #1
   3259c:	429a      	cmp	r2, r3
   3259e:	f040 8082 	bne.w	326a6 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   325a2:	7863      	ldrb	r3, [r4, #1]
   325a4:	2b00      	cmp	r3, #0
   325a6:	f040 8081 	bne.w	326ac <am_hal_pwrctrl_dsp_memory_config+0x174>
   325aa:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
   325ae:	f043 0304 	orr.w	r3, r3, #4
   325b2:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
   325b6:	78e3      	ldrb	r3, [r4, #3]
   325b8:	4a4f      	ldr	r2, [pc, #316]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   325ba:	2b00      	cmp	r3, #0
   325bc:	f000 8095 	beq.w	326ea <am_hal_pwrctrl_dsp_memory_config+0x1b2>
   325c0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
   325c4:	f043 0302 	orr.w	r3, r3, #2
   325c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
   325cc:	7923      	ldrb	r3, [r4, #4]
   325ce:	2b00      	cmp	r3, #0
   325d0:	f000 8083 	beq.w	326da <am_hal_pwrctrl_dsp_memory_config+0x1a2>
   325d4:	4b48      	ldr	r3, [pc, #288]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   325d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
   325da:	f36f 0200 	bfc	r2, #0, #1
   325de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
   325e2:	e000      	b.n	325e6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   325e4:	2000      	movs	r0, #0
   325e6:	b003      	add	sp, #12
   325e8:	bd30      	pop	{r4, r5, pc}
   325ea:	780b      	ldrb	r3, [r1, #0]
   325ec:	4a42      	ldr	r2, [pc, #264]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   325ee:	2b00      	cmp	r3, #0
   325f0:	d13e      	bne.n	32670 <am_hal_pwrctrl_dsp_memory_config+0x138>
   325f2:	6d91      	ldr	r1, [r2, #88]	@ 0x58
   325f4:	f363 0141 	bfi	r1, r3, #1, #1
   325f8:	6591      	str	r1, [r2, #88]	@ 0x58
   325fa:	78a3      	ldrb	r3, [r4, #2]
   325fc:	4a3e      	ldr	r2, [pc, #248]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   325fe:	2b00      	cmp	r3, #0
   32600:	d03e      	beq.n	32680 <am_hal_pwrctrl_dsp_memory_config+0x148>
   32602:	6d93      	ldr	r3, [r2, #88]	@ 0x58
   32604:	f043 0301 	orr.w	r3, r3, #1
   32608:	6593      	str	r3, [r2, #88]	@ 0x58
   3260a:	4d3b      	ldr	r5, [pc, #236]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3260c:	493c      	ldr	r1, [pc, #240]	@ (32700 <am_hal_pwrctrl_dsp_memory_config+0x1c8>)
   3260e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
   32610:	2201      	movs	r2, #1
   32612:	9200      	str	r2, [sp, #0]
   32614:	2005      	movs	r0, #5
   32616:	2203      	movs	r2, #3
   32618:	f000 ff6c 	bl	334f4 <am_hal_delay_us_status_check>
   3261c:	2800      	cmp	r0, #0
   3261e:	d1e2      	bne.n	325e6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   32620:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
   32622:	6dab      	ldr	r3, [r5, #88]	@ 0x58
   32624:	f3c2 0240 	ubfx	r2, r2, #1, #1
   32628:	f3c3 0340 	ubfx	r3, r3, #1, #1
   3262c:	429a      	cmp	r2, r3
   3262e:	d13a      	bne.n	326a6 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   32630:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
   32632:	6dab      	ldr	r3, [r5, #88]	@ 0x58
   32634:	f002 0201 	and.w	r2, r2, #1
   32638:	f003 0301 	and.w	r3, r3, #1
   3263c:	429a      	cmp	r2, r3
   3263e:	d132      	bne.n	326a6 <am_hal_pwrctrl_dsp_memory_config+0x16e>
   32640:	7863      	ldrb	r3, [r4, #1]
   32642:	2b00      	cmp	r3, #0
   32644:	d139      	bne.n	326ba <am_hal_pwrctrl_dsp_memory_config+0x182>
   32646:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
   32648:	f043 0304 	orr.w	r3, r3, #4
   3264c:	662b      	str	r3, [r5, #96]	@ 0x60
   3264e:	78e3      	ldrb	r3, [r4, #3]
   32650:	4a29      	ldr	r2, [pc, #164]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   32652:	2b00      	cmp	r3, #0
   32654:	d03c      	beq.n	326d0 <am_hal_pwrctrl_dsp_memory_config+0x198>
   32656:	6e13      	ldr	r3, [r2, #96]	@ 0x60
   32658:	f043 0302 	orr.w	r3, r3, #2
   3265c:	6613      	str	r3, [r2, #96]	@ 0x60
   3265e:	7923      	ldrb	r3, [r4, #4]
   32660:	2b00      	cmp	r3, #0
   32662:	d02f      	beq.n	326c4 <am_hal_pwrctrl_dsp_memory_config+0x18c>
   32664:	4b24      	ldr	r3, [pc, #144]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   32666:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32668:	f36f 0200 	bfc	r2, #0, #1
   3266c:	661a      	str	r2, [r3, #96]	@ 0x60
   3266e:	e7ba      	b.n	325e6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   32670:	6d93      	ldr	r3, [r2, #88]	@ 0x58
   32672:	f043 0302 	orr.w	r3, r3, #2
   32676:	6593      	str	r3, [r2, #88]	@ 0x58
   32678:	78a3      	ldrb	r3, [r4, #2]
   3267a:	4a1f      	ldr	r2, [pc, #124]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   3267c:	2b00      	cmp	r3, #0
   3267e:	d1c0      	bne.n	32602 <am_hal_pwrctrl_dsp_memory_config+0xca>
   32680:	6d91      	ldr	r1, [r2, #88]	@ 0x58
   32682:	f363 0100 	bfi	r1, r3, #0, #1
   32686:	6591      	str	r1, [r2, #88]	@ 0x58
   32688:	e7bf      	b.n	3260a <am_hal_pwrctrl_dsp_memory_config+0xd2>
   3268a:	6f91      	ldr	r1, [r2, #120]	@ 0x78
   3268c:	f363 0141 	bfi	r1, r3, #1, #1
   32690:	6791      	str	r1, [r2, #120]	@ 0x78
   32692:	78a3      	ldrb	r3, [r4, #2]
   32694:	4a18      	ldr	r2, [pc, #96]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   32696:	2b00      	cmp	r3, #0
   32698:	f47f af63 	bne.w	32562 <am_hal_pwrctrl_dsp_memory_config+0x2a>
   3269c:	6f91      	ldr	r1, [r2, #120]	@ 0x78
   3269e:	f363 0100 	bfi	r1, r3, #0, #1
   326a2:	6791      	str	r1, [r2, #120]	@ 0x78
   326a4:	e761      	b.n	3256a <am_hal_pwrctrl_dsp_memory_config+0x32>
   326a6:	2001      	movs	r0, #1
   326a8:	b003      	add	sp, #12
   326aa:	bd30      	pop	{r4, r5, pc}
   326ac:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
   326b0:	f360 0382 	bfi	r3, r0, #2, #1
   326b4:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
   326b8:	e77d      	b.n	325b6 <am_hal_pwrctrl_dsp_memory_config+0x7e>
   326ba:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
   326bc:	f360 0382 	bfi	r3, r0, #2, #1
   326c0:	662b      	str	r3, [r5, #96]	@ 0x60
   326c2:	e7c4      	b.n	3264e <am_hal_pwrctrl_dsp_memory_config+0x116>
   326c4:	4a0c      	ldr	r2, [pc, #48]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   326c6:	6e13      	ldr	r3, [r2, #96]	@ 0x60
   326c8:	f043 0301 	orr.w	r3, r3, #1
   326cc:	6613      	str	r3, [r2, #96]	@ 0x60
   326ce:	e78a      	b.n	325e6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   326d0:	6e11      	ldr	r1, [r2, #96]	@ 0x60
   326d2:	f363 0141 	bfi	r1, r3, #1, #1
   326d6:	6611      	str	r1, [r2, #96]	@ 0x60
   326d8:	e7c1      	b.n	3265e <am_hal_pwrctrl_dsp_memory_config+0x126>
   326da:	4a07      	ldr	r2, [pc, #28]	@ (326f8 <am_hal_pwrctrl_dsp_memory_config+0x1c0>)
   326dc:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
   326e0:	f043 0301 	orr.w	r3, r3, #1
   326e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
   326e8:	e77d      	b.n	325e6 <am_hal_pwrctrl_dsp_memory_config+0xae>
   326ea:	f8d2 1080 	ldr.w	r1, [r2, #128]	@ 0x80
   326ee:	f363 0141 	bfi	r1, r3, #1, #1
   326f2:	f8c2 1080 	str.w	r1, [r2, #128]	@ 0x80
   326f6:	e769      	b.n	325cc <am_hal_pwrctrl_dsp_memory_config+0x94>
   326f8:	40021000 	.word	0x40021000
   326fc:	4002107c 	.word	0x4002107c
   32700:	4002105c 	.word	0x4002105c

00032704 <am_hal_pwrctrl_periph_enable>:
   32704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32708:	2821      	cmp	r0, #33	@ 0x21
   3270a:	b089      	sub	sp, #36	@ 0x24
   3270c:	d831      	bhi.n	32772 <am_hal_pwrctrl_periph_enable+0x6e>
   3270e:	4b5e      	ldr	r3, [pc, #376]	@ (32888 <am_hal_pwrctrl_periph_enable+0x184>)
   32710:	0101      	lsls	r1, r0, #4
   32712:	eb03 1200 	add.w	r2, r3, r0, lsl #4
   32716:	585f      	ldr	r7, [r3, r1]
   32718:	f8d2 8004 	ldr.w	r8, [r2, #4]
   3271c:	6839      	ldr	r1, [r7, #0]
   3271e:	ea11 0f08 	tst.w	r1, r8
   32722:	4604      	mov	r4, r0
   32724:	d120      	bne.n	32768 <am_hal_pwrctrl_periph_enable+0x64>
   32726:	2814      	cmp	r0, #20
   32728:	e9d2 6502 	ldrd	r6, r5, [r2, #8]
   3272c:	d026      	beq.n	3277c <am_hal_pwrctrl_periph_enable+0x78>
   3272e:	f7ff fc47 	bl	31fc0 <am_hal_interrupt_master_disable>
   32732:	9005      	str	r0, [sp, #20]
   32734:	683b      	ldr	r3, [r7, #0]
   32736:	ea43 0308 	orr.w	r3, r3, r8
   3273a:	603b      	str	r3, [r7, #0]
   3273c:	9805      	ldr	r0, [sp, #20]
   3273e:	f7ff fc43 	bl	31fc8 <am_hal_interrupt_master_set>
   32742:	2301      	movs	r3, #1
   32744:	9300      	str	r3, [sp, #0]
   32746:	462a      	mov	r2, r5
   32748:	462b      	mov	r3, r5
   3274a:	4631      	mov	r1, r6
   3274c:	2005      	movs	r0, #5
   3274e:	f000 fed1 	bl	334f4 <am_hal_delay_us_status_check>
   32752:	4604      	mov	r4, r0
   32754:	b920      	cbnz	r0, 32760 <am_hal_pwrctrl_periph_enable+0x5c>
   32756:	6833      	ldr	r3, [r6, #0]
   32758:	422b      	tst	r3, r5
   3275a:	bf0c      	ite	eq
   3275c:	2401      	moveq	r4, #1
   3275e:	2400      	movne	r4, #0
   32760:	4620      	mov	r0, r4
   32762:	b009      	add	sp, #36	@ 0x24
   32764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32768:	2400      	movs	r4, #0
   3276a:	4620      	mov	r0, r4
   3276c:	b009      	add	sp, #36	@ 0x24
   3276e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32772:	2406      	movs	r4, #6
   32774:	4620      	mov	r0, r4
   32776:	b009      	add	sp, #36	@ 0x24
   32778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3277c:	f8df 9120 	ldr.w	r9, [pc, #288]	@ 328a0 <am_hal_pwrctrl_periph_enable+0x19c>
   32780:	f8d9 a000 	ldr.w	sl, [r9]
   32784:	f1ba 0f00 	cmp.w	sl, #0
   32788:	d02f      	beq.n	327ea <am_hal_pwrctrl_periph_enable+0xe6>
   3278a:	f8df b108 	ldr.w	fp, [pc, #264]	@ 32894 <am_hal_pwrctrl_periph_enable+0x190>
   3278e:	f89b 3000 	ldrb.w	r3, [fp]
   32792:	bb53      	cbnz	r3, 327ea <am_hal_pwrctrl_periph_enable+0xe6>
   32794:	f7ff fc14 	bl	31fc0 <am_hal_interrupt_master_disable>
   32798:	4a3c      	ldr	r2, [pc, #240]	@ (3288c <am_hal_pwrctrl_periph_enable+0x188>)
   3279a:	493d      	ldr	r1, [pc, #244]	@ (32890 <am_hal_pwrctrl_periph_enable+0x18c>)
   3279c:	6813      	ldr	r3, [r2, #0]
   3279e:	9006      	str	r0, [sp, #24]
   327a0:	4453      	add	r3, sl
   327a2:	6013      	str	r3, [r2, #0]
   327a4:	f383 0006 	usat	r0, #6, r3
   327a8:	680b      	ldr	r3, [r1, #0]
   327aa:	2201      	movs	r2, #1
   327ac:	4453      	add	r3, sl
   327ae:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 32898 <am_hal_pwrctrl_periph_enable+0x194>
   327b2:	600b      	str	r3, [r1, #0]
   327b4:	9303      	str	r3, [sp, #12]
   327b6:	f88b 2000 	strb.w	r2, [fp]
   327ba:	f8da 236c 	ldr.w	r2, [sl, #876]	@ 0x36c
   327be:	f360 5219 	bfi	r2, r0, #20, #6
   327c2:	f8ca 236c 	str.w	r2, [sl, #876]	@ 0x36c
   327c6:	4620      	mov	r0, r4
   327c8:	f000 fe50 	bl	3346c <am_hal_delay_us>
   327cc:	9b03      	ldr	r3, [sp, #12]
   327ce:	f8da 2088 	ldr.w	r2, [sl, #136]	@ 0x88
   327d2:	f383 0306 	usat	r3, #6, r3
   327d6:	f363 0205 	bfi	r2, r3, #0, #6
   327da:	f8ca 2088 	str.w	r2, [sl, #136]	@ 0x88
   327de:	9806      	ldr	r0, [sp, #24]
   327e0:	f7ff fbf2 	bl	31fc8 <am_hal_interrupt_master_set>
   327e4:	4620      	mov	r0, r4
   327e6:	f000 fe41 	bl	3346c <am_hal_delay_us>
   327ea:	f7ff fbe9 	bl	31fc0 <am_hal_interrupt_master_disable>
   327ee:	9005      	str	r0, [sp, #20]
   327f0:	683b      	ldr	r3, [r7, #0]
   327f2:	ea48 0303 	orr.w	r3, r8, r3
   327f6:	603b      	str	r3, [r7, #0]
   327f8:	9805      	ldr	r0, [sp, #20]
   327fa:	f7ff fbe5 	bl	31fc8 <am_hal_interrupt_master_set>
   327fe:	2301      	movs	r3, #1
   32800:	9300      	str	r3, [sp, #0]
   32802:	462a      	mov	r2, r5
   32804:	462b      	mov	r3, r5
   32806:	4631      	mov	r1, r6
   32808:	2005      	movs	r0, #5
   3280a:	f000 fe73 	bl	334f4 <am_hal_delay_us_status_check>
   3280e:	4604      	mov	r4, r0
   32810:	b378      	cbz	r0, 32872 <am_hal_pwrctrl_periph_enable+0x16e>
   32812:	f8d9 5000 	ldr.w	r5, [r9]
   32816:	2d00      	cmp	r5, #0
   32818:	d0a2      	beq.n	32760 <am_hal_pwrctrl_periph_enable+0x5c>
   3281a:	4e1e      	ldr	r6, [pc, #120]	@ (32894 <am_hal_pwrctrl_periph_enable+0x190>)
   3281c:	7833      	ldrb	r3, [r6, #0]
   3281e:	2b00      	cmp	r3, #0
   32820:	d09e      	beq.n	32760 <am_hal_pwrctrl_periph_enable+0x5c>
   32822:	f7ff fbcd 	bl	31fc0 <am_hal_interrupt_master_disable>
   32826:	4b19      	ldr	r3, [pc, #100]	@ (3288c <am_hal_pwrctrl_periph_enable+0x188>)
   32828:	4f1b      	ldr	r7, [pc, #108]	@ (32898 <am_hal_pwrctrl_periph_enable+0x194>)
   3282a:	9007      	str	r0, [sp, #28]
   3282c:	2200      	movs	r2, #0
   3282e:	7032      	strb	r2, [r6, #0]
   32830:	681e      	ldr	r6, [r3, #0]
   32832:	4a17      	ldr	r2, [pc, #92]	@ (32890 <am_hal_pwrctrl_periph_enable+0x18c>)
   32834:	1b76      	subs	r6, r6, r5
   32836:	601e      	str	r6, [r3, #0]
   32838:	6813      	ldr	r3, [r2, #0]
   3283a:	1b5d      	subs	r5, r3, r5
   3283c:	6015      	str	r5, [r2, #0]
   3283e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
   32842:	f385 0506 	usat	r5, #6, r5
   32846:	f365 0305 	bfi	r3, r5, #0, #6
   3284a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   3284e:	2014      	movs	r0, #20
   32850:	f000 fe0c 	bl	3346c <am_hal_delay_us>
   32854:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
   32858:	f386 0606 	usat	r6, #6, r6
   3285c:	f366 5319 	bfi	r3, r6, #20, #6
   32860:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
   32864:	9807      	ldr	r0, [sp, #28]
   32866:	f7ff fbaf 	bl	31fc8 <am_hal_interrupt_master_set>
   3286a:	2014      	movs	r0, #20
   3286c:	f000 fdfe 	bl	3346c <am_hal_delay_us>
   32870:	e776      	b.n	32760 <am_hal_pwrctrl_periph_enable+0x5c>
   32872:	2301      	movs	r3, #1
   32874:	4909      	ldr	r1, [pc, #36]	@ (3289c <am_hal_pwrctrl_periph_enable+0x198>)
   32876:	461a      	mov	r2, r3
   32878:	2064      	movs	r0, #100	@ 0x64
   3287a:	f000 fe0f 	bl	3349c <am_hal_delay_us_status_change>
   3287e:	4604      	mov	r4, r0
   32880:	2800      	cmp	r0, #0
   32882:	f43f af68 	beq.w	32756 <am_hal_pwrctrl_periph_enable+0x52>
   32886:	e76b      	b.n	32760 <am_hal_pwrctrl_periph_enable+0x5c>
   32888:	00047904 	.word	0x00047904
   3288c:	1005501c 	.word	0x1005501c
   32890:	10055018 	.word	0x10055018
   32894:	10055014 	.word	0x10055014
   32898:	40020000 	.word	0x40020000
   3289c:	400c1f10 	.word	0x400c1f10
   328a0:	1005503c 	.word	0x1005503c

000328a4 <am_hal_pwrctrl_periph_disable>:
   328a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   328a8:	2821      	cmp	r0, #33	@ 0x21
   328aa:	b085      	sub	sp, #20
   328ac:	d82b      	bhi.n	32906 <am_hal_pwrctrl_periph_disable+0x62>
   328ae:	4b55      	ldr	r3, [pc, #340]	@ (32a04 <am_hal_pwrctrl_periph_disable+0x160>)
   328b0:	0101      	lsls	r1, r0, #4
   328b2:	eb03 1200 	add.w	r2, r3, r0, lsl #4
   328b6:	585d      	ldr	r5, [r3, r1]
   328b8:	6857      	ldr	r7, [r2, #4]
   328ba:	682b      	ldr	r3, [r5, #0]
   328bc:	423b      	tst	r3, r7
   328be:	4604      	mov	r4, r0
   328c0:	d01c      	beq.n	328fc <am_hal_pwrctrl_periph_disable+0x58>
   328c2:	2814      	cmp	r0, #20
   328c4:	e9d2 9802 	ldrd	r9, r8, [r2, #8]
   328c8:	d105      	bne.n	328d6 <am_hal_pwrctrl_periph_disable+0x32>
   328ca:	f8df a150 	ldr.w	sl, [pc, #336]	@ 32a1c <am_hal_pwrctrl_periph_disable+0x178>
   328ce:	f8da 3fe0 	ldr.w	r3, [sl, #4064]	@ 0xfe0
   328d2:	2bc0      	cmp	r3, #192	@ 0xc0
   328d4:	d037      	beq.n	32946 <am_hal_pwrctrl_periph_disable+0xa2>
   328d6:	f7ff fb73 	bl	31fc0 <am_hal_interrupt_master_disable>
   328da:	9002      	str	r0, [sp, #8]
   328dc:	682b      	ldr	r3, [r5, #0]
   328de:	ea23 0707 	bic.w	r7, r3, r7
   328e2:	602f      	str	r7, [r5, #0]
   328e4:	9802      	ldr	r0, [sp, #8]
   328e6:	f7ff fb6f 	bl	31fc8 <am_hal_interrupt_master_set>
   328ea:	2300      	movs	r3, #0
   328ec:	9300      	str	r3, [sp, #0]
   328ee:	4642      	mov	r2, r8
   328f0:	4643      	mov	r3, r8
   328f2:	4649      	mov	r1, r9
   328f4:	2005      	movs	r0, #5
   328f6:	f000 fdfd 	bl	334f4 <am_hal_delay_us_status_check>
   328fa:	b948      	cbnz	r0, 32910 <am_hal_pwrctrl_periph_disable+0x6c>
   328fc:	2600      	movs	r6, #0
   328fe:	4630      	mov	r0, r6
   32900:	b005      	add	sp, #20
   32902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32906:	2606      	movs	r6, #6
   32908:	4630      	mov	r0, r6
   3290a:	b005      	add	sp, #20
   3290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32910:	f5b8 7ff0 	cmp.w	r8, #480	@ 0x1e0
   32914:	d070      	beq.n	329f8 <am_hal_pwrctrl_periph_disable+0x154>
   32916:	d90b      	bls.n	32930 <am_hal_pwrctrl_periph_disable+0x8c>
   32918:	f5b8 5ff0 	cmp.w	r8, #7680	@ 0x1e00
   3291c:	d067      	beq.n	329ee <am_hal_pwrctrl_periph_disable+0x14a>
   3291e:	f5b8 3fe0 	cmp.w	r8, #114688	@ 0x1c000
   32922:	d1eb      	bne.n	328fc <am_hal_pwrctrl_periph_disable+0x58>
   32924:	682b      	ldr	r3, [r5, #0]
   32926:	f413 3fe0 	tst.w	r3, #114688	@ 0x1c000
   3292a:	d0e7      	beq.n	328fc <am_hal_pwrctrl_periph_disable+0x58>
   3292c:	682b      	ldr	r3, [r5, #0]
   3292e:	e7e5      	b.n	328fc <am_hal_pwrctrl_periph_disable+0x58>
   32930:	f1b8 0f1e 	cmp.w	r8, #30
   32934:	d056      	beq.n	329e4 <am_hal_pwrctrl_periph_disable+0x140>
   32936:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
   3293a:	d1df      	bne.n	328fc <am_hal_pwrctrl_periph_disable+0x58>
   3293c:	682b      	ldr	r3, [r5, #0]
   3293e:	b2db      	uxtb	r3, r3
   32940:	2b00      	cmp	r3, #0
   32942:	d0db      	beq.n	328fc <am_hal_pwrctrl_periph_disable+0x58>
   32944:	e7f2      	b.n	3292c <am_hal_pwrctrl_periph_disable+0x88>
   32946:	2301      	movs	r3, #1
   32948:	492f      	ldr	r1, [pc, #188]	@ (32a08 <am_hal_pwrctrl_periph_disable+0x164>)
   3294a:	461a      	mov	r2, r3
   3294c:	2064      	movs	r0, #100	@ 0x64
   3294e:	f000 fda5 	bl	3349c <am_hal_delay_us_status_change>
   32952:	4606      	mov	r6, r0
   32954:	2800      	cmp	r0, #0
   32956:	d1d2      	bne.n	328fe <am_hal_pwrctrl_periph_disable+0x5a>
   32958:	2301      	movs	r3, #1
   3295a:	492c      	ldr	r1, [pc, #176]	@ (32a0c <am_hal_pwrctrl_periph_disable+0x168>)
   3295c:	461a      	mov	r2, r3
   3295e:	2064      	movs	r0, #100	@ 0x64
   32960:	f000 fd9c 	bl	3349c <am_hal_delay_us_status_change>
   32964:	4606      	mov	r6, r0
   32966:	2800      	cmp	r0, #0
   32968:	d1c9      	bne.n	328fe <am_hal_pwrctrl_periph_disable+0x5a>
   3296a:	f8da 3a80 	ldr.w	r3, [sl, #2688]	@ 0xa80
   3296e:	f043 0301 	orr.w	r3, r3, #1
   32972:	f8ca 3a80 	str.w	r3, [sl, #2688]	@ 0xa80
   32976:	4b26      	ldr	r3, [pc, #152]	@ (32a10 <am_hal_pwrctrl_periph_disable+0x16c>)
   32978:	f8d3 a000 	ldr.w	sl, [r3]
   3297c:	f1ba 0f00 	cmp.w	sl, #0
   32980:	d0a9      	beq.n	328d6 <am_hal_pwrctrl_periph_disable+0x32>
   32982:	f8df b09c 	ldr.w	fp, [pc, #156]	@ 32a20 <am_hal_pwrctrl_periph_disable+0x17c>
   32986:	f89b 3000 	ldrb.w	r3, [fp]
   3298a:	2b00      	cmp	r3, #0
   3298c:	d0a3      	beq.n	328d6 <am_hal_pwrctrl_periph_disable+0x32>
   3298e:	f7ff fb17 	bl	31fc0 <am_hal_interrupt_master_disable>
   32992:	4b20      	ldr	r3, [pc, #128]	@ (32a14 <am_hal_pwrctrl_periph_disable+0x170>)
   32994:	f88b 6000 	strb.w	r6, [fp]
   32998:	681e      	ldr	r6, [r3, #0]
   3299a:	4a1f      	ldr	r2, [pc, #124]	@ (32a18 <am_hal_pwrctrl_periph_disable+0x174>)
   3299c:	9003      	str	r0, [sp, #12]
   3299e:	eba6 060a 	sub.w	r6, r6, sl
   329a2:	601e      	str	r6, [r3, #0]
   329a4:	6813      	ldr	r3, [r2, #0]
   329a6:	eba3 030a 	sub.w	r3, r3, sl
   329aa:	f8df a078 	ldr.w	sl, [pc, #120]	@ 32a24 <am_hal_pwrctrl_periph_disable+0x180>
   329ae:	6013      	str	r3, [r2, #0]
   329b0:	f8da 2088 	ldr.w	r2, [sl, #136]	@ 0x88
   329b4:	f383 0306 	usat	r3, #6, r3
   329b8:	f363 0205 	bfi	r2, r3, #0, #6
   329bc:	4620      	mov	r0, r4
   329be:	f8ca 2088 	str.w	r2, [sl, #136]	@ 0x88
   329c2:	f000 fd53 	bl	3346c <am_hal_delay_us>
   329c6:	f8da 336c 	ldr.w	r3, [sl, #876]	@ 0x36c
   329ca:	f386 0606 	usat	r6, #6, r6
   329ce:	f366 5319 	bfi	r3, r6, #20, #6
   329d2:	f8ca 336c 	str.w	r3, [sl, #876]	@ 0x36c
   329d6:	9803      	ldr	r0, [sp, #12]
   329d8:	f7ff faf6 	bl	31fc8 <am_hal_interrupt_master_set>
   329dc:	4620      	mov	r0, r4
   329de:	f000 fd45 	bl	3346c <am_hal_delay_us>
   329e2:	e778      	b.n	328d6 <am_hal_pwrctrl_periph_disable+0x32>
   329e4:	682b      	ldr	r3, [r5, #0]
   329e6:	f013 0f1e 	tst.w	r3, #30
   329ea:	d087      	beq.n	328fc <am_hal_pwrctrl_periph_disable+0x58>
   329ec:	e79e      	b.n	3292c <am_hal_pwrctrl_periph_disable+0x88>
   329ee:	682b      	ldr	r3, [r5, #0]
   329f0:	f413 5ff0 	tst.w	r3, #7680	@ 0x1e00
   329f4:	d082      	beq.n	328fc <am_hal_pwrctrl_periph_disable+0x58>
   329f6:	e799      	b.n	3292c <am_hal_pwrctrl_periph_disable+0x88>
   329f8:	682b      	ldr	r3, [r5, #0]
   329fa:	f413 7ff0 	tst.w	r3, #480	@ 0x1e0
   329fe:	f43f af7d 	beq.w	328fc <am_hal_pwrctrl_periph_disable+0x58>
   32a02:	e793      	b.n	3292c <am_hal_pwrctrl_periph_disable+0x88>
   32a04:	00047904 	.word	0x00047904
   32a08:	400c0a7c 	.word	0x400c0a7c
   32a0c:	400c1f10 	.word	0x400c1f10
   32a10:	1005503c 	.word	0x1005503c
   32a14:	1005501c 	.word	0x1005501c
   32a18:	10055018 	.word	0x10055018
   32a1c:	400c0000 	.word	0x400c0000
   32a20:	10055014 	.word	0x10055014
   32a24:	40020000 	.word	0x40020000

00032a28 <am_hal_pwrctrl_low_power_init>:
   32a28:	b530      	push	{r4, r5, lr}
   32a2a:	4c54      	ldr	r4, [pc, #336]	@ (32b7c <am_hal_pwrctrl_low_power_init+0x154>)
   32a2c:	4a54      	ldr	r2, [pc, #336]	@ (32b80 <am_hal_pwrctrl_low_power_init+0x158>)
   32a2e:	68a3      	ldr	r3, [r4, #8]
   32a30:	4854      	ldr	r0, [pc, #336]	@ (32b84 <am_hal_pwrctrl_low_power_init+0x15c>)
   32a32:	b083      	sub	sp, #12
   32a34:	f04f 2540 	mov.w	r5, #1073758208	@ 0x40004000
   32a38:	f3c3 5300 	ubfx	r3, r3, #20, #1
   32a3c:	7013      	strb	r3, [r2, #0]
   32a3e:	f7ff fc75 	bl	3232c <am_hal_pwrctrl_mcu_memory_config>
   32a42:	4851      	ldr	r0, [pc, #324]	@ (32b88 <am_hal_pwrctrl_low_power_init+0x160>)
   32a44:	f7ff fd20 	bl	32488 <am_hal_pwrctrl_sram_config>
   32a48:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
   32a4a:	4850      	ldr	r0, [pc, #320]	@ (32b8c <am_hal_pwrctrl_low_power_init+0x164>)
   32a4c:	2300      	movs	r3, #0
   32a4e:	f442 027c 	orr.w	r2, r2, #16515072	@ 0xfc0000
   32a52:	646a      	str	r2, [r5, #68]	@ 0x44
   32a54:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
   32a58:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
   32a5c:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
   32a60:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
   32a64:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
   32a68:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
   32a6c:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
   32a70:	f8c4 315c 	str.w	r3, [r4, #348]	@ 0x15c
   32a74:	f8c4 3160 	str.w	r3, [r4, #352]	@ 0x160
   32a78:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
   32a7c:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
   32a80:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
   32a84:	f8c4 3170 	str.w	r3, [r4, #368]	@ 0x170
   32a88:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
   32a8c:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
   32a90:	f8c4 317c 	str.w	r3, [r4, #380]	@ 0x17c
   32a94:	f8c4 3180 	str.w	r3, [r4, #384]	@ 0x180
   32a98:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
   32a9c:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
   32aa0:	f7fe ffc6 	bl	31a30 <am_hal_daxi_config>
   32aa4:	2064      	movs	r0, #100	@ 0x64
   32aa6:	f000 fce1 	bl	3346c <am_hal_delay_us>
   32aaa:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
   32aac:	4b38      	ldr	r3, [pc, #224]	@ (32b90 <am_hal_pwrctrl_low_power_init+0x168>)
   32aae:	4c39      	ldr	r4, [pc, #228]	@ (32b94 <am_hal_pwrctrl_low_power_init+0x16c>)
   32ab0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
   32ab4:	646a      	str	r2, [r5, #68]	@ 0x44
   32ab6:	f8d3 237c 	ldr.w	r2, [r3, #892]	@ 0x37c
   32aba:	f042 62bf 	orr.w	r2, r2, #100139008	@ 0x5f80000
   32abe:	f442 22d0 	orr.w	r2, r2, #425984	@ 0x68000
   32ac2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
   32ac6:	f8d3 2444 	ldr.w	r2, [r3, #1092]	@ 0x444
   32aca:	2104      	movs	r1, #4
   32acc:	f361 220f 	bfi	r2, r1, #8, #8
   32ad0:	f8c3 2444 	str.w	r2, [r3, #1092]	@ 0x444
   32ad4:	7822      	ldrb	r2, [r4, #0]
   32ad6:	b1da      	cbz	r2, 32b10 <am_hal_pwrctrl_low_power_init+0xe8>
   32ad8:	4a2f      	ldr	r2, [pc, #188]	@ (32b98 <am_hal_pwrctrl_low_power_init+0x170>)
   32ada:	4b30      	ldr	r3, [pc, #192]	@ (32b9c <am_hal_pwrctrl_low_power_init+0x174>)
   32adc:	6810      	ldr	r0, [r2, #0]
   32ade:	6819      	ldr	r1, [r3, #0]
   32ae0:	4b2f      	ldr	r3, [pc, #188]	@ (32ba0 <am_hal_pwrctrl_low_power_init+0x178>)
   32ae2:	4d30      	ldr	r5, [pc, #192]	@ (32ba4 <am_hal_pwrctrl_low_power_init+0x17c>)
   32ae4:	4c30      	ldr	r4, [pc, #192]	@ (32ba8 <am_hal_pwrctrl_low_power_init+0x180>)
   32ae6:	6018      	str	r0, [r3, #0]
   32ae8:	2201      	movs	r2, #1
   32aea:	2300      	movs	r3, #0
   32aec:	6029      	str	r1, [r5, #0]
   32aee:	6023      	str	r3, [r4, #0]
   32af0:	f44f 6192 	mov.w	r1, #1168	@ 0x490
   32af4:	ab01      	add	r3, sp, #4
   32af6:	4610      	mov	r0, r2
   32af8:	f7ff fb10 	bl	3211c <am_hal_mram_info_read>
   32afc:	b928      	cbnz	r0, 32b0a <am_hal_pwrctrl_low_power_init+0xe2>
   32afe:	9b01      	ldr	r3, [sp, #4]
   32b00:	f013 0f06 	tst.w	r3, #6
   32b04:	d129      	bne.n	32b5a <am_hal_pwrctrl_low_power_init+0x132>
   32b06:	2303      	movs	r3, #3
   32b08:	6023      	str	r3, [r4, #0]
   32b0a:	2000      	movs	r0, #0
   32b0c:	b003      	add	sp, #12
   32b0e:	bd30      	pop	{r4, r5, pc}
   32b10:	f8d3 036c 	ldr.w	r0, [r3, #876]	@ 0x36c
   32b14:	4a20      	ldr	r2, [pc, #128]	@ (32b98 <am_hal_pwrctrl_low_power_init+0x170>)
   32b16:	4d25      	ldr	r5, [pc, #148]	@ (32bac <am_hal_pwrctrl_low_power_init+0x184>)
   32b18:	f3c0 5005 	ubfx	r0, r0, #20, #6
   32b1c:	6010      	str	r0, [r2, #0]
   32b1e:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
   32b22:	4a1e      	ldr	r2, [pc, #120]	@ (32b9c <am_hal_pwrctrl_low_power_init+0x174>)
   32b24:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
   32b28:	6011      	str	r1, [r2, #0]
   32b2a:	f8d3 236c 	ldr.w	r2, [r3, #876]	@ 0x36c
   32b2e:	0e92      	lsrs	r2, r2, #26
   32b30:	602a      	str	r2, [r5, #0]
   32b32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
   32b36:	4d1e      	ldr	r5, [pc, #120]	@ (32bb0 <am_hal_pwrctrl_low_power_init+0x188>)
   32b38:	f3c2 4285 	ubfx	r2, r2, #18, #6
   32b3c:	602a      	str	r2, [r5, #0]
   32b3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
   32b40:	4d1c      	ldr	r5, [pc, #112]	@ (32bb4 <am_hal_pwrctrl_low_power_init+0x18c>)
   32b42:	f3c2 12c6 	ubfx	r2, r2, #7, #7
   32b46:	602a      	str	r2, [r5, #0]
   32b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
   32b4c:	4a1a      	ldr	r2, [pc, #104]	@ (32bb8 <am_hal_pwrctrl_low_power_init+0x190>)
   32b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   32b52:	6013      	str	r3, [r2, #0]
   32b54:	2301      	movs	r3, #1
   32b56:	7023      	strb	r3, [r4, #0]
   32b58:	e7c2      	b.n	32ae0 <am_hal_pwrctrl_low_power_init+0xb8>
   32b5a:	079a      	lsls	r2, r3, #30
   32b5c:	d404      	bmi.n	32b68 <am_hal_pwrctrl_low_power_init+0x140>
   32b5e:	2306      	movs	r3, #6
   32b60:	2000      	movs	r0, #0
   32b62:	6023      	str	r3, [r4, #0]
   32b64:	b003      	add	sp, #12
   32b66:	bd30      	pop	{r4, r5, pc}
   32b68:	075b      	lsls	r3, r3, #29
   32b6a:	bf54      	ite	pl
   32b6c:	2309      	movpl	r3, #9
   32b6e:	6020      	strmi	r0, [r4, #0]
   32b70:	f04f 0000 	mov.w	r0, #0
   32b74:	bf58      	it	pl
   32b76:	6023      	strpl	r3, [r4, #0]
   32b78:	b003      	add	sp, #12
   32b7a:	bd30      	pop	{r4, r5, pc}
   32b7c:	40021000 	.word	0x40021000
   32b80:	10055014 	.word	0x10055014
   32b84:	00047b24 	.word	0x00047b24
   32b88:	00047b2c 	.word	0x00047b2c
   32b8c:	000478e0 	.word	0x000478e0
   32b90:	40020000 	.word	0x40020000
   32b94:	10055015 	.word	0x10055015
   32b98:	10055020 	.word	0x10055020
   32b9c:	1005502c 	.word	0x1005502c
   32ba0:	1005501c 	.word	0x1005501c
   32ba4:	10055018 	.word	0x10055018
   32ba8:	1005503c 	.word	0x1005503c
   32bac:	10055028 	.word	0x10055028
   32bb0:	10055030 	.word	0x10055030
   32bb4:	10055034 	.word	0x10055034
   32bb8:	10055024 	.word	0x10055024

00032bbc <buck_ldo_update_override>:
   32bbc:	4b06      	ldr	r3, [pc, #24]	@ (32bd8 <buck_ldo_update_override+0x1c>)
   32bbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32bc0:	f360 4210 	bfi	r2, r0, #16, #1
   32bc4:	661a      	str	r2, [r3, #96]	@ 0x60
   32bc6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32bc8:	f360 0200 	bfi	r2, r0, #0, #1
   32bcc:	661a      	str	r2, [r3, #96]	@ 0x60
   32bce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32bd0:	f360 1245 	bfi	r2, r0, #5, #1
   32bd4:	661a      	str	r2, [r3, #96]	@ 0x60
   32bd6:	4770      	bx	lr
   32bd8:	40020000 	.word	0x40020000

00032bdc <am_hal_pwrctrl_control>:
   32bdc:	2804      	cmp	r0, #4
   32bde:	f200 812b 	bhi.w	32e38 <am_hal_pwrctrl_control+0x25c>
   32be2:	e8df f000 	tbb	[pc, r0]
   32be6:	8c0b      	.short	0x8c0b
   32be8:	a093      	.short	0xa093
   32bea:	03          	.byte	0x03
   32beb:	00          	.byte	0x00
   32bec:	2900      	cmp	r1, #0
   32bee:	f000 8123 	beq.w	32e38 <am_hal_pwrctrl_control+0x25c>
   32bf2:	4b92      	ldr	r3, [pc, #584]	@ (32e3c <am_hal_pwrctrl_control+0x260>)
   32bf4:	681b      	ldr	r3, [r3, #0]
   32bf6:	600b      	str	r3, [r1, #0]
   32bf8:	2006      	movs	r0, #6
   32bfa:	4770      	bx	lr
   32bfc:	b510      	push	{r4, lr}
   32bfe:	4c90      	ldr	r4, [pc, #576]	@ (32e40 <am_hal_pwrctrl_control+0x264>)
   32c00:	6822      	ldr	r2, [r4, #0]
   32c02:	1c51      	adds	r1, r2, #1
   32c04:	f000 8093 	beq.w	32d2e <am_hal_pwrctrl_control+0x152>
   32c08:	2a02      	cmp	r2, #2
   32c0a:	f240 809e 	bls.w	32d4a <am_hal_pwrctrl_control+0x16e>
   32c0e:	4b8d      	ldr	r3, [pc, #564]	@ (32e44 <am_hal_pwrctrl_control+0x268>)
   32c10:	4c8d      	ldr	r4, [pc, #564]	@ (32e48 <am_hal_pwrctrl_control+0x26c>)
   32c12:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
   32c16:	200a      	movs	r0, #10
   32c18:	f360 619d 	bfi	r1, r0, #26, #4
   32c1c:	f8c3 1348 	str.w	r1, [r3, #840]	@ 0x348
   32c20:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
   32c24:	f360 3150 	bfi	r1, r0, #13, #4
   32c28:	f8c3 1348 	str.w	r1, [r3, #840]	@ 0x348
   32c2c:	f8d3 135c 	ldr.w	r1, [r3, #860]	@ 0x35c
   32c30:	f041 7170 	orr.w	r1, r1, #62914560	@ 0x3c00000
   32c34:	f8c3 135c 	str.w	r1, [r3, #860]	@ 0x35c
   32c38:	f8d3 135c 	ldr.w	r1, [r3, #860]	@ 0x35c
   32c3c:	f441 51f0 	orr.w	r1, r1, #7680	@ 0x1e00
   32c40:	f8c3 135c 	str.w	r1, [r3, #860]	@ 0x35c
   32c44:	f8d3 1380 	ldr.w	r1, [r3, #896]	@ 0x380
   32c48:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
   32c4c:	f8c3 1380 	str.w	r1, [r3, #896]	@ 0x380
   32c50:	f8d3 1380 	ldr.w	r1, [r3, #896]	@ 0x380
   32c54:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
   32c58:	f8c3 1380 	str.w	r1, [r3, #896]	@ 0x380
   32c5c:	f8d3 1370 	ldr.w	r1, [r3, #880]	@ 0x370
   32c60:	f3c1 5105 	ubfx	r1, r1, #20, #6
   32c64:	6021      	str	r1, [r4, #0]
   32c66:	f8d3 1370 	ldr.w	r1, [r3, #880]	@ 0x370
   32c6a:	2007      	movs	r0, #7
   32c6c:	f36f 5119 	bfc	r1, #20, #6
   32c70:	2a05      	cmp	r2, #5
   32c72:	f8c3 1370 	str.w	r1, [r3, #880]	@ 0x370
   32c76:	f8c3 033c 	str.w	r0, [r3, #828]	@ 0x33c
   32c7a:	d908      	bls.n	32c8e <am_hal_pwrctrl_control+0xb2>
   32c7c:	220f      	movs	r2, #15
   32c7e:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
   32c82:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
   32c86:	f022 0218 	bic.w	r2, r2, #24
   32c8a:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
   32c8e:	496f      	ldr	r1, [pc, #444]	@ (32e4c <am_hal_pwrctrl_control+0x270>)
   32c90:	4b6c      	ldr	r3, [pc, #432]	@ (32e44 <am_hal_pwrctrl_control+0x268>)
   32c92:	f8d1 2100 	ldr.w	r2, [r1, #256]	@ 0x100
   32c96:	f042 0201 	orr.w	r2, r2, #1
   32c9a:	f8c1 2100 	str.w	r2, [r1, #256]	@ 0x100
   32c9e:	f8d3 2378 	ldr.w	r2, [r3, #888]	@ 0x378
   32ca2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
   32ca6:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
   32caa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32cac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
   32cb0:	661a      	str	r2, [r3, #96]	@ 0x60
   32cb2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32cb4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
   32cb8:	661a      	str	r2, [r3, #96]	@ 0x60
   32cba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32cbc:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
   32cc0:	661a      	str	r2, [r3, #96]	@ 0x60
   32cc2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32cc4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
   32cc8:	661a      	str	r2, [r3, #96]	@ 0x60
   32cca:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32ccc:	f36f 1204 	bfc	r2, #4, #1
   32cd0:	661a      	str	r2, [r3, #96]	@ 0x60
   32cd2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32cd4:	f042 020e 	orr.w	r2, r2, #14
   32cd8:	661a      	str	r2, [r3, #96]	@ 0x60
   32cda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32cdc:	f042 0201 	orr.w	r2, r2, #1
   32ce0:	661a      	str	r2, [r3, #96]	@ 0x60
   32ce2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32ce4:	f36f 2249 	bfc	r2, #9, #1
   32ce8:	661a      	str	r2, [r3, #96]	@ 0x60
   32cea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32cec:	f442 72e0 	orr.w	r2, r2, #448	@ 0x1c0
   32cf0:	661a      	str	r2, [r3, #96]	@ 0x60
   32cf2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
   32cf4:	f042 0220 	orr.w	r2, r2, #32
   32cf8:	661a      	str	r2, [r3, #96]	@ 0x60
   32cfa:	2000      	movs	r0, #0
   32cfc:	bd10      	pop	{r4, pc}
   32cfe:	4b53      	ldr	r3, [pc, #332]	@ (32e4c <am_hal_pwrctrl_control+0x270>)
   32d00:	6898      	ldr	r0, [r3, #8]
   32d02:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
   32d06:	f040 8094 	bne.w	32e32 <am_hal_pwrctrl_control+0x256>
   32d0a:	4770      	bx	lr
   32d0c:	4b4d      	ldr	r3, [pc, #308]	@ (32e44 <am_hal_pwrctrl_control+0x268>)
   32d0e:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
   32d12:	2020      	movs	r0, #32
   32d14:	f360 0287 	bfi	r2, r0, #2, #6
   32d18:	2101      	movs	r1, #1
   32d1a:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
   32d1e:	2000      	movs	r0, #0
   32d20:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
   32d24:	4770      	bx	lr
   32d26:	4b49      	ldr	r3, [pc, #292]	@ (32e4c <am_hal_pwrctrl_control+0x270>)
   32d28:	2000      	movs	r0, #0
   32d2a:	6058      	str	r0, [r3, #4]
   32d2c:	4770      	bx	lr
   32d2e:	2201      	movs	r2, #1
   32d30:	4623      	mov	r3, r4
   32d32:	f240 41c4 	movw	r1, #1220	@ 0x4c4
   32d36:	4610      	mov	r0, r2
   32d38:	f7ff f9f0 	bl	3211c <am_hal_mram_info_read>
   32d3c:	b918      	cbnz	r0, 32d46 <am_hal_pwrctrl_control+0x16a>
   32d3e:	6822      	ldr	r2, [r4, #0]
   32d40:	1c53      	adds	r3, r2, #1
   32d42:	f47f af61 	bne.w	32c08 <am_hal_pwrctrl_control+0x2c>
   32d46:	2300      	movs	r3, #0
   32d48:	6023      	str	r3, [r4, #0]
   32d4a:	4b3e      	ldr	r3, [pc, #248]	@ (32e44 <am_hal_pwrctrl_control+0x268>)
   32d4c:	483e      	ldr	r0, [pc, #248]	@ (32e48 <am_hal_pwrctrl_control+0x26c>)
   32d4e:	f8d3 1378 	ldr.w	r1, [r3, #888]	@ 0x378
   32d52:	f36f 611c 	bfc	r1, #24, #5
   32d56:	f8c3 1378 	str.w	r1, [r3, #888]	@ 0x378
   32d5a:	f8d3 1358 	ldr.w	r1, [r3, #856]	@ 0x358
   32d5e:	f36f 4196 	bfc	r1, #18, #5
   32d62:	f8c3 1358 	str.w	r1, [r3, #856]	@ 0x358
   32d66:	f8d3 1344 	ldr.w	r1, [r3, #836]	@ 0x344
   32d6a:	220a      	movs	r2, #10
   32d6c:	f362 611c 	bfi	r1, r2, #24, #5
   32d70:	f8c3 1344 	str.w	r1, [r3, #836]	@ 0x344
   32d74:	f8d3 1344 	ldr.w	r1, [r3, #836]	@ 0x344
   32d78:	f362 21ce 	bfi	r1, r2, #11, #4
   32d7c:	f8c3 1344 	str.w	r1, [r3, #836]	@ 0x344
   32d80:	f8d3 1358 	ldr.w	r1, [r3, #856]	@ 0x358
   32d84:	240f      	movs	r4, #15
   32d86:	f364 210c 	bfi	r1, r4, #8, #5
   32d8a:	f8c3 1358 	str.w	r1, [r3, #856]	@ 0x358
   32d8e:	f8d3 1354 	ldr.w	r1, [r3, #852]	@ 0x354
   32d92:	f441 11f0 	orr.w	r1, r1, #1966080	@ 0x1e0000
   32d96:	f8c3 1354 	str.w	r1, [r3, #852]	@ 0x354
   32d9a:	f8d3 1360 	ldr.w	r1, [r3, #864]	@ 0x360
   32d9e:	f364 519a 	bfi	r1, r4, #22, #5
   32da2:	f8c3 1360 	str.w	r1, [r3, #864]	@ 0x360
   32da6:	f8d3 1360 	ldr.w	r1, [r3, #864]	@ 0x360
   32daa:	f441 11f0 	orr.w	r1, r1, #1966080	@ 0x1e0000
   32dae:	f8c3 1360 	str.w	r1, [r3, #864]	@ 0x360
   32db2:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
   32db6:	f362 619d 	bfi	r1, r2, #26, #4
   32dba:	f8c3 1348 	str.w	r1, [r3, #840]	@ 0x348
   32dbe:	f8d3 1348 	ldr.w	r1, [r3, #840]	@ 0x348
   32dc2:	f362 3150 	bfi	r1, r2, #13, #4
   32dc6:	f8c3 1348 	str.w	r1, [r3, #840]	@ 0x348
   32dca:	f8d3 235c 	ldr.w	r2, [r3, #860]	@ 0x35c
   32dce:	f042 7270 	orr.w	r2, r2, #62914560	@ 0x3c00000
   32dd2:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
   32dd6:	f8d3 235c 	ldr.w	r2, [r3, #860]	@ 0x35c
   32dda:	f442 52f0 	orr.w	r2, r2, #7680	@ 0x1e00
   32dde:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
   32de2:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
   32de6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
   32dea:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
   32dee:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
   32df2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
   32df6:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
   32dfa:	f8d3 2370 	ldr.w	r2, [r3, #880]	@ 0x370
   32dfe:	f3c2 5205 	ubfx	r2, r2, #20, #6
   32e02:	6002      	str	r2, [r0, #0]
   32e04:	f8d3 2370 	ldr.w	r2, [r3, #880]	@ 0x370
   32e08:	2407      	movs	r4, #7
   32e0a:	f36f 5219 	bfc	r2, #20, #6
   32e0e:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
   32e12:	f8c3 433c 	str.w	r4, [r3, #828]	@ 0x33c
   32e16:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
   32e1a:	f36f 5299 	bfc	r2, #22, #4
   32e1e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
   32e22:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
   32e26:	2101      	movs	r1, #1
   32e28:	f361 128a 	bfi	r2, r1, #6, #5
   32e2c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
   32e30:	e72d      	b.n	32c8e <am_hal_pwrctrl_control+0xb2>
   32e32:	2014      	movs	r0, #20
   32e34:	f7ff bd36 	b.w	328a4 <am_hal_pwrctrl_periph_disable>
   32e38:	2006      	movs	r0, #6
   32e3a:	4770      	bx	lr
   32e3c:	10055038 	.word	0x10055038
   32e40:	1000cb74 	.word	0x1000cb74
   32e44:	40020000 	.word	0x40020000
   32e48:	1000cb78 	.word	0x1000cb78
   32e4c:	40021000 	.word	0x40021000

00032e50 <am_hal_pwrctrl_tempco_init>:
   32e50:	b570      	push	{r4, r5, r6, lr}
   32e52:	b086      	sub	sp, #24
   32e54:	460c      	mov	r4, r1
   32e56:	4605      	mov	r5, r0
   32e58:	ab03      	add	r3, sp, #12
   32e5a:	2203      	movs	r2, #3
   32e5c:	f44f 6198 	mov.w	r1, #1216	@ 0x4c0
   32e60:	2001      	movs	r0, #1
   32e62:	f7ff f95b 	bl	3211c <am_hal_mram_info_read>
   32e66:	bb08      	cbnz	r0, 32eac <am_hal_pwrctrl_tempco_init+0x5c>
   32e68:	9b03      	ldr	r3, [sp, #12]
   32e6a:	3301      	adds	r3, #1
   32e6c:	d01e      	beq.n	32eac <am_hal_pwrctrl_tempco_init+0x5c>
   32e6e:	9b04      	ldr	r3, [sp, #16]
   32e70:	3301      	adds	r3, #1
   32e72:	d01b      	beq.n	32eac <am_hal_pwrctrl_tempco_init+0x5c>
   32e74:	9b05      	ldr	r3, [sp, #20]
   32e76:	3301      	adds	r3, #1
   32e78:	d018      	beq.n	32eac <am_hal_pwrctrl_tempco_init+0x5c>
   32e7a:	4e19      	ldr	r6, [pc, #100]	@ (32ee0 <am_hal_pwrctrl_tempco_init+0x90>)
   32e7c:	6832      	ldr	r2, [r6, #0]
   32e7e:	1c51      	adds	r1, r2, #1
   32e80:	d01a      	beq.n	32eb8 <am_hal_pwrctrl_tempco_init+0x68>
   32e82:	2a05      	cmp	r2, #5
   32e84:	d922      	bls.n	32ecc <am_hal_pwrctrl_tempco_init+0x7c>
   32e86:	4a17      	ldr	r2, [pc, #92]	@ (32ee4 <am_hal_pwrctrl_tempco_init+0x94>)
   32e88:	4817      	ldr	r0, [pc, #92]	@ (32ee8 <am_hal_pwrctrl_tempco_init+0x98>)
   32e8a:	4b18      	ldr	r3, [pc, #96]	@ (32eec <am_hal_pwrctrl_tempco_init+0x9c>)
   32e8c:	6005      	str	r5, [r0, #0]
   32e8e:	2101      	movs	r1, #1
   32e90:	7011      	strb	r1, [r2, #0]
   32e92:	2200      	movs	r2, #0
   32e94:	4621      	mov	r1, r4
   32e96:	f88d 2000 	strb.w	r2, [sp]
   32e9a:	4628      	mov	r0, r5
   32e9c:	2420      	movs	r4, #32
   32e9e:	466a      	mov	r2, sp
   32ea0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   32ea4:	f7fe fa9e 	bl	313e4 <am_hal_adc_configure_slot>
   32ea8:	b006      	add	sp, #24
   32eaa:	bd70      	pop	{r4, r5, r6, pc}
   32eac:	4b0d      	ldr	r3, [pc, #52]	@ (32ee4 <am_hal_pwrctrl_tempco_init+0x94>)
   32eae:	2200      	movs	r2, #0
   32eb0:	2009      	movs	r0, #9
   32eb2:	701a      	strb	r2, [r3, #0]
   32eb4:	b006      	add	sp, #24
   32eb6:	bd70      	pop	{r4, r5, r6, pc}
   32eb8:	2201      	movs	r2, #1
   32eba:	4633      	mov	r3, r6
   32ebc:	f240 41c4 	movw	r1, #1220	@ 0x4c4
   32ec0:	4610      	mov	r0, r2
   32ec2:	f7ff f92b 	bl	3211c <am_hal_mram_info_read>
   32ec6:	b138      	cbz	r0, 32ed8 <am_hal_pwrctrl_tempco_init+0x88>
   32ec8:	2300      	movs	r3, #0
   32eca:	6033      	str	r3, [r6, #0]
   32ecc:	4b05      	ldr	r3, [pc, #20]	@ (32ee4 <am_hal_pwrctrl_tempco_init+0x94>)
   32ece:	2200      	movs	r2, #0
   32ed0:	2001      	movs	r0, #1
   32ed2:	701a      	strb	r2, [r3, #0]
   32ed4:	b006      	add	sp, #24
   32ed6:	bd70      	pop	{r4, r5, r6, pc}
   32ed8:	6832      	ldr	r2, [r6, #0]
   32eda:	1c53      	adds	r3, r2, #1
   32edc:	d1d1      	bne.n	32e82 <am_hal_pwrctrl_tempco_init+0x32>
   32ede:	e7f3      	b.n	32ec8 <am_hal_pwrctrl_tempco_init+0x78>
   32ee0:	1000cb74 	.word	0x1000cb74
   32ee4:	10055016 	.word	0x10055016
   32ee8:	10055010 	.word	0x10055010
   32eec:	01000800 	.word	0x01000800

00032ef0 <am_hal_pwrctrl_tempco_sample_handler>:
   32ef0:	b530      	push	{r4, r5, lr}
   32ef2:	4b60      	ldr	r3, [pc, #384]	@ (33074 <am_hal_pwrctrl_tempco_sample_handler+0x184>)
   32ef4:	781b      	ldrb	r3, [r3, #0]
   32ef6:	b085      	sub	sp, #20
   32ef8:	b10b      	cbz	r3, 32efe <am_hal_pwrctrl_tempco_sample_handler+0xe>
   32efa:	2804      	cmp	r0, #4
   32efc:	d803      	bhi.n	32f06 <am_hal_pwrctrl_tempco_sample_handler+0x16>
   32efe:	2401      	movs	r4, #1
   32f00:	4620      	mov	r0, r4
   32f02:	b005      	add	sp, #20
   32f04:	bd30      	pop	{r4, r5, pc}
   32f06:	680a      	ldr	r2, [r1, #0]
   32f08:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
   32f0c:	2300      	movs	r3, #0
   32f0e:	3301      	adds	r3, #1
   32f10:	4694      	mov	ip, r2
   32f12:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
   32f16:	4562      	cmp	r2, ip
   32f18:	d10d      	bne.n	32f36 <am_hal_pwrctrl_tempco_sample_handler+0x46>
   32f1a:	4573      	cmp	r3, lr
   32f1c:	d1f7      	bne.n	32f0e <am_hal_pwrctrl_tempco_sample_handler+0x1e>
   32f1e:	4b56      	ldr	r3, [pc, #344]	@ (33078 <am_hal_pwrctrl_tempco_sample_handler+0x188>)
   32f20:	781b      	ldrb	r3, [r3, #0]
   32f22:	2b00      	cmp	r3, #0
   32f24:	d0eb      	beq.n	32efe <am_hal_pwrctrl_tempco_sample_handler+0xe>
   32f26:	2300      	movs	r3, #0
   32f28:	2208      	movs	r2, #8
   32f2a:	4619      	mov	r1, r3
   32f2c:	4618      	mov	r0, r3
   32f2e:	f7ff f927 	bl	32180 <tempco_set_trims.part.0>
   32f32:	2401      	movs	r4, #1
   32f34:	e7e4      	b.n	32f00 <am_hal_pwrctrl_tempco_sample_handler+0x10>
   32f36:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 3307c <am_hal_pwrctrl_tempco_sample_handler+0x18c>
   32f3a:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 33080 <am_hal_pwrctrl_tempco_sample_handler+0x190>
   32f3e:	eddf 6a51 	vldr	s13, [pc, #324]	@ 33084 <am_hal_pwrctrl_tempco_sample_handler+0x194>
   32f42:	2200      	movs	r2, #0
   32f44:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
   32f48:	f3c3 138d 	ubfx	r3, r3, #6, #14
   32f4c:	ee07 3a90 	vmov	s15, r3
   32f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
   32f54:	3201      	adds	r2, #1
   32f56:	ee67 7a86 	vmul.f32	s15, s15, s12
   32f5a:	4290      	cmp	r0, r2
   32f5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
   32f60:	ee37 7a27 	vadd.f32	s14, s14, s15
   32f64:	d1ee      	bne.n	32f44 <am_hal_pwrctrl_tempco_sample_handler+0x54>
   32f66:	ee07 0a90 	vmov	s15, r0
   32f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   32f6e:	4a46      	ldr	r2, [pc, #280]	@ (33088 <am_hal_pwrctrl_tempco_sample_handler+0x198>)
   32f70:	4b46      	ldr	r3, [pc, #280]	@ (3308c <am_hal_pwrctrl_tempco_sample_handler+0x19c>)
   32f72:	6810      	ldr	r0, [r2, #0]
   32f74:	9303      	str	r3, [sp, #12]
   32f76:	eec7 6a27 	vdiv.f32	s13, s14, s15
   32f7a:	2400      	movs	r4, #0
   32f7c:	aa01      	add	r2, sp, #4
   32f7e:	2101      	movs	r1, #1
   32f80:	9402      	str	r4, [sp, #8]
   32f82:	edcd 6a01 	vstr	s13, [sp, #4]
   32f86:	f7fe fa6b 	bl	31460 <am_hal_adc_control>
   32f8a:	4604      	mov	r4, r0
   32f8c:	2800      	cmp	r0, #0
   32f8e:	d14e      	bne.n	3302e <am_hal_pwrctrl_tempco_sample_handler+0x13e>
   32f90:	eddd 7a02 	vldr	s15, [sp, #8]
   32f94:	4b3e      	ldr	r3, [pc, #248]	@ (33090 <am_hal_pwrctrl_tempco_sample_handler+0x1a0>)
   32f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   32f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   32f9e:	edc3 7a00 	vstr	s15, [r3]
   32fa2:	d452      	bmi.n	3304a <am_hal_pwrctrl_tempco_sample_handler+0x15a>
   32fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   32fa8:	ee17 3a90 	vmov	r3, s15
   32fac:	3b03      	subs	r3, #3
   32fae:	b25b      	sxtb	r3, r3
   32fb0:	f113 0f14 	cmn.w	r3, #20
   32fb4:	db4f      	blt.n	33056 <am_hal_pwrctrl_tempco_sample_handler+0x166>
   32fb6:	4a37      	ldr	r2, [pc, #220]	@ (33094 <am_hal_pwrctrl_tempco_sample_handler+0x1a4>)
   32fb8:	e003      	b.n	32fc2 <am_hal_pwrctrl_tempco_sample_handler+0xd2>
   32fba:	f912 1f03 	ldrsb.w	r1, [r2, #3]!
   32fbe:	297f      	cmp	r1, #127	@ 0x7f
   32fc0:	d04e      	beq.n	33060 <am_hal_pwrctrl_tempco_sample_handler+0x170>
   32fc2:	f992 1001 	ldrsb.w	r1, [r2, #1]
   32fc6:	4299      	cmp	r1, r3
   32fc8:	dbf7      	blt.n	32fba <am_hal_pwrctrl_tempco_sample_handler+0xca>
   32fca:	f992 0002 	ldrsb.w	r0, [r2, #2]
   32fce:	4a32      	ldr	r2, [pc, #200]	@ (33098 <am_hal_pwrctrl_tempco_sample_handler+0x1a8>)
   32fd0:	e003      	b.n	32fda <am_hal_pwrctrl_tempco_sample_handler+0xea>
   32fd2:	f912 1f03 	ldrsb.w	r1, [r2, #3]!
   32fd6:	297f      	cmp	r1, #127	@ 0x7f
   32fd8:	d044      	beq.n	33064 <am_hal_pwrctrl_tempco_sample_handler+0x174>
   32fda:	f992 1001 	ldrsb.w	r1, [r2, #1]
   32fde:	4299      	cmp	r1, r3
   32fe0:	dbf7      	blt.n	32fd2 <am_hal_pwrctrl_tempco_sample_handler+0xe2>
   32fe2:	f992 1002 	ldrsb.w	r1, [r2, #2]
   32fe6:	f113 0f12 	cmn.w	r3, #18
   32fea:	db41      	blt.n	33070 <am_hal_pwrctrl_tempco_sample_handler+0x180>
   32fec:	4a2b      	ldr	r2, [pc, #172]	@ (3309c <am_hal_pwrctrl_tempco_sample_handler+0x1ac>)
   32fee:	e003      	b.n	32ff8 <am_hal_pwrctrl_tempco_sample_handler+0x108>
   32ff0:	f912 5f03 	ldrsb.w	r5, [r2, #3]!
   32ff4:	2d7f      	cmp	r5, #127	@ 0x7f
   32ff6:	d037      	beq.n	33068 <am_hal_pwrctrl_tempco_sample_handler+0x178>
   32ff8:	f992 5001 	ldrsb.w	r5, [r2, #1]
   32ffc:	429d      	cmp	r5, r3
   32ffe:	dbf7      	blt.n	32ff0 <am_hal_pwrctrl_tempco_sample_handler+0x100>
   33000:	f992 2002 	ldrsb.w	r2, [r2, #2]
   33004:	4d26      	ldr	r5, [pc, #152]	@ (330a0 <am_hal_pwrctrl_tempco_sample_handler+0x1b0>)
   33006:	e004      	b.n	33012 <am_hal_pwrctrl_tempco_sample_handler+0x122>
   33008:	f915 cf03 	ldrsb.w	ip, [r5, #3]!
   3300c:	f1bc 0f7f 	cmp.w	ip, #127	@ 0x7f
   33010:	d02c      	beq.n	3306c <am_hal_pwrctrl_tempco_sample_handler+0x17c>
   33012:	f995 c001 	ldrsb.w	ip, [r5, #1]
   33016:	459c      	cmp	ip, r3
   33018:	dbf6      	blt.n	33008 <am_hal_pwrctrl_tempco_sample_handler+0x118>
   3301a:	f995 3002 	ldrsb.w	r3, [r5, #2]
   3301e:	4d16      	ldr	r5, [pc, #88]	@ (33078 <am_hal_pwrctrl_tempco_sample_handler+0x188>)
   33020:	782d      	ldrb	r5, [r5, #0]
   33022:	2d00      	cmp	r5, #0
   33024:	f43f af6c 	beq.w	32f00 <am_hal_pwrctrl_tempco_sample_handler+0x10>
   33028:	f7ff f8aa 	bl	32180 <tempco_set_trims.part.0>
   3302c:	e768      	b.n	32f00 <am_hal_pwrctrl_tempco_sample_handler+0x10>
   3302e:	4b12      	ldr	r3, [pc, #72]	@ (33078 <am_hal_pwrctrl_tempco_sample_handler+0x188>)
   33030:	781b      	ldrb	r3, [r3, #0]
   33032:	b91b      	cbnz	r3, 3303c <am_hal_pwrctrl_tempco_sample_handler+0x14c>
   33034:	4b16      	ldr	r3, [pc, #88]	@ (33090 <am_hal_pwrctrl_tempco_sample_handler+0x1a0>)
   33036:	2200      	movs	r2, #0
   33038:	601a      	str	r2, [r3, #0]
   3303a:	e761      	b.n	32f00 <am_hal_pwrctrl_tempco_sample_handler+0x10>
   3303c:	2300      	movs	r3, #0
   3303e:	461a      	mov	r2, r3
   33040:	4619      	mov	r1, r3
   33042:	4618      	mov	r0, r3
   33044:	f7ff f89c 	bl	32180 <tempco_set_trims.part.0>
   33048:	e7f4      	b.n	33034 <am_hal_pwrctrl_tempco_sample_handler+0x144>
   3304a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   3304e:	ee17 3a90 	vmov	r3, s15
   33052:	3b01      	subs	r3, #1
   33054:	e7aa      	b.n	32fac <am_hal_pwrctrl_tempco_sample_handler+0xbc>
   33056:	2300      	movs	r3, #0
   33058:	2208      	movs	r2, #8
   3305a:	4619      	mov	r1, r3
   3305c:	4618      	mov	r0, r3
   3305e:	e7de      	b.n	3301e <am_hal_pwrctrl_tempco_sample_handler+0x12e>
   33060:	2000      	movs	r0, #0
   33062:	e7b4      	b.n	32fce <am_hal_pwrctrl_tempco_sample_handler+0xde>
   33064:	2100      	movs	r1, #0
   33066:	e7be      	b.n	32fe6 <am_hal_pwrctrl_tempco_sample_handler+0xf6>
   33068:	2200      	movs	r2, #0
   3306a:	e7cb      	b.n	33004 <am_hal_pwrctrl_tempco_sample_handler+0x114>
   3306c:	2300      	movs	r3, #0
   3306e:	e7d6      	b.n	3301e <am_hal_pwrctrl_tempco_sample_handler+0x12e>
   33070:	2208      	movs	r2, #8
   33072:	e7c7      	b.n	33004 <am_hal_pwrctrl_tempco_sample_handler+0x114>
   33074:	10055016 	.word	0x10055016
   33078:	10055015 	.word	0x10055015
   3307c:	00000000 	.word	0x00000000
   33080:	3f9851ec 	.word	0x3f9851ec
   33084:	39800000 	.word	0x39800000
   33088:	10055010 	.word	0x10055010
   3308c:	c2f6e979 	.word	0xc2f6e979
   33090:	10055038 	.word	0x10055038
   33094:	00047b64 	.word	0x00047b64
   33098:	00047b40 	.word	0x00047b40
   3309c:	00047b88 	.word	0x00047b88
   330a0:	00047b34 	.word	0x00047b34

000330a4 <am_hal_stimer_counter_get>:
   330a4:	b500      	push	{lr}
   330a6:	b085      	sub	sp, #20
   330a8:	4805      	ldr	r0, [pc, #20]	@ (330c0 <am_hal_stimer_counter_get+0x1c>)
   330aa:	a901      	add	r1, sp, #4
   330ac:	f000 fa60 	bl	33570 <am_hal_triple_read>
   330b0:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   330b4:	4283      	cmp	r3, r0
   330b6:	bf18      	it	ne
   330b8:	9803      	ldrne	r0, [sp, #12]
   330ba:	b005      	add	sp, #20
   330bc:	f85d fb04 	ldr.w	pc, [sp], #4
   330c0:	40008804 	.word	0x40008804

000330c4 <am_hal_stimer_compare_delta_set>:
   330c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   330c8:	b084      	sub	sp, #16
   330ca:	4604      	mov	r4, r0
   330cc:	460e      	mov	r6, r1
   330ce:	482a      	ldr	r0, [pc, #168]	@ (33178 <am_hal_stimer_compare_delta_set+0xb4>)
   330d0:	a901      	add	r1, sp, #4
   330d2:	f000 fa4d 	bl	33570 <am_hal_triple_read>
   330d6:	e9dd 3701 	ldrd	r3, r7, [sp, #4]
   330da:	42bb      	cmp	r3, r7
   330dc:	bf18      	it	ne
   330de:	9f03      	ldrne	r7, [sp, #12]
   330e0:	2c07      	cmp	r4, #7
   330e2:	d843      	bhi.n	3316c <am_hal_stimer_compare_delta_set+0xa8>
   330e4:	4d25      	ldr	r5, [pc, #148]	@ (3317c <am_hal_stimer_compare_delta_set+0xb8>)
   330e6:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 33178 <am_hal_stimer_compare_delta_set+0xb4>
   330ea:	463b      	mov	r3, r7
   330ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   330f0:	429a      	cmp	r2, r3
   330f2:	a901      	add	r1, sp, #4
   330f4:	4640      	mov	r0, r8
   330f6:	f102 0c01 	add.w	ip, r2, #1
   330fa:	d001      	beq.n	33100 <am_hal_stimer_compare_delta_set+0x3c>
   330fc:	459c      	cmp	ip, r3
   330fe:	d107      	bne.n	33110 <am_hal_stimer_compare_delta_set+0x4c>
   33100:	f000 fa36 	bl	33570 <am_hal_triple_read>
   33104:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   33108:	429a      	cmp	r2, r3
   3310a:	d0ef      	beq.n	330ec <am_hal_stimer_compare_delta_set+0x28>
   3310c:	9b03      	ldr	r3, [sp, #12]
   3310e:	e7ed      	b.n	330ec <am_hal_stimer_compare_delta_set+0x28>
   33110:	f7fe ff56 	bl	31fc0 <am_hal_interrupt_master_disable>
   33114:	a901      	add	r1, sp, #4
   33116:	9000      	str	r0, [sp, #0]
   33118:	4817      	ldr	r0, [pc, #92]	@ (33178 <am_hal_stimer_compare_delta_set+0xb4>)
   3311a:	f000 fa29 	bl	33570 <am_hal_triple_read>
   3311e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   33122:	429a      	cmp	r2, r3
   33124:	bf18      	it	ne
   33126:	9b03      	ldrne	r3, [sp, #12]
   33128:	f1c7 0203 	rsb	r2, r7, #3
   3312c:	441a      	add	r2, r3
   3312e:	42b2      	cmp	r2, r6
   33130:	d317      	bcc.n	33162 <am_hal_stimer_compare_delta_set+0x9e>
   33132:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
   33136:	2701      	movs	r7, #1
   33138:	4b11      	ldr	r3, [pc, #68]	@ (33180 <am_hal_stimer_compare_delta_set+0xbc>)
   3313a:	480f      	ldr	r0, [pc, #60]	@ (33178 <am_hal_stimer_compare_delta_set+0xb4>)
   3313c:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
   33140:	a901      	add	r1, sp, #4
   33142:	f000 fa15 	bl	33570 <am_hal_triple_read>
   33146:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   3314a:	429a      	cmp	r2, r3
   3314c:	bf18      	it	ne
   3314e:	9b03      	ldrne	r3, [sp, #12]
   33150:	9800      	ldr	r0, [sp, #0]
   33152:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   33156:	f7fe ff37 	bl	31fc8 <am_hal_interrupt_master_set>
   3315a:	4630      	mov	r0, r6
   3315c:	b004      	add	sp, #16
   3315e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33162:	3e03      	subs	r6, #3
   33164:	4437      	add	r7, r6
   33166:	1aff      	subs	r7, r7, r3
   33168:	2600      	movs	r6, #0
   3316a:	e7e5      	b.n	33138 <am_hal_stimer_compare_delta_set+0x74>
   3316c:	2605      	movs	r6, #5
   3316e:	4630      	mov	r0, r6
   33170:	b004      	add	sp, #16
   33172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33176:	bf00      	nop
   33178:	40008804 	.word	0x40008804
   3317c:	1000cb7c 	.word	0x1000cb7c
   33180:	40008820 	.word	0x40008820

00033184 <am_hal_stimer_int_clear>:
   33184:	4b01      	ldr	r3, [pc, #4]	@ (3318c <am_hal_stimer_int_clear+0x8>)
   33186:	f8c3 0108 	str.w	r0, [r3, #264]	@ 0x108
   3318a:	4770      	bx	lr
   3318c:	40008800 	.word	0x40008800

00033190 <am_hal_stimer_int_status_get>:
   33190:	4a04      	ldr	r2, [pc, #16]	@ (331a4 <am_hal_stimer_int_status_get+0x14>)
   33192:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
   33196:	b110      	cbz	r0, 3319e <am_hal_stimer_int_status_get+0xe>
   33198:	f8d2 2100 	ldr.w	r2, [r2, #256]	@ 0x100
   3319c:	4013      	ands	r3, r2
   3319e:	4618      	mov	r0, r3
   331a0:	4770      	bx	lr
   331a2:	bf00      	nop
   331a4:	40008800 	.word	0x40008800

000331a8 <am_hal_sysctrl_sleep>:
   331a8:	b530      	push	{r4, r5, lr}
   331aa:	b083      	sub	sp, #12
   331ac:	f10d 4370 	add.w	r3, sp, #4026531840	@ 0xf0000000
   331b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
   331b4:	d300      	bcc.n	331b8 <am_hal_sysctrl_sleep+0x10>
   331b6:	e7fe      	b.n	331b6 <am_hal_sysctrl_sleep+0xe>
   331b8:	4604      	mov	r4, r0
   331ba:	f7fe ff01 	bl	31fc0 <am_hal_interrupt_master_disable>
   331be:	4935      	ldr	r1, [pc, #212]	@ (33294 <am_hal_sysctrl_sleep+0xec>)
   331c0:	9001      	str	r0, [sp, #4]
   331c2:	f8d1 3108 	ldr.w	r3, [r1, #264]	@ 0x108
   331c6:	f3c3 1301 	ubfx	r3, r3, #4, #2
   331ca:	b384      	cbz	r4, 3322e <am_hal_sysctrl_sleep+0x86>
   331cc:	4a32      	ldr	r2, [pc, #200]	@ (33298 <am_hal_sysctrl_sleep+0xf0>)
   331ce:	f8d2 5250 	ldr.w	r5, [r2, #592]	@ 0x250
   331d2:	f015 0501 	ands.w	r5, r5, #1
   331d6:	d12a      	bne.n	3322e <am_hal_sysctrl_sleep+0x86>
   331d8:	2b03      	cmp	r3, #3
   331da:	d03a      	beq.n	33252 <am_hal_sysctrl_sleep+0xaa>
   331dc:	4a2f      	ldr	r2, [pc, #188]	@ (3329c <am_hal_sysctrl_sleep+0xf4>)
   331de:	6913      	ldr	r3, [r2, #16]
   331e0:	f043 0304 	orr.w	r3, r3, #4
   331e4:	2100      	movs	r1, #0
   331e6:	6113      	str	r3, [r2, #16]
   331e8:	2001      	movs	r0, #1
   331ea:	f7fe fc6d 	bl	31ac8 <am_hal_daxi_control>
   331ee:	bf30      	wfi
   331f0:	f3bf 8f6f 	isb	sy
   331f4:	b33d      	cbz	r5, 33246 <am_hal_sysctrl_sleep+0x9e>
   331f6:	2001      	movs	r0, #1
   331f8:	f7ff fce0 	bl	32bbc <buck_ldo_update_override>
   331fc:	4b26      	ldr	r3, [pc, #152]	@ (33298 <am_hal_sysctrl_sleep+0xf0>)
   331fe:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
   33202:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
   33206:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
   3320a:	f8d3 2380 	ldr.w	r2, [r3, #896]	@ 0x380
   3320e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
   33212:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
   33216:	f8d3 2370 	ldr.w	r2, [r3, #880]	@ 0x370
   3321a:	f36f 5219 	bfc	r2, #20, #6
   3321e:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
   33222:	9801      	ldr	r0, [sp, #4]
   33224:	b003      	add	sp, #12
   33226:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3322a:	f7fe becd 	b.w	31fc8 <am_hal_interrupt_master_set>
   3322e:	4a1b      	ldr	r2, [pc, #108]	@ (3329c <am_hal_sysctrl_sleep+0xf4>)
   33230:	6913      	ldr	r3, [r2, #16]
   33232:	f023 0304 	bic.w	r3, r3, #4
   33236:	2100      	movs	r1, #0
   33238:	6113      	str	r3, [r2, #16]
   3323a:	2001      	movs	r0, #1
   3323c:	f7fe fc44 	bl	31ac8 <am_hal_daxi_control>
   33240:	bf30      	wfi
   33242:	f3bf 8f6f 	isb	sy
   33246:	9801      	ldr	r0, [sp, #4]
   33248:	b003      	add	sp, #12
   3324a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3324e:	f7fe bebb 	b.w	31fc8 <am_hal_interrupt_master_set>
   33252:	690b      	ldr	r3, [r1, #16]
   33254:	055b      	lsls	r3, r3, #21
   33256:	d4c1      	bmi.n	331dc <am_hal_sysctrl_sleep+0x34>
   33258:	688b      	ldr	r3, [r1, #8]
   3325a:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
   3325e:	d1bd      	bne.n	331dc <am_hal_sysctrl_sleep+0x34>
   33260:	490f      	ldr	r1, [pc, #60]	@ (332a0 <am_hal_sysctrl_sleep+0xf8>)
   33262:	f8d2 3370 	ldr.w	r3, [r2, #880]	@ 0x370
   33266:	6809      	ldr	r1, [r1, #0]
   33268:	f361 5319 	bfi	r3, r1, #20, #6
   3326c:	f8c2 3370 	str.w	r3, [r2, #880]	@ 0x370
   33270:	f8d2 3380 	ldr.w	r3, [r2, #896]	@ 0x380
   33274:	f365 73df 	bfi	r3, r5, #31, #1
   33278:	f8c2 3380 	str.w	r3, [r2, #896]	@ 0x380
   3327c:	f8d2 3380 	ldr.w	r3, [r2, #896]	@ 0x380
   33280:	f365 739e 	bfi	r3, r5, #30, #1
   33284:	4628      	mov	r0, r5
   33286:	f8c2 3380 	str.w	r3, [r2, #896]	@ 0x380
   3328a:	f7ff fc97 	bl	32bbc <buck_ldo_update_override>
   3328e:	4625      	mov	r5, r4
   33290:	e7a4      	b.n	331dc <am_hal_sysctrl_sleep+0x34>
   33292:	bf00      	nop
   33294:	40021000 	.word	0x40021000
   33298:	40020000 	.word	0x40020000
   3329c:	e000ed00 	.word	0xe000ed00
   332a0:	1000cb78 	.word	0x1000cb78

000332a4 <am_hal_timer_config>:
   332a4:	b470      	push	{r4, r5, r6}
   332a6:	f891 c001 	ldrb.w	ip, [r1, #1]
   332aa:	690c      	ldr	r4, [r1, #16]
   332ac:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
   332b0:	e9d1 6502 	ldrd	r6, r5, [r1, #8]
   332b4:	2b0c      	cmp	r3, #12
   332b6:	d80a      	bhi.n	332ce <am_hal_timer_config+0x2a>
   332b8:	e8df f003 	tbb	[pc, r3]
   332bc:	1009100c 	.word	0x1009100c
   332c0:	09090909 	.word	0x09090909
   332c4:	07090909 	.word	0x07090909
   332c8:	07          	.byte	0x07
   332c9:	00          	.byte	0x00
   332ca:	2e3f      	cmp	r6, #63	@ 0x3f
   332cc:	d906      	bls.n	332dc <am_hal_timer_config+0x38>
   332ce:	2007      	movs	r0, #7
   332d0:	bc70      	pop	{r4, r5, r6}
   332d2:	4770      	bx	lr
   332d4:	1c63      	adds	r3, r4, #1
   332d6:	d001      	beq.n	332dc <am_hal_timer_config+0x38>
   332d8:	42a5      	cmp	r5, r4
   332da:	d9f8      	bls.n	332ce <am_hal_timer_config+0x2a>
   332dc:	78ca      	ldrb	r2, [r1, #3]
   332de:	f100 7300 	add.w	r3, r0, #33554432	@ 0x2000000
   332e2:	7808      	ldrb	r0, [r1, #0]
   332e4:	00d2      	lsls	r2, r2, #3
   332e6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   332ea:	7888      	ldrb	r0, [r1, #2]
   332ec:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
   332f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
   332f4:	015b      	lsls	r3, r3, #5
   332f6:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
   332fa:	7908      	ldrb	r0, [r1, #4]
   332fc:	794e      	ldrb	r6, [r1, #5]
   332fe:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
   33302:	0401      	lsls	r1, r0, #16
   33304:	fa5f fc8c 	uxtb.w	ip, ip
   33308:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
   3330c:	ea42 020c 	orr.w	r2, r2, ip
   33310:	f401 3140 	and.w	r1, r1, #196608	@ 0x30000
   33314:	430a      	orrs	r2, r1
   33316:	0236      	lsls	r6, r6, #8
   33318:	f36f 0000 	bfc	r0, #0, #1
   3331c:	f8c3 0200 	str.w	r0, [r3, #512]	@ 0x200
   33320:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   33324:	f8c3 6210 	str.w	r6, [r3, #528]	@ 0x210
   33328:	f8c3 5208 	str.w	r5, [r3, #520]	@ 0x208
   3332c:	f8c3 420c 	str.w	r4, [r3, #524]	@ 0x20c
   33330:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   33334:	f042 0202 	orr.w	r2, r2, #2
   33338:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   3333c:	2000      	movs	r0, #0
   3333e:	bc70      	pop	{r4, r5, r6}
   33340:	4770      	bx	lr
   33342:	bf00      	nop

00033344 <am_hal_timer_default_config_set>:
   33344:	2300      	movs	r3, #0
   33346:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   3334a:	f240 1c01 	movw	ip, #257	@ 0x101
   3334e:	f44f 7180 	mov.w	r1, #256	@ 0x100
   33352:	e9c0 2203 	strd	r2, r2, [r0, #12]
   33356:	f8a0 c000 	strh.w	ip, [r0]
   3335a:	8043      	strh	r3, [r0, #2]
   3335c:	8081      	strh	r1, [r0, #4]
   3335e:	6083      	str	r3, [r0, #8]
   33360:	4618      	mov	r0, r3
   33362:	4770      	bx	lr

00033364 <am_hal_timer_clear>:
   33364:	b510      	push	{r4, lr}
   33366:	4604      	mov	r4, r0
   33368:	b082      	sub	sp, #8
   3336a:	f7fe fe29 	bl	31fc0 <am_hal_interrupt_master_disable>
   3336e:	f104 7300 	add.w	r3, r4, #33554432	@ 0x2000000
   33372:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
   33376:	015b      	lsls	r3, r3, #5
   33378:	9001      	str	r0, [sp, #4]
   3337a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   3337e:	f36f 0200 	bfc	r2, #0, #1
   33382:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   33386:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   3338a:	f042 0202 	orr.w	r2, r2, #2
   3338e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   33392:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   33396:	f36f 0241 	bfc	r2, #1, #1
   3339a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   3339e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   333a2:	f042 0201 	orr.w	r2, r2, #1
   333a6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   333aa:	9801      	ldr	r0, [sp, #4]
   333ac:	f7fe fe0c 	bl	31fc8 <am_hal_interrupt_master_set>
   333b0:	2000      	movs	r0, #0
   333b2:	b002      	add	sp, #8
   333b4:	bd10      	pop	{r4, pc}
   333b6:	bf00      	nop

000333b8 <am_hal_timer_read>:
   333b8:	b500      	push	{lr}
   333ba:	4603      	mov	r3, r0
   333bc:	4807      	ldr	r0, [pc, #28]	@ (333dc <am_hal_timer_read+0x24>)
   333be:	b085      	sub	sp, #20
   333c0:	015b      	lsls	r3, r3, #5
   333c2:	a901      	add	r1, sp, #4
   333c4:	4418      	add	r0, r3
   333c6:	f000 f8d3 	bl	33570 <am_hal_triple_read>
   333ca:	e9dd 3001 	ldrd	r3, r0, [sp, #4]
   333ce:	4283      	cmp	r3, r0
   333d0:	bf18      	it	ne
   333d2:	9803      	ldrne	r0, [sp, #12]
   333d4:	b005      	add	sp, #20
   333d6:	f85d fb04 	ldr.w	pc, [sp], #4
   333da:	bf00      	nop
   333dc:	40008204 	.word	0x40008204

000333e0 <am_hal_timer_interrupt_enable>:
   333e0:	4903      	ldr	r1, [pc, #12]	@ (333f0 <am_hal_timer_interrupt_enable+0x10>)
   333e2:	6e0a      	ldr	r2, [r1, #96]	@ 0x60
   333e4:	4603      	mov	r3, r0
   333e6:	4313      	orrs	r3, r2
   333e8:	2000      	movs	r0, #0
   333ea:	660b      	str	r3, [r1, #96]	@ 0x60
   333ec:	4770      	bx	lr
   333ee:	bf00      	nop
   333f0:	40008000 	.word	0x40008000

000333f4 <am_hal_timer_interrupt_clear>:
   333f4:	4b01      	ldr	r3, [pc, #4]	@ (333fc <am_hal_timer_interrupt_clear+0x8>)
   333f6:	6698      	str	r0, [r3, #104]	@ 0x68
   333f8:	2000      	movs	r0, #0
   333fa:	4770      	bx	lr
   333fc:	40008000 	.word	0x40008000

00033400 <am_hal_tpiu_enable>:
   33400:	4b16      	ldr	r3, [pc, #88]	@ (3345c <am_hal_tpiu_enable+0x5c>)
   33402:	4a17      	ldr	r2, [pc, #92]	@ (33460 <am_hal_tpiu_enable+0x60>)
   33404:	b410      	push	{r4}
   33406:	2101      	movs	r1, #1
   33408:	2400      	movs	r4, #0
   3340a:	f8c3 4304 	str.w	r4, [r3, #772]	@ 0x304
   3340e:	6059      	str	r1, [r3, #4]
   33410:	f5a0 4361 	sub.w	r3, r0, #57600	@ 0xe100
   33414:	4293      	cmp	r3, r2
   33416:	4a11      	ldr	r2, [pc, #68]	@ (3345c <am_hal_tpiu_enable+0x5c>)
   33418:	bf9a      	itte	ls
   3341a:	4b12      	ldrls	r3, [pc, #72]	@ (33464 <am_hal_tpiu_enable+0x64>)
   3341c:	fbb3 f0f0 	udivls	r0, r3, r0
   33420:	202f      	movhi	r0, #47	@ 0x2f
   33422:	4b11      	ldr	r3, [pc, #68]	@ (33468 <am_hal_tpiu_enable+0x68>)
   33424:	bf98      	it	ls
   33426:	f100 30ff 	addls.w	r0, r0, #4294967295	@ 0xffffffff
   3342a:	2102      	movs	r1, #2
   3342c:	2400      	movs	r4, #0
   3342e:	6110      	str	r0, [r2, #16]
   33430:	f8c2 10f0 	str.w	r1, [r2, #240]	@ 0xf0
   33434:	f8c2 4f00 	str.w	r4, [r2, #3840]	@ 0xf00
   33438:	f8d3 2250 	ldr.w	r2, [r3, #592]	@ 0x250
   3343c:	f361 0243 	bfi	r2, r1, #1, #3
   33440:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
   33444:	f8d3 2250 	ldr.w	r2, [r3, #592]	@ 0x250
   33448:	f042 0201 	orr.w	r2, r2, #1
   3344c:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
   33450:	f85d 4b04 	ldr.w	r4, [sp], #4
   33454:	2064      	movs	r0, #100	@ 0x64
   33456:	f000 b809 	b.w	3346c <am_hal_delay_us>
   3345a:	bf00      	nop
   3345c:	e0040000 	.word	0xe0040000
   33460:	001da380 	.word	0x001da380
   33464:	02dc6c00 	.word	0x02dc6c00
   33468:	40020000 	.word	0x40020000

0003346c <am_hal_delay_us>:
   3346c:	4b09      	ldr	r3, [pc, #36]	@ (33494 <am_hal_delay_us+0x28>)
   3346e:	681b      	ldr	r3, [r3, #0]
   33470:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   33474:	2b02      	cmp	r3, #2
   33476:	bf0b      	itete	eq
   33478:	0182      	lsleq	r2, r0, #6
   3347a:	0142      	lslne	r2, r0, #5
   3347c:	2015      	moveq	r0, #21
   3347e:	200f      	movne	r0, #15
   33480:	4282      	cmp	r2, r0
   33482:	d906      	bls.n	33492 <am_hal_delay_us+0x26>
   33484:	4b04      	ldr	r3, [pc, #16]	@ (33498 <am_hal_delay_us+0x2c>)
   33486:	b082      	sub	sp, #8
   33488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   3348a:	9301      	str	r3, [sp, #4]
   3348c:	1a10      	subs	r0, r2, r0
   3348e:	b002      	add	sp, #8
   33490:	4718      	bx	r3
   33492:	4770      	bx	lr
   33494:	40021000 	.word	0x40021000
   33498:	00047bb8 	.word	0x00047bb8

0003349c <am_hal_delay_us_status_change>:
   3349c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   334a0:	460c      	mov	r4, r1
   334a2:	6809      	ldr	r1, [r1, #0]
   334a4:	4011      	ands	r1, r2
   334a6:	428b      	cmp	r3, r1
   334a8:	d01a      	beq.n	334e0 <am_hal_delay_us_status_change+0x44>
   334aa:	f100 39ff 	add.w	r9, r0, #4294967295	@ 0xffffffff
   334ae:	b1d0      	cbz	r0, 334e6 <am_hal_delay_us_status_change+0x4a>
   334b0:	461e      	mov	r6, r3
   334b2:	4b0e      	ldr	r3, [pc, #56]	@ (334ec <am_hal_delay_us_status_change+0x50>)
   334b4:	4f0e      	ldr	r7, [pc, #56]	@ (334f0 <am_hal_delay_us_status_change+0x54>)
   334b6:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
   334ba:	4615      	mov	r5, r2
   334bc:	e002      	b.n	334c4 <am_hal_delay_us_status_change+0x28>
   334be:	f1b9 3fff 	cmp.w	r9, #4294967295	@ 0xffffffff
   334c2:	d010      	beq.n	334e6 <am_hal_delay_us_status_change+0x4a>
   334c4:	6838      	ldr	r0, [r7, #0]
   334c6:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   334ca:	2802      	cmp	r0, #2
   334cc:	bf14      	ite	ne
   334ce:	2011      	movne	r0, #17
   334d0:	202b      	moveq	r0, #43	@ 0x2b
   334d2:	47c0      	blx	r8
   334d4:	6820      	ldr	r0, [r4, #0]
   334d6:	4028      	ands	r0, r5
   334d8:	42b0      	cmp	r0, r6
   334da:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
   334de:	d1ee      	bne.n	334be <am_hal_delay_us_status_change+0x22>
   334e0:	2000      	movs	r0, #0
   334e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   334e6:	2004      	movs	r0, #4
   334e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   334ec:	00047bb8 	.word	0x00047bb8
   334f0:	40021000 	.word	0x40021000

000334f4 <am_hal_delay_us_status_check>:
   334f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   334f8:	f89d c020 	ldrb.w	ip, [sp, #32]
   334fc:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 33568 <am_hal_delay_us_status_check+0x74>
   33500:	f8df 9068 	ldr.w	r9, [pc, #104]	@ 3356c <am_hal_delay_us_status_check+0x78>
   33504:	4604      	mov	r4, r0
   33506:	460d      	mov	r5, r1
   33508:	4616      	mov	r6, r2
   3350a:	461f      	mov	r7, r3
   3350c:	f1bc 0f00 	cmp.w	ip, #0
   33510:	d00d      	beq.n	3352e <am_hal_delay_us_status_check+0x3a>
   33512:	e020      	b.n	33556 <am_hal_delay_us_status_check+0x62>
   33514:	b324      	cbz	r4, 33560 <am_hal_delay_us_status_check+0x6c>
   33516:	f8d8 3000 	ldr.w	r3, [r8]
   3351a:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
   3351e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   33522:	2b02      	cmp	r3, #2
   33524:	bf14      	ite	ne
   33526:	2011      	movne	r0, #17
   33528:	202b      	moveq	r0, #43	@ 0x2b
   3352a:	4790      	blx	r2
   3352c:	3c01      	subs	r4, #1
   3352e:	6828      	ldr	r0, [r5, #0]
   33530:	4030      	ands	r0, r6
   33532:	42b8      	cmp	r0, r7
   33534:	d0ee      	beq.n	33514 <am_hal_delay_us_status_check+0x20>
   33536:	2000      	movs	r0, #0
   33538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3353c:	b184      	cbz	r4, 33560 <am_hal_delay_us_status_check+0x6c>
   3353e:	f8d8 3000 	ldr.w	r3, [r8]
   33542:	f8d9 2024 	ldr.w	r2, [r9, #36]	@ 0x24
   33546:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   3354a:	2b02      	cmp	r3, #2
   3354c:	bf14      	ite	ne
   3354e:	2011      	movne	r0, #17
   33550:	202b      	moveq	r0, #43	@ 0x2b
   33552:	4790      	blx	r2
   33554:	3c01      	subs	r4, #1
   33556:	6828      	ldr	r0, [r5, #0]
   33558:	4030      	ands	r0, r6
   3355a:	42b8      	cmp	r0, r7
   3355c:	d1ee      	bne.n	3353c <am_hal_delay_us_status_check+0x48>
   3355e:	e7ea      	b.n	33536 <am_hal_delay_us_status_check+0x42>
   33560:	2004      	movs	r0, #4
   33562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   33566:	bf00      	nop
   33568:	40021000 	.word	0x40021000
   3356c:	00047bb8 	.word	0x00047bb8

00033570 <am_hal_triple_read>:
   33570:	b412      	push	{r1, r4}
   33572:	f3ef 8410 	mrs	r4, PRIMASK
   33576:	b672      	cpsid	i
   33578:	6801      	ldr	r1, [r0, #0]
   3357a:	6802      	ldr	r2, [r0, #0]
   3357c:	6803      	ldr	r3, [r0, #0]
   3357e:	f384 8810 	msr	PRIMASK, r4
   33582:	bc11      	pop	{r0, r4}
   33584:	6001      	str	r1, [r0, #0]
   33586:	6042      	str	r2, [r0, #4]
   33588:	6083      	str	r3, [r0, #8]
   3358a:	4770      	bx	lr

0003358c <am_bsp_uart_string_print>:
   3358c:	b530      	push	{r4, r5, lr}
   3358e:	b08b      	sub	sp, #44	@ 0x2c
   33590:	7804      	ldrb	r4, [r0, #0]
   33592:	2300      	movs	r3, #0
   33594:	4605      	mov	r5, r0
   33596:	9301      	str	r3, [sp, #4]
   33598:	b13c      	cbz	r4, 335aa <am_bsp_uart_string_print+0x1e>
   3359a:	4603      	mov	r3, r0
   3359c:	f1c0 0101 	rsb	r1, r0, #1
   335a0:	18cc      	adds	r4, r1, r3
   335a2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   335a6:	2a00      	cmp	r2, #0
   335a8:	d1fa      	bne.n	335a0 <am_bsp_uart_string_print+0x14>
   335aa:	2220      	movs	r2, #32
   335ac:	2100      	movs	r1, #0
   335ae:	a802      	add	r0, sp, #8
   335b0:	f7f3 fb88 	bl	26cc4 <memset>
   335b4:	4b08      	ldr	r3, [pc, #32]	@ (335d8 <am_bsp_uart_string_print+0x4c>)
   335b6:	9503      	str	r5, [sp, #12]
   335b8:	6818      	ldr	r0, [r3, #0]
   335ba:	aa01      	add	r2, sp, #4
   335bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   335c0:	a902      	add	r1, sp, #8
   335c2:	9306      	str	r3, [sp, #24]
   335c4:	e9cd 4204 	strd	r4, r2, [sp, #16]
   335c8:	f00b f87a 	bl	3e6c0 <am_hal_uart_transfer>
   335cc:	9b01      	ldr	r3, [sp, #4]
   335ce:	42a3      	cmp	r3, r4
   335d0:	d000      	beq.n	335d4 <am_bsp_uart_string_print+0x48>
   335d2:	e7fe      	b.n	335d2 <am_bsp_uart_string_print+0x46>
   335d4:	b00b      	add	sp, #44	@ 0x2c
   335d6:	bd30      	pop	{r4, r5, pc}
   335d8:	10055044 	.word	0x10055044

000335dc <am_bsp_external_vddusb33_switch>:
   335dc:	b510      	push	{r4, lr}
   335de:	4b06      	ldr	r3, [pc, #24]	@ (335f8 <am_bsp_external_vddusb33_switch+0x1c>)
   335e0:	4604      	mov	r4, r0
   335e2:	6819      	ldr	r1, [r3, #0]
   335e4:	200d      	movs	r0, #13
   335e6:	f7fe fc67 	bl	31eb8 <am_hal_gpio_pinconfig>
   335ea:	4621      	mov	r1, r4
   335ec:	200d      	movs	r0, #13
   335ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   335f2:	f7fe bc8d 	b.w	31f10 <am_hal_gpio_state_write>
   335f6:	bf00      	nop
   335f8:	1000cc48 	.word	0x1000cc48

000335fc <am_bsp_external_vddusb0p9_switch>:
   335fc:	b510      	push	{r4, lr}
   335fe:	4b06      	ldr	r3, [pc, #24]	@ (33618 <am_bsp_external_vddusb0p9_switch+0x1c>)
   33600:	4604      	mov	r4, r0
   33602:	6819      	ldr	r1, [r3, #0]
   33604:	200f      	movs	r0, #15
   33606:	f7fe fc57 	bl	31eb8 <am_hal_gpio_pinconfig>
   3360a:	4621      	mov	r1, r4
   3360c:	200f      	movs	r0, #15
   3360e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33612:	f7fe bc7d 	b.w	31f10 <am_hal_gpio_state_write>
   33616:	bf00      	nop
   33618:	1000cc44 	.word	0x1000cc44

0003361c <am_bsp_low_power_init>:
   3361c:	b508      	push	{r3, lr}
   3361e:	f7ff fa03 	bl	32a28 <am_hal_pwrctrl_low_power_init>
   33622:	2100      	movs	r1, #0
   33624:	4608      	mov	r0, r1
   33626:	f7ff fad9 	bl	32bdc <am_hal_pwrctrl_control>
   3362a:	f00a fe05 	bl	3e238 <am_hal_rtc_osc_disable>
   3362e:	4b05      	ldr	r3, [pc, #20]	@ (33644 <am_bsp_low_power_init+0x28>)
   33630:	2037      	movs	r0, #55	@ 0x37
   33632:	6819      	ldr	r1, [r3, #0]
   33634:	f7fe fc40 	bl	31eb8 <am_hal_gpio_pinconfig>
   33638:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3363c:	2100      	movs	r1, #0
   3363e:	2037      	movs	r0, #55	@ 0x37
   33640:	f7fe bc66 	b.w	31f10 <am_hal_gpio_state_write>
   33644:	000478ec 	.word	0x000478ec

00033648 <am_bsp_itm_printf_enable>:
   33648:	4b18      	ldr	r3, [pc, #96]	@ (336ac <am_bsp_itm_printf_enable+0x64>)
   3364a:	689b      	ldr	r3, [r3, #8]
   3364c:	02da      	lsls	r2, r3, #11
   3364e:	d529      	bpl.n	336a4 <am_bsp_itm_printf_enable+0x5c>
   33650:	b510      	push	{r4, lr}
   33652:	4b17      	ldr	r3, [pc, #92]	@ (336b0 <am_bsp_itm_printf_enable+0x68>)
   33654:	f8d3 4a7c 	ldr.w	r4, [r3, #2684]	@ 0xa7c
   33658:	f014 0401 	ands.w	r4, r4, #1
   3365c:	b082      	sub	sp, #8
   3365e:	d01e      	beq.n	3369e <am_bsp_itm_printf_enable+0x56>
   33660:	a801      	add	r0, sp, #4
   33662:	f009 f9f3 	bl	3ca4c <am_hal_dcu_get>
   33666:	9b01      	ldr	r3, [sp, #4]
   33668:	06db      	lsls	r3, r3, #27
   3366a:	d512      	bpl.n	33692 <am_bsp_itm_printf_enable+0x4a>
   3366c:	4b11      	ldr	r3, [pc, #68]	@ (336b4 <am_bsp_itm_printf_enable+0x6c>)
   3366e:	2201      	movs	r2, #1
   33670:	701a      	strb	r2, [r3, #0]
   33672:	f7fe fcad 	bl	31fd0 <am_hal_itm_enable>
   33676:	4810      	ldr	r0, [pc, #64]	@ (336b8 <am_bsp_itm_printf_enable+0x70>)
   33678:	f7ff fec2 	bl	33400 <am_hal_tpiu_enable>
   3367c:	4b0f      	ldr	r3, [pc, #60]	@ (336bc <am_bsp_itm_printf_enable+0x74>)
   3367e:	201c      	movs	r0, #28
   33680:	6819      	ldr	r1, [r3, #0]
   33682:	f7fe fc19 	bl	31eb8 <am_hal_gpio_pinconfig>
   33686:	480e      	ldr	r0, [pc, #56]	@ (336c0 <am_bsp_itm_printf_enable+0x78>)
   33688:	f7f9 feee 	bl	2d468 <am_util_stdio_printf_init>
   3368c:	2000      	movs	r0, #0
   3368e:	b002      	add	sp, #8
   33690:	bd10      	pop	{r4, pc}
   33692:	2110      	movs	r1, #16
   33694:	4620      	mov	r0, r4
   33696:	f009 fa1f 	bl	3cad8 <am_hal_dcu_update>
   3369a:	2800      	cmp	r0, #0
   3369c:	d0e6      	beq.n	3366c <am_bsp_itm_printf_enable+0x24>
   3369e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   336a2:	e7f4      	b.n	3368e <am_bsp_itm_printf_enable+0x46>
   336a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   336a8:	4770      	bx	lr
   336aa:	bf00      	nop
   336ac:	40021000 	.word	0x40021000
   336b0:	400c0000 	.word	0x400c0000
   336b4:	10055040 	.word	0x10055040
   336b8:	000f4240 	.word	0x000f4240
   336bc:	1000cc40 	.word	0x1000cc40
   336c0:	000320ed 	.word	0x000320ed

000336c4 <am_bsp_uart_printf_enable>:
   336c4:	b510      	push	{r4, lr}
   336c6:	4c14      	ldr	r4, [pc, #80]	@ (33718 <am_bsp_uart_printf_enable+0x54>)
   336c8:	2000      	movs	r0, #0
   336ca:	4621      	mov	r1, r4
   336cc:	f00a fea4 	bl	3e418 <am_hal_uart_initialize>
   336d0:	b9f8      	cbnz	r0, 33712 <am_bsp_uart_printf_enable+0x4e>
   336d2:	4602      	mov	r2, r0
   336d4:	4611      	mov	r1, r2
   336d6:	6820      	ldr	r0, [r4, #0]
   336d8:	f00a feea 	bl	3e4b0 <am_hal_uart_power_control>
   336dc:	b9c8      	cbnz	r0, 33712 <am_bsp_uart_printf_enable+0x4e>
   336de:	490f      	ldr	r1, [pc, #60]	@ (3371c <am_bsp_uart_printf_enable+0x58>)
   336e0:	6820      	ldr	r0, [r4, #0]
   336e2:	f00a ff41 	bl	3e568 <am_hal_uart_configure>
   336e6:	b9a0      	cbnz	r0, 33712 <am_bsp_uart_printf_enable+0x4e>
   336e8:	4b0d      	ldr	r3, [pc, #52]	@ (33720 <am_bsp_uart_printf_enable+0x5c>)
   336ea:	200c      	movs	r0, #12
   336ec:	6819      	ldr	r1, [r3, #0]
   336ee:	f7fe fbe3 	bl	31eb8 <am_hal_gpio_pinconfig>
   336f2:	b970      	cbnz	r0, 33712 <am_bsp_uart_printf_enable+0x4e>
   336f4:	4b0b      	ldr	r3, [pc, #44]	@ (33724 <am_bsp_uart_printf_enable+0x60>)
   336f6:	202f      	movs	r0, #47	@ 0x2f
   336f8:	6819      	ldr	r1, [r3, #0]
   336fa:	f7fe fbdd 	bl	31eb8 <am_hal_gpio_pinconfig>
   336fe:	4604      	mov	r4, r0
   33700:	b938      	cbnz	r0, 33712 <am_bsp_uart_printf_enable+0x4e>
   33702:	4b09      	ldr	r3, [pc, #36]	@ (33728 <am_bsp_uart_printf_enable+0x64>)
   33704:	4809      	ldr	r0, [pc, #36]	@ (3372c <am_bsp_uart_printf_enable+0x68>)
   33706:	2202      	movs	r2, #2
   33708:	701a      	strb	r2, [r3, #0]
   3370a:	f7f9 fead 	bl	2d468 <am_util_stdio_printf_init>
   3370e:	4620      	mov	r0, r4
   33710:	bd10      	pop	{r4, pc}
   33712:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   33716:	bd10      	pop	{r4, pc}
   33718:	10055044 	.word	0x10055044
   3371c:	00047be0 	.word	0x00047be0
   33720:	1000cba0 	.word	0x1000cba0
   33724:	1000cb9c 	.word	0x1000cb9c
   33728:	10055040 	.word	0x10055040
   3372c:	0003358d 	.word	0x0003358d

00033730 <am_bsp_uart_printf_disable>:
   33730:	b570      	push	{r4, r5, r6, lr}
   33732:	4c10      	ldr	r4, [pc, #64]	@ (33774 <am_bsp_uart_printf_disable+0x44>)
   33734:	7825      	ldrb	r5, [r4, #0]
   33736:	2d02      	cmp	r5, #2
   33738:	d000      	beq.n	3373c <am_bsp_uart_printf_disable+0xc>
   3373a:	bd70      	pop	{r4, r5, r6, pc}
   3373c:	4e0e      	ldr	r6, [pc, #56]	@ (33778 <am_bsp_uart_printf_disable+0x48>)
   3373e:	6830      	ldr	r0, [r6, #0]
   33740:	f00b f966 	bl	3ea10 <am_hal_uart_tx_flush>
   33744:	2000      	movs	r0, #0
   33746:	f7f9 fe8f 	bl	2d468 <am_util_stdio_printf_init>
   3374a:	2200      	movs	r2, #0
   3374c:	4629      	mov	r1, r5
   3374e:	6830      	ldr	r0, [r6, #0]
   33750:	f00a feae 	bl	3e4b0 <am_hal_uart_power_control>
   33754:	6830      	ldr	r0, [r6, #0]
   33756:	f00a fe97 	bl	3e488 <am_hal_uart_deinitialize>
   3375a:	4b08      	ldr	r3, [pc, #32]	@ (3377c <am_bsp_uart_printf_disable+0x4c>)
   3375c:	681d      	ldr	r5, [r3, #0]
   3375e:	200c      	movs	r0, #12
   33760:	4629      	mov	r1, r5
   33762:	f7fe fba9 	bl	31eb8 <am_hal_gpio_pinconfig>
   33766:	4629      	mov	r1, r5
   33768:	202f      	movs	r0, #47	@ 0x2f
   3376a:	f7fe fba5 	bl	31eb8 <am_hal_gpio_pinconfig>
   3376e:	2300      	movs	r3, #0
   33770:	7023      	strb	r3, [r4, #0]
   33772:	bd70      	pop	{r4, r5, r6, pc}
   33774:	10055040 	.word	0x10055040
   33778:	10055044 	.word	0x10055044
   3377c:	000478e8 	.word	0x000478e8

00033780 <am_bsp_iom_pins_enable>:
   33780:	2807      	cmp	r0, #7
   33782:	d825      	bhi.n	337d0 <am_bsp_iom_pins_enable+0x50>
   33784:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
   33788:	b508      	push	{r3, lr}
   3378a:	291d      	cmp	r1, #29
   3378c:	d81f      	bhi.n	337ce <am_bsp_iom_pins_enable+0x4e>
   3378e:	e8df f011 	tbh	[pc, r1, lsl #1]
   33792:	010e      	.short	0x010e
   33794:	001e0102 	.word	0x001e0102
   33798:	00ec001e 	.word	0x00ec001e
   3379c:	001e00e0 	.word	0x001e00e0
   337a0:	00ca001e 	.word	0x00ca001e
   337a4:	001e00be 	.word	0x001e00be
   337a8:	00a8001e 	.word	0x00a8001e
   337ac:	001e009c 	.word	0x001e009c
   337b0:	0086001e 	.word	0x0086001e
   337b4:	001e001e 	.word	0x001e001e
   337b8:	0070001e 	.word	0x0070001e
   337bc:	001e0064 	.word	0x001e0064
   337c0:	004e001e 	.word	0x004e001e
   337c4:	001e0042 	.word	0x001e0042
   337c8:	002c001e 	.word	0x002c001e
   337cc:	0020      	.short	0x0020
   337ce:	bd08      	pop	{r3, pc}
   337d0:	4770      	bx	lr
   337d2:	4b82      	ldr	r3, [pc, #520]	@ (339dc <am_bsp_iom_pins_enable+0x25c>)
   337d4:	2016      	movs	r0, #22
   337d6:	6819      	ldr	r1, [r3, #0]
   337d8:	f7fe fb6e 	bl	31eb8 <am_hal_gpio_pinconfig>
   337dc:	4b80      	ldr	r3, [pc, #512]	@ (339e0 <am_bsp_iom_pins_enable+0x260>)
   337de:	2017      	movs	r0, #23
   337e0:	6819      	ldr	r1, [r3, #0]
   337e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   337e6:	f7fe bb67 	b.w	31eb8 <am_hal_gpio_pinconfig>
   337ea:	4b7e      	ldr	r3, [pc, #504]	@ (339e4 <am_bsp_iom_pins_enable+0x264>)
   337ec:	2016      	movs	r0, #22
   337ee:	6819      	ldr	r1, [r3, #0]
   337f0:	f7fe fb62 	bl	31eb8 <am_hal_gpio_pinconfig>
   337f4:	4b7c      	ldr	r3, [pc, #496]	@ (339e8 <am_bsp_iom_pins_enable+0x268>)
   337f6:	2018      	movs	r0, #24
   337f8:	6819      	ldr	r1, [r3, #0]
   337fa:	f7fe fb5d 	bl	31eb8 <am_hal_gpio_pinconfig>
   337fe:	4b7b      	ldr	r3, [pc, #492]	@ (339ec <am_bsp_iom_pins_enable+0x26c>)
   33800:	2017      	movs	r0, #23
   33802:	6819      	ldr	r1, [r3, #0]
   33804:	f7fe fb58 	bl	31eb8 <am_hal_gpio_pinconfig>
   33808:	4b79      	ldr	r3, [pc, #484]	@ (339f0 <am_bsp_iom_pins_enable+0x270>)
   3380a:	2058      	movs	r0, #88	@ 0x58
   3380c:	6819      	ldr	r1, [r3, #0]
   3380e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33812:	f7fe bb51 	b.w	31eb8 <am_hal_gpio_pinconfig>
   33816:	4b77      	ldr	r3, [pc, #476]	@ (339f4 <am_bsp_iom_pins_enable+0x274>)
   33818:	203d      	movs	r0, #61	@ 0x3d
   3381a:	6819      	ldr	r1, [r3, #0]
   3381c:	f7fe fb4c 	bl	31eb8 <am_hal_gpio_pinconfig>
   33820:	4b75      	ldr	r3, [pc, #468]	@ (339f8 <am_bsp_iom_pins_enable+0x278>)
   33822:	203e      	movs	r0, #62	@ 0x3e
   33824:	6819      	ldr	r1, [r3, #0]
   33826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3382a:	f7fe bb45 	b.w	31eb8 <am_hal_gpio_pinconfig>
   3382e:	4b73      	ldr	r3, [pc, #460]	@ (339fc <am_bsp_iom_pins_enable+0x27c>)
   33830:	203d      	movs	r0, #61	@ 0x3d
   33832:	6819      	ldr	r1, [r3, #0]
   33834:	f7fe fb40 	bl	31eb8 <am_hal_gpio_pinconfig>
   33838:	4b71      	ldr	r3, [pc, #452]	@ (33a00 <am_bsp_iom_pins_enable+0x280>)
   3383a:	203f      	movs	r0, #63	@ 0x3f
   3383c:	6819      	ldr	r1, [r3, #0]
   3383e:	f7fe fb3b 	bl	31eb8 <am_hal_gpio_pinconfig>
   33842:	4b70      	ldr	r3, [pc, #448]	@ (33a04 <am_bsp_iom_pins_enable+0x284>)
   33844:	203e      	movs	r0, #62	@ 0x3e
   33846:	6819      	ldr	r1, [r3, #0]
   33848:	f7fe fb36 	bl	31eb8 <am_hal_gpio_pinconfig>
   3384c:	4b6e      	ldr	r3, [pc, #440]	@ (33a08 <am_bsp_iom_pins_enable+0x288>)
   3384e:	201e      	movs	r0, #30
   33850:	6819      	ldr	r1, [r3, #0]
   33852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33856:	f7fe bb2f 	b.w	31eb8 <am_hal_gpio_pinconfig>
   3385a:	4b6c      	ldr	r3, [pc, #432]	@ (33a0c <am_bsp_iom_pins_enable+0x28c>)
   3385c:	202f      	movs	r0, #47	@ 0x2f
   3385e:	6819      	ldr	r1, [r3, #0]
   33860:	f7fe fb2a 	bl	31eb8 <am_hal_gpio_pinconfig>
   33864:	4b6a      	ldr	r3, [pc, #424]	@ (33a10 <am_bsp_iom_pins_enable+0x290>)
   33866:	2030      	movs	r0, #48	@ 0x30
   33868:	6819      	ldr	r1, [r3, #0]
   3386a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3386e:	f7fe bb23 	b.w	31eb8 <am_hal_gpio_pinconfig>
   33872:	4b68      	ldr	r3, [pc, #416]	@ (33a14 <am_bsp_iom_pins_enable+0x294>)
   33874:	202f      	movs	r0, #47	@ 0x2f
   33876:	6819      	ldr	r1, [r3, #0]
   33878:	f7fe fb1e 	bl	31eb8 <am_hal_gpio_pinconfig>
   3387c:	4b66      	ldr	r3, [pc, #408]	@ (33a18 <am_bsp_iom_pins_enable+0x298>)
   3387e:	2031      	movs	r0, #49	@ 0x31
   33880:	6819      	ldr	r1, [r3, #0]
   33882:	f7fe fb19 	bl	31eb8 <am_hal_gpio_pinconfig>
   33886:	4b65      	ldr	r3, [pc, #404]	@ (33a1c <am_bsp_iom_pins_enable+0x29c>)
   33888:	2030      	movs	r0, #48	@ 0x30
   3388a:	6819      	ldr	r1, [r3, #0]
   3388c:	f7fe fb14 	bl	31eb8 <am_hal_gpio_pinconfig>
   33890:	4b63      	ldr	r3, [pc, #396]	@ (33a20 <am_bsp_iom_pins_enable+0x2a0>)
   33892:	203c      	movs	r0, #60	@ 0x3c
   33894:	6819      	ldr	r1, [r3, #0]
   33896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3389a:	f7fe bb0d 	b.w	31eb8 <am_hal_gpio_pinconfig>
   3389e:	4b61      	ldr	r3, [pc, #388]	@ (33a24 <am_bsp_iom_pins_enable+0x2a4>)
   338a0:	2022      	movs	r0, #34	@ 0x22
   338a2:	6819      	ldr	r1, [r3, #0]
   338a4:	f7fe fb08 	bl	31eb8 <am_hal_gpio_pinconfig>
   338a8:	4b5f      	ldr	r3, [pc, #380]	@ (33a28 <am_bsp_iom_pins_enable+0x2a8>)
   338aa:	2024      	movs	r0, #36	@ 0x24
   338ac:	6819      	ldr	r1, [r3, #0]
   338ae:	f7fe fb03 	bl	31eb8 <am_hal_gpio_pinconfig>
   338b2:	4b5e      	ldr	r3, [pc, #376]	@ (33a2c <am_bsp_iom_pins_enable+0x2ac>)
   338b4:	2023      	movs	r0, #35	@ 0x23
   338b6:	6819      	ldr	r1, [r3, #0]
   338b8:	f7fe fafe 	bl	31eb8 <am_hal_gpio_pinconfig>
   338bc:	4b5c      	ldr	r3, [pc, #368]	@ (33a30 <am_bsp_iom_pins_enable+0x2b0>)
   338be:	2036      	movs	r0, #54	@ 0x36
   338c0:	6819      	ldr	r1, [r3, #0]
   338c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   338c6:	f7fe baf7 	b.w	31eb8 <am_hal_gpio_pinconfig>
   338ca:	4b5a      	ldr	r3, [pc, #360]	@ (33a34 <am_bsp_iom_pins_enable+0x2b4>)
   338cc:	201f      	movs	r0, #31
   338ce:	6819      	ldr	r1, [r3, #0]
   338d0:	f7fe faf2 	bl	31eb8 <am_hal_gpio_pinconfig>
   338d4:	4b58      	ldr	r3, [pc, #352]	@ (33a38 <am_bsp_iom_pins_enable+0x2b8>)
   338d6:	2020      	movs	r0, #32
   338d8:	6819      	ldr	r1, [r3, #0]
   338da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   338de:	f7fe baeb 	b.w	31eb8 <am_hal_gpio_pinconfig>
   338e2:	4b56      	ldr	r3, [pc, #344]	@ (33a3c <am_bsp_iom_pins_enable+0x2bc>)
   338e4:	201f      	movs	r0, #31
   338e6:	6819      	ldr	r1, [r3, #0]
   338e8:	f7fe fae6 	bl	31eb8 <am_hal_gpio_pinconfig>
   338ec:	4b54      	ldr	r3, [pc, #336]	@ (33a40 <am_bsp_iom_pins_enable+0x2c0>)
   338ee:	2021      	movs	r0, #33	@ 0x21
   338f0:	6819      	ldr	r1, [r3, #0]
   338f2:	f7fe fae1 	bl	31eb8 <am_hal_gpio_pinconfig>
   338f6:	4b53      	ldr	r3, [pc, #332]	@ (33a44 <am_bsp_iom_pins_enable+0x2c4>)
   338f8:	2020      	movs	r0, #32
   338fa:	6819      	ldr	r1, [r3, #0]
   338fc:	f7fe fadc 	bl	31eb8 <am_hal_gpio_pinconfig>
   33900:	4b51      	ldr	r3, [pc, #324]	@ (33a48 <am_bsp_iom_pins_enable+0x2c8>)
   33902:	2055      	movs	r0, #85	@ 0x55
   33904:	6819      	ldr	r1, [r3, #0]
   33906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3390a:	f7fe bad5 	b.w	31eb8 <am_hal_gpio_pinconfig>
   3390e:	4b4f      	ldr	r3, [pc, #316]	@ (33a4c <am_bsp_iom_pins_enable+0x2cc>)
   33910:	2019      	movs	r0, #25
   33912:	6819      	ldr	r1, [r3, #0]
   33914:	f7fe fad0 	bl	31eb8 <am_hal_gpio_pinconfig>
   33918:	4b4d      	ldr	r3, [pc, #308]	@ (33a50 <am_bsp_iom_pins_enable+0x2d0>)
   3391a:	201a      	movs	r0, #26
   3391c:	6819      	ldr	r1, [r3, #0]
   3391e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33922:	f7fe bac9 	b.w	31eb8 <am_hal_gpio_pinconfig>
   33926:	4b4b      	ldr	r3, [pc, #300]	@ (33a54 <am_bsp_iom_pins_enable+0x2d4>)
   33928:	2019      	movs	r0, #25
   3392a:	6819      	ldr	r1, [r3, #0]
   3392c:	f7fe fac4 	bl	31eb8 <am_hal_gpio_pinconfig>
   33930:	4b49      	ldr	r3, [pc, #292]	@ (33a58 <am_bsp_iom_pins_enable+0x2d8>)
   33932:	201b      	movs	r0, #27
   33934:	6819      	ldr	r1, [r3, #0]
   33936:	f7fe fabf 	bl	31eb8 <am_hal_gpio_pinconfig>
   3393a:	4b48      	ldr	r3, [pc, #288]	@ (33a5c <am_bsp_iom_pins_enable+0x2dc>)
   3393c:	201a      	movs	r0, #26
   3393e:	6819      	ldr	r1, [r3, #0]
   33940:	f7fe faba 	bl	31eb8 <am_hal_gpio_pinconfig>
   33944:	4b46      	ldr	r3, [pc, #280]	@ (33a60 <am_bsp_iom_pins_enable+0x2e0>)
   33946:	2025      	movs	r0, #37	@ 0x25
   33948:	6819      	ldr	r1, [r3, #0]
   3394a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3394e:	f7fe bab3 	b.w	31eb8 <am_hal_gpio_pinconfig>
   33952:	4b44      	ldr	r3, [pc, #272]	@ (33a64 <am_bsp_iom_pins_enable+0x2e4>)
   33954:	2008      	movs	r0, #8
   33956:	6819      	ldr	r1, [r3, #0]
   33958:	f7fe faae 	bl	31eb8 <am_hal_gpio_pinconfig>
   3395c:	4b42      	ldr	r3, [pc, #264]	@ (33a68 <am_bsp_iom_pins_enable+0x2e8>)
   3395e:	2009      	movs	r0, #9
   33960:	6819      	ldr	r1, [r3, #0]
   33962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33966:	f7fe baa7 	b.w	31eb8 <am_hal_gpio_pinconfig>
   3396a:	4b40      	ldr	r3, [pc, #256]	@ (33a6c <am_bsp_iom_pins_enable+0x2ec>)
   3396c:	2008      	movs	r0, #8
   3396e:	6819      	ldr	r1, [r3, #0]
   33970:	f7fe faa2 	bl	31eb8 <am_hal_gpio_pinconfig>
   33974:	4b3e      	ldr	r3, [pc, #248]	@ (33a70 <am_bsp_iom_pins_enable+0x2f0>)
   33976:	200a      	movs	r0, #10
   33978:	6819      	ldr	r1, [r3, #0]
   3397a:	f7fe fa9d 	bl	31eb8 <am_hal_gpio_pinconfig>
   3397e:	4b3d      	ldr	r3, [pc, #244]	@ (33a74 <am_bsp_iom_pins_enable+0x2f4>)
   33980:	2009      	movs	r0, #9
   33982:	6819      	ldr	r1, [r3, #0]
   33984:	f7fe fa98 	bl	31eb8 <am_hal_gpio_pinconfig>
   33988:	4b3b      	ldr	r3, [pc, #236]	@ (33a78 <am_bsp_iom_pins_enable+0x2f8>)
   3398a:	200b      	movs	r0, #11
   3398c:	6819      	ldr	r1, [r3, #0]
   3398e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33992:	f7fe ba91 	b.w	31eb8 <am_hal_gpio_pinconfig>
   33996:	4b39      	ldr	r3, [pc, #228]	@ (33a7c <am_bsp_iom_pins_enable+0x2fc>)
   33998:	2005      	movs	r0, #5
   3399a:	6819      	ldr	r1, [r3, #0]
   3399c:	f7fe fa8c 	bl	31eb8 <am_hal_gpio_pinconfig>
   339a0:	4b37      	ldr	r3, [pc, #220]	@ (33a80 <am_bsp_iom_pins_enable+0x300>)
   339a2:	2006      	movs	r0, #6
   339a4:	6819      	ldr	r1, [r3, #0]
   339a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   339aa:	f7fe ba85 	b.w	31eb8 <am_hal_gpio_pinconfig>
   339ae:	4b35      	ldr	r3, [pc, #212]	@ (33a84 <am_bsp_iom_pins_enable+0x304>)
   339b0:	2005      	movs	r0, #5
   339b2:	6819      	ldr	r1, [r3, #0]
   339b4:	f7fe fa80 	bl	31eb8 <am_hal_gpio_pinconfig>
   339b8:	4b33      	ldr	r3, [pc, #204]	@ (33a88 <am_bsp_iom_pins_enable+0x308>)
   339ba:	2007      	movs	r0, #7
   339bc:	6819      	ldr	r1, [r3, #0]
   339be:	f7fe fa7b 	bl	31eb8 <am_hal_gpio_pinconfig>
   339c2:	4b32      	ldr	r3, [pc, #200]	@ (33a8c <am_bsp_iom_pins_enable+0x30c>)
   339c4:	2006      	movs	r0, #6
   339c6:	6819      	ldr	r1, [r3, #0]
   339c8:	f7fe fa76 	bl	31eb8 <am_hal_gpio_pinconfig>
   339cc:	4b30      	ldr	r3, [pc, #192]	@ (33a90 <am_bsp_iom_pins_enable+0x310>)
   339ce:	2048      	movs	r0, #72	@ 0x48
   339d0:	6819      	ldr	r1, [r3, #0]
   339d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   339d6:	f7fe ba6f 	b.w	31eb8 <am_hal_gpio_pinconfig>
   339da:	bf00      	nop
   339dc:	1000cc38 	.word	0x1000cc38
   339e0:	1000cc3c 	.word	0x1000cc3c
   339e4:	1000cc34 	.word	0x1000cc34
   339e8:	10055060 	.word	0x10055060
   339ec:	1000cc30 	.word	0x1000cc30
   339f0:	1000cc2c 	.word	0x1000cc2c
   339f4:	1000cc24 	.word	0x1000cc24
   339f8:	1000cc28 	.word	0x1000cc28
   339fc:	1000cc20 	.word	0x1000cc20
   33a00:	1005505c 	.word	0x1005505c
   33a04:	1000cc1c 	.word	0x1000cc1c
   33a08:	1000cc18 	.word	0x1000cc18
   33a0c:	1000cc10 	.word	0x1000cc10
   33a10:	1000cc14 	.word	0x1000cc14
   33a14:	1000cc0c 	.word	0x1000cc0c
   33a18:	10055058 	.word	0x10055058
   33a1c:	1000cc08 	.word	0x1000cc08
   33a20:	1000cc04 	.word	0x1000cc04
   33a24:	1000cc00 	.word	0x1000cc00
   33a28:	10055054 	.word	0x10055054
   33a2c:	1000cbfc 	.word	0x1000cbfc
   33a30:	1000cbf8 	.word	0x1000cbf8
   33a34:	1000cbf0 	.word	0x1000cbf0
   33a38:	1000cbf4 	.word	0x1000cbf4
   33a3c:	1000cbec 	.word	0x1000cbec
   33a40:	10055050 	.word	0x10055050
   33a44:	1000cbe8 	.word	0x1000cbe8
   33a48:	1000cbe4 	.word	0x1000cbe4
   33a4c:	1000cbdc 	.word	0x1000cbdc
   33a50:	1000cbe0 	.word	0x1000cbe0
   33a54:	1000cbd8 	.word	0x1000cbd8
   33a58:	1005504c 	.word	0x1005504c
   33a5c:	1000cbd4 	.word	0x1000cbd4
   33a60:	1000cbd0 	.word	0x1000cbd0
   33a64:	1000cbc8 	.word	0x1000cbc8
   33a68:	1000cbcc 	.word	0x1000cbcc
   33a6c:	1000cbc4 	.word	0x1000cbc4
   33a70:	1000cbbc 	.word	0x1000cbbc
   33a74:	1000cbc0 	.word	0x1000cbc0
   33a78:	1000cbb8 	.word	0x1000cbb8
   33a7c:	1000cbb0 	.word	0x1000cbb0
   33a80:	1000cbb4 	.word	0x1000cbb4
   33a84:	1000cbac 	.word	0x1000cbac
   33a88:	10055048 	.word	0x10055048
   33a8c:	1000cba8 	.word	0x1000cba8
   33a90:	1000cba4 	.word	0x1000cba4

00033a94 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   33a94:	b570      	push	{r4, r5, r6, lr}
   33a96:	6803      	ldr	r3, [r0, #0]
   33a98:	b084      	sub	sp, #16
   33a9a:	2400      	movs	r4, #0
   33a9c:	699e      	ldr	r6, [r3, #24]
   33a9e:	9403      	str	r4, [sp, #12]
   33aa0:	2310      	movs	r3, #16
   33aa2:	4615      	mov	r5, r2
   33aa4:	9302      	str	r3, [sp, #8]
   33aa6:	e9cd 4400 	strd	r4, r4, [sp]
   33aaa:	466b      	mov	r3, sp
   33aac:	6812      	ldr	r2, [r2, #0]
   33aae:	47b0      	blx	r6
   33ab0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   33ab4:	f003 0306 	and.w	r3, r3, #6
   33ab8:	2b06      	cmp	r3, #6
   33aba:	bf03      	ittte	eq
   33abc:	9b00      	ldreq	r3, [sp, #0]
   33abe:	602b      	streq	r3, [r5, #0]
   33ac0:	2001      	moveq	r0, #1
   33ac2:	4620      	movne	r0, r4
   33ac4:	b004      	add	sp, #16
   33ac6:	bd70      	pop	{r4, r5, r6, pc}

00033ac8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   33ac8:	9800      	ldr	r0, [sp, #0]
   33aca:	4290      	cmp	r0, r2
   33acc:	bf0c      	ite	eq
   33ace:	2006      	moveq	r0, #6
   33ad0:	2001      	movne	r0, #1
   33ad2:	4770      	bx	lr

00033ad4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   33ad4:	b510      	push	{r4, lr}
   33ad6:	4b03      	ldr	r3, [pc, #12]	@ (33ae4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   33ad8:	6003      	str	r3, [r0, #0]
   33ada:	4604      	mov	r4, r0
   33adc:	f000 f97c 	bl	33dd8 <_ZNSt9type_infoD1Ev>
   33ae0:	4620      	mov	r0, r4
   33ae2:	bd10      	pop	{r4, pc}
   33ae4:	00047c24 	.word	0x00047c24

00033ae8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   33ae8:	b510      	push	{r4, lr}
   33aea:	4b05      	ldr	r3, [pc, #20]	@ (33b00 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   33aec:	6003      	str	r3, [r0, #0]
   33aee:	4604      	mov	r4, r0
   33af0:	f000 f972 	bl	33dd8 <_ZNSt9type_infoD1Ev>
   33af4:	4620      	mov	r0, r4
   33af6:	2108      	movs	r1, #8
   33af8:	f7fd fba2 	bl	31240 <_ZdlPvj>
   33afc:	4620      	mov	r0, r4
   33afe:	bd10      	pop	{r4, pc}
   33b00:	00047c24 	.word	0x00047c24

00033b04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   33b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33b08:	9f06      	ldr	r7, [sp, #24]
   33b0a:	9908      	ldr	r1, [sp, #32]
   33b0c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
   33b0e:	428f      	cmp	r7, r1
   33b10:	4604      	mov	r4, r0
   33b12:	4690      	mov	r8, r2
   33b14:	461d      	mov	r5, r3
   33b16:	d00c      	beq.n	33b32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
   33b18:	4629      	mov	r1, r5
   33b1a:	4620      	mov	r0, r4
   33b1c:	f000 f978 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   33b20:	b120      	cbz	r0, 33b2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   33b22:	2301      	movs	r3, #1
   33b24:	6037      	str	r7, [r6, #0]
   33b26:	f886 8004 	strb.w	r8, [r6, #4]
   33b2a:	71b3      	strb	r3, [r6, #6]
   33b2c:	2000      	movs	r0, #0
   33b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33b32:	9907      	ldr	r1, [sp, #28]
   33b34:	f000 f96c 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   33b38:	2800      	cmp	r0, #0
   33b3a:	d0ed      	beq.n	33b18 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
   33b3c:	f886 8005 	strb.w	r8, [r6, #5]
   33b40:	2000      	movs	r0, #0
   33b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33b46:	bf00      	nop

00033b48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   33b48:	b538      	push	{r3, r4, r5, lr}
   33b4a:	4615      	mov	r5, r2
   33b4c:	461c      	mov	r4, r3
   33b4e:	f000 f95f 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   33b52:	b900      	cbnz	r0, 33b56 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0xe>
   33b54:	bd38      	pop	{r3, r4, r5, pc}
   33b56:	2208      	movs	r2, #8
   33b58:	2306      	movs	r3, #6
   33b5a:	6025      	str	r5, [r4, #0]
   33b5c:	60e2      	str	r2, [r4, #12]
   33b5e:	7123      	strb	r3, [r4, #4]
   33b60:	bd38      	pop	{r3, r4, r5, pc}
   33b62:	bf00      	nop

00033b64 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   33b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33b68:	4606      	mov	r6, r0
   33b6a:	4617      	mov	r7, r2
   33b6c:	461d      	mov	r5, r3
   33b6e:	460c      	mov	r4, r1
   33b70:	f000 f94e 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   33b74:	b948      	cbnz	r0, 33b8a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   33b76:	2d03      	cmp	r5, #3
   33b78:	d807      	bhi.n	33b8a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   33b7a:	6823      	ldr	r3, [r4, #0]
   33b7c:	463a      	mov	r2, r7
   33b7e:	4631      	mov	r1, r6
   33b80:	4620      	mov	r0, r4
   33b82:	695b      	ldr	r3, [r3, #20]
   33b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   33b88:	4718      	bx	r3
   33b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33b8e:	bf00      	nop

00033b90 <_ZNK10__cxxabiv120__function_type_info15__is_function_pEv>:
   33b90:	2001      	movs	r0, #1
   33b92:	4770      	bx	lr

00033b94 <_ZN10__cxxabiv120__function_type_infoD1Ev>:
   33b94:	b510      	push	{r4, lr}
   33b96:	4b03      	ldr	r3, [pc, #12]	@ (33ba4 <_ZN10__cxxabiv120__function_type_infoD1Ev+0x10>)
   33b98:	6003      	str	r3, [r0, #0]
   33b9a:	4604      	mov	r4, r0
   33b9c:	f000 f91c 	bl	33dd8 <_ZNSt9type_infoD1Ev>
   33ba0:	4620      	mov	r0, r4
   33ba2:	bd10      	pop	{r4, pc}
   33ba4:	00047c84 	.word	0x00047c84

00033ba8 <_ZN10__cxxabiv120__function_type_infoD0Ev>:
   33ba8:	b510      	push	{r4, lr}
   33baa:	4b05      	ldr	r3, [pc, #20]	@ (33bc0 <_ZN10__cxxabiv120__function_type_infoD0Ev+0x18>)
   33bac:	6003      	str	r3, [r0, #0]
   33bae:	4604      	mov	r4, r0
   33bb0:	f000 f912 	bl	33dd8 <_ZNSt9type_infoD1Ev>
   33bb4:	4620      	mov	r0, r4
   33bb6:	2108      	movs	r1, #8
   33bb8:	f7fd fb42 	bl	31240 <_ZdlPvj>
   33bbc:	4620      	mov	r0, r4
   33bbe:	bd10      	pop	{r4, pc}
   33bc0:	00047c84 	.word	0x00047c84

00033bc4 <__cxa_guard_acquire>:
   33bc4:	6803      	ldr	r3, [r0, #0]
   33bc6:	07db      	lsls	r3, r3, #31
   33bc8:	d405      	bmi.n	33bd6 <__cxa_guard_acquire+0x12>
   33bca:	7843      	ldrb	r3, [r0, #1]
   33bcc:	b92b      	cbnz	r3, 33bda <__cxa_guard_acquire+0x16>
   33bce:	2301      	movs	r3, #1
   33bd0:	7043      	strb	r3, [r0, #1]
   33bd2:	4618      	mov	r0, r3
   33bd4:	4770      	bx	lr
   33bd6:	2000      	movs	r0, #0
   33bd8:	4770      	bx	lr
   33bda:	b510      	push	{r4, lr}
   33bdc:	2004      	movs	r0, #4
   33bde:	f000 f9f5 	bl	33fcc <__cxa_allocate_exception>
   33be2:	4604      	mov	r4, r0
   33be4:	f000 f826 	bl	33c34 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
   33be8:	4a02      	ldr	r2, [pc, #8]	@ (33bf4 <__cxa_guard_acquire+0x30>)
   33bea:	4903      	ldr	r1, [pc, #12]	@ (33bf8 <__cxa_guard_acquire+0x34>)
   33bec:	4620      	mov	r0, r4
   33bee:	f000 fed7 	bl	349a0 <__cxa_throw>
   33bf2:	bf00      	nop
   33bf4:	00033c05 	.word	0x00033c05
   33bf8:	00047cc0 	.word	0x00047cc0

00033bfc <__cxa_guard_release>:
   33bfc:	2301      	movs	r3, #1
   33bfe:	6003      	str	r3, [r0, #0]
   33c00:	4770      	bx	lr
   33c02:	bf00      	nop

00033c04 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   33c04:	b510      	push	{r4, lr}
   33c06:	4b03      	ldr	r3, [pc, #12]	@ (33c14 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
   33c08:	6003      	str	r3, [r0, #0]
   33c0a:	4604      	mov	r4, r0
   33c0c:	f000 fb4e 	bl	342ac <_ZNSt9exceptionD1Ev>
   33c10:	4620      	mov	r0, r4
   33c12:	bd10      	pop	{r4, pc}
   33c14:	00047cd4 	.word	0x00047cd4

00033c18 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   33c18:	b510      	push	{r4, lr}
   33c1a:	4b05      	ldr	r3, [pc, #20]	@ (33c30 <_ZN9__gnu_cxx20recursive_init_errorD0Ev+0x18>)
   33c1c:	6003      	str	r3, [r0, #0]
   33c1e:	4604      	mov	r4, r0
   33c20:	f000 fb44 	bl	342ac <_ZNSt9exceptionD1Ev>
   33c24:	4620      	mov	r0, r4
   33c26:	2104      	movs	r1, #4
   33c28:	f7fd fb0a 	bl	31240 <_ZdlPvj>
   33c2c:	4620      	mov	r0, r4
   33c2e:	bd10      	pop	{r4, pc}
   33c30:	00047cd4 	.word	0x00047cd4

00033c34 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   33c34:	4b01      	ldr	r3, [pc, #4]	@ (33c3c <_ZN9__gnu_cxx20recursive_init_errorC1Ev+0x8>)
   33c36:	6003      	str	r3, [r0, #0]
   33c38:	4770      	bx	lr
   33c3a:	bf00      	nop
   33c3c:	00047cd4 	.word	0x00047cd4

00033c40 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   33c40:	2001      	movs	r0, #1
   33c42:	4770      	bx	lr

00033c44 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   33c44:	b510      	push	{r4, lr}
   33c46:	4b03      	ldr	r3, [pc, #12]	@ (33c54 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
   33c48:	6003      	str	r3, [r0, #0]
   33c4a:	4604      	mov	r4, r0
   33c4c:	f000 ff1c 	bl	34a88 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   33c50:	4620      	mov	r0, r4
   33c52:	bd10      	pop	{r4, pc}
   33c54:	00047d18 	.word	0x00047d18

00033c58 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   33c58:	b510      	push	{r4, lr}
   33c5a:	4b05      	ldr	r3, [pc, #20]	@ (33c70 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
   33c5c:	6003      	str	r3, [r0, #0]
   33c5e:	4604      	mov	r4, r0
   33c60:	f000 ff12 	bl	34a88 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>
   33c64:	4620      	mov	r0, r4
   33c66:	2110      	movs	r1, #16
   33c68:	f7fd faea 	bl	31240 <_ZdlPvj>
   33c6c:	4620      	mov	r0, r4
   33c6e:	bd10      	pop	{r4, pc}
   33c70:	00047d18 	.word	0x00047d18

00033c74 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   33c74:	b570      	push	{r4, r5, r6, lr}
   33c76:	2b01      	cmp	r3, #1
   33c78:	4605      	mov	r5, r0
   33c7a:	b082      	sub	sp, #8
   33c7c:	68c0      	ldr	r0, [r0, #12]
   33c7e:	461c      	mov	r4, r3
   33c80:	460e      	mov	r6, r1
   33c82:	d909      	bls.n	33c98 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x24>
   33c84:	68e8      	ldr	r0, [r5, #12]
   33c86:	68f1      	ldr	r1, [r6, #12]
   33c88:	6805      	ldr	r5, [r0, #0]
   33c8a:	1ca3      	adds	r3, r4, #2
   33c8c:	692c      	ldr	r4, [r5, #16]
   33c8e:	46a4      	mov	ip, r4
   33c90:	b002      	add	sp, #8
   33c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   33c96:	4760      	bx	ip
   33c98:	4907      	ldr	r1, [pc, #28]	@ (33cb8 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x44>)
   33c9a:	9201      	str	r2, [sp, #4]
   33c9c:	f000 f8b8 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   33ca0:	9a01      	ldr	r2, [sp, #4]
   33ca2:	2800      	cmp	r0, #0
   33ca4:	d0ee      	beq.n	33c84 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x10>
   33ca6:	68f0      	ldr	r0, [r6, #12]
   33ca8:	6803      	ldr	r3, [r0, #0]
   33caa:	68db      	ldr	r3, [r3, #12]
   33cac:	4798      	blx	r3
   33cae:	f080 0001 	eor.w	r0, r0, #1
   33cb2:	b2c0      	uxtb	r0, r0
   33cb4:	b002      	add	sp, #8
   33cb6:	bd70      	pop	{r4, r5, r6, pc}
   33cb8:	00047ee8 	.word	0x00047ee8

00033cbc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   33cbc:	b510      	push	{r4, lr}
   33cbe:	4b03      	ldr	r3, [pc, #12]	@ (33ccc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   33cc0:	6003      	str	r3, [r0, #0]
   33cc2:	4604      	mov	r4, r0
   33cc4:	f7ff ff06 	bl	33ad4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   33cc8:	4620      	mov	r0, r4
   33cca:	bd10      	pop	{r4, pc}
   33ccc:	00047d70 	.word	0x00047d70

00033cd0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   33cd0:	b510      	push	{r4, lr}
   33cd2:	4b05      	ldr	r3, [pc, #20]	@ (33ce8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   33cd4:	6003      	str	r3, [r0, #0]
   33cd6:	4604      	mov	r4, r0
   33cd8:	f7ff fefc 	bl	33ad4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   33cdc:	4620      	mov	r0, r4
   33cde:	210c      	movs	r1, #12
   33ce0:	f7fd faae 	bl	31240 <_ZdlPvj>
   33ce4:	4620      	mov	r0, r4
   33ce6:	bd10      	pop	{r4, pc}
   33ce8:	00047d70 	.word	0x00047d70

00033cec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   33cec:	b570      	push	{r4, r5, r6, lr}
   33cee:	b082      	sub	sp, #8
   33cf0:	4604      	mov	r4, r0
   33cf2:	9e06      	ldr	r6, [sp, #24]
   33cf4:	4296      	cmp	r6, r2
   33cf6:	460d      	mov	r5, r1
   33cf8:	d009      	beq.n	33d0e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
   33cfa:	68a0      	ldr	r0, [r4, #8]
   33cfc:	6804      	ldr	r4, [r0, #0]
   33cfe:	9606      	str	r6, [sp, #24]
   33d00:	6a24      	ldr	r4, [r4, #32]
   33d02:	4629      	mov	r1, r5
   33d04:	46a4      	mov	ip, r4
   33d06:	b002      	add	sp, #8
   33d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   33d0c:	4760      	bx	ip
   33d0e:	4619      	mov	r1, r3
   33d10:	9201      	str	r2, [sp, #4]
   33d12:	9300      	str	r3, [sp, #0]
   33d14:	f000 f87c 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   33d18:	e9dd 3200 	ldrd	r3, r2, [sp]
   33d1c:	2800      	cmp	r0, #0
   33d1e:	d0ec      	beq.n	33cfa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   33d20:	2006      	movs	r0, #6
   33d22:	b002      	add	sp, #8
   33d24:	bd70      	pop	{r4, r5, r6, pc}
   33d26:	bf00      	nop

00033d28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   33d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d2c:	460d      	mov	r5, r1
   33d2e:	b081      	sub	sp, #4
   33d30:	4619      	mov	r1, r3
   33d32:	e9dd 8b0a 	ldrd	r8, fp, [sp, #40]	@ 0x28
   33d36:	e9dd a90c 	ldrd	sl, r9, [sp, #48]	@ 0x30
   33d3a:	461c      	mov	r4, r3
   33d3c:	4607      	mov	r7, r0
   33d3e:	4616      	mov	r6, r2
   33d40:	f000 f866 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   33d44:	b980      	cbnz	r0, 33d68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
   33d46:	45d0      	cmp	r8, sl
   33d48:	d027      	beq.n	33d9a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x72>
   33d4a:	68b8      	ldr	r0, [r7, #8]
   33d4c:	4623      	mov	r3, r4
   33d4e:	6804      	ldr	r4, [r0, #0]
   33d50:	e9cd a90c 	strd	sl, r9, [sp, #48]	@ 0x30
   33d54:	e9cd 8b0a 	strd	r8, fp, [sp, #40]	@ 0x28
   33d58:	69e4      	ldr	r4, [r4, #28]
   33d5a:	4632      	mov	r2, r6
   33d5c:	4629      	mov	r1, r5
   33d5e:	46a4      	mov	ip, r4
   33d60:	b001      	add	sp, #4
   33d62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d66:	4760      	bx	ip
   33d68:	2d00      	cmp	r5, #0
   33d6a:	f8c9 8000 	str.w	r8, [r9]
   33d6e:	f889 6004 	strb.w	r6, [r9, #4]
   33d72:	db0c      	blt.n	33d8e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   33d74:	44a8      	add	r8, r5
   33d76:	45c2      	cmp	sl, r8
   33d78:	bf14      	ite	ne
   33d7a:	f04f 0801 	movne.w	r8, #1
   33d7e:	f04f 0806 	moveq.w	r8, #6
   33d82:	f889 8006 	strb.w	r8, [r9, #6]
   33d86:	2000      	movs	r0, #0
   33d88:	b001      	add	sp, #4
   33d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d8e:	3502      	adds	r5, #2
   33d90:	d1f9      	bne.n	33d86 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
   33d92:	2301      	movs	r3, #1
   33d94:	f889 3006 	strb.w	r3, [r9, #6]
   33d98:	e7f5      	b.n	33d86 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>
   33d9a:	4659      	mov	r1, fp
   33d9c:	4638      	mov	r0, r7
   33d9e:	f000 f837 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   33da2:	2800      	cmp	r0, #0
   33da4:	d0d1      	beq.n	33d4a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22>
   33da6:	f889 6005 	strb.w	r6, [r9, #5]
   33daa:	e7ec      	b.n	33d86 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x5e>

00033dac <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   33dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33db0:	4606      	mov	r6, r0
   33db2:	460f      	mov	r7, r1
   33db4:	4614      	mov	r4, r2
   33db6:	461d      	mov	r5, r3
   33db8:	f7ff fec6 	bl	33b48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   33dbc:	b948      	cbnz	r0, 33dd2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   33dbe:	68b0      	ldr	r0, [r6, #8]
   33dc0:	6801      	ldr	r1, [r0, #0]
   33dc2:	4622      	mov	r2, r4
   33dc4:	698c      	ldr	r4, [r1, #24]
   33dc6:	462b      	mov	r3, r5
   33dc8:	4639      	mov	r1, r7
   33dca:	46a4      	mov	ip, r4
   33dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   33dd0:	4760      	bx	ip
   33dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33dd6:	bf00      	nop

00033dd8 <_ZNSt9type_infoD1Ev>:
   33dd8:	4770      	bx	lr
   33dda:	bf00      	nop

00033ddc <_ZNKSt9type_info14__is_pointer_pEv>:
   33ddc:	2000      	movs	r0, #0
   33dde:	4770      	bx	lr

00033de0 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   33de0:	2000      	movs	r0, #0
   33de2:	4770      	bx	lr

00033de4 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   33de4:	4288      	cmp	r0, r1
   33de6:	d011      	beq.n	33e0c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x28>
   33de8:	b508      	push	{r3, lr}
   33dea:	6840      	ldr	r0, [r0, #4]
   33dec:	7803      	ldrb	r3, [r0, #0]
   33dee:	2b2a      	cmp	r3, #42	@ 0x2a
   33df0:	d00a      	beq.n	33e08 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x24>
   33df2:	6849      	ldr	r1, [r1, #4]
   33df4:	780b      	ldrb	r3, [r1, #0]
   33df6:	2b2a      	cmp	r3, #42	@ 0x2a
   33df8:	bf08      	it	eq
   33dfa:	3101      	addeq	r1, #1
   33dfc:	f7e4 fa00 	bl	18200 <strcmp>
   33e00:	fab0 f080 	clz	r0, r0
   33e04:	0940      	lsrs	r0, r0, #5
   33e06:	bd08      	pop	{r3, pc}
   33e08:	2000      	movs	r0, #0
   33e0a:	bd08      	pop	{r3, pc}
   33e0c:	2001      	movs	r0, #1
   33e0e:	4770      	bx	lr

00033e10 <_ZNKSt9type_info7__equalERKS_>:
   33e10:	4281      	cmp	r1, r0
   33e12:	d011      	beq.n	33e38 <_ZNKSt9type_info7__equalERKS_+0x28>
   33e14:	b508      	push	{r3, lr}
   33e16:	6840      	ldr	r0, [r0, #4]
   33e18:	7803      	ldrb	r3, [r0, #0]
   33e1a:	2b2a      	cmp	r3, #42	@ 0x2a
   33e1c:	d00a      	beq.n	33e34 <_ZNKSt9type_info7__equalERKS_+0x24>
   33e1e:	6849      	ldr	r1, [r1, #4]
   33e20:	780b      	ldrb	r3, [r1, #0]
   33e22:	2b2a      	cmp	r3, #42	@ 0x2a
   33e24:	bf08      	it	eq
   33e26:	3101      	addeq	r1, #1
   33e28:	f7e4 f9ea 	bl	18200 <strcmp>
   33e2c:	fab0 f080 	clz	r0, r0
   33e30:	0940      	lsrs	r0, r0, #5
   33e32:	bd08      	pop	{r3, pc}
   33e34:	2000      	movs	r0, #0
   33e36:	bd08      	pop	{r3, pc}
   33e38:	2001      	movs	r0, #1
   33e3a:	4770      	bx	lr

00033e3c <_ZSt19__throw_logic_errorPKc>:
   33e3c:	b538      	push	{r3, r4, r5, lr}
   33e3e:	4605      	mov	r5, r0
   33e40:	2008      	movs	r0, #8
   33e42:	f000 f8c3 	bl	33fcc <__cxa_allocate_exception>
   33e46:	4629      	mov	r1, r5
   33e48:	4604      	mov	r4, r0
   33e4a:	f000 ffc3 	bl	34dd4 <_ZNSt11logic_errorC1EPKc>
   33e4e:	4a05      	ldr	r2, [pc, #20]	@ (33e64 <_ZSt19__throw_logic_errorPKc+0x28>)
   33e50:	4905      	ldr	r1, [pc, #20]	@ (33e68 <_ZSt19__throw_logic_errorPKc+0x2c>)
   33e52:	4620      	mov	r0, r4
   33e54:	f000 fda4 	bl	349a0 <__cxa_throw>
   33e58:	4620      	mov	r0, r4
   33e5a:	f000 f8cf 	bl	33ffc <__cxa_free_exception>
   33e5e:	f000 f95d 	bl	3411c <__cxa_end_cleanup>
   33e62:	bf00      	nop
   33e64:	00034cc5 	.word	0x00034cc5
   33e68:	00047f9c 	.word	0x00047f9c

00033e6c <_ZSt20__throw_length_errorPKc>:
   33e6c:	b538      	push	{r3, r4, r5, lr}
   33e6e:	4605      	mov	r5, r0
   33e70:	2008      	movs	r0, #8
   33e72:	f000 f8ab 	bl	33fcc <__cxa_allocate_exception>
   33e76:	4629      	mov	r1, r5
   33e78:	4604      	mov	r4, r0
   33e7a:	f000 ffeb 	bl	34e54 <_ZNSt12length_errorC1EPKc>
   33e7e:	4a05      	ldr	r2, [pc, #20]	@ (33e94 <_ZSt20__throw_length_errorPKc+0x28>)
   33e80:	4905      	ldr	r1, [pc, #20]	@ (33e98 <_ZSt20__throw_length_errorPKc+0x2c>)
   33e82:	4620      	mov	r0, r4
   33e84:	f000 fd8c 	bl	349a0 <__cxa_throw>
   33e88:	4620      	mov	r0, r4
   33e8a:	f000 f8b7 	bl	33ffc <__cxa_free_exception>
   33e8e:	f000 f945 	bl	3411c <__cxa_end_cleanup>
   33e92:	bf00      	nop
   33e94:	00034d05 	.word	0x00034d05
   33e98:	00047fbc 	.word	0x00047fbc

00033e9c <_ZNKSt17bad_function_call4whatEv>:
   33e9c:	4800      	ldr	r0, [pc, #0]	@ (33ea0 <_ZNKSt17bad_function_call4whatEv+0x4>)
   33e9e:	4770      	bx	lr
   33ea0:	0003fe18 	.word	0x0003fe18

00033ea4 <_ZNSt17bad_function_callD1Ev>:
   33ea4:	b510      	push	{r4, lr}
   33ea6:	4b03      	ldr	r3, [pc, #12]	@ (33eb4 <_ZNSt17bad_function_callD1Ev+0x10>)
   33ea8:	6003      	str	r3, [r0, #0]
   33eaa:	4604      	mov	r4, r0
   33eac:	f000 f9fe 	bl	342ac <_ZNSt9exceptionD1Ev>
   33eb0:	4620      	mov	r0, r4
   33eb2:	bd10      	pop	{r4, pc}
   33eb4:	00047dd8 	.word	0x00047dd8

00033eb8 <_ZNSt17bad_function_callD0Ev>:
   33eb8:	b510      	push	{r4, lr}
   33eba:	4b05      	ldr	r3, [pc, #20]	@ (33ed0 <_ZNSt17bad_function_callD0Ev+0x18>)
   33ebc:	6003      	str	r3, [r0, #0]
   33ebe:	4604      	mov	r4, r0
   33ec0:	f000 f9f4 	bl	342ac <_ZNSt9exceptionD1Ev>
   33ec4:	4620      	mov	r0, r4
   33ec6:	f7fd f9b9 	bl	3123c <_ZdlPv>
   33eca:	4620      	mov	r0, r4
   33ecc:	bd10      	pop	{r4, pc}
   33ece:	bf00      	nop
   33ed0:	00047dd8 	.word	0x00047dd8

00033ed4 <_ZSt25__throw_bad_function_callv>:
   33ed4:	b508      	push	{r3, lr}
   33ed6:	2004      	movs	r0, #4
   33ed8:	f000 f878 	bl	33fcc <__cxa_allocate_exception>
   33edc:	4b02      	ldr	r3, [pc, #8]	@ (33ee8 <_ZSt25__throw_bad_function_callv+0x14>)
   33ede:	4a03      	ldr	r2, [pc, #12]	@ (33eec <_ZSt25__throw_bad_function_callv+0x18>)
   33ee0:	4903      	ldr	r1, [pc, #12]	@ (33ef0 <_ZSt25__throw_bad_function_callv+0x1c>)
   33ee2:	6003      	str	r3, [r0, #0]
   33ee4:	f000 fd5c 	bl	349a0 <__cxa_throw>
   33ee8:	00047dd8 	.word	0x00047dd8
   33eec:	00033ea5 	.word	0x00033ea5
   33ef0:	00047dc4 	.word	0x00047dc4

00033ef4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   33ef4:	491e      	ldr	r1, [pc, #120]	@ (33f70 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x7c>)
   33ef6:	684b      	ldr	r3, [r1, #4]
   33ef8:	b530      	push	{r4, r5, lr}
   33efa:	f850 5c08 	ldr.w	r5, [r0, #-8]
   33efe:	f1a0 0408 	sub.w	r4, r0, #8
   33f02:	b32b      	cbz	r3, 33f50 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5c>
   33f04:	eb04 0e05 	add.w	lr, r4, r5
   33f08:	4573      	cmp	r3, lr
   33f0a:	d821      	bhi.n	33f50 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x5c>
   33f0c:	685a      	ldr	r2, [r3, #4]
   33f0e:	d026      	beq.n	33f5e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6a>
   33f10:	f101 0c04 	add.w	ip, r1, #4
   33f14:	b932      	cbnz	r2, 33f24 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
   33f16:	e00e      	b.n	33f36 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x42>
   33f18:	6851      	ldr	r1, [r2, #4]
   33f1a:	f103 0c04 	add.w	ip, r3, #4
   33f1e:	4613      	mov	r3, r2
   33f20:	b139      	cbz	r1, 33f32 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x3e>
   33f22:	460a      	mov	r2, r1
   33f24:	4596      	cmp	lr, r2
   33f26:	d8f7      	bhi.n	33f18 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x24>
   33f28:	bf02      	ittt	eq
   33f2a:	e9de 2100 	ldrdeq	r2, r1, [lr]
   33f2e:	6059      	streq	r1, [r3, #4]
   33f30:	18ad      	addeq	r5, r5, r2
   33f32:	f8dc 3000 	ldr.w	r3, [ip]
   33f36:	681a      	ldr	r2, [r3, #0]
   33f38:	1899      	adds	r1, r3, r2
   33f3a:	428c      	cmp	r4, r1
   33f3c:	d00c      	beq.n	33f58 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x64>
   33f3e:	685b      	ldr	r3, [r3, #4]
   33f40:	f840 3c04 	str.w	r3, [r0, #-4]
   33f44:	f8dc 3000 	ldr.w	r3, [ip]
   33f48:	f840 5c08 	str.w	r5, [r0, #-8]
   33f4c:	605c      	str	r4, [r3, #4]
   33f4e:	bd30      	pop	{r4, r5, pc}
   33f50:	f840 3c04 	str.w	r3, [r0, #-4]
   33f54:	604c      	str	r4, [r1, #4]
   33f56:	bd30      	pop	{r4, r5, pc}
   33f58:	442a      	add	r2, r5
   33f5a:	601a      	str	r2, [r3, #0]
   33f5c:	bd30      	pop	{r4, r5, pc}
   33f5e:	681b      	ldr	r3, [r3, #0]
   33f60:	f840 2c04 	str.w	r2, [r0, #-4]
   33f64:	442b      	add	r3, r5
   33f66:	f840 3c08 	str.w	r3, [r0, #-8]
   33f6a:	604c      	str	r4, [r1, #4]
   33f6c:	bd30      	pop	{r4, r5, pc}
   33f6e:	bf00      	nop
   33f70:	10055068 	.word	0x10055068

00033f74 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
   33f74:	4914      	ldr	r1, [pc, #80]	@ (33fc8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x54>)
   33f76:	f100 0308 	add.w	r3, r0, #8
   33f7a:	6848      	ldr	r0, [r1, #4]
   33f7c:	2b08      	cmp	r3, #8
   33f7e:	bf38      	it	cc
   33f80:	2308      	movcc	r3, #8
   33f82:	b1f8      	cbz	r0, 33fc4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x50>
   33f84:	3307      	adds	r3, #7
   33f86:	f023 0307 	bic.w	r3, r3, #7
   33f8a:	3104      	adds	r1, #4
   33f8c:	e002      	b.n	33f94 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x20>
   33f8e:	1d01      	adds	r1, r0, #4
   33f90:	6840      	ldr	r0, [r0, #4]
   33f92:	b180      	cbz	r0, 33fb6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x42>
   33f94:	6802      	ldr	r2, [r0, #0]
   33f96:	4293      	cmp	r3, r2
   33f98:	d8f9      	bhi.n	33f8e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x1a>
   33f9a:	b430      	push	{r4, r5}
   33f9c:	1ad4      	subs	r4, r2, r3
   33f9e:	2c07      	cmp	r4, #7
   33fa0:	6845      	ldr	r5, [r0, #4]
   33fa2:	d909      	bls.n	33fb8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>
   33fa4:	18c2      	adds	r2, r0, r3
   33fa6:	6055      	str	r5, [r2, #4]
   33fa8:	50c4      	str	r4, [r0, r3]
   33faa:	6808      	ldr	r0, [r1, #0]
   33fac:	bc30      	pop	{r4, r5}
   33fae:	6003      	str	r3, [r0, #0]
   33fb0:	3008      	adds	r0, #8
   33fb2:	600a      	str	r2, [r1, #0]
   33fb4:	4770      	bx	lr
   33fb6:	4770      	bx	lr
   33fb8:	6002      	str	r2, [r0, #0]
   33fba:	462a      	mov	r2, r5
   33fbc:	3008      	adds	r0, #8
   33fbe:	bc30      	pop	{r4, r5}
   33fc0:	600a      	str	r2, [r1, #0]
   33fc2:	4770      	bx	lr
   33fc4:	4770      	bx	lr
   33fc6:	bf00      	nop
   33fc8:	10055068 	.word	0x10055068

00033fcc <__cxa_allocate_exception>:
   33fcc:	b510      	push	{r4, lr}
   33fce:	f100 0480 	add.w	r4, r0, #128	@ 0x80
   33fd2:	4620      	mov	r0, r4
   33fd4:	f007 fb60 	bl	3b698 <malloc>
   33fd8:	4603      	mov	r3, r0
   33fda:	b130      	cbz	r0, 33fea <__cxa_allocate_exception+0x1e>
   33fdc:	2280      	movs	r2, #128	@ 0x80
   33fde:	2100      	movs	r1, #0
   33fe0:	4618      	mov	r0, r3
   33fe2:	f7f2 fe6f 	bl	26cc4 <memset>
   33fe6:	3080      	adds	r0, #128	@ 0x80
   33fe8:	bd10      	pop	{r4, pc}
   33fea:	4620      	mov	r0, r4
   33fec:	f7ff ffc2 	bl	33f74 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   33ff0:	4603      	mov	r3, r0
   33ff2:	2800      	cmp	r0, #0
   33ff4:	d1f2      	bne.n	33fdc <__cxa_allocate_exception+0x10>
   33ff6:	f000 fc67 	bl	348c8 <_ZSt9terminatev>
   33ffa:	bf00      	nop

00033ffc <__cxa_free_exception>:
   33ffc:	4b06      	ldr	r3, [pc, #24]	@ (34018 <__cxa_free_exception+0x1c>)
   33ffe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   34002:	3880      	subs	r0, #128	@ 0x80
   34004:	4413      	add	r3, r2
   34006:	4298      	cmp	r0, r3
   34008:	d203      	bcs.n	34012 <__cxa_free_exception+0x16>
   3400a:	4282      	cmp	r2, r0
   3400c:	d201      	bcs.n	34012 <__cxa_free_exception+0x16>
   3400e:	f7ff bf71 	b.w	33ef4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   34012:	f007 bb49 	b.w	3b6a8 <free>
   34016:	bf00      	nop
   34018:	10055068 	.word	0x10055068

0003401c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   3401c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34020:	4d39      	ldr	r5, [pc, #228]	@ (34108 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xec>)
   34022:	483a      	ldr	r0, [pc, #232]	@ (3410c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xf0>)
   34024:	b088      	sub	sp, #32
   34026:	2600      	movs	r6, #0
   34028:	e9c5 6601 	strd	r6, r6, [r5, #4]
   3402c:	60ee      	str	r6, [r5, #12]
   3402e:	f007 fb25 	bl	3b67c <getenv>
   34032:	4b37      	ldr	r3, [pc, #220]	@ (34110 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xf4>)
   34034:	4a37      	ldr	r2, [pc, #220]	@ (34114 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xf8>)
   34036:	2108      	movs	r1, #8
   34038:	e9cd 1302 	strd	r1, r3, [sp, #8]
   3403c:	2309      	movs	r3, #9
   3403e:	e9cd 6304 	strd	r6, r3, [sp, #16]
   34042:	2304      	movs	r3, #4
   34044:	e9cd 2306 	strd	r2, r3, [sp, #24]
   34048:	2800      	cmp	r0, #0
   3404a:	d03c      	beq.n	340c6 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xaa>
   3404c:	4e32      	ldr	r6, [pc, #200]	@ (34118 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xfc>)
   3404e:	4604      	mov	r4, r0
   34050:	7823      	ldrb	r3, [r4, #0]
   34052:	2b3a      	cmp	r3, #58	@ 0x3a
   34054:	bf08      	it	eq
   34056:	3401      	addeq	r4, #1
   34058:	220f      	movs	r2, #15
   3405a:	4621      	mov	r1, r4
   3405c:	4630      	mov	r0, r6
   3405e:	f7f2 fd15 	bl	26a8c <memcmp>
   34062:	b910      	cbnz	r0, 3406a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
   34064:	7be3      	ldrb	r3, [r4, #15]
   34066:	2b2e      	cmp	r3, #46	@ 0x2e
   34068:	d017      	beq.n	3409a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x7e>
   3406a:	4620      	mov	r0, r4
   3406c:	213a      	movs	r1, #58	@ 0x3a
   3406e:	f7f5 fd1d 	bl	29aac <strchr>
   34072:	4604      	mov	r4, r0
   34074:	2800      	cmp	r0, #0
   34076:	d1eb      	bne.n	34050 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x34>
   34078:	9a07      	ldr	r2, [sp, #28]
   3407a:	9c04      	ldr	r4, [sp, #16]
   3407c:	2a40      	cmp	r2, #64	@ 0x40
   3407e:	bfa8      	it	ge
   34080:	2240      	movge	r2, #64	@ 0x40
   34082:	2c00      	cmp	r4, #0
   34084:	bf08      	it	eq
   34086:	2406      	moveq	r4, #6
   34088:	343e      	adds	r4, #62	@ 0x3e
   3408a:	fb02 f404 	mul.w	r4, r2, r4
   3408e:	00a4      	lsls	r4, r4, #2
   34090:	60ec      	str	r4, [r5, #12]
   34092:	b9dc      	cbnz	r4, 340cc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xb0>
   34094:	b008      	add	sp, #32
   34096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3409a:	3410      	adds	r4, #16
   3409c:	af02      	add	r7, sp, #8
   3409e:	f8d7 8000 	ldr.w	r8, [r7]
   340a2:	6878      	ldr	r0, [r7, #4]
   340a4:	4621      	mov	r1, r4
   340a6:	4642      	mov	r2, r8
   340a8:	f1b8 0f00 	cmp.w	r8, #0
   340ac:	d002      	beq.n	340b4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x98>
   340ae:	f7f2 fced 	bl	26a8c <memcmp>
   340b2:	b918      	cbnz	r0, 340bc <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xa0>
   340b4:	f814 3008 	ldrb.w	r3, [r4, r8]
   340b8:	2b3d      	cmp	r3, #61	@ 0x3d
   340ba:	d011      	beq.n	340e0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xc4>
   340bc:	370c      	adds	r7, #12
   340be:	ab08      	add	r3, sp, #32
   340c0:	429f      	cmp	r7, r3
   340c2:	d1ec      	bne.n	3409e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x82>
   340c4:	e7d1      	b.n	3406a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
   340c6:	f44f 6488 	mov.w	r4, #1088	@ 0x440
   340ca:	60ec      	str	r4, [r5, #12]
   340cc:	4620      	mov	r0, r4
   340ce:	f007 fae3 	bl	3b698 <malloc>
   340d2:	60a8      	str	r0, [r5, #8]
   340d4:	b1a8      	cbz	r0, 34102 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xe6>
   340d6:	2300      	movs	r3, #0
   340d8:	e9c0 4300 	strd	r4, r3, [r0]
   340dc:	6068      	str	r0, [r5, #4]
   340de:	e7d9      	b.n	34094 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x78>
   340e0:	f108 0001 	add.w	r0, r8, #1
   340e4:	4420      	add	r0, r4
   340e6:	2200      	movs	r2, #0
   340e8:	a901      	add	r1, sp, #4
   340ea:	f007 fb8b 	bl	3b804 <strtoul>
   340ee:	9c01      	ldr	r4, [sp, #4]
   340f0:	7823      	ldrb	r3, [r4, #0]
   340f2:	2b3a      	cmp	r3, #58	@ 0x3a
   340f4:	d001      	beq.n	340fa <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0xde>
   340f6:	2b00      	cmp	r3, #0
   340f8:	d1b7      	bne.n	3406a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
   340fa:	2800      	cmp	r0, #0
   340fc:	bfa8      	it	ge
   340fe:	60b8      	strge	r0, [r7, #8]
   34100:	e7b3      	b.n	3406a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x4e>
   34102:	60e8      	str	r0, [r5, #12]
   34104:	e7c6      	b.n	34094 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x78>
   34106:	bf00      	nop
   34108:	10055068 	.word	0x10055068
   3410c:	0003fe2c 	.word	0x0003fe2c
   34110:	0003fe40 	.word	0x0003fe40
   34114:	0003fe4c 	.word	0x0003fe4c
   34118:	0003fe58 	.word	0x0003fe58

0003411c <__cxa_end_cleanup>:
   3411c:	b41e      	push	{r1, r2, r3, r4}
   3411e:	f000 f88d 	bl	3423c <__gnu_end_cleanup>
   34122:	bc1e      	pop	{r1, r2, r3, r4}
   34124:	f7e5 f934 	bl	19390 <_Unwind_Resume>

00034128 <__cxa_type_match>:
   34128:	b5f0      	push	{r4, r5, r6, r7, lr}
   3412a:	7802      	ldrb	r2, [r0, #0]
   3412c:	2a47      	cmp	r2, #71	@ 0x47
   3412e:	b083      	sub	sp, #12
   34130:	460c      	mov	r4, r1
   34132:	461d      	mov	r5, r3
   34134:	d019      	beq.n	3416a <__cxa_type_match+0x42>
   34136:	4e26      	ldr	r6, [pc, #152]	@ (341d0 <__cxa_type_match+0xa8>)
   34138:	2000      	movs	r0, #0
   3413a:	6833      	ldr	r3, [r6, #0]
   3413c:	9001      	str	r0, [sp, #4]
   3413e:	689b      	ldr	r3, [r3, #8]
   34140:	4630      	mov	r0, r6
   34142:	4798      	blx	r3
   34144:	b178      	cbz	r0, 34166 <__cxa_type_match+0x3e>
   34146:	9b01      	ldr	r3, [sp, #4]
   34148:	681b      	ldr	r3, [r3, #0]
   3414a:	9301      	str	r3, [sp, #4]
   3414c:	2702      	movs	r7, #2
   3414e:	6823      	ldr	r3, [r4, #0]
   34150:	4631      	mov	r1, r6
   34152:	4620      	mov	r0, r4
   34154:	691e      	ldr	r6, [r3, #16]
   34156:	aa01      	add	r2, sp, #4
   34158:	2301      	movs	r3, #1
   3415a:	47b0      	blx	r6
   3415c:	bb38      	cbnz	r0, 341ae <__cxa_type_match+0x86>
   3415e:	4607      	mov	r7, r0
   34160:	4638      	mov	r0, r7
   34162:	b003      	add	sp, #12
   34164:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34166:	2701      	movs	r7, #1
   34168:	e7f1      	b.n	3414e <__cxa_type_match+0x26>
   3416a:	7843      	ldrb	r3, [r0, #1]
   3416c:	2b4e      	cmp	r3, #78	@ 0x4e
   3416e:	d1e2      	bne.n	34136 <__cxa_type_match+0xe>
   34170:	7883      	ldrb	r3, [r0, #2]
   34172:	2b55      	cmp	r3, #85	@ 0x55
   34174:	d1df      	bne.n	34136 <__cxa_type_match+0xe>
   34176:	78c3      	ldrb	r3, [r0, #3]
   34178:	2b43      	cmp	r3, #67	@ 0x43
   3417a:	d1dc      	bne.n	34136 <__cxa_type_match+0xe>
   3417c:	7903      	ldrb	r3, [r0, #4]
   3417e:	2b46      	cmp	r3, #70	@ 0x46
   34180:	d01a      	beq.n	341b8 <__cxa_type_match+0x90>
   34182:	2b43      	cmp	r3, #67	@ 0x43
   34184:	d1d7      	bne.n	34136 <__cxa_type_match+0xe>
   34186:	7943      	ldrb	r3, [r0, #5]
   34188:	2b2b      	cmp	r3, #43	@ 0x2b
   3418a:	d1d4      	bne.n	34136 <__cxa_type_match+0xe>
   3418c:	7983      	ldrb	r3, [r0, #6]
   3418e:	2b2b      	cmp	r3, #43	@ 0x2b
   34190:	d1d1      	bne.n	34136 <__cxa_type_match+0xe>
   34192:	79c3      	ldrb	r3, [r0, #7]
   34194:	2b01      	cmp	r3, #1
   34196:	d8ce      	bhi.n	34136 <__cxa_type_match+0xe>
   34198:	f850 6c20 	ldr.w	r6, [r0, #-32]
   3419c:	f04f 0300 	mov.w	r3, #0
   341a0:	9301      	str	r3, [sp, #4]
   341a2:	bf0a      	itet	eq
   341a4:	4630      	moveq	r0, r6
   341a6:	3058      	addne	r0, #88	@ 0x58
   341a8:	f856 6c78 	ldreq.w	r6, [r6, #-120]
   341ac:	e7c5      	b.n	3413a <__cxa_type_match+0x12>
   341ae:	9b01      	ldr	r3, [sp, #4]
   341b0:	602b      	str	r3, [r5, #0]
   341b2:	4638      	mov	r0, r7
   341b4:	b003      	add	sp, #12
   341b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   341b8:	7943      	ldrb	r3, [r0, #5]
   341ba:	2b4f      	cmp	r3, #79	@ 0x4f
   341bc:	d1bb      	bne.n	34136 <__cxa_type_match+0xe>
   341be:	7983      	ldrb	r3, [r0, #6]
   341c0:	2b52      	cmp	r3, #82	@ 0x52
   341c2:	d1b8      	bne.n	34136 <__cxa_type_match+0xe>
   341c4:	79c0      	ldrb	r0, [r0, #7]
   341c6:	2800      	cmp	r0, #0
   341c8:	d1b5      	bne.n	34136 <__cxa_type_match+0xe>
   341ca:	4e02      	ldr	r6, [pc, #8]	@ (341d4 <__cxa_type_match+0xac>)
   341cc:	e7b5      	b.n	3413a <__cxa_type_match+0x12>
   341ce:	bf00      	nop
   341d0:	00047e68 	.word	0x00047e68
   341d4:	00047e3c 	.word	0x00047e3c

000341d8 <__cxa_begin_cleanup>:
   341d8:	b510      	push	{r4, lr}
   341da:	4604      	mov	r4, r0
   341dc:	f000 f87e 	bl	342dc <__cxa_get_globals>
   341e0:	4622      	mov	r2, r4
   341e2:	f812 3920 	ldrb.w	r3, [r2], #-32
   341e6:	2b47      	cmp	r3, #71	@ 0x47
   341e8:	d004      	beq.n	341f4 <__cxa_begin_cleanup+0x1c>
   341ea:	6883      	ldr	r3, [r0, #8]
   341ec:	bb23      	cbnz	r3, 34238 <__cxa_begin_cleanup+0x60>
   341ee:	6082      	str	r2, [r0, #8]
   341f0:	2001      	movs	r0, #1
   341f2:	bd10      	pop	{r4, pc}
   341f4:	7863      	ldrb	r3, [r4, #1]
   341f6:	2b4e      	cmp	r3, #78	@ 0x4e
   341f8:	d1f7      	bne.n	341ea <__cxa_begin_cleanup+0x12>
   341fa:	78a3      	ldrb	r3, [r4, #2]
   341fc:	2b55      	cmp	r3, #85	@ 0x55
   341fe:	d1f4      	bne.n	341ea <__cxa_begin_cleanup+0x12>
   34200:	78e3      	ldrb	r3, [r4, #3]
   34202:	2b43      	cmp	r3, #67	@ 0x43
   34204:	d1f1      	bne.n	341ea <__cxa_begin_cleanup+0x12>
   34206:	7923      	ldrb	r3, [r4, #4]
   34208:	2b43      	cmp	r3, #67	@ 0x43
   3420a:	d1ee      	bne.n	341ea <__cxa_begin_cleanup+0x12>
   3420c:	7963      	ldrb	r3, [r4, #5]
   3420e:	2b2b      	cmp	r3, #43	@ 0x2b
   34210:	d1eb      	bne.n	341ea <__cxa_begin_cleanup+0x12>
   34212:	79a3      	ldrb	r3, [r4, #6]
   34214:	2b2b      	cmp	r3, #43	@ 0x2b
   34216:	d1e8      	bne.n	341ea <__cxa_begin_cleanup+0x12>
   34218:	79e3      	ldrb	r3, [r4, #7]
   3421a:	2b01      	cmp	r3, #1
   3421c:	d8e5      	bhi.n	341ea <__cxa_begin_cleanup+0x12>
   3421e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   34222:	3301      	adds	r3, #1
   34224:	2b01      	cmp	r3, #1
   34226:	f844 3c04 	str.w	r3, [r4, #-4]
   3422a:	d1e1      	bne.n	341f0 <__cxa_begin_cleanup+0x18>
   3422c:	6883      	ldr	r3, [r0, #8]
   3422e:	f844 3c08 	str.w	r3, [r4, #-8]
   34232:	6082      	str	r2, [r0, #8]
   34234:	2001      	movs	r0, #1
   34236:	bd10      	pop	{r4, pc}
   34238:	f000 fb46 	bl	348c8 <_ZSt9terminatev>

0003423c <__gnu_end_cleanup>:
   3423c:	b508      	push	{r3, lr}
   3423e:	f000 f84d 	bl	342dc <__cxa_get_globals>
   34242:	6883      	ldr	r3, [r0, #8]
   34244:	b383      	cbz	r3, 342a8 <__gnu_end_cleanup+0x6c>
   34246:	f893 2020 	ldrb.w	r2, [r3, #32]
   3424a:	2a47      	cmp	r2, #71	@ 0x47
   3424c:	d004      	beq.n	34258 <__gnu_end_cleanup+0x1c>
   3424e:	2200      	movs	r2, #0
   34250:	6082      	str	r2, [r0, #8]
   34252:	f103 0020 	add.w	r0, r3, #32
   34256:	bd08      	pop	{r3, pc}
   34258:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
   3425c:	2a4e      	cmp	r2, #78	@ 0x4e
   3425e:	d1f6      	bne.n	3424e <__gnu_end_cleanup+0x12>
   34260:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
   34264:	2a55      	cmp	r2, #85	@ 0x55
   34266:	d1f2      	bne.n	3424e <__gnu_end_cleanup+0x12>
   34268:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
   3426c:	2a43      	cmp	r2, #67	@ 0x43
   3426e:	d1ee      	bne.n	3424e <__gnu_end_cleanup+0x12>
   34270:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
   34274:	2a43      	cmp	r2, #67	@ 0x43
   34276:	d1ea      	bne.n	3424e <__gnu_end_cleanup+0x12>
   34278:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
   3427c:	2a2b      	cmp	r2, #43	@ 0x2b
   3427e:	d1e6      	bne.n	3424e <__gnu_end_cleanup+0x12>
   34280:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
   34284:	2a2b      	cmp	r2, #43	@ 0x2b
   34286:	d1e2      	bne.n	3424e <__gnu_end_cleanup+0x12>
   34288:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
   3428c:	2a01      	cmp	r2, #1
   3428e:	d8de      	bhi.n	3424e <__gnu_end_cleanup+0x12>
   34290:	69da      	ldr	r2, [r3, #28]
   34292:	3a01      	subs	r2, #1
   34294:	61da      	str	r2, [r3, #28]
   34296:	2a00      	cmp	r2, #0
   34298:	d1db      	bne.n	34252 <__gnu_end_cleanup+0x16>
   3429a:	6999      	ldr	r1, [r3, #24]
   3429c:	6081      	str	r1, [r0, #8]
   3429e:	2200      	movs	r2, #0
   342a0:	619a      	str	r2, [r3, #24]
   342a2:	f103 0020 	add.w	r0, r3, #32
   342a6:	bd08      	pop	{r3, pc}
   342a8:	f000 fb0e 	bl	348c8 <_ZSt9terminatev>

000342ac <_ZNSt9exceptionD1Ev>:
   342ac:	4770      	bx	lr
   342ae:	bf00      	nop

000342b0 <_ZNSt13bad_exceptionD1Ev>:
   342b0:	4770      	bx	lr
   342b2:	bf00      	nop

000342b4 <_ZGTtNKSt9exception4whatEv>:
   342b4:	4800      	ldr	r0, [pc, #0]	@ (342b8 <_ZGTtNKSt9exception4whatEv+0x4>)
   342b6:	4770      	bx	lr
   342b8:	0003fe68 	.word	0x0003fe68

000342bc <_ZGTtNKSt13bad_exception4whatEv>:
   342bc:	4800      	ldr	r0, [pc, #0]	@ (342c0 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   342be:	4770      	bx	lr
   342c0:	0003fe78 	.word	0x0003fe78

000342c4 <_ZNSt13bad_exceptionD0Ev>:
   342c4:	b510      	push	{r4, lr}
   342c6:	2104      	movs	r1, #4
   342c8:	4604      	mov	r4, r0
   342ca:	f7fc ffb9 	bl	31240 <_ZdlPvj>
   342ce:	4620      	mov	r0, r4
   342d0:	bd10      	pop	{r4, pc}
   342d2:	bf00      	nop

000342d4 <__cxa_get_globals_fast>:
   342d4:	4800      	ldr	r0, [pc, #0]	@ (342d8 <__cxa_get_globals_fast+0x4>)
   342d6:	4770      	bx	lr
   342d8:	10055078 	.word	0x10055078

000342dc <__cxa_get_globals>:
   342dc:	4800      	ldr	r0, [pc, #0]	@ (342e0 <__cxa_get_globals+0x4>)
   342de:	4770      	bx	lr
   342e0:	10055078 	.word	0x10055078

000342e4 <_ZL28read_encoded_value_with_basehjPKhPj>:
   342e4:	2850      	cmp	r0, #80	@ 0x50
   342e6:	b570      	push	{r4, r5, r6, lr}
   342e8:	d01d      	beq.n	34326 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
   342ea:	4684      	mov	ip, r0
   342ec:	f000 000f 	and.w	r0, r0, #15
   342f0:	280c      	cmp	r0, #12
   342f2:	d855      	bhi.n	343a0 <_ZL28read_encoded_value_with_basehjPKhPj+0xbc>
   342f4:	e8df f000 	tbb	[pc, r0]
   342f8:	07264407 	.word	0x07264407
   342fc:	5454541e 	.word	0x5454541e
   34300:	07222a54 	.word	0x07222a54
   34304:	1e          	.byte	0x1e
   34305:	00          	.byte	0x00
   34306:	4610      	mov	r0, r2
   34308:	f850 6b04 	ldr.w	r6, [r0], #4
   3430c:	b14e      	cbz	r6, 34322 <_ZL28read_encoded_value_with_basehjPKhPj+0x3e>
   3430e:	f00c 0470 	and.w	r4, ip, #112	@ 0x70
   34312:	2c10      	cmp	r4, #16
   34314:	bf08      	it	eq
   34316:	4611      	moveq	r1, r2
   34318:	440e      	add	r6, r1
   3431a:	f01c 0f80 	tst.w	ip, #128	@ 0x80
   3431e:	bf18      	it	ne
   34320:	6836      	ldrne	r6, [r6, #0]
   34322:	601e      	str	r6, [r3, #0]
   34324:	bd70      	pop	{r4, r5, r6, pc}
   34326:	1cd0      	adds	r0, r2, #3
   34328:	f020 0003 	bic.w	r0, r0, #3
   3432c:	f850 6b04 	ldr.w	r6, [r0], #4
   34330:	601e      	str	r6, [r3, #0]
   34332:	bd70      	pop	{r4, r5, r6, pc}
   34334:	4610      	mov	r0, r2
   34336:	f850 6b08 	ldr.w	r6, [r0], #8
   3433a:	e7e7      	b.n	3430c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   3433c:	4610      	mov	r0, r2
   3433e:	f930 6b02 	ldrsh.w	r6, [r0], #2
   34342:	e7e3      	b.n	3430c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   34344:	4610      	mov	r0, r2
   34346:	f830 6b02 	ldrh.w	r6, [r0], #2
   3434a:	e7df      	b.n	3430c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   3434c:	2600      	movs	r6, #0
   3434e:	4610      	mov	r0, r2
   34350:	4634      	mov	r4, r6
   34352:	f810 5b01 	ldrb.w	r5, [r0], #1
   34356:	f005 0e7f 	and.w	lr, r5, #127	@ 0x7f
   3435a:	fa0e fe04 	lsl.w	lr, lr, r4
   3435e:	f015 0f80 	tst.w	r5, #128	@ 0x80
   34362:	ea46 060e 	orr.w	r6, r6, lr
   34366:	f104 0407 	add.w	r4, r4, #7
   3436a:	d1f2      	bne.n	34352 <_ZL28read_encoded_value_with_basehjPKhPj+0x6e>
   3436c:	2c1f      	cmp	r4, #31
   3436e:	d8cd      	bhi.n	3430c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   34370:	066d      	lsls	r5, r5, #25
   34372:	d5cb      	bpl.n	3430c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   34374:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
   34378:	fa05 f404 	lsl.w	r4, r5, r4
   3437c:	4326      	orrs	r6, r4
   3437e:	e7c6      	b.n	3430e <_ZL28read_encoded_value_with_basehjPKhPj+0x2a>
   34380:	2600      	movs	r6, #0
   34382:	4610      	mov	r0, r2
   34384:	4634      	mov	r4, r6
   34386:	f810 5b01 	ldrb.w	r5, [r0], #1
   3438a:	f005 0e7f 	and.w	lr, r5, #127	@ 0x7f
   3438e:	fa0e fe04 	lsl.w	lr, lr, r4
   34392:	062d      	lsls	r5, r5, #24
   34394:	ea46 060e 	orr.w	r6, r6, lr
   34398:	f104 0407 	add.w	r4, r4, #7
   3439c:	d4f3      	bmi.n	34386 <_ZL28read_encoded_value_with_basehjPKhPj+0xa2>
   3439e:	e7b5      	b.n	3430c <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
   343a0:	f7f0 fee2 	bl	25168 <abort>

000343a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   343a4:	28ff      	cmp	r0, #255	@ 0xff
   343a6:	b508      	push	{r3, lr}
   343a8:	4603      	mov	r3, r0
   343aa:	d012      	beq.n	343d2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
   343ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
   343b0:	2b30      	cmp	r3, #48	@ 0x30
   343b2:	4608      	mov	r0, r1
   343b4:	d013      	beq.n	343de <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
   343b6:	d805      	bhi.n	343c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   343b8:	2b20      	cmp	r3, #32
   343ba:	d109      	bne.n	343d0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   343bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   343c0:	f008 ba67 	b.w	3c892 <_Unwind_GetTextRelBase>
   343c4:	2b40      	cmp	r3, #64	@ 0x40
   343c6:	d106      	bne.n	343d6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   343c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   343cc:	f008 ba4e 	b.w	3c86c <_Unwind_GetRegionStart>
   343d0:	d803      	bhi.n	343da <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
   343d2:	2000      	movs	r0, #0
   343d4:	bd08      	pop	{r3, pc}
   343d6:	2b50      	cmp	r3, #80	@ 0x50
   343d8:	d0fb      	beq.n	343d2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
   343da:	f7f0 fec5 	bl	25168 <abort>
   343de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   343e2:	f008 ba53 	b.w	3c88c <_Unwind_GetDataRelBase>
   343e6:	bf00      	nop

000343e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   343e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   343ea:	460c      	mov	r4, r1
   343ec:	4615      	mov	r5, r2
   343ee:	4606      	mov	r6, r0
   343f0:	b108      	cbz	r0, 343f6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
   343f2:	f008 fa3b 	bl	3c86c <_Unwind_GetRegionStart>
   343f6:	6028      	str	r0, [r5, #0]
   343f8:	f814 7b01 	ldrb.w	r7, [r4], #1
   343fc:	2fff      	cmp	r7, #255	@ 0xff
   343fe:	d128      	bne.n	34452 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x6a>
   34400:	6068      	str	r0, [r5, #4]
   34402:	4620      	mov	r0, r4
   34404:	f810 3b01 	ldrb.w	r3, [r0], #1
   34408:	2bff      	cmp	r3, #255	@ 0xff
   3440a:	d032      	beq.n	34472 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8a>
   3440c:	2310      	movs	r3, #16
   3440e:	2400      	movs	r4, #0
   34410:	752b      	strb	r3, [r5, #20]
   34412:	4622      	mov	r2, r4
   34414:	f810 1b01 	ldrb.w	r1, [r0], #1
   34418:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
   3441c:	4093      	lsls	r3, r2
   3441e:	0609      	lsls	r1, r1, #24
   34420:	ea44 0403 	orr.w	r4, r4, r3
   34424:	f102 0207 	add.w	r2, r2, #7
   34428:	d4f4      	bmi.n	34414 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x2c>
   3442a:	4404      	add	r4, r0
   3442c:	60ec      	str	r4, [r5, #12]
   3442e:	f810 3b01 	ldrb.w	r3, [r0], #1
   34432:	756b      	strb	r3, [r5, #21]
   34434:	2400      	movs	r4, #0
   34436:	4622      	mov	r2, r4
   34438:	f810 1b01 	ldrb.w	r1, [r0], #1
   3443c:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
   34440:	4093      	lsls	r3, r2
   34442:	431c      	orrs	r4, r3
   34444:	060b      	lsls	r3, r1, #24
   34446:	f102 0207 	add.w	r2, r2, #7
   3444a:	d4f5      	bmi.n	34438 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x50>
   3444c:	4404      	add	r4, r0
   3444e:	612c      	str	r4, [r5, #16]
   34450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34452:	4631      	mov	r1, r6
   34454:	4638      	mov	r0, r7
   34456:	f7ff ffa5 	bl	343a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   3445a:	1d2b      	adds	r3, r5, #4
   3445c:	4601      	mov	r1, r0
   3445e:	4622      	mov	r2, r4
   34460:	4638      	mov	r0, r7
   34462:	f7ff ff3f 	bl	342e4 <_ZL28read_encoded_value_with_basehjPKhPj>
   34466:	4604      	mov	r4, r0
   34468:	4620      	mov	r0, r4
   3446a:	f810 3b01 	ldrb.w	r3, [r0], #1
   3446e:	2bff      	cmp	r3, #255	@ 0xff
   34470:	d1cc      	bne.n	3440c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
   34472:	752b      	strb	r3, [r5, #20]
   34474:	2400      	movs	r4, #0
   34476:	e7d9      	b.n	3442c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>

00034478 <__gxx_personality_v0>:
   34478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3447c:	f000 0303 	and.w	r3, r0, #3
   34480:	b095      	sub	sp, #84	@ 0x54
   34482:	2400      	movs	r4, #0
   34484:	2b01      	cmp	r3, #1
   34486:	940a      	str	r4, [sp, #40]	@ 0x28
   34488:	460f      	mov	r7, r1
   3448a:	4616      	mov	r6, r2
   3448c:	f000 80a4 	beq.w	345d8 <__gxx_personality_v0+0x160>
   34490:	2b02      	cmp	r3, #2
   34492:	d10a      	bne.n	344aa <__gxx_personality_v0+0x32>
   34494:	4631      	mov	r1, r6
   34496:	4638      	mov	r0, r7
   34498:	f008 f9d2 	bl	3c840 <__gnu_unwind_frame>
   3449c:	2800      	cmp	r0, #0
   3449e:	f040 8090 	bne.w	345c2 <__gxx_personality_v0+0x14a>
   344a2:	2008      	movs	r0, #8
   344a4:	b015      	add	sp, #84	@ 0x54
   344a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   344aa:	2b00      	cmp	r3, #0
   344ac:	f040 81fd 	bne.w	348aa <__gxx_personality_v0+0x432>
   344b0:	f010 0408 	ands.w	r4, r0, #8
   344b4:	d1ee      	bne.n	34494 <__gxx_personality_v0+0x1c>
   344b6:	ab0e      	add	r3, sp, #56	@ 0x38
   344b8:	f04f 0801 	mov.w	r8, #1
   344bc:	9302      	str	r3, [sp, #8]
   344be:	9b02      	ldr	r3, [sp, #8]
   344c0:	9300      	str	r3, [sp, #0]
   344c2:	2300      	movs	r3, #0
   344c4:	220c      	movs	r2, #12
   344c6:	4619      	mov	r1, r3
   344c8:	4630      	mov	r0, r6
   344ca:	970e      	str	r7, [sp, #56]	@ 0x38
   344cc:	f007 fcd0 	bl	3be70 <_Unwind_VRS_Set>
   344d0:	4630      	mov	r0, r6
   344d2:	f008 f9d1 	bl	3c878 <_Unwind_GetLanguageSpecificData>
   344d6:	9003      	str	r0, [sp, #12]
   344d8:	2800      	cmp	r0, #0
   344da:	d0db      	beq.n	34494 <__gxx_personality_v0+0x1c>
   344dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   344e0:	ea44 0308 	orr.w	r3, r4, r8
   344e4:	4630      	mov	r0, r6
   344e6:	9304      	str	r3, [sp, #16]
   344e8:	f7ff ff7e 	bl	343e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   344ec:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
   344f0:	9306      	str	r3, [sp, #24]
   344f2:	4682      	mov	sl, r0
   344f4:	4631      	mov	r1, r6
   344f6:	4618      	mov	r0, r3
   344f8:	f7ff ff54 	bl	343a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   344fc:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
   34500:	2300      	movs	r3, #0
   34502:	9005      	str	r0, [sp, #20]
   34504:	9010      	str	r0, [sp, #64]	@ 0x40
   34506:	4619      	mov	r1, r3
   34508:	f8cd 8000 	str.w	r8, [sp]
   3450c:	220f      	movs	r2, #15
   3450e:	4630      	mov	r0, r6
   34510:	f007 fc86 	bl	3be20 <_Unwind_VRS_Get>
   34514:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   34516:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
   3451a:	f023 0301 	bic.w	r3, r3, #1
   3451e:	45ca      	cmp	sl, r9
   34520:	f103 35ff 	add.w	r5, r3, #4294967295	@ 0xffffffff
   34524:	d233      	bcs.n	3458e <__gxx_personality_v0+0x116>
   34526:	f89d b04d 	ldrb.w	fp, [sp, #77]	@ 0x4d
   3452a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
   3452c:	2100      	movs	r1, #0
   3452e:	4658      	mov	r0, fp
   34530:	f7ff ff38 	bl	343a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   34534:	4652      	mov	r2, sl
   34536:	4601      	mov	r1, r0
   34538:	ab0b      	add	r3, sp, #44	@ 0x2c
   3453a:	4658      	mov	r0, fp
   3453c:	f7ff fed2 	bl	342e4 <_ZL28read_encoded_value_with_basehjPKhPj>
   34540:	2100      	movs	r1, #0
   34542:	4682      	mov	sl, r0
   34544:	4658      	mov	r0, fp
   34546:	f7ff ff2d 	bl	343a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   3454a:	4652      	mov	r2, sl
   3454c:	4601      	mov	r1, r0
   3454e:	ab0c      	add	r3, sp, #48	@ 0x30
   34550:	4658      	mov	r0, fp
   34552:	f7ff fec7 	bl	342e4 <_ZL28read_encoded_value_with_basehjPKhPj>
   34556:	2100      	movs	r1, #0
   34558:	4682      	mov	sl, r0
   3455a:	4658      	mov	r0, fp
   3455c:	f7ff ff22 	bl	343a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   34560:	4652      	mov	r2, sl
   34562:	4601      	mov	r1, r0
   34564:	4643      	mov	r3, r8
   34566:	4658      	mov	r0, fp
   34568:	f7ff febc 	bl	342e4 <_ZL28read_encoded_value_with_basehjPKhPj>
   3456c:	4682      	mov	sl, r0
   3456e:	2000      	movs	r0, #0
   34570:	4602      	mov	r2, r0
   34572:	f81a 1b01 	ldrb.w	r1, [sl], #1
   34576:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
   3457a:	4093      	lsls	r3, r2
   3457c:	4318      	orrs	r0, r3
   3457e:	060b      	lsls	r3, r1, #24
   34580:	f102 0207 	add.w	r2, r2, #7
   34584:	d4f5      	bmi.n	34572 <__gxx_personality_v0+0xfa>
   34586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
   34588:	4423      	add	r3, r4
   3458a:	42ab      	cmp	r3, r5
   3458c:	d91d      	bls.n	345ca <__gxx_personality_v0+0x152>
   3458e:	f04f 0a00 	mov.w	sl, #0
   34592:	46d3      	mov	fp, sl
   34594:	2301      	movs	r3, #1
   34596:	9a04      	ldr	r2, [sp, #16]
   34598:	07d1      	lsls	r1, r2, #31
   3459a:	d577      	bpl.n	3468c <__gxx_personality_v0+0x214>
   3459c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   3459e:	461c      	mov	r4, r3
   345a0:	2300      	movs	r3, #0
   345a2:	4619      	mov	r1, r3
   345a4:	f8cd 8000 	str.w	r8, [sp]
   345a8:	4630      	mov	r0, r6
   345aa:	220d      	movs	r2, #13
   345ac:	f007 fc38 	bl	3be20 <_Unwind_VRS_Get>
   345b0:	9b03      	ldr	r3, [sp, #12]
   345b2:	e9c7 3b0b 	strd	r3, fp, [r7, #44]	@ 0x2c
   345b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   345b8:	623b      	str	r3, [r7, #32]
   345ba:	e9c7 4a09 	strd	r4, sl, [r7, #36]	@ 0x24
   345be:	2006      	movs	r0, #6
   345c0:	e770      	b.n	344a4 <__gxx_personality_v0+0x2c>
   345c2:	2009      	movs	r0, #9
   345c4:	b015      	add	sp, #84	@ 0x54
   345c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   345ca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
   345cc:	4413      	add	r3, r2
   345ce:	42ab      	cmp	r3, r5
   345d0:	d864      	bhi.n	3469c <__gxx_personality_v0+0x224>
   345d2:	45ca      	cmp	sl, r9
   345d4:	d3aa      	bcc.n	3452c <__gxx_personality_v0+0xb4>
   345d6:	e7da      	b.n	3458e <__gxx_personality_v0+0x116>
   345d8:	ab0e      	add	r3, sp, #56	@ 0x38
   345da:	f010 0408 	ands.w	r4, r0, #8
   345de:	9302      	str	r3, [sp, #8]
   345e0:	d002      	beq.n	345e8 <__gxx_personality_v0+0x170>
   345e2:	f04f 0802 	mov.w	r8, #2
   345e6:	e76a      	b.n	344be <__gxx_personality_v0+0x46>
   345e8:	9300      	str	r3, [sp, #0]
   345ea:	6a0d      	ldr	r5, [r1, #32]
   345ec:	4623      	mov	r3, r4
   345ee:	220d      	movs	r2, #13
   345f0:	4621      	mov	r1, r4
   345f2:	4630      	mov	r0, r6
   345f4:	f007 fc14 	bl	3be20 <_Unwind_VRS_Get>
   345f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
   345fa:	429d      	cmp	r5, r3
   345fc:	d1f1      	bne.n	345e2 <__gxx_personality_v0+0x16a>
   345fe:	9b02      	ldr	r3, [sp, #8]
   34600:	9300      	str	r3, [sp, #0]
   34602:	4621      	mov	r1, r4
   34604:	4623      	mov	r3, r4
   34606:	220c      	movs	r2, #12
   34608:	4630      	mov	r0, r6
   3460a:	970e      	str	r7, [sp, #56]	@ 0x38
   3460c:	f007 fc30 	bl	3be70 <_Unwind_VRS_Set>
   34610:	f8d7 b030 	ldr.w	fp, [r7, #48]	@ 0x30
   34614:	e9d7 430a 	ldrd	r4, r3, [r7, #40]	@ 0x28
   34618:	f1bb 0f00 	cmp.w	fp, #0
   3461c:	d03b      	beq.n	34696 <__gxx_personality_v0+0x21e>
   3461e:	9303      	str	r3, [sp, #12]
   34620:	46a2      	mov	sl, r4
   34622:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
   34626:	f1ba 0f00 	cmp.w	sl, #0
   3462a:	f2c0 80ff 	blt.w	3482c <__gxx_personality_v0+0x3b4>
   3462e:	2503      	movs	r5, #3
   34630:	2300      	movs	r3, #0
   34632:	461a      	mov	r2, r3
   34634:	4619      	mov	r1, r3
   34636:	f8cd 8000 	str.w	r8, [sp]
   3463a:	4630      	mov	r0, r6
   3463c:	970d      	str	r7, [sp, #52]	@ 0x34
   3463e:	f007 fc17 	bl	3be70 <_Unwind_VRS_Set>
   34642:	2300      	movs	r3, #0
   34644:	4619      	mov	r1, r3
   34646:	2201      	movs	r2, #1
   34648:	f8cd 8000 	str.w	r8, [sp]
   3464c:	4630      	mov	r0, r6
   3464e:	940d      	str	r4, [sp, #52]	@ 0x34
   34650:	f007 fc0e 	bl	3be70 <_Unwind_VRS_Set>
   34654:	2300      	movs	r3, #0
   34656:	4619      	mov	r1, r3
   34658:	220f      	movs	r2, #15
   3465a:	f8cd 8000 	str.w	r8, [sp]
   3465e:	4630      	mov	r0, r6
   34660:	f007 fbde 	bl	3be20 <_Unwind_VRS_Get>
   34664:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
   34666:	f8cd 8000 	str.w	r8, [sp]
   3466a:	f002 0201 	and.w	r2, r2, #1
   3466e:	2300      	movs	r3, #0
   34670:	ea42 020b 	orr.w	r2, r2, fp
   34674:	920d      	str	r2, [sp, #52]	@ 0x34
   34676:	4630      	mov	r0, r6
   34678:	220f      	movs	r2, #15
   3467a:	4619      	mov	r1, r3
   3467c:	f007 fbf8 	bl	3be70 <_Unwind_VRS_Set>
   34680:	2d02      	cmp	r5, #2
   34682:	d060      	beq.n	34746 <__gxx_personality_v0+0x2ce>
   34684:	2007      	movs	r0, #7
   34686:	b015      	add	sp, #84	@ 0x54
   34688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3468c:	9a04      	ldr	r2, [sp, #16]
   3468e:	0712      	lsls	r2, r2, #28
   34690:	d45d      	bmi.n	3474e <__gxx_personality_v0+0x2d6>
   34692:	2b01      	cmp	r3, #1
   34694:	d16b      	bne.n	3476e <__gxx_personality_v0+0x2f6>
   34696:	4638      	mov	r0, r7
   34698:	f006 fee4 	bl	3b464 <__cxa_call_terminate>
   3469c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
   3469e:	2b00      	cmp	r3, #0
   346a0:	f43f aef8 	beq.w	34494 <__gxx_personality_v0+0x1c>
   346a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
   346a6:	eb03 0b02 	add.w	fp, r3, r2
   346aa:	2800      	cmp	r0, #0
   346ac:	f000 80e1 	beq.w	34872 <__gxx_personality_v0+0x3fa>
   346b0:	3801      	subs	r0, #1
   346b2:	eb09 0400 	add.w	r4, r9, r0
   346b6:	f1bb 0f00 	cmp.w	fp, #0
   346ba:	f43f aeeb 	beq.w	34494 <__gxx_personality_v0+0x1c>
   346be:	9b04      	ldr	r3, [sp, #16]
   346c0:	f013 0308 	ands.w	r3, r3, #8
   346c4:	9308      	str	r3, [sp, #32]
   346c6:	f000 80d8 	beq.w	3487a <__gxx_personality_v0+0x402>
   346ca:	4b79      	ldr	r3, [pc, #484]	@ (348b0 <__gxx_personality_v0+0x438>)
   346cc:	603b      	str	r3, [r7, #0]
   346ce:	4b79      	ldr	r3, [pc, #484]	@ (348b4 <__gxx_personality_v0+0x43c>)
   346d0:	607b      	str	r3, [r7, #4]
   346d2:	9b06      	ldr	r3, [sp, #24]
   346d4:	9607      	str	r6, [sp, #28]
   346d6:	f003 0207 	and.w	r2, r3, #7
   346da:	f8cd b018 	str.w	fp, [sp, #24]
   346de:	f04f 0900 	mov.w	r9, #0
   346e2:	9209      	str	r2, [sp, #36]	@ 0x24
   346e4:	469b      	mov	fp, r3
   346e6:	2100      	movs	r1, #0
   346e8:	460a      	mov	r2, r1
   346ea:	f814 0b01 	ldrb.w	r0, [r4], #1
   346ee:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
   346f2:	4093      	lsls	r3, r2
   346f4:	0605      	lsls	r5, r0, #24
   346f6:	ea41 0103 	orr.w	r1, r1, r3
   346fa:	f102 0207 	add.w	r2, r2, #7
   346fe:	d4f4      	bmi.n	346ea <__gxx_personality_v0+0x272>
   34700:	2a1f      	cmp	r2, #31
   34702:	d805      	bhi.n	34710 <__gxx_personality_v0+0x298>
   34704:	0640      	lsls	r0, r0, #25
   34706:	d503      	bpl.n	34710 <__gxx_personality_v0+0x298>
   34708:	2301      	movs	r3, #1
   3470a:	4093      	lsls	r3, r2
   3470c:	425b      	negs	r3, r3
   3470e:	4319      	orrs	r1, r3
   34710:	2500      	movs	r5, #0
   34712:	468a      	mov	sl, r1
   34714:	4626      	mov	r6, r4
   34716:	462a      	mov	r2, r5
   34718:	f816 0b01 	ldrb.w	r0, [r6], #1
   3471c:	f000 037f 	and.w	r3, r0, #127	@ 0x7f
   34720:	4093      	lsls	r3, r2
   34722:	431d      	orrs	r5, r3
   34724:	0603      	lsls	r3, r0, #24
   34726:	f102 0207 	add.w	r2, r2, #7
   3472a:	d4f5      	bmi.n	34718 <__gxx_personality_v0+0x2a0>
   3472c:	2a1f      	cmp	r2, #31
   3472e:	d820      	bhi.n	34772 <__gxx_personality_v0+0x2fa>
   34730:	0646      	lsls	r6, r0, #25
   34732:	d51e      	bpl.n	34772 <__gxx_personality_v0+0x2fa>
   34734:	2301      	movs	r3, #1
   34736:	4093      	lsls	r3, r2
   34738:	425b      	negs	r3, r3
   3473a:	431d      	orrs	r5, r3
   3473c:	bb59      	cbnz	r1, 34796 <__gxx_personality_v0+0x31e>
   3473e:	f04f 0901 	mov.w	r9, #1
   34742:	442c      	add	r4, r5
   34744:	e7cf      	b.n	346e6 <__gxx_personality_v0+0x26e>
   34746:	4638      	mov	r0, r7
   34748:	f7ff fd46 	bl	341d8 <__cxa_begin_cleanup>
   3474c:	e79a      	b.n	34684 <__gxx_personality_v0+0x20c>
   3474e:	2b01      	cmp	r3, #1
   34750:	f000 80a9 	beq.w	348a6 <__gxx_personality_v0+0x42e>
   34754:	f1ba 0f00 	cmp.w	sl, #0
   34758:	f2c0 80a1 	blt.w	3489e <__gxx_personality_v0+0x426>
   3475c:	4654      	mov	r4, sl
   3475e:	2503      	movs	r5, #3
   34760:	e766      	b.n	34630 <__gxx_personality_v0+0x1b8>
   34762:	9b04      	ldr	r3, [sp, #16]
   34764:	07db      	lsls	r3, r3, #31
   34766:	e9dd b606 	ldrd	fp, r6, [sp, #24]
   3476a:	f53f af17 	bmi.w	3459c <__gxx_personality_v0+0x124>
   3476e:	4654      	mov	r4, sl
   34770:	e759      	b.n	34626 <__gxx_personality_v0+0x1ae>
   34772:	b981      	cbnz	r1, 34796 <__gxx_personality_v0+0x31e>
   34774:	f04f 0901 	mov.w	r9, #1
   34778:	2d00      	cmp	r5, #0
   3477a:	d1e2      	bne.n	34742 <__gxx_personality_v0+0x2ca>
   3477c:	464b      	mov	r3, r9
   3477e:	e9dd b606 	ldrd	fp, r6, [sp, #24]
   34782:	2b00      	cmp	r3, #0
   34784:	f43f ae86 	beq.w	34494 <__gxx_personality_v0+0x1c>
   34788:	9b04      	ldr	r3, [sp, #16]
   3478a:	07d8      	lsls	r0, r3, #31
   3478c:	f53f ae82 	bmi.w	34494 <__gxx_personality_v0+0x1c>
   34790:	2400      	movs	r4, #0
   34792:	2502      	movs	r5, #2
   34794:	e74c      	b.n	34630 <__gxx_personality_v0+0x1b8>
   34796:	2900      	cmp	r1, #0
   34798:	dc21      	bgt.n	347de <__gxx_personality_v0+0x366>
   3479a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
   3479e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
   347a0:	1a5b      	subs	r3, r3, r1
   347a2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   347a6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
   347aa:	b10f      	cbz	r7, 347b0 <__gxx_personality_v0+0x338>
   347ac:	9b08      	ldr	r3, [sp, #32]
   347ae:	b12b      	cbz	r3, 347bc <__gxx_personality_v0+0x344>
   347b0:	2900      	cmp	r1, #0
   347b2:	d1e1      	bne.n	34778 <__gxx_personality_v0+0x300>
   347b4:	e9dd b606 	ldrd	fp, r6, [sp, #24]
   347b8:	2303      	movs	r3, #3
   347ba:	e6ec      	b.n	34596 <__gxx_personality_v0+0x11e>
   347bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
   347be:	930d      	str	r3, [sp, #52]	@ 0x34
   347c0:	b921      	cbnz	r1, 347cc <__gxx_personality_v0+0x354>
   347c2:	e063      	b.n	3488c <__gxx_personality_v0+0x414>
   347c4:	f856 1f04 	ldr.w	r1, [r6, #4]!
   347c8:	2900      	cmp	r1, #0
   347ca:	d0ca      	beq.n	34762 <__gxx_personality_v0+0x2ea>
   347cc:	4431      	add	r1, r6
   347ce:	4643      	mov	r3, r8
   347d0:	2200      	movs	r2, #0
   347d2:	4638      	mov	r0, r7
   347d4:	f7ff fca8 	bl	34128 <__cxa_type_match>
   347d8:	2800      	cmp	r0, #0
   347da:	d0f3      	beq.n	347c4 <__gxx_personality_v0+0x34c>
   347dc:	e7cc      	b.n	34778 <__gxx_personality_v0+0x300>
   347de:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
   347e2:	d044      	beq.n	3486e <__gxx_personality_v0+0x3f6>
   347e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
   347e6:	2a04      	cmp	r2, #4
   347e8:	d85f      	bhi.n	348aa <__gxx_personality_v0+0x432>
   347ea:	e8df f002 	tbb	[pc, r2]
   347ee:	5e03      	.short	0x5e03
   347f0:	031c      	.short	0x031c
   347f2:	19          	.byte	0x19
   347f3:	00          	.byte	0x00
   347f4:	008b      	lsls	r3, r1, #2
   347f6:	425b      	negs	r3, r3
   347f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
   347fa:	9905      	ldr	r1, [sp, #20]
   347fc:	441a      	add	r2, r3
   347fe:	4658      	mov	r0, fp
   34800:	4643      	mov	r3, r8
   34802:	f7ff fd6f 	bl	342e4 <_ZL28read_encoded_value_with_basehjPKhPj>
   34806:	990d      	ldr	r1, [sp, #52]	@ 0x34
   34808:	2900      	cmp	r1, #0
   3480a:	d0d3      	beq.n	347b4 <__gxx_personality_v0+0x33c>
   3480c:	2f00      	cmp	r7, #0
   3480e:	d0b3      	beq.n	34778 <__gxx_personality_v0+0x300>
   34810:	ab0a      	add	r3, sp, #40	@ 0x28
   34812:	2200      	movs	r2, #0
   34814:	4638      	mov	r0, r7
   34816:	f7ff fc87 	bl	34128 <__cxa_type_match>
   3481a:	2800      	cmp	r0, #0
   3481c:	d0ac      	beq.n	34778 <__gxx_personality_v0+0x300>
   3481e:	e7c9      	b.n	347b4 <__gxx_personality_v0+0x33c>
   34820:	00cb      	lsls	r3, r1, #3
   34822:	425b      	negs	r3, r3
   34824:	e7e8      	b.n	347f8 <__gxx_personality_v0+0x380>
   34826:	004b      	lsls	r3, r1, #1
   34828:	425b      	negs	r3, r3
   3482a:	e7e5      	b.n	347f8 <__gxx_personality_v0+0x380>
   3482c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   34830:	4630      	mov	r0, r6
   34832:	f7ff fdd9 	bl	343e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   34836:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
   3483a:	4631      	mov	r1, r6
   3483c:	f7ff fdb2 	bl	343a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   34840:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
   34844:	1b12      	subs	r2, r2, r4
   34846:	4605      	mov	r5, r0
   34848:	9811      	ldr	r0, [sp, #68]	@ 0x44
   3484a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   3484e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   34852:	b133      	cbz	r3, 34862 <__gxx_personality_v0+0x3ea>
   34854:	4602      	mov	r2, r0
   34856:	2300      	movs	r3, #0
   34858:	f852 1f04 	ldr.w	r1, [r2, #4]!
   3485c:	3301      	adds	r3, #1
   3485e:	2900      	cmp	r1, #0
   34860:	d1fa      	bne.n	34858 <__gxx_personality_v0+0x3e0>
   34862:	e9c7 350a 	strd	r3, r5, [r7, #40]	@ 0x28
   34866:	2304      	movs	r3, #4
   34868:	6378      	str	r0, [r7, #52]	@ 0x34
   3486a:	633b      	str	r3, [r7, #48]	@ 0x30
   3486c:	e6df      	b.n	3462e <__gxx_personality_v0+0x1b6>
   3486e:	2300      	movs	r3, #0
   34870:	e7c2      	b.n	347f8 <__gxx_personality_v0+0x380>
   34872:	f1bb 0f00 	cmp.w	fp, #0
   34876:	d187      	bne.n	34788 <__gxx_personality_v0+0x310>
   34878:	e60c      	b.n	34494 <__gxx_personality_v0+0x1c>
   3487a:	79fb      	ldrb	r3, [r7, #7]
   3487c:	2b01      	cmp	r3, #1
   3487e:	bf0c      	ite	eq
   34880:	f857 3c20 	ldreq.w	r3, [r7, #-32]
   34884:	f107 0358 	addne.w	r3, r7, #88	@ 0x58
   34888:	930a      	str	r3, [sp, #40]	@ 0x28
   3488a:	e722      	b.n	346d2 <__gxx_personality_v0+0x25a>
   3488c:	461c      	mov	r4, r3
   3488e:	9b04      	ldr	r3, [sp, #16]
   34890:	07dd      	lsls	r5, r3, #31
   34892:	e9dd b606 	ldrd	fp, r6, [sp, #24]
   34896:	f53f ae83 	bmi.w	345a0 <__gxx_personality_v0+0x128>
   3489a:	4654      	mov	r4, sl
   3489c:	e6c3      	b.n	34626 <__gxx_personality_v0+0x1ae>
   3489e:	f000 f821 	bl	348e4 <_ZSt10unexpectedv>
   348a2:	f006 fe59 	bl	3b558 <__cxa_begin_catch>
   348a6:	f000 f80f 	bl	348c8 <_ZSt9terminatev>
   348aa:	f7f0 fc5d 	bl	25168 <abort>
   348ae:	bf00      	nop
   348b0:	43554e47 	.word	0x43554e47
   348b4:	00524f46 	.word	0x00524f46

000348b8 <_ZN10__cxxabiv111__terminateEPFvvE>:
   348b8:	b508      	push	{r3, lr}
   348ba:	4780      	blx	r0
   348bc:	f7f0 fc54 	bl	25168 <abort>
   348c0:	f006 fe4a 	bl	3b558 <__cxa_begin_catch>
   348c4:	f7f0 fc50 	bl	25168 <abort>

000348c8 <_ZSt9terminatev>:
   348c8:	b508      	push	{r3, lr}
   348ca:	4b03      	ldr	r3, [pc, #12]	@ (348d8 <_ZSt9terminatev+0x10>)
   348cc:	6818      	ldr	r0, [r3, #0]
   348ce:	f3bf 8f5b 	dmb	ish
   348d2:	f7ff fff1 	bl	348b8 <_ZN10__cxxabiv111__terminateEPFvvE>
   348d6:	bf00      	nop
   348d8:	1000cc50 	.word	0x1000cc50

000348dc <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   348dc:	b508      	push	{r3, lr}
   348de:	4780      	blx	r0
   348e0:	f7ff fff2 	bl	348c8 <_ZSt9terminatev>

000348e4 <_ZSt10unexpectedv>:
   348e4:	b508      	push	{r3, lr}
   348e6:	4b03      	ldr	r3, [pc, #12]	@ (348f4 <_ZSt10unexpectedv+0x10>)
   348e8:	6818      	ldr	r0, [r3, #0]
   348ea:	f3bf 8f5b 	dmb	ish
   348ee:	f7ff fff5 	bl	348dc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   348f2:	bf00      	nop
   348f4:	1000cc4c 	.word	0x1000cc4c

000348f8 <_ZSt13get_terminatev>:
   348f8:	4b02      	ldr	r3, [pc, #8]	@ (34904 <_ZSt13get_terminatev+0xc>)
   348fa:	6818      	ldr	r0, [r3, #0]
   348fc:	f3bf 8f5b 	dmb	ish
   34900:	4770      	bx	lr
   34902:	bf00      	nop
   34904:	1000cc50 	.word	0x1000cc50

00034908 <_ZSt14get_unexpectedv>:
   34908:	4b02      	ldr	r3, [pc, #8]	@ (34914 <_ZSt14get_unexpectedv+0xc>)
   3490a:	6818      	ldr	r0, [r3, #0]
   3490c:	f3bf 8f5b 	dmb	ish
   34910:	4770      	bx	lr
   34912:	bf00      	nop
   34914:	1000cc4c 	.word	0x1000cc4c

00034918 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   34918:	2801      	cmp	r0, #1
   3491a:	b510      	push	{r4, lr}
   3491c:	d81a      	bhi.n	34954 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   3491e:	f3bf 8f5b 	dmb	ish
   34922:	f1a1 0328 	sub.w	r3, r1, #40	@ 0x28
   34926:	e853 2f00 	ldrex	r2, [r3]
   3492a:	3a01      	subs	r2, #1
   3492c:	e843 2000 	strex	r0, r2, [r3]
   34930:	2800      	cmp	r0, #0
   34932:	d1f8      	bne.n	34926 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   34934:	f3bf 8f5b 	dmb	ish
   34938:	b95a      	cbnz	r2, 34952 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
   3493a:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   3493e:	f101 0458 	add.w	r4, r1, #88	@ 0x58
   34942:	b10b      	cbz	r3, 34948 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
   34944:	4620      	mov	r0, r4
   34946:	4798      	blx	r3
   34948:	4620      	mov	r0, r4
   3494a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3494e:	f7ff bb55 	b.w	33ffc <__cxa_free_exception>
   34952:	bd10      	pop	{r4, pc}
   34954:	f851 0c14 	ldr.w	r0, [r1, #-20]
   34958:	f7ff ffae 	bl	348b8 <_ZN10__cxxabiv111__terminateEPFvvE>

0003495c <__cxa_init_primary_exception>:
   3495c:	2300      	movs	r3, #0
   3495e:	b510      	push	{r4, lr}
   34960:	e940 121e 	strd	r1, r2, [r0, #-120]	@ 0x78
   34964:	f840 3c80 	str.w	r3, [r0, #-128]
   34968:	4604      	mov	r4, r0
   3496a:	f7ff ffcd 	bl	34908 <_ZSt14get_unexpectedv>
   3496e:	f844 0c70 	str.w	r0, [r4, #-112]
   34972:	f7ff ffc1 	bl	348f8 <_ZSt13get_terminatev>
   34976:	4907      	ldr	r1, [pc, #28]	@ (34994 <__cxa_init_primary_exception+0x38>)
   34978:	4a07      	ldr	r2, [pc, #28]	@ (34998 <__cxa_init_primary_exception+0x3c>)
   3497a:	4b08      	ldr	r3, [pc, #32]	@ (3499c <__cxa_init_primary_exception+0x40>)
   3497c:	f844 1c58 	str.w	r1, [r4, #-88]
   34980:	f844 2c54 	str.w	r2, [r4, #-84]
   34984:	f844 0c6c 	str.w	r0, [r4, #-108]
   34988:	f844 3c50 	str.w	r3, [r4, #-80]
   3498c:	f1a4 0080 	sub.w	r0, r4, #128	@ 0x80
   34990:	bd10      	pop	{r4, pc}
   34992:	bf00      	nop
   34994:	43554e47 	.word	0x43554e47
   34998:	002b2b43 	.word	0x002b2b43
   3499c:	00034919 	.word	0x00034919

000349a0 <__cxa_throw>:
   349a0:	b570      	push	{r4, r5, r6, lr}
   349a2:	4604      	mov	r4, r0
   349a4:	460d      	mov	r5, r1
   349a6:	4616      	mov	r6, r2
   349a8:	f7ff fc98 	bl	342dc <__cxa_get_globals>
   349ac:	6843      	ldr	r3, [r0, #4]
   349ae:	3301      	adds	r3, #1
   349b0:	4632      	mov	r2, r6
   349b2:	4629      	mov	r1, r5
   349b4:	6043      	str	r3, [r0, #4]
   349b6:	4620      	mov	r0, r4
   349b8:	f7ff ffd0 	bl	3495c <__cxa_init_primary_exception>
   349bc:	4604      	mov	r4, r0
   349be:	2301      	movs	r3, #1
   349c0:	f844 3b28 	str.w	r3, [r4], #40
   349c4:	4620      	mov	r0, r4
   349c6:	f7e4 fcd1 	bl	1936c <_Unwind_RaiseException>
   349ca:	4620      	mov	r0, r4
   349cc:	f006 fdc4 	bl	3b558 <__cxa_begin_catch>
   349d0:	f7ff ff7a 	bl	348c8 <_ZSt9terminatev>

000349d4 <__cxa_rethrow>:
   349d4:	b510      	push	{r4, lr}
   349d6:	f7ff fc81 	bl	342dc <__cxa_get_globals>
   349da:	e9d0 4200 	ldrd	r4, r2, [r0]
   349de:	3201      	adds	r2, #1
   349e0:	6042      	str	r2, [r0, #4]
   349e2:	b164      	cbz	r4, 349fe <__cxa_rethrow+0x2a>
   349e4:	f894 2020 	ldrb.w	r2, [r4, #32]
   349e8:	2a47      	cmp	r2, #71	@ 0x47
   349ea:	d00a      	beq.n	34a02 <__cxa_rethrow+0x2e>
   349ec:	2200      	movs	r2, #0
   349ee:	6002      	str	r2, [r0, #0]
   349f0:	3420      	adds	r4, #32
   349f2:	4620      	mov	r0, r4
   349f4:	f7e4 fcde 	bl	193b4 <_Unwind_Resume_or_Rethrow>
   349f8:	4620      	mov	r0, r4
   349fa:	f006 fdad 	bl	3b558 <__cxa_begin_catch>
   349fe:	f7ff ff63 	bl	348c8 <_ZSt9terminatev>
   34a02:	f894 2021 	ldrb.w	r2, [r4, #33]	@ 0x21
   34a06:	2a4e      	cmp	r2, #78	@ 0x4e
   34a08:	d1f0      	bne.n	349ec <__cxa_rethrow+0x18>
   34a0a:	f894 2022 	ldrb.w	r2, [r4, #34]	@ 0x22
   34a0e:	2a55      	cmp	r2, #85	@ 0x55
   34a10:	d1ec      	bne.n	349ec <__cxa_rethrow+0x18>
   34a12:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
   34a16:	2a43      	cmp	r2, #67	@ 0x43
   34a18:	d1e8      	bne.n	349ec <__cxa_rethrow+0x18>
   34a1a:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
   34a1e:	2a43      	cmp	r2, #67	@ 0x43
   34a20:	d1e4      	bne.n	349ec <__cxa_rethrow+0x18>
   34a22:	f894 2025 	ldrb.w	r2, [r4, #37]	@ 0x25
   34a26:	2a2b      	cmp	r2, #43	@ 0x2b
   34a28:	d1e0      	bne.n	349ec <__cxa_rethrow+0x18>
   34a2a:	f894 2026 	ldrb.w	r2, [r4, #38]	@ 0x26
   34a2e:	2a2b      	cmp	r2, #43	@ 0x2b
   34a30:	d1dc      	bne.n	349ec <__cxa_rethrow+0x18>
   34a32:	f894 2027 	ldrb.w	r2, [r4, #39]	@ 0x27
   34a36:	2a01      	cmp	r2, #1
   34a38:	d8d8      	bhi.n	349ec <__cxa_rethrow+0x18>
   34a3a:	6962      	ldr	r2, [r4, #20]
   34a3c:	4252      	negs	r2, r2
   34a3e:	6162      	str	r2, [r4, #20]
   34a40:	e7d6      	b.n	349f0 <__cxa_rethrow+0x1c>
   34a42:	bf00      	nop

00034a44 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   34a44:	b510      	push	{r4, lr}
   34a46:	4b03      	ldr	r3, [pc, #12]	@ (34a54 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
   34a48:	6003      	str	r3, [r0, #0]
   34a4a:	4604      	mov	r4, r0
   34a4c:	f7ff f9c4 	bl	33dd8 <_ZNSt9type_infoD1Ev>
   34a50:	4620      	mov	r0, r4
   34a52:	bd10      	pop	{r4, pc}
   34a54:	00047ec0 	.word	0x00047ec0

00034a58 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   34a58:	b510      	push	{r4, lr}
   34a5a:	4b05      	ldr	r3, [pc, #20]	@ (34a70 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
   34a5c:	6003      	str	r3, [r0, #0]
   34a5e:	4604      	mov	r4, r0
   34a60:	f7ff f9ba 	bl	33dd8 <_ZNSt9type_infoD1Ev>
   34a64:	4620      	mov	r0, r4
   34a66:	2108      	movs	r1, #8
   34a68:	f7fc fbea 	bl	31240 <_ZdlPvj>
   34a6c:	4620      	mov	r0, r4
   34a6e:	bd10      	pop	{r4, pc}
   34a70:	00047ec0 	.word	0x00047ec0

00034a74 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   34a74:	68c0      	ldr	r0, [r0, #12]
   34a76:	68c9      	ldr	r1, [r1, #12]
   34a78:	b410      	push	{r4}
   34a7a:	6804      	ldr	r4, [r0, #0]
   34a7c:	6924      	ldr	r4, [r4, #16]
   34a7e:	3302      	adds	r3, #2
   34a80:	46a4      	mov	ip, r4
   34a82:	f85d 4b04 	ldr.w	r4, [sp], #4
   34a86:	4760      	bx	ip

00034a88 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   34a88:	b510      	push	{r4, lr}
   34a8a:	4b03      	ldr	r3, [pc, #12]	@ (34a98 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
   34a8c:	6003      	str	r3, [r0, #0]
   34a8e:	4604      	mov	r4, r0
   34a90:	f7ff f9a2 	bl	33dd8 <_ZNSt9type_infoD1Ev>
   34a94:	4620      	mov	r0, r4
   34a96:	bd10      	pop	{r4, pc}
   34a98:	00047f28 	.word	0x00047f28

00034a9c <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   34a9c:	b510      	push	{r4, lr}
   34a9e:	4b05      	ldr	r3, [pc, #20]	@ (34ab4 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
   34aa0:	6003      	str	r3, [r0, #0]
   34aa2:	4604      	mov	r4, r0
   34aa4:	f7ff f998 	bl	33dd8 <_ZNSt9type_infoD1Ev>
   34aa8:	4620      	mov	r0, r4
   34aaa:	2110      	movs	r1, #16
   34aac:	f7fc fbc8 	bl	31240 <_ZdlPvj>
   34ab0:	4620      	mov	r0, r4
   34ab2:	bd10      	pop	{r4, pc}
   34ab4:	00047f28 	.word	0x00047f28

00034ab8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   34ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34abc:	4607      	mov	r7, r0
   34abe:	4690      	mov	r8, r2
   34ac0:	4699      	mov	r9, r3
   34ac2:	460e      	mov	r6, r1
   34ac4:	f7ff f9a4 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   34ac8:	b118      	cbz	r0, 34ad2 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   34aca:	2501      	movs	r5, #1
   34acc:	4628      	mov	r0, r5
   34ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34ad2:	4604      	mov	r4, r0
   34ad4:	4605      	mov	r5, r0
   34ad6:	4931      	ldr	r1, [pc, #196]	@ (34b9c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe4>)
   34ad8:	4630      	mov	r0, r6
   34ada:	f7ff f999 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   34ade:	b150      	cbz	r0, 34af6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x3e>
   34ae0:	683b      	ldr	r3, [r7, #0]
   34ae2:	492f      	ldr	r1, [pc, #188]	@ (34ba0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xe8>)
   34ae4:	f853 0c04 	ldr.w	r0, [r3, #-4]
   34ae8:	f7ff f992 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   34aec:	2800      	cmp	r0, #0
   34aee:	d033      	beq.n	34b58 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xa0>
   34af0:	f8c8 4000 	str.w	r4, [r8]
   34af4:	e7e9      	b.n	34aca <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x12>
   34af6:	6833      	ldr	r3, [r6, #0]
   34af8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   34afc:	683b      	ldr	r3, [r7, #0]
   34afe:	f853 0c04 	ldr.w	r0, [r3, #-4]
   34b02:	f7ff f985 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   34b06:	2800      	cmp	r0, #0
   34b08:	d037      	beq.n	34b7a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xc2>
   34b0a:	f019 0f01 	tst.w	r9, #1
   34b0e:	d0dd      	beq.n	34acc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
   34b10:	68b2      	ldr	r2, [r6, #8]
   34b12:	68b9      	ldr	r1, [r7, #8]
   34b14:	f002 0060 	and.w	r0, r2, #96	@ 0x60
   34b18:	f001 0360 	and.w	r3, r1, #96	@ 0x60
   34b1c:	ea30 0403 	bics.w	r4, r0, r3
   34b20:	bf18      	it	ne
   34b22:	401a      	andne	r2, r3
   34b24:	ea22 0201 	bic.w	r2, r2, r1
   34b28:	ea23 0300 	bic.w	r3, r3, r0
   34b2c:	4313      	orrs	r3, r2
   34b2e:	d1cd      	bne.n	34acc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x14>
   34b30:	07cb      	lsls	r3, r1, #31
   34b32:	683b      	ldr	r3, [r7, #0]
   34b34:	699c      	ldr	r4, [r3, #24]
   34b36:	4b1b      	ldr	r3, [pc, #108]	@ (34ba4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xec>)
   34b38:	bf58      	it	pl
   34b3a:	f029 0901 	bicpl.w	r9, r9, #1
   34b3e:	429c      	cmp	r4, r3
   34b40:	d123      	bne.n	34b8a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xd2>
   34b42:	68f8      	ldr	r0, [r7, #12]
   34b44:	68f1      	ldr	r1, [r6, #12]
   34b46:	6802      	ldr	r2, [r0, #0]
   34b48:	6914      	ldr	r4, [r2, #16]
   34b4a:	f109 0302 	add.w	r3, r9, #2
   34b4e:	4642      	mov	r2, r8
   34b50:	46a4      	mov	ip, r4
   34b52:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34b56:	4760      	bx	ip
   34b58:	683b      	ldr	r3, [r7, #0]
   34b5a:	4913      	ldr	r1, [pc, #76]	@ (34ba8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf0>)
   34b5c:	f853 0c04 	ldr.w	r0, [r3, #-4]
   34b60:	f7ff f956 	bl	33e10 <_ZNKSt9type_info7__equalERKS_>
   34b64:	2800      	cmp	r0, #0
   34b66:	d0c6      	beq.n	34af6 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x3e>
   34b68:	68f8      	ldr	r0, [r7, #12]
   34b6a:	6803      	ldr	r3, [r0, #0]
   34b6c:	68db      	ldr	r3, [r3, #12]
   34b6e:	4798      	blx	r3
   34b70:	b138      	cbz	r0, 34b82 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xca>
   34b72:	4b0e      	ldr	r3, [pc, #56]	@ (34bac <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf4>)
   34b74:	f8c8 3000 	str.w	r3, [r8]
   34b78:	e7a7      	b.n	34aca <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x12>
   34b7a:	4605      	mov	r5, r0
   34b7c:	4628      	mov	r0, r5
   34b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34b82:	4b0b      	ldr	r3, [pc, #44]	@ (34bb0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0xf8>)
   34b84:	f8c8 3000 	str.w	r3, [r8]
   34b88:	e79f      	b.n	34aca <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x12>
   34b8a:	464b      	mov	r3, r9
   34b8c:	4642      	mov	r2, r8
   34b8e:	4631      	mov	r1, r6
   34b90:	4638      	mov	r0, r7
   34b92:	46a4      	mov	ip, r4
   34b94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34b98:	4760      	bx	ip
   34b9a:	bf00      	nop
   34b9c:	00047edc 	.word	0x00047edc
   34ba0:	00047d04 	.word	0x00047d04
   34ba4:	00034a75 	.word	0x00034a75
   34ba8:	00047f80 	.word	0x00047f80
   34bac:	00047f48 	.word	0x00047f48
   34bb0:	00047f44 	.word	0x00047f44

00034bb4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   34bb4:	b570      	push	{r4, r5, r6, lr}
   34bb6:	4b3b      	ldr	r3, [pc, #236]	@ (34ca4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf0>)
   34bb8:	781a      	ldrb	r2, [r3, #0]
   34bba:	b082      	sub	sp, #8
   34bbc:	2a00      	cmp	r2, #0
   34bbe:	d141      	bne.n	34c44 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x90>
   34bc0:	2401      	movs	r4, #1
   34bc2:	701c      	strb	r4, [r3, #0]
   34bc4:	f006 fd4c 	bl	3b660 <__cxa_current_exception_type>
   34bc8:	2800      	cmp	r0, #0
   34bca:	d031      	beq.n	34c30 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x7c>
   34bcc:	6844      	ldr	r4, [r0, #4]
   34bce:	4d36      	ldr	r5, [pc, #216]	@ (34ca8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   34bd0:	7823      	ldrb	r3, [r4, #0]
   34bd2:	2b2a      	cmp	r3, #42	@ 0x2a
   34bd4:	bf08      	it	eq
   34bd6:	3401      	addeq	r4, #1
   34bd8:	2200      	movs	r2, #0
   34bda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   34bde:	4611      	mov	r1, r2
   34be0:	ab01      	add	r3, sp, #4
   34be2:	9001      	str	r0, [sp, #4]
   34be4:	4620      	mov	r0, r4
   34be6:	f006 fbc1 	bl	3b36c <__cxa_demangle>
   34bea:	682b      	ldr	r3, [r5, #0]
   34bec:	2230      	movs	r2, #48	@ 0x30
   34bee:	68db      	ldr	r3, [r3, #12]
   34bf0:	4606      	mov	r6, r0
   34bf2:	2101      	movs	r1, #1
   34bf4:	482d      	ldr	r0, [pc, #180]	@ (34cac <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
   34bf6:	f006 fefb 	bl	3b9f0 <fwrite>
   34bfa:	9b01      	ldr	r3, [sp, #4]
   34bfc:	b193      	cbz	r3, 34c24 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x70>
   34bfe:	682b      	ldr	r3, [r5, #0]
   34c00:	4620      	mov	r0, r4
   34c02:	68d9      	ldr	r1, [r3, #12]
   34c04:	f006 fe98 	bl	3b938 <fputs>
   34c08:	682b      	ldr	r3, [r5, #0]
   34c0a:	4829      	ldr	r0, [pc, #164]	@ (34cb0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
   34c0c:	68db      	ldr	r3, [r3, #12]
   34c0e:	2202      	movs	r2, #2
   34c10:	2101      	movs	r1, #1
   34c12:	f006 feed 	bl	3b9f0 <fwrite>
   34c16:	9b01      	ldr	r3, [sp, #4]
   34c18:	b913      	cbnz	r3, 34c20 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
   34c1a:	4630      	mov	r0, r6
   34c1c:	f006 fd44 	bl	3b6a8 <free>
   34c20:	f7ff fed8 	bl	349d4 <__cxa_rethrow>
   34c24:	682b      	ldr	r3, [r5, #0]
   34c26:	4630      	mov	r0, r6
   34c28:	68d9      	ldr	r1, [r3, #12]
   34c2a:	f006 fe85 	bl	3b938 <fputs>
   34c2e:	e7eb      	b.n	34c08 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x54>
   34c30:	4b1d      	ldr	r3, [pc, #116]	@ (34ca8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   34c32:	4820      	ldr	r0, [pc, #128]	@ (34cb4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   34c34:	681b      	ldr	r3, [r3, #0]
   34c36:	222d      	movs	r2, #45	@ 0x2d
   34c38:	68db      	ldr	r3, [r3, #12]
   34c3a:	4621      	mov	r1, r4
   34c3c:	f006 fed8 	bl	3b9f0 <fwrite>
   34c40:	f7f0 fa92 	bl	25168 <abort>
   34c44:	4b18      	ldr	r3, [pc, #96]	@ (34ca8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
   34c46:	481c      	ldr	r0, [pc, #112]	@ (34cb8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   34c48:	681b      	ldr	r3, [r3, #0]
   34c4a:	221d      	movs	r2, #29
   34c4c:	68db      	ldr	r3, [r3, #12]
   34c4e:	2101      	movs	r1, #1
   34c50:	f006 fece 	bl	3b9f0 <fwrite>
   34c54:	f7f0 fa88 	bl	25168 <abort>
   34c58:	2901      	cmp	r1, #1
   34c5a:	460c      	mov	r4, r1
   34c5c:	d119      	bne.n	34c92 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xde>
   34c5e:	f006 fc7b 	bl	3b558 <__cxa_begin_catch>
   34c62:	6803      	ldr	r3, [r0, #0]
   34c64:	689b      	ldr	r3, [r3, #8]
   34c66:	4798      	blx	r3
   34c68:	682b      	ldr	r3, [r5, #0]
   34c6a:	4621      	mov	r1, r4
   34c6c:	68db      	ldr	r3, [r3, #12]
   34c6e:	4604      	mov	r4, r0
   34c70:	220b      	movs	r2, #11
   34c72:	4812      	ldr	r0, [pc, #72]	@ (34cbc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   34c74:	f006 febc 	bl	3b9f0 <fwrite>
   34c78:	682b      	ldr	r3, [r5, #0]
   34c7a:	4620      	mov	r0, r4
   34c7c:	68d9      	ldr	r1, [r3, #12]
   34c7e:	f006 fe5b 	bl	3b938 <fputs>
   34c82:	682b      	ldr	r3, [r5, #0]
   34c84:	200a      	movs	r0, #10
   34c86:	68d9      	ldr	r1, [r3, #12]
   34c88:	f006 fdea 	bl	3b860 <fputc>
   34c8c:	f006 fca2 	bl	3b5d4 <__cxa_end_catch>
   34c90:	e7d6      	b.n	34c40 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   34c92:	f006 fc61 	bl	3b558 <__cxa_begin_catch>
   34c96:	f006 fc9d 	bl	3b5d4 <__cxa_end_catch>
   34c9a:	e7d1      	b.n	34c40 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   34c9c:	f006 fc9a 	bl	3b5d4 <__cxa_end_catch>
   34ca0:	f7ff fa3c 	bl	3411c <__cxa_end_cleanup>
   34ca4:	10055084 	.word	0x10055084
   34ca8:	1000c53c 	.word	0x1000c53c
   34cac:	0003feac 	.word	0x0003feac
   34cb0:	0003fee0 	.word	0x0003fee0
   34cb4:	0003fee4 	.word	0x0003fee4
   34cb8:	0003fe8c 	.word	0x0003fe8c
   34cbc:	0003ff14 	.word	0x0003ff14

00034cc0 <_ZNKSt11logic_error4whatEv>:
   34cc0:	6840      	ldr	r0, [r0, #4]
   34cc2:	4770      	bx	lr

00034cc4 <_ZNSt11logic_errorD1Ev>:
   34cc4:	b510      	push	{r4, lr}
   34cc6:	6843      	ldr	r3, [r0, #4]
   34cc8:	4a0c      	ldr	r2, [pc, #48]	@ (34cfc <_ZNSt11logic_errorD1Ev+0x38>)
   34cca:	490d      	ldr	r1, [pc, #52]	@ (34d00 <_ZNSt11logic_errorD1Ev+0x3c>)
   34ccc:	4604      	mov	r4, r0
   34cce:	f1a3 000c 	sub.w	r0, r3, #12
   34cd2:	4290      	cmp	r0, r2
   34cd4:	b082      	sub	sp, #8
   34cd6:	6021      	str	r1, [r4, #0]
   34cd8:	d105      	bne.n	34ce6 <_ZNSt11logic_errorD1Ev+0x22>
   34cda:	4620      	mov	r0, r4
   34cdc:	f7ff fae6 	bl	342ac <_ZNSt9exceptionD1Ev>
   34ce0:	4620      	mov	r0, r4
   34ce2:	b002      	add	sp, #8
   34ce4:	bd10      	pop	{r4, pc}
   34ce6:	f853 2c04 	ldr.w	r2, [r3, #-4]
   34cea:	1e51      	subs	r1, r2, #1
   34cec:	2a00      	cmp	r2, #0
   34cee:	f843 1c04 	str.w	r1, [r3, #-4]
   34cf2:	dcf2      	bgt.n	34cda <_ZNSt11logic_errorD1Ev+0x16>
   34cf4:	a901      	add	r1, sp, #4
   34cf6:	f000 f8e3 	bl	34ec0 <_ZNSs4_Rep10_M_destroyERKSaIcE>
   34cfa:	e7ee      	b.n	34cda <_ZNSt11logic_errorD1Ev+0x16>
   34cfc:	10055088 	.word	0x10055088
   34d00:	00047fd0 	.word	0x00047fd0

00034d04 <_ZNSt12length_errorD1Ev>:
   34d04:	b510      	push	{r4, lr}
   34d06:	6843      	ldr	r3, [r0, #4]
   34d08:	4a0c      	ldr	r2, [pc, #48]	@ (34d3c <_ZNSt12length_errorD1Ev+0x38>)
   34d0a:	490d      	ldr	r1, [pc, #52]	@ (34d40 <_ZNSt12length_errorD1Ev+0x3c>)
   34d0c:	4604      	mov	r4, r0
   34d0e:	f1a3 000c 	sub.w	r0, r3, #12
   34d12:	4290      	cmp	r0, r2
   34d14:	b082      	sub	sp, #8
   34d16:	6021      	str	r1, [r4, #0]
   34d18:	d105      	bne.n	34d26 <_ZNSt12length_errorD1Ev+0x22>
   34d1a:	4620      	mov	r0, r4
   34d1c:	f7ff fac6 	bl	342ac <_ZNSt9exceptionD1Ev>
   34d20:	4620      	mov	r0, r4
   34d22:	b002      	add	sp, #8
   34d24:	bd10      	pop	{r4, pc}
   34d26:	f853 2c04 	ldr.w	r2, [r3, #-4]
   34d2a:	1e51      	subs	r1, r2, #1
   34d2c:	2a00      	cmp	r2, #0
   34d2e:	f843 1c04 	str.w	r1, [r3, #-4]
   34d32:	dcf2      	bgt.n	34d1a <_ZNSt12length_errorD1Ev+0x16>
   34d34:	a901      	add	r1, sp, #4
   34d36:	f000 f8c3 	bl	34ec0 <_ZNSs4_Rep10_M_destroyERKSaIcE>
   34d3a:	e7ee      	b.n	34d1a <_ZNSt12length_errorD1Ev+0x16>
   34d3c:	10055088 	.word	0x10055088
   34d40:	00047fd0 	.word	0x00047fd0

00034d44 <_ZNSt11logic_errorD0Ev>:
   34d44:	b510      	push	{r4, lr}
   34d46:	6843      	ldr	r3, [r0, #4]
   34d48:	4a0e      	ldr	r2, [pc, #56]	@ (34d84 <_ZNSt11logic_errorD0Ev+0x40>)
   34d4a:	490f      	ldr	r1, [pc, #60]	@ (34d88 <_ZNSt11logic_errorD0Ev+0x44>)
   34d4c:	4604      	mov	r4, r0
   34d4e:	f1a3 000c 	sub.w	r0, r3, #12
   34d52:	4290      	cmp	r0, r2
   34d54:	b082      	sub	sp, #8
   34d56:	6021      	str	r1, [r4, #0]
   34d58:	d108      	bne.n	34d6c <_ZNSt11logic_errorD0Ev+0x28>
   34d5a:	4620      	mov	r0, r4
   34d5c:	f7ff faa6 	bl	342ac <_ZNSt9exceptionD1Ev>
   34d60:	4620      	mov	r0, r4
   34d62:	f7fc fa6b 	bl	3123c <_ZdlPv>
   34d66:	4620      	mov	r0, r4
   34d68:	b002      	add	sp, #8
   34d6a:	bd10      	pop	{r4, pc}
   34d6c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   34d70:	1e51      	subs	r1, r2, #1
   34d72:	2a00      	cmp	r2, #0
   34d74:	f843 1c04 	str.w	r1, [r3, #-4]
   34d78:	dcef      	bgt.n	34d5a <_ZNSt11logic_errorD0Ev+0x16>
   34d7a:	a901      	add	r1, sp, #4
   34d7c:	f000 f8a0 	bl	34ec0 <_ZNSs4_Rep10_M_destroyERKSaIcE>
   34d80:	e7eb      	b.n	34d5a <_ZNSt11logic_errorD0Ev+0x16>
   34d82:	bf00      	nop
   34d84:	10055088 	.word	0x10055088
   34d88:	00047fd0 	.word	0x00047fd0

00034d8c <_ZNSt12length_errorD0Ev>:
   34d8c:	b510      	push	{r4, lr}
   34d8e:	6843      	ldr	r3, [r0, #4]
   34d90:	4a0e      	ldr	r2, [pc, #56]	@ (34dcc <_ZNSt12length_errorD0Ev+0x40>)
   34d92:	490f      	ldr	r1, [pc, #60]	@ (34dd0 <_ZNSt12length_errorD0Ev+0x44>)
   34d94:	4604      	mov	r4, r0
   34d96:	f1a3 000c 	sub.w	r0, r3, #12
   34d9a:	4290      	cmp	r0, r2
   34d9c:	b082      	sub	sp, #8
   34d9e:	6021      	str	r1, [r4, #0]
   34da0:	d108      	bne.n	34db4 <_ZNSt12length_errorD0Ev+0x28>
   34da2:	4620      	mov	r0, r4
   34da4:	f7ff fa82 	bl	342ac <_ZNSt9exceptionD1Ev>
   34da8:	4620      	mov	r0, r4
   34daa:	f7fc fa47 	bl	3123c <_ZdlPv>
   34dae:	4620      	mov	r0, r4
   34db0:	b002      	add	sp, #8
   34db2:	bd10      	pop	{r4, pc}
   34db4:	f853 2c04 	ldr.w	r2, [r3, #-4]
   34db8:	1e51      	subs	r1, r2, #1
   34dba:	2a00      	cmp	r2, #0
   34dbc:	f843 1c04 	str.w	r1, [r3, #-4]
   34dc0:	dcef      	bgt.n	34da2 <_ZNSt12length_errorD0Ev+0x16>
   34dc2:	a901      	add	r1, sp, #4
   34dc4:	f000 f87c 	bl	34ec0 <_ZNSs4_Rep10_M_destroyERKSaIcE>
   34dc8:	e7eb      	b.n	34da2 <_ZNSt12length_errorD0Ev+0x16>
   34dca:	bf00      	nop
   34dcc:	10055088 	.word	0x10055088
   34dd0:	00047fd0 	.word	0x00047fd0

00034dd4 <_ZNSt11logic_errorC1EPKc>:
   34dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   34dd6:	4b1b      	ldr	r3, [pc, #108]	@ (34e44 <_ZNSt11logic_errorC1EPKc+0x70>)
   34dd8:	6003      	str	r3, [r0, #0]
   34dda:	b083      	sub	sp, #12
   34ddc:	4604      	mov	r4, r0
   34dde:	b349      	cbz	r1, 34e34 <_ZNSt11logic_errorC1EPKc+0x60>
   34de0:	4608      	mov	r0, r1
   34de2:	460d      	mov	r5, r1
   34de4:	f7e3 fc6c 	bl	186c0 <strlen>
   34de8:	4607      	mov	r7, r0
   34dea:	b920      	cbnz	r0, 34df6 <_ZNSt11logic_errorC1EPKc+0x22>
   34dec:	4b16      	ldr	r3, [pc, #88]	@ (34e48 <_ZNSt11logic_errorC1EPKc+0x74>)
   34dee:	6063      	str	r3, [r4, #4]
   34df0:	4620      	mov	r0, r4
   34df2:	b003      	add	sp, #12
   34df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34df6:	aa01      	add	r2, sp, #4
   34df8:	2100      	movs	r1, #0
   34dfa:	f000 f835 	bl	34e68 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
   34dfe:	2f01      	cmp	r7, #1
   34e00:	4606      	mov	r6, r0
   34e02:	f100 030c 	add.w	r3, r0, #12
   34e06:	d00c      	beq.n	34e22 <_ZNSt11logic_errorC1EPKc+0x4e>
   34e08:	4618      	mov	r0, r3
   34e0a:	4629      	mov	r1, r5
   34e0c:	463a      	mov	r2, r7
   34e0e:	f7e3 fbb7 	bl	18580 <memcpy>
   34e12:	4603      	mov	r3, r0
   34e14:	4a0d      	ldr	r2, [pc, #52]	@ (34e4c <_ZNSt11logic_errorC1EPKc+0x78>)
   34e16:	4296      	cmp	r6, r2
   34e18:	d106      	bne.n	34e28 <_ZNSt11logic_errorC1EPKc+0x54>
   34e1a:	4620      	mov	r0, r4
   34e1c:	6063      	str	r3, [r4, #4]
   34e1e:	b003      	add	sp, #12
   34e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34e22:	782a      	ldrb	r2, [r5, #0]
   34e24:	7302      	strb	r2, [r0, #12]
   34e26:	e7f5      	b.n	34e14 <_ZNSt11logic_errorC1EPKc+0x40>
   34e28:	2200      	movs	r2, #0
   34e2a:	60b2      	str	r2, [r6, #8]
   34e2c:	6037      	str	r7, [r6, #0]
   34e2e:	443e      	add	r6, r7
   34e30:	7332      	strb	r2, [r6, #12]
   34e32:	e7f2      	b.n	34e1a <_ZNSt11logic_errorC1EPKc+0x46>
   34e34:	4806      	ldr	r0, [pc, #24]	@ (34e50 <_ZNSt11logic_errorC1EPKc+0x7c>)
   34e36:	f7ff f801 	bl	33e3c <_ZSt19__throw_logic_errorPKc>
   34e3a:	4620      	mov	r0, r4
   34e3c:	f7ff fa36 	bl	342ac <_ZNSt9exceptionD1Ev>
   34e40:	f7ff f96c 	bl	3411c <__cxa_end_cleanup>
   34e44:	00047fd0 	.word	0x00047fd0
   34e48:	10055094 	.word	0x10055094
   34e4c:	10055088 	.word	0x10055088
   34e50:	0003ff20 	.word	0x0003ff20

00034e54 <_ZNSt12length_errorC1EPKc>:
   34e54:	b510      	push	{r4, lr}
   34e56:	4604      	mov	r4, r0
   34e58:	f7ff ffbc 	bl	34dd4 <_ZNSt11logic_errorC1EPKc>
   34e5c:	4b01      	ldr	r3, [pc, #4]	@ (34e64 <_ZNSt12length_errorC1EPKc+0x10>)
   34e5e:	6023      	str	r3, [r4, #0]
   34e60:	4620      	mov	r0, r4
   34e62:	bd10      	pop	{r4, pc}
   34e64:	00047fe4 	.word	0x00047fe4

00034e68 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
   34e68:	4b13      	ldr	r3, [pc, #76]	@ (34eb8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
   34e6a:	4298      	cmp	r0, r3
   34e6c:	b510      	push	{r4, lr}
   34e6e:	d81f      	bhi.n	34eb0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
   34e70:	4288      	cmp	r0, r1
   34e72:	4604      	mov	r4, r0
   34e74:	d914      	bls.n	34ea0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x38>
   34e76:	004a      	lsls	r2, r1, #1
   34e78:	4290      	cmp	r0, r2
   34e7a:	bf38      	it	cc
   34e7c:	4614      	movcc	r4, r2
   34e7e:	f104 021d 	add.w	r2, r4, #29
   34e82:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
   34e86:	f104 000d 	add.w	r0, r4, #13
   34e8a:	d90b      	bls.n	34ea4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
   34e8c:	42a1      	cmp	r1, r4
   34e8e:	d209      	bcs.n	34ea4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
   34e90:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
   34e94:	f3c2 020b 	ubfx	r2, r2, #0, #12
   34e98:	1aa4      	subs	r4, r4, r2
   34e9a:	429c      	cmp	r4, r3
   34e9c:	bf28      	it	cs
   34e9e:	461c      	movcs	r4, r3
   34ea0:	f104 000d 	add.w	r0, r4, #13
   34ea4:	f7fc f9c6 	bl	31234 <_Znwj>
   34ea8:	2200      	movs	r2, #0
   34eaa:	e9c0 4201 	strd	r4, r2, [r0, #4]
   34eae:	bd10      	pop	{r4, pc}
   34eb0:	4802      	ldr	r0, [pc, #8]	@ (34ebc <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
   34eb2:	f7fe ffdb 	bl	33e6c <_ZSt20__throw_length_errorPKc>
   34eb6:	bf00      	nop
   34eb8:	3ffffffc 	.word	0x3ffffffc
   34ebc:	0003ff4c 	.word	0x0003ff4c

00034ec0 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
   34ec0:	f7fc b9bc 	b.w	3123c <_ZdlPv>

00034ec4 <d_make_comp>:
   34ec4:	2931      	cmp	r1, #49	@ 0x31
   34ec6:	b570      	push	{r4, r5, r6, lr}
   34ec8:	4684      	mov	ip, r0
   34eca:	d83c      	bhi.n	34f46 <d_make_comp+0x82>
   34ecc:	2928      	cmp	r1, #40	@ 0x28
   34ece:	d90a      	bls.n	34ee6 <d_make_comp+0x22>
   34ed0:	f1a1 0029 	sub.w	r0, r1, #41	@ 0x29
   34ed4:	2808      	cmp	r0, #8
   34ed6:	d834      	bhi.n	34f42 <d_make_comp+0x7e>
   34ed8:	e8df f000 	tbb	[pc, r0]
   34edc:	3318191a 	.word	0x3318191a
   34ee0:	411a1a18 	.word	0x411a1a18
   34ee4:	19          	.byte	0x19
   34ee5:	00          	.byte	0x00
   34ee6:	290a      	cmp	r1, #10
   34ee8:	d90e      	bls.n	34f08 <d_make_comp+0x44>
   34eea:	f1a1 050b 	sub.w	r5, r1, #11
   34eee:	482f      	ldr	r0, [pc, #188]	@ (34fac <d_make_comp+0xe8>)
   34ef0:	b2ed      	uxtb	r5, r5
   34ef2:	2401      	movs	r4, #1
   34ef4:	40ac      	lsls	r4, r5
   34ef6:	4020      	ands	r0, r4
   34ef8:	bb88      	cbnz	r0, 34f5e <d_make_comp+0x9a>
   34efa:	f414 1f7f 	tst.w	r4, #4177920	@ 0x3fc000
   34efe:	d107      	bne.n	34f10 <d_make_comp+0x4c>
   34f00:	482b      	ldr	r0, [pc, #172]	@ (34fb0 <d_make_comp+0xec>)
   34f02:	4020      	ands	r0, r4
   34f04:	b910      	cbnz	r0, 34f0c <d_make_comp+0x48>
   34f06:	bd70      	pop	{r4, r5, r6, pc}
   34f08:	2904      	cmp	r1, #4
   34f0a:	d816      	bhi.n	34f3a <d_make_comp+0x76>
   34f0c:	b1ca      	cbz	r2, 34f42 <d_make_comp+0x7e>
   34f0e:	b1c3      	cbz	r3, 34f42 <d_make_comp+0x7e>
   34f10:	e9dc 4005 	ldrd	r4, r0, [ip, #20]
   34f14:	4284      	cmp	r4, r0
   34f16:	da14      	bge.n	34f42 <d_make_comp+0x7e>
   34f18:	f8dc 5010 	ldr.w	r5, [ip, #16]
   34f1c:	eb04 0e84 	add.w	lr, r4, r4, lsl #2
   34f20:	eb05 008e 	add.w	r0, r5, lr, lsl #2
   34f24:	3401      	adds	r4, #1
   34f26:	2600      	movs	r6, #0
   34f28:	e9c0 6601 	strd	r6, r6, [r0, #4]
   34f2c:	f8cc 4014 	str.w	r4, [ip, #20]
   34f30:	f805 102e 	strb.w	r1, [r5, lr, lsl #2]
   34f34:	e9c0 2303 	strd	r2, r3, [r0, #12]
   34f38:	bd70      	pop	{r4, r5, r6, pc}
   34f3a:	f1a1 0009 	sub.w	r0, r1, #9
   34f3e:	2801      	cmp	r0, #1
   34f40:	d90d      	bls.n	34f5e <d_make_comp+0x9a>
   34f42:	2000      	movs	r0, #0
   34f44:	bd70      	pop	{r4, r5, r6, pc}
   34f46:	294f      	cmp	r1, #79	@ 0x4f
   34f48:	d80c      	bhi.n	34f64 <d_make_comp+0xa0>
   34f4a:	2933      	cmp	r1, #51	@ 0x33
   34f4c:	d9f9      	bls.n	34f42 <d_make_comp+0x7e>
   34f4e:	f1a1 0534 	sub.w	r5, r1, #52	@ 0x34
   34f52:	4818      	ldr	r0, [pc, #96]	@ (34fb4 <d_make_comp+0xf0>)
   34f54:	b2ed      	uxtb	r5, r5
   34f56:	2401      	movs	r4, #1
   34f58:	40ac      	lsls	r4, r5
   34f5a:	4020      	ands	r0, r4
   34f5c:	b1f0      	cbz	r0, 34f9c <d_make_comp+0xd8>
   34f5e:	2a00      	cmp	r2, #0
   34f60:	d1d6      	bne.n	34f10 <d_make_comp+0x4c>
   34f62:	e7ee      	b.n	34f42 <d_make_comp+0x7e>
   34f64:	f1a1 0052 	sub.w	r0, r1, #82	@ 0x52
   34f68:	2809      	cmp	r0, #9
   34f6a:	d8d1      	bhi.n	34f10 <d_make_comp+0x4c>
   34f6c:	a401      	add	r4, pc, #4	@ (adr r4, 34f74 <d_make_comp+0xb0>)
   34f6e:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
   34f72:	bf00      	nop
   34f74:	00034f5f 	.word	0x00034f5f
   34f78:	00034f0f 	.word	0x00034f0f
   34f7c:	00034f0f 	.word	0x00034f0f
   34f80:	00034f0d 	.word	0x00034f0d
   34f84:	00034f5f 	.word	0x00034f5f
   34f88:	00034f5f 	.word	0x00034f5f
   34f8c:	00034f11 	.word	0x00034f11
   34f90:	00034f5f 	.word	0x00034f5f
   34f94:	00034f5f 	.word	0x00034f5f
   34f98:	00034f5f 	.word	0x00034f5f
   34f9c:	4806      	ldr	r0, [pc, #24]	@ (34fb8 <d_make_comp+0xf4>)
   34f9e:	4020      	ands	r0, r4
   34fa0:	2800      	cmp	r0, #0
   34fa2:	d1b3      	bne.n	34f0c <d_make_comp+0x48>
   34fa4:	294e      	cmp	r1, #78	@ 0x4e
   34fa6:	d0b3      	beq.n	34f10 <d_make_comp+0x4c>
   34fa8:	bd70      	pop	{r4, r5, r6, pc}
   34faa:	bf00      	nop
   34fac:	2f801ffe 	.word	0x2f801ffe
   34fb0:	00400001 	.word	0x00400001
   34fb4:	01c71107 	.word	0x01c71107
   34fb8:	0a002ef8 	.word	0x0a002ef8

00034fbc <d_number>:
   34fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   34fbe:	68c2      	ldr	r2, [r0, #12]
   34fc0:	7811      	ldrb	r1, [r2, #0]
   34fc2:	296e      	cmp	r1, #110	@ 0x6e
   34fc4:	4686      	mov	lr, r0
   34fc6:	d025      	beq.n	35014 <d_number+0x58>
   34fc8:	3930      	subs	r1, #48	@ 0x30
   34fca:	b2cb      	uxtb	r3, r1
   34fcc:	2b09      	cmp	r3, #9
   34fce:	d82b      	bhi.n	35028 <d_number+0x6c>
   34fd0:	2600      	movs	r6, #0
   34fd2:	4d16      	ldr	r5, [pc, #88]	@ (3502c <d_number+0x70>)
   34fd4:	2000      	movs	r0, #0
   34fd6:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
   34fda:	e002      	b.n	34fe2 <d_number+0x26>
   34fdc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
   34fe0:	dc15      	bgt.n	3500e <d_number+0x52>
   34fe2:	3201      	adds	r2, #1
   34fe4:	f8ce 200c 	str.w	r2, [lr, #12]
   34fe8:	7813      	ldrb	r3, [r2, #0]
   34fea:	3b30      	subs	r3, #48	@ 0x30
   34fec:	fa5f fc83 	uxtb.w	ip, r3
   34ff0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   34ff4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
   34ff8:	f1bc 0f09 	cmp.w	ip, #9
   34ffc:	4619      	mov	r1, r3
   34ffe:	eba4 0303 	sub.w	r3, r4, r3
   35002:	fba5 7303 	umull	r7, r3, r5, r3
   35006:	d9e9      	bls.n	34fdc <d_number+0x20>
   35008:	b106      	cbz	r6, 3500c <d_number+0x50>
   3500a:	4240      	negs	r0, r0
   3500c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3500e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
   35012:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35014:	1c53      	adds	r3, r2, #1
   35016:	60c3      	str	r3, [r0, #12]
   35018:	7851      	ldrb	r1, [r2, #1]
   3501a:	3930      	subs	r1, #48	@ 0x30
   3501c:	b2ca      	uxtb	r2, r1
   3501e:	2a09      	cmp	r2, #9
   35020:	d802      	bhi.n	35028 <d_number+0x6c>
   35022:	461a      	mov	r2, r3
   35024:	2601      	movs	r6, #1
   35026:	e7d4      	b.n	34fd2 <d_number+0x16>
   35028:	2000      	movs	r0, #0
   3502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3502c:	cccccccd 	.word	0xcccccccd

00035030 <d_call_offset>:
   35030:	b510      	push	{r4, lr}
   35032:	4604      	mov	r4, r0
   35034:	b929      	cbnz	r1, 35042 <d_call_offset+0x12>
   35036:	68c3      	ldr	r3, [r0, #12]
   35038:	781a      	ldrb	r2, [r3, #0]
   3503a:	b16a      	cbz	r2, 35058 <d_call_offset+0x28>
   3503c:	1c5a      	adds	r2, r3, #1
   3503e:	60c2      	str	r2, [r0, #12]
   35040:	7819      	ldrb	r1, [r3, #0]
   35042:	2968      	cmp	r1, #104	@ 0x68
   35044:	d00c      	beq.n	35060 <d_call_offset+0x30>
   35046:	2976      	cmp	r1, #118	@ 0x76
   35048:	d106      	bne.n	35058 <d_call_offset+0x28>
   3504a:	4620      	mov	r0, r4
   3504c:	f7ff ffb6 	bl	34fbc <d_number>
   35050:	68e3      	ldr	r3, [r4, #12]
   35052:	781a      	ldrb	r2, [r3, #0]
   35054:	2a5f      	cmp	r2, #95	@ 0x5f
   35056:	d001      	beq.n	3505c <d_call_offset+0x2c>
   35058:	2000      	movs	r0, #0
   3505a:	bd10      	pop	{r4, pc}
   3505c:	3301      	adds	r3, #1
   3505e:	60e3      	str	r3, [r4, #12]
   35060:	4620      	mov	r0, r4
   35062:	f7ff ffab 	bl	34fbc <d_number>
   35066:	68e3      	ldr	r3, [r4, #12]
   35068:	781a      	ldrb	r2, [r3, #0]
   3506a:	2a5f      	cmp	r2, #95	@ 0x5f
   3506c:	d1f4      	bne.n	35058 <d_call_offset+0x28>
   3506e:	3301      	adds	r3, #1
   35070:	60e3      	str	r3, [r4, #12]
   35072:	2001      	movs	r0, #1
   35074:	bd10      	pop	{r4, pc}
   35076:	bf00      	nop

00035078 <d_discriminator>:
   35078:	68c3      	ldr	r3, [r0, #12]
   3507a:	781a      	ldrb	r2, [r3, #0]
   3507c:	2a5f      	cmp	r2, #95	@ 0x5f
   3507e:	d001      	beq.n	35084 <d_discriminator+0xc>
   35080:	2001      	movs	r0, #1
   35082:	4770      	bx	lr
   35084:	b510      	push	{r4, lr}
   35086:	1c5a      	adds	r2, r3, #1
   35088:	60c2      	str	r2, [r0, #12]
   3508a:	785a      	ldrb	r2, [r3, #1]
   3508c:	2a5f      	cmp	r2, #95	@ 0x5f
   3508e:	4604      	mov	r4, r0
   35090:	d004      	beq.n	3509c <d_discriminator+0x24>
   35092:	f7ff ff93 	bl	34fbc <d_number>
   35096:	43c0      	mvns	r0, r0
   35098:	0fc0      	lsrs	r0, r0, #31
   3509a:	bd10      	pop	{r4, pc}
   3509c:	3302      	adds	r3, #2
   3509e:	60c3      	str	r3, [r0, #12]
   350a0:	f7ff ff8c 	bl	34fbc <d_number>
   350a4:	2800      	cmp	r0, #0
   350a6:	db07      	blt.n	350b8 <d_discriminator+0x40>
   350a8:	2809      	cmp	r0, #9
   350aa:	dc01      	bgt.n	350b0 <d_discriminator+0x38>
   350ac:	2001      	movs	r0, #1
   350ae:	bd10      	pop	{r4, pc}
   350b0:	68e3      	ldr	r3, [r4, #12]
   350b2:	781a      	ldrb	r2, [r3, #0]
   350b4:	2a5f      	cmp	r2, #95	@ 0x5f
   350b6:	d001      	beq.n	350bc <d_discriminator+0x44>
   350b8:	2000      	movs	r0, #0
   350ba:	bd10      	pop	{r4, pc}
   350bc:	3301      	adds	r3, #1
   350be:	60e3      	str	r3, [r4, #12]
   350c0:	e7f4      	b.n	350ac <d_discriminator+0x34>
   350c2:	bf00      	nop

000350c4 <d_count_templates_scopes>:
   350c4:	2900      	cmp	r1, #0
   350c6:	f000 8091 	beq.w	351ec <d_count_templates_scopes+0x128>
   350ca:	b538      	push	{r3, r4, r5, lr}
   350cc:	4605      	mov	r5, r0
   350ce:	460c      	mov	r4, r1
   350d0:	68a2      	ldr	r2, [r4, #8]
   350d2:	2a01      	cmp	r2, #1
   350d4:	dc35      	bgt.n	35142 <d_count_templates_scopes+0x7e>
   350d6:	f8d5 011c 	ldr.w	r0, [r5, #284]	@ 0x11c
   350da:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
   350de:	dc30      	bgt.n	35142 <d_count_templates_scopes+0x7e>
   350e0:	7823      	ldrb	r3, [r4, #0]
   350e2:	3201      	adds	r2, #1
   350e4:	2b41      	cmp	r3, #65	@ 0x41
   350e6:	60a2      	str	r2, [r4, #8]
   350e8:	d82c      	bhi.n	35144 <d_count_templates_scopes+0x80>
   350ea:	2b22      	cmp	r3, #34	@ 0x22
   350ec:	d818      	bhi.n	35120 <d_count_templates_scopes+0x5c>
   350ee:	3b01      	subs	r3, #1
   350f0:	b2da      	uxtb	r2, r3
   350f2:	2a21      	cmp	r2, #33	@ 0x21
   350f4:	d825      	bhi.n	35142 <d_count_templates_scopes+0x7e>
   350f6:	2b21      	cmp	r3, #33	@ 0x21
   350f8:	d823      	bhi.n	35142 <d_count_templates_scopes+0x7e>
   350fa:	e8df f003 	tbb	[pc, r3]
   350fe:	5151      	.short	0x5151
   35100:	22227051 	.word	0x22227051
   35104:	51511f1f 	.word	0x51511f1f
   35108:	51515151 	.word	0x51515151
   3510c:	51515151 	.word	0x51515151
   35110:	51515151 	.word	0x51515151
   35114:	51512251 	.word	0x51512251
   35118:	51515151 	.word	0x51515151
   3511c:	51515151 	.word	0x51515151
   35120:	f1a3 0c23 	sub.w	ip, r3, #35	@ 0x23
   35124:	4932      	ldr	r1, [pc, #200]	@ (351f0 <d_count_templates_scopes+0x12c>)
   35126:	fa5f fc8c 	uxtb.w	ip, ip
   3512a:	2201      	movs	r2, #1
   3512c:	fa02 f20c 	lsl.w	r2, r2, ip
   35130:	4011      	ands	r1, r2
   35132:	bba9      	cbnz	r1, 351a0 <d_count_templates_scopes+0xdc>
   35134:	0792      	lsls	r2, r2, #30
   35136:	d148      	bne.n	351ca <d_count_templates_scopes+0x106>
   35138:	2b33      	cmp	r3, #51	@ 0x33
   3513a:	d102      	bne.n	35142 <d_count_templates_scopes+0x7e>
   3513c:	6924      	ldr	r4, [r4, #16]
   3513e:	2c00      	cmp	r4, #0
   35140:	d1c6      	bne.n	350d0 <d_count_templates_scopes+0xc>
   35142:	bd38      	pop	{r3, r4, r5, pc}
   35144:	3b44      	subs	r3, #68	@ 0x44
   35146:	b2da      	uxtb	r2, r3
   35148:	2a11      	cmp	r2, #17
   3514a:	d8fa      	bhi.n	35142 <d_count_templates_scopes+0x7e>
   3514c:	2b11      	cmp	r3, #17
   3514e:	d8f8      	bhi.n	35142 <d_count_templates_scopes+0x7e>
   35150:	a201      	add	r2, pc, #4	@ (adr r2, 35158 <d_count_templates_scopes+0x94>)
   35152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   35156:	bf00      	nop
   35158:	000351a1 	.word	0x000351a1
   3515c:	000351c3 	.word	0x000351c3
   35160:	000351c3 	.word	0x000351c3
   35164:	000351c3 	.word	0x000351c3
   35168:	000351c3 	.word	0x000351c3
   3516c:	00035143 	.word	0x00035143
   35170:	000351a1 	.word	0x000351a1
   35174:	000351a1 	.word	0x000351a1
   35178:	000351a1 	.word	0x000351a1
   3517c:	000351a1 	.word	0x000351a1
   35180:	000351a1 	.word	0x000351a1
   35184:	000351a1 	.word	0x000351a1
   35188:	000351a1 	.word	0x000351a1
   3518c:	000351a1 	.word	0x000351a1
   35190:	00035143 	.word	0x00035143
   35194:	00035143 	.word	0x00035143
   35198:	00035143 	.word	0x00035143
   3519c:	000351c3 	.word	0x000351c3
   351a0:	68e1      	ldr	r1, [r4, #12]
   351a2:	3001      	adds	r0, #1
   351a4:	f8c5 011c 	str.w	r0, [r5, #284]	@ 0x11c
   351a8:	4628      	mov	r0, r5
   351aa:	f7ff ff8b 	bl	350c4 <d_count_templates_scopes>
   351ae:	6921      	ldr	r1, [r4, #16]
   351b0:	4628      	mov	r0, r5
   351b2:	f7ff ff87 	bl	350c4 <d_count_templates_scopes>
   351b6:	f8d5 311c 	ldr.w	r3, [r5, #284]	@ 0x11c
   351ba:	3b01      	subs	r3, #1
   351bc:	f8c5 311c 	str.w	r3, [r5, #284]	@ 0x11c
   351c0:	bd38      	pop	{r3, r4, r5, pc}
   351c2:	68e4      	ldr	r4, [r4, #12]
   351c4:	2c00      	cmp	r4, #0
   351c6:	d183      	bne.n	350d0 <d_count_templates_scopes+0xc>
   351c8:	e7bb      	b.n	35142 <d_count_templates_scopes+0x7e>
   351ca:	68e1      	ldr	r1, [r4, #12]
   351cc:	780b      	ldrb	r3, [r1, #0]
   351ce:	2b05      	cmp	r3, #5
   351d0:	d1e7      	bne.n	351a2 <d_count_templates_scopes+0xde>
   351d2:	f8d5 3138 	ldr.w	r3, [r5, #312]	@ 0x138
   351d6:	3301      	adds	r3, #1
   351d8:	f8c5 3138 	str.w	r3, [r5, #312]	@ 0x138
   351dc:	e7e1      	b.n	351a2 <d_count_templates_scopes+0xde>
   351de:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
   351e2:	68e1      	ldr	r1, [r4, #12]
   351e4:	3301      	adds	r3, #1
   351e6:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
   351ea:	e7da      	b.n	351a2 <d_count_templates_scopes+0xde>
   351ec:	4770      	bx	lr
   351ee:	bf00      	nop
   351f0:	7ffe7dec 	.word	0x7ffe7dec

000351f4 <d_index_template_argument.part.0>:
   351f4:	b920      	cbnz	r0, 35200 <d_index_template_argument.part.0+0xc>
   351f6:	e009      	b.n	3520c <d_index_template_argument.part.0+0x18>
   351f8:	b139      	cbz	r1, 3520a <d_index_template_argument.part.0+0x16>
   351fa:	6900      	ldr	r0, [r0, #16]
   351fc:	3901      	subs	r1, #1
   351fe:	b130      	cbz	r0, 3520e <d_index_template_argument.part.0+0x1a>
   35200:	7803      	ldrb	r3, [r0, #0]
   35202:	2b2f      	cmp	r3, #47	@ 0x2f
   35204:	d0f8      	beq.n	351f8 <d_index_template_argument.part.0+0x4>
   35206:	2000      	movs	r0, #0
   35208:	4770      	bx	lr
   3520a:	68c0      	ldr	r0, [r0, #12]
   3520c:	4770      	bx	lr
   3520e:	4770      	bx	lr

00035210 <d_growable_string_callback_adapter>:
   35210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35214:	4614      	mov	r4, r2
   35216:	6852      	ldr	r2, [r2, #4]
   35218:	68a5      	ldr	r5, [r4, #8]
   3521a:	f8d4 800c 	ldr.w	r8, [r4, #12]
   3521e:	1c4b      	adds	r3, r1, #1
   35220:	4413      	add	r3, r2
   35222:	42ab      	cmp	r3, r5
   35224:	b082      	sub	sp, #8
   35226:	460e      	mov	r6, r1
   35228:	4607      	mov	r7, r0
   3522a:	d814      	bhi.n	35256 <d_growable_string_callback_adapter+0x46>
   3522c:	f1b8 0f00 	cmp.w	r8, #0
   35230:	d10e      	bne.n	35250 <d_growable_string_callback_adapter+0x40>
   35232:	6863      	ldr	r3, [r4, #4]
   35234:	6820      	ldr	r0, [r4, #0]
   35236:	4632      	mov	r2, r6
   35238:	4418      	add	r0, r3
   3523a:	4639      	mov	r1, r7
   3523c:	f7e3 f9a0 	bl	18580 <memcpy>
   35240:	e9d4 3200 	ldrd	r3, r2, [r4]
   35244:	4433      	add	r3, r6
   35246:	f803 8002 	strb.w	r8, [r3, r2]
   3524a:	6863      	ldr	r3, [r4, #4]
   3524c:	4433      	add	r3, r6
   3524e:	6063      	str	r3, [r4, #4]
   35250:	b002      	add	sp, #8
   35252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35256:	f1b8 0f00 	cmp.w	r8, #0
   3525a:	d1f9      	bne.n	35250 <d_growable_string_callback_adapter+0x40>
   3525c:	b17d      	cbz	r5, 3527e <d_growable_string_callback_adapter+0x6e>
   3525e:	006d      	lsls	r5, r5, #1
   35260:	42ab      	cmp	r3, r5
   35262:	d8fc      	bhi.n	3525e <d_growable_string_callback_adapter+0x4e>
   35264:	6820      	ldr	r0, [r4, #0]
   35266:	4629      	mov	r1, r5
   35268:	f006 fa26 	bl	3b6b8 <realloc>
   3526c:	b160      	cbz	r0, 35288 <d_growable_string_callback_adapter+0x78>
   3526e:	f8d4 800c 	ldr.w	r8, [r4, #12]
   35272:	6020      	str	r0, [r4, #0]
   35274:	60a5      	str	r5, [r4, #8]
   35276:	f1b8 0f00 	cmp.w	r8, #0
   3527a:	d0da      	beq.n	35232 <d_growable_string_callback_adapter+0x22>
   3527c:	e7e8      	b.n	35250 <d_growable_string_callback_adapter+0x40>
   3527e:	2b02      	cmp	r3, #2
   35280:	f04f 0502 	mov.w	r5, #2
   35284:	d8eb      	bhi.n	3525e <d_growable_string_callback_adapter+0x4e>
   35286:	e7ed      	b.n	35264 <d_growable_string_callback_adapter+0x54>
   35288:	9001      	str	r0, [sp, #4]
   3528a:	6820      	ldr	r0, [r4, #0]
   3528c:	f006 fa0c 	bl	3b6a8 <free>
   35290:	9b01      	ldr	r3, [sp, #4]
   35292:	2201      	movs	r2, #1
   35294:	e9c4 3300 	strd	r3, r3, [r4]
   35298:	e9c4 3202 	strd	r3, r2, [r4, #8]
   3529c:	e7d8      	b.n	35250 <d_growable_string_callback_adapter+0x40>
   3529e:	bf00      	nop

000352a0 <next_is_type_qual.isra.0>:
   352a0:	7803      	ldrb	r3, [r0, #0]
   352a2:	2b4b      	cmp	r3, #75	@ 0x4b
   352a4:	d017      	beq.n	352d6 <next_is_type_qual.isra.0+0x36>
   352a6:	d80e      	bhi.n	352c6 <next_is_type_qual.isra.0+0x26>
   352a8:	2b44      	cmp	r3, #68	@ 0x44
   352aa:	d116      	bne.n	352da <next_is_type_qual.isra.0+0x3a>
   352ac:	7840      	ldrb	r0, [r0, #1]
   352ae:	f1a0 0377 	sub.w	r3, r0, #119	@ 0x77
   352b2:	2b01      	cmp	r3, #1
   352b4:	d90f      	bls.n	352d6 <next_is_type_qual.isra.0+0x36>
   352b6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
   352ba:	f1a0 004f 	sub.w	r0, r0, #79	@ 0x4f
   352be:	fab0 f080 	clz	r0, r0
   352c2:	0940      	lsrs	r0, r0, #5
   352c4:	4770      	bx	lr
   352c6:	2b56      	cmp	r3, #86	@ 0x56
   352c8:	d005      	beq.n	352d6 <next_is_type_qual.isra.0+0x36>
   352ca:	f1a3 0072 	sub.w	r0, r3, #114	@ 0x72
   352ce:	fab0 f080 	clz	r0, r0
   352d2:	0940      	lsrs	r0, r0, #5
   352d4:	4770      	bx	lr
   352d6:	2001      	movs	r0, #1
   352d8:	4770      	bx	lr
   352da:	2000      	movs	r0, #0
   352dc:	4770      	bx	lr
   352de:	bf00      	nop

000352e0 <d_append_char>:
   352e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
   352e4:	2bff      	cmp	r3, #255	@ 0xff
   352e6:	b570      	push	{r4, r5, r6, lr}
   352e8:	4604      	mov	r4, r0
   352ea:	460d      	mov	r5, r1
   352ec:	d006      	beq.n	352fc <d_append_char+0x1c>
   352ee:	1c5a      	adds	r2, r3, #1
   352f0:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   352f4:	54e5      	strb	r5, [r4, r3]
   352f6:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   352fa:	bd70      	pop	{r4, r5, r6, pc}
   352fc:	2600      	movs	r6, #0
   352fe:	4619      	mov	r1, r3
   35300:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   35304:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
   35308:	4798      	blx	r3
   3530a:	f8d4 1128 	ldr.w	r1, [r4, #296]	@ 0x128
   3530e:	2201      	movs	r2, #1
   35310:	4633      	mov	r3, r6
   35312:	4411      	add	r1, r2
   35314:	f8c4 1128 	str.w	r1, [r4, #296]	@ 0x128
   35318:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3531c:	54e5      	strb	r5, [r4, r3]
   3531e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   35322:	bd70      	pop	{r4, r5, r6, pc}

00035324 <d_lookup_template_argument>:
   35324:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
   35328:	b18b      	cbz	r3, 3534e <d_lookup_template_argument+0x2a>
   3532a:	685a      	ldr	r2, [r3, #4]
   3532c:	68cb      	ldr	r3, [r1, #12]
   3532e:	6910      	ldr	r0, [r2, #16]
   35330:	2b00      	cmp	r3, #0
   35332:	db0b      	blt.n	3534c <d_lookup_template_argument+0x28>
   35334:	b920      	cbnz	r0, 35340 <d_lookup_template_argument+0x1c>
   35336:	e006      	b.n	35346 <d_lookup_template_argument+0x22>
   35338:	b13b      	cbz	r3, 3534a <d_lookup_template_argument+0x26>
   3533a:	6900      	ldr	r0, [r0, #16]
   3533c:	3b01      	subs	r3, #1
   3533e:	b110      	cbz	r0, 35346 <d_lookup_template_argument+0x22>
   35340:	7802      	ldrb	r2, [r0, #0]
   35342:	2a2f      	cmp	r2, #47	@ 0x2f
   35344:	d0f8      	beq.n	35338 <d_lookup_template_argument+0x14>
   35346:	2000      	movs	r0, #0
   35348:	4770      	bx	lr
   3534a:	68c0      	ldr	r0, [r0, #12]
   3534c:	4770      	bx	lr
   3534e:	2301      	movs	r3, #1
   35350:	f8c0 3118 	str.w	r3, [r0, #280]	@ 0x118
   35354:	e7f7      	b.n	35346 <d_lookup_template_argument+0x22>
   35356:	bf00      	nop

00035358 <d_find_pack>:
   35358:	2900      	cmp	r1, #0
   3535a:	d041      	beq.n	353e0 <d_find_pack+0x88>
   3535c:	b538      	push	{r3, r4, r5, lr}
   3535e:	4605      	mov	r5, r0
   35360:	460c      	mov	r4, r1
   35362:	7823      	ldrb	r3, [r4, #0]
   35364:	2b33      	cmp	r3, #51	@ 0x33
   35366:	d81d      	bhi.n	353a4 <d_find_pack+0x4c>
   35368:	2b33      	cmp	r3, #51	@ 0x33
   3536a:	d824      	bhi.n	353b6 <d_find_pack+0x5e>
   3536c:	e8df f003 	tbb	[pc, r3]
   35370:	2323232b 	.word	0x2323232b
   35374:	282b2d23 	.word	0x282b2d23
   35378:	23232328 	.word	0x23232328
   3537c:	23232323 	.word	0x23232323
   35380:	23232323 	.word	0x23232323
   35384:	23232323 	.word	0x23232323
   35388:	2323232b 	.word	0x2323232b
   3538c:	23232323 	.word	0x23232323
   35390:	23232323 	.word	0x23232323
   35394:	2b232323 	.word	0x2b232323
   35398:	23232323 	.word	0x23232323
   3539c:	23232323 	.word	0x23232323
   353a0:	282b2323 	.word	0x282b2323
   353a4:	3b42      	subs	r3, #66	@ 0x42
   353a6:	b2db      	uxtb	r3, r3
   353a8:	2b1a      	cmp	r3, #26
   353aa:	d804      	bhi.n	353b6 <d_find_pack+0x5e>
   353ac:	4a0d      	ldr	r2, [pc, #52]	@ (353e4 <d_find_pack+0x8c>)
   353ae:	fa22 f303 	lsr.w	r3, r2, r3
   353b2:	07db      	lsls	r3, r3, #31
   353b4:	d407      	bmi.n	353c6 <d_find_pack+0x6e>
   353b6:	68e1      	ldr	r1, [r4, #12]
   353b8:	4628      	mov	r0, r5
   353ba:	f7ff ffcd 	bl	35358 <d_find_pack>
   353be:	b918      	cbnz	r0, 353c8 <d_find_pack+0x70>
   353c0:	6924      	ldr	r4, [r4, #16]
   353c2:	2c00      	cmp	r4, #0
   353c4:	d1cd      	bne.n	35362 <d_find_pack+0xa>
   353c6:	2000      	movs	r0, #0
   353c8:	bd38      	pop	{r3, r4, r5, pc}
   353ca:	4621      	mov	r1, r4
   353cc:	4628      	mov	r0, r5
   353ce:	f7ff ffa9 	bl	35324 <d_lookup_template_argument>
   353d2:	2800      	cmp	r0, #0
   353d4:	d0f7      	beq.n	353c6 <d_find_pack+0x6e>
   353d6:	7803      	ldrb	r3, [r0, #0]
   353d8:	2b2f      	cmp	r3, #47	@ 0x2f
   353da:	d0f5      	beq.n	353c8 <d_find_pack+0x70>
   353dc:	2000      	movs	r0, #0
   353de:	e7f3      	b.n	353c8 <d_find_pack+0x70>
   353e0:	2000      	movs	r0, #0
   353e2:	4770      	bx	lr
   353e4:	04000ce3 	.word	0x04000ce3

000353e8 <d_append_string>:
   353e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   353ec:	4604      	mov	r4, r0
   353ee:	4608      	mov	r0, r1
   353f0:	460d      	mov	r5, r1
   353f2:	f7e3 f965 	bl	186c0 <strlen>
   353f6:	b340      	cbz	r0, 3544a <d_append_string+0x62>
   353f8:	3d01      	subs	r5, #1
   353fa:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   353fe:	182f      	adds	r7, r5, r0
   35400:	f04f 0800 	mov.w	r8, #0
   35404:	e009      	b.n	3541a <d_append_string+0x32>
   35406:	460b      	mov	r3, r1
   35408:	42bd      	cmp	r5, r7
   3540a:	f101 0101 	add.w	r1, r1, #1
   3540e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   35412:	54e6      	strb	r6, [r4, r3]
   35414:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   35418:	d017      	beq.n	3544a <d_append_string+0x62>
   3541a:	29ff      	cmp	r1, #255	@ 0xff
   3541c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   35420:	d1f1      	bne.n	35406 <d_append_string+0x1e>
   35422:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   35426:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3542a:	4620      	mov	r0, r4
   3542c:	4798      	blx	r3
   3542e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   35432:	2101      	movs	r1, #1
   35434:	2300      	movs	r3, #0
   35436:	440a      	add	r2, r1
   35438:	42bd      	cmp	r5, r7
   3543a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3543e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   35442:	54e6      	strb	r6, [r4, r3]
   35444:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   35448:	d1e7      	bne.n	3541a <d_append_string+0x32>
   3544a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3544e:	bf00      	nop

00035450 <d_template_param>:
   35450:	b538      	push	{r3, r4, r5, lr}
   35452:	68c2      	ldr	r2, [r0, #12]
   35454:	7813      	ldrb	r3, [r2, #0]
   35456:	2b54      	cmp	r3, #84	@ 0x54
   35458:	d124      	bne.n	354a4 <d_template_param+0x54>
   3545a:	1c53      	adds	r3, r2, #1
   3545c:	60c3      	str	r3, [r0, #12]
   3545e:	7852      	ldrb	r2, [r2, #1]
   35460:	2a5f      	cmp	r2, #95	@ 0x5f
   35462:	4604      	mov	r4, r0
   35464:	d020      	beq.n	354a8 <d_template_param+0x58>
   35466:	2a6e      	cmp	r2, #110	@ 0x6e
   35468:	d01c      	beq.n	354a4 <d_template_param+0x54>
   3546a:	f7ff fda7 	bl	34fbc <d_number>
   3546e:	1c41      	adds	r1, r0, #1
   35470:	d418      	bmi.n	354a4 <d_template_param+0x54>
   35472:	68e3      	ldr	r3, [r4, #12]
   35474:	781a      	ldrb	r2, [r3, #0]
   35476:	2a5f      	cmp	r2, #95	@ 0x5f
   35478:	d114      	bne.n	354a4 <d_template_param+0x54>
   3547a:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   3547e:	3301      	adds	r3, #1
   35480:	4282      	cmp	r2, r0
   35482:	60e3      	str	r3, [r4, #12]
   35484:	da0e      	bge.n	354a4 <d_template_param+0x54>
   35486:	6923      	ldr	r3, [r4, #16]
   35488:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   3548c:	eb03 008c 	add.w	r0, r3, ip, lsl #2
   35490:	3201      	adds	r2, #1
   35492:	2500      	movs	r5, #0
   35494:	e9c0 5501 	strd	r5, r5, [r0, #4]
   35498:	6162      	str	r2, [r4, #20]
   3549a:	2205      	movs	r2, #5
   3549c:	f803 202c 	strb.w	r2, [r3, ip, lsl #2]
   354a0:	60c1      	str	r1, [r0, #12]
   354a2:	bd38      	pop	{r3, r4, r5, pc}
   354a4:	2000      	movs	r0, #0
   354a6:	bd38      	pop	{r3, r4, r5, pc}
   354a8:	2100      	movs	r1, #0
   354aa:	e7e6      	b.n	3547a <d_template_param+0x2a>

000354ac <d_append_num>:
   354ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   354b0:	b088      	sub	sp, #32
   354b2:	460a      	mov	r2, r1
   354b4:	4604      	mov	r4, r0
   354b6:	491a      	ldr	r1, [pc, #104]	@ (35520 <d_append_num+0x74>)
   354b8:	a801      	add	r0, sp, #4
   354ba:	f006 f9b1 	bl	3b820 <sprintf>
   354be:	a801      	add	r0, sp, #4
   354c0:	f7e3 f8fe 	bl	186c0 <strlen>
   354c4:	b340      	cbz	r0, 35518 <d_append_num+0x6c>
   354c6:	ad01      	add	r5, sp, #4
   354c8:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   354cc:	182f      	adds	r7, r5, r0
   354ce:	f04f 0800 	mov.w	r8, #0
   354d2:	e009      	b.n	354e8 <d_append_num+0x3c>
   354d4:	460b      	mov	r3, r1
   354d6:	42bd      	cmp	r5, r7
   354d8:	f101 0101 	add.w	r1, r1, #1
   354dc:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   354e0:	54e6      	strb	r6, [r4, r3]
   354e2:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   354e6:	d017      	beq.n	35518 <d_append_num+0x6c>
   354e8:	29ff      	cmp	r1, #255	@ 0xff
   354ea:	f815 6b01 	ldrb.w	r6, [r5], #1
   354ee:	d1f1      	bne.n	354d4 <d_append_num+0x28>
   354f0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   354f4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   354f8:	4620      	mov	r0, r4
   354fa:	4798      	blx	r3
   354fc:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   35500:	2101      	movs	r1, #1
   35502:	2300      	movs	r3, #0
   35504:	440a      	add	r2, r1
   35506:	42bd      	cmp	r5, r7
   35508:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3550c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   35510:	54e6      	strb	r6, [r4, r3]
   35512:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   35516:	d1e7      	bne.n	354e8 <d_append_num+0x3c>
   35518:	b008      	add	sp, #32
   3551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3551e:	bf00      	nop
   35520:	0003ff64 	.word	0x0003ff64

00035524 <d_source_name>:
   35524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35528:	4604      	mov	r4, r0
   3552a:	f7ff fd47 	bl	34fbc <d_number>
   3552e:	1e05      	subs	r5, r0, #0
   35530:	dd44      	ble.n	355bc <d_source_name+0x98>
   35532:	68e6      	ldr	r6, [r4, #12]
   35534:	6863      	ldr	r3, [r4, #4]
   35536:	1b9b      	subs	r3, r3, r6
   35538:	429d      	cmp	r5, r3
   3553a:	dc3b      	bgt.n	355b4 <d_source_name+0x90>
   3553c:	68a2      	ldr	r2, [r4, #8]
   3553e:	1973      	adds	r3, r6, r5
   35540:	0752      	lsls	r2, r2, #29
   35542:	60e3      	str	r3, [r4, #12]
   35544:	d504      	bpl.n	35550 <d_source_name+0x2c>
   35546:	5d72      	ldrb	r2, [r6, r5]
   35548:	2a24      	cmp	r2, #36	@ 0x24
   3554a:	bf04      	itt	eq
   3554c:	3301      	addeq	r3, #1
   3554e:	60e3      	streq	r3, [r4, #12]
   35550:	2d09      	cmp	r5, #9
   35552:	e9d4 7805 	ldrd	r7, r8, [r4, #20]
   35556:	dd1f      	ble.n	35598 <d_source_name+0x74>
   35558:	4927      	ldr	r1, [pc, #156]	@ (355f8 <d_source_name+0xd4>)
   3555a:	2208      	movs	r2, #8
   3555c:	4630      	mov	r0, r6
   3555e:	f7f1 fa95 	bl	26a8c <memcmp>
   35562:	b930      	cbnz	r0, 35572 <d_source_name+0x4e>
   35564:	7a33      	ldrb	r3, [r6, #8]
   35566:	2b2e      	cmp	r3, #46	@ 0x2e
   35568:	d02b      	beq.n	355c2 <d_source_name+0x9e>
   3556a:	2b5f      	cmp	r3, #95	@ 0x5f
   3556c:	d029      	beq.n	355c2 <d_source_name+0x9e>
   3556e:	2b24      	cmp	r3, #36	@ 0x24
   35570:	d027      	beq.n	355c2 <d_source_name+0x9e>
   35572:	4547      	cmp	r7, r8
   35574:	da1e      	bge.n	355b4 <d_source_name+0x90>
   35576:	6920      	ldr	r0, [r4, #16]
   35578:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   3557c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   35580:	3701      	adds	r7, #1
   35582:	2300      	movs	r3, #0
   35584:	e9c0 3301 	strd	r3, r3, [r0, #4]
   35588:	6167      	str	r7, [r4, #20]
   3558a:	2300      	movs	r3, #0
   3558c:	e9c0 3301 	strd	r3, r3, [r0, #4]
   35590:	e9c0 6503 	strd	r6, r5, [r0, #12]
   35594:	7003      	strb	r3, [r0, #0]
   35596:	e00e      	b.n	355b6 <d_source_name+0x92>
   35598:	4547      	cmp	r7, r8
   3559a:	da0b      	bge.n	355b4 <d_source_name+0x90>
   3559c:	6920      	ldr	r0, [r4, #16]
   3559e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   355a2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   355a6:	3701      	adds	r7, #1
   355a8:	2300      	movs	r3, #0
   355aa:	e9c0 3301 	strd	r3, r3, [r0, #4]
   355ae:	6167      	str	r7, [r4, #20]
   355b0:	2e00      	cmp	r6, #0
   355b2:	d1ea      	bne.n	3558a <d_source_name+0x66>
   355b4:	2000      	movs	r0, #0
   355b6:	62a0      	str	r0, [r4, #40]	@ 0x28
   355b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   355bc:	2000      	movs	r0, #0
   355be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   355c2:	7a73      	ldrb	r3, [r6, #9]
   355c4:	2b4e      	cmp	r3, #78	@ 0x4e
   355c6:	d1d4      	bne.n	35572 <d_source_name+0x4e>
   355c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   355ca:	3316      	adds	r3, #22
   355cc:	1b5b      	subs	r3, r3, r5
   355ce:	4547      	cmp	r7, r8
   355d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
   355d2:	daef      	bge.n	355b4 <d_source_name+0x90>
   355d4:	6921      	ldr	r1, [r4, #16]
   355d6:	4a09      	ldr	r2, [pc, #36]	@ (355fc <d_source_name+0xd8>)
   355d8:	eb07 0087 	add.w	r0, r7, r7, lsl #2
   355dc:	0085      	lsls	r5, r0, #2
   355de:	2300      	movs	r3, #0
   355e0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   355e4:	3701      	adds	r7, #1
   355e6:	6167      	str	r7, [r4, #20]
   355e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
   355ec:	554b      	strb	r3, [r1, r5]
   355ee:	2315      	movs	r3, #21
   355f0:	e9c0 2303 	strd	r2, r3, [r0, #12]
   355f4:	e7df      	b.n	355b6 <d_source_name+0x92>
   355f6:	bf00      	nop
   355f8:	0003ff68 	.word	0x0003ff68
   355fc:	0003ff74 	.word	0x0003ff74

00035600 <d_substitution>:
   35600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35604:	68c3      	ldr	r3, [r0, #12]
   35606:	781a      	ldrb	r2, [r3, #0]
   35608:	2a53      	cmp	r2, #83	@ 0x53
   3560a:	d126      	bne.n	3565a <d_substitution+0x5a>
   3560c:	1c5a      	adds	r2, r3, #1
   3560e:	60c2      	str	r2, [r0, #12]
   35610:	4604      	mov	r4, r0
   35612:	7858      	ldrb	r0, [r3, #1]
   35614:	b348      	cbz	r0, 3566a <d_substitution+0x6a>
   35616:	1c9a      	adds	r2, r3, #2
   35618:	60e2      	str	r2, [r4, #12]
   3561a:	7858      	ldrb	r0, [r3, #1]
   3561c:	285f      	cmp	r0, #95	@ 0x5f
   3561e:	d046      	beq.n	356ae <d_substitution+0xae>
   35620:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
   35624:	b2da      	uxtb	r2, r3
   35626:	2a09      	cmp	r2, #9
   35628:	d81b      	bhi.n	35662 <d_substitution+0x62>
   3562a:	2200      	movs	r2, #0
   3562c:	e005      	b.n	3563a <d_substitution+0x3a>
   3562e:	60e5      	str	r5, [r4, #12]
   35630:	7808      	ldrb	r0, [r1, #0]
   35632:	285f      	cmp	r0, #95	@ 0x5f
   35634:	d031      	beq.n	3569a <d_substitution+0x9a>
   35636:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
   3563a:	b2d9      	uxtb	r1, r3
   3563c:	2909      	cmp	r1, #9
   3563e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
   35642:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   35646:	d81e      	bhi.n	35686 <d_substitution+0x86>
   35648:	3b30      	subs	r3, #48	@ 0x30
   3564a:	429a      	cmp	r2, r3
   3564c:	d805      	bhi.n	3565a <d_substitution+0x5a>
   3564e:	68e1      	ldr	r1, [r4, #12]
   35650:	7808      	ldrb	r0, [r1, #0]
   35652:	461a      	mov	r2, r3
   35654:	1c4d      	adds	r5, r1, #1
   35656:	2800      	cmp	r0, #0
   35658:	d1e9      	bne.n	3562e <d_substitution+0x2e>
   3565a:	2500      	movs	r5, #0
   3565c:	4628      	mov	r0, r5
   3565e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35662:	f1a0 0241 	sub.w	r2, r0, #65	@ 0x41
   35666:	2a19      	cmp	r2, #25
   35668:	d9df      	bls.n	3562a <d_substitution+0x2a>
   3566a:	68a3      	ldr	r3, [r4, #8]
   3566c:	071b      	lsls	r3, r3, #28
   3566e:	d420      	bmi.n	356b2 <d_substitution+0xb2>
   35670:	bb09      	cbnz	r1, 356b6 <d_substitution+0xb6>
   35672:	4b43      	ldr	r3, [pc, #268]	@ (35780 <d_substitution+0x180>)
   35674:	f103 05c4 	add.w	r5, r3, #196	@ 0xc4
   35678:	781a      	ldrb	r2, [r3, #0]
   3567a:	4282      	cmp	r2, r0
   3567c:	d023      	beq.n	356c6 <d_substitution+0xc6>
   3567e:	331c      	adds	r3, #28
   35680:	42ab      	cmp	r3, r5
   35682:	d1f9      	bne.n	35678 <d_substitution+0x78>
   35684:	e7e9      	b.n	3565a <d_substitution+0x5a>
   35686:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
   3568a:	2b19      	cmp	r3, #25
   3568c:	d8e5      	bhi.n	3565a <d_substitution+0x5a>
   3568e:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
   35692:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   35696:	3b37      	subs	r3, #55	@ 0x37
   35698:	e7d7      	b.n	3564a <d_substitution+0x4a>
   3569a:	3301      	adds	r3, #1
   3569c:	6a22      	ldr	r2, [r4, #32]
   3569e:	429a      	cmp	r2, r3
   356a0:	d9db      	bls.n	3565a <d_substitution+0x5a>
   356a2:	69e2      	ldr	r2, [r4, #28]
   356a4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   356a8:	4628      	mov	r0, r5
   356aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   356ae:	2300      	movs	r3, #0
   356b0:	e7f4      	b.n	3569c <d_substitution+0x9c>
   356b2:	2101      	movs	r1, #1
   356b4:	e7dd      	b.n	35672 <d_substitution+0x72>
   356b6:	68e3      	ldr	r3, [r4, #12]
   356b8:	7819      	ldrb	r1, [r3, #0]
   356ba:	3943      	subs	r1, #67	@ 0x43
   356bc:	2901      	cmp	r1, #1
   356be:	bf8c      	ite	hi
   356c0:	2100      	movhi	r1, #0
   356c2:	2101      	movls	r1, #1
   356c4:	e7d5      	b.n	35672 <d_substitution+0x72>
   356c6:	695e      	ldr	r6, [r3, #20]
   356c8:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   356cc:	b1ae      	cbz	r6, 356fa <d_substitution+0xfa>
   356ce:	4282      	cmp	r2, r0
   356d0:	f8d3 8018 	ldr.w	r8, [r3, #24]
   356d4:	da52      	bge.n	3577c <d_substitution+0x17c>
   356d6:	6927      	ldr	r7, [r4, #16]
   356d8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   356dc:	eb07 058c 	add.w	r5, r7, ip, lsl #2
   356e0:	f04f 0e00 	mov.w	lr, #0
   356e4:	e9c5 ee01 	strd	lr, lr, [r5, #4]
   356e8:	3201      	adds	r2, #1
   356ea:	f04f 0e18 	mov.w	lr, #24
   356ee:	6162      	str	r2, [r4, #20]
   356f0:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
   356f4:	e9c5 6803 	strd	r6, r8, [r5, #12]
   356f8:	62a5      	str	r5, [r4, #40]	@ 0x28
   356fa:	2900      	cmp	r1, #0
   356fc:	d039      	beq.n	35772 <d_substitution+0x172>
   356fe:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
   35702:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35704:	4282      	cmp	r2, r0
   35706:	440b      	add	r3, r1
   35708:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3570a:	da35      	bge.n	35778 <d_substitution+0x178>
   3570c:	6923      	ldr	r3, [r4, #16]
   3570e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   35712:	eb03 0580 	add.w	r5, r3, r0, lsl #2
   35716:	3201      	adds	r2, #1
   35718:	2600      	movs	r6, #0
   3571a:	e9c5 6601 	strd	r6, r6, [r5, #4]
   3571e:	6162      	str	r2, [r4, #20]
   35720:	2218      	movs	r2, #24
   35722:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
   35726:	e9c5 7103 	strd	r7, r1, [r5, #12]
   3572a:	68e3      	ldr	r3, [r4, #12]
   3572c:	781a      	ldrb	r2, [r3, #0]
   3572e:	2a42      	cmp	r2, #66	@ 0x42
   35730:	d194      	bne.n	3565c <d_substitution+0x5c>
   35732:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
   35734:	3301      	adds	r3, #1
   35736:	60e3      	str	r3, [r4, #12]
   35738:	4620      	mov	r0, r4
   3573a:	f7ff fef3 	bl	35524 <d_source_name>
   3573e:	462a      	mov	r2, r5
   35740:	4603      	mov	r3, r0
   35742:	214d      	movs	r1, #77	@ 0x4d
   35744:	4620      	mov	r0, r4
   35746:	f7ff fbbd 	bl	34ec4 <d_make_comp>
   3574a:	68e3      	ldr	r3, [r4, #12]
   3574c:	781a      	ldrb	r2, [r3, #0]
   3574e:	2a42      	cmp	r2, #66	@ 0x42
   35750:	4605      	mov	r5, r0
   35752:	d0ef      	beq.n	35734 <d_substitution+0x134>
   35754:	62a6      	str	r6, [r4, #40]	@ 0x28
   35756:	2800      	cmp	r0, #0
   35758:	f43f af7f 	beq.w	3565a <d_substitution+0x5a>
   3575c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   35760:	4293      	cmp	r3, r2
   35762:	f6bf af7a 	bge.w	3565a <d_substitution+0x5a>
   35766:	69e1      	ldr	r1, [r4, #28]
   35768:	1c5a      	adds	r2, r3, #1
   3576a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   3576e:	6222      	str	r2, [r4, #32]
   35770:	e774      	b.n	3565c <d_substitution+0x5c>
   35772:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
   35776:	e7c4      	b.n	35702 <d_substitution+0x102>
   35778:	2500      	movs	r5, #0
   3577a:	e7d6      	b.n	3572a <d_substitution+0x12a>
   3577c:	2500      	movs	r5, #0
   3577e:	e7bb      	b.n	356f8 <d_substitution+0xf8>
   35780:	00047ffc 	.word	0x00047ffc

00035784 <d_maybe_module_name>:
   35784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35786:	68c3      	ldr	r3, [r0, #12]
   35788:	781a      	ldrb	r2, [r3, #0]
   3578a:	2a57      	cmp	r2, #87	@ 0x57
   3578c:	d128      	bne.n	357e0 <d_maybe_module_name+0x5c>
   3578e:	4604      	mov	r4, r0
   35790:	460e      	mov	r6, r1
   35792:	e007      	b.n	357a4 <d_maybe_module_name+0x20>
   35794:	69e5      	ldr	r5, [r4, #28]
   35796:	68e3      	ldr	r3, [r4, #12]
   35798:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
   3579c:	6221      	str	r1, [r4, #32]
   3579e:	781a      	ldrb	r2, [r3, #0]
   357a0:	2a57      	cmp	r2, #87	@ 0x57
   357a2:	d11d      	bne.n	357e0 <d_maybe_module_name+0x5c>
   357a4:	1c5a      	adds	r2, r3, #1
   357a6:	60e2      	str	r2, [r4, #12]
   357a8:	785a      	ldrb	r2, [r3, #1]
   357aa:	2a50      	cmp	r2, #80	@ 0x50
   357ac:	f04f 0553 	mov.w	r5, #83	@ 0x53
   357b0:	d102      	bne.n	357b8 <d_maybe_module_name+0x34>
   357b2:	3302      	adds	r3, #2
   357b4:	60e3      	str	r3, [r4, #12]
   357b6:	2554      	movs	r5, #84	@ 0x54
   357b8:	4620      	mov	r0, r4
   357ba:	6837      	ldr	r7, [r6, #0]
   357bc:	f7ff feb2 	bl	35524 <d_source_name>
   357c0:	463a      	mov	r2, r7
   357c2:	4603      	mov	r3, r0
   357c4:	4629      	mov	r1, r5
   357c6:	4620      	mov	r0, r4
   357c8:	f7ff fb7c 	bl	34ec4 <d_make_comp>
   357cc:	6030      	str	r0, [r6, #0]
   357ce:	b130      	cbz	r0, 357de <d_maybe_module_name+0x5a>
   357d0:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   357d4:	429a      	cmp	r2, r3
   357d6:	f102 0101 	add.w	r1, r2, #1
   357da:	dbdb      	blt.n	35794 <d_maybe_module_name+0x10>
   357dc:	2000      	movs	r0, #0
   357de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   357e0:	2001      	movs	r0, #1
   357e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000357e4 <d_type>:
   357e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   357e8:	68c1      	ldr	r1, [r0, #12]
   357ea:	b085      	sub	sp, #20
   357ec:	4604      	mov	r4, r0
   357ee:	4608      	mov	r0, r1
   357f0:	f7ff fd56 	bl	352a0 <next_is_type_qual.isra.0>
   357f4:	b9f0      	cbnz	r0, 35834 <d_type+0x50>
   357f6:	780b      	ldrb	r3, [r1, #0]
   357f8:	2b55      	cmp	r3, #85	@ 0x55
   357fa:	d84d      	bhi.n	35898 <d_type+0xb4>
   357fc:	2b40      	cmp	r3, #64	@ 0x40
   357fe:	d978      	bls.n	358f2 <d_type+0x10e>
   35800:	3b41      	subs	r3, #65	@ 0x41
   35802:	2b14      	cmp	r3, #20
   35804:	d875      	bhi.n	358f2 <d_type+0x10e>
   35806:	e8df f013 	tbh	[pc, r3, lsl #1]
   3580a:	014b      	.short	0x014b
   3580c:	01370074 	.word	0x01370074
   35810:	007400f7 	.word	0x007400f7
   35814:	00a50145 	.word	0x00a50145
   35818:	00740074 	.word	0x00740074
   3581c:	00740074 	.word	0x00740074
   35820:	018a0074 	.word	0x018a0074
   35824:	00970074 	.word	0x00970074
   35828:	00740089 	.word	0x00740089
   3582c:	0074007b 	.word	0x0074007b
   35830:	00b300cb 	.word	0x00b300cb
   35834:	2200      	movs	r2, #0
   35836:	4669      	mov	r1, sp
   35838:	4620      	mov	r0, r4
   3583a:	f001 f9c9 	bl	36bd0 <d_cv_qualifiers>
   3583e:	4605      	mov	r5, r0
   35840:	2800      	cmp	r0, #0
   35842:	f000 819c 	beq.w	35b7e <d_type+0x39a>
   35846:	68e3      	ldr	r3, [r4, #12]
   35848:	781b      	ldrb	r3, [r3, #0]
   3584a:	2b46      	cmp	r3, #70	@ 0x46
   3584c:	4620      	mov	r0, r4
   3584e:	d020      	beq.n	35892 <d_type+0xae>
   35850:	f7ff ffc8 	bl	357e4 <d_type>
   35854:	6028      	str	r0, [r5, #0]
   35856:	2800      	cmp	r0, #0
   35858:	f000 8191 	beq.w	35b7e <d_type+0x39a>
   3585c:	7803      	ldrb	r3, [r0, #0]
   3585e:	3b1f      	subs	r3, #31
   35860:	2b01      	cmp	r3, #1
   35862:	d805      	bhi.n	35870 <d_type+0x8c>
   35864:	9a00      	ldr	r2, [sp, #0]
   35866:	68c3      	ldr	r3, [r0, #12]
   35868:	60c2      	str	r2, [r0, #12]
   3586a:	682a      	ldr	r2, [r5, #0]
   3586c:	9200      	str	r2, [sp, #0]
   3586e:	602b      	str	r3, [r5, #0]
   35870:	9800      	ldr	r0, [sp, #0]
   35872:	2800      	cmp	r0, #0
   35874:	f000 8183 	beq.w	35b7e <d_type+0x39a>
   35878:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   3587c:	4293      	cmp	r3, r2
   3587e:	f280 817e 	bge.w	35b7e <d_type+0x39a>
   35882:	69e1      	ldr	r1, [r4, #28]
   35884:	1c5a      	adds	r2, r3, #1
   35886:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   3588a:	6222      	str	r2, [r4, #32]
   3588c:	b005      	add	sp, #20
   3588e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35892:	f000 fbf1 	bl	36078 <d_function_type>
   35896:	e7dd      	b.n	35854 <d_type+0x70>
   35898:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
   3589c:	4605      	mov	r5, r0
   3589e:	b2d0      	uxtb	r0, r2
   358a0:	2819      	cmp	r0, #25
   358a2:	d826      	bhi.n	358f2 <d_type+0x10e>
   358a4:	4ea8      	ldr	r6, [pc, #672]	@ (35b48 <d_type+0x364>)
   358a6:	2301      	movs	r3, #1
   358a8:	4083      	lsls	r3, r0
   358aa:	401e      	ands	r6, r3
   358ac:	2e00      	cmp	r6, #0
   358ae:	f040 82c9 	bne.w	35e44 <d_type+0x660>
   358b2:	2814      	cmp	r0, #20
   358b4:	d11d      	bne.n	358f2 <d_type+0x10e>
   358b6:	3101      	adds	r1, #1
   358b8:	60e1      	str	r1, [r4, #12]
   358ba:	4620      	mov	r0, r4
   358bc:	f7ff fe32 	bl	35524 <d_source_name>
   358c0:	4633      	mov	r3, r6
   358c2:	4602      	mov	r2, r0
   358c4:	2128      	movs	r1, #40	@ 0x28
   358c6:	4620      	mov	r0, r4
   358c8:	f7ff fafc 	bl	34ec4 <d_make_comp>
   358cc:	4605      	mov	r5, r0
   358ce:	9000      	str	r0, [sp, #0]
   358d0:	2d00      	cmp	r5, #0
   358d2:	f000 8154 	beq.w	35b7e <d_type+0x39a>
   358d6:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   358da:	4293      	cmp	r3, r2
   358dc:	f280 814f 	bge.w	35b7e <d_type+0x39a>
   358e0:	69e1      	ldr	r1, [r4, #28]
   358e2:	9800      	ldr	r0, [sp, #0]
   358e4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   358e8:	1c5a      	adds	r2, r3, #1
   358ea:	6222      	str	r2, [r4, #32]
   358ec:	b005      	add	sp, #20
   358ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   358f2:	2101      	movs	r1, #1
   358f4:	4620      	mov	r0, r4
   358f6:	b005      	add	sp, #20
   358f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   358fc:	f001 ba12 	b.w	36d24 <d_name>
   35900:	3101      	adds	r1, #1
   35902:	60e1      	str	r1, [r4, #12]
   35904:	4620      	mov	r0, r4
   35906:	f7ff ff6d 	bl	357e4 <d_type>
   3590a:	2300      	movs	r3, #0
   3590c:	4602      	mov	r2, r0
   3590e:	2123      	movs	r1, #35	@ 0x23
   35910:	4620      	mov	r0, r4
   35912:	f7ff fad7 	bl	34ec4 <d_make_comp>
   35916:	4605      	mov	r5, r0
   35918:	9000      	str	r0, [sp, #0]
   3591a:	e7d9      	b.n	358d0 <d_type+0xec>
   3591c:	3101      	adds	r1, #1
   3591e:	60e1      	str	r1, [r4, #12]
   35920:	4620      	mov	r0, r4
   35922:	f7ff ff5f 	bl	357e4 <d_type>
   35926:	2300      	movs	r3, #0
   35928:	4602      	mov	r2, r0
   3592a:	2122      	movs	r1, #34	@ 0x22
   3592c:	4620      	mov	r0, r4
   3592e:	f7ff fac9 	bl	34ec4 <d_make_comp>
   35932:	4605      	mov	r5, r0
   35934:	9000      	str	r0, [sp, #0]
   35936:	e7cb      	b.n	358d0 <d_type+0xec>
   35938:	3101      	adds	r1, #1
   3593a:	60e1      	str	r1, [r4, #12]
   3593c:	4620      	mov	r0, r4
   3593e:	f7ff ff51 	bl	357e4 <d_type>
   35942:	2300      	movs	r3, #0
   35944:	4602      	mov	r2, r0
   35946:	2124      	movs	r1, #36	@ 0x24
   35948:	4620      	mov	r0, r4
   3594a:	f7ff fabb 	bl	34ec4 <d_make_comp>
   3594e:	4605      	mov	r5, r0
   35950:	9000      	str	r0, [sp, #0]
   35952:	e7bd      	b.n	358d0 <d_type+0xec>
   35954:	3101      	adds	r1, #1
   35956:	60e1      	str	r1, [r4, #12]
   35958:	4620      	mov	r0, r4
   3595a:	f7ff ff43 	bl	357e4 <d_type>
   3595e:	2300      	movs	r3, #0
   35960:	4602      	mov	r2, r0
   35962:	2126      	movs	r1, #38	@ 0x26
   35964:	4620      	mov	r0, r4
   35966:	f7ff faad 	bl	34ec4 <d_make_comp>
   3596a:	4605      	mov	r5, r0
   3596c:	9000      	str	r0, [sp, #0]
   3596e:	e7af      	b.n	358d0 <d_type+0xec>
   35970:	3101      	adds	r1, #1
   35972:	60e1      	str	r1, [r4, #12]
   35974:	4620      	mov	r0, r4
   35976:	f7ff fdd5 	bl	35524 <d_source_name>
   3597a:	68e3      	ldr	r3, [r4, #12]
   3597c:	9000      	str	r0, [sp, #0]
   3597e:	781a      	ldrb	r2, [r3, #0]
   35980:	2a49      	cmp	r2, #73	@ 0x49
   35982:	4605      	mov	r5, r0
   35984:	f000 827e 	beq.w	35e84 <d_type+0x6a0>
   35988:	4620      	mov	r0, r4
   3598a:	f7ff ff2b 	bl	357e4 <d_type>
   3598e:	462b      	mov	r3, r5
   35990:	4602      	mov	r2, r0
   35992:	2121      	movs	r1, #33	@ 0x21
   35994:	4620      	mov	r0, r4
   35996:	f7ff fa95 	bl	34ec4 <d_make_comp>
   3599a:	4605      	mov	r5, r0
   3599c:	9000      	str	r0, [sp, #0]
   3599e:	e797      	b.n	358d0 <d_type+0xec>
   359a0:	4620      	mov	r0, r4
   359a2:	f7ff fd55 	bl	35450 <d_template_param>
   359a6:	68e6      	ldr	r6, [r4, #12]
   359a8:	9000      	str	r0, [sp, #0]
   359aa:	7833      	ldrb	r3, [r6, #0]
   359ac:	2b49      	cmp	r3, #73	@ 0x49
   359ae:	4605      	mov	r5, r0
   359b0:	d18e      	bne.n	358d0 <d_type+0xec>
   359b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
   359b4:	2b00      	cmp	r3, #0
   359b6:	f040 829b 	bne.w	35ef0 <d_type+0x70c>
   359ba:	2800      	cmp	r0, #0
   359bc:	f000 80df 	beq.w	35b7e <d_type+0x39a>
   359c0:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   359c4:	428a      	cmp	r2, r1
   359c6:	f280 80da 	bge.w	35b7e <d_type+0x39a>
   359ca:	69e1      	ldr	r1, [r4, #28]
   359cc:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   359d0:	3201      	adds	r2, #1
   359d2:	6222      	str	r2, [r4, #32]
   359d4:	7832      	ldrb	r2, [r6, #0]
   359d6:	3a49      	subs	r2, #73	@ 0x49
   359d8:	2a01      	cmp	r2, #1
   359da:	d805      	bhi.n	359e8 <d_type+0x204>
   359dc:	3601      	adds	r6, #1
   359de:	60e6      	str	r6, [r4, #12]
   359e0:	4620      	mov	r0, r4
   359e2:	f001 fea7 	bl	37734 <d_template_args_1>
   359e6:	4603      	mov	r3, r0
   359e8:	462a      	mov	r2, r5
   359ea:	2104      	movs	r1, #4
   359ec:	4620      	mov	r0, r4
   359ee:	f7ff fa69 	bl	34ec4 <d_make_comp>
   359f2:	4605      	mov	r5, r0
   359f4:	9000      	str	r0, [sp, #0]
   359f6:	e76b      	b.n	358d0 <d_type+0xec>
   359f8:	1c4b      	adds	r3, r1, #1
   359fa:	60e3      	str	r3, [r4, #12]
   359fc:	784b      	ldrb	r3, [r1, #1]
   359fe:	2b00      	cmp	r3, #0
   35a00:	f000 80bd 	beq.w	35b7e <d_type+0x39a>
   35a04:	1c8b      	adds	r3, r1, #2
   35a06:	60e3      	str	r3, [r4, #12]
   35a08:	784b      	ldrb	r3, [r1, #1]
   35a0a:	3b46      	subs	r3, #70	@ 0x46
   35a0c:	2b30      	cmp	r3, #48	@ 0x30
   35a0e:	f200 80b6 	bhi.w	35b7e <d_type+0x39a>
   35a12:	e8df f013 	tbh	[pc, r3, lsl #1]
   35a16:	00b6      	.short	0x00b6
   35a18:	00b400b4 	.word	0x00b400b4
   35a1c:	00b400b4 	.word	0x00b400b4
   35a20:	00b400b4 	.word	0x00b400b4
   35a24:	00b400b4 	.word	0x00b400b4
   35a28:	00b400b4 	.word	0x00b400b4
   35a2c:	00b400b4 	.word	0x00b400b4
   35a30:	009b00b4 	.word	0x009b00b4
   35a34:	00b400b4 	.word	0x00b400b4
   35a38:	00b400b4 	.word	0x00b400b4
   35a3c:	00b400b4 	.word	0x00b400b4
   35a40:	00b400b4 	.word	0x00b400b4
   35a44:	00b400b4 	.word	0x00b400b4
   35a48:	00b400b4 	.word	0x00b400b4
   35a4c:	00b401c5 	.word	0x00b401c5
   35a50:	01ad00f5 	.word	0x01ad00f5
   35a54:	017d0195 	.word	0x017d0195
   35a58:	016500b4 	.word	0x016500b4
   35a5c:	00b401f3 	.word	0x00b401f3
   35a60:	00b400b4 	.word	0x00b400b4
   35a64:	01db00b4 	.word	0x01db00b4
   35a68:	020b00b4 	.word	0x020b00b4
   35a6c:	00b400b4 	.word	0x00b400b4
   35a70:	009b014d 	.word	0x009b014d
   35a74:	010a0135 	.word	0x010a0135
   35a78:	3101      	adds	r1, #1
   35a7a:	60e1      	str	r1, [r4, #12]
   35a7c:	4620      	mov	r0, r4
   35a7e:	f7ff feb1 	bl	357e4 <d_type>
   35a82:	2300      	movs	r3, #0
   35a84:	4602      	mov	r2, r0
   35a86:	2125      	movs	r1, #37	@ 0x25
   35a88:	4620      	mov	r0, r4
   35a8a:	f7ff fa1b 	bl	34ec4 <d_make_comp>
   35a8e:	4605      	mov	r5, r0
   35a90:	9000      	str	r0, [sp, #0]
   35a92:	e71d      	b.n	358d0 <d_type+0xec>
   35a94:	4620      	mov	r0, r4
   35a96:	f000 faef 	bl	36078 <d_function_type>
   35a9a:	4605      	mov	r5, r0
   35a9c:	9000      	str	r0, [sp, #0]
   35a9e:	e717      	b.n	358d0 <d_type+0xec>
   35aa0:	1c48      	adds	r0, r1, #1
   35aa2:	60e0      	str	r0, [r4, #12]
   35aa4:	784a      	ldrb	r2, [r1, #1]
   35aa6:	2a5f      	cmp	r2, #95	@ 0x5f
   35aa8:	f000 81ea 	beq.w	35e80 <d_type+0x69c>
   35aac:	3a30      	subs	r2, #48	@ 0x30
   35aae:	2a09      	cmp	r2, #9
   35ab0:	f200 81f5 	bhi.w	35e9e <d_type+0x6ba>
   35ab4:	4603      	mov	r3, r0
   35ab6:	461d      	mov	r5, r3
   35ab8:	3301      	adds	r3, #1
   35aba:	60e3      	str	r3, [r4, #12]
   35abc:	781a      	ldrb	r2, [r3, #0]
   35abe:	3a30      	subs	r2, #48	@ 0x30
   35ac0:	2a09      	cmp	r2, #9
   35ac2:	d9f8      	bls.n	35ab6 <d_type+0x2d2>
   35ac4:	eba5 0e01 	sub.w	lr, r5, r1
   35ac8:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
   35acc:	428a      	cmp	r2, r1
   35ace:	da56      	bge.n	35b7e <d_type+0x39a>
   35ad0:	f8d4 8010 	ldr.w	r8, [r4, #16]
   35ad4:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   35ad8:	2100      	movs	r1, #0
   35ada:	eb08 078c 	add.w	r7, r8, ip, lsl #2
   35ade:	3201      	adds	r2, #1
   35ae0:	458e      	cmp	lr, r1
   35ae2:	e9c7 1101 	strd	r1, r1, [r7, #4]
   35ae6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   35aea:	6162      	str	r2, [r4, #20]
   35aec:	dd47      	ble.n	35b7e <d_type+0x39a>
   35aee:	e9c7 1101 	strd	r1, r1, [r7, #4]
   35af2:	f808 100c 	strb.w	r1, [r8, ip]
   35af6:	e9c7 0e03 	strd	r0, lr, [r7, #12]
   35afa:	786a      	ldrb	r2, [r5, #1]
   35afc:	4618      	mov	r0, r3
   35afe:	2a5f      	cmp	r2, #95	@ 0x5f
   35b00:	d13d      	bne.n	35b7e <d_type+0x39a>
   35b02:	3001      	adds	r0, #1
   35b04:	60e0      	str	r0, [r4, #12]
   35b06:	4620      	mov	r0, r4
   35b08:	f7ff fe6c 	bl	357e4 <d_type>
   35b0c:	463a      	mov	r2, r7
   35b0e:	4603      	mov	r3, r0
   35b10:	212a      	movs	r1, #42	@ 0x2a
   35b12:	4620      	mov	r0, r4
   35b14:	f7ff f9d6 	bl	34ec4 <d_make_comp>
   35b18:	4605      	mov	r5, r0
   35b1a:	9000      	str	r0, [sp, #0]
   35b1c:	e6d8      	b.n	358d0 <d_type+0xec>
   35b1e:	3101      	adds	r1, #1
   35b20:	60e1      	str	r1, [r4, #12]
   35b22:	4620      	mov	r0, r4
   35b24:	f7ff fe5e 	bl	357e4 <d_type>
   35b28:	4605      	mov	r5, r0
   35b2a:	b340      	cbz	r0, 35b7e <d_type+0x39a>
   35b2c:	4620      	mov	r0, r4
   35b2e:	f7ff fe59 	bl	357e4 <d_type>
   35b32:	4603      	mov	r3, r0
   35b34:	b318      	cbz	r0, 35b7e <d_type+0x39a>
   35b36:	462a      	mov	r2, r5
   35b38:	212b      	movs	r1, #43	@ 0x2b
   35b3a:	4620      	mov	r0, r4
   35b3c:	f7ff f9c2 	bl	34ec4 <d_make_comp>
   35b40:	4605      	mov	r5, r0
   35b42:	9000      	str	r0, [sp, #0]
   35b44:	e6c4      	b.n	358d0 <d_type+0xec>
   35b46:	bf00      	nop
   35b48:	03ec7bff 	.word	0x03ec7bff
   35b4c:	2301      	movs	r3, #1
   35b4e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
   35b50:	6323      	str	r3, [r4, #48]	@ 0x30
   35b52:	4620      	mov	r0, r4
   35b54:	f000 fd8c 	bl	36670 <d_expression_1>
   35b58:	6325      	str	r5, [r4, #48]	@ 0x30
   35b5a:	4602      	mov	r2, r0
   35b5c:	2300      	movs	r3, #0
   35b5e:	2144      	movs	r1, #68	@ 0x44
   35b60:	4620      	mov	r0, r4
   35b62:	f7ff f9af 	bl	34ec4 <d_make_comp>
   35b66:	4605      	mov	r5, r0
   35b68:	9000      	str	r0, [sp, #0]
   35b6a:	b140      	cbz	r0, 35b7e <d_type+0x39a>
   35b6c:	68e3      	ldr	r3, [r4, #12]
   35b6e:	781a      	ldrb	r2, [r3, #0]
   35b70:	b12a      	cbz	r2, 35b7e <d_type+0x39a>
   35b72:	1c5a      	adds	r2, r3, #1
   35b74:	60e2      	str	r2, [r4, #12]
   35b76:	781b      	ldrb	r3, [r3, #0]
   35b78:	2b45      	cmp	r3, #69	@ 0x45
   35b7a:	f43f aeac 	beq.w	358d6 <d_type+0xf2>
   35b7e:	2000      	movs	r0, #0
   35b80:	e684      	b.n	3588c <d_type+0xa8>
   35b82:	4620      	mov	r0, r4
   35b84:	f7ff fa1a 	bl	34fbc <d_number>
   35b88:	68e3      	ldr	r3, [r4, #12]
   35b8a:	781d      	ldrb	r5, [r3, #0]
   35b8c:	2d62      	cmp	r5, #98	@ 0x62
   35b8e:	4602      	mov	r2, r0
   35b90:	f000 81d2 	beq.w	35f38 <d_type+0x754>
   35b94:	2d78      	cmp	r5, #120	@ 0x78
   35b96:	d002      	beq.n	35b9e <d_type+0x3ba>
   35b98:	2d5f      	cmp	r5, #95	@ 0x5f
   35b9a:	d1f0      	bne.n	35b7e <d_type+0x39a>
   35b9c:	2500      	movs	r5, #0
   35b9e:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
   35ba2:	4281      	cmp	r1, r0
   35ba4:	fa0f fe82 	sxth.w	lr, r2
   35ba8:	f103 0301 	add.w	r3, r3, #1
   35bac:	f280 81ed 	bge.w	35f8a <d_type+0x7a6>
   35bb0:	6927      	ldr	r7, [r4, #16]
   35bb2:	2014      	movs	r0, #20
   35bb4:	fb01 f000 	mul.w	r0, r1, r0
   35bb8:	183e      	adds	r6, r7, r0
   35bba:	3101      	adds	r1, #1
   35bbc:	f04f 0c00 	mov.w	ip, #0
   35bc0:	e9c6 cc01 	strd	ip, ip, [r6, #4]
   35bc4:	6161      	str	r1, [r4, #20]
   35bc6:	f04f 0c5c 	mov.w	ip, #92	@ 0x5c
   35bca:	49bc      	ldr	r1, [pc, #752]	@ (35ebc <d_type+0x6d8>)
   35bcc:	f807 c000 	strb.w	ip, [r7, r0]
   35bd0:	60f1      	str	r1, [r6, #12]
   35bd2:	f8a6 e010 	strh.w	lr, [r6, #16]
   35bd6:	49ba      	ldr	r1, [pc, #744]	@ (35ec0 <d_type+0x6dc>)
   35bd8:	74b5      	strb	r5, [r6, #18]
   35bda:	a801      	add	r0, sp, #4
   35bdc:	60e3      	str	r3, [r4, #12]
   35bde:	9600      	str	r6, [sp, #0]
   35be0:	f005 fe1e 	bl	3b820 <sprintf>
   35be4:	a801      	add	r0, sp, #4
   35be6:	f7e2 fd6b 	bl	186c0 <strlen>
   35bea:	68f3      	ldr	r3, [r6, #12]
   35bec:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   35bee:	685b      	ldr	r3, [r3, #4]
   35bf0:	4413      	add	r3, r2
   35bf2:	2d00      	cmp	r5, #0
   35bf4:	bf18      	it	ne
   35bf6:	3301      	addne	r3, #1
   35bf8:	4403      	add	r3, r0
   35bfa:	9800      	ldr	r0, [sp, #0]
   35bfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
   35bfe:	e645      	b.n	3588c <d_type+0xa8>
   35c00:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35c04:	4293      	cmp	r3, r2
   35c06:	daba      	bge.n	35b7e <d_type+0x39a>
   35c08:	6922      	ldr	r2, [r4, #16]
   35c0a:	49ae      	ldr	r1, [pc, #696]	@ (35ec4 <d_type+0x6e0>)
   35c0c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   35c10:	0085      	lsls	r5, r0, #2
   35c12:	3301      	adds	r3, #1
   35c14:	6163      	str	r3, [r4, #20]
   35c16:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   35c1a:	2300      	movs	r3, #0
   35c1c:	e9c0 3301 	strd	r3, r3, [r0, #4]
   35c20:	5553      	strb	r3, [r2, r5]
   35c22:	230e      	movs	r3, #14
   35c24:	e9c0 1303 	strd	r1, r3, [r0, #12]
   35c28:	e630      	b.n	3588c <d_type+0xa8>
   35c2a:	788b      	ldrb	r3, [r1, #2]
   35c2c:	2b5f      	cmp	r3, #95	@ 0x5f
   35c2e:	f000 819e 	beq.w	35f6e <d_type+0x78a>
   35c32:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35c36:	4293      	cmp	r3, r2
   35c38:	daa1      	bge.n	35b7e <d_type+0x39a>
   35c3a:	6922      	ldr	r2, [r4, #16]
   35c3c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   35c40:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   35c44:	3301      	adds	r3, #1
   35c46:	2000      	movs	r0, #0
   35c48:	e9c5 0001 	strd	r0, r0, [r5, #4]
   35c4c:	6163      	str	r3, [r4, #20]
   35c4e:	2343      	movs	r3, #67	@ 0x43
   35c50:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   35c54:	4620      	mov	r0, r4
   35c56:	f7ff f9b1 	bl	34fbc <d_number>
   35c5a:	60e8      	str	r0, [r5, #12]
   35c5c:	68e3      	ldr	r3, [r4, #12]
   35c5e:	781a      	ldrb	r2, [r3, #0]
   35c60:	2a5f      	cmp	r2, #95	@ 0x5f
   35c62:	d18c      	bne.n	35b7e <d_type+0x39a>
   35c64:	3301      	adds	r3, #1
   35c66:	60e3      	str	r3, [r4, #12]
   35c68:	4620      	mov	r0, r4
   35c6a:	f7ff fdbb 	bl	357e4 <d_type>
   35c6e:	462a      	mov	r2, r5
   35c70:	4603      	mov	r3, r0
   35c72:	212d      	movs	r1, #45	@ 0x2d
   35c74:	4620      	mov	r0, r4
   35c76:	f7ff f925 	bl	34ec4 <d_make_comp>
   35c7a:	4605      	mov	r5, r0
   35c7c:	9000      	str	r0, [sp, #0]
   35c7e:	e627      	b.n	358d0 <d_type+0xec>
   35c80:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35c84:	4293      	cmp	r3, r2
   35c86:	f280 8185 	bge.w	35f94 <d_type+0x7b0>
   35c8a:	6922      	ldr	r2, [r4, #16]
   35c8c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   35c90:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   35c94:	3301      	adds	r3, #1
   35c96:	2500      	movs	r5, #0
   35c98:	e9c0 5501 	strd	r5, r5, [r0, #4]
   35c9c:	6163      	str	r3, [r4, #20]
   35c9e:	2327      	movs	r3, #39	@ 0x27
   35ca0:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   35ca4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35ca6:	4a88      	ldr	r2, [pc, #544]	@ (35ec8 <d_type+0x6e4>)
   35ca8:	60c2      	str	r2, [r0, #12]
   35caa:	3307      	adds	r3, #7
   35cac:	62e3      	str	r3, [r4, #44]	@ 0x2c
   35cae:	e5ed      	b.n	3588c <d_type+0xa8>
   35cb0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35cb4:	4293      	cmp	r3, r2
   35cb6:	f280 816d 	bge.w	35f94 <d_type+0x7b0>
   35cba:	6922      	ldr	r2, [r4, #16]
   35cbc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   35cc0:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   35cc4:	3301      	adds	r3, #1
   35cc6:	2500      	movs	r5, #0
   35cc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
   35ccc:	6163      	str	r3, [r4, #20]
   35cce:	2327      	movs	r3, #39	@ 0x27
   35cd0:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   35cd4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35cd6:	4a7d      	ldr	r2, [pc, #500]	@ (35ecc <d_type+0x6e8>)
   35cd8:	60c2      	str	r2, [r0, #12]
   35cda:	3308      	adds	r3, #8
   35cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
   35cde:	e5d5      	b.n	3588c <d_type+0xa8>
   35ce0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35ce4:	4293      	cmp	r3, r2
   35ce6:	f280 8155 	bge.w	35f94 <d_type+0x7b0>
   35cea:	6922      	ldr	r2, [r4, #16]
   35cec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   35cf0:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   35cf4:	3301      	adds	r3, #1
   35cf6:	2500      	movs	r5, #0
   35cf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
   35cfc:	6163      	str	r3, [r4, #20]
   35cfe:	2327      	movs	r3, #39	@ 0x27
   35d00:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   35d04:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35d06:	4a72      	ldr	r2, [pc, #456]	@ (35ed0 <d_type+0x6ec>)
   35d08:	60c2      	str	r2, [r0, #12]
   35d0a:	3304      	adds	r3, #4
   35d0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   35d0e:	e5bd      	b.n	3588c <d_type+0xa8>
   35d10:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35d14:	4293      	cmp	r3, r2
   35d16:	f280 813d 	bge.w	35f94 <d_type+0x7b0>
   35d1a:	6922      	ldr	r2, [r4, #16]
   35d1c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   35d20:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   35d24:	3301      	adds	r3, #1
   35d26:	2500      	movs	r5, #0
   35d28:	e9c0 5501 	strd	r5, r5, [r0, #4]
   35d2c:	6163      	str	r3, [r4, #20]
   35d2e:	2327      	movs	r3, #39	@ 0x27
   35d30:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   35d34:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35d36:	4a67      	ldr	r2, [pc, #412]	@ (35ed4 <d_type+0x6f0>)
   35d38:	60c2      	str	r2, [r0, #12]
   35d3a:	3309      	adds	r3, #9
   35d3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   35d3e:	e5a5      	b.n	3588c <d_type+0xa8>
   35d40:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35d44:	4293      	cmp	r3, r2
   35d46:	f280 8125 	bge.w	35f94 <d_type+0x7b0>
   35d4a:	6922      	ldr	r2, [r4, #16]
   35d4c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   35d50:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   35d54:	3301      	adds	r3, #1
   35d56:	2500      	movs	r5, #0
   35d58:	e9c0 5501 	strd	r5, r5, [r0, #4]
   35d5c:	6163      	str	r3, [r4, #20]
   35d5e:	2327      	movs	r3, #39	@ 0x27
   35d60:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   35d64:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35d66:	4a5c      	ldr	r2, [pc, #368]	@ (35ed8 <d_type+0x6f4>)
   35d68:	60c2      	str	r2, [r0, #12]
   35d6a:	330a      	adds	r3, #10
   35d6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   35d6e:	e58d      	b.n	3588c <d_type+0xa8>
   35d70:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35d74:	4293      	cmp	r3, r2
   35d76:	f280 810d 	bge.w	35f94 <d_type+0x7b0>
   35d7a:	6922      	ldr	r2, [r4, #16]
   35d7c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   35d80:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   35d84:	3301      	adds	r3, #1
   35d86:	2500      	movs	r5, #0
   35d88:	e9c0 5501 	strd	r5, r5, [r0, #4]
   35d8c:	6163      	str	r3, [r4, #20]
   35d8e:	2327      	movs	r3, #39	@ 0x27
   35d90:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   35d94:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35d96:	4a51      	ldr	r2, [pc, #324]	@ (35edc <d_type+0x6f8>)
   35d98:	60c2      	str	r2, [r0, #12]
   35d9a:	3309      	adds	r3, #9
   35d9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   35d9e:	e575      	b.n	3588c <d_type+0xa8>
   35da0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35da4:	4293      	cmp	r3, r2
   35da6:	f6bf aeea 	bge.w	35b7e <d_type+0x39a>
   35daa:	6922      	ldr	r2, [r4, #16]
   35dac:	494c      	ldr	r1, [pc, #304]	@ (35ee0 <d_type+0x6fc>)
   35dae:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   35db2:	0085      	lsls	r5, r0, #2
   35db4:	3301      	adds	r3, #1
   35db6:	6163      	str	r3, [r4, #20]
   35db8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   35dbc:	2300      	movs	r3, #0
   35dbe:	e9c0 3301 	strd	r3, r3, [r0, #4]
   35dc2:	5553      	strb	r3, [r2, r5]
   35dc4:	2304      	movs	r3, #4
   35dc6:	e9c0 1303 	strd	r1, r3, [r0, #12]
   35dca:	e55f      	b.n	3588c <d_type+0xa8>
   35dcc:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35dd0:	4293      	cmp	r3, r2
   35dd2:	f280 80df 	bge.w	35f94 <d_type+0x7b0>
   35dd6:	6922      	ldr	r2, [r4, #16]
   35dd8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   35ddc:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   35de0:	3301      	adds	r3, #1
   35de2:	2500      	movs	r5, #0
   35de4:	e9c0 5501 	strd	r5, r5, [r0, #4]
   35de8:	6163      	str	r3, [r4, #20]
   35dea:	2327      	movs	r3, #39	@ 0x27
   35dec:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   35df0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35df2:	4a3c      	ldr	r2, [pc, #240]	@ (35ee4 <d_type+0x700>)
   35df4:	60c2      	str	r2, [r0, #12]
   35df6:	3311      	adds	r3, #17
   35df8:	62e3      	str	r3, [r4, #44]	@ 0x2c
   35dfa:	e547      	b.n	3588c <d_type+0xa8>
   35dfc:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   35e00:	4293      	cmp	r3, r2
   35e02:	f280 80c7 	bge.w	35f94 <d_type+0x7b0>
   35e06:	6922      	ldr	r2, [r4, #16]
   35e08:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   35e0c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   35e10:	3301      	adds	r3, #1
   35e12:	2500      	movs	r5, #0
   35e14:	e9c0 5501 	strd	r5, r5, [r0, #4]
   35e18:	6163      	str	r3, [r4, #20]
   35e1a:	2327      	movs	r3, #39	@ 0x27
   35e1c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   35e20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35e22:	4a31      	ldr	r2, [pc, #196]	@ (35ee8 <d_type+0x704>)
   35e24:	60c2      	str	r2, [r0, #12]
   35e26:	3308      	adds	r3, #8
   35e28:	62e3      	str	r3, [r4, #44]	@ 0x2c
   35e2a:	e52f      	b.n	3588c <d_type+0xa8>
   35e2c:	4620      	mov	r0, r4
   35e2e:	f7ff fcd9 	bl	357e4 <d_type>
   35e32:	2300      	movs	r3, #0
   35e34:	4602      	mov	r2, r0
   35e36:	214c      	movs	r1, #76	@ 0x4c
   35e38:	4620      	mov	r0, r4
   35e3a:	f7ff f843 	bl	34ec4 <d_make_comp>
   35e3e:	4605      	mov	r5, r0
   35e40:	9000      	str	r0, [sp, #0]
   35e42:	e545      	b.n	358d0 <d_type+0xec>
   35e44:	4829      	ldr	r0, [pc, #164]	@ (35eec <d_type+0x708>)
   35e46:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   35e4a:	eb00 0283 	add.w	r2, r0, r3, lsl #2
   35e4e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
   35e52:	4283      	cmp	r3, r0
   35e54:	f280 80a1 	bge.w	35f9a <d_type+0x7b6>
   35e58:	6926      	ldr	r6, [r4, #16]
   35e5a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   35e5e:	eb06 008c 	add.w	r0, r6, ip, lsl #2
   35e62:	3301      	adds	r3, #1
   35e64:	e9c0 5501 	strd	r5, r5, [r0, #4]
   35e68:	6163      	str	r3, [r4, #20]
   35e6a:	2327      	movs	r3, #39	@ 0x27
   35e6c:	f806 302c 	strb.w	r3, [r6, ip, lsl #2]
   35e70:	60c2      	str	r2, [r0, #12]
   35e72:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35e74:	6852      	ldr	r2, [r2, #4]
   35e76:	3101      	adds	r1, #1
   35e78:	4413      	add	r3, r2
   35e7a:	60e1      	str	r1, [r4, #12]
   35e7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   35e7e:	e505      	b.n	3588c <d_type+0xa8>
   35e80:	2700      	movs	r7, #0
   35e82:	e63e      	b.n	35b02 <d_type+0x31e>
   35e84:	3301      	adds	r3, #1
   35e86:	60e3      	str	r3, [r4, #12]
   35e88:	4620      	mov	r0, r4
   35e8a:	f001 fc53 	bl	37734 <d_template_args_1>
   35e8e:	462a      	mov	r2, r5
   35e90:	4603      	mov	r3, r0
   35e92:	2104      	movs	r1, #4
   35e94:	4620      	mov	r0, r4
   35e96:	f7ff f815 	bl	34ec4 <d_make_comp>
   35e9a:	4605      	mov	r5, r0
   35e9c:	e574      	b.n	35988 <d_type+0x1a4>
   35e9e:	2301      	movs	r3, #1
   35ea0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
   35ea2:	6323      	str	r3, [r4, #48]	@ 0x30
   35ea4:	4620      	mov	r0, r4
   35ea6:	f000 fbe3 	bl	36670 <d_expression_1>
   35eaa:	6325      	str	r5, [r4, #48]	@ 0x30
   35eac:	4607      	mov	r7, r0
   35eae:	2800      	cmp	r0, #0
   35eb0:	f43f ae65 	beq.w	35b7e <d_type+0x39a>
   35eb4:	68e0      	ldr	r0, [r4, #12]
   35eb6:	7802      	ldrb	r2, [r0, #0]
   35eb8:	e621      	b.n	35afe <d_type+0x31a>
   35eba:	bf00      	nop
   35ebc:	000487f8 	.word	0x000487f8
   35ec0:	0003ff64 	.word	0x0003ff64
   35ec4:	0003ff94 	.word	0x0003ff94
   35ec8:	000487a8 	.word	0x000487a8
   35ecc:	000487bc 	.word	0x000487bc
   35ed0:	00048794 	.word	0x00048794
   35ed4:	00048758 	.word	0x00048758
   35ed8:	00048780 	.word	0x00048780
   35edc:	0004876c 	.word	0x0004876c
   35ee0:	0003ff8c 	.word	0x0003ff8c
   35ee4:	000487e4 	.word	0x000487e4
   35ee8:	000487d0 	.word	0x000487d0
   35eec:	00048550 	.word	0x00048550
   35ef0:	1c73      	adds	r3, r6, #1
   35ef2:	60e3      	str	r3, [r4, #12]
   35ef4:	4620      	mov	r0, r4
   35ef6:	f8d4 9014 	ldr.w	r9, [r4, #20]
   35efa:	f8d4 8020 	ldr.w	r8, [r4, #32]
   35efe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
   35f00:	f001 fc18 	bl	37734 <d_template_args_1>
   35f04:	68e3      	ldr	r3, [r4, #12]
   35f06:	781b      	ldrb	r3, [r3, #0]
   35f08:	2b49      	cmp	r3, #73	@ 0x49
   35f0a:	d006      	beq.n	35f1a <d_type+0x736>
   35f0c:	60e6      	str	r6, [r4, #12]
   35f0e:	f8c4 9014 	str.w	r9, [r4, #20]
   35f12:	f8c4 8020 	str.w	r8, [r4, #32]
   35f16:	62e7      	str	r7, [r4, #44]	@ 0x2c
   35f18:	e4da      	b.n	358d0 <d_type+0xec>
   35f1a:	2d00      	cmp	r5, #0
   35f1c:	f43f ae2f 	beq.w	35b7e <d_type+0x39a>
   35f20:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   35f24:	429a      	cmp	r2, r3
   35f26:	f6bf ae2a 	bge.w	35b7e <d_type+0x39a>
   35f2a:	69e1      	ldr	r1, [r4, #28]
   35f2c:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
   35f30:	3201      	adds	r2, #1
   35f32:	4603      	mov	r3, r0
   35f34:	6222      	str	r2, [r4, #32]
   35f36:	e557      	b.n	359e8 <d_type+0x204>
   35f38:	2810      	cmp	r0, #16
   35f3a:	f47f ae20 	bne.w	35b7e <d_type+0x39a>
   35f3e:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
   35f42:	3301      	adds	r3, #1
   35f44:	428a      	cmp	r2, r1
   35f46:	60e3      	str	r3, [r4, #12]
   35f48:	da24      	bge.n	35f94 <d_type+0x7b0>
   35f4a:	6920      	ldr	r0, [r4, #16]
   35f4c:	2314      	movs	r3, #20
   35f4e:	fb02 f303 	mul.w	r3, r2, r3
   35f52:	18c1      	adds	r1, r0, r3
   35f54:	3201      	adds	r2, #1
   35f56:	2500      	movs	r5, #0
   35f58:	e9c1 5501 	strd	r5, r5, [r1, #4]
   35f5c:	6162      	str	r2, [r4, #20]
   35f5e:	2227      	movs	r2, #39	@ 0x27
   35f60:	54c2      	strb	r2, [r0, r3]
   35f62:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   35f64:	4a0e      	ldr	r2, [pc, #56]	@ (35fa0 <d_type+0x7bc>)
   35f66:	9100      	str	r1, [sp, #0]
   35f68:	60ca      	str	r2, [r1, #12]
   35f6a:	330f      	adds	r3, #15
   35f6c:	e645      	b.n	35bfa <d_type+0x416>
   35f6e:	3103      	adds	r1, #3
   35f70:	2301      	movs	r3, #1
   35f72:	6b26      	ldr	r6, [r4, #48]	@ 0x30
   35f74:	60e1      	str	r1, [r4, #12]
   35f76:	6323      	str	r3, [r4, #48]	@ 0x30
   35f78:	4620      	mov	r0, r4
   35f7a:	f000 fb79 	bl	36670 <d_expression_1>
   35f7e:	6326      	str	r6, [r4, #48]	@ 0x30
   35f80:	4605      	mov	r5, r0
   35f82:	2800      	cmp	r0, #0
   35f84:	f47f ae6a 	bne.w	35c5c <d_type+0x478>
   35f88:	e5f9      	b.n	35b7e <d_type+0x39a>
   35f8a:	4906      	ldr	r1, [pc, #24]	@ (35fa4 <d_type+0x7c0>)
   35f8c:	60e3      	str	r3, [r4, #12]
   35f8e:	a801      	add	r0, sp, #4
   35f90:	f005 fc46 	bl	3b820 <sprintf>
   35f94:	2300      	movs	r3, #0
   35f96:	68db      	ldr	r3, [r3, #12]
   35f98:	deff      	udf	#255	@ 0xff
   35f9a:	68eb      	ldr	r3, [r5, #12]
   35f9c:	deff      	udf	#255	@ 0xff
   35f9e:	bf00      	nop
   35fa0:	0004880c 	.word	0x0004880c
   35fa4:	0003ff64 	.word	0x0003ff64

00035fa8 <d_parmlist>:
   35fa8:	b530      	push	{r4, r5, lr}
   35faa:	4604      	mov	r4, r0
   35fac:	b083      	sub	sp, #12
   35fae:	68e2      	ldr	r2, [r4, #12]
   35fb0:	2300      	movs	r3, #0
   35fb2:	9301      	str	r3, [sp, #4]
   35fb4:	7813      	ldrb	r3, [r2, #0]
   35fb6:	2b4f      	cmp	r3, #79	@ 0x4f
   35fb8:	ad01      	add	r5, sp, #4
   35fba:	4620      	mov	r0, r4
   35fbc:	d017      	beq.n	35fee <d_parmlist+0x46>
   35fbe:	d81f      	bhi.n	36000 <d_parmlist+0x58>
   35fc0:	2b2e      	cmp	r3, #46	@ 0x2e
   35fc2:	d017      	beq.n	35ff4 <d_parmlist+0x4c>
   35fc4:	2b45      	cmp	r3, #69	@ 0x45
   35fc6:	d015      	beq.n	35ff4 <d_parmlist+0x4c>
   35fc8:	b1a3      	cbz	r3, 35ff4 <d_parmlist+0x4c>
   35fca:	f7ff fc0b 	bl	357e4 <d_type>
   35fce:	4602      	mov	r2, r0
   35fd0:	2300      	movs	r3, #0
   35fd2:	212e      	movs	r1, #46	@ 0x2e
   35fd4:	4620      	mov	r0, r4
   35fd6:	b33a      	cbz	r2, 36028 <d_parmlist+0x80>
   35fd8:	f7fe ff74 	bl	34ec4 <d_make_comp>
   35fdc:	6028      	str	r0, [r5, #0]
   35fde:	b318      	cbz	r0, 36028 <d_parmlist+0x80>
   35fe0:	68e2      	ldr	r2, [r4, #12]
   35fe2:	7813      	ldrb	r3, [r2, #0]
   35fe4:	2b4f      	cmp	r3, #79	@ 0x4f
   35fe6:	f100 0510 	add.w	r5, r0, #16
   35fea:	4620      	mov	r0, r4
   35fec:	d1e7      	bne.n	35fbe <d_parmlist+0x16>
   35fee:	7853      	ldrb	r3, [r2, #1]
   35ff0:	2b45      	cmp	r3, #69	@ 0x45
   35ff2:	d1ea      	bne.n	35fca <d_parmlist+0x22>
   35ff4:	9801      	ldr	r0, [sp, #4]
   35ff6:	b1b8      	cbz	r0, 36028 <d_parmlist+0x80>
   35ff8:	6903      	ldr	r3, [r0, #16]
   35ffa:	b13b      	cbz	r3, 3600c <d_parmlist+0x64>
   35ffc:	b003      	add	sp, #12
   35ffe:	bd30      	pop	{r4, r5, pc}
   36000:	2b52      	cmp	r3, #82	@ 0x52
   36002:	d1e2      	bne.n	35fca <d_parmlist+0x22>
   36004:	7853      	ldrb	r3, [r2, #1]
   36006:	2b45      	cmp	r3, #69	@ 0x45
   36008:	d1df      	bne.n	35fca <d_parmlist+0x22>
   3600a:	e7f3      	b.n	35ff4 <d_parmlist+0x4c>
   3600c:	68c2      	ldr	r2, [r0, #12]
   3600e:	7811      	ldrb	r1, [r2, #0]
   36010:	2927      	cmp	r1, #39	@ 0x27
   36012:	d1f3      	bne.n	35ffc <d_parmlist+0x54>
   36014:	68d2      	ldr	r2, [r2, #12]
   36016:	7c11      	ldrb	r1, [r2, #16]
   36018:	2909      	cmp	r1, #9
   3601a:	d1ef      	bne.n	35ffc <d_parmlist+0x54>
   3601c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
   3601e:	6852      	ldr	r2, [r2, #4]
   36020:	1a89      	subs	r1, r1, r2
   36022:	62e1      	str	r1, [r4, #44]	@ 0x2c
   36024:	60c3      	str	r3, [r0, #12]
   36026:	e7e9      	b.n	35ffc <d_parmlist+0x54>
   36028:	2000      	movs	r0, #0
   3602a:	b003      	add	sp, #12
   3602c:	bd30      	pop	{r4, r5, pc}
   3602e:	bf00      	nop

00036030 <d_bare_function_type>:
   36030:	b570      	push	{r4, r5, r6, lr}
   36032:	68c3      	ldr	r3, [r0, #12]
   36034:	781a      	ldrb	r2, [r3, #0]
   36036:	2a4a      	cmp	r2, #74	@ 0x4a
   36038:	4605      	mov	r5, r0
   3603a:	d01a      	beq.n	36072 <d_bare_function_type+0x42>
   3603c:	b181      	cbz	r1, 36060 <d_bare_function_type+0x30>
   3603e:	4628      	mov	r0, r5
   36040:	f7ff fbd0 	bl	357e4 <d_type>
   36044:	4604      	mov	r4, r0
   36046:	b190      	cbz	r0, 3606e <d_bare_function_type+0x3e>
   36048:	4628      	mov	r0, r5
   3604a:	f7ff ffad 	bl	35fa8 <d_parmlist>
   3604e:	4603      	mov	r3, r0
   36050:	b168      	cbz	r0, 3606e <d_bare_function_type+0x3e>
   36052:	4622      	mov	r2, r4
   36054:	4628      	mov	r0, r5
   36056:	2129      	movs	r1, #41	@ 0x29
   36058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3605c:	f7fe bf32 	b.w	34ec4 <d_make_comp>
   36060:	4628      	mov	r0, r5
   36062:	460c      	mov	r4, r1
   36064:	f7ff ffa0 	bl	35fa8 <d_parmlist>
   36068:	4603      	mov	r3, r0
   3606a:	2800      	cmp	r0, #0
   3606c:	d1f1      	bne.n	36052 <d_bare_function_type+0x22>
   3606e:	2000      	movs	r0, #0
   36070:	bd70      	pop	{r4, r5, r6, pc}
   36072:	3301      	adds	r3, #1
   36074:	60c3      	str	r3, [r0, #12]
   36076:	e7e2      	b.n	3603e <d_bare_function_type+0xe>

00036078 <d_function_type>:
   36078:	b570      	push	{r4, r5, r6, lr}
   3607a:	4604      	mov	r4, r0
   3607c:	6880      	ldr	r0, [r0, #8]
   3607e:	f410 2080 	ands.w	r0, r0, #262144	@ 0x40000
   36082:	d10b      	bne.n	3609c <d_function_type+0x24>
   36084:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
   36086:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
   3608a:	d806      	bhi.n	3609a <d_function_type+0x22>
   3608c:	1c51      	adds	r1, r2, #1
   3608e:	68e3      	ldr	r3, [r4, #12]
   36090:	63e1      	str	r1, [r4, #60]	@ 0x3c
   36092:	7819      	ldrb	r1, [r3, #0]
   36094:	2946      	cmp	r1, #70	@ 0x46
   36096:	d007      	beq.n	360a8 <d_function_type+0x30>
   36098:	63e2      	str	r2, [r4, #60]	@ 0x3c
   3609a:	bd70      	pop	{r4, r5, r6, pc}
   3609c:	68e3      	ldr	r3, [r4, #12]
   3609e:	781a      	ldrb	r2, [r3, #0]
   360a0:	2a46      	cmp	r2, #70	@ 0x46
   360a2:	d001      	beq.n	360a8 <d_function_type+0x30>
   360a4:	2000      	movs	r0, #0
   360a6:	bd70      	pop	{r4, r5, r6, pc}
   360a8:	1c5a      	adds	r2, r3, #1
   360aa:	60e2      	str	r2, [r4, #12]
   360ac:	785a      	ldrb	r2, [r3, #1]
   360ae:	2a59      	cmp	r2, #89	@ 0x59
   360b0:	bf04      	itt	eq
   360b2:	3302      	addeq	r3, #2
   360b4:	60e3      	streq	r3, [r4, #12]
   360b6:	2101      	movs	r1, #1
   360b8:	4620      	mov	r0, r4
   360ba:	f7ff ffb9 	bl	36030 <d_bare_function_type>
   360be:	68e5      	ldr	r5, [r4, #12]
   360c0:	782b      	ldrb	r3, [r5, #0]
   360c2:	2b52      	cmp	r3, #82	@ 0x52
   360c4:	d01a      	beq.n	360fc <d_function_type+0x84>
   360c6:	2b4f      	cmp	r3, #79	@ 0x4f
   360c8:	d00a      	beq.n	360e0 <d_function_type+0x68>
   360ca:	2b45      	cmp	r3, #69	@ 0x45
   360cc:	68a3      	ldr	r3, [r4, #8]
   360ce:	bf06      	itte	eq
   360d0:	3501      	addeq	r5, #1
   360d2:	60e5      	streq	r5, [r4, #12]
   360d4:	2000      	movne	r0, #0
   360d6:	035b      	lsls	r3, r3, #13
   360d8:	d4df      	bmi.n	3609a <d_function_type+0x22>
   360da:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
   360dc:	3a01      	subs	r2, #1
   360de:	e7db      	b.n	36098 <d_function_type+0x20>
   360e0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   360e2:	2120      	movs	r1, #32
   360e4:	3303      	adds	r3, #3
   360e6:	1c6e      	adds	r6, r5, #1
   360e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
   360ea:	4602      	mov	r2, r0
   360ec:	2300      	movs	r3, #0
   360ee:	60e6      	str	r6, [r4, #12]
   360f0:	4620      	mov	r0, r4
   360f2:	f7fe fee7 	bl	34ec4 <d_make_comp>
   360f6:	786b      	ldrb	r3, [r5, #1]
   360f8:	4635      	mov	r5, r6
   360fa:	e7e6      	b.n	360ca <d_function_type+0x52>
   360fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   360fe:	211f      	movs	r1, #31
   36100:	3302      	adds	r3, #2
   36102:	e7f0      	b.n	360e6 <d_function_type+0x6e>

00036104 <d_template_parm>:
   36104:	68c3      	ldr	r3, [r0, #12]
   36106:	781a      	ldrb	r2, [r3, #0]
   36108:	2a54      	cmp	r2, #84	@ 0x54
   3610a:	d142      	bne.n	36192 <d_template_parm+0x8e>
   3610c:	b570      	push	{r4, r5, r6, lr}
   3610e:	785a      	ldrb	r2, [r3, #1]
   36110:	3a6e      	subs	r2, #110	@ 0x6e
   36112:	4604      	mov	r4, r0
   36114:	460d      	mov	r5, r1
   36116:	2a0b      	cmp	r2, #11
   36118:	d811      	bhi.n	3613e <d_template_parm+0x3a>
   3611a:	e8df f002 	tbb	[pc, r2]
   3611e:	101c      	.short	0x101c
   36120:	10101006 	.word	0x10101006
   36124:	1010102a 	.word	0x1010102a
   36128:	1210      	.short	0x1210
   3612a:	3302      	adds	r3, #2
   3612c:	4629      	mov	r1, r5
   3612e:	60c3      	str	r3, [r0, #12]
   36130:	f7ff ffe8 	bl	36104 <d_template_parm>
   36134:	215b      	movs	r1, #91	@ 0x5b
   36136:	4602      	mov	r2, r0
   36138:	b938      	cbnz	r0, 3614a <d_template_parm+0x46>
   3613a:	2301      	movs	r3, #1
   3613c:	602b      	str	r3, [r5, #0]
   3613e:	2000      	movs	r0, #0
   36140:	bd70      	pop	{r4, r5, r6, pc}
   36142:	3302      	adds	r3, #2
   36144:	60c3      	str	r3, [r0, #12]
   36146:	2158      	movs	r1, #88	@ 0x58
   36148:	2200      	movs	r2, #0
   3614a:	4620      	mov	r0, r4
   3614c:	2300      	movs	r3, #0
   3614e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   36152:	f7fe beb7 	b.w	34ec4 <d_make_comp>
   36156:	3302      	adds	r3, #2
   36158:	60c3      	str	r3, [r0, #12]
   3615a:	f7ff fb43 	bl	357e4 <d_type>
   3615e:	4602      	mov	r2, r0
   36160:	2800      	cmp	r0, #0
   36162:	d0ea      	beq.n	3613a <d_template_parm+0x36>
   36164:	4620      	mov	r0, r4
   36166:	2159      	movs	r1, #89	@ 0x59
   36168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3616c:	2300      	movs	r3, #0
   3616e:	f7fe bea9 	b.w	34ec4 <d_make_comp>
   36172:	3302      	adds	r3, #2
   36174:	60c3      	str	r3, [r0, #12]
   36176:	4629      	mov	r1, r5
   36178:	f000 f80e 	bl	36198 <d_template_head>
   3617c:	4602      	mov	r2, r0
   3617e:	2800      	cmp	r0, #0
   36180:	d0db      	beq.n	3613a <d_template_parm+0x36>
   36182:	68e3      	ldr	r3, [r4, #12]
   36184:	7819      	ldrb	r1, [r3, #0]
   36186:	2945      	cmp	r1, #69	@ 0x45
   36188:	d1d7      	bne.n	3613a <d_template_parm+0x36>
   3618a:	3301      	adds	r3, #1
   3618c:	60e3      	str	r3, [r4, #12]
   3618e:	215a      	movs	r1, #90	@ 0x5a
   36190:	e7db      	b.n	3614a <d_template_parm+0x46>
   36192:	2000      	movs	r0, #0
   36194:	4770      	bx	lr
   36196:	bf00      	nop

00036198 <d_template_head>:
   36198:	b570      	push	{r4, r5, r6, lr}
   3619a:	b082      	sub	sp, #8
   3619c:	2300      	movs	r3, #0
   3619e:	4605      	mov	r5, r0
   361a0:	460e      	mov	r6, r1
   361a2:	9301      	str	r3, [sp, #4]
   361a4:	ac01      	add	r4, sp, #4
   361a6:	e002      	b.n	361ae <d_template_head+0x16>
   361a8:	6023      	str	r3, [r4, #0]
   361aa:	f103 0410 	add.w	r4, r3, #16
   361ae:	4631      	mov	r1, r6
   361b0:	4628      	mov	r0, r5
   361b2:	f7ff ffa7 	bl	36104 <d_template_parm>
   361b6:	4603      	mov	r3, r0
   361b8:	2800      	cmp	r0, #0
   361ba:	d1f5      	bne.n	361a8 <d_template_head+0x10>
   361bc:	9a01      	ldr	r2, [sp, #4]
   361be:	b132      	cbz	r2, 361ce <d_template_head+0x36>
   361c0:	2157      	movs	r1, #87	@ 0x57
   361c2:	4628      	mov	r0, r5
   361c4:	b002      	add	sp, #8
   361c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   361ca:	f7fe be7b 	b.w	34ec4 <d_make_comp>
   361ce:	b002      	add	sp, #8
   361d0:	bd70      	pop	{r4, r5, r6, pc}
   361d2:	bf00      	nop

000361d4 <d_operator_name>:
   361d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   361d6:	68c3      	ldr	r3, [r0, #12]
   361d8:	781f      	ldrb	r7, [r3, #0]
   361da:	4606      	mov	r6, r0
   361dc:	b3a7      	cbz	r7, 36248 <d_operator_name+0x74>
   361de:	1c5a      	adds	r2, r3, #1
   361e0:	60c2      	str	r2, [r0, #12]
   361e2:	f893 e001 	ldrb.w	lr, [r3, #1]
   361e6:	781f      	ldrb	r7, [r3, #0]
   361e8:	f1be 0f00 	cmp.w	lr, #0
   361ec:	d12e      	bne.n	3624c <d_operator_name+0x78>
   361ee:	4d38      	ldr	r5, [pc, #224]	@ (362d0 <d_operator_name+0xfc>)
   361f0:	2148      	movs	r1, #72	@ 0x48
   361f2:	2200      	movs	r2, #0
   361f4:	1a8b      	subs	r3, r1, r2
   361f6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   361fa:	eb02 0363 	add.w	r3, r2, r3, asr #1
   361fe:	0118      	lsls	r0, r3, #4
   36200:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
   36204:	582c      	ldr	r4, [r5, r0]
   36206:	7820      	ldrb	r0, [r4, #0]
   36208:	42b8      	cmp	r0, r7
   3620a:	d006      	beq.n	3621a <d_operator_name+0x46>
   3620c:	bf94      	ite	ls
   3620e:	1c5a      	addls	r2, r3, #1
   36210:	4619      	movhi	r1, r3
   36212:	428a      	cmp	r2, r1
   36214:	d1ee      	bne.n	361f4 <d_operator_name+0x20>
   36216:	2000      	movs	r0, #0
   36218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3621a:	7860      	ldrb	r0, [r4, #1]
   3621c:	4570      	cmp	r0, lr
   3621e:	d1f5      	bne.n	3620c <d_operator_name+0x38>
   36220:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
   36224:	4293      	cmp	r3, r2
   36226:	daf6      	bge.n	36216 <d_operator_name+0x42>
   36228:	6932      	ldr	r2, [r6, #16]
   3622a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   3622e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   36232:	3301      	adds	r3, #1
   36234:	2400      	movs	r4, #0
   36236:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3623a:	6173      	str	r3, [r6, #20]
   3623c:	2332      	movs	r3, #50	@ 0x32
   3623e:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   36242:	f8c0 c00c 	str.w	ip, [r0, #12]
   36246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36248:	46be      	mov	lr, r7
   3624a:	e7d0      	b.n	361ee <d_operator_name+0x1a>
   3624c:	1c9a      	adds	r2, r3, #2
   3624e:	60c2      	str	r2, [r0, #12]
   36250:	2f76      	cmp	r7, #118	@ 0x76
   36252:	f893 e001 	ldrb.w	lr, [r3, #1]
   36256:	d11f      	bne.n	36298 <d_operator_name+0xc4>
   36258:	f1ae 0430 	sub.w	r4, lr, #48	@ 0x30
   3625c:	b2e3      	uxtb	r3, r4
   3625e:	2b09      	cmp	r3, #9
   36260:	d8c5      	bhi.n	361ee <d_operator_name+0x1a>
   36262:	f7ff f95f 	bl	35524 <d_source_name>
   36266:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
   3626a:	428b      	cmp	r3, r1
   3626c:	4602      	mov	r2, r0
   3626e:	dad2      	bge.n	36216 <d_operator_name+0x42>
   36270:	6937      	ldr	r7, [r6, #16]
   36272:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   36276:	eb07 0081 	add.w	r0, r7, r1, lsl #2
   3627a:	3301      	adds	r3, #1
   3627c:	2500      	movs	r5, #0
   3627e:	e9c0 5501 	strd	r5, r5, [r0, #4]
   36282:	0089      	lsls	r1, r1, #2
   36284:	6173      	str	r3, [r6, #20]
   36286:	2a00      	cmp	r2, #0
   36288:	d0c5      	beq.n	36216 <d_operator_name+0x42>
   3628a:	2333      	movs	r3, #51	@ 0x33
   3628c:	e9c0 5501 	strd	r5, r5, [r0, #4]
   36290:	547b      	strb	r3, [r7, r1]
   36292:	e9c0 4203 	strd	r4, r2, [r0, #12]
   36296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36298:	2f63      	cmp	r7, #99	@ 0x63
   3629a:	d1a8      	bne.n	361ee <d_operator_name+0x1a>
   3629c:	f1be 0f76 	cmp.w	lr, #118	@ 0x76
   362a0:	d1a5      	bne.n	361ee <d_operator_name+0x1a>
   362a2:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	@ 0x30
   362a6:	fab3 f383 	clz	r3, r3
   362aa:	095b      	lsrs	r3, r3, #5
   362ac:	6343      	str	r3, [r0, #52]	@ 0x34
   362ae:	f7ff fa99 	bl	357e4 <d_type>
   362b2:	6b73      	ldr	r3, [r6, #52]	@ 0x34
   362b4:	4602      	mov	r2, r0
   362b6:	b133      	cbz	r3, 362c6 <d_operator_name+0xf2>
   362b8:	2300      	movs	r3, #0
   362ba:	2135      	movs	r1, #53	@ 0x35
   362bc:	4630      	mov	r0, r6
   362be:	f7fe fe01 	bl	34ec4 <d_make_comp>
   362c2:	6374      	str	r4, [r6, #52]	@ 0x34
   362c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   362c6:	2134      	movs	r1, #52	@ 0x34
   362c8:	4630      	mov	r0, r6
   362ca:	f7fe fdfb 	bl	34ec4 <d_make_comp>
   362ce:	e7f8      	b.n	362c2 <d_operator_name+0xee>
   362d0:	000480c0 	.word	0x000480c0

000362d4 <d_unqualified_name>:
   362d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   362d8:	b084      	sub	sp, #16
   362da:	460e      	mov	r6, r1
   362dc:	a901      	add	r1, sp, #4
   362de:	4604      	mov	r4, r0
   362e0:	9201      	str	r2, [sp, #4]
   362e2:	f7ff fa4f 	bl	35784 <d_maybe_module_name>
   362e6:	2800      	cmp	r0, #0
   362e8:	f000 80ec 	beq.w	364c4 <d_unqualified_name+0x1f0>
   362ec:	68e2      	ldr	r2, [r4, #12]
   362ee:	7813      	ldrb	r3, [r2, #0]
   362f0:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
   362f4:	2909      	cmp	r1, #9
   362f6:	d979      	bls.n	363ec <d_unqualified_name+0x118>
   362f8:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
   362fc:	2919      	cmp	r1, #25
   362fe:	d829      	bhi.n	36354 <d_unqualified_name+0x80>
   36300:	2b6f      	cmp	r3, #111	@ 0x6f
   36302:	6b27      	ldr	r7, [r4, #48]	@ 0x30
   36304:	f000 80a1 	beq.w	3644a <d_unqualified_name+0x176>
   36308:	4620      	mov	r0, r4
   3630a:	f7ff ff63 	bl	361d4 <d_operator_name>
   3630e:	6327      	str	r7, [r4, #48]	@ 0x30
   36310:	4605      	mov	r5, r0
   36312:	2800      	cmp	r0, #0
   36314:	f000 80c8 	beq.w	364a8 <d_unqualified_name+0x1d4>
   36318:	7803      	ldrb	r3, [r0, #0]
   3631a:	2b32      	cmp	r3, #50	@ 0x32
   3631c:	d16a      	bne.n	363f4 <d_unqualified_name+0x120>
   3631e:	68c2      	ldr	r2, [r0, #12]
   36320:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   36322:	6891      	ldr	r1, [r2, #8]
   36324:	6812      	ldr	r2, [r2, #0]
   36326:	3307      	adds	r3, #7
   36328:	440b      	add	r3, r1
   3632a:	62e3      	str	r3, [r4, #44]	@ 0x2c
   3632c:	7813      	ldrb	r3, [r2, #0]
   3632e:	2b6c      	cmp	r3, #108	@ 0x6c
   36330:	d160      	bne.n	363f4 <d_unqualified_name+0x120>
   36332:	7853      	ldrb	r3, [r2, #1]
   36334:	2b69      	cmp	r3, #105	@ 0x69
   36336:	d15d      	bne.n	363f4 <d_unqualified_name+0x120>
   36338:	7893      	ldrb	r3, [r2, #2]
   3633a:	2b00      	cmp	r3, #0
   3633c:	d15a      	bne.n	363f4 <d_unqualified_name+0x120>
   3633e:	4620      	mov	r0, r4
   36340:	f7ff f8f0 	bl	35524 <d_source_name>
   36344:	462a      	mov	r2, r5
   36346:	4603      	mov	r3, r0
   36348:	2137      	movs	r1, #55	@ 0x37
   3634a:	4620      	mov	r0, r4
   3634c:	f7fe fdba 	bl	34ec4 <d_make_comp>
   36350:	4605      	mov	r5, r0
   36352:	e04f      	b.n	363f4 <d_unqualified_name+0x120>
   36354:	2b44      	cmp	r3, #68	@ 0x44
   36356:	f000 8081 	beq.w	3645c <d_unqualified_name+0x188>
   3635a:	f1a3 0143 	sub.w	r1, r3, #67	@ 0x43
   3635e:	2901      	cmp	r1, #1
   36360:	f240 808d 	bls.w	3647e <d_unqualified_name+0x1aa>
   36364:	2b4c      	cmp	r3, #76	@ 0x4c
   36366:	f000 80a1 	beq.w	364ac <d_unqualified_name+0x1d8>
   3636a:	2b55      	cmp	r3, #85	@ 0x55
   3636c:	f040 80aa 	bne.w	364c4 <d_unqualified_name+0x1f0>
   36370:	7853      	ldrb	r3, [r2, #1]
   36372:	2b6c      	cmp	r3, #108	@ 0x6c
   36374:	f000 80ef 	beq.w	36556 <d_unqualified_name+0x282>
   36378:	2b74      	cmp	r3, #116	@ 0x74
   3637a:	f040 80a3 	bne.w	364c4 <d_unqualified_name+0x1f0>
   3637e:	1c53      	adds	r3, r2, #1
   36380:	60e3      	str	r3, [r4, #12]
   36382:	7853      	ldrb	r3, [r2, #1]
   36384:	9d01      	ldr	r5, [sp, #4]
   36386:	2b74      	cmp	r3, #116	@ 0x74
   36388:	f040 808e 	bne.w	364a8 <d_unqualified_name+0x1d4>
   3638c:	1c93      	adds	r3, r2, #2
   3638e:	60e3      	str	r3, [r4, #12]
   36390:	7892      	ldrb	r2, [r2, #2]
   36392:	2a5f      	cmp	r2, #95	@ 0x5f
   36394:	f000 8161 	beq.w	3665a <d_unqualified_name+0x386>
   36398:	2a6e      	cmp	r2, #110	@ 0x6e
   3639a:	f000 8162 	beq.w	36662 <d_unqualified_name+0x38e>
   3639e:	4620      	mov	r0, r4
   363a0:	f7fe fe0c 	bl	34fbc <d_number>
   363a4:	3001      	adds	r0, #1
   363a6:	d47f      	bmi.n	364a8 <d_unqualified_name+0x1d4>
   363a8:	68e3      	ldr	r3, [r4, #12]
   363aa:	781a      	ldrb	r2, [r3, #0]
   363ac:	2a5f      	cmp	r2, #95	@ 0x5f
   363ae:	d17b      	bne.n	364a8 <d_unqualified_name+0x1d4>
   363b0:	3301      	adds	r3, #1
   363b2:	6962      	ldr	r2, [r4, #20]
   363b4:	60e3      	str	r3, [r4, #12]
   363b6:	69a3      	ldr	r3, [r4, #24]
   363b8:	429a      	cmp	r2, r3
   363ba:	da75      	bge.n	364a8 <d_unqualified_name+0x1d4>
   363bc:	6923      	ldr	r3, [r4, #16]
   363be:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   363c2:	eb03 0581 	add.w	r5, r3, r1, lsl #2
   363c6:	3201      	adds	r2, #1
   363c8:	2700      	movs	r7, #0
   363ca:	e9c5 7701 	strd	r7, r7, [r5, #4]
   363ce:	6162      	str	r2, [r4, #20]
   363d0:	2249      	movs	r2, #73	@ 0x49
   363d2:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
   363d6:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   363da:	4293      	cmp	r3, r2
   363dc:	60e8      	str	r0, [r5, #12]
   363de:	da63      	bge.n	364a8 <d_unqualified_name+0x1d4>
   363e0:	69e2      	ldr	r2, [r4, #28]
   363e2:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
   363e6:	3301      	adds	r3, #1
   363e8:	6223      	str	r3, [r4, #32]
   363ea:	e003      	b.n	363f4 <d_unqualified_name+0x120>
   363ec:	4620      	mov	r0, r4
   363ee:	f7ff f899 	bl	35524 <d_source_name>
   363f2:	4605      	mov	r5, r0
   363f4:	9b01      	ldr	r3, [sp, #4]
   363f6:	b12b      	cbz	r3, 36404 <d_unqualified_name+0x130>
   363f8:	462a      	mov	r2, r5
   363fa:	2155      	movs	r1, #85	@ 0x55
   363fc:	4620      	mov	r0, r4
   363fe:	f7fe fd61 	bl	34ec4 <d_make_comp>
   36402:	4605      	mov	r5, r0
   36404:	68e3      	ldr	r3, [r4, #12]
   36406:	781a      	ldrb	r2, [r3, #0]
   36408:	2a42      	cmp	r2, #66	@ 0x42
   3640a:	d00b      	beq.n	36424 <d_unqualified_name+0x150>
   3640c:	b136      	cbz	r6, 3641c <d_unqualified_name+0x148>
   3640e:	462b      	mov	r3, r5
   36410:	4632      	mov	r2, r6
   36412:	2101      	movs	r1, #1
   36414:	4620      	mov	r0, r4
   36416:	f7fe fd55 	bl	34ec4 <d_make_comp>
   3641a:	4605      	mov	r5, r0
   3641c:	4628      	mov	r0, r5
   3641e:	b004      	add	sp, #16
   36420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36424:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
   36426:	3301      	adds	r3, #1
   36428:	60e3      	str	r3, [r4, #12]
   3642a:	4620      	mov	r0, r4
   3642c:	f7ff f87a 	bl	35524 <d_source_name>
   36430:	462a      	mov	r2, r5
   36432:	4603      	mov	r3, r0
   36434:	214d      	movs	r1, #77	@ 0x4d
   36436:	4620      	mov	r0, r4
   36438:	f7fe fd44 	bl	34ec4 <d_make_comp>
   3643c:	68e3      	ldr	r3, [r4, #12]
   3643e:	781a      	ldrb	r2, [r3, #0]
   36440:	2a42      	cmp	r2, #66	@ 0x42
   36442:	4605      	mov	r5, r0
   36444:	d0ef      	beq.n	36426 <d_unqualified_name+0x152>
   36446:	62a7      	str	r7, [r4, #40]	@ 0x28
   36448:	e7e0      	b.n	3640c <d_unqualified_name+0x138>
   3644a:	7853      	ldrb	r3, [r2, #1]
   3644c:	2b6e      	cmp	r3, #110	@ 0x6e
   3644e:	f47f af5b 	bne.w	36308 <d_unqualified_name+0x34>
   36452:	3202      	adds	r2, #2
   36454:	2300      	movs	r3, #0
   36456:	60e2      	str	r2, [r4, #12]
   36458:	6323      	str	r3, [r4, #48]	@ 0x30
   3645a:	e755      	b.n	36308 <d_unqualified_name+0x34>
   3645c:	7853      	ldrb	r3, [r2, #1]
   3645e:	2b43      	cmp	r3, #67	@ 0x43
   36460:	d05b      	beq.n	3651a <d_unqualified_name+0x246>
   36462:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
   36464:	b119      	cbz	r1, 3646e <d_unqualified_name+0x19a>
   36466:	7808      	ldrb	r0, [r1, #0]
   36468:	b190      	cbz	r0, 36490 <d_unqualified_name+0x1bc>
   3646a:	2818      	cmp	r0, #24
   3646c:	d010      	beq.n	36490 <d_unqualified_name+0x1bc>
   3646e:	3b30      	subs	r3, #48	@ 0x30
   36470:	2b05      	cmp	r3, #5
   36472:	d819      	bhi.n	364a8 <d_unqualified_name+0x1d4>
   36474:	e8df f003 	tbb	[pc, r3]
   36478:	184b2845 	.word	0x184b2845
   3647c:	4e48      	.short	0x4e48
   3647e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
   36480:	2900      	cmp	r1, #0
   36482:	f000 80b1 	beq.w	365e8 <d_unqualified_name+0x314>
   36486:	780b      	ldrb	r3, [r1, #0]
   36488:	b113      	cbz	r3, 36490 <d_unqualified_name+0x1bc>
   3648a:	2b18      	cmp	r3, #24
   3648c:	f040 80ac 	bne.w	365e8 <d_unqualified_name+0x314>
   36490:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   36492:	6908      	ldr	r0, [r1, #16]
   36494:	4403      	add	r3, r0
   36496:	62e3      	str	r3, [r4, #44]	@ 0x2c
   36498:	7813      	ldrb	r3, [r2, #0]
   3649a:	2b43      	cmp	r3, #67	@ 0x43
   3649c:	f000 80a4 	beq.w	365e8 <d_unqualified_name+0x314>
   364a0:	2b44      	cmp	r3, #68	@ 0x44
   364a2:	bf08      	it	eq
   364a4:	7853      	ldrbeq	r3, [r2, #1]
   364a6:	d0e2      	beq.n	3646e <d_unqualified_name+0x19a>
   364a8:	2500      	movs	r5, #0
   364aa:	e7a3      	b.n	363f4 <d_unqualified_name+0x120>
   364ac:	3201      	adds	r2, #1
   364ae:	60e2      	str	r2, [r4, #12]
   364b0:	4620      	mov	r0, r4
   364b2:	f7ff f837 	bl	35524 <d_source_name>
   364b6:	4605      	mov	r5, r0
   364b8:	b120      	cbz	r0, 364c4 <d_unqualified_name+0x1f0>
   364ba:	4620      	mov	r0, r4
   364bc:	f7fe fddc 	bl	35078 <d_discriminator>
   364c0:	2800      	cmp	r0, #0
   364c2:	d197      	bne.n	363f4 <d_unqualified_name+0x120>
   364c4:	2500      	movs	r5, #0
   364c6:	e7a9      	b.n	3641c <d_unqualified_name+0x148>
   364c8:	f04f 0c02 	mov.w	ip, #2
   364cc:	3202      	adds	r2, #2
   364ce:	60e2      	str	r2, [r4, #12]
   364d0:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   364d4:	4293      	cmp	r3, r2
   364d6:	dae7      	bge.n	364a8 <d_unqualified_name+0x1d4>
   364d8:	6927      	ldr	r7, [r4, #16]
   364da:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   364de:	eb07 0582 	add.w	r5, r7, r2, lsl #2
   364e2:	3301      	adds	r3, #1
   364e4:	2000      	movs	r0, #0
   364e6:	e9c5 0001 	strd	r0, r0, [r5, #4]
   364ea:	0092      	lsls	r2, r2, #2
   364ec:	6163      	str	r3, [r4, #20]
   364ee:	2900      	cmp	r1, #0
   364f0:	d0da      	beq.n	364a8 <d_unqualified_name+0x1d4>
   364f2:	2308      	movs	r3, #8
   364f4:	e9c5 0001 	strd	r0, r0, [r5, #4]
   364f8:	54bb      	strb	r3, [r7, r2]
   364fa:	f885 c00c 	strb.w	ip, [r5, #12]
   364fe:	6129      	str	r1, [r5, #16]
   36500:	e778      	b.n	363f4 <d_unqualified_name+0x120>
   36502:	f04f 0c01 	mov.w	ip, #1
   36506:	e7e1      	b.n	364cc <d_unqualified_name+0x1f8>
   36508:	f04f 0c04 	mov.w	ip, #4
   3650c:	e7de      	b.n	364cc <d_unqualified_name+0x1f8>
   3650e:	f04f 0c03 	mov.w	ip, #3
   36512:	e7db      	b.n	364cc <d_unqualified_name+0x1f8>
   36514:	f04f 0c05 	mov.w	ip, #5
   36518:	e7d8      	b.n	364cc <d_unqualified_name+0x1f8>
   3651a:	3202      	adds	r2, #2
   3651c:	60e2      	str	r2, [r4, #12]
   3651e:	2700      	movs	r7, #0
   36520:	4620      	mov	r0, r4
   36522:	f7fe ffff 	bl	35524 <d_source_name>
   36526:	2300      	movs	r3, #0
   36528:	4602      	mov	r2, r0
   3652a:	2152      	movs	r1, #82	@ 0x52
   3652c:	4620      	mov	r0, r4
   3652e:	f7fe fcc9 	bl	34ec4 <d_make_comp>
   36532:	46b8      	mov	r8, r7
   36534:	4607      	mov	r7, r0
   36536:	f1b8 0f00 	cmp.w	r8, #0
   3653a:	d00a      	beq.n	36552 <d_unqualified_name+0x27e>
   3653c:	f8c8 0010 	str.w	r0, [r8, #16]
   36540:	2f00      	cmp	r7, #0
   36542:	d0b1      	beq.n	364a8 <d_unqualified_name+0x1d4>
   36544:	68e3      	ldr	r3, [r4, #12]
   36546:	781a      	ldrb	r2, [r3, #0]
   36548:	2a45      	cmp	r2, #69	@ 0x45
   3654a:	d1e9      	bne.n	36520 <d_unqualified_name+0x24c>
   3654c:	3301      	adds	r3, #1
   3654e:	60e3      	str	r3, [r4, #12]
   36550:	e750      	b.n	363f4 <d_unqualified_name+0x120>
   36552:	4605      	mov	r5, r0
   36554:	e7f4      	b.n	36540 <d_unqualified_name+0x26c>
   36556:	1c53      	adds	r3, r2, #1
   36558:	60e3      	str	r3, [r4, #12]
   3655a:	7853      	ldrb	r3, [r2, #1]
   3655c:	2b6c      	cmp	r3, #108	@ 0x6c
   3655e:	d1a3      	bne.n	364a8 <d_unqualified_name+0x1d4>
   36560:	3202      	adds	r2, #2
   36562:	2300      	movs	r3, #0
   36564:	60e2      	str	r2, [r4, #12]
   36566:	a903      	add	r1, sp, #12
   36568:	4620      	mov	r0, r4
   3656a:	9303      	str	r3, [sp, #12]
   3656c:	f7ff fe14 	bl	36198 <d_template_head>
   36570:	f8dd 800c 	ldr.w	r8, [sp, #12]
   36574:	4607      	mov	r7, r0
   36576:	f1b8 0f00 	cmp.w	r8, #0
   3657a:	d195      	bne.n	364a8 <d_unqualified_name+0x1d4>
   3657c:	4620      	mov	r0, r4
   3657e:	f7ff fd13 	bl	35fa8 <d_parmlist>
   36582:	2800      	cmp	r0, #0
   36584:	d090      	beq.n	364a8 <d_unqualified_name+0x1d4>
   36586:	2f00      	cmp	r7, #0
   36588:	d069      	beq.n	3665e <d_unqualified_name+0x38a>
   3658a:	6138      	str	r0, [r7, #16]
   3658c:	68e2      	ldr	r2, [r4, #12]
   3658e:	7813      	ldrb	r3, [r2, #0]
   36590:	2b45      	cmp	r3, #69	@ 0x45
   36592:	d189      	bne.n	364a8 <d_unqualified_name+0x1d4>
   36594:	1c53      	adds	r3, r2, #1
   36596:	60e3      	str	r3, [r4, #12]
   36598:	7852      	ldrb	r2, [r2, #1]
   3659a:	2a5f      	cmp	r2, #95	@ 0x5f
   3659c:	d00d      	beq.n	365ba <d_unqualified_name+0x2e6>
   3659e:	2a6e      	cmp	r2, #110	@ 0x6e
   365a0:	d082      	beq.n	364a8 <d_unqualified_name+0x1d4>
   365a2:	4620      	mov	r0, r4
   365a4:	f7fe fd0a 	bl	34fbc <d_number>
   365a8:	f110 0801 	adds.w	r8, r0, #1
   365ac:	f53f af7c 	bmi.w	364a8 <d_unqualified_name+0x1d4>
   365b0:	68e3      	ldr	r3, [r4, #12]
   365b2:	781a      	ldrb	r2, [r3, #0]
   365b4:	2a5f      	cmp	r2, #95	@ 0x5f
   365b6:	f47f af77 	bne.w	364a8 <d_unqualified_name+0x1d4>
   365ba:	3301      	adds	r3, #1
   365bc:	60e3      	str	r3, [r4, #12]
   365be:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   365c2:	4293      	cmp	r3, r2
   365c4:	f6bf af70 	bge.w	364a8 <d_unqualified_name+0x1d4>
   365c8:	6922      	ldr	r2, [r4, #16]
   365ca:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   365ce:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   365d2:	3301      	adds	r3, #1
   365d4:	2000      	movs	r0, #0
   365d6:	e9c5 0001 	strd	r0, r0, [r5, #4]
   365da:	6163      	str	r3, [r4, #20]
   365dc:	2347      	movs	r3, #71	@ 0x47
   365de:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   365e2:	e9c5 7803 	strd	r7, r8, [r5, #12]
   365e6:	e705      	b.n	363f4 <d_unqualified_name+0x120>
   365e8:	7853      	ldrb	r3, [r2, #1]
   365ea:	2b49      	cmp	r3, #73	@ 0x49
   365ec:	d024      	beq.n	36638 <d_unqualified_name+0x364>
   365ee:	f1a3 0031 	sub.w	r0, r3, #49	@ 0x31
   365f2:	2804      	cmp	r0, #4
   365f4:	f63f af58 	bhi.w	364a8 <d_unqualified_name+0x1d4>
   365f8:	3b30      	subs	r3, #48	@ 0x30
   365fa:	3202      	adds	r2, #2
   365fc:	b2df      	uxtb	r7, r3
   365fe:	60e2      	str	r2, [r4, #12]
   36600:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   36604:	4293      	cmp	r3, r2
   36606:	f6bf af4f 	bge.w	364a8 <d_unqualified_name+0x1d4>
   3660a:	f8d4 c010 	ldr.w	ip, [r4, #16]
   3660e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   36612:	eb0c 0582 	add.w	r5, ip, r2, lsl #2
   36616:	3301      	adds	r3, #1
   36618:	2000      	movs	r0, #0
   3661a:	e9c5 0001 	strd	r0, r0, [r5, #4]
   3661e:	0092      	lsls	r2, r2, #2
   36620:	6163      	str	r3, [r4, #20]
   36622:	2900      	cmp	r1, #0
   36624:	f43f af40 	beq.w	364a8 <d_unqualified_name+0x1d4>
   36628:	2307      	movs	r3, #7
   3662a:	e9c5 0001 	strd	r0, r0, [r5, #4]
   3662e:	f80c 3002 	strb.w	r3, [ip, r2]
   36632:	732f      	strb	r7, [r5, #12]
   36634:	6129      	str	r1, [r5, #16]
   36636:	e6dd      	b.n	363f4 <d_unqualified_name+0x120>
   36638:	1c53      	adds	r3, r2, #1
   3663a:	60e3      	str	r3, [r4, #12]
   3663c:	7893      	ldrb	r3, [r2, #2]
   3663e:	f1a3 0131 	sub.w	r1, r3, #49	@ 0x31
   36642:	2904      	cmp	r1, #4
   36644:	f63f af30 	bhi.w	364a8 <d_unqualified_name+0x1d4>
   36648:	3203      	adds	r2, #3
   3664a:	3b30      	subs	r3, #48	@ 0x30
   3664c:	60e2      	str	r2, [r4, #12]
   3664e:	4620      	mov	r0, r4
   36650:	b2df      	uxtb	r7, r3
   36652:	f7ff f8c7 	bl	357e4 <d_type>
   36656:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
   36658:	e7d2      	b.n	36600 <d_unqualified_name+0x32c>
   3665a:	2000      	movs	r0, #0
   3665c:	e6a8      	b.n	363b0 <d_unqualified_name+0xdc>
   3665e:	4607      	mov	r7, r0
   36660:	e794      	b.n	3658c <d_unqualified_name+0x2b8>
   36662:	2d00      	cmp	r5, #0
   36664:	f43f aed2 	beq.w	3640c <d_unqualified_name+0x138>
   36668:	462b      	mov	r3, r5
   3666a:	2500      	movs	r5, #0
   3666c:	e6c4      	b.n	363f8 <d_unqualified_name+0x124>
   3666e:	bf00      	nop

00036670 <d_expression_1>:
   36670:	68c2      	ldr	r2, [r0, #12]
   36672:	7813      	ldrb	r3, [r2, #0]
   36674:	2b4c      	cmp	r3, #76	@ 0x4c
   36676:	f000 80fa 	beq.w	3686e <d_expression_1+0x1fe>
   3667a:	2b54      	cmp	r3, #84	@ 0x54
   3667c:	f000 80f9 	beq.w	36872 <d_expression_1+0x202>
   36680:	2b73      	cmp	r3, #115	@ 0x73
   36682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36686:	4604      	mov	r4, r0
   36688:	d024      	beq.n	366d4 <d_expression_1+0x64>
   3668a:	2b66      	cmp	r3, #102	@ 0x66
   3668c:	d05a      	beq.n	36744 <d_expression_1+0xd4>
   3668e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
   36692:	2909      	cmp	r1, #9
   36694:	d947      	bls.n	36726 <d_expression_1+0xb6>
   36696:	2b6f      	cmp	r3, #111	@ 0x6f
   36698:	d040      	beq.n	3671c <d_expression_1+0xac>
   3669a:	2b69      	cmp	r3, #105	@ 0x69
   3669c:	f040 823b 	bne.w	36b16 <d_expression_1+0x4a6>
   366a0:	7853      	ldrb	r3, [r2, #1]
   366a2:	2b6c      	cmp	r3, #108	@ 0x6c
   366a4:	d11c      	bne.n	366e0 <d_expression_1+0x70>
   366a6:	3202      	adds	r2, #2
   366a8:	60c2      	str	r2, [r0, #12]
   366aa:	2500      	movs	r5, #0
   366ac:	7811      	ldrb	r1, [r2, #0]
   366ae:	2900      	cmp	r1, #0
   366b0:	f000 808c 	beq.w	367cc <d_expression_1+0x15c>
   366b4:	7853      	ldrb	r3, [r2, #1]
   366b6:	2b00      	cmp	r3, #0
   366b8:	f000 8088 	beq.w	367cc <d_expression_1+0x15c>
   366bc:	2145      	movs	r1, #69	@ 0x45
   366be:	4620      	mov	r0, r4
   366c0:	f000 fa4c 	bl	36b5c <d_exprlist>
   366c4:	462a      	mov	r2, r5
   366c6:	4603      	mov	r3, r0
   366c8:	2131      	movs	r1, #49	@ 0x31
   366ca:	4620      	mov	r0, r4
   366cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   366d0:	f7fe bbf8 	b.w	34ec4 <d_make_comp>
   366d4:	7853      	ldrb	r3, [r2, #1]
   366d6:	2b72      	cmp	r3, #114	@ 0x72
   366d8:	d07a      	beq.n	367d0 <d_expression_1+0x160>
   366da:	2b70      	cmp	r3, #112	@ 0x70
   366dc:	f000 8153 	beq.w	36986 <d_expression_1+0x316>
   366e0:	4620      	mov	r0, r4
   366e2:	f7ff fd77 	bl	361d4 <d_operator_name>
   366e6:	4605      	mov	r5, r0
   366e8:	2800      	cmp	r0, #0
   366ea:	d06f      	beq.n	367cc <d_expression_1+0x15c>
   366ec:	7803      	ldrb	r3, [r0, #0]
   366ee:	2b32      	cmp	r3, #50	@ 0x32
   366f0:	d058      	beq.n	367a4 <d_expression_1+0x134>
   366f2:	2b33      	cmp	r3, #51	@ 0x33
   366f4:	f000 80bf 	beq.w	36876 <d_expression_1+0x206>
   366f8:	2b34      	cmp	r3, #52	@ 0x34
   366fa:	d167      	bne.n	367cc <d_expression_1+0x15c>
   366fc:	68e3      	ldr	r3, [r4, #12]
   366fe:	781a      	ldrb	r2, [r3, #0]
   36700:	2a5f      	cmp	r2, #95	@ 0x5f
   36702:	f000 81ec 	beq.w	36ade <d_expression_1+0x46e>
   36706:	4620      	mov	r0, r4
   36708:	f7ff ffb2 	bl	36670 <d_expression_1>
   3670c:	4603      	mov	r3, r0
   3670e:	462a      	mov	r2, r5
   36710:	4620      	mov	r0, r4
   36712:	2137      	movs	r1, #55	@ 0x37
   36714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   36718:	f7fe bbd4 	b.w	34ec4 <d_make_comp>
   3671c:	7853      	ldrb	r3, [r2, #1]
   3671e:	2b6e      	cmp	r3, #110	@ 0x6e
   36720:	d1de      	bne.n	366e0 <d_expression_1+0x70>
   36722:	3202      	adds	r2, #2
   36724:	60c2      	str	r2, [r0, #12]
   36726:	2200      	movs	r2, #0
   36728:	4611      	mov	r1, r2
   3672a:	4620      	mov	r0, r4
   3672c:	f7ff fdd2 	bl	362d4 <d_unqualified_name>
   36730:	4605      	mov	r5, r0
   36732:	2800      	cmp	r0, #0
   36734:	d04a      	beq.n	367cc <d_expression_1+0x15c>
   36736:	68e3      	ldr	r3, [r4, #12]
   36738:	781a      	ldrb	r2, [r3, #0]
   3673a:	2a49      	cmp	r2, #73	@ 0x49
   3673c:	d064      	beq.n	36808 <d_expression_1+0x198>
   3673e:	4628      	mov	r0, r5
   36740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36744:	7853      	ldrb	r3, [r2, #1]
   36746:	2b70      	cmp	r3, #112	@ 0x70
   36748:	d1ca      	bne.n	366e0 <d_expression_1+0x70>
   3674a:	1c93      	adds	r3, r2, #2
   3674c:	60c3      	str	r3, [r0, #12]
   3674e:	7893      	ldrb	r3, [r2, #2]
   36750:	2b54      	cmp	r3, #84	@ 0x54
   36752:	f000 810f 	beq.w	36974 <d_expression_1+0x304>
   36756:	2b5f      	cmp	r3, #95	@ 0x5f
   36758:	f000 809d 	beq.w	36896 <d_expression_1+0x226>
   3675c:	2b6e      	cmp	r3, #110	@ 0x6e
   3675e:	d035      	beq.n	367cc <d_expression_1+0x15c>
   36760:	f7fe fc2c 	bl	34fbc <d_number>
   36764:	1c41      	adds	r1, r0, #1
   36766:	d431      	bmi.n	367cc <d_expression_1+0x15c>
   36768:	68e3      	ldr	r3, [r4, #12]
   3676a:	781a      	ldrb	r2, [r3, #0]
   3676c:	2a5f      	cmp	r2, #95	@ 0x5f
   3676e:	d12d      	bne.n	367cc <d_expression_1+0x15c>
   36770:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
   36774:	3301      	adds	r3, #1
   36776:	4291      	cmp	r1, r2
   36778:	60e3      	str	r3, [r4, #12]
   3677a:	d027      	beq.n	367cc <d_expression_1+0x15c>
   3677c:	3002      	adds	r0, #2
   3677e:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   36782:	4293      	cmp	r3, r2
   36784:	da22      	bge.n	367cc <d_expression_1+0x15c>
   36786:	6922      	ldr	r2, [r4, #16]
   36788:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   3678c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   36790:	3301      	adds	r3, #1
   36792:	2600      	movs	r6, #0
   36794:	e9c5 6601 	strd	r6, r6, [r5, #4]
   36798:	6163      	str	r3, [r4, #20]
   3679a:	2306      	movs	r3, #6
   3679c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   367a0:	60e8      	str	r0, [r5, #12]
   367a2:	e7cc      	b.n	3673e <d_expression_1+0xce>
   367a4:	68c1      	ldr	r1, [r0, #12]
   367a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   367a8:	688a      	ldr	r2, [r1, #8]
   367aa:	680e      	ldr	r6, [r1, #0]
   367ac:	3a02      	subs	r2, #2
   367ae:	4413      	add	r3, r2
   367b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
   367b2:	7833      	ldrb	r3, [r6, #0]
   367b4:	2b73      	cmp	r3, #115	@ 0x73
   367b6:	d134      	bne.n	36822 <d_expression_1+0x1b2>
   367b8:	7872      	ldrb	r2, [r6, #1]
   367ba:	2a74      	cmp	r2, #116	@ 0x74
   367bc:	d131      	bne.n	36822 <d_expression_1+0x1b2>
   367be:	78b2      	ldrb	r2, [r6, #2]
   367c0:	bb7a      	cbnz	r2, 36822 <d_expression_1+0x1b2>
   367c2:	4620      	mov	r0, r4
   367c4:	f7ff f80e 	bl	357e4 <d_type>
   367c8:	4603      	mov	r3, r0
   367ca:	e7a0      	b.n	3670e <d_expression_1+0x9e>
   367cc:	2500      	movs	r5, #0
   367ce:	e7b6      	b.n	3673e <d_expression_1+0xce>
   367d0:	1c93      	adds	r3, r2, #2
   367d2:	6b81      	ldr	r1, [r0, #56]	@ 0x38
   367d4:	60c3      	str	r3, [r0, #12]
   367d6:	7893      	ldrb	r3, [r2, #2]
   367d8:	b149      	cbz	r1, 367ee <d_expression_1+0x17e>
   367da:	2b55      	cmp	r3, #85	@ 0x55
   367dc:	f200 8151 	bhi.w	36a82 <d_expression_1+0x412>
   367e0:	2b42      	cmp	r3, #66	@ 0x42
   367e2:	f200 8136 	bhi.w	36a52 <d_expression_1+0x3e2>
   367e6:	3b30      	subs	r3, #48	@ 0x30
   367e8:	2b09      	cmp	r3, #9
   367ea:	f240 813a 	bls.w	36a62 <d_expression_1+0x3f2>
   367ee:	4620      	mov	r0, r4
   367f0:	f7fe fff8 	bl	357e4 <d_type>
   367f4:	4601      	mov	r1, r0
   367f6:	2200      	movs	r2, #0
   367f8:	4620      	mov	r0, r4
   367fa:	f7ff fd6b 	bl	362d4 <d_unqualified_name>
   367fe:	68e3      	ldr	r3, [r4, #12]
   36800:	781a      	ldrb	r2, [r3, #0]
   36802:	2a49      	cmp	r2, #73	@ 0x49
   36804:	4605      	mov	r5, r0
   36806:	d19a      	bne.n	3673e <d_expression_1+0xce>
   36808:	3301      	adds	r3, #1
   3680a:	60e3      	str	r3, [r4, #12]
   3680c:	4620      	mov	r0, r4
   3680e:	f000 ff91 	bl	37734 <d_template_args_1>
   36812:	462a      	mov	r2, r5
   36814:	4603      	mov	r3, r0
   36816:	2104      	movs	r1, #4
   36818:	4620      	mov	r0, r4
   3681a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3681e:	f7fe bb51 	b.w	34ec4 <d_make_comp>
   36822:	68cf      	ldr	r7, [r1, #12]
   36824:	2f03      	cmp	r7, #3
   36826:	d8d1      	bhi.n	367cc <d_expression_1+0x15c>
   36828:	e8df f007 	tbb	[pc, r7]
   3682c:	446e022d 	.word	0x446e022d
   36830:	7832      	ldrb	r2, [r6, #0]
   36832:	2a70      	cmp	r2, #112	@ 0x70
   36834:	d033      	beq.n	3689e <d_expression_1+0x22e>
   36836:	2a6d      	cmp	r2, #109	@ 0x6d
   36838:	d031      	beq.n	3689e <d_expression_1+0x22e>
   3683a:	2700      	movs	r7, #0
   3683c:	2b73      	cmp	r3, #115	@ 0x73
   3683e:	f040 809d 	bne.w	3697c <d_expression_1+0x30c>
   36842:	7873      	ldrb	r3, [r6, #1]
   36844:	2b50      	cmp	r3, #80	@ 0x50
   36846:	f040 8099 	bne.w	3697c <d_expression_1+0x30c>
   3684a:	78b3      	ldrb	r3, [r6, #2]
   3684c:	2b00      	cmp	r3, #0
   3684e:	f040 8095 	bne.w	3697c <d_expression_1+0x30c>
   36852:	4620      	mov	r0, r4
   36854:	f000 ff6e 	bl	37734 <d_template_args_1>
   36858:	4603      	mov	r3, r0
   3685a:	2f00      	cmp	r7, #0
   3685c:	f43f af57 	beq.w	3670e <d_expression_1+0x9e>
   36860:	461a      	mov	r2, r3
   36862:	2139      	movs	r1, #57	@ 0x39
   36864:	4620      	mov	r0, r4
   36866:	f7fe fb2d 	bl	34ec4 <d_make_comp>
   3686a:	4603      	mov	r3, r0
   3686c:	e74f      	b.n	3670e <d_expression_1+0x9e>
   3686e:	f000 bea7 	b.w	375c0 <d_expr_primary>
   36872:	f7fe bded 	b.w	35450 <d_template_param>
   36876:	68c3      	ldr	r3, [r0, #12]
   36878:	2b01      	cmp	r3, #1
   3687a:	f43f af44 	beq.w	36706 <d_expression_1+0x96>
   3687e:	2b02      	cmp	r3, #2
   36880:	d0a4      	beq.n	367cc <d_expression_1+0x15c>
   36882:	2b00      	cmp	r3, #0
   36884:	d1a2      	bne.n	367cc <d_expression_1+0x15c>
   36886:	462a      	mov	r2, r5
   36888:	4620      	mov	r0, r4
   3688a:	2300      	movs	r3, #0
   3688c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   36890:	2136      	movs	r1, #54	@ 0x36
   36892:	f7fe bb17 	b.w	34ec4 <d_make_comp>
   36896:	3203      	adds	r2, #3
   36898:	60c2      	str	r2, [r0, #12]
   3689a:	2001      	movs	r0, #1
   3689c:	e76f      	b.n	3677e <d_expression_1+0x10e>
   3689e:	7871      	ldrb	r1, [r6, #1]
   368a0:	4291      	cmp	r1, r2
   368a2:	d1ca      	bne.n	3683a <d_expression_1+0x1ca>
   368a4:	68e2      	ldr	r2, [r4, #12]
   368a6:	7811      	ldrb	r1, [r2, #0]
   368a8:	295f      	cmp	r1, #95	@ 0x5f
   368aa:	d1c7      	bne.n	3683c <d_expression_1+0x1cc>
   368ac:	3201      	adds	r2, #1
   368ae:	60e2      	str	r2, [r4, #12]
   368b0:	7833      	ldrb	r3, [r6, #0]
   368b2:	e7c2      	b.n	3683a <d_expression_1+0x1ca>
   368b4:	2b71      	cmp	r3, #113	@ 0x71
   368b6:	d172      	bne.n	3699e <d_expression_1+0x32e>
   368b8:	7872      	ldrb	r2, [r6, #1]
   368ba:	2a75      	cmp	r2, #117	@ 0x75
   368bc:	d16f      	bne.n	3699e <d_expression_1+0x32e>
   368be:	78b2      	ldrb	r2, [r6, #2]
   368c0:	2a00      	cmp	r2, #0
   368c2:	d16c      	bne.n	3699e <d_expression_1+0x32e>
   368c4:	4620      	mov	r0, r4
   368c6:	f7ff fed3 	bl	36670 <d_expression_1>
   368ca:	4606      	mov	r6, r0
   368cc:	4620      	mov	r0, r4
   368ce:	f7ff fecf 	bl	36670 <d_expression_1>
   368d2:	4607      	mov	r7, r0
   368d4:	4620      	mov	r0, r4
   368d6:	f7ff fecb 	bl	36670 <d_expression_1>
   368da:	4603      	mov	r3, r0
   368dc:	2800      	cmp	r0, #0
   368de:	f43f af75 	beq.w	367cc <d_expression_1+0x15c>
   368e2:	463a      	mov	r2, r7
   368e4:	213c      	movs	r1, #60	@ 0x3c
   368e6:	4620      	mov	r0, r4
   368e8:	f7fe faec 	bl	34ec4 <d_make_comp>
   368ec:	4632      	mov	r2, r6
   368ee:	4603      	mov	r3, r0
   368f0:	213b      	movs	r1, #59	@ 0x3b
   368f2:	4620      	mov	r0, r4
   368f4:	f7fe fae6 	bl	34ec4 <d_make_comp>
   368f8:	462a      	mov	r2, r5
   368fa:	4603      	mov	r3, r0
   368fc:	213a      	movs	r1, #58	@ 0x3a
   368fe:	4620      	mov	r0, r4
   36900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   36904:	f7fe bade 	b.w	34ec4 <d_make_comp>
   36908:	68eb      	ldr	r3, [r5, #12]
   3690a:	681b      	ldr	r3, [r3, #0]
   3690c:	785a      	ldrb	r2, [r3, #1]
   3690e:	2a63      	cmp	r2, #99	@ 0x63
   36910:	f000 80bc 	beq.w	36a8c <d_expression_1+0x41c>
   36914:	7833      	ldrb	r3, [r6, #0]
   36916:	2b66      	cmp	r3, #102	@ 0x66
   36918:	f000 80dc 	beq.w	36ad4 <d_expression_1+0x464>
   3691c:	2b64      	cmp	r3, #100	@ 0x64
   3691e:	f040 80d0 	bne.w	36ac2 <d_expression_1+0x452>
   36922:	7873      	ldrb	r3, [r6, #1]
   36924:	2b69      	cmp	r3, #105	@ 0x69
   36926:	f040 80cc 	bne.w	36ac2 <d_expression_1+0x452>
   3692a:	78b2      	ldrb	r2, [r6, #2]
   3692c:	2a00      	cmp	r2, #0
   3692e:	f040 80c8 	bne.w	36ac2 <d_expression_1+0x452>
   36932:	4611      	mov	r1, r2
   36934:	4620      	mov	r0, r4
   36936:	f7ff fccd 	bl	362d4 <d_unqualified_name>
   3693a:	4607      	mov	r7, r0
   3693c:	7833      	ldrb	r3, [r6, #0]
   3693e:	2b63      	cmp	r3, #99	@ 0x63
   36940:	d15f      	bne.n	36a02 <d_expression_1+0x392>
   36942:	7872      	ldrb	r2, [r6, #1]
   36944:	2a6c      	cmp	r2, #108	@ 0x6c
   36946:	d15c      	bne.n	36a02 <d_expression_1+0x392>
   36948:	78b2      	ldrb	r2, [r6, #2]
   3694a:	2a00      	cmp	r2, #0
   3694c:	d159      	bne.n	36a02 <d_expression_1+0x392>
   3694e:	2145      	movs	r1, #69	@ 0x45
   36950:	4620      	mov	r0, r4
   36952:	f000 f903 	bl	36b5c <d_exprlist>
   36956:	4606      	mov	r6, r0
   36958:	4633      	mov	r3, r6
   3695a:	463a      	mov	r2, r7
   3695c:	2139      	movs	r1, #57	@ 0x39
   3695e:	4620      	mov	r0, r4
   36960:	f7fe fab0 	bl	34ec4 <d_make_comp>
   36964:	462a      	mov	r2, r5
   36966:	4603      	mov	r3, r0
   36968:	2138      	movs	r1, #56	@ 0x38
   3696a:	4620      	mov	r0, r4
   3696c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   36970:	f7fe baa8 	b.w	34ec4 <d_make_comp>
   36974:	3203      	adds	r2, #3
   36976:	60c2      	str	r2, [r0, #12]
   36978:	2000      	movs	r0, #0
   3697a:	e700      	b.n	3677e <d_expression_1+0x10e>
   3697c:	4620      	mov	r0, r4
   3697e:	f7ff fe77 	bl	36670 <d_expression_1>
   36982:	4603      	mov	r3, r0
   36984:	e769      	b.n	3685a <d_expression_1+0x1ea>
   36986:	3202      	adds	r2, #2
   36988:	60c2      	str	r2, [r0, #12]
   3698a:	f7ff fe71 	bl	36670 <d_expression_1>
   3698e:	2300      	movs	r3, #0
   36990:	4602      	mov	r2, r0
   36992:	214c      	movs	r1, #76	@ 0x4c
   36994:	4620      	mov	r0, r4
   36996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3699a:	f7fe ba93 	b.w	34ec4 <d_make_comp>
   3699e:	2b64      	cmp	r3, #100	@ 0x64
   369a0:	d105      	bne.n	369ae <d_expression_1+0x33e>
   369a2:	7873      	ldrb	r3, [r6, #1]
   369a4:	2b58      	cmp	r3, #88	@ 0x58
   369a6:	d102      	bne.n	369ae <d_expression_1+0x33e>
   369a8:	78b3      	ldrb	r3, [r6, #2]
   369aa:	2b00      	cmp	r3, #0
   369ac:	d08a      	beq.n	368c4 <d_expression_1+0x254>
   369ae:	7833      	ldrb	r3, [r6, #0]
   369b0:	2b66      	cmp	r3, #102	@ 0x66
   369b2:	f000 809c 	beq.w	36aee <d_expression_1+0x47e>
   369b6:	2b6e      	cmp	r3, #110	@ 0x6e
   369b8:	f47f af08 	bne.w	367cc <d_expression_1+0x15c>
   369bc:	7873      	ldrb	r3, [r6, #1]
   369be:	2b77      	cmp	r3, #119	@ 0x77
   369c0:	d002      	beq.n	369c8 <d_expression_1+0x358>
   369c2:	2b61      	cmp	r3, #97	@ 0x61
   369c4:	f47f af02 	bne.w	367cc <d_expression_1+0x15c>
   369c8:	215f      	movs	r1, #95	@ 0x5f
   369ca:	4620      	mov	r0, r4
   369cc:	f000 f8c6 	bl	36b5c <d_exprlist>
   369d0:	4606      	mov	r6, r0
   369d2:	4620      	mov	r0, r4
   369d4:	f7fe ff06 	bl	357e4 <d_type>
   369d8:	68e3      	ldr	r3, [r4, #12]
   369da:	781a      	ldrb	r2, [r3, #0]
   369dc:	2a45      	cmp	r2, #69	@ 0x45
   369de:	4607      	mov	r7, r0
   369e0:	f000 8095 	beq.w	36b0e <d_expression_1+0x49e>
   369e4:	2a70      	cmp	r2, #112	@ 0x70
   369e6:	f000 8086 	beq.w	36af6 <d_expression_1+0x486>
   369ea:	2a69      	cmp	r2, #105	@ 0x69
   369ec:	f47f aeee 	bne.w	367cc <d_expression_1+0x15c>
   369f0:	785b      	ldrb	r3, [r3, #1]
   369f2:	2b6c      	cmp	r3, #108	@ 0x6c
   369f4:	f47f aeea 	bne.w	367cc <d_expression_1+0x15c>
   369f8:	4620      	mov	r0, r4
   369fa:	f7ff fe39 	bl	36670 <d_expression_1>
   369fe:	4603      	mov	r3, r0
   36a00:	e76f      	b.n	368e2 <d_expression_1+0x272>
   36a02:	2b64      	cmp	r3, #100	@ 0x64
   36a04:	d150      	bne.n	36aa8 <d_expression_1+0x438>
   36a06:	7872      	ldrb	r2, [r6, #1]
   36a08:	2a74      	cmp	r2, #116	@ 0x74
   36a0a:	d14d      	bne.n	36aa8 <d_expression_1+0x438>
   36a0c:	78b2      	ldrb	r2, [r6, #2]
   36a0e:	2a00      	cmp	r2, #0
   36a10:	d14a      	bne.n	36aa8 <d_expression_1+0x438>
   36a12:	68e3      	ldr	r3, [r4, #12]
   36a14:	781a      	ldrb	r2, [r3, #0]
   36a16:	2a67      	cmp	r2, #103	@ 0x67
   36a18:	d058      	beq.n	36acc <d_expression_1+0x45c>
   36a1a:	2a73      	cmp	r2, #115	@ 0x73
   36a1c:	d102      	bne.n	36a24 <d_expression_1+0x3b4>
   36a1e:	785b      	ldrb	r3, [r3, #1]
   36a20:	2b72      	cmp	r3, #114	@ 0x72
   36a22:	d049      	beq.n	36ab8 <d_expression_1+0x448>
   36a24:	2200      	movs	r2, #0
   36a26:	4611      	mov	r1, r2
   36a28:	4620      	mov	r0, r4
   36a2a:	f7ff fc53 	bl	362d4 <d_unqualified_name>
   36a2e:	68e3      	ldr	r3, [r4, #12]
   36a30:	781a      	ldrb	r2, [r3, #0]
   36a32:	2a49      	cmp	r2, #73	@ 0x49
   36a34:	4606      	mov	r6, r0
   36a36:	d18f      	bne.n	36958 <d_expression_1+0x2e8>
   36a38:	3301      	adds	r3, #1
   36a3a:	60e3      	str	r3, [r4, #12]
   36a3c:	4620      	mov	r0, r4
   36a3e:	f000 fe79 	bl	37734 <d_template_args_1>
   36a42:	4632      	mov	r2, r6
   36a44:	4603      	mov	r3, r0
   36a46:	2104      	movs	r1, #4
   36a48:	4620      	mov	r0, r4
   36a4a:	f7fe fa3b 	bl	34ec4 <d_make_comp>
   36a4e:	4606      	mov	r6, r0
   36a50:	e782      	b.n	36958 <d_expression_1+0x2e8>
   36a52:	4a41      	ldr	r2, [pc, #260]	@ (36b58 <d_expression_1+0x4e8>)
   36a54:	3b43      	subs	r3, #67	@ 0x43
   36a56:	b2db      	uxtb	r3, r3
   36a58:	fa22 f303 	lsr.w	r3, r2, r3
   36a5c:	07db      	lsls	r3, r3, #31
   36a5e:	f57f aec6 	bpl.w	367ee <d_expression_1+0x17e>
   36a62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   36a66:	63a3      	str	r3, [r4, #56]	@ 0x38
   36a68:	2100      	movs	r1, #0
   36a6a:	4620      	mov	r0, r4
   36a6c:	f000 fe94 	bl	37798 <d_prefix>
   36a70:	68e3      	ldr	r3, [r4, #12]
   36a72:	781a      	ldrb	r2, [r3, #0]
   36a74:	2a45      	cmp	r2, #69	@ 0x45
   36a76:	4601      	mov	r1, r0
   36a78:	f47f aebd 	bne.w	367f6 <d_expression_1+0x186>
   36a7c:	3301      	adds	r3, #1
   36a7e:	60e3      	str	r3, [r4, #12]
   36a80:	e6b9      	b.n	367f6 <d_expression_1+0x186>
   36a82:	3b61      	subs	r3, #97	@ 0x61
   36a84:	2b19      	cmp	r3, #25
   36a86:	f63f aeb2 	bhi.w	367ee <d_expression_1+0x17e>
   36a8a:	e7ea      	b.n	36a62 <d_expression_1+0x3f2>
   36a8c:	781b      	ldrb	r3, [r3, #0]
   36a8e:	f1a3 0272 	sub.w	r2, r3, #114	@ 0x72
   36a92:	2a01      	cmp	r2, #1
   36a94:	d903      	bls.n	36a9e <d_expression_1+0x42e>
   36a96:	3b63      	subs	r3, #99	@ 0x63
   36a98:	2b01      	cmp	r3, #1
   36a9a:	f63f af3b 	bhi.w	36914 <d_expression_1+0x2a4>
   36a9e:	4620      	mov	r0, r4
   36aa0:	f7fe fea0 	bl	357e4 <d_type>
   36aa4:	4607      	mov	r7, r0
   36aa6:	e749      	b.n	3693c <d_expression_1+0x2cc>
   36aa8:	2b70      	cmp	r3, #112	@ 0x70
   36aaa:	d105      	bne.n	36ab8 <d_expression_1+0x448>
   36aac:	7873      	ldrb	r3, [r6, #1]
   36aae:	2b74      	cmp	r3, #116	@ 0x74
   36ab0:	d102      	bne.n	36ab8 <d_expression_1+0x448>
   36ab2:	78b3      	ldrb	r3, [r6, #2]
   36ab4:	2b00      	cmp	r3, #0
   36ab6:	d0ac      	beq.n	36a12 <d_expression_1+0x3a2>
   36ab8:	4620      	mov	r0, r4
   36aba:	f7ff fdd9 	bl	36670 <d_expression_1>
   36abe:	4606      	mov	r6, r0
   36ac0:	e74a      	b.n	36958 <d_expression_1+0x2e8>
   36ac2:	4620      	mov	r0, r4
   36ac4:	f7ff fdd4 	bl	36670 <d_expression_1>
   36ac8:	4607      	mov	r7, r0
   36aca:	e737      	b.n	3693c <d_expression_1+0x2cc>
   36acc:	785b      	ldrb	r3, [r3, #1]
   36ace:	2b73      	cmp	r3, #115	@ 0x73
   36ad0:	d1a8      	bne.n	36a24 <d_expression_1+0x3b4>
   36ad2:	e7f1      	b.n	36ab8 <d_expression_1+0x448>
   36ad4:	4620      	mov	r0, r4
   36ad6:	f7ff fb7d 	bl	361d4 <d_operator_name>
   36ada:	4607      	mov	r7, r0
   36adc:	e72e      	b.n	3693c <d_expression_1+0x2cc>
   36ade:	3301      	adds	r3, #1
   36ae0:	60e3      	str	r3, [r4, #12]
   36ae2:	2145      	movs	r1, #69	@ 0x45
   36ae4:	4620      	mov	r0, r4
   36ae6:	f000 f839 	bl	36b5c <d_exprlist>
   36aea:	4603      	mov	r3, r0
   36aec:	e60f      	b.n	3670e <d_expression_1+0x9e>
   36aee:	4620      	mov	r0, r4
   36af0:	f7ff fb70 	bl	361d4 <d_operator_name>
   36af4:	e6e9      	b.n	368ca <d_expression_1+0x25a>
   36af6:	785a      	ldrb	r2, [r3, #1]
   36af8:	2a69      	cmp	r2, #105	@ 0x69
   36afa:	f47f ae67 	bne.w	367cc <d_expression_1+0x15c>
   36afe:	3302      	adds	r3, #2
   36b00:	60e3      	str	r3, [r4, #12]
   36b02:	2145      	movs	r1, #69	@ 0x45
   36b04:	4620      	mov	r0, r4
   36b06:	f000 f829 	bl	36b5c <d_exprlist>
   36b0a:	4603      	mov	r3, r0
   36b0c:	e6e9      	b.n	368e2 <d_expression_1+0x272>
   36b0e:	3301      	adds	r3, #1
   36b10:	60e3      	str	r3, [r4, #12]
   36b12:	2300      	movs	r3, #0
   36b14:	e6e5      	b.n	368e2 <d_expression_1+0x272>
   36b16:	2b74      	cmp	r3, #116	@ 0x74
   36b18:	d012      	beq.n	36b40 <d_expression_1+0x4d0>
   36b1a:	2b75      	cmp	r3, #117	@ 0x75
   36b1c:	f47f ade0 	bne.w	366e0 <d_expression_1+0x70>
   36b20:	3201      	adds	r2, #1
   36b22:	60c2      	str	r2, [r0, #12]
   36b24:	f7fe fcfe 	bl	35524 <d_source_name>
   36b28:	4605      	mov	r5, r0
   36b2a:	4620      	mov	r0, r4
   36b2c:	f000 fe02 	bl	37734 <d_template_args_1>
   36b30:	462a      	mov	r2, r5
   36b32:	4603      	mov	r3, r0
   36b34:	213f      	movs	r1, #63	@ 0x3f
   36b36:	4620      	mov	r0, r4
   36b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   36b3c:	f7fe b9c2 	b.w	34ec4 <d_make_comp>
   36b40:	7853      	ldrb	r3, [r2, #1]
   36b42:	2b6c      	cmp	r3, #108	@ 0x6c
   36b44:	f47f adcc 	bne.w	366e0 <d_expression_1+0x70>
   36b48:	3202      	adds	r2, #2
   36b4a:	60c2      	str	r2, [r0, #12]
   36b4c:	f7fe fe4a 	bl	357e4 <d_type>
   36b50:	68e2      	ldr	r2, [r4, #12]
   36b52:	4605      	mov	r5, r0
   36b54:	e5aa      	b.n	366ac <d_expression_1+0x3c>
   36b56:	bf00      	nop
   36b58:	00040201 	.word	0x00040201

00036b5c <d_exprlist>:
   36b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36b60:	68c2      	ldr	r2, [r0, #12]
   36b62:	460e      	mov	r6, r1
   36b64:	7811      	ldrb	r1, [r2, #0]
   36b66:	b082      	sub	sp, #8
   36b68:	2300      	movs	r3, #0
   36b6a:	42b1      	cmp	r1, r6
   36b6c:	4604      	mov	r4, r0
   36b6e:	9301      	str	r3, [sp, #4]
   36b70:	d024      	beq.n	36bbc <d_exprlist+0x60>
   36b72:	ad01      	add	r5, sp, #4
   36b74:	2701      	movs	r7, #1
   36b76:	e009      	b.n	36b8c <d_exprlist+0x30>
   36b78:	f7fe f9a4 	bl	34ec4 <d_make_comp>
   36b7c:	6028      	str	r0, [r5, #0]
   36b7e:	f100 0510 	add.w	r5, r0, #16
   36b82:	b188      	cbz	r0, 36ba8 <d_exprlist+0x4c>
   36b84:	68e3      	ldr	r3, [r4, #12]
   36b86:	781a      	ldrb	r2, [r3, #0]
   36b88:	42b2      	cmp	r2, r6
   36b8a:	d011      	beq.n	36bb0 <d_exprlist+0x54>
   36b8c:	f8d4 8030 	ldr.w	r8, [r4, #48]	@ 0x30
   36b90:	6327      	str	r7, [r4, #48]	@ 0x30
   36b92:	4620      	mov	r0, r4
   36b94:	f7ff fd6c 	bl	36670 <d_expression_1>
   36b98:	4602      	mov	r2, r0
   36b9a:	2300      	movs	r3, #0
   36b9c:	212e      	movs	r1, #46	@ 0x2e
   36b9e:	4620      	mov	r0, r4
   36ba0:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
   36ba4:	2a00      	cmp	r2, #0
   36ba6:	d1e7      	bne.n	36b78 <d_exprlist+0x1c>
   36ba8:	2000      	movs	r0, #0
   36baa:	b002      	add	sp, #8
   36bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36bb0:	9801      	ldr	r0, [sp, #4]
   36bb2:	3301      	adds	r3, #1
   36bb4:	60e3      	str	r3, [r4, #12]
   36bb6:	b002      	add	sp, #8
   36bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36bbc:	3201      	adds	r2, #1
   36bbe:	60c2      	str	r2, [r0, #12]
   36bc0:	212e      	movs	r1, #46	@ 0x2e
   36bc2:	461a      	mov	r2, r3
   36bc4:	b002      	add	sp, #8
   36bc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   36bca:	f7fe b97b 	b.w	34ec4 <d_make_comp>
   36bce:	bf00      	nop

00036bd0 <d_cv_qualifiers>:
   36bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36bd4:	4691      	mov	r9, r2
   36bd6:	f009 0301 	and.w	r3, r9, #1
   36bda:	68c2      	ldr	r2, [r0, #12]
   36bdc:	2b00      	cmp	r3, #0
   36bde:	460f      	mov	r7, r1
   36be0:	b083      	sub	sp, #12
   36be2:	7811      	ldrb	r1, [r2, #0]
   36be4:	4604      	mov	r4, r0
   36be6:	bf15      	itete	ne
   36be8:	f04f 0a1e 	movne.w	sl, #30
   36bec:	f04f 0a1b 	moveq.w	sl, #27
   36bf0:	f04f 081d 	movne.w	r8, #29
   36bf4:	f04f 081a 	moveq.w	r8, #26
   36bf8:	bf14      	ite	ne
   36bfa:	261c      	movne	r6, #28
   36bfc:	2619      	moveq	r6, #25
   36bfe:	463d      	mov	r5, r7
   36c00:	f04f 0b01 	mov.w	fp, #1
   36c04:	e01b      	b.n	36c3e <d_cv_qualifiers+0x6e>
   36c06:	2956      	cmp	r1, #86	@ 0x56
   36c08:	d032      	beq.n	36c70 <d_cv_qualifiers+0xa0>
   36c0a:	294b      	cmp	r1, #75	@ 0x4b
   36c0c:	d036      	beq.n	36c7c <d_cv_qualifiers+0xac>
   36c0e:	7853      	ldrb	r3, [r2, #1]
   36c10:	b34b      	cbz	r3, 36c66 <d_cv_qualifiers+0x96>
   36c12:	1c93      	adds	r3, r2, #2
   36c14:	60e3      	str	r3, [r4, #12]
   36c16:	7853      	ldrb	r3, [r2, #1]
   36c18:	2b78      	cmp	r3, #120	@ 0x78
   36c1a:	d035      	beq.n	36c88 <d_cv_qualifiers+0xb8>
   36c1c:	2b6f      	cmp	r3, #111	@ 0x6f
   36c1e:	d152      	bne.n	36cc6 <d_cv_qualifiers+0xf6>
   36c20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   36c22:	3309      	adds	r3, #9
   36c24:	62e3      	str	r3, [r4, #44]	@ 0x2c
   36c26:	2150      	movs	r1, #80	@ 0x50
   36c28:	2300      	movs	r3, #0
   36c2a:	2200      	movs	r2, #0
   36c2c:	4620      	mov	r0, r4
   36c2e:	f7fe f949 	bl	34ec4 <d_make_comp>
   36c32:	6028      	str	r0, [r5, #0]
   36c34:	b1b8      	cbz	r0, 36c66 <d_cv_qualifiers+0x96>
   36c36:	68e2      	ldr	r2, [r4, #12]
   36c38:	7811      	ldrb	r1, [r2, #0]
   36c3a:	f100 050c 	add.w	r5, r0, #12
   36c3e:	4610      	mov	r0, r2
   36c40:	f7fe fb2e 	bl	352a0 <next_is_type_qual.isra.0>
   36c44:	b330      	cbz	r0, 36c94 <d_cv_qualifiers+0xc4>
   36c46:	1c53      	adds	r3, r2, #1
   36c48:	2972      	cmp	r1, #114	@ 0x72
   36c4a:	60e3      	str	r3, [r4, #12]
   36c4c:	d1db      	bne.n	36c06 <d_cv_qualifiers+0x36>
   36c4e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   36c50:	3309      	adds	r3, #9
   36c52:	62e3      	str	r3, [r4, #44]	@ 0x2c
   36c54:	4631      	mov	r1, r6
   36c56:	2300      	movs	r3, #0
   36c58:	2200      	movs	r2, #0
   36c5a:	4620      	mov	r0, r4
   36c5c:	f7fe f932 	bl	34ec4 <d_make_comp>
   36c60:	6028      	str	r0, [r5, #0]
   36c62:	2800      	cmp	r0, #0
   36c64:	d1e7      	bne.n	36c36 <d_cv_qualifiers+0x66>
   36c66:	2500      	movs	r5, #0
   36c68:	4628      	mov	r0, r5
   36c6a:	b003      	add	sp, #12
   36c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36c70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   36c72:	3309      	adds	r3, #9
   36c74:	62e3      	str	r3, [r4, #44]	@ 0x2c
   36c76:	4641      	mov	r1, r8
   36c78:	2300      	movs	r3, #0
   36c7a:	e7d6      	b.n	36c2a <d_cv_qualifiers+0x5a>
   36c7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   36c7e:	3306      	adds	r3, #6
   36c80:	62e3      	str	r3, [r4, #44]	@ 0x2c
   36c82:	4651      	mov	r1, sl
   36c84:	2300      	movs	r3, #0
   36c86:	e7d0      	b.n	36c2a <d_cv_qualifiers+0x5a>
   36c88:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   36c8a:	3311      	adds	r3, #17
   36c8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
   36c8e:	214e      	movs	r1, #78	@ 0x4e
   36c90:	2300      	movs	r3, #0
   36c92:	e7ca      	b.n	36c2a <d_cv_qualifiers+0x5a>
   36c94:	f1b9 0f00 	cmp.w	r9, #0
   36c98:	d1e6      	bne.n	36c68 <d_cv_qualifiers+0x98>
   36c9a:	2946      	cmp	r1, #70	@ 0x46
   36c9c:	d1e4      	bne.n	36c68 <d_cv_qualifiers+0x98>
   36c9e:	42bd      	cmp	r5, r7
   36ca0:	d0e2      	beq.n	36c68 <d_cv_qualifiers+0x98>
   36ca2:	201d      	movs	r0, #29
   36ca4:	211e      	movs	r1, #30
   36ca6:	221c      	movs	r2, #28
   36ca8:	e007      	b.n	36cba <d_cv_qualifiers+0xea>
   36caa:	2b1b      	cmp	r3, #27
   36cac:	d037      	beq.n	36d1e <d_cv_qualifiers+0x14e>
   36cae:	2b19      	cmp	r3, #25
   36cb0:	d100      	bne.n	36cb4 <d_cv_qualifiers+0xe4>
   36cb2:	703a      	strb	r2, [r7, #0]
   36cb4:	370c      	adds	r7, #12
   36cb6:	42bd      	cmp	r5, r7
   36cb8:	d0d6      	beq.n	36c68 <d_cv_qualifiers+0x98>
   36cba:	683f      	ldr	r7, [r7, #0]
   36cbc:	783b      	ldrb	r3, [r7, #0]
   36cbe:	2b1a      	cmp	r3, #26
   36cc0:	d1f3      	bne.n	36caa <d_cv_qualifiers+0xda>
   36cc2:	7038      	strb	r0, [r7, #0]
   36cc4:	e7f6      	b.n	36cb4 <d_cv_qualifiers+0xe4>
   36cc6:	2b4f      	cmp	r3, #79	@ 0x4f
   36cc8:	d116      	bne.n	36cf8 <d_cv_qualifiers+0x128>
   36cca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   36ccc:	3309      	adds	r3, #9
   36cce:	62e3      	str	r3, [r4, #44]	@ 0x2c
   36cd0:	4620      	mov	r0, r4
   36cd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
   36cd4:	f8c4 b030 	str.w	fp, [r4, #48]	@ 0x30
   36cd8:	9301      	str	r3, [sp, #4]
   36cda:	f7ff fcc9 	bl	36670 <d_expression_1>
   36cde:	9b01      	ldr	r3, [sp, #4]
   36ce0:	6323      	str	r3, [r4, #48]	@ 0x30
   36ce2:	4603      	mov	r3, r0
   36ce4:	2800      	cmp	r0, #0
   36ce6:	d0be      	beq.n	36c66 <d_cv_qualifiers+0x96>
   36ce8:	68e2      	ldr	r2, [r4, #12]
   36cea:	7811      	ldrb	r1, [r2, #0]
   36cec:	2945      	cmp	r1, #69	@ 0x45
   36cee:	d1ba      	bne.n	36c66 <d_cv_qualifiers+0x96>
   36cf0:	3201      	adds	r2, #1
   36cf2:	60e2      	str	r2, [r4, #12]
   36cf4:	2150      	movs	r1, #80	@ 0x50
   36cf6:	e798      	b.n	36c2a <d_cv_qualifiers+0x5a>
   36cf8:	2b77      	cmp	r3, #119	@ 0x77
   36cfa:	d1b4      	bne.n	36c66 <d_cv_qualifiers+0x96>
   36cfc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   36cfe:	3306      	adds	r3, #6
   36d00:	62e3      	str	r3, [r4, #44]	@ 0x2c
   36d02:	4620      	mov	r0, r4
   36d04:	f7ff f950 	bl	35fa8 <d_parmlist>
   36d08:	4603      	mov	r3, r0
   36d0a:	2800      	cmp	r0, #0
   36d0c:	d0ab      	beq.n	36c66 <d_cv_qualifiers+0x96>
   36d0e:	68e2      	ldr	r2, [r4, #12]
   36d10:	7811      	ldrb	r1, [r2, #0]
   36d12:	2945      	cmp	r1, #69	@ 0x45
   36d14:	d1a7      	bne.n	36c66 <d_cv_qualifiers+0x96>
   36d16:	3201      	adds	r2, #1
   36d18:	60e2      	str	r2, [r4, #12]
   36d1a:	2151      	movs	r1, #81	@ 0x51
   36d1c:	e785      	b.n	36c2a <d_cv_qualifiers+0x5a>
   36d1e:	7039      	strb	r1, [r7, #0]
   36d20:	e7c8      	b.n	36cb4 <d_cv_qualifiers+0xe4>
   36d22:	bf00      	nop

00036d24 <d_name>:
   36d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   36d26:	68c2      	ldr	r2, [r0, #12]
   36d28:	7813      	ldrb	r3, [r2, #0]
   36d2a:	3b4e      	subs	r3, #78	@ 0x4e
   36d2c:	b085      	sub	sp, #20
   36d2e:	4604      	mov	r4, r0
   36d30:	460e      	mov	r6, r1
   36d32:	2b0c      	cmp	r3, #12
   36d34:	d808      	bhi.n	36d48 <d_name+0x24>
   36d36:	e8df f003 	tbb	[pc, r3]
   36d3a:	077c      	.short	0x077c
   36d3c:	2d070707 	.word	0x2d070707
   36d40:	07072307 	.word	0x07072307
   36d44:	0707      	.short	0x0707
   36d46:	4a          	.byte	0x4a
   36d47:	00          	.byte	0x00
   36d48:	2500      	movs	r5, #0
   36d4a:	462f      	mov	r7, r5
   36d4c:	462a      	mov	r2, r5
   36d4e:	4639      	mov	r1, r7
   36d50:	4620      	mov	r0, r4
   36d52:	f7ff fabf 	bl	362d4 <d_unqualified_name>
   36d56:	68e3      	ldr	r3, [r4, #12]
   36d58:	781a      	ldrb	r2, [r3, #0]
   36d5a:	2a49      	cmp	r2, #73	@ 0x49
   36d5c:	4605      	mov	r5, r0
   36d5e:	f000 808a 	beq.w	36e76 <d_name+0x152>
   36d62:	b156      	cbz	r6, 36d7a <d_name+0x56>
   36d64:	2d00      	cmp	r5, #0
   36d66:	d062      	beq.n	36e2e <d_name+0x10a>
   36d68:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   36d6c:	4293      	cmp	r3, r2
   36d6e:	da5e      	bge.n	36e2e <d_name+0x10a>
   36d70:	69e1      	ldr	r1, [r4, #28]
   36d72:	1c5a      	adds	r2, r3, #1
   36d74:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   36d78:	6222      	str	r2, [r4, #32]
   36d7a:	4628      	mov	r0, r5
   36d7c:	b005      	add	sp, #20
   36d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36d80:	2200      	movs	r2, #0
   36d82:	4611      	mov	r1, r2
   36d84:	f7ff faa6 	bl	362d4 <d_unqualified_name>
   36d88:	4605      	mov	r5, r0
   36d8a:	2e00      	cmp	r6, #0
   36d8c:	d1ea      	bne.n	36d64 <d_name+0x40>
   36d8e:	4628      	mov	r0, r5
   36d90:	b005      	add	sp, #20
   36d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36d94:	7853      	ldrb	r3, [r2, #1]
   36d96:	2b74      	cmp	r3, #116	@ 0x74
   36d98:	f000 808d 	beq.w	36eb6 <d_name+0x192>
   36d9c:	2700      	movs	r7, #0
   36d9e:	2100      	movs	r1, #0
   36da0:	4620      	mov	r0, r4
   36da2:	f7fe fc2d 	bl	35600 <d_substitution>
   36da6:	4605      	mov	r5, r0
   36da8:	2800      	cmp	r0, #0
   36daa:	d040      	beq.n	36e2e <d_name+0x10a>
   36dac:	7803      	ldrb	r3, [r0, #0]
   36dae:	3b53      	subs	r3, #83	@ 0x53
   36db0:	2b01      	cmp	r3, #1
   36db2:	d9cb      	bls.n	36d4c <d_name+0x28>
   36db4:	2f00      	cmp	r7, #0
   36db6:	d13a      	bne.n	36e2e <d_name+0x10a>
   36db8:	68e3      	ldr	r3, [r4, #12]
   36dba:	781a      	ldrb	r2, [r3, #0]
   36dbc:	2a49      	cmp	r2, #73	@ 0x49
   36dbe:	d1dc      	bne.n	36d7a <d_name+0x56>
   36dc0:	3301      	adds	r3, #1
   36dc2:	60e3      	str	r3, [r4, #12]
   36dc4:	4620      	mov	r0, r4
   36dc6:	f000 fcb5 	bl	37734 <d_template_args_1>
   36dca:	4603      	mov	r3, r0
   36dcc:	e064      	b.n	36e98 <d_name+0x174>
   36dce:	1c53      	adds	r3, r2, #1
   36dd0:	60c3      	str	r3, [r0, #12]
   36dd2:	7853      	ldrb	r3, [r2, #1]
   36dd4:	2b47      	cmp	r3, #71	@ 0x47
   36dd6:	d001      	beq.n	36ddc <d_name+0xb8>
   36dd8:	2b54      	cmp	r3, #84	@ 0x54
   36dda:	d167      	bne.n	36eac <d_name+0x188>
   36ddc:	4620      	mov	r0, r4
   36dde:	f000 f99f 	bl	37120 <d_special_name>
   36de2:	4605      	mov	r5, r0
   36de4:	b31d      	cbz	r5, 36e2e <d_name+0x10a>
   36de6:	68e3      	ldr	r3, [r4, #12]
   36de8:	781a      	ldrb	r2, [r3, #0]
   36dea:	2a45      	cmp	r2, #69	@ 0x45
   36dec:	d11f      	bne.n	36e2e <d_name+0x10a>
   36dee:	1c5a      	adds	r2, r3, #1
   36df0:	60e2      	str	r2, [r4, #12]
   36df2:	785a      	ldrb	r2, [r3, #1]
   36df4:	2a73      	cmp	r2, #115	@ 0x73
   36df6:	f000 80ed 	beq.w	36fd4 <d_name+0x2b0>
   36dfa:	2a64      	cmp	r2, #100	@ 0x64
   36dfc:	f000 8095 	beq.w	36f2a <d_name+0x206>
   36e00:	2100      	movs	r1, #0
   36e02:	4620      	mov	r0, r4
   36e04:	f7ff ff8e 	bl	36d24 <d_name>
   36e08:	4603      	mov	r3, r0
   36e0a:	2800      	cmp	r0, #0
   36e0c:	f000 80e0 	beq.w	36fd0 <d_name+0x2ac>
   36e10:	7802      	ldrb	r2, [r0, #0]
   36e12:	2a47      	cmp	r2, #71	@ 0x47
   36e14:	f000 80c5 	beq.w	36fa2 <d_name+0x27e>
   36e18:	2a49      	cmp	r2, #73	@ 0x49
   36e1a:	f000 80c2 	beq.w	36fa2 <d_name+0x27e>
   36e1e:	9001      	str	r0, [sp, #4]
   36e20:	4620      	mov	r0, r4
   36e22:	f7fe f929 	bl	35078 <d_discriminator>
   36e26:	9b01      	ldr	r3, [sp, #4]
   36e28:	2800      	cmp	r0, #0
   36e2a:	f040 80ba 	bne.w	36fa2 <d_name+0x27e>
   36e2e:	2500      	movs	r5, #0
   36e30:	e7a3      	b.n	36d7a <d_name+0x56>
   36e32:	3201      	adds	r2, #1
   36e34:	60c2      	str	r2, [r0, #12]
   36e36:	a903      	add	r1, sp, #12
   36e38:	2201      	movs	r2, #1
   36e3a:	f7ff fec9 	bl	36bd0 <d_cv_qualifiers>
   36e3e:	4605      	mov	r5, r0
   36e40:	2800      	cmp	r0, #0
   36e42:	d0f4      	beq.n	36e2e <d_name+0x10a>
   36e44:	68e3      	ldr	r3, [r4, #12]
   36e46:	781a      	ldrb	r2, [r3, #0]
   36e48:	2a52      	cmp	r2, #82	@ 0x52
   36e4a:	f000 80bd 	beq.w	36fc8 <d_name+0x2a4>
   36e4e:	2a4f      	cmp	r2, #79	@ 0x4f
   36e50:	d052      	beq.n	36ef8 <d_name+0x1d4>
   36e52:	2101      	movs	r1, #1
   36e54:	4620      	mov	r0, r4
   36e56:	f000 fc9f 	bl	37798 <d_prefix>
   36e5a:	6028      	str	r0, [r5, #0]
   36e5c:	2800      	cmp	r0, #0
   36e5e:	d0e6      	beq.n	36e2e <d_name+0x10a>
   36e60:	68e3      	ldr	r3, [r4, #12]
   36e62:	781a      	ldrb	r2, [r3, #0]
   36e64:	2a45      	cmp	r2, #69	@ 0x45
   36e66:	d1e2      	bne.n	36e2e <d_name+0x10a>
   36e68:	3301      	adds	r3, #1
   36e6a:	9d03      	ldr	r5, [sp, #12]
   36e6c:	60e3      	str	r3, [r4, #12]
   36e6e:	2e00      	cmp	r6, #0
   36e70:	f47f af78 	bne.w	36d64 <d_name+0x40>
   36e74:	e781      	b.n	36d7a <d_name+0x56>
   36e76:	2800      	cmp	r0, #0
   36e78:	d0d9      	beq.n	36e2e <d_name+0x10a>
   36e7a:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   36e7e:	428a      	cmp	r2, r1
   36e80:	dad5      	bge.n	36e2e <d_name+0x10a>
   36e82:	69e1      	ldr	r1, [r4, #28]
   36e84:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   36e88:	3201      	adds	r2, #1
   36e8a:	6222      	str	r2, [r4, #32]
   36e8c:	781a      	ldrb	r2, [r3, #0]
   36e8e:	3a49      	subs	r2, #73	@ 0x49
   36e90:	2a01      	cmp	r2, #1
   36e92:	bf88      	it	hi
   36e94:	2300      	movhi	r3, #0
   36e96:	d993      	bls.n	36dc0 <d_name+0x9c>
   36e98:	462a      	mov	r2, r5
   36e9a:	2104      	movs	r1, #4
   36e9c:	4620      	mov	r0, r4
   36e9e:	f7fe f811 	bl	34ec4 <d_make_comp>
   36ea2:	4605      	mov	r5, r0
   36ea4:	2e00      	cmp	r6, #0
   36ea6:	f47f af5d 	bne.w	36d64 <d_name+0x40>
   36eaa:	e766      	b.n	36d7a <d_name+0x56>
   36eac:	2100      	movs	r1, #0
   36eae:	f000 f8b7 	bl	37020 <d_encoding.part.0>
   36eb2:	4605      	mov	r5, r0
   36eb4:	e796      	b.n	36de4 <d_name+0xc0>
   36eb6:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
   36eba:	1c90      	adds	r0, r2, #2
   36ebc:	428b      	cmp	r3, r1
   36ebe:	60e0      	str	r0, [r4, #12]
   36ec0:	f280 80a5 	bge.w	3700e <d_name+0x2ea>
   36ec4:	6921      	ldr	r1, [r4, #16]
   36ec6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
   36eca:	00b8      	lsls	r0, r7, #2
   36ecc:	3301      	adds	r3, #1
   36ece:	6163      	str	r3, [r4, #20]
   36ed0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   36ed4:	2300      	movs	r3, #0
   36ed6:	e9c7 3301 	strd	r3, r3, [r7, #4]
   36eda:	540b      	strb	r3, [r1, r0]
   36edc:	4b4e      	ldr	r3, [pc, #312]	@ (37018 <d_name+0x2f4>)
   36ede:	60fb      	str	r3, [r7, #12]
   36ee0:	2303      	movs	r3, #3
   36ee2:	613b      	str	r3, [r7, #16]
   36ee4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
   36ee6:	3303      	adds	r3, #3
   36ee8:	62e3      	str	r3, [r4, #44]	@ 0x2c
   36eea:	7893      	ldrb	r3, [r2, #2]
   36eec:	2b53      	cmp	r3, #83	@ 0x53
   36eee:	bf18      	it	ne
   36ef0:	2500      	movne	r5, #0
   36ef2:	f47f af2b 	bne.w	36d4c <d_name+0x28>
   36ef6:	e752      	b.n	36d9e <d_name+0x7a>
   36ef8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   36efa:	2120      	movs	r1, #32
   36efc:	3203      	adds	r2, #3
   36efe:	3301      	adds	r3, #1
   36f00:	60e3      	str	r3, [r4, #12]
   36f02:	2300      	movs	r3, #0
   36f04:	62e2      	str	r2, [r4, #44]	@ 0x2c
   36f06:	4620      	mov	r0, r4
   36f08:	461a      	mov	r2, r3
   36f0a:	f7fd ffdb 	bl	34ec4 <d_make_comp>
   36f0e:	2101      	movs	r1, #1
   36f10:	4607      	mov	r7, r0
   36f12:	4620      	mov	r0, r4
   36f14:	f000 fc40 	bl	37798 <d_prefix>
   36f18:	6028      	str	r0, [r5, #0]
   36f1a:	2800      	cmp	r0, #0
   36f1c:	d087      	beq.n	36e2e <d_name+0x10a>
   36f1e:	2f00      	cmp	r7, #0
   36f20:	d09e      	beq.n	36e60 <d_name+0x13c>
   36f22:	9b03      	ldr	r3, [sp, #12]
   36f24:	60fb      	str	r3, [r7, #12]
   36f26:	9703      	str	r7, [sp, #12]
   36f28:	e79a      	b.n	36e60 <d_name+0x13c>
   36f2a:	1c9a      	adds	r2, r3, #2
   36f2c:	60e2      	str	r2, [r4, #12]
   36f2e:	789b      	ldrb	r3, [r3, #2]
   36f30:	2b5f      	cmp	r3, #95	@ 0x5f
   36f32:	d06e      	beq.n	37012 <d_name+0x2ee>
   36f34:	2b6e      	cmp	r3, #110	@ 0x6e
   36f36:	f43f af7a 	beq.w	36e2e <d_name+0x10a>
   36f3a:	4620      	mov	r0, r4
   36f3c:	f7fe f83e 	bl	34fbc <d_number>
   36f40:	1c47      	adds	r7, r0, #1
   36f42:	f53f af74 	bmi.w	36e2e <d_name+0x10a>
   36f46:	68e2      	ldr	r2, [r4, #12]
   36f48:	7813      	ldrb	r3, [r2, #0]
   36f4a:	2b5f      	cmp	r3, #95	@ 0x5f
   36f4c:	f47f af6f 	bne.w	36e2e <d_name+0x10a>
   36f50:	3201      	adds	r2, #1
   36f52:	2100      	movs	r1, #0
   36f54:	60e2      	str	r2, [r4, #12]
   36f56:	4620      	mov	r0, r4
   36f58:	f7ff fee4 	bl	36d24 <d_name>
   36f5c:	4601      	mov	r1, r0
   36f5e:	b160      	cbz	r0, 36f7a <d_name+0x256>
   36f60:	7803      	ldrb	r3, [r0, #0]
   36f62:	2b47      	cmp	r3, #71	@ 0x47
   36f64:	d009      	beq.n	36f7a <d_name+0x256>
   36f66:	2b49      	cmp	r3, #73	@ 0x49
   36f68:	d007      	beq.n	36f7a <d_name+0x256>
   36f6a:	9001      	str	r0, [sp, #4]
   36f6c:	4620      	mov	r0, r4
   36f6e:	f7fe f883 	bl	35078 <d_discriminator>
   36f72:	9901      	ldr	r1, [sp, #4]
   36f74:	2800      	cmp	r0, #0
   36f76:	f43f af5a 	beq.w	36e2e <d_name+0x10a>
   36f7a:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   36f7e:	429a      	cmp	r2, r3
   36f80:	da26      	bge.n	36fd0 <d_name+0x2ac>
   36f82:	6920      	ldr	r0, [r4, #16]
   36f84:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   36f88:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   36f8c:	3201      	adds	r2, #1
   36f8e:	f04f 0e00 	mov.w	lr, #0
   36f92:	e9c3 ee01 	strd	lr, lr, [r3, #4]
   36f96:	6162      	str	r2, [r4, #20]
   36f98:	2248      	movs	r2, #72	@ 0x48
   36f9a:	f800 202c 	strb.w	r2, [r0, ip, lsl #2]
   36f9e:	e9c3 1703 	strd	r1, r7, [r3, #12]
   36fa2:	782a      	ldrb	r2, [r5, #0]
   36fa4:	2a03      	cmp	r2, #3
   36fa6:	d105      	bne.n	36fb4 <d_name+0x290>
   36fa8:	692a      	ldr	r2, [r5, #16]
   36faa:	7811      	ldrb	r1, [r2, #0]
   36fac:	2929      	cmp	r1, #41	@ 0x29
   36fae:	bf04      	itt	eq
   36fb0:	2100      	moveq	r1, #0
   36fb2:	60d1      	streq	r1, [r2, #12]
   36fb4:	462a      	mov	r2, r5
   36fb6:	2102      	movs	r1, #2
   36fb8:	4620      	mov	r0, r4
   36fba:	f7fd ff83 	bl	34ec4 <d_make_comp>
   36fbe:	4605      	mov	r5, r0
   36fc0:	2e00      	cmp	r6, #0
   36fc2:	f47f aecf 	bne.w	36d64 <d_name+0x40>
   36fc6:	e6d8      	b.n	36d7a <d_name+0x56>
   36fc8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   36fca:	211f      	movs	r1, #31
   36fcc:	3202      	adds	r2, #2
   36fce:	e796      	b.n	36efe <d_name+0x1da>
   36fd0:	2300      	movs	r3, #0
   36fd2:	e7e6      	b.n	36fa2 <d_name+0x27e>
   36fd4:	3302      	adds	r3, #2
   36fd6:	60e3      	str	r3, [r4, #12]
   36fd8:	4620      	mov	r0, r4
   36fda:	f7fe f84d 	bl	35078 <d_discriminator>
   36fde:	2800      	cmp	r0, #0
   36fe0:	f43f af25 	beq.w	36e2e <d_name+0x10a>
   36fe4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   36fe8:	429a      	cmp	r2, r3
   36fea:	daf1      	bge.n	36fd0 <d_name+0x2ac>
   36fec:	6921      	ldr	r1, [r4, #16]
   36fee:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   36ff2:	0098      	lsls	r0, r3, #2
   36ff4:	3201      	adds	r2, #1
   36ff6:	6162      	str	r2, [r4, #20]
   36ff8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   36ffc:	2200      	movs	r2, #0
   36ffe:	e9c3 2201 	strd	r2, r2, [r3, #4]
   37002:	540a      	strb	r2, [r1, r0]
   37004:	4a05      	ldr	r2, [pc, #20]	@ (3701c <d_name+0x2f8>)
   37006:	60da      	str	r2, [r3, #12]
   37008:	220e      	movs	r2, #14
   3700a:	611a      	str	r2, [r3, #16]
   3700c:	e7c9      	b.n	36fa2 <d_name+0x27e>
   3700e:	2700      	movs	r7, #0
   37010:	e768      	b.n	36ee4 <d_name+0x1c0>
   37012:	2700      	movs	r7, #0
   37014:	e79c      	b.n	36f50 <d_name+0x22c>
   37016:	bf00      	nop
   37018:	0003ffb4 	.word	0x0003ffb4
   3701c:	0003ffa4 	.word	0x0003ffa4

00037020 <d_encoding.part.0>:
   37020:	b570      	push	{r4, r5, r6, lr}
   37022:	460e      	mov	r6, r1
   37024:	2100      	movs	r1, #0
   37026:	4605      	mov	r5, r0
   37028:	f7ff fe7c 	bl	36d24 <d_name>
   3702c:	2800      	cmp	r0, #0
   3702e:	d049      	beq.n	370c4 <d_encoding.part.0+0xa4>
   37030:	4604      	mov	r4, r0
   37032:	b1ee      	cbz	r6, 37070 <d_encoding.part.0+0x50>
   37034:	68ab      	ldr	r3, [r5, #8]
   37036:	07db      	lsls	r3, r3, #31
   37038:	d41a      	bmi.n	37070 <d_encoding.part.0+0x50>
   3703a:	7823      	ldrb	r3, [r4, #0]
   3703c:	2b4e      	cmp	r3, #78	@ 0x4e
   3703e:	f1a3 011c 	sub.w	r1, r3, #28
   37042:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
   37046:	d035      	beq.n	370b4 <d_encoding.part.0+0x94>
   37048:	d832      	bhi.n	370b0 <d_encoding.part.0+0x90>
   3704a:	2904      	cmp	r1, #4
   3704c:	d932      	bls.n	370b4 <d_encoding.part.0+0x94>
   3704e:	2b02      	cmp	r3, #2
   37050:	d10c      	bne.n	3706c <d_encoding.part.0+0x4c>
   37052:	6923      	ldr	r3, [r4, #16]
   37054:	2b00      	cmp	r3, #0
   37056:	d035      	beq.n	370c4 <d_encoding.part.0+0xa4>
   37058:	781a      	ldrb	r2, [r3, #0]
   3705a:	2a4e      	cmp	r2, #78	@ 0x4e
   3705c:	f1a2 001c 	sub.w	r0, r2, #28
   37060:	f1a2 0150 	sub.w	r1, r2, #80	@ 0x50
   37064:	d02a      	beq.n	370bc <d_encoding.part.0+0x9c>
   37066:	d827      	bhi.n	370b8 <d_encoding.part.0+0x98>
   37068:	2804      	cmp	r0, #4
   3706a:	d927      	bls.n	370bc <d_encoding.part.0+0x9c>
   3706c:	4620      	mov	r0, r4
   3706e:	bd70      	pop	{r4, r5, r6, pc}
   37070:	68eb      	ldr	r3, [r5, #12]
   37072:	781b      	ldrb	r3, [r3, #0]
   37074:	2b00      	cmp	r3, #0
   37076:	d0f9      	beq.n	3706c <d_encoding.part.0+0x4c>
   37078:	2b45      	cmp	r3, #69	@ 0x45
   3707a:	d0f7      	beq.n	3706c <d_encoding.part.0+0x4c>
   3707c:	4621      	mov	r1, r4
   3707e:	780b      	ldrb	r3, [r1, #0]
   37080:	2b04      	cmp	r3, #4
   37082:	d033      	beq.n	370ec <d_encoding.part.0+0xcc>
   37084:	d821      	bhi.n	370ca <d_encoding.part.0+0xaa>
   37086:	2b02      	cmp	r3, #2
   37088:	d12e      	bne.n	370e8 <d_encoding.part.0+0xc8>
   3708a:	6909      	ldr	r1, [r1, #16]
   3708c:	2900      	cmp	r1, #0
   3708e:	d1f6      	bne.n	3707e <d_encoding.part.0+0x5e>
   37090:	4628      	mov	r0, r5
   37092:	f7fe ffcd 	bl	36030 <d_bare_function_type>
   37096:	4603      	mov	r3, r0
   37098:	b1a0      	cbz	r0, 370c4 <d_encoding.part.0+0xa4>
   3709a:	b916      	cbnz	r6, 370a2 <d_encoding.part.0+0x82>
   3709c:	7822      	ldrb	r2, [r4, #0]
   3709e:	2a02      	cmp	r2, #2
   370a0:	d034      	beq.n	3710c <d_encoding.part.0+0xec>
   370a2:	4622      	mov	r2, r4
   370a4:	4628      	mov	r0, r5
   370a6:	2103      	movs	r1, #3
   370a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   370ac:	f7fd bf0a 	b.w	34ec4 <d_make_comp>
   370b0:	2a01      	cmp	r2, #1
   370b2:	d8db      	bhi.n	3706c <d_encoding.part.0+0x4c>
   370b4:	68e4      	ldr	r4, [r4, #12]
   370b6:	e7c0      	b.n	3703a <d_encoding.part.0+0x1a>
   370b8:	2901      	cmp	r1, #1
   370ba:	d8d7      	bhi.n	3706c <d_encoding.part.0+0x4c>
   370bc:	68db      	ldr	r3, [r3, #12]
   370be:	6123      	str	r3, [r4, #16]
   370c0:	2b00      	cmp	r3, #0
   370c2:	d1c9      	bne.n	37058 <d_encoding.part.0+0x38>
   370c4:	2400      	movs	r4, #0
   370c6:	4620      	mov	r0, r4
   370c8:	bd70      	pop	{r4, r5, r6, pc}
   370ca:	2b4e      	cmp	r3, #78	@ 0x4e
   370cc:	d006      	beq.n	370dc <d_encoding.part.0+0xbc>
   370ce:	f1a3 021c 	sub.w	r2, r3, #28
   370d2:	f1a3 0350 	sub.w	r3, r3, #80	@ 0x50
   370d6:	d805      	bhi.n	370e4 <d_encoding.part.0+0xc4>
   370d8:	2a04      	cmp	r2, #4
   370da:	d805      	bhi.n	370e8 <d_encoding.part.0+0xc8>
   370dc:	68c9      	ldr	r1, [r1, #12]
   370de:	2900      	cmp	r1, #0
   370e0:	d1cd      	bne.n	3707e <d_encoding.part.0+0x5e>
   370e2:	e7d5      	b.n	37090 <d_encoding.part.0+0x70>
   370e4:	2b01      	cmp	r3, #1
   370e6:	d9f9      	bls.n	370dc <d_encoding.part.0+0xbc>
   370e8:	2100      	movs	r1, #0
   370ea:	e7d1      	b.n	37090 <d_encoding.part.0+0x70>
   370ec:	68cb      	ldr	r3, [r1, #12]
   370ee:	b15b      	cbz	r3, 37108 <d_encoding.part.0+0xe8>
   370f0:	7819      	ldrb	r1, [r3, #0]
   370f2:	2908      	cmp	r1, #8
   370f4:	f101 32ff 	add.w	r2, r1, #4294967295	@ 0xffffffff
   370f8:	d80d      	bhi.n	37116 <d_encoding.part.0+0xf6>
   370fa:	2906      	cmp	r1, #6
   370fc:	d8f4      	bhi.n	370e8 <d_encoding.part.0+0xc8>
   370fe:	2a01      	cmp	r2, #1
   37100:	d802      	bhi.n	37108 <d_encoding.part.0+0xe8>
   37102:	691b      	ldr	r3, [r3, #16]
   37104:	2b00      	cmp	r3, #0
   37106:	d1f3      	bne.n	370f0 <d_encoding.part.0+0xd0>
   37108:	2101      	movs	r1, #1
   3710a:	e7c1      	b.n	37090 <d_encoding.part.0+0x70>
   3710c:	7802      	ldrb	r2, [r0, #0]
   3710e:	2a29      	cmp	r2, #41	@ 0x29
   37110:	bf08      	it	eq
   37112:	60c6      	streq	r6, [r0, #12]
   37114:	e7c5      	b.n	370a2 <d_encoding.part.0+0x82>
   37116:	3935      	subs	r1, #53	@ 0x35
   37118:	bf18      	it	ne
   3711a:	2101      	movne	r1, #1
   3711c:	e7b8      	b.n	37090 <d_encoding.part.0+0x70>
   3711e:	bf00      	nop

00037120 <d_special_name>:
   37120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37124:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
   37126:	68c3      	ldr	r3, [r0, #12]
   37128:	f101 0214 	add.w	r2, r1, #20
   3712c:	62c2      	str	r2, [r0, #44]	@ 0x2c
   3712e:	781a      	ldrb	r2, [r3, #0]
   37130:	2a54      	cmp	r2, #84	@ 0x54
   37132:	b082      	sub	sp, #8
   37134:	4604      	mov	r4, r0
   37136:	d029      	beq.n	3718c <d_special_name+0x6c>
   37138:	2a47      	cmp	r2, #71	@ 0x47
   3713a:	d123      	bne.n	37184 <d_special_name+0x64>
   3713c:	1c5a      	adds	r2, r3, #1
   3713e:	60c2      	str	r2, [r0, #12]
   37140:	785a      	ldrb	r2, [r3, #1]
   37142:	b1fa      	cbz	r2, 37184 <d_special_name+0x64>
   37144:	1c9a      	adds	r2, r3, #2
   37146:	60c2      	str	r2, [r0, #12]
   37148:	785a      	ldrb	r2, [r3, #1]
   3714a:	2a56      	cmp	r2, #86	@ 0x56
   3714c:	f200 80e5 	bhi.w	3731a <d_special_name+0x1fa>
   37150:	2a40      	cmp	r2, #64	@ 0x40
   37152:	d917      	bls.n	37184 <d_special_name+0x64>
   37154:	3a41      	subs	r2, #65	@ 0x41
   37156:	2a15      	cmp	r2, #21
   37158:	d814      	bhi.n	37184 <d_special_name+0x64>
   3715a:	e8df f002 	tbb	[pc, r2]
   3715e:	13d2      	.short	0x13d2
   37160:	13131313 	.word	0x13131313
   37164:	130b1313 	.word	0x130b1313
   37168:	13131313 	.word	0x13131313
   3716c:	b4131313 	.word	0xb4131313
   37170:	91139d13 	.word	0x91139d13
   37174:	2500      	movs	r5, #0
   37176:	a901      	add	r1, sp, #4
   37178:	9501      	str	r5, [sp, #4]
   3717a:	f7fe fb03 	bl	35784 <d_maybe_module_name>
   3717e:	2800      	cmp	r0, #0
   37180:	f040 811c 	bne.w	373bc <d_special_name+0x29c>
   37184:	2000      	movs	r0, #0
   37186:	b002      	add	sp, #8
   37188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3718c:	1c5a      	adds	r2, r3, #1
   3718e:	60c2      	str	r2, [r0, #12]
   37190:	785a      	ldrb	r2, [r3, #1]
   37192:	2a00      	cmp	r2, #0
   37194:	d0f6      	beq.n	37184 <d_special_name+0x64>
   37196:	1c9a      	adds	r2, r3, #2
   37198:	60c2      	str	r2, [r0, #12]
   3719a:	785b      	ldrb	r3, [r3, #1]
   3719c:	3b41      	subs	r3, #65	@ 0x41
   3719e:	2b35      	cmp	r3, #53	@ 0x35
   371a0:	d8f0      	bhi.n	37184 <d_special_name+0x64>
   371a2:	a201      	add	r2, pc, #4	@ (adr r2, 371a8 <d_special_name+0x88>)
   371a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   371a8:	000373e5 	.word	0x000373e5
   371ac:	00037185 	.word	0x00037185
   371b0:	000373f1 	.word	0x000373f1
   371b4:	00037185 	.word	0x00037185
   371b8:	00037185 	.word	0x00037185
   371bc:	00037425 	.word	0x00037425
   371c0:	00037185 	.word	0x00037185
   371c4:	00037431 	.word	0x00037431
   371c8:	0003746b 	.word	0x0003746b
   371cc:	000374ff 	.word	0x000374ff
   371d0:	00037185 	.word	0x00037185
   371d4:	00037185 	.word	0x00037185
   371d8:	00037185 	.word	0x00037185
   371dc:	00037185 	.word	0x00037185
   371e0:	00037185 	.word	0x00037185
   371e4:	00037185 	.word	0x00037185
   371e8:	00037185 	.word	0x00037185
   371ec:	00037185 	.word	0x00037185
   371f0:	000374f3 	.word	0x000374f3
   371f4:	0003750b 	.word	0x0003750b
   371f8:	00037185 	.word	0x00037185
   371fc:	00037477 	.word	0x00037477
   37200:	00037487 	.word	0x00037487
   37204:	00037185 	.word	0x00037185
   37208:	00037185 	.word	0x00037185
   3720c:	00037185 	.word	0x00037185
   37210:	00037185 	.word	0x00037185
   37214:	00037185 	.word	0x00037185
   37218:	00037185 	.word	0x00037185
   3721c:	00037185 	.word	0x00037185
   37220:	00037185 	.word	0x00037185
   37224:	00037185 	.word	0x00037185
   37228:	00037185 	.word	0x00037185
   3722c:	00037185 	.word	0x00037185
   37230:	00037495 	.word	0x00037495
   37234:	00037185 	.word	0x00037185
   37238:	00037185 	.word	0x00037185
   3723c:	00037185 	.word	0x00037185
   37240:	00037185 	.word	0x00037185
   37244:	000374cb 	.word	0x000374cb
   37248:	00037185 	.word	0x00037185
   3724c:	00037185 	.word	0x00037185
   37250:	00037185 	.word	0x00037185
   37254:	00037185 	.word	0x00037185
   37258:	00037185 	.word	0x00037185
   3725c:	00037185 	.word	0x00037185
   37260:	00037185 	.word	0x00037185
   37264:	00037185 	.word	0x00037185
   37268:	00037185 	.word	0x00037185
   3726c:	00037185 	.word	0x00037185
   37270:	00037185 	.word	0x00037185
   37274:	00037185 	.word	0x00037185
   37278:	00037185 	.word	0x00037185
   3727c:	0003743f 	.word	0x0003743f
   37280:	2100      	movs	r1, #0
   37282:	f7ff fd4f 	bl	36d24 <d_name>
   37286:	2300      	movs	r3, #0
   37288:	4602      	mov	r2, r0
   3728a:	2113      	movs	r1, #19
   3728c:	4620      	mov	r0, r4
   3728e:	b002      	add	sp, #8
   37290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   37294:	f7fd be16 	b.w	34ec4 <d_make_comp>
   37298:	789a      	ldrb	r2, [r3, #2]
   3729a:	2a00      	cmp	r2, #0
   3729c:	f000 809a 	beq.w	373d4 <d_special_name+0x2b4>
   372a0:	1cda      	adds	r2, r3, #3
   372a2:	60c2      	str	r2, [r0, #12]
   372a4:	789a      	ldrb	r2, [r3, #2]
   372a6:	78db      	ldrb	r3, [r3, #3]
   372a8:	2a6e      	cmp	r2, #110	@ 0x6e
   372aa:	f000 816a 	beq.w	37582 <d_special_name+0x462>
   372ae:	2b47      	cmp	r3, #71	@ 0x47
   372b0:	d002      	beq.n	372b8 <d_special_name+0x198>
   372b2:	2b54      	cmp	r3, #84	@ 0x54
   372b4:	f040 808e 	bne.w	373d4 <d_special_name+0x2b4>
   372b8:	4620      	mov	r0, r4
   372ba:	f7ff ff31 	bl	37120 <d_special_name>
   372be:	4602      	mov	r2, r0
   372c0:	2300      	movs	r3, #0
   372c2:	214a      	movs	r1, #74	@ 0x4a
   372c4:	e7e2      	b.n	3728c <d_special_name+0x16c>
   372c6:	2100      	movs	r1, #0
   372c8:	f7ff fd2c 	bl	36d24 <d_name>
   372cc:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   372d0:	4291      	cmp	r1, r2
   372d2:	4606      	mov	r6, r0
   372d4:	f280 8084 	bge.w	373e0 <d_special_name+0x2c0>
   372d8:	6922      	ldr	r2, [r4, #16]
   372da:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   372de:	eb02 0580 	add.w	r5, r2, r0, lsl #2
   372e2:	2300      	movs	r3, #0
   372e4:	e9c5 3301 	strd	r3, r3, [r5, #4]
   372e8:	3101      	adds	r1, #1
   372ea:	2343      	movs	r3, #67	@ 0x43
   372ec:	6161      	str	r1, [r4, #20]
   372ee:	f802 3020 	strb.w	r3, [r2, r0, lsl #2]
   372f2:	4620      	mov	r0, r4
   372f4:	f7fd fe62 	bl	34fbc <d_number>
   372f8:	60e8      	str	r0, [r5, #12]
   372fa:	462b      	mov	r3, r5
   372fc:	4632      	mov	r2, r6
   372fe:	2116      	movs	r1, #22
   37300:	e7c4      	b.n	3728c <d_special_name+0x16c>
   37302:	789b      	ldrb	r3, [r3, #2]
   37304:	2b47      	cmp	r3, #71	@ 0x47
   37306:	d060      	beq.n	373ca <d_special_name+0x2aa>
   37308:	2b54      	cmp	r3, #84	@ 0x54
   3730a:	d05e      	beq.n	373ca <d_special_name+0x2aa>
   3730c:	2100      	movs	r1, #0
   3730e:	f7ff fe87 	bl	37020 <d_encoding.part.0>
   37312:	4602      	mov	r2, r0
   37314:	2300      	movs	r3, #0
   37316:	2117      	movs	r1, #23
   37318:	e7b8      	b.n	3728c <d_special_name+0x16c>
   3731a:	2a72      	cmp	r2, #114	@ 0x72
   3731c:	f47f af32 	bne.w	37184 <d_special_name+0x64>
   37320:	f7fd fe4c 	bl	34fbc <d_number>
   37324:	2801      	cmp	r0, #1
   37326:	f77f af2d 	ble.w	37184 <d_special_name+0x64>
   3732a:	68e3      	ldr	r3, [r4, #12]
   3732c:	781a      	ldrb	r2, [r3, #0]
   3732e:	2a00      	cmp	r2, #0
   37330:	f43f af28 	beq.w	37184 <d_special_name+0x64>
   37334:	1c5e      	adds	r6, r3, #1
   37336:	60e6      	str	r6, [r4, #12]
   37338:	781b      	ldrb	r3, [r3, #0]
   3733a:	2b5f      	cmp	r3, #95	@ 0x5f
   3733c:	f47f af22 	bne.w	37184 <d_special_name+0x64>
   37340:	2200      	movs	r2, #0
   37342:	1e45      	subs	r5, r0, #1
   37344:	4617      	mov	r7, r2
   37346:	f04f 0842 	mov.w	r8, #66	@ 0x42
   3734a:	7833      	ldrb	r3, [r6, #0]
   3734c:	2b00      	cmp	r3, #0
   3734e:	f43f af19 	beq.w	37184 <d_special_name+0x64>
   37352:	2b24      	cmp	r3, #36	@ 0x24
   37354:	f040 80e1 	bne.w	3751a <d_special_name+0x3fa>
   37358:	7873      	ldrb	r3, [r6, #1]
   3735a:	2b53      	cmp	r3, #83	@ 0x53
   3735c:	f000 8109 	beq.w	37572 <d_special_name+0x452>
   37360:	2b5f      	cmp	r3, #95	@ 0x5f
   37362:	f000 8104 	beq.w	3756e <d_special_name+0x44e>
   37366:	2b24      	cmp	r3, #36	@ 0x24
   37368:	f47f af0c 	bne.w	37184 <d_special_name+0x64>
   3736c:	4619      	mov	r1, r3
   3736e:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   37372:	68e6      	ldr	r6, [r4, #12]
   37374:	4298      	cmp	r0, r3
   37376:	f106 0602 	add.w	r6, r6, #2
   3737a:	f280 80fc 	bge.w	37576 <d_special_name+0x456>
   3737e:	f8d4 c010 	ldr.w	ip, [r4, #16]
   37382:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
   37386:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
   3738a:	3001      	adds	r0, #1
   3738c:	e9c3 7701 	strd	r7, r7, [r3, #4]
   37390:	3d02      	subs	r5, #2
   37392:	6160      	str	r0, [r4, #20]
   37394:	f80c 802e 	strb.w	r8, [ip, lr, lsl #2]
   37398:	60d9      	str	r1, [r3, #12]
   3739a:	60e6      	str	r6, [r4, #12]
   3739c:	2a00      	cmp	r2, #0
   3739e:	f000 80e4 	beq.w	3756a <d_special_name+0x44a>
   373a2:	2141      	movs	r1, #65	@ 0x41
   373a4:	4620      	mov	r0, r4
   373a6:	f7fd fd8d 	bl	34ec4 <d_make_comp>
   373aa:	4602      	mov	r2, r0
   373ac:	2800      	cmp	r0, #0
   373ae:	f43f aee9 	beq.w	37184 <d_special_name+0x64>
   373b2:	2d00      	cmp	r5, #0
   373b4:	dcc9      	bgt.n	3734a <d_special_name+0x22a>
   373b6:	2300      	movs	r3, #0
   373b8:	2140      	movs	r1, #64	@ 0x40
   373ba:	e767      	b.n	3728c <d_special_name+0x16c>
   373bc:	9a01      	ldr	r2, [sp, #4]
   373be:	2a00      	cmp	r2, #0
   373c0:	f43f aee0 	beq.w	37184 <d_special_name+0x64>
   373c4:	462b      	mov	r3, r5
   373c6:	2156      	movs	r1, #86	@ 0x56
   373c8:	e760      	b.n	3728c <d_special_name+0x16c>
   373ca:	4620      	mov	r0, r4
   373cc:	f7ff fea8 	bl	37120 <d_special_name>
   373d0:	4602      	mov	r2, r0
   373d2:	e79f      	b.n	37314 <d_special_name+0x1f4>
   373d4:	2100      	movs	r1, #0
   373d6:	4620      	mov	r0, r4
   373d8:	f7ff fe22 	bl	37020 <d_encoding.part.0>
   373dc:	4602      	mov	r2, r0
   373de:	e76f      	b.n	372c0 <d_special_name+0x1a0>
   373e0:	2500      	movs	r5, #0
   373e2:	e78a      	b.n	372fa <d_special_name+0x1da>
   373e4:	f000 f97a 	bl	376dc <d_template_arg>
   373e8:	2300      	movs	r3, #0
   373ea:	4602      	mov	r2, r0
   373ec:	2130      	movs	r1, #48	@ 0x30
   373ee:	e74d      	b.n	3728c <d_special_name+0x16c>
   373f0:	f7fe f9f8 	bl	357e4 <d_type>
   373f4:	4605      	mov	r5, r0
   373f6:	4620      	mov	r0, r4
   373f8:	f7fd fde0 	bl	34fbc <d_number>
   373fc:	2800      	cmp	r0, #0
   373fe:	f6ff aec1 	blt.w	37184 <d_special_name+0x64>
   37402:	68e3      	ldr	r3, [r4, #12]
   37404:	781a      	ldrb	r2, [r3, #0]
   37406:	2a5f      	cmp	r2, #95	@ 0x5f
   37408:	f47f aebc 	bne.w	37184 <d_special_name+0x64>
   3740c:	3301      	adds	r3, #1
   3740e:	60e3      	str	r3, [r4, #12]
   37410:	4620      	mov	r0, r4
   37412:	f7fe f9e7 	bl	357e4 <d_type>
   37416:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
   37418:	3105      	adds	r1, #5
   3741a:	62e1      	str	r1, [r4, #44]	@ 0x2c
   3741c:	4602      	mov	r2, r0
   3741e:	462b      	mov	r3, r5
   37420:	210b      	movs	r1, #11
   37422:	e733      	b.n	3728c <d_special_name+0x16c>
   37424:	f7fe f9de 	bl	357e4 <d_type>
   37428:	2300      	movs	r3, #0
   3742a:	4602      	mov	r2, r0
   3742c:	210e      	movs	r1, #14
   3742e:	e72d      	b.n	3728c <d_special_name+0x16c>
   37430:	2100      	movs	r1, #0
   37432:	f7ff fc77 	bl	36d24 <d_name>
   37436:	2300      	movs	r3, #0
   37438:	4602      	mov	r2, r0
   3743a:	2114      	movs	r1, #20
   3743c:	e726      	b.n	3728c <d_special_name+0x16c>
   3743e:	2176      	movs	r1, #118	@ 0x76
   37440:	f7fd fdf6 	bl	35030 <d_call_offset>
   37444:	2800      	cmp	r0, #0
   37446:	f43f ae9d 	beq.w	37184 <d_special_name+0x64>
   3744a:	68e3      	ldr	r3, [r4, #12]
   3744c:	781b      	ldrb	r3, [r3, #0]
   3744e:	2b47      	cmp	r3, #71	@ 0x47
   37450:	f000 80a2 	beq.w	37598 <d_special_name+0x478>
   37454:	2b54      	cmp	r3, #84	@ 0x54
   37456:	f000 809f 	beq.w	37598 <d_special_name+0x478>
   3745a:	2100      	movs	r1, #0
   3745c:	4620      	mov	r0, r4
   3745e:	f7ff fddf 	bl	37020 <d_encoding.part.0>
   37462:	4602      	mov	r2, r0
   37464:	2300      	movs	r3, #0
   37466:	2110      	movs	r1, #16
   37468:	e710      	b.n	3728c <d_special_name+0x16c>
   3746a:	f7fe f9bb 	bl	357e4 <d_type>
   3746e:	2300      	movs	r3, #0
   37470:	4602      	mov	r2, r0
   37472:	210c      	movs	r1, #12
   37474:	e70a      	b.n	3728c <d_special_name+0x16c>
   37476:	310f      	adds	r1, #15
   37478:	62c1      	str	r1, [r0, #44]	@ 0x2c
   3747a:	f7fe f9b3 	bl	357e4 <d_type>
   3747e:	2300      	movs	r3, #0
   37480:	4602      	mov	r2, r0
   37482:	2109      	movs	r1, #9
   37484:	e702      	b.n	3728c <d_special_name+0x16c>
   37486:	2100      	movs	r1, #0
   37488:	f7ff fc4c 	bl	36d24 <d_name>
   3748c:	2300      	movs	r3, #0
   3748e:	4602      	mov	r2, r0
   37490:	2115      	movs	r1, #21
   37492:	e6fb      	b.n	3728c <d_special_name+0x16c>
   37494:	2100      	movs	r1, #0
   37496:	f7fd fdcb 	bl	35030 <d_call_offset>
   3749a:	2800      	cmp	r0, #0
   3749c:	f43f ae72 	beq.w	37184 <d_special_name+0x64>
   374a0:	2100      	movs	r1, #0
   374a2:	4620      	mov	r0, r4
   374a4:	f7fd fdc4 	bl	35030 <d_call_offset>
   374a8:	2800      	cmp	r0, #0
   374aa:	f43f ae6b 	beq.w	37184 <d_special_name+0x64>
   374ae:	68e3      	ldr	r3, [r4, #12]
   374b0:	781b      	ldrb	r3, [r3, #0]
   374b2:	2b47      	cmp	r3, #71	@ 0x47
   374b4:	d07f      	beq.n	375b6 <d_special_name+0x496>
   374b6:	2b54      	cmp	r3, #84	@ 0x54
   374b8:	d07d      	beq.n	375b6 <d_special_name+0x496>
   374ba:	2100      	movs	r1, #0
   374bc:	4620      	mov	r0, r4
   374be:	f7ff fdaf 	bl	37020 <d_encoding.part.0>
   374c2:	4602      	mov	r2, r0
   374c4:	2300      	movs	r3, #0
   374c6:	2111      	movs	r1, #17
   374c8:	e6e0      	b.n	3728c <d_special_name+0x16c>
   374ca:	2168      	movs	r1, #104	@ 0x68
   374cc:	f7fd fdb0 	bl	35030 <d_call_offset>
   374d0:	2800      	cmp	r0, #0
   374d2:	f43f ae57 	beq.w	37184 <d_special_name+0x64>
   374d6:	68e3      	ldr	r3, [r4, #12]
   374d8:	781b      	ldrb	r3, [r3, #0]
   374da:	2b47      	cmp	r3, #71	@ 0x47
   374dc:	d061      	beq.n	375a2 <d_special_name+0x482>
   374de:	2b54      	cmp	r3, #84	@ 0x54
   374e0:	d05f      	beq.n	375a2 <d_special_name+0x482>
   374e2:	2100      	movs	r1, #0
   374e4:	4620      	mov	r0, r4
   374e6:	f7ff fd9b 	bl	37020 <d_encoding.part.0>
   374ea:	4602      	mov	r2, r0
   374ec:	2300      	movs	r3, #0
   374ee:	210f      	movs	r1, #15
   374f0:	e6cc      	b.n	3728c <d_special_name+0x16c>
   374f2:	f7fe f977 	bl	357e4 <d_type>
   374f6:	2300      	movs	r3, #0
   374f8:	4602      	mov	r2, r0
   374fa:	210d      	movs	r1, #13
   374fc:	e6c6      	b.n	3728c <d_special_name+0x16c>
   374fe:	f7fe f971 	bl	357e4 <d_type>
   37502:	2300      	movs	r3, #0
   37504:	4602      	mov	r2, r0
   37506:	2112      	movs	r1, #18
   37508:	e6c0      	b.n	3728c <d_special_name+0x16c>
   3750a:	310a      	adds	r1, #10
   3750c:	62c1      	str	r1, [r0, #44]	@ 0x2c
   3750e:	f7fe f969 	bl	357e4 <d_type>
   37512:	2300      	movs	r3, #0
   37514:	4602      	mov	r2, r0
   37516:	210a      	movs	r1, #10
   37518:	e6b8      	b.n	3728c <d_special_name+0x16c>
   3751a:	f106 3cff 	add.w	ip, r6, #4294967295	@ 0xffffffff
   3751e:	2100      	movs	r1, #0
   37520:	e004      	b.n	3752c <d_special_name+0x40c>
   37522:	2b24      	cmp	r3, #36	@ 0x24
   37524:	d006      	beq.n	37534 <d_special_name+0x414>
   37526:	3101      	adds	r1, #1
   37528:	42a9      	cmp	r1, r5
   3752a:	d003      	beq.n	37534 <d_special_name+0x414>
   3752c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   37530:	2b00      	cmp	r3, #0
   37532:	d1f6      	bne.n	37522 <d_special_name+0x402>
   37534:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   37538:	4298      	cmp	r0, r3
   3753a:	da1e      	bge.n	3757a <d_special_name+0x45a>
   3753c:	f8d4 c010 	ldr.w	ip, [r4, #16]
   37540:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
   37544:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
   37548:	3001      	adds	r0, #1
   3754a:	e9c3 7701 	strd	r7, r7, [r3, #4]
   3754e:	6160      	str	r0, [r4, #20]
   37550:	2900      	cmp	r1, #0
   37552:	f43f ae17 	beq.w	37184 <d_special_name+0x64>
   37556:	e9c3 7701 	strd	r7, r7, [r3, #4]
   3755a:	f80c 702e 	strb.w	r7, [ip, lr, lsl #2]
   3755e:	e9c3 6103 	strd	r6, r1, [r3, #12]
   37562:	68e6      	ldr	r6, [r4, #12]
   37564:	1a6d      	subs	r5, r5, r1
   37566:	440e      	add	r6, r1
   37568:	e717      	b.n	3739a <d_special_name+0x27a>
   3756a:	461a      	mov	r2, r3
   3756c:	e721      	b.n	373b2 <d_special_name+0x292>
   3756e:	212e      	movs	r1, #46	@ 0x2e
   37570:	e6fd      	b.n	3736e <d_special_name+0x24e>
   37572:	212f      	movs	r1, #47	@ 0x2f
   37574:	e6fb      	b.n	3736e <d_special_name+0x24e>
   37576:	60e6      	str	r6, [r4, #12]
   37578:	e604      	b.n	37184 <d_special_name+0x64>
   3757a:	68e3      	ldr	r3, [r4, #12]
   3757c:	440b      	add	r3, r1
   3757e:	60e3      	str	r3, [r4, #12]
   37580:	e600      	b.n	37184 <d_special_name+0x64>
   37582:	2b47      	cmp	r3, #71	@ 0x47
   37584:	d012      	beq.n	375ac <d_special_name+0x48c>
   37586:	2b54      	cmp	r3, #84	@ 0x54
   37588:	d010      	beq.n	375ac <d_special_name+0x48c>
   3758a:	2100      	movs	r1, #0
   3758c:	f7ff fd48 	bl	37020 <d_encoding.part.0>
   37590:	4602      	mov	r2, r0
   37592:	2300      	movs	r3, #0
   37594:	214b      	movs	r1, #75	@ 0x4b
   37596:	e679      	b.n	3728c <d_special_name+0x16c>
   37598:	4620      	mov	r0, r4
   3759a:	f7ff fdc1 	bl	37120 <d_special_name>
   3759e:	4602      	mov	r2, r0
   375a0:	e760      	b.n	37464 <d_special_name+0x344>
   375a2:	4620      	mov	r0, r4
   375a4:	f7ff fdbc 	bl	37120 <d_special_name>
   375a8:	4602      	mov	r2, r0
   375aa:	e79f      	b.n	374ec <d_special_name+0x3cc>
   375ac:	4620      	mov	r0, r4
   375ae:	f7ff fdb7 	bl	37120 <d_special_name>
   375b2:	4602      	mov	r2, r0
   375b4:	e7ed      	b.n	37592 <d_special_name+0x472>
   375b6:	4620      	mov	r0, r4
   375b8:	f7ff fdb2 	bl	37120 <d_special_name>
   375bc:	4602      	mov	r2, r0
   375be:	e781      	b.n	374c4 <d_special_name+0x3a4>

000375c0 <d_expr_primary>:
   375c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   375c2:	68c2      	ldr	r2, [r0, #12]
   375c4:	7813      	ldrb	r3, [r2, #0]
   375c6:	2b4c      	cmp	r3, #76	@ 0x4c
   375c8:	d132      	bne.n	37630 <d_expr_primary+0x70>
   375ca:	1c53      	adds	r3, r2, #1
   375cc:	60c3      	str	r3, [r0, #12]
   375ce:	7851      	ldrb	r1, [r2, #1]
   375d0:	295f      	cmp	r1, #95	@ 0x5f
   375d2:	4604      	mov	r4, r0
   375d4:	d04a      	beq.n	3766c <d_expr_primary+0xac>
   375d6:	295a      	cmp	r1, #90	@ 0x5a
   375d8:	d113      	bne.n	37602 <d_expr_primary+0x42>
   375da:	1c5a      	adds	r2, r3, #1
   375dc:	60e2      	str	r2, [r4, #12]
   375de:	785b      	ldrb	r3, [r3, #1]
   375e0:	2b47      	cmp	r3, #71	@ 0x47
   375e2:	d03c      	beq.n	3765e <d_expr_primary+0x9e>
   375e4:	2b54      	cmp	r3, #84	@ 0x54
   375e6:	d03a      	beq.n	3765e <d_expr_primary+0x9e>
   375e8:	2100      	movs	r1, #0
   375ea:	4620      	mov	r0, r4
   375ec:	f7ff fd18 	bl	37020 <d_encoding.part.0>
   375f0:	68e3      	ldr	r3, [r4, #12]
   375f2:	781a      	ldrb	r2, [r3, #0]
   375f4:	4606      	mov	r6, r0
   375f6:	2a45      	cmp	r2, #69	@ 0x45
   375f8:	d11a      	bne.n	37630 <d_expr_primary+0x70>
   375fa:	3301      	adds	r3, #1
   375fc:	60e3      	str	r3, [r4, #12]
   375fe:	4630      	mov	r0, r6
   37600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37602:	f7fe f8ef 	bl	357e4 <d_type>
   37606:	4606      	mov	r6, r0
   37608:	b190      	cbz	r0, 37630 <d_expr_primary+0x70>
   3760a:	7803      	ldrb	r3, [r0, #0]
   3760c:	68e7      	ldr	r7, [r4, #12]
   3760e:	2b27      	cmp	r3, #39	@ 0x27
   37610:	d011      	beq.n	37636 <d_expr_primary+0x76>
   37612:	783d      	ldrb	r5, [r7, #0]
   37614:	2d6e      	cmp	r5, #110	@ 0x6e
   37616:	d052      	beq.n	376be <d_expr_primary+0xfe>
   37618:	213d      	movs	r1, #61	@ 0x3d
   3761a:	2d45      	cmp	r5, #69	@ 0x45
   3761c:	d055      	beq.n	376ca <d_expr_primary+0x10a>
   3761e:	463b      	mov	r3, r7
   37620:	e003      	b.n	3762a <d_expr_primary+0x6a>
   37622:	60e3      	str	r3, [r4, #12]
   37624:	781d      	ldrb	r5, [r3, #0]
   37626:	2d45      	cmp	r5, #69	@ 0x45
   37628:	d027      	beq.n	3767a <d_expr_primary+0xba>
   3762a:	3301      	adds	r3, #1
   3762c:	2d00      	cmp	r5, #0
   3762e:	d1f8      	bne.n	37622 <d_expr_primary+0x62>
   37630:	2600      	movs	r6, #0
   37632:	4630      	mov	r0, r6
   37634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37636:	68c3      	ldr	r3, [r0, #12]
   37638:	7c1a      	ldrb	r2, [r3, #16]
   3763a:	b11a      	cbz	r2, 37644 <d_expr_primary+0x84>
   3763c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
   3763e:	6859      	ldr	r1, [r3, #4]
   37640:	1a52      	subs	r2, r2, r1
   37642:	62e2      	str	r2, [r4, #44]	@ 0x2c
   37644:	4924      	ldr	r1, [pc, #144]	@ (376d8 <d_expr_primary+0x118>)
   37646:	6818      	ldr	r0, [r3, #0]
   37648:	f7e0 fdda 	bl	18200 <strcmp>
   3764c:	783d      	ldrb	r5, [r7, #0]
   3764e:	2800      	cmp	r0, #0
   37650:	d1e0      	bne.n	37614 <d_expr_primary+0x54>
   37652:	2d45      	cmp	r5, #69	@ 0x45
   37654:	d03d      	beq.n	376d2 <d_expr_primary+0x112>
   37656:	2d6e      	cmp	r5, #110	@ 0x6e
   37658:	d031      	beq.n	376be <d_expr_primary+0xfe>
   3765a:	213d      	movs	r1, #61	@ 0x3d
   3765c:	e7df      	b.n	3761e <d_expr_primary+0x5e>
   3765e:	4620      	mov	r0, r4
   37660:	f7ff fd5e 	bl	37120 <d_special_name>
   37664:	68e3      	ldr	r3, [r4, #12]
   37666:	4606      	mov	r6, r0
   37668:	781a      	ldrb	r2, [r3, #0]
   3766a:	e7c4      	b.n	375f6 <d_expr_primary+0x36>
   3766c:	1c93      	adds	r3, r2, #2
   3766e:	60c3      	str	r3, [r0, #12]
   37670:	7892      	ldrb	r2, [r2, #2]
   37672:	2a5a      	cmp	r2, #90	@ 0x5a
   37674:	d0b1      	beq.n	375da <d_expr_primary+0x1a>
   37676:	2600      	movs	r6, #0
   37678:	e7bd      	b.n	375f6 <d_expr_primary+0x36>
   3767a:	1bdd      	subs	r5, r3, r7
   3767c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   37680:	429a      	cmp	r2, r3
   37682:	da24      	bge.n	376ce <d_expr_primary+0x10e>
   37684:	f8d4 e010 	ldr.w	lr, [r4, #16]
   37688:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   3768c:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
   37690:	ea4f 0c80 	mov.w	ip, r0, lsl #2
   37694:	2000      	movs	r0, #0
   37696:	3201      	adds	r2, #1
   37698:	4285      	cmp	r5, r0
   3769a:	e9c3 0001 	strd	r0, r0, [r3, #4]
   3769e:	6162      	str	r2, [r4, #20]
   376a0:	dd15      	ble.n	376ce <d_expr_primary+0x10e>
   376a2:	e9c3 0001 	strd	r0, r0, [r3, #4]
   376a6:	f80e 000c 	strb.w	r0, [lr, ip]
   376aa:	e9c3 7503 	strd	r7, r5, [r3, #12]
   376ae:	4632      	mov	r2, r6
   376b0:	4620      	mov	r0, r4
   376b2:	f7fd fc07 	bl	34ec4 <d_make_comp>
   376b6:	68e3      	ldr	r3, [r4, #12]
   376b8:	4606      	mov	r6, r0
   376ba:	781a      	ldrb	r2, [r3, #0]
   376bc:	e79b      	b.n	375f6 <d_expr_primary+0x36>
   376be:	1c7b      	adds	r3, r7, #1
   376c0:	60e3      	str	r3, [r4, #12]
   376c2:	787d      	ldrb	r5, [r7, #1]
   376c4:	213e      	movs	r1, #62	@ 0x3e
   376c6:	461f      	mov	r7, r3
   376c8:	e7a7      	b.n	3761a <d_expr_primary+0x5a>
   376ca:	2500      	movs	r5, #0
   376cc:	e7d6      	b.n	3767c <d_expr_primary+0xbc>
   376ce:	2300      	movs	r3, #0
   376d0:	e7ed      	b.n	376ae <d_expr_primary+0xee>
   376d2:	3701      	adds	r7, #1
   376d4:	60e7      	str	r7, [r4, #12]
   376d6:	e7ac      	b.n	37632 <d_expr_primary+0x72>
   376d8:	0003ffb8 	.word	0x0003ffb8

000376dc <d_template_arg>:
   376dc:	b538      	push	{r3, r4, r5, lr}
   376de:	68c3      	ldr	r3, [r0, #12]
   376e0:	781a      	ldrb	r2, [r3, #0]
   376e2:	2a4c      	cmp	r2, #76	@ 0x4c
   376e4:	d01b      	beq.n	3771e <d_template_arg+0x42>
   376e6:	4604      	mov	r4, r0
   376e8:	d808      	bhi.n	376fc <d_template_arg+0x20>
   376ea:	3a49      	subs	r2, #73	@ 0x49
   376ec:	2a01      	cmp	r2, #1
   376ee:	d81a      	bhi.n	37726 <d_template_arg+0x4a>
   376f0:	3301      	adds	r3, #1
   376f2:	60c3      	str	r3, [r0, #12]
   376f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   376f8:	f000 b81c 	b.w	37734 <d_template_args_1>
   376fc:	2a58      	cmp	r2, #88	@ 0x58
   376fe:	d112      	bne.n	37726 <d_template_arg+0x4a>
   37700:	3301      	adds	r3, #1
   37702:	2201      	movs	r2, #1
   37704:	6b05      	ldr	r5, [r0, #48]	@ 0x30
   37706:	60c3      	str	r3, [r0, #12]
   37708:	6302      	str	r2, [r0, #48]	@ 0x30
   3770a:	f7fe ffb1 	bl	36670 <d_expression_1>
   3770e:	68e3      	ldr	r3, [r4, #12]
   37710:	6325      	str	r5, [r4, #48]	@ 0x30
   37712:	781a      	ldrb	r2, [r3, #0]
   37714:	2a45      	cmp	r2, #69	@ 0x45
   37716:	d10b      	bne.n	37730 <d_template_arg+0x54>
   37718:	3301      	adds	r3, #1
   3771a:	60e3      	str	r3, [r4, #12]
   3771c:	bd38      	pop	{r3, r4, r5, pc}
   3771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   37722:	f7ff bf4d 	b.w	375c0 <d_expr_primary>
   37726:	4620      	mov	r0, r4
   37728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3772c:	f7fe b85a 	b.w	357e4 <d_type>
   37730:	2000      	movs	r0, #0
   37732:	bd38      	pop	{r3, r4, r5, pc}

00037734 <d_template_args_1>:
   37734:	b570      	push	{r4, r5, r6, lr}
   37736:	68c3      	ldr	r3, [r0, #12]
   37738:	6a86      	ldr	r6, [r0, #40]	@ 0x28
   3773a:	781a      	ldrb	r2, [r3, #0]
   3773c:	2a45      	cmp	r2, #69	@ 0x45
   3773e:	b082      	sub	sp, #8
   37740:	4604      	mov	r4, r0
   37742:	d01f      	beq.n	37784 <d_template_args_1+0x50>
   37744:	2300      	movs	r3, #0
   37746:	9301      	str	r3, [sp, #4]
   37748:	ad01      	add	r5, sp, #4
   3774a:	e009      	b.n	37760 <d_template_args_1+0x2c>
   3774c:	f7fd fbba 	bl	34ec4 <d_make_comp>
   37750:	6028      	str	r0, [r5, #0]
   37752:	f100 0510 	add.w	r5, r0, #16
   37756:	b160      	cbz	r0, 37772 <d_template_args_1+0x3e>
   37758:	68e3      	ldr	r3, [r4, #12]
   3775a:	781a      	ldrb	r2, [r3, #0]
   3775c:	2a45      	cmp	r2, #69	@ 0x45
   3775e:	d00b      	beq.n	37778 <d_template_args_1+0x44>
   37760:	4620      	mov	r0, r4
   37762:	f7ff ffbb 	bl	376dc <d_template_arg>
   37766:	4602      	mov	r2, r0
   37768:	2300      	movs	r3, #0
   3776a:	212f      	movs	r1, #47	@ 0x2f
   3776c:	4620      	mov	r0, r4
   3776e:	2a00      	cmp	r2, #0
   37770:	d1ec      	bne.n	3774c <d_template_args_1+0x18>
   37772:	2000      	movs	r0, #0
   37774:	b002      	add	sp, #8
   37776:	bd70      	pop	{r4, r5, r6, pc}
   37778:	9801      	ldr	r0, [sp, #4]
   3777a:	62a6      	str	r6, [r4, #40]	@ 0x28
   3777c:	3301      	adds	r3, #1
   3777e:	60e3      	str	r3, [r4, #12]
   37780:	b002      	add	sp, #8
   37782:	bd70      	pop	{r4, r5, r6, pc}
   37784:	1c5a      	adds	r2, r3, #1
   37786:	2300      	movs	r3, #0
   37788:	60c2      	str	r2, [r0, #12]
   3778a:	212f      	movs	r1, #47	@ 0x2f
   3778c:	461a      	mov	r2, r3
   3778e:	b002      	add	sp, #8
   37790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   37794:	f7fd bb96 	b.w	34ec4 <d_make_comp>

00037798 <d_prefix>:
   37798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3779a:	68c5      	ldr	r5, [r0, #12]
   3779c:	4606      	mov	r6, r0
   3779e:	460f      	mov	r7, r1
   377a0:	2400      	movs	r4, #0
   377a2:	782b      	ldrb	r3, [r5, #0]
   377a4:	2b44      	cmp	r3, #68	@ 0x44
   377a6:	d00a      	beq.n	377be <d_prefix+0x26>
   377a8:	3b49      	subs	r3, #73	@ 0x49
   377aa:	2b0b      	cmp	r3, #11
   377ac:	d80c      	bhi.n	377c8 <d_prefix+0x30>
   377ae:	e8df f003 	tbb	[pc, r3]
   377b2:	0b3a      	.short	0x0b3a
   377b4:	0b370b0b 	.word	0x0b370b0b
   377b8:	0b0b0b0b 	.word	0x0b0b0b0b
   377bc:	2329      	.short	0x2329
   377be:	786b      	ldrb	r3, [r5, #1]
   377c0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
   377c4:	2b54      	cmp	r3, #84	@ 0x54
   377c6:	d03d      	beq.n	37844 <d_prefix+0xac>
   377c8:	2200      	movs	r2, #0
   377ca:	4621      	mov	r1, r4
   377cc:	4630      	mov	r0, r6
   377ce:	f7fe fd81 	bl	362d4 <d_unqualified_name>
   377d2:	4604      	mov	r4, r0
   377d4:	2c00      	cmp	r4, #0
   377d6:	d03b      	beq.n	37850 <d_prefix+0xb8>
   377d8:	68f5      	ldr	r5, [r6, #12]
   377da:	782b      	ldrb	r3, [r5, #0]
   377dc:	2b45      	cmp	r3, #69	@ 0x45
   377de:	d038      	beq.n	37852 <d_prefix+0xba>
   377e0:	2f00      	cmp	r7, #0
   377e2:	d0de      	beq.n	377a2 <d_prefix+0xa>
   377e4:	e9d6 3208 	ldrd	r3, r2, [r6, #32]
   377e8:	4293      	cmp	r3, r2
   377ea:	da31      	bge.n	37850 <d_prefix+0xb8>
   377ec:	69f2      	ldr	r2, [r6, #28]
   377ee:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   377f2:	3301      	adds	r3, #1
   377f4:	6233      	str	r3, [r6, #32]
   377f6:	e7d4      	b.n	377a2 <d_prefix+0xa>
   377f8:	bb54      	cbnz	r4, 37850 <d_prefix+0xb8>
   377fa:	4630      	mov	r0, r6
   377fc:	f7fd fe28 	bl	35450 <d_template_param>
   37800:	4604      	mov	r4, r0
   37802:	e7e7      	b.n	377d4 <d_prefix+0x3c>
   37804:	2101      	movs	r1, #1
   37806:	4630      	mov	r0, r6
   37808:	f7fd fefa 	bl	35600 <d_substitution>
   3780c:	4602      	mov	r2, r0
   3780e:	b1f8      	cbz	r0, 37850 <d_prefix+0xb8>
   37810:	7803      	ldrb	r3, [r0, #0]
   37812:	3b53      	subs	r3, #83	@ 0x53
   37814:	2b01      	cmp	r3, #1
   37816:	d9d8      	bls.n	377ca <d_prefix+0x32>
   37818:	b9d4      	cbnz	r4, 37850 <d_prefix+0xb8>
   3781a:	68f5      	ldr	r5, [r6, #12]
   3781c:	4604      	mov	r4, r0
   3781e:	e7c0      	b.n	377a2 <d_prefix+0xa>
   37820:	3501      	adds	r5, #1
   37822:	60f5      	str	r5, [r6, #12]
   37824:	e7bd      	b.n	377a2 <d_prefix+0xa>
   37826:	b19c      	cbz	r4, 37850 <d_prefix+0xb8>
   37828:	3501      	adds	r5, #1
   3782a:	60f5      	str	r5, [r6, #12]
   3782c:	4630      	mov	r0, r6
   3782e:	f7ff ff81 	bl	37734 <d_template_args_1>
   37832:	4603      	mov	r3, r0
   37834:	b160      	cbz	r0, 37850 <d_prefix+0xb8>
   37836:	4622      	mov	r2, r4
   37838:	2104      	movs	r1, #4
   3783a:	4630      	mov	r0, r6
   3783c:	f7fd fb42 	bl	34ec4 <d_make_comp>
   37840:	4604      	mov	r4, r0
   37842:	e7c7      	b.n	377d4 <d_prefix+0x3c>
   37844:	b924      	cbnz	r4, 37850 <d_prefix+0xb8>
   37846:	4630      	mov	r0, r6
   37848:	f7fd ffcc 	bl	357e4 <d_type>
   3784c:	4604      	mov	r4, r0
   3784e:	e7c1      	b.n	377d4 <d_prefix+0x3c>
   37850:	2400      	movs	r4, #0
   37852:	4620      	mov	r0, r4
   37854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37856:	bf00      	nop

00037858 <d_print_comp_inner>:
   37858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3785c:	4604      	mov	r4, r0
   3785e:	b097      	sub	sp, #92	@ 0x5c
   37860:	2a00      	cmp	r2, #0
   37862:	f000 8083 	beq.w	3796c <d_print_comp_inner+0x114>
   37866:	f8d0 7118 	ldr.w	r7, [r0, #280]	@ 0x118
   3786a:	2f00      	cmp	r7, #0
   3786c:	f040 8081 	bne.w	37972 <d_print_comp_inner+0x11a>
   37870:	7816      	ldrb	r6, [r2, #0]
   37872:	4693      	mov	fp, r2
   37874:	2e5c      	cmp	r6, #92	@ 0x5c
   37876:	d879      	bhi.n	3796c <d_print_comp_inner+0x114>
   37878:	e8df f016 	tbh	[pc, r6, lsl #1]
   3787c:	01740a2e 	.word	0x01740a2e
   37880:	05f70174 	.word	0x05f70174
   37884:	005d05bc 	.word	0x005d05bc
   37888:	0107058f 	.word	0x0107058f
   3788c:	0247087c 	.word	0x0247087c
   37890:	02df0221 	.word	0x02df0221
   37894:	029302b9 	.word	0x029302b9
   37898:	0407026d 	.word	0x0407026d
   3789c:	03bb03e1 	.word	0x03bb03e1
   378a0:	038e0395 	.word	0x038e0395
   378a4:	03420368 	.word	0x03420368
   378a8:	01fb031c 	.word	0x01fb031c
   378ac:	007e01d0 	.word	0x007e01d0
   378b0:	007e007e 	.word	0x007e007e
   378b4:	009c009c 	.word	0x009c009c
   378b8:	009c009c 	.word	0x009c009c
   378bc:	009c009c 	.word	0x009c009c
   378c0:	0127009c 	.word	0x0127009c
   378c4:	009c0127 	.word	0x009c0127
   378c8:	0a02009c 	.word	0x0a02009c
   378cc:	05950093 	.word	0x05950093
   378d0:	00ba06a1 	.word	0x00ba06a1
   378d4:	00ba0078 	.word	0x00ba0078
   378d8:	01490149 	.word	0x01490149
   378dc:	067c0569 	.word	0x067c0569
   378e0:	078a0649 	.word	0x078a0649
   378e4:	07430078 	.word	0x07430078
   378e8:	0726073b 	.word	0x0726073b
   378ec:	007807ec 	.word	0x007807ec
   378f0:	007807b0 	.word	0x007807b0
   378f4:	00d20078 	.word	0x00d20078
   378f8:	084f00d2 	.word	0x084f00d2
   378fc:	087308b6 	.word	0x087308b6
   37900:	09d208dc 	.word	0x09d208dc
   37904:	09140764 	.word	0x09140764
   37908:	018401aa 	.word	0x018401aa
   3790c:	07000078 	.word	0x07000078
   37910:	093a0960 	.word	0x093a0960
   37914:	089a0986 	.word	0x089a0986
   37918:	08ea009c 	.word	0x08ea009c
   3791c:	009c009c 	.word	0x009c009c
   37920:	010a042d 	.word	0x010a042d
   37924:	048e010a 	.word	0x048e010a
   37928:	050e0468 	.word	0x050e0468
   3792c:	009304e8 	.word	0x009304e8
   37930:	049f04aa 	.word	0x049f04aa
   37934:	053c      	.short	0x053c
   37936:	f8d2 800c 	ldr.w	r8, [r2, #12]
   3793a:	f8d0 3120 	ldr.w	r3, [r0, #288]	@ 0x120
   3793e:	f108 0201 	add.w	r2, r8, #1
   37942:	4293      	cmp	r3, r2
   37944:	f341 8470 	ble.w	39228 <d_print_comp_inner+0x19d0>
   37948:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
   3794c:	685b      	ldr	r3, [r3, #4]
   3794e:	68db      	ldr	r3, [r3, #12]
   37950:	4641      	mov	r1, r8
   37952:	b15b      	cbz	r3, 3796c <d_print_comp_inner+0x114>
   37954:	f1b8 0f00 	cmp.w	r8, #0
   37958:	d104      	bne.n	37964 <d_print_comp_inner+0x10c>
   3795a:	f001 bcea 	b.w	39332 <d_print_comp_inner+0x1ada>
   3795e:	2900      	cmp	r1, #0
   37960:	f001 84e7 	beq.w	39332 <d_print_comp_inner+0x1ada>
   37964:	691b      	ldr	r3, [r3, #16]
   37966:	3901      	subs	r1, #1
   37968:	2b00      	cmp	r3, #0
   3796a:	d1f8      	bne.n	3795e <d_print_comp_inner+0x106>
   3796c:	2301      	movs	r3, #1
   3796e:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
   37972:	b017      	add	sp, #92	@ 0x5c
   37974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37978:	f8d0 1114 	ldr.w	r1, [r0, #276]	@ 0x114
   3797c:	468c      	mov	ip, r1
   3797e:	2900      	cmp	r1, #0
   37980:	f002 81a6 	beq.w	39cd0 <d_print_comp_inner+0x2478>
   37984:	460b      	mov	r3, r1
   37986:	e001      	b.n	3798c <d_print_comp_inner+0x134>
   37988:	681b      	ldr	r3, [r3, #0]
   3798a:	b1ab      	cbz	r3, 379b8 <d_print_comp_inner+0x160>
   3798c:	689a      	ldr	r2, [r3, #8]
   3798e:	2a00      	cmp	r2, #0
   37990:	d1fa      	bne.n	37988 <d_print_comp_inner+0x130>
   37992:	685a      	ldr	r2, [r3, #4]
   37994:	7812      	ldrb	r2, [r2, #0]
   37996:	f1a2 0019 	sub.w	r0, r2, #25
   3799a:	2802      	cmp	r0, #2
   3799c:	d80c      	bhi.n	379b8 <d_print_comp_inner+0x160>
   3799e:	4296      	cmp	r6, r2
   379a0:	d1f2      	bne.n	37988 <d_print_comp_inner+0x130>
   379a2:	f8db 200c 	ldr.w	r2, [fp, #12]
   379a6:	2111      	movs	r1, #17
   379a8:	4620      	mov	r0, r4
   379aa:	b017      	add	sp, #92	@ 0x5c
   379ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   379b0:	f002 ba20 	b.w	39df4 <d_print_comp>
   379b4:	f8d0 1114 	ldr.w	r1, [r0, #276]	@ 0x114
   379b8:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   379bc:	9309      	str	r3, [sp, #36]	@ 0x24
   379be:	2300      	movs	r3, #0
   379c0:	e9cd b307 	strd	fp, r3, [sp, #28]
   379c4:	aa06      	add	r2, sp, #24
   379c6:	f8c4 2114 	str.w	r2, [r4, #276]	@ 0x114
   379ca:	9106      	str	r1, [sp, #24]
   379cc:	f8db 200c 	ldr.w	r2, [fp, #12]
   379d0:	2111      	movs	r1, #17
   379d2:	4620      	mov	r0, r4
   379d4:	f002 fa0e 	bl	39df4 <d_print_comp>
   379d8:	9b08      	ldr	r3, [sp, #32]
   379da:	2b00      	cmp	r3, #0
   379dc:	f001 83f1 	beq.w	391c2 <d_print_comp_inner+0x196a>
   379e0:	9b06      	ldr	r3, [sp, #24]
   379e2:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   379e6:	2f00      	cmp	r7, #0
   379e8:	d0c3      	beq.n	37972 <d_print_comp_inner+0x11a>
   379ea:	f8c4 8110 	str.w	r8, [r4, #272]	@ 0x110
   379ee:	e7c0      	b.n	37972 <d_print_comp_inner+0x11a>
   379f0:	e9d0 3244 	ldrd	r3, r2, [r0, #272]	@ 0x110
   379f4:	a906      	add	r1, sp, #24
   379f6:	2000      	movs	r0, #0
   379f8:	e9cd 2b06 	strd	r2, fp, [sp, #24]
   379fc:	9008      	str	r0, [sp, #32]
   379fe:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
   37a02:	f8db 2010 	ldr.w	r2, [fp, #16]
   37a06:	9309      	str	r3, [sp, #36]	@ 0x24
   37a08:	2111      	movs	r1, #17
   37a0a:	4620      	mov	r0, r4
   37a0c:	f002 f9f2 	bl	39df4 <d_print_comp>
   37a10:	9b08      	ldr	r3, [sp, #32]
   37a12:	2b00      	cmp	r3, #0
   37a14:	f001 855e 	beq.w	394d4 <d_print_comp_inner+0x1c7c>
   37a18:	9b06      	ldr	r3, [sp, #24]
   37a1a:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   37a1e:	e7a8      	b.n	37972 <d_print_comp_inner+0x11a>
   37a20:	68d2      	ldr	r2, [r2, #12]
   37a22:	7813      	ldrb	r3, [r2, #0]
   37a24:	2b27      	cmp	r3, #39	@ 0x27
   37a26:	f041 845b 	bne.w	392e0 <d_print_comp_inner+0x1a88>
   37a2a:	68d3      	ldr	r3, [r2, #12]
   37a2c:	7c1f      	ldrb	r7, [r3, #16]
   37a2e:	2f06      	cmp	r7, #6
   37a30:	f201 859e 	bhi.w	39570 <d_print_comp_inner+0x1d18>
   37a34:	b12f      	cbz	r7, 37a42 <d_print_comp_inner+0x1ea>
   37a36:	f8db 3010 	ldr.w	r3, [fp, #16]
   37a3a:	781b      	ldrb	r3, [r3, #0]
   37a3c:	2b00      	cmp	r3, #0
   37a3e:	f002 80ed 	beq.w	39c1c <d_print_comp_inner+0x23c4>
   37a42:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   37a46:	29ff      	cmp	r1, #255	@ 0xff
   37a48:	f001 8736 	beq.w	398b8 <d_print_comp_inner+0x2060>
   37a4c:	1c4b      	adds	r3, r1, #1
   37a4e:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   37a52:	2328      	movs	r3, #40	@ 0x28
   37a54:	5463      	strb	r3, [r4, r1]
   37a56:	4620      	mov	r0, r4
   37a58:	2111      	movs	r1, #17
   37a5a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   37a5e:	f002 f9c9 	bl	39df4 <d_print_comp>
   37a62:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   37a66:	29ff      	cmp	r1, #255	@ 0xff
   37a68:	f001 8716 	beq.w	39898 <d_print_comp_inner+0x2040>
   37a6c:	1c4b      	adds	r3, r1, #1
   37a6e:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   37a72:	2329      	movs	r3, #41	@ 0x29
   37a74:	5463      	strb	r3, [r4, r1]
   37a76:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   37a7a:	f89b 3000 	ldrb.w	r3, [fp]
   37a7e:	2b3e      	cmp	r3, #62	@ 0x3e
   37a80:	f001 86fc 	beq.w	3987c <d_print_comp_inner+0x2024>
   37a84:	2f08      	cmp	r7, #8
   37a86:	f001 86ec 	beq.w	39862 <d_print_comp_inner+0x200a>
   37a8a:	f8db 2010 	ldr.w	r2, [fp, #16]
   37a8e:	e78a      	b.n	379a6 <d_print_comp_inner+0x14e>
   37a90:	68d2      	ldr	r2, [r2, #12]
   37a92:	2a00      	cmp	r2, #0
   37a94:	f001 8427 	beq.w	392e6 <d_print_comp_inner+0x1a8e>
   37a98:	2111      	movs	r1, #17
   37a9a:	f002 f9ab 	bl	39df4 <d_print_comp>
   37a9e:	f89b 3000 	ldrb.w	r3, [fp]
   37aa2:	2b54      	cmp	r3, #84	@ 0x54
   37aa4:	f001 8422 	beq.w	392ec <d_print_comp_inner+0x1a94>
   37aa8:	f8db 300c 	ldr.w	r3, [fp, #12]
   37aac:	2b00      	cmp	r3, #0
   37aae:	d0ec      	beq.n	37a8a <d_print_comp_inner+0x232>
   37ab0:	262e      	movs	r6, #46	@ 0x2e
   37ab2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   37ab6:	29ff      	cmp	r1, #255	@ 0xff
   37ab8:	f001 8770 	beq.w	3999c <d_print_comp_inner+0x2144>
   37abc:	1c4b      	adds	r3, r1, #1
   37abe:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   37ac2:	5466      	strb	r6, [r4, r1]
   37ac4:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   37ac8:	e7df      	b.n	37a8a <d_print_comp_inner+0x232>
   37aca:	68d2      	ldr	r2, [r2, #12]
   37acc:	f8d0 9120 	ldr.w	r9, [r0, #288]	@ 0x120
   37ad0:	7813      	ldrb	r3, [r2, #0]
   37ad2:	f1b9 0f00 	cmp.w	r9, #0
   37ad6:	d103      	bne.n	37ae0 <d_print_comp_inner+0x288>
   37ad8:	2b05      	cmp	r3, #5
   37ada:	f001 8725 	beq.w	39928 <d_print_comp_inner+0x20d0>
   37ade:	464f      	mov	r7, r9
   37ae0:	4610      	mov	r0, r2
   37ae2:	2b23      	cmp	r3, #35	@ 0x23
   37ae4:	f001 84fd 	beq.w	394e2 <d_print_comp_inner+0x1c8a>
   37ae8:	429e      	cmp	r6, r3
   37aea:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
   37aee:	f001 85c0 	beq.w	39672 <d_print_comp_inner+0x1e1a>
   37af2:	2b24      	cmp	r3, #36	@ 0x24
   37af4:	f001 8186 	beq.w	38e04 <d_print_comp_inner+0x15ac>
   37af8:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   37afc:	9309      	str	r3, [sp, #36]	@ 0x24
   37afe:	ab06      	add	r3, sp, #24
   37b00:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   37b04:	2300      	movs	r3, #0
   37b06:	e9cd cb06 	strd	ip, fp, [sp, #24]
   37b0a:	9308      	str	r3, [sp, #32]
   37b0c:	e760      	b.n	379d0 <d_print_comp_inner+0x178>
   37b0e:	68d2      	ldr	r2, [r2, #12]
   37b10:	b112      	cbz	r2, 37b18 <d_print_comp_inner+0x2c0>
   37b12:	2111      	movs	r1, #17
   37b14:	f002 f96e 	bl	39df4 <d_print_comp>
   37b18:	f8db 3010 	ldr.w	r3, [fp, #16]
   37b1c:	2b00      	cmp	r3, #0
   37b1e:	f43f af28 	beq.w	37972 <d_print_comp_inner+0x11a>
   37b22:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   37b26:	29fd      	cmp	r1, #253	@ 0xfd
   37b28:	f201 8591 	bhi.w	3964e <d_print_comp_inner+0x1df6>
   37b2c:	49d6      	ldr	r1, [pc, #856]	@ (37e88 <d_print_comp_inner+0x630>)
   37b2e:	4620      	mov	r0, r4
   37b30:	f7fd fc5a 	bl	353e8 <d_append_string>
   37b34:	f8db 2010 	ldr.w	r2, [fp, #16]
   37b38:	f8d4 5128 	ldr.w	r5, [r4, #296]	@ 0x128
   37b3c:	f8d4 6100 	ldr.w	r6, [r4, #256]	@ 0x100
   37b40:	2111      	movs	r1, #17
   37b42:	4620      	mov	r0, r4
   37b44:	f002 f956 	bl	39df4 <d_print_comp>
   37b48:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   37b4c:	42ab      	cmp	r3, r5
   37b4e:	f47f af10 	bne.w	37972 <d_print_comp_inner+0x11a>
   37b52:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   37b56:	42b3      	cmp	r3, r6
   37b58:	f47f af0b 	bne.w	37972 <d_print_comp_inner+0x11a>
   37b5c:	3b02      	subs	r3, #2
   37b5e:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   37b62:	e706      	b.n	37972 <d_print_comp_inner+0x11a>
   37b64:	68d2      	ldr	r2, [r2, #12]
   37b66:	2111      	movs	r1, #17
   37b68:	f002 f944 	bl	39df4 <d_print_comp>
   37b6c:	49c7      	ldr	r1, [pc, #796]	@ (37e8c <d_print_comp_inner+0x634>)
   37b6e:	4620      	mov	r0, r4
   37b70:	f7fd fc3a 	bl	353e8 <d_append_string>
   37b74:	f8db 7010 	ldr.w	r7, [fp, #16]
   37b78:	783b      	ldrb	r3, [r7, #0]
   37b7a:	2b48      	cmp	r3, #72	@ 0x48
   37b7c:	f001 80e8 	beq.w	38d50 <d_print_comp_inner+0x14f8>
   37b80:	463a      	mov	r2, r7
   37b82:	e710      	b.n	379a6 <d_print_comp_inner+0x14e>
   37b84:	4ec2      	ldr	r6, [pc, #776]	@ (37e90 <d_print_comp_inner+0x638>)
   37b86:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37b8a:	f106 0907 	add.w	r9, r6, #7
   37b8e:	f04f 0800 	mov.w	r8, #0
   37b92:	e009      	b.n	37ba8 <d_print_comp_inner+0x350>
   37b94:	460b      	mov	r3, r1
   37b96:	3101      	adds	r1, #1
   37b98:	454e      	cmp	r6, r9
   37b9a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37b9e:	54e5      	strb	r5, [r4, r3]
   37ba0:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37ba4:	f001 81eb 	beq.w	38f7e <d_print_comp_inner+0x1726>
   37ba8:	29ff      	cmp	r1, #255	@ 0xff
   37baa:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37bae:	d1f1      	bne.n	37b94 <d_print_comp_inner+0x33c>
   37bb0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37bb4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37bb8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37bbc:	4620      	mov	r0, r4
   37bbe:	4798      	blx	r3
   37bc0:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37bc4:	2101      	movs	r1, #1
   37bc6:	440a      	add	r2, r1
   37bc8:	2300      	movs	r3, #0
   37bca:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37bce:	e7e3      	b.n	37b98 <d_print_comp_inner+0x340>
   37bd0:	4eb0      	ldr	r6, [pc, #704]	@ (37e94 <d_print_comp_inner+0x63c>)
   37bd2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37bd6:	f106 091c 	add.w	r9, r6, #28
   37bda:	f04f 0800 	mov.w	r8, #0
   37bde:	e009      	b.n	37bf4 <d_print_comp_inner+0x39c>
   37be0:	460b      	mov	r3, r1
   37be2:	3101      	adds	r1, #1
   37be4:	454e      	cmp	r6, r9
   37be6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37bea:	54e5      	strb	r5, [r4, r3]
   37bec:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37bf0:	f43f aed7 	beq.w	379a2 <d_print_comp_inner+0x14a>
   37bf4:	29ff      	cmp	r1, #255	@ 0xff
   37bf6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37bfa:	d1f1      	bne.n	37be0 <d_print_comp_inner+0x388>
   37bfc:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37c00:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37c04:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37c08:	4620      	mov	r0, r4
   37c0a:	4798      	blx	r3
   37c0c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37c10:	2101      	movs	r1, #1
   37c12:	440a      	add	r2, r1
   37c14:	2300      	movs	r3, #0
   37c16:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37c1a:	e7e3      	b.n	37be4 <d_print_comp_inner+0x38c>
   37c1c:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
   37c20:	2b00      	cmp	r3, #0
   37c22:	f43f aea6 	beq.w	37972 <d_print_comp_inner+0x11a>
   37c26:	442b      	add	r3, r5
   37c28:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37c2c:	3d01      	subs	r5, #1
   37c2e:	1e5f      	subs	r7, r3, #1
   37c30:	f04f 0800 	mov.w	r8, #0
   37c34:	e009      	b.n	37c4a <d_print_comp_inner+0x3f2>
   37c36:	460b      	mov	r3, r1
   37c38:	3101      	adds	r1, #1
   37c3a:	42af      	cmp	r7, r5
   37c3c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37c40:	54e6      	strb	r6, [r4, r3]
   37c42:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   37c46:	f43f ae94 	beq.w	37972 <d_print_comp_inner+0x11a>
   37c4a:	29ff      	cmp	r1, #255	@ 0xff
   37c4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   37c50:	d1f1      	bne.n	37c36 <d_print_comp_inner+0x3de>
   37c52:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37c56:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37c5a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37c5e:	4620      	mov	r0, r4
   37c60:	4798      	blx	r3
   37c62:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37c66:	2101      	movs	r1, #1
   37c68:	440a      	add	r2, r1
   37c6a:	2300      	movs	r3, #0
   37c6c:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37c70:	e7e3      	b.n	37c3a <d_print_comp_inner+0x3e2>
   37c72:	4e89      	ldr	r6, [pc, #548]	@ (37e98 <d_print_comp_inner+0x640>)
   37c74:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37c78:	f106 0911 	add.w	r9, r6, #17
   37c7c:	f04f 0800 	mov.w	r8, #0
   37c80:	e009      	b.n	37c96 <d_print_comp_inner+0x43e>
   37c82:	460b      	mov	r3, r1
   37c84:	3101      	adds	r1, #1
   37c86:	45b1      	cmp	r9, r6
   37c88:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37c8c:	54e5      	strb	r5, [r4, r3]
   37c8e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37c92:	f43f ae86 	beq.w	379a2 <d_print_comp_inner+0x14a>
   37c96:	29ff      	cmp	r1, #255	@ 0xff
   37c98:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37c9c:	d1f1      	bne.n	37c82 <d_print_comp_inner+0x42a>
   37c9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37ca2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37ca6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37caa:	4620      	mov	r0, r4
   37cac:	4798      	blx	r3
   37cae:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37cb2:	2101      	movs	r1, #1
   37cb4:	440a      	add	r2, r1
   37cb6:	2300      	movs	r3, #0
   37cb8:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37cbc:	e7e3      	b.n	37c86 <d_print_comp_inner+0x42e>
   37cbe:	4e77      	ldr	r6, [pc, #476]	@ (37e9c <d_print_comp_inner+0x644>)
   37cc0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37cc4:	f106 0908 	add.w	r9, r6, #8
   37cc8:	f04f 0800 	mov.w	r8, #0
   37ccc:	e009      	b.n	37ce2 <d_print_comp_inner+0x48a>
   37cce:	460b      	mov	r3, r1
   37cd0:	3101      	adds	r1, #1
   37cd2:	45b1      	cmp	r9, r6
   37cd4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37cd8:	54e5      	strb	r5, [r4, r3]
   37cda:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37cde:	f43f ae60 	beq.w	379a2 <d_print_comp_inner+0x14a>
   37ce2:	29ff      	cmp	r1, #255	@ 0xff
   37ce4:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37ce8:	d1f1      	bne.n	37cce <d_print_comp_inner+0x476>
   37cea:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37cee:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37cf2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37cf6:	4620      	mov	r0, r4
   37cf8:	4798      	blx	r3
   37cfa:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37cfe:	2101      	movs	r1, #1
   37d00:	440a      	add	r2, r1
   37d02:	2300      	movs	r3, #0
   37d04:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37d08:	e7e3      	b.n	37cd2 <d_print_comp_inner+0x47a>
   37d0a:	4e65      	ldr	r6, [pc, #404]	@ (37ea0 <d_print_comp_inner+0x648>)
   37d0c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37d10:	f106 090b 	add.w	r9, r6, #11
   37d14:	f04f 0800 	mov.w	r8, #0
   37d18:	e009      	b.n	37d2e <d_print_comp_inner+0x4d6>
   37d1a:	460b      	mov	r3, r1
   37d1c:	3101      	adds	r1, #1
   37d1e:	45b1      	cmp	r9, r6
   37d20:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37d24:	54e5      	strb	r5, [r4, r3]
   37d26:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37d2a:	f43f ae3a 	beq.w	379a2 <d_print_comp_inner+0x14a>
   37d2e:	29ff      	cmp	r1, #255	@ 0xff
   37d30:	f816 5b01 	ldrb.w	r5, [r6], #1
   37d34:	d1f1      	bne.n	37d1a <d_print_comp_inner+0x4c2>
   37d36:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37d3a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37d3e:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37d42:	4620      	mov	r0, r4
   37d44:	4798      	blx	r3
   37d46:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37d4a:	2101      	movs	r1, #1
   37d4c:	440a      	add	r2, r1
   37d4e:	2300      	movs	r3, #0
   37d50:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37d54:	e7e3      	b.n	37d1e <d_print_comp_inner+0x4c6>
   37d56:	4e53      	ldr	r6, [pc, #332]	@ (37ea4 <d_print_comp_inner+0x64c>)
   37d58:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37d5c:	f106 0910 	add.w	r9, r6, #16
   37d60:	f04f 0800 	mov.w	r8, #0
   37d64:	e009      	b.n	37d7a <d_print_comp_inner+0x522>
   37d66:	460b      	mov	r3, r1
   37d68:	3101      	adds	r1, #1
   37d6a:	45b1      	cmp	r9, r6
   37d6c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37d70:	54e5      	strb	r5, [r4, r3]
   37d72:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37d76:	f43f ae14 	beq.w	379a2 <d_print_comp_inner+0x14a>
   37d7a:	29ff      	cmp	r1, #255	@ 0xff
   37d7c:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37d80:	d1f1      	bne.n	37d66 <d_print_comp_inner+0x50e>
   37d82:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37d86:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37d8a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37d8e:	4620      	mov	r0, r4
   37d90:	4798      	blx	r3
   37d92:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37d96:	2101      	movs	r1, #1
   37d98:	440a      	add	r2, r1
   37d9a:	2300      	movs	r3, #0
   37d9c:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37da0:	e7e3      	b.n	37d6a <d_print_comp_inner+0x512>
   37da2:	4e41      	ldr	r6, [pc, #260]	@ (37ea8 <d_print_comp_inner+0x650>)
   37da4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37da8:	f106 0912 	add.w	r9, r6, #18
   37dac:	f04f 0800 	mov.w	r8, #0
   37db0:	e009      	b.n	37dc6 <d_print_comp_inner+0x56e>
   37db2:	460b      	mov	r3, r1
   37db4:	3101      	adds	r1, #1
   37db6:	454e      	cmp	r6, r9
   37db8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37dbc:	54e5      	strb	r5, [r4, r3]
   37dbe:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37dc2:	f43f adee 	beq.w	379a2 <d_print_comp_inner+0x14a>
   37dc6:	29ff      	cmp	r1, #255	@ 0xff
   37dc8:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37dcc:	d1f1      	bne.n	37db2 <d_print_comp_inner+0x55a>
   37dce:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37dd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37dd6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37dda:	4620      	mov	r0, r4
   37ddc:	4798      	blx	r3
   37dde:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37de2:	2101      	movs	r1, #1
   37de4:	440a      	add	r2, r1
   37de6:	2300      	movs	r3, #0
   37de8:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37dec:	e7e3      	b.n	37db6 <d_print_comp_inner+0x55e>
   37dee:	4e2f      	ldr	r6, [pc, #188]	@ (37eac <d_print_comp_inner+0x654>)
   37df0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37df4:	f106 090d 	add.w	r9, r6, #13
   37df8:	f04f 0800 	mov.w	r8, #0
   37dfc:	e009      	b.n	37e12 <d_print_comp_inner+0x5ba>
   37dfe:	460b      	mov	r3, r1
   37e00:	3101      	adds	r1, #1
   37e02:	454e      	cmp	r6, r9
   37e04:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37e08:	54e5      	strb	r5, [r4, r3]
   37e0a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37e0e:	f43f adc8 	beq.w	379a2 <d_print_comp_inner+0x14a>
   37e12:	29ff      	cmp	r1, #255	@ 0xff
   37e14:	f816 5b01 	ldrb.w	r5, [r6], #1
   37e18:	d1f1      	bne.n	37dfe <d_print_comp_inner+0x5a6>
   37e1a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37e1e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37e22:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37e26:	4620      	mov	r0, r4
   37e28:	4798      	blx	r3
   37e2a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37e2e:	2101      	movs	r1, #1
   37e30:	440a      	add	r2, r1
   37e32:	2300      	movs	r3, #0
   37e34:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37e38:	e7e3      	b.n	37e02 <d_print_comp_inner+0x5aa>
   37e3a:	4e1d      	ldr	r6, [pc, #116]	@ (37eb0 <d_print_comp_inner+0x658>)
   37e3c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37e40:	f106 0918 	add.w	r9, r6, #24
   37e44:	f04f 0800 	mov.w	r8, #0
   37e48:	e009      	b.n	37e5e <d_print_comp_inner+0x606>
   37e4a:	460b      	mov	r3, r1
   37e4c:	3101      	adds	r1, #1
   37e4e:	454e      	cmp	r6, r9
   37e50:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37e54:	54e5      	strb	r5, [r4, r3]
   37e56:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37e5a:	f001 8177 	beq.w	3914c <d_print_comp_inner+0x18f4>
   37e5e:	29ff      	cmp	r1, #255	@ 0xff
   37e60:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37e64:	d1f1      	bne.n	37e4a <d_print_comp_inner+0x5f2>
   37e66:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37e6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37e6e:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37e72:	4620      	mov	r0, r4
   37e74:	4798      	blx	r3
   37e76:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37e7a:	2101      	movs	r1, #1
   37e7c:	440a      	add	r2, r1
   37e7e:	2300      	movs	r3, #0
   37e80:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37e84:	e7e3      	b.n	37e4e <d_print_comp_inner+0x5f6>
   37e86:	bf00      	nop
   37e88:	0003ffd4 	.word	0x0003ffd4
   37e8c:	0003ffd8 	.word	0x0003ffd8
   37e90:	00040237 	.word	0x00040237
   37e94:	00040217 	.word	0x00040217
   37e98:	00040147 	.word	0x00040147
   37e9c:	0004003b 	.word	0x0004003b
   37ea0:	00040030 	.word	0x00040030
   37ea4:	0004008f 	.word	0x0004008f
   37ea8:	0004007b 	.word	0x0004007b
   37eac:	0004006c 	.word	0x0004006c
   37eb0:	00040047 	.word	0x00040047
   37eb4:	4eca      	ldr	r6, [pc, #808]	@ (381e0 <d_print_comp_inner+0x988>)
   37eb6:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37eba:	f106 0915 	add.w	r9, r6, #21
   37ebe:	f04f 0800 	mov.w	r8, #0
   37ec2:	e009      	b.n	37ed8 <d_print_comp_inner+0x680>
   37ec4:	460b      	mov	r3, r1
   37ec6:	3101      	adds	r1, #1
   37ec8:	45b1      	cmp	r9, r6
   37eca:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37ece:	54e5      	strb	r5, [r4, r3]
   37ed0:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37ed4:	f001 8149 	beq.w	3916a <d_print_comp_inner+0x1912>
   37ed8:	29ff      	cmp	r1, #255	@ 0xff
   37eda:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37ede:	d1f1      	bne.n	37ec4 <d_print_comp_inner+0x66c>
   37ee0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37ee4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37ee8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37eec:	4620      	mov	r0, r4
   37eee:	4798      	blx	r3
   37ef0:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37ef4:	2101      	movs	r1, #1
   37ef6:	440a      	add	r2, r1
   37ef8:	2300      	movs	r3, #0
   37efa:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37efe:	e7e3      	b.n	37ec8 <d_print_comp_inner+0x670>
   37f00:	4eb8      	ldr	r6, [pc, #736]	@ (381e4 <d_print_comp_inner+0x98c>)
   37f02:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37f06:	f106 0919 	add.w	r9, r6, #25
   37f0a:	f04f 0800 	mov.w	r8, #0
   37f0e:	e009      	b.n	37f24 <d_print_comp_inner+0x6cc>
   37f10:	460b      	mov	r3, r1
   37f12:	3101      	adds	r1, #1
   37f14:	45b1      	cmp	r9, r6
   37f16:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37f1a:	54e5      	strb	r5, [r4, r3]
   37f1c:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37f20:	f43f ad3f 	beq.w	379a2 <d_print_comp_inner+0x14a>
   37f24:	29ff      	cmp	r1, #255	@ 0xff
   37f26:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37f2a:	d1f1      	bne.n	37f10 <d_print_comp_inner+0x6b8>
   37f2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37f30:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37f34:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37f38:	4620      	mov	r0, r4
   37f3a:	4798      	blx	r3
   37f3c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37f40:	2101      	movs	r1, #1
   37f42:	440a      	add	r2, r1
   37f44:	2300      	movs	r3, #0
   37f46:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37f4a:	e7e3      	b.n	37f14 <d_print_comp_inner+0x6bc>
   37f4c:	4ea6      	ldr	r6, [pc, #664]	@ (381e8 <d_print_comp_inner+0x990>)
   37f4e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37f52:	f106 0916 	add.w	r9, r6, #22
   37f56:	f04f 0800 	mov.w	r8, #0
   37f5a:	e009      	b.n	37f70 <d_print_comp_inner+0x718>
   37f5c:	460b      	mov	r3, r1
   37f5e:	3101      	adds	r1, #1
   37f60:	45b1      	cmp	r9, r6
   37f62:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37f66:	54e5      	strb	r5, [r4, r3]
   37f68:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37f6c:	f43f ad19 	beq.w	379a2 <d_print_comp_inner+0x14a>
   37f70:	29ff      	cmp	r1, #255	@ 0xff
   37f72:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37f76:	d1f1      	bne.n	37f5c <d_print_comp_inner+0x704>
   37f78:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37f7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37f80:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37f84:	4620      	mov	r0, r4
   37f86:	4798      	blx	r3
   37f88:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37f8c:	2101      	movs	r1, #1
   37f8e:	440a      	add	r2, r1
   37f90:	2300      	movs	r3, #0
   37f92:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37f96:	e7e3      	b.n	37f60 <d_print_comp_inner+0x708>
   37f98:	4994      	ldr	r1, [pc, #592]	@ (381ec <d_print_comp_inner+0x994>)
   37f9a:	f7fd fa25 	bl	353e8 <d_append_string>
   37f9e:	f8db 200c 	ldr.w	r2, [fp, #12]
   37fa2:	2111      	movs	r1, #17
   37fa4:	e500      	b.n	379a8 <d_print_comp_inner+0x150>
   37fa6:	4e92      	ldr	r6, [pc, #584]	@ (381f0 <d_print_comp_inner+0x998>)
   37fa8:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37fac:	f106 090f 	add.w	r9, r6, #15
   37fb0:	f04f 0800 	mov.w	r8, #0
   37fb4:	e009      	b.n	37fca <d_print_comp_inner+0x772>
   37fb6:	460b      	mov	r3, r1
   37fb8:	3101      	adds	r1, #1
   37fba:	45b1      	cmp	r9, r6
   37fbc:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   37fc0:	54e5      	strb	r5, [r4, r3]
   37fc2:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   37fc6:	f43f acec 	beq.w	379a2 <d_print_comp_inner+0x14a>
   37fca:	29ff      	cmp	r1, #255	@ 0xff
   37fcc:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   37fd0:	d1f1      	bne.n	37fb6 <d_print_comp_inner+0x75e>
   37fd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   37fd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   37fda:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   37fde:	4620      	mov	r0, r4
   37fe0:	4798      	blx	r3
   37fe2:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   37fe6:	2101      	movs	r1, #1
   37fe8:	440a      	add	r2, r1
   37fea:	2300      	movs	r3, #0
   37fec:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   37ff0:	e7e3      	b.n	37fba <d_print_comp_inner+0x762>
   37ff2:	4e80      	ldr	r6, [pc, #512]	@ (381f4 <d_print_comp_inner+0x99c>)
   37ff4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   37ff8:	f106 091a 	add.w	r9, r6, #26
   37ffc:	f04f 0800 	mov.w	r8, #0
   38000:	e009      	b.n	38016 <d_print_comp_inner+0x7be>
   38002:	460b      	mov	r3, r1
   38004:	3101      	adds	r1, #1
   38006:	45b1      	cmp	r9, r6
   38008:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3800c:	54e5      	strb	r5, [r4, r3]
   3800e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38012:	f43f acc6 	beq.w	379a2 <d_print_comp_inner+0x14a>
   38016:	29ff      	cmp	r1, #255	@ 0xff
   38018:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3801c:	d1f1      	bne.n	38002 <d_print_comp_inner+0x7aa>
   3801e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38022:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38026:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3802a:	4620      	mov	r0, r4
   3802c:	4798      	blx	r3
   3802e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38032:	2101      	movs	r1, #1
   38034:	440a      	add	r2, r1
   38036:	2300      	movs	r3, #0
   38038:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3803c:	e7e3      	b.n	38006 <d_print_comp_inner+0x7ae>
   3803e:	4e6e      	ldr	r6, [pc, #440]	@ (381f8 <d_print_comp_inner+0x9a0>)
   38040:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38044:	f106 0911 	add.w	r9, r6, #17
   38048:	f04f 0800 	mov.w	r8, #0
   3804c:	e009      	b.n	38062 <d_print_comp_inner+0x80a>
   3804e:	460b      	mov	r3, r1
   38050:	3101      	adds	r1, #1
   38052:	45b1      	cmp	r9, r6
   38054:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38058:	54e5      	strb	r5, [r4, r3]
   3805a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3805e:	f43f aca0 	beq.w	379a2 <d_print_comp_inner+0x14a>
   38062:	29ff      	cmp	r1, #255	@ 0xff
   38064:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   38068:	d1f1      	bne.n	3804e <d_print_comp_inner+0x7f6>
   3806a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3806e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38072:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38076:	4620      	mov	r0, r4
   38078:	4798      	blx	r3
   3807a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3807e:	2101      	movs	r1, #1
   38080:	440a      	add	r2, r1
   38082:	2300      	movs	r3, #0
   38084:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38088:	e7e3      	b.n	38052 <d_print_comp_inner+0x7fa>
   3808a:	4e5c      	ldr	r6, [pc, #368]	@ (381fc <d_print_comp_inner+0x9a4>)
   3808c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38090:	f106 0915 	add.w	r9, r6, #21
   38094:	f04f 0800 	mov.w	r8, #0
   38098:	e009      	b.n	380ae <d_print_comp_inner+0x856>
   3809a:	460b      	mov	r3, r1
   3809c:	3101      	adds	r1, #1
   3809e:	45b1      	cmp	r9, r6
   380a0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   380a4:	54e5      	strb	r5, [r4, r3]
   380a6:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   380aa:	f43f ac7a 	beq.w	379a2 <d_print_comp_inner+0x14a>
   380ae:	29ff      	cmp	r1, #255	@ 0xff
   380b0:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   380b4:	d1f1      	bne.n	3809a <d_print_comp_inner+0x842>
   380b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   380ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   380be:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   380c2:	4620      	mov	r0, r4
   380c4:	4798      	blx	r3
   380c6:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   380ca:	2101      	movs	r1, #1
   380cc:	440a      	add	r2, r1
   380ce:	2300      	movs	r3, #0
   380d0:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   380d4:	e7e3      	b.n	3809e <d_print_comp_inner+0x846>
   380d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   380da:	29ff      	cmp	r1, #255	@ 0xff
   380dc:	f001 8338 	beq.w	39750 <d_print_comp_inner+0x1ef8>
   380e0:	1c4a      	adds	r2, r1, #1
   380e2:	235b      	movs	r3, #91	@ 0x5b
   380e4:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   380e8:	f04f 0800 	mov.w	r8, #0
   380ec:	5463      	strb	r3, [r4, r1]
   380ee:	465f      	mov	r7, fp
   380f0:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   380f4:	68fa      	ldr	r2, [r7, #12]
   380f6:	2111      	movs	r1, #17
   380f8:	4620      	mov	r0, r4
   380fa:	f001 fe7b 	bl	39df4 <d_print_comp>
   380fe:	693f      	ldr	r7, [r7, #16]
   38100:	2f00      	cmp	r7, #0
   38102:	f001 8010 	beq.w	39126 <d_print_comp_inner+0x18ce>
   38106:	4d3e      	ldr	r5, [pc, #248]	@ (38200 <d_print_comp_inner+0x9a8>)
   38108:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3810c:	f105 0902 	add.w	r9, r5, #2
   38110:	e008      	b.n	38124 <d_print_comp_inner+0x8cc>
   38112:	460b      	mov	r3, r1
   38114:	3101      	adds	r1, #1
   38116:	454d      	cmp	r5, r9
   38118:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3811c:	54e6      	strb	r6, [r4, r3]
   3811e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   38122:	d0e7      	beq.n	380f4 <d_print_comp_inner+0x89c>
   38124:	29ff      	cmp	r1, #255	@ 0xff
   38126:	f815 6b01 	ldrb.w	r6, [r5], #1
   3812a:	d1f2      	bne.n	38112 <d_print_comp_inner+0x8ba>
   3812c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38130:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38134:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38138:	4620      	mov	r0, r4
   3813a:	4798      	blx	r3
   3813c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38140:	2101      	movs	r1, #1
   38142:	440a      	add	r2, r1
   38144:	2300      	movs	r3, #0
   38146:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3814a:	e7e4      	b.n	38116 <d_print_comp_inner+0x8be>
   3814c:	4e2d      	ldr	r6, [pc, #180]	@ (38204 <d_print_comp_inner+0x9ac>)
   3814e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38152:	f106 0917 	add.w	r9, r6, #23
   38156:	f04f 0800 	mov.w	r8, #0
   3815a:	e009      	b.n	38170 <d_print_comp_inner+0x918>
   3815c:	460b      	mov	r3, r1
   3815e:	3101      	adds	r1, #1
   38160:	45b1      	cmp	r9, r6
   38162:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38166:	54e5      	strb	r5, [r4, r3]
   38168:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3816c:	f43f ac19 	beq.w	379a2 <d_print_comp_inner+0x14a>
   38170:	29ff      	cmp	r1, #255	@ 0xff
   38172:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   38176:	d1f1      	bne.n	3815c <d_print_comp_inner+0x904>
   38178:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3817c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38180:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38184:	4620      	mov	r0, r4
   38186:	4798      	blx	r3
   38188:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3818c:	2101      	movs	r1, #1
   3818e:	440a      	add	r2, r1
   38190:	2300      	movs	r3, #0
   38192:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38196:	e7e3      	b.n	38160 <d_print_comp_inner+0x908>
   38198:	2111      	movs	r1, #17
   3819a:	68d2      	ldr	r2, [r2, #12]
   3819c:	f001 fe2a 	bl	39df4 <d_print_comp>
   381a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   381a4:	29ff      	cmp	r1, #255	@ 0xff
   381a6:	f001 8279 	beq.w	3969c <d_print_comp_inner+0x1e44>
   381aa:	1c4a      	adds	r2, r1, #1
   381ac:	2340      	movs	r3, #64	@ 0x40
   381ae:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   381b2:	5463      	strb	r3, [r4, r1]
   381b4:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   381b8:	e467      	b.n	37a8a <d_print_comp_inner+0x232>
   381ba:	68d2      	ldr	r2, [r2, #12]
   381bc:	2111      	movs	r1, #17
   381be:	f001 fe19 	bl	39df4 <d_print_comp>
   381c2:	4911      	ldr	r1, [pc, #68]	@ (38208 <d_print_comp_inner+0x9b0>)
   381c4:	4620      	mov	r0, r4
   381c6:	b017      	add	sp, #92	@ 0x5c
   381c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   381cc:	f7fd b90c 	b.w	353e8 <d_append_string>
   381d0:	4e0e      	ldr	r6, [pc, #56]	@ (3820c <d_print_comp_inner+0x9b4>)
   381d2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   381d6:	f106 0908 	add.w	r9, r6, #8
   381da:	f04f 0800 	mov.w	r8, #0
   381de:	e021      	b.n	38224 <d_print_comp_inner+0x9cc>
   381e0:	0004012f 	.word	0x0004012f
   381e4:	00040113 	.word	0x00040113
   381e8:	000400fb 	.word	0x000400fb
   381ec:	000400e8 	.word	0x000400e8
   381f0:	000400d7 	.word	0x000400d7
   381f4:	000400bb 	.word	0x000400bb
   381f8:	000400a7 	.word	0x000400a7
   381fc:	000400a3 	.word	0x000400a3
   38200:	0003ffd4 	.word	0x0003ffd4
   38204:	00040017 	.word	0x00040017
   38208:	000401e4 	.word	0x000401e4
   3820c:	0004026b 	.word	0x0004026b
   38210:	460b      	mov	r3, r1
   38212:	3101      	adds	r1, #1
   38214:	45b1      	cmp	r9, r6
   38216:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3821a:	54e5      	strb	r5, [r4, r3]
   3821c:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38220:	f000 864a 	beq.w	38eb8 <d_print_comp_inner+0x1660>
   38224:	29ff      	cmp	r1, #255	@ 0xff
   38226:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3822a:	d1f1      	bne.n	38210 <d_print_comp_inner+0x9b8>
   3822c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38230:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38234:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38238:	4620      	mov	r0, r4
   3823a:	4798      	blx	r3
   3823c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38240:	2101      	movs	r1, #1
   38242:	440a      	add	r2, r1
   38244:	2300      	movs	r3, #0
   38246:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3824a:	e7e3      	b.n	38214 <d_print_comp_inner+0x9bc>
   3824c:	4dc5      	ldr	r5, [pc, #788]	@ (38564 <d_print_comp_inner+0xd0c>)
   3824e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38252:	f105 0708 	add.w	r7, r5, #8
   38256:	f04f 0800 	mov.w	r8, #0
   3825a:	e009      	b.n	38270 <d_print_comp_inner+0xa18>
   3825c:	460b      	mov	r3, r1
   3825e:	3101      	adds	r1, #1
   38260:	42af      	cmp	r7, r5
   38262:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38266:	54e6      	strb	r6, [r4, r3]
   38268:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3826c:	f43f ab81 	beq.w	37972 <d_print_comp_inner+0x11a>
   38270:	29ff      	cmp	r1, #255	@ 0xff
   38272:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   38276:	d1f1      	bne.n	3825c <d_print_comp_inner+0xa04>
   38278:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3827c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38280:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38284:	4620      	mov	r0, r4
   38286:	4798      	blx	r3
   38288:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3828c:	2101      	movs	r1, #1
   3828e:	440a      	add	r2, r1
   38290:	2300      	movs	r3, #0
   38292:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38296:	e7e3      	b.n	38260 <d_print_comp_inner+0xa08>
   38298:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3829c:	29ff      	cmp	r1, #255	@ 0xff
   3829e:	f001 81ec 	beq.w	3967a <d_print_comp_inner+0x1e22>
   382a2:	1c4a      	adds	r2, r1, #1
   382a4:	233c      	movs	r3, #60	@ 0x3c
   382a6:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   382aa:	5463      	strb	r3, [r4, r1]
   382ac:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   382b0:	f8db 700c 	ldr.w	r7, [fp, #12]
   382b4:	b187      	cbz	r7, 382d8 <d_print_comp_inner+0xa80>
   382b6:	f04f 0800 	mov.w	r8, #0
   382ba:	46c1      	mov	r9, r8
   382bc:	f1b8 0f00 	cmp.w	r8, #0
   382c0:	f040 857c 	bne.w	38dbc <d_print_comp_inner+0x1564>
   382c4:	463a      	mov	r2, r7
   382c6:	2111      	movs	r1, #17
   382c8:	4620      	mov	r0, r4
   382ca:	f001 fd93 	bl	39df4 <d_print_comp>
   382ce:	693f      	ldr	r7, [r7, #16]
   382d0:	f108 0801 	add.w	r8, r8, #1
   382d4:	2f00      	cmp	r7, #0
   382d6:	d1f1      	bne.n	382bc <d_print_comp_inner+0xa64>
   382d8:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   382dc:	29ff      	cmp	r1, #255	@ 0xff
   382de:	f001 8250 	beq.w	39782 <d_print_comp_inner+0x1f2a>
   382e2:	1c4a      	adds	r2, r1, #1
   382e4:	233e      	movs	r3, #62	@ 0x3e
   382e6:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   382ea:	5463      	strb	r3, [r4, r1]
   382ec:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   382f0:	f7ff bb3f 	b.w	37972 <d_print_comp_inner+0x11a>
   382f4:	68d2      	ldr	r2, [r2, #12]
   382f6:	e9d2 6300 	ldrd	r6, r3, [r2]
   382fa:	2b00      	cmp	r3, #0
   382fc:	f000 8592 	beq.w	38e24 <d_print_comp_inner+0x15cc>
   38300:	4433      	add	r3, r6
   38302:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38306:	3e01      	subs	r6, #1
   38308:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
   3830c:	f04f 0800 	mov.w	r8, #0
   38310:	e009      	b.n	38326 <d_print_comp_inner+0xace>
   38312:	460b      	mov	r3, r1
   38314:	3101      	adds	r1, #1
   38316:	45b1      	cmp	r9, r6
   38318:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3831c:	54e5      	strb	r5, [r4, r3]
   3831e:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38322:	f000 857f 	beq.w	38e24 <d_print_comp_inner+0x15cc>
   38326:	29ff      	cmp	r1, #255	@ 0xff
   38328:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   3832c:	d1f1      	bne.n	38312 <d_print_comp_inner+0xaba>
   3832e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38332:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38336:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3833a:	4620      	mov	r0, r4
   3833c:	4798      	blx	r3
   3833e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38342:	2101      	movs	r1, #1
   38344:	440a      	add	r2, r1
   38346:	2300      	movs	r3, #0
   38348:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3834c:	e7e3      	b.n	38316 <d_print_comp_inner+0xabe>
   3834e:	4e86      	ldr	r6, [pc, #536]	@ (38568 <d_print_comp_inner+0xd10>)
   38350:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38354:	f106 091e 	add.w	r9, r6, #30
   38358:	f04f 0800 	mov.w	r8, #0
   3835c:	e009      	b.n	38372 <d_print_comp_inner+0xb1a>
   3835e:	460b      	mov	r3, r1
   38360:	3101      	adds	r1, #1
   38362:	45b1      	cmp	r9, r6
   38364:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38368:	54e5      	strb	r5, [r4, r3]
   3836a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3836e:	f43f ab18 	beq.w	379a2 <d_print_comp_inner+0x14a>
   38372:	29ff      	cmp	r1, #255	@ 0xff
   38374:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   38378:	d1f1      	bne.n	3835e <d_print_comp_inner+0xb06>
   3837a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3837e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38382:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38386:	4620      	mov	r0, r4
   38388:	4798      	blx	r3
   3838a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3838e:	2101      	movs	r1, #1
   38390:	440a      	add	r2, r1
   38392:	2300      	movs	r3, #0
   38394:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38398:	e7e3      	b.n	38362 <d_print_comp_inner+0xb0a>
   3839a:	68d5      	ldr	r5, [r2, #12]
   3839c:	2d00      	cmp	r5, #0
   3839e:	f040 876c 	bne.w	3927a <d_print_comp_inner+0x1a22>
   383a2:	4972      	ldr	r1, [pc, #456]	@ (3856c <d_print_comp_inner+0xd14>)
   383a4:	e70e      	b.n	381c4 <d_print_comp_inner+0x96c>
   383a6:	68d2      	ldr	r2, [r2, #12]
   383a8:	f8d0 c114 	ldr.w	ip, [r0, #276]	@ 0x114
   383ac:	b1ca      	cbz	r2, 383e2 <d_print_comp_inner+0xb8a>
   383ae:	ab06      	add	r3, sp, #24
   383b0:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
   383b4:	2300      	movs	r3, #0
   383b6:	9308      	str	r3, [sp, #32]
   383b8:	2111      	movs	r1, #17
   383ba:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
   383be:	9309      	str	r3, [sp, #36]	@ 0x24
   383c0:	e9cd cb06 	strd	ip, fp, [sp, #24]
   383c4:	f001 fd16 	bl	39df4 <d_print_comp>
   383c8:	9b08      	ldr	r3, [sp, #32]
   383ca:	9a06      	ldr	r2, [sp, #24]
   383cc:	f8c4 2114 	str.w	r2, [r4, #276]	@ 0x114
   383d0:	2b00      	cmp	r3, #0
   383d2:	f47f aace 	bne.w	37972 <d_print_comp_inner+0x11a>
   383d6:	2120      	movs	r1, #32
   383d8:	4620      	mov	r0, r4
   383da:	f7fc ff81 	bl	352e0 <d_append_char>
   383de:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
   383e2:	4663      	mov	r3, ip
   383e4:	465a      	mov	r2, fp
   383e6:	2111      	movs	r1, #17
   383e8:	4620      	mov	r0, r4
   383ea:	b017      	add	sp, #92	@ 0x5c
   383ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   383f0:	f002 b840 	b.w	3a474 <d_print_function_type>
   383f4:	2300      	movs	r3, #0
   383f6:	f8d0 8114 	ldr.w	r8, [r0, #276]	@ 0x114
   383fa:	f8d0 7148 	ldr.w	r7, [r0, #328]	@ 0x148
   383fe:	f8c4 2148 	str.w	r2, [r4, #328]	@ 0x148
   38402:	2111      	movs	r1, #17
   38404:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
   38408:	68d2      	ldr	r2, [r2, #12]
   3840a:	f001 fcf3 	bl	39df4 <d_print_comp>
   3840e:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   38412:	2b3c      	cmp	r3, #60	@ 0x3c
   38414:	f001 821f 	beq.w	39856 <d_print_comp_inner+0x1ffe>
   38418:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3841c:	29ff      	cmp	r1, #255	@ 0xff
   3841e:	f001 820a 	beq.w	39836 <d_print_comp_inner+0x1fde>
   38422:	1c4b      	adds	r3, r1, #1
   38424:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   38428:	233c      	movs	r3, #60	@ 0x3c
   3842a:	5463      	strb	r3, [r4, r1]
   3842c:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   38430:	f8db 2010 	ldr.w	r2, [fp, #16]
   38434:	2111      	movs	r1, #17
   38436:	4620      	mov	r0, r4
   38438:	f001 fcdc 	bl	39df4 <d_print_comp>
   3843c:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   38440:	2b3e      	cmp	r3, #62	@ 0x3e
   38442:	f001 81f2 	beq.w	3982a <d_print_comp_inner+0x1fd2>
   38446:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3844a:	29ff      	cmp	r1, #255	@ 0xff
   3844c:	f001 81dd 	beq.w	3980a <d_print_comp_inner+0x1fb2>
   38450:	1c4b      	adds	r3, r1, #1
   38452:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   38456:	233e      	movs	r3, #62	@ 0x3e
   38458:	5463      	strb	r3, [r4, r1]
   3845a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3845e:	f8c4 8114 	str.w	r8, [r4, #276]	@ 0x114
   38462:	f8c4 7148 	str.w	r7, [r4, #328]	@ 0x148
   38466:	f7ff ba84 	b.w	37972 <d_print_comp_inner+0x11a>
   3846a:	f8d2 800c 	ldr.w	r8, [r2, #12]
   3846e:	f8d0 9114 	ldr.w	r9, [r0, #276]	@ 0x114
   38472:	2200      	movs	r2, #0
   38474:	f8c0 2114 	str.w	r2, [r0, #276]	@ 0x114
   38478:	f1b8 0f00 	cmp.w	r8, #0
   3847c:	f43f aa76 	beq.w	3796c <d_print_comp_inner+0x114>
   38480:	ae06      	add	r6, sp, #24
   38482:	f8d0 1110 	ldr.w	r1, [r0, #272]	@ 0x110
   38486:	4633      	mov	r3, r6
   38488:	4694      	mov	ip, r2
   3848a:	4610      	mov	r0, r2
   3848c:	4645      	mov	r5, r8
   3848e:	e9c3 2500 	strd	r2, r5, [r3]
   38492:	e9c3 0102 	strd	r0, r1, [r3, #8]
   38496:	782a      	ldrb	r2, [r5, #0]
   38498:	2a4e      	cmp	r2, #78	@ 0x4e
   3849a:	469e      	mov	lr, r3
   3849c:	f1a2 0a1c 	sub.w	sl, r2, #28
   384a0:	f1a2 0850 	sub.w	r8, r2, #80	@ 0x50
   384a4:	f10c 0701 	add.w	r7, ip, #1
   384a8:	f000 86b1 	beq.w	3920e <d_print_comp_inner+0x19b6>
   384ac:	f200 86ab 	bhi.w	39206 <d_print_comp_inner+0x19ae>
   384b0:	f1ba 0f04 	cmp.w	sl, #4
   384b4:	f240 86ab 	bls.w	3920e <d_print_comp_inner+0x19b6>
   384b8:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   384bc:	782b      	ldrb	r3, [r5, #0]
   384be:	2b02      	cmp	r3, #2
   384c0:	46a8      	mov	r8, r5
   384c2:	f001 80fd 	beq.w	396c0 <d_print_comp_inner+0x1e68>
   384c6:	2b04      	cmp	r3, #4
   384c8:	d104      	bne.n	384d4 <d_print_comp_inner+0xc7c>
   384ca:	e9cd 1804 	strd	r1, r8, [sp, #16]
   384ce:	ab04      	add	r3, sp, #16
   384d0:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   384d4:	f8db 2010 	ldr.w	r2, [fp, #16]
   384d8:	2111      	movs	r1, #17
   384da:	4620      	mov	r0, r4
   384dc:	f001 fc8a 	bl	39df4 <d_print_comp>
   384e0:	f898 3000 	ldrb.w	r3, [r8]
   384e4:	2b04      	cmp	r3, #4
   384e6:	bf04      	itt	eq
   384e8:	9b04      	ldreq	r3, [sp, #16]
   384ea:	f8c4 3110 	streq.w	r3, [r4, #272]	@ 0x110
   384ee:	eb06 1507 	add.w	r5, r6, r7, lsl #4
   384f2:	f04f 0820 	mov.w	r8, #32
   384f6:	f855 7c08 	ldr.w	r7, [r5, #-8]
   384fa:	2f00      	cmp	r7, #0
   384fc:	f000 8668 	beq.w	391d0 <d_print_comp_inner+0x1978>
   38500:	3d10      	subs	r5, #16
   38502:	42ae      	cmp	r6, r5
   38504:	d1f7      	bne.n	384f6 <d_print_comp_inner+0xc9e>
   38506:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
   3850a:	f7ff ba32 	b.w	37972 <d_print_comp_inner+0x11a>
   3850e:	f8d2 900c 	ldr.w	r9, [r2, #12]
   38512:	4d17      	ldr	r5, [pc, #92]	@ (38570 <d_print_comp_inner+0xd18>)
   38514:	f8d9 a008 	ldr.w	sl, [r9, #8]
   38518:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3851c:	f105 0708 	add.w	r7, r5, #8
   38520:	f04f 0800 	mov.w	r8, #0
   38524:	e009      	b.n	3853a <d_print_comp_inner+0xce2>
   38526:	460a      	mov	r2, r1
   38528:	3101      	adds	r1, #1
   3852a:	42bd      	cmp	r5, r7
   3852c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38530:	54a6      	strb	r6, [r4, r2]
   38532:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   38536:	f000 84ed 	beq.w	38f14 <d_print_comp_inner+0x16bc>
   3853a:	29ff      	cmp	r1, #255	@ 0xff
   3853c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   38540:	d1f1      	bne.n	38526 <d_print_comp_inner+0xcce>
   38542:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38546:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3854a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3854e:	4620      	mov	r0, r4
   38550:	4798      	blx	r3
   38552:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   38556:	2101      	movs	r1, #1
   38558:	440b      	add	r3, r1
   3855a:	2200      	movs	r2, #0
   3855c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   38560:	e7e3      	b.n	3852a <d_print_comp_inner+0xcd2>
   38562:	bf00      	nop
   38564:	0004025f 	.word	0x0004025f
   38568:	0003fff7 	.word	0x0003fff7
   3856c:	000401e8 	.word	0x000401e8
   38570:	00040177 	.word	0x00040177
   38574:	e9d2 2503 	ldrd	r2, r5, [r2, #12]
   38578:	b112      	cbz	r2, 38580 <d_print_comp_inner+0xd28>
   3857a:	2111      	movs	r1, #17
   3857c:	f001 fc3a 	bl	39df4 <d_print_comp>
   38580:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38584:	29ff      	cmp	r1, #255	@ 0xff
   38586:	f001 812e 	beq.w	397e6 <d_print_comp_inner+0x1f8e>
   3858a:	1c4a      	adds	r2, r1, #1
   3858c:	237b      	movs	r3, #123	@ 0x7b
   3858e:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   38592:	4620      	mov	r0, r4
   38594:	5463      	strb	r3, [r4, r1]
   38596:	462a      	mov	r2, r5
   38598:	2111      	movs	r1, #17
   3859a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3859e:	f001 fc29 	bl	39df4 <d_print_comp>
   385a2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   385a6:	29ff      	cmp	r1, #255	@ 0xff
   385a8:	f000 8579 	beq.w	3909e <d_print_comp_inner+0x1846>
   385ac:	1c4a      	adds	r2, r1, #1
   385ae:	237d      	movs	r3, #125	@ 0x7d
   385b0:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   385b4:	5463      	strb	r3, [r4, r1]
   385b6:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   385ba:	f7ff b9da 	b.w	37972 <d_print_comp_inner+0x11a>
   385be:	f8d0 c114 	ldr.w	ip, [r0, #276]	@ 0x114
   385c2:	f8d0 3110 	ldr.w	r3, [r0, #272]	@ 0x110
   385c6:	9309      	str	r3, [sp, #36]	@ 0x24
   385c8:	ae06      	add	r6, sp, #24
   385ca:	2300      	movs	r3, #0
   385cc:	46e1      	mov	r9, ip
   385ce:	f8cd c018 	str.w	ip, [sp, #24]
   385d2:	f8c0 6114 	str.w	r6, [r0, #276]	@ 0x114
   385d6:	9207      	str	r2, [sp, #28]
   385d8:	9308      	str	r3, [sp, #32]
   385da:	f1bc 0f00 	cmp.w	ip, #0
   385de:	f001 837a 	beq.w	39cd6 <d_print_comp_inner+0x247e>
   385e2:	f04f 0801 	mov.w	r8, #1
   385e6:	4667      	mov	r7, ip
   385e8:	46c6      	mov	lr, r8
   385ea:	4635      	mov	r5, r6
   385ec:	e01a      	b.n	38624 <d_print_comp_inner+0xdcc>
   385ee:	68bb      	ldr	r3, [r7, #8]
   385f0:	b9b3      	cbnz	r3, 38620 <d_print_comp_inner+0xdc8>
   385f2:	f1b8 0f03 	cmp.w	r8, #3
   385f6:	f63f a9b9 	bhi.w	3796c <d_print_comp_inner+0x114>
   385fa:	ab16      	add	r3, sp, #88	@ 0x58
   385fc:	eb03 1a08 	add.w	sl, r3, r8, lsl #4
   38600:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   38604:	f1aa 0c40 	sub.w	ip, sl, #64	@ 0x40
   38608:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   3860c:	f84a 5c40 	str.w	r5, [sl, #-64]
   38610:	eb06 1508 	add.w	r5, r6, r8, lsl #4
   38614:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
   38618:	f108 0801 	add.w	r8, r8, #1
   3861c:	f8c7 e008 	str.w	lr, [r7, #8]
   38620:	683f      	ldr	r7, [r7, #0]
   38622:	b127      	cbz	r7, 3862e <d_print_comp_inner+0xdd6>
   38624:	687b      	ldr	r3, [r7, #4]
   38626:	781b      	ldrb	r3, [r3, #0]
   38628:	3b19      	subs	r3, #25
   3862a:	2b02      	cmp	r3, #2
   3862c:	d9df      	bls.n	385ee <d_print_comp_inner+0xd96>
   3862e:	f8db 2010 	ldr.w	r2, [fp, #16]
   38632:	2111      	movs	r1, #17
   38634:	4620      	mov	r0, r4
   38636:	f001 fbdd 	bl	39df4 <d_print_comp>
   3863a:	9b08      	ldr	r3, [sp, #32]
   3863c:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
   38640:	2b00      	cmp	r3, #0
   38642:	f47f a996 	bne.w	37972 <d_print_comp_inner+0x11a>
   38646:	f1b8 0f01 	cmp.w	r8, #1
   3864a:	d90e      	bls.n	3866a <d_print_comp_inner+0xe12>
   3864c:	eb06 1608 	add.w	r6, r6, r8, lsl #4
   38650:	f856 2c0c 	ldr.w	r2, [r6, #-12]
   38654:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
   38658:	2111      	movs	r1, #17
   3865a:	4620      	mov	r0, r4
   3865c:	f001 fbf8 	bl	39e50 <d_print_mod>
   38660:	f1b8 0f01 	cmp.w	r8, #1
   38664:	f1a6 0610 	sub.w	r6, r6, #16
   38668:	d1f2      	bne.n	38650 <d_print_comp_inner+0xdf8>
   3866a:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
   3866e:	465a      	mov	r2, fp
   38670:	2111      	movs	r1, #17
   38672:	4620      	mov	r0, r4
   38674:	f002 f908 	bl	3a888 <d_print_array_type>
   38678:	f7ff b97b 	b.w	37972 <d_print_comp_inner+0x11a>
   3867c:	4ec4      	ldr	r6, [pc, #784]	@ (38990 <d_print_comp_inner+0x1138>)
   3867e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38682:	f106 090e 	add.w	r9, r6, #14
   38686:	f04f 0800 	mov.w	r8, #0
   3868a:	e009      	b.n	386a0 <d_print_comp_inner+0xe48>
   3868c:	460b      	mov	r3, r1
   3868e:	3101      	adds	r1, #1
   38690:	45b1      	cmp	r9, r6
   38692:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38696:	54e5      	strb	r5, [r4, r3]
   38698:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3869c:	f000 8513 	beq.w	390c6 <d_print_comp_inner+0x186e>
   386a0:	29ff      	cmp	r1, #255	@ 0xff
   386a2:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   386a6:	d1f1      	bne.n	3868c <d_print_comp_inner+0xe34>
   386a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   386ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   386b0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   386b4:	4620      	mov	r0, r4
   386b6:	4798      	blx	r3
   386b8:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   386bc:	2101      	movs	r1, #1
   386be:	440a      	add	r2, r1
   386c0:	2300      	movs	r3, #0
   386c2:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   386c6:	e7e3      	b.n	38690 <d_print_comp_inner+0xe38>
   386c8:	e9d2 6503 	ldrd	r6, r5, [r2, #12]
   386cc:	7833      	ldrb	r3, [r6, #0]
   386ce:	2b32      	cmp	r3, #50	@ 0x32
   386d0:	f000 869e 	beq.w	39410 <d_print_comp_inner+0x1bb8>
   386d4:	2b34      	cmp	r3, #52	@ 0x34
   386d6:	f000 870f 	beq.w	394f8 <d_print_comp_inner+0x1ca0>
   386da:	4632      	mov	r2, r6
   386dc:	2111      	movs	r1, #17
   386de:	f002 f9ab 	bl	3aa38 <d_print_expr_op>
   386e2:	462a      	mov	r2, r5
   386e4:	2111      	movs	r1, #17
   386e6:	4620      	mov	r0, r4
   386e8:	b017      	add	sp, #92	@ 0x5c
   386ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   386ee:	f002 bb9f 	b.w	3ae30 <d_print_subexpr>
   386f2:	68d2      	ldr	r2, [r2, #12]
   386f4:	2111      	movs	r1, #17
   386f6:	4620      	mov	r0, r4
   386f8:	b017      	add	sp, #92	@ 0x5c
   386fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   386fe:	f002 b99b 	b.w	3aa38 <d_print_expr_op>
   38702:	49a4      	ldr	r1, [pc, #656]	@ (38994 <d_print_comp_inner+0x113c>)
   38704:	f7fc fe70 	bl	353e8 <d_append_string>
   38708:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
   3870c:	b133      	cbz	r3, 3871c <d_print_comp_inner+0xec4>
   3870e:	f8d4 1110 	ldr.w	r1, [r4, #272]	@ 0x110
   38712:	9106      	str	r1, [sp, #24]
   38714:	aa06      	add	r2, sp, #24
   38716:	f8c4 2110 	str.w	r2, [r4, #272]	@ 0x110
   3871a:	9307      	str	r3, [sp, #28]
   3871c:	f8db 200c 	ldr.w	r2, [fp, #12]
   38720:	7813      	ldrb	r3, [r2, #0]
   38722:	2b04      	cmp	r3, #4
   38724:	f000 8644 	beq.w	393b0 <d_print_comp_inner+0x1b58>
   38728:	2111      	movs	r1, #17
   3872a:	4620      	mov	r0, r4
   3872c:	f001 fb62 	bl	39df4 <d_print_comp>
   38730:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
   38734:	2b00      	cmp	r3, #0
   38736:	f43f a91c 	beq.w	37972 <d_print_comp_inner+0x11a>
   3873a:	9b06      	ldr	r3, [sp, #24]
   3873c:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   38740:	f7ff b917 	b.w	37972 <d_print_comp_inner+0x11a>
   38744:	4e94      	ldr	r6, [pc, #592]	@ (38998 <d_print_comp_inner+0x1140>)
   38746:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3874a:	f106 090a 	add.w	r9, r6, #10
   3874e:	f04f 0800 	mov.w	r8, #0
   38752:	e009      	b.n	38768 <d_print_comp_inner+0xf10>
   38754:	460b      	mov	r3, r1
   38756:	3101      	adds	r1, #1
   38758:	454e      	cmp	r6, r9
   3875a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3875e:	54e5      	strb	r5, [r4, r3]
   38760:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38764:	f000 83d3 	beq.w	38f0e <d_print_comp_inner+0x16b6>
   38768:	29ff      	cmp	r1, #255	@ 0xff
   3876a:	f816 5b01 	ldrb.w	r5, [r6], #1
   3876e:	d1f1      	bne.n	38754 <d_print_comp_inner+0xefc>
   38770:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38774:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38778:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3877c:	4620      	mov	r0, r4
   3877e:	4798      	blx	r3
   38780:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38784:	2101      	movs	r1, #1
   38786:	440a      	add	r2, r1
   38788:	2300      	movs	r3, #0
   3878a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3878e:	e7e3      	b.n	38758 <d_print_comp_inner+0xf00>
   38790:	4e82      	ldr	r6, [pc, #520]	@ (3899c <d_print_comp_inner+0x1144>)
   38792:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38796:	f106 0909 	add.w	r9, r6, #9
   3879a:	f04f 0800 	mov.w	r8, #0
   3879e:	e009      	b.n	387b4 <d_print_comp_inner+0xf5c>
   387a0:	460b      	mov	r3, r1
   387a2:	3101      	adds	r1, #1
   387a4:	45b1      	cmp	r9, r6
   387a6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   387aa:	54e5      	strb	r5, [r4, r3]
   387ac:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   387b0:	f43f a96b 	beq.w	37a8a <d_print_comp_inner+0x232>
   387b4:	29ff      	cmp	r1, #255	@ 0xff
   387b6:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   387ba:	d1f1      	bne.n	387a0 <d_print_comp_inner+0xf48>
   387bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   387c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   387c4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   387c8:	4620      	mov	r0, r4
   387ca:	4798      	blx	r3
   387cc:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   387d0:	2101      	movs	r1, #1
   387d2:	440a      	add	r2, r1
   387d4:	2300      	movs	r3, #0
   387d6:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   387da:	e7e3      	b.n	387a4 <d_print_comp_inner+0xf4c>
   387dc:	6913      	ldr	r3, [r2, #16]
   387de:	781a      	ldrb	r2, [r3, #0]
   387e0:	2a3b      	cmp	r2, #59	@ 0x3b
   387e2:	f47f a8c3 	bne.w	3796c <d_print_comp_inner+0x114>
   387e6:	691b      	ldr	r3, [r3, #16]
   387e8:	781b      	ldrb	r3, [r3, #0]
   387ea:	2b3c      	cmp	r3, #60	@ 0x3c
   387ec:	f47f a8be 	bne.w	3796c <d_print_comp_inner+0x114>
   387f0:	465a      	mov	r2, fp
   387f2:	2111      	movs	r1, #17
   387f4:	f002 fb96 	bl	3af24 <d_maybe_print_fold_expression>
   387f8:	2800      	cmp	r0, #0
   387fa:	f47f a8ba 	bne.w	37972 <d_print_comp_inner+0x11a>
   387fe:	465a      	mov	r2, fp
   38800:	2111      	movs	r1, #17
   38802:	4620      	mov	r0, r4
   38804:	f002 fcc2 	bl	3b18c <d_maybe_print_designated_init>
   38808:	2800      	cmp	r0, #0
   3880a:	f47f a8b2 	bne.w	37972 <d_print_comp_inner+0x11a>
   3880e:	e9db 8303 	ldrd	r8, r3, [fp, #12]
   38812:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
   38816:	f8d8 200c 	ldr.w	r2, [r8, #12]
   3881a:	4961      	ldr	r1, [pc, #388]	@ (389a0 <d_print_comp_inner+0x1148>)
   3881c:	6810      	ldr	r0, [r2, #0]
   3881e:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
   38822:	f7df fced 	bl	18200 <strcmp>
   38826:	2800      	cmp	r0, #0
   38828:	f041 8293 	bne.w	39d52 <d_print_comp_inner+0x24fa>
   3882c:	4632      	mov	r2, r6
   3882e:	4620      	mov	r0, r4
   38830:	2111      	movs	r1, #17
   38832:	f002 fafd 	bl	3ae30 <d_print_subexpr>
   38836:	4642      	mov	r2, r8
   38838:	4620      	mov	r0, r4
   3883a:	2111      	movs	r1, #17
   3883c:	f002 f8fc 	bl	3aa38 <d_print_expr_op>
   38840:	4620      	mov	r0, r4
   38842:	463a      	mov	r2, r7
   38844:	2111      	movs	r1, #17
   38846:	f002 faf3 	bl	3ae30 <d_print_subexpr>
   3884a:	4956      	ldr	r1, [pc, #344]	@ (389a4 <d_print_comp_inner+0x114c>)
   3884c:	4620      	mov	r0, r4
   3884e:	f7fc fdcb 	bl	353e8 <d_append_string>
   38852:	e746      	b.n	386e2 <d_print_comp_inner+0xe8a>
   38854:	6913      	ldr	r3, [r2, #16]
   38856:	781b      	ldrb	r3, [r3, #0]
   38858:	2b39      	cmp	r3, #57	@ 0x39
   3885a:	f47f a887 	bne.w	3796c <d_print_comp_inner+0x114>
   3885e:	68d2      	ldr	r2, [r2, #12]
   38860:	68d3      	ldr	r3, [r2, #12]
   38862:	681b      	ldr	r3, [r3, #0]
   38864:	7859      	ldrb	r1, [r3, #1]
   38866:	2963      	cmp	r1, #99	@ 0x63
   38868:	f001 8038 	beq.w	398dc <d_print_comp_inner+0x2084>
   3886c:	465a      	mov	r2, fp
   3886e:	2111      	movs	r1, #17
   38870:	4620      	mov	r0, r4
   38872:	f002 fb57 	bl	3af24 <d_maybe_print_fold_expression>
   38876:	2800      	cmp	r0, #0
   38878:	f47f a87b 	bne.w	37972 <d_print_comp_inner+0x11a>
   3887c:	465a      	mov	r2, fp
   3887e:	2111      	movs	r1, #17
   38880:	4620      	mov	r0, r4
   38882:	f002 fc83 	bl	3b18c <d_maybe_print_designated_init>
   38886:	2800      	cmp	r0, #0
   38888:	f47f a873 	bne.w	37972 <d_print_comp_inner+0x11a>
   3888c:	f8db 300c 	ldr.w	r3, [fp, #12]
   38890:	781a      	ldrb	r2, [r3, #0]
   38892:	2a32      	cmp	r2, #50	@ 0x32
   38894:	f001 820a 	beq.w	39cac <d_print_comp_inner+0x2454>
   38898:	68db      	ldr	r3, [r3, #12]
   3889a:	4943      	ldr	r1, [pc, #268]	@ (389a8 <d_print_comp_inner+0x1150>)
   3889c:	6818      	ldr	r0, [r3, #0]
   3889e:	f7df fcaf 	bl	18200 <strcmp>
   388a2:	f8db 3010 	ldr.w	r3, [fp, #16]
   388a6:	68da      	ldr	r2, [r3, #12]
   388a8:	b918      	cbnz	r0, 388b2 <d_print_comp_inner+0x105a>
   388aa:	7813      	ldrb	r3, [r2, #0]
   388ac:	2b03      	cmp	r3, #3
   388ae:	f001 8269 	beq.w	39d84 <d_print_comp_inner+0x252c>
   388b2:	2111      	movs	r1, #17
   388b4:	4620      	mov	r0, r4
   388b6:	f002 fabb 	bl	3ae30 <d_print_subexpr>
   388ba:	f8db 600c 	ldr.w	r6, [fp, #12]
   388be:	493b      	ldr	r1, [pc, #236]	@ (389ac <d_print_comp_inner+0x1154>)
   388c0:	68f3      	ldr	r3, [r6, #12]
   388c2:	681f      	ldr	r7, [r3, #0]
   388c4:	4638      	mov	r0, r7
   388c6:	f7df fc9b 	bl	18200 <strcmp>
   388ca:	2800      	cmp	r0, #0
   388cc:	f001 81d5 	beq.w	39c7a <d_print_comp_inner+0x2422>
   388d0:	4935      	ldr	r1, [pc, #212]	@ (389a8 <d_print_comp_inner+0x1150>)
   388d2:	4638      	mov	r0, r7
   388d4:	f7df fc94 	bl	18200 <strcmp>
   388d8:	2800      	cmp	r0, #0
   388da:	f041 8233 	bne.w	39d44 <d_print_comp_inner+0x24ec>
   388de:	f8db 3010 	ldr.w	r3, [fp, #16]
   388e2:	2111      	movs	r1, #17
   388e4:	691a      	ldr	r2, [r3, #16]
   388e6:	4620      	mov	r0, r4
   388e8:	f002 faa2 	bl	3ae30 <d_print_subexpr>
   388ec:	f8db 300c 	ldr.w	r3, [fp, #12]
   388f0:	781a      	ldrb	r2, [r3, #0]
   388f2:	2a32      	cmp	r2, #50	@ 0x32
   388f4:	f47f a83d 	bne.w	37972 <d_print_comp_inner+0x11a>
   388f8:	68db      	ldr	r3, [r3, #12]
   388fa:	689a      	ldr	r2, [r3, #8]
   388fc:	2a01      	cmp	r2, #1
   388fe:	f47f a838 	bne.w	37972 <d_print_comp_inner+0x11a>
   38902:	685b      	ldr	r3, [r3, #4]
   38904:	781b      	ldrb	r3, [r3, #0]
   38906:	2b3e      	cmp	r3, #62	@ 0x3e
   38908:	f47f a833 	bne.w	37972 <d_print_comp_inner+0x11a>
   3890c:	2129      	movs	r1, #41	@ 0x29
   3890e:	4620      	mov	r0, r4
   38910:	b017      	add	sp, #92	@ 0x5c
   38912:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38916:	f7fc bce3 	b.w	352e0 <d_append_char>
   3891a:	2111      	movs	r1, #17
   3891c:	68d2      	ldr	r2, [r2, #12]
   3891e:	f001 fa69 	bl	39df4 <d_print_comp>
   38922:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38926:	29ff      	cmp	r1, #255	@ 0xff
   38928:	f000 8700 	beq.w	3972c <d_print_comp_inner+0x1ed4>
   3892c:	1c4a      	adds	r2, r1, #1
   3892e:	2328      	movs	r3, #40	@ 0x28
   38930:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   38934:	5463      	strb	r3, [r4, r1]
   38936:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3893a:	f8db 2010 	ldr.w	r2, [fp, #16]
   3893e:	2111      	movs	r1, #17
   38940:	4620      	mov	r0, r4
   38942:	f001 fa57 	bl	39df4 <d_print_comp>
   38946:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3894a:	29ff      	cmp	r1, #255	@ 0xff
   3894c:	f000 84d1 	beq.w	392f2 <d_print_comp_inner+0x1a9a>
   38950:	1c4a      	adds	r2, r1, #1
   38952:	2329      	movs	r3, #41	@ 0x29
   38954:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   38958:	5463      	strb	r3, [r4, r1]
   3895a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3895e:	f7ff b808 	b.w	37972 <d_print_comp_inner+0x11a>
   38962:	68d2      	ldr	r2, [r2, #12]
   38964:	2111      	movs	r1, #17
   38966:	f001 fa45 	bl	39df4 <d_print_comp>
   3896a:	f8db 2010 	ldr.w	r2, [fp, #16]
   3896e:	2111      	movs	r1, #17
   38970:	f7ff b81a 	b.w	379a8 <d_print_comp_inner+0x150>
   38974:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38978:	29ff      	cmp	r1, #255	@ 0xff
   3897a:	f000 8712 	beq.w	397a2 <d_print_comp_inner+0x1f4a>
   3897e:	1c4a      	adds	r2, r1, #1
   38980:	237e      	movs	r3, #126	@ 0x7e
   38982:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   38986:	5463      	strb	r3, [r4, r1]
   38988:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3898c:	f7ff b87d 	b.w	37a8a <d_print_comp_inner+0x232>
   38990:	00040243 	.word	0x00040243
   38994:	00040184 	.word	0x00040184
   38998:	000401d8 	.word	0x000401d8
   3899c:	00040183 	.word	0x00040183
   389a0:	0004019c 	.word	0x0004019c
   389a4:	000401a0 	.word	0x000401a0
   389a8:	00040194 	.word	0x00040194
   389ac:	00040198 	.word	0x00040198
   389b0:	68d2      	ldr	r2, [r2, #12]
   389b2:	2111      	movs	r1, #17
   389b4:	f001 fa1e 	bl	39df4 <d_print_comp>
   389b8:	49ce      	ldr	r1, [pc, #824]	@ (38cf4 <d_print_comp_inner+0x149c>)
   389ba:	4620      	mov	r0, r4
   389bc:	f7fc fd14 	bl	353e8 <d_append_string>
   389c0:	f8db 2010 	ldr.w	r2, [fp, #16]
   389c4:	2111      	movs	r1, #17
   389c6:	4620      	mov	r0, r4
   389c8:	f001 fa14 	bl	39df4 <d_print_comp>
   389cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   389d0:	29ff      	cmp	r1, #255	@ 0xff
   389d2:	f000 849e 	beq.w	39312 <d_print_comp_inner+0x1aba>
   389d6:	1c4a      	adds	r2, r1, #1
   389d8:	235d      	movs	r3, #93	@ 0x5d
   389da:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   389de:	5463      	strb	r3, [r4, r1]
   389e0:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   389e4:	f7fe bfc5 	b.w	37972 <d_print_comp_inner+0x11a>
   389e8:	4ec3      	ldr	r6, [pc, #780]	@ (38cf8 <d_print_comp_inner+0x14a0>)
   389ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   389ee:	f106 090e 	add.w	r9, r6, #14
   389f2:	f04f 0800 	mov.w	r8, #0
   389f6:	e009      	b.n	38a0c <d_print_comp_inner+0x11b4>
   389f8:	460b      	mov	r3, r1
   389fa:	3101      	adds	r1, #1
   389fc:	45b1      	cmp	r9, r6
   389fe:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38a02:	54e5      	strb	r5, [r4, r3]
   38a04:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38a08:	f43e afcb 	beq.w	379a2 <d_print_comp_inner+0x14a>
   38a0c:	29ff      	cmp	r1, #255	@ 0xff
   38a0e:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   38a12:	d1f1      	bne.n	389f8 <d_print_comp_inner+0x11a0>
   38a14:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38a18:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38a1c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38a20:	4620      	mov	r0, r4
   38a22:	4798      	blx	r3
   38a24:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38a28:	2101      	movs	r1, #1
   38a2a:	440a      	add	r2, r1
   38a2c:	2300      	movs	r3, #0
   38a2e:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38a32:	e7e3      	b.n	389fc <d_print_comp_inner+0x11a4>
   38a34:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38a38:	7b15      	ldrb	r5, [r2, #12]
   38a3a:	29ff      	cmp	r1, #255	@ 0xff
   38a3c:	f000 822b 	beq.w	38e96 <d_print_comp_inner+0x163e>
   38a40:	1c4b      	adds	r3, r1, #1
   38a42:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   38a46:	5465      	strb	r5, [r4, r1]
   38a48:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38a4c:	f7fe bf91 	b.w	37972 <d_print_comp_inner+0x11a>
   38a50:	4eaa      	ldr	r6, [pc, #680]	@ (38cfc <d_print_comp_inner+0x14a4>)
   38a52:	68d2      	ldr	r2, [r2, #12]
   38a54:	2111      	movs	r1, #17
   38a56:	f001 f9cd 	bl	39df4 <d_print_comp>
   38a5a:	f04f 0800 	mov.w	r8, #0
   38a5e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38a62:	f106 0908 	add.w	r9, r6, #8
   38a66:	e009      	b.n	38a7c <d_print_comp_inner+0x1224>
   38a68:	460b      	mov	r3, r1
   38a6a:	3101      	adds	r1, #1
   38a6c:	45b1      	cmp	r9, r6
   38a6e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38a72:	54e5      	strb	r5, [r4, r3]
   38a74:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38a78:	f000 8321 	beq.w	390be <d_print_comp_inner+0x1866>
   38a7c:	29ff      	cmp	r1, #255	@ 0xff
   38a7e:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   38a82:	d1f1      	bne.n	38a68 <d_print_comp_inner+0x1210>
   38a84:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38a88:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38a8c:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38a90:	4620      	mov	r0, r4
   38a92:	4798      	blx	r3
   38a94:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38a98:	2101      	movs	r1, #1
   38a9a:	440a      	add	r2, r1
   38a9c:	2300      	movs	r3, #0
   38a9e:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38aa2:	e7e3      	b.n	38a6c <d_print_comp_inner+0x1214>
   38aa4:	4e96      	ldr	r6, [pc, #600]	@ (38d00 <d_print_comp_inner+0x14a8>)
   38aa6:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38aaa:	f106 091d 	add.w	r9, r6, #29
   38aae:	f04f 0800 	mov.w	r8, #0
   38ab2:	e009      	b.n	38ac8 <d_print_comp_inner+0x1270>
   38ab4:	460b      	mov	r3, r1
   38ab6:	3101      	adds	r1, #1
   38ab8:	454e      	cmp	r6, r9
   38aba:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38abe:	54e5      	strb	r5, [r4, r3]
   38ac0:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38ac4:	f43e af6d 	beq.w	379a2 <d_print_comp_inner+0x14a>
   38ac8:	29ff      	cmp	r1, #255	@ 0xff
   38aca:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   38ace:	d1f1      	bne.n	38ab4 <d_print_comp_inner+0x125c>
   38ad0:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38ad4:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38ad8:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38adc:	4620      	mov	r0, r4
   38ade:	4798      	blx	r3
   38ae0:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38ae4:	2101      	movs	r1, #1
   38ae6:	440a      	add	r2, r1
   38ae8:	2300      	movs	r3, #0
   38aea:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38aee:	e7e3      	b.n	38ab8 <d_print_comp_inner+0x1260>
   38af0:	4e84      	ldr	r6, [pc, #528]	@ (38d04 <d_print_comp_inner+0x14ac>)
   38af2:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38af6:	f106 091a 	add.w	r9, r6, #26
   38afa:	f04f 0800 	mov.w	r8, #0
   38afe:	e009      	b.n	38b14 <d_print_comp_inner+0x12bc>
   38b00:	460b      	mov	r3, r1
   38b02:	3101      	adds	r1, #1
   38b04:	454e      	cmp	r6, r9
   38b06:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38b0a:	54e5      	strb	r5, [r4, r3]
   38b0c:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38b10:	f43e af47 	beq.w	379a2 <d_print_comp_inner+0x14a>
   38b14:	29ff      	cmp	r1, #255	@ 0xff
   38b16:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   38b1a:	d1f1      	bne.n	38b00 <d_print_comp_inner+0x12a8>
   38b1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38b20:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38b24:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38b28:	4620      	mov	r0, r4
   38b2a:	4798      	blx	r3
   38b2c:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38b30:	2101      	movs	r1, #1
   38b32:	440a      	add	r2, r1
   38b34:	2300      	movs	r3, #0
   38b36:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38b3a:	e7e3      	b.n	38b04 <d_print_comp_inner+0x12ac>
   38b3c:	4e72      	ldr	r6, [pc, #456]	@ (38d08 <d_print_comp_inner+0x14b0>)
   38b3e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38b42:	f106 0916 	add.w	r9, r6, #22
   38b46:	f04f 0800 	mov.w	r8, #0
   38b4a:	e009      	b.n	38b60 <d_print_comp_inner+0x1308>
   38b4c:	460b      	mov	r3, r1
   38b4e:	3101      	adds	r1, #1
   38b50:	45b1      	cmp	r9, r6
   38b52:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38b56:	54e5      	strb	r5, [r4, r3]
   38b58:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38b5c:	f43e af21 	beq.w	379a2 <d_print_comp_inner+0x14a>
   38b60:	29ff      	cmp	r1, #255	@ 0xff
   38b62:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   38b66:	d1f1      	bne.n	38b4c <d_print_comp_inner+0x12f4>
   38b68:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38b6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38b70:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38b74:	4620      	mov	r0, r4
   38b76:	4798      	blx	r3
   38b78:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38b7c:	2101      	movs	r1, #1
   38b7e:	440a      	add	r2, r1
   38b80:	2300      	movs	r3, #0
   38b82:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38b86:	e7e3      	b.n	38b50 <d_print_comp_inner+0x12f8>
   38b88:	f8d0 7120 	ldr.w	r7, [r0, #288]	@ 0x120
   38b8c:	f8d2 a00c 	ldr.w	sl, [r2, #12]
   38b90:	2f00      	cmp	r7, #0
   38b92:	f040 8331 	bne.w	391f8 <d_print_comp_inner+0x19a0>
   38b96:	4651      	mov	r1, sl
   38b98:	f7fc fbde 	bl	35358 <d_find_pack>
   38b9c:	2800      	cmp	r0, #0
   38b9e:	f000 832b 	beq.w	391f8 <d_print_comp_inner+0x19a0>
   38ba2:	46bb      	mov	fp, r7
   38ba4:	e005      	b.n	38bb2 <d_print_comp_inner+0x135a>
   38ba6:	68c3      	ldr	r3, [r0, #12]
   38ba8:	b133      	cbz	r3, 38bb8 <d_print_comp_inner+0x1360>
   38baa:	6900      	ldr	r0, [r0, #16]
   38bac:	f10b 0b01 	add.w	fp, fp, #1
   38bb0:	b130      	cbz	r0, 38bc0 <d_print_comp_inner+0x1368>
   38bb2:	7803      	ldrb	r3, [r0, #0]
   38bb4:	2b2f      	cmp	r3, #47	@ 0x2f
   38bb6:	d0f6      	beq.n	38ba6 <d_print_comp_inner+0x134e>
   38bb8:	f1bb 0f00 	cmp.w	fp, #0
   38bbc:	f43e aed9 	beq.w	37972 <d_print_comp_inner+0x11a>
   38bc0:	f04f 0800 	mov.w	r8, #0
   38bc4:	f8c4 7124 	str.w	r7, [r4, #292]	@ 0x124
   38bc8:	4652      	mov	r2, sl
   38bca:	2111      	movs	r1, #17
   38bcc:	4620      	mov	r0, r4
   38bce:	3701      	adds	r7, #1
   38bd0:	f001 f910 	bl	39df4 <d_print_comp>
   38bd4:	455f      	cmp	r7, fp
   38bd6:	f43e aecc 	beq.w	37972 <d_print_comp_inner+0x11a>
   38bda:	4d4c      	ldr	r5, [pc, #304]	@ (38d0c <d_print_comp_inner+0x14b4>)
   38bdc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38be0:	f105 0902 	add.w	r9, r5, #2
   38be4:	e008      	b.n	38bf8 <d_print_comp_inner+0x13a0>
   38be6:	460a      	mov	r2, r1
   38be8:	3101      	adds	r1, #1
   38bea:	45a9      	cmp	r9, r5
   38bec:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38bf0:	54a6      	strb	r6, [r4, r2]
   38bf2:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   38bf6:	d0e5      	beq.n	38bc4 <d_print_comp_inner+0x136c>
   38bf8:	29ff      	cmp	r1, #255	@ 0xff
   38bfa:	f815 6b01 	ldrb.w	r6, [r5], #1
   38bfe:	d1f2      	bne.n	38be6 <d_print_comp_inner+0x138e>
   38c00:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38c04:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38c08:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38c0c:	4620      	mov	r0, r4
   38c0e:	4798      	blx	r3
   38c10:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   38c14:	2101      	movs	r1, #1
   38c16:	440b      	add	r3, r1
   38c18:	2200      	movs	r2, #0
   38c1a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   38c1e:	e7e4      	b.n	38bea <d_print_comp_inner+0x1392>
   38c20:	68d2      	ldr	r2, [r2, #12]
   38c22:	493b      	ldr	r1, [pc, #236]	@ (38d10 <d_print_comp_inner+0x14b8>)
   38c24:	a806      	add	r0, sp, #24
   38c26:	f002 fdfb 	bl	3b820 <sprintf>
   38c2a:	a806      	add	r0, sp, #24
   38c2c:	f7df fd48 	bl	186c0 <strlen>
   38c30:	2800      	cmp	r0, #0
   38c32:	f43e ae9e 	beq.w	37972 <d_print_comp_inner+0x11a>
   38c36:	ad06      	add	r5, sp, #24
   38c38:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38c3c:	182f      	adds	r7, r5, r0
   38c3e:	f04f 0800 	mov.w	r8, #0
   38c42:	e009      	b.n	38c58 <d_print_comp_inner+0x1400>
   38c44:	460b      	mov	r3, r1
   38c46:	3101      	adds	r1, #1
   38c48:	42af      	cmp	r7, r5
   38c4a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38c4e:	54e6      	strb	r6, [r4, r3]
   38c50:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   38c54:	f43e ae8d 	beq.w	37972 <d_print_comp_inner+0x11a>
   38c58:	29ff      	cmp	r1, #255	@ 0xff
   38c5a:	f815 6b01 	ldrb.w	r6, [r5], #1
   38c5e:	d1f1      	bne.n	38c44 <d_print_comp_inner+0x13ec>
   38c60:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38c64:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38c68:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38c6c:	4620      	mov	r0, r4
   38c6e:	4798      	blx	r3
   38c70:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38c74:	2101      	movs	r1, #1
   38c76:	440a      	add	r2, r1
   38c78:	2300      	movs	r3, #0
   38c7a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38c7e:	e7e3      	b.n	38c48 <d_print_comp_inner+0x13f0>
   38c80:	68d2      	ldr	r2, [r2, #12]
   38c82:	e9d2 5300 	ldrd	r5, r3, [r2]
   38c86:	2b00      	cmp	r3, #0
   38c88:	f43e ae73 	beq.w	37972 <d_print_comp_inner+0x11a>
   38c8c:	442b      	add	r3, r5
   38c8e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38c92:	3d01      	subs	r5, #1
   38c94:	1e5f      	subs	r7, r3, #1
   38c96:	f04f 0800 	mov.w	r8, #0
   38c9a:	e009      	b.n	38cb0 <d_print_comp_inner+0x1458>
   38c9c:	460b      	mov	r3, r1
   38c9e:	3101      	adds	r1, #1
   38ca0:	42af      	cmp	r7, r5
   38ca2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38ca6:	54e6      	strb	r6, [r4, r3]
   38ca8:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   38cac:	f43e ae61 	beq.w	37972 <d_print_comp_inner+0x11a>
   38cb0:	29ff      	cmp	r1, #255	@ 0xff
   38cb2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   38cb6:	d1f1      	bne.n	38c9c <d_print_comp_inner+0x1444>
   38cb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38cbc:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38cc0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38cc4:	4620      	mov	r0, r4
   38cc6:	4798      	blx	r3
   38cc8:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38ccc:	2101      	movs	r1, #1
   38cce:	440a      	add	r2, r1
   38cd0:	2300      	movs	r3, #0
   38cd2:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38cd6:	e7e3      	b.n	38ca0 <d_print_comp_inner+0x1448>
   38cd8:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
   38cdc:	2b00      	cmp	r3, #0
   38cde:	f43e ae48 	beq.w	37972 <d_print_comp_inner+0x11a>
   38ce2:	442b      	add	r3, r5
   38ce4:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   38ce8:	3d01      	subs	r5, #1
   38cea:	1e5f      	subs	r7, r3, #1
   38cec:	f04f 0800 	mov.w	r8, #0
   38cf0:	e01a      	b.n	38d28 <d_print_comp_inner+0x14d0>
   38cf2:	bf00      	nop
   38cf4:	0003ffcc 	.word	0x0003ffcc
   38cf8:	000401c7 	.word	0x000401c7
   38cfc:	00040253 	.word	0x00040253
   38d00:	000401f7 	.word	0x000401f7
   38d04:	0004015b 	.word	0x0004015b
   38d08:	0004015f 	.word	0x0004015f
   38d0c:	0003ffd4 	.word	0x0003ffd4
   38d10:	0003ff64 	.word	0x0003ff64
   38d14:	460b      	mov	r3, r1
   38d16:	3101      	adds	r1, #1
   38d18:	42af      	cmp	r7, r5
   38d1a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38d1e:	54e6      	strb	r6, [r4, r3]
   38d20:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   38d24:	f43e ae25 	beq.w	37972 <d_print_comp_inner+0x11a>
   38d28:	29ff      	cmp	r1, #255	@ 0xff
   38d2a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   38d2e:	d1f1      	bne.n	38d14 <d_print_comp_inner+0x14bc>
   38d30:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38d34:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38d38:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38d3c:	4620      	mov	r0, r4
   38d3e:	4798      	blx	r3
   38d40:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38d44:	2101      	movs	r1, #1
   38d46:	440a      	add	r2, r1
   38d48:	2300      	movs	r3, #0
   38d4a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38d4e:	e7e3      	b.n	38d18 <d_print_comp_inner+0x14c0>
   38d50:	49cb      	ldr	r1, [pc, #812]	@ (39080 <d_print_comp_inner+0x1828>)
   38d52:	4620      	mov	r0, r4
   38d54:	f7fc fb48 	bl	353e8 <d_append_string>
   38d58:	693a      	ldr	r2, [r7, #16]
   38d5a:	49ca      	ldr	r1, [pc, #808]	@ (39084 <d_print_comp_inner+0x182c>)
   38d5c:	3201      	adds	r2, #1
   38d5e:	a806      	add	r0, sp, #24
   38d60:	f002 fd5e 	bl	3b820 <sprintf>
   38d64:	a806      	add	r0, sp, #24
   38d66:	f7df fcab 	bl	186c0 <strlen>
   38d6a:	4681      	mov	r9, r0
   38d6c:	2800      	cmp	r0, #0
   38d6e:	f000 8500 	beq.w	39772 <d_print_comp_inner+0x1f1a>
   38d72:	ad06      	add	r5, sp, #24
   38d74:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38d78:	44a9      	add	r9, r5
   38d7a:	f04f 0800 	mov.w	r8, #0
   38d7e:	e009      	b.n	38d94 <d_print_comp_inner+0x153c>
   38d80:	460b      	mov	r3, r1
   38d82:	3101      	adds	r1, #1
   38d84:	45a9      	cmp	r9, r5
   38d86:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38d8a:	54e6      	strb	r6, [r4, r3]
   38d8c:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   38d90:	f000 84ef 	beq.w	39772 <d_print_comp_inner+0x1f1a>
   38d94:	29ff      	cmp	r1, #255	@ 0xff
   38d96:	f815 6b01 	ldrb.w	r6, [r5], #1
   38d9a:	d1f1      	bne.n	38d80 <d_print_comp_inner+0x1528>
   38d9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38da0:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38da4:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38da8:	4620      	mov	r0, r4
   38daa:	4798      	blx	r3
   38dac:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38db0:	2101      	movs	r1, #1
   38db2:	440a      	add	r2, r1
   38db4:	2300      	movs	r3, #0
   38db6:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38dba:	e7e3      	b.n	38d84 <d_print_comp_inner+0x152c>
   38dbc:	4db2      	ldr	r5, [pc, #712]	@ (39088 <d_print_comp_inner+0x1830>)
   38dbe:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38dc2:	f105 0a02 	add.w	sl, r5, #2
   38dc6:	e009      	b.n	38ddc <d_print_comp_inner+0x1584>
   38dc8:	460a      	mov	r2, r1
   38dca:	3101      	adds	r1, #1
   38dcc:	45aa      	cmp	sl, r5
   38dce:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38dd2:	54a6      	strb	r6, [r4, r2]
   38dd4:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   38dd8:	f43f aa74 	beq.w	382c4 <d_print_comp_inner+0xa6c>
   38ddc:	29ff      	cmp	r1, #255	@ 0xff
   38dde:	f815 6b01 	ldrb.w	r6, [r5], #1
   38de2:	d1f1      	bne.n	38dc8 <d_print_comp_inner+0x1570>
   38de4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38de8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38dec:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   38df0:	4620      	mov	r0, r4
   38df2:	4798      	blx	r3
   38df4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   38df8:	2101      	movs	r1, #1
   38dfa:	440b      	add	r3, r1
   38dfc:	2200      	movs	r2, #0
   38dfe:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   38e02:	e7e3      	b.n	38dcc <d_print_comp_inner+0x1574>
   38e04:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   38e08:	68c2      	ldr	r2, [r0, #12]
   38e0a:	9309      	str	r3, [sp, #36]	@ 0x24
   38e0c:	ab06      	add	r3, sp, #24
   38e0e:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   38e12:	2300      	movs	r3, #0
   38e14:	e9cd cb06 	strd	ip, fp, [sp, #24]
   38e18:	9308      	str	r3, [sp, #32]
   38e1a:	2a00      	cmp	r2, #0
   38e1c:	f47e add8 	bne.w	379d0 <d_print_comp_inner+0x178>
   38e20:	f7fe bdd4 	b.w	379cc <d_print_comp_inner+0x174>
   38e24:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   38e28:	4996      	ldr	r1, [pc, #600]	@ (39084 <d_print_comp_inner+0x182c>)
   38e2a:	a806      	add	r0, sp, #24
   38e2c:	f002 fcf8 	bl	3b820 <sprintf>
   38e30:	a806      	add	r0, sp, #24
   38e32:	f7df fc45 	bl	186c0 <strlen>
   38e36:	b320      	cbz	r0, 38e82 <d_print_comp_inner+0x162a>
   38e38:	ae06      	add	r6, sp, #24
   38e3a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38e3e:	eb06 0900 	add.w	r9, r6, r0
   38e42:	f04f 0800 	mov.w	r8, #0
   38e46:	e008      	b.n	38e5a <d_print_comp_inner+0x1602>
   38e48:	460b      	mov	r3, r1
   38e4a:	3101      	adds	r1, #1
   38e4c:	45b1      	cmp	r9, r6
   38e4e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38e52:	54e5      	strb	r5, [r4, r3]
   38e54:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38e58:	d013      	beq.n	38e82 <d_print_comp_inner+0x162a>
   38e5a:	29ff      	cmp	r1, #255	@ 0xff
   38e5c:	f816 5b01 	ldrb.w	r5, [r6], #1
   38e60:	d1f2      	bne.n	38e48 <d_print_comp_inner+0x15f0>
   38e62:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38e66:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38e6a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38e6e:	4620      	mov	r0, r4
   38e70:	4798      	blx	r3
   38e72:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38e76:	2101      	movs	r1, #1
   38e78:	440a      	add	r2, r1
   38e7a:	2300      	movs	r3, #0
   38e7c:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38e80:	e7e4      	b.n	38e4c <d_print_comp_inner+0x15f4>
   38e82:	f89b 5012 	ldrb.w	r5, [fp, #18]
   38e86:	2d00      	cmp	r5, #0
   38e88:	f43e ad73 	beq.w	37972 <d_print_comp_inner+0x11a>
   38e8c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38e90:	29ff      	cmp	r1, #255	@ 0xff
   38e92:	f47f add5 	bne.w	38a40 <d_print_comp_inner+0x11e8>
   38e96:	2600      	movs	r6, #0
   38e98:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38e9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38ea0:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   38ea4:	4620      	mov	r0, r4
   38ea6:	4798      	blx	r3
   38ea8:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38eac:	2301      	movs	r3, #1
   38eae:	441a      	add	r2, r3
   38eb0:	4631      	mov	r1, r6
   38eb2:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38eb6:	e5c4      	b.n	38a42 <d_print_comp_inner+0x11ea>
   38eb8:	4d74      	ldr	r5, [pc, #464]	@ (3908c <d_print_comp_inner+0x1834>)
   38eba:	f8db 200c 	ldr.w	r2, [fp, #12]
   38ebe:	2111      	movs	r1, #17
   38ec0:	4620      	mov	r0, r4
   38ec2:	f000 ff97 	bl	39df4 <d_print_comp>
   38ec6:	f04f 0800 	mov.w	r8, #0
   38eca:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38ece:	1daf      	adds	r7, r5, #6
   38ed0:	e009      	b.n	38ee6 <d_print_comp_inner+0x168e>
   38ed2:	460b      	mov	r3, r1
   38ed4:	3101      	adds	r1, #1
   38ed6:	42bd      	cmp	r5, r7
   38ed8:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38edc:	54e6      	strb	r6, [r4, r3]
   38ede:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   38ee2:	f43e ad46 	beq.w	37972 <d_print_comp_inner+0x11a>
   38ee6:	29ff      	cmp	r1, #255	@ 0xff
   38ee8:	f815 6b01 	ldrb.w	r6, [r5], #1
   38eec:	d1f1      	bne.n	38ed2 <d_print_comp_inner+0x167a>
   38eee:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38ef2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38ef6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38efa:	4620      	mov	r0, r4
   38efc:	4798      	blx	r3
   38efe:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38f02:	2101      	movs	r1, #1
   38f04:	440a      	add	r2, r1
   38f06:	2300      	movs	r3, #0
   38f08:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38f0c:	e7e3      	b.n	38ed6 <d_print_comp_inner+0x167e>
   38f0e:	f8db 200c 	ldr.w	r2, [fp, #12]
   38f12:	e514      	b.n	3893e <d_print_comp_inner+0x10e6>
   38f14:	f8d9 5004 	ldr.w	r5, [r9, #4]
   38f18:	782b      	ldrb	r3, [r5, #0]
   38f1a:	3b61      	subs	r3, #97	@ 0x61
   38f1c:	2b19      	cmp	r3, #25
   38f1e:	f240 82d2 	bls.w	394c6 <d_print_comp_inner+0x1c6e>
   38f22:	f10a 37ff 	add.w	r7, sl, #4294967295	@ 0xffffffff
   38f26:	5deb      	ldrb	r3, [r5, r7]
   38f28:	2b20      	cmp	r3, #32
   38f2a:	bf18      	it	ne
   38f2c:	4657      	movne	r7, sl
   38f2e:	2f00      	cmp	r7, #0
   38f30:	f43e ad1f 	beq.w	37972 <d_print_comp_inner+0x11a>
   38f34:	3d01      	subs	r5, #1
   38f36:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38f3a:	442f      	add	r7, r5
   38f3c:	f04f 0800 	mov.w	r8, #0
   38f40:	e009      	b.n	38f56 <d_print_comp_inner+0x16fe>
   38f42:	460b      	mov	r3, r1
   38f44:	3101      	adds	r1, #1
   38f46:	42bd      	cmp	r5, r7
   38f48:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38f4c:	54e6      	strb	r6, [r4, r3]
   38f4e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   38f52:	f43e ad0e 	beq.w	37972 <d_print_comp_inner+0x11a>
   38f56:	29ff      	cmp	r1, #255	@ 0xff
   38f58:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   38f5c:	d1f1      	bne.n	38f42 <d_print_comp_inner+0x16ea>
   38f5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   38f62:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   38f66:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   38f6a:	4620      	mov	r0, r4
   38f6c:	4798      	blx	r3
   38f6e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   38f72:	2101      	movs	r1, #1
   38f74:	440a      	add	r2, r1
   38f76:	2300      	movs	r3, #0
   38f78:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   38f7c:	e7e3      	b.n	38f46 <d_print_comp_inner+0x16ee>
   38f7e:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   38f82:	f8db 700c 	ldr.w	r7, [fp, #12]
   38f86:	9304      	str	r3, [sp, #16]
   38f88:	f04f 0900 	mov.w	r9, #0
   38f8c:	ab04      	add	r3, sp, #16
   38f8e:	f8d4 5120 	ldr.w	r5, [r4, #288]	@ 0x120
   38f92:	f8cd 9014 	str.w	r9, [sp, #20]
   38f96:	f8c4 9120 	str.w	r9, [r4, #288]	@ 0x120
   38f9a:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   38f9e:	b11f      	cbz	r7, 38fa8 <d_print_comp_inner+0x1750>
   38fa0:	783b      	ldrb	r3, [r7, #0]
   38fa2:	2b57      	cmp	r3, #87	@ 0x57
   38fa4:	f000 850a 	beq.w	399bc <d_print_comp_inner+0x2164>
   38fa8:	2301      	movs	r3, #1
   38faa:	ae06      	add	r6, sp, #24
   38fac:	29ff      	cmp	r1, #255	@ 0xff
   38fae:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
   38fb2:	f000 8407 	beq.w	397c4 <d_print_comp_inner+0x1f6c>
   38fb6:	1c4b      	adds	r3, r1, #1
   38fb8:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   38fbc:	2328      	movs	r3, #40	@ 0x28
   38fbe:	5463      	strb	r3, [r4, r1]
   38fc0:	463a      	mov	r2, r7
   38fc2:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   38fc6:	2111      	movs	r1, #17
   38fc8:	4f31      	ldr	r7, [pc, #196]	@ (39090 <d_print_comp_inner+0x1838>)
   38fca:	4620      	mov	r0, r4
   38fcc:	f000 ff12 	bl	39df4 <d_print_comp>
   38fd0:	9b04      	ldr	r3, [sp, #16]
   38fd2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   38fd6:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   38fda:	f8c4 5120 	str.w	r5, [r4, #288]	@ 0x120
   38fde:	f107 0a02 	add.w	sl, r7, #2
   38fe2:	f04f 0900 	mov.w	r9, #0
   38fe6:	e008      	b.n	38ffa <d_print_comp_inner+0x17a2>
   38fe8:	460b      	mov	r3, r1
   38fea:	3101      	adds	r1, #1
   38fec:	4557      	cmp	r7, sl
   38fee:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   38ff2:	54e5      	strb	r5, [r4, r3]
   38ff4:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   38ff8:	d013      	beq.n	39022 <d_print_comp_inner+0x17ca>
   38ffa:	29ff      	cmp	r1, #255	@ 0xff
   38ffc:	f817 5b01 	ldrb.w	r5, [r7], #1
   39000:	d1f2      	bne.n	38fe8 <d_print_comp_inner+0x1790>
   39002:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39006:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3900a:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3900e:	4620      	mov	r0, r4
   39010:	4798      	blx	r3
   39012:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   39016:	2101      	movs	r1, #1
   39018:	440a      	add	r2, r1
   3901a:	2300      	movs	r3, #0
   3901c:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   39020:	e7e4      	b.n	38fec <d_print_comp_inner+0x1794>
   39022:	f8db 2010 	ldr.w	r2, [fp, #16]
   39026:	4917      	ldr	r1, [pc, #92]	@ (39084 <d_print_comp_inner+0x182c>)
   39028:	3201      	adds	r2, #1
   3902a:	4630      	mov	r0, r6
   3902c:	f002 fbf8 	bl	3b820 <sprintf>
   39030:	4630      	mov	r0, r6
   39032:	f7df fb45 	bl	186c0 <strlen>
   39036:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3903a:	b368      	cbz	r0, 39098 <d_print_comp_inner+0x1840>
   3903c:	1837      	adds	r7, r6, r0
   3903e:	f04f 0800 	mov.w	r8, #0
   39042:	e008      	b.n	39056 <d_print_comp_inner+0x17fe>
   39044:	460b      	mov	r3, r1
   39046:	3101      	adds	r1, #1
   39048:	42be      	cmp	r6, r7
   3904a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3904e:	54e5      	strb	r5, [r4, r3]
   39050:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   39054:	d020      	beq.n	39098 <d_print_comp_inner+0x1840>
   39056:	29ff      	cmp	r1, #255	@ 0xff
   39058:	f816 5b01 	ldrb.w	r5, [r6], #1
   3905c:	d1f2      	bne.n	39044 <d_print_comp_inner+0x17ec>
   3905e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39062:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39066:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3906a:	4620      	mov	r0, r4
   3906c:	4798      	blx	r3
   3906e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   39072:	2101      	movs	r1, #1
   39074:	440a      	add	r2, r1
   39076:	2300      	movs	r3, #0
   39078:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3907c:	e7e4      	b.n	39048 <d_print_comp_inner+0x17f0>
   3907e:	bf00      	nop
   39080:	0003ffdc 	.word	0x0003ffdc
   39084:	0003ff64 	.word	0x0003ff64
   39088:	0003ffd4 	.word	0x0003ffd4
   3908c:	00040278 	.word	0x00040278
   39090:	00040240 	.word	0x00040240
   39094:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   39098:	29ff      	cmp	r1, #255	@ 0xff
   3909a:	f47f aa87 	bne.w	385ac <d_print_comp_inner+0xd54>
   3909e:	2500      	movs	r5, #0
   390a0:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   390a4:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   390a8:	4620      	mov	r0, r4
   390aa:	4798      	blx	r3
   390ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   390b0:	2201      	movs	r2, #1
   390b2:	4413      	add	r3, r2
   390b4:	4629      	mov	r1, r5
   390b6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   390ba:	f7ff ba78 	b.w	385ae <d_print_comp_inner+0xd56>
   390be:	f8db 2010 	ldr.w	r2, [fp, #16]
   390c2:	2111      	movs	r1, #17
   390c4:	e47f      	b.n	389c6 <d_print_comp_inner+0x116e>
   390c6:	f8db 200c 	ldr.w	r2, [fp, #12]
   390ca:	49cc      	ldr	r1, [pc, #816]	@ (393fc <d_print_comp_inner+0x1ba4>)
   390cc:	3201      	adds	r2, #1
   390ce:	a806      	add	r0, sp, #24
   390d0:	f002 fba6 	bl	3b820 <sprintf>
   390d4:	a806      	add	r0, sp, #24
   390d6:	f7df faf3 	bl	186c0 <strlen>
   390da:	2800      	cmp	r0, #0
   390dc:	d0da      	beq.n	39094 <d_print_comp_inner+0x183c>
   390de:	ad06      	add	r5, sp, #24
   390e0:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   390e4:	182f      	adds	r7, r5, r0
   390e6:	f04f 0800 	mov.w	r8, #0
   390ea:	e008      	b.n	390fe <d_print_comp_inner+0x18a6>
   390ec:	460b      	mov	r3, r1
   390ee:	3101      	adds	r1, #1
   390f0:	42bd      	cmp	r5, r7
   390f2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   390f6:	54e6      	strb	r6, [r4, r3]
   390f8:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   390fc:	d0cc      	beq.n	39098 <d_print_comp_inner+0x1840>
   390fe:	29ff      	cmp	r1, #255	@ 0xff
   39100:	f815 6b01 	ldrb.w	r6, [r5], #1
   39104:	d1f2      	bne.n	390ec <d_print_comp_inner+0x1894>
   39106:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3910a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3910e:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   39112:	4620      	mov	r0, r4
   39114:	4798      	blx	r3
   39116:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3911a:	2101      	movs	r1, #1
   3911c:	440a      	add	r2, r1
   3911e:	2300      	movs	r3, #0
   39120:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   39124:	e7e4      	b.n	390f0 <d_print_comp_inner+0x1898>
   39126:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3912a:	29ff      	cmp	r1, #255	@ 0xff
   3912c:	f47f ac53 	bne.w	389d6 <d_print_comp_inner+0x117e>
   39130:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   39134:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
   39138:	4620      	mov	r0, r4
   3913a:	4798      	blx	r3
   3913c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   39140:	2201      	movs	r2, #1
   39142:	4413      	add	r3, r2
   39144:	4639      	mov	r1, r7
   39146:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3914a:	e445      	b.n	389d8 <d_print_comp_inner+0x1180>
   3914c:	f8db 200c 	ldr.w	r2, [fp, #12]
   39150:	2111      	movs	r1, #17
   39152:	4620      	mov	r0, r4
   39154:	f000 fe4e 	bl	39df4 <d_print_comp>
   39158:	49a9      	ldr	r1, [pc, #676]	@ (39400 <d_print_comp_inner+0x1ba8>)
   3915a:	4620      	mov	r0, r4
   3915c:	f7fc f944 	bl	353e8 <d_append_string>
   39160:	f8db 2010 	ldr.w	r2, [fp, #16]
   39164:	2111      	movs	r1, #17
   39166:	f7fe bc1f 	b.w	379a8 <d_print_comp_inner+0x150>
   3916a:	4ea6      	ldr	r6, [pc, #664]	@ (39404 <d_print_comp_inner+0x1bac>)
   3916c:	f8db 2010 	ldr.w	r2, [fp, #16]
   39170:	2111      	movs	r1, #17
   39172:	4620      	mov	r0, r4
   39174:	f000 fe3e 	bl	39df4 <d_print_comp>
   39178:	f04f 0800 	mov.w	r8, #0
   3917c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   39180:	f106 0905 	add.w	r9, r6, #5
   39184:	e009      	b.n	3919a <d_print_comp_inner+0x1942>
   39186:	460b      	mov	r3, r1
   39188:	3101      	adds	r1, #1
   3918a:	45b1      	cmp	r9, r6
   3918c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39190:	54e5      	strb	r5, [r4, r3]
   39192:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   39196:	f43e ac04 	beq.w	379a2 <d_print_comp_inner+0x14a>
   3919a:	29ff      	cmp	r1, #255	@ 0xff
   3919c:	f816 5b01 	ldrb.w	r5, [r6], #1
   391a0:	d1f1      	bne.n	39186 <d_print_comp_inner+0x192e>
   391a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   391a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   391aa:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   391ae:	4620      	mov	r0, r4
   391b0:	4798      	blx	r3
   391b2:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   391b6:	2101      	movs	r1, #1
   391b8:	440a      	add	r2, r1
   391ba:	2300      	movs	r3, #0
   391bc:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   391c0:	e7e3      	b.n	3918a <d_print_comp_inner+0x1932>
   391c2:	465a      	mov	r2, fp
   391c4:	2111      	movs	r1, #17
   391c6:	4620      	mov	r0, r4
   391c8:	f000 fe42 	bl	39e50 <d_print_mod>
   391cc:	f7fe bc08 	b.w	379e0 <d_print_comp_inner+0x188>
   391d0:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   391d4:	2bff      	cmp	r3, #255	@ 0xff
   391d6:	f000 84aa 	beq.w	39b2e <d_print_comp_inner+0x22d6>
   391da:	1c5a      	adds	r2, r3, #1
   391dc:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   391e0:	2111      	movs	r1, #17
   391e2:	f804 8003 	strb.w	r8, [r4, r3]
   391e6:	f855 2c0c 	ldr.w	r2, [r5, #-12]
   391ea:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
   391ee:	4620      	mov	r0, r4
   391f0:	f000 fe2e 	bl	39e50 <d_print_mod>
   391f4:	f7ff b984 	b.w	38500 <d_print_comp_inner+0xca8>
   391f8:	4652      	mov	r2, sl
   391fa:	2111      	movs	r1, #17
   391fc:	4620      	mov	r0, r4
   391fe:	f001 fe17 	bl	3ae30 <d_print_subexpr>
   39202:	f7fe bfde 	b.w	381c2 <d_print_comp_inner+0x96a>
   39206:	f1b8 0f01 	cmp.w	r8, #1
   3920a:	f63f a955 	bhi.w	384b8 <d_print_comp_inner+0xc60>
   3920e:	68ed      	ldr	r5, [r5, #12]
   39210:	4672      	mov	r2, lr
   39212:	2d00      	cmp	r5, #0
   39214:	f000 85c4 	beq.w	39da0 <d_print_comp_inner+0x2548>
   39218:	2f04      	cmp	r7, #4
   3921a:	f103 0310 	add.w	r3, r3, #16
   3921e:	f000 8166 	beq.w	394ee <d_print_comp_inner+0x1c96>
   39222:	46bc      	mov	ip, r7
   39224:	f7ff b933 	b.w	3848e <d_print_comp_inner+0xc36>
   39228:	2b00      	cmp	r3, #0
   3922a:	f000 81bc 	beq.w	395a6 <d_print_comp_inner+0x1d4e>
   3922e:	4e76      	ldr	r6, [pc, #472]	@ (39408 <d_print_comp_inner+0x1bb0>)
   39230:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   39234:	f106 0905 	add.w	r9, r6, #5
   39238:	f04f 0800 	mov.w	r8, #0
   3923c:	e009      	b.n	39252 <d_print_comp_inner+0x19fa>
   3923e:	460b      	mov	r3, r1
   39240:	3101      	adds	r1, #1
   39242:	45b1      	cmp	r9, r6
   39244:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39248:	54e5      	strb	r5, [r4, r3]
   3924a:	f884 5104 	strb.w	r5, [r4, #260]	@ 0x104
   3924e:	f000 81cb 	beq.w	395e8 <d_print_comp_inner+0x1d90>
   39252:	29ff      	cmp	r1, #255	@ 0xff
   39254:	f816 5b01 	ldrb.w	r5, [r6], #1
   39258:	d1f1      	bne.n	3923e <d_print_comp_inner+0x19e6>
   3925a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3925e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39262:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   39266:	4620      	mov	r0, r4
   39268:	4798      	blx	r3
   3926a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3926e:	2101      	movs	r1, #1
   39270:	440a      	add	r2, r1
   39272:	2300      	movs	r3, #0
   39274:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   39278:	e7e3      	b.n	39242 <d_print_comp_inner+0x19ea>
   3927a:	4964      	ldr	r1, [pc, #400]	@ (3940c <d_print_comp_inner+0x1bb4>)
   3927c:	f7fc f8b4 	bl	353e8 <d_append_string>
   39280:	495e      	ldr	r1, [pc, #376]	@ (393fc <d_print_comp_inner+0x1ba4>)
   39282:	462a      	mov	r2, r5
   39284:	a806      	add	r0, sp, #24
   39286:	f002 facb 	bl	3b820 <sprintf>
   3928a:	a806      	add	r0, sp, #24
   3928c:	f7df fa18 	bl	186c0 <strlen>
   39290:	b318      	cbz	r0, 392da <d_print_comp_inner+0x1a82>
   39292:	ad06      	add	r5, sp, #24
   39294:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   39298:	182f      	adds	r7, r5, r0
   3929a:	f04f 0800 	mov.w	r8, #0
   3929e:	e008      	b.n	392b2 <d_print_comp_inner+0x1a5a>
   392a0:	460b      	mov	r3, r1
   392a2:	3101      	adds	r1, #1
   392a4:	42af      	cmp	r7, r5
   392a6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   392aa:	54e6      	strb	r6, [r4, r3]
   392ac:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   392b0:	d013      	beq.n	392da <d_print_comp_inner+0x1a82>
   392b2:	29ff      	cmp	r1, #255	@ 0xff
   392b4:	f815 6b01 	ldrb.w	r6, [r5], #1
   392b8:	d1f2      	bne.n	392a0 <d_print_comp_inner+0x1a48>
   392ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   392be:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   392c2:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   392c6:	4620      	mov	r0, r4
   392c8:	4798      	blx	r3
   392ca:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   392ce:	2101      	movs	r1, #1
   392d0:	440a      	add	r2, r1
   392d2:	2300      	movs	r3, #0
   392d4:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   392d8:	e7e4      	b.n	392a4 <d_print_comp_inner+0x1a4c>
   392da:	217d      	movs	r1, #125	@ 0x7d
   392dc:	f7ff bb17 	b.w	3890e <d_print_comp_inner+0x10b6>
   392e0:	2700      	movs	r7, #0
   392e2:	f7fe bbae 	b.w	37a42 <d_print_comp_inner+0x1ea>
   392e6:	2e54      	cmp	r6, #84	@ 0x54
   392e8:	f47e abcf 	bne.w	37a8a <d_print_comp_inner+0x232>
   392ec:	263a      	movs	r6, #58	@ 0x3a
   392ee:	f7fe bbe0 	b.w	37ab2 <d_print_comp_inner+0x25a>
   392f2:	2500      	movs	r5, #0
   392f4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   392f8:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   392fc:	4620      	mov	r0, r4
   392fe:	4798      	blx	r3
   39300:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   39304:	2201      	movs	r2, #1
   39306:	4413      	add	r3, r2
   39308:	4629      	mov	r1, r5
   3930a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3930e:	f7ff bb20 	b.w	38952 <d_print_comp_inner+0x10fa>
   39312:	2500      	movs	r5, #0
   39314:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   39318:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3931c:	4620      	mov	r0, r4
   3931e:	4798      	blx	r3
   39320:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   39324:	2201      	movs	r2, #1
   39326:	4413      	add	r3, r2
   39328:	4629      	mov	r1, r5
   3932a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3932e:	f7ff bb53 	b.w	389d8 <d_print_comp_inner+0x1180>
   39332:	781a      	ldrb	r2, [r3, #0]
   39334:	2a5b      	cmp	r2, #91	@ 0x5b
   39336:	d104      	bne.n	39342 <d_print_comp_inner+0x1aea>
   39338:	68db      	ldr	r3, [r3, #12]
   3933a:	2b00      	cmp	r3, #0
   3933c:	f43e ab16 	beq.w	3796c <d_print_comp_inner+0x114>
   39340:	781a      	ldrb	r2, [r3, #0]
   39342:	3a58      	subs	r2, #88	@ 0x58
   39344:	2a02      	cmp	r2, #2
   39346:	f240 80e5 	bls.w	39514 <d_print_comp_inner+0x1cbc>
   3934a:	2301      	movs	r3, #1
   3934c:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
   39350:	492a      	ldr	r1, [pc, #168]	@ (393fc <d_print_comp_inner+0x1ba4>)
   39352:	4642      	mov	r2, r8
   39354:	a806      	add	r0, sp, #24
   39356:	f002 fa63 	bl	3b820 <sprintf>
   3935a:	a806      	add	r0, sp, #24
   3935c:	f7df f9b0 	bl	186c0 <strlen>
   39360:	2800      	cmp	r0, #0
   39362:	f43e ab06 	beq.w	37972 <d_print_comp_inner+0x11a>
   39366:	ad06      	add	r5, sp, #24
   39368:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3936c:	182f      	adds	r7, r5, r0
   3936e:	f04f 0800 	mov.w	r8, #0
   39372:	e009      	b.n	39388 <d_print_comp_inner+0x1b30>
   39374:	460b      	mov	r3, r1
   39376:	3101      	adds	r1, #1
   39378:	42af      	cmp	r7, r5
   3937a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3937e:	54e6      	strb	r6, [r4, r3]
   39380:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   39384:	f43e aaf5 	beq.w	37972 <d_print_comp_inner+0x11a>
   39388:	29ff      	cmp	r1, #255	@ 0xff
   3938a:	f815 6b01 	ldrb.w	r6, [r5], #1
   3938e:	d1f1      	bne.n	39374 <d_print_comp_inner+0x1b1c>
   39390:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39394:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39398:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3939c:	4620      	mov	r0, r4
   3939e:	4798      	blx	r3
   393a0:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   393a4:	2101      	movs	r1, #1
   393a6:	440a      	add	r2, r1
   393a8:	2300      	movs	r3, #0
   393aa:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   393ae:	e7e3      	b.n	39378 <d_print_comp_inner+0x1b20>
   393b0:	68d2      	ldr	r2, [r2, #12]
   393b2:	2111      	movs	r1, #17
   393b4:	4620      	mov	r0, r4
   393b6:	f000 fd1d 	bl	39df4 <d_print_comp>
   393ba:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
   393be:	b113      	cbz	r3, 393c6 <d_print_comp_inner+0x1b6e>
   393c0:	9b06      	ldr	r3, [sp, #24]
   393c2:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   393c6:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   393ca:	2b3c      	cmp	r3, #60	@ 0x3c
   393cc:	f000 83f2 	beq.w	39bb4 <d_print_comp_inner+0x235c>
   393d0:	213c      	movs	r1, #60	@ 0x3c
   393d2:	4620      	mov	r0, r4
   393d4:	f7fb ff84 	bl	352e0 <d_append_char>
   393d8:	f8db 300c 	ldr.w	r3, [fp, #12]
   393dc:	2111      	movs	r1, #17
   393de:	691a      	ldr	r2, [r3, #16]
   393e0:	4620      	mov	r0, r4
   393e2:	f000 fd07 	bl	39df4 <d_print_comp>
   393e6:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   393ea:	2b3e      	cmp	r3, #62	@ 0x3e
   393ec:	f000 83dd 	beq.w	39baa <d_print_comp_inner+0x2352>
   393f0:	213e      	movs	r1, #62	@ 0x3e
   393f2:	4620      	mov	r0, r4
   393f4:	f7fb ff74 	bl	352e0 <d_append_char>
   393f8:	f7fe babb 	b.w	37972 <d_print_comp_inner+0x11a>
   393fc:	0003ff64 	.word	0x0003ff64
   39400:	00040064 	.word	0x00040064
   39404:	00040128 	.word	0x00040128
   39408:	0003fff0 	.word	0x0003fff0
   3940c:	000401f0 	.word	0x000401f0
   39410:	68f3      	ldr	r3, [r6, #12]
   39412:	681f      	ldr	r7, [r3, #0]
   39414:	783b      	ldrb	r3, [r7, #0]
   39416:	f1b3 0261 	subs.w	r2, r3, #97	@ 0x61
   3941a:	d103      	bne.n	39424 <d_print_comp_inner+0x1bcc>
   3941c:	787a      	ldrb	r2, [r7, #1]
   3941e:	3a64      	subs	r2, #100	@ 0x64
   39420:	bf08      	it	eq
   39422:	78ba      	ldrbeq	r2, [r7, #2]
   39424:	7829      	ldrb	r1, [r5, #0]
   39426:	b912      	cbnz	r2, 3942e <d_print_comp_inner+0x1bd6>
   39428:	2903      	cmp	r1, #3
   3942a:	f000 83e1 	beq.w	39bf0 <d_print_comp_inner+0x2398>
   3942e:	2939      	cmp	r1, #57	@ 0x39
   39430:	f000 8434 	beq.w	39c9c <d_print_comp_inner+0x2444>
   39434:	2b73      	cmp	r3, #115	@ 0x73
   39436:	d11f      	bne.n	39478 <d_print_comp_inner+0x1c20>
   39438:	787a      	ldrb	r2, [r7, #1]
   3943a:	2a5a      	cmp	r2, #90	@ 0x5a
   3943c:	f040 8389 	bne.w	39b52 <d_print_comp_inner+0x22fa>
   39440:	f897 8002 	ldrb.w	r8, [r7, #2]
   39444:	f1b8 0f00 	cmp.w	r8, #0
   39448:	f040 8383 	bne.w	39b52 <d_print_comp_inner+0x22fa>
   3944c:	4629      	mov	r1, r5
   3944e:	4620      	mov	r0, r4
   39450:	f7fb ff82 	bl	35358 <d_find_pack>
   39454:	b930      	cbnz	r0, 39464 <d_print_comp_inner+0x1c0c>
   39456:	e008      	b.n	3946a <d_print_comp_inner+0x1c12>
   39458:	68c3      	ldr	r3, [r0, #12]
   3945a:	b133      	cbz	r3, 3946a <d_print_comp_inner+0x1c12>
   3945c:	6900      	ldr	r0, [r0, #16]
   3945e:	f108 0801 	add.w	r8, r8, #1
   39462:	b110      	cbz	r0, 3946a <d_print_comp_inner+0x1c12>
   39464:	7803      	ldrb	r3, [r0, #0]
   39466:	2b2f      	cmp	r3, #47	@ 0x2f
   39468:	d0f6      	beq.n	39458 <d_print_comp_inner+0x1c00>
   3946a:	4641      	mov	r1, r8
   3946c:	4620      	mov	r0, r4
   3946e:	b017      	add	sp, #92	@ 0x5c
   39470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39474:	f7fc b81a 	b.w	354ac <d_append_num>
   39478:	4632      	mov	r2, r6
   3947a:	2111      	movs	r1, #17
   3947c:	4620      	mov	r0, r4
   3947e:	f001 fadb 	bl	3aa38 <d_print_expr_op>
   39482:	783b      	ldrb	r3, [r7, #0]
   39484:	2b67      	cmp	r3, #103	@ 0x67
   39486:	d107      	bne.n	39498 <d_print_comp_inner+0x1c40>
   39488:	787a      	ldrb	r2, [r7, #1]
   3948a:	2a73      	cmp	r2, #115	@ 0x73
   3948c:	d104      	bne.n	39498 <d_print_comp_inner+0x1c40>
   3948e:	78ba      	ldrb	r2, [r7, #2]
   39490:	b912      	cbnz	r2, 39498 <d_print_comp_inner+0x1c40>
   39492:	462a      	mov	r2, r5
   39494:	f7fe ba87 	b.w	379a6 <d_print_comp_inner+0x14e>
   39498:	2b73      	cmp	r3, #115	@ 0x73
   3949a:	f47f a922 	bne.w	386e2 <d_print_comp_inner+0xe8a>
   3949e:	787b      	ldrb	r3, [r7, #1]
   394a0:	2b74      	cmp	r3, #116	@ 0x74
   394a2:	f47f a91e 	bne.w	386e2 <d_print_comp_inner+0xe8a>
   394a6:	78bb      	ldrb	r3, [r7, #2]
   394a8:	2b00      	cmp	r3, #0
   394aa:	f47f a91a 	bne.w	386e2 <d_print_comp_inner+0xe8a>
   394ae:	2128      	movs	r1, #40	@ 0x28
   394b0:	4620      	mov	r0, r4
   394b2:	f7fb ff15 	bl	352e0 <d_append_char>
   394b6:	2111      	movs	r1, #17
   394b8:	462a      	mov	r2, r5
   394ba:	4620      	mov	r0, r4
   394bc:	f000 fc9a 	bl	39df4 <d_print_comp>
   394c0:	2129      	movs	r1, #41	@ 0x29
   394c2:	f7ff ba24 	b.w	3890e <d_print_comp_inner+0x10b6>
   394c6:	2120      	movs	r1, #32
   394c8:	4620      	mov	r0, r4
   394ca:	f7fb ff09 	bl	352e0 <d_append_char>
   394ce:	f8d9 5004 	ldr.w	r5, [r9, #4]
   394d2:	e526      	b.n	38f22 <d_print_comp_inner+0x16ca>
   394d4:	465a      	mov	r2, fp
   394d6:	2111      	movs	r1, #17
   394d8:	4620      	mov	r0, r4
   394da:	f000 fcb9 	bl	39e50 <d_print_mod>
   394de:	f7fe ba9b 	b.w	37a18 <d_print_comp_inner+0x1c0>
   394e2:	68c2      	ldr	r2, [r0, #12]
   394e4:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
   394e8:	4683      	mov	fp, r0
   394ea:	f7fe bb05 	b.w	37af8 <d_print_comp_inner+0x2a0>
   394ee:	2301      	movs	r3, #1
   394f0:	e9c4 e345 	strd	lr, r3, [r4, #276]	@ 0x114
   394f4:	f7fe ba3d 	b.w	37972 <d_print_comp_inner+0x11a>
   394f8:	2128      	movs	r1, #40	@ 0x28
   394fa:	f7fb fef1 	bl	352e0 <d_append_char>
   394fe:	4620      	mov	r0, r4
   39500:	68f2      	ldr	r2, [r6, #12]
   39502:	2111      	movs	r1, #17
   39504:	f000 fc76 	bl	39df4 <d_print_comp>
   39508:	2129      	movs	r1, #41	@ 0x29
   3950a:	4620      	mov	r0, r4
   3950c:	f7fb fee8 	bl	352e0 <d_append_char>
   39510:	f7ff b8e7 	b.w	386e2 <d_print_comp_inner+0xe8a>
   39514:	4bdc      	ldr	r3, [pc, #880]	@ (39888 <d_print_comp_inner+0x2030>)
   39516:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
   3951a:	4628      	mov	r0, r5
   3951c:	f7df f8d0 	bl	186c0 <strlen>
   39520:	2800      	cmp	r0, #0
   39522:	f43f af15 	beq.w	39350 <d_print_comp_inner+0x1af8>
   39526:	3d01      	subs	r5, #1
   39528:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3952c:	182f      	adds	r7, r5, r0
   3952e:	f04f 0900 	mov.w	r9, #0
   39532:	e009      	b.n	39548 <d_print_comp_inner+0x1cf0>
   39534:	460b      	mov	r3, r1
   39536:	3101      	adds	r1, #1
   39538:	42af      	cmp	r7, r5
   3953a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3953e:	54e6      	strb	r6, [r4, r3]
   39540:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   39544:	f43f af04 	beq.w	39350 <d_print_comp_inner+0x1af8>
   39548:	29ff      	cmp	r1, #255	@ 0xff
   3954a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3954e:	d1f1      	bne.n	39534 <d_print_comp_inner+0x1cdc>
   39550:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39554:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39558:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3955c:	4620      	mov	r0, r4
   3955e:	4798      	blx	r3
   39560:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   39564:	2101      	movs	r1, #1
   39566:	440a      	add	r2, r1
   39568:	2300      	movs	r3, #0
   3956a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3956e:	e7e3      	b.n	39538 <d_print_comp_inner+0x1ce0>
   39570:	2f07      	cmp	r7, #7
   39572:	f47e aa66 	bne.w	37a42 <d_print_comp_inner+0x1ea>
   39576:	f8db 3010 	ldr.w	r3, [fp, #16]
   3957a:	7819      	ldrb	r1, [r3, #0]
   3957c:	2900      	cmp	r1, #0
   3957e:	f47e aa60 	bne.w	37a42 <d_print_comp_inner+0x1ea>
   39582:	6919      	ldr	r1, [r3, #16]
   39584:	2901      	cmp	r1, #1
   39586:	f47e aa5c 	bne.w	37a42 <d_print_comp_inner+0x1ea>
   3958a:	2e3d      	cmp	r6, #61	@ 0x3d
   3958c:	f47e aa59 	bne.w	37a42 <d_print_comp_inner+0x1ea>
   39590:	68db      	ldr	r3, [r3, #12]
   39592:	781b      	ldrb	r3, [r3, #0]
   39594:	2b30      	cmp	r3, #48	@ 0x30
   39596:	f000 841f 	beq.w	39dd8 <d_print_comp_inner+0x2580>
   3959a:	2b31      	cmp	r3, #49	@ 0x31
   3959c:	f47e aa51 	bne.w	37a42 <d_print_comp_inner+0x1ea>
   395a0:	49ba      	ldr	r1, [pc, #744]	@ (3988c <d_print_comp_inner+0x2034>)
   395a2:	f7fe be0f 	b.w	381c4 <d_print_comp_inner+0x96c>
   395a6:	4659      	mov	r1, fp
   395a8:	f7fb febc 	bl	35324 <d_lookup_template_argument>
   395ac:	4602      	mov	r2, r0
   395ae:	2800      	cmp	r0, #0
   395b0:	f43e a9dc 	beq.w	3796c <d_print_comp_inner+0x114>
   395b4:	7803      	ldrb	r3, [r0, #0]
   395b6:	2b2f      	cmp	r3, #47	@ 0x2f
   395b8:	d109      	bne.n	395ce <d_print_comp_inner+0x1d76>
   395ba:	f8d4 1124 	ldr.w	r1, [r4, #292]	@ 0x124
   395be:	2900      	cmp	r1, #0
   395c0:	db05      	blt.n	395ce <d_print_comp_inner+0x1d76>
   395c2:	f7fb fe17 	bl	351f4 <d_index_template_argument.part.0>
   395c6:	4602      	mov	r2, r0
   395c8:	2800      	cmp	r0, #0
   395ca:	f43e a9cf 	beq.w	3796c <d_print_comp_inner+0x114>
   395ce:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
   395d2:	682b      	ldr	r3, [r5, #0]
   395d4:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   395d8:	2111      	movs	r1, #17
   395da:	4620      	mov	r0, r4
   395dc:	f000 fc0a 	bl	39df4 <d_print_comp>
   395e0:	f8c4 5110 	str.w	r5, [r4, #272]	@ 0x110
   395e4:	f7fe b9c5 	b.w	37972 <d_print_comp_inner+0x11a>
   395e8:	f8db 200c 	ldr.w	r2, [fp, #12]
   395ec:	49a8      	ldr	r1, [pc, #672]	@ (39890 <d_print_comp_inner+0x2038>)
   395ee:	3201      	adds	r2, #1
   395f0:	a806      	add	r0, sp, #24
   395f2:	f002 f915 	bl	3b820 <sprintf>
   395f6:	a806      	add	r0, sp, #24
   395f8:	f7df f862 	bl	186c0 <strlen>
   395fc:	4607      	mov	r7, r0
   395fe:	2800      	cmp	r0, #0
   39600:	f43e a9b7 	beq.w	37972 <d_print_comp_inner+0x11a>
   39604:	ad06      	add	r5, sp, #24
   39606:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3960a:	442f      	add	r7, r5
   3960c:	f04f 0800 	mov.w	r8, #0
   39610:	e009      	b.n	39626 <d_print_comp_inner+0x1dce>
   39612:	460b      	mov	r3, r1
   39614:	3101      	adds	r1, #1
   39616:	42af      	cmp	r7, r5
   39618:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3961c:	54e6      	strb	r6, [r4, r3]
   3961e:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   39622:	f43e a9a6 	beq.w	37972 <d_print_comp_inner+0x11a>
   39626:	29ff      	cmp	r1, #255	@ 0xff
   39628:	f815 6b01 	ldrb.w	r6, [r5], #1
   3962c:	d1f1      	bne.n	39612 <d_print_comp_inner+0x1dba>
   3962e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39632:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39636:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3963a:	4620      	mov	r0, r4
   3963c:	4798      	blx	r3
   3963e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   39642:	2101      	movs	r1, #1
   39644:	440a      	add	r2, r1
   39646:	2300      	movs	r3, #0
   39648:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3964c:	e7e3      	b.n	39616 <d_print_comp_inner+0x1dbe>
   3964e:	2600      	movs	r6, #0
   39650:	5466      	strb	r6, [r4, r1]
   39652:	4620      	mov	r0, r4
   39654:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   39658:	4798      	blx	r3
   3965a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3965e:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
   39662:	3301      	adds	r3, #1
   39664:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   39668:	f7fe ba60 	b.w	37b2c <d_print_comp_inner+0x2d4>
   3966c:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
   39670:	464f      	mov	r7, r9
   39672:	68c2      	ldr	r2, [r0, #12]
   39674:	4683      	mov	fp, r0
   39676:	f7fe ba3f 	b.w	37af8 <d_print_comp_inner+0x2a0>
   3967a:	2600      	movs	r6, #0
   3967c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
   39680:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
   39684:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   39688:	4798      	blx	r3
   3968a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3968e:	2201      	movs	r2, #1
   39690:	4413      	add	r3, r2
   39692:	4631      	mov	r1, r6
   39694:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   39698:	f7fe be04 	b.w	382a4 <d_print_comp_inner+0xa4c>
   3969c:	2600      	movs	r6, #0
   3969e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   396a2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   396a6:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   396aa:	4620      	mov	r0, r4
   396ac:	4798      	blx	r3
   396ae:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   396b2:	2201      	movs	r2, #1
   396b4:	4413      	add	r3, r2
   396b6:	4631      	mov	r1, r6
   396b8:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   396bc:	f7fe bd76 	b.w	381ac <d_print_comp_inner+0x954>
   396c0:	f8d8 8010 	ldr.w	r8, [r8, #16]
   396c4:	f898 3000 	ldrb.w	r3, [r8]
   396c8:	2b48      	cmp	r3, #72	@ 0x48
   396ca:	f000 8278 	beq.w	39bbe <d_print_comp_inner+0x2366>
   396ce:	eb06 1c0c 	add.w	ip, r6, ip, lsl #4
   396d2:	468a      	mov	sl, r1
   396d4:	4665      	mov	r5, ip
   396d6:	f898 3000 	ldrb.w	r3, [r8]
   396da:	2b4e      	cmp	r3, #78	@ 0x4e
   396dc:	f1a3 011c 	sub.w	r1, r3, #28
   396e0:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
   396e4:	d007      	beq.n	396f6 <d_print_comp_inner+0x1e9e>
   396e6:	d804      	bhi.n	396f2 <d_print_comp_inner+0x1e9a>
   396e8:	2904      	cmp	r1, #4
   396ea:	d904      	bls.n	396f6 <d_print_comp_inner+0x1e9e>
   396ec:	4651      	mov	r1, sl
   396ee:	f7fe beea 	b.w	384c6 <d_print_comp_inner+0xc6e>
   396f2:	2a01      	cmp	r2, #1
   396f4:	d8fa      	bhi.n	396ec <d_print_comp_inner+0x1e94>
   396f6:	2f04      	cmp	r7, #4
   396f8:	46ae      	mov	lr, r5
   396fa:	f43e a937 	beq.w	3796c <d_print_comp_inner+0x114>
   396fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   39702:	f105 0c10 	add.w	ip, r5, #16
   39706:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   3970a:	2300      	movs	r3, #0
   3970c:	612d      	str	r5, [r5, #16]
   3970e:	e9ce 8301 	strd	r8, r3, [lr, #4]
   39712:	f8d8 800c 	ldr.w	r8, [r8, #12]
   39716:	f8ce a00c 	str.w	sl, [lr, #12]
   3971a:	3701      	adds	r7, #1
   3971c:	4665      	mov	r5, ip
   3971e:	f8c4 c114 	str.w	ip, [r4, #276]	@ 0x114
   39722:	f1b8 0f00 	cmp.w	r8, #0
   39726:	d1d6      	bne.n	396d6 <d_print_comp_inner+0x1e7e>
   39728:	f7fe b920 	b.w	3796c <d_print_comp_inner+0x114>
   3972c:	2600      	movs	r6, #0
   3972e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39732:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39736:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3973a:	4620      	mov	r0, r4
   3973c:	4798      	blx	r3
   3973e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   39742:	2201      	movs	r2, #1
   39744:	4413      	add	r3, r2
   39746:	4631      	mov	r1, r6
   39748:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3974c:	f7ff b8ef 	b.w	3892e <d_print_comp_inner+0x10d6>
   39750:	2600      	movs	r6, #0
   39752:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
   39756:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
   3975a:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   3975e:	4798      	blx	r3
   39760:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   39764:	2201      	movs	r2, #1
   39766:	4413      	add	r3, r2
   39768:	4631      	mov	r1, r6
   3976a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3976e:	f7fe bcb8 	b.w	380e2 <d_print_comp_inner+0x88a>
   39772:	4948      	ldr	r1, [pc, #288]	@ (39894 <d_print_comp_inner+0x203c>)
   39774:	4620      	mov	r0, r4
   39776:	f7fb fe37 	bl	353e8 <d_append_string>
   3977a:	68ff      	ldr	r7, [r7, #12]
   3977c:	463a      	mov	r2, r7
   3977e:	f7fe b912 	b.w	379a6 <d_print_comp_inner+0x14e>
   39782:	2500      	movs	r5, #0
   39784:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   39788:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3978c:	4620      	mov	r0, r4
   3978e:	4798      	blx	r3
   39790:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   39794:	2201      	movs	r2, #1
   39796:	4413      	add	r3, r2
   39798:	4629      	mov	r1, r5
   3979a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3979e:	f7fe bda1 	b.w	382e4 <d_print_comp_inner+0xa8c>
   397a2:	2600      	movs	r6, #0
   397a4:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
   397a8:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
   397ac:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   397b0:	4798      	blx	r3
   397b2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   397b6:	2201      	movs	r2, #1
   397b8:	4413      	add	r3, r2
   397ba:	4631      	mov	r1, r6
   397bc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   397c0:	f7ff b8de 	b.w	38980 <d_print_comp_inner+0x1128>
   397c4:	f04f 0800 	mov.w	r8, #0
   397c8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   397cc:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   397d0:	4620      	mov	r0, r4
   397d2:	4798      	blx	r3
   397d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   397d8:	3301      	adds	r3, #1
   397da:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   397de:	4641      	mov	r1, r8
   397e0:	2301      	movs	r3, #1
   397e2:	f7ff bbe9 	b.w	38fb8 <d_print_comp_inner+0x1760>
   397e6:	2600      	movs	r6, #0
   397e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   397ec:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   397f0:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   397f4:	4620      	mov	r0, r4
   397f6:	4798      	blx	r3
   397f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   397fc:	2201      	movs	r2, #1
   397fe:	4413      	add	r3, r2
   39800:	4631      	mov	r1, r6
   39802:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   39806:	f7fe bec1 	b.w	3858c <d_print_comp_inner+0xd34>
   3980a:	2500      	movs	r5, #0
   3980c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   39810:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   39814:	4620      	mov	r0, r4
   39816:	4798      	blx	r3
   39818:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3981c:	3301      	adds	r3, #1
   3981e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   39822:	4629      	mov	r1, r5
   39824:	2301      	movs	r3, #1
   39826:	f7fe be14 	b.w	38452 <d_print_comp_inner+0xbfa>
   3982a:	2120      	movs	r1, #32
   3982c:	4620      	mov	r0, r4
   3982e:	f7fb fd57 	bl	352e0 <d_append_char>
   39832:	f7fe be08 	b.w	38446 <d_print_comp_inner+0xbee>
   39836:	2600      	movs	r6, #0
   39838:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3983c:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   39840:	4620      	mov	r0, r4
   39842:	4798      	blx	r3
   39844:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   39848:	3301      	adds	r3, #1
   3984a:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3984e:	4631      	mov	r1, r6
   39850:	2301      	movs	r3, #1
   39852:	f7fe bde7 	b.w	38424 <d_print_comp_inner+0xbcc>
   39856:	2120      	movs	r1, #32
   39858:	4620      	mov	r0, r4
   3985a:	f7fb fd41 	bl	352e0 <d_append_char>
   3985e:	f7fe bddb 	b.w	38418 <d_print_comp_inner+0xbc0>
   39862:	215b      	movs	r1, #91	@ 0x5b
   39864:	4620      	mov	r0, r4
   39866:	f7fb fd3b 	bl	352e0 <d_append_char>
   3986a:	2111      	movs	r1, #17
   3986c:	f8db 2010 	ldr.w	r2, [fp, #16]
   39870:	4620      	mov	r0, r4
   39872:	f000 fabf 	bl	39df4 <d_print_comp>
   39876:	215d      	movs	r1, #93	@ 0x5d
   39878:	f7ff b849 	b.w	3890e <d_print_comp_inner+0x10b6>
   3987c:	212d      	movs	r1, #45	@ 0x2d
   3987e:	4620      	mov	r0, r4
   39880:	f7fb fd2e 	bl	352e0 <d_append_char>
   39884:	f7fe b8fe 	b.w	37a84 <d_print_comp_inner+0x22c>
   39888:	00047ff0 	.word	0x00047ff0
   3988c:	000401c0 	.word	0x000401c0
   39890:	0003ff64 	.word	0x0003ff64
   39894:	0003ffec 	.word	0x0003ffec
   39898:	2600      	movs	r6, #0
   3989a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3989e:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   398a2:	4620      	mov	r0, r4
   398a4:	4798      	blx	r3
   398a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   398aa:	3301      	adds	r3, #1
   398ac:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   398b0:	4631      	mov	r1, r6
   398b2:	2301      	movs	r3, #1
   398b4:	f7fe b8db 	b.w	37a6e <d_print_comp_inner+0x216>
   398b8:	2600      	movs	r6, #0
   398ba:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   398be:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   398c2:	4620      	mov	r0, r4
   398c4:	4798      	blx	r3
   398c6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   398ca:	f8db 200c 	ldr.w	r2, [fp, #12]
   398ce:	3301      	adds	r3, #1
   398d0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   398d4:	4631      	mov	r1, r6
   398d6:	2301      	movs	r3, #1
   398d8:	f7fe b8b9 	b.w	37a4e <d_print_comp_inner+0x1f6>
   398dc:	781b      	ldrb	r3, [r3, #0]
   398de:	f1a3 0172 	sub.w	r1, r3, #114	@ 0x72
   398e2:	2901      	cmp	r1, #1
   398e4:	d903      	bls.n	398ee <d_print_comp_inner+0x2096>
   398e6:	3b63      	subs	r3, #99	@ 0x63
   398e8:	2b01      	cmp	r3, #1
   398ea:	f63e afbf 	bhi.w	3886c <d_print_comp_inner+0x1014>
   398ee:	2111      	movs	r1, #17
   398f0:	4620      	mov	r0, r4
   398f2:	f001 f8a1 	bl	3aa38 <d_print_expr_op>
   398f6:	213c      	movs	r1, #60	@ 0x3c
   398f8:	4620      	mov	r0, r4
   398fa:	f7fb fcf1 	bl	352e0 <d_append_char>
   398fe:	f8db 3010 	ldr.w	r3, [fp, #16]
   39902:	2111      	movs	r1, #17
   39904:	68da      	ldr	r2, [r3, #12]
   39906:	4620      	mov	r0, r4
   39908:	f000 fa74 	bl	39df4 <d_print_comp>
   3990c:	49bf      	ldr	r1, [pc, #764]	@ (39c0c <d_print_comp_inner+0x23b4>)
   3990e:	4620      	mov	r0, r4
   39910:	f7fb fd6a 	bl	353e8 <d_append_string>
   39914:	f8db 3010 	ldr.w	r3, [fp, #16]
   39918:	2111      	movs	r1, #17
   3991a:	691a      	ldr	r2, [r3, #16]
   3991c:	4620      	mov	r0, r4
   3991e:	f000 fa69 	bl	39df4 <d_print_comp>
   39922:	2129      	movs	r1, #41	@ 0x29
   39924:	f7fe bff3 	b.w	3890e <d_print_comp_inner+0x10b6>
   39928:	f8d0 7134 	ldr.w	r7, [r0, #308]	@ 0x134
   3992c:	2f00      	cmp	r7, #0
   3992e:	f340 81de 	ble.w	39cee <d_print_comp_inner+0x2496>
   39932:	f8d0 c130 	ldr.w	ip, [r0, #304]	@ 0x130
   39936:	464b      	mov	r3, r9
   39938:	4660      	mov	r0, ip
   3993a:	e004      	b.n	39946 <d_print_comp_inner+0x20ee>
   3993c:	429f      	cmp	r7, r3
   3993e:	f100 0008 	add.w	r0, r0, #8
   39942:	f000 81d4 	beq.w	39cee <d_print_comp_inner+0x2496>
   39946:	f85c 1033 	ldr.w	r1, [ip, r3, lsl #3]
   3994a:	428a      	cmp	r2, r1
   3994c:	f103 0301 	add.w	r3, r3, #1
   39950:	d1f4      	bne.n	3993c <d_print_comp_inner+0x20e4>
   39952:	2800      	cmp	r0, #0
   39954:	f000 81cb 	beq.w	39cee <d_print_comp_inner+0x2496>
   39958:	f8d4 712c 	ldr.w	r7, [r4, #300]	@ 0x12c
   3995c:	2f00      	cmp	r7, #0
   3995e:	f000 8136 	beq.w	39bce <d_print_comp_inner+0x2376>
   39962:	463b      	mov	r3, r7
   39964:	e003      	b.n	3996e <d_print_comp_inner+0x2116>
   39966:	685b      	ldr	r3, [r3, #4]
   39968:	2b00      	cmp	r3, #0
   3996a:	f000 8130 	beq.w	39bce <d_print_comp_inner+0x2376>
   3996e:	6819      	ldr	r1, [r3, #0]
   39970:	4291      	cmp	r1, r2
   39972:	d003      	beq.n	3997c <d_print_comp_inner+0x2124>
   39974:	4559      	cmp	r1, fp
   39976:	d1f6      	bne.n	39966 <d_print_comp_inner+0x210e>
   39978:	429f      	cmp	r7, r3
   3997a:	d0f4      	beq.n	39966 <d_print_comp_inner+0x210e>
   3997c:	4611      	mov	r1, r2
   3997e:	4620      	mov	r0, r4
   39980:	9200      	str	r2, [sp, #0]
   39982:	f7fb fccf 	bl	35324 <d_lookup_template_argument>
   39986:	9a00      	ldr	r2, [sp, #0]
   39988:	2800      	cmp	r0, #0
   3998a:	f43d afef 	beq.w	3796c <d_print_comp_inner+0x114>
   3998e:	7803      	ldrb	r3, [r0, #0]
   39990:	2b2f      	cmp	r3, #47	@ 0x2f
   39992:	f000 8164 	beq.w	39c5e <d_print_comp_inner+0x2406>
   39996:	464f      	mov	r7, r9
   39998:	f7fe b8a3 	b.w	37ae2 <d_print_comp_inner+0x28a>
   3999c:	2700      	movs	r7, #0
   3999e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   399a2:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
   399a6:	4620      	mov	r0, r4
   399a8:	4798      	blx	r3
   399aa:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   399ae:	3301      	adds	r3, #1
   399b0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   399b4:	4639      	mov	r1, r7
   399b6:	2301      	movs	r3, #1
   399b8:	f7fe b881 	b.w	37abe <d_print_comp_inner+0x266>
   399bc:	213c      	movs	r1, #60	@ 0x3c
   399be:	4620      	mov	r0, r4
   399c0:	9705      	str	r7, [sp, #20]
   399c2:	f7fb fc8d 	bl	352e0 <d_append_char>
   399c6:	f8d7 a00c 	ldr.w	sl, [r7, #12]
   399ca:	ae06      	add	r6, sp, #24
   399cc:	f1ba 0f00 	cmp.w	sl, #0
   399d0:	d063      	beq.n	39a9a <d_print_comp_inner+0x2242>
   399d2:	e9cd 7501 	strd	r7, r5, [sp, #4]
   399d6:	4633      	mov	r3, r6
   399d8:	f8cd b00c 	str.w	fp, [sp, #12]
   399dc:	4656      	mov	r6, sl
   399de:	469a      	mov	sl, r3
   399e0:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
   399e4:	1c5a      	adds	r2, r3, #1
   399e6:	f8c4 2120 	str.w	r2, [r4, #288]	@ 0x120
   399ea:	2b00      	cmp	r3, #0
   399ec:	f040 808b 	bne.w	39b06 <d_print_comp_inner+0x22ae>
   399f0:	4632      	mov	r2, r6
   399f2:	2111      	movs	r1, #17
   399f4:	4620      	mov	r0, r4
   399f6:	f000 f9fd 	bl	39df4 <d_print_comp>
   399fa:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   399fe:	2bff      	cmp	r3, #255	@ 0xff
   39a00:	f000 8086 	beq.w	39b10 <d_print_comp_inner+0x22b8>
   39a04:	1c59      	adds	r1, r3, #1
   39a06:	2220      	movs	r2, #32
   39a08:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39a0c:	54e2      	strb	r2, [r4, r3]
   39a0e:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   39a12:	7833      	ldrb	r3, [r6, #0]
   39a14:	f8d4 2120 	ldr.w	r2, [r4, #288]	@ 0x120
   39a18:	9100      	str	r1, [sp, #0]
   39a1a:	2b5b      	cmp	r3, #91	@ 0x5b
   39a1c:	bf04      	itt	eq
   39a1e:	68f6      	ldreq	r6, [r6, #12]
   39a20:	7833      	ldrbeq	r3, [r6, #0]
   39a22:	3b58      	subs	r3, #88	@ 0x58
   39a24:	2b02      	cmp	r3, #2
   39a26:	f102 38ff 	add.w	r8, r2, #4294967295	@ 0xffffffff
   39a2a:	d942      	bls.n	39ab2 <d_print_comp_inner+0x225a>
   39a2c:	2301      	movs	r3, #1
   39a2e:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
   39a32:	4977      	ldr	r1, [pc, #476]	@ (39c10 <d_print_comp_inner+0x23b8>)
   39a34:	4642      	mov	r2, r8
   39a36:	4650      	mov	r0, sl
   39a38:	f001 fef2 	bl	3b820 <sprintf>
   39a3c:	4650      	mov	r0, sl
   39a3e:	f7de fe3f 	bl	186c0 <strlen>
   39a42:	b310      	cbz	r0, 39a8a <d_print_comp_inner+0x2232>
   39a44:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   39a48:	eb0a 0800 	add.w	r8, sl, r0
   39a4c:	4655      	mov	r5, sl
   39a4e:	e008      	b.n	39a62 <d_print_comp_inner+0x220a>
   39a50:	460a      	mov	r2, r1
   39a52:	3101      	adds	r1, #1
   39a54:	45a8      	cmp	r8, r5
   39a56:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39a5a:	54a7      	strb	r7, [r4, r2]
   39a5c:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
   39a60:	d013      	beq.n	39a8a <d_print_comp_inner+0x2232>
   39a62:	29ff      	cmp	r1, #255	@ 0xff
   39a64:	f815 7b01 	ldrb.w	r7, [r5], #1
   39a68:	d1f2      	bne.n	39a50 <d_print_comp_inner+0x21f8>
   39a6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39a6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39a72:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   39a76:	4620      	mov	r0, r4
   39a78:	4798      	blx	r3
   39a7a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   39a7e:	2101      	movs	r1, #1
   39a80:	440b      	add	r3, r1
   39a82:	2200      	movs	r2, #0
   39a84:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   39a88:	e7e4      	b.n	39a54 <d_print_comp_inner+0x21fc>
   39a8a:	6936      	ldr	r6, [r6, #16]
   39a8c:	2e00      	cmp	r6, #0
   39a8e:	d1a7      	bne.n	399e0 <d_print_comp_inner+0x2188>
   39a90:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   39a94:	f8dd b00c 	ldr.w	fp, [sp, #12]
   39a98:	4656      	mov	r6, sl
   39a9a:	213e      	movs	r1, #62	@ 0x3e
   39a9c:	4620      	mov	r0, r4
   39a9e:	f7fb fc1f 	bl	352e0 <d_append_char>
   39aa2:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
   39aa6:	693f      	ldr	r7, [r7, #16]
   39aa8:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   39aac:	3301      	adds	r3, #1
   39aae:	f7ff ba7d 	b.w	38fac <d_print_comp_inner+0x1754>
   39ab2:	4a58      	ldr	r2, [pc, #352]	@ (39c14 <d_print_comp_inner+0x23bc>)
   39ab4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   39ab8:	4628      	mov	r0, r5
   39aba:	f7de fe01 	bl	186c0 <strlen>
   39abe:	9900      	ldr	r1, [sp, #0]
   39ac0:	2800      	cmp	r0, #0
   39ac2:	d0b6      	beq.n	39a32 <d_print_comp_inner+0x21da>
   39ac4:	3d01      	subs	r5, #1
   39ac6:	eb05 0b00 	add.w	fp, r5, r0
   39aca:	e008      	b.n	39ade <d_print_comp_inner+0x2286>
   39acc:	460a      	mov	r2, r1
   39ace:	3101      	adds	r1, #1
   39ad0:	455d      	cmp	r5, fp
   39ad2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39ad6:	54a7      	strb	r7, [r4, r2]
   39ad8:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
   39adc:	d0a9      	beq.n	39a32 <d_print_comp_inner+0x21da>
   39ade:	29ff      	cmp	r1, #255	@ 0xff
   39ae0:	f815 7f01 	ldrb.w	r7, [r5, #1]!
   39ae4:	d1f2      	bne.n	39acc <d_print_comp_inner+0x2274>
   39ae6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39aea:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39aee:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   39af2:	4620      	mov	r0, r4
   39af4:	4798      	blx	r3
   39af6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   39afa:	2101      	movs	r1, #1
   39afc:	440b      	add	r3, r1
   39afe:	2200      	movs	r2, #0
   39b00:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   39b04:	e7e4      	b.n	39ad0 <d_print_comp_inner+0x2278>
   39b06:	4944      	ldr	r1, [pc, #272]	@ (39c18 <d_print_comp_inner+0x23c0>)
   39b08:	4620      	mov	r0, r4
   39b0a:	f7fb fc6d 	bl	353e8 <d_append_string>
   39b0e:	e76f      	b.n	399f0 <d_print_comp_inner+0x2198>
   39b10:	4619      	mov	r1, r3
   39b12:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   39b16:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   39b1a:	4620      	mov	r0, r4
   39b1c:	4798      	blx	r3
   39b1e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   39b22:	2101      	movs	r1, #1
   39b24:	440a      	add	r2, r1
   39b26:	2300      	movs	r3, #0
   39b28:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   39b2c:	e76b      	b.n	39a06 <d_print_comp_inner+0x21ae>
   39b2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39b32:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
   39b36:	4619      	mov	r1, r3
   39b38:	4620      	mov	r0, r4
   39b3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39b3e:	4798      	blx	r3
   39b40:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   39b44:	3201      	adds	r2, #1
   39b46:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   39b4a:	463b      	mov	r3, r7
   39b4c:	2201      	movs	r2, #1
   39b4e:	f7ff bb45 	b.w	391dc <d_print_comp_inner+0x1984>
   39b52:	2b73      	cmp	r3, #115	@ 0x73
   39b54:	f47f ac90 	bne.w	39478 <d_print_comp_inner+0x1c20>
   39b58:	787b      	ldrb	r3, [r7, #1]
   39b5a:	2b50      	cmp	r3, #80	@ 0x50
   39b5c:	f47f ac8c 	bne.w	39478 <d_print_comp_inner+0x1c20>
   39b60:	78bb      	ldrb	r3, [r7, #2]
   39b62:	2b00      	cmp	r3, #0
   39b64:	f47f ac88 	bne.w	39478 <d_print_comp_inner+0x1c20>
   39b68:	461e      	mov	r6, r3
   39b6a:	e003      	b.n	39b74 <d_print_comp_inner+0x231c>
   39b6c:	3601      	adds	r6, #1
   39b6e:	692d      	ldr	r5, [r5, #16]
   39b70:	2d00      	cmp	r5, #0
   39b72:	d048      	beq.n	39c06 <d_print_comp_inner+0x23ae>
   39b74:	782b      	ldrb	r3, [r5, #0]
   39b76:	2b2f      	cmp	r3, #47	@ 0x2f
   39b78:	d145      	bne.n	39c06 <d_print_comp_inner+0x23ae>
   39b7a:	68eb      	ldr	r3, [r5, #12]
   39b7c:	2b00      	cmp	r3, #0
   39b7e:	d042      	beq.n	39c06 <d_print_comp_inner+0x23ae>
   39b80:	781a      	ldrb	r2, [r3, #0]
   39b82:	2a4c      	cmp	r2, #76	@ 0x4c
   39b84:	d1f2      	bne.n	39b6c <d_print_comp_inner+0x2314>
   39b86:	68d9      	ldr	r1, [r3, #12]
   39b88:	4620      	mov	r0, r4
   39b8a:	f7fb fbe5 	bl	35358 <d_find_pack>
   39b8e:	4602      	mov	r2, r0
   39b90:	b148      	cbz	r0, 39ba6 <d_print_comp_inner+0x234e>
   39b92:	2200      	movs	r2, #0
   39b94:	e004      	b.n	39ba0 <d_print_comp_inner+0x2348>
   39b96:	68c1      	ldr	r1, [r0, #12]
   39b98:	b129      	cbz	r1, 39ba6 <d_print_comp_inner+0x234e>
   39b9a:	6900      	ldr	r0, [r0, #16]
   39b9c:	3201      	adds	r2, #1
   39b9e:	b110      	cbz	r0, 39ba6 <d_print_comp_inner+0x234e>
   39ba0:	7801      	ldrb	r1, [r0, #0]
   39ba2:	292f      	cmp	r1, #47	@ 0x2f
   39ba4:	d0f7      	beq.n	39b96 <d_print_comp_inner+0x233e>
   39ba6:	4416      	add	r6, r2
   39ba8:	e7e1      	b.n	39b6e <d_print_comp_inner+0x2316>
   39baa:	2120      	movs	r1, #32
   39bac:	4620      	mov	r0, r4
   39bae:	f7fb fb97 	bl	352e0 <d_append_char>
   39bb2:	e41d      	b.n	393f0 <d_print_comp_inner+0x1b98>
   39bb4:	2120      	movs	r1, #32
   39bb6:	4620      	mov	r0, r4
   39bb8:	f7fb fb92 	bl	352e0 <d_append_char>
   39bbc:	e408      	b.n	393d0 <d_print_comp_inner+0x1b78>
   39bbe:	f8d8 800c 	ldr.w	r8, [r8, #12]
   39bc2:	f1b8 0f00 	cmp.w	r8, #0
   39bc6:	f47f ad82 	bne.w	396ce <d_print_comp_inner+0x1e76>
   39bca:	f7fd becf 	b.w	3796c <d_print_comp_inner+0x114>
   39bce:	6843      	ldr	r3, [r0, #4]
   39bd0:	f8d4 8110 	ldr.w	r8, [r4, #272]	@ 0x110
   39bd4:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   39bd8:	4611      	mov	r1, r2
   39bda:	4620      	mov	r0, r4
   39bdc:	9200      	str	r2, [sp, #0]
   39bde:	f7fb fba1 	bl	35324 <d_lookup_template_argument>
   39be2:	2800      	cmp	r0, #0
   39be4:	f000 80e4 	beq.w	39db0 <d_print_comp_inner+0x2558>
   39be8:	9a00      	ldr	r2, [sp, #0]
   39bea:	f04f 0901 	mov.w	r9, #1
   39bee:	e6ce      	b.n	3998e <d_print_comp_inner+0x2136>
   39bf0:	68ea      	ldr	r2, [r5, #12]
   39bf2:	7811      	ldrb	r1, [r2, #0]
   39bf4:	2901      	cmp	r1, #1
   39bf6:	f47f ac1d 	bne.w	39434 <d_print_comp_inner+0x1bdc>
   39bfa:	6929      	ldr	r1, [r5, #16]
   39bfc:	7809      	ldrb	r1, [r1, #0]
   39bfe:	2929      	cmp	r1, #41	@ 0x29
   39c00:	bf08      	it	eq
   39c02:	4615      	moveq	r5, r2
   39c04:	e416      	b.n	39434 <d_print_comp_inner+0x1bdc>
   39c06:	4631      	mov	r1, r6
   39c08:	e430      	b.n	3946c <d_print_comp_inner+0x1c14>
   39c0a:	bf00      	nop
   39c0c:	00040190 	.word	0x00040190
   39c10:	0003ff64 	.word	0x0003ff64
   39c14:	00047ff0 	.word	0x00047ff0
   39c18:	0003ffd4 	.word	0x0003ffd4
   39c1c:	2e3e      	cmp	r6, #62	@ 0x3e
   39c1e:	f000 80cb 	beq.w	39db8 <d_print_comp_inner+0x2560>
   39c22:	f8db 2010 	ldr.w	r2, [fp, #16]
   39c26:	2111      	movs	r1, #17
   39c28:	4620      	mov	r0, r4
   39c2a:	3f02      	subs	r7, #2
   39c2c:	f000 f8e2 	bl	39df4 <d_print_comp>
   39c30:	2f04      	cmp	r7, #4
   39c32:	f63d ae9e 	bhi.w	37972 <d_print_comp_inner+0x11a>
   39c36:	e8df f007 	tbb	[pc, r7]
   39c3a:	0c0f      	.short	0x0c0f
   39c3c:	0609      	.short	0x0609
   39c3e:	03          	.byte	0x03
   39c3f:	00          	.byte	0x00
   39c40:	4967      	ldr	r1, [pc, #412]	@ (39de0 <d_print_comp_inner+0x2588>)
   39c42:	f7fe babf 	b.w	381c4 <d_print_comp_inner+0x96c>
   39c46:	4967      	ldr	r1, [pc, #412]	@ (39de4 <d_print_comp_inner+0x258c>)
   39c48:	f7fe babc 	b.w	381c4 <d_print_comp_inner+0x96c>
   39c4c:	4966      	ldr	r1, [pc, #408]	@ (39de8 <d_print_comp_inner+0x2590>)
   39c4e:	f7fe bab9 	b.w	381c4 <d_print_comp_inner+0x96c>
   39c52:	216c      	movs	r1, #108	@ 0x6c
   39c54:	f7fe be5b 	b.w	3890e <d_print_comp_inner+0x10b6>
   39c58:	2175      	movs	r1, #117	@ 0x75
   39c5a:	f7fe be58 	b.w	3890e <d_print_comp_inner+0x10b6>
   39c5e:	f8d4 1124 	ldr.w	r1, [r4, #292]	@ 0x124
   39c62:	2900      	cmp	r1, #0
   39c64:	f2c0 80ac 	blt.w	39dc0 <d_print_comp_inner+0x2568>
   39c68:	f7fb fac4 	bl	351f4 <d_index_template_argument.part.0>
   39c6c:	2800      	cmp	r0, #0
   39c6e:	f000 809b 	beq.w	39da8 <d_print_comp_inner+0x2550>
   39c72:	7803      	ldrb	r3, [r0, #0]
   39c74:	464f      	mov	r7, r9
   39c76:	f7fd bf34 	b.w	37ae2 <d_print_comp_inner+0x28a>
   39c7a:	4620      	mov	r0, r4
   39c7c:	215b      	movs	r1, #91	@ 0x5b
   39c7e:	f7fb fb2f 	bl	352e0 <d_append_char>
   39c82:	f8db 3010 	ldr.w	r3, [fp, #16]
   39c86:	4620      	mov	r0, r4
   39c88:	691a      	ldr	r2, [r3, #16]
   39c8a:	2111      	movs	r1, #17
   39c8c:	f000 f8b2 	bl	39df4 <d_print_comp>
   39c90:	215d      	movs	r1, #93	@ 0x5d
   39c92:	4620      	mov	r0, r4
   39c94:	f7fb fb24 	bl	352e0 <d_append_char>
   39c98:	f7fe be28 	b.w	388ec <d_print_comp_inner+0x1094>
   39c9c:	68ea      	ldr	r2, [r5, #12]
   39c9e:	2111      	movs	r1, #17
   39ca0:	4620      	mov	r0, r4
   39ca2:	f001 f8c5 	bl	3ae30 <d_print_subexpr>
   39ca6:	4632      	mov	r2, r6
   39ca8:	f7fe bd24 	b.w	386f4 <d_print_comp_inner+0xe9c>
   39cac:	68da      	ldr	r2, [r3, #12]
   39cae:	6891      	ldr	r1, [r2, #8]
   39cb0:	2901      	cmp	r1, #1
   39cb2:	f47e adf1 	bne.w	38898 <d_print_comp_inner+0x1040>
   39cb6:	6852      	ldr	r2, [r2, #4]
   39cb8:	7812      	ldrb	r2, [r2, #0]
   39cba:	2a3e      	cmp	r2, #62	@ 0x3e
   39cbc:	f47e adec 	bne.w	38898 <d_print_comp_inner+0x1040>
   39cc0:	2128      	movs	r1, #40	@ 0x28
   39cc2:	4620      	mov	r0, r4
   39cc4:	f7fb fb0c 	bl	352e0 <d_append_char>
   39cc8:	f8db 300c 	ldr.w	r3, [fp, #12]
   39ccc:	f7fe bde4 	b.w	38898 <d_print_comp_inner+0x1040>
   39cd0:	68d2      	ldr	r2, [r2, #12]
   39cd2:	f7fd bf11 	b.w	37af8 <d_print_comp_inner+0x2a0>
   39cd6:	6912      	ldr	r2, [r2, #16]
   39cd8:	2111      	movs	r1, #17
   39cda:	f000 f88b 	bl	39df4 <d_print_comp>
   39cde:	9b08      	ldr	r3, [sp, #32]
   39ce0:	f8c4 9114 	str.w	r9, [r4, #276]	@ 0x114
   39ce4:	2b00      	cmp	r3, #0
   39ce6:	f43e acc0 	beq.w	3866a <d_print_comp_inner+0xe12>
   39cea:	f7fd be42 	b.w	37972 <d_print_comp_inner+0x11a>
   39cee:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
   39cf2:	429f      	cmp	r7, r3
   39cf4:	f6bd ae3a 	bge.w	3796c <d_print_comp_inner+0x114>
   39cf8:	f8d4 1130 	ldr.w	r1, [r4, #304]	@ 0x130
   39cfc:	f8d4 c110 	ldr.w	ip, [r4, #272]	@ 0x110
   39d00:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
   39d04:	1c78      	adds	r0, r7, #1
   39d06:	f8c4 0134 	str.w	r0, [r4, #308]	@ 0x134
   39d0a:	3304      	adds	r3, #4
   39d0c:	f841 2037 	str.w	r2, [r1, r7, lsl #3]
   39d10:	f1bc 0f00 	cmp.w	ip, #0
   39d14:	d05d      	beq.n	39dd2 <d_print_comp_inner+0x257a>
   39d16:	e9d4 7050 	ldrd	r7, r0, [r4, #320]	@ 0x140
   39d1a:	4696      	mov	lr, r2
   39d1c:	4665      	mov	r5, ip
   39d1e:	e00d      	b.n	39d3c <d_print_comp_inner+0x24e4>
   39d20:	f8d4 113c 	ldr.w	r1, [r4, #316]	@ 0x13c
   39d24:	686a      	ldr	r2, [r5, #4]
   39d26:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
   39d2a:	3701      	adds	r7, #1
   39d2c:	f8c4 7140 	str.w	r7, [r4, #320]	@ 0x140
   39d30:	604a      	str	r2, [r1, #4]
   39d32:	6019      	str	r1, [r3, #0]
   39d34:	682d      	ldr	r5, [r5, #0]
   39d36:	460b      	mov	r3, r1
   39d38:	2d00      	cmp	r5, #0
   39d3a:	d049      	beq.n	39dd0 <d_print_comp_inner+0x2578>
   39d3c:	42b8      	cmp	r0, r7
   39d3e:	dcef      	bgt.n	39d20 <d_print_comp_inner+0x24c8>
   39d40:	f7fd be14 	b.w	3796c <d_print_comp_inner+0x114>
   39d44:	4632      	mov	r2, r6
   39d46:	2111      	movs	r1, #17
   39d48:	4620      	mov	r0, r4
   39d4a:	f000 fe75 	bl	3aa38 <d_print_expr_op>
   39d4e:	f7fe bdc6 	b.w	388de <d_print_comp_inner+0x1086>
   39d52:	4926      	ldr	r1, [pc, #152]	@ (39dec <d_print_comp_inner+0x2594>)
   39d54:	4620      	mov	r0, r4
   39d56:	f7fb fb47 	bl	353e8 <d_append_string>
   39d5a:	68f3      	ldr	r3, [r6, #12]
   39d5c:	b143      	cbz	r3, 39d70 <d_print_comp_inner+0x2518>
   39d5e:	2111      	movs	r1, #17
   39d60:	4620      	mov	r0, r4
   39d62:	4632      	mov	r2, r6
   39d64:	f001 f864 	bl	3ae30 <d_print_subexpr>
   39d68:	2120      	movs	r1, #32
   39d6a:	4620      	mov	r0, r4
   39d6c:	f7fb fab8 	bl	352e0 <d_append_char>
   39d70:	463a      	mov	r2, r7
   39d72:	2111      	movs	r1, #17
   39d74:	4620      	mov	r0, r4
   39d76:	f000 f83d 	bl	39df4 <d_print_comp>
   39d7a:	2d00      	cmp	r5, #0
   39d7c:	f47e acb1 	bne.w	386e2 <d_print_comp_inner+0xe8a>
   39d80:	f7fd bdf7 	b.w	37972 <d_print_comp_inner+0x11a>
   39d84:	6913      	ldr	r3, [r2, #16]
   39d86:	68d2      	ldr	r2, [r2, #12]
   39d88:	781b      	ldrb	r3, [r3, #0]
   39d8a:	2b29      	cmp	r3, #41	@ 0x29
   39d8c:	bf1c      	itt	ne
   39d8e:	2301      	movne	r3, #1
   39d90:	f8c4 3118 	strne.w	r3, [r4, #280]	@ 0x118
   39d94:	2111      	movs	r1, #17
   39d96:	4620      	mov	r0, r4
   39d98:	f001 f84a 	bl	3ae30 <d_print_subexpr>
   39d9c:	f7fe bd8d 	b.w	388ba <d_print_comp_inner+0x1062>
   39da0:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   39da4:	f7fd bde2 	b.w	3796c <d_print_comp_inner+0x114>
   39da8:	f1b9 0f00 	cmp.w	r9, #0
   39dac:	f43d adde 	beq.w	3796c <d_print_comp_inner+0x114>
   39db0:	f8c4 8110 	str.w	r8, [r4, #272]	@ 0x110
   39db4:	f7fd bdda 	b.w	3796c <d_print_comp_inner+0x114>
   39db8:	212d      	movs	r1, #45	@ 0x2d
   39dba:	f7fb fa91 	bl	352e0 <d_append_char>
   39dbe:	e730      	b.n	39c22 <d_print_comp_inner+0x23ca>
   39dc0:	2e2f      	cmp	r6, #47	@ 0x2f
   39dc2:	f43f ac53 	beq.w	3966c <d_print_comp_inner+0x1e14>
   39dc6:	f8d4 c114 	ldr.w	ip, [r4, #276]	@ 0x114
   39dca:	464f      	mov	r7, r9
   39dcc:	f7fd be94 	b.w	37af8 <d_print_comp_inner+0x2a0>
   39dd0:	4672      	mov	r2, lr
   39dd2:	2100      	movs	r1, #0
   39dd4:	6019      	str	r1, [r3, #0]
   39dd6:	e5d1      	b.n	3997c <d_print_comp_inner+0x2124>
   39dd8:	4905      	ldr	r1, [pc, #20]	@ (39df0 <d_print_comp_inner+0x2598>)
   39dda:	f7fe b9f3 	b.w	381c4 <d_print_comp_inner+0x96c>
   39dde:	bf00      	nop
   39de0:	000401b4 	.word	0x000401b4
   39de4:	000401b0 	.word	0x000401b0
   39de8:	000401ac 	.word	0x000401ac
   39dec:	000401a4 	.word	0x000401a4
   39df0:	000401b8 	.word	0x000401b8

00039df4 <d_print_comp>:
   39df4:	b530      	push	{r4, r5, lr}
   39df6:	4605      	mov	r5, r0
   39df8:	b083      	sub	sp, #12
   39dfa:	b31a      	cbz	r2, 39e44 <d_print_comp+0x50>
   39dfc:	6853      	ldr	r3, [r2, #4]
   39dfe:	2b01      	cmp	r3, #1
   39e00:	4614      	mov	r4, r2
   39e02:	dc1f      	bgt.n	39e44 <d_print_comp+0x50>
   39e04:	f8d0 111c 	ldr.w	r1, [r0, #284]	@ 0x11c
   39e08:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
   39e0c:	dc1a      	bgt.n	39e44 <d_print_comp+0x50>
   39e0e:	3301      	adds	r3, #1
   39e10:	6053      	str	r3, [r2, #4]
   39e12:	3101      	adds	r1, #1
   39e14:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
   39e18:	f8c0 111c 	str.w	r1, [r0, #284]	@ 0x11c
   39e1c:	f8c0 d12c 	str.w	sp, [r0, #300]	@ 0x12c
   39e20:	2111      	movs	r1, #17
   39e22:	e9cd 2300 	strd	r2, r3, [sp]
   39e26:	f7fd fd17 	bl	37858 <d_print_comp_inner>
   39e2a:	6862      	ldr	r2, [r4, #4]
   39e2c:	f8d5 311c 	ldr.w	r3, [r5, #284]	@ 0x11c
   39e30:	9901      	ldr	r1, [sp, #4]
   39e32:	f8c5 112c 	str.w	r1, [r5, #300]	@ 0x12c
   39e36:	3a01      	subs	r2, #1
   39e38:	3b01      	subs	r3, #1
   39e3a:	6062      	str	r2, [r4, #4]
   39e3c:	f8c5 311c 	str.w	r3, [r5, #284]	@ 0x11c
   39e40:	b003      	add	sp, #12
   39e42:	bd30      	pop	{r4, r5, pc}
   39e44:	2301      	movs	r3, #1
   39e46:	f8c5 3118 	str.w	r3, [r5, #280]	@ 0x118
   39e4a:	b003      	add	sp, #12
   39e4c:	bd30      	pop	{r4, r5, pc}
   39e4e:	bf00      	nop

00039e50 <d_print_mod>:
   39e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39e54:	7813      	ldrb	r3, [r2, #0]
   39e56:	3b03      	subs	r3, #3
   39e58:	4615      	mov	r5, r2
   39e5a:	4604      	mov	r4, r0
   39e5c:	2b4e      	cmp	r3, #78	@ 0x4e
   39e5e:	d850      	bhi.n	39f02 <d_print_mod+0xb2>
   39e60:	e8df f013 	tbh	[pc, r3, lsl #1]
   39e64:	004f0118 	.word	0x004f0118
   39e68:	004f004f 	.word	0x004f004f
   39e6c:	004f004f 	.word	0x004f004f
   39e70:	004f004f 	.word	0x004f004f
   39e74:	004f004f 	.word	0x004f004f
   39e78:	004f004f 	.word	0x004f004f
   39e7c:	004f004f 	.word	0x004f004f
   39e80:	004f004f 	.word	0x004f004f
   39e84:	004f004f 	.word	0x004f004f
   39e88:	004f004f 	.word	0x004f004f
   39e8c:	004f004f 	.word	0x004f004f
   39e90:	007b0055 	.word	0x007b0055
   39e94:	005500a1 	.word	0x005500a1
   39e98:	00a1007b 	.word	0x00a1007b
   39e9c:	00f800eb 	.word	0x00f800eb
   39ea0:	027c0105 	.word	0x027c0105
   39ea4:	012c011e 	.word	0x012c011e
   39ea8:	01750150 	.word	0x01750150
   39eac:	004f004f 	.word	0x004f004f
   39eb0:	004f004f 	.word	0x004f004f
   39eb4:	004f019a 	.word	0x004f019a
   39eb8:	004f01c9 	.word	0x004f01c9
   39ebc:	004f004f 	.word	0x004f004f
   39ec0:	004f004f 	.word	0x004f004f
   39ec4:	004f004f 	.word	0x004f004f
   39ec8:	004f004f 	.word	0x004f004f
   39ecc:	004f004f 	.word	0x004f004f
   39ed0:	004f004f 	.word	0x004f004f
   39ed4:	004f004f 	.word	0x004f004f
   39ed8:	004f004f 	.word	0x004f004f
   39edc:	004f004f 	.word	0x004f004f
   39ee0:	004f004f 	.word	0x004f004f
   39ee4:	004f004f 	.word	0x004f004f
   39ee8:	004f004f 	.word	0x004f004f
   39eec:	004f004f 	.word	0x004f004f
   39ef0:	004f004f 	.word	0x004f004f
   39ef4:	004f004f 	.word	0x004f004f
   39ef8:	01ef004f 	.word	0x01ef004f
   39efc:	022a004f 	.word	0x022a004f
   39f00:	00c5      	.short	0x00c5
   39f02:	462a      	mov	r2, r5
   39f04:	2111      	movs	r1, #17
   39f06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39f0a:	f7ff bf73 	b.w	39df4 <d_print_comp>
   39f0e:	4dd1      	ldr	r5, [pc, #836]	@ (3a254 <d_print_mod+0x404>)
   39f10:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   39f14:	f105 0709 	add.w	r7, r5, #9
   39f18:	f04f 0800 	mov.w	r8, #0
   39f1c:	e009      	b.n	39f32 <d_print_mod+0xe2>
   39f1e:	460b      	mov	r3, r1
   39f20:	3101      	adds	r1, #1
   39f22:	42af      	cmp	r7, r5
   39f24:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39f28:	54e6      	strb	r6, [r4, r3]
   39f2a:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   39f2e:	f000 80c3 	beq.w	3a0b8 <d_print_mod+0x268>
   39f32:	29ff      	cmp	r1, #255	@ 0xff
   39f34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   39f38:	d1f1      	bne.n	39f1e <d_print_mod+0xce>
   39f3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39f3e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39f42:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   39f46:	4620      	mov	r0, r4
   39f48:	4798      	blx	r3
   39f4a:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   39f4e:	2101      	movs	r1, #1
   39f50:	440a      	add	r2, r1
   39f52:	2300      	movs	r3, #0
   39f54:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   39f58:	e7e3      	b.n	39f22 <d_print_mod+0xd2>
   39f5a:	4dbf      	ldr	r5, [pc, #764]	@ (3a258 <d_print_mod+0x408>)
   39f5c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   39f60:	f105 0709 	add.w	r7, r5, #9
   39f64:	f04f 0800 	mov.w	r8, #0
   39f68:	e009      	b.n	39f7e <d_print_mod+0x12e>
   39f6a:	460b      	mov	r3, r1
   39f6c:	3101      	adds	r1, #1
   39f6e:	42af      	cmp	r7, r5
   39f70:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39f74:	54e6      	strb	r6, [r4, r3]
   39f76:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   39f7a:	f000 809d 	beq.w	3a0b8 <d_print_mod+0x268>
   39f7e:	29ff      	cmp	r1, #255	@ 0xff
   39f80:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   39f84:	d1f1      	bne.n	39f6a <d_print_mod+0x11a>
   39f86:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39f8a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39f8e:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   39f92:	4620      	mov	r0, r4
   39f94:	4798      	blx	r3
   39f96:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   39f9a:	2101      	movs	r1, #1
   39f9c:	440a      	add	r2, r1
   39f9e:	2300      	movs	r3, #0
   39fa0:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   39fa4:	e7e3      	b.n	39f6e <d_print_mod+0x11e>
   39fa6:	4dad      	ldr	r5, [pc, #692]	@ (3a25c <d_print_mod+0x40c>)
   39fa8:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   39fac:	1daf      	adds	r7, r5, #6
   39fae:	f04f 0800 	mov.w	r8, #0
   39fb2:	e008      	b.n	39fc6 <d_print_mod+0x176>
   39fb4:	460b      	mov	r3, r1
   39fb6:	3101      	adds	r1, #1
   39fb8:	42af      	cmp	r7, r5
   39fba:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   39fbe:	54e6      	strb	r6, [r4, r3]
   39fc0:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   39fc4:	d078      	beq.n	3a0b8 <d_print_mod+0x268>
   39fc6:	29ff      	cmp	r1, #255	@ 0xff
   39fc8:	f815 6b01 	ldrb.w	r6, [r5], #1
   39fcc:	d1f2      	bne.n	39fb4 <d_print_mod+0x164>
   39fce:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   39fd2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   39fd6:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   39fda:	4620      	mov	r0, r4
   39fdc:	4798      	blx	r3
   39fde:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   39fe2:	2101      	movs	r1, #1
   39fe4:	440a      	add	r2, r1
   39fe6:	2300      	movs	r3, #0
   39fe8:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   39fec:	e7e4      	b.n	39fb8 <d_print_mod+0x168>
   39fee:	4e9c      	ldr	r6, [pc, #624]	@ (3a260 <d_print_mod+0x410>)
   39ff0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   39ff4:	f106 0806 	add.w	r8, r6, #6
   39ff8:	f04f 0900 	mov.w	r9, #0
   39ffc:	e009      	b.n	3a012 <d_print_mod+0x1c2>
   39ffe:	460a      	mov	r2, r1
   3a000:	3101      	adds	r1, #1
   3a002:	4546      	cmp	r6, r8
   3a004:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a008:	54a7      	strb	r7, [r4, r2]
   3a00a:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
   3a00e:	f000 8178 	beq.w	3a302 <d_print_mod+0x4b2>
   3a012:	29ff      	cmp	r1, #255	@ 0xff
   3a014:	f816 7b01 	ldrb.w	r7, [r6], #1
   3a018:	d1f1      	bne.n	39ffe <d_print_mod+0x1ae>
   3a01a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a01e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a022:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3a026:	4620      	mov	r0, r4
   3a028:	4798      	blx	r3
   3a02a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a02e:	2101      	movs	r1, #1
   3a030:	440b      	add	r3, r1
   3a032:	2200      	movs	r2, #0
   3a034:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a038:	e7e3      	b.n	3a002 <d_print_mod+0x1b2>
   3a03a:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
   3a03e:	2bff      	cmp	r3, #255	@ 0xff
   3a040:	f000 81c9 	beq.w	3a3d6 <d_print_mod+0x586>
   3a044:	2220      	movs	r2, #32
   3a046:	1c59      	adds	r1, r3, #1
   3a048:	f8c0 1100 	str.w	r1, [r0, #256]	@ 0x100
   3a04c:	54c2      	strb	r2, [r0, r3]
   3a04e:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
   3a052:	e027      	b.n	3a0a4 <d_print_mod+0x254>
   3a054:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
   3a058:	2bff      	cmp	r3, #255	@ 0xff
   3a05a:	f000 81ad 	beq.w	3a3b8 <d_print_mod+0x568>
   3a05e:	1c59      	adds	r1, r3, #1
   3a060:	2220      	movs	r2, #32
   3a062:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a066:	54e2      	strb	r2, [r4, r3]
   3a068:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3a06c:	e028      	b.n	3a0c0 <d_print_mod+0x270>
   3a06e:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3a072:	29ff      	cmp	r1, #255	@ 0xff
   3a074:	f000 8190 	beq.w	3a398 <d_print_mod+0x548>
   3a078:	1c4a      	adds	r2, r1, #1
   3a07a:	2320      	movs	r3, #32
   3a07c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3a080:	5463      	strb	r3, [r4, r1]
   3a082:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3a086:	692a      	ldr	r2, [r5, #16]
   3a088:	4620      	mov	r0, r4
   3a08a:	2111      	movs	r1, #17
   3a08c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3a090:	f7ff beb0 	b.w	39df4 <d_print_comp>
   3a094:	68ea      	ldr	r2, [r5, #12]
   3a096:	2111      	movs	r1, #17
   3a098:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3a09c:	f7ff beaa 	b.w	39df4 <d_print_comp>
   3a0a0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3a0a4:	29ff      	cmp	r1, #255	@ 0xff
   3a0a6:	f000 81b5 	beq.w	3a414 <d_print_mod+0x5c4>
   3a0aa:	1c4a      	adds	r2, r1, #1
   3a0ac:	2326      	movs	r3, #38	@ 0x26
   3a0ae:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3a0b2:	5463      	strb	r3, [r4, r1]
   3a0b4:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3a0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3a0bc:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3a0c0:	4d68      	ldr	r5, [pc, #416]	@ (3a264 <d_print_mod+0x414>)
   3a0c2:	f04f 0800 	mov.w	r8, #0
   3a0c6:	1caf      	adds	r7, r5, #2
   3a0c8:	e008      	b.n	3a0dc <d_print_mod+0x28c>
   3a0ca:	460b      	mov	r3, r1
   3a0cc:	3101      	adds	r1, #1
   3a0ce:	42af      	cmp	r7, r5
   3a0d0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a0d4:	54e6      	strb	r6, [r4, r3]
   3a0d6:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3a0da:	d0ed      	beq.n	3a0b8 <d_print_mod+0x268>
   3a0dc:	29ff      	cmp	r1, #255	@ 0xff
   3a0de:	f815 6b01 	ldrb.w	r6, [r5], #1
   3a0e2:	d1f2      	bne.n	3a0ca <d_print_mod+0x27a>
   3a0e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a0e8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a0ec:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3a0f0:	4620      	mov	r0, r4
   3a0f2:	4798      	blx	r3
   3a0f4:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3a0f8:	2101      	movs	r1, #1
   3a0fa:	440a      	add	r2, r1
   3a0fc:	2300      	movs	r3, #0
   3a0fe:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3a102:	e7e4      	b.n	3a0ce <d_print_mod+0x27e>
   3a104:	4d58      	ldr	r5, [pc, #352]	@ (3a268 <d_print_mod+0x418>)
   3a106:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3a10a:	f105 0709 	add.w	r7, r5, #9
   3a10e:	f04f 0800 	mov.w	r8, #0
   3a112:	e008      	b.n	3a126 <d_print_mod+0x2d6>
   3a114:	460b      	mov	r3, r1
   3a116:	3101      	adds	r1, #1
   3a118:	42bd      	cmp	r5, r7
   3a11a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a11e:	54e6      	strb	r6, [r4, r3]
   3a120:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3a124:	d0c8      	beq.n	3a0b8 <d_print_mod+0x268>
   3a126:	29ff      	cmp	r1, #255	@ 0xff
   3a128:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3a12c:	d1f2      	bne.n	3a114 <d_print_mod+0x2c4>
   3a12e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a132:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a136:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3a13a:	4620      	mov	r0, r4
   3a13c:	4798      	blx	r3
   3a13e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3a142:	2101      	movs	r1, #1
   3a144:	440a      	add	r2, r1
   3a146:	2300      	movs	r3, #0
   3a148:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3a14c:	e7e4      	b.n	3a118 <d_print_mod+0x2c8>
   3a14e:	4d47      	ldr	r5, [pc, #284]	@ (3a26c <d_print_mod+0x41c>)
   3a150:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3a154:	f105 070b 	add.w	r7, r5, #11
   3a158:	f04f 0800 	mov.w	r8, #0
   3a15c:	e008      	b.n	3a170 <d_print_mod+0x320>
   3a15e:	460b      	mov	r3, r1
   3a160:	3101      	adds	r1, #1
   3a162:	42af      	cmp	r7, r5
   3a164:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a168:	54e6      	strb	r6, [r4, r3]
   3a16a:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3a16e:	d0a3      	beq.n	3a0b8 <d_print_mod+0x268>
   3a170:	29ff      	cmp	r1, #255	@ 0xff
   3a172:	f815 6b01 	ldrb.w	r6, [r5], #1
   3a176:	d1f2      	bne.n	3a15e <d_print_mod+0x30e>
   3a178:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a17c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a180:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3a184:	4620      	mov	r0, r4
   3a186:	4798      	blx	r3
   3a188:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3a18c:	2101      	movs	r1, #1
   3a18e:	440a      	add	r2, r1
   3a190:	2300      	movs	r3, #0
   3a192:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3a196:	e7e4      	b.n	3a162 <d_print_mod+0x312>
   3a198:	f890 3104 	ldrb.w	r3, [r0, #260]	@ 0x104
   3a19c:	2b28      	cmp	r3, #40	@ 0x28
   3a19e:	f040 80d1 	bne.w	3a344 <d_print_mod+0x4f4>
   3a1a2:	68ea      	ldr	r2, [r5, #12]
   3a1a4:	4d32      	ldr	r5, [pc, #200]	@ (3a270 <d_print_mod+0x420>)
   3a1a6:	2111      	movs	r1, #17
   3a1a8:	4620      	mov	r0, r4
   3a1aa:	f7ff fe23 	bl	39df4 <d_print_comp>
   3a1ae:	f04f 0800 	mov.w	r8, #0
   3a1b2:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3a1b6:	1cef      	adds	r7, r5, #3
   3a1b8:	e009      	b.n	3a1ce <d_print_mod+0x37e>
   3a1ba:	460b      	mov	r3, r1
   3a1bc:	3101      	adds	r1, #1
   3a1be:	42af      	cmp	r7, r5
   3a1c0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a1c4:	54e6      	strb	r6, [r4, r3]
   3a1c6:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3a1ca:	f43f af75 	beq.w	3a0b8 <d_print_mod+0x268>
   3a1ce:	29ff      	cmp	r1, #255	@ 0xff
   3a1d0:	f815 6b01 	ldrb.w	r6, [r5], #1
   3a1d4:	d1f1      	bne.n	3a1ba <d_print_mod+0x36a>
   3a1d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a1da:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a1de:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3a1e2:	4620      	mov	r0, r4
   3a1e4:	4798      	blx	r3
   3a1e6:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3a1ea:	2101      	movs	r1, #1
   3a1ec:	440a      	add	r2, r1
   3a1ee:	2300      	movs	r3, #0
   3a1f0:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3a1f4:	e7e3      	b.n	3a1be <d_print_mod+0x36e>
   3a1f6:	4e1f      	ldr	r6, [pc, #124]	@ (3a274 <d_print_mod+0x424>)
   3a1f8:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3a1fc:	f106 080a 	add.w	r8, r6, #10
   3a200:	f04f 0900 	mov.w	r9, #0
   3a204:	e009      	b.n	3a21a <d_print_mod+0x3ca>
   3a206:	460a      	mov	r2, r1
   3a208:	3101      	adds	r1, #1
   3a20a:	4546      	cmp	r6, r8
   3a20c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a210:	54a7      	strb	r7, [r4, r2]
   3a212:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
   3a216:	f000 8083 	beq.w	3a320 <d_print_mod+0x4d0>
   3a21a:	29ff      	cmp	r1, #255	@ 0xff
   3a21c:	f816 7b01 	ldrb.w	r7, [r6], #1
   3a220:	d1f1      	bne.n	3a206 <d_print_mod+0x3b6>
   3a222:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a226:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a22a:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3a22e:	4620      	mov	r0, r4
   3a230:	4798      	blx	r3
   3a232:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a236:	2101      	movs	r1, #1
   3a238:	440b      	add	r3, r1
   3a23a:	2200      	movs	r2, #0
   3a23c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a240:	e7e3      	b.n	3a20a <d_print_mod+0x3ba>
   3a242:	4d0d      	ldr	r5, [pc, #52]	@ (3a278 <d_print_mod+0x428>)
   3a244:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3a248:	f105 0711 	add.w	r7, r5, #17
   3a24c:	f04f 0800 	mov.w	r8, #0
   3a250:	e01e      	b.n	3a290 <d_print_mod+0x440>
   3a252:	bf00      	nop
   3a254:	0004027f 	.word	0x0004027f
   3a258:	0004028b 	.word	0x0004028b
   3a25c:	00040298 	.word	0x00040298
   3a260:	000402c0 	.word	0x000402c0
   3a264:	000402c8 	.word	0x000402c8
   3a268:	000402cb 	.word	0x000402cb
   3a26c:	000402d8 	.word	0x000402d8
   3a270:	000402e4 	.word	0x000402e4
   3a274:	000402e8 	.word	0x000402e8
   3a278:	0004029f 	.word	0x0004029f
   3a27c:	460b      	mov	r3, r1
   3a27e:	3101      	adds	r1, #1
   3a280:	42af      	cmp	r7, r5
   3a282:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a286:	54e6      	strb	r6, [r4, r3]
   3a288:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3a28c:	f43f af14 	beq.w	3a0b8 <d_print_mod+0x268>
   3a290:	29ff      	cmp	r1, #255	@ 0xff
   3a292:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3a296:	d1f1      	bne.n	3a27c <d_print_mod+0x42c>
   3a298:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a29c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a2a0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3a2a4:	4620      	mov	r0, r4
   3a2a6:	4798      	blx	r3
   3a2a8:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3a2ac:	2101      	movs	r1, #1
   3a2ae:	440a      	add	r2, r1
   3a2b0:	2300      	movs	r3, #0
   3a2b2:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3a2b6:	e7e3      	b.n	3a280 <d_print_mod+0x430>
   3a2b8:	4e6d      	ldr	r6, [pc, #436]	@ (3a470 <d_print_mod+0x620>)
   3a2ba:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3a2be:	f106 0809 	add.w	r8, r6, #9
   3a2c2:	f04f 0900 	mov.w	r9, #0
   3a2c6:	e008      	b.n	3a2da <d_print_mod+0x48a>
   3a2c8:	460a      	mov	r2, r1
   3a2ca:	3101      	adds	r1, #1
   3a2cc:	45b0      	cmp	r8, r6
   3a2ce:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a2d2:	54a7      	strb	r7, [r4, r2]
   3a2d4:	f884 7104 	strb.w	r7, [r4, #260]	@ 0x104
   3a2d8:	d013      	beq.n	3a302 <d_print_mod+0x4b2>
   3a2da:	29ff      	cmp	r1, #255	@ 0xff
   3a2dc:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   3a2e0:	d1f2      	bne.n	3a2c8 <d_print_mod+0x478>
   3a2e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a2e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a2ea:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3a2ee:	4620      	mov	r0, r4
   3a2f0:	4798      	blx	r3
   3a2f2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a2f6:	2101      	movs	r1, #1
   3a2f8:	440b      	add	r3, r1
   3a2fa:	2200      	movs	r2, #0
   3a2fc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a300:	e7e4      	b.n	3a2cc <d_print_mod+0x47c>
   3a302:	692a      	ldr	r2, [r5, #16]
   3a304:	2a00      	cmp	r2, #0
   3a306:	f43f aed7 	beq.w	3a0b8 <d_print_mod+0x268>
   3a30a:	29ff      	cmp	r1, #255	@ 0xff
   3a30c:	d032      	beq.n	3a374 <d_print_mod+0x524>
   3a30e:	1c48      	adds	r0, r1, #1
   3a310:	2328      	movs	r3, #40	@ 0x28
   3a312:	f8c4 0100 	str.w	r0, [r4, #256]	@ 0x100
   3a316:	5463      	strb	r3, [r4, r1]
   3a318:	2111      	movs	r1, #17
   3a31a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3a31e:	e001      	b.n	3a324 <d_print_mod+0x4d4>
   3a320:	68ea      	ldr	r2, [r5, #12]
   3a322:	2111      	movs	r1, #17
   3a324:	4620      	mov	r0, r4
   3a326:	f7ff fd65 	bl	39df4 <d_print_comp>
   3a32a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3a32e:	29ff      	cmp	r1, #255	@ 0xff
   3a330:	d061      	beq.n	3a3f6 <d_print_mod+0x5a6>
   3a332:	1c4a      	adds	r2, r1, #1
   3a334:	2329      	movs	r3, #41	@ 0x29
   3a336:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3a33a:	5463      	strb	r3, [r4, r1]
   3a33c:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3a340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3a344:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3a348:	29ff      	cmp	r1, #255	@ 0xff
   3a34a:	d072      	beq.n	3a432 <d_print_mod+0x5e2>
   3a34c:	1c4a      	adds	r2, r1, #1
   3a34e:	2320      	movs	r3, #32
   3a350:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3a354:	5463      	strb	r3, [r4, r1]
   3a356:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3a35a:	e722      	b.n	3a1a2 <d_print_mod+0x352>
   3a35c:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3a360:	29ff      	cmp	r1, #255	@ 0xff
   3a362:	d076      	beq.n	3a452 <d_print_mod+0x602>
   3a364:	1c4a      	adds	r2, r1, #1
   3a366:	232a      	movs	r3, #42	@ 0x2a
   3a368:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3a36c:	5463      	strb	r3, [r4, r1]
   3a36e:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3a372:	e6a1      	b.n	3a0b8 <d_print_mod+0x268>
   3a374:	2600      	movs	r6, #0
   3a376:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a37a:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a37e:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3a382:	4620      	mov	r0, r4
   3a384:	4798      	blx	r3
   3a386:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a38a:	692a      	ldr	r2, [r5, #16]
   3a38c:	2001      	movs	r0, #1
   3a38e:	4403      	add	r3, r0
   3a390:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a394:	4631      	mov	r1, r6
   3a396:	e7bb      	b.n	3a310 <d_print_mod+0x4c0>
   3a398:	2600      	movs	r6, #0
   3a39a:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
   3a39e:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
   3a3a2:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   3a3a6:	4798      	blx	r3
   3a3a8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a3ac:	2201      	movs	r2, #1
   3a3ae:	4413      	add	r3, r2
   3a3b0:	4631      	mov	r1, r6
   3a3b2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a3b6:	e660      	b.n	3a07a <d_print_mod+0x22a>
   3a3b8:	2500      	movs	r5, #0
   3a3ba:	4619      	mov	r1, r3
   3a3bc:	e9d0 6242 	ldrd	r6, r2, [r0, #264]	@ 0x108
   3a3c0:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
   3a3c4:	47b0      	blx	r6
   3a3c6:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3a3ca:	2101      	movs	r1, #1
   3a3cc:	440a      	add	r2, r1
   3a3ce:	462b      	mov	r3, r5
   3a3d0:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3a3d4:	e644      	b.n	3a060 <d_print_mod+0x210>
   3a3d6:	2100      	movs	r1, #0
   3a3d8:	e9d0 5242 	ldrd	r5, r2, [r0, #264]	@ 0x108
   3a3dc:	f880 10ff 	strb.w	r1, [r0, #255]	@ 0xff
   3a3e0:	4619      	mov	r1, r3
   3a3e2:	47a8      	blx	r5
   3a3e4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a3e8:	2101      	movs	r1, #1
   3a3ea:	2220      	movs	r2, #32
   3a3ec:	440b      	add	r3, r1
   3a3ee:	7022      	strb	r2, [r4, #0]
   3a3f0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a3f4:	e659      	b.n	3a0aa <d_print_mod+0x25a>
   3a3f6:	2500      	movs	r5, #0
   3a3f8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3a3fc:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3a400:	4620      	mov	r0, r4
   3a402:	4798      	blx	r3
   3a404:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a408:	2201      	movs	r2, #1
   3a40a:	4413      	add	r3, r2
   3a40c:	4629      	mov	r1, r5
   3a40e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a412:	e78f      	b.n	3a334 <d_print_mod+0x4e4>
   3a414:	2500      	movs	r5, #0
   3a416:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3a41a:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3a41e:	4620      	mov	r0, r4
   3a420:	4798      	blx	r3
   3a422:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a426:	2201      	movs	r2, #1
   3a428:	4413      	add	r3, r2
   3a42a:	4629      	mov	r1, r5
   3a42c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a430:	e63c      	b.n	3a0ac <d_print_mod+0x25c>
   3a432:	2600      	movs	r6, #0
   3a434:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
   3a438:	f8d0 210c 	ldr.w	r2, [r0, #268]	@ 0x10c
   3a43c:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   3a440:	4798      	blx	r3
   3a442:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a446:	2201      	movs	r2, #1
   3a448:	4413      	add	r3, r2
   3a44a:	4631      	mov	r1, r6
   3a44c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a450:	e77d      	b.n	3a34e <d_print_mod+0x4fe>
   3a452:	2500      	movs	r5, #0
   3a454:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
   3a458:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
   3a45c:	4798      	blx	r3
   3a45e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a462:	2201      	movs	r2, #1
   3a464:	4413      	add	r3, r2
   3a466:	4629      	mov	r1, r5
   3a468:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a46c:	e77b      	b.n	3a366 <d_print_mod+0x516>
   3a46e:	bf00      	nop
   3a470:	000402b3 	.word	0x000402b3

0003a474 <d_print_function_type>:
   3a474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a478:	4604      	mov	r4, r0
   3a47a:	4616      	mov	r6, r2
   3a47c:	461d      	mov	r5, r3
   3a47e:	2b00      	cmp	r3, #0
   3a480:	d066      	beq.n	3a550 <d_print_function_type+0xdc>
   3a482:	4f70      	ldr	r7, [pc, #448]	@ (3a644 <d_print_function_type+0x1d0>)
   3a484:	2001      	movs	r0, #1
   3a486:	689a      	ldr	r2, [r3, #8]
   3a488:	2a00      	cmp	r2, #0
   3a48a:	d161      	bne.n	3a550 <d_print_function_type+0xdc>
   3a48c:	685a      	ldr	r2, [r3, #4]
   3a48e:	7811      	ldrb	r1, [r2, #0]
   3a490:	3919      	subs	r1, #25
   3a492:	b2c9      	uxtb	r1, r1
   3a494:	2912      	cmp	r1, #18
   3a496:	fa00 f201 	lsl.w	r2, r0, r1
   3a49a:	d856      	bhi.n	3a54a <d_print_function_type+0xd6>
   3a49c:	423a      	tst	r2, r7
   3a49e:	d17d      	bne.n	3a59c <d_print_function_type+0x128>
   3a4a0:	f412 6f60 	tst.w	r2, #3584	@ 0xe00
   3a4a4:	d051      	beq.n	3a54a <d_print_function_type+0xd6>
   3a4a6:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   3a4aa:	f003 02fd 	and.w	r2, r3, #253	@ 0xfd
   3a4ae:	2a28      	cmp	r2, #40	@ 0x28
   3a4b0:	f000 80a6 	beq.w	3a600 <d_print_function_type+0x18c>
   3a4b4:	2b20      	cmp	r3, #32
   3a4b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3a4ba:	f040 8085 	bne.w	3a5c8 <d_print_function_type+0x154>
   3a4be:	29ff      	cmp	r1, #255	@ 0xff
   3a4c0:	f000 808f 	beq.w	3a5e2 <d_print_function_type+0x16e>
   3a4c4:	1c4b      	adds	r3, r1, #1
   3a4c6:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3a4ca:	2328      	movs	r3, #40	@ 0x28
   3a4cc:	5463      	strb	r3, [r4, r1]
   3a4ce:	f04f 0800 	mov.w	r8, #0
   3a4d2:	f8d4 7114 	ldr.w	r7, [r4, #276]	@ 0x114
   3a4d6:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3a4da:	2111      	movs	r1, #17
   3a4dc:	f8c4 8114 	str.w	r8, [r4, #276]	@ 0x114
   3a4e0:	4643      	mov	r3, r8
   3a4e2:	462a      	mov	r2, r5
   3a4e4:	4620      	mov	r0, r4
   3a4e6:	f000 f8af 	bl	3a648 <d_print_mod_list>
   3a4ea:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3a4ee:	29ff      	cmp	r1, #255	@ 0xff
   3a4f0:	f000 8089 	beq.w	3a606 <d_print_function_type+0x192>
   3a4f4:	1c4b      	adds	r3, r1, #1
   3a4f6:	2229      	movs	r2, #41	@ 0x29
   3a4f8:	2bff      	cmp	r3, #255	@ 0xff
   3a4fa:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3a4fe:	5462      	strb	r2, [r4, r1]
   3a500:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3a504:	d032      	beq.n	3a56c <d_print_function_type+0xf8>
   3a506:	2228      	movs	r2, #40	@ 0x28
   3a508:	1c59      	adds	r1, r3, #1
   3a50a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a50e:	54e2      	strb	r2, [r4, r3]
   3a510:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3a514:	6932      	ldr	r2, [r6, #16]
   3a516:	b12a      	cbz	r2, 3a524 <d_print_function_type+0xb0>
   3a518:	2111      	movs	r1, #17
   3a51a:	4620      	mov	r0, r4
   3a51c:	f7ff fc6a 	bl	39df4 <d_print_comp>
   3a520:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3a524:	29ff      	cmp	r1, #255	@ 0xff
   3a526:	d040      	beq.n	3a5aa <d_print_function_type+0x136>
   3a528:	1c4b      	adds	r3, r1, #1
   3a52a:	2229      	movs	r2, #41	@ 0x29
   3a52c:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3a530:	4620      	mov	r0, r4
   3a532:	5462      	strb	r2, [r4, r1]
   3a534:	2301      	movs	r3, #1
   3a536:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3a53a:	2111      	movs	r1, #17
   3a53c:	462a      	mov	r2, r5
   3a53e:	f000 f883 	bl	3a648 <d_print_mod_list>
   3a542:	f8c4 7114 	str.w	r7, [r4, #276]	@ 0x114
   3a546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a54a:	681b      	ldr	r3, [r3, #0]
   3a54c:	2b00      	cmp	r3, #0
   3a54e:	d19a      	bne.n	3a486 <d_print_function_type+0x12>
   3a550:	2300      	movs	r3, #0
   3a552:	f8d4 7114 	ldr.w	r7, [r4, #276]	@ 0x114
   3a556:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
   3a55a:	462a      	mov	r2, r5
   3a55c:	2111      	movs	r1, #17
   3a55e:	4620      	mov	r0, r4
   3a560:	f000 f872 	bl	3a648 <d_print_mod_list>
   3a564:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3a568:	2bff      	cmp	r3, #255	@ 0xff
   3a56a:	d1cc      	bne.n	3a506 <d_print_function_type+0x92>
   3a56c:	4619      	mov	r1, r3
   3a56e:	2300      	movs	r3, #0
   3a570:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
   3a574:	4620      	mov	r0, r4
   3a576:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3a57a:	4798      	blx	r3
   3a57c:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a580:	3301      	adds	r3, #1
   3a582:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a586:	2328      	movs	r3, #40	@ 0x28
   3a588:	7023      	strb	r3, [r4, #0]
   3a58a:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3a58e:	6932      	ldr	r2, [r6, #16]
   3a590:	2101      	movs	r1, #1
   3a592:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a596:	2a00      	cmp	r2, #0
   3a598:	d1be      	bne.n	3a518 <d_print_function_type+0xa4>
   3a59a:	e7c5      	b.n	3a528 <d_print_function_type+0xb4>
   3a59c:	f894 3104 	ldrb.w	r3, [r4, #260]	@ 0x104
   3a5a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3a5a4:	2b20      	cmp	r3, #32
   3a5a6:	d08a      	beq.n	3a4be <d_print_function_type+0x4a>
   3a5a8:	e00e      	b.n	3a5c8 <d_print_function_type+0x154>
   3a5aa:	2600      	movs	r6, #0
   3a5ac:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3a5b0:	f884 60ff 	strb.w	r6, [r4, #255]	@ 0xff
   3a5b4:	4620      	mov	r0, r4
   3a5b6:	4798      	blx	r3
   3a5b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a5bc:	3301      	adds	r3, #1
   3a5be:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a5c2:	4631      	mov	r1, r6
   3a5c4:	2301      	movs	r3, #1
   3a5c6:	e7b0      	b.n	3a52a <d_print_function_type+0xb6>
   3a5c8:	29ff      	cmp	r1, #255	@ 0xff
   3a5ca:	d02b      	beq.n	3a624 <d_print_function_type+0x1b0>
   3a5cc:	1c4b      	adds	r3, r1, #1
   3a5ce:	2220      	movs	r2, #32
   3a5d0:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3a5d4:	5462      	strb	r2, [r4, r1]
   3a5d6:	4619      	mov	r1, r3
   3a5d8:	29ff      	cmp	r1, #255	@ 0xff
   3a5da:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3a5de:	f47f af71 	bne.w	3a4c4 <d_print_function_type+0x50>
   3a5e2:	2700      	movs	r7, #0
   3a5e4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3a5e8:	f884 70ff 	strb.w	r7, [r4, #255]	@ 0xff
   3a5ec:	4620      	mov	r0, r4
   3a5ee:	4798      	blx	r3
   3a5f0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a5f4:	3301      	adds	r3, #1
   3a5f6:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a5fa:	4639      	mov	r1, r7
   3a5fc:	2301      	movs	r3, #1
   3a5fe:	e762      	b.n	3a4c6 <d_print_function_type+0x52>
   3a600:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3a604:	e75b      	b.n	3a4be <d_print_function_type+0x4a>
   3a606:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3a60a:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3a60e:	4620      	mov	r0, r4
   3a610:	4798      	blx	r3
   3a612:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a616:	3301      	adds	r3, #1
   3a618:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a61c:	2329      	movs	r3, #41	@ 0x29
   3a61e:	7023      	strb	r3, [r4, #0]
   3a620:	2301      	movs	r3, #1
   3a622:	e770      	b.n	3a506 <d_print_function_type+0x92>
   3a624:	2300      	movs	r3, #0
   3a626:	f884 30ff 	strb.w	r3, [r4, #255]	@ 0xff
   3a62a:	4620      	mov	r0, r4
   3a62c:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3a630:	4798      	blx	r3
   3a632:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a636:	2101      	movs	r1, #1
   3a638:	2220      	movs	r2, #32
   3a63a:	440b      	add	r3, r1
   3a63c:	7022      	strb	r2, [r4, #0]
   3a63e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a642:	e73f      	b.n	3a4c4 <d_print_function_type+0x50>
   3a644:	00043107 	.word	0x00043107

0003a648 <d_print_mod_list>:
   3a648:	2a00      	cmp	r2, #0
   3a64a:	f000 80c0 	beq.w	3a7ce <d_print_mod_list+0x186>
   3a64e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a652:	4605      	mov	r5, r0
   3a654:	b088      	sub	sp, #32
   3a656:	461e      	mov	r6, r3
   3a658:	4614      	mov	r4, r2
   3a65a:	2701      	movs	r7, #1
   3a65c:	f8d5 2118 	ldr.w	r2, [r5, #280]	@ 0x118
   3a660:	bb02      	cbnz	r2, 3a6a4 <d_print_mod_list+0x5c>
   3a662:	68a2      	ldr	r2, [r4, #8]
   3a664:	bb0a      	cbnz	r2, 3a6aa <d_print_mod_list+0x62>
   3a666:	6862      	ldr	r2, [r4, #4]
   3a668:	7811      	ldrb	r1, [r2, #0]
   3a66a:	b936      	cbnz	r6, 3a67a <d_print_mod_list+0x32>
   3a66c:	294e      	cmp	r1, #78	@ 0x4e
   3a66e:	d01c      	beq.n	3a6aa <d_print_mod_list+0x62>
   3a670:	d81f      	bhi.n	3a6b2 <d_print_mod_list+0x6a>
   3a672:	f1a1 031c 	sub.w	r3, r1, #28
   3a676:	2b04      	cmp	r3, #4
   3a678:	d917      	bls.n	3a6aa <d_print_mod_list+0x62>
   3a67a:	68e3      	ldr	r3, [r4, #12]
   3a67c:	f8d5 8110 	ldr.w	r8, [r5, #272]	@ 0x110
   3a680:	60a7      	str	r7, [r4, #8]
   3a682:	2929      	cmp	r1, #41	@ 0x29
   3a684:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
   3a688:	d01e      	beq.n	3a6c8 <d_print_mod_list+0x80>
   3a68a:	292a      	cmp	r1, #42	@ 0x2a
   3a68c:	d026      	beq.n	3a6dc <d_print_mod_list+0x94>
   3a68e:	2902      	cmp	r1, #2
   3a690:	d02e      	beq.n	3a6f0 <d_print_mod_list+0xa8>
   3a692:	2111      	movs	r1, #17
   3a694:	4628      	mov	r0, r5
   3a696:	f7ff fbdb 	bl	39e50 <d_print_mod>
   3a69a:	6824      	ldr	r4, [r4, #0]
   3a69c:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
   3a6a0:	2c00      	cmp	r4, #0
   3a6a2:	d1db      	bne.n	3a65c <d_print_mod_list+0x14>
   3a6a4:	b008      	add	sp, #32
   3a6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a6aa:	6824      	ldr	r4, [r4, #0]
   3a6ac:	2c00      	cmp	r4, #0
   3a6ae:	d1d5      	bne.n	3a65c <d_print_mod_list+0x14>
   3a6b0:	e7f8      	b.n	3a6a4 <d_print_mod_list+0x5c>
   3a6b2:	3950      	subs	r1, #80	@ 0x50
   3a6b4:	2901      	cmp	r1, #1
   3a6b6:	d9f8      	bls.n	3a6aa <d_print_mod_list+0x62>
   3a6b8:	68e3      	ldr	r3, [r4, #12]
   3a6ba:	f8d5 8110 	ldr.w	r8, [r5, #272]	@ 0x110
   3a6be:	2101      	movs	r1, #1
   3a6c0:	60a1      	str	r1, [r4, #8]
   3a6c2:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
   3a6c6:	e7e4      	b.n	3a692 <d_print_mod_list+0x4a>
   3a6c8:	6823      	ldr	r3, [r4, #0]
   3a6ca:	2111      	movs	r1, #17
   3a6cc:	4628      	mov	r0, r5
   3a6ce:	f7ff fed1 	bl	3a474 <d_print_function_type>
   3a6d2:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
   3a6d6:	b008      	add	sp, #32
   3a6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a6dc:	6823      	ldr	r3, [r4, #0]
   3a6de:	2111      	movs	r1, #17
   3a6e0:	4628      	mov	r0, r5
   3a6e2:	f000 f8d1 	bl	3a888 <d_print_array_type>
   3a6e6:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
   3a6ea:	b008      	add	sp, #32
   3a6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a6f0:	2300      	movs	r3, #0
   3a6f2:	4e61      	ldr	r6, [pc, #388]	@ (3a878 <d_print_mod_list+0x230>)
   3a6f4:	f8d5 7114 	ldr.w	r7, [r5, #276]	@ 0x114
   3a6f8:	68d2      	ldr	r2, [r2, #12]
   3a6fa:	f8c5 3114 	str.w	r3, [r5, #276]	@ 0x114
   3a6fe:	2111      	movs	r1, #17
   3a700:	4628      	mov	r0, r5
   3a702:	f7ff fb77 	bl	39df4 <d_print_comp>
   3a706:	f106 0902 	add.w	r9, r6, #2
   3a70a:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
   3a70e:	f8c5 7114 	str.w	r7, [r5, #276]	@ 0x114
   3a712:	e008      	b.n	3a726 <d_print_mod_list+0xde>
   3a714:	460b      	mov	r3, r1
   3a716:	3101      	adds	r1, #1
   3a718:	454e      	cmp	r6, r9
   3a71a:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
   3a71e:	54ef      	strb	r7, [r5, r3]
   3a720:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
   3a724:	d013      	beq.n	3a74e <d_print_mod_list+0x106>
   3a726:	29ff      	cmp	r1, #255	@ 0xff
   3a728:	f816 7b01 	ldrb.w	r7, [r6], #1
   3a72c:	d1f2      	bne.n	3a714 <d_print_mod_list+0xcc>
   3a72e:	f04f 0a00 	mov.w	sl, #0
   3a732:	e9d5 3242 	ldrd	r3, r2, [r5, #264]	@ 0x108
   3a736:	f885 a0ff 	strb.w	sl, [r5, #255]	@ 0xff
   3a73a:	4628      	mov	r0, r5
   3a73c:	4798      	blx	r3
   3a73e:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
   3a742:	3201      	adds	r2, #1
   3a744:	4653      	mov	r3, sl
   3a746:	f8c5 2128 	str.w	r2, [r5, #296]	@ 0x128
   3a74a:	2101      	movs	r1, #1
   3a74c:	e7e4      	b.n	3a718 <d_print_mod_list+0xd0>
   3a74e:	6863      	ldr	r3, [r4, #4]
   3a750:	691c      	ldr	r4, [r3, #16]
   3a752:	7823      	ldrb	r3, [r4, #0]
   3a754:	2b48      	cmp	r3, #72	@ 0x48
   3a756:	d017      	beq.n	3a788 <d_print_mod_list+0x140>
   3a758:	2b4e      	cmp	r3, #78	@ 0x4e
   3a75a:	f1a3 0250 	sub.w	r2, r3, #80	@ 0x50
   3a75e:	f1a3 011c 	sub.w	r1, r3, #28
   3a762:	d00e      	beq.n	3a782 <d_print_mod_list+0x13a>
   3a764:	d80b      	bhi.n	3a77e <d_print_mod_list+0x136>
   3a766:	2904      	cmp	r1, #4
   3a768:	d90b      	bls.n	3a782 <d_print_mod_list+0x13a>
   3a76a:	4622      	mov	r2, r4
   3a76c:	2111      	movs	r1, #17
   3a76e:	4628      	mov	r0, r5
   3a770:	f7ff fb40 	bl	39df4 <d_print_comp>
   3a774:	f8c5 8110 	str.w	r8, [r5, #272]	@ 0x110
   3a778:	b008      	add	sp, #32
   3a77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a77e:	2a01      	cmp	r2, #1
   3a780:	d8f3      	bhi.n	3a76a <d_print_mod_list+0x122>
   3a782:	68e4      	ldr	r4, [r4, #12]
   3a784:	7823      	ldrb	r3, [r4, #0]
   3a786:	e7e7      	b.n	3a758 <d_print_mod_list+0x110>
   3a788:	4e3c      	ldr	r6, [pc, #240]	@ (3a87c <d_print_mod_list+0x234>)
   3a78a:	f04f 0900 	mov.w	r9, #0
   3a78e:	f106 0a0d 	add.w	sl, r6, #13
   3a792:	e008      	b.n	3a7a6 <d_print_mod_list+0x15e>
   3a794:	460b      	mov	r3, r1
   3a796:	3101      	adds	r1, #1
   3a798:	4556      	cmp	r6, sl
   3a79a:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
   3a79e:	54ef      	strb	r7, [r5, r3]
   3a7a0:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
   3a7a4:	d014      	beq.n	3a7d0 <d_print_mod_list+0x188>
   3a7a6:	29ff      	cmp	r1, #255	@ 0xff
   3a7a8:	f816 7b01 	ldrb.w	r7, [r6], #1
   3a7ac:	d1f2      	bne.n	3a794 <d_print_mod_list+0x14c>
   3a7ae:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
   3a7b2:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
   3a7b6:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
   3a7ba:	4628      	mov	r0, r5
   3a7bc:	4798      	blx	r3
   3a7be:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
   3a7c2:	2101      	movs	r1, #1
   3a7c4:	440a      	add	r2, r1
   3a7c6:	2300      	movs	r3, #0
   3a7c8:	f8c5 2128 	str.w	r2, [r5, #296]	@ 0x128
   3a7cc:	e7e4      	b.n	3a798 <d_print_mod_list+0x150>
   3a7ce:	4770      	bx	lr
   3a7d0:	6922      	ldr	r2, [r4, #16]
   3a7d2:	492b      	ldr	r1, [pc, #172]	@ (3a880 <d_print_mod_list+0x238>)
   3a7d4:	3201      	adds	r2, #1
   3a7d6:	a801      	add	r0, sp, #4
   3a7d8:	f001 f822 	bl	3b820 <sprintf>
   3a7dc:	a801      	add	r0, sp, #4
   3a7de:	f7dd ff6f 	bl	186c0 <strlen>
   3a7e2:	4682      	mov	sl, r0
   3a7e4:	b318      	cbz	r0, 3a82e <d_print_mod_list+0x1e6>
   3a7e6:	ae01      	add	r6, sp, #4
   3a7e8:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
   3a7ec:	44b2      	add	sl, r6
   3a7ee:	f04f 0900 	mov.w	r9, #0
   3a7f2:	e008      	b.n	3a806 <d_print_mod_list+0x1be>
   3a7f4:	460b      	mov	r3, r1
   3a7f6:	3101      	adds	r1, #1
   3a7f8:	4556      	cmp	r6, sl
   3a7fa:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
   3a7fe:	54ef      	strb	r7, [r5, r3]
   3a800:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
   3a804:	d015      	beq.n	3a832 <d_print_mod_list+0x1ea>
   3a806:	29ff      	cmp	r1, #255	@ 0xff
   3a808:	f816 7b01 	ldrb.w	r7, [r6], #1
   3a80c:	d1f2      	bne.n	3a7f4 <d_print_mod_list+0x1ac>
   3a80e:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
   3a812:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
   3a816:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
   3a81a:	4628      	mov	r0, r5
   3a81c:	4798      	blx	r3
   3a81e:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
   3a822:	2101      	movs	r1, #1
   3a824:	440a      	add	r2, r1
   3a826:	2300      	movs	r3, #0
   3a828:	f8c5 2128 	str.w	r2, [r5, #296]	@ 0x128
   3a82c:	e7e4      	b.n	3a7f8 <d_print_mod_list+0x1b0>
   3a82e:	f8d5 1100 	ldr.w	r1, [r5, #256]	@ 0x100
   3a832:	4e14      	ldr	r6, [pc, #80]	@ (3a884 <d_print_mod_list+0x23c>)
   3a834:	f04f 0900 	mov.w	r9, #0
   3a838:	f106 0a03 	add.w	sl, r6, #3
   3a83c:	e008      	b.n	3a850 <d_print_mod_list+0x208>
   3a83e:	460b      	mov	r3, r1
   3a840:	3101      	adds	r1, #1
   3a842:	4556      	cmp	r6, sl
   3a844:	f8c5 1100 	str.w	r1, [r5, #256]	@ 0x100
   3a848:	54ef      	strb	r7, [r5, r3]
   3a84a:	f885 7104 	strb.w	r7, [r5, #260]	@ 0x104
   3a84e:	d098      	beq.n	3a782 <d_print_mod_list+0x13a>
   3a850:	29ff      	cmp	r1, #255	@ 0xff
   3a852:	f816 7b01 	ldrb.w	r7, [r6], #1
   3a856:	d1f2      	bne.n	3a83e <d_print_mod_list+0x1f6>
   3a858:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
   3a85c:	f8d5 210c 	ldr.w	r2, [r5, #268]	@ 0x10c
   3a860:	f885 90ff 	strb.w	r9, [r5, #255]	@ 0xff
   3a864:	4628      	mov	r0, r5
   3a866:	4798      	blx	r3
   3a868:	f8d5 2128 	ldr.w	r2, [r5, #296]	@ 0x128
   3a86c:	2101      	movs	r1, #1
   3a86e:	440a      	add	r2, r1
   3a870:	2300      	movs	r3, #0
   3a872:	f8c5 2128 	str.w	r2, [r5, #296]	@ 0x128
   3a876:	e7e4      	b.n	3a842 <d_print_mod_list+0x1fa>
   3a878:	0003ffd8 	.word	0x0003ffd8
   3a87c:	0003ffdc 	.word	0x0003ffdc
   3a880:	0003ff64 	.word	0x0003ff64
   3a884:	0003ffec 	.word	0x0003ffec

0003a888 <d_print_array_type>:
   3a888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a88c:	4604      	mov	r4, r0
   3a88e:	4616      	mov	r6, r2
   3a890:	b39b      	cbz	r3, 3a8fa <d_print_array_type+0x72>
   3a892:	461f      	mov	r7, r3
   3a894:	e001      	b.n	3a89a <d_print_array_type+0x12>
   3a896:	681b      	ldr	r3, [r3, #0]
   3a898:	b353      	cbz	r3, 3a8f0 <d_print_array_type+0x68>
   3a89a:	689d      	ldr	r5, [r3, #8]
   3a89c:	2d00      	cmp	r5, #0
   3a89e:	d1fa      	bne.n	3a896 <d_print_array_type+0xe>
   3a8a0:	685b      	ldr	r3, [r3, #4]
   3a8a2:	781b      	ldrb	r3, [r3, #0]
   3a8a4:	2b2a      	cmp	r3, #42	@ 0x2a
   3a8a6:	d15e      	bne.n	3a966 <d_print_array_type+0xde>
   3a8a8:	2111      	movs	r1, #17
   3a8aa:	462b      	mov	r3, r5
   3a8ac:	463a      	mov	r2, r7
   3a8ae:	4620      	mov	r0, r4
   3a8b0:	f7ff feca 	bl	3a648 <d_print_mod_list>
   3a8b4:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3a8b8:	29ff      	cmp	r1, #255	@ 0xff
   3a8ba:	d02b      	beq.n	3a914 <d_print_array_type+0x8c>
   3a8bc:	225b      	movs	r2, #91	@ 0x5b
   3a8be:	1c4b      	adds	r3, r1, #1
   3a8c0:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3a8c4:	5462      	strb	r2, [r4, r1]
   3a8c6:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3a8ca:	68f2      	ldr	r2, [r6, #12]
   3a8cc:	b12a      	cbz	r2, 3a8da <d_print_array_type+0x52>
   3a8ce:	2111      	movs	r1, #17
   3a8d0:	4620      	mov	r0, r4
   3a8d2:	f7ff fa8f 	bl	39df4 <d_print_comp>
   3a8d6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3a8da:	2bff      	cmp	r3, #255	@ 0xff
   3a8dc:	d033      	beq.n	3a946 <d_print_array_type+0xbe>
   3a8de:	1c59      	adds	r1, r3, #1
   3a8e0:	225d      	movs	r2, #93	@ 0x5d
   3a8e2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a8e6:	54e2      	strb	r2, [r4, r3]
   3a8e8:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3a8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a8f0:	463a      	mov	r2, r7
   3a8f2:	2111      	movs	r1, #17
   3a8f4:	4620      	mov	r0, r4
   3a8f6:	f7ff fea7 	bl	3a648 <d_print_mod_list>
   3a8fa:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3a8fe:	2bff      	cmp	r3, #255	@ 0xff
   3a900:	d071      	beq.n	3a9e6 <d_print_array_type+0x15e>
   3a902:	1c59      	adds	r1, r3, #1
   3a904:	2220      	movs	r2, #32
   3a906:	29ff      	cmp	r1, #255	@ 0xff
   3a908:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a90c:	54e2      	strb	r2, [r4, r3]
   3a90e:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3a912:	d1d3      	bne.n	3a8bc <d_print_array_type+0x34>
   3a914:	2200      	movs	r2, #0
   3a916:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a91a:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
   3a91e:	4620      	mov	r0, r4
   3a920:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a924:	4798      	blx	r3
   3a926:	225b      	movs	r2, #91	@ 0x5b
   3a928:	f8d4 1128 	ldr.w	r1, [r4, #296]	@ 0x128
   3a92c:	7022      	strb	r2, [r4, #0]
   3a92e:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3a932:	68f2      	ldr	r2, [r6, #12]
   3a934:	2301      	movs	r3, #1
   3a936:	4419      	add	r1, r3
   3a938:	f8c4 1128 	str.w	r1, [r4, #296]	@ 0x128
   3a93c:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3a940:	2a00      	cmp	r2, #0
   3a942:	d1c4      	bne.n	3a8ce <d_print_array_type+0x46>
   3a944:	e7cb      	b.n	3a8de <d_print_array_type+0x56>
   3a946:	2500      	movs	r5, #0
   3a948:	4619      	mov	r1, r3
   3a94a:	e9d4 6242 	ldrd	r6, r2, [r4, #264]	@ 0x108
   3a94e:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3a952:	4620      	mov	r0, r4
   3a954:	47b0      	blx	r6
   3a956:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3a95a:	2101      	movs	r1, #1
   3a95c:	440a      	add	r2, r1
   3a95e:	462b      	mov	r3, r5
   3a960:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3a964:	e7bc      	b.n	3a8e0 <d_print_array_type+0x58>
   3a966:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 3aa34 <d_print_array_type+0x1ac>
   3a96a:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3a96e:	f108 0a02 	add.w	sl, r8, #2
   3a972:	e00a      	b.n	3a98a <d_print_array_type+0x102>
   3a974:	460a      	mov	r2, r1
   3a976:	45c2      	cmp	sl, r8
   3a978:	f101 0101 	add.w	r1, r1, #1
   3a97c:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a980:	f804 9002 	strb.w	r9, [r4, r2]
   3a984:	f884 9104 	strb.w	r9, [r4, #260]	@ 0x104
   3a988:	d01a      	beq.n	3a9c0 <d_print_array_type+0x138>
   3a98a:	29ff      	cmp	r1, #255	@ 0xff
   3a98c:	f818 9b01 	ldrb.w	r9, [r8], #1
   3a990:	d1f0      	bne.n	3a974 <d_print_array_type+0xec>
   3a992:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a996:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3a99a:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3a99e:	4620      	mov	r0, r4
   3a9a0:	4798      	blx	r3
   3a9a2:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a9a6:	2101      	movs	r1, #1
   3a9a8:	2200      	movs	r2, #0
   3a9aa:	440b      	add	r3, r1
   3a9ac:	45c2      	cmp	sl, r8
   3a9ae:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3a9b2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3a9b6:	f804 9002 	strb.w	r9, [r4, r2]
   3a9ba:	f884 9104 	strb.w	r9, [r4, #260]	@ 0x104
   3a9be:	d1e4      	bne.n	3a98a <d_print_array_type+0x102>
   3a9c0:	2111      	movs	r1, #17
   3a9c2:	2300      	movs	r3, #0
   3a9c4:	463a      	mov	r2, r7
   3a9c6:	4620      	mov	r0, r4
   3a9c8:	f7ff fe3e 	bl	3a648 <d_print_mod_list>
   3a9cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3a9d0:	29ff      	cmp	r1, #255	@ 0xff
   3a9d2:	d01b      	beq.n	3aa0c <d_print_array_type+0x184>
   3a9d4:	1c4b      	adds	r3, r1, #1
   3a9d6:	2229      	movs	r2, #41	@ 0x29
   3a9d8:	2bff      	cmp	r3, #255	@ 0xff
   3a9da:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3a9de:	5462      	strb	r2, [r4, r1]
   3a9e0:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3a9e4:	d18d      	bne.n	3a902 <d_print_array_type+0x7a>
   3a9e6:	2200      	movs	r2, #0
   3a9e8:	4619      	mov	r1, r3
   3a9ea:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
   3a9ee:	f8d4 5108 	ldr.w	r5, [r4, #264]	@ 0x108
   3a9f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3a9f6:	4620      	mov	r0, r4
   3a9f8:	47a8      	blx	r5
   3a9fa:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3a9fe:	2101      	movs	r1, #1
   3aa00:	2220      	movs	r2, #32
   3aa02:	440b      	add	r3, r1
   3aa04:	7022      	strb	r2, [r4, #0]
   3aa06:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3aa0a:	e757      	b.n	3a8bc <d_print_array_type+0x34>
   3aa0c:	2200      	movs	r2, #0
   3aa0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3aa12:	f884 20ff 	strb.w	r2, [r4, #255]	@ 0xff
   3aa16:	4620      	mov	r0, r4
   3aa18:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3aa1c:	4798      	blx	r3
   3aa1e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3aa22:	f242 0229 	movw	r2, #8233	@ 0x2029
   3aa26:	3301      	adds	r3, #1
   3aa28:	2102      	movs	r1, #2
   3aa2a:	8022      	strh	r2, [r4, #0]
   3aa2c:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3aa30:	e744      	b.n	3a8bc <d_print_array_type+0x34>
   3aa32:	bf00      	nop
   3aa34:	000401e0 	.word	0x000401e0

0003aa38 <d_print_expr_op>:
   3aa38:	7811      	ldrb	r1, [r2, #0]
   3aa3a:	2932      	cmp	r1, #50	@ 0x32
   3aa3c:	d002      	beq.n	3aa44 <d_print_expr_op+0xc>
   3aa3e:	2111      	movs	r1, #17
   3aa40:	f7ff b9d8 	b.w	39df4 <d_print_comp>
   3aa44:	68d3      	ldr	r3, [r2, #12]
   3aa46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3aa4a:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
   3aa4e:	b367      	cbz	r7, 3aaaa <d_print_expr_op+0x72>
   3aa50:	442f      	add	r7, r5
   3aa52:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3aa56:	4604      	mov	r4, r0
   3aa58:	3d01      	subs	r5, #1
   3aa5a:	3f01      	subs	r7, #1
   3aa5c:	f04f 0800 	mov.w	r8, #0
   3aa60:	e009      	b.n	3aa76 <d_print_expr_op+0x3e>
   3aa62:	460b      	mov	r3, r1
   3aa64:	42bd      	cmp	r5, r7
   3aa66:	f101 0101 	add.w	r1, r1, #1
   3aa6a:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3aa6e:	54e6      	strb	r6, [r4, r3]
   3aa70:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3aa74:	d019      	beq.n	3aaaa <d_print_expr_op+0x72>
   3aa76:	29ff      	cmp	r1, #255	@ 0xff
   3aa78:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   3aa7c:	d1f1      	bne.n	3aa62 <d_print_expr_op+0x2a>
   3aa7e:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3aa82:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3aa86:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3aa8a:	4620      	mov	r0, r4
   3aa8c:	4798      	blx	r3
   3aa8e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3aa92:	2101      	movs	r1, #1
   3aa94:	2300      	movs	r3, #0
   3aa96:	440a      	add	r2, r1
   3aa98:	42bd      	cmp	r5, r7
   3aa9a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3aa9e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3aaa2:	54e6      	strb	r6, [r4, r3]
   3aaa4:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3aaa8:	d1e5      	bne.n	3aa76 <d_print_expr_op+0x3e>
   3aaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3aaae:	bf00      	nop

0003aab0 <d_demangle_callback.constprop.0>:
   3aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3aab4:	b0e9      	sub	sp, #420	@ 0x1a4
   3aab6:	7803      	ldrb	r3, [r0, #0]
   3aab8:	af00      	add	r7, sp, #0
   3aaba:	2b5f      	cmp	r3, #95	@ 0x5f
   3aabc:	4605      	mov	r5, r0
   3aabe:	4689      	mov	r9, r1
   3aac0:	607a      	str	r2, [r7, #4]
   3aac2:	f000 8130 	beq.w	3ad26 <d_demangle_callback.constprop.0+0x276>
   3aac6:	499f      	ldr	r1, [pc, #636]	@ (3ad44 <d_demangle_callback.constprop.0+0x294>)
   3aac8:	2208      	movs	r2, #8
   3aaca:	4628      	mov	r0, r5
   3aacc:	f7ec f94c 	bl	26d68 <strncmp>
   3aad0:	4603      	mov	r3, r0
   3aad2:	2800      	cmp	r0, #0
   3aad4:	f040 8083 	bne.w	3abde <d_demangle_callback.constprop.0+0x12e>
   3aad8:	7a2a      	ldrb	r2, [r5, #8]
   3aada:	2a2e      	cmp	r2, #46	@ 0x2e
   3aadc:	d078      	beq.n	3abd0 <d_demangle_callback.constprop.0+0x120>
   3aade:	2a5f      	cmp	r2, #95	@ 0x5f
   3aae0:	d076      	beq.n	3abd0 <d_demangle_callback.constprop.0+0x120>
   3aae2:	2a24      	cmp	r2, #36	@ 0x24
   3aae4:	d074      	beq.n	3abd0 <d_demangle_callback.constprop.0+0x120>
   3aae6:	469b      	mov	fp, r3
   3aae8:	2b00      	cmp	r3, #0
   3aaea:	f04f 0301 	mov.w	r3, #1
   3aaee:	64bb      	str	r3, [r7, #72]	@ 0x48
   3aaf0:	bf14      	ite	ne
   3aaf2:	2345      	movne	r3, #69	@ 0x45
   3aaf4:	2346      	moveq	r3, #70	@ 0x46
   3aaf6:	60bb      	str	r3, [r7, #8]
   3aaf8:	f1ab 0302 	sub.w	r3, fp, #2
   3aafc:	b2db      	uxtb	r3, r3
   3aafe:	60fb      	str	r3, [r7, #12]
   3ab00:	f04f 0a11 	mov.w	sl, #17
   3ab04:	f8c7 9000 	str.w	r9, [r7]
   3ab08:	4628      	mov	r0, r5
   3ab0a:	f7dd fdd9 	bl	186c0 <strlen>
   3ab0e:	0046      	lsls	r6, r0, #1
   3ab10:	2100      	movs	r1, #0
   3ab12:	182b      	adds	r3, r5, r0
   3ab14:	f5b6 6f00 	cmp.w	r6, #2048	@ 0x800
   3ab18:	e9c7 5304 	strd	r5, r3, [r7, #16]
   3ab1c:	e9c7 a506 	strd	sl, r5, [r7, #24]
   3ab20:	e9c7 1609 	strd	r1, r6, [r7, #36]	@ 0x24
   3ab24:	e9c7 100c 	strd	r1, r0, [r7, #48]	@ 0x30
   3ab28:	e9c7 110e 	strd	r1, r1, [r7, #56]	@ 0x38
   3ab2c:	e9c7 1110 	strd	r1, r1, [r7, #64]	@ 0x40
   3ab30:	64f9      	str	r1, [r7, #76]	@ 0x4c
   3ab32:	f200 8100 	bhi.w	3ad36 <d_demangle_callback.constprop.0+0x286>
   3ab36:	46e8      	mov	r8, sp
   3ab38:	0083      	lsls	r3, r0, #2
   3ab3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3ab3e:	eba8 02c0 	sub.w	r2, r8, r0, lsl #3
   3ab42:	3307      	adds	r3, #7
   3ab44:	4695      	mov	sp, r2
   3ab46:	f023 0307 	bic.w	r3, r3, #7
   3ab4a:	46e9      	mov	r9, sp
   3ab4c:	f1bb 0f01 	cmp.w	fp, #1
   3ab50:	ebad 0d03 	sub.w	sp, sp, r3
   3ab54:	f8c7 9020 	str.w	r9, [r7, #32]
   3ab58:	f8c7 d02c 	str.w	sp, [r7, #44]	@ 0x2c
   3ab5c:	d049      	beq.n	3abf2 <d_demangle_callback.constprop.0+0x142>
   3ab5e:	68fb      	ldr	r3, [r7, #12]
   3ab60:	2b01      	cmp	r3, #1
   3ab62:	d83e      	bhi.n	3abe2 <d_demangle_callback.constprop.0+0x132>
   3ab64:	7aeb      	ldrb	r3, [r5, #11]
   3ab66:	f105 040b 	add.w	r4, r5, #11
   3ab6a:	2b5f      	cmp	r3, #95	@ 0x5f
   3ab6c:	61fc      	str	r4, [r7, #28]
   3ab6e:	d103      	bne.n	3ab78 <d_demangle_callback.constprop.0+0xc8>
   3ab70:	7b2b      	ldrb	r3, [r5, #12]
   3ab72:	2b5a      	cmp	r3, #90	@ 0x5a
   3ab74:	f000 80b1 	beq.w	3acda <d_demangle_callback.constprop.0+0x22a>
   3ab78:	4620      	mov	r0, r4
   3ab7a:	f7dd fda1 	bl	186c0 <strlen>
   3ab7e:	2e00      	cmp	r6, #0
   3ab80:	f000 80c7 	beq.w	3ad12 <d_demangle_callback.constprop.0+0x262>
   3ab84:	2300      	movs	r3, #0
   3ab86:	2201      	movs	r2, #1
   3ab88:	e9c9 3301 	strd	r3, r3, [r9, #4]
   3ab8c:	627a      	str	r2, [r7, #36]	@ 0x24
   3ab8e:	2800      	cmp	r0, #0
   3ab90:	f000 80bf 	beq.w	3ad12 <d_demangle_callback.constprop.0+0x262>
   3ab94:	e9c9 4003 	strd	r4, r0, [r9, #12]
   3ab98:	f889 3000 	strb.w	r3, [r9]
   3ab9c:	2300      	movs	r3, #0
   3ab9e:	68b9      	ldr	r1, [r7, #8]
   3aba0:	464a      	mov	r2, r9
   3aba2:	f107 0010 	add.w	r0, r7, #16
   3aba6:	f7fa f98d 	bl	34ec4 <d_make_comp>
   3abaa:	4606      	mov	r6, r0
   3abac:	4620      	mov	r0, r4
   3abae:	f7dd fd87 	bl	186c0 <strlen>
   3abb2:	1823      	adds	r3, r4, r0
   3abb4:	61fb      	str	r3, [r7, #28]
   3abb6:	5c23      	ldrb	r3, [r4, r0]
   3abb8:	b913      	cbnz	r3, 3abc0 <d_demangle_callback.constprop.0+0x110>
   3abba:	2e00      	cmp	r6, #0
   3abbc:	f040 80c4 	bne.w	3ad48 <d_demangle_callback.constprop.0+0x298>
   3abc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
   3abc2:	3301      	adds	r3, #1
   3abc4:	f040 80a8 	bne.w	3ad18 <d_demangle_callback.constprop.0+0x268>
   3abc8:	2300      	movs	r3, #0
   3abca:	64bb      	str	r3, [r7, #72]	@ 0x48
   3abcc:	46c5      	mov	sp, r8
   3abce:	e79b      	b.n	3ab08 <d_demangle_callback.constprop.0+0x58>
   3abd0:	7a6b      	ldrb	r3, [r5, #9]
   3abd2:	2b44      	cmp	r3, #68	@ 0x44
   3abd4:	f000 811f 	beq.w	3ae16 <d_demangle_callback.constprop.0+0x366>
   3abd8:	2b49      	cmp	r3, #73	@ 0x49
   3abda:	f000 8111 	beq.w	3ae00 <d_demangle_callback.constprop.0+0x350>
   3abde:	2300      	movs	r3, #0
   3abe0:	e781      	b.n	3aae6 <d_demangle_callback.constprop.0+0x36>
   3abe2:	f107 0010 	add.w	r0, r7, #16
   3abe6:	f7fa fdfd 	bl	357e4 <d_type>
   3abea:	69fb      	ldr	r3, [r7, #28]
   3abec:	4606      	mov	r6, r0
   3abee:	781b      	ldrb	r3, [r3, #0]
   3abf0:	e7e2      	b.n	3abb8 <d_demangle_callback.constprop.0+0x108>
   3abf2:	782b      	ldrb	r3, [r5, #0]
   3abf4:	2b5f      	cmp	r3, #95	@ 0x5f
   3abf6:	d1e3      	bne.n	3abc0 <d_demangle_callback.constprop.0+0x110>
   3abf8:	786b      	ldrb	r3, [r5, #1]
   3abfa:	1c6a      	adds	r2, r5, #1
   3abfc:	2b5a      	cmp	r3, #90	@ 0x5a
   3abfe:	61fa      	str	r2, [r7, #28]
   3ac00:	d1de      	bne.n	3abc0 <d_demangle_callback.constprop.0+0x110>
   3ac02:	78ab      	ldrb	r3, [r5, #2]
   3ac04:	1caa      	adds	r2, r5, #2
   3ac06:	2b47      	cmp	r3, #71	@ 0x47
   3ac08:	61fa      	str	r2, [r7, #28]
   3ac0a:	d07a      	beq.n	3ad02 <d_demangle_callback.constprop.0+0x252>
   3ac0c:	2b54      	cmp	r3, #84	@ 0x54
   3ac0e:	d078      	beq.n	3ad02 <d_demangle_callback.constprop.0+0x252>
   3ac10:	4659      	mov	r1, fp
   3ac12:	f107 0010 	add.w	r0, r7, #16
   3ac16:	f7fc fa03 	bl	37020 <d_encoding.part.0>
   3ac1a:	4606      	mov	r6, r0
   3ac1c:	e9d7 2106 	ldrd	r2, r1, [r7, #24]
   3ac20:	07d2      	lsls	r2, r2, #31
   3ac22:	780b      	ldrb	r3, [r1, #0]
   3ac24:	d5c8      	bpl.n	3abb8 <d_demangle_callback.constprop.0+0x108>
   3ac26:	2b2e      	cmp	r3, #46	@ 0x2e
   3ac28:	d1c6      	bne.n	3abb8 <d_demangle_callback.constprop.0+0x108>
   3ac2a:	f04f 0900 	mov.w	r9, #0
   3ac2e:	4632      	mov	r2, r6
   3ac30:	784b      	ldrb	r3, [r1, #1]
   3ac32:	f1a3 0061 	sub.w	r0, r3, #97	@ 0x61
   3ac36:	2819      	cmp	r0, #25
   3ac38:	d905      	bls.n	3ac46 <d_demangle_callback.constprop.0+0x196>
   3ac3a:	2b5f      	cmp	r3, #95	@ 0x5f
   3ac3c:	d003      	beq.n	3ac46 <d_demangle_callback.constprop.0+0x196>
   3ac3e:	3b30      	subs	r3, #48	@ 0x30
   3ac40:	2b09      	cmp	r3, #9
   3ac42:	f200 80f1 	bhi.w	3ae28 <d_demangle_callback.constprop.0+0x378>
   3ac46:	1c88      	adds	r0, r1, #2
   3ac48:	7803      	ldrb	r3, [r0, #0]
   3ac4a:	f1a3 0661 	sub.w	r6, r3, #97	@ 0x61
   3ac4e:	2e19      	cmp	r6, #25
   3ac50:	4604      	mov	r4, r0
   3ac52:	f1a3 0c30 	sub.w	ip, r3, #48	@ 0x30
   3ac56:	f100 0001 	add.w	r0, r0, #1
   3ac5a:	d9f5      	bls.n	3ac48 <d_demangle_callback.constprop.0+0x198>
   3ac5c:	f1bc 0f09 	cmp.w	ip, #9
   3ac60:	d9f2      	bls.n	3ac48 <d_demangle_callback.constprop.0+0x198>
   3ac62:	2b5f      	cmp	r3, #95	@ 0x5f
   3ac64:	d0f0      	beq.n	3ac48 <d_demangle_callback.constprop.0+0x198>
   3ac66:	2b2e      	cmp	r3, #46	@ 0x2e
   3ac68:	d112      	bne.n	3ac90 <d_demangle_callback.constprop.0+0x1e0>
   3ac6a:	7863      	ldrb	r3, [r4, #1]
   3ac6c:	3b30      	subs	r3, #48	@ 0x30
   3ac6e:	2b09      	cmp	r3, #9
   3ac70:	d80e      	bhi.n	3ac90 <d_demangle_callback.constprop.0+0x1e0>
   3ac72:	78a3      	ldrb	r3, [r4, #2]
   3ac74:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
   3ac78:	2809      	cmp	r0, #9
   3ac7a:	f104 0402 	add.w	r4, r4, #2
   3ac7e:	d8f2      	bhi.n	3ac66 <d_demangle_callback.constprop.0+0x1b6>
   3ac80:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   3ac84:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
   3ac88:	2809      	cmp	r0, #9
   3ac8a:	d9f9      	bls.n	3ac80 <d_demangle_callback.constprop.0+0x1d0>
   3ac8c:	2b2e      	cmp	r3, #46	@ 0x2e
   3ac8e:	d0ec      	beq.n	3ac6a <d_demangle_callback.constprop.0+0x1ba>
   3ac90:	e9d7 0309 	ldrd	r0, r3, [r7, #36]	@ 0x24
   3ac94:	4298      	cmp	r0, r3
   3ac96:	61fc      	str	r4, [r7, #28]
   3ac98:	eba4 0601 	sub.w	r6, r4, r1
   3ac9c:	da37      	bge.n	3ad0e <d_demangle_callback.constprop.0+0x25e>
   3ac9e:	f8d7 c020 	ldr.w	ip, [r7, #32]
   3aca2:	eb00 0e80 	add.w	lr, r0, r0, lsl #2
   3aca6:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
   3acaa:	3001      	adds	r0, #1
   3acac:	2e00      	cmp	r6, #0
   3acae:	e9c3 9901 	strd	r9, r9, [r3, #4]
   3acb2:	6278      	str	r0, [r7, #36]	@ 0x24
   3acb4:	dd2b      	ble.n	3ad0e <d_demangle_callback.constprop.0+0x25e>
   3acb6:	e9c3 9901 	strd	r9, r9, [r3, #4]
   3acba:	f80c 902e 	strb.w	r9, [ip, lr, lsl #2]
   3acbe:	e9c3 1603 	strd	r1, r6, [r3, #12]
   3acc2:	214f      	movs	r1, #79	@ 0x4f
   3acc4:	f107 0010 	add.w	r0, r7, #16
   3acc8:	f7fa f8fc 	bl	34ec4 <d_make_comp>
   3accc:	7823      	ldrb	r3, [r4, #0]
   3acce:	2b2e      	cmp	r3, #46	@ 0x2e
   3acd0:	4602      	mov	r2, r0
   3acd2:	f040 809e 	bne.w	3ae12 <d_demangle_callback.constprop.0+0x362>
   3acd6:	4621      	mov	r1, r4
   3acd8:	e7aa      	b.n	3ac30 <d_demangle_callback.constprop.0+0x180>
   3acda:	7b6b      	ldrb	r3, [r5, #13]
   3acdc:	f105 020d 	add.w	r2, r5, #13
   3ace0:	2b47      	cmp	r3, #71	@ 0x47
   3ace2:	61fa      	str	r2, [r7, #28]
   3ace4:	f107 0010 	add.w	r0, r7, #16
   3ace8:	d001      	beq.n	3acee <d_demangle_callback.constprop.0+0x23e>
   3acea:	2b54      	cmp	r3, #84	@ 0x54
   3acec:	d104      	bne.n	3acf8 <d_demangle_callback.constprop.0+0x248>
   3acee:	f7fc fa17 	bl	37120 <d_special_name>
   3acf2:	69fc      	ldr	r4, [r7, #28]
   3acf4:	4681      	mov	r9, r0
   3acf6:	e751      	b.n	3ab9c <d_demangle_callback.constprop.0+0xec>
   3acf8:	f7fc f992 	bl	37020 <d_encoding.part.0>
   3acfc:	69fc      	ldr	r4, [r7, #28]
   3acfe:	4681      	mov	r9, r0
   3ad00:	e74c      	b.n	3ab9c <d_demangle_callback.constprop.0+0xec>
   3ad02:	f107 0010 	add.w	r0, r7, #16
   3ad06:	f7fc fa0b 	bl	37120 <d_special_name>
   3ad0a:	4606      	mov	r6, r0
   3ad0c:	e786      	b.n	3ac1c <d_demangle_callback.constprop.0+0x16c>
   3ad0e:	2300      	movs	r3, #0
   3ad10:	e7d7      	b.n	3acc2 <d_demangle_callback.constprop.0+0x212>
   3ad12:	f04f 0900 	mov.w	r9, #0
   3ad16:	e741      	b.n	3ab9c <d_demangle_callback.constprop.0+0xec>
   3ad18:	2000      	movs	r0, #0
   3ad1a:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
   3ad1e:	46c5      	mov	sp, r8
   3ad20:	46bd      	mov	sp, r7
   3ad22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ad26:	7843      	ldrb	r3, [r0, #1]
   3ad28:	2b5a      	cmp	r3, #90	@ 0x5a
   3ad2a:	f47f aecc 	bne.w	3aac6 <d_demangle_callback.constprop.0+0x16>
   3ad2e:	2300      	movs	r3, #0
   3ad30:	f04f 0b01 	mov.w	fp, #1
   3ad34:	e6d8      	b.n	3aae8 <d_demangle_callback.constprop.0+0x38>
   3ad36:	4608      	mov	r0, r1
   3ad38:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
   3ad3c:	46bd      	mov	sp, r7
   3ad3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ad42:	bf00      	nop
   3ad44:	0003ff68 	.word	0x0003ff68
   3ad48:	f107 0450 	add.w	r4, r7, #80	@ 0x50
   3ad4c:	2000      	movs	r0, #0
   3ad4e:	2100      	movs	r1, #0
   3ad50:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
   3ad54:	687a      	ldr	r2, [r7, #4]
   3ad56:	f8d7 9000 	ldr.w	r9, [r7]
   3ad5a:	f8c4 210c 	str.w	r2, [r4, #268]	@ 0x10c
   3ad5e:	4631      	mov	r1, r6
   3ad60:	4620      	mov	r0, r4
   3ad62:	e9c7 3361 	strd	r3, r3, [r7, #388]	@ 0x184
   3ad66:	e9c4 3344 	strd	r3, r3, [r4, #272]	@ 0x110
   3ad6a:	e9c4 3349 	strd	r3, r3, [r4, #292]	@ 0x124
   3ad6e:	e9c4 3346 	strd	r3, r3, [r4, #280]	@ 0x118
   3ad72:	60fb      	str	r3, [r7, #12]
   3ad74:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3ad78:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3ad7c:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
   3ad80:	f8c4 312c 	str.w	r3, [r4, #300]	@ 0x12c
   3ad84:	f8c4 9108 	str.w	r9, [r4, #264]	@ 0x108
   3ad88:	f7fa f99c 	bl	350c4 <d_count_templates_scopes>
   3ad8c:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   3ad90:	68fb      	ldr	r3, [r7, #12]
   3ad92:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
   3ad96:	da01      	bge.n	3ad9c <d_demangle_callback.constprop.0+0x2ec>
   3ad98:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
   3ad9c:	f8d4 1138 	ldr.w	r1, [r4, #312]	@ 0x138
   3ada0:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
   3ada4:	2901      	cmp	r1, #1
   3ada6:	fb01 f303 	mul.w	r3, r1, r3
   3adaa:	4632      	mov	r2, r6
   3adac:	bfb8      	it	lt
   3adae:	2101      	movlt	r1, #1
   3adb0:	466e      	mov	r6, sp
   3adb2:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
   3adb6:	2b01      	cmp	r3, #1
   3adb8:	468d      	mov	sp, r1
   3adba:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
   3adbe:	4668      	mov	r0, sp
   3adc0:	bfb8      	it	lt
   3adc2:	2301      	movlt	r3, #1
   3adc4:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
   3adc8:	469d      	mov	sp, r3
   3adca:	2500      	movs	r5, #0
   3adcc:	f8c4 1130 	str.w	r1, [r4, #304]	@ 0x130
   3add0:	4620      	mov	r0, r4
   3add2:	2111      	movs	r1, #17
   3add4:	f8c4 d13c 	str.w	sp, [r4, #316]	@ 0x13c
   3add8:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
   3addc:	f7ff f80a 	bl	39df4 <d_print_comp>
   3ade0:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3ade4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3ade8:	5465      	strb	r5, [r4, r1]
   3adea:	4620      	mov	r0, r4
   3adec:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3adf0:	46b5      	mov	sp, r6
   3adf2:	4798      	blx	r3
   3adf4:	f8d4 0118 	ldr.w	r0, [r4, #280]	@ 0x118
   3adf8:	fab0 f080 	clz	r0, r0
   3adfc:	0940      	lsrs	r0, r0, #5
   3adfe:	e78c      	b.n	3ad1a <d_demangle_callback.constprop.0+0x26a>
   3ae00:	7aab      	ldrb	r3, [r5, #10]
   3ae02:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
   3ae06:	fab3 f383 	clz	r3, r3
   3ae0a:	095b      	lsrs	r3, r3, #5
   3ae0c:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   3ae10:	e66a      	b.n	3aae8 <d_demangle_callback.constprop.0+0x38>
   3ae12:	4606      	mov	r6, r0
   3ae14:	e6d0      	b.n	3abb8 <d_demangle_callback.constprop.0+0x108>
   3ae16:	7aab      	ldrb	r3, [r5, #10]
   3ae18:	2b5f      	cmp	r3, #95	@ 0x5f
   3ae1a:	f04f 0300 	mov.w	r3, #0
   3ae1e:	f47f ae62 	bne.w	3aae6 <d_demangle_callback.constprop.0+0x36>
   3ae22:	f04f 0b03 	mov.w	fp, #3
   3ae26:	e65f      	b.n	3aae8 <d_demangle_callback.constprop.0+0x38>
   3ae28:	69fb      	ldr	r3, [r7, #28]
   3ae2a:	4616      	mov	r6, r2
   3ae2c:	781b      	ldrb	r3, [r3, #0]
   3ae2e:	e6c3      	b.n	3abb8 <d_demangle_callback.constprop.0+0x108>

0003ae30 <d_print_subexpr>:
   3ae30:	b570      	push	{r4, r5, r6, lr}
   3ae32:	7813      	ldrb	r3, [r2, #0]
   3ae34:	2b01      	cmp	r3, #1
   3ae36:	b082      	sub	sp, #8
   3ae38:	4615      	mov	r5, r2
   3ae3a:	4604      	mov	r4, r0
   3ae3c:	d903      	bls.n	3ae46 <d_print_subexpr+0x16>
   3ae3e:	2b31      	cmp	r3, #49	@ 0x31
   3ae40:	d001      	beq.n	3ae46 <d_print_subexpr+0x16>
   3ae42:	2b06      	cmp	r3, #6
   3ae44:	d136      	bne.n	3aeb4 <d_print_subexpr+0x84>
   3ae46:	686b      	ldr	r3, [r5, #4]
   3ae48:	2b01      	cmp	r3, #1
   3ae4a:	dc2e      	bgt.n	3aeaa <d_print_subexpr+0x7a>
   3ae4c:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   3ae50:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
   3ae54:	dc29      	bgt.n	3aeaa <d_print_subexpr+0x7a>
   3ae56:	2601      	movs	r6, #1
   3ae58:	3301      	adds	r3, #1
   3ae5a:	3201      	adds	r2, #1
   3ae5c:	606b      	str	r3, [r5, #4]
   3ae5e:	2111      	movs	r1, #17
   3ae60:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
   3ae64:	f8c4 211c 	str.w	r2, [r4, #284]	@ 0x11c
   3ae68:	f8c4 d12c 	str.w	sp, [r4, #300]	@ 0x12c
   3ae6c:	462a      	mov	r2, r5
   3ae6e:	4620      	mov	r0, r4
   3ae70:	9301      	str	r3, [sp, #4]
   3ae72:	9500      	str	r5, [sp, #0]
   3ae74:	f7fc fcf0 	bl	37858 <d_print_comp_inner>
   3ae78:	686a      	ldr	r2, [r5, #4]
   3ae7a:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
   3ae7e:	9901      	ldr	r1, [sp, #4]
   3ae80:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
   3ae84:	3a01      	subs	r2, #1
   3ae86:	3b01      	subs	r3, #1
   3ae88:	606a      	str	r2, [r5, #4]
   3ae8a:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
   3ae8e:	b97e      	cbnz	r6, 3aeb0 <d_print_subexpr+0x80>
   3ae90:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3ae94:	29ff      	cmp	r1, #255	@ 0xff
   3ae96:	d024      	beq.n	3aee2 <d_print_subexpr+0xb2>
   3ae98:	1c4a      	adds	r2, r1, #1
   3ae9a:	2329      	movs	r3, #41	@ 0x29
   3ae9c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3aea0:	5463      	strb	r3, [r4, r1]
   3aea2:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3aea6:	b002      	add	sp, #8
   3aea8:	bd70      	pop	{r4, r5, r6, pc}
   3aeaa:	2301      	movs	r3, #1
   3aeac:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
   3aeb0:	b002      	add	sp, #8
   3aeb2:	bd70      	pop	{r4, r5, r6, pc}
   3aeb4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
   3aeb8:	2bff      	cmp	r3, #255	@ 0xff
   3aeba:	d021      	beq.n	3af00 <d_print_subexpr+0xd0>
   3aebc:	1c59      	adds	r1, r3, #1
   3aebe:	2228      	movs	r2, #40	@ 0x28
   3aec0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3aec4:	54e2      	strb	r2, [r4, r3]
   3aec6:	f884 2104 	strb.w	r2, [r4, #260]	@ 0x104
   3aeca:	686b      	ldr	r3, [r5, #4]
   3aecc:	2b01      	cmp	r3, #1
   3aece:	dc04      	bgt.n	3aeda <d_print_subexpr+0xaa>
   3aed0:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   3aed4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
   3aed8:	dd21      	ble.n	3af1e <d_print_subexpr+0xee>
   3aeda:	2301      	movs	r3, #1
   3aedc:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
   3aee0:	e7d8      	b.n	3ae94 <d_print_subexpr+0x64>
   3aee2:	2500      	movs	r5, #0
   3aee4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3aee8:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3aeec:	4620      	mov	r0, r4
   3aeee:	4798      	blx	r3
   3aef0:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3aef4:	2201      	movs	r2, #1
   3aef6:	4413      	add	r3, r2
   3aef8:	4629      	mov	r1, r5
   3aefa:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3aefe:	e7cc      	b.n	3ae9a <d_print_subexpr+0x6a>
   3af00:	2600      	movs	r6, #0
   3af02:	4619      	mov	r1, r3
   3af04:	f880 60ff 	strb.w	r6, [r0, #255]	@ 0xff
   3af08:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
   3af0c:	4798      	blx	r3
   3af0e:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3af12:	2101      	movs	r1, #1
   3af14:	440a      	add	r2, r1
   3af16:	4633      	mov	r3, r6
   3af18:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3af1c:	e7cf      	b.n	3aebe <d_print_subexpr+0x8e>
   3af1e:	2600      	movs	r6, #0
   3af20:	e79a      	b.n	3ae58 <d_print_subexpr+0x28>
   3af22:	bf00      	nop

0003af24 <d_maybe_print_fold_expression>:
   3af24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3af28:	68d3      	ldr	r3, [r2, #12]
   3af2a:	68db      	ldr	r3, [r3, #12]
   3af2c:	681b      	ldr	r3, [r3, #0]
   3af2e:	7819      	ldrb	r1, [r3, #0]
   3af30:	2966      	cmp	r1, #102	@ 0x66
   3af32:	d165      	bne.n	3b000 <d_maybe_print_fold_expression+0xdc>
   3af34:	6912      	ldr	r2, [r2, #16]
   3af36:	f8d0 7124 	ldr.w	r7, [r0, #292]	@ 0x124
   3af3a:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
   3af3e:	f89a 2000 	ldrb.w	r2, [sl]
   3af42:	2a3c      	cmp	r2, #60	@ 0x3c
   3af44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   3af48:	bf08      	it	eq
   3af4a:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
   3af4e:	f8c0 2124 	str.w	r2, [r0, #292]	@ 0x124
   3af52:	785b      	ldrb	r3, [r3, #1]
   3af54:	bf18      	it	ne
   3af56:	f04f 0900 	movne.w	r9, #0
   3af5a:	2b6c      	cmp	r3, #108	@ 0x6c
   3af5c:	4604      	mov	r4, r0
   3af5e:	f000 809b 	beq.w	3b098 <d_maybe_print_fold_expression+0x174>
   3af62:	d850      	bhi.n	3b006 <d_maybe_print_fold_expression+0xe2>
   3af64:	2b4c      	cmp	r3, #76	@ 0x4c
   3af66:	d002      	beq.n	3af6e <d_maybe_print_fold_expression+0x4a>
   3af68:	2b52      	cmp	r3, #82	@ 0x52
   3af6a:	f040 8090 	bne.w	3b08e <d_maybe_print_fold_expression+0x16a>
   3af6e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3af72:	29ff      	cmp	r1, #255	@ 0xff
   3af74:	f000 80f4 	beq.w	3b160 <d_maybe_print_fold_expression+0x23c>
   3af78:	1c4b      	adds	r3, r1, #1
   3af7a:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3af7e:	2328      	movs	r3, #40	@ 0x28
   3af80:	5463      	strb	r3, [r4, r1]
   3af82:	4652      	mov	r2, sl
   3af84:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3af88:	2111      	movs	r1, #17
   3af8a:	4620      	mov	r0, r4
   3af8c:	4d7c      	ldr	r5, [pc, #496]	@ (3b180 <d_maybe_print_fold_expression+0x25c>)
   3af8e:	f7ff ff4f 	bl	3ae30 <d_print_subexpr>
   3af92:	2111      	movs	r1, #17
   3af94:	4642      	mov	r2, r8
   3af96:	4620      	mov	r0, r4
   3af98:	f7ff fd4e 	bl	3aa38 <d_print_expr_op>
   3af9c:	f04f 0a00 	mov.w	sl, #0
   3afa0:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3afa4:	f105 0b03 	add.w	fp, r5, #3
   3afa8:	e009      	b.n	3afbe <d_maybe_print_fold_expression+0x9a>
   3afaa:	460a      	mov	r2, r1
   3afac:	45ab      	cmp	fp, r5
   3afae:	f101 0101 	add.w	r1, r1, #1
   3afb2:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3afb6:	54a6      	strb	r6, [r4, r2]
   3afb8:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3afbc:	d019      	beq.n	3aff2 <d_maybe_print_fold_expression+0xce>
   3afbe:	29ff      	cmp	r1, #255	@ 0xff
   3afc0:	f815 6b01 	ldrb.w	r6, [r5], #1
   3afc4:	d1f1      	bne.n	3afaa <d_maybe_print_fold_expression+0x86>
   3afc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3afca:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3afce:	f884 a0ff 	strb.w	sl, [r4, #255]	@ 0xff
   3afd2:	4620      	mov	r0, r4
   3afd4:	4798      	blx	r3
   3afd6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3afda:	2101      	movs	r1, #1
   3afdc:	2200      	movs	r2, #0
   3afde:	440b      	add	r3, r1
   3afe0:	45ab      	cmp	fp, r5
   3afe2:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3afe6:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3afea:	54a6      	strb	r6, [r4, r2]
   3afec:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3aff0:	d1e5      	bne.n	3afbe <d_maybe_print_fold_expression+0x9a>
   3aff2:	4642      	mov	r2, r8
   3aff4:	2111      	movs	r1, #17
   3aff6:	4620      	mov	r0, r4
   3aff8:	f7ff fd1e 	bl	3aa38 <d_print_expr_op>
   3affc:	464a      	mov	r2, r9
   3affe:	e07d      	b.n	3b0fc <d_maybe_print_fold_expression+0x1d8>
   3b000:	2000      	movs	r0, #0
   3b002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b006:	2b72      	cmp	r3, #114	@ 0x72
   3b008:	d141      	bne.n	3b08e <d_maybe_print_fold_expression+0x16a>
   3b00a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3b00e:	29ff      	cmp	r1, #255	@ 0xff
   3b010:	f000 8098 	beq.w	3b144 <d_maybe_print_fold_expression+0x220>
   3b014:	1c4b      	adds	r3, r1, #1
   3b016:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3b01a:	2328      	movs	r3, #40	@ 0x28
   3b01c:	5463      	strb	r3, [r4, r1]
   3b01e:	4652      	mov	r2, sl
   3b020:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3b024:	2111      	movs	r1, #17
   3b026:	4620      	mov	r0, r4
   3b028:	4d56      	ldr	r5, [pc, #344]	@ (3b184 <d_maybe_print_fold_expression+0x260>)
   3b02a:	f7ff ff01 	bl	3ae30 <d_print_subexpr>
   3b02e:	4642      	mov	r2, r8
   3b030:	2111      	movs	r1, #17
   3b032:	4620      	mov	r0, r4
   3b034:	f7ff fd00 	bl	3aa38 <d_print_expr_op>
   3b038:	f04f 0900 	mov.w	r9, #0
   3b03c:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3b040:	f105 0804 	add.w	r8, r5, #4
   3b044:	e009      	b.n	3b05a <d_maybe_print_fold_expression+0x136>
   3b046:	460a      	mov	r2, r1
   3b048:	45a8      	cmp	r8, r5
   3b04a:	f101 0101 	add.w	r1, r1, #1
   3b04e:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3b052:	54a6      	strb	r6, [r4, r2]
   3b054:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3b058:	d019      	beq.n	3b08e <d_maybe_print_fold_expression+0x16a>
   3b05a:	29ff      	cmp	r1, #255	@ 0xff
   3b05c:	f815 6b01 	ldrb.w	r6, [r5], #1
   3b060:	d1f1      	bne.n	3b046 <d_maybe_print_fold_expression+0x122>
   3b062:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3b066:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3b06a:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3b06e:	4620      	mov	r0, r4
   3b070:	4798      	blx	r3
   3b072:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3b076:	2101      	movs	r1, #1
   3b078:	2200      	movs	r2, #0
   3b07a:	440b      	add	r3, r1
   3b07c:	45a8      	cmp	r8, r5
   3b07e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3b082:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3b086:	54a6      	strb	r6, [r4, r2]
   3b088:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3b08c:	d1e5      	bne.n	3b05a <d_maybe_print_fold_expression+0x136>
   3b08e:	f8c4 7124 	str.w	r7, [r4, #292]	@ 0x124
   3b092:	2001      	movs	r0, #1
   3b094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b098:	4d3b      	ldr	r5, [pc, #236]	@ (3b188 <d_maybe_print_fold_expression+0x264>)
   3b09a:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3b09e:	f04f 0900 	mov.w	r9, #0
   3b0a2:	f105 0b04 	add.w	fp, r5, #4
   3b0a6:	e009      	b.n	3b0bc <d_maybe_print_fold_expression+0x198>
   3b0a8:	460a      	mov	r2, r1
   3b0aa:	455d      	cmp	r5, fp
   3b0ac:	f101 0101 	add.w	r1, r1, #1
   3b0b0:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3b0b4:	54a6      	strb	r6, [r4, r2]
   3b0b6:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3b0ba:	d019      	beq.n	3b0f0 <d_maybe_print_fold_expression+0x1cc>
   3b0bc:	29ff      	cmp	r1, #255	@ 0xff
   3b0be:	f815 6b01 	ldrb.w	r6, [r5], #1
   3b0c2:	d1f1      	bne.n	3b0a8 <d_maybe_print_fold_expression+0x184>
   3b0c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3b0c8:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3b0cc:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3b0d0:	4620      	mov	r0, r4
   3b0d2:	4798      	blx	r3
   3b0d4:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3b0d8:	2101      	movs	r1, #1
   3b0da:	2200      	movs	r2, #0
   3b0dc:	440b      	add	r3, r1
   3b0de:	455d      	cmp	r5, fp
   3b0e0:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3b0e4:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3b0e8:	54a6      	strb	r6, [r4, r2]
   3b0ea:	f884 6104 	strb.w	r6, [r4, #260]	@ 0x104
   3b0ee:	d1e5      	bne.n	3b0bc <d_maybe_print_fold_expression+0x198>
   3b0f0:	4642      	mov	r2, r8
   3b0f2:	2111      	movs	r1, #17
   3b0f4:	4620      	mov	r0, r4
   3b0f6:	f7ff fc9f 	bl	3aa38 <d_print_expr_op>
   3b0fa:	4652      	mov	r2, sl
   3b0fc:	2111      	movs	r1, #17
   3b0fe:	4620      	mov	r0, r4
   3b100:	f7ff fe96 	bl	3ae30 <d_print_subexpr>
   3b104:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3b108:	29ff      	cmp	r1, #255	@ 0xff
   3b10a:	d00a      	beq.n	3b122 <d_maybe_print_fold_expression+0x1fe>
   3b10c:	1c4a      	adds	r2, r1, #1
   3b10e:	2329      	movs	r3, #41	@ 0x29
   3b110:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3b114:	2001      	movs	r0, #1
   3b116:	5463      	strb	r3, [r4, r1]
   3b118:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3b11c:	f8c4 7124 	str.w	r7, [r4, #292]	@ 0x124
   3b120:	e7b8      	b.n	3b094 <d_maybe_print_fold_expression+0x170>
   3b122:	2500      	movs	r5, #0
   3b124:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3b128:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3b12c:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3b130:	4620      	mov	r0, r4
   3b132:	4798      	blx	r3
   3b134:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3b138:	2201      	movs	r2, #1
   3b13a:	4413      	add	r3, r2
   3b13c:	4629      	mov	r1, r5
   3b13e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3b142:	e7e4      	b.n	3b10e <d_maybe_print_fold_expression+0x1ea>
   3b144:	2500      	movs	r5, #0
   3b146:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	@ 0x108
   3b14a:	f880 50ff 	strb.w	r5, [r0, #255]	@ 0xff
   3b14e:	4798      	blx	r3
   3b150:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3b154:	3301      	adds	r3, #1
   3b156:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3b15a:	4629      	mov	r1, r5
   3b15c:	2301      	movs	r3, #1
   3b15e:	e75a      	b.n	3b016 <d_maybe_print_fold_expression+0xf2>
   3b160:	2500      	movs	r5, #0
   3b162:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3b166:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3b16a:	4620      	mov	r0, r4
   3b16c:	4798      	blx	r3
   3b16e:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3b172:	3301      	adds	r3, #1
   3b174:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3b178:	4629      	mov	r1, r5
   3b17a:	2301      	movs	r3, #1
   3b17c:	e6fd      	b.n	3af7a <d_maybe_print_fold_expression+0x56>
   3b17e:	bf00      	nop
   3b180:	000401e4 	.word	0x000401e4
   3b184:	000402fc 	.word	0x000402fc
   3b188:	000402f4 	.word	0x000402f4

0003b18c <d_maybe_print_designated_init>:
   3b18c:	7813      	ldrb	r3, [r2, #0]
   3b18e:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
   3b192:	2b38      	cmp	r3, #56	@ 0x38
   3b194:	d001      	beq.n	3b19a <d_maybe_print_designated_init+0xe>
   3b196:	2000      	movs	r0, #0
   3b198:	4770      	bx	lr
   3b19a:	68d3      	ldr	r3, [r2, #12]
   3b19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b1a0:	68db      	ldr	r3, [r3, #12]
   3b1a2:	681e      	ldr	r6, [r3, #0]
   3b1a4:	7833      	ldrb	r3, [r6, #0]
   3b1a6:	2b64      	cmp	r3, #100	@ 0x64
   3b1a8:	d002      	beq.n	3b1b0 <d_maybe_print_designated_init+0x24>
   3b1aa:	2000      	movs	r0, #0
   3b1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b1b0:	7873      	ldrb	r3, [r6, #1]
   3b1b2:	2b69      	cmp	r3, #105	@ 0x69
   3b1b4:	4604      	mov	r4, r0
   3b1b6:	d011      	beq.n	3b1dc <d_maybe_print_designated_init+0x50>
   3b1b8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
   3b1bc:	2b58      	cmp	r3, #88	@ 0x58
   3b1be:	d1f4      	bne.n	3b1aa <d_maybe_print_designated_init+0x1e>
   3b1c0:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3b1c4:	6913      	ldr	r3, [r2, #16]
   3b1c6:	29ff      	cmp	r1, #255	@ 0xff
   3b1c8:	e9d3 5703 	ldrd	r5, r7, [r3, #12]
   3b1cc:	f000 808c 	beq.w	3b2e8 <d_maybe_print_designated_init+0x15c>
   3b1d0:	1c4b      	adds	r3, r1, #1
   3b1d2:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3b1d6:	235b      	movs	r3, #91	@ 0x5b
   3b1d8:	5463      	strb	r3, [r4, r1]
   3b1da:	e00c      	b.n	3b1f6 <d_maybe_print_designated_init+0x6a>
   3b1dc:	f8d0 1100 	ldr.w	r1, [r0, #256]	@ 0x100
   3b1e0:	6913      	ldr	r3, [r2, #16]
   3b1e2:	29ff      	cmp	r1, #255	@ 0xff
   3b1e4:	e9d3 5703 	ldrd	r5, r7, [r3, #12]
   3b1e8:	f000 80af 	beq.w	3b34a <d_maybe_print_designated_init+0x1be>
   3b1ec:	1c4b      	adds	r3, r1, #1
   3b1ee:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
   3b1f2:	232e      	movs	r3, #46	@ 0x2e
   3b1f4:	5463      	strb	r3, [r4, r1]
   3b1f6:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3b1fa:	462a      	mov	r2, r5
   3b1fc:	2111      	movs	r1, #17
   3b1fe:	4620      	mov	r0, r4
   3b200:	f7fe fdf8 	bl	39df4 <d_print_comp>
   3b204:	7873      	ldrb	r3, [r6, #1]
   3b206:	2b58      	cmp	r3, #88	@ 0x58
   3b208:	d038      	beq.n	3b27c <d_maybe_print_designated_init+0xf0>
   3b20a:	2b69      	cmp	r3, #105	@ 0x69
   3b20c:	d00b      	beq.n	3b226 <d_maybe_print_designated_init+0x9a>
   3b20e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3b212:	29ff      	cmp	r1, #255	@ 0xff
   3b214:	f000 8088 	beq.w	3b328 <d_maybe_print_designated_init+0x19c>
   3b218:	1c4a      	adds	r2, r1, #1
   3b21a:	235d      	movs	r3, #93	@ 0x5d
   3b21c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3b220:	5463      	strb	r3, [r4, r1]
   3b222:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3b226:	783b      	ldrb	r3, [r7, #0]
   3b228:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
   3b22c:	2b38      	cmp	r3, #56	@ 0x38
   3b22e:	d012      	beq.n	3b256 <d_maybe_print_designated_init+0xca>
   3b230:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3b234:	29ff      	cmp	r1, #255	@ 0xff
   3b236:	d066      	beq.n	3b306 <d_maybe_print_designated_init+0x17a>
   3b238:	1c4a      	adds	r2, r1, #1
   3b23a:	233d      	movs	r3, #61	@ 0x3d
   3b23c:	f8c4 2100 	str.w	r2, [r4, #256]	@ 0x100
   3b240:	4620      	mov	r0, r4
   3b242:	5463      	strb	r3, [r4, r1]
   3b244:	463a      	mov	r2, r7
   3b246:	2111      	movs	r1, #17
   3b248:	f884 3104 	strb.w	r3, [r4, #260]	@ 0x104
   3b24c:	f7ff fdf0 	bl	3ae30 <d_print_subexpr>
   3b250:	2001      	movs	r0, #1
   3b252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b256:	68fb      	ldr	r3, [r7, #12]
   3b258:	68db      	ldr	r3, [r3, #12]
   3b25a:	681b      	ldr	r3, [r3, #0]
   3b25c:	781a      	ldrb	r2, [r3, #0]
   3b25e:	2a64      	cmp	r2, #100	@ 0x64
   3b260:	d1e6      	bne.n	3b230 <d_maybe_print_designated_init+0xa4>
   3b262:	785b      	ldrb	r3, [r3, #1]
   3b264:	2b69      	cmp	r3, #105	@ 0x69
   3b266:	d003      	beq.n	3b270 <d_maybe_print_designated_init+0xe4>
   3b268:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
   3b26c:	2b58      	cmp	r3, #88	@ 0x58
   3b26e:	d1df      	bne.n	3b230 <d_maybe_print_designated_init+0xa4>
   3b270:	463a      	mov	r2, r7
   3b272:	2111      	movs	r1, #17
   3b274:	4620      	mov	r0, r4
   3b276:	f7fe fdbd 	bl	39df4 <d_print_comp>
   3b27a:	e7e9      	b.n	3b250 <d_maybe_print_designated_init+0xc4>
   3b27c:	4d3a      	ldr	r5, [pc, #232]	@ (3b368 <d_maybe_print_designated_init+0x1dc>)
   3b27e:	f8d4 1100 	ldr.w	r1, [r4, #256]	@ 0x100
   3b282:	f105 0a05 	add.w	sl, r5, #5
   3b286:	f04f 0900 	mov.w	r9, #0
   3b28a:	e00a      	b.n	3b2a2 <d_maybe_print_designated_init+0x116>
   3b28c:	460b      	mov	r3, r1
   3b28e:	45aa      	cmp	sl, r5
   3b290:	f101 0101 	add.w	r1, r1, #1
   3b294:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3b298:	f804 8003 	strb.w	r8, [r4, r3]
   3b29c:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
   3b2a0:	d01a      	beq.n	3b2d8 <d_maybe_print_designated_init+0x14c>
   3b2a2:	29ff      	cmp	r1, #255	@ 0xff
   3b2a4:	f815 8b01 	ldrb.w	r8, [r5], #1
   3b2a8:	d1f0      	bne.n	3b28c <d_maybe_print_designated_init+0x100>
   3b2aa:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3b2ae:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3b2b2:	f884 90ff 	strb.w	r9, [r4, #255]	@ 0xff
   3b2b6:	4620      	mov	r0, r4
   3b2b8:	4798      	blx	r3
   3b2ba:	f8d4 2128 	ldr.w	r2, [r4, #296]	@ 0x128
   3b2be:	2101      	movs	r1, #1
   3b2c0:	2300      	movs	r3, #0
   3b2c2:	440a      	add	r2, r1
   3b2c4:	45aa      	cmp	sl, r5
   3b2c6:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3b2ca:	f8c4 1100 	str.w	r1, [r4, #256]	@ 0x100
   3b2ce:	f804 8003 	strb.w	r8, [r4, r3]
   3b2d2:	f884 8104 	strb.w	r8, [r4, #260]	@ 0x104
   3b2d6:	d1e4      	bne.n	3b2a2 <d_maybe_print_designated_init+0x116>
   3b2d8:	68fa      	ldr	r2, [r7, #12]
   3b2da:	2111      	movs	r1, #17
   3b2dc:	4620      	mov	r0, r4
   3b2de:	f7fe fd89 	bl	39df4 <d_print_comp>
   3b2e2:	693f      	ldr	r7, [r7, #16]
   3b2e4:	7873      	ldrb	r3, [r6, #1]
   3b2e6:	e790      	b.n	3b20a <d_maybe_print_designated_init+0x7e>
   3b2e8:	f04f 0800 	mov.w	r8, #0
   3b2ec:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3b2f0:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3b2f4:	4798      	blx	r3
   3b2f6:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3b2fa:	3301      	adds	r3, #1
   3b2fc:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3b300:	4641      	mov	r1, r8
   3b302:	2301      	movs	r3, #1
   3b304:	e765      	b.n	3b1d2 <d_maybe_print_designated_init+0x46>
   3b306:	2500      	movs	r5, #0
   3b308:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3b30c:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3b310:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3b314:	4620      	mov	r0, r4
   3b316:	4798      	blx	r3
   3b318:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3b31c:	2201      	movs	r2, #1
   3b31e:	4413      	add	r3, r2
   3b320:	4629      	mov	r1, r5
   3b322:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3b326:	e788      	b.n	3b23a <d_maybe_print_designated_init+0xae>
   3b328:	2500      	movs	r5, #0
   3b32a:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3b32e:	f8d4 210c 	ldr.w	r2, [r4, #268]	@ 0x10c
   3b332:	f884 50ff 	strb.w	r5, [r4, #255]	@ 0xff
   3b336:	4620      	mov	r0, r4
   3b338:	4798      	blx	r3
   3b33a:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3b33e:	2201      	movs	r2, #1
   3b340:	4413      	add	r3, r2
   3b342:	4629      	mov	r1, r5
   3b344:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3b348:	e767      	b.n	3b21a <d_maybe_print_designated_init+0x8e>
   3b34a:	f04f 0800 	mov.w	r8, #0
   3b34e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	@ 0x108
   3b352:	f884 80ff 	strb.w	r8, [r4, #255]	@ 0xff
   3b356:	4798      	blx	r3
   3b358:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
   3b35c:	3301      	adds	r3, #1
   3b35e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
   3b362:	4641      	mov	r1, r8
   3b364:	2301      	movs	r3, #1
   3b366:	e742      	b.n	3b1ee <d_maybe_print_designated_init+0x62>
   3b368:	00040304 	.word	0x00040304

0003b36c <__cxa_demangle>:
   3b36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b370:	461e      	mov	r6, r3
   3b372:	b084      	sub	sp, #16
   3b374:	2800      	cmp	r0, #0
   3b376:	d03f      	beq.n	3b3f8 <__cxa_demangle+0x8c>
   3b378:	460c      	mov	r4, r1
   3b37a:	4615      	mov	r5, r2
   3b37c:	b109      	cbz	r1, 3b382 <__cxa_demangle+0x16>
   3b37e:	2a00      	cmp	r2, #0
   3b380:	d03a      	beq.n	3b3f8 <__cxa_demangle+0x8c>
   3b382:	2300      	movs	r3, #0
   3b384:	4927      	ldr	r1, [pc, #156]	@ (3b424 <__cxa_demangle+0xb8>)
   3b386:	466a      	mov	r2, sp
   3b388:	e9cd 3300 	strd	r3, r3, [sp]
   3b38c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   3b390:	f7ff fb8e 	bl	3aab0 <d_demangle_callback.constprop.0>
   3b394:	2800      	cmp	r0, #0
   3b396:	d035      	beq.n	3b404 <__cxa_demangle+0x98>
   3b398:	9b03      	ldr	r3, [sp, #12]
   3b39a:	9f00      	ldr	r7, [sp, #0]
   3b39c:	b9d3      	cbnz	r3, 3b3d4 <__cxa_demangle+0x68>
   3b39e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   3b3a2:	2f00      	cmp	r7, #0
   3b3a4:	d037      	beq.n	3b416 <__cxa_demangle+0xaa>
   3b3a6:	b324      	cbz	r4, 3b3f2 <__cxa_demangle+0x86>
   3b3a8:	4638      	mov	r0, r7
   3b3aa:	f7dd f989 	bl	186c0 <strlen>
   3b3ae:	682b      	ldr	r3, [r5, #0]
   3b3b0:	4298      	cmp	r0, r3
   3b3b2:	d218      	bcs.n	3b3e6 <__cxa_demangle+0x7a>
   3b3b4:	1c42      	adds	r2, r0, #1
   3b3b6:	4639      	mov	r1, r7
   3b3b8:	4620      	mov	r0, r4
   3b3ba:	f7dd f8e1 	bl	18580 <memcpy>
   3b3be:	4638      	mov	r0, r7
   3b3c0:	f000 f972 	bl	3b6a8 <free>
   3b3c4:	4627      	mov	r7, r4
   3b3c6:	b10e      	cbz	r6, 3b3cc <__cxa_demangle+0x60>
   3b3c8:	2300      	movs	r3, #0
   3b3ca:	6033      	str	r3, [r6, #0]
   3b3cc:	4638      	mov	r0, r7
   3b3ce:	b004      	add	sp, #16
   3b3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b3d4:	f04f 0801 	mov.w	r8, #1
   3b3d8:	2f00      	cmp	r7, #0
   3b3da:	d1e4      	bne.n	3b3a6 <__cxa_demangle+0x3a>
   3b3dc:	b186      	cbz	r6, 3b400 <__cxa_demangle+0x94>
   3b3de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   3b3e2:	6033      	str	r3, [r6, #0]
   3b3e4:	e00c      	b.n	3b400 <__cxa_demangle+0x94>
   3b3e6:	4620      	mov	r0, r4
   3b3e8:	f000 f95e 	bl	3b6a8 <free>
   3b3ec:	f8c5 8000 	str.w	r8, [r5]
   3b3f0:	e7e9      	b.n	3b3c6 <__cxa_demangle+0x5a>
   3b3f2:	2d00      	cmp	r5, #0
   3b3f4:	d1fa      	bne.n	3b3ec <__cxa_demangle+0x80>
   3b3f6:	e7e6      	b.n	3b3c6 <__cxa_demangle+0x5a>
   3b3f8:	b116      	cbz	r6, 3b400 <__cxa_demangle+0x94>
   3b3fa:	f06f 0302 	mvn.w	r3, #2
   3b3fe:	6033      	str	r3, [r6, #0]
   3b400:	2700      	movs	r7, #0
   3b402:	e7e3      	b.n	3b3cc <__cxa_demangle+0x60>
   3b404:	9800      	ldr	r0, [sp, #0]
   3b406:	f000 f94f 	bl	3b6a8 <free>
   3b40a:	2e00      	cmp	r6, #0
   3b40c:	d0f8      	beq.n	3b400 <__cxa_demangle+0x94>
   3b40e:	f06f 0301 	mvn.w	r3, #1
   3b412:	6033      	str	r3, [r6, #0]
   3b414:	e7f4      	b.n	3b400 <__cxa_demangle+0x94>
   3b416:	2e00      	cmp	r6, #0
   3b418:	d0f2      	beq.n	3b400 <__cxa_demangle+0x94>
   3b41a:	f1b8 0f01 	cmp.w	r8, #1
   3b41e:	d1f6      	bne.n	3b40e <__cxa_demangle+0xa2>
   3b420:	e7dd      	b.n	3b3de <__cxa_demangle+0x72>
   3b422:	bf00      	nop
   3b424:	00035211 	.word	0x00035211

0003b428 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   3b428:	7803      	ldrb	r3, [r0, #0]
   3b42a:	2b47      	cmp	r3, #71	@ 0x47
   3b42c:	d001      	beq.n	3b432 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
   3b42e:	2000      	movs	r0, #0
   3b430:	4770      	bx	lr
   3b432:	7843      	ldrb	r3, [r0, #1]
   3b434:	2b4e      	cmp	r3, #78	@ 0x4e
   3b436:	d1fa      	bne.n	3b42e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3b438:	7883      	ldrb	r3, [r0, #2]
   3b43a:	2b55      	cmp	r3, #85	@ 0x55
   3b43c:	d1f7      	bne.n	3b42e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3b43e:	78c3      	ldrb	r3, [r0, #3]
   3b440:	2b43      	cmp	r3, #67	@ 0x43
   3b442:	d1f4      	bne.n	3b42e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3b444:	7903      	ldrb	r3, [r0, #4]
   3b446:	2b43      	cmp	r3, #67	@ 0x43
   3b448:	d1f1      	bne.n	3b42e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3b44a:	7943      	ldrb	r3, [r0, #5]
   3b44c:	2b2b      	cmp	r3, #43	@ 0x2b
   3b44e:	d1ee      	bne.n	3b42e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3b450:	7983      	ldrb	r3, [r0, #6]
   3b452:	2b2b      	cmp	r3, #43	@ 0x2b
   3b454:	d1eb      	bne.n	3b42e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
   3b456:	79c0      	ldrb	r0, [r0, #7]
   3b458:	2801      	cmp	r0, #1
   3b45a:	bf8c      	ite	hi
   3b45c:	2000      	movhi	r0, #0
   3b45e:	2001      	movls	r0, #1
   3b460:	4770      	bx	lr
   3b462:	bf00      	nop

0003b464 <__cxa_call_terminate>:
   3b464:	b510      	push	{r4, lr}
   3b466:	b130      	cbz	r0, 3b476 <__cxa_call_terminate+0x12>
   3b468:	4604      	mov	r4, r0
   3b46a:	f000 f875 	bl	3b558 <__cxa_begin_catch>
   3b46e:	4620      	mov	r0, r4
   3b470:	f7ff ffda 	bl	3b428 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   3b474:	b908      	cbnz	r0, 3b47a <__cxa_call_terminate+0x16>
   3b476:	f7f9 fa27 	bl	348c8 <_ZSt9terminatev>
   3b47a:	f854 0c14 	ldr.w	r0, [r4, #-20]
   3b47e:	f7f9 fa1b 	bl	348b8 <_ZN10__cxxabiv111__terminateEPFvvE>
   3b482:	bf00      	nop

0003b484 <__cxa_call_unexpected>:
   3b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b488:	b083      	sub	sp, #12
   3b48a:	4602      	mov	r2, r0
   3b48c:	f7ff ffcc 	bl	3b428 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   3b490:	b138      	cbz	r0, 3b4a2 <__cxa_call_unexpected+0x1e>
   3b492:	e952 8406 	ldrd	r8, r4, [r2, #-24]
   3b496:	e9d2 750c 	ldrd	r7, r5, [r2, #48]	@ 0x30
   3b49a:	f8d2 a028 	ldr.w	sl, [r2, #40]	@ 0x28
   3b49e:	2600      	movs	r6, #0
   3b4a0:	e005      	b.n	3b4ae <__cxa_call_unexpected+0x2a>
   3b4a2:	4604      	mov	r4, r0
   3b4a4:	4680      	mov	r8, r0
   3b4a6:	2601      	movs	r6, #1
   3b4a8:	4605      	mov	r5, r0
   3b4aa:	4607      	mov	r7, r0
   3b4ac:	4682      	mov	sl, r0
   3b4ae:	4610      	mov	r0, r2
   3b4b0:	f000 f852 	bl	3b558 <__cxa_begin_catch>
   3b4b4:	b10e      	cbz	r6, 3b4ba <__cxa_call_unexpected+0x36>
   3b4b6:	f7f9 fa15 	bl	348e4 <_ZSt10unexpectedv>
   3b4ba:	4640      	mov	r0, r8
   3b4bc:	f7f9 fa0e 	bl	348dc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   3b4c0:	f000 f84a 	bl	3b558 <__cxa_begin_catch>
   3b4c4:	b10e      	cbz	r6, 3b4ca <__cxa_call_unexpected+0x46>
   3b4c6:	f7f9 f9ff 	bl	348c8 <_ZSt9terminatev>
   3b4ca:	f7f8 ff03 	bl	342d4 <__cxa_get_globals_fast>
   3b4ce:	6803      	ldr	r3, [r0, #0]
   3b4d0:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
   3b4d4:	2a01      	cmp	r2, #1
   3b4d6:	bf0c      	ite	eq
   3b4d8:	681a      	ldreq	r2, [r3, #0]
   3b4da:	f103 0278 	addne.w	r2, r3, #120	@ 0x78
   3b4de:	9200      	str	r2, [sp, #0]
   3b4e0:	f027 0803 	bic.w	r8, r7, #3
   3b4e4:	f103 0b20 	add.w	fp, r3, #32
   3b4e8:	f04f 0900 	mov.w	r9, #0
   3b4ec:	45ca      	cmp	sl, r9
   3b4ee:	dd1a      	ble.n	3b526 <__cxa_call_unexpected+0xa2>
   3b4f0:	682f      	ldr	r7, [r5, #0]
   3b4f2:	b107      	cbz	r7, 3b4f6 <__cxa_call_unexpected+0x72>
   3b4f4:	442f      	add	r7, r5
   3b4f6:	466b      	mov	r3, sp
   3b4f8:	2200      	movs	r2, #0
   3b4fa:	4639      	mov	r1, r7
   3b4fc:	4658      	mov	r0, fp
   3b4fe:	f7f8 fe13 	bl	34128 <__cxa_type_match>
   3b502:	b108      	cbz	r0, 3b508 <__cxa_call_unexpected+0x84>
   3b504:	f7f9 fa66 	bl	349d4 <__cxa_rethrow>
   3b508:	683b      	ldr	r3, [r7, #0]
   3b50a:	9001      	str	r0, [sp, #4]
   3b50c:	490f      	ldr	r1, [pc, #60]	@ (3b54c <__cxa_call_unexpected+0xc8>)
   3b50e:	4638      	mov	r0, r7
   3b510:	aa01      	add	r2, sp, #4
   3b512:	691f      	ldr	r7, [r3, #16]
   3b514:	2301      	movs	r3, #1
   3b516:	47b8      	blx	r7
   3b518:	2800      	cmp	r0, #0
   3b51a:	bf18      	it	ne
   3b51c:	4606      	movne	r6, r0
   3b51e:	f109 0901 	add.w	r9, r9, #1
   3b522:	4445      	add	r5, r8
   3b524:	e7e2      	b.n	3b4ec <__cxa_call_unexpected+0x68>
   3b526:	b146      	cbz	r6, 3b53a <__cxa_call_unexpected+0xb6>
   3b528:	2004      	movs	r0, #4
   3b52a:	f7f8 fd4f 	bl	33fcc <__cxa_allocate_exception>
   3b52e:	4b08      	ldr	r3, [pc, #32]	@ (3b550 <__cxa_call_unexpected+0xcc>)
   3b530:	4a08      	ldr	r2, [pc, #32]	@ (3b554 <__cxa_call_unexpected+0xd0>)
   3b532:	4906      	ldr	r1, [pc, #24]	@ (3b54c <__cxa_call_unexpected+0xc8>)
   3b534:	6003      	str	r3, [r0, #0]
   3b536:	f7f9 fa33 	bl	349a0 <__cxa_throw>
   3b53a:	4620      	mov	r0, r4
   3b53c:	f7f9 f9bc 	bl	348b8 <_ZN10__cxxabiv111__terminateEPFvvE>
   3b540:	f000 f848 	bl	3b5d4 <__cxa_end_catch>
   3b544:	f000 f846 	bl	3b5d4 <__cxa_end_catch>
   3b548:	f7f8 fde8 	bl	3411c <__cxa_end_cleanup>
   3b54c:	00047e10 	.word	0x00047e10
   3b550:	00047e78 	.word	0x00047e78
   3b554:	000342b1 	.word	0x000342b1

0003b558 <__cxa_begin_catch>:
   3b558:	b538      	push	{r3, r4, r5, lr}
   3b55a:	4604      	mov	r4, r0
   3b55c:	f7f8 febe 	bl	342dc <__cxa_get_globals>
   3b560:	4622      	mov	r2, r4
   3b562:	6805      	ldr	r5, [r0, #0]
   3b564:	f812 3920 	ldrb.w	r3, [r2], #-32
   3b568:	2b47      	cmp	r3, #71	@ 0x47
   3b56a:	d003      	beq.n	3b574 <__cxa_begin_catch+0x1c>
   3b56c:	bb85      	cbnz	r5, 3b5d0 <__cxa_begin_catch+0x78>
   3b56e:	6002      	str	r2, [r0, #0]
   3b570:	4628      	mov	r0, r5
   3b572:	bd38      	pop	{r3, r4, r5, pc}
   3b574:	7863      	ldrb	r3, [r4, #1]
   3b576:	2b4e      	cmp	r3, #78	@ 0x4e
   3b578:	d1f8      	bne.n	3b56c <__cxa_begin_catch+0x14>
   3b57a:	78a3      	ldrb	r3, [r4, #2]
   3b57c:	2b55      	cmp	r3, #85	@ 0x55
   3b57e:	d1f5      	bne.n	3b56c <__cxa_begin_catch+0x14>
   3b580:	78e3      	ldrb	r3, [r4, #3]
   3b582:	2b43      	cmp	r3, #67	@ 0x43
   3b584:	d1f2      	bne.n	3b56c <__cxa_begin_catch+0x14>
   3b586:	7923      	ldrb	r3, [r4, #4]
   3b588:	2b43      	cmp	r3, #67	@ 0x43
   3b58a:	d1ef      	bne.n	3b56c <__cxa_begin_catch+0x14>
   3b58c:	7963      	ldrb	r3, [r4, #5]
   3b58e:	2b2b      	cmp	r3, #43	@ 0x2b
   3b590:	d1ec      	bne.n	3b56c <__cxa_begin_catch+0x14>
   3b592:	79a3      	ldrb	r3, [r4, #6]
   3b594:	2b2b      	cmp	r3, #43	@ 0x2b
   3b596:	d1e9      	bne.n	3b56c <__cxa_begin_catch+0x14>
   3b598:	79e3      	ldrb	r3, [r4, #7]
   3b59a:	2b01      	cmp	r3, #1
   3b59c:	d8e6      	bhi.n	3b56c <__cxa_begin_catch+0x14>
   3b59e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   3b5a2:	2b00      	cmp	r3, #0
   3b5a4:	db11      	blt.n	3b5ca <__cxa_begin_catch+0x72>
   3b5a6:	3301      	adds	r3, #1
   3b5a8:	f844 3c0c 	str.w	r3, [r4, #-12]
   3b5ac:	6843      	ldr	r3, [r0, #4]
   3b5ae:	3b01      	subs	r3, #1
   3b5b0:	6043      	str	r3, [r0, #4]
   3b5b2:	4295      	cmp	r5, r2
   3b5b4:	bf18      	it	ne
   3b5b6:	f844 5c10 	strne.w	r5, [r4, #-16]
   3b5ba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   3b5bc:	bf18      	it	ne
   3b5be:	6002      	strne	r2, [r0, #0]
   3b5c0:	4620      	mov	r0, r4
   3b5c2:	f000 fc25 	bl	3be10 <_Unwind_Complete>
   3b5c6:	4628      	mov	r0, r5
   3b5c8:	bd38      	pop	{r3, r4, r5, pc}
   3b5ca:	f1c3 0301 	rsb	r3, r3, #1
   3b5ce:	e7eb      	b.n	3b5a8 <__cxa_begin_catch+0x50>
   3b5d0:	f7f9 f97a 	bl	348c8 <_ZSt9terminatev>

0003b5d4 <__cxa_end_catch>:
   3b5d4:	b508      	push	{r3, lr}
   3b5d6:	f7f8 fe7d 	bl	342d4 <__cxa_get_globals_fast>
   3b5da:	6803      	ldr	r3, [r0, #0]
   3b5dc:	b37b      	cbz	r3, 3b63e <__cxa_end_catch+0x6a>
   3b5de:	f893 2020 	ldrb.w	r2, [r3, #32]
   3b5e2:	2a47      	cmp	r2, #71	@ 0x47
   3b5e4:	d007      	beq.n	3b5f6 <__cxa_end_catch+0x22>
   3b5e6:	2200      	movs	r2, #0
   3b5e8:	6002      	str	r2, [r0, #0]
   3b5ea:	f103 0020 	add.w	r0, r3, #32
   3b5ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3b5f2:	f000 bc0f 	b.w	3be14 <_Unwind_DeleteException>
   3b5f6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
   3b5fa:	2a4e      	cmp	r2, #78	@ 0x4e
   3b5fc:	d1f3      	bne.n	3b5e6 <__cxa_end_catch+0x12>
   3b5fe:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
   3b602:	2a55      	cmp	r2, #85	@ 0x55
   3b604:	d1ef      	bne.n	3b5e6 <__cxa_end_catch+0x12>
   3b606:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
   3b60a:	2a43      	cmp	r2, #67	@ 0x43
   3b60c:	d1eb      	bne.n	3b5e6 <__cxa_end_catch+0x12>
   3b60e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
   3b612:	2a43      	cmp	r2, #67	@ 0x43
   3b614:	d1e7      	bne.n	3b5e6 <__cxa_end_catch+0x12>
   3b616:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
   3b61a:	2a2b      	cmp	r2, #43	@ 0x2b
   3b61c:	d1e3      	bne.n	3b5e6 <__cxa_end_catch+0x12>
   3b61e:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
   3b622:	2a2b      	cmp	r2, #43	@ 0x2b
   3b624:	d1df      	bne.n	3b5e6 <__cxa_end_catch+0x12>
   3b626:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
   3b62a:	2a01      	cmp	r2, #1
   3b62c:	d8db      	bhi.n	3b5e6 <__cxa_end_catch+0x12>
   3b62e:	695a      	ldr	r2, [r3, #20]
   3b630:	2a00      	cmp	r2, #0
   3b632:	db05      	blt.n	3b640 <__cxa_end_catch+0x6c>
   3b634:	3a01      	subs	r2, #1
   3b636:	d008      	beq.n	3b64a <__cxa_end_catch+0x76>
   3b638:	1c51      	adds	r1, r2, #1
   3b63a:	d00e      	beq.n	3b65a <__cxa_end_catch+0x86>
   3b63c:	615a      	str	r2, [r3, #20]
   3b63e:	bd08      	pop	{r3, pc}
   3b640:	3201      	adds	r2, #1
   3b642:	d1fb      	bne.n	3b63c <__cxa_end_catch+0x68>
   3b644:	6919      	ldr	r1, [r3, #16]
   3b646:	6001      	str	r1, [r0, #0]
   3b648:	e7f8      	b.n	3b63c <__cxa_end_catch+0x68>
   3b64a:	691a      	ldr	r2, [r3, #16]
   3b64c:	6002      	str	r2, [r0, #0]
   3b64e:	f103 0020 	add.w	r0, r3, #32
   3b652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3b656:	f000 bbdd 	b.w	3be14 <_Unwind_DeleteException>
   3b65a:	f7f9 f935 	bl	348c8 <_ZSt9terminatev>
   3b65e:	bf00      	nop

0003b660 <__cxa_current_exception_type>:
   3b660:	b508      	push	{r3, lr}
   3b662:	f7f8 fe3b 	bl	342dc <__cxa_get_globals>
   3b666:	6800      	ldr	r0, [r0, #0]
   3b668:	b130      	cbz	r0, 3b678 <__cxa_current_exception_type+0x18>
   3b66a:	f890 3027 	ldrb.w	r3, [r0, #39]	@ 0x27
   3b66e:	2b01      	cmp	r3, #1
   3b670:	bf04      	itt	eq
   3b672:	6800      	ldreq	r0, [r0, #0]
   3b674:	3878      	subeq	r0, #120	@ 0x78
   3b676:	6800      	ldr	r0, [r0, #0]
   3b678:	bd08      	pop	{r3, pc}
   3b67a:	bf00      	nop

0003b67c <getenv>:
   3b67c:	b500      	push	{lr}
   3b67e:	4b05      	ldr	r3, [pc, #20]	@ (3b694 <getenv+0x18>)
   3b680:	b083      	sub	sp, #12
   3b682:	4601      	mov	r1, r0
   3b684:	aa01      	add	r2, sp, #4
   3b686:	6818      	ldr	r0, [r3, #0]
   3b688:	f7eb fe40 	bl	2730c <_findenv_r>
   3b68c:	b003      	add	sp, #12
   3b68e:	f85d fb04 	ldr.w	pc, [sp], #4
   3b692:	bf00      	nop
   3b694:	1000c53c 	.word	0x1000c53c

0003b698 <malloc>:
   3b698:	4b02      	ldr	r3, [pc, #8]	@ (3b6a4 <malloc+0xc>)
   3b69a:	4601      	mov	r1, r0
   3b69c:	6818      	ldr	r0, [r3, #0]
   3b69e:	f7eb be75 	b.w	2738c <_malloc_r>
   3b6a2:	bf00      	nop
   3b6a4:	1000c53c 	.word	0x1000c53c

0003b6a8 <free>:
   3b6a8:	4b02      	ldr	r3, [pc, #8]	@ (3b6b4 <free+0xc>)
   3b6aa:	4601      	mov	r1, r0
   3b6ac:	6818      	ldr	r0, [r3, #0]
   3b6ae:	f7eb bd31 	b.w	27114 <_free_r>
   3b6b2:	bf00      	nop
   3b6b4:	1000c53c 	.word	0x1000c53c

0003b6b8 <realloc>:
   3b6b8:	b410      	push	{r4}
   3b6ba:	4c04      	ldr	r4, [pc, #16]	@ (3b6cc <realloc+0x14>)
   3b6bc:	4603      	mov	r3, r0
   3b6be:	460a      	mov	r2, r1
   3b6c0:	6820      	ldr	r0, [r4, #0]
   3b6c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   3b6c6:	4619      	mov	r1, r3
   3b6c8:	f7ed bfa2 	b.w	29610 <_realloc_r>
   3b6cc:	1000c53c 	.word	0x1000c53c

0003b6d0 <_strtoul_l.isra.0>:
   3b6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b6d4:	4607      	mov	r7, r0
   3b6d6:	4849      	ldr	r0, [pc, #292]	@ (3b7fc <_strtoul_l.isra.0+0x12c>)
   3b6d8:	460e      	mov	r6, r1
   3b6da:	4635      	mov	r5, r6
   3b6dc:	f816 eb01 	ldrb.w	lr, [r6], #1
   3b6e0:	f810 c00e 	ldrb.w	ip, [r0, lr]
   3b6e4:	f01c 0c08 	ands.w	ip, ip, #8
   3b6e8:	d1f7      	bne.n	3b6da <_strtoul_l.isra.0+0xa>
   3b6ea:	f1be 0f2d 	cmp.w	lr, #45	@ 0x2d
   3b6ee:	d05a      	beq.n	3b7a6 <_strtoul_l.isra.0+0xd6>
   3b6f0:	f1be 0f2b 	cmp.w	lr, #43	@ 0x2b
   3b6f4:	bf03      	ittte	eq
   3b6f6:	f896 e000 	ldrbeq.w	lr, [r6]
   3b6fa:	4664      	moveq	r4, ip
   3b6fc:	1cae      	addeq	r6, r5, #2
   3b6fe:	4664      	movne	r4, ip
   3b700:	b94b      	cbnz	r3, 3b716 <_strtoul_l.isra.0+0x46>
   3b702:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
   3b706:	d05c      	beq.n	3b7c2 <_strtoul_l.isra.0+0xf2>
   3b708:	230a      	movs	r3, #10
   3b70a:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 3b800 <_strtoul_l.isra.0+0x130>
   3b70e:	f04f 0a05 	mov.w	sl, #5
   3b712:	4699      	mov	r9, r3
   3b714:	e00a      	b.n	3b72c <_strtoul_l.isra.0+0x5c>
   3b716:	2b10      	cmp	r3, #16
   3b718:	d04a      	beq.n	3b7b0 <_strtoul_l.isra.0+0xe0>
   3b71a:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
   3b71e:	fbb8 f8f3 	udiv	r8, r8, r3
   3b722:	fb03 fa08 	mul.w	sl, r3, r8
   3b726:	ea6f 0a0a 	mvn.w	sl, sl
   3b72a:	4699      	mov	r9, r3
   3b72c:	2500      	movs	r5, #0
   3b72e:	4628      	mov	r0, r5
   3b730:	e005      	b.n	3b73e <_strtoul_l.isra.0+0x6e>
   3b732:	d02c      	beq.n	3b78e <_strtoul_l.isra.0+0xbe>
   3b734:	fb09 c000 	mla	r0, r9, r0, ip
   3b738:	2501      	movs	r5, #1
   3b73a:	f816 eb01 	ldrb.w	lr, [r6], #1
   3b73e:	f1ae 0c30 	sub.w	ip, lr, #48	@ 0x30
   3b742:	f1bc 0f09 	cmp.w	ip, #9
   3b746:	d906      	bls.n	3b756 <_strtoul_l.isra.0+0x86>
   3b748:	f1ae 0c41 	sub.w	ip, lr, #65	@ 0x41
   3b74c:	f1bc 0f19 	cmp.w	ip, #25
   3b750:	d80b      	bhi.n	3b76a <_strtoul_l.isra.0+0x9a>
   3b752:	f1ae 0c37 	sub.w	ip, lr, #55	@ 0x37
   3b756:	4563      	cmp	r3, ip
   3b758:	dd10      	ble.n	3b77c <_strtoul_l.isra.0+0xac>
   3b75a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
   3b75e:	d0ec      	beq.n	3b73a <_strtoul_l.isra.0+0x6a>
   3b760:	4540      	cmp	r0, r8
   3b762:	d9e6      	bls.n	3b732 <_strtoul_l.isra.0+0x62>
   3b764:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
   3b768:	e7e7      	b.n	3b73a <_strtoul_l.isra.0+0x6a>
   3b76a:	f1ae 0c61 	sub.w	ip, lr, #97	@ 0x61
   3b76e:	f1bc 0f19 	cmp.w	ip, #25
   3b772:	d803      	bhi.n	3b77c <_strtoul_l.isra.0+0xac>
   3b774:	f1ae 0c57 	sub.w	ip, lr, #87	@ 0x57
   3b778:	4563      	cmp	r3, ip
   3b77a:	dcee      	bgt.n	3b75a <_strtoul_l.isra.0+0x8a>
   3b77c:	1c6b      	adds	r3, r5, #1
   3b77e:	d00b      	beq.n	3b798 <_strtoul_l.isra.0+0xc8>
   3b780:	b104      	cbz	r4, 3b784 <_strtoul_l.isra.0+0xb4>
   3b782:	4240      	negs	r0, r0
   3b784:	b10a      	cbz	r2, 3b78a <_strtoul_l.isra.0+0xba>
   3b786:	b965      	cbnz	r5, 3b7a2 <_strtoul_l.isra.0+0xd2>
   3b788:	6011      	str	r1, [r2, #0]
   3b78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b78e:	45d4      	cmp	ip, sl
   3b790:	ddd0      	ble.n	3b734 <_strtoul_l.isra.0+0x64>
   3b792:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
   3b796:	e7d0      	b.n	3b73a <_strtoul_l.isra.0+0x6a>
   3b798:	2322      	movs	r3, #34	@ 0x22
   3b79a:	603b      	str	r3, [r7, #0]
   3b79c:	4628      	mov	r0, r5
   3b79e:	2a00      	cmp	r2, #0
   3b7a0:	d0f3      	beq.n	3b78a <_strtoul_l.isra.0+0xba>
   3b7a2:	1e71      	subs	r1, r6, #1
   3b7a4:	e7f0      	b.n	3b788 <_strtoul_l.isra.0+0xb8>
   3b7a6:	f896 e000 	ldrb.w	lr, [r6]
   3b7aa:	2401      	movs	r4, #1
   3b7ac:	1cae      	adds	r6, r5, #2
   3b7ae:	e7a7      	b.n	3b700 <_strtoul_l.isra.0+0x30>
   3b7b0:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
   3b7b4:	d011      	beq.n	3b7da <_strtoul_l.isra.0+0x10a>
   3b7b6:	f04f 0a0f 	mov.w	sl, #15
   3b7ba:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
   3b7be:	4699      	mov	r9, r3
   3b7c0:	e7b4      	b.n	3b72c <_strtoul_l.isra.0+0x5c>
   3b7c2:	7833      	ldrb	r3, [r6, #0]
   3b7c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
   3b7c8:	2b58      	cmp	r3, #88	@ 0x58
   3b7ca:	d00b      	beq.n	3b7e4 <_strtoul_l.isra.0+0x114>
   3b7cc:	2308      	movs	r3, #8
   3b7ce:	f04f 0a07 	mov.w	sl, #7
   3b7d2:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
   3b7d6:	4699      	mov	r9, r3
   3b7d8:	e7a8      	b.n	3b72c <_strtoul_l.isra.0+0x5c>
   3b7da:	7830      	ldrb	r0, [r6, #0]
   3b7dc:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
   3b7e0:	2858      	cmp	r0, #88	@ 0x58
   3b7e2:	d1e8      	bne.n	3b7b6 <_strtoul_l.isra.0+0xe6>
   3b7e4:	f04f 0910 	mov.w	r9, #16
   3b7e8:	f896 e001 	ldrb.w	lr, [r6, #1]
   3b7ec:	f04f 0a0f 	mov.w	sl, #15
   3b7f0:	3602      	adds	r6, #2
   3b7f2:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
   3b7f6:	464b      	mov	r3, r9
   3b7f8:	e798      	b.n	3b72c <_strtoul_l.isra.0+0x5c>
   3b7fa:	bf00      	nop
   3b7fc:	00047361 	.word	0x00047361
   3b800:	19999999 	.word	0x19999999

0003b804 <strtoul>:
   3b804:	b410      	push	{r4}
   3b806:	4c05      	ldr	r4, [pc, #20]	@ (3b81c <strtoul+0x18>)
   3b808:	4684      	mov	ip, r0
   3b80a:	4613      	mov	r3, r2
   3b80c:	6820      	ldr	r0, [r4, #0]
   3b80e:	f85d 4b04 	ldr.w	r4, [sp], #4
   3b812:	460a      	mov	r2, r1
   3b814:	4661      	mov	r1, ip
   3b816:	f7ff bf5b 	b.w	3b6d0 <_strtoul_l.isra.0>
   3b81a:	bf00      	nop
   3b81c:	1000c53c 	.word	0x1000c53c

0003b820 <sprintf>:
   3b820:	b40e      	push	{r1, r2, r3}
   3b822:	b510      	push	{r4, lr}
   3b824:	b09d      	sub	sp, #116	@ 0x74
   3b826:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
   3b82a:	ab1f      	add	r3, sp, #124	@ 0x7c
   3b82c:	9104      	str	r1, [sp, #16]
   3b82e:	9107      	str	r1, [sp, #28]
   3b830:	4909      	ldr	r1, [pc, #36]	@ (3b858 <sprintf+0x38>)
   3b832:	f853 2b04 	ldr.w	r2, [r3], #4
   3b836:	9002      	str	r0, [sp, #8]
   3b838:	9006      	str	r0, [sp, #24]
   3b83a:	4c08      	ldr	r4, [pc, #32]	@ (3b85c <sprintf+0x3c>)
   3b83c:	6808      	ldr	r0, [r1, #0]
   3b83e:	9301      	str	r3, [sp, #4]
   3b840:	a902      	add	r1, sp, #8
   3b842:	9405      	str	r4, [sp, #20]
   3b844:	f7ec f86c 	bl	27920 <_svfprintf_r>
   3b848:	9b02      	ldr	r3, [sp, #8]
   3b84a:	2200      	movs	r2, #0
   3b84c:	701a      	strb	r2, [r3, #0]
   3b84e:	b01d      	add	sp, #116	@ 0x74
   3b850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3b854:	b003      	add	sp, #12
   3b856:	4770      	bx	lr
   3b858:	1000c53c 	.word	0x1000c53c
   3b85c:	ffff0208 	.word	0xffff0208

0003b860 <fputc>:
   3b860:	4b14      	ldr	r3, [pc, #80]	@ (3b8b4 <fputc+0x54>)
   3b862:	b570      	push	{r4, r5, r6, lr}
   3b864:	681e      	ldr	r6, [r3, #0]
   3b866:	4605      	mov	r5, r0
   3b868:	460c      	mov	r4, r1
   3b86a:	b10e      	cbz	r6, 3b870 <fputc+0x10>
   3b86c:	6b73      	ldr	r3, [r6, #52]	@ 0x34
   3b86e:	b1e3      	cbz	r3, 3b8aa <fputc+0x4a>
   3b870:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3b872:	07d8      	lsls	r0, r3, #31
   3b874:	d402      	bmi.n	3b87c <fputc+0x1c>
   3b876:	89a3      	ldrh	r3, [r4, #12]
   3b878:	0599      	lsls	r1, r3, #22
   3b87a:	d512      	bpl.n	3b8a2 <fputc+0x42>
   3b87c:	4622      	mov	r2, r4
   3b87e:	4629      	mov	r1, r5
   3b880:	4630      	mov	r0, r6
   3b882:	f000 f8c5 	bl	3ba10 <_putc_r>
   3b886:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3b888:	07da      	lsls	r2, r3, #31
   3b88a:	4605      	mov	r5, r0
   3b88c:	d402      	bmi.n	3b894 <fputc+0x34>
   3b88e:	89a3      	ldrh	r3, [r4, #12]
   3b890:	059b      	lsls	r3, r3, #22
   3b892:	d501      	bpl.n	3b898 <fputc+0x38>
   3b894:	4628      	mov	r0, r5
   3b896:	bd70      	pop	{r4, r5, r6, pc}
   3b898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3b89a:	f7eb fb61 	bl	26f60 <__retarget_lock_release_recursive>
   3b89e:	4628      	mov	r0, r5
   3b8a0:	bd70      	pop	{r4, r5, r6, pc}
   3b8a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3b8a4:	f7eb fb5a 	bl	26f5c <__retarget_lock_acquire_recursive>
   3b8a8:	e7e8      	b.n	3b87c <fputc+0x1c>
   3b8aa:	4630      	mov	r0, r6
   3b8ac:	f7ea fe88 	bl	265c0 <__sinit>
   3b8b0:	e7de      	b.n	3b870 <fputc+0x10>
   3b8b2:	bf00      	nop
   3b8b4:	1000c53c 	.word	0x1000c53c

0003b8b8 <_fputs_r>:
   3b8b8:	b530      	push	{r4, r5, lr}
   3b8ba:	b087      	sub	sp, #28
   3b8bc:	4605      	mov	r5, r0
   3b8be:	4608      	mov	r0, r1
   3b8c0:	4614      	mov	r4, r2
   3b8c2:	9101      	str	r1, [sp, #4]
   3b8c4:	f7dc fefc 	bl	186c0 <strlen>
   3b8c8:	aa01      	add	r2, sp, #4
   3b8ca:	2301      	movs	r3, #1
   3b8cc:	e9cd 0202 	strd	r0, r2, [sp, #8]
   3b8d0:	9005      	str	r0, [sp, #20]
   3b8d2:	9304      	str	r3, [sp, #16]
   3b8d4:	b10d      	cbz	r5, 3b8da <_fputs_r+0x22>
   3b8d6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
   3b8d8:	b353      	cbz	r3, 3b930 <_fputs_r+0x78>
   3b8da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
   3b8dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3b8e0:	07d2      	lsls	r2, r2, #31
   3b8e2:	d401      	bmi.n	3b8e8 <_fputs_r+0x30>
   3b8e4:	0598      	lsls	r0, r3, #22
   3b8e6:	d51d      	bpl.n	3b924 <_fputs_r+0x6c>
   3b8e8:	0499      	lsls	r1, r3, #18
   3b8ea:	d406      	bmi.n	3b8fa <_fputs_r+0x42>
   3b8ec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
   3b8ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
   3b8f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
   3b8f6:	81a3      	strh	r3, [r4, #12]
   3b8f8:	6662      	str	r2, [r4, #100]	@ 0x64
   3b8fa:	aa03      	add	r2, sp, #12
   3b8fc:	4628      	mov	r0, r5
   3b8fe:	4621      	mov	r1, r4
   3b900:	f7ea fec0 	bl	26684 <__sfvwrite_r>
   3b904:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3b906:	07da      	lsls	r2, r3, #31
   3b908:	4605      	mov	r5, r0
   3b90a:	d402      	bmi.n	3b912 <_fputs_r+0x5a>
   3b90c:	89a3      	ldrh	r3, [r4, #12]
   3b90e:	059b      	lsls	r3, r3, #22
   3b910:	d502      	bpl.n	3b918 <_fputs_r+0x60>
   3b912:	4628      	mov	r0, r5
   3b914:	b007      	add	sp, #28
   3b916:	bd30      	pop	{r4, r5, pc}
   3b918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3b91a:	f7eb fb21 	bl	26f60 <__retarget_lock_release_recursive>
   3b91e:	4628      	mov	r0, r5
   3b920:	b007      	add	sp, #28
   3b922:	bd30      	pop	{r4, r5, pc}
   3b924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3b926:	f7eb fb19 	bl	26f5c <__retarget_lock_acquire_recursive>
   3b92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3b92e:	e7db      	b.n	3b8e8 <_fputs_r+0x30>
   3b930:	4628      	mov	r0, r5
   3b932:	f7ea fe45 	bl	265c0 <__sinit>
   3b936:	e7d0      	b.n	3b8da <_fputs_r+0x22>

0003b938 <fputs>:
   3b938:	b410      	push	{r4}
   3b93a:	4c04      	ldr	r4, [pc, #16]	@ (3b94c <fputs+0x14>)
   3b93c:	4603      	mov	r3, r0
   3b93e:	460a      	mov	r2, r1
   3b940:	6820      	ldr	r0, [r4, #0]
   3b942:	f85d 4b04 	ldr.w	r4, [sp], #4
   3b946:	4619      	mov	r1, r3
   3b948:	f7ff bfb6 	b.w	3b8b8 <_fputs_r>
   3b94c:	1000c53c 	.word	0x1000c53c

0003b950 <_fwrite_r>:
   3b950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b954:	b086      	sub	sp, #24
   3b956:	fb02 f503 	mul.w	r5, r2, r3
   3b95a:	4698      	mov	r8, r3
   3b95c:	ab01      	add	r3, sp, #4
   3b95e:	9303      	str	r3, [sp, #12]
   3b960:	2301      	movs	r3, #1
   3b962:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
   3b964:	9101      	str	r1, [sp, #4]
   3b966:	4617      	mov	r7, r2
   3b968:	9502      	str	r5, [sp, #8]
   3b96a:	9505      	str	r5, [sp, #20]
   3b96c:	9304      	str	r3, [sp, #16]
   3b96e:	4606      	mov	r6, r0
   3b970:	b110      	cbz	r0, 3b978 <_fwrite_r+0x28>
   3b972:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   3b974:	2b00      	cmp	r3, #0
   3b976:	d038      	beq.n	3b9ea <_fwrite_r+0x9a>
   3b978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3b97a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3b97e:	07d8      	lsls	r0, r3, #31
   3b980:	d401      	bmi.n	3b986 <_fwrite_r+0x36>
   3b982:	0591      	lsls	r1, r2, #22
   3b984:	d526      	bpl.n	3b9d4 <_fwrite_r+0x84>
   3b986:	0493      	lsls	r3, r2, #18
   3b988:	d406      	bmi.n	3b998 <_fwrite_r+0x48>
   3b98a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3b98c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
   3b990:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
   3b994:	81a2      	strh	r2, [r4, #12]
   3b996:	6663      	str	r3, [r4, #100]	@ 0x64
   3b998:	4630      	mov	r0, r6
   3b99a:	aa03      	add	r2, sp, #12
   3b99c:	4621      	mov	r1, r4
   3b99e:	f7ea fe71 	bl	26684 <__sfvwrite_r>
   3b9a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3b9a4:	b178      	cbz	r0, 3b9c6 <_fwrite_r+0x76>
   3b9a6:	07da      	lsls	r2, r3, #31
   3b9a8:	d506      	bpl.n	3b9b8 <_fwrite_r+0x68>
   3b9aa:	9b05      	ldr	r3, [sp, #20]
   3b9ac:	1ae8      	subs	r0, r5, r3
   3b9ae:	fbb0 f0f7 	udiv	r0, r0, r7
   3b9b2:	b006      	add	sp, #24
   3b9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b9b8:	89a3      	ldrh	r3, [r4, #12]
   3b9ba:	059b      	lsls	r3, r3, #22
   3b9bc:	d4f5      	bmi.n	3b9aa <_fwrite_r+0x5a>
   3b9be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3b9c0:	f7eb face 	bl	26f60 <__retarget_lock_release_recursive>
   3b9c4:	e7f1      	b.n	3b9aa <_fwrite_r+0x5a>
   3b9c6:	07d8      	lsls	r0, r3, #31
   3b9c8:	d402      	bmi.n	3b9d0 <_fwrite_r+0x80>
   3b9ca:	89a3      	ldrh	r3, [r4, #12]
   3b9cc:	0599      	lsls	r1, r3, #22
   3b9ce:	d507      	bpl.n	3b9e0 <_fwrite_r+0x90>
   3b9d0:	4640      	mov	r0, r8
   3b9d2:	e7ee      	b.n	3b9b2 <_fwrite_r+0x62>
   3b9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3b9d6:	f7eb fac1 	bl	26f5c <__retarget_lock_acquire_recursive>
   3b9da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3b9de:	e7d2      	b.n	3b986 <_fwrite_r+0x36>
   3b9e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3b9e2:	f7eb fabd 	bl	26f60 <__retarget_lock_release_recursive>
   3b9e6:	4640      	mov	r0, r8
   3b9e8:	e7e3      	b.n	3b9b2 <_fwrite_r+0x62>
   3b9ea:	f7ea fde9 	bl	265c0 <__sinit>
   3b9ee:	e7c3      	b.n	3b978 <_fwrite_r+0x28>

0003b9f0 <fwrite>:
   3b9f0:	b510      	push	{r4, lr}
   3b9f2:	4c06      	ldr	r4, [pc, #24]	@ (3ba0c <fwrite+0x1c>)
   3b9f4:	b082      	sub	sp, #8
   3b9f6:	4684      	mov	ip, r0
   3b9f8:	6820      	ldr	r0, [r4, #0]
   3b9fa:	9300      	str	r3, [sp, #0]
   3b9fc:	4613      	mov	r3, r2
   3b9fe:	460a      	mov	r2, r1
   3ba00:	4661      	mov	r1, ip
   3ba02:	f7ff ffa5 	bl	3b950 <_fwrite_r>
   3ba06:	b002      	add	sp, #8
   3ba08:	bd10      	pop	{r4, pc}
   3ba0a:	bf00      	nop
   3ba0c:	1000c53c 	.word	0x1000c53c

0003ba10 <_putc_r>:
   3ba10:	b570      	push	{r4, r5, r6, lr}
   3ba12:	460e      	mov	r6, r1
   3ba14:	4614      	mov	r4, r2
   3ba16:	4605      	mov	r5, r0
   3ba18:	b110      	cbz	r0, 3ba20 <_putc_r+0x10>
   3ba1a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
   3ba1c:	2b00      	cmp	r3, #0
   3ba1e:	d02f      	beq.n	3ba80 <_putc_r+0x70>
   3ba20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3ba22:	07d8      	lsls	r0, r3, #31
   3ba24:	d402      	bmi.n	3ba2c <_putc_r+0x1c>
   3ba26:	89a3      	ldrh	r3, [r4, #12]
   3ba28:	0599      	lsls	r1, r3, #22
   3ba2a:	d520      	bpl.n	3ba6e <_putc_r+0x5e>
   3ba2c:	68a3      	ldr	r3, [r4, #8]
   3ba2e:	3b01      	subs	r3, #1
   3ba30:	2b00      	cmp	r3, #0
   3ba32:	60a3      	str	r3, [r4, #8]
   3ba34:	da19      	bge.n	3ba6a <_putc_r+0x5a>
   3ba36:	69a2      	ldr	r2, [r4, #24]
   3ba38:	4293      	cmp	r3, r2
   3ba3a:	db0f      	blt.n	3ba5c <_putc_r+0x4c>
   3ba3c:	b2f0      	uxtb	r0, r6
   3ba3e:	280a      	cmp	r0, #10
   3ba40:	d00c      	beq.n	3ba5c <_putc_r+0x4c>
   3ba42:	6823      	ldr	r3, [r4, #0]
   3ba44:	1c5a      	adds	r2, r3, #1
   3ba46:	6022      	str	r2, [r4, #0]
   3ba48:	4605      	mov	r5, r0
   3ba4a:	701e      	strb	r6, [r3, #0]
   3ba4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3ba4e:	07da      	lsls	r2, r3, #31
   3ba50:	d402      	bmi.n	3ba58 <_putc_r+0x48>
   3ba52:	89a3      	ldrh	r3, [r4, #12]
   3ba54:	059b      	lsls	r3, r3, #22
   3ba56:	d50e      	bpl.n	3ba76 <_putc_r+0x66>
   3ba58:	4628      	mov	r0, r5
   3ba5a:	bd70      	pop	{r4, r5, r6, pc}
   3ba5c:	4628      	mov	r0, r5
   3ba5e:	4622      	mov	r2, r4
   3ba60:	4631      	mov	r1, r6
   3ba62:	f7ed ffcd 	bl	29a00 <__swbuf_r>
   3ba66:	4605      	mov	r5, r0
   3ba68:	e7f0      	b.n	3ba4c <_putc_r+0x3c>
   3ba6a:	b2f0      	uxtb	r0, r6
   3ba6c:	e7e9      	b.n	3ba42 <_putc_r+0x32>
   3ba6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3ba70:	f7eb fa74 	bl	26f5c <__retarget_lock_acquire_recursive>
   3ba74:	e7da      	b.n	3ba2c <_putc_r+0x1c>
   3ba76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
   3ba78:	f7eb fa72 	bl	26f60 <__retarget_lock_release_recursive>
   3ba7c:	4628      	mov	r0, r5
   3ba7e:	bd70      	pop	{r4, r5, r6, pc}
   3ba80:	f7ea fd9e 	bl	265c0 <__sinit>
   3ba84:	e7cc      	b.n	3ba20 <_putc_r+0x10>
   3ba86:	bf00      	nop

0003ba88 <selfrel_offset31>:
   3ba88:	6803      	ldr	r3, [r0, #0]
   3ba8a:	005a      	lsls	r2, r3, #1
   3ba8c:	bf4c      	ite	mi
   3ba8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
   3ba92:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
   3ba96:	4418      	add	r0, r3
   3ba98:	4770      	bx	lr
   3ba9a:	bf00      	nop

0003ba9c <search_EIT_table>:
   3ba9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3baa0:	b359      	cbz	r1, 3bafa <search_EIT_table+0x5e>
   3baa2:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
   3baa6:	4605      	mov	r5, r0
   3baa8:	4616      	mov	r6, r2
   3baaa:	4647      	mov	r7, r8
   3baac:	f04f 0a00 	mov.w	sl, #0
   3bab0:	eb0a 0107 	add.w	r1, sl, r7
   3bab4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   3bab8:	1049      	asrs	r1, r1, #1
   3baba:	eb05 09c1 	add.w	r9, r5, r1, lsl #3
   3babe:	4648      	mov	r0, r9
   3bac0:	f7ff ffe2 	bl	3ba88 <selfrel_offset31>
   3bac4:	4588      	cmp	r8, r1
   3bac6:	ea4f 04c1 	mov.w	r4, r1, lsl #3
   3baca:	4603      	mov	r3, r0
   3bacc:	d010      	beq.n	3baf0 <search_EIT_table+0x54>
   3bace:	f104 0008 	add.w	r0, r4, #8
   3bad2:	42b3      	cmp	r3, r6
   3bad4:	4428      	add	r0, r5
   3bad6:	d807      	bhi.n	3bae8 <search_EIT_table+0x4c>
   3bad8:	f7ff ffd6 	bl	3ba88 <selfrel_offset31>
   3badc:	3801      	subs	r0, #1
   3bade:	42b0      	cmp	r0, r6
   3bae0:	d208      	bcs.n	3baf4 <search_EIT_table+0x58>
   3bae2:	f101 0a01 	add.w	sl, r1, #1
   3bae6:	e7e3      	b.n	3bab0 <search_EIT_table+0x14>
   3bae8:	458a      	cmp	sl, r1
   3baea:	d006      	beq.n	3bafa <search_EIT_table+0x5e>
   3baec:	1e4f      	subs	r7, r1, #1
   3baee:	e7df      	b.n	3bab0 <search_EIT_table+0x14>
   3baf0:	42b0      	cmp	r0, r6
   3baf2:	d8f9      	bhi.n	3bae8 <search_EIT_table+0x4c>
   3baf4:	4648      	mov	r0, r9
   3baf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3bafa:	f04f 0900 	mov.w	r9, #0
   3bafe:	4648      	mov	r0, r9
   3bb00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003bb04 <__gnu_unwind_get_pr_addr>:
   3bb04:	2801      	cmp	r0, #1
   3bb06:	d009      	beq.n	3bb1c <__gnu_unwind_get_pr_addr+0x18>
   3bb08:	2802      	cmp	r0, #2
   3bb0a:	d005      	beq.n	3bb18 <__gnu_unwind_get_pr_addr+0x14>
   3bb0c:	4b04      	ldr	r3, [pc, #16]	@ (3bb20 <__gnu_unwind_get_pr_addr+0x1c>)
   3bb0e:	2800      	cmp	r0, #0
   3bb10:	bf0c      	ite	eq
   3bb12:	4618      	moveq	r0, r3
   3bb14:	2000      	movne	r0, #0
   3bb16:	4770      	bx	lr
   3bb18:	4802      	ldr	r0, [pc, #8]	@ (3bb24 <__gnu_unwind_get_pr_addr+0x20>)
   3bb1a:	4770      	bx	lr
   3bb1c:	4802      	ldr	r0, [pc, #8]	@ (3bb28 <__gnu_unwind_get_pr_addr+0x24>)
   3bb1e:	4770      	bx	lr
   3bb20:	0003c1e5 	.word	0x0003c1e5
   3bb24:	0003c1f5 	.word	0x0003c1f5
   3bb28:	0003c1ed 	.word	0x0003c1ed

0003bb2c <get_eit_entry>:
   3bb2c:	b530      	push	{r4, r5, lr}
   3bb2e:	4b22      	ldr	r3, [pc, #136]	@ (3bbb8 <get_eit_entry+0x8c>)
   3bb30:	b083      	sub	sp, #12
   3bb32:	4604      	mov	r4, r0
   3bb34:	1e8d      	subs	r5, r1, #2
   3bb36:	b343      	cbz	r3, 3bb8a <get_eit_entry+0x5e>
   3bb38:	a901      	add	r1, sp, #4
   3bb3a:	4628      	mov	r0, r5
   3bb3c:	f3af 8000 	nop.w
   3bb40:	b1f0      	cbz	r0, 3bb80 <get_eit_entry+0x54>
   3bb42:	9901      	ldr	r1, [sp, #4]
   3bb44:	462a      	mov	r2, r5
   3bb46:	f7ff ffa9 	bl	3ba9c <search_EIT_table>
   3bb4a:	4601      	mov	r1, r0
   3bb4c:	b1c0      	cbz	r0, 3bb80 <get_eit_entry+0x54>
   3bb4e:	f7ff ff9b 	bl	3ba88 <selfrel_offset31>
   3bb52:	684b      	ldr	r3, [r1, #4]
   3bb54:	64a0      	str	r0, [r4, #72]	@ 0x48
   3bb56:	2b01      	cmp	r3, #1
   3bb58:	d02b      	beq.n	3bbb2 <get_eit_entry+0x86>
   3bb5a:	2b00      	cmp	r3, #0
   3bb5c:	f101 0004 	add.w	r0, r1, #4
   3bb60:	db25      	blt.n	3bbae <get_eit_entry+0x82>
   3bb62:	f7ff ff91 	bl	3ba88 <selfrel_offset31>
   3bb66:	2300      	movs	r3, #0
   3bb68:	6523      	str	r3, [r4, #80]	@ 0x50
   3bb6a:	6803      	ldr	r3, [r0, #0]
   3bb6c:	64e0      	str	r0, [r4, #76]	@ 0x4c
   3bb6e:	2b00      	cmp	r3, #0
   3bb70:	db12      	blt.n	3bb98 <get_eit_entry+0x6c>
   3bb72:	f7ff ff89 	bl	3ba88 <selfrel_offset31>
   3bb76:	4603      	mov	r3, r0
   3bb78:	2000      	movs	r0, #0
   3bb7a:	6123      	str	r3, [r4, #16]
   3bb7c:	b003      	add	sp, #12
   3bb7e:	bd30      	pop	{r4, r5, pc}
   3bb80:	2300      	movs	r3, #0
   3bb82:	2009      	movs	r0, #9
   3bb84:	6123      	str	r3, [r4, #16]
   3bb86:	b003      	add	sp, #12
   3bb88:	bd30      	pop	{r4, r5, pc}
   3bb8a:	4b0c      	ldr	r3, [pc, #48]	@ (3bbbc <get_eit_entry+0x90>)
   3bb8c:	490c      	ldr	r1, [pc, #48]	@ (3bbc0 <get_eit_entry+0x94>)
   3bb8e:	1ac9      	subs	r1, r1, r3
   3bb90:	10c9      	asrs	r1, r1, #3
   3bb92:	4618      	mov	r0, r3
   3bb94:	9101      	str	r1, [sp, #4]
   3bb96:	e7d5      	b.n	3bb44 <get_eit_entry+0x18>
   3bb98:	f3c3 6003 	ubfx	r0, r3, #24, #4
   3bb9c:	f7ff ffb2 	bl	3bb04 <__gnu_unwind_get_pr_addr>
   3bba0:	1e03      	subs	r3, r0, #0
   3bba2:	bf0c      	ite	eq
   3bba4:	2009      	moveq	r0, #9
   3bba6:	2000      	movne	r0, #0
   3bba8:	6123      	str	r3, [r4, #16]
   3bbaa:	b003      	add	sp, #12
   3bbac:	bd30      	pop	{r4, r5, pc}
   3bbae:	2301      	movs	r3, #1
   3bbb0:	e7da      	b.n	3bb68 <get_eit_entry+0x3c>
   3bbb2:	2300      	movs	r3, #0
   3bbb4:	2005      	movs	r0, #5
   3bbb6:	e7e0      	b.n	3bb7a <get_eit_entry+0x4e>
   3bbb8:	00000000 	.word	0x00000000
   3bbbc:	00048b64 	.word	0x00048b64
   3bbc0:	00048d44 	.word	0x00048d44

0003bbc4 <restore_non_core_regs>:
   3bbc4:	6803      	ldr	r3, [r0, #0]
   3bbc6:	07da      	lsls	r2, r3, #31
   3bbc8:	b510      	push	{r4, lr}
   3bbca:	4604      	mov	r4, r0
   3bbcc:	d406      	bmi.n	3bbdc <restore_non_core_regs+0x18>
   3bbce:	079b      	lsls	r3, r3, #30
   3bbd0:	f100 0050 	add.w	r0, r0, #80	@ 0x50
   3bbd4:	d509      	bpl.n	3bbea <restore_non_core_regs+0x26>
   3bbd6:	f7dd fb61 	bl	1929c <__gnu_Unwind_Restore_VFP_D>
   3bbda:	6823      	ldr	r3, [r4, #0]
   3bbdc:	0759      	lsls	r1, r3, #29
   3bbde:	d509      	bpl.n	3bbf4 <restore_non_core_regs+0x30>
   3bbe0:	071a      	lsls	r2, r3, #28
   3bbe2:	d50e      	bpl.n	3bc02 <restore_non_core_regs+0x3e>
   3bbe4:	06db      	lsls	r3, r3, #27
   3bbe6:	d513      	bpl.n	3bc10 <restore_non_core_regs+0x4c>
   3bbe8:	bd10      	pop	{r4, pc}
   3bbea:	f7dd fb4f 	bl	1928c <__gnu_Unwind_Restore_VFP>
   3bbee:	6823      	ldr	r3, [r4, #0]
   3bbf0:	0759      	lsls	r1, r3, #29
   3bbf2:	d4f5      	bmi.n	3bbe0 <restore_non_core_regs+0x1c>
   3bbf4:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
   3bbf8:	f7dd fb58 	bl	192ac <__gnu_Unwind_Restore_VFP_D_16_to_31>
   3bbfc:	6823      	ldr	r3, [r4, #0]
   3bbfe:	071a      	lsls	r2, r3, #28
   3bc00:	d4f0      	bmi.n	3bbe4 <restore_non_core_regs+0x20>
   3bc02:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
   3bc06:	f7dd fb59 	bl	192bc <__gnu_Unwind_Restore_WMMXD>
   3bc0a:	6823      	ldr	r3, [r4, #0]
   3bc0c:	06db      	lsls	r3, r3, #27
   3bc0e:	d4eb      	bmi.n	3bbe8 <restore_non_core_regs+0x24>
   3bc10:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
   3bc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3bc18:	f7dd bb94 	b.w	19344 <__gnu_Unwind_Restore_WMMXC>

0003bc1c <_Unwind_decode_typeinfo_ptr.constprop.0>:
   3bc1c:	4603      	mov	r3, r0
   3bc1e:	6800      	ldr	r0, [r0, #0]
   3bc20:	b100      	cbz	r0, 3bc24 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
   3bc22:	4418      	add	r0, r3
   3bc24:	4770      	bx	lr
   3bc26:	bf00      	nop

0003bc28 <_Unwind_DebugHook>:
   3bc28:	4770      	bx	lr
   3bc2a:	bf00      	nop

0003bc2c <unwind_phase2>:
   3bc2c:	b570      	push	{r4, r5, r6, lr}
   3bc2e:	4604      	mov	r4, r0
   3bc30:	460e      	mov	r6, r1
   3bc32:	6c31      	ldr	r1, [r6, #64]	@ 0x40
   3bc34:	4620      	mov	r0, r4
   3bc36:	f7ff ff79 	bl	3bb2c <get_eit_entry>
   3bc3a:	4605      	mov	r5, r0
   3bc3c:	b988      	cbnz	r0, 3bc62 <unwind_phase2+0x36>
   3bc3e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
   3bc40:	6162      	str	r2, [r4, #20]
   3bc42:	6923      	ldr	r3, [r4, #16]
   3bc44:	4632      	mov	r2, r6
   3bc46:	4621      	mov	r1, r4
   3bc48:	2001      	movs	r0, #1
   3bc4a:	4798      	blx	r3
   3bc4c:	2808      	cmp	r0, #8
   3bc4e:	d0f0      	beq.n	3bc32 <unwind_phase2+0x6>
   3bc50:	2807      	cmp	r0, #7
   3bc52:	d106      	bne.n	3bc62 <unwind_phase2+0x36>
   3bc54:	4628      	mov	r0, r5
   3bc56:	6c31      	ldr	r1, [r6, #64]	@ 0x40
   3bc58:	f7ff ffe6 	bl	3bc28 <_Unwind_DebugHook>
   3bc5c:	1d30      	adds	r0, r6, #4
   3bc5e:	f7dd fb09 	bl	19274 <__restore_core_regs>
   3bc62:	f7e9 fa81 	bl	25168 <abort>
   3bc66:	bf00      	nop

0003bc68 <unwind_phase2_forced>:
   3bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3bc6c:	f101 0c04 	add.w	ip, r1, #4
   3bc70:	68c7      	ldr	r7, [r0, #12]
   3bc72:	f8d0 8018 	ldr.w	r8, [r0, #24]
   3bc76:	4606      	mov	r6, r0
   3bc78:	4691      	mov	r9, r2
   3bc7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3bc7e:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
   3bc82:	ac03      	add	r4, sp, #12
   3bc84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3bc86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3bc8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3bc8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3bc90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3bc92:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   3bc96:	ad02      	add	r5, sp, #8
   3bc98:	f04f 0e00 	mov.w	lr, #0
   3bc9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   3bca0:	f8c5 e000 	str.w	lr, [r5]
   3bca4:	e021      	b.n	3bcea <unwind_phase2_forced+0x82>
   3bca6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
   3bca8:	6173      	str	r3, [r6, #20]
   3bcaa:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
   3bcae:	4629      	mov	r1, r5
   3bcb0:	a87c      	add	r0, sp, #496	@ 0x1f0
   3bcb2:	f7dc fc65 	bl	18580 <memcpy>
   3bcb6:	6933      	ldr	r3, [r6, #16]
   3bcb8:	aa7c      	add	r2, sp, #496	@ 0x1f0
   3bcba:	4631      	mov	r1, r6
   3bcbc:	4650      	mov	r0, sl
   3bcbe:	4798      	blx	r3
   3bcc0:	9b8a      	ldr	r3, [sp, #552]	@ 0x228
   3bcc2:	64ab      	str	r3, [r5, #72]	@ 0x48
   3bcc4:	4649      	mov	r1, r9
   3bcc6:	e9cd 5800 	strd	r5, r8, [sp]
   3bcca:	4682      	mov	sl, r0
   3bccc:	4633      	mov	r3, r6
   3bcce:	2001      	movs	r0, #1
   3bcd0:	4632      	mov	r2, r6
   3bcd2:	47b8      	blx	r7
   3bcd4:	4681      	mov	r9, r0
   3bcd6:	bb30      	cbnz	r0, 3bd26 <unwind_phase2_forced+0xbe>
   3bcd8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
   3bcdc:	a97c      	add	r1, sp, #496	@ 0x1f0
   3bcde:	4628      	mov	r0, r5
   3bce0:	f7dc fc4e 	bl	18580 <memcpy>
   3bce4:	f1ba 0f08 	cmp.w	sl, #8
   3bce8:	d11a      	bne.n	3bd20 <unwind_phase2_forced+0xb8>
   3bcea:	6c29      	ldr	r1, [r5, #64]	@ 0x40
   3bcec:	4630      	mov	r0, r6
   3bcee:	f7ff ff1d 	bl	3bb2c <get_eit_entry>
   3bcf2:	f109 0909 	add.w	r9, r9, #9
   3bcf6:	4604      	mov	r4, r0
   3bcf8:	fa5f fa89 	uxtb.w	sl, r9
   3bcfc:	2800      	cmp	r0, #0
   3bcfe:	d0d2      	beq.n	3bca6 <unwind_phase2_forced+0x3e>
   3bd00:	6bab      	ldr	r3, [r5, #56]	@ 0x38
   3bd02:	64ab      	str	r3, [r5, #72]	@ 0x48
   3bd04:	4632      	mov	r2, r6
   3bd06:	e9cd 5800 	strd	r5, r8, [sp]
   3bd0a:	4633      	mov	r3, r6
   3bd0c:	f04a 0110 	orr.w	r1, sl, #16
   3bd10:	2001      	movs	r0, #1
   3bd12:	47b8      	blx	r7
   3bd14:	b938      	cbnz	r0, 3bd26 <unwind_phase2_forced+0xbe>
   3bd16:	4620      	mov	r0, r4
   3bd18:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
   3bd1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3bd20:	f1ba 0f07 	cmp.w	sl, #7
   3bd24:	d005      	beq.n	3bd32 <unwind_phase2_forced+0xca>
   3bd26:	2409      	movs	r4, #9
   3bd28:	4620      	mov	r0, r4
   3bd2a:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
   3bd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3bd32:	4648      	mov	r0, r9
   3bd34:	6c29      	ldr	r1, [r5, #64]	@ 0x40
   3bd36:	f7ff ff77 	bl	3bc28 <_Unwind_DebugHook>
   3bd3a:	a803      	add	r0, sp, #12
   3bd3c:	f7dd fa9a 	bl	19274 <__restore_core_regs>

0003bd40 <__gnu_Unwind_RaiseException>:
   3bd40:	b5f0      	push	{r4, r5, r6, r7, lr}
   3bd42:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
   3bd44:	640b      	str	r3, [r1, #64]	@ 0x40
   3bd46:	f101 0c04 	add.w	ip, r1, #4
   3bd4a:	460e      	mov	r6, r1
   3bd4c:	4605      	mov	r5, r0
   3bd4e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3bd52:	b0fb      	sub	sp, #492	@ 0x1ec
   3bd54:	ac01      	add	r4, sp, #4
   3bd56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3bd58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3bd5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3bd5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3bd62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3bd64:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   3bd68:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
   3bd6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   3bd70:	9700      	str	r7, [sp, #0]
   3bd72:	e006      	b.n	3bd82 <__gnu_Unwind_RaiseException+0x42>
   3bd74:	692b      	ldr	r3, [r5, #16]
   3bd76:	466a      	mov	r2, sp
   3bd78:	4629      	mov	r1, r5
   3bd7a:	4798      	blx	r3
   3bd7c:	2808      	cmp	r0, #8
   3bd7e:	4604      	mov	r4, r0
   3bd80:	d108      	bne.n	3bd94 <__gnu_Unwind_RaiseException+0x54>
   3bd82:	9910      	ldr	r1, [sp, #64]	@ 0x40
   3bd84:	4628      	mov	r0, r5
   3bd86:	f7ff fed1 	bl	3bb2c <get_eit_entry>
   3bd8a:	2800      	cmp	r0, #0
   3bd8c:	d0f2      	beq.n	3bd74 <__gnu_Unwind_RaiseException+0x34>
   3bd8e:	2009      	movs	r0, #9
   3bd90:	b07b      	add	sp, #492	@ 0x1ec
   3bd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3bd94:	4668      	mov	r0, sp
   3bd96:	f7ff ff15 	bl	3bbc4 <restore_non_core_regs>
   3bd9a:	2c06      	cmp	r4, #6
   3bd9c:	d1f7      	bne.n	3bd8e <__gnu_Unwind_RaiseException+0x4e>
   3bd9e:	4631      	mov	r1, r6
   3bda0:	4628      	mov	r0, r5
   3bda2:	f7ff ff43 	bl	3bc2c <unwind_phase2>
   3bda6:	bf00      	nop

0003bda8 <__gnu_Unwind_ForcedUnwind>:
   3bda8:	60c1      	str	r1, [r0, #12]
   3bdaa:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
   3bdac:	6182      	str	r2, [r0, #24]
   3bdae:	6419      	str	r1, [r3, #64]	@ 0x40
   3bdb0:	2200      	movs	r2, #0
   3bdb2:	4619      	mov	r1, r3
   3bdb4:	f7ff bf58 	b.w	3bc68 <unwind_phase2_forced>

0003bdb8 <__gnu_Unwind_Resume>:
   3bdb8:	b570      	push	{r4, r5, r6, lr}
   3bdba:	68c6      	ldr	r6, [r0, #12]
   3bdbc:	6943      	ldr	r3, [r0, #20]
   3bdbe:	640b      	str	r3, [r1, #64]	@ 0x40
   3bdc0:	b9ae      	cbnz	r6, 3bdee <__gnu_Unwind_Resume+0x36>
   3bdc2:	6903      	ldr	r3, [r0, #16]
   3bdc4:	460a      	mov	r2, r1
   3bdc6:	4604      	mov	r4, r0
   3bdc8:	460d      	mov	r5, r1
   3bdca:	4601      	mov	r1, r0
   3bdcc:	2002      	movs	r0, #2
   3bdce:	4798      	blx	r3
   3bdd0:	2807      	cmp	r0, #7
   3bdd2:	d005      	beq.n	3bde0 <__gnu_Unwind_Resume+0x28>
   3bdd4:	2808      	cmp	r0, #8
   3bdd6:	d10f      	bne.n	3bdf8 <__gnu_Unwind_Resume+0x40>
   3bdd8:	4629      	mov	r1, r5
   3bdda:	4620      	mov	r0, r4
   3bddc:	f7ff ff26 	bl	3bc2c <unwind_phase2>
   3bde0:	4630      	mov	r0, r6
   3bde2:	6c29      	ldr	r1, [r5, #64]	@ 0x40
   3bde4:	f7ff ff20 	bl	3bc28 <_Unwind_DebugHook>
   3bde8:	1d28      	adds	r0, r5, #4
   3bdea:	f7dd fa43 	bl	19274 <__restore_core_regs>
   3bdee:	2201      	movs	r2, #1
   3bdf0:	f7ff ff3a 	bl	3bc68 <unwind_phase2_forced>
   3bdf4:	f7e9 f9b8 	bl	25168 <abort>
   3bdf8:	f7e9 f9b6 	bl	25168 <abort>

0003bdfc <__gnu_Unwind_Resume_or_Rethrow>:
   3bdfc:	68c2      	ldr	r2, [r0, #12]
   3bdfe:	b122      	cbz	r2, 3be0a <__gnu_Unwind_Resume_or_Rethrow+0xe>
   3be00:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
   3be02:	640a      	str	r2, [r1, #64]	@ 0x40
   3be04:	2200      	movs	r2, #0
   3be06:	f7ff bf2f 	b.w	3bc68 <unwind_phase2_forced>
   3be0a:	f7ff bf99 	b.w	3bd40 <__gnu_Unwind_RaiseException>
   3be0e:	bf00      	nop

0003be10 <_Unwind_Complete>:
   3be10:	4770      	bx	lr
   3be12:	bf00      	nop

0003be14 <_Unwind_DeleteException>:
   3be14:	6883      	ldr	r3, [r0, #8]
   3be16:	4601      	mov	r1, r0
   3be18:	b10b      	cbz	r3, 3be1e <_Unwind_DeleteException+0xa>
   3be1a:	2001      	movs	r0, #1
   3be1c:	4718      	bx	r3
   3be1e:	4770      	bx	lr

0003be20 <_Unwind_VRS_Get>:
   3be20:	2905      	cmp	r1, #5
   3be22:	d815      	bhi.n	3be50 <_Unwind_VRS_Get+0x30>
   3be24:	e8df f001 	tbb	[pc, r1]
   3be28:	0314030a 	.word	0x0314030a
   3be2c:	0503      	.short	0x0503
   3be2e:	2001      	movs	r0, #1
   3be30:	4770      	bx	lr
   3be32:	9a00      	ldr	r2, [sp, #0]
   3be34:	6c43      	ldr	r3, [r0, #68]	@ 0x44
   3be36:	6013      	str	r3, [r2, #0]
   3be38:	2000      	movs	r0, #0
   3be3a:	4770      	bx	lr
   3be3c:	b943      	cbnz	r3, 3be50 <_Unwind_VRS_Get+0x30>
   3be3e:	2a0f      	cmp	r2, #15
   3be40:	d806      	bhi.n	3be50 <_Unwind_VRS_Get+0x30>
   3be42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   3be46:	2000      	movs	r0, #0
   3be48:	6853      	ldr	r3, [r2, #4]
   3be4a:	9a00      	ldr	r2, [sp, #0]
   3be4c:	6013      	str	r3, [r2, #0]
   3be4e:	4770      	bx	lr
   3be50:	2002      	movs	r0, #2
   3be52:	4770      	bx	lr

0003be54 <_Unwind_GetGR>:
   3be54:	b500      	push	{lr}
   3be56:	b085      	sub	sp, #20
   3be58:	460a      	mov	r2, r1
   3be5a:	2300      	movs	r3, #0
   3be5c:	a903      	add	r1, sp, #12
   3be5e:	9100      	str	r1, [sp, #0]
   3be60:	4619      	mov	r1, r3
   3be62:	f7ff ffdd 	bl	3be20 <_Unwind_VRS_Get>
   3be66:	9803      	ldr	r0, [sp, #12]
   3be68:	b005      	add	sp, #20
   3be6a:	f85d fb04 	ldr.w	pc, [sp], #4
   3be6e:	bf00      	nop

0003be70 <_Unwind_VRS_Set>:
   3be70:	2905      	cmp	r1, #5
   3be72:	d815      	bhi.n	3bea0 <_Unwind_VRS_Set+0x30>
   3be74:	e8df f001 	tbb	[pc, r1]
   3be78:	0314030a 	.word	0x0314030a
   3be7c:	0503      	.short	0x0503
   3be7e:	2001      	movs	r0, #1
   3be80:	4770      	bx	lr
   3be82:	9b00      	ldr	r3, [sp, #0]
   3be84:	681b      	ldr	r3, [r3, #0]
   3be86:	6443      	str	r3, [r0, #68]	@ 0x44
   3be88:	2000      	movs	r0, #0
   3be8a:	4770      	bx	lr
   3be8c:	b943      	cbnz	r3, 3bea0 <_Unwind_VRS_Set+0x30>
   3be8e:	2a0f      	cmp	r2, #15
   3be90:	d806      	bhi.n	3bea0 <_Unwind_VRS_Set+0x30>
   3be92:	9b00      	ldr	r3, [sp, #0]
   3be94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   3be98:	681b      	ldr	r3, [r3, #0]
   3be9a:	6053      	str	r3, [r2, #4]
   3be9c:	2000      	movs	r0, #0
   3be9e:	4770      	bx	lr
   3bea0:	2002      	movs	r0, #2
   3bea2:	4770      	bx	lr

0003bea4 <_Unwind_SetGR>:
   3bea4:	b510      	push	{r4, lr}
   3bea6:	b084      	sub	sp, #16
   3bea8:	2300      	movs	r3, #0
   3beaa:	ac03      	add	r4, sp, #12
   3beac:	9203      	str	r2, [sp, #12]
   3beae:	9400      	str	r4, [sp, #0]
   3beb0:	460a      	mov	r2, r1
   3beb2:	4619      	mov	r1, r3
   3beb4:	f7ff ffdc 	bl	3be70 <_Unwind_VRS_Set>
   3beb8:	b004      	add	sp, #16
   3beba:	bd10      	pop	{r4, pc}

0003bebc <__gnu_Unwind_Backtrace>:
   3bebc:	b570      	push	{r4, r5, r6, lr}
   3bebe:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
   3bec0:	6413      	str	r3, [r2, #64]	@ 0x40
   3bec2:	f102 0c04 	add.w	ip, r2, #4
   3bec6:	4605      	mov	r5, r0
   3bec8:	460c      	mov	r4, r1
   3beca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3bece:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
   3bed2:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
   3bed6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   3beda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3bede:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   3bee2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3bee6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   3beea:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   3beee:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
   3bef2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   3bef6:	9616      	str	r6, [sp, #88]	@ 0x58
   3bef8:	e010      	b.n	3bf1c <__gnu_Unwind_Backtrace+0x60>
   3befa:	f7ff ffd3 	bl	3bea4 <_Unwind_SetGR>
   3befe:	4621      	mov	r1, r4
   3bf00:	a816      	add	r0, sp, #88	@ 0x58
   3bf02:	47a8      	blx	r5
   3bf04:	4603      	mov	r3, r0
   3bf06:	aa16      	add	r2, sp, #88	@ 0x58
   3bf08:	2008      	movs	r0, #8
   3bf0a:	4669      	mov	r1, sp
   3bf0c:	b983      	cbnz	r3, 3bf30 <__gnu_Unwind_Backtrace+0x74>
   3bf0e:	9b04      	ldr	r3, [sp, #16]
   3bf10:	4798      	blx	r3
   3bf12:	2805      	cmp	r0, #5
   3bf14:	4606      	mov	r6, r0
   3bf16:	d00c      	beq.n	3bf32 <__gnu_Unwind_Backtrace+0x76>
   3bf18:	2809      	cmp	r0, #9
   3bf1a:	d009      	beq.n	3bf30 <__gnu_Unwind_Backtrace+0x74>
   3bf1c:	9926      	ldr	r1, [sp, #152]	@ 0x98
   3bf1e:	4668      	mov	r0, sp
   3bf20:	f7ff fe04 	bl	3bb2c <get_eit_entry>
   3bf24:	4603      	mov	r3, r0
   3bf26:	210c      	movs	r1, #12
   3bf28:	466a      	mov	r2, sp
   3bf2a:	a816      	add	r0, sp, #88	@ 0x58
   3bf2c:	2b00      	cmp	r3, #0
   3bf2e:	d0e4      	beq.n	3befa <__gnu_Unwind_Backtrace+0x3e>
   3bf30:	2609      	movs	r6, #9
   3bf32:	a816      	add	r0, sp, #88	@ 0x58
   3bf34:	f7ff fe46 	bl	3bbc4 <restore_non_core_regs>
   3bf38:	4630      	mov	r0, r6
   3bf3a:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
   3bf3e:	bd70      	pop	{r4, r5, r6, pc}

0003bf40 <__gnu_unwind_pr_common>:
   3bf40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bf44:	4616      	mov	r6, r2
   3bf46:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
   3bf48:	b089      	sub	sp, #36	@ 0x24
   3bf4a:	460d      	mov	r5, r1
   3bf4c:	f852 1b04 	ldr.w	r1, [r2], #4
   3bf50:	9206      	str	r2, [sp, #24]
   3bf52:	f000 0c03 	and.w	ip, r0, #3
   3bf56:	2b00      	cmp	r3, #0
   3bf58:	d079      	beq.n	3c04e <__gnu_unwind_pr_common+0x10e>
   3bf5a:	0c0c      	lsrs	r4, r1, #16
   3bf5c:	f88d 401d 	strb.w	r4, [sp, #29]
   3bf60:	0409      	lsls	r1, r1, #16
   3bf62:	b2e4      	uxtb	r4, r4
   3bf64:	9105      	str	r1, [sp, #20]
   3bf66:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   3bf6a:	2102      	movs	r1, #2
   3bf6c:	f88d 101c 	strb.w	r1, [sp, #28]
   3bf70:	6d29      	ldr	r1, [r5, #80]	@ 0x50
   3bf72:	f1bc 0f02 	cmp.w	ip, #2
   3bf76:	bf08      	it	eq
   3bf78:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
   3bf7a:	f011 0801 	ands.w	r8, r1, #1
   3bf7e:	d009      	beq.n	3bf94 <__gnu_unwind_pr_common+0x54>
   3bf80:	a905      	add	r1, sp, #20
   3bf82:	4630      	mov	r0, r6
   3bf84:	f000 fade 	bl	3c544 <__gnu_unwind_execute>
   3bf88:	2800      	cmp	r0, #0
   3bf8a:	d156      	bne.n	3c03a <__gnu_unwind_pr_common+0xfa>
   3bf8c:	2008      	movs	r0, #8
   3bf8e:	b009      	add	sp, #36	@ 0x24
   3bf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bf94:	6817      	ldr	r7, [r2, #0]
   3bf96:	2f00      	cmp	r7, #0
   3bf98:	d0f2      	beq.n	3bf80 <__gnu_unwind_pr_common+0x40>
   3bf9a:	f000 0108 	and.w	r1, r0, #8
   3bf9e:	e9cd 1801 	strd	r1, r8, [sp, #4]
   3bfa2:	46e3      	mov	fp, ip
   3bfa4:	469a      	mov	sl, r3
   3bfa6:	f1ba 0f02 	cmp.w	sl, #2
   3bfaa:	d04c      	beq.n	3c046 <__gnu_unwind_pr_common+0x106>
   3bfac:	8817      	ldrh	r7, [r2, #0]
   3bfae:	8854      	ldrh	r4, [r2, #2]
   3bfb0:	f102 0904 	add.w	r9, r2, #4
   3bfb4:	6caa      	ldr	r2, [r5, #72]	@ 0x48
   3bfb6:	f024 0301 	bic.w	r3, r4, #1
   3bfba:	210f      	movs	r1, #15
   3bfbc:	4630      	mov	r0, r6
   3bfbe:	eb03 0802 	add.w	r8, r3, r2
   3bfc2:	f7ff ff47 	bl	3be54 <_Unwind_GetGR>
   3bfc6:	4580      	cmp	r8, r0
   3bfc8:	d83b      	bhi.n	3c042 <__gnu_unwind_pr_common+0x102>
   3bfca:	f027 0201 	bic.w	r2, r7, #1
   3bfce:	eb02 0308 	add.w	r3, r2, r8
   3bfd2:	4283      	cmp	r3, r0
   3bfd4:	bf94      	ite	ls
   3bfd6:	2300      	movls	r3, #0
   3bfd8:	2301      	movhi	r3, #1
   3bfda:	0064      	lsls	r4, r4, #1
   3bfdc:	f004 0402 	and.w	r4, r4, #2
   3bfe0:	f007 0701 	and.w	r7, r7, #1
   3bfe4:	4327      	orrs	r7, r4
   3bfe6:	2f01      	cmp	r7, #1
   3bfe8:	d04e      	beq.n	3c088 <__gnu_unwind_pr_common+0x148>
   3bfea:	2f02      	cmp	r7, #2
   3bfec:	d035      	beq.n	3c05a <__gnu_unwind_pr_common+0x11a>
   3bfee:	bb27      	cbnz	r7, 3c03a <__gnu_unwind_pr_common+0xfa>
   3bff0:	f1bb 0f00 	cmp.w	fp, #0
   3bff4:	d002      	beq.n	3bffc <__gnu_unwind_pr_common+0xbc>
   3bff6:	2b00      	cmp	r3, #0
   3bff8:	f040 80d3 	bne.w	3c1a2 <__gnu_unwind_pr_common+0x262>
   3bffc:	f109 0204 	add.w	r2, r9, #4
   3c000:	6817      	ldr	r7, [r2, #0]
   3c002:	2f00      	cmp	r7, #0
   3c004:	d1cf      	bne.n	3bfa6 <__gnu_unwind_pr_common+0x66>
   3c006:	a905      	add	r1, sp, #20
   3c008:	4630      	mov	r0, r6
   3c00a:	f8dd 8008 	ldr.w	r8, [sp, #8]
   3c00e:	f000 fa99 	bl	3c544 <__gnu_unwind_execute>
   3c012:	b990      	cbnz	r0, 3c03a <__gnu_unwind_pr_common+0xfa>
   3c014:	f1b8 0f00 	cmp.w	r8, #0
   3c018:	d0b8      	beq.n	3bf8c <__gnu_unwind_pr_common+0x4c>
   3c01a:	210f      	movs	r1, #15
   3c01c:	4630      	mov	r0, r6
   3c01e:	f7ff ff19 	bl	3be54 <_Unwind_GetGR>
   3c022:	210e      	movs	r1, #14
   3c024:	4602      	mov	r2, r0
   3c026:	4630      	mov	r0, r6
   3c028:	f7ff ff3c 	bl	3bea4 <_Unwind_SetGR>
   3c02c:	4a6c      	ldr	r2, [pc, #432]	@ (3c1e0 <__gnu_unwind_pr_common+0x2a0>)
   3c02e:	210f      	movs	r1, #15
   3c030:	4630      	mov	r0, r6
   3c032:	f7ff ff37 	bl	3bea4 <_Unwind_SetGR>
   3c036:	2007      	movs	r0, #7
   3c038:	e000      	b.n	3c03c <__gnu_unwind_pr_common+0xfc>
   3c03a:	2009      	movs	r0, #9
   3c03c:	b009      	add	sp, #36	@ 0x24
   3c03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c042:	2300      	movs	r3, #0
   3c044:	e7c9      	b.n	3bfda <__gnu_unwind_pr_common+0x9a>
   3c046:	6854      	ldr	r4, [r2, #4]
   3c048:	f102 0908 	add.w	r9, r2, #8
   3c04c:	e7b2      	b.n	3bfb4 <__gnu_unwind_pr_common+0x74>
   3c04e:	0209      	lsls	r1, r1, #8
   3c050:	9105      	str	r1, [sp, #20]
   3c052:	f88d 301d 	strb.w	r3, [sp, #29]
   3c056:	2103      	movs	r1, #3
   3c058:	e788      	b.n	3bf6c <__gnu_unwind_pr_common+0x2c>
   3c05a:	f8d9 4000 	ldr.w	r4, [r9]
   3c05e:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
   3c062:	f1bb 0f00 	cmp.w	fp, #0
   3c066:	d147      	bne.n	3c0f8 <__gnu_unwind_pr_common+0x1b8>
   3c068:	b12b      	cbz	r3, 3c076 <__gnu_unwind_pr_common+0x136>
   3c06a:	9b01      	ldr	r3, [sp, #4]
   3c06c:	2b00      	cmp	r3, #0
   3c06e:	d05c      	beq.n	3c12a <__gnu_unwind_pr_common+0x1ea>
   3c070:	f1b8 0f00 	cmp.w	r8, #0
   3c074:	d059      	beq.n	3c12a <__gnu_unwind_pr_common+0x1ea>
   3c076:	2c00      	cmp	r4, #0
   3c078:	da01      	bge.n	3c07e <__gnu_unwind_pr_common+0x13e>
   3c07a:	f109 0904 	add.w	r9, r9, #4
   3c07e:	f108 0201 	add.w	r2, r8, #1
   3c082:	eb09 0282 	add.w	r2, r9, r2, lsl #2
   3c086:	e7bb      	b.n	3c000 <__gnu_unwind_pr_common+0xc0>
   3c088:	f1bb 0f00 	cmp.w	fp, #0
   3c08c:	d11c      	bne.n	3c0c8 <__gnu_unwind_pr_common+0x188>
   3c08e:	b1c3      	cbz	r3, 3c0c2 <__gnu_unwind_pr_common+0x182>
   3c090:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3c094:	f8d9 2000 	ldr.w	r2, [r9]
   3c098:	1c99      	adds	r1, r3, #2
   3c09a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   3c09e:	d0cc      	beq.n	3c03a <__gnu_unwind_pr_common+0xfa>
   3c0a0:	f105 0458 	add.w	r4, r5, #88	@ 0x58
   3c0a4:	3301      	adds	r3, #1
   3c0a6:	9404      	str	r4, [sp, #16]
   3c0a8:	f000 808e 	beq.w	3c1c8 <__gnu_unwind_pr_common+0x288>
   3c0ac:	f109 0004 	add.w	r0, r9, #4
   3c0b0:	f7ff fdb4 	bl	3bc1c <_Unwind_decode_typeinfo_ptr.constprop.0>
   3c0b4:	ab04      	add	r3, sp, #16
   3c0b6:	4601      	mov	r1, r0
   3c0b8:	4628      	mov	r0, r5
   3c0ba:	f7f8 f835 	bl	34128 <__cxa_type_match>
   3c0be:	2800      	cmp	r0, #0
   3c0c0:	d159      	bne.n	3c176 <__gnu_unwind_pr_common+0x236>
   3c0c2:	f109 0208 	add.w	r2, r9, #8
   3c0c6:	e79b      	b.n	3c000 <__gnu_unwind_pr_common+0xc0>
   3c0c8:	210d      	movs	r1, #13
   3c0ca:	4630      	mov	r0, r6
   3c0cc:	f7ff fec2 	bl	3be54 <_Unwind_GetGR>
   3c0d0:	6a2c      	ldr	r4, [r5, #32]
   3c0d2:	4284      	cmp	r4, r0
   3c0d4:	d1f5      	bne.n	3c0c2 <__gnu_unwind_pr_common+0x182>
   3c0d6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   3c0d8:	4599      	cmp	r9, r3
   3c0da:	d1f2      	bne.n	3c0c2 <__gnu_unwind_pr_common+0x182>
   3c0dc:	4648      	mov	r0, r9
   3c0de:	f7ff fcd3 	bl	3ba88 <selfrel_offset31>
   3c0e2:	210f      	movs	r1, #15
   3c0e4:	4602      	mov	r2, r0
   3c0e6:	4630      	mov	r0, r6
   3c0e8:	f7ff fedc 	bl	3bea4 <_Unwind_SetGR>
   3c0ec:	462a      	mov	r2, r5
   3c0ee:	2100      	movs	r1, #0
   3c0f0:	4630      	mov	r0, r6
   3c0f2:	f7ff fed7 	bl	3bea4 <_Unwind_SetGR>
   3c0f6:	e79e      	b.n	3c036 <__gnu_unwind_pr_common+0xf6>
   3c0f8:	210d      	movs	r1, #13
   3c0fa:	4630      	mov	r0, r6
   3c0fc:	f7ff feaa 	bl	3be54 <_Unwind_GetGR>
   3c100:	6a2f      	ldr	r7, [r5, #32]
   3c102:	4287      	cmp	r7, r0
   3c104:	d1b7      	bne.n	3c076 <__gnu_unwind_pr_common+0x136>
   3c106:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   3c108:	4599      	cmp	r9, r3
   3c10a:	d1b4      	bne.n	3c076 <__gnu_unwind_pr_common+0x136>
   3c10c:	2400      	movs	r4, #0
   3c10e:	2304      	movs	r3, #4
   3c110:	e9c5 430b 	strd	r4, r3, [r5, #44]	@ 0x2c
   3c114:	444b      	add	r3, r9
   3c116:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
   3c11a:	636b      	str	r3, [r5, #52]	@ 0x34
   3c11c:	f8d9 3000 	ldr.w	r3, [r9]
   3c120:	42a3      	cmp	r3, r4
   3c122:	db58      	blt.n	3c1d6 <__gnu_unwind_pr_common+0x296>
   3c124:	2301      	movs	r3, #1
   3c126:	9302      	str	r3, [sp, #8]
   3c128:	e7a9      	b.n	3c07e <__gnu_unwind_pr_common+0x13e>
   3c12a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
   3c12e:	f8cd b00c 	str.w	fp, [sp, #12]
   3c132:	f109 0704 	add.w	r7, r9, #4
   3c136:	46b3      	mov	fp, r6
   3c138:	2400      	movs	r4, #0
   3c13a:	461e      	mov	r6, r3
   3c13c:	e00b      	b.n	3c156 <__gnu_unwind_pr_common+0x216>
   3c13e:	4638      	mov	r0, r7
   3c140:	9604      	str	r6, [sp, #16]
   3c142:	f7ff fd6b 	bl	3bc1c <_Unwind_decode_typeinfo_ptr.constprop.0>
   3c146:	2200      	movs	r2, #0
   3c148:	4601      	mov	r1, r0
   3c14a:	ab04      	add	r3, sp, #16
   3c14c:	4628      	mov	r0, r5
   3c14e:	f7f7 ffeb 	bl	34128 <__cxa_type_match>
   3c152:	3704      	adds	r7, #4
   3c154:	b9f8      	cbnz	r0, 3c196 <__gnu_unwind_pr_common+0x256>
   3c156:	4544      	cmp	r4, r8
   3c158:	f104 0401 	add.w	r4, r4, #1
   3c15c:	d1ef      	bne.n	3c13e <__gnu_unwind_pr_common+0x1fe>
   3c15e:	210d      	movs	r1, #13
   3c160:	4658      	mov	r0, fp
   3c162:	f7ff fe77 	bl	3be54 <_Unwind_GetGR>
   3c166:	9b04      	ldr	r3, [sp, #16]
   3c168:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
   3c16c:	4602      	mov	r2, r0
   3c16e:	e9c5 2308 	strd	r2, r3, [r5, #32]
   3c172:	2006      	movs	r0, #6
   3c174:	e762      	b.n	3c03c <__gnu_unwind_pr_common+0xfc>
   3c176:	4604      	mov	r4, r0
   3c178:	210d      	movs	r1, #13
   3c17a:	4630      	mov	r0, r6
   3c17c:	f7ff fe6a 	bl	3be54 <_Unwind_GetGR>
   3c180:	9e04      	ldr	r6, [sp, #16]
   3c182:	6228      	str	r0, [r5, #32]
   3c184:	2c02      	cmp	r4, #2
   3c186:	bf04      	itt	eq
   3c188:	62ee      	streq	r6, [r5, #44]	@ 0x2c
   3c18a:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
   3c18e:	e9c5 6909 	strd	r6, r9, [r5, #36]	@ 0x24
   3c192:	2006      	movs	r0, #6
   3c194:	e752      	b.n	3c03c <__gnu_unwind_pr_common+0xfc>
   3c196:	465e      	mov	r6, fp
   3c198:	f8d9 4000 	ldr.w	r4, [r9]
   3c19c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   3c1a0:	e769      	b.n	3c076 <__gnu_unwind_pr_common+0x136>
   3c1a2:	4648      	mov	r0, r9
   3c1a4:	f7ff fc70 	bl	3ba88 <selfrel_offset31>
   3c1a8:	f109 0304 	add.w	r3, r9, #4
   3c1ac:	4604      	mov	r4, r0
   3c1ae:	63ab      	str	r3, [r5, #56]	@ 0x38
   3c1b0:	4628      	mov	r0, r5
   3c1b2:	f7f8 f811 	bl	341d8 <__cxa_begin_cleanup>
   3c1b6:	2800      	cmp	r0, #0
   3c1b8:	f43f af3f 	beq.w	3c03a <__gnu_unwind_pr_common+0xfa>
   3c1bc:	4622      	mov	r2, r4
   3c1be:	210f      	movs	r1, #15
   3c1c0:	4630      	mov	r0, r6
   3c1c2:	f7ff fe6f 	bl	3bea4 <_Unwind_SetGR>
   3c1c6:	e736      	b.n	3c036 <__gnu_unwind_pr_common+0xf6>
   3c1c8:	4630      	mov	r0, r6
   3c1ca:	210d      	movs	r1, #13
   3c1cc:	f7ff fe42 	bl	3be54 <_Unwind_GetGR>
   3c1d0:	4626      	mov	r6, r4
   3c1d2:	6228      	str	r0, [r5, #32]
   3c1d4:	e7db      	b.n	3c18e <__gnu_unwind_pr_common+0x24e>
   3c1d6:	f108 0201 	add.w	r2, r8, #1
   3c1da:	eb09 0082 	add.w	r0, r9, r2, lsl #2
   3c1de:	e77e      	b.n	3c0de <__gnu_unwind_pr_common+0x19e>
   3c1e0:	0003b485 	.word	0x0003b485

0003c1e4 <__aeabi_unwind_cpp_pr0>:
   3c1e4:	2300      	movs	r3, #0
   3c1e6:	f7ff beab 	b.w	3bf40 <__gnu_unwind_pr_common>
   3c1ea:	bf00      	nop

0003c1ec <__aeabi_unwind_cpp_pr1>:
   3c1ec:	2301      	movs	r3, #1
   3c1ee:	f7ff bea7 	b.w	3bf40 <__gnu_unwind_pr_common>
   3c1f2:	bf00      	nop

0003c1f4 <__aeabi_unwind_cpp_pr2>:
   3c1f4:	2302      	movs	r3, #2
   3c1f6:	f7ff bea3 	b.w	3bf40 <__gnu_unwind_pr_common>
   3c1fa:	bf00      	nop

0003c1fc <_Unwind_VRS_Pop>:
   3c1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c200:	4606      	mov	r6, r0
   3c202:	b0c4      	sub	sp, #272	@ 0x110
   3c204:	4614      	mov	r4, r2
   3c206:	2905      	cmp	r1, #5
   3c208:	f200 80d8 	bhi.w	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c20c:	e8df f011 	tbh	[pc, r1, lsl #1]
   3c210:	002d0012 	.word	0x002d0012
   3c214:	006c00d6 	.word	0x006c00d6
   3c218:	00060091 	.word	0x00060091
   3c21c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
   3c21e:	2c00      	cmp	r4, #0
   3c220:	f040 80cc 	bne.w	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c224:	f853 2b04 	ldr.w	r2, [r3], #4
   3c228:	6442      	str	r2, [r0, #68]	@ 0x44
   3c22a:	6383      	str	r3, [r0, #56]	@ 0x38
   3c22c:	2000      	movs	r0, #0
   3c22e:	b044      	add	sp, #272	@ 0x110
   3c230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c234:	2b00      	cmp	r3, #0
   3c236:	f040 80c1 	bne.w	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c23a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
   3c23c:	fa1f fc84 	uxth.w	ip, r4
   3c240:	2001      	movs	r0, #1
   3c242:	f106 0e04 	add.w	lr, r6, #4
   3c246:	fa00 f103 	lsl.w	r1, r0, r3
   3c24a:	ea11 0f0c 	tst.w	r1, ip
   3c24e:	462a      	mov	r2, r5
   3c250:	d004      	beq.n	3c25c <_Unwind_VRS_Pop+0x60>
   3c252:	f852 1b04 	ldr.w	r1, [r2], #4
   3c256:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   3c25a:	4615      	mov	r5, r2
   3c25c:	3301      	adds	r3, #1
   3c25e:	2b10      	cmp	r3, #16
   3c260:	d1f1      	bne.n	3c246 <_Unwind_VRS_Pop+0x4a>
   3c262:	04a7      	lsls	r7, r4, #18
   3c264:	d4e2      	bmi.n	3c22c <_Unwind_VRS_Pop+0x30>
   3c266:	63b5      	str	r5, [r6, #56]	@ 0x38
   3c268:	e7e0      	b.n	3c22c <_Unwind_VRS_Pop+0x30>
   3c26a:	2b01      	cmp	r3, #1
   3c26c:	ea4f 4714 	mov.w	r7, r4, lsr #16
   3c270:	b2a4      	uxth	r4, r4
   3c272:	f000 8083 	beq.w	3c37c <_Unwind_VRS_Pop+0x180>
   3c276:	2b05      	cmp	r3, #5
   3c278:	f040 80a0 	bne.w	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c27c:	eb07 0804 	add.w	r8, r7, r4
   3c280:	f1b8 0f20 	cmp.w	r8, #32
   3c284:	f200 809a 	bhi.w	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c288:	2f0f      	cmp	r7, #15
   3c28a:	f240 8099 	bls.w	3c3c0 <_Unwind_VRS_Pop+0x1c4>
   3c28e:	2c00      	cmp	r4, #0
   3c290:	d0cc      	beq.n	3c22c <_Unwind_VRS_Pop+0x30>
   3c292:	6802      	ldr	r2, [r0, #0]
   3c294:	0750      	lsls	r0, r2, #29
   3c296:	f100 8118 	bmi.w	3c4ca <_Unwind_VRS_Pop+0x2ce>
   3c29a:	9301      	str	r3, [sp, #4]
   3c29c:	ad02      	add	r5, sp, #8
   3c29e:	4628      	mov	r0, r5
   3c2a0:	f7dd f808 	bl	192b4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   3c2a4:	ea4f 0c44 	mov.w	ip, r4, lsl #1
   3c2a8:	f1a7 0010 	sub.w	r0, r7, #16
   3c2ac:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
   3c2ae:	9b01      	ldr	r3, [sp, #4]
   3c2b0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
   3c2b4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   3c2b8:	f10c 0c01 	add.w	ip, ip, #1
   3c2bc:	3804      	subs	r0, #4
   3c2be:	eb01 028c 	add.w	r2, r1, ip, lsl #2
   3c2c2:	f851 4b04 	ldr.w	r4, [r1], #4
   3c2c6:	f840 4f04 	str.w	r4, [r0, #4]!
   3c2ca:	4291      	cmp	r1, r2
   3c2cc:	d1f9      	bne.n	3c2c2 <_Unwind_VRS_Pop+0xc6>
   3c2ce:	2b01      	cmp	r3, #1
   3c2d0:	f000 80de 	beq.w	3c490 <_Unwind_VRS_Pop+0x294>
   3c2d4:	2f0f      	cmp	r7, #15
   3c2d6:	63b1      	str	r1, [r6, #56]	@ 0x38
   3c2d8:	d802      	bhi.n	3c2e0 <_Unwind_VRS_Pop+0xe4>
   3c2da:	a822      	add	r0, sp, #136	@ 0x88
   3c2dc:	f7dc ffde 	bl	1929c <__gnu_Unwind_Restore_VFP_D>
   3c2e0:	4628      	mov	r0, r5
   3c2e2:	f7dc ffe3 	bl	192ac <__gnu_Unwind_Restore_VFP_D_16_to_31>
   3c2e6:	e7a1      	b.n	3c22c <_Unwind_VRS_Pop+0x30>
   3c2e8:	2b03      	cmp	r3, #3
   3c2ea:	d167      	bne.n	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c2ec:	b2a7      	uxth	r7, r4
   3c2ee:	eb07 4314 	add.w	r3, r7, r4, lsr #16
   3c2f2:	2b10      	cmp	r3, #16
   3c2f4:	ea4f 4414 	mov.w	r4, r4, lsr #16
   3c2f8:	d860      	bhi.n	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c2fa:	6803      	ldr	r3, [r0, #0]
   3c2fc:	0719      	lsls	r1, r3, #28
   3c2fe:	f100 80bf 	bmi.w	3c480 <_Unwind_VRS_Pop+0x284>
   3c302:	ad22      	add	r5, sp, #136	@ 0x88
   3c304:	4628      	mov	r0, r5
   3c306:	f7dc fffb 	bl	19300 <__gnu_Unwind_Save_WMMXD>
   3c30a:	007a      	lsls	r2, r7, #1
   3c30c:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
   3c30e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   3c312:	1e53      	subs	r3, r2, #1
   3c314:	b142      	cbz	r2, 3c328 <_Unwind_VRS_Pop+0x12c>
   3c316:	1b01      	subs	r1, r0, r4
   3c318:	5862      	ldr	r2, [r4, r1]
   3c31a:	f844 2b04 	str.w	r2, [r4], #4
   3c31e:	3b01      	subs	r3, #1
   3c320:	1c5a      	adds	r2, r3, #1
   3c322:	d1f9      	bne.n	3c318 <_Unwind_VRS_Pop+0x11c>
   3c324:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
   3c328:	63b0      	str	r0, [r6, #56]	@ 0x38
   3c32a:	4628      	mov	r0, r5
   3c32c:	f7dc ffc6 	bl	192bc <__gnu_Unwind_Restore_WMMXD>
   3c330:	e77c      	b.n	3c22c <_Unwind_VRS_Pop+0x30>
   3c332:	2b00      	cmp	r3, #0
   3c334:	d142      	bne.n	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c336:	2c10      	cmp	r4, #16
   3c338:	d840      	bhi.n	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c33a:	6803      	ldr	r3, [r0, #0]
   3c33c:	06dd      	lsls	r5, r3, #27
   3c33e:	f100 8097 	bmi.w	3c470 <_Unwind_VRS_Pop+0x274>
   3c342:	ad22      	add	r5, sp, #136	@ 0x88
   3c344:	4628      	mov	r0, r5
   3c346:	f7dd f807 	bl	19358 <__gnu_Unwind_Save_WMMXC>
   3c34a:	6bb7      	ldr	r7, [r6, #56]	@ 0x38
   3c34c:	4629      	mov	r1, r5
   3c34e:	2300      	movs	r3, #0
   3c350:	f04f 0c01 	mov.w	ip, #1
   3c354:	fa0c f203 	lsl.w	r2, ip, r3
   3c358:	4222      	tst	r2, r4
   3c35a:	4638      	mov	r0, r7
   3c35c:	f103 0301 	add.w	r3, r3, #1
   3c360:	d003      	beq.n	3c36a <_Unwind_VRS_Pop+0x16e>
   3c362:	f850 2b04 	ldr.w	r2, [r0], #4
   3c366:	600a      	str	r2, [r1, #0]
   3c368:	4607      	mov	r7, r0
   3c36a:	2b04      	cmp	r3, #4
   3c36c:	f101 0104 	add.w	r1, r1, #4
   3c370:	d1f0      	bne.n	3c354 <_Unwind_VRS_Pop+0x158>
   3c372:	63b7      	str	r7, [r6, #56]	@ 0x38
   3c374:	4628      	mov	r0, r5
   3c376:	f7dc ffe5 	bl	19344 <__gnu_Unwind_Restore_WMMXC>
   3c37a:	e757      	b.n	3c22c <_Unwind_VRS_Pop+0x30>
   3c37c:	193a      	adds	r2, r7, r4
   3c37e:	2a10      	cmp	r2, #16
   3c380:	d81c      	bhi.n	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c382:	2f10      	cmp	r7, #16
   3c384:	d01a      	beq.n	3c3bc <_Unwind_VRS_Pop+0x1c0>
   3c386:	6802      	ldr	r2, [r0, #0]
   3c388:	07d0      	lsls	r0, r2, #31
   3c38a:	d508      	bpl.n	3c39e <_Unwind_VRS_Pop+0x1a2>
   3c38c:	4630      	mov	r0, r6
   3c38e:	f022 0203 	bic.w	r2, r2, #3
   3c392:	f840 2b50 	str.w	r2, [r0], #80
   3c396:	9301      	str	r3, [sp, #4]
   3c398:	f7dc ff7c 	bl	19294 <__gnu_Unwind_Save_VFP>
   3c39c:	9b01      	ldr	r3, [sp, #4]
   3c39e:	9301      	str	r3, [sp, #4]
   3c3a0:	ad22      	add	r5, sp, #136	@ 0x88
   3c3a2:	4628      	mov	r0, r5
   3c3a4:	f7dc ff76 	bl	19294 <__gnu_Unwind_Save_VFP>
   3c3a8:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
   3c3aa:	9b01      	ldr	r3, [sp, #4]
   3c3ac:	2c00      	cmp	r4, #0
   3c3ae:	d158      	bne.n	3c462 <_Unwind_VRS_Pop+0x266>
   3c3b0:	3204      	adds	r2, #4
   3c3b2:	63b2      	str	r2, [r6, #56]	@ 0x38
   3c3b4:	4628      	mov	r0, r5
   3c3b6:	f7dc ff69 	bl	1928c <__gnu_Unwind_Restore_VFP>
   3c3ba:	e737      	b.n	3c22c <_Unwind_VRS_Pop+0x30>
   3c3bc:	2002      	movs	r0, #2
   3c3be:	e736      	b.n	3c22e <_Unwind_VRS_Pop+0x32>
   3c3c0:	f1b8 0f10 	cmp.w	r8, #16
   3c3c4:	6802      	ldr	r2, [r0, #0]
   3c3c6:	d965      	bls.n	3c494 <_Unwind_VRS_Pop+0x298>
   3c3c8:	07d4      	lsls	r4, r2, #31
   3c3ca:	d572      	bpl.n	3c4b2 <_Unwind_VRS_Pop+0x2b6>
   3c3cc:	f022 0201 	bic.w	r2, r2, #1
   3c3d0:	f042 0202 	orr.w	r2, r2, #2
   3c3d4:	f840 2b50 	str.w	r2, [r0], #80
   3c3d8:	9301      	str	r3, [sp, #4]
   3c3da:	f7dc ff63 	bl	192a4 <__gnu_Unwind_Save_VFP_D>
   3c3de:	6832      	ldr	r2, [r6, #0]
   3c3e0:	9b01      	ldr	r3, [sp, #4]
   3c3e2:	f012 0f04 	tst.w	r2, #4
   3c3e6:	d166      	bne.n	3c4b6 <_Unwind_VRS_Pop+0x2ba>
   3c3e8:	ad22      	add	r5, sp, #136	@ 0x88
   3c3ea:	4628      	mov	r0, r5
   3c3ec:	9301      	str	r3, [sp, #4]
   3c3ee:	f7dc ff59 	bl	192a4 <__gnu_Unwind_Save_VFP_D>
   3c3f2:	a802      	add	r0, sp, #8
   3c3f4:	f7dc ff5e 	bl	192b4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   3c3f8:	f1c7 0110 	rsb	r1, r7, #16
   3c3fc:	0049      	lsls	r1, r1, #1
   3c3fe:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
   3c400:	9b01      	ldr	r3, [sp, #4]
   3c402:	f1a8 0c10 	sub.w	ip, r8, #16
   3c406:	1e4c      	subs	r4, r1, #1
   3c408:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
   3c40c:	3401      	adds	r4, #1
   3c40e:	3804      	subs	r0, #4
   3c410:	eb02 0184 	add.w	r1, r2, r4, lsl #2
   3c414:	f852 4b04 	ldr.w	r4, [r2], #4
   3c418:	f840 4f04 	str.w	r4, [r0, #4]!
   3c41c:	428a      	cmp	r2, r1
   3c41e:	d1f9      	bne.n	3c414 <_Unwind_VRS_Pop+0x218>
   3c420:	f1bc 0f00 	cmp.w	ip, #0
   3c424:	d05a      	beq.n	3c4dc <_Unwind_VRS_Pop+0x2e0>
   3c426:	2f10      	cmp	r7, #16
   3c428:	4638      	mov	r0, r7
   3c42a:	bf38      	it	cc
   3c42c:	2010      	movcc	r0, #16
   3c42e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   3c432:	3810      	subs	r0, #16
   3c434:	ad02      	add	r5, sp, #8
   3c436:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
   3c43a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   3c43e:	e73b      	b.n	3c2b8 <_Unwind_VRS_Pop+0xbc>
   3c440:	4630      	mov	r0, r6
   3c442:	f022 0201 	bic.w	r2, r2, #1
   3c446:	f042 0202 	orr.w	r2, r2, #2
   3c44a:	f840 2b50 	str.w	r2, [r0], #80
   3c44e:	ad22      	add	r5, sp, #136	@ 0x88
   3c450:	9301      	str	r3, [sp, #4]
   3c452:	f7dc ff27 	bl	192a4 <__gnu_Unwind_Save_VFP_D>
   3c456:	4628      	mov	r0, r5
   3c458:	f7dc ff24 	bl	192a4 <__gnu_Unwind_Save_VFP_D>
   3c45c:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
   3c45e:	b324      	cbz	r4, 3c4aa <_Unwind_VRS_Pop+0x2ae>
   3c460:	9b01      	ldr	r3, [sp, #4]
   3c462:	0064      	lsls	r4, r4, #1
   3c464:	3c01      	subs	r4, #1
   3c466:	eb05 00c7 	add.w	r0, r5, r7, lsl #3
   3c46a:	f04f 0c00 	mov.w	ip, #0
   3c46e:	e7cd      	b.n	3c40c <_Unwind_VRS_Pop+0x210>
   3c470:	f023 0310 	bic.w	r3, r3, #16
   3c474:	6003      	str	r3, [r0, #0]
   3c476:	f500 70ec 	add.w	r0, r0, #472	@ 0x1d8
   3c47a:	f7dc ff6d 	bl	19358 <__gnu_Unwind_Save_WMMXC>
   3c47e:	e760      	b.n	3c342 <_Unwind_VRS_Pop+0x146>
   3c480:	f023 0308 	bic.w	r3, r3, #8
   3c484:	6003      	str	r3, [r0, #0]
   3c486:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
   3c48a:	f7dc ff39 	bl	19300 <__gnu_Unwind_Save_WMMXD>
   3c48e:	e738      	b.n	3c302 <_Unwind_VRS_Pop+0x106>
   3c490:	ad22      	add	r5, sp, #136	@ 0x88
   3c492:	e78d      	b.n	3c3b0 <_Unwind_VRS_Pop+0x1b4>
   3c494:	07d1      	lsls	r1, r2, #31
   3c496:	d4d3      	bmi.n	3c440 <_Unwind_VRS_Pop+0x244>
   3c498:	ad22      	add	r5, sp, #136	@ 0x88
   3c49a:	4628      	mov	r0, r5
   3c49c:	9301      	str	r3, [sp, #4]
   3c49e:	f7dc ff01 	bl	192a4 <__gnu_Unwind_Save_VFP_D>
   3c4a2:	6bb2      	ldr	r2, [r6, #56]	@ 0x38
   3c4a4:	9b01      	ldr	r3, [sp, #4]
   3c4a6:	2c00      	cmp	r4, #0
   3c4a8:	d1db      	bne.n	3c462 <_Unwind_VRS_Pop+0x266>
   3c4aa:	4628      	mov	r0, r5
   3c4ac:	f7dc fef6 	bl	1929c <__gnu_Unwind_Restore_VFP_D>
   3c4b0:	e6bc      	b.n	3c22c <_Unwind_VRS_Pop+0x30>
   3c4b2:	0754      	lsls	r4, r2, #29
   3c4b4:	d598      	bpl.n	3c3e8 <_Unwind_VRS_Pop+0x1ec>
   3c4b6:	4630      	mov	r0, r6
   3c4b8:	f022 0204 	bic.w	r2, r2, #4
   3c4bc:	f840 2bd8 	str.w	r2, [r0], #216
   3c4c0:	9301      	str	r3, [sp, #4]
   3c4c2:	f7dc fef7 	bl	192b4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   3c4c6:	9b01      	ldr	r3, [sp, #4]
   3c4c8:	e78e      	b.n	3c3e8 <_Unwind_VRS_Pop+0x1ec>
   3c4ca:	4630      	mov	r0, r6
   3c4cc:	f022 0204 	bic.w	r2, r2, #4
   3c4d0:	f840 2bd8 	str.w	r2, [r0], #216
   3c4d4:	9301      	str	r3, [sp, #4]
   3c4d6:	f7dc feed 	bl	192b4 <__gnu_Unwind_Save_VFP_D_16_to_31>
   3c4da:	e6df      	b.n	3c29c <_Unwind_VRS_Pop+0xa0>
   3c4dc:	2b01      	cmp	r3, #1
   3c4de:	f43f af67 	beq.w	3c3b0 <_Unwind_VRS_Pop+0x1b4>
   3c4e2:	2f0f      	cmp	r7, #15
   3c4e4:	63b2      	str	r2, [r6, #56]	@ 0x38
   3c4e6:	f63f aea1 	bhi.w	3c22c <_Unwind_VRS_Pop+0x30>
   3c4ea:	e7de      	b.n	3c4aa <_Unwind_VRS_Pop+0x2ae>

0003c4ec <next_unwind_byte>:
   3c4ec:	7a02      	ldrb	r2, [r0, #8]
   3c4ee:	4603      	mov	r3, r0
   3c4f0:	b97a      	cbnz	r2, 3c512 <next_unwind_byte+0x26>
   3c4f2:	7a42      	ldrb	r2, [r0, #9]
   3c4f4:	b1a2      	cbz	r2, 3c520 <next_unwind_byte+0x34>
   3c4f6:	6841      	ldr	r1, [r0, #4]
   3c4f8:	3a01      	subs	r2, #1
   3c4fa:	b410      	push	{r4}
   3c4fc:	7242      	strb	r2, [r0, #9]
   3c4fe:	6808      	ldr	r0, [r1, #0]
   3c500:	2203      	movs	r2, #3
   3c502:	1d0c      	adds	r4, r1, #4
   3c504:	721a      	strb	r2, [r3, #8]
   3c506:	0202      	lsls	r2, r0, #8
   3c508:	605c      	str	r4, [r3, #4]
   3c50a:	0e00      	lsrs	r0, r0, #24
   3c50c:	bc10      	pop	{r4}
   3c50e:	601a      	str	r2, [r3, #0]
   3c510:	4770      	bx	lr
   3c512:	6800      	ldr	r0, [r0, #0]
   3c514:	3a01      	subs	r2, #1
   3c516:	721a      	strb	r2, [r3, #8]
   3c518:	0202      	lsls	r2, r0, #8
   3c51a:	601a      	str	r2, [r3, #0]
   3c51c:	0e00      	lsrs	r0, r0, #24
   3c51e:	4770      	bx	lr
   3c520:	20b0      	movs	r0, #176	@ 0xb0
   3c522:	4770      	bx	lr

0003c524 <_Unwind_GetGR.constprop.0>:
   3c524:	b500      	push	{lr}
   3c526:	b085      	sub	sp, #20
   3c528:	aa03      	add	r2, sp, #12
   3c52a:	2300      	movs	r3, #0
   3c52c:	9200      	str	r2, [sp, #0]
   3c52e:	4619      	mov	r1, r3
   3c530:	220c      	movs	r2, #12
   3c532:	f7ff fc75 	bl	3be20 <_Unwind_VRS_Get>
   3c536:	9803      	ldr	r0, [sp, #12]
   3c538:	b005      	add	sp, #20
   3c53a:	f85d fb04 	ldr.w	pc, [sp], #4
   3c53e:	bf00      	nop

0003c540 <unwind_UCB_from_context>:
   3c540:	f7ff bff0 	b.w	3c524 <_Unwind_GetGR.constprop.0>

0003c544 <__gnu_unwind_execute>:
   3c544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3c548:	4606      	mov	r6, r0
   3c54a:	b085      	sub	sp, #20
   3c54c:	460d      	mov	r5, r1
   3c54e:	f04f 0800 	mov.w	r8, #0
   3c552:	4628      	mov	r0, r5
   3c554:	f7ff ffca 	bl	3c4ec <next_unwind_byte>
   3c558:	28b0      	cmp	r0, #176	@ 0xb0
   3c55a:	4604      	mov	r4, r0
   3c55c:	f000 811c 	beq.w	3c798 <__gnu_unwind_execute+0x254>
   3c560:	0607      	lsls	r7, r0, #24
   3c562:	d55b      	bpl.n	3c61c <__gnu_unwind_execute+0xd8>
   3c564:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
   3c568:	2ba0      	cmp	r3, #160	@ 0xa0
   3c56a:	d01a      	beq.n	3c5a2 <__gnu_unwind_execute+0x5e>
   3c56c:	d830      	bhi.n	3c5d0 <__gnu_unwind_execute+0x8c>
   3c56e:	2b80      	cmp	r3, #128	@ 0x80
   3c570:	f000 8082 	beq.w	3c678 <__gnu_unwind_execute+0x134>
   3c574:	2b90      	cmp	r3, #144	@ 0x90
   3c576:	d127      	bne.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c578:	f000 030d 	and.w	r3, r0, #13
   3c57c:	2b0d      	cmp	r3, #13
   3c57e:	d023      	beq.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c580:	af02      	add	r7, sp, #8
   3c582:	2300      	movs	r3, #0
   3c584:	f000 020f 	and.w	r2, r0, #15
   3c588:	4619      	mov	r1, r3
   3c58a:	9700      	str	r7, [sp, #0]
   3c58c:	4630      	mov	r0, r6
   3c58e:	f7ff fc47 	bl	3be20 <_Unwind_VRS_Get>
   3c592:	2300      	movs	r3, #0
   3c594:	9700      	str	r7, [sp, #0]
   3c596:	220d      	movs	r2, #13
   3c598:	4619      	mov	r1, r3
   3c59a:	4630      	mov	r0, r6
   3c59c:	f7ff fc68 	bl	3be70 <_Unwind_VRS_Set>
   3c5a0:	e7d7      	b.n	3c552 <__gnu_unwind_execute+0xe>
   3c5a2:	43c3      	mvns	r3, r0
   3c5a4:	f003 0307 	and.w	r3, r3, #7
   3c5a8:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
   3c5ac:	411a      	asrs	r2, r3
   3c5ae:	0701      	lsls	r1, r0, #28
   3c5b0:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
   3c5b4:	d501      	bpl.n	3c5ba <__gnu_unwind_execute+0x76>
   3c5b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
   3c5ba:	2300      	movs	r3, #0
   3c5bc:	4619      	mov	r1, r3
   3c5be:	4630      	mov	r0, r6
   3c5c0:	f7ff fe1c 	bl	3c1fc <_Unwind_VRS_Pop>
   3c5c4:	2800      	cmp	r0, #0
   3c5c6:	d0c4      	beq.n	3c552 <__gnu_unwind_execute+0xe>
   3c5c8:	2009      	movs	r0, #9
   3c5ca:	b005      	add	sp, #20
   3c5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3c5d0:	2bb0      	cmp	r3, #176	@ 0xb0
   3c5d2:	d068      	beq.n	3c6a6 <__gnu_unwind_execute+0x162>
   3c5d4:	2bc0      	cmp	r3, #192	@ 0xc0
   3c5d6:	d13d      	bne.n	3c654 <__gnu_unwind_execute+0x110>
   3c5d8:	28c6      	cmp	r0, #198	@ 0xc6
   3c5da:	f000 80ca 	beq.w	3c772 <__gnu_unwind_execute+0x22e>
   3c5de:	28c7      	cmp	r0, #199	@ 0xc7
   3c5e0:	f000 80df 	beq.w	3c7a2 <__gnu_unwind_execute+0x25e>
   3c5e4:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
   3c5e8:	2bc0      	cmp	r3, #192	@ 0xc0
   3c5ea:	f000 80ec 	beq.w	3c7c6 <__gnu_unwind_execute+0x282>
   3c5ee:	28c8      	cmp	r0, #200	@ 0xc8
   3c5f0:	f000 80f7 	beq.w	3c7e2 <__gnu_unwind_execute+0x29e>
   3c5f4:	28c9      	cmp	r0, #201	@ 0xc9
   3c5f6:	d1e7      	bne.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c5f8:	4628      	mov	r0, r5
   3c5fa:	f7ff ff77 	bl	3c4ec <next_unwind_byte>
   3c5fe:	0302      	lsls	r2, r0, #12
   3c600:	f000 000f 	and.w	r0, r0, #15
   3c604:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
   3c608:	3001      	adds	r0, #1
   3c60a:	4302      	orrs	r2, r0
   3c60c:	2101      	movs	r1, #1
   3c60e:	2305      	movs	r3, #5
   3c610:	4630      	mov	r0, r6
   3c612:	f7ff fdf3 	bl	3c1fc <_Unwind_VRS_Pop>
   3c616:	2800      	cmp	r0, #0
   3c618:	d09b      	beq.n	3c552 <__gnu_unwind_execute+0xe>
   3c61a:	e7d5      	b.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c61c:	0083      	lsls	r3, r0, #2
   3c61e:	b2db      	uxtb	r3, r3
   3c620:	1d1f      	adds	r7, r3, #4
   3c622:	f10d 0908 	add.w	r9, sp, #8
   3c626:	2300      	movs	r3, #0
   3c628:	4619      	mov	r1, r3
   3c62a:	f8cd 9000 	str.w	r9, [sp]
   3c62e:	220d      	movs	r2, #13
   3c630:	4630      	mov	r0, r6
   3c632:	f7ff fbf5 	bl	3be20 <_Unwind_VRS_Get>
   3c636:	9b02      	ldr	r3, [sp, #8]
   3c638:	f8cd 9000 	str.w	r9, [sp]
   3c63c:	0660      	lsls	r0, r4, #25
   3c63e:	bf4c      	ite	mi
   3c640:	1bdf      	submi	r7, r3, r7
   3c642:	18ff      	addpl	r7, r7, r3
   3c644:	2300      	movs	r3, #0
   3c646:	220d      	movs	r2, #13
   3c648:	4619      	mov	r1, r3
   3c64a:	4630      	mov	r0, r6
   3c64c:	9702      	str	r7, [sp, #8]
   3c64e:	f7ff fc0f 	bl	3be70 <_Unwind_VRS_Set>
   3c652:	e77e      	b.n	3c552 <__gnu_unwind_execute+0xe>
   3c654:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
   3c658:	2bd0      	cmp	r3, #208	@ 0xd0
   3c65a:	d1b5      	bne.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c65c:	f000 0207 	and.w	r2, r0, #7
   3c660:	3201      	adds	r2, #1
   3c662:	2305      	movs	r3, #5
   3c664:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
   3c668:	2101      	movs	r1, #1
   3c66a:	4630      	mov	r0, r6
   3c66c:	f7ff fdc6 	bl	3c1fc <_Unwind_VRS_Pop>
   3c670:	2800      	cmp	r0, #0
   3c672:	f43f af6e 	beq.w	3c552 <__gnu_unwind_execute+0xe>
   3c676:	e7a7      	b.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c678:	4628      	mov	r0, r5
   3c67a:	f7ff ff37 	bl	3c4ec <next_unwind_byte>
   3c67e:	0224      	lsls	r4, r4, #8
   3c680:	4320      	orrs	r0, r4
   3c682:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
   3c686:	d09f      	beq.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c688:	0104      	lsls	r4, r0, #4
   3c68a:	2300      	movs	r3, #0
   3c68c:	b2a2      	uxth	r2, r4
   3c68e:	4619      	mov	r1, r3
   3c690:	4630      	mov	r0, r6
   3c692:	f7ff fdb3 	bl	3c1fc <_Unwind_VRS_Pop>
   3c696:	2800      	cmp	r0, #0
   3c698:	d196      	bne.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c69a:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
   3c69e:	bf18      	it	ne
   3c6a0:	f04f 0801 	movne.w	r8, #1
   3c6a4:	e755      	b.n	3c552 <__gnu_unwind_execute+0xe>
   3c6a6:	f1a0 03b1 	sub.w	r3, r0, #177	@ 0xb1
   3c6aa:	2b04      	cmp	r3, #4
   3c6ac:	f200 80b5 	bhi.w	3c81a <__gnu_unwind_execute+0x2d6>
   3c6b0:	e8df f003 	tbb	[pc, r3]
   3c6b4:	0c162955 	.word	0x0c162955
   3c6b8:	03          	.byte	0x03
   3c6b9:	00          	.byte	0x00
   3c6ba:	aa03      	add	r2, sp, #12
   3c6bc:	2300      	movs	r3, #0
   3c6be:	9200      	str	r2, [sp, #0]
   3c6c0:	4619      	mov	r1, r3
   3c6c2:	220d      	movs	r2, #13
   3c6c4:	4630      	mov	r0, r6
   3c6c6:	f7ff fbab 	bl	3be20 <_Unwind_VRS_Get>
   3c6ca:	e742      	b.n	3c552 <__gnu_unwind_execute+0xe>
   3c6cc:	2300      	movs	r3, #0
   3c6ce:	461a      	mov	r2, r3
   3c6d0:	2105      	movs	r1, #5
   3c6d2:	4630      	mov	r0, r6
   3c6d4:	f7ff fd92 	bl	3c1fc <_Unwind_VRS_Pop>
   3c6d8:	2800      	cmp	r0, #0
   3c6da:	f43f af3a 	beq.w	3c552 <__gnu_unwind_execute+0xe>
   3c6de:	e773      	b.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c6e0:	4628      	mov	r0, r5
   3c6e2:	f7ff ff03 	bl	3c4ec <next_unwind_byte>
   3c6e6:	0302      	lsls	r2, r0, #12
   3c6e8:	f000 000f 	and.w	r0, r0, #15
   3c6ec:	3001      	adds	r0, #1
   3c6ee:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
   3c6f2:	2301      	movs	r3, #1
   3c6f4:	4302      	orrs	r2, r0
   3c6f6:	4619      	mov	r1, r3
   3c6f8:	4630      	mov	r0, r6
   3c6fa:	f7ff fd7f 	bl	3c1fc <_Unwind_VRS_Pop>
   3c6fe:	2800      	cmp	r0, #0
   3c700:	f43f af27 	beq.w	3c552 <__gnu_unwind_execute+0xe>
   3c704:	e760      	b.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c706:	2300      	movs	r3, #0
   3c708:	f10d 0908 	add.w	r9, sp, #8
   3c70c:	220d      	movs	r2, #13
   3c70e:	4619      	mov	r1, r3
   3c710:	f8cd 9000 	str.w	r9, [sp]
   3c714:	4630      	mov	r0, r6
   3c716:	f7ff fb83 	bl	3be20 <_Unwind_VRS_Get>
   3c71a:	4628      	mov	r0, r5
   3c71c:	f7ff fee6 	bl	3c4ec <next_unwind_byte>
   3c720:	0602      	lsls	r2, r0, #24
   3c722:	9c02      	ldr	r4, [sp, #8]
   3c724:	f04f 0702 	mov.w	r7, #2
   3c728:	d50b      	bpl.n	3c742 <__gnu_unwind_execute+0x1fe>
   3c72a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
   3c72e:	40b8      	lsls	r0, r7
   3c730:	4404      	add	r4, r0
   3c732:	4628      	mov	r0, r5
   3c734:	9402      	str	r4, [sp, #8]
   3c736:	f7ff fed9 	bl	3c4ec <next_unwind_byte>
   3c73a:	0603      	lsls	r3, r0, #24
   3c73c:	f107 0707 	add.w	r7, r7, #7
   3c740:	d4f3      	bmi.n	3c72a <__gnu_unwind_execute+0x1e6>
   3c742:	40b8      	lsls	r0, r7
   3c744:	2300      	movs	r3, #0
   3c746:	f504 7401 	add.w	r4, r4, #516	@ 0x204
   3c74a:	4404      	add	r4, r0
   3c74c:	f8cd 9000 	str.w	r9, [sp]
   3c750:	220d      	movs	r2, #13
   3c752:	4619      	mov	r1, r3
   3c754:	4630      	mov	r0, r6
   3c756:	9402      	str	r4, [sp, #8]
   3c758:	f7ff fb8a 	bl	3be70 <_Unwind_VRS_Set>
   3c75c:	e6f9      	b.n	3c552 <__gnu_unwind_execute+0xe>
   3c75e:	4628      	mov	r0, r5
   3c760:	f7ff fec4 	bl	3c4ec <next_unwind_byte>
   3c764:	1e43      	subs	r3, r0, #1
   3c766:	b2db      	uxtb	r3, r3
   3c768:	2b0e      	cmp	r3, #14
   3c76a:	4602      	mov	r2, r0
   3c76c:	f67f af25 	bls.w	3c5ba <__gnu_unwind_execute+0x76>
   3c770:	e72a      	b.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c772:	4628      	mov	r0, r5
   3c774:	f7ff feba 	bl	3c4ec <next_unwind_byte>
   3c778:	0302      	lsls	r2, r0, #12
   3c77a:	f000 000f 	and.w	r0, r0, #15
   3c77e:	3001      	adds	r0, #1
   3c780:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
   3c784:	2303      	movs	r3, #3
   3c786:	4302      	orrs	r2, r0
   3c788:	4619      	mov	r1, r3
   3c78a:	4630      	mov	r0, r6
   3c78c:	f7ff fd36 	bl	3c1fc <_Unwind_VRS_Pop>
   3c790:	2800      	cmp	r0, #0
   3c792:	f43f aede 	beq.w	3c552 <__gnu_unwind_execute+0xe>
   3c796:	e717      	b.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c798:	f1b8 0f00 	cmp.w	r8, #0
   3c79c:	d02d      	beq.n	3c7fa <__gnu_unwind_execute+0x2b6>
   3c79e:	2000      	movs	r0, #0
   3c7a0:	e713      	b.n	3c5ca <__gnu_unwind_execute+0x86>
   3c7a2:	4628      	mov	r0, r5
   3c7a4:	f7ff fea2 	bl	3c4ec <next_unwind_byte>
   3c7a8:	1e43      	subs	r3, r0, #1
   3c7aa:	b2db      	uxtb	r3, r3
   3c7ac:	2b0e      	cmp	r3, #14
   3c7ae:	4602      	mov	r2, r0
   3c7b0:	f63f af0a 	bhi.w	3c5c8 <__gnu_unwind_execute+0x84>
   3c7b4:	2300      	movs	r3, #0
   3c7b6:	2104      	movs	r1, #4
   3c7b8:	4630      	mov	r0, r6
   3c7ba:	f7ff fd1f 	bl	3c1fc <_Unwind_VRS_Pop>
   3c7be:	2800      	cmp	r0, #0
   3c7c0:	f43f aec7 	beq.w	3c552 <__gnu_unwind_execute+0xe>
   3c7c4:	e700      	b.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c7c6:	f000 020f 	and.w	r2, r0, #15
   3c7ca:	3201      	adds	r2, #1
   3c7cc:	2303      	movs	r3, #3
   3c7ce:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
   3c7d2:	4619      	mov	r1, r3
   3c7d4:	4630      	mov	r0, r6
   3c7d6:	f7ff fd11 	bl	3c1fc <_Unwind_VRS_Pop>
   3c7da:	2800      	cmp	r0, #0
   3c7dc:	f43f aeb9 	beq.w	3c552 <__gnu_unwind_execute+0xe>
   3c7e0:	e6f2      	b.n	3c5c8 <__gnu_unwind_execute+0x84>
   3c7e2:	4628      	mov	r0, r5
   3c7e4:	f7ff fe82 	bl	3c4ec <next_unwind_byte>
   3c7e8:	f000 02f0 	and.w	r2, r0, #240	@ 0xf0
   3c7ec:	f000 030f 	and.w	r3, r0, #15
   3c7f0:	3210      	adds	r2, #16
   3c7f2:	3301      	adds	r3, #1
   3c7f4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   3c7f8:	e708      	b.n	3c60c <__gnu_unwind_execute+0xc8>
   3c7fa:	ac02      	add	r4, sp, #8
   3c7fc:	4643      	mov	r3, r8
   3c7fe:	4641      	mov	r1, r8
   3c800:	9400      	str	r4, [sp, #0]
   3c802:	220e      	movs	r2, #14
   3c804:	4630      	mov	r0, r6
   3c806:	f7ff fb0b 	bl	3be20 <_Unwind_VRS_Get>
   3c80a:	220f      	movs	r2, #15
   3c80c:	9400      	str	r4, [sp, #0]
   3c80e:	4643      	mov	r3, r8
   3c810:	4641      	mov	r1, r8
   3c812:	4630      	mov	r0, r6
   3c814:	f7ff fb2c 	bl	3be70 <_Unwind_VRS_Set>
   3c818:	e7c1      	b.n	3c79e <__gnu_unwind_execute+0x25a>
   3c81a:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
   3c81e:	2bb4      	cmp	r3, #180	@ 0xb4
   3c820:	f43f aed2 	beq.w	3c5c8 <__gnu_unwind_execute+0x84>
   3c824:	f000 0207 	and.w	r2, r0, #7
   3c828:	3201      	adds	r2, #1
   3c82a:	2301      	movs	r3, #1
   3c82c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
   3c830:	4619      	mov	r1, r3
   3c832:	4630      	mov	r0, r6
   3c834:	f7ff fce2 	bl	3c1fc <_Unwind_VRS_Pop>
   3c838:	2800      	cmp	r0, #0
   3c83a:	f43f ae8a 	beq.w	3c552 <__gnu_unwind_execute+0xe>
   3c83e:	e6c3      	b.n	3c5c8 <__gnu_unwind_execute+0x84>

0003c840 <__gnu_unwind_frame>:
   3c840:	b510      	push	{r4, lr}
   3c842:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
   3c844:	6853      	ldr	r3, [r2, #4]
   3c846:	b084      	sub	sp, #16
   3c848:	f04f 0c03 	mov.w	ip, #3
   3c84c:	3208      	adds	r2, #8
   3c84e:	021c      	lsls	r4, r3, #8
   3c850:	4608      	mov	r0, r1
   3c852:	0e1b      	lsrs	r3, r3, #24
   3c854:	a901      	add	r1, sp, #4
   3c856:	9401      	str	r4, [sp, #4]
   3c858:	9202      	str	r2, [sp, #8]
   3c85a:	f88d c00c 	strb.w	ip, [sp, #12]
   3c85e:	f88d 300d 	strb.w	r3, [sp, #13]
   3c862:	f7ff fe6f 	bl	3c544 <__gnu_unwind_execute>
   3c866:	b004      	add	sp, #16
   3c868:	bd10      	pop	{r4, pc}
   3c86a:	bf00      	nop

0003c86c <_Unwind_GetRegionStart>:
   3c86c:	b508      	push	{r3, lr}
   3c86e:	f7ff fe67 	bl	3c540 <unwind_UCB_from_context>
   3c872:	6c80      	ldr	r0, [r0, #72]	@ 0x48
   3c874:	bd08      	pop	{r3, pc}
   3c876:	bf00      	nop

0003c878 <_Unwind_GetLanguageSpecificData>:
   3c878:	b508      	push	{r3, lr}
   3c87a:	f7ff fe61 	bl	3c540 <unwind_UCB_from_context>
   3c87e:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
   3c880:	79c3      	ldrb	r3, [r0, #7]
   3c882:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   3c886:	3008      	adds	r0, #8
   3c888:	bd08      	pop	{r3, pc}
   3c88a:	bf00      	nop

0003c88c <_Unwind_GetDataRelBase>:
   3c88c:	b508      	push	{r3, lr}
   3c88e:	f7e8 fc6b 	bl	25168 <abort>

0003c892 <_Unwind_GetTextRelBase>:
   3c892:	b508      	push	{r3, lr}
   3c894:	f7ff fffa 	bl	3c88c <_Unwind_GetDataRelBase>

0003c898 <ns_spi_dma_read_complete_cb>:

static void ns_spi_dma_read_complete_cb(void *pCallbackCtxt, uint32_t ui32TransactionStatus) {
    (void)pCallbackCtxt;
    (void)ui32TransactionStatus;
    // ns_lp_printf("SPI Read done\n");
    if (ns_spi_config.cb) {
   3c898:	4802      	ldr	r0, [pc, #8]	@ (3c8a4 <ns_spi_dma_read_complete_cb+0xc>)
   3c89a:	69c3      	ldr	r3, [r0, #28]
   3c89c:	b103      	cbz	r3, 3c8a0 <ns_spi_dma_read_complete_cb+0x8>
        ns_spi_config.cb(&ns_spi_config);
   3c89e:	4718      	bx	r3
    }
}
   3c8a0:	4770      	bx	lr
   3c8a2:	bf00      	nop
   3c8a4:	10059098 	.word	0x10059098

0003c8a8 <am_iomaster1_isr>:
void iom_isr(void) {
   3c8a8:	b510      	push	{r4, lr}
    uint32_t foo = am_hal_iom_interrupt_status_get(ns_spi_config.iomHandle, true, &ui32Status);
   3c8aa:	4c0d      	ldr	r4, [pc, #52]	@ (3c8e0 <am_iomaster1_isr+0x38>)
void iom_isr(void) {
   3c8ac:	b082      	sub	sp, #8
    uint32_t foo = am_hal_iom_interrupt_status_get(ns_spi_config.iomHandle, true, &ui32Status);
   3c8ae:	aa01      	add	r2, sp, #4
   3c8b0:	2101      	movs	r1, #1
   3c8b2:	6860      	ldr	r0, [r4, #4]
   3c8b4:	f000 fdfc 	bl	3d4b0 <am_hal_iom_interrupt_status_get>
    if (!am_hal_iom_interrupt_status_get(ns_spi_config.iomHandle, true, &ui32Status)) {
   3c8b8:	6860      	ldr	r0, [r4, #4]
   3c8ba:	aa01      	add	r2, sp, #4
   3c8bc:	2101      	movs	r1, #1
   3c8be:	f000 fdf7 	bl	3d4b0 <am_hal_iom_interrupt_status_get>
   3c8c2:	b908      	cbnz	r0, 3c8c8 <am_iomaster1_isr+0x20>
        if (ui32Status) {
   3c8c4:	9901      	ldr	r1, [sp, #4]
   3c8c6:	b909      	cbnz	r1, 3c8cc <am_iomaster1_isr+0x24>
}
   3c8c8:	b002      	add	sp, #8
   3c8ca:	bd10      	pop	{r4, pc}
            am_hal_iom_interrupt_clear(ns_spi_config.iomHandle, ui32Status);
   3c8cc:	6860      	ldr	r0, [r4, #4]
   3c8ce:	f000 fe13 	bl	3d4f8 <am_hal_iom_interrupt_clear>
            am_hal_iom_interrupt_service(ns_spi_config.iomHandle, ui32Status);
   3c8d2:	9901      	ldr	r1, [sp, #4]
   3c8d4:	6860      	ldr	r0, [r4, #4]
   3c8d6:	f000 fe23 	bl	3d520 <am_hal_iom_interrupt_service>
}
   3c8da:	b002      	add	sp, #8
   3c8dc:	bd10      	pop	{r4, pc}
   3c8de:	bf00      	nop
   3c8e0:	10059098 	.word	0x10059098

0003c8e4 <ns_spi_interface_init>:
uint32_t ns_spi_interface_init(ns_spi_config_t *cfg, uint32_t speed, am_hal_iom_spi_mode_e mode) {
   3c8e4:	b570      	push	{r4, r5, r6, lr}
   3c8e6:	4604      	mov	r4, r0
    cfg->sIomCfg.eInterfaceMode = AM_HAL_IOM_SPI_MODE;
   3c8e8:	2300      	movs	r3, #0
    cfg->sIomCfg.ui32NBTxnBufLength = sizeof(ns_spi_tcb_command_buffer) / sizeof(uint32_t);
   3c8ea:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    cfg->sIomCfg.pNBTxnBuf = ns_spi_tcb_command_buffer;
   3c8ee:	4d1c      	ldr	r5, [pc, #112]	@ (3c960 <ns_spi_interface_init+0x7c>)
    cfg->sIomCfg.ui32NBTxnBufLength = sizeof(ns_spi_tcb_command_buffer) / sizeof(uint32_t);
   3c8f0:	61a0      	str	r0, [r4, #24]
    cfg->sIomCfg.ui32ClockFreq = speed;
   3c8f2:	60e1      	str	r1, [r4, #12]
    am_bsp_iom_pins_enable(cfg->iom, AM_HAL_IOM_SPI_MODE);
   3c8f4:	f994 0000 	ldrsb.w	r0, [r4]
    cfg->sIomCfg.eInterfaceMode = AM_HAL_IOM_SPI_MODE;
   3c8f8:	7223      	strb	r3, [r4, #8]
    am_bsp_iom_pins_enable(cfg->iom, AM_HAL_IOM_SPI_MODE);
   3c8fa:	4619      	mov	r1, r3
    cfg->sIomCfg.eSpiMode = mode;
   3c8fc:	7422      	strb	r2, [r4, #16]
    cfg->sIomCfg.pNBTxnBuf = ns_spi_tcb_command_buffer;
   3c8fe:	6165      	str	r5, [r4, #20]
    am_bsp_iom_pins_enable(cfg->iom, AM_HAL_IOM_SPI_MODE);
   3c900:	f7f6 ff3e 	bl	33780 <am_bsp_iom_pins_enable>
    if (am_hal_iom_initialize(cfg->iom, &(cfg->iomHandle)) ||
   3c904:	4621      	mov	r1, r4
   3c906:	f911 0b04 	ldrsb.w	r0, [r1], #4
   3c90a:	f000 fd31 	bl	3d370 <am_hal_iom_initialize>
   3c90e:	b110      	cbz	r0, 3c916 <ns_spi_interface_init+0x32>
        return NS_SPI_STATUS_ERROR;
   3c910:	2501      	movs	r5, #1
}
   3c912:	4628      	mov	r0, r5
   3c914:	bd70      	pop	{r4, r5, r6, pc}
   3c916:	4602      	mov	r2, r0
        am_hal_iom_power_ctrl(cfg->iomHandle, AM_HAL_SYSCTRL_WAKE, false) ||
   3c918:	4611      	mov	r1, r2
   3c91a:	6860      	ldr	r0, [r4, #4]
   3c91c:	f000 ff88 	bl	3d830 <am_hal_iom_power_ctrl>
    if (am_hal_iom_initialize(cfg->iom, &(cfg->iomHandle)) ||
   3c920:	2800      	cmp	r0, #0
   3c922:	d1f5      	bne.n	3c910 <ns_spi_interface_init+0x2c>
        am_hal_iom_configure(cfg->iomHandle, &(cfg->sIomCfg))) {
   3c924:	6860      	ldr	r0, [r4, #4]
   3c926:	f104 0108 	add.w	r1, r4, #8
   3c92a:	f001 f871 	bl	3da10 <am_hal_iom_configure>
        am_hal_iom_power_ctrl(cfg->iomHandle, AM_HAL_SYSCTRL_WAKE, false) ||
   3c92e:	4605      	mov	r5, r0
   3c930:	2800      	cmp	r0, #0
   3c932:	d1ed      	bne.n	3c910 <ns_spi_interface_init+0x2c>
    am_hal_iom_enable(cfg->iomHandle);
   3c934:	6860      	ldr	r0, [r4, #4]
    memcpy(&ns_spi_config, cfg, sizeof(ns_spi_config_t));
   3c936:	4e0b      	ldr	r6, [pc, #44]	@ (3c964 <ns_spi_interface_init+0x80>)
    am_hal_iom_enable(cfg->iomHandle);
   3c938:	f000 fd42 	bl	3d3c0 <am_hal_iom_enable>
    memcpy(&ns_spi_config, cfg, sizeof(ns_spi_config_t));
   3c93c:	6820      	ldr	r0, [r4, #0]
   3c93e:	6861      	ldr	r1, [r4, #4]
   3c940:	68a2      	ldr	r2, [r4, #8]
   3c942:	68e3      	ldr	r3, [r4, #12]
   3c944:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   3c946:	69a2      	ldr	r2, [r4, #24]
   3c948:	69e3      	ldr	r3, [r4, #28]
   3c94a:	6920      	ldr	r0, [r4, #16]
   3c94c:	6961      	ldr	r1, [r4, #20]
   3c94e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3c950:	4b05      	ldr	r3, [pc, #20]	@ (3c968 <ns_spi_interface_init+0x84>)
   3c952:	2280      	movs	r2, #128	@ 0x80
   3c954:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   3c958:	601a      	str	r2, [r3, #0]
}
   3c95a:	4628      	mov	r0, r5
   3c95c:	bd70      	pop	{r4, r5, r6, pc}
   3c95e:	bf00      	nop
   3c960:	10055098 	.word	0x10055098
   3c964:	10059098 	.word	0x10059098
   3c968:	e000e100 	.word	0xe000e100

0003c96c <ns_spi_read>:
    uint32_t csPin) {
   3c96c:	b500      	push	{lr}
   3c96e:	b08d      	sub	sp, #52	@ 0x34
    Transaction.bContinue = false;
   3c970:	2300      	movs	r3, #0
    uint32_t csPin) {
   3c972:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
    Transaction.ui32StatusSetClr = 0;
   3c976:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
    Transaction.ui32NumBytes = bufLen;
   3c97a:	9204      	str	r2, [sp, #16]
    Transaction.bContinue = false;
   3c97c:	f88d 3020 	strb.w	r3, [sp, #32]
    uint32_t csPin) {
   3c980:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
    Transaction.eDirection = AM_HAL_IOM_RX;
   3c984:	f04f 0c01 	mov.w	ip, #1
   3c988:	f88d c014 	strb.w	ip, [sp, #20]
    Transaction.pui32RxBuffer = (uint32_t *)buf;
   3c98c:	9107      	str	r1, [sp, #28]
    Transaction.ui8RepeatCount = 0;
   3c98e:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    err = am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction);
   3c992:	4669      	mov	r1, sp
   3c994:	6840      	ldr	r0, [r0, #4]
    Transaction.ui8RepeatCount = 0;
   3c996:	f8ad c021 	strh.w	ip, [sp, #33]	@ 0x21
    Transaction.ui64Instr = reg;
   3c99a:	ed8d 7b02 	vstr	d7, [sp, #8]
    Transaction.uPeerInfo.ui32SpiChipSelect = csPin;
   3c99e:	e9cd 3200 	strd	r3, r2, [sp]
    err = am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction);
   3c9a2:	f001 f9a1 	bl	3dce8 <am_hal_iom_blocking_transfer>
}
   3c9a6:	b00d      	add	sp, #52	@ 0x34
   3c9a8:	f85d fb04 	ldr.w	pc, [sp], #4

0003c9ac <ns_spi_read_dma>:

uint32_t ns_spi_read_dma(
    ns_spi_config_t *cfg, const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen,
    uint32_t csPin) {
   3c9ac:	b510      	push	{r4, lr}
   3c9ae:	b08c      	sub	sp, #48	@ 0x30
    uint32_t err;
    am_hal_iom_transfer_t Transaction;
    Transaction.ui8Priority = 1;
    Transaction.ui32InstrLen = regLen;
    Transaction.ui64Instr = reg;
    Transaction.eDirection = AM_HAL_IOM_RX;
   3c9b0:	2401      	movs	r4, #1
    uint32_t csPin) {
   3c9b2:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
    Transaction.eDirection = AM_HAL_IOM_RX;
   3c9b6:	f88d 4014 	strb.w	r4, [sp, #20]
    Transaction.ui32NumBytes = bufLen;
    Transaction.pui32RxBuffer = (uint32_t *)buf;
    Transaction.bContinue = false;
    Transaction.ui8RepeatCount = 0;
   3c9ba:	f44f 7480 	mov.w	r4, #256	@ 0x100
   3c9be:	f8ad 4021 	strh.w	r4, [sp, #33]	@ 0x21
    uint32_t csPin) {
   3c9c2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
    Transaction.ui32NumBytes = bufLen;
   3c9c4:	9204      	str	r2, [sp, #16]
    Transaction.bContinue = false;
   3c9c6:	2300      	movs	r3, #0
    Transaction.pui32RxBuffer = (uint32_t *)buf;
   3c9c8:	9107      	str	r1, [sp, #28]
    Transaction.ui32InstrLen = regLen;
   3c9ca:	9401      	str	r4, [sp, #4]
    Transaction.ui32PauseCondition = 0;
    Transaction.ui32StatusSetClr = 0;
    Transaction.uPeerInfo.ui32SpiChipSelect = csPin;
    // ns_lp_printf("SPI Read DMA len of %d to 0x%x\n", bufLen, (uint32_t)buf);
    err = am_hal_iom_nonblocking_transfer(
   3c9cc:	6840      	ldr	r0, [r0, #4]
    uint32_t csPin) {
   3c9ce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
    err = am_hal_iom_nonblocking_transfer(
   3c9d0:	4a0b      	ldr	r2, [pc, #44]	@ (3ca00 <ns_spi_read_dma+0x54>)
    Transaction.bContinue = false;
   3c9d2:	f88d 3020 	strb.w	r3, [sp, #32]
    err = am_hal_iom_nonblocking_transfer(
   3c9d6:	4669      	mov	r1, sp
    Transaction.ui64Instr = reg;
   3c9d8:	ed8d 7b02 	vstr	d7, [sp, #8]
    Transaction.ui32StatusSetClr = 0;
   3c9dc:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
    Transaction.uPeerInfo.ui32SpiChipSelect = csPin;
   3c9e0:	9400      	str	r4, [sp, #0]
    err = am_hal_iom_nonblocking_transfer(
   3c9e2:	f001 fb4f 	bl	3e084 <am_hal_iom_nonblocking_transfer>
        cfg->iomHandle, &Transaction, ns_spi_dma_read_complete_cb, 0);

    // err = am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction);
    if (err) {
   3c9e6:	b910      	cbnz	r0, 3c9ee <ns_spi_read_dma+0x42>
        ns_lp_printf("SPI Read DMA Error %d\n", err);
        return err;
    }
    // return NS_SPI_STATUS_SUCCESS;
}
   3c9e8:	4620      	mov	r0, r4
   3c9ea:	b00c      	add	sp, #48	@ 0x30
   3c9ec:	bd10      	pop	{r4, pc}
   3c9ee:	4604      	mov	r4, r0
        ns_lp_printf("SPI Read DMA Error %d\n", err);
   3c9f0:	4621      	mov	r1, r4
   3c9f2:	4804      	ldr	r0, [pc, #16]	@ (3ca04 <ns_spi_read_dma+0x58>)
   3c9f4:	f7ef f9ac 	bl	2bd50 <ns_lp_printf>
}
   3c9f8:	4620      	mov	r0, r4
   3c9fa:	b00c      	add	sp, #48	@ 0x30
   3c9fc:	bd10      	pop	{r4, pc}
   3c9fe:	bf00      	nop
   3ca00:	0003c899 	.word	0x0003c899
   3ca04:	00040854 	.word	0x00040854

0003ca08 <ns_spi_write>:

uint32_t ns_spi_write(
    ns_spi_config_t *cfg, const void *buf, uint32_t bufLen, uint64_t reg, uint32_t regLen,
    uint32_t csPin) {
   3ca08:	b500      	push	{lr}
   3ca0a:	b08d      	sub	sp, #52	@ 0x34
    am_hal_iom_transfer_t Transaction;
    Transaction.ui8Priority = 1;
    Transaction.ui32InstrLen = regLen;
    Transaction.ui64Instr = reg;
    Transaction.eDirection = AM_HAL_IOM_TX;
   3ca0c:	2300      	movs	r3, #0
    uint32_t csPin) {
   3ca0e:	ed9d 7b0e 	vldr	d7, [sp, #56]	@ 0x38
    Transaction.ui32NumBytes = bufLen;
    Transaction.pui32TxBuffer = (uint32_t *)buf;
    Transaction.bContinue = false;
    Transaction.ui8RepeatCount = 0;
    Transaction.ui32PauseCondition = 0;
    Transaction.ui32StatusSetClr = 0;
   3ca12:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
    Transaction.eDirection = AM_HAL_IOM_TX;
   3ca16:	f88d 3014 	strb.w	r3, [sp, #20]
    Transaction.ui32NumBytes = bufLen;
   3ca1a:	9204      	str	r2, [sp, #16]
    Transaction.bContinue = false;
   3ca1c:	f88d 3020 	strb.w	r3, [sp, #32]
    uint32_t csPin) {
   3ca20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
    Transaction.ui8RepeatCount = 0;
   3ca24:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    Transaction.pui32TxBuffer = (uint32_t *)buf;
   3ca28:	9106      	str	r1, [sp, #24]
    Transaction.uPeerInfo.ui32SpiChipSelect = csPin;
    if (am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction)) {
   3ca2a:	6840      	ldr	r0, [r0, #4]
    Transaction.ui8RepeatCount = 0;
   3ca2c:	f8ad c021 	strh.w	ip, [sp, #33]	@ 0x21
    if (am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction)) {
   3ca30:	4669      	mov	r1, sp
    Transaction.ui64Instr = reg;
   3ca32:	ed8d 7b02 	vstr	d7, [sp, #8]
    Transaction.uPeerInfo.ui32SpiChipSelect = csPin;
   3ca36:	e9cd 3200 	strd	r3, r2, [sp]
    if (am_hal_iom_blocking_transfer(cfg->iomHandle, &Transaction)) {
   3ca3a:	f001 f955 	bl	3dce8 <am_hal_iom_blocking_transfer>
        return NS_SPI_STATUS_ERROR;
    }
    return NS_SPI_STATUS_SUCCESS;
}
   3ca3e:	3800      	subs	r0, #0
   3ca40:	bf18      	it	ne
   3ca42:	2001      	movne	r0, #1
   3ca44:	b00d      	add	sp, #52	@ 0x34
   3ca46:	f85d fb04 	ldr.w	pc, [sp], #4
   3ca4a:	bf00      	nop

0003ca4c <am_hal_dcu_get>:
   3ca4c:	b510      	push	{r4, lr}
   3ca4e:	b082      	sub	sp, #8
   3ca50:	4b1d      	ldr	r3, [pc, #116]	@ (3cac8 <am_hal_dcu_get+0x7c>)
   3ca52:	9001      	str	r0, [sp, #4]
   3ca54:	689b      	ldr	r3, [r3, #8]
   3ca56:	02da      	lsls	r2, r3, #11
   3ca58:	d532      	bpl.n	3cac0 <am_hal_dcu_get+0x74>
   3ca5a:	4b1c      	ldr	r3, [pc, #112]	@ (3cacc <am_hal_dcu_get+0x80>)
   3ca5c:	f8d3 3a7c 	ldr.w	r3, [r3, #2684]	@ 0xa7c
   3ca60:	07db      	lsls	r3, r3, #31
   3ca62:	d52d      	bpl.n	3cac0 <am_hal_dcu_get+0x74>
   3ca64:	4a1a      	ldr	r2, [pc, #104]	@ (3cad0 <am_hal_dcu_get+0x84>)
   3ca66:	4b1b      	ldr	r3, [pc, #108]	@ (3cad4 <am_hal_dcu_get+0x88>)
   3ca68:	6812      	ldr	r2, [r2, #0]
   3ca6a:	4686      	mov	lr, r0
   3ca6c:	6818      	ldr	r0, [r3, #0]
   3ca6e:	6813      	ldr	r3, [r2, #0]
   3ca70:	6851      	ldr	r1, [r2, #4]
   3ca72:	f1c0 0220 	rsb	r2, r0, #32
   3ca76:	fa01 f202 	lsl.w	r2, r1, r2
   3ca7a:	40c3      	lsrs	r3, r0
   3ca7c:	4313      	orrs	r3, r2
   3ca7e:	f1a0 0220 	sub.w	r2, r0, #32
   3ca82:	fa21 f202 	lsr.w	r2, r1, r2
   3ca86:	4313      	orrs	r3, r2
   3ca88:	2200      	movs	r2, #0
   3ca8a:	40c1      	lsrs	r1, r0
   3ca8c:	4614      	mov	r4, r2
   3ca8e:	f04f 0c01 	mov.w	ip, #1
   3ca92:	f003 0007 	and.w	r0, r3, #7
   3ca96:	2805      	cmp	r0, #5
   3ca98:	bf08      	it	eq
   3ca9a:	fa0c f002 	lsleq.w	r0, ip, r2
   3ca9e:	f102 0201 	add.w	r2, r2, #1
   3caa2:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   3caa6:	bf08      	it	eq
   3caa8:	4304      	orreq	r4, r0
   3caaa:	2a14      	cmp	r2, #20
   3caac:	ea43 7341 	orr.w	r3, r3, r1, lsl #29
   3cab0:	ea4f 01d1 	mov.w	r1, r1, lsr #3
   3cab4:	d1ed      	bne.n	3ca92 <am_hal_dcu_get+0x46>
   3cab6:	2000      	movs	r0, #0
   3cab8:	f8ce 4000 	str.w	r4, [lr]
   3cabc:	b002      	add	sp, #8
   3cabe:	bd10      	pop	{r4, pc}
   3cac0:	2007      	movs	r0, #7
   3cac2:	b002      	add	sp, #8
   3cac4:	bd10      	pop	{r4, pc}
   3cac6:	bf00      	nop
   3cac8:	40021000 	.word	0x40021000
   3cacc:	400c0000 	.word	0x400c0000
   3cad0:	1000cc68 	.word	0x1000cc68
   3cad4:	100590b8 	.word	0x100590b8

0003cad8 <am_hal_dcu_update>:
   3cad8:	4b26      	ldr	r3, [pc, #152]	@ (3cb74 <am_hal_dcu_update+0x9c>)
   3cada:	689b      	ldr	r3, [r3, #8]
   3cadc:	02db      	lsls	r3, r3, #11
   3cade:	d543      	bpl.n	3cb68 <am_hal_dcu_update+0x90>
   3cae0:	4b25      	ldr	r3, [pc, #148]	@ (3cb78 <am_hal_dcu_update+0xa0>)
   3cae2:	f8d3 3a7c 	ldr.w	r3, [r3, #2684]	@ 0xa7c
   3cae6:	07da      	lsls	r2, r3, #31
   3cae8:	d53e      	bpl.n	3cb68 <am_hal_dcu_update+0x90>
   3caea:	4b24      	ldr	r3, [pc, #144]	@ (3cb7c <am_hal_dcu_update+0xa4>)
   3caec:	681b      	ldr	r3, [r3, #0]
   3caee:	b5f0      	push	{r4, r5, r6, r7, lr}
   3caf0:	2500      	movs	r5, #0
   3caf2:	0849      	lsrs	r1, r1, #1
   3caf4:	f103 073c 	add.w	r7, r3, #60	@ 0x3c
   3caf8:	462e      	mov	r6, r5
   3cafa:	2407      	movs	r4, #7
   3cafc:	f011 0f01 	tst.w	r1, #1
   3cb00:	f1a3 0220 	sub.w	r2, r3, #32
   3cb04:	ea4f 0151 	mov.w	r1, r1, lsr #1
   3cb08:	f1c3 0c20 	rsb	ip, r3, #32
   3cb0c:	d00a      	beq.n	3cb24 <am_hal_dcu_update+0x4c>
   3cb0e:	fa04 f202 	lsl.w	r2, r4, r2
   3cb12:	fa24 fc0c 	lsr.w	ip, r4, ip
   3cb16:	fa04 fe03 	lsl.w	lr, r4, r3
   3cb1a:	ea42 020c 	orr.w	r2, r2, ip
   3cb1e:	ea4e 0505 	orr.w	r5, lr, r5
   3cb22:	4316      	orrs	r6, r2
   3cb24:	3303      	adds	r3, #3
   3cb26:	429f      	cmp	r7, r3
   3cb28:	d1e8      	bne.n	3cafc <am_hal_dcu_update+0x24>
   3cb2a:	4b15      	ldr	r3, [pc, #84]	@ (3cb80 <am_hal_dcu_update+0xa8>)
   3cb2c:	681b      	ldr	r3, [r3, #0]
   3cb2e:	681a      	ldr	r2, [r3, #0]
   3cb30:	685b      	ldr	r3, [r3, #4]
   3cb32:	402a      	ands	r2, r5
   3cb34:	4033      	ands	r3, r6
   3cb36:	4313      	orrs	r3, r2
   3cb38:	d11a      	bne.n	3cb70 <am_hal_dcu_update+0x98>
   3cb3a:	4b12      	ldr	r3, [pc, #72]	@ (3cb84 <am_hal_dcu_update+0xac>)
   3cb3c:	681b      	ldr	r3, [r3, #0]
   3cb3e:	6819      	ldr	r1, [r3, #0]
   3cb40:	685a      	ldr	r2, [r3, #4]
   3cb42:	b198      	cbz	r0, 3cb6c <am_hal_dcu_update+0x94>
   3cb44:	4810      	ldr	r0, [pc, #64]	@ (3cb88 <am_hal_dcu_update+0xb0>)
   3cb46:	e9d0 4000 	ldrd	r4, r0, [r0]
   3cb4a:	404c      	eors	r4, r1
   3cb4c:	4050      	eors	r0, r2
   3cb4e:	4025      	ands	r5, r4
   3cb50:	4006      	ands	r6, r0
   3cb52:	4056      	eors	r6, r2
   3cb54:	4069      	eors	r1, r5
   3cb56:	4a08      	ldr	r2, [pc, #32]	@ (3cb78 <am_hal_dcu_update+0xa0>)
   3cb58:	6019      	str	r1, [r3, #0]
   3cb5a:	605e      	str	r6, [r3, #4]
   3cb5c:	f8d2 3a7c 	ldr.w	r3, [r2, #2684]	@ 0xa7c
   3cb60:	07db      	lsls	r3, r3, #31
   3cb62:	d5fb      	bpl.n	3cb5c <am_hal_dcu_update+0x84>
   3cb64:	2000      	movs	r0, #0
   3cb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3cb68:	2007      	movs	r0, #7
   3cb6a:	4770      	bx	lr
   3cb6c:	4807      	ldr	r0, [pc, #28]	@ (3cb8c <am_hal_dcu_update+0xb4>)
   3cb6e:	e7ea      	b.n	3cb46 <am_hal_dcu_update+0x6e>
   3cb70:	2007      	movs	r0, #7
   3cb72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3cb74:	40021000 	.word	0x40021000
   3cb78:	400c0000 	.word	0x400c0000
   3cb7c:	100590b8 	.word	0x100590b8
   3cb80:	1000cc6c 	.word	0x1000cc6c
   3cb84:	1000cc68 	.word	0x1000cc68
   3cb88:	1000cc60 	.word	0x1000cc60
   3cb8c:	1000cc58 	.word	0x1000cc58

0003cb90 <iom_dummy_callback>:
   3cb90:	4770      	bx	lr
   3cb92:	bf00      	nop

0003cb94 <internal_iom_find_pins>:
   3cb94:	b570      	push	{r4, r5, r6, lr}
   3cb96:	4b31      	ldr	r3, [pc, #196]	@ (3cc5c <internal_iom_find_pins+0xc8>)
   3cb98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3cb9c:	2a00      	cmp	r2, #0
   3cb9e:	d034      	beq.n	3cc0a <internal_iom_find_pins+0x76>
   3cba0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   3cba4:	f64f 7eff 	movw	lr, #65535	@ 0xffff
   3cba8:	8842      	ldrh	r2, [r0, #2]
   3cbaa:	0915      	lsrs	r5, r2, #4
   3cbac:	00ab      	lsls	r3, r5, #2
   3cbae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
   3cbb2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   3cbb6:	f002 0c0f 	and.w	ip, r2, #15
   3cbba:	681e      	ldr	r6, [r3, #0]
   3cbbc:	88c3      	ldrh	r3, [r0, #6]
   3cbbe:	8900      	ldrh	r0, [r0, #8]
   3cbc0:	091c      	lsrs	r4, r3, #4
   3cbc2:	f003 020f 	and.w	r2, r3, #15
   3cbc6:	00a3      	lsls	r3, r4, #2
   3cbc8:	f006 060f 	and.w	r6, r6, #15
   3cbcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
   3cbd0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   3cbd4:	4566      	cmp	r6, ip
   3cbd6:	bf18      	it	ne
   3cbd8:	4675      	movne	r5, lr
   3cbda:	600d      	str	r5, [r1, #0]
   3cbdc:	681b      	ldr	r3, [r3, #0]
   3cbde:	f003 030f 	and.w	r3, r3, #15
   3cbe2:	4293      	cmp	r3, r2
   3cbe4:	bf18      	it	ne
   3cbe6:	4674      	movne	r4, lr
   3cbe8:	0902      	lsrs	r2, r0, #4
   3cbea:	0093      	lsls	r3, r2, #2
   3cbec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
   3cbf0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   3cbf4:	604c      	str	r4, [r1, #4]
   3cbf6:	681b      	ldr	r3, [r3, #0]
   3cbf8:	f000 000f 	and.w	r0, r0, #15
   3cbfc:	f003 030f 	and.w	r3, r3, #15
   3cc00:	4283      	cmp	r3, r0
   3cc02:	bf18      	it	ne
   3cc04:	4672      	movne	r2, lr
   3cc06:	608a      	str	r2, [r1, #8]
   3cc08:	bd70      	pop	{r4, r5, r6, pc}
   3cc0a:	f833 c010 	ldrh.w	ip, [r3, r0, lsl #1]
   3cc0e:	ea4f 141c 	mov.w	r4, ip, lsr #4
   3cc12:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   3cc16:	00a3      	lsls	r3, r4, #2
   3cc18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
   3cc1c:	f64f 75ff 	movw	r5, #65535	@ 0xffff
   3cc20:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   3cc24:	608d      	str	r5, [r1, #8]
   3cc26:	681b      	ldr	r3, [r3, #0]
   3cc28:	8880      	ldrh	r0, [r0, #4]
   3cc2a:	f003 030f 	and.w	r3, r3, #15
   3cc2e:	0902      	lsrs	r2, r0, #4
   3cc30:	f00c 0c0f 	and.w	ip, ip, #15
   3cc34:	4563      	cmp	r3, ip
   3cc36:	bf18      	it	ne
   3cc38:	462c      	movne	r4, r5
   3cc3a:	0093      	lsls	r3, r2, #2
   3cc3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
   3cc40:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
   3cc44:	600c      	str	r4, [r1, #0]
   3cc46:	681b      	ldr	r3, [r3, #0]
   3cc48:	f000 000f 	and.w	r0, r0, #15
   3cc4c:	f003 030f 	and.w	r3, r3, #15
   3cc50:	4283      	cmp	r3, r0
   3cc52:	bf18      	it	ne
   3cc54:	462a      	movne	r2, r5
   3cc56:	604a      	str	r2, [r1, #4]
   3cc58:	bd70      	pop	{r4, r5, r6, pc}
   3cc5a:	bf00      	nop
   3cc5c:	00048820 	.word	0x00048820

0003cc60 <internal_iom_error_reset_disable_submodule.isra.0>:
   3cc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3cc64:	4605      	mov	r5, r0
   3cc66:	b08c      	sub	sp, #48	@ 0x30
   3cc68:	f8d0 0864 	ldr.w	r0, [r0, #2148]	@ 0x864
   3cc6c:	f8d5 8004 	ldr.w	r8, [r5, #4]
   3cc70:	2300      	movs	r3, #0
   3cc72:	e9cd 3303 	strd	r3, r3, [sp, #12]
   3cc76:	9305      	str	r3, [sp, #20]
   3cc78:	2800      	cmp	r0, #0
   3cc7a:	f000 808c 	beq.w	3cd96 <internal_iom_error_reset_disable_submodule.isra.0+0x136>
   3cc7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   3cc82:	0046      	lsls	r6, r0, #1
   3cc84:	f508 2480 	add.w	r4, r8, #262144	@ 0x40000
   3cc88:	3450      	adds	r4, #80	@ 0x50
   3cc8a:	0324      	lsls	r4, r4, #12
   3cc8c:	2301      	movs	r3, #1
   3cc8e:	f8d4 7388 	ldr.w	r7, [r4, #904]	@ 0x388
   3cc92:	485f      	ldr	r0, [pc, #380]	@ (3ce10 <internal_iom_error_reset_disable_submodule.isra.0+0x1b0>)
   3cc94:	9300      	str	r3, [sp, #0]
   3cc96:	2206      	movs	r2, #6
   3cc98:	2304      	movs	r3, #4
   3cc9a:	f504 7112 	add.w	r1, r4, #584	@ 0x248
   3cc9e:	f7f6 fc29 	bl	334f4 <am_hal_delay_us_status_check>
   3cca2:	7a2a      	ldrb	r2, [r5, #8]
   3cca4:	fab2 f282 	clz	r2, r2
   3cca8:	4640      	mov	r0, r8
   3ccaa:	a903      	add	r1, sp, #12
   3ccac:	0952      	lsrs	r2, r2, #5
   3ccae:	f7ff ff71 	bl	3cb94 <internal_iom_find_pins>
   3ccb2:	7a2b      	ldrb	r3, [r5, #8]
   3ccb4:	f8dd 800c 	ldr.w	r8, [sp, #12]
   3ccb8:	2b01      	cmp	r3, #1
   3ccba:	bf1c      	itt	ne
   3ccbc:	f64f 73ff 	movwne	r3, #65535	@ 0xffff
   3ccc0:	9305      	strne	r3, [sp, #20]
   3ccc2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
   3ccc6:	2b7e      	cmp	r3, #126	@ 0x7e
   3ccc8:	bf94      	ite	ls
   3ccca:	2301      	movls	r3, #1
   3cccc:	2300      	movhi	r3, #0
   3ccce:	f88d 301c 	strb.w	r3, [sp, #28]
   3ccd2:	f240 8093 	bls.w	3cdfc <internal_iom_error_reset_disable_submodule.isra.0+0x19c>
   3ccd6:	f8dd 8010 	ldr.w	r8, [sp, #16]
   3ccda:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
   3ccde:	2b7e      	cmp	r3, #126	@ 0x7e
   3cce0:	bf94      	ite	ls
   3cce2:	2301      	movls	r3, #1
   3cce4:	2300      	movhi	r3, #0
   3cce6:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
   3ccea:	d97d      	bls.n	3cde8 <internal_iom_error_reset_disable_submodule.isra.0+0x188>
   3ccec:	f8dd 8014 	ldr.w	r8, [sp, #20]
   3ccf0:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
   3ccf4:	2b7e      	cmp	r3, #126	@ 0x7e
   3ccf6:	bf94      	ite	ls
   3ccf8:	2301      	movls	r3, #1
   3ccfa:	2300      	movhi	r3, #0
   3ccfc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
   3cd00:	d968      	bls.n	3cdd4 <internal_iom_error_reset_disable_submodule.isra.0+0x174>
   3cd02:	7a2b      	ldrb	r3, [r5, #8]
   3cd04:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   3cd08:	3b00      	subs	r3, #0
   3cd0a:	bf18      	it	ne
   3cd0c:	2301      	movne	r3, #1
   3cd0e:	f3c2 0242 	ubfx	r2, r2, #1, #3
   3cd12:	4293      	cmp	r3, r2
   3cd14:	d005      	beq.n	3cd22 <internal_iom_error_reset_disable_submodule.isra.0+0xc2>
   3cd16:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   3cd1a:	f3c2 1242 	ubfx	r2, r2, #5, #3
   3cd1e:	4293      	cmp	r3, r2
   3cd20:	d136      	bne.n	3cd90 <internal_iom_error_reset_disable_submodule.isra.0+0x130>
   3cd22:	2300      	movs	r3, #0
   3cd24:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
   3cd28:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   3cd2c:	f36f 0341 	bfc	r3, #1, #1
   3cd30:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   3cd34:	f8d4 3388 	ldr.w	r3, [r4, #904]	@ 0x388
   3cd38:	f043 0302 	orr.w	r3, r3, #2
   3cd3c:	f8c4 3388 	str.w	r3, [r4, #904]	@ 0x388
   3cd40:	4630      	mov	r0, r6
   3cd42:	f7f6 fb93 	bl	3346c <am_hal_delay_us>
   3cd46:	f89d 301c 	ldrb.w	r3, [sp, #28]
   3cd4a:	2b00      	cmp	r3, #0
   3cd4c:	d139      	bne.n	3cdc2 <internal_iom_error_reset_disable_submodule.isra.0+0x162>
   3cd4e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
   3cd52:	bb6b      	cbnz	r3, 3cdb0 <internal_iom_error_reset_disable_submodule.isra.0+0x150>
   3cd54:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
   3cd58:	bb2b      	cbnz	r3, 3cda6 <internal_iom_error_reset_disable_submodule.isra.0+0x146>
   3cd5a:	f8c4 7388 	str.w	r7, [r4, #904]	@ 0x388
   3cd5e:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
   3cd62:	f043 0302 	orr.w	r3, r3, #2
   3cd66:	f8c4 3110 	str.w	r3, [r4, #272]	@ 0x110
   3cd6a:	7a2b      	ldrb	r3, [r5, #8]
   3cd6c:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   3cd70:	3b00      	subs	r3, #0
   3cd72:	f3c2 0242 	ubfx	r2, r2, #1, #3
   3cd76:	bf18      	it	ne
   3cd78:	2301      	movne	r3, #1
   3cd7a:	4293      	cmp	r3, r2
   3cd7c:	d00d      	beq.n	3cd9a <internal_iom_error_reset_disable_submodule.isra.0+0x13a>
   3cd7e:	f8d4 211c 	ldr.w	r2, [r4, #284]	@ 0x11c
   3cd82:	f3c2 1242 	ubfx	r2, r2, #5, #3
   3cd86:	4293      	cmp	r3, r2
   3cd88:	bf04      	itt	eq
   3cd8a:	2310      	moveq	r3, #16
   3cd8c:	f8c4 311c 	streq.w	r3, [r4, #284]	@ 0x11c
   3cd90:	b00c      	add	sp, #48	@ 0x30
   3cd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3cd96:	2606      	movs	r6, #6
   3cd98:	e774      	b.n	3cc84 <internal_iom_error_reset_disable_submodule.isra.0+0x24>
   3cd9a:	2301      	movs	r3, #1
   3cd9c:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
   3cda0:	b00c      	add	sp, #48	@ 0x30
   3cda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3cda6:	990a      	ldr	r1, [sp, #40]	@ 0x28
   3cda8:	9805      	ldr	r0, [sp, #20]
   3cdaa:	f7f5 f885 	bl	31eb8 <am_hal_gpio_pinconfig>
   3cdae:	e7d4      	b.n	3cd5a <internal_iom_error_reset_disable_submodule.isra.0+0xfa>
   3cdb0:	9908      	ldr	r1, [sp, #32]
   3cdb2:	9804      	ldr	r0, [sp, #16]
   3cdb4:	f7f5 f880 	bl	31eb8 <am_hal_gpio_pinconfig>
   3cdb8:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
   3cdbc:	2b00      	cmp	r3, #0
   3cdbe:	d0cc      	beq.n	3cd5a <internal_iom_error_reset_disable_submodule.isra.0+0xfa>
   3cdc0:	e7f1      	b.n	3cda6 <internal_iom_error_reset_disable_submodule.isra.0+0x146>
   3cdc2:	9906      	ldr	r1, [sp, #24]
   3cdc4:	9803      	ldr	r0, [sp, #12]
   3cdc6:	f7f5 f877 	bl	31eb8 <am_hal_gpio_pinconfig>
   3cdca:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
   3cdce:	2b00      	cmp	r3, #0
   3cdd0:	d0c0      	beq.n	3cd54 <internal_iom_error_reset_disable_submodule.isra.0+0xf4>
   3cdd2:	e7ed      	b.n	3cdb0 <internal_iom_error_reset_disable_submodule.isra.0+0x150>
   3cdd4:	a90a      	add	r1, sp, #40	@ 0x28
   3cdd6:	4640      	mov	r0, r8
   3cdd8:	f7f5 f85e 	bl	31e98 <am_hal_gpio_pinconfig_get>
   3cddc:	4b0d      	ldr	r3, [pc, #52]	@ (3ce14 <internal_iom_error_reset_disable_submodule.isra.0+0x1b4>)
   3cdde:	4640      	mov	r0, r8
   3cde0:	6819      	ldr	r1, [r3, #0]
   3cde2:	f7f5 f869 	bl	31eb8 <am_hal_gpio_pinconfig>
   3cde6:	e78c      	b.n	3cd02 <internal_iom_error_reset_disable_submodule.isra.0+0xa2>
   3cde8:	a908      	add	r1, sp, #32
   3cdea:	4640      	mov	r0, r8
   3cdec:	f7f5 f854 	bl	31e98 <am_hal_gpio_pinconfig_get>
   3cdf0:	4b08      	ldr	r3, [pc, #32]	@ (3ce14 <internal_iom_error_reset_disable_submodule.isra.0+0x1b4>)
   3cdf2:	4640      	mov	r0, r8
   3cdf4:	6819      	ldr	r1, [r3, #0]
   3cdf6:	f7f5 f85f 	bl	31eb8 <am_hal_gpio_pinconfig>
   3cdfa:	e777      	b.n	3ccec <internal_iom_error_reset_disable_submodule.isra.0+0x8c>
   3cdfc:	a906      	add	r1, sp, #24
   3cdfe:	4640      	mov	r0, r8
   3ce00:	f7f5 f84a 	bl	31e98 <am_hal_gpio_pinconfig_get>
   3ce04:	4b03      	ldr	r3, [pc, #12]	@ (3ce14 <internal_iom_error_reset_disable_submodule.isra.0+0x1b4>)
   3ce06:	4640      	mov	r0, r8
   3ce08:	6819      	ldr	r1, [r3, #0]
   3ce0a:	f7f5 f855 	bl	31eb8 <am_hal_gpio_pinconfig>
   3ce0e:	e762      	b.n	3ccd6 <internal_iom_error_reset_disable_submodule.isra.0+0x76>
   3ce10:	0007a120 	.word	0x0007a120
   3ce14:	000478f0 	.word	0x000478f0

0003ce18 <internal_iom_reset_on_error>:
   3ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ce1c:	6845      	ldr	r5, [r0, #4]
   3ce1e:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   3ce22:	3550      	adds	r5, #80	@ 0x50
   3ce24:	032d      	lsls	r5, r5, #12
   3ce26:	2300      	movs	r3, #0
   3ce28:	f8d5 7200 	ldr.w	r7, [r5, #512]	@ 0x200
   3ce2c:	f8c5 3200 	str.w	r3, [r5, #512]	@ 0x200
   3ce30:	050b      	lsls	r3, r1, #20
   3ce32:	b08d      	sub	sp, #52	@ 0x34
   3ce34:	4606      	mov	r6, r0
   3ce36:	460c      	mov	r4, r1
   3ce38:	d51a      	bpl.n	3ce70 <internal_iom_reset_on_error+0x58>
   3ce3a:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
   3ce3e:	0798      	lsls	r0, r3, #30
   3ce40:	d427      	bmi.n	3ce92 <internal_iom_reset_on_error+0x7a>
   3ce42:	f8d5 3248 	ldr.w	r3, [r5, #584]	@ 0x248
   3ce46:	0799      	lsls	r1, r3, #30
   3ce48:	f140 8142 	bpl.w	3d0d0 <internal_iom_reset_on_error+0x2b8>
   3ce4c:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   3ce50:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3ce54:	2b03      	cmp	r3, #3
   3ce56:	d9f4      	bls.n	3ce42 <internal_iom_reset_on_error+0x2a>
   3ce58:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
   3ce5c:	e7f6      	b.n	3ce4c <internal_iom_reset_on_error+0x34>
   3ce5e:	2301      	movs	r3, #1
   3ce60:	9300      	str	r3, [sp, #0]
   3ce62:	48c5      	ldr	r0, [pc, #788]	@ (3d178 <internal_iom_reset_on_error+0x360>)
   3ce64:	2304      	movs	r3, #4
   3ce66:	2206      	movs	r2, #6
   3ce68:	f505 7112 	add.w	r1, r5, #584	@ 0x248
   3ce6c:	f7f6 fb42 	bl	334f4 <am_hal_delay_us_status_check>
   3ce70:	f414 7f04 	tst.w	r4, #528	@ 0x210
   3ce74:	f040 8128 	bne.w	3d0c8 <internal_iom_reset_on_error+0x2b0>
   3ce78:	f8d5 3248 	ldr.w	r3, [r5, #584]	@ 0x248
   3ce7c:	079a      	lsls	r2, r3, #30
   3ce7e:	d419      	bmi.n	3ceb4 <internal_iom_reset_on_error+0x9c>
   3ce80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   3ce84:	f8c5 3208 	str.w	r3, [r5, #520]	@ 0x208
   3ce88:	f8c5 7200 	str.w	r7, [r5, #512]	@ 0x200
   3ce8c:	b00d      	add	sp, #52	@ 0x34
   3ce8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ce92:	f8d5 221c 	ldr.w	r2, [r5, #540]	@ 0x21c
   3ce96:	49b9      	ldr	r1, [pc, #740]	@ (3d17c <internal_iom_reset_on_error+0x364>)
   3ce98:	2a00      	cmp	r2, #0
   3ce9a:	d0e0      	beq.n	3ce5e <internal_iom_reset_on_error+0x46>
   3ce9c:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   3cea0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3cea4:	2b03      	cmp	r3, #3
   3cea6:	d9f9      	bls.n	3ce9c <internal_iom_reset_on_error+0x84>
   3cea8:	2a04      	cmp	r2, #4
   3ceaa:	f8c5 110c 	str.w	r1, [r5, #268]	@ 0x10c
   3ceae:	d9d6      	bls.n	3ce5e <internal_iom_reset_on_error+0x46>
   3ceb0:	3a04      	subs	r2, #4
   3ceb2:	e7f1      	b.n	3ce98 <internal_iom_reset_on_error+0x80>
   3ceb4:	6870      	ldr	r0, [r6, #4]
   3ceb6:	f8d6 2864 	ldr.w	r2, [r6, #2148]	@ 0x864
   3ceba:	f500 2480 	add.w	r4, r0, #262144	@ 0x40000
   3cebe:	3450      	adds	r4, #80	@ 0x50
   3cec0:	0324      	lsls	r4, r4, #12
   3cec2:	2300      	movs	r3, #0
   3cec4:	f8d4 912c 	ldr.w	r9, [r4, #300]	@ 0x12c
   3cec8:	9305      	str	r3, [sp, #20]
   3ceca:	e9cd 3303 	strd	r3, r3, [sp, #12]
   3cece:	f009 0a1f 	and.w	sl, r9, #31
   3ced2:	2a00      	cmp	r2, #0
   3ced4:	f040 8118 	bne.w	3d108 <internal_iom_reset_on_error+0x2f0>
   3ced8:	f04f 0806 	mov.w	r8, #6
   3cedc:	7a32      	ldrb	r2, [r6, #8]
   3cede:	fab2 f282 	clz	r2, r2
   3cee2:	a903      	add	r1, sp, #12
   3cee4:	0952      	lsrs	r2, r2, #5
   3cee6:	f7ff fe55 	bl	3cb94 <internal_iom_find_pins>
   3ceea:	7a33      	ldrb	r3, [r6, #8]
   3ceec:	f8dd b00c 	ldr.w	fp, [sp, #12]
   3cef0:	2b01      	cmp	r3, #1
   3cef2:	bf1c      	itt	ne
   3cef4:	f64f 73ff 	movwne	r3, #65535	@ 0xffff
   3cef8:	9305      	strne	r3, [sp, #20]
   3cefa:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
   3cefe:	2b7e      	cmp	r3, #126	@ 0x7e
   3cf00:	bf94      	ite	ls
   3cf02:	2301      	movls	r3, #1
   3cf04:	2300      	movhi	r3, #0
   3cf06:	f88d 301c 	strb.w	r3, [sp, #28]
   3cf0a:	f240 8102 	bls.w	3d112 <internal_iom_reset_on_error+0x2fa>
   3cf0e:	f8dd b010 	ldr.w	fp, [sp, #16]
   3cf12:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
   3cf16:	2b7e      	cmp	r3, #126	@ 0x7e
   3cf18:	bf94      	ite	ls
   3cf1a:	2301      	movls	r3, #1
   3cf1c:	2300      	movhi	r3, #0
   3cf1e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
   3cf22:	f240 812f 	bls.w	3d184 <internal_iom_reset_on_error+0x36c>
   3cf26:	f8dd b014 	ldr.w	fp, [sp, #20]
   3cf2a:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
   3cf2e:	2b7e      	cmp	r3, #126	@ 0x7e
   3cf30:	bf94      	ite	ls
   3cf32:	2301      	movls	r3, #1
   3cf34:	2300      	movhi	r3, #0
   3cf36:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
   3cf3a:	f240 80f4 	bls.w	3d126 <internal_iom_reset_on_error+0x30e>
   3cf3e:	4640      	mov	r0, r8
   3cf40:	f7f6 fa94 	bl	3346c <am_hal_delay_us>
   3cf44:	f89d 301c 	ldrb.w	r3, [sp, #28]
   3cf48:	2b00      	cmp	r3, #0
   3cf4a:	f040 80fd 	bne.w	3d148 <internal_iom_reset_on_error+0x330>
   3cf4e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
   3cf52:	2b00      	cmp	r3, #0
   3cf54:	f040 8101 	bne.w	3d15a <internal_iom_reset_on_error+0x342>
   3cf58:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
   3cf5c:	2b00      	cmp	r3, #0
   3cf5e:	f040 8105 	bne.w	3d16c <internal_iom_reset_on_error+0x354>
   3cf62:	f1ba 0f01 	cmp.w	sl, #1
   3cf66:	f000 8117 	beq.w	3d198 <internal_iom_reset_on_error+0x380>
   3cf6a:	f24c 3950 	movw	r9, #50000	@ 0xc350
   3cf6e:	f04f 0800 	mov.w	r8, #0
   3cf72:	e090      	b.n	3d096 <internal_iom_reset_on_error+0x27e>
   3cf74:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3cf78:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3cf7c:	2b03      	cmp	r3, #3
   3cf7e:	f240 8084 	bls.w	3d08a <internal_iom_reset_on_error+0x272>
   3cf82:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cf86:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3cf8a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3cf8e:	2b03      	cmp	r3, #3
   3cf90:	d97b      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3cf92:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cf96:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3cf9a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3cf9e:	2b03      	cmp	r3, #3
   3cfa0:	d973      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3cfa2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cfa6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3cfaa:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3cfae:	2b03      	cmp	r3, #3
   3cfb0:	d96b      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3cfb2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cfb6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3cfba:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3cfbe:	2b03      	cmp	r3, #3
   3cfc0:	d963      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3cfc2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cfc6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3cfca:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3cfce:	2b03      	cmp	r3, #3
   3cfd0:	d95b      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3cfd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cfd6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3cfda:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3cfde:	2b03      	cmp	r3, #3
   3cfe0:	d953      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3cfe2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cfe6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3cfea:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3cfee:	2b03      	cmp	r3, #3
   3cff0:	d94b      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3cff2:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3cff6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3cffa:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3cffe:	2b03      	cmp	r3, #3
   3d000:	d943      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3d002:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d006:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3d00a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3d00e:	2b03      	cmp	r3, #3
   3d010:	d93b      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3d012:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d016:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3d01a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3d01e:	2b03      	cmp	r3, #3
   3d020:	d933      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3d022:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d026:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3d02a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3d02e:	2b03      	cmp	r3, #3
   3d030:	d92b      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3d032:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d036:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3d03a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3d03e:	2b03      	cmp	r3, #3
   3d040:	d923      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3d042:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d046:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3d04a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3d04e:	2b03      	cmp	r3, #3
   3d050:	d91b      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3d052:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d056:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3d05a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3d05e:	2b03      	cmp	r3, #3
   3d060:	d913      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3d062:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d066:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3d06a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3d06e:	2b03      	cmp	r3, #3
   3d070:	d90b      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3d072:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d076:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3d07a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3d07e:	2b03      	cmp	r3, #3
   3d080:	d903      	bls.n	3d08a <internal_iom_reset_on_error+0x272>
   3d082:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
   3d086:	f04f 0804 	mov.w	r8, #4
   3d08a:	2001      	movs	r0, #1
   3d08c:	f7f6 f9ee 	bl	3346c <am_hal_delay_us>
   3d090:	f1b9 0901 	subs.w	r9, r9, #1
   3d094:	d004      	beq.n	3d0a0 <internal_iom_reset_on_error+0x288>
   3d096:	f8d4 3248 	ldr.w	r3, [r4, #584]	@ 0x248
   3d09a:	079b      	lsls	r3, r3, #30
   3d09c:	f53f af6a 	bmi.w	3cf74 <internal_iom_reset_on_error+0x15c>
   3d0a0:	f1b8 0f00 	cmp.w	r8, #0
   3d0a4:	f47f aeec 	bne.w	3ce80 <internal_iom_reset_on_error+0x68>
   3d0a8:	2301      	movs	r3, #1
   3d0aa:	9300      	str	r3, [sp, #0]
   3d0ac:	4832      	ldr	r0, [pc, #200]	@ (3d178 <internal_iom_reset_on_error+0x360>)
   3d0ae:	2304      	movs	r3, #4
   3d0b0:	f504 7112 	add.w	r1, r4, #584	@ 0x248
   3d0b4:	2206      	movs	r2, #6
   3d0b6:	f7f6 fa1d 	bl	334f4 <am_hal_delay_us_status_check>
   3d0ba:	2800      	cmp	r0, #0
   3d0bc:	f47f aee0 	bne.w	3ce80 <internal_iom_reset_on_error+0x68>
   3d0c0:	4630      	mov	r0, r6
   3d0c2:	f7ff fdcd 	bl	3cc60 <internal_iom_error_reset_disable_submodule.isra.0>
   3d0c6:	e6db      	b.n	3ce80 <internal_iom_reset_on_error+0x68>
   3d0c8:	4630      	mov	r0, r6
   3d0ca:	f7ff fdc9 	bl	3cc60 <internal_iom_error_reset_disable_submodule.isra.0>
   3d0ce:	e6d3      	b.n	3ce78 <internal_iom_reset_on_error+0x60>
   3d0d0:	2301      	movs	r3, #1
   3d0d2:	9300      	str	r3, [sp, #0]
   3d0d4:	4828      	ldr	r0, [pc, #160]	@ (3d178 <internal_iom_reset_on_error+0x360>)
   3d0d6:	2304      	movs	r3, #4
   3d0d8:	2206      	movs	r2, #6
   3d0da:	f505 7112 	add.w	r1, r5, #584	@ 0x248
   3d0de:	f7f6 fa09 	bl	334f4 <am_hal_delay_us_status_check>
   3d0e2:	2800      	cmp	r0, #0
   3d0e4:	f47f aec4 	bne.w	3ce70 <internal_iom_reset_on_error+0x58>
   3d0e8:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   3d0ec:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3d0f0:	2b03      	cmp	r3, #3
   3d0f2:	f67f aebd 	bls.w	3ce70 <internal_iom_reset_on_error+0x58>
   3d0f6:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
   3d0fa:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
   3d0fe:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3d102:	2b03      	cmp	r3, #3
   3d104:	d8f7      	bhi.n	3d0f6 <internal_iom_reset_on_error+0x2de>
   3d106:	e6b3      	b.n	3ce70 <internal_iom_reset_on_error+0x58>
   3d108:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3d10c:	ea4f 0842 	mov.w	r8, r2, lsl #1
   3d110:	e6e4      	b.n	3cedc <internal_iom_reset_on_error+0xc4>
   3d112:	a906      	add	r1, sp, #24
   3d114:	4658      	mov	r0, fp
   3d116:	f7f4 febf 	bl	31e98 <am_hal_gpio_pinconfig_get>
   3d11a:	4b19      	ldr	r3, [pc, #100]	@ (3d180 <internal_iom_reset_on_error+0x368>)
   3d11c:	4658      	mov	r0, fp
   3d11e:	6819      	ldr	r1, [r3, #0]
   3d120:	f7f4 feca 	bl	31eb8 <am_hal_gpio_pinconfig>
   3d124:	e6f3      	b.n	3cf0e <internal_iom_reset_on_error+0xf6>
   3d126:	a90a      	add	r1, sp, #40	@ 0x28
   3d128:	4658      	mov	r0, fp
   3d12a:	f7f4 feb5 	bl	31e98 <am_hal_gpio_pinconfig_get>
   3d12e:	4b14      	ldr	r3, [pc, #80]	@ (3d180 <internal_iom_reset_on_error+0x368>)
   3d130:	4658      	mov	r0, fp
   3d132:	6819      	ldr	r1, [r3, #0]
   3d134:	f7f4 fec0 	bl	31eb8 <am_hal_gpio_pinconfig>
   3d138:	4640      	mov	r0, r8
   3d13a:	f7f6 f997 	bl	3346c <am_hal_delay_us>
   3d13e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   3d142:	2b00      	cmp	r3, #0
   3d144:	f43f af03 	beq.w	3cf4e <internal_iom_reset_on_error+0x136>
   3d148:	9906      	ldr	r1, [sp, #24]
   3d14a:	9803      	ldr	r0, [sp, #12]
   3d14c:	f7f4 feb4 	bl	31eb8 <am_hal_gpio_pinconfig>
   3d150:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
   3d154:	2b00      	cmp	r3, #0
   3d156:	f43f aeff 	beq.w	3cf58 <internal_iom_reset_on_error+0x140>
   3d15a:	9908      	ldr	r1, [sp, #32]
   3d15c:	9804      	ldr	r0, [sp, #16]
   3d15e:	f7f4 feab 	bl	31eb8 <am_hal_gpio_pinconfig>
   3d162:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
   3d166:	2b00      	cmp	r3, #0
   3d168:	f43f aefb 	beq.w	3cf62 <internal_iom_reset_on_error+0x14a>
   3d16c:	990a      	ldr	r1, [sp, #40]	@ 0x28
   3d16e:	9805      	ldr	r0, [sp, #20]
   3d170:	f7f4 fea2 	bl	31eb8 <am_hal_gpio_pinconfig>
   3d174:	e6f5      	b.n	3cf62 <internal_iom_reset_on_error+0x14a>
   3d176:	bf00      	nop
   3d178:	0007a120 	.word	0x0007a120
   3d17c:	deadbeef 	.word	0xdeadbeef
   3d180:	000478f0 	.word	0x000478f0
   3d184:	a908      	add	r1, sp, #32
   3d186:	4658      	mov	r0, fp
   3d188:	f7f4 fe86 	bl	31e98 <am_hal_gpio_pinconfig_get>
   3d18c:	4b1e      	ldr	r3, [pc, #120]	@ (3d208 <internal_iom_reset_on_error+0x3f0>)
   3d18e:	4658      	mov	r0, fp
   3d190:	6819      	ldr	r1, [r3, #0]
   3d192:	f7f4 fe91 	bl	31eb8 <am_hal_gpio_pinconfig>
   3d196:	e6c6      	b.n	3cf26 <internal_iom_reset_on_error+0x10e>
   3d198:	f3c9 230b 	ubfx	r3, r9, #8, #12
   3d19c:	2b00      	cmp	r3, #0
   3d19e:	d083      	beq.n	3d0a8 <internal_iom_reset_on_error+0x290>
   3d1a0:	f8d6 2864 	ldr.w	r2, [r6, #2148]	@ 0x864
   3d1a4:	6876      	ldr	r6, [r6, #4]
   3d1a6:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 3d20c <internal_iom_reset_on_error+0x3f4>
   3d1aa:	461c      	mov	r4, r3
   3d1ac:	fb02 f303 	mul.w	r3, r2, r3
   3d1b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3d1b4:	ea4f 0883 	mov.w	r8, r3, lsl #2
   3d1b8:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
   3d1bc:	3650      	adds	r6, #80	@ 0x50
   3d1be:	f1b8 0f01 	cmp.w	r8, #1
   3d1c2:	bf38      	it	cc
   3d1c4:	f04f 0801 	movcc.w	r8, #1
   3d1c8:	0336      	lsls	r6, r6, #12
   3d1ca:	f04f 0a00 	mov.w	sl, #0
   3d1ce:	f8d6 3100 	ldr.w	r3, [r6, #256]	@ 0x100
   3d1d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3d1d6:	2b03      	cmp	r3, #3
   3d1d8:	d808      	bhi.n	3d1ec <internal_iom_reset_on_error+0x3d4>
   3d1da:	e00b      	b.n	3d1f4 <internal_iom_reset_on_error+0x3dc>
   3d1dc:	f8d6 3100 	ldr.w	r3, [r6, #256]	@ 0x100
   3d1e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3d1e4:	2b03      	cmp	r3, #3
   3d1e6:	f1a4 0404 	sub.w	r4, r4, #4
   3d1ea:	d903      	bls.n	3d1f4 <internal_iom_reset_on_error+0x3dc>
   3d1ec:	2c04      	cmp	r4, #4
   3d1ee:	f8c6 910c 	str.w	r9, [r6, #268]	@ 0x10c
   3d1f2:	dcf3      	bgt.n	3d1dc <internal_iom_reset_on_error+0x3c4>
   3d1f4:	f10a 0a01 	add.w	sl, sl, #1
   3d1f8:	45d0      	cmp	r8, sl
   3d1fa:	f4ff ae41 	bcc.w	3ce80 <internal_iom_reset_on_error+0x68>
   3d1fe:	2001      	movs	r0, #1
   3d200:	f7f6 f934 	bl	3346c <am_hal_delay_us>
   3d204:	e7e3      	b.n	3d1ce <internal_iom_reset_on_error+0x3b6>
   3d206:	bf00      	nop
   3d208:	000478f0 	.word	0x000478f0
   3d20c:	deadbeef 	.word	0xdeadbeef

0003d210 <am_hal_iom_CQAddTransaction>:
   3d210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d214:	4606      	mov	r6, r0
   3d216:	6a40      	ldr	r0, [r0, #36]	@ 0x24
   3d218:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
   3d21c:	b083      	sub	sp, #12
   3d21e:	f000 8093 	beq.w	3d348 <am_hal_iom_CQAddTransaction+0x138>
   3d222:	460d      	mov	r5, r1
   3d224:	4690      	mov	r8, r2
   3d226:	461f      	mov	r7, r3
   3d228:	f8d6 0828 	ldr.w	r0, [r6, #2088]	@ 0x828
   3d22c:	ab01      	add	r3, sp, #4
   3d22e:	466a      	mov	r2, sp
   3d230:	210b      	movs	r1, #11
   3d232:	f001 fcd9 	bl	3ebe8 <am_hal_cmdq_alloc_block>
   3d236:	2800      	cmp	r0, #0
   3d238:	f040 8086 	bne.w	3d348 <am_hal_iom_CQAddTransaction+0x138>
   3d23c:	e9d5 e902 	ldrd	lr, r9, [r5, #8]
   3d240:	6873      	ldr	r3, [r6, #4]
   3d242:	9c00      	ldr	r4, [sp, #0]
   3d244:	7d2a      	ldrb	r2, [r5, #20]
   3d246:	f503 2c80 	add.w	ip, r3, #262144	@ 0x40000
   3d24a:	f10c 0c50 	add.w	ip, ip, #80	@ 0x50
   3d24e:	ea4f 211e 	mov.w	r1, lr, lsr #8
   3d252:	ea4f 3c0c 	mov.w	ip, ip, lsl #12
   3d256:	ea41 6109 	orr.w	r1, r1, r9, lsl #24
   3d25a:	682b      	ldr	r3, [r5, #0]
   3d25c:	6161      	str	r1, [r4, #20]
   3d25e:	f50c 7194 	add.w	r1, ip, #296	@ 0x128
   3d262:	f8d5 9010 	ldr.w	r9, [r5, #16]
   3d266:	6121      	str	r1, [r4, #16]
   3d268:	f50c 7131 	add.w	r1, ip, #708	@ 0x2c4
   3d26c:	61a1      	str	r1, [r4, #24]
   3d26e:	f3c3 0109 	ubfx	r1, r3, #0, #10
   3d272:	61e1      	str	r1, [r4, #28]
   3d274:	f50c 7107 	add.w	r1, ip, #540	@ 0x21c
   3d278:	62a1      	str	r1, [r4, #40]	@ 0x28
   3d27a:	f50c 7a06 	add.w	sl, ip, #536	@ 0x218
   3d27e:	f50c 7108 	add.w	r1, ip, #544	@ 0x220
   3d282:	6260      	str	r0, [r4, #36]	@ 0x24
   3d284:	f8c4 902c 	str.w	r9, [r4, #44]	@ 0x2c
   3d288:	f8c4 a020 	str.w	sl, [r4, #32]
   3d28c:	6321      	str	r1, [r4, #48]	@ 0x30
   3d28e:	f895 1022 	ldrb.w	r1, [r5, #34]	@ 0x22
   3d292:	0209      	lsls	r1, r1, #8
   3d294:	f401 7180 	and.w	r1, r1, #256	@ 0x100
   3d298:	2a00      	cmp	r2, #0
   3d29a:	d15c      	bne.n	3d356 <am_hal_iom_CQAddTransaction+0x146>
   3d29c:	f8d5 b018 	ldr.w	fp, [r5, #24]
   3d2a0:	f041 0102 	orr.w	r1, r1, #2
   3d2a4:	e9c4 ba0d 	strd	fp, sl, [r4, #52]	@ 0x34
   3d2a8:	f1b9 0f00 	cmp.w	r9, #0
   3d2ac:	d001      	beq.n	3d2b2 <am_hal_iom_CQAddTransaction+0xa2>
   3d2ae:	f041 0101 	orr.w	r1, r1, #1
   3d2b2:	63e1      	str	r1, [r4, #60]	@ 0x3c
   3d2b4:	f50c 7192 	add.w	r1, ip, #292	@ 0x124
   3d2b8:	6421      	str	r1, [r4, #64]	@ 0x40
   3d2ba:	7a31      	ldrb	r1, [r6, #8]
   3d2bc:	2900      	cmp	r1, #0
   3d2be:	d147      	bne.n	3d350 <am_hal_iom_CQAddTransaction+0x140>
   3d2c0:	18f1      	adds	r1, r6, r3
   3d2c2:	051b      	lsls	r3, r3, #20
   3d2c4:	f891 18a0 	ldrb.w	r1, [r1, #2208]	@ 0x8a0
   3d2c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
   3d2cc:	6461      	str	r1, [r4, #68]	@ 0x44
   3d2ce:	4927      	ldr	r1, [pc, #156]	@ (3d36c <am_hal_iom_CQAddTransaction+0x15c>)
   3d2d0:	ea01 2909 	and.w	r9, r1, r9, lsl #8
   3d2d4:	ea49 0903 	orr.w	r9, r9, r3
   3d2d8:	686b      	ldr	r3, [r5, #4]
   3d2da:	f895 1020 	ldrb.w	r1, [r5, #32]
   3d2de:	011b      	lsls	r3, r3, #4
   3d2e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
   3d2e4:	2a01      	cmp	r2, #1
   3d2e6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   3d2ea:	bf0c      	ite	eq
   3d2ec:	f049 0202 	orreq.w	r2, r9, #2
   3d2f0:	f049 0201 	orrne.w	r2, r9, #1
   3d2f4:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
   3d2f8:	4313      	orrs	r3, r2
   3d2fa:	64e3      	str	r3, [r4, #76]	@ 0x4c
   3d2fc:	f8d6 2838 	ldr.w	r2, [r6, #2104]	@ 0x838
   3d300:	6a69      	ldr	r1, [r5, #36]	@ 0x24
   3d302:	f50c 730f 	add.w	r3, ip, #572	@ 0x23c
   3d306:	60a3      	str	r3, [r4, #8]
   3d308:	6023      	str	r3, [r4, #0]
   3d30a:	f50c 7390 	add.w	r3, ip, #288	@ 0x120
   3d30e:	64a3      	str	r3, [r4, #72]	@ 0x48
   3d310:	2a01      	cmp	r2, #1
   3d312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
   3d316:	60e3      	str	r3, [r4, #12]
   3d318:	d020      	beq.n	3d35c <am_hal_iom_CQAddTransaction+0x14c>
   3d31a:	2a02      	cmp	r2, #2
   3d31c:	d003      	beq.n	3d326 <am_hal_iom_CQAddTransaction+0x116>
   3d31e:	f441 4300 	orr.w	r3, r1, #32768	@ 0x8000
   3d322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   3d326:	f89d 1004 	ldrb.w	r1, [sp, #4]
   3d32a:	6063      	str	r3, [r4, #4]
   3d32c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   3d330:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   3d332:	6563      	str	r3, [r4, #84]	@ 0x54
   3d334:	f50c 750e 	add.w	r5, ip, #568	@ 0x238
   3d338:	6525      	str	r5, [r4, #80]	@ 0x50
   3d33a:	f8c1 8028 	str.w	r8, [r1, #40]	@ 0x28
   3d33e:	f8c1 7428 	str.w	r7, [r1, #1064]	@ 0x428
   3d342:	b003      	add	sp, #12
   3d344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d348:	2005      	movs	r0, #5
   3d34a:	b003      	add	sp, #12
   3d34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d350:	2300      	movs	r3, #0
   3d352:	4619      	mov	r1, r3
   3d354:	e7ba      	b.n	3d2cc <am_hal_iom_CQAddTransaction+0xbc>
   3d356:	f8d5 b01c 	ldr.w	fp, [r5, #28]
   3d35a:	e7a3      	b.n	3d2a4 <am_hal_iom_CQAddTransaction+0x94>
   3d35c:	f441 4300 	orr.w	r3, r1, #32768	@ 0x8000
   3d360:	2202      	movs	r2, #2
   3d362:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
   3d366:	f8c6 2838 	str.w	r2, [r6, #2104]	@ 0x838
   3d36a:	e7dc      	b.n	3d326 <am_hal_iom_CQAddTransaction+0x116>
   3d36c:	000fff00 	.word	0x000fff00

0003d370 <am_hal_iom_initialize>:
   3d370:	2807      	cmp	r0, #7
   3d372:	d81a      	bhi.n	3d3aa <am_hal_iom_initialize+0x3a>
   3d374:	b1e9      	cbz	r1, 3d3b2 <am_hal_iom_initialize+0x42>
   3d376:	b530      	push	{r4, r5, lr}
   3d378:	f640 0ca8 	movw	ip, #2216	@ 0x8a8
   3d37c:	4d0e      	ldr	r5, [pc, #56]	@ (3d3b8 <am_hal_iom_initialize+0x48>)
   3d37e:	fb0c fc00 	mul.w	ip, ip, r0
   3d382:	eb05 040c 	add.w	r4, r5, ip
   3d386:	4602      	mov	r2, r0
   3d388:	78e3      	ldrb	r3, [r4, #3]
   3d38a:	f013 0301 	ands.w	r3, r3, #1
   3d38e:	d10e      	bne.n	3d3ae <am_hal_iom_initialize+0x3e>
   3d390:	4618      	mov	r0, r3
   3d392:	f855 300c 	ldr.w	r3, [r5, ip]
   3d396:	f003 4e7c 	and.w	lr, r3, #4227858432	@ 0xfc000000
   3d39a:	4b08      	ldr	r3, [pc, #32]	@ (3d3bc <am_hal_iom_initialize+0x4c>)
   3d39c:	ea4e 0303 	orr.w	r3, lr, r3
   3d3a0:	f845 300c 	str.w	r3, [r5, ip]
   3d3a4:	6062      	str	r2, [r4, #4]
   3d3a6:	600c      	str	r4, [r1, #0]
   3d3a8:	bd30      	pop	{r4, r5, pc}
   3d3aa:	2005      	movs	r0, #5
   3d3ac:	4770      	bx	lr
   3d3ae:	2007      	movs	r0, #7
   3d3b0:	bd30      	pop	{r4, r5, pc}
   3d3b2:	2006      	movs	r0, #6
   3d3b4:	4770      	bx	lr
   3d3b6:	bf00      	nop
   3d3b8:	100590bc 	.word	0x100590bc
   3d3bc:	01123456 	.word	0x01123456

0003d3c0 <am_hal_iom_enable>:
   3d3c0:	2800      	cmp	r0, #0
   3d3c2:	d06b      	beq.n	3d49c <am_hal_iom_enable+0xdc>
   3d3c4:	b530      	push	{r4, r5, lr}
   3d3c6:	6803      	ldr	r3, [r0, #0]
   3d3c8:	4a37      	ldr	r2, [pc, #220]	@ (3d4a8 <am_hal_iom_enable+0xe8>)
   3d3ca:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3d3ce:	4293      	cmp	r3, r2
   3d3d0:	b085      	sub	sp, #20
   3d3d2:	4604      	mov	r4, r0
   3d3d4:	d155      	bne.n	3d482 <am_hal_iom_enable+0xc2>
   3d3d6:	78c3      	ldrb	r3, [r0, #3]
   3d3d8:	079b      	lsls	r3, r3, #30
   3d3da:	d455      	bmi.n	3d488 <am_hal_iom_enable+0xc8>
   3d3dc:	6840      	ldr	r0, [r0, #4]
   3d3de:	7a23      	ldrb	r3, [r4, #8]
   3d3e0:	f500 2280 	add.w	r2, r0, #262144	@ 0x40000
   3d3e4:	3250      	adds	r2, #80	@ 0x50
   3d3e6:	0311      	lsls	r1, r2, #12
   3d3e8:	3b00      	subs	r3, #0
   3d3ea:	f8d1 211c 	ldr.w	r2, [r1, #284]	@ 0x11c
   3d3ee:	bf18      	it	ne
   3d3f0:	2301      	movne	r3, #1
   3d3f2:	f3c2 0242 	ubfx	r2, r2, #1, #3
   3d3f6:	4293      	cmp	r3, r2
   3d3f8:	d04c      	beq.n	3d494 <am_hal_iom_enable+0xd4>
   3d3fa:	f8d1 211c 	ldr.w	r2, [r1, #284]	@ 0x11c
   3d3fe:	f3c2 1242 	ubfx	r2, r2, #5, #3
   3d402:	4293      	cmp	r3, r2
   3d404:	d143      	bne.n	3d48e <am_hal_iom_enable+0xce>
   3d406:	2310      	movs	r3, #16
   3d408:	f8c1 311c 	str.w	r3, [r1, #284]	@ 0x11c
   3d40c:	68e3      	ldr	r3, [r4, #12]
   3d40e:	b38b      	cbz	r3, 3d474 <am_hal_iom_enable+0xb4>
   3d410:	4a26      	ldr	r2, [pc, #152]	@ (3d4ac <am_hal_iom_enable+0xec>)
   3d412:	9302      	str	r3, [sp, #8]
   3d414:	2300      	movs	r3, #0
   3d416:	6263      	str	r3, [r4, #36]	@ 0x24
   3d418:	61e3      	str	r3, [r4, #28]
   3d41a:	f8c1 2238 	str.w	r2, [r1, #568]	@ 0x238
   3d41e:	6922      	ldr	r2, [r4, #16]
   3d420:	f8c4 3854 	str.w	r3, [r4, #2132]	@ 0x854
   3d424:	0852      	lsrs	r2, r2, #1
   3d426:	f44f 7580 	mov.w	r5, #256	@ 0x100
   3d42a:	f884 383c 	strb.w	r3, [r4, #2108]	@ 0x83c
   3d42e:	f8c4 3838 	str.w	r3, [r4, #2104]	@ 0x838
   3d432:	f8c4 3844 	str.w	r3, [r4, #2116]	@ 0x844
   3d436:	f8c4 3840 	str.w	r3, [r4, #2112]	@ 0x840
   3d43a:	f8c4 3830 	str.w	r3, [r4, #2096]	@ 0x830
   3d43e:	f8c4 3828 	str.w	r3, [r4, #2088]	@ 0x828
   3d442:	6223      	str	r3, [r4, #32]
   3d444:	f8c4 385c 	str.w	r3, [r4, #2140]	@ 0x85c
   3d448:	9201      	str	r2, [sp, #4]
   3d44a:	2301      	movs	r3, #1
   3d44c:	f604 0228 	addw	r2, r4, #2088	@ 0x828
   3d450:	b2c0      	uxtb	r0, r0
   3d452:	f8a4 582c 	strh.w	r5, [r4, #2092]	@ 0x82c
   3d456:	a901      	add	r1, sp, #4
   3d458:	f88d 300c 	strb.w	r3, [sp, #12]
   3d45c:	f001 fb24 	bl	3eaa8 <am_hal_cmdq_init>
   3d460:	6863      	ldr	r3, [r4, #4]
   3d462:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3d466:	3350      	adds	r3, #80	@ 0x50
   3d468:	2202      	movs	r2, #2
   3d46a:	031b      	lsls	r3, r3, #12
   3d46c:	b9c0      	cbnz	r0, 3d4a0 <am_hal_iom_enable+0xe0>
   3d46e:	6225      	str	r5, [r4, #32]
   3d470:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
   3d474:	78e3      	ldrb	r3, [r4, #3]
   3d476:	2000      	movs	r0, #0
   3d478:	f043 0302 	orr.w	r3, r3, #2
   3d47c:	70e3      	strb	r3, [r4, #3]
   3d47e:	b005      	add	sp, #20
   3d480:	bd30      	pop	{r4, r5, pc}
   3d482:	2002      	movs	r0, #2
   3d484:	b005      	add	sp, #20
   3d486:	bd30      	pop	{r4, r5, pc}
   3d488:	2000      	movs	r0, #0
   3d48a:	b005      	add	sp, #20
   3d48c:	bd30      	pop	{r4, r5, pc}
   3d48e:	2009      	movs	r0, #9
   3d490:	b005      	add	sp, #20
   3d492:	bd30      	pop	{r4, r5, pc}
   3d494:	2301      	movs	r3, #1
   3d496:	f8c1 311c 	str.w	r3, [r1, #284]	@ 0x11c
   3d49a:	e7b7      	b.n	3d40c <am_hal_iom_enable+0x4c>
   3d49c:	2002      	movs	r0, #2
   3d49e:	4770      	bx	lr
   3d4a0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
   3d4a4:	e7ee      	b.n	3d484 <am_hal_iom_enable+0xc4>
   3d4a6:	bf00      	nop
   3d4a8:	01123456 	.word	0x01123456
   3d4ac:	00800040 	.word	0x00800040

0003d4b0 <am_hal_iom_interrupt_status_get>:
   3d4b0:	b1e0      	cbz	r0, 3d4ec <am_hal_iom_interrupt_status_get+0x3c>
   3d4b2:	6803      	ldr	r3, [r0, #0]
   3d4b4:	b410      	push	{r4}
   3d4b6:	4c0f      	ldr	r4, [pc, #60]	@ (3d4f4 <am_hal_iom_interrupt_status_get+0x44>)
   3d4b8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3d4bc:	42a3      	cmp	r3, r4
   3d4be:	d111      	bne.n	3d4e4 <am_hal_iom_interrupt_status_get+0x34>
   3d4c0:	b1b2      	cbz	r2, 3d4f0 <am_hal_iom_interrupt_status_get+0x40>
   3d4c2:	6843      	ldr	r3, [r0, #4]
   3d4c4:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3d4c8:	3350      	adds	r3, #80	@ 0x50
   3d4ca:	031b      	lsls	r3, r3, #12
   3d4cc:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
   3d4d0:	b921      	cbnz	r1, 3d4dc <am_hal_iom_interrupt_status_get+0x2c>
   3d4d2:	6010      	str	r0, [r2, #0]
   3d4d4:	2000      	movs	r0, #0
   3d4d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   3d4da:	4770      	bx	lr
   3d4dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
   3d4e0:	4018      	ands	r0, r3
   3d4e2:	e7f6      	b.n	3d4d2 <am_hal_iom_interrupt_status_get+0x22>
   3d4e4:	2002      	movs	r0, #2
   3d4e6:	f85d 4b04 	ldr.w	r4, [sp], #4
   3d4ea:	4770      	bx	lr
   3d4ec:	2002      	movs	r0, #2
   3d4ee:	4770      	bx	lr
   3d4f0:	2006      	movs	r0, #6
   3d4f2:	e7f0      	b.n	3d4d6 <am_hal_iom_interrupt_status_get+0x26>
   3d4f4:	01123456 	.word	0x01123456

0003d4f8 <am_hal_iom_interrupt_clear>:
   3d4f8:	b170      	cbz	r0, 3d518 <am_hal_iom_interrupt_clear+0x20>
   3d4fa:	6803      	ldr	r3, [r0, #0]
   3d4fc:	4a07      	ldr	r2, [pc, #28]	@ (3d51c <am_hal_iom_interrupt_clear+0x24>)
   3d4fe:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3d502:	4293      	cmp	r3, r2
   3d504:	d108      	bne.n	3d518 <am_hal_iom_interrupt_clear+0x20>
   3d506:	6843      	ldr	r3, [r0, #4]
   3d508:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3d50c:	3350      	adds	r3, #80	@ 0x50
   3d50e:	031b      	lsls	r3, r3, #12
   3d510:	2000      	movs	r0, #0
   3d512:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
   3d516:	4770      	bx	lr
   3d518:	2002      	movs	r0, #2
   3d51a:	4770      	bx	lr
   3d51c:	01123456 	.word	0x01123456

0003d520 <am_hal_iom_interrupt_service>:
   3d520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3d524:	b085      	sub	sp, #20
   3d526:	2800      	cmp	r0, #0
   3d528:	f000 80cb 	beq.w	3d6c2 <am_hal_iom_interrupt_service+0x1a2>
   3d52c:	6803      	ldr	r3, [r0, #0]
   3d52e:	4abd      	ldr	r2, [pc, #756]	@ (3d824 <am_hal_iom_interrupt_service+0x304>)
   3d530:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3d534:	4293      	cmp	r3, r2
   3d536:	4604      	mov	r4, r0
   3d538:	f040 80c3 	bne.w	3d6c2 <am_hal_iom_interrupt_service+0x1a2>
   3d53c:	f890 383c 	ldrb.w	r3, [r0, #2108]	@ 0x83c
   3d540:	6847      	ldr	r7, [r0, #4]
   3d542:	460e      	mov	r6, r1
   3d544:	2b00      	cmp	r3, #0
   3d546:	f040 80a4 	bne.w	3d692 <am_hal_iom_interrupt_service+0x172>
   3d54a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   3d54c:	2b00      	cmp	r3, #0
   3d54e:	f000 80b3 	beq.w	3d6b8 <am_hal_iom_interrupt_service+0x198>
   3d552:	f8d0 0828 	ldr.w	r0, [r0, #2088]	@ 0x828
   3d556:	2800      	cmp	r0, #0
   3d558:	f000 808a 	beq.w	3d670 <am_hal_iom_interrupt_service+0x150>
   3d55c:	4669      	mov	r1, sp
   3d55e:	f001 fbf9 	bl	3ed54 <am_hal_cmdq_get_status>
   3d562:	4605      	mov	r5, r0
   3d564:	2800      	cmp	r0, #0
   3d566:	f040 8084 	bne.w	3d672 <am_hal_iom_interrupt_service+0x152>
   3d56a:	f884 0834 	strb.w	r0, [r4, #2100]	@ 0x834
   3d56e:	9900      	ldr	r1, [sp, #0]
   3d570:	69e3      	ldr	r3, [r4, #28]
   3d572:	e011      	b.n	3d598 <am_hal_iom_interrupt_service+0x78>
   3d574:	f894 2834 	ldrb.w	r2, [r4, #2100]	@ 0x834
   3d578:	f002 09ff 	and.w	r9, r2, #255	@ 0xff
   3d57c:	b972      	cbnz	r2, 3d59c <am_hal_iom_interrupt_service+0x7c>
   3d57e:	3301      	adds	r3, #1
   3d580:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   3d582:	61e3      	str	r3, [r4, #28]
   3d584:	b2dd      	uxtb	r5, r3
   3d586:	f105 080a 	add.w	r8, r5, #10
   3d58a:	3a01      	subs	r2, #1
   3d58c:	6262      	str	r2, [r4, #36]	@ 0x24
   3d58e:	f854 2028 	ldr.w	r2, [r4, r8, lsl #2]
   3d592:	2a00      	cmp	r2, #0
   3d594:	f040 811e 	bne.w	3d7d4 <am_hal_iom_interrupt_service+0x2b4>
   3d598:	4299      	cmp	r1, r3
   3d59a:	d1eb      	bne.n	3d574 <am_hal_iom_interrupt_service+0x54>
   3d59c:	f894 2834 	ldrb.w	r2, [r4, #2100]	@ 0x834
   3d5a0:	f002 01ff 	and.w	r1, r2, #255	@ 0xff
   3d5a4:	2a00      	cmp	r2, #0
   3d5a6:	d15f      	bne.n	3d668 <am_hal_iom_interrupt_service+0x148>
   3d5a8:	f644 227c 	movw	r2, #19068	@ 0x4a7c
   3d5ac:	ea16 0902 	ands.w	r9, r6, r2
   3d5b0:	d05a      	beq.n	3d668 <am_hal_iom_interrupt_service+0x148>
   3d5b2:	3301      	adds	r3, #1
   3d5b4:	61e3      	str	r3, [r4, #28]
   3d5b6:	b2db      	uxtb	r3, r3
   3d5b8:	eb04 0583 	add.w	r5, r4, r3, lsl #2
   3d5bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   3d5be:	3b01      	subs	r3, #1
   3d5c0:	6263      	str	r3, [r4, #36]	@ 0x24
   3d5c2:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   3d5c4:	2b00      	cmp	r3, #0
   3d5c6:	f000 811c 	beq.w	3d802 <am_hal_iom_interrupt_service+0x2e2>
   3d5ca:	f507 2880 	add.w	r8, r7, #262144	@ 0x40000
   3d5ce:	f108 0850 	add.w	r8, r8, #80	@ 0x50
   3d5d2:	ea4f 3808 	mov.w	r8, r8, lsl #12
   3d5d6:	4608      	mov	r0, r1
   3d5d8:	f7f4 fa76 	bl	31ac8 <am_hal_daxi_control>
   3d5dc:	f8d8 2204 	ldr.w	r2, [r8, #516]	@ 0x204
   3d5e0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   3d5e2:	f8d5 0428 	ldr.w	r0, [r5, #1064]	@ 0x428
   3d5e6:	4316      	orrs	r6, r2
   3d5e8:	f016 0f6c 	tst.w	r6, #108	@ 0x6c
   3d5ec:	f040 8112 	bne.w	3d814 <am_hal_iom_interrupt_service+0x2f4>
   3d5f0:	05b2      	lsls	r2, r6, #22
   3d5f2:	f100 8112 	bmi.w	3d81a <am_hal_iom_interrupt_service+0x2fa>
   3d5f6:	06f2      	lsls	r2, r6, #27
   3d5f8:	f100 8111 	bmi.w	3d81e <am_hal_iom_interrupt_service+0x2fe>
   3d5fc:	f416 4f90 	tst.w	r6, #18432	@ 0x4800
   3d600:	bf14      	ite	ne
   3d602:	2101      	movne	r1, #1
   3d604:	2100      	moveq	r1, #0
   3d606:	4798      	blx	r3
   3d608:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
   3d60c:	2b02      	cmp	r3, #2
   3d60e:	bf1c      	itt	ne
   3d610:	2300      	movne	r3, #0
   3d612:	62ab      	strne	r3, [r5, #40]	@ 0x28
   3d614:	f8d8 3228 	ldr.w	r3, [r8, #552]	@ 0x228
   3d618:	f36f 0300 	bfc	r3, #0, #1
   3d61c:	f8c8 3228 	str.w	r3, [r8, #552]	@ 0x228
   3d620:	f8d8 3218 	ldr.w	r3, [r8, #536]	@ 0x218
   3d624:	f36f 0300 	bfc	r3, #0, #1
   3d628:	f8c8 3218 	str.w	r3, [r8, #536]	@ 0x218
   3d62c:	2300      	movs	r3, #0
   3d62e:	f8c8 3224 	str.w	r3, [r8, #548]	@ 0x224
   3d632:	4649      	mov	r1, r9
   3d634:	4620      	mov	r0, r4
   3d636:	f7ff fbef 	bl	3ce18 <internal_iom_reset_on_error>
   3d63a:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   3d63e:	f001 fbdb 	bl	3edf8 <am_hal_cmdq_error_resume>
   3d642:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   3d644:	b183      	cbz	r3, 3d668 <am_hal_iom_interrupt_service+0x148>
   3d646:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   3d648:	b953      	cbnz	r3, 3d660 <am_hal_iom_interrupt_service+0x140>
   3d64a:	6863      	ldr	r3, [r4, #4]
   3d64c:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3d650:	3350      	adds	r3, #80	@ 0x50
   3d652:	031b      	lsls	r3, r3, #12
   3d654:	f503 720b 	add.w	r2, r3, #556	@ 0x22c
   3d658:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
   3d65c:	e9c3 2300 	strd	r2, r3, [r3]
   3d660:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   3d664:	f001 fa78 	bl	3eb58 <am_hal_cmdq_enable>
   3d668:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   3d66a:	2d00      	cmp	r5, #0
   3d66c:	f000 80ad 	beq.w	3d7ca <am_hal_iom_interrupt_service+0x2aa>
   3d670:	2500      	movs	r5, #0
   3d672:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   3d674:	bb0b      	cbnz	r3, 3d6ba <am_hal_iom_interrupt_service+0x19a>
   3d676:	f507 2780 	add.w	r7, r7, #262144	@ 0x40000
   3d67a:	3750      	adds	r7, #80	@ 0x50
   3d67c:	033f      	lsls	r7, r7, #12
   3d67e:	6962      	ldr	r2, [r4, #20]
   3d680:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
   3d684:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   3d688:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
   3d68c:	f8c7 2200 	str.w	r2, [r7, #512]	@ 0x200
   3d690:	e013      	b.n	3d6ba <am_hal_iom_interrupt_service+0x19a>
   3d692:	6981      	ldr	r1, [r0, #24]
   3d694:	f640 0301 	movw	r3, #2049	@ 0x801
   3d698:	430e      	orrs	r6, r1
   3d69a:	421e      	tst	r6, r3
   3d69c:	6186      	str	r6, [r0, #24]
   3d69e:	d00b      	beq.n	3d6b8 <am_hal_iom_interrupt_service+0x198>
   3d6a0:	f507 2780 	add.w	r7, r7, #262144	@ 0x40000
   3d6a4:	3750      	adds	r7, #80	@ 0x50
   3d6a6:	033f      	lsls	r7, r7, #12
   3d6a8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
   3d6ac:	07db      	lsls	r3, r3, #31
   3d6ae:	d50d      	bpl.n	3d6cc <am_hal_iom_interrupt_service+0x1ac>
   3d6b0:	f644 637c 	movw	r3, #20092	@ 0x4e7c
   3d6b4:	421e      	tst	r6, r3
   3d6b6:	d109      	bne.n	3d6cc <am_hal_iom_interrupt_service+0x1ac>
   3d6b8:	2500      	movs	r5, #0
   3d6ba:	4628      	mov	r0, r5
   3d6bc:	b005      	add	sp, #20
   3d6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3d6c2:	2502      	movs	r5, #2
   3d6c4:	4628      	mov	r0, r5
   3d6c6:	b005      	add	sp, #20
   3d6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3d6cc:	f8d4 2840 	ldr.w	r2, [r4, #2112]	@ 0x840
   3d6d0:	f8d4 3850 	ldr.w	r3, [r4, #2128]	@ 0x850
   3d6d4:	f8d4 5854 	ldr.w	r5, [r4, #2132]	@ 0x854
   3d6d8:	3a01      	subs	r2, #1
   3d6da:	f8c4 2840 	str.w	r2, [r4, #2112]	@ 0x840
   3d6de:	f8d4 2848 	ldr.w	r2, [r4, #2120]	@ 0x848
   3d6e2:	3301      	adds	r3, #1
   3d6e4:	f8c4 3850 	str.w	r3, [r4, #2128]	@ 0x850
   3d6e8:	fbb3 f1f2 	udiv	r1, r3, r2
   3d6ec:	fb02 3311 	mls	r3, r2, r1, r3
   3d6f0:	eb05 1543 	add.w	r5, r5, r3, lsl #5
   3d6f4:	69ab      	ldr	r3, [r5, #24]
   3d6f6:	b1cb      	cbz	r3, 3d72c <am_hal_iom_interrupt_service+0x20c>
   3d6f8:	2100      	movs	r1, #0
   3d6fa:	4608      	mov	r0, r1
   3d6fc:	f7f4 f9e4 	bl	31ac8 <am_hal_daxi_control>
   3d700:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
   3d704:	69a1      	ldr	r1, [r4, #24]
   3d706:	430b      	orrs	r3, r1
   3d708:	f013 0f6c 	tst.w	r3, #108	@ 0x6c
   3d70c:	e9d5 2006 	ldrd	r2, r0, [r5, #24]
   3d710:	d172      	bne.n	3d7f8 <am_hal_iom_interrupt_service+0x2d8>
   3d712:	059e      	lsls	r6, r3, #22
   3d714:	d473      	bmi.n	3d7fe <am_hal_iom_interrupt_service+0x2de>
   3d716:	06de      	lsls	r6, r3, #27
   3d718:	d47a      	bmi.n	3d810 <am_hal_iom_interrupt_service+0x2f0>
   3d71a:	f413 4f90 	tst.w	r3, #18432	@ 0x4800
   3d71e:	bf14      	ite	ne
   3d720:	2101      	movne	r1, #1
   3d722:	2100      	moveq	r1, #0
   3d724:	4790      	blx	r2
   3d726:	2300      	movs	r3, #0
   3d728:	69a6      	ldr	r6, [r4, #24]
   3d72a:	61ab      	str	r3, [r5, #24]
   3d72c:	f644 217c 	movw	r1, #19068	@ 0x4a7c
   3d730:	4031      	ands	r1, r6
   3d732:	d111      	bne.n	3d758 <am_hal_iom_interrupt_service+0x238>
   3d734:	f8d4 5840 	ldr.w	r5, [r4, #2112]	@ 0x840
   3d738:	b9dd      	cbnz	r5, 3d772 <am_hal_iom_interrupt_service+0x252>
   3d73a:	f884 583c 	strb.w	r5, [r4, #2108]	@ 0x83c
   3d73e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
   3d742:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
   3d746:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
   3d74a:	f023 0301 	bic.w	r3, r3, #1
   3d74e:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
   3d752:	f8c7 2238 	str.w	r2, [r7, #568]	@ 0x238
   3d756:	e7b0      	b.n	3d6ba <am_hal_iom_interrupt_service+0x19a>
   3d758:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
   3d75c:	2200      	movs	r2, #0
   3d75e:	f36f 0300 	bfc	r3, #0, #1
   3d762:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
   3d766:	4620      	mov	r0, r4
   3d768:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
   3d76c:	f7ff fb54 	bl	3ce18 <internal_iom_reset_on_error>
   3d770:	e7e0      	b.n	3d734 <am_hal_iom_interrupt_service+0x214>
   3d772:	f8d4 2850 	ldr.w	r2, [r4, #2128]	@ 0x850
   3d776:	f8d4 3848 	ldr.w	r3, [r4, #2120]	@ 0x848
   3d77a:	3201      	adds	r2, #1
   3d77c:	fbb2 f1f3 	udiv	r1, r2, r3
   3d780:	fb03 2211 	mls	r2, r3, r1, r2
   3d784:	0151      	lsls	r1, r2, #5
   3d786:	f8d4 3854 	ldr.w	r3, [r4, #2132]	@ 0x854
   3d78a:	5858      	ldr	r0, [r3, r1]
   3d78c:	eb03 1242 	add.w	r2, r3, r2, lsl #5
   3d790:	6863      	ldr	r3, [r4, #4]
   3d792:	6851      	ldr	r1, [r2, #4]
   3d794:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3d798:	3350      	adds	r3, #80	@ 0x50
   3d79a:	031b      	lsls	r3, r3, #12
   3d79c:	2500      	movs	r5, #0
   3d79e:	f8c7 5224 	str.w	r5, [r7, #548]	@ 0x224
   3d7a2:	61a5      	str	r5, [r4, #24]
   3d7a4:	f8c3 0128 	str.w	r0, [r3, #296]	@ 0x128
   3d7a8:	f8c3 12c4 	str.w	r1, [r3, #708]	@ 0x2c4
   3d7ac:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   3d7b0:	f8c3 5218 	str.w	r5, [r3, #536]	@ 0x218
   3d7b4:	f8c3 021c 	str.w	r0, [r3, #540]	@ 0x21c
   3d7b8:	f8c3 1220 	str.w	r1, [r3, #544]	@ 0x220
   3d7bc:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
   3d7c0:	f8c3 1218 	str.w	r1, [r3, #536]	@ 0x218
   3d7c4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
   3d7c8:	e777      	b.n	3d6ba <am_hal_iom_interrupt_service+0x19a>
   3d7ca:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   3d7ce:	f001 f9ef 	bl	3ebb0 <am_hal_cmdq_disable>
   3d7d2:	e74e      	b.n	3d672 <am_hal_iom_interrupt_service+0x152>
   3d7d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   3d7d8:	4649      	mov	r1, r9
   3d7da:	4648      	mov	r0, r9
   3d7dc:	f7f4 f974 	bl	31ac8 <am_hal_daxi_control>
   3d7e0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
   3d7e2:	f8d5 0428 	ldr.w	r0, [r5, #1064]	@ 0x428
   3d7e6:	4649      	mov	r1, r9
   3d7e8:	4798      	blx	r3
   3d7ea:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
   3d7ee:	2b02      	cmp	r3, #2
   3d7f0:	bf18      	it	ne
   3d7f2:	f844 9028 	strne.w	r9, [r4, r8, lsl #2]
   3d7f6:	e6ba      	b.n	3d56e <am_hal_iom_interrupt_service+0x4e>
   3d7f8:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
   3d7fc:	e792      	b.n	3d724 <am_hal_iom_interrupt_service+0x204>
   3d7fe:	490a      	ldr	r1, [pc, #40]	@ (3d828 <am_hal_iom_interrupt_service+0x308>)
   3d800:	e790      	b.n	3d724 <am_hal_iom_interrupt_service+0x204>
   3d802:	f507 2880 	add.w	r8, r7, #262144	@ 0x40000
   3d806:	f108 0850 	add.w	r8, r8, #80	@ 0x50
   3d80a:	ea4f 3808 	mov.w	r8, r8, lsl #12
   3d80e:	e701      	b.n	3d614 <am_hal_iom_interrupt_service+0xf4>
   3d810:	4906      	ldr	r1, [pc, #24]	@ (3d82c <am_hal_iom_interrupt_service+0x30c>)
   3d812:	e787      	b.n	3d724 <am_hal_iom_interrupt_service+0x204>
   3d814:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
   3d818:	e6f5      	b.n	3d606 <am_hal_iom_interrupt_service+0xe6>
   3d81a:	4903      	ldr	r1, [pc, #12]	@ (3d828 <am_hal_iom_interrupt_service+0x308>)
   3d81c:	e6f3      	b.n	3d606 <am_hal_iom_interrupt_service+0xe6>
   3d81e:	4903      	ldr	r1, [pc, #12]	@ (3d82c <am_hal_iom_interrupt_service+0x30c>)
   3d820:	e6f1      	b.n	3d606 <am_hal_iom_interrupt_service+0xe6>
   3d822:	bf00      	nop
   3d824:	01123456 	.word	0x01123456
   3d828:	08000001 	.word	0x08000001
   3d82c:	08000002 	.word	0x08000002

0003d830 <am_hal_iom_power_ctrl>:
   3d830:	2800      	cmp	r0, #0
   3d832:	f000 80c5 	beq.w	3d9c0 <am_hal_iom_power_ctrl+0x190>
   3d836:	b530      	push	{r4, r5, lr}
   3d838:	6803      	ldr	r3, [r0, #0]
   3d83a:	4604      	mov	r4, r0
   3d83c:	4873      	ldr	r0, [pc, #460]	@ (3da0c <am_hal_iom_power_ctrl+0x1dc>)
   3d83e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3d842:	4283      	cmp	r3, r0
   3d844:	b083      	sub	sp, #12
   3d846:	d169      	bne.n	3d91c <am_hal_iom_power_ctrl+0xec>
   3d848:	2900      	cmp	r1, #0
   3d84a:	d06d      	beq.n	3d928 <am_hal_iom_power_ctrl+0xf8>
   3d84c:	3901      	subs	r1, #1
   3d84e:	2901      	cmp	r1, #1
   3d850:	d867      	bhi.n	3d922 <am_hal_iom_power_ctrl+0xf2>
   3d852:	78e3      	ldrb	r3, [r4, #3]
   3d854:	6860      	ldr	r0, [r4, #4]
   3d856:	f013 0f02 	tst.w	r3, #2
   3d85a:	f500 2380 	add.w	r3, r0, #262144	@ 0x40000
   3d85e:	f103 0350 	add.w	r3, r3, #80	@ 0x50
   3d862:	ea4f 3303 	mov.w	r3, r3, lsl #12
   3d866:	d00a      	beq.n	3d87e <am_hal_iom_power_ctrl+0x4e>
   3d868:	f8d3 1248 	ldr.w	r1, [r3, #584]	@ 0x248
   3d86c:	f001 0106 	and.w	r1, r1, #6
   3d870:	2904      	cmp	r1, #4
   3d872:	f040 80ba 	bne.w	3d9ea <am_hal_iom_power_ctrl+0x1ba>
   3d876:	6a61      	ldr	r1, [r4, #36]	@ 0x24
   3d878:	2900      	cmp	r1, #0
   3d87a:	f040 80b6 	bne.w	3d9ea <am_hal_iom_power_ctrl+0x1ba>
   3d87e:	b3d2      	cbz	r2, 3d8f6 <am_hal_iom_power_ctrl+0xc6>
   3d880:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
   3d884:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
   3d888:	f8c4 2874 	str.w	r2, [r4, #2164]	@ 0x874
   3d88c:	f8c4 186c 	str.w	r1, [r4, #2156]	@ 0x86c
   3d890:	f8d3 111c 	ldr.w	r1, [r3, #284]	@ 0x11c
   3d894:	f8d3 2228 	ldr.w	r2, [r3, #552]	@ 0x228
   3d898:	f8c4 287c 	str.w	r2, [r4, #2172]	@ 0x87c
   3d89c:	f8c4 1878 	str.w	r1, [r4, #2168]	@ 0x878
   3d8a0:	f8d3 122c 	ldr.w	r1, [r3, #556]	@ 0x22c
   3d8a4:	f8d3 2234 	ldr.w	r2, [r3, #564]	@ 0x234
   3d8a8:	f8c4 2884 	str.w	r2, [r4, #2180]	@ 0x884
   3d8ac:	f8c4 1880 	str.w	r1, [r4, #2176]	@ 0x880
   3d8b0:	f8d3 123c 	ldr.w	r1, [r3, #572]	@ 0x23c
   3d8b4:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
   3d8b8:	f8c4 288c 	str.w	r2, [r4, #2188]	@ 0x88c
   3d8bc:	f8c4 1888 	str.w	r1, [r4, #2184]	@ 0x888
   3d8c0:	f8d3 1244 	ldr.w	r1, [r3, #580]	@ 0x244
   3d8c4:	f8d3 2280 	ldr.w	r2, [r3, #640]	@ 0x280
   3d8c8:	f8c4 2894 	str.w	r2, [r4, #2196]	@ 0x894
   3d8cc:	f8c4 1890 	str.w	r1, [r4, #2192]	@ 0x890
   3d8d0:	f8d3 12c0 	ldr.w	r1, [r3, #704]	@ 0x2c0
   3d8d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
   3d8d8:	f8c4 289c 	str.w	r2, [r4, #2204]	@ 0x89c
   3d8dc:	f8c4 1898 	str.w	r1, [r4, #2200]	@ 0x898
   3d8e0:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
   3d8e4:	f8d3 2228 	ldr.w	r2, [r3, #552]	@ 0x228
   3d8e8:	f8c4 1870 	str.w	r1, [r4, #2160]	@ 0x870
   3d8ec:	07d1      	lsls	r1, r2, #31
   3d8ee:	d472      	bmi.n	3d9d6 <am_hal_iom_power_ctrl+0x1a6>
   3d8f0:	2201      	movs	r2, #1
   3d8f2:	f884 2868 	strb.w	r2, [r4, #2152]	@ 0x868
   3d8f6:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
   3d8fa:	f36f 0200 	bfc	r2, #0, #1
   3d8fe:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
   3d902:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
   3d906:	3001      	adds	r0, #1
   3d908:	f36f 1204 	bfc	r2, #4, #1
   3d90c:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
   3d910:	b2c0      	uxtb	r0, r0
   3d912:	f7f4 ffc7 	bl	328a4 <am_hal_pwrctrl_periph_disable>
   3d916:	2000      	movs	r0, #0
   3d918:	b003      	add	sp, #12
   3d91a:	bd30      	pop	{r4, r5, pc}
   3d91c:	2002      	movs	r0, #2
   3d91e:	b003      	add	sp, #12
   3d920:	bd30      	pop	{r4, r5, pc}
   3d922:	2006      	movs	r0, #6
   3d924:	b003      	add	sp, #12
   3d926:	bd30      	pop	{r4, r5, pc}
   3d928:	2a00      	cmp	r2, #0
   3d92a:	d04b      	beq.n	3d9c4 <am_hal_iom_power_ctrl+0x194>
   3d92c:	f894 3868 	ldrb.w	r3, [r4, #2152]	@ 0x868
   3d930:	2b00      	cmp	r3, #0
   3d932:	d05c      	beq.n	3d9ee <am_hal_iom_power_ctrl+0x1be>
   3d934:	6860      	ldr	r0, [r4, #4]
   3d936:	3001      	adds	r0, #1
   3d938:	b2c0      	uxtb	r0, r0
   3d93a:	f7f4 fee3 	bl	32704 <am_hal_pwrctrl_periph_enable>
   3d93e:	6863      	ldr	r3, [r4, #4]
   3d940:	f8d4 086c 	ldr.w	r0, [r4, #2156]	@ 0x86c
   3d944:	f8d4 1874 	ldr.w	r1, [r4, #2164]	@ 0x874
   3d948:	f8d4 287c 	ldr.w	r2, [r4, #2172]	@ 0x87c
   3d94c:	f8d4 5870 	ldr.w	r5, [r4, #2160]	@ 0x870
   3d950:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3d954:	3350      	adds	r3, #80	@ 0x50
   3d956:	031b      	lsls	r3, r3, #12
   3d958:	f8c3 0104 	str.w	r0, [r3, #260]	@ 0x104
   3d95c:	f8d4 0880 	ldr.w	r0, [r4, #2176]	@ 0x880
   3d960:	f8c3 1118 	str.w	r1, [r3, #280]	@ 0x118
   3d964:	f8d4 1884 	ldr.w	r1, [r4, #2180]	@ 0x884
   3d968:	f8c3 022c 	str.w	r0, [r3, #556]	@ 0x22c
   3d96c:	f8d4 0888 	ldr.w	r0, [r4, #2184]	@ 0x888
   3d970:	f8c3 1234 	str.w	r1, [r3, #564]	@ 0x234
   3d974:	f8d4 188c 	ldr.w	r1, [r4, #2188]	@ 0x88c
   3d978:	f8c3 023c 	str.w	r0, [r3, #572]	@ 0x23c
   3d97c:	f8d4 0890 	ldr.w	r0, [r4, #2192]	@ 0x890
   3d980:	f8c3 1240 	str.w	r1, [r3, #576]	@ 0x240
   3d984:	f8d4 1894 	ldr.w	r1, [r4, #2196]	@ 0x894
   3d988:	f8c3 0244 	str.w	r0, [r3, #580]	@ 0x244
   3d98c:	f8d4 0898 	ldr.w	r0, [r4, #2200]	@ 0x898
   3d990:	f8c3 1280 	str.w	r1, [r3, #640]	@ 0x280
   3d994:	f8d4 189c 	ldr.w	r1, [r4, #2204]	@ 0x89c
   3d998:	f8c3 02c0 	str.w	r0, [r3, #704]	@ 0x2c0
   3d99c:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
   3d9a0:	f022 0001 	bic.w	r0, r2, #1
   3d9a4:	f8d4 1878 	ldr.w	r1, [r4, #2168]	@ 0x878
   3d9a8:	f8c3 5210 	str.w	r5, [r3, #528]	@ 0x210
   3d9ac:	07d2      	lsls	r2, r2, #31
   3d9ae:	f8c3 0228 	str.w	r0, [r3, #552]	@ 0x228
   3d9b2:	f8c3 111c 	str.w	r1, [r3, #284]	@ 0x11c
   3d9b6:	d41c      	bmi.n	3d9f2 <am_hal_iom_power_ctrl+0x1c2>
   3d9b8:	2000      	movs	r0, #0
   3d9ba:	f884 0868 	strb.w	r0, [r4, #2152]	@ 0x868
   3d9be:	e7ae      	b.n	3d91e <am_hal_iom_power_ctrl+0xee>
   3d9c0:	2002      	movs	r0, #2
   3d9c2:	4770      	bx	lr
   3d9c4:	6860      	ldr	r0, [r4, #4]
   3d9c6:	9201      	str	r2, [sp, #4]
   3d9c8:	3001      	adds	r0, #1
   3d9ca:	b2c0      	uxtb	r0, r0
   3d9cc:	f7f4 fe9a 	bl	32704 <am_hal_pwrctrl_periph_enable>
   3d9d0:	9a01      	ldr	r2, [sp, #4]
   3d9d2:	4610      	mov	r0, r2
   3d9d4:	e7a3      	b.n	3d91e <am_hal_iom_power_ctrl+0xee>
   3d9d6:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   3d9da:	f001 f8e9 	bl	3ebb0 <am_hal_cmdq_disable>
   3d9de:	6860      	ldr	r0, [r4, #4]
   3d9e0:	f500 2380 	add.w	r3, r0, #262144	@ 0x40000
   3d9e4:	3350      	adds	r3, #80	@ 0x50
   3d9e6:	031b      	lsls	r3, r3, #12
   3d9e8:	e782      	b.n	3d8f0 <am_hal_iom_power_ctrl+0xc0>
   3d9ea:	2003      	movs	r0, #3
   3d9ec:	e797      	b.n	3d91e <am_hal_iom_power_ctrl+0xee>
   3d9ee:	2007      	movs	r0, #7
   3d9f0:	e795      	b.n	3d91e <am_hal_iom_power_ctrl+0xee>
   3d9f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   3d9f4:	b92a      	cbnz	r2, 3da02 <am_hal_iom_power_ctrl+0x1d2>
   3d9f6:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
   3d9fa:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
   3d9fe:	e9c2 3200 	strd	r3, r2, [r2]
   3da02:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   3da06:	f001 f8a7 	bl	3eb58 <am_hal_cmdq_enable>
   3da0a:	e7d5      	b.n	3d9b8 <am_hal_iom_power_ctrl+0x188>
   3da0c:	01123456 	.word	0x01123456

0003da10 <am_hal_iom_configure>:
   3da10:	b380      	cbz	r0, 3da74 <am_hal_iom_configure+0x64>
   3da12:	6803      	ldr	r3, [r0, #0]
   3da14:	4aa1      	ldr	r2, [pc, #644]	@ (3dc9c <am_hal_iom_configure+0x28c>)
   3da16:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3da1a:	4293      	cmp	r3, r2
   3da1c:	d12a      	bne.n	3da74 <am_hal_iom_configure+0x64>
   3da1e:	2900      	cmp	r1, #0
   3da20:	f000 810c 	beq.w	3dc3c <am_hal_iom_configure+0x22c>
   3da24:	6843      	ldr	r3, [r0, #4]
   3da26:	2b07      	cmp	r3, #7
   3da28:	f200 8108 	bhi.w	3dc3c <am_hal_iom_configure+0x22c>
   3da2c:	78c2      	ldrb	r2, [r0, #3]
   3da2e:	0792      	lsls	r2, r2, #30
   3da30:	f100 8106 	bmi.w	3dc40 <am_hal_iom_configure+0x230>
   3da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3da38:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3da3c:	3350      	adds	r3, #80	@ 0x50
   3da3e:	780a      	ldrb	r2, [r1, #0]
   3da40:	7202      	strb	r2, [r0, #8]
   3da42:	031b      	lsls	r3, r3, #12
   3da44:	f241 0410 	movw	r4, #4112	@ 0x1010
   3da48:	f8c3 4104 	str.w	r4, [r3, #260]	@ 0x104
   3da4c:	b1a2      	cbz	r2, 3da78 <am_hal_iom_configure+0x68>
   3da4e:	2a01      	cmp	r2, #1
   3da50:	f040 80f8 	bne.w	3dc44 <am_hal_iom_configure+0x234>
   3da54:	684a      	ldr	r2, [r1, #4]
   3da56:	4c92      	ldr	r4, [pc, #584]	@ (3dca0 <am_hal_iom_configure+0x290>)
   3da58:	42a2      	cmp	r2, r4
   3da5a:	f000 8114 	beq.w	3dc86 <am_hal_iom_configure+0x276>
   3da5e:	4c91      	ldr	r4, [pc, #580]	@ (3dca4 <am_hal_iom_configure+0x294>)
   3da60:	42a2      	cmp	r2, r4
   3da62:	f000 810b 	beq.w	3dc7c <am_hal_iom_configure+0x26c>
   3da66:	4c90      	ldr	r4, [pc, #576]	@ (3dca8 <am_hal_iom_configure+0x298>)
   3da68:	42a2      	cmp	r2, r4
   3da6a:	f000 8102 	beq.w	3dc72 <am_hal_iom_configure+0x262>
   3da6e:	2006      	movs	r0, #6
   3da70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3da74:	2002      	movs	r0, #2
   3da76:	4770      	bx	lr
   3da78:	7a0d      	ldrb	r5, [r1, #8]
   3da7a:	2d03      	cmp	r5, #3
   3da7c:	d8f7      	bhi.n	3da6e <am_hal_iom_configure+0x5e>
   3da7e:	684a      	ldr	r2, [r1, #4]
   3da80:	4c8a      	ldr	r4, [pc, #552]	@ (3dcac <am_hal_iom_configure+0x29c>)
   3da82:	42a2      	cmp	r2, r4
   3da84:	d8f3      	bhi.n	3da6e <am_hal_iom_configure+0x5e>
   3da86:	2a00      	cmp	r2, #0
   3da88:	f000 80e8 	beq.w	3dc5c <am_hal_iom_configure+0x24c>
   3da8c:	4c88      	ldr	r4, [pc, #544]	@ (3dcb0 <am_hal_iom_configure+0x2a0>)
   3da8e:	fbb4 fef2 	udiv	lr, r4, r2
   3da92:	fb02 441e 	mls	r4, r2, lr, r4
   3da96:	2c00      	cmp	r4, #0
   3da98:	bf18      	it	ne
   3da9a:	f10e 0e01 	addne.w	lr, lr, #1
   3da9e:	f1ce 0400 	rsb	r4, lr, #0
   3daa2:	ea04 040e 	and.w	r4, r4, lr
   3daa6:	fab4 f484 	clz	r4, r4
   3daaa:	f1c4 041f 	rsb	r4, r4, #31
   3daae:	2c06      	cmp	r4, #6
   3dab0:	f241 66e2 	movw	r6, #5858	@ 0x16e2
   3dab4:	bfa8      	it	ge
   3dab6:	2406      	movge	r4, #6
   3dab8:	42b2      	cmp	r2, r6
   3daba:	f240 80c5 	bls.w	3dc48 <am_hal_iom_configure+0x238>
   3dabe:	4e7d      	ldr	r6, [pc, #500]	@ (3dcb4 <am_hal_iom_configure+0x2a4>)
   3dac0:	42b2      	cmp	r2, r6
   3dac2:	f0c0 80e5 	bcc.w	3dc90 <am_hal_iom_configure+0x280>
   3dac6:	4e79      	ldr	r6, [pc, #484]	@ (3dcac <am_hal_iom_configure+0x29c>)
   3dac8:	ebb2 0c06 	subs.w	ip, r2, r6
   3dacc:	bf18      	it	ne
   3dace:	f04f 0c01 	movne.w	ip, #1
   3dad2:	ea4f 094c 	mov.w	r9, ip, lsl #1
   3dad6:	f109 0901 	add.w	r9, r9, #1
   3dada:	fa09 f604 	lsl.w	r6, r9, r4
   3dade:	fbbe faf6 	udiv	sl, lr, r6
   3dae2:	fb06 e61a 	mls	r6, r6, sl, lr
   3dae6:	2e00      	cmp	r6, #0
   3dae8:	bf18      	it	ne
   3daea:	f10a 0a01 	addne.w	sl, sl, #1
   3daee:	faba f78a 	clz	r7, sl
   3daf2:	f1c7 061f 	rsb	r6, r7, #31
   3daf6:	2e07      	cmp	r6, #7
   3daf8:	f240 80b2 	bls.w	3dc60 <am_hal_iom_configure+0x250>
   3dafc:	3c07      	subs	r4, #7
   3dafe:	4434      	add	r4, r6
   3db00:	1c66      	adds	r6, r4, #1
   3db02:	2e07      	cmp	r6, #7
   3db04:	f200 80aa 	bhi.w	3dc5c <am_hal_iom_configure+0x24c>
   3db08:	f1c7 0718 	rsb	r7, r7, #24
   3db0c:	f04f 0801 	mov.w	r8, #1
   3db10:	fa08 f807 	lsl.w	r8, r8, r7
   3db14:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
   3db18:	fa2a f707 	lsr.w	r7, sl, r7
   3db1c:	ea08 080a 	and.w	r8, r8, sl
   3db20:	f1b8 0f00 	cmp.w	r8, #0
   3db24:	bf0c      	ite	eq
   3db26:	46ba      	moveq	sl, r7
   3db28:	f107 0a01 	addne.w	sl, r7, #1
   3db2c:	4f62      	ldr	r7, [pc, #392]	@ (3dcb8 <am_hal_iom_configure+0x2a8>)
   3db2e:	42ba      	cmp	r2, r7
   3db30:	f080 8098 	bcs.w	3dc64 <am_hal_iom_configure+0x254>
   3db34:	2701      	movs	r7, #1
   3db36:	40a7      	lsls	r7, r4
   3db38:	45be      	cmp	lr, r7
   3db3a:	f000 8093 	beq.w	3dc64 <am_hal_iom_configure+0x254>
   3db3e:	f10a 37ff 	add.w	r7, sl, #4294967295	@ 0xffffffff
   3db42:	46d3      	mov	fp, sl
   3db44:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
   3db48:	ea4f 0e65 	mov.w	lr, r5, asr #1
   3db4c:	f1be 0f01 	cmp.w	lr, #1
   3db50:	ea4f 2ccc 	mov.w	ip, ip, lsl #11
   3db54:	bf08      	it	eq
   3db56:	f1aa 0e02 	subeq.w	lr, sl, #2
   3db5a:	ea4c 2c06 	orr.w	ip, ip, r6, lsl #8
   3db5e:	bf14      	ite	ne
   3db60:	ea4f 0e57 	movne.w	lr, r7, lsr #1
   3db64:	ea4f 0e5e 	moveq.w	lr, lr, lsr #1
   3db68:	ea4c 0c08 	orr.w	ip, ip, r8
   3db6c:	fa09 f404 	lsl.w	r4, r9, r4
   3db70:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
   3db74:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
   3db78:	4f4d      	ldr	r7, [pc, #308]	@ (3dcb0 <am_hal_iom_configure+0x2a0>)
   3db7a:	fb0b f404 	mul.w	r4, fp, r4
   3db7e:	f40e 0e7f 	and.w	lr, lr, #16711680	@ 0xff0000
   3db82:	fbb7 f9f4 	udiv	r9, r7, r4
   3db86:	ea4c 0c0e 	orr.w	ip, ip, lr
   3db8a:	fb04 7819 	mls	r8, r4, r9, r7
   3db8e:	ea4f 2e06 	mov.w	lr, r6, lsl #8
   3db92:	0864      	lsrs	r4, r4, #1
   3db94:	4e49      	ldr	r6, [pc, #292]	@ (3dcbc <am_hal_iom_configure+0x2ac>)
   3db96:	4544      	cmp	r4, r8
   3db98:	bf2c      	ite	cs
   3db9a:	464f      	movcs	r7, r9
   3db9c:	f109 0701 	addcc.w	r7, r9, #1
   3dba0:	f8df 8140 	ldr.w	r8, [pc, #320]	@ 3dce4 <am_hal_iom_configure+0x2d4>
   3dba4:	fba6 6407 	umull	r6, r4, r6, r7
   3dba8:	4e45      	ldr	r6, [pc, #276]	@ (3dcc0 <am_hal_iom_configure+0x2b0>)
   3dbaa:	0c24      	lsrs	r4, r4, #16
   3dbac:	4547      	cmp	r7, r8
   3dbae:	fb06 7614 	mls	r6, r6, r4, r7
   3dbb2:	d905      	bls.n	3dbc0 <am_hal_iom_configure+0x1b0>
   3dbb4:	1e67      	subs	r7, r4, #1
   3dbb6:	403c      	ands	r4, r7
   3dbb8:	4334      	orrs	r4, r6
   3dbba:	d101      	bne.n	3dbc0 <am_hal_iom_configure+0x1b0>
   3dbbc:	f44e 6c00 	orr.w	ip, lr, #2048	@ 0x800
   3dbc0:	f04c 0401 	orr.w	r4, ip, #1
   3dbc4:	f8c3 5280 	str.w	r5, [r3, #640]	@ 0x280
   3dbc8:	f8c3 4118 	str.w	r4, [r3, #280]	@ 0x118
   3dbcc:	e9d1 4303 	ldrd	r4, r3, [r1, #12]
   3dbd0:	f44f 757a 	mov.w	r5, #1000	@ 0x3e8
   3dbd4:	4933      	ldr	r1, [pc, #204]	@ (3dca4 <am_hal_iom_configure+0x294>)
   3dbd6:	f8c0 5860 	str.w	r5, [r0, #2144]	@ 0x860
   3dbda:	fbb1 f2f2 	udiv	r2, r1, r2
   3dbde:	60c4      	str	r4, [r0, #12]
   3dbe0:	f8c0 2864 	str.w	r2, [r0, #2148]	@ 0x864
   3dbe4:	6103      	str	r3, [r0, #16]
   3dbe6:	b31c      	cbz	r4, 3dc30 <am_hal_iom_configure+0x220>
   3dbe8:	4936      	ldr	r1, [pc, #216]	@ (3dcc4 <am_hal_iom_configure+0x2b4>)
   3dbea:	eb04 0583 	add.w	r5, r4, r3, lsl #2
   3dbee:	428d      	cmp	r5, r1
   3dbf0:	bf94      	ite	ls
   3dbf2:	2101      	movls	r1, #1
   3dbf4:	2100      	movhi	r1, #0
   3dbf6:	ea4f 0283 	mov.w	r2, r3, lsl #2
   3dbfa:	f880 18a4 	strb.w	r1, [r0, #2212]	@ 0x8a4
   3dbfe:	d909      	bls.n	3dc14 <am_hal_iom_configure+0x204>
   3dc00:	f004 030f 	and.w	r3, r4, #15
   3dc04:	1ad3      	subs	r3, r2, r3
   3dc06:	340f      	adds	r4, #15
   3dc08:	091b      	lsrs	r3, r3, #4
   3dc0a:	f024 040f 	bic.w	r4, r4, #15
   3dc0e:	009b      	lsls	r3, r3, #2
   3dc10:	e9c0 4303 	strd	r4, r3, [r0, #12]
   3dc14:	3b08      	subs	r3, #8
   3dc16:	f246 015f 	movw	r1, #24671	@ 0x605f
   3dc1a:	ebb1 0f83 	cmp.w	r1, r3, lsl #2
   3dc1e:	ea4f 0283 	mov.w	r2, r3, lsl #2
   3dc22:	d316      	bcc.n	3dc52 <am_hal_iom_configure+0x242>
   3dc24:	4b28      	ldr	r3, [pc, #160]	@ (3dcc8 <am_hal_iom_configure+0x2b8>)
   3dc26:	fba3 3202 	umull	r3, r2, r3, r2
   3dc2a:	0992      	lsrs	r2, r2, #6
   3dc2c:	f8c0 2858 	str.w	r2, [r0, #2136]	@ 0x858
   3dc30:	2300      	movs	r3, #0
   3dc32:	f8c0 38a0 	str.w	r3, [r0, #2208]	@ 0x8a0
   3dc36:	4618      	mov	r0, r3
   3dc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dc3c:	2006      	movs	r0, #6
   3dc3e:	4770      	bx	lr
   3dc40:	2007      	movs	r0, #7
   3dc42:	4770      	bx	lr
   3dc44:	2005      	movs	r0, #5
   3dc46:	e713      	b.n	3da70 <am_hal_iom_configure+0x60>
   3dc48:	f04f 0903 	mov.w	r9, #3
   3dc4c:	f04f 0c01 	mov.w	ip, #1
   3dc50:	e743      	b.n	3dada <am_hal_iom_configure+0xca>
   3dc52:	f44f 7380 	mov.w	r3, #256	@ 0x100
   3dc56:	f8c0 3858 	str.w	r3, [r0, #2136]	@ 0x858
   3dc5a:	e7e9      	b.n	3dc30 <am_hal_iom_configure+0x220>
   3dc5c:	2401      	movs	r4, #1
   3dc5e:	e7b1      	b.n	3dbc4 <am_hal_iom_configure+0x1b4>
   3dc60:	1c66      	adds	r6, r4, #1
   3dc62:	e763      	b.n	3db2c <am_hal_iom_configure+0x11c>
   3dc64:	f10a 37ff 	add.w	r7, sl, #4294967295	@ 0xffffffff
   3dc68:	f04f 0b01 	mov.w	fp, #1
   3dc6c:	f04f 0800 	mov.w	r8, #0
   3dc70:	e76a      	b.n	3db48 <am_hal_iom_configure+0x138>
   3dc72:	4c16      	ldr	r4, [pc, #88]	@ (3dccc <am_hal_iom_configure+0x2bc>)
   3dc74:	f8c3 42c0 	str.w	r4, [r3, #704]	@ 0x2c0
   3dc78:	4c15      	ldr	r4, [pc, #84]	@ (3dcd0 <am_hal_iom_configure+0x2c0>)
   3dc7a:	e7a5      	b.n	3dbc8 <am_hal_iom_configure+0x1b8>
   3dc7c:	4c15      	ldr	r4, [pc, #84]	@ (3dcd4 <am_hal_iom_configure+0x2c4>)
   3dc7e:	f8c3 42c0 	str.w	r4, [r3, #704]	@ 0x2c0
   3dc82:	4c15      	ldr	r4, [pc, #84]	@ (3dcd8 <am_hal_iom_configure+0x2c8>)
   3dc84:	e7a0      	b.n	3dbc8 <am_hal_iom_configure+0x1b8>
   3dc86:	4c15      	ldr	r4, [pc, #84]	@ (3dcdc <am_hal_iom_configure+0x2cc>)
   3dc88:	f8c3 42c0 	str.w	r4, [r3, #704]	@ 0x2c0
   3dc8c:	4c14      	ldr	r4, [pc, #80]	@ (3dce0 <am_hal_iom_configure+0x2d0>)
   3dc8e:	e79b      	b.n	3dbc8 <am_hal_iom_configure+0x1b8>
   3dc90:	f04f 0901 	mov.w	r9, #1
   3dc94:	f04f 0c00 	mov.w	ip, #0
   3dc98:	e71f      	b.n	3dada <am_hal_iom_configure+0xca>
   3dc9a:	bf00      	nop
   3dc9c:	01123456 	.word	0x01123456
   3dca0:	00061a80 	.word	0x00061a80
   3dca4:	000f4240 	.word	0x000f4240
   3dca8:	000186a0 	.word	0x000186a0
   3dcac:	02dc6c00 	.word	0x02dc6c00
   3dcb0:	05b8d800 	.word	0x05b8d800
   3dcb4:	01e84800 	.word	0x01e84800
   3dcb8:	016e3600 	.word	0x016e3600
   3dcbc:	431bde83 	.word	0x431bde83
   3dcc0:	0003d090 	.word	0x0003d090
   3dcc4:	1005ffff 	.word	0x1005ffff
   3dcc8:	aaaaaaab 	.word	0xaaaaaaab
   3dccc:	0003f070 	.word	0x0003f070
   3dcd0:	773b1301 	.word	0x773b1301
   3dcd4:	00023040 	.word	0x00023040
   3dcd8:	0b051301 	.word	0x0b051301
   3dcdc:	0003f270 	.word	0x0003f270
   3dce0:	1d0e1301 	.word	0x1d0e1301
   3dce4:	0003d08f 	.word	0x0003d08f

0003dce8 <am_hal_iom_blocking_transfer>:
   3dce8:	2800      	cmp	r0, #0
   3dcea:	f000 813e 	beq.w	3df6a <am_hal_iom_blocking_transfer+0x282>
   3dcee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dcf2:	6803      	ldr	r3, [r0, #0]
   3dcf4:	4abd      	ldr	r2, [pc, #756]	@ (3dfec <am_hal_iom_blocking_transfer+0x304>)
   3dcf6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3dcfa:	4293      	cmp	r3, r2
   3dcfc:	b087      	sub	sp, #28
   3dcfe:	4606      	mov	r6, r0
   3dd00:	f040 8117 	bne.w	3df32 <am_hal_iom_blocking_transfer+0x24a>
   3dd04:	460d      	mov	r5, r1
   3dd06:	2900      	cmp	r1, #0
   3dd08:	f000 811c 	beq.w	3df44 <am_hal_iom_blocking_transfer+0x25c>
   3dd0c:	f891 8014 	ldrb.w	r8, [r1, #20]
   3dd10:	f1b8 0f01 	cmp.w	r8, #1
   3dd14:	f200 811f 	bhi.w	3df56 <am_hal_iom_blocking_transfer+0x26e>
   3dd18:	f8d1 9010 	ldr.w	r9, [r1, #16]
   3dd1c:	f1b9 0f00 	cmp.w	r9, #0
   3dd20:	f000 8115 	beq.w	3df4e <am_hal_iom_blocking_transfer+0x266>
   3dd24:	f8d5 a004 	ldr.w	sl, [r5, #4]
   3dd28:	f1ba 0f05 	cmp.w	sl, #5
   3dd2c:	f200 810a 	bhi.w	3df44 <am_hal_iom_blocking_transfer+0x25c>
   3dd30:	ea4f 01ca 	mov.w	r1, sl, lsl #3
   3dd34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   3dd38:	f1a1 0420 	sub.w	r4, r1, #32
   3dd3c:	f1c1 0020 	rsb	r0, r1, #32
   3dd40:	fa03 f201 	lsl.w	r2, r3, r1
   3dd44:	fa03 f404 	lsl.w	r4, r3, r4
   3dd48:	fa23 f000 	lsr.w	r0, r3, r0
   3dd4c:	408b      	lsls	r3, r1
   3dd4e:	68a9      	ldr	r1, [r5, #8]
   3dd50:	9102      	str	r1, [sp, #8]
   3dd52:	400b      	ands	r3, r1
   3dd54:	4322      	orrs	r2, r4
   3dd56:	68e9      	ldr	r1, [r5, #12]
   3dd58:	9103      	str	r1, [sp, #12]
   3dd5a:	4302      	orrs	r2, r0
   3dd5c:	400a      	ands	r2, r1
   3dd5e:	4313      	orrs	r3, r2
   3dd60:	f040 80f0 	bne.w	3df44 <am_hal_iom_blocking_transfer+0x25c>
   3dd64:	f1b9 0f00 	cmp.w	r9, #0
   3dd68:	f000 80fa 	beq.w	3df60 <am_hal_iom_blocking_transfer+0x278>
   3dd6c:	f1b8 0f00 	cmp.w	r8, #0
   3dd70:	f000 80e4 	beq.w	3df3c <am_hal_iom_blocking_transfer+0x254>
   3dd74:	69eb      	ldr	r3, [r5, #28]
   3dd76:	2b00      	cmp	r3, #0
   3dd78:	f000 80e4 	beq.w	3df44 <am_hal_iom_blocking_transfer+0x25c>
   3dd7c:	7a33      	ldrb	r3, [r6, #8]
   3dd7e:	2b01      	cmp	r3, #1
   3dd80:	d004      	beq.n	3dd8c <am_hal_iom_blocking_transfer+0xa4>
   3dd82:	b93b      	cbnz	r3, 3dd94 <am_hal_iom_blocking_transfer+0xac>
   3dd84:	682b      	ldr	r3, [r5, #0]
   3dd86:	2b04      	cmp	r3, #4
   3dd88:	f200 80dc 	bhi.w	3df44 <am_hal_iom_blocking_transfer+0x25c>
   3dd8c:	f5b9 5f80 	cmp.w	r9, #4096	@ 0x1000
   3dd90:	f080 80d8 	bcs.w	3df44 <am_hal_iom_blocking_transfer+0x25c>
   3dd94:	f896 382c 	ldrb.w	r3, [r6, #2092]	@ 0x82c
   3dd98:	2b02      	cmp	r3, #2
   3dd9a:	f000 80dc 	beq.w	3df56 <am_hal_iom_blocking_transfer+0x26e>
   3dd9e:	e9d5 3706 	ldrd	r3, r7, [r5, #24]
   3dda2:	f04f 0b01 	mov.w	fp, #1
   3dda6:	f8cd b000 	str.w	fp, [sp]
   3ddaa:	6874      	ldr	r4, [r6, #4]
   3ddac:	9404      	str	r4, [sp, #16]
   3ddae:	f8d6 0860 	ldr.w	r0, [r6, #2144]	@ 0x860
   3ddb2:	f895 4020 	ldrb.w	r4, [r5, #32]
   3ddb6:	9405      	str	r4, [sp, #20]
   3ddb8:	f1b8 0f00 	cmp.w	r8, #0
   3ddbc:	bf08      	it	eq
   3ddbe:	461f      	moveq	r7, r3
   3ddc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   3ddc4:	2300      	movs	r3, #0
   3ddc6:	f106 0124 	add.w	r1, r6, #36	@ 0x24
   3ddca:	f7f5 fb93 	bl	334f4 <am_hal_delay_us_status_check>
   3ddce:	4603      	mov	r3, r0
   3ddd0:	2800      	cmp	r0, #0
   3ddd2:	f040 80af 	bne.w	3df34 <am_hal_iom_blocking_transfer+0x24c>
   3ddd6:	9b04      	ldr	r3, [sp, #16]
   3ddd8:	f8cd b000 	str.w	fp, [sp]
   3dddc:	f503 2480 	add.w	r4, r3, #262144	@ 0x40000
   3dde0:	3450      	adds	r4, #80	@ 0x50
   3dde2:	0324      	lsls	r4, r4, #12
   3dde4:	f504 7b12 	add.w	fp, r4, #584	@ 0x248
   3dde8:	2304      	movs	r3, #4
   3ddea:	f8d6 0860 	ldr.w	r0, [r6, #2144]	@ 0x860
   3ddee:	2206      	movs	r2, #6
   3ddf0:	4659      	mov	r1, fp
   3ddf2:	f7f5 fb7f 	bl	334f4 <am_hal_delay_us_status_check>
   3ddf6:	4603      	mov	r3, r0
   3ddf8:	2800      	cmp	r0, #0
   3ddfa:	f040 809b 	bne.w	3df34 <am_hal_iom_blocking_transfer+0x24c>
   3ddfe:	f8d4 2200 	ldr.w	r2, [r4, #512]	@ 0x200
   3de02:	9204      	str	r2, [sp, #16]
   3de04:	f8c4 0200 	str.w	r0, [r4, #512]	@ 0x200
   3de08:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
   3de0c:	f360 0200 	bfi	r2, r0, #0, #1
   3de10:	f8c4 2218 	str.w	r2, [r4, #536]	@ 0x218
   3de14:	682a      	ldr	r2, [r5, #0]
   3de16:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   3de1a:	f8c4 1208 	str.w	r1, [r4, #520]	@ 0x208
   3de1e:	f8c4 22c4 	str.w	r2, [r4, #708]	@ 0x2c4
   3de22:	7a31      	ldrb	r1, [r6, #8]
   3de24:	2900      	cmp	r1, #0
   3de26:	f000 80a3 	beq.w	3df70 <am_hal_iom_blocking_transfer+0x288>
   3de2a:	f8c4 0124 	str.w	r0, [r4, #292]	@ 0x124
   3de2e:	4a70      	ldr	r2, [pc, #448]	@ (3dff0 <am_hal_iom_blocking_transfer+0x308>)
   3de30:	f1b8 0f01 	cmp.w	r8, #1
   3de34:	ea02 2909 	and.w	r9, r2, r9, lsl #8
   3de38:	ea49 0303 	orr.w	r3, r9, r3
   3de3c:	f000 80de 	beq.w	3dffc <am_hal_iom_blocking_transfer+0x314>
   3de40:	9a02      	ldr	r2, [sp, #8]
   3de42:	9903      	ldr	r1, [sp, #12]
   3de44:	692d      	ldr	r5, [r5, #16]
   3de46:	0a12      	lsrs	r2, r2, #8
   3de48:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   3de4c:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3de50:	f8d4 2100 	ldr.w	r2, [r4, #256]	@ 0x100
   3de54:	f3c2 2207 	ubfx	r2, r2, #8, #8
   3de58:	2a03      	cmp	r2, #3
   3de5a:	46b9      	mov	r9, r7
   3de5c:	d917      	bls.n	3de8e <am_hal_iom_blocking_transfer+0x1a6>
   3de5e:	b1b5      	cbz	r5, 3de8e <am_hal_iom_blocking_transfer+0x1a6>
   3de60:	f859 1b04 	ldr.w	r1, [r9], #4
   3de64:	f8c4 110c 	str.w	r1, [r4, #268]	@ 0x10c
   3de68:	2d03      	cmp	r5, #3
   3de6a:	d90f      	bls.n	3de8c <am_hal_iom_blocking_transfer+0x1a4>
   3de6c:	3a04      	subs	r2, #4
   3de6e:	f022 0203 	bic.w	r2, r2, #3
   3de72:	3204      	adds	r2, #4
   3de74:	4417      	add	r7, r2
   3de76:	454f      	cmp	r7, r9
   3de78:	f1a5 0504 	sub.w	r5, r5, #4
   3de7c:	d007      	beq.n	3de8e <am_hal_iom_blocking_transfer+0x1a6>
   3de7e:	b135      	cbz	r5, 3de8e <am_hal_iom_blocking_transfer+0x1a6>
   3de80:	f859 2b04 	ldr.w	r2, [r9], #4
   3de84:	f8c4 210c 	str.w	r2, [r4, #268]	@ 0x10c
   3de88:	2d03      	cmp	r5, #3
   3de8a:	d8f4      	bhi.n	3de76 <am_hal_iom_blocking_transfer+0x18e>
   3de8c:	4645      	mov	r5, r8
   3de8e:	9a05      	ldr	r2, [sp, #20]
   3de90:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
   3de94:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   3de98:	9a02      	ldr	r2, [sp, #8]
   3de9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   3de9e:	f043 0301 	orr.w	r3, r3, #1
   3dea2:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
   3dea6:	2d00      	cmp	r5, #0
   3dea8:	f000 8088 	beq.w	3dfbc <am_hal_iom_blocking_transfer+0x2d4>
   3deac:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3deb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3deb4:	2b03      	cmp	r3, #3
   3deb6:	f200 8083 	bhi.w	3dfc0 <am_hal_iom_blocking_transfer+0x2d8>
   3deba:	4f4e      	ldr	r7, [pc, #312]	@ (3dff4 <am_hal_iom_blocking_transfer+0x30c>)
   3debc:	e009      	b.n	3ded2 <am_hal_iom_blocking_transfer+0x1ea>
   3debe:	3f01      	subs	r7, #1
   3dec0:	d00d      	beq.n	3dede <am_hal_iom_blocking_transfer+0x1f6>
   3dec2:	f7f5 fad3 	bl	3346c <am_hal_delay_us>
   3dec6:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3deca:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3dece:	2b03      	cmp	r3, #3
   3ded0:	d876      	bhi.n	3dfc0 <am_hal_iom_blocking_transfer+0x2d8>
   3ded2:	f8d4 3204 	ldr.w	r3, [r4, #516]	@ 0x204
   3ded6:	07db      	lsls	r3, r3, #31
   3ded8:	f04f 0001 	mov.w	r0, #1
   3dedc:	d5ef      	bpl.n	3debe <am_hal_iom_blocking_transfer+0x1d6>
   3dede:	2701      	movs	r7, #1
   3dee0:	2304      	movs	r3, #4
   3dee2:	4845      	ldr	r0, [pc, #276]	@ (3dff8 <am_hal_iom_blocking_transfer+0x310>)
   3dee4:	9700      	str	r7, [sp, #0]
   3dee6:	4659      	mov	r1, fp
   3dee8:	2206      	movs	r2, #6
   3deea:	f7f5 fb03 	bl	334f4 <am_hal_delay_us_status_check>
   3deee:	4603      	mov	r3, r0
   3def0:	b980      	cbnz	r0, 3df14 <am_hal_iom_blocking_transfer+0x22c>
   3def2:	f8d4 3204 	ldr.w	r3, [r4, #516]	@ 0x204
   3def6:	f013 0f6c 	tst.w	r3, #108	@ 0x6c
   3defa:	f040 80b6 	bne.w	3e06a <am_hal_iom_blocking_transfer+0x382>
   3defe:	0599      	lsls	r1, r3, #22
   3df00:	f100 80b6 	bmi.w	3e070 <am_hal_iom_blocking_transfer+0x388>
   3df04:	06da      	lsls	r2, r3, #27
   3df06:	f100 80b5 	bmi.w	3e074 <am_hal_iom_blocking_transfer+0x38c>
   3df0a:	f403 4390 	and.w	r3, r3, #18432	@ 0x4800
   3df0e:	432b      	orrs	r3, r5
   3df10:	d007      	beq.n	3df22 <am_hal_iom_blocking_transfer+0x23a>
   3df12:	463b      	mov	r3, r7
   3df14:	f8d4 1204 	ldr.w	r1, [r4, #516]	@ 0x204
   3df18:	9302      	str	r3, [sp, #8]
   3df1a:	4630      	mov	r0, r6
   3df1c:	f7fe ff7c 	bl	3ce18 <internal_iom_reset_on_error>
   3df20:	9b02      	ldr	r3, [sp, #8]
   3df22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   3df26:	f8c4 2208 	str.w	r2, [r4, #520]	@ 0x208
   3df2a:	9a04      	ldr	r2, [sp, #16]
   3df2c:	f8c4 2200 	str.w	r2, [r4, #512]	@ 0x200
   3df30:	e000      	b.n	3df34 <am_hal_iom_blocking_transfer+0x24c>
   3df32:	2302      	movs	r3, #2
   3df34:	4618      	mov	r0, r3
   3df36:	b007      	add	sp, #28
   3df38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3df3c:	69ab      	ldr	r3, [r5, #24]
   3df3e:	2b00      	cmp	r3, #0
   3df40:	f47f af1c 	bne.w	3dd7c <am_hal_iom_blocking_transfer+0x94>
   3df44:	2306      	movs	r3, #6
   3df46:	4618      	mov	r0, r3
   3df48:	b007      	add	sp, #28
   3df4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3df4e:	f881 9014 	strb.w	r9, [r1, #20]
   3df52:	46c8      	mov	r8, r9
   3df54:	e6e6      	b.n	3dd24 <am_hal_iom_blocking_transfer+0x3c>
   3df56:	2307      	movs	r3, #7
   3df58:	4618      	mov	r0, r3
   3df5a:	b007      	add	sp, #28
   3df5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3df60:	7a33      	ldrb	r3, [r6, #8]
   3df62:	2b01      	cmp	r3, #1
   3df64:	f47f af0d 	bne.w	3dd82 <am_hal_iom_blocking_transfer+0x9a>
   3df68:	e714      	b.n	3dd94 <am_hal_iom_blocking_transfer+0xac>
   3df6a:	2302      	movs	r3, #2
   3df6c:	4618      	mov	r0, r3
   3df6e:	4770      	bx	lr
   3df70:	18b1      	adds	r1, r6, r2
   3df72:	0513      	lsls	r3, r2, #20
   3df74:	f891 28a0 	ldrb.w	r2, [r1, #2208]	@ 0x8a0
   3df78:	f8c4 2124 	str.w	r2, [r4, #292]	@ 0x124
   3df7c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
   3df80:	e755      	b.n	3de2e <am_hal_iom_blocking_transfer+0x146>
   3df82:	2b03      	cmp	r3, #3
   3df84:	f8c8 1000 	str.w	r1, [r8]
   3df88:	f1a5 0504 	sub.w	r5, r5, #4
   3df8c:	f108 0804 	add.w	r8, r8, #4
   3df90:	d968      	bls.n	3e064 <am_hal_iom_blocking_transfer+0x37c>
   3df92:	b19d      	cbz	r5, 3dfbc <am_hal_iom_blocking_transfer+0x2d4>
   3df94:	2d03      	cmp	r5, #3
   3df96:	f8d4 1108 	ldr.w	r1, [r4, #264]	@ 0x108
   3df9a:	f1a3 0304 	sub.w	r3, r3, #4
   3df9e:	d8f0      	bhi.n	3df82 <am_hal_iom_blocking_transfer+0x29a>
   3dfa0:	3d01      	subs	r5, #1
   3dfa2:	f888 1000 	strb.w	r1, [r8]
   3dfa6:	ea4f 2311 	mov.w	r3, r1, lsr #8
   3dfaa:	d007      	beq.n	3dfbc <am_hal_iom_blocking_transfer+0x2d4>
   3dfac:	2d01      	cmp	r5, #1
   3dfae:	f888 3001 	strb.w	r3, [r8, #1]
   3dfb2:	ea4f 4111 	mov.w	r1, r1, lsr #16
   3dfb6:	d001      	beq.n	3dfbc <am_hal_iom_blocking_transfer+0x2d4>
   3dfb8:	f888 1002 	strb.w	r1, [r8, #2]
   3dfbc:	2500      	movs	r5, #0
   3dfbe:	e78e      	b.n	3dede <am_hal_iom_blocking_transfer+0x1f6>
   3dfc0:	f005 0003 	and.w	r0, r5, #3
   3dfc4:	464a      	mov	r2, r9
   3dfc6:	f852 1b04 	ldr.w	r1, [r2], #4
   3dfca:	f8c4 110c 	str.w	r1, [r4, #268]	@ 0x10c
   3dfce:	42a8      	cmp	r0, r5
   3dfd0:	eba9 0102 	sub.w	r1, r9, r2
   3dfd4:	4419      	add	r1, r3
   3dfd6:	f1a5 0504 	sub.w	r5, r5, #4
   3dfda:	d004      	beq.n	3dfe6 <am_hal_iom_blocking_transfer+0x2fe>
   3dfdc:	2903      	cmp	r1, #3
   3dfde:	d903      	bls.n	3dfe8 <am_hal_iom_blocking_transfer+0x300>
   3dfe0:	2d00      	cmp	r5, #0
   3dfe2:	d1f0      	bne.n	3dfc6 <am_hal_iom_blocking_transfer+0x2de>
   3dfe4:	e7ea      	b.n	3dfbc <am_hal_iom_blocking_transfer+0x2d4>
   3dfe6:	4645      	mov	r5, r8
   3dfe8:	4691      	mov	r9, r2
   3dfea:	e75c      	b.n	3dea6 <am_hal_iom_blocking_transfer+0x1be>
   3dfec:	01123456 	.word	0x01123456
   3dff0:	000fff00 	.word	0x000fff00
   3dff4:	0007a121 	.word	0x0007a121
   3dff8:	0007a120 	.word	0x0007a120
   3dffc:	9a05      	ldr	r2, [sp, #20]
   3dffe:	9903      	ldr	r1, [sp, #12]
   3e000:	692d      	ldr	r5, [r5, #16]
   3e002:	ea43 130a 	orr.w	r3, r3, sl, lsl #4
   3e006:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   3e00a:	9a02      	ldr	r2, [sp, #8]
   3e00c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   3e010:	0a12      	lsrs	r2, r2, #8
   3e012:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   3e016:	f043 0302 	orr.w	r3, r3, #2
   3e01a:	f8c4 2128 	str.w	r2, [r4, #296]	@ 0x128
   3e01e:	f8c4 3120 	str.w	r3, [r4, #288]	@ 0x120
   3e022:	2d00      	cmp	r5, #0
   3e024:	d0ca      	beq.n	3dfbc <am_hal_iom_blocking_transfer+0x2d4>
   3e026:	2200      	movs	r2, #0
   3e028:	46b8      	mov	r8, r7
   3e02a:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3e02e:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3e032:	2b03      	cmp	r3, #3
   3e034:	d8ae      	bhi.n	3df94 <am_hal_iom_blocking_transfer+0x2ac>
   3e036:	4f10      	ldr	r7, [pc, #64]	@ (3e078 <am_hal_iom_blocking_transfer+0x390>)
   3e038:	e002      	b.n	3e040 <am_hal_iom_blocking_transfer+0x358>
   3e03a:	3f01      	subs	r7, #1
   3e03c:	f43f af4f 	beq.w	3dede <am_hal_iom_blocking_transfer+0x1f6>
   3e040:	2001      	movs	r0, #1
   3e042:	b112      	cbz	r2, 3e04a <am_hal_iom_blocking_transfer+0x362>
   3e044:	42ab      	cmp	r3, r5
   3e046:	f4ff af4a 	bcc.w	3dede <am_hal_iom_blocking_transfer+0x1f6>
   3e04a:	f7f5 fa0f 	bl	3346c <am_hal_delay_us>
   3e04e:	f8d4 2204 	ldr.w	r2, [r4, #516]	@ 0x204
   3e052:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
   3e056:	f3c3 4307 	ubfx	r3, r3, #16, #8
   3e05a:	2b03      	cmp	r3, #3
   3e05c:	f002 0201 	and.w	r2, r2, #1
   3e060:	d9eb      	bls.n	3e03a <am_hal_iom_blocking_transfer+0x352>
   3e062:	e797      	b.n	3df94 <am_hal_iom_blocking_transfer+0x2ac>
   3e064:	2d00      	cmp	r5, #0
   3e066:	d1e0      	bne.n	3e02a <am_hal_iom_blocking_transfer+0x342>
   3e068:	e7a8      	b.n	3dfbc <am_hal_iom_blocking_transfer+0x2d4>
   3e06a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
   3e06e:	e751      	b.n	3df14 <am_hal_iom_blocking_transfer+0x22c>
   3e070:	4b02      	ldr	r3, [pc, #8]	@ (3e07c <am_hal_iom_blocking_transfer+0x394>)
   3e072:	e74f      	b.n	3df14 <am_hal_iom_blocking_transfer+0x22c>
   3e074:	4b02      	ldr	r3, [pc, #8]	@ (3e080 <am_hal_iom_blocking_transfer+0x398>)
   3e076:	e74d      	b.n	3df14 <am_hal_iom_blocking_transfer+0x22c>
   3e078:	0007a120 	.word	0x0007a120
   3e07c:	08000001 	.word	0x08000001
   3e080:	08000002 	.word	0x08000002

0003e084 <am_hal_iom_nonblocking_transfer>:
   3e084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e088:	2800      	cmp	r0, #0
   3e08a:	f000 8081 	beq.w	3e190 <am_hal_iom_nonblocking_transfer+0x10c>
   3e08e:	4604      	mov	r4, r0
   3e090:	6800      	ldr	r0, [r0, #0]
   3e092:	4615      	mov	r5, r2
   3e094:	4a66      	ldr	r2, [pc, #408]	@ (3e230 <am_hal_iom_nonblocking_transfer+0x1ac>)
   3e096:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
   3e09a:	4290      	cmp	r0, r2
   3e09c:	d178      	bne.n	3e190 <am_hal_iom_nonblocking_transfer+0x10c>
   3e09e:	2900      	cmp	r1, #0
   3e0a0:	d07d      	beq.n	3e19e <am_hal_iom_nonblocking_transfer+0x11a>
   3e0a2:	7d0f      	ldrb	r7, [r1, #20]
   3e0a4:	2f01      	cmp	r7, #1
   3e0a6:	d86f      	bhi.n	3e188 <am_hal_iom_nonblocking_transfer+0x104>
   3e0a8:	f8d1 c010 	ldr.w	ip, [r1, #16]
   3e0ac:	f1bc 0f00 	cmp.w	ip, #0
   3e0b0:	d079      	beq.n	3e1a6 <am_hal_iom_nonblocking_transfer+0x122>
   3e0b2:	6848      	ldr	r0, [r1, #4]
   3e0b4:	2805      	cmp	r0, #5
   3e0b6:	d872      	bhi.n	3e19e <am_hal_iom_nonblocking_transfer+0x11a>
   3e0b8:	00c0      	lsls	r0, r0, #3
   3e0ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
   3e0be:	f1a0 0820 	sub.w	r8, r0, #32
   3e0c2:	f1c0 0e20 	rsb	lr, r0, #32
   3e0c6:	fa02 f600 	lsl.w	r6, r2, r0
   3e0ca:	fa02 f808 	lsl.w	r8, r2, r8
   3e0ce:	fa22 fe0e 	lsr.w	lr, r2, lr
   3e0d2:	4082      	lsls	r2, r0
   3e0d4:	6888      	ldr	r0, [r1, #8]
   3e0d6:	ea46 0608 	orr.w	r6, r6, r8
   3e0da:	4002      	ands	r2, r0
   3e0dc:	68c8      	ldr	r0, [r1, #12]
   3e0de:	ea46 060e 	orr.w	r6, r6, lr
   3e0e2:	4030      	ands	r0, r6
   3e0e4:	4302      	orrs	r2, r0
   3e0e6:	d15a      	bne.n	3e19e <am_hal_iom_nonblocking_transfer+0x11a>
   3e0e8:	f1bc 0f00 	cmp.w	ip, #0
   3e0ec:	d05f      	beq.n	3e1ae <am_hal_iom_nonblocking_transfer+0x12a>
   3e0ee:	2f00      	cmp	r7, #0
   3e0f0:	d052      	beq.n	3e198 <am_hal_iom_nonblocking_transfer+0x114>
   3e0f2:	69ca      	ldr	r2, [r1, #28]
   3e0f4:	2a00      	cmp	r2, #0
   3e0f6:	d052      	beq.n	3e19e <am_hal_iom_nonblocking_transfer+0x11a>
   3e0f8:	7a22      	ldrb	r2, [r4, #8]
   3e0fa:	2a01      	cmp	r2, #1
   3e0fc:	d003      	beq.n	3e106 <am_hal_iom_nonblocking_transfer+0x82>
   3e0fe:	b92a      	cbnz	r2, 3e10c <am_hal_iom_nonblocking_transfer+0x88>
   3e100:	680a      	ldr	r2, [r1, #0]
   3e102:	2a04      	cmp	r2, #4
   3e104:	d84b      	bhi.n	3e19e <am_hal_iom_nonblocking_transfer+0x11a>
   3e106:	f5bc 5f80 	cmp.w	ip, #4096	@ 0x1000
   3e10a:	d248      	bcs.n	3e19e <am_hal_iom_nonblocking_transfer+0x11a>
   3e10c:	6a48      	ldr	r0, [r1, #36]	@ 0x24
   3e10e:	f010 0fe0 	tst.w	r0, #224	@ 0xe0
   3e112:	d144      	bne.n	3e19e <am_hal_iom_nonblocking_transfer+0x11a>
   3e114:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
   3e116:	f002 32e0 	and.w	r2, r2, #3772834016	@ 0xe0e0e0e0
   3e11a:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
   3e11e:	2a00      	cmp	r2, #0
   3e120:	d13d      	bne.n	3e19e <am_hal_iom_nonblocking_transfer+0x11a>
   3e122:	f8d4 2828 	ldr.w	r2, [r4, #2088]	@ 0x828
   3e126:	b37a      	cbz	r2, 3e188 <am_hal_iom_nonblocking_transfer+0x104>
   3e128:	f894 282c 	ldrb.w	r2, [r4, #2092]	@ 0x82c
   3e12c:	2a02      	cmp	r2, #2
   3e12e:	d02b      	beq.n	3e188 <am_hal_iom_nonblocking_transfer+0x104>
   3e130:	f8d4 6838 	ldr.w	r6, [r4, #2104]	@ 0x838
   3e134:	2e00      	cmp	r6, #0
   3e136:	d03e      	beq.n	3e1b6 <am_hal_iom_nonblocking_transfer+0x132>
   3e138:	bb30      	cbnz	r0, 3e188 <am_hal_iom_nonblocking_transfer+0x104>
   3e13a:	462f      	mov	r7, r5
   3e13c:	463a      	mov	r2, r7
   3e13e:	4620      	mov	r0, r4
   3e140:	f7ff f866 	bl	3d210 <am_hal_iom_CQAddTransaction>
   3e144:	4606      	mov	r6, r0
   3e146:	bb00      	cbnz	r0, 3e18a <am_hal_iom_nonblocking_transfer+0x106>
   3e148:	f7f3 ff3a 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e14c:	1e39      	subs	r1, r7, #0
   3e14e:	bf18      	it	ne
   3e150:	2101      	movne	r1, #1
   3e152:	4680      	mov	r8, r0
   3e154:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   3e158:	f000 fdc6 	bl	3ece8 <am_hal_cmdq_post_block>
   3e15c:	4606      	mov	r6, r0
   3e15e:	2800      	cmp	r0, #0
   3e160:	d137      	bne.n	3e1d2 <am_hal_iom_nonblocking_transfer+0x14e>
   3e162:	f8d4 3830 	ldr.w	r3, [r4, #2096]	@ 0x830
   3e166:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   3e168:	3301      	adds	r3, #1
   3e16a:	f8c4 3830 	str.w	r3, [r4, #2096]	@ 0x830
   3e16e:	1c53      	adds	r3, r2, #1
   3e170:	6263      	str	r3, [r4, #36]	@ 0x24
   3e172:	2d00      	cmp	r5, #0
   3e174:	d051      	beq.n	3e21a <am_hal_iom_nonblocking_transfer+0x196>
   3e176:	f884 082d 	strb.w	r0, [r4, #2093]	@ 0x82d
   3e17a:	f8c4 085c 	str.w	r0, [r4, #2140]	@ 0x85c
   3e17e:	b36a      	cbz	r2, 3e1dc <am_hal_iom_nonblocking_transfer+0x158>
   3e180:	4640      	mov	r0, r8
   3e182:	f7f3 ff21 	bl	31fc8 <am_hal_interrupt_master_set>
   3e186:	e000      	b.n	3e18a <am_hal_iom_nonblocking_transfer+0x106>
   3e188:	2607      	movs	r6, #7
   3e18a:	4630      	mov	r0, r6
   3e18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3e190:	2602      	movs	r6, #2
   3e192:	4630      	mov	r0, r6
   3e194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3e198:	698a      	ldr	r2, [r1, #24]
   3e19a:	2a00      	cmp	r2, #0
   3e19c:	d1ac      	bne.n	3e0f8 <am_hal_iom_nonblocking_transfer+0x74>
   3e19e:	2606      	movs	r6, #6
   3e1a0:	4630      	mov	r0, r6
   3e1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3e1a6:	f881 c014 	strb.w	ip, [r1, #20]
   3e1aa:	4667      	mov	r7, ip
   3e1ac:	e781      	b.n	3e0b2 <am_hal_iom_nonblocking_transfer+0x2e>
   3e1ae:	7a22      	ldrb	r2, [r4, #8]
   3e1b0:	2a01      	cmp	r2, #1
   3e1b2:	d1a4      	bne.n	3e0fe <am_hal_iom_nonblocking_transfer+0x7a>
   3e1b4:	e7aa      	b.n	3e10c <am_hal_iom_nonblocking_transfer+0x88>
   3e1b6:	2d00      	cmp	r5, #0
   3e1b8:	d1bf      	bne.n	3e13a <am_hal_iom_nonblocking_transfer+0xb6>
   3e1ba:	2a00      	cmp	r2, #0
   3e1bc:	d1bd      	bne.n	3e13a <am_hal_iom_nonblocking_transfer+0xb6>
   3e1be:	f8d4 0858 	ldr.w	r0, [r4, #2136]	@ 0x858
   3e1c2:	f8d4 285c 	ldr.w	r2, [r4, #2140]	@ 0x85c
   3e1c6:	4f1b      	ldr	r7, [pc, #108]	@ (3e234 <am_hal_iom_nonblocking_transfer+0x1b0>)
   3e1c8:	ebb2 0f50 	cmp.w	r2, r0, lsr #1
   3e1cc:	bf38      	it	cc
   3e1ce:	2700      	movcc	r7, #0
   3e1d0:	e7b4      	b.n	3e13c <am_hal_iom_nonblocking_transfer+0xb8>
   3e1d2:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   3e1d6:	f000 fd6f 	bl	3ecb8 <am_hal_cmdq_release_block>
   3e1da:	e7d1      	b.n	3e180 <am_hal_iom_nonblocking_transfer+0xfc>
   3e1dc:	6863      	ldr	r3, [r4, #4]
   3e1de:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3e1e2:	3350      	adds	r3, #80	@ 0x50
   3e1e4:	031b      	lsls	r3, r3, #12
   3e1e6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
   3e1ea:	f8d3 0200 	ldr.w	r0, [r3, #512]	@ 0x200
   3e1ee:	6160      	str	r0, [r4, #20]
   3e1f0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   3e1f4:	f646 227c 	movw	r2, #27260	@ 0x6a7c
   3e1f8:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
   3e1fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
   3e200:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   3e202:	b92a      	cbnz	r2, 3e210 <am_hal_iom_nonblocking_transfer+0x18c>
   3e204:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
   3e208:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
   3e20c:	e9c2 3200 	strd	r3, r2, [r2]
   3e210:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
   3e214:	f000 fca0 	bl	3eb58 <am_hal_cmdq_enable>
   3e218:	e7b2      	b.n	3e180 <am_hal_iom_nonblocking_transfer+0xfc>
   3e21a:	b117      	cbz	r7, 3e222 <am_hal_iom_nonblocking_transfer+0x19e>
   3e21c:	f8c4 085c 	str.w	r0, [r4, #2140]	@ 0x85c
   3e220:	e7ad      	b.n	3e17e <am_hal_iom_nonblocking_transfer+0xfa>
   3e222:	f8d4 385c 	ldr.w	r3, [r4, #2140]	@ 0x85c
   3e226:	3301      	adds	r3, #1
   3e228:	f8c4 385c 	str.w	r3, [r4, #2140]	@ 0x85c
   3e22c:	e7a7      	b.n	3e17e <am_hal_iom_nonblocking_transfer+0xfa>
   3e22e:	bf00      	nop
   3e230:	01123456 	.word	0x01123456
   3e234:	0003cb91 	.word	0x0003cb91

0003e238 <am_hal_rtc_osc_disable>:
   3e238:	4a03      	ldr	r2, [pc, #12]	@ (3e248 <am_hal_rtc_osc_disable+0x10>)
   3e23a:	6813      	ldr	r3, [r2, #0]
   3e23c:	f043 0310 	orr.w	r3, r3, #16
   3e240:	2000      	movs	r0, #0
   3e242:	6013      	str	r3, [r2, #0]
   3e244:	4770      	bx	lr
   3e246:	bf00      	nop
   3e248:	40004800 	.word	0x40004800

0003e24c <nonblocking_read_sm.part.0>:
   3e24c:	b530      	push	{r4, r5, lr}
   3e24e:	b083      	sub	sp, #12
   3e250:	4605      	mov	r5, r0
   3e252:	f7f3 feb5 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e256:	9001      	str	r0, [sp, #4]
   3e258:	e9d5 100d 	ldrd	r1, r0, [r5, #52]	@ 0x34
   3e25c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
   3e25e:	f895 4098 	ldrb.w	r4, [r5, #152]	@ 0x98
   3e262:	1ac0      	subs	r0, r0, r3
   3e264:	4419      	add	r1, r3
   3e266:	2c00      	cmp	r4, #0
   3e268:	d12e      	bne.n	3e2c8 <nonblocking_read_sm.part.0+0x7c>
   3e26a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
   3e26c:	2800      	cmp	r0, #0
   3e26e:	d045      	beq.n	3e2fc <nonblocking_read_sm.part.0+0xb0>
   3e270:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
   3e274:	321c      	adds	r2, #28
   3e276:	0312      	lsls	r2, r2, #12
   3e278:	3901      	subs	r1, #1
   3e27a:	e008      	b.n	3e28e <nonblocking_read_sm.part.0+0x42>
   3e27c:	6813      	ldr	r3, [r2, #0]
   3e27e:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   3e282:	d107      	bne.n	3e294 <nonblocking_read_sm.part.0+0x48>
   3e284:	3401      	adds	r4, #1
   3e286:	42a0      	cmp	r0, r4
   3e288:	f801 3f01 	strb.w	r3, [r1, #1]!
   3e28c:	d002      	beq.n	3e294 <nonblocking_read_sm.part.0+0x48>
   3e28e:	6993      	ldr	r3, [r2, #24]
   3e290:	06db      	lsls	r3, r3, #27
   3e292:	d5f3      	bpl.n	3e27c <nonblocking_read_sm.part.0+0x30>
   3e294:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
   3e296:	4423      	add	r3, r4
   3e298:	652b      	str	r3, [r5, #80]	@ 0x50
   3e29a:	9801      	ldr	r0, [sp, #4]
   3e29c:	f7f3 fe94 	bl	31fc8 <am_hal_interrupt_master_set>
   3e2a0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
   3e2a2:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
   3e2a4:	601a      	str	r2, [r3, #0]
   3e2a6:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
   3e2a8:	6bab      	ldr	r3, [r5, #56]	@ 0x38
   3e2aa:	429a      	cmp	r2, r3
   3e2ac:	d001      	beq.n	3e2b2 <nonblocking_read_sm.part.0+0x66>
   3e2ae:	b003      	add	sp, #12
   3e2b0:	bd30      	pop	{r4, r5, pc}
   3e2b2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
   3e2b4:	2000      	movs	r0, #0
   3e2b6:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
   3e2ba:	2b00      	cmp	r3, #0
   3e2bc:	d0f7      	beq.n	3e2ae <nonblocking_read_sm.part.0+0x62>
   3e2be:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
   3e2c0:	b003      	add	sp, #12
   3e2c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3e2c6:	4718      	bx	r3
   3e2c8:	f8d5 40a4 	ldr.w	r4, [r5, #164]	@ 0xa4
   3e2cc:	4284      	cmp	r4, r0
   3e2ce:	bf28      	it	cs
   3e2d0:	4604      	movcs	r4, r0
   3e2d2:	4622      	mov	r2, r4
   3e2d4:	f105 009c 	add.w	r0, r5, #156	@ 0x9c
   3e2d8:	f000 fe14 	bl	3ef04 <am_hal_queue_item_get>
   3e2dc:	2800      	cmp	r0, #0
   3e2de:	d1d9      	bne.n	3e294 <nonblocking_read_sm.part.0+0x48>
   3e2e0:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
   3e2e2:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
   3e2e6:	2b00      	cmp	r3, #0
   3e2e8:	d0d4      	beq.n	3e294 <nonblocking_read_sm.part.0+0x48>
   3e2ea:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
   3e2ec:	2001      	movs	r0, #1
   3e2ee:	4798      	blx	r3
   3e2f0:	9801      	ldr	r0, [sp, #4]
   3e2f2:	b003      	add	sp, #12
   3e2f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3e2f8:	f7f3 be66 	b.w	31fc8 <am_hal_interrupt_master_set>
   3e2fc:	4604      	mov	r4, r0
   3e2fe:	e7c9      	b.n	3e294 <nonblocking_read_sm.part.0+0x48>

0003e300 <nonblocking_write_sm>:
   3e300:	b570      	push	{r4, r5, r6, lr}
   3e302:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
   3e306:	b084      	sub	sp, #16
   3e308:	4604      	mov	r4, r0
   3e30a:	b963      	cbnz	r3, 3e326 <nonblocking_write_sm+0x26>
   3e30c:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
   3e310:	2b00      	cmp	r3, #0
   3e312:	d130      	bne.n	3e376 <nonblocking_write_sm+0x76>
   3e314:	6e63      	ldr	r3, [r4, #100]	@ 0x64
   3e316:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
   3e318:	601a      	str	r2, [r3, #0]
   3e31a:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
   3e31c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
   3e31e:	429a      	cmp	r2, r3
   3e320:	d04e      	beq.n	3e3c0 <nonblocking_write_sm+0xc0>
   3e322:	b004      	add	sp, #16
   3e324:	bd70      	pop	{r4, r5, r6, pc}
   3e326:	f7f3 fe4b 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e32a:	e9d4 1517 	ldrd	r1, r5, [r4, #92]	@ 0x5c
   3e32e:	9002      	str	r0, [sp, #8]
   3e330:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
   3e332:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
   3e336:	1aad      	subs	r5, r5, r2
   3e338:	4411      	add	r1, r2
   3e33a:	2b00      	cmp	r3, #0
   3e33c:	d14f      	bne.n	3e3de <nonblocking_write_sm+0xde>
   3e33e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
   3e340:	b17d      	cbz	r5, 3e362 <nonblocking_write_sm+0x62>
   3e342:	f500 2080 	add.w	r0, r0, #262144	@ 0x40000
   3e346:	301c      	adds	r0, #28
   3e348:	0300      	lsls	r0, r0, #12
   3e34a:	3901      	subs	r1, #1
   3e34c:	e005      	b.n	3e35a <nonblocking_write_sm+0x5a>
   3e34e:	3301      	adds	r3, #1
   3e350:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   3e354:	6002      	str	r2, [r0, #0]
   3e356:	429d      	cmp	r5, r3
   3e358:	d003      	beq.n	3e362 <nonblocking_write_sm+0x62>
   3e35a:	6982      	ldr	r2, [r0, #24]
   3e35c:	0696      	lsls	r6, r2, #26
   3e35e:	d5f6      	bpl.n	3e34e <nonblocking_write_sm+0x4e>
   3e360:	461d      	mov	r5, r3
   3e362:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
   3e364:	442b      	add	r3, r5
   3e366:	67a3      	str	r3, [r4, #120]	@ 0x78
   3e368:	9802      	ldr	r0, [sp, #8]
   3e36a:	f7f3 fe2d 	bl	31fc8 <am_hal_interrupt_master_set>
   3e36e:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
   3e372:	2b00      	cmp	r3, #0
   3e374:	d0ce      	beq.n	3e314 <nonblocking_write_sm+0x14>
   3e376:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   3e378:	f7f3 fe22 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e37c:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   3e380:	351c      	adds	r5, #28
   3e382:	9003      	str	r0, [sp, #12]
   3e384:	032d      	lsls	r5, r5, #12
   3e386:	f104 0680 	add.w	r6, r4, #128	@ 0x80
   3e38a:	e00d      	b.n	3e3a8 <nonblocking_write_sm+0xa8>
   3e38c:	f000 fdba 	bl	3ef04 <am_hal_queue_item_get>
   3e390:	b190      	cbz	r0, 3e3b8 <nonblocking_write_sm+0xb8>
   3e392:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   3e394:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
   3e398:	321c      	adds	r2, #28
   3e39a:	0312      	lsls	r2, r2, #12
   3e39c:	6993      	ldr	r3, [r2, #24]
   3e39e:	0699      	lsls	r1, r3, #26
   3e3a0:	bf5c      	itt	pl
   3e3a2:	f89d 3007 	ldrbpl.w	r3, [sp, #7]
   3e3a6:	6013      	strpl	r3, [r2, #0]
   3e3a8:	69ab      	ldr	r3, [r5, #24]
   3e3aa:	069b      	lsls	r3, r3, #26
   3e3ac:	f04f 0201 	mov.w	r2, #1
   3e3b0:	f10d 0107 	add.w	r1, sp, #7
   3e3b4:	4630      	mov	r0, r6
   3e3b6:	d5e9      	bpl.n	3e38c <nonblocking_write_sm+0x8c>
   3e3b8:	9803      	ldr	r0, [sp, #12]
   3e3ba:	f7f3 fe05 	bl	31fc8 <am_hal_interrupt_master_set>
   3e3be:	e7a9      	b.n	3e314 <nonblocking_write_sm+0x14>
   3e3c0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
   3e3c4:	2b00      	cmp	r3, #0
   3e3c6:	d0ac      	beq.n	3e322 <nonblocking_write_sm+0x22>
   3e3c8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
   3e3ca:	2000      	movs	r0, #0
   3e3cc:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
   3e3d0:	2b00      	cmp	r3, #0
   3e3d2:	d0a6      	beq.n	3e322 <nonblocking_write_sm+0x22>
   3e3d4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
   3e3d6:	b004      	add	sp, #16
   3e3d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3e3dc:	4718      	bx	r3
   3e3de:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
   3e3e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
   3e3e6:	1a9b      	subs	r3, r3, r2
   3e3e8:	429d      	cmp	r5, r3
   3e3ea:	bf28      	it	cs
   3e3ec:	461d      	movcs	r5, r3
   3e3ee:	462a      	mov	r2, r5
   3e3f0:	f104 0080 	add.w	r0, r4, #128	@ 0x80
   3e3f4:	f000 fd46 	bl	3ee84 <am_hal_queue_item_add>
   3e3f8:	2800      	cmp	r0, #0
   3e3fa:	d1b2      	bne.n	3e362 <nonblocking_write_sm+0x62>
   3e3fc:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
   3e3fe:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
   3e402:	2b00      	cmp	r3, #0
   3e404:	d0ad      	beq.n	3e362 <nonblocking_write_sm+0x62>
   3e406:	6f21      	ldr	r1, [r4, #112]	@ 0x70
   3e408:	2001      	movs	r0, #1
   3e40a:	4798      	blx	r3
   3e40c:	9802      	ldr	r0, [sp, #8]
   3e40e:	b004      	add	sp, #16
   3e410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3e414:	f7f3 bdd8 	b.w	31fc8 <am_hal_interrupt_master_set>

0003e418 <am_hal_uart_initialize>:
   3e418:	2803      	cmp	r0, #3
   3e41a:	d82a      	bhi.n	3e472 <am_hal_uart_initialize+0x5a>
   3e41c:	b369      	cbz	r1, 3e47a <am_hal_uart_initialize+0x62>
   3e41e:	680b      	ldr	r3, [r1, #0]
   3e420:	b12b      	cbz	r3, 3e42e <am_hal_uart_initialize+0x16>
   3e422:	681b      	ldr	r3, [r3, #0]
   3e424:	4a16      	ldr	r2, [pc, #88]	@ (3e480 <am_hal_uart_initialize+0x68>)
   3e426:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3e42a:	4293      	cmp	r3, r2
   3e42c:	d023      	beq.n	3e476 <am_hal_uart_initialize+0x5e>
   3e42e:	b410      	push	{r4}
   3e430:	22b8      	movs	r2, #184	@ 0xb8
   3e432:	4c14      	ldr	r4, [pc, #80]	@ (3e484 <am_hal_uart_initialize+0x6c>)
   3e434:	fb00 f202 	mul.w	r2, r0, r2
   3e438:	18a3      	adds	r3, r4, r2
   3e43a:	6258      	str	r0, [r3, #36]	@ 0x24
   3e43c:	58a0      	ldr	r0, [r4, r2]
   3e43e:	f000 4c7e 	and.w	ip, r0, #4261412864	@ 0xfe000000
   3e442:	480f      	ldr	r0, [pc, #60]	@ (3e480 <am_hal_uart_initialize+0x68>)
   3e444:	ea4c 0000 	orr.w	r0, ip, r0
   3e448:	50a0      	str	r0, [r4, r2]
   3e44a:	2000      	movs	r0, #0
   3e44c:	2201      	movs	r2, #1
   3e44e:	6798      	str	r0, [r3, #120]	@ 0x78
   3e450:	7118      	strb	r0, [r3, #4]
   3e452:	6518      	str	r0, [r3, #80]	@ 0x50
   3e454:	6298      	str	r0, [r3, #40]	@ 0x28
   3e456:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c
   3e45a:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
   3e45e:	f883 007c 	strb.w	r0, [r3, #124]	@ 0x7c
   3e462:	f883 0098 	strb.w	r0, [r3, #152]	@ 0x98
   3e466:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
   3e46a:	f85d 4b04 	ldr.w	r4, [sp], #4
   3e46e:	600b      	str	r3, [r1, #0]
   3e470:	4770      	bx	lr
   3e472:	2005      	movs	r0, #5
   3e474:	4770      	bx	lr
   3e476:	2007      	movs	r0, #7
   3e478:	4770      	bx	lr
   3e47a:	2006      	movs	r0, #6
   3e47c:	4770      	bx	lr
   3e47e:	bf00      	nop
   3e480:	01ea9e06 	.word	0x01ea9e06
   3e484:	1005d5fc 	.word	0x1005d5fc

0003e488 <am_hal_uart_deinitialize>:
   3e488:	b168      	cbz	r0, 3e4a6 <am_hal_uart_deinitialize+0x1e>
   3e48a:	6802      	ldr	r2, [r0, #0]
   3e48c:	4b07      	ldr	r3, [pc, #28]	@ (3e4ac <am_hal_uart_deinitialize+0x24>)
   3e48e:	f022 417e 	bic.w	r1, r2, #4261412864	@ 0xfe000000
   3e492:	4299      	cmp	r1, r3
   3e494:	d107      	bne.n	3e4a6 <am_hal_uart_deinitialize+0x1e>
   3e496:	2300      	movs	r3, #0
   3e498:	f002 427e 	and.w	r2, r2, #4261412864	@ 0xfe000000
   3e49c:	6243      	str	r3, [r0, #36]	@ 0x24
   3e49e:	6002      	str	r2, [r0, #0]
   3e4a0:	7103      	strb	r3, [r0, #4]
   3e4a2:	4618      	mov	r0, r3
   3e4a4:	4770      	bx	lr
   3e4a6:	2002      	movs	r0, #2
   3e4a8:	4770      	bx	lr
   3e4aa:	bf00      	nop
   3e4ac:	01ea9e06 	.word	0x01ea9e06

0003e4b0 <am_hal_uart_power_control>:
   3e4b0:	b530      	push	{r4, r5, lr}
   3e4b2:	4604      	mov	r4, r0
   3e4b4:	482b      	ldr	r0, [pc, #172]	@ (3e564 <am_hal_uart_power_control+0xb4>)
   3e4b6:	6823      	ldr	r3, [r4, #0]
   3e4b8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3e4bc:	4283      	cmp	r3, r0
   3e4be:	b083      	sub	sp, #12
   3e4c0:	d145      	bne.n	3e54e <am_hal_uart_power_control+0x9e>
   3e4c2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
   3e4c4:	f105 0009 	add.w	r0, r5, #9
   3e4c8:	b2c0      	uxtb	r0, r0
   3e4ca:	b309      	cbz	r1, 3e510 <am_hal_uart_power_control+0x60>
   3e4cc:	3901      	subs	r1, #1
   3e4ce:	2901      	cmp	r1, #1
   3e4d0:	d83a      	bhi.n	3e548 <am_hal_uart_power_control+0x98>
   3e4d2:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   3e4d6:	351c      	adds	r5, #28
   3e4d8:	032d      	lsls	r5, r5, #12
   3e4da:	b17a      	cbz	r2, 3e4fc <am_hal_uart_power_control+0x4c>
   3e4dc:	6a2a      	ldr	r2, [r5, #32]
   3e4de:	60a2      	str	r2, [r4, #8]
   3e4e0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
   3e4e2:	60e2      	str	r2, [r4, #12]
   3e4e4:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
   3e4e6:	6122      	str	r2, [r4, #16]
   3e4e8:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
   3e4ea:	6162      	str	r2, [r4, #20]
   3e4ec:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
   3e4ee:	61a2      	str	r2, [r4, #24]
   3e4f0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
   3e4f2:	61e2      	str	r2, [r4, #28]
   3e4f4:	2301      	movs	r3, #1
   3e4f6:	6baa      	ldr	r2, [r5, #56]	@ 0x38
   3e4f8:	6222      	str	r2, [r4, #32]
   3e4fa:	7123      	strb	r3, [r4, #4]
   3e4fc:	2400      	movs	r4, #0
   3e4fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
   3e502:	646b      	str	r3, [r5, #68]	@ 0x44
   3e504:	632c      	str	r4, [r5, #48]	@ 0x30
   3e506:	f7f4 f9cd 	bl	328a4 <am_hal_pwrctrl_periph_disable>
   3e50a:	4620      	mov	r0, r4
   3e50c:	b003      	add	sp, #12
   3e50e:	bd30      	pop	{r4, r5, pc}
   3e510:	b302      	cbz	r2, 3e554 <am_hal_uart_power_control+0xa4>
   3e512:	7923      	ldrb	r3, [r4, #4]
   3e514:	b323      	cbz	r3, 3e560 <am_hal_uart_power_control+0xb0>
   3e516:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   3e51a:	9101      	str	r1, [sp, #4]
   3e51c:	351c      	adds	r5, #28
   3e51e:	f7f4 f8f1 	bl	32704 <am_hal_pwrctrl_periph_enable>
   3e522:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   3e526:	032d      	lsls	r5, r5, #12
   3e528:	9901      	ldr	r1, [sp, #4]
   3e52a:	622a      	str	r2, [r5, #32]
   3e52c:	626b      	str	r3, [r5, #36]	@ 0x24
   3e52e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   3e532:	62aa      	str	r2, [r5, #40]	@ 0x28
   3e534:	62eb      	str	r3, [r5, #44]	@ 0x2c
   3e536:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   3e53a:	632a      	str	r2, [r5, #48]	@ 0x30
   3e53c:	636b      	str	r3, [r5, #52]	@ 0x34
   3e53e:	6a23      	ldr	r3, [r4, #32]
   3e540:	63ab      	str	r3, [r5, #56]	@ 0x38
   3e542:	4608      	mov	r0, r1
   3e544:	7121      	strb	r1, [r4, #4]
   3e546:	e000      	b.n	3e54a <am_hal_uart_power_control+0x9a>
   3e548:	2006      	movs	r0, #6
   3e54a:	b003      	add	sp, #12
   3e54c:	bd30      	pop	{r4, r5, pc}
   3e54e:	2002      	movs	r0, #2
   3e550:	b003      	add	sp, #12
   3e552:	bd30      	pop	{r4, r5, pc}
   3e554:	9201      	str	r2, [sp, #4]
   3e556:	f7f4 f8d5 	bl	32704 <am_hal_pwrctrl_periph_enable>
   3e55a:	9a01      	ldr	r2, [sp, #4]
   3e55c:	4610      	mov	r0, r2
   3e55e:	e7f4      	b.n	3e54a <am_hal_uart_power_control+0x9a>
   3e560:	2007      	movs	r0, #7
   3e562:	e7f2      	b.n	3e54a <am_hal_uart_power_control+0x9a>
   3e564:	01ea9e06 	.word	0x01ea9e06

0003e568 <am_hal_uart_configure>:
   3e568:	6803      	ldr	r3, [r0, #0]
   3e56a:	4a50      	ldr	r2, [pc, #320]	@ (3e6ac <am_hal_uart_configure+0x144>)
   3e56c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3e570:	4293      	cmp	r3, r2
   3e572:	b470      	push	{r4, r5, r6}
   3e574:	f040 808f 	bne.w	3e696 <am_hal_uart_configure+0x12e>
   3e578:	6a43      	ldr	r3, [r0, #36]	@ 0x24
   3e57a:	4d4d      	ldr	r5, [pc, #308]	@ (3e6b0 <am_hal_uart_configure+0x148>)
   3e57c:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3e580:	331c      	adds	r3, #28
   3e582:	031b      	lsls	r3, r3, #12
   3e584:	2200      	movs	r2, #0
   3e586:	631a      	str	r2, [r3, #48]	@ 0x30
   3e588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e58a:	f042 0208 	orr.w	r2, r2, #8
   3e58e:	631a      	str	r2, [r3, #48]	@ 0x30
   3e590:	680c      	ldr	r4, [r1, #0]
   3e592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e594:	42ac      	cmp	r4, r5
   3e596:	bf8c      	ite	hi
   3e598:	2505      	movhi	r5, #5
   3e59a:	2501      	movls	r5, #1
   3e59c:	f365 1206 	bfi	r2, r5, #4, #3
   3e5a0:	631a      	str	r2, [r3, #48]	@ 0x30
   3e5a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e5a4:	f36f 0200 	bfc	r2, #0, #1
   3e5a8:	631a      	str	r2, [r3, #48]	@ 0x30
   3e5aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e5ac:	f36f 2249 	bfc	r2, #9, #1
   3e5b0:	631a      	str	r2, [r3, #48]	@ 0x30
   3e5b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e5b4:	f36f 2208 	bfc	r2, #8, #1
   3e5b8:	631a      	str	r2, [r3, #48]	@ 0x30
   3e5ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e5bc:	f3c2 1202 	ubfx	r2, r2, #4, #3
   3e5c0:	3a01      	subs	r2, #1
   3e5c2:	b2d2      	uxtb	r2, r2
   3e5c4:	2a04      	cmp	r2, #4
   3e5c6:	d860      	bhi.n	3e68a <am_hal_uart_configure+0x122>
   3e5c8:	4d3a      	ldr	r5, [pc, #232]	@ (3e6b4 <am_hal_uart_configure+0x14c>)
   3e5ca:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
   3e5ce:	0124      	lsls	r4, r4, #4
   3e5d0:	42a5      	cmp	r5, r4
   3e5d2:	ea4f 1285 	mov.w	r2, r5, lsl #6
   3e5d6:	fbb5 f6f4 	udiv	r6, r5, r4
   3e5da:	fbb2 f2f4 	udiv	r2, r2, r4
   3e5de:	eba2 1286 	sub.w	r2, r2, r6, lsl #6
   3e5e2:	d35e      	bcc.n	3e6a2 <am_hal_uart_configure+0x13a>
   3e5e4:	625e      	str	r6, [r3, #36]	@ 0x24
   3e5e6:	629a      	str	r2, [r3, #40]	@ 0x28
   3e5e8:	0892      	lsrs	r2, r2, #2
   3e5ea:	eb02 1206 	add.w	r2, r2, r6, lsl #4
   3e5ee:	fbb5 f2f2 	udiv	r2, r5, r2
   3e5f2:	6282      	str	r2, [r0, #40]	@ 0x28
   3e5f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e5f6:	f36f 328e 	bfc	r2, #14, #1
   3e5fa:	631a      	str	r2, [r3, #48]	@ 0x30
   3e5fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e5fe:	f36f 32cf 	bfc	r2, #15, #1
   3e602:	631a      	str	r2, [r3, #48]	@ 0x30
   3e604:	6b18      	ldr	r0, [r3, #48]	@ 0x30
   3e606:	890a      	ldrh	r2, [r1, #8]
   3e608:	4302      	orrs	r2, r0
   3e60a:	631a      	str	r2, [r3, #48]	@ 0x30
   3e60c:	794a      	ldrb	r2, [r1, #5]
   3e60e:	2a00      	cmp	r2, #0
   3e610:	d045      	beq.n	3e69e <am_hal_uart_configure+0x136>
   3e612:	2a01      	cmp	r2, #1
   3e614:	d000      	beq.n	3e618 <am_hal_uart_configure+0xb0>
   3e616:	2200      	movs	r2, #0
   3e618:	4614      	mov	r4, r2
   3e61a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
   3e61c:	f36f 0000 	bfc	r0, #0, #1
   3e620:	62d8      	str	r0, [r3, #44]	@ 0x2c
   3e622:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
   3e624:	f364 0041 	bfi	r0, r4, #1, #1
   3e628:	62d8      	str	r0, [r3, #44]	@ 0x2c
   3e62a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
   3e62c:	f362 0082 	bfi	r0, r2, #2, #1
   3e630:	62d8      	str	r0, [r3, #44]	@ 0x2c
   3e632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   3e634:	7988      	ldrb	r0, [r1, #6]
   3e636:	f360 02c3 	bfi	r2, r0, #3, #1
   3e63a:	62da      	str	r2, [r3, #44]	@ 0x2c
   3e63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   3e63e:	f042 0210 	orr.w	r2, r2, #16
   3e642:	62da      	str	r2, [r3, #44]	@ 0x2c
   3e644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   3e646:	7908      	ldrb	r0, [r1, #4]
   3e648:	f360 1246 	bfi	r2, r0, #5, #2
   3e64c:	62da      	str	r2, [r3, #44]	@ 0x2c
   3e64e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
   3e650:	f36f 12c7 	bfc	r2, #7, #1
   3e654:	62da      	str	r2, [r3, #44]	@ 0x2c
   3e656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   3e658:	7a88      	ldrb	r0, [r1, #10]
   3e65a:	f360 0202 	bfi	r2, r0, #0, #3
   3e65e:	635a      	str	r2, [r3, #52]	@ 0x34
   3e660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
   3e662:	7ac9      	ldrb	r1, [r1, #11]
   3e664:	f361 02c5 	bfi	r2, r1, #3, #3
   3e668:	635a      	str	r2, [r3, #52]	@ 0x34
   3e66a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e66c:	f042 0201 	orr.w	r2, r2, #1
   3e670:	631a      	str	r2, [r3, #48]	@ 0x30
   3e672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e674:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
   3e678:	631a      	str	r2, [r3, #48]	@ 0x30
   3e67a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
   3e67c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   3e680:	2400      	movs	r4, #0
   3e682:	631a      	str	r2, [r3, #48]	@ 0x30
   3e684:	4620      	mov	r0, r4
   3e686:	bc70      	pop	{r4, r5, r6}
   3e688:	4770      	bx	lr
   3e68a:	2300      	movs	r3, #0
   3e68c:	4c0a      	ldr	r4, [pc, #40]	@ (3e6b8 <am_hal_uart_configure+0x150>)
   3e68e:	6283      	str	r3, [r0, #40]	@ 0x28
   3e690:	4620      	mov	r0, r4
   3e692:	bc70      	pop	{r4, r5, r6}
   3e694:	4770      	bx	lr
   3e696:	2402      	movs	r4, #2
   3e698:	4620      	mov	r0, r4
   3e69a:	bc70      	pop	{r4, r5, r6}
   3e69c:	4770      	bx	lr
   3e69e:	2401      	movs	r4, #1
   3e6a0:	e7bb      	b.n	3e61a <am_hal_uart_configure+0xb2>
   3e6a2:	2300      	movs	r3, #0
   3e6a4:	4c05      	ldr	r4, [pc, #20]	@ (3e6bc <am_hal_uart_configure+0x154>)
   3e6a6:	6283      	str	r3, [r0, #40]	@ 0x28
   3e6a8:	e7f2      	b.n	3e690 <am_hal_uart_configure+0x128>
   3e6aa:	bf00      	nop
   3e6ac:	01ea9e06 	.word	0x01ea9e06
   3e6b0:	0016e360 	.word	0x0016e360
   3e6b4:	00048870 	.word	0x00048870
   3e6b8:	08000002 	.word	0x08000002
   3e6bc:	08000003 	.word	0x08000003

0003e6c0 <am_hal_uart_transfer>:
   3e6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   3e6c2:	780b      	ldrb	r3, [r1, #0]
   3e6c4:	b08f      	sub	sp, #60	@ 0x3c
   3e6c6:	460d      	mov	r5, r1
   3e6c8:	4604      	mov	r4, r0
   3e6ca:	2b03      	cmp	r3, #3
   3e6cc:	f200 819e 	bhi.w	3ea0c <am_hal_uart_transfer+0x34c>
   3e6d0:	e8df f003 	tbb	[pc, r3]
   3e6d4:	023dbb72 	.word	0x023dbb72
   3e6d8:	2800      	cmp	r0, #0
   3e6da:	f000 8131 	beq.w	3e940 <am_hal_uart_transfer+0x280>
   3e6de:	6803      	ldr	r3, [r0, #0]
   3e6e0:	4ab7      	ldr	r2, [pc, #732]	@ (3e9c0 <am_hal_uart_transfer+0x300>)
   3e6e2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3e6e6:	4293      	cmp	r3, r2
   3e6e8:	f040 812a 	bne.w	3e940 <am_hal_uart_transfer+0x280>
   3e6ec:	68cb      	ldr	r3, [r1, #12]
   3e6ee:	b10b      	cbz	r3, 3e6f4 <am_hal_uart_transfer+0x34>
   3e6f0:	2200      	movs	r2, #0
   3e6f2:	601a      	str	r2, [r3, #0]
   3e6f4:	f7f3 fc64 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e6f8:	f894 602c 	ldrb.w	r6, [r4, #44]	@ 0x2c
   3e6fc:	9004      	str	r0, [sp, #16]
   3e6fe:	2e00      	cmp	r6, #0
   3e700:	f040 812f 	bne.w	3e962 <am_hal_uart_transfer+0x2a2>
   3e704:	2301      	movs	r3, #1
   3e706:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
   3e70a:	782b      	ldrb	r3, [r5, #0]
   3e70c:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
   3e710:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   3e714:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
   3e718:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   3e71c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
   3e720:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   3e724:	69eb      	ldr	r3, [r5, #28]
   3e726:	6526      	str	r6, [r4, #80]	@ 0x50
   3e728:	64e3      	str	r3, [r4, #76]	@ 0x4c
   3e72a:	e9c4 1211 	strd	r1, r2, [r4, #68]	@ 0x44
   3e72e:	9804      	ldr	r0, [sp, #16]
   3e730:	f7f3 fc4a 	bl	31fc8 <am_hal_interrupt_master_set>
   3e734:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
   3e738:	2b00      	cmp	r3, #0
   3e73a:	f040 8121 	bne.w	3e980 <am_hal_uart_transfer+0x2c0>
   3e73e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
   3e742:	2b00      	cmp	r3, #0
   3e744:	f040 8109 	bne.w	3e95a <am_hal_uart_transfer+0x29a>
   3e748:	2000      	movs	r0, #0
   3e74a:	b00f      	add	sp, #60	@ 0x3c
   3e74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3e74e:	2800      	cmp	r0, #0
   3e750:	f000 80f6 	beq.w	3e940 <am_hal_uart_transfer+0x280>
   3e754:	6803      	ldr	r3, [r0, #0]
   3e756:	4a9a      	ldr	r2, [pc, #616]	@ (3e9c0 <am_hal_uart_transfer+0x300>)
   3e758:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3e75c:	4293      	cmp	r3, r2
   3e75e:	f040 80ef 	bne.w	3e940 <am_hal_uart_transfer+0x280>
   3e762:	68cb      	ldr	r3, [r1, #12]
   3e764:	b10b      	cbz	r3, 3e76a <am_hal_uart_transfer+0xaa>
   3e766:	2200      	movs	r2, #0
   3e768:	601a      	str	r2, [r3, #0]
   3e76a:	f7f3 fc29 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e76e:	f894 6054 	ldrb.w	r6, [r4, #84]	@ 0x54
   3e772:	9006      	str	r0, [sp, #24]
   3e774:	2e00      	cmp	r6, #0
   3e776:	f040 80f9 	bne.w	3e96c <am_hal_uart_transfer+0x2ac>
   3e77a:	2301      	movs	r3, #1
   3e77c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
   3e780:	782b      	ldrb	r3, [r5, #0]
   3e782:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
   3e786:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   3e78a:	e9c4 2317 	strd	r2, r3, [r4, #92]	@ 0x5c
   3e78e:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   3e792:	e9c4 2319 	strd	r2, r3, [r4, #100]	@ 0x64
   3e796:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   3e79a:	69eb      	ldr	r3, [r5, #28]
   3e79c:	67a6      	str	r6, [r4, #120]	@ 0x78
   3e79e:	f884 60b4 	strb.w	r6, [r4, #180]	@ 0xb4
   3e7a2:	e9c4 121b 	strd	r1, r2, [r4, #108]	@ 0x6c
   3e7a6:	9806      	ldr	r0, [sp, #24]
   3e7a8:	6763      	str	r3, [r4, #116]	@ 0x74
   3e7aa:	f7f3 fc0d 	bl	31fc8 <am_hal_interrupt_master_set>
   3e7ae:	4620      	mov	r0, r4
   3e7b0:	f7ff fda6 	bl	3e300 <nonblocking_write_sm>
   3e7b4:	4630      	mov	r0, r6
   3e7b6:	e0c4      	b.n	3e942 <am_hal_uart_transfer+0x282>
   3e7b8:	2800      	cmp	r0, #0
   3e7ba:	f000 80c1 	beq.w	3e940 <am_hal_uart_transfer+0x280>
   3e7be:	6803      	ldr	r3, [r0, #0]
   3e7c0:	4a7f      	ldr	r2, [pc, #508]	@ (3e9c0 <am_hal_uart_transfer+0x300>)
   3e7c2:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3e7c6:	4293      	cmp	r3, r2
   3e7c8:	f040 80ba 	bne.w	3e940 <am_hal_uart_transfer+0x280>
   3e7cc:	68cb      	ldr	r3, [r1, #12]
   3e7ce:	b10b      	cbz	r3, 3e7d4 <am_hal_uart_transfer+0x114>
   3e7d0:	2200      	movs	r2, #0
   3e7d2:	601a      	str	r2, [r3, #0]
   3e7d4:	f7f3 fbf4 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e7d8:	f894 6054 	ldrb.w	r6, [r4, #84]	@ 0x54
   3e7dc:	9000      	str	r0, [sp, #0]
   3e7de:	2e00      	cmp	r6, #0
   3e7e0:	f040 80b1 	bne.w	3e946 <am_hal_uart_transfer+0x286>
   3e7e4:	2301      	movs	r3, #1
   3e7e6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
   3e7ea:	782b      	ldrb	r3, [r5, #0]
   3e7ec:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
   3e7f0:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   3e7f4:	e9c4 2317 	strd	r2, r3, [r4, #92]	@ 0x5c
   3e7f8:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   3e7fc:	e9c4 2319 	strd	r2, r3, [r4, #100]	@ 0x64
   3e800:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
   3e804:	e9c4 231b 	strd	r2, r3, [r4, #108]	@ 0x6c
   3e808:	69eb      	ldr	r3, [r5, #28]
   3e80a:	67a6      	str	r6, [r4, #120]	@ 0x78
   3e80c:	f884 60b4 	strb.w	r6, [r4, #180]	@ 0xb4
   3e810:	9800      	ldr	r0, [sp, #0]
   3e812:	6763      	str	r3, [r4, #116]	@ 0x74
   3e814:	f7f3 fbd8 	bl	31fc8 <am_hal_interrupt_master_set>
   3e818:	4620      	mov	r0, r4
   3e81a:	f7ff fd71 	bl	3e300 <nonblocking_write_sm>
   3e81e:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
   3e822:	2b00      	cmp	r3, #0
   3e824:	d090      	beq.n	3e748 <am_hal_uart_transfer+0x88>
   3e826:	4620      	mov	r0, r4
   3e828:	f7ff fd6a 	bl	3e300 <nonblocking_write_sm>
   3e82c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   3e830:	f7f4 fe1c 	bl	3346c <am_hal_delay_us>
   3e834:	692b      	ldr	r3, [r5, #16]
   3e836:	1c5a      	adds	r2, r3, #1
   3e838:	d0f1      	beq.n	3e81e <am_hal_uart_transfer+0x15e>
   3e83a:	3601      	adds	r6, #1
   3e83c:	42b3      	cmp	r3, r6
   3e83e:	d1ee      	bne.n	3e81e <am_hal_uart_transfer+0x15e>
   3e840:	2300      	movs	r3, #0
   3e842:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
   3e846:	2004      	movs	r0, #4
   3e848:	e07b      	b.n	3e942 <am_hal_uart_transfer+0x282>
   3e84a:	2800      	cmp	r0, #0
   3e84c:	d078      	beq.n	3e940 <am_hal_uart_transfer+0x280>
   3e84e:	6803      	ldr	r3, [r0, #0]
   3e850:	4a5b      	ldr	r2, [pc, #364]	@ (3e9c0 <am_hal_uart_transfer+0x300>)
   3e852:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3e856:	4293      	cmp	r3, r2
   3e858:	d172      	bne.n	3e940 <am_hal_uart_transfer+0x280>
   3e85a:	68cb      	ldr	r3, [r1, #12]
   3e85c:	b10b      	cbz	r3, 3e862 <am_hal_uart_transfer+0x1a2>
   3e85e:	2200      	movs	r2, #0
   3e860:	601a      	str	r2, [r3, #0]
   3e862:	f7f3 fbad 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e866:	f894 602c 	ldrb.w	r6, [r4, #44]	@ 0x2c
   3e86a:	9001      	str	r0, [sp, #4]
   3e86c:	2e00      	cmp	r6, #0
   3e86e:	f040 8082 	bne.w	3e976 <am_hal_uart_transfer+0x2b6>
   3e872:	2301      	movs	r3, #1
   3e874:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
   3e878:	782b      	ldrb	r3, [r5, #0]
   3e87a:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
   3e87e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
   3e882:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
   3e886:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   3e88a:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
   3e88e:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
   3e892:	e9c4 2311 	strd	r2, r3, [r4, #68]	@ 0x44
   3e896:	69eb      	ldr	r3, [r5, #28]
   3e898:	6526      	str	r6, [r4, #80]	@ 0x50
   3e89a:	64e3      	str	r3, [r4, #76]	@ 0x4c
   3e89c:	9801      	ldr	r0, [sp, #4]
   3e89e:	f7f3 fb93 	bl	31fc8 <am_hal_interrupt_master_set>
   3e8a2:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
   3e8a6:	2b00      	cmp	r3, #0
   3e8a8:	f040 8090 	bne.w	3e9cc <am_hal_uart_transfer+0x30c>
   3e8ac:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
   3e8b0:	2b00      	cmp	r3, #0
   3e8b2:	f43f af49 	beq.w	3e748 <am_hal_uart_transfer+0x88>
   3e8b6:	4620      	mov	r0, r4
   3e8b8:	f7ff fcc8 	bl	3e24c <nonblocking_read_sm.part.0>
   3e8bc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
   3e8c0:	2b00      	cmp	r3, #0
   3e8c2:	f43f af41 	beq.w	3e748 <am_hal_uart_transfer+0x88>
   3e8c6:	2600      	movs	r6, #0
   3e8c8:	f104 079c 	add.w	r7, r4, #156	@ 0x9c
   3e8cc:	e011      	b.n	3e8f2 <am_hal_uart_transfer+0x232>
   3e8ce:	4620      	mov	r0, r4
   3e8d0:	f7ff fcbc 	bl	3e24c <nonblocking_read_sm.part.0>
   3e8d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
   3e8d8:	f7f4 fdc8 	bl	3346c <am_hal_delay_us>
   3e8dc:	692b      	ldr	r3, [r5, #16]
   3e8de:	1c5a      	adds	r2, r3, #1
   3e8e0:	d002      	beq.n	3e8e8 <am_hal_uart_transfer+0x228>
   3e8e2:	3601      	adds	r6, #1
   3e8e4:	42b3      	cmp	r3, r6
   3e8e6:	d033      	beq.n	3e950 <am_hal_uart_transfer+0x290>
   3e8e8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
   3e8ec:	2b00      	cmp	r3, #0
   3e8ee:	f43f af2b 	beq.w	3e748 <am_hal_uart_transfer+0x88>
   3e8f2:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
   3e8f6:	2b00      	cmp	r3, #0
   3e8f8:	d0e9      	beq.n	3e8ce <am_hal_uart_transfer+0x20e>
   3e8fa:	f7f3 fb61 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e8fe:	9003      	str	r0, [sp, #12]
   3e900:	6a60      	ldr	r0, [r4, #36]	@ 0x24
   3e902:	f500 2080 	add.w	r0, r0, #262144	@ 0x40000
   3e906:	301c      	adds	r0, #28
   3e908:	0300      	lsls	r0, r0, #12
   3e90a:	a906      	add	r1, sp, #24
   3e90c:	2200      	movs	r2, #0
   3e90e:	6983      	ldr	r3, [r0, #24]
   3e910:	06db      	lsls	r3, r3, #27
   3e912:	d409      	bmi.n	3e928 <am_hal_uart_transfer+0x268>
   3e914:	6803      	ldr	r3, [r0, #0]
   3e916:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   3e91a:	f102 0201 	add.w	r2, r2, #1
   3e91e:	d107      	bne.n	3e930 <am_hal_uart_transfer+0x270>
   3e920:	2a20      	cmp	r2, #32
   3e922:	f801 3b01 	strb.w	r3, [r1], #1
   3e926:	d1f2      	bne.n	3e90e <am_hal_uart_transfer+0x24e>
   3e928:	a906      	add	r1, sp, #24
   3e92a:	4638      	mov	r0, r7
   3e92c:	f000 faaa 	bl	3ee84 <am_hal_queue_item_add>
   3e930:	9803      	ldr	r0, [sp, #12]
   3e932:	f7f3 fb49 	bl	31fc8 <am_hal_interrupt_master_set>
   3e936:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
   3e93a:	2b00      	cmp	r3, #0
   3e93c:	d0ca      	beq.n	3e8d4 <am_hal_uart_transfer+0x214>
   3e93e:	e7c6      	b.n	3e8ce <am_hal_uart_transfer+0x20e>
   3e940:	2002      	movs	r0, #2
   3e942:	b00f      	add	sp, #60	@ 0x3c
   3e944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3e946:	9800      	ldr	r0, [sp, #0]
   3e948:	f7f3 fb3e 	bl	31fc8 <am_hal_interrupt_master_set>
   3e94c:	481d      	ldr	r0, [pc, #116]	@ (3e9c4 <am_hal_uart_transfer+0x304>)
   3e94e:	e7f8      	b.n	3e942 <am_hal_uart_transfer+0x282>
   3e950:	2300      	movs	r3, #0
   3e952:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
   3e956:	2004      	movs	r0, #4
   3e958:	e7f3      	b.n	3e942 <am_hal_uart_transfer+0x282>
   3e95a:	4620      	mov	r0, r4
   3e95c:	f7ff fc76 	bl	3e24c <nonblocking_read_sm.part.0>
   3e960:	e6f2      	b.n	3e748 <am_hal_uart_transfer+0x88>
   3e962:	9804      	ldr	r0, [sp, #16]
   3e964:	f7f3 fb30 	bl	31fc8 <am_hal_interrupt_master_set>
   3e968:	4817      	ldr	r0, [pc, #92]	@ (3e9c8 <am_hal_uart_transfer+0x308>)
   3e96a:	e7ea      	b.n	3e942 <am_hal_uart_transfer+0x282>
   3e96c:	9806      	ldr	r0, [sp, #24]
   3e96e:	f7f3 fb2b 	bl	31fc8 <am_hal_interrupt_master_set>
   3e972:	4814      	ldr	r0, [pc, #80]	@ (3e9c4 <am_hal_uart_transfer+0x304>)
   3e974:	e7e5      	b.n	3e942 <am_hal_uart_transfer+0x282>
   3e976:	9801      	ldr	r0, [sp, #4]
   3e978:	f7f3 fb26 	bl	31fc8 <am_hal_interrupt_master_set>
   3e97c:	4812      	ldr	r0, [pc, #72]	@ (3e9c8 <am_hal_uart_transfer+0x308>)
   3e97e:	e7e0      	b.n	3e942 <am_hal_uart_transfer+0x282>
   3e980:	f7f3 fb1e 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e984:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   3e986:	9005      	str	r0, [sp, #20]
   3e988:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3e98c:	331c      	adds	r3, #28
   3e98e:	a906      	add	r1, sp, #24
   3e990:	0318      	lsls	r0, r3, #12
   3e992:	460d      	mov	r5, r1
   3e994:	6983      	ldr	r3, [r0, #24]
   3e996:	06db      	lsls	r3, r3, #27
   3e998:	d409      	bmi.n	3e9ae <am_hal_uart_transfer+0x2ee>
   3e99a:	6803      	ldr	r3, [r0, #0]
   3e99c:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   3e9a0:	f106 0601 	add.w	r6, r6, #1
   3e9a4:	d108      	bne.n	3e9b8 <am_hal_uart_transfer+0x2f8>
   3e9a6:	2e20      	cmp	r6, #32
   3e9a8:	f805 3b01 	strb.w	r3, [r5], #1
   3e9ac:	d1f2      	bne.n	3e994 <am_hal_uart_transfer+0x2d4>
   3e9ae:	4632      	mov	r2, r6
   3e9b0:	f104 009c 	add.w	r0, r4, #156	@ 0x9c
   3e9b4:	f000 fa66 	bl	3ee84 <am_hal_queue_item_add>
   3e9b8:	9805      	ldr	r0, [sp, #20]
   3e9ba:	f7f3 fb05 	bl	31fc8 <am_hal_interrupt_master_set>
   3e9be:	e6be      	b.n	3e73e <am_hal_uart_transfer+0x7e>
   3e9c0:	01ea9e06 	.word	0x01ea9e06
   3e9c4:	08000004 	.word	0x08000004
   3e9c8:	08000005 	.word	0x08000005
   3e9cc:	f7f3 faf8 	bl	31fc0 <am_hal_interrupt_master_disable>
   3e9d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   3e9d2:	9002      	str	r0, [sp, #8]
   3e9d4:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
   3e9d8:	331c      	adds	r3, #28
   3e9da:	a906      	add	r1, sp, #24
   3e9dc:	4632      	mov	r2, r6
   3e9de:	0318      	lsls	r0, r3, #12
   3e9e0:	460e      	mov	r6, r1
   3e9e2:	6983      	ldr	r3, [r0, #24]
   3e9e4:	06df      	lsls	r7, r3, #27
   3e9e6:	d409      	bmi.n	3e9fc <am_hal_uart_transfer+0x33c>
   3e9e8:	6803      	ldr	r3, [r0, #0]
   3e9ea:	f413 6f70 	tst.w	r3, #3840	@ 0xf00
   3e9ee:	f102 0201 	add.w	r2, r2, #1
   3e9f2:	d107      	bne.n	3ea04 <am_hal_uart_transfer+0x344>
   3e9f4:	2a20      	cmp	r2, #32
   3e9f6:	f806 3b01 	strb.w	r3, [r6], #1
   3e9fa:	d1f2      	bne.n	3e9e2 <am_hal_uart_transfer+0x322>
   3e9fc:	f104 009c 	add.w	r0, r4, #156	@ 0x9c
   3ea00:	f000 fa40 	bl	3ee84 <am_hal_queue_item_add>
   3ea04:	9802      	ldr	r0, [sp, #8]
   3ea06:	f7f3 fadf 	bl	31fc8 <am_hal_interrupt_master_set>
   3ea0a:	e74f      	b.n	3e8ac <am_hal_uart_transfer+0x1ec>
   3ea0c:	2001      	movs	r0, #1
   3ea0e:	e798      	b.n	3e942 <am_hal_uart_transfer+0x282>

0003ea10 <am_hal_uart_tx_flush>:
   3ea10:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
   3ea14:	2b00      	cmp	r3, #0
   3ea16:	d142      	bne.n	3ea9e <am_hal_uart_tx_flush+0x8e>
   3ea18:	b570      	push	{r4, r5, r6, lr}
   3ea1a:	6a45      	ldr	r5, [r0, #36]	@ 0x24
   3ea1c:	f505 2580 	add.w	r5, r5, #262144	@ 0x40000
   3ea20:	351c      	adds	r5, #28
   3ea22:	032d      	lsls	r5, r5, #12
   3ea24:	4604      	mov	r4, r0
   3ea26:	6bab      	ldr	r3, [r5, #56]	@ 0x38
   3ea28:	07d9      	lsls	r1, r3, #31
   3ea2a:	d512      	bpl.n	3ea52 <am_hal_uart_tx_flush+0x42>
   3ea2c:	f890 30b4 	ldrb.w	r3, [r0, #180]	@ 0xb4
   3ea30:	b96b      	cbnz	r3, 3ea4e <am_hal_uart_tx_flush+0x3e>
   3ea32:	4d1c      	ldr	r5, [pc, #112]	@ (3eaa4 <am_hal_uart_tx_flush+0x94>)
   3ea34:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   3ea36:	fbb5 f3f3 	udiv	r3, r5, r3
   3ea3a:	3301      	adds	r3, #1
   3ea3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3ea40:	0058      	lsls	r0, r3, #1
   3ea42:	f7f4 fd13 	bl	3346c <am_hal_delay_us>
   3ea46:	f894 30b4 	ldrb.w	r3, [r4, #180]	@ 0xb4
   3ea4a:	2b00      	cmp	r3, #0
   3ea4c:	d0f2      	beq.n	3ea34 <am_hal_uart_tx_flush+0x24>
   3ea4e:	2000      	movs	r0, #0
   3ea50:	bd70      	pop	{r4, r5, r6, pc}
   3ea52:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
   3ea56:	b183      	cbz	r3, 3ea7a <am_hal_uart_tx_flush+0x6a>
   3ea58:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
   3ea5c:	b16b      	cbz	r3, 3ea7a <am_hal_uart_tx_flush+0x6a>
   3ea5e:	4e11      	ldr	r6, [pc, #68]	@ (3eaa4 <am_hal_uart_tx_flush+0x94>)
   3ea60:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
   3ea62:	fbb6 f0f0 	udiv	r0, r6, r0
   3ea66:	3001      	adds	r0, #1
   3ea68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3ea6c:	0040      	lsls	r0, r0, #1
   3ea6e:	f7f4 fcfd 	bl	3346c <am_hal_delay_us>
   3ea72:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
   3ea76:	2b00      	cmp	r3, #0
   3ea78:	d1f2      	bne.n	3ea60 <am_hal_uart_tx_flush+0x50>
   3ea7a:	69ab      	ldr	r3, [r5, #24]
   3ea7c:	071a      	lsls	r2, r3, #28
   3ea7e:	d5e6      	bpl.n	3ea4e <am_hal_uart_tx_flush+0x3e>
   3ea80:	4e08      	ldr	r6, [pc, #32]	@ (3eaa4 <am_hal_uart_tx_flush+0x94>)
   3ea82:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
   3ea84:	fbb6 f3f3 	udiv	r3, r6, r3
   3ea88:	3301      	adds	r3, #1
   3ea8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3ea8e:	0058      	lsls	r0, r3, #1
   3ea90:	f7f4 fcec 	bl	3346c <am_hal_delay_us>
   3ea94:	69ab      	ldr	r3, [r5, #24]
   3ea96:	071b      	lsls	r3, r3, #28
   3ea98:	d4f3      	bmi.n	3ea82 <am_hal_uart_tx_flush+0x72>
   3ea9a:	2000      	movs	r0, #0
   3ea9c:	bd70      	pop	{r4, r5, r6, pc}
   3ea9e:	2000      	movs	r0, #0
   3eaa0:	4770      	bx	lr
   3eaa2:	bf00      	nop
   3eaa4:	000f4240 	.word	0x000f4240

0003eaa8 <am_hal_cmdq_init>:
   3eaa8:	280a      	cmp	r0, #10
   3eaaa:	d849      	bhi.n	3eb40 <am_hal_cmdq_init+0x98>
   3eaac:	2900      	cmp	r1, #0
   3eaae:	d04b      	beq.n	3eb48 <am_hal_cmdq_init+0xa0>
   3eab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   3eab2:	684e      	ldr	r6, [r1, #4]
   3eab4:	2e00      	cmp	r6, #0
   3eab6:	d041      	beq.n	3eb3c <am_hal_cmdq_init+0x94>
   3eab8:	2a00      	cmp	r2, #0
   3eaba:	d03f      	beq.n	3eb3c <am_hal_cmdq_init+0x94>
   3eabc:	680c      	ldr	r4, [r1, #0]
   3eabe:	2c01      	cmp	r4, #1
   3eac0:	d93c      	bls.n	3eb3c <am_hal_cmdq_init+0x94>
   3eac2:	4f22      	ldr	r7, [pc, #136]	@ (3eb4c <am_hal_cmdq_init+0xa4>)
   3eac4:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
   3eac8:	fb0e fe00 	mul.w	lr, lr, r0
   3eacc:	eb07 030e 	add.w	r3, r7, lr
   3ead0:	78dd      	ldrb	r5, [r3, #3]
   3ead2:	f015 0501 	ands.w	r5, r5, #1
   3ead6:	d135      	bne.n	3eb44 <am_hal_cmdq_init+0x9c>
   3ead8:	00e4      	lsls	r4, r4, #3
   3eada:	619c      	str	r4, [r3, #24]
   3eadc:	4434      	add	r4, r6
   3eade:	e9c3 6401 	strd	r6, r4, [r3, #4]
   3eae2:	e9c3 6604 	strd	r6, r6, [r3, #16]
   3eae6:	60de      	str	r6, [r3, #12]
   3eae8:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
   3eaec:	4818      	ldr	r0, [pc, #96]	@ (3eb50 <am_hal_cmdq_init+0xa8>)
   3eaee:	f857 400e 	ldr.w	r4, [r7, lr]
   3eaf2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
   3eaf6:	f8df c05c 	ldr.w	ip, [pc, #92]	@ 3eb54 <am_hal_cmdq_init+0xac>
   3eafa:	f004 447c 	and.w	r4, r4, #4227858432	@ 0xfc000000
   3eafe:	ea44 040c 	orr.w	r4, r4, ip
   3eb02:	f847 400e 	str.w	r4, [r7, lr]
   3eb06:	6258      	str	r0, [r3, #36]	@ 0x24
   3eb08:	6880      	ldr	r0, [r0, #8]
   3eb0a:	e9c3 5507 	strd	r5, r5, [r3, #28]
   3eb0e:	6005      	str	r5, [r0, #0]
   3eb10:	6a58      	ldr	r0, [r3, #36]	@ 0x24
   3eb12:	68c0      	ldr	r0, [r0, #12]
   3eb14:	6005      	str	r5, [r0, #0]
   3eb16:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
   3eb18:	4628      	mov	r0, r5
   3eb1a:	e9d4 5704 	ldrd	r5, r7, [r4, #16]
   3eb1e:	682c      	ldr	r4, [r5, #0]
   3eb20:	433c      	orrs	r4, r7
   3eb22:	602c      	str	r4, [r5, #0]
   3eb24:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
   3eb26:	6864      	ldr	r4, [r4, #4]
   3eb28:	6026      	str	r6, [r4, #0]
   3eb2a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
   3eb2c:	7a09      	ldrb	r1, [r1, #8]
   3eb2e:	6824      	ldr	r4, [r4, #0]
   3eb30:	0049      	lsls	r1, r1, #1
   3eb32:	f001 0102 	and.w	r1, r1, #2
   3eb36:	6021      	str	r1, [r4, #0]
   3eb38:	6013      	str	r3, [r2, #0]
   3eb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3eb3c:	2006      	movs	r0, #6
   3eb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3eb40:	2005      	movs	r0, #5
   3eb42:	4770      	bx	lr
   3eb44:	2007      	movs	r0, #7
   3eb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3eb48:	2006      	movs	r0, #6
   3eb4a:	4770      	bx	lr
   3eb4c:	1005d8dc 	.word	0x1005d8dc
   3eb50:	00048884 	.word	0x00048884
   3eb54:	01cdcdcd 	.word	0x01cdcdcd

0003eb58 <am_hal_cmdq_enable>:
   3eb58:	b318      	cbz	r0, 3eba2 <am_hal_cmdq_enable+0x4a>
   3eb5a:	6803      	ldr	r3, [r0, #0]
   3eb5c:	4a12      	ldr	r2, [pc, #72]	@ (3eba8 <am_hal_cmdq_enable+0x50>)
   3eb5e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3eb62:	4293      	cmp	r3, r2
   3eb64:	b510      	push	{r4, lr}
   3eb66:	4604      	mov	r4, r0
   3eb68:	d113      	bne.n	3eb92 <am_hal_cmdq_enable+0x3a>
   3eb6a:	78c1      	ldrb	r1, [r0, #3]
   3eb6c:	f011 0102 	ands.w	r1, r1, #2
   3eb70:	d111      	bne.n	3eb96 <am_hal_cmdq_enable+0x3e>
   3eb72:	4b0e      	ldr	r3, [pc, #56]	@ (3ebac <am_hal_cmdq_enable+0x54>)
   3eb74:	6882      	ldr	r2, [r0, #8]
   3eb76:	429a      	cmp	r2, r3
   3eb78:	d80f      	bhi.n	3eb9a <am_hal_cmdq_enable+0x42>
   3eb7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   3eb7c:	681a      	ldr	r2, [r3, #0]
   3eb7e:	6813      	ldr	r3, [r2, #0]
   3eb80:	f043 0301 	orr.w	r3, r3, #1
   3eb84:	6013      	str	r3, [r2, #0]
   3eb86:	78e3      	ldrb	r3, [r4, #3]
   3eb88:	f043 0302 	orr.w	r3, r3, #2
   3eb8c:	2000      	movs	r0, #0
   3eb8e:	70e3      	strb	r3, [r4, #3]
   3eb90:	bd10      	pop	{r4, pc}
   3eb92:	2002      	movs	r0, #2
   3eb94:	bd10      	pop	{r4, pc}
   3eb96:	2000      	movs	r0, #0
   3eb98:	bd10      	pop	{r4, pc}
   3eb9a:	2001      	movs	r0, #1
   3eb9c:	f7f2 ff94 	bl	31ac8 <am_hal_daxi_control>
   3eba0:	e7eb      	b.n	3eb7a <am_hal_cmdq_enable+0x22>
   3eba2:	2002      	movs	r0, #2
   3eba4:	4770      	bx	lr
   3eba6:	bf00      	nop
   3eba8:	01cdcdcd 	.word	0x01cdcdcd
   3ebac:	1005ffff 	.word	0x1005ffff

0003ebb0 <am_hal_cmdq_disable>:
   3ebb0:	4603      	mov	r3, r0
   3ebb2:	b1a8      	cbz	r0, 3ebe0 <am_hal_cmdq_disable+0x30>
   3ebb4:	6802      	ldr	r2, [r0, #0]
   3ebb6:	490b      	ldr	r1, [pc, #44]	@ (3ebe4 <am_hal_cmdq_disable+0x34>)
   3ebb8:	f022 427e 	bic.w	r2, r2, #4261412864	@ 0xfe000000
   3ebbc:	428a      	cmp	r2, r1
   3ebbe:	d10f      	bne.n	3ebe0 <am_hal_cmdq_disable+0x30>
   3ebc0:	78c0      	ldrb	r0, [r0, #3]
   3ebc2:	f010 0002 	ands.w	r0, r0, #2
   3ebc6:	d00c      	beq.n	3ebe2 <am_hal_cmdq_disable+0x32>
   3ebc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
   3ebca:	6811      	ldr	r1, [r2, #0]
   3ebcc:	680a      	ldr	r2, [r1, #0]
   3ebce:	f022 0201 	bic.w	r2, r2, #1
   3ebd2:	600a      	str	r2, [r1, #0]
   3ebd4:	78da      	ldrb	r2, [r3, #3]
   3ebd6:	f36f 0241 	bfc	r2, #1, #1
   3ebda:	2000      	movs	r0, #0
   3ebdc:	70da      	strb	r2, [r3, #3]
   3ebde:	4770      	bx	lr
   3ebe0:	2002      	movs	r0, #2
   3ebe2:	4770      	bx	lr
   3ebe4:	01cdcdcd 	.word	0x01cdcdcd

0003ebe8 <am_hal_cmdq_alloc_block>:
   3ebe8:	2800      	cmp	r0, #0
   3ebea:	d060      	beq.n	3ecae <am_hal_cmdq_alloc_block+0xc6>
   3ebec:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ebee:	4604      	mov	r4, r0
   3ebf0:	6800      	ldr	r0, [r0, #0]
   3ebf2:	461d      	mov	r5, r3
   3ebf4:	4b2f      	ldr	r3, [pc, #188]	@ (3ecb4 <am_hal_cmdq_alloc_block+0xcc>)
   3ebf6:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
   3ebfa:	4298      	cmp	r0, r3
   3ebfc:	b083      	sub	sp, #12
   3ebfe:	d146      	bne.n	3ec8e <am_hal_cmdq_alloc_block+0xa6>
   3ec00:	4616      	mov	r6, r2
   3ec02:	2a00      	cmp	r2, #0
   3ec04:	d049      	beq.n	3ec9a <am_hal_cmdq_alloc_block+0xb2>
   3ec06:	2d00      	cmp	r5, #0
   3ec08:	d047      	beq.n	3ec9a <am_hal_cmdq_alloc_block+0xb2>
   3ec0a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   3ec0e:	429a      	cmp	r2, r3
   3ec10:	d140      	bne.n	3ec94 <am_hal_cmdq_alloc_block+0xac>
   3ec12:	460f      	mov	r7, r1
   3ec14:	f7f3 f9d4 	bl	31fc0 <am_hal_interrupt_master_disable>
   3ec18:	9001      	str	r0, [sp, #4]
   3ec1a:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
   3ec1e:	6883      	ldr	r3, [r0, #8]
   3ec20:	6819      	ldr	r1, [r3, #0]
   3ec22:	f022 03ff 	bic.w	r3, r2, #255	@ 0xff
   3ec26:	b2c9      	uxtb	r1, r1
   3ec28:	430b      	orrs	r3, r1
   3ec2a:	1ad2      	subs	r2, r2, r3
   3ec2c:	2a00      	cmp	r2, #0
   3ec2e:	bfb8      	it	lt
   3ec30:	f5a3 7380 	sublt.w	r3, r3, #256	@ 0x100
   3ec34:	61e3      	str	r3, [r4, #28]
   3ec36:	6843      	ldr	r3, [r0, #4]
   3ec38:	681b      	ldr	r3, [r3, #0]
   3ec3a:	60e3      	str	r3, [r4, #12]
   3ec3c:	9801      	ldr	r0, [sp, #4]
   3ec3e:	f7f3 f9c3 	bl	31fc8 <am_hal_interrupt_master_set>
   3ec42:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   3ec46:	1ad2      	subs	r2, r2, r3
   3ec48:	f112 0ffe 	cmn.w	r2, #254	@ 0xfe
   3ec4c:	d42d      	bmi.n	3ecaa <am_hal_cmdq_alloc_block+0xc2>
   3ec4e:	e9d4 c103 	ldrd	ip, r1, [r4, #12]
   3ec52:	4561      	cmp	r1, ip
   3ec54:	d324      	bcc.n	3eca0 <am_hal_cmdq_alloc_block+0xb8>
   3ec56:	1cba      	adds	r2, r7, #2
   3ec58:	68a0      	ldr	r0, [r4, #8]
   3ec5a:	eb01 0ec2 	add.w	lr, r1, r2, lsl #3
   3ec5e:	4586      	cmp	lr, r0
   3ec60:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   3ec64:	d909      	bls.n	3ec7a <am_hal_cmdq_alloc_block+0x92>
   3ec66:	6860      	ldr	r0, [r4, #4]
   3ec68:	3a08      	subs	r2, #8
   3ec6a:	4402      	add	r2, r0
   3ec6c:	4594      	cmp	ip, r2
   3ec6e:	d91c      	bls.n	3ecaa <am_hal_cmdq_alloc_block+0xc2>
   3ec70:	6a62      	ldr	r2, [r4, #36]	@ 0x24
   3ec72:	6852      	ldr	r2, [r2, #4]
   3ec74:	e9c1 2000 	strd	r2, r0, [r1]
   3ec78:	4601      	mov	r1, r0
   3ec7a:	6031      	str	r1, [r6, #0]
   3ec7c:	3301      	adds	r3, #1
   3ec7e:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
   3ec82:	2000      	movs	r0, #0
   3ec84:	6223      	str	r3, [r4, #32]
   3ec86:	602b      	str	r3, [r5, #0]
   3ec88:	6161      	str	r1, [r4, #20]
   3ec8a:	b003      	add	sp, #12
   3ec8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ec8e:	2002      	movs	r0, #2
   3ec90:	b003      	add	sp, #12
   3ec92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ec94:	2007      	movs	r0, #7
   3ec96:	b003      	add	sp, #12
   3ec98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3ec9a:	2006      	movs	r0, #6
   3ec9c:	b003      	add	sp, #12
   3ec9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3eca0:	1c7a      	adds	r2, r7, #1
   3eca2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   3eca6:	4594      	cmp	ip, r2
   3eca8:	d8e7      	bhi.n	3ec7a <am_hal_cmdq_alloc_block+0x92>
   3ecaa:	2005      	movs	r0, #5
   3ecac:	e7f0      	b.n	3ec90 <am_hal_cmdq_alloc_block+0xa8>
   3ecae:	2002      	movs	r0, #2
   3ecb0:	4770      	bx	lr
   3ecb2:	bf00      	nop
   3ecb4:	01cdcdcd 	.word	0x01cdcdcd

0003ecb8 <am_hal_cmdq_release_block>:
   3ecb8:	b178      	cbz	r0, 3ecda <am_hal_cmdq_release_block+0x22>
   3ecba:	6803      	ldr	r3, [r0, #0]
   3ecbc:	4a09      	ldr	r2, [pc, #36]	@ (3ece4 <am_hal_cmdq_release_block+0x2c>)
   3ecbe:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3ecc2:	4293      	cmp	r3, r2
   3ecc4:	d109      	bne.n	3ecda <am_hal_cmdq_release_block+0x22>
   3ecc6:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   3ecca:	429a      	cmp	r2, r3
   3eccc:	d007      	beq.n	3ecde <am_hal_cmdq_release_block+0x26>
   3ecce:	6a03      	ldr	r3, [r0, #32]
   3ecd0:	6142      	str	r2, [r0, #20]
   3ecd2:	3b01      	subs	r3, #1
   3ecd4:	6203      	str	r3, [r0, #32]
   3ecd6:	2000      	movs	r0, #0
   3ecd8:	4770      	bx	lr
   3ecda:	2002      	movs	r0, #2
   3ecdc:	4770      	bx	lr
   3ecde:	2007      	movs	r0, #7
   3ece0:	4770      	bx	lr
   3ece2:	bf00      	nop
   3ece4:	01cdcdcd 	.word	0x01cdcdcd

0003ece8 <am_hal_cmdq_post_block>:
   3ece8:	b358      	cbz	r0, 3ed42 <am_hal_cmdq_post_block+0x5a>
   3ecea:	b538      	push	{r3, r4, r5, lr}
   3ecec:	6803      	ldr	r3, [r0, #0]
   3ecee:	4a17      	ldr	r2, [pc, #92]	@ (3ed4c <am_hal_cmdq_post_block+0x64>)
   3ecf0:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3ecf4:	4293      	cmp	r3, r2
   3ecf6:	4604      	mov	r4, r0
   3ecf8:	d116      	bne.n	3ed28 <am_hal_cmdq_post_block+0x40>
   3ecfa:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   3ecfe:	4293      	cmp	r3, r2
   3ed00:	d021      	beq.n	3ed46 <am_hal_cmdq_post_block+0x5e>
   3ed02:	6a40      	ldr	r0, [r0, #36]	@ 0x24
   3ed04:	6883      	ldr	r3, [r0, #8]
   3ed06:	4319      	orrs	r1, r3
   3ed08:	6a23      	ldr	r3, [r4, #32]
   3ed0a:	f102 0508 	add.w	r5, r2, #8
   3ed0e:	e9c2 1300 	strd	r1, r3, [r2]
   3ed12:	4a0f      	ldr	r2, [pc, #60]	@ (3ed50 <am_hal_cmdq_post_block+0x68>)
   3ed14:	68a1      	ldr	r1, [r4, #8]
   3ed16:	4291      	cmp	r1, r2
   3ed18:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3ed1c:	d806      	bhi.n	3ed2c <am_hal_cmdq_post_block+0x44>
   3ed1e:	68c2      	ldr	r2, [r0, #12]
   3ed20:	b2db      	uxtb	r3, r3
   3ed22:	6013      	str	r3, [r2, #0]
   3ed24:	2000      	movs	r0, #0
   3ed26:	bd38      	pop	{r3, r4, r5, pc}
   3ed28:	2002      	movs	r0, #2
   3ed2a:	bd38      	pop	{r3, r4, r5, pc}
   3ed2c:	2100      	movs	r1, #0
   3ed2e:	2001      	movs	r0, #1
   3ed30:	f7f2 feca 	bl	31ac8 <am_hal_daxi_control>
   3ed34:	e9d4 3008 	ldrd	r3, r0, [r4, #32]
   3ed38:	68c2      	ldr	r2, [r0, #12]
   3ed3a:	b2db      	uxtb	r3, r3
   3ed3c:	6013      	str	r3, [r2, #0]
   3ed3e:	2000      	movs	r0, #0
   3ed40:	e7f1      	b.n	3ed26 <am_hal_cmdq_post_block+0x3e>
   3ed42:	2002      	movs	r0, #2
   3ed44:	4770      	bx	lr
   3ed46:	2007      	movs	r0, #7
   3ed48:	bd38      	pop	{r3, r4, r5, pc}
   3ed4a:	bf00      	nop
   3ed4c:	01cdcdcd 	.word	0x01cdcdcd
   3ed50:	1005ffff 	.word	0x1005ffff

0003ed54 <am_hal_cmdq_get_status>:
   3ed54:	2800      	cmp	r0, #0
   3ed56:	d04b      	beq.n	3edf0 <am_hal_cmdq_get_status+0x9c>
   3ed58:	b570      	push	{r4, r5, r6, lr}
   3ed5a:	6803      	ldr	r3, [r0, #0]
   3ed5c:	4a25      	ldr	r2, [pc, #148]	@ (3edf4 <am_hal_cmdq_get_status+0xa0>)
   3ed5e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3ed62:	4293      	cmp	r3, r2
   3ed64:	b082      	sub	sp, #8
   3ed66:	4604      	mov	r4, r0
   3ed68:	d13c      	bne.n	3ede4 <am_hal_cmdq_get_status+0x90>
   3ed6a:	460d      	mov	r5, r1
   3ed6c:	2900      	cmp	r1, #0
   3ed6e:	d03c      	beq.n	3edea <am_hal_cmdq_get_status+0x96>
   3ed70:	f7f3 f926 	bl	31fc0 <am_hal_interrupt_master_disable>
   3ed74:	6a66      	ldr	r6, [r4, #36]	@ 0x24
   3ed76:	9001      	str	r0, [sp, #4]
   3ed78:	68b3      	ldr	r3, [r6, #8]
   3ed7a:	6a22      	ldr	r2, [r4, #32]
   3ed7c:	6819      	ldr	r1, [r3, #0]
   3ed7e:	f022 03ff 	bic.w	r3, r2, #255	@ 0xff
   3ed82:	b2c9      	uxtb	r1, r1
   3ed84:	430b      	orrs	r3, r1
   3ed86:	1ad2      	subs	r2, r2, r3
   3ed88:	2a00      	cmp	r2, #0
   3ed8a:	bfb8      	it	lt
   3ed8c:	f5a3 7380 	sublt.w	r3, r3, #256	@ 0x100
   3ed90:	61e3      	str	r3, [r4, #28]
   3ed92:	6873      	ldr	r3, [r6, #4]
   3ed94:	681b      	ldr	r3, [r3, #0]
   3ed96:	60e3      	str	r3, [r4, #12]
   3ed98:	9801      	ldr	r0, [sp, #4]
   3ed9a:	f7f3 f915 	bl	31fc8 <am_hal_interrupt_master_set>
   3ed9e:	e9d4 0604 	ldrd	r0, r6, [r4, #16]
   3eda2:	6a22      	ldr	r2, [r4, #32]
   3eda4:	69e3      	ldr	r3, [r4, #28]
   3eda6:	602b      	str	r3, [r5, #0]
   3eda8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
   3edaa:	4286      	cmp	r6, r0
   3edac:	bf0c      	ite	eq
   3edae:	4611      	moveq	r1, r2
   3edb0:	1e51      	subne	r1, r2, #1
   3edb2:	e9c5 1201 	strd	r1, r2, [r5, #4]
   3edb6:	e9d3 2006 	ldrd	r2, r0, [r3, #24]
   3edba:	e9d3 3108 	ldrd	r3, r1, [r3, #32]
   3edbe:	6812      	ldr	r2, [r2, #0]
   3edc0:	4202      	tst	r2, r0
   3edc2:	bf14      	ite	ne
   3edc4:	2001      	movne	r0, #1
   3edc6:	2000      	moveq	r0, #0
   3edc8:	420a      	tst	r2, r1
   3edca:	bf14      	ite	ne
   3edcc:	2101      	movne	r1, #1
   3edce:	2100      	moveq	r1, #0
   3edd0:	421a      	tst	r2, r3
   3edd2:	bf14      	ite	ne
   3edd4:	2301      	movne	r3, #1
   3edd6:	2300      	moveq	r3, #0
   3edd8:	7328      	strb	r0, [r5, #12]
   3edda:	2000      	movs	r0, #0
   3eddc:	7369      	strb	r1, [r5, #13]
   3edde:	73ab      	strb	r3, [r5, #14]
   3ede0:	b002      	add	sp, #8
   3ede2:	bd70      	pop	{r4, r5, r6, pc}
   3ede4:	2002      	movs	r0, #2
   3ede6:	b002      	add	sp, #8
   3ede8:	bd70      	pop	{r4, r5, r6, pc}
   3edea:	2006      	movs	r0, #6
   3edec:	b002      	add	sp, #8
   3edee:	bd70      	pop	{r4, r5, r6, pc}
   3edf0:	2002      	movs	r0, #2
   3edf2:	4770      	bx	lr
   3edf4:	01cdcdcd 	.word	0x01cdcdcd

0003edf8 <am_hal_cmdq_error_resume>:
   3edf8:	2800      	cmp	r0, #0
   3edfa:	d03c      	beq.n	3ee76 <am_hal_cmdq_error_resume+0x7e>
   3edfc:	6803      	ldr	r3, [r0, #0]
   3edfe:	4a20      	ldr	r2, [pc, #128]	@ (3ee80 <am_hal_cmdq_error_resume+0x88>)
   3ee00:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
   3ee04:	4293      	cmp	r3, r2
   3ee06:	4684      	mov	ip, r0
   3ee08:	d135      	bne.n	3ee76 <am_hal_cmdq_error_resume+0x7e>
   3ee0a:	78c0      	ldrb	r0, [r0, #3]
   3ee0c:	f010 0002 	ands.w	r0, r0, #2
   3ee10:	d030      	beq.n	3ee74 <am_hal_cmdq_error_resume+0x7c>
   3ee12:	f8dc 2024 	ldr.w	r2, [ip, #36]	@ 0x24
   3ee16:	e9d2 1000 	ldrd	r1, r0, [r2]
   3ee1a:	680b      	ldr	r3, [r1, #0]
   3ee1c:	f023 0301 	bic.w	r3, r3, #1
   3ee20:	b430      	push	{r4, r5}
   3ee22:	6894      	ldr	r4, [r2, #8]
   3ee24:	600b      	str	r3, [r1, #0]
   3ee26:	6805      	ldr	r5, [r0, #0]
   3ee28:	682b      	ldr	r3, [r5, #0]
   3ee2a:	f023 0101 	bic.w	r1, r3, #1
   3ee2e:	42a1      	cmp	r1, r4
   3ee30:	462a      	mov	r2, r5
   3ee32:	d022      	beq.n	3ee7a <am_hal_cmdq_error_resume+0x82>
   3ee34:	4298      	cmp	r0, r3
   3ee36:	f102 0108 	add.w	r1, r2, #8
   3ee3a:	d009      	beq.n	3ee50 <am_hal_cmdq_error_resume+0x58>
   3ee3c:	6893      	ldr	r3, [r2, #8]
   3ee3e:	f023 0201 	bic.w	r2, r3, #1
   3ee42:	42a2      	cmp	r2, r4
   3ee44:	d00a      	beq.n	3ee5c <am_hal_cmdq_error_resume+0x64>
   3ee46:	460a      	mov	r2, r1
   3ee48:	4298      	cmp	r0, r3
   3ee4a:	f102 0108 	add.w	r1, r2, #8
   3ee4e:	d1f5      	bne.n	3ee3c <am_hal_cmdq_error_resume+0x44>
   3ee50:	6851      	ldr	r1, [r2, #4]
   3ee52:	680b      	ldr	r3, [r1, #0]
   3ee54:	f023 0201 	bic.w	r2, r3, #1
   3ee58:	42a2      	cmp	r2, r4
   3ee5a:	d1f4      	bne.n	3ee46 <am_hal_cmdq_error_resume+0x4e>
   3ee5c:	460d      	mov	r5, r1
   3ee5e:	600c      	str	r4, [r1, #0]
   3ee60:	6005      	str	r5, [r0, #0]
   3ee62:	f89c 3003 	ldrb.w	r3, [ip, #3]
   3ee66:	f36f 0341 	bfc	r3, #1, #1
   3ee6a:	2000      	movs	r0, #0
   3ee6c:	bc30      	pop	{r4, r5}
   3ee6e:	f88c 3003 	strb.w	r3, [ip, #3]
   3ee72:	4770      	bx	lr
   3ee74:	4770      	bx	lr
   3ee76:	2002      	movs	r0, #2
   3ee78:	4770      	bx	lr
   3ee7a:	4629      	mov	r1, r5
   3ee7c:	e7ef      	b.n	3ee5e <am_hal_cmdq_error_resume+0x66>
   3ee7e:	bf00      	nop
   3ee80:	01cdcdcd 	.word	0x01cdcdcd

0003ee84 <am_hal_queue_item_add>:
   3ee84:	b570      	push	{r4, r5, r6, lr}
   3ee86:	6905      	ldr	r5, [r0, #16]
   3ee88:	b082      	sub	sp, #8
   3ee8a:	4604      	mov	r4, r0
   3ee8c:	fb02 f505 	mul.w	r5, r2, r5
   3ee90:	460e      	mov	r6, r1
   3ee92:	f7f3 f895 	bl	31fc0 <am_hal_interrupt_master_disable>
   3ee96:	9001      	str	r0, [sp, #4]
   3ee98:	68a3      	ldr	r3, [r4, #8]
   3ee9a:	68e2      	ldr	r2, [r4, #12]
   3ee9c:	1ad3      	subs	r3, r2, r3
   3ee9e:	42ab      	cmp	r3, r5
   3eea0:	d31c      	bcc.n	3eedc <am_hal_queue_item_add+0x58>
   3eea2:	b18d      	cbz	r5, 3eec8 <am_hal_queue_item_add+0x44>
   3eea4:	b30e      	cbz	r6, 3eeea <am_hal_queue_item_add+0x66>
   3eea6:	1e71      	subs	r1, r6, #1
   3eea8:	194e      	adds	r6, r1, r5
   3eeaa:	6823      	ldr	r3, [r4, #0]
   3eeac:	6962      	ldr	r2, [r4, #20]
   3eeae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3eeb2:	54d0      	strb	r0, [r2, r3]
   3eeb4:	6823      	ldr	r3, [r4, #0]
   3eeb6:	68e0      	ldr	r0, [r4, #12]
   3eeb8:	3301      	adds	r3, #1
   3eeba:	42b1      	cmp	r1, r6
   3eebc:	fbb3 f2f0 	udiv	r2, r3, r0
   3eec0:	fb00 3312 	mls	r3, r0, r2, r3
   3eec4:	6023      	str	r3, [r4, #0]
   3eec6:	d1f0      	bne.n	3eeaa <am_hal_queue_item_add+0x26>
   3eec8:	68a2      	ldr	r2, [r4, #8]
   3eeca:	4415      	add	r5, r2
   3eecc:	60a5      	str	r5, [r4, #8]
   3eece:	9801      	ldr	r0, [sp, #4]
   3eed0:	f7f3 f87a 	bl	31fc8 <am_hal_interrupt_master_set>
   3eed4:	2601      	movs	r6, #1
   3eed6:	4630      	mov	r0, r6
   3eed8:	b002      	add	sp, #8
   3eeda:	bd70      	pop	{r4, r5, r6, pc}
   3eedc:	9801      	ldr	r0, [sp, #4]
   3eede:	f7f3 f873 	bl	31fc8 <am_hal_interrupt_master_set>
   3eee2:	2600      	movs	r6, #0
   3eee4:	4630      	mov	r0, r6
   3eee6:	b002      	add	sp, #8
   3eee8:	bd70      	pop	{r4, r5, r6, pc}
   3eeea:	4631      	mov	r1, r6
   3eeec:	6823      	ldr	r3, [r4, #0]
   3eeee:	3101      	adds	r1, #1
   3eef0:	3301      	adds	r3, #1
   3eef2:	428d      	cmp	r5, r1
   3eef4:	fbb3 f0f2 	udiv	r0, r3, r2
   3eef8:	fb02 3310 	mls	r3, r2, r0, r3
   3eefc:	6023      	str	r3, [r4, #0]
   3eefe:	d1f5      	bne.n	3eeec <am_hal_queue_item_add+0x68>
   3ef00:	e7e2      	b.n	3eec8 <am_hal_queue_item_add+0x44>
   3ef02:	bf00      	nop

0003ef04 <am_hal_queue_item_get>:
   3ef04:	b570      	push	{r4, r5, r6, lr}
   3ef06:	6905      	ldr	r5, [r0, #16]
   3ef08:	b082      	sub	sp, #8
   3ef0a:	4604      	mov	r4, r0
   3ef0c:	fb02 f505 	mul.w	r5, r2, r5
   3ef10:	460e      	mov	r6, r1
   3ef12:	f7f3 f855 	bl	31fc0 <am_hal_interrupt_master_disable>
   3ef16:	9001      	str	r0, [sp, #4]
   3ef18:	68a3      	ldr	r3, [r4, #8]
   3ef1a:	42ab      	cmp	r3, r5
   3ef1c:	d31c      	bcc.n	3ef58 <am_hal_queue_item_get+0x54>
   3ef1e:	b18d      	cbz	r5, 3ef44 <am_hal_queue_item_get+0x40>
   3ef20:	b30e      	cbz	r6, 3ef66 <am_hal_queue_item_get+0x62>
   3ef22:	1e71      	subs	r1, r6, #1
   3ef24:	194e      	adds	r6, r1, r5
   3ef26:	6863      	ldr	r3, [r4, #4]
   3ef28:	6962      	ldr	r2, [r4, #20]
   3ef2a:	5cd3      	ldrb	r3, [r2, r3]
   3ef2c:	f801 3f01 	strb.w	r3, [r1, #1]!
   3ef30:	6863      	ldr	r3, [r4, #4]
   3ef32:	68e0      	ldr	r0, [r4, #12]
   3ef34:	3301      	adds	r3, #1
   3ef36:	42b1      	cmp	r1, r6
   3ef38:	fbb3 f2f0 	udiv	r2, r3, r0
   3ef3c:	fb00 3312 	mls	r3, r0, r2, r3
   3ef40:	6063      	str	r3, [r4, #4]
   3ef42:	d1f0      	bne.n	3ef26 <am_hal_queue_item_get+0x22>
   3ef44:	68a2      	ldr	r2, [r4, #8]
   3ef46:	1b55      	subs	r5, r2, r5
   3ef48:	60a5      	str	r5, [r4, #8]
   3ef4a:	9801      	ldr	r0, [sp, #4]
   3ef4c:	f7f3 f83c 	bl	31fc8 <am_hal_interrupt_master_set>
   3ef50:	2601      	movs	r6, #1
   3ef52:	4630      	mov	r0, r6
   3ef54:	b002      	add	sp, #8
   3ef56:	bd70      	pop	{r4, r5, r6, pc}
   3ef58:	9801      	ldr	r0, [sp, #4]
   3ef5a:	f7f3 f835 	bl	31fc8 <am_hal_interrupt_master_set>
   3ef5e:	2600      	movs	r6, #0
   3ef60:	4630      	mov	r0, r6
   3ef62:	b002      	add	sp, #8
   3ef64:	bd70      	pop	{r4, r5, r6, pc}
   3ef66:	68e2      	ldr	r2, [r4, #12]
   3ef68:	4631      	mov	r1, r6
   3ef6a:	6863      	ldr	r3, [r4, #4]
   3ef6c:	3101      	adds	r1, #1
   3ef6e:	3301      	adds	r3, #1
   3ef70:	428d      	cmp	r5, r1
   3ef72:	fbb3 f0f2 	udiv	r0, r3, r2
   3ef76:	fb02 3310 	mls	r3, r2, r0, r3
   3ef7a:	6063      	str	r3, [r4, #4]
   3ef7c:	d1f5      	bne.n	3ef6a <am_hal_queue_item_get+0x66>
   3ef7e:	e7e1      	b.n	3ef44 <am_hal_queue_item_get+0x40>
   3ef80:	0f0a0000 	.word	0x0f0a0000
   3ef84:	00000001 	.word	0x00000001
   3ef88:	03030102 	.word	0x03030102
   3ef8c:	00000001 	.word	0x00000001
   3ef90:	07000002 	.word	0x07000002
   3ef94:	00000100 	.word	0x00000100

0003ef98 <ns_core_V1_0_0>:
   3ef98:	00ca0000 00000001 00000000 6e61656d     ............mean
   3efa8:	00203a73 73697861 6925203a 0000000a     s: .axis: %i....
   3efb8:	00206625 696c6128 26206e67 6c612820     %f .(align & (al
   3efc8:	206e6769 2931202d 3d3d2029 00003020     ign - 1)) == 0..
   3efd8:	64696f76 617b202a 796e6f6e 73756f6d     void* {anonymous
   3efe8:	653a3a7d 6c615f69 656e6769 61635f64     }::ei_aligned_ca
   3eff8:	636f6c6c 7a697328 2c745f65 7a697320     lloc(size_t, siz
   3f008:	29745f65 00000000 2f637273 65676465     e_t)....src/edge
   3f018:	706d692d 65736c75 6764652f 6d692d65     -impulse/edge-im
   3f028:	736c7570 64732d65 6c632f6b 69737361     pulse-sdk/classi
   3f038:	72656966 5f69652f 67696c61 5f64656e     fier/ei_aligned_
   3f048:	6c6c616d 682e636f 00000000 00727470     malloc.h....ptr.
   3f058:	64696f76 6e617b20 6d796e6f 7d73756f     void {anonymous}
   3f068:	69653a3a 696c615f 64656e67 6572665f     ::ei_aligned_fre
   3f078:	6f762865 292a6469 00000000 6c696146     e(void*)....Fail
   3f088:	74206465 6e69206f 61697469 657a696c     ed to initialize
   3f098:	65687420 646f6d20 28206c65 6f727265      the model (erro
   3f0a8:	6f632072 25206564 000a2964 65636552     r code %d)..Rece
   3f0b8:	64657669 6d616320 20617265 74746573     ived camera sett
   3f0c8:	73676e69 6f63203a 6172746e 25207473     ings: contrast %
   3f0d8:	62202c64 68676972 73656e74 64252073     d, brightness %d
   3f0e8:	7665202c 0a642520 00000000 65636552     , ev %d.....Rece
   3f0f8:	64657669 20642520 65747962 25203a73     ived %d bytes: %
   3f108:	00000a73 74636576 3a3a726f 725f4d5f     s...vector::_M_r
   3f118:	6c6c6165 695f636f 7265736e 00000074     ealloc_insert...
   3f128:	79617247 6c616373 00000065 3a525245     Grayscale...ERR:
   3f138:	6e614320 20746f6e 646e6168 6920656c      Cannot handle i
   3f148:	7475706e 70797420 25282065 000a2964     nput type (%d)..
   3f158:	3a525245 706e6920 74207475 6f736e65     ERR: input tenso
   3f168:	61682072 69732073 2520657a 79622064     r has size %d by
   3f178:	2c736574 74756220 706e6920 6d207475     tes, but input m
   3f188:	69727461 61682078 61682073 69732073     atrix has has si
   3f198:	2520657a 79622064 0a736574 00000000     ze %d bytes.....
   3f1a8:	3a525245 74756f20 20747570 736e6574     ERR: output tens
   3f1b8:	6820726f 73207361 20657a69 202c6425     or has size %d, 
   3f1c8:	20747562 75706e69 616d2074 78697274     but input matrix
   3f1d8:	73616820 73616820 7a697320 64252065      has has size %d
   3f1e8:	0000000a 3a525245 6e614320 20746f6e     ....ERR: Cannot 
   3f1f8:	646e6168 6f20656c 75707475 79742074     handle output ty
   3f208:	28206570 0a296425 00000000 3a525245     pe (%d).....ERR:
   3f218:	756f5720 7720646c 65746972 74756f20      Would write out
   3f228:	65646973 61656620 65727574 66756220     side feature buf
   3f238:	0a726566 00000000 3a525245 6b6e5520     fer.....ERR: Unk
   3f248:	6e776f6e 74786520 74636172 6e756620     nown extract fun
   3f258:	6f697463 6f202c6e 20796c6e 4343464d     ction, only MFCC
   3f268:	464d202c 6e612045 70732064 72746365     , MFE and spectr
   3f278:	6172676f 7573206d 726f7070 0a646574     ogram supported.
   3f288:	00000000 3a525245 69614620 2064656c     ....ERR: Failed 
   3f298:	72206f74 44206e75 70205053 65636f72     to run DSP proce
   3f2a8:	28207373 0a296425 00000000 74616546     ss (%d).....Feat
   3f2b8:	20657275 7274614d 203a7869 0000000a     ure Matrix: ....
   3f2c8:	6e6e7552 20676e69 75706d69 2e65736c     Running impulse.
   3f2d8:	000a2e2e 74636576 3a3a726f 645f4d5f     ....vector::_M_d
   3f2e8:	75616665 615f746c 6e657070 00000064     efault_append...
   3f2f8:	3a525245 626f4d20 4e656c69 53207465     ERR: MobileNet S
   3f308:	69204453 6f6e2073 75732074 726f7070     SD is not suppor
   3f318:	20646574 45206e69 6f204e4f 65542072     ted in EON or Te
   3f328:	726f736e 776f6c46 74694c20 694d2065     nsorFlow Lite Mi
   3f338:	0a6f7263 00000000 3a525245 766e4920     cro.....ERR: Inv
   3f348:	64696c61 74756f20 20747570 65707974     alid output type
   3f358:	64252820 6f662029 4f592072 35764f4c      (%d) for YOLOv5
   3f368:	73616c20 616c2074 0a726579 00000000      last layer.....
   3f378:	3a525245 4c4f5920 6420584f 2073656f     ERR: YOLOX does 
   3f388:	20746f6e 70707573 2074726f 6e617571     not support quan
   3f398:	657a6974 6e692064 65726566 0a65636e     tized inference.
   3f3a8:	00000000 3a525245 4c4f5920 2037564f     ....ERR: YOLOV7 
   3f3b8:	73656f64 746f6e20 70757320 74726f70     does not support
   3f3c8:	61757120 7a69746e 69206465 7265666e      quantized infer
   3f3d8:	65636e65 0000000a 3a525245 766e4920     ence....ERR: Inv
   3f3e8:	64696c61 74756f20 20747570 65707974     alid output type
   3f3f8:	64252820 6f662029 41542072 616c204f      (%d) for TAO la
   3f408:	6c207473 72657961 0000000a 3a525245     st layer....ERR:
   3f418:	766e4920 64696c61 74756f20 20747570      Invalid output 
   3f428:	65707974 64252820 6f662029 41542072     type (%d) for TA
   3f438:	4f59204f 33764f4c 79616c20 000a7265     O YOLOv3 layer..
   3f448:	3a525245 766e4920 64696c61 74756f20     ERR: Invalid out
   3f458:	20747570 65707974 64252820 6f662029     put type (%d) fo
   3f468:	41542072 4f59204f 34764f4c 79616c20     r TAO YOLOv4 lay
   3f478:	000a7265 3a525245 736e5520 6f707075     er..ERR: Unsuppo
   3f488:	64657472 6a626f20 20746365 65746564     rted object dete
   3f498:	6f697463 616c206e 6c207473 72657961     ction last layer
   3f4a8:	64252820 00000a29 093a7325 00000000      (%d)...%s:.....
   3f4b8:	64657250 69746369 20736e6f 6d697428     Predictions (tim
   3f4c8:	25203a65 736d2064 0a3a292e 00000000     e: %d ms.):.....
   3f4d8:	74616546 73657275 64252820 2e736d20     Features (%d ms.
   3f4e8:	00203a29 4f464e49 00000000 203a7325     ): .INFO....%s: 
   3f4f8:	00000000 75706d49 2065736c 6e69616d     ....Impulse main
   3f508:	6e696174 74732073 2e657461 6c614320     tains state. Cal
   3f518:	7572206c 6c635f6e 69737361 72656966     l run_classifier
   3f528:	696e695f 20292874 72206f74 74657365     _init() to reset
   3f538:	61747320 28206574 2e672e65 20666920      state (e.g. if 
   3f548:	61746164 72747320 206d6165 69207369     data stream is i
   3f558:	7265746e 74707572 292e6465 0000000a     nterrupted.)....
   3f568:	65726f43 696e6920 61662074 64656c69     Core init failed
   3f578:	00000a2e 65776f50 6f632072 6769666e     ....Power config
   3f588:	69616620 2e64656c 0000000a 656d6954      failed.....Time
   3f598:	6e492072 46207469 656c6961 00000a64     r Init Failed...
   3f5a8:	20425355 74696e49 69614620 0a64656c     USB Init Failed.
   3f5b8:	00000000 20425355 74696e49 63755320     ....USB Init Suc
   3f5c8:	73736563 0000000a 656d6143 53206172     cess....Camera S
   3f5d8:	20706f74 6c696146 000a6465 656d6143     top Failed..Came
   3f5e8:	49206172 2074696e 63637553 0a737365     ra Init Success.
   3f5f8:	00000000 b8939ff0 6e695420 73695679     ........ TinyVis
   3f608:	206e6f69 6f6d6544 00000a0a 3a525245     ion Demo....ERR:
   3f618:	69614620 2064656c 72206f74 63206e75      Failed to run c
   3f628:	7373616c 65696669 25282072 000a2964     lassifier (%d)..
   3f638:	20202020 28207325 20296625 3a78205b         %s (%f) [ x:
   3f648:	2c752520 203a7920 202c7525 74646977      %u, y: %u, widt
   3f658:	25203a68 68202c75 68676965 25203a74     h: %u, height: %
   3f668:	0a5d2075 00000000 20202020 6f206f4e     u ].....    No o
   3f678:	63656a62 66207374 646e756f 0000000a     bjects found....
   3f688:	646e6552 6e697265 6d692067 20656761     Rendering image 
   3f698:	206e656c 6425203d 666e6920 20736920     len = %d inf is 
   3f6a8:	78257830 666f202c 74657366 20736920     0x%x, offset is 
   3f6b8:	000a6425 65666e49 636e6572 616c2065     %d..Inference la
   3f6c8:	636e6574 25203a79 00000a64 762e6262     tency: %d...bb.v
   3f6d8:	65756c61 0a662520 00000000 69626d41     alue %f.....Ambi
   3f6e8:	00000071 65636146 74656420 69746365     q...Face detecti
   3f6f8:	2d206e6f 4d4f4620 202d204f 65626d45     on - FOMO - Embe
   3f708:	64656464 6c6e4f20 20656e69 666e6f43     dded Online Conf
   3f718:	6e657265 00006563 67616d49 61642065     erence..Image da
   3f728:	202c6174 67616d49 4f202c65 63656a62     ta, Image, Objec
   3f738:	65442074 74636574 206e6f69 616d4928     t Detection (Ima
   3f748:	29736567 20332320 6f6c4328 6f20656e     ges) #3 (Clone o
   3f758:	65762066 6f697372 3223206e 00000029     f version #2)...
   3f768:	67616d69 00000065 65636166 00000000     image...face....
   3f778:	6f707865 746e656e 203d3c20 00003133     exponent <= 31..
   3f788:	65746e49 54726567 20657079 6d6d6567     IntegerType gemm
   3f798:	70776f6c 6f523a3a 69646e75 6944676e     lowp::RoundingDi
   3f7a8:	65646976 4f507942 6e492854 65676574     videByPOT(Intege
   3f7b8:	70795472 69202c65 2029746e 7469775b     rType, int) [wit
   3f7c8:	6e492068 65676574 70795472 203d2065     h IntegerType = 
   3f7d8:	676e6f6c 746e6920 0000005d 2f637273     long int]...src/
   3f7e8:	65676465 706d692d 65736c75 6764652f     edge-impulse/edg
   3f7f8:	6d692d65 736c7570 64732d65 68742f6b     e-impulse-sdk/th
   3f808:	5f647269 74726170 65672f79 6f6c6d6d     ird_party/gemmlo
   3f818:	662f7077 64657869 6e696f70 69662f74     wp/fixedpoint/fi
   3f828:	70646578 746e696f 0000682e 6f707865     xedpoint.h..expo
   3f838:	746e656e 203d3e20 00000030 00006625     nent >= 0...%f..
   3f848:	3a525245 74654720 736e6554 6320726f     ERR: GetTensor c
   3f858:	656c6c61 65622064 646e6f79 58414d20     alled beyond MAX
   3f868:	4c46545f 4156455f 4f435f4c 20544e55     _TFL_EVAL_COUNT 
   3f878:	29642528 0000000a 3a525245 74654720     (%d)....ERR: Get
   3f888:	736e6554 6320726f 656c6c61 65622064     Tensor called be
   3f898:	646e6f79 58414d20 4c46545f 4e45545f     yond MAX_TFL_TEN
   3f8a8:	5f524f53 4e554f43 25282054 000a2964     SOR_COUNT (%d)..
   3f8b8:	3a525245 69614620 2064656c 61206f74     ERR: Failed to a
   3f8c8:	636f6c6c 20657461 73726570 65747369     llocate persiste
   3f8d8:	6220746e 65666675 666f2072 7a697320     nt buffer of siz
   3f8e8:	64252065 6f64202c 6e207365 6620746f     e %d, does not f
   3f8f8:	69207469 6574206e 726f736e 65726120     it in tensor are
   3f908:	6120616e 7220646e 68636165 45206465     na and reached E
   3f918:	414d5f49 564f5f58 4c465245 425f574f     I_MAX_OVERFLOW_B
   3f928:	45464655 4f435f52 0a544e55 00000000     UFFER_COUNT.....
   3f938:	3a525245 69614620 2064656c 61206f74     ERR: Failed to a
   3f948:	636f6c6c 20657461 73726570 65747369     llocate persiste
   3f958:	6220746e 65666675 666f2072 7a697320     nt buffer of siz
   3f968:	64252065 0000000a 3a525245 69614620     e %d....ERR: Fai
   3f978:	2064656c 61206f74 636f6c6c 20657461     led to allocate 
   3f988:	61726373 20686374 66667562 6f207265     scratch buffer o
   3f998:	69732066 2520657a 72202c64 68636165     f size %d, reach
   3f9a8:	45206465 414d5f49 43535f58 43544152     ed EI_MAX_SCRATC
   3f9b8:	55425f48 52454646 554f435f 000a544e     H_BUFFER_COUNT..
   3f9c8:	3a525245 69614620 2064656c 61206f74     ERR: Failed to a
   3f9d8:	636f6c6c 20657461 61726373 20686374     llocate scratch 
   3f9e8:	66667562 6f207265 69732066 2520657a     buffer of size %
   3f9f8:	00000a64 3a525245 6e657420 20726f73     d...ERR: tensor 
   3fa08:	6e657261 73692061 6f6f7420 616d7320     arena is too sma
   3fa18:	202c6c6c 73656f64 746f6e20 74696620     ll, does not fit
   3fa28:	646f6d20 2d206c65 65766520 6977206e      model - even wi
   3fa38:	756f6874 63732074 63746172 75622068     thout scratch bu
   3fa48:	72656666 00000a73 7566202c 6974636e     ffers..., functi
   3fa58:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
   3fa68:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
   3fa78:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
   3fa88:	25732564 00000a73 33323130 37363534     d%s%s...01234567
   3fa98:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   3faa8:	37363534 62613938 66656463 00000000     456789abcdef....
   3fab8:	6c756e28 0000296c 435f434c 414c4c4f     (null)..LC_COLLA
   3fac8:	00004554 435f434c 45505954 00000000     TE..LC_CTYPE....
   3fad8:	4d5f434c 54454e4f 00595241 4e5f434c     LC_MONETARY.LC_N
   3fae8:	52454d55 00004349 545f434c 00454d49     UMERIC..LC_TIME.
   3faf8:	4d5f434c 41535345 00534547 00464e49     LC_MESSAGES.INF.
   3fb08:	00666e69 004e414e 006e616e 69666e49     inf.NAN.nan.Infi
   3fb18:	7974696e 00000000 004e614e 6c6c6142     nity....NaN.Ball
   3fb28:	7320636f 65636375 64656465 00000000     oc succeeded....
   3fb38:	6c6f562f 73656d75 7461642f 656a2f61     /Volumes/data/je
   3fb48:	6e696b6e 6f772f73 70736b72 2f656361     nkins/workspace/
   3fb58:	2d554e47 6c6f6f74 69616863 72612f6e     GNU-toolchain/ar
   3fb68:	33312d6d 6372732f 77656e2f 2d62696c     m-13/src/newlib-
   3fb78:	77677963 6e2f6e69 696c7765 696c2f62     cygwin/newlib/li
   3fb88:	732f6362 696c6474 74642f62 632e616f     bc/stdlib/dtoa.c
   3fb98:	00000000 6c6f562f 73656d75 7461642f     ..../Volumes/dat
   3fba8:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   3fbb8:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   3fbc8:	72612f6e 33312d6d 6372732f 77656e2f     n/arm-13/src/new
   3fbd8:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   3fbe8:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   3fbf8:	2e636572 00000063 796e6954 00425355     rec.c...TinyUSB.
   3fc08:	796e6954 20425355 69766544 00006563     TinyUSB Device..
   3fc18:	34333231 00003635 796e6954 20425355     123456..TinyUSB 
   3fc28:	00434443 796e6954 20425355 55626557     CDC.TinyUSB WebU
   3fc38:	00004253 6f727245 55203a72 7075736e     SB..Error: Unsup
   3fc48:	74726f70 74206465 20657079 5220666f     ported type of R
   3fc58:	72462078 20656d61 64616548 203a7265     x Frame Header: 
   3fc68:	000a6425 6e726157 3a676e69 65685420     %d..Warning: The
   3fc78:	6d756e20 20726562 7220666f 69727765      number of rewri
   3fc88:	676e6974 20736920 7265766f 0a642520     ting is over %d.
   3fc98:	00000000 4f525245 65542052 6f43706d     ....ERROR TempCo
   3fca8:	696e6920 61662074 64656c69 0000000a      init failed....
   3fcb8:	706d6574 695f6f63 2874696e 72452029     tempco_init() Er
   3fcc8:	20726f72 6572202d 76726573 6f697461     ror - reservatio
   3fcd8:	666f206e 65687420 43444120 736e6920     n of the ADC ins
   3fce8:	636e6174 61662065 64656c69 00000a2e     tance failed....
   3fcf8:	706d6574 695f6f63 2874696e 72452029     tempco_init() Er
   3fd08:	20726f72 4441202d 6f702043 20726577     ror - ADC power 
   3fd18:	66206e6f 656c6961 000a2e64 706d6574     on failed...temp
   3fd28:	695f6f63 2874696e 72452029 20726f72     co_init() Error 
   3fd38:	6f63202d 6769666e 6e697275 44412067     - configuring AD
   3fd48:	61662043 64656c69 00000a2e 4f525245     C failed....ERRO
   3fd58:	6d612052 6c61685f 7277705f 6c727463     R am_hal_pwrctrl
   3fd68:	6d65745f 5f6f6370 74696e69 72202928     _tempco_init() r
   3fd78:	72757465 2064656e 0a2e6425 00000000     eturned %d......
   3fd88:	6c696146 74206465 6f63206f 6769666e     Failed to config
   3fd98:	20657275 454d4954 2c642552 74657220     ure TIMER%d, ret
   3fda8:	206e7275 756c6176 64253d65 00000a0d     urn value=%d....
   3fdb8:	6c696146 74206465 6e69206f 63207469     Failed to init c
   3fdc8:	72656d61 69742061 0a72656d 00000000     amera timer.....
   3fdd8:	74696157 20676e69 20726f66 656d6163     Waiting for came
   3fde8:	63206172 75747061 000a6572 5f504d35     ra capture..5MP_
   3fdf8:	00000032 00504d33 00504d35 656d6954     2...3MP.5MP.Time
   3fe08:	6e492072 46207469 656c6961 000a2e64     r Init Failed...
   3fe18:	5f646162 636e7566 6e6f6974 6c61635f     bad_function_cal
   3fe28:	0000006c 42494c47 5f585843 414e5554     l...GLIBCXX_TUNA
   3fe38:	53454c42 00000000 5f6a626f 657a6973     BLES....obj_size
   3fe48:	00000000 5f6a626f 6e756f63 00000074     ....obj_count...
   3fe58:	62696c67 2e787863 705f6865 006c6f6f     glibcxx.eh_pool.
   3fe68:	3a647473 6378653a 69747065 00006e6f     std::exception..
   3fe78:	3a647473 6461623a 6378655f 69747065     std::bad_excepti
   3fe88:	00006e6f 6d726574 74616e69 61632065     on..terminate ca
   3fe98:	64656c6c 63657220 69737275 796c6576     lled recursively
   3fea8:	0000000a 6d726574 74616e69 61632065     ....terminate ca
   3feb8:	64656c6c 74666120 74207265 776f7268     lled after throw
   3fec8:	20676e69 69206e61 6174736e 2065636e     ing an instance 
   3fed8:	2720666f 00000000 00000a27 6d726574     of '....'...term
   3fee8:	74616e69 61632065 64656c6c 74697720     inate called wit
   3fef8:	74756f68 206e6120 69746361 65206576     hout an active e
   3ff08:	70656378 6e6f6974 0000000a 68772020     xception....  wh
   3ff18:	29287461 0020203a 69736162 74735f63     at():  .basic_st
   3ff28:	676e6972 535f3a3a 6e6f635f 75727473     ring::_S_constru
   3ff38:	6e207463 206c6c75 20746f6e 696c6176     ct null not vali
   3ff48:	00000064 69736162 74735f63 676e6972     d...basic_string
   3ff58:	535f3a3a 6572635f 00657461 00006425     ::_S_create.%d..
   3ff68:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   3ff78:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   3ff88:	00000029 6f747561 00000000 6c636564     )...auto....decl
   3ff98:	65707974 74756128 0000296f 69727473     type(auto)..stri
   3ffa8:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   3ffb8:	6c636564 65707974 6c756e28 7274706c     decltype(nullptr
   3ffc8:	00000029 6962615b 0000003a 0000202c     )...[abi:..., ..
   3ffd8:	00003a3a 6665647b 746c7561 67726120     ::..{default arg
   3ffe8:	00000023 003a3a7d 6f747561 0000003a     #...}::.auto:...
   3fff8:	706d6574 6574616c 72617020 74656d61     template paramet
   40008:	6f207265 63656a62 6f662074 00002072     er object for ..
   40018:	74696e69 696c6169 2072657a 20726f66     initializer for 
   40028:	75646f6d 0020656c 62617476 6620656c     module .vtable f
   40038:	0020726f 20545456 20726f66 00000000     or .VTT for ....
   40048:	736e6f63 63757274 6e6f6974 61747620     construction vta
   40058:	20656c62 20726f66 00000000 2d6e692d     ble for ....-in-
   40068:	00000000 65707974 6f666e69 726f6620     ....typeinfo for
   40078:	00000020 65707974 6f666e69 6d616e20      ...typeinfo nam
   40088:	6f662065 00002072 65707974 6f666e69     e for ..typeinfo
   40098:	206e6620 20726f66 00000000 2d6e6f6e      fn for ....non-
   400a8:	74726976 206c6175 6e756874 6f74206b     virtual thunk to
   400b8:	00000020 61766f63 6e616972 65722074      ...covariant re
   400c8:	6e727574 75687420 74206b6e 0000206f     turn thunk to ..
   400d8:	6176616a 616c4320 66207373 0020726f     java Class for .
   400e8:	72617567 61762064 62616972 6620656c     guard variable f
   400f8:	0020726f 20534c54 74696e69 6e756620     or .TLS init fun
   40108:	6f697463 6f66206e 00002072 20534c54     ction for ..TLS 
   40118:	70617277 20726570 636e7566 6e6f6974     wrapper function
   40128:	726f6620 00000020 65666572 636e6572      for ...referenc
   40138:	65742065 726f706d 20797261 00000023     e temporary #...
   40148:	64646968 61206e65 7361696c 726f6620     hidden alias for
   40158:	00000020 2d6e6f6e 6e617274 74636173      ...non-transact
   40168:	206e6f69 6e6f6c63 6f662065 00002072     ion clone for ..
   40178:	7265706f 726f7461 00000000 7265706f     operator....oper
   40188:	726f7461 00000020 0000283e 00006c63     ator ...>(..cl..
   40198:	00007869 00007571 00203a20 2077656e     ix..qu.. : .new 
   401a8:	00000000 00006c75 00006c6c 006c6c75     ....ul..ll..ull.
   401b8:	736c6166 00000065 65757274 00000000     false...true....
   401c8:	6176616a 73657220 6372756f 00002065     java resource ..
   401d8:	6c636564 65707974 00002820 002e2e2e     decltype (......
   401e8:	73696874 00000000 7261707b 0000236d     this....{parm#..
   401f8:	626f6c67 63206c61 74736e6f 74637572     global construct
   40208:	2073726f 6579656b 6f742064 00000020     ors keyed to ...
   40218:	626f6c67 64206c61 72747365 6f746375     global destructo
   40228:	6b207372 64657965 206f7420 00000000     rs keyed to ....
   40238:	6d616c7b 00616462 00002329 6e6e757b     {lambda.)#..{unn
   40248:	64656d61 70797420 00002365 6c635b20     amed type#.. [cl
   40258:	20656e6f 00000000 65707974 656d616e     one ....typename
   40268:	00000000 706d6574 6574616c 00000000     ....template....
   40278:	616c6320 00007373 73657220 63697274      class.. restric
   40288:	00000074 6c6f7620 6c697461 00000065     t... volatile...
   40298:	6e6f6320 00007473 61727420 6361736e      const.. transac
   402a8:	6e6f6974 6661735f 00000065 656f6e20     tion_safe... noe
   402b8:	70656378 00000074 72687420 0000776f     xcept... throw..
   402c8:	00002626 6f435f20 656c706d 00000078     &&.. _Complex...
   402d8:	6d495f20 6e696761 00797261 002a3a3a      _Imaginary.::*.
   402e8:	765f5f20 6f746365 00002872 2e2e2e28      __vector(..(...
   402f8:	00000000 292e2e2e 00000000 2e2e2e20     .......).... ...
   40308:	00000020 00005424 00004e24 00545424      ...$T..$N..$TT.
   40318:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   40328:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   40338:	7361623a 735f6369 6e697274 00000067     :basic_string...
   40348:	69736162 74735f63 676e6972 00000000     basic_string....
   40358:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   40368:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   40378:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   40388:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   40398:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   403a8:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   403b8:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   403c8:	65727473 633c6d61 2c726168 64747320     stream<char, std
   403d8:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   403e8:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   403f8:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   40408:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   40418:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   40428:	64747320 68633a3a 745f7261 74696172      std::char_trait
   40438:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   40448:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   40458:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   40468:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   40478:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   40488:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   40498:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   404a8:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   404b8:	00006161 00006461 00000026 00006e61     aa..ad..&...an..
   404c8:	67696c61 20666f6e 00000000 00007761     alignof ....aw..
   404d8:	615f6f63 74696177 00000020 00007a61     co_await ...az..
   404e8:	00006363 736e6f63 61635f74 00007473     cc..const_cast..
   404f8:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   40508:	0000007e 00005664 00003d2f 00005864     ~...dV../=..dX..
   40518:	2e2e2e5b 00003d5d 00006164 656c6564     [...]=..da..dele
   40528:	5d5b6574 00000020 00006364 616e7964     te[] ...dc..dyna
   40538:	5f63696d 74736163 00000000 00006564     mic_cast....de..
   40548:	0000002a 00006964 00006c64 656c6564     *...di..dl..dele
   40558:	00206574 00007364 00002a2e 00007464     te .ds...*..dt..
   40568:	00007664 0000002f 00007864 00004f65     dv../...dx..eO..
   40578:	00003d5e 00006f65 0000005e 00007165     ^=..eo..^...eq..
   40588:	00003d3d 00004c66 00005266 00006c66     ==..fL..fR..fl..
   40598:	00007266 00006567 00003d3e 00007367     fr..ge..>=..gs..
   405a8:	00007467 00005d5b 0000536c 003d3c3c     gt..[]..lS..<<=.
   405b8:	00003d3c 0000696c 7265706f 726f7461     <=..li..operator
   405c8:	00202222 0000736c 00003c3c 0000746c     "" .ls..<<..lt..
   405d8:	0000003c 0000496d 00003d2d 00004c6d     <...mI..-=..mL..
   405e8:	00003d2a 0000696d 0000002d 00006c6d     *=..mi..-...ml..
   405f8:	00006d6d 00002d2d 0000616e 5b77656e     mm..--..na..new[
   40608:	0000005d 0000656e 00003d21 0000746e     ]...ne..!=..nt..
   40618:	00000021 0000776e 0077656e 0000526f     !...nw..new.oR..
   40628:	00003d7c 00006f6f 00007c7c 0000007c     |=..oo..||..|...
   40638:	00004c70 00003d2b 00006c70 0000002b     pL..+=..pl..+...
   40648:	00006d70 002a3e2d 00007070 00002b2b     pm..->*.pp..++..
   40658:	00007370 00007470 00003e2d 0000003f     ps..pt..->..?...
   40668:	00004d72 00003d25 00005372 003d3e3e     rM..%=..rS..>>=.
   40678:	00006372 6e696572 70726574 5f746572     rc..reinterpret_
   40688:	74736163 00000000 00006d72 00000025     cast....rm..%...
   40698:	00007372 00003e3e 00005073 657a6973     rs..>>..sP..size
   406a8:	2e2e666f 0000002e 00005a73 00006373     of......sZ..sc..
   406b8:	74617473 635f6369 00747361 003e3d3c     static_cast.<=>.
   406c8:	657a6973 0020666f 00007a73 00007274     sizeof .sz..tr..
   406d8:	6f726874 00000077 00007774 6f726874     throw...tw..thro
   406e8:	00002077 6e676973 63206465 00726168     w ..signed char.
   406f8:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   40708:	72616863 00000000 65747962 00000000     char....byte....
   40718:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   40728:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   40738:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   40748:	61686320 00000072 00746e69 69736e75      char...int.unsi
   40758:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   40768:	64656e67 00000000 676e6f6c 00000000     gned....long....
   40778:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   40788:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   40798:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   407a8:	726f6873 00000074 69736e75 64656e67     short...unsigned
   407b8:	6f687320 00007472 64696f76 00000000      short..void....
   407c8:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   407d8:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   407e8:	6f6c2067 0000676e 69636564 336c616d     g long..decimal3
   407f8:	00000032 69636564 366c616d 00000034     2...decimal64...
   40808:	69636564 316c616d 00003832 666c6168     decimal128..half
   40818:	00000000 72616863 00745f38 72616863     ....char8_t.char
   40828:	745f3631 00000000 72616863 745f3233     16_t....char32_t
   40838:	00000000 6f6c465f 00007461 3a647473     ...._Float..std:
   40848:	6c66623a 3174616f 00745f36 20495053     :bfloat16_t.SPI 
   40858:	64616552 414d4420 72724520 2520726f     Read DMA Error %
   40868:	00000a64                                d...

0004086c <_ZTSFijjPfE>:
   4086c:	6a6a6946 00456650                       FijjPfE.

00040874 <_ZTIFijjPfE>:
   40874:	00047c84 0004086c                       .|..l...

0004087c <_ZTSPFijjPfE>:
   4087c:	6a694650 4566506a 00000000              PFijjPfE....

00040888 <_ZTIPFijjPfE>:
   40888:	00047d18 0004087c 00000000 00040874     .}..|.......t...

00040898 <_ZTSZN14SignalWithAxes10get_signalEvEUljjPfE_>:
   40898:	34314e5a 6e676953 69576c61 78416874     ZN14SignalWithAx
   408a8:	30317365 5f746567 6e676973 76456c61     es10get_signalEv
   408b8:	6a6c5545 4566506a 0000005f              EUljjPfE_...

000408c4 <_ZTIZN14SignalWithAxes10get_signalEvEUljjPfE_>:
   408c4:	00047c24 00040898                       $|......

000408cc <_ZL13ns_pwr_config>:
   408cc:	0004779c 01010002 00010100 00000000     .w..............

000408dc <_ZL16impulse_522036_0>:
   408dc:	0007f734 0003f6e4 0003f6ec 00000001     4...............
   408ec:	0003f720 00000012 00002400 00002400      ........$...$..
   408fc:	00000001 00002400 00000060 00000060     .....$..`...`...
   4090c:	00000001 3f800000 00000000 00000001     .......?........
   4091c:	1000c078 0000000a 0000000c 00000000     x...............
   4092c:	00000120 00000001 0004095c 00000000      .......\.......
   4093c:	00000000 00000302 0003f768 00000900     ........h.......
   4094c:	00010004 1000c0b0 00000000 3e4ccccd     ..............L>

0004095c <_ZL18ei_learning_blocks>:
   4095c:	00000007 00000000 00020501 00040980     ................
   4096c:	00000000 0004097c 00000001 00000120     ....|....... ...

0004097c <_ZL26ei_learning_block_7_inputs>:
   4097c:	00000003                                ....

00040980 <_ZL26ei_learning_block_config_7>:
   40980:	00030001 00000007 01000201 00000002     ................
   40990:	3f000000 00000101 0004099c              ...?........

0004099c <_ZL24ei_config_tflite_graph_7>:
   4099c:	00000001 00024ba9 00024e69 00024edd     .....K..iN...N..
   409ac:	00024ddd 00024e25                       .M..%N..

000409b4 <_ZN6tflite23kConvQuantizedDimensionE>:
   409b4:	00000000                                ....

000409b8 <_ZN6tflite17kConvOutputTensorE>:
   409b8:	00000000                                ....

000409bc <_ZN6tflite15kConvBiasTensorE>:
   409bc:	00000002                                ....

000409c0 <_ZN6tflite18kConvWeightsTensorE>:
   409c0:	00000001                                ....

000409c4 <_ZN6tflite16kConvInputTensorE>:
   409c4:	00000000                                ....

000409c8 <_ZN6tflite32kDepthwiseConvQuantizedDimensionE>:
   409c8:	00000003                                ....

000409cc <_ZN6tflite26kDepthwiseConvOutputTensorE>:
   409cc:	00000000                                ....

000409d0 <_ZN6tflite24kDepthwiseConvBiasTensorE>:
   409d0:	00000002                                ....

000409d4 <_ZN6tflite27kDepthwiseConvWeightsTensorE>:
   409d4:	00000001                                ....

000409d8 <_ZN6tflite25kDepthwiseConvInputTensorE>:
   409d8:	00000000                                ....

000409dc <_ZTSN6tflite12MicroContextE>:
   409dc:	6674364e 6574696c 694d3231 436f7263     N6tflite12MicroC
   409ec:	65746e6f 00457478                       ontextE.

000409f4 <_ZTIN6tflite12MicroContextE>:
   409f4:	00047c24 000409dc                       $|......

000409fc <_ZTVN6tflite12MicroContextE>:
   409fc:	00000000 000409f4 00024611 00024665     .........F..eF..
   40a0c:	00024615 00024675 0002461d 00024625     .F..uF...F..%F..
   40a1c:	000246d1 00024721 00024681 00024645     .F..!G...F..EF..
   40a2c:	0002464d                                MF..

00040a30 <_ZTIN12_GLOBAL__N_115EonMicroContextE>:
   40a30:	00047d70 00040a3c 000409f4              p}..<.......

00040a3c <_ZTSN12_GLOBAL__N_115EonMicroContextE>:
   40a3c:	32314e2a 4f4c475f 5f4c4142 315f4e5f     *N12_GLOBAL__N_1
   40a4c:	6f453531 63694d6e 6f436f72 7865746e     15EonMicroContex
   40a5c:	00004574                                tE..

00040a60 <_ZTVN12_GLOBAL__N_115EonMicroContextE>:
   40a60:	00000000 00040a30 00024b25 00024b39     ....0...%K..9K..
   40a70:	00024b1d 00024b55 00024915 00024a31     .K..UK...I..1J..
   40a80:	000246d1 00024721 00024681 00024931     .F..!G...F..1I..
   40a90:	000249bd                                .I..

00040a94 <_ZN12_GLOBAL__N_1L25tflTensors_subgraph_indexE>:
   40a94:	00000000 00000048                       ....H...

00040a9c <_ZN12_GLOBAL__N_18used_opsE>:
   40a9c:	02000100 00010300 02000100 00010300     ................
   40aac:	02000100 02000100 04000000              ............

00040ab8 <_ZN12_GLOBAL__N_110tensorDataE>:
   40ab8:	00000902 10018360 0004732c 00002400     ....`...,s...$..
   40ac8:	00000001 00047310 00000201 000472f0     .....s.......r..
   40ad8:	000472d8 00000020 00000000 00000000     .r.. ...........
   40ae8:	00000901 00047290 00047274 00000048     .....r..tr..H...
   40af8:	00000001 00047220 00000201 00047200     .... r.......r..
   40b08:	000471ec 00000020 00000001 00047198     .q.. ........q..
   40b18:	00000901 00047150 00047134 00000048     ....Pq..4q..H...
   40b28:	00000001 000470e0 00000201 000470c0     .....p.......p..
   40b38:	000470b4 00000020 00000001 00047060     .p.. .......`p..
   40b48:	00000901 00047020 00047004 00000040     .... p...p..@...
   40b58:	00000001 00046fb0 00000201 00046f90     .....o.......o..
   40b68:	00046f84 00000020 00000001 00046f30     .o.. .......0o..
   40b78:	00000901 00046db0 00046d94 00000180     .....m...m......
   40b88:	00000001 00046c00 00000201 00046b40     .....l......@k..
   40b98:	00046b34 000000c0 00000001 000469a0     4k...........i..
   40ba8:	00000901 000467f0 000467d4 000001b0     .....g...g......
   40bb8:	00000001 00046640 00000201 00046580     ....@f.......e..
   40bc8:	00046574 000000c0 00000001 000463e0     te...........c..
   40bd8:	00000901 00046260 00046244 00000180     ....`b..Db......
   40be8:	00000001 000461f0 00000201 000461d0     .....a.......a..
   40bf8:	000461c4 00000020 00000001 00046170     .a.. .......pa..
   40c08:	00000901 00045ff0 00045fd4 00000180     ....._..._......
   40c18:	00000001 00045e40 00000201 00045d80     ....@^.......]..
   40c28:	00045d74 000000c0 00000001 00045be0     t]...........[..
   40c38:	00000901 00045a30 00045a14 000001b0     ....0Z...Z......
   40c48:	00000001 00045880 00000201 000457c0     .....X.......W..
   40c58:	000457b4 000000c0 00000001 00045620     .W.......... V..
   40c68:	00000901 000454a0 00045484 00000180     .....T...T......
   40c78:	00000001 00045430 00000201 00045410     ....0T.......T..
   40c88:	00045404 00000020 00000001 000453b0     .T.. ........S..
   40c98:	00000901 00045230 00045214 00000180     ....0R...R......
   40ca8:	00000001 00045080 00000201 00044fc0     .....P.......O..
   40cb8:	00044fb4 000000c0 00000001 00044e20     .O.......... N..
   40cc8:	00000901 00044c70 00044c54 000001b0     ....pL..TL......
   40cd8:	00000001 00044ac0 00000201 00044a00     .....J.......J..
   40ce8:	000449f4 000000c0 00000001 00044860     .I..........`H..
   40cf8:	00000901 000446e0 000446c4 00000180     .....F...F......
   40d08:	00000001 00044670 00000201 00044650     ....pF......PF..
   40d18:	00044644 00000020 00000001 000445f0     DF.. ........E..
   40d28:	00000901 00044470 00044454 00000180     ....pD..TD......
   40d38:	00000001 000442c0 00000201 00044200     .....B.......B..
   40d48:	000441f4 000000c0 00000001 00044060     .A..........`@..
   40d58:	00000901 00043eb0 00043e94 000001b0     .....>...>......
   40d68:	00000001 00043d00 00000201 00043c40     .....=......@<..
   40d78:	00043c34 000000c0 00000001 00043aa0     4<...........:..
   40d88:	00000901 00043920 00043904 00000180     .... 9...9......
   40d98:	00000001 000438b0 00000201 00043890     .....8.......8..
   40da8:	00043884 00000020 00000001 00043830     .8.. .......08..
   40db8:	00000901 000436b0 00043694 00000180     .....6...6......
   40dc8:	00000001 00043500 00000201 00043440     .....5......@4..
   40dd8:	00043434 000000c0 00000001 000432a0     44...........2..
   40de8:	00000901 000430f0 000430d4 000001b0     .....0...0......
   40df8:	00000001 00042f40 00000201 00042e80     ....@/..........
   40e08:	00042e74 000000c0 00000001 00042ce0     t............,..
   40e18:	00000901 00042b60 00042b44 00000180     ....`+..D+......
   40e28:	00000001 00042af0 00000201 00042ad0     .....*.......*..
   40e38:	00042ac4 00000020 00000001 00042a70     .*.. .......p*..
   40e48:	00000901 000428f0 000428d4 00000180     .....(...(......
   40e58:	00000001 00042740 00000201 00042680     ....@'.......&..
   40e68:	00042674 000000c0 00000001 000424e0     t&...........$..
   40e78:	00000901 00041ee0 00041ec4 00000600     ................
   40e88:	00000001 00041db0 00000201 00041d30     ............0...
   40e98:	00041d24 00000080 00000001 00041c10     $...............
   40ea8:	00000901 00041bd0 00041bb4 00000040     ............@...
   40eb8:	00000001 00041b90 00000201 00041b88     ................
   40ec8:	00041b80 00000008 00000001 00041b5c     ............\...
   40ed8:	00000902 10021360 00041b48 00004800     ....`...H....H..
   40ee8:	00000001 00041b2c 00000902 10018360     ....,.......`...
   40ef8:	00041b18 00004800 00000001 00041afc     .....H..........
   40f08:	00000902 1001cb60 00041ae8 00004800     ....`........H..
   40f18:	00000001 00041acc 00000902 10018360     ............`...
   40f28:	00041ab8 00004800 00000001 00041a9c     .....H..........
   40f38:	00000902 10034590 00041a88 0001b000     .....E..........
   40f48:	00000001 00041a6c 00000902 10018360     ....l.......`...
   40f58:	00041a58 0001c230 00000001 00041a3c     X...0.......<...
   40f68:	00000902 10034590 00041a28 00006c00     .....E..(....l..
   40f78:	00000001 00041a0c 00000902 10025b60     ............`[..
   40f88:	000419f8 00001200 00000001 000419dc     ................
   40f98:	00000902 1001ef60 000419c8 00006c00     ....`........l..
   40fa8:	00000001 000419ac 00000902 10018360     ............`...
   40fb8:	00041998 00006c00 00000001 0004197c     .....l......|...
   40fc8:	00000902 1001ef60 00041968 00001200     ....`...h.......
   40fd8:	00000001 0004194c 00000902 10018360     ....L.......`...
   40fe8:	00041938 00001200 00000001 0004191c     8...............
   40ff8:	00000902 1001f890 00041908 00006c00     .............l..
   41008:	00000001 000418ec 00000902 10018360     ............`...
   41018:	000418d8 00007530 00000001 000418bc     ....0u..........
   41028:	00000902 1001f890 000418a8 00001b00     ................
   41038:	00000001 0004188c 00000902 1001bde0     ................
   41048:	00041878 00000480 00000001 0004185c     x...........\...
   41058:	00000902 10019e60 00041848 00001b00     ....`...H.......
   41068:	00000001 0004182c 00000902 10018360     ....,.......`...
   41078:	00041818 00001b00 00000001 000417fc     ................
   41088:	00000902 10019e60 000417e8 00000480     ....`...........
   41098:	00000001 000417cc 00000902 1001b960     ............`...
   410a8:	000417b8 00000480 00000001 0004179c     ................
   410b8:	00000902 10019e60 00041788 00001b00     ....`...........
   410c8:	00000001 0004176c 00000902 10018360     ....l.......`...
   410d8:	00041758 00001b00 00000001 0004173c     X...........<...
   410e8:	00000902 1001a2e0 00041728 00000480     ........(.......
   410f8:	00000001 0004170c 00000902 10019e60     ............`...
   41108:	000416f8 00000480 00000001 000416dc     ................
   41118:	00000902 10018360 000416c8 00001b00     ....`...........
   41128:	00000001 000416ac 00000902 10019e60     ............`...
   41138:	00041698 00001200 00000001 0004167c     ............|...
   41148:	00000902 10018480 00041668 00000120     ........h... ...
   41158:	00000001 0004164c 00000902 10018360     ....L.......`...
   41168:	00041638 00000120 00000001 0004161c     8... ...........

00041178 <_ZN12_GLOBAL__N_12g0L9outputs27E>:
   41178:	00000001 00000047                       ....G...

00041180 <_ZN12_GLOBAL__N_12g0L8inputs27E>:
   41180:	00000001 00000046                       ....F...

00041188 <_ZN12_GLOBAL__N_12g0L8opdata27E>:
   41188:	3f800000                                ...?

0004118c <_ZN12_GLOBAL__N_12g0L9outputs26E>:
   4118c:	00000001 00000046                       ....F...

00041194 <_ZN12_GLOBAL__N_12g0L8inputs26E>:
   41194:	00000003 00000045 0000002a 0000002b     ....E...*...+...

000411a4 <_ZN12_GLOBAL__N_12g0L8opdata26E>:
   411a4:	00000002 00000001 00000001 00000000     ................
   411b4:	00000001 00000001                       ........

000411bc <_ZN12_GLOBAL__N_12g0L9outputs25E>:
   411bc:	00000001 00000045                       ....E...

000411c4 <_ZN12_GLOBAL__N_12g0L8inputs25E>:
   411c4:	00000003 00000044 00000028 00000029     ....D...(...)...

000411d4 <_ZN12_GLOBAL__N_12g0L8opdata25E>:
   411d4:	00000002 00000001 00000001 00000001     ................
   411e4:	00000001 00000001                       ........

000411ec <_ZN12_GLOBAL__N_12g0L9outputs24E>:
   411ec:	00000001 00000044                       ....D...

000411f4 <_ZN12_GLOBAL__N_12g0L8inputs24E>:
   411f4:	00000003 00000043 00000026 00000027     ....C...&...'...

00041204 <_ZN12_GLOBAL__N_12g0L8opdata24E>:
   41204:	00000001 00000001 00000001 00000003     ................
   41214:	00000001 00000001                       ........

0004121c <_ZN12_GLOBAL__N_12g0L9outputs23E>:
   4121c:	00000001 00000043                       ....C...

00041224 <_ZN12_GLOBAL__N_12g0L8inputs23E>:
   41224:	00000002 0000003f 00000042              ....?...B...

00041230 <_ZN12_GLOBAL__N_12g0L8opdata23E>:
   41230:	00000000                                ....

00041234 <_ZN12_GLOBAL__N_12g0L9outputs22E>:
   41234:	00000001 00000042                       ....B...

0004123c <_ZN12_GLOBAL__N_12g0L8inputs22E>:
   4123c:	00000003 00000041 00000024 00000025     ....A...$...%...

0004124c <_ZN12_GLOBAL__N_12g0L8opdata22E>:
   4124c:	00000001 00000001 00000001 00000000     ................
   4125c:	00000001 00000001                       ........

00041264 <_ZN12_GLOBAL__N_12g0L9outputs21E>:
   41264:	00000001 00000041                       ....A...

0004126c <_ZN12_GLOBAL__N_12g0L8inputs21E>:
   4126c:	00000003 00000040 00000022 00000023     ....@..."...#...

0004127c <_ZN12_GLOBAL__N_12g0L8opdata21E>:
   4127c:	00000001 00000001 00000001 00000001     ................
   4128c:	00000003 00000001 00000001              ............

00041298 <_ZN12_GLOBAL__N_12g0L9outputs20E>:
   41298:	00000001 00000040                       ....@...

000412a0 <_ZN12_GLOBAL__N_12g0L8inputs20E>:
   412a0:	00000003 0000003f 00000020 00000021     ....?... ...!...

000412b0 <_ZN12_GLOBAL__N_12g0L8opdata20E>:
   412b0:	00000001 00000001 00000001 00000003     ................
   412c0:	00000001 00000001                       ........

000412c8 <_ZN12_GLOBAL__N_12g0L9outputs19E>:
   412c8:	00000001 0000003f                       ....?...

000412d0 <_ZN12_GLOBAL__N_12g0L8inputs19E>:
   412d0:	00000002 0000003b 0000003e              ....;...>...

000412dc <_ZN12_GLOBAL__N_12g0L8opdata19E>:
   412dc:	00000000                                ....

000412e0 <_ZN12_GLOBAL__N_12g0L9outputs18E>:
   412e0:	00000001 0000003e                       ....>...

000412e8 <_ZN12_GLOBAL__N_12g0L8inputs18E>:
   412e8:	00000003 0000003d 0000001e 0000001f     ....=...........

000412f8 <_ZN12_GLOBAL__N_12g0L8opdata18E>:
   412f8:	00000001 00000001 00000001 00000000     ................
   41308:	00000001 00000001                       ........

00041310 <_ZN12_GLOBAL__N_12g0L9outputs17E>:
   41310:	00000001 0000003d                       ....=...

00041318 <_ZN12_GLOBAL__N_12g0L8inputs17E>:
   41318:	00000003 0000003c 0000001c 0000001d     ....<...........

00041328 <_ZN12_GLOBAL__N_12g0L8opdata17E>:
   41328:	00000001 00000001 00000001 00000001     ................
   41338:	00000003 00000001 00000001              ............

00041344 <_ZN12_GLOBAL__N_12g0L9outputs16E>:
   41344:	00000001 0000003c                       ....<...

0004134c <_ZN12_GLOBAL__N_12g0L8inputs16E>:
   4134c:	00000003 0000003b 0000001a 0000001b     ....;...........

0004135c <_ZN12_GLOBAL__N_12g0L8opdata16E>:
   4135c:	00000001 00000001 00000001 00000003     ................
   4136c:	00000001 00000001                       ........

00041374 <_ZN12_GLOBAL__N_12g0L9outputs15E>:
   41374:	00000001 0000003b                       ....;...

0004137c <_ZN12_GLOBAL__N_12g0L8inputs15E>:
   4137c:	00000003 0000003a 00000018 00000019     ....:...........

0004138c <_ZN12_GLOBAL__N_12g0L8opdata15E>:
   4138c:	00000001 00000001 00000001 00000000     ................
   4139c:	00000001 00000001                       ........

000413a4 <_ZN12_GLOBAL__N_12g0L9outputs14E>:
   413a4:	00000001 0000003a                       ....:...

000413ac <_ZN12_GLOBAL__N_12g0L8inputs14E>:
   413ac:	00000003 00000039 00000016 00000017     ....9...........

000413bc <_ZN12_GLOBAL__N_12g0L8opdata14E>:
   413bc:	00000002 00000002 00000002 00000001     ................
   413cc:	00000003 00000001 00000001              ............

000413d8 <_ZN12_GLOBAL__N_12g0L9outputs13E>:
   413d8:	00000001 00000039                       ....9...

000413e0 <_ZN12_GLOBAL__N_12g0L8inputs13E>:
   413e0:	00000002 00000038 00000001              ....8.......

000413ec <_ZN12_GLOBAL__N_12g0L9outputs12E>:
   413ec:	00000001 00000038                       ....8...

000413f4 <_ZN12_GLOBAL__N_12g0L8inputs12E>:
   413f4:	00000003 00000037 00000014 00000015     ....7...........

00041404 <_ZN12_GLOBAL__N_12g0L8opdata12E>:
   41404:	00000001 00000001 00000001 00000003     ................
   41414:	00000001 00000001                       ........

0004141c <_ZN12_GLOBAL__N_12g0L9outputs11E>:
   4141c:	00000001 00000037                       ....7...

00041424 <_ZN12_GLOBAL__N_12g0L8inputs11E>:
   41424:	00000002 00000033 00000036              ....3...6...

00041430 <_ZN12_GLOBAL__N_12g0L8opdata11E>:
   41430:	00000000                                ....

00041434 <_ZN12_GLOBAL__N_12g0L9outputs10E>:
   41434:	00000001 00000036                       ....6...

0004143c <_ZN12_GLOBAL__N_12g0L8inputs10E>:
   4143c:	00000003 00000035 00000012 00000013     ....5...........

0004144c <_ZN12_GLOBAL__N_12g0L8opdata10E>:
   4144c:	00000001 00000001 00000001 00000000     ................
   4145c:	00000001 00000001                       ........

00041464 <_ZN12_GLOBAL__N_12g0L8outputs9E>:
   41464:	00000001 00000035                       ....5...

0004146c <_ZN12_GLOBAL__N_12g0L7inputs9E>:
   4146c:	00000003 00000034 00000010 00000011     ....4...........

0004147c <_ZN12_GLOBAL__N_12g0L7opdata9E>:
   4147c:	00000001 00000001 00000001 00000001     ................
   4148c:	00000003 00000001 00000001              ............

00041498 <_ZN12_GLOBAL__N_12g0L8outputs8E>:
   41498:	00000001 00000034                       ....4...

000414a0 <_ZN12_GLOBAL__N_12g0L7inputs8E>:
   414a0:	00000003 00000033 0000000e 0000000f     ....3...........

000414b0 <_ZN12_GLOBAL__N_12g0L7opdata8E>:
   414b0:	00000001 00000001 00000001 00000003     ................
   414c0:	00000001 00000001                       ........

000414c8 <_ZN12_GLOBAL__N_12g0L8outputs7E>:
   414c8:	00000001 00000033                       ....3...

000414d0 <_ZN12_GLOBAL__N_12g0L7inputs7E>:
   414d0:	00000003 00000032 0000000c 0000000d     ....2...........

000414e0 <_ZN12_GLOBAL__N_12g0L7opdata7E>:
   414e0:	00000001 00000001 00000001 00000000     ................
   414f0:	00000001 00000001                       ........

000414f8 <_ZN12_GLOBAL__N_12g0L8outputs6E>:
   414f8:	00000001 00000032                       ....2...

00041500 <_ZN12_GLOBAL__N_12g0L7inputs6E>:
   41500:	00000003 00000031 0000000a 0000000b     ....1...........

00041510 <_ZN12_GLOBAL__N_12g0L7opdata6E>:
   41510:	00000002 00000002 00000002 00000001     ................
   41520:	00000003 00000001 00000001              ............

0004152c <_ZN12_GLOBAL__N_12g0L8outputs5E>:
   4152c:	00000001 00000031                       ....1...

00041534 <_ZN12_GLOBAL__N_12g0L7inputs5E>:
   41534:	00000002 00000030 00000001              ....0.......

00041540 <_ZN12_GLOBAL__N_12g0L8outputs4E>:
   41540:	00000001 00000030                       ....0...

00041548 <_ZN12_GLOBAL__N_12g0L7inputs4E>:
   41548:	00000003 0000002f 00000008 00000009     ..../...........

00041558 <_ZN12_GLOBAL__N_12g0L7opdata4E>:
   41558:	00000001 00000001 00000001 00000003     ................
   41568:	00000001 00000001                       ........

00041570 <_ZN12_GLOBAL__N_12g0L8outputs3E>:
   41570:	00000001 0000002f                       ..../...

00041578 <_ZN12_GLOBAL__N_12g0L7inputs3E>:
   41578:	00000002 0000002c 0000002e              ....,.......

00041584 <_ZN12_GLOBAL__N_12g0L7opdata3E>:
   41584:	00000000                                ....

00041588 <_ZN12_GLOBAL__N_12g0L8outputs2E>:
   41588:	00000001 0000002e                       ........

00041590 <_ZN12_GLOBAL__N_12g0L7inputs2E>:
   41590:	00000003 0000002d 00000006 00000007     ....-...........

000415a0 <_ZN12_GLOBAL__N_12g0L7opdata2E>:
   415a0:	00000001 00000001 00000001 00000000     ................
   415b0:	00000001 00000001                       ........

000415b8 <_ZN12_GLOBAL__N_12g0L8outputs1E>:
   415b8:	00000001 0000002d                       ....-...

000415c0 <_ZN12_GLOBAL__N_12g0L7inputs1E>:
   415c0:	00000003 0000002c 00000004 00000005     ....,...........

000415d0 <_ZN12_GLOBAL__N_12g0L7opdata1E>:
   415d0:	00000001 00000001 00000001 00000001     ................
   415e0:	00000003 00000001 00000001              ............

000415ec <_ZN12_GLOBAL__N_12g0L8outputs0E>:
   415ec:	00000001 0000002c                       ....,...

000415f4 <_ZN12_GLOBAL__N_12g0L7inputs0E>:
   415f4:	00000003 00000000 00000002 00000003     ................

00041604 <_ZN12_GLOBAL__N_12g0L7opdata0E>:
   41604:	00000001 00000002 00000002 00000003     ................
   41614:	00000001 00000001                       ........

0004161c <_ZN12_GLOBAL__N_12g0L7quant71E>:
   4161c:	00041630 00041628 00000000              0...(.......

00041628 <_ZN12_GLOBAL__N_12g0L12quant71_zeroE>:
   41628:	00000001 ffffff80                       ........

00041630 <_ZN12_GLOBAL__N_12g0L13quant71_scaleE>:
   41630:	00000001 3b800000                       .......;

00041638 <_ZN12_GLOBAL__N_12g0L18tensor_dimension71E>:
   41638:	00000004 00000001 0000000c 0000000c     ................
   41648:	00000002                                ....

0004164c <_ZN12_GLOBAL__N_12g0L7quant70E>:
   4164c:	00041660 00041658 00000000              `...X.......

00041658 <_ZN12_GLOBAL__N_12g0L12quant70_zeroE>:
   41658:	00000001 fffffff1                       ........

00041660 <_ZN12_GLOBAL__N_12g0L13quant70_scaleE>:
   41660:	00000001 3d573d6a                       ....j=W=

00041668 <_ZN12_GLOBAL__N_12g0L18tensor_dimension70E>:
   41668:	00000004 00000001 0000000c 0000000c     ................
   41678:	00000002                                ....

0004167c <_ZN12_GLOBAL__N_12g0L7quant69E>:
   4167c:	00041690 00041688 00000000              ............

00041688 <_ZN12_GLOBAL__N_12g0L12quant69_zeroE>:
   41688:	00000001 ffffff80                       ........

00041690 <_ZN12_GLOBAL__N_12g0L13quant69_scaleE>:
   41690:	00000001 3cb2fba7                       .......<

00041698 <_ZN12_GLOBAL__N_12g0L18tensor_dimension69E>:
   41698:	00000004 00000001 0000000c 0000000c     ................
   416a8:	00000020                                 ...

000416ac <_ZN12_GLOBAL__N_12g0L7quant68E>:
   416ac:	000416c0 000416b8 00000000              ............

000416b8 <_ZN12_GLOBAL__N_12g0L12quant68_zeroE>:
   416b8:	00000001 ffffff80                       ........

000416c0 <_ZN12_GLOBAL__N_12g0L13quant68_scaleE>:
   416c0:	00000001 3ca2355b                       ....[5.<

000416c8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension68E>:
   416c8:	00000004 00000001 0000000c 0000000c     ................
   416d8:	00000030                                0...

000416dc <_ZN12_GLOBAL__N_12g0L7quant67E>:
   416dc:	000416f0 000416e8 00000000              ............

000416e8 <_ZN12_GLOBAL__N_12g0L12quant67_zeroE>:
   416e8:	00000001 fffffffe                       ........

000416f0 <_ZN12_GLOBAL__N_12g0L13quant67_scaleE>:
   416f0:	00000001 3da2c462                       ....b..=

000416f8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension67E>:
   416f8:	00000004 00000001 0000000c 0000000c     ................
   41708:	00000008                                ....

0004170c <_ZN12_GLOBAL__N_12g0L7quant66E>:
   4170c:	00041720 00041718 00000000               ...........

00041718 <_ZN12_GLOBAL__N_12g0L12quant66_zeroE>:
   41718:	00000001 00000005                       ........

00041720 <_ZN12_GLOBAL__N_12g0L13quant66_scaleE>:
   41720:	00000001 3d3c1d9e                       ......<=

00041728 <_ZN12_GLOBAL__N_12g0L18tensor_dimension66E>:
   41728:	00000004 00000001 0000000c 0000000c     ................
   41738:	00000008                                ....

0004173c <_ZN12_GLOBAL__N_12g0L7quant65E>:
   4173c:	00041750 00041748 00000000              P...H.......

00041748 <_ZN12_GLOBAL__N_12g0L12quant65_zeroE>:
   41748:	00000001 ffffff80                       ........

00041750 <_ZN12_GLOBAL__N_12g0L13quant65_scaleE>:
   41750:	00000001 3cc0c0c1                       .......<

00041758 <_ZN12_GLOBAL__N_12g0L18tensor_dimension65E>:
   41758:	00000004 00000001 0000000c 0000000c     ................
   41768:	00000030                                0...

0004176c <_ZN12_GLOBAL__N_12g0L7quant64E>:
   4176c:	00041780 00041778 00000000              ....x.......

00041778 <_ZN12_GLOBAL__N_12g0L12quant64_zeroE>:
   41778:	00000001 ffffff80                       ........

00041780 <_ZN12_GLOBAL__N_12g0L13quant64_scaleE>:
   41780:	00000001 3c94eb8d                       .......<

00041788 <_ZN12_GLOBAL__N_12g0L18tensor_dimension64E>:
   41788:	00000004 00000001 0000000c 0000000c     ................
   41798:	00000030                                0...

0004179c <_ZN12_GLOBAL__N_12g0L7quant63E>:
   4179c:	000417b0 000417a8 00000000              ............

000417a8 <_ZN12_GLOBAL__N_12g0L12quant63_zeroE>:
   417a8:	00000001 00000001                       ........

000417b0 <_ZN12_GLOBAL__N_12g0L13quant63_scaleE>:
   417b0:	00000001 3d68d66e                       ....n.h=

000417b8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension63E>:
   417b8:	00000004 00000001 0000000c 0000000c     ................
   417c8:	00000008                                ....

000417cc <_ZN12_GLOBAL__N_12g0L7quant62E>:
   417cc:	000417e0 000417d8 00000000              ............

000417d8 <_ZN12_GLOBAL__N_12g0L12quant62_zeroE>:
   417d8:	00000001 fffffff1                       ........

000417e0 <_ZN12_GLOBAL__N_12g0L13quant62_scaleE>:
   417e0:	00000001 3d353145                       ....E15=

000417e8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension62E>:
   417e8:	00000004 00000001 0000000c 0000000c     ................
   417f8:	00000008                                ....

000417fc <_ZN12_GLOBAL__N_12g0L7quant61E>:
   417fc:	00041810 00041808 00000000              ............

00041808 <_ZN12_GLOBAL__N_12g0L12quant61_zeroE>:
   41808:	00000001 ffffff80                       ........

00041810 <_ZN12_GLOBAL__N_12g0L13quant61_scaleE>:
   41810:	00000001 3cc0c0c1                       .......<

00041818 <_ZN12_GLOBAL__N_12g0L18tensor_dimension61E>:
   41818:	00000004 00000001 0000000c 0000000c     ................
   41828:	00000030                                0...

0004182c <_ZN12_GLOBAL__N_12g0L7quant60E>:
   4182c:	00041840 00041838 00000000              @...8.......

00041838 <_ZN12_GLOBAL__N_12g0L12quant60_zeroE>:
   41838:	00000001 ffffff80                       ........

00041840 <_ZN12_GLOBAL__N_12g0L13quant60_scaleE>:
   41840:	00000001 3ca9c6b3                       .......<

00041848 <_ZN12_GLOBAL__N_12g0L18tensor_dimension60E>:
   41848:	00000004 00000001 0000000c 0000000c     ................
   41858:	00000030                                0...

0004185c <_ZN12_GLOBAL__N_12g0L7quant59E>:
   4185c:	00041870 00041868 00000000              p...h.......

00041868 <_ZN12_GLOBAL__N_12g0L12quant59_zeroE>:
   41868:	00000001 fffffffb                       ........

00041870 <_ZN12_GLOBAL__N_12g0L13quant59_scaleE>:
   41870:	00000001 3d5084e9                       ......P=

00041878 <_ZN12_GLOBAL__N_12g0L18tensor_dimension59E>:
   41878:	00000004 00000001 0000000c 0000000c     ................
   41888:	00000008                                ....

0004188c <_ZN12_GLOBAL__N_12g0L7quant58E>:
   4188c:	000418a0 00041898 00000000              ............

00041898 <_ZN12_GLOBAL__N_12g0L12quant58_zeroE>:
   41898:	00000001 ffffff80                       ........

000418a0 <_ZN12_GLOBAL__N_12g0L13quant58_scaleE>:
   418a0:	00000001 3cc0c0c1                       .......<

000418a8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension58E>:
   418a8:	00000004 00000001 0000000c 0000000c     ................
   418b8:	00000030                                0...

000418bc <_ZN12_GLOBAL__N_12g0L7quant57E>:
   418bc:	000418d0 000418c8 00000000              ............

000418c8 <_ZN12_GLOBAL__N_12g0L12quant57_zeroE>:
   418c8:	00000001 ffffff80                       ........

000418d0 <_ZN12_GLOBAL__N_12g0L13quant57_scaleE>:
   418d0:	00000001 3cc0c0c1                       .......<

000418d8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension57E>:
   418d8:	00000004 00000001 00000019 00000019     ................
   418e8:	00000030                                0...

000418ec <_ZN12_GLOBAL__N_12g0L7quant56E>:
   418ec:	00041900 000418f8 00000000              ............

000418f8 <_ZN12_GLOBAL__N_12g0L12quant56_zeroE>:
   418f8:	00000001 ffffff80                       ........

00041900 <_ZN12_GLOBAL__N_12g0L13quant56_scaleE>:
   41900:	00000001 3cc0c0c1                       .......<

00041908 <_ZN12_GLOBAL__N_12g0L18tensor_dimension56E>:
   41908:	00000004 00000001 00000018 00000018     ................
   41918:	00000030                                0...

0004191c <_ZN12_GLOBAL__N_12g0L7quant55E>:
   4191c:	00041930 00041928 00000000              0...(.......

00041928 <_ZN12_GLOBAL__N_12g0L12quant55_zeroE>:
   41928:	00000001 ffffffee                       ........

00041930 <_ZN12_GLOBAL__N_12g0L13quant55_scaleE>:
   41930:	00000001 3dd08007                       .......=

00041938 <_ZN12_GLOBAL__N_12g0L18tensor_dimension55E>:
   41938:	00000004 00000001 00000018 00000018     ................
   41948:	00000008                                ....

0004194c <_ZN12_GLOBAL__N_12g0L7quant54E>:
   4194c:	00041960 00041958 00000000              `...X.......

00041958 <_ZN12_GLOBAL__N_12g0L12quant54_zeroE>:
   41958:	00000001 ffffffe9                       ........

00041960 <_ZN12_GLOBAL__N_12g0L13quant54_scaleE>:
   41960:	00000001 3dcaca7c                       ....|..=

00041968 <_ZN12_GLOBAL__N_12g0L18tensor_dimension54E>:
   41968:	00000004 00000001 00000018 00000018     ................
   41978:	00000008                                ....

0004197c <_ZN12_GLOBAL__N_12g0L7quant53E>:
   4197c:	00041990 00041988 00000000              ............

00041988 <_ZN12_GLOBAL__N_12g0L12quant53_zeroE>:
   41988:	00000001 ffffff80                       ........

00041990 <_ZN12_GLOBAL__N_12g0L13quant53_scaleE>:
   41990:	00000001 3cc0c0c1                       .......<

00041998 <_ZN12_GLOBAL__N_12g0L18tensor_dimension53E>:
   41998:	00000004 00000001 00000018 00000018     ................
   419a8:	00000030                                0...

000419ac <_ZN12_GLOBAL__N_12g0L7quant52E>:
   419ac:	000419c0 000419b8 00000000              ............

000419b8 <_ZN12_GLOBAL__N_12g0L12quant52_zeroE>:
   419b8:	00000001 ffffff80                       ........

000419c0 <_ZN12_GLOBAL__N_12g0L13quant52_scaleE>:
   419c0:	00000001 3cc0c0c1                       .......<

000419c8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension52E>:
   419c8:	00000004 00000001 00000018 00000018     ................
   419d8:	00000030                                0...

000419dc <_ZN12_GLOBAL__N_12g0L7quant51E>:
   419dc:	000419f0 000419e8 00000000              ............

000419e8 <_ZN12_GLOBAL__N_12g0L12quant51_zeroE>:
   419e8:	00000001 00000006                       ........

000419f0 <_ZN12_GLOBAL__N_12g0L13quant51_scaleE>:
   419f0:	00000001 3d557863                       ....cxU=

000419f8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension51E>:
   419f8:	00000004 00000001 00000018 00000018     ................
   41a08:	00000008                                ....

00041a0c <_ZN12_GLOBAL__N_12g0L7quant50E>:
   41a0c:	00041a20 00041a18 00000000               ...........

00041a18 <_ZN12_GLOBAL__N_12g0L12quant50_zeroE>:
   41a18:	00000001 ffffff80                       ........

00041a20 <_ZN12_GLOBAL__N_12g0L13quant50_scaleE>:
   41a20:	00000001 3cc0c0c1                       .......<

00041a28 <_ZN12_GLOBAL__N_12g0L18tensor_dimension50E>:
   41a28:	00000004 00000001 00000018 00000018     ................
   41a38:	00000030                                0...

00041a3c <_ZN12_GLOBAL__N_12g0L7quant49E>:
   41a3c:	00041a50 00041a48 00000000              P...H.......

00041a48 <_ZN12_GLOBAL__N_12g0L12quant49_zeroE>:
   41a48:	00000001 ffffff80                       ........

00041a50 <_ZN12_GLOBAL__N_12g0L13quant49_scaleE>:
   41a50:	00000001 3cc0c0c1                       .......<

00041a58 <_ZN12_GLOBAL__N_12g0L18tensor_dimension49E>:
   41a58:	00000004 00000001 00000031 00000031     ........1...1...
   41a68:	00000030                                0...

00041a6c <_ZN12_GLOBAL__N_12g0L7quant48E>:
   41a6c:	00041a80 00041a78 00000000              ....x.......

00041a78 <_ZN12_GLOBAL__N_12g0L12quant48_zeroE>:
   41a78:	00000001 ffffff80                       ........

00041a80 <_ZN12_GLOBAL__N_12g0L13quant48_scaleE>:
   41a80:	00000001 3cc0c0c1                       .......<

00041a88 <_ZN12_GLOBAL__N_12g0L18tensor_dimension48E>:
   41a88:	00000004 00000001 00000030 00000030     ........0...0...
   41a98:	00000030                                0...

00041a9c <_ZN12_GLOBAL__N_12g0L7quant47E>:
   41a9c:	00041ab0 00041aa8 00000000              ............

00041aa8 <_ZN12_GLOBAL__N_12g0L12quant47_zeroE>:
   41aa8:	00000001 ffffffff                       ........

00041ab0 <_ZN12_GLOBAL__N_12g0L13quant47_scaleE>:
   41ab0:	00000001 3d979155                       ....U..=

00041ab8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension47E>:
   41ab8:	00000004 00000001 00000030 00000030     ........0...0...
   41ac8:	00000008                                ....

00041acc <_ZN12_GLOBAL__N_12g0L7quant46E>:
   41acc:	00041ae0 00041ad8 00000000              ............

00041ad8 <_ZN12_GLOBAL__N_12g0L12quant46_zeroE>:
   41ad8:	00000001 0000001c                       ........

00041ae0 <_ZN12_GLOBAL__N_12g0L13quant46_scaleE>:
   41ae0:	00000001 3d76c942                       ....B.v=

00041ae8 <_ZN12_GLOBAL__N_12g0L18tensor_dimension46E>:
   41ae8:	00000004 00000001 00000030 00000030     ........0...0...
   41af8:	00000008                                ....

00041afc <_ZN12_GLOBAL__N_12g0L7quant45E>:
   41afc:	00041b10 00041b08 00000000              ............

00041b08 <_ZN12_GLOBAL__N_12g0L12quant45_zeroE>:
   41b08:	00000001 ffffff80                       ........

00041b10 <_ZN12_GLOBAL__N_12g0L13quant45_scaleE>:
   41b10:	00000001 3cc0c0c1                       .......<

00041b18 <_ZN12_GLOBAL__N_12g0L18tensor_dimension45E>:
   41b18:	00000004 00000001 00000030 00000030     ........0...0...
   41b28:	00000008                                ....

00041b2c <_ZN12_GLOBAL__N_12g0L7quant44E>:
   41b2c:	00041b40 00041b38 00000000              @...8.......

00041b38 <_ZN12_GLOBAL__N_12g0L12quant44_zeroE>:
   41b38:	00000001 ffffff80                       ........

00041b40 <_ZN12_GLOBAL__N_12g0L13quant44_scaleE>:
   41b40:	00000001 3cc0c0c1                       .......<

00041b48 <_ZN12_GLOBAL__N_12g0L18tensor_dimension44E>:
   41b48:	00000004 00000001 00000030 00000030     ........0...0...
   41b58:	00000008                                ....

00041b5c <_ZN12_GLOBAL__N_12g0L7quant43E>:
   41b5c:	00041b74 00041b68 00000000              t...h.......

00041b68 <_ZN12_GLOBAL__N_12g0L12quant43_zeroE>:
   41b68:	00000002 00000000 00000000              ............

00041b74 <_ZN12_GLOBAL__N_12g0L13quant43_scaleE>:
   41b74:	00000002 38a6c4a5 38a4a951              .......8Q..8

00041b80 <_ZN12_GLOBAL__N_12g0L18tensor_dimension43E>:
   41b80:	00000001 00000002                       ........

00041b88 <_ZN12_GLOBAL__N_12g0L13tensor_data43E>:
   41b88:	0000e67f ffff19f6                       ........

00041b90 <_ZN12_GLOBAL__N_12g0L7quant42E>:
   41b90:	00041ba8 00041b9c 00000000              ............

00041b9c <_ZN12_GLOBAL__N_12g0L12quant42_zeroE>:
   41b9c:	00000002 00000000 00000000              ............

00041ba8 <_ZN12_GLOBAL__N_12g0L13quant42_scaleE>:
   41ba8:	00000002 3b6e876e 3b6b8407              ....n.n;..k;

00041bb4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension42E>:
   41bb4:	00000004 00000002 00000001 00000001     ................
   41bc4:	00000020 00000000 00000000               ...........

00041bd0 <_ZN12_GLOBAL__N_12g0L13tensor_data42E>:
   41bd0:	c5e7e0c5 087f095d d7b0b32e f77fed55     ....].......U...
   41be0:	125df89f d67ae45a a51465dc 1715abbb     ..].Z.z..e......
   41bf0:	bc9a7f61 ce0e6519 3c92a03d 482307be     a....e..=..<..#H
   41c00:	4c5963ad 34dbf6bf a8b3fc68 99735a40     .cYL...4h...@Zs.

00041c10 <_ZN12_GLOBAL__N_12g0L7quant41E>:
   41c10:	00041ca0 00041c1c 00000000              ............

00041c1c <_ZN12_GLOBAL__N_12g0L12quant41_zeroE>:
   41c1c:	00000020 00000000 00000000 00000000      ...............
	...

00041ca0 <_ZN12_GLOBAL__N_12g0L13quant41_scaleE>:
   41ca0:	00000020 383eb062 383a6d7a 3842393e      ...b.>8zm:8>9B8
   41cb0:	3834b876 383aa060 383e8d9d 383714c9     v.48`.:8..>8..78
   41cc0:	382ef38a 383b52ca 382fc81f 3849fe27     ...8.R;8../8'.I8
   41cd0:	3837ba26 383266e8 383d1d5f 383b15b9     &.78.f28_.=8..;8
   41ce0:	383f3614 3838a9a5 383a03b8 383ec266     .6?8..88..:8f.>8
   41cf0:	38333346 38338d17 3833e69e 385c3fd5     F338..38..38.?\8
   41d00:	383776f6 38403486 3832137e 3831d50d     .v78.4@8~.28..18
   41d10:	38329824 38399a5a 383e05b7 383ac171     $.28Z.98..>8q.:8
   41d20:	382d9a28                                (.-8

00041d24 <_ZN12_GLOBAL__N_12g0L18tensor_dimension41E>:
   41d24:	00000001 00000020 00000000              .... .......

00041d30 <_ZN12_GLOBAL__N_12g0L13tensor_data41E>:
   41d30:	000001dd 000001e5 000002c6 fffffe54     ............T...
   41d40:	000001f0 00000159 00000212 fffffec7     ....Y...........
   41d50:	fffffd35 ffffff2f 000002c6 000001aa     5.../...........
   41d60:	00000085 0000015c 0000019e fffffee0     ....\...........
   41d70:	fffffed6 000001fb fffffe79 0000017b     ........y...{...
   41d80:	fffffe80 fffffdc9 00000482 00000157     ............W...
   41d90:	00000153 ffffff92 ffffff27 ffffff90     S.......'.......
   41da0:	00000151 000001df 0000018c fffffe8a     Q...............

00041db0 <_ZN12_GLOBAL__N_12g0L7quant40E>:
   41db0:	00041e40 00041dbc 00000000              @...........

00041dbc <_ZN12_GLOBAL__N_12g0L12quant40_zeroE>:
   41dbc:	00000020 00000000 00000000 00000000      ...............
	...

00041e40 <_ZN12_GLOBAL__N_12g0L13quant40_scaleE>:
   41e40:	00000020 3b167969 3b131c91 3b194371      ...iy.;...;qC.;
   41e50:	3b0e9bab 3b1344bb 3b165df9 3b10788b     ...;.D.;.].;.x.;
   41e60:	3b0a0e37 3b13d185 3b0ab5f7 3b1f64e8     7..;...;...;.d.;
   41e70:	3b10fb09 3b0cc74a 3b153b64 3b13a155     ...;J..;d;.;U..;
   41e80:	3b16e2e9 3b11b806 3b12c91d 3b1687a0     ...;...;...;...;
   41e90:	3b0d688e 3b0daf6e 3b0df614 3b2dccf2     .h.;n..;...;..-;
   41ea0:	3b10c604 3b17abb2 3b0c8577 3b0c5431     ...;...;w..;1T.;
   41eb0:	3b0cee24 3b1275f7 3b15f2bc 3b135ed3     $..;.u.;...;.^.;
   41ec0:	3b08fdac                                ...;

00041ec4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension40E>:
   41ec4:	00000004 00000020 00000001 00000001     .... ...........
   41ed4:	00000030 00000000 00000000              0...........

00041ee0 <_ZN12_GLOBAL__N_12g0L13tensor_data40E>:
   41ee0:	b12b4821 520b19c5 b495eb01 42d67fa4     !H+....R.......B
   41ef0:	10266729 22e1a6e7 7ef7a877 0e56bd47     )g&...."w..~G.V.
   41f00:	c7265ca8 f1aa19f2 ba76e1aa 70bcf957     .\&.......v.W..p
   41f10:	2c550850 7f0bbe26 4cb4492c a7239c92     P.U,&...,I.L..#.
   41f20:	ea15e3c4 baac5f70 c6d2013a c5f03764     ....p_..:...d7..
   41f30:	b5a7a99b 0fd4c32d 1bfd790e 2bdf0834     ....-....y..4..+
   41f40:	a7b5eb10 154f1ddb ddc9e41e 94c55e3b     ......O.....;^..
   41f50:	2ddd38d2 252fdcbb d2e943b4 2cc1f2f5     .8.-../%.C.....,
   41f60:	1743e741 52d31abf 547fe73e 344f09ce     A.C....R>..T..O4
   41f70:	a63d64a8 494c6968 ba2b0f66 7a6d286b     .d=.hiLIf.+.k(mz
   41f80:	68bf4881 02a84dae 0e9a4d67 6fcb1f34     .H.h.M..gM..4..o
   41f90:	9a191c98 c1a5d399 1bb8ce9c d9d88ba9     ................
   41fa0:	fb5f29ae d9ee114b cfa4491f a42768c1     .)_.K....I...h'.
   41fb0:	bce53041 ea9256ab 326294ed 297f9712     A0...V....b2...)
   41fc0:	cecd319e 9e92fa69 a1a16a75 deda5cfb     .1..i...uj...\..
   41fd0:	c9d773a4 44d8ed24 2d3aaff9 697528b3     .s..$..D..:-.(ui
   41fe0:	fe6e7f8c 72cf0e76 cad2389a 05492deb     ..n.v..r.8...-I.
   41ff0:	3e4946ae d6c4c771 c3f60357 fa0f7c74     .FI>q...W...t|..
   42000:	9f0af878 9d3fe797 7f285621 7eecbc3d     x.....?.!V(.=..~
   42010:	632d68b7 23617892 9ca035c7 390aa5d5     .h-c.xa#.5.....9
   42020:	564f12b4 3e0ed194 0a5532a9 eaa1599a     ..OV...>.2U..Y..
   42030:	81c4334f badbe370 ddf6a314 4e6873cb     O3..p........shN
   42040:	37cdfa4f bdf1974b 7244b66a 0aeed998     O..7K...j.Dr....
   42050:	d747cf84 ab00fb7b 5aba208c c4a4b507     ..G.{.... .Z....
   42060:	e781c3bb 8fe0f836 926e8958 ee8190da     ....6...X.n.....
   42070:	b24e440f b9523059 9b0295b7 f08ea6ab     .DN.Y0R.........
   42080:	6397eac7 acbe8d81 db1b17e3 51e1bcf0     ...c...........Q
   42090:	5016dadb 21553d1b 3c492c07 e8dc376e     ...P.=U!.,I<n7..
   420a0:	a8b3bf11 e516559e 35e1bba3 33dc8141     .....U.....5A..3
   420b0:	e277bead bcb5fbdf 09005b6c ec203c27     ..w.....l[..'< .
   420c0:	b9bb38af b48e55de 4d619d41 0b482806     .8...U..A.aM.(H.
   420d0:	2ab61d7f 56edd605 ebf66c1e a800c1a4     ...*...V.l......
   420e0:	af77324b 7b44be78 442d1e58 11082df2     K2w.x.D{X.-D.-..
   420f0:	aec3415d aee00367 fe2e3db4 a23fbf20     ]A..g....=.. .?.
   42100:	d6f85490 b84adede 62376baf 330a3a11     .T....J..k7b.:.3
   42110:	bb905b28 b6cd7f14 8a75a13d eda32664     ([......=.u.d&..
   42120:	7fa6e6ad aabdc80b 32e0f8df 4fc997b4     ...........2...O
   42130:	7d1bd745 334ade94 0fc46ff9 545b9b6e     E..}..J3.o..n.[T
   42140:	ab03db40 4d5a9f0b b9355d61 6cc9f72a     @.....ZMa]5.*..l
   42150:	b45c1b41 c9322674 251c9e28 343264fa     A.\.t&2.(..%.d24
   42160:	620f3d4b b7f6f57f bce0b370 fdd2a62a     K=.b....p...*...
   42170:	fb208bd0 1d4d944d 3f4ec6f8 3c48f94a     .. .M.M...N?J.H<
   42180:	3d61c9db fa19b240 c2e74d04 29ec7607     ..a=@....M...v.)
   42190:	a4f5eba1 ded22e00 1f53f1e2 dc56b652     ..........S.R.V.
   421a0:	1f7d63e7 a6ab5124 1d7b7f72 d702be5a     .c}.$Q..r.{.Z...
   421b0:	b4fd3917 2e0556a3 d46cca84 dbd1bfee     .9...V....l.....
   421c0:	0d9854d8 e1c0a3dd 695df8f8 1881a8e8     .T........]i....
   421d0:	dfce5c34 8ed36bdf c06674c2 9aa32650     4\...k...tf.P&..
   421e0:	779514f6 6a62b853 b45625d0 e18154c8     ...wS.bj.%V..T..
   421f0:	dfbe4f35 0c93e584 12c3b664 1f6c5ec7     5O......d....^l.
   42200:	0b11cec5 3f855bed c74e1b2b c091ef96     .....[.?+.N.....
   42210:	d99762f4 6fdd2eed f568e929 b72b70e3     .b.....o).h..p+.
   42220:	4fef5818 f4c8f71b bbcd13a3 a14c38e0     .X.O.........8L.
   42230:	2fe6d635 2bead12e a2e97fe0 a2b61c7b     5../...+....{...
   42240:	e48a8849 97890839 aea727c7 161457fa     I...9....'...W..
   42250:	d1ac5111 1d102ca4 9521eb18 891a81e2     .Q...,....!.....
   42260:	bb6747e0 a4bbd919 c0691099 bf5c1ee3     .Gg.......i...\.
   42270:	539d444c 0eca5677 db08e36d ce7e584d     LD.SwV..m...MX~.
   42280:	7de7a423 7f21b3ac ec14fc57 927a345a     #..}..!.W...Z4z.
   42290:	5aaae93d 13bfed99 2e38304c 6c9c37e6     =..Z....L08..7.l
   422a0:	40e5a2f2 2b521361 fb16aebd a3fa9edd     ...@a.R+........
   422b0:	266cbeeb e0628138 11b37385 01c6a7ff     ..l&8.b..s......
   422c0:	bb546a38 188a0f6b eb9c8266 cdce0c29     8jT.k...f...)...
   422d0:	a96a7245 cdabcade 9d1273e6 9899b4bf     Erj......s......
   422e0:	91ade5dc c66e37dc ee492168 036d95c4     .....7n.h!I...m.
   422f0:	66622392 1b82a087 07ce3803 448165ae     .#bf.....8...e.D
   42300:	f548c6fc 4b62aea7 1d0be61e a3e728da     ..H...bK.....(..
   42310:	4fb00ec3 5706783e 2fe8158f c2cdbee2     ...O>x.W.../....
   42320:	48347fd8 cfe6af23 0bcbf4e5 e17ceb50     ..4H#.......P.|.
   42330:	da1001de 134812a9 9a3ca421 cb4c6092     ......H.!.<..`L.
   42340:	203f3220 ff426c3c c6a4d044 7d025aa1      2? <lB.D....Z.}
   42350:	ed71bd40 ab517602 926c377f 6da504a6     @.q..vQ..7l....m
   42360:	69785c03 72a0f44a 61b2ab0a c0020a1e     .\xiJ..r...a....
   42370:	5ecf31ea 28eeef7f d0b149f6 ef6c7e62     .1.^...(.I..b~l.
   42380:	eefad468 aab1db18 2bb7770e c33d53df     h........w.+.S=.
   42390:	57f3f7e9 2f9613fa 333f39db 98584c98     ...W.../.9?3.LX.
   423a0:	0395eedb 65e06c43 b5d9a116 42914245     ....Cl.e....EB.B
   423b0:	7f64bcb9 79943a82 0d48678e 8d82a2ec     ..d..:.y.gH.....
   423c0:	fafaad4f d3699056 01a1d82b ea24b4d2     O...V.i.+.....$.
   423d0:	aaa70878 6049c52f 303fd9f3 d1c8f515     x.../.I`..?0....
   423e0:	7a2e38f0 728160fd 98de0364 0e7d36f5     .8.z.`.rd....6}.
   423f0:	7b852c3b fb04e0de f6df5e9d cc534e86     ;,.{.....^...NS.
   42400:	88f18628 9c5839e3 3cd54e8d 8143bd61     (....9X..N.<a.C.
   42410:	6e26a375 d3ae3b74 42e23923 b473a147     u.&nt;..#9.BG.s.
   42420:	52d67990 009b6b15 599ac747 911fbb49     .y.R.k..G..YI...
   42430:	693255b7 ac0e546f 7f3ec258 30f220d2     .U2ioT..X.>.. .0
   42440:	c9e013d3 7adb6c2e 3c00eea6 06f9787c     .....l.z...<|x..
   42450:	102ff01e 992512f3 b8d3f5dc dcbefa4e     ../...%.....N...
   42460:	71c9685a abb0c729 e792d16c 27d066de     Zh.q)...l....f.'
   42470:	00747290 e11eadf2 15f4dd7f 089a47c0     .rt..........G..
   42480:	c9ada1b9 0b3e6749 451e30bd 819d4165     ....Ig>..0.EeA..
   42490:	0f5a785f b97eb7fb 16d9411f 3410db5a     _xZ...~..A..Z..4
   424a0:	201ddff6 e955e1ae 9fbdacfc e0df7d5c     ... ..U.....\}..
   424b0:	d7497f27 a363f3b3 b741bfa1 1c5e9fa7     '.I...c...A...^.
   424c0:	1ada30f9 0464d0e2 bae35b3a 43374fe5     .0....d.:[...O7C
   424d0:	6d3a265f a9ee732f 2c9969f7 f82b6715     _&:m/s...i.,.g+.

000424e0 <_ZN12_GLOBAL__N_12g0L7quant39E>:
   424e0:	000425b0 000424ec 00000000              .%...$......

000424ec <_ZN12_GLOBAL__N_12g0L12quant39_zeroE>:
   424ec:	00000030 00000000 00000000 00000000     0...............
	...

000425b0 <_ZN12_GLOBAL__N_12g0L13quant39_scaleE>:
   425b0:	00000030 3970a758 397e8f19 393fb770     0...X.p9..~9p.?9
   425c0:	398e8fdf 39290742 39829d40 3928ca78     ...9B.)9@..9x.(9
   425d0:	3911f3b2 391e5066 39441a21 398736ad     ...9fP.9!.D9.6.9
   425e0:	38b6ee17 39358b9b 39289190 39077cb0     ...8..59..(9.|.9
   425f0:	391c3ee3 397116fd 3903d296 3969d4d1     .>.9..q9...9..i9
   42600:	39337bd7 392d9269 38392121 387fbf8e     .{39i.-9!!98...8
   42610:	3984e761 395e25b8 3927ad48 396305b5     a..9.%^9H.'9..c9
   42620:	395ccd39 397b8b4f 393be62a 39109306     9.\9O.{9*.;9...9
   42630:	38b5ff88 394edd50 39a05831 38d3804e     ...8P.N91X.9N..8
   42640:	3938cd2c 38dfaaed 3968bb72 398ab2ba     ,.89...8r.h9...9
   42650:	39891967 3922cdde 39788ea2 38a2cdc3     g..9.."9..x9...8
   42660:	3996faf9 3997394b 3955b0e3 395502eb     ...9K9.9..U9..U9
   42670:	39138e4c                                L..9

00042674 <_ZN12_GLOBAL__N_12g0L18tensor_dimension39E>:
   42674:	00000001 00000030 00000000              ....0.......

00042680 <_ZN12_GLOBAL__N_12g0L13tensor_data39E>:
   42680:	000005c7 fffffab7 00000f83 000007af     ................
   42690:	00000c84 000000ab 000007af 0000157e     ............~...
   426a0:	fffff4e0 fffff89b fffffb21 00002303     ........!....#..
   426b0:	00000e46 00000ee9 000019db fffff170     F...........p...
   426c0:	fffff5f4 00001ec8 00000b20 000011e4     ........ .......
   426d0:	00001302 00005fdf 00003dca 00000340     ....._...=..@...
   426e0:	fffff8ed 00000640 fffffe56 fffffbaa     ....@...V.......
   426f0:	00000750 00000946 0000133c 00002729     P...F...<...)'..
   42700:	fffffc3c 000000ef 000022dc 00000d08     <........"......
   42710:	00001f6b 000009d9 0000053d fffffa6b     k.......=...k...
   42720:	00000f39 fffff864 00002e28 fffffe56     9...d...(...V...
   42730:	00000180 00000aad fffff6f1 00001510     ................

00042740 <_ZN12_GLOBAL__N_12g0L7quant38E>:
   42740:	00042810 0004274c 00000000              .(..L'......

0004274c <_ZN12_GLOBAL__N_12g0L12quant38_zeroE>:
   4274c:	00000030 00000000 00000000 00000000     0...............
	...

00042810 <_ZN12_GLOBAL__N_12g0L13quant38_scaleE>:
   42810:	00000030 3b3d3ffe 3b482f61 3b16c40d     0....?=;a/H;...;
   42820:	3b6038ad 3b04ec80 3b4d6e14 3b04bcb2     .8`;...;.nM;...;
   42830:	3ae58d97 3af8ff08 3b1a36ef 3b54a9ef     ...:...:.6.;..T;
   42840:	3a8fdb2a 3b0ec466 3b048ff2 3ad5180c     *..:f..;...;...:
   42850:	3af5be37 3b3d97ca 3acf549a 3b37e286     7..:..=;.T.:..7;
   42860:	3b0d255d 3b087f34 3a1195f0 3a491ece     ]%.;4..;...:..I:
   42870:	3b5107f1 3b2eb253 3b03dc6d 3b3287be     ..Q;S..;m..;..2;
   42880:	3b2da36a 3b45d072 3b13c386 3ae362e9     j.-;r.E;...;.b.:
   42890:	3a8f1f90 3b22ad9c 3b7c3090 3aa6530f     ...:..";.0|;.S.:
   428a0:	3b1153ea 3aafe466 3b370541 3b5a24f3     .S.;f..:A.7;.$Z;
   428b0:	3b57a12b 3b000775 3b43771b 3a800760     +.W;u..;.wC;`..:
   428c0:	3b6d7639 3b6dd83c 3b280be7 3b278318     9vm;<.m;..(;..';
   428d0:	3ae81363                                c..:

000428d4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension38E>:
   428d4:	00000004 00000030 00000001 00000001     ....0...........
   428e4:	00000008 00000000 00000000              ............

000428f0 <_ZN12_GLOBAL__N_12g0L13tensor_data38E>:
   428f0:	ef7f0df2 a9fe36fd bb44c95b 127fb8ec     .....6..[.D.....
   42900:	b6463937 e57f17c2 eb071a02 097fc113     79F.............
   42910:	e1d1d97f 45e2c89e fe7f4821 da17d913     .......E!H......
   42920:	7fe97169 5f1b15b4 2705ffea dc81901c     iq....._...'....
   42930:	4dda3e73 cd811ec1 32d5e97f a61ad304     s>.M.......2....
   42940:	09f41342 0c267fe7 8c00ec7f 49c2c15b     B.....&.....[..I
   42950:	da506dc1 7fa9440d 0eb1027f aa16b715     .mP..D..........
   42960:	efff206c f1b91c81 d796061b 746ace81     l ............jt
   42970:	026dcefe debdce7f f75df11c fdb4c87f     ..m.......].....
   42980:	377fda77 fdd81bdc b9443054 d40e81cf     w..7....T0D.....
   42990:	7f40db35 50abc407 81bff25a 6906c631     5.@....PZ...1..i
   429a0:	c5b981c2 b87fcf42 d21c12ef e4098196     ....B...........
   429b0:	35400c7f 4aa0e2f3 b2e73153 7fedf8f0     ..@5...JS1......
   429c0:	8119e3a7 a7d0fd6d c5f37f70 0a1f430e     ....m...p....C..
   429d0:	0f067f23 6fedd5fa 6c6b1377 3381e52b     #......ow.kl+..3
   429e0:	69be9d7f 54b3062d 3212aa5f 3e818aad     ...i-..T_..2...>
   429f0:	811cb899 97d0e559 181bfd1c 2c7fbb1a     ....Y..........,
   42a00:	a36248b7 67b9b37f 6b0e0fb9 ea267f05     .Hb....g...k..&.
   42a10:	81e0235f 2f17f52c 02f12524 2d3e7fbf     _#..,../$%....>-
   42a20:	6c14bee9 7f043310 2881000b 42e3d9fd     ...l.3.....(...B
   42a30:	08a91448 7fc334cd cf18ff2c fded818c     H....4..,.......
   42a40:	70ae40b4 81de59f0 81de00ef b5f604f0     .@.p.Y..........
   42a50:	4e21214e 21c67f13 16ea5107 f5b0df7f     N!!N...!.Q......
   42a60:	7ffba638 60d1255b f137a0f6 202c187f     8...[%.`..7..., 

00042a70 <_ZN12_GLOBAL__N_12g0L7quant37E>:
   42a70:	00042aa0 00042a7c 00000000              .*..|*......

00042a7c <_ZN12_GLOBAL__N_12g0L12quant37_zeroE>:
   42a7c:	00000008 00000000 00000000 00000000     ................
	...

00042aa0 <_ZN12_GLOBAL__N_12g0L13quant37_scaleE>:
   42aa0:	00000008 39527656 3945db64 38a95356     ....VvR9d.E9VS.8
   42ab0:	38fb02a0 38ee503e 391b4229 38d728b9     ...8>P.8)B.9.(.8
   42ac0:	390e268d                                .&.9

00042ac4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension37E>:
   42ac4:	00000001 00000008 00000000              ............

00042ad0 <_ZN12_GLOBAL__N_12g0L13tensor_data37E>:
   42ad0:	ffffdeb6 fffff263 000006b7 ffffdbb8     ....c...........
   42ae0:	00000b93 fffff4b8 00002159 000024d0     ........Y!...$..

00042af0 <_ZN12_GLOBAL__N_12g0L7quant36E>:
   42af0:	00042b20 00042afc 00000000               +...*......

00042afc <_ZN12_GLOBAL__N_12g0L12quant36_zeroE>:
   42afc:	00000008 00000000 00000000 00000000     ................
	...

00042b20 <_ZN12_GLOBAL__N_12g0L13quant36_scaleE>:
   42b20:	00000008 3c0bc295 3c0363b0 3b60e2ae     .......<.c.<..`;
   42b30:	3ba6afbe 3b9e4149 3bce33de 3b8ee10b     ...;IA.;.3.;...;
   42b40:	3bbccb33                                3..;

00042b44 <_ZN12_GLOBAL__N_12g0L18tensor_dimension36E>:
   42b44:	00000004 00000008 00000001 00000001     ................
   42b54:	00000030 00000000 00000000              0...........

00042b60 <_ZN12_GLOBAL__N_12g0L13tensor_data36E>:
   42b60:	e413ec7f 25073b1c 0635a773 cd0f40d1     .....;.%s.5..@..
   42b70:	ebece012 e20bc507 d4dbd7c4 22df56e1     .............V."
   42b80:	dd0bd217 0dc1c23a 01b0e716 d535e239     ....:.......9.5.
   42b90:	3af80031 1f123934 06ffb241 f4dc172a     1..:49..A...*...
   42ba0:	fcbbd5de 4c31d106 29fcbefd 7fc837e7     ......1L...).7..
   42bb0:	eaeb2ce8 ebf7f1c6 2bdcefd1 ac08fc15     .,.........+....
   42bc0:	23aee9d9 33f0e7b6 dda7ac9e f7812cd7     ...#...3.....,..
   42bd0:	e723b148 f9ed516f 9d135429 fc320dd3     H.#.oQ..)T....2.
   42be0:	ba4020e0 6245fe3b fd245cd1 43d440b0     . @.;.Eb.\$..@.C
   42bf0:	25f2effa 29f807ec e281534a 47e7ea13     ...%...)JS.....G
   42c00:	2cfeedcc 0d4901e7 30d30704 e6d51edf     ...,..I....0....
   42c10:	0e1d160a 0724fb2e 143e4fc3 d6def21d     ......$..O>.....
   42c20:	d30fb8e1 bcc36104 2247cc05 17ebe5c0     .....a....G"....
   42c30:	29e80c42 e97ae3b2 09fbeb9d 3defef15     B..)..z........=
   42c40:	34e42ac7 19f628dc 29d824d6 02f0347f     .*.4.(...$.).4..
   42c50:	813abdbf c8de12e9 48cd48f8 0d3416b3     ..:......H.H..4.
   42c60:	11443749 c2ed011d d300ba2e b627d7f3     I7D...........'.
   42c70:	fd39d9fb 3a291dee e5140f5e 21e5f8f2     ..9...):^......!
   42c80:	192abdc6 bf05bfc3 2c89159a 1538d717     ..*........,..8.
   42c90:	7f0c18e0 364c00f1 1936f2b9 c2e7d80f     ......L6..6.....
   42ca0:	aa473fe2 df3f49d9 c35440c1 0ae0d7fb     .?G..I?..@T.....
   42cb0:	ef0dfd13 d8d81609 1d5de081 061fea0a     ..........].....
   42cc0:	f0012b11 d5f10fd5 0fdb0026 d1e3e9f7     .+......&.......
   42cd0:	08e2cea1 01e6e435 ea2c0334 1028d713     ....5...4.,...(.

00042ce0 <_ZN12_GLOBAL__N_12g0L7quant35E>:
   42ce0:	00042db0 00042cec 00000000              .-...,......

00042cec <_ZN12_GLOBAL__N_12g0L12quant35_zeroE>:
   42cec:	00000030 00000000 00000000 00000000     0...............
	...

00042db0 <_ZN12_GLOBAL__N_12g0L13quant35_scaleE>:
   42db0:	00000030 39760044 392406b7 38b9edc8     0...D.v9..$9...8
   42dc0:	38d66bab 393d9f54 38f69194 3982fffd     .k.8T.=9...8...9
   42dd0:	38f98d62 39187c00 39be1718 399946d1     b..8.|.9...9.F.9
   42de0:	386e32ea 397786b9 3899c46c 3913588b     .2n8..w9l..8.X.9
   42df0:	3937b111 38ebe094 38fdf02c 3907efce     ..79...8,..8...9
   42e00:	396965bb 38abfdd7 391ec739 394af743     .ei9...89..9C.J9
   42e10:	393657de 3920654c 399c526b 395c3fb1     .W69Le 9kR.9.?\9
   42e20:	39c01ebd 38d84804 38a31879 3941ccbf     ...9.H.8y..8..A9
   42e30:	39483f66 38b1f701 39970a46 38a6cee5     f?H9...8F..9...8
   42e40:	3911fd16 3902f9b4 38a64bf9 38a16b0b     ...9...9.K.8.k.8
   42e50:	38a4fd2b 39594fa6 38d1ef9a 3952dd81     +..8.OY9...8..R9
   42e60:	39220e13 3915489a 389d9de9 38ebb5bb     .."9.H.9...8...8
   42e70:	3917074f                                O..9

00042e74 <_ZN12_GLOBAL__N_12g0L18tensor_dimension35E>:
   42e74:	00000001 00000030 00000000              ....0.......

00042e80 <_ZN12_GLOBAL__N_12g0L13tensor_data35E>:
   42e80:	fffff53a fffffc13 00002da6 000004ff     :........-......
   42e90:	fffffd09 ffffe510 fffffbb1 0000358f     .............5..
   42ea0:	00001826 fffff139 ffffeb96 ffffe498     &...9...........
   42eb0:	fffffe8c 00004a3c 0000294b fffffebd     ....<J..K)......
   42ec0:	000018f1 ffffe863 00000cbc fffff5ac     ....c...........
   42ed0:	000040df ffffef71 fffff994 fffffadb     .@..q...........
   42ee0:	0000114b ffffeebb 00000105 fffff938     K...........8...
   42ef0:	00001fdb ffff84df ffffef7a 00000127     ........z...'...
   42f00:	fffff0d5 fffff674 fffffc06 fffff8ca     ....t...........
   42f10:	00002bcf ffffe9bb ffffff6a ffffc212     .+......j.......
   42f20:	fffff9cf 00001d67 ffffe766 fffffbd8     ....g...f.......
   42f30:	00000bc8 ffffe5b9 00002a52 fffff178     ........R*..x...

00042f40 <_ZN12_GLOBAL__N_12g0L7quant34E>:
   42f40:	00043010 00042f4c 00000003              .0..L/......

00042f4c <_ZN12_GLOBAL__N_12g0L12quant34_zeroE>:
   42f4c:	00000030 00000000 00000000 00000000     0...............
	...

00043010 <_ZN12_GLOBAL__N_12g0L13quant34_scaleE>:
   43010:	00000030 3c53716f 3c0cfbe9 3b9fcf4d     0...oqS<...<M..;
   43020:	3bb84c8d 3c22fc05 3bd3ee56 3c6131c9     .L.;.."<V..;.1a<
   43030:	3bd67ed7 3c031045 3ca362f6 3c83be98     .~.;E..<.b.<...<
   43040:	3b4cbcab 3c54c10b 3b842a8e 3bfd4b37     ..L;..T<.*.;7K.;
   43050:	3c1de30b 3bcabdd3 3bda43e7 3be9ae57     ...<...;.C.;W..;
   43060:	3c489c29 3b93d495 3c087926 3c2e7416     ).H<...;&y.<.t.<
   43070:	3c1cba56 3c09dd0e 3c865cae 3c3d4efa     V..<...<.\.<.N=<
   43080:	3ca5219b 3bb9e5fc 3b8c2f23 3c269335     .!.<...;#/.;5.&<
   43090:	3c2c1dfa 3b98f6ee 3c81d27b 3b8f600b     ..,<...;{..<.`.;
   430a0:	3bfaf5ec 3be126fb 3b8eef83 3b8abe08     ...;.&.;...;...;
   430b0:	3b8dcfbe 3c3ac895 3bb471c4 3c353e3f     ...;..:<.q.;?>5<
   430c0:	3c0b4a29 3c004ffb 3b87799a 3bca98ff     )J.<.O.<.y.;...;
   430d0:	3c01cfef                                ...<

000430d4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension34E>:
   430d4:	00000004 00000001 00000003 00000003     ................
   430e4:	00000030 00000000 00000000              0...........

000430f0 <_ZN12_GLOBAL__N_12g0L13tensor_data34E>:
   430f0:	39ef5050 10c90302 0f23c329 2ae28807     PP.9....).#....*
   43100:	0ab8276b eceb1550 fb161d43 ccf51dcd     k'..P...C.......
   43110:	1b6c0e7f 217f0fdc cf994bb5 03daa71e     ..l....!.K......
   43120:	5dad7f68 81be3a0d 2b7f1f36 faeaebe8     h..].:..6..+....
   43130:	23af7fc5 e52c7f3f 7f0b0517 81ed6a81     ...#?.,......j..
   43140:	5318e3fe 23687fb8 ff53b881 59812608     ...S..h#..S..&.Y
   43150:	27fc3337 1bd9ff04 0d22b620 ece3af02     73.'.... .".....
   43160:	feddf35e 27e81c48 f80d3d31 e0ee03fc     ^...H..'1=......
   43170:	135a0f66 056c18f0 483e4ad5 ee0a6d22     f.Z...l..J>H"m..
   43180:	5b81d0e7 e03e3416 7fd42e24 b3e9f27f     ...[.4>.$.......
   43190:	f8474ce0 9c161193 0a113e17 321e79f7     .LG......>...y.2
   431a0:	21227f38 56caf6a6 815c0250 7ff3980d     8."!...VP.\.....
   431b0:	81cd9d27 a97f0a7f 4e057f81 ea7f7f92     '..........N....
   431c0:	7f124a81 fb7f0220 b1257f81 5d813c9b     .J.. .....%..<.]
   431d0:	7a249f4c 7fe6367f 03eaba78 2dfbbc6c     L.$z.6..x...l..-
   431e0:	398bd6ee e92e7fee 4cdc1f23 eaddfbee     ...9....#..L....
   431f0:	dd7f55bc 7fb91b81 1a131504 26296f3a     .U..........:o)&
   43200:	81defefd 2400dccc 7cf4442d 54dc7ff9     .......$-D.|...T
   43210:	0e00ece0 06f10af6 0f04f41f 21dda719     ...............!
   43220:	070b0d5c fdfc0cc6 fbf6fe16 08320dff     \.............2.
   43230:	ff7f0d15 334847f2 df7f4911 f6f482ca     .....GH3.I......
   43240:	21b4fc81 f6c6fc81 46b4721a 7feedae9     ...!.....r.F....
   43250:	e6a832ac e20919ba e38136ed 10467fc4     .2.......6....F.
   43260:	171ce91b 3ec43ee5 e18681c5 678e5081     .....>.>.....P.g
   43270:	1107ece5 02f20209 f9f8d817 05e1aef8     ................
   43280:	125fe462 2206f9bd f1f4ef15 0a300e0b     b._...."......0.
   43290:	20510d1b 136c43fb 31c74914 d7f175e4     ..Q .Cl..I.1.u..

000432a0 <_ZN12_GLOBAL__N_12g0L7quant33E>:
   432a0:	00043370 000432ac 00000000              p3...2......

000432ac <_ZN12_GLOBAL__N_12g0L12quant33_zeroE>:
   432ac:	00000030 00000000 00000000 00000000     0...............
	...

00043370 <_ZN12_GLOBAL__N_12g0L13quant33_scaleE>:
   43370:	00000030 37c2b7a8 390acfef 3935384e     0......7...9N859
   43380:	3945ff6b 393b3edb 393cd00e 38fa72f0     k.E9.>;9..<9.r.8
   43390:	3923abb9 38ed4a5e 38d743c2 388065ba     ..#9^J.8.C.8.e.8
   433a0:	391d4bf3 38b6752a 392eb625 39198d8c     .K.9*u.8%..9...9
   433b0:	392b3361 38e2a95b 3959e2cb 38a1e0d9     a3+9[..8..Y9...8
   433c0:	3935f013 3909f3ce 3901744d 391c605e     ..59...9Mt.9^`.9
   433d0:	38e7dcd8 3935d875 394105fb 39377c71     ...8u.59..A9q|79
   433e0:	388b4811 3962f1f6 390085e1 393955ae     .H.8..b9...9.U99
   433f0:	3894b182 393f9b6c 391c7fac 390f09ea     ...8l.?9...9...9
   43400:	397c57d2 395fb028 3916c958 39554b9a     .W|9(._9X..9.KU9
   43410:	3938c9df 38855583 394cd8f9 389553c6     ..89.U.8..L9.S.8
   43420:	390e0ead 3918b9fd 392d260f 3909146b     ...9...9.&-9k..9
   43430:	3910efaf                                ...9

00043434 <_ZN12_GLOBAL__N_12g0L18tensor_dimension33E>:
   43434:	00000001 00000030 00000000              ....0.......

00043440 <_ZN12_GLOBAL__N_12g0L13tensor_data33E>:
   43440:	0000bbf5 00001788 00000686 000004f7     ................
   43450:	00000fce 00000a9f 00001a90 00001053     ............S...
   43460:	00001015 ffffe3a5 0000418d 000005e6     .........A......
   43470:	00002432 000008d7 00001232 0000094e     2$......2...N...
   43480:	00001b57 fffffc7d 00002f26 0000004a     W...}...&/..J...
   43490:	000013ce fffffcea 00000ea7 0000188c     ................
   434a0:	00000896 fffff2bc 00000973 0000380c     ........s....8..
   434b0:	00000371 000017b3 000006f8 0000335d     q...........]3..
   434c0:	000002b8 00001489 fffffd3e fffff9ba     ........>.......
   434d0:	000009ba 000009af 00000092 000007f0     ................
   434e0:	00003a4b fffffc4b 00002f3b 00000c71     K:..K...;/..q...
   434f0:	0000068a 000011b0 0000120e fffff625     ............%...

00043500 <_ZN12_GLOBAL__N_12g0L7quant32E>:
   43500:	000435d0 0004350c 00000000              .5...5......

0004350c <_ZN12_GLOBAL__N_12g0L12quant32_zeroE>:
   4350c:	00000030 00000000 00000000 00000000     0...............
	...

000435d0 <_ZN12_GLOBAL__N_12g0L13quant32_scaleE>:
   435d0:	00000030 39d61670 3b189f01 3b473f5a     0...p..9...;Z?G;
   435e0:	3b59b1bd 3b4ddf5a 3b4f9877 3b09ae81     ..Y;Z.M;w.O;...;
   435f0:	3b33f3da 3b0272ab 3aecadce 3a8d2b91     ..3;.r.;...:.+.:
   43600:	3b2cf1c1 3ac89bbb 3b401771 3b28d403     ..,;...:q.@;..(;
   43610:	3b3c3b45 3af935a5 3b6f8f98 3ab1fb54     E;<;.5.:..o;T..:
   43620:	3b480967 3b17acfa 3b0e550e 3b2beebc     g.H;...;.U.;..+;
   43630:	3afeed96 3b47ef6f 3b54399e 3b49bd33     ...:o.G;.9T;3.I;
   43640:	3a992316 3b798579 3b0d4eea 3b4bc584     .#.:y.y;.N.;..K;
   43650:	3aa37c37 3b52aafe 3b2c1127 3b1d449e     7|.:..R;'.,;.D.;
   43660:	3b8ab910 3b75f0b8 3b25c95b 3b6a837f     ...;..u;[.%;..j;
   43670:	3b4b2bcc 3a929912 3b6139bb 3aa42e9f     .+K;...:.9a;...:
   43680:	3b1c3063 3b27eb68 3b3e5f8f 3b16b75e     c0.;h.';._>;^..;
   43690:	3b1f5ab6                                .Z.;

00043694 <_ZN12_GLOBAL__N_12g0L18tensor_dimension32E>:
   43694:	00000004 00000030 00000001 00000001     ....0...........
   436a4:	00000008 00000000 00000000              ............

000436b0 <_ZN12_GLOBAL__N_12g0L13tensor_data32E>:
   436b0:	e9f02281 d3011f3d efddcd01 0e0981ce     ."..=...........
   436c0:	cb0241c0 7fba2bc7 ef32293e e82681cb     .A...+..>)2...&.
   436d0:	2398330e 22225681 d7262de6 f9bb81a2     .3.#.V"".-&.....
   436e0:	e15f7fcc d616dcc0 442502f3 34018107     .._.......%D...4
   436f0:	47b31b7f f38cb8b3 b3bfda69 7fd6e604     ...G....i.......
   43700:	7f08fe99 971a510a f1341518 5b7f700b     .....Q....4..p.[
   43710:	9aca9cbb 2beed17f 39f1f7e2 4b33810d     .......+...9..3K
   43720:	146e4b45 da9e8149 3e7f43d6 ba240ff2     EKn.I....C.>..$.
   43730:	ba31dca8 fbcb057f fecfd624 28ee7ff7     ..1.....$......(
   43740:	ce447fe9 a7592acd 7f4f7108 192e19ee     ..D..*Y..qO.....
   43750:	81480a0a ee45ffbd 812253a4 017b4378     ..H...E..S".xC{.
   43760:	41acdc4e 7fc4d32e d481b32a 61c0f142     N..A....*...B..a
   43770:	0ca8eb2b 7f8c29c7 0a3be9ee d7aaf37f     +....)....;.....
   43780:	e47f7205 ba41e7e2 b9762cd3 815f0c0a     .r....A..,v..._.
   43790:	7f54ef49 6d22dd48 155d4147 50811dcd     I.T.H."mGA]....P
   437a0:	39b1fa2f 32d9d781 c66b7f12 877031ac     /..9...2..k..1p.
   437b0:	1ef7f33f d8207f6b 0881df19 47dfeb0e     ?...k. ........G
   437c0:	8113cb16 0bf745fd f66011ea eafb810b     .....E....`.....
   437d0:	81dd10f6 d6120bf3 a6edf63a b3ca7fb1     ........:.......
   437e0:	5ee7c84b 7fe9213f 491d517f fed358f1     K..^?!...Q.I.X..
   437f0:	e4819029 6abc0a15 9a81c6fb e9d5b0fb     )......j........
   43800:	7f4d7145 3119dfb2 909ae47f 4026d2b6     EqM....1......&@
   43810:	a9754e03 814bfa9a 3881182b 420f1cd4     .Nu...K.+..8...B
   43820:	81b7d62e 35dcdf18 ba7e8155 0c0deb50     .......5U.~.P...

00043830 <_ZN12_GLOBAL__N_12g0L7quant31E>:
   43830:	00043860 0004383c 00000000              `8..<8......

0004383c <_ZN12_GLOBAL__N_12g0L12quant31_zeroE>:
   4383c:	00000008 00000000 00000000 00000000     ................
	...

00043860 <_ZN12_GLOBAL__N_12g0L13quant31_scaleE>:
   43860:	00000008 392e28df 38956706 389bc198     .....(.9.g.8...8
   43870:	388cbbc5 38a75e43 38a2c200 388e1ed3     ...8C^.8...8...8
   43880:	38aa7ae4                                .z.8

00043884 <_ZN12_GLOBAL__N_12g0L18tensor_dimension31E>:
   43884:	00000001 00000008 00000000              ............

00043890 <_ZN12_GLOBAL__N_12g0L13tensor_data31E>:
   43890:	ffffd3bd ffff79ca 000009c7 00001d38     .....y......8...
   438a0:	ffffc2bf 00000152 ffff90b5 fffff9d3     ....R...........

000438b0 <_ZN12_GLOBAL__N_12g0L7quant30E>:
   438b0:	000438e0 000438bc 00000000              .8...8......

000438bc <_ZN12_GLOBAL__N_12g0L12quant30_zeroE>:
   438bc:	00000008 00000000 00000000 00000000     ................
	...

000438e0 <_ZN12_GLOBAL__N_12g0L13quant30_scaleE>:
   438e0:	00000008 3be74e48 3b466cd4 3b4edd1e     ....HN.;.lF;..N;
   438f0:	3b3ae962 3b5e4931 3b5829a8 3b3cc0f0     b.:;1I^;.)X;..<;
   43900:	3b626b37                                7kb;

00043904 <_ZN12_GLOBAL__N_12g0L18tensor_dimension30E>:
   43904:	00000004 00000008 00000001 00000001     ................
   43914:	00000030 00000000 00000000              0...........

00043920 <_ZN12_GLOBAL__N_12g0L13tensor_data30E>:
   43920:	38ac3734 dc9f1b0a d7f9eb05 012bfceb     47.8..........+.
   43930:	e42df230 fd30d915 0fefe20b fce702ee     0.-...0.........
   43940:	0c111635 e4223a7f e5fcea02 cb121b53     5....:".....S...
   43950:	000c1e45 e6f2571a b3d4421f 2f0eea6e     E....W...B..n../
   43960:	a6182813 3a2ee57f 12281831 4b36c21c     .(.....:1.(...6K
   43970:	72076d40 1d181a40 1a220d53 b86f2d19     @m.r@...S."..-o.
   43980:	7f5511f2 31fb17cc bf0c421f 271968da     ..U....1.B...h.'
   43990:	0045a6b6 add135fa f51bd8e2 f3fa1a97     ..E..5..........
   439a0:	d5a8dee2 e8b2150b 11dcc2e2 16e4b73c     ............<...
   439b0:	fab537eb 4007b60e 0ad2b365 3b08eaf6     .7.....@e......;
   439c0:	eaed0c15 26ba10f8 f228dee7 ca25e43c     .......&..(.<.%.
   439d0:	cddfe926 0fb3fa81 f723c2e5 dbf40cc8     &.........#.....
   439e0:	ee1dee39 41174ac0 2733c781 bbbac945     9....J.A..3'E...
   439f0:	e43b4559 26f1a00d 83d407d9 2358cac3     YE;....&......X#
   43a00:	5770fc56 1f353f42 e4cf280f c85f4357     V.pWB?5..(..WC_.
   43a10:	5b12481d a2d2171f 05f81ea2 bf28421d     .H.[.........B(.
   43a20:	25e3634d b7e9c0ec 3dd5b69a 2ce82c02     Mc.%.......=.,.,
   43a30:	0946aafa 8fda7fdd dbf4daf6 61dbf4f5     ..F............a
   43a40:	7ff9306f 4d1715aa 604fa51a d0e8db5c     o0.....M..O`\...
   43a50:	1ab91444 02deeb50 d7cf4a0c 424cd312     D...P....J....LB
   43a60:	6603d80e 0e00b26d 3f9755a9 ce697338     ...fm....U.?8si.
   43a70:	287f0e19 09a641d9 f5f563de fa0f3b2f     ...(.A...c../;..
   43a80:	04c7f5cc d10025f4 f3342af7 f210fe00     .....%...*4.....
   43a90:	2243f0a9 f524fc5d d2e4e1eb 170ce404     ..C"].$.........

00043aa0 <_ZN12_GLOBAL__N_12g0L7quant29E>:
   43aa0:	00043b70 00043aac 00000000              p;...:......

00043aac <_ZN12_GLOBAL__N_12g0L12quant29_zeroE>:
   43aac:	00000030 00000000 00000000 00000000     0...............
	...

00043b70 <_ZN12_GLOBAL__N_12g0L13quant29_scaleE>:
   43b70:	00000030 38cef595 38b02bf9 3a674abf     0......8.+.8.Jg:
   43b80:	3963fa42 3921ae2b 39046a13 3903cff2     B.c9+.!9.j.9...9
   43b90:	39cd6497 38ddacec 39c6784d 394c379c     .d.9...8Mx.9.7L9
   43ba0:	38d62974 393846bd 38bb3775 390711a9     t).8.F89u7.8...9
   43bb0:	38bdae19 38b4cb4e 3878d953 39cc416c     ...8N..8S.x8lA.9
   43bc0:	388885ce 38c82742 39a72394 39349465     ...8B'.8.#.9e.49
   43bd0:	3934d7c3 398c6241 3980ce09 3962598c     ..49Ab.9...9.Yb9
   43be0:	3989d0cb 39803613 3936fdc3 390b118b     ...9.6.9..69...9
   43bf0:	38f41388 38b98057 3947b63e 39274ce5     ...8W..8>.G9.L'9
   43c00:	38cc88ab 3a253f8d 39249eb9 390fc277     ...8.?%:..$9w..9
   43c10:	39e1db17 393225a3 391f7172 3948478f     ...9.%29rq.9.GH9
   43c20:	39249431 3940b175 38913375 3905a722     1.$9u.@9u3.8"..9
   43c30:	394d66a6                                .fM9

00043c34 <_ZN12_GLOBAL__N_12g0L18tensor_dimension29E>:
   43c34:	00000001 00000030 00000000              ....0.......

00043c40 <_ZN12_GLOBAL__N_12g0L13tensor_data29E>:
   43c40:	00002cdf ffffbf71 fffffb7a 00000b49     .,..q...z...I...
   43c50:	00000176 00003163 00000a8e fffff87a     v...c1......z...
   43c60:	ffffdea9 000007d2 fffff2fe ffffef9f     ................
   43c70:	ffffe824 ffffcd2c 000018aa 000000b6     $...,...........
   43c80:	ffffdef8 00006e90 fffff36b ffffcf5a     .....n..k...Z...
   43c90:	00003b11 00000558 fffffcaf fffff92d     .;..X.......-...
   43ca0:	00000043 00000135 ffffeeca 0000071a     C...5...........
   43cb0:	fffffe74 00000756 00000085 000047c3     t...V........G..
   43cc0:	000049ac fffffd97 00001280 00004a36     .I..........6J..
   43cd0:	fffffd0e 00003c0e 00000552 fffffc4d     .....<..R...M...
   43ce0:	fffff3ef ffffe206 0000031c 00000b3d     ............=...
   43cf0:	00000b86 00005f86 000031d8 ffffedc6     ....._...1......

00043d00 <_ZN12_GLOBAL__N_12g0L7quant28E>:
   43d00:	00043dd0 00043d0c 00000003              .=...=......

00043d0c <_ZN12_GLOBAL__N_12g0L12quant28_zeroE>:
   43d0c:	00000030 00000000 00000000 00000000     0...............
	...

00043dd0 <_ZN12_GLOBAL__N_12g0L13quant28_scaleE>:
   43dd0:	00000030 3b9c089c 3b84d265 3d2e60fc     0......;e..;.`.=
   43de0:	3c2be148 3bf3cae6 3bc7a9d0 3bc6c168     H.+<...;...;h..;
   43df0:	3c9ada49 3ba720ef 3c95a219 3c19f75e     I..<. .;...<^..<
   43e00:	3ba176c4 3c0aeea2 3b8d2622 3bcbaa8a     .v.;...<"&.;...;
   43e10:	3b8f0198 3b884e8d 3b3b9d9a 3c99fec4     ...;.N.;..;;...<
   43e20:	3b4ddbaf 3b96e703 3c7c0601 3c082527     ..M;...;..|<'%.<
   43e30:	3c0857f1 3c53ae22 3c42387c 3c2aa71c     .W.<".S<|8B<..*<
   43e40:	3c4fcec4 3c415358 3c09f69b 3bd1b26b     ..O<XSA<...<k..;
   43e50:	3bb80473 3b8bdb11 3c1691ce 3bfc444e     s..;...;...<ND.;
   43e60:	3b9a347b 3cf92c29 3bf839a6 3bd8c53f     {4.;),.<.9.;?..;
   43e70:	3caa47c5 3c064fa2 3bf06b4f 3c16ff5d     .G.<.O.<Ok.;]..<
   43e80:	3bf829c5 3c114726 3b5af1a3 3bc987e5     .).;&G.<..Z;...;
   43e90:	3c1adbd7                                ...<

00043e94 <_ZN12_GLOBAL__N_12g0L18tensor_dimension28E>:
   43e94:	00000004 00000001 00000003 00000003     ................
   43ea4:	00000030 00000000 00000000              0...........

00043eb0 <_ZN12_GLOBAL__N_12g0L13tensor_data28E>:
   43eb0:	072b00c5 0a1cc67f ff221dfe 0cb71402     ..+.......".....
   43ec0:	2ef1e056 fad504db ca2802ea b2287fe1     V.........(...(.
   43ed0:	9f7b6bc7 e681c609 c1ebf812 2181c2fe     .k{............!
   43ee0:	1efa5ad2 f177b4f1 7f360c46 27ea7f2f     .Z....w.F.6./..'
   43ef0:	440ab65b 8f69e3d6 11a32efe 8172a0e1     [..D..i.......r.
   43f00:	c40dad81 1899e1c6 810cefce 3923921b     ..............#9
   43f10:	fd05f9ee 000fc52d dc111614 17b709ed     ....-...........
   43f20:	32f3d734 04c5fae1 8f25ff17 b4cd2fd9     4..2......%../..
   43f30:	ae6afc01 0ab0dc0a d2f80618 ea84a9f4     ..j.............
   43f40:	c2fb7881 f912b7fe 3e4a111c 22c15b4e     .x........J>N[."
   43f50:	6a11817f e5a5bce8 07e8f981 be5bfef1     ...j..........[.
   43f60:	bd937fb9 3f1abf22 36a222a0 db0481f8     ...."..?.".6....
   43f70:	7f7f6e12 7f8156cd 58d9817f 927f607f     .n...V.....X.`..
   43f80:	0f7faccf 077f7f81 7f4d6758 fe7fac7f     ........XgM.....
   43f90:	81e398b3 455b7f7f 43dd7fc5 84003e7f     ......[E...C.>..
   43fa0:	cfe737c8 eb0788b8 3f700301 7acd6425     .7........p?%d.z
   43fb0:	7ffb905f e199a527 10ecf119 d0490cf6     _...'.........I.
   43fc0:	ae81deeb 812db111 457f1ebc 7ff495e9     ......-....E....
   43fd0:	f605f2f6 0519d818 337f1a22 6ddffc01     ........"..3...m
   43fe0:	01d6c856 2fd1fee8 e4def2f4 0a043e0d     V....../.....>..
   43ff0:	38c722df db28cedc 08f4f555 dd0906ea     .".8..(.U.......
   44000:	140b7fcf ba4e819d c245134b 7fc720c9     ......N.K.E.. ..
   44010:	6fff0f4a 7f5309b9 027f8113 b2dcce16     J..o..S.........
   44020:	afb8c7f9 271ac8c1 1ad2347f faa7cae2     .......'.4......
   44030:	ff18ea29 0d0ad8e7 274e152e 3adc0315     ).........N'...:
   44040:	13cfd12a 2cc5f6e7 bde5ed0f 0ff2fb0c     *......,........
   44050:	37ebfee9 053ae5dd 03220134 1913caee     ...7..:.4.".....

00044060 <_ZN12_GLOBAL__N_12g0L7quant27E>:
   44060:	00044130 0004406c 00000000              0A..l@......

0004406c <_ZN12_GLOBAL__N_12g0L12quant27_zeroE>:
   4406c:	00000030 00000000 00000000 00000000     0...............
	...

00044130 <_ZN12_GLOBAL__N_12g0L13quant27_scaleE>:
   44130:	00000030 398e5ab1 390517ca 38eb03f3     0....Z.9...9...8
   44140:	392d0e3a 39310452 38e86433 3943ae46     :.-9R.193d.8F.C9
   44150:	38c4f910 38987f6f 390744e6 3951e60a     ...8o..8.D.9..Q9
   44160:	395a942b 39401e25 390a8ee9 393c5ae5     +.Z9%.@9...9.Z<9
   44170:	391126a3 394332ee 38f8d395 38eb6fa5     .&.9.2C9...8.o.8
   44180:	3924d64b 396a7715 38a1ec94 3965b92b     K.$9.wj9...8+.e9
   44190:	390563e5 388fe6f8 38e83078 391e77b4     .c.9...8x0.8.w.9
   441a0:	38ba0315 3902b355 39168683 39a399c0     ...8U..9...9...9
   441b0:	38b7adcb 3985a147 390f0944 38d02336     ...8G..9D..96#.8
   441c0:	3911078f 3817ddd4 389feedf 390f37f6     ...9...8...8.7.9
   441d0:	38a89c56 3912cf13 39917fed 390b1650     V..8...9...9P..9
   441e0:	3905de2b 393ee19e 3932f812 3947921c     +..9..>9..29..G9
   441f0:	38ec4cd7                                .L.8

000441f4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension27E>:
   441f4:	00000001 00000030 00000000              ....0.......

00044200 <_ZN12_GLOBAL__N_12g0L13tensor_data27E>:
   44200:	0000024a 00001780 ffffe5e2 00000e71     J...........q...
   44210:	00000bb5 000017f1 00000a44 0000252e     ........D....%..
   44220:	000031a6 000016a7 fffff88a ffffff8b     .1..............
   44230:	00000548 000012b4 00000b12 fffffc4d     H...........M...
   44240:	ffffff8f 0000184b 00002032 000001a2     ....K...2 ......
   44250:	0000088d 00002b57 000009d5 00001591     ....W+..........
   44260:	000032ea 000020c5 00000696 00002959     .2... ......Y)..
   44270:	000008e1 00001622 fffffa12 00002528     ....".......(%..
   44280:	00000551 00001504 000019bd 0000159a     Q...............
   44290:	0000a48e 00002ea0 000011c2 0000305c     ............\0..
   442a0:	000009d3 0000025a 00001521 000007c3     ....Z...!.......
   442b0:	00000d5a 00000772 00000864 00000d29     Z...r...d...)...

000442c0 <_ZN12_GLOBAL__N_12g0L7quant26E>:
   442c0:	00044390 000442cc 00000000              .C...B......

000442cc <_ZN12_GLOBAL__N_12g0L12quant26_zeroE>:
   442cc:	00000030 00000000 00000000 00000000     0...............
	...

00044390 <_ZN12_GLOBAL__N_12g0L13quant26_scaleE>:
   44390:	00000030 3baec4de 3b23661a 3b1043c9     0......;.f#;.C.;
   443a0:	3b54760e 3b595310 3b0ea76e 3b703cfb     .vT;.SY;n..;.<p;
   443b0:	3af1d317 3abb38e6 3b261211 3b80d8c5     ...:.8.:..&;...;
   443c0:	3b862cd4 3b6bdd28 3b2a1bce 3b673e91     .,.;(.k;..*;.>g;
   443d0:	3b3233d6 3b6fa58d 3b18be24 3b1085e5     .32;..o;$..;...;
   443e0:	3b4a5f0c 3b8fed50 3ac6cb87 3b8d0426     ._J;P..;...:&..;
   443f0:	3b23c389 3ab0ab61 3b0e87ad 3b428d2a     ..#;a..:...;*.B;
   44400:	3ae45e2d 3b20762f 3b38cd01 3bc8da6d     -^.:/v ;..8;m..;
   44410:	3ae180e1 3ba40ee5 3b2f9b31 3aff880e     ...:...;1./;...:
   44420:	3b320daf 3a3a727f 3ac459c3 3b2fd485     ..2;.r::.Y.:../;
   44430:	3acf0110 3b343cec 3bb2a175 3b2ac20a     ...:.<4;u..;..*;
   44440:	3b2459a7 3b6a588e 3b5bb89c 3b750393     .Y$;.Xj;..[;..u;
   44450:	3b110dad                                ...;

00044454 <_ZN12_GLOBAL__N_12g0L18tensor_dimension26E>:
   44454:	00000004 00000030 00000001 00000001     ....0...........
   44464:	00000008 00000000 00000000              ............

00044470 <_ZN12_GLOBAL__N_12g0L13tensor_data26E>:
   44470:	1bdc81b2 cd34f4db a92b7ff1 60bda609     ......4...+....`
   44480:	0721b981 ea1c094c cd81db00 30e6d122     ..!.L......."..0
   44490:	e86f9dc9 0038bf7f a73142ec 7fc61e5f     ..o...8..B1._...
   444a0:	46375b81 8c2205cd 1d3ff22e 68f98133     .[7F.."...?.3..h
   444b0:	ddfb4aff b67f6a12 c8087f55 66d5bbb6     .J...j..U......f
   444c0:	0619f31d b88124e8 c0930cb6 422a107f     .....$........*B
   444d0:	03de2c5e 0812587f 30f38881 044231a6     ^,...X.....0.1B.
   444e0:	78a25cf1 21f07fc6 b0eac0f7 3ae7427f     .\.x...!.....B.:
   444f0:	3202a842 8127f12a 6781b6b5 8f4e5903     B..2*.'....g.YN.
   44500:	037fee47 e3ad98d8 261d7fe1 d5c18d6c     G..........&l...
   44510:	d581f3bc fefcf81f 3936ed83 cb7f96a3     ..........69....
   44520:	bc81f935 32fbf3e1 f17f29eb a3fc219f     5......2.)...!..
   44530:	7f6774a3 cc0b5b7f 28b581cd ff3520c5     .tg..[.....(. 5.
   44540:	c0887a74 31baed81 16b9393d eedf1381     tz.....1=9......
   44550:	b91e4cec 818b584d b2fbf726 cd0d0381     .L..MX..&.......
   44560:	7f2101af f0db112c acf99413 96bb3281     ..!.,........2..
   44570:	f517f981 1304e30a 9f81c632 13d005f6     ........2.......
   44580:	f97d5c3a ab59bd81 050f1663 c981de9c     :\}...Y.c.......
   44590:	d157017f 574bf401 f5f46973 2781514e     ..W...KWsi..NQ.'
   445a0:	7f6a58d9 c0183de1 de7f2f21 11dccc4e     .Xj..=..!/..N...
   445b0:	101b2948 ce2381be 7f14d01c 470348eb     H)....#......H.G
   445c0:	d15790f3 1870da7f cf8bdc02 7dab237f     ..W...p......#.}
   445d0:	f67fe66a 11c723fc e2131eec 53e781ab     j....#.........S
   445e0:	214c53c7 8131e6ff 7f0af51d 474c88f3     .SL!..1.......LG

000445f0 <_ZN12_GLOBAL__N_12g0L7quant25E>:
   445f0:	00044620 000445fc 00000000               F...E......

000445fc <_ZN12_GLOBAL__N_12g0L12quant25_zeroE>:
   445fc:	00000008 00000000 00000000 00000000     ................
	...

00044620 <_ZN12_GLOBAL__N_12g0L13quant25_scaleE>:
   44620:	00000008 38ddef64 39093c9c 38dc4c09     ....d..8.<.9.L.8
   44630:	38efd455 3901f86e 38d66427 3950d99e     U..8n..9'd.8..P9
   44640:	39622e52                                R.b9

00044644 <_ZN12_GLOBAL__N_12g0L18tensor_dimension25E>:
   44644:	00000001 00000008 00000000              ............

00044650 <_ZN12_GLOBAL__N_12g0L13tensor_data25E>:
   44650:	00001306 fffff845 00003641 ffffe6ab     ....E...A6......
   44660:	ffffcf2e ffffc772 ffffdc67 fffff836     ....r...g...6...

00044670 <_ZN12_GLOBAL__N_12g0L7quant24E>:
   44670:	000446a0 0004467c 00000000              .F..|F......

0004467c <_ZN12_GLOBAL__N_12g0L12quant24_zeroE>:
   4467c:	00000008 00000000 00000000 00000000     ................
	...

000446a0 <_ZN12_GLOBAL__N_12g0L13quant24_scaleE>:
   446a0:	00000008 3b9360f8 3bb6447f 3b924a7e     .....`.;.D.;~J.;
   446b0:	3b9f4300 3bac9df2 3b8e5e82 3c0ab083     .C.;...;.^.;...<
   446c0:	3c1632c2                                .2.<

000446c4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension24E>:
   446c4:	00000004 00000008 00000001 00000001     ................
   446d4:	00000030 00000000 00000000              0...........

000446e0 <_ZN12_GLOBAL__N_12g0L13tensor_data24E>:
   446e0:	cc2be5ea 5a415132 36e9d064 eb0ae7e1     ..+.2QAZd..6....
   446f0:	cb0a2a26 d8ad11e1 b611f41d 1a2915d8     &*............).
   44700:	0b3c291a 04b6d26f fce1bbc8 3481a8ba     .)<.o..........4
   44710:	34d7fdf3 edd70a01 5a121bc4 7fe506e6     ...4.......Z....
   44720:	e00c3a29 15b8ebd4 a9eef911 bac4f733     ):..........3...
   44730:	c7e3e03d d4342323 d62e4704 eacadb00     =...##4..G......
   44740:	fde2bc06 0b0512de eef30c6d 0521b6e1     ........m.....!.
   44750:	f9e7c5fe 1f07309b e6d82d09 d32ad8e6     .....0...-....*.
   44760:	34cf1d9f e9ee40b8 2bfde77f d7c4281b     ...4.@.....+.(..
   44770:	3b5a94de f1ed9b18 cc357781 13e90a32     ..Z;.....w5.2...
   44780:	29e12338 c21f5047 1d3c510d 0f0fbae1     8#.)GP...Q<.....
   44790:	073304eb 27d8adf2 bd16f3e3 18fa0fb4     ..3....'........
   447a0:	4af034f5 fc070522 442e50ca 0d3c1703     .4.J"....P.D..<.
   447b0:	f3f79e07 39a3f255 1b1ce748 cef61833     ....U..9H...3...
   447c0:	0f057fce 1712e63e e7fe29e4 12dfcd00     ....>....)......
   447d0:	bcfbffea 1d781d81 e6eb4011 e33efd9a     ......x..@....>.
   447e0:	b1ca25b0 26fe6b01 12fd1e65 cb78f3eb     .%...k.&e.....x.
   447f0:	5a4a67f4 285a34eb 24e6ddea 391e36bf     .gJZ.4Z(...$.6.9
   44800:	1cf7eb05 0412c7c8 082df31b 3a25eace     ..........-...%:
   44810:	c509c205 e3ffea48 290b000a 7f09052e     ....H......)....
   44820:	19f5f32b 1017f801 cfe32702 29edebfd     +........'.....)
   44830:	fbd6f0e7 0b06e604 00180428 01010af7     ........(.......
   44840:	fe02f81c e6090ac6 f5ccfb00 1d10eef2     ................
   44850:	091bf710 d8f57fec dfd100d9 f6bb3f15     .............?..

00044860 <_ZN12_GLOBAL__N_12g0L7quant23E>:
   44860:	00044930 0004486c 00000000              0I..lH......

0004486c <_ZN12_GLOBAL__N_12g0L12quant23_zeroE>:
   4486c:	00000030 00000000 00000000 00000000     0...............
	...

00044930 <_ZN12_GLOBAL__N_12g0L13quant23_scaleE>:
   44930:	00000030 398792c2 38e45897 38e097cc     0......9.X.8...8
   44940:	38cde939 387d8149 3918b476 38ecd720     9..8I.}8v..9 ..8
   44950:	38bda9b7 39863b25 38830505 390940d0     ...8%;.9...8.@.9
   44960:	38cfc7f7 38b66487 394aa3a3 38b1d1e1     ...8.d.8..J9...8
   44970:	38a3c1fd 38a7d0dc 39202609 39ca00ad     ...8...8.& 9...9
   44980:	3896c10b 387a3be5 38a8ea95 38c61a79     ...8.;z8...8y..8
   44990:	39198b6d 38b8ab89 38d47249 393acd70     m..9...8Ir.8p.:9
   449a0:	3943eff1 38fae35f 39438650 3911cb12     ..C9_..8P.C9...9
   449b0:	38b94989 388bec3d 38d59ff3 38a10b9a     .I.8=..8...8...8
   449c0:	38af20ea 38c60da0 38c82ac0 38b8ec7b     . .8...8.*.8{..8
   449d0:	38b60e46 390ad8f6 3954262a 3899eb67     F..8...9*&T9g..8
   449e0:	38bd268c 39576247 391b89fd 3981f5a1     .&.8GbW9...9...9
   449f0:	38fa9c18                                ...8

000449f4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension23E>:
   449f4:	00000001 00000030 00000000              ....0.......

00044a00 <_ZN12_GLOBAL__N_12g0L13tensor_data23E>:
   44a00:	fffffe6e 000065e8 000062e6 fffff9df     n....e...b......
   44a10:	ffffff93 ffffc795 00005d6e 00004555     ........n]..UE..
   44a20:	ffffdb12 0000037a fffff928 000046ca     ....z...(....F..
   44a30:	00004c0b ffffbed6 ffffd1f8 fffff8e4     .L..............
   44a40:	ffffff1b 00006bca fffffd0d 00000076     .....k......v...
   44a50:	0000a707 00002e41 ffffdc99 ffffe442     ....A.......B...
   44a60:	00003f9a 00002e4c fffff59b fffff6fb     .?..L...........
   44a70:	ffffeea6 fffffe00 0000788a 0000017a     .........x..z...
   44a80:	ffffee43 00002a16 00003a26 000039ad     C....*..&:...9..
   44a90:	fffff1b7 0000a40a ffffeead fffffbb3     ................
   44aa0:	000064c2 fffffd04 fffff565 00003974     .d......e...t9..
   44ab0:	ffffff1e fffffcaf ffffe2d5 00003978     ............x9..

00044ac0 <_ZN12_GLOBAL__N_12g0L7quant22E>:
   44ac0:	00044b90 00044acc 00000003              .K...J......

00044acc <_ZN12_GLOBAL__N_12g0L12quant22_zeroE>:
   44acc:	00000030 00000000 00000000 00000000     0...............
	...

00044b90 <_ZN12_GLOBAL__N_12g0L13quant22_scaleE>:
   44b90:	00000030 3c340eea 3b97a2d4 3b9524cd     0.....4<...;.$.;
   44ba0:	3b88bce0 3b2857da 3bcacfac 3b9d46db     ...;.W(;...;.F.;
   44bb0:	3b7be567 3c32468d 3b2e02aa 3bb64a14     g.{;.F2<...;.J.;
   44bc0:	3b89faca 3b723d83 3c0690aa 3b6c2abe     ...;.=r;...<.*l;
   44bd0:	3b597da4 3b5ee164 3bd4b284 3c862473     .}Y;d.^;...;s$.<
   44be0:	3b483862 3b262bc6 3b60578e 3b838d94     b8H;.+&;.W`;...;
   44bf0:	3bcbed2c 3b7543d1 3b8d13e4 3bf818d8     ,..;.Cu;...;...;
   44c00:	3c021d56 3ba69afd 3c01d731 3bc1a1b3     V..<...;1..<...;
   44c10:	3b7615a9 3b39d5c1 3b8ddc37 3b55e368     ..v;..9;7..;h.U;
   44c20:	3b6897b6 3b83850c 3b84ec63 3b759a13     ..h;...;c..;..u;
   44c30:	3b71caf4 3bb86826 3c0ce158 3b4c6ca5     ..q;&h.;X..<.lL;
   44c40:	3b7b3732 3c0f0743 3bce9344 3c2c9a3a     27{;C..<D..;:.,<
   44c50:	3ba66ba8                                .k.;

00044c54 <_ZN12_GLOBAL__N_12g0L18tensor_dimension22E>:
   44c54:	00000004 00000001 00000003 00000003     ................
   44c64:	00000030 00000000 00000000              0...........

00044c70 <_ZN12_GLOBAL__N_12g0L13tensor_data22E>:
   44c70:	26ddc73f b1af3257 bf712f04 29614fce     ?..&W2.../q..Oa)
   44c80:	4e38b73b 462c99ac 4b52eec8 3dc17070     ;.8N..,F..RKpp.=
   44c90:	b587b530 114bb84c a82349b0 b9496e41     0...L.K..I#.AnI.
   44ca0:	48c7b649 88a93c6a 94704113 477862a9     I..Hj<...Ap..bxG
   44cb0:	6047a53b 65448db4 6361ceb4 56b67f79     ;.G`..De..acy..V
   44cc0:	9c818c43 2b52b160 9a274993 ad517c55     C...`.R+.I'.U|Q.
   44cd0:	19d8e22c cfe3022c d7261214 1c3328b5     ,...,.....&..(3.
   44ce0:	0d19e712 2f21b5fb 3022f8e0 11ed4340     ......!/.."0@C..
   44cf0:	cbbfcb20 2016e719 e10d2cdc c7172429      ...... .,..)$..
   44d00:	4abd9e2f a181546a a3656658 4a775fb5     /..JjT..Xfe.._wJ
   44d10:	7f37a06c 66488389 6479b298 5aae7b72     l.7...Hf..ydr{.Z
   44d20:	8f8b875e 48729a56 84647f9c af337559     ^...V.rH..d.Yu3.
   44d30:	7f818133 81837f7f 817f7f7f 7f7f7f81     3...............
   44d40:	7e38817f 7f7f8181 7f7f8181 7f816b7f     ..8~.........k..
   44d50:	8192817f 7f7f817f 817f7481 81397f7f     .........t....9.
   44d60:	42b3bf02 bec32036 ba2e2f46 38322ab7     ...B6 ..F/...*28
   44d70:	2014e01e 3a3cb1e3 410df0b8 19df074a     ... ..<:...AJ...
   44d80:	d2b99d37 4224d726 cc3531e5 a916002f     7...&.$B.15./...
   44d90:	37d7c9e0 ffb82a19 bf263796 32432fc7     ...7.*...7&../C2
   44da0:	3ab1ed35 2b27d4e0 2443c2af 20c5212a     5..:..'+..C$*!. 
   44db0:	d6cfb72d 5533cb26 c44353de e89a0916     -...&.3U.SC.....
   44dc0:	55b5b281 05bb4822 bb2e3eae 4c41329e     ...U"H...>...2AL
   44dd0:	3d81e442 2b44b4cc 373ad196 29affe20     B..=..D+..:7 ..)
   44de0:	bae59240 6e3ac438 ac6a5ae8 bc81ee27     @...8.:n.Zj.'...
   44df0:	3bd6f0c1 f9001915 e22123a0 27201bd9     ...;.....#!... '
   44e00:	17baf910 251ef8f6 25fe0bd8 0ae4ee1f     .......%...%....
   44e10:	e4fcdb1a 3309f311 f12b2800 d3cde606     .......3.(+.....

00044e20 <_ZN12_GLOBAL__N_12g0L7quant21E>:
   44e20:	00044ef0 00044e2c 00000000              .N..,N......

00044e2c <_ZN12_GLOBAL__N_12g0L12quant21_zeroE>:
   44e2c:	00000030 00000000 00000000 00000000     0...............
	...

00044ef0 <_ZN12_GLOBAL__N_12g0L13quant21_scaleE>:
   44ef0:	00000030 399e2b56 3928058c 392d8e5e     0...V+.9..(9^.-9
   44f00:	3999a335 3a045374 38c3a6c9 3989276d     5..9tS.:...8m'.9
   44f10:	398238d0 38de013c 39d031e6 3972354c     .8.9<..8.1.9L5r9
   44f20:	3997a54a 3932568a 39953ed0 39dbd8ca     J..9.V29.>.9...9
   44f30:	396130a5 398b624c 390347b7 3929c91a     .0a9Lb.9.G.9..)9
   44f40:	39c77fb5 39bdad03 3992a1a3 399f1755     ...9...9...9U..9
   44f50:	39986972 39acd23b 3956f5b9 39742776     ri.9;..9..V9v't9
   44f60:	3965f479 398de186 394ea601 38d209bf     y.e9...9..N9...8
   44f70:	3981b97e 39b351a2 39a42441 3992f9c6     ~..9.Q.9A$.9...9
   44f80:	39a7cad0 396b2ef3 38dafc8d 39c6db8d     ...9..k9...8...9
   44f90:	398bfaa2 3914ff4a 39151842 39c29d54     ...9J..9B..9T..9
   44fa0:	399ab1b7 3995afaf 3977fd29 38cc9aed     ...9...9).w9...8
   44fb0:	3931276b                                k'19

00044fb4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension21E>:
   44fb4:	00000001 00000030 00000000              ....0.......

00044fc0 <_ZN12_GLOBAL__N_12g0L13tensor_data21E>:
   44fc0:	fffff945 00001542 000012d8 fffffd17     E...B...........
   44fd0:	0000005e 0000263f 00000ce7 00000679     ^...?&......y...
   44fe0:	000026a7 00000576 fffff8e3 000006cd     .&..v...........
   44ff0:	00000ee8 000006d1 ffffff1c 0000032b     ............+...
   45000:	fffffaa3 00001e4b fffff4f3 fffffcf7     ....K...........
   45010:	0000041a 000003b3 0000018b fffffe4c     ............L...
   45020:	00000110 00000a7b fffff808 fffffa4c     ....{.......L...
   45030:	fffffc67 fffff75c 00002be7 00000a3b     g...\....+..;...
   45040:	000002c5 00000434 00000195 000004b5     ....4...........
   45050:	00000591 000021ec 00000493 000001bb     .....!..........
   45060:	00001b16 fffff8d6 0000022e 0000054f     ............O...
   45070:	fffff904 fffff82d 00002ad5 00000c25     ....-....*..%...

00045080 <_ZN12_GLOBAL__N_12g0L7quant20E>:
   45080:	00045150 0004508c 00000000              PQ...P......

0004508c <_ZN12_GLOBAL__N_12g0L12quant20_zeroE>:
   4508c:	00000030 00000000 00000000 00000000     0...............
	...

00045150 <_ZN12_GLOBAL__N_12g0L13quant20_scaleE>:
   45150:	00000030 3b4233f4 3ace4cc5 3ad5185d     0....3B;.L.:]..:
   45160:	3b3ca388 3ba278dc 3a703969 3b286669     ..<;.x.;i9p:if(;
   45170:	3b1fe382 3a884a69 3b7fa012 3b14b195     ...;iJ.:...;...;
   45180:	3b3a3172 3adaf76d 3b373efb 3b86f742     r1:;m..:.>7;B..;
   45190:	3b0a3eff 3b2b2356 3aa13021 3ad07732     .>.;V#+;!0.:2w.:
   451a0:	3b74f2b7 3b68e321 3b34095a 3b4355b7     ..t;!.h;Z.4;.UC;
   451b0:	3b3b224a 3b54315e 3b03f738 3b15e369     J";;^1T;8..;i..;
   451c0:	3b0d2bdc 3b2e3430 3afdb9fd 3a80f1b5     .+.;04.;...:...:
   451d0:	3b1f472f 3b5c2bb9 3b498930 3b347592     /G.;.+\;0.I;.u4;
   451e0:	3b4e04a7 3b106190 3a86700d 3b74292a     ..N;.a.;.p.:*)t;
   451f0:	3b2bde60 3ab6f0fc 3ab70fa4 3b6ef37b     `.+;...:...:{.n;
   45200:	3b3defaa 3b37c990 3b183e15 3a7b37be     ..=;..7;.>.;.7{:
   45210:	3ad9833f                                ?..:

00045214 <_ZN12_GLOBAL__N_12g0L18tensor_dimension20E>:
   45214:	00000004 00000030 00000001 00000001     ....0...........
   45224:	00000008 00000000 00000000              ............

00045230 <_ZN12_GLOBAL__N_12g0L13tensor_data20E>:
   45230:	08ce182b 1a8135dd f985c001 967febf5     +....5..........
   45240:	cfb5d184 f88134e1 f611d8c0 e79481ec     .....4..........
   45250:	0fd781d3 d8d9183a 2f5bdb44 a1b83a81     ....:...D.[/.:..
   45260:	e0c38124 acd53df2 c8caaae8 11ff814b     $....=......K...
   45270:	37293926 7ff8d01b 05d0c7e7 f57fed2c     &9)7........,...
   45280:	11810ee3 9a5b111d 03dedf07 37051681     ......[........7
   45290:	2ee34867 f3557faf ee17f8d0 42008128     gH....U.....(..B
   452a0:	2905d29c 8186420b 062d5b3b c37c2d81     ...).B..;[-..-|.
   452b0:	470bc201 8103b2f3 f3177fb0 b2accec5     ...G............
   452c0:	85937f59 b1976665 0bf54ce5 a1bc0b81     Y...ef...L......
   452d0:	0b09fe81 33631815 1332f9dd 158197a7     ......c3..2.....
   452e0:	f9d0ddfd 3d020681 f4ef043b 50ac3f7f     .......=;....?.P
   452f0:	1dd5077f f90608a9 6535c519 681681d1     ..........5e...h
   45300:	400e7f1c e91de754 f0446889 6104b77f     ...@T....hD....a
   45310:	dfbdb7b4 ed168156 2928ecc6 41b5aa7f     ....V.....()...A
   45320:	948d2b7f b8aea0b4 4524051c 02240a81     .+........$E..$.
   45330:	2a2f137f 3959c7e0 08d3227f 2f19c288     ../*..Y9."...../
   45340:	16e8f62a b4107fd6 dcf1207f 7b209d22     *........ ..". {
   45350:	9d46d3d8 8152ece1 3141b751 8125f572     ..F...R.Q.A1r.%.
   45360:	e5077f45 4c1914e9 49b2fe1a 7fb4bfe4     E......L...I....
   45370:	dffbe3f1 271a811a c4812be7 8c426e5c     .......'.+..\nB.
   45380:	0cddcc1a 3b207f48 1ddf35fb be3aa981     ....H. ;.5....:.
   45390:	ddf3cb81 b3873637 14ca3cc7 7fb8fa21     ....76...<..!...
   453a0:	fe7f31e6 29d2c8cf ced98b81 63d7756b     .1.....)....ku.c

000453b0 <_ZN12_GLOBAL__N_12g0L7quant19E>:
   453b0:	000453e0 000453bc 00000000              .S...S......

000453bc <_ZN12_GLOBAL__N_12g0L12quant19_zeroE>:
   453bc:	00000008 00000000 00000000 00000000     ................
	...

000453e0 <_ZN12_GLOBAL__N_12g0L13quant19_scaleE>:
   453e0:	00000008 39131b18 390d8976 39195845     .......9v..9EX.9
   453f0:	396252d0 3907708a 3914f505 38a4612d     .Rb9.p.9...9-a.8
   45400:	38f1a446                                F..8

00045404 <_ZN12_GLOBAL__N_12g0L18tensor_dimension19E>:
   45404:	00000001 00000008 00000000              ............

00045410 <_ZN12_GLOBAL__N_12g0L13tensor_data19E>:
   45410:	00002994 00003bcc 000010ef 00000bf7     .)...;..........
   45420:	000007ae ffffcebf 00001830 ffffe26c     ........0...l...

00045430 <_ZN12_GLOBAL__N_12g0L7quant18E>:
   45430:	00045460 0004543c 00000000              `T..<T......

0004543c <_ZN12_GLOBAL__N_12g0L12quant18_zeroE>:
   4543c:	00000008 00000000 00000000 00000000     ................
	...

00045460 <_ZN12_GLOBAL__N_12g0L13quant18_scaleE>:
   45460:	00000008 3bc35ffc 3bbbfa91 3bcba93c     ....._.;...;<..;
   45470:	3c164afe 3bb3e177 3bc5d56a 3b5a510f     .J.<w..;j..;.QZ;
   45480:	3ba07716                                .w.;

00045484 <_ZN12_GLOBAL__N_12g0L18tensor_dimension18E>:
   45484:	00000004 00000008 00000001 00000001     ................
   45494:	00000030 00000000 00000000              0...........

000454a0 <_ZN12_GLOBAL__N_12g0L13tensor_data18E>:
   454a0:	4467d327 061ad61b 11e336fb 062cb0ca     '.gD.....6....,.
   454b0:	45e03d96 e5034ad6 e043cefe 6be51be9     .=.E.J....C....k
   454c0:	aae1f3c1 f6dccec0 0a813ef3 341a1b35     .........>..5..4
   454d0:	fc3de1c5 ded91ce2 e702f52f 17fe13ec     ..=...../.......
   454e0:	f8151306 e9b8e6c9 dae4dc1b 81f6bb19     ................
   454f0:	b6bdc2fe 19e5a6d4 9355f430 fde4f4ce     ........0.U.....
   45500:	28f758c3 dc10080e 5449d64e ca1c1160     .X.(....N.IT`...
   45510:	1f0afd61 7f0f14f2 eb0cd796 aceb55fa     a............U..
   45520:	b003ffec f1db07e8 f81ab358 f3018c1a     ........X.......
   45530:	22c7eb3e 8c05ad53 a9c9fce2 14f67fe6     >.."S...........
   45540:	d6c2eed7 ccf95020 be35286f c335a81b     .... P..o(5...5.
   45550:	b86f3c33 30e60ed6 1bb65816 220a1dfa     3<o....0.X....."
   45560:	48d61ec8 d61de663 22bdfcd6 c104ecd6     ...Hc......"....
   45570:	d4dc4509 bfba25d3 dd14f910 3ce2d725     .E...%......%..<
   45580:	b7b952f8 fbdac3c2 167fc641 c9c75405     .R......A....T..
   45590:	f4550337 253514fa fc46007f c01c3744     7.U...5%..F.D7..
   455a0:	d61d21f1 290cb5c4 2b1aee12 e910e2d4     .!.....)...+....
   455b0:	3bee32e7 cee2ff33 261d45f6 0547f7f1     .2.;3....E.&..G.
   455c0:	0ff2c1fd 0afef81f 3769eed2 30dc435a     ..........i7ZC.0
   455d0:	02ed8174 209edaf5 fbe042b7 cd42cfec     t...... .B....B.
   455e0:	e9b90c5c 0b3902d6 b6fdbd47 18d53296     \.....9.G....2..
   455f0:	e2c5ecf3 f9006a12 9a81c8fc d4c1382d     .....j......-8..
   45600:	1b6e19df f341b7f4 59b5e574 aee4fbd7     ..n...A.t..Y....
   45610:	753344d1 d9e9c35e ef2cfdea ca06e9f9     .D3u^.....,.....

00045620 <_ZN12_GLOBAL__N_12g0L7quant17E>:
   45620:	000456f0 0004562c 00000000              .V..,V......

0004562c <_ZN12_GLOBAL__N_12g0L12quant17_zeroE>:
   4562c:	00000030 00000000 00000000 00000000     0...............
	...

000456f0 <_ZN12_GLOBAL__N_12g0L13quant17_scaleE>:
   456f0:	00000030 399d2fd2 39037526 3a1a80b9     0..../.9&u.9...:
   45700:	392f2248 39509c20 399631a6 397969d2     H"/9 .P9.1.9.iy9
   45710:	39525f27 39ac9f48 392f6bd6 39d8fb80     '_R9H..9.k/9...9
   45720:	39575db8 390ab345 39078b46 39045b8c     .]W9E..9F..9.[.9
   45730:	39e8365f 3982dc36 38c91faf 3922ad9e     _6.96..9...8.."9
   45740:	3a07d411 398213b9 39ab81b9 394bced0     ...:...9...9..K9
   45750:	3a53c4c4 398a42ae 399ca9bf 39478449     ..S:.B.9...9I.G9
   45760:	39461e9a 396fb65b 394a5a1e 39bc0c61     ..F9[.o9.ZJ9a..9
   45770:	3a083067 39e62f2a 38e3c6db 3a05ead1     g0.:*/.9...8...:
   45780:	394d86a9 3946b1a1 38c07c2f 3a005fa2     ..M9..F9/|.8._.:
   45790:	3a4f7053 395bc2af 3a45659b 3a1a01aa     SpO:..[9.eE:...:
   457a0:	394308be 39571fad 390a7ae8 3945d376     ..C9..W9.z.9v.E9
   457b0:	39753912                                .9u9

000457b4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension17E>:
   457b4:	00000001 00000030 00000000              ....0.......

000457c0 <_ZN12_GLOBAL__N_12g0L13tensor_data17E>:
   457c0:	000001bf 00000a01 000000b8 ffffffe3     ................
   457d0:	ffffffb0 0000252e 00000168 fffff04e     .....%..h...N...
   457e0:	ffffe913 00000054 ffffe3a5 0000015e     ....T.......^...
   457f0:	ffffee0a ffffe63e fffffe0f 000000da     ....>...........
   45800:	ffffdd6c 00003cbd fffff325 0000029c     l....<..%.......
   45810:	fffffe23 ffffff23 00000048 000002c3     #...#...H.......
   45820:	0000506e 000000dd fffffcf6 fffffbe0     nP..............
   45830:	fffffe21 fffffda2 000002d5 ffffde8e     !...............
   45840:	fffffbd7 0000321f 000001c0 000019d0     .....2..........
   45850:	ffffff1c ffffef6b ffffffe5 fffffd2d     ....k.......-...
   45860:	ffffef34 fffffff1 00000eca 00001285     4...............
   45870:	fffffb66 00001ce4 000007bd fffff6b1     f...............

00045880 <_ZN12_GLOBAL__N_12g0L7quant16E>:
   45880:	00045950 0004588c 00000003              PY...X......

0004588c <_ZN12_GLOBAL__N_12g0L12quant16_zeroE>:
   4588c:	00000030 00000000 00000000 00000000     0...............
	...

00045950 <_ZN12_GLOBAL__N_12g0L13quant16_scaleE>:
   45950:	00000030 3c50c382 3bae9796 3ccd32f6     0.....P<...;.2.<
   45960:	3be89987 3c0a87ad 3c4779f0 3c25a045     ...;...<.yG<E.%<
   45970:	3c0bb330 3c65438b 3be8fb38 3c901703     0..<.Ce<8..;...<
   45980:	3c0f043c 3bb83618 3bb404f9 3bafc996     <..<.6.;...;...;
   45990:	3c9a341b 3c2dcc77 3b858f0a 3bd80e95     .4.<w.-<...;...;
   459a0:	3cb465a7 3c2cc232 3c63c84a 3c075756     .e.<2.,<J.c<VW.<
   459b0:	3d0ca0aa 3c37a08f 3c501172 3c047dd8     ...=..7<r.P<.}.<
   459c0:	3c039052 3c1f2f18 3c065fd8 3c79c071     R..<./.<._.<q.y<
   459d0:	3cb4e049 3c98db52 3b97420d 3cb1dbde     I..<R..<.B.;...<
   459e0:	3c087b6c 3c03f1f5 3b7fa4ee 3caa7f03     l{.<...<...;...<
   459f0:	3d09c097 3c11ef48 3d031579 3ccc8a35     ...=H..<y..=5..<
   45a00:	3c0183ce 3c0edb09 3bb7eb3c 3c035e6c     ...<...<<..;l^.<
   45a10:	3c22d7e6                                .."<

00045a14 <_ZN12_GLOBAL__N_12g0L18tensor_dimension16E>:
   45a14:	00000004 00000001 00000003 00000003     ................
   45a24:	00000030 00000000 00000000              0...........

00045a30 <_ZN12_GLOBAL__N_12g0L13tensor_data16E>:
   45a30:	e627cff4 f3f2fd7f 07f827e4 d87f1640     ..'......'..@...
   45a40:	eee3e912 19b6efe4 d1173189 feeb13f8     .........1......
   45a50:	03111ce2 fa1e3b54 00f20f4b d8cdfb9c     ....T;..K.......
   45a60:	e5ba9602 1326fbd3 7f43f912 7fbb42f3     ......&...C..B..
   45a70:	ce2db5fd 51a681ad 6c19ac81 0c7f2511     ..-....Q...l.%..
   45a80:	26d08a81 0e70aa7f f7e8f43e 0143f4cc     ...&..p.>.....C.
   45a90:	7ff3ed0b fca90631 eaebd3ea d0bc0331     ....1.......1...
   45aa0:	f5011211 0cdc03fc 23e6bfd2 fca42003     ...........#. ..
   45ab0:	1513460f 02814d06 1cf7fa1b 2fc10381     .F...M........./
   45ac0:	fa7fb987 164bdbd4 0b0b5916 1f67202f     ......K..Y../ g.
   45ad0:	265a8126 d731f758 c81deef5 3420351b     &.Z&X.1......5 4
   45ae0:	7f019a29 8ed8310a aded591f 12b9ad25     )....1...Y..%...
   45af0:	b8bbb77f 7f7f81ff ce7f0b7f d5d82181     .............!..
   45b00:	7f7f8e7f 817f527f e46fe7fd 7f817f7f     .....R....o.....
   45b10:	987f8623 7f9d7fbe 817f8181 877f816f     #...........o...
   45b20:	490d8ef3 0dcbf3e6 31dd81f6 2abc0f4f     ...I.......1O..*
   45b30:	10030114 e727eafa 4c810301 14500ac4     ......'....L..P.
   45b40:	d4ed98f2 0d75083e 04d53219 7fbee941     ....>.u..2..A...
   45b50:	e21d77f4 f1d00d48 00fd0fe7 06620c3a     .w..H.......:.b.
   45b60:	cff602ec 09f90bf2 001cf2e4 fdee98d3     ................
   45b70:	20eb30fc 6a0f32c9 0bfe1010 d5e7011a     .0. .2.j........
   45b80:	12d45cfd 1efbdb1b da1b0721 b1b97f28     .\......!...(...
   45b90:	b05fe901 30f74ecf 7f077f3f 01eb98c3     .._..N.0?.......
   45ba0:	00a88164 83e5dbbf 51c7e82d 0b0a1539     d.......-..Q9...
   45bb0:	22f27f0e febf061a faf7eaed fab8fe36     ..."........6...
   45bc0:	e5e10dfc fef704f4 11da19cf 0411b72a     ............*...
   45bd0:	edff3909 020b3fd4 ef02f8e1 22f50712     .9...?........."

00045be0 <_ZN12_GLOBAL__N_12g0L7quant15E>:
   45be0:	00045cb0 00045bec 00000000              .\...[......

00045bec <_ZN12_GLOBAL__N_12g0L12quant15_zeroE>:
   45bec:	00000030 00000000 00000000 00000000     0...............
	...

00045cb0 <_ZN12_GLOBAL__N_12g0L13quant15_scaleE>:
   45cb0:	00000030 38f9182d 396aa349 38161afb     0...-..8I.j9...8
   45cc0:	395f7d54 398cd376 390e4549 3949165a     T}_9v..9IE.9Z.I9
   45cd0:	39f75557 3973d3ac 396abccf 38e86f7d     WU.9..s9..j9}o.8
   45ce0:	39a153cd 39466eb6 394ecb5c 392ddc41     .S.9.nF9\.N9A.-9
   45cf0:	3932b4d5 39266f79 393e4e38 39ace7fa     ..29yo&98N>9...9
   45d00:	3915d5f2 3974767e 3997e146 396c1f54     ...9~vt9F..9T.l9
   45d10:	38a544a0 385b67e2 394148ae 396f8ab7     .D.8.g[8.HA9..o9
   45d20:	3999356e 3a02f36c 390badb5 390a7dda     n5.9l..:...9.}.9
   45d30:	38ac69ac 38a0c60b 391a35cf 38da5bed     .i.8...8.5.9.[.8
   45d40:	392baa5d 399680e3 3936a5a7 38d61a00     ].+9...9..69...8
   45d50:	39084150 395212d7 3895c757 38a722b9     PA.9..R9W..8.".8
   45d60:	394e512b 390658c7 399ef5a6 393d2099     +QN9.X.9...9. =9
   45d70:	397aea66                                f.z9

00045d74 <_ZN12_GLOBAL__N_12g0L18tensor_dimension15E>:
   45d74:	00000001 00000030 00000000              ....0.......

00045d80 <_ZN12_GLOBAL__N_12g0L13tensor_data15E>:
   45d80:	00001c31 00000952 00008e09 fffff75f     1...R......._...
   45d90:	fffffa7c 00001eb3 fffffcc6 00000491     |...............
   45da0:	00000a23 000000a3 00001ef6 0000025d     #...........]...
   45db0:	00000b32 00000efb 00000cf7 000011ca     2...............
   45dc0:	00000c24 00000bbb fffffc6c 0000186d     $.......l...m...
   45dd0:	0000060c 00000187 00000592 00003176     ............v1..
   45de0:	00007497 000011d2 00000d2d fffffaec     .t......-.......
   45df0:	ffffff3a 00001859 00001a47 00002f43     :...Y...G...C/..
   45e00:	000031f0 000016d7 0000233c fffffaf8     .1......<#......
   45e10:	0000026f 000008e4 000021f5 00001a9a     o........!......
   45e20:	000002f0 000037c7 000036ad 00000f32     .....7...6..2...
   45e30:	00001b5c 000007c4 0000110d 00000346     \...........F...

00045e40 <_ZN12_GLOBAL__N_12g0L7quant14E>:
   45e40:	00045f10 00045e4c 00000000              ._..L^......

00045e4c <_ZN12_GLOBAL__N_12g0L12quant14_zeroE>:
   45e4c:	00000030 00000000 00000000 00000000     0...............
	...

00045f10 <_ZN12_GLOBAL__N_12g0L13quant14_scaleE>:
   45f10:	00000030 3b155c5d 3b8cb141 3a3402cc     0...]\.;A..;..4:
   45f20:	3b8601fa 3ba8e201 3b2a9d82 3b712666     ...;...;..*;f&q;
   45f30:	3c144e09 3b9233c8 3b8cc08f 3b0b5f31     .N.<.3.;...;1_.;
   45f40:	3bc177f9 3b6df75a 3b77fe7b 3b507fa5     .w.;Z.m;{.w;..P;
   45f50:	3b564f62 3b47982c 3b64385d 3bcf5ab3     bOV;,.G;]8d;.Z.;
   45f60:	3b33b002 3b929569 3bb6239a 3b8d9522     ..3;i..;.#.;"..;
   45f70:	3ac631c9 3a838f1d 3b67cabb 3b8fa207     .1.:...:..g;...;
   45f80:	3bb7bb87 3c1d0a4d 3b2781ba 3b261555     ...;M..<..';U.&;
   45f90:	3acec33c 3ac0cdf9 3b38eefc 3b02ee71     <..:...:..8;q..;
   45fa0:	3b4dddcf 3bb47d02 3b5b0931 3b0060e8     ..M;.}.;1.[;.`.;
   45fb0:	3b2366ba 3b7bed37 3ab39e7f 3ac86f22     .f#;7.{;...:"o.:
   45fc0:	3b776bf2 3b211cdc 3bbea10e 3b62cea6     .kw;..!;...;..b;
   45fd0:	3b9673eb                                .s.;

00045fd4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension14E>:
   45fd4:	00000004 00000030 00000001 00000001     ....0...........
   45fe4:	00000008 00000000 00000000              ............

00045ff0 <_ZN12_GLOBAL__N_12g0L13tensor_data14E>:
   45ff0:	811027ec 7a1808a6 fdef0a5e 177f2eb1     .'.....z^.......
   46000:	eadf72f6 81d252d9 7fadb33e eb01ce82     .r...R..>.......
   46010:	f435bb2d 1c32fa81 a7f831ee 09e2fa81     -.5...2..1......
   46020:	292eeb32 8bfadd7f 7f191f0a 17fcf61a     2..)............
   46030:	d50f1d19 e00c7f21 17f21473 417fc8c8     ....!...s......A
   46040:	ddb649fe c74d7f08 6681d9ec 4bee1fc5     .I....M....f...K
   46050:	3035afa1 09d38121 331f2429 d90c7fc9     ..50!...)$.3....
   46060:	0a0c8a0d 73819dba 0cf52da3 ce81fa69     .......s.-..i...
   46070:	81a1575a 20677d3d 2d837f9a 8c13ecfa     ZW..=}g ...-....
   46080:	7fa0ff26 c2d5dff8 1c090c74 337f09d2     &.......t......3
   46090:	7fa9b72a c1e2e82e 9a7f2f1a 9820e529     *......../..). .
   460a0:	3881dfb3 71ff26ea 291b174b da3a7781     ...8.&.qK..).w:.
   460b0:	508100f2 422e1ed9 7fb4df29 f2e0f933     ...P...B)...3...
   460c0:	a87f14b7 f93e18f2 047f4ebd 1344f715     ......>..N....D.
   460d0:	8125a2cc eaff0de8 59f2b5b3 3dee81fb     ..%........Y...=
   460e0:	e97a2c81 1b46252f 815731c4 3c2210d2     .,z./%F..1W..."<
   460f0:	876152aa 7f07fc0f 30c67602 e3811418     .Ra......v.0....
   46100:	937f075e d82f8fa4 6d25f65a 8114b753     ^...../.Z.%mS...
   46110:	997f3e18 9422ed19 476dcdc9 f15b8102     .>...."...mG..[.
   46120:	314d0450 187fcaea 09eeb329 40450281     P.M1....).....E@
   46130:	668124d9 6eb92bcd 05d1ef91 10a80b7f     .$.f.+.n........
   46140:	e1e846ac c7932a7f 7fdf7b7b 4f3396fe     .F...*..{{....3O
   46150:	0e691900 df198127 4e7fb8fa 108befe3     ..i.'......N....
   46160:	40878134 ef0016a8 f92ae79b e481224b     4..@......*.K"..

00046170 <_ZN12_GLOBAL__N_12g0L7quant13E>:
   46170:	000461a0 0004617c 00000000              .a..|a......

0004617c <_ZN12_GLOBAL__N_12g0L12quant13_zeroE>:
   4617c:	00000008 00000000 00000000 00000000     ................
	...

000461a0 <_ZN12_GLOBAL__N_12g0L13quant13_scaleE>:
   461a0:	00000008 391b7530 38fa350e 390244fd     ....0u.9.5.8.D.9
   461b0:	38862414 392d8e6c 38fd0e08 38f9bf7d     .$.8l.-9...8}..8
   461c0:	390027b7                                .'.9

000461c4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension13E>:
   461c4:	00000001 00000008 00000000              ............

000461d0 <_ZN12_GLOBAL__N_12g0L13tensor_data13E>:
   461d0:	ffffcfd4 000004fd ffffc51d 000003bf     ................
   461e0:	00000b6c fffff0b0 00002a7d 000003cd     l.......}*......

000461f0 <_ZN12_GLOBAL__N_12g0L7quant12E>:
   461f0:	00046220 000461fc 00000000               b...a......

000461fc <_ZN12_GLOBAL__N_12g0L12quant12_zeroE>:
   461fc:	00000008 00000000 00000000 00000000     ................
	...

00046220 <_ZN12_GLOBAL__N_12g0L13quant12_scaleE>:
   46220:	00000008 3bce77a4 3ba6273b 3bad03a0     .....w.;;'.;...;
   46230:	3b3227ea 3be68127 3ba80b51 3ba5d929     .'2;'..;Q..;)..;
   46240:	3baa34bf                                .4.;

00046244 <_ZN12_GLOBAL__N_12g0L18tensor_dimension12E>:
   46244:	00000004 00000008 00000001 00000001     ................
   46254:	00000030 00000000 00000000              0...........

00046260 <_ZN12_GLOBAL__N_12g0L13tensor_data12E>:
   46260:	46d96a2e 0be7fbfd e404c03f cbe0050b     .j.F....?.......
   46270:	1020ec00 07dee2c8 fb191112 1de90e11     .. .............
   46280:	81710ac2 74f41aea 010e0fe5 d51a28f2     ..q....t.....(..
   46290:	361fd2ff e8ecf3f0 2a5ed72c b1d40a12     ...6....,.^*....
   462a0:	0c10277f f2231fba ccdea7cf db28c9f2     .'....#.......(.
   462b0:	0be2e6f5 d053f107 28c524ef 320f3f4e     ......S..$.(N?.2
   462c0:	f3f5e84a 483c696a e3fef8e3 1b372ef7     J...ji<H......7.
   462d0:	c13fdfe7 3bd5cfd6 1771a7a9 0fc8bc3b     ..?....;..q.;...
   462e0:	10635481 14f9f8f3 c70e3d1a d73712ea     .Tc......=....7.
   462f0:	f50ede4d 31177e77 3b20e6dc 1a492b81     M...w~.1.. ;.+I.
   46300:	944a0909 582312a8 1836db0b f703c930     ..J...#X..6.0...
   46310:	88be3c87 d044dd19 e48da135 3df32dc2     .<....D.5....-.=
   46320:	d9e22927 edecf7f5 f4f5fa05 313deade     ')............=1
   46330:	27def0d6 05f2f51b 35fdd9cd 1ceb0bf3     ...'.......5....
   46340:	8119f1e1 35091af7 e7f3f305 ed530027     .......5....'.S.
   46350:	35aa3640 1bfb0304 eacac9b1 1d2b171f     @6.5..........+.
   46360:	7f28c229 32cacfbe 40dce71e 02c71c1e     ).(....2...@....
   46370:	ffc905fc 42eb0ffc d5f84e12 c5121c7a     .......B.N..z...
   46380:	d016b8df b6b1d8d7 2a8cbfdf 585fcccb     ...........*.._X
   46390:	ed150981 0b433611 56b8f7f4 492adcb0     .....6C....V..*I
   463a0:	2457c90e a9f42b19 0fe2c5f4 3ef5efd6     ..W$.+.........>
   463b0:	29ee134b 05090d0d eff4f852 ebf3063c     K..)....R...<...
   463c0:	ffe3f8cb e5eaec02 fe0e8145 13eb6301     ........E....c..
   463d0:	d2c618b6 171b1af1 efdd451a e62a1fd4     .........E....*.

000463e0 <_ZN12_GLOBAL__N_12g0L7quant11E>:
   463e0:	000464b0 000463ec 00000000              .d...c......

000463ec <_ZN12_GLOBAL__N_12g0L12quant11_zeroE>:
   463ec:	00000030 00000000 00000000 00000000     0...............
	...

000464b0 <_ZN12_GLOBAL__N_12g0L13quant11_scaleE>:
   464b0:	00000030 38d04ca9 39108be6 3a1e0842     0....L.8...9B..:
   464c0:	389d5e28 3a020eed 3a2b2ea3 39349ce0     (^.8...:..+:..49
   464d0:	393148a1 388f524b 3957b664 39e66306     .H19KR.8d.W9.c.9
   464e0:	39825e58 395c5b26 392f92a9 38686eca     X^.9&[\9../9.nh8
   464f0:	386c1502 38e61464 39e3edd0 388a2455     ..l8d..8...9U$.8
   46500:	38c03080 3874ae1e 3a14ef7f 3a870d1a     .0.8..t8...:...:
   46510:	39605e30 387a27c6 39092bf4 38c06c1e     0^`9.'z8.+.9.l.8
   46520:	38e90433 392e6ae4 390616d8 39d02233     3..8.j.9...93".9
   46530:	399a39ed 38d208d9 397b8de4 38a0835b     .9.9...8..{9[..8
   46540:	3899e3f7 399abc82 39be0a44 38e17eb0     ...8...9D..9.~.8
   46550:	394c982c 38b7a558 395f0dc0 38f5cfc4     ,.L9X..8.._9...8
   46560:	39b30d75 38a9980c 3974c877 38c7c81a     u..9...8w.t9...8
   46570:	3a0a40fb                                .@.:

00046574 <_ZN12_GLOBAL__N_12g0L18tensor_dimension11E>:
   46574:	00000001 00000030 00000000              ....0.......

00046580 <_ZN12_GLOBAL__N_12g0L13tensor_data11E>:
   46580:	00000272 0000220c 000000c8 fffffb1b     r...."..........
   46590:	0000027c 000000da 00001c28 00001cbf     |.......(.......
   465a0:	000000fc ffffe4d3 fffffec7 0000026f     ............o...
   465b0:	00001bc2 000011f7 00005fc8 00004438     ........._..8D..
   465c0:	fffffcdc fffffac4 0000043b 00001aaa     ........;.......
   465d0:	00004435 0000036a fffffba3 ffffff83     5D..j...........
   465e0:	00001181 00000188 00001141 00004a05     ........A....J..
   465f0:	00001917 00002fee ffffffc1 0000078a     ...../..........
   46600:	fffffb06 fffff563 ffffface 000001db     ....c...........
   46610:	0000005d 000000b2 ffffff35 000010d5     ].......5.......
   46620:	000018dc 000012ea ffffe7a5 0000021e     ................
   46630:	000013b1 fffffbf9 0000257a ffffff18     ........z%......

00046640 <_ZN12_GLOBAL__N_12g0L7quant10E>:
   46640:	00046710 0004664c 00000003              .g..Lf......

0004664c <_ZN12_GLOBAL__N_12g0L12quant10_zeroE>:
   4664c:	00000030 00000000 00000000 00000000     0...............
	...

00046710 <_ZN12_GLOBAL__N_12g0L13quant10_scaleE>:
   46710:	00000030 3b8a52e8 3bbff9cd 3cd1e2f8     0....R.;...;...<
   46720:	3b51010d 3cacbbd2 3ce359f0 3befe059     ..Q;...<.Y.<Y..;
   46730:	3beb7476 3b3e594b 3c0f3f1e 3c98fdc2     vt.;KY>;.?.<...<
   46740:	3c2d254d 3c125487 3be92ec8 3b1a5992     M%-<.T.<...;.Y.;
   46750:	3b1cc5f3 3b98c98a 3c975bec 3b377841     ...;...;.[.<Ax7;
   46760:	3b7f406a 3b227ba0 3cc5ce14 3d335d66     j@.;.{";...<f]3=
   46770:	3c14fe8c 3b261e69 3bb62e60 3b7f8f97     ...<i.&;`..;...;
   46780:	3b9abcca 3be7a5f7 3bb21657 3c8a36b6     ...;...;W..;.6.<
   46790:	3c4cd4ef 3b8b79e0 3c270c39 3b552e75     ..L<.y.;9.'<u.U;
   467a0:	3b4c62c4 3c4d825d 3c7c65a2 3b95be21     .bL;].M<.e|<!..;
   467b0:	3c07dd0d 3b73e798 3c141f21 3ba33bf8     ...<..s;!..<.;.;
   467c0:	3c6dcddf 3b613df0 3c228d1f 3b84aae1     ..m<.=a;.."<...;
   467d0:	3cb79e4d                                M..<

000467d4 <_ZN12_GLOBAL__N_12g0L18tensor_dimension10E>:
   467d4:	00000004 00000001 00000003 00000003     ................
   467e4:	00000030 00000000 00000000              0...........

000467f0 <_ZN12_GLOBAL__N_12g0L13tensor_data10E>:
   467f0:	48a4aeef afb103aa d7783c32 c9b209fb     ...H....2<x.....
   46800:	d421a46a b4e490f6 81035e4c 4d38df06     j.!.....L^....8M
   46810:	123d4536 0e254857 2b17f081 a0e33ec6     6E=.WH%....+.>..
   46820:	4626f761 0cc72b81 3b7d6d64 9b81b7f2     a.&F.+..dm};....
   46830:	ae60d878 257f7e91 8a30567f 7399d8b5     x.`..~.%.V0....s
   46840:	68667f5d b63a57ed cc0cada3 6ad966b7     ].fh.W:......f.j
   46850:	3d38fa6b fae20cb1 e10b4c19 d1d9fdb7     k.8=.....L......
   46860:	f138532e 49b6e1c2 cf1d141f 261ae3ff     .S8....I.......&
   46870:	440c5e2e f42f1bfe 0d05f7c4 fcfc6ce0     .^.D../......l..
   46880:	536f8127 8181b758 d1654673 a38bfe02     '.oSX...sFe.....
   46890:	96317f5c 811e70df 92716f65 51bb8c03     \.1..p..eoq....Q
   468a0:	3463fc6c 023f7a1e 6165e6ee 748f798c     l.c4.z?...ea.y.t
   468b0:	7f01f37f 08a78179 397f7f7f 818281dc     ....y......9....
   468c0:	817f407f 379a8181 8f7f7f71 7f7f8181     .@.....7q.......
   468d0:	7f7f017f 817f7ffc ac7f8101 818a7f81     ................
   468e0:	3f81f861 fad6c557 f214511b dce0fd81     a..?W....Q......
   468f0:	e0449329 3e4504b1 d0002a2f 1ce0b8f5     ).D...E>/*......
   46900:	4a1af82b fa4c1503 f834f6e4 0dd451ba     +..J..L...4..Q..
   46910:	1e0bb841 aeb341fc 2e1e111f ebce060a     A....A..........
   46920:	c214dc19 a60ffdf5 f44a2a19 120a920d     .........*J.....
   46930:	103eaa3b 01091b81 8152f617 f3a739ac     ;.>.......R..9..
   46940:	39060536 00da5c06 811d3717 e1cba9f1     6..9.\...7......
   46950:	a033f62a 22e9f2dc da4b2f1d 0ee28fad     *.3...."./K.....
   46960:	1d3fa83a d0392314 646dba75 10814b83     :.?..#9.u.md.K..
   46970:	2efaf4e0 fde327ea 29d91108 05e9feba     .....'.....)....
   46980:	f8191c0c 1c1015da 00161711 f00cd0fc     ................
   46990:	140ed1ff 082ae90b f4150038 fce758d8     ......*.8....X..

000469a0 <_ZN12_GLOBAL__N_12g0L6quant9E>:
   469a0:	00046a70 000469ac 00000000              pj...i......

000469ac <_ZN12_GLOBAL__N_12g0L11quant9_zeroE>:
   469ac:	00000030 00000000 00000000 00000000     0...............
	...

00046a70 <_ZN12_GLOBAL__N_12g0L12quant9_scaleE>:
   46a70:	00000030 39b7cf59 3a05ec5f 38aa7d28     0...Y..9_..:(}.8
   46a80:	3a417d41 39f53413 39c52974 3ac12095     A}A:.4.9t).9. .:
   46a90:	3a61f1a1 3a712c22 3a084452 3917de90     ..a:",q:RD.:...9
   46aa0:	39d4c6a1 39d073b0 3a7d8e8a 3a0b86cd     ...9.s.9..}:...:
   46ab0:	3ac91540 3a7e9afe 39a12854 3a82551e     @..:..~:T(.9.U.:
   46ac0:	3acafb6d 3a490d45 39c7adae 38eda692     m..:E.I:...9...8
   46ad0:	39cf6110 3a90080a 3a4014b5 3a6232b4     .a.9...:..@:.2b:
   46ae0:	39ddb1b0 3a67b832 3a2f2dfd 399202cd     ...92.g:.-/:...9
   46af0:	3a030219 3a3a06b3 3981a3a0 39c2d485     ...:..::...9...9
   46b00:	39a5e364 39e61a8b 3aa3d13f 39fb1d1c     d..9...9?..:...9
   46b10:	3a0aeadf 3aa845f6 3a09613e 3a469b2c     ...:.E.:>a.:,.F:
   46b20:	39780e28 3aad3a89 3a170458 3a0f2860     (.x9.:.:X..:`(.:
   46b30:	39dde08e                                ...9

00046b34 <_ZN12_GLOBAL__N_12g0L17tensor_dimension9E>:
   46b34:	00000001 00000030 00000000              ....0.......

00046b40 <_ZN12_GLOBAL__N_12g0L12tensor_data9E>:
   46b40:	00002e4e 0000138b 000037b8 0000087d     N........7..}...
   46b50:	0000105b 0000125b ffffee90 0000120d     [...[...........
   46b60:	00000adf fffff4dd fffff1ee 00001511     ................
   46b70:	fffff2e3 ffffecbe 00001e73 00000726     ........s...&...
   46b80:	fffff799 000008d5 fffff892 00000caf     ................
   46b90:	ffffffd8 000011e4 00000726 fffff5a0     ........&.......
   46ba0:	fffffebe ffffec4a 00000aff ffffee74     ....J.......t...
   46bb0:	0000106f 00002026 00000276 00000290     o...& ..v.......
   46bc0:	00001fc0 00002b7b 0000215c 000013aa     ....{+..\!......
   46bd0:	00001805 ffffed0d 000002d5 000013b5     ................
   46be0:	fffffc92 ffffed74 0000106d 0000077e     ....t...m...~...
   46bf0:	0000011f ffffe5c9 ffffced5 000009b5     ................

00046c00 <_ZN12_GLOBAL__N_12g0L6quant8E>:
   46c00:	00046cd0 00046c0c 00000000              .l...l......

00046c0c <_ZN12_GLOBAL__N_12g0L11quant8_zeroE>:
   46c0c:	00000030 00000000 00000000 00000000     0...............
	...

00046cd0 <_ZN12_GLOBAL__N_12g0L12quant8_scaleE>:
   46cd0:	00000030 3b9b3a93 3be232ca 3a8ffaa5     0....:.;.2.;...:
   46ce0:	3c23672f 3bcf1376 3ba68130 3ca318ec     /g#<v..;0..;...<
   46cf0:	3c3ecfaa 3c4babfb 3be6281c 3b004139     ..><..K<.(.;9A.;
   46d00:	3bb3b0d5 3bb00a03 3c562169 3beba98f     ...;...;i!V<...;
   46d10:	3ca9d0e7 3c57041f 3b881943 3c5c2228     ...<..W<C..;("\<
   46d20:	3cab6b7b 3c29ca2a 3ba8a13e 3ac8b29b     {k.<*.)<>..;...:
   46d30:	3baf2217 3c734565 3c2236b3 3c3f069f     .".;eEs<.6"<..?<
   46d40:	3bbb38e4 3c43b053 3c13f0c1 3b769d53     .8.;S.C<...<S.v;
   46d50:	3bdd4652 3c1d19b5 3b5af65e 3ba48913     RF.;...<^.Z;...;
   46d60:	3b8c1803 3bc252fe 3c8a584d 3bd4113b     ...;.R.;MX.<;..;
   46d70:	3beaa232 3c8e1ba5 3be8095a 3c27b96b     2..;...<Z..;k.'<
   46d80:	3b517c05 3c924af7 3bff11df 3bf1cba0     .|Q;.J.<...;...;
   46d90:	3bbb6079                                y`.;

00046d94 <_ZN12_GLOBAL__N_12g0L17tensor_dimension8E>:
   46d94:	00000004 00000030 00000001 00000001     ....0...........
   46da4:	00000008 00000000 00000000              ............

00046db0 <_ZN12_GLOBAL__N_12g0L12tensor_data8E>:
   46db0:	81199697 fffcfdc1 fe62f181 0f0519d0     ..........b.....
   46dc0:	7f1af018 fbeee51a f5e5bd97 e0d57f24     ............$...
   46dd0:	fdf4e3fb b88109f9 01f4dcfd be810cf2     ................
   46de0:	f510087f fc0112bd 06f2e581 0a000c45     ............E...
   46df0:	f6f52b17 142b81e2 f9f3144b 7ff9fee9     .+....+.K.......
   46e00:	0b83fa74 7f2efba5 de076881 100dbd5a     t........h..Z...
   46e10:	0b93df7f eaf8fd34 f20e0b7f f40518e2     ....4...........
   46e20:	ef67af81 88daf643 f9004f1f 0ced81f4     ..g.C....O......
   46e30:	020ac1f5 070b7f0a f7ba8820 eece7fde     ........ .......
   46e40:	eff3ec28 f47f1bed 81fc17fd f4fe25f8     (............%..
   46e50:	0a4de2b0 81ff6738 ea25f7ee aa810af0     ..M.8g....%.....
   46e60:	7f08f243 2d33f3ee f887f07f 0409e520     C.....3-.... ...
   46e70:	231e14df af810107 06ac0b7f 1906f80f     ...#............
   46e80:	81e037ff fc0318e6 0396127f 501a3593     .7...........5.P
   46e90:	0feceb81 20fc0837 83f081f7 ecf01bf6     ....7.. ........
   46ea0:	1e7f5cfe 22709626 2f81f9b1 675ee403     .\..&.p".../..^g
   46eb0:	810285fa eef50bf3 8e00810f e6041006     ................
   46ec0:	a220d2e7 4b7fc927 04390781 601ae893     .. .'..K..9....`
   46ed0:	fb720f81 29de0ed5 f8fb0d7f 0e0213b7     ..r....)........
   46ee0:	275002b7 7f32ca41 fc49fb81 05f70cbb     ..P'A.2...I.....
   46ef0:	f0291ffd 337ff41b 02b7f47f f7090d37     ..)....3....7...
   46f00:	fa2081f0 ebfc0711 f77f6a05 0744a527     .. ......j..'.D.
   46f10:	6ffff707 00008103 f921e07f 030967c0     ...o......!..g..
   46f20:	6bf47f0a 281a7ffe e30b22f2 487fda1b     ...k...(.".....H

00046f30 <_ZN12_GLOBAL__N_12g0L6quant7E>:
   46f30:	00046f60 00046f3c 00000000              `o..<o......

00046f3c <_ZN12_GLOBAL__N_12g0L11quant7_zeroE>:
   46f3c:	00000008 00000000 00000000 00000000     ................
	...

00046f60 <_ZN12_GLOBAL__N_12g0L12quant7_scaleE>:
   46f60:	00000008 3893f352 38fb5f06 38b7a75f     ....R..8._.8_..8
   46f70:	38625a97 38fff480 394f1ed2 38cf755c     .Zb8...8..O9\u.8
   46f80:	3935ec9b                                ..59

00046f84 <_ZN12_GLOBAL__N_12g0L17tensor_dimension7E>:
   46f84:	00000001 00000008 00000000              ............

00046f90 <_ZN12_GLOBAL__N_12g0L12tensor_data7E>:
   46f90:	00001078 ffffec86 fffffe8f 00000e58     x...........X...
   46fa0:	00000914 000002bb fffff271 00000bd1     ........q.......

00046fb0 <_ZN12_GLOBAL__N_12g0L6quant6E>:
   46fb0:	00046fe0 00046fbc 00000000              .o...o......

00046fbc <_ZN12_GLOBAL__N_12g0L11quant6_zeroE>:
   46fbc:	00000008 00000000 00000000 00000000     ................
	...

00046fe0 <_ZN12_GLOBAL__N_12g0L12quant6_scaleE>:
   46fe0:	00000008 3b447f28 3ba6ed1a 3b73ea4a     ....(.D;...;J.s;
   46ff0:	3b165028 3ba9f85d 3c098a77 3b89c3ef     (P.;]..;w..<...;
   47000:	3bf19e3d                                =..;

00047004 <_ZN12_GLOBAL__N_12g0L17tensor_dimension6E>:
   47004:	00000004 00000008 00000001 00000001     ................
   47014:	00000008 00000000 00000000              ............

00047020 <_ZN12_GLOBAL__N_12g0L12tensor_data6E>:
   47020:	dfd500e9 fa8125ed 7ffc6115 ddf5f80a     .....%...a......
   47030:	c4dbfd7f ca6231ba ab2a8109 391caa0d     .....1b...*....9
   47040:	f7c4007e cf81fc1d 2804dd02 09008102     ~..........(....
   47050:	0270ea7f 07fce16d fda1fe81 0523069e     ..p.m.........#.

00047060 <_ZN12_GLOBAL__N_12g0L6quant5E>:
   47060:	00047090 0004706c 00000000              .p..lp......

0004706c <_ZN12_GLOBAL__N_12g0L11quant5_zeroE>:
   4706c:	00000008 00000000 00000000 00000000     ................
	...

00047090 <_ZN12_GLOBAL__N_12g0L12quant5_scaleE>:
   47090:	00000008 3993616d 39d09389 396cfbf6     ....ma.9...9..l9
   470a0:	39b7067c 3974ae08 39a6ea9b 3a9b9291     |..9..t9...9...:
   470b0:	3b419265                                e.A;

000470b4 <_ZN12_GLOBAL__N_12g0L17tensor_dimension5E>:
   470b4:	00000001 00000008 00000000              ............

000470c0 <_ZN12_GLOBAL__N_12g0L12tensor_data5E>:
   470c0:	ffffd437 0000298e 00000196 ffffd0c5     7....)..........
   470d0:	fffffc50 ffffc946 0000015f 0000005f     P...F..._..._...

000470e0 <_ZN12_GLOBAL__N_12g0L6quant4E>:
   470e0:	00047110 000470ec 00000003              .q...p......

000470ec <_ZN12_GLOBAL__N_12g0L11quant4_zeroE>:
   470ec:	00000008 00000000 00000000 00000000     ................
	...

00047110 <_ZN12_GLOBAL__N_12g0L12quant4_scaleE>:
   47110:	00000008 3c43bd65 3c8a81f9 3c1d5f51     ....e.C<...<Q_.<
   47120:	3c73149d 3c227b91 3c5daf96 3d4e9ea8     ..s<.{"<..]<..N=
   47130:	3e008b37                                7..>

00047134 <_ZN12_GLOBAL__N_12g0L17tensor_dimension4E>:
   47134:	00000004 00000001 00000003 00000003     ................
   47144:	00000008 00000000 00000000              ............

00047150 <_ZN12_GLOBAL__N_12g0L12tensor_data4E>:
   47150:	110d0201 1e080207 7fdb0106 1dfb01ed     ................
   47160:	11f500fd 15fa02fe e77ffffd 2b90017f     ...............+
   47170:	0597817f 81f17fa8 e90e01e4 297f01fd     ...............)
   47180:	04090103 250f010b fdd20505 9bf603f3     .......%........
   47190:	00f702fb 28fafe02                       .......(

00047198 <_ZN12_GLOBAL__N_12g0L6quant3E>:
   47198:	000471c8 000471a4 00000000              .q...q......

000471a4 <_ZN12_GLOBAL__N_12g0L11quant3_zeroE>:
   471a4:	00000008 00000000 00000000 00000000     ................
	...

000471c8 <_ZN12_GLOBAL__N_12g0L12quant3_scaleE>:
   471c8:	00000008 3921d548 393e2693 39142a63     ....H.!9.&>9c*.9
   471d8:	38bd4bfc 397b3b4b 39a181aa 374b86b1     .K.8K;{9...9..K7
   471e8:	37e76270                                pb.7

000471ec <_ZN12_GLOBAL__N_12g0L17tensor_dimension3E>:
   471ec:	00000001 00000008 00000000 00000000     ................
   471fc:	00000000                                ....

00047200 <_ZN12_GLOBAL__N_12g0L12tensor_data3E>:
   47200:	0000417d 00002d54 00000252 000073f0     }A..T-..R....s..
   47210:	00000a7a 00001e07 00013dd6 00000928     z........=..(...

00047220 <_ZN12_GLOBAL__N_12g0L6quant2E>:
   47220:	00047250 0004722c 00000000              Pr..,r......

0004722c <_ZN12_GLOBAL__N_12g0L11quant2_zeroE>:
   4722c:	00000008 00000000 00000000 00000000     ................
	...

00047250 <_ZN12_GLOBAL__N_12g0L12quant2_scaleE>:
   47250:	00000008 3d213372 3d3d686c 3d139638     ....r3!=lh==8..=
   47260:	3cbc8eaf 3d7a400f 3da0e028 3b4abb2a     ...<.@z=(..=*.J;
   47270:	3be67b0d                                .{.;

00047274 <_ZN12_GLOBAL__N_12g0L17tensor_dimension2E>:
   47274:	00000004 00000008 00000003 00000003     ................
   47284:	00000001 00000000 00000000              ............

00047290 <_ZN12_GLOBAL__N_12g0L12tensor_data2E>:
   47290:	810831c7 2ed6ff78 237f39ff 08d4b1bd     .1..x....9.#....
   472a0:	1b1e05d7 814534d1 2ac62015 4a351435     .....4E.. .*5.5J
   472b0:	c681b01a 102fcb04 db046f81 00c8021f     ....../..o......
   472c0:	01027f00 adf000b5 fe81ea02 2b0bcef5     ...............+
   472d0:	fcec1d81 f348e5f4                       ......H.

000472d8 <_ZN12_GLOBAL__N_12g0L17tensor_dimension1E>:
   472d8:	00000002 00000004 00000002 00000000     ................
	...

000472f0 <_ZN12_GLOBAL__N_12g0L12tensor_data1E>:
	...
   472fc:	00000001 00000000 00000001 00000000     ................
   4730c:	00000000                                ....

00047310 <_ZN12_GLOBAL__N_12g0L6quant0E>:
   47310:	00047324 0004731c 00000000              $s...s......

0004731c <_ZN12_GLOBAL__N_12g0L11quant0_zeroE>:
   4731c:	00000001 ffffff80                       ........

00047324 <_ZN12_GLOBAL__N_12g0L12quant0_scaleE>:
   47324:	00000001 3b808081                       .......;

0004732c <_ZN12_GLOBAL__N_12g0L17tensor_dimension0E>:
   4732c:	00000004 00000001 00000060 00000060     ........`...`...
   4733c:	00000001                                ....

00047340 <zeroes.0>:
   47340:	30303030 30303030 30303030 30303030     0000000000000000

00047350 <blanks.1>:
   47350:	20202020 20202020 20202020 20202020                     

00047360 <_ctype_>:
   47360:	20202000 20202020 28282020 20282828     .         ((((( 
   47370:	20202020 20202020 20202020 20202020                     
   47380:	10108820 10101010 10101010 10101010      ...............
   47390:	04040410 04040404 10040404 10101010     ................
   473a0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   473b0:	01010101 01010101 01010101 10101010     ................
   473c0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   473d0:	02020202 02020202 02020202 10101010     ................
   473e0:	00000020 00000000 00000000 00000000      ...............
	...

00047464 <zeroes.0>:
   47464:	30303030 30303030 30303030 30303030     0000000000000000

00047474 <blanks.1>:
   47474:	20202020 20202020 20202020 20202020                     

00047484 <p05.0>:
   47484:	00000005 00000019 0000007d              ........}...

00047490 <__mprec_bigtens>:
   47490:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   474a0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   474b0:	7f73bf3c 75154fdd                       <.s..O.u

000474b8 <__mprec_tens>:
   474b8:	00000000 3ff00000 00000000 40240000     .......?......$@
   474c8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   474d8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   474e8:	00000000 412e8480 00000000 416312d0     .......A......cA
   474f8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   47508:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   47518:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   47528:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   47538:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   47548:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   47558:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   47568:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   47578:	79d99db4 44ea7843                       ...yCx.D

00047580 <desc_ms_os_20>:
   47580:	0000000a 06030000 000800b2 00000001     ................
   47590:	000800a8 00020002 001400a0 49570003     ..............WI
   475a0:	4253554e 00000000 00000000 00840000     NUSB............
   475b0:	00070004 0044002a 00760065 00630069     ....*.D.e.v.i.c.
   475c0:	00490065 0074006e 00720065 00610066     e.I.n.t.e.r.f.a.
   475d0:	00650063 00550047 00440049 00000073     c.e.G.U.I.D.s...
   475e0:	007b0050 00370039 00460035 00340034     P.{.9.7.5.F.4.4.
   475f0:	00390044 0030002d 00300044 002d0038     D.9.-.0.D.0.8.-.
   47600:	00330034 00440046 0038002d 00330042     4.3.F.D.-.8.B.3.
   47610:	002d0045 00320031 00430037 00380041     E.-.1.2.7.C.A.8.
   47620:	00460041 00460046 00440039 0000007d     A.F.F.F.9.D.}...
   47630:	00000000                                ....

00047634 <desc_bos>:
   47634:	00390f05 05101802 08b63800 a009a934     ..9......8..4...
   47644:	a0fd8b47 b6158876 01010065 05101c01     G...v...e.......
   47654:	dd60df00 c74589d8 65d29c4c 8a649e9d     ..`...E.L..e..d.
   47664:	0300009f 0200b206 00000000              ............

00047670 <desc_hs_configuration>:
   47670:	00620209 a0000103 000b0832 00020202     ..b.....2.......
   47680:	00040900 02020100 24050400 05012000     ...........$. ..
   47690:	01000124 02022404 00062405 81050701     $....$...$......
   476a0:	10000803 00010409 00000a02 02050700     ................
   476b0:	00020002 02820507 09000200 02000204     ................
   476c0:	050000ff 02030507 07000200 00028305     ................
   476d0:	00000002                                ....

000476d4 <desc_fs_configuration>:
   476d4:	00620209 a0000103 000b0832 00020202     ..b.....2.......
   476e4:	00040900 02020100 24050400 05012000     ...........$. ..
   476f4:	01000124 02022404 00062405 81050701     $....$...$......
   47704:	10000803 00010409 00000a02 02050700     ................
   47714:	00004002 02820507 09000040 02000204     .@......@.......
   47724:	050000ff 02030507 07000040 40028305     ........@......@
   47734:	00000000                                ....

00047738 <__compound_literal.0>:
   47738:	00000409                                ....

0004773c <desc_device>:
   4773c:	02100112 400102ef 4011cafe 02010100     .......@...@....
   4774c:	00000103                                ....

00047750 <desc_url>:
   47750:	61010330 7169626d 672e6961 75687469     0..ambiqai.githu
   47760:	6f692e62 6265772f 656c622d 7361642d     b.io/web-ble-das
   47770:	616f6268 2f736472 645f6369 2f6f6d65     hboards/ic_demo/
   47780:	00000000                                ....

00047784 <ns_power_current_version>:
   47784:	00ca0007 00000001 00000000              ............

00047790 <ns_power_oldest_supported_version>:
   47790:	00ca0007 00000000 00000001              ............

0004779c <ns_power_V1_0_0>:
   4779c:	00ca0007 00000001 00000000              ............

000477a8 <ns_timer_current_version>:
   477a8:	00ca0002 00000001 00000000              ............

000477b4 <ns_timer_oldest_supported_version>:
   477b4:	00ca0002 00000000 00000001              ............

000477c0 <ns_timer_V1_0_0>:
   477c0:	00ca0002 00000001 00000000              ............

000477cc <ns_camera_V1_0_0>:
   477cc:	00ca000a 00000001 00000000              ............

000477d8 <ArducamcameraOperations>:
   477d8:	0002c9b5 0002d069 0002c85d 0002c8a9     ....i...].......
   477e8:	0002c90d 0002cd31 0002c959 0002ca99     ....1...Y.......
   477f8:	0002cac5 0002ca21 0002ca49 0002c9f5     ....!...I.......
   47808:	0002c9d9 0002cb15 0002c7ad 0002cc95     ................
   47818:	0002c7c9 0002cb31 0002cb4d 0002cb69     ....1...M...i...
   47828:	0002cba1 0002cb85 0002c999 0002c7a9     ................
   47838:	0002cffd 0002d001 0002cfb1 0002cc21     ............!...
   47848:	0002cc65 0002cc35 0002cc41 0002cced     e...5...A.......
   47858:	0002cd11 0002cbbd 0002cbc9 0002cbd5     ................
   47868:	0002cbe1 0002cc11 0002d005 0002c76d     ............m...
   47878:	0002cc4d 0002cd69 0002ce8d 0002c905     M...i...........

00047888 <ns_usb_current_version>:
   47888:	00ca0006 00000001 00000000              ............

00047894 <ns_usb_oldest_supported_version>:
   47894:	00ca0006 00000000 00000001              ............

000478a0 <ns_usb_V1_0_0>:
   478a0:	00ca0006 00000001 00000000              ............

000478ac <_usbd_driver>:
   478ac:	0002e22d 0002e295 0002e2c1 0002e3bd     -...............
   478bc:	0002e485 00000000 0002f9e9 0002fa2d     ............-...
   478cc:	0002fa4d 0002bc2d 0002fb1d 00000000     M...-...........

000478dc <am_hal_cachectrl_defaults>:
   478dc:	0000030e                                ....

000478e0 <am_hal_daxi_defaults>:
   478e0:	0f020100 00000001                       ........

000478e8 <am_hal_gpio_pincfg_disabled>:
   478e8:	00000003                                ....

000478ec <am_hal_gpio_pincfg_output>:
   478ec:	00000183                                ....

000478f0 <am_hal_gpio_pincfg_pulledup_disabled>:
   478f0:	0000e083                                ....

000478f4 <g_ui32DSpintbl>:
   478f4:	8fc007e0 e3fbffff 01ffffff 00000000     ................

00047904 <am_hal_pwrctrl_peripheral_control>:
   47904:	40021004 00000001 40021008 00000001     ...@.......@....
   47914:	40021004 00000002 40021008 0000001e     ...@.......@....
   47924:	40021004 00000004 40021008 0000001e     ...@.......@....
   47934:	40021004 00000008 40021008 0000001e     ...@.......@....
   47944:	40021004 00000010 40021008 0000001e     ...@.......@....
   47954:	40021004 00000020 40021008 000001e0     ...@ ......@....
   47964:	40021004 00000040 40021008 000001e0     ...@@......@....
   47974:	40021004 00000080 40021008 000001e0     ...@.......@....
   47984:	40021004 00000100 40021008 000001e0     ...@.......@....
   47994:	40021004 00000200 40021008 00001e00     ...@.......@....
   479a4:	40021004 00000400 40021008 00001e00     ...@.......@....
   479b4:	40021004 00000800 40021008 00001e00     ...@.......@....
   479c4:	40021004 00001000 40021008 00001e00     ...@.......@....
   479d4:	40021004 00002000 40021008 00002000     ...@. .....@. ..
   479e4:	40021004 00004000 40021008 0001c000     ...@.@.....@....
   479f4:	40021004 00008000 40021008 0001c000     ...@.......@....
   47a04:	40021004 00010000 40021008 0001c000     ...@.......@....
   47a14:	40021004 00020000 40021008 00020000     ...@.......@....
   47a24:	40021004 00040000 40021008 00040000     ...@.......@....
   47a34:	40021004 00080000 40021008 00080000     ...@.......@....
   47a44:	40021004 00100000 40021008 00100000     ...@.......@....
   47a54:	40021004 00200000 40021008 00200000     ...@.. ....@.. .
   47a64:	40021004 00400000 40021008 00400000     ...@..@....@..@.
   47a74:	40021004 00800000 40021008 00800000     ...@.......@....
   47a84:	40021004 01000000 40021008 01000000     ...@.......@....
   47a94:	4002100c 00000001 40021010 000000ff     ...@.......@....
   47aa4:	4002100c 00000002 40021010 000000ff     ...@.......@....
   47ab4:	4002100c 00000004 40021010 000000ff     ...@.......@....
   47ac4:	4002100c 00000008 40021010 000000ff     ...@.......@....
   47ad4:	4002100c 00000010 40021010 000000ff     ...@.......@....
   47ae4:	4002100c 00000020 40021010 000000ff     ...@ ......@....
   47af4:	4002100c 00000040 40021010 000000ff     ...@@......@....
   47b04:	4002100c 00000080 40021010 000000ff     ...@.......@....
   47b14:	4002100c 00000400 40021010 00000400     ...@.......@....

00047b24 <g_DefaultMcuMemCfg>:
   47b24:	07070102 00000001                       ........

00047b2c <g_DefaultSRAMCfg>:
   47b2c:	00000003 00000300                       ........

00047b34 <g_VDDC_trimstbl>:
   47b34:	3c003cec 7f7ff05a 00000000              .<.<Z.......

00047b40 <g_VDDFLP_trimstbl>:
   47b40:	f500f5ec 08fefffe fd1108fe 1afc1a11     ................
   47b50:	2c23fb23 f9352cfa 3cf83c35 7f7ff75a     #.#,.,5.5<.<Z...
   47b60:	00000000                                ....

00047b64 <g_VDDF_trimstbl>:
   47b64:	f500f5ec 08fefffe fd1108fe 1afc1a11     ................
   47b74:	2c23fb23 f9352cfa 3cf83c35 7f7ff75a     #.#,.,5.5<.<Z...
   47b84:	00000000                                ....

00047b88 <g_memlpldo_trimstbl>:
   47b88:	f208f2ee faf607f6 05fefa06 020402fe     ................
   47b98:	0a060306 010e0a02 1200120e 1a16ff16     ................
   47ba8:	fd2a1afe 3cfc3c2a 7f7ffb5a 00000000     ..*.*<.<Z.......

00047bb8 <g_am_hal_bootrom_helper>:
   47bb8:	0800004d 08000051 08000055 08000059     M...Q...U...Y...
   47bc8:	0800006d 08000075 08000079 08000081     m...u...y.......
   47bd8:	08000099 0800009d                       ........

00047be0 <g_sBspUartConfig>:
   47be0:	0001c200 00000203 02020000              ............

00047bec <_ZTSN10__cxxabiv117__class_type_infoE>:
   47bec:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   47bfc:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   47c0c:	00000045                                E...

00047c10 <_ZTIN10__cxxabiv117__class_type_infoE>:
   47c10:	00047d70 00047bec 00047da4              p}...{...}..

00047c1c <_ZTVN10__cxxabiv117__class_type_infoE>:
   47c1c:	00000000 00047c10 00033ad5 00033ae9     .....|...:...:..
   47c2c:	00033ddd 00033ddd 00033b65 00033a95     .=...=..e;...:..
   47c3c:	00033b49 00033b05 00033ac9              I;...;...:..

00047c48 <_ZTSN10__cxxabiv120__function_type_infoE>:
   47c48:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   47c58:	6e75665f 6f697463 79745f6e 695f6570     _function_type_i
   47c68:	456f666e 00000000                       nfoE....

00047c70 <_ZTIN10__cxxabiv120__function_type_infoE>:
   47c70:	00047d70 00047c48 00047da4              p}..H|...}..

00047c7c <_ZTVN10__cxxabiv120__function_type_infoE>:
   47c7c:	00000000 00047c70 00033b95 00033ba9     ....p|...;...;..
   47c8c:	00033ddd 00033b91 00033de5 00033de1     .=...;...=...=..

00047c9c <_ZTSN9__gnu_cxx20recursive_init_errorE>:
   47c9c:	5f5f394e 5f756e67 32787863 63657230     N9__gnu_cxx20rec
   47cac:	69737275 695f6576 5f74696e 6f727265     ursive_init_erro
   47cbc:	00004572                                rE..

00047cc0 <_ZTIN9__gnu_cxx20recursive_init_errorE>:
   47cc0:	00047d70 00047c9c 00047df4              p}...|...}..

00047ccc <_ZTVN9__gnu_cxx20recursive_init_errorE>:
   47ccc:	00000000 00047cc0 00033c05 00033c19     .....|...<...<..
   47cdc:	000342b5                                .B..

00047ce0 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
   47ce0:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   47cf0:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
   47d00:	00456f66                                foE.

00047d04 <_ZTIN10__cxxabiv119__pointer_type_infoE>:
   47d04:	00047d70 00047ce0 00047f14              p}...|......

00047d10 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
   47d10:	00000000 00047d04 00033c45 00033c59     .....}..E<..Y<..
   47d20:	00033c41 00033ddd 00034ab9 00033de1     A<...=...J...=..
   47d30:	00033c75                                u<..

00047d34 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   47d34:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   47d44:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   47d54:	456f666e 00000000                       nfoE....

00047d5c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   47d5c:	00047d70 00047d34 00047c10              p}..4}...|..

00047d68 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   47d68:	00000000 00047d5c 00033cbd 00033cd1     ....\}...<...<..
   47d78:	00033ddd 00033ddd 00033b65 00033a95     .=...=..e;...:..
   47d88:	00033dad 00033d29 00033ced              .=..)=...<..

00047d94 <_ZTSSt9type_info>:
   47d94:	74397453 5f657079 6f666e69 00000000     St9type_info....

00047da4 <_ZTISt9type_info>:
   47da4:	00047c24 00047d94                       $|...}..

00047dac <_ZTSSt17bad_function_call>:
   47dac:	37317453 5f646162 636e7566 6e6f6974     St17bad_function
   47dbc:	6c61635f 0000006c                       _call...

00047dc4 <_ZTISt17bad_function_call>:
   47dc4:	00047d70 00047dac 00047df4              p}...}...}..

00047dd0 <_ZTVSt17bad_function_call>:
   47dd0:	00000000 00047dc4 00033ea5 00033eb9     .....}...>...>..
   47de0:	00033e9d                                .>..

00047de4 <_ZTSSt9exception>:
   47de4:	65397453 70656378 6e6f6974 00000000     St9exception....

00047df4 <_ZTISt9exception>:
   47df4:	00047c24 00047de4                       $|...}..

00047dfc <_ZTSSt13bad_exception>:
   47dfc:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   47e0c:	0000006e                                n...

00047e10 <_ZTISt13bad_exception>:
   47e10:	00047d70 00047dfc 00047df4              p}...}...}..

00047e1c <_ZTSN10__cxxabiv115__forced_unwindE>:
   47e1c:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   47e2c:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00047e3c <_ZTIN10__cxxabiv115__forced_unwindE>:
   47e3c:	00047c24 00047e1c                       $|...~..

00047e44 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   47e44:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   47e54:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   47e64:	00456e6f                                onE.

00047e68 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   47e68:	00047c24 00047e44                       $|..D~..

00047e70 <_ZTVSt13bad_exception>:
   47e70:	00000000 00047e10 000342b1 000342c5     .....~...B...B..
   47e80:	000342bd                                .B..

00047e84 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
   47e84:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
   47e94:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
   47ea4:	6e695f65 00456f66                       e_infoE.

00047eac <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
   47eac:	00047d70 00047e84 00047da4              p}...~...}..

00047eb8 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
   47eb8:	00000000 00047eac 00034a45 00034a59     .....~..EJ..YJ..
   47ec8:	00033ddd 00033ddd 00033de5 00033de1     .=...=...=...=..

00047ed8 <_ZTSDn>:
   47ed8:	00006e44                                Dn..

00047edc <_ZTIDn>:
   47edc:	00047ec0 00047ed8                       .~...~..

00047ee4 <_ZTSv>:
   47ee4:	00000076                                v...

00047ee8 <_ZTIv>:
   47ee8:	00047ec0 00047ee4                       .~...~..

00047ef0 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
   47ef0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   47f00:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
   47f10:	00000045                                E...

00047f14 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
   47f14:	00047d70 00047ef0 00047da4              p}...~...}..

00047f20 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
   47f20:	00000000 00047f14 00034a89 00034a9d     .........J...J..
   47f30:	00033ddd 00033ddd 00034ab9 00033de1     .=...=...J...=..
   47f40:	00034a75                                uJ..

00047f44 <_ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE2pm>:
   47f44:	ffffffff                                ....

00047f48 <_ZZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvjE3pmf>:
	...

00047f50 <_ZTSN10__cxxabiv129__pointer_to_member_type_infoE>:
   47f50:	5f30314e 7878635f 76696261 5f393231     N10__cxxabiv129_
   47f60:	696f705f 7265746e 5f6f745f 626d656d     _pointer_to_memb
   47f70:	745f7265 5f657079 6f666e69 00000045     er_type_infoE...

00047f80 <_ZTIN10__cxxabiv129__pointer_to_member_type_infoE>:
   47f80:	00047d70 00047f50 00047f14              p}..P.......

00047f8c <_ZTSSt11logic_error>:
   47f8c:	31317453 69676f6c 72655f63 00726f72     St11logic_error.

00047f9c <_ZTISt11logic_error>:
   47f9c:	00047d70 00047f8c 00047df4              p}.......}..

00047fa8 <_ZTSSt12length_error>:
   47fa8:	32317453 676e656c 655f6874 726f7272     St12length_error
   47fb8:	00000000                                ....

00047fbc <_ZTISt12length_error>:
   47fbc:	00047d70 00047fa8 00047f9c              p}..........

00047fc8 <_ZTVSt11logic_error>:
   47fc8:	00000000 00047f9c 00034cc5 00034d45     .........L..EM..
   47fd8:	00034cc1                                .L..

00047fdc <_ZTVSt12length_error>:
   47fdc:	00000000 00047fbc 00034d05 00034d8d     .........M...M..
   47fec:	00034cc1                                .L..

00047ff0 <CSWTCH.176>:
   47ff0:	0004030c 00040310 00040314              ............

00047ffc <standard_subs>:
   47ffc:	00000074 0003ffb4 00000003 0003ffb4     t...............
   4800c:	00000003 00000000 00000000 00000061     ............a...
   4801c:	00040318 0000000e 00040318 0000000e     ................
   4802c:	00040328 00000009 00000062 00040334     (.......b...4...
   4803c:	00000011 00040334 00000011 00040348     ....4.......H...
   4804c:	0000000c 00000073 00040358 0000000b     ....s...X.......
   4805c:	00040364 00000046 00040348 0000000c     d...F...H.......
   4806c:	00000069 000403ac 0000000c 000403bc     i...............
   4807c:	00000031 000403f0 0000000d 0000006f     1...........o...
   4808c:	00040400 0000000c 00040410 00000031     ............1...
   4809c:	00040444 0000000d 00000064 00040454     D.......d...T...
   480ac:	0000000d 00040464 00000032 00040498     ....d...2.......
   480bc:	0000000e                                ....

000480c0 <cplus_demangle_operators>:
   480c0:	000404a8 000404ac 00000002 00000002     ................
   480d0:	000404b0 000404b4 00000001 00000002     ................
   480e0:	000404b8 000402c8 00000002 00000002     ................
   480f0:	000404bc 000404c0 00000001 00000001     ................
   48100:	000404c4 000404c0 00000001 00000002     ................
   48110:	00040840 000404c8 00000008 00000001     @...............
   48120:	000404d4 000404d8 00000009 00000001     ................
   48130:	000404e4 000404c8 00000008 00000001     ................
   48140:	000404e8 000404ec 0000000a 00000002     ................
   48150:	00040194 000404f8 00000002 00000002     ................
   48160:	000404fc 00040500 00000001 00000002     ................
   48170:	00040504 00040508 00000001 00000001     ................
   48180:	0004050c 00040510 00000002 00000002     ................
   48190:	00040514 00040518 00000006 00000003     ................
   481a0:	00040520 00040524 00000009 00000001      ...$...........
   481b0:	00040530 00040534 0000000c 00000002     0...4...........
   481c0:	00040544 00040548 00000001 00000001     D...H...........
   481d0:	0004054c 000404b4 00000001 00000002     L...............
   481e0:	00040550 00040554 00000007 00000001     P...T...........
   481f0:	0004055c 00040560 00000002 00000002     \...`...........
   48200:	00040564 000406ac 00000001 00000002     d...............
   48210:	00040568 0004056c 00000001 00000002     h...l...........
   48220:	00040570 0004051c 00000002 00000002     p...............
   48230:	00040574 00040578 00000002 00000002     t...x...........
   48240:	0004057c 00040580 00000001 00000002     |...............
   48250:	00040584 00040588 00000002 00000002     ................
   48260:	0004058c 000401e4 00000003 00000003     ................
   48270:	00040590 000401e4 00000003 00000003     ................
   48280:	00040594 000401e4 00000003 00000002     ................
   48290:	00040598 000401e4 00000003 00000002     ................
   482a0:	0004059c 000405a0 00000002 00000002     ................
   482b0:	000405a4 0003ffd8 00000002 00000001     ................
   482c0:	000405a8 000403ec 00000001 00000002     ................
   482d0:	00040198 000405ac 00000002 00000002     ................
   482e0:	000405b0 000405b4 00000003 00000002     ................
   482f0:	0004071c 000405b8 00000002 00000002     ................
   48300:	000405bc 000405c0 0000000b 00000001     ................
   48310:	000405cc 000405d0 00000002 00000002     ................
   48320:	000405d4 000405d8 00000001 00000002     ................
   48330:	000405dc 000405e0 00000002 00000002     ................
   48340:	000405e4 000405e8 00000002 00000002     ................
   48350:	000405ec 000405f0 00000001 00000002     ................
   48360:	000405f4 00040548 00000001 00000002     ....H...........
   48370:	000405f8 000405fc 00000002 00000001     ................
   48380:	00040600 00040604 00000005 00000003     ................
   48390:	0004060c 00040610 00000002 00000002     ................
   483a0:	000407ec 000405f0 00000001 00000001     ................
   483b0:	00040614 00040618 00000001 00000001     ................
   483c0:	0004061c 00040620 00000003 00000003     .... ...........
   483d0:	00040624 00040628 00000002 00000002     $...(...........
   483e0:	0004062c 00040630 00000002 00000002     ,...0...........
   483f0:	00040324 00040634 00000001 00000002     $...4...........
   48400:	00040638 0004063c 00000002 00000002     8...<...........
   48410:	00040640 00040644 00000001 00000002     @...D...........
   48420:	00040648 0004064c 00000003 00000002     H...L...........
   48430:	00040650 00040654 00000002 00000001     P...T...........
   48440:	00040658 00040644 00000001 00000001     X...D...........
   48450:	0004065c 00040660 00000002 00000002     \...`...........
   48460:	0004019c 00040664 00000001 00000003     ....d...........
   48470:	00040668 0004066c 00000002 00000002     h...l...........
   48480:	00040670 00040674 00000003 00000002     p...t...........
   48490:	00040678 0004067c 00000010 00000002     x...|...........
   484a0:	00040690 00040694 00000001 00000002     ................
   484b0:	00040698 0004069c 00000002 00000002     ................
   484c0:	000406a0 000406a4 00000009 00000001     ................
   484d0:	000406b0 000406a4 00000009 00000001     ................
   484e0:	000406b4 000406b8 0000000b 00000002     ................
   484f0:	0004027c 000406c4 00000003 00000002     |...............
   48500:	000404f4 000406c8 00000007 00000001     ................
   48510:	000406d0 000406c8 00000007 00000001     ................
   48520:	000406d4 000406d8 00000005 00000000     ................
   48530:	000406e0 000406e4 00000006 00000001     ................
	...

00048550 <cplus_demangle_builtin_types>:
   48550:	000406ec 0000000b 000406ec 0000000b     ................
   48560:	00000000 000406f8 00000004 00040700     ................
   48570:	00000007 00000007 00040708 00000004     ................
   48580:	00040710 00000004 00000000 00040718     ................
   48590:	00000006 00040718 00000006 00000008     ................
   485a0:	00040720 0000000b 00040720 0000000b      ....... .......
   485b0:	00000008 0004072c 00000005 0004072c     ....,.......,...
   485c0:	00000005 00000008 00040734 0000000a     ........4.......
   485d0:	00040734 0000000a 00000008 00040740     4...........@...
   485e0:	0000000d 00040740 0000000d 00000000     ....@...........
   485f0:	00040750 00000003 00040750 00000003     P.......P.......
   48600:	00000001 00040754 0000000c 00040764     ....T.......d...
   48610:	00000008 00000002 00000000 00000000     ................
	...
   4862c:	00040770 00000004 00040770 00000004     p.......p.......
   4863c:	00000003 00040778 0000000d 00040778     ....x.......x...
   4864c:	0000000d 00000004 00040788 00000008     ................
   4865c:	00040788 00000008 00000000 00040794     ................
   4866c:	00000011 00040794 00000011 00000000     ................
	...
   486b8:	000407a8 00000005 000407a8 00000005     ................
   486c8:	00000000 000407b0 0000000e 000407b0     ................
   486d8:	0000000e 00000000 00000000 00000000     ................
	...
   486f4:	000407c0 00000004 000407c0 00000004     ................
   48704:	00000009 000407c8 00000007 00040708     ................
   48714:	00000004 00000000 000407d0 00000009     ................
   48724:	00040770 00000004 00000005 000407dc     p...............
   48734:	00000012 000407dc 00000012 00000006     ................
   48744:	000401e4 00000003 000401e4 00000003     ................
   48754:	00000000 000407f0 00000009 000407f0     ................
   48764:	00000009 00000000 000407fc 00000009     ................
   48774:	000407fc 00000009 00000000 00040808     ................
   48784:	0000000a 00040808 0000000a 00000000     ................
   48794:	00040814 00000004 00040814 00000004     ................
   487a4:	00000008 0004081c 00000007 0004081c     ................
   487b4:	00000007 00000000 00040824 00000008     ........$.......
   487c4:	00040824 00000008 00000000 00040830     $...........0...
   487d4:	00000008 00040830 00000008 00000000     ....0...........
   487e4:	0003ffb8 00000011 0003ffb8 00000011     ................
   487f4:	00000000 0004083c 00000006 0004083c     ....<.......<...
   48804:	00000006 00000008 00040844 0000000f     ........D.......
   48814:	00040844 0000000f 00000008              D...........

00048820 <tIomPinAlloc>:
   48820:	00510050 00610060 00840070 00940085     P.Q.`.a.p.......
   48830:	00a40095 01910190 01a101a0 01f001b0     ................
   48840:	020001f1 02100201 02210220 02310230     ........ .!.0.1.
   48850:	02f00240 030002f1 03100301 03d103d0     @...............
   48860:	03e103e0 016003f0 01700161 01800171     ......`.a.p.q...

00048870 <CSWTCH.20>:
   48870:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.
   48880:	02dc6c00                                .l..

00048884 <gAmHalCmdQReg>:
   48884:	40050228 4005022c 40050240 40050244     (..@,..@@..@D..@
   48894:	4005023c 00008000 40050230 00000001     <..@....0..@....
   488a4:	00000004 00000002 40051228 4005122c     ........(..@,..@
   488b4:	40051240 40051244 4005123c 00008000     @..@D..@<..@....
   488c4:	40051230 00000001 00000004 00000002     0..@............
   488d4:	40052228 4005222c 40052240 40052244     (".@,".@@".@D".@
   488e4:	4005223c 00008000 40052230 00000001     <".@....0".@....
   488f4:	00000004 00000002 40053228 4005322c     ........(2.@,2.@
   48904:	40053240 40053244 4005323c 00008000     @2.@D2.@<2.@....
   48914:	40053230 00000001 00000004 00000002     02.@............
   48924:	40054228 4005422c 40054240 40054244     (B.@,B.@@B.@DB.@
   48934:	4005423c 00008000 40054230 00000001     <B.@....0B.@....
   48944:	00000004 00000002 40055228 4005522c     ........(R.@,R.@
   48954:	40055240 40055244 4005523c 00008000     @R.@DR.@<R.@....
   48964:	40055230 00000001 00000004 00000002     0R.@............
   48974:	40056228 4005622c 40056240 40056244     (b.@,b.@@b.@Db.@
   48984:	4005623c 00008000 40056230 00000001     <b.@....0b.@....
   48994:	00000004 00000002 40057228 4005722c     ........(r.@,r.@
   489a4:	40057240 40057244 4005723c 00008000     @r.@Dr.@<r.@....
   489b4:	40057230 00000001 00000004 00000002     0r.@............
   489c4:	400602a0 400602a8 400602c0 400602c4     ...@...@...@...@
   489d4:	400602b8 00004000 400602ac 00000001     ...@.@.....@....
   489e4:	00000004 00000008 400612a0 400612a8     ...........@...@
   489f4:	400612c0 400612c4 400612b8 00004000     ...@...@...@.@..
   48a04:	400612ac 00000001 00000004 00000008     ...@............
   48a14:	400622a0 400622a8 400622c0 400622c4     .".@.".@.".@.".@
   48a24:	400622b8 00004000 400622ac 00000001     .".@.@...".@....
   48a34:	00000004 00000008                       ........
